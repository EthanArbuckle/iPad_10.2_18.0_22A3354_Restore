void JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::promoteLocalHeap(JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  int v17;
  BOOL v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  WTF *v42;
  int v43;
  int v44;
  BOOL v45;
  __int128 *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  int v74;
  int v75;
  BOOL v76;
  WTF *v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  int i;
  unsigned int v87;
  int v88;
  int v89;
  BOOL v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  WTF *v99;
  int v100;
  int v101;
  BOOL v102;
  _OWORD *v103;
  unsigned int v104;
  JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  size_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  JSC::DFG::BasicBlock **v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unint64_t v145;
  unint64_t v146;
  unsigned int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t casual;
  uint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE *v185;
  uint64_t v186;
  _QWORD *v187;
  unsigned int v188;
  uint64_t *v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  WTF *v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  WTF **v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  unint64_t v203;
  unint64_t v204;
  unsigned int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  unint64_t v211;
  unint64_t v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  uint64_t v224;
  _QWORD *v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  unsigned int v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t *v236;
  uint64_t v237;
  unint64_t *v238;
  uint64_t *v239;
  unint64_t v240;
  JSC::DFG::BasicBlock *v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  int v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unsigned int v251;
  unsigned int k;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  int v256;
  int v257;
  unsigned int v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  unsigned int v277;
  uint64_t v278;
  WTF *v280;
  JSC::DFG::BasicBlock *v281;
  uint64_t v282;
  _BYTE *v283;
  uint64_t v284;
  WTF **v285;
  unsigned int v286;
  WTF *v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  WTF *v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  int v305;
  int v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t *v318;
  _QWORD *v319;
  uint64_t v320;
  unsigned int v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  uint64_t v325;
  JSC::DFG::BasicBlock *v326;
  int v327;
  int v328;
  int v329;
  WTF *v330;
  uint64_t *v331;
  WTF **v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  unsigned int v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  JSC::DFG::Node *v344;
  unsigned int v345;
  unint64_t v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  int v352;
  unsigned int v353;
  uint64_t v354;
  int v355;
  int v356;
  int v358;
  int v359;
  unsigned int v360;
  int v361;
  int v362;
  int v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  unsigned int v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  int v383;
  uint64_t v384;
  uint64_t *v385;
  int v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unsigned int v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  JSC::DFG::Node *v407;
  JSC::DFG::Node *v408;
  uint64_t *v409;
  uint64_t v410;
  unint64_t v411;
  unsigned int v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unsigned int v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  unsigned int v430;
  unint64_t v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  unsigned int v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  JSC::DFG::Node *v450;
  uint64_t v451;
  unint64_t v452;
  uint64_t *v453;
  uint64_t v454;
  __int128 *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  void *v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t *v465;
  uint64_t v466;
  unsigned int v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  int v473;
  JSC::DFG::Node *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  void *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  __int128 *v488;
  uint64_t v489;
  _OWORD *v490;
  __int128 v491;
  uint64_t v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t v495;
  int v497;
  int j;
  int v499;
  uint64_t v500;
  unint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  void *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  __int128 *v516;
  int v517;
  int v518;
  uint64_t v519;
  unsigned int v520;
  uint64_t v521;
  int *v522;
  int v523;
  int v524;
  int v526;
  unsigned int v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  uint64_t v531;
  int v532;
  JSC::DFG::Node *v533;
  JSC::DFG::Node *v534;
  uint64_t *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t *v542;
  int v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unsigned int v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unsigned int v555;
  int v556;
  uint64_t v557;
  unint64_t v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  uint64_t v565;
  unsigned int v566;
  uint64_t *v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  __int128 *v578;
  unsigned int v579;
  uint64_t v581;
  uint64_t v582;
  uint64_t *v583;
  uint64_t v584;
  void *v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  void *v592;
  uint64_t v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  uint64_t v600;
  unint64_t v601;
  unint64_t v602;
  unint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  uint64_t v609;
  unint64_t v610;
  uint64_t *v611;
  JSC::DFG::Node *v612;
  uint64_t *v613;
  uint64_t v614;
  uint64_t v615;
  unint64_t v616;
  JSC::DFG::Node *v617;
  uint64_t v618;
  uint64_t v619;
  unint64_t v620;
  uint64_t v621;
  unint64_t v622;
  uint64_t *v623;
  uint64_t *v624;
  uint64_t v625;
  uint64_t v626;
  JSC::DFG::Node *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t *v636;
  uint64_t v637;
  int v638;
  unint64_t v639;
  unint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  void *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  JSC::DFG *v651;
  uint64_t v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  WTF *v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  int v665;
  unsigned int v666;
  uint64_t v667;
  uint64_t *v668;
  int v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  unsigned int v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  _QWORD *v679;
  unsigned int v680;
  uint64_t v681;
  BOOL v682;
  uint64_t *v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t v687;
  unsigned int v688;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  const void *v693;
  unint64_t v694;
  unint64_t v695;
  uint64_t *v696;
  uint64_t v697;
  int v698;
  unint64_t v699;
  unint64_t v700;
  unint64_t v701;
  unsigned int v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  void *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  int v716;
  unsigned int v717;
  _QWORD *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  _QWORD *v724;
  uint64_t v725;
  _QWORD *v726;
  int v727;
  WTF *v728;
  uint64_t v729;
  _QWORD *v730;
  unint64_t v731;
  unint64_t v732;
  unint64_t v733;
  _QWORD *v734;
  _QWORD *v735;
  void *v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  int v743;
  JSC::DFG *v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  WTF *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  int v757;
  int v758;
  unsigned int v759;
  uint64_t v760;
  uint64_t *v761;
  int v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  unsigned int v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  _QWORD *v772;
  unsigned int v773;
  uint64_t v774;
  uint64_t *v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  uint64_t v779;
  unsigned int v780;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  const void *v785;
  unint64_t v786;
  unint64_t v787;
  int v788;
  unint64_t v789;
  unint64_t v790;
  unint64_t v791;
  unsigned int v792;
  void *v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  void *v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  int v806;
  unsigned int v807;
  _QWORD *v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  _QWORD *v814;
  uint64_t v815;
  _QWORD *v816;
  int v817;
  WTF *v818;
  _QWORD *v819;
  uint64_t v820;
  unint64_t v821;
  unint64_t v822;
  unint64_t v823;
  _QWORD *v824;
  _QWORD *v825;
  void *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  int v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  int v837;
  unsigned int v838;
  uint64_t v839;
  int v840;
  unsigned int v841;
  uint64_t v842;
  void *v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  WTF *v850;
  uint64_t *v851;
  unsigned int v852;
  uint64_t v853;
  uint64_t v854;
  void *v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  void *v883;
  unint64_t *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  JSC::DFG::BasicBlock *v892;
  unint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  unsigned int v898;
  JSC::DFG::Node *v899;
  uint64_t v900;
  int v901;
  unint64_t v902;
  unint64_t v903;
  unint64_t v904;
  unsigned int v905;
  JSC::DFG::Node *v906;
  int v907;
  uint64_t v908;
  int v909;
  unint64_t v910;
  unint64_t v911;
  unint64_t v912;
  unsigned int v913;
  JSC::DFG::Node *v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  unint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  void *v924;
  uint64_t *v925;
  uint64_t v926;
  uint64_t v927;
  unsigned int v928;
  unint64_t v929;
  unint64_t v930;
  unint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  int v936;
  unint64_t v937;
  unint64_t v938;
  unsigned int v939;
  uint64_t *v940;
  uint64_t v941;
  unsigned int v942;
  uint64_t v943;
  JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *v944;
  uint64_t v945;
  uint64_t v946;
  int v947;
  unint64_t v948;
  unint64_t v949;
  unsigned int v950;
  uint64_t v951;
  int v952;
  uint64_t v953;
  uint64_t *v954;
  uint64_t v955;
  uint64_t v956;
  JSC::DFG::Node *v957;
  void *v958;
  unint64_t v959;
  uint64_t v960;
  int v961;
  unint64_t v962;
  unint64_t v963;
  unint64_t v964;
  unsigned int v965;
  JSC::DFG::Node *v966;
  int v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  unint64_t v973;
  uint64_t *v974;
  uint64_t v975;
  uint64_t v976;
  unint64_t v977;
  uint64_t v978;
  uint64_t *v979;
  uint64_t *v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  JSC::DFG::Node *v984;
  unint64_t v985;
  uint64_t v986;
  int v987;
  unint64_t v988;
  unint64_t v989;
  unint64_t v990;
  unsigned int v991;
  JSC::DFG::Node *v992;
  int v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  int v1001;
  unint64_t v1002;
  unint64_t v1003;
  unsigned int v1004;
  uint64_t *v1005;
  uint64_t v1006;
  uint64_t v1007;
  int v1008;
  uint64_t *v1009;
  uint64_t v1010;
  int v1011;
  uint64_t v1012;
  unint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  __int128 v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  JSC::DFG::Node *v1020;
  void *v1021;
  unint64_t v1022;
  uint64_t v1023;
  int v1024;
  unint64_t v1025;
  unint64_t v1026;
  unint64_t v1027;
  unsigned int v1028;
  JSC::DFG::Node *v1029;
  int v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t *v1035;
  uint64_t v1036;
  uint64_t v1037;
  unint64_t v1038;
  uint64_t *v1039;
  uint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  unint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t *v1053;
  int v1054;
  unsigned int v1055;
  uint64_t v1056;
  int v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  int v1061;
  unint64_t v1062;
  unint64_t v1063;
  unint64_t v1064;
  unsigned int v1065;
  JSC::DFG::Node *v1066;
  int v1067;
  uint64_t v1068;
  int v1069;
  unint64_t v1070;
  unint64_t v1071;
  unint64_t v1072;
  unsigned int v1073;
  JSC::DFG::Node *v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  int v1078;
  unint64_t v1079;
  unint64_t v1080;
  unint64_t v1081;
  unsigned int v1082;
  JSC::DFG::Node *v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  uint64_t v1087;
  unint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  unint64_t v1093;
  uint64_t *v1094;
  uint64_t *v1095;
  uint64_t v1096;
  uint64_t v1097;
  unsigned int v1098;
  unint64_t v1099;
  unint64_t v1100;
  unint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  unsigned int v1105;
  JSC::DFG::Node *v1106;
  uint64_t v1107;
  uint64_t v1108;
  void *v1109;
  uint64_t v1110;
  uint64_t v1111;
  JSC::DFG::Node *v1112;
  BOOL v1113;
  uint64_t v1114;
  JSC::DFG::Node *v1115;
  int v1116;
  unint64_t v1117;
  unint64_t v1118;
  unint64_t v1119;
  unsigned int v1120;
  JSC::DFG::Node *v1121;
  int v1122;
  uint64_t v1123;
  int v1124;
  JSC::DFG::Node *v1125;
  unint64_t v1126;
  unint64_t v1127;
  unint64_t v1128;
  unsigned int v1129;
  uint64_t v1130;
  JSC::DFG::Node *v1131;
  uint64_t v1132;
  int v1133;
  uint64_t v1134;
  int v1135;
  uint64_t v1136;
  unint64_t v1137;
  JSC::DFG::Node *v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  JSC::DFG::Node *v1144;
  BOOL v1145;
  uint64_t v1146;
  JSC::DFG::Node *v1147;
  int v1148;
  unint64_t v1149;
  unint64_t v1150;
  unint64_t v1151;
  unsigned int v1152;
  JSC::DFG::Node *v1153;
  int v1154;
  unsigned int v1155;
  __int16 v1156;
  unsigned int v1157;
  uint64_t v1158;
  unsigned int v1159;
  unint64_t v1160;
  uint64_t v1161;
  unint64_t v1162;
  unint64_t v1163;
  uint64_t v1164;
  unint64_t v1165;
  int v1166;
  int v1167;
  int v1168;
  _QWORD *v1169;
  int v1170;
  uint64_t *v1171;
  __int16 v1172;
  int v1173;
  int v1174;
  unint64_t v1175;
  unint64_t v1176;
  int v1177;
  int v1178;
  uint64_t v1179;
  int v1180;
  unint64_t v1181;
  unint64_t v1182;
  unsigned int v1183;
  uint64_t v1184;
  int v1185;
  unint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  unint64_t v1189;
  int v1190;
  _QWORD *v1191;
  uint64_t v1192;
  uint64_t *v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  unint64_t v1197;
  uint64_t v1198;
  unint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  int v1203;
  unint64_t v1204;
  unint64_t v1205;
  unint64_t v1206;
  unsigned int v1207;
  uint64_t v1208;
  int v1209;
  uint64_t v1210;
  uint64_t v1211;
  __int128 *v1212;
  __int128 v1213;
  _OWORD *v1214;
  uint64_t v1215;
  __int128 *v1216;
  __int128 v1217;
  _OWORD *v1218;
  uint64_t v1219;
  __int128 *v1220;
  _QWORD *v1221;
  _QWORD *v1222;
  unint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  JSC::DFG::BasicBlock *v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  int v1231;
  int v1232;
  unsigned int v1233;
  uint64_t v1234;
  unint64_t v1235;
  uint64_t *v1236;
  unsigned int v1237;
  WTF *v1238;
  int v1239;
  uint64_t v1240;
  uint64_t v1241;
  unint64_t v1242;
  JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  _QWORD *v1248;
  unsigned int v1249;
  unint64_t v1250;
  uint64_t v1251;
  WTF *v1252;
  WTF *v1253;
  uint64_t *v1254;
  uint64_t v1255;
  uint64_t v1256;
  unsigned int v1257;
  uint64_t v1258;
  uint64_t v1259;
  void *v1260;
  uint64_t v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  uint64_t *v1276;
  uint64_t *v1277;
  uint64_t v1278;
  unsigned int v1279;
  uint64_t v1280;
  unint64_t v1281;
  uint64_t *v1282;
  WTF *v1283;
  uint64_t v1284;
  WTF *v1285;
  uint64_t v1286;
  uint64_t v1287;
  uint64_t v1288;
  WTF *v1289;
  uint64_t *v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  uint64_t v1294;
  uint64_t v1295;
  int v1296;
  unint64_t v1297;
  unint64_t v1298;
  unint64_t v1299;
  unsigned int v1300;
  uint64_t v1301;
  int v1302;
  uint64_t v1303;
  int v1304;
  unsigned int v1305;
  int v1306;
  int v1307;
  int v1309;
  uint64_t v1310;
  unint64_t v1311;
  uint64_t *v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  unint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  unint64_t v1319;
  uint64_t v1320;
  unint64_t v1321;
  uint64_t *v1322;
  unsigned int v1323;
  unint64_t v1324;
  unint64_t v1325;
  unint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  int v1329;
  WTF *v1330;
  uint64_t v1331;
  unint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  unsigned int v1335;
  unint64_t v1336;
  unint64_t v1337;
  unint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  int v1341;
  unsigned int v1342;
  unint64_t v1343;
  unint64_t v1344;
  unint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  int v1348;
  int v1349;
  unsigned int v1350;
  int v1351;
  int v1352;
  int v1354;
  uint64_t v1355;
  unint64_t v1356;
  uint64_t *v1357;
  uint64_t v1358;
  uint64_t v1359;
  unint64_t v1360;
  uint64_t *v1361;
  uint64_t v1362;
  unint64_t v1363;
  uint64_t *v1364;
  uint64_t v1365;
  unsigned int v1366;
  unint64_t v1367;
  unint64_t v1368;
  unint64_t v1369;
  uint64_t v1370;
  uint64_t v1371;
  int v1372;
  uint64_t v1373;
  int v1374;
  uint64_t v1375;
  unint64_t v1376;
  uint64_t v1377;
  uint64_t v1378;
  unint64_t v1379;
  unint64_t v1380;
  uint64_t v1381;
  unint64_t v1382;
  unint64_t v1383;
  uint64_t v1384;
  unint64_t v1385;
  unint64_t v1386;
  uint64_t v1387;
  unsigned int v1388;
  unint64_t v1389;
  unint64_t v1390;
  unint64_t v1391;
  uint64_t v1392;
  uint64_t v1393;
  int v1394;
  uint64_t v1395;
  unint64_t v1396;
  unsigned int v1397;
  unint64_t v1398;
  unint64_t v1399;
  unint64_t v1400;
  uint64_t v1401;
  uint64_t v1402;
  int v1403;
  uint64_t v1404;
  unint64_t v1405;
  unsigned int v1406;
  unint64_t v1407;
  unint64_t v1408;
  unint64_t v1409;
  uint64_t v1410;
  uint64_t v1411;
  int v1412;
  uint64_t v1413;
  unsigned int v1414;
  unint64_t v1415;
  unint64_t v1416;
  unint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  int v1420;
  unsigned int v1421;
  unint64_t v1422;
  unint64_t v1423;
  unint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  int v1427;
  unint64_t v1428;
  unint64_t v1429;
  unint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  int v1433;
  uint64_t v1434;
  unint64_t v1435;
  uint64_t *v1436;
  __int128 *v1437;
  uint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  unint64_t v1445;
  uint64_t *v1446;
  unsigned int v1447;
  unint64_t v1448;
  unint64_t v1449;
  unint64_t v1450;
  uint64_t v1451;
  int v1452;
  uint64_t v1453;
  int v1454;
  uint64_t v1455;
  unint64_t v1456;
  uint64_t v1457;
  uint64_t v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  void *v1463;
  uint64_t v1464;
  uint64_t v1465;
  uint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  uint64_t v1469;
  __int128 *v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  unsigned int v1474;
  uint64_t v1475;
  int *v1476;
  int v1477;
  int v1478;
  int v1480;
  unsigned int v1481;
  unint64_t v1482;
  unint64_t v1483;
  unint64_t v1484;
  uint64_t v1485;
  int v1486;
  uint64_t v1487;
  JSC::DFG::Node *v1488;
  uint64_t *v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  uint64_t v1494;
  uint64_t v1495;
  int v1496;
  uint64_t v1497;
  unint64_t v1498;
  uint64_t v1499;
  unsigned int v1500;
  uint64_t v1501;
  uint64_t v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  unsigned int v1507;
  int v1508;
  uint64_t v1509;
  unint64_t v1510;
  unint64_t v1511;
  unint64_t v1512;
  unint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  int v1516;
  uint64_t v1517;
  unsigned int v1518;
  uint64_t v1519;
  uint64_t v1520;
  unint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  __int128 *v1529;
  unsigned int v1530;
  uint64_t *v1532;
  uint64_t v1533;
  uint64_t *v1534;
  uint64_t v1535;
  void *v1536;
  uint64_t v1537;
  uint64_t v1538;
  uint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  WTF *v1543;
  unint64_t v1544;
  unint64_t v1545;
  unint64_t v1546;
  uint64_t v1547;
  uint64_t v1548;
  int v1549;
  uint64_t v1550;
  unint64_t v1551;
  unint64_t v1552;
  unint64_t v1553;
  unint64_t v1554;
  uint64_t v1555;
  int v1556;
  uint64_t v1558;
  unint64_t v1559;
  uint64_t *v1560;
  uint64_t *v1561;
  uint64_t v1562;
  uint64_t v1563;
  unint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  unint64_t v1567;
  uint64_t v1568;
  unint64_t v1569;
  uint64_t *v1570;
  uint64_t *v1571;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v1572;
  JSC::DFG::Node *v1573;
  uint64_t v1574;
  uint64_t v1575;
  JSC::DFG::Node *v1576;
  uint64_t *v1577;
  uint64_t v1578;
  uint64_t v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  uint64_t v1583;
  unint64_t v1584;
  uint64_t v1585;
  int v1586;
  uint64_t v1587;
  uint64_t v1588;
  unint64_t v1589;
  unint64_t v1590;
  unsigned int v1591;
  _QWORD *v1592;
  uint64_t v1593;
  uint64_t v1594;
  int v1595;
  uint64_t v1596;
  int v1597;
  uint64_t v1598;
  unint64_t v1599;
  int v1600;
  _QWORD *v1601;
  _QWORD *v1602;
  int v1603;
  JSC::DFG::Node *v1604;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v1605;
  uint64_t v1606;
  uint64_t v1607;
  uint64_t v1608;
  uint64_t v1609;
  void *v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  unint64_t v1617;
  uint64_t v1618;
  __int128 *v1619;
  __int128 *v1620;
  int v1621;
  uint64_t *v1622;
  uint64_t v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  unint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  uint64_t v1630;
  JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *v1631;
  unint64_t v1632;
  uint64_t v1633;
  void *v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  __int128 v1643;
  unsigned int v1644;
  unint64_t v1645;
  unint64_t v1646;
  unint64_t v1647;
  uint64_t v1648;
  int v1649;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v1650;
  int v1651;
  uint64_t *v1652;
  uint64_t v1653;
  unsigned int v1654;
  unint64_t v1655;
  unint64_t v1656;
  unint64_t v1657;
  uint64_t v1658;
  int v1659;
  uint64_t v1660;
  unsigned int v1661;
  unint64_t v1662;
  unint64_t v1663;
  unint64_t v1664;
  uint64_t v1665;
  uint64_t v1666;
  int v1667;
  int v1668;
  JSC::DFG::Node *v1669;
  uint64_t v1670;
  uint64_t v1671;
  void *v1672;
  uint64_t v1673;
  uint64_t v1674;
  uint64_t v1675;
  JSC::DFG::Node *v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  void *v1681;
  uint64_t v1682;
  uint64_t v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  unsigned int v1688;
  unint64_t v1689;
  unint64_t v1690;
  unint64_t v1691;
  uint64_t v1692;
  int v1693;
  uint64_t v1694;
  unsigned int v1695;
  unint64_t v1696;
  unint64_t v1697;
  unint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  int v1701;
  JSC::DFG::Node *v1702;
  JSC::DFG::Node *v1703;
  uint64_t v1704;
  unsigned int v1705;
  unint64_t v1706;
  unint64_t v1707;
  unint64_t v1708;
  uint64_t v1709;
  int v1710;
  uint64_t *v1711;
  uint64_t v1712;
  unsigned int v1713;
  unint64_t v1714;
  unint64_t v1715;
  unint64_t v1716;
  uint64_t v1717;
  int v1718;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v1719;
  uint64_t *v1720;
  uint64_t v1721;
  unsigned int v1722;
  unint64_t v1723;
  unint64_t v1724;
  unint64_t v1725;
  uint64_t v1726;
  int v1727;
  uint64_t v1728;
  unsigned int v1729;
  unint64_t v1730;
  unint64_t v1731;
  unint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  int v1735;
  unsigned int v1736;
  unint64_t v1737;
  unint64_t v1738;
  unint64_t v1739;
  uint64_t v1740;
  int v1741;
  uint64_t v1742;
  unsigned int v1743;
  unint64_t v1744;
  unint64_t v1745;
  unint64_t v1746;
  uint64_t v1747;
  uint64_t v1748;
  int v1749;
  uint64_t v1750;
  uint64_t *v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  JSC::DFG::Node ***v1757;
  JSC::DFG::Node ***v1758;
  unsigned int v1759;
  WTF *v1760;
  JSC::DFG::Node **v1761;
  JSC::DFG::Node *v1762;
  JSC::DFG::Node *v1763;
  uint64_t v1764;
  uint64_t v1765;
  __int128 v1766;
  uint64_t v1767;
  uint64_t v1768;
  int v1769;
  uint64_t v1770;
  unint64_t v1771;
  unint64_t v1772;
  unsigned int v1773;
  uint64_t v1774;
  int v1775;
  uint64_t v1776;
  uint64_t v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  void *v1781;
  uint64_t v1782;
  uint64_t v1783;
  __int128 v1784;
  unsigned int v1785;
  uint64_t v1786;
  unint64_t *v1787;
  uint64_t v1788;
  unint64_t v1789;
  unint64_t v1790;
  uint64_t v1791;
  unsigned int v1792;
  unint64_t *v1793;
  uint64_t v1794;
  unint64_t v1795;
  unint64_t v1796;
  unsigned int v1797;
  uint64_t v1798;
  unint64_t *v1799;
  uint64_t v1800;
  unint64_t v1801;
  unint64_t v1802;
  unint64_t v1803;
  uint64_t v1804;
  uint64_t v1805;
  void *v1806;
  uint64_t v1807;
  unsigned int v1808;
  unint64_t v1809;
  unint64_t v1810;
  unint64_t v1811;
  uint64_t v1812;
  uint64_t v1813;
  int v1814;
  uint64_t v1815;
  unsigned int v1816;
  unint64_t v1817;
  unint64_t v1818;
  unint64_t v1819;
  uint64_t v1820;
  uint64_t v1821;
  int v1822;
  uint64_t v1823;
  int v1824;
  JSC::DFG::Node *v1825;
  unint64_t v1826;
  unint64_t v1827;
  unint64_t v1828;
  unsigned int v1829;
  JSC::DFG::Node *v1830;
  int v1831;
  int v1832;
  uint64_t v1833;
  int v1834;
  int v1835;
  BOOL v1836;
  char v1837;
  uint64_t v1838;
  uint64_t v1839;
  unint64_t v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  __int128 v1844;
  unsigned int v1845;
  uint64_t v1846;
  unint64_t *v1847;
  uint64_t v1848;
  unint64_t v1849;
  unint64_t v1850;
  uint64_t v1851;
  uint64_t *v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  uint64_t v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  uint64_t v1860;
  JSC::DFG::Node *Materialization;
  uint64_t v1862;
  uint64_t v1863;
  void *v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  uint64_t v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  uint64_t v1872;
  BOOL v1873;
  uint64_t v1874;
  uint64_t v1875;
  uint64_t v1876;
  BOOL v1877;
  uint64_t v1878;
  unint64_t v1879;
  JSC::DFG::Node *v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  uint64_t v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  uint64_t v1888;
  uint64_t **v1889;
  uint64_t **v1890;
  uint64_t *v1891;
  uint64_t v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  uint64_t v1898;
  void *v1899;
  uint64_t v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  uint64_t v1905;
  unint64_t v1906;
  _OWORD *v1907;
  uint64_t v1908;
  uint64_t v1909;
  _OWORD *v1910;
  JSC::DFG::Node *v1911;
  uint64_t v1912;
  unsigned int v1913;
  unint64_t *v1914;
  uint64_t v1915;
  unint64_t v1916;
  unint64_t v1917;
  uint64_t v1918;
  unsigned int v1919;
  unint64_t *v1920;
  uint64_t v1921;
  unint64_t v1922;
  unint64_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  BOOL v1926;
  uint64_t v1927;
  uint64_t v1928;
  uint64_t v1929;
  BOOL v1930;
  uint64_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  BOOL v1934;
  uint64_t v1935;
  uint64_t v1936;
  uint64_t v1937;
  BOOL v1938;
  uint64_t v1939;
  __int128 **v1940;
  uint64_t v1941;
  unint64_t v1942;
  uint64_t v1943;
  __int128 *v1944;
  uint64_t v1945;
  uint64_t v1946;
  __int128 v1947;
  uint64_t v1948;
  uint64_t v1949;
  WTF *v1950;
  unint64_t v1951;
  void *v1952;
  uint64_t v1953;
  uint64_t v1954;
  uint64_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  uint64_t v1958;
  uint64_t v1959;
  unsigned int *v1960;
  uint64_t v1961;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v1962;
  char v1963;
  uint64_t *v1964;
  uint64_t v1965;
  int v1966;
  uint64_t v1968;
  unint64_t v1969;
  uint64_t v1970;
  uint64_t v1971;
  char v1972;
  uint64_t *v1973;
  uint64_t v1974;
  uint64_t v1975;
  uint64_t *v1976;
  uint64_t v1977;
  int v1978;
  uint64_t v1980;
  unint64_t v1981;
  WTF *v1982;
  uint64_t v1983;
  char v1984;
  __int128 *v1985;
  uint64_t v1986;
  uint64_t v1987;
  unint64_t v1988;
  unint64_t v1989;
  uint64_t v1990;
  uint64_t v1991;
  BOOL v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  BOOL v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  unint64_t v2000;
  void *v2001;
  __int128 *v2002;
  uint64_t v2003;
  uint64_t v2004;
  BOOL v2005;
  uint64_t v2006;
  uint64_t v2007;
  uint64_t v2008;
  BOOL v2009;
  uint64_t v2010;
  uint64_t v2011;
  uint64_t v2012;
  uint64_t v2013;
  uint64_t v2014;
  uint64_t v2015;
  uint64_t v2016;
  uint64_t v2017;
  WTF *v2018;
  unint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  uint64_t v2022;
  uint64_t v2023;
  uint64_t v2024;
  uint64_t v2025;
  WTF *v2026;
  __int128 **v2027;
  uint64_t v2028;
  unint64_t v2029;
  uint64_t v2030;
  __int128 *v2031;
  uint64_t v2032;
  uint64_t v2033;
  __int128 v2034;
  uint64_t v2035;
  uint64_t v2036;
  JSC::DFG::Node *v2037;
  unint64_t v2038;
  unint64_t v2039;
  JSC::DFG::Node *v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  void *v2046;
  uint64_t v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  JSC::DFG::Node *Hint;
  uint64_t v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  void *v2060;
  uint64_t v2061;
  uint64_t v2062;
  uint64_t v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  int *v2067;
  WTF *v2069;
  __int128 *v2070;
  int *v2071;
  WTF *v2073;
  __int128 *v2074;
  uint64_t v2075;
  uint64_t v2076;
  BOOL v2077;
  uint64_t v2078;
  uint64_t v2079;
  uint64_t v2080;
  BOOL v2081;
  uint64_t v2082;
  uint64_t v2083;
  BOOL v2084;
  uint64_t v2085;
  uint64_t v2086;
  BOOL v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  BOOL v2091;
  uint64_t v2092;
  uint64_t v2093;
  uint64_t v2094;
  BOOL v2095;
  uint64_t v2096;
  uint64_t v2097;
  uint64_t v2098;
  BOOL v2099;
  uint64_t v2100;
  uint64_t v2101;
  uint64_t v2102;
  BOOL v2103;
  uint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  BOOL v2107;
  uint64_t v2108;
  uint64_t v2109;
  uint64_t v2110;
  BOOL v2111;
  uint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  void *v2115;
  uint64_t v2116;
  uint64_t v2117;
  uint64_t v2118;
  uint64_t v2119;
  uint64_t v2120;
  uint64_t v2121;
  unint64_t v2122;
  WTF *v2123;
  uint64_t v2124;
  uint64_t *v2125;
  uint64_t v2126;
  uint64_t v2127;
  BOOL v2128;
  BOOL v2129;
  uint64_t v2130;
  uint64_t v2131;
  uint64_t v2132;
  uint64_t v2133;
  uint64_t v2134;
  uint64_t v2135;
  uint64_t v2136;
  uint64_t v2137;
  uint64_t v2138;
  uint64_t v2139;
  uint64_t v2140;
  uint64_t v2141;
  uint64_t v2142;
  uint64_t v2143;
  unint64_t v2144;
  uint64_t *v2145;
  uint64_t v2146;
  unint64_t v2147;
  char v2148;
  WTF *v2149;
  JSC::DFG::SSACalculator *v2150;
  uint64_t *v2151;
  uint64_t *v2152;
  JSC::DFG::InsertionSet *v2153;
  JSC::DFG::SSACalculator *v2154;
  JSC::DFG::SSACalculator *v2155;
  int v2156;
  uint64_t v2157;
  uint64_t *v2158;
  uint64_t *v2159;
  WTF *v2160;
  uint64_t *v2161;
  uint64_t v2162;
  uint64_t v2163;
  uint64_t *v2164;
  uint64_t v2165;
  _QWORD *v2166;
  int v2167;
  uint64_t *v2168;
  unint64_t v2169;
  int v2170;
  int v2171;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v2172;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v2173;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v2174;
  uint64_t *v2175;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v2176;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v2177;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v2178;
  uint64_t *v2179;
  uint64_t v2180;
  unint64_t v2181;
  char v2182;
  int v2183;
  int v2184;
  uint64_t *v2185;
  unint64_t v2186;
  uint64_t v2187;
  uint64_t v2188;
  uint64_t *v2189;
  int v2190;
  int v2191;
  uint64_t v2192;
  uint64_t v2193;
  uint64_t *v2194;
  WTF *v2195;
  uint64_t v2196;
  uint64_t *v2197;
  uint64_t v2198;
  uint64_t v2199;
  uint64_t v2200;
  uint64_t *v2201;
  uint64_t *v2202;
  uint64_t *v2203;
  uint64_t *v2204;
  uint64_t v2205;
  unint64_t v2206;
  unsigned int v2207;
  unint64_t v2208;
  uint64_t v2209;
  JSC::DFG::Node *v2210;
  JSC::DFG::Node *v2211;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v2212;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v2213;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v2214;
  WTF *v2216;
  uint64_t v2217;
  uint64_t v2218;
  JSC::DFG::BasicBlock *v2219;
  unint64_t StatusReg;
  uint64_t v2221;
  uint64_t v2222;
  _BYTE v2223[24];
  uint64_t v2224;
  uint64_t v2225;
  __int16 v2226;
  uint64_t v2227;
  uint64_t v2228;
  __int16 v2229;
  char v2230;
  uint64_t v2231;
  uint64_t v2232;
  __int16 v2233;
  uint64_t v2234;
  uint64_t v2235;
  __int16 v2236;
  uint64_t v2237;
  uint64_t v2238;
  char v2239;
  char v2240;
  uint64_t v2241;
  _BYTE v2242[24];
  JSC::DFG::Node *v2243[3];
  _BYTE v2244[31];
  unsigned __int8 v2245;
  uint64_t v2246;
  uint64_t v2247;
  char v2248;
  char v2249;
  __int128 v2250;
  __int128 v2251;
  __int128 v2252;
  uint64_t v2253;
  uint64_t v2254;
  uint64_t v2255;
  __int16 v2256;
  uint64_t v2257;
  WTF *v2258;
  uint64_t v2259;
  WTF *v2260;
  uint64_t v2261;
  WTF *v2262;
  WTF *v2263;
  uint64_t v2264;
  __int128 v2265;
  _QWORD v2266[16];
  uint64_t v2267;
  JSC::DFG::BasicBlock *v2268[3];

  v2262 = 0;
  v8 = *((_QWORD *)this + 4);
  v2205 = *(unsigned int *)(v8 + 60);
  if ((_DWORD)v2205)
  {
    v9 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v9))
    {
      if (v2205 == ++v9)
        goto LABEL_5;
    }
    if ((_DWORD)v2205 != (_DWORD)v9)
    {
      v1254 = (uint64_t *)((char *)this + 512);
      v2202 = (uint64_t *)((char *)this + 536);
      v2204 = (uint64_t *)((char *)this + 520);
      v2189 = (uint64_t *)((char *)this + 424);
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      LODWORD(v1255) = v2205;
      v2198 = v8;
      v2214 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)this + 504);
      while (1)
      {
        if (v1255 <= v9)
        {
          __break(0xC471u);
          JUMPOUT(0x1984DEF10);
        }
        v1256 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v9);
        v1257 = *(_DWORD *)(v1256 + 8);
        if (*((_DWORD *)this + 121) <= v1257)
        {
          __break(0xC471u);
          JUMPOUT(0x1984DEF18);
        }
        v1258 = *((_QWORD *)this + 59);
        v1259 = v1258 + 40 * v1257;
        *((_BYTE *)this + 504) = *(_BYTE *)v1259;
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)&v2265, (_QWORD *)(v1259 + 8), a3, a4, a5, a6, a7, a8);
        v1267 = *((_QWORD *)this + 64);
        *((_QWORD *)this + 64) = v2265;
        *(_QWORD *)&v2265 = v1267;
        if (v1267)
          WTF::fastFree(v1267 - 16, v1260, v1261, v1262, v1263, v1264, v1265, v1266);
        v1268 = v1258 + 40 * v1257;
        *((_BYTE *)this + 528) = *(_BYTE *)(v1268 + 24);
        v1275 = *(unsigned int *)(v1256 + 220);
        if ((_DWORD)v1275)
          break;
LABEL_1437:
        v9 = (v9 + 1);
        v8 = v2198;
        v1255 = *(unsigned int *)(v2198 + 60);
        if (v1255 > v9)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v2198 + 48) + 8 * v9))
          {
            if (v1255 == ++v9)
            {
              LODWORD(v9) = *(_DWORD *)(v2198 + 60);
              break;
            }
          }
        }
        if ((_DWORD)v2205 == (_DWORD)v9)
          goto LABEL_5;
      }
      v1276 = *(uint64_t **)(v1256 + 208);
      v1277 = &v1276[v1275];
      while (1)
      {
        v1278 = *v1276;
        v2260 = 0;
        v1279 = *(unsigned __int16 *)(v1278 + 18);
        if (v1279 <= 0x85)
        {
          if (v1279 == 20)
            goto LABEL_1323;
          if (v1279 - 132 < 2)
          {
            v1355 = *(_QWORD *)(v1278 + 24);
            v1356 = v1355 & 0xFF00FFFFFFFFFFFFLL;
            if (v1357)
            {
              v1532 = v1357;
              if (*((_DWORD *)v1357 + 2) == 1)
              {
                v1533 = v1357[3];
                v2263 = 0;
                if ((v1533 & 1) == 0 || v1533 == 4)
                  v2263 = (WTF *)(v1533 & 0xFFFFFFFFFFFFFFFDLL);
                else
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v2263, v1357 + 3);
                v1534 = *(uint64_t **)(v1278 + 72);
                *(_QWORD *)&v2265 = 0;
                v1535 = *v1534;
                if ((*v1534 & 1) != 0 && v1535 != 4)
                {
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v2265, v1534);
                  v1535 = v2265;
                }
                *(_QWORD *)&v2265 = v1535 & 0xFFFFFFFFFFFFFFFDLL;
                JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)&v2263, (const JSC::DFG::StructureAbstractValue *)&v2265, a3, a4, a5, a6, a7, a8);
                if ((v2265 & 1) != 0)
                  WTF::fastFree(v2265 & 0xFFFFFFFFFFFFFFFCLL, v1536, v1537, v1538, v1539, v1540, v1541, v1542);
                if (((unint64_t)v2263 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                {
                  *(_QWORD *)&v2251 = *v1532;
                  *((_QWORD *)&v2251 + 1) = 13;
                  WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::add((uint64_t)&v2265, (uint64_t *)&v2262, (uint64_t)&v2251);
                }
                else
                {
                }
                v1543 = v2263;
                if ((v2263 & 1) != 0)
LABEL_2318:
                  WTF::fastFree((unint64_t)v1543 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
                goto LABEL_1310;
              }
            }
            v1358 = *v1254;
            if (!*v1254)
              goto LABEL_1310;
            v1421 = *(_DWORD *)(v1358 - 8);
            v1422 = (v1356 + ~(v1355 << 32)) ^ ((v1356 + ~(v1355 << 32)) >> 22);
            v1423 = 9 * ((v1422 + ~(v1422 << 13)) ^ ((v1422 + ~(v1422 << 13)) >> 8));
            v1424 = (v1423 ^ (v1423 >> 15)) + ~((v1423 ^ (v1423 >> 15)) << 27);
            v1425 = v1421 & ((v1424 >> 31) ^ v1424);
            v1426 = *(_QWORD *)(v1358 + 16 * v1425);
            if (v1426 != v1356)
            {
              v1427 = 1;
              while (v1426)
              {
                v1425 = ((_DWORD)v1425 + v1427) & v1421;
                v1426 = *(_QWORD *)(v1358 + 16 * v1425);
                ++v1427;
                if (v1426 == v1356)
                  goto LABEL_1512;
              }
LABEL_1511:
              v1425 = *(unsigned int *)(v1358 - 4);
            }
LABEL_1512:
            if (v1425 == *(_DWORD *)(v1358 - 4))
              goto LABEL_1310;
            v1453 = v1358 + 16 * v1425;
            goto LABEL_1514;
          }
          if (v1279 - 24 < 2)
          {
            v1379 = *(_QWORD *)(v1278 + 24);
            if ((*(_BYTE *)(v1278 + 56) & 0x10) != 0)
            {
              v1998 = *(_QWORD *)(v1278 + 32);
              if ((int)v1998 + (int)v1379 <= v1379)
                goto LABEL_1310;
              v1999 = *((_QWORD *)this + 4);
              v2000 = *(_QWORD *)(v1278 + 24);
              do
              {
                if (v2000 >= *(unsigned int *)(v1999 + 164))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DEF90);
                }
                a2 = *(_QWORD *)(*(_QWORD *)(v1999 + 152) + 8 * v2000);
                if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v1379 = *(_QWORD *)(v1278 + 24);
                  v1998 = *(_QWORD *)(v1278 + 32);
                }
                v1282 = 0;
                ++v2000;
              }
              while (v2000 < (v1379 + v1998));
            }
            else
            {
              v1380 = v1379 & 0xFF00FFFFFFFFFFFFLL;
              if ((v1379 & 0xFF00FFFFFFFFFFFFLL) == 0)
                goto LABEL_1310;
              if ((v1379 & 0x1000000000000) == 0)
              {
                v1381 = (v1379 >> 50) & 0x3F;
                if ((_DWORD)v1381)
                {
                  if (v1381 > 0x34)
                    goto LABEL_2618;
                  if (((1 << v1381) & 0x12798001880F84) == 0)
                  {
                    if (((1 << v1381) & 0xD867FFE77F07ALL) == 0)
                      goto LABEL_2618;
                    v1694 = *v1254;
                    if (*v1254)
                    {
                      v1695 = *(_DWORD *)(v1694 - 8);
                      v1696 = (v1380 + ~(v1379 << 32)) ^ ((v1380 + ~(v1379 << 32)) >> 22);
                      v1697 = 9 * ((v1696 + ~(v1696 << 13)) ^ ((v1696 + ~(v1696 << 13)) >> 8));
                      v1698 = (v1697 ^ (v1697 >> 15)) + ~((v1697 ^ (v1697 >> 15)) << 27);
                      v1699 = v1695 & ((v1698 >> 31) ^ v1698);
                      v1700 = *(_QWORD *)(v1694 + 16 * v1699);
                      if (v1700 != v1380)
                      {
                        v1701 = 1;
                        while (v1700)
                        {
                          v1699 = ((_DWORD)v1699 + v1701) & v1695;
                          v1700 = *(_QWORD *)(v1694 + 16 * v1699);
                          ++v1701;
                          if (v1700 == v1380)
                            goto LABEL_2078;
                        }
                        v1699 = *(unsigned int *)(v1694 - 4);
                      }
LABEL_2078:
                      if (v1699 != *(_DWORD *)(v1694 - 4))
                      {
                        a2 = *(_QWORD *)(v1694 + 16 * v1699 + 8);
                        if (a2)
                      }
                    }
                  }
                }
              }
              v1382 = *(_QWORD *)(v1278 + 32);
              v1383 = v1382 & 0xFF00FFFFFFFFFFFFLL;
              if ((v1382 & 0xFF00FFFFFFFFFFFFLL) == 0)
                goto LABEL_1310;
              if ((v1382 & 0x1000000000000) == 0)
              {
                v1384 = (v1382 >> 50) & 0x3F;
                if ((_DWORD)v1384)
                {
                  if (v1384 > 0x34)
                    goto LABEL_2618;
                  if (((1 << v1384) & 0x12798001880F84) == 0)
                  {
                    if (((1 << v1384) & 0xD867FFE77F07ALL) == 0)
                      goto LABEL_2618;
                    v1742 = *v1254;
                    if (*v1254)
                    {
                      v1743 = *(_DWORD *)(v1742 - 8);
                      v1744 = (v1383 + ~(v1382 << 32)) ^ ((v1383 + ~(v1382 << 32)) >> 22);
                      v1745 = 9 * ((v1744 + ~(v1744 << 13)) ^ ((v1744 + ~(v1744 << 13)) >> 8));
                      v1746 = (v1745 ^ (v1745 >> 15)) + ~((v1745 ^ (v1745 >> 15)) << 27);
                      v1747 = v1743 & ((v1746 >> 31) ^ v1746);
                      v1748 = *(_QWORD *)(v1742 + 16 * v1747);
                      if (v1748 != v1383)
                      {
                        v1749 = 1;
                        while (v1748)
                        {
                          v1747 = ((_DWORD)v1747 + v1749) & v1743;
                          v1748 = *(_QWORD *)(v1742 + 16 * v1747);
                          ++v1749;
                          if (v1748 == v1383)
                            goto LABEL_2135;
                        }
                        v1747 = *(unsigned int *)(v1742 - 4);
                      }
LABEL_2135:
                      if (v1747 != *(_DWORD *)(v1742 - 4))
                      {
                        a2 = *(_QWORD *)(v1742 + 16 * v1747 + 8);
                        if (a2)
                      }
                    }
                  }
                }
              }
              v1282 = 0;
              v1385 = *(_QWORD *)(v1278 + 40);
              v1386 = v1385 & 0xFF00FFFFFFFFFFFFLL;
              if ((v1385 & 0xFF00FFFFFFFFFFFFLL) != 0 && (v1385 & 0x1000000000000) == 0)
              {
                v1282 = 0;
                v1387 = (v1385 >> 50) & 0x3F;
                if ((_DWORD)v1387)
                {
                  if (v1387 > 0x34)
                    goto LABEL_2618;
                  if (((1 << v1387) & 0x12798001880F84) == 0)
                  {
                    if (((1 << v1387) & 0xD867FFE77F07ALL) == 0)
                    {
LABEL_2618:
                      __break(0xC471u);
                      JUMPOUT(0x1984DEF68);
                    }
                    v1815 = *v1254;
                    if (*v1254)
                    {
                      v1816 = *(_DWORD *)(v1815 - 8);
                      v1817 = (v1386 + ~(v1385 << 32)) ^ ((v1386 + ~(v1385 << 32)) >> 22);
                      v1818 = 9 * ((v1817 + ~(v1817 << 13)) ^ ((v1817 + ~(v1817 << 13)) >> 8));
                      v1819 = (v1818 ^ (v1818 >> 15)) + ~((v1818 ^ (v1818 >> 15)) << 27);
                      v1820 = v1816 & ((v1819 >> 31) ^ v1819);
                      v1821 = *(_QWORD *)(v1815 + 16 * v1820);
                      if (v1821 != v1386)
                      {
                        v1822 = 1;
                        while (v1821)
                        {
                          v1820 = ((_DWORD)v1820 + v1822) & v1816;
                          v1821 = *(_QWORD *)(v1815 + 16 * v1820);
                          ++v1822;
                          if (v1821 == v1386)
                            goto LABEL_2233;
                        }
                        v1820 = *(unsigned int *)(v1815 - 4);
                      }
LABEL_2233:
                      if (v1820 != *(_DWORD *)(v1815 - 4))
                      {
                        v1453 = v1815 + 16 * v1820;
                        goto LABEL_1514;
                      }
                    }
LABEL_1310:
                    v1282 = 0;
                    goto LABEL_1311;
                  }
                }
              }
            }
            goto LABEL_1311;
          }
          goto LABEL_1308;
        }
        if (*(unsigned __int16 *)(v1278 + 18) > 0x158u)
        {
          if (v1279 - 420 < 7)
            goto LABEL_1323;
          if (v1279 - 359 < 4)
          {
            *(_QWORD *)&v2251 = **(_QWORD **)(v1278 + 72);
            v1499 = *(_QWORD *)(v2251 + 112);
            if ((v1499 & 1) != 0)
              v1500 = (v1499 >> 1) & 3;
            else
              v1500 = *(unsigned __int8 *)(v1499 + 4);
            LOBYTE(v2263) = v1500 != 2;
            WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(&v2265, v2189, (uint64_t *)&v2251, &v2263, a5, a6, a7, a8);
            if (*(_BYTE *)(v2265 + 8))
            {
LABEL_1886:
              goto LABEL_1310;
            }
            v1507 = *(unsigned __int16 *)(v1278 + 18) - 360;
            if (v1507 > 2)
              v1508 = 3;
            else
              v1508 = dword_1991563D8[(__int16)v1507];
            v2263 = (WTF *)9;
            v1562 = *(_QWORD *)(v1278 + 72);
            *(_QWORD *)&v2251 = 0;
            *((_QWORD *)&v2251 + 1) = v1562;
            WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, (uint64_t *)&v2260, &v2263, &v2251);
            v2263 = (WTF *)8;
            v1563 = *(_QWORD *)(v1278 + 24);
            v1564 = v1563 & 0xFF00FFFFFFFFFFFFLL;
            *(_QWORD *)&v2251 = v1563 & 0xFF00FFFFFFFFFFFFLL;
            *((_QWORD *)&v2251 + 1) = 0;
            if ((v1563 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v1377 = *(unsigned __int16 *)((v1563 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v1377 <= 2)
              {
                v1378 = *(_QWORD *)(v1564 + 72);
                *((_QWORD *)&v2251 + 1) = v1378;
                if ((_DWORD)v1377)
                {
                  if ((_DWORD)v1377 != 1)
                    goto LABEL_2533;
LABEL_2349:
                  *((_QWORD *)&v2251 + 1) = v1377 | v1378;
                }
              }
            }
            goto LABEL_1422;
          }
          if (v1279 == 345)
          {
            *(_QWORD *)&v2251 = **(_QWORD **)(v1278 + 72);
            v1517 = *(_QWORD *)(v2251 + 40);
            if ((v1517 & 1) != 0)
              v1518 = (v1517 >> 1) & 3;
            else
              v1518 = *(unsigned __int8 *)(v1517 + 4);
            LOBYTE(v2263) = v1518 != 2;
            WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(&v2265, v2189, (uint64_t *)&v2251, &v2263, a5, a6, a7, a8);
            if (*(_BYTE *)(v2265 + 8))
              goto LABEL_1886;
            v2263 = (WTF *)2;
            v1519 = *(_QWORD *)(v1278 + 72);
            *(_QWORD *)&v2251 = 0;
            *((_QWORD *)&v2251 + 1) = v1519;
            WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, (uint64_t *)&v2260, &v2263, &v2251);
            v2263 = (WTF *)1;
            v1520 = *(_QWORD *)(v1278 + 24);
            v1521 = v1520 & 0xFF00FFFFFFFFFFFFLL;
            *(_QWORD *)&v2251 = v1520 & 0xFF00FFFFFFFFFFFFLL;
            *((_QWORD *)&v2251 + 1) = 0;
            if ((v1520 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v1574 = *(unsigned __int16 *)((v1520 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v1574 <= 2)
              {
                v1721 = *(_QWORD *)(v1521 + 72);
                *((_QWORD *)&v2251 + 1) = v1721;
                if ((_DWORD)v1574)
                {
                  if ((_DWORD)v1574 != 1)
                    v1574 = 2;
                  *((_QWORD *)&v2251 + 1) = v1574 | v1721;
                }
              }
            }
            WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, (uint64_t *)&v2260, &v2263, &v2251);
            v1522 = **(_QWORD **)(v1278 + 72);
            v1529 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), **(_QWORD **)(v1278 + 80), v1523, v1524, v1525, v1526, v1527, v1528);
            *(_QWORD *)&v2251 = 0;
            *((_QWORD *)&v2251 + 1) = v1529;
            if (*(_DWORD *)(v1522 + 16) != -1)
            {
              v1530 = 0;
              do
              {
                LODWORD(v2263) = 6;
                HIDWORD(v2263) = v1530;
                WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode&>((uint64_t)&v2265, (uint64_t *)&v2260, &v2263, &v2251);
                ++v1530;
              }
              while (v1530 < *(_DWORD *)(v1522 + 16) + 1);
            }
            goto LABEL_1311;
          }
          goto LABEL_1308;
        }
        if (*(unsigned __int16 *)(v1278 + 18) <= 0xAAu)
        {
          switch(*(_WORD *)(v1278 + 18))
          {
            case 0x98:
            case 0x99:
              v1310 = *(_QWORD *)(v1278 + 32);
              v1311 = v1310 & 0xFF00FFFFFFFFFFFFLL;
              v1282 = v1312;
              if (v1312 && *((_DWORD *)v1312 + 2) == 1)
              {
                v1471 = *(unsigned int *)(*(_QWORD *)(v1278 + 72) + 4);
                v1472 = 11;
                goto LABEL_1525;
              }
              v1313 = *v1254;
              if (!*v1254)
                goto LABEL_1311;
              v1395 = *(_QWORD *)(v1278 + 24);
              v1396 = v1395 & 0xFF00FFFFFFFFFFFFLL;
              v1397 = *(_DWORD *)(v1313 - 8);
              v1398 = ((v1395 & 0xFF00FFFFFFFFFFFFLL) + ~(v1395 << 32)) ^ (((v1395 & 0xFF00FFFFFFFFFFFFLL)
                                                                          + ~(v1395 << 32)) >> 22);
              v1399 = 9 * ((v1398 + ~(v1398 << 13)) ^ ((v1398 + ~(v1398 << 13)) >> 8));
              v1400 = (v1399 ^ (v1399 >> 15)) + ~((v1399 ^ (v1399 >> 15)) << 27);
              v1401 = v1397 & ((v1400 >> 31) ^ v1400);
              v1402 = *(_QWORD *)(v1313 + 16 * v1401);
              if (v1402 == v1396)
                goto LABEL_1494;
              v1403 = 1;
              while (v1402)
              {
                v1401 = ((_DWORD)v1401 + v1403) & v1397;
                v1402 = *(_QWORD *)(v1313 + 16 * v1401);
                ++v1403;
                if (v1402 == v1396)
                  goto LABEL_1494;
              }
              v1401 = *(unsigned int *)(v1313 - 4);
LABEL_1494:
              if (v1401 == *(_DWORD *)(v1313 - 4))
                goto LABEL_1495;
              a2 = *(_QWORD *)(v1313 + 16 * v1401 + 8);
              if (!a2)
                goto LABEL_1495;
              v1313 = *v1254;
              if (!*v1254)
                goto LABEL_1311;
              v1310 = *(_QWORD *)(v1278 + 32);
              v1311 = v1310 & 0xFF00FFFFFFFFFFFFLL;
              v1397 = *(_DWORD *)(v1313 - 8);
LABEL_1495:
              v1428 = (v1311 + ~(v1310 << 32)) ^ ((v1311 + ~(v1310 << 32)) >> 22);
              v1429 = 9 * ((v1428 + ~(v1428 << 13)) ^ ((v1428 + ~(v1428 << 13)) >> 8));
              v1430 = (v1429 ^ (v1429 >> 15)) + ~((v1429 ^ (v1429 >> 15)) << 27);
              v1431 = v1397 & ((v1430 >> 31) ^ v1430);
              v1432 = *(_QWORD *)(v1313 + 16 * v1431);
              if (v1432 == v1311)
                goto LABEL_1540;
              v1433 = 1;
              do
              {
                if (!v1432)
                  goto LABEL_1539;
                v1431 = ((_DWORD)v1431 + v1433) & v1397;
                v1432 = *(_QWORD *)(v1313 + 16 * v1431);
                ++v1433;
              }
              while (v1432 != v1311);
              goto LABEL_1540;
            case 0x9A:
              v1558 = *(_QWORD *)(v1278 + 24);
              v1559 = v1558 & 0xFF00FFFFFFFFFFFFLL;
              if (!v1560 || (v1973 = v1560, *((_DWORD *)v1560 + 2) != 1))
              {
                v1358 = *v1254;
                if (!*v1254)
                  goto LABEL_1310;
                v1654 = *(_DWORD *)(v1358 - 8);
                v1655 = (v1559 + ~(v1558 << 32)) ^ ((v1559 + ~(v1558 << 32)) >> 22);
                v1656 = 9 * ((v1655 + ~(v1655 << 13)) ^ ((v1655 + ~(v1655 << 13)) >> 8));
                v1657 = (v1656 ^ (v1656 >> 15)) + ~((v1656 ^ (v1656 >> 15)) << 27);
                v1425 = v1654 & ((v1657 >> 31) ^ v1657);
                v1658 = *(_QWORD *)(v1358 + 16 * v1425);
                if (v1658 != v1559)
                {
                  v1659 = 1;
                  do
                  {
                    if (!v1658)
                      goto LABEL_1511;
                    v1425 = ((_DWORD)v1425 + v1659) & v1654;
                    v1658 = *(_QWORD *)(v1358 + 16 * v1425);
                    ++v1659;
                  }
                  while (v1658 != v1559);
                }
                goto LABEL_1512;
              }
              v1974 = *(_QWORD *)(v1278 + 72);
              v2258 = 0;
              v1975 = *(unsigned int *)(v1974 + 20);
              if (!(_DWORD)v1975)
                goto LABEL_2316;
              v2182 = 0;
              v2176 = (JSC::DFG::_anonymous_namespace_::LocalHeap *)v1974;
              v1976 = *(uint64_t **)(v1974 + 8);
              v1977 = 32 * v1975;
              do
              {
                if (WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::overlaps(v1973 + 3, v1976))
                {
                  v1978 = *((_DWORD *)v1976 + 6);
                  if (v1978 == 1 || v1978 == 3)
                  {
                    v2182 = 1;
                  }
                  else
                  {
                    if (v1978 != 2)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984DEF88);
                    }
                    v1980 = *v1976;
                    if ((*v1976 & 1) != 0)
                    {
                      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)&v2258, v1976);
                    }
                    else
                    {
                      v1981 = v1980 & 0xFFFFFFFFFFFFFFFCLL;
                      if ((v1980 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                      {
                        if ((v2258 & 1) != 0)
                        {
                          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)&v2258, v1981);
                        }
                        else if (((unint64_t)v2258 & 0xFFFFFFFFFFFFFFFCLL) != v1981)
                        {
                          if (((unint64_t)v2258 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                          {
                            v2169 = v1980 & 0xFFFFFFFFFFFFFFFCLL;
                            v1983 = WTF::fastMalloc((WTF *)0x28);
                            *(_QWORD *)v1983 = 0x400000002;
                            v1984 = (char)v2258;
                            *(_QWORD *)(v1983 + 8) = (unint64_t)v2258 & 0xFFFFFFFFFFFFFFFCLL;
                            *(_QWORD *)(v1983 + 16) = v2169;
                            v1982 = (WTF *)(v1984 & 2 | (unint64_t)v1983 | 1);
                          }
                          else
                          {
                            v1982 = (WTF *)(v2258 & 2 | v1981);
                          }
                          v2258 = v1982;
                        }
                      }
                    }
                  }
                }
                v1976 += 4;
                v1977 -= 32;
              }
              while (v1977);
              if ((v2182 & 1) == 0 && ((unint64_t)v2258 & 0xFFFFFFFFFFFFFFFDLL) != 0)
              {
                v2019 = ((unint64_t)*(unsigned int *)v2176 << 32) | 0xB;
                *(_QWORD *)&v2251 = *v1973;
                *((_QWORD *)&v2251 + 1) = v2019;
                WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::add((uint64_t)&v2265, (uint64_t *)&v2262, (uint64_t)&v2251);
                if ((WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::isSubsetOf(v1973 + 3, (uint64_t *)&v2258) & 1) == 0)
                {
                  *(_QWORD *)&v2251 = *v1973;
                  *((_QWORD *)&v2251 + 1) = 13;
                  WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::add((uint64_t)&v2265, (uint64_t *)&v2262, (uint64_t)&v2251);
                }
                if (v2026)
                {
                  *(_QWORD *)&v2251 = v1278;
                  v2263 = v2026;
                  WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v1254, (uint64_t *)&v2251, (uint64_t *)&v2263, a4, a5, a6, a7, a8, (uint64_t)&v2265);
                }
              }
              else
              {
LABEL_2316:
              }
              v1543 = v2258;
              if ((v2258 & 1) == 0)
                goto LABEL_1310;
              goto LABEL_2318;
            case 0x9B:
              v1359 = *(_QWORD *)(v1278 + 32);
              v1360 = v1359 & 0xFF00FFFFFFFFFFFFLL;
              v1282 = v1361;
              if (!v1361 || *((_DWORD *)v1361 + 2) != 1)
              {
                v1365 = *v1254;
                if (!*v1254)
                  goto LABEL_1311;
                v1404 = *(_QWORD *)(v1278 + 24);
                v1405 = v1404 & 0xFF00FFFFFFFFFFFFLL;
                v1406 = *(_DWORD *)(v1365 - 8);
                v1407 = ((v1404 & 0xFF00FFFFFFFFFFFFLL) + ~(v1404 << 32)) ^ (((v1404 & 0xFF00FFFFFFFFFFFFLL)
                                                                            + ~(v1404 << 32)) >> 22);
                v1408 = 9 * ((v1407 + ~(v1407 << 13)) ^ ((v1407 + ~(v1407 << 13)) >> 8));
                v1409 = (v1408 ^ (v1408 >> 15)) + ~((v1408 ^ (v1408 >> 15)) << 27);
                v1410 = v1406 & ((v1409 >> 31) ^ v1409);
                v1411 = *(_QWORD *)(v1365 + 16 * v1410);
                if (v1411 != v1405)
                {
                  v1412 = 1;
                  while (v1411)
                  {
                    v1410 = ((_DWORD)v1410 + v1412) & v1406;
                    v1411 = *(_QWORD *)(v1365 + 16 * v1410);
                    ++v1412;
                    if (v1411 == v1405)
                      goto LABEL_1586;
                  }
                  v1410 = *(unsigned int *)(v1365 - 4);
                }
LABEL_1586:
                if (v1410 != *(_DWORD *)(v1365 - 4))
                {
                  a2 = *(_QWORD *)(v1365 + 16 * v1410 + 8);
                  if (a2)
                  {
                    v1365 = *v1254;
                    if (!*v1254)
                      goto LABEL_1311;
                    v1359 = *(_QWORD *)(v1278 + 32);
                    v1360 = v1359 & 0xFF00FFFFFFFFFFFFLL;
                    v1406 = *(_DWORD *)(v1365 - 8);
                  }
                }
                v1544 = (v1360 + ~(v1359 << 32)) ^ ((v1360 + ~(v1359 << 32)) >> 22);
                v1545 = 9 * ((v1544 + ~(v1544 << 13)) ^ ((v1544 + ~(v1544 << 13)) >> 8));
                v1546 = (v1545 ^ (v1545 >> 15)) + ~((v1545 ^ (v1545 >> 15)) << 27);
                v1547 = v1406 & ((v1546 >> 31) ^ v1546);
                v1548 = *(_QWORD *)(v1365 + 16 * v1547);
                if (v1548 != v1360)
                {
                  v1549 = 1;
                  while (v1548)
                  {
                    v1547 = ((_DWORD)v1547 + v1549) & v1406;
                    v1548 = *(_QWORD *)(v1365 + 16 * v1547);
                    ++v1549;
                    if (v1548 == v1360)
                      goto LABEL_1593;
                  }
                  v1547 = *(unsigned int *)(v1365 - 4);
                }
LABEL_1593:
                if (v1547 != *(_DWORD *)(v1365 - 4))
                {
                  a2 = *(_QWORD *)(v1365 + 16 * v1547 + 8);
                  if (a2)
                  {
                    v1365 = *v1254;
                    if (!*v1254)
                      goto LABEL_1311;
                    v1406 = *(_DWORD *)(v1365 - 8);
                  }
                }
                v1550 = *(_QWORD *)(v1278 + 40);
                v1551 = v1550 & 0xFF00FFFFFFFFFFFFLL;
                v1552 = ((v1550 & 0xFF00FFFFFFFFFFFFLL) + ~(v1550 << 32)) ^ (((v1550 & 0xFF00FFFFFFFFFFFFLL)
                                                                            + ~(v1550 << 32)) >> 22);
                v1553 = 9 * ((v1552 + ~(v1552 << 13)) ^ ((v1552 + ~(v1552 << 13)) >> 8));
                v1554 = (v1553 ^ (v1553 >> 15)) + ~((v1553 ^ (v1553 >> 15)) << 27);
                v1514 = v1406 & ((v1554 >> 31) ^ v1554);
                v1555 = *(_QWORD *)(v1365 + 16 * v1514);
                if (v1555 == v1551)
                  goto LABEL_1600;
                v1556 = 1;
                do
                {
                  if (!v1555)
                    goto LABEL_1599;
                  v1514 = ((_DWORD)v1514 + v1556) & v1406;
                  v1555 = *(_QWORD *)(v1365 + 16 * v1514);
                  ++v1556;
                }
                while (v1555 != v1551);
                goto LABEL_1600;
              }
              v1374 = *(_DWORD *)(*(_QWORD *)(v1278 + 72) + 4);
              LODWORD(v2263) = 11;
              HIDWORD(v2263) = v1374;
              v1375 = *(_QWORD *)(v1278 + 40);
              v1376 = v1375 & 0xFF00FFFFFFFFFFFFLL;
              *(_QWORD *)&v2251 = v1375 & 0xFF00FFFFFFFFFFFFLL;
              *((_QWORD *)&v2251 + 1) = 0;
              if ((v1375 & 0xFF00FFFFFFFFFFFFLL) == 0)
                goto LABEL_1422;
              v1377 = *(unsigned __int16 *)((v1375 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v1377 > 2)
                goto LABEL_1422;
              v1378 = *(_QWORD *)(v1376 + 72);
              *((_QWORD *)&v2251 + 1) = v1378;
              if (!(_DWORD)v1377)
                goto LABEL_1422;
              if ((_DWORD)v1377 != 1)
                goto LABEL_2533;
              break;
            case 0x9C:
            case 0x9D:
            case 0x9E:
            case 0x9F:
            case 0xA0:
            case 0xA1:
            case 0xA2:
            case 0xA3:
            case 0xA4:
              goto LABEL_1308;
            case 0xA5:
              v1444 = *(_QWORD *)(v1278 + 24);
              v1445 = v1444 & 0xFF00FFFFFFFFFFFFLL;
              v1282 = v1446;
              if (v1446 && (*((_DWORD *)v1446 + 2) - 3) < 3)
              {
                v1471 = 0;
                v1472 = 8;
                goto LABEL_1525;
              }
              v1313 = *v1254;
              if (!*v1254)
                goto LABEL_1311;
              v1447 = *(_DWORD *)(v1313 - 8);
              v1448 = (v1445 + ~(v1444 << 32)) ^ ((v1445 + ~(v1444 << 32)) >> 22);
              v1449 = 9 * ((v1448 + ~(v1448 << 13)) ^ ((v1448 + ~(v1448 << 13)) >> 8));
              v1450 = (v1449 ^ (v1449 >> 15)) + ~((v1449 ^ (v1449 >> 15)) << 27);
              v1431 = v1447 & ((v1450 >> 31) ^ v1450);
              v1451 = *(_QWORD *)(v1313 + 16 * v1431);
              if (v1451 != v1445)
              {
                v1452 = 1;
                do
                {
                  if (!v1451)
                    goto LABEL_1539;
                  v1431 = ((_DWORD)v1431 + v1452) & v1447;
                  v1451 = *(_QWORD *)(v1313 + 16 * v1431);
                  ++v1452;
                }
                while (v1451 != v1445);
              }
              goto LABEL_1540;
            case 0xA6:
              v1576 = (JSC::DFG::Node *)(*(_QWORD *)(v1278 + 24) & 0xFF00FFFFFFFFFFFFLL);
              v1282 = v1571;
              if (!v1571 || *((_DWORD *)v1571 + 2) != 2)
                goto LABEL_1631;
              v1471 = 0;
              v1472 = 1;
              goto LABEL_1525;
            default:
              if (v1279 != 135)
              {
                if (v1279 != 134)
                  goto LABEL_1308;
                v1576 = (JSC::DFG::Node *)(*(_QWORD *)(v1278 + 24) & 0xFF00FFFFFFFFFFFFLL);
                v1282 = v1577;
                if (v1577 && (*((_DWORD *)v1577 + 2) - 3) < 3)
                {
                  v1471 = 0;
                  v1472 = 9;
                  goto LABEL_1525;
                }
                goto LABEL_1631;
              }
              v1434 = *(_QWORD *)(v1278 + 24);
              v1435 = v1434 & 0xFF00FFFFFFFFFFFFLL;
              v1282 = v1436;
              if (v1436 && *((_DWORD *)v1436 + 2) == 1)
              {
                v2263 = (WTF *)13;
                v1437 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), *(_QWORD *)(*(_QWORD *)(v1278 + 72) + 8), a3, a4, a5, a6, a7, a8);
                *(_QWORD *)&v2251 = 0;
                *((_QWORD *)&v2251 + 1) = v1437;
                WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, (uint64_t *)&v2260, &v2263, &v2251);
                *(_QWORD *)&v2265 = *(_QWORD *)(*(_QWORD *)(v1278 + 72) + 8);
                if ((v2265 & 1) != 0)
                  WTF::fastFree(v2265 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
                goto LABEL_1311;
              }
              v1313 = *v1254;
              if (!*v1254)
                goto LABEL_1311;
              v1713 = *(_DWORD *)(v1313 - 8);
              v1714 = (v1435 + ~(v1434 << 32)) ^ ((v1435 + ~(v1434 << 32)) >> 22);
              v1715 = 9 * ((v1714 + ~(v1714 << 13)) ^ ((v1714 + ~(v1714 << 13)) >> 8));
              v1716 = (v1715 ^ (v1715 >> 15)) + ~((v1715 ^ (v1715 >> 15)) << 27);
              v1431 = v1713 & ((v1716 >> 31) ^ v1716);
              v1717 = *(_QWORD *)(v1313 + 16 * v1431);
              if (v1717 != v1435)
              {
                v1718 = 1;
                do
                {
                  if (!v1717)
                    goto LABEL_1539;
                  v1431 = ((_DWORD)v1431 + v1718) & v1713;
                  v1717 = *(_QWORD *)(v1313 + 16 * v1431);
                  ++v1718;
                }
                while (v1717 != v1435);
              }
              goto LABEL_1540;
          }
          goto LABEL_2349;
        }
        if (*(unsigned __int16 *)(v1278 + 18) <= 0x102u)
        {
          switch(*(_WORD *)(v1278 + 18))
          {
            case 0xAB:
              v1320 = *(_QWORD *)(v1278 + 24);
              v1321 = v1320 & 0xFF00FFFFFFFFFFFFLL;
              v1282 = v1322;
              if (v1322 && *((_DWORD *)v1322 + 2) == 2)
              {
                v1471 = *(unsigned int *)(v1278 + 72);
                v1472 = 6;
                goto LABEL_1525;
              }
              v1313 = *v1254;
              if (!*v1254)
                goto LABEL_1311;
              v1481 = *(_DWORD *)(v1313 - 8);
              v1482 = (v1321 + ~(v1320 << 32)) ^ ((v1321 + ~(v1320 << 32)) >> 22);
              v1483 = 9 * ((v1482 + ~(v1482 << 13)) ^ ((v1482 + ~(v1482 << 13)) >> 8));
              v1484 = (v1483 ^ (v1483 >> 15)) + ~((v1483 ^ (v1483 >> 15)) << 27);
              v1431 = v1481 & ((v1484 >> 31) ^ v1484);
              v1485 = *(_QWORD *)(v1313 + 16 * v1431);
              if (v1485 == v1321)
                goto LABEL_1540;
              v1486 = 1;
              while (v1485)
              {
                v1431 = ((_DWORD)v1431 + v1486) & v1481;
                v1485 = *(_QWORD *)(v1313 + 16 * v1431);
                ++v1486;
                if (v1485 == v1321)
                  goto LABEL_1540;
              }
              goto LABEL_1539;
            case 0xAC:
              v1362 = *(_QWORD *)(v1278 + 24);
              v1363 = v1362 & 0xFF00FFFFFFFFFFFFLL;
              v1282 = v1364;
              if (!v1364 || *((_DWORD *)v1364 + 2) != 2)
              {
                v1365 = *v1254;
                if (!*v1254)
                  goto LABEL_1311;
                v1366 = *(_DWORD *)(v1365 - 8);
                v1367 = (v1363 + ~(v1362 << 32)) ^ ((v1363 + ~(v1362 << 32)) >> 22);
                v1368 = 9 * ((v1367 + ~(v1367 << 13)) ^ ((v1367 + ~(v1367 << 13)) >> 8));
                v1369 = (v1368 ^ (v1368 >> 15)) + ~((v1368 ^ (v1368 >> 15)) << 27);
                v1370 = v1366 & ((v1369 >> 31) ^ v1369);
                v1371 = *(_QWORD *)(v1365 + 16 * v1370);
                if (v1371 != v1363)
                {
                  v1372 = 1;
                  while (v1371)
                  {
                    v1370 = ((_DWORD)v1370 + v1372) & v1366;
                    v1371 = *(_QWORD *)(v1365 + 16 * v1370);
                    ++v1372;
                    if (v1371 == v1363)
                      goto LABEL_1555;
                  }
                  v1370 = *(unsigned int *)(v1365 - 4);
                }
LABEL_1555:
                if (v1370 != *(_DWORD *)(v1365 - 4))
                {
                  a2 = *(_QWORD *)(v1365 + 16 * v1370 + 8);
                  if (a2)
                  {
                    v1365 = *v1254;
                    if (!*v1254)
                      goto LABEL_1311;
                    v1366 = *(_DWORD *)(v1365 - 8);
                  }
                }
                v1509 = *(_QWORD *)(v1278 + 32);
                v1510 = v1509 & 0xFF00FFFFFFFFFFFFLL;
                v1511 = ((v1509 & 0xFF00FFFFFFFFFFFFLL) + ~(v1509 << 32)) ^ (((v1509 & 0xFF00FFFFFFFFFFFFLL)
                                                                            + ~(v1509 << 32)) >> 22);
                v1512 = 9 * ((v1511 + ~(v1511 << 13)) ^ ((v1511 + ~(v1511 << 13)) >> 8));
                v1513 = (v1512 ^ (v1512 >> 15)) + ~((v1512 ^ (v1512 >> 15)) << 27);
                v1514 = v1366 & ((v1513 >> 31) ^ v1513);
                v1515 = *(_QWORD *)(v1365 + 16 * v1514);
                if (v1515 != v1510)
                {
                  v1516 = 1;
                  while (v1515)
                  {
                    v1514 = ((_DWORD)v1514 + v1516) & v1366;
                    v1515 = *(_QWORD *)(v1365 + 16 * v1514);
                    ++v1516;
                    if (v1515 == v1510)
                      goto LABEL_1600;
                  }
LABEL_1599:
                  v1514 = *(unsigned int *)(v1365 - 4);
                }
LABEL_1600:
                if (v1514 == *(_DWORD *)(v1365 - 4))
                  goto LABEL_1311;
                v1487 = v1365 + 16 * v1514;
                goto LABEL_1542;
              }
              v1454 = *(_DWORD *)(v1278 + 72);
              LODWORD(v2263) = 6;
              HIDWORD(v2263) = v1454;
              v1455 = *(_QWORD *)(v1278 + 32);
              v1456 = v1455 & 0xFF00FFFFFFFFFFFFLL;
              *(_QWORD *)&v2251 = v1455 & 0xFF00FFFFFFFFFFFFLL;
              *((_QWORD *)&v2251 + 1) = 0;
              if ((v1455 & 0xFF00FFFFFFFFFFFFLL) == 0)
                goto LABEL_1422;
              v1377 = *(unsigned __int16 *)((v1455 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
              if (v1377 > 2)
                goto LABEL_1422;
              v1378 = *(_QWORD *)(v1456 + 72);
              *((_QWORD *)&v2251 + 1) = v1378;
              if (!(_DWORD)v1377)
                goto LABEL_1422;
              if ((_DWORD)v1377 == 1)
                goto LABEL_2349;
              break;
            case 0xB3:
              v1576 = (JSC::DFG::Node *)(*(_QWORD *)(v1278 + 24) & 0xFF00FFFFFFFFFFFFLL);
              v1282 = v1561;
              if (v1561 && *((_DWORD *)v1561 + 2) == 8)
              {
                v1471 = 0;
                v1472 = 19;
                goto LABEL_1525;
              }
LABEL_1631:
              v1572 = v2214;
              v1573 = v1576;
              goto LABEL_1632;
            case 0xB4:
              v1488 = (JSC::DFG::Node *)(*(_QWORD *)(v1278 + 24) & 0xFF00FFFFFFFFFFFFLL);
              v1650 = v2214;
              v1282 = v1720;
              if (!v1720 || *((_DWORD *)v1720 + 2) != 8)
                goto LABEL_1637;
              v2263 = (WTF *)19;
              JSC::DFG::LazyNode::LazyNode(&v2251, (JSC::DFG::Node *)(*(_QWORD *)(v1278 + 32) & 0xFF00FFFFFFFFFFFFLL));
              goto LABEL_1422;
            default:
              goto LABEL_1308;
          }
LABEL_2533:
          v1377 = 2;
          goto LABEL_2349;
        }
        if (*(unsigned __int16 *)(v1278 + 18) <= 0x116u)
          break;
        if (v1279 != 344)
        {
          if (v1279 == 343)
          {
            v1568 = *(_QWORD *)(v1278 + 24);
            v1569 = v1568 & 0xFF00FFFFFFFFFFFFLL;
            v1282 = v1570;
            if (v1570 && *((_DWORD *)v1570 + 2) == 7)
            {
              v1471 = *(unsigned int *)(v1278 + 72);
              v1472 = 7;
LABEL_1525:
              *(_QWORD *)&v2251 = *v1282;
              *((_QWORD *)&v2251 + 1) = v1472 | (v1471 << 32);
              WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::add((uint64_t)&v2265, (uint64_t *)&v2262, (uint64_t)&v2251);
              v1473 = v1282[2];
              if (v1473)
              {
                v1474 = *(_DWORD *)(v1473 - 8);
                v1475 = v1474 & ((_DWORD)v1471 + (_DWORD)v1472);
                v1476 = (int *)(v1473 + 16 * v1475);
                v1477 = *v1476;
                v1478 = v1476[1];
                if (*v1476 == (_DWORD)v1472 && v1478 == (_DWORD)v1471)
                {
LABEL_2392:
                  v2073 = *(WTF **)(v1473 + 16 * v1475 + 8);
                  if (v2073)
                  {
                    *(_QWORD *)&v2251 = v1278;
                    v2263 = v2073;
                    WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v1254, (uint64_t *)&v2251, (uint64_t *)&v2263, a4, a5, a6, a7, a8, (uint64_t)&v2265);
                  }
                }
                else
                {
                  v1480 = 1;
                  while (v1477 | v1478)
                  {
                    v1475 = ((_DWORD)v1475 + v1480) & v1474;
                    v2071 = (int *)(v1473 + 16 * v1475);
                    v1477 = *v2071;
                    v1478 = v2071[1];
                    ++v1480;
                    if (v1477 == (_DWORD)v1472 && v1478 == (_DWORD)v1471)
                      goto LABEL_2392;
                  }
                }
              }
            }
            else
            {
              v1313 = *v1254;
              if (*v1254)
              {
                v1736 = *(_DWORD *)(v1313 - 8);
                v1737 = (v1569 + ~(v1568 << 32)) ^ ((v1569 + ~(v1568 << 32)) >> 22);
                v1738 = 9 * ((v1737 + ~(v1737 << 13)) ^ ((v1737 + ~(v1737 << 13)) >> 8));
                v1739 = (v1738 ^ (v1738 >> 15)) + ~((v1738 ^ (v1738 >> 15)) << 27);
                v1431 = v1736 & ((v1739 >> 31) ^ v1739);
                v1740 = *(_QWORD *)(v1313 + 16 * v1431);
                if (v1740 != v1569)
                {
                  v1741 = 1;
                  while (v1740)
                  {
                    v1431 = ((_DWORD)v1431 + v1741) & v1736;
                    v1740 = *(_QWORD *)(v1313 + 16 * v1431);
                    ++v1741;
                    if (v1740 == v1569)
                      goto LABEL_1540;
                  }
LABEL_1539:
                  v1431 = *(unsigned int *)(v1313 - 4);
                }
LABEL_1540:
                if (v1431 != *(_DWORD *)(v1313 - 4))
                {
                  v1487 = v1313 + 16 * v1431;
LABEL_1542:
                  a2 = *(_QWORD *)(v1487 + 8);
                  if (a2)
                }
              }
            }
            goto LABEL_1311;
          }
          if (v1279 == 279)
            goto LABEL_1323;
          goto LABEL_1308;
        }
        v1488 = (JSC::DFG::Node *)(*(_QWORD *)(v1278 + 24) & 0xFF00FFFFFFFFFFFFLL);
        v1282 = v1489;
        if (v1489 && *((_DWORD *)v1489 + 2) == 7)
        {
          v1496 = *(_DWORD *)(v1278 + 72);
          LODWORD(v2263) = 7;
          HIDWORD(v2263) = v1496;
          v1497 = *(_QWORD *)(v1278 + 32);
          v1498 = v1497 & 0xFF00FFFFFFFFFFFFLL;
          *(_QWORD *)&v2251 = v1497 & 0xFF00FFFFFFFFFFFFLL;
          *((_QWORD *)&v2251 + 1) = 0;
          if ((v1497 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v1377 = *(unsigned __int16 *)((v1497 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v1377 <= 2)
            {
              v1378 = *(_QWORD *)(v1498 + 72);
              *((_QWORD *)&v2251 + 1) = v1378;
              if ((_DWORD)v1377)
              {
                if ((_DWORD)v1377 == 1)
                  goto LABEL_2349;
                goto LABEL_2533;
              }
            }
          }
          goto LABEL_1422;
        }
        v1650 = v2214;
LABEL_1637:
        v1573 = (JSC::DFG::Node *)(*(_QWORD *)(v1278 + 32) & 0xFF00FFFFFFFFFFFFLL);
        v1572 = v1650;
LABEL_1632:
LABEL_1311:
        v1283 = v2260;
        if (!v2260)
          goto LABEL_1323;
        if (!*((_DWORD *)v2260 - 3))
          goto LABEL_1318;
        v1284 = *((unsigned int *)v2260 - 1);
        v1285 = v2260;
        if ((_DWORD)v1284)
        {
          v1286 = 0;
          while (!*(_DWORD *)((char *)v2260 + v1286))
          {
            v1286 += 24;
            if (24 * v1284 == v1286)
              goto LABEL_1317;
          }
          v1285 = (WTF *)((char *)v2260 + v1286);
        }
        v1289 = (WTF *)((char *)v2260 + 24 * v1284);
        if (v1285 != v1289)
        {
          v1290 = v1282 + 2;
LABEL_1333:
          v1292 = *(_QWORD *)v1285;
          v1291 = *((_QWORD *)v1285 + 1);
          if (!v1291)
          {
            v1293 = *v1290;
            if (!*v1290)
              goto LABEL_1335;
            v1349 = *(_DWORD *)(v1293 - 8);
            v1350 = v1349 & (HIDWORD(v1292) + v1292);
            a2 = v1293 + 16 * v1350;
            v1351 = *(_DWORD *)a2;
            v1352 = *(_DWORD *)(a2 + 4);
            if (*(_DWORD *)a2 != (_DWORD)v1292 || v1352 != HIDWORD(v1292))
            {
              v1354 = 1;
              while (v1351 | v1352)
              {
                v1350 = (v1350 + v1354) & v1349;
                a2 = v1293 + 16 * v1350;
                v1351 = *(_DWORD *)a2;
                v1352 = *(_DWORD *)(a2 + 4);
                ++v1354;
                if (*(_DWORD *)a2 == (_DWORD)v1292 && v1352 == HIDWORD(v1292))
                  goto LABEL_1416;
              }
              goto LABEL_1415;
            }
            goto LABEL_1416;
          }
          v1303 = *v1254;
          if (!*v1254)
            goto LABEL_1346;
          v1323 = *(_DWORD *)(v1303 - 8);
          v1324 = (~(v1291 << 32) + v1291) ^ ((unint64_t)(~(v1291 << 32) + v1291) >> 22);
          v1325 = 9 * ((v1324 + ~(v1324 << 13)) ^ ((v1324 + ~(v1324 << 13)) >> 8));
          v1326 = (v1325 ^ (v1325 >> 15)) + ~((v1325 ^ (v1325 >> 15)) << 27);
          v1327 = v1323 & ((v1326 >> 31) ^ v1326);
          v1328 = *(_QWORD *)(v1303 + 16 * v1327);
          if (v1328 != v1291)
          {
            v1329 = 1;
            while (v1328)
            {
              v1327 = ((_DWORD)v1327 + v1329) & v1323;
              v1328 = *(_QWORD *)(v1303 + 16 * v1327);
              ++v1329;
              if (v1328 == v1291)
                goto LABEL_1376;
            }
            v1327 = *(unsigned int *)(v1303 - 4);
          }
LABEL_1376:
          if (v1327 == *(_DWORD *)(v1303 - 4))
          {
LABEL_1346:
            *(_QWORD *)&v2251 = *(_QWORD *)v1285;
            v2263 = 0;
          }
          else
          {
            v1330 = *(WTF **)(v1303 + 16 * v1327 + 8);
            *(_QWORD *)&v2251 = *(_QWORD *)v1285;
            v2263 = v1330;
            if (v1330)
            {
              WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedLocationDescriptor const&,JSC::DFG::Node *&>((uint64_t)&v2265, v1282 + 2, &v2251, &v2263);
              goto LABEL_1335;
            }
          }
          v1293 = *v1290;
          if (*v1290)
          {
            v1304 = *(_DWORD *)(v1293 - 8);
            v1305 = v1304 & (HIDWORD(v1292) + v1292);
            a2 = v1293 + 16 * v1305;
            v1306 = *(_DWORD *)a2;
            v1307 = *(_DWORD *)(a2 + 4);
            if (*(_DWORD *)a2 != (_DWORD)v1292 || v1307 != HIDWORD(v1292))
            {
              v1309 = 1;
              while (v1306 | v1307)
              {
                v1305 = (v1305 + v1309) & v1304;
                a2 = v1293 + 16 * v1305;
                v1306 = *(_DWORD *)a2;
                v1307 = *(_DWORD *)(a2 + 4);
                ++v1309;
                if (*(_DWORD *)a2 == (_DWORD)v1292 && v1307 == HIDWORD(v1292))
                  goto LABEL_1416;
              }
LABEL_1415:
              a2 = v1293 + 16 * *(unsigned int *)(v1293 - 4);
            }
LABEL_1416:
            if (v1293 + 16 * *(unsigned int *)(v1293 - 4) != a2)
              WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::remove(v1282 + 2, (_QWORD *)a2);
          }
LABEL_1335:
          v1294 = *v1282;
          v1295 = *((_QWORD *)this + 25);
          *(_QWORD *)&v2251 = *v1282;
          *((_QWORD *)&v2251 + 1) = v1292;
          if (!v1295)
            goto LABEL_1341;
          v1296 = *(_DWORD *)(v1295 - 8);
          v1297 = (~(v1294 << 32) + v1294) ^ ((unint64_t)(~(v1294 << 32) + v1294) >> 22);
          v1298 = 9 * ((v1297 + ~(v1297 << 13)) ^ ((v1297 + ~(v1297 << 13)) >> 8));
          v1299 = (v1298 ^ (v1298 >> 15)) + ~((v1298 ^ (v1298 >> 15)) << 27);
          v1300 = v1296 & ((v1299 >> 31) ^ v1299);
          v1301 = *(_QWORD *)(v1295 + 8 * v1300);
          if (v1301 != v1294)
          {
            v1302 = 1;
            do
            {
              if (!v1301)
                goto LABEL_1341;
              v1300 = (v1300 + v1302) & v1296;
              v1301 = *(_QWORD *)(v1295 + 8 * v1300);
              ++v1302;
            }
            while (v1301 != v1294);
          }
          WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::add((uint64_t)&v2265, (uint64_t *)&v2262, (uint64_t)&v2251);
LABEL_1341:
          while (1)
          {
            v1285 = (WTF *)((char *)v1285 + 24);
            if (v1285 == v1289)
              break;
            if (*(_DWORD *)v1285)
            {
              if (v1285 == v1289)
                break;
              goto LABEL_1333;
            }
          }
          v1283 = v2260;
        }
LABEL_1317:
        if (!v1283)
          goto LABEL_1323;
LABEL_1318:
        a2 = (unint64_t)v1283 - 16;
        v1287 = *(_QWORD *)(StatusReg + 752);
        if (v1287)
        {
          if (!(a2 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                 + ((((unint64_t)v1283 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> (((_DWORD)v1283 - 16) >> 24)) & 1) != 0)
          {
LABEL_1321:
            v1288 = *(unsigned int *)(v1287 + 8000);
            if (v1288 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v1287, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v1287 + 8 * v1288) = a2 | 0x5000000000000;
              *(_DWORD *)(v1287 + 8000) = v1288 + 1;
            }
            goto LABEL_1323;
          }
          if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
          {
            a4 = 0;
          }
          else
          {
            a4 = (*(_DWORD *)((char *)off_1ECF425F8
                            + ((((((unint64_t)v1283 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * (((((_DWORD)v1283 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)a4 == 1)
              goto LABEL_1321;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v1287, a2, 1, a4, a5, a6, a7, a8);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_1323:
        if (++v1276 == v1277)
          goto LABEL_1437;
      }
      switch(v1279)
      {
        case 0x103u:
          *(_QWORD *)&v2265 = *(_QWORD *)(v1278 + 72);
          if ((v2265 & 1) != 0)
            WTF::fastFree(v2265 & 0xFFFFFFFFFFFFFFFCLL, v1463, v1464, v1465, v1466, v1467, v1468, v1469);
          v2263 = (WTF *)13;
          v1470 = JSC::DFG::Graph::freeze(*((_QWORD *)this + 4), *(_QWORD *)(v1278 + 72), v1464, v1465, v1466, v1467, v1468, v1469);
          *(_QWORD *)&v2251 = 0;
          *((_QWORD *)&v2251 + 1) = v1470;
          goto LABEL_1422;
        case 0x10Eu:
          v2263 = (WTF *)18;
          v1565 = *(_QWORD *)(v1278 + 72);
          *(_QWORD *)&v2251 = 0;
          *((_QWORD *)&v2251 + 1) = v1565;
          WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, (uint64_t *)&v2260, &v2263, &v2251);
          v2263 = (WTF *)19;
          v1566 = *(_QWORD *)(v1278 + 24);
          v1567 = v1566 & 0xFF00FFFFFFFFFFFFLL;
          *(_QWORD *)&v2251 = v1566 & 0xFF00FFFFFFFFFFFFLL;
          *((_QWORD *)&v2251 + 1) = 0;
          if ((v1566 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v1377 = *(unsigned __int16 *)((v1566 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v1377 <= 2)
            {
              v1378 = *(_QWORD *)(v1567 + 72);
              *((_QWORD *)&v2251 + 1) = v1378;
              if ((_DWORD)v1377)
              {
                if ((_DWORD)v1377 != 1)
                  goto LABEL_2533;
                goto LABEL_2349;
              }
            }
          }
LABEL_1422:
          WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, (uint64_t *)&v2260, &v2263, &v2251);
          goto LABEL_1311;
        case 0x10Cu:
          v1651 = *(unsigned __int8 *)(*(_QWORD *)(v1278 + 72) + 9);
          switch(v1651)
          {
            case '@':
              break;
            case 'B':
            case 'A':
              break;
            case 'D':
              break;
            default:
              JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v1278, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x3DB, "void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1765:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1771:21)]", "Bad structure");
              __break(0xC471u);
              JUMPOUT(0x1984DDE40);
          }
          v1282 = v1652;
          goto LABEL_1311;
      }
LABEL_1308:
      v1280 = *(_QWORD *)(v1278 + 24);
      if ((*(_BYTE *)(v1278 + 56) & 0x10) == 0)
      {
        v1281 = v1280 & 0xFF00FFFFFFFFFFFFLL;
        if ((v1280 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_1310;
        v1314 = *v1254;
        if (*v1254)
        {
          v1342 = *(_DWORD *)(v1314 - 8);
          v1343 = (v1281 + ~(v1280 << 32)) ^ ((v1281 + ~(v1280 << 32)) >> 22);
          v1344 = 9 * ((v1343 + ~(v1343 << 13)) ^ ((v1343 + ~(v1343 << 13)) >> 8));
          v1345 = (v1344 ^ (v1344 >> 15)) + ~((v1344 ^ (v1344 >> 15)) << 27);
          v1346 = v1342 & ((v1345 >> 31) ^ v1345);
          v1347 = *(_QWORD *)(v1314 + 16 * v1346);
          if (v1347 != v1281)
          {
            v1348 = 1;
            while (v1347)
            {
              v1346 = ((_DWORD)v1346 + v1348) & v1342;
              v1347 = *(_QWORD *)(v1314 + 16 * v1346);
              ++v1348;
              if (v1347 == v1281)
                goto LABEL_1407;
            }
            v1346 = *(unsigned int *)(v1314 - 4);
          }
LABEL_1407:
          if (v1346 != *(_DWORD *)(v1314 - 4))
          {
            a2 = *(_QWORD *)(v1314 + 16 * v1346 + 8);
            if (a2)
          }
        }
        v1315 = *(_QWORD *)(v1278 + 32);
        v1316 = v1315 & 0xFF00FFFFFFFFFFFFLL;
        if ((v1315 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_1310;
        v1317 = *v1254;
        if (*v1254)
        {
          v1388 = *(_DWORD *)(v1317 - 8);
          v1389 = (v1316 + ~(v1315 << 32)) ^ ((v1316 + ~(v1315 << 32)) >> 22);
          v1390 = 9 * ((v1389 + ~(v1389 << 13)) ^ ((v1389 + ~(v1389 << 13)) >> 8));
          v1391 = (v1390 ^ (v1390 >> 15)) + ~((v1390 ^ (v1390 >> 15)) << 27);
          v1392 = v1388 & ((v1391 >> 31) ^ v1391);
          v1393 = *(_QWORD *)(v1317 + 16 * v1392);
          if (v1393 != v1316)
          {
            v1394 = 1;
            while (v1393)
            {
              v1392 = ((_DWORD)v1392 + v1394) & v1388;
              v1393 = *(_QWORD *)(v1317 + 16 * v1392);
              ++v1394;
              if (v1393 == v1316)
                goto LABEL_1468;
            }
            v1392 = *(unsigned int *)(v1317 - 4);
          }
LABEL_1468:
          if (v1392 != *(_DWORD *)(v1317 - 4))
          {
            a2 = *(_QWORD *)(v1317 + 16 * v1392 + 8);
            if (a2)
          }
        }
        v1318 = *(_QWORD *)(v1278 + 40);
        v1319 = v1318 & 0xFF00FFFFFFFFFFFFLL;
        if ((v1318 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_1310;
        v1413 = *v1254;
        if (!*v1254)
          goto LABEL_1310;
        v1414 = *(_DWORD *)(v1413 - 8);
        v1415 = (v1319 + ~(v1318 << 32)) ^ ((v1319 + ~(v1318 << 32)) >> 22);
        v1416 = 9 * ((v1415 + ~(v1415 << 13)) ^ ((v1415 + ~(v1415 << 13)) >> 8));
        v1417 = (v1416 ^ (v1416 >> 15)) + ~((v1416 ^ (v1416 >> 15)) << 27);
        v1418 = v1414 & ((v1417 >> 31) ^ v1417);
        v1419 = *(_QWORD *)(v1413 + 16 * v1418);
        if (v1419 != v1319)
        {
          v1420 = 1;
          while (v1419)
          {
            v1418 = ((_DWORD)v1418 + v1420) & v1414;
            v1419 = *(_QWORD *)(v1413 + 16 * v1418);
            ++v1420;
            if (v1419 == v1319)
              goto LABEL_1609;
          }
          v1418 = *(unsigned int *)(v1413 - 4);
        }
LABEL_1609:
        if (v1418 == *(_DWORD *)(v1413 - 4))
          goto LABEL_1310;
        v1453 = v1413 + 16 * v1418;
LABEL_1514:
        a2 = *(_QWORD *)(v1453 + 8);
        if (a2)
        goto LABEL_1310;
      }
      v1575 = *(_QWORD *)(v1278 + 32);
      if ((int)v1575 + (int)v1280 <= v1280)
        goto LABEL_1310;
      v1373 = *((_QWORD *)this + 4);
      v1334 = *(_QWORD *)(v1278 + 24);
      do
      {
        if (v1334 >= *(unsigned int *)(v1373 + 164))
        {
          __break(0xC471u);
          JUMPOUT(0x1984DEF48);
        }
        v1331 = *(_QWORD *)(*(_QWORD *)(v1373 + 152) + 8 * v1334);
        v1332 = v1331 & 0xFF00FFFFFFFFFFFFLL;
        if ((v1331 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v1333 = *v1254;
          if (*v1254)
          {
            v1335 = *(_DWORD *)(v1333 - 8);
            v1336 = (v1332 + ~(v1331 << 32)) ^ ((v1332 + ~(v1331 << 32)) >> 22);
            v1337 = 9 * ((v1336 + ~(v1336 << 13)) ^ ((v1336 + ~(v1336 << 13)) >> 8));
            v1338 = (v1337 ^ (v1337 >> 15)) + ~((v1337 ^ (v1337 >> 15)) << 27);
            v1339 = v1335 & ((v1338 >> 31) ^ v1338);
            v1340 = *(_QWORD *)(v1333 + 16 * v1339);
            if (v1340 != v1332)
            {
              v1341 = 1;
              while (v1340)
              {
                v1339 = ((_DWORD)v1339 + v1341) & v1335;
                v1340 = *(_QWORD *)(v1333 + 16 * v1339);
                ++v1341;
                if (v1340 == v1332)
                  goto LABEL_1398;
              }
              v1339 = *(unsigned int *)(v1333 - 4);
            }
LABEL_1398:
            if (v1339 != *(_DWORD *)(v1333 - 4))
            {
              a2 = *(_QWORD *)(v1333 + 16 * v1339 + 8);
              if (a2)
              {
                v1280 = *(_QWORD *)(v1278 + 24);
                v1575 = *(_QWORD *)(v1278 + 32);
              }
            }
          }
        }
        v1282 = 0;
        ++v1334;
      }
      while (v1334 < (v1280 + v1575));
      goto LABEL_1311;
    }
  }
LABEL_5:
  v10 = this;
  v2201 = (uint64_t *)((char *)this + 464);
  v11 = *((_QWORD *)this + 58);
  if (v11)
  {
    *v2201 = 0;
    WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::deallocateTable(v11, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  if (v2262)
  {
    v12 = *((unsigned int *)v2262 - 1);
    v13 = (WTF *)((char *)v2262 + 16 * v12);
    if (*((_DWORD *)v2262 - 3))
    {
      v14 = v2262;
      if (!(_DWORD)v12)
        goto LABEL_20;
      v15 = 16 * v12;
      v14 = v2262;
      while (1)
      {
        v16 = *((_DWORD *)v14 + 2);
        if (*(_QWORD *)v14)
          break;
        v17 = *((_DWORD *)v14 + 3);
        if (v16 | v17)
          goto LABEL_15;
LABEL_13:
        v14 = (WTF *)((char *)v14 + 16);
        v15 -= 16;
        if (!v15)
        {
          v14 = v13;
          goto LABEL_20;
        }
      }
      v17 = *((_DWORD *)v14 + 3);
LABEL_15:
      if (v16)
        v18 = 1;
      else
        v18 = v17 == 0;
      if (v18)
        goto LABEL_20;
      goto LABEL_13;
    }
    v14 = (WTF *)((char *)v2262 + 16 * v12);
  }
  else
  {
    v14 = 0;
    v12 = 0;
  }
  v13 = (WTF *)((char *)v2262 + 16 * v12);
LABEL_20:
  if (v2262)
    v19 = (WTF *)((char *)v2262 + 16 * *((unsigned int *)v2262 - 1));
  else
    v19 = 0;
  while (v14 != v19)
  {
    v2265 = *(_OWORD *)v14;
    v20 = v2265;
    v21 = *v2201;
    if (*v2201
      || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v2201, 8uLL, 0, a4, a5, a6, a7, a8), (v21 = *v2201) != 0))
    {
      v22 = *(_DWORD *)(v21 - 8);
    }
    else
    {
      v22 = 0;
    }
    v23 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = v21 + 24 * v26;
    v28 = *(_QWORD *)v27;
    if (*(_QWORD *)v27)
    {
      v29 = 0;
      v30 = 1;
      while (v28 != v20)
      {
        if (v28 == -1)
          v29 = (_QWORD *)v27;
        v26 = (v26 + v30) & v22;
        v27 = v21 + 24 * v26;
        v28 = *(_QWORD *)v27;
        ++v30;
        if (!*(_QWORD *)v27)
        {
          if (v29)
          {
            *v29 = 0;
            v29[1] = 0;
            v29[2] = 0;
            --*(_DWORD *)(*v2201 - 16);
            v27 = (uint64_t)v29;
          }
          goto LABEL_33;
        }
      }
    }
    else
    {
LABEL_33:
      *(_QWORD *)v27 = v20;
      v31 = *(_QWORD *)(v27 + 8);
      if (v31)
      {
        *(_QWORD *)(v27 + 8) = 0;
        *(_DWORD *)(v27 + 16) = 0;
        WTF::fastFree(v31, (void *)a2, a3, a4, a5, a6, a7, a8);
      }
      *(_QWORD *)(v27 + 8) = 0;
      *(_QWORD *)(v27 + 16) = 0;
      v32 = *v2201;
      if (*v2201)
        v33 = *(_DWORD *)(v32 - 12) + 1;
      else
        v33 = 1;
      *(_DWORD *)(v32 - 12) = v33;
      v34 = *v2201;
      if (*v2201)
        v35 = *(_DWORD *)(v34 - 12);
      else
        v35 = 0;
      v36 = (*(_DWORD *)(v34 - 16) + v35);
      v37 = *(unsigned int *)(v34 - 4);
      if (v37 > 0x400)
      {
        if (v37 > 2 * v36)
          goto LABEL_41;
      }
      else if (3 * v37 > 4 * v36)
      {
        goto LABEL_41;
      }
      v27 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(v2201, v27, a3, a4, a5, a6, a7, a8);
    }
LABEL_41:
    v38 = (uint64_t *)(v27 + 8);
    v39 = *(unsigned int *)(v27 + 20);
    if ((_DWORD)v39 == *(_DWORD *)(v27 + 16))
    {
      v46 = (__int128 *)WTF::Vector<JSC::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v38, v39 + 1, (unint64_t)&v2265);
      v39 = *(unsigned int *)(v27 + 20);
      v40 = *(_QWORD *)(v27 + 8);
      v41 = *v46;
    }
    else
    {
      v40 = *v38;
      v41 = v2265;
    }
    *(_OWORD *)(v40 + 16 * v39) = v41;
    ++*(_DWORD *)(v27 + 20);
    v42 = (WTF *)((char *)v14 + 16);
    v14 = v13;
    v10 = this;
    if (v42 != v13)
    {
      v14 = v42;
      while (1)
      {
        v43 = *((_DWORD *)v14 + 2);
        if (*(_QWORD *)v14)
          break;
        v44 = *((_DWORD *)v14 + 3);
        if (v43 | v44)
          goto LABEL_49;
LABEL_47:
        v14 = (WTF *)((char *)v14 + 16);
        if (v14 == v13)
        {
          v14 = v13;
          goto LABEL_54;
        }
      }
      v44 = *((_DWORD *)v14 + 3);
LABEL_49:
      if (v43)
        v45 = 1;
      else
        v45 = v44 == 0;
      if (v45)
        continue;
      goto LABEL_47;
    }
LABEL_54:
    ;
  }
  v2154 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)v10 + 72);
  JSC::DFG::SSACalculator::reset((JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)v10 + 72), (void *)a2, a3, a4, a5, a6, a7, a8);
  v2150 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)v10 + 136);
  JSC::DFG::SSACalculator::reset((JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)v10 + 136), v47, v48, v49, v50, v51, v52, v53);
  v61 = *((_QWORD *)v10 + 26);
  v2179 = (uint64_t *)((char *)v10 + 208);
  if (v61)
  {
    *v2179 = 0;
    WTF::fastFree(v61 - 16, v54, v55, v56, v57, v58, v59, v60);
  }
  v63 = (uint64_t *)((char *)v10 + 216);
  v62 = *((_QWORD *)v10 + 27);
  if (v62)
  {
    *v63 = 0;
    WTF::fastFree(v62 - 16, v54, v55, v56, v57, v58, v59, v60);
  }
  v2261 = 0;
  v2260 = 0;
  v2259 = 0;
  v2258 = 0;
  v64 = *((_QWORD *)v10 + 25);
  v2203 = (uint64_t *)((char *)v10 + 200);
  if (!v64)
  {
    v67 = 0;
    v65 = 0;
LABEL_1904:
    v66 = (_QWORD *)(v64 + 8 * v65);
    goto LABEL_72;
  }
  v65 = *(unsigned int *)(v64 - 4);
  v66 = (_QWORD *)(v64 + 8 * v65);
  if (!*(_DWORD *)(v64 - 12))
  {
    v67 = (_QWORD *)(v64 + 8 * v65);
    goto LABEL_1904;
  }
  v67 = (_QWORD *)*((_QWORD *)v10 + 25);
  if ((_DWORD)v65)
  {
    v68 = 8 * v65;
    v67 = (_QWORD *)*((_QWORD *)v10 + 25);
    while ((unint64_t)(*v67 + 1) <= 1)
    {
      ++v67;
      v68 -= 8;
      if (!v68)
      {
        v67 = v66;
        break;
      }
    }
  }
LABEL_72:
  if (v64)
    v69 = (_QWORD *)(v64 + 8 * *(unsigned int *)(v64 - 4));
  else
    v69 = 0;
  while (v67 != v69)
  {
    *(_QWORD *)&v2265 = 0;
    *(_QWORD *)&v2265 = *v67;
    v1584 = JSC::DFG::SSACalculator::newVariable(v2150);
    v1585 = *v63;
    if (*v63
      || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::SSACalculator::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::SSACalculator::Variable *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::SSACalculator::Variable *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(v63, 0, v55, v56, v57, v58, v59, v60), (v1585 = *v63) != 0))
    {
      v1586 = *(_DWORD *)(v1585 - 8);
    }
    else
    {
      v1586 = 0;
    }
    v1587 = v2265;
    v1588 = (~((_QWORD)v2265 << 32) + v2265) ^ ((~((_QWORD)v2265 << 32) + (_QWORD)v2265) >> 22);
    v1589 = 9 * ((v1588 + ~(v1588 << 13)) ^ ((unint64_t)(v1588 + ~(v1588 << 13)) >> 8));
    v1590 = (v1589 ^ (v1589 >> 15)) + ~((v1589 ^ (v1589 >> 15)) << 27);
    v1591 = v1586 & ((v1590 >> 31) ^ v1590);
    v1592 = (_QWORD *)(v1585 + 16 * v1591);
    v1593 = *v1592;
    if (*v1592)
    {
      v1602 = 0;
      v1603 = 1;
      while (v1593 != (_QWORD)v2265)
      {
        if (v1593 == -1)
          v1602 = v1592;
        v1591 = (v1591 + v1603) & v1586;
        v1592 = (_QWORD *)(v1585 + 16 * v1591);
        v1593 = *v1592;
        ++v1603;
        if (!*v1592)
        {
          if (v1602)
          {
            *v1602 = 0;
            v1602[1] = 0;
            --*(_DWORD *)(*v63 - 16);
            v1592 = v1602;
          }
          goto LABEL_1646;
        }
      }
      goto LABEL_1652;
    }
LABEL_1646:
    *v1592 = v1587;
    v1592[1] = v1584;
    v1594 = *v63;
    if (*v63)
      v1595 = *(_DWORD *)(v1594 - 12) + 1;
    else
      v1595 = 1;
    *(_DWORD *)(v1594 - 12) = v1595;
    v1596 = *v63;
    if (*v63)
      v1597 = *(_DWORD *)(v1596 - 12);
    else
      v1597 = 0;
    v1598 = (*(_DWORD *)(v1596 - 16) + v1597);
    v1599 = *(unsigned int *)(v1596 - 4);
    if (v1599 > 0x400)
    {
      if (v1599 <= 2 * v1598)
LABEL_1885:
        WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::SSACalculator::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::SSACalculator::Variable *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::SSACalculator::Variable *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(v63, (unint64_t)v1592, v55, v56, v57, v58, v59, v60);
    }
    else if (3 * v1599 <= 4 * v1598)
    {
      goto LABEL_1885;
    }
LABEL_1652:
    v1600 = HIDWORD(v2261);
    if (HIDWORD(v2261) == (_DWORD)v2261)
    {
      WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>((uint64_t)&v2260, (unint64_t)&v2265);
    }
    else
    {
      *((_QWORD *)v2260 + HIDWORD(v2261)) = v2265;
      HIDWORD(v2261) = v1600 + 1;
    }
    v1601 = v67 + 1;
    v67 = v66;
    if (v1601 != v66)
    {
      v67 = v1601;
      while ((unint64_t)(*v67 + 1) <= 1)
      {
        if (++v67 == v66)
        {
          v67 = v66;
          break;
        }
      }
    }
  }
  if (v2262)
  {
    v70 = *((unsigned int *)v2262 - 1);
    v71 = (WTF *)((char *)v2262 + 16 * v70);
    if (*((_DWORD *)v2262 - 3))
    {
      v72 = v2262;
      if (!(_DWORD)v70)
        goto LABEL_88;
      v73 = 16 * v70;
      v72 = v2262;
      while (1)
      {
        v74 = *((_DWORD *)v72 + 2);
        if (*(_QWORD *)v72)
          break;
        v75 = *((_DWORD *)v72 + 3);
        if (v74 | v75)
          goto LABEL_83;
LABEL_81:
        v72 = (WTF *)((char *)v72 + 16);
        v73 -= 16;
        if (!v73)
        {
          v72 = v71;
          goto LABEL_88;
        }
      }
      v75 = *((_DWORD *)v72 + 3);
LABEL_83:
      if (v74)
        v76 = 1;
      else
        v76 = v75 == 0;
      if (v76)
        goto LABEL_88;
      goto LABEL_81;
    }
    v72 = (WTF *)((char *)v2262 + 16 * v70);
  }
  else
  {
    v72 = 0;
    v70 = 0;
  }
  v71 = (WTF *)((char *)v2262 + 16 * v70);
LABEL_88:
  if (v2262)
    v77 = (WTF *)((char *)v2262 + 16 * *((unsigned int *)v2262 - 1));
  else
    v77 = 0;
  v2194 = v63;
  if (v77 != v72)
  {
    while (1)
    {
      v2265 = *(_OWORD *)v72;
      v78 = JSC::DFG::SSACalculator::newVariable(v2154);
      v79 = *v2179;
      if (*v2179
        || (WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::SSACalculator::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::SSACalculator::Variable *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::SSACalculator::Variable *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(v2179, 8u), v79 = *v2179, v63 = v2194, *v2179))
      {
        v80 = *(_DWORD *)(v79 - 8);
      }
      else
      {
        v80 = 0;
      }
      v81 = 0;
      v82 = (~((_QWORD)v2265 << 32) + v2265) ^ ((~((_QWORD)v2265 << 32) + (_QWORD)v2265) >> 22);
      v83 = 9 * ((v82 + ~(v82 << 13)) ^ ((unint64_t)(v82 + ~(v82 << 13)) >> 8));
      v84 = (v83 ^ (v83 >> 15)) + ~((v83 ^ (v83 >> 15)) << 27);
      v85 = HIDWORD(v2265) + DWORD2(v2265) + ((v84 >> 31) ^ v84);
      for (i = 1; ; ++i)
      {
        v87 = v85 & v80;
        v55 = v79 + 24 * v87;
        v88 = *(_DWORD *)(v55 + 8);
        if (!*(_QWORD *)v55 && !*(_QWORD *)(v55 + 8))
          break;
        if (*(_QWORD *)v55 == (_QWORD)v2265)
        {
          v89 = *(_DWORD *)(v55 + 12);
          if (v88 == DWORD2(v2265) && v89 == HIDWORD(v2265))
            goto LABEL_115;
        }
        else
        {
          v89 = *(_DWORD *)(v55 + 12);
        }
        if (v88)
          v91 = 1;
        else
          v91 = v89 == 0;
        if (!v91)
          v81 = (_QWORD *)(v79 + 24 * v87);
        v85 = i + v87;
      }
      if (v81)
      {
        *v81 = 0;
        v81[1] = 0;
        v81[2] = 0;
        --*(_DWORD *)(*v2179 - 16);
        v55 = (uint64_t)v81;
      }
      *(_OWORD *)v55 = v2265;
      *(_QWORD *)(v55 + 16) = v78;
      v92 = *v2179;
      v93 = *v2179 ? *(_DWORD *)(v92 - 12) + 1 : 1;
      *(_DWORD *)(v92 - 12) = v93;
      v94 = *v2179;
      v95 = *v2179 ? *(_DWORD *)(v94 - 12) : 0;
      v96 = (*(_DWORD *)(v94 - 16) + v95);
      v97 = *(unsigned int *)(v94 - 4);
      if (v97 > 0x400)
        break;
      if (3 * v97 > 4 * v96)
        goto LABEL_115;
      if ((_DWORD)v97)
        goto LABEL_2069;
      v104 = 8;
LABEL_139:
      WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::SSACalculator::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::SSACalculator::Variable *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::SSACalculator::Variable *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(v2179, v104);
LABEL_115:
      v98 = HIDWORD(v2259);
      if (HIDWORD(v2259) == (_DWORD)v2259)
      {
        v103 = (_OWORD *)WTF::Vector<JSC::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2258, HIDWORD(v2259) + 1, (unint64_t)&v2265);
        v98 = HIDWORD(v2259);
        *((_OWORD *)v2258 + HIDWORD(v2259)) = *v103;
      }
      else
      {
        *((_OWORD *)v2258 + HIDWORD(v2259)) = v2265;
      }
      HIDWORD(v2259) = v98 + 1;
      v99 = (WTF *)((char *)v72 + 16);
      v72 = v71;
      if (v99 != v71)
      {
        v72 = v99;
        while (1)
        {
          v100 = *((_DWORD *)v72 + 2);
          if (*(_QWORD *)v72)
            break;
          v101 = *((_DWORD *)v72 + 3);
          if (v100 | v101)
            goto LABEL_123;
LABEL_121:
          v72 = (WTF *)((char *)v72 + 16);
          if (v72 == v71)
          {
            v72 = v71;
            goto LABEL_128;
          }
        }
        v101 = *((_DWORD *)v72 + 3);
LABEL_123:
        if (v100)
          v102 = 1;
        else
          v102 = v101 == 0;
        if (v102)
          goto LABEL_128;
        goto LABEL_121;
      }
LABEL_128:
      if (v72 == v77)
        goto LABEL_140;
    }
    if (v97 > 2 * v96)
      goto LABEL_115;
LABEL_2069:
    v104 = (_DWORD)v97 << (6 * *(_DWORD *)(v94 - 12) >= (2 * v97));
    goto LABEL_139;
  }
LABEL_140:
  v2257 = 0;
  v105 = this;
  v2164 = (uint64_t *)((char *)this + 544);
  if (!*((_QWORD *)this + 68))
  {
    v106 = *((_QWORD *)this + 4);
    if (!*(_DWORD *)(v106 + 60))
    {
      __break(0xC471u);
      JUMPOUT(0x1984DF180);
    }
    v107 = **(_QWORD **)(v106 + 48);
    if (!*(_DWORD *)(v107 + 220))
    {
      __break(0xC471u);
      JUMPOUT(0x1984DF188);
    }
    v108 = **(_QWORD **)(v107 + 208);
    v109 = *(_QWORD *)v108;
    if ((*(_QWORD *)v108 & 1) != 0)
    {
      v2003 = *(_QWORD *)(v109 & 0xFFFFFFFF8);
      if ((v109 & 2) != 0
        || ((v2004 = *(unsigned int *)((v109 & 0xFFFFFFFF8) + 8), (_DWORD)v2004 != 0x3FFFFFFF)
          ? (v2005 = (_DWORD)v2004 == -1)
          : (v2005 = 1),
            v2005))
      {
        v2006 = 2;
      }
      else if (v2004 >> 28)
      {
        v2132 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v2132 = v2003;
        *(_DWORD *)(v2132 + 8) = v2004;
        v2006 = 1;
        v2003 = v2132;
      }
      else
      {
        v2006 = *(_QWORD *)(v109 & 0xFFFFFFFF8);
        v2003 = v2004 << 36;
      }
      v109 = v2003 | v2006;
      v105 = this;
    }
    v2254 = v109;
    v110 = *(_QWORD *)(v108 + 8);
    if ((v110 & 1) != 0)
    {
      v2007 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
      if ((v110 & 2) != 0
        || ((v2008 = *(unsigned int *)((v110 & 0xFFFFFFFF8) + 8), (_DWORD)v2008 != 0x3FFFFFFF)
          ? (v2009 = (_DWORD)v2008 == -1)
          : (v2009 = 1),
            v2009))
      {
        v2010 = 2;
      }
      else if (v2008 >> 28)
      {
        v2133 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v2133 = v2007;
        *(_DWORD *)(v2133 + 8) = v2008;
        v2010 = 1;
        v2007 = v2133;
      }
      else
      {
        v2010 = *(_QWORD *)(v110 & 0xFFFFFFFF8);
        v2007 = v2008 << 36;
      }
      v110 = v2007 | v2010;
      v105 = this;
    }
    v2255 = v110;
    v2256 = *(_WORD *)(v108 + 16);
    *v2164 = JSC::DFG::InsertionSet::insertConstant((uint64_t *)this + 30, 0, (uint64_t)&v2254, 0xFFFE000000000787, 0, v58, v59, v60);
    if ((v2255 & 1) != 0 && (v2255 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v2255 & 0xFFFFFFFF8, v111, v55, v56, v57, v58, v59, v60);
    if ((v2254 & 1) != 0 && (v2254 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v2254 & 0xFFFFFFFF8, v111, v55, v56, v57, v58, v59, v60);
  }
  if (*v2203 && (v112 = *(unsigned int *)(*v2203 - 12), (_DWORD)v112))
  {
    if (v112 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1984DF1A8);
    }
    v2147 = *(unsigned int *)(*v2203 - 12);
    v113 = 8 * v112;
    v2149 = (WTF *)WTF::fastMalloc((WTF *)(8 * v112));
    bzero(v2149, v113);
    v2148 = 0;
  }
  else
  {
    v2147 = 0;
    v2149 = 0;
    v2148 = 1;
  }
  v114 = *((_QWORD *)v105 + 4);
  v115 = *(unsigned int *)(v114 + 60);
  if (!(_DWORD)v115)
    goto LABEL_2642;
  v116 = 0;
  v117 = *(JSC::DFG::BasicBlock ***)(v114 + 48);
  do
  {
    if (v117[v116])
    {
      if ((_DWORD)v115 == (_DWORD)v116)
        break;
      v2172 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)v105 + 504);
      v2185 = (uint64_t *)((char *)v105 + 512);
      v2159 = (uint64_t *)((char *)v105 + 536);
      v2161 = (uint64_t *)((char *)v105 + 520);
      v2152 = (uint64_t *)((char *)v105 + 424);
      v2165 = (uint64_t)v105 + 240;
      v118 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      LODWORD(v119) = v115;
      LODWORD(v120) = v116;
      v2206 = v118;
      v2156 = v115;
      v2157 = v114;
      while (1)
      {
        if (v119 <= v120)
        {
          __break(0xC471u);
          JUMPOUT(0x1984DEDE8);
        }
        v121 = *(_QWORD *)(*(_QWORD *)(v114 + 48) + 8 * v120);
        v122 = *(_DWORD *)(v121 + 8);
        if (*((_DWORD *)v105 + 121) <= v122)
        {
          __break(0xC471u);
          JUMPOUT(0x1984DEDF0);
        }
        v2167 = v120;
        v123 = *((_QWORD *)v105 + 59);
        v124 = v123 + 40 * v122;
        *((_BYTE *)v105 + 504) = *(_BYTE *)v124;
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)&v2265, (_QWORD *)(v124 + 8), v55, v56, v57, v58, v59, v60);
        v132 = *((_QWORD *)v105 + 64);
        *((_QWORD *)v105 + 64) = v2265;
        *(_QWORD *)&v2265 = v132;
        if (v132)
          WTF::fastFree(v132 - 16, v125, v126, v127, v128, v129, v130, v131);
        v133 = v123 + 40 * v122;
        *((_BYTE *)v105 + 528) = *(_BYTE *)(v133 + 24);
        if (!*(_DWORD *)(v121 + 220))
          goto LABEL_433;
        v140 = 0;
        v2216 = (WTF *)v121;
        do
        {
          v2212 = v140;
          v141 = *(_QWORD *)(*(_QWORD *)(v121 + 208) + 8 * (_QWORD)v140);
          v142 = *v2201;
          v143 = ~(v141 << 32);
          if (*v2201)
          {
            v144 = *(_DWORD *)(v142 - 8);
            v145 = ((v143 + v141) ^ ((unint64_t)(v143 + v141) >> 22))
                 + ~(((v143 + v141) ^ ((unint64_t)(v143 + v141) >> 22)) << 13);
            v146 = (9 * (v145 ^ (v145 >> 8))) ^ ((9 * (v145 ^ (v145 >> 8))) >> 15);
            v147 = v144 & (((v146 + ~(v146 << 27)) >> 31) ^ (v146 + ~((_DWORD)v146 << 27)));
            v148 = *(_QWORD *)(v142 + 24 * v147);
            if (v148 == v141)
            {
LABEL_521:
              v475 = v142 + 24 * v147;
              v476 = *(unsigned int *)(v475 + 20);
              if ((_DWORD)v476)
              {
                if (v476 >> 28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DEDF8);
                }
                v477 = v475 + 8;
                v478 = WTF::fastMalloc((WTF *)(16 * v476));
                v486 = v478;
                v487 = *(unsigned int *)(v477 + 12);
                if ((_DWORD)v487)
                {
                  v488 = *(__int128 **)v477;
                  v489 = 16 * v487;
                  v490 = (_OWORD *)v478;
                  do
                  {
                    v491 = *v488++;
                    *v490++ = v491;
                    v489 -= 16;
                  }
                  while (v489);
                }
                v492 = v478 + 16 * v476;
                v493 = v478;
                do
                {
                  if (*(_DWORD *)(v493 + 8) == 11)
                  {
                    v637 = *v2179;
                    if (*v2179)
                    {
                      v497 = 0;
                      v638 = *(_DWORD *)(v493 + 12);
                      v639 = ~(*(_QWORD *)v493 << 32) + *(_QWORD *)v493;
                      v640 = (v639 ^ (v639 >> 22)) + ~((v639 ^ (v639 >> 22)) << 13);
                      v641 = (9 * (v640 ^ (v640 >> 8))) ^ ((9 * (v640 ^ (v640 >> 8))) >> 15);
                      for (j = v638 + (((v641 + ~(v641 << 27)) >> 31) ^ (v641 + ~((_DWORD)v641 << 27))) + 11;
                            ;
                            j = v497 + v494)
                      {
                        v494 = j & *(_DWORD *)(v637 - 8);
                        v495 = v637 + 24 * v494;
                        if (*(_QWORD *)v495 == *(_QWORD *)v493
                          && *(_DWORD *)(v495 + 8) == 11
                          && *(_DWORD *)(v495 + 12) == v638)
                        {
                          break;
                        }
                        if (!*(_QWORD *)v495 && !*(_QWORD *)(v495 + 8))
                          goto LABEL_2444;
                        ++v497;
                      }
                      v642 = *(_QWORD *)(v637 + 24 * v494 + 16);
                    }
                    else
                    {
LABEL_2444:
                      v642 = 0;
                    }
                    JSC::DFG::SSACalculator::newDef((uint64_t)v2154, v642, v121, *v2164);
                  }
                  v493 += 16;
                }
                while (v493 != v492);
                WTF::fastFree(v486, v479, v480, v481, v482, v483, v484, v485);
                v105 = this;
              }
            }
            else
            {
              v149 = 1;
              while (v148)
              {
                v147 = (v147 + v149) & v144;
                v148 = *(_QWORD *)(v142 + 24 * v147);
                ++v149;
                if (v148 == v141)
                  goto LABEL_521;
              }
            }
          }
          v150 = *((_QWORD *)v105 + 55);
          if (!v150)
            goto LABEL_212;
          v151 = *(_DWORD *)(v150 - 8);
          v152 = ((v143 + v141) ^ ((unint64_t)(v143 + v141) >> 22))
               + ~(((v143 + v141) ^ ((unint64_t)(v143 + v141) >> 22)) << 13);
          v153 = (9 * (v152 ^ (v152 >> 8))) ^ ((9 * (v152 ^ (v152 >> 8))) >> 15);
          v154 = v151 & (((v153 + ~(v153 << 27)) >> 31) ^ (v153 + ~((_DWORD)v153 << 27)));
          v155 = *(_QWORD *)(v150 + 24 * v154);
          if (v155 != v141)
          {
            v305 = 1;
            do
            {
              if (!v155)
                goto LABEL_212;
              v154 = (v154 + v305) & v151;
              v155 = *(_QWORD *)(v150 + 24 * v154);
              ++v305;
            }
            while (v155 != v141);
          }
          v156 = v150 + 24 * v154;
          v157 = *(unsigned int *)(v156 + 20);
          if (!(_DWORD)v157)
            goto LABEL_212;
          if (v157 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DED00);
          }
          v158 = 8 * v157;
          v159 = *(_QWORD *)(v118 + 752);
          if (!v159)
            goto LABEL_668;
          v160 = (unint64_t)(v158 + 15) >> 4;
          if (v157 <= 0x34)
          {
            v161 = 23 * v160 + 7;
          }
          else
          {
            if (v157 > 0x4E2)
              goto LABEL_668;
            v161 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v160 + 626);
            if (*(_DWORD *)(v159 + 8052) <= v161)
              goto LABEL_668;
          }
          v162 = v159 + 8 * v161;
          v163 = v162 + 8064;
          *(_BYTE *)(v162 + 8064) = 1;
          v164 = *(unsigned int *)(v162 + 8080);
          if ((_DWORD)v164)
          {
            *(_DWORD *)(v163 + 16) = v164 - *(_DWORD *)(v163 + 20);
            casual = *(_QWORD *)(v163 + 8) - v164;
            goto LABEL_182;
          }
          v302 = *(_QWORD *)(v163 + 40);
          v303 = *(_QWORD *)(v163 + 24);
          if (v302)
            goto LABEL_325;
          if (*(_BYTE *)(v163 + 5) != 6)
            goto LABEL_2108;
          v1791 = *(unsigned int *)(v163 + 32);
          v1792 = *(_DWORD *)(v163 + 36);
          if (v1791 >= v1792)
            goto LABEL_2108;
          *(_QWORD *)(v163 + 8 * v1791 + 56) = 0;
          v1793 = (unint64_t *)(v159 + 8128 + 8 * v161 + 8 * v1791);
          v1794 = v1792 - 1 - v1791;
          do
          {
            if (!v1794)
            {
              *(_DWORD *)(v163 + 32) = v1792;
LABEL_2108:
              *(_BYTE *)v163 = 0;
LABEL_668:
              casual = bmalloc_allocate_casual(v158, 1);
              goto LABEL_183;
            }
            v303 += 1024;
            v1796 = *v1793++;
            v1795 = v1796;
            LODWORD(v1791) = v1791 + 1;
            --v1794;
          }
          while (!v1796);
          v302 = __rbit64(v1795);
          *(_DWORD *)(v163 + 32) = v1791;
          *(_QWORD *)(v163 + 24) = v303;
LABEL_325:
          v304 = __clz(v302);
          *(_QWORD *)(v163 + 40) = v302 & ~(0x8000000000000000 >> v304);
          casual = v303 + 16 * v304;
LABEL_182:
          *(_BYTE *)v163 = 0;
LABEL_183:
          memcpy((void *)casual, *(const void **)(v156 + 8), 8 * *(unsigned int *)(v156 + 20));
          v166 = (uint64_t *)(casual + 8 * v157);
          v167 = (uint64_t *)casual;
          while (2)
          {
            v168 = *v167;
            v169 = *((_QWORD *)v105 + 54);
            if (v169)
            {
              v170 = *(_DWORD *)(v169 - 8);
              v171 = (~(v168 << 32) + v168) ^ ((unint64_t)(~(v168 << 32) + v168) >> 22);
              v172 = 9 * ((v171 + ~(v171 << 13)) ^ ((v171 + ~(v171 << 13)) >> 8));
              v173 = (v172 ^ (v172 >> 15)) + ~((v172 ^ (v172 >> 15)) << 27);
              v174 = v170 & ((v173 >> 31) ^ v173);
              v175 = *(_QWORD *)(v169 + 16 * v174);
              if (v175 == v168)
              {
LABEL_186:
                v169 = *(_QWORD *)(v169 + 16 * v174 + 8);
              }
              else
              {
                v328 = 1;
                while (v175)
                {
                  v174 = ((_DWORD)v174 + v328) & v170;
                  v175 = *(_QWORD *)(v169 + 16 * v174);
                  ++v328;
                  if (v175 == v168)
                    goto LABEL_186;
                }
                v169 = 0;
              }
            }
            v176 = *v63;
            if (!*v63)
              goto LABEL_654;
            v177 = *(_DWORD *)(v176 - 8);
            v178 = (~(v169 << 32) + v169) ^ ((unint64_t)(~(v169 << 32) + v169) >> 22);
            v179 = 9 * ((v178 + ~(v178 << 13)) ^ ((v178 + ~(v178 << 13)) >> 8));
            v180 = (v179 ^ (v179 >> 15)) + ~((v179 ^ (v179 >> 15)) << 27);
            v181 = v177 & ((v180 >> 31) ^ v180);
            v182 = *(_QWORD *)(v176 + 16 * v181);
            if (v182 != v169)
            {
              v198 = 1;
              while (v182)
              {
                v181 = ((_DWORD)v181 + v198) & v177;
                v182 = *(_QWORD *)(v176 + 16 * v181);
                ++v198;
                if (v182 == v169)
                  goto LABEL_189;
              }
LABEL_654:
              v183 = 0;
              goto LABEL_190;
            }
LABEL_189:
            v183 = *(_QWORD *)(v176 + 16 * v181 + 8);
LABEL_190:
            *(_QWORD *)&v2251 = v183;
            v2263 = v2216;
            v184 = *(_QWORD *)(v2206 + 752);
            if (!v184)
              goto LABEL_2106;
            v185 = (_BYTE *)(v184 + 8488);
            *(_BYTE *)(v184 + 8488) = 1;
            v186 = *(unsigned int *)(v184 + 8504);
            if ((_DWORD)v186)
            {
              *(_DWORD *)(v184 + 8504) = v186 - *(_DWORD *)(v184 + 8508);
              v187 = (_QWORD *)(*(_QWORD *)(v184 + 8496) - v186);
              goto LABEL_193;
            }
            v194 = *(_QWORD *)(v184 + 8528);
            v195 = *(_QWORD *)(v184 + 8512);
            if (v194)
              goto LABEL_202;
            if (*(_BYTE *)(v184 + 8493) != 6)
              goto LABEL_2105;
            v1785 = *(_DWORD *)(v184 + 8524);
            v1786 = *(unsigned int *)(v184 + 8520);
            if (v1786 >= v1785)
              goto LABEL_2105;
            *(_QWORD *)&v185[8 * v1786 + 56] = 0;
            v1787 = (unint64_t *)(v184 + 8 * v1786 + 8552);
            v1788 = v1785 - 1 - v1786;
            do
            {
              if (!v1788)
              {
                *(_DWORD *)(v184 + 8520) = v1785;
LABEL_2105:
                *v185 = 0;
LABEL_2106:
                v187 = (_QWORD *)bmalloc_allocate_casual(32, 1);
                goto LABEL_194;
              }
              v195 += 1024;
              v1790 = *v1787++;
              v1789 = v1790;
              LODWORD(v1786) = v1786 + 1;
              --v1788;
            }
            while (!v1790);
            v194 = __rbit64(v1789);
            *(_DWORD *)(v184 + 8520) = v1786;
            *(_QWORD *)(v184 + 8512) = v195;
LABEL_202:
            v196 = __clz(v194);
            *(_QWORD *)(v184 + 8528) = v194 & ~(0x8000000000000000 >> v196);
            v187 = (_QWORD *)(v195 + 16 * v196);
LABEL_193:
            *v185 = 0;
LABEL_194:
            *v187 = v183;
            v187[1] = v2216;
            v187[2] = v168;
            v187[3] = 0;
            v105 = this;
            v187[3] = *((_QWORD *)this + 20);
            *((_QWORD *)this + 20) = v187;
            *(_QWORD *)&v2250 = v187;
            v188 = *((_DWORD *)v2216 + 2);
            if (*((_DWORD *)this + 47) <= v188)
            {
              __break(0xC471u);
              JUMPOUT(0x1984DED08);
            }
            WTF::HashMap<JSC::DFG::SSACalculator::Variable *,JSC::DFG::SSACalculator::Def *,WTF::DefaultHash<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Def *>,WTF::HashTableTraits>::add<JSC::DFG::SSACalculator::Def *&>((uint64_t *)(*((_QWORD *)this + 22) + 24 * v188), (uint64_t *)&v2251, (uint64_t *)&v2250, v56, v57, v58, v59, v60, (uint64_t)&v2265);
            if (LOBYTE(v2266[0]))
            {
              v189 = (uint64_t *)v2251;
              v190 = *(unsigned int *)(v2251 + 12);
              if ((_DWORD)v190 == *(_DWORD *)(v2251 + 8))
              {
                v197 = (WTF **)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2251, v190 + 1, (unint64_t)&v2263);
                v190 = *((unsigned int *)v189 + 3);
                v191 = v190 + 1;
                v192 = *v189;
                v193 = *v197;
              }
              else
              {
                v191 = v190 + 1;
                v192 = *(_QWORD *)v2251;
                v193 = v2216;
              }
              *(_QWORD *)(v192 + 8 * v190) = v193;
              *((_DWORD *)v189 + 3) = v191;
            }
            else
            {
              *(_QWORD *)(v2265 + 8) = v2250;
            }
            if (++v167 != v166)
              continue;
            break;
          }
          v118 = v2206;
          v199 = *(_QWORD *)(v2206 + 752);
          if (v199)
          {
            v121 = (uint64_t)v2216;
            if (casual >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((casual >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(casual)) & 1) == 0)
            {
              if (casual >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= casual >> 24)
              {
                v56 = 0;
              }
              else
              {
                v56 = (*(_DWORD *)((char *)off_1ECF425F8
                                 + ((((casual >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                 + 24) >> (2 * ((BYTE3(casual) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                if ((_DWORD)v56 == 1)
                  goto LABEL_210;
              }
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v199, casual, 1, v56, v57, v58, v59, v60);
            }
            else
            {
LABEL_210:
              v200 = *(unsigned int *)(v199 + 8000);
              if (v200 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v199, casual, (os_unfair_lock_s *)5, v56, v57, v58, v59, v60);
              }
              else
              {
                *(_QWORD *)(v199 + 8 * v200) = casual | 0x5000000000000;
                *(_DWORD *)(v199 + 8000) = v200 + 1;
              }
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache(casual, (uint64_t)&bmalloc_heap_config, 1);
            v121 = (uint64_t)v2216;
          }
LABEL_212:
          v201 = *((_QWORD *)v105 + 57);
          if (v201)
          {
            v202 = *(_DWORD *)(v201 - 8);
            v203 = ((v143 + v141) ^ ((unint64_t)(v143 + v141) >> 22))
                 + ~(((v143 + v141) ^ ((unint64_t)(v143 + v141) >> 22)) << 13);
            v204 = (9 * (v203 ^ (v203 >> 8))) ^ ((9 * (v203 ^ (v203 >> 8))) >> 15);
            v205 = v202 & (((v204 + ~(v204 << 27)) >> 31) ^ (v204 + ~((_DWORD)v204 << 27)));
            v206 = *(_QWORD *)(v201 + 24 * v205);
            if (v206 == v141)
            {
LABEL_214:
              v207 = v201 + 24 * v205;
              v208 = *(unsigned int *)(v207 + 20);
              if ((_DWORD)v208)
              {
                if (v208 >= 0xAAAAAAB)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DEE00);
                }
                v1940 = (__int128 **)(v207 + 8);
                v1941 = WTF::fastMalloc((WTF *)(24 * v208));
                v1942 = v1941;
                v1943 = *((unsigned int *)v1940 + 3);
                if ((_DWORD)v1943)
                {
                  v1944 = *v1940;
                  v1945 = 24 * v1943;
                  v1946 = v1941;
                  do
                  {
                    v1947 = *v1944;
                    *(_QWORD *)(v1946 + 16) = *((_QWORD *)v1944 + 2);
                    *(_OWORD *)v1946 = v1947;
                    v1946 += 24;
                    v1944 = (__int128 *)((char *)v1944 + 24);
                    v1945 -= 24;
                  }
                  while (v1945);
                }
                v1948 = v1941 + 24 * v208;
                v1949 = v1941;
                do
                {
                  v2251 = *(_OWORD *)v1949;
                  v1950 = *(WTF **)(v1949 + 16);
                  v2263 = v1950;
                  if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
                  {
                    *(_QWORD *)&v2265 = v2251;
                    if (!WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::contains(v2203, &v2265))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984DEE28);
                    }
                    if (!WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::contains(v2203, &v2263))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984DEE48);
                    }
                    WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get(&v2265, *((_QWORD *)this + 55), v141);
                    v2122 = v2265;
                    if (HIDWORD(v2265))
                    {
                      v2146 = *((_QWORD *)this + 54);
                      v2123 = v2263;
                      v2124 = 8 * HIDWORD(v2265) - 8;
                      v2125 = (uint64_t *)v2265;
                      do
                      {
                        v2126 = *v2125++;
                        v2128 = v2127 != (_QWORD)v2123;
                        v2129 = (WTF *)v2127 == v2123 || v2124 == 0;
                        v2124 -= 8;
                      }
                      while (!v2129);
                    }
                    else
                    {
                      v2128 = 1;
                    }
                    if (v2122)
                      WTF::fastFree(v2122, v2115, v2116, v2117, v2118, v2119, v2120, v2121);
                    if (v2128)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984DEE68);
                    }
                    v1950 = v2263;
                    v63 = v2194;
                    v118 = v2206;
                    v121 = (uint64_t)v2216;
                  }
                  if (v2147 <= v1951)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984DEE08);
                  }
                  WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::add((uint64_t)&v2265, (uint64_t *)v2149 + v1951, (uint64_t)&v2251);
                  v1949 += 24;
                }
                while (v1949 != v1948);
                WTF::fastFree(v1942, v1952, v1953, v1954, v1955, v1956, v1957, v1958);
                v105 = this;
              }
            }
            else
            {
              v306 = 1;
              while (v206)
              {
                v205 = (v205 + v306) & v202;
                v206 = *(_QWORD *)(v201 + 24 * v205);
                ++v306;
                if (v206 == v141)
                  goto LABEL_214;
              }
            }
          }
          v209 = *v2203;
          if (!*v2203)
            goto LABEL_232;
          v210 = *(_DWORD *)(v209 - 8);
          v211 = ((v143 + v141) ^ ((unint64_t)(v143 + v141) >> 22))
               + ~(((v143 + v141) ^ ((unint64_t)(v143 + v141) >> 22)) << 13);
          v212 = (9 * (v211 ^ (v211 >> 8))) ^ ((9 * (v211 ^ (v211 >> 8))) >> 15);
          v213 = ((v212 + ~(v212 << 27)) >> 31) ^ (v212 + ~((_DWORD)v212 << 27));
          v214 = v210 & v213;
          v215 = *(_QWORD *)(v209 + 8 * (v210 & v213));
          if (v215 != v141)
          {
            v216 = 1;
            do
            {
              if (!v215)
                goto LABEL_232;
              v214 = (v214 + v216) & v210;
              v215 = *(_QWORD *)(v209 + 8 * v214);
              ++v216;
            }
            while (v215 != v141);
          }
          v217 = *v63;
          if (*v63)
          {
            v218 = *(_DWORD *)(v217 - 8);
            v219 = v218 & v213;
            v220 = *(_QWORD *)(v217 + 16 * v219);
            if (v220 == v141)
            {
LABEL_222:
              v221 = *(_QWORD *)(v217 + 16 * v219 + 8);
              goto LABEL_223;
            }
            v329 = 1;
            while (v220)
            {
              v219 = ((_DWORD)v219 + v329) & v218;
              v220 = *(_QWORD *)(v217 + 16 * v219);
              ++v329;
              if (v220 == v141)
                goto LABEL_222;
            }
          }
          v221 = 0;
LABEL_223:
          *(_QWORD *)&v2251 = v221;
          v2263 = (WTF *)v121;
          v222 = *(_QWORD *)(v118 + 752);
          if (!v222)
            goto LABEL_2133;
          v223 = (_BYTE *)(v222 + 8488);
          *(_BYTE *)(v222 + 8488) = 1;
          v224 = *(unsigned int *)(v222 + 8504);
          if ((_DWORD)v224)
          {
            *(_DWORD *)(v222 + 8504) = v224 - *(_DWORD *)(v222 + 8508);
            v225 = (_QWORD *)(*(_QWORD *)(v222 + 8496) - v224);
            goto LABEL_226;
          }
          v307 = *(_QWORD *)(v222 + 8528);
          v308 = *(_QWORD *)(v222 + 8512);
          if (v307)
            goto LABEL_335;
          if (*(_BYTE *)(v222 + 8493) != 6)
            goto LABEL_2132;
          v1797 = *(_DWORD *)(v222 + 8524);
          v1798 = *(unsigned int *)(v222 + 8520);
          if (v1798 >= v1797)
            goto LABEL_2132;
          *(_QWORD *)&v223[8 * v1798 + 56] = 0;
          v1799 = (unint64_t *)(v222 + 8 * v1798 + 8552);
          v1800 = v1797 - 1 - v1798;
          while (2)
          {
            if (!v1800)
            {
              *(_DWORD *)(v222 + 8520) = v1797;
LABEL_2132:
              *v223 = 0;
LABEL_2133:
              v225 = (_QWORD *)bmalloc_allocate_casual(32, 1);
              goto LABEL_227;
            }
            v308 += 1024;
            v1802 = *v1799++;
            v1801 = v1802;
            LODWORD(v1798) = v1798 + 1;
            --v1800;
            if (!v1802)
              continue;
            break;
          }
          v307 = __rbit64(v1801);
          *(_DWORD *)(v222 + 8520) = v1798;
          *(_QWORD *)(v222 + 8512) = v308;
LABEL_335:
          v309 = __clz(v307);
          *(_QWORD *)(v222 + 8528) = v307 & ~(0x8000000000000000 >> v309);
          v225 = (_QWORD *)(v308 + 16 * v309);
LABEL_226:
          *v223 = 0;
LABEL_227:
          *v225 = v221;
          v225[1] = v121;
          v225[2] = v141;
          v225[3] = 0;
          v225[3] = *((_QWORD *)v105 + 20);
          *((_QWORD *)v105 + 20) = v225;
          *(_QWORD *)&v2250 = v225;
          v226 = *(_DWORD *)(v121 + 8);
          if (*((_DWORD *)v105 + 47) <= v226)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DED10);
          }
          WTF::HashMap<JSC::DFG::SSACalculator::Variable *,JSC::DFG::SSACalculator::Def *,WTF::DefaultHash<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Def *>,WTF::HashTableTraits>::add<JSC::DFG::SSACalculator::Def *&>((uint64_t *)(*((_QWORD *)v105 + 22) + 24 * v226), (uint64_t *)&v2251, (uint64_t *)&v2250, v56, v57, v58, v59, v60, (uint64_t)&v2265);
          if (LOBYTE(v2266[0]))
          {
            v227 = v2251;
            v228 = *(unsigned int *)(v2251 + 12);
            if ((_DWORD)v228 == *(_DWORD *)(v2251 + 8))
            {
              v319 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2251, v228 + 1, (unint64_t)&v2263);
              v320 = *(unsigned int *)(v227 + 12);
              v229 = v320 + 1;
              *(_QWORD *)(*(_QWORD *)v227 + 8 * v320) = *v319;
            }
            else
            {
              v229 = v228 + 1;
              *(_QWORD *)(*(_QWORD *)v2251 + 8 * v228) = v121;
            }
            *(_DWORD *)(v227 + 12) = v229;
          }
          else
          {
            *(_QWORD *)(v2265 + 8) = v2250;
          }
LABEL_232:
          v2267 = 0;
          v230 = *(unsigned __int16 *)(v141 + 18);
          if (v230 > 0x85)
          {
            if (*(unsigned __int16 *)(v141 + 18) > 0x158u)
            {
              if (v230 - 420 < 7)
                goto LABEL_317;
              if (v230 - 359 >= 4)
              {
                if (v230 == 345)
                {
                  *(_QWORD *)&v2251 = **(_QWORD **)(v141 + 72);
                  v565 = *(_QWORD *)(v2251 + 40);
                  if ((v565 & 1) != 0)
                    v566 = (v565 >> 1) & 3;
                  else
                    v566 = *(unsigned __int8 *)(v565 + 4);
                  LOBYTE(v2263) = v566 != 2;
                  WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(&v2265, v2152, (uint64_t *)&v2251, &v2263, v57, v58, v59, v60);
                  if (!*(_BYTE *)(v2265 + 8))
                  {
                    v2263 = (WTF *)2;
                    v568 = *(_QWORD *)(v141 + 72);
                    *(_QWORD *)&v2251 = 0;
                    *((_QWORD *)&v2251 + 1) = v568;
                    WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, &v2267, &v2263, &v2251);
                    v2263 = (WTF *)1;
                    v569 = *(_QWORD *)(v141 + 24);
                    v570 = v569 & 0xFF00FFFFFFFFFFFFLL;
                    *(_QWORD *)&v2251 = v569 & 0xFF00FFFFFFFFFFFFLL;
                    *((_QWORD *)&v2251 + 1) = 0;
                    if ((v569 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v625 = *(unsigned __int16 *)((v569 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                      if (v625 <= 2)
                      {
                        v1712 = *(_QWORD *)(v570 + 72);
                        *((_QWORD *)&v2251 + 1) = v1712;
                        if ((_DWORD)v625)
                        {
                          if ((_DWORD)v625 != 1)
                            v625 = 2;
                          *((_QWORD *)&v2251 + 1) = v625 | v1712;
                          v105 = this;
                          v121 = (uint64_t)v2216;
                          v63 = v2194;
                          v118 = v2206;
                        }
                      }
                    }
                    WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, &v2267, &v2263, &v2251);
                    v571 = **(_QWORD **)(v141 + 72);
                    v578 = JSC::DFG::Graph::freeze(*((_QWORD *)v105 + 4), **(_QWORD **)(v141 + 80), v572, v573, v574, v575, v576, v577);
                    *(_QWORD *)&v2251 = 0;
                    *((_QWORD *)&v2251 + 1) = v578;
                    if (*(_DWORD *)(v571 + 16) != -1)
                    {
                      v579 = 0;
                      do
                      {
                        LODWORD(v2263) = 6;
                        HIDWORD(v2263) = v579;
                        WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode&>((uint64_t)&v2265, &v2267, &v2263, &v2251);
                        ++v579;
                      }
                      while (v579 < *(_DWORD *)(v571 + 16) + 1);
                    }
                    v233 = v567;
                    goto LABEL_239;
                  }
LABEL_1867:
                  goto LABEL_238;
                }
LABEL_236:
                v231 = *(_QWORD *)(v141 + 24);
                if ((*(_BYTE *)(v141 + 56) & 0x10) == 0)
                {
                  v232 = v231 & 0xFF00FFFFFFFFFFFFLL;
                  if ((v231 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v310 = *v2185;
                    if (*v2185)
                    {
                      v345 = *(_DWORD *)(v310 - 8);
                      v346 = (v232 + ~(v231 << 32)) ^ ((v232 + ~(v231 << 32)) >> 22);
                      v347 = 9 * ((v346 + ~(v346 << 13)) ^ ((v346 + ~(v346 << 13)) >> 8));
                      v348 = (v347 ^ (v347 >> 15)) + ~((v347 ^ (v347 >> 15)) << 27);
                      v349 = v345 & ((v348 >> 31) ^ v348);
                      v350 = *(_QWORD *)(v310 + 16 * v349);
                      if (v350 != v232)
                      {
                        v351 = 1;
                        while (v350)
                        {
                          v349 = ((_DWORD)v349 + v351) & v345;
                          v350 = *(_QWORD *)(v310 + 16 * v349);
                          ++v351;
                          if (v350 == v232)
                            goto LABEL_394;
                        }
                        v349 = *(unsigned int *)(v310 - 4);
                      }
LABEL_394:
                      if (v349 != *(_DWORD *)(v310 - 4))
                      {
                        v407 = *(JSC::DFG::Node **)(v310 + 16 * v349 + 8);
                        if (v407)
                      }
                    }
                    v311 = *(_QWORD *)(v141 + 32);
                    v312 = v311 & 0xFF00FFFFFFFFFFFFLL;
                    if ((v311 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v313 = *v2185;
                      if (*v2185)
                      {
                        v400 = *(_DWORD *)(v313 - 8);
                        v401 = (v312 + ~(v311 << 32)) ^ ((v312 + ~(v311 << 32)) >> 22);
                        v402 = 9 * ((v401 + ~(v401 << 13)) ^ ((v401 + ~(v401 << 13)) >> 8));
                        v403 = (v402 ^ (v402 >> 15)) + ~((v402 ^ (v402 >> 15)) << 27);
                        v404 = v400 & ((v403 >> 31) ^ v403);
                        v405 = *(_QWORD *)(v313 + 16 * v404);
                        if (v405 != v312)
                        {
                          v406 = 1;
                          while (v405)
                          {
                            v404 = ((_DWORD)v404 + v406) & v400;
                            v405 = *(_QWORD *)(v313 + 16 * v404);
                            ++v406;
                            if (v405 == v312)
                              goto LABEL_466;
                          }
                          v404 = *(unsigned int *)(v313 - 4);
                        }
LABEL_466:
                        if (v404 != *(_DWORD *)(v313 - 4))
                        {
                          v408 = *(JSC::DFG::Node **)(v313 + 16 * v404 + 8);
                          if (v408)
                        }
                      }
                      v314 = *(_QWORD *)(v141 + 40);
                      v315 = v314 & 0xFF00FFFFFFFFFFFFLL;
                      if ((v314 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      {
                        v429 = *v2185;
                        if (*v2185)
                        {
                          v430 = *(_DWORD *)(v429 - 8);
                          v431 = (v315 + ~(v314 << 32)) ^ ((v315 + ~(v314 << 32)) >> 22);
                          v432 = 9 * ((v431 + ~(v431 << 13)) ^ ((v431 + ~(v431 << 13)) >> 8));
                          v433 = (v432 ^ (v432 >> 15)) + ~((v432 ^ (v432 >> 15)) << 27);
                          v434 = v430 & ((v433 >> 31) ^ v433);
                          v435 = *(_QWORD *)(v429 + 16 * v434);
                          if (v435 != v315)
                          {
                            v436 = 1;
                            while (v435)
                            {
                              v434 = ((_DWORD)v434 + v436) & v430;
                              v435 = *(_QWORD *)(v429 + 16 * v434);
                              ++v436;
                              if (v435 == v315)
                                goto LABEL_636;
                            }
                            v434 = *(unsigned int *)(v429 - 4);
                          }
LABEL_636:
                          if (v434 != *(_DWORD *)(v429 - 4))
                          {
                            v1704 = v429 + 16 * v434;
                            goto LABEL_1812;
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_238;
                }
                v626 = *(_QWORD *)(v141 + 32);
                if ((int)v626 + (int)v231 <= v231)
                  goto LABEL_238;
                v384 = *((_QWORD *)v105 + 4);
                v336 = *(_QWORD *)(v141 + 24);
                do
                {
                  if (v336 >= *(unsigned int *)(v384 + 164))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984DEEB0);
                  }
                  v333 = *(_QWORD *)(*(_QWORD *)(v384 + 152) + 8 * v336);
                  v334 = v333 & 0xFF00FFFFFFFFFFFFLL;
                  if ((v333 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v335 = *v2185;
                    if (*v2185)
                    {
                      v337 = *(_DWORD *)(v335 - 8);
                      v338 = (v334 + ~(v333 << 32)) ^ ((v334 + ~(v333 << 32)) >> 22);
                      v339 = 9 * ((v338 + ~(v338 << 13)) ^ ((v338 + ~(v338 << 13)) >> 8));
                      v340 = (v339 ^ (v339 >> 15)) + ~((v339 ^ (v339 >> 15)) << 27);
                      v341 = v337 & ((v340 >> 31) ^ v340);
                      v342 = *(_QWORD *)(v335 + 16 * v341);
                      if (v342 != v334)
                      {
                        v343 = 1;
                        while (v342)
                        {
                          v341 = ((_DWORD)v341 + v343) & v337;
                          v342 = *(_QWORD *)(v335 + 16 * v341);
                          ++v343;
                          if (v342 == v334)
                            goto LABEL_384;
                        }
                        v341 = *(unsigned int *)(v335 - 4);
                      }
LABEL_384:
                      if (v341 != *(_DWORD *)(v335 - 4))
                      {
                        v344 = *(JSC::DFG::Node **)(v335 + 16 * v341 + 8);
                        if (v344)
                        {
                          v231 = *(_QWORD *)(v141 + 24);
                          v626 = *(_QWORD *)(v141 + 32);
                        }
                      }
                    }
                  }
                  v233 = 0;
                  ++v336;
                }
                while (v336 < (v231 + v626));
                goto LABEL_239;
              }
              *(_QWORD *)&v2251 = **(_QWORD **)(v141 + 72);
              v547 = *(_QWORD *)(v2251 + 112);
              if ((v547 & 1) != 0)
                v548 = (v547 >> 1) & 3;
              else
                v548 = *(unsigned __int8 *)(v547 + 4);
              LOBYTE(v2263) = v548 != 2;
              WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(&v2265, v2152, (uint64_t *)&v2251, &v2263, v57, v58, v59, v60);
              if (*(_BYTE *)(v2265 + 8))
                goto LABEL_1867;
              v555 = *(unsigned __int16 *)(v141 + 18) - 360;
              if (v555 > 2)
                v556 = 3;
              else
                v556 = dword_1991563D8[(__int16)v555];
              v2263 = (WTF *)9;
              v614 = *(_QWORD *)(v141 + 72);
              *(_QWORD *)&v2251 = 0;
              *((_QWORD *)&v2251 + 1) = v614;
              WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, &v2267, &v2263, &v2251);
              v2263 = (WTF *)8;
              v615 = *(_QWORD *)(v141 + 24);
              v616 = v615 & 0xFF00FFFFFFFFFFFFLL;
              *(_QWORD *)&v2251 = v615 & 0xFF00FFFFFFFFFFFFLL;
              *((_QWORD *)&v2251 + 1) = 0;
              if ((v615 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v546 = *(unsigned __int16 *)((v615 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                if (v546 <= 2)
                {
                  v1653 = *(_QWORD *)(v616 + 72);
                  *((_QWORD *)&v2251 + 1) = v1653;
                  if ((_DWORD)v546)
                  {
                    if ((_DWORD)v546 == 1)
                      goto LABEL_1824;
LABEL_2564:
                    v546 = 2;
LABEL_1824:
                    *((_QWORD *)&v2251 + 1) = v546 | v1653;
                    v105 = this;
                    v121 = (uint64_t)v2216;
                    v63 = v2194;
                    v118 = v2206;
                  }
                }
              }
              goto LABEL_417;
            }
            if (*(unsigned __int16 *)(v141 + 18) > 0xAAu)
            {
              if (*(unsigned __int16 *)(v141 + 18) > 0x102u)
              {
                if (*(unsigned __int16 *)(v141 + 18) <= 0x116u)
                {
                  switch(v230)
                  {
                    case 0x103u:
                      *(_QWORD *)&v2265 = *(_QWORD *)(v141 + 72);
                      v385 = v502;
                      if ((v2265 & 1) != 0)
                        WTF::fastFree(v2265 & 0xFFFFFFFFFFFFFFFCLL, v509, v510, v511, v512, v513, v514, v515);
                      v2263 = (WTF *)13;
                      v516 = JSC::DFG::Graph::freeze(*((_QWORD *)v105 + 4), *(_QWORD *)(v141 + 72), v510, v511, v512, v513, v514, v515);
                      *(_QWORD *)&v2251 = 0;
                      *((_QWORD *)&v2251 + 1) = v516;
                      break;
                    case 0x10Eu:
                      v2263 = (WTF *)18;
                      v618 = *(_QWORD *)(v141 + 72);
                      *(_QWORD *)&v2251 = 0;
                      *((_QWORD *)&v2251 + 1) = v618;
                      WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, &v2267, &v2263, &v2251);
                      v2263 = (WTF *)19;
                      v619 = *(_QWORD *)(v141 + 24);
                      v620 = v619 & 0xFF00FFFFFFFFFFFFLL;
                      *(_QWORD *)&v2251 = v619 & 0xFF00FFFFFFFFFFFFLL;
                      *((_QWORD *)&v2251 + 1) = 0;
                      if ((v619 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      {
                        v546 = *(unsigned __int16 *)((v619 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                        if (v546 <= 2)
                        {
                          v1653 = *(_QWORD *)(v620 + 72);
                          *((_QWORD *)&v2251 + 1) = v1653;
                          if ((_DWORD)v546)
                          {
                            if ((_DWORD)v546 == 1)
                              goto LABEL_1824;
                            goto LABEL_2564;
                          }
                        }
                      }
                      break;
                    case 0x10Cu:
                      v1621 = *(unsigned __int8 *)(*(_QWORD *)(v141 + 72) + 9);
                      switch(v1621)
                      {
                        case '@':
                          break;
                        case 'B':
                        case 'A':
                          break;
                        case 'D':
                          break;
                        default:
                          JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)v105 + 4), (JSC::DFG::Node *)v141, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x3DB, "void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1871:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1892:21)]", "Bad structure");
                          __break(0xC471u);
                          JUMPOUT(0x1984DDD38);
                      }
                      v233 = v1622;
                      goto LABEL_239;
                    default:
                      goto LABEL_236;
                  }
                  goto LABEL_417;
                }
                switch(v230)
                {
                  case 0x158u:
                    v534 = (JSC::DFG::Node *)(*(_QWORD *)(v141 + 24) & 0xFF00FFFFFFFFFFFFLL);
                    v542 = v535;
                    if (!v535 || *((_DWORD *)v535 + 2) != 7)
                    {
                      v1605 = v2172;
LABEL_665:
                      v627 = v534;
                      v409 = v542;
LABEL_509:
                      v233 = v409;
                      goto LABEL_239;
                    }
                    v385 = v535;
                    v543 = *(_DWORD *)(v141 + 72);
                    LODWORD(v2263) = 7;
                    HIDWORD(v2263) = v543;
                    v544 = *(_QWORD *)(v141 + 32);
                    v545 = v544 & 0xFF00FFFFFFFFFFFFLL;
                    *(_QWORD *)&v2251 = v544 & 0xFF00FFFFFFFFFFFFLL;
                    *((_QWORD *)&v2251 + 1) = 0;
                    if ((v544 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v546 = *(unsigned __int16 *)((v544 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                      if (v546 <= 2)
                      {
                        v1653 = *(_QWORD *)(v545 + 72);
                        *((_QWORD *)&v2251 + 1) = v1653;
                        if ((_DWORD)v546)
                        {
                          if ((_DWORD)v546 != 1)
                            goto LABEL_2564;
                          goto LABEL_1824;
                        }
                      }
                    }
LABEL_417:
                    WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, &v2267, &v2263, &v2251);
                    break;
                  case 0x157u:
                    v621 = *(_QWORD *)(v141 + 24);
                    v622 = v621 & 0xFF00FFFFFFFFFFFFLL;
                    v233 = v623;
                    if (v623 && *((_DWORD *)v623 + 2) == 7)
                    {
                      v517 = *(_DWORD *)(v141 + 72);
                      v518 = 7;
LABEL_550:
                      v519 = v233[2];
                      if (!v519)
                        goto LABEL_239;
                      v385 = v233;
                      v520 = *(_DWORD *)(v519 - 8);
                      v521 = v520 & (v517 + v518);
                      v522 = (int *)(v519 + 16 * v521);
                      v523 = *v522;
                      v524 = v522[1];
                      if (*v522 == v518 && v524 == v517)
                      {
LABEL_2384:
                        v2069 = *(WTF **)(v519 + 16 * v521 + 8);
                        if (v2069)
                        {
                          *(_QWORD *)&v2251 = v141;
                          v2263 = v2069;
                          WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v2185, (uint64_t *)&v2251, (uint64_t *)&v2263, v56, v57, v58, v59, v60, (uint64_t)&v2265);
                        }
                      }
                      else
                      {
                        v526 = 1;
                        while (v523 | v524)
                        {
                          v521 = ((_DWORD)v521 + v526) & v520;
                          v2067 = (int *)(v519 + 16 * v521);
                          v523 = *v2067;
                          v524 = v2067[1];
                          ++v526;
                          if (v523 == v518 && v524 == v517)
                            goto LABEL_2384;
                        }
                      }
                    }
                    else
                    {
                      v466 = *v2185;
                      if (!*v2185)
                        goto LABEL_239;
                      v1722 = *(_DWORD *)(v466 - 8);
                      v1723 = (v622 + ~(v621 << 32)) ^ ((v622 + ~(v621 << 32)) >> 22);
                      v1724 = 9 * ((v1723 + ~(v1723 << 13)) ^ ((v1723 + ~(v1723 << 13)) >> 8));
                      v1725 = (v1724 ^ (v1724 >> 15)) + ~((v1724 ^ (v1724 >> 15)) << 27);
                      v471 = v1722 & ((v1725 >> 31) ^ v1725);
                      v1726 = *(_QWORD *)(v466 + 16 * v471);
                      if (v1726 != v622)
                      {
                        v1727 = 1;
                        while (v1726)
                        {
                          v471 = ((_DWORD)v471 + v1727) & v1722;
                          v1726 = *(_QWORD *)(v466 + 16 * v471);
                          ++v1727;
                          if (v1726 == v622)
                            goto LABEL_565;
                        }
LABEL_564:
                        v471 = *(unsigned int *)(v466 - 4);
                      }
LABEL_565:
                      if (v471 == *(_DWORD *)(v466 - 4))
                        goto LABEL_239;
                      v533 = *(JSC::DFG::Node **)(v466 + 16 * v471 + 8);
                      if (!v533)
                        goto LABEL_239;
                      v1719 = v2172;
                      v385 = v233;
LABEL_1844:
                    }
                    break;
                  case 0x117u:
                    goto LABEL_317;
                  default:
                    goto LABEL_236;
                }
LABEL_418:
                v233 = v385;
                goto LABEL_239;
              }
              switch(*(_WORD *)(v141 + 18))
              {
                case 0xAB:
                  v316 = *(_QWORD *)(v141 + 24);
                  v317 = v316 & 0xFF00FFFFFFFFFFFFLL;
                  v233 = v318;
                  if (v318 && *((_DWORD *)v318 + 2) == 2)
                  {
                    v517 = *(_DWORD *)(v141 + 72);
                    v518 = 6;
                    goto LABEL_550;
                  }
                  v466 = *v2185;
                  if (!*v2185)
                    goto LABEL_239;
                  v527 = *(_DWORD *)(v466 - 8);
                  v528 = (v317 + ~(v316 << 32)) ^ ((v317 + ~(v316 << 32)) >> 22);
                  v529 = 9 * ((v528 + ~(v528 << 13)) ^ ((v528 + ~(v528 << 13)) >> 8));
                  v530 = (v529 ^ (v529 >> 15)) + ~((v529 ^ (v529 >> 15)) << 27);
                  v471 = v527 & ((v530 >> 31) ^ v530);
                  v531 = *(_QWORD *)(v466 + 16 * v471);
                  if (v531 == v317)
                    goto LABEL_565;
                  v532 = 1;
                  while (v531)
                  {
                    v471 = ((_DWORD)v471 + v532) & v527;
                    v531 = *(_QWORD *)(v466 + 16 * v471);
                    ++v532;
                    if (v531 == v317)
                      goto LABEL_565;
                  }
                  goto LABEL_564;
                case 0xAC:
                  v372 = *(_QWORD *)(v141 + 24);
                  v373 = v372 & 0xFF00FFFFFFFFFFFFLL;
                  v233 = v374;
                  if (!v374 || *((_DWORD *)v374 + 2) != 2)
                  {
                    v375 = *v2185;
                    if (!*v2185)
                      goto LABEL_239;
                    v376 = *(_DWORD *)(v375 - 8);
                    v377 = (v373 + ~(v372 << 32)) ^ ((v373 + ~(v372 << 32)) >> 22);
                    v378 = 9 * ((v377 + ~(v377 << 13)) ^ ((v377 + ~(v377 << 13)) >> 8));
                    v379 = (v378 ^ (v378 >> 15)) + ~((v378 ^ (v378 >> 15)) << 27);
                    v380 = v376 & ((v379 >> 31) ^ v379);
                    v381 = *(_QWORD *)(v375 + 16 * v380);
                    if (v381 != v373)
                    {
                      v382 = 1;
                      while (v381)
                      {
                        v380 = ((_DWORD)v380 + v382) & v376;
                        v381 = *(_QWORD *)(v375 + 16 * v380);
                        ++v382;
                        if (v381 == v373)
                          goto LABEL_579;
                      }
                      v380 = *(unsigned int *)(v375 - 4);
                    }
LABEL_579:
                    v385 = v374;
                    if (v380 != *(_DWORD *)(v375 - 4))
                    {
                      v1604 = *(JSC::DFG::Node **)(v375 + 16 * v380 + 8);
                      if (v1604)
                      {
                        v375 = *v2185;
                        if (!*v2185)
                          goto LABEL_418;
                        v376 = *(_DWORD *)(v375 - 8);
                      }
                    }
                    v557 = *(_QWORD *)(v141 + 32);
                    v558 = v557 & 0xFF00FFFFFFFFFFFFLL;
                    v559 = ((v557 & 0xFF00FFFFFFFFFFFFLL) + ~(v557 << 32)) ^ (((v557 & 0xFF00FFFFFFFFFFFFLL)
                                                                             + ~(v557 << 32)) >> 22);
                    v560 = 9 * ((v559 + ~(v559 << 13)) ^ ((v559 + ~(v559 << 13)) >> 8));
                    v561 = (v560 ^ (v560 >> 15)) + ~((v560 ^ (v560 >> 15)) << 27);
                    v562 = v376 & ((v561 >> 31) ^ v561);
                    v563 = *(_QWORD *)(v375 + 16 * v562);
                    if (v563 != v558)
                    {
                      v564 = 1;
                      while (v563)
                      {
                        v562 = ((_DWORD)v562 + v564) & v376;
                        v563 = *(_QWORD *)(v375 + 16 * v562);
                        ++v564;
                        if (v563 == v558)
                          goto LABEL_586;
                      }
                      v562 = *(unsigned int *)(v375 - 4);
                    }
LABEL_586:
                    if (v562 != *(_DWORD *)(v375 - 4))
                    {
                      v533 = *(JSC::DFG::Node **)(v375 + 16 * v562 + 8);
                      if (v533)
                      {
                        v1719 = v2172;
                        goto LABEL_1844;
                      }
                    }
                    goto LABEL_418;
                  }
                  v385 = v374;
                  v499 = *(_DWORD *)(v141 + 72);
                  LODWORD(v2263) = 6;
                  HIDWORD(v2263) = v499;
                  v500 = *(_QWORD *)(v141 + 32);
                  v501 = v500 & 0xFF00FFFFFFFFFFFFLL;
                  *(_QWORD *)&v2251 = v500 & 0xFF00FFFFFFFFFFFFLL;
                  *((_QWORD *)&v2251 + 1) = 0;
                  if ((v500 & 0xFF00FFFFFFFFFFFFLL) == 0)
                    goto LABEL_417;
                  v389 = *(unsigned __int16 *)((v500 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v389 > 2)
                    goto LABEL_417;
                  v390 = *(_QWORD *)(v501 + 72);
                  *((_QWORD *)&v2251 + 1) = v390;
                  if (!(_DWORD)v389)
                    goto LABEL_417;
                  if ((_DWORD)v389 != 1)
                  {
LABEL_2530:
                    v389 = 2;
                    v105 = this;
                    v121 = (uint64_t)v2216;
                    v63 = v2194;
                    v118 = v2206;
                  }
                  break;
                case 0xB3:
                  v612 = (JSC::DFG::Node *)(*(_QWORD *)(v141 + 24) & 0xFF00FFFFFFFFFFFFLL);
                  v233 = v613;
                  if (v613 && *((_DWORD *)v613 + 2) == 8)
                  {
                    v517 = 0;
                    v518 = 19;
                    goto LABEL_550;
                  }
LABEL_659:
                  v385 = v233;
                  goto LABEL_418;
                case 0xB4:
                  v534 = (JSC::DFG::Node *)(*(_QWORD *)(v141 + 24) & 0xFF00FFFFFFFFFFFFLL);
                  v1605 = v2172;
                  v542 = v1711;
                  if (!v1711 || *((_DWORD *)v1711 + 2) != 8)
                    goto LABEL_665;
                  v2263 = (WTF *)19;
                  v385 = v1711;
                  JSC::DFG::LazyNode::LazyNode(&v2251, (JSC::DFG::Node *)(*(_QWORD *)(v141 + 32) & 0xFF00FFFFFFFFFFFFLL));
                  goto LABEL_417;
                default:
                  goto LABEL_236;
              }
            }
            else
            {
              switch(*(_WORD *)(v141 + 18))
              {
                case 0x98:
                case 0x99:
                  v298 = *(_QWORD *)(v141 + 32);
                  v299 = v298 & 0xFF00FFFFFFFFFFFFLL;
                  v233 = v300;
                  if (v300 && *((_DWORD *)v300 + 2) == 1)
                  {
                    v517 = *(_DWORD *)(*(_QWORD *)(v141 + 72) + 4);
                    v518 = 11;
                    goto LABEL_550;
                  }
                  v301 = *v2185;
                  if (!*v2185)
                    goto LABEL_239;
                  v409 = v300;
                  v410 = *(_QWORD *)(v141 + 24);
                  v411 = v410 & 0xFF00FFFFFFFFFFFFLL;
                  v412 = *(_DWORD *)(v301 - 8);
                  v413 = ((v410 & 0xFF00FFFFFFFFFFFFLL) + ~(v410 << 32)) ^ (((v410 & 0xFF00FFFFFFFFFFFFLL)
                                                                           + ~(v410 << 32)) >> 22);
                  v414 = 9 * ((v413 + ~(v413 << 13)) ^ ((v413 + ~(v413 << 13)) >> 8));
                  v415 = (v414 ^ (v414 >> 15)) + ~((v414 ^ (v414 >> 15)) << 27);
                  v416 = v412 & ((v415 >> 31) ^ v415);
                  v417 = *(_QWORD *)(v301 + 16 * v416);
                  if (v417 == v411)
                    goto LABEL_494;
                  v418 = 1;
                  while (v417)
                  {
                    v416 = ((_DWORD)v416 + v418) & v412;
                    v417 = *(_QWORD *)(v301 + 16 * v416);
                    ++v418;
                    if (v417 == v411)
                      goto LABEL_494;
                  }
                  v416 = *(unsigned int *)(v301 - 4);
LABEL_494:
                  if (v416 == *(_DWORD *)(v301 - 4))
                    goto LABEL_495;
                  v617 = *(JSC::DFG::Node **)(v301 + 16 * v416 + 8);
                  v233 = v300;
                  if (!v617)
                    goto LABEL_496;
                  v301 = *v2185;
                  if (!*v2185)
                    goto LABEL_509;
                  v298 = *(_QWORD *)(v141 + 32);
                  v299 = v298 & 0xFF00FFFFFFFFFFFFLL;
                  v412 = *(_DWORD *)(v301 - 8);
LABEL_495:
                  v233 = v409;
LABEL_496:
                  v444 = (v299 + ~(v298 << 32)) ^ ((v299 + ~(v298 << 32)) >> 22);
                  v445 = 9 * ((v444 + ~(v444 << 13)) ^ ((v444 + ~(v444 << 13)) >> 8));
                  v446 = (v445 ^ (v445 >> 15)) + ~((v445 ^ (v445 >> 15)) << 27);
                  v447 = v412 & ((v446 >> 31) ^ v446);
                  v448 = *(_QWORD *)(v301 + 16 * v447);
                  if (v448 != v299)
                  {
                    v449 = 1;
                    while (v448)
                    {
                      v447 = ((_DWORD)v447 + v449) & v412;
                      v448 = *(_QWORD *)(v301 + 16 * v447);
                      ++v449;
                      if (v448 == v299)
                        goto LABEL_502;
                    }
                    v447 = *(unsigned int *)(v301 - 4);
                  }
LABEL_502:
                  if (v447 == *(_DWORD *)(v301 - 4))
                    goto LABEL_239;
                  v450 = *(JSC::DFG::Node **)(v301 + 16 * v447 + 8);
                  if (!v450)
                    goto LABEL_239;
LABEL_1807:
                  goto LABEL_509;
                case 0x9A:
                  v609 = *(_QWORD *)(v141 + 24);
                  v610 = v609 & 0xFF00FFFFFFFFFFFFLL;
                  if (!v611 || (v1959 = (uint64_t)v611, *((_DWORD *)v611 + 2) != 1))
                  {
                    v368 = *v2185;
                    if (!*v2185)
                      goto LABEL_421;
                    v1644 = *(_DWORD *)(v368 - 8);
                    v1645 = (v610 + ~(v609 << 32)) ^ ((v610 + ~(v609 << 32)) >> 22);
                    v1646 = 9 * ((v1645 + ~(v1645 << 13)) ^ ((v1645 + ~(v1645 << 13)) >> 8));
                    v1647 = (v1646 ^ (v1646 >> 15)) + ~((v1646 ^ (v1646 >> 15)) << 27);
                    v441 = v1644 & ((v1647 >> 31) ^ v1647);
                    v1648 = *(_QWORD *)(v368 + 16 * v441);
                    if (v1648 != v610)
                    {
                      v1649 = 1;
                      do
                      {
                        if (!v1648)
                          goto LABEL_517;
                        v441 = ((_DWORD)v441 + v1649) & v1644;
                        v1648 = *(_QWORD *)(v368 + 16 * v441);
                        ++v1649;
                      }
                      while (v1648 != v610);
                    }
                    goto LABEL_518;
                  }
                  v1960 = *(unsigned int **)(v141 + 72);
                  *(_QWORD *)&v2250 = 0;
                  v1961 = v1960[5];
                  v1962 = v2172;
                  if (!(_DWORD)v1961)
                    goto LABEL_2312;
                  v1963 = 0;
                  v1964 = (uint64_t *)*((_QWORD *)v1960 + 1);
                  v2145 = (uint64_t *)(v1959 + 24);
                  v1965 = 32 * v1961;
                  do
                  {
                    if (WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::overlaps(v2145, v1964))
                    {
                      v1966 = *((_DWORD *)v1964 + 6);
                      if (v1966 == 1 || v1966 == 3)
                      {
                        v1963 = 1;
                      }
                      else
                      {
                        if (v1966 != 2)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1984DEEF0);
                        }
                        v1968 = *v1964;
                        if ((*v1964 & 1) != 0)
                        {
                          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine((uint64_t *)&v2250, v1964);
                        }
                        else
                        {
                          v1969 = v1968 & 0xFFFFFFFFFFFFFFFCLL;
                          if ((v1968 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                          {
                            if ((v2250 & 1) != 0)
                            {
                              WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)&v2250, v1969);
                            }
                            else if ((v2250 & 0xFFFFFFFFFFFFFFFCLL) != v1969)
                            {
                              if ((v2250 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                              {
                                v2144 = v1968 & 0xFFFFFFFFFFFFFFFCLL;
                                v1971 = WTF::fastMalloc((WTF *)0x28);
                                *(_QWORD *)v1971 = 0x400000002;
                                v1972 = v2250;
                                *(_QWORD *)(v1971 + 8) = v2250 & 0xFFFFFFFFFFFFFFFCLL;
                                *(_QWORD *)(v1971 + 16) = v2144;
                                v1970 = v1972 & 2 | (unint64_t)v1971 | 1;
                              }
                              else
                              {
                                v1970 = v2250 & 2 | v1969;
                              }
                              *(_QWORD *)&v2250 = v1970;
                            }
                          }
                        }
                      }
                    }
                    v1962 = v2172;
                    v1964 += 4;
                    v1965 -= 32;
                  }
                  while (v1965);
                  v105 = this;
                  if ((v1963 & 1) != 0 || (v2250 & 0xFFFFFFFFFFFFFFFDLL) == 0)
                  {
LABEL_2312:
                    if ((v2250 & 1) != 0)
                      WTF::fastFree(v2250 & 0xFFFFFFFFFFFFFFFCLL, v2001, v55, v56, v57, v58, v59, v60);
                    goto LABEL_421;
                  }
                  v2011 = *v1960;
                  if ((WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::isSubsetOf(v2145, (uint64_t *)&v2250) & 1) == 0)
                  if (v2018)
                  {
                    *(_QWORD *)&v2251 = v141;
                    v2263 = v2018;
                    WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v2185, (uint64_t *)&v2251, (uint64_t *)&v2263, v56, v57, v58, v59, v60, (uint64_t)&v2265);
                  }
                  v593 = v2250;
                  if ((v2250 & 1) == 0)
                    goto LABEL_238;
                  goto LABEL_2361;
                case 0x9B:
                  v369 = *(_QWORD *)(v141 + 32);
                  v370 = v369 & 0xFF00FFFFFFFFFFFFLL;
                  v233 = v371;
                  if (!v371 || *((_DWORD *)v371 + 2) != 1)
                  {
                    v419 = *v2185;
                    if (!*v2185)
                      goto LABEL_239;
                    v409 = v371;
                    v420 = *(_QWORD *)(v141 + 24);
                    v421 = v420 & 0xFF00FFFFFFFFFFFFLL;
                    v422 = *(_DWORD *)(v419 - 8);
                    v423 = ((v420 & 0xFF00FFFFFFFFFFFFLL) + ~(v420 << 32)) ^ (((v420 & 0xFF00FFFFFFFFFFFFLL)
                                                                             + ~(v420 << 32)) >> 22);
                    v424 = 9 * ((v423 + ~(v423 << 13)) ^ ((v423 + ~(v423 << 13)) >> 8));
                    v425 = (v424 ^ (v424 >> 15)) + ~((v424 ^ (v424 >> 15)) << 27);
                    v426 = v422 & ((v425 >> 31) ^ v425);
                    v427 = *(_QWORD *)(v419 + 16 * v426);
                    if (v427 != v421)
                    {
                      v428 = 1;
                      while (v427)
                      {
                        v426 = ((_DWORD)v426 + v428) & v422;
                        v427 = *(_QWORD *)(v419 + 16 * v426);
                        ++v428;
                        if (v427 == v421)
                          goto LABEL_613;
                      }
                      v426 = *(unsigned int *)(v419 - 4);
                    }
LABEL_613:
                    if (v426 != *(_DWORD *)(v419 - 4))
                    {
                      v1702 = *(JSC::DFG::Node **)(v419 + 16 * v426 + 8);
                      if (v1702)
                      {
                        v419 = *v2185;
                        if (!*v2185)
                          goto LABEL_509;
                        v369 = *(_QWORD *)(v141 + 32);
                        v370 = v369 & 0xFF00FFFFFFFFFFFFLL;
                        v422 = *(_DWORD *)(v419 - 8);
                      }
                    }
                    v594 = (v370 + ~(v369 << 32)) ^ ((v370 + ~(v369 << 32)) >> 22);
                    v595 = 9 * ((v594 + ~(v594 << 13)) ^ ((v594 + ~(v594 << 13)) >> 8));
                    v596 = (v595 ^ (v595 >> 15)) + ~((v595 ^ (v595 >> 15)) << 27);
                    v597 = v422 & ((v596 >> 31) ^ v596);
                    v598 = *(_QWORD *)(v419 + 16 * v597);
                    if (v598 != v370)
                    {
                      v599 = 1;
                      while (v598)
                      {
                        v597 = ((_DWORD)v597 + v599) & v422;
                        v598 = *(_QWORD *)(v419 + 16 * v597);
                        ++v599;
                        if (v598 == v370)
                          goto LABEL_620;
                      }
                      v597 = *(unsigned int *)(v419 - 4);
                    }
LABEL_620:
                    if (v597 != *(_DWORD *)(v419 - 4))
                    {
                      v1703 = *(JSC::DFG::Node **)(v419 + 16 * v597 + 8);
                      if (v1703)
                      {
                        v419 = *v2185;
                        if (!*v2185)
                          goto LABEL_509;
                        v422 = *(_DWORD *)(v419 - 8);
                      }
                    }
                    v600 = *(_QWORD *)(v141 + 40);
                    v601 = v600 & 0xFF00FFFFFFFFFFFFLL;
                    v602 = ((v600 & 0xFF00FFFFFFFFFFFFLL) + ~(v600 << 32)) ^ (((v600 & 0xFF00FFFFFFFFFFFFLL)
                                                                             + ~(v600 << 32)) >> 22);
                    v603 = 9 * ((v602 + ~(v602 << 13)) ^ ((v602 + ~(v602 << 13)) >> 8));
                    v604 = (v603 ^ (v603 >> 15)) + ~((v603 ^ (v603 >> 15)) << 27);
                    v605 = v422 & ((v604 >> 31) ^ v604);
                    v606 = *(_QWORD *)(v419 + 16 * v605);
                    if (v606 != v601)
                    {
                      v607 = 1;
                      while (v606)
                      {
                        v605 = ((_DWORD)v605 + v607) & v422;
                        v606 = *(_QWORD *)(v419 + 16 * v605);
                        ++v607;
                        if (v606 == v601)
                          goto LABEL_627;
                      }
                      v605 = *(unsigned int *)(v419 - 4);
                    }
LABEL_627:
                    if (v605 == *(_DWORD *)(v419 - 4))
                      goto LABEL_509;
                    v450 = *(JSC::DFG::Node **)(v419 + 16 * v605 + 8);
                    if (!v450)
                      goto LABEL_509;
                    goto LABEL_1807;
                  }
                  v385 = v371;
                  v386 = *(_DWORD *)(*(_QWORD *)(v141 + 72) + 4);
                  LODWORD(v2263) = 11;
                  HIDWORD(v2263) = v386;
                  v387 = *(_QWORD *)(v141 + 40);
                  v388 = v387 & 0xFF00FFFFFFFFFFFFLL;
                  *(_QWORD *)&v2251 = v387 & 0xFF00FFFFFFFFFFFFLL;
                  *((_QWORD *)&v2251 + 1) = 0;
                  if ((v387 & 0xFF00FFFFFFFFFFFFLL) == 0)
                    goto LABEL_417;
                  v389 = *(unsigned __int16 *)((v387 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v389 > 2)
                    goto LABEL_417;
                  v390 = *(_QWORD *)(v388 + 72);
                  *((_QWORD *)&v2251 + 1) = v390;
                  if (!(_DWORD)v389)
                    goto LABEL_417;
                  if ((_DWORD)v389 != 1)
                    goto LABEL_2530;
                  break;
                case 0x9C:
                case 0x9D:
                case 0x9E:
                case 0x9F:
                case 0xA0:
                case 0xA1:
                case 0xA2:
                case 0xA3:
                case 0xA4:
                  goto LABEL_236;
                case 0xA5:
                  v463 = *(_QWORD *)(v141 + 24);
                  v464 = v463 & 0xFF00FFFFFFFFFFFFLL;
                  v233 = v465;
                  if (v465 && (*((_DWORD *)v465 + 2) - 3) < 3)
                  {
                    v517 = 0;
                    v518 = 8;
                    goto LABEL_550;
                  }
                  v466 = *v2185;
                  if (!*v2185)
                    goto LABEL_239;
                  v467 = *(_DWORD *)(v466 - 8);
                  v468 = (v464 + ~(v463 << 32)) ^ ((v464 + ~(v463 << 32)) >> 22);
                  v469 = 9 * ((v468 + ~(v468 << 13)) ^ ((v468 + ~(v468 << 13)) >> 8));
                  v470 = (v469 ^ (v469 >> 15)) + ~((v469 ^ (v469 >> 15)) << 27);
                  v471 = v467 & ((v470 >> 31) ^ v470);
                  v472 = *(_QWORD *)(v466 + 16 * v471);
                  if (v472 != v464)
                  {
                    v473 = 1;
                    do
                    {
                      if (!v472)
                        goto LABEL_564;
                      v471 = ((_DWORD)v471 + v473) & v467;
                      v472 = *(_QWORD *)(v466 + 16 * v471);
                      ++v473;
                    }
                    while (v472 != v464);
                  }
                  goto LABEL_565;
                case 0xA6:
                  v612 = (JSC::DFG::Node *)(*(_QWORD *)(v141 + 24) & 0xFF00FFFFFFFFFFFFLL);
                  v233 = v624;
                  if (!v624 || *((_DWORD *)v624 + 2) != 2)
                    goto LABEL_659;
                  v517 = 0;
                  v518 = 1;
                  goto LABEL_550;
                default:
                  if (v230 == 135)
                  {
                    v451 = *(_QWORD *)(v141 + 24);
                    v452 = v451 & 0xFF00FFFFFFFFFFFFLL;
                    v233 = v453;
                    if (v453 && *((_DWORD *)v453 + 2) == 1)
                    {
                      v2263 = (WTF *)13;
                      v454 = (uint64_t)v453;
                      v455 = JSC::DFG::Graph::freeze(*((_QWORD *)v105 + 4), *(_QWORD *)(*(_QWORD *)(v141 + 72) + 8), v55, v56, v57, v58, v59, v60);
                      *(_QWORD *)&v2251 = 0;
                      *((_QWORD *)&v2251 + 1) = v455;
                      WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v2265, &v2267, &v2263, &v2251);
                      *(_QWORD *)&v2265 = *(_QWORD *)(*(_QWORD *)(v141 + 72) + 8);
                      v409 = (uint64_t *)v454;
                      if ((v2265 & 1) != 0)
                        WTF::fastFree(v2265 & 0xFFFFFFFFFFFFFFFCLL, v462, v55, v56, v57, v58, v59, v60);
                      goto LABEL_509;
                    }
                    v466 = *v2185;
                    if (!*v2185)
                      goto LABEL_239;
                    v1688 = *(_DWORD *)(v466 - 8);
                    v1689 = (v452 + ~(v451 << 32)) ^ ((v452 + ~(v451 << 32)) >> 22);
                    v1690 = 9 * ((v1689 + ~(v1689 << 13)) ^ ((v1689 + ~(v1689 << 13)) >> 8));
                    v1691 = (v1690 ^ (v1690 >> 15)) + ~((v1690 ^ (v1690 >> 15)) << 27);
                    v471 = v1688 & ((v1691 >> 31) ^ v1691);
                    v1692 = *(_QWORD *)(v466 + 16 * v471);
                    if (v1692 != v452)
                    {
                      v1693 = 1;
                      do
                      {
                        if (!v1692)
                          goto LABEL_564;
                        v471 = ((_DWORD)v471 + v1693) & v1688;
                        v1692 = *(_QWORD *)(v466 + 16 * v471);
                        ++v1693;
                      }
                      while (v1692 != v452);
                    }
                  }
                  else
                  {
                    if (v230 != 134)
                      goto LABEL_236;
                    v634 = *(_QWORD *)(v141 + 24);
                    v635 = v634 & 0xFF00FFFFFFFFFFFFLL;
                    v233 = v636;
                    if (v636 && (*((_DWORD *)v636 + 2) - 3) < 3)
                    {
                      v517 = 0;
                      v518 = 9;
                      goto LABEL_550;
                    }
                    v466 = *v2185;
                    if (!*v2185)
                      goto LABEL_239;
                    v1705 = *(_DWORD *)(v466 - 8);
                    v1706 = (v635 + ~(v634 << 32)) ^ ((v635 + ~(v634 << 32)) >> 22);
                    v1707 = 9 * ((v1706 + ~(v1706 << 13)) ^ ((v1706 + ~(v1706 << 13)) >> 8));
                    v1708 = (v1707 ^ (v1707 >> 15)) + ~((v1707 ^ (v1707 >> 15)) << 27);
                    v471 = v1705 & ((v1708 >> 31) ^ v1708);
                    v1709 = *(_QWORD *)(v466 + 16 * v471);
                    if (v1709 == v635)
                      goto LABEL_565;
                    v1710 = 1;
                    do
                    {
                      if (!v1709)
                        goto LABEL_564;
                      v471 = ((_DWORD)v471 + v1710) & v1705;
                      v1709 = *(_QWORD *)(v466 + 16 * v471);
                      ++v1710;
                    }
                    while (v1709 != v635);
                  }
                  goto LABEL_565;
              }
            }
            *((_QWORD *)&v2251 + 1) = v389 | v390;
            goto LABEL_417;
          }
          if (v230 == 20)
            goto LABEL_317;
          if (v230 - 132 < 2)
          {
            v365 = *(_QWORD *)(v141 + 24);
            v366 = v365 & 0xFF00FFFFFFFFFFFFLL;
            if (v367)
            {
              v581 = (uint64_t)v367;
              if (*((_DWORD *)v367 + 2) == 1)
              {
                v582 = v367[3];
                *(_QWORD *)&v2265 = 0;
                if ((v582 & 1) == 0 || v582 == 4)
                  *(_QWORD *)&v2265 = v582 & 0xFFFFFFFFFFFFFFFDLL;
                else
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v2265, v367 + 3);
                v583 = *(uint64_t **)(v141 + 72);
                *(_QWORD *)&v2251 = 0;
                v584 = *v583;
                if ((*v583 & 1) != 0 && v584 != 4)
                {
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v2251, v583);
                  v584 = v2251;
                }
                *(_QWORD *)&v2251 = v584 & 0xFFFFFFFFFFFFFFFDLL;
                JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)&v2265, (const JSC::DFG::StructureAbstractValue *)&v2251, v55, v56, v57, v58, v59, v60);
                if ((v2251 & 1) != 0)
                  WTF::fastFree(v2251 & 0xFFFFFFFFFFFFFFFCLL, v585, v586, v587, v588, v589, v590, v591);
                if ((v2265 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                else
                v593 = v2265;
                if ((v2265 & 1) != 0)
LABEL_2361:
                  WTF::fastFree(v593 & 0xFFFFFFFFFFFFFFFCLL, v592, v55, v56, v57, v58, v59, v60);
                goto LABEL_238;
              }
            }
            v368 = *v2185;
            if (*v2185)
            {
              v437 = *(_DWORD *)(v368 - 8);
              v438 = (v366 + ~(v365 << 32)) ^ ((v366 + ~(v365 << 32)) >> 22);
              v439 = 9 * ((v438 + ~(v438 << 13)) ^ ((v438 + ~(v438 << 13)) >> 8));
              v440 = (v439 ^ (v439 >> 15)) + ~((v439 ^ (v439 >> 15)) << 27);
              v441 = v437 & ((v440 >> 31) ^ v440);
              v442 = *(_QWORD *)(v368 + 16 * v441);
              if (v442 != v366)
              {
                v443 = 1;
                while (v442)
                {
                  v441 = ((_DWORD)v441 + v443) & v437;
                  v442 = *(_QWORD *)(v368 + 16 * v441);
                  ++v443;
                  if (v442 == v366)
                    goto LABEL_518;
                }
LABEL_517:
                v441 = *(unsigned int *)(v368 - 4);
              }
LABEL_518:
              if (v441 != *(_DWORD *)(v368 - 4))
              {
                v474 = *(JSC::DFG::Node **)(v368 + 16 * v441 + 8);
                if (v474)
                  goto LABEL_1813;
                goto LABEL_238;
              }
            }
LABEL_421:
            v233 = 0;
          }
          else
          {
            if (v230 - 24 >= 2)
              goto LABEL_236;
            v391 = *(_QWORD *)(v141 + 24);
            if ((*(_BYTE *)(v141 + 56) & 0x10) != 0)
            {
              v1986 = *(_QWORD *)(v141 + 32);
              if ((int)v1986 + (int)v391 <= v391)
                goto LABEL_238;
              v1987 = *((_QWORD *)v105 + 4);
              v1988 = *(_QWORD *)(v141 + 24);
              do
              {
                if (v1988 >= *(unsigned int *)(v1987 + 164))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DEEF8);
                }
                v1989 = *(_QWORD *)(*(_QWORD *)(v1987 + 152) + 8 * v1988);
                if ((v1989 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v391 = *(_QWORD *)(v141 + 24);
                  v1986 = *(_QWORD *)(v141 + 32);
                }
                v233 = 0;
                ++v1988;
              }
              while (v1988 < (v391 + v1986));
            }
            else
            {
              v392 = v391 & 0xFF00FFFFFFFFFFFFLL;
              if ((v391 & 0xFF00FFFFFFFFFFFFLL) == 0)
                goto LABEL_238;
              if ((v391 & 0x1000000000000) != 0)
                goto LABEL_451;
              v393 = (v391 >> 50) & 0x3F;
              if (!(_DWORD)v393)
                goto LABEL_451;
              if (v393 > 0x34)
                goto LABEL_2609;
              if (((1 << v393) & 0x12798001880F84) != 0)
                goto LABEL_451;
              if (((1 << v393) & 0xD867FFE77F07ALL) == 0)
                goto LABEL_2609;
              v1660 = *v2185;
              if (*v2185)
              {
                v1661 = *(_DWORD *)(v1660 - 8);
                v1662 = (v392 + ~(v391 << 32)) ^ ((v392 + ~(v391 << 32)) >> 22);
                v1663 = 9 * ((v1662 + ~(v1662 << 13)) ^ ((v1662 + ~(v1662 << 13)) >> 8));
                v1664 = (v1663 ^ (v1663 >> 15)) + ~((v1663 ^ (v1663 >> 15)) << 27);
                v1665 = v1661 & ((v1664 >> 31) ^ v1664);
                v1666 = *(_QWORD *)(v1660 + 16 * v1665);
                if (v1666 != v392)
                {
                  v1667 = 1;
                  while (v1666)
                  {
                    v1665 = ((_DWORD)v1665 + v1667) & v1661;
                    v1666 = *(_QWORD *)(v1660 + 16 * v1665);
                    ++v1667;
                    if (v1666 == v392)
                      goto LABEL_2071;
                  }
                  v1665 = *(unsigned int *)(v1660 - 4);
                }
LABEL_2071:
                if (v1665 != *(_DWORD *)(v1660 - 4))
                {
                  v1880 = *(JSC::DFG::Node **)(v1660 + 16 * v1665 + 8);
                  if (v1880)
                }
              }
LABEL_451:
              v394 = *(_QWORD *)(v141 + 32);
              v395 = v394 & 0xFF00FFFFFFFFFFFFLL;
              if ((v394 & 0xFF00FFFFFFFFFFFFLL) == 0)
                goto LABEL_238;
              if ((v394 & 0x1000000000000) != 0)
                goto LABEL_454;
              v396 = (v394 >> 50) & 0x3F;
              if (!(_DWORD)v396)
                goto LABEL_454;
              if (v396 > 0x34)
                goto LABEL_2609;
              if (((1 << v396) & 0x12798001880F84) != 0)
                goto LABEL_454;
              if (((1 << v396) & 0xD867FFE77F07ALL) == 0)
                goto LABEL_2609;
              v1728 = *v2185;
              if (*v2185)
              {
                v1729 = *(_DWORD *)(v1728 - 8);
                v1730 = (v395 + ~(v394 << 32)) ^ ((v395 + ~(v394 << 32)) >> 22);
                v1731 = 9 * ((v1730 + ~(v1730 << 13)) ^ ((v1730 + ~(v1730 << 13)) >> 8));
                v1732 = (v1731 ^ (v1731 >> 15)) + ~((v1731 ^ (v1731 >> 15)) << 27);
                v1733 = v1729 & ((v1732 >> 31) ^ v1732);
                v1734 = *(_QWORD *)(v1728 + 16 * v1733);
                if (v1734 != v395)
                {
                  v1735 = 1;
                  while (v1734)
                  {
                    v1733 = ((_DWORD)v1733 + v1735) & v1729;
                    v1734 = *(_QWORD *)(v1728 + 16 * v1733);
                    ++v1735;
                    if (v1734 == v395)
                      goto LABEL_2101;
                  }
                  v1733 = *(unsigned int *)(v1728 - 4);
                }
LABEL_2101:
                if (v1733 != *(_DWORD *)(v1728 - 4))
                {
                  v1911 = *(JSC::DFG::Node **)(v1728 + 16 * v1733 + 8);
                  if (v1911)
                }
              }
LABEL_454:
              v233 = 0;
              v397 = *(_QWORD *)(v141 + 40);
              v398 = v397 & 0xFF00FFFFFFFFFFFFLL;
              if ((v397 & 0xFF00FFFFFFFFFFFFLL) == 0)
                goto LABEL_239;
              if ((v397 & 0x1000000000000) != 0)
                goto LABEL_239;
              v233 = 0;
              v399 = (v397 >> 50) & 0x3F;
              if (!(_DWORD)v399)
                goto LABEL_239;
              if (v399 > 0x34)
                goto LABEL_2609;
              if (((1 << v399) & 0x12798001880F84) != 0)
                goto LABEL_239;
              if (((1 << v399) & 0xD867FFE77F07ALL) == 0)
              {
LABEL_2609:
                __break(0xC471u);
                JUMPOUT(0x1984DEED0);
              }
              v1807 = *v2185;
              if (*v2185)
              {
                v1808 = *(_DWORD *)(v1807 - 8);
                v1809 = (v398 + ~(v397 << 32)) ^ ((v398 + ~(v397 << 32)) >> 22);
                v1810 = 9 * ((v1809 + ~(v1809 << 13)) ^ ((v1809 + ~(v1809 << 13)) >> 8));
                v1811 = (v1810 ^ (v1810 >> 15)) + ~((v1810 ^ (v1810 >> 15)) << 27);
                v1812 = v1808 & ((v1811 >> 31) ^ v1811);
                v1813 = *(_QWORD *)(v1807 + 16 * v1812);
                if (v1813 != v398)
                {
                  v1814 = 1;
                  while (v1813)
                  {
                    v1812 = ((_DWORD)v1812 + v1814) & v1808;
                    v1813 = *(_QWORD *)(v1807 + 16 * v1812);
                    ++v1814;
                    if (v1813 == v398)
                      goto LABEL_2198;
                  }
                  v1812 = *(unsigned int *)(v1807 - 4);
                }
LABEL_2198:
                if (v1812 != *(_DWORD *)(v1807 - 4))
                {
                  v1704 = v1807 + 16 * v1812;
LABEL_1812:
                  v474 = *(JSC::DFG::Node **)(v1704 + 8);
                  if (v474)
LABEL_1813:
                }
              }
LABEL_238:
              v233 = 0;
            }
          }
LABEL_239:
          v234 = v2267;
          if (!v2267)
            goto LABEL_317;
          if (!*(_DWORD *)(v2267 - 12))
          {
            v121 = (uint64_t)v2216;
LABEL_312:
            v295 = v234 - 16;
            v296 = *(_QWORD *)(v118 + 752);
            if (!v296)
            {
              pas_try_deallocate_slow_no_cache(v234 - 16, (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_317;
            }
            if (!(v295 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                   + (((unint64_t)(v234 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v234 - 16) >> 24)) & 1) != 0)
            {
              goto LABEL_315;
            }
            if (v295 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v295 >> 24)
            {
              v56 = 0;
            }
            else
            {
              v56 = (*(_DWORD *)((char *)off_1ECF425F8
                               + (((((unint64_t)(v234 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((((v234 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v56 == 1)
              {
LABEL_315:
                v297 = *(unsigned int *)(v296 + 8000);
                if (v297 >= 0x3E7)
                {
                  pas_thread_local_cache_append_deallocation_slow(v296, v295, (os_unfair_lock_s *)5, v56, v57, v58, v59, v60);
                }
                else
                {
                  *(_QWORD *)(v296 + 8 * v297) = v295 | 0x5000000000000;
                  *(_DWORD *)(v296 + 8000) = v297 + 1;
                }
                goto LABEL_317;
              }
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v296, v295, 1, v56, v57, v58, v59, v60);
            goto LABEL_317;
          }
          v235 = *(unsigned int *)(v2267 - 4);
          v236 = (unint64_t *)v2267;
          if (!(_DWORD)v235)
            goto LABEL_252;
          v237 = 0;
          while (2)
          {
            if (*(_DWORD *)(v2267 + v237))
            {
              v236 = (unint64_t *)(v2267 + v237);
LABEL_252:
              v238 = (unint64_t *)(v2267 + 24 * v235);
              if (v236 == v238)
                break;
              v239 = v233 + 2;
              while (2)
              {
                v240 = *v236;
                v241 = (JSC::DFG::BasicBlock *)v236[1];
                v242 = v236[2];
                if (!v241)
                {
                  v243 = HIDWORD(v240);
                  v244 = *v239;
                  if (!*v239)
                    goto LABEL_256;
                  v331 = v233;
                  v352 = *(_DWORD *)(v244 - 8);
                  v353 = v352 & (HIDWORD(v240) + v240);
                  v354 = v244 + 16 * v353;
                  v355 = *(_DWORD *)v354;
                  v356 = *(_DWORD *)(v354 + 4);
                  if (*(_DWORD *)v354 != (_DWORD)v240 || v356 != HIDWORD(v240))
                  {
                    v358 = 1;
                    while (v355 | v356)
                    {
                      v353 = (v353 + v358) & v352;
                      v354 = v244 + 16 * v353;
                      v355 = *(_DWORD *)v354;
                      v356 = *(_DWORD *)(v354 + 4);
                      ++v358;
                      if (*(_DWORD *)v354 == (_DWORD)v240 && v356 == HIDWORD(v240))
                        goto LABEL_403;
                    }
                    goto LABEL_402;
                  }
                  goto LABEL_403;
                }
                v266 = *v2185;
                v243 = HIDWORD(v240);
                if (!*v2185)
                  goto LABEL_274;
                v321 = *(_DWORD *)(v266 - 8);
                v322 = ((unint64_t)v241 + ~((_QWORD)v241 << 32)) ^ (((unint64_t)v241
                                                                          + ~((_QWORD)v241 << 32)) >> 22);
                v323 = 9 * ((v322 + ~(v322 << 13)) ^ ((v322 + ~(v322 << 13)) >> 8));
                v324 = (v323 ^ (v323 >> 15)) + ~((v323 ^ (v323 >> 15)) << 27);
                v325 = v321 & ((v324 >> 31) ^ v324);
                v326 = *(JSC::DFG::BasicBlock **)(v266 + 16 * v325);
                if (v326 != v241)
                {
                  v327 = 1;
                  while (v326)
                  {
                    v325 = ((_DWORD)v325 + v327) & v321;
                    v326 = *(JSC::DFG::BasicBlock **)(v266 + 16 * v325);
                    ++v327;
                    if (v326 == v241)
                      goto LABEL_361;
                  }
                  v325 = *(unsigned int *)(v266 - 4);
                }
LABEL_361:
                if (v325 == *(_DWORD *)(v266 - 4))
                {
LABEL_274:
                  *(_QWORD *)&v2251 = *v236;
                  v2263 = 0;
                }
                else
                {
                  v330 = *(WTF **)(v266 + 16 * v325 + 8);
                  *(_QWORD *)&v2251 = *v236;
                  v2263 = v330;
                  if (v330)
                  {
                    v331 = v233;
                    WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedLocationDescriptor const&,JSC::DFG::Node *&>((uint64_t)&v2265, v239, &v2251, &v2263);
                    goto LABEL_405;
                  }
                }
                v244 = *v239;
                if (*v239)
                {
                  v331 = v233;
                  v359 = *(_DWORD *)(v244 - 8);
                  v360 = v359 & (HIDWORD(v240) + v240);
                  v354 = v244 + 16 * v360;
                  v361 = *(_DWORD *)v354;
                  v362 = *(_DWORD *)(v354 + 4);
                  if (*(_DWORD *)v354 != (_DWORD)v240 || v362 != HIDWORD(v240))
                  {
                    v364 = 1;
                    while (v361 | v362)
                    {
                      v360 = (v360 + v364) & v359;
                      v354 = v244 + 16 * v360;
                      v361 = *(_DWORD *)v354;
                      v362 = *(_DWORD *)(v354 + 4);
                      ++v364;
                      if (*(_DWORD *)v354 == (_DWORD)v240 && v362 == HIDWORD(v240))
                        goto LABEL_403;
                    }
LABEL_402:
                    v354 = v244 + 16 * *(unsigned int *)(v244 - 4);
                  }
LABEL_403:
                  if (v244 + 16 * *(unsigned int *)(v244 - 4) != v354)
                    WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::remove(v239, (_QWORD *)v354);
LABEL_405:
                  v233 = v331;
                }
LABEL_256:
                v245 = v233;
                v246 = *v233;
                *(_QWORD *)&v2251 = v241;
                *((_QWORD *)&v2251 + 1) = v242;
                if (!v2262)
                  goto LABEL_302;
                v247 = 0;
                v248 = (~(v246 << 32) + v246) ^ ((unint64_t)(~(v246 << 32) + v246) >> 22);
                v249 = 9 * ((v248 + ~(v248 << 13)) ^ ((v248 + ~(v248 << 13)) >> 8));
                v250 = (v249 ^ (v249 >> 15)) + ~((v249 ^ (v249 >> 15)) << 27);
                v251 = v240 + v243 + ((v250 >> 31) ^ v250);
                for (k = v251; ; k = v247 + v253)
                {
                  v253 = k & *((_DWORD *)v2262 - 2);
                  v254 = *((_QWORD *)v2262 + 2 * v253);
                  if (v254 == v246)
                  {
                    v255 = (char *)v2262 + 16 * v253;
                    v257 = *((_DWORD *)v255 + 2);
                    v256 = *((_DWORD *)v255 + 3);
                    if (v257 == (_DWORD)v240 && v256 == (_DWORD)v243)
                      break;
                  }
                  if (!v254 && !*((_QWORD *)v2262 + 2 * v253 + 1))
                    goto LABEL_302;
                  ++v247;
                }
                if (v241)
                {
                  v2268[0] = v241;
                  v267 = this;
                }
                else
                {
                  if (!v2257)
                    goto LABEL_280;
                  v259 = *(_DWORD *)(v2257 - 8);
                  v260 = (v242 & 0xFFFFFFFFFFFFFFFCLL) + ~((v242 & 0xFFFFFFFFFFFFFFFCLL) << 32);
                  v261 = (v260 ^ (v260 >> 22)) + ~((v260 ^ (v260 >> 22)) << 13);
                  v262 = (9 * (v261 ^ (v261 >> 8))) ^ ((9 * (v261 ^ (v261 >> 8))) >> 15);
                  v263 = v259 & (((v262 + ~(v262 << 27)) >> 31) ^ ((_DWORD)v262 + ~((_DWORD)v262 << 27)));
                  v264 = *(_QWORD *)(v2257 + 16 * v263);
                  if (v264 != (v242 & 0xFFFFFFFFFFFFFFFCLL))
                  {
                    v265 = 1;
                    while (v264)
                    {
                      v263 = ((_DWORD)v263 + v265) & v259;
                      v264 = *(_QWORD *)(v2257 + 16 * v263);
                      ++v265;
                      if (v264 == (v242 & 0xFFFFFFFFFFFFFFFCLL))
                        goto LABEL_279;
                    }
                    v263 = *(unsigned int *)(v2257 - 4);
                  }
LABEL_279:
                  if (v263 != *(_DWORD *)(v2257 - 4))
                  {
                    v2268[0] = *(JSC::DFG::BasicBlock **)(v2257 + 16 * v263 + 8);
                    v267 = this;
                  }
                  else
                  {
LABEL_280:
                    v267 = this;
                    v268 = *((_QWORD *)this + 4);
                    if (!*(_DWORD *)(v268 + 60))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984DED18);
                    }
                    v2268[0] = (JSC::DFG::BasicBlock *)JSC::DFG::LazyNode::ensureIsNode((uint64_t *)&v2251, v2165, **(_QWORD **)(v268 + 48), 0, v57, v58, v59, v60);
                    v2263 = (WTF *)(*((_QWORD *)&v2251 + 1) & 0xFFFFFFFFFFFFFFFCLL);
                    WTF::HashMap<JSC::DFG::FrozenValue *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::FrozenValue *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(&v2257, (uint64_t *)&v2263, (uint64_t *)v2268, v269, v270, v271, v272, v273, (uint64_t)&v2265);
                  }
                }
                v274 = *v2179;
                if (*v2179)
                {
                  v275 = 0;
                  v276 = *(_DWORD *)(v274 - 8);
                  while (1)
                  {
                    v277 = v251 & v276;
                    v278 = v274 + 24 * (v251 & v276);
                    if (*(_QWORD *)v278 == v246
                      && *(_DWORD *)(v278 + 8) == (_DWORD)v240
                      && *(_DWORD *)(v278 + 12) == (_DWORD)v243)
                    {
                      break;
                    }
                    if (!*(_QWORD *)v278 && !*(_QWORD *)(v278 + 8))
                      goto LABEL_2021;
                    v251 = ++v275 + v277;
                  }
                  v280 = *(WTF **)(v274 + 24 * v277 + 16);
                }
                else
                {
LABEL_2021:
                  v280 = 0;
                }
                v281 = v2268[0];
                v2263 = v280;
                *(_QWORD *)&v2250 = v2216;
                v282 = *(_QWORD *)(v2206 + 752);
                if (v282)
                {
                  v283 = (_BYTE *)(v282 + 8488);
                  *(_BYTE *)(v282 + 8488) = 1;
                  v284 = *(unsigned int *)(v282 + 8504);
                  if ((_DWORD)v284)
                  {
                    *(_DWORD *)(v282 + 8504) = v284 - *(_DWORD *)(v282 + 8508);
                    v285 = (WTF **)(*(_QWORD *)(v282 + 8496) - v284);
                    goto LABEL_296;
                  }
                  v292 = *(_QWORD *)(v282 + 8528);
                  v293 = *(_QWORD *)(v282 + 8512);
                  if (v292)
                  {
LABEL_309:
                    v294 = __clz(v292);
                    *(_QWORD *)(v282 + 8528) = v292 & ~(0x8000000000000000 >> v294);
                    v285 = (WTF **)(v293 + 16 * v294);
LABEL_296:
                    *v283 = 0;
LABEL_297:
                    *v285 = v280;
                    v285[1] = v2216;
                    v285[2] = v281;
                    v285[3] = 0;
                    v285[3] = (WTF *)*((_QWORD *)v267 + 12);
                    *((_QWORD *)v267 + 12) = v285;
                    v2243[0] = (JSC::DFG::Node *)v285;
                    v286 = *((_DWORD *)v2216 + 2);
                    if (*((_DWORD *)v267 + 31) <= v286)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984DED20);
                    }
                    WTF::HashMap<JSC::DFG::SSACalculator::Variable *,JSC::DFG::SSACalculator::Def *,WTF::DefaultHash<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Def *>,WTF::HashTableTraits>::add<JSC::DFG::SSACalculator::Def *&>((uint64_t *)(*((_QWORD *)v267 + 14) + 24 * v286), (uint64_t *)&v2263, (uint64_t *)v2243, v56, v57, v58, v59, v60, (uint64_t)&v2265);
                    if (LOBYTE(v2266[0]))
                    {
                      v287 = v2263;
                      v288 = *((unsigned int *)v2263 + 3);
                      if ((_DWORD)v288 == *((_DWORD *)v2263 + 2))
                      {
                        v332 = (WTF **)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2263, v288 + 1, (unint64_t)&v2250);
                        v288 = *((unsigned int *)v287 + 3);
                        v289 = v288 + 1;
                        v290 = *(_QWORD *)v287;
                        v291 = *v332;
                      }
                      else
                      {
                        v289 = v288 + 1;
                        v290 = *(_QWORD *)v2263;
                        v291 = v2216;
                      }
                      *(_QWORD *)(v290 + 8 * v288) = v291;
                      *((_DWORD *)v287 + 3) = v289;
                    }
                    else
                    {
                      *(JSC::DFG::Node **)(v2265 + 8) = v2243[0];
                    }
LABEL_302:
                    v236 += 3;
                    v105 = this;
                    v63 = v2194;
                    v233 = v245;
                    v118 = v2206;
                    if (v236 == v238)
                      goto LABEL_310;
                    while (!*(_DWORD *)v236)
                    {
                      v236 += 3;
                      if (v236 == v238)
                        goto LABEL_310;
                    }
                    if (v236 == v238)
                    {
LABEL_310:
                      v234 = v2267;
                      goto LABEL_311;
                    }
                    continue;
                  }
                  if (*(_BYTE *)(v282 + 8493) == 6)
                  {
                    v1845 = *(_DWORD *)(v282 + 8524);
                    v1846 = *(unsigned int *)(v282 + 8520);
                    if (v1846 < v1845)
                    {
                      *(_QWORD *)&v283[8 * v1846 + 56] = 0;
                      v1847 = (unint64_t *)(v282 + 8 * v1846 + 8552);
                      v1848 = v1845 - 1 - v1846;
                      while (v1848)
                      {
                        v293 += 1024;
                        v1850 = *v1847++;
                        v1849 = v1850;
                        LODWORD(v1846) = v1846 + 1;
                        --v1848;
                        if (v1850)
                        {
                          v292 = __rbit64(v1849);
                          *(_DWORD *)(v282 + 8520) = v1846;
                          *(_QWORD *)(v282 + 8512) = v293;
                          goto LABEL_309;
                        }
                      }
                      *(_DWORD *)(v282 + 8520) = v1845;
                    }
                  }
                  *v283 = 0;
                }
                break;
              }
              v285 = (WTF **)bmalloc_allocate_casual(32, 1);
              goto LABEL_297;
            }
            v237 += 24;
            if (24 * v235 != v237)
              continue;
            break;
          }
LABEL_311:
          v121 = (uint64_t)v2216;
          if (v234)
            goto LABEL_312;
LABEL_317:
          v140 = (JSC::DFG::_anonymous_namespace_::LocalHeap *)((char *)v2212 + 1);
        }
        while ((unint64_t)v2212 + 1 < *(unsigned int *)(v121 + 220));
LABEL_433:
        v120 = (v2167 + 1);
        v114 = v2157;
        v119 = *(unsigned int *)(v2157 + 60);
        if (v119 <= v120)
        {
          v383 = v2156;
        }
        else
        {
          v383 = v2156;
          while (!*(_QWORD *)(*(_QWORD *)(v2157 + 48) + 8 * v120))
          {
            if (v119 == ++v120)
            {
              LODWORD(v120) = *(_DWORD *)(v2157 + 60);
              break;
            }
          }
        }
        if (v383 == (_DWORD)v120)
        {
          v643 = *((_QWORD *)v105 + 4);
          if (*(_DWORD *)(v643 + 60))
          {
            v117 = *(JSC::DFG::BasicBlock ***)(v643 + 48);
            goto LABEL_679;
          }
LABEL_2642:
          __break(0xC471u);
          JUMPOUT(0x1984DF0F0);
        }
      }
    }
    ++v116;
  }
  while (v115 != v116);
LABEL_679:
  v2153 = (JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)v105 + 240);
  JSC::DFG::InsertionSet::execute((JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *)((char *)v105 + 240), *v117);
  v651 = (JSC::DFG *)*((_QWORD *)v105 + 16);
  if (!*((_QWORD *)v651 + 98))
  {
    JSC::DFG::Graph::logAssertionFailure(v651, 0, (const WTF::CString *)"./dfg/DFGSSACalculator.h", (const char *)0xB2, "void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1901:13)]", "m_graph.m_ssaDominators");
    __break(0xC471u);
    JUMPOUT(0x1984DDCF0);
  }
  v652 = *(_QWORD *)v2154;
  if (*(_QWORD *)v2154)
  {
    v653 = 0;
    v2180 = *(_QWORD *)v2154;
    while (1)
    {
      if (v653 >> 3 >= *((unsigned int *)v105 + 23))
      {
        __break(0xC471u);
        JUMPOUT(0x1984DED70);
      }
      v654 = *(_QWORD *)(*((_QWORD *)v105 + 10) + 8 * (v653 >> 3)) + 24 * (v653 & 7);
      v655 = *(_QWORD *)(*((_QWORD *)v105 + 16) + 784);
      v2267 = 0x8000000000000000;
      v2217 = v654;
      v656 = *(unsigned int *)(v654 + 12);
      v2264 = 0;
      if ((_DWORD)v656)
        break;
LABEL_762:
      if ((v2267 & 0x8000000000000000) == 0)
        WTF::fastFree(2 * v2267, v644, v645, v646, v647, v648, v649, v650);
      if (++v653 == v652)
        goto LABEL_785;
    }
    v2186 = v653;
    if (v656 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1984DEF00);
    }
    v657 = (WTF *)WTF::fastMalloc((WTF *)(8 * v656));
    LODWORD(v2264) = v656;
    v2263 = v657;
    memcpy(v657, *(const void **)v2217, 8 * *(unsigned int *)(v2217 + 12));
    v2207 = HIDWORD(v2259);
LABEL_686:
    v658 = *((_QWORD *)v2263 + v656 - 1);
    HIDWORD(v2264) = v656 - 1;
    *(_QWORD *)&v2265 = v2266;
    DWORD2(v2265) = 16;
    v2266[0] = v658;
    LODWORD(v659) = 1;
    v2195 = v2258;
LABEL_687:
    v660 = *(_QWORD *)(v2265 + 8 * v659 - 8);
    HIDWORD(v2265) = v659 - 1;
    v661 = *(unsigned int *)(v660 + 220);
    if ((_DWORD)v661)
    {
      v662 = 8 * v661;
      while (1)
      {
        v663 = *(_QWORD *)(*(_QWORD *)(v660 + 208) - 8 + v662);
        v664 = *(unsigned __int16 *)(v663 + 18);
        if ((v664 - 364) < 0xC)
          break;
        if ((v664 - 28) < 2 || (v664 - 23) <= 2)
        {
          v662 -= 8;
          if (v662)
            continue;
        }
        goto LABEL_766;
      }
    }
    else
    {
LABEL_766:
      v663 = 0;
    }
    v665 = 1;
    switch(*(_WORD *)(v663 + 18))
    {
      case 0x16C:
        goto LABEL_695;
      case 0x16D:
        v665 = 2;
        goto LABEL_695;
      case 0x16E:
        v665 = *(_DWORD *)(*(_QWORD *)(v663 + 72) + 12) + 1;
        goto LABEL_731;
      case 0x16F:
        v665 = *(_DWORD *)(*(_QWORD *)(v663 + 72) + 12);
LABEL_731:
        if (!v665)
          goto LABEL_732;
LABEL_695:
        v666 = 0;
        v667 = 0;
        v668 = (uint64_t *)(v663 + 72);
        break;
      default:
        goto LABEL_732;
    }
    while (1)
    {
      v669 = *(unsigned __int16 *)(v663 + 18);
      if (v669 == 366)
      {
        v679 = (_QWORD *)*v668;
        v680 = *(_DWORD *)(*v668 + 12);
        if (v680 <= v666)
        {
          if (v680 != v666)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DD394);
          }
          v670 = (uint64_t)(v679 + 2);
          goto LABEL_704;
        }
        v671 = *v679 + 32 * v667;
      }
      else
      {
        if (v669 == 367)
        {
          if (*(_DWORD *)(*v668 + 12) <= v666)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DEC58);
          }
          v670 = *(_QWORD *)*v668 + 8 * v667;
          goto LABEL_704;
        }
        if (!v666)
        {
          v670 = v663 + 72;
          if (v669 != 364)
            v670 = *v668;
          goto LABEL_704;
        }
        if (v666 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1984DE6A0);
        }
        v671 = *v668;
      }
      v670 = v671 + 16;
LABEL_704:
      v672 = *(_QWORD *)v670;
      v673 = *(unsigned int *)(*(_QWORD *)v670 + 8);
      v674 = *(_DWORD *)(v655 + 20);
      if (v674 <= v673)
      {
        __break(0xC471u);
        JUMPOUT(0x1984DEB24);
      }
      v675 = *(unsigned int *)(v658 + 8);
      if (v674 <= v675)
      {
        __break(0xC471u);
        JUMPOUT(0x1984DEB2CLL);
      }
      v676 = *(_QWORD *)(v655 + 8);
      v677 = v676 + 32 * v673;
      v678 = v676 + 32 * v675;
      if (*(_DWORD *)(v677 + 24) <= *(_DWORD *)(v678 + 24) || *(_DWORD *)(v677 + 28) >= *(_DWORD *)(v678 + 28))
      {
        v2268[0] = (JSC::DFG::BasicBlock *)v672;
        v729 = v2267;
        if (v2267 < 0)
          v686 = 63;
        else
          v686 = *(_QWORD *)(2 * v2267);
        if (v686 <= v673)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v2267, v673 + 1, 0);
          v729 = v2267;
        }
        v681 = 2 * v729 + 8;
        v682 = v729 < 0;
        v683 = &v2267;
        if (!v682)
          v683 = (uint64_t *)v681;
        v684 = (v673 >> 3) & 0x1FFFFFF8;
        v685 = *(uint64_t *)((char *)v683 + v684);
        *(uint64_t *)((char *)v683 + v684) = v685 | (1 << v673);
        if ((v685 & (1 << v673)) == 0)
        {
          v687 = *(unsigned int *)(v2217 + 16);
          if (v2207 <= v687)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DEC38);
          }
          v688 = *(_DWORD *)(v672 + 8);
          if (*((_DWORD *)this + 121) <= v688)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DEC40);
          }
          v689 = *(JSC::DFG::_anonymous_namespace_::LocalHeap **)(*((_QWORD *)this + 59) + 40 * v688 + 16);
          if (v689)
          {
            v696 = (uint64_t *)((char *)v2195 + 16 * v687);
            v697 = *v696;
            v2173 = (JSC::DFG::_anonymous_namespace_::LocalHeap *)v696[1];
            v698 = *((_DWORD *)v689 - 2);
            v699 = (~(v697 << 32) + v697) ^ ((unint64_t)(~(v697 << 32) + v697) >> 22);
            v700 = 9 * ((v699 + ~(v699 << 13)) ^ ((v699 + ~(v699 << 13)) >> 8));
            v701 = (v700 ^ (v700 >> 15)) + ~((v700 ^ (v700 >> 15)) << 27);
            v702 = v698 & ((v701 >> 31) ^ v701);
            v703 = *((_QWORD *)v689 + 6 * v702);
            if (v703 == v697)
            {
LABEL_745:
                   + 2)
              {
                if (!*(_DWORD *)(v672 + 220))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DEC48);
                }
                v704 = *((_QWORD *)this + 4);
                v705 = **(_QWORD **)(v672 + 208);
                v706 = *(_QWORD *)v705;
                if ((*(_QWORD *)v705 & 1) != 0)
                {
                  v1932 = *(_QWORD *)(v706 & 0xFFFFFFFF8);
                  if ((v706 & 2) != 0
                    || ((v1933 = *(unsigned int *)((v706 & 0xFFFFFFFF8) + 8), (_DWORD)v1933 != 0x3FFFFFFF)
                      ? (v1934 = (_DWORD)v1933 == -1)
                      : (v1934 = 1),
                        v1934))
                  {
                    v1935 = 2;
                  }
                  else if (v1933 >> 28)
                  {
                    v2170 = *(_DWORD *)((v706 & 0xFFFFFFFF8) + 8);
                    v2177 = *(JSC::DFG::_anonymous_namespace_::LocalHeap **)(v706 & 0xFFFFFFFF8);
                    v1932 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1932 = v2177;
                    *(_DWORD *)(v1932 + 8) = v2170;
                    v1935 = 1;
                  }
                  else
                  {
                    v1935 = *(_QWORD *)(v706 & 0xFFFFFFFF8);
                    v1932 = v1933 << 36;
                  }
                  v706 = v1932 | v1935;
                }
                *(_QWORD *)&v2251 = v706;
                v707 = *(_QWORD *)(v705 + 8);
                if ((v707 & 1) != 0)
                {
                  v1936 = *(_QWORD *)(v707 & 0xFFFFFFFF8);
                  if ((v707 & 2) != 0
                    || ((v1937 = *(unsigned int *)((v707 & 0xFFFFFFFF8) + 8), (_DWORD)v1937 != 0x3FFFFFFF)
                      ? (v1938 = (_DWORD)v1937 == -1)
                      : (v1938 = 1),
                        v1938))
                  {
                    v1939 = 2;
                  }
                  else if (v1937 >> 28)
                  {
                    v2171 = *(_DWORD *)((v707 & 0xFFFFFFFF8) + 8);
                    v2178 = *(JSC::DFG::_anonymous_namespace_::LocalHeap **)(v707 & 0xFFFFFFFF8);
                    v1936 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1936 = v2178;
                    *(_DWORD *)(v1936 + 8) = v2171;
                    v1939 = 1;
                  }
                  else
                  {
                    v1939 = *(_QWORD *)(v707 & 0xFFFFFFFF8);
                    v1936 = v1937 << 36;
                  }
                  v707 = v1936 | v1939;
                }
                *((_QWORD *)&v2251 + 1) = v707;
                BYTE1(v2252) = HIBYTE(*(_WORD *)(v705 + 16));
                LOBYTE(v2252) = 0;
                v715 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>(v704, 0x3B73FFFFFFF7, 27, (uint64_t)&v2251, v647, v648, v649, v650);
                if ((BYTE8(v2251) & 1) != 0 && (*((_QWORD *)&v2251 + 1) & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*((_QWORD *)&v2251 + 1) & 0xFFFFFFFF8, v708, v709, v710, v711, v712, v713, v714);
                if ((v2251 & 1) != 0 && (v2251 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v2251 & 0xFFFFFFFF8, v708, v709, v710, v711, v712, v713, v714);
                v716 = *(_DWORD *)(v715 + 56);
                if ((v716 | 1) != v716)
                  *(_DWORD *)(v715 + 56) = v716 | 1;
                v717 = *(_DWORD *)(v672 + 8);
                if (*((_DWORD *)this + 31) <= v717)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DEC50);
                }
                v2174 = (JSC::DFG::_anonymous_namespace_::LocalHeap *)(*((_QWORD *)this + 14) + 24 * v717);
                v718 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                *v718 = v2217;
                v718[1] = v672;
                v718[2] = v715;
                v718[3] = 0;
                v718[3] = *((_QWORD *)this + 13);
                *((_QWORD *)this + 13) = v718;
                *(_QWORD *)&v2250 = v718;
                v724 = (_QWORD *)((char *)v2174 + 8);
                v725 = *((unsigned int *)v2174 + 5);
                if ((_DWORD)v725 == *((_DWORD *)v2174 + 4))
                {
                  v726 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2174 + 8, v725 + 1, (unint64_t)&v2250);
                  v725 = *((unsigned int *)v2174 + 5);
                  *(_QWORD *)(*v724 + 8 * v725) = *v726;
                }
                else
                {
                  *(_QWORD *)(*v724 + 8 * v725) = v718;
                }
                *((_DWORD *)v2174 + 5) = v725 + 1;
                v2243[0] = (JSC::DFG::Node *)v2217;
                WTF::HashMap<JSC::DFG::SSACalculator::Variable *,JSC::DFG::SSACalculator::Def *,WTF::DefaultHash<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Def *>,WTF::HashTableTraits>::add<JSC::DFG::SSACalculator::Def *&>((uint64_t *)v2174, (uint64_t *)v2243, (uint64_t *)&v2250, v719, v720, v721, v722, v723, (uint64_t)&v2251);
                if (HIDWORD(v2264) == (_DWORD)v2264)
                {
                  v730 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2263, HIDWORD(v2264) + 1, (unint64_t)v2268);
                  v727 = HIDWORD(v2264) + 1;
                  *((_QWORD *)v2263 + HIDWORD(v2264)) = *v730;
                }
                else
                {
                  v727 = HIDWORD(v2264) + 1;
                  *((_QWORD *)v2263 + HIDWORD(v2264)) = v672;
                }
                HIDWORD(v2264) = v727;
              }
            }
            else
            {
              v743 = 1;
              while (v703)
              {
                v702 = (v702 + v743) & v698;
                v703 = *((_QWORD *)v689 + 6 * v702);
                ++v743;
                if (v703 == v697)
                  goto LABEL_745;
              }
            }
          }
        }
      }
      v666 = v667 + 1;
      v667 = (v667 + 1);
      if (v665 == v666)
      {
LABEL_732:
        v690 = *(unsigned int *)(v660 + 8);
        if (*(_DWORD *)(v655 + 20) <= v690)
        {
          __break(0xC471u);
          JUMPOUT(0x1984DEC20);
        }
        v691 = *(_QWORD *)(v655 + 8) + 32 * v690;
        v692 = *(unsigned int *)(v691 + 12);
        v659 = HIDWORD(v2265);
        if ((_DWORD)v692)
        {
          v693 = *(const void **)v691;
          v694 = HIDWORD(v2265) + v692;
          if (v694 > DWORD2(v2265))
          {
            v731 = DWORD2(v2265) + ((unint64_t)DWORD2(v2265) >> 2);
            if (v731 >= 0x10)
              v732 = v731 + 1;
            else
              v732 = 16;
            if (v732 <= v694)
              v733 = HIDWORD(v2265) + v692;
            else
              v733 = v732;
            v734 = (_QWORD *)v2265;
            if (v733 < 0x11)
            {
              v735 = v2266;
              *(_QWORD *)&v2265 = v2266;
              DWORD2(v2265) = 16;
            }
            else
            {
              if (v733 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1984DED68);
              }
              v735 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v733));
              DWORD2(v2265) = v733;
              *(_QWORD *)&v2265 = v735;
            }
            memcpy(v735, v734, 8 * v659);
            if (v2266 != v734 && v734)
            {
              if ((_QWORD *)v2265 == v734)
              {
                *(_QWORD *)&v2265 = 0;
                DWORD2(v2265) = 0;
              }
              WTF::fastFree((unint64_t)v734, v736, v737, v738, v739, v740, v741, v742);
            }
          }
          if (v694 < HIDWORD(v2265))
          {
            __break(0xC471u);
            JUMPOUT(0x1984DECC0);
          }
          memcpy((void *)(v2265 + 8 * HIDWORD(v2265)), v693, 8 * v692);
          HIDWORD(v2265) = v659 + v692;
          LODWORD(v659) = v659 + v692;
        }
        if (!(_DWORD)v659)
        {
          v695 = v2265;
          if (v2266 != (_QWORD *)v2265 && (_QWORD)v2265)
          {
            *(_QWORD *)&v2265 = 0;
            DWORD2(v2265) = 0;
            WTF::fastFree(v695, v644, v645, v646, v647, v648, v649, v650);
          }
          LODWORD(v656) = HIDWORD(v2264);
          if (!HIDWORD(v2264))
          {
            v728 = v2263;
            v105 = this;
            v652 = v2180;
            v653 = v2186;
            if (v2263)
            {
              v2263 = 0;
              LODWORD(v2264) = 0;
              WTF::fastFree((unint64_t)v728, v644, v645, v646, v647, v648, v649, v650);
            }
            goto LABEL_762;
          }
          goto LABEL_686;
        }
        goto LABEL_687;
      }
    }
  }
LABEL_785:
  v744 = (JSC::DFG *)*((_QWORD *)v105 + 24);
  if (!*((_QWORD *)v744 + 98))
  {
    JSC::DFG::Graph::logAssertionFailure(v744, 0, (const WTF::CString *)"./dfg/DFGSSACalculator.h", (const char *)0xB2, "void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1923:13)]", "m_graph.m_ssaDominators");
    __break(0xC471u);
    JUMPOUT(0x1984DDD7CLL);
  }
  v745 = *(_QWORD *)v2150;
  if (*(_QWORD *)v2150)
  {
    v746 = 0;
    v2196 = *(_QWORD *)v2150;
    while (1)
    {
      if (v746 >> 3 >= *((unsigned int *)v105 + 39))
      {
        __break(0xC471u);
        JUMPOUT(0x1984DED78);
      }
      v747 = *(_QWORD *)(*((_QWORD *)v105 + 18) + 8 * (v746 >> 3)) + 24 * (v746 & 7);
      v748 = *(_QWORD *)(*((_QWORD *)v105 + 24) + 784);
      v2267 = 0x8000000000000000;
      v2218 = v747;
      v749 = *(unsigned int *)(v747 + 12);
      v2264 = 0;
      if ((_DWORD)v749)
        break;
LABEL_867:
      if ((v2267 & 0x8000000000000000) == 0)
        WTF::fastFree(2 * v2267, v644, v645, v646, v647, v648, v649, v650);
      if (++v746 == v745)
        goto LABEL_890;
    }
    v2208 = v746;
    if (v749 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1984DEF08);
    }
    v750 = (WTF *)WTF::fastMalloc((WTF *)(8 * v749));
    LODWORD(v2264) = v749;
    v2263 = v750;
    memcpy(v750, *(const void **)v2218, 8 * *(unsigned int *)(v2218 + 12));
LABEL_792:
    v751 = *((_QWORD *)v2263 + v749 - 1);
    HIDWORD(v2264) = v749 - 1;
    *(_QWORD *)&v2265 = v2266;
    DWORD2(v2265) = 16;
    v2266[0] = v751;
    LODWORD(v752) = 1;
LABEL_793:
    v753 = *(_QWORD *)(v2265 + 8 * v752 - 8);
    HIDWORD(v2265) = v752 - 1;
    v754 = *(unsigned int *)(v753 + 220);
    if ((_DWORD)v754)
    {
      v755 = 8 * v754;
      while (1)
      {
        v756 = *(_QWORD *)(*(_QWORD *)(v753 + 208) - 8 + v755);
        v757 = *(unsigned __int16 *)(v756 + 18);
        if ((v757 - 364) < 0xC)
          break;
        if ((v757 - 28) < 2 || (v757 - 23) <= 2)
        {
          v755 -= 8;
          if (v755)
            continue;
        }
        goto LABEL_871;
      }
    }
    else
    {
LABEL_871:
      v756 = 0;
    }
    v758 = 1;
    switch(*(_WORD *)(v756 + 18))
    {
      case 0x16C:
        goto LABEL_801;
      case 0x16D:
        v758 = 2;
        goto LABEL_801;
      case 0x16E:
        v758 = *(_DWORD *)(*(_QWORD *)(v756 + 72) + 12) + 1;
        goto LABEL_837;
      case 0x16F:
        v758 = *(_DWORD *)(*(_QWORD *)(v756 + 72) + 12);
LABEL_837:
        if (!v758)
          goto LABEL_838;
LABEL_801:
        v759 = 0;
        v760 = 0;
        v761 = (uint64_t *)(v756 + 72);
        break;
      default:
        goto LABEL_838;
    }
    while (1)
    {
      v762 = *(unsigned __int16 *)(v756 + 18);
      if (v762 == 366)
      {
        v772 = (_QWORD *)*v761;
        v773 = *(_DWORD *)(*v761 + 12);
        if (v773 <= v759)
        {
          if (v773 != v759)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DD3B4);
          }
          v763 = (uint64_t)(v772 + 2);
          goto LABEL_810;
        }
        v764 = *v772 + 32 * v760;
      }
      else
      {
        if (v762 == 367)
        {
          if (*(_DWORD *)(*v761 + 12) <= v759)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DEC80);
          }
          v763 = *(_QWORD *)*v761 + 8 * v760;
          goto LABEL_810;
        }
        if (!v759)
        {
          v763 = v756 + 72;
          if (v762 != 364)
            v763 = *v761;
          goto LABEL_810;
        }
        if (v759 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1984DE6C0);
        }
        v764 = *v761;
      }
      v763 = v764 + 16;
LABEL_810:
      v765 = *(_QWORD *)v763;
      v766 = *(unsigned int *)(*(_QWORD *)v763 + 8);
      v767 = *(_DWORD *)(v748 + 20);
      if (v767 <= v766)
      {
        __break(0xC471u);
        JUMPOUT(0x1984DEB14);
      }
      v768 = *(unsigned int *)(v751 + 8);
      if (v767 <= v768)
      {
        __break(0xC471u);
        JUMPOUT(0x1984DEB1CLL);
      }
      v769 = *(_QWORD *)(v748 + 8);
      v770 = v769 + 32 * v766;
      v771 = v769 + 32 * v768;
      if (*(_DWORD *)(v770 + 24) <= *(_DWORD *)(v771 + 24) || *(_DWORD *)(v770 + 28) >= *(_DWORD *)(v771 + 28))
      {
        v2268[0] = (JSC::DFG::BasicBlock *)v765;
        v820 = v2267;
        if (v2267 < 0)
          v778 = 63;
        else
          v778 = *(_QWORD *)(2 * v2267);
        if (v778 <= v766)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v2267, v766 + 1, 0);
          v820 = v2267;
        }
        v774 = 2 * v820 + 8;
        v682 = v820 < 0;
        v775 = &v2267;
        if (!v682)
          v775 = (uint64_t *)v774;
        v776 = (v766 >> 3) & 0x1FFFFFF8;
        v777 = *(uint64_t *)((char *)v775 + v776);
        *(uint64_t *)((char *)v775 + v776) = v777 | (1 << v766);
        if ((v777 & (1 << v766)) == 0)
        {
          v779 = *(unsigned int *)(v2218 + 16);
          if (HIDWORD(v2261) <= v779)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DEC60);
          }
          v780 = *(_DWORD *)(v765 + 8);
          if (*((_DWORD *)this + 121) <= v780)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DEC68);
          }
          v781 = *(JSC::DFG::_anonymous_namespace_::LocalHeap **)(*((_QWORD *)this + 59) + 40 * v780 + 16);
          if (v781)
          {
            v644 = (void *)*((_QWORD *)v2260 + v779);
            v788 = *((_DWORD *)v781 - 2);
            v789 = ((unint64_t)v644 + ~((_QWORD)v644 << 32)) ^ (((unint64_t)v644 + ~((_QWORD)v644 << 32)) >> 22);
            v790 = 9 * ((v789 + ~(v789 << 13)) ^ ((v789 + ~(v789 << 13)) >> 8));
            v791 = (v790 ^ (v790 >> 15)) + ~((v790 ^ (v790 >> 15)) << 27);
            v792 = v788 & ((v791 >> 31) ^ v791);
            v793 = (void *)*((_QWORD *)v781 + 6 * v792);
            if (v793 == v644)
            {
LABEL_851:
                    + 2))
              {
                if (!*(_DWORD *)(v765 + 220))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DEC70);
                }
                v794 = *((_QWORD *)this + 4);
                v795 = **(_QWORD **)(v765 + 208);
                v796 = *(_QWORD *)v795;
                if ((*(_QWORD *)v795 & 1) != 0)
                {
                  v1924 = *(_QWORD *)(v796 & 0xFFFFFFFF8);
                  if ((v796 & 2) != 0
                    || ((v1925 = *(unsigned int *)((v796 & 0xFFFFFFFF8) + 8), (_DWORD)v1925 != 0x3FFFFFFF)
                      ? (v1926 = (_DWORD)v1925 == -1)
                      : (v1926 = 1),
                        v1926))
                  {
                    v1927 = 2;
                  }
                  else if (v1925 >> 28)
                  {
                    v2183 = *(_DWORD *)((v796 & 0xFFFFFFFF8) + 8);
                    v2192 = *(_QWORD *)(v796 & 0xFFFFFFFF8);
                    v1924 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1924 = v2192;
                    *(_DWORD *)(v1924 + 8) = v2183;
                    v1927 = 1;
                  }
                  else
                  {
                    v1927 = *(_QWORD *)(v796 & 0xFFFFFFFF8);
                    v1924 = v1925 << 36;
                  }
                  v796 = v1924 | v1927;
                }
                *(_QWORD *)&v2251 = v796;
                v797 = *(_QWORD *)(v795 + 8);
                if ((v797 & 1) != 0)
                {
                  v1928 = *(_QWORD *)(v797 & 0xFFFFFFFF8);
                  if ((v797 & 2) != 0
                    || ((v1929 = *(unsigned int *)((v797 & 0xFFFFFFFF8) + 8), (_DWORD)v1929 != 0x3FFFFFFF)
                      ? (v1930 = (_DWORD)v1929 == -1)
                      : (v1930 = 1),
                        v1930))
                  {
                    v1931 = 2;
                  }
                  else if (v1929 >> 28)
                  {
                    v2184 = *(_DWORD *)((v797 & 0xFFFFFFFF8) + 8);
                    v2193 = *(_QWORD *)(v797 & 0xFFFFFFFF8);
                    v1928 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v1928 = v2193;
                    *(_DWORD *)(v1928 + 8) = v2184;
                    v1931 = 1;
                  }
                  else
                  {
                    v1931 = *(_QWORD *)(v797 & 0xFFFFFFFF8);
                    v1928 = v1929 << 36;
                  }
                  v797 = v1928 | v1931;
                }
                *((_QWORD *)&v2251 + 1) = v797;
                BYTE1(v2252) = HIBYTE(*(_WORD *)(v795 + 16));
                LOBYTE(v2252) = 0;
                v805 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>(v794, 0x3B73FFFFFFF7, 27, (uint64_t)&v2251, v647, v648, v649, v650);
                if ((BYTE8(v2251) & 1) != 0 && (*((_QWORD *)&v2251 + 1) & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(*((_QWORD *)&v2251 + 1) & 0xFFFFFFFF8, v798, v799, v800, v801, v802, v803, v804);
                if ((v2251 & 1) != 0 && (v2251 & 0xFFFFFFFF8) != 0)
                  WTF::fastFree(v2251 & 0xFFFFFFFF8, v798, v799, v800, v801, v802, v803, v804);
                v806 = *(_DWORD *)(v805 + 56);
                if ((v806 | 1) != v806)
                  *(_DWORD *)(v805 + 56) = v806 | 1;
                v807 = *(_DWORD *)(v765 + 8);
                if (*((_DWORD *)this + 47) <= v807)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DEC78);
                }
                v2187 = *((_QWORD *)this + 22) + 24 * v807;
                v808 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                *v808 = v2218;
                v808[1] = v765;
                v808[2] = v805;
                v808[3] = 0;
                v808[3] = *((_QWORD *)this + 21);
                *((_QWORD *)this + 21) = v808;
                *(_QWORD *)&v2250 = v808;
                v814 = (_QWORD *)(v2187 + 8);
                v815 = *(unsigned int *)(v2187 + 20);
                if ((_DWORD)v815 == *(_DWORD *)(v2187 + 16))
                {
                  v816 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2187 + 8, v815 + 1, (unint64_t)&v2250);
                  v815 = *(unsigned int *)(v2187 + 20);
                  *(_QWORD *)(*v814 + 8 * v815) = *v816;
                }
                else
                {
                  *(_QWORD *)(*v814 + 8 * v815) = v808;
                }
                *(_DWORD *)(v2187 + 20) = v815 + 1;
                v2243[0] = (JSC::DFG::Node *)v2218;
                WTF::HashMap<JSC::DFG::SSACalculator::Variable *,JSC::DFG::SSACalculator::Def *,WTF::DefaultHash<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Def *>,WTF::HashTableTraits>::add<JSC::DFG::SSACalculator::Def *&>((uint64_t *)v2187, (uint64_t *)v2243, (uint64_t *)&v2250, v809, v810, v811, v812, v813, (uint64_t)&v2251);
                if (HIDWORD(v2264) == (_DWORD)v2264)
                {
                  v819 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v2263, HIDWORD(v2264) + 1, (unint64_t)v2268);
                  v817 = HIDWORD(v2264) + 1;
                  *((_QWORD *)v2263 + HIDWORD(v2264)) = *v819;
                }
                else
                {
                  v817 = HIDWORD(v2264) + 1;
                  *((_QWORD *)v2263 + HIDWORD(v2264)) = v765;
                }
                HIDWORD(v2264) = v817;
              }
            }
            else
            {
              v833 = 1;
              while (v793)
              {
                v792 = (v792 + v833) & v788;
                v793 = (void *)*((_QWORD *)v781 + 6 * v792);
                ++v833;
                if (v793 == v644)
                  goto LABEL_851;
              }
            }
          }
        }
      }
      v759 = v760 + 1;
      v760 = (v760 + 1);
      if (v758 == v759)
      {
LABEL_838:
        v782 = *(unsigned int *)(v753 + 8);
        if (*(_DWORD *)(v748 + 20) <= v782)
        {
          __break(0xC471u);
          JUMPOUT(0x1984DEC18);
        }
        v783 = *(_QWORD *)(v748 + 8) + 32 * v782;
        v784 = *(unsigned int *)(v783 + 12);
        v752 = HIDWORD(v2265);
        if ((_DWORD)v784)
        {
          v785 = *(const void **)v783;
          v786 = HIDWORD(v2265) + v784;
          if (v786 > DWORD2(v2265))
          {
            v821 = DWORD2(v2265) + ((unint64_t)DWORD2(v2265) >> 2);
            if (v821 >= 0x10)
              v822 = v821 + 1;
            else
              v822 = 16;
            if (v822 <= v786)
              v823 = HIDWORD(v2265) + v784;
            else
              v823 = v822;
            v824 = (_QWORD *)v2265;
            if (v823 < 0x11)
            {
              v825 = v2266;
              *(_QWORD *)&v2265 = v2266;
              DWORD2(v2265) = 16;
            }
            else
            {
              if (v823 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x1984DED60);
              }
              v825 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v823));
              DWORD2(v2265) = v823;
              *(_QWORD *)&v2265 = v825;
            }
            memcpy(v825, v824, 8 * v752);
            if (v2266 != v824 && v824)
            {
              if ((_QWORD *)v2265 == v824)
              {
                *(_QWORD *)&v2265 = 0;
                DWORD2(v2265) = 0;
              }
              WTF::fastFree((unint64_t)v824, v826, v827, v828, v829, v830, v831, v832);
            }
          }
          if (v786 < HIDWORD(v2265))
          {
            __break(0xC471u);
            JUMPOUT(0x1984DECC8);
          }
          memcpy((void *)(v2265 + 8 * HIDWORD(v2265)), v785, 8 * v784);
          HIDWORD(v2265) = v752 + v784;
          LODWORD(v752) = v752 + v784;
        }
        if (!(_DWORD)v752)
        {
          v787 = v2265;
          if (v2266 != (_QWORD *)v2265 && (_QWORD)v2265)
          {
            *(_QWORD *)&v2265 = 0;
            DWORD2(v2265) = 0;
            WTF::fastFree(v787, v644, v645, v646, v647, v648, v649, v650);
          }
          LODWORD(v749) = HIDWORD(v2264);
          if (!HIDWORD(v2264))
          {
            v818 = v2263;
            v105 = this;
            v745 = v2196;
            v746 = v2208;
            if (v2263)
            {
              v2263 = 0;
              LODWORD(v2264) = 0;
              WTF::fastFree((unint64_t)v818, v644, v645, v646, v647, v648, v649, v650);
            }
            goto LABEL_867;
          }
          goto LABEL_792;
        }
        goto LABEL_793;
      }
    }
  }
LABEL_890:
  v834 = *((_QWORD *)v105 + 4);
  v2251 = 0u;
  v2252 = 0u;
  v2253 = v834;
  v835 = *(unsigned int *)(v834 + 60);
  if ((_DWORD)v835)
  {
    do
    {
      if (*(_DWORD *)(v834 + 60) <= --v835)
      {
        __break(0xC471u);
        JUMPOUT(0x1984DF018);
      }
      v836 = *(_QWORD *)(*(_QWORD *)(v834 + 48) + 8 * v835);
      if (v836)
      {
        v837 = *(_DWORD *)(v836 + 36);
        if (v837)
        {
          v838 = v837 - 1;
          v839 = 8 * v838;
          do
          {
            if (*(_DWORD *)(v836 + 36) <= v838)
            {
              __break(0xC471u);
              JUMPOUT(0x1984DEF20);
            }
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v836 + 24) + v839) + 88) = 0;
            v839 -= 8;
            --v838;
          }
          while (v838 != -1);
        }
        v840 = *(_DWORD *)(v836 + 220);
        if (v840)
        {
          v841 = v840 - 1;
          v842 = 8 * v841;
          do
          {
            if (*(_DWORD *)(v836 + 220) <= v841)
            {
              __break(0xC471u);
              JUMPOUT(0x1984DECF8);
            }
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v836 + 208) + v842) + 88) = 0;
            v842 -= 8;
            --v841;
          }
          while (v841 != -1);
        }
      }
    }
    while ((_DWORD)v835);
    v834 = *((_QWORD *)v105 + 4);
  }
  JSC::DFG::Graph::blocksInPreOrder((JSC::DFG::Graph *)v834, v644, v645, v646, v647, v648, v649, v650, (uint64_t)&v2263);
  v850 = v2263;
  if (HIDWORD(v2264))
  {
    v2158 = (uint64_t *)((char *)v105 + 536);
    v2151 = (uint64_t *)((char *)v105 + 224);
    v851 = (uint64_t *)((char *)v105 + 232);
    v2166 = (_QWORD *)((char *)v105 + 248);
    v2155 = (WTF *)((char *)v2263 + 8 * HIDWORD(v2264));
    v2213 = (JSC::DFG::_anonymous_namespace_::LocalHeap *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v2168 = (uint64_t *)((char *)v105 + 232);
    v2175 = (uint64_t *)((char *)v105 + 520);
    while (1)
    {
      v2268[0] = 0;
      v2160 = v850;
      v2268[0] = *(JSC::DFG::BasicBlock **)v850;
      v852 = *((_DWORD *)v2268[0] + 2);
      if (*((_DWORD *)v105 + 121) <= v852)
      {
        __break(0xC471u);
        JUMPOUT(0x1984DF098);
      }
      v853 = *((_QWORD *)v105 + 59);
      v854 = v853 + 40 * v852;
      *((_BYTE *)v105 + 504) = *(_BYTE *)v854;
      WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable((uint64_t *)&v2265, (_QWORD *)(v854 + 8), v844, v845, v846, v847, v848, v849);
      v862 = *((_QWORD *)v105 + 64);
      *((_QWORD *)v105 + 64) = v2265;
      *(_QWORD *)&v2265 = v862;
      if (v862)
        WTF::fastFree(v862 - 16, v855, v856, v857, v858, v859, v860, v861);
      v863 = v853 + 40 * v852;
      *((_BYTE *)v105 + 528) = *(_BYTE *)(v863 + 24);
      v870 = *((_QWORD *)v2268[0] + 25);
      WTF::Vector<JSC::DFG::Availability,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::operator=((const void **)&v2251, (const void **)v870, v871, v872, v873, v874, v875, v876);
      *(_QWORD *)&v2252 = *(_QWORD *)(v870 + 16);
      WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::operator=((uint64_t *)&v2252 + 1, (_QWORD *)(v870 + 24), v877, v878, v879, v880, v881, v882);
      v890 = *((_QWORD *)v105 + 28);
      if (v890)
      {
        *v2151 = 0;
        WTF::fastFree(v890 - 16, v883, (uint64_t)v884, v885, v886, v887, v888, v889);
      }
      v891 = *v851;
      if (*v851)
      {
        *v851 = 0;
        WTF::fastFree(v891 - 16, v883, (uint64_t)v884, v885, v886, v887, v888, v889);
      }
      v892 = v2268[0];
      v893 = *((unsigned int *)v2268[0] + 2);
      if (*((unsigned int *)v105 + 31) <= v893)
      {
        __break(0xC471u);
        JUMPOUT(0x1984DF0A0);
      }
      v894 = *((_QWORD *)v105 + 14) + 24 * v893;
      v895 = *(unsigned int *)(v894 + 20);
      if ((_DWORD)v895)
      {
        v1757 = *(JSC::DFG::Node ****)(v894 + 8);
        v1758 = &v1757[v895];
        v1759 = HIDWORD(v2259);
        v1760 = v2258;
        do
        {
          v1761 = *v1757;
          v1762 = **v1757;
          v1763 = (*v1757)[2];
          *(_QWORD *)&v2265 = 0;
          *((_QWORD *)&v2265 + 1) = v1763;
          v1764 = *((unsigned int *)this + 65);
          if ((_DWORD)v1764 && *(_QWORD *)(*v2166 + 16 * v1764 - 16))
          {
            JSC::DFG::InsertionSet::insertSlow((uint64_t)v2153, (unint64_t *)&v2265, (uint64_t)v884, v885, v886, v887, v888, v889);
          }
          else
          {
            if ((_DWORD)v1764 == *((_DWORD *)this + 64))
            {
              v2002 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2166, (void *)(v1764 + 1), (unint64_t)&v2265, v885, v886, v887, v888, v889);
              v1764 = *((unsigned int *)this + 65);
              v1765 = *((_QWORD *)this + 31);
              v1766 = *v2002;
            }
            else
            {
              v1765 = *((_QWORD *)this + 31);
              v1766 = v2265;
            }
            *(_OWORD *)(v1765 + 16 * v1764) = v1766;
            ++*((_DWORD *)this + 65);
          }
          v1767 = *((unsigned int *)v1762 + 4);
          if (v1759 <= v1767)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DF0F8);
          }
          v2250 = *((_OWORD *)v1760 + v1767);
          v2243[0] = v1761[2];
          WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation const&,JSC::DFG::Node *>((uint64_t)&v2265, v2151, (uint64_t)&v2250, (uint64_t *)v2243);
          v1768 = *v2203;
          if (*v2203)
          {
            v1769 = *(_DWORD *)(v1768 - 8);
            v1770 = (~((_QWORD)v2250 << 32) + v2250) ^ ((~((_QWORD)v2250 << 32) + (_QWORD)v2250) >> 22);
            v1771 = 9 * ((v1770 + ~(v1770 << 13)) ^ ((unint64_t)(v1770 + ~(v1770 << 13)) >> 8));
            v1772 = (v1771 ^ (v1771 >> 15)) + ~((v1771 ^ (v1771 >> 15)) << 27);
            v1773 = v1769 & ((v1772 >> 31) ^ v1772);
            v1774 = *(_QWORD *)(v1768 + 8 * v1773);
            if (v1774 == (_QWORD)v2250)
            {
LABEL_1926:
              if (!*((_DWORD *)v2268[0] + 55))
              {
                __break(0xC471u);
                JUMPOUT(0x1984DF100);
              }
              v1776 = *((_QWORD *)this + 4);
              v1777 = **((_QWORD **)v2268[0] + 26);
              v1778 = *(_QWORD *)v1777;
              if ((*(_QWORD *)v1777 & 1) != 0)
              {
                v2097 = *(_QWORD *)(v1778 & 0xFFFFFFFF8);
                if ((v1778 & 2) != 0
                  || ((v2098 = *(unsigned int *)((v1778 & 0xFFFFFFFF8) + 8), (_DWORD)v2098 != 0x3FFFFFFF)
                    ? (v2099 = (_DWORD)v2098 == -1)
                    : (v2099 = 1),
                      v2099))
                {
                  v2100 = 2;
                }
                else if (v2098 >> 28)
                {
                  v2140 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v2140 = v2097;
                  *(_DWORD *)(v2140 + 8) = v2098;
                  v2100 = 1;
                  v2097 = v2140;
                }
                else
                {
                  v2100 = *(_QWORD *)(v1778 & 0xFFFFFFFF8);
                  v2097 = v2098 << 36;
                }
                v1778 = v2097 | v2100;
                v851 = v2168;
              }
              v2246 = v1778;
              v1779 = *(_QWORD *)(v1777 + 8);
              if ((v1779 & 1) != 0)
              {
                v2101 = *(_QWORD *)(v1779 & 0xFFFFFFFF8);
                if ((v1779 & 2) != 0
                  || ((v2102 = *(unsigned int *)((v1779 & 0xFFFFFFFF8) + 8), (_DWORD)v2102 != 0x3FFFFFFF)
                    ? (v2103 = (_DWORD)v2102 == -1)
                    : (v2103 = 1),
                      v2103))
                {
                  v2104 = 2;
                }
                else if (v2102 >> 28)
                {
                  v2141 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v2141 = v2101;
                  *(_DWORD *)(v2141 + 8) = v2102;
                  v2104 = 1;
                  v2101 = v2141;
                }
                else
                {
                  v2104 = *(_QWORD *)(v1779 & 0xFFFFFFFF8);
                  v2101 = v2102 << 36;
                }
                v1779 = v2101 | v2104;
                v851 = v2168;
              }
              v2247 = v1779;
              v2249 = HIBYTE(*(_WORD *)(v1777 + 16));
              v2248 = 0;
              v1780 = JSC::DFG::PromotedHeapLocation::createHint(&v2250, v1776, (uint64_t)&v2246, (uint64_t)v1761[2]);
              *(_QWORD *)&v2265 = 0;
              *((_QWORD *)&v2265 + 1) = v1780;
              v1782 = *((unsigned int *)this + 65);
              if ((_DWORD)v1782 && *(_QWORD *)(*v2166 + 16 * v1782 - 16))
              {
                JSC::DFG::InsertionSet::insertSlow((uint64_t)v2153, (unint64_t *)&v2265, (uint64_t)v884, v885, v886, v887, v888, v889);
              }
              else
              {
                if ((_DWORD)v1782 == *((_DWORD *)this + 64))
                {
                  v2070 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2166, (void *)(v1782 + 1), (unint64_t)&v2265, v885, v886, v887, v888, v889);
                  v1782 = *((unsigned int *)this + 65);
                  v1783 = *((_QWORD *)this + 31);
                  v1784 = *v2070;
                }
                else
                {
                  v1783 = *((_QWORD *)this + 31);
                  v1784 = v2265;
                }
                *(_OWORD *)(v1783 + 16 * v1782) = v1784;
                ++*((_DWORD *)this + 65);
              }
              if ((v2247 & 1) != 0 && (v2247 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v2247 & 0xFFFFFFFF8, v1781, (uint64_t)v884, v885, v886, v887, v888, v889);
              if ((v2246 & 1) != 0 && (v2246 & 0xFFFFFFFF8) != 0)
                WTF::fastFree(v2246 & 0xFFFFFFFF8, v1781, (uint64_t)v884, v885, v886, v887, v888, v889);
            }
            else
            {
              v1775 = 1;
              while (v1774)
              {
                v1773 = (v1773 + v1775) & v1769;
                v1774 = *(_QWORD *)(v1768 + 8 * v1773);
                ++v1775;
                if (v1774 == (_QWORD)v2250)
                  goto LABEL_1926;
              }
            }
          }
          ++v1757;
        }
        while (v1757 != v1758);
        v892 = v2268[0];
        v893 = *((unsigned int *)v2268[0] + 2);
        v105 = this;
      }
      if (*((unsigned int *)v105 + 47) <= v893)
      {
        __break(0xC471u);
        JUMPOUT(0x1984DF0A8);
      }
      v896 = *((_QWORD *)v105 + 22) + 24 * v893;
      v897 = *(unsigned int *)(v896 + 20);
      if ((_DWORD)v897)
      {
        v1889 = *(uint64_t ***)(v896 + 8);
        v1890 = &v1889[v897];
        do
        {
          v1891 = *v1889;
          v1892 = **v1889;
          JSC::DFG::InsertionSet::insert(v2153, 0, (JSC::DFG::Node *)(*v1889)[2], v885, v886, v887, v888, v889);
          v1897 = *(unsigned int *)(v1892 + 16);
          if (HIDWORD(v2261) <= v1897)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DF108);
          }
          v1898 = *((_QWORD *)v2260 + v1897);
          v2267 = v1898;
          *(_QWORD *)&v2250 = v1891[2];
          WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *>(&v2265, v851, &v2267, &v2250, v1893, v1894, v1895, v1896);
          v2245 = 0;
          if (!*((_DWORD *)v2268[0] + 55))
          {
            __break(0xC471u);
            JUMPOUT(0x1984DF110);
          }
          JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v2244, **((const JSC::DFG::NodeOrigin ***)v2268[0] + 26));
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v2244, v1899, v1900, v1901, v1902, v1903, v1904, v1905);
          v1906 = *(unsigned int *)(v1892 + 16);
          if (v2147 <= v1906)
          {
            __break(0xC471u);
            JUMPOUT(0x1984DF118);
          }
          v1907 = (_OWORD *)WTF::HashSet<JSC::DFG::PromotedHeapLocation,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTableTraits>::begin(*((_QWORD *)v2149 + v1906));
          *(_QWORD *)&v2250 = v1907;
          *((_QWORD *)&v2250 + 1) = v1908;
          v1909 = *((_QWORD *)v2149 + v1906);
          if (v1909)
            v1910 = (_OWORD *)(v1909 + 16 * *(unsigned int *)(v1909 - 4));
          else
            v1910 = 0;
          if (v1910 != v1907)
          {
            do
            {
              *(_OWORD *)v2243 = *v1907;
              {
                if (!*((_DWORD *)v2268[0] + 55))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DF120);
                }
                v2053 = *((_QWORD *)this + 4);
                JSC::DFG::NodeOrigin::withExitOK(**((_QWORD **)v2268[0] + 26), 0, (uint64_t)v2242);
                Hint = (JSC::DFG::Node *)JSC::DFG::PromotedHeapLocation::createHint(v2243, v2053, (uint64_t)v2242, v1891[2]);
                JSC::DFG::InsertionSet::insert(v2153, 0, Hint, v2055, v2056, v2057, v2058, v2059);
                JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v2242, v2060, v2061, v2062, v2063, v2064, v2065, v2066);
                v2241 = v1891[2];
                WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation const&,JSC::DFG::Node *>((uint64_t)&v2265, v2151, (uint64_t)v2243, &v2241);
              }
              WTF::HashTableConstIteratorAdapter<WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>,JSC::DFG::PromotedHeapLocation>::operator++((uint64_t *)&v2250);
              v1907 = (_OWORD *)v2250;
            }
            while ((_OWORD *)v2250 != v1910);
          }
          ++v1889;
        }
        while (v1889 != v1890);
        v892 = v2268[0];
        v105 = this;
      }
      LODWORD(v2267) = 0;
      if (!*((_DWORD *)v892 + 55))
      {
        v1159 = 0;
        goto LABEL_1241;
      }
      v898 = 0;
      do
      {
        v2243[0] = 0;
        v899 = *(JSC::DFG::Node **)(*((_QWORD *)v892 + 26) + 8 * v898);
        v2243[0] = v899;
        LOBYTE(v2241) = 1;
        v2245 = *((_BYTE *)v899 + 16);
        v900 = *v2201;
        if (*v2201)
        {
          v901 = *(_DWORD *)(v900 - 8);
          v902 = ((unint64_t)v899 + ~((_QWORD)v899 << 32)) ^ (((unint64_t)v899 + ~((_QWORD)v899 << 32)) >> 22);
          v903 = 9 * ((v902 + ~(v902 << 13)) ^ ((v902 + ~(v902 << 13)) >> 8));
          v904 = (v903 ^ (v903 >> 15)) + ~((v903 ^ (v903 >> 15)) << 27);
          v905 = v901 & ((v904 >> 31) ^ v904);
          v906 = *(JSC::DFG::Node **)(v900 + 24 * v905);
          if (v906 == v899)
          {
LABEL_1682:
            v1606 = v900 + 24 * v905;
            v1607 = *(unsigned int *)(v1606 + 20);
            if ((_DWORD)v1607)
            {
              if (v1607 >> 28)
              {
                __break(0xC471u);
                JUMPOUT(0x1984DF030);
              }
              v1608 = v1606 + 8;
              v1609 = WTF::fastMalloc((WTF *)(16 * v1607));
              v1617 = v1609;
              v1618 = *(unsigned int *)(v1608 + 12);
              if ((_DWORD)v1618)
              {
                v1212 = *(__int128 **)v1608;
                v1215 = 16 * v1618;
                v1214 = (_OWORD *)v1609;
                do
                {
                  v1213 = *v1212++;
                  *v1214++ = v1213;
                  v1215 -= 16;
                }
                while (v1215);
              }
              v1619 = (__int128 *)(v1609 + 16 * v1607);
              v1620 = (__int128 *)v1609;
              do
              {
                v2250 = *v1620;
                if (DWORD2(v2250) == 11)
                {
                  WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation const&,JSC::DFG::Node *&>((uint64_t)&v2265, v2151, (uint64_t)&v2250, v2164);
                  v1823 = *v2203;
                  if (*v2203)
                  {
                    v1824 = *(_DWORD *)(v1823 - 8);
                    v1825 = v2243[0];
                    v1826 = ((uint64_t)v2243[0] + ~((uint64_t)v2243[0] << 32)) ^ (((unint64_t)v2243[0]
                                                                               + ~((uint64_t)v2243[0] << 32)) >> 22);
                    v1827 = 9 * ((v1826 + ~(v1826 << 13)) ^ ((v1826 + ~(v1826 << 13)) >> 8));
                    v1828 = (v1827 ^ (v1827 >> 15)) + ~((v1827 ^ (v1827 >> 15)) << 27);
                    v1829 = v1824 & ((v1828 >> 31) ^ v1828);
                    v1830 = *(JSC::DFG::Node **)(v1823 + 8 * v1829);
                    if (v1830 == v2243[0])
                    {
LABEL_2002:
                      v1832 = v2267;
                      v1833 = *((_QWORD *)this + 4);
                      v1834 = *((unsigned __int8 *)v2243[0] + 16);
                      v1835 = v2245;
                      v2245 = 0;
                      if (v1834)
                        v1836 = v1835 == 0;
                      else
                        v1836 = 1;
                      v1837 = !v1836;
                      v1838 = *(_QWORD *)v2243[0];
                      if ((*(_QWORD *)v2243[0] & 1) != 0)
                      {
                        v2105 = *(_QWORD *)(v1838 & 0xFFFFFFFF8);
                        if ((v1838 & 2) != 0
                          || ((v2106 = *(unsigned int *)((v1838 & 0xFFFFFFFF8) + 8), (_DWORD)v2106 != 0x3FFFFFFF)
                            ? (v2107 = (_DWORD)v2106 == -1)
                            : (v2107 = 1),
                              v2107))
                        {
                          v2108 = 2;
                        }
                        else if (v2106 >> 28)
                        {
                          v2142 = WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v2142 = v2105;
                          *(_DWORD *)(v2142 + 8) = v2106;
                          v2108 = 1;
                          v2105 = v2142;
                        }
                        else
                        {
                          v2108 = *(_QWORD *)(v1838 & 0xFFFFFFFF8);
                          v2105 = v2106 << 36;
                        }
                        v1838 = v2105 | v2108;
                        v851 = v2168;
                      }
                      v2237 = v1838;
                      v1839 = *((_QWORD *)v1825 + 1);
                      if ((v1839 & 1) != 0)
                      {
                        v2109 = *(_QWORD *)(v1839 & 0xFFFFFFFF8);
                        if ((v1839 & 2) != 0
                          || ((v2110 = *(unsigned int *)((v1839 & 0xFFFFFFFF8) + 8), (_DWORD)v2110 != 0x3FFFFFFF)
                            ? (v2111 = (_DWORD)v2110 == -1)
                            : (v2111 = 1),
                              v2111))
                        {
                          v2112 = 2;
                        }
                        else if (v2110 >> 28)
                        {
                          v2143 = WTF::fastMalloc((WTF *)0x10);
                          *(_QWORD *)v2143 = v2109;
                          *(_DWORD *)(v2143 + 8) = v2110;
                          v2112 = 1;
                          v2109 = v2143;
                        }
                        else
                        {
                          v2112 = *(_QWORD *)(v1839 & 0xFFFFFFFF8);
                          v2109 = v2110 << 36;
                        }
                        v1839 = v2109 | v2112;
                        v851 = v2168;
                      }
                      v1840 = (v1832 + 1);
                      v2238 = v1839;
                      v2240 = HIBYTE(*((_WORD *)v1825 + 8));
                      v2239 = v1837;
                      v1841 = JSC::DFG::PromotedHeapLocation::createHint(&v2250, v1833, (uint64_t)&v2237, *((_QWORD *)this + 68));
                      *(_QWORD *)&v2265 = v1840;
                      *((_QWORD *)&v2265 + 1) = v1841;
                      v1842 = *((unsigned int *)this + 65);
                      if ((_DWORD)v1842 && *(_QWORD *)(*v2166 + 16 * v1842 - 16) > v1840)
                      {
                        JSC::DFG::InsertionSet::insertSlow((uint64_t)v2153, (unint64_t *)&v2265, v1611, v1612, v1613, v1614, v1615, v1616);
                      }
                      else
                      {
                        if ((_DWORD)v1842 == *((_DWORD *)this + 64))
                        {
                          v2074 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2166, (void *)(v1842 + 1), (unint64_t)&v2265, v1612, v1613, v1614, v1615, v1616);
                          v1842 = *((unsigned int *)this + 65);
                          v1843 = *((_QWORD *)this + 31);
                          v1844 = *v2074;
                        }
                        else
                        {
                          v1843 = *((_QWORD *)this + 31);
                          v1844 = v2265;
                        }
                        *(_OWORD *)(v1843 + 16 * v1842) = v1844;
                        ++*((_DWORD *)this + 65);
                      }
                      if ((v2238 & 1) != 0 && (v2238 & 0xFFFFFFFF8) != 0)
                        WTF::fastFree(v2238 & 0xFFFFFFFF8, v1610, v1611, v1612, v1613, v1614, v1615, v1616);
                      if ((v2237 & 1) != 0 && (v2237 & 0xFFFFFFFF8) != 0)
                        WTF::fastFree(v2237 & 0xFFFFFFFF8, v1610, v1611, v1612, v1613, v1614, v1615, v1616);
                    }
                    else
                    {
                      v1831 = 1;
                      while (v1830)
                      {
                        v1829 = (v1829 + v1831) & v1824;
                        v1830 = *(JSC::DFG::Node **)(v1823 + 8 * v1829);
                        ++v1831;
                        if (v1830 == v2243[0])
                          goto LABEL_2002;
                      }
                    }
                  }
                }
                ++v1620;
              }
              while (v1620 != v1619);
              WTF::fastFree(v1617, v1610, v1611, v1612, v1613, v1614, v1615, v1616);
              v105 = this;
            }
          }
          else
          {
            v907 = 1;
            while (v906)
            {
              v905 = (v905 + v907) & v901;
              v906 = *(JSC::DFG::Node **)(v900 + 24 * v905);
              ++v907;
              if (v906 == v899)
                goto LABEL_1682;
            }
          }
        }
        v908 = *((_QWORD *)v105 + 55);
        if (!v908)
          goto LABEL_1056;
        v909 = *(_DWORD *)(v908 - 8);
        v910 = ((uint64_t)v2243[0] + ~((uint64_t)v2243[0] << 32)) ^ (((unint64_t)v2243[0]
                                                                  + ~((uint64_t)v2243[0] << 32)) >> 22);
        v911 = 9 * ((v910 + ~(v910 << 13)) ^ ((v910 + ~(v910 << 13)) >> 8));
        v912 = (v911 ^ (v911 >> 15)) + ~((v911 ^ (v911 >> 15)) << 27);
        v913 = v909 & ((v912 >> 31) ^ v912);
        v914 = *(JSC::DFG::Node **)(v908 + 24 * v913);
        if (v914 != v2243[0])
        {
          v1166 = 1;
          while (v914)
          {
            v913 = (v913 + v1166) & v909;
            v914 = *(JSC::DFG::Node **)(v908 + 24 * v913);
            ++v1166;
            if (v914 == v2243[0])
              goto LABEL_926;
          }
          goto LABEL_1056;
        }
LABEL_926:
        v915 = v908 + 24 * v913;
        v916 = *(unsigned int *)(v915 + 20);
        if (!(_DWORD)v916)
          goto LABEL_1056;
        if (v916 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1984DEDD0);
        }
        v917 = 8 * v916;
        v918 = *((_QWORD *)v2213 + 94);
        if (!v918)
          goto LABEL_2322;
        v919 = (unint64_t)(v917 + 15) >> 4;
        if (v916 <= 0x34)
        {
          v920 = 23 * v919 + 7;
        }
        else
        {
          if (v916 > 0x4E2)
            goto LABEL_2322;
          v920 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v919 + 626);
          if (*(_DWORD *)(v918 + 8052) <= v920)
            goto LABEL_2322;
        }
        v921 = v918 + 8 * v920;
        v922 = v921 + 8064;
        *(_BYTE *)(v921 + 8064) = 1;
        v923 = *(unsigned int *)(v921 + 8080);
        if ((_DWORD)v923)
        {
          *(_DWORD *)(v922 + 16) = v923 - *(_DWORD *)(v922 + 20);
          v924 = (void *)(*(_QWORD *)(v922 + 8) - v923);
          goto LABEL_936;
        }
        v1160 = *(_QWORD *)(v922 + 40);
        v1161 = *(_QWORD *)(v922 + 24);
        if (v1160)
          goto LABEL_1140;
        if (*(_BYTE *)(v922 + 5) != 6)
          goto LABEL_2321;
        v1912 = *(unsigned int *)(v922 + 32);
        v1913 = *(_DWORD *)(v922 + 36);
        if (v1912 >= v1913)
          goto LABEL_2321;
        *(_QWORD *)(v922 + 8 * v1912 + 56) = 0;
        v1914 = (unint64_t *)(v918 + 8128 + 8 * v920 + 8 * v1912);
        v1915 = v1913 - 1 - v1912;
        do
        {
          if (!v1915)
          {
            *(_DWORD *)(v922 + 32) = v1913;
LABEL_2321:
            *(_BYTE *)v922 = 0;
LABEL_2322:
            v924 = (void *)bmalloc_allocate_casual(v917, 1);
            goto LABEL_937;
          }
          v1161 += 1024;
          v1917 = *v1914++;
          v1916 = v1917;
          LODWORD(v1912) = v1912 + 1;
          --v1915;
        }
        while (!v1917);
        v1160 = __rbit64(v1916);
        *(_DWORD *)(v922 + 32) = v1912;
        *(_QWORD *)(v922 + 24) = v1161;
LABEL_1140:
        v1162 = __clz(v1160);
        *(_QWORD *)(v922 + 40) = v1160 & ~(0x8000000000000000 >> v1162);
        v924 = (void *)(v1161 + 16 * v1162);
LABEL_936:
        *(_BYTE *)v922 = 0;
LABEL_937:
        memcpy(v924, *(const void **)(v915 + 8), 8 * *(unsigned int *)(v915 + 20));
        v925 = (uint64_t *)v924;
        v2181 = (unint64_t)v924;
        v2188 = v916;
        while (2)
        {
          v926 = *v925;
          v927 = *((_QWORD *)v105 + 54);
          if (v927)
          {
            v928 = *(_DWORD *)(v927 - 8);
            v929 = (~(v926 << 32) + v926) ^ ((unint64_t)(~(v926 << 32) + v926) >> 22);
            v930 = 9 * ((v929 + ~(v929 << 13)) ^ ((v929 + ~(v929 << 13)) >> 8));
            v931 = (v930 ^ (v930 >> 15)) + ~((v930 ^ (v930 >> 15)) << 27);
            v932 = v928 & ((v931 >> 31) ^ v931);
            v933 = *(_QWORD *)(v927 + 16 * v932);
            if (v933 == v926)
            {
LABEL_940:
              v934 = *(_QWORD *)(v927 + 16 * v932 + 8);
              goto LABEL_941;
            }
            v1177 = 1;
            while (v933)
            {
              v932 = ((_DWORD)v932 + v1177) & v928;
              v933 = *(_QWORD *)(v927 + 16 * v932);
              ++v1177;
              if (v933 == v926)
                goto LABEL_940;
            }
          }
          v934 = 0;
LABEL_941:
          v2219 = v2268[0];
          v935 = *v2175;
          v2209 = ~(v934 << 32);
          if (*v2175)
          {
            v936 = *(_DWORD *)(v935 - 8);
            v937 = ((~(v934 << 32) + v934) ^ ((unint64_t)(~(v934 << 32) + v934) >> 22))
                 + ~(((~(v934 << 32) + v934) ^ ((unint64_t)(~(v934 << 32) + v934) >> 22)) << 13);
            v938 = (9 * (v937 ^ (v937 >> 8))) ^ ((9 * (v937 ^ (v937 >> 8))) >> 15);
            v939 = v936 & (((v938 + ~(v938 << 27)) >> 31) ^ (v938 + ~((_DWORD)v938 << 27)));
            v940 = (uint64_t *)(v935 + 48 * v939);
            v941 = *v940;
            if (*v940 != v934)
            {
              v1190 = 1;
              while (v941)
              {
                v939 = (v939 + v1190) & v936;
                v940 = (uint64_t *)(v935 + 48 * v939);
                v941 = *v940;
                ++v1190;
                if (*v940 == v934)
                  goto LABEL_943;
              }
              v940 = (uint64_t *)(v935 + 48 * *(unsigned int *)(v935 - 4));
            }
          }
          else
          {
            v940 = 0;
          }
LABEL_943:
          v942 = *(unsigned __int16 *)(v926 + 18);
          v2197 = v925;
          if (v942 > 0x120)
          {
            if (v942 == 289)
            {
              v1036 = *(_QWORD *)(v926 + 80);
              v1037 = *((_QWORD *)v105 + 58);
              v2162 = *(unsigned int *)(*((_QWORD *)v105 + 4) + 164);
              if (!v1037)
                goto LABEL_1032;
              v1174 = *(_DWORD *)(v1037 - 8);
              v1175 = ((v2209 + v934) ^ ((unint64_t)(v2209 + v934) >> 22))
                    + ~(((v2209 + v934) ^ ((unint64_t)(v2209 + v934) >> 22)) << 13);
              v1176 = (9 * (v1175 ^ (v1175 >> 8))) ^ ((9 * (v1175 ^ (v1175 >> 8))) >> 15);
              v1055 = v1174 & (((v1176 + ~(v1176 << 27)) >> 31) ^ (v1176 + ~((_DWORD)v1176 << 27)));
              v1056 = *(_QWORD *)(v1037 + 24 * v1055);
              if (v1056 == v934)
              {
LABEL_2028:
                v1851 = v1037 + 24 * v1055;
                v1038 = *(unsigned int *)(v1851 + 20);
                if (!(_DWORD)v1038)
                  goto LABEL_1032;
                if (v1038 >> 28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DEDD8);
                }
                v1852 = (uint64_t *)(v1851 + 8);
                v1853 = WTF::fastMalloc((WTF *)(16 * v1038));
                v1039 = (uint64_t *)v1853;
                v1854 = *((unsigned int *)v1852 + 3);
                if ((_DWORD)v1854)
                {
                  v1855 = 0;
                  v1856 = *v1852;
                  v1857 = 16 * v1854;
                  do
                  {
                    *(_OWORD *)(v1853 + v1855) = *(_OWORD *)(v1856 + v1855);
                    v1855 += 16;
                  }
                  while (v1857 != v1855);
                }
              }
              else
              {
                v1057 = 1;
                while (v1056)
                {
                  v1055 = (v1055 + v1057) & v1174;
                  v1056 = *(_QWORD *)(v1037 + 24 * v1055);
                  ++v1057;
                  if (v1056 == v934)
                    goto LABEL_2028;
                }
LABEL_1032:
                v1038 = 0;
                v1039 = 0;
              }
              v1040 = *((_QWORD *)this + 4);
              *(_QWORD *)&v2265 = v1041;
              v1047 = *(unsigned int *)(v1040 + 164);
              if ((_DWORD)v1047 == *(_DWORD *)(v1040 + 160))
              {
                v1221 = (_QWORD *)WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1040 + 152, (void *)(v1047 + 1), (unint64_t)&v2265, v1042, v1043, v1044, v1045, v1046);
                v1047 = *(unsigned int *)(v1040 + 164);
                *(_QWORD *)(*(_QWORD *)(v1040 + 152) + 8 * v1047) = *v1221;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v1040 + 152) + 8 * v1047) = v1041;
              }
              *(_DWORD *)(v1040 + 164) = v1047 + 1;
              v1048 = v940[1];
              v1049 = *((_QWORD *)this + 4);
              *(_QWORD *)&v2265 = v1050;
              v1051 = *(unsigned int *)(v1049 + 164);
              if ((_DWORD)v1051 == *(_DWORD *)(v1049 + 160))
              {
                v1222 = (_QWORD *)WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1049 + 152, (void *)(v1051 + 1), (unint64_t)&v2265, v885, v886, v887, v888, v889);
                v1051 = *(unsigned int *)(v1049 + 164);
                *(_QWORD *)(*(_QWORD *)(v1049 + 152) + 8 * v1051) = *v1222;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v1049 + 152) + 8 * v1051) = v1050;
              }
              *(_DWORD *)(v1049 + 164) = v1051 + 1;
              if (!v1038)
              {
LABEL_1038:
                v972 = v934;
                v1052 = (*(_DWORD *)(*((_QWORD *)this + 4) + 164) - v2162);
                *(_QWORD *)(v926 + 24) = v2162;
                *(_QWORD *)(v926 + 32) = v1052;
                *(_QWORD *)(v926 + 40) = 0;
                v999 = ~(v934 << 32);
                if (!v1039)
                  goto LABEL_993;
                v1879 = (unint64_t)v1039;
                goto LABEL_1954;
              }
              v1171 = &v1039[2 * v1038];
              v954 = v1039;
              while (2)
              {
                v953 = v954[1];
                if ((v953 - 1) >= 2)
                {
                  if ((_DWORD)v953 != 6)
                  {
                    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v926, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x941, "void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::populateMaterialization(BasicBlock *, Node *, Node *)", "Bad location kind");
                    __break(0xC471u);
                    JUMPOUT(0x1984DCDC0);
                  }
                  v955 = *v954;
                  *(_QWORD *)&v2265 = v954[1];
                  v956 = *(unsigned int *)(v1036 + 12);
                  if ((_DWORD)v956 == *(_DWORD *)(v1036 + 8))
                    *(_QWORD *)(*(_QWORD *)v1036 + 8 * *(unsigned int *)(v1036 + 12)) = *(_QWORD *)WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1036, v956 + 1, (unint64_t)&v2265);
                  else
                    *(_QWORD *)(*(_QWORD *)v1036 + 8 * v956) = v953;
                  ++*(_DWORD *)(v1036 + 12);
                  v959 = (unint64_t)v957;
                  v960 = *((_QWORD *)this + 25);
                  if (v960)
                  {
                    v961 = *(_DWORD *)(v960 - 8);
                    v962 = ((unint64_t)v957 + ~((_QWORD)v957 << 32)) ^ (((unint64_t)v957
                                                                              + ~((_QWORD)v957 << 32)) >> 22);
                    v963 = 9 * ((v962 + ~(v962 << 13)) ^ ((v962 + ~(v962 << 13)) >> 8));
                    v964 = (v963 ^ (v963 >> 15)) + ~((v963 ^ (v963 >> 15)) << 27);
                    v965 = v961 & ((v964 >> 31) ^ v964);
                    v966 = *(JSC::DFG::Node **)(v960 + 8 * v965);
                    if (v966 == v957)
                    {
LABEL_962:
                      v968 = *((_QWORD *)this + 4);
                      v969 = *(unsigned int *)(v968 + 164);
                      if ((_DWORD)v969 == *(_DWORD *)(v968 + 160))
                      {
                        WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *&>(v968 + 152, v2164, (uint64_t)v884, v885, v886, v887, v888, v889);
                      }
                      else
                      {
                        *(_QWORD *)(*(_QWORD *)(v968 + 152) + 8 * v969) = *v2164 & 0xFF00FFFFFFFFFFFFLL;
                        *(_DWORD *)(v968 + 164) = v969 + 1;
                      }
                      goto LABEL_952;
                    }
                    v967 = 1;
                    while (v966)
                    {
                      v965 = (v965 + v967) & v961;
                      v966 = *(JSC::DFG::Node **)(v960 + 8 * v965);
                      ++v967;
                      if (v966 == v957)
                        goto LABEL_962;
                    }
                  }
                  v970 = *((_QWORD *)this + 4);
                  v971 = *(unsigned int *)(v970 + 164);
                  if ((_DWORD)v971 == *(_DWORD *)(v970 + 160))
                  {
                    WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v970 + 152, (void *)(v971 + 1), (uint64_t)v884, v885, v886, v887, v888, v889);
                    v971 = *(unsigned int *)(v970 + 164);
                  }
                  *(_QWORD *)(*(_QWORD *)(v970 + 152) + 8 * v971) = v959 & 0xFF00FFFFFFFFFFFFLL;
                  *(_DWORD *)(v970 + 164) = v971 + 1;
                }
LABEL_952:
                v954 += 2;
                if (v954 == v1171)
                  goto LABEL_1038;
                continue;
              }
            }
            if (v942 - 359 >= 4)
              goto LABEL_1670;
            v1179 = *v2201;
            if (*v2201)
            {
              v1180 = *(_DWORD *)(v1179 - 8);
              v1181 = ((v2209 + v934) ^ ((unint64_t)(v2209 + v934) >> 22))
                    + ~(((v2209 + v934) ^ ((unint64_t)(v2209 + v934) >> 22)) << 13);
              v1182 = (9 * (v1181 ^ (v1181 >> 8))) ^ ((9 * (v1181 ^ (v1181 >> 8))) >> 15);
              v1183 = v1180 & (((v1182 + ~(v1182 << 27)) >> 31) ^ (v1182 + ~((_DWORD)v1182 << 27)));
              v1184 = *(_QWORD *)(v1179 + 24 * v1183);
              if (v1184 != v934)
              {
                v1185 = 1;
                while (v1184)
                {
                  v1183 = (v1183 + v1185) & v1180;
                  v1184 = *(_QWORD *)(v1179 + 24 * v1183);
                  ++v1185;
                  if (v1184 == v934)
                    goto LABEL_2082;
                }
                goto LABEL_1189;
              }
LABEL_2082:
              v1881 = v1179 + 24 * v1183;
              v1882 = *(unsigned int *)(v1881 + 20);
              if (!(_DWORD)v1882)
                goto LABEL_1189;
              if (v1882 >> 28)
              {
                __break(0xC471u);
                JUMPOUT(0x1984DEDE0);
              }
              v1883 = v1881 + 8;
              v1884 = WTF::fastMalloc((WTF *)(16 * v1882));
              v1186 = v1884;
              v1885 = *(unsigned int *)(v1883 + 12);
              if ((_DWORD)v1885)
              {
                v1886 = 0;
                v1887 = *(_QWORD *)v1883;
                v1888 = 16 * v1885;
                do
                {
                  *(_OWORD *)(v1884 + v1886) = *(_OWORD *)(v1887 + v1886);
                  v1886 += 16;
                }
                while (v1888 != v1886);
              }
              v972 = v934;
            }
            else
            {
LABEL_1189:
              v972 = v934;
              v1186 = 0;
            }
            v999 = ~(v934 << 32);
            if (!v1186)
              goto LABEL_993;
            v1879 = v1186;
            goto LABEL_1954;
          }
          switch(v942)
          {
            case 0x119u:
              v943 = *(_QWORD *)(v926 + 80);
              v944 = v105;
              v945 = *(unsigned int *)(*((_QWORD *)v105 + 4) + 164);
              v946 = *((_QWORD *)v944 + 58);
              if (!v946)
                goto LABEL_968;
              v947 = *(_DWORD *)(v946 - 8);
              v948 = ((v2209 + v934) ^ ((unint64_t)(v2209 + v934) >> 22))
                   + ~(((v2209 + v934) ^ ((unint64_t)(v2209 + v934) >> 22)) << 13);
              v949 = (9 * (v948 ^ (v948 >> 8))) ^ ((9 * (v948 ^ (v948 >> 8))) >> 15);
              v950 = v947 & (((v949 + ~(v949 << 27)) >> 31) ^ (v949 + ~((_DWORD)v949 << 27)));
              v951 = *(_QWORD *)(v946 + 24 * v950);
              if (v951 == v934)
              {
LABEL_1905:
                v1750 = v946 + 24 * v950;
                v973 = *(unsigned int *)(v1750 + 20);
                if (!(_DWORD)v973)
                  goto LABEL_968;
                if (v973 >> 28)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DEDC0);
                }
                v972 = v934;
                v1751 = (uint64_t *)(v1750 + 8);
                v1752 = WTF::fastMalloc((WTF *)(16 * v973));
                v974 = (uint64_t *)v1752;
                v1753 = *((unsigned int *)v1751 + 3);
                if ((_DWORD)v1753)
                {
                  v1754 = 0;
                  v1755 = *v1751;
                  v1756 = 16 * v1753;
                  do
                  {
                    *(_OWORD *)(v1752 + v1754) = *(_OWORD *)(v1755 + v1754);
                    v1754 += 16;
                  }
                  while (v1756 != v1754);
                }
              }
              else
              {
                v952 = 1;
                while (v951)
                {
                  v950 = (v950 + v952) & v947;
                  v951 = *(_QWORD *)(v946 + 24 * v950);
                  ++v952;
                  if (v951 == v934)
                    goto LABEL_1905;
                }
LABEL_968:
                v972 = v934;
                v973 = 0;
                v974 = 0;
              }
              v975 = v940[1];
              v976 = *((_QWORD *)this + 4);
              *(_QWORD *)&v2265 = v977;
              v978 = *(unsigned int *)(v976 + 164);
              if ((_DWORD)v978 == *(_DWORD *)(v976 + 160))
              {
                v1191 = (_QWORD *)WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v976 + 152, (void *)(v978 + 1), (unint64_t)&v2265, v885, v886, v887, v888, v889);
                v978 = *(unsigned int *)(v976 + 164);
                *(_QWORD *)(*(_QWORD *)(v976 + 152) + 8 * v978) = *v1191;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v976 + 152) + 8 * v978) = v977;
              }
              *(_DWORD *)(v976 + 164) = v978 + 1;
              if (v973)
              {
                v979 = &v974[2 * v973];
                v980 = v974;
                while (1)
                {
                  v981 = v980[1];
                  if ((_DWORD)v981 != 11)
                  {
                    if ((_DWORD)v981 != 13)
                    {
                      JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v926, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x90F, "void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::populateMaterialization(BasicBlock *, Node *, Node *)", "Bad location kind");
                      __break(0xC471u);
                      JUMPOUT(0x1984DB5A4);
                    }
                    goto LABEL_986;
                  }
                  v982 = *v980;
                  *(_QWORD *)&v2265 = v980[1];
                  v983 = *(unsigned int *)(v943 + 12);
                  if ((_DWORD)v983 == *(_DWORD *)(v943 + 8))
                  {
                    WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedLocationDescriptor>(v943, (unint64_t)&v2265);
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)v943 + 8 * v983) = v981;
                    ++*(_DWORD *)(v943 + 12);
                  }
                  v985 = (unint64_t)v984;
                  v986 = *((_QWORD *)this + 25);
                  if (!v986)
                    goto LABEL_983;
                  v987 = *(_DWORD *)(v986 - 8);
                  v988 = ((unint64_t)v984 + ~((_QWORD)v984 << 32)) ^ (((unint64_t)v984
                                                                            + ~((_QWORD)v984 << 32)) >> 22);
                  v989 = 9 * ((v988 + ~(v988 << 13)) ^ ((v988 + ~(v988 << 13)) >> 8));
                  v990 = (v989 ^ (v989 >> 15)) + ~((v989 ^ (v989 >> 15)) << 27);
                  v991 = v987 & ((v990 >> 31) ^ v990);
                  v992 = *(JSC::DFG::Node **)(v986 + 8 * v991);
                  if (v992 != v984)
                    break;
LABEL_981:
                  v994 = *((_QWORD *)this + 4);
                  v995 = *(unsigned int *)(v994 + 164);
                  if ((_DWORD)v995 == *(_DWORD *)(v994 + 160))
                  {
                    WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *&>(v994 + 152, v2164, (uint64_t)v884, v885, v886, v887, v888, v889);
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)(v994 + 152) + 8 * v995) = *v2164 & 0xFF00FFFFFFFFFFFFLL;
                    *(_DWORD *)(v994 + 164) = v995 + 1;
                  }
LABEL_986:
                  v980 += 2;
                  if (v980 == v979)
                    goto LABEL_992;
                }
                v993 = 1;
                while (v992)
                {
                  v991 = (v991 + v993) & v987;
                  v992 = *(JSC::DFG::Node **)(v986 + 8 * v991);
                  ++v993;
                  if (v992 == v984)
                    goto LABEL_981;
                }
LABEL_983:
                v996 = *((_QWORD *)this + 4);
                v997 = *(unsigned int *)(v996 + 164);
                if ((_DWORD)v997 == *(_DWORD *)(v996 + 160))
                {
                  WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v996 + 152, (void *)(v997 + 1), (uint64_t)v884, v885, v886, v887, v888, v889);
                  v997 = *(unsigned int *)(v996 + 164);
                }
                *(_QWORD *)(*(_QWORD *)(v996 + 152) + 8 * v997) = v985 & 0xFF00FFFFFFFFFFFFLL;
                *(_DWORD *)(v996 + 164) = v997 + 1;
                goto LABEL_986;
              }
LABEL_992:
              v998 = (*(_DWORD *)(*((_QWORD *)this + 4) + 164) - v945);
              *(_QWORD *)(v926 + 24) = v945;
              *(_QWORD *)(v926 + 32) = v998;
              *(_QWORD *)(v926 + 40) = 0;
              v999 = v2209;
              if (v974)
              {
                v1879 = (unint64_t)v974;
LABEL_1954:
                WTF::fastFree(v1879, v958, (uint64_t)v884, v885, v886, v887, v888, v889);
              }
              break;
            case 0x10Eu:
              WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get((uint64_t)&v2265, *((_QWORD *)v105 + 58), v934);
              v1202 = *((_QWORD *)v105 + 25);
              if (v1202)
              {
                v1203 = *(_DWORD *)(v1202 - 8);
                v1204 = (~(v1201 << 32) + v1201) ^ ((unint64_t)(~(v1201 << 32) + v1201) >> 22);
                v1205 = 9 * ((v1204 + ~(v1204 << 13)) ^ ((v1204 + ~(v1204 << 13)) >> 8));
                v1206 = (v1205 ^ (v1205 >> 15)) + ~((v1205 ^ (v1205 >> 15)) << 27);
                v1207 = v1203 & ((v1206 >> 31) ^ v1206);
                v1208 = *(_QWORD *)(v1202 + 8 * v1207);
                v999 = ~(v934 << 32);
                if (v1208 == v1201)
                {
LABEL_1221:
                  v1201 = *v2164;
                }
                else
                {
                  v1209 = 1;
                  while (v1208)
                  {
                    v1207 = (v1207 + v1209) & v1203;
                    v1208 = *(_QWORD *)(v1202 + 8 * v1207);
                    ++v1209;
                    if (v1208 == v1201)
                      goto LABEL_1221;
                  }
                }
              }
              else
              {
                v999 = ~(v934 << 32);
              }
              v972 = v934;
              *(_QWORD *)(v926 + 24) = v1201 & 0xFF00FFFFFFFFFFFFLL;
              v1879 = v2265;
              if ((_QWORD)v2265)
                goto LABEL_1954;
              break;
            case 0x11Fu:
              v1192 = *(_QWORD *)(v926 + 80);
              v1193 = (uint64_t *)v105;
              v1194 = *(unsigned int *)(*((_QWORD *)v105 + 4) + 164);
              WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get((uint64_t)&v2265, v1193[58], v934);
              v1195 = v940[1];
              v1196 = v1193[4];
              *(_QWORD *)&v2250 = v1197;
              v1198 = *(unsigned int *)(v1196 + 164);
              v2163 = v1194;
              if ((_DWORD)v1198 == *(_DWORD *)(v1196 + 160))
              {
                WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Edge>(v1196 + 152, (unint64_t)&v2250, (uint64_t)v884, v885, v886, v887, v888, v889);
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)(v1196 + 152) + 8 * v1198) = v1197;
                *(_DWORD *)(v1196 + 164) = v1198 + 1;
              }
              v1199 = v2265;
              if (!HIDWORD(v2265))
              {
LABEL_1224:
                v972 = v934;
                v1210 = (*(_DWORD *)(*((_QWORD *)this + 4) + 164) - v2163);
                *(_QWORD *)(v926 + 24) = v2163;
                *(_QWORD *)(v926 + 32) = v1210;
                *(_QWORD *)(v926 + 40) = 0;
                if (v1199)
                  WTF::fastFree(v1199, v1021, (uint64_t)v884, v885, v886, v887, v888, v889);
                v999 = ~(v934 << 32);
                break;
              }
              v1035 = (uint64_t *)v2265;
              v1200 = v2265 + 16 * HIDWORD(v2265);
              while (2)
              {
                v1017 = v1035[1];
                if ((_DWORD)v1017 != 13)
                {
                  if ((_DWORD)v1017 != 7)
                  {
                    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 4), (JSC::DFG::Node *)v926, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x97A, "void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::populateMaterialization(BasicBlock *, Node *, Node *)", "Bad location kind");
                    __break(0xC471u);
                    JUMPOUT(0x1984DE8F4);
                  }
                  v1018 = *v1035;
                  *(_QWORD *)&v2250 = v1035[1];
                  v1019 = *(unsigned int *)(v1192 + 12);
                  if ((_DWORD)v1019 == *(_DWORD *)(v1192 + 8))
                  {
                    WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedLocationDescriptor>(v1192, (unint64_t)&v2250);
                  }
                  else
                  {
                    *(_QWORD *)(*(_QWORD *)v1192 + 8 * v1019) = v1017;
                    ++*(_DWORD *)(v1192 + 12);
                  }
                  v1022 = (unint64_t)v1020;
                  v1023 = *((_QWORD *)this + 25);
                  if (!v1023)
                    goto LABEL_1021;
                  v1024 = *(_DWORD *)(v1023 - 8);
                  v1025 = ((unint64_t)v1020 + ~((_QWORD)v1020 << 32)) ^ (((unint64_t)v1020
                                                                               + ~((_QWORD)v1020 << 32)) >> 22);
                  v1026 = 9 * ((v1025 + ~(v1025 << 13)) ^ ((v1025 + ~(v1025 << 13)) >> 8));
                  v1027 = (v1026 ^ (v1026 >> 15)) + ~((v1026 ^ (v1026 >> 15)) << 27);
                  v1028 = v1024 & ((v1027 >> 31) ^ v1027);
                  v1029 = *(JSC::DFG::Node **)(v1023 + 8 * v1028);
                  if (v1029 == v1020)
                  {
LABEL_1019:
                    v1031 = *((_QWORD *)this + 4);
                    v1032 = *(unsigned int *)(v1031 + 164);
                    if ((_DWORD)v1032 == *(_DWORD *)(v1031 + 160))
                    {
                      WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *&>(v1031 + 152, v2164, (uint64_t)v884, v885, v886, v887, v888, v889);
                    }
                    else
                    {
                      *(_QWORD *)(*(_QWORD *)(v1031 + 152) + 8 * v1032) = *v2164 & 0xFF00FFFFFFFFFFFFLL;
                      *(_DWORD *)(v1031 + 164) = v1032 + 1;
                    }
                  }
                  else
                  {
                    v1030 = 1;
                    while (v1029)
                    {
                      v1028 = (v1028 + v1030) & v1024;
                      v1029 = *(JSC::DFG::Node **)(v1023 + 8 * v1028);
                      ++v1030;
                      if (v1029 == v1020)
                        goto LABEL_1019;
                    }
LABEL_1021:
                    v1033 = *((_QWORD *)this + 4);
                    v1034 = *(unsigned int *)(v1033 + 164);
                    if ((_DWORD)v1034 == *(_DWORD *)(v1033 + 160))
                    {
                      WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v1033 + 152, (void *)(v1034 + 1), (uint64_t)v884, v885, v886, v887, v888, v889);
                      v1034 = *(unsigned int *)(v1033 + 164);
                    }
                    *(_QWORD *)(*(_QWORD *)(v1033 + 152) + 8 * v1034) = v1022 & 0xFF00FFFFFFFFFFFFLL;
                    *(_DWORD *)(v1033 + 164) = v1034 + 1;
                  }
                }
                v1035 += 2;
                if (v1035 == (uint64_t *)v1200)
                  goto LABEL_1224;
                continue;
              }
            default:
LABEL_1670:
              JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)v105 + 4), (JSC::DFG::Node *)v926, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x996, "void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::populateMaterialization(BasicBlock *, Node *, Node *)", "Bad materialize op");
              __break(0xC471u);
              JUMPOUT(0x1984DB788);
          }
LABEL_993:
          v851 = v2168;
          v1000 = *v2168;
          if (*v2168
            || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v2168, 8uLL, 0, v885, v886, v887, v888, v889), (v1000 = *v2168) != 0))
          {
            v1001 = *(_DWORD *)(v1000 - 8);
          }
          else
          {
            v1001 = 0;
          }
          v105 = this;
          v1002 = ((v999 + v972) ^ ((unint64_t)(v999 + v972) >> 22))
                + ~(((v999 + v972) ^ ((unint64_t)(v999 + v972) >> 22)) << 13);
          v1003 = (9 * (v1002 ^ (v1002 >> 8))) ^ ((9 * (v1002 ^ (v1002 >> 8))) >> 15);
          v1004 = v1001 & (((v1003 + ~(v1003 << 27)) >> 31) ^ (v1003 + ~((_DWORD)v1003 << 27)));
          v1005 = (uint64_t *)(v1000 + 16 * v1004);
          v1006 = *v1005;
          if (!*v1005)
            goto LABEL_997;
          v1053 = 0;
          v1054 = 1;
          do
          {
            if (v1006 == v972)
            {
              v1005[1] = v926;
              v1009 = v2197;
              goto LABEL_1003;
            }
            if (v1006 == -1)
              v1053 = v1005;
            v1004 = (v1004 + v1054) & v1001;
            v1005 = (uint64_t *)(v1000 + 16 * v1004);
            v1006 = *v1005;
            ++v1054;
          }
          while (*v1005);
          if (v1053)
          {
            *v1053 = 0;
            v1053[1] = 0;
            --*(_DWORD *)(*v2168 - 16);
            v1005 = v1053;
          }
LABEL_997:
          *v1005 = v972;
          v1005[1] = v926;
          v1007 = *v2168;
          if (*v2168)
            v1008 = *(_DWORD *)(v1007 - 12) + 1;
          else
            v1008 = 1;
          v1009 = v2197;
          *(_DWORD *)(v1007 - 12) = v1008;
          v1010 = *v2168;
          if (*v2168)
            v1011 = *(_DWORD *)(v1010 - 12);
          else
            v1011 = 0;
          v1012 = (*(_DWORD *)(v1010 - 16) + v1011);
          v1013 = *(unsigned int *)(v1010 - 4);
          if (v1013 > 0x400)
          {
            if (v1013 > 2 * v1012)
              goto LABEL_1003;
LABEL_1236:
            WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(v2168, (uint64_t)v1005, (uint64_t)v884, v885, v886, v887, v888, v889);
            goto LABEL_1003;
          }
          if (3 * v1013 <= 4 * v1012)
            goto LABEL_1236;
LABEL_1003:
          *(_QWORD *)&v2265 = v2267;
          *((_QWORD *)&v2265 + 1) = v926;
          v1014 = *((unsigned int *)this + 65);
          if ((_DWORD)v1014 && *(_QWORD *)(*v2166 + 16 * v1014 - 16) > (unint64_t)v2267)
          {
            JSC::DFG::InsertionSet::insertSlow((uint64_t)v2153, (unint64_t *)&v2265, (uint64_t)v884, v885, v886, v887, v888, v889);
          }
          else
          {
            if ((_DWORD)v1014 == *((_DWORD *)this + 64))
            {
              v1220 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2166, (void *)(v1014 + 1), (unint64_t)&v2265, v885, v886, v887, v888, v889);
              v1014 = *((unsigned int *)this + 65);
              v1015 = *((_QWORD *)this + 31);
              v1016 = *v1220;
            }
            else
            {
              v1015 = *((_QWORD *)this + 31);
              v1016 = v2265;
            }
            *(_OWORD *)(v1015 + 16 * v1014) = v1016;
            ++*((_DWORD *)this + 65);
          }
          v925 = v1009 + 1;
          if (v925 != (uint64_t *)(v2181 + 8 * v2188))
            continue;
          break;
        }
        v1058 = *((_QWORD *)v2213 + 94);
        if (v1058)
        {
          if (!(v2181 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v2181 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v2181)) & 1) != 0)
          {
LABEL_1054:
            v1059 = *(unsigned int *)(v1058 + 8000);
            if (v1059 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v1058, v2181, (os_unfair_lock_s *)5, v885, v886, v887, v888, v889);
            }
            else
            {
              *(_QWORD *)(v1058 + 8 * v1059) = v2181 | 0x5000000000000;
              *(_DWORD *)(v1058 + 8000) = v1059 + 1;
            }
            goto LABEL_1056;
          }
          if (v2181 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v2181 >> 24)
          {
            v885 = 0;
          }
          else
          {
            v885 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v2181 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v2181) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v885 == 1)
              goto LABEL_1054;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v1058, v2181, 1, v885, v886, v887, v888, v889);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v2181, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_1056:
        v1060 = *((_QWORD *)v105 + 56);
        if (v1060)
        {
          v1061 = *(_DWORD *)(v1060 - 8);
          v1062 = ((uint64_t)v2243[0] + ~((uint64_t)v2243[0] << 32)) ^ (((unint64_t)v2243[0]
                                                                     + ~((uint64_t)v2243[0] << 32)) >> 22);
          v1063 = 9 * ((v1062 + ~(v1062 << 13)) ^ ((v1062 + ~(v1062 << 13)) >> 8));
          v1064 = (v1063 ^ (v1063 >> 15)) + ~((v1063 ^ (v1063 >> 15)) << 27);
          v1065 = v1061 & ((v1064 >> 31) ^ v1064);
          v1066 = *(JSC::DFG::Node **)(v1060 + 24 * v1065);
          if (v1066 == v2243[0])
          {
LABEL_1693:
            v1623 = v1060 + 24 * v1065;
            v1624 = *(unsigned int *)(v1623 + 20);
            if ((_DWORD)v1624)
            {
              if (v1624 >> 28)
              {
                __break(0xC471u);
                JUMPOUT(0x1984DF050);
              }
              v1625 = v1623 + 8;
              v1626 = WTF::fastMalloc((WTF *)(16 * v1624));
              v1627 = v1626;
              v1628 = *(unsigned int *)(v1625 + 12);
              if ((_DWORD)v1628)
              {
                v1216 = *(__int128 **)v1625;
                v1219 = 16 * v1628;
                v1218 = (_OWORD *)v1626;
                do
                {
                  v1217 = *v1216++;
                  *v1218++ = v1217;
                  v1219 -= 16;
                }
                while (v1219);
              }
              v1629 = v1626 + 16 * v1624;
              v1630 = v1626;
              do
              {
                v1631 = v105;
                v1632 = v2267;
                *(_QWORD *)&v2265 = v1632;
                *((_QWORD *)&v2265 + 1) = v1633;
                v1641 = *((unsigned int *)v1631 + 65);
                if ((_DWORD)v1641 && *(_QWORD *)(*v2166 + 16 * v1641 - 16) > v1632)
                {
                  JSC::DFG::InsertionSet::insertSlow((uint64_t)v2153, (unint64_t *)&v2265, v1635, v1636, v1637, v1638, v1639, v1640);
                  v105 = this;
                }
                else
                {
                  v105 = this;
                  if ((_DWORD)v1641 == *((_DWORD *)this + 64))
                  {
                    v1985 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2166, (void *)(v1641 + 1), (unint64_t)&v2265, v1636, v1637, v1638, v1639, v1640);
                    v1641 = *((unsigned int *)this + 65);
                    v1642 = *((_QWORD *)this + 31);
                    v1643 = *v1985;
                  }
                  else
                  {
                    v1642 = *((_QWORD *)this + 31);
                    v1643 = v2265;
                  }
                  *(_OWORD *)(v1642 + 16 * v1641) = v1643;
                  ++*((_DWORD *)this + 65);
                }
                v1630 += 16;
              }
              while (v1630 != v1629);
              WTF::fastFree(v1627, v1634, v1635, v1636, v1637, v1638, v1639, v1640);
            }
          }
          else
          {
            v1067 = 1;
            while (v1066)
            {
              v1065 = (v1065 + v1067) & v1061;
              v1066 = *(JSC::DFG::Node **)(v1060 + 24 * v1065);
              ++v1067;
              if (v1066 == v2243[0])
                goto LABEL_1693;
            }
          }
        }
        v1068 = *((_QWORD *)v105 + 57);
        if (v1068)
        {
          v1069 = *(_DWORD *)(v1068 - 8);
          v1070 = ((uint64_t)v2243[0] + ~((uint64_t)v2243[0] << 32)) ^ (((unint64_t)v2243[0]
                                                                     + ~((uint64_t)v2243[0] << 32)) >> 22);
          v1071 = 9 * ((v1070 + ~(v1070 << 13)) ^ ((v1070 + ~(v1070 << 13)) >> 8));
          v1072 = (v1071 ^ (v1071 >> 15)) + ~((v1071 ^ (v1071 >> 15)) << 27);
          v1073 = v1069 & ((v1072 >> 31) ^ v1072);
          v1074 = *(JSC::DFG::Node **)(v1068 + 24 * v1073);
          if (v1074 == v2243[0])
          {
LABEL_1064:
            v1075 = v1068 + 24 * v1073;
            v1076 = *(unsigned int *)(v1075 + 20);
            if ((_DWORD)v1076)
            {
              if (v1076 >= 0xAAAAAAB)
              {
                __break(0xC471u);
                JUMPOUT(0x1984DF058);
              }
              v2027 = (__int128 **)(v1075 + 8);
              v2028 = WTF::fastMalloc((WTF *)(24 * v1076));
              v2029 = v2028;
              v2030 = *((unsigned int *)v2027 + 3);
              if ((_DWORD)v2030)
              {
                v2031 = *v2027;
                v2032 = 24 * v2030;
                v2033 = v2028;
                do
                {
                  v2034 = *v2031;
                  *(_QWORD *)(v2033 + 16) = *((_QWORD *)v2031 + 2);
                  *(_OWORD *)v2033 = v2034;
                  v2033 += 24;
                  v2031 = (__int128 *)((char *)v2031 + 24);
                  v2032 -= 24;
                }
                while (v2032);
              }
              v2035 = v2028 + 24 * v1076;
              v2036 = v2028;
              do
              {
                v2037 = *(JSC::DFG::Node **)v2036;
                v2038 = *(_QWORD *)(v2036 + 8);
                v2036 += 24;
                v2039 = v2267;
                JSC::DFG::InsertionSet::insert(v2153, v2039, v2040, v2041, v2042, v2043, v2044, v2045);
              }
              while (v2036 != v2035);
              WTF::fastFree(v2029, v2046, v2047, v2048, v2049, v2050, v2051, v2052);
              v105 = this;
            }
          }
          else
          {
            v1168 = 1;
            while (v1074)
            {
              v1073 = (v1073 + v1168) & v1069;
              v1074 = *(JSC::DFG::Node **)(v1068 + 24 * v1073);
              ++v1168;
              if (v1074 == v2243[0])
                goto LABEL_1064;
            }
          }
        }
        v1077 = *((_QWORD *)v105 + 55);
        if (!v1077)
          goto LABEL_1092;
        v1078 = *(_DWORD *)(v1077 - 8);
        v1079 = ((uint64_t)v2243[0] + ~((uint64_t)v2243[0] << 32)) ^ (((unint64_t)v2243[0]
                                                                   + ~((uint64_t)v2243[0] << 32)) >> 22);
        v1080 = 9 * ((v1079 + ~(v1079 << 13)) ^ ((v1079 + ~(v1079 << 13)) >> 8));
        v1081 = (v1080 ^ (v1080 >> 15)) + ~((v1080 ^ (v1080 >> 15)) << 27);
        v1082 = v1078 & ((v1081 >> 31) ^ v1081);
        v1083 = *(JSC::DFG::Node **)(v1077 + 24 * v1082);
        if (v1083 != v2243[0])
        {
          v1167 = 1;
          do
          {
            if (!v1083)
              goto LABEL_1092;
            v1082 = (v1082 + v1167) & v1078;
            v1083 = *(JSC::DFG::Node **)(v1077 + 24 * v1082);
            ++v1167;
          }
          while (v1083 != v2243[0]);
        }
        v1084 = v1077 + 24 * v1082;
        v1085 = *(unsigned int *)(v1084 + 20);
        if (!(_DWORD)v1085)
          goto LABEL_1092;
        if (v1085 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1984DEDC8);
        }
        v1086 = 8 * v1085;
        v1087 = *((_QWORD *)v2213 + 94);
        if (!v1087)
          goto LABEL_2325;
        v1088 = (unint64_t)(v1086 + 15) >> 4;
        if (v1085 <= 0x34)
        {
          v1089 = 23 * v1088 + 7;
        }
        else
        {
          if (v1085 > 0x4E2)
            goto LABEL_2325;
          v1089 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v1088 + 626);
          if (*(_DWORD *)(v1087 + 8052) <= v1089)
            goto LABEL_2325;
        }
        v1090 = v1087 + 8 * v1089;
        v1091 = v1090 + 8064;
        *(_BYTE *)(v1090 + 8064) = 1;
        v1092 = *(unsigned int *)(v1090 + 8080);
        if ((_DWORD)v1092)
        {
          *(_DWORD *)(v1091 + 16) = v1092 - *(_DWORD *)(v1091 + 20);
          v1093 = *(_QWORD *)(v1091 + 8) - v1092;
          goto LABEL_1077;
        }
        v1163 = *(_QWORD *)(v1091 + 40);
        v1164 = *(_QWORD *)(v1091 + 24);
        if (v1163)
          goto LABEL_1142;
        if (*(_BYTE *)(v1091 + 5) != 6)
          goto LABEL_2324;
        v1918 = *(unsigned int *)(v1091 + 32);
        v1919 = *(_DWORD *)(v1091 + 36);
        if (v1918 >= v1919)
          goto LABEL_2324;
        *(_QWORD *)(v1091 + 8 * v1918 + 56) = 0;
        v1920 = (unint64_t *)(v1087 + 8128 + 8 * v1089 + 8 * v1918);
        v1921 = v1919 - 1 - v1918;
        do
        {
          if (!v1921)
          {
            *(_DWORD *)(v1091 + 32) = v1919;
LABEL_2324:
            *(_BYTE *)v1091 = 0;
LABEL_2325:
            v1093 = bmalloc_allocate_casual(v1086, 1);
            goto LABEL_1078;
          }
          v1164 += 1024;
          v1923 = *v1920++;
          v1922 = v1923;
          LODWORD(v1918) = v1918 + 1;
          --v1921;
        }
        while (!v1923);
        v1163 = __rbit64(v1922);
        *(_DWORD *)(v1091 + 32) = v1918;
        *(_QWORD *)(v1091 + 24) = v1164;
LABEL_1142:
        v1165 = __clz(v1163);
        *(_QWORD *)(v1091 + 40) = v1163 & ~(0x8000000000000000 >> v1165);
        v1093 = v1164 + 16 * v1165;
LABEL_1077:
        *(_BYTE *)v1091 = 0;
LABEL_1078:
        memcpy((void *)v1093, *(const void **)(v1084 + 8), 8 * *(unsigned int *)(v1084 + 20));
        v1094 = (uint64_t *)(v1093 + 8 * v1085);
        v1095 = (uint64_t *)v1093;
        while (2)
        {
          v1096 = *v1095;
          v1097 = *((_QWORD *)v105 + 54);
          if (v1097)
          {
            v1098 = *(_DWORD *)(v1097 - 8);
            v1099 = (~(v1096 << 32) + v1096) ^ ((unint64_t)(~(v1096 << 32) + v1096) >> 22);
            v1100 = 9 * ((v1099 + ~(v1099 << 13)) ^ ((v1099 + ~(v1099 << 13)) >> 8));
            v1101 = (v1100 ^ (v1100 >> 15)) + ~((v1100 ^ (v1100 >> 15)) << 27);
            v1102 = v1098 & ((v1101 >> 31) ^ v1101);
            v1103 = *(_QWORD *)(v1097 + 16 * v1102);
            if (v1103 == v1096)
            {
LABEL_1081:
              v1104 = *(_QWORD *)(v1097 + 16 * v1102 + 8);
              goto LABEL_1082;
            }
            v1178 = 1;
            while (v1103)
            {
              v1102 = ((_DWORD)v1102 + v1178) & v1098;
              v1103 = *(_QWORD *)(v1097 + 16 * v1102);
              ++v1178;
              if (v1103 == v1096)
                goto LABEL_1081;
            }
          }
          v1104 = 0;
LABEL_1082:
          v1105 = v2267;
          v1106 = v2243[0];
          v1107 = *(_QWORD *)v2243[0];
          if ((*(_QWORD *)v2243[0] & 1) != 0)
          {
            v1871 = *(_QWORD *)(v1107 & 0xFFFFFFFF8);
            if ((v1107 & 2) != 0
              || ((v1872 = *(unsigned int *)((v1107 & 0xFFFFFFFF8) + 8), (_DWORD)v1872 != 0x3FFFFFFF)
                ? (v1873 = (_DWORD)v1872 == -1)
                : (v1873 = 1),
                  v1873))
            {
              v1874 = 2;
            }
            else if (v1872 >> 28)
            {
              v2113 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v2113 = v1871;
              *(_DWORD *)(v2113 + 8) = v1872;
              v1874 = 1;
              v1871 = v2113;
            }
            else
            {
              v1874 = *(_QWORD *)(v1107 & 0xFFFFFFFF8);
              v1871 = v1872 << 36;
            }
            v1107 = v1871 | v1874;
          }
          v2234 = v1107;
          v1108 = *((_QWORD *)v1106 + 1);
          if ((v1108 & 1) != 0)
          {
            v1875 = *(_QWORD *)(v1108 & 0xFFFFFFFF8);
            if ((v1108 & 2) != 0
              || ((v1876 = *(unsigned int *)((v1108 & 0xFFFFFFFF8) + 8), (_DWORD)v1876 != 0x3FFFFFFF)
                ? (v1877 = (_DWORD)v1876 == -1)
                : (v1877 = 1),
                  v1877))
            {
              v1878 = 2;
            }
            else if (v1876 >> 28)
            {
              v2114 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v2114 = v1875;
              *(_DWORD *)(v2114 + 8) = v1876;
              v1878 = 1;
              v1875 = v2114;
            }
            else
            {
              v1878 = *(_QWORD *)(v1108 & 0xFFFFFFFF8);
              v1875 = v1876 << 36;
            }
            v1108 = v1875 | v1878;
          }
          v2235 = v1108;
          v2236 = *((_WORD *)v1106 + 8);
          v105 = this;
          if ((v2235 & 1) != 0 && (v2235 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v2235 & 0xFFFFFFFF8, v1109, (uint64_t)v884, v885, v886, v887, v888, v889);
          if ((v2234 & 1) != 0 && (v2234 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v2234 & 0xFFFFFFFF8, v1109, (uint64_t)v884, v885, v886, v887, v888, v889);
          if (++v1095 != v1094)
            continue;
          break;
        }
        v1110 = *((_QWORD *)v2213 + 94);
        if (v1110)
        {
          if (v1093 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v1093 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v1093)) & 1) == 0)
          {
            if (v1093 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v1093 >> 24)
            {
              v885 = 0;
            }
            else
            {
              v885 = (*(_DWORD *)((char *)off_1ECF425F8
                                + ((((v1093 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                + 24) >> (2 * ((BYTE3(v1093) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v885 == 1)
                goto LABEL_1090;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v1110, v1093, 1, v885, v886, v887, v888, v889);
          }
          else
          {
LABEL_1090:
            v1111 = *(unsigned int *)(v1110 + 8000);
            if (v1111 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v1110, v1093, (os_unfair_lock_s *)5, v885, v886, v887, v888, v889);
            }
            else
            {
              *(_QWORD *)(v1110 + 8 * v1111) = v1093 | 0x5000000000000;
              *(_DWORD *)(v1110 + 8000) = v1111 + 1;
            }
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v1093, (uint64_t)&bmalloc_heap_config, 1);
        }
LABEL_1092:
        v1112 = v2243[0];
        if (*((_BYTE *)v2243[0] + 16))
          v1113 = v2241 == 0;
        else
          v1113 = 0;
        if (v1113)
        {
          v1803 = v2267;
          v1804 = *(_QWORD *)v2243[0];
          if ((*(_QWORD *)v2243[0] & 1) != 0)
          {
            v2089 = *(_QWORD *)(v1804 & 0xFFFFFFFF8);
            if ((v1804 & 2) != 0
              || ((v2090 = *(unsigned int *)((v1804 & 0xFFFFFFFF8) + 8), (_DWORD)v2090 != 0x3FFFFFFF)
                ? (v2091 = (_DWORD)v2090 == -1)
                : (v2091 = 1),
                  v2091))
            {
              v2092 = 2;
            }
            else if (v2090 >> 28)
            {
              v2138 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v2138 = v2089;
              *(_DWORD *)(v2138 + 8) = v2090;
              v2092 = 1;
              v2089 = v2138;
            }
            else
            {
              v2092 = *(_QWORD *)(v1804 & 0xFFFFFFFF8);
              v2089 = v2090 << 36;
            }
            v1804 = v2089 | v2092;
            v105 = this;
            v851 = v2168;
          }
          v2231 = v1804;
          v1805 = *((_QWORD *)v1112 + 1);
          if ((v1805 & 1) != 0)
          {
            v2093 = *(_QWORD *)(v1805 & 0xFFFFFFFF8);
            if ((v1805 & 2) != 0
              || ((v2094 = *(unsigned int *)((v1805 & 0xFFFFFFFF8) + 8), (_DWORD)v2094 != 0x3FFFFFFF)
                ? (v2095 = (_DWORD)v2094 == -1)
                : (v2095 = 1),
                  v2095))
            {
              v2096 = 2;
            }
            else if (v2094 >> 28)
            {
              v2139 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v2139 = v2093;
              *(_DWORD *)(v2139 + 8) = v2094;
              v2096 = 1;
              v2093 = v2139;
            }
            else
            {
              v2096 = *(_QWORD *)(v1805 & 0xFFFFFFFF8);
              v2093 = v2094 << 36;
            }
            v1805 = v2093 | v2096;
            v105 = this;
            v851 = v2168;
          }
          v2232 = v1805;
          v2233 = *((_WORD *)v1112 + 8);
          JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)v2153, v1803, 0, 22, (uint64_t)&v2231, v887, v888, v889);
          if ((v2232 & 1) != 0 && (v2232 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v2232 & 0xFFFFFFFF8, v1806, (uint64_t)v884, v885, v886, v887, v888, v889);
          if ((v2231 & 1) != 0 && (v2231 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v2231 & 0xFFFFFFFF8, v1806, (uint64_t)v884, v885, v886, v887, v888, v889);
        }
        v1114 = *v2203;
        v1115 = v2243[0];
        if (*v2203)
        {
          v1116 = *(_DWORD *)(v1114 - 8);
          v1117 = ((uint64_t)v2243[0] + ~((uint64_t)v2243[0] << 32)) ^ (((unint64_t)v2243[0]
                                                                     + ~((uint64_t)v2243[0] << 32)) >> 22);
          v1118 = 9 * ((v1117 + ~(v1117 << 13)) ^ ((v1117 + ~(v1117 << 13)) >> 8));
          v1119 = (v1118 ^ (v1118 >> 15)) + ~((v1118 ^ (v1118 >> 15)) << 27);
          v1120 = v1116 & ((v1119 >> 31) ^ v1119);
          v1121 = *(JSC::DFG::Node **)(v1114 + 8 * v1120);
          if (v1121 != v2243[0])
          {
            v1122 = 1;
            while (v1121)
            {
              v1120 = (v1120 + v1122) & v1116;
              v1121 = *(JSC::DFG::Node **)(v1114 + 8 * v1120);
              ++v1122;
              if (v1121 == v2243[0])
                goto LABEL_1101;
            }
            goto LABEL_1112;
          }
LABEL_1101:
          v1123 = *v851;
          if (*v851
            || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v851, 8uLL, 0, v885, v886, v887, v888, v889), (v1123 = *v851) != 0))
          {
            v1124 = *(_DWORD *)(v1123 - 8);
          }
          else
          {
            v1124 = 0;
          }
          v1125 = v2243[0];
          v1126 = ((uint64_t)v2243[0] + ~((uint64_t)v2243[0] << 32)) ^ (((unint64_t)v2243[0]
                                                                     + ~((uint64_t)v2243[0] << 32)) >> 22);
          v1127 = 9 * ((v1126 + ~(v1126 << 13)) ^ ((v1126 + ~(v1126 << 13)) >> 8));
          v1128 = (v1127 ^ (v1127 >> 15)) + ~((v1127 ^ (v1127 >> 15)) << 27);
          v1129 = v1124 & ((v1128 >> 31) ^ v1128);
          v1130 = v1123 + 16 * v1129;
          v1131 = *(JSC::DFG::Node **)v1130;
          if (*(_QWORD *)v1130)
          {
            v1169 = 0;
            v1170 = 1;
            do
            {
              if (v1131 == v2243[0])
              {
                *(JSC::DFG::Node **)(v1130 + 8) = v2243[0];
                goto LABEL_1111;
              }
              if (v1131 == (JSC::DFG::Node *)-1)
                v1169 = (_QWORD *)v1130;
              v1129 = (v1129 + v1170) & v1124;
              v1130 = v1123 + 16 * v1129;
              v1131 = *(JSC::DFG::Node **)v1130;
              ++v1170;
            }
            while (*(_QWORD *)v1130);
            if (v1169)
            {
              *v1169 = 0;
              v1169[1] = 0;
              --*(_DWORD *)(*v851 - 16);
              v1130 = (uint64_t)v1169;
            }
          }
          *(_QWORD *)v1130 = v1125;
          *(JSC::DFG::Node **)(v1130 + 8) = v2243[0];
          v1132 = *v851;
          if (*v851)
            v1133 = *(_DWORD *)(v1132 - 12) + 1;
          else
            v1133 = 1;
          *(_DWORD *)(v1132 - 12) = v1133;
          v1134 = *v851;
          if (*v851)
            v1135 = *(_DWORD *)(v1134 - 12);
          else
            v1135 = 0;
          v1136 = (*(_DWORD *)(v1134 - 16) + v1135);
          v1137 = *(unsigned int *)(v1134 - 4);
          if (v1137 > 0x400)
          {
            if (v1137 > 2 * v1136)
              goto LABEL_1111;
          }
          else if (3 * v1137 > 4 * v1136)
          {
LABEL_1111:
            v1115 = v2243[0];
            goto LABEL_1112;
          }
          WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(v851, v1130, (uint64_t)v884, v885, v886, v887, v888, v889);
          goto LABEL_1111;
        }
LABEL_1112:
        JSC::DFG::LocalOSRAvailabilityCalculator::executeNode((JSC::DFG::LocalOSRAvailabilityCalculator *)&v2251, v1115);
        v1144 = v2243[0];
        if (*((_BYTE *)v2243[0] + 16))
        {
          v1145 = JSC::DFG::clobbersExitState(*((JSC::DFG **)v105 + 4), v2243[0], v1138, v1139, v1140, v1141, v1142, v1143);
          v1144 = v2243[0];
        }
        else
        {
          v1145 = 1;
        }
        v2230 = 0;
        *(_QWORD *)&v2265 = &v2262;
        *((_QWORD *)&v2265 + 1) = &v2257;
        v2266[0] = v105;
        v2266[1] = v2268;
        v2266[2] = &v2230;
        v2266[3] = v2243;
        v2266[4] = &v2267;
        v2266[5] = &v2245;
        *(_QWORD *)&v2250 = v105;
        *((_QWORD *)&v2250 + 1) = v2268;
        if (!v2245 && !v1145)
        {
          v1668 = v2267;
          v1669 = v2243[0];
          v1670 = *(_QWORD *)v2243[0];
          if ((*(_QWORD *)v2243[0] & 1) != 0)
          {
            v2075 = *(_QWORD *)(v1670 & 0xFFFFFFFF8);
            if ((v1670 & 2) != 0
              || ((v2076 = *(unsigned int *)((v1670 & 0xFFFFFFFF8) + 8), (_DWORD)v2076 != 0x3FFFFFFF)
                ? (v2077 = (_DWORD)v2076 == -1)
                : (v2077 = 1),
                  v2077))
            {
              v2078 = 2;
            }
            else if (v2076 >> 28)
            {
              v2134 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v2134 = v2075;
              *(_DWORD *)(v2134 + 8) = v2076;
              v2078 = 1;
              v2075 = v2134;
            }
            else
            {
              v2078 = *(_QWORD *)(v1670 & 0xFFFFFFFF8);
              v2075 = v2076 << 36;
            }
            v1670 = v2075 | v2078;
            v105 = this;
            v851 = v2168;
          }
          v2227 = v1670;
          v1671 = *((_QWORD *)v1669 + 1);
          if ((v1671 & 1) != 0)
          {
            v2079 = *(_QWORD *)(v1671 & 0xFFFFFFFF8);
            if ((v1671 & 2) != 0
              || ((v2080 = *(unsigned int *)((v1671 & 0xFFFFFFFF8) + 8), (_DWORD)v2080 != 0x3FFFFFFF)
                ? (v2081 = (_DWORD)v2080 == -1)
                : (v2081 = 1),
                  v2081))
            {
              v2082 = 2;
            }
            else if (v2080 >> 28)
            {
              v2135 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v2135 = v2079;
              *(_DWORD *)(v2135 + 8) = v2080;
              v2082 = 1;
              v2079 = v2135;
            }
            else
            {
              v2082 = *(_QWORD *)(v1671 & 0xFFFFFFFF8);
              v2079 = v2080 << 36;
            }
            v1671 = v2079 | v2082;
            v105 = this;
            v851 = v2168;
          }
          v2228 = v1671;
          v2229 = *((_WORD *)v1669 + 8);
          JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>((uint64_t)v2153, (v1668 + 1), 0, 22, (uint64_t)&v2227, v887, v888, v889);
          if ((v2228 & 1) != 0 && (v2228 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v2228 & 0xFFFFFFFF8, v1672, (uint64_t)v884, v885, v886, v887, v888, v889);
          if ((v2227 & 1) != 0 && (v2227 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v2227 & 0xFFFFFFFF8, v1672, (uint64_t)v884, v885, v886, v887, v888, v889);
        }
        v1146 = *v2203;
        v1147 = v2243[0];
        if (!*v2203)
        {
LABEL_1126:
          if (v2230)
            goto LABEL_1121;
          goto LABEL_1127;
        }
        v1148 = *(_DWORD *)(v1146 - 8);
        v1149 = ((uint64_t)v2243[0] + ~((uint64_t)v2243[0] << 32)) ^ (((unint64_t)v2243[0]
                                                                   + ~((uint64_t)v2243[0] << 32)) >> 22);
        v1150 = 9 * ((v1149 + ~(v1149 << 13)) ^ ((v1149 + ~(v1149 << 13)) >> 8));
        v1151 = (v1150 ^ (v1150 >> 15)) + ~((v1150 ^ (v1150 >> 15)) << 27);
        v1152 = v1148 & ((v1151 >> 31) ^ v1151);
        v1153 = *(JSC::DFG::Node **)(v1146 + 8 * v1152);
        if (v1153 != v2243[0])
        {
          v1154 = 1;
          while (v1153)
          {
            v1152 = (v1152 + v1154) & v1148;
            v1153 = *(JSC::DFG::Node **)(v1146 + 8 * v1152);
            ++v1154;
            if (v1153 == v2243[0])
              goto LABEL_1121;
          }
          goto LABEL_1126;
        }
LABEL_1121:
        v1155 = *((unsigned __int16 *)v2243[0] + 9);
        if (v1155 > 0x158)
        {
          if (v1155 != 345)
          {
            switch(*((_WORD *)v2243[0] + 9))
            {
              case 0x167:
                v1156 = 282;
                break;
              case 0x168:
                v1156 = 283;
                break;
              case 0x169:
                v1156 = 285;
                break;
              case 0x16A:
                v1156 = 284;
                break;
              default:
                goto LABEL_1138;
            }
            *((_WORD *)v2243[0] + 9) = v1156;
            v1157 = *((_DWORD *)v1147 + 14);
LABEL_1168:
            v1173 = v1157 | 8;
LABEL_1169:
            *((_DWORD *)v1147 + 14) = v1173;
            *((_QWORD *)v1147 + 9) = 0;
            *((_QWORD *)v1147 + 10) = 0;
            *((_QWORD *)v1147 + 4) = 0;
            *((_QWORD *)v1147 + 5) = 0;
            *((_QWORD *)v1147 + 3) = 0;
            goto LABEL_1127;
          }
          v1172 = 288;
LABEL_1167:
          *((_WORD *)v2243[0] + 9) = v1172;
          v1157 = *((_DWORD *)v1147 + 14) & 0xFFFFFFE7;
          goto LABEL_1168;
        }
        switch(v1155)
        {
          case 0x103u:
            v1172 = 278;
            goto LABEL_1167;
          case 0x10Cu:
            v1172 = 286;
            goto LABEL_1167;
          case 0x10Eu:
            *((_WORD *)v2243[0] + 9) = 290;
            v1173 = 9;
            goto LABEL_1169;
        }
LABEL_1138:
        JSC::DFG::Node::remove(v2243[0], *((JSC::DFG::Graph **)v105 + 4), v884, v885, v886, v887, v888, v889);
        v1147 = v2243[0];
LABEL_1127:
        v1158 = *((_QWORD *)v1147 + 3);
        if ((*((_BYTE *)v1147 + 56) & 0x10) != 0)
        {
          v1188 = *((_QWORD *)v1147 + 4);
          if ((int)v1188 + (int)v1158 > v1158)
          {
            v1211 = *((_QWORD *)v105 + 4);
            v1189 = *((_QWORD *)v1147 + 3);
            do
            {
              if (v1189 >= *(unsigned int *)(v1211 + 164))
              {
                __break(0xC471u);
                JUMPOUT(0x1984DF038);
              }
              v1187 = *(_QWORD *)(v1211 + 152);
              v884 = (unint64_t *)(*(_QWORD *)(v1187 + 8 * v1189) & 0xFF00FFFFFFFFFFFFLL);
              if (v884)
              {
                v1158 = *((_QWORD *)v1147 + 3);
                v1188 = *((_QWORD *)v1147 + 4);
              }
              ++v1189;
              v105 = this;
            }
            while (v1189 < (v1158 + v1188));
          }
        }
        else
        {
          v884 = (unint64_t *)(v1158 & 0xFF00FFFFFFFFFFFFLL);
          if ((v1158 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v884 = (unint64_t *)(*((_QWORD *)v1147 + 4) & 0xFF00FFFFFFFFFFFFLL);
            if (v884)
            {
              v884 = (unint64_t *)(*((_QWORD *)v1147 + 5) & 0xFF00FFFFFFFFFFFFLL);
              if (v884)
            }
          }
        }
        v898 = v2267 + 1;
        LODWORD(v2267) = v898;
        v892 = v2268[0];
        v1159 = *((_DWORD *)v2268[0] + 55);
      }
      while (v1159 > v898);
LABEL_1241:
      v1223 = v1159 - 1;
      do
      {
        if (v1223 >= v1159)
        {
          __break(0xC471u);
          JUMPOUT(0x1984DF0B0);
        }
        v1224 = *(_QWORD *)(*((_QWORD *)v892 + 26) + 8 * v1223--);
      }
      while (*(unsigned __int16 *)(v1224 + 18) - 364 > 0xB);
      v1225 = *(_QWORD *)v1224;
      if ((*(_QWORD *)v1224 & 1) != 0)
      {
        v1990 = *(_QWORD *)(v1225 & 0xFFFFFFFF8);
        if ((v1225 & 2) != 0
          || ((v1991 = *(unsigned int *)((v1225 & 0xFFFFFFFF8) + 8), (_DWORD)v1991 != 0x3FFFFFFF)
            ? (v1992 = (_DWORD)v1991 == -1)
            : (v1992 = 1),
              v1992))
        {
          v1993 = 2;
        }
        else if (v1991 >> 28)
        {
          v2130 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v2130 = v1990;
          *(_DWORD *)(v2130 + 8) = v1991;
          v1993 = 1;
          v1990 = v2130;
        }
        else
        {
          v1993 = *(_QWORD *)(v1225 & 0xFFFFFFFF8);
          v1990 = v1991 << 36;
        }
        v1225 = v1990 | v1993;
        v105 = this;
      }
      *(_QWORD *)&v2265 = v1225;
      v1226 = *(_QWORD *)(v1224 + 8);
      if ((v1226 & 1) != 0)
      {
        v1994 = *(_QWORD *)(v1226 & 0xFFFFFFFF8);
        if ((v1226 & 2) != 0
          || ((v1995 = *(unsigned int *)((v1226 & 0xFFFFFFFF8) + 8), (_DWORD)v1995 != 0x3FFFFFFF)
            ? (v1996 = (_DWORD)v1995 == -1)
            : (v1996 = 1),
              v1996))
        {
          v1997 = 2;
        }
        else if (v1995 >> 28)
        {
          v2131 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v2131 = v1994;
          *(_DWORD *)(v2131 + 8) = v1995;
          v1997 = 1;
          v1994 = v2131;
        }
        else
        {
          v1997 = *(_QWORD *)(v1226 & 0xFFFFFFFF8);
          v1994 = v1995 << 36;
        }
        v1226 = v1994 | v1997;
        v105 = this;
      }
      *((_QWORD *)&v2265 + 1) = v1226;
      LOWORD(v2266[0]) = *(_WORD *)(v1224 + 16);
      v1227 = v2268[0];
      v1228 = *((unsigned int *)v2268[0] + 55);
      if ((_DWORD)v1228)
      {
        v1229 = 8 * v1228;
        while (1)
        {
          v1230 = *(_QWORD *)(*((_QWORD *)v2268[0] + 26) - 8 + v1229);
          v1231 = *(unsigned __int16 *)(v1230 + 18);
          if ((v1231 - 364) < 0xC)
            break;
          if ((v1231 - 28) < 2 || (v1231 - 23) <= 2)
          {
            v1229 -= 8;
            if (v1229)
              continue;
          }
          goto LABEL_1888;
        }
      }
      else
      {
LABEL_1888:
        v1230 = 0;
      }
      v1232 = 1;
      switch(*(_WORD *)(v1230 + 18))
      {
        case 0x16C:
          goto LABEL_1254;
        case 0x16D:
          v1232 = 2;
          goto LABEL_1254;
        case 0x16E:
          v1232 = *(_DWORD *)(*(_QWORD *)(v1230 + 72) + 12) + 1;
          goto LABEL_1939;
        case 0x16F:
          v1232 = *(_DWORD *)(*(_QWORD *)(v1230 + 72) + 12);
LABEL_1939:
          if (v1232)
          {
LABEL_1254:
            v1233 = 0;
            v1234 = 0;
            v1235 = (v1223 + 1);
            v1236 = (uint64_t *)(v1230 + 72);
            v1237 = HIDWORD(v2259);
            v1238 = v2258;
            do
            {
              v1239 = *(unsigned __int16 *)(v1230 + 18);
              if (v1239 == 366)
              {
                v1248 = (_QWORD *)*v1236;
                v1249 = *(_DWORD *)(*v1236 + 12);
                if (v1249 <= v1233)
                {
                  if (v1249 != v1233)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984DE6F0);
                  }
                  v1240 = (uint64_t)(v1248 + 2);
                }
                else
                {
                  v1240 = *v1248 + 32 * v1234 + 16;
                }
              }
              else if (v1239 == 367)
              {
                if (*(_DWORD *)(*v1236 + 12) <= v1233)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DF138);
                }
                v1240 = *(_QWORD *)*v1236 + 8 * v1234;
              }
              else if (v1233)
              {
                if (v1233 != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984DECF0);
                }
                v1240 = *v1236 + 16;
              }
              else
              {
                v1240 = v1230 + 72;
                if (v1239 != 364)
                  v1240 = *v1236;
              }
              v1241 = *(_QWORD *)v1240;
              v1242 = *(unsigned int *)(*(_QWORD *)v1240 + 8);
              v1243 = this;
              if (*((unsigned int *)this + 31) <= v1242)
              {
                __break(0xC471u);
                JUMPOUT(0x1984DF040);
              }
              v1244 = *((_QWORD *)this + 14) + 24 * v1242;
              v1245 = *(unsigned int *)(v1244 + 20);
              if ((_DWORD)v1245)
              {
                v1673 = *(_QWORD *)(v1244 + 8);
                v1674 = 8 * v1245;
                do
                {
                  v1675 = *(unsigned int *)(**(_QWORD **)v1673 + 16);
                  if (v1237 <= v1675)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984DF128);
                  }
                  v2221 = *(_QWORD *)(*(_QWORD *)v1673 + 16);
                  v1677 = v2265;
                  if ((v2265 & 1) != 0)
                  {
                    v2210 = v1676;
                    v2199 = *(_QWORD *)(v2265 & 0xFFFFFFFF8);
                    if ((v2265 & 2) != 0
                      || ((v2083 = *(unsigned int *)((v2265 & 0xFFFFFFFF8) + 8),
                           v2190 = v2083,
                           (_DWORD)v2083 != 0x3FFFFFFF)
                        ? (v2084 = (_DWORD)v2083 == -1)
                        : (v2084 = 1),
                          v2084))
                    {
                      v2085 = 2;
                    }
                    else if (v2083 >> 28)
                    {
                      v2136 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v2136 = v2199;
                      *(_DWORD *)(v2136 + 8) = v2190;
                      v2085 = 1;
                      v2199 = v2136;
                    }
                    else
                    {
                      v2085 = *(_QWORD *)(v2265 & 0xFFFFFFFF8);
                      v2199 = v2083 << 36;
                    }
                    v1677 = v2199 | v2085;
                    v1676 = v2210;
                  }
                  v2224 = v1677;
                  v1678 = *((_QWORD *)&v2265 + 1);
                  if ((BYTE8(v2265) & 1) != 0)
                  {
                    v2211 = v1676;
                    v2200 = *(_QWORD *)(*((_QWORD *)&v2265 + 1) & 0xFFFFFFFF8);
                    if ((BYTE8(v2265) & 2) != 0
                      || ((v2086 = *(unsigned int *)((*((_QWORD *)&v2265 + 1) & 0xFFFFFFFF8) + 8),
                           v2191 = v2086,
                           (_DWORD)v2086 != 0x3FFFFFFF)
                        ? (v2087 = (_DWORD)v2086 == -1)
                        : (v2087 = 1),
                          v2087))
                    {
                      v2088 = 2;
                    }
                    else if (v2086 >> 28)
                    {
                      v2137 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v2137 = v2200;
                      *(_DWORD *)(v2137 + 8) = v2191;
                      v2088 = 1;
                      v2200 = v2137;
                    }
                    else
                    {
                      v2088 = *(_QWORD *)(*((_QWORD *)&v2265 + 1) & 0xFFFFFFFF8);
                      v2200 = v2086 << 36;
                    }
                    v1678 = v2200 | v2088;
                    v1676 = v2211;
                  }
                  v2225 = v1678;
                  v2226 = v2266[0];
                  v1679 = 0xC4000000000000;
                  if ((*((_DWORD *)v1676 + 14) & 7) != 3)
                    v1679 = 0;
                  v1680 = 0xD0000000000000;
                  if ((*((_DWORD *)v1676 + 14) & 7) != 5)
                    v1680 = v1679;
                  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)v2153, v1235, 0, 0x1Au, (uint64_t)&v2224, v2221, v1680 | (unint64_t)v1676 & 0xFF00FFFFFFFFFFFFLL);
                  if ((v2225 & 1) != 0 && (v2225 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v2225 & 0xFFFFFFFF8, v1681, v1682, v1683, v1684, v1685, v1686, v1687);
                  if ((v2224 & 1) != 0 && (v2224 & 0xFFFFFFFF8) != 0)
                    WTF::fastFree(v2224 & 0xFFFFFFFF8, v1681, v1682, v1683, v1684, v1685, v1686, v1687);
                  v1673 += 8;
                  v1674 -= 8;
                }
                while (v1674);
                v1242 = *(unsigned int *)(v1241 + 8);
                v1243 = this;
              }
              if (*((unsigned int *)v1243 + 47) <= v1242)
              {
                __break(0xC471u);
                JUMPOUT(0x1984DF048);
              }
              v1246 = *((_QWORD *)v1243 + 22) + 24 * v1242;
              v1247 = *(unsigned int *)(v1246 + 20);
              if ((_DWORD)v1247)
              {
                v1858 = *(_QWORD *)(v1246 + 8);
                v1859 = 8 * v1247;
                do
                {
                  v1860 = *(unsigned int *)(**(_QWORD **)v1858 + 16);
                  if (HIDWORD(v2261) <= v1860)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984DF130);
                  }
                  v2222 = *(_QWORD *)(*(_QWORD *)v1858 + 16);
                  JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v2223, (const JSC::DFG::NodeOrigin *)&v2265);
                  v1862 = 0xC4000000000000;
                  if ((*((_DWORD *)Materialization + 14) & 7) != 3)
                    v1862 = 0;
                  v1863 = 0xD0000000000000;
                  if ((*((_DWORD *)Materialization + 14) & 7) != 5)
                    v1863 = v1862;
                  JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)v2153, v1235, 0, 0x1Au, (uint64_t)v2223, v2222, v1863 | (unint64_t)Materialization & 0xFF00FFFFFFFFFFFFLL);
                  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v2223, v1864, v1865, v1866, v1867, v1868, v1869, v1870);
                  v1858 += 8;
                  v1859 -= 8;
                }
                while (v1859);
              }
              v1233 = v1234 + 1;
              v1234 = (v1234 + 1);
              v105 = this;
            }
            while (v1232 != v1233);
            v1227 = v2268[0];
          }
          break;
        default:
          break;
      }
      JSC::DFG::InsertionSet::execute(v2153, v1227);
      if ((BYTE8(v2265) & 1) != 0 && (*((_QWORD *)&v2265 + 1) & 0xFFFFFFFF8) != 0)
        WTF::fastFree(*((_QWORD *)&v2265 + 1) & 0xFFFFFFFF8, v843, v844, v845, v846, v847, v848, v849);
      v851 = v2168;
      if ((v2265 & 1) != 0 && (v2265 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v2265 & 0xFFFFFFFF8, v843, v844, v845, v846, v847, v848, v849);
      v850 = (WTF *)((char *)v2160 + 8);
      if ((WTF *)((char *)v2160 + 8) == v2155)
      {
        v850 = v2263;
        break;
      }
    }
  }
  if (v850)
  {
    v2263 = 0;
    LODWORD(v2264) = 0;
    WTF::fastFree((unint64_t)v850, v843, v844, v845, v846, v847, v848, v849);
  }
  if (*((_QWORD *)&v2252 + 1))
    WTF::fastFree(*((_QWORD *)&v2252 + 1) - 16, v843, v844, v845, v846, v847, v848, v849);
  v1250 = v2251;
  if ((_QWORD)v2251)
  {
    *(_QWORD *)&v2251 = 0;
    DWORD2(v2251) = 0;
    WTF::fastFree(v1250, v843, v844, v845, v846, v847, v848, v849);
  }
  if ((v2148 & 1) == 0)
  {
    v1251 = 8 * v2147;
    v1252 = v2149;
    do
    {
      if (*(_QWORD *)v1252)
        WTF::fastFree(*(_QWORD *)v1252 - 16, v843, v844, v845, v846, v847, v848, v849);
      v1252 = (WTF *)((char *)v1252 + 8);
      v1251 -= 8;
    }
    while (v1251);
  }
  if (v2149)
    WTF::fastFree((unint64_t)v2149, v843, v844, v845, v846, v847, v848, v849);
  if (v2257)
    WTF::fastFree(v2257 - 16, v843, v844, v845, v846, v847, v848, v849);
  if (v2258)
    WTF::fastFree((unint64_t)v2258, v843, v844, v845, v846, v847, v848, v849);
  v1253 = v2260;
  if (v2260)
  {
    v2260 = 0;
    LODWORD(v2261) = 0;
    WTF::fastFree((unint64_t)v1253, v843, v844, v845, v846, v847, v848, v849);
  }
  if (v2262)
    WTF::fastFree((unint64_t)v2262 - 16, v843, v844, v845, v846, v847, v848, v849);
}

uint64_t JSC::DFG::`anonymous namespace'::LocalHeap::operator==(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  int *v44;
  int v45;
  int v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  int v63;
  uint64_t v64;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    v7 = *(_DWORD *)(v6 - 12);
  else
    v7 = 0;
  if (a3)
    v8 = *(_DWORD *)(a3 - 12);
  else
    v8 = 0;
  if (v7 != v8)
    return 0;
  if (v6)
    v9 = v6 + 48 * *(unsigned int *)(v6 - 4);
  else
    v9 = 0;
  if (a3)
    v10 = (uint64_t *)(a3 + 48 * *(unsigned int *)(a3 - 4));
  else
    v10 = 0;
  if (!v6)
  {
    v11 = 0;
    LODWORD(v12) = 0;
LABEL_12:
    v13 = v6 + 48 * v12;
    v6 = v11;
    goto LABEL_13;
  }
  v12 = *(unsigned int *)(v6 - 4);
  v13 = v6 + 48 * v12;
  if (!*(_DWORD *)(v6 - 12))
  {
    v11 = v6 + 48 * v12;
    goto LABEL_12;
  }
  if ((_DWORD)v12)
  {
    v50 = 48 * v12;
    while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
    {
      v6 += 48;
      v50 -= 48;
      if (!v50)
      {
        v6 = v13;
        break;
      }
    }
  }
LABEL_13:
  if (v9 != v6)
  {
    while (1)
    {
      if (a3)
      {
        v24 = *(_DWORD *)(a3 - 8);
        v25 = ~(*(_QWORD *)v6 << 32) + *(_QWORD *)v6;
        v26 = (v25 ^ (v25 >> 22)) + ~((v25 ^ (v25 >> 22)) << 13);
        v27 = (9 * (v26 ^ (v26 >> 8))) ^ ((9 * (v26 ^ (v26 >> 8))) >> 15);
        v28 = v24 & (((v27 + ~(v27 << 27)) >> 31) ^ (v27 + ~((_DWORD)v27 << 27)));
        v29 = (uint64_t *)(a3 + 48 * v28);
        v30 = *v29;
        if (*v29 != *(_QWORD *)v6)
        {
          v63 = 1;
          while (v30)
          {
            v28 = (v28 + v63) & v24;
            v29 = (uint64_t *)(a3 + 48 * v28);
            v30 = *v29;
            ++v63;
            if (*v29 == *(_QWORD *)v6)
              goto LABEL_45;
          }
          v29 = (uint64_t *)(a3 + 48 * *(unsigned int *)(a3 - 4));
        }
      }
      else
      {
        v29 = 0;
      }
LABEL_45:
      if (v29 == v10 || *(_QWORD *)(v6 + 8) != v29[1] || *(_DWORD *)(v6 + 16) != *((_DWORD *)v29 + 4))
        return 0;
      v31 = *(_QWORD *)(v6 + 24);
      v32 = v31 ? *(_DWORD *)(v31 - 12) : 0;
      v33 = v29[3];
      v34 = v33 ? *(_DWORD *)(v33 - 12) : 0;
      if (v32 != v34)
        return 0;
      v35 = v31 ? v31 + 16 * *(unsigned int *)(v31 - 4) : 0;
      v36 = v33 ? v33 + 16 * *(unsigned int *)(v33 - 4) : 0;
      if (!v31)
        break;
      v38 = *(unsigned int *)(v31 - 4);
      v39 = v31 + 16 * v38;
      if (!*(_DWORD *)(v31 - 12))
      {
        v37 = v31 + 16 * v38;
        goto LABEL_59;
      }
      if ((_DWORD)v38)
      {
        v41 = 16 * v38;
        while (!*(_DWORD *)v31)
        {
          v31 += 16;
          v41 -= 16;
          if (!v41)
          {
            v31 = v39;
            break;
          }
        }
      }
LABEL_60:
      if (v35 != v31)
      {
        if (v33)
        {
          v62 = *(_DWORD *)(v33 - 8);
          while (1)
          {
            v42 = *(_DWORD *)(v31 + 4);
            v43 = (v42 + *(_DWORD *)v31) & v62;
            v44 = (int *)(v33 + 16 * v43);
            v46 = *v44;
            v45 = v44[1];
            if (*v44 != *(_DWORD *)v31 || v45 != v42)
            {
              v48 = 1;
              while (v46 | v45)
              {
                v43 = (v43 + v48) & v62;
                v44 = (int *)(v33 + 16 * v43);
                v46 = *v44;
                v45 = v44[1];
                ++v48;
                if (*v44 == *(_DWORD *)v31 && v45 == v42)
                  goto LABEL_87;
              }
              v44 = (int *)(v33 + 16 * *(unsigned int *)(v33 - 4));
            }
LABEL_87:
            if (v44 == (int *)v36 || *(_QWORD *)(v31 + 8) != *((_QWORD *)v44 + 1))
              break;
            v49 = v31 + 16;
            v31 = v39;
            if (v49 != v39)
            {
              v31 = v49;
              while (!*(_DWORD *)v31)
              {
                v31 += 16;
                if (v31 == v39)
                {
                  v31 = v39;
                  break;
                }
              }
            }
            if (v31 == v35)
              goto LABEL_61;
          }
        }
        else if (v36)
        {
          while (*(_QWORD *)(v31 + 8) == MEMORY[8])
          {
            v64 = v31 + 16;
            v31 = v39;
            if (v64 != v39)
            {
              v31 = v64;
              while (!*(_DWORD *)v31)
              {
                v31 += 16;
                if (v31 == v39)
                {
                  v31 = v39;
                  break;
                }
              }
            }
            if (v31 == v35)
              goto LABEL_61;
          }
        }
        return 0;
      }
LABEL_61:
      result = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::operator==(*(_QWORD *)(v6 + 32), v29[4]);
      if (!(_DWORD)result)
        return result;
      result = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::operator==(*(_QWORD *)(v6 + 40), v29[5]);
      if (!(_DWORD)result)
        return result;
      v40 = v6 + 48;
      v6 = v13;
      if (v40 != v13)
      {
        v6 = v40;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 48;
          if (v6 == v13)
          {
            v6 = v13;
            break;
          }
        }
      }
      if (v6 == v9)
        goto LABEL_14;
    }
    v37 = 0;
    v38 = 0;
LABEL_59:
    v39 = v31 + 16 * v38;
    v31 = v37;
    goto LABEL_60;
  }
LABEL_14:
  v14 = *(_QWORD **)(a1 + 8);
  if (v14)
    v15 = *((_DWORD *)v14 - 3);
  else
    v15 = 0;
  if (a2)
    v16 = *(_DWORD *)(a2 - 12);
  else
    v16 = 0;
  if (v15 != v16)
    return 0;
  if (v14)
    v17 = &v14[2 * *((unsigned int *)v14 - 1)];
  else
    v17 = 0;
  if (a2)
    v18 = a2 + 16 * *(unsigned int *)(a2 - 4);
  else
    v18 = 0;
  if (!v14)
  {
    v19 = 0;
    v20 = 0;
LABEL_25:
    v21 = &v14[2 * v20];
    v14 = v19;
    goto LABEL_26;
  }
  v20 = *((unsigned int *)v14 - 1);
  v21 = &v14[2 * v20];
  if (!*((_DWORD *)v14 - 3))
  {
    v19 = &v14[2 * v20];
    goto LABEL_25;
  }
  if ((_DWORD)v20)
  {
    v23 = 16 * v20;
    while ((unint64_t)(*v14 + 1) <= 1)
    {
      v14 += 2;
      v23 -= 16;
      if (!v23)
      {
        v14 = v21;
        break;
      }
    }
  }
LABEL_26:
  if (v17 == v14)
    return 1;
  if (a2)
  {
    v53 = *(_DWORD *)(a2 - 8);
    result = 1;
    while (1)
    {
      v54 = ~(*v14 << 32) + *v14;
      v55 = (v54 ^ (v54 >> 22)) + ~((v54 ^ (v54 >> 22)) << 13);
      v56 = (9 * (v55 ^ (v55 >> 8))) ^ ((9 * (v55 ^ (v55 >> 8))) >> 15);
      v57 = v53 & (((v56 + ~(v56 << 27)) >> 31) ^ ((_DWORD)v56 + ~((_DWORD)v56 << 27)));
      v58 = *(_QWORD *)(a2 + 16 * v57);
      if (v58 != *v14)
      {
        v59 = 1;
        while (v58)
        {
          v57 = ((_DWORD)v57 + v59) & v53;
          v58 = *(_QWORD *)(a2 + 16 * v57);
          ++v59;
          if (v58 == *v14)
            goto LABEL_119;
        }
        v57 = *(unsigned int *)(a2 - 4);
      }
LABEL_119:
      v60 = a2 + 16 * v57;
      if (v60 == v18 || v14[1] != *(_QWORD *)(v60 + 8))
        return 0;
      v61 = v14 + 2;
      v14 = v21;
      if (v61 != v21)
      {
        v14 = v61;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 2;
          if (v14 == v21)
          {
            v14 = v21;
            break;
          }
        }
      }
      if (v14 == v17)
        return result;
    }
  }
  if (!v18)
    return 0;
  do
  {
    v51 = v14[1];
    result = v51 == MEMORY[8];
    if (v51 != MEMORY[8])
      break;
    v52 = v14 + 2;
    v14 = v21;
    if (v52 != v21)
    {
      v14 = v52;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        v14 += 2;
        if (v14 == v21)
        {
          v14 = v21;
          break;
        }
      }
    }
  }
  while (v14 != v17);
  return result;
}

void JSC::DFG::`anonymous namespace'::LocalHeap::pruneByLiveness(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  int v28;

  v11 = a1[1];
  v9 = a1 + 1;
  v10 = v11;
  if (!v11)
    goto LABEL_21;
  v12 = *(_DWORD *)(v10 - 4);
  if (!v12)
    goto LABEL_21;
  v13 = 0;
  do
  {
    v14 = (uint64_t *)(v10 + 16 * --v12);
    v15 = *v14;
    if ((unint64_t)(*v14 + 1) < 2)
      continue;
    v16 = *a2;
    if (*a2)
    {
      v17 = *(_DWORD *)(v16 - 8);
      v18 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
      v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
      v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
      v21 = v17 & ((v20 >> 31) ^ v20);
      a3 = *(_QWORD *)(v16 + 8 * v21);
      if (a3 == v15)
        continue;
      v22 = 1;
      while (a3)
      {
        v21 = (v21 + v22) & v17;
        a3 = *(_QWORD *)(v16 + 8 * v21);
        ++v22;
        if (a3 == v15)
          goto LABEL_5;
      }
    }
    *v14 = -1;
    ++v13;
LABEL_5:
    ;
  }
  while (v12);
  v23 = *v9;
  if (v13)
  {
    *(_DWORD *)(v23 - 16) += v13;
    v27 = *v9;
    if (*v9)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    *(_DWORD *)(v27 - 12) = v28 - v13;
    v23 = *v9;
  }
  if (v23)
  {
    v24 = *(_DWORD *)(v23 - 4);
    v25 = 6 * *(_DWORD *)(v23 - 12);
    if (v24 >= 9 && v25 < v24)
      WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::shrinkToBestSize(v9);
  }
LABEL_21:
}

uint64_t *WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits>::operator=(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;

  if (!*a2 || (v12 = *(unsigned int *)(*a2 - 12), !(_DWORD)v12))
  {
    v9 = 0;
    goto LABEL_3;
  }
  v14 = (v12 - 1) | ((v12 - 1) >> 1) | ((((_DWORD)v12 - 1) | ((v12 - 1) >> 1)) >> 2);
  v15 = v14 | (v14 >> 4) | ((v14 | (v14 >> 4)) >> 8);
  v16 = (v15 | HIWORD(v15)) + 1;
  if (v16 > 0x400)
  {
    if (v16 > 2 * v12)
      goto LABEL_51;
  }
  else if (3 * v16 > 4 * v12)
  {
LABEL_9:
    v17 = (double)v12;
    v18 = (double)v16;
    v19 = 0.604166667;
    goto LABEL_10;
  }
  LODWORD(v16) = 2 * v16;
  if (v16 <= 0x400)
    goto LABEL_9;
LABEL_51:
  v17 = (double)v12;
  v18 = (double)v16;
  v19 = 0.416666667;
LABEL_10:
  if (v18 * v19 <= v17)
    LODWORD(v16) = 2 * v16;
  if (v16 <= 8)
    v20 = 8;
  else
    v20 = v16;
  v21 = 48 * v20;
  v22 = (_DWORD *)WTF::fastMalloc((WTF *)(v21 + 16));
  v23 = v22;
  v24 = 0;
  v9 = v22 + 4;
  do
  {
    v25 = &v22[v24 / 4];
    *((_QWORD *)v25 + 5) = 0;
    *((_QWORD *)v25 + 6) = 0;
    *((_QWORD *)v25 + 7) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *((_QWORD *)v25 + 3) = 0;
    v24 += 48;
    v25[8] = 0;
  }
  while (v21 != v24);
  v22[2] = v20 - 1;
  v22[3] = v20;
  *v22 = 0;
  v22[1] = v12;
  v26 = (_QWORD *)*a2;
  if (*a2)
  {
    v28 = *((unsigned int *)v26 - 1);
    v29 = &v26[6 * v28];
    if (*((_DWORD *)v26 - 3))
    {
      v27 = v26;
      if ((_DWORD)v28)
      {
        v44 = 48 * v28;
        v27 = v26;
        while ((unint64_t)(*v27 + 1) <= 1)
        {
          v27 += 6;
          v44 -= 48;
          if (!v44)
          {
            v27 = v29;
            goto LABEL_20;
          }
        }
      }
      goto LABEL_20;
    }
    v27 = &v26[6 * v28];
  }
  else
  {
    v27 = 0;
    LODWORD(v28) = 0;
  }
  v29 = &v26[6 * v28];
LABEL_20:
  if (v26)
    v30 = &v26[6 * *((unsigned int *)v26 - 1)];
  else
    v30 = 0;
  while (v27 != v30)
  {
    v35 = v23[2];
    v36 = ~(*v27 << 32) + *v27;
    v37 = (v36 ^ (v36 >> 22)) + ~((v36 ^ (v36 >> 22)) << 13);
    v38 = (9 * (v37 ^ (v37 >> 8))) ^ ((9 * (v37 ^ (v37 >> 8))) >> 15);
    v39 = v35 & (((v38 + ~(v38 << 27)) >> 31) ^ (v38 + ~((_DWORD)v38 << 27)));
    v40 = 1;
    do
    {
      v41 = v39;
      v42 = &v9[12 * v39];
      v39 = (v39 + v40++) & v35;
    }
    while (*v42);
    *v42 = *v27;
    v43 = v27 + 6;
    v27 = v29;
    if (v43 != v29)
    {
      v27 = v43;
      while ((unint64_t)(*v27 + 1) <= 1)
      {
        v27 += 6;
        if (v27 == v29)
        {
          v27 = v29;
          break;
        }
      }
    }
  }
LABEL_3:
  v10 = *a1;
  *a1 = (uint64_t)v9;
  if (v10)
  {
    v31 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v31)
    {
      v32 = (_QWORD *)(v10 + 40);
      do
      {
        if (*(v32 - 5) != -1)
        {
          if ((*v32 & 1) != 0)
            WTF::fastFree(*v32 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v33 = *(v32 - 1);
          if ((v33 & 1) != 0)
            WTF::fastFree(v33 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v34 = *(v32 - 2);
          if (v34)
            WTF::fastFree(v34 - 16, a2, a3, a4, a5, a6, a7, a8);
        }
        v32 += 6;
        --v31;
      }
      while (v31);
    }
    WTF::fastFree(v10 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::~HashTable(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *a1;
  if (*a1)
  {
    v11 = *(unsigned int *)(v9 - 4);
    if ((_DWORD)v11)
    {
      v12 = (_QWORD *)(v9 + 40);
      do
      {
        if (*(v12 - 5) != -1)
        {
          if ((*v12 & 1) != 0)
            WTF::fastFree(*v12 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v13 = *(v12 - 1);
          if ((v13 & 1) != 0)
            WTF::fastFree(v13 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v14 = *(v12 - 2);
          if (v14)
            WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
        }
        v12 += 6;
        --v11;
      }
      while (v11);
    }
    WTF::fastFree(v9 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::DFG::`anonymous namespace'::Allocation::operator=(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  unsigned int v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;

  v10 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v10;
  v11 = a2[2];
  if (!v11 || (v27 = *(unsigned int *)(v11 - 12), !(_DWORD)v27))
  {
    v12 = 0;
    goto LABEL_3;
  }
  v28 = (v27 - 1) | ((v27 - 1) >> 1) | ((((_DWORD)v27 - 1) | ((v27 - 1) >> 1)) >> 2);
  v29 = v28 | (v28 >> 4) | ((v28 | (v28 >> 4)) >> 8);
  v30 = (v29 | HIWORD(v29)) + 1;
  if (v30 > 0x400)
  {
    if (v30 > 2 * v27)
      goto LABEL_54;
  }
  else if (3 * v30 > 4 * v27)
  {
LABEL_23:
    v31 = (double)v27;
    v32 = (double)v30;
    v33 = 0.604166667;
    goto LABEL_24;
  }
  LODWORD(v30) = 2 * v30;
  if (v30 <= 0x400)
    goto LABEL_23;
LABEL_54:
  v31 = (double)v27;
  v32 = (double)v30;
  v33 = 0.416666667;
LABEL_24:
  if (v32 * v33 <= v31)
    LODWORD(v30) = 2 * v30;
  if (v30 <= 8)
    v34 = 8;
  else
    v34 = v30;
  v35 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * v34 + 16));
  v12 = v35 + 4;
  bzero(v35 + 4, 16 * v34);
  v35[2] = v34 - 1;
  v35[3] = v34;
  *v35 = 0;
  v35[1] = v27;
  v36 = (_DWORD *)a2[2];
  if (v36)
  {
    v38 = *(v36 - 1);
    v39 = &v36[4 * v38];
    if (*(v36 - 3))
    {
      v37 = (_DWORD *)a2[2];
      if ((_DWORD)v38)
      {
        v45 = 16 * v38;
        v37 = (_DWORD *)a2[2];
        while (!*v37)
        {
          v37 += 4;
          v45 -= 16;
          if (!v45)
          {
            v37 = v39;
            goto LABEL_32;
          }
        }
      }
      goto LABEL_32;
    }
    v37 = &v36[4 * v38];
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
  v39 = &v36[4 * v38];
LABEL_32:
  if (v36)
    v36 += 4 * *(v36 - 1);
  if (v36 != v37)
  {
    if (v35 == (_DWORD *)-16)
    {
      while (1)
        ;
    }
    do
    {
      v40 = v35[2];
      v41 = (v37[1] + *v37) & v40;
      v42 = &v12[4 * v41];
      if (*v42)
      {
        v44 = 1;
        do
        {
          v41 = (v41 + v44) & v40;
          v42 = &v12[4 * v41];
          ++v44;
        }
        while (*v42);
      }
      *(_OWORD *)v42 = *(_OWORD *)v37;
      v43 = v37 + 4;
      v37 = v39;
      if (v43 != v39)
      {
        v37 = v43;
        while (!*v37)
        {
          v37 += 4;
          if (v37 == v39)
          {
            v37 = v39;
            break;
          }
        }
      }
    }
    while (v37 != v36);
  }
LABEL_3:
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  if (v13)
    WTF::fastFree(v13 - 16, a2, a3, a4, a5, a6, a7, a8);
  if ((_QWORD *)a1 != a2)
  {
    v14 = (_BYTE *)(a1 + 24);
    v15 = a2 + 3;
    v16 = *(_QWORD *)(a1 + 24);
    if ((v16 & 1) != 0)
      WTF::fastFree(v16 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v17 = *v15;
    if ((*v15 & 1) == 0 || v17 == 4)
    {
      v18 = v17 & 0xFFFFFFFFFFFFFFFDLL;
      v19 = v17 | 2;
      if ((*v14 & 2) == 0)
        v19 = v18;
      *(_QWORD *)v14 = v19;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(a1 + 24), a2 + 3);
    }
    v21 = (_BYTE *)(a1 + 32);
    v20 = *(_QWORD *)(a1 + 32);
    v22 = a2 + 4;
    if ((v20 & 1) != 0)
      WTF::fastFree(v20 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v23 = *v22;
    if ((*v22 & 1) == 0 || v23 == 4)
    {
      v24 = v23 & 0xFFFFFFFFFFFFFFFDLL;
      v25 = v23 | 2;
      if ((*v21 & 2) == 0)
        v25 = v24;
      *(_QWORD *)v21 = v25;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(a1 + 32), v22);
    }
  }
  return a1;
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v10 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v10;
  v11 = a2[2];
  a2[2] = 0;
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  if (v12)
    WTF::fastFree(v12 - 16, a2, a3, a4, a5, a6, a7, a8);
  if ((_QWORD *)a1 != a2)
  {
    v13 = (_BYTE *)(a1 + 24);
    v14 = a2 + 3;
    v15 = *(_QWORD *)(a1 + 24);
    if ((v15 & 1) != 0)
      WTF::fastFree(v15 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v16 = *v14;
    if ((*v14 & 1) == 0 || v16 == 4)
    {
      v17 = v16 & 0xFFFFFFFFFFFFFFFDLL;
      v18 = v16 | 2;
      if ((*v13 & 2) == 0)
        v18 = v17;
      *(_QWORD *)v13 = v18;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(a1 + 24), a2 + 3);
    }
    v20 = (_BYTE *)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 32);
    v21 = a2 + 4;
    if ((v19 & 1) != 0)
      WTF::fastFree(v19 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v22 = *v21;
    if ((*v21 & 1) == 0 || v22 == 4)
    {
      v23 = v22 & 0xFFFFFFFFFFFFFFFDLL;
      v24 = v22 | 2;
      if ((*v20 & 2) == 0)
        v24 = v23;
      *(_QWORD *)v20 = v24;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(a1 + 32), v21);
    }
  }
  return a1;
}

uint64_t *JSC::DFG::`anonymous namespace'::LocalHeap::newAllocation(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = a2;
  WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>((uint64_t *)(a1 + 8), &v49, &v49, a4, a5, a6, a7, a8, (uint64_t)&v44);
  v18 = *(_QWORD *)(a1 + 16);
  v17 = (uint64_t *)(a1 + 16);
  v16 = v18;
  v44 = v49;
  v45 = a3;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  if (v18
  {
    v19 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = v49;
  v21 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
  v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
  v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
  v24 = v19 & ((v23 >> 31) ^ v23);
  v25 = (uint64_t *)(v16 + 48 * v24);
  v26 = *v25;
  if (*v25)
  {
    v41 = 0;
    v42 = 1;
    do
    {
      if (v26 == v49)
      {
        goto LABEL_11;
      }
      if (v26 == -1)
        v41 = v25;
      v24 = (v24 + v42) & v19;
      v25 = (uint64_t *)(v16 + 48 * v24);
      v26 = *v25;
      ++v42;
    }
    while (*v25);
    if (v41)
    {
      v41[3] = 0;
      v41[4] = 0;
      v41[5] = 0;
      *v41 = 0;
      v41[1] = 0;
      *((_DWORD *)v41 + 4) = 0;
      --*(_DWORD *)(*v17 - 16);
      v25 = v41;
    }
  }
  *v25 = v20;
  v34 = *v17;
  if (*v17)
    v35 = *(_DWORD *)(v34 - 12) + 1;
  else
    v35 = 1;
  *(_DWORD *)(v34 - 12) = v35;
  v36 = *v17;
  if (*v17)
    v37 = *(_DWORD *)(v36 - 12);
  else
    v37 = 0;
  v38 = (*(_DWORD *)(v36 - 16) + v37);
  v39 = *(unsigned int *)(v36 - 4);
  if (v39 > 0x400)
  {
    if (v39 > 2 * v38)
      goto LABEL_11;
  }
  else
  {
    if (3 * v39 > 4 * v38)
      goto LABEL_11;
    if (!(_DWORD)v39)
    {
      v43 = 8;
      goto LABEL_31;
    }
  }
  v43 = (_DWORD)v39 << (6 * *(_DWORD *)(v36 - 12) >= (2 * v39));
LABEL_31:
LABEL_11:
  if ((v48 & 1) != 0)
    WTF::fastFree(v48 & 0xFFFFFFFFFFFFFFFCLL, v27, v28, v29, v30, v31, v32, v33);
  if ((v47 & 1) != 0)
    WTF::fastFree(v47 & 0xFFFFFFFFFFFFFFFCLL, v27, v28, v29, v30, v31, v32, v33);
  if (v46)
    WTF::fastFree(v46 - 16, v27, v28, v29, v30, v31, v32, v33);
  return v25 + 1;
}

uint64_t JSC::DFG::`anonymous namespace'::Allocation::setStructures(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v10 = (uint64_t *)(a1 + 24);
  if ((uint64_t *)(a1 + 24) != a2)
  {
    if ((*v10 & 1) != 0)
      WTF::fastFree(*v10 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v11 = *a2;
    if ((*a2 & 1) == 0 || v11 == 4)
    {
      v12 = v11 & 0xFFFFFFFFFFFFFFFDLL;
      v13 = v11 | 2;
      if ((*(_BYTE *)v10 & 2) == 0)
        v13 = v12;
      *v10 = v13;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v10, a2);
    }
  }
  v14 = (uint64_t *)(a1 + 32);
  if ((uint64_t *)(a1 + 32) != a2)
  {
    if ((*v14 & 1) != 0)
      WTF::fastFree(*v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v15 = *a2;
    if ((*a2 & 1) == 0 || v15 == 4)
    {
      v16 = v15 & 0xFFFFFFFFFFFFFFFDLL;
      v17 = v15 | 2;
      if ((*(_BYTE *)v14 & 2) == 0)
        v17 = v16;
      *v14 = v17;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)(a1 + 32), a2);
    }
  }
  return a1;
}

unint64_t WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>(uint64_t a1, uint64_t *a2, _DWORD *a3, _OWORD *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  int v14;
  int v15;
  unint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = (v11 + *a3) & v10;
  v13 = (_QWORD *)(v8 + 24 * v12);
  v14 = *(_DWORD *)v13;
  v15 = *((_DWORD *)v13 + 1);
  result = *(_DWORD *)v13 == 0;
  if (*v13)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v14 == *a3 && v15 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(_DWORD *)(v8 - 4);
        v24 = 0;
        v23 = v8 + 24 * v27;
        goto LABEL_12;
      }
      if ((result & (v15 != 0)) != 0)
        v25 = v13;
      v12 = (v12 + v26) & v10;
      v13 = (_QWORD *)(v8 + 24 * v12);
      v14 = *(_DWORD *)v13;
      v15 = *((_DWORD *)v13 + 1);
      result = *(_DWORD *)v13 == 0;
      ++v26;
    }
    while (*v13);
    if (v25)
    {
      *v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v13 = v25;
    }
  }
  *v13 = *(_QWORD *)a3;
  *(_OWORD *)(v13 + 1) = *a4;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_11;
LABEL_14:
    result = (unint64_t)WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::expand(a2, (__int128 *)v13);
    v13 = (_QWORD *)result;
    v19 = *a2;
    if (*a2)
      LODWORD(v22) = *(_DWORD *)(v19 - 4);
    else
      LODWORD(v22) = 0;
    goto LABEL_11;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_14;
LABEL_11:
  v23 = v19 + 24 * v22;
  v24 = 1;
LABEL_12:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

void JSC::DFG::`anonymous namespace'::LocalHeap::escape(JSC::DFG::_anonymous_namespace_::LocalHeap *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  JSC::DFG::Node *v14;
  int v15;
  JSC::DFG::Node *v16;

  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(JSC::DFG::Node **)(v8 + 16 * v13);
    if (v14 != a2)
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(JSC::DFG::Node **)(v8 + 16 * v13);
        ++v15;
        if (v14 == a2)
          goto LABEL_9;
      }
      v13 = *(unsigned int *)(v8 - 4);
    }
LABEL_9:
    if (v13 != *(_DWORD *)(v8 - 4))
    {
      v16 = *(JSC::DFG::Node **)(v8 + 16 * v13 + 8);
      if (v16)
    }
  }
}

uint64_t *JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::handleInternalFieldClass<JSC::JSArrayIterator>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  _BYTE v41[24];
  __int128 v42;
  uint64_t v43;

  v43 = 13;
  v18 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 72), v12, v13, v14, v15, v16, v17);
  *(_QWORD *)&v42 = 0;
  *((_QWORD *)&v42 + 1) = v18;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v41, a3, &v43, &v42);
  v43 = 7;
  v25 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), 0xFFFE000000000000, v19, v20, v21, v22, v23, v24);
  *(_QWORD *)&v42 = 0;
  *((_QWORD *)&v42 + 1) = v25;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v41, a3, &v43, &v42);
  v43 = 0x100000007;
  v32 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), 2uLL, v26, v27, v28, v29, v30, v31);
  *(_QWORD *)&v42 = 0;
  *((_QWORD *)&v42 + 1) = v32;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v41, a3, &v43, &v42);
  v43 = 0x200000007;
  v39 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), 0xFFFE000000000000, v33, v34, v35, v36, v37, v38);
  *(_QWORD *)&v42 = 0;
  *((_QWORD *)&v42 + 1) = v39;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v41, a3, &v43, &v42);
  return v11;
}

uint64_t *JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::handleInternalFieldClass<JSC::JSMapIterator>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _BYTE v48[24];
  __int128 v49;
  uint64_t v50;

  v50 = 13;
  v18 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 72), v12, v13, v14, v15, v16, v17);
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = v18;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v48, a3, &v50, &v49);
  v50 = 7;
  v25 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), 0xFFFE000000000000, v19, v20, v21, v22, v23, v24);
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = v25;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v48, a3, &v50, &v49);
  v50 = 0x100000007;
  v32 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), 2uLL, v26, v27, v28, v29, v30, v31);
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = v32;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v48, a3, &v50, &v49);
  v50 = 0x200000007;
  v39 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), 2uLL, v33, v34, v35, v36, v37, v38);
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = v39;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v48, a3, &v50, &v49);
  v50 = 0x300000007;
  v46 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), 0xFFFE000000000000, v40, v41, v42, v43, v44, v45);
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = v46;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v48, a3, &v50, &v49);
  return v11;
}

uint64_t *JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::handleInternalFieldClass<JSC::JSInternalPromise>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  _BYTE v34[24];
  __int128 v35;
  uint64_t v36;

  v36 = 13;
  v18 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 72), v12, v13, v14, v15, v16, v17);
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = v18;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v34, a3, &v36, &v35);
  v36 = 7;
  v25 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), 0xFFFE000000000000, v19, v20, v21, v22, v23, v24);
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = v25;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v34, a3, &v36, &v35);
  v36 = 0x100000007;
  v32 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), 0xAuLL, v26, v27, v28, v29, v30, v31);
  *(_QWORD *)&v35 = 0;
  *((_QWORD *)&v35 + 1) = v32;
  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v34, a3, &v36, &v35);
  return v11;
}

unint64_t WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode&>(uint64_t a1, uint64_t *a2, _DWORD *a3, _OWORD *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  int v14;
  int v15;
  unint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = (v11 + *a3) & v10;
  v13 = (_QWORD *)(v8 + 24 * v12);
  v14 = *(_DWORD *)v13;
  v15 = *((_DWORD *)v13 + 1);
  result = *(_DWORD *)v13 == 0;
  if (*v13)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v14 == *a3 && v15 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(_DWORD *)(v8 - 4);
        v24 = 0;
        v23 = v8 + 24 * v28;
        goto LABEL_11;
      }
      if ((result & (v15 != 0)) == 1)
        v25 = v13;
      v12 = (v12 + v26) & v10;
      v13 = (_QWORD *)(v8 + 24 * v12);
      v14 = *(_DWORD *)v13;
      v15 = *((_DWORD *)v13 + 1);
      result = *(_DWORD *)v13 == 0;
      ++v26;
    }
    while (*v13);
    if (v25)
    {
      *v25 = 0;
      v25[1] = 0;
      v25[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v13 = v25;
    }
  }
  *v13 = *(_QWORD *)a3;
  *(_OWORD *)(v13 + 1) = *a4;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_10;
    goto LABEL_21;
  }
  if (3 * v22 <= 4 * v21)
  {
    if (!(_DWORD)v22)
    {
      v27 = 8;
LABEL_26:
      result = (unint64_t)WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::rehash(a2, v27, (__int128 *)v13);
      v13 = (_QWORD *)result;
      v19 = *a2;
      if (*a2)
        LODWORD(v22) = *(_DWORD *)(v19 - 4);
      else
        LODWORD(v22) = 0;
      goto LABEL_10;
    }
LABEL_21:
    v27 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
    goto LABEL_26;
  }
LABEL_10:
  v23 = v19 + 24 * v22;
  v24 = 1;
LABEL_11:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v23;
  *(_BYTE *)(a1 + 16) = v24;
  return result;
}

uint64_t *JSC::DFG::`anonymous namespace'::LocalHeap::onlyLocalAllocation(JSC::DFG::_anonymous_namespace_::LocalHeap *this, JSC::DFG::Node *a2)
{
  uint64_t v2;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  JSC::DFG::Node *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(JSC::DFG::Node **)(v2 + 16 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v4;
      v9 = *(JSC::DFG::Node **)(v2 + 16 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_9;
    }
    v8 = *(unsigned int *)(v2 - 4);
  }
LABEL_9:
  if (v8 == *(_DWORD *)(v2 - 4))
    return 0;
  v11 = *(_QWORD *)(v2 + 16 * v8 + 8);
  if (!v11)
    return 0;
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v14 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = (uint64_t *)(v12 + 48 * v17);
    v19 = *v18;
    if (*v18 != v11)
    {
      v20 = 1;
      while (v19)
      {
        v17 = (v17 + v20) & v13;
        v18 = (uint64_t *)(v12 + 48 * v17);
        v19 = *v18;
        ++v20;
        if (*v18 == v11)
          return v18 + 1;
      }
      v18 = (uint64_t *)(v12 + 48 * *(unsigned int *)(v12 - 4));
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 + 1;
}

BOOL WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::overlaps(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  _BOOL8 result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v6 = *a2;
    if ((*a2 & 1) != 0)
    {
      v14 = v2 & 0xFFFFFFFFFFFFFFFCLL;
      v15 = *(unsigned int *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
      if ((_DWORD)v15)
      {
        v16 = v6 & 0xFFFFFFFFFFFFFFFCLL;
        v17 = *(unsigned int *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if ((_DWORD)v17)
        {
          v18 = 0;
          v19 = v14 + 8;
          v20 = *(_QWORD *)(v16 + 8);
          v21 = v16 + 16;
          while (1)
          {
            v22 = *(_QWORD *)(v19 + 8 * v18);
            if (v20 == v22)
              return 1;
            v23 = 0;
            while (v17 - 1 != v23)
            {
              v24 = *(_QWORD *)(v21 + 8 * v23++);
              if (v24 == v22)
              {
                if (v23 < v17)
                  return 1;
                break;
              }
            }
            result = 0;
            if (++v18 == v15)
              return result;
          }
        }
      }
    }
    else
    {
      v7 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      if (v7)
      {
        v8 = v2 & 0xFFFFFFFFFFFFFFFCLL;
        v9 = *(unsigned int *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
        if ((_DWORD)v9)
        {
          if (*(_QWORD *)(v8 + 8) != v7)
          {
            v10 = 0;
            v11 = v8 + 16;
            while (v9 - 1 != v10)
            {
              v12 = *(_QWORD *)(v11 + 8 * v10++);
              if (v12 == v7)
                goto LABEL_12;
            }
            v10 = v9;
LABEL_12:
            v13 = v10 >= v9;
            return !v13;
          }
          return 1;
        }
      }
    }
    return 0;
  }
  v3 = v2 & 0xFFFFFFFFFFFFFFFCLL;
  if (!v3)
    return 0;
  v4 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*a2 & 1) == 0)
    return v4 == (unsigned int *)v3;
  v25 = *v4;
  if (!(_DWORD)v25)
    return 0;
  if (*((_QWORD *)v4 + 1) == v3)
    return 1;
  v26 = 0;
  v27 = v4 + 4;
  while (v25 - 1 != v26)
  {
    v28 = *(_QWORD *)&v27[2 * v26++];
    if (v28 == v3)
      goto LABEL_31;
  }
  v26 = v25;
LABEL_31:
  v13 = v26 >= v25;
  return !v13;
}

uint64_t WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::isSubsetOf(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  uint64_t result;
  uint64_t v7;
  unsigned int *v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unint64_t v24;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v7 = *a2;
    if ((*a2 & 1) == 0)
    {
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        v24 = v2 & 0xFFFFFFFFFFFFFFFCLL;
        if (*(_DWORD *)v24 <= 1u)
          return *(_QWORD *)(v24 + 8) == (v7 & 0xFFFFFFFFFFFFFFFCLL);
      }
      return 0;
    }
    v8 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    v11 = *v8;
    v9 = v8 + 2;
    v10 = v11;
    if (v11)
    {
      v12 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      v13 = *(unsigned int *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = *(_QWORD *)(v12 + 8);
        v16 = v12 + 16;
        result = 1;
        while (1)
        {
          v17 = *(_QWORD *)&v9[2 * v14];
          if (v15 != v17)
            break;
LABEL_17:
          if (++v14 == v10)
            return result;
        }
        v18 = 0;
        while (v13 - 1 != v18)
        {
          v19 = *(_QWORD *)(v16 + 8 * v18++);
          if (v19 == v17)
          {
            if (v18 >= v13)
              return 0;
            goto LABEL_17;
          }
        }
      }
      return 0;
    }
    return 1;
  }
  v3 = v2 & 0xFFFFFFFFFFFFFFFCLL;
  if (!v3)
    return 1;
  v4 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((*a2 & 1) == 0)
    return v4 == (unsigned int *)v3;
  v20 = *v4;
  if (!(_DWORD)v20)
    return 0;
  if (*((_QWORD *)v4 + 1) == v3)
    return 1;
  v21 = 0;
  v22 = v4 + 4;
  while (v20 - 1 != v21)
  {
    v23 = *(_QWORD *)&v22[2 * v21++];
    if (v23 == v3)
      return v21 < v20;
  }
  v21 = v20;
  return v21 < v20;
}

uint64_t JSC::DFG::`anonymous namespace'::Allocation::filterStructures(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::RegisteredStructureSet *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;

  v10 = (JSC::DFG::RegisteredStructureSet *)(a1 + 24);
  v28 = 0;
  v11 = *a2;
  if ((*a2 & 1) != 0 && v11 != 4)
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v28, a2);
    v11 = v28;
  }
  v28 = v11 & 0xFFFFFFFFFFFFFFFDLL;
  JSC::DFG::RegisteredStructureSet::filter(v10, (const JSC::DFG::StructureAbstractValue *)&v28, a3, a4, a5, a6, a7, a8);
  if ((v28 & 1) != 0)
    WTF::fastFree(v28 & 0xFFFFFFFFFFFFFFFCLL, v12, v13, v14, v15, v16, v17, v18);
  v28 = 0;
  v19 = *a2;
  if ((*a2 & 1) != 0 && v19 != 4)
  {
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v28, a2);
    v19 = v28;
  }
  v28 = v19 & 0xFFFFFFFFFFFFFFFDLL;
  JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)(a1 + 32), (const JSC::DFG::StructureAbstractValue *)&v28, v13, v14, v15, v16, v17, v18);
  if ((v28 & 1) != 0)
    WTF::fastFree(v28 & 0xFFFFFFFFFFFFFFFCLL, v20, v21, v22, v23, v24, v25, v26);
  if ((*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    return a1;
  result = 223;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::`anonymous namespace'::Allocation::get(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  int v8;
  int *v9;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = v2 & (HIDWORD(a2) + (_DWORD)a2);
    v4 = (int *)(result + 16 * v3);
    v5 = *v4;
    v6 = v4[1];
    if (*v4 == (_DWORD)a2 && v6 == HIDWORD(a2))
    {
      return *(_QWORD *)(result + 16 * v3 + 8);
    }
    else
    {
      v8 = 1;
      while (v5 | v6)
      {
        v3 = ((_DWORD)v3 + v8) & v2;
        v9 = (int *)(result + 16 * v3);
        v5 = *v9;
        v6 = v9[1];
        ++v8;
        if (v5 == (_DWORD)a2 && v6 == HIDWORD(a2))
          return *(_QWORD *)(result + 16 * v3 + 8);
      }
      return 0;
    }
  }
  return result;
}

uint64_t JSC::DFG::`anonymous namespace'::LocalHeap::follow(uint64_t this, JSC::DFG::Node *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  JSC::DFG::Node *v7;
  int v8;

  if (this)
  {
    v2 = *(_DWORD *)(this - 8);
    v3 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(JSC::DFG::Node **)(this + 16 * v6);
    if (v7 != a2)
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(JSC::DFG::Node **)(this + 16 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_8;
      }
      v6 = *(unsigned int *)(this - 4);
    }
LABEL_8:
    if (v6 == *(_DWORD *)(this - 4))
      return 0;
    else
      return *(_QWORD *)(this + 16 * v6 + 8);
  }
  return this;
}

uint64_t *WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v13 + 16 * v20);
  v22 = *v21;
  if (*v21)
  {
    v31 = 0;
    v32 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v33 = 0;
        else
          v33 = *(unsigned int *)(v13 - 4);
        v30 = 0;
        v29 = v13 + 16 * v33;
        goto LABEL_12;
      }
      if (v22 == -1)
        v31 = v21;
      v20 = (v20 + v32) & v15;
      v21 = (uint64_t *)(v13 + 16 * v20);
      v22 = *v21;
      ++v32;
    }
    while (*v21);
    if (v31)
    {
      *v31 = 0;
      v31[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = v31;
    }
  }
  *v21 = v16;
  v21[1] = *a3;
  v23 = *v11;
  if (*v11)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_11;
    goto LABEL_27;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v34 = 8;
LABEL_30:
      result = (uint64_t *)WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v11, v34, (uint64_t)v21, a4, a5, a6, a7, a8);
      v21 = result;
      v25 = *v11;
      if (*v11)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_11;
    }
LABEL_27:
    v34 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
    goto LABEL_30;
  }
LABEL_11:
  v29 = v25 + 16 * v28;
  v30 = 1;
LABEL_12:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v29;
  *(_BYTE *)(a9 + 16) = v30;
  return result;
}

_OWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

_OWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _OWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v24 = 0;
    v22 = 0;
    do
    {
      v25 = (_QWORD *)(v11 + 16 * v24);
      if ((unint64_t)(*v25 + 1) >= 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = (~(*v25 << 32) + *v25) ^ ((~(*v25 << 32) + *v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((unint64_t)(v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 16 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_OWORD *)(v26 + 16 * v33);
        *v35 = *(_OWORD *)v25;
        if (v25 == (_QWORD *)a3)
          v22 = v35;
      }
      ++v24;
    }
    while (v24 != v12);
    goto LABEL_16;
  }
  v22 = 0;
  result = 0;
  if (v11)
  {
LABEL_16:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v17 = a2;
    v18 = (_QWORD *)(v9 + 40);
    do
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      *(v18 - 3) = 0;
      *(v18 - 2) = 0;
      *((_DWORD *)v18 - 2) = 0;
      v18 += 6;
      --v17;
    }
    while (v17);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    v22 = v7;
    do
    {
      v23 = (_QWORD *)(v6 + 48 * v21);
      v24 = *v23;
      if (*v23)
      {
        if (v24 != -1)
        {
          v25 = *a1;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v85 = v19;
          v27 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
          v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
          v30 = v26 & ((v29 >> 31) ^ v29);
          v31 = 1;
          do
          {
            v32 = v30;
            v33 = (_QWORD *)(v25 + 48 * v30);
            v30 = (v30 + v31++) & v26;
          }
          while (*v33);
          v34 = v32;
          v35 = v25 + 48 * v32;
          v38 = *(_QWORD *)(v35 + 40);
          v37 = (uint64_t *)(v35 + 40);
          v36 = v38;
          if ((v38 & 1) != 0)
          {
            v72 = v22;
            WTF::fastFree(v36 & 0xFFFFFFFFFFFFFFFCLL, v10, v11, v12, v13, v14, v15, v16);
            v23 = (_QWORD *)(v6 + 48 * v21);
            v22 = v72;
          }
          v84 = a3;
          v39 = v25 + 48 * v34;
          v42 = *(_QWORD *)(v39 + 32);
          v41 = (uint64_t *)(v39 + 32);
          v40 = v42;
          if ((v42 & 1) != 0)
          {
            v73 = v22;
            v82 = v23;
            WTF::fastFree(v40 & 0xFFFFFFFFFFFFFFFCLL, v10, v11, v12, v13, v14, v15, v16);
            v23 = v82;
            v22 = v73;
          }
          v43 = v25 + 48 * v34;
          v46 = *(_QWORD *)(v43 + 24);
          v45 = (_QWORD *)(v43 + 24);
          v44 = v46;
          if (v46)
          {
            v79 = v22;
            v80 = v23;
            WTF::fastFree(v44 - 16, v10, v11, v12, v13, v14, v15, v16);
            v22 = v79;
            v23 = v80;
          }
          *v33 = *v23;
          v47 = v25 + 48 * v34;
          v48 = v6 + 48 * v21;
          v49 = *(_QWORD *)(v48 + 8);
          *(_DWORD *)(v47 + 16) = *(_DWORD *)(v48 + 16);
          *(_QWORD *)(v47 + 8) = v49;
          *v45 = 0;
          v51 = *(_QWORD *)(v48 + 24);
          v50 = (_QWORD *)(v48 + 24);
          *(_QWORD *)(v48 + 24) = 0;
          *v45 = v51;
          *v41 = 0;
          v54 = *(_QWORD *)(v48 + 32);
          v53 = (uint64_t *)(v48 + 32);
          v52 = v54;
          if ((v54 & 1) == 0 || v52 == 4)
          {
            *v41 = v52 & 0xFFFFFFFFFFFFFFFDLL;
          }
          else
          {
            v67 = v41;
            v68 = v22;
            v69 = v23;
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v67, v53);
            v23 = v69;
            v22 = v68;
          }
          a3 = v84;
          v55 = v6 + 48 * v21;
          *v37 = 0;
          v58 = *(_QWORD *)(v55 + 40);
          v57 = (uint64_t *)(v55 + 40);
          v56 = v58;
          if ((v58 & 1) == 0 || v56 == 4)
          {
            *v37 = v56 & 0xFFFFFFFFFFFFFFFDLL;
          }
          else
          {
            v70 = v37;
            v71 = v22;
            v81 = v23;
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v70, v57);
            v23 = v81;
            v22 = v71;
          }
          v59 = *v57;
          v19 = v85;
          if ((*v57 & 1) != 0)
          {
            v74 = v22;
            v83 = v23;
            WTF::fastFree(v59 & 0xFFFFFFFFFFFFFFFCLL, v10, v11, v12, v13, v14, v15, v16);
            v23 = v83;
            v22 = v74;
          }
          v60 = *v53;
          if ((*v53 & 1) != 0)
          {
            v75 = v22;
            v76 = v23;
            WTF::fastFree(v60 & 0xFFFFFFFFFFFFFFFCLL, v10, v11, v12, v13, v14, v15, v16);
            v23 = v76;
            v22 = v75;
          }
          if (*v50)
          {
            v65 = v22;
            v66 = v23;
            WTF::fastFree(*v50 - 16, v10, v11, v12, v13, v14, v15, v16);
            v23 = v66;
            v22 = v65;
          }
          if (v23 == v84)
            v19 = v33;
        }
      }
      else
      {
        v61 = *(_QWORD *)(v6 + 48 * v21 + 40);
        if ((v61 & 1) != 0)
        {
          v77 = v22;
          WTF::fastFree(v61 & 0xFFFFFFFFFFFFFFFCLL, v10, v11, v12, v13, v14, v15, v16);
          v22 = v77;
        }
        v62 = *(_QWORD *)(v6 + 48 * v21 + 32);
        if ((v62 & 1) != 0)
        {
          v78 = v22;
          WTF::fastFree(v62 & 0xFFFFFFFFFFFFFFFCLL, v10, v11, v12, v13, v14, v15, v16);
          v22 = v78;
        }
        v63 = *(_QWORD *)(v6 + 48 * v21 + 24);
        if (v63)
        {
          v64 = v22;
          WTF::fastFree(v63 - 16, v10, v11, v12, v13, v14, v15, v16);
          v22 = v64;
        }
      }
      ++v21;
    }
    while (v21 != v22);
    goto LABEL_42;
  }
  v19 = 0;
  result = 0;
  if (v6)
  {
LABEL_42:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::expand(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::rehash(a1, v4, a2);
}

_QWORD *WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::rehash(uint64_t *a1, unsigned int a2, __int128 *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *result;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  __int128 v27;
  int v28;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    do
    {
      v22 = (__int128 *)(v6 + 24 * v21);
      if (*(_DWORD *)v22)
      {
        v23 = *a1;
        if (*a1)
          v24 = *(_DWORD *)(v23 - 8);
        else
          v24 = 0;
        v25 = v24 & (*((_DWORD *)v22 + 1) + *(_DWORD *)v22);
        v26 = (_QWORD *)(v23 + 24 * v25);
        if (*v26)
        {
          v28 = 1;
          do
          {
            v25 = (v25 + v28) & v24;
            v26 = (_QWORD *)(v23 + 24 * v25);
            ++v28;
          }
          while (*v26);
        }
        v27 = *v22;
        v26[2] = *((_QWORD *)v22 + 2);
        *(_OWORD *)v26 = v27;
        if (v22 == a3)
          v19 = v26;
      }
      ++v21;
    }
    while (v21 != v7);
    goto LABEL_16;
  }
  v19 = 0;
  result = 0;
  if (v6)
  {
LABEL_16:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v19;
  }
  return result;
}

_OWORD *WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(_OWORD *result, uint64_t *a2, uint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,BOOL>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = v12 + 16 * v19;
  v21 = *(_QWORD *)v20;
  if (*(_QWORD *)v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        v31 = 0;
        v30 = v12 + 16 * v32;
        goto LABEL_21;
      }
      if (v21 == -1)
        v22 = (_QWORD *)v20;
      v19 = (v19 + v23) & v14;
      v20 = v12 + 16 * v19;
      v21 = *(_QWORD *)v20;
      ++v23;
    }
    while (*(_QWORD *)v20);
    if (v22)
    {
      *v22 = 0;
      v22[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = (uint64_t)v22;
    }
  }
  *(_QWORD *)v20 = v15;
  *(_BYTE *)(v20 + 8) = *a4;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_17;
LABEL_28:
    result = WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,BOOL>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::expand(a2, v20, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v20 = (uint64_t)result;
    v26 = *a2;
    if (*a2)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
    goto LABEL_17;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_28;
LABEL_17:
  v30 = v26 + 16 * v29;
  v31 = 1;
LABEL_21:
  *(_QWORD *)v11 = v20;
  *((_QWORD *)v11 + 1) = v30;
  *((_BYTE *)v11 + 16) = v31;
  return result;
}

_OWORD *WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,BOOL>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,BOOL>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

_OWORD *WTF::HashTable<JSC::JSCell *,WTF::KeyValuePair<JSC::JSCell *,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *,BOOL>>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSCell *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *result;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _OWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v24 = 0;
    v22 = 0;
    do
    {
      v25 = (_QWORD *)(v11 + 16 * v24);
      if ((unint64_t)(*v25 + 1) >= 2)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = (~(*v25 << 32) + *v25) ^ ((~(*v25 << 32) + *v25) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((unint64_t)(v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 16 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_OWORD *)(v26 + 16 * v33);
        *v35 = *(_OWORD *)v25;
        if (v25 == (_QWORD *)a3)
          v22 = v35;
      }
      ++v24;
    }
    while (v24 != v12);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v22;
}

void JSC::DFG::`anonymous namespace'::LocalHeap::escapeAllocation(JSC::DFG::_anonymous_namespace_::LocalHeap *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  JSC::DFG::Node *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;

  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = v9 + 48 * v14;
    v16 = *(JSC::DFG::Node **)v15;
    if (*(JSC::DFG::Node **)v15 != a2)
    {
      v36 = 1;
      while (v16)
      {
        v14 = (v14 + v36) & v10;
        v15 = v9 + 48 * v14;
        v16 = *(JSC::DFG::Node **)v15;
        ++v36;
        if (*(JSC::DFG::Node **)v15 == a2)
          goto LABEL_3;
      }
      v15 = v9 + 48 * *(unsigned int *)(v9 - 4);
    }
  }
  else
  {
    v15 = 0;
  }
LABEL_3:
  if (*(_DWORD *)(v15 + 16))
  {
    v17 = v15 + 8;
    v61 = *(_QWORD *)(v15 + 8);
    v62 = *(_DWORD *)(v15 + 16);
    v18 = *(_QWORD *)(v15 + 32);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    v63 = v19;
    v64 = 0;
    if ((v18 & 1) == 0 || v18 == 4)
      v64 = v18 & 0xFFFFFFFFFFFFFFFDLL;
    else
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v64, (_QWORD *)(v15 + 32));
    v22 = *(_QWORD *)(v15 + 40);
    v21 = (_QWORD *)(v15 + 40);
    v20 = v22;
    v65 = 0;
    if ((v22 & 1) == 0 || v20 == 4)
      v65 = v20 & 0xFFFFFFFFFFFFFFFDLL;
    else
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v65, v21);
    v56 = v61;
    v57 = 0;
    v59 = 0;
    v60 = 0;
    v58 = 0;
    if ((v60 & 1) != 0)
      WTF::fastFree(v60 & 0xFFFFFFFFFFFFFFFCLL, v23, v24, v25, v26, v27, v28, v29);
    if ((v59 & 1) != 0)
      WTF::fastFree(v59 & 0xFFFFFFFFFFFFFFFCLL, v23, v24, v25, v26, v27, v28, v29);
    if (v58)
      WTF::fastFree(v58 - 16, v23, v24, v25, v26, v27, v28, v29);
    if (v63)
    {
      v31 = *(unsigned int *)(v63 - 4);
      v32 = v63 + 16 * v31;
      if (*(_DWORD *)(v63 - 12))
      {
        v30 = v63;
        if ((_DWORD)v31)
        {
          v35 = 16 * v31;
          v30 = v63;
          while (!*(_DWORD *)v30)
          {
            v30 += 16;
            v35 -= 16;
            if (!v35)
            {
              v30 = v32;
              break;
            }
          }
        }
LABEL_17:
        if (v63)
          v33 = v63 + 16 * *(unsigned int *)(v63 - 4);
        else
          v33 = 0;
        while (v30 != v33)
        {
          v34 = v30 + 16;
          v30 = v32;
          if (v34 != v32)
          {
            v30 = v34;
            while (!*(_DWORD *)v30)
            {
              v30 += 16;
              if (v30 == v32)
              {
                v30 = v32;
                break;
              }
            }
          }
        }
        if (!*((_BYTE *)this + 24))
          goto LABEL_21;
        v39 = *((_QWORD *)this + 4);
        v38 = (uint64_t *)((char *)this + 32);
        v37 = v39;
        v40 = v61;
        if (v39
        {
          v41 = *(_DWORD *)(v37 - 8);
        }
        else
        {
          v41 = 0;
        }
        v42 = (~(v40 << 32) + v40) ^ ((unint64_t)(~(v40 << 32) + v40) >> 22);
        v43 = 9 * ((v42 + ~(v42 << 13)) ^ ((v42 + ~(v42 << 13)) >> 8));
        v44 = (v43 ^ (v43 >> 15)) + ~((v43 ^ (v43 >> 15)) << 27);
        v45 = v41 & ((v44 >> 31) ^ v44);
        v46 = (_QWORD *)(v37 + 48 * v45);
        v47 = *v46;
        if (*v46)
        {
          v54 = 0;
          v55 = 1;
          while (v47 != v40)
          {
            if (v47 == -1)
              v54 = v46;
            v45 = (v45 + v55) & v41;
            v46 = (_QWORD *)(v37 + 48 * v45);
            v47 = *v46;
            ++v55;
            if (!*v46)
            {
              if (v54)
              {
                v54[3] = 0;
                v54[4] = 0;
                v54[5] = 0;
                *v54 = 0;
                v54[1] = 0;
                *((_DWORD *)v54 + 4) = 0;
                --*(_DWORD *)(*v38 - 16);
                v46 = v54;
              }
              goto LABEL_51;
            }
          }
          goto LABEL_21;
        }
LABEL_51:
        *v46 = v40;
        v48 = *v38;
        if (*v38)
          v49 = *(_DWORD *)(v48 - 12) + 1;
        else
          v49 = 1;
        *(_DWORD *)(v48 - 12) = v49;
        v50 = *v38;
        if (*v38)
          v51 = *(_DWORD *)(v50 - 12);
        else
          v51 = 0;
        v52 = (*(_DWORD *)(v50 - 16) + v51);
        v53 = *(unsigned int *)(v50 - 4);
        if (v53 > 0x400)
        {
          if (v53 > 2 * v52)
            goto LABEL_21;
        }
        else if (3 * v53 > 4 * v52)
        {
LABEL_21:
          if ((v65 & 1) != 0)
            WTF::fastFree(v65 & 0xFFFFFFFFFFFFFFFCLL, v23, v24, v25, v26, v27, v28, v29);
          if ((v64 & 1) != 0)
            WTF::fastFree(v64 & 0xFFFFFFFFFFFFFFFCLL, v23, v24, v25, v26, v27, v28, v29);
          if (v63)
            WTF::fastFree(v63 - 16, v23, v24, v25, v26, v27, v28, v29);
          return;
        }
        goto LABEL_21;
      }
      v30 = v63 + 16 * v31;
    }
    else
    {
      v30 = 0;
      v31 = 0;
    }
    v32 = v63 + 16 * v31;
    goto LABEL_17;
  }
}

char *JSC::DFG::`anonymous namespace'::LocalHeap::getAllocation(JSC::DFG::_anonymous_namespace_::LocalHeap *this, JSC::DFG::Node *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  char *v7;
  JSC::DFG::Node *v8;
  int v10;

  if (this)
  {
    v2 = *((_DWORD *)this - 2);
    v3 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = (char *)this + 48 * v6;
    v8 = *(JSC::DFG::Node **)v7;
    if (*(JSC::DFG::Node **)v7 != a2)
    {
      v10 = 1;
      while (v8)
      {
        v6 = (v6 + v10) & v2;
        v7 = (char *)this + 48 * v6;
        v8 = *(JSC::DFG::Node **)v7;
        ++v10;
        if (*(JSC::DFG::Node **)v7 == a2)
          return v7 + 8;
      }
      v7 = (char *)this + 48 * *((unsigned int *)this - 1);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7 + 8;
}

void JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::handleNode<JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::performAnalysis(void)::{lambda(JSC::DFG::PromotedHeapLocation,JSC::DFG::LazyNode)#1},JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::performAnalysis(void)::{lambda(JSC::DFG::PromotedHeapLocation)#1}>(JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::performAnalysis(void)::{lambda(JSC::DFG::PromotedHeapLocation,JSC::DFG::LazyNode)#1} const&,JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::performAnalysis(void)::{lambda(JSC::DFG::PromotedHeapLocation)#1} const&)::{lambda(JSC::DFG::Edge)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::DFG::Node *v17;

  if ((a2 & 0x1000000000000) == 0)
  {
    v8 = (a2 >> 50) & 0x3F;
    if ((_DWORD)v8)
    {
      if (v8 > 0x34)
        goto LABEL_17;
      if (((1 << v8) & 0x12798001880F84) != 0)
        return;
      if (((1 << v8) & 0xD867FFE77F07ALL) == 0)
      {
LABEL_17:
        __break(0xC471u);
        return;
      }
      v9 = *(_QWORD *)(a1 + 512);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 - 8);
        v11 = ((a2 & 0xFF00FFFFFFFFFFFFLL) + ~(a2 << 32)) ^ (((a2 & 0xFF00FFFFFFFFFFFFLL) + ~(a2 << 32)) >> 22);
        v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
        v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
        v14 = v10 & ((v13 >> 31) ^ v13);
        v15 = *(_QWORD *)(v9 + 16 * v14);
        if (v15 != (a2 & 0xFF00FFFFFFFFFFFFLL))
        {
          v16 = 1;
          while (v15)
          {
            v14 = ((_DWORD)v14 + v16) & v10;
            v15 = *(_QWORD *)(v9 + 16 * v14);
            ++v16;
            if (v15 == (a2 & 0xFF00FFFFFFFFFFFFLL))
              goto LABEL_14;
          }
          v14 = *(unsigned int *)(v9 - 4);
        }
LABEL_14:
        if (v14 != *(_DWORD *)(v9 - 4))
        {
          v17 = *(JSC::DFG::Node **)(v9 + 16 * v14 + 8);
          if (v17)
        }
      }
    }
  }
}

unsigned int *WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedLocationDescriptor const&,JSC::DFG::Node *&>(uint64_t a1, uint64_t *a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *result;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  int v24;
  uint64_t v25;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = a3[1];
  v12 = (v11 + *a3) & v10;
  v13 = (unsigned int *)(v8 + 16 * v12);
  result = (unsigned int *)*v13;
  v15 = v13[1];
  v16 = (_DWORD)result == 0;
  if (*(_QWORD *)v13)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if ((_DWORD)result == *a3 && v15 == v11)
      {
        if ((v9 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v8 + 16 * v25;
        *(_BYTE *)(a1 + 16) = 0;
        *((_QWORD *)v13 + 1) = *a4;
        return result;
      }
      if (v16 && v15 != 0)
        v23 = v13;
      v12 = (v12 + v24) & v10;
      v13 = (unsigned int *)(v8 + 16 * v12);
      result = (unsigned int *)*v13;
      v15 = v13[1];
      v16 = (_DWORD)result == 0;
      ++v24;
    }
    while (*(_QWORD *)v13);
    if (v23)
    {
      *(_QWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      v13 = v23;
    }
  }
  *(_QWORD *)v13 = *(_QWORD *)a3;
  *((_QWORD *)v13 + 1) = *a4;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_11;
LABEL_15:
    result = (unsigned int *)WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::expand(a2, v13);
    v13 = result;
    v19 = *a2;
    if (*a2)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    goto LABEL_11;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_15;
LABEL_11:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v19 + 16 * v22;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *result;
  uint64_t v20;
  _DWORD *v21;
  _QWORD *v22;

  v4 = *a1;
  if (!*a1)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v5 = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!v5)
    goto LABEL_3;
  v7 = v5 << (6 * v6 >= 2 * v5);
LABEL_4:
  v8 = WTF::fastMalloc((WTF *)(16 * v7 + 16));
  v16 = v8;
  v17 = v8 + 16;
  if (v7)
    bzero((void *)(v8 + 16), 16 * v7);
  *a1 = v17;
  *(_DWORD *)(v16 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v18 = 0;
  if (v5)
  {
    v20 = v5;
    v21 = (_DWORD *)v4;
    do
    {
      if (*v21)
      {
        v22 = WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::reinsert(*a1, v21);
        if (v21 == a2)
          v18 = v22;
      }
      v21 += 4;
      --v20;
    }
    while (v20);
    goto LABEL_16;
  }
  result = 0;
  if (v4)
  {
LABEL_16:
    WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
    return v18;
  }
  return result;
}

void WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v15 = v5;
    v16 = (_DWORD *)v4;
    do
    {
      if (*v16)
        WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::reinsert(*a1, v16);
      v16 += 4;
      --v15;
    }
    while (v15);
    goto LABEL_11;
  }
  if (v4)
LABEL_11:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
}

_QWORD *WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::reinsert(uint64_t a1, _DWORD *a2)
{
  int v2;
  unsigned int v3;
  _QWORD *v4;
  int v6;

  if (a1)
    v2 = *(_DWORD *)(a1 - 8);
  else
    v2 = 0;
  v3 = (a2[1] + *a2) & v2;
  v4 = (_QWORD *)(a1 + 16 * v3);
  if (*v4)
  {
    v6 = 1;
    do
    {
      v3 = (v3 + v6) & v2;
      v4 = (_QWORD *)(a1 + 16 * v3);
      ++v6;
    }
    while (*v4);
  }
  *(_OWORD *)v4 = *(_OWORD *)a2;
  return v4;
}

void WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = 0x100000000;
  ++*(_DWORD *)(*a1 - 16);
  v2 = *a1;
  if (*a1)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *a1;
  if (*a1)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::rehash(a1, v6 >> 1);
  }
}

uint64_t WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::operator==(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;

  if ((a1 & 1) != 0)
    v2 = *(unsigned int *)(a1 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v2 = a1 > 3;
  if ((a2 & 1) != 0)
    v3 = *(unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v3 = a2 > 3;
  if (v2 != v3)
    return 0;
  if ((a1 & 1) != 0)
  {
    if ((a2 & 1) == 0)
    {
      if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 0 && *(_DWORD *)(a1 & 0xFFFFFFFFFFFFFFFCLL) <= 1u)
        return *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFCLL) + 8) == (a2 & 0xFFFFFFFFFFFFFFFCLL);
      return 0;
    }
    v8 = (a1 & 0xFFFFFFFFFFFFFFFCLL) + 8;
    v9 = *(unsigned int *)(a1 & 0xFFFFFFFFFFFFFFFCLL);
    if ((_DWORD)v9)
    {
      v10 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      v11 = *(unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = *(_QWORD *)(v10 + 8);
        v14 = v10 + 16;
        result = 1;
        while (1)
        {
          v15 = *(_QWORD *)(v8 + 8 * v12);
          if (v13 != v15)
            break;
LABEL_24:
          if (++v12 == v9)
            return result;
        }
        v16 = 0;
        while (v11 - 1 != v16)
        {
          v17 = *(_QWORD *)(v14 + 8 * v16++);
          if (v17 == v15)
          {
            if (v16 >= v11)
              return 0;
            goto LABEL_24;
          }
        }
      }
      return 0;
    }
    return 1;
  }
  v4 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a1 & 0xFFFFFFFFFFFFFFFCLL) == 0)
    return 1;
  v5 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((a2 & 1) == 0)
    return v5 == (unsigned int *)v4;
  v18 = *v5;
  if (!(_DWORD)v18)
    return 0;
  if (*((_QWORD *)v5 + 1) == v4)
    return 1;
  v19 = 0;
  v20 = v5 + 4;
  while (v18 - 1 != v19)
  {
    v21 = *(_QWORD *)&v20[2 * v19++];
    if (v21 == v4)
      return v19 < v18;
  }
  v19 = v18;
  return v19 < v18;
}

void JSC::DFG::`anonymous namespace'::LocalHeap::prune(JSC::DFG::_anonymous_namespace_::LocalHeap *this, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  WTF *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  unsigned int v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  int v65;
  _BYTE v66[24];
  WTF *v67;
  uint64_t v68;
  _QWORD *v69;

  v9 = 0;
  v10 = 0;
  v69 = 0;
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    v10 = *(unsigned int *)(v11 - 4);
    v12 = (_QWORD *)(v11 + 16 * v10);
    if (*(_DWORD *)(v11 - 12))
    {
      v9 = (_QWORD *)*((_QWORD *)this + 1);
      if ((_DWORD)v10)
      {
        v22 = 16 * v10;
        v9 = (_QWORD *)*((_QWORD *)this + 1);
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          v22 -= 16;
          if (!v22)
          {
            v9 = v12;
            goto LABEL_3;
          }
        }
      }
      goto LABEL_3;
    }
    v9 = (_QWORD *)(v11 + 16 * v10);
  }
  v12 = (_QWORD *)(v11 + 16 * v10);
LABEL_3:
  if (v11)
    v13 = (_QWORD *)(v11 + 16 * *(unsigned int *)(v11 - 4));
  else
    v13 = 0;
  if (v13 != v9)
  {
    do
    {
      a2 = v9 + 1;
      if (v9[1])
        WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid((uint64_t *)&v69, a2, a3, a4, a5, a6, a7, a8);
      v17 = v9 + 2;
      v9 = v12;
      if (v17 != v12)
      {
        v9 = v17;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 2;
          if (v9 == v12)
          {
            v9 = v12;
            break;
          }
        }
      }
    }
    while (v9 != v13);
    v67 = 0;
    v68 = 0;
    if (v69)
    {
      if (*((_DWORD *)v69 - 3))
      {
        v18 = *((unsigned int *)v69 - 1);
        if ((_DWORD)v18)
        {
          v19 = 8 * v18;
          v20 = v69;
          while ((unint64_t)(*v20 + 1) <= 1)
          {
            ++v20;
            v19 -= 8;
            if (!v19)
              goto LABEL_24;
          }
        }
        else
        {
          v20 = v69;
        }
        v43 = &v69[v18];
        if (v43 != v20)
        {
          v44 = 0;
LABEL_65:
          if (v44 == (_DWORD)v68)
          {
            v45 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v67, v44 + 1, (unint64_t)v20);
            v44 = HIDWORD(v68);
            v46 = (char *)v67 + 8 * HIDWORD(v68);
          }
          else
          {
            v46 = (char *)v67 + 8 * v44;
            v45 = v20;
          }
          *(_QWORD *)v46 = *v45;
          HIDWORD(v68) = ++v44;
          while (++v20 != v43)
          {
            if ((unint64_t)(*v20 + 1) > 1)
            {
              if (v20 != v43)
                goto LABEL_65;
              break;
            }
          }
          while (v44)
          {
            v47 = *((_QWORD *)v67 + --v44);
            HIDWORD(v68) = v44;
            v48 = *((_QWORD *)this + 2);
            v49 = *(_DWORD *)(v48 - 8);
            v50 = (~(v47 << 32) + v47) ^ ((unint64_t)(~(v47 << 32) + v47) >> 22);
            v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
            v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
            v53 = v49 & ((v52 >> 31) ^ v52);
            v54 = (uint64_t *)(v48 + 48 * v53);
            v55 = *v54;
            if (*v54 != v47)
            {
              v65 = 1;
              while (v55)
              {
                v53 = (v53 + v65) & v49;
                v54 = (uint64_t *)(v48 + 48 * v53);
                v55 = *v54;
                ++v65;
                if (*v54 == v47)
                  goto LABEL_75;
              }
              v54 = (uint64_t *)(v48 + 48 * *(unsigned int *)(v48 - 4));
            }
LABEL_75:
            v56 = v54[3];
            if (v56)
            {
              v58 = *(unsigned int *)(v56 - 4);
              v59 = v56 + 16 * v58;
              if (*(_DWORD *)(v56 - 12))
              {
                v57 = v54[3];
                if ((_DWORD)v58)
                {
                  v61 = 16 * v58;
                  v57 = v54[3];
                  while (!*(_DWORD *)v57)
                  {
                    v57 += 16;
                    v61 -= 16;
                    if (!v61)
                    {
                      v57 = v59;
                      goto LABEL_78;
                    }
                  }
                }
                goto LABEL_78;
              }
              v57 = v56 + 16 * v58;
            }
            else
            {
              v57 = 0;
              v58 = 0;
            }
            v59 = v56 + 16 * v58;
LABEL_78:
            if (v56)
              v60 = v56 + 16 * *(unsigned int *)(v56 - 4);
            else
              v60 = 0;
            if (v60 != v57)
            {
              do
              {
                v62 = (_QWORD *)(v57 + 8);
                WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add((uint64_t *)&v69, (uint64_t *)(v57 + 8), a3, a4, a5, a6, a7, a8, (uint64_t)v66);
                if (v66[16])
                {
                  v63 = HIDWORD(v68);
                  if (HIDWORD(v68) == (_DWORD)v68)
                  {
                    v62 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v67, HIDWORD(v68) + 1, v57 + 8);
                    v63 = HIDWORD(v68);
                  }
                  *((_QWORD *)v67 + HIDWORD(v68)) = *v62;
                  HIDWORD(v68) = v63 + 1;
                }
                v64 = v57 + 16;
                v57 = v59;
                if (v64 != v59)
                {
                  v57 = v64;
                  while (!*(_DWORD *)v57)
                  {
                    v57 += 16;
                    if (v57 == v59)
                    {
                      v57 = v59;
                      break;
                    }
                  }
                }
              }
              while (v57 != v60);
              v44 = HIDWORD(v68);
            }
          }
        }
      }
LABEL_24:
      v21 = v67;
      if (v67)
      {
        v67 = 0;
        LODWORD(v68) = 0;
        WTF::fastFree((unint64_t)v21, a2, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  v16 = *((_QWORD *)this + 2);
  v14 = (uint64_t *)((char *)this + 16);
  v15 = v16;
  if (!v16)
    goto LABEL_7;
  v23 = *(_DWORD *)(v15 - 4);
  if (!v23)
    goto LABEL_7;
  v24 = 0;
  do
  {
    v25 = (uint64_t *)(v15 + 48 * --v23);
    v26 = *v25;
    if ((unint64_t)(*v25 + 1) < 2)
      continue;
    if (v69)
    {
      v27 = *((_DWORD *)v69 - 2);
      v28 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
      v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
      v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
      v31 = v27 & ((v30 >> 31) ^ v30);
      v32 = v69[v31];
      if (v32 == v26)
        continue;
      v33 = 1;
      while (v32)
      {
        v31 = (v31 + v33) & v27;
        v32 = v69[v31];
        ++v33;
        if (v32 == v26)
          goto LABEL_36;
      }
    }
    *v25 = -1;
    v34 = *(_QWORD *)(v15 + 48 * v23 + 40);
    if ((v34 & 1) != 0)
      WTF::fastFree(v34 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v35 = *(_QWORD *)(v15 + 48 * v23 + 32);
    if ((v35 & 1) != 0)
      WTF::fastFree(v35 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
    v36 = *(_QWORD *)(v15 + 48 * v23 + 24);
    if (v36)
      WTF::fastFree(v36 - 16, a2, a3, a4, a5, a6, a7, a8);
    ++v24;
LABEL_36:
    ;
  }
  while (v23);
  v37 = *v14;
  if (v24)
  {
    *(_DWORD *)(v37 - 16) += v24;
    v41 = *v14;
    if (*v14)
      v42 = *(_DWORD *)(v41 - 12);
    else
      v42 = 0;
    *(_DWORD *)(v41 - 12) = v42 - v24;
    v37 = *v14;
  }
  if (v37)
  {
    v38 = *(_DWORD *)(v37 - 4);
    v39 = 6 * *(_DWORD *)(v37 - 12);
    if (v38 >= 9 && v39 < v38)
  }
LABEL_7:
  if (v69)
    WTF::fastFree((unint64_t)(v69 - 2), a2, a3, a4, a5, a6, a7, a8);
}

_OWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::computeBestTableSize(v2);
  return WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1, v3, 0, v4, v5, v6, v7, v8);
}

uint64_t WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::DFG::Node *>,WTF::DefaultHash<JSC::DFG::Node *>>,JSC::DFG::Node *>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ~(*a2 << 32) + *a2;
    v5 = 9
       * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(_QWORD *)(v2 + 8 * v7);
    if (v8 == *a2)
      return v2 + 8 * v7;
    v9 = 1;
    while (v8)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(_QWORD *)(v2 + 8 * v7);
      ++v9;
      if (v8 == *a2)
        return v2 + 8 * v7;
    }
  }
  return 0;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::computeBestTableSize(v2);
}

uint64_t *WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits>::HashMap(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;

  *a1 = 0;
  if (!*a2)
    return a1;
  v4 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v4)
    return a1;
  v6 = (v4 - 1) | ((v4 - 1) >> 1) | ((((_DWORD)v4 - 1) | ((v4 - 1) >> 1)) >> 2);
  v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
  v8 = (v7 | HIWORD(v7)) + 1;
  if (v8 > 0x400)
  {
    if (v8 > 2 * v4)
      goto LABEL_41;
  }
  else if (3 * v8 > 4 * v4)
  {
LABEL_7:
    v9 = (double)v4;
    v10 = (double)v8;
    v11 = 0.604166667;
    goto LABEL_8;
  }
  LODWORD(v8) = 2 * v8;
  if (v8 <= 0x400)
    goto LABEL_7;
LABEL_41:
  v9 = (double)v4;
  v10 = (double)v8;
  v11 = 0.416666667;
LABEL_8:
  if (v10 * v11 <= v9)
    LODWORD(v8) = 2 * v8;
  if (v8 <= 8)
    v12 = 8;
  else
    v12 = v8;
  v13 = WTF::fastMalloc((WTF *)(48 * v12 + 16));
  v20 = (_QWORD *)(v13 + 40);
  v21 = v12;
  do
  {
    *v20 = 0;
    v20[1] = 0;
    v20[2] = 0;
    *(v20 - 3) = 0;
    *(v20 - 2) = 0;
    *((_DWORD *)v20 - 2) = 0;
    v20 += 6;
    --v21;
  }
  while (v21);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 12) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  v22 = (_QWORD *)*a2;
  if (*a2)
  {
    v24 = *((unsigned int *)v22 - 1);
    v25 = &v22[6 * v24];
    if (*((_DWORD *)v22 - 3))
    {
      v23 = v22;
      if ((_DWORD)v24)
      {
        v37 = 48 * v24;
        v23 = v22;
        while ((unint64_t)(*v23 + 1) <= 1)
        {
          v23 += 6;
          v37 -= 48;
          if (!v37)
          {
            v23 = v25;
            goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    v23 = &v22[6 * v24];
  }
  else
  {
    v23 = 0;
    LODWORD(v24) = 0;
  }
  v25 = &v22[6 * v24];
LABEL_18:
  if (v22)
    v26 = &v22[6 * *((unsigned int *)v22 - 1)];
  else
    v26 = 0;
  while (v23 != v26)
  {
    v27 = *a1;
    if (*a1)
      v28 = *(_DWORD *)(v27 - 8);
    else
      v28 = 0;
    v29 = ~(*v23 << 32) + *v23;
    v30 = (v29 ^ (v29 >> 22)) + ~((v29 ^ (v29 >> 22)) << 13);
    v31 = (9 * (v30 ^ (v30 >> 8))) ^ ((9 * (v30 ^ (v30 >> 8))) >> 15);
    v32 = v28 & (((v31 + ~(v31 << 27)) >> 31) ^ (v31 + ~((_DWORD)v31 << 27)));
    v33 = 1;
    do
    {
      v34 = v32;
      v35 = (_QWORD *)(v27 + 48 * v32);
      v32 = (v32 + v33++) & v28;
    }
    while (*v35);
    *v35 = *v23;
    v36 = v23 + 6;
    v23 = v25;
    if (v36 != v25)
    {
      v23 = v36;
      while ((unint64_t)(*v23 + 1) <= 1)
      {
        v23 += 6;
        if (v23 == v25)
        {
          v23 = v25;
          break;
        }
      }
    }
  }
  return a1;
}

uint64_t WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits>::add<JSC::DFG::`anonymous namespace'::Allocation const&>(uint64_t result, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;

  v11 = result;
  v12 = *a2;
  if (*a2
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
  v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
  v19 = v14 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
  v20 = (_QWORD *)(v12 + 48 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v24 = 0;
        else
          v24 = *(_DWORD *)(v12 - 4);
        v25 = 0;
        v26 = v12 + 48 * v24;
        goto LABEL_9;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (_QWORD *)(v12 + 48 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      v22[3] = 0;
      v22[4] = 0;
      v22[5] = 0;
      *v22 = 0;
      v22[1] = 0;
      *((_DWORD *)v22 + 4) = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v22;
    }
  }
  *v20 = v15;
  v27 = *a2;
  if (*a2)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *a2;
  if (*a2)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      goto LABEL_22;
LABEL_28:
    v20 = (_QWORD *)result;
    v29 = *a2;
    if (*a2)
      LODWORD(v32) = *(_DWORD *)(v29 - 4);
    else
      LODWORD(v32) = 0;
    goto LABEL_22;
  }
  if (3 * v32 <= 4 * v31)
    goto LABEL_28;
LABEL_22:
  v26 = v29 + 48 * v32;
  v25 = 1;
LABEL_9:
  *(_QWORD *)v11 = v20;
  *(_QWORD *)(v11 + 8) = v26;
  *(_BYTE *)(v11 + 16) = v25;
  return result;
}

_QWORD *WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits>::begin(_QWORD *result)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if (!result)
    return 0;
  v2 = *((unsigned int *)result - 1);
  v3 = &result[6 * v2];
  if (!*((_DWORD *)result - 3))
    return &result[6 * v2];
  if ((_DWORD)v2)
  {
    v4 = 48 * v2;
    while ((unint64_t)(*result + 1) <= 1)
    {
      result += 6;
      v4 -= 48;
      if (!v4)
        return v3;
    }
  }
  return result;
}

void WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<WTF::Vector<JSC::B3::Value *,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::computeBestTableSize(v2);
  WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::rehash(a1, v3);
}

void _ZZN3JSC3DFG12_GLOBAL__N_128ObjectAllocationSinkingPhase23determineSinkCandidatesEvENKUlT_E_clIZNS2_23determineSinkCandidatesEvEUlRN3WTF7HashMapIPNS0_4NodeENS1_10AllocationENS6_11DefaultHashIS9_EENS6_10HashTraitsIS9_EENSD_ISA_EENS6_15HashTableTraitsEEES9_E_EEDaS3_(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  JSC::DFG::Node *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  int v129;
  int v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unsigned int v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  unsigned int v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t *v203;
  int v204;
  int v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  int *v209;
  int v210;
  int v211;
  int v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  unsigned int v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t *v227;
  int v228;
  uint64_t v229;
  unint64_t v230;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v231;
  JSC::DFG::Node *v232;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v233;
  unsigned int v234;
  unint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t *v253;
  __int128 *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  __int128 *v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  unsigned int v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t *v293;
  unsigned int v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  int v299;
  uint64_t *v300;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  __int128 *v315;
  uint64_t v316;
  unsigned int v317;
  unsigned int v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unint64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  int v367;
  unsigned int v368;
  char v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  _QWORD *v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  unsigned int v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int v383;
  uint64_t v384;
  int v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unsigned int v389;
  uint64_t v390;
  int v391;
  uint64_t *v392;
  int v393;
  int v394;
  unsigned int v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  int v400;
  int v401;
  uint64_t *v402;
  uint64_t v403;
  JSC::DFG::Node *v404;
  uint64_t *v405;
  uint64_t v406;
  unsigned int v407;
  unint64_t v408;
  unint64_t v409;
  unint64_t v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  unsigned int v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  uint64_t v423;
  unsigned int v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  unsigned int *v432;
  uint64_t v433;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v434;
  uint64_t *v435;
  uint64_t v436;
  int v437;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  char v443;
  _QWORD *v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int *v456;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t *v461;
  uint64_t v462;
  _QWORD *v463;
  unint64_t v464;
  unsigned int *v465;
  char v466;
  uint64_t *v468;
  uint64_t v469;
  uint64_t *v470;
  uint64_t v471;
  int v472;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v473;
  uint64_t v474;
  uint64_t *v475;
  unint64_t StatusReg;
  uint64_t v477;
  __int128 v478;
  uint64_t *v479;
  uint64_t v480[3];
  uint64_t v481[2];

  v8 = *(_QWORD *)(a1 + 32);
  v471 = *(unsigned int *)(v8 + 60);
  if ((_DWORD)v471)
  {
    v10 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v10))
    {
      if (v471 == ++v10)
        return;
    }
    if ((_DWORD)v471 != (_DWORD)v10)
    {
      v473 = (JSC::DFG::_anonymous_namespace_::LocalHeap *)(a1 + 504);
      v470 = (uint64_t *)(a1 + 520);
      v11 = (_QWORD *)(a1 + 536);
      v468 = (uint64_t *)(a1 + 424);
      v475 = (uint64_t *)(a1 + 512);
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      LODWORD(v12) = v471;
      LODWORD(v13) = v10;
      v469 = v8;
      do
      {
        if (v12 <= v13)
        {
          __break(0xC471u);
          JUMPOUT(0x1984E5A84);
        }
        v472 = v13;
        v474 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v13);
        v14 = *(_DWORD *)(v474 + 8);
        if (*(_DWORD *)(a1 + 484) <= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1984E5A8CLL);
        }
        v15 = *(_QWORD *)(a1 + 472);
        v16 = v15 + 40 * v14;
        *(_BYTE *)(a1 + 504) = *(_BYTE *)v16;
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable(v480, (_QWORD *)(v16 + 8), a3, (uint64_t)a4, a5, a6, a7, a8);
        v24 = *(_QWORD *)(a1 + 512);
        *(_QWORD *)(a1 + 512) = v480[0];
        v480[0] = v24;
        if (v24)
          WTF::fastFree(v24 - 16, v17, v18, v19, v20, v21, v22, v23);
        v25 = v15 + 40 * v14;
        *(_BYTE *)(a1 + 528) = *(_BYTE *)(v25 + 24);
        *(_BYTE *)(a1 + 528) = 1;
        v39 = *(unsigned int *)(v474 + 220);
        if (!(_DWORD)v39)
          goto LABEL_180;
        v40 = *(uint64_t **)(v474 + 208);
        v41 = &v40[v39];
        do
        {
          v42 = *v40;
          v479 = 0;
          v43 = *(unsigned __int16 *)(v42 + 18);
          if (v43 > 0x85)
          {
            if (*(unsigned __int16 *)(v42 + 18) <= 0x158u)
            {
              if (*(unsigned __int16 *)(v42 + 18) <= 0xAAu)
              {
                switch(*(_WORD *)(v42 + 18))
                {
                  case 0x98:
                  case 0x99:
                    v75 = *(_QWORD *)(v42 + 32);
                    v76 = v75 & 0xFF00FFFFFFFFFFFFLL;
                    v46 = v77;
                    if (v77 && *((_DWORD *)v77 + 2) == 1)
                    {
                      v204 = *(_DWORD *)(*(_QWORD *)(v42 + 72) + 4);
                      v205 = 11;
                      goto LABEL_251;
                    }
                    v78 = *v475;
                    if (!*v475)
                      goto LABEL_21;
                    v185 = *(_QWORD *)(v42 + 24);
                    v186 = v185 & 0xFF00FFFFFFFFFFFFLL;
                    v187 = *(_DWORD *)(v78 - 8);
                    v188 = ((v185 & 0xFF00FFFFFFFFFFFFLL) + ~(v185 << 32)) ^ (((v185 & 0xFF00FFFFFFFFFFFFLL)
                                                                             + ~(v185 << 32)) >> 22);
                    v189 = 9 * ((v188 + ~(v188 << 13)) ^ ((v188 + ~(v188 << 13)) >> 8));
                    v190 = (v189 ^ (v189 >> 15)) + ~((v189 ^ (v189 >> 15)) << 27);
                    v191 = v187 & ((v190 >> 31) ^ v190);
                    v192 = *(_QWORD *)(v78 + 16 * v191);
                    if (v192 == v186)
                      goto LABEL_262;
                    v193 = 1;
                    while (v192)
                    {
                      v191 = ((_DWORD)v191 + v193) & v187;
                      v192 = *(_QWORD *)(v78 + 16 * v191);
                      ++v193;
                      if (v192 == v186)
                        goto LABEL_262;
                    }
                    v191 = *(unsigned int *)(v78 - 4);
LABEL_262:
                    if (v191 == *(_DWORD *)(v78 - 4))
                      goto LABEL_263;
                    v32 = *(_QWORD *)(v78 + 16 * v191 + 8);
                    if (!v32)
                      goto LABEL_263;
                    v78 = *v475;
                    if (!*v475)
                      goto LABEL_21;
                    v75 = *(_QWORD *)(v42 + 32);
                    v76 = v75 & 0xFF00FFFFFFFFFFFFLL;
                    v187 = *(_DWORD *)(v78 - 8);
LABEL_263:
                    v214 = (v76 + ~(v75 << 32)) ^ ((v76 + ~(v75 << 32)) >> 22);
                    v215 = 9 * ((v214 + ~(v214 << 13)) ^ ((v214 + ~(v214 << 13)) >> 8));
                    v216 = (v215 ^ (v215 >> 15)) + ~((v215 ^ (v215 >> 15)) << 27);
                    v217 = v187 & ((v216 >> 31) ^ v216);
                    v218 = *(_QWORD *)(v78 + 16 * v217);
                    if (v218 == v76)
                      goto LABEL_176;
                    v219 = 1;
                    do
                    {
                      if (!v218)
                        goto LABEL_341;
                      v217 = ((_DWORD)v217 + v219) & v187;
                      v218 = *(_QWORD *)(v78 + 16 * v217);
                      ++v219;
                    }
                    while (v218 != v76);
                    goto LABEL_176;
                  case 0x9A:
                    v335 = *(_QWORD *)(v42 + 24);
                    v336 = v335 & 0xFF00FFFFFFFFFFFFLL;
                    if (!v337 || (v431 = (uint64_t)v337, *((_DWORD *)v337 + 2) != 1))
                    {
                      v135 = *v475;
                      if (!*v475)
                        goto LABEL_20;
                      v395 = *(_DWORD *)(v135 - 8);
                      v396 = (v336 + ~(v335 << 32)) ^ ((v336 + ~(v335 << 32)) >> 22);
                      v397 = 9 * ((v396 + ~(v396 << 13)) ^ ((v396 + ~(v396 << 13)) >> 8));
                      v398 = (v397 ^ (v397 >> 15)) + ~((v397 ^ (v397 >> 15)) << 27);
                      v224 = v395 & ((v398 >> 31) ^ v398);
                      v399 = *(_QWORD *)(v135 + 16 * v224);
                      if (v399 != v336)
                      {
                        v400 = 1;
                        do
                        {
                          if (!v399)
                            goto LABEL_293;
                          v224 = ((_DWORD)v224 + v400) & v395;
                          v399 = *(_QWORD *)(v135 + 16 * v224);
                          ++v400;
                        }
                        while (v399 != v336);
                      }
                      goto LABEL_294;
                    }
                    v432 = *(unsigned int **)(v42 + 72);
                    v477 = 0;
                    v433 = v432[5];
                    v434 = v473;
                    if (!(_DWORD)v433)
                      goto LABEL_623;
                    v466 = 0;
                    v465 = v432;
                    v435 = (uint64_t *)*((_QWORD *)v432 + 1);
                    v436 = 32 * v433;
                    do
                    {
                      if (WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::overlaps((uint64_t *)(v431 + 24), v435))
                      {
                        v437 = *((_DWORD *)v435 + 6);
                        if (v437 == 1 || v437 == 3)
                        {
                          v466 = 1;
                        }
                        else
                        {
                          if (v437 != 2)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1984E5AF4);
                          }
                          v439 = *v435;
                          if ((*v435 & 1) != 0)
                          {
                            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine(&v477, v435);
                          }
                          else
                          {
                            v440 = v439 & 0xFFFFFFFFFFFFFFFCLL;
                            if ((v439 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                            {
                              if ((v477 & 1) != 0)
                              {
                                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(&v477, v440);
                              }
                              else if ((v477 & 0xFFFFFFFFFFFFFFFCLL) != v440)
                              {
                                if ((v477 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                                {
                                  v464 = v439 & 0xFFFFFFFFFFFFFFFCLL;
                                  v442 = WTF::fastMalloc((WTF *)0x28);
                                  *(_QWORD *)v442 = 0x400000002;
                                  v443 = v477;
                                  *(_QWORD *)(v442 + 8) = v477 & 0xFFFFFFFFFFFFFFFCLL;
                                  *(_QWORD *)(v442 + 16) = v464;
                                  v441 = v443 & 2 | (unint64_t)v442 | 1;
                                }
                                else
                                {
                                  v441 = v477 & 2 | v440;
                                }
                                v477 = v441;
                              }
                            }
                          }
                        }
                      }
                      v434 = v473;
                      v435 += 4;
                      v436 -= 32;
                    }
                    while (v436);
                    if ((v466 & 1) == 0 && (v477 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                    {
                      v448 = *v465;
                      if ((WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::isSubsetOf((uint64_t *)(v431 + 24), &v477) & 1) == 0)
                      if (v455)
                      {
                        *(_QWORD *)&v478 = v42;
                        v481[0] = v455;
                        WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v475, (uint64_t *)&v478, v481, v34, v35, v36, v37, v38, (uint64_t)v480);
                      }
                    }
                    else
                    {
LABEL_623:
                    }
                    v331 = v477;
                    if ((v477 & 1) == 0)
                      goto LABEL_20;
                    goto LABEL_625;
                  case 0x9B:
                    v149 = *(_QWORD *)(v42 + 32);
                    v150 = v149 & 0xFF00FFFFFFFFFFFFLL;
                    v46 = v151;
                    if (!v151 || *((_DWORD *)v151 + 2) != 1)
                    {
                      v281 = *v475;
                      if (!*v475)
                        goto LABEL_21;
                      v282 = *(_QWORD *)(v42 + 24);
                      v283 = v282 & 0xFF00FFFFFFFFFFFFLL;
                      v284 = *(_DWORD *)(v281 - 8);
                      v285 = ((v282 & 0xFF00FFFFFFFFFFFFLL) + ~(v282 << 32)) ^ (((v282 & 0xFF00FFFFFFFFFFFFLL)
                                                                               + ~(v282 << 32)) >> 22);
                      v286 = 9 * ((v285 + ~(v285 << 13)) ^ ((v285 + ~(v285 << 13)) >> 8));
                      v287 = (v286 ^ (v286 >> 15)) + ~((v286 ^ (v286 >> 15)) << 27);
                      v288 = v284 & ((v287 >> 31) ^ v287);
                      v289 = *(_QWORD *)(v281 + 16 * v288);
                      if (v289 != v283)
                      {
                        v290 = 1;
                        while (v289)
                        {
                          v288 = ((_DWORD)v288 + v290) & v284;
                          v289 = *(_QWORD *)(v281 + 16 * v288);
                          ++v290;
                          if (v289 == v283)
                            goto LABEL_395;
                        }
                        v288 = *(unsigned int *)(v281 - 4);
                      }
LABEL_395:
                      if (v288 != *(_DWORD *)(v281 - 4))
                      {
                        v32 = *(_QWORD *)(v281 + 16 * v288 + 8);
                        if (v32)
                        {
                          v281 = *v475;
                          if (!*v475)
                            goto LABEL_21;
                          v149 = *(_QWORD *)(v42 + 32);
                          v150 = v149 & 0xFF00FFFFFFFFFFFFLL;
                          v284 = *(_DWORD *)(v281 - 8);
                        }
                      }
                      v340 = (v150 + ~(v149 << 32)) ^ ((v150 + ~(v149 << 32)) >> 22);
                      v341 = 9 * ((v340 + ~(v340 << 13)) ^ ((v340 + ~(v340 << 13)) >> 8));
                      v342 = (v341 ^ (v341 >> 15)) + ~((v341 ^ (v341 >> 15)) << 27);
                      v343 = v284 & ((v342 >> 31) ^ v342);
                      v344 = *(_QWORD *)(v281 + 16 * v343);
                      if (v344 != v150)
                      {
                        v345 = 1;
                        while (v344)
                        {
                          v343 = ((_DWORD)v343 + v345) & v284;
                          v344 = *(_QWORD *)(v281 + 16 * v343);
                          ++v345;
                          if (v344 == v150)
                            goto LABEL_402;
                        }
                        v343 = *(unsigned int *)(v281 - 4);
                      }
LABEL_402:
                      if (v343 != *(_DWORD *)(v281 - 4))
                      {
                        v32 = *(_QWORD *)(v281 + 16 * v343 + 8);
                        if (v32)
                        {
                          v281 = *v475;
                          if (!*v475)
                            goto LABEL_21;
                          v284 = *(_DWORD *)(v281 - 8);
                        }
                      }
                      v346 = *(_QWORD *)(v42 + 40);
                      v347 = v346 & 0xFF00FFFFFFFFFFFFLL;
                      v348 = ((v346 & 0xFF00FFFFFFFFFFFFLL) + ~(v346 << 32)) ^ (((v346 & 0xFF00FFFFFFFFFFFFLL)
                                                                               + ~(v346 << 32)) >> 22);
                      v349 = 9 * ((v348 + ~(v348 << 13)) ^ ((v348 + ~(v348 << 13)) >> 8));
                      v350 = (v349 ^ (v349 >> 15)) + ~((v349 ^ (v349 >> 15)) << 27);
                      v351 = v284 & ((v350 >> 31) ^ v350);
                      v352 = *(_QWORD *)(v281 + 16 * v351);
                      if (v352 != v347)
                      {
                        v353 = 1;
                        while (v352)
                        {
                          v351 = ((_DWORD)v351 + v353) & v284;
                          v352 = *(_QWORD *)(v281 + 16 * v351);
                          ++v353;
                          if (v352 == v347)
                            goto LABEL_409;
                        }
                        v351 = *(unsigned int *)(v281 - 4);
                      }
LABEL_409:
                      if (v351 == *(_DWORD *)(v281 - 4))
                        goto LABEL_21;
                      v152 = v281 + 16 * v351;
                      goto LABEL_178;
                    }
                    v182 = *(_DWORD *)(*(_QWORD *)(v42 + 72) + 4);
                    LODWORD(v481[0]) = 11;
                    HIDWORD(v481[0]) = v182;
                    v183 = *(_QWORD *)(v42 + 40);
                    v184 = v183 & 0xFF00FFFFFFFFFFFFLL;
                    *(_QWORD *)&v478 = v183 & 0xFF00FFFFFFFFFFFFLL;
                    *((_QWORD *)&v478 + 1) = 0;
                    if ((v183 & 0xFF00FFFFFFFFFFFFLL) == 0)
                      goto LABEL_94;
                    v180 = *(unsigned __int16 *)((v183 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                    if (v180 > 2)
                      goto LABEL_94;
                    v181 = *(_QWORD *)(v184 + 72);
                    *((_QWORD *)&v478 + 1) = v181;
                    if (!(_DWORD)v180)
                      goto LABEL_94;
                    if ((_DWORD)v180 == 1)
                      goto LABEL_627;
                    break;
                  case 0x9C:
                  case 0x9D:
                  case 0x9E:
                  case 0x9F:
                  case 0xA0:
                  case 0xA1:
                  case 0xA2:
                  case 0xA3:
                  case 0xA4:
                    goto LABEL_18;
                  case 0xA5:
                    v291 = *(_QWORD *)(v42 + 24);
                    v292 = v291 & 0xFF00FFFFFFFFFFFFLL;
                    v46 = v293;
                    if (v293 && (*((_DWORD *)v293 + 2) - 3) < 3)
                    {
                      v204 = 0;
                      v205 = 8;
                      goto LABEL_251;
                    }
                    v78 = *v475;
                    if (!*v475)
                      goto LABEL_21;
                    v294 = *(_DWORD *)(v78 - 8);
                    v295 = (v292 + ~(v291 << 32)) ^ ((v292 + ~(v291 << 32)) >> 22);
                    v296 = 9 * ((v295 + ~(v295 << 13)) ^ ((v295 + ~(v295 << 13)) >> 8));
                    v297 = (v296 ^ (v296 >> 15)) + ~((v296 ^ (v296 >> 15)) << 27);
                    v217 = v294 & ((v297 >> 31) ^ v297);
                    v298 = *(_QWORD *)(v78 + 16 * v217);
                    if (v298 != v292)
                    {
                      v299 = 1;
                      do
                      {
                        if (!v298)
                          goto LABEL_341;
                        v217 = ((_DWORD)v217 + v299) & v294;
                        v298 = *(_QWORD *)(v78 + 16 * v217);
                        ++v299;
                      }
                      while (v298 != v292);
                    }
                    goto LABEL_176;
                  case 0xA6:
                    v404 = (JSC::DFG::Node *)(*(_QWORD *)(v42 + 24) & 0xFF00FFFFFFFFFFFFLL);
                    v46 = v332;
                    if (!v332 || *((_DWORD *)v332 + 2) != 2)
                      goto LABEL_370;
                    v204 = 0;
                    v205 = 1;
                    goto LABEL_251;
                  default:
                    if (v43 != 135)
                    {
                      if (v43 != 134)
                        goto LABEL_18;
                      v404 = (JSC::DFG::Node *)(*(_QWORD *)(v42 + 24) & 0xFF00FFFFFFFFFFFFLL);
                      v46 = v405;
                      if (!v405 || (*((_DWORD *)v405 + 2) - 3) >= 3)
                      {
                        v233 = v473;
                        goto LABEL_371;
                      }
                      v204 = 0;
                      v205 = 9;
                      goto LABEL_251;
                    }
                    v404 = (JSC::DFG::Node *)(*(_QWORD *)(v42 + 24) & 0xFF00FFFFFFFFFFFFLL);
                    v46 = v253;
                    if (!v253 || *((_DWORD *)v253 + 2) != 1)
                      goto LABEL_370;
                    v481[0] = 13;
                    v254 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(v42 + 72) + 8), v33, v34, v35, v36, v37, v38);
                    *(_QWORD *)&v478 = 0;
                    *((_QWORD *)&v478 + 1) = v254;
                    WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v480, (uint64_t *)&v479, v481, &v478);
                    v480[0] = *(_QWORD *)(*(_QWORD *)(v42 + 72) + 8);
                    if ((v480[0] & 1) != 0)
                      WTF::fastFree(v480[0] & 0xFFFFFFFFFFFFFFFCLL, (void *)v32, v33, v34, v35, v36, v37, v38);
                    goto LABEL_21;
                }
                goto LABEL_649;
              }
              if (*(unsigned __int16 *)(v42 + 18) <= 0x10Du)
              {
                switch(*(_WORD *)(v42 + 18))
                {
                  case 0xAB:
                    v201 = *(_QWORD *)(v42 + 24);
                    v202 = v201 & 0xFF00FFFFFFFFFFFFLL;
                    v46 = v203;
                    if (v203 && *((_DWORD *)v203 + 2) == 2)
                    {
                      v204 = *(_DWORD *)(v42 + 72);
                      v205 = 6;
                      goto LABEL_251;
                    }
                    v78 = *v475;
                    if (!*v475)
                      goto LABEL_21;
                    v234 = *(_DWORD *)(v78 - 8);
                    v235 = (v202 + ~(v201 << 32)) ^ ((v202 + ~(v201 << 32)) >> 22);
                    v236 = 9 * ((v235 + ~(v235 << 13)) ^ ((v235 + ~(v235 << 13)) >> 8));
                    v237 = (v236 ^ (v236 >> 15)) + ~((v236 ^ (v236 >> 15)) << 27);
                    v217 = v234 & ((v237 >> 31) ^ v237);
                    v238 = *(_QWORD *)(v78 + 16 * v217);
                    if (v238 == v202)
                      goto LABEL_176;
                    v239 = 1;
                    break;
                  case 0xAC:
                    v85 = (JSC::DFG::Node *)(*(_QWORD *)(v42 + 24) & 0xFF00FFFFFFFFFFFFLL);
                    v46 = v227;
                    if (!v227 || *((_DWORD *)v227 + 2) != 2)
                      goto LABEL_283;
                    v228 = *(_DWORD *)(v42 + 72);
                    LODWORD(v481[0]) = 6;
                    HIDWORD(v481[0]) = v228;
                    v229 = *(_QWORD *)(v42 + 32);
                    v230 = v229 & 0xFF00FFFFFFFFFFFFLL;
                    *(_QWORD *)&v478 = v229 & 0xFF00FFFFFFFFFFFFLL;
                    *((_QWORD *)&v478 + 1) = 0;
                    if ((v229 & 0xFF00FFFFFFFFFFFFLL) == 0)
                      goto LABEL_94;
                    v180 = *(unsigned __int16 *)((v229 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                    if (v180 > 2)
                      goto LABEL_94;
                    v181 = *(_QWORD *)(v230 + 72);
                    *((_QWORD *)&v478 + 1) = v181;
                    if (!(_DWORD)v180)
                      goto LABEL_94;
                    if ((_DWORD)v180 != 1)
                      goto LABEL_649;
                    goto LABEL_627;
                  case 0xAD:
                  case 0xAE:
                  case 0xAF:
                  case 0xB0:
                  case 0xB1:
                  case 0xB2:
                    goto LABEL_18;
                  case 0xB3:
                    v404 = (JSC::DFG::Node *)(*(_QWORD *)(v42 + 24) & 0xFF00FFFFFFFFFFFFLL);
                    v46 = v358;
                    if (!v358 || *((_DWORD *)v358 + 2) != 8)
                      goto LABEL_370;
                    v204 = 0;
                    v205 = 19;
                    goto LABEL_251;
                  case 0xB4:
                    v85 = (JSC::DFG::Node *)(*(_QWORD *)(v42 + 24) & 0xFF00FFFFFFFFFFFFLL);
                    v231 = v473;
                    v46 = v359;
                    if (!v359 || *((_DWORD *)v359 + 2) != 8)
                      goto LABEL_284;
                    v481[0] = 19;
                    v339 = *(_QWORD *)(v42 + 32);
                    goto LABEL_393;
                  default:
                    if (v43 == 259)
                    {
                      v480[0] = *(_QWORD *)(v42 + 72);
                      if ((v480[0] & 1) != 0)
                        WTF::fastFree(v480[0] & 0xFFFFFFFFFFFFFFFCLL, v308, v309, v310, v311, v312, v313, v314);
                      v481[0] = 13;
                      v315 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), *(_QWORD *)(v42 + 72), v309, v310, v311, v312, v313, v314);
                      *(_QWORD *)&v478 = 0;
                      *((_QWORD *)&v478 + 1) = v315;
                      goto LABEL_94;
                    }
                    if (v43 != 268)
                      goto LABEL_18;
                    v401 = *(unsigned __int8 *)(*(_QWORD *)(v42 + 72) + 9);
                    switch(v401)
                    {
                      case '@':
                        break;
                      case 'B':
                      case 'A':
                        break;
                      case 'D':
                        break;
                      default:
                        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 32), (JSC::DFG::Node *)v42, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x3DB, "void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1379:25), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1380:25)]", "Bad structure");
                        __break(0xC471u);
                        JUMPOUT(0x1984E5828);
                    }
                    v46 = v402;
                    goto LABEL_21;
                }
                while (v238)
                {
                  v217 = ((_DWORD)v217 + v239) & v234;
                  v238 = *(_QWORD *)(v78 + 16 * v217);
                  ++v239;
                  if (v238 == v202)
                    goto LABEL_176;
                }
LABEL_341:
                v217 = *(unsigned int *)(v78 - 4);
LABEL_176:
                if (v217 != *(_DWORD *)(v78 - 4))
                {
                  v152 = v78 + 16 * v217;
LABEL_178:
                  v32 = *(_QWORD *)(v152 + 8);
                  if (v32)
                }
                goto LABEL_21;
              }
              if (*(unsigned __int16 *)(v42 + 18) > 0x157u)
              {
                v85 = (JSC::DFG::Node *)(*(_QWORD *)(v42 + 24) & 0xFF00FFFFFFFFFFFFLL);
                v46 = v86;
                if (!v86 || *((_DWORD *)v86 + 2) != 7)
                {
LABEL_283:
                  v231 = v473;
LABEL_284:
                  v232 = (JSC::DFG::Node *)(*(_QWORD *)(v42 + 32) & 0xFF00FFFFFFFFFFFFLL);
                  v233 = v231;
LABEL_285:
                  goto LABEL_21;
                }
                v93 = *(_DWORD *)(v42 + 72);
                LODWORD(v481[0]) = 7;
                HIDWORD(v481[0]) = v93;
                v94 = *(_QWORD *)(v42 + 32);
                v95 = v94 & 0xFF00FFFFFFFFFFFFLL;
                *(_QWORD *)&v478 = v94 & 0xFF00FFFFFFFFFFFFLL;
                *((_QWORD *)&v478 + 1) = 0;
                if ((v94 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  goto LABEL_94;
                v180 = *(unsigned __int16 *)((v94 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                if (v180 > 2)
                  goto LABEL_94;
                v181 = *(_QWORD *)(v95 + 72);
                *((_QWORD *)&v478 + 1) = v181;
                if (!(_DWORD)v180)
                  goto LABEL_94;
                if ((_DWORD)v180 == 1)
                {
LABEL_627:
                  *((_QWORD *)&v478 + 1) = v180 | v181;
LABEL_94:
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v480, (uint64_t *)&v479, v481, &v478);
                  goto LABEL_21;
                }
LABEL_649:
                v180 = 2;
                goto LABEL_627;
              }
              switch(v43)
              {
                case 0x157u:
                  v404 = (JSC::DFG::Node *)(*(_QWORD *)(v42 + 24) & 0xFF00FFFFFFFFFFFFLL);
                  v46 = v300;
                  if (v300 && *((_DWORD *)v300 + 2) == 7)
                  {
                    v204 = *(_DWORD *)(v42 + 72);
                    v205 = 7;
LABEL_251:
                    v206 = v46[2];
                    if (v206)
                    {
                      v207 = *(_DWORD *)(v206 - 8);
                      v208 = v207 & (v204 + v205);
                      v209 = (int *)(v206 + 16 * v208);
                      v210 = *v209;
                      v211 = v209[1];
                      if (*v209 == v205 && v211 == v204)
                      {
LABEL_640:
                        v458 = *(_QWORD *)(v206 + 16 * v208 + 8);
                        if (v458)
                        {
                          *(_QWORD *)&v478 = v42;
                          v481[0] = v458;
                          WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v475, (uint64_t *)&v478, v481, v34, v35, v36, v37, v38, (uint64_t)v480);
                        }
                      }
                      else
                      {
                        v213 = 1;
                        while (v210 | v211)
                        {
                          v208 = ((_DWORD)v208 + v213) & v207;
                          v456 = (int *)(v206 + 16 * v208);
                          v210 = *v456;
                          v211 = v456[1];
                          ++v213;
                          if (v210 == v205 && v211 == v204)
                            goto LABEL_640;
                        }
                      }
                    }
                    goto LABEL_21;
                  }
LABEL_370:
                  v233 = v473;
LABEL_371:
                  v232 = v404;
                  goto LABEL_285;
                case 0x10Eu:
                  v481[0] = 18;
                  v338 = *(_QWORD *)(v42 + 72);
                  *(_QWORD *)&v478 = 0;
                  *((_QWORD *)&v478 + 1) = v338;
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v480, (uint64_t *)&v479, v481, &v478);
                  v481[0] = 19;
                  v339 = *(_QWORD *)(v42 + 24);
LABEL_393:
                  JSC::DFG::LazyNode::LazyNode(&v478, (JSC::DFG::Node *)(v339 & 0xFF00FFFFFFFFFFFFLL));
                  goto LABEL_94;
                case 0x117u:
                  goto LABEL_33;
              }
            }
            else
            {
              if (v43 - 420 < 7)
                goto LABEL_33;
              if (v43 == 345)
              {
                *(_QWORD *)&v478 = **(_QWORD **)(v42 + 72);
                v261 = *(_QWORD *)(v478 + 40);
                if ((v261 & 1) != 0)
                  v262 = (v261 >> 1) & 3;
                else
                  v262 = *(unsigned __int8 *)(v261 + 4);
                LOBYTE(v481[0]) = v262 != 2;
                WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(v480, v468, (uint64_t *)&v478, v481, v35, v36, v37, v38);
                if (!*(_BYTE *)(v480[0] + 8))
                {
                  v481[0] = 2;
                  v269 = *(_QWORD *)(v42 + 72);
                  *(_QWORD *)&v478 = 0;
                  *((_QWORD *)&v478 + 1) = v269;
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v480, (uint64_t *)&v479, v481, &v478);
                  v481[0] = 1;
                  v270 = *(_QWORD *)(v42 + 24);
                  v271 = v270 & 0xFF00FFFFFFFFFFFFLL;
                  *(_QWORD *)&v478 = v270 & 0xFF00FFFFFFFFFFFFLL;
                  *((_QWORD *)&v478 + 1) = 0;
                  if ((v270 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v334 = *(unsigned __int16 *)((v270 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                    if (v334 <= 2)
                    {
                      v403 = *(_QWORD *)(v271 + 72);
                      *((_QWORD *)&v478 + 1) = v403;
                      if ((_DWORD)v334)
                      {
                        if ((_DWORD)v334 != 1)
                          v334 = 2;
                        *((_QWORD *)&v478 + 1) = v334 | v403;
                      }
                    }
                  }
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v480, (uint64_t *)&v479, v481, &v478);
                  v272 = **(_QWORD **)(v42 + 72);
                  v279 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), **(_QWORD **)(v42 + 80), v273, v274, v275, v276, v277, v278);
                  *(_QWORD *)&v478 = 0;
                  *((_QWORD *)&v478 + 1) = v279;
                  if (*(_DWORD *)(v272 + 16) != -1)
                  {
                    v280 = 0;
                    do
                    {
                      LODWORD(v481[0]) = 6;
                      HIDWORD(v481[0]) = v280;
                      WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode&>((uint64_t)v480, (uint64_t *)&v479, v481, &v478);
                      ++v280;
                    }
                    while (v280 < *(_DWORD *)(v272 + 16) + 1);
                  }
                  goto LABEL_21;
                }
LABEL_562:
                goto LABEL_20;
              }
              if (v43 - 359 < 4)
              {
                *(_QWORD *)&v478 = **(_QWORD **)(v42 + 72);
                v316 = *(_QWORD *)(v478 + 112);
                if ((v316 & 1) != 0)
                  v317 = (v316 >> 1) & 3;
                else
                  v317 = *(unsigned __int8 *)(v316 + 4);
                LOBYTE(v481[0]) = v317 != 2;
                WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(v480, v468, (uint64_t *)&v478, v481, v35, v36, v37, v38);
                if (!*(_BYTE *)(v480[0] + 8))
                {
                  v318 = *(unsigned __int16 *)(v42 + 18) - 360;
                  if (v318 > 2)
                    v319 = 3;
                  else
                    v319 = dword_1991563D8[(__int16)v318];
                  v481[0] = 9;
                  v354 = *(_QWORD *)(v42 + 72);
                  *(_QWORD *)&v478 = 0;
                  *((_QWORD *)&v478 + 1) = v354;
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v480, (uint64_t *)&v479, v481, &v478);
                  v481[0] = 8;
                  v355 = *(_QWORD *)(v42 + 24);
                  v356 = v355 & 0xFF00FFFFFFFFFFFFLL;
                  *(_QWORD *)&v478 = v355 & 0xFF00FFFFFFFFFFFFLL;
                  *((_QWORD *)&v478 + 1) = 0;
                  if ((v355 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v357 = *(unsigned __int16 *)((v355 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                    if (v357 <= 2)
                    {
                      v414 = *(_QWORD *)(v356 + 72);
                      *((_QWORD *)&v478 + 1) = v414;
                      if ((_DWORD)v357)
                      {
                        if ((_DWORD)v357 != 1)
                          v357 = 2;
                        *((_QWORD *)&v478 + 1) = v357 | v414;
                      }
                    }
                  }
                  goto LABEL_94;
                }
                goto LABEL_562;
              }
            }
LABEL_18:
            v44 = *(_QWORD *)(v42 + 24);
            if ((*(_BYTE *)(v42 + 56) & 0x10) != 0)
            {
              v136 = *(_QWORD *)(v42 + 32);
              if ((int)v136 + (int)v44 > v44)
              {
                v137 = *(_QWORD *)(a1 + 32);
                v138 = *(_QWORD *)(v42 + 24);
                do
                {
                  if (v138 >= *(unsigned int *)(v137 + 164))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984E5AFCLL);
                  }
                  v139 = *(_QWORD *)(*(_QWORD *)(v137 + 152) + 8 * v138);
                  v140 = v139 & 0xFF00FFFFFFFFFFFFLL;
                  if ((v139 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v141 = *v475;
                    if (*v475)
                    {
                      v142 = *(_DWORD *)(v141 - 8);
                      v143 = (v140 + ~(v139 << 32)) ^ ((v140 + ~(v139 << 32)) >> 22);
                      v144 = 9 * ((v143 + ~(v143 << 13)) ^ ((v143 + ~(v143 << 13)) >> 8));
                      v145 = (v144 ^ (v144 >> 15)) + ~((v144 ^ (v144 >> 15)) << 27);
                      v146 = v142 & ((v145 >> 31) ^ v145);
                      v147 = *(_QWORD *)(v141 + 16 * v146);
                      if (v147 != v140)
                      {
                        v148 = 1;
                        while (v147)
                        {
                          v146 = ((_DWORD)v146 + v148) & v142;
                          v147 = *(_QWORD *)(v141 + 16 * v146);
                          ++v148;
                          if (v147 == v140)
                            goto LABEL_171;
                        }
                        v146 = *(unsigned int *)(v141 - 4);
                      }
LABEL_171:
                      if (v146 != *(_DWORD *)(v141 - 4))
                      {
                        v32 = *(_QWORD *)(v141 + 16 * v146 + 8);
                        if (v32)
                        {
                          v44 = *(_QWORD *)(v42 + 24);
                          v136 = *(_QWORD *)(v42 + 32);
                        }
                      }
                    }
                  }
                  v46 = 0;
                  ++v138;
                }
                while (v138 < (v44 + v136));
                goto LABEL_21;
              }
              goto LABEL_20;
            }
            v45 = v44 & 0xFF00FFFFFFFFFFFFLL;
            if ((v44 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v79 = *v475;
              if (*v475)
              {
                v104 = *(_DWORD *)(v79 - 8);
                v105 = (v45 + ~(v44 << 32)) ^ ((v45 + ~(v44 << 32)) >> 22);
                v106 = 9 * ((v105 + ~(v105 << 13)) ^ ((v105 + ~(v105 << 13)) >> 8));
                v107 = (v106 ^ (v106 >> 15)) + ~((v106 ^ (v106 >> 15)) << 27);
                v108 = v104 & ((v107 >> 31) ^ v107);
                v109 = *(_QWORD *)(v79 + 16 * v108);
                if (v109 != v45)
                {
                  v110 = 1;
                  while (v109)
                  {
                    v108 = ((_DWORD)v108 + v110) & v104;
                    v109 = *(_QWORD *)(v79 + 16 * v108);
                    ++v110;
                    if (v109 == v45)
                      goto LABEL_114;
                  }
                  v108 = *(unsigned int *)(v79 - 4);
                }
LABEL_114:
                if (v108 != *(_DWORD *)(v79 - 4))
                {
                  v32 = *(_QWORD *)(v79 + 16 * v108 + 8);
                  if (v32)
                }
              }
              v80 = *(_QWORD *)(v42 + 32);
              v81 = v80 & 0xFF00FFFFFFFFFFFFLL;
              if ((v80 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v82 = *v475;
                if (*v475)
                {
                  v194 = *(_DWORD *)(v82 - 8);
                  v195 = (v81 + ~(v80 << 32)) ^ ((v81 + ~(v80 << 32)) >> 22);
                  v196 = 9 * ((v195 + ~(v195 << 13)) ^ ((v195 + ~(v195 << 13)) >> 8));
                  v197 = (v196 ^ (v196 >> 15)) + ~((v196 ^ (v196 >> 15)) << 27);
                  v198 = v194 & ((v197 >> 31) ^ v197);
                  v199 = *(_QWORD *)(v82 + 16 * v198);
                  if (v199 != v81)
                  {
                    v200 = 1;
                    while (v199)
                    {
                      v198 = ((_DWORD)v198 + v200) & v194;
                      v199 = *(_QWORD *)(v82 + 16 * v198);
                      ++v200;
                      if (v199 == v81)
                        goto LABEL_269;
                    }
                    v198 = *(unsigned int *)(v82 - 4);
                  }
LABEL_269:
                  if (v198 != *(_DWORD *)(v82 - 4))
                  {
                    v32 = *(_QWORD *)(v82 + 16 * v198 + 8);
                    if (v32)
                  }
                }
                v83 = *(_QWORD *)(v42 + 40);
                v84 = v83 & 0xFF00FFFFFFFFFFFFLL;
                if ((v83 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v245 = *v475;
                  if (*v475)
                  {
                    v246 = *(_DWORD *)(v245 - 8);
                    v247 = (v84 + ~(v83 << 32)) ^ ((v84 + ~(v83 << 32)) >> 22);
                    v248 = 9 * ((v247 + ~(v247 << 13)) ^ ((v247 + ~(v247 << 13)) >> 8));
                    v249 = (v248 ^ (v248 >> 15)) + ~((v248 ^ (v248 >> 15)) << 27);
                    v250 = v246 & ((v249 >> 31) ^ v249);
                    v251 = *(_QWORD *)(v245 + 16 * v250);
                    if (v251 != v84)
                    {
                      v252 = 1;
                      while (v251)
                      {
                        v250 = ((_DWORD)v250 + v252) & v246;
                        v251 = *(_QWORD *)(v245 + 16 * v250);
                        ++v252;
                        if (v251 == v84)
                          goto LABEL_390;
                      }
                      v250 = *(unsigned int *)(v245 - 4);
                    }
LABEL_390:
                    if (v250 != *(_DWORD *)(v245 - 4))
                    {
                      v240 = v245 + 16 * v250;
                      goto LABEL_296;
                    }
                  }
                }
              }
            }
            goto LABEL_20;
          }
          if (v43 == 20)
            goto LABEL_33;
          if (v43 - 132 < 2)
          {
            v132 = *(_QWORD *)(v42 + 24);
            v133 = v132 & 0xFF00FFFFFFFFFFFFLL;
            if (v134)
            {
              v320 = (uint64_t)v134;
              if (*((_DWORD *)v134 + 2) == 1)
              {
                v321 = v134[3];
                v480[0] = 0;
                if ((v321 & 1) == 0 || v321 == 4)
                  v480[0] = v321 & 0xFFFFFFFFFFFFFFFDLL;
                else
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v480, v134 + 3);
                v322 = *(uint64_t **)(v42 + 72);
                *(_QWORD *)&v478 = 0;
                v323 = *v322;
                if ((*v322 & 1) != 0 && v323 != 4)
                {
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v478, v322);
                  v323 = v478;
                }
                *(_QWORD *)&v478 = v323 & 0xFFFFFFFFFFFFFFFDLL;
                JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)v480, (const JSC::DFG::StructureAbstractValue *)&v478, v33, v34, v35, v36, v37, v38);
                if ((v478 & 1) != 0)
                  WTF::fastFree(v478 & 0xFFFFFFFFFFFFFFFCLL, v324, v325, v326, v327, v328, v329, v330);
                if ((v480[0] & 0xFFFFFFFFFFFFFFFDLL) != 0)
                else
                v331 = v480[0];
                if ((v480[0] & 1) != 0)
LABEL_625:
                  WTF::fastFree(v331 & 0xFFFFFFFFFFFFFFFCLL, (void *)v32, v33, v34, v35, v36, v37, v38);
                goto LABEL_20;
              }
            }
            v135 = *v475;
            if (!*v475)
              goto LABEL_20;
            v220 = *(_DWORD *)(v135 - 8);
            v221 = (v133 + ~(v132 << 32)) ^ ((v133 + ~(v132 << 32)) >> 22);
            v222 = 9 * ((v221 + ~(v221 << 13)) ^ ((v221 + ~(v221 << 13)) >> 8));
            v223 = (v222 ^ (v222 >> 15)) + ~((v222 ^ (v222 >> 15)) << 27);
            v224 = v220 & ((v223 >> 31) ^ v223);
            v225 = *(_QWORD *)(v135 + 16 * v224);
            if (v225 != v133)
            {
              v226 = 1;
              while (v225)
              {
                v224 = ((_DWORD)v224 + v226) & v220;
                v225 = *(_QWORD *)(v135 + 16 * v224);
                ++v226;
                if (v225 == v133)
                  goto LABEL_294;
              }
LABEL_293:
              v224 = *(unsigned int *)(v135 - 4);
            }
LABEL_294:
            if (v224 == *(_DWORD *)(v135 - 4))
              goto LABEL_20;
            v240 = v135 + 16 * v224;
            goto LABEL_296;
          }
          if (v43 - 24 >= 2)
            goto LABEL_18;
          v171 = *(_QWORD *)(v42 + 24);
          if ((*(_BYTE *)(v42 + 56) & 0x10) != 0)
          {
            v445 = *(_QWORD *)(v42 + 32);
            if ((int)v445 + (int)v171 > v171)
            {
              v446 = *(_QWORD *)(a1 + 32);
              v447 = *(_QWORD *)(v42 + 24);
              do
              {
                if (v447 >= *(unsigned int *)(v446 + 164))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984E5B04);
                }
                v32 = *(_QWORD *)(*(_QWORD *)(v446 + 152) + 8 * v447);
                if ((v32 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v171 = *(_QWORD *)(v42 + 24);
                  v445 = *(_QWORD *)(v42 + 32);
                }
                v46 = 0;
                ++v447;
              }
              while (v447 < (v171 + v445));
              goto LABEL_21;
            }
            goto LABEL_20;
          }
          v172 = v171 & 0xFF00FFFFFFFFFFFFLL;
          if ((v171 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            if ((v171 & 0x1000000000000) == 0)
            {
              v173 = (v171 >> 50) & 0x3F;
              if ((_DWORD)v173)
              {
                if (v173 > 0x34)
                  goto LABEL_657;
                if (((1 << v173) & 0x12798001880F84) == 0)
                {
                  if (((1 << v173) & 0xD867FFE77F07ALL) == 0)
                    goto LABEL_657;
                  v406 = *v475;
                  if (*v475)
                  {
                    v407 = *(_DWORD *)(v406 - 8);
                    v408 = (v172 + ~(v171 << 32)) ^ ((v172 + ~(v171 << 32)) >> 22);
                    v409 = 9 * ((v408 + ~(v408 << 13)) ^ ((v408 + ~(v408 << 13)) >> 8));
                    v410 = (v409 ^ (v409 >> 15)) + ~((v409 ^ (v409 >> 15)) << 27);
                    v411 = v407 & ((v410 >> 31) ^ v410);
                    v412 = *(_QWORD *)(v406 + 16 * v411);
                    if (v412 != v172)
                    {
                      v413 = 1;
                      while (v412)
                      {
                        v411 = ((_DWORD)v411 + v413) & v407;
                        v412 = *(_QWORD *)(v406 + 16 * v411);
                        ++v413;
                        if (v412 == v172)
                          goto LABEL_565;
                      }
                      v411 = *(unsigned int *)(v406 - 4);
                    }
LABEL_565:
                    if (v411 != *(_DWORD *)(v406 - 4))
                    {
                      v32 = *(_QWORD *)(v406 + 16 * v411 + 8);
                      if (v32)
                    }
                  }
                }
              }
            }
            v174 = *(_QWORD *)(v42 + 32);
            v175 = v174 & 0xFF00FFFFFFFFFFFFLL;
            if ((v174 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              if ((v174 & 0x1000000000000) == 0)
              {
                v176 = (v174 >> 50) & 0x3F;
                if ((_DWORD)v176)
                {
                  if (v176 > 0x34)
                    goto LABEL_657;
                  if (((1 << v176) & 0x12798001880F84) == 0)
                  {
                    if (((1 << v176) & 0xD867FFE77F07ALL) == 0)
                      goto LABEL_657;
                    v415 = *v475;
                    if (*v475)
                    {
                      v416 = *(_DWORD *)(v415 - 8);
                      v417 = (v175 + ~(v174 << 32)) ^ ((v175 + ~(v174 << 32)) >> 22);
                      v418 = 9 * ((v417 + ~(v417 << 13)) ^ ((v417 + ~(v417 << 13)) >> 8));
                      v419 = (v418 ^ (v418 >> 15)) + ~((v418 ^ (v418 >> 15)) << 27);
                      v420 = v416 & ((v419 >> 31) ^ v419);
                      v421 = *(_QWORD *)(v415 + 16 * v420);
                      if (v421 != v175)
                      {
                        v422 = 1;
                        while (v421)
                        {
                          v420 = ((_DWORD)v420 + v422) & v416;
                          v421 = *(_QWORD *)(v415 + 16 * v420);
                          ++v422;
                          if (v421 == v175)
                            goto LABEL_571;
                        }
                        v420 = *(unsigned int *)(v415 - 4);
                      }
LABEL_571:
                      if (v420 != *(_DWORD *)(v415 - 4))
                      {
                        v32 = *(_QWORD *)(v415 + 16 * v420 + 8);
                        if (v32)
                      }
                    }
                  }
                }
              }
              v46 = 0;
              v177 = *(_QWORD *)(v42 + 40);
              v178 = v177 & 0xFF00FFFFFFFFFFFFLL;
              if ((v177 & 0xFF00FFFFFFFFFFFFLL) == 0)
                goto LABEL_21;
              if ((v177 & 0x1000000000000) != 0)
                goto LABEL_21;
              v46 = 0;
              v179 = (v177 >> 50) & 0x3F;
              if (!(_DWORD)v179)
                goto LABEL_21;
              if (v179 > 0x34)
                goto LABEL_657;
              if (((1 << v179) & 0x12798001880F84) != 0)
                goto LABEL_21;
              if (((1 << v179) & 0xD867FFE77F07ALL) == 0)
              {
LABEL_657:
                __break(0xC471u);
                JUMPOUT(0x1984E5B24);
              }
              v423 = *v475;
              if (*v475)
              {
                v424 = *(_DWORD *)(v423 - 8);
                v425 = (v178 + ~(v177 << 32)) ^ ((v178 + ~(v177 << 32)) >> 22);
                v426 = 9 * ((v425 + ~(v425 << 13)) ^ ((v425 + ~(v425 << 13)) >> 8));
                v427 = (v426 ^ (v426 >> 15)) + ~((v426 ^ (v426 >> 15)) << 27);
                v428 = v424 & ((v427 >> 31) ^ v427);
                v429 = *(_QWORD *)(v423 + 16 * v428);
                if (v429 != v178)
                {
                  v430 = 1;
                  while (v429)
                  {
                    v428 = ((_DWORD)v428 + v430) & v424;
                    v429 = *(_QWORD *)(v423 + 16 * v428);
                    ++v430;
                    if (v429 == v178)
                      goto LABEL_614;
                  }
                  v428 = *(unsigned int *)(v423 - 4);
                }
LABEL_614:
                if (v428 != *(_DWORD *)(v423 - 4))
                {
                  v240 = v423 + 16 * v428;
LABEL_296:
                  v32 = *(_QWORD *)(v240 + 8);
                  if (v32)
                }
              }
            }
          }
LABEL_20:
          v46 = 0;
LABEL_21:
          v47 = (uint64_t)v479;
          if (!v479)
            goto LABEL_33;
          if (*((_DWORD *)v479 - 3))
          {
            v48 = *((unsigned int *)v479 - 1);
            v49 = v479;
            if ((_DWORD)v48)
            {
              v50 = 0;
              while (!LODWORD(v479[v50]))
              {
                v50 += 3;
                if (3 * v48 == v50)
                  goto LABEL_27;
              }
              v49 = &v479[v50];
            }
            v54 = &v479[3 * v48];
            if (v49 != v54)
            {
              v55 = v46 + 2;
              while (1)
              {
                v56 = *v49;
                v57 = v49[1];
                if (v57)
                  break;
                v58 = *v55;
                if (!*v55)
                  goto LABEL_46;
                v126 = *(_DWORD *)(v58 - 8);
                v127 = v126 & (HIDWORD(v56) + v56);
                v32 = v58 + 16 * v127;
                v128 = *(_DWORD *)v32;
                v129 = *(_DWORD *)(v32 + 4);
                if (*(_DWORD *)v32 != (_DWORD)v56 || v129 != HIDWORD(v56))
                {
                  v131 = 1;
                  while (v128 | v129)
                  {
                    v127 = (v127 + v131) & v126;
                    v32 = v58 + 16 * v127;
                    v128 = *(_DWORD *)v32;
                    v129 = *(_DWORD *)(v32 + 4);
                    ++v131;
                    if (*(_DWORD *)v32 == (_DWORD)v56 && v129 == HIDWORD(v56))
                      goto LABEL_146;
                  }
LABEL_145:
                  v32 = v58 + 16 * *(unsigned int *)(v58 - 4);
                }
LABEL_146:
                if (v58 + 16 * *(unsigned int *)(v58 - 4) != v32)
                  WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::remove(v55, (_QWORD *)v32);
                do
                {
LABEL_46:
                  v49 += 3;
                  if (v49 == v54)
                    goto LABEL_60;
                }
                while (!*(_DWORD *)v49);
                if (v49 == v54)
                {
LABEL_60:
                  v47 = (uint64_t)v479;
                  goto LABEL_27;
                }
              }
              v59 = *v475;
              if (!*v475)
                goto LABEL_51;
              v96 = *(_DWORD *)(v59 - 8);
              v97 = (~(v57 << 32) + v57) ^ ((unint64_t)(~(v57 << 32) + v57) >> 22);
              v98 = 9 * ((v97 + ~(v97 << 13)) ^ ((v97 + ~(v97 << 13)) >> 8));
              v99 = (v98 ^ (v98 >> 15)) + ~((v98 ^ (v98 >> 15)) << 27);
              v100 = v96 & ((v99 >> 31) ^ v99);
              v101 = *(_QWORD *)(v59 + 16 * v100);
              if (v101 != v57)
              {
                v102 = 1;
                while (v101)
                {
                  v100 = ((_DWORD)v100 + v102) & v96;
                  v101 = *(_QWORD *)(v59 + 16 * v100);
                  ++v102;
                  if (v101 == v57)
                    goto LABEL_101;
                }
                v100 = *(unsigned int *)(v59 - 4);
              }
LABEL_101:
              if (v100 == *(_DWORD *)(v59 - 4))
              {
LABEL_51:
                *(_QWORD *)&v478 = *v49;
                v481[0] = 0;
              }
              else
              {
                v103 = *(_QWORD *)(v59 + 16 * v100 + 8);
                *(_QWORD *)&v478 = *v49;
                v481[0] = v103;
                if (v103)
                {
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedLocationDescriptor const&,JSC::DFG::Node *&>((uint64_t)v480, v55, &v478, v481);
                  goto LABEL_46;
                }
              }
              v58 = *v55;
              if (!*v55)
                goto LABEL_46;
              v60 = *(_DWORD *)(v58 - 8);
              v61 = v60 & (HIDWORD(v56) + v56);
              v32 = v58 + 16 * v61;
              v62 = *(_DWORD *)v32;
              v63 = *(_DWORD *)(v32 + 4);
              if (*(_DWORD *)v32 == (_DWORD)v56 && v63 == HIDWORD(v56))
                goto LABEL_146;
              v65 = 1;
              while (v62 | v63)
              {
                v61 = (v61 + v65) & v60;
                v32 = v58 + 16 * v61;
                v62 = *(_DWORD *)v32;
                v63 = *(_DWORD *)(v32 + 4);
                ++v65;
                if (*(_DWORD *)v32 == (_DWORD)v56 && v63 == HIDWORD(v56))
                  goto LABEL_146;
              }
              goto LABEL_145;
            }
LABEL_27:
            if (!v47)
              goto LABEL_33;
          }
          v32 = v47 - 16;
          v51 = *(_QWORD *)(StatusReg + 752);
          if (v51)
          {
            if (!(v32 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                   + (((unint64_t)(v47 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v47 - 16) >> 24)) & 1) != 0)
            {
LABEL_31:
              v52 = *(unsigned int *)(v51 + 8000);
              if (v52 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v51, v32, (os_unfair_lock_s *)5, v34, v35, v36, v37, v38);
              }
              else
              {
                *(_QWORD *)(v51 + 8 * v52) = v32 | 0x5000000000000;
                *(_DWORD *)(v51 + 8000) = v52 + 1;
              }
              goto LABEL_33;
            }
            if (v32 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v32 >> 24)
            {
              v34 = 0;
            }
            else
            {
              v34 = (*(_DWORD *)((char *)off_1ECF425F8
                               + (((((unint64_t)(v47 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((((v47 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v34 == 1)
                goto LABEL_31;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v51, v32, 1, v34, v35, v36, v37, v38);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v32, (uint64_t)&bmalloc_heap_config, 1);
          }
LABEL_33:
          v53 = (_QWORD *)*v11;
          *v11 = 0;
          *(_QWORD *)&v478 = v53;
          if (!v53)
            goto LABEL_34;
          v66 = *((_DWORD *)v53 - 1);
          if (!v66)
          {
            if (*((_DWORD *)v53 - 3))
              goto LABEL_63;
            goto LABEL_74;
          }
          v111 = 0;
          do
          {
            v112 = &v53[6 * --v66];
            v113 = *v112;
            if ((unint64_t)(*v112 + 1) < 2)
              continue;
            v114 = *(_QWORD *)(a1 + 200);
            if (v114)
            {
              v115 = *(_DWORD *)(v114 - 8);
              v116 = (~(v113 << 32) + v113) ^ ((unint64_t)(~(v113 << 32) + v113) >> 22);
              v117 = 9 * ((v116 + ~(v116 << 13)) ^ ((v116 + ~(v116 << 13)) >> 8));
              v118 = (v117 ^ (v117 >> 15)) + ~((v117 ^ (v117 >> 15)) << 27);
              v119 = v115 & ((v118 >> 31) ^ v118);
              v120 = *(_QWORD *)(v114 + 8 * v119);
              if (v120 == v113)
                continue;
              v121 = 1;
              while (v120)
              {
                v119 = (v119 + v121) & v115;
                v120 = *(_QWORD *)(v114 + 8 * v119);
                ++v121;
                if (v120 == v113)
                  goto LABEL_118;
              }
            }
            *v112 = -1;
            v122 = v53[6 * v66 + 5];
            if ((v122 & 1) != 0)
              WTF::fastFree(v122 & 0xFFFFFFFFFFFFFFFCLL, (void *)v32, v33, v34, v35, v36, v37, v38);
            v123 = v53[6 * v66 + 4];
            if ((v123 & 1) != 0)
              WTF::fastFree(v123 & 0xFFFFFFFFFFFFFFFCLL, (void *)v32, v33, v34, v35, v36, v37, v38);
            v124 = v53[6 * v66 + 3];
            if (v124)
              WTF::fastFree(v124 - 16, (void *)v32, v33, v34, v35, v36, v37, v38);
            ++v111;
LABEL_118:
            ;
          }
          while (v66);
          if (v111)
          {
            v125 = *((_DWORD *)v53 - 3) - v111;
            *((_DWORD *)v53 - 4) += v111;
            *((_DWORD *)v53 - 3) = v125;
          }
          else
          {
            v125 = *((_DWORD *)v53 - 3);
          }
          v67 = *((_DWORD *)v53 - 1);
          if (v67 < 9 || 6 * v125 >= v67)
          {
LABEL_660:
            if (*((_DWORD *)v53 - 3))
            {
              v459 = v53;
              if (v67)
              {
                v460 = 0;
                while ((unint64_t)(v53[v460] + 1) <= 1)
                {
                  v460 += 6;
                  if (6 * v67 == v460)
                    goto LABEL_63;
                }
                v459 = &v53[v460];
              }
              v461 = &v53[6 * v67];
              while (v459 != v461)
              {
                v480[0] = 0;
                v480[0] = *v459;
                v462 = *(_QWORD *)v480[0] & 0xFFFFFFFF8;
                if ((*(_QWORD *)v480[0] & 1) != 0)
                  v462 = *(_QWORD *)v462;
                if (v462 && ((*(_BYTE *)(v462 + 32) & 1) != 0 || (*(_QWORD *)(v462 + 24) >> 60) - 3 <= 2))
                {
                  v463 = (_QWORD *)(*(_QWORD *)v42 & 0xFFFFFFFF8);
                  if ((*(_QWORD *)v42 & 1) != 0)
                    v463 = (_QWORD *)*v463;
                  if ((_QWORD *)v462 != v463)
                    WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::remove((uint64_t *)(a2 + 200), v480);
                }
                do
                {
                  v459 += 6;
                  if (v459 == v461)
                    goto LABEL_63;
                }
                while ((unint64_t)(*v459 + 1) <= 1);
              }
LABEL_63:
              v67 = *((_DWORD *)v53 - 1);
            }
            if (v67)
            {
              v68 = 0;
              v69 = 48 * v67;
              do
              {
                if (v53[v68 / 8] != -1)
                {
                  v70 = v53[v68 / 8 + 5];
                  if ((v70 & 1) != 0)
                    WTF::fastFree(v70 & 0xFFFFFFFFFFFFFFFCLL, (void *)v32, v33, v34, v35, v36, v37, v38);
                  v71 = v53[v68 / 8 + 4];
                  if ((v71 & 1) != 0)
                    WTF::fastFree(v71 & 0xFFFFFFFFFFFFFFFCLL, (void *)v32, v33, v34, v35, v36, v37, v38);
                  v72 = v53[v68 / 8 + 3];
                  if (v72)
                    WTF::fastFree(v72 - 16, (void *)v32, v33, v34, v35, v36, v37, v38);
                }
                v68 += 48;
              }
              while (v69 != v68);
            }
LABEL_74:
            v32 = (unint64_t)(v53 - 2);
            v73 = *(_QWORD *)(StatusReg + 752);
            if (!v73)
            {
              pas_try_deallocate_slow_no_cache((unint64_t)(v53 - 2), (uint64_t)&bmalloc_heap_config, 1);
              goto LABEL_34;
            }
            if (!(v32 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                   + (((unint64_t)(v53 - 2) >> 27) & 0x1FFFFFFFFCLL)) >> (((_DWORD)v53 - 16) >> 24)) & 1) != 0)
            {
LABEL_77:
              v74 = *(unsigned int *)(v73 + 8000);
              if (v74 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v73, v32, (os_unfair_lock_s *)5, v34, v35, v36, v37, v38);
              }
              else
              {
                *(_QWORD *)(v73 + 8 * v74) = v32 | 0x5000000000000;
                *(_DWORD *)(v73 + 8000) = v74 + 1;
              }
              goto LABEL_34;
            }
            if (v32 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v32 >> 24)
            {
              v34 = 0;
            }
            else
            {
              v34 = (*(_DWORD *)((char *)off_1ECF425F8
                               + (((((unint64_t)(v53 - 2) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * (((((_DWORD)v53 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v34 == 1)
                goto LABEL_77;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v73, v32, 1, v34, v35, v36, v37, v38);
            goto LABEL_34;
          }
          v53 = (_QWORD *)v478;
          if ((_QWORD)v478)
          {
            v67 = *(_DWORD *)(v478 - 4);
            goto LABEL_660;
          }
LABEL_34:
          ++v40;
        }
        while (v40 != v41);
LABEL_180:
        v153 = *(unsigned int *)(v474 + 8);
        if (*(_DWORD *)(a1 + 420) <= v153)
        {
          __break(0xC471u);
          JUMPOUT(0x1984E5A94);
        }
        v155 = 0;
        LODWORD(v156) = 0;
        *(_QWORD *)&v478 = 0;
        v157 = *(_QWORD *)(a1 + 520);
        if (v157)
        {
          v156 = *(unsigned int *)(v157 - 4);
          v158 = (uint64_t *)(v157 + 48 * v156);
          if (!*(_DWORD *)(v157 - 12))
          {
            v155 = (uint64_t *)(v157 + 48 * v156);
            goto LABEL_182;
          }
          v155 = *(uint64_t **)(a1 + 520);
          if ((_DWORD)v156)
          {
            v169 = 48 * v156;
            v155 = *(uint64_t **)(a1 + 520);
            do
            {
              if ((unint64_t)(*v155 + 1) > 1)
                goto LABEL_183;
              v155 += 6;
              v169 -= 48;
            }
            while (v169);
            v155 = v158;
          }
        }
        else
        {
LABEL_182:
          v158 = (uint64_t *)(v157 + 48 * v156);
        }
LABEL_183:
        if (v157)
          v159 = (uint64_t *)(v157 + 48 * *(unsigned int *)(v157 - 4));
        else
          v159 = 0;
        if (v159 == v155)
          goto LABEL_186;
        while (2)
        {
          if (!*((_DWORD *)v155 + 4))
            goto LABEL_463;
          v365 = *(unsigned int *)(v474 + 220);
          v366 = *(_QWORD *)(v474 + 208);
          v363 = *(_QWORD *)(v366 + 8 * v365 - 8);
          v364 = *(unsigned __int16 *)(v363 + 18);
          if ((v364 - 364) >= 0xC)
          {
            v362 = v366 - 16;
            do
            {
              v363 = *(_QWORD *)(v362 + 8 * v365);
              v364 = *(unsigned __int16 *)(v363 + 18);
              --v365;
            }
            while ((v364 - 364) > 0xB);
          }
          v367 = 1;
          switch(v364)
          {
            case 364:
              goto LABEL_438;
            case 365:
              v367 = 2;
              goto LABEL_438;
            case 366:
              v367 = *(_DWORD *)(*(_QWORD *)(v363 + 72) + 12) + 1;
              goto LABEL_482;
            case 367:
              v367 = *(_DWORD *)(*(_QWORD *)(v363 + 72) + 12);
LABEL_482:
              if (!v367)
                goto LABEL_463;
LABEL_438:
              v368 = 0;
              v369 = 0;
              v370 = 0;
              a4 = v155 + 1;
              v371 = (uint64_t *)(v363 + 72);
              break;
            default:
              goto LABEL_463;
          }
          while (2)
          {
            while (2)
            {
              if (v364 == 366)
              {
                v373 = (_QWORD *)*v371;
                v383 = *(_DWORD *)(*v371 + 12);
                if (v383 <= v368)
                {
                  if (v383 != v368)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984E59BCLL);
                  }
                }
                else
                {
                  v373 = (_QWORD *)(*v373 + 32 * v370);
                }
                goto LABEL_446;
              }
              if (v364 != 367)
              {
                if (!v368)
                {
                  v372 = (uint64_t)v371;
                  if (v364 != 364)
                    v372 = *v371;
                  goto LABEL_447;
                }
                if (v368 != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984E5A44);
                }
                v373 = (_QWORD *)*v371;
LABEL_446:
                v372 = (uint64_t)(v373 + 2);
                goto LABEL_447;
              }
              if (*(_DWORD *)(*v371 + 12) <= v368)
              {
                __break(0xC471u);
                JUMPOUT(0x1984E5B2CLL);
              }
              v372 = *(_QWORD *)*v371 + 8 * v370;
LABEL_447:
              v374 = *(_DWORD *)(*(_QWORD *)v372 + 8);
              if (*(_DWORD *)(a1 + 484) <= v374)
              {
                __break(0xC471u);
                JUMPOUT(0x1984E5B34);
              }
              v375 = *v155;
              v376 = *(_QWORD *)(*(_QWORD *)(a1 + 472) + 40 * v374 + 16);
              if (!v376)
              {
LABEL_449:
                v368 = v370 + 1;
                v370 = (v370 + 1);
                v369 = 1;
                if (v367 == v368)
                  goto LABEL_457;
                continue;
              }
              break;
            }
            v377 = *(_DWORD *)(v376 - 8);
            v378 = (~(v375 << 32) + v375) ^ ((unint64_t)(~(v375 << 32) + v375) >> 22);
            v379 = 9 * ((v378 + ~(v378 << 13)) ^ ((v378 + ~(v378 << 13)) >> 8));
            v380 = (v379 ^ (v379 >> 15)) + ~((v379 ^ (v379 >> 15)) << 27);
            v381 = v377 & ((v380 >> 31) ^ v380);
            v154 = v376 + 48 * v381;
            v382 = *(_QWORD *)v154;
            if (*(_QWORD *)v154 != v375)
            {
              v393 = 1;
              a3 = *(_QWORD *)v154;
              v154 = v381;
              while (a3)
              {
                v154 = ((_DWORD)v154 + v393) & v377;
                a3 = *(_QWORD *)(v376 + 48 * v154);
                ++v393;
                if (a3 == v375)
                {
                  v394 = 1;
                  while (v382)
                  {
                    LODWORD(v381) = (v381 + v394) & v377;
                    v154 = v376 + 48 * v381;
                    v382 = *(_QWORD *)v154;
                    ++v394;
                    if (*(_QWORD *)v154 == v375)
                      goto LABEL_452;
                  }
                  v154 = v376 + 48 * *(unsigned int *)(v376 - 4);
                  goto LABEL_452;
                }
              }
              goto LABEL_449;
            }
LABEL_452:
            if (!*(_DWORD *)(v154 + 16))
              goto LABEL_449;
            v368 = v370 + 1;
            v370 = (v370 + 1);
            if (v367 != v368)
              continue;
            break;
          }
          if ((v369 & 1) == 0)
            goto LABEL_463;
LABEL_457:
          v384 = *(_QWORD *)(a1 + 200);
          if (v384)
          {
            v385 = *(_DWORD *)(v384 - 8);
            v386 = (~(v375 << 32) + v375) ^ ((unint64_t)(~(v375 << 32) + v375) >> 22);
            v387 = 9 * ((v386 + ~(v386 << 13)) ^ ((v386 + ~(v386 << 13)) >> 8));
            v388 = (v387 ^ (v387 >> 15)) + ~((v387 ^ (v387 >> 15)) << 27);
            v389 = v385 & ((v388 >> 31) ^ v388);
            v390 = *(_QWORD *)(v384 + 8 * v389);
            if (v390 == v375)
            {
LABEL_462:
            }
            else
            {
              v391 = 1;
              while (v390)
              {
                v389 = (v389 + v391) & v385;
                v390 = *(_QWORD *)(v384 + 8 * v389);
                ++v391;
                if (v390 == v375)
                  goto LABEL_462;
              }
            }
          }
LABEL_463:
          v392 = v155 + 6;
          v155 = v158;
          if (v392 != v158)
          {
            v155 = v392;
            while ((unint64_t)(*v155 + 1) <= 1)
            {
              v155 += 6;
              if (v155 == v158)
              {
                v155 = v158;
                break;
              }
            }
          }
          if (v155 != v159)
            continue;
          break;
        }
LABEL_186:
        v160 = *(unsigned int *)(v474 + 220);
        if ((_DWORD)v160)
        {
          v161 = 8 * v160;
          v8 = v469;
          while (1)
          {
            v162 = *(_QWORD *)(*(_QWORD *)(v474 + 208) - 8 + v161);
            v163 = *(unsigned __int16 *)(v162 + 18);
            if ((v163 - 364) < 0xC)
              break;
            if ((v163 - 28) < 2 || (v163 - 23) <= 2)
            {
              v161 -= 8;
              if (v161)
                continue;
            }
            v162 = 0;
            break;
          }
        }
        else
        {
          v162 = 0;
          v8 = v469;
        }
        v164 = v478;
        if (!(_QWORD)v478)
        {
          v165 = 0;
          LODWORD(v166) = 0;
          goto LABEL_194;
        }
        v166 = *(unsigned int *)(v478 - 4);
        v167 = (uint64_t *)(v478 + 48 * v166);
        if (*(_DWORD *)(v478 - 12))
        {
          v165 = (uint64_t *)v478;
          if ((_DWORD)v166)
          {
            v170 = 48 * v166;
            v165 = (uint64_t *)v478;
            while ((unint64_t)(*v165 + 1) <= 1)
            {
              v165 += 6;
              v170 -= 48;
              if (!v170)
              {
                v165 = v167;
                break;
              }
            }
          }
        }
        else
        {
          v165 = (uint64_t *)(v478 + 48 * v166);
LABEL_194:
          v167 = (uint64_t *)(v478 + 48 * v166);
        }
        if ((_QWORD)v478)
          v168 = (uint64_t *)(v478 + 48 * *(unsigned int *)(v478 - 4));
        else
          v168 = 0;
        while (v165 != v168)
        {
          v480[0] = 0;
          v480[0] = *v165;
          v360 = *(_QWORD *)v480[0] & 0xFFFFFFFF8;
          if ((*(_QWORD *)v480[0] & 1) != 0)
            v360 = *(_QWORD *)v360;
          if (v360 && ((*(_BYTE *)(v360 + 32) & 1) != 0 || (*(_QWORD *)(v360 + 24) >> 60) - 3 <= 2))
          {
            v444 = (_QWORD *)(*(_QWORD *)v162 & 0xFFFFFFFF8);
            if ((*(_QWORD *)v162 & 1) != 0)
              v444 = (_QWORD *)*v444;
            if ((_QWORD *)v360 != v444)
              WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::remove((uint64_t *)(a2 + 200), v480);
          }
          v361 = v165 + 6;
          v165 = v167;
          if (v361 != v167)
          {
            v165 = v361;
            while ((unint64_t)(*v165 + 1) <= 1)
            {
              v165 += 6;
              if (v165 == v167)
              {
                v165 = v167;
                break;
              }
            }
          }
        }
        if (v164)
        {
          v241 = *(unsigned int *)(v164 - 4);
          if ((_DWORD)v241)
          {
            v242 = (_QWORD *)(v164 + 40);
            do
            {
              if (*(v242 - 5) != -1)
              {
                if ((*v242 & 1) != 0)
                  WTF::fastFree(*v242 & 0xFFFFFFFFFFFFFFFCLL, (void *)v154, a3, (uint64_t)a4, a5, a6, a7, a8);
                v243 = *(v242 - 1);
                if ((v243 & 1) != 0)
                  WTF::fastFree(v243 & 0xFFFFFFFFFFFFFFFCLL, (void *)v154, a3, (uint64_t)a4, a5, a6, a7, a8);
                v244 = *(v242 - 2);
                if (v244)
                  WTF::fastFree(v244 - 16, (void *)v154, a3, (uint64_t)a4, a5, a6, a7, a8);
              }
              v242 += 6;
              --v241;
            }
            while (v241);
          }
          WTF::fastFree(v164 - 16, (void *)v154, a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        v13 = (v472 + 1);
        v12 = *(unsigned int *)(v8 + 60);
        if (v12 > v13)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v13))
          {
            if (v12 == ++v13)
            {
              LODWORD(v13) = *(_DWORD *)(v8 + 60);
              break;
            }
          }
        }
      }
      while ((_DWORD)v471 != (_DWORD)v13);
    }
  }
}

_QWORD *WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int v14;

  v3 = result;
  if (!a2)
  {
LABEL_10:
    *result = 0;
    result[1] = 0;
    return result;
  }
  v4 = *(_DWORD *)(a2 - 8);
  v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(a2 + 24 * v8);
  if (v9 != a3)
  {
    v14 = 1;
    while (v9)
    {
      v8 = (v8 + v14) & v4;
      v9 = *(_QWORD *)(a2 + 24 * v8);
      ++v14;
      if (v9 == a3)
        goto LABEL_3;
    }
    goto LABEL_10;
  }
LABEL_3:
  v10 = a2 + 24 * v8;
  v11 = *(unsigned int *)(v10 + 20);
  *result = 0;
  result[1] = 0;
  *((_DWORD *)result + 3) = v11;
  if ((_DWORD)v11)
  {
    if (v11 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v12 = v10 + 8;
      v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
      *((_DWORD *)v3 + 2) = v11;
      *v3 = v13;
      return memcpy(v13, *(const void **)v12, 8 * *(unsigned int *)(v12 + 12));
    }
  }
  return result;
}

void _ZZN3JSC3DFG12_GLOBAL__N_128ObjectAllocationSinkingPhase23determineSinkCandidatesEvENKUlT_E_clIZNS2_23determineSinkCandidatesEvEUlRN3WTF7HashMapIPNS0_4NodeENS1_10AllocationENS6_11DefaultHashIS9_EENS6_10HashTraitsIS9_EENSD_ISA_EENS6_15HashTableTraitsEEES9_E0_EEDaS3_(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v67;
  unsigned int v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  JSC::DFG::Node *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unsigned int v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  int v127;
  int v128;
  int v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  unsigned int v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  unsigned int v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t *v200;
  int v201;
  int v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  int *v206;
  int v207;
  int v208;
  int v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t *v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v228;
  JSC::DFG::Node *v229;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v230;
  unsigned int v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t *v250;
  __int128 *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  __int128 *v276;
  unsigned int v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unsigned int v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t *v290;
  unsigned int v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t *v297;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  __int128 *v312;
  uint64_t v313;
  unsigned int v314;
  unsigned int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t *v329;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  uint64_t *v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  unsigned int v362;
  char v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  _QWORD *v367;
  unsigned int v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unsigned int v375;
  uint64_t *v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  int v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  unsigned int v384;
  uint64_t v385;
  int v386;
  uint64_t *v387;
  int v388;
  uint64_t v389;
  unsigned int v390;
  int v391;
  unsigned int v392;
  unint64_t v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  int v397;
  int v398;
  uint64_t *v399;
  uint64_t v400;
  JSC::DFG::Node *v401;
  uint64_t *v402;
  uint64_t v403;
  unsigned int v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  unsigned int v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  unsigned int v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  unsigned int *v428;
  uint64_t v429;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v430;
  char v431;
  uint64_t *v432;
  uint64_t v433;
  int v434;
  uint64_t v436;
  unint64_t v437;
  uint64_t v438;
  uint64_t v439;
  char v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  int *v452;
  uint64_t v454;
  unint64_t v455;
  unsigned int *v456;
  uint64_t *v457;
  uint64_t *v458;
  uint64_t v459;
  uint64_t *v460;
  uint64_t v461;
  int v462;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v463;
  uint64_t v464;
  unint64_t StatusReg;
  uint64_t *v466;
  uint64_t v467;
  __int128 v468;
  uint64_t *v469;
  uint64_t v470[3];
  uint64_t v471[2];

  v8 = *(_QWORD *)(a1 + 32);
  v461 = *(unsigned int *)(v8 + 60);
  if ((_DWORD)v461)
  {
    v11 = 0;
    while (!*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v11))
    {
      if (v461 == ++v11)
        return;
    }
    if ((_DWORD)v461 != (_DWORD)v11)
    {
      v463 = (JSC::DFG::_anonymous_namespace_::LocalHeap *)(a1 + 504);
      v460 = (uint64_t *)(a1 + 520);
      v12 = (uint64_t *)(a1 + 536);
      v458 = (uint64_t *)(a1 + 424);
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      v466 = (uint64_t *)(a1 + 512);
      LODWORD(v13) = v461;
      LODWORD(v14) = v11;
      v459 = v8;
      do
      {
        if (v13 <= v14)
        {
          __break(0xC471u);
          JUMPOUT(0x1984E8220);
        }
        v462 = v14;
        v464 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14);
        v15 = *(_DWORD *)(v464 + 8);
        if (*(_DWORD *)(a1 + 484) <= v15)
        {
          __break(0xC471u);
          JUMPOUT(0x1984E8228);
        }
        v16 = *(_QWORD *)(a1 + 472);
        v17 = v16 + 40 * v15;
        *(_BYTE *)(a1 + 504) = *(_BYTE *)v17;
        WTF::HashTable<JSC::B3::Value *,WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Value *,JSC::B3::Value *>>,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashMap<JSC::B3::Value *,JSC::B3::Value *,WTF::DefaultHash<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTraits<JSC::B3::Value *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Value *>>::HashTable(v470, (_QWORD *)(v17 + 8), a3, a4, a5, a6, a7, a8);
        v25 = *(_QWORD *)(a1 + 512);
        *(_QWORD *)(a1 + 512) = v470[0];
        v470[0] = v25;
        if (v25)
          WTF::fastFree(v25 - 16, v18, v19, v20, v21, v22, v23, v24);
        v26 = v16 + 40 * v15;
        *(_BYTE *)(a1 + 528) = *(_BYTE *)(v26 + 24);
        *(_BYTE *)(a1 + 528) = 1;
        v40 = *(unsigned int *)(v464 + 220);
        if (!(_DWORD)v40)
          goto LABEL_174;
        v41 = *(uint64_t **)(v464 + 208);
        v42 = &v41[v40];
        do
        {
          v43 = *v41;
          v469 = 0;
          v44 = *(unsigned __int16 *)(v43 + 18);
          if (v44 > 0x85)
          {
            if (*(unsigned __int16 *)(v43 + 18) <= 0x158u)
            {
              if (*(unsigned __int16 *)(v43 + 18) <= 0xAAu)
              {
                switch(*(_WORD *)(v43 + 18))
                {
                  case 0x98:
                  case 0x99:
                    v83 = *(_QWORD *)(v43 + 32);
                    v84 = v83 & 0xFF00FFFFFFFFFFFFLL;
                    v47 = v85;
                    if (v85 && *((_DWORD *)v85 + 2) == 1)
                    {
                      v201 = *(_DWORD *)(*(_QWORD *)(v43 + 72) + 4);
                      v202 = 11;
                      goto LABEL_232;
                    }
                    v86 = *v466;
                    if (!*v466)
                      goto LABEL_21;
                    v182 = *(_QWORD *)(v43 + 24);
                    v183 = v182 & 0xFF00FFFFFFFFFFFFLL;
                    v184 = *(_DWORD *)(v86 - 8);
                    v185 = ((v182 & 0xFF00FFFFFFFFFFFFLL) + ~(v182 << 32)) ^ (((v182 & 0xFF00FFFFFFFFFFFFLL)
                                                                             + ~(v182 << 32)) >> 22);
                    v186 = 9 * ((v185 + ~(v185 << 13)) ^ ((v185 + ~(v185 << 13)) >> 8));
                    v187 = (v186 ^ (v186 >> 15)) + ~((v186 ^ (v186 >> 15)) << 27);
                    v188 = v184 & ((v187 >> 31) ^ v187);
                    v189 = *(_QWORD *)(v86 + 16 * v188);
                    if (v189 == v183)
                      goto LABEL_243;
                    v190 = 1;
                    while (v189)
                    {
                      v188 = ((_DWORD)v188 + v190) & v184;
                      v189 = *(_QWORD *)(v86 + 16 * v188);
                      ++v190;
                      if (v189 == v183)
                        goto LABEL_243;
                    }
                    v188 = *(unsigned int *)(v86 - 4);
LABEL_243:
                    if (v188 == *(_DWORD *)(v86 - 4))
                      goto LABEL_244;
                    v33 = *(_QWORD *)(v86 + 16 * v188 + 8);
                    if (!v33)
                      goto LABEL_244;
                    v86 = *v466;
                    if (!*v466)
                      goto LABEL_21;
                    v83 = *(_QWORD *)(v43 + 32);
                    v84 = v83 & 0xFF00FFFFFFFFFFFFLL;
                    v184 = *(_DWORD *)(v86 - 8);
LABEL_244:
                    v211 = (v84 + ~(v83 << 32)) ^ ((v84 + ~(v83 << 32)) >> 22);
                    v212 = 9 * ((v211 + ~(v211 << 13)) ^ ((v211 + ~(v211 << 13)) >> 8));
                    v213 = (v212 ^ (v212 >> 15)) + ~((v212 ^ (v212 >> 15)) << 27);
                    v214 = v184 & ((v213 >> 31) ^ v213);
                    v215 = *(_QWORD *)(v86 + 16 * v214);
                    if (v215 == v84)
                      goto LABEL_170;
                    v216 = 1;
                    do
                    {
                      if (!v215)
                        goto LABEL_322;
                      v214 = ((_DWORD)v214 + v216) & v184;
                      v215 = *(_QWORD *)(v86 + 16 * v214);
                      ++v216;
                    }
                    while (v215 != v84);
                    goto LABEL_170;
                  case 0x9A:
                    v332 = *(_QWORD *)(v43 + 24);
                    v333 = v332 & 0xFF00FFFFFFFFFFFFLL;
                    if (!v334 || (v427 = (uint64_t)v334, *((_DWORD *)v334 + 2) != 1))
                    {
                      v134 = *v466;
                      if (!*v466)
                        goto LABEL_20;
                      v392 = *(_DWORD *)(v134 - 8);
                      v393 = (v333 + ~(v332 << 32)) ^ ((v333 + ~(v332 << 32)) >> 22);
                      v394 = 9 * ((v393 + ~(v393 << 13)) ^ ((v393 + ~(v393 << 13)) >> 8));
                      v395 = (v394 ^ (v394 >> 15)) + ~((v394 ^ (v394 >> 15)) << 27);
                      v221 = v392 & ((v395 >> 31) ^ v395);
                      v396 = *(_QWORD *)(v134 + 16 * v221);
                      if (v396 != v333)
                      {
                        v397 = 1;
                        do
                        {
                          if (!v396)
                            goto LABEL_274;
                          v221 = ((_DWORD)v221 + v397) & v392;
                          v396 = *(_QWORD *)(v134 + 16 * v221);
                          ++v397;
                        }
                        while (v396 != v333);
                      }
                      goto LABEL_275;
                    }
                    v428 = *(unsigned int **)(v43 + 72);
                    v467 = 0;
                    v429 = v428[5];
                    v430 = v463;
                    if (!(_DWORD)v429)
                      goto LABEL_580;
                    v431 = 0;
                    v456 = v428;
                    v432 = (uint64_t *)*((_QWORD *)v428 + 1);
                    v457 = (uint64_t *)(v427 + 24);
                    v433 = 32 * v429;
                    do
                    {
                      if (WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::overlaps(v457, v432))
                      {
                        v434 = *((_DWORD *)v432 + 6);
                        if (v434 == 1 || v434 == 3)
                        {
                          v431 = 1;
                        }
                        else
                        {
                          if (v434 != 2)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1984E8280);
                          }
                          v436 = *v432;
                          if ((*v432 & 1) != 0)
                          {
                            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine(&v467, v432);
                          }
                          else
                          {
                            v437 = v436 & 0xFFFFFFFFFFFFFFFCLL;
                            if ((v436 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                            {
                              if ((v467 & 1) != 0)
                              {
                                WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(&v467, v437);
                              }
                              else if ((v467 & 0xFFFFFFFFFFFFFFFCLL) != v437)
                              {
                                if ((v467 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                                {
                                  v455 = v436 & 0xFFFFFFFFFFFFFFFCLL;
                                  v439 = WTF::fastMalloc((WTF *)0x28);
                                  *(_QWORD *)v439 = 0x400000002;
                                  v440 = v467;
                                  *(_QWORD *)(v439 + 8) = v467 & 0xFFFFFFFFFFFFFFFCLL;
                                  *(_QWORD *)(v439 + 16) = v455;
                                  v438 = v440 & 2 | (unint64_t)v439 | 1;
                                }
                                else
                                {
                                  v438 = v467 & 2 | v437;
                                }
                                v467 = v438;
                              }
                            }
                          }
                        }
                      }
                      v430 = v463;
                      v432 += 4;
                      v433 -= 32;
                    }
                    while (v433);
                    if ((v431 & 1) == 0 && (v467 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                    {
                      v444 = *v456;
                      if ((WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::isSubsetOf(v457, &v467) & 1) == 0)
                      if (v451)
                      {
                        *(_QWORD *)&v468 = v43;
                        v471[0] = v451;
                        WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v466, (uint64_t *)&v468, v471, v35, v36, v37, v38, v39, (uint64_t)v470);
                      }
                    }
                    else
                    {
LABEL_580:
                    }
                    v328 = v467;
                    if ((v467 & 1) == 0)
                      goto LABEL_20;
                    goto LABEL_582;
                  case 0x9B:
                    v148 = *(_QWORD *)(v43 + 32);
                    v149 = v148 & 0xFF00FFFFFFFFFFFFLL;
                    v47 = v150;
                    if (!v150 || *((_DWORD *)v150 + 2) != 1)
                    {
                      v278 = *v466;
                      if (!*v466)
                        goto LABEL_21;
                      v279 = *(_QWORD *)(v43 + 24);
                      v280 = v279 & 0xFF00FFFFFFFFFFFFLL;
                      v281 = *(_DWORD *)(v278 - 8);
                      v282 = ((v279 & 0xFF00FFFFFFFFFFFFLL) + ~(v279 << 32)) ^ (((v279 & 0xFF00FFFFFFFFFFFFLL)
                                                                               + ~(v279 << 32)) >> 22);
                      v283 = 9 * ((v282 + ~(v282 << 13)) ^ ((v282 + ~(v282 << 13)) >> 8));
                      v284 = (v283 ^ (v283 >> 15)) + ~((v283 ^ (v283 >> 15)) << 27);
                      v285 = v281 & ((v284 >> 31) ^ v284);
                      v286 = *(_QWORD *)(v278 + 16 * v285);
                      if (v286 != v280)
                      {
                        v287 = 1;
                        while (v286)
                        {
                          v285 = ((_DWORD)v285 + v287) & v281;
                          v286 = *(_QWORD *)(v278 + 16 * v285);
                          ++v287;
                          if (v286 == v280)
                            goto LABEL_376;
                        }
                        v285 = *(unsigned int *)(v278 - 4);
                      }
LABEL_376:
                      if (v285 != *(_DWORD *)(v278 - 4))
                      {
                        v33 = *(_QWORD *)(v278 + 16 * v285 + 8);
                        if (v33)
                        {
                          v278 = *v466;
                          if (!*v466)
                            goto LABEL_21;
                          v148 = *(_QWORD *)(v43 + 32);
                          v149 = v148 & 0xFF00FFFFFFFFFFFFLL;
                          v281 = *(_DWORD *)(v278 - 8);
                        }
                      }
                      v337 = (v149 + ~(v148 << 32)) ^ ((v149 + ~(v148 << 32)) >> 22);
                      v338 = 9 * ((v337 + ~(v337 << 13)) ^ ((v337 + ~(v337 << 13)) >> 8));
                      v339 = (v338 ^ (v338 >> 15)) + ~((v338 ^ (v338 >> 15)) << 27);
                      v340 = v281 & ((v339 >> 31) ^ v339);
                      v341 = *(_QWORD *)(v278 + 16 * v340);
                      if (v341 != v149)
                      {
                        v342 = 1;
                        while (v341)
                        {
                          v340 = ((_DWORD)v340 + v342) & v281;
                          v341 = *(_QWORD *)(v278 + 16 * v340);
                          ++v342;
                          if (v341 == v149)
                            goto LABEL_383;
                        }
                        v340 = *(unsigned int *)(v278 - 4);
                      }
LABEL_383:
                      if (v340 != *(_DWORD *)(v278 - 4))
                      {
                        v33 = *(_QWORD *)(v278 + 16 * v340 + 8);
                        if (v33)
                        {
                          v278 = *v466;
                          if (!*v466)
                            goto LABEL_21;
                          v281 = *(_DWORD *)(v278 - 8);
                        }
                      }
                      v343 = *(_QWORD *)(v43 + 40);
                      v344 = v343 & 0xFF00FFFFFFFFFFFFLL;
                      v345 = ((v343 & 0xFF00FFFFFFFFFFFFLL) + ~(v343 << 32)) ^ (((v343 & 0xFF00FFFFFFFFFFFFLL)
                                                                               + ~(v343 << 32)) >> 22);
                      v346 = 9 * ((v345 + ~(v345 << 13)) ^ ((v345 + ~(v345 << 13)) >> 8));
                      v347 = (v346 ^ (v346 >> 15)) + ~((v346 ^ (v346 >> 15)) << 27);
                      v348 = v281 & ((v347 >> 31) ^ v347);
                      v349 = *(_QWORD *)(v278 + 16 * v348);
                      if (v349 != v344)
                      {
                        v350 = 1;
                        while (v349)
                        {
                          v348 = ((_DWORD)v348 + v350) & v281;
                          v349 = *(_QWORD *)(v278 + 16 * v348);
                          ++v350;
                          if (v349 == v344)
                            goto LABEL_390;
                        }
                        v348 = *(unsigned int *)(v278 - 4);
                      }
LABEL_390:
                      if (v348 == *(_DWORD *)(v278 - 4))
                        goto LABEL_21;
                      v151 = v278 + 16 * v348;
                      goto LABEL_172;
                    }
                    v179 = *(_DWORD *)(*(_QWORD *)(v43 + 72) + 4);
                    LODWORD(v471[0]) = 11;
                    HIDWORD(v471[0]) = v179;
                    v180 = *(_QWORD *)(v43 + 40);
                    v181 = v180 & 0xFF00FFFFFFFFFFFFLL;
                    *(_QWORD *)&v468 = v180 & 0xFF00FFFFFFFFFFFFLL;
                    *((_QWORD *)&v468 + 1) = 0;
                    if ((v180 & 0xFF00FFFFFFFFFFFFLL) == 0)
                      goto LABEL_95;
                    v177 = *(unsigned __int16 *)((v180 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                    if (v177 > 2)
                      goto LABEL_95;
                    v178 = *(_QWORD *)(v181 + 72);
                    *((_QWORD *)&v468 + 1) = v178;
                    if (!(_DWORD)v177)
                      goto LABEL_95;
                    if ((_DWORD)v177 == 1)
                      goto LABEL_584;
                    break;
                  case 0x9C:
                  case 0x9D:
                  case 0x9E:
                  case 0x9F:
                  case 0xA0:
                  case 0xA1:
                  case 0xA2:
                  case 0xA3:
                  case 0xA4:
                    goto LABEL_18;
                  case 0xA5:
                    v288 = *(_QWORD *)(v43 + 24);
                    v289 = v288 & 0xFF00FFFFFFFFFFFFLL;
                    v47 = v290;
                    if (v290 && (*((_DWORD *)v290 + 2) - 3) < 3)
                    {
                      v201 = 0;
                      v202 = 8;
                      goto LABEL_232;
                    }
                    v86 = *v466;
                    if (!*v466)
                      goto LABEL_21;
                    v291 = *(_DWORD *)(v86 - 8);
                    v292 = (v289 + ~(v288 << 32)) ^ ((v289 + ~(v288 << 32)) >> 22);
                    v293 = 9 * ((v292 + ~(v292 << 13)) ^ ((v292 + ~(v292 << 13)) >> 8));
                    v294 = (v293 ^ (v293 >> 15)) + ~((v293 ^ (v293 >> 15)) << 27);
                    v214 = v291 & ((v294 >> 31) ^ v294);
                    v295 = *(_QWORD *)(v86 + 16 * v214);
                    if (v295 != v289)
                    {
                      v296 = 1;
                      do
                      {
                        if (!v295)
                          goto LABEL_322;
                        v214 = ((_DWORD)v214 + v296) & v291;
                        v295 = *(_QWORD *)(v86 + 16 * v214);
                        ++v296;
                      }
                      while (v295 != v289);
                    }
                    goto LABEL_170;
                  case 0xA6:
                    v401 = (JSC::DFG::Node *)(*(_QWORD *)(v43 + 24) & 0xFF00FFFFFFFFFFFFLL);
                    v47 = v329;
                    if (!v329 || *((_DWORD *)v329 + 2) != 2)
                      goto LABEL_351;
                    v201 = 0;
                    v202 = 1;
                    goto LABEL_232;
                  default:
                    if (v44 != 135)
                    {
                      if (v44 != 134)
                        goto LABEL_18;
                      v401 = (JSC::DFG::Node *)(*(_QWORD *)(v43 + 24) & 0xFF00FFFFFFFFFFFFLL);
                      v47 = v402;
                      if (!v402 || (*((_DWORD *)v402 + 2) - 3) >= 3)
                      {
                        v230 = v463;
                        goto LABEL_352;
                      }
                      v201 = 0;
                      v202 = 9;
                      goto LABEL_232;
                    }
                    v401 = (JSC::DFG::Node *)(*(_QWORD *)(v43 + 24) & 0xFF00FFFFFFFFFFFFLL);
                    v47 = v250;
                    if (!v250 || *((_DWORD *)v250 + 2) != 1)
                      goto LABEL_351;
                    v471[0] = 13;
                    v251 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(v43 + 72) + 8), v34, v35, v36, v37, v38, v39);
                    *(_QWORD *)&v468 = 0;
                    *((_QWORD *)&v468 + 1) = v251;
                    WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v470, (uint64_t *)&v469, v471, &v468);
                    v470[0] = *(_QWORD *)(*(_QWORD *)(v43 + 72) + 8);
                    if ((v470[0] & 1) != 0)
                      WTF::fastFree(v470[0] & 0xFFFFFFFFFFFFFFFCLL, (void *)v33, v34, v35, v36, v37, v38, v39);
                    goto LABEL_21;
                }
                goto LABEL_605;
              }
              if (*(unsigned __int16 *)(v43 + 18) <= 0x10Du)
              {
                switch(*(_WORD *)(v43 + 18))
                {
                  case 0xAB:
                    v198 = *(_QWORD *)(v43 + 24);
                    v199 = v198 & 0xFF00FFFFFFFFFFFFLL;
                    v47 = v200;
                    if (v200 && *((_DWORD *)v200 + 2) == 2)
                    {
                      v201 = *(_DWORD *)(v43 + 72);
                      v202 = 6;
                      goto LABEL_232;
                    }
                    v86 = *v466;
                    if (!*v466)
                      goto LABEL_21;
                    v231 = *(_DWORD *)(v86 - 8);
                    v232 = (v199 + ~(v198 << 32)) ^ ((v199 + ~(v198 << 32)) >> 22);
                    v233 = 9 * ((v232 + ~(v232 << 13)) ^ ((v232 + ~(v232 << 13)) >> 8));
                    v234 = (v233 ^ (v233 >> 15)) + ~((v233 ^ (v233 >> 15)) << 27);
                    v214 = v231 & ((v234 >> 31) ^ v234);
                    v235 = *(_QWORD *)(v86 + 16 * v214);
                    if (v235 == v199)
                      goto LABEL_170;
                    v236 = 1;
                    break;
                  case 0xAC:
                    v93 = (JSC::DFG::Node *)(*(_QWORD *)(v43 + 24) & 0xFF00FFFFFFFFFFFFLL);
                    v47 = v224;
                    if (!v224 || *((_DWORD *)v224 + 2) != 2)
                      goto LABEL_264;
                    v225 = *(_DWORD *)(v43 + 72);
                    LODWORD(v471[0]) = 6;
                    HIDWORD(v471[0]) = v225;
                    v226 = *(_QWORD *)(v43 + 32);
                    v227 = v226 & 0xFF00FFFFFFFFFFFFLL;
                    *(_QWORD *)&v468 = v226 & 0xFF00FFFFFFFFFFFFLL;
                    *((_QWORD *)&v468 + 1) = 0;
                    if ((v226 & 0xFF00FFFFFFFFFFFFLL) == 0)
                      goto LABEL_95;
                    v177 = *(unsigned __int16 *)((v226 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                    if (v177 > 2)
                      goto LABEL_95;
                    v178 = *(_QWORD *)(v227 + 72);
                    *((_QWORD *)&v468 + 1) = v178;
                    if (!(_DWORD)v177)
                      goto LABEL_95;
                    if ((_DWORD)v177 != 1)
                      goto LABEL_605;
                    goto LABEL_584;
                  case 0xAD:
                  case 0xAE:
                  case 0xAF:
                  case 0xB0:
                  case 0xB1:
                  case 0xB2:
                    goto LABEL_18;
                  case 0xB3:
                    v401 = (JSC::DFG::Node *)(*(_QWORD *)(v43 + 24) & 0xFF00FFFFFFFFFFFFLL);
                    v47 = v354;
                    if (!v354 || *((_DWORD *)v354 + 2) != 8)
                      goto LABEL_351;
                    v201 = 0;
                    v202 = 19;
                    goto LABEL_232;
                  case 0xB4:
                    v93 = (JSC::DFG::Node *)(*(_QWORD *)(v43 + 24) & 0xFF00FFFFFFFFFFFFLL);
                    v228 = v463;
                    v47 = v355;
                    if (!v355 || *((_DWORD *)v355 + 2) != 8)
                      goto LABEL_265;
                    v471[0] = 19;
                    v336 = *(_QWORD *)(v43 + 32);
                    goto LABEL_374;
                  default:
                    if (v44 == 259)
                    {
                      v470[0] = *(_QWORD *)(v43 + 72);
                      if ((v470[0] & 1) != 0)
                        WTF::fastFree(v470[0] & 0xFFFFFFFFFFFFFFFCLL, v305, v306, v307, v308, v309, v310, v311);
                      v471[0] = 13;
                      v312 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), *(_QWORD *)(v43 + 72), v306, v307, v308, v309, v310, v311);
                      *(_QWORD *)&v468 = 0;
                      *((_QWORD *)&v468 + 1) = v312;
                      goto LABEL_95;
                    }
                    if (v44 != 268)
                      goto LABEL_18;
                    v398 = *(unsigned __int8 *)(*(_QWORD *)(v43 + 72) + 9);
                    switch(v398)
                    {
                      case '@':
                        break;
                      case 'B':
                      case 'A':
                        break;
                      case 'D':
                        break;
                      default:
                        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 32), (JSC::DFG::Node *)v43, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x3DB, "void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1379:25), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1380:25)]", "Bad structure");
                        __break(0xC471u);
                        JUMPOUT(0x1984E8000);
                    }
                    v47 = v399;
                    goto LABEL_21;
                }
                while (v235)
                {
                  v214 = ((_DWORD)v214 + v236) & v231;
                  v235 = *(_QWORD *)(v86 + 16 * v214);
                  ++v236;
                  if (v235 == v199)
                    goto LABEL_170;
                }
LABEL_322:
                v214 = *(unsigned int *)(v86 - 4);
LABEL_170:
                if (v214 != *(_DWORD *)(v86 - 4))
                {
                  v151 = v86 + 16 * v214;
LABEL_172:
                  v33 = *(_QWORD *)(v151 + 8);
                  if (v33)
                }
                goto LABEL_21;
              }
              if (*(unsigned __int16 *)(v43 + 18) > 0x157u)
              {
                v93 = (JSC::DFG::Node *)(*(_QWORD *)(v43 + 24) & 0xFF00FFFFFFFFFFFFLL);
                v47 = v94;
                if (!v94 || *((_DWORD *)v94 + 2) != 7)
                {
LABEL_264:
                  v228 = v463;
LABEL_265:
                  v229 = (JSC::DFG::Node *)(*(_QWORD *)(v43 + 32) & 0xFF00FFFFFFFFFFFFLL);
                  v230 = v228;
LABEL_266:
                  goto LABEL_21;
                }
                v101 = *(_DWORD *)(v43 + 72);
                LODWORD(v471[0]) = 7;
                HIDWORD(v471[0]) = v101;
                v102 = *(_QWORD *)(v43 + 32);
                v103 = v102 & 0xFF00FFFFFFFFFFFFLL;
                *(_QWORD *)&v468 = v102 & 0xFF00FFFFFFFFFFFFLL;
                *((_QWORD *)&v468 + 1) = 0;
                if ((v102 & 0xFF00FFFFFFFFFFFFLL) == 0)
                  goto LABEL_95;
                v177 = *(unsigned __int16 *)((v102 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                if (v177 > 2)
                  goto LABEL_95;
                v178 = *(_QWORD *)(v103 + 72);
                *((_QWORD *)&v468 + 1) = v178;
                if (!(_DWORD)v177)
                  goto LABEL_95;
                if ((_DWORD)v177 == 1)
                {
LABEL_584:
                  *((_QWORD *)&v468 + 1) = v177 | v178;
LABEL_95:
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v470, (uint64_t *)&v469, v471, &v468);
                  goto LABEL_21;
                }
LABEL_605:
                v177 = 2;
                goto LABEL_584;
              }
              switch(v44)
              {
                case 0x157u:
                  v401 = (JSC::DFG::Node *)(*(_QWORD *)(v43 + 24) & 0xFF00FFFFFFFFFFFFLL);
                  v47 = v297;
                  if (v297 && *((_DWORD *)v297 + 2) == 7)
                  {
                    v201 = *(_DWORD *)(v43 + 72);
                    v202 = 7;
LABEL_232:
                    v203 = v47[2];
                    if (v203)
                    {
                      v204 = *(_DWORD *)(v203 - 8);
                      v205 = v204 & (v201 + v202);
                      v206 = (int *)(v203 + 16 * v205);
                      v207 = *v206;
                      v208 = v206[1];
                      if (*v206 == v202 && v208 == v201)
                      {
LABEL_597:
                        v454 = *(_QWORD *)(v203 + 16 * v205 + 8);
                        if (v454)
                        {
                          *(_QWORD *)&v468 = v43;
                          v471[0] = v454;
                          WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>(v466, (uint64_t *)&v468, v471, v35, v36, v37, v38, v39, (uint64_t)v470);
                        }
                      }
                      else
                      {
                        v210 = 1;
                        while (v207 | v208)
                        {
                          v205 = ((_DWORD)v205 + v210) & v204;
                          v452 = (int *)(v203 + 16 * v205);
                          v207 = *v452;
                          v208 = v452[1];
                          ++v210;
                          if (v207 == v202 && v208 == v201)
                            goto LABEL_597;
                        }
                      }
                    }
                    goto LABEL_21;
                  }
LABEL_351:
                  v230 = v463;
LABEL_352:
                  v229 = v401;
                  goto LABEL_266;
                case 0x10Eu:
                  v471[0] = 18;
                  v335 = *(_QWORD *)(v43 + 72);
                  *(_QWORD *)&v468 = 0;
                  *((_QWORD *)&v468 + 1) = v335;
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v470, (uint64_t *)&v469, v471, &v468);
                  v471[0] = 19;
                  v336 = *(_QWORD *)(v43 + 24);
LABEL_374:
                  JSC::DFG::LazyNode::LazyNode(&v468, (JSC::DFG::Node *)(v336 & 0xFF00FFFFFFFFFFFFLL));
                  goto LABEL_95;
                case 0x117u:
                  goto LABEL_33;
              }
            }
            else
            {
              if (v44 - 420 < 7)
                goto LABEL_33;
              if (v44 == 345)
              {
                *(_QWORD *)&v468 = **(_QWORD **)(v43 + 72);
                v258 = *(_QWORD *)(v468 + 40);
                if ((v258 & 1) != 0)
                  v259 = (v258 >> 1) & 3;
                else
                  v259 = *(unsigned __int8 *)(v258 + 4);
                LOBYTE(v471[0]) = v259 != 2;
                WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(v470, v458, (uint64_t *)&v468, v471, v36, v37, v38, v39);
                if (!*(_BYTE *)(v470[0] + 8))
                {
                  v471[0] = 2;
                  v266 = *(_QWORD *)(v43 + 72);
                  *(_QWORD *)&v468 = 0;
                  *((_QWORD *)&v468 + 1) = v266;
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v470, (uint64_t *)&v469, v471, &v468);
                  v471[0] = 1;
                  v267 = *(_QWORD *)(v43 + 24);
                  v268 = v267 & 0xFF00FFFFFFFFFFFFLL;
                  *(_QWORD *)&v468 = v267 & 0xFF00FFFFFFFFFFFFLL;
                  *((_QWORD *)&v468 + 1) = 0;
                  if ((v267 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v331 = *(unsigned __int16 *)((v267 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                    if (v331 <= 2)
                    {
                      v400 = *(_QWORD *)(v268 + 72);
                      *((_QWORD *)&v468 + 1) = v400;
                      if ((_DWORD)v331)
                      {
                        if ((_DWORD)v331 != 1)
                          v331 = 2;
                        *((_QWORD *)&v468 + 1) = v331 | v400;
                      }
                    }
                  }
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v470, (uint64_t *)&v469, v471, &v468);
                  v269 = **(_QWORD **)(v43 + 72);
                  v276 = JSC::DFG::Graph::freeze(*(_QWORD *)(a1 + 32), **(_QWORD **)(v43 + 80), v270, v271, v272, v273, v274, v275);
                  *(_QWORD *)&v468 = 0;
                  *((_QWORD *)&v468 + 1) = v276;
                  if (*(_DWORD *)(v269 + 16) != -1)
                  {
                    v277 = 0;
                    do
                    {
                      LODWORD(v471[0]) = 6;
                      HIDWORD(v471[0]) = v277;
                      WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode&>((uint64_t)v470, (uint64_t *)&v469, v471, &v468);
                      ++v277;
                    }
                    while (v277 < *(_DWORD *)(v269 + 16) + 1);
                  }
                  goto LABEL_21;
                }
LABEL_525:
                goto LABEL_20;
              }
              if (v44 - 359 < 4)
              {
                *(_QWORD *)&v468 = **(_QWORD **)(v43 + 72);
                v313 = *(_QWORD *)(v468 + 112);
                if ((v313 & 1) != 0)
                  v314 = (v313 >> 1) & 3;
                else
                  v314 = *(unsigned __int8 *)(v313 + 4);
                LOBYTE(v471[0]) = v314 != 2;
                WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(v470, v458, (uint64_t *)&v468, v471, v36, v37, v38, v39);
                if (!*(_BYTE *)(v470[0] + 8))
                {
                  v315 = *(unsigned __int16 *)(v43 + 18) - 360;
                  if (v315 > 2)
                    v316 = 3;
                  else
                    v316 = dword_1991563D8[(__int16)v315];
                  v471[0] = 9;
                  v351 = *(_QWORD *)(v43 + 72);
                  *(_QWORD *)&v468 = 0;
                  *((_QWORD *)&v468 + 1) = v351;
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)v470, (uint64_t *)&v469, v471, &v468);
                  v471[0] = 8;
                  v352 = *(_QWORD *)(v43 + 24);
                  v353 = v352 & 0xFF00FFFFFFFFFFFFLL;
                  *(_QWORD *)&v468 = v352 & 0xFF00FFFFFFFFFFFFLL;
                  *((_QWORD *)&v468 + 1) = 0;
                  if ((v352 & 0xFF00FFFFFFFFFFFFLL) == 0)
                    goto LABEL_95;
                  v177 = *(unsigned __int16 *)((v352 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if (v177 > 2)
                    goto LABEL_95;
                  v178 = *(_QWORD *)(v353 + 72);
                  *((_QWORD *)&v468 + 1) = v178;
                  if (!(_DWORD)v177)
                    goto LABEL_95;
                  if ((_DWORD)v177 == 1)
                    goto LABEL_584;
                  goto LABEL_605;
                }
                goto LABEL_525;
              }
            }
LABEL_18:
            v45 = *(_QWORD *)(v43 + 24);
            if ((*(_BYTE *)(v43 + 56) & 0x10) != 0)
            {
              v135 = *(_QWORD *)(v43 + 32);
              if ((int)v135 + (int)v45 > v45)
              {
                v136 = *(_QWORD *)(a1 + 32);
                v137 = *(_QWORD *)(v43 + 24);
                do
                {
                  if (v137 >= *(unsigned int *)(v136 + 164))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984E8238);
                  }
                  v138 = *(_QWORD *)(*(_QWORD *)(v136 + 152) + 8 * v137);
                  v139 = v138 & 0xFF00FFFFFFFFFFFFLL;
                  if ((v138 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v140 = *v466;
                    if (*v466)
                    {
                      v141 = *(_DWORD *)(v140 - 8);
                      v142 = (v139 + ~(v138 << 32)) ^ ((v139 + ~(v138 << 32)) >> 22);
                      v143 = 9 * ((v142 + ~(v142 << 13)) ^ ((v142 + ~(v142 << 13)) >> 8));
                      v144 = (v143 ^ (v143 >> 15)) + ~((v143 ^ (v143 >> 15)) << 27);
                      v145 = v141 & ((v144 >> 31) ^ v144);
                      v146 = *(_QWORD *)(v140 + 16 * v145);
                      if (v146 != v139)
                      {
                        v147 = 1;
                        while (v146)
                        {
                          v145 = ((_DWORD)v145 + v147) & v141;
                          v146 = *(_QWORD *)(v140 + 16 * v145);
                          ++v147;
                          if (v146 == v139)
                            goto LABEL_165;
                        }
                        v145 = *(unsigned int *)(v140 - 4);
                      }
LABEL_165:
                      if (v145 != *(_DWORD *)(v140 - 4))
                      {
                        v33 = *(_QWORD *)(v140 + 16 * v145 + 8);
                        if (v33)
                        {
                          v45 = *(_QWORD *)(v43 + 24);
                          v135 = *(_QWORD *)(v43 + 32);
                        }
                      }
                    }
                  }
                  v47 = 0;
                  ++v137;
                }
                while (v137 < (v45 + v135));
                goto LABEL_21;
              }
              goto LABEL_20;
            }
            v46 = v45 & 0xFF00FFFFFFFFFFFFLL;
            if ((v45 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v87 = *v466;
              if (*v466)
              {
                v116 = *(_DWORD *)(v87 - 8);
                v117 = (v46 + ~(v45 << 32)) ^ ((v46 + ~(v45 << 32)) >> 22);
                v118 = 9 * ((v117 + ~(v117 << 13)) ^ ((v117 + ~(v117 << 13)) >> 8));
                v119 = (v118 ^ (v118 >> 15)) + ~((v118 ^ (v118 >> 15)) << 27);
                v120 = v116 & ((v119 >> 31) ^ v119);
                v121 = *(_QWORD *)(v87 + 16 * v120);
                if (v121 != v46)
                {
                  v122 = 1;
                  while (v121)
                  {
                    v120 = ((_DWORD)v120 + v122) & v116;
                    v121 = *(_QWORD *)(v87 + 16 * v120);
                    ++v122;
                    if (v121 == v46)
                      goto LABEL_126;
                  }
                  v120 = *(unsigned int *)(v87 - 4);
                }
LABEL_126:
                if (v120 != *(_DWORD *)(v87 - 4))
                {
                  v33 = *(_QWORD *)(v87 + 16 * v120 + 8);
                  if (v33)
                }
              }
              v88 = *(_QWORD *)(v43 + 32);
              v89 = v88 & 0xFF00FFFFFFFFFFFFLL;
              if ((v88 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v90 = *v466;
                if (*v466)
                {
                  v191 = *(_DWORD *)(v90 - 8);
                  v192 = (v89 + ~(v88 << 32)) ^ ((v89 + ~(v88 << 32)) >> 22);
                  v193 = 9 * ((v192 + ~(v192 << 13)) ^ ((v192 + ~(v192 << 13)) >> 8));
                  v194 = (v193 ^ (v193 >> 15)) + ~((v193 ^ (v193 >> 15)) << 27);
                  v195 = v191 & ((v194 >> 31) ^ v194);
                  v196 = *(_QWORD *)(v90 + 16 * v195);
                  if (v196 != v89)
                  {
                    v197 = 1;
                    while (v196)
                    {
                      v195 = ((_DWORD)v195 + v197) & v191;
                      v196 = *(_QWORD *)(v90 + 16 * v195);
                      ++v197;
                      if (v196 == v89)
                        goto LABEL_250;
                    }
                    v195 = *(unsigned int *)(v90 - 4);
                  }
LABEL_250:
                  if (v195 != *(_DWORD *)(v90 - 4))
                  {
                    v33 = *(_QWORD *)(v90 + 16 * v195 + 8);
                    if (v33)
                  }
                }
                v91 = *(_QWORD *)(v43 + 40);
                v92 = v91 & 0xFF00FFFFFFFFFFFFLL;
                if ((v91 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v242 = *v466;
                  if (*v466)
                  {
                    v243 = *(_DWORD *)(v242 - 8);
                    v244 = (v92 + ~(v91 << 32)) ^ ((v92 + ~(v91 << 32)) >> 22);
                    v245 = 9 * ((v244 + ~(v244 << 13)) ^ ((v244 + ~(v244 << 13)) >> 8));
                    v246 = (v245 ^ (v245 >> 15)) + ~((v245 ^ (v245 >> 15)) << 27);
                    v247 = v243 & ((v246 >> 31) ^ v246);
                    v248 = *(_QWORD *)(v242 + 16 * v247);
                    if (v248 != v92)
                    {
                      v249 = 1;
                      while (v248)
                      {
                        v247 = ((_DWORD)v247 + v249) & v243;
                        v248 = *(_QWORD *)(v242 + 16 * v247);
                        ++v249;
                        if (v248 == v92)
                          goto LABEL_371;
                      }
                      v247 = *(unsigned int *)(v242 - 4);
                    }
LABEL_371:
                    if (v247 != *(_DWORD *)(v242 - 4))
                    {
                      v237 = v242 + 16 * v247;
                      goto LABEL_277;
                    }
                  }
                }
              }
            }
            goto LABEL_20;
          }
          if (v44 == 20)
            goto LABEL_33;
          if (v44 - 132 < 2)
          {
            v131 = *(_QWORD *)(v43 + 24);
            v132 = v131 & 0xFF00FFFFFFFFFFFFLL;
            if (v133)
            {
              v317 = (uint64_t)v133;
              if (*((_DWORD *)v133 + 2) == 1)
              {
                v318 = v133[3];
                v470[0] = 0;
                if ((v318 & 1) == 0 || v318 == 4)
                  v470[0] = v318 & 0xFFFFFFFFFFFFFFFDLL;
                else
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(v470, v133 + 3);
                v319 = *(uint64_t **)(v43 + 72);
                *(_QWORD *)&v468 = 0;
                v320 = *v319;
                if ((*v319 & 1) != 0 && v320 != 4)
                {
                  WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v468, v319);
                  v320 = v468;
                }
                *(_QWORD *)&v468 = v320 & 0xFFFFFFFFFFFFFFFDLL;
                JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)v470, (const JSC::DFG::StructureAbstractValue *)&v468, v34, v35, v36, v37, v38, v39);
                if ((v468 & 1) != 0)
                  WTF::fastFree(v468 & 0xFFFFFFFFFFFFFFFCLL, v321, v322, v323, v324, v325, v326, v327);
                if ((v470[0] & 0xFFFFFFFFFFFFFFFDLL) != 0)
                else
                v328 = v470[0];
                if ((v470[0] & 1) != 0)
LABEL_582:
                  WTF::fastFree(v328 & 0xFFFFFFFFFFFFFFFCLL, (void *)v33, v34, v35, v36, v37, v38, v39);
                goto LABEL_20;
              }
            }
            v134 = *v466;
            if (!*v466)
              goto LABEL_20;
            v217 = *(_DWORD *)(v134 - 8);
            v218 = (v132 + ~(v131 << 32)) ^ ((v132 + ~(v131 << 32)) >> 22);
            v219 = 9 * ((v218 + ~(v218 << 13)) ^ ((v218 + ~(v218 << 13)) >> 8));
            v220 = (v219 ^ (v219 >> 15)) + ~((v219 ^ (v219 >> 15)) << 27);
            v221 = v217 & ((v220 >> 31) ^ v220);
            v222 = *(_QWORD *)(v134 + 16 * v221);
            if (v222 != v132)
            {
              v223 = 1;
              while (v222)
              {
                v221 = ((_DWORD)v221 + v223) & v217;
                v222 = *(_QWORD *)(v134 + 16 * v221);
                ++v223;
                if (v222 == v132)
                  goto LABEL_275;
              }
LABEL_274:
              v221 = *(unsigned int *)(v134 - 4);
            }
LABEL_275:
            if (v221 == *(_DWORD *)(v134 - 4))
              goto LABEL_20;
            v237 = v134 + 16 * v221;
            goto LABEL_277;
          }
          if (v44 - 24 >= 2)
            goto LABEL_18;
          v168 = *(_QWORD *)(v43 + 24);
          if ((*(_BYTE *)(v43 + 56) & 0x10) != 0)
          {
            v441 = *(_QWORD *)(v43 + 32);
            if ((int)v441 + (int)v168 > v168)
            {
              v442 = *(_QWORD *)(a1 + 32);
              v443 = *(_QWORD *)(v43 + 24);
              do
              {
                if (v443 >= *(unsigned int *)(v442 + 164))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984E8288);
                }
                v33 = *(_QWORD *)(*(_QWORD *)(v442 + 152) + 8 * v443);
                if ((v33 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v168 = *(_QWORD *)(v43 + 24);
                  v441 = *(_QWORD *)(v43 + 32);
                }
                v47 = 0;
                ++v443;
              }
              while (v443 < (v168 + v441));
              goto LABEL_21;
            }
            goto LABEL_20;
          }
          v169 = v168 & 0xFF00FFFFFFFFFFFFLL;
          if ((v168 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            if ((v168 & 0x1000000000000) == 0)
            {
              v170 = (v168 >> 50) & 0x3F;
              if ((_DWORD)v170)
              {
                if (v170 > 0x34)
                  goto LABEL_612;
                if (((1 << v170) & 0x12798001880F84) == 0)
                {
                  if (((1 << v170) & 0xD867FFE77F07ALL) == 0)
                    goto LABEL_612;
                  v403 = *v466;
                  if (*v466)
                  {
                    v404 = *(_DWORD *)(v403 - 8);
                    v405 = (v169 + ~(v168 << 32)) ^ ((v169 + ~(v168 << 32)) >> 22);
                    v406 = 9 * ((v405 + ~(v405 << 13)) ^ ((v405 + ~(v405 << 13)) >> 8));
                    v407 = (v406 ^ (v406 >> 15)) + ~((v406 ^ (v406 >> 15)) << 27);
                    v408 = v404 & ((v407 >> 31) ^ v407);
                    v409 = *(_QWORD *)(v403 + 16 * v408);
                    if (v409 != v169)
                    {
                      v410 = 1;
                      while (v409)
                      {
                        v408 = ((_DWORD)v408 + v410) & v404;
                        v409 = *(_QWORD *)(v403 + 16 * v408);
                        ++v410;
                        if (v409 == v169)
                          goto LABEL_528;
                      }
                      v408 = *(unsigned int *)(v403 - 4);
                    }
LABEL_528:
                    if (v408 != *(_DWORD *)(v403 - 4))
                    {
                      v33 = *(_QWORD *)(v403 + 16 * v408 + 8);
                      if (v33)
                    }
                  }
                }
              }
            }
            v171 = *(_QWORD *)(v43 + 32);
            v172 = v171 & 0xFF00FFFFFFFFFFFFLL;
            if ((v171 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              if ((v171 & 0x1000000000000) == 0)
              {
                v173 = (v171 >> 50) & 0x3F;
                if ((_DWORD)v173)
                {
                  if (v173 > 0x34)
                    goto LABEL_612;
                  if (((1 << v173) & 0x12798001880F84) == 0)
                  {
                    if (((1 << v173) & 0xD867FFE77F07ALL) == 0)
                      goto LABEL_612;
                    v411 = *v466;
                    if (*v466)
                    {
                      v412 = *(_DWORD *)(v411 - 8);
                      v413 = (v172 + ~(v171 << 32)) ^ ((v172 + ~(v171 << 32)) >> 22);
                      v414 = 9 * ((v413 + ~(v413 << 13)) ^ ((v413 + ~(v413 << 13)) >> 8));
                      v415 = (v414 ^ (v414 >> 15)) + ~((v414 ^ (v414 >> 15)) << 27);
                      v416 = v412 & ((v415 >> 31) ^ v415);
                      v417 = *(_QWORD *)(v411 + 16 * v416);
                      if (v417 != v172)
                      {
                        v418 = 1;
                        while (v417)
                        {
                          v416 = ((_DWORD)v416 + v418) & v412;
                          v417 = *(_QWORD *)(v411 + 16 * v416);
                          ++v418;
                          if (v417 == v172)
                            goto LABEL_534;
                        }
                        v416 = *(unsigned int *)(v411 - 4);
                      }
LABEL_534:
                      if (v416 != *(_DWORD *)(v411 - 4))
                      {
                        v33 = *(_QWORD *)(v411 + 16 * v416 + 8);
                        if (v33)
                      }
                    }
                  }
                }
              }
              v47 = 0;
              v174 = *(_QWORD *)(v43 + 40);
              v175 = v174 & 0xFF00FFFFFFFFFFFFLL;
              if ((v174 & 0xFF00FFFFFFFFFFFFLL) == 0)
                goto LABEL_21;
              if ((v174 & 0x1000000000000) != 0)
                goto LABEL_21;
              v47 = 0;
              v176 = (v174 >> 50) & 0x3F;
              if (!(_DWORD)v176)
                goto LABEL_21;
              if (v176 > 0x34)
                goto LABEL_612;
              if (((1 << v176) & 0x12798001880F84) != 0)
                goto LABEL_21;
              if (((1 << v176) & 0xD867FFE77F07ALL) == 0)
              {
LABEL_612:
                __break(0xC471u);
                JUMPOUT(0x1984E8260);
              }
              v419 = *v466;
              if (*v466)
              {
                v420 = *(_DWORD *)(v419 - 8);
                v421 = (v175 + ~(v174 << 32)) ^ ((v175 + ~(v174 << 32)) >> 22);
                v422 = 9 * ((v421 + ~(v421 << 13)) ^ ((v421 + ~(v421 << 13)) >> 8));
                v423 = (v422 ^ (v422 >> 15)) + ~((v422 ^ (v422 >> 15)) << 27);
                v424 = v420 & ((v423 >> 31) ^ v423);
                v425 = *(_QWORD *)(v419 + 16 * v424);
                if (v425 != v175)
                {
                  v426 = 1;
                  while (v425)
                  {
                    v424 = ((_DWORD)v424 + v426) & v420;
                    v425 = *(_QWORD *)(v419 + 16 * v424);
                    ++v426;
                    if (v425 == v175)
                      goto LABEL_571;
                  }
                  v424 = *(unsigned int *)(v419 - 4);
                }
LABEL_571:
                if (v424 != *(_DWORD *)(v419 - 4))
                {
                  v237 = v419 + 16 * v424;
LABEL_277:
                  v33 = *(_QWORD *)(v237 + 8);
                  if (v33)
                }
              }
            }
          }
LABEL_20:
          v47 = 0;
LABEL_21:
          v48 = (uint64_t)v469;
          if (!v469)
            goto LABEL_33;
          if (*((_DWORD *)v469 - 3))
          {
            v49 = *((unsigned int *)v469 - 1);
            v50 = v469;
            if ((_DWORD)v49)
            {
              v51 = 0;
              while (!LODWORD(v469[v51]))
              {
                v51 += 3;
                if (3 * v49 == v51)
                  goto LABEL_27;
              }
              v50 = &v469[v51];
            }
            v56 = &v469[3 * v49];
            if (v50 != v56)
            {
              v57 = v47 + 2;
              while (1)
              {
                v58 = *v50;
                v59 = v50[1];
                if (v59)
                  break;
                v60 = *v57;
                if (!*v57)
                  goto LABEL_47;
                v125 = *(_DWORD *)(v60 - 8);
                v126 = v125 & (HIDWORD(v58) + v58);
                v33 = v60 + 16 * v126;
                v127 = *(_DWORD *)v33;
                v128 = *(_DWORD *)(v33 + 4);
                if (*(_DWORD *)v33 != (_DWORD)v58 || v128 != HIDWORD(v58))
                {
                  v130 = 1;
                  while (v127 | v128)
                  {
                    v126 = (v126 + v130) & v125;
                    v33 = v60 + 16 * v126;
                    v127 = *(_DWORD *)v33;
                    v128 = *(_DWORD *)(v33 + 4);
                    ++v130;
                    if (*(_DWORD *)v33 == (_DWORD)v58 && v128 == HIDWORD(v58))
                      goto LABEL_140;
                  }
LABEL_139:
                  v33 = v60 + 16 * *(unsigned int *)(v60 - 4);
                }
LABEL_140:
                if (v60 + 16 * *(unsigned int *)(v60 - 4) != v33)
                  WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::remove(v57, (_QWORD *)v33);
                do
                {
LABEL_47:
                  v50 += 3;
                  if (v50 == v56)
                    goto LABEL_61;
                }
                while (!*(_DWORD *)v50);
                if (v50 == v56)
                {
LABEL_61:
                  v48 = (uint64_t)v469;
                  goto LABEL_27;
                }
              }
              v61 = *v466;
              if (!*v466)
                goto LABEL_52;
              v108 = *(_DWORD *)(v61 - 8);
              v109 = (~(v59 << 32) + v59) ^ ((unint64_t)(~(v59 << 32) + v59) >> 22);
              v110 = 9 * ((v109 + ~(v109 << 13)) ^ ((v109 + ~(v109 << 13)) >> 8));
              v111 = (v110 ^ (v110 >> 15)) + ~((v110 ^ (v110 >> 15)) << 27);
              v112 = v108 & ((v111 >> 31) ^ v111);
              v113 = *(_QWORD *)(v61 + 16 * v112);
              if (v113 != v59)
              {
                v114 = 1;
                while (v113)
                {
                  v112 = ((_DWORD)v112 + v114) & v108;
                  v113 = *(_QWORD *)(v61 + 16 * v112);
                  ++v114;
                  if (v113 == v59)
                    goto LABEL_113;
                }
                v112 = *(unsigned int *)(v61 - 4);
              }
LABEL_113:
              if (v112 == *(_DWORD *)(v61 - 4))
              {
LABEL_52:
                *(_QWORD *)&v468 = *v50;
                v471[0] = 0;
              }
              else
              {
                v115 = *(_QWORD *)(v61 + 16 * v112 + 8);
                *(_QWORD *)&v468 = *v50;
                v471[0] = v115;
                if (v115)
                {
                  WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedLocationDescriptor const&,JSC::DFG::Node *&>((uint64_t)v470, v57, &v468, v471);
                  goto LABEL_47;
                }
              }
              v60 = *v57;
              if (!*v57)
                goto LABEL_47;
              v62 = *(_DWORD *)(v60 - 8);
              v63 = v62 & (HIDWORD(v58) + v58);
              v33 = v60 + 16 * v63;
              v64 = *(_DWORD *)v33;
              v65 = *(_DWORD *)(v33 + 4);
              if (*(_DWORD *)v33 == (_DWORD)v58 && v65 == HIDWORD(v58))
                goto LABEL_140;
              v67 = 1;
              while (v64 | v65)
              {
                v63 = (v63 + v67) & v62;
                v33 = v60 + 16 * v63;
                v64 = *(_DWORD *)v33;
                v65 = *(_DWORD *)(v33 + 4);
                ++v67;
                if (*(_DWORD *)v33 == (_DWORD)v58 && v65 == HIDWORD(v58))
                  goto LABEL_140;
              }
              goto LABEL_139;
            }
LABEL_27:
            if (!v48)
              goto LABEL_33;
          }
          v33 = v48 - 16;
          v52 = *(_QWORD *)(StatusReg + 752);
          if (v52)
          {
            if (!(v33 >> 43)
              && ((*(unsigned int *)((char *)&bmalloc_megapage_table
                                   + (((unint64_t)(v48 - 16) >> 27) & 0x1FFFFFFFFCLL)) >> ((v48 - 16) >> 24)) & 1) != 0)
            {
LABEL_31:
              v53 = *(unsigned int *)(v52 + 8000);
              if (v53 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v52, v33, (os_unfair_lock_s *)5, v35, v36, v37, v38, v39);
              }
              else
              {
                *(_QWORD *)(v52 + 8 * v53) = v33 | 0x5000000000000;
                *(_DWORD *)(v52 + 8000) = v53 + 1;
              }
              goto LABEL_33;
            }
            if (v33 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v33 >> 24)
            {
              v35 = 0;
            }
            else
            {
              v35 = (*(_DWORD *)((char *)off_1ECF425F8
                               + (((((unint64_t)(v48 - 16) >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((((v48 - 16) >> 24) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v35 == 1)
                goto LABEL_31;
            }
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v52, v33, 1, v35, v36, v37, v38, v39);
          }
          else
          {
            pas_try_deallocate_slow_no_cache(v33, (uint64_t)&bmalloc_heap_config, 1);
          }
LABEL_33:
          v54 = *v12;
          *v12 = 0;
          v470[0] = v54;
          if (!v54)
            goto LABEL_34;
          v68 = *(_DWORD *)(v54 - 4);
          if (!v68)
            goto LABEL_34;
          v69 = 0;
          do
          {
            v70 = (uint64_t *)(v54 + 48 * --v68);
            v71 = *v70;
            if ((unint64_t)(*v70 + 1) < 2)
              continue;
            v72 = *(_QWORD *)(a1 + 200);
            if (v72)
            {
              v73 = *(_DWORD *)(v72 - 8);
              v74 = (~(v71 << 32) + v71) ^ ((unint64_t)(~(v71 << 32) + v71) >> 22);
              v75 = 9 * ((v74 + ~(v74 << 13)) ^ ((v74 + ~(v74 << 13)) >> 8));
              v76 = (v75 ^ (v75 >> 15)) + ~((v75 ^ (v75 >> 15)) << 27);
              v77 = v73 & ((v76 >> 31) ^ v76);
              v78 = *(_QWORD *)(v72 + 8 * v77);
              if (v78 == v71)
                continue;
              v79 = 1;
              while (v78)
              {
                v77 = (v77 + v79) & v73;
                v78 = *(_QWORD *)(v72 + 8 * v77);
                ++v79;
                if (v78 == v71)
                  goto LABEL_65;
              }
            }
            *v70 = -1;
            v80 = *(_QWORD *)(v54 + 48 * v68 + 40);
            if ((v80 & 1) != 0)
              WTF::fastFree(v80 & 0xFFFFFFFFFFFFFFFCLL, (void *)v33, v34, v35, v36, v37, v38, v39);
            v81 = *(_QWORD *)(v54 + 48 * v68 + 32);
            if ((v81 & 1) != 0)
              WTF::fastFree(v81 & 0xFFFFFFFFFFFFFFFCLL, (void *)v33, v34, v35, v36, v37, v38, v39);
            v82 = *(_QWORD *)(v54 + 48 * v68 + 24);
            if (v82)
              WTF::fastFree(v82 - 16, (void *)v33, v34, v35, v36, v37, v38, v39);
            ++v69;
LABEL_65:
            ;
          }
          while (v68);
          if (v69)
          {
            v123 = *(_DWORD *)(v54 - 12) - v69;
            *(_DWORD *)(v54 - 16) += v69;
            *(_DWORD *)(v54 - 12) = v123;
          }
          else
          {
            v123 = *(_DWORD *)(v54 - 12);
          }
          v124 = *(_DWORD *)(v54 - 4);
          if (v124 >= 9 && 6 * v123 < v124)
LABEL_34:
          v55 = v470[0];
          if (v470[0])
          {
            v104 = *(unsigned int *)(v470[0] - 4);
            if ((_DWORD)v104)
            {
              v105 = (_QWORD *)(v470[0] + 40);
              do
              {
                if (*(v105 - 5) != -1)
                {
                  if ((*v105 & 1) != 0)
                    WTF::fastFree(*v105 & 0xFFFFFFFFFFFFFFFCLL, (void *)v33, v34, v35, v36, v37, v38, v39);
                  v106 = *(v105 - 1);
                  if ((v106 & 1) != 0)
                    WTF::fastFree(v106 & 0xFFFFFFFFFFFFFFFCLL, (void *)v33, v34, v35, v36, v37, v38, v39);
                  v107 = *(v105 - 2);
                  if (v107)
                    WTF::fastFree(v107 - 16, (void *)v33, v34, v35, v36, v37, v38, v39);
                }
                v105 += 6;
                --v104;
              }
              while (v104);
            }
            WTF::fastFree(v55 - 16, (void *)v33, v34, v35, v36, v37, v38, v39);
          }
          ++v41;
        }
        while (v41 != v42);
LABEL_174:
        v152 = *(unsigned int *)(v464 + 8);
        if (*(_DWORD *)(a1 + 420) <= v152)
        {
          __break(0xC471u);
          JUMPOUT(0x1984E8230);
        }
        v156 = 0;
        LODWORD(v157) = 0;
        *(_QWORD *)&v468 = 0;
        v158 = *(_QWORD *)(a1 + 520);
        if (v158)
        {
          v157 = *(unsigned int *)(v158 - 4);
          v159 = (uint64_t *)(v158 + 48 * v157);
          if (!*(_DWORD *)(v158 - 12))
          {
            v156 = (uint64_t *)(v158 + 48 * v157);
            goto LABEL_176;
          }
          v156 = *(uint64_t **)(a1 + 520);
          if ((_DWORD)v157)
          {
            v167 = 48 * v157;
            v156 = *(uint64_t **)(a1 + 520);
            do
            {
              if ((unint64_t)(*v156 + 1) > 1)
                goto LABEL_177;
              v156 += 6;
              v167 -= 48;
            }
            while (v167);
            v156 = v159;
          }
        }
        else
        {
LABEL_176:
          v159 = (uint64_t *)(v158 + 48 * v157);
        }
LABEL_177:
        if (v158)
          v160 = (uint64_t *)(v158 + 48 * *(unsigned int *)(v158 - 4));
        else
          v160 = 0;
        if (v160 == v156)
          goto LABEL_180;
        while (2)
        {
          if (!*((_DWORD *)v156 + 4))
            goto LABEL_434;
          v359 = *(unsigned int *)(v464 + 220);
          v360 = *(_QWORD *)(v464 + 208);
          v357 = *(_QWORD *)(v360 + 8 * v359 - 8);
          v358 = *(unsigned __int16 *)(v357 + 18);
          if ((v358 - 364) >= 0xC)
          {
            v356 = v360 - 16;
            do
            {
              v357 = *(_QWORD *)(v356 + 8 * v359);
              v358 = *(unsigned __int16 *)(v357 + 18);
              --v359;
            }
            while ((v358 - 364) > 0xB);
          }
          v361 = 1;
          switch(v358)
          {
            case 364:
              goto LABEL_409;
            case 365:
              v361 = 2;
              goto LABEL_409;
            case 366:
              v361 = *(_DWORD *)(*(_QWORD *)(v357 + 72) + 12) + 1;
              goto LABEL_453;
            case 367:
              v361 = *(_DWORD *)(*(_QWORD *)(v357 + 72) + 12);
LABEL_453:
              if (!v361)
                goto LABEL_434;
LABEL_409:
              v362 = 0;
              v363 = 0;
              v364 = 0;
              v153 = v156 + 1;
              v365 = (uint64_t *)(v357 + 72);
              break;
            default:
              goto LABEL_434;
          }
          while (2)
          {
            while (2)
            {
              if (v358 == 366)
              {
                v367 = (_QWORD *)*v365;
                v378 = *(_DWORD *)(*v365 + 12);
                if (v378 <= v362)
                {
                  if (v378 != v362)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1984E8190);
                  }
                }
                else
                {
                  v367 = (_QWORD *)(*v367 + 32 * v364);
                }
                goto LABEL_417;
              }
              if (v358 != 367)
              {
                if (!v362)
                {
                  v366 = (uint64_t)v365;
                  if (v358 != 364)
                    v366 = *v365;
                  goto LABEL_418;
                }
                if (v362 != 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1984E81F8);
                }
                v367 = (_QWORD *)*v365;
LABEL_417:
                v366 = (uint64_t)(v367 + 2);
                goto LABEL_418;
              }
              if (*(_DWORD *)(*v365 + 12) <= v362)
              {
                __break(0xC471u);
                JUMPOUT(0x1984E8290);
              }
              v366 = *(_QWORD *)*v365 + 8 * v364;
LABEL_418:
              v368 = *(_DWORD *)(*(_QWORD *)v366 + 8);
              if (*(_DWORD *)(a1 + 484) <= v368)
              {
                __break(0xC471u);
                JUMPOUT(0x1984E8240);
              }
              v369 = *v156;
              v370 = *(_QWORD *)(*(_QWORD *)(a1 + 472) + 40 * v368 + 16);
              if (!v370)
              {
LABEL_420:
                v362 = v364 + 1;
                v364 = (v364 + 1);
                v363 = 1;
                if (v361 == v362)
                  goto LABEL_428;
                continue;
              }
              break;
            }
            v371 = *(_DWORD *)(v370 - 8);
            v372 = (~(v369 << 32) + v369) ^ ((unint64_t)(~(v369 << 32) + v369) >> 22);
            v373 = 9 * ((v372 + ~(v372 << 13)) ^ ((v372 + ~(v372 << 13)) >> 8));
            v374 = (v373 ^ (v373 >> 15)) + ~((v373 ^ (v373 >> 15)) << 27);
            v375 = v371 & ((v374 >> 31) ^ v374);
            v376 = (uint64_t *)(v370 + 48 * v375);
            v377 = *v376;
            if (*v376 != v369)
            {
              v388 = 1;
              v389 = *v376;
              v390 = v375;
              while (v389)
              {
                v390 = (v390 + v388) & v371;
                v389 = *(_QWORD *)(v370 + 48 * v390);
                ++v388;
                if (v389 == v369)
                {
                  v391 = 1;
                  while (v377)
                  {
                    v375 = (v375 + v391) & v371;
                    v376 = (uint64_t *)(v370 + 48 * v375);
                    v377 = *v376;
                    ++v391;
                    if (*v376 == v369)
                      goto LABEL_423;
                  }
                  v376 = (uint64_t *)(v370 + 48 * *(unsigned int *)(v370 - 4));
                  goto LABEL_423;
                }
              }
              goto LABEL_420;
            }
LABEL_423:
            if (!*((_DWORD *)v376 + 4))
              goto LABEL_420;
            v362 = v364 + 1;
            v364 = (v364 + 1);
            if (v361 != v362)
              continue;
            break;
          }
          if ((v363 & 1) == 0)
            goto LABEL_434;
LABEL_428:
          v379 = *(_QWORD *)(a1 + 200);
          if (v379)
          {
            v380 = *(_DWORD *)(v379 - 8);
            v381 = (~(v369 << 32) + v369) ^ ((unint64_t)(~(v369 << 32) + v369) >> 22);
            v382 = 9 * ((v381 + ~(v381 << 13)) ^ ((v381 + ~(v381 << 13)) >> 8));
            v383 = (v382 ^ (v382 >> 15)) + ~((v382 ^ (v382 >> 15)) << 27);
            v384 = v380 & ((v383 >> 31) ^ v383);
            v385 = *(_QWORD *)(v379 + 8 * v384);
            if (v385 == v369)
            {
LABEL_433:
            }
            else
            {
              v386 = 1;
              while (v385)
              {
                v384 = (v384 + v386) & v380;
                v385 = *(_QWORD *)(v379 + 8 * v384);
                ++v386;
                if (v385 == v369)
                  goto LABEL_433;
              }
            }
          }
LABEL_434:
          v387 = v156 + 6;
          v156 = v159;
          if (v387 != v159)
          {
            v156 = v387;
            while ((unint64_t)(*v156 + 1) <= 1)
            {
              v156 += 6;
              if (v156 == v159)
              {
                v156 = v159;
                break;
              }
            }
          }
          if (v156 != v160)
            continue;
          break;
        }
LABEL_180:
        v161 = *(unsigned int *)(v464 + 220);
        if ((_DWORD)v161)
        {
          v162 = 8 * v161;
          while (1)
          {
            v163 = *(_QWORD *)(*(_QWORD *)(v464 + 208) - 8 + v162);
            v164 = *(unsigned __int16 *)(v163 + 18);
            if ((v164 - 364) < 0xC)
              break;
            if ((v164 - 28) < 2 || (v164 - 23) <= 2)
            {
              v162 -= 8;
              if (v162)
                continue;
            }
            goto LABEL_490;
          }
        }
        else
        {
LABEL_490:
          v163 = 0;
        }
        v166 = v468;
        if ((_QWORD)v468)
        {
          v238 = *(unsigned int *)(v468 - 4);
          if ((_DWORD)v238)
          {
            v239 = (_QWORD *)(v468 + 40);
            do
            {
              if (*(v239 - 5) != -1)
              {
                if ((*v239 & 1) != 0)
                  WTF::fastFree(*v239 & 0xFFFFFFFFFFFFFFFCLL, v165, a3, a4, a5, a6, a7, a8);
                v240 = *(v239 - 1);
                if ((v240 & 1) != 0)
                  WTF::fastFree(v240 & 0xFFFFFFFFFFFFFFFCLL, v165, a3, a4, a5, a6, a7, a8);
                v241 = *(v239 - 2);
                if (v241)
                  WTF::fastFree(v241 - 16, v165, a3, a4, a5, a6, a7, a8);
              }
              v239 += 6;
              --v238;
            }
            while (v238);
          }
          WTF::fastFree(v166 - 16, v165, a3, a4, a5, a6, a7, a8);
        }
        v14 = (v462 + 1);
        v8 = v459;
        v13 = *(unsigned int *)(v459 + 60);
        if (v13 > v14)
        {
          while (!*(_QWORD *)(*(_QWORD *)(v459 + 48) + 8 * v14))
          {
            if (v13 == ++v14)
            {
              LODWORD(v14) = *(_DWORD *)(v459 + 60);
              break;
            }
          }
        }
      }
      while ((_DWORD)v461 != (_DWORD)v14);
    }
  }
}

void WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::deallocateTable(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t StatusReg;
  uint64_t v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    v10 = a1 + 8;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      if (*(_QWORD *)(v10 - 8) == -1)
        goto LABEL_10;
      a2 = *(_QWORD *)v10;
      if (!*(_QWORD *)v10)
        goto LABEL_10;
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 8) = 0;
      v12 = *(_QWORD *)(StatusReg + 752);
      if (v12)
      {
        if (!(a2 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((a2 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(a2)) & 1) != 0)
        {
LABEL_8:
          v13 = *(unsigned int *)(v12 + 8000);
          if (v13 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v12, a2, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
          }
          else
          {
            *(_QWORD *)(v12 + 8 * v13) = a2 | 0x5000000000000;
            *(_DWORD *)(v12 + 8000) = v13 + 1;
          }
          goto LABEL_10;
        }
        if (a2 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= a2 >> 24)
        {
          a4 = 0;
        }
        else
        {
          a4 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((a2 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(a2) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)a4 == 1)
            goto LABEL_8;
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v12, a2, 1, a4, a5, a6, a7, a8);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(a2, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_10:
      v10 += 24;
      --v9;
    }
    while (v9);
  }
  WTF::fastFree(a1 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
}

void WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::deallocateTable(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v9 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v9)
  {
    v10 = a1 + 8;
    do
    {
      if (*(_QWORD *)(v10 - 8) != -1)
      {
        v11 = *(_QWORD *)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *(_DWORD *)(v10 + 8) = 0;
          WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v10 += 24;
      --v9;
    }
    while (v9);
  }
  WTF::fastFree(a1 - 16, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  _QWORD *result;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v20 = 0;
    v21 = 0;
    v22 = v10;
    do
    {
      v23 = (uint64_t *)(v9 + 24 * v20);
      v24 = *v23;
      if (*v23)
      {
        if (v24 != -1)
        {
          v25 = *a1;
          if (*a1)
            v26 = *(_DWORD *)(v25 - 8);
          else
            v26 = 0;
          v27 = (~(v24 << 32) + v24) ^ ((unint64_t)(~(v24 << 32) + v24) >> 22);
          v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
          v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
          v30 = v26 & ((v29 >> 31) ^ v29);
          v31 = 1;
          do
          {
            v32 = v30;
            v33 = (_QWORD *)(v25 + 24 * v30);
            v30 = (v30 + v31++) & v26;
          }
          while (*v33);
          v34 = v32;
          v35 = v25 + 24 * v32;
          v38 = *(_QWORD *)(v35 + 8);
          v37 = (_QWORD *)(v35 + 8);
          v36 = v38;
          if (v38)
          {
            *v37 = 0;
            *(_DWORD *)(v25 + 24 * v32 + 16) = 0;
            WTF::fastFree(v36, v13, v14, v15, v16, v17, v18, v19);
            v24 = *v23;
          }
          *v33 = v24;
          v39 = v9 + 24 * v20;
          *v37 = 0;
          v37[1] = 0;
          v41 = *(_QWORD *)(v39 + 8);
          v40 = v39 + 8;
          *(_QWORD *)v40 = 0;
          *v37 = v41;
          v42 = *(_DWORD *)(v40 + 8);
          *(_DWORD *)(v40 + 8) = 0;
          v43 = v25 + 24 * v34;
          *(_DWORD *)(v43 + 16) = v42;
          v44 = *(_DWORD *)(v40 + 12);
          *(_DWORD *)(v40 + 12) = 0;
          *(_DWORD *)(v43 + 20) = v44;
          v45 = *(_QWORD *)v40;
          if (*(_QWORD *)v40)
          {
            *(_QWORD *)v40 = 0;
            *(_DWORD *)(v40 + 8) = 0;
            WTF::fastFree(v45, v13, v14, v15, v16, v17, v18, v19);
          }
          if (v23 == (uint64_t *)a3)
            v21 = v33;
        }
      }
      else
      {
        v46 = v9 + 24 * v20;
        v49 = *(_QWORD *)(v46 + 8);
        v48 = (_QWORD *)(v46 + 8);
        v47 = v49;
        if (v49)
        {
          *v48 = 0;
          *(_DWORD *)(v9 + 24 * v20 + 16) = 0;
          WTF::fastFree(v47, v13, v14, v15, v16, v17, v18, v19);
        }
      }
      ++v20;
    }
    while (v20 != v22);
  }
  else
  {
    v21 = 0;
    result = 0;
    if (!v9)
      return result;
  }
  WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
  return v21;
}

uint64_t *WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  if (!*result)
    return result;
  v2 = result;
  result = (uint64_t *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::DFG::Node *>,WTF::DefaultHash<JSC::DFG::Node *>>,JSC::DFG::Node *>(result, a2);
  v8 = *v2;
  if (!result)
  {
    if (!v8)
      return result;
    v9 = *(unsigned int *)(v8 - 4);
    result = (uint64_t *)(v8 + 8 * v9);
    goto LABEL_5;
  }
  if (v8)
  {
    v9 = *(unsigned int *)(v8 - 4);
LABEL_5:
    v8 += 8 * v9;
    if ((uint64_t *)v8 == result)
      return result;
  }
  if ((uint64_t *)v8 != result)
  {
    *result = -1;
    ++*(_DWORD *)(*v2 - 16);
    v10 = *v2;
    v11 = *v2 ? *(_DWORD *)(v10 - 12) - 1 : -1;
    *(_DWORD *)(v10 - 12) = v11;
    v12 = *v2;
    if (*v2)
    {
      v13 = 6 * *(_DWORD *)(v12 - 12);
      v14 = *(_DWORD *)(v12 - 4);
      if (v13 < v14 && v14 >= 9)
        return WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v2, v14 >> 1, 0, v3, v4, v5, v6, v7);
    }
  }
  return result;
}

void JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::determineSinkCandidates(void)::{lambda(WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits> &,JSC::DFG::Node *)#2}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  int v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  WTF *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  unint64_t *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  unsigned int v151;
  __int16 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  uint64_t v179;
  _QWORD *v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unsigned int v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  unsigned int v192;
  _QWORD *v194;
  unsigned int v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  const JSC::CodeOrigin *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t *v238;
  uint64_t *v239;
  unint64_t v240;
  void **v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  void *v256;
  unint64_t v257;
  int v258;
  int v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  const JSC::CodeOrigin *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  const JSC::CodeOrigin *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t v307;
  BOOL v308;
  uint64_t v309;
  uint64_t v310;
  BOOL v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t *v337;
  uint64_t v338;
  int v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unsigned int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  int v359;
  int v360;
  uint64_t v361;
  uint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  int64x2_t v365;
  uint64_t v366;
  WTF *v367;
  uint64_t v368;
  _QWORD v369[4];
  uint64_t *v370;
  uint64_t *v371;
  uint64_t **v372;
  WTF **v373;
  uint64_t v374;
  uint64_t v375;
  WTF *v376;
  uint64_t v377;
  __int128 v378;
  uint64_t *v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int64x2_t v388;

  v9 = 0;
  LODWORD(v10) = 0;
  v11 = *(_QWORD **)a2;
  *(_QWORD *)a2 = 0;
  v363 = v11;
  v386 = 0;
  v387 = a3;
  v385 = 0;
  v12 = a1[65];
  if (!v12)
    goto LABEL_2;
  v10 = *(unsigned int *)(v12 - 4);
  v13 = (_QWORD *)(v12 + 48 * v10);
  if (!*(_DWORD *)(v12 - 12))
  {
    v9 = (_QWORD *)(v12 + 48 * v10);
LABEL_2:
    v13 = (_QWORD *)(v12 + 48 * v10);
    goto LABEL_3;
  }
  v9 = (_QWORD *)a1[65];
  if ((_DWORD)v10)
  {
    v80 = 48 * v10;
    v9 = (_QWORD *)a1[65];
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      v9 += 6;
      v80 -= 48;
      if (!v80)
      {
        v9 = v13;
        break;
      }
    }
  }
LABEL_3:
  if (v12)
    v14 = (_QWORD *)(v12 + 48 * *(unsigned int *)(v12 - 4));
  else
    v14 = 0;
  if (v14 != v9)
  {
    while (1)
    {
      if (!v11)
        goto LABEL_7;
      v31 = *((_DWORD *)v11 - 2);
      v32 = ~(*v9 << 32) + *v9;
      v33 = (v32 ^ (v32 >> 22)) + ~((v32 ^ (v32 >> 22)) << 13);
      v34 = (9 * (v33 ^ (v33 >> 8))) ^ ((9 * (v33 ^ (v33 >> 8))) >> 15);
      v35 = v31 & (((v34 + ~(v34 << 27)) >> 31) ^ (v34 + ~((_DWORD)v34 << 27)));
      v36 = v11[6 * v35];
      if (v36 != *v9)
        break;
LABEL_13:
      v20 = v9 + 6;
      v9 = v13;
      if (v20 != v13)
      {
        v9 = v20;
        while ((unint64_t)(*v9 + 1) <= 1)
        {
          v9 += 6;
          if (v9 == v13)
          {
            v9 = v13;
            break;
          }
        }
      }
      if (v9 == v14)
        goto LABEL_42;
    }
    v37 = 1;
    while (v36)
    {
      v35 = (v35 + v37) & v31;
      v36 = v11[6 * v35];
      ++v37;
      if (v36 == *v9)
        goto LABEL_13;
    }
LABEL_7:
    v15 = v9[3];
    if (v15)
    {
      v17 = *(unsigned int *)(v15 - 4);
      v18 = (uint64_t *)(v15 + 16 * v17);
      if (*(_DWORD *)(v15 - 12))
      {
        v16 = (uint64_t *)v9[3];
        if ((_DWORD)v17)
        {
          v30 = 16 * v17;
          v16 = (uint64_t *)v9[3];
          while (!*(_DWORD *)v16)
          {
            v16 += 2;
            v30 -= 16;
            if (!v30)
            {
              v16 = v18;
              goto LABEL_10;
            }
          }
        }
        goto LABEL_10;
      }
      v16 = (uint64_t *)(v15 + 16 * v17);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v18 = (uint64_t *)(v15 + 16 * v17);
LABEL_10:
    if (v15)
      v19 = (uint64_t *)(v15 + 16 * *(unsigned int *)(v15 - 4));
    else
      v19 = 0;
    while (v16 != v19)
    {
      if (v11)
      {
        v21 = v16[1];
        v22 = *((_DWORD *)v11 - 2);
        v23 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v22 & ((v25 >> 31) ^ v25);
        v27 = &v11[6 * v26];
        v28 = *v27;
        if (*v27 != v21)
        {
          v90 = 1;
          while (v28)
          {
            v26 = (v26 + v90) & v22;
            v27 = &v11[6 * v26];
            v28 = *v27;
            ++v90;
            if (*v27 == v21)
              goto LABEL_22;
          }
          v27 = &v11[6 * *((unsigned int *)v11 - 1)];
        }
LABEL_22:
        if (v27 != &v11[6 * *((unsigned int *)v11 - 1)])
        {
          v271 = *v16;
          *(_QWORD *)&v378 = *v9;
          *((_QWORD *)&v378 + 1) = v271;
          v379 = (uint64_t *)v16[1];
          if (HIDWORD(v386) == (_DWORD)v386)
          {
            WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>>((uint64_t)&v385, (unint64_t)&v378);
          }
          else
          {
            v304 = HIDWORD(v386) + 1;
            v305 = v385 + 24 * HIDWORD(v386);
            v306 = v379;
            *(_OWORD *)v305 = v378;
            *(_QWORD *)(v305 + 16) = v306;
            HIDWORD(v386) = v304;
          }
        }
      }
      v29 = v16 + 2;
      v16 = v18;
      if (v29 != v18)
      {
        v16 = v29;
        while (!*(_DWORD *)v16)
        {
          v16 += 2;
          if (v16 == v18)
          {
            v16 = v18;
            break;
          }
        }
      }
    }
    goto LABEL_13;
  }
LABEL_42:
  v38 = 0;
  LODWORD(v39) = 0;
  v383 = 0;
  v384 = 0;
  v382 = 0;
  if (!v11)
    goto LABEL_43;
  v39 = *((unsigned int *)v11 - 1);
  v40 = &v11[6 * v39];
  if (!*((_DWORD *)v11 - 3))
  {
    v38 = &v11[6 * v39];
LABEL_43:
    v40 = &v11[6 * v39];
    goto LABEL_44;
  }
  v38 = v11;
  if ((_DWORD)v39)
  {
    v81 = 48 * v39;
    v38 = v11;
    while ((unint64_t)(*v38 + 1) <= 1)
    {
      v38 += 6;
      v81 -= 48;
      if (!v81)
      {
        v38 = v40;
        break;
      }
    }
  }
LABEL_44:
  if (v11)
    v41 = (uint64_t)&v11[6 * *((unsigned int *)v11 - 1)];
  else
    v41 = 0;
  if ((uint64_t *)v41 != v38)
  {
    do
    {
      v370 = 0;
      WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>((uint64_t)&v378, &v384, v38, (uint64_t *)&v370, a5, a6, a7, a8);
      v322 = v378;
      if (v370)
        WTF::fastFree((unint64_t)(v370 - 2), v315, v316, v317, v318, v319, v320, v321);
      v370 = 0;
      WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>((uint64_t)&v378, &v382, v38, (uint64_t *)&v370, v318, v319, v320, v321);
      v330 = v378;
      if (v370)
        WTF::fastFree((unint64_t)(v370 - 2), v323, v324, v325, v326, v327, v328, v329);
      v370 = 0;
      WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>((uint64_t)&v378, &v383, v38, (uint64_t *)&v370, v326, v327, v328, v329);
      if (v370)
        WTF::fastFree((unint64_t)(v370 - 2), (void *)a2, a3, a4, a5, a6, a7, a8);
      v331 = v38[3];
      if (v331)
      {
        v333 = *(unsigned int *)(v331 - 4);
        v334 = v331 + 16 * v333;
        if (*(_DWORD *)(v331 - 12))
        {
          v332 = v38[3];
          if ((_DWORD)v333)
          {
            v356 = 16 * v333;
            v332 = v38[3];
            while (!*(_DWORD *)v332)
            {
              v332 += 16;
              v356 -= 16;
              if (!v356)
              {
                v332 = v334;
                goto LABEL_407;
              }
            }
          }
          goto LABEL_407;
        }
        v332 = v331 + 16 * v333;
      }
      else
      {
        v332 = 0;
        v333 = 0;
      }
      v334 = v331 + 16 * v333;
LABEL_407:
      if (v331)
        v335 = v331 + 16 * *(unsigned int *)(v331 - 4);
      else
        v335 = 0;
      if (v335 != v332)
      {
        if (v11)
        {
          v337 = (uint64_t *)(v322 + 8);
          do
          {
            v338 = *(_QWORD *)(v332 + 8);
            v339 = *((_DWORD *)v11 - 2);
            v340 = (~(v338 << 32) + v338) ^ ((unint64_t)(~(v338 << 32) + v338) >> 22);
            v341 = 9 * ((v340 + ~(v340 << 13)) ^ ((v340 + ~(v340 << 13)) >> 8));
            v342 = (v341 ^ (v341 >> 15)) + ~((v341 ^ (v341 >> 15)) << 27);
            v343 = v339 & ((v342 >> 31) ^ v342);
            v344 = v11[6 * v343];
            if (v344 == v338)
            {
LABEL_420:
              if (v338 != *v38)
              {
                WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(v337, (uint64_t *)(v332 + 8), a3, a4, a5, a6, a7, a8);
                v370 = 0;
                WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>((uint64_t)&v378, &v383, (uint64_t *)(v332 + 8), (uint64_t *)&v370, v345, v346, v347, v348);
                WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid((uint64_t *)(v378 + 8), v38, v349, v350, v351, v352, v353, v354);
                if (v370)
                  WTF::fastFree((unint64_t)(v370 - 2), (void *)a2, a3, a4, a5, a6, a7, a8);
                if (*(_DWORD *)v332 > 0x13u || ((1 << *(_DWORD *)v332) & 0x808C0) == 0)
                  WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid((uint64_t *)(v330 + 8), (uint64_t *)(v332 + 8), a3, a4, a5, a6, a7, a8);
              }
            }
            else
            {
              v358 = 1;
              while (v344)
              {
                v343 = (v343 + v358) & v339;
                v344 = v11[6 * v343];
                ++v358;
                if (v344 == v338)
                  goto LABEL_420;
              }
            }
            v355 = v332 + 16;
            v332 = v334;
            if (v355 != v334)
            {
              v332 = v355;
              while (!*(_DWORD *)v332)
              {
                v332 += 16;
                if (v332 == v334)
                {
                  v332 = v334;
                  break;
                }
              }
            }
          }
          while (v332 != v335);
        }
        else
        {
          do
          {
            v357 = v332 + 16;
            v332 = v334;
            if (v357 != v334)
            {
              v332 = v357;
              while (!*(_DWORD *)v332)
              {
                v332 += 16;
                if (v332 == v334)
                {
                  v332 = v334;
                  break;
                }
              }
            }
          }
          while (v332 != v335);
        }
      }
      v336 = v38 + 6;
      v38 = v40;
      if (v336 != v40)
      {
        v38 = v336;
        while ((unint64_t)(*v38 + 1) <= 1)
        {
          v38 += 6;
          if (v38 == v40)
          {
            v38 = v40;
            break;
          }
        }
      }
    }
    while (v38 != (uint64_t *)v41);
  }
  v381 = 0;
  *(_QWORD *)&v378 = &v381;
  *((_QWORD *)&v378 + 1) = &v384;
  v379 = &v383;
  v380 = &v382;
  if (v11)
  {
    v42 = *((unsigned int *)v11 - 3);
    v376 = 0;
    LODWORD(v377) = 0;
    HIDWORD(v377) = v42;
    if ((_DWORD)v42)
    {
      if (v42 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x1984E9D40);
      }
      v82 = 40 * v42;
      v83 = WTF::fastMalloc((WTF *)(40 * v42));
      LODWORD(v377) = (v82 & 0xFFFFFFF8) / 0x28;
      v376 = (WTF *)v83;
      LODWORD(v42) = HIDWORD(v377);
      if (HIDWORD(v377))
      {
        v84 = v83 + 40 * HIDWORD(v377);
        do
        {
          *(_QWORD *)v83 = 0;
          *(_DWORD *)(v83 + 8) = 0;
          *(_QWORD *)(v83 + 24) = 0;
          *(_QWORD *)(v83 + 32) = 0;
          *(_QWORD *)(v83 + 16) = 0;
          v83 += 40;
        }
        while (v83 != v84);
      }
    }
  }
  else
  {
    LODWORD(v42) = 0;
    v376 = 0;
    v377 = 0;
  }
  v43 = 0;
  v42 = v42;
  v374 = v42;
  v375 = 0;
  v370 = &v375;
  v371 = &v374;
  v372 = (uint64_t **)&v378;
  v373 = &v376;
  v369[0] = &v378;
  v369[1] = &v375;
  v369[2] = &v374;
  v369[3] = &v376;
  v367 = 0;
  v368 = 0;
  if (v11)
  {
    v41 = -1;
    do
    {
      if (!*((_DWORD *)v11 - 3))
        break;
      v160 = v381;
      if (v381)
      {
        v381 = 0;
        WTF::fastFree(v160 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
        if (!*((_DWORD *)v11 - 3))
          continue;
      }
      v161 = *((unsigned int *)v11 - 1);
      v162 = v11;
      if ((_DWORD)v161)
      {
        v163 = 48 * v161;
        v162 = v11;
        while ((unint64_t)(*v162 + 1) <= 1)
        {
          v162 += 6;
          v163 -= 48;
          if (!v163)
            goto LABEL_207;
        }
      }
      v194 = &v11[6 * v161];
      if (v194 != v162)
      {
        a2 = *v162;
LABEL_273:
        v195 = *(_DWORD *)(v382 - 8);
        v196 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        v197 = 9 * ((v196 + ~(v196 << 13)) ^ ((v196 + ~(v196 << 13)) >> 8));
        v198 = (v197 ^ (v197 >> 15)) + ~((v197 ^ (v197 >> 15)) << 27);
        v199 = (v198 >> 31) ^ v198;
        v200 = v195 & v199;
        v201 = *(_QWORD *)(v382 + 16 * v200);
        if (v201 != a2)
        {
          v214 = 1;
          while (v201)
          {
            v200 = ((_DWORD)v200 + v214) & v195;
            v201 = *(_QWORD *)(v382 + 16 * v200);
            ++v214;
            if (v201 == a2)
              goto LABEL_274;
          }
          v200 = *(unsigned int *)(v382 - 4);
        }
LABEL_274:
        v202 = *(_QWORD *)(v382 + 16 * v200 + 8);
        if (v202 && *(_DWORD *)(v202 - 12))
          goto LABEL_282;
        v203 = *(_DWORD *)(v384 - 8);
        v204 = v203 & v199;
        v205 = *(_QWORD *)(v384 + 16 * v204);
        if (v205 != a2)
        {
          v259 = 1;
          while (v205)
          {
            v204 = ((_DWORD)v204 + v259) & v203;
            v205 = *(_QWORD *)(v384 + 16 * v204);
            ++v259;
            if (v205 == a2)
              goto LABEL_277;
          }
          v204 = *(unsigned int *)(v384 - 4);
        }
LABEL_277:
        v206 = *(_QWORD *)(v384 + 16 * v204 + 8);
        if (v206 && *(_DWORD *)(v206 - 12))
        {
          v270 = *(_QWORD *)(WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::find(v383, a2)+ 8);
          if (!v270 || !*(_DWORD *)(v270 - 12))
        }
        else
        {
          v207 = v370;
          if (*v370 >= (unint64_t)*v371)
          {
            __break(0xC471u);
            JUMPOUT(0x1984E9CACLL);
          }
          if (*v207 >= (unint64_t)*((unsigned int *)v373 + 3))
          {
            __break(0xC471u);
            JUMPOUT(0x1984E9D14);
          }
          ++*v370;
        }
LABEL_282:
        while (1)
        {
          v162 += 6;
          if (v162 == v194)
            break;
          a2 = *v162;
          if ((unint64_t)(*v162 + 1) > 1)
          {
            if (v162 != v194)
              goto LABEL_273;
            break;
          }
        }
      }
LABEL_207:
      v164 = v381;
      if (!v381 || !*(_DWORD *)(v381 - 12))
      {
        v234 = v363;
        v236 = v235;
        v238 = v237;
        if (v234)
          v239 = &v234[6 * *((unsigned int *)v234 - 1)];
        else
          v239 = 0;
        if (v239 == v235)
          goto LABEL_330;
        v240 = 0;
        v241 = 0;
        do
        {
          v242 = *v236;
          v249 = *(_QWORD *)(WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::find(v382, *v236)+ 8);
          if (!v249 || !*(_DWORD *)(v249 - 12))
          {
            WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::get(v388.i64, v384, v242, v244, v245, v246, v247, v248);
            if (v388.i64[0])
              v255 = *(_DWORD *)(v388.i64[0] - 12);
            else
              v255 = 0;
            WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::get(v365.i64, v383, *v236, v250, v251, v252, v253, v254);
            if (v365.i64[0])
            {
              v257 = *(unsigned int *)(v365.i64[0] - 12) * (unint64_t)v255;
              WTF::fastFree(v365.i64[0] - 16, v256, v243, v244, v245, v246, v247, v248);
            }
            else
            {
              v257 = 0;
            }
            if (v388.i64[0])
              WTF::fastFree(v388.i64[0] - 16, v256, v243, v244, v245, v246, v247, v248);
            if (v257 > v240)
            {
              v241 = (void **)(v236 + 1);
              v240 = v257;
            }
          }
          while (1)
          {
            v236 += 6;
            if (v236 == v238)
              break;
            if ((unint64_t)(*v236 + 1) > 1)
              goto LABEL_304;
          }
          v236 = v238;
LABEL_304:
          ;
        }
        while (v236 != v239);
        if (!v240)
        {
LABEL_330:
          __break(0xC471u);
          JUMPOUT(0x1984E9900);
        }
        v164 = v381;
        if (!v381 || !*(_DWORD *)(v381 - 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1984E986CLL);
        }
      }
      v165 = *(unsigned int *)(v164 - 4);
      v166 = (uint64_t *)v164;
      if ((_DWORD)v165)
      {
        v167 = 8 * v165;
        v166 = (uint64_t *)v164;
        while ((unint64_t)(*v166 + 1) <= 1)
        {
          ++v166;
          v167 -= 8;
          if (!v167)
            goto LABEL_213;
        }
      }
      v178 = (uint64_t *)(v164 + 8 * v165);
      if (v166 != v178)
      {
        v179 = *v166;
LABEL_252:
        v180 = v363;
        if (!v363)
          goto LABEL_266;
        v181 = *((_DWORD *)v363 - 2);
        v182 = (~(v179 << 32) + v179) ^ ((unint64_t)(~(v179 << 32) + v179) >> 22);
        v183 = 9 * ((v182 + ~(v182 << 13)) ^ ((v182 + ~(v182 << 13)) >> 8));
        v184 = (v183 ^ (v183 >> 15)) + ~((v183 ^ (v183 >> 15)) << 27);
        v185 = v181 & ((v184 >> 31) ^ v184);
        v186 = &v363[6 * v185];
        v187 = *v186;
        if (*v186 != v179)
        {
          v258 = 1;
          while (v187)
          {
            v185 = (v185 + v258) & v181;
            v186 = &v363[6 * v185];
            v187 = *v186;
            ++v258;
            if (*v186 == v179)
              goto LABEL_254;
          }
          v186 = &v363[6 * *((unsigned int *)v363 - 1)];
        }
LABEL_254:
        if (&v363[6 * *((unsigned int *)v363 - 1)] != v186)
        {
          *v186 = -1;
          v188 = v186[5];
          if ((v188 & 1) != 0)
            WTF::fastFree(v188 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
          v189 = v186[4];
          if ((v189 & 1) != 0)
            WTF::fastFree(v189 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, a3, a4, a5, a6, a7, a8);
          v190 = v186[3];
          if (v190)
            WTF::fastFree(v190 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
          v191 = *((_DWORD *)v180 - 3) - 1;
          ++*((_DWORD *)v180 - 4);
          *((_DWORD *)v180 - 3) = v191;
          v192 = *((_DWORD *)v180 - 1);
          if (6 * v191 < v192 && v192 >= 9)
        }
LABEL_266:
        while (++v166 != v178)
        {
          v179 = *v166;
          if ((unint64_t)(*v166 + 1) > 1)
          {
            if (v166 != v178)
              goto LABEL_252;
            break;
          }
        }
      }
LABEL_213:
      v11 = v363;
    }
    while (v363);
    v42 = v374;
    v43 = v375;
  }
  if (v43 != v42)
  {
    __break(0xC471u);
    JUMPOUT(0x1984E9514);
  }
  v44 = v381;
  if (v381)
  {
    v381 = 0;
    WTF::fastFree(v44 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
  v366 = 0;
  if (HIDWORD(v377))
  {
    v91 = v376;
    v92 = 40 * HIDWORD(v377);
    do
    {
      v93 = *(_QWORD *)v91;
      v91 = (WTF *)((char *)v91 + 40);
      v388.i64[0] = v93;
      WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(&v366, v388.i64, a3, a4, a5, a6, a7, a8);
      v92 -= 40;
    }
    while (v92);
    if (HIDWORD(v377))
    {
      v94 = (uint64_t *)v376;
      v95 = (uint64_t *)((char *)v376 + 40 * HIDWORD(v377));
      while (1)
      {
        v96 = v94[2];
        if (!v96)
          break;
        v98 = *(unsigned int *)(v96 - 4);
        v99 = (uint64_t *)(v96 + 16 * v98);
        if (!*(_DWORD *)(v96 - 12))
        {
          v97 = (uint64_t *)(v96 + 16 * v98);
          goto LABEL_144;
        }
        v97 = (uint64_t *)v94[2];
        if ((_DWORD)v98)
        {
          v119 = 16 * v98;
          v97 = (uint64_t *)v94[2];
          while (!*(_DWORD *)v97)
          {
            v97 += 2;
            v119 -= 16;
            if (!v119)
            {
              v97 = v99;
              break;
            }
          }
        }
LABEL_145:
        if (v96)
          v100 = (uint64_t *)(v96 + 16 * *(unsigned int *)(v96 - 4));
        else
          v100 = 0;
        if (v100 != v97)
        {
          v102 = v366;
          if (!v366)
          {
            do
            {
              v120 = v97 + 2;
              v97 = v99;
              if (v120 != v99)
              {
                v97 = v120;
                while (!*(_DWORD *)v97)
                {
                  v97 += 2;
                  if (v97 == v99)
                  {
                    v97 = v99;
                    break;
                  }
                }
              }
            }
            while (v97 != v100);
            goto LABEL_148;
          }
          while (2)
          {
            if (v102)
            {
              v103 = *(_DWORD *)(v102 - 8);
              v104 = v97[1];
              v105 = (~(v104 << 32) + v104) ^ ((unint64_t)(~(v104 << 32) + v104) >> 22);
              v106 = 9 * ((v105 + ~(v105 << 13)) ^ ((v105 + ~(v105 << 13)) >> 8));
              v107 = (v106 ^ (v106 >> 15)) + ~((v106 ^ (v106 >> 15)) << 27);
              v108 = (v107 >> 31) ^ v107;
              v109 = v103 & v108;
              v110 = *(_QWORD *)(v102 + 8 * (v103 & v108));
              if (v110 != v104)
              {
                v111 = 1;
                while (v110)
                {
                  v109 = (v109 + v111) & v103;
                  v110 = *(_QWORD *)(v102 + 8 * v109);
                  ++v111;
                  if (v110 == v104)
                    goto LABEL_156;
                }
                goto LABEL_164;
              }
LABEL_156:
              if (v381)
              {
                v112 = *(_DWORD *)(v381 - 8);
                v113 = v112 & v108;
                v114 = *(_QWORD *)(v381 + 8 * v113);
                if (v114 != v104)
                {
                  v115 = 1;
                  while (v114)
                  {
                    v113 = (v113 + v115) & v112;
                    v114 = *(_QWORD *)(v381 + 8 * v113);
                    ++v115;
                    if (v114 == v104)
                      goto LABEL_164;
                  }
                  goto LABEL_162;
                }
              }
              else
              {
LABEL_162:
                v116 = *v97;
                v388.i64[0] = *v94;
                v388.i64[1] = v116;
                v117 = HIDWORD(v368);
                if (HIDWORD(v368) == (_DWORD)v368)
                {
                  WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedHeapLocation>((uint64_t)&v367, (unint64_t)&v388);
                }
                else
                {
                  *((int64x2_t *)v367 + HIDWORD(v368)) = v388;
                  HIDWORD(v368) = v117 + 1;
                }
              }
            }
LABEL_164:
            v118 = v97 + 2;
            v97 = v99;
            if (v118 != v99)
            {
              v97 = v118;
              while (!*(_DWORD *)v97)
              {
                v97 += 2;
                if (v97 == v99)
                {
                  v97 = v99;
                  break;
                }
              }
            }
            if (v97 == v100)
              break;
            v102 = v366;
            continue;
          }
        }
LABEL_148:
        v101 = *v94;
        v94 += 5;
        v388.i64[0] = v101;
        WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(&v381, v388.i64, a3, a4, a5, a6, a7, a8);
        if (v94 == v95)
          goto LABEL_54;
      }
      v97 = 0;
      v98 = 0;
LABEL_144:
      v99 = (uint64_t *)(v96 + 16 * v98);
      goto LABEL_145;
    }
  }
LABEL_54:
  v365 = 0uLL;
  WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1 + 55, &v387, (uint64_t)&v365, a4, a5, a6, a7, a8, (uint64_t)&v388);
  v52 = v388.i64[0];
  v53 = v365.i64[0];
  if (v365.i64[0])
  {
    v365.i64[0] = 0;
    v365.i32[2] = 0;
    WTF::fastFree(v53, v45, v46, v47, v48, v49, v50, v51);
  }
  if (HIDWORD(v377))
  {
    v121 = (unint64_t *)((char *)v376 + 32);
    v122 = 40 * HIDWORD(v377);
    while (2)
    {
      v364 = 0;
      v123 = *((_DWORD *)v121 - 6);
      v124 = v387;
      switch(v123)
      {
        case 1:
          v215 = a1[4];
          v216 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          v216[1] = 0;
          v216[2] = 0;
          *v216 = 0;
          v216[2] = *(_QWORD *)(v215 + 568);
          *(_QWORD *)(v215 + 568) = v216;
          v217 = a1[4];
          v218 = (const JSC::CodeOrigin *)*(v121 - 4);
          v219 = *((_QWORD *)v218 + 8);
          JSC::CodeOrigin::CodeOrigin(v365.i64, v218);
          JSC::DFG::NodeOrigin::withSemantic(v124, &v365, v220, v221, v222, v223, v224, v225, &v388);
          v226 = JSC::DFG::Graph::addStructureSet(a1[4], v121);
          v147 = JSC::DFG::Graph::addNode<JSC::DFG::Node::VarArgTag,JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,int,int>(v217, v219, 0x119u, (uint64_t)&v388, (uint64_t)v226, (uint64_t)v216);
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v388, v227, v228, v229, v230, v231, v232, v233);
          v148 = v365.i64[0];
          if ((v365.i8[0] & 1) == 0)
            goto LABEL_192;
          v125 = v41;
          goto LABEL_292;
        case 2:
          v125 = v41;
          v126 = a1[4];
          v133 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          v133[1] = 0;
          v133[2] = 0;
          *v133 = 0;
          v133[2] = *(_QWORD *)(v126 + 568);
          *(_QWORD *)(v126 + 568) = v133;
          v134 = (uint64_t *)*(v121 - 4);
          v135 = a1[4];
          v137 = v134[8];
          v136 = v134[9];
          v138 = *v134;
          if ((v138 & 1) != 0)
          {
            v361 = *(_QWORD *)(v138 & 0xFFFFFFFF8);
            if ((v138 & 2) != 0
              || ((v307 = *(unsigned int *)((v138 & 0xFFFFFFFF8) + 8), v359 = v307, (_DWORD)v307 != 0x3FFFFFFF)
                ? (v308 = (_DWORD)v307 == -1)
                : (v308 = 1),
                  v308))
            {
              v309 = 2;
            }
            else if (v307 >> 28)
            {
              v313 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v313 = v361;
              *(_DWORD *)(v313 + 8) = v359;
              v309 = 1;
              v361 = v313;
            }
            else
            {
              v309 = *(_QWORD *)(v138 & 0xFFFFFFFF8);
              v361 = v307 << 36;
            }
            v138 = v361 | v309;
          }
          v365.i64[0] = v138;
          JSC::DFG::NodeOrigin::withSemantic(v124, &v365, v127, v128, v129, v130, v131, v132, &v388);
          v139 = JSC::DFG::Graph::addNode<JSC::DFG::Node::VarArgTag,JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,int,int>(v135, v137, 0x121u, (uint64_t)&v388, v136, (uint64_t)v133);
          goto LABEL_189;
        case 3:
        case 4:
        case 5:
        case 6:
          v125 = v41;
          v150 = (uint64_t *)*(v121 - 4);
          v151 = v123 - 4;
          if (v151 >= 3)
            v152 = 359;
          else
            v152 = 0x169016A0168uLL >> (16 * v151);
          v153 = a1[4];
          v155 = v150[8];
          v154 = v150[9];
          v156 = *v150;
          if ((*v150 & 1) != 0)
          {
            v362 = *(_QWORD *)(v156 & 0xFFFFFFFF8);
            if ((v156 & 2) != 0
              || ((v310 = *(unsigned int *)((v156 & 0xFFFFFFFF8) + 8), v360 = v310, (_DWORD)v310 != 0x3FFFFFFF)
                ? (v311 = (_DWORD)v310 == -1)
                : (v311 = 1),
                  v311))
            {
              v312 = 2;
            }
            else if (v310 >> 28)
            {
              v314 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v314 = v362;
              *(_DWORD *)(v314 + 8) = v360;
              v312 = 1;
              v362 = v314;
            }
            else
            {
              v312 = *(_QWORD *)(v156 & 0xFFFFFFFF8);
              v362 = v310 << 36;
            }
            v156 = v362 | v312;
          }
          v365.i64[0] = v156;
          JSC::DFG::NodeOrigin::withSemantic(v124, &v365, v46, v47, v48, v49, v50, v51, &v388);
          v139 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v153, v155, v152, (uint64_t)&v388, v154, v157, v158, v159);
LABEL_189:
          v147 = v139;
          if ((v388.i8[8] & 1) != 0 && (v388.i64[1] & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v388.i64[1] & 0xFFFFFFFF8, v140, v141, v142, v143, v144, v145, v146);
          v41 = v125;
          if ((v388.i8[0] & 1) != 0 && (v388.i64[0] & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v388.i64[0] & 0xFFFFFFFF8, v140, v141, v142, v143, v144, v145, v146);
          v148 = v365.i64[0];
          if ((v365.i8[0] & 1) == 0)
            goto LABEL_192;
          goto LABEL_292;
        case 7:
          v125 = v41;
          v272 = a1[4];
          v273 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          v273[1] = 0;
          v273[2] = 0;
          *v273 = 0;
          v273[2] = *(_QWORD *)(v272 + 568);
          *(_QWORD *)(v272 + 568) = v273;
          v274 = a1[4];
          v275 = (const JSC::CodeOrigin *)*(v121 - 4);
          v276 = *((_QWORD *)v275 + 8);
          JSC::CodeOrigin::CodeOrigin(v365.i64, v275);
          JSC::DFG::NodeOrigin::withSemantic(v124, &v365, v277, v278, v279, v280, v281, v282, &v388);
          v283 = JSC::DFG::Graph::addNode<JSC::DFG::Node::VarArgTag,JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,int,int>(v274, v276, 0x11Fu, (uint64_t)&v388, *(_QWORD *)(*(v121 - 4) + 72), (uint64_t)v273);
          goto LABEL_352;
        case 8:
          v125 = v41;
          v291 = (const JSC::CodeOrigin *)*(v121 - 4);
          v292 = a1[4];
          v294 = *((_QWORD *)v291 + 8);
          v293 = *((_QWORD *)v291 + 9);
          JSC::CodeOrigin::CodeOrigin(v365.i64, v291);
          JSC::DFG::NodeOrigin::withSemantic(v124, &v365, v295, v296, v297, v298, v299, v300, &v388);
          v283 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>(v292, v294, 270, (uint64_t)&v388, v293, v301, v302, v303);
LABEL_352:
          v147 = v283;
          JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v388, v284, v285, v286, v287, v288, v289, v290);
          v148 = v365.i64[0];
          if ((v365.i8[0] & 1) != 0)
          {
LABEL_292:
            if ((v148 & 0xFFFFFFFF8) != 0)
              WTF::fastFree(v148 & 0xFFFFFFFF8, v140, v141, v142, v143, v144, v145, v146);
          }
          v41 = v125;
LABEL_192:
          v364 = v147;
          v149 = *(unsigned int *)(v52 + 20);
          if ((_DWORD)v149 == *(_DWORD *)(v52 + 16))
          {
            WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *>(v52 + 8, (unint64_t)&v364);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v52 + 8) + 8 * v149) = v147;
            *(_DWORD *)(v52 + 20) = v149 + 1;
          }
          v365.i64[0] = *(v121 - 4);
          WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *>(&v388, a1 + 54, &v364, &v365, v143, v144, v145, v146);
          v121 += 5;
          v122 -= 40;
          if (v122)
            continue;
          goto LABEL_57;
        default:
          JSC::DFG::Graph::logAssertionFailure((JSC::DFG::Graph *)a1[4], (JSC::DFG::Node *)*(v121 - 4), (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x6D6, "Node *JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::createMaterialization(const Allocation &, Node *)", "Bad allocation kind");
          __break(0xC471u);
          JUMPOUT(0x1984E9A98);
      }
    }
  }
LABEL_57:
  v54 = HIDWORD(v368);
  if (HIDWORD(v368))
  {
    v365 = 0uLL;
    WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v388, a1 + 56, &v387, &v365, v48, v49, v50, v51);
    WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(v388.i64[0] + 8, (__int128 *)v367, v54);
    if (v365.i64[0])
      WTF::fastFree(v365.u64[0], v45, v46, v47, v48, v49, v50, v51);
  }
  v55 = a1 + 57;
  v56 = a1[57];
  if (v56
    || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1 + 57, 8uLL, 0, v47, v48, v49, v50, v51), (v56 = *v55) != 0))
  {
    v57 = *(_DWORD *)(v56 - 8);
  }
  else
  {
    v57 = 0;
  }
  v58 = v387;
  v59 = (~(v58 << 32) + v58) ^ ((unint64_t)(~(v58 << 32) + v58) >> 22);
  v60 = 9 * ((v59 + ~(v59 << 13)) ^ ((v59 + ~(v59 << 13)) >> 8));
  v61 = (v60 ^ (v60 >> 15)) + ~((v60 ^ (v60 >> 15)) << 27);
  v62 = v57 & ((v61 >> 31) ^ v61);
  v63 = (uint64_t *)(v56 + 24 * v62);
  v64 = *v63;
  if (!*v63)
  {
LABEL_68:
    *v63 = v58;
    v67 = v63[1];
    if (v67)
    {
      v63[1] = 0;
      *((_DWORD *)v63 + 4) = 0;
      WTF::fastFree(v67, v45, v46, v47, v48, v49, v50, v51);
    }
    v63[1] = 0;
    v63[2] = 0;
    v68 = *v55;
    if (*v55)
      v69 = *(_DWORD *)(v68 - 12) + 1;
    else
      v69 = 1;
    *(_DWORD *)(v68 - 12) = v69;
    v70 = *v55;
    if (*v55)
      v71 = *(_DWORD *)(v70 - 12);
    else
      v71 = 0;
    v72 = (*(_DWORD *)(v70 - 16) + v71);
    v73 = *(unsigned int *)(v70 - 4);
    if (v73 > 0x400)
    {
      if (v73 > 2 * v72)
        goto LABEL_76;
    }
    else
    {
      if (3 * v73 > 4 * v72)
        goto LABEL_76;
      if (!(_DWORD)v73)
      {
        v89 = 8;
        goto LABEL_135;
      }
    }
    v89 = ((_DWORD)v73 << (6 * *(_DWORD *)(v70 - 12) >= (2 * v73)));
LABEL_135:
    v63 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v55, v89, (uint64_t)v63, v47, v48, v49, v50, v51);
    goto LABEL_76;
  }
  v65 = 0;
  v66 = 1;
  while (v64 != v387)
  {
    if (v64 == -1)
      v65 = v63;
    v62 = (v62 + v66) & v57;
    v63 = (uint64_t *)(v56 + 24 * v62);
    v64 = *v63;
    ++v66;
    if (!*v63)
    {
      if (v65)
      {
        *v65 = 0;
        v65[1] = 0;
        v65[2] = 0;
        --*(_DWORD *)(*v55 - 16);
        v63 = v65;
      }
      goto LABEL_68;
    }
  }
LABEL_76:
  v74 = HIDWORD(v386);
  if (HIDWORD(v386))
  {
    v260 = v385;
    v262 = *((unsigned int *)v63 + 4);
    v261 = *((unsigned int *)v63 + 5);
    v263 = v261 + HIDWORD(v386);
    if (v263 > v262)
    {
      v264 = v262 + (v262 >> 2);
      v265 = v264 >= 0x10 ? v264 + 1 : 16;
      v266 = v265 <= v263 ? v263 : v265;
      WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)(v63 + 1), v266);
      v261 = *((unsigned int *)v63 + 5);
      if (v263 < v261)
      {
        __break(0xC471u);
        JUMPOUT(0x1984E9D5CLL);
      }
    }
    v267 = v63[1] + 24 * v261;
    v268 = 24 * v74;
    do
    {
      v269 = *(_OWORD *)v260;
      *(_QWORD *)(v267 + 16) = *(_QWORD *)(v260 + 16);
      *(_OWORD *)v267 = v269;
      v267 += 24;
      v260 += 24;
      v268 -= 24;
    }
    while (v268);
    *((_DWORD *)v63 + 5) = v263;
  }
  if (v366)
    WTF::fastFree(v366 - 16, v45, v46, v47, v48, v49, v50, v51);
  if (v367)
    WTF::fastFree((unint64_t)v367, v45, v46, v47, v48, v49, v50, v51);
  v75 = v376;
  if (HIDWORD(v377))
  {
    v168 = 40 * HIDWORD(v377);
    v169 = (_QWORD *)((char *)v376 + 32);
    do
    {
      if ((*v169 & 1) != 0)
        WTF::fastFree(*v169 & 0xFFFFFFFFFFFFFFFCLL, v45, v46, v47, v48, v49, v50, v51);
      v170 = *(v169 - 1);
      if ((v170 & 1) != 0)
        WTF::fastFree(v170 & 0xFFFFFFFFFFFFFFFCLL, v45, v46, v47, v48, v49, v50, v51);
      v171 = *(v169 - 2);
      if (v171)
        WTF::fastFree(v171 - 16, v45, v46, v47, v48, v49, v50, v51);
      v169 += 5;
      v168 -= 40;
    }
    while (v168);
    v75 = v376;
  }
  if (v75)
  {
    v376 = 0;
    LODWORD(v377) = 0;
    WTF::fastFree((unint64_t)v75, v45, v46, v47, v48, v49, v50, v51);
  }
  if (v381)
    WTF::fastFree(v381 - 16, v45, v46, v47, v48, v49, v50, v51);
  v76 = v382;
  if (v382)
  {
    v172 = *(unsigned int *)(v382 - 4);
    if ((_DWORD)v172)
    {
      v173 = (_QWORD *)(v382 + 8);
      do
      {
        if (*(v173 - 1) != -1 && *v173)
          WTF::fastFree(*v173 - 16, v45, v46, v47, v48, v49, v50, v51);
        v173 += 2;
        --v172;
      }
      while (v172);
    }
    WTF::fastFree(v76 - 16, v45, v46, v47, v48, v49, v50, v51);
  }
  v77 = v383;
  if (v383)
  {
    v174 = *(unsigned int *)(v383 - 4);
    if ((_DWORD)v174)
    {
      v175 = (_QWORD *)(v383 + 8);
      do
      {
        if (*(v175 - 1) != -1 && *v175)
          WTF::fastFree(*v175 - 16, v45, v46, v47, v48, v49, v50, v51);
        v175 += 2;
        --v174;
      }
      while (v174);
    }
    WTF::fastFree(v77 - 16, v45, v46, v47, v48, v49, v50, v51);
  }
  v78 = v384;
  if (v384)
  {
    v176 = *(unsigned int *)(v384 - 4);
    if ((_DWORD)v176)
    {
      v177 = (_QWORD *)(v384 + 8);
      do
      {
        if (*(v177 - 1) != -1 && *v177)
          WTF::fastFree(*v177 - 16, v45, v46, v47, v48, v49, v50, v51);
        v177 += 2;
        --v176;
      }
      while (v176);
    }
    WTF::fastFree(v78 - 16, v45, v46, v47, v48, v49, v50, v51);
  }
  if (v385)
    WTF::fastFree(v385, v45, v46, v47, v48, v49, v50, v51);
  v79 = v363;
  if (v363)
  {
    v85 = *((unsigned int *)v363 - 1);
    if ((_DWORD)v85)
    {
      v86 = v363 + 5;
      do
      {
        if (*(v86 - 5) != -1)
        {
          if ((*v86 & 1) != 0)
            WTF::fastFree(*v86 & 0xFFFFFFFFFFFFFFFCLL, v45, v46, v47, v48, v49, v50, v51);
          v87 = *(v86 - 1);
          if ((v87 & 1) != 0)
            WTF::fastFree(v87 & 0xFFFFFFFFFFFFFFFCLL, v45, v46, v47, v48, v49, v50, v51);
          v88 = *(v86 - 2);
          if (v88)
            WTF::fastFree(v88 - 16, v45, v46, v47, v48, v49, v50, v51);
        }
        v86 += 6;
        --v85;
      }
      while (v85);
    }
    WTF::fastFree((unint64_t)(v79 - 2), v45, v46, v47, v48, v49, v50, v51);
  }
}

void WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a2, 8u, 0), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v32 = 0;
    v33 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v34 = 0;
        else
          v34 = *(unsigned int *)(v12 - 4);
        v31 = 0;
        v30 = v12 + 16 * v34;
        goto LABEL_14;
      }
      if (v21 == -1)
        v32 = v20;
      v19 = (v19 + v33) & v14;
      v20 = (uint64_t *)(v12 + 16 * v19);
      v21 = *v20;
      ++v33;
    }
    while (*v20);
    if (v32)
    {
      *v32 = 0;
      v32[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v32;
    }
  }
  *v20 = v15;
  v22 = *a4;
  *a4 = 0;
  v23 = v20[1];
  v20[1] = v22;
  if (v23)
    WTF::fastFree(v23 - 16, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_13;
LABEL_28:
    v20 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(a2, v20);
    v26 = *a2;
    if (*a2)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
    goto LABEL_13;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_28;
LABEL_13:
  v30 = v26 + 16 * v29;
  v31 = 1;
LABEL_14:
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v31;
}

uint64_t WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::find(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = *(_QWORD *)(result + 16 * v6);
    if (v7 == a2)
    {
LABEL_3:
      result += 16 * v6;
    }
    else
    {
      v8 = 1;
      while (v7)
      {
        v6 = ((_DWORD)v6 + v8) & v2;
        v7 = *(_QWORD *)(result + 16 * v6);
        ++v8;
        if (v7 == a2)
          goto LABEL_3;
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

uint64_t JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::placeMaterializations(WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits>,JSC::DFG::Node *)::{lambda(JSC::DFG::`anonymous namespace'::Allocation&&)#1}::operator()(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;

  if (**(_QWORD **)a1 >= **(_QWORD **)(a1 + 8)
  {
    __break(0xC471u);
    JUMPOUT(0x1984EA348);
  }
  ++**(_QWORD **)a1;
  return result;
}

uint64_t JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::placeMaterializations(WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits>,JSC::DFG::Node *)::{lambda(JSC::DFG::`anonymous namespace'::Allocation&&)#2}::operator()(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v16 = *(unint64_t **)(a1 + 16);
  if (**(_QWORD **)(a1 + 8) >= *v16
    || (v17 = *v16 - 1, *v16 = v17, v18 = *(_QWORD *)(a1 + 24), v17 >= *(unsigned int *)(v18 + 12)))
  {
    __break(0xC471u);
    JUMPOUT(0x1984EA3D8);
  }
}

uint64_t *WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::get(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a2)
  {
    v8 = *(_DWORD *)(a2 - 8);
    v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = *(_QWORD *)(a2 + 16 * v12);
    if (v13 == a3)
      return WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::HashTable(result, (_QWORD *)(a2 + 16 * v12 + 8), a3, a4, a5, a6, a7, a8);
    v14 = 1;
    while (v13)
    {
      v12 = ((_DWORD)v12 + v14) & v8;
      v13 = *(_QWORD *)(a2 + 16 * v12);
      ++v14;
      if (v13 == a3)
        return WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::HashTable(result, (_QWORD *)(a2 + 16 * v12 + 8), a3, a4, a5, a6, a7, a8);
    }
  }
  *result = 0;
  return result;
}

void WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  unsigned int v36;

  v13 = *a1;
  if (*a1
    || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *a1) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
  v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
  v20 = v15 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
  v21 = (_QWORD *)(v13 + 24 * v20);
  v22 = *v21;
  if (*v21)
  {
    v23 = 0;
    v24 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v36 = 0;
        else
          v36 = *(_DWORD *)(v13 - 4);
        v34 = 0;
        v33 = v13 + 24 * v36;
        goto LABEL_20;
      }
      if (v22 == -1)
        v23 = v21;
      v20 = (v20 + v24) & v15;
      v21 = (_QWORD *)(v13 + 24 * v20);
      v22 = *v21;
      ++v24;
    }
    while (*v21);
    if (v23)
    {
      *v23 = 0;
      v23[1] = 0;
      v23[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      v16 = *a2;
      v21 = v23;
    }
  }
  *v21 = v16;
  v25 = v21[1];
  if (v25)
  {
    v21[1] = 0;
    *((_DWORD *)v21 + 4) = 0;
    WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
  }
  v26 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v21[1] = v26;
  LODWORD(v26) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  *((_DWORD *)v21 + 4) = v26;
  LODWORD(v26) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = 0;
  *((_DWORD *)v21 + 5) = v26;
  v27 = *a1;
  if (*a1)
    v28 = *(_DWORD *)(v27 - 12) + 1;
  else
    v28 = 1;
  *(_DWORD *)(v27 - 12) = v28;
  v29 = *a1;
  if (*a1)
    v30 = *(_DWORD *)(v29 - 12);
  else
    v30 = 0;
  v31 = (*(_DWORD *)(v29 - 16) + v30);
  v32 = *(unsigned int *)(v29 - 4);
  if (v32 > 0x400)
  {
    if (v32 > 2 * v31)
      goto LABEL_19;
    goto LABEL_22;
  }
  if (3 * v32 <= 4 * v31)
  {
    if (!(_DWORD)v32)
    {
      v35 = 8;
LABEL_28:
      v21 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1, v35, (uint64_t)v21, a4, a5, a6, a7, a8);
      v29 = *a1;
      if (*a1)
        LODWORD(v32) = *(_DWORD *)(v29 - 4);
      else
        LODWORD(v32) = 0;
      goto LABEL_19;
    }
LABEL_22:
    v35 = ((_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32)));
    goto LABEL_28;
  }
LABEL_19:
  v33 = v29 + 24 * v32;
  v34 = 1;
LABEL_20:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v33;
  *(_BYTE *)(a9 + 16) = v34;
}

_OWORD *WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *>(_OWORD *result, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;

  v11 = result;
  v12 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a3;
  v16 = ~(*a3 << 32) + *a3;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (_QWORD *)(v12 + 16 * v19);
  v21 = *v20;
  if (*v20)
  {
    v30 = 0;
    v31 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        v29 = 0;
        v28 = v12 + 16 * v32;
        goto LABEL_12;
      }
      if (v21 == -1)
        v30 = v20;
      v19 = (v19 + v31) & v14;
      v20 = (_QWORD *)(v12 + 16 * v19);
      v21 = *v20;
      ++v31;
    }
    while (*v20);
    if (v30)
    {
      *v30 = 0;
      v30[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = *a3;
      v20 = v30;
    }
  }
  *v20 = v15;
  v20[1] = *a4;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_11;
LABEL_23:
    result = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(a2, (uint64_t)v20, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v20 = result;
    v24 = *a2;
    if (*a2)
      v27 = *(unsigned int *)(v24 - 4);
    else
      v27 = 0;
    goto LABEL_11;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_23;
LABEL_11:
  v28 = v24 + 16 * v27;
  v29 = 1;
LABEL_12:
  *(_QWORD *)v11 = v20;
  *((_QWORD *)v11 + 1) = v28;
  *((_BYTE *)v11 + 16) = v29;
  return result;
}

void WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  int v39;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(a2, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *a3;
  v21 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(*a3) & v13;
  v22 = (_QWORD *)(v12 + 24 * v21);
  v23 = *v22;
  if (*v22)
  {
    v38 = 0;
    v39 = 1;
    do
    {
      if (v23 == v14)
      {
        v37 = 0;
        v36 = v12 + 24 * *(unsigned int *)(v12 - 4);
        goto LABEL_12;
      }
      if (v23 == -1)
        v38 = v22;
      v21 = (v21 + v39) & v13;
      v22 = (_QWORD *)(v12 + 24 * v21);
      v23 = *v22;
      ++v39;
    }
    while (*v22);
    if (v38)
    {
      *v38 = 0;
      v38[1] = 0;
      v38[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v22 = v38;
    }
  }
  *v22 = v14;
  WTF::GenericHashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)(v22 + 1), a4, v15, v16, v17, v18, v19, v20);
  v30 = *a2;
  if (*a2)
    v31 = *(_DWORD *)(v30 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(v30 - 12) = v31;
  v32 = *a2;
  if (*a2)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  v34 = (*(_DWORD *)(v32 - 16) + v33);
  v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 > 2 * v34)
      goto LABEL_11;
LABEL_24:
    v22 = (_QWORD *)WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(a2, (uint64_t)v22, v24, v25, v26, v27, v28, v29);
    v32 = *a2;
    if (*a2)
      LODWORD(v35) = *(_DWORD *)(v32 - 4);
    else
      LODWORD(v35) = 0;
    goto LABEL_11;
  }
  if (3 * v35 <= 4 * v34)
    goto LABEL_24;
LABEL_11:
  v36 = v32 + 24 * v35;
  v37 = 1;
LABEL_12:
  *(_QWORD *)a1 = v22;
  *(_QWORD *)(a1 + 8) = v36;
  *(_BYTE *)(a1 + 16) = v37;
}

void WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t a1, __int128 *a2, unsigned int a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;

  if (a3)
  {
    v5 = a3;
    v6 = *(unsigned int *)(a1 + 12);
    v7 = v6 + a3;
    if (v7 > *(unsigned int *)(a1 + 8)
      && (WTF::Vector<JSC::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, v6 + a3), v6 = *(unsigned int *)(a1 + 12), v7 < v6))
    {
      __break(0xC471u);
    }
    else
    {
      v8 = (_OWORD *)(*(_QWORD *)a1 + 16 * v6);
      v9 = 16 * v5;
      do
      {
        v10 = *a2++;
        *v8++ = v10;
        v9 -= 16;
      }
      while (v9);
      *(_DWORD *)(a1 + 12) = v7;
    }
  }
}

__n128 WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(unsigned int *)(a1 + 12);
      v5 = 24 * a2;
      v6 = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v4)
      {
        v14 = 24 * v4;
        v15 = v3;
        do
        {
          v16 = *(_OWORD *)v15;
          *(_QWORD *)(v6 + 16) = *(_QWORD *)(v15 + 16);
          *(_OWORD *)v6 = v16;
          v6 += 24;
          v15 += 24;
          v14 -= 24;
        }
        while (v14);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1, v5, a2);
}

void JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::placeMaterializations(WTF::HashMap<JSC::DFG::Node *,JSC::DFG::`anonymous namespace'::Allocation,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::`anonymous namespace'::Allocation>,WTF::HashTableTraits>,JSC::DFG::Node *)::{lambda(JSC::DFG::Node *)#1}::operator()(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  uint64_t v53;
  void **v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  int v93;
  int v94;
  int v95;
  int v96;
  void **v97;
  void *v98;

  v98 = a2;
  WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::addVoid(*a1, (uint64_t *)&v98, a3, a4, a5, a6, a7, a8);
  v16 = *a1[1];
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(void **)(v16 + 16 * v21);
    if (v22 == a2)
    {
LABEL_3:
      WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::HashTable((uint64_t *)&v97, (_QWORD *)(v16 + 16 * v21 + 8), v10, v11, v12, v13, v14, v15);
      v24 = (uint64_t)v97;
      if (v97)
      {
        if (!*((_DWORD *)v97 - 3))
          goto LABEL_78;
        v25 = *((unsigned int *)v97 - 1);
        v26 = v97;
        if ((_DWORD)v25)
        {
          v27 = 0;
          while ((unint64_t)v97[v27] + 1 <= 1)
          {
            if (v25 == ++v27)
              goto LABEL_9;
          }
          v26 = &v97[v27];
        }
        v52 = &v97[v25];
        if (v26 != v52)
        {
          v23 = *v26;
LABEL_23:
          v53 = WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::find(*a1[2], (uint64_t)v23);
          WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::remove((uint64_t *)(v53 + 8), &v98);
          while (++v26 != v52)
          {
            v23 = *v26;
            if ((unint64_t)*v26 + 1 > 1)
            {
              if (v26 != v52)
                goto LABEL_23;
              break;
            }
          }
          v24 = (uint64_t)v97;
        }
LABEL_9:
        if (v24)
LABEL_78:
          WTF::fastFree(v24 - 16, v23, v10, v11, v12, v13, v14, v15);
      }
    }
    else
    {
      v95 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v95) & v17;
        v22 = *(void **)(v16 + 16 * v21);
        ++v95;
        if (v22 == a2)
          goto LABEL_3;
      }
    }
  }
  v28 = *a1[2];
  if (v28)
  {
    v29 = *(_DWORD *)(v28 - 8);
    v30 = ((unint64_t)v98 + ~((_QWORD)v98 << 32)) ^ (((unint64_t)v98 + ~((_QWORD)v98 << 32)) >> 22);
    v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
    v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
    v33 = v29 & ((v32 >> 31) ^ v32);
    v34 = *(void **)(v28 + 16 * v33);
    if (v34 == v98)
    {
LABEL_12:
      WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::HashTable((uint64_t *)&v97, (_QWORD *)(v28 + 16 * v33 + 8), v10, v11, v12, v13, v14, v15);
      v36 = (uint64_t)v97;
      if (v97)
      {
        if (!*((_DWORD *)v97 - 3))
          goto LABEL_79;
        v37 = *((unsigned int *)v97 - 1);
        v38 = v97;
        if ((_DWORD)v37)
        {
          v39 = 0;
          while ((unint64_t)v97[v39] + 1 <= 1)
          {
            if (v37 == ++v39)
              goto LABEL_18;
          }
          v38 = &v97[v39];
        }
        v54 = &v97[v37];
        if (v38 == v54)
        {
LABEL_18:
          if (!v36)
            goto LABEL_19;
LABEL_79:
          WTF::fastFree(v36 - 16, v35, v10, v11, v12, v13, v14, v15);
          goto LABEL_19;
        }
        v55 = *v38;
LABEL_31:
        v56 = *a1[1];
        v57 = ~((_QWORD)v55 << 32);
        if (v56)
        {
          v58 = *(_DWORD *)(v56 - 8);
          v59 = (((unint64_t)v55 + v57) ^ (((unint64_t)v55 + v57) >> 22))
              + ~((((unint64_t)v55 + v57) ^ (((unint64_t)v55 + v57) >> 22)) << 13);
          v60 = (9 * (v59 ^ (v59 >> 8))) ^ ((9 * (v59 ^ (v59 >> 8))) >> 15);
          v61 = v58 & (((v60 + ~(v60 << 27)) >> 31) ^ ((_DWORD)v60 + ~((_DWORD)v60 << 27)));
          v62 = *(void **)(v56 + 16 * v61);
          if (v62 == v55)
          {
LABEL_33:
            v63 = v56 + 16 * v61;
          }
          else
          {
            v93 = 1;
            while (v62)
            {
              v61 = ((_DWORD)v61 + v93) & v58;
              v62 = *(void **)(v56 + 16 * v61);
              ++v93;
              if (v62 == v55)
                goto LABEL_33;
            }
            v63 = v56 + 16 * *(unsigned int *)(v56 - 4);
          }
        }
        else
        {
          v63 = 0;
        }
        v65 = *(_QWORD *)(v63 + 8);
        v64 = (uint64_t *)(v63 + 8);
        if (!v65)
        {
LABEL_48:
          v75 = *a1[3];
          if (v75)
          {
            v76 = *(_DWORD *)(v75 - 8);
            v77 = (((unint64_t)v55 + v57) ^ (((unint64_t)v55 + v57) >> 22))
                + ~((((unint64_t)v55 + v57) ^ (((unint64_t)v55 + v57) >> 22)) << 13);
            v78 = (9 * (v77 ^ (v77 >> 8))) ^ ((9 * (v77 ^ (v77 >> 8))) >> 15);
            v79 = v76 & (((v78 + ~(v78 << 27)) >> 31) ^ ((_DWORD)v78 + ~((_DWORD)v78 << 27)));
            v80 = *(void **)(v75 + 16 * v79);
            if (v80 == v55)
            {
LABEL_50:
              v81 = v75 + 16 * v79;
            }
            else
            {
              v94 = 1;
              while (v80)
              {
                v79 = ((_DWORD)v79 + v94) & v76;
                v80 = *(void **)(v75 + 16 * v79);
                ++v94;
                if (v80 == v55)
                  goto LABEL_50;
              }
              v81 = v75 + 16 * *(unsigned int *)(v75 - 4);
            }
          }
          else
          {
            v81 = 0;
          }
          v83 = *(_QWORD *)(v81 + 8);
          v82 = (uint64_t *)(v81 + 8);
          if (!v83)
            goto LABEL_65;
          v84 = (_QWORD *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::DFG::Node *>,WTF::DefaultHash<JSC::DFG::Node *>>,JSC::DFG::Node *>(v82, &v98);
          v85 = *v82;
          if (v84)
          {
            if (!v85)
              goto LABEL_56;
            v86 = *(unsigned int *)(v85 - 4);
          }
          else
          {
            if (!v85)
              goto LABEL_65;
            v86 = *(unsigned int *)(v85 - 4);
            v84 = (_QWORD *)(v85 + 8 * v86);
          }
          v85 += 8 * v86;
          if ((_QWORD *)v85 == v84)
            goto LABEL_65;
LABEL_56:
          if ((_QWORD *)v85 != v84)
          {
            *v84 = -1;
            ++*(_DWORD *)(*v82 - 16);
            v87 = *v82;
            v88 = *v82 ? *(_DWORD *)(v87 - 12) - 1 : -1;
            *(_DWORD *)(v87 - 12) = v88;
            v89 = *v82;
            if (*v82)
            {
              v90 = 6 * *(_DWORD *)(v89 - 12);
              v91 = *(_DWORD *)(v89 - 4);
              if (v90 < v91 && v91 >= 9)
                WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v82, v91 >> 1, 0, v11, v12, v13, v14, v15);
            }
          }
LABEL_65:
          while (++v38 != v54)
          {
            v55 = *v38;
            if ((unint64_t)*v38 + 1 > 1)
            {
              if (v38 != v54)
                goto LABEL_31;
              break;
            }
          }
          v36 = (uint64_t)v97;
          goto LABEL_18;
        }
        v66 = (_QWORD *)WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::DFG::Node *>,WTF::DefaultHash<JSC::DFG::Node *>>,JSC::DFG::Node *>(v64, &v98);
        v67 = *v64;
        if (v66)
        {
          if (!v67)
          {
LABEL_39:
            if ((_QWORD *)v67 != v66)
            {
              *v66 = -1;
              ++*(_DWORD *)(*v64 - 16);
              v69 = *v64;
              v70 = *v64 ? *(_DWORD *)(v69 - 12) - 1 : -1;
              *(_DWORD *)(v69 - 12) = v70;
              v71 = *v64;
              if (*v64)
              {
                v72 = 6 * *(_DWORD *)(v71 - 12);
                v73 = *(_DWORD *)(v71 - 4);
                if (v72 < v73 && v73 >= 9)
                  WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v64, v73 >> 1, 0, v11, v12, v13, v14, v15);
              }
            }
            goto LABEL_48;
          }
          v68 = *(unsigned int *)(v67 - 4);
        }
        else
        {
          if (!v67)
            goto LABEL_48;
          v68 = *(unsigned int *)(v67 - 4);
          v66 = (_QWORD *)(v67 + 8 * v68);
        }
        v67 += 8 * v68;
        if ((_QWORD *)v67 == v66)
          goto LABEL_48;
        goto LABEL_39;
      }
    }
    else
    {
      v96 = 1;
      while (v34)
      {
        v33 = ((_DWORD)v33 + v96) & v29;
        v34 = *(void **)(v28 + 16 * v33);
        ++v96;
        if (v34 == v98)
          goto LABEL_12;
      }
    }
  }
LABEL_19:
  WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(a1[1], v98, v10, v11, v12, v13, v14, v15);
  WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(a1[2], v98, v40, v41, v42, v43, v44, v45);
  WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(a1[3], v98, v46, v47, v48, v49, v50, v51);
}

void WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::remove(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v24;

  v8 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v8 - 8);
    v11 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(void **)(v8 + 16 * v14);
    if (v15 != a2)
    {
      v24 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v24) & v10;
        v15 = *(void **)(v8 + 16 * v14);
        ++v24;
        if (v15 == a2)
          goto LABEL_3;
      }
      v14 = *(unsigned int *)(v8 - 4);
    }
LABEL_3:
    if (v14 != *(_DWORD *)(v8 - 4))
    {
      v16 = (_QWORD *)(v8 + 16 * v14);
      *v16 = -1;
      v17 = v16[1];
      if (v17)
        WTF::fastFree(v17 - 16, a2, a3, a4, a5, a6, a7, a8);
      ++*(_DWORD *)(*a1 - 16);
      v18 = *a1;
      if (*a1)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *a1;
      if (*a1)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1, v22 >> 1, 0);
      }
    }
  }
}

__n128 WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedHeapLocation>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<JSC::UnlinkedHandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t JSC::DFG::Graph::addNode<JSC::DFG::Node::VarArgTag,JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,int,int>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;

  v12 = *(_QWORD *)a4;
  if ((*(_QWORD *)a4 & 1) != 0)
  {
    v35 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v36 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
        ? (v37 = (_DWORD)v36 == -1)
        : (v37 = 1),
          v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v51 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v51 = v35;
      *(_DWORD *)(v51 + 8) = v36;
      v38 = 1;
      v35 = v51;
    }
    else
    {
      v38 = v35;
      v35 = v36 << 36;
    }
    v12 = v35 | v38;
  }
  v13 = *(_QWORD *)(a4 + 8);
  if ((v13 & 1) != 0)
  {
    v39 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v40 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v40 != 0x3FFFFFFF)
        ? (v41 = (_DWORD)v40 == -1)
        : (v41 = 1),
          v41))
    {
      v42 = 2;
    }
    else if (v40 >> 28)
    {
      v52 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v52 = v39;
      *(_DWORD *)(v52 + 8) = v40;
      v42 = 1;
      v39 = v52;
    }
    else
    {
      v42 = v39;
      v39 = v40 << 36;
    }
    v13 = v39 | v42;
  }
  v14 = *(_WORD *)(a4 + 16);
  v15 = WTF::fastMalloc((WTF *)0x68);
  v16 = v12;
  if ((v12 & 1) != 0)
  {
    v43 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v44 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v44 != 0x3FFFFFFF)
        ? (v45 = (_DWORD)v44 == -1)
        : (v45 = 1),
          v45))
    {
      v46 = 2;
    }
    else if (v44 >> 28)
    {
      v53 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v55 = *(_DWORD *)((v12 & 0xFFFFFFFF8) + 8);
      v43 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v43 = v53;
      *(_DWORD *)(v43 + 8) = v55;
      v46 = 1;
    }
    else
    {
      v46 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
      v43 = v44 << 36;
    }
    v16 = v43 | v46;
  }
  v57 = v16;
  v17 = v13;
  if ((v13 & 1) != 0)
  {
    v47 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
    if ((v13 & 2) != 0
      || ((v48 = *(unsigned int *)((v13 & 0xFFFFFFFF8) + 8), (_DWORD)v48 != 0x3FFFFFFF)
        ? (v49 = (_DWORD)v48 == -1)
        : (v49 = 1),
          v49))
    {
      v50 = 2;
    }
    else if (v48 >> 28)
    {
      v54 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v56 = *(_DWORD *)((v13 & 0xFFFFFFFF8) + 8);
      v47 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v47 = v54;
      *(_DWORD *)(v47 + 8) = v56;
      v50 = 1;
    }
    else
    {
      v50 = *(_QWORD *)(v13 & 0xFFFFFFFF8);
      v47 = v48 << 36;
    }
    v17 = v47 | v50;
  }
  v58 = v17;
  v59 = v14;
  result = JSC::DFG::Node::Node(v15, 0, a3, (uint64_t)&v57, a5, a6, 0, 0);
  v26 = *(unsigned int *)(a1 + 1060);
  if ((_DWORD)v26)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 1048) + 8 * v26 - 8);
    *(_DWORD *)(a1 + 1060) = v26 - 1;
    v28 = *(_QWORD *)(a1 + 1032);
  }
  else
  {
    v27 = *(unsigned int *)(a1 + 1044);
    if ((_DWORD)v27 == *(_DWORD *)(a1 + 1040))
    {
      v29 = v27 + (v27 >> 2);
      if (v29 >= 0x10)
        v30 = v29 + 1;
      else
        v30 = 16;
      if (v30 <= v27 + 1)
        v31 = v27 + 1;
      else
        v31 = v30;
      if (v31 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v32 = *(const void **)(a1 + 1032);
      v33 = (void *)WTF::fastMalloc((WTF *)(8 * v31));
      *(_DWORD *)(a1 + 1040) = v31;
      *(_QWORD *)(a1 + 1032) = v33;
      memcpy(v33, v32, 8 * v27);
      if (v32)
      {
        if (*(const void **)(a1 + 1032) == v32)
        {
          *(_QWORD *)(a1 + 1032) = 0;
          *(_DWORD *)(a1 + 1040) = 0;
        }
        WTF::fastFree((unint64_t)v32, v19, v20, v21, v22, v23, v24, v25);
      }
      v34 = *(unsigned int *)(a1 + 1044);
      v28 = *(_QWORD *)(a1 + 1032);
      *(_QWORD *)(v28 + 8 * v34) = 0;
      *(_DWORD *)(a1 + 1044) = v34 + 1;
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 1032);
      *(_QWORD *)(v28 + 8 * v27) = 0;
      *(_DWORD *)(a1 + 1044) = v27 + 1;
    }
  }
  *(_DWORD *)(v15 + 20) = v27;
  *(_QWORD *)(v28 + 8 * v27) = v15;
  if ((v58 & 1) != 0 && (v58 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v58 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  if ((v57 & 1) != 0 && (v57 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v57 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, v19, v20, v21, v22, v23, v24, v25);
  *(_QWORD *)(v15 + 64) |= a2;
  return v15;
}

uint64_t WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  unint64_t v11;

  v9 = *a1;
  if (*a1 && (v10 = *(_DWORD *)(v9 - 4)) != 0)
    v11 = (v10 << (6 * *(_DWORD *)(v9 - 12) >= (2 * v10)));
  else
    v11 = 8;
  return WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a1, v11, a2, a4, a5, a6, a7, a8);
}

uint64_t WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    LODWORD(v12) = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    LODWORD(v12) = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  v22 = 0;
  if ((_DWORD)v12)
  {
    v12 = v12;
    v24 = v11;
    do
    {
      if (*(_QWORD *)v24)
      {
        if (*(_QWORD *)v24 != -1)
        {
          v25 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(*a1, v24);
          v26 = *(_QWORD *)(v24 + 8);
          if (v26)
          {
            *(_QWORD *)(v24 + 8) = 0;
            *(_DWORD *)(v24 + 16) = 0;
            v28 = v25;
            WTF::fastFree(v26, v15, v16, v17, v18, v19, v20, v21);
            v25 = v28;
          }
          if (v24 == a3)
            v22 = v25;
        }
      }
      else
      {
        v27 = *(_QWORD *)(v24 + 8);
        if (v27)
        {
          *(_QWORD *)(v24 + 8) = 0;
          *(_DWORD *)(v24 + 16) = 0;
          WTF::fastFree(v27, v15, v16, v17, v18, v19, v20, v21);
        }
      }
      v24 += 24;
      --v12;
    }
    while (v12);
    goto LABEL_18;
  }
  result = 0;
  if (v11)
  {
LABEL_18:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
    return v22;
  }
  return result;
}

uint64_t WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::reinsert(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)a2;
  v11 = WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::DFG::Node *>>,JSC::DFG::Node *>(a1, *(_QWORD *)a2);
  v12 = *(_QWORD *)(v11 + 8);
  if (v12)
  {
    *(_QWORD *)(v11 + 8) = 0;
    *(_DWORD *)(v11 + 16) = 0;
    WTF::fastFree(v12, v4, v5, v6, v7, v8, v9, v10);
    v3 = *(_QWORD *)a2;
  }
  *(_QWORD *)v11 = v3;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  v13 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(v11 + 8) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(v11 + 16) = v13;
  LODWORD(v13) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(v11 + 20) = v13;
  return v11;
}

uint64_t WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::DFG::Node *>>,JSC::DFG::Node *>(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    v4 = ++v5 + (v4 & v3);
  }
  while (*(_QWORD *)(a1 + 24 * v6));
  return a1 + 24 * v6;
}

void WTF::GenericHashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)a1;
  if (v10)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v11;
  LODWORD(v11) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v11;
  LODWORD(v11) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v11;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<std::pair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  _QWORD *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *result;

  v8 = a2;
  v9 = *a1;
  if (*a1)
  {
    v10 = *(_DWORD *)(v9 - 4);
    v11 = *(_DWORD *)(v9 - 12);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v12 = WTF::fastZeroedMalloc(24 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  v20 = a1;
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if (v10)
  {
    v21 = 0;
    v22 = 0;
    v23 = v10;
    v24 = (uint64_t *)a3;
    do
    {
      v25 = (uint64_t *)(v9 + 24 * v21);
      v26 = *v25;
      if (*v25)
      {
        if (v26 != -1)
        {
          v27 = *v20;
          if (*v20)
            v28 = *(_DWORD *)(v27 - 8);
          else
            v28 = 0;
          v29 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
          v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
          v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
          v32 = v28 & ((v31 >> 31) ^ v31);
          v33 = 1;
          do
          {
            v34 = v32;
            v35 = (_QWORD *)(v27 + 24 * v32);
            v32 = (v32 + v33++) & v28;
          }
          while (*v35);
          v36 = v34;
          v37 = v27 + 24 * v34;
          v40 = *(_QWORD *)(v37 + 8);
          v39 = (_QWORD *)(v37 + 8);
          v38 = v40;
          if (v40)
          {
            *v39 = 0;
            *(_DWORD *)(v27 + 24 * v34 + 16) = 0;
            WTF::fastFree(v38, v13, v14, v15, v16, v17, v18, v19);
            v24 = (uint64_t *)a3;
            v20 = a1;
            v26 = *v25;
          }
          *v35 = v26;
          v41 = v9 + 24 * v21;
          *v39 = 0;
          v39[1] = 0;
          v43 = *(_QWORD *)(v41 + 8);
          v42 = v41 + 8;
          *(_QWORD *)v42 = 0;
          *v39 = v43;
          v44 = *(_DWORD *)(v42 + 8);
          *(_DWORD *)(v42 + 8) = 0;
          v45 = v27 + 24 * v36;
          *(_DWORD *)(v45 + 16) = v44;
          v46 = *(_DWORD *)(v42 + 12);
          *(_DWORD *)(v42 + 12) = 0;
          *(_DWORD *)(v45 + 20) = v46;
          v47 = *(_QWORD *)v42;
          if (*(_QWORD *)v42)
          {
            *(_QWORD *)v42 = 0;
            *(_DWORD *)(v42 + 8) = 0;
            WTF::fastFree(v47, v13, v14, v15, v16, v17, v18, v19);
            v24 = (uint64_t *)a3;
            v20 = a1;
          }
          if (v25 == v24)
            v22 = v35;
        }
      }
      else
      {
        v48 = v9 + 24 * v21;
        v51 = *(_QWORD *)(v48 + 8);
        v50 = (_QWORD *)(v48 + 8);
        v49 = v51;
        if (v51)
        {
          *v50 = 0;
          *(_DWORD *)(v9 + 24 * v21 + 16) = 0;
          WTF::fastFree(v49, v13, v14, v15, v16, v17, v18, v19);
          v24 = (uint64_t *)a3;
          v20 = a1;
        }
      }
      ++v21;
    }
    while (v21 != v23);
  }
  else
  {
    v22 = 0;
    result = 0;
    if (!v9)
      return result;
  }
  WTF::fastFree(v9 - 16, v13, v14, v15, v16, v17, v18, v19);
  return v22;
}

uint64_t WTF::HashSet<JSC::DFG::PromotedHeapLocation,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTableTraits>::begin(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;

  if (!result)
    return 0;
  v1 = *(unsigned int *)(result - 4);
  v2 = result + 16 * v1;
  if (!*(_DWORD *)(result - 12))
    return result + 16 * v1;
  if ((_DWORD)v1)
  {
    v3 = 16 * v1;
    while (1)
    {
      v4 = *(_DWORD *)(result + 8);
      if (*(_QWORD *)result)
        break;
      v5 = *(_DWORD *)(result + 12);
      if (v4 | v5)
        goto LABEL_9;
LABEL_7:
      result += 16;
      v3 -= 16;
      if (!v3)
        return v2;
    }
    v5 = *(_DWORD *)(result + 12);
LABEL_9:
    if (v4)
      v6 = 1;
    else
      v6 = v5 == 0;
    if (v6)
      return result;
    goto LABEL_7;
  }
  return result;
}

uint64_t *WTF::HashTableConstIteratorAdapter<WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>,JSC::DFG::PromotedHeapLocation>::operator++(uint64_t *result)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  _DWORD *v6;
  BOOL v7;

  v2 = *result;
  v1 = (_DWORD *)result[1];
  v3 = *result + 16;
  *result = v3;
  if ((_DWORD *)v3 != v1)
  {
    v4 = (int *)(v2 + 28);
    do
    {
      if (*(_QWORD *)(v4 - 3))
      {
        v5 = *v4;
      }
      else
      {
        v5 = *v4;
        if (!*(_QWORD *)(v4 - 1))
          goto LABEL_5;
      }
      if (*(v4 - 1))
        v7 = 1;
      else
        v7 = v5 == 0;
      if (v7)
        return result;
LABEL_5:
      v6 = v4 + 1;
      *result = (uint64_t)(v4 + 1);
      v4 += 4;
    }
    while (v6 != v1);
  }
  return result;
}

uint64_t WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::PromotedHeapLocation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::get(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;

  v3 = result;
  if (!a2)
  {
LABEL_12:
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    return result;
  }
  v4 = *(_DWORD *)(a2 - 8);
  v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  v9 = *(_QWORD *)(a2 + 24 * v8);
  if (v9 != a3)
  {
    v10 = 1;
    while (v9)
    {
      v8 = (v8 + v10) & v4;
      v9 = *(_QWORD *)(a2 + 24 * v8);
      ++v10;
      if (v9 == a3)
        goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_6:
  v11 = a2 + 24 * v8;
  v12 = *(unsigned int *)(v11 + 20);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v12;
  if ((_DWORD)v12)
  {
    if (v12 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1984EBD58);
    }
    v13 = v11 + 8;
    result = WTF::fastMalloc((WTF *)(16 * v12));
    *(_DWORD *)(v3 + 8) = v12;
    *(_QWORD *)v3 = result;
    v14 = *(unsigned int *)(v13 + 12);
    if ((_DWORD)v14)
    {
      v15 = *(__int128 **)v13;
      v16 = 16 * v14;
      do
      {
        v17 = *v15++;
        *(_OWORD *)result = v17;
        result += 16;
        v16 -= 16;
      }
      while (v16);
    }
  }
  return result;
}

uint64_t JSC::DFG::InsertionSet::insert(JSC::DFG::InsertionSet *this, unint64_t a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 *v14;
  __int128 v15;

  *(_QWORD *)&v15 = a2;
  *((_QWORD *)&v15 + 1) = a3;
  v9 = (_QWORD *)((char *)this + 8);
  v10 = *((unsigned int *)this + 5);
  if ((_DWORD)v10 && *(_QWORD *)(*v9 + 16 * v10 - 16) > a2)
  {
    JSC::DFG::InsertionSet::insertSlow((uint64_t)this, (unint64_t *)&v15, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  else
  {
    if ((_DWORD)v10 == *((_DWORD *)this + 4))
    {
      v14 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9, (void *)(v10 + 1), (unint64_t)&v15, a4, a5, a6, a7, a8);
      v10 = *((unsigned int *)this + 5);
      v11 = *((_QWORD *)this + 1);
      v12 = *v14;
    }
    else
    {
      v11 = *((_QWORD *)this + 1);
      v12 = v15;
    }
    *(_OWORD *)(v11 + 16 * v10) = v12;
    ++*((_DWORD *)this + 5);
  }
  return *((_QWORD *)&v15 + 1);
}

void JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::insertOSRHintsForUpdate(_QWORD *a1, unsigned int a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  BOOL v54;
  __int128 v55;
  uint64_t v56;
  int v57;
  int v58;
  BOOL v59;
  char v60;
  JSC::DFG::Node *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v88;
  uint64_t v89;
  char v90;
  char v91;
  _BYTE v92[24];
  __int128 v93;
  JSC::DFG::Node *v94[2];
  uint64_t v95[2];

  v7 = a7;
  v14 = *(_QWORD *)(a5 + 24);
  if (!v14)
  {
    v15 = 0;
    v16 = 0;
LABEL_3:
    v17 = v14 + 32 * v16;
    goto LABEL_4;
  }
  v16 = *(unsigned int *)(v14 - 4);
  v17 = v14 + 32 * v16;
  if (!*(_DWORD *)(v14 - 12))
  {
    v15 = v14 + 32 * v16;
    goto LABEL_3;
  }
  v15 = *(_QWORD *)(a5 + 24);
  if (!(_DWORD)v16)
    goto LABEL_4;
  v51 = 32 * v16;
  v15 = *(_QWORD *)(a5 + 24);
  do
  {
    v52 = *(_DWORD *)(v15 + 8);
    if (*(_QWORD *)v15)
    {
      v53 = *(_DWORD *)(v15 + 12);
    }
    else
    {
      v53 = *(_DWORD *)(v15 + 12);
      if (!(v52 | v53))
        goto LABEL_52;
    }
    if (v52)
      v54 = 1;
    else
      v54 = v53 == 0;
    if (v54)
      goto LABEL_4;
LABEL_52:
    v15 += 32;
    v51 -= 32;
  }
  while (v51);
  v15 = v17;
LABEL_4:
  v95[0] = v15;
  v95[1] = v17;
  if (v14)
    v18 = v14 + 32 * *(unsigned int *)(v14 - 4);
  else
    v18 = 0;
  if (v18 != v15)
  {
    do
    {
      v55 = *(_OWORD *)(v15 + 16);
      v93 = *(_OWORD *)v15;
      *(_OWORD *)v94 = v55;
      if ((unint64_t)v55 >= 2
      {
        v56 = a1[4];
        v57 = *(unsigned __int8 *)(a3 + 16);
        v58 = *a4;
        *a4 = 0;
        if (v57)
          v59 = v58 == 0;
        else
          v59 = 1;
        v60 = !v59;
        JSC::DFG::NodeOrigin::withExitOK(a3, v60, (uint64_t)v92);
        v61 = (JSC::DFG::Node *)JSC::DFG::PromotedHeapLocation::createHint(&v93, v56, (uint64_t)v92, a7);
        v7 = a7;
        JSC::DFG::InsertionSet::insert((JSC::DFG::InsertionSet *)(a1 + 30), a2, v61, v62, v63, v64, v65, v66);
        JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v92, v67, v68, v69, v70, v71, v72, v73);
      }
      WTF::HashTableConstIteratorAdapter<WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Availability>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Availability>>::operator++(v95);
      v15 = v95[0];
    }
    while (v95[0] != v18);
  }
  v19 = *(unsigned int *)(a5 + 12);
  if ((_DWORD)v19)
  {
    v86 = v7 & 0xFF00FFFFFFFFFFFFLL;
    v85 = a2;
    do
    {
      v20 = v19 - 1;
      v21 = (v19 - 1);
      v22 = *(_QWORD *)(*(_QWORD *)a5 + 16 * v21);
      if (v22 >= 2)
      {
        v23 = a1[64];
        if (v23)
        {
          v44 = *(_DWORD *)(v23 - 8);
          v45 = (~(v22 << 32) + v22) ^ ((~(v22 << 32) + v22) >> 22);
          v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
          v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
          v48 = v44 & ((v47 >> 31) ^ v47);
          v49 = *(_QWORD *)(v23 + 16 * v48);
          if (v49 != v22)
          {
            v50 = 1;
            while (v49)
            {
              v48 = ((_DWORD)v48 + v50) & v44;
              v49 = *(_QWORD *)(v23 + 16 * v48);
              ++v50;
              if (v49 == v22)
                goto LABEL_42;
            }
            v48 = *(unsigned int *)(v23 - 4);
          }
LABEL_42:
          if (v48 == *(_DWORD *)(v23 - 4))
            v23 = 0;
          else
            v23 = *(_QWORD *)(v23 + 16 * v48 + 8);
        }
        if (v23 == a6)
        {
          v24 = *(unsigned int *)(a5 + 16);
          if (v24 > v20)
          {
            v28 = v19 + 4;
            v27 = (v19 + 4) >> 31;
          }
          else
          {
            v25 = *(unsigned int *)(a5 + 20) + v24;
            v26 = v24 - v19;
            if (v25 > v21)
              v27 = v26 >> 31;
            else
              v27 = 2;
            if (v25 > v21)
              v28 = v26;
            else
              v28 = v20 - v25;
          }
          v29 = *(unsigned __int8 *)(a3 + 16);
          v30 = *a4;
          *a4 = 0;
          if (v29)
            v31 = v30 == 0;
          else
            v31 = 1;
          v32 = !v31;
          v33 = *(_QWORD *)a3;
          if ((*(_QWORD *)a3 & 1) != 0)
          {
            v74 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
            if ((v33 & 2) != 0
              || ((v75 = *(unsigned int *)((v33 & 0xFFFFFFFF8) + 8), (_DWORD)v75 != 0x3FFFFFFF)
                ? (v76 = (_DWORD)v75 == -1)
                : (v76 = 1),
                  v76))
            {
              v77 = 2;
            }
            else if (v75 >> 28)
            {
              v81 = *(_DWORD *)((v33 & 0xFFFFFFFF8) + 8);
              v83 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
              v74 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v74 = v83;
              *(_DWORD *)(v74 + 8) = v81;
              v77 = 1;
            }
            else
            {
              v77 = *(_QWORD *)(v33 & 0xFFFFFFFF8);
              v74 = v75 << 36;
            }
            v33 = v74 | v77;
          }
          v88 = v33;
          v34 = *(_QWORD *)(a3 + 8);
          if ((v34 & 1) != 0)
          {
            v78 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
            if ((v34 & 2) != 0
              || (v79 = *(unsigned int *)((v34 & 0xFFFFFFFF8) + 8), (_DWORD)v79 == 0x3FFFFFFF)
              || (_DWORD)v79 == -1)
            {
              v80 = 2;
            }
            else if (v79 >> 28)
            {
              v82 = *(_DWORD *)((v34 & 0xFFFFFFFF8) + 8);
              v84 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
              v78 = WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v78 = v84;
              *(_DWORD *)(v78 + 8) = v82;
              v80 = 1;
            }
            else
            {
              v80 = *(_QWORD *)(v34 & 0xFFFFFFFF8);
              v78 = v79 << 36;
            }
            v34 = v78 | v80;
          }
          v89 = v34;
          v91 = HIBYTE(*(_WORD *)(a3 + 16));
          v90 = v32;
          v35 = 0xC4000000000000;
          if ((*(_DWORD *)(a7 + 56) & 7) != 3)
            v35 = 0;
          v36 = 0xD0000000000000;
          if ((*(_DWORD *)(a7 + 56) & 7) != 5)
            v36 = v35;
          JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)(a1 + 30), v85, 0, 0x14u, (uint64_t)&v88, v28 | (unint64_t)(v27 << 32), v36 | v86);
          if ((v89 & 1) != 0 && (v89 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v89 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
          if ((v88 & 1) != 0 && (v88 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v88 & 0xFFFFFFFF8, v37, v38, v39, v40, v41, v42, v43);
        }
      }
      v19 = v20;
    }
    while ((_DWORD)v20);
  }
}

BOOL JSC::DFG::`anonymous namespace'::LocalHeap::isUnescapedAllocation(_BOOL8 this, JSC::DFG::Node *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  JSC::DFG::Node *v8;
  int v9;

  if (this)
  {
    v2 = *(_DWORD *)(this - 8);
    v3 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    v7 = this + 48 * v6;
    v8 = *(JSC::DFG::Node **)v7;
    if (*(JSC::DFG::Node **)v7 != a2)
    {
      v9 = 1;
      while (v8)
      {
        v6 = (v6 + v9) & v2;
        v7 = this + 48 * v6;
        v8 = *(JSC::DFG::Node **)v7;
        ++v9;
        if (*(JSC::DFG::Node **)v7 == a2)
          return v7 != this + 48 * *(unsigned int *)(this - 4) && *(_DWORD *)(v7 + 16) != 0;
      }
      v7 = this + 48 * *(unsigned int *)(this - 4);
    }
    return v7 != this + 48 * *(unsigned int *)(this - 4) && *(_DWORD *)(v7 + 16) != 0;
  }
  return this;
}

uint64_t JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::createRecovery(JSC::DFG::Graph **a1, JSC::DFG::BasicBlock *a2, JSC::DFG::Node *a3, unint64_t a4, uint64_t a5, _BYTE *a6)
{
  JSC::DFG::Node *Materialization;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  JSC::DFG::Graph *v28;
  int v29;
  int v30;
  BOOL v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t Hint;
  JSC::DFG::NodeOrigin *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *Allocation;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  BOOL v70;
  char v71;
  JSC::DFG::Graph *v72;
  int v73;
  int v74;
  BOOL v75;
  char v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  JSC::DFG::Graph *v80;
  int v81;
  int v82;
  BOOL v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int Concurrently;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  JSC::DFG::Graph *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  BOOL v109;
  char v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  JSC::DFG::Graph *v122;
  int v123;
  int v124;
  BOOL v125;
  char v126;
  JSC::DFG::NodeOrigin *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  JSC::DFG::Graph *v193;
  int v194;
  int v195;
  BOOL v196;
  char v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  JSC::DFG::Graph *v202;
  uint64_t v203;
  uint64_t *v204;
  _BYTE v205[24];
  _BYTE v206[24];
  _BYTE v207[24];
  _BYTE v208[24];
  uint64_t v209[8];
  _BYTE v210[24];
  _BYTE v211[24];
  uint64_t *v212;
  uint64_t v213;
  _BYTE v214[24];
  int64x2_t v215;
  unsigned __int8 v216;
  unsigned __int16 v217;
  unint64_t v218;
  uint64_t v219[2];

  JSC::CodeOrigin::CodeOrigin(v215.i64, Materialization);
  JSC::DFG::NodeOrigin::withSemantic(a5, &v215, v14, v15, v16, v17, v18, v19, (int64x2_t *)&v215.u64[1]);
  if ((v215.i8[0] & 1) != 0 && (v215.i64[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v215.i64[0] & 0xFFFFFFFF8, v20, v21, v22, v23, v24, v25, v26);
  if (!JSC::DFG::Node::isPhantomAllocation((JSC::DFG::Node *)*((unsigned __int16 *)Materialization + 9)))
  {
    v27 = HIDWORD(a4);
    switch((_DWORD)a4)
    {
      case 6:
        v28 = a1[4];
        v29 = v216;
        v30 = *a6;
        *a6 = 0;
        if (v29)
          v31 = v30 == 0;
        else
          v31 = 1;
        v32 = !v31;
        JSC::DFG::NodeOrigin::withExitOK((uint64_t)&v215.i64[1], v32, (uint64_t)v207);
        v33 = (unint64_t)Materialization & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000;
        v34 = 0xC4000000000000;
        if ((*(_DWORD *)(v13 + 56) & 7) != 3)
          v34 = 0;
        v35 = 0xD0000000000000;
        if ((*(_DWORD *)(v13 + 56) & 7) != 5)
          v35 = v34;
        v209[0] = HIDWORD(a4);
        v212 = (uint64_t *)v33;
        v219[0] = v35 | v13 & 0xFF00FFFFFFFFFFFFLL;
        LOWORD(v218) = 172;
        Hint = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &>((uint64_t)v28 + 1032, (unsigned __int16 *)&v218, (uint64_t)v207, v209, (uint64_t *)&v212, v219);
        v44 = (JSC::DFG::NodeOrigin *)v207;
        goto LABEL_15;
      case 7:
        v72 = a1[4];
        v73 = v216;
        v74 = *a6;
        *a6 = 0;
        if (v73)
          v75 = v74 == 0;
        else
          v75 = 1;
        v76 = !v75;
        JSC::DFG::NodeOrigin::withExitOK((uint64_t)&v215.i64[1], v76, (uint64_t)v206);
        v77 = (unint64_t)Materialization & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000;
        v78 = 0xC4000000000000;
        if ((*(_DWORD *)(v13 + 56) & 7) != 3)
          v78 = 0;
        v79 = 0xD0000000000000;
        if ((*(_DWORD *)(v13 + 56) & 7) != 5)
          v79 = v78;
        v209[0] = HIDWORD(a4);
        v212 = (uint64_t *)v77;
        v219[0] = v79 | v13 & 0xFF00FFFFFFFFFFFFLL;
        LOWORD(v218) = 344;
        Hint = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &>((uint64_t)v72 + 1032, (unsigned __int16 *)&v218, (uint64_t)v206, v209, (uint64_t *)&v212, v219);
        v44 = (JSC::DFG::NodeOrigin *)v206;
        goto LABEL_15;
      case 0x13:
        v80 = a1[4];
        v81 = v216;
        v82 = *a6;
        *a6 = 0;
        if (v81)
          v83 = v82 == 0;
        else
          v83 = 1;
        v84 = !v83;
        JSC::DFG::NodeOrigin::withExitOK((uint64_t)&v215.i64[1], v84, (uint64_t)v205);
        v85 = (unint64_t)Materialization & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000;
        v86 = 0xC4000000000000;
        if ((*(_DWORD *)(v13 + 56) & 7) != 3)
          v86 = 0;
        v87 = 0xD0000000000000;
        if ((*(_DWORD *)(v13 + 56) & 7) != 5)
          v87 = v86;
        v209[0] = 1;
        v212 = (uint64_t *)v85;
        v219[0] = v87 | v13 & 0xFF00FFFFFFFFFFFFLL;
        LOWORD(v218) = 180;
        Hint = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &>((uint64_t)v80 + 1032, (unsigned __int16 *)&v218, (uint64_t)v205, v209, (uint64_t *)&v212, v219);
        v44 = (JSC::DFG::NodeOrigin *)v205;
        goto LABEL_15;
    }
    if ((_DWORD)a4 != 11)
    {
      JSC::DFG::Graph::logAssertionFailure(a1[4], Materialization, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0xA18, "Node *JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::createRecovery(BasicBlock *, PromotedHeapLocation, Node *, BOOL &)", "Bad location kind");
      __break(0xC471u);
      goto LABEL_124;
    }
    v59 = (_DWORD *)JSC::DFG::DesiredIdentifiers::at((JSC::DFG::DesiredIdentifiers *)(*((_QWORD *)a1[4] + 3) + 240), HIDWORD(a4));
    v212 = 0;
    v213 = 0;
    v60 = *((_QWORD *)Allocation + 4);
    if ((v60 & 1) != 0)
      v61 = *(unsigned int *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
    else
      v61 = v60 > 3;
    if (v61)
    {
      v62 = 0;
      v63 = 8 * v61;
      do
      {
        v64 = *((_QWORD *)Allocation + 4);
        v65 = v64 & 0xFFFFFFFFFFFFFFFCLL;
        if ((v64 & 1) != 0)
          v65 = *(_QWORD *)(v65 + v62 + 8);
        v209[0] = v65;
        LODWORD(v219[0]) = 0;
        if (JSC::Structure::getConcurrently(v65, v59, v219, v54, v55, v56, v57, v58) != -1)
        {
          v66 = HIDWORD(v213);
          if (HIDWORD(v213) == (_DWORD)v213)
          {
            WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::RegisteredStructure&>((uint64_t)&v212, (unint64_t)v209);
          }
          else
          {
            v212[HIDWORD(v213)] = v209[0];
            HIDWORD(v213) = v66 + 1;
          }
        }
        v62 += 8;
      }
      while (v63 != v62);
      v88 = HIDWORD(v213);
      v89 = v212;
      if (HIDWORD(v213))
      {
        v90 = *v89;
        LODWORD(v209[0]) = 0;
        Concurrently = JSC::Structure::getConcurrently(v90, v59, v209, v91, v92, v93, v94, v95);
        v97 = v89[v88 - 1];
        LODWORD(v209[0]) = 0;
        if (Concurrently == JSC::Structure::getConcurrently(v97, v59, v209, v98, v99, v100, v101, v102))
        {
          if (Concurrently < 64)
          {
            v103 = v89;
            v104 = a1[4];
            v105 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v105 = 0;
            *(_QWORD *)(v105 + 8) = 0;
            *(_QWORD *)(v105 + 8) = *((_QWORD *)v104 + 54);
            *((_QWORD *)v104 + 54) = v105;
            *(_DWORD *)v105 = Concurrently;
            *(_DWORD *)(v105 + 4) = v27;
            v106 = (uint64_t)a1[4];
            v107 = v216;
            v108 = *a6;
            *a6 = 0;
            if (v107)
              v109 = v108 == 0;
            else
              v109 = 1;
            v110 = !v109;
            JSC::DFG::NodeOrigin::withExitOK((uint64_t)&v215.i64[1], v110, (uint64_t)v210);
            v112 = (unint64_t)Materialization & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000;
            v113 = 0xC4000000000000;
            if ((*(_DWORD *)(v13 + 56) & 7) != 3)
              v113 = 0;
            v114 = 0xD0000000000000;
            if ((*(_DWORD *)(v13 + 56) & 7) != 5)
              v114 = v113;
            Hint = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge,JSC::DFG::Edge>(v106, 155, (uint64_t)v210, v105, v112, v112, v114 | v13 & 0xFF00FFFFFFFFFFFFLL, v111);
            JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v210, v115, v116, v117, v118, v119, v120, v121);
            v89 = v103;
            goto LABEL_86;
          }
          __break(0xC471u);
LABEL_124:
          JUMPOUT(0x1984EC6ECLL);
        }
        v202 = a1[4];
        v204 = v89;
        v146 = WTF::fastMalloc((WTF *)0xA0);
        v147 = 0;
        *(_OWORD *)v146 = 0u;
        *(_OWORD *)(v146 + 16) = 0u;
        *(_OWORD *)(v146 + 32) = 0u;
        *(_OWORD *)(v146 + 48) = 0u;
        *(_OWORD *)(v146 + 64) = 0u;
        *(_OWORD *)(v146 + 80) = 0u;
        *(_OWORD *)(v146 + 96) = 0u;
        *(_OWORD *)(v146 + 112) = 0u;
        *(_OWORD *)(v146 + 128) = 0u;
        *(_QWORD *)(v146 + 144) = 0;
        *(_QWORD *)(v146 + 152) = 0;
        *(_QWORD *)(v146 + 8) = v146 + 24;
        v201 = v146 + 8;
        *(_DWORD *)(v146 + 16) = 2;
        *(_QWORD *)(v146 + 152) = *((_QWORD *)v202 + 68);
        *((_QWORD *)v202 + 68) = v146;
        *(_DWORD *)v146 = v27;
        v219[0] = 0;
        v203 = 8 * v88;
        do
        {
          v148 = v204[v147 / 8];
          LODWORD(v209[0]) = 0;
          v149 = JSC::Structure::getConcurrently(v148, v59, v209, v141, v142, v143, v144, v145);
          if (v149 == Concurrently)
          {
            v150 = v219[0];
          }
          else
          {
            v152 = v149;
            JSC::PutByVariant::replace(0, v219, Concurrently, (uint64_t)v209);
            v159 = *(unsigned int *)(v146 + 20);
            if ((_DWORD)v159 == *(_DWORD *)(v146 + 16))
            {
              WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PutByVariant>(v201, (unint64_t)v209);
            }
            else
            {
              JSC::PutByVariant::PutByVariant((JSC::PutByVariant *)(*(_QWORD *)(v146 + 8) + (v159 << 6)), (const JSC::PutByVariant *)v209, v153, v154, v155, v156, v157, v158);
              ++*(_DWORD *)(v146 + 20);
            }
            JSC::PutByVariant::~PutByVariant((JSC::PutByVariant *)v209, v160, v161, v162, v163, v164, v165, v166);
            v169 = v219[0];
            if ((v219[0] & 1) != 0)
            {
              WTF::fastFree(v219[0] & 0xFFFFFFFFFFFFFFFCLL, v167, v168, v141, v142, v143, v144, v145);
              v169 = v219[0];
            }
            v150 = v169 & 2;
            v219[0] = v150;
            Concurrently = v152;
          }
          if ((v150 & 1) != 0)
          {
            WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(v219, v148);
          }
          else if ((v150 & 0xFFFFFFFFFFFFFFFCLL) != v148)
          {
            if ((v150 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              v170 = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)v170 = 0x400000002;
              v171 = v219[0];
              *(_QWORD *)(v170 + 8) = v219[0] & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(v170 + 16) = v148;
              v151 = v171 & 2 | (unint64_t)v170 | 1;
            }
            else
            {
              v151 = v150 & 2 | v148;
            }
            v219[0] = v151;
          }
          v147 += 8;
        }
        while (v203 != v147);
        JSC::PutByVariant::replace(0, v219, Concurrently, (uint64_t)v209);
        v178 = *(unsigned int *)(v146 + 20);
        if ((_DWORD)v178 == *(_DWORD *)(v146 + 16))
        {
          WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PutByVariant>(v201, (unint64_t)v209);
        }
        else
        {
          JSC::PutByVariant::PutByVariant((JSC::PutByVariant *)(*(_QWORD *)(v146 + 8) + (v178 << 6)), (const JSC::PutByVariant *)v209, v172, v173, v174, v175, v176, v177);
          ++*(_DWORD *)(v146 + 20);
        }
        v89 = v204;
        JSC::PutByVariant::~PutByVariant((JSC::PutByVariant *)v209, v179, v180, v181, v182, v183, v184, v185);
        if ((v219[0] & 1) != 0)
          WTF::fastFree(v219[0] & 0xFFFFFFFFFFFFFFFCLL, v186, v187, v188, v189, v190, v191, v192);
        v193 = a1[4];
        v194 = v216;
        v195 = *a6;
        *a6 = 0;
        if (v194)
          v196 = v195 == 0;
        else
          v196 = 1;
        v197 = !v196;
        v127 = (JSC::DFG::NodeOrigin *)v208;
        JSC::DFG::NodeOrigin::withExitOK((uint64_t)&v215.i64[1], v197, (uint64_t)v208);
        v198 = (unint64_t)Materialization & 0xFF00FFFFFFFFFFFFLL | 0x24000000000000;
        v199 = 0xC4000000000000;
        if ((*(_DWORD *)(v13 + 56) & 7) != 3)
          v199 = 0;
        v200 = 0xD0000000000000;
        if ((*(_DWORD *)(v13 + 56) & 7) != 5)
          v200 = v199;
        v209[0] = v146;
        v218 = v200 | v13 & 0xFF00FFFFFFFFFFFFLL;
        v219[0] = v198;
        v217 = 156;
        v133 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &,JSC::DFG::OpInfo &,JSC::DFG::Edge &,JSC::DFG::Edge &>((uint64_t)v193 + 1032, &v217, (uint64_t)v208, v209, v219, (uint64_t *)&v218);
LABEL_85:
        Hint = v133;
        JSC::DFG::NodeOrigin::~NodeOrigin(v127, v134, v135, v136, v137, v138, v139, v140);
        if (!v89)
          goto LABEL_16;
LABEL_86:
        v212 = 0;
        LODWORD(v213) = 0;
        WTF::fastFree((unint64_t)v89, v45, v46, v47, v48, v49, v50, v51);
        goto LABEL_16;
      }
    }
    else
    {
      v89 = 0;
    }
    v122 = a1[4];
    v123 = v216;
    v124 = *a6;
    *a6 = 0;
    if (v123)
      v125 = v124 == 0;
    else
      v125 = 1;
    v126 = !v125;
    v127 = (JSC::DFG::NodeOrigin *)v211;
    JSC::DFG::NodeOrigin::withExitOK((uint64_t)&v215.i64[1], v126, (uint64_t)v211);
    LOWORD(v209[0]) = 379;
    v133 = JSC::B3::SparseCollection<JSC::DFG::Node>::addNew<JSC::DFG::NodeType &,JSC::DFG::NodeOrigin &>((uint64_t)v122 + 1032, (__int16 *)v209, (uint64_t)v211, v128, v129, v130, v131, v132);
    goto LABEL_85;
  }
  v209[0] = (uint64_t)Materialization;
  v209[1] = a4;
  v67 = (uint64_t)a1[4];
  v68 = v216;
  v69 = *a6;
  *a6 = 0;
  if (v68)
    v70 = v69 == 0;
  else
    v70 = 1;
  v71 = !v70;
  JSC::DFG::NodeOrigin::withExitOK((uint64_t)&v215.i64[1], v71, (uint64_t)v214);
  Hint = JSC::DFG::PromotedHeapLocation::createHint(v209, v67, (uint64_t)v214, v13);
  v44 = (JSC::DFG::NodeOrigin *)v214;
LABEL_15:
  JSC::DFG::NodeOrigin::~NodeOrigin(v44, v36, v37, v38, v39, v40, v41, v42);
LABEL_16:
  JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&v215.u64[1], v45, v46, v47, v48, v49, v50, v51);
  return Hint;
}

void JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::handleNode<JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::promoteLocalHeap(void)::{lambda(JSC::DFG::PromotedHeapLocation,JSC::DFG::LazyNode)#3},JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::promoteLocalHeap(void)::{lambda(JSC::DFG::PromotedHeapLocation)#3}>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Node *v9;
  JSC::DFG::_anonymous_namespace_::LocalHeap *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  unsigned int v41;
  unint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  JSC::DFG::Node *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int i;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t *v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  JSC::DFG::Node *v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  int v87;
  int v88;
  BOOL v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t Hint;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  unsigned int v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  JSC::DFG::Node *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  JSC::DFG::Node *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  int v175;
  unsigned int v176;
  int v177;
  int v178;
  int v180;
  uint64_t v181;
  int v182;
  uint64_t *v183;
  int v184;
  int v185;
  unsigned int v186;
  int v187;
  int v188;
  int v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t *v202;
  uint64_t *v203;
  int v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unsigned int v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  unsigned int v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  unsigned int v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  unsigned int v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  __int128 *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t *v294;
  unsigned int v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  __int128 *v321;
  JSC::DFG::Node *v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  int *v326;
  int v327;
  int v328;
  BOOL v329;
  int v330;
  int *v331;
  uint64_t v333;
  uint64_t v334;
  unsigned int v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  int v343;
  JSC::DFG::Node *v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  __int128 *v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t *v369;
  uint64_t v370;
  void *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  JSC::DFG::Node *v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  int v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t *v397;
  uint64_t v398;
  uint64_t v399;
  unsigned int v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t *v418;
  uint64_t *v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unsigned int v424;
  unint64_t v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  int v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  JSC::DFG::Node *v449;
  uint64_t *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  int v472;
  uint64_t *v473;
  unsigned int v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  uint64_t v481;
  BOOL v482;
  uint64_t v483;
  uint64_t v484;
  BOOL v485;
  uint64_t v486;
  unsigned int v487;
  unint64_t v488;
  unint64_t v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  int v493;
  uint64_t *v494;
  unsigned int *v495;
  uint64_t v496;
  uint64_t *v497;
  uint64_t v498;
  int v499;
  uint64_t v501;
  unint64_t v502;
  uint64_t v503;
  uint64_t v504;
  char v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  JSC::DFG::Node *v514;
  int isSubsetOf;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  JSC::DFG::Node *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t *v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  int v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unsigned int *v540;
  uint64_t v541;
  uint64_t v542;
  char v543;
  _QWORD *v544;
  __int128 v545;
  char v546;
  char v547;
  uint64_t v548;
  uint64_t v549[2];
  __int128 v550;

  v9 = (JSC::DFG::Node *)a2;
  v10 = (JSC::DFG::_anonymous_namespace_::LocalHeap *)(a1 + 504);
  v544 = 0;
  v11 = *(unsigned __int16 *)(a2 + 18);
  if (v11 > 0x85)
  {
    if (*(unsigned __int16 *)(a2 + 18) > 0x158u)
    {
      if (v11 - 420 < 7)
        return;
      if (v11 - 359 >= 4)
      {
        if (v11 == 345)
        {
          *(_QWORD *)&v550 = **(_QWORD **)(a2 + 72);
          v19 = *(_QWORD *)(v550 + 40);
          v20 = a3;
          if ((v19 & 1) != 0)
            v21 = (v19 >> 1) & 3;
          else
            v21 = *(unsigned __int8 *)(v19 + 4);
          v22 = a1;
          LOBYTE(v549[0]) = v21 != 2;
          WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(&v545, (uint64_t *)(a1 + 424), (uint64_t *)&v550, v549, a5, a6, a7, a8);
          if (*(_BYTE *)(v545 + 8))
          {
            v14 = 0;
            a1 = v22;
            a3 = v20;
            goto LABEL_8;
          }
          v549[0] = 2;
          v30 = *((_QWORD *)v9 + 9);
          *(_QWORD *)&v550 = 0;
          *((_QWORD *)&v550 + 1) = v30;
          WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v545, (uint64_t *)&v544, v549, &v550);
          v549[0] = 1;
          v31 = *((_QWORD *)v9 + 3);
          v32 = v31 & 0xFF00FFFFFFFFFFFFLL;
          *(_QWORD *)&v550 = v31 & 0xFF00FFFFFFFFFFFFLL;
          *((_QWORD *)&v550 + 1) = 0;
          if ((v31 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v421 = *(unsigned __int16 *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v421 <= 2)
            {
              v422 = *(_QWORD *)(v32 + 72);
              *((_QWORD *)&v550 + 1) = v422;
              if ((_DWORD)v421)
              {
                if ((_DWORD)v421 != 1)
                  v421 = 2;
                *((_QWORD *)&v550 + 1) = v421 | v422;
              }
            }
          }
          WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v545, (uint64_t *)&v544, v549, &v550);
          v33 = **((_QWORD **)v9 + 9);
          v40 = JSC::DFG::Graph::freeze(*(_QWORD *)(v22 + 32), **((_QWORD **)v9 + 10), v34, v35, v36, v37, v38, v39);
          *(_QWORD *)&v550 = 0;
          *((_QWORD *)&v550 + 1) = v40;
          if (*(_DWORD *)(v33 + 16) != -1)
          {
            v41 = 0;
            do
            {
              LODWORD(v549[0]) = 6;
              HIDWORD(v549[0]) = v41;
              WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode&>((uint64_t)&v545, (uint64_t *)&v544, v549, &v550);
              ++v41;
            }
            while (v41 < *(_DWORD *)(v33 + 16) + 1);
          }
          a3 = v20;
          a1 = v22;
          goto LABEL_29;
        }
LABEL_5:
        if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
        {
          v207 = *(_QWORD *)(a2 + 24);
          v208 = *(_QWORD *)(a2 + 32);
          if ((int)v208 + (int)v207 > v207)
          {
            v209 = *(_QWORD *)(a1 + 32);
            v210 = *(_QWORD *)(a2 + 24);
            do
            {
              if (v210 >= *(unsigned int *)(v209 + 164))
              {
                __break(0xC471u);
                JUMPOUT(0x1984EF204);
              }
              v211 = *(_QWORD *)(*(_QWORD *)(v209 + 152) + 8 * v210);
              v212 = v211 & 0xFF00FFFFFFFFFFFFLL;
              if ((v211 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v213 = *(_QWORD *)(a1 + 512);
                if (v213)
                {
                  v214 = *(_DWORD *)(v213 - 8);
                  v215 = (v212 + ~(v211 << 32)) ^ ((v212 + ~(v211 << 32)) >> 22);
                  v216 = 9 * ((v215 + ~(v215 << 13)) ^ ((v215 + ~(v215 << 13)) >> 8));
                  v217 = (v216 ^ (v216 >> 15)) + ~((v216 ^ (v216 >> 15)) << 27);
                  v218 = v214 & ((v217 >> 31) ^ v217);
                  v219 = *(_QWORD *)(v213 + 16 * v218);
                  if (v219 != v212)
                  {
                    v220 = 1;
                    while (v219)
                    {
                      v218 = ((_DWORD)v218 + v220) & v214;
                      v219 = *(_QWORD *)(v213 + 16 * v218);
                      ++v220;
                      if (v219 == v212)
                        goto LABEL_189;
                    }
                    v218 = *(unsigned int *)(v213 - 4);
                  }
LABEL_189:
                  if (v218 != *(_DWORD *)(v213 - 4))
                  {
                    a2 = *(_QWORD *)(v213 + 16 * v218 + 8);
                    if (a2)
                    {
                      v221 = a1;
                      v222 = a3;
                      a3 = v222;
                      a1 = v221;
                      v207 = *((_QWORD *)v9 + 3);
                      v208 = *((_QWORD *)v9 + 4);
                    }
                  }
                }
              }
              v14 = 0;
              ++v210;
            }
            while (v210 < (v207 + v208));
            goto LABEL_8;
          }
        }
        else
        {
          v12 = *(_QWORD *)(a2 + 24);
          v13 = v12 & 0xFF00FFFFFFFFFFFFLL;
          if ((v12 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v119 = *(_QWORD *)(a1 + 512);
            if (v119)
            {
              v165 = *(_DWORD *)(v119 - 8);
              v166 = (v13 + ~(v12 << 32)) ^ ((v13 + ~(v12 << 32)) >> 22);
              v167 = 9 * ((v166 + ~(v166 << 13)) ^ ((v166 + ~(v166 << 13)) >> 8));
              v168 = (v167 ^ (v167 >> 15)) + ~((v167 ^ (v167 >> 15)) << 27);
              v169 = v165 & ((v168 >> 31) ^ v168);
              v170 = *(_QWORD *)(v119 + 16 * v169);
              if (v170 != v13)
              {
                v171 = 1;
                while (v170)
                {
                  v169 = ((_DWORD)v169 + v171) & v165;
                  v170 = *(_QWORD *)(v119 + 16 * v169);
                  ++v171;
                  if (v170 == v13)
                    goto LABEL_136;
                }
                v169 = *(unsigned int *)(v119 - 4);
              }
LABEL_136:
              if (v169 != *(_DWORD *)(v119 - 4))
              {
                a2 = *(_QWORD *)(v119 + 16 * v169 + 8);
                if (a2)
                {
                  v172 = a1;
                  v173 = a3;
                  a3 = v173;
                  a1 = v172;
                }
              }
            }
            v120 = *((_QWORD *)v9 + 4);
            v121 = v120 & 0xFF00FFFFFFFFFFFFLL;
            if ((v120 & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v122 = *(_QWORD *)(a1 + 512);
              if (v122)
              {
                v246 = *(_DWORD *)(v122 - 8);
                v247 = (v121 + ~(v120 << 32)) ^ ((v121 + ~(v120 << 32)) >> 22);
                v248 = 9 * ((v247 + ~(v247 << 13)) ^ ((v247 + ~(v247 << 13)) >> 8));
                v249 = (v248 ^ (v248 >> 15)) + ~((v248 ^ (v248 >> 15)) << 27);
                v250 = v246 & ((v249 >> 31) ^ v249);
                v251 = *(_QWORD *)(v122 + 16 * v250);
                if (v251 != v121)
                {
                  v252 = 1;
                  while (v251)
                  {
                    v250 = ((_DWORD)v250 + v252) & v246;
                    v251 = *(_QWORD *)(v122 + 16 * v250);
                    ++v252;
                    if (v251 == v121)
                      goto LABEL_220;
                  }
                  v250 = *(unsigned int *)(v122 - 4);
                }
LABEL_220:
                if (v250 != *(_DWORD *)(v122 - 4))
                {
                  a2 = *(_QWORD *)(v122 + 16 * v250 + 8);
                  if (a2)
                  {
                    v253 = a1;
                    v254 = a3;
                    a3 = v254;
                    a1 = v253;
                  }
                }
              }
              v123 = *((_QWORD *)v9 + 5);
              v124 = v123 & 0xFF00FFFFFFFFFFFFLL;
              if ((v123 & 0xFF00FFFFFFFFFFFFLL) != 0)
              {
                v125 = *(_QWORD *)(a1 + 512);
                if (v125)
                {
                  v126 = *(_DWORD *)(v125 - 8);
                  v127 = (v124 + ~(v123 << 32)) ^ ((v124 + ~(v123 << 32)) >> 22);
                  v128 = 9 * ((v127 + ~(v127 << 13)) ^ ((v127 + ~(v127 << 13)) >> 8));
                  v129 = (v128 ^ (v128 >> 15)) + ~((v128 ^ (v128 >> 15)) << 27);
                  v130 = v126 & ((v129 >> 31) ^ v129);
                  v131 = *(_QWORD *)(v125 + 16 * v130);
                  if (v131 != v124)
                  {
                    v132 = 1;
                    while (v131)
                    {
                      v130 = ((_DWORD)v130 + v132) & v126;
                      v131 = *(_QWORD *)(v125 + 16 * v130);
                      ++v132;
                      if (v131 == v124)
                        goto LABEL_375;
                    }
                    v130 = *(unsigned int *)(v125 - 4);
                  }
LABEL_375:
                  if (v130 != *(_DWORD *)(v125 - 4))
                  {
                    a2 = *(_QWORD *)(v125 + 16 * v130 + 8);
                    if (a2)
                    {
                      v407 = a1;
                      v408 = a3;
                      a3 = v408;
                      a1 = v407;
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_7;
      }
      *(_QWORD *)&v550 = **(_QWORD **)(a2 + 72);
      v334 = *(_QWORD *)(v550 + 112);
      v103 = a3;
      if ((v334 & 1) != 0)
        v335 = (v334 >> 1) & 3;
      else
        v335 = *(unsigned __int8 *)(v334 + 4);
      v181 = a1;
      LOBYTE(v549[0]) = v335 != 2;
      WTF::HashMap<JSC::JSCell *,BOOL,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::add<BOOL>(&v545, (uint64_t *)(a1 + 424), (uint64_t *)&v550, v549, a5, a6, a7, a8);
      if (!*(_BYTE *)(v545 + 8))
      {
        v342 = *((unsigned __int16 *)v9 + 9) - 360;
        if (v342 > 2)
          v343 = 3;
        else
          v343 = dword_1991563D8[(__int16)v342];
        v549[0] = 9;
        v410 = *((_QWORD *)v9 + 9);
        *(_QWORD *)&v550 = 0;
        *((_QWORD *)&v550 + 1) = v410;
        WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v545, (uint64_t *)&v544, v549, &v550);
        v549[0] = 8;
        v411 = *((_QWORD *)v9 + 3);
        v412 = v411 & 0xFF00FFFFFFFFFFFFLL;
        *(_QWORD *)&v550 = v411 & 0xFF00FFFFFFFFFFFFLL;
        *((_QWORD *)&v550 + 1) = 0;
        if ((v411 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v355 = *(unsigned __int16 *)((v411 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
          if (v355 <= 2)
          {
            v356 = *(_QWORD *)(v412 + 72);
            *((_QWORD *)&v550 + 1) = v356;
            if ((_DWORD)v355)
            {
              if ((_DWORD)v355 == 1)
                goto LABEL_388;
              goto LABEL_581;
            }
          }
        }
        goto LABEL_280;
      }
      v14 = 0;
      goto LABEL_421;
    }
    if (*(unsigned __int16 *)(a2 + 18) <= 0xAAu)
    {
      switch(*(_WORD *)(a2 + 18))
      {
        case 0x98:
        case 0x99:
          v103 = a3;
          v104 = a1;
          v105 = *(_QWORD *)(a2 + 32);
          v106 = v105 & 0xFF00FFFFFFFFFFFFLL;
          v14 = v107;
          if (v107 && *((_DWORD *)v107 + 2) == 1)
          {
            v163 = *(unsigned int *)(*((_QWORD *)v9 + 9) + 4);
            v164 = 11;
            goto LABEL_285;
          }
          a1 = v104;
          v108 = *(_QWORD *)(v104 + 512);
          if (!v108)
            goto LABEL_175;
          v109 = v14;
          v110 = *((_QWORD *)v9 + 3);
          v111 = v110 & 0xFF00FFFFFFFFFFFFLL;
          v112 = *(_DWORD *)(v108 - 8);
          v113 = ((v110 & 0xFF00FFFFFFFFFFFFLL) + ~(v110 << 32)) ^ (((v110 & 0xFF00FFFFFFFFFFFFLL) + ~(v110 << 32)) >> 22);
          v114 = 9 * ((v113 + ~(v113 << 13)) ^ ((v113 + ~(v113 << 13)) >> 8));
          v115 = (v114 ^ (v114 >> 15)) + ~((v114 ^ (v114 >> 15)) << 27);
          v116 = v112 & ((v115 >> 31) ^ v115);
          v117 = *(_QWORD *)(v108 + 16 * v116);
          a3 = v103;
          if (v117 == v111)
            goto LABEL_235;
          v118 = 1;
          while (v117)
          {
            v116 = ((_DWORD)v116 + v118) & v112;
            v117 = *(_QWORD *)(v108 + 16 * v116);
            ++v118;
            if (v117 == v111)
              goto LABEL_235;
          }
          v116 = *(unsigned int *)(v108 - 4);
LABEL_235:
          if (v116 == *(_DWORD *)(v108 - 4))
          {
            v14 = v109;
          }
          else
          {
            a2 = *(_QWORD *)(v108 + 16 * v116 + 8);
            v14 = v109;
            if (a2)
            {
              a1 = v104;
              v108 = *(_QWORD *)(v104 + 512);
              if (!v108)
                goto LABEL_282;
              v105 = *((_QWORD *)v9 + 4);
              v106 = v105 & 0xFF00FFFFFFFFFFFFLL;
              v112 = *(_DWORD *)(v108 - 8);
              v14 = v109;
              a3 = v103;
            }
          }
          v273 = (v106 + ~(v105 << 32)) ^ ((v106 + ~(v105 << 32)) >> 22);
          v274 = 9 * ((v273 + ~(v273 << 13)) ^ ((v273 + ~(v273 << 13)) >> 8));
          v275 = (v274 ^ (v274 >> 15)) + ~((v274 ^ (v274 >> 15)) << 27);
          v276 = v112 & ((v275 >> 31) ^ v275);
          v277 = *(_QWORD *)(v108 + 16 * v276);
          if (v277 != v106)
          {
            v278 = 1;
            while (v277)
            {
              v276 = ((_DWORD)v276 + v278) & v112;
              v277 = *(_QWORD *)(v108 + 16 * v276);
              ++v278;
              if (v277 == v106)
                goto LABEL_243;
            }
            v276 = *(unsigned int *)(v108 - 4);
          }
LABEL_243:
          if (v276 != *(_DWORD *)(v108 - 4))
          {
            a2 = *(_QWORD *)(v108 + 16 * v276 + 8);
            if (a2)
            {
              a3 = v103;
              v14 = v109;
              goto LABEL_343;
            }
          }
          goto LABEL_8;
        case 0x9A:
          v394 = a1;
          v193 = a3;
          v395 = *(_QWORD *)(a2 + 24);
          v396 = v395 & 0xFF00FFFFFFFFFFFFLL;
          if (v397)
          {
            v494 = v397;
            if (*((_DWORD *)v397 + 2) == 1)
            {
              v495 = (unsigned int *)*((_QWORD *)v9 + 9);
              v548 = 0;
              v540 = v495;
              v496 = v495[5];
              if (!(_DWORD)v496)
                goto LABEL_566;
              v543 = 0;
              v497 = (uint64_t *)*((_QWORD *)v540 + 1);
              v498 = 32 * v496;
              do
              {
                if (WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::overlaps(v494 + 3, v497))
                {
                  v499 = *((_DWORD *)v497 + 6);
                  if (v499 == 1 || v499 == 3)
                  {
                    v543 = 1;
                  }
                  else
                  {
                    if (v499 != 2)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1984EF264);
                    }
                    v501 = *v497;
                    if ((*v497 & 1) != 0)
                    {
                      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine(&v548, v497);
                    }
                    else
                    {
                      v502 = v501 & 0xFFFFFFFFFFFFFFFCLL;
                      if ((v501 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                      {
                        if ((v548 & 1) != 0)
                        {
                          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(&v548, v502);
                        }
                        else if ((v548 & 0xFFFFFFFFFFFFFFFCLL) != v502)
                        {
                          if ((v548 & 0xFFFFFFFFFFFFFFFCLL) != 0)
                          {
                            v504 = WTF::fastMalloc((WTF *)0x28);
                            *(_QWORD *)v504 = 0x400000002;
                            v505 = v548;
                            *(_QWORD *)(v504 + 8) = v548 & 0xFFFFFFFFFFFFFFFCLL;
                            *(_QWORD *)(v504 + 16) = v502;
                            v503 = v505 & 2 | (unint64_t)v504 | 1;
                          }
                          else
                          {
                            v503 = v548 & 2 | v502;
                          }
                          v548 = v503;
                        }
                      }
                    }
                  }
                }
                v497 += 4;
                v498 -= 32;
              }
              while (v498);
              if ((v543 & 1) == 0 && (v548 & 0xFFFFFFFFFFFFFFFDLL) != 0)
              {
                v513 = ((unint64_t)*v540 << 32) | 0xB;
                isSubsetOf = WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::isSubsetOf(v494 + 3, &v548);
                if (v514)
                {
                  if (isSubsetOf)
                  {
                    JSC::DFG::Node::replaceWithWithoutChecks((uint64_t)v9, v514);
                  }
                  else
                  {
                    v529 = JSC::DFG::Graph::addStructureSet(*(_QWORD *)(v394 + 32), (unint64_t *)v494 + 3);
                    *((_DWORD *)v9 + 14) = 8;
                    *((_QWORD *)v9 + 9) = v529;
                    *((_WORD *)v9 + 9) = 280;
                    *((_QWORD *)v9 + 3) = (unint64_t)v522 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
                    *((_QWORD *)v9 + 11) = v514;
                  }
                }
                else if ((isSubsetOf & 1) == 0)
                {
                }
                if (v530)
                {
                  *(_QWORD *)&v550 = v9;
                  v549[0] = v530;
                  WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>((uint64_t *)(v394 + 512), (uint64_t *)&v550, v549, a4, a5, a6, a7, a8, (uint64_t)&v545);
                }
              }
              else
              {
LABEL_566:
              }
              if ((v548 & 1) != 0)
                WTF::fastFree(v548 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, v512, a4, a5, a6, a7, a8);
              goto LABEL_437;
            }
          }
          a1 = v394;
          v399 = *(_QWORD *)(v394 + 512);
          if (!v399)
            goto LABEL_169;
          v400 = *(_DWORD *)(v399 - 8);
          v401 = (v396 + ~(v395 << 32)) ^ ((v396 + ~(v395 << 32)) >> 22);
          v402 = 9 * ((v401 + ~(v401 << 13)) ^ ((v401 + ~(v401 << 13)) >> 8));
          v403 = (v402 ^ (v402 >> 15)) + ~((v402 ^ (v402 >> 15)) << 27);
          v404 = v400 & ((v403 >> 31) ^ v403);
          v405 = *(_QWORD *)(v399 + 16 * v404);
          a3 = v193;
          if (v405 == v396)
            goto LABEL_434;
          v406 = 1;
          while (v405)
          {
            v404 = ((_DWORD)v404 + v406) & v400;
            v405 = *(_QWORD *)(v399 + 16 * v404);
            ++v406;
            if (v405 == v396)
              goto LABEL_434;
          }
          v404 = *(unsigned int *)(v399 - 4);
LABEL_434:
          if (v404 == *(_DWORD *)(v399 - 4))
            goto LABEL_7;
          a2 = *(_QWORD *)(v399 + 16 * v404 + 8);
          if (a2)
LABEL_437:
          v14 = 0;
          a3 = v193;
          a1 = v394;
          goto LABEL_8;
        case 0x9B:
          v103 = a3;
          v199 = a1;
          v200 = *(_QWORD *)(a2 + 32);
          v201 = v200 & 0xFF00FFFFFFFFFFFFLL;
          v14 = v202;
          if (v202 && *((_DWORD *)v202 + 2) == 1)
          {
            v203 = v202;
            v204 = *(_DWORD *)(*((_QWORD *)v9 + 9) + 4);
            LODWORD(v549[0]) = 11;
            HIDWORD(v549[0]) = v204;
            v205 = *((_QWORD *)v9 + 5);
            v206 = v205 & 0xFF00FFFFFFFFFFFFLL;
            *(_QWORD *)&v550 = v205 & 0xFF00FFFFFFFFFFFFLL;
            *((_QWORD *)&v550 + 1) = 0;
            if ((v205 & 0xFF00FFFFFFFFFFFFLL) == 0
              || (v302 = *(unsigned __int16 *)((v205 & 0xFF00FFFFFFFFFFFFLL) + 0x12), v302 > 2)
              || (v303 = *(_QWORD *)(v206 + 72), *((_QWORD *)&v550 + 1) = v303, !(_DWORD)v302))
            {
LABEL_173:
              WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v545, (uint64_t *)&v544, v549, &v550);
              a1 = v199;
LABEL_174:
              v14 = v203;
              goto LABEL_175;
            }
            if ((_DWORD)v302 != 1)
              goto LABEL_580;
LABEL_266:
            *((_QWORD *)&v550 + 1) = v302 | v303;
            goto LABEL_173;
          }
          a1 = v199;
          v255 = *(_QWORD *)(v199 + 512);
          if (!v255)
            goto LABEL_175;
          v256 = v14;
          v257 = *((_QWORD *)v9 + 3);
          v258 = v257 & 0xFF00FFFFFFFFFFFFLL;
          v259 = *(_DWORD *)(v255 - 8);
          v260 = ((v257 & 0xFF00FFFFFFFFFFFFLL) + ~(v257 << 32)) ^ (((v257 & 0xFF00FFFFFFFFFFFFLL) + ~(v257 << 32)) >> 22);
          v261 = 9 * ((v260 + ~(v260 << 13)) ^ ((v260 + ~(v260 << 13)) >> 8));
          v262 = (v261 ^ (v261 >> 15)) + ~((v261 ^ (v261 >> 15)) << 27);
          v263 = v259 & ((v262 >> 31) ^ v262);
          v264 = *(_QWORD *)(v255 + 16 * v263);
          a3 = v103;
          if (v264 != v258)
          {
            v265 = 1;
            while (v264)
            {
              v263 = ((_DWORD)v263 + v265) & v259;
              v264 = *(_QWORD *)(v255 + 16 * v263);
              ++v265;
              if (v264 == v258)
                goto LABEL_345;
            }
            v263 = *(unsigned int *)(v255 - 4);
          }
LABEL_345:
          if (v263 == *(_DWORD *)(v255 - 4))
            goto LABEL_346;
          a2 = *(_QWORD *)(v255 + 16 * v263 + 8);
          if (!a2)
            goto LABEL_346;
          a1 = v199;
          v255 = *(_QWORD *)(v199 + 512);
          if (!v255)
            goto LABEL_585;
          v200 = *((_QWORD *)v9 + 4);
          v201 = v200 & 0xFF00FFFFFFFFFFFFLL;
          v259 = *(_DWORD *)(v255 - 8);
          a3 = v103;
LABEL_346:
          v379 = (v201 + ~(v200 << 32)) ^ ((v201 + ~(v200 << 32)) >> 22);
          v380 = 9 * ((v379 + ~(v379 << 13)) ^ ((v379 + ~(v379 << 13)) >> 8));
          v381 = (v380 ^ (v380 >> 15)) + ~((v380 ^ (v380 >> 15)) << 27);
          v382 = v259 & ((v381 >> 31) ^ v381);
          v383 = *(_QWORD *)(v255 + 16 * v382);
          if (v383 != v201)
          {
            v384 = 1;
            while (v383)
            {
              v382 = ((_DWORD)v382 + v384) & v259;
              v383 = *(_QWORD *)(v255 + 16 * v382);
              ++v384;
              if (v383 == v201)
                goto LABEL_352;
            }
            v382 = *(unsigned int *)(v255 - 4);
          }
LABEL_352:
          if (v382 != *(_DWORD *)(v255 - 4))
          {
            a2 = *(_QWORD *)(v255 + 16 * v382 + 8);
            if (a2)
            {
              a1 = v199;
              v255 = *(_QWORD *)(v199 + 512);
              if (!v255)
              {
LABEL_585:
                v14 = v256;
                goto LABEL_175;
              }
              v259 = *(_DWORD *)(v255 - 8);
              a3 = v103;
            }
          }
          v385 = *((_QWORD *)v9 + 5);
          v386 = v385 & 0xFF00FFFFFFFFFFFFLL;
          v387 = ((v385 & 0xFF00FFFFFFFFFFFFLL) + ~(v385 << 32)) ^ (((v385 & 0xFF00FFFFFFFFFFFFLL) + ~(v385 << 32)) >> 22);
          v388 = 9 * ((v387 + ~(v387 << 13)) ^ ((v387 + ~(v387 << 13)) >> 8));
          v389 = (v388 ^ (v388 >> 15)) + ~((v388 ^ (v388 >> 15)) << 27);
          v390 = v259 & ((v389 >> 31) ^ v389);
          v391 = *(_QWORD *)(v255 + 16 * v390);
          if (v391 != v386)
          {
            v392 = 1;
            while (v391)
            {
              v390 = ((_DWORD)v390 + v392) & v259;
              v391 = *(_QWORD *)(v255 + 16 * v390);
              ++v392;
              if (v391 == v386)
                goto LABEL_359;
            }
            v390 = *(unsigned int *)(v255 - 4);
          }
LABEL_359:
          if (v390 != *(_DWORD *)(v255 - 4))
          {
            a2 = *(_QWORD *)(v255 + 16 * v390 + 8);
            if (a2)
            {
              a3 = v103;
              a1 = v199;
            }
          }
          v14 = v256;
          goto LABEL_8;
        case 0x9C:
        case 0x9D:
        case 0x9E:
        case 0x9F:
        case 0xA0:
        case 0xA1:
        case 0xA2:
        case 0xA3:
        case 0xA4:
          goto LABEL_5;
        case 0xA5:
          v103 = a3;
          v104 = a1;
          v292 = *(_QWORD *)(a2 + 24);
          v293 = v292 & 0xFF00FFFFFFFFFFFFLL;
          v14 = v294;
          if (v294 && (*((_DWORD *)v294 + 2) - 3) < 3)
          {
            v163 = 0;
            v164 = 8;
            goto LABEL_285;
          }
          a1 = v104;
          v136 = *(_QWORD *)(v104 + 512);
          if (!v136)
            goto LABEL_175;
          v295 = *(_DWORD *)(v136 - 8);
          v296 = (v293 + ~(v292 << 32)) ^ ((v293 + ~(v292 << 32)) >> 22);
          v297 = 9 * ((v296 + ~(v296 << 13)) ^ ((v296 + ~(v296 << 13)) >> 8));
          v298 = (v297 ^ (v297 >> 15)) + ~((v297 ^ (v297 >> 15)) << 27);
          v141 = v295 & ((v298 >> 31) ^ v298);
          v299 = *(_QWORD *)(v136 + 16 * v141);
          a3 = v103;
          if (v299 != v293)
          {
            v300 = 1;
            do
            {
              if (!v299)
                goto LABEL_259;
              v141 = ((_DWORD)v141 + v300) & v295;
              v299 = *(_QWORD *)(v136 + 16 * v141);
              ++v300;
            }
            while (v299 != v293);
          }
          goto LABEL_260;
        case 0xA6:
          v103 = a3;
          v104 = a1;
          v155 = (JSC::DFG::Node *)(*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL);
          v14 = v419;
          if (!v419 || *((_DWORD *)v419 + 2) != 2)
            goto LABEL_401;
          v163 = 0;
          v164 = 1;
          goto LABEL_285;
        default:
          if (v11 == 135)
          {
            v103 = a3;
            v199 = a1;
            v279 = *(_QWORD *)(a2 + 24);
            v280 = v279 & 0xFF00FFFFFFFFFFFFLL;
            v14 = v281;
            if (v281 && *((_DWORD *)v281 + 2) == 1)
            {
              v549[0] = 13;
              v283 = (uint64_t)v281;
              v284 = JSC::DFG::Graph::freeze(*(_QWORD *)(v199 + 32), *(_QWORD *)(*((_QWORD *)v9 + 9) + 8), v282, a4, a5, a6, a7, a8);
              *(_QWORD *)&v550 = 0;
              *((_QWORD *)&v550 + 1) = v284;
              WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v545, (uint64_t *)&v544, v549, &v550);
              *(_QWORD *)&v545 = *(_QWORD *)(*((_QWORD *)v9 + 9) + 8);
              v29 = (uint64_t *)v283;
              if ((v545 & 1) != 0)
                WTF::fastFree(v545 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, v291, a4, a5, a6, a7, a8);
              a1 = v199;
              goto LABEL_251;
            }
            v448 = *(_QWORD *)(v199 + 512);
            a3 = v103;
            if (!v448)
              goto LABEL_439;
            v473 = v281;
            v474 = *(_DWORD *)(v448 - 8);
            v475 = (v280 + ~(v279 << 32)) ^ ((v280 + ~(v279 << 32)) >> 22);
            v476 = 9 * ((v475 + ~(v475 << 13)) ^ ((v475 + ~(v475 << 13)) >> 8));
            v477 = (v476 ^ (v476 >> 15)) + ~((v476 ^ (v476 >> 15)) << 27);
            v478 = v474 & ((v477 >> 31) ^ v477);
            v479 = *(_QWORD *)(v448 + 16 * v478);
            if (v479 != v280)
            {
              v480 = 1;
              while (v479)
              {
                v478 = ((_DWORD)v478 + v480) & v474;
                v479 = *(_QWORD *)(v448 + 16 * v478);
                ++v480;
                if (v479 == v280)
                  goto LABEL_472;
              }
              v478 = *(unsigned int *)(v448 - 4);
            }
LABEL_472:
            if (v478 != *(_DWORD *)(v448 - 4))
            {
              a2 = *(_QWORD *)(v448 + 16 * v478 + 8);
              if (a2)
            }
            a3 = v103;
            a1 = v199;
            v14 = v473;
            goto LABEL_8;
          }
          if (v11 != 134)
            goto LABEL_5;
          v103 = a3;
          v104 = a1;
          v155 = (JSC::DFG::Node *)(*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL);
          v14 = v156;
          if (v156 && (*((_DWORD *)v156 + 2) - 3) < 3)
          {
            v163 = 0;
            v164 = 9;
            goto LABEL_285;
          }
LABEL_401:
          v420 = v14;
          v14 = v420;
          a1 = v104;
          goto LABEL_175;
      }
    }
    if (*(unsigned __int16 *)(a2 + 18) > 0x102u)
    {
      if (*(unsigned __int16 *)(a2 + 18) <= 0x116u)
      {
        v181 = a1;
        if (v11 == 259)
        {
          v103 = a3;
          *(_QWORD *)&v545 = *((_QWORD *)v9 + 9);
          v109 = v307;
          if ((v545 & 1) != 0)
            WTF::fastFree(v545 & 0xFFFFFFFFFFFFFFFCLL, v314, v315, v316, v317, v318, v319, v320);
          v549[0] = 13;
          v321 = JSC::DFG::Graph::freeze(*(_QWORD *)(v181 + 32), *((_QWORD *)v9 + 9), v315, v316, v317, v318, v319, v320);
          *(_QWORD *)&v550 = 0;
          *((_QWORD *)&v550 + 1) = v321;
          goto LABEL_280;
        }
        if (v11 == 270)
        {
          v103 = a3;
          v549[0] = 18;
          v413 = *((_QWORD *)v9 + 9);
          *(_QWORD *)&v550 = 0;
          *((_QWORD *)&v550 + 1) = v413;
          WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v545, (uint64_t *)&v544, v549, &v550);
          v549[0] = 19;
          v414 = *((_QWORD *)v9 + 3);
          v415 = v414 & 0xFF00FFFFFFFFFFFFLL;
          *(_QWORD *)&v550 = v414 & 0xFF00FFFFFFFFFFFFLL;
          *((_QWORD *)&v550 + 1) = 0;
          if ((v414 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v355 = *(unsigned __int16 *)((v414 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v355 <= 2)
            {
              v356 = *(_QWORD *)(v415 + 72);
              *((_QWORD *)&v550 + 1) = v356;
              if ((_DWORD)v355)
              {
                if ((_DWORD)v355 == 1)
                  goto LABEL_388;
                goto LABEL_581;
              }
            }
          }
          goto LABEL_280;
        }
        if (v11 != 268)
          goto LABEL_5;
        v103 = a3;
        v182 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 72) + 9);
        switch(v182)
        {
          case '@':
            break;
          case 'B':
          case 'A':
            break;
          case 'D':
            break;
          default:
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 32), (JSC::DFG::Node *)a2, (const WTF::CString *)"./dfg/DFGObjectAllocationSinkingPhase.cpp", (const char *)0x3DB, "void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:2058:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:2084:21)]", "Bad structure");
            __break(0xC471u);
            JUMPOUT(0x1984EEF7CLL);
        }
        v14 = v183;
      }
      else
      {
        if (v11 != 344)
        {
          if (v11 != 343)
          {
            if (v11 == 279)
              return;
            goto LABEL_5;
          }
          v103 = a3;
          v104 = a1;
          v416 = *(_QWORD *)(a2 + 24);
          v417 = v416 & 0xFF00FFFFFFFFFFFFLL;
          v14 = v418;
          if (!v418 || *((_DWORD *)v418 + 2) != 7)
          {
            a1 = v104;
            v423 = *(_QWORD *)(v104 + 512);
            a3 = v103;
            if (v423)
            {
              v424 = *(_DWORD *)(v423 - 8);
              v425 = (v417 + ~(v416 << 32)) ^ ((v417 + ~(v416 << 32)) >> 22);
              v426 = 9 * ((v425 + ~(v425 << 13)) ^ ((v425 + ~(v425 << 13)) >> 8));
              v427 = (v426 ^ (v426 >> 15)) + ~((v426 ^ (v426 >> 15)) << 27);
              v428 = v424 & ((v427 >> 31) ^ v427);
              v429 = *(_QWORD *)(v423 + 16 * v428);
              if (v429 != v417)
              {
                v430 = 1;
                while (v429)
                {
                  v428 = ((_DWORD)v428 + v430) & v424;
                  v429 = *(_QWORD *)(v423 + 16 * v428);
                  ++v430;
                  if (v429 == v417)
                    goto LABEL_462;
                }
                v428 = *(unsigned int *)(v423 - 4);
              }
LABEL_462:
              if (v428 != *(_DWORD *)(v423 - 4))
              {
                v203 = v14;
                a2 = *(_QWORD *)(v423 + 16 * v428 + 8);
                if (a2)
                a3 = v103;
                a1 = v104;
LABEL_323:
                v14 = v203;
              }
            }
            goto LABEL_8;
          }
          v163 = *((unsigned int *)v9 + 18);
          v164 = 7;
LABEL_285:
          v29 = v14;
          if (v322)
            JSC::DFG::Node::replaceWith((uint64_t)v9, *(JSC::DFG::Graph **)(v104 + 32), v322, a4, a5, a6, a7, a8);
          v323 = v29[2];
          a1 = v104;
          if (v323)
          {
            v324 = *(_DWORD *)(v323 - 8);
            v325 = v324 & ((_DWORD)v163 + (_DWORD)v164);
            v326 = (int *)(v323 + 16 * v325);
            v327 = *v326;
            v328 = v326[1];
            v329 = *v326 == (_DWORD)v164 && v328 == (_DWORD)v163;
            a3 = v103;
            if (v329)
            {
LABEL_299:
              v333 = *(_QWORD *)(v323 + 16 * v325 + 8);
              if (v333)
              {
                *(_QWORD *)&v550 = v9;
                v549[0] = v333;
                WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *&>((uint64_t *)(v104 + 512), (uint64_t *)&v550, v549, a4, a5, a6, a7, a8, (uint64_t)&v545);
                a1 = v104;
              }
              a3 = v103;
            }
            else
            {
              v330 = 1;
              while (v327 | v328)
              {
                v325 = ((_DWORD)v325 + v330) & v324;
                v331 = (int *)(v323 + 16 * v325);
                v327 = *v331;
                v328 = v331[1];
                ++v330;
                if (v327 == (_DWORD)v164 && v328 == (_DWORD)v163)
                  goto LABEL_299;
              }
            }
LABEL_29:
            v14 = v29;
            goto LABEL_8;
          }
LABEL_251:
          v14 = v29;
LABEL_175:
          a3 = v103;
          goto LABEL_8;
        }
        v103 = a3;
        v181 = a1;
        v344 = (JSC::DFG::Node *)(*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL);
        if (v345 && *((_DWORD *)v345 + 2) == 7)
        {
          v109 = v345;
          v352 = *((_DWORD *)v9 + 18);
          LODWORD(v549[0]) = 7;
          HIDWORD(v549[0]) = v352;
          v353 = *((_QWORD *)v9 + 4);
          v354 = v353 & 0xFF00FFFFFFFFFFFFLL;
          *(_QWORD *)&v550 = v353 & 0xFF00FFFFFFFFFFFFLL;
          *((_QWORD *)&v550 + 1) = 0;
          if ((v353 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v355 = *(unsigned __int16 *)((v353 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
            if (v355 <= 2)
            {
              v356 = *(_QWORD *)(v354 + 72);
              *((_QWORD *)&v550 + 1) = v356;
              if ((_DWORD)v355)
              {
                if ((_DWORD)v355 == 1)
                {
LABEL_388:
                  *((_QWORD *)&v550 + 1) = v355 | v356;
                  goto LABEL_280;
                }
LABEL_581:
                v355 = 2;
                goto LABEL_388;
              }
            }
          }
LABEL_280:
          WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::LazyNode,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::LazyNode>,WTF::HashTableTraits>::add<JSC::DFG::LazyNode>((uint64_t)&v545, (uint64_t *)&v544, v549, &v550);
LABEL_281:
          a1 = v181;
LABEL_282:
          v14 = v109;
          goto LABEL_175;
        }
        v431 = v345;
        v14 = v431;
      }
LABEL_421:
      a1 = v181;
      goto LABEL_175;
    }
    switch(*(_WORD *)(a2 + 18))
    {
      case 0xAB:
        v103 = a3;
        v104 = a1;
        v133 = *(_QWORD *)(a2 + 24);
        v134 = v133 & 0xFF00FFFFFFFFFFFFLL;
        v14 = v135;
        if (v135 && *((_DWORD *)v135 + 2) == 2)
        {
          v163 = *((unsigned int *)v9 + 18);
          v164 = 6;
          goto LABEL_285;
        }
        a1 = v104;
        v136 = *(_QWORD *)(v104 + 512);
        if (!v136)
          goto LABEL_175;
        v137 = *(_DWORD *)(v136 - 8);
        v138 = (v134 + ~(v133 << 32)) ^ ((v134 + ~(v133 << 32)) >> 22);
        v139 = 9 * ((v138 + ~(v138 << 13)) ^ ((v138 + ~(v138 << 13)) >> 8));
        v140 = (v139 ^ (v139 >> 15)) + ~((v139 ^ (v139 >> 15)) << 27);
        v141 = v137 & ((v140 >> 31) ^ v140);
        v142 = *(_QWORD *)(v136 + 16 * v141);
        a3 = v103;
        if (v142 == v134)
          goto LABEL_260;
        v143 = 1;
        while (v142)
        {
          v141 = ((_DWORD)v141 + v143) & v137;
          v142 = *(_QWORD *)(v136 + 16 * v141);
          ++v143;
          if (v142 == v134)
            goto LABEL_260;
        }
LABEL_259:
        v141 = *(unsigned int *)(v136 - 4);
LABEL_260:
        if (v141 != *(_DWORD *)(v136 - 4))
        {
          a2 = *(_QWORD *)(v136 + 16 * v141 + 8);
          if (a2)
          {
            v301 = v14;
            a3 = v103;
            v14 = v301;
            goto LABEL_343;
          }
        }
        goto LABEL_8;
      case 0xAC:
        v103 = a3;
        v199 = a1;
        v223 = *(_QWORD *)(a2 + 24);
        v224 = v223 & 0xFF00FFFFFFFFFFFFLL;
        v14 = v225;
        if (!v225 || *((_DWORD *)v225 + 2) != 2)
        {
          a1 = v199;
          v226 = *(_QWORD *)(v199 + 512);
          if (!v226)
            goto LABEL_175;
          v227 = *(_DWORD *)(v226 - 8);
          v228 = (v224 + ~(v223 << 32)) ^ ((v224 + ~(v223 << 32)) >> 22);
          v229 = 9 * ((v228 + ~(v228 << 13)) ^ ((v228 + ~(v228 << 13)) >> 8));
          v230 = (v229 ^ (v229 >> 15)) + ~((v229 ^ (v229 >> 15)) << 27);
          v231 = v227 & ((v230 >> 31) ^ v230);
          v232 = *(_QWORD *)(v226 + 16 * v231);
          a3 = v103;
          if (v232 != v224)
          {
            v233 = 1;
            while (v232)
            {
              v231 = ((_DWORD)v231 + v233) & v227;
              v232 = *(_QWORD *)(v226 + 16 * v231);
              ++v233;
              if (v232 == v224)
                goto LABEL_315;
            }
            v231 = *(unsigned int *)(v226 - 4);
          }
LABEL_315:
          v203 = v14;
          if (v231 != *(_DWORD *)(v226 - 4))
          {
            a2 = *(_QWORD *)(v226 + 16 * v231 + 8);
            if (a2)
            {
              a1 = v199;
              v226 = *(_QWORD *)(v199 + 512);
              if (!v226)
                goto LABEL_174;
              v227 = *(_DWORD *)(v226 - 8);
              a3 = v103;
            }
          }
          v357 = *((_QWORD *)v9 + 4);
          v358 = v357 & 0xFF00FFFFFFFFFFFFLL;
          v359 = ((v357 & 0xFF00FFFFFFFFFFFFLL) + ~(v357 << 32)) ^ (((v357 & 0xFF00FFFFFFFFFFFFLL) + ~(v357 << 32)) >> 22);
          v360 = 9 * ((v359 + ~(v359 << 13)) ^ ((v359 + ~(v359 << 13)) >> 8));
          v361 = (v360 ^ (v360 >> 15)) + ~((v360 ^ (v360 >> 15)) << 27);
          v362 = v227 & ((v361 >> 31) ^ v361);
          v363 = *(_QWORD *)(v226 + 16 * v362);
          if (v363 != v358)
          {
            v364 = 1;
            while (v363)
            {
              v362 = ((_DWORD)v362 + v364) & v227;
              v363 = *(_QWORD *)(v226 + 16 * v362);
              ++v364;
              if (v363 == v358)
                goto LABEL_322;
            }
            v362 = *(unsigned int *)(v226 - 4);
          }
LABEL_322:
          if (v362 == *(_DWORD *)(v226 - 4))
            goto LABEL_323;
          a2 = *(_QWORD *)(v226 + 16 * v362 + 8);
          v14 = v203;
          if (a2)
          {
            a3 = v103;
            v14 = v203;
LABEL_439:
            a1 = v199;
          }
          goto LABEL_8;
        }
        v203 = v225;
        v304 = *((_DWORD *)v9 + 18);
        LODWORD(v549[0]) = 6;
        HIDWORD(v549[0]) = v304;
        v305 = *((_QWORD *)v9 + 4);
        v306 = v305 & 0xFF00FFFFFFFFFFFFLL;
        *(_QWORD *)&v550 = v305 & 0xFF00FFFFFFFFFFFFLL;
        *((_QWORD *)&v550 + 1) = 0;
        if ((v305 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_173;
        v302 = *(unsigned __int16 *)((v305 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v302 > 2)
          goto LABEL_173;
        v303 = *(_QWORD *)(v306 + 72);
        *((_QWORD *)&v550 + 1) = v303;
        if (!(_DWORD)v302)
          goto LABEL_173;
        if ((_DWORD)v302 != 1)
LABEL_580:
          v302 = 2;
        break;
      case 0xB3:
        v103 = a3;
        v104 = a1;
        v155 = (JSC::DFG::Node *)(*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL);
        v14 = v409;
        if (!v409 || *((_DWORD *)v409 + 2) != 8)
          goto LABEL_401;
        v163 = 0;
        v164 = 19;
        goto LABEL_285;
      case 0xB4:
        v103 = a3;
        v181 = a1;
        v449 = (JSC::DFG::Node *)(*(_QWORD *)(a2 + 24) & 0xFF00FFFFFFFFFFFFLL);
        v109 = v450;
        if (!v450 || *((_DWORD *)v450 + 2) != 8)
        {
          goto LABEL_281;
        }
        v549[0] = 19;
        JSC::DFG::LazyNode::LazyNode(&v550, (JSC::DFG::Node *)(*((_QWORD *)v9 + 4) & 0xFF00FFFFFFFFFFFFLL));
        goto LABEL_280;
      default:
        goto LABEL_5;
    }
    goto LABEL_266;
  }
  if (v11 == 20)
    return;
  if (v11 - 132 < 2)
  {
    v104 = a1;
    v193 = a3;
    v194 = *(_QWORD *)(a2 + 24);
    v195 = v194 & 0xFF00FFFFFFFFFFFFLL;
    if (v196)
    {
      v367 = v196;
      if (*((_DWORD *)v196 + 2) == 1)
      {
        v368 = v196[3];
        *(_QWORD *)&v545 = 0;
        if ((v368 & 1) == 0 || v368 == 4)
          *(_QWORD *)&v545 = v368 & 0xFFFFFFFFFFFFFFFDLL;
        else
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v545, v196 + 3);
        v369 = (uint64_t *)*((_QWORD *)v9 + 9);
        *(_QWORD *)&v550 = 0;
        v370 = *v369;
        if ((*v369 & 1) != 0 && v370 != 4)
        {
          WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)&v550, v369);
          v370 = v550;
        }
        *(_QWORD *)&v550 = v370 & 0xFFFFFFFFFFFFFFFDLL;
        JSC::DFG::RegisteredStructureSet::filter((JSC::DFG::RegisteredStructureSet *)&v545, (const JSC::DFG::StructureAbstractValue *)&v550, v197, a4, a5, a6, a7, a8);
        if ((v550 & 1) != 0)
          WTF::fastFree(v550 & 0xFFFFFFFFFFFFFFFCLL, v371, v372, v373, v374, v375, v376, v377);
        if ((v545 & 0xFFFFFFFFFFFFFFFDLL) != 0)
        {
          if (v378)
          {
            *((_WORD *)v9 + 9) = 280;
            *((_QWORD *)v9 + 3) = (unint64_t)v378 & 0xFF00FFFFFFFFFFFFLL | 0x20000000000000;
          }
        }
        else
        {
        }
        a3 = v193;
        if ((v545 & 1) != 0)
        {
          WTF::fastFree(v545 & 0xFFFFFFFFFFFFFFFCLL, (void *)a2, v193, a4, a5, a6, a7, a8);
          a3 = v193;
        }
        v14 = 0;
LABEL_343:
        a1 = v104;
        goto LABEL_8;
      }
    }
    a1 = v104;
    v198 = *(_QWORD *)(v104 + 512);
    if (!v198)
    {
LABEL_169:
      v14 = 0;
      a3 = v193;
      goto LABEL_8;
    }
    v266 = *(_DWORD *)(v198 - 8);
    v267 = (v195 + ~(v194 << 32)) ^ ((v195 + ~(v194 << 32)) >> 22);
    v268 = 9 * ((v267 + ~(v267 << 13)) ^ ((v267 + ~(v267 << 13)) >> 8));
    v269 = (v268 ^ (v268 >> 15)) + ~((v268 ^ (v268 >> 15)) << 27);
    v270 = v266 & ((v269 >> 31) ^ v269);
    v271 = *(_QWORD *)(v198 + 16 * v270);
    a3 = v193;
    if (v271 != v195)
    {
      v272 = 1;
      while (v271)
      {
        v270 = ((_DWORD)v270 + v272) & v266;
        v271 = *(_QWORD *)(v198 + 16 * v270);
        ++v272;
        if (v271 == v195)
          goto LABEL_268;
      }
      v270 = *(unsigned int *)(v198 - 4);
    }
LABEL_268:
    if (v270 != *(_DWORD *)(v198 - 4))
    {
      a2 = *(_QWORD *)(v198 + 16 * v270 + 8);
      if (a2)
      {
        a3 = v193;
        a1 = v104;
      }
    }
    goto LABEL_7;
  }
  if (v11 - 24 >= 2)
    goto LABEL_5;
  if ((*(_BYTE *)(a2 + 56) & 0x10) != 0)
  {
    v506 = a1;
    v507 = a3;
    v508 = *(_QWORD *)(a2 + 24);
    v509 = *(_QWORD *)(a2 + 32);
    if ((int)v509 + (int)v508 <= v508)
    {
      v14 = 0;
    }
    else
    {
      v510 = *(_QWORD *)(a1 + 32);
      v511 = *(_QWORD *)(a2 + 24);
      do
      {
        if (v511 >= *(unsigned int *)(v510 + 164))
        {
          __break(0xC471u);
          JUMPOUT(0x1984EF294);
        }
        a2 = *(_QWORD *)(*(_QWORD *)(v510 + 152) + 8 * v511);
        if ((a2 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v508 = *((_QWORD *)v9 + 3);
          v509 = *((_QWORD *)v9 + 4);
        }
        v14 = 0;
        ++v511;
        a3 = v507;
        a1 = v506;
      }
      while (v511 < (v508 + v509));
    }
    goto LABEL_8;
  }
  v234 = *(_QWORD *)(a2 + 24);
  v235 = v234 & 0xFF00FFFFFFFFFFFFLL;
  if ((v234 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_7;
  if ((v234 & 0x1000000000000) == 0)
  {
    v236 = (v234 >> 50) & 0x3F;
    if ((_DWORD)v236)
    {
      if (v236 > 0x34)
        goto LABEL_584;
      if (((1 << v236) & 0x12798001880F84) == 0)
      {
        if (((1 << v236) & 0xD867FFE77F07ALL) == 0)
          goto LABEL_584;
        v438 = *(_QWORD *)(a1 + 512);
        if (v438)
        {
          v439 = a1;
          v440 = a3;
          v441 = *(_DWORD *)(v438 - 8);
          v442 = (v235 + ~(v234 << 32)) ^ ((v235 + ~(v234 << 32)) >> 22);
          v443 = 9 * ((v442 + ~(v442 << 13)) ^ ((v442 + ~(v442 << 13)) >> 8));
          v444 = (v443 ^ (v443 >> 15)) + ~((v443 ^ (v443 >> 15)) << 27);
          v445 = v441 & ((v444 >> 31) ^ v444);
          v446 = *(_QWORD *)(v438 + 16 * v445);
          if (v446 != v235)
          {
            v447 = 1;
            while (v446)
            {
              v445 = ((_DWORD)v445 + v447) & v441;
              v446 = *(_QWORD *)(v438 + 16 * v445);
              ++v447;
              if (v446 == v235)
                goto LABEL_497;
            }
            v445 = *(unsigned int *)(v438 - 4);
          }
LABEL_497:
          if (v445 != *(_DWORD *)(v438 - 4))
          {
            a2 = *(_QWORD *)(v438 + 16 * v445 + 8);
            if (a2)
            {
              a3 = v440;
              a1 = v439;
            }
          }
        }
      }
    }
  }
  v237 = *((_QWORD *)v9 + 4);
  v238 = v237 & 0xFF00FFFFFFFFFFFFLL;
  if ((v237 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    if ((v237 & 0x1000000000000) == 0)
    {
      v239 = (v237 >> 50) & 0x3F;
      if ((_DWORD)v239)
      {
        if (v239 > 0x34)
          goto LABEL_584;
        if (((1 << v239) & 0x12798001880F84) == 0)
        {
          if (((1 << v239) & 0xD867FFE77F07ALL) == 0)
            goto LABEL_584;
          v463 = *(_QWORD *)(a1 + 512);
          if (v463)
          {
            v464 = a1;
            v465 = a3;
            v466 = *(_DWORD *)(v463 - 8);
            v467 = (v238 + ~(v237 << 32)) ^ ((v238 + ~(v237 << 32)) >> 22);
            v468 = 9 * ((v467 + ~(v467 << 13)) ^ ((v467 + ~(v467 << 13)) >> 8));
            v469 = (v468 ^ (v468 >> 15)) + ~((v468 ^ (v468 >> 15)) << 27);
            v470 = v466 & ((v469 >> 31) ^ v469);
            v471 = *(_QWORD *)(v463 + 16 * v470);
            if (v471 != v238)
            {
              v472 = 1;
              while (v471)
              {
                v470 = ((_DWORD)v470 + v472) & v466;
                v471 = *(_QWORD *)(v463 + 16 * v470);
                ++v472;
                if (v471 == v238)
                  goto LABEL_512;
              }
              v470 = *(unsigned int *)(v463 - 4);
            }
LABEL_512:
            if (v470 != *(_DWORD *)(v463 - 4))
            {
              a2 = *(_QWORD *)(v463 + 16 * v470 + 8);
              if (a2)
              {
                a3 = v465;
                a1 = v464;
              }
            }
          }
        }
      }
    }
    v14 = 0;
    v240 = *((_QWORD *)v9 + 5);
    v241 = v240 & 0xFF00FFFFFFFFFFFFLL;
    if ((v240 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_8;
    if ((v240 & 0x1000000000000) != 0)
      goto LABEL_8;
    v14 = 0;
    v242 = (v240 >> 50) & 0x3F;
    if (!(_DWORD)v242)
      goto LABEL_8;
    if (v242 <= 0x34)
    {
      if (((1 << v242) & 0x12798001880F84) != 0)
        goto LABEL_8;
      if (((1 << v242) & 0xD867FFE77F07ALL) != 0)
      {
        v243 = a3;
        v244 = a1;
        v245 = *(_QWORD *)(a1 + 512);
        if (v245)
        {
          v487 = *(_DWORD *)(v245 - 8);
          v488 = (v241 + ~(v240 << 32)) ^ ((v241 + ~(v240 << 32)) >> 22);
          v489 = 9 * ((v488 + ~(v488 << 13)) ^ ((v488 + ~(v488 << 13)) >> 8));
          v490 = (v489 ^ (v489 >> 15)) + ~((v489 ^ (v489 >> 15)) << 27);
          v491 = v487 & ((v490 >> 31) ^ v490);
          v492 = *(_QWORD *)(v245 + 16 * v491);
          if (v492 != v241)
          {
            v493 = 1;
            while (v492)
            {
              v491 = ((_DWORD)v491 + v493) & v487;
              v492 = *(_QWORD *)(v245 + 16 * v491);
              ++v493;
              if (v492 == v241)
                goto LABEL_524;
            }
            v491 = *(unsigned int *)(v245 - 4);
          }
LABEL_524:
          if (v491 != *(_DWORD *)(v245 - 4))
          {
            a2 = *(_QWORD *)(v245 + 16 * v491 + 8);
            if (a2)
          }
        }
        v14 = 0;
        a3 = v243;
        a1 = v244;
        goto LABEL_8;
      }
    }
LABEL_584:
    __break(0xC471u);
    JUMPOUT(0x1984EF284);
  }
LABEL_7:
  v14 = 0;
LABEL_8:
  v15 = (uint64_t)v544;
  if (v544)
  {
    if (!*((_DWORD *)v544 - 3))
      goto LABEL_15;
    v16 = *((unsigned int *)v544 - 1);
    v17 = v544;
    if ((_DWORD)v16)
    {
      v18 = 0;
      while (!LODWORD(v544[v18]))
      {
        v18 += 3;
        if (3 * v16 == v18)
          goto LABEL_14;
      }
      v17 = &v544[v18];
    }
    v42 = &v544[3 * v16];
    if (v17 != v42)
    {
      v43 = v14 + 2;
      while (1)
      {
        v44 = *v17;
        v45 = (JSC::DFG::Node *)v17[1];
        v46 = v17[2];
        if (v45)
        {
          v100 = *(_QWORD *)(a1 + 512);
          if (!v100)
            goto LABEL_77;
          v144 = *(_DWORD *)(v100 - 8);
          v145 = ((unint64_t)v45 + ~((_QWORD)v45 << 32)) ^ (((unint64_t)v45 + ~((_QWORD)v45 << 32)) >> 22);
          v146 = 9 * ((v145 + ~(v145 << 13)) ^ ((v145 + ~(v145 << 13)) >> 8));
          v147 = (v146 ^ (v146 >> 15)) + ~((v146 ^ (v146 >> 15)) << 27);
          v148 = v144 & ((v147 >> 31) ^ v147);
          v149 = *(JSC::DFG::Node **)(v100 + 16 * v148);
          if (v149 != v45)
          {
            v150 = 1;
            while (v149)
            {
              v148 = ((_DWORD)v148 + v150) & v144;
              v149 = *(JSC::DFG::Node **)(v100 + 16 * v148);
              ++v150;
              if (v149 == v45)
                goto LABEL_117;
            }
            v148 = *(unsigned int *)(v100 - 4);
          }
LABEL_117:
          if (v148 == *(_DWORD *)(v100 - 4))
          {
LABEL_77:
            v101 = a3;
            *(_QWORD *)&v550 = *v17;
            v549[0] = 0;
          }
          else
          {
            v101 = a3;
            v151 = *(_QWORD *)(v100 + 16 * v148 + 8);
            *(_QWORD *)&v550 = *v17;
            v549[0] = v151;
            if (v151)
            {
              v152 = a1;
              v153 = v14;
              v154 = v43;
              WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedLocationDescriptor const&,JSC::DFG::Node *&>((uint64_t)&v545, v43, &v550, v549);
              v43 = v154;
              v14 = v153;
              a1 = v152;
              v47 = HIDWORD(v44);
LABEL_79:
              a3 = v101;
              goto LABEL_35;
            }
          }
          v47 = HIDWORD(v44);
          v102 = *v43;
          if (!*v43)
            goto LABEL_79;
          v174 = v14;
          v185 = *(_DWORD *)(v102 - 8);
          v186 = v185 & (HIDWORD(v44) + v44);
          a2 = v102 + 16 * v186;
          v187 = *(_DWORD *)a2;
          v188 = *(_DWORD *)(a2 + 4);
          if (*(_DWORD *)a2 != (_DWORD)v44 || v188 != HIDWORD(v44))
          {
            v190 = 1;
            while (v187 | v188)
            {
              v186 = (v186 + v190) & v185;
              a2 = v102 + 16 * v186;
              v187 = *(_DWORD *)a2;
              v188 = *(_DWORD *)(a2 + 4);
              ++v190;
              if (*(_DWORD *)a2 == (_DWORD)v44 && v188 == HIDWORD(v44))
                goto LABEL_165;
            }
            a2 = v102 + 16 * *(unsigned int *)(v102 - 4);
          }
LABEL_165:
          a3 = v101;
          if (v102 + 16 * *(unsigned int *)(v102 - 4) == a2)
          {
LABEL_147:
            v14 = v174;
            goto LABEL_35;
          }
        }
        else
        {
          v47 = HIDWORD(v44);
          v48 = *v43;
          if (!*v43)
            goto LABEL_35;
          v174 = v14;
          v175 = *(_DWORD *)(v48 - 8);
          v176 = v175 & (HIDWORD(v44) + v44);
          a2 = v48 + 16 * v176;
          v177 = *(_DWORD *)a2;
          v178 = *(_DWORD *)(a2 + 4);
          if (*(_DWORD *)a2 != (_DWORD)v44 || v178 != HIDWORD(v44))
          {
            v180 = 1;
            while (v177 | v178)
            {
              v176 = (v176 + v180) & v175;
              a2 = v48 + 16 * v176;
              v177 = *(_DWORD *)a2;
              v178 = *(_DWORD *)(a2 + 4);
              ++v180;
              if (*(_DWORD *)a2 == (_DWORD)v44 && v178 == HIDWORD(v44))
                goto LABEL_146;
            }
            a2 = v48 + 16 * *(unsigned int *)(v48 - 4);
          }
LABEL_146:
          if (v48 + 16 * *(unsigned int *)(v48 - 4) == a2)
            goto LABEL_147;
        }
        v542 = a1;
        v191 = v43;
        v192 = a3;
        WTF::HashTable<JSC::DFG::PromotedLocationDescriptor,WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashMap<JSC::DFG::PromotedLocationDescriptor,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedLocationDescriptor>>::remove(v43, (_QWORD *)a2);
        a3 = v192;
        v43 = v191;
        v14 = v174;
        a1 = v542;
LABEL_35:
        v49 = v14;
        v50 = *v14;
        v549[0] = *v14;
        v549[1] = v44;
        v51 = **(_QWORD **)a3;
        if (v51)
        {
          v52 = 0;
          v53 = *(_QWORD *)(a3 + 16);
          v54 = (~(v50 << 32) + v50) ^ ((unint64_t)(~(v50 << 32) + v50) >> 22);
          v55 = 9 * ((v54 + ~(v54 << 13)) ^ ((v54 + ~(v54 << 13)) >> 8));
          v56 = (v55 ^ (v55 >> 15)) + ~((v55 ^ (v55 >> 15)) << 27);
          for (i = v44 + v47 + ((v56 >> 31) ^ v56); ; i = v52 + v58)
          {
            v58 = i & *(_DWORD *)(v51 - 8);
            v59 = *(_QWORD *)(v51 + 16 * v58);
            if (v59 == v50)
            {
              v60 = v51 + 16 * v58;
              v62 = *(_DWORD *)(v60 + 8);
              v61 = *(_DWORD *)(v60 + 12);
              if (v62 == (_DWORD)v44 && v61 == (_DWORD)v47)
                break;
            }
            if (!v59 && !*(_QWORD *)(v51 + 16 * v58 + 8))
              goto LABEL_69;
            ++v52;
          }
          v64 = v43;
          v541 = a1;
          if (v45)
            goto LABEL_49;
          v65 = **(_QWORD **)(a3 + 8);
          if (v65)
          {
            v66 = *(_DWORD *)(v65 - 8);
            v67 = (v46 & 0xFFFFFFFFFFFFFFFCLL) + ~((v46 & 0xFFFFFFFFFFFFFFFCLL) << 32);
            v68 = (v67 ^ (v67 >> 22)) + ~((v67 ^ (v67 >> 22)) << 13);
            v69 = (9 * (v68 ^ (v68 >> 8))) ^ ((9 * (v68 ^ (v68 >> 8))) >> 15);
            v70 = v66 & (((v69 + ~(v69 << 27)) >> 31) ^ ((_DWORD)v69 + ~((_DWORD)v69 << 27)));
            v71 = *(_QWORD *)(v65 + 16 * v70);
            if (v71 == (v46 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_48:
              v45 = *(JSC::DFG::Node **)(v65 + 16 * v70 + 8);
LABEL_49:
              v72 = a3;
              v548 = (uint64_t)v73;
              WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation const&,JSC::DFG::Node *&>((uint64_t)&v545, (uint64_t *)(v53 + 224), (uint64_t)v549, &v548);
              v74 = *(_QWORD *)(v53 + 200);
              v43 = v64;
              if (v74)
              {
                v75 = *(_DWORD *)(v74 - 8);
                v76 = (~(v549[0] << 32) + v549[0]) ^ ((unint64_t)(~(v549[0] << 32) + v549[0]) >> 22);
                v77 = 9 * ((v76 + ~(v76 << 13)) ^ ((v76 + ~(v76 << 13)) >> 8));
                v78 = (v77 ^ (v77 >> 15)) + ~((v77 ^ (v77 >> 15)) << 27);
                v79 = v75 & ((v78 >> 31) ^ v78);
                v80 = *(_QWORD *)(v74 + 8 * v79);
                if (v80 == v549[0])
                {
LABEL_54:
                  v82 = v72;
                  **(_BYTE **)(v72 + 32) = 1;
                  v83 = **(_DWORD **)(v72 + 48);
                  v84 = *(_QWORD *)(v53 + 32);
                  v85 = **(_QWORD **)(v72 + 40);
                  v539 = v82;
                  v86 = *(_BYTE **)(v82 + 56);
                  v87 = *(unsigned __int8 *)(v85 + 16);
                  v88 = *v86;
                  *v86 = 0;
                  if (v87)
                    v89 = v88 == 0;
                  else
                    v89 = 1;
                  v90 = !v89;
                  v91 = *(_QWORD *)v85;
                  if ((*(_QWORD *)v85 & 1) != 0)
                  {
                    v535 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
                    v537 = v84;
                    if ((v91 & 2) != 0
                      || ((v481 = *(unsigned int *)((v91 & 0xFFFFFFFF8) + 8), v533 = v481, (_DWORD)v481 != 0x3FFFFFFF)
                        ? (v482 = (_DWORD)v481 == -1)
                        : (v482 = 1),
                          v482))
                    {
                      v483 = 2;
                    }
                    else if (v481 >> 28)
                    {
                      v531 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v531 = v535;
                      *(_DWORD *)(v531 + 8) = v533;
                      v483 = 1;
                      v535 = v531;
                    }
                    else
                    {
                      v483 = *(_QWORD *)(v91 & 0xFFFFFFFF8);
                      v535 = v481 << 36;
                    }
                    v84 = v537;
                    v91 = v535 | v483;
                  }
                  *(_QWORD *)&v545 = v91;
                  v92 = *(_QWORD *)(v85 + 8);
                  if ((v92 & 1) != 0)
                  {
                    v536 = *(_QWORD *)(v92 & 0xFFFFFFFF8);
                    v538 = v84;
                    if ((v92 & 2) != 0
                      || ((v484 = *(unsigned int *)((v92 & 0xFFFFFFFF8) + 8), v534 = v484, (_DWORD)v484 != 0x3FFFFFFF)
                        ? (v485 = (_DWORD)v484 == -1)
                        : (v485 = 1),
                          v485))
                    {
                      v486 = 2;
                    }
                    else if (v484 >> 28)
                    {
                      v532 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v532 = v536;
                      *(_DWORD *)(v532 + 8) = v534;
                      v486 = 1;
                      v536 = v532;
                    }
                    else
                    {
                      v486 = *(_QWORD *)(v92 & 0xFFFFFFFF8);
                      v536 = v484 << 36;
                    }
                    v84 = v538;
                    v92 = v536 | v486;
                  }
                  v93 = (v83 + 1);
                  *((_QWORD *)&v545 + 1) = v92;
                  v547 = HIBYTE(*(_WORD *)(v85 + 16));
                  v546 = v90;
                  Hint = JSC::DFG::PromotedHeapLocation::createHint(v549, v84, (uint64_t)&v545, (uint64_t)v73);
                  *(_QWORD *)&v550 = v93;
                  *((_QWORD *)&v550 + 1) = Hint;
                  v96 = (_QWORD *)(v53 + 248);
                  v97 = *(unsigned int *)(v53 + 260);
                  if ((_DWORD)v97 && *(_QWORD *)(*v96 + 16 * v97 - 16) > v93)
                  {
                    JSC::DFG::InsertionSet::insertSlow(v53 + 240, (unint64_t *)&v550, v95, a4, a5, a6, a7, a8);
                    v72 = v539;
                    v43 = v64;
                  }
                  else
                  {
                    v72 = v539;
                    if ((_DWORD)v97 == *(_DWORD *)(v53 + 256))
                    {
                      v366 = (__int128 *)WTF::Vector<WTF::Insertion<JSC::B3::Value *>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v96, (void *)(v97 + 1), (unint64_t)&v550, a4, a5, a6, a7, a8);
                      v43 = v64;
                      v97 = *(unsigned int *)(v53 + 260);
                      v98 = *(_QWORD *)(v53 + 248);
                      v99 = *v366;
                    }
                    else
                    {
                      v43 = v64;
                      v98 = *(_QWORD *)(v53 + 248);
                      v99 = v550;
                    }
                    *(_OWORD *)(v98 + 16 * v97) = v99;
                    ++*(_DWORD *)(v53 + 260);
                  }
                  if ((BYTE8(v545) & 1) != 0 && (*((_QWORD *)&v545 + 1) & 0xFFFFFFFF8) != 0)
                  {
                    WTF::fastFree(*((_QWORD *)&v545 + 1) & 0xFFFFFFFF8, (void *)a2, v95, a4, a5, a6, a7, a8);
                    v43 = v64;
                  }
                  if ((v545 & 1) != 0 && (v545 & 0xFFFFFFFF8) != 0)
                  {
                    WTF::fastFree(v545 & 0xFFFFFFFF8, (void *)a2, v95, a4, a5, a6, a7, a8);
                    v43 = v64;
                  }
                }
                else
                {
                  v81 = 1;
                  while (v80)
                  {
                    v79 = (v79 + v81) & v75;
                    v80 = *(_QWORD *)(v74 + 8 * v79);
                    ++v81;
                    if (v80 == v549[0])
                      goto LABEL_54;
                  }
                }
              }
              a1 = v541;
              a3 = v72;
              goto LABEL_69;
            }
            v184 = 1;
            while (v71)
            {
              v70 = ((_DWORD)v70 + v184) & v66;
              v71 = *(_QWORD *)(v65 + 16 * v70);
              ++v184;
              if (v71 == (v46 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_48;
            }
          }
          v45 = 0;
          goto LABEL_49;
        }
LABEL_69:
        v17 += 3;
        if (v17 != v42)
        {
          v14 = v49;
          while (!*(_DWORD *)v17)
          {
            v17 += 3;
            if (v17 == v42)
              goto LABEL_80;
          }
          if (v17 != v42)
            continue;
        }
LABEL_80:
        v15 = (uint64_t)v544;
        break;
      }
    }
LABEL_14:
    if (v15)
LABEL_15:
      WTF::fastFree(v15 - 16, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

JSC::DFG::Node *JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::resolve(uint64_t *a1, JSC::DFG::BasicBlock *a2, uint64_t a3, uint64_t a4)
{
  JSC::DFG::Node *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int i;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int j;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int k;
  unsigned int v40;
  uint64_t *v41;
  int v42;
  int v43;
  BOOL v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unint64_t v51;

  if (!v8)
  {
    v10 = a1 + 28;
    v9 = a1[28];
    if (v9)
    {
      v11 = 0;
      v12 = (a3 + ~(a3 << 32)) ^ ((unint64_t)(a3 + ~(a3 << 32)) >> 22);
      v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
      v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
      for (i = HIDWORD(a4) + a4 + ((v14 >> 31) ^ v14); ; i = v11 + v16)
      {
        v16 = i & *(_DWORD *)(v9 - 8);
        v17 = v9 + 24 * v16;
        if (*(_QWORD *)v17 == a3 && *(_DWORD *)(v17 + 8) == (_DWORD)a4 && *(_DWORD *)(v17 + 12) == HIDWORD(a4))
          break;
        if (!*(_QWORD *)v17 && !*(_QWORD *)(v17 + 8))
          goto LABEL_13;
        ++v11;
      }
      v19 = *(_QWORD *)(v9 + 24 * v16 + 16);
      if (v19)
        return (JSC::DFG::Node *)v19;
    }
LABEL_13:
    v20 = a1[26];
    if (v20)
    {
      v21 = 0;
      v22 = (a3 + ~(a3 << 32)) ^ ((unint64_t)(a3 + ~(a3 << 32)) >> 22);
      v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      for (j = HIDWORD(a4) + a4 + ((v24 >> 31) ^ v24); ; j = v21 + v26)
      {
        v26 = j & *(_DWORD *)(v20 - 8);
        v27 = v20 + 24 * v26;
        if (*(_QWORD *)v27 == a3 && *(_DWORD *)(v27 + 8) == (_DWORD)a4 && *(_DWORD *)(v27 + 12) == HIDWORD(a4))
          break;
        if (!*(_QWORD *)v27 && !*(_QWORD *)(v27 + 8))
          goto LABEL_59;
        ++v21;
      }
      v29 = *(_QWORD *)(v20 + 24 * v26 + 16);
    }
    else
    {
LABEL_59:
      v29 = 0;
    }
    v30 = JSC::DFG::SSACalculator::nonLocalReachingDef((uint64_t)(a1 + 9), (uint64_t)a2, v29);
    v31 = *(_QWORD *)(v30 + 16);
    if (*(_QWORD *)(v31 + 88))
      v19 = *(_QWORD *)(v31 + 88);
    else
      v19 = *(_QWORD *)(v30 + 16);
    v32 = *v10;
    if (*v10
      || (WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(a1 + 28, 8u, 0), (v32 = *v10) != 0))
    {
      v33 = *(_DWORD *)(v32 - 8);
    }
    else
    {
      v33 = 0;
    }
    v34 = 0;
    v35 = (a3 + ~(a3 << 32)) ^ ((unint64_t)(a3 + ~(a3 << 32)) >> 22);
    v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
    v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
    v38 = HIDWORD(a4) + a4 + ((v37 >> 31) ^ v37);
    for (k = 1; ; ++k)
    {
      v40 = v38 & v33;
      v41 = (uint64_t *)(v32 + 24 * v40);
      v42 = *((_DWORD *)v41 + 2);
      if (!*v41 && !v41[1])
        break;
      if (*v41 == a3)
      {
        v43 = *((_DWORD *)v41 + 3);
        if (v42 == (_DWORD)a4 && v43 == HIDWORD(a4))
          return (JSC::DFG::Node *)v19;
      }
      else
      {
        v43 = *((_DWORD *)v41 + 3);
      }
      if (v42)
        v45 = 1;
      else
        v45 = v43 == 0;
      if (!v45)
        v34 = (uint64_t *)(v32 + 24 * v40);
      v38 = k + v40;
    }
    if (v34)
    {
      *v34 = 0;
      v34[1] = 0;
      v34[2] = 0;
      --*(_DWORD *)(*v10 - 16);
      v41 = v34;
    }
    *v41 = a3;
    v41[1] = a4;
    v41[2] = v19;
    v46 = *v10;
    if (*v10)
      v47 = *(_DWORD *)(v46 - 12) + 1;
    else
      v47 = 1;
    *(_DWORD *)(v46 - 12) = v47;
    v48 = *v10;
    if (*v10)
      v49 = *(_DWORD *)(v48 - 12);
    else
      v49 = 0;
    v50 = (*(_DWORD *)(v48 - 16) + v49);
    v51 = *(unsigned int *)(v48 - 4);
    if (v51 > 0x400)
    {
      if (v51 > 2 * v50)
        return (JSC::DFG::Node *)v19;
    }
    else if (3 * v51 > 4 * v50)
    {
      return (JSC::DFG::Node *)v19;
    }
    WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::expand(a1 + 28, v41);
    return (JSC::DFG::Node *)v19;
  }
}

JSC::DFG::Node *JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::getMaterialization(JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *this, JSC::DFG::BasicBlock *a2, JSC::DFG::Node *a3)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  JSC::DFG::Node *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  JSC::DFG::Node *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  JSC::DFG::Node *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  JSC::DFG::Node *v33;

  v33 = a3;
  v3 = *((_QWORD *)this + 25);
  if (!v3)
    return a3;
  v4 = *(_DWORD *)(v3 - 8);
  v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = (v7 >> 31) ^ v7;
  v9 = v4 & v8;
  v10 = *(JSC::DFG::Node **)(v3 + 8 * (v4 & v8));
  if (v10 != a3)
  {
    v11 = 1;
    while (v10)
    {
      v9 = (v9 + v11) & v4;
      v10 = *(JSC::DFG::Node **)(v3 + 8 * v9);
      ++v11;
      if (v10 == a3)
        goto LABEL_6;
    }
    return a3;
  }
LABEL_6:
  v13 = (uint64_t *)((char *)this + 232);
  v12 = *((_QWORD *)this + 29);
  if (!v12)
  {
LABEL_9:
    v18 = *((_QWORD *)this + 27);
    if (v18)
    {
      v19 = *(_DWORD *)(v18 - 8);
      v20 = v19 & v8;
      v21 = *(JSC::DFG::Node **)(v18 + 16 * v20);
      if (v21 == a3)
      {
LABEL_11:
        v22 = *(_QWORD *)(v18 + 16 * v20 + 8);
LABEL_12:
        v23 = JSC::DFG::SSACalculator::nonLocalReachingDef((uint64_t)this + 136, (uint64_t)a2, v22);
        v32 = *(_QWORD *)(v23 + 16);
        WTF::HashMap<JSC::DFG::Node *,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add<JSC::DFG::Node *>(&v31, v13, (uint64_t *)&v33, &v32, v24, v25, v26, v27);
        return *(JSC::DFG::Node **)(v23 + 16);
      }
      v30 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v30) & v19;
        v21 = *(JSC::DFG::Node **)(v18 + 16 * v20);
        ++v30;
        if (v21 == a3)
          goto LABEL_11;
      }
    }
    v22 = 0;
    goto LABEL_12;
  }
  v14 = *(_DWORD *)(v12 - 8);
  v15 = v14 & v8;
  v16 = *(JSC::DFG::Node **)(v12 + 16 * v15);
  if (v16 != a3)
  {
    v29 = 1;
    while (v16)
    {
      v15 = ((_DWORD)v15 + v29) & v14;
      v16 = *(JSC::DFG::Node **)(v12 + 16 * v15);
      ++v29;
      if (v16 == a3)
        goto LABEL_8;
    }
    goto LABEL_9;
  }
LABEL_8:
  v17 = *(_QWORD *)(v12 + 16 * v15 + 8);
  if (!v17)
    goto LABEL_9;
  return (JSC::DFG::Node *)v17;
}

void WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::SSACalculator::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,JSC::DFG::SSACalculator::Variable *>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,JSC::DFG::SSACalculator::Variable *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::expand(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  v9 = *a1;
  if (!*a1)
  {
    LODWORD(v10) = 0;
    v11 = 0;
    goto LABEL_3;
  }
  LODWORD(v10) = *(_DWORD *)(v9 - 4);
  v11 = *(_DWORD *)(v9 - 12);
  if (!(_DWORD)v10)
  {
LABEL_3:
    v12 = 8;
    goto LABEL_4;
  }
  v12 = (_DWORD)v10 << (6 * v11 >= (2 * v10));
LABEL_4:
  v13 = WTF::fastZeroedMalloc(16 * v12 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v12;
  *(_DWORD *)(*a1 - 8) = v12 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v11;
  if ((_DWORD)v10)
  {
    v10 = v10;
    v21 = (void **)v9;
    do
    {
      v14 = *v21;
      if ((unint64_t)*v21 + 1 >= 2)
        *(_OWORD *)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<void *>>,void *>(*a1, (uint64_t)v14) = *(_OWORD *)v21;
      v21 += 2;
      --v10;
    }
    while (v10);
    goto LABEL_12;
  }
  if (v9)
LABEL_12:
    WTF::fastFree(v9 - 16, v14, v15, v16, v17, v18, v19, v20);
}

void WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::SSACalculator::Variable *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::SSACalculator::Variable *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::SSACalculator::Variable *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  __int128 *v18;
  int v19;
  int v20;
  BOOL v21;
  BOOL v22;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int j;
  int v32;
  uint64_t v33;
  __int128 v34;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v15 = v7;
  v16 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 24 * a2);
  *a1 = v16;
  *(_DWORD *)(v15 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v18 = (__int128 *)(v4 + 24 * i);
      v20 = *((_DWORD *)v18 + 2);
      v19 = *((_DWORD *)v18 + 3);
      if (v20)
        v21 = 1;
      else
        v21 = v19 == 0;
      if (v21)
      {
        v8 = *(_QWORD *)v18;
        v22 = !v20 && v8 == 0;
        if (!v22 || v19 != 0)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = 0;
          v27 = v19 + v20;
          v28 = (~(v8 << 32) + v8) ^ ((~(v8 << 32) + v8) >> 22);
          v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
          v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
          for (j = v27 + ((v30 >> 31) ^ v30); ; j = v26 + v32)
          {
            v32 = j & v25;
            v33 = v24 + 24 * (j & v25);
            if (!*(_QWORD *)v33)
            {
              v9 = *(unsigned int *)(v33 + 12);
              v8 = *(_DWORD *)(v33 + 8) | v9;
              if (!(_DWORD)v8)
                break;
            }
            ++v26;
          }
          v34 = *v18;
          *(_QWORD *)(v33 + 16) = *((_QWORD *)v18 + 2);
          *(_OWORD *)v33 = v34;
        }
      }
    }
    goto LABEL_27;
  }
  if (v4)
LABEL_27:
    WTF::fastFree(v4 - 16, (void *)v8, v9, v10, v11, v12, v13, v14);
}

uint64_t WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unsigned int v8;
  uint64_t *v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int i;
  uint64_t v17;
  uint64_t *v18;
  uint64_t result;
  int v20;
  BOOL v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unsigned int v32;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *(_DWORD *)(a3 + 8);
  v11 = *(_DWORD *)(a3 + 12);
  v12 = ~(*(_QWORD *)a3 << 32) + *(_QWORD *)a3;
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v11 + v10 + (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  for (i = 1; ; ++i)
  {
    v17 = v15 & v8;
    v18 = (uint64_t *)(v6 + 16 * v17);
    result = *v18;
    v20 = *((_DWORD *)v18 + 2);
    if (!*v18 && !(v20 | *(_DWORD *)(v6 + 16 * v17 + 12)))
    {
      if (v9)
      {
        *v9 = 0;
        v9[1] = 0;
        --*(_DWORD *)(*a2 - 16);
        v18 = v9;
      }
      *(_OWORD *)v18 = *(_OWORD *)a3;
      v23 = *a2;
      if (*a2)
        v24 = *(_DWORD *)(v23 - 12) + 1;
      else
        v24 = 1;
      *(_DWORD *)(v23 - 12) = v24;
      v25 = *a2;
      if (*a2)
        v26 = *(_DWORD *)(v25 - 12);
      else
        v26 = 0;
      v27 = (*(_DWORD *)(v25 - 16) + v26);
      v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400)
      {
        if (v28 > 2 * v27)
          goto LABEL_25;
      }
      else
      {
        if (3 * v28 > 4 * v27)
        {
LABEL_25:
          v29 = v25 + 16 * v28;
          v30 = 1;
          goto LABEL_26;
        }
        if (!(_DWORD)v28)
        {
          v32 = 8;
LABEL_39:
          result = WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(a2, v32, v18);
          v18 = (uint64_t *)result;
          v25 = *a2;
          if (*a2)
            v28 = *(unsigned int *)(v25 - 4);
          else
            v28 = 0;
          goto LABEL_25;
        }
      }
      v32 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
      goto LABEL_39;
    }
    if (result != *(_QWORD *)a3)
    {
      LODWORD(result) = *(_DWORD *)(v6 + 16 * v17 + 12);
      goto LABEL_11;
    }
    result = *(unsigned int *)(v6 + 16 * v17 + 12);
    if (v20 == v10 && (_DWORD)result == v11)
      break;
LABEL_11:
    if (v20)
      v22 = 1;
    else
      v22 = (_DWORD)result == 0;
    if (!v22)
      v9 = (uint64_t *)(v6 + 16 * v17);
    v15 = i + v17;
  }
  if ((v7 & 1) != 0)
    v31 = 0;
  else
    v31 = *(unsigned int *)(v6 - 4);
  v30 = 0;
  v29 = v6 + 16 * v31;
LABEL_26:
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v29;
  *(_BYTE *)(a1 + 16) = v30;
  return result;
}

uint64_t WTF::HashTable<JSC::DFG::PromotedHeapLocation,JSC::DFG::PromotedHeapLocation,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int i;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = (uint64_t *)(v6 + 16 * v19);
      v22 = *((_DWORD *)v21 + 2);
      v23 = *((_DWORD *)v21 + 3);
      if (v22)
        v24 = 1;
      else
        v24 = v23 == 0;
      if (v24)
      {
        v25 = *v21;
        v26 = !v22 && v25 == 0;
        if (!v26 || v23 != 0)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = 0;
          v31 = v23 + v22;
          v32 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
          v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
          v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
          for (i = v31 + ((v34 >> 31) ^ v34); ; i = v30 + v36)
          {
            v36 = i & v29;
            if (!*(_QWORD *)(v28 + 16 * v36))
            {
              v37 = v28 + 16 * v36;
              if (!*(_QWORD *)(v37 + 8))
                break;
            }
            ++v30;
          }
          *(_OWORD *)v37 = *(_OWORD *)v21;
          if (v21 == a3)
            v20 = v28 + 16 * v36;
        }
      }
      ++v19;
    }
    while (v19 != v7);
    goto LABEL_28;
  }
  v20 = 0;
  result = 0;
  if (v6)
  {
LABEL_28:
    WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
    return v20;
  }
  return result;
}

uint64_t *WTF::HashMap<JSC::DFG::SSACalculator::Variable *,JSC::DFG::SSACalculator::Def *,WTF::DefaultHash<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Def *>,WTF::HashTableTraits>::add<JSC::DFG::SSACalculator::Def *&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v13 + 16 * v20);
  v22 = *v21;
  if (*v21)
  {
    v31 = 0;
    v32 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v33 = 0;
        else
          v33 = *(unsigned int *)(v13 - 4);
        v30 = 0;
        v29 = v13 + 16 * v33;
        goto LABEL_11;
      }
      if (v22 == -1)
        v31 = v21;
      v20 = (v20 + v32) & v15;
      v21 = (uint64_t *)(v13 + 16 * v20);
      v22 = *v21;
      ++v32;
    }
    while (*v21);
    if (v31)
    {
      *v31 = 0;
      v31[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = v31;
    }
  }
  *v21 = v16;
  v21[1] = *a3;
  v23 = *v11;
  if (*v11)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_10;
    goto LABEL_27;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v34 = 8;
LABEL_30:
      result = (uint64_t *)WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(v11, v34, (uint64_t)v21, a4, a5, a6, a7, a8);
      v21 = result;
      v25 = *v11;
      if (*v11)
        v28 = *(unsigned int *)(v25 - 4);
      else
        v28 = 0;
      goto LABEL_10;
    }
LABEL_27:
    v34 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
    goto LABEL_30;
  }
LABEL_10:
  v29 = v25 + 16 * v28;
  v30 = 1;
LABEL_11:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v29;
  *(_BYTE *)(a9 + 16) = v30;
  return result;
}

{
  uint64_t *v11;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  int v32;
  unint64_t v33;
  uint64_t v34;

  v11 = result;
  v13 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(result, 8uLL, 0, a4, a5, a6, a7, a8), (v13 = *v11) != 0))
  {
    v14 = 0;
    v15 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v15 = 0;
    v14 = 1;
  }
  v16 = *a2;
  v17 = ~(*a2 << 32) + *a2;
  v18 = 9
      * (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) ^ (((v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13)) >> 8));
  v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
  v20 = v15 & ((v19 >> 31) ^ v19);
  v21 = (uint64_t *)(v13 + 16 * v20);
  v22 = *v21;
  if (*v21)
  {
    v31 = 0;
    v32 = 1;
    do
    {
      if (v22 == v16)
      {
        if ((v14 & 1) != 0)
          v34 = 0;
        else
          v34 = *(unsigned int *)(v13 - 4);
        v30 = 0;
        v29 = v13 + 16 * v34;
        goto LABEL_11;
      }
      if (v22 == -1)
        v31 = v21;
      v20 = (v20 + v32) & v15;
      v21 = (uint64_t *)(v13 + 16 * v20);
      v22 = *v21;
      ++v32;
    }
    while (*v21);
    if (v31)
    {
      *v31 = 0;
      v31[1] = 0;
      --*(_DWORD *)(*v11 - 16);
      v16 = *a2;
      v21 = v31;
    }
  }
  *v21 = v16;
  v21[1] = *a3;
  v23 = *v11;
  if (*v11)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v11;
  if (*v11)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_10;
    goto LABEL_28;
  }
  if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v33 = 8;
      goto LABEL_25;
    }
LABEL_28:
    v33 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
LABEL_25:
    result = (uint64_t *)WTF::HashTable<JSC::B3::BasicBlock *,WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::BasicBlock *,unsigned int>>,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashMap<JSC::B3::BasicBlock *,unsigned int,WTF::DefaultHash<JSC::B3::BasicBlock *>,WTF::HashTraits<JSC::B3::BasicBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::BasicBlock *>>::rehash(v11, v33, (uint64_t)v21, a4, a5, a6, a7, a8);
    v21 = result;
    v25 = *v11;
    if (*v11)
      v28 = *(unsigned int *)(v25 - 4);
    else
      v28 = 0;
  }
LABEL_10:
  v29 = v25 + 16 * v28;
  v30 = 1;
LABEL_11:
  *(_QWORD *)a9 = v21;
  *(_QWORD *)(a9 + 8) = v29;
  *(_BYTE *)(a9 + 16) = v30;
  return result;
}

uint64_t JSC::DFG::`anonymous namespace'::LocalHeap::follow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int *v13;
  int v14;
  int v15;
  int v17;
  int v19;

  v3 = *(_DWORD *)(a1 - 8);
  v4 = (a2 + ~(a2 << 32)) ^ ((unint64_t)(a2 + ~(a2 << 32)) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  v8 = (uint64_t *)(a1 + 48 * v7);
  v9 = *v8;
  if (*v8 != a2)
  {
    v19 = 1;
    while (v9)
    {
      v7 = (v7 + v19) & v3;
      v8 = (uint64_t *)(a1 + 48 * v7);
      v9 = *v8;
      ++v19;
      if (*v8 == a2)
        goto LABEL_2;
    }
    v8 = (uint64_t *)(a1 + 48 * *(unsigned int *)(a1 - 4));
  }
LABEL_2:
  v10 = v8[3];
  if (!v10)
    return 0;
  v11 = *(_DWORD *)(v10 - 8);
  v12 = v11 & (HIDWORD(a3) + a3);
  v13 = (int *)(v10 + 16 * v12);
  v14 = *v13;
  v15 = v13[1];
  if (*v13 != (_DWORD)a3 || v15 != HIDWORD(a3))
  {
    v17 = 1;
    while (v14 | v15)
    {
      v12 = (v12 + v17) & v11;
      v13 = (int *)(v10 + 16 * v12);
      v14 = *v13;
      v15 = v13[1];
      ++v17;
      if (*v13 == (_DWORD)a3 && v15 == HIDWORD(a3))
        goto LABEL_10;
    }
    v13 = (int *)(v10 + 16 * *(unsigned int *)(v10 - 4));
  }
LABEL_10:
  if (v13 != (int *)(v10 + 16 * *(unsigned int *)(v10 - 4)))
    return *((_QWORD *)v13 + 1);
  else
    return 0;
}

uint64_t WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation const&,JSC::DFG::Node *>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t *v20;
  uint64_t result;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v30;
  unsigned int v31;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a3 + 8);
  v13 = *(_DWORD *)(a3 + 12);
  v14 = ~(*(_QWORD *)a3 << 32) + *(_QWORD *)a3;
  v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
  v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
  v17 = v13 + v12 + (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (uint64_t *)(v8 + 24 * v19);
    result = *((unsigned int *)v20 + 2);
    if (!*v20 && !v20[1])
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
        --*(_DWORD *)(*a2 - 16);
        v20 = v11;
      }
      *(_OWORD *)v20 = *(_OWORD *)a3;
      v20[2] = *a4;
      v22 = *a2;
      if (*a2)
        v23 = *(_DWORD *)(v22 - 12) + 1;
      else
        v23 = 1;
      *(_DWORD *)(v22 - 12) = v23;
      v24 = *a2;
      if (*a2)
        v25 = *(_DWORD *)(v24 - 12);
      else
        v25 = 0;
      v26 = (*(_DWORD *)(v24 - 16) + v25);
      v27 = *(unsigned int *)(v24 - 4);
      if (v27 > 0x400)
      {
        if (v27 > 2 * v26)
          goto LABEL_15;
      }
      else if (3 * v27 > 4 * v26)
      {
LABEL_15:
        *(_QWORD *)a1 = v20;
        *(_QWORD *)(a1 + 8) = v24 + 24 * v27;
        *(_BYTE *)(a1 + 16) = 1;
        return result;
      }
      result = WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::expand(a2, v20);
      v20 = (uint64_t *)result;
      v24 = *a2;
      if (*a2)
        LODWORD(v27) = *(_DWORD *)(v24 - 4);
      else
        LODWORD(v27) = 0;
      goto LABEL_15;
    }
    if (*v20 != *(_QWORD *)a3)
    {
      v28 = *((_DWORD *)v20 + 3);
      goto LABEL_26;
    }
    v28 = *((_DWORD *)v20 + 3);
    if ((_DWORD)result == v12 && v28 == v13)
      break;
LABEL_26:
    if (v28)
      v30 = (_DWORD)result == 0;
    else
      v30 = 0;
    if (v30)
      v11 = (uint64_t *)(v8 + 24 * v19);
    v17 = i + v19;
  }
  if ((v9 & 1) != 0)
    v31 = 0;
  else
    v31 = *(_DWORD *)(v8 - 4);
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v8 + 24 * v31;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(v8 + 24 * v19 + 16) = *a4;
  return result;
}

uint64_t WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int i;
  int v37;
  uint64_t v38;
  __int128 v39;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  v17 = v9;
  v18 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 24 * a2);
  *a1 = v18;
  *(_DWORD *)(v17 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v21 = 0;
    v19 = 0;
    do
    {
      v22 = (uint64_t *)(v6 + 24 * v21);
      v23 = *((_DWORD *)v22 + 2);
      v24 = *((_DWORD *)v22 + 3);
      if (v23)
        v25 = 1;
      else
        v25 = v24 == 0;
      if (v25)
      {
        v26 = *v22;
        v27 = !v23 && v26 == 0;
        if (!v27 || v24 != 0)
        {
          v29 = *a1;
          if (*a1)
            v30 = *(_DWORD *)(v29 - 8);
          else
            v30 = 0;
          v31 = 0;
          v32 = v24 + v23;
          v33 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
          v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
          v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
          for (i = v32 + ((v35 >> 31) ^ v35); ; i = v31 + v37)
          {
            v37 = i & v30;
            v38 = v29 + 24 * (i & v30);
            if (!*(_QWORD *)v38)
            {
              v10 = (void *)*(unsigned int *)(v38 + 12);
              if (!*(_QWORD *)(v38 + 8))
                break;
            }
            ++v31;
          }
          v39 = *(_OWORD *)v22;
          *(_QWORD *)(v38 + 16) = v22[2];
          *(_OWORD *)v38 = v39;
          if (v22 == a3)
            v19 = v38;
        }
      }
      ++v21;
    }
    while (v21 != v7);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree(v6 - 16, v10, v11, v12, v13, v14, v15, v16);
  return v19;
}

uint64_t WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::inlineSet<JSC::DFG::PromotedHeapLocation const&,JSC::DFG::Node *&>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  char v9;
  int v10;
  uint64_t *v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  unsigned int v19;
  uint64_t *v20;
  uint64_t result;
  int v22;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a3 + 8);
  v13 = *(_DWORD *)(a3 + 12);
  v14 = ~(*(_QWORD *)a3 << 32) + *(_QWORD *)a3;
  v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
  v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
  v17 = v13 + v12 + (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (uint64_t *)(v8 + 24 * v19);
    result = *((unsigned int *)v20 + 2);
    if (!*v20 && !v20[1])
    {
      if (v11)
      {
        *v11 = 0;
        v11[1] = 0;
        v11[2] = 0;
        --*(_DWORD *)(*a2 - 16);
        v20 = v11;
      }
      *(_OWORD *)v20 = *(_OWORD *)a3;
      v20[2] = *a4;
      v25 = *a2;
      if (*a2)
        v26 = *(_DWORD *)(v25 - 12) + 1;
      else
        v26 = 1;
      *(_DWORD *)(v25 - 12) = v26;
      v27 = *a2;
      if (*a2)
        v28 = *(_DWORD *)(v27 - 12);
      else
        v28 = 0;
      v29 = (*(_DWORD *)(v27 - 16) + v28);
      v30 = *(unsigned int *)(v27 - 4);
      if (v30 > 0x400)
      {
        if (v30 > 2 * v29)
          goto LABEL_25;
      }
      else
      {
        if (3 * v30 > 4 * v29)
        {
LABEL_25:
          *(_QWORD *)a1 = v20;
          *(_QWORD *)(a1 + 8) = v27 + 24 * v30;
          *(_BYTE *)(a1 + 16) = 1;
          return result;
        }
        if (!(_DWORD)v30)
        {
          v32 = 8;
LABEL_38:
          result = WTF::HashTable<JSC::DFG::PromotedHeapLocation,WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *>>,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashMap<JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::PromotedHeapLocation>>::rehash(a2, v32, v20);
          v20 = (uint64_t *)result;
          v27 = *a2;
          if (*a2)
            LODWORD(v30) = *(_DWORD *)(v27 - 4);
          else
            LODWORD(v30) = 0;
          goto LABEL_25;
        }
      }
      v32 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
      goto LABEL_38;
    }
    if (*v20 != *(_QWORD *)a3)
    {
      v22 = *((_DWORD *)v20 + 3);
      goto LABEL_11;
    }
    v22 = *((_DWORD *)v20 + 3);
    if ((_DWORD)result == v12 && v22 == v13)
      break;
LABEL_11:
    if ((_DWORD)result)
      v24 = 1;
    else
      v24 = v22 == 0;
    if (!v24)
      v11 = (uint64_t *)(v8 + 24 * v19);
    v17 = i + v19;
  }
  if ((v9 & 1) != 0)
    v31 = 0;
  else
    v31 = *(_DWORD *)(v8 - 4);
  *(_QWORD *)a1 = v20;
  *(_QWORD *)(a1 + 8) = v8 + 24 * v31;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(v8 + 24 * v19 + 16) = *a4;
  return result;
}

uint64_t WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::PromotedLocationDescriptor>(uint64_t a1, unint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)) = *(_QWORD *)WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 8 * v10;
      v20 = (uint64_t *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 8;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(_QWORD *)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    if ((_DWORD)v8)
    {
      v17 = 8 * v8;
      v18 = (uint64_t *)v7;
      do
      {
        v19 = *v18++;
        *v9++ = v19;
        v17 -= 8;
      }
      while (v17);
    }
    if (v7)
    {
      if (*(_QWORD *)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Node *&>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;

  result = WTF::Vector<JSC::DFG::Edge,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a3, a4, a5, a6, a7, a8);
  v11 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = *a2 & 0xFF00FFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 12) = v11 + 1;
  return result;
}

uint64_t JSC::DFG::Node::isPhantomAllocation(JSC::DFG::Node *this)
{
  int v1;
  uint64_t result;
  unsigned int v4;

  v1 = (unsigned __int16)this;
  result = 1;
  if ((v1 - 278) > 0xC || ((1 << (v1 - 22)) & 0x15F1) == 0)
  {
    v4 = v1 - 348;
    if (v4 > 7 || ((1 << v4) & 0x9F) == 0)
      return 0;
  }
  return result;
}

uint64_t std::sort[abi:sn180100]<JSC::DFG::RegisteredStructure *,JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::createRecovery(JSC::DFG::BasicBlock *,JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,BOOL &)::{lambda(JSC::DFG::RegisteredStructure,JSC::DFG::RegisteredStructure)#1}>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v8 = 126 - 2 * __clz(((uint64_t)a2 - a1) >> 3);
  v11 = a3;
  if (a2 == (uint64_t *)a1)
    v9 = 0;
  else
    v9 = v8;
}

_QWORD *WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::RegisteredStructure&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<JSC::DFG::RegisteredStructure,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v20 = *(_QWORD *)a1;
        return v20 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_QWORD *)(v11 + v19) = *(_QWORD *)(v5 + v19);
          v19 += 8;
        }
        while (8 * v6 != v19);
        v20 = *(_QWORD *)a1;
        if (v5)
        {
          if (v20 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v20 = *(_QWORD *)a1;
        }
        return v20 + 8 * ((uint64_t)(v3 - v5) >> 3);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x1984F0B80);
    }
  }
  v21 = *(unsigned int *)(a1 + 8);
  v22 = v21 + (v21 >> 2);
  if (v22 >= 0x10)
    v23 = v22 + 1;
  else
    v23 = 16;
  if (v23 <= a2)
    v24 = a2;
  else
    v24 = v23;
  if (v24 > v21)
  {
    if (v24 >> 29)
      goto LABEL_35;
    v25 = *(unsigned int *)(a1 + 12);
    v26 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
    *(_DWORD *)(a1 + 8) = v24;
    *(_QWORD *)a1 = v26;
    if ((_DWORD)v25)
    {
      v34 = 8 * v25;
      v35 = (uint64_t *)v5;
      do
      {
        v36 = *v35++;
        *v26++ = v36;
        v34 -= 8;
      }
      while (v34);
    }
    if (v5)
    {
      if (*(_QWORD *)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  return v3;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::createRecovery(JSC::DFG::BasicBlock *,JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,BOOL &)::{lambda(JSC::DFG::RegisteredStructure,JSC::DFG::RegisteredStructure)#1} &,JSC::DFG::RegisteredStructure*,false>(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  _DWORD *v61;
  int v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _DWORD *v92;
  int v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  BOOL v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _DWORD *v111;
  int v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  _DWORD *v121;
  int v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  int v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  _DWORD *v140;
  int v141;
  _DWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  _DWORD *v151;
  int v152;
  _DWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  int v161;
  _DWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  _DWORD *v171;
  int Concurrently;
  _DWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  BOOL v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _DWORD *v186;
  int v187;
  _DWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _DWORD *v197;
  int v198;
  _DWORD *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  int64_t v206;
  int64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  _DWORD *v212;
  int v213;
  _DWORD *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  _DWORD *v223;
  int v224;
  _DWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _DWORD *v236;
  int v237;
  _DWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  _DWORD *v246;
  int v247;
  _DWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int64_t v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _DWORD *v263;
  uint64_t *v264;
  int64_t v265;
  int v266;
  _DWORD *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t *v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  _DWORD *v280;
  int v281;
  _DWORD *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  _DWORD *v291;
  int v292;
  _DWORD *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  BOOL v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _DWORD *v305;
  int v306;
  _DWORD *v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t v316;
  _DWORD *v317;
  int v318;
  _DWORD *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  int64_t v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  char v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  int64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;

  v330 = a5;
  v8 = a4;
  v11 = (uint64_t *)result;
LABEL_2:
  v12 = a2 - 1;
  v13 = v11;
  while (2)
  {
    v11 = v13;
    v14 = (char *)a2 - (char *)v13;
    v15 = a2 - v13;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v169 = *(a2 - 1);
        v170 = *v13;
        v171 = (_DWORD *)*a3;
        v337 = 0;
        Concurrently = JSC::Structure::getConcurrently(v169, v171, &v337, a4, a5, a6, a7, a8);
        v173 = (_DWORD *)*a3;
        v337 = 0;
        result = JSC::Structure::getConcurrently(v170, v173, &v337, v174, v175, v176, v177, v178);
        if (Concurrently < (int)result)
        {
          v179 = *v13;
          *v13 = *(a2 - 1);
          *(a2 - 1) = v179;
        }
        return result;
      case 3uLL:
      case 4uLL:
      case 5uLL:
      default:
        if (v14 <= 191)
        {
          v180 = v13 + 1;
          v182 = v13 == a2 || v180 == a2;
          if ((v330 & 1) != 0)
          {
            if (!v182)
            {
              v183 = 0;
              do
              {
                v184 = *v13;
                v13 = v180;
                v185 = *v180;
                v186 = (_DWORD *)*a3;
                v337 = 0;
                v187 = JSC::Structure::getConcurrently(v185, v186, &v337, a4, a5, a6, a7, a8);
                v188 = (_DWORD *)*a3;
                v337 = 0;
                result = JSC::Structure::getConcurrently(v184, v188, &v337, v189, v190, v191, v192, v193);
                if (v187 < (int)result)
                {
                  v194 = *v180;
                  v195 = v183;
                  while (1)
                  {
                    *(uint64_t *)((char *)v11 + v195 + 8) = *(uint64_t *)((char *)v11 + v195);
                    if (!v195)
                      break;
                    v196 = *(uint64_t *)((char *)v11 + v195 - 8);
                    v197 = (_DWORD *)*a3;
                    v337 = 0;
                    v198 = JSC::Structure::getConcurrently(v194, v197, &v337, a4, a5, a6, a7, a8);
                    v199 = (_DWORD *)*a3;
                    v337 = 0;
                    result = JSC::Structure::getConcurrently(v196, v199, &v337, v200, v201, v202, v203, v204);
                    v195 -= 8;
                    if (v198 >= (int)result)
                    {
                      v205 = (uint64_t *)((char *)v11 + v195 + 8);
                      goto LABEL_83;
                    }
                  }
                  v205 = v11;
LABEL_83:
                  *v205 = v194;
                }
                v180 = v13 + 1;
                v183 += 8;
              }
              while (v13 + 1 != a2);
            }
          }
          else if (!v182)
          {
            v300 = 0;
            v301 = -1;
            v302 = 1;
            while (1)
            {
              v303 = v11[v300];
              v300 = v302;
              v304 = *v180;
              v305 = (_DWORD *)*a3;
              v337 = 0;
              v306 = JSC::Structure::getConcurrently(v304, v305, &v337, a4, a5, a6, a7, a8);
              v307 = (_DWORD *)*a3;
              v337 = 0;
              result = JSC::Structure::getConcurrently(v303, v307, &v337, v308, v309, v310, v311, v312);
              if (v306 < (int)result)
                break;
LABEL_129:
              v302 = v300 + 1;
              ++v180;
              --v301;
              if (v180 == a2)
                return result;
            }
            v336 = v300;
            v313 = *v180;
            v314 = v301;
            v315 = v180;
            while (1)
            {
              *v315 = *(v315 - 1);
              if (!v314)
                break;
              v316 = *(v315 - 2);
              v317 = (_DWORD *)*a3;
              v337 = 0;
              v318 = JSC::Structure::getConcurrently(v313, v317, &v337, a4, a5, a6, a7, a8);
              v319 = (_DWORD *)*a3;
              v337 = 0;
              result = JSC::Structure::getConcurrently(v316, v319, &v337, v320, v321, v322, v323, v324);
              --v315;
              ++v314;
              if (v318 >= (int)result)
              {
                *v315 = v313;
                v300 = v336;
                goto LABEL_129;
              }
            }
LABEL_131:
            __break(1u);
          }
          return result;
        }
        if (!v8)
        {
          if (v13 != a2)
          {
            v325 = (char *)a2 - (char *)v13;
            v206 = (v15 - 2) >> 1;
            v334 = v206;
            v328 = a2 - v13;
            do
            {
              v207 = v206;
              if (v334 >= v206)
              {
                v208 = (2 * v206) | 1;
                v209 = &v11[v208];
                v326 = v206;
                if (2 * v206 + 2 < (uint64_t)v15)
                {
                  v210 = *v209;
                  v211 = v209[1];
                  v212 = (_DWORD *)*a3;
                  v337 = 0;
                  v213 = JSC::Structure::getConcurrently(v210, v212, &v337, a4, a5, a6, a7, a8);
                  v214 = (_DWORD *)*a3;
                  v337 = 0;
                  if (v213 < (int)JSC::Structure::getConcurrently(v211, v214, &v337, v215, v216, v217, v218, v219))
                  {
                    ++v209;
                    v208 = 2 * v207 + 2;
                  }
                }
                v220 = &v11[v207];
                v221 = *v209;
                v222 = *v220;
                v223 = (_DWORD *)*a3;
                v337 = 0;
                v224 = JSC::Structure::getConcurrently(v221, v223, &v337, a4, a5, a6, a7, a8);
                v225 = (_DWORD *)*a3;
                v337 = 0;
                result = JSC::Structure::getConcurrently(v222, v225, &v337, v226, v227, v228, v229, v230);
                if (v224 >= (int)result)
                {
                  v331 = *v220;
                  do
                  {
                    v231 = v209;
                    *v220 = *v209;
                    if (v334 < v208)
                      break;
                    v232 = (2 * v208) | 1;
                    v209 = &v11[v232];
                    v233 = 2 * v208 + 2;
                    if (v233 < (uint64_t)v15)
                    {
                      v234 = *v209;
                      v235 = v209[1];
                      v236 = (_DWORD *)*a3;
                      v337 = 0;
                      v237 = JSC::Structure::getConcurrently(v234, v236, &v337, a4, a5, a6, a7, a8);
                      v238 = (_DWORD *)*a3;
                      v337 = 0;
                      v244 = JSC::Structure::getConcurrently(v235, v238, &v337, v239, v240, v241, v242, v243);
                      if (v237 < v244)
                        ++v209;
                      v15 = v328;
                      if (v237 < v244)
                        v232 = v233;
                    }
                    v245 = *v209;
                    v246 = (_DWORD *)*a3;
                    v337 = 0;
                    v247 = JSC::Structure::getConcurrently(v245, v246, &v337, a4, a5, a6, a7, a8);
                    v248 = (_DWORD *)*a3;
                    v337 = 0;
                    result = JSC::Structure::getConcurrently(v331, v248, &v337, v249, v250, v251, v252, v253);
                    v220 = v231;
                    v208 = v232;
                  }
                  while (v247 >= (int)result);
                  *v231 = v331;
                  v207 = v326;
                }
              }
              v206 = v207 - 1;
            }
            while (v207);
            v254 = v325 >> 3;
            do
            {
              v255 = 0;
              v329 = *v11;
              v332 = a2;
              v256 = (unint64_t)(v254 - 2) >> 1;
              v257 = v11;
              v335 = v254;
              do
              {
                v258 = &v257[v255 + 1];
                v259 = (2 * v255) | 1;
                v260 = 2 * v255 + 2;
                if (v260 < v254)
                {
                  v261 = *v258;
                  v262 = v257[v255 + 2];
                  v263 = (_DWORD *)*a3;
                  v337 = 0;
                  v264 = v11;
                  v265 = v256;
                  v266 = JSC::Structure::getConcurrently(v261, v263, &v337, a4, a5, a6, a7, a8);
                  v267 = (_DWORD *)*a3;
                  v337 = 0;
                  result = JSC::Structure::getConcurrently(v262, v267, &v337, v268, v269, v270, v271, v272);
                  v256 = v265;
                  v11 = v264;
                  if (v266 < (int)result)
                    ++v258;
                  v254 = v335;
                  if (v266 < (int)result)
                    v259 = v260;
                }
                *v257 = *v258;
                v257 = v258;
                v255 = v259;
              }
              while (v259 <= v256);
              v273 = v332 - 1;
              if (v258 == v332 - 1)
              {
                v274 = v332 - 1;
                *v258 = v329;
              }
              else
              {
                *v258 = *v273;
                v274 = v332 - 1;
                *v273 = v329;
                v275 = (char *)v258 - (char *)v11 + 8;
                if (v275 >= 9)
                {
                  v276 = (((unint64_t)v275 >> 3) - 2) >> 1;
                  v277 = &v11[v276];
                  v278 = *v277;
                  v279 = *v258;
                  v280 = (_DWORD *)*a3;
                  v337 = 0;
                  v281 = JSC::Structure::getConcurrently(v278, v280, &v337, a4, a5, a6, a7, a8);
                  v282 = (_DWORD *)*a3;
                  v337 = 0;
                  result = JSC::Structure::getConcurrently(v279, v282, &v337, v283, v284, v285, v286, v287);
                  if (v281 < (int)result)
                  {
                    v288 = *v258;
                    do
                    {
                      v289 = v277;
                      *v258 = *v277;
                      if (!v276)
                        break;
                      v276 = (v276 - 1) >> 1;
                      v277 = &v11[v276];
                      v290 = *v277;
                      v291 = (_DWORD *)*a3;
                      v337 = 0;
                      v292 = JSC::Structure::getConcurrently(v290, v291, &v337, a4, a5, a6, a7, a8);
                      v293 = (_DWORD *)*a3;
                      v337 = 0;
                      result = JSC::Structure::getConcurrently(v288, v293, &v337, v294, v295, v296, v297, v298);
                      v258 = v289;
                    }
                    while (v292 < (int)result);
                    *v289 = v288;
                  }
                }
              }
              v299 = v254-- <= 2;
              a2 = v274;
            }
            while (!v299);
          }
          return result;
        }
        v16 = v15 >> 1;
        v17 = &v13[v15 >> 1];
        if ((unint64_t)v14 < 0x401)
        {
        }
        else
        {
          v35 = *v13;
          *v13 = *v17;
          *v17 = v35;
        }
        --v8;
        if ((v330 & 1) == 0)
        {
          v36 = *(v13 - 1);
          v37 = *v13;
          v38 = (_DWORD *)*a3;
          v337 = 0;
          v39 = JSC::Structure::getConcurrently(v36, v38, &v337, v30, v31, v32, v33, v34);
          v40 = (_DWORD *)*a3;
          v337 = 0;
          result = JSC::Structure::getConcurrently(v37, v40, &v337, v41, v42, v43, v44, v45);
          if (v39 >= (int)result)
          {
            v108 = *v13;
            v109 = v12;
            v110 = *v12;
            v111 = (_DWORD *)*a3;
            v337 = 0;
            v112 = JSC::Structure::getConcurrently(v108, v111, &v337, v30, v31, v32, v33, v34);
            v113 = (_DWORD *)*a3;
            v337 = 0;
            result = JSC::Structure::getConcurrently(v110, v113, &v337, v114, v115, v116, v117, v118);
            v119 = v13 + 1;
            if (v112 >= (int)result)
            {
              do
              {
                v13 = v119;
                if (v119 >= a2)
                  break;
                ++v119;
                v129 = *v13;
                v130 = (_DWORD *)*a3;
                v337 = 0;
                v131 = JSC::Structure::getConcurrently(v108, v130, &v337, a4, a5, a6, a7, a8);
                v132 = (_DWORD *)*a3;
                v337 = 0;
                result = JSC::Structure::getConcurrently(v129, v132, &v337, v133, v134, v135, v136, v137);
              }
              while (v131 >= (int)result);
            }
            else
            {
              do
              {
                if (v119 == a2)
                  goto LABEL_131;
                v120 = *v119++;
                v121 = (_DWORD *)*a3;
                v337 = 0;
                v122 = JSC::Structure::getConcurrently(v108, v121, &v337, a4, a5, a6, a7, a8);
                v123 = (_DWORD *)*a3;
                v337 = 0;
                result = JSC::Structure::getConcurrently(v120, v123, &v337, v124, v125, v126, v127, v128);
              }
              while (v122 >= (int)result);
              v13 = v119 - 1;
            }
            v138 = a2;
            if (v13 < a2)
            {
              v138 = a2;
              while (v138 != v11)
              {
                v139 = *--v138;
                v140 = (_DWORD *)*a3;
                v337 = 0;
                v141 = JSC::Structure::getConcurrently(v108, v140, &v337, a4, a5, a6, a7, a8);
                v142 = (_DWORD *)*a3;
                v337 = 0;
                result = JSC::Structure::getConcurrently(v139, v142, &v337, v143, v144, v145, v146, v147);
                if (v141 >= (int)result)
                  goto LABEL_56;
              }
              goto LABEL_131;
            }
LABEL_56:
            if (v13 < v138)
            {
              v148 = *v13;
              *v13 = *v138;
              v149 = v13 + 1;
              *v138 = v148;
              while (v149 != a2)
              {
                v150 = *v149++;
                v151 = (_DWORD *)*a3;
                v337 = 0;
                v152 = JSC::Structure::getConcurrently(v108, v151, &v337, a4, a5, a6, a7, a8);
                v153 = (_DWORD *)*a3;
                v337 = 0;
                result = JSC::Structure::getConcurrently(v150, v153, &v337, v154, v155, v156, v157, v158);
                if (v152 < (int)result)
                {
                  v13 = v149 - 1;
                  while (v138 != v11)
                  {
                    v159 = *--v138;
                    v160 = (_DWORD *)*a3;
                    v337 = 0;
                    v161 = JSC::Structure::getConcurrently(v108, v160, &v337, a4, a5, a6, a7, a8);
                    v162 = (_DWORD *)*a3;
                    v337 = 0;
                    result = JSC::Structure::getConcurrently(v159, v162, &v337, v163, v164, v165, v166, v167);
                    if (v161 >= (int)result)
                      goto LABEL_56;
                  }
                  goto LABEL_131;
                }
              }
              goto LABEL_131;
            }
            v168 = v13 - 1;
            v12 = v109;
            if (v13 - 1 != v11)
              *v11 = *v168;
            v330 = 0;
            *v168 = v108;
            continue;
          }
        }
        v46 = 0;
        v47 = *v13;
        do
        {
          v48 = &v13[v46 + 1];
          if (v48 == a2)
            goto LABEL_131;
          v49 = *v48;
          v50 = (_DWORD *)*a3;
          v337 = 0;
          v51 = JSC::Structure::getConcurrently(v49, v50, &v337, v30, v31, v32, v33, v34);
          v52 = (_DWORD *)*a3;
          v337 = 0;
          result = JSC::Structure::getConcurrently(v47, v52, &v337, v53, v54, v55, v56, v57);
          ++v46;
        }
        while (v51 < (int)result);
        v333 = v8;
        v58 = &v13[v46];
        v59 = a2;
        if (v46 != 1)
        {
          while (v59 != v11)
          {
            v60 = *--v59;
            v61 = (_DWORD *)*a3;
            v337 = 0;
            v62 = JSC::Structure::getConcurrently(v60, v61, &v337, v30, v31, v32, v33, v34);
            v63 = (_DWORD *)*a3;
            v337 = 0;
            result = JSC::Structure::getConcurrently(v47, v63, &v337, v64, v65, v66, v67, v68);
            if (v62 < (int)result)
              goto LABEL_21;
          }
          goto LABEL_131;
        }
        v59 = a2;
        do
        {
          if (v58 >= v59)
            break;
          v69 = *--v59;
          v70 = (_DWORD *)*a3;
          v337 = 0;
          v71 = JSC::Structure::getConcurrently(v69, v70, &v337, v30, v31, v32, v33, v34);
          v72 = (_DWORD *)*a3;
          v337 = 0;
          result = JSC::Structure::getConcurrently(v47, v72, &v337, v73, v74, v75, v76, v77);
        }
        while (v71 >= (int)result);
LABEL_21:
        if (v58 >= v59)
        {
          v100 = v58 - 1;
        }
        else
        {
          v327 = v12;
          v78 = &v11[v46];
          v79 = v59;
          do
          {
            v80 = *v78;
            *v78 = *v79;
            *v79 = v80;
            v81 = v78 + 1;
            do
            {
              if (v81 == a2)
                goto LABEL_131;
              v82 = *v81++;
              v83 = (_DWORD *)*a3;
              v337 = 0;
              v84 = JSC::Structure::getConcurrently(v82, v83, &v337, v30, v31, v32, v33, v34);
              v85 = (_DWORD *)*a3;
              v337 = 0;
              result = JSC::Structure::getConcurrently(v47, v85, &v337, v86, v87, v88, v89, v90);
            }
            while (v84 < (int)result);
            v78 = v81 - 1;
            do
            {
              if (v79 == v11)
                goto LABEL_131;
              v91 = *--v79;
              v92 = (_DWORD *)*a3;
              v337 = 0;
              v93 = JSC::Structure::getConcurrently(v91, v92, &v337, v30, v31, v32, v33, v34);
              v94 = (_DWORD *)*a3;
              v337 = 0;
              result = JSC::Structure::getConcurrently(v47, v94, &v337, v95, v96, v97, v98, v99);
            }
            while (v93 >= (int)result);
          }
          while (v78 < v79);
          v100 = v81 - 2;
          v12 = v327;
        }
        if (v100 != v11)
          *v11 = *v100;
        *v100 = v47;
        v101 = v58 >= v59;
        v8 = v333;
        if (!v101)
        {
LABEL_38:
          v330 = 0;
          v13 = v100 + 1;
          continue;
        }
        v13 = v100 + 1;
        if (!(_DWORD)result)
        {
          if (v102)
            continue;
          goto LABEL_38;
        }
        a2 = v100;
        if (!v102)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::createRecovery(JSC::DFG::BasicBlock *,JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,BOOL &)::{lambda(JSC::DFG::RegisteredStructure,JSC::DFG::RegisteredStructure)#1} &,JSC::DFG::RegisteredStructure*,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int Concurrently;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;

  v14 = *a5;
  v15 = *a4;
  v16 = (_DWORD *)*a6;
  v79 = 0;
  Concurrently = JSC::Structure::getConcurrently(v14, v16, &v79, v17, v18, v19, v20, v21);
  v23 = (_DWORD *)*a6;
  v79 = 0;
  result = JSC::Structure::getConcurrently(v15, v23, &v79, v24, v25, v26, v27, v28);
  if (Concurrently < (int)result)
  {
    v35 = *a4;
    *a4 = *a5;
    *a5 = v35;
    v36 = *a4;
    v37 = *a3;
    v38 = (_DWORD *)*a6;
    v79 = 0;
    v39 = JSC::Structure::getConcurrently(v36, v38, &v79, v30, v31, v32, v33, v34);
    v40 = (_DWORD *)*a6;
    v79 = 0;
    result = JSC::Structure::getConcurrently(v37, v40, &v79, v41, v42, v43, v44, v45);
    if (v39 < (int)result)
    {
      v51 = *a3;
      *a3 = *a4;
      *a4 = v51;
      v52 = *a3;
      v53 = *a2;
      v54 = (_DWORD *)*a6;
      v79 = 0;
      v55 = JSC::Structure::getConcurrently(v52, v54, &v79, v46, v47, v48, v49, v50);
      v56 = (_DWORD *)*a6;
      v79 = 0;
      result = JSC::Structure::getConcurrently(v53, v56, &v79, v57, v58, v59, v60, v61);
      if (v55 < (int)result)
      {
        v67 = *a2;
        *a2 = *a3;
        *a3 = v67;
        v68 = *a2;
        v69 = *a1;
        v70 = (_DWORD *)*a6;
        v79 = 0;
        v71 = JSC::Structure::getConcurrently(v68, v70, &v79, v62, v63, v64, v65, v66);
        v72 = (_DWORD *)*a6;
        v79 = 0;
        result = JSC::Structure::getConcurrently(v69, v72, &v79, v73, v74, v75, v76, v77);
        if (v71 < (int)result)
        {
          v78 = *a1;
          *a1 = *a2;
          *a2 = v78;
        }
      }
    }
  }
  return result;
}

unint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::createRecovery(JSC::DFG::BasicBlock *,JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,BOOL &)::{lambda(JSC::DFG::RegisteredStructure,JSC::DFG::RegisteredStructure)#1} &,JSC::DFG::RegisteredStructure*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int Concurrently;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  _DWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;

  v12 = *a2;
  v13 = *a1;
  v14 = (_DWORD *)*a4;
  v79 = 0;
  Concurrently = JSC::Structure::getConcurrently(v12, v14, &v79, (uint64_t)a4, a5, a6, a7, a8);
  v16 = (_DWORD *)*a4;
  v79 = 0;
  v27 = JSC::Structure::getConcurrently(v13, v16, &v79, v17, v18, v19, v20, v21);
  v28 = *a3;
  v29 = *a2;
  v30 = (_DWORD *)*a4;
  if (Concurrently >= v27)
  {
    v79 = 0;
    v45 = JSC::Structure::getConcurrently(v28, v30, &v79, v22, v23, v24, v25, v26);
    v46 = (_DWORD *)*a4;
    v79 = 0;
    result = JSC::Structure::getConcurrently(v29, v46, &v79, v47, v48, v49, v50, v51);
    if (v45 < (int)result)
    {
      v57 = *a2;
      *a2 = *a3;
      *a3 = v57;
      v58 = *a2;
      v59 = *a1;
      v60 = (_DWORD *)*a4;
      v79 = 0;
      v61 = JSC::Structure::getConcurrently(v58, v60, &v79, v52, v53, v54, v55, v56);
      v62 = (_DWORD *)*a4;
      v79 = 0;
      result = JSC::Structure::getConcurrently(v59, v62, &v79, v63, v64, v65, v66, v67);
      if (v61 < (int)result)
      {
        v68 = *a1;
        *a1 = *a2;
        *a2 = v68;
      }
    }
  }
  else
  {
    v79 = 0;
    v31 = JSC::Structure::getConcurrently(v28, v30, &v79, v22, v23, v24, v25, v26);
    v32 = (_DWORD *)*a4;
    v79 = 0;
    result = JSC::Structure::getConcurrently(v29, v32, &v79, v33, v34, v35, v36, v37);
    v44 = *a1;
    if (v31 >= (int)result)
    {
      *a1 = *a2;
      *a2 = v44;
      v69 = *a3;
      v70 = (_DWORD *)*a4;
      v79 = 0;
      v71 = JSC::Structure::getConcurrently(v69, v70, &v79, v39, v40, v41, v42, v43);
      v72 = (_DWORD *)*a4;
      v79 = 0;
      result = JSC::Structure::getConcurrently(v44, v72, &v79, v73, v74, v75, v76, v77);
      if (v71 < (int)result)
      {
        v78 = *a2;
        *a2 = *a3;
        *a3 = v78;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v44;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::createRecovery(JSC::DFG::BasicBlock *,JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,BOOL &)::{lambda(JSC::DFG::RegisteredStructure,JSC::DFG::RegisteredStructure)#1} &,JSC::DFG::RegisteredStructure*>(uint64_t *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int Concurrently;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  int v55;

  v11 = a2 - a1;
  result = 1;
  switch(v11)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v13 = *(a2 - 1);
      v14 = *a1;
      v15 = (_DWORD *)*a3;
      v55 = 0;
      Concurrently = JSC::Structure::getConcurrently(v13, v15, &v55, a4, a5, a6, a7, a8);
      v17 = (_DWORD *)*a3;
      v55 = 0;
      if (Concurrently < (int)JSC::Structure::getConcurrently(v14, v17, &v55, v18, v19, v20, v21, v22))
      {
        v23 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      return 1;
    case 4:
      return 1;
    case 5:
      return 1;
    default:
      v24 = a1 + 2;
      v30 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v31 = 0;
      v32 = 0;
      break;
  }
  while (1)
  {
    v33 = *v30;
    v34 = *v24;
    v35 = (_DWORD *)*a3;
    v55 = 0;
    v36 = JSC::Structure::getConcurrently(v33, v35, &v55, v25, v26, v27, v28, v29);
    v37 = (_DWORD *)*a3;
    v55 = 0;
    if (v36 < (int)JSC::Structure::getConcurrently(v34, v37, &v55, v38, v39, v40, v41, v42))
    {
      v43 = *v30;
      v44 = v31;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v44 + 24) = *(uint64_t *)((char *)a1 + v44 + 16);
        if (v44 == -16)
          break;
        v45 = *(uint64_t *)((char *)a1 + v44 + 8);
        v46 = (_DWORD *)*a3;
        v55 = 0;
        v47 = JSC::Structure::getConcurrently(v43, v46, &v55, v25, v26, v27, v28, v29);
        v48 = (_DWORD *)*a3;
        v55 = 0;
        v44 -= 8;
        if (v47 >= (int)JSC::Structure::getConcurrently(v45, v48, &v55, v49, v50, v51, v52, v53))
        {
          v54 = (uint64_t *)((char *)a1 + v44 + 24);
          goto LABEL_12;
        }
      }
      v54 = a1;
LABEL_12:
      *v54 = v43;
      if (++v32 == 8)
        return v30 + 1 == a2;
    }
    v24 = v30;
    v31 += 8;
    if (++v30 == a2)
      return 1;
  }
}

unint64_t std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::createRecovery(JSC::DFG::BasicBlock *,JSC::DFG::PromotedHeapLocation,JSC::DFG::Node *,BOOL &)::{lambda(JSC::DFG::RegisteredStructure,JSC::DFG::RegisteredStructure)#1} &,JSC::DFG::RegisteredStructure*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int Concurrently;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  int v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;

  v13 = *a4;
  v14 = *a3;
  v15 = (_DWORD *)*a5;
  v62 = 0;
  Concurrently = JSC::Structure::getConcurrently(v13, v15, &v62, v16, v17, v18, v19, v20);
  v22 = (_DWORD *)*a5;
  v62 = 0;
  result = JSC::Structure::getConcurrently(v14, v22, &v62, v23, v24, v25, v26, v27);
  if (Concurrently < (int)result)
  {
    v34 = *a3;
    *a3 = *a4;
    *a4 = v34;
    v35 = *a3;
    v36 = *a2;
    v37 = (_DWORD *)*a5;
    v62 = 0;
    v38 = JSC::Structure::getConcurrently(v35, v37, &v62, v29, v30, v31, v32, v33);
    v39 = (_DWORD *)*a5;
    v62 = 0;
    result = JSC::Structure::getConcurrently(v36, v39, &v62, v40, v41, v42, v43, v44);
    if (v38 < (int)result)
    {
      v50 = *a2;
      *a2 = *a3;
      *a3 = v50;
      v51 = *a2;
      v52 = *a1;
      v53 = (_DWORD *)*a5;
      v62 = 0;
      v54 = JSC::Structure::getConcurrently(v51, v53, &v62, v45, v46, v47, v48, v49);
      v55 = (_DWORD *)*a5;
      v62 = 0;
      result = JSC::Structure::getConcurrently(v52, v55, &v62, v56, v57, v58, v59, v60);
      if (v54 < (int)result)
      {
        v61 = *a1;
        *a1 = *a2;
        *a2 = v61;
      }
    }
  }
  return result;
}

JSC::PutByVariant *WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::PutByVariant>(uint64_t a1, unint64_t a2)
{
  const JSC::PutByVariant *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  JSC::PutByVariant *result;

  v3 = (const JSC::PutByVariant *)WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = JSC::PutByVariant::PutByVariant((JSC::PutByVariant *)(*(_QWORD *)a1 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6)), v3, v4, v5, v6, v7, v8, v9);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::PutByVariant,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

JSC::DFG::Node *JSC::DFG::`anonymous namespace'::ObjectAllocationSinkingPhase::resolve(JSC::DFG::_anonymous_namespace_::ObjectAllocationSinkingPhase *this, JSC::DFG::BasicBlock *a2, JSC::DFG::Node *a3)
{
  uint64_t v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  JSC::DFG::Node *v10;
  int v11;
  JSC::DFG::Node *v12;

  v3 = *((_QWORD *)this + 64);
  if (v3)
  {
    v5 = *(_DWORD *)(v3 - 8);
    v6 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(JSC::DFG::Node **)(v3 + 16 * v9);
    if (v10 != a3)
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(JSC::DFG::Node **)(v3 + 16 * v9);
        ++v11;
        if (v10 == a3)
          goto LABEL_11;
      }
      v9 = *(unsigned int *)(v3 - 4);
    }
LABEL_11:
    if (v9 != *(_DWORD *)(v3 - 4))
    {
      v12 = *(JSC::DFG::Node **)(v3 + 16 * v9 + 8);
      if (v12)
    }
  }
  if (*((_QWORD *)a3 + 11))
    return (JSC::DFG::Node *)*((_QWORD *)a3 + 11);
  return a3;
}

int ***WTF::ListDump<WTF::Vector<JSC::DFG::PromotedLocationDescriptor,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::dump(int ***result, uint64_t a2)
{
  int ***v3;
  int *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  int **v10;
  char *v11;
  WTF::PrintStream *v12;
  float v13;
  unsigned int v14;
  int **v15;
  char *v16;
  WTF::PrintStream *v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WTF::PrintStream *v22;
  uint64_t v23;
  int v24;
  char v25;

  if (*((_DWORD *)*result + 3))
  {
    v3 = result;
    v4 = **result;
    do
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
      v6 = *((unsigned __int8 *)v3 + 40);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      v8 = v7;
      v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32);
      if (v6)
      {
        v11 = (char *)v3[1];
        v10 = v3[2];
        v12 = (WTF::PrintStream *)v9(v7);
        if (v11)
        {
          v14 = (_DWORD)v10 - 1;
          if (!v10)
            v14 = 0;
          WTF::StringImpl::utf8ForCharacters(v11, v14, (uint64_t)&v23, v13);
        }
        else
        {
          v20 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v20 = 1;
          *(_QWORD *)(v20 + 8) = 0;
          *(_BYTE *)(v20 + 16) = 0;
          v23 = v20;
          v24 = 0;
        }
        WTF::printExpectedCStringHelper(v12, "StringView", &v23);
        if (v24 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v25, &v23);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      }
      else
      {
        v16 = (char *)v3[3];
        v15 = v3[4];
        v17 = (WTF::PrintStream *)v9(v7);
        if (v16)
        {
          v19 = (_DWORD)v15 - 1;
          if (!v15)
            v19 = 0;
          WTF::StringImpl::utf8ForCharacters(v16, v19, (uint64_t)&v23, v18);
        }
        else
        {
          v21 = WTF::fastMalloc((WTF *)0x11);
          *(_DWORD *)v21 = 1;
          *(_QWORD *)(v21 + 8) = 0;
          *(_BYTE *)(v21 + 16) = 0;
          v23 = v21;
          v24 = 0;
        }
        WTF::printExpectedCStringHelper(v17, "StringView", &v23);
        if (v24 != -1)
          ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v24])(&v25, &v23);
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        *((_BYTE *)v3 + 40) = 1;
      }
      v22 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      WTF::PrintStream::printImpl<JSC::DFG::PromotedLocationKind,char [2],unsigned int,char [2]>(v22, v4, "(", v4 + 1, ")");
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
      result = (int ***)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      v4 += 2;
    }
    while (v4 != &(**v3)[2 * *((unsigned int *)*v3 + 3)]);
  }
  return result;
}

char *WTF::tryMakeString<WTF::StringView,WTF::String,WTF::StringView>@<X0>(char *result@<X0>, uint64_t *a2@<X1>, int8x16_t **a3@<X2>, int **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  char v11;
  unint64_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  char *v25;
  int8x16_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  __int128 v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  char *v41;
  char *v42;
  char *v43;
  __int16 v44;
  __int128 v45;
  char *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  __int128 v54;
  char *v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  char *v59;
  char *v60;
  char *v61;
  __int16 v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _DWORD *v69;
  int8x16x2_t v70;
  int8x16x2_t v71;
  int8x16x2_t v72;
  int8x16x2_t v73;
  int8x16x2_t v74;
  int8x16x2_t v75;
  int8x16x2_t v76;
  int8x16x2_t v77;
  int8x16x2_t v78;

  v5 = *a2;
  v6 = (uint64_t)a3[1];
  if (*a2)
    v7 = *(_DWORD *)(v5 + 4);
  else
    v7 = 0;
  if (((v7 | v6) & 0x80000000) != 0
    || ((v8 = *((_QWORD *)result + 1), v9 = __OFADD__(v7, (_DWORD)v6), v10 = v7 + v6, !v9) ? (v11 = 0) : (v11 = 1),
        (v8 & 0x80000000) != 0 || (v11 & 1) != 0 || (v12 = (v8 + v10), __OFADD__((_DWORD)v8, v10))))
  {
    v19 = 0;
    *a4 = 0;
    goto LABEL_44;
  }
  v13 = *(int8x16_t **)result;
  v14 = *a3;
  if ((v8 & 0xFF00000000) != 0 && (!v5 || (*(_BYTE *)(v5 + 16) & 4) != 0) && (v6 & 0xFF00000000) != 0)
  {
    if ((_DWORD)v12)
    {
      if ((v12 & 0x80000000) == 0)
      {
        result = (char *)WTF::tryFastCompactMalloc((WTF *)(v12 + 20), &v69);
        v19 = v69;
        if (v69)
        {
          v20 = (char *)(v69 + 5);
          *v69 = 2;
          v19[1] = v12;
          *((_QWORD *)v19 + 1) = v19 + 5;
          v19[4] = 4;
          result = WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(v20, v13->i8, v8, v5, v14->i8, v6);
        }
        goto LABEL_44;
      }
LABEL_84:
      v19 = 0;
      goto LABEL_44;
    }
LABEL_83:
    v19 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_44;
  }
  if (!(_DWORD)v12)
    goto LABEL_83;
  if (v12 > 0x7FFFFFEF)
    goto LABEL_84;
  v15 = 2 * v12;
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v16)
    goto LABEL_17;
  v17 = (unint64_t)(v15 + 35) >> 4;
  if (v12 <= 0xC6)
  {
    v18 = 23 * v17 + 7;
  }
  else if (v12 > 0x137E
         || (v18 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v17 + 626),
             *(_DWORD *)(v16 + 8052) <= v18))
  {
LABEL_17:
    result = (char *)bmalloc_try_allocate_casual(v15 + 20, 0);
    v19 = (int *)result;
    goto LABEL_29;
  }
  v21 = v16 + 8 * v18;
  v22 = v21 + 8064;
  *(_BYTE *)(v21 + 8064) = 1;
  v23 = *(unsigned int *)(v21 + 8080);
  if ((_DWORD)v23)
  {
    *(_DWORD *)(v22 + 16) = v23 - *(_DWORD *)(v22 + 20);
    v19 = (int *)(*(_QWORD *)(v22 + 8) - v23);
  }
  else
  {
    v29 = *(_QWORD *)(v22 + 40);
    v30 = *(_QWORD *)(v22 + 24);
    if (!v29)
    {
      if (*(_BYTE *)(v22 + 5) == 6)
      {
        v63 = *(unsigned int *)(v22 + 32);
        v64 = *(_DWORD *)(v22 + 36);
        if (v63 < v64)
        {
          *(_QWORD *)(v22 + 8 * v63 + 56) = 0;
          v65 = (unint64_t *)(8 * v18 + 8 * v63 + v16 + 8128);
          v66 = v64 - 1 - v63;
          while (v66)
          {
            v30 += 1024;
            v68 = *v65++;
            v67 = v68;
            LODWORD(v63) = v63 + 1;
            --v66;
            if (v68)
            {
              v29 = __rbit64(v67);
              *(_DWORD *)(v22 + 32) = v63;
              *(_QWORD *)(v22 + 24) = v30;
              goto LABEL_46;
            }
          }
          *(_DWORD *)(v22 + 32) = v64;
        }
      }
      *(_BYTE *)v22 = 0;
      goto LABEL_17;
    }
LABEL_46:
    v31 = __clz(v29);
    *(_QWORD *)(v22 + 40) = v29 & ~(0x8000000000000000 >> v31);
    v19 = (int *)(v30 + 16 * v31);
  }
  *(_BYTE *)v22 = 0;
LABEL_29:
  if (v19)
  {
    v24 = v19 + 5;
    *v19 = 2;
    v19[1] = v12;
    *((_QWORD *)v19 + 1) = v19 + 5;
    v19[4] = 0;
    if ((v8 & 0xFF00000000) != 0)
    {
      if (v8 >= 0x40)
      {
        v34 = (char *)&v24[v8 & 0xFFFFFFC0];
        v45 = 0uLL;
        v46 = (char *)(v19 + 5);
        do
        {
          v71.val[0] = *v13;
          v47 = v13[1];
          v74.val[0] = v13[2];
          v48 = v13[3];
          v13 += 4;
          v49 = v48;
          v74.val[1] = 0uLL;
          v77.val[0] = v47;
          v71.val[1] = 0uLL;
          v50 = v46;
          vst2q_s8(v50, v71);
          v50 += 32;
          v77.val[1] = 0uLL;
          vst2q_s8(v50, v77);
          v51 = v46 + 64;
          vst2q_s8(v51, v74);
          v52 = v46 + 96;
          vst2q_s8(v52, *(int8x16x2_t *)(&v45 - 1));
          v46 += 128;
        }
        while (v46 != v34);
      }
      else
      {
        v34 = (char *)(v19 + 5);
      }
      while (v34 != (char *)&v24[v8])
      {
        v53 = v13->u8[0];
        v13 = (int8x16_t *)((char *)v13 + 1);
        *(_WORD *)v34 = v53;
        v34 += 2;
      }
    }
    else if ((_DWORD)v8 == 1)
    {
      *v24 = v13->i16[0];
    }
    else if ((_DWORD)v8)
    {
      memcpy(v19 + 5, v13, 2 * v8);
    }
    v25 = (char *)&v24[v8];
    if (v5)
    {
      v26 = *(int8x16_t **)(v5 + 8);
      v27 = *(unsigned int *)(v5 + 4);
      if ((*(_BYTE *)(v5 + 16) & 4) != 0)
      {
        v32 = &v25[2 * v27];
        if (v27 >= 0x40)
        {
          v33 = &v25[2 * (v27 & 0xFFFFFFC0)];
          v54 = 0uLL;
          v55 = v25;
          do
          {
            v72.val[0] = *v26;
            v56 = v26[1];
            v75.val[0] = v26[2];
            v57 = v26[3];
            v26 += 4;
            v58 = v57;
            v75.val[1] = 0uLL;
            v78.val[0] = v56;
            v72.val[1] = 0uLL;
            v59 = v55;
            vst2q_s8(v59, v72);
            v59 += 32;
            v78.val[1] = 0uLL;
            vst2q_s8(v59, v78);
            v60 = v55 + 64;
            vst2q_s8(v60, v75);
            v61 = v55 + 96;
            vst2q_s8(v61, *(int8x16x2_t *)(&v54 - 1));
            v55 += 128;
          }
          while (v55 != v33);
        }
        else
        {
          v33 = v25;
        }
        while (v33 != v32)
        {
          v62 = v26->u8[0];
          v26 = (int8x16_t *)((char *)v26 + 1);
          *(_WORD *)v33 = v62;
          v33 += 2;
        }
      }
      else if ((_DWORD)v27 == 1)
      {
        *(_WORD *)v25 = v26->i16[0];
      }
      else if ((_DWORD)v27)
      {
        memcpy(v25, v26, 2 * v27);
      }
      v28 = *(unsigned int *)(v5 + 4);
    }
    else
    {
      v28 = 0;
    }
    result = &v25[2 * v28];
    if ((v6 & 0xFF00000000) != 0)
    {
      v35 = &result[2 * v6];
      if (v6 >= 0x40)
      {
        v36 = &result[2 * (v6 & 0xFFFFFFC0)];
        v37 = 0uLL;
        do
        {
          v70.val[0] = *v14;
          v38 = v14[1];
          v73.val[0] = v14[2];
          v39 = v14[3];
          v14 += 4;
          v40 = v39;
          v73.val[1] = 0uLL;
          v76.val[0] = v38;
          v70.val[1] = 0uLL;
          v41 = result;
          vst2q_s8(v41, v70);
          v41 += 32;
          v76.val[1] = 0uLL;
          vst2q_s8(v41, v76);
          v42 = result + 64;
          vst2q_s8(v42, v73);
          v43 = result + 96;
          vst2q_s8(v43, *(int8x16x2_t *)(&v37 - 1));
          result += 128;
        }
        while (result != v36);
        result = v36;
      }
      while (result != v35)
      {
        v44 = v14->u8[0];
        v14 = (int8x16_t *)((char *)v14 + 1);
        *(_WORD *)result = v44;
        result += 2;
      }
    }
    else if ((_DWORD)v6 == 1)
    {
      *(_WORD *)result = v14->i16[0];
    }
    else if ((_DWORD)v6)
    {
      result = (char *)memcpy(result, v14, 2 * v6);
    }
  }
LABEL_44:
  *a4 = v19;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::StringView,void>>(char *__dst, char *a2, uint64_t a3, uint64_t a4, char *__src, uint64_t a6)
{
  int v9;
  char *v11;
  char *v12;
  size_t v13;
  uint64_t v14;
  char *result;
  char *v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  char v19;
  char *v20;
  char *v21;
  unsigned __int128 v22;
  char v23;
  char *v24;
  unsigned __int128 *v25;
  unsigned __int128 v26;
  char v27;

  v9 = a3;
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3 == 1)
    {
      *__dst = *a2;
    }
    else if ((_DWORD)a3)
    {
      memcpy(__dst, a2, a3);
    }
  }
  else
  {
    v16 = __dst;
    if (a3 >= 0x10)
    {
      v16 = &__dst[a3 & 0xFFFFFFF0];
      v17 = (unsigned __int128 *)__dst;
      do
      {
        v18 = (unsigned __int128)vld2q_s8(a2);
        a2 += 32;
        *v17++ = v18;
      }
      while (v17 != (unsigned __int128 *)v16);
    }
    while (v16 != &__dst[a3])
    {
      v19 = *a2;
      a2 += 2;
      *v16++ = v19;
    }
  }
  v11 = &__dst[v9];
  if (a4)
  {
    v12 = *(char **)(a4 + 8);
    v13 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v13 == 1)
      {
        *v11 = *v12;
      }
      else if ((_DWORD)v13)
      {
        memcpy(v11, v12, v13);
      }
    }
    else
    {
      if (v13 < 0x10)
      {
        v24 = v11;
      }
      else
      {
        v24 = &v11[v13 & 0xFFFFFFF0];
        v25 = (unsigned __int128 *)v11;
        do
        {
          v26 = (unsigned __int128)vld2q_s8(v12);
          v12 += 32;
          *v25++ = v26;
        }
        while (v25 != (unsigned __int128 *)v24);
      }
      while (v24 != &v11[v13])
      {
        v27 = *v12;
        v12 += 2;
        *v24++ = v27;
      }
    }
    v14 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v14 = 0;
  }
  result = &v11[v14];
  if ((a6 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a6 == 1)
    {
      *result = *__src;
    }
    else if ((_DWORD)a6)
    {
      return (char *)memcpy(result, __src, a6);
    }
  }
  else
  {
    v20 = &result[a6];
    if (a6 >= 0x10)
    {
      v21 = &result[a6 & 0xFFFFFFF0];
      do
      {
        v22 = (unsigned __int128)vld2q_s8(__src);
        __src += 32;
        *(_OWORD *)result = v22;
        result += 16;
      }
      while (result != v21);
      result = v21;
    }
    while (result != v20)
    {
      v23 = *__src;
      __src += 2;
      *result++ = v23;
    }
  }
  return result;
}

const char *JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>(unsigned __int8 *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  unsigned __int8 *v42;
  const char *result;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  unsigned __int8 *v64;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  int v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  char v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  int v94;
  BOOL v95;
  uint64_t v96;
  int v97;
  int v98;
  _WORD *v99;
  uint64_t v100;
  int v101;
  int v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  unsigned int v143;
  int v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  unsigned int v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __n128 v166;
  unint64_t v167;
  int v168;
  unsigned int v169;
  int v170;
  unsigned int v171;
  int v172;
  uint64_t v173;
  unsigned __int8 *v174;
  int v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  int v179;
  int v180;
  unint64_t v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  unint64_t v189;
  int v190;
  unint64_t MoreOutOfLineStorage;
  uint64_t v192;
  uint64_t v193;
  int v194;
  _WORD *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  int v200;
  uint64_t v202;
  _QWORD v203[3];
  unsigned int **v204;
  int v205;

  v15 = *(_DWORD *)a1;
  v16 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  v17 = *(_DWORD *)(v16 + 0x10);
  if ((v17 & 3) != 0)
  {
    if ((v17 & 0x100000) != 0)
      return JSC::JSObject::putDirectToDictionaryWithoutExtensibility((JSC::JSCell *)a1, (JSC::VM *)a2, (JSC::Structure *)a3, a4, a6, a6, a7, a8, a9.n128_f64[0]);
    v46 = *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x58);
    if (!v46)
    {
      JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (v15 & 0xFFFFFFFE)), (JSC::VM *)a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
      v46 = v47;
    }
    v48 = *(_QWORD *)(v46 + 16);
    v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
    v50 = *(unsigned int *)(v46 + 8);
    v51 = *(_DWORD *)(a3 + 16);
    if ((v48 & 1) != 0)
    {
      if ((v51 & 0x20) != 0)
        v51 = *(_DWORD *)(a3 + 32);
      v52 = *(_DWORD *)(v46 + 12);
      v53 = (v51 >> 8) & *(_QWORD *)&v52;
      v54 = *(unsigned __int8 *)(v49 + v53);
      if (!*(_BYTE *)(v49 + v53))
        goto LABEL_64;
      v55 = v49 + v50;
      v56 = 1;
      while (1)
      {
        v57 = *(_QWORD *)(v55 + 8 * (v54 - 1));
        if (a3 == (v57 & 0xFFFFFFFFFFFFLL))
          break;
        v53 = ((_DWORD)v53 + v56) & v52;
        v54 = *(unsigned __int8 *)(v49 + v53);
        ++v56;
        if (!*(_BYTE *)(v49 + v53))
          goto LABEL_64;
      }
      v63 = (v57 >> 16) & 0xFF00000000 | HIBYTE(v57);
    }
    else
    {
      if ((v51 & 0x20) != 0)
        v51 = *(_DWORD *)(a3 + 32);
      v101 = *(_DWORD *)(v46 + 12);
      LODWORD(v53) = v101 & (v51 >> 8);
      v102 = *(_DWORD *)(v49 + 4 * v53);
      if (!v102)
        goto LABEL_64;
      v103 = v49 + 4 * v50;
      v104 = 1;
      while (1)
      {
        v105 = (v102 - 1);
        if (*(_QWORD *)(v103 + 16 * v105) == a3)
          break;
        LODWORD(v53) = (v53 + v104) & v101;
        v102 = *(_DWORD *)(v49 + 4 * v53);
        ++v104;
        if (!v102)
          goto LABEL_64;
      }
      v63 = *(unsigned int *)(v103 + 16 * v105 + 8) | ((unint64_t)*(unsigned __int8 *)(v103 + 16 * v105 + 12) << 32);
    }
    if ((_DWORD)v63 != -1)
    {
      if ((v63 & 0x3200000000) == 0)
      {
        if ((int)v63 <= 63)
        {
          v148 = (uint64_t)(a1 + 16);
          v149 = v63;
        }
        else
        {
          v148 = *((_QWORD *)a1 + 1) - 8;
          v149 = 63 - v63;
        }
        *(_QWORD *)(v148 + 8 * v149) = a4;
        if ((a4 & 0xFFFE000000000002) == 0 && a1 && a4 && *(_DWORD *)(a2 + 760) >= a1[7])
          JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
        if ((*(_BYTE *)(16 * (v15 & 0xFFFFFFFE) + 0x12) & 4) != 0)
          JSC::Structure::didReplacePropertySlow(16 * (v15 & 0xFFFFFFFE), v63, (JSC::Structure *)a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
        goto LABEL_220;
      }
      return "Attempting to change value of a readonly property.";
    }
LABEL_64:
    v64 = (unsigned __int8 *)(v16 + 15);
    if (__ldaxr((unsigned __int8 *)(v16 + 15)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v64))
    {
LABEL_67:
      ++*(_DWORD *)(a2 + 916);
      *(_DWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x10) |= 4u;
      v200 = v15;
      if (v46)
      {
        *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x58) = v46;
        if (*(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(16 * (v15 & 0xFFFFFFFE) + 7))
          JSC::Heap::writeBarrierSlowPath(a2 + 192, 16 * (v15 & 0xFFFFFFFE));
      }
      else
      {
        *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x58) = 0;
      }
      v66 = *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40);
      if (v66 && *(_BYTE *)(v66 + 5) != 1)
        *(_DWORD *)(v66 + 80) = 0;
      else
        *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40) = 0;
      v67 = *(unsigned int *)(16 * (v15 & 0xFFFFFFFE) + 0x48);
      *(_DWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x48) = 0;
      if ((_DWORD)v67)
      {
        v68 = (WTF::StringImpl *)(16 * v67);
        v69 = *(_DWORD *)(16 * v67) - 2;
        if (v69)
        {
          *(_DWORD *)v68 = v69;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v68, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
        }
      }
      if ((a5 & 4) != 0)
      {
        v70 = *(_DWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x10) & 0xFFFFFF9F | 0x40;
      }
      else
      {
        if (!a3 || (*(_BYTE *)(a3 + 16) & 0x20) == 0)
        {
LABEL_79:
          if ((a5 & 8) != 0)
          {
            v199 = *(_DWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x10);
            *(_DWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x10) = v199 | 0x40000000;
            if ((a5 & 0x72) != 0)
              *(_DWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x10) = v199 | 0xC0000000;
          }
          if (*(_QWORD *)(*(_QWORD *)(a2 + 41952) + 16) == a3)
            *(_DWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x10) |= 0x20000000u;
          v71 = *(unsigned __int8 *)(16 * (v15 & 0xFFFFFFFE) + 0xE);
          v72 = *(_QWORD *)(v46 + 32);
          if (v72 && (v193 = *(unsigned int *)(v72 + 12), (_DWORD)v193))
          {
            v78 = *(_DWORD *)(*(_QWORD *)v72 + 4 * v193 - 4);
            *(_DWORD *)(v72 + 12) = v193 - 1;
          }
          else
          {
            v73 = *(_DWORD *)(v46 + 24);
            v74 = __OFSUB__(v73, v71);
            v76 = v73 - v71;
            v75 = (v76 < 0) ^ v74;
            v77 = v76 + 64;
            if (v75)
              v78 = *(_DWORD *)(v46 + 24);
            else
              v78 = v77;
          }
          v79 = *(_DWORD *)(a3 + 16);
          if ((v79 & 0x20) != 0)
            v79 = *(_DWORD *)(a3 + 32);
          v80 = *(_DWORD *)(v16 + 28) ^ (v79 >> 8);
          v81 = *(_DWORD *)(v16 + 32) | (a3 >> 4);
          *(_DWORD *)(v16 + 28) = v80;
          *(_DWORD *)(v16 + 32) = v81;
          *(_DWORD *)a3 += 2;
          v82 = *(_DWORD *)(v46 + 24);
          if ((*(_DWORD *)(v46 + 28) + v82) >= *(_DWORD *)(v46 + 8) >> 1
            || (v83 = *(_QWORD *)(v46 + 16), (v83 & 1) != 0) && v78 > 255)
          {
            JSC::PropertyTable::rehash((JSC::PropertyTable *)v46, (JSC::VM *)a2, (v82 + 1), v78 < 256, a5, a6, a7, a8);
            v83 = *(_QWORD *)(v46 + 16);
            v84 = v83 & 0xFFFFFFFFFFFFFFFELL;
            v150 = *(unsigned int *)(v46 + 8);
            v151 = *(_DWORD *)(a3 + 16);
            if ((v83 & 1) != 0)
            {
              if ((v151 & 0x20) != 0)
                v151 = *(_DWORD *)(a3 + 32);
              v152 = *(_DWORD *)(v46 + 12);
              v53 = (v151 >> 8) & *(_QWORD *)&v152;
              v153 = *(unsigned __int8 *)(v84 + v53);
              if (*(_BYTE *)(v84 + v53))
              {
                v154 = v84 + v150;
                v155 = 1;
                do
                {
                  if (a3 == (*(_QWORD *)(v154 + 8 * (v153 - 1)) & 0xFFFFFFFFFFFFLL))
                    break;
                  v53 = ((_DWORD)v53 + v155) & v152;
                  v153 = *(unsigned __int8 *)(v84 + v53);
                  ++v155;
                }
                while (*(_BYTE *)(v84 + v53));
              }
            }
            else
            {
              if ((v151 & 0x20) != 0)
                v151 = *(_DWORD *)(a3 + 32);
              v187 = *(_DWORD *)(v46 + 12);
              LODWORD(v53) = v187 & (v151 >> 8);
              v188 = *(_DWORD *)(v84 + 4 * v53);
              if (v188)
              {
                v189 = v84 + 4 * v150;
                v190 = 1;
                do
                {
                  if (*(_QWORD *)(v189 + 16 * (v188 - 1)) == a3)
                    break;
                  LODWORD(v53) = (v53 + v190) & v187;
                  v188 = *(_DWORD *)(v84 + 4 * v53);
                  ++v190;
                }
                while (v188);
              }
            }
          }
          else
          {
            v84 = v83 & 0xFFFFFFFFFFFFFFFELL;
          }
          v85 = *(_DWORD *)(v46 + 28) + *(_DWORD *)(v46 + 24);
          v86 = v85 + 1;
          if ((v83 & 1) != 0)
          {
            *(_BYTE *)(v84 + v53) = v86;
            *(_QWORD *)(v84 + *(unsigned int *)(v46 + 8) + 8 * v85) = a3 | ((unint64_t)(a5 | (v78 << 8)) << 48);
          }
          else
          {
            *(_DWORD *)(v84 + 4 * v53) = v86;
            v100 = v84 + 4 * *(unsigned int *)(v46 + 8) + 16 * v85;
            *(_QWORD *)v100 = a3;
            *(_DWORD *)(v100 + 8) = v78;
            *(_BYTE *)(v100 + 12) = a5;
          }
          ++*(_DWORD *)(v46 + 24);
          v87 = *(unsigned __int16 *)(v16 + 24);
          if (v87 == 65534)
          {
            v88 = a4;
            if (v78 < -1)
              goto LABEL_129;
            v91 = 0;
            v90 = v78;
          }
          else
          {
            v88 = a4;
            if (v87 == 0xFFFF)
              v89 = *(_DWORD *)(*(_QWORD *)(v16 + 64) + 84);
            else
              v89 = *(unsigned __int16 *)(v16 + 24);
            if (v78 <= v89)
              v90 = v89;
            else
              v90 = v78;
            if (v89 >= 64)
            {
              if ((v89 - 63) >= 5)
              {
                v137 = (v89 - 64) | ((v89 - 64) >> 1) | (((v89 - 64) | ((v89 - 64) >> 1)) >> 2);
                v138 = v137 | (v137 >> 4) | ((v137 | (v137 >> 4)) >> 8);
                v91 = (v138 | HIWORD(v138)) + 1;
              }
              else
              {
                v91 = 4;
              }
            }
            else
            {
              v91 = 0;
            }
          }
          if (v90 >= 64)
          {
            if ((v90 - 63) >= 5)
            {
              v135 = (v90 - 64) | ((v90 - 64) >> 1) | (((v90 - 64) | ((v90 - 64) >> 1)) >> 2);
              v136 = v135 | (v135 >> 4) | ((v135 | (v135 >> 4)) >> 8);
              v92 = (v136 | HIWORD(v136)) + 1;
            }
            else
            {
              v92 = 4;
            }
          }
          else
          {
            v92 = 0;
          }
          if (v92 != v91)
          {
            MoreOutOfLineStorage = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a1, (JSC::VM *)a2, v91, v92, a5, a6, a7, a8, a9);
            v192 = a2 + 192;
            if (*(_BYTE *)(a2 + 755))
            {
              *(_DWORD *)a1 = v200 | 1;
              __dmb(0xAu);
              *((_QWORD *)a1 + 1) = MoreOutOfLineStorage;
              if (*(_DWORD *)(a2 + 760) >= a1[7])
                JSC::Heap::writeBarrierSlowPath(v192, (unint64_t)a1);
              __dmb(0xAu);
            }
            else
            {
              *((_QWORD *)a1 + 1) = MoreOutOfLineStorage;
              if (*(_DWORD *)(a2 + 760) >= a1[7])
                JSC::Heap::writeBarrierSlowPath(v192, (unint64_t)a1);
            }
            if (v90 == -1)
            {
              *(_WORD *)(v16 + 24) = -2;
            }
            else if (v90 > 65533)
            {
              v198 = *(_QWORD *)(v16 + 64);
              if (*(__int16 *)(v16 + 24) == -1)
              {
                *(_DWORD *)(v198 + 84) = v90;
              }
              else
              {
                if (!v198 || *(_BYTE *)(v198 + 5) == 1)
                {
                  JSC::Structure::allocateRareData((JSC::Structure *)v16, (JSC::VM *)a2, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
                  v198 = *(_QWORD *)(v16 + 64);
                }
                *(_DWORD *)(v198 + 84) = v90;
                __dmb(0xAu);
                *(_WORD *)(v16 + 24) = -1;
              }
              v88 = a4;
            }
            else
            {
              *(_WORD *)(v16 + 24) = v90;
            }
            __dmb(0xAu);
            *(_DWORD *)a1 = v200;
LABEL_108:
            v93 = __ldxr(v64);
            if (v93 == 1)
            {
              if (!__stlxr(0, v64))
              {
LABEL_113:
                v94 = *(_DWORD *)(a2 + 916) - 1;
                *(_DWORD *)(a2 + 916) = v94;
                if (*(unsigned __int8 *)(a2 + 1198) | HIBYTE(dword_1ECF4C5CE))
                  v95 = v94 == 0;
                else
                  v95 = 0;
                if (v95)
                {
                  *(_BYTE *)(a2 + 1198) = 0;
                  JSC::Heap::collectIfNecessaryOrDefer(a2 + 192, 0);
                }
                if (v78 <= 63)
                {
                  v96 = (uint64_t)(a1 + 16);
                  v97 = v78;
                }
                else
                {
                  v96 = *((_QWORD *)a1 + 1) - 8;
                  v97 = 63 - v78;
                }
                *(_QWORD *)(v96 + 8 * v97) = v88;
                if ((v88 & 0xFFFE000000000002) == 0 && a1 && v88 && *(_DWORD *)(a2 + 760) >= a1[7])
                  JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
                *(_BYTE *)(a6 + 21) = 2;
                *(_QWORD *)a6 = a1;
                *(_DWORD *)(a6 + 16) = v78;
                v98 = *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x10);
                if ((a5 & 2) != 0)
                {
                  v98 |= 0x10u;
                  *(_DWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x10) = v98;
                }
                if ((v98 & 0x80000) == 0)
                  return 0;
                result = 0;
                v99 = *(_WORD **)(a2 + 93080);
                if (!v99)
                  return result;
                goto LABEL_303;
              }
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v16 + 15), 0, a3, a4, a5, a6, a7, a8);
            goto LABEL_113;
          }
          if (v90 != -1)
          {
            if (v90 > 65533)
            {
              v197 = *(_QWORD *)(v16 + 64);
              if (v87 == 0xFFFF)
              {
                *(_DWORD *)(v197 + 84) = v90;
              }
              else
              {
                if (!v197 || *(_BYTE *)(v197 + 5) == 1)
                {
                  JSC::Structure::allocateRareData((JSC::Structure *)v16, (JSC::VM *)a2, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
                  v197 = *(_QWORD *)(v16 + 64);
                }
                *(_DWORD *)(v197 + 84) = v90;
                __dmb(0xAu);
                *(_WORD *)(v16 + 24) = -1;
              }
              v88 = a4;
            }
            else
            {
              *(_WORD *)(v16 + 24) = v90;
            }
            goto LABEL_108;
          }
LABEL_129:
          *(_WORD *)(v16 + 24) = -2;
          goto LABEL_108;
        }
        v70 = *(_DWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x10) & 0xFFFFFFDF;
      }
      *(_DWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x10) = v70;
      goto LABEL_79;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v16 + 15);
    goto LABEL_67;
  }
  if ((v17 & 0x8000000) != 0)
    goto LABEL_150;
  v18 = *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x50);
  if ((v18 & 1) == 0)
  {
    v19 = *(_QWORD *)(v18 + 8);
    if (v19)
    {
      v20 = a3 | (a5 << 48) | 0x100000000000000;
      v21 = *(_DWORD *)(v19 - 8);
      v22 = (v20 + ~(a3 << 32)) ^ ((v20 + ~(a3 << 32)) >> 22);
      v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      v25 = v21 & ((v24 >> 31) ^ v24);
      v26 = *(_QWORD *)(v19 + 16 * v25);
      if (v26 == v20)
      {
LABEL_6:
        v27 = *(_QWORD *)(v19 + 16 * v25 + 8);
        if (v27)
        {
          if ((*(_BYTE *)(v27 + 8) & 3) == 0)
          {
            v28 = *(_QWORD *)v27;
            if (*(_QWORD *)v27)
              goto LABEL_9;
          }
        }
      }
      else
      {
        v62 = 1;
        while (v26)
        {
          v25 = ((_DWORD)v25 + v62) & v21;
          v26 = *(_QWORD *)(v19 + 16 * v25);
          ++v62;
          if (v26 == v20)
            goto LABEL_6;
        }
      }
    }
LABEL_150:
    v205 = 0;
    if ((a3 >> 4) && ((a3 >> 4) & ~*(_DWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x20)) == 0)
    {
      v106 = *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x58);
      if (v106
        || (v139 = *(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v139 + 5) == 1 || *(_DWORD *)(v139 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (v15 & 0xFFFFFFFE)), (JSC::VM *)a2, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), v106))
      {
        if (*(_DWORD *)(v106 + 24))
        {
          v107 = *(_QWORD *)(v106 + 16);
          v108 = v107 & 0xFFFFFFFFFFFFFFFELL;
          v109 = *(unsigned int *)(v106 + 8);
          v110 = *(_DWORD *)(a3 + 16);
          if ((v107 & 1) != 0)
          {
            if ((v110 & 0x20) != 0)
              v110 = *(_DWORD *)(a3 + 32);
            v111 = *(_DWORD *)(v106 + 12);
            v112 = (v110 >> 8) & *(_QWORD *)&v111;
            v113 = *(unsigned __int8 *)(v108 + v112);
            if (!*(_BYTE *)(v108 + v112))
              goto LABEL_236;
            v114 = v108 + v109;
            v115 = 1;
            while (1)
            {
              v116 = *(_QWORD *)(v114 + 8 * (v113 - 1));
              if (a3 == (v116 & 0xFFFFFFFFFFFFLL))
                break;
              v112 = ((_DWORD)v112 + v115) & v111;
              v113 = *(unsigned __int8 *)(v108 + v112);
              ++v115;
              if (!*(_BYTE *)(v108 + v112))
                goto LABEL_236;
            }
            v63 = (v116 >> 16) & 0xFF00000000 | HIBYTE(v116);
          }
          else
          {
            if ((v110 & 0x20) != 0)
              v110 = *(_DWORD *)(a3 + 32);
            v142 = *(_DWORD *)(v106 + 12);
            v143 = v142 & (v110 >> 8);
            v144 = *(_DWORD *)(v108 + 4 * v143);
            if (!v144)
              goto LABEL_236;
            v145 = v108 + 4 * v109;
            v146 = 1;
            while (1)
            {
              v147 = (v144 - 1);
              if (*(_QWORD *)(v145 + 16 * v147) == a3)
                break;
              v143 = (v143 + v146) & v142;
              v144 = *(_DWORD *)(v108 + 4 * v143);
              ++v146;
              if (!v144)
                goto LABEL_236;
            }
            v63 = *(unsigned int *)(v145 + 16 * v147 + 8) | ((unint64_t)*(unsigned __int8 *)(v145 + 16 * v147 + 12) << 32);
          }
          if ((_DWORD)v63 != -1)
          {
            if ((v63 & 0x3200000000) == 0)
            {
              if ((*(_BYTE *)(16 * (v15 & 0xFFFFFFFE) + 0x12) & 4) != 0)
                JSC::Structure::didReplacePropertySlow(16 * (v15 & 0xFFFFFFFE), v63, (JSC::Structure *)a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
              if ((int)v63 <= 63)
              {
                v140 = (uint64_t)(a1 + 16);
                v141 = v63;
              }
              else
              {
                v140 = *((_QWORD *)a1 + 1) - 8;
                v141 = 63 - v63;
              }
              *(_QWORD *)(v140 + 8 * v141) = a4;
              if ((a4 & 0xFFFE000000000002) == 0 && a1 && a4 && *(_DWORD *)(a2 + 760) >= a1[7])
                JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
LABEL_220:
              result = 0;
              *(_BYTE *)(a6 + 21) = 1;
              *(_QWORD *)a6 = a1;
              *(_DWORD *)(a6 + 16) = v63;
              return result;
            }
            return "Attempting to change value of a readonly property.";
          }
        }
      }
    }
LABEL_236:
    v205 = -1;
    if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 0x10) != 0)
      return "Attempting to define property on object that is not extensible.";
    LODWORD(v202) = 1;
    WORD2(v202) = 0;
    v203[0] = v203;
    v203[1] = v203;
    v203[2] = a2;
    v204 = (unsigned int **)(16 * (v15 & 0xFFFFFFFE));
    v158 = JSC::Structure::addNewPropertyTransition((JSC::VM *)a2, v204, a3, (const JSC::PropertyTable *)a5, &v205, *(unsigned __int8 *)(a6 + 22), (JSC::Structure *)&v202, a8, a9.n128_f64[0]);
    v167 = v158;
    v168 = *(unsigned __int16 *)(16 * (v15 & 0xFFFFFFFE) + 0x18);
    if (v168 == 65534)
      goto LABEL_241;
    if (v168 == 0xFFFF)
      v168 = *(_DWORD *)(*(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40) + 84);
    if (v168 < 64)
    {
LABEL_241:
      v169 = 0;
    }
    else if ((v168 - 63) >= 5)
    {
      v183 = (v168 - 64) | ((v168 - 64) >> 1) | (((v168 - 64) | ((v168 - 64) >> 1)) >> 2);
      v184 = v183 | (v183 >> 4) | ((v183 | (v183 >> 4)) >> 8);
      v169 = (v184 | HIWORD(v184)) + 1;
    }
    else
    {
      v169 = 4;
    }
    v170 = *(unsigned __int16 *)(v158 + 24);
    if (v170 == 65534)
      goto LABEL_246;
    if (v170 == 0xFFFF)
      v170 = *(_DWORD *)(*(_QWORD *)(v158 + 64) + 84);
    if (v170 < 64)
    {
LABEL_246:
      v171 = 0;
    }
    else if ((v170 - 63) >= 5)
    {
      v185 = (v170 - 64) | ((v170 - 64) >> 1) | (((v170 - 64) | ((v170 - 64) >> 1)) >> 2);
      v186 = v185 | (v185 >> 4) | ((v185 | (v185 >> 4)) >> 8);
      v171 = (v186 | HIWORD(v186)) + 1;
    }
    else
    {
      v171 = 4;
    }
    if (v169 != v171)
    {
      v181 = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a1, (JSC::VM *)a2, v169, v171, v162, v163, v164, v165, v166);
      v182 = a2 + 192;
      if (*(_BYTE *)(a2 + 755))
      {
        *(_DWORD *)a1 = v15 | 1;
        __dmb(0xAu);
        *((_QWORD *)a1 + 1) = v181;
        if (*(_DWORD *)(a2 + 760) >= a1[7])
          JSC::Heap::writeBarrierSlowPath(v182, (unint64_t)a1);
        __dmb(0xAu);
      }
      else
      {
        *((_QWORD *)a1 + 1) = v181;
        if (*(_DWORD *)(a2 + 760) >= a1[7])
          JSC::Heap::writeBarrierSlowPath(v182, (unint64_t)a1);
      }
    }
    v172 = v205;
    if (v205 <= 63)
    {
      v173 = (uint64_t)(a1 + 16);
    }
    else
    {
      v173 = *((_QWORD *)a1 + 1) - 8;
      v172 = 63 - v205;
    }
    *(_QWORD *)(v173 + 8 * v172) = a4;
    if (a4 && (a4 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a2 + 760) >= a1[7])
      JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
    *(_DWORD *)a1 = v167 >> 4;
    a1[6] = a1[6] & 0x80 | *(_BYTE *)(v167 + 10);
    a1[5] = *(_BYTE *)(v167 + 9);
    v174 = a1 + 4;
    if (a1[4] != *(unsigned __int8 *)(v167 + 8))
    {
      do
      {
        while (1)
        {
          v179 = *v174;
          v180 = __ldxr(v174);
          if (v180 == v179)
            break;
          __clrex();
        }
      }
      while (__stxr(v179 & 0xC0 | *(_BYTE *)(v167 + 8), v174));
    }
    if (*(_DWORD *)(a2 + 760) >= a1[7])
      JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
    v175 = v205;
    *(_BYTE *)(a6 + 21) = 2;
    *(_QWORD *)a6 = a1;
    *(_DWORD *)(a6 + 16) = v175;
    if ((a5 & 2) != 0)
      *(_DWORD *)(v167 + 16) |= 0x10u;
    if ((*(_BYTE *)((16 * *(unsigned int *)a1) | 0x12) & 8) != 0)
    {
      v195 = *(_WORD **)(a2 + 93080);
      if (v195)
      {
        if ((v195 & 1) == 0)
        {
          v196 = (unsigned __int16)v195[66560]++ + 1;
          if ((v196 & 0x10000) != 0)
            JSC::MegamorphicCache::clearEntries(v195);
        }
      }
    }
    if (BYTE4(v202) == 1)
      JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow(&v202, v166.n128_f64[0], v159, v160, v161, v162, v163, v164, v165);
    while (1)
    {
      v176 = (_QWORD *)v203[0];
      if ((_QWORD *)v203[0] == v203)
        break;
      v178 = *(_QWORD *)v203[0];
      v177 = *(_QWORD **)(v203[0] + 8);
      *v177 = *(_QWORD *)v203[0];
      *(_QWORD *)(v178 + 8) = v177;
      *v176 = 0;
      v176[1] = 0;
    }
    return 0;
  }
  v28 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if ((v18 & 0xFFFFFFFFFFFFFFFELL) == 0)
    goto LABEL_150;
  v58 = (*(_DWORD *)(v28 + 16) >> 13) & 0x1F;
  if ((_DWORD)v58 == 16)
  {
    v59 = *(_QWORD *)(v28 + 48);
    v60 = v59 | 0x1000000000000000;
    v95 = v59 == 2;
    v61 = 0x1000000000000000;
    if (!v95)
      v61 = v60;
  }
  else
  {
    v61 = (v58 << 56) | (16 * *(unsigned int *)(v28 + 72));
  }
  if ((v61 | ((unint64_t)*(unsigned __int8 *)(v28 + 20) << 48)) != (a3 | (a5 << 48) | 0x100000000000000))
    goto LABEL_150;
LABEL_9:
  v29 = *(unsigned __int16 *)(v28 + 22);
  if (v29 == 65534)
  {
    v29 = -1;
  }
  else if (v29 == 0xFFFF)
  {
    v29 = *(_DWORD *)(*(_QWORD *)(v28 + 64) + 88);
  }
  v30 = *(unsigned __int16 *)(16 * (v15 & 0xFFFFFFFE) + 0x18);
  if (v30 == 65534)
  {
    v35 = 0;
  }
  else
  {
    if (v30 == 0xFFFF)
      v31 = *(_DWORD *)(*(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40) + 84);
    else
      v31 = *(unsigned __int16 *)(16 * (v15 & 0xFFFFFFFE) + 0x18);
    v32 = (v31 - 64) | ((v31 - 64) >> 1) | (((v31 - 64) | ((v31 - 64) >> 1)) >> 2);
    v33 = v32 | (v32 >> 4) | ((v32 | (v32 >> 4)) >> 8);
    v34 = v33 | HIWORD(v33);
    if ((v31 - 63) >= 5)
      v35 = v34 + 1;
    else
      v35 = 4;
    if (v31 < 64)
      v35 = 0;
  }
  v36 = *(unsigned __int16 *)(v28 + 24);
  if (v36 == 65534
    || (v36 == 0xFFFF ? (v37 = *(_DWORD *)(*(_QWORD *)(v28 + 64) + 84)) : (v37 = *(unsigned __int16 *)(v28 + 24)),
        v37 < 64))
  {
    v38 = 0;
  }
  else if ((v37 - 63) >= 5)
  {
    v133 = (v37 - 64) | ((v37 - 64) >> 1) | (((v37 - 64) | ((v37 - 64) >> 1)) >> 2);
    v134 = v133 | (v133 >> 4) | ((v133 | (v133 >> 4)) >> 8);
    v38 = (v134 | HIWORD(v134)) + 1;
  }
  else
  {
    v38 = 4;
  }
  if (v35 != v38)
  {
    if (v30 == 65534)
    {
      v121 = 0;
    }
    else
    {
      if (v30 == 0xFFFF)
        v30 = *(_DWORD *)(*(_QWORD *)(16 * (v15 & 0xFFFFFFFE) + 0x40) + 84);
      v117 = (v30 - 64) | ((v30 - 64) >> 1) | (((v30 - 64) | ((v30 - 64) >> 1)) >> 2);
      v118 = v117 | (v117 >> 4) | ((v117 | (v117 >> 4)) >> 8);
      v119 = (v118 | HIWORD(v118)) + 1;
      if ((v30 - 63) >= 5)
        v120 = v119;
      else
        v120 = 4;
      if (v30 >= 64)
        v121 = v120;
      else
        v121 = 0;
    }
    if (v36 == 65534)
      goto LABEL_176;
    if (v36 == 0xFFFF)
      v36 = *(_DWORD *)(*(_QWORD *)(v28 + 64) + 84);
    if (v36 < 64)
    {
LABEL_176:
      v122 = 0;
    }
    else if ((v36 - 63) >= 5)
    {
      v156 = (v36 - 64) | ((v36 - 64) >> 1) | (((v36 - 64) | ((v36 - 64) >> 1)) >> 2);
      v157 = v156 | (v156 >> 4) | ((v156 | (v156 >> 4)) >> 8);
      v122 = (v157 | HIWORD(v157)) + 1;
    }
    else
    {
      v122 = 4;
    }
    v123 = JSC::JSObject::allocateMoreOutOfLineStorage((JSC::JSObject *)a1, (JSC::VM *)a2, v121, v122, a5, a6, a7, a8, a9);
    v124 = a2 + 192;
    if (*(_BYTE *)(a2 + 755))
    {
      *(_DWORD *)a1 = v15 | 1;
      __dmb(0xAu);
      *((_QWORD *)a1 + 1) = v123;
      if (*(_DWORD *)(a2 + 760) >= a1[7])
        JSC::Heap::writeBarrierSlowPath(v124, (unint64_t)a1);
      __dmb(0xAu);
    }
    else
    {
      *((_QWORD *)a1 + 1) = v123;
      if (*(_DWORD *)(a2 + 760) >= a1[7])
        JSC::Heap::writeBarrierSlowPath(v124, (unint64_t)a1);
    }
  }
  if (v29 <= 63)
  {
    v39 = (uint64_t)(a1 + 16);
    v40 = v29;
  }
  else
  {
    v39 = *((_QWORD *)a1 + 1) - 8;
    v40 = 63 - v29;
  }
  *(_QWORD *)(v39 + 8 * v40) = a4;
  if ((a4 & 0xFFFE000000000002) == 0 && a1 && a4 && *(_DWORD *)(a2 + 760) >= a1[7])
    JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
  v41 = v28 >> 4;
  *(_DWORD *)a1 = v28 >> 4;
  a1[6] = a1[6] & 0x80 | *(_BYTE *)(v28 + 10);
  a1[5] = *(_BYTE *)(v28 + 9);
  v42 = a1 + 4;
  if (a1[4] != *(unsigned __int8 *)(v28 + 8))
  {
    do
    {
      while (1)
      {
        v44 = *v42;
        v45 = __ldxr(v42);
        if (v45 == v44)
          break;
        __clrex();
      }
    }
    while (__stxr(v44 & 0xC0 | *(_BYTE *)(v28 + 8), v42));
  }
  if (*(_DWORD *)(a2 + 760) >= a1[7])
  {
    JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
    LODWORD(v41) = *(_DWORD *)a1;
  }
  *(_BYTE *)(a6 + 21) = 2;
  *(_QWORD *)a6 = a1;
  *(_DWORD *)(a6 + 16) = v29;
  if ((*(_BYTE *)((16 * v41) | 0x12) & 8) == 0)
    return 0;
  result = 0;
  v99 = *(_WORD **)(a2 + 93080);
  if (v99)
  {
LABEL_303:
    if ((v99 & 1) == 0)
    {
      v194 = (unsigned __int16)v99[66560]++ + 1;
      if ((v194 & 0x10000) != 0)
        JSC::MegamorphicCache::clearEntries(v99);
      return 0;
    }
  }
  return result;
}

JSC::VM *JSC::jsSubstringOfResolved(JSC *this, JSC::VM *a2, JSC::JSString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  WTF::StringImpl *v10;
  unsigned __int8 v11;
  unint64_t v12;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  int v32;
  uint64_t v34;
  JSC::VM *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  int v44;
  _DWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  JSC::VM *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t SlowCase;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::VM *v62;
  JSC::JSString *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  JSC::JSString *v67;
  JSC::VM *v68;
  int v69;
  int v70;
  JSC::VM *v71;
  JSC::JSString *v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD v75[2];
  int v76;
  _BYTE v77[2];
  unsigned int *v78;
  char v79;

  if (!(_DWORD)a4)
    return (JSC::VM *)*((_QWORD *)this + 5246);
  if (!(_DWORD)a3)
  {
    v17 = *((_QWORD *)a2 + 1);
    if (v17)
      LODWORD(v17) = *(_DWORD *)(v17 + 4);
    if ((_DWORD)v17 == (_DWORD)a4)
      return a2;
  }
  v9 = (unint64_t *)((char *)this + 39696);
  if ((_DWORD)a4 == 1)
  {
    v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    if (!v10 || *((_DWORD *)v10 + 1) <= a3)
    {
      v11 = 0;
      return (JSC::VM *)*((_QWORD *)this + v11 + 5277);
    }
    v62 = a2;
    v63 = a3;
    v64 = a4;
    v65 = WTF::StringImpl::at(v10, a3);
    a4 = v64;
    a2 = v62;
    a3 = v63;
    if (v65 <= 0xFF)
    {
      v11 = v65;
      return (JSC::VM *)*((_QWORD *)this + v11 + 5277);
    }
LABEL_10:
    v14 = (unint64_t *)((char *)this + 39432);
    v15 = *((_QWORD *)a2 + 1);
    if (v15)
    {
      if ((*(_BYTE *)(v15 + 16) & 4) != 0)
        v16 = 7;
      else
        v16 = 3;
    }
    else
    {
      v16 = 7;
    }
    v12 = *v14;
    if (*v14 >= *((_QWORD *)this + 4930))
    {
      v12 = *((_QWORD *)this + 4931);
      if ((v12 & 1) != 0)
      {
        v50 = (int)a3;
        v51 = a2;
        v52 = a4;
        JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v9 = (unint64_t *)((char *)this + 39696);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 39408, (uint64_t)this + 192, 32, 0, 0, v53, v54, v55);
        LODWORD(a4) = v52;
        a2 = v51;
        LODWORD(a3) = v50;
        v12 = SlowCase;
LABEL_16:
        *(_DWORD *)v12 = v9[227] >> 4;
        *(_DWORD *)(v12 + 4) = 17302016;
        *(_QWORD *)(v12 + 8) = v16;
        *(_DWORD *)(v12 + 16) = a4;
        *(_DWORD *)(v12 + 20) = (_DWORD)a2;
        *(_WORD *)(v12 + 24) = WORD2(a2);
        *(_WORD *)(v12 + 26) = (_WORD)a3;
        *(_DWORD *)(v12 + 28) = a3 >> 16;
        if (*((_BYTE *)this + 755))
          __dmb(0xAu);
        return (JSC::VM *)v12;
      }
      v47 = *(_QWORD *)(v12 + 8) ^ *((_QWORD *)this + 4932);
      *((_QWORD *)this + 4930) = v12 + HIDWORD(v47);
      *((_QWORD *)this + 4931) = v12 + (int)v47;
    }
    *v14 = v12 + 32;
    goto LABEL_16;
  }
  if ((_DWORD)a4 != 2)
    goto LABEL_10;
  v18 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  if (!v18)
  {
    v20 = 0;
    goto LABEL_27;
  }
  v19 = *((_DWORD *)v18 + 1);
  if (v19 > a3)
  {
    v66 = a4;
    v67 = a3;
    v68 = a2;
    v69 = WTF::StringImpl::at(v18, a3);
    a2 = v68;
    v18 = (WTF::StringImpl *)*((_QWORD *)v68 + 1);
    if (!v18)
    {
      a3 = v67;
      a4 = v66;
      v20 = v69;
      goto LABEL_27;
    }
    v19 = *((_DWORD *)v18 + 1);
    a3 = v67;
    a4 = v66;
    v20 = v69;
  }
  else
  {
    v20 = 0;
  }
  if (v19 > (int)a3 + 1)
  {
    v70 = v20;
    v71 = a2;
    v72 = a3;
    v73 = a4;
    LODWORD(v18) = WTF::StringImpl::at(v18, (int)a3 + 1);
    a4 = v73;
    a2 = v71;
    a3 = v72;
    v20 = v70;
  }
  else
  {
    LODWORD(v18) = 0;
  }
LABEL_27:
  if ((v18 | v20) > 0x7F)
    goto LABEL_10;
  v77[0] = v20;
  v77[1] = (_BYTE)v18;
  v75[0] = v77;
  v75[1] = 2;
  v21 = ((v20 - 1640531527) << 16) ^ ((_DWORD)v18 << 11) ^ (v20 - 1640531527);
  v22 = (v21 + (v21 >> 11)) ^ (8 * (v21 + (v21 >> 11)));
  v23 = (v22 + (v22 >> 5)) ^ (4 * (v22 + (v22 >> 5)));
  v24 = ((v23 + (v23 >> 15)) ^ ((v23 + (v23 >> 15)) << 10)) & 0xFFFFFF;
  if (v24)
    v25 = v24;
  else
    v25 = 0x800000;
  v76 = v25;
  v26 = (char *)this + 81168;
  v27 = v25 & 0x1FF;
  v28 = *((_QWORD *)this + v27 + 10146);
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 8);
    v30 = (v29 & 1) != 0 ? 0 : (WTF::StringImpl *)v29;
    v31 = *((_DWORD *)v30 + 4);
    v32 = v31 < 0x100 ? WTF::StringImpl::hashSlowCase(v30) : v31 >> 8;
    if (v32 == v25 && WTF::equalInternal<unsigned char>((uint64_t)v30, (unint64_t)v77, 2))
      return *(JSC::VM **)&v26[8 * v27];
  }
  if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
  {
    __clrex();
LABEL_42:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
    goto LABEL_43;
  }
  if (__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
    goto LABEL_42;
LABEL_43:
  v34 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v34)
    v34 = WTF::Thread::initializeCurrentTLS(0);
  WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v34 + 56), (uint64_t)v75, a4, a5, a6, a7, a8, (uint64_t)&v78);
  v42 = (_DWORD *)(16 * *v78);
  if (!v79)
    *v42 += 2;
  v43 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
  if (v43 == 1)
  {
    if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
      goto LABEL_52;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v36, v37, v38, v39, v40, v41);
LABEL_52:
  v44 = v42[4];
  if ((v44 & 3) == 2)
  {
    v45 = v42;
    do
    {
      v45 = (_DWORD *)*((_QWORD *)v45 + 3);
      v44 = v45[4];
    }
    while ((v44 & 3) == 2);
  }
  else
  {
    v45 = v42;
  }
  if ((v44 & 8) != 0)
  {
    v46 = 0;
  }
  else
  {
    v45[4] = v44 | 8;
    v46 = (unint64_t)v45[1] << ((v44 & 4) == 0);
  }
  v12 = *v9;
  if (*v9 >= *((_QWORD *)this + 4963))
  {
    v74 = v46;
    v48 = *((_QWORD *)this + 4964);
    if ((v48 & 1) != 0)
    {
      JSC::sanitizeStackForVM(this, v35, v36, v46, v38, v39, v40, v41);
      v12 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 39672, (uint64_t)this + 192, 16, 0, 0, v59, v60, v61);
    }
    else
    {
      v12 = *((_QWORD *)this + 4964);
      v49 = *(_QWORD *)(v48 + 8) ^ *((_QWORD *)this + 4965);
      *((_QWORD *)this + 4963) = v12 + HIDWORD(v49);
      *((_QWORD *)this + 4964) = v12 + (int)v49;
      *v9 = v12 + 16;
    }
    v46 = v74;
  }
  else
  {
    *v9 = v12 + 16;
  }
  *(_DWORD *)v12 = *((_QWORD *)this + 5189) >> 4;
  *(_DWORD *)(v12 + 4) = 17302016;
  *(_QWORD *)(v12 + 8) = v42;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if (v46 >= 0x101)
  {
    v57 = (char *)this + 192;
    v58 = v12;
    JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v57, 0, v12, v46, v38, v39, v40, v41);
    v12 = v58;
  }
  *(_QWORD *)&v26[8 * v27] = v12;
  return (JSC::VM *)v12;
}

JSC::JSCell *JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createWithFastVector(JSC::Heap **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v9;
  JSC::JSCell *v10;
  _QWORD v12[4];
  char v13;
  uint64_t v14;

  v12[0] = a2;
  v12[1] = a4;
  v12[2] = a3;
  v12[3] = 0;
  v13 = 16;
  v14 = 0;
  if (a3 >= 0x3E9 || !a2)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F3F18);
  }
  v9 = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(a1, (JSC::VM *)0x30, a3, a4, a5, a6, a7, a8);
  v10 = JSC::JSArrayBufferView::JSArrayBufferView(v9, (uint64_t)a1, (uint64_t)v12);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v10, (JSC::VM *)a1);
  return v9;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  uint64_t v18;
  unint64_t SlowCase;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *((_QWORD *)a1 + 7);
  v34 = v9;
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v29, (JSC *)v9, a2, a3, 1, 0, a7, a8);
  if (!v29)
  {
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v34);
    return 0;
  }
  v17 = *(JSC::Heap **)(v9 + 40512);
  if (!v17)
    v17 = JSC::GCClient::Heap::int8ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
  v18 = v9 + 192;
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase >= *((_QWORD *)v17 + 4))
  {
    SlowCase = *((_QWORD *)v17 + 5);
    if ((SlowCase & 1) != 0)
    {
      v25 = (uint64_t)v17;
      JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v25, v9 + 192, 48, 0, 0, v26, v27, v28);
      v18 = v9 + 192;
      goto LABEL_6;
    }
    v24 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v24);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v24;
  }
  *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v20 = *(_DWORD *)(v29 + 8);
  *(_DWORD *)SlowCase = v29 >> 4;
  *(_DWORD *)(SlowCase + 4) = v20;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v31;
  *(_BYTE *)(SlowCase + 40) = v32;
  v21 = v33;
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v21;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v33;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
  }
  v22 = v30;
  if (v30 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v22 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v22;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
  return SlowCase;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createUninitialized(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t OutOfMemoryError;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  JSC::Exception *v29;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35;

  v9 = *((_QWORD *)a1 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v31, (JSC *)v9, a2, a3, 1, 1, a7, a8);
  if (v31)
  {
    v17 = JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>((JSC::Heap **)v9, (JSC::VM *)0x30, v11, v12, v13, v14, v15, v16);
    v18 = *(_DWORD *)(v31 + 8);
    *(_DWORD *)v17 = v31 >> 4;
    *(_DWORD *)(v17 + 4) = v18;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_OWORD *)(v17 + 24) = v33;
    *(_BYTE *)(v17 + 40) = v34;
    v19 = v35;
    v20 = v9 + 192;
    if (*(_BYTE *)(v9 + 755))
    {
      __dmb(0xAu);
      *(_QWORD *)(v17 + 8) = v19;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v17 + 7))
        JSC::Heap::writeBarrierSlowPath(v20, v17);
      __dmb(0xAu);
    }
    else
    {
      *(_QWORD *)(v17 + 8) = v35;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v17 + 7))
        JSC::Heap::writeBarrierSlowPath(v20, v17);
    }
    v21 = v32;
    if (v32 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v21 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(v17 + 16) = v21;
    JSC::JSArrayBufferView::finishCreation(v17, (JSC::VM *)v9);
  }
  else
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v10);
    v29 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v29 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v23, v24, v25, v26, v27);
    }
    JSC::VM::throwException((JSC::VM *)v9, a1, v29, v28, v23, v24, v25, v26, v27);
    return 0;
  }
  return v17;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromTypedArray(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD v9[5];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v12 = a3;
  v13 = a2;
  v10 = a6;
  v11 = a5;
  v9[0] = &v10;
  v9[1] = a1;
  v9[2] = &v13;
  v9[3] = &v12;
  v9[4] = &v11;
  switch(*(_BYTE *)(a4 + 5))
  {
    case '\'':
    case '(':
    case ')':
      result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()((uint64_t)v9, a4, a3, a4, a5, a6, a7, a8);
      break;
    case '*':
      result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '+':
      result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ',':
      result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '-':
      result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '.':
      result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '/':
      result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '0':
      result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '1':
      result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1984F4338);
  }
  return result;
}

uint64_t JSC::JSGlobalObject::arrayProtoValuesFunction(unint64_t this)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(this + 528);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v4 = (_QWORD *)(this - 16);
    v5[0] = *v4;
    v5[1] = this;
    v5[2] = this + 528;
    return v3(v5);
  }
  return v1;
}

unint64_t JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSGlobalObject *v17;
  uint64_t v18;
  JSC::JSGlobalObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t OutOfMemoryError;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC::Exception *v45;
  int v47;
  char v48;
  uint64_t v49;
  char *v50;
  _OWORD v51[4];
  uint64_t v52;
  uint64_t v53;
  JSC::JSGlobalObject *v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  uint64_t v59;

  v53 = *((_QWORD *)a1 + 7);
  v54 = a1;
  v48 = 0;
  v49 = 0x800000000;
  v50 = (char *)v51 + 8;
  memset(v51, 0, sizeof(v51));
  v52 = 0;
  v55 = (unint64_t)&v48;
  v56 = (uint64_t)&v54;
  *(_QWORD *)&v57 = &v53;
  JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(a1, a3, a4, (uint64_t)&v55, a5, a6, a7, a8);
  v16 = v53;
  if (*(_DWORD *)(v53 + 80))
  {
    v47 = *(_DWORD *)(v53 + 80);
    if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v53 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v16 + 16))
      goto LABEL_37;
  }
  v17 = v54;
  v18 = *((_QWORD *)v54 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v55, (JSC *)v18, a2, v49, 1, 1, v14, v15);
  if (!v55)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v17, v19);
    v45 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v45 = (JSC::Exception *)JSC::Exception::create(v18, (JSC::VM *)OutOfMemoryError, 0, v39, v40, v41, v42, v43);
    }
    JSC::VM::throwException((JSC::VM *)v18, v17, v45, v44, v39, v40, v41, v42, v43);
LABEL_37:
    v26 = 0;
    goto LABEL_38;
  }
  v26 = JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>((JSC::Heap **)v18, (JSC::VM *)0x30, v20, v21, v22, v23, v24, v25);
  v27 = *(_DWORD *)(v55 + 8);
  *(_DWORD *)v26 = v55 >> 4;
  *(_DWORD *)(v26 + 4) = v27;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  *(_OWORD *)(v26 + 24) = v57;
  *(_BYTE *)(v26 + 40) = v58;
  v28 = v59;
  v29 = v18 + 192;
  if (*(_BYTE *)(v18 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(v26 + 8) = v28;
    if (*(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(v26 + 7))
      JSC::Heap::writeBarrierSlowPath(v29, v26);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(v26 + 8) = v59;
    if (*(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(v26 + 7))
      JSC::Heap::writeBarrierSlowPath(v29, v26);
  }
  v30 = v56;
  if (v56 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v30 = (v56 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(v26 + 16) = v30;
  JSC::JSArrayBufferView::finishCreation(v26, (JSC::VM *)v18);
  if ((_DWORD)v49)
  {
    v32 = 0;
    do
    {
      v33 = *((_QWORD *)v54 + 7);
      v34 = JSC::toNativeFromValue<JSC::Int8Adaptor>(v54, *(_QWORD *)&v50[8 * v32], v10, v11, v12, v13, v14, v15, v31);
      if (*(_DWORD *)(v33 + 80))
      {
        v37 = *(_DWORD *)(v33 + 80);
        if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v33 + 64), 7u, v10, v11, v12, v13, v14, v15);
        if (*(_QWORD *)(v33 + 16))
          goto LABEL_37;
      }
      if ((*(_BYTE *)(v26 + 40) & 8) == 0
        || (v35 = *(_QWORD *)(v26 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(v26, v32))
          goto LABEL_37;
        v36 = *(_QWORD *)(v26 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v36 = (v36 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v36 + v32) = v34;
      }
    }
    while (++v32 < v49);
  }
LABEL_38:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v49, v9, v10, v11, v12, v13, v14, v15);
  return v26;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromArrayLike(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v14;
  _BOOL8 result;
  const JSC::PropertyTable *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int8x8_t *v38;
  const __int16 *v39;
  int8x8_t *v40;
  int8x8_t *v41;
  unsigned __int128 v42;
  uint64_t v43;
  double v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  JSC::VMTraps *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int8x16_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  JSC::VMTraps *v84;
  uint64_t v85;
  uint64_t v86;

  v8 = a6;
  v9 = a5;
  v11 = a3;
  v14 = *(_QWORD *)(a2 + 56);
  result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, a6, a5, a6, a7, a8);
  if (result)
  {
    if (v8 >= 0xFFFFFFFF)
      v21 = 0xFFFFFFFFLL;
    else
      v21 = v8;
    if (v21 >= v9)
      v22 = v21 - v9;
    else
      v22 = 0;
    v85 = a4;
    v86 = v14;
    if (!a4)
      goto LABEL_72;
    v23 = *(unsigned __int8 *)(a4 + 5);
    v24 = (v23 & 0xFE) == 0x24 && v22 == v8;
    if (!v24 || v23 != 36)
      goto LABEL_72;
    v25 = *(_BYTE *)(a4 + 4);
    v26 = (v25 & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8) : 0;
    if (v8 + v9 > v26)
      goto LABEL_72;
    v27 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28);
    v28 = *(_QWORD *)(v27 + 2216);
    v29 = (v28 & 1) != 0 ? (v28 >> 1) & 3 : *(unsigned __int8 *)(v28 + 4);
    if (v29 == 2 || *(_BYTE *)(*(_QWORD *)(v27 + 2048) + 4) == 2)
      goto LABEL_72;
    v30 = *(_QWORD *)(v27 + 2304);
    v31 = (v30 & 1) != 0 ? (v30 >> 1) & 3 : *(unsigned __int8 *)(v30 + 4);
    if (v31 == 2)
      goto LABEL_72;
    v32 = *(unsigned __int8 *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 8);
    v33 = (v32 >> 1) & 7;
    if ((v32 & 0x10) != 0)
      v33 = ((v32 & 0xE) + 10) >> 1;
    v34 = *(_DWORD *)(v27 + 4 * v33 + 852);
    if (v34)
      v35 = 16 * (v34 & 0xFFFFFFFE);
    else
      v35 = 0;
    if (v35 != 16 * (*(_DWORD *)a4 & 0xFFFFFFFE))
    {
      if ((v32 & 0x20) != 0)
        goto LABEL_72;
      v51 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x30);
      if (!v51)
        v51 = *(_QWORD *)(a4 + 16);
      if (v51 != *(_QWORD *)(v27 + 672)
        || JSC::JSObject::getDirectOffset((_DWORD *)a4, *(JSC::VM **)(v27 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 56) + 41952) + 2712), v16, v17, v18, v19, v20) != -1)
      {
        goto LABEL_72;
      }
      v25 = *(_BYTE *)(a4 + 4);
    }
    v36 = v25 & 0xE;
    if (v36 != 6)
    {
      if (v36 == 4)
      {
        v37 = *(_QWORD *)(a1 + 16);
        if (v37 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v37 = (v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v38 = (int8x8_t *)(v37 + v11);
        v39 = (const __int16 *)(*(_QWORD *)(a4 + 8) + 8 * v9);
        v40 = (int8x8_t *)((char *)v38 + v8);
        if (v8 >= 8)
        {
          v41 = (int8x8_t *)((char *)v38 + (v8 & 0xFFFFFFF8));
          do
          {
            v42 = (unsigned __int128)vld4q_s16(v39);
            v39 += 32;
            *v38++ = vmovn_s16((int16x8_t)v42);
          }
          while (v38 != v41);
          v38 = v41;
        }
        if (v38 != v40)
        {
          result = 1;
          do
          {
            v43 = *(_QWORD *)v39;
            v39 += 4;
            v38->i8[0] = v43;
            v38 = (int8x8_t *)((char *)v38 + 1);
          }
          while (v38 != v40);
          return result;
        }
        return 1;
      }
LABEL_72:
      if (v21 <= v9)
      {
LABEL_102:
        if (v22 >= v8)
          return 1;
        v68 = (JSC::VMTraps *)(v14 + 64);
        while (1)
        {
          v75 = JSC::JSObject::get((JSC::JSObject *)a4, (uint64_t ***)a2, (const WTF::StringImpl *)(v9 + v22), (uint64_t)v16, v17, v18, v19, v20);
          if (*(_DWORD *)(v14 + 80))
          {
            v82 = *(_DWORD *)(v14 + 80);
            if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v68, 7u, v69, v70, v71, v72, v73, v74);
            if (*(_QWORD *)(v14 + 16))
              break;
          }
          v77 = *(_QWORD *)(a2 + 56);
          v79 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)a2, v75, v69, v70, v71, v72, v73, v74, v76);
          if (*(_DWORD *)(v77 + 80))
          {
            v83 = *(_DWORD *)(v77 + 80);
            if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v77 + 64), 7u, v78, (uint64_t)v16, v17, v18, v19, v20);
            if (*(_QWORD *)(v77 + 16))
              break;
          }
          v14 = v86;
          if ((*(_BYTE *)(a1 + 40) & 8) == 0
            || (v80 = *(_QWORD *)(a1 + 16)) != 0
            && (!qword_1ECF4C038
             || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
             || (v80 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
          {
            result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, v11 + v22);
            if (!result)
              return result;
            v81 = *(_QWORD *)(a1 + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v81 = (v81 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            *(_BYTE *)(v81 + v11 + v22) = v79;
          }
          ++v22;
          a4 = v85;
          if (v22 >= v8)
            return 1;
        }
      }
      else
      {
        v52 = 0;
        v84 = (JSC::VMTraps *)(v14 + 64);
        while (1)
        {
          v59 = JSC::JSObject::get((JSC::JSObject *)a4, (JSC::JSGlobalObject *)a2, (v9 + v52));
          if (*(_DWORD *)(v14 + 80))
          {
            v66 = *(_DWORD *)(v14 + 80);
            if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v84, 7u, v53, v54, v55, v56, v57, v58);
            if (*(_QWORD *)(v14 + 16))
              break;
          }
          v61 = *(_QWORD *)(a2 + 56);
          v63 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)a2, v59, v53, v54, v55, v56, v57, v58, v60);
          if (*(_DWORD *)(v61 + 80))
          {
            v67 = *(_DWORD *)(v61 + 80);
            if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v61 + 64), 7u, v62, (uint64_t)v16, v17, v18, v19, v20);
            if (*(_QWORD *)(v61 + 16))
              break;
          }
          v14 = v86;
          if ((*(_BYTE *)(a1 + 40) & 8) == 0
            || (v64 = *(_QWORD *)(a1 + 16)) != 0
            && (!qword_1ECF4C038
             || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
             || (v64 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
          {
            result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, v11 + v52);
            if (!result)
              return result;
            v65 = *(_QWORD *)(a1 + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v65 = (v65 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            *(_BYTE *)(v65 + v11 + v52) = v63;
          }
          ++v52;
          a4 = v85;
          if (v52 >= v22)
            goto LABEL_102;
        }
      }
      return 0;
    }
    result = 1;
    if (v21 > v9)
    {
      do
      {
        v44 = *(double *)(*(_QWORD *)(a4 + 8) + 8 * v9);
        v45 = (int)v44;
        if (v44 != (double)(int)v44)
        {
          v46 = (*(_QWORD *)&v44 >> 52) & 0x7FFLL;
          v47 = v46 - 1023;
          v48 = *(_QWORD *)&v44 >> (51 - (*(_QWORD *)&v44 >> 52));
          if (v46 > 0x433)
            LODWORD(v48) = *(_QWORD *)&v44 << ((*(_QWORD *)&v44 >> 52) - 51);
          if (v46 >= 0x41F)
            v49 = v48;
          else
            v49 = (((1 << ((*(_QWORD *)&v44 >> 52) + 1)) - 1) & v48) + (1 << ((*(_QWORD *)&v44 >> 52) + 1));
          if (v44 >= 0.0)
            LOBYTE(v45) = v49;
          else
            v45 = -v49;
          if (v47 > 0x53)
            LOBYTE(v45) = 0;
        }
        v50 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v50 = (v50 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v50 + v11++) = v45;
        LODWORD(v9) = v9 + 1;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t JSC::JSValue::toTypedArrayIndex(JSC::JSObject **a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v13;
  JSC::JSObject *v14;
  unint64_t v15;
  double v16;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  unsigned int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const WTF::String *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;

  v13 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v14 = *a1;
  if ((unint64_t)*a1 >= 0xFFFE000000000000)
  {
    v16 = (double)(int)v14;
  }
  else
  {
    v15 = (unint64_t)v14 - 0x2000000000000;
    if (v15 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase(a1, a2, a3, a4, a5, a6, a7, a8, a9);
      v16 = v23;
    }
    else
    {
      v16 = *(double *)&v15;
    }
  }
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (v16 <= -1.0)
  {
    v26 = " cannot be negative";
    v27 = a3;
    v28 = a4;
    v29 = 20;
    goto LABEL_28;
  }
  if ((unint64_t)*a1 >= 0xFFFE000000000000)
    return (int)*a1;
  if (v16 > 4294967300.0)
  {
    v26 = " too large";
    v27 = a3;
    v28 = a4;
    v29 = 11;
LABEL_28:
    WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(v27, v28, (uint64_t)v26, v29, (int **)&v53);
    v31 = JSC::createRangeError((unint64_t)a2, &v53, v30);
    JSC::VM::throwException(v13, a2, v31, v32, v33, v34, v35, v36);
    v44 = v53;
    v53 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
      {
        WTF::StringImpl::~StringImpl(v44, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
      }
      else
      {
        *(_DWORD *)v44 -= 2;
      }
    }
    return 0;
  }
  v18 = 2147483650.0;
  if (v16 > 2147483650.0)
  {
    v19 = 0x7FFFFFFFLL;
  }
  else
  {
    v19 = 0;
    v18 = 0.0;
  }
  v20 = v16 - v18;
  v21 = (*(_QWORD *)&v20 >> 52) & 0x7FFLL;
  if ((v21 - 1023) <= 0x53)
  {
    v24 = *(_QWORD *)&v20 >> (51 - (*(_QWORD *)&v20 >> 52));
    if (v21 > 0x433)
      LODWORD(v24) = *(_QWORD *)&v20 << ((*(_QWORD *)&v20 >> 52) - 51);
    if (v21 >= 0x41F)
      v25 = v24;
    else
      v25 = (((1 << ((*(_QWORD *)&v20 >> 52) + 1)) - 1) & v24) + (1 << ((*(_QWORD *)&v20 >> 52) + 1));
    if (v20 >= 0.0)
      v22 = v25;
    else
      v22 = -v25;
  }
  else
  {
    v22 = 0;
  }
  return v22 + v19;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t *v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v20;
  char v21;
  _BYTE v22[16];

  v10 = *(size_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v22[0] = 0;
    v22[8] = 0;
    v20 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v22, a3, a4, a5, a6, a7, a8);
    if (v21)
      v12 = v20;
    else
      v12 = 0;
    v13 = *(_QWORD **)a1;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD **)a1;
  }
  if (v12 >= *v10)
    v14 = *v10;
  else
    v14 = v12;
  *v13 = v14;
  v15 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(v11, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), v14, a5, a6, a7, a8);
  if (v15)
  {
    if (*(unsigned __int8 *)(a2 + 5) - 50 >= 0xFFFFFFF8)
    {
      __break(0xC471u);
      JUMPOUT(0x1984F507CLL);
    }
    v16 = *(_QWORD *)(v11 + 16);
    if (v16 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v17 = (void *)(v16 + **(_QWORD **)(a1 + 24));
    v18 = *(_QWORD *)(a2 + 16);
    if (v18 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memmove(v17, (const void *)(v18 + **(_QWORD **)(a1 + 32)), **(_QWORD **)a1);
  }
  return v15;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  WTF *v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  WTF *v47;
  int v48;
  unsigned int v49;
  _BYTE v50[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v47) = 0;
    LOBYTE(v48) = 0;
    v37 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v47, a3, a4, a5, a6, a7, a8);
    if (v40)
      v41 = v37;
    else
      v41 = 0;
    if (v41 < v9)
      v9 = v41;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v47) = 0;
      LOBYTE(v48) = 0;
      v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v47, v38, v39, a5, a6, a7, a8);
      if (v43)
        v15 = v42;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F53ACLL);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v29 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v29, v9);
        v30 = v9;
        do
        {
          v31 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v29[v30 - 1] = *(_WORD *)(v31 + 2 * a5 - 2 + 2 * v30);
          --v30;
        }
        while (v30);
        do
        {
          v32 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v32 + v12 - 1 + v9) = v29[v9 - 1];
          --v9;
        }
        while (v9);
        v33 = (WTF *)v29;
        goto LABEL_70;
      }
      v47 = (WTF *)v50;
      v48 = 32;
      v49 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v28 = (WTF *)WTF::fastMalloc((WTF *)v9);
        v48 = v9;
        v47 = v28;
      }
      v34 = v9 - 1;
      v35 = v9 - 1;
      do
      {
        v36 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v36 = (v36 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v35 >= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F5440);
        }
        *((_BYTE *)v47 + v35) = *(_WORD *)(v36 + 2 * a5 + 2 * v35);
        --v35;
      }
      while (v35 != -1);
      do
      {
        if (v34 >= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F5448);
        }
        v44 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v44 = (v44 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v44 + v12 + v34) = *((_BYTE *)v47 + v34);
        --v34;
      }
      while (v34 != -1);
      v33 = v47;
      if (v50 != (_BYTE *)v47 && v47 != 0)
      {
        v47 = 0;
        v48 = 0;
LABEL_70:
        WTF::fastFree((unint64_t)v33, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 2 * a5;
      do
      {
        v25 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v26 = *(_BYTE *)((v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + v24);
          v27 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v26 = *(_BYTE *)(v25 + v24);
          v27 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v27 + v12) = v26;
        v24 += 2;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  WTF *v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  WTF *v48;
  int v49;
  unsigned int v50;
  _BYTE v51[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v48) = 0;
    LOBYTE(v49) = 0;
    v38 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v48, a3, a4, a5, a6, a7, a8);
    if (v41)
      v42 = v38;
    else
      v42 = 0;
    if (v42 < v9)
      v9 = v42;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v48) = 0;
      LOBYTE(v49) = 0;
      v43 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v48, v39, v40, a5, a6, a7, a8);
      if (v44)
        v15 = v43;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F5768);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v30 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v30, v9);
        v31 = v9;
        do
        {
          v32 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v30[v31 - 1] = *(_DWORD *)(v32 + 4 * a5 - 4 + 4 * v31);
          --v31;
        }
        while (v31);
        do
        {
          v33 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v33 + v12 - 1 + v9) = v30[v9 - 1];
          --v9;
        }
        while (v9);
        v34 = (WTF *)v30;
        goto LABEL_70;
      }
      v48 = (WTF *)v51;
      v49 = 32;
      v50 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v29 = (WTF *)WTF::fastMalloc((WTF *)v9);
        v49 = v9;
        v48 = v29;
      }
      v35 = v9 - 1;
      v36 = v9 - 1;
      do
      {
        v37 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v37 = (v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v36 >= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F57FCLL);
        }
        *((_BYTE *)v48 + v36) = *(_DWORD *)(v37 + 4 * a5 + 4 * v36);
        --v36;
      }
      while (v36 != -1);
      do
      {
        if (v35 >= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F5804);
        }
        v45 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v45 = (v45 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v45 + v12 + v35) = *((_BYTE *)v48 + v35);
        --v35;
      }
      while (v35 != -1);
      v34 = v48;
      if (v51 != (_BYTE *)v48 && v48 != 0)
      {
        v48 = 0;
        v49 = 0;
LABEL_70:
        WTF::fastFree((unint64_t)v34, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 0;
      v25 = 4 * a5;
      do
      {
        v26 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v27 = (_DWORD *)((v26 & 0x3FFFFFFFFLL) + v25 + qword_1ECF4C038);
          v28 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v27 = (_DWORD *)(v26 + 4 * (v24 + a5));
          v28 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v28 + v12) = *v27;
        ++v24;
        v25 += 4;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  WTF *v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  WTF *v47;
  int v48;
  unsigned int v49;
  _BYTE v50[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v47) = 0;
    LOBYTE(v48) = 0;
    v37 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v47, a3, a4, a5, a6, a7, a8);
    if (v40)
      v41 = v37;
    else
      v41 = 0;
    if (v41 < v9)
      v9 = v41;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v47) = 0;
      LOBYTE(v48) = 0;
      v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v47, v38, v39, a5, a6, a7, a8);
      if (v43)
        v15 = v42;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F5B14);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v29 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v29, v9);
        v30 = v9;
        do
        {
          v31 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v29[v30 - 1] = *(_WORD *)(v31 + 2 * a5 - 2 + 2 * v30);
          --v30;
        }
        while (v30);
        do
        {
          v32 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v32 + v12 - 1 + v9) = v29[v9 - 1];
          --v9;
        }
        while (v9);
        v33 = (WTF *)v29;
        goto LABEL_70;
      }
      v47 = (WTF *)v50;
      v48 = 32;
      v49 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v28 = (WTF *)WTF::fastMalloc((WTF *)v9);
        v48 = v9;
        v47 = v28;
      }
      v34 = v9 - 1;
      v35 = v9 - 1;
      do
      {
        v36 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v36 = (v36 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v35 >= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F5BA8);
        }
        *((_BYTE *)v47 + v35) = *(_WORD *)(v36 + 2 * a5 + 2 * v35);
        --v35;
      }
      while (v35 != -1);
      do
      {
        if (v34 >= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F5BB0);
        }
        v44 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v44 = (v44 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v44 + v12 + v34) = *((_BYTE *)v47 + v34);
        --v34;
      }
      while (v34 != -1);
      v33 = v47;
      if (v50 != (_BYTE *)v47 && v47 != 0)
      {
        v47 = 0;
        v48 = 0;
LABEL_70:
        WTF::fastFree((unint64_t)v33, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 2 * a5;
      do
      {
        v25 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v26 = *(_BYTE *)((v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + v24);
          v27 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v26 = *(_BYTE *)(v25 + v24);
          v27 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v27 + v12) = v26;
        v24 += 2;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  WTF *v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  WTF *v48;
  int v49;
  unsigned int v50;
  _BYTE v51[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v48) = 0;
    LOBYTE(v49) = 0;
    v38 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v48, a3, a4, a5, a6, a7, a8);
    if (v41)
      v42 = v38;
    else
      v42 = 0;
    if (v42 < v9)
      v9 = v42;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v48) = 0;
      LOBYTE(v49) = 0;
      v43 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v48, v39, v40, a5, a6, a7, a8);
      if (v44)
        v15 = v43;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F5ED0);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v30 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v30, v9);
        v31 = v9;
        do
        {
          v32 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v30[v31 - 1] = *(_DWORD *)(v32 + 4 * a5 - 4 + 4 * v31);
          --v31;
        }
        while (v31);
        do
        {
          v33 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v33 + v12 - 1 + v9) = v30[v9 - 1];
          --v9;
        }
        while (v9);
        v34 = (WTF *)v30;
        goto LABEL_70;
      }
      v48 = (WTF *)v51;
      v49 = 32;
      v50 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v29 = (WTF *)WTF::fastMalloc((WTF *)v9);
        v49 = v9;
        v48 = v29;
      }
      v35 = v9 - 1;
      v36 = v9 - 1;
      do
      {
        v37 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v37 = (v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v36 >= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F5F64);
        }
        *((_BYTE *)v48 + v36) = *(_DWORD *)(v37 + 4 * a5 + 4 * v36);
        --v36;
      }
      while (v36 != -1);
      do
      {
        if (v35 >= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F5F6CLL);
        }
        v45 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v45 = (v45 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v45 + v12 + v35) = *((_BYTE *)v48 + v35);
        --v35;
      }
      while (v35 != -1);
      v34 = v48;
      if (v51 != (_BYTE *)v48 && v48 != 0)
      {
        v48 = 0;
        v49 = 0;
LABEL_70:
        WTF::fastFree((unint64_t)v34, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 0;
      v25 = 4 * a5;
      do
      {
        v26 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v27 = (_DWORD *)((v26 & 0x3FFFFFFFFLL) + v25 + qword_1ECF4C038);
          v28 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v27 = (_DWORD *)(v26 + 4 * (v24 + a5));
          v28 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v28 + v12) = *v27;
        ++v24;
        v25 += 4;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  double v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  size_t v37;
  uint64_t v38;
  float v39;
  double v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  size_t v46;
  uint64_t v47;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  _BYTE *v57;
  int v58;
  int v59;
  _BYTE v60[32];
  uint64_t *v61[5];
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v8 = a7;
  v9 = a6;
  v12 = a3;
  v64 = a4;
  v65 = a3;
  v63 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v57) = 0;
    LOBYTE(v58) = 0;
    v49 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v57, a3, a4, a5, a6, a7, a8);
    if (v52)
      v53 = v49;
    else
      v53 = 0;
    v54 = *(_BYTE *)(a4 + 40) & 7;
    if (v53 < v9)
      v9 = v53;
    v62 = v9;
    if (v54 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v57) = 0;
      LOBYTE(v58) = 0;
      v55 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v57, v50, v51, a5, a6, a7, a8);
      if (v56)
        v15 = v55;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v62 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F635CLL);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v61[0] = (uint64_t *)&v62;
      v61[1] = &v64;
      v61[2] = &v63;
      v61[3] = (uint64_t *)a1;
      v61[4] = &v65;
      if (HIDWORD(v9))
      {
        v36 = (void *)WTF::fastMalloc((WTF *)v9);
        bzero(v36, v9);
        if (v62)
        {
          v37 = v62 - 1;
          do
          {
            v38 = *(_QWORD *)(v64 + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v38 = (v38 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v39 = *(float *)(v38 + 4 * (v37 + v63));
            v40 = v39;
            v41 = (int)v39;
            if ((double)(int)v39 != v39)
            {
              v42 = (*(_QWORD *)&v40 >> 52) & 0x7FFLL;
              v43 = v42 - 1023;
              v44 = *(_QWORD *)&v40 >> (51 - (*(_QWORD *)&v40 >> 52));
              if (v42 > 0x433)
                LODWORD(v44) = *(_QWORD *)&v40 << ((*(_QWORD *)&v40 >> 52) - 51);
              if (v42 >= 0x41F)
                v45 = v44;
              else
                v45 = (((1 << ((*(_QWORD *)&v40 >> 52) + 1)) - 1) & v44) + (1 << ((*(_QWORD *)&v40 >> 52) + 1));
              if (v40 >= 0.0)
                LOBYTE(v41) = v45;
              else
                v41 = -v45;
              if (v43 > 0x53)
                LOBYTE(v41) = 0;
            }
            *((_BYTE *)v36 + v37--) = v41;
          }
          while (v37 != -1);
          if (v62)
          {
            v46 = v62 - 1;
            do
            {
              v47 = *(_QWORD *)(a1 + 16);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                v47 = (v47 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              *(_BYTE *)(v47 + v65 + v46) = *((_BYTE *)v36 + v46);
              --v46;
            }
            while (v46 != -1);
          }
        }
        v35 = (unint64_t)v36;
        goto LABEL_73;
      }
      v57 = v60;
      v58 = 32;
      v59 = v9;
      if (v9 >= 0x21)
      {
        v27 = WTF::fastMalloc((WTF *)v9);
        v58 = v9;
        v57 = (_BYTE *)v27;
      }
      JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<WTF::Vector<signed char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v61, (uint64_t)&v57);
      v35 = (unint64_t)v57;
      if (v60 != v57 && v57)
      {
        v57 = 0;
        v58 = 0;
LABEL_73:
        WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
      }
    }
    else if (v9)
    {
      v17 = 4 * a5;
      do
      {
        v18 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(float *)(v18 + v17);
        v20 = v19;
        v21 = (int)v19;
        if ((double)(int)v19 != v19)
        {
          v22 = (*(_QWORD *)&v20 >> 52) & 0x7FFLL;
          v23 = v22 - 1023;
          v24 = *(_QWORD *)&v20 >> (51 - (*(_QWORD *)&v20 >> 52));
          if (v22 > 0x433)
            LODWORD(v24) = *(_QWORD *)&v20 << ((*(_QWORD *)&v20 >> 52) - 51);
          if (v22 >= 0x41F)
            v25 = v24;
          else
            v25 = (((1 << ((*(_QWORD *)&v20 >> 52) + 1)) - 1) & v24) + (1 << ((*(_QWORD *)&v20 >> 52) + 1));
          if (v20 >= 0.0)
            LOBYTE(v21) = v25;
          else
            v21 = -v25;
          if (v23 > 0x53)
            LOBYTE(v21) = 0;
        }
        v26 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v26 = (v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v26 + v12) = v21;
        v17 += 4;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  size_t v36;
  uint64_t v37;
  double v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  size_t v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  _BYTE *v55;
  int v56;
  int v57;
  _BYTE v58[32];
  uint64_t *v59[5];
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v8 = a7;
  v9 = a6;
  v12 = a3;
  v62 = a4;
  v63 = a3;
  v61 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v55) = 0;
    LOBYTE(v56) = 0;
    v47 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, a3, a4, a5, a6, a7, a8);
    if (v50)
      v51 = v47;
    else
      v51 = 0;
    v52 = *(_BYTE *)(a4 + 40) & 7;
    if (v51 < v9)
      v9 = v51;
    v60 = v9;
    if (v52 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v55) = 0;
      LOBYTE(v56) = 0;
      v53 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, v48, v49, a5, a6, a7, a8);
      if (v54)
        v15 = v53;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v60 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F6744);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v59[0] = (uint64_t *)&v60;
      v59[1] = &v62;
      v59[2] = &v61;
      v59[3] = (uint64_t *)a1;
      v59[4] = &v63;
      if (HIDWORD(v9))
      {
        v35 = (void *)WTF::fastMalloc((WTF *)v9);
        bzero(v35, v9);
        if (v60)
        {
          v36 = v60 - 1;
          do
          {
            v37 = *(_QWORD *)(v62 + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v37 = (v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v38 = *(double *)(v37 + 8 * (v36 + v61));
            v39 = (int)v38;
            if (v38 != (double)(int)v38)
            {
              v40 = (*(_QWORD *)&v38 >> 52) & 0x7FFLL;
              v41 = v40 - 1023;
              v42 = *(_QWORD *)&v38 >> (51 - (*(_QWORD *)&v38 >> 52));
              if (v40 > 0x433)
                LODWORD(v42) = *(_QWORD *)&v38 << ((*(_QWORD *)&v38 >> 52) - 51);
              if (v40 >= 0x41F)
                v43 = v42;
              else
                v43 = (((1 << ((*(_QWORD *)&v38 >> 52) + 1)) - 1) & v42) + (1 << ((*(_QWORD *)&v38 >> 52) + 1));
              if (v38 >= 0.0)
                LOBYTE(v39) = v43;
              else
                v39 = -v43;
              if (v41 > 0x53)
                LOBYTE(v39) = 0;
            }
            *((_BYTE *)v35 + v36--) = v39;
          }
          while (v36 != -1);
          if (v60)
          {
            v44 = v60 - 1;
            do
            {
              v45 = *(_QWORD *)(a1 + 16);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                v45 = (v45 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              *(_BYTE *)(v45 + v63 + v44) = *((_BYTE *)v35 + v44);
              --v44;
            }
            while (v44 != -1);
          }
        }
        v34 = (unint64_t)v35;
        goto LABEL_73;
      }
      v55 = v58;
      v56 = 32;
      v57 = v9;
      if (v9 >= 0x21)
      {
        v26 = WTF::fastMalloc((WTF *)v9);
        v56 = v9;
        v55 = (_BYTE *)v26;
      }
      JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<WTF::Vector<signed char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v59, (uint64_t)&v55);
      v34 = (unint64_t)v55;
      if (v58 != v55 && v55)
      {
        v55 = 0;
        v56 = 0;
LABEL_73:
        WTF::fastFree(v34, v27, v28, v29, v30, v31, v32, v33);
      }
    }
    else if (v9)
    {
      v17 = 8 * a5;
      do
      {
        v18 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(double *)(v18 + v17);
        v20 = (int)v19;
        if (v19 != (double)(int)v19)
        {
          v21 = (*(_QWORD *)&v19 >> 52) & 0x7FFLL;
          v22 = v21 - 1023;
          v23 = *(_QWORD *)&v19 >> (51 - (*(_QWORD *)&v19 >> 52));
          if (v21 > 0x433)
            LODWORD(v23) = *(_QWORD *)&v19 << ((*(_QWORD *)&v19 >> 52) - 51);
          if (v21 >= 0x41F)
            v24 = v23;
          else
            v24 = (((1 << ((*(_QWORD *)&v19 >> 52) + 1)) - 1) & v23) + (1 << ((*(_QWORD *)&v19 >> 52) + 1));
          if (v19 >= 0.0)
            LOBYTE(v20) = v24;
          else
            v20 = -v24;
          if (v22 > 0x53)
            LOBYTE(v20) = 0;
        }
        v25 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v25 = (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v25 + v12) = v20;
        v17 += 8;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v16;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F6870);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F699CLL);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL8 v14;
  uint64_t v15;
  unint64_t v16;
  JSC::Heap **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  JSC::Exception *v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t (*v45)(uint64_t *);
  uint64_t *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  JSC::JSGlobalObject *v49;
  _QWORD *v50;

  v11 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v48) = 0;
    LOBYTE(v49) = 0;
    v43 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v48, a3, a4, a5, a6, a7, a8);
    if (v44)
      v12 = v43;
    else
      v12 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 24);
  }
  v13 = !__CFADD__(a3, a4);
  v14 = a3 + a4 <= v12 && v13;
  if (!v14)
  {
    v15 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v15 = 0x3700000002;
    *(_QWORD *)(v15 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v15 + 16) = 4;
    v47 = (WTF::StringImpl *)v15;
    v16 = *(_QWORD *)(a2 + 128);
    v17 = *(JSC::Heap ***)(a2 + 56);
    if ((v16 & 1) != 0)
    {
      v45 = *(uint64_t (**)(uint64_t *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
      v46 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v46 = (uint64_t *)(a2 - 16);
      v48 = *v46;
      v49 = (JSC::JSGlobalObject *)a2;
      v50 = (_QWORD *)(a2 + 128);
      v16 = v45(&v48);
    }
    v18 = JSC::ErrorInstance::create(v17, v16, &v47, 0, 0, 0, 2, 1);
    v25 = (JSC::Exception *)v18;
    if ((v18 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)))
    {
      v25 = (JSC::Exception *)JSC::Exception::create((uint64_t)v11, (JSC::VM *)v18, 0, v19, v20, v21, v22, v23);
    }
    JSC::VM::throwException(v11, (JSC::JSGlobalObject *)a2, v25, v24, v19, v20, v21, v22, v23);
    v33 = v47;
    v47 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  return v14;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  _BOOL4 v11;
  unint64_t v13;
  char v14;
  _BYTE v15[16];

  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    v15[0] = 0;
    v15[8] = 0;
    v13 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)v15, a3, a4, a5, a6, a7, a8);
    if (v14)
      v10 = v13;
    else
      v10 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
  }
  v11 = !__CFADD__(a2, a3);
  return a2 + a3 <= v10 && v11;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<WTF::Vector<signed char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  double v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = v2 - 1;
    do
    {
      v5 = *(_QWORD *)(*result[1] + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v6 = *(float *)(v5 + 4 * (v4 + *result[2]));
      v7 = v6;
      v8 = (int)v6;
      if ((double)(int)v6 != v6)
      {
        v9 = (*(_QWORD *)&v7 >> 52) & 0x7FFLL;
        v10 = v9 - 1023;
        v11 = *(_QWORD *)&v7 >> (51 - (*(_QWORD *)&v7 >> 52));
        if (v9 > 0x433)
          LODWORD(v11) = *(_QWORD *)&v7 << ((*(_QWORD *)&v7 >> 52) - 51);
        if (v9 >= 0x41F)
          v12 = v11;
        else
          v12 = (((1 << ((*(_QWORD *)&v7 >> 52) + 1)) - 1) & v11) + (1 << ((*(_QWORD *)&v7 >> 52) + 1));
        if (v7 >= 0.0)
          LOBYTE(v8) = v12;
        else
          v8 = -v12;
        if (v10 > 0x53)
          LOBYTE(v8) = 0;
      }
      if (v4 >= *(unsigned int *)(a2 + 12))
        goto LABEL_33;
      *(_BYTE *)(*(_QWORD *)a2 + v4--) = v8;
    }
    while (v4 != -1);
    v13 = **result;
    if (v13)
    {
      v14 = v13 - 1;
      while (v14 < *(unsigned int *)(a2 + 12))
      {
        v15 = v3[2];
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v15 + *result[4] + v14) = *(_BYTE *)(*(_QWORD *)a2 + v14);
        if (--v14 == -1)
          return result;
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x1984F6D0CLL);
    }
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<WTF::Vector<signed char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  double v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = v2 - 1;
    do
    {
      v5 = *(_QWORD *)(*result[1] + 16);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v6 = *(double *)(v5 + 8 * (v4 + *result[2]));
      v7 = (int)v6;
      if (v6 != (double)(int)v6)
      {
        v8 = (*(_QWORD *)&v6 >> 52) & 0x7FFLL;
        v9 = v8 - 1023;
        v10 = *(_QWORD *)&v6 >> (51 - (*(_QWORD *)&v6 >> 52));
        if (v8 > 0x433)
          LODWORD(v10) = *(_QWORD *)&v6 << ((*(_QWORD *)&v6 >> 52) - 51);
        if (v8 >= 0x41F)
          v11 = v10;
        else
          v11 = (((1 << ((*(_QWORD *)&v6 >> 52) + 1)) - 1) & v10) + (1 << ((*(_QWORD *)&v6 >> 52) + 1));
        if (v6 >= 0.0)
          LOBYTE(v7) = v11;
        else
          v7 = -v11;
        if (v9 > 0x53)
          LOBYTE(v7) = 0;
      }
      if (v4 >= *(unsigned int *)(a2 + 12))
        goto LABEL_33;
      *(_BYTE *)(*(_QWORD *)a2 + v4--) = v7;
    }
    while (v4 != -1);
    v12 = **result;
    if (v12)
    {
      v13 = v12 - 1;
      while (v13 < *(unsigned int *)(a2 + 12))
      {
        v14 = v3[2];
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v14 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v14 + *result[4] + v13) = *(_BYTE *)(*(_QWORD *)a2 + v13);
        if (--v13 == -1)
          return result;
      }
LABEL_33:
      __break(0xC471u);
      JUMPOUT(0x1984F6E74);
    }
  }
  return result;
}

void JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(JSC::JSGlobalObject *a1, uint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t i;
  unint64_t v17;
  JSC::JSGlobalObject *v18;
  uint64_t v19;
  uint64_t Index;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  JSC::VM **v27;
  JSC::JSGlobalObject *v28;
  unint64_t OutOfMemoryError;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  JSC::VM *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int8x16_t v54;
  _BOOL4 v55;
  uint64_t v56;
  JSC::JSGlobalObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t *v69;
  JSC::JSGlobalObject *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  JSC::Exception *v78;
  JSC::VM *v79;
  int v80;
  JSC::VM *v81;
  JSC::VM *v82;
  unint64_t v83;
  int v84;
  JSC::VMTraps *v85;

  v11 = *((_QWORD *)a1 + 7);
  if ((this & 0xFFFE000000000002) != 0 || *(_BYTE *)(this + 5) != 36)
    goto LABEL_41;
  v12 = *((_QWORD *)a1 + 277);
  v13 = (v12 & 1) != 0 ? (v12 >> 1) & 3 : *(unsigned __int8 *)(v12 + 4);
  v14 = v13 != 2 && (a3 & 0xFFFE000000000002) == 0;
  if (!v14 || *(_BYTE *)(a3 + 5) != 26)
    goto LABEL_41;
  v15 = *((_QWORD *)a1 + 66);
  if ((v15 & 1) != 0)
    v15 = 0;
  if (v15 == a3)
  {
    for (i = 0; ; ++i)
    {
      v17 = (*(_BYTE *)(this + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(this + 8) - 8) : 0;
      if (i >= v17)
        break;
      Index = JSC::JSObject::getIndex((JSC::JSObject *)this, a1, i, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v11 + 80))
      {
        v26 = *(_DWORD *)(v11 + 80);
        if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v19, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v11 + 16))
          break;
      }
      v21 = *(_QWORD *)a4;
      v22 = (_DWORD *)(*(_QWORD *)a4 + 8);
      v23 = *v22;
      if ((_DWORD)v23 != *(_DWORD *)(*(_QWORD *)a4 + 12)
        && ((v24 = *(_QWORD *)(v21 + 16), v24 != v21 + 32) ? (v25 = v24 == 0) : (v25 = 1), v25))
      {
        *(_QWORD *)(v24 + 8 * v23) = Index;
        *v22 = v23 + 1;
      }
      else if (JSC::MarkedVectorBase::slowAppend((uint64_t)v22, Index, v19, a4, a5, a6, a7, a8) == 1)
      {
        *(_BYTE *)v21 = 1;
      }
      if (**(_BYTE **)a4)
      {
        v27 = *(JSC::VM ***)(a4 + 16);
        v28 = **(JSC::JSGlobalObject ***)(a4 + 8);
        OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v28, v18);
        v36 = *v27;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v85 = *v27;
          OutOfMemoryError = JSC::Exception::create((uint64_t)v36, (JSC::VM *)OutOfMemoryError, 0, v30, v31, v32, v33, v34);
          v36 = v85;
        }
        JSC::VM::throwException(v36, v28, (JSC::Exception *)OutOfMemoryError, v35, v30, v31, v32, v33, v34);
      }
      if (*(_QWORD *)(v11 + 16))
      {
        v80 = *((_DWORD *)a1 + 250);
        if (v80)
          v81 = (JSC::VM *)(16 * (v80 & 0xFFFFFFFE));
        else
          v81 = 0;
        v82 = JSC::JSArrayIterator::create(v11, v81, this, 0xFFFE000000000001, a5, a6, a7, a8);
        v43 = (uint64_t)v82;
        *(double *)v61.i64 = (double)(i + 1);
        if ((int)i + 1 < 0)
          v83 = COERCE__INT64((double)(i + 1)) + 0x2000000000000;
        else
          v83 = (i + 1) | 0xFFFE000000000000;
        *((_QWORD *)v82 + 2) = v83;
        goto LABEL_86;
      }
    }
  }
  else
  {
LABEL_41:
    v43 = JSC::iteratorForIterable(a1, this, a3, a4, a5, a6, a7, a8);
    v45 = v44;
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_66;
    v84 = *(_DWORD *)(v11 + 80);
    if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v37, v38, v39, v40, v41, v42);
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_66:
      while (1)
      {
        v46 = *((_QWORD *)a1 + 7);
        v53 = JSC::iteratorNext(a1, v43, v45, 0, v39, v40, v41, v42);
        if (*(_DWORD *)(v46 + 80))
        {
          v66 = *(_DWORD *)(v46 + 80);
          if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v46 + 64), 7u, v47, v48, v49, v50, v51, v52);
          if (*(_QWORD *)(v46 + 16))
            goto LABEL_64;
        }
        v55 = JSC::iteratorComplete(a1, v53, v47, v48, v49, v50, v51, v52, v54);
        if (!*(_DWORD *)(v46 + 80))
          goto LABEL_44;
        v67 = *(_DWORD *)(v46 + 80);
        if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v46 + 64), 7u, v47, v48, v49, v50, v51, v52);
        if (*(_QWORD *)(v46 + 16))
LABEL_64:
          v56 = 0;
        else
LABEL_44:
          v56 = v55 ? 6 : v53;
        if (*(_QWORD *)(v11 + 16) || v56 == 6)
          break;
        v60 = JSC::iteratorValue(a1, v56, v47, v48, v49, v50, v51, v52, v54);
        if (*(_DWORD *)(v11 + 80))
        {
          v68 = *(_DWORD *)(v11 + 80);
          if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v58, v59, v39, v40, v41, v42);
          if (*(_QWORD *)(v11 + 16))
            break;
        }
        v62 = *(_QWORD *)a4;
        v63 = (_DWORD *)(*(_QWORD *)a4 + 8);
        v64 = *v63;
        if ((_DWORD)v64 == *(_DWORD *)(*(_QWORD *)a4 + 12) || (v65 = *(_QWORD *)(v62 + 16), v65 != v62 + 32) && v65)
        {
          if (JSC::MarkedVectorBase::slowAppend((uint64_t)v63, v60, v58, v59, v39, v40, v41, v42) == 1)
            *(_BYTE *)v62 = 1;
        }
        else
        {
          *(_QWORD *)(v65 + 8 * v64) = v60;
          *v63 = v64 + 1;
        }
        if (**(_BYTE **)a4)
        {
          v69 = *(uint64_t **)(a4 + 16);
          v70 = **(JSC::JSGlobalObject ***)(a4 + 8);
          v71 = JSC::createOutOfMemoryError((unint64_t)v70, v57);
          v78 = (JSC::Exception *)v71;
          v79 = (JSC::VM *)*v69;
          if ((v71 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x4C)))
          {
            v78 = (JSC::Exception *)JSC::Exception::create(*v69, (JSC::VM *)v71, 0, v72, v73, v74, v75, v76);
          }
          JSC::VM::throwException(v79, v70, v78, v77, v72, v73, v74, v75, v76);
        }
        if (*(_QWORD *)(v11 + 16))
        {
LABEL_86:
          JSC::iteratorClose(a1, v43, v58, v59, v39, v40, v41, v42, v61);
          return;
        }
      }
    }
  }
}

uint64_t JSC::toNativeFromValue<JSC::Int8Adaptor>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  int v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  JSC::JSObject *v20;

  v20 = (JSC::JSObject *)a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
    return (char)a2;
  if ((unint64_t)a2 >> 49)
  {
    v9 = a2 - 0x2000000000000;
    if ((double)(int)COERCE_DOUBLE(a2 - 0x2000000000000) == COERCE_DOUBLE(a2 - 0x2000000000000))
    {
      LODWORD(a2) = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      return (char)a2;
    }
    v10 = (v9 >> 52) & 0x7FF;
    v11 = (v9 >> 52) + 1;
    if ((v10 - 1023) <= 0x53)
    {
      v12 = v9 >> (51 - (v9 >> 52));
      if (v10 > 0x433)
        LODWORD(v12) = a2 << (v10 - 51);
      v13 = (((1 << v11) - 1) & v12) + (1 << v11);
      if (v10 >= 0x41F)
        v14 = v12;
      else
        v14 = v13;
      if (a2 >= 0x2000000000000)
        LOBYTE(a2) = v14;
      else
        LODWORD(a2) = -v14;
      return (char)a2;
    }
LABEL_15:
    LOBYTE(a2) = 0;
    return (char)a2;
  }
  JSC::JSValue::toNumberSlowCase(&v20, a1, a3, a4, a5, a6, a7, a8, a9);
  LODWORD(a2) = (int)v15;
  if (v15 == (double)(int)v15)
    return (char)a2;
  v16 = (*(_QWORD *)&v15 >> 52) & 0x7FFLL;
  if ((v16 - 1023) > 0x53)
    goto LABEL_15;
  v17 = *(_QWORD *)&v15 >> (51 - (*(_QWORD *)&v15 >> 52));
  if (v16 > 0x433)
    LODWORD(v17) = *(_QWORD *)&v15 << ((*(_QWORD *)&v15 >> 52) - 51);
  if (v16 >= 0x41F)
    v18 = v17;
  else
    v18 = (((1 << ((*(_QWORD *)&v15 >> 52) + 1)) - 1) & v17) + (1 << ((*(_QWORD *)&v15 >> 52) + 1));
  if (v15 >= 0.0)
    LOBYTE(a2) = v18;
  else
    LODWORD(a2) = -v18;
  return (char)a2;
}

_QWORD *WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int **a5@<X8>)
{
  _QWORD *result;
  _QWORD v7[2];
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v7[0] = a3;
  v7[1] = a4;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(v8, (uint64_t)v7, a5);
  if (!*a5)
    __break(0xC471u);
  return result;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  uint64_t v18;
  unint64_t SlowCase;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *((_QWORD *)a1 + 7);
  v34 = v9;
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v29, (JSC *)v9, a2, a3, 1, 0, a7, a8);
  if (!v29)
  {
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v34);
    return 0;
  }
  v17 = *(JSC::Heap **)(v9 + 40864);
  if (!v17)
    v17 = JSC::GCClient::Heap::uint8ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
  v18 = v9 + 192;
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase >= *((_QWORD *)v17 + 4))
  {
    SlowCase = *((_QWORD *)v17 + 5);
    if ((SlowCase & 1) != 0)
    {
      v25 = (uint64_t)v17;
      JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v25, v9 + 192, 48, 0, 0, v26, v27, v28);
      v18 = v9 + 192;
      goto LABEL_6;
    }
    v24 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v24);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v24;
  }
  *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v20 = *(_DWORD *)(v29 + 8);
  *(_DWORD *)SlowCase = v29 >> 4;
  *(_DWORD *)(SlowCase + 4) = v20;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v31;
  *(_BYTE *)(SlowCase + 40) = v32;
  v21 = v33;
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v21;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v33;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
  }
  v22 = v30;
  if (v30 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v22 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v22;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
  return SlowCase;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createUninitialized(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  uint64_t v18;
  unint64_t SlowCase;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *((_QWORD *)a1 + 7);
  v34 = v9;
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v29, (JSC *)v9, a2, a3, 1, 1, a7, a8);
  if (!v29)
  {
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v34);
    return 0;
  }
  v17 = *(JSC::Heap **)(v9 + 40864);
  if (!v17)
    v17 = JSC::GCClient::Heap::uint8ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
  v18 = v9 + 192;
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase >= *((_QWORD *)v17 + 4))
  {
    SlowCase = *((_QWORD *)v17 + 5);
    if ((SlowCase & 1) != 0)
    {
      v25 = (uint64_t)v17;
      JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v25, v9 + 192, 48, 0, 0, v26, v27, v28);
      v18 = v9 + 192;
      goto LABEL_6;
    }
    v24 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v24);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v24;
  }
  *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v20 = *(_DWORD *)(v29 + 8);
  *(_DWORD *)SlowCase = v29 >> 4;
  *(_DWORD *)(SlowCase + 4) = v20;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v31;
  *(_BYTE *)(SlowCase + 40) = v32;
  v21 = v33;
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v21;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v33;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
  }
  v22 = v30;
  if (v30 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v22 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v22;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
  return SlowCase;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromTypedArray(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD v9[5];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;

  v12 = a3;
  v13 = a2;
  v10 = a6;
  v11 = a5;
  v9[0] = &v10;
  v9[1] = a1;
  v9[2] = &v13;
  v9[3] = &v12;
  v9[4] = &v11;
  switch(*(_BYTE *)(a4 + 5))
  {
    case '\'':
    case '(':
    case ')':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()((uint64_t)v9, a4, a3, a4, a5, a6, a7, a8);
      break;
    case '*':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '+':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ',':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '-':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '.':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '/':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '0':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '1':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1984F78B4);
  }
  return result;
}

unint64_t JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t Uninitialized;
  int8x16_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _QWORD v27[3];
  char v28;
  uint64_t v29;
  char *v30;
  _OWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  JSC::JSGlobalObject *v34;

  v33 = *((_QWORD *)a1 + 7);
  v34 = a1;
  v28 = 0;
  v29 = 0x800000000;
  v30 = (char *)v31 + 8;
  memset(v31, 0, sizeof(v31));
  v32 = 0;
  v27[0] = &v28;
  v27[1] = &v34;
  v27[2] = &v33;
  JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(a1, (uint64_t)this, a4, (uint64_t)v27, a5, a6, a7, a8);
  v16 = v33;
  if (*(_DWORD *)(v33 + 80))
  {
    v25 = *(_DWORD *)(v33 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v33 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v16 + 16))
    {
LABEL_29:
      Uninitialized = 0;
      goto LABEL_30;
    }
  }
  Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createUninitialized(v34, a2, v29, v11, v12, v13, v14, v15);
  if (Uninitialized && (_DWORD)v29)
  {
    v19 = 0;
    do
    {
      v20 = *((_QWORD *)v34 + 7);
      v21 = JSC::toNativeFromValue<JSC::Uint8Adaptor>(v34, *(_QWORD *)&v30[8 * v19], v10, v11, v12, v13, v14, v15, v18);
      if (*(_DWORD *)(v20 + 80))
      {
        v24 = *(_DWORD *)(v20 + 80);
        if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v20 + 64), 7u, v10, v11, v12, v13, v14, v15);
        if (*(_QWORD *)(v20 + 16))
          goto LABEL_29;
      }
      if ((*(_BYTE *)(Uninitialized + 40) & 8) == 0
        || (v22 = *(_QWORD *)(Uninitialized + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(Uninitialized, v19))
          goto LABEL_29;
        v23 = *(_QWORD *)(Uninitialized + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v23 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v23 + v19) = v21;
      }
    }
    while (++v19 < v29);
  }
LABEL_30:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v29, v9, v10, v11, v12, v13, v14, v15);
  return Uninitialized;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromArrayLike(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v14;
  _BOOL8 result;
  uint64_t v16;
  uint64_t v17;
  const JSC::PropertyTable *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int8x16_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v49;

  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  result = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::validateRange(a1, a2, a3, a6, a5, a6, a7, a8);
  if (result)
  {
    if (a6 >= 0xFFFFFFFF)
      v23 = 0xFFFFFFFFLL;
    else
      v23 = a6;
    if (v23 >= a5)
      v24 = v23 - a5;
    else
      v24 = 0;
    if (a4)
    {
      v25 = *(unsigned __int8 *)(a4 + 5);
      v26 = (v25 & 0xFE) == 0x24 && v24 == a6;
      if (v26 && v25 == 36)
      {
        v27 = (*(_BYTE *)(a4 + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8) : 0;
        if (a6 + a5 <= v27
          && JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)a4, v16, v17, v18, v19, v20, v21, v22))
        {
          v28 = *(_BYTE *)(a4 + 4) & 0xE;
          if (v28 == 4)
          {
            JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::copyFromInt32ShapeArray(a1, a3, a4, a5, a6);
            return 1;
          }
          if (v28 == 6)
          {
            JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::copyFromDoubleShapeArray(a1, a3, a4, a5, a6);
            return 1;
          }
        }
      }
    }
    if (v23 > a5)
    {
      v37 = 0;
      while (1)
      {
        v40 = JSC::JSObject::get((JSC::JSObject *)a4, a2, (a5 + v37));
        if (*((_DWORD *)v14 + 20))
        {
          v49 = v40;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v14, v38, v39, v40, v41, v42, v43, v44);
          v40 = v49;
          if (hasExceptionsAfterHandlingTraps)
            break;
        }
        if (!JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setIndex(a1, a2, a3 + v37, v40, v41, v42, v43, v44, v45))
          break;
        if (++v37 >= v24)
          goto LABEL_25;
      }
    }
    else
    {
LABEL_25:
      if (v24 >= a6)
        return 1;
      while (1)
      {
        v31 = JSC::JSObject::get((JSC::JSObject *)a4, (uint64_t ***)a2, (const WTF::StringImpl *)(a5 + v24), (uint64_t)v18, v19, v20, v21, v22);
        if (*((_DWORD *)v14 + 20))
        {
          v46 = v31;
          v47 = JSC::VM::hasExceptionsAfterHandlingTraps(v14, v29, v30, v31, v32, v33, v34, v35);
          v31 = v46;
          if (v47)
            break;
        }
        if (!JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setIndex(a1, a2, a3 + v24, v31, v32, v33, v34, v35, v36))
          break;
        ++v24;
        result = 1;
        if (v24 >= a6)
          return result;
      }
    }
    return 0;
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t *v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v20;
  char v21;
  _BYTE v22[16];

  v10 = *(size_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v22[0] = 0;
    v22[8] = 0;
    v20 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v22, a3, a4, a5, a6, a7, a8);
    if (v21)
      v12 = v20;
    else
      v12 = 0;
    v13 = *(_QWORD **)a1;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD **)a1;
  }
  if (v12 >= *v10)
    v14 = *v10;
  else
    v14 = v12;
  *v13 = v14;
  v15 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::validateRange(v11, **(JSC::JSGlobalObject ***)(a1 + 16), **(_QWORD **)(a1 + 24), v14, a5, a6, a7, a8);
  if (v15)
  {
    if (*(unsigned __int8 *)(a2 + 5) - 50 >= 0xFFFFFFF8)
    {
      __break(0xC471u);
      JUMPOUT(0x1984F7E6CLL);
    }
    v16 = *(_QWORD *)(v11 + 16);
    if (v16 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v17 = (void *)(v16 + **(_QWORD **)(a1 + 24));
    v18 = *(_QWORD *)(a2 + 16);
    if (v18 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memmove(v17, (const void *)(v18 + **(_QWORD **)(a1 + 32)), **(_QWORD **)a1);
  }
  return v15;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _BYTE *v47;
  int v48;
  unsigned int v49;
  _BYTE v50[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v47) = 0;
    LOBYTE(v48) = 0;
    v37 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v47, a3, a4, a5, a6, a7, a8);
    if (v40)
      v41 = v37;
    else
      v41 = 0;
    if (v41 < v9)
      v9 = v41;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v47) = 0;
      LOBYTE(v48) = 0;
      v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v47, v38, v39, a5, a6, a7, a8);
      if (v43)
        v15 = v42;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F81A0);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v29 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v29, v9);
        v30 = v9;
        do
        {
          v31 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v29[v30 - 1] = *(_WORD *)(v31 + 2 * a5 - 2 + 2 * v30);
          --v30;
        }
        while (v30);
        do
        {
          v32 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v32 + v12 - 1 + v9) = v29[v9 - 1];
          --v9;
        }
        while (v9);
        v33 = (unint64_t)v29;
        goto LABEL_38;
      }
      v47 = v50;
      v48 = 32;
      v49 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v28 = WTF::fastMalloc((WTF *)v9);
        v48 = v9;
        v47 = (_BYTE *)v28;
      }
      v34 = v9 - 1;
      v35 = v9 - 1;
      do
      {
        v36 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v36 = (v36 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v35 >= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F8234);
        }
        v47[v35] = *(_WORD *)(v36 + 2 * a5 + 2 * v35);
        --v35;
      }
      while (v35 != -1);
      do
      {
        if (v34 >= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F823CLL);
        }
        v44 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v44 = (v44 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v44 + v12 + v34) = v47[v34];
        --v34;
      }
      while (v34 != -1);
      v33 = (unint64_t)v47;
      if (v50 != v47 && v47 != 0)
      {
        v47 = 0;
        v48 = 0;
LABEL_38:
        WTF::fastFree(v33, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 2 * a5;
      do
      {
        v25 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v26 = *(_BYTE *)((v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + v24);
          v27 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v26 = *(_BYTE *)(v25 + v24);
          v27 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v27 + v12) = v26;
        v24 += 2;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _BYTE *v48;
  int v49;
  unsigned int v50;
  _BYTE v51[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v48) = 0;
    LOBYTE(v49) = 0;
    v38 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v48, a3, a4, a5, a6, a7, a8);
    if (v41)
      v42 = v38;
    else
      v42 = 0;
    if (v42 < v9)
      v9 = v42;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v48) = 0;
      LOBYTE(v49) = 0;
      v43 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v48, v39, v40, a5, a6, a7, a8);
      if (v44)
        v15 = v43;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F8560);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v30 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v30, v9);
        v31 = v9;
        do
        {
          v32 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v30[v31 - 1] = *(_DWORD *)(v32 + 4 * a5 - 4 + 4 * v31);
          --v31;
        }
        while (v31);
        do
        {
          v33 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v33 + v12 - 1 + v9) = v30[v9 - 1];
          --v9;
        }
        while (v9);
        v34 = (unint64_t)v30;
        goto LABEL_38;
      }
      v48 = v51;
      v49 = 32;
      v50 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v29 = WTF::fastMalloc((WTF *)v9);
        v49 = v9;
        v48 = (_BYTE *)v29;
      }
      v35 = v9 - 1;
      v36 = v9 - 1;
      do
      {
        v37 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v37 = (v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v36 >= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F85F4);
        }
        v48[v36] = *(_DWORD *)(v37 + 4 * a5 + 4 * v36);
        --v36;
      }
      while (v36 != -1);
      do
      {
        if (v35 >= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F85FCLL);
        }
        v45 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v45 = (v45 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v45 + v12 + v35) = v48[v35];
        --v35;
      }
      while (v35 != -1);
      v34 = (unint64_t)v48;
      if (v51 != v48 && v48 != 0)
      {
        v48 = 0;
        v49 = 0;
LABEL_38:
        WTF::fastFree(v34, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 0;
      v25 = 4 * a5;
      do
      {
        v26 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v27 = (_DWORD *)((v26 & 0x3FFFFFFFFLL) + v25 + qword_1ECF4C038);
          v28 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v27 = (_DWORD *)(v26 + 4 * (v24 + a5));
          v28 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v28 + v12) = *v27;
        ++v24;
        v25 += 4;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _BYTE *v47;
  int v48;
  unsigned int v49;
  _BYTE v50[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v47) = 0;
    LOBYTE(v48) = 0;
    v37 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v47, a3, a4, a5, a6, a7, a8);
    if (v40)
      v41 = v37;
    else
      v41 = 0;
    if (v41 < v9)
      v9 = v41;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v47) = 0;
      LOBYTE(v48) = 0;
      v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v47, v38, v39, a5, a6, a7, a8);
      if (v43)
        v15 = v42;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F8910);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v29 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v29, v9);
        v30 = v9;
        do
        {
          v31 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v29[v30 - 1] = *(_WORD *)(v31 + 2 * a5 - 2 + 2 * v30);
          --v30;
        }
        while (v30);
        do
        {
          v32 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v32 + v12 - 1 + v9) = v29[v9 - 1];
          --v9;
        }
        while (v9);
        v33 = (unint64_t)v29;
        goto LABEL_38;
      }
      v47 = v50;
      v48 = 32;
      v49 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v28 = WTF::fastMalloc((WTF *)v9);
        v48 = v9;
        v47 = (_BYTE *)v28;
      }
      v34 = v9 - 1;
      v35 = v9 - 1;
      do
      {
        v36 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v36 = (v36 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v35 >= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F89A4);
        }
        v47[v35] = *(_WORD *)(v36 + 2 * a5 + 2 * v35);
        --v35;
      }
      while (v35 != -1);
      do
      {
        if (v34 >= v49)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F89ACLL);
        }
        v44 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v44 = (v44 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v44 + v12 + v34) = v47[v34];
        --v34;
      }
      while (v34 != -1);
      v33 = (unint64_t)v47;
      if (v50 != v47 && v47 != 0)
      {
        v47 = 0;
        v48 = 0;
LABEL_38:
        WTF::fastFree(v33, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 2 * a5;
      do
      {
        v25 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v26 = *(_BYTE *)((v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + v24);
          v27 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v26 = *(_BYTE *)(v25 + v24);
          v27 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v27 + v12) = v26;
        v24 += 2;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _BYTE *v48;
  int v49;
  unsigned int v50;
  _BYTE v51[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v48) = 0;
    LOBYTE(v49) = 0;
    v38 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v48, a3, a4, a5, a6, a7, a8);
    if (v41)
      v42 = v38;
    else
      v42 = 0;
    if (v42 < v9)
      v9 = v42;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v48) = 0;
      LOBYTE(v49) = 0;
      v43 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v48, v39, v40, a5, a6, a7, a8);
      if (v44)
        v15 = v43;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F8CD0);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v30 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v30, v9);
        v31 = v9;
        do
        {
          v32 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v30[v31 - 1] = *(_DWORD *)(v32 + 4 * a5 - 4 + 4 * v31);
          --v31;
        }
        while (v31);
        do
        {
          v33 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v33 + v12 - 1 + v9) = v30[v9 - 1];
          --v9;
        }
        while (v9);
        v34 = (unint64_t)v30;
        goto LABEL_38;
      }
      v48 = v51;
      v49 = 32;
      v50 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v29 = WTF::fastMalloc((WTF *)v9);
        v49 = v9;
        v48 = (_BYTE *)v29;
      }
      v35 = v9 - 1;
      v36 = v9 - 1;
      do
      {
        v37 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v37 = (v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v36 >= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F8D64);
        }
        v48[v36] = *(_DWORD *)(v37 + 4 * a5 + 4 * v36);
        --v36;
      }
      while (v36 != -1);
      do
      {
        if (v35 >= v50)
        {
          __break(0xC471u);
          JUMPOUT(0x1984F8D6CLL);
        }
        v45 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v45 = (v45 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v45 + v12 + v35) = v48[v35];
        --v35;
      }
      while (v35 != -1);
      v34 = (unint64_t)v48;
      if (v51 != v48 && v48 != 0)
      {
        v48 = 0;
        v49 = 0;
LABEL_38:
        WTF::fastFree(v34, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 0;
      v25 = 4 * a5;
      do
      {
        v26 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v27 = (_DWORD *)((v26 & 0x3FFFFFFFFLL) + v25 + qword_1ECF4C038);
          v28 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v27 = (_DWORD *)(v26 + 4 * (v24 + a5));
          v28 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v28 + v12) = *v27;
        ++v24;
        v25 += 4;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  double v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  size_t v37;
  uint64_t v38;
  float v39;
  double v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  size_t v46;
  uint64_t v47;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  _BYTE *v57;
  int v58;
  int v59;
  _BYTE v60[32];
  uint64_t *v61[5];
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v8 = a7;
  v9 = a6;
  v12 = a3;
  v64 = a4;
  v65 = a3;
  v63 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v57) = 0;
    LOBYTE(v58) = 0;
    v49 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v57, a3, a4, a5, a6, a7, a8);
    if (v52)
      v53 = v49;
    else
      v53 = 0;
    v54 = *(_BYTE *)(a4 + 40) & 7;
    if (v53 < v9)
      v9 = v53;
    v62 = v9;
    if (v54 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v57) = 0;
      LOBYTE(v58) = 0;
      v55 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v57, v50, v51, a5, a6, a7, a8);
      if (v56)
        v15 = v55;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v62 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F915CLL);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v61[0] = (uint64_t *)&v62;
      v61[1] = &v64;
      v61[2] = &v63;
      v61[3] = (uint64_t *)a1;
      v61[4] = &v65;
      if (HIDWORD(v9))
      {
        v36 = (void *)WTF::fastMalloc((WTF *)v9);
        bzero(v36, v9);
        if (v62)
        {
          v37 = v62 - 1;
          do
          {
            v38 = *(_QWORD *)(v64 + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v38 = (v38 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v39 = *(float *)(v38 + 4 * (v37 + v63));
            v40 = v39;
            v41 = (int)v39;
            if ((double)(int)v39 != v39)
            {
              v42 = (*(_QWORD *)&v40 >> 52) & 0x7FFLL;
              v43 = v42 - 1023;
              v44 = *(_QWORD *)&v40 >> (51 - (*(_QWORD *)&v40 >> 52));
              if (v42 > 0x433)
                LODWORD(v44) = *(_QWORD *)&v40 << ((*(_QWORD *)&v40 >> 52) - 51);
              if (v42 >= 0x41F)
                v45 = v44;
              else
                v45 = (((1 << ((*(_QWORD *)&v40 >> 52) + 1)) - 1) & v44) + (1 << ((*(_QWORD *)&v40 >> 52) + 1));
              if (v40 >= 0.0)
                LOBYTE(v41) = v45;
              else
                v41 = -v45;
              if (v43 > 0x53)
                LOBYTE(v41) = 0;
            }
            *((_BYTE *)v36 + v37--) = v41;
          }
          while (v37 != -1);
          if (v62)
          {
            v46 = v62 - 1;
            do
            {
              v47 = *(_QWORD *)(a1 + 16);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                v47 = (v47 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              *(_BYTE *)(v47 + v65 + v46) = *((_BYTE *)v36 + v46);
              --v46;
            }
            while (v46 != -1);
          }
        }
        v35 = (unint64_t)v36;
        goto LABEL_73;
      }
      v57 = v60;
      v58 = 32;
      v59 = v9;
      if (v9 >= 0x21)
      {
        v27 = WTF::fastMalloc((WTF *)v9);
        v58 = v9;
        v57 = (_BYTE *)v27;
      }
      JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<WTF::Vector<signed char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v61, (uint64_t)&v57);
      v35 = (unint64_t)v57;
      if (v60 != v57 && v57)
      {
        v57 = 0;
        v58 = 0;
LABEL_73:
        WTF::fastFree(v35, v28, v29, v30, v31, v32, v33, v34);
      }
    }
    else if (v9)
    {
      v17 = 4 * a5;
      do
      {
        v18 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(float *)(v18 + v17);
        v20 = v19;
        v21 = (int)v19;
        if ((double)(int)v19 != v19)
        {
          v22 = (*(_QWORD *)&v20 >> 52) & 0x7FFLL;
          v23 = v22 - 1023;
          v24 = *(_QWORD *)&v20 >> (51 - (*(_QWORD *)&v20 >> 52));
          if (v22 > 0x433)
            LODWORD(v24) = *(_QWORD *)&v20 << ((*(_QWORD *)&v20 >> 52) - 51);
          if (v22 >= 0x41F)
            v25 = v24;
          else
            v25 = (((1 << ((*(_QWORD *)&v20 >> 52) + 1)) - 1) & v24) + (1 << ((*(_QWORD *)&v20 >> 52) + 1));
          if (v20 >= 0.0)
            LOBYTE(v21) = v25;
          else
            v21 = -v25;
          if (v23 > 0x53)
            LOBYTE(v21) = 0;
        }
        v26 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v26 = (v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v26 + v12) = v21;
        v17 += 4;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  size_t v36;
  uint64_t v37;
  double v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  size_t v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  _BYTE *v55;
  int v56;
  int v57;
  _BYTE v58[32];
  uint64_t *v59[5];
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v8 = a7;
  v9 = a6;
  v12 = a3;
  v62 = a4;
  v63 = a3;
  v61 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v55) = 0;
    LOBYTE(v56) = 0;
    v47 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, a3, a4, a5, a6, a7, a8);
    if (v50)
      v51 = v47;
    else
      v51 = 0;
    v52 = *(_BYTE *)(a4 + 40) & 7;
    if (v51 < v9)
      v9 = v51;
    v60 = v9;
    if (v52 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v55) = 0;
      LOBYTE(v56) = 0;
      v53 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, v48, v49, a5, a6, a7, a8);
      if (v54)
        v15 = v53;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v60 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F9544);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v59[0] = (uint64_t *)&v60;
      v59[1] = &v62;
      v59[2] = &v61;
      v59[3] = (uint64_t *)a1;
      v59[4] = &v63;
      if (HIDWORD(v9))
      {
        v35 = (void *)WTF::fastMalloc((WTF *)v9);
        bzero(v35, v9);
        if (v60)
        {
          v36 = v60 - 1;
          do
          {
            v37 = *(_QWORD *)(v62 + 16);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v37 = (v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v38 = *(double *)(v37 + 8 * (v36 + v61));
            v39 = (int)v38;
            if (v38 != (double)(int)v38)
            {
              v40 = (*(_QWORD *)&v38 >> 52) & 0x7FFLL;
              v41 = v40 - 1023;
              v42 = *(_QWORD *)&v38 >> (51 - (*(_QWORD *)&v38 >> 52));
              if (v40 > 0x433)
                LODWORD(v42) = *(_QWORD *)&v38 << ((*(_QWORD *)&v38 >> 52) - 51);
              if (v40 >= 0x41F)
                v43 = v42;
              else
                v43 = (((1 << ((*(_QWORD *)&v38 >> 52) + 1)) - 1) & v42) + (1 << ((*(_QWORD *)&v38 >> 52) + 1));
              if (v38 >= 0.0)
                LOBYTE(v39) = v43;
              else
                v39 = -v43;
              if (v41 > 0x53)
                LOBYTE(v39) = 0;
            }
            *((_BYTE *)v35 + v36--) = v39;
          }
          while (v36 != -1);
          if (v60)
          {
            v44 = v60 - 1;
            do
            {
              v45 = *(_QWORD *)(a1 + 16);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                v45 = (v45 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              *(_BYTE *)(v45 + v63 + v44) = *((_BYTE *)v35 + v44);
              --v44;
            }
            while (v44 != -1);
          }
        }
        v34 = (unint64_t)v35;
        goto LABEL_73;
      }
      v55 = v58;
      v56 = 32;
      v57 = v9;
      if (v9 >= 0x21)
      {
        v26 = WTF::fastMalloc((WTF *)v9);
        v56 = v9;
        v55 = (_BYTE *)v26;
      }
      JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<WTF::Vector<signed char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v59, (uint64_t)&v55);
      v34 = (unint64_t)v55;
      if (v58 != v55 && v55)
      {
        v55 = 0;
        v56 = 0;
LABEL_73:
        WTF::fastFree(v34, v27, v28, v29, v30, v31, v32, v33);
      }
    }
    else if (v9)
    {
      v17 = 8 * a5;
      do
      {
        v18 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(double *)(v18 + v17);
        v20 = (int)v19;
        if (v19 != (double)(int)v19)
        {
          v21 = (*(_QWORD *)&v19 >> 52) & 0x7FFLL;
          v22 = v21 - 1023;
          v23 = *(_QWORD *)&v19 >> (51 - (*(_QWORD *)&v19 >> 52));
          if (v21 > 0x433)
            LODWORD(v23) = *(_QWORD *)&v19 << ((*(_QWORD *)&v19 >> 52) - 51);
          if (v21 >= 0x41F)
            v24 = v23;
          else
            v24 = (((1 << ((*(_QWORD *)&v19 >> 52) + 1)) - 1) & v23) + (1 << ((*(_QWORD *)&v19 >> 52) + 1));
          if (v19 >= 0.0)
            LOBYTE(v20) = v24;
          else
            v20 = -v24;
          if (v22 > 0x53)
            LOBYTE(v20) = 0;
        }
        v25 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v25 = (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v25 + v12) = v20;
        v17 += 8;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v16;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F9670);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError((unint64_t)a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1984F979CLL);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError((unint64_t)a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::validateRange(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL8 result;
  unint64_t v15;
  char v16;
  _BOOL8 v17;
  uint64_t v18;
  const WTF::String *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  char v43;

  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v15 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v42, a3, a4, a5, a6, a7, a8);
    if (v16)
      v12 = v15;
    else
      v12 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 24);
  }
  v13 = !__CFADD__(a3, a4);
  result = a3 + a4 <= v12 && v13;
  if (!result)
  {
    v17 = result;
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v18 = 0x3700000002;
    *(_QWORD *)(v18 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v18 + 16) = 4;
    v42 = (WTF::StringImpl *)v18;
    v20 = JSC::createRangeError((unint64_t)a2, &v42, v19);
    JSC::VM::throwException(v11, a2, v20, v21, v22, v23, v24, v25);
    v33 = v42;
    v42 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
    return v17;
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setIndex(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _BOOL8 result;
  uint64_t v21;
  int v22;

  v11 = *((_QWORD *)a2 + 7);
  v18 = JSC::toNativeFromValue<JSC::Uint8Adaptor>(a2, a4, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v11 + 80))
  {
    v22 = *(_DWORD *)(v11 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) == 0
    || (v19 = *(_QWORD *)(a1 + 16)) != 0
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(a1, a3);
    if (!result)
      return result;
    v21 = *(_QWORD *)(a1 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_BYTE *)(v21 + a3) = v18;
  }
  return 1;
}

uint64_t JSC::toNativeFromValue<JSC::Uint8Adaptor>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  int v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  JSC::JSObject *v20;

  v20 = (JSC::JSObject *)a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
    return a2;
  if ((unint64_t)a2 >> 49)
  {
    v9 = a2 - 0x2000000000000;
    if ((double)(int)COERCE_DOUBLE(a2 - 0x2000000000000) == COERCE_DOUBLE(a2 - 0x2000000000000))
    {
      LODWORD(a2) = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      return a2;
    }
    v10 = (v9 >> 52) & 0x7FF;
    v11 = (v9 >> 52) + 1;
    if ((v10 - 1023) <= 0x53)
    {
      v12 = v9 >> (51 - (v9 >> 52));
      if (v10 > 0x433)
        LODWORD(v12) = a2 << (v10 - 51);
      v13 = (((1 << v11) - 1) & v12) + (1 << v11);
      if (v10 >= 0x41F)
        v14 = v12;
      else
        v14 = v13;
      if (a2 >= 0x2000000000000)
        LOBYTE(a2) = v14;
      else
        LODWORD(a2) = -v14;
      return a2;
    }
LABEL_15:
    LOBYTE(a2) = 0;
    return a2;
  }
  JSC::JSValue::toNumberSlowCase(&v20, a1, a3, a4, a5, a6, a7, a8, a9);
  LODWORD(a2) = (int)v15;
  if (v15 == (double)(int)v15)
    return a2;
  v16 = (*(_QWORD *)&v15 >> 52) & 0x7FFLL;
  if ((v16 - 1023) > 0x53)
    goto LABEL_15;
  v17 = *(_QWORD *)&v15 >> (51 - (*(_QWORD *)&v15 >> 52));
  if (v16 > 0x433)
    LODWORD(v17) = *(_QWORD *)&v15 << ((*(_QWORD *)&v15 >> 52) - 51);
  if (v16 >= 0x41F)
    v18 = v17;
  else
    v18 = (((1 << ((*(_QWORD *)&v15 >> 52) + 1)) - 1) & v17) + (1 << ((*(_QWORD *)&v15 >> 52) + 1));
  if (v15 >= 0.0)
    LOBYTE(a2) = v18;
  else
    LODWORD(a2) = -v18;
  return a2;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::copyFromInt32ShapeArray(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  int8x8_t *v6;
  const __int16 *v7;
  int8x8_t *v8;
  int8x8_t *v9;
  unsigned __int128 v10;
  uint64_t v11;

  v5 = *(_QWORD *)(result + 16);
  if (v5 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v6 = (int8x8_t *)(v5 + a2);
  v7 = (const __int16 *)(*(_QWORD *)(a3 + 8) + 8 * a4);
  v8 = (int8x8_t *)((char *)v6 + a5);
  if (a5 >= 8)
  {
    v9 = (int8x8_t *)((char *)v6 + (a5 & 0xFFFFFFFFFFFFFFF8));
    do
    {
      v10 = (unsigned __int128)vld4q_s16(v7);
      v7 += 32;
      *v6++ = vmovn_s16((int16x8_t)v10);
    }
    while (v6 != v9);
    v6 = v9;
  }
  while (v6 != v8)
  {
    v11 = *(_QWORD *)v7;
    v7 += 4;
    v6->i8[0] = v11;
    v6 = (int8x8_t *)((char *)v6 + 1);
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::copyFromDoubleShapeArray(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  double v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  for (; a5; --a5)
  {
    v5 = *(double *)(*(_QWORD *)(a3 + 8) + 8 * a4);
    v6 = (int)v5;
    if (v5 != (double)(int)v5)
    {
      v7 = (*(_QWORD *)&v5 >> 52) & 0x7FFLL;
      v8 = v7 - 1023;
      v9 = *(_QWORD *)&v5 >> (51 - (*(_QWORD *)&v5 >> 52));
      if (v7 > 0x433)
        LODWORD(v9) = *(_QWORD *)&v5 << ((*(_QWORD *)&v5 >> 52) - 51);
      if (v7 >= 0x41F)
        v10 = v9;
      else
        v10 = (((1 << ((*(_QWORD *)&v5 >> 52) + 1)) - 1) & v9) + (1 << ((*(_QWORD *)&v5 >> 52) + 1));
      if (v5 >= 0.0)
        LOBYTE(v6) = v10;
      else
        v6 = -v10;
      if (v8 > 0x53)
        LOBYTE(v6) = 0;
    }
    v11 = *(_QWORD *)(result + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v11 = (v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_BYTE *)(v11 + a2++) = v6;
    ++a4;
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  uint64_t v18;
  unint64_t SlowCase;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t OutOfMemoryError;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  JSC::Exception *v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;

  v9 = *((_QWORD *)a1 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v37, (JSC *)v9, a2, a3, 1, 0, a7, a8);
  if (v37)
  {
    v17 = *(JSC::Heap **)(v9 + 40872);
    if (!v17)
      v17 = JSC::GCClient::Heap::uint8ClampedArraySpaceSlow((JSC::Heap **)(v9 + 37552));
    v18 = v9 + 192;
    SlowCase = *((_QWORD *)v17 + 3);
    if (SlowCase >= *((_QWORD *)v17 + 4))
    {
      SlowCase = *((_QWORD *)v17 + 5);
      if ((SlowCase & 1) != 0)
      {
        v33 = (uint64_t)v17;
        JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v33, v9 + 192, 48, 0, 0, v34, v35, v36);
        v18 = v9 + 192;
        goto LABEL_6;
      }
      v32 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
      *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v32);
      *((_QWORD *)v17 + 5) = SlowCase + (int)v32;
    }
    *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    v20 = *(_DWORD *)(v37 + 8);
    *(_DWORD *)SlowCase = v37 >> 4;
    *(_DWORD *)(SlowCase + 4) = v20;
    *(_QWORD *)(SlowCase + 8) = 0;
    *(_QWORD *)(SlowCase + 16) = 0;
    *(_OWORD *)(SlowCase + 24) = v39;
    *(_BYTE *)(SlowCase + 40) = v40;
    v21 = v41;
    if (*(_BYTE *)(v9 + 755))
    {
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = v21;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
      __dmb(0xAu);
    }
    else
    {
      *(_QWORD *)(SlowCase + 8) = v41;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
    }
    v22 = v38;
    if (v38 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v22 = (v38 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(SlowCase + 16) = v22;
    JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
    return SlowCase;
  }
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v10);
  v30 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v30 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v24, v25, v26, v27, v28);
  }
  JSC::VM::throwException((JSC::VM *)v9, a1, v30, v29, v24, v25, v26, v27, v28);
  return 0;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createUninitialized(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  uint64_t v18;
  unint64_t SlowCase;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t OutOfMemoryError;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  JSC::Exception *v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;

  v9 = *((_QWORD *)a1 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v37, (JSC *)v9, a2, a3, 1, 1, a7, a8);
  if (v37)
  {
    v17 = *(JSC::Heap **)(v9 + 40872);
    if (!v17)
      v17 = JSC::GCClient::Heap::uint8ClampedArraySpaceSlow((JSC::Heap **)(v9 + 37552));
    v18 = v9 + 192;
    SlowCase = *((_QWORD *)v17 + 3);
    if (SlowCase >= *((_QWORD *)v17 + 4))
    {
      SlowCase = *((_QWORD *)v17 + 5);
      if ((SlowCase & 1) != 0)
      {
        v33 = (uint64_t)v17;
        JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v33, v9 + 192, 48, 0, 0, v34, v35, v36);
        v18 = v9 + 192;
        goto LABEL_6;
      }
      v32 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
      *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v32);
      *((_QWORD *)v17 + 5) = SlowCase + (int)v32;
    }
    *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    v20 = *(_DWORD *)(v37 + 8);
    *(_DWORD *)SlowCase = v37 >> 4;
    *(_DWORD *)(SlowCase + 4) = v20;
    *(_QWORD *)(SlowCase + 8) = 0;
    *(_QWORD *)(SlowCase + 16) = 0;
    *(_OWORD *)(SlowCase + 24) = v39;
    *(_BYTE *)(SlowCase + 40) = v40;
    v21 = v41;
    if (*(_BYTE *)(v9 + 755))
    {
      __dmb(0xAu);
      *(_QWORD *)(SlowCase + 8) = v21;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
      __dmb(0xAu);
    }
    else
    {
      *(_QWORD *)(SlowCase + 8) = v41;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
        JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
    }
    v22 = v38;
    if (v38 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v22 = (v38 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(SlowCase + 16) = v22;
    JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
    return SlowCase;
  }
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v10);
  v30 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v30 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v24, v25, v26, v27, v28);
  }
  JSC::VM::throwException((JSC::VM *)v9, a1, v30, v29, v24, v25, v26, v27, v28);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromTypedArray(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD v9[5];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v12 = a3;
  v13 = a2;
  v10 = a6;
  v11 = a5;
  v9[0] = &v10;
  v9[1] = a1;
  v9[2] = &v13;
  v9[3] = &v12;
  v9[4] = &v11;
  switch(*(_BYTE *)(a4 + 5))
  {
    case '\'':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Int8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '(':
    case ')':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()((uint64_t)v9, a4, a3, a4, a5, a6, a7, a8);
      break;
    case '*':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Int16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '+':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Uint16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ',':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Int32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '-':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Uint32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '.':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Float32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '/':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Float64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '0':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '1':
      result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1984FA0E4);
  }
  return result;
}

JSC::JSArrayBufferView *JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSArrayBufferView *Uninitialized;
  int8x16_t v18;
  unint64_t v19;
  int v20;
  _QWORD v22[3];
  char v23;
  uint64_t v24;
  char *v25;
  _OWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  JSC::JSGlobalObject *v29;

  v28 = *((_QWORD *)a1 + 7);
  v29 = a1;
  v23 = 0;
  v24 = 0x800000000;
  v25 = (char *)v26 + 8;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v22[0] = &v23;
  v22[1] = &v29;
  v22[2] = &v28;
  JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(a1, (uint64_t)this, a4, (uint64_t)v22, a5, a6, a7, a8);
  v16 = v28;
  if (*(_DWORD *)(v28 + 80))
  {
    v20 = *(_DWORD *)(v28 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v16 + 16))
    {
LABEL_10:
      Uninitialized = 0;
      goto LABEL_11;
    }
  }
  Uninitialized = (JSC::JSArrayBufferView *)JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createUninitialized(v29, a2, v24, v11, v12, v13, v14, v15);
  if (Uninitialized && (_DWORD)v24)
  {
    v19 = 0;
    while (JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndex(Uninitialized, v29, v19, *(JSC::JSObject **)&v25[8 * v19], v12, v13, v14, v15, v18))
    {
      if (++v19 >= v24)
        goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v24, v9, v10, v11, v12, v13, v14, v15);
  return Uninitialized;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromArrayLike(JSC::JSArrayBufferView *a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v14;
  _BOOL8 result;
  const JSC::PropertyTable *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  JSC::JSObject *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  int v53;
  uint64_t v54;
  JSC::JSObject *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int8x16_t v60;
  int v61;
  JSC::JSObject *v62;
  JSC::JSObject *v63;

  v8 = a6;
  v9 = a5;
  v11 = a3;
  v14 = *((_QWORD *)a2 + 7);
  result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange((uint64_t)a1, (unint64_t)a2, a3, a6, a5, a6, a7, a8);
  if (!result)
    return result;
  if (v8 >= 0xFFFFFFFF)
    v21 = 0xFFFFFFFFLL;
  else
    v21 = v8;
  if (v21 >= v9)
    v22 = v21 - v9;
  else
    v22 = 0;
  if (!a4)
    goto LABEL_72;
  v23 = *(unsigned __int8 *)(a4 + 5);
  v24 = (v23 & 0xFE) == 0x24 && v22 == v8;
  if (!v24 || v23 != 36)
    goto LABEL_72;
  v25 = *(_BYTE *)(a4 + 4);
  v26 = (v25 & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8) : 0;
  if (v8 + v9 > v26)
    goto LABEL_72;
  v27 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28);
  v28 = *(_QWORD *)(v27 + 2216);
  v29 = (v28 & 1) != 0 ? (v28 >> 1) & 3 : *(unsigned __int8 *)(v28 + 4);
  if (v29 == 2 || *(_BYTE *)(*(_QWORD *)(v27 + 2048) + 4) == 2)
    goto LABEL_72;
  v30 = *(_QWORD *)(v27 + 2304);
  v31 = (v30 & 1) != 0 ? (v30 >> 1) & 3 : *(unsigned __int8 *)(v30 + 4);
  if (v31 == 2)
    goto LABEL_72;
  v32 = *(unsigned __int8 *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 8);
  v33 = (v32 >> 1) & 7;
  if ((v32 & 0x10) != 0)
    v33 = ((v32 & 0xE) + 10) >> 1;
  v34 = *(_DWORD *)(v27 + 4 * v33 + 852);
  if (v34)
    v35 = 16 * (v34 & 0xFFFFFFFE);
  else
    v35 = 0;
  if (v35 == 16 * (*(_DWORD *)a4 & 0xFFFFFFFE))
    goto LABEL_31;
  if ((v32 & 0x20) != 0)
    goto LABEL_72;
  v44 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x30);
  if (!v44)
    v44 = *(_QWORD *)(a4 + 16);
  if (v44 != *(_QWORD *)(v27 + 672)
    || JSC::JSObject::getDirectOffset((_DWORD *)a4, *(JSC::VM **)(v27 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 56) + 41952) + 2712), v16, v17, v18, v19, v20) != -1)
  {
LABEL_72:
    if (v21 > v9)
    {
      v45 = 0;
      do
      {
        v47 = (JSC::JSObject *)JSC::JSObject::get((JSC::JSObject *)a4, a2, (v9 + v45));
        if (*(_DWORD *)(v14 + 80))
        {
          v53 = *(_DWORD *)(v14 + 80);
          if ((v53 & 0x27) != 0 && (v53 & 0x20) == 0)
          {
            v62 = v47;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v46, (uint64_t)v47, v48, v49, v50, v51);
            v47 = v62;
          }
          if (*(_QWORD *)(v14 + 16))
            return 0;
        }
        if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndex(a1, a2, v11 + v45, v47, v48, v49, v50, v51, v52))return 0;
      }
      while (++v45 < v22);
    }
    if (v22 < v8)
    {
      while (1)
      {
        v55 = (JSC::JSObject *)JSC::JSObject::get((JSC::JSObject *)a4, (uint64_t ***)a2, (const WTF::StringImpl *)(v9 + v22), (uint64_t)v16, v17, v18, v19, v20);
        if (*(_DWORD *)(v14 + 80))
        {
          v61 = *(_DWORD *)(v14 + 80);
          if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
          {
            v63 = v55;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v54, (uint64_t)v55, v56, v57, v58, v59);
            v55 = v63;
          }
          if (*(_QWORD *)(v14 + 16))
            break;
        }
        if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndex(a1, a2, v11 + v22, v55, v56, v57, v58, v59, v60))break;
        if (++v22 >= v8)
          return 1;
      }
      return 0;
    }
    return 1;
  }
  v25 = *(_BYTE *)(a4 + 4);
LABEL_31:
  v36 = v25 & 0xE;
  if (v36 != 6)
  {
    if (v36 == 4)
    {
      if (v21 > v9)
      {
        result = 1;
        while (1)
        {
          v37 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v9);
          if (v37)
          {
            if ((int)v37 >= 255)
              LODWORD(v37) = 255;
            v38 = v37 & ~((int)v37 >> 31);
            v39 = *((_QWORD *)a1 + 2);
            v40 = qword_1ECF4C038;
            if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
              goto LABEL_41;
          }
          else
          {
            v39 = *((_QWORD *)a1 + 2);
            v40 = qword_1ECF4C038;
            if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
            {
              LOBYTE(v38) = 0;
              goto LABEL_41;
            }
            LOBYTE(v38) = 0;
          }
          v39 = (v39 & 0x3FFFFFFFFLL) + v40;
LABEL_41:
          *(_BYTE *)(v39 + v11++) = v38;
          LODWORD(v9) = v9 + 1;
          if (!--v8)
            return result;
        }
      }
      return 1;
    }
    goto LABEL_72;
  }
  if (v21 <= v9)
    return 1;
  result = 1;
  do
  {
    v41 = *(double *)(*(_QWORD *)(a4 + 8) + 8 * v9);
    if (v41 >= 0.0)
    {
      if (v41 <= 255.0)
        v42 = (uint64_t)rint(v41);
      else
        LOBYTE(v42) = -1;
    }
    else
    {
      LOBYTE(v42) = 0;
    }
    v43 = *((_QWORD *)a1 + 2);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v43 = (v43 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_BYTE *)(v43 + v11++) = v42;
    LODWORD(v9) = v9 + 1;
    --v8;
  }
  while (v8);
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t *v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v20;
  char v21;
  _BYTE v22[16];

  v10 = *(size_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v22[0] = 0;
    v22[8] = 0;
    v20 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v22, a3, a4, a5, a6, a7, a8);
    if (v21)
      v12 = v20;
    else
      v12 = 0;
    v13 = *(_QWORD **)a1;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD **)a1;
  }
  if (v12 >= *v10)
    v14 = *v10;
  else
    v14 = v12;
  *v13 = v14;
  v15 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(v11, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), v14, a5, a6, a7, a8);
  if (v15)
  {
    if (*(unsigned __int8 *)(a2 + 5) - 50 >= 0xFFFFFFF8)
    {
      __break(0xC471u);
      JUMPOUT(0x1984FA7F4);
    }
    v16 = *(_QWORD *)(v11 + 16);
    if (v16 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v17 = (void *)(v16 + **(_QWORD **)(a1 + 24));
    v18 = *(_QWORD *)(a2 + 16);
    if (v18 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memmove(v17, (const void *)(v18 + **(_QWORD **)(a1 + 32)), **(_QWORD **)a1);
  }
  return v15;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Int8Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  char v35[8];
  char v36;

  v8 = a7;
  v9 = a6;
  v10 = a5;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v35[0] = 0;
    v36 = 0;
    v28 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v35, a3, a4, a5, a6, a7, a8);
    if (v31)
      v32 = v28;
    else
      v32 = 0;
    if (v32 < v9)
      v9 = v32;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v35[0] = 0;
      v36 = 0;
      v33 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v35, v29, v30, a5, a6, a7, a8);
      if (v34)
        v15 = v33;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(v10, v9) || v10 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FAAC0);
  }
  result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (!result)
    return result;
  if ((*(_BYTE *)(a1 + 40) & 8) == 0
    || (*(_BYTE *)(a4 + 40) & 8) == 0
    || *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) != *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
  {
    goto LABEL_10;
  }
  v21 = *(_QWORD *)(a1 + 16);
  if (v21 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v22 = *(_QWORD *)(a4 + 16);
  if (v22 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v22 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if (!v8 || v21 + v12 <= (unint64_t)(v22 + v10))
  {
LABEL_10:
    if (!v9)
      return result;
    while (1)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022)
        {
          v18 = *(_QWORD *)(a1 + 16);
        }
        else
        {
          v18 = *(_QWORD *)(a1 + 16);
          if (disablePrimitiveGigacageRequested)
          {
            v20 = *(char *)(v17 + v10) & ~(*(char *)(v17 + v10) >> 31);
            goto LABEL_15;
          }
        }
        v19 = *(char *)((v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + v10);
        v20 = v19 & ~(v19 >> 31);
        v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v20 = *(char *)(v17 + v10) & ~(*(char *)(v17 + v10) >> 31);
        v18 = *(_QWORD *)(a1 + 16);
      }
LABEL_15:
      *(_BYTE *)(v18 + v12) = v20;
      ++v10;
      ++v12;
      if (!--v9)
        return result;
    }
  }
  if (v9)
  {
    v23 = v10 - 1;
    do
    {
      v24 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022)
        {
          v25 = *(_QWORD *)(a1 + 16);
        }
        else
        {
          v25 = *(_QWORD *)(a1 + 16);
          if (disablePrimitiveGigacageRequested)
          {
            v27 = *(char *)(v24 + v23 + v9) & ~(*(char *)(v24 + v23 + v9) >> 31);
            goto LABEL_36;
          }
        }
        v26 = *(char *)((v24 & 0x3FFFFFFFFLL) + v23 + qword_1ECF4C038 + v9);
        v27 = v26 & ~(v26 >> 31);
        v25 = (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v27 = *(char *)(v24 + v23 + v9) & ~(*(char *)(v24 + v23 + v9) >> 31);
        v25 = *(_QWORD *)(a1 + 16);
      }
LABEL_36:
      *(_BYTE *)(v25 + v12 - 1 + v9--) = v27;
    }
    while (v9);
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Int16Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  _BYTE *v51;
  int v52;
  unsigned int v53;
  _BYTE v54[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v51) = 0;
    LOBYTE(v52) = 0;
    v41 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v51, a3, a4, a5, a6, a7, a8);
    if (v44)
      v45 = v41;
    else
      v45 = 0;
    if (v45 < v9)
      v9 = v45;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v51) = 0;
      LOBYTE(v52) = 0;
      v46 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v51, v42, v43, a5, a6, a7, a8);
      if (v47)
        v15 = v46;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FAE48);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v31 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v31, v9);
        v32 = v9;
        do
        {
          v33 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v34 = *(__int16 *)(v33 + 2 * a5 - 2 + 2 * v32);
          if (v34 >= 255)
            v34 = 255;
          v31[--v32] = v34 & ~(v34 >> 31);
        }
        while (v32);
        do
        {
          v35 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v35 = (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v35 + v12 - 1 + v9) = v31[v9 - 1];
          --v9;
        }
        while (v9);
        v36 = (unint64_t)v31;
        goto LABEL_47;
      }
      v51 = v54;
      v52 = 32;
      v53 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v30 = WTF::fastMalloc((WTF *)v9);
        v52 = v9;
        v51 = (_BYTE *)v30;
      }
      v37 = v9 - 1;
      v38 = v9 - 1;
      do
      {
        v39 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v39 = (v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v38 >= v53)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FAEDCLL);
        }
        v40 = *(__int16 *)(v39 + 2 * a5 + 2 * v38);
        if (v40 >= 255)
          v40 = 255;
        v51[v38--] = v40 & ~(v40 >> 31);
      }
      while (v38 != -1);
      do
      {
        if (v37 >= v53)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FAEE4);
        }
        v48 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v48 = (v48 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v48 + v12 + v37) = v51[v37];
        --v37;
      }
      while (v37 != -1);
      v36 = (unint64_t)v51;
      if (v54 != v51 && v51 != 0)
      {
        v51 = 0;
        v52 = 0;
LABEL_47:
        WTF::fastFree(v36, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 2 * a5;
      do
      {
        v25 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v26 = *(__int16 *)((v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + v24);
          if (v26 >= 255)
            v26 = 255;
          v27 = v26 & ~(v26 >> 31);
          v28 = *(_QWORD *)(a1 + 16);
          if (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
            v28 = (v28 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v29 = *(__int16 *)(v25 + v24);
          if (v29 >= 255)
            v29 = 255;
          v27 = v29 & ~(v29 >> 31);
          v28 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v28 + v12) = v27;
        v24 += 2;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Int32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  _BYTE *v51;
  int v52;
  unsigned int v53;
  _BYTE v54[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v51) = 0;
    LOBYTE(v52) = 0;
    v41 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v51, a3, a4, a5, a6, a7, a8);
    if (v44)
      v45 = v41;
    else
      v45 = 0;
    if (v45 < v9)
      v9 = v45;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v51) = 0;
      LOBYTE(v52) = 0;
      v46 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v51, v42, v43, a5, a6, a7, a8);
      if (v47)
        v15 = v46;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FB244);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v31 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v31, v9);
        v32 = v9;
        do
        {
          v33 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v34 = *(_DWORD *)(v33 + 4 * a5 - 4 + 4 * v32);
          if (v34 >= 255)
            v34 = 255;
          v31[--v32] = v34 & ~(v34 >> 31);
        }
        while (v32);
        do
        {
          v35 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v35 = (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v35 + v12 - 1 + v9) = v31[v9 - 1];
          --v9;
        }
        while (v9);
        v36 = (unint64_t)v31;
        goto LABEL_47;
      }
      v51 = v54;
      v52 = 32;
      v53 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v30 = WTF::fastMalloc((WTF *)v9);
        v52 = v9;
        v51 = (_BYTE *)v30;
      }
      v37 = v9 - 1;
      v38 = v9 - 1;
      do
      {
        v39 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v39 = (v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v38 >= v53)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FB2D8);
        }
        v40 = *(_DWORD *)(v39 + 4 * a5 + 4 * v38);
        if (v40 >= 255)
          v40 = 255;
        v51[v38--] = v40 & ~(v40 >> 31);
      }
      while (v38 != -1);
      do
      {
        if (v37 >= v53)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FB2E0);
        }
        v48 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v48 = (v48 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v48 + v12 + v37) = v51[v37];
        --v37;
      }
      while (v37 != -1);
      v36 = (unint64_t)v51;
      if (v54 != v51 && v51 != 0)
      {
        v51 = 0;
        v52 = 0;
LABEL_47:
        WTF::fastFree(v36, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 4 * a5;
      do
      {
        v25 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v26 = *(_DWORD *)((v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + v24);
          if (v26 >= 255)
            v26 = 255;
          v27 = v26 & ~(v26 >> 31);
          v28 = *(_QWORD *)(a1 + 16);
          if (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
            v28 = (v28 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v29 = *(_DWORD *)(v25 + v24);
          if (v29 >= 255)
            v29 = 255;
          v27 = v29 & ~(v29 >> 31);
          v28 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v28 + v12) = v27;
        v24 += 4;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Uint16Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  _BYTE *v49;
  int v50;
  unsigned int v51;
  _BYTE v52[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v49) = 0;
    LOBYTE(v50) = 0;
    v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v49, a3, a4, a5, a6, a7, a8);
    if (v42)
      v43 = v39;
    else
      v43 = 0;
    if (v43 < v9)
      v9 = v43;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v49) = 0;
      LOBYTE(v50) = 0;
      v44 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v49, v40, v41, a5, a6, a7, a8);
      if (v45)
        v15 = v44;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FB620);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v29 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v29, v9);
        v30 = v9;
        do
        {
          v31 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v32 = *(unsigned __int16 *)(v31 + 2 * a5 - 2 + 2 * v30);
          if (v32 >= 255)
            LOBYTE(v32) = -1;
          v29[--v30] = v32;
        }
        while (v30);
        do
        {
          v33 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v33 + v12 - 1 + v9) = v29[v9 - 1];
          --v9;
        }
        while (v9);
        v34 = (unint64_t)v29;
        goto LABEL_44;
      }
      v49 = v52;
      v50 = 32;
      v51 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v28 = WTF::fastMalloc((WTF *)v9);
        v50 = v9;
        v49 = (_BYTE *)v28;
      }
      v35 = v9 - 1;
      v36 = v9 - 1;
      do
      {
        v37 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v37 = (v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v36 >= v51)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FB6B4);
        }
        v38 = *(unsigned __int16 *)(v37 + 2 * a5 + 2 * v36);
        if (v38 >= 255)
          LOBYTE(v38) = -1;
        v49[v36--] = v38;
      }
      while (v36 != -1);
      do
      {
        if (v35 >= v51)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FB6BCLL);
        }
        v46 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v46 = (v46 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v46 + v12 + v35) = v49[v35];
        --v35;
      }
      while (v35 != -1);
      v34 = (unint64_t)v49;
      if (v52 != v49 && v49 != 0)
      {
        v49 = 0;
        v50 = 0;
LABEL_44:
        WTF::fastFree(v34, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 2 * a5;
      do
      {
        v25 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v26 = *(unsigned __int16 *)((v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + v24);
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          v27 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v26 = *(unsigned __int16 *)(v25 + v24);
          if (v26 >= 255)
            LOBYTE(v26) = -1;
          v27 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v27 + v12) = v26;
        v24 += 2;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Uint32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  _BYTE *v49;
  int v50;
  unsigned int v51;
  _BYTE v52[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v49) = 0;
    LOBYTE(v50) = 0;
    v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v49, a3, a4, a5, a6, a7, a8);
    if (v42)
      v43 = v39;
    else
      v43 = 0;
    if (v43 < v9)
      v9 = v43;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v49) = 0;
      LOBYTE(v50) = 0;
      v44 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v49, v40, v41, a5, a6, a7, a8);
      if (v45)
        v15 = v44;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FB9FCLL);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v29 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v29, v9);
        v30 = v9;
        do
        {
          v31 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v32 = *(_DWORD *)(v31 + 4 * a5 - 4 + 4 * v30);
          if (v32 >= 0xFF)
            LOBYTE(v32) = -1;
          v29[--v30] = v32;
        }
        while (v30);
        do
        {
          v33 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v33 + v12 - 1 + v9) = v29[v9 - 1];
          --v9;
        }
        while (v9);
        v34 = (unint64_t)v29;
        goto LABEL_44;
      }
      v49 = v52;
      v50 = 32;
      v51 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v28 = WTF::fastMalloc((WTF *)v9);
        v50 = v9;
        v49 = (_BYTE *)v28;
      }
      v35 = v9 - 1;
      v36 = v9 - 1;
      do
      {
        v37 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v37 = (v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v36 >= v51)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FBA90);
        }
        v38 = *(_DWORD *)(v37 + 4 * a5 + 4 * v36);
        if (v38 >= 0xFF)
          LOBYTE(v38) = -1;
        v49[v36--] = v38;
      }
      while (v36 != -1);
      do
      {
        if (v35 >= v51)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FBA98);
        }
        v46 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v46 = (v46 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v46 + v12 + v35) = v49[v35];
        --v35;
      }
      while (v35 != -1);
      v34 = (unint64_t)v49;
      if (v52 != v49 && v49 != 0)
      {
        v49 = 0;
        v50 = 0;
LABEL_44:
        WTF::fastFree(v34, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 4 * a5;
      do
      {
        v25 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        {
          v26 = *(_DWORD *)((v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + v24);
          if (v26 >= 0xFF)
            LOBYTE(v26) = -1;
          v27 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v26 = *(_DWORD *)(v25 + v24);
          if (v26 >= 0xFF)
            LOBYTE(v26) = -1;
          v27 = *(_QWORD *)(a1 + 16);
        }
        *(_BYTE *)(v27 + v12) = v26;
        v24 += 4;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Float32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _BYTE *v52;
  int v53;
  unsigned int v54;
  _BYTE v55[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v52) = 0;
    LOBYTE(v53) = 0;
    v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v52, a3, a4, a5, a6, a7, a8);
    if (v45)
      v46 = v42;
    else
      v46 = 0;
    if (v46 < v9)
      v9 = v46;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v52) = 0;
      LOBYTE(v53) = 0;
      v47 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v52, v43, v44, a5, a6, a7, a8);
      if (v48)
        v15 = v47;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FBE58);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v30 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v30, v9);
        v31 = v9;
        do
        {
          v32 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v33 = *(float *)(v32 + 4 * a5 - 4 + 4 * v31);
          if (v33 >= 0.0)
          {
            if (v33 <= 255.0)
              v34 = (uint64_t)rint(v33);
            else
              LOBYTE(v34) = -1;
          }
          else
          {
            LOBYTE(v34) = 0;
          }
          v30[--v31] = v34;
        }
        while (v31);
        do
        {
          v35 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v35 = (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v35 + v12 - 1 + v9) = v30[v9 - 1];
          --v9;
        }
        while (v9);
        v36 = (unint64_t)v30;
        goto LABEL_53;
      }
      v52 = v55;
      v53 = 32;
      v54 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v29 = WTF::fastMalloc((WTF *)v9);
        v53 = v9;
        v52 = (_BYTE *)v29;
      }
      v37 = v9 - 1;
      v38 = v9 - 1;
      do
      {
        v39 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v39 = (v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v40 = *(float *)(v39 + 4 * a5 + 4 * v38);
        if (v40 >= 0.0)
        {
          if (v40 <= 255.0)
            v41 = (uint64_t)rint(v40);
          else
            LOBYTE(v41) = -1;
        }
        else
        {
          LOBYTE(v41) = 0;
        }
        if (v38 >= v54)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FBEECLL);
        }
        v52[v38--] = v41;
      }
      while (v38 != -1);
      do
      {
        if (v37 >= v54)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FBEF4);
        }
        v49 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v49 = (v49 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v49 + v12 + v37) = v52[v37];
        --v37;
      }
      while (v37 != -1);
      v36 = (unint64_t)v52;
      if (v55 != v52 && v52 != 0)
      {
        v52 = 0;
        v53 = 0;
LABEL_53:
        WTF::fastFree(v36, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 4 * a5;
      do
      {
        v25 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v25 = (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v26 = *(float *)(v25 + v24);
        if (v26 >= 0.0)
        {
          if (v26 <= 255.0)
            v27 = (uint64_t)rint(v26);
          else
            LOBYTE(v27) = -1;
        }
        else
        {
          LOBYTE(v27) = 0;
        }
        v28 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v28 = (v28 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v28 + v12) = v27;
        v24 += 4;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::Float64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  size_t v9;
  uint64_t v12;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _BYTE *v52;
  int v53;
  unsigned int v54;
  _BYTE v55[32];

  v8 = a7;
  v9 = a6;
  v12 = a3;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v52) = 0;
    LOBYTE(v53) = 0;
    v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v52, a3, a4, a5, a6, a7, a8);
    if (v45)
      v46 = v42;
    else
      v46 = 0;
    if (v46 < v9)
      v9 = v46;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v52) = 0;
      LOBYTE(v53) = 0;
      v47 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v52, v43, v44, a5, a6, a7, a8);
      if (v48)
        v15 = v47;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FC2A8);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, v12, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (HIDWORD(v9))
      {
        v30 = (char *)WTF::fastMalloc((WTF *)v9);
        bzero(v30, v9);
        v31 = v9;
        do
        {
          v32 = *(_QWORD *)(a4 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v33 = *(double *)(v32 + 8 * a5 - 8 + 8 * v31);
          if (v33 >= 0.0)
          {
            if (v33 <= 255.0)
              v34 = (uint64_t)rint(v33);
            else
              LOBYTE(v34) = -1;
          }
          else
          {
            LOBYTE(v34) = 0;
          }
          v30[--v31] = v34;
        }
        while (v31);
        do
        {
          v35 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v35 = (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_BYTE *)(v35 + v12 - 1 + v9) = v30[v9 - 1];
          --v9;
        }
        while (v9);
        v36 = (unint64_t)v30;
        goto LABEL_53;
      }
      v52 = v55;
      v53 = 32;
      v54 = v9;
      if (v9 < 0x21)
      {
        if (!v9)
          return v23;
      }
      else
      {
        v29 = WTF::fastMalloc((WTF *)v9);
        v53 = v9;
        v52 = (_BYTE *)v29;
      }
      v37 = v9 - 1;
      v38 = v9 - 1;
      do
      {
        v39 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v39 = (v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v40 = *(double *)(v39 + 8 * a5 + 8 * v38);
        if (v40 >= 0.0)
        {
          if (v40 <= 255.0)
            v41 = (uint64_t)rint(v40);
          else
            LOBYTE(v41) = -1;
        }
        else
        {
          LOBYTE(v41) = 0;
        }
        if (v38 >= v54)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FC33CLL);
        }
        v52[v38--] = v41;
      }
      while (v38 != -1);
      do
      {
        if (v37 >= v54)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FC344);
        }
        v49 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v49 = (v49 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v49 + v12 + v37) = v52[v37];
        --v37;
      }
      while (v37 != -1);
      v36 = (unint64_t)v52;
      if (v55 != v52 && v52 != 0)
      {
        v52 = 0;
        v53 = 0;
LABEL_53:
        WTF::fastFree(v36, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = 8 * a5;
      do
      {
        v25 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v25 = (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v26 = *(double *)(v25 + v24);
        if (v26 >= 0.0)
        {
          if (v26 <= 255.0)
            v27 = (uint64_t)rint(v26);
          else
            LOBYTE(v27) = -1;
        }
        else
        {
          LOBYTE(v27) = 0;
        }
        v28 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v28 = (v28 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_BYTE *)(v28 + v12) = v27;
        v24 += 8;
        ++v12;
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FC470);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FC59CLL);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setIndex(JSC::JSArrayBufferView *a1, JSC::JSGlobalObject *a2, unint64_t a3, JSC::JSObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _BOOL8 result;
  uint64_t v21;

  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v19 = JSC::toNativeFromValue<JSC::Uint8ClampedAdaptor>(a2, a4, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v12, v13, v14, v15, v16, v17, v18))
    return 0;
  if (!JSC::JSArrayBufferView::isDetached(a1))
  {
    result = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds((uint64_t)a1, a3);
    if (!result)
      return result;
    v21 = *((_QWORD *)a1 + 2);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_BYTE *)(v21 + a3) = v19;
  }
  return 1;
}

uint64_t JSC::toNativeFromValue<JSC::Uint8ClampedAdaptor>(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  double v9;
  int v10;
  int v12;
  uint64_t v13;
  JSC::JSObject *v14;

  v14 = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
  {
    if ((int)a2 >= 255)
      v12 = 255;
    else
      v12 = (int)a2;
    return (v12 & ~(v12 >> 31));
  }
  else
  {
    if ((unint64_t)a2 >> 49)
      *(_QWORD *)&v9 = (char *)a2 - 0x2000000000000;
    else
      JSC::JSValue::toNumberSlowCase(&v14, a1, a3, a4, a5, a6, a7, a8, a9);
    if (v9 >= 0.0)
    {
      v13 = (uint64_t)rint(v9);
      if (v9 <= 255.0)
        LOBYTE(v10) = v13;
      else
        LOBYTE(v10) = -1;
    }
    else
    {
      LOBYTE(v10) = 0;
    }
  }
  return v10;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t OutOfMemoryError;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  JSC::Exception *v29;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35;

  v9 = *((_QWORD *)a1 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v31, (JSC *)v9, a2, a3, 2, 0, a7, a8);
  if (v31)
  {
    v17 = JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::Heap **)v9, (JSC::VM *)0x30, v11, v12, v13, v14, v15, v16);
    v18 = *(_DWORD *)(v31 + 8);
    *(_DWORD *)v17 = v31 >> 4;
    *(_DWORD *)(v17 + 4) = v18;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_OWORD *)(v17 + 24) = v33;
    *(_BYTE *)(v17 + 40) = v34;
    v19 = v35;
    v20 = v9 + 192;
    if (*(_BYTE *)(v9 + 755))
    {
      __dmb(0xAu);
      *(_QWORD *)(v17 + 8) = v19;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v17 + 7))
        JSC::Heap::writeBarrierSlowPath(v20, v17);
      __dmb(0xAu);
    }
    else
    {
      *(_QWORD *)(v17 + 8) = v35;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v17 + 7))
        JSC::Heap::writeBarrierSlowPath(v20, v17);
    }
    v21 = v32;
    if (v32 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v21 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(v17 + 16) = v21;
    JSC::JSArrayBufferView::finishCreation(v17, (JSC::VM *)v9);
  }
  else
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v10);
    v29 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v29 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v23, v24, v25, v26, v27);
    }
    JSC::VM::throwException((JSC::VM *)v9, a1, v29, v28, v23, v24, v25, v26, v27);
    return 0;
  }
  return v17;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::createUninitialized(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t OutOfMemoryError;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  JSC::Exception *v29;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35;

  v9 = *((_QWORD *)a1 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v31, (JSC *)v9, a2, a3, 2, 1, a7, a8);
  if (v31)
  {
    v17 = JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::Heap **)v9, (JSC::VM *)0x30, v11, v12, v13, v14, v15, v16);
    v18 = *(_DWORD *)(v31 + 8);
    *(_DWORD *)v17 = v31 >> 4;
    *(_DWORD *)(v17 + 4) = v18;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_OWORD *)(v17 + 24) = v33;
    *(_BYTE *)(v17 + 40) = v34;
    v19 = v35;
    v20 = v9 + 192;
    if (*(_BYTE *)(v9 + 755))
    {
      __dmb(0xAu);
      *(_QWORD *)(v17 + 8) = v19;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v17 + 7))
        JSC::Heap::writeBarrierSlowPath(v20, v17);
      __dmb(0xAu);
    }
    else
    {
      *(_QWORD *)(v17 + 8) = v35;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v17 + 7))
        JSC::Heap::writeBarrierSlowPath(v20, v17);
    }
    v21 = v32;
    if (v32 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v21 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(v17 + 16) = v21;
    JSC::JSArrayBufferView::finishCreation(v17, (JSC::VM *)v9);
  }
  else
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v10);
    v29 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v29 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v23, v24, v25, v26, v27);
    }
    JSC::VM::throwException((JSC::VM *)v9, a1, v29, v28, v23, v24, v25, v26, v27);
    return 0;
  }
  return v17;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromTypedArray(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD v9[5];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v12 = a3;
  v13 = a2;
  v10 = a6;
  v11 = a5;
  v9[0] = &v10;
  v9[1] = a1;
  v9[2] = &v13;
  v9[3] = &v12;
  v9[4] = &v11;
  switch(*(_BYTE *)(a4 + 5))
  {
    case '\'':
      result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '(':
      result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ')':
      result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '*':
    case '+':
      result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()((uint64_t)v9, a4, a3, a4, a5, a6, a7, a8);
      break;
    case ',':
      result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '-':
      result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '.':
      result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '/':
      result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '0':
      result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '1':
      result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1984FCABCLL);
  }
  return result;
}

unint64_t JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSGlobalObject *v17;
  uint64_t v18;
  JSC::JSGlobalObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  unint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t OutOfMemoryError;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC::Exception *v45;
  int v47;
  char v48;
  uint64_t v49;
  char *v50;
  _OWORD v51[4];
  uint64_t v52;
  uint64_t v53;
  JSC::JSGlobalObject *v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  uint64_t v59;

  v53 = *((_QWORD *)a1 + 7);
  v54 = a1;
  v48 = 0;
  v49 = 0x800000000;
  v50 = (char *)v51 + 8;
  memset(v51, 0, sizeof(v51));
  v52 = 0;
  v55 = (unint64_t)&v48;
  v56 = (uint64_t)&v54;
  *(_QWORD *)&v57 = &v53;
  JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(a1, (uint64_t)this, a4, (uint64_t)&v55, a5, a6, a7, a8);
  v16 = v53;
  if (*(_DWORD *)(v53 + 80))
  {
    v47 = *(_DWORD *)(v53 + 80);
    if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v53 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v16 + 16))
      goto LABEL_37;
  }
  v17 = v54;
  v18 = *((_QWORD *)v54 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v55, (JSC *)v18, a2, v49, 2, 1, v14, v15);
  if (!v55)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v17, v19);
    v45 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v45 = (JSC::Exception *)JSC::Exception::create(v18, (JSC::VM *)OutOfMemoryError, 0, v39, v40, v41, v42, v43);
    }
    JSC::VM::throwException((JSC::VM *)v18, v17, v45, v44, v39, v40, v41, v42, v43);
LABEL_37:
    v26 = 0;
    goto LABEL_38;
  }
  v26 = JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>>((JSC::Heap **)v18, (JSC::VM *)0x30, v20, v21, v22, v23, v24, v25);
  v27 = *(_DWORD *)(v55 + 8);
  *(_DWORD *)v26 = v55 >> 4;
  *(_DWORD *)(v26 + 4) = v27;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  *(_OWORD *)(v26 + 24) = v57;
  *(_BYTE *)(v26 + 40) = v58;
  v28 = v59;
  v29 = v18 + 192;
  if (*(_BYTE *)(v18 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(v26 + 8) = v28;
    if (*(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(v26 + 7))
      JSC::Heap::writeBarrierSlowPath(v29, v26);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(v26 + 8) = v59;
    if (*(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(v26 + 7))
      JSC::Heap::writeBarrierSlowPath(v29, v26);
  }
  v30 = v56;
  if (v56 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v30 = (v56 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(v26 + 16) = v30;
  JSC::JSArrayBufferView::finishCreation(v26, (JSC::VM *)v18);
  if ((_DWORD)v49)
  {
    v32 = 0;
    do
    {
      v33 = *((_QWORD *)v54 + 7);
      v34 = JSC::toNativeFromValue<JSC::Int16Adaptor>(v54, *(_QWORD *)&v50[8 * v32], v10, v11, v12, v13, v14, v15, v31);
      if (*(_DWORD *)(v33 + 80))
      {
        v37 = *(_DWORD *)(v33 + 80);
        if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v33 + 64), 7u, v10, v11, v12, v13, v14, v15);
        if (*(_QWORD *)(v33 + 16))
          goto LABEL_37;
      }
      if ((*(_BYTE *)(v26 + 40) & 8) == 0
        || (v35 = *(_QWORD *)(v26 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        if (!JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::inBounds(v26, v32))
          goto LABEL_37;
        v36 = *(_QWORD *)(v26 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v36 = (v36 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_WORD *)(v36 + 2 * v32) = v34;
      }
    }
    while (++v32 < v49);
  }
LABEL_38:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v49, v9, v10, v11, v12, v13, v14, v15);
  return v26;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromArrayLike(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  _BOOL8 result;
  const JSC::PropertyTable *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int128 *v37;
  const __int16 *v38;
  unsigned __int128 *v39;
  unsigned __int128 *v40;
  unsigned __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int8x16_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;

  v13 = *(_QWORD *)(a2 + 56);
  result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, a6, a5, a6, a7, a8);
  if (result)
  {
    if (a6 >= 0xFFFFFFFF)
      v20 = 0xFFFFFFFFLL;
    else
      v20 = a6;
    if (v20 >= a5)
      v21 = v20 - a5;
    else
      v21 = 0;
    if (!a4)
      goto LABEL_54;
    v22 = *(unsigned __int8 *)(a4 + 5);
    v23 = (v22 & 0xFE) == 0x24 && v21 == a6;
    if (!v23 || v22 != 36)
      goto LABEL_54;
    v24 = *(_BYTE *)(a4 + 4);
    v25 = (v24 & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8) : 0;
    if (a6 + a5 > v25)
      goto LABEL_54;
    v26 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28);
    v27 = *(_QWORD *)(v26 + 2216);
    v28 = (v27 & 1) != 0 ? (v27 >> 1) & 3 : *(unsigned __int8 *)(v27 + 4);
    if (v28 == 2 || *(_BYTE *)(*(_QWORD *)(v26 + 2048) + 4) == 2)
      goto LABEL_54;
    v29 = *(_QWORD *)(v26 + 2304);
    v30 = (v29 & 1) != 0 ? (v29 >> 1) & 3 : *(unsigned __int8 *)(v29 + 4);
    if (v30 == 2)
      goto LABEL_54;
    v31 = *(unsigned __int8 *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 8);
    v32 = (v31 >> 1) & 7;
    if ((v31 & 0x10) != 0)
      v32 = ((v31 & 0xE) + 10) >> 1;
    v33 = *(_DWORD *)(v26 + 4 * v32 + 852);
    if (v33)
      v34 = 16 * (v33 & 0xFFFFFFFE);
    else
      v34 = 0;
    if (v34 != 16 * (*(_DWORD *)a4 & 0xFFFFFFFE))
    {
      if ((v31 & 0x20) != 0)
        goto LABEL_54;
      v43 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x30);
      if (!v43)
        v43 = *(_QWORD *)(a4 + 16);
      if (v43 != *(_QWORD *)(v26 + 672)
        || JSC::JSObject::getDirectOffset((_DWORD *)a4, *(JSC::VM **)(v26 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 56) + 41952) + 2712), v15, v16, v17, v18, v19) != -1)
      {
        goto LABEL_54;
      }
      v24 = *(_BYTE *)(a4 + 4);
    }
    v35 = v24 & 0xE;
    if (v35 == 6)
    {
      JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::copyFromDoubleShapeArray(a1, a3, a4, a5, a6);
      return 1;
    }
    if (v35 == 4)
    {
      v36 = *(_QWORD *)(a1 + 16);
      if (v36 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v36 = (v36 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v37 = (unsigned __int128 *)(v36 + 2 * a3);
      v38 = (const __int16 *)(*(_QWORD *)(a4 + 8) + 8 * a5);
      v39 = (unsigned __int128 *)((char *)v37 + 2 * a6);
      if (a6 >= 8)
      {
        v40 = (unsigned __int128 *)((char *)v37 + 2 * (a6 & 0xFFFFFFF8));
        do
        {
          v41 = (unsigned __int128)vld4q_s16(v38);
          v38 += 32;
          *v37++ = v41;
        }
        while (v37 != v40);
        v37 = v40;
      }
      if (v37 != v39)
      {
        result = 1;
        do
        {
          v42 = *(_QWORD *)v38;
          v38 += 4;
          *(_WORD *)v37 = v42;
          v37 = (unsigned __int128 *)((char *)v37 + 2);
        }
        while (v37 != v39);
        return result;
      }
      return 1;
    }
LABEL_54:
    if (v20 <= a5)
    {
LABEL_84:
      if (v21 >= a6)
        return 1;
      while (1)
      {
        v66 = JSC::JSObject::get((JSC::JSObject *)a4, (uint64_t ***)a2, (const WTF::StringImpl *)(a5 + v21), (uint64_t)v15, v16, v17, v18, v19);
        if (*(_DWORD *)(v13 + 80))
        {
          v73 = *(_DWORD *)(v13 + 80);
          if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v60, v61, v62, v63, v64, v65);
          if (*(_QWORD *)(v13 + 16))
            break;
        }
        v68 = *(_QWORD *)(a2 + 56);
        v70 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)a2, v66, v60, v61, v62, v63, v64, v65, v67);
        if (*(_DWORD *)(v68 + 80))
        {
          v74 = *(_DWORD *)(v68 + 80);
          if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v68 + 64), 7u, v69, (uint64_t)v15, v16, v17, v18, v19);
          if (*(_QWORD *)(v68 + 16))
            break;
        }
        if ((*(_BYTE *)(a1 + 40) & 8) == 0
          || (v71 = *(_QWORD *)(a1 + 16)) != 0
          && (!qword_1ECF4C038
           || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
           || (v71 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::inBounds(a1, a3 + v21);
          if (!result)
            return result;
          v72 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v72 = (v72 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_WORD *)(v72 + 2 * a3 + 2 * v21) = v70;
        }
        if (++v21 >= a6)
          return 1;
      }
    }
    else
    {
      v44 = 0;
      while (1)
      {
        v51 = JSC::JSObject::get((JSC::JSObject *)a4, (JSC::JSGlobalObject *)a2, (a5 + v44));
        if (*(_DWORD *)(v13 + 80))
        {
          v58 = *(_DWORD *)(v13 + 80);
          if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v45, v46, v47, v48, v49, v50);
          if (*(_QWORD *)(v13 + 16))
            break;
        }
        v53 = *(_QWORD *)(a2 + 56);
        v55 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)a2, v51, v45, v46, v47, v48, v49, v50, v52);
        if (*(_DWORD *)(v53 + 80))
        {
          v59 = *(_DWORD *)(v53 + 80);
          if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v53 + 64), 7u, v54, (uint64_t)v15, v16, v17, v18, v19);
          if (*(_QWORD *)(v53 + 16))
            break;
        }
        if ((*(_BYTE *)(a1 + 40) & 8) == 0
          || (v56 = *(_QWORD *)(a1 + 16)) != 0
          && (!qword_1ECF4C038
           || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
           || (v56 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::inBounds(a1, a3 + v44);
          if (!result)
            return result;
          v57 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v57 = (v57 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_WORD *)(v57 + 2 * a3 + 2 * v44) = v55;
        }
        if (++v44 >= v21)
          goto LABEL_84;
      }
    }
    return 0;
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v20;
  char v21;
  _BYTE v22[16];

  v10 = *(uint64_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v22[0] = 0;
    v22[8] = 0;
    v20 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v22, a3, a4, a5, a6, a7, a8);
    if (v21)
      v12 = v20;
    else
      v12 = 0;
    v13 = *(uint64_t **)a1;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(uint64_t **)a1;
  }
  if (v12 >= *v10)
    v14 = *v10;
  else
    v14 = v12;
  *v13 = v14;
  v15 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(v11, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), v14, a5, a6, a7, a8);
  if (v15)
  {
    if ((*(_BYTE *)(a2 + 5) & 0xFE) != 0x2A)
    {
      __break(0xC471u);
      JUMPOUT(0x1984FD490);
    }
    v16 = *(_QWORD *)(v11 + 16);
    if (v16 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v17 = (void *)(v16 + 2 * **(_QWORD **)(a1 + 24));
    v18 = *(_QWORD *)(a2 + 16);
    if (v18 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memmove(v17, (const void *)(v18 + 2 * **(_QWORD **)(a1 + 32)), 2 * **(_QWORD **)a1);
  }
  return v15;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _WORD *v22;
  __int16 v23;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  void *v35;
  char *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char *v47;
  _WORD *v48;
  __int16 v49;
  char *v50;
  _WORD *v51;
  __int16 v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[64];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v42)
      v43 = v39;
    else
      v43 = 0;
    v44 = *(_BYTE *)(a4 + 40) & 7;
    if (v43 < v9)
      v9 = v43;
    v58 = v9;
    if (v44 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v40, v41, a5, a6, a7, a8);
      if (v46)
        v15 = v45;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FD7DCLL);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FD810);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FD818);
        }
        v34 = (WTF *)(4 * v9);
        v35 = (void *)WTF::fastMalloc(v34);
        bzero(v35, (size_t)v34);
        v53 = (WTF *)v35;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v57, (uint64_t *)&v53);
        v33 = v53;
        v53 = 0;
        if (v33)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v25 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v54 = v9;
          v53 = v25;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v33 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (char *)(v18 + a5);
          v22 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (char *)(v17 + a5);
          v48 = (_WORD *)(v19 + 2 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (char *)(v18 + a5);
          v51 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v36 = (char *)(v17 + a5);
        v37 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2 * a3);
        do
        {
          v38 = *v36++;
          *v37++ = v38;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  _WORD *v22;
  int v23;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  void *v35;
  int *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  int *v47;
  _WORD *v48;
  int v49;
  int *v50;
  _WORD *v51;
  int v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[64];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v42)
      v43 = v39;
    else
      v43 = 0;
    v44 = *(_BYTE *)(a4 + 40) & 7;
    if (v43 < v9)
      v9 = v43;
    v58 = v9;
    if (v44 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v40, v41, a5, a6, a7, a8);
      if (v46)
        v15 = v45;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FDAB4);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FDAE8);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FDAF0);
        }
        v34 = (WTF *)(4 * v9);
        v35 = (void *)WTF::fastMalloc(v34);
        bzero(v35, (size_t)v34);
        v53 = (WTF *)v35;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v57, (uint64_t *)&v53);
        v33 = v53;
        v53 = 0;
        if (v33)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v25 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v54 = v9;
          v53 = v25;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v33 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (int *)(v18 + 4 * a5);
          v22 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (int *)(v17 + 4 * a5);
          v48 = (_WORD *)(v19 + 2 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (int *)(v18 + 4 * a5);
          v51 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v36 = (int *)(v17 + 4 * a5);
        v37 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2 * a3);
        do
        {
          v38 = *v36++;
          *v37++ = v38;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  __int16 v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  unsigned __int8 *v40;
  _WORD *v41;
  __int16 v42;
  unint64_t v43;
  char v44;
  unsigned __int8 *v45;
  _WORD *v46;
  __int16 v47;
  unsigned __int8 *v48;
  _WORD *v49;
  __int16 v50;
  WTF *v51;
  int v52;
  int v53;
  _BYTE v54[64];
  uint64_t *v55[5];
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v8 = a7;
  v9 = a6;
  v58 = a4;
  v59 = a3;
  v57 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v51) = 0;
    LOBYTE(v52) = 0;
    v43 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v51, a3, a4, a5, a6, a7, a8);
    if (v44)
      v15 = v43;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
  }
  if (v15 < v9)
    v9 = v15;
  v56 = v9;
  if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v9, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    JUMPOUT(0x1984FDD58);
  }
  v20 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, v16, v17, v18, v19);
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v55[0] = (uint64_t *)&v56;
      v55[1] = &v58;
      v55[2] = &v57;
      v55[3] = (uint64_t *)a1;
      v55[4] = &v59;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FDD8CLL);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FDD94);
        }
        v38 = (WTF *)(4 * v9);
        v39 = (void *)WTF::fastMalloc(v38);
        bzero(v39, (size_t)v38);
        v51 = (WTF *)v39;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v55, (uint64_t *)&v51);
        v37 = v51;
        v51 = 0;
        if (v37)
          goto LABEL_26;
      }
      else
      {
        v51 = (WTF *)v54;
        v52 = 32;
        v53 = v9;
        if (v9 >= 0x21)
        {
          v29 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v52 = v9;
          v51 = v29;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v55, (uint64_t *)&v51);
        v37 = v51;
        if (v54 != (_BYTE *)v51 && v51)
        {
          v51 = 0;
          v52 = 0;
LABEL_26:
          WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
    else if (v9)
    {
      v21 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v22 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v23 = *(_QWORD *)(a1 + 16);
        v24 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v25 = (unsigned __int8 *)(v22 + a5);
          v26 = (_WORD *)(v24 + 2 * a3);
          do
          {
            v27 = *v25++;
            *v26++ = v27;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v45 = (unsigned __int8 *)(v21 + a5);
          v46 = (_WORD *)(v23 + 2 * a3);
          do
          {
            v47 = *v45++;
            *v46++ = v47;
            --v9;
          }
          while (v9);
        }
        else
        {
          v48 = (unsigned __int8 *)(v22 + a5);
          v49 = (_WORD *)(v24 + 2 * a3);
          do
          {
            v50 = *v48++;
            *v49++ = v50;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v40 = (unsigned __int8 *)(v21 + a5);
        v41 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2 * a3);
        do
        {
          v42 = *v40++;
          *v41++ = v42;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _WORD *v22;
  __int16 v23;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  void *v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  unsigned __int8 *v50;
  _WORD *v51;
  __int16 v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[64];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v42)
      v43 = v39;
    else
      v43 = 0;
    v44 = *(_BYTE *)(a4 + 40) & 7;
    if (v43 < v9)
      v9 = v43;
    v58 = v9;
    if (v44 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v40, v41, a5, a6, a7, a8);
      if (v46)
        v15 = v45;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FE028);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FE05CLL);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FE064);
        }
        v34 = (WTF *)(4 * v9);
        v35 = (void *)WTF::fastMalloc(v34);
        bzero(v35, (size_t)v34);
        v53 = (WTF *)v35;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v57, (uint64_t *)&v53);
        v33 = v53;
        v53 = 0;
        if (v33)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v25 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v54 = v9;
          v53 = v25;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v33 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (unsigned __int8 *)(v18 + a5);
          v22 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (unsigned __int8 *)(v17 + a5);
          v48 = (_WORD *)(v19 + 2 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (unsigned __int8 *)(v18 + a5);
          v51 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v36 = (unsigned __int8 *)(v17 + a5);
        v37 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2 * a3);
        do
        {
          v38 = *v36++;
          *v37++ = v38;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  _WORD *v22;
  int v23;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  void *v35;
  int *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  int *v47;
  _WORD *v48;
  int v49;
  int *v50;
  _WORD *v51;
  int v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[64];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v42)
      v43 = v39;
    else
      v43 = 0;
    v44 = *(_BYTE *)(a4 + 40) & 7;
    if (v43 < v9)
      v9 = v43;
    v58 = v9;
    if (v44 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v40, v41, a5, a6, a7, a8);
      if (v46)
        v15 = v45;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FE300);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FE334);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FE33CLL);
        }
        v34 = (WTF *)(4 * v9);
        v35 = (void *)WTF::fastMalloc(v34);
        bzero(v35, (size_t)v34);
        v53 = (WTF *)v35;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v57, (uint64_t *)&v53);
        v33 = v53;
        v53 = 0;
        if (v33)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v25 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v54 = v9;
          v53 = v25;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v33 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (int *)(v18 + 4 * a5);
          v22 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (int *)(v17 + 4 * a5);
          v48 = (_WORD *)(v19 + 2 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (int *)(v18 + 4 * a5);
          v51 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v36 = (int *)(v17 + 4 * a5);
        v37 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2 * a3);
        do
        {
          v38 = *v36++;
          *v37++ = v38;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  _WORD *v21;
  double v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  float *v40;
  _WORD *v41;
  double v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  float *v56;
  _WORD *v57;
  double v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  float *v64;
  _WORD *v65;
  double v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  WTF *v72;
  int v73;
  int v74;
  _BYTE v75[64];
  uint64_t *v76[5];
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v8 = a7;
  v9 = a6;
  v79 = a4;
  v80 = a3;
  v78 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v72) = 0;
    LOBYTE(v73) = 0;
    v48 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v72, a3, a4, a5, a6, a7, a8);
    if (v51)
      v52 = v48;
    else
      v52 = 0;
    v53 = *(_BYTE *)(a4 + 40) & 7;
    if (v52 < v9)
      v9 = v52;
    v77 = v9;
    if (v53 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v72) = 0;
      LOBYTE(v73) = 0;
      v54 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v72, v49, v50, a5, a6, a7, a8);
      if (v55)
        v15 = v54;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v77 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FE6A4);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v76[0] = (uint64_t *)&v77;
      v76[1] = &v79;
      v76[2] = &v78;
      v76[3] = (uint64_t *)a1;
      v76[4] = &v80;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FE748);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FE750);
        }
        v38 = (WTF *)(4 * v9);
        v39 = (void *)WTF::fastMalloc(v38);
        bzero(v39, (size_t)v38);
        v72 = (WTF *)v39;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v76, (uint64_t *)&v72);
        v37 = v72;
        v72 = 0;
        if (v37)
          goto LABEL_38;
      }
      else
      {
        v72 = (WTF *)v75;
        v73 = 32;
        v74 = v9;
        if (v9 >= 0x21)
        {
          v29 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v73 = v9;
          v72 = v29;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v76, (uint64_t *)&v72);
        v37 = v72;
        if (v75 != (_BYTE *)v72 && v72)
        {
          v72 = 0;
          v73 = 0;
LABEL_38:
          WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      v18 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v20 = (float *)(v19 + 4 * a5);
          v21 = (_WORD *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 2 * a3);
          do
          {
            v22 = *v20;
            v23 = (int)*v20;
            if ((double)v23 != v22)
            {
              v24 = (*(_QWORD *)&v22 >> 52) & 0x7FFLL;
              v25 = v24 - 1023;
              v26 = *(_QWORD *)&v22 >> (51 - (*(_QWORD *)&v22 >> 52));
              if (v24 > 0x433)
                LODWORD(v26) = *(_QWORD *)&v22 << ((*(_QWORD *)&v22 >> 52) - 51);
              if (v24 >= 0x41F)
                v27 = v26;
              else
                v27 = (((1 << ((*(_QWORD *)&v22 >> 52) + 1)) - 1) & v26) + (1 << ((*(_QWORD *)&v22 >> 52) + 1));
              if (v22 >= 0.0)
                LOWORD(v23) = v27;
              else
                v23 = -v27;
              if (v25 > 0x53)
                LOWORD(v23) = 0;
            }
            *v21++ = v23;
            ++v20;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v56 = (float *)(v17 + 4 * a5);
          v57 = (_WORD *)(v18 + 2 * a3);
          do
          {
            v58 = *v56;
            v59 = (int)*v56;
            if ((double)v59 != v58)
            {
              v60 = (*(_QWORD *)&v58 >> 52) & 0x7FFLL;
              v61 = v60 - 1023;
              v62 = *(_QWORD *)&v58 >> (51 - (*(_QWORD *)&v58 >> 52));
              if (v60 > 0x433)
                LODWORD(v62) = *(_QWORD *)&v58 << ((*(_QWORD *)&v58 >> 52) - 51);
              if (v60 >= 0x41F)
                v63 = v62;
              else
                v63 = (((1 << ((*(_QWORD *)&v58 >> 52) + 1)) - 1) & v62) + (1 << ((*(_QWORD *)&v58 >> 52) + 1));
              if (v58 >= 0.0)
                LOWORD(v59) = v63;
              else
                v59 = -v63;
              if (v61 > 0x53)
                LOWORD(v59) = 0;
            }
            *v57++ = v59;
            ++v56;
            --v9;
          }
          while (v9);
        }
        else
        {
          v64 = (float *)(v19 + 4 * a5);
          v65 = (_WORD *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 2 * a3);
          do
          {
            v66 = *v64;
            v67 = (int)*v64;
            if ((double)v67 != v66)
            {
              v68 = (*(_QWORD *)&v66 >> 52) & 0x7FFLL;
              v69 = v68 - 1023;
              v70 = *(_QWORD *)&v66 >> (51 - (*(_QWORD *)&v66 >> 52));
              if (v68 > 0x433)
                LODWORD(v70) = *(_QWORD *)&v66 << ((*(_QWORD *)&v66 >> 52) - 51);
              if (v68 >= 0x41F)
                v71 = v70;
              else
                v71 = (((1 << ((*(_QWORD *)&v66 >> 52) + 1)) - 1) & v70) + (1 << ((*(_QWORD *)&v66 >> 52) + 1));
              if (v66 >= 0.0)
                LOWORD(v67) = v71;
              else
                v67 = -v71;
              if (v69 > 0x53)
                LOWORD(v67) = 0;
            }
            *v65++ = v67;
            ++v64;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v40 = (float *)(v17 + 4 * a5);
        v41 = (_WORD *)(v18 + 2 * a3);
        do
        {
          v42 = *v40;
          v43 = (int)*v40;
          if ((double)v43 != v42)
          {
            v44 = (*(_QWORD *)&v42 >> 52) & 0x7FFLL;
            v45 = v44 - 1023;
            v46 = *(_QWORD *)&v42 >> (51 - (*(_QWORD *)&v42 >> 52));
            if (v44 > 0x433)
              LODWORD(v46) = *(_QWORD *)&v42 << ((*(_QWORD *)&v42 >> 52) - 51);
            if (v44 >= 0x41F)
              v47 = v46;
            else
              v47 = (((1 << ((*(_QWORD *)&v42 >> 52) + 1)) - 1) & v46) + (1 << ((*(_QWORD *)&v42 >> 52) + 1));
            if (v42 >= 0.0)
              LOWORD(v43) = v47;
            else
              v43 = -v47;
            if (v45 > 0x53)
              LOWORD(v43) = 0;
          }
          *v41++ = v43;
          ++v40;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  _WORD *v21;
  double v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  double *v40;
  _WORD *v41;
  double v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  double *v56;
  _WORD *v57;
  double v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  double *v64;
  _WORD *v65;
  double v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  WTF *v72;
  int v73;
  int v74;
  _BYTE v75[64];
  uint64_t *v76[5];
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v8 = a7;
  v9 = a6;
  v79 = a4;
  v80 = a3;
  v78 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v72) = 0;
    LOBYTE(v73) = 0;
    v48 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v72, a3, a4, a5, a6, a7, a8);
    if (v51)
      v52 = v48;
    else
      v52 = 0;
    v53 = *(_BYTE *)(a4 + 40) & 7;
    if (v52 < v9)
      v9 = v52;
    v77 = v9;
    if (v53 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v72) = 0;
      LOBYTE(v73) = 0;
      v54 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v72, v49, v50, a5, a6, a7, a8);
      if (v55)
        v15 = v54;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v77 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FEB18);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v76[0] = (uint64_t *)&v77;
      v76[1] = &v79;
      v76[2] = &v78;
      v76[3] = (uint64_t *)a1;
      v76[4] = &v80;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FEBB8);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1984FEBC0);
        }
        v38 = (WTF *)(4 * v9);
        v39 = (void *)WTF::fastMalloc(v38);
        bzero(v39, (size_t)v38);
        v72 = (WTF *)v39;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v76, (uint64_t *)&v72);
        v37 = v72;
        v72 = 0;
        if (v37)
          goto LABEL_38;
      }
      else
      {
        v72 = (WTF *)v75;
        v73 = 32;
        v74 = v9;
        if (v9 >= 0x21)
        {
          v29 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v73 = v9;
          v72 = v29;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v76, (uint64_t *)&v72);
        v37 = v72;
        if (v75 != (_BYTE *)v72 && v72)
        {
          v72 = 0;
          v73 = 0;
LABEL_38:
          WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      v18 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v20 = (double *)(v19 + 8 * a5);
          v21 = (_WORD *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 2 * a3);
          do
          {
            v22 = *v20;
            v23 = (int)*v20;
            if (*v20 != (double)v23)
            {
              v24 = (*(_QWORD *)&v22 >> 52) & 0x7FFLL;
              v25 = v24 - 1023;
              v26 = *(_QWORD *)&v22 >> (51 - (*(_QWORD *)&v22 >> 52));
              if (v24 > 0x433)
                LODWORD(v26) = *(_QWORD *)&v22 << ((*(_QWORD *)&v22 >> 52) - 51);
              if (v24 >= 0x41F)
                v27 = v26;
              else
                v27 = (((1 << ((*(_QWORD *)&v22 >> 52) + 1)) - 1) & v26) + (1 << ((*(_QWORD *)&v22 >> 52) + 1));
              if (v22 >= 0.0)
                LOWORD(v23) = v27;
              else
                v23 = -v27;
              if (v25 > 0x53)
                LOWORD(v23) = 0;
            }
            *v21++ = v23;
            ++v20;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v56 = (double *)(v17 + 8 * a5);
          v57 = (_WORD *)(v18 + 2 * a3);
          do
          {
            v58 = *v56;
            v59 = (int)*v56;
            if (*v56 != (double)v59)
            {
              v60 = (*(_QWORD *)&v58 >> 52) & 0x7FFLL;
              v61 = v60 - 1023;
              v62 = *(_QWORD *)&v58 >> (51 - (*(_QWORD *)&v58 >> 52));
              if (v60 > 0x433)
                LODWORD(v62) = *(_QWORD *)&v58 << ((*(_QWORD *)&v58 >> 52) - 51);
              if (v60 >= 0x41F)
                v63 = v62;
              else
                v63 = (((1 << ((*(_QWORD *)&v58 >> 52) + 1)) - 1) & v62) + (1 << ((*(_QWORD *)&v58 >> 52) + 1));
              if (v58 >= 0.0)
                LOWORD(v59) = v63;
              else
                v59 = -v63;
              if (v61 > 0x53)
                LOWORD(v59) = 0;
            }
            *v57++ = v59;
            ++v56;
            --v9;
          }
          while (v9);
        }
        else
        {
          v64 = (double *)(v19 + 8 * a5);
          v65 = (_WORD *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 2 * a3);
          do
          {
            v66 = *v64;
            v67 = (int)*v64;
            if (*v64 != (double)v67)
            {
              v68 = (*(_QWORD *)&v66 >> 52) & 0x7FFLL;
              v69 = v68 - 1023;
              v70 = *(_QWORD *)&v66 >> (51 - (*(_QWORD *)&v66 >> 52));
              if (v68 > 0x433)
                LODWORD(v70) = *(_QWORD *)&v66 << ((*(_QWORD *)&v66 >> 52) - 51);
              if (v68 >= 0x41F)
                v71 = v70;
              else
                v71 = (((1 << ((*(_QWORD *)&v66 >> 52) + 1)) - 1) & v70) + (1 << ((*(_QWORD *)&v66 >> 52) + 1));
              if (v66 >= 0.0)
                LOWORD(v67) = v71;
              else
                v67 = -v71;
              if (v69 > 0x53)
                LOWORD(v67) = 0;
            }
            *v65++ = v67;
            ++v64;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v40 = (double *)(v17 + 8 * a5);
        v41 = (_WORD *)(v18 + 2 * a3);
        do
        {
          v42 = *v40;
          v43 = (int)*v40;
          if (*v40 != (double)v43)
          {
            v44 = (*(_QWORD *)&v42 >> 52) & 0x7FFLL;
            v45 = v44 - 1023;
            v46 = *(_QWORD *)&v42 >> (51 - (*(_QWORD *)&v42 >> 52));
            if (v44 > 0x433)
              LODWORD(v46) = *(_QWORD *)&v42 << ((*(_QWORD *)&v42 >> 52) - 51);
            if (v44 >= 0x41F)
              v47 = v46;
            else
              v47 = (((1 << ((*(_QWORD *)&v42 >> 52) + 1)) - 1) & v46) + (1 << ((*(_QWORD *)&v42 >> 52) + 1));
            if (v42 >= 0.0)
              LOWORD(v43) = v47;
            else
              v43 = -v47;
            if (v45 > 0x53)
              LOWORD(v43) = 0;
          }
          *v41++ = v43;
          ++v40;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FED6CLL);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1984FEE98);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = **result;
  if (!v2)
    return result;
  v3 = result[3];
  v4 = *result[2];
  v5 = *(_QWORD *)(*result[1] + 16);
  v6 = qword_1ECF4C038;
  v7 = disablePrimitiveGigacageRequested;
  v8 = *((unsigned int *)a2 + 3);
  v9 = *a2;
  if (qword_1ECF4C038)
  {
    v10 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v11 = v2 - 1;
    if (byte_1ECF4C022)
    {
      if (v11 >= v8)
        goto LABEL_39;
      v12 = v9 - 2;
      v13 = v4 + v10 - 1;
      v14 = **result;
      do
      {
        *(_WORD *)(v12 + 2 * v14) = *(char *)(v13 + v14);
        --v14;
      }
      while (v14);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v11 >= v8)
        goto LABEL_39;
      v25 = v9 - 2;
      v26 = v4 + v5 - 1;
      v27 = **result;
      do
      {
        *(_WORD *)(v25 + 2 * v27) = *(char *)(v26 + v27);
        --v27;
      }
      while (v27);
    }
    else
    {
      if (v11 >= v8)
        goto LABEL_39;
      v31 = v9 - 2;
      v32 = v4 + v10 - 1;
      v33 = **result;
      do
      {
        *(_WORD *)(v31 + 2 * v33) = *(char *)(v32 + v33);
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    v11 = v2 - 1;
    if (v2 - 1 >= v8)
      goto LABEL_39;
    v22 = v9 - 2;
    v23 = v4 + v5 - 1;
    v24 = **result;
    do
    {
      *(_WORD *)(v22 + 2 * v24) = *(char *)(v23 + v24);
      --v24;
    }
    while (v24);
  }
  v15 = *result[4];
  v16 = *a2;
  if (v7)
  {
    if (v11 < v8)
    {
      v17 = v3[2];
      if (v6)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + v6;
        v19 = 2 * v15 - 2;
        do
        {
          if (byte_1ECF4C022)
            v20 = v18;
          else
            v20 = v17;
          *(_WORD *)(v20 + v19 + 2 * v2) = *(_WORD *)(v16 - 2 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v21 = v17 + 2 * v15 - 2;
        do
        {
          *(_WORD *)(v21 + 2 * v2) = *(_WORD *)(v16 - 2 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x1984FF04CLL);
  }
  if (v11 >= v8)
    goto LABEL_39;
  v28 = v3[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v6;
  if (!v6)
    v29 = v28;
  v30 = v29 + 2 * v15 - 2;
  do
  {
    *(_WORD *)(v30 + 2 * v2) = *(_WORD *)(v16 - 2 + 2 * v2);
    --v2;
  }
  while (v2);
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v4 + v9 - 1;
        v11 = **result;
        do
        {
          *(_WORD *)(v8 - 2 + 2 * v11) = *(char *)(v10 + v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v20 = v4 + v5 - 1;
        v21 = **result;
        do
        {
          *(_WORD *)(v8 - 2 + 2 * v21) = *(char *)(v20 + v21);
          --v21;
        }
        while (v21);
      }
      else
      {
        v24 = v4 + v9 - 1;
        v25 = **result;
        do
        {
          *(_WORD *)(v8 - 2 + 2 * v25) = *(char *)(v24 + v25);
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      v16 = v4 + v5 - 1;
      v17 = **result;
      do
      {
        *(_WORD *)(v8 - 2 + 2 * v17) = *(char *)(v16 + v17);
        --v17;
      }
      while (v17);
    }
    v12 = *result[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 2;
        do
        {
          *(_WORD *)(v14 + 2 * v12 - 2 + 2 * v2) = *(_WORD *)(v15 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v22 = v8 - 2;
        if (v7)
        {
          v23 = v13 + 2 * v12 - 2;
          do
          {
            *(_WORD *)(v23 + 2 * v2) = *(_WORD *)(v22 + 2 * v2);
            --v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            *(_WORD *)(v14 + 2 * v12 - 2 + 2 * v2) = *(_WORD *)(v22 + 2 * v2);
            --v2;
          }
          while (v2);
        }
      }
    }
    else
    {
      v18 = v8 - 2;
      v19 = v13 + 2 * v12 - 2;
      do
      {
        *(_WORD *)(v19 + 2 * v2) = *(_WORD *)(v18 + 2 * v2);
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = **result;
  if (!v2)
    return result;
  v3 = result[3];
  v4 = *result[2];
  v5 = *(_QWORD *)(*result[1] + 16);
  v6 = qword_1ECF4C038;
  v7 = disablePrimitiveGigacageRequested;
  v8 = *((unsigned int *)a2 + 3);
  v9 = *a2;
  if (qword_1ECF4C038)
  {
    v10 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v11 = v2 - 1;
    if (byte_1ECF4C022)
    {
      if (v11 >= v8)
        goto LABEL_39;
      v12 = v9 - 2;
      v13 = v10 + 4 * v4 - 4;
      v14 = **result;
      do
      {
        *(_WORD *)(v12 + 2 * v14) = *(_DWORD *)(v13 + 4 * v14);
        --v14;
      }
      while (v14);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v11 >= v8)
        goto LABEL_39;
      v25 = v9 - 2;
      v26 = v5 + 4 * v4 - 4;
      v27 = **result;
      do
      {
        *(_WORD *)(v25 + 2 * v27) = *(_DWORD *)(v26 + 4 * v27);
        --v27;
      }
      while (v27);
    }
    else
    {
      if (v11 >= v8)
        goto LABEL_39;
      v31 = v9 - 2;
      v32 = v10 + 4 * v4 - 4;
      v33 = **result;
      do
      {
        *(_WORD *)(v31 + 2 * v33) = *(_DWORD *)(v32 + 4 * v33);
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    v11 = v2 - 1;
    if (v2 - 1 >= v8)
      goto LABEL_39;
    v22 = v9 - 2;
    v23 = v5 + 4 * v4 - 4;
    v24 = **result;
    do
    {
      *(_WORD *)(v22 + 2 * v24) = *(_DWORD *)(v23 + 4 * v24);
      --v24;
    }
    while (v24);
  }
  v15 = *result[4];
  v16 = *a2;
  if (v7)
  {
    if (v11 < v8)
    {
      v17 = v3[2];
      if (v6)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + v6;
        v19 = 2 * v15 - 2;
        do
        {
          if (byte_1ECF4C022)
            v20 = v18;
          else
            v20 = v17;
          *(_WORD *)(v20 + v19 + 2 * v2) = *(_WORD *)(v16 - 2 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v21 = v17 + 2 * v15 - 2;
        do
        {
          *(_WORD *)(v21 + 2 * v2) = *(_WORD *)(v16 - 2 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x1984FF3A8);
  }
  if (v11 >= v8)
    goto LABEL_39;
  v28 = v3[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v6;
  if (!v6)
    v29 = v28;
  v30 = v29 + 2 * v15 - 2;
  do
  {
    *(_WORD *)(v30 + 2 * v2) = *(_WORD *)(v16 - 2 + 2 * v2);
    --v2;
  }
  while (v2);
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + 4 * v4 - 4;
        v11 = **result;
        do
        {
          *(_WORD *)(v8 - 2 + 2 * v11) = *(_DWORD *)(v10 + 4 * v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v20 = v5 + 4 * v4 - 4;
        v21 = **result;
        do
        {
          *(_WORD *)(v8 - 2 + 2 * v21) = *(_DWORD *)(v20 + 4 * v21);
          --v21;
        }
        while (v21);
      }
      else
      {
        v24 = v9 + 4 * v4 - 4;
        v25 = **result;
        do
        {
          *(_WORD *)(v8 - 2 + 2 * v25) = *(_DWORD *)(v24 + 4 * v25);
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      v16 = v5 + 4 * v4 - 4;
      v17 = **result;
      do
      {
        *(_WORD *)(v8 - 2 + 2 * v17) = *(_DWORD *)(v16 + 4 * v17);
        --v17;
      }
      while (v17);
    }
    v12 = *result[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 2;
        do
        {
          *(_WORD *)(v14 + 2 * v12 - 2 + 2 * v2) = *(_WORD *)(v15 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v22 = v8 - 2;
        if (v7)
        {
          v23 = v13 + 2 * v12 - 2;
          do
          {
            *(_WORD *)(v23 + 2 * v2) = *(_WORD *)(v22 + 2 * v2);
            --v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            *(_WORD *)(v14 + 2 * v12 - 2 + 2 * v2) = *(_WORD *)(v22 + 2 * v2);
            --v2;
          }
          while (v2);
        }
      }
    }
    else
    {
      v18 = v8 - 2;
      v19 = v13 + 2 * v12 - 2;
      do
      {
        *(_WORD *)(v19 + 2 * v2) = *(_WORD *)(v18 + 2 * v2);
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = **result;
  if (!v2)
    return result;
  v3 = result[3];
  v4 = *result[2];
  v5 = *(_QWORD *)(*result[1] + 16);
  v6 = qword_1ECF4C038;
  v7 = disablePrimitiveGigacageRequested;
  v8 = *((unsigned int *)a2 + 3);
  v9 = *a2;
  if (qword_1ECF4C038)
  {
    v10 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v11 = v2 - 1;
    if (byte_1ECF4C022)
    {
      if (v11 >= v8)
        goto LABEL_39;
      v12 = v9 - 2;
      v13 = v4 + v10 - 1;
      v14 = **result;
      do
      {
        *(_WORD *)(v12 + 2 * v14) = *(unsigned __int8 *)(v13 + v14);
        --v14;
      }
      while (v14);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v11 >= v8)
        goto LABEL_39;
      v25 = v9 - 2;
      v26 = v4 + v5 - 1;
      v27 = **result;
      do
      {
        *(_WORD *)(v25 + 2 * v27) = *(unsigned __int8 *)(v26 + v27);
        --v27;
      }
      while (v27);
    }
    else
    {
      if (v11 >= v8)
        goto LABEL_39;
      v31 = v9 - 2;
      v32 = v4 + v10 - 1;
      v33 = **result;
      do
      {
        *(_WORD *)(v31 + 2 * v33) = *(unsigned __int8 *)(v32 + v33);
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    v11 = v2 - 1;
    if (v2 - 1 >= v8)
      goto LABEL_39;
    v22 = v9 - 2;
    v23 = v4 + v5 - 1;
    v24 = **result;
    do
    {
      *(_WORD *)(v22 + 2 * v24) = *(unsigned __int8 *)(v23 + v24);
      --v24;
    }
    while (v24);
  }
  v15 = *result[4];
  v16 = *a2;
  if (v7)
  {
    if (v11 < v8)
    {
      v17 = v3[2];
      if (v6)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + v6;
        v19 = 2 * v15 - 2;
        do
        {
          if (byte_1ECF4C022)
            v20 = v18;
          else
            v20 = v17;
          *(_WORD *)(v20 + v19 + 2 * v2) = *(_WORD *)(v16 - 2 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v21 = v17 + 2 * v15 - 2;
        do
        {
          *(_WORD *)(v21 + 2 * v2) = *(_WORD *)(v16 - 2 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x1984FF704);
  }
  if (v11 >= v8)
    goto LABEL_39;
  v28 = v3[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v6;
  if (!v6)
    v29 = v28;
  v30 = v29 + 2 * v15 - 2;
  do
  {
    *(_WORD *)(v30 + 2 * v2) = *(_WORD *)(v16 - 2 + 2 * v2);
    --v2;
  }
  while (v2);
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v4 + v9 - 1;
        v11 = **result;
        do
        {
          *(_WORD *)(v8 - 2 + 2 * v11) = *(unsigned __int8 *)(v10 + v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v20 = v4 + v5 - 1;
        v21 = **result;
        do
        {
          *(_WORD *)(v8 - 2 + 2 * v21) = *(unsigned __int8 *)(v20 + v21);
          --v21;
        }
        while (v21);
      }
      else
      {
        v24 = v4 + v9 - 1;
        v25 = **result;
        do
        {
          *(_WORD *)(v8 - 2 + 2 * v25) = *(unsigned __int8 *)(v24 + v25);
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      v16 = v4 + v5 - 1;
      v17 = **result;
      do
      {
        *(_WORD *)(v8 - 2 + 2 * v17) = *(unsigned __int8 *)(v16 + v17);
        --v17;
      }
      while (v17);
    }
    v12 = *result[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 2;
        do
        {
          *(_WORD *)(v14 + 2 * v12 - 2 + 2 * v2) = *(_WORD *)(v15 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v22 = v8 - 2;
        if (v7)
        {
          v23 = v13 + 2 * v12 - 2;
          do
          {
            *(_WORD *)(v23 + 2 * v2) = *(_WORD *)(v22 + 2 * v2);
            --v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            *(_WORD *)(v14 + 2 * v12 - 2 + 2 * v2) = *(_WORD *)(v22 + 2 * v2);
            --v2;
          }
          while (v2);
        }
      }
    }
    else
    {
      v18 = v8 - 2;
      v19 = v13 + 2 * v12 - 2;
      do
      {
        *(_WORD *)(v19 + 2 * v2) = *(_WORD *)(v18 + 2 * v2);
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  double v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  double v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  double v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v2 = **result;
  if (!v2)
    return result;
  v3 = result[3];
  v4 = *result[2];
  v5 = *(_QWORD *)(*result[1] + 16);
  v6 = qword_1ECF4C038;
  v7 = disablePrimitiveGigacageRequested;
  v8 = *((unsigned int *)a2 + 3);
  v9 = *a2;
  if (qword_1ECF4C038)
  {
    v10 = v2 - 1;
    if (byte_1ECF4C022)
    {
      if (v2 - 1 >= v8)
        goto LABEL_68;
      v11 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 4 * v4 - 4;
      v12 = **result;
      do
      {
        v13 = *(float *)(v11 + 4 * v12);
        v14 = v13;
        v15 = (int)v13;
        if ((double)(int)v13 != v13)
        {
          v16 = (*(_QWORD *)&v14 >> 52) & 0x7FFLL;
          v17 = v16 - 1023;
          v18 = *(_QWORD *)&v14 >> (51 - (*(_QWORD *)&v14 >> 52));
          if (v16 > 0x433)
            LODWORD(v18) = *(_QWORD *)&v14 << ((*(_QWORD *)&v14 >> 52) - 51);
          if (v16 >= 0x41F)
            v19 = v18;
          else
            v19 = (((1 << ((*(_QWORD *)&v14 >> 52) + 1)) - 1) & v18) + (1 << ((*(_QWORD *)&v14 >> 52) + 1));
          if (v14 >= 0.0)
            LOWORD(v15) = v19;
          else
            v15 = -v19;
          if (v17 > 0x53)
            LOWORD(v15) = 0;
        }
        *(_WORD *)(v9 - 2 + 2 * v12--) = v15;
      }
      while (v12);
    }
    else
    {
      if (v2 - 1 >= v8)
        goto LABEL_68;
      v35 = v9 - 2;
      v36 = 4 * v4 - 4;
      v37 = **result;
      do
      {
        v38 = v5;
        if (!v7)
          v38 = (v5 & 0x3FFFFFFFFLL) + v6;
        v39 = *(float *)(v38 + v36 + 4 * v37);
        v40 = v39;
        v41 = (int)v39;
        if ((double)(int)v39 != v39)
        {
          v42 = (*(_QWORD *)&v40 >> 52) & 0x7FFLL;
          v43 = v42 - 1023;
          v44 = *(_QWORD *)&v40 >> (51 - (*(_QWORD *)&v40 >> 52));
          if (v42 > 0x433)
            LODWORD(v44) = *(_QWORD *)&v40 << ((*(_QWORD *)&v40 >> 52) - 51);
          if (v42 >= 0x41F)
            v45 = v44;
          else
            v45 = (((1 << ((*(_QWORD *)&v40 >> 52) + 1)) - 1) & v44) + (1 << ((*(_QWORD *)&v40 >> 52) + 1));
          if (v40 >= 0.0)
            LOWORD(v41) = v45;
          else
            v41 = -v45;
          if (v43 > 0x53)
            LOWORD(v41) = 0;
        }
        *(_WORD *)(v35 + 2 * v37--) = v41;
      }
      while (v37);
    }
  }
  else
  {
    v10 = v2 - 1;
    if (v2 - 1 >= v8)
      goto LABEL_68;
    v27 = **result;
    do
    {
      v28 = *(float *)(v5 + 4 * v4 - 4 + 4 * v27);
      v29 = v28;
      v30 = (int)v28;
      if ((double)(int)v28 != v28)
      {
        v31 = (*(_QWORD *)&v29 >> 52) & 0x7FFLL;
        v32 = v31 - 1023;
        v33 = *(_QWORD *)&v29 >> (51 - (*(_QWORD *)&v29 >> 52));
        if (v31 > 0x433)
          LODWORD(v33) = *(_QWORD *)&v29 << ((*(_QWORD *)&v29 >> 52) - 51);
        if (v31 >= 0x41F)
          v34 = v33;
        else
          v34 = (((1 << ((*(_QWORD *)&v29 >> 52) + 1)) - 1) & v33) + (1 << ((*(_QWORD *)&v29 >> 52) + 1));
        if (v29 >= 0.0)
          LOWORD(v30) = v34;
        else
          v30 = -v34;
        if (v32 > 0x53)
          LOWORD(v30) = 0;
      }
      *(_WORD *)(v9 - 2 + 2 * v27--) = v30;
    }
    while (v27);
  }
  v20 = *result[4];
  v21 = *a2;
  if (v7)
  {
    if (v10 < v8)
    {
      v22 = v3[2];
      if (v6)
      {
        v23 = (v22 & 0x3FFFFFFFFLL) + v6;
        v24 = 2 * v20 - 2;
        do
        {
          if (byte_1ECF4C022)
            v25 = v23;
          else
            v25 = v22;
          *(_WORD *)(v25 + v24 + 2 * v2) = *(_WORD *)(v21 - 2 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v26 = v22 + 2 * v20 - 2;
        do
        {
          *(_WORD *)(v26 + 2 * v2) = *(_WORD *)(v21 - 2 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      return result;
    }
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x1984FFBBCLL);
  }
  if (v10 >= v8)
    goto LABEL_68;
  v46 = v3[2];
  v47 = (v46 & 0x3FFFFFFFFLL) + v6;
  if (!v6)
    v47 = v46;
  v48 = v47 + 2 * v20 - 2;
  do
  {
    *(_WORD *)(v48 + 2 * v2) = *(_WORD *)(v21 - 2 + 2 * v2);
    --v2;
  }
  while (v2);
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  double v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  double v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  double v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      if (byte_1ECF4C022)
      {
        v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 4 * v4 - 4;
        v10 = **result;
        do
        {
          v11 = *(float *)(v9 + 4 * v10);
          v12 = v11;
          v13 = (int)v11;
          if ((double)(int)v11 != v11)
          {
            v14 = (*(_QWORD *)&v12 >> 52) & 0x7FFLL;
            v15 = v14 - 1023;
            v16 = *(_QWORD *)&v12 >> (51 - (*(_QWORD *)&v12 >> 52));
            if (v14 > 0x433)
              LODWORD(v16) = *(_QWORD *)&v12 << ((*(_QWORD *)&v12 >> 52) - 51);
            if (v14 >= 0x41F)
              v17 = v16;
            else
              v17 = (((1 << ((*(_QWORD *)&v12 >> 52) + 1)) - 1) & v16) + (1 << ((*(_QWORD *)&v12 >> 52) + 1));
            if (v12 >= 0.0)
              LOWORD(v13) = v17;
            else
              v13 = -v17;
            if (v15 > 0x53)
              LOWORD(v13) = 0;
          }
          *(_WORD *)(v8 - 2 + 2 * v10--) = v13;
        }
        while (v10);
      }
      else
      {
        v32 = 4 * v4 - 4;
        v33 = **result;
        do
        {
          v34 = v5;
          if (!v7)
            v34 = (v5 & 0x3FFFFFFFFLL) + v6;
          v35 = *(float *)(v34 + v32 + 4 * v33);
          v36 = v35;
          v37 = (int)v35;
          if ((double)(int)v35 != v35)
          {
            v38 = (*(_QWORD *)&v36 >> 52) & 0x7FFLL;
            v39 = v38 - 1023;
            v40 = *(_QWORD *)&v36 >> (51 - (*(_QWORD *)&v36 >> 52));
            if (v38 > 0x433)
              LODWORD(v40) = *(_QWORD *)&v36 << ((*(_QWORD *)&v36 >> 52) - 51);
            if (v38 >= 0x41F)
              v41 = v40;
            else
              v41 = (((1 << ((*(_QWORD *)&v36 >> 52) + 1)) - 1) & v40) + (1 << ((*(_QWORD *)&v36 >> 52) + 1));
            if (v36 >= 0.0)
              LOWORD(v37) = v41;
            else
              v37 = -v41;
            if (v39 > 0x53)
              LOWORD(v37) = 0;
          }
          *(_WORD *)(v8 - 2 + 2 * v33--) = v37;
        }
        while (v33);
      }
    }
    else
    {
      v22 = **result;
      do
      {
        v23 = *(float *)(v5 + 4 * v4 - 4 + 4 * v22);
        v24 = v23;
        v25 = (int)v23;
        if ((double)(int)v23 != v23)
        {
          v26 = (*(_QWORD *)&v24 >> 52) & 0x7FFLL;
          v27 = v26 - 1023;
          v28 = *(_QWORD *)&v24 >> (51 - (*(_QWORD *)&v24 >> 52));
          if (v26 > 0x433)
            LODWORD(v28) = *(_QWORD *)&v24 << ((*(_QWORD *)&v24 >> 52) - 51);
          if (v26 >= 0x41F)
            v29 = v28;
          else
            v29 = (((1 << ((*(_QWORD *)&v24 >> 52) + 1)) - 1) & v28) + (1 << ((*(_QWORD *)&v24 >> 52) + 1));
          if (v24 >= 0.0)
            LOWORD(v25) = v29;
          else
            v25 = -v29;
          if (v27 > 0x53)
            LOWORD(v25) = 0;
        }
        *(_WORD *)(v8 - 2 + 2 * v22--) = v25;
      }
      while (v22);
    }
    v18 = *result[4];
    v19 = v3[2];
    if (v6)
    {
      v20 = (v19 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v21 = v8 - 2;
        do
        {
          *(_WORD *)(v20 + 2 * v18 - 2 + 2 * v2) = *(_WORD *)(v21 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v42 = v8 - 2;
        if (v7)
        {
          v43 = v19 + 2 * v18 - 2;
          do
          {
            *(_WORD *)(v43 + 2 * v2) = *(_WORD *)(v42 + 2 * v2);
            --v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            *(_WORD *)(v20 + 2 * v18 - 2 + 2 * v2) = *(_WORD *)(v42 + 2 * v2);
            --v2;
          }
          while (v2);
        }
      }
    }
    else
    {
      v30 = v8 - 2;
      v31 = v19 + 2 * v18 - 2;
      do
      {
        *(_WORD *)(v31 + 2 * v2) = *(_WORD *)(v30 + 2 * v2);
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = **result;
  if (!v2)
    return result;
  v3 = result[3];
  v4 = *result[2];
  v5 = *(_QWORD *)(*result[1] + 16);
  v6 = qword_1ECF4C038;
  v7 = disablePrimitiveGigacageRequested;
  v8 = *((unsigned int *)a2 + 3);
  v9 = *a2;
  if (qword_1ECF4C038)
  {
    v10 = v2 - 1;
    if (byte_1ECF4C022)
    {
      if (v2 - 1 >= v8)
        goto LABEL_68;
      v11 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v4 - 8;
      v12 = **result;
      do
      {
        v13 = *(double *)(v11 + 8 * v12);
        v14 = (int)v13;
        if (v13 != (double)(int)v13)
        {
          v15 = (*(_QWORD *)&v13 >> 52) & 0x7FFLL;
          v16 = v15 - 1023;
          v17 = *(_QWORD *)&v13 >> (51 - (*(_QWORD *)&v13 >> 52));
          if (v15 > 0x433)
            LODWORD(v17) = *(_QWORD *)&v13 << ((*(_QWORD *)&v13 >> 52) - 51);
          if (v15 >= 0x41F)
            v18 = v17;
          else
            v18 = (((1 << ((*(_QWORD *)&v13 >> 52) + 1)) - 1) & v17) + (1 << ((*(_QWORD *)&v13 >> 52) + 1));
          if (v13 >= 0.0)
            LOWORD(v14) = v18;
          else
            v14 = -v18;
          if (v16 > 0x53)
            LOWORD(v14) = 0;
        }
        *(_WORD *)(v9 - 2 + 2 * v12--) = v14;
      }
      while (v12);
    }
    else
    {
      if (v2 - 1 >= v8)
        goto LABEL_68;
      v33 = v9 - 2;
      v34 = 8 * v4 - 8;
      v35 = **result;
      do
      {
        v36 = v5;
        if (!v7)
          v36 = (v5 & 0x3FFFFFFFFLL) + v6;
        v37 = *(double *)(v36 + v34 + 8 * v35);
        v38 = (int)v37;
        if (v37 != (double)(int)v37)
        {
          v39 = (*(_QWORD *)&v37 >> 52) & 0x7FFLL;
          v40 = v39 - 1023;
          v41 = *(_QWORD *)&v37 >> (51 - (*(_QWORD *)&v37 >> 52));
          if (v39 > 0x433)
            LODWORD(v41) = *(_QWORD *)&v37 << ((*(_QWORD *)&v37 >> 52) - 51);
          if (v39 >= 0x41F)
            v42 = v41;
          else
            v42 = (((1 << ((*(_QWORD *)&v37 >> 52) + 1)) - 1) & v41) + (1 << ((*(_QWORD *)&v37 >> 52) + 1));
          if (v37 >= 0.0)
            LOWORD(v38) = v42;
          else
            v38 = -v42;
          if (v40 > 0x53)
            LOWORD(v38) = 0;
        }
        *(_WORD *)(v33 + 2 * v35--) = v38;
      }
      while (v35);
    }
  }
  else
  {
    v10 = v2 - 1;
    if (v2 - 1 >= v8)
      goto LABEL_68;
    v26 = **result;
    do
    {
      v27 = *(double *)(v5 + 8 * v4 - 8 + 8 * v26);
      v28 = (int)v27;
      if (v27 != (double)(int)v27)
      {
        v29 = (*(_QWORD *)&v27 >> 52) & 0x7FFLL;
        v30 = v29 - 1023;
        v31 = *(_QWORD *)&v27 >> (51 - (*(_QWORD *)&v27 >> 52));
        if (v29 > 0x433)
          LODWORD(v31) = *(_QWORD *)&v27 << ((*(_QWORD *)&v27 >> 52) - 51);
        if (v29 >= 0x41F)
          v32 = v31;
        else
          v32 = (((1 << ((*(_QWORD *)&v27 >> 52) + 1)) - 1) & v31) + (1 << ((*(_QWORD *)&v27 >> 52) + 1));
        if (v27 >= 0.0)
          LOWORD(v28) = v32;
        else
          v28 = -v32;
        if (v30 > 0x53)
          LOWORD(v28) = 0;
      }
      *(_WORD *)(v9 - 2 + 2 * v26--) = v28;
    }
    while (v26);
  }
  v19 = *result[4];
  v20 = *a2;
  if (v7)
  {
    if (v10 < v8)
    {
      v21 = v3[2];
      if (v6)
      {
        v22 = (v21 & 0x3FFFFFFFFLL) + v6;
        v23 = 2 * v19 - 2;
        do
        {
          if (byte_1ECF4C022)
            v24 = v22;
          else
            v24 = v21;
          *(_WORD *)(v24 + v23 + 2 * v2) = *(_WORD *)(v20 - 2 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v25 = v21 + 2 * v19 - 2;
        do
        {
          *(_WORD *)(v25 + 2 * v2) = *(_WORD *)(v20 - 2 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      return result;
    }
LABEL_68:
    __break(0xC471u);
    JUMPOUT(0x198500160);
  }
  if (v10 >= v8)
    goto LABEL_68;
  v43 = v3[2];
  v44 = (v43 & 0x3FFFFFFFFLL) + v6;
  if (!v6)
    v44 = v43;
  v45 = v44 + 2 * v19 - 2;
  do
  {
    *(_WORD *)(v45 + 2 * v2) = *(_WORD *)(v20 - 2 + 2 * v2);
    --v2;
  }
  while (v2);
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      if (byte_1ECF4C022)
      {
        v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v4 - 8;
        v10 = **result;
        do
        {
          v11 = *(double *)(v9 + 8 * v10);
          v12 = (int)v11;
          if (v11 != (double)(int)v11)
          {
            v13 = (*(_QWORD *)&v11 >> 52) & 0x7FFLL;
            v14 = v13 - 1023;
            v15 = *(_QWORD *)&v11 >> (51 - (*(_QWORD *)&v11 >> 52));
            if (v13 > 0x433)
              LODWORD(v15) = *(_QWORD *)&v11 << ((*(_QWORD *)&v11 >> 52) - 51);
            if (v13 >= 0x41F)
              v16 = v15;
            else
              v16 = (((1 << ((*(_QWORD *)&v11 >> 52) + 1)) - 1) & v15) + (1 << ((*(_QWORD *)&v11 >> 52) + 1));
            if (v11 >= 0.0)
              LOWORD(v12) = v16;
            else
              v12 = -v16;
            if (v14 > 0x53)
              LOWORD(v12) = 0;
          }
          *(_WORD *)(v8 - 2 + 2 * v10--) = v12;
        }
        while (v10);
      }
      else
      {
        v30 = 8 * v4 - 8;
        v31 = **result;
        do
        {
          v32 = v5;
          if (!v7)
            v32 = (v5 & 0x3FFFFFFFFLL) + v6;
          v33 = *(double *)(v32 + v30 + 8 * v31);
          v34 = (int)v33;
          if (v33 != (double)(int)v33)
          {
            v35 = (*(_QWORD *)&v33 >> 52) & 0x7FFLL;
            v36 = v35 - 1023;
            v37 = *(_QWORD *)&v33 >> (51 - (*(_QWORD *)&v33 >> 52));
            if (v35 > 0x433)
              LODWORD(v37) = *(_QWORD *)&v33 << ((*(_QWORD *)&v33 >> 52) - 51);
            if (v35 >= 0x41F)
              v38 = v37;
            else
              v38 = (((1 << ((*(_QWORD *)&v33 >> 52) + 1)) - 1) & v37) + (1 << ((*(_QWORD *)&v33 >> 52) + 1));
            if (v33 >= 0.0)
              LOWORD(v34) = v38;
            else
              v34 = -v38;
            if (v36 > 0x53)
              LOWORD(v34) = 0;
          }
          *(_WORD *)(v8 - 2 + 2 * v31--) = v34;
        }
        while (v31);
      }
    }
    else
    {
      v21 = **result;
      do
      {
        v22 = *(double *)(v5 + 8 * v4 - 8 + 8 * v21);
        v23 = (int)v22;
        if (v22 != (double)(int)v22)
        {
          v24 = (*(_QWORD *)&v22 >> 52) & 0x7FFLL;
          v25 = v24 - 1023;
          v26 = *(_QWORD *)&v22 >> (51 - (*(_QWORD *)&v22 >> 52));
          if (v24 > 0x433)
            LODWORD(v26) = *(_QWORD *)&v22 << ((*(_QWORD *)&v22 >> 52) - 51);
          if (v24 >= 0x41F)
            v27 = v26;
          else
            v27 = (((1 << ((*(_QWORD *)&v22 >> 52) + 1)) - 1) & v26) + (1 << ((*(_QWORD *)&v22 >> 52) + 1));
          if (v22 >= 0.0)
            LOWORD(v23) = v27;
          else
            v23 = -v27;
          if (v25 > 0x53)
            LOWORD(v23) = 0;
        }
        *(_WORD *)(v8 - 2 + 2 * v21--) = v23;
      }
      while (v21);
    }
    v17 = *result[4];
    v18 = v3[2];
    if (v6)
    {
      v19 = (v18 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v20 = v8 - 2;
        do
        {
          *(_WORD *)(v19 + 2 * v17 - 2 + 2 * v2) = *(_WORD *)(v20 + 2 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v39 = v8 - 2;
        if (v7)
        {
          v40 = v18 + 2 * v17 - 2;
          do
          {
            *(_WORD *)(v40 + 2 * v2) = *(_WORD *)(v39 + 2 * v2);
            --v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            *(_WORD *)(v19 + 2 * v17 - 2 + 2 * v2) = *(_WORD *)(v39 + 2 * v2);
            --v2;
          }
          while (v2);
        }
      }
    }
    else
    {
      v28 = v8 - 2;
      v29 = v18 + 2 * v17 - 2;
      do
      {
        *(_WORD *)(v29 + 2 * v2) = *(_WORD *)(v28 + 2 * v2);
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t JSC::toNativeFromValue<JSC::Int16Adaptor>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  int v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  JSC::JSObject *v20;

  v20 = (JSC::JSObject *)a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
    return (__int16)a2;
  if ((unint64_t)a2 >> 49)
  {
    v9 = a2 - 0x2000000000000;
    if ((double)(int)COERCE_DOUBLE(a2 - 0x2000000000000) == COERCE_DOUBLE(a2 - 0x2000000000000))
    {
      LODWORD(a2) = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      return (__int16)a2;
    }
    v10 = (v9 >> 52) & 0x7FF;
    v11 = (v9 >> 52) + 1;
    if ((v10 - 1023) <= 0x53)
    {
      v12 = v9 >> (51 - (v9 >> 52));
      if (v10 > 0x433)
        LODWORD(v12) = a2 << (v10 - 51);
      v13 = (((1 << v11) - 1) & v12) + (1 << v11);
      if (v10 >= 0x41F)
        v14 = v12;
      else
        v14 = v13;
      if (a2 >= 0x2000000000000)
        LOWORD(a2) = v14;
      else
        LODWORD(a2) = -v14;
      return (__int16)a2;
    }
LABEL_15:
    LOWORD(a2) = 0;
    return (__int16)a2;
  }
  JSC::JSValue::toNumberSlowCase(&v20, a1, a3, a4, a5, a6, a7, a8, a9);
  LODWORD(a2) = (int)v15;
  if (v15 == (double)(int)v15)
    return (__int16)a2;
  v16 = (*(_QWORD *)&v15 >> 52) & 0x7FFLL;
  if ((v16 - 1023) > 0x53)
    goto LABEL_15;
  v17 = *(_QWORD *)&v15 >> (51 - (*(_QWORD *)&v15 >> 52));
  if (v16 > 0x433)
    LODWORD(v17) = *(_QWORD *)&v15 << ((*(_QWORD *)&v15 >> 52) - 51);
  if (v16 >= 0x41F)
    v18 = v17;
  else
    v18 = (((1 << ((*(_QWORD *)&v15 >> 52) + 1)) - 1) & v17) + (1 << ((*(_QWORD *)&v15 >> 52) + 1));
  if (v15 >= 0.0)
    LOWORD(a2) = v18;
  else
    LODWORD(a2) = -v18;
  return (__int16)a2;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::copyFromDoubleShapeArray(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  double v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _WORD *v15;
  double v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  _WORD *v22;
  double v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  _WORD *v29;
  double v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;

  if (a5)
  {
    v5 = *(_QWORD *)(a3 + 8);
    v6 = *(_QWORD *)(result + 16);
    if (qword_1ECF4C038)
    {
      v7 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v8 = (_WORD *)(v7 + 2 * a2);
        do
        {
          v9 = *(double *)(v5 + 8 * a4);
          v10 = (int)v9;
          if (v9 != (double)(int)v9)
          {
            v11 = (*(_QWORD *)&v9 >> 52) & 0x7FFLL;
            v12 = v11 - 1023;
            v13 = *(_QWORD *)&v9 >> (51 - (*(_QWORD *)&v9 >> 52));
            if (v11 > 0x433)
              LODWORD(v13) = *(_QWORD *)&v9 << ((*(_QWORD *)&v9 >> 52) - 51);
            if (v11 >= 0x41F)
              v14 = v13;
            else
              v14 = (((1 << ((*(_QWORD *)&v9 >> 52) + 1)) - 1) & v13) + (1 << ((*(_QWORD *)&v9 >> 52) + 1));
            if (v9 >= 0.0)
              LOWORD(v10) = v14;
            else
              v10 = -v14;
            if (v12 > 0x53)
              LOWORD(v10) = 0;
          }
          *v8++ = v10;
          ++a4;
          --a5;
        }
        while (a5);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v22 = (_WORD *)(v6 + 2 * a2);
        do
        {
          v23 = *(double *)(v5 + 8 * a4);
          v24 = (int)v23;
          if (v23 != (double)(int)v23)
          {
            v25 = (*(_QWORD *)&v23 >> 52) & 0x7FFLL;
            v26 = v25 - 1023;
            v27 = *(_QWORD *)&v23 >> (51 - (*(_QWORD *)&v23 >> 52));
            if (v25 > 0x433)
              LODWORD(v27) = *(_QWORD *)&v23 << ((*(_QWORD *)&v23 >> 52) - 51);
            if (v25 >= 0x41F)
              v28 = v27;
            else
              v28 = (((1 << ((*(_QWORD *)&v23 >> 52) + 1)) - 1) & v27) + (1 << ((*(_QWORD *)&v23 >> 52) + 1));
            if (v23 >= 0.0)
              LOWORD(v24) = v28;
            else
              v24 = -v28;
            if (v26 > 0x53)
              LOWORD(v24) = 0;
          }
          *v22++ = v24;
          ++a4;
          --a5;
        }
        while (a5);
      }
      else
      {
        v29 = (_WORD *)(v7 + 2 * a2);
        do
        {
          v30 = *(double *)(v5 + 8 * a4);
          v31 = (int)v30;
          if (v30 != (double)(int)v30)
          {
            v32 = (*(_QWORD *)&v30 >> 52) & 0x7FFLL;
            v33 = v32 - 1023;
            v34 = *(_QWORD *)&v30 >> (51 - (*(_QWORD *)&v30 >> 52));
            if (v32 > 0x433)
              LODWORD(v34) = *(_QWORD *)&v30 << ((*(_QWORD *)&v30 >> 52) - 51);
            if (v32 >= 0x41F)
              v35 = v34;
            else
              v35 = (((1 << ((*(_QWORD *)&v30 >> 52) + 1)) - 1) & v34) + (1 << ((*(_QWORD *)&v30 >> 52) + 1));
            if (v30 >= 0.0)
              LOWORD(v31) = v35;
            else
              v31 = -v35;
            if (v33 > 0x53)
              LOWORD(v31) = 0;
          }
          *v29++ = v31;
          ++a4;
          --a5;
        }
        while (a5);
      }
    }
    else
    {
      v15 = (_WORD *)(v6 + 2 * a2);
      do
      {
        v16 = *(double *)(v5 + 8 * a4);
        v17 = (int)v16;
        if (v16 != (double)(int)v16)
        {
          v18 = (*(_QWORD *)&v16 >> 52) & 0x7FFLL;
          v19 = v18 - 1023;
          v20 = *(_QWORD *)&v16 >> (51 - (*(_QWORD *)&v16 >> 52));
          if (v18 > 0x433)
            LODWORD(v20) = *(_QWORD *)&v16 << ((*(_QWORD *)&v16 >> 52) - 51);
          if (v18 >= 0x41F)
            v21 = v20;
          else
            v21 = (((1 << ((*(_QWORD *)&v16 >> 52) + 1)) - 1) & v20) + (1 << ((*(_QWORD *)&v16 >> 52) + 1));
          if (v16 >= 0.0)
            LOWORD(v17) = v21;
          else
            v17 = -v21;
          if (v19 > 0x53)
            LOWORD(v17) = 0;
        }
        *v15++ = v17;
        ++a4;
        --a5;
      }
      while (a5);
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  uint64_t v18;
  unint64_t SlowCase;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *((_QWORD *)a1 + 7);
  v34 = v9;
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v29, (JSC *)v9, a2, a3, 2, 0, a7, a8);
  if (!v29)
  {
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v34);
    return 0;
  }
  v17 = *(JSC::Heap **)(v9 + 40880);
  if (!v17)
    v17 = JSC::GCClient::Heap::uint16ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
  v18 = v9 + 192;
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase >= *((_QWORD *)v17 + 4))
  {
    SlowCase = *((_QWORD *)v17 + 5);
    if ((SlowCase & 1) != 0)
    {
      v25 = (uint64_t)v17;
      JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v25, v9 + 192, 48, 0, 0, v26, v27, v28);
      v18 = v9 + 192;
      goto LABEL_6;
    }
    v24 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v24);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v24;
  }
  *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v20 = *(_DWORD *)(v29 + 8);
  *(_DWORD *)SlowCase = v29 >> 4;
  *(_DWORD *)(SlowCase + 4) = v20;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v31;
  *(_BYTE *)(SlowCase + 40) = v32;
  v21 = v33;
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v21;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v33;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
  }
  v22 = v30;
  if (v30 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v22 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v22;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
  return SlowCase;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createUninitialized(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t OutOfMemoryError;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  JSC::Exception *v29;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35;

  v9 = *((_QWORD *)a1 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v31, (JSC *)v9, a2, a3, 2, 1, a7, a8);
  if (v31)
  {
    v17 = JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>((JSC::Heap **)v9, (JSC::VM *)0x30, v11, v12, v13, v14, v15, v16);
    v18 = *(_DWORD *)(v31 + 8);
    *(_DWORD *)v17 = v31 >> 4;
    *(_DWORD *)(v17 + 4) = v18;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_OWORD *)(v17 + 24) = v33;
    *(_BYTE *)(v17 + 40) = v34;
    v19 = v35;
    v20 = v9 + 192;
    if (*(_BYTE *)(v9 + 755))
    {
      __dmb(0xAu);
      *(_QWORD *)(v17 + 8) = v19;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v17 + 7))
        JSC::Heap::writeBarrierSlowPath(v20, v17);
      __dmb(0xAu);
    }
    else
    {
      *(_QWORD *)(v17 + 8) = v35;
      if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(v17 + 7))
        JSC::Heap::writeBarrierSlowPath(v20, v17);
    }
    v21 = v32;
    if (v32 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v21 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(v17 + 16) = v21;
    JSC::JSArrayBufferView::finishCreation(v17, (JSC::VM *)v9);
  }
  else
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v10);
    v29 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v29 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v23, v24, v25, v26, v27);
    }
    JSC::VM::throwException((JSC::VM *)v9, a1, v29, v28, v23, v24, v25, v26, v27);
    return 0;
  }
  return v17;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromTypedArray(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD v9[5];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v12 = a3;
  v13 = a2;
  v10 = a6;
  v11 = a5;
  v9[0] = &v10;
  v9[1] = a1;
  v9[2] = &v13;
  v9[3] = &v12;
  v9[4] = &v11;
  switch(*(_BYTE *)(a4 + 5))
  {
    case '\'':
      result = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '(':
      result = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ')':
      result = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '*':
    case '+':
      result = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()((uint64_t)v9, a4, a3, a4, a5, a6, a7, a8);
      break;
    case ',':
      result = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '-':
      result = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '.':
      result = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '/':
      result = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '0':
      result = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '1':
      result = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198500B64);
  }
  return result;
}

unint64_t JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSGlobalObject *v17;
  uint64_t v18;
  JSC::JSGlobalObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  unint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t OutOfMemoryError;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC::Exception *v45;
  int v47;
  char v48;
  uint64_t v49;
  char *v50;
  _OWORD v51[4];
  uint64_t v52;
  uint64_t v53;
  JSC::JSGlobalObject *v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  char v58;
  uint64_t v59;

  v53 = *((_QWORD *)a1 + 7);
  v54 = a1;
  v48 = 0;
  v49 = 0x800000000;
  v50 = (char *)v51 + 8;
  memset(v51, 0, sizeof(v51));
  v52 = 0;
  v55 = (unint64_t)&v48;
  v56 = (uint64_t)&v54;
  *(_QWORD *)&v57 = &v53;
  JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(a1, (uint64_t)this, a4, (uint64_t)&v55, a5, a6, a7, a8);
  v16 = v53;
  if (*(_DWORD *)(v53 + 80))
  {
    v47 = *(_DWORD *)(v53 + 80);
    if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v53 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v16 + 16))
      goto LABEL_37;
  }
  v17 = v54;
  v18 = *((_QWORD *)v54 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v55, (JSC *)v18, a2, v49, 2, 1, v14, v15);
  if (!v55)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v17, v19);
    v45 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v45 = (JSC::Exception *)JSC::Exception::create(v18, (JSC::VM *)OutOfMemoryError, 0, v39, v40, v41, v42, v43);
    }
    JSC::VM::throwException((JSC::VM *)v18, v17, v45, v44, v39, v40, v41, v42, v43);
LABEL_37:
    v26 = 0;
    goto LABEL_38;
  }
  v26 = JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>>((JSC::Heap **)v18, (JSC::VM *)0x30, v20, v21, v22, v23, v24, v25);
  v27 = *(_DWORD *)(v55 + 8);
  *(_DWORD *)v26 = v55 >> 4;
  *(_DWORD *)(v26 + 4) = v27;
  *(_QWORD *)(v26 + 8) = 0;
  *(_QWORD *)(v26 + 16) = 0;
  *(_OWORD *)(v26 + 24) = v57;
  *(_BYTE *)(v26 + 40) = v58;
  v28 = v59;
  v29 = v18 + 192;
  if (*(_BYTE *)(v18 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(v26 + 8) = v28;
    if (*(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(v26 + 7))
      JSC::Heap::writeBarrierSlowPath(v29, v26);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(v26 + 8) = v59;
    if (*(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(v26 + 7))
      JSC::Heap::writeBarrierSlowPath(v29, v26);
  }
  v30 = v56;
  if (v56 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v30 = (v56 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(v26 + 16) = v30;
  JSC::JSArrayBufferView::finishCreation(v26, (JSC::VM *)v18);
  if ((_DWORD)v49)
  {
    v32 = 0;
    do
    {
      v33 = *((_QWORD *)v54 + 7);
      v34 = JSC::toNativeFromValue<JSC::Uint16Adaptor>(v54, *(_QWORD *)&v50[8 * v32], v10, v11, v12, v13, v14, v15, v31);
      if (*(_DWORD *)(v33 + 80))
      {
        v37 = *(_DWORD *)(v33 + 80);
        if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v33 + 64), 7u, v10, v11, v12, v13, v14, v15);
        if (*(_QWORD *)(v33 + 16))
          goto LABEL_37;
      }
      if ((*(_BYTE *)(v26 + 40) & 8) == 0
        || (v35 = *(_QWORD *)(v26 + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        if (!JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::inBounds(v26, v32))
          goto LABEL_37;
        v36 = *(_QWORD *)(v26 + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v36 = (v36 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_WORD *)(v36 + 2 * v32) = v34;
      }
    }
    while (++v32 < v49);
  }
LABEL_38:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v49, v9, v10, v11, v12, v13, v14, v15);
  return v26;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromArrayLike(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  _BOOL8 result;
  const JSC::PropertyTable *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int128 *v37;
  const __int16 *v38;
  unsigned __int128 *v39;
  unsigned __int128 *v40;
  unsigned __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int8x16_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;

  v13 = *(_QWORD *)(a2 + 56);
  result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, a6, a5, a6, a7, a8);
  if (result)
  {
    if (a6 >= 0xFFFFFFFF)
      v20 = 0xFFFFFFFFLL;
    else
      v20 = a6;
    if (v20 >= a5)
      v21 = v20 - a5;
    else
      v21 = 0;
    if (!a4)
      goto LABEL_54;
    v22 = *(unsigned __int8 *)(a4 + 5);
    v23 = (v22 & 0xFE) == 0x24 && v21 == a6;
    if (!v23 || v22 != 36)
      goto LABEL_54;
    v24 = *(_BYTE *)(a4 + 4);
    v25 = (v24 & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8) : 0;
    if (a6 + a5 > v25)
      goto LABEL_54;
    v26 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28);
    v27 = *(_QWORD *)(v26 + 2216);
    v28 = (v27 & 1) != 0 ? (v27 >> 1) & 3 : *(unsigned __int8 *)(v27 + 4);
    if (v28 == 2 || *(_BYTE *)(*(_QWORD *)(v26 + 2048) + 4) == 2)
      goto LABEL_54;
    v29 = *(_QWORD *)(v26 + 2304);
    v30 = (v29 & 1) != 0 ? (v29 >> 1) & 3 : *(unsigned __int8 *)(v29 + 4);
    if (v30 == 2)
      goto LABEL_54;
    v31 = *(unsigned __int8 *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 8);
    v32 = (v31 >> 1) & 7;
    if ((v31 & 0x10) != 0)
      v32 = ((v31 & 0xE) + 10) >> 1;
    v33 = *(_DWORD *)(v26 + 4 * v32 + 852);
    if (v33)
      v34 = 16 * (v33 & 0xFFFFFFFE);
    else
      v34 = 0;
    if (v34 != 16 * (*(_DWORD *)a4 & 0xFFFFFFFE))
    {
      if ((v31 & 0x20) != 0)
        goto LABEL_54;
      v43 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x30);
      if (!v43)
        v43 = *(_QWORD *)(a4 + 16);
      if (v43 != *(_QWORD *)(v26 + 672)
        || JSC::JSObject::getDirectOffset((_DWORD *)a4, *(JSC::VM **)(v26 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 56) + 41952) + 2712), v15, v16, v17, v18, v19) != -1)
      {
        goto LABEL_54;
      }
      v24 = *(_BYTE *)(a4 + 4);
    }
    v35 = v24 & 0xE;
    if (v35 == 6)
    {
      JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::copyFromDoubleShapeArray(a1, a3, a4, a5, a6);
      return 1;
    }
    if (v35 == 4)
    {
      v36 = *(_QWORD *)(a1 + 16);
      if (v36 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v36 = (v36 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v37 = (unsigned __int128 *)(v36 + 2 * a3);
      v38 = (const __int16 *)(*(_QWORD *)(a4 + 8) + 8 * a5);
      v39 = (unsigned __int128 *)((char *)v37 + 2 * a6);
      if (a6 >= 8)
      {
        v40 = (unsigned __int128 *)((char *)v37 + 2 * (a6 & 0xFFFFFFF8));
        do
        {
          v41 = (unsigned __int128)vld4q_s16(v38);
          v38 += 32;
          *v37++ = v41;
        }
        while (v37 != v40);
        v37 = v40;
      }
      if (v37 != v39)
      {
        result = 1;
        do
        {
          v42 = *(_QWORD *)v38;
          v38 += 4;
          *(_WORD *)v37 = v42;
          v37 = (unsigned __int128 *)((char *)v37 + 2);
        }
        while (v37 != v39);
        return result;
      }
      return 1;
    }
LABEL_54:
    if (v20 <= a5)
    {
LABEL_84:
      if (v21 >= a6)
        return 1;
      while (1)
      {
        v66 = JSC::JSObject::get((JSC::JSObject *)a4, (uint64_t ***)a2, (const WTF::StringImpl *)(a5 + v21), (uint64_t)v15, v16, v17, v18, v19);
        if (*(_DWORD *)(v13 + 80))
        {
          v73 = *(_DWORD *)(v13 + 80);
          if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v60, v61, v62, v63, v64, v65);
          if (*(_QWORD *)(v13 + 16))
            break;
        }
        v68 = *(_QWORD *)(a2 + 56);
        v70 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)a2, v66, v60, v61, v62, v63, v64, v65, v67);
        if (*(_DWORD *)(v68 + 80))
        {
          v74 = *(_DWORD *)(v68 + 80);
          if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v68 + 64), 7u, v69, (uint64_t)v15, v16, v17, v18, v19);
          if (*(_QWORD *)(v68 + 16))
            break;
        }
        if ((*(_BYTE *)(a1 + 40) & 8) == 0
          || (v71 = *(_QWORD *)(a1 + 16)) != 0
          && (!qword_1ECF4C038
           || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
           || (v71 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::inBounds(a1, a3 + v21);
          if (!result)
            return result;
          v72 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v72 = (v72 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_WORD *)(v72 + 2 * a3 + 2 * v21) = v70;
        }
        if (++v21 >= a6)
          return 1;
      }
    }
    else
    {
      v44 = 0;
      while (1)
      {
        v51 = JSC::JSObject::get((JSC::JSObject *)a4, (JSC::JSGlobalObject *)a2, (a5 + v44));
        if (*(_DWORD *)(v13 + 80))
        {
          v58 = *(_DWORD *)(v13 + 80);
          if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v45, v46, v47, v48, v49, v50);
          if (*(_QWORD *)(v13 + 16))
            break;
        }
        v53 = *(_QWORD *)(a2 + 56);
        v55 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)a2, v51, v45, v46, v47, v48, v49, v50, v52);
        if (*(_DWORD *)(v53 + 80))
        {
          v59 = *(_DWORD *)(v53 + 80);
          if ((v59 & 0x27) != 0 && (v59 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v53 + 64), 7u, v54, (uint64_t)v15, v16, v17, v18, v19);
          if (*(_QWORD *)(v53 + 16))
            break;
        }
        if ((*(_BYTE *)(a1 + 40) & 8) == 0
          || (v56 = *(_QWORD *)(a1 + 16)) != 0
          && (!qword_1ECF4C038
           || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
           || (v56 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          result = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::inBounds(a1, a3 + v44);
          if (!result)
            return result;
          v57 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v57 = (v57 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_WORD *)(v57 + 2 * a3 + 2 * v44) = v55;
        }
        if (++v44 >= v21)
          goto LABEL_84;
      }
    }
    return 0;
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v20;
  char v21;
  _BYTE v22[16];

  v10 = *(uint64_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v22[0] = 0;
    v22[8] = 0;
    v20 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v22, a3, a4, a5, a6, a7, a8);
    if (v21)
      v12 = v20;
    else
      v12 = 0;
    v13 = *(uint64_t **)a1;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(uint64_t **)a1;
  }
  if (v12 >= *v10)
    v14 = *v10;
  else
    v14 = v12;
  *v13 = v14;
  v15 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(v11, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), v14, a5, a6, a7, a8);
  if (v15)
  {
    if ((*(_BYTE *)(a2 + 5) & 0xFE) != 0x2A)
    {
      __break(0xC471u);
      JUMPOUT(0x198501538);
    }
    v16 = *(_QWORD *)(v11 + 16);
    if (v16 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v17 = (void *)(v16 + 2 * **(_QWORD **)(a1 + 24));
    v18 = *(_QWORD *)(a2 + 16);
    if (v18 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memmove(v17, (const void *)(v18 + 2 * **(_QWORD **)(a1 + 32)), 2 * **(_QWORD **)a1);
  }
  return v15;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _WORD *v22;
  __int16 v23;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  void *v35;
  char *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char *v47;
  _WORD *v48;
  __int16 v49;
  char *v50;
  _WORD *v51;
  __int16 v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[64];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v42)
      v43 = v39;
    else
      v43 = 0;
    v44 = *(_BYTE *)(a4 + 40) & 7;
    if (v43 < v9)
      v9 = v43;
    v58 = v9;
    if (v44 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v40, v41, a5, a6, a7, a8);
      if (v46)
        v15 = v45;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198501884);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985018B8);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985018C0);
        }
        v34 = (WTF *)(4 * v9);
        v35 = (void *)WTF::fastMalloc(v34);
        bzero(v35, (size_t)v34);
        v53 = (WTF *)v35;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v57, (uint64_t *)&v53);
        v33 = v53;
        v53 = 0;
        if (v33)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v25 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v54 = v9;
          v53 = v25;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v33 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (char *)(v18 + a5);
          v22 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (char *)(v17 + a5);
          v48 = (_WORD *)(v19 + 2 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (char *)(v18 + a5);
          v51 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v36 = (char *)(v17 + a5);
        v37 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2 * a3);
        do
        {
          v38 = *v36++;
          *v37++ = v38;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  _WORD *v22;
  int v23;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  void *v35;
  int *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  int *v47;
  _WORD *v48;
  int v49;
  int *v50;
  _WORD *v51;
  int v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[64];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v42)
      v43 = v39;
    else
      v43 = 0;
    v44 = *(_BYTE *)(a4 + 40) & 7;
    if (v43 < v9)
      v9 = v43;
    v58 = v9;
    if (v44 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v40, v41, a5, a6, a7, a8);
      if (v46)
        v15 = v45;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198501B5CLL);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198501B90);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198501B98);
        }
        v34 = (WTF *)(4 * v9);
        v35 = (void *)WTF::fastMalloc(v34);
        bzero(v35, (size_t)v34);
        v53 = (WTF *)v35;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v57, (uint64_t *)&v53);
        v33 = v53;
        v53 = 0;
        if (v33)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v25 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v54 = v9;
          v53 = v25;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v33 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (int *)(v18 + 4 * a5);
          v22 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (int *)(v17 + 4 * a5);
          v48 = (_WORD *)(v19 + 2 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (int *)(v18 + 4 * a5);
          v51 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v36 = (int *)(v17 + 4 * a5);
        v37 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2 * a3);
        do
        {
          v38 = *v36++;
          *v37++ = v38;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _WORD *v26;
  __int16 v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  unsigned __int8 *v40;
  _WORD *v41;
  __int16 v42;
  unint64_t v43;
  char v44;
  unsigned __int8 *v45;
  _WORD *v46;
  __int16 v47;
  unsigned __int8 *v48;
  _WORD *v49;
  __int16 v50;
  WTF *v51;
  int v52;
  int v53;
  _BYTE v54[64];
  uint64_t *v55[5];
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v8 = a7;
  v9 = a6;
  v58 = a4;
  v59 = a3;
  v57 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v51) = 0;
    LOBYTE(v52) = 0;
    v43 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v51, a3, a4, a5, a6, a7, a8);
    if (v44)
      v15 = v43;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
  }
  if (v15 < v9)
    v9 = v15;
  v56 = v9;
  if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v9, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    JUMPOUT(0x198501E00);
  }
  v20 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, v16, v17, v18, v19);
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v55[0] = (uint64_t *)&v56;
      v55[1] = &v58;
      v55[2] = &v57;
      v55[3] = (uint64_t *)a1;
      v55[4] = &v59;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198501E34);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198501E3CLL);
        }
        v38 = (WTF *)(4 * v9);
        v39 = (void *)WTF::fastMalloc(v38);
        bzero(v39, (size_t)v38);
        v51 = (WTF *)v39;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v55, (uint64_t *)&v51);
        v37 = v51;
        v51 = 0;
        if (v37)
          goto LABEL_26;
      }
      else
      {
        v51 = (WTF *)v54;
        v52 = 32;
        v53 = v9;
        if (v9 >= 0x21)
        {
          v29 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v52 = v9;
          v51 = v29;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v55, (uint64_t *)&v51);
        v37 = v51;
        if (v54 != (_BYTE *)v51 && v51)
        {
          v51 = 0;
          v52 = 0;
LABEL_26:
          WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
    else if (v9)
    {
      v21 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v22 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v23 = *(_QWORD *)(a1 + 16);
        v24 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v25 = (unsigned __int8 *)(v22 + a5);
          v26 = (_WORD *)(v24 + 2 * a3);
          do
          {
            v27 = *v25++;
            *v26++ = v27;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v45 = (unsigned __int8 *)(v21 + a5);
          v46 = (_WORD *)(v23 + 2 * a3);
          do
          {
            v47 = *v45++;
            *v46++ = v47;
            --v9;
          }
          while (v9);
        }
        else
        {
          v48 = (unsigned __int8 *)(v22 + a5);
          v49 = (_WORD *)(v24 + 2 * a3);
          do
          {
            v50 = *v48++;
            *v49++ = v50;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v40 = (unsigned __int8 *)(v21 + a5);
        v41 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2 * a3);
        do
        {
          v42 = *v40++;
          *v41++ = v42;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _WORD *v22;
  __int16 v23;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  void *v35;
  unsigned __int8 *v36;
  _WORD *v37;
  __int16 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  unsigned __int8 *v47;
  _WORD *v48;
  __int16 v49;
  unsigned __int8 *v50;
  _WORD *v51;
  __int16 v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[64];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v42)
      v43 = v39;
    else
      v43 = 0;
    v44 = *(_BYTE *)(a4 + 40) & 7;
    if (v43 < v9)
      v9 = v43;
    v58 = v9;
    if (v44 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v40, v41, a5, a6, a7, a8);
      if (v46)
        v15 = v45;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1985020D0);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198502104);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850210CLL);
        }
        v34 = (WTF *)(4 * v9);
        v35 = (void *)WTF::fastMalloc(v34);
        bzero(v35, (size_t)v34);
        v53 = (WTF *)v35;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v57, (uint64_t *)&v53);
        v33 = v53;
        v53 = 0;
        if (v33)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v25 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v54 = v9;
          v53 = v25;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v33 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (unsigned __int8 *)(v18 + a5);
          v22 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (unsigned __int8 *)(v17 + a5);
          v48 = (_WORD *)(v19 + 2 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (unsigned __int8 *)(v18 + a5);
          v51 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v36 = (unsigned __int8 *)(v17 + a5);
        v37 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2 * a3);
        do
        {
          v38 = *v36++;
          *v37++ = v38;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  _WORD *v22;
  int v23;
  WTF *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v34;
  void *v35;
  int *v36;
  _WORD *v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  int *v47;
  _WORD *v48;
  int v49;
  int *v50;
  _WORD *v51;
  int v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[64];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v42)
      v43 = v39;
    else
      v43 = 0;
    v44 = *(_BYTE *)(a4 + 40) & 7;
    if (v43 < v9)
      v9 = v43;
    v58 = v9;
    if (v44 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v40, v41, a5, a6, a7, a8);
      if (v46)
        v15 = v45;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1985023A8);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985023DCLL);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985023E4);
        }
        v34 = (WTF *)(4 * v9);
        v35 = (void *)WTF::fastMalloc(v34);
        bzero(v35, (size_t)v34);
        v53 = (WTF *)v35;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v57, (uint64_t *)&v53);
        v33 = v53;
        v53 = 0;
        if (v33)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v25 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v54 = v9;
          v53 = v25;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v33 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v33, v26, v27, v28, v29, v30, v31, v32);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (int *)(v18 + 4 * a5);
          v22 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (int *)(v17 + 4 * a5);
          v48 = (_WORD *)(v19 + 2 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (int *)(v18 + 4 * a5);
          v51 = (_WORD *)(v20 + 2 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v36 = (int *)(v17 + 4 * a5);
        v37 = (_WORD *)(*(_QWORD *)(a1 + 16) + 2 * a3);
        do
        {
          v38 = *v36++;
          *v37++ = v38;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  _WORD *v21;
  double v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  float *v40;
  _WORD *v41;
  double v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  float *v56;
  _WORD *v57;
  double v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  float *v64;
  _WORD *v65;
  double v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  WTF *v72;
  int v73;
  int v74;
  _BYTE v75[64];
  uint64_t *v76[5];
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v8 = a7;
  v9 = a6;
  v79 = a4;
  v80 = a3;
  v78 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v72) = 0;
    LOBYTE(v73) = 0;
    v48 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v72, a3, a4, a5, a6, a7, a8);
    if (v51)
      v52 = v48;
    else
      v52 = 0;
    v53 = *(_BYTE *)(a4 + 40) & 7;
    if (v52 < v9)
      v9 = v52;
    v77 = v9;
    if (v53 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v72) = 0;
      LOBYTE(v73) = 0;
      v54 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v72, v49, v50, a5, a6, a7, a8);
      if (v55)
        v15 = v54;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v77 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19850274CLL);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v76[0] = (uint64_t *)&v77;
      v76[1] = &v79;
      v76[2] = &v78;
      v76[3] = (uint64_t *)a1;
      v76[4] = &v80;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985027F0);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985027F8);
        }
        v38 = (WTF *)(4 * v9);
        v39 = (void *)WTF::fastMalloc(v38);
        bzero(v39, (size_t)v38);
        v72 = (WTF *)v39;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v76, (uint64_t *)&v72);
        v37 = v72;
        v72 = 0;
        if (v37)
          goto LABEL_38;
      }
      else
      {
        v72 = (WTF *)v75;
        v73 = 32;
        v74 = v9;
        if (v9 >= 0x21)
        {
          v29 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v73 = v9;
          v72 = v29;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v76, (uint64_t *)&v72);
        v37 = v72;
        if (v75 != (_BYTE *)v72 && v72)
        {
          v72 = 0;
          v73 = 0;
LABEL_38:
          WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      v18 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v20 = (float *)(v19 + 4 * a5);
          v21 = (_WORD *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 2 * a3);
          do
          {
            v22 = *v20;
            v23 = (int)*v20;
            if ((double)v23 != v22)
            {
              v24 = (*(_QWORD *)&v22 >> 52) & 0x7FFLL;
              v25 = v24 - 1023;
              v26 = *(_QWORD *)&v22 >> (51 - (*(_QWORD *)&v22 >> 52));
              if (v24 > 0x433)
                LODWORD(v26) = *(_QWORD *)&v22 << ((*(_QWORD *)&v22 >> 52) - 51);
              if (v24 >= 0x41F)
                v27 = v26;
              else
                v27 = (((1 << ((*(_QWORD *)&v22 >> 52) + 1)) - 1) & v26) + (1 << ((*(_QWORD *)&v22 >> 52) + 1));
              if (v22 >= 0.0)
                LOWORD(v23) = v27;
              else
                v23 = -v27;
              if (v25 > 0x53)
                LOWORD(v23) = 0;
            }
            *v21++ = v23;
            ++v20;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v56 = (float *)(v17 + 4 * a5);
          v57 = (_WORD *)(v18 + 2 * a3);
          do
          {
            v58 = *v56;
            v59 = (int)*v56;
            if ((double)v59 != v58)
            {
              v60 = (*(_QWORD *)&v58 >> 52) & 0x7FFLL;
              v61 = v60 - 1023;
              v62 = *(_QWORD *)&v58 >> (51 - (*(_QWORD *)&v58 >> 52));
              if (v60 > 0x433)
                LODWORD(v62) = *(_QWORD *)&v58 << ((*(_QWORD *)&v58 >> 52) - 51);
              if (v60 >= 0x41F)
                v63 = v62;
              else
                v63 = (((1 << ((*(_QWORD *)&v58 >> 52) + 1)) - 1) & v62) + (1 << ((*(_QWORD *)&v58 >> 52) + 1));
              if (v58 >= 0.0)
                LOWORD(v59) = v63;
              else
                v59 = -v63;
              if (v61 > 0x53)
                LOWORD(v59) = 0;
            }
            *v57++ = v59;
            ++v56;
            --v9;
          }
          while (v9);
        }
        else
        {
          v64 = (float *)(v19 + 4 * a5);
          v65 = (_WORD *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 2 * a3);
          do
          {
            v66 = *v64;
            v67 = (int)*v64;
            if ((double)v67 != v66)
            {
              v68 = (*(_QWORD *)&v66 >> 52) & 0x7FFLL;
              v69 = v68 - 1023;
              v70 = *(_QWORD *)&v66 >> (51 - (*(_QWORD *)&v66 >> 52));
              if (v68 > 0x433)
                LODWORD(v70) = *(_QWORD *)&v66 << ((*(_QWORD *)&v66 >> 52) - 51);
              if (v68 >= 0x41F)
                v71 = v70;
              else
                v71 = (((1 << ((*(_QWORD *)&v66 >> 52) + 1)) - 1) & v70) + (1 << ((*(_QWORD *)&v66 >> 52) + 1));
              if (v66 >= 0.0)
                LOWORD(v67) = v71;
              else
                v67 = -v71;
              if (v69 > 0x53)
                LOWORD(v67) = 0;
            }
            *v65++ = v67;
            ++v64;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v40 = (float *)(v17 + 4 * a5);
        v41 = (_WORD *)(v18 + 2 * a3);
        do
        {
          v42 = *v40;
          v43 = (int)*v40;
          if ((double)v43 != v42)
          {
            v44 = (*(_QWORD *)&v42 >> 52) & 0x7FFLL;
            v45 = v44 - 1023;
            v46 = *(_QWORD *)&v42 >> (51 - (*(_QWORD *)&v42 >> 52));
            if (v44 > 0x433)
              LODWORD(v46) = *(_QWORD *)&v42 << ((*(_QWORD *)&v42 >> 52) - 51);
            if (v44 >= 0x41F)
              v47 = v46;
            else
              v47 = (((1 << ((*(_QWORD *)&v42 >> 52) + 1)) - 1) & v46) + (1 << ((*(_QWORD *)&v42 >> 52) + 1));
            if (v42 >= 0.0)
              LOWORD(v43) = v47;
            else
              v43 = -v47;
            if (v45 > 0x53)
              LOWORD(v43) = 0;
          }
          *v41++ = v43;
          ++v40;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  _WORD *v21;
  double v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  double *v40;
  _WORD *v41;
  double v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  double *v56;
  _WORD *v57;
  double v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  double *v64;
  _WORD *v65;
  double v66;
  int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  WTF *v72;
  int v73;
  int v74;
  _BYTE v75[64];
  uint64_t *v76[5];
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v8 = a7;
  v9 = a6;
  v79 = a4;
  v80 = a3;
  v78 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v72) = 0;
    LOBYTE(v73) = 0;
    v48 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v72, a3, a4, a5, a6, a7, a8);
    if (v51)
      v52 = v48;
    else
      v52 = 0;
    v53 = *(_BYTE *)(a4 + 40) & 7;
    if (v52 < v9)
      v9 = v52;
    v77 = v9;
    if (v53 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v72) = 0;
      LOBYTE(v73) = 0;
      v54 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v72, v49, v50, a5, a6, a7, a8);
      if (v55)
        v15 = v54;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v77 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198502BC0);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v76[0] = (uint64_t *)&v77;
      v76[1] = &v79;
      v76[2] = &v78;
      v76[3] = (uint64_t *)a1;
      v76[4] = &v80;
      if (v9 >> 31)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198502C60);
        }
        if ((v9 & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198502C68);
        }
        v38 = (WTF *)(4 * v9);
        v39 = (void *)WTF::fastMalloc(v38);
        bzero(v39, (size_t)v38);
        v72 = (WTF *)v39;
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<std::unique_ptr<short [],WTF::UniqueArrayFree<short []>>>(v76, (uint64_t *)&v72);
        v37 = v72;
        v72 = 0;
        if (v37)
          goto LABEL_38;
      }
      else
      {
        v72 = (WTF *)v75;
        v73 = 32;
        v74 = v9;
        if (v9 >= 0x21)
        {
          v29 = (WTF *)WTF::fastMalloc((WTF *)(2 * v9));
          v73 = v9;
          v72 = v29;
        }
        JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<WTF::Vector<short,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v76, (uint64_t *)&v72);
        v37 = v72;
        if (v75 != (_BYTE *)v72 && v72)
        {
          v72 = 0;
          v73 = 0;
LABEL_38:
          WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      v18 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v20 = (double *)(v19 + 8 * a5);
          v21 = (_WORD *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 2 * a3);
          do
          {
            v22 = *v20;
            v23 = (int)*v20;
            if (*v20 != (double)v23)
            {
              v24 = (*(_QWORD *)&v22 >> 52) & 0x7FFLL;
              v25 = v24 - 1023;
              v26 = *(_QWORD *)&v22 >> (51 - (*(_QWORD *)&v22 >> 52));
              if (v24 > 0x433)
                LODWORD(v26) = *(_QWORD *)&v22 << ((*(_QWORD *)&v22 >> 52) - 51);
              if (v24 >= 0x41F)
                v27 = v26;
              else
                v27 = (((1 << ((*(_QWORD *)&v22 >> 52) + 1)) - 1) & v26) + (1 << ((*(_QWORD *)&v22 >> 52) + 1));
              if (v22 >= 0.0)
                LOWORD(v23) = v27;
              else
                v23 = -v27;
              if (v25 > 0x53)
                LOWORD(v23) = 0;
            }
            *v21++ = v23;
            ++v20;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v56 = (double *)(v17 + 8 * a5);
          v57 = (_WORD *)(v18 + 2 * a3);
          do
          {
            v58 = *v56;
            v59 = (int)*v56;
            if (*v56 != (double)v59)
            {
              v60 = (*(_QWORD *)&v58 >> 52) & 0x7FFLL;
              v61 = v60 - 1023;
              v62 = *(_QWORD *)&v58 >> (51 - (*(_QWORD *)&v58 >> 52));
              if (v60 > 0x433)
                LODWORD(v62) = *(_QWORD *)&v58 << ((*(_QWORD *)&v58 >> 52) - 51);
              if (v60 >= 0x41F)
                v63 = v62;
              else
                v63 = (((1 << ((*(_QWORD *)&v58 >> 52) + 1)) - 1) & v62) + (1 << ((*(_QWORD *)&v58 >> 52) + 1));
              if (v58 >= 0.0)
                LOWORD(v59) = v63;
              else
                v59 = -v63;
              if (v61 > 0x53)
                LOWORD(v59) = 0;
            }
            *v57++ = v59;
            ++v56;
            --v9;
          }
          while (v9);
        }
        else
        {
          v64 = (double *)(v19 + 8 * a5);
          v65 = (_WORD *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 2 * a3);
          do
          {
            v66 = *v64;
            v67 = (int)*v64;
            if (*v64 != (double)v67)
            {
              v68 = (*(_QWORD *)&v66 >> 52) & 0x7FFLL;
              v69 = v68 - 1023;
              v70 = *(_QWORD *)&v66 >> (51 - (*(_QWORD *)&v66 >> 52));
              if (v68 > 0x433)
                LODWORD(v70) = *(_QWORD *)&v66 << ((*(_QWORD *)&v66 >> 52) - 51);
              if (v68 >= 0x41F)
                v71 = v70;
              else
                v71 = (((1 << ((*(_QWORD *)&v66 >> 52) + 1)) - 1) & v70) + (1 << ((*(_QWORD *)&v66 >> 52) + 1));
              if (v66 >= 0.0)
                LOWORD(v67) = v71;
              else
                v67 = -v71;
              if (v69 > 0x53)
                LOWORD(v67) = 0;
            }
            *v65++ = v67;
            ++v64;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v40 = (double *)(v17 + 8 * a5);
        v41 = (_WORD *)(v18 + 2 * a3);
        do
        {
          v42 = *v40;
          v43 = (int)*v40;
          if (*v40 != (double)v43)
          {
            v44 = (*(_QWORD *)&v42 >> 52) & 0x7FFLL;
            v45 = v44 - 1023;
            v46 = *(_QWORD *)&v42 >> (51 - (*(_QWORD *)&v42 >> 52));
            if (v44 > 0x433)
              LODWORD(v46) = *(_QWORD *)&v42 << ((*(_QWORD *)&v42 >> 52) - 51);
            if (v44 >= 0x41F)
              v47 = v46;
            else
              v47 = (((1 << ((*(_QWORD *)&v42 >> 52) + 1)) - 1) & v46) + (1 << ((*(_QWORD *)&v42 >> 52) + 1));
            if (v42 >= 0.0)
              LOWORD(v43) = v47;
            else
              v43 = -v47;
            if (v45 > 0x53)
              LOWORD(v43) = 0;
          }
          *v41++ = v43;
          ++v40;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198502E14);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198502F40);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::toNativeFromValue<JSC::Uint16Adaptor>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  int v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  JSC::JSObject *v20;

  v20 = (JSC::JSObject *)a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
    return (unsigned __int16)a2;
  if ((unint64_t)a2 >> 49)
  {
    v9 = a2 - 0x2000000000000;
    if ((double)(int)COERCE_DOUBLE(a2 - 0x2000000000000) == COERCE_DOUBLE(a2 - 0x2000000000000))
    {
      LODWORD(a2) = (int)COERCE_DOUBLE(a2 - 0x2000000000000);
      return (unsigned __int16)a2;
    }
    v10 = (v9 >> 52) & 0x7FF;
    v11 = (v9 >> 52) + 1;
    if ((v10 - 1023) <= 0x53)
    {
      v12 = v9 >> (51 - (v9 >> 52));
      if (v10 > 0x433)
        LODWORD(v12) = a2 << (v10 - 51);
      v13 = (((1 << v11) - 1) & v12) + (1 << v11);
      if (v10 >= 0x41F)
        v14 = v12;
      else
        v14 = v13;
      if (a2 >= 0x2000000000000)
        LOWORD(a2) = v14;
      else
        LODWORD(a2) = -v14;
      return (unsigned __int16)a2;
    }
LABEL_15:
    LOWORD(a2) = 0;
    return (unsigned __int16)a2;
  }
  JSC::JSValue::toNumberSlowCase(&v20, a1, a3, a4, a5, a6, a7, a8, a9);
  LODWORD(a2) = (int)v15;
  if (v15 == (double)(int)v15)
    return (unsigned __int16)a2;
  v16 = (*(_QWORD *)&v15 >> 52) & 0x7FFLL;
  if ((v16 - 1023) > 0x53)
    goto LABEL_15;
  v17 = *(_QWORD *)&v15 >> (51 - (*(_QWORD *)&v15 >> 52));
  if (v16 > 0x433)
    LODWORD(v17) = *(_QWORD *)&v15 << ((*(_QWORD *)&v15 >> 52) - 51);
  if (v16 >= 0x41F)
    v18 = v17;
  else
    v18 = (((1 << ((*(_QWORD *)&v15 >> 52) + 1)) - 1) & v17) + (1 << ((*(_QWORD *)&v15 >> 52) + 1));
  if (v15 >= 0.0)
    LOWORD(a2) = v18;
  else
    LODWORD(a2) = -v18;
  return (unsigned __int16)a2;
}

JSC::JSCell *JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createWithFastVector(JSC::Heap **a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v9;
  JSC::JSCell *v10;
  _QWORD v12[4];
  char v13;
  uint64_t v14;

  v12[0] = a2;
  v12[1] = a4;
  v12[2] = a3;
  v12[3] = 0;
  v13 = 16;
  v14 = 0;
  if (a3 >= 0x3E9 || !a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198503100);
  }
  v9 = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = JSC::JSArrayBufferView::JSArrayBufferView(v9, (uint64_t)a1, (uint64_t)v12);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v10, (JSC::VM *)a1);
  return v9;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  uint64_t v18;
  unint64_t SlowCase;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *((_QWORD *)a1 + 7);
  v34 = v9;
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v29, (JSC *)v9, a2, a3, 4, 0, a7, a8);
  if (!v29)
  {
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v34);
    return 0;
  }
  v17 = *(JSC::Heap **)(v9 + 40528);
  if (!v17)
    v17 = JSC::GCClient::Heap::int32ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
  v18 = v9 + 192;
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase >= *((_QWORD *)v17 + 4))
  {
    SlowCase = *((_QWORD *)v17 + 5);
    if ((SlowCase & 1) != 0)
    {
      v25 = (uint64_t)v17;
      JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v25, v9 + 192, 48, 0, 0, v26, v27, v28);
      v18 = v9 + 192;
      goto LABEL_6;
    }
    v24 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v24);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v24;
  }
  *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v20 = *(_DWORD *)(v29 + 8);
  *(_DWORD *)SlowCase = v29 >> 4;
  *(_DWORD *)(SlowCase + 4) = v20;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v31;
  *(_BYTE *)(SlowCase + 40) = v32;
  v21 = v33;
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v21;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v33;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
  }
  v22 = v30;
  if (v30 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v22 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v22;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
  return SlowCase;
}

unint64_t JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::Heap **a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v9;
  unint64_t SlowCase;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = a1[5066];
  if (!v9)
    v9 = JSC::GCClient::Heap::int32ArraySpaceSlow(a1 + 4694);
  SlowCase = *((_QWORD *)v9 + 3);
  if (SlowCase >= *((_QWORD *)v9 + 4))
  {
    SlowCase = *((_QWORD *)v9 + 5);
    if ((SlowCase & 1) != 0)
    {
      v13 = (uint64_t)v9;
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v13, (uint64_t)(a1 + 24), 48, 0, 0, v14, v15, v16);
      goto LABEL_5;
    }
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v9 + 6);
    *((_QWORD *)v9 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v9 + 5) = SlowCase + (int)v12;
  }
  *((_QWORD *)v9 + 3) = SlowCase + 48;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  return SlowCase;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createUninitialized(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  uint64_t v18;
  unint64_t SlowCase;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *((_QWORD *)a1 + 7);
  v34 = v9;
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v29, (JSC *)v9, a2, a3, 4, 1, a7, a8);
  if (!v29)
  {
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v34);
    return 0;
  }
  v17 = *(JSC::Heap **)(v9 + 40528);
  if (!v17)
    v17 = JSC::GCClient::Heap::int32ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
  v18 = v9 + 192;
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase >= *((_QWORD *)v17 + 4))
  {
    SlowCase = *((_QWORD *)v17 + 5);
    if ((SlowCase & 1) != 0)
    {
      v25 = (uint64_t)v17;
      JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v25, v9 + 192, 48, 0, 0, v26, v27, v28);
      v18 = v9 + 192;
      goto LABEL_6;
    }
    v24 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v24);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v24;
  }
  *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v20 = *(_DWORD *)(v29 + 8);
  *(_DWORD *)SlowCase = v29 >> 4;
  *(_DWORD *)(SlowCase + 4) = v20;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v31;
  *(_BYTE *)(SlowCase + 40) = v32;
  v21 = v33;
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v21;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v33;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
  }
  v22 = v30;
  if (v30 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v22 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v22;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
  return SlowCase;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromTypedArray(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD v9[5];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::JSGlobalObject *v13;

  v12 = a3;
  v13 = a2;
  v10 = a6;
  v11 = a5;
  v9[0] = &v10;
  v9[1] = a1;
  v9[2] = &v13;
  v9[3] = &v12;
  v9[4] = &v11;
  switch(*(_BYTE *)(a4 + 5))
  {
    case '\'':
      result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '(':
      result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ')':
      result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '*':
      result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '+':
      result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ',':
    case '-':
      result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()((uint64_t)v9, a4, a3, a4, a5, a6, a7, a8);
      break;
    case '.':
      result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '/':
      result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '0':
      result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '1':
      result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198503600);
  }
  return result;
}

unint64_t JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t Uninitialized;
  int8x16_t v18;
  unint64_t v19;
  int v20;
  _QWORD v22[3];
  char v23;
  uint64_t v24;
  char *v25;
  _OWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  JSC::JSGlobalObject *v29;

  v28 = *((_QWORD *)a1 + 7);
  v29 = a1;
  v23 = 0;
  v24 = 0x800000000;
  v25 = (char *)v26 + 8;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v22[0] = &v23;
  v22[1] = &v29;
  v22[2] = &v28;
  JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(a1, (uint64_t)this, a4, (uint64_t)v22, a5, a6, a7, a8);
  v16 = v28;
  if (*(_DWORD *)(v28 + 80))
  {
    v20 = *(_DWORD *)(v28 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v16 + 16))
    {
LABEL_10:
      Uninitialized = 0;
      goto LABEL_11;
    }
  }
  Uninitialized = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createUninitialized(v29, a2, v24, v11, v12, v13, v14, v15);
  if (Uninitialized && (_DWORD)v24)
  {
    v19 = 0;
    while (JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setIndex(Uninitialized, v29, v19, *(_QWORD *)&v25[8 * v19], v12, v13, v14, v15, v18))
    {
      if (++v19 >= v24)
        goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v24, v9, v10, v11, v12, v13, v14, v15);
  return Uninitialized;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromArrayLike(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v14;
  _BOOL8 result;
  uint64_t v16;
  uint64_t v17;
  const JSC::PropertyTable *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int8x16_t v47;

  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, a6, a5, a6, a7, a8);
  if (result)
  {
    if (a6 >= 0xFFFFFFFF)
      v23 = 0xFFFFFFFFLL;
    else
      v23 = a6;
    if (v23 >= a5)
      v24 = v23 - a5;
    else
      v24 = 0;
    if (a4)
    {
      v25 = *(unsigned __int8 *)(a4 + 5);
      v26 = (v25 & 0xFE) == 0x24 && v24 == a6;
      if (v26 && v25 == 36)
      {
        v27 = (*(_BYTE *)(a4 + 4) & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8) : 0;
        if (a6 + a5 <= v27
          && JSC::JSArray::isIteratorProtocolFastAndNonObservable((JSC::JSArray *)a4, v16, v17, v18, v19, v20, v21, v22))
        {
          v28 = *(_BYTE *)(a4 + 4) & 0xE;
          if (v28 == 4)
          {
            JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::copyFromInt32ShapeArray(a1, a3, a4, a5, a6);
            return 1;
          }
          if (v28 == 6)
          {
            JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::copyFromDoubleShapeArray(a1, a3, a4, a5, a6);
            return 1;
          }
        }
      }
    }
    if (v23 <= a5)
      goto LABEL_30;
    v29 = 0;
    do
    {
      v37 = JSC::JSObject::get((JSC::JSObject *)a4, a2, (a5 + v29));
      if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, v30, v31, v32, v33, v34, v35, v36)
        || !JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setIndex(a1, a2, a3 + v29, v37, v33, v34, v35, v36, v38))
      {
        return 0;
      }
      ++v29;
    }
    while (v29 < v24);
LABEL_30:
    while (v24 < a6)
    {
      v46 = JSC::JSObject::get((JSC::JSObject *)a4, (uint64_t ***)a2, (const WTF::StringImpl *)(a5 + v24), (uint64_t)v18, v19, v20, v21, v22);
      if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, v39, v40, v41, v42, v43, v44, v45)
        || !JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setIndex(a1, a2, a3 + v24, v46, v42, v43, v44, v45, v47))
      {
        return 0;
      }
      ++v24;
    }
    return 1;
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v20;
  char v21;
  _BYTE v22[16];

  v10 = *(uint64_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v22[0] = 0;
    v22[8] = 0;
    v20 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v22, a3, a4, a5, a6, a7, a8);
    if (v21)
      v12 = v20;
    else
      v12 = 0;
    v13 = *(uint64_t **)a1;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(uint64_t **)a1;
  }
  if (v12 >= *v10)
    v14 = *v10;
  else
    v14 = v12;
  *v13 = v14;
  v15 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(v11, **(JSC::JSGlobalObject ***)(a1 + 16), **(_QWORD **)(a1 + 24), v14, a5, a6, a7, a8);
  if (v15)
  {
    if (*(unsigned __int8 *)(a2 + 5) - 44 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x198503A30);
    }
    v16 = *(_QWORD *)(v11 + 16);
    if (v16 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v17 = (void *)(v16 + 4 * **(_QWORD **)(a1 + 24));
    v18 = *(_QWORD *)(a2 + 16);
    if (v18 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memmove(v17, (const void *)(v18 + 4 * **(_QWORD **)(a1 + 32)), 4 * **(_QWORD **)a1);
  }
  return v15;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _DWORD *v22;
  int v23;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  void *v34;
  char *v35;
  _DWORD *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  WTF *v46;
  char *v47;
  _DWORD *v48;
  int v49;
  char *v50;
  _DWORD *v51;
  int v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[128];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v38 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v41)
      v42 = v38;
    else
      v42 = 0;
    v43 = *(_BYTE *)(a4 + 40) & 7;
    if (v42 < v9)
      v9 = v42;
    v58 = v9;
    if (v43 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v44 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v39, v40, a5, a6, a7, a8);
      if (v45)
        v15 = v44;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198503D74);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x198503DBCLL);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198503DC4);
        }
        v33 = (WTF *)(16 * v9);
        v34 = (void *)WTF::fastMalloc(v33);
        bzero(v34, (size_t)v33);
        v53 = (WTF *)v34;
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>(v57, (uint64_t *)&v53);
        v32 = v53;
        v53 = 0;
        if (v32)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v46 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
          v54 = v9;
          v53 = v46;
        }
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v32 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (char *)(v18 + a5);
          v22 = (_DWORD *)(v20 + 4 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (char *)(v17 + a5);
          v48 = (_DWORD *)(v19 + 4 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (char *)(v18 + a5);
          v51 = (_DWORD *)(v20 + 4 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v35 = (char *)(v17 + a5);
        v36 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v37 = *v35++;
          *v36++ = v37;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  _DWORD *v22;
  int v23;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  void *v34;
  __int16 *v35;
  _DWORD *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  WTF *v46;
  __int16 *v47;
  _DWORD *v48;
  int v49;
  __int16 *v50;
  _DWORD *v51;
  int v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[128];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v38 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v41)
      v42 = v38;
    else
      v42 = 0;
    v43 = *(_BYTE *)(a4 + 40) & 7;
    if (v42 < v9)
      v9 = v42;
    v58 = v9;
    if (v43 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v44 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v39, v40, a5, a6, a7, a8);
      if (v45)
        v15 = v44;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198504058);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x1985040A0);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985040A8);
        }
        v33 = (WTF *)(16 * v9);
        v34 = (void *)WTF::fastMalloc(v33);
        bzero(v34, (size_t)v33);
        v53 = (WTF *)v34;
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>(v57, (uint64_t *)&v53);
        v32 = v53;
        v53 = 0;
        if (v32)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v46 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
          v54 = v9;
          v53 = v46;
        }
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v32 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (__int16 *)(v18 + 2 * a5);
          v22 = (_DWORD *)(v20 + 4 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (__int16 *)(v17 + 2 * a5);
          v48 = (_DWORD *)(v19 + 4 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (__int16 *)(v18 + 2 * a5);
          v51 = (_DWORD *)(v20 + 4 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v35 = (__int16 *)(v17 + 2 * a5);
        v36 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v37 = *v35++;
          *v36++ = v37;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _DWORD *v26;
  int v27;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v37;
  void *v38;
  unsigned __int8 *v39;
  _DWORD *v40;
  int v41;
  unint64_t v42;
  char v43;
  WTF *v44;
  unsigned __int8 *v45;
  _DWORD *v46;
  int v47;
  unsigned __int8 *v48;
  _DWORD *v49;
  int v50;
  WTF *v51;
  int v52;
  int v53;
  _BYTE v54[128];
  uint64_t *v55[5];
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v8 = a7;
  v9 = a6;
  v58 = a4;
  v59 = a3;
  v57 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v51) = 0;
    LOBYTE(v52) = 0;
    v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v51, a3, a4, a5, a6, a7, a8);
    if (v43)
      v15 = v42;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
  }
  if (v15 < v9)
    v9 = v15;
  v56 = v9;
  if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v9, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    JUMPOUT(0x198504308);
  }
  v20 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, v16, v17, v18, v19);
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v55[0] = (uint64_t *)&v56;
      v55[1] = &v58;
      v55[2] = &v57;
      v55[3] = (uint64_t *)a1;
      v55[4] = &v59;
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x198504350);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198504358);
        }
        v37 = (WTF *)(16 * v9);
        v38 = (void *)WTF::fastMalloc(v37);
        bzero(v38, (size_t)v37);
        v51 = (WTF *)v38;
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>(v55, (uint64_t *)&v51);
        v36 = v51;
        v51 = 0;
        if (v36)
          goto LABEL_26;
      }
      else
      {
        v51 = (WTF *)v54;
        v52 = 32;
        v53 = v9;
        if (v9 >= 0x21)
        {
          v44 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
          v52 = v9;
          v51 = v44;
        }
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v55, (uint64_t *)&v51);
        v36 = v51;
        if (v54 != (_BYTE *)v51 && v51)
        {
          v51 = 0;
          v52 = 0;
LABEL_26:
          WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
        }
      }
    }
    else if (v9)
    {
      v21 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v22 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v23 = *(_QWORD *)(a1 + 16);
        v24 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v25 = (unsigned __int8 *)(v22 + a5);
          v26 = (_DWORD *)(v24 + 4 * a3);
          do
          {
            v27 = *v25++;
            *v26++ = v27;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v45 = (unsigned __int8 *)(v21 + a5);
          v46 = (_DWORD *)(v23 + 4 * a3);
          do
          {
            v47 = *v45++;
            *v46++ = v47;
            --v9;
          }
          while (v9);
        }
        else
        {
          v48 = (unsigned __int8 *)(v22 + a5);
          v49 = (_DWORD *)(v24 + 4 * a3);
          do
          {
            v50 = *v48++;
            *v49++ = v50;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v39 = (unsigned __int8 *)(v21 + a5);
        v40 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v41 = *v39++;
          *v40++ = v41;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  _DWORD *v22;
  int v23;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  void *v34;
  unsigned __int8 *v35;
  _DWORD *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  WTF *v46;
  unsigned __int8 *v47;
  _DWORD *v48;
  int v49;
  unsigned __int8 *v50;
  _DWORD *v51;
  int v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[128];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v38 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v41)
      v42 = v38;
    else
      v42 = 0;
    v43 = *(_BYTE *)(a4 + 40) & 7;
    if (v42 < v9)
      v9 = v42;
    v58 = v9;
    if (v43 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v44 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v39, v40, a5, a6, a7, a8);
      if (v45)
        v15 = v44;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1985045E4);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x19850462CLL);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198504634);
        }
        v33 = (WTF *)(16 * v9);
        v34 = (void *)WTF::fastMalloc(v33);
        bzero(v34, (size_t)v33);
        v53 = (WTF *)v34;
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>(v57, (uint64_t *)&v53);
        v32 = v53;
        v53 = 0;
        if (v32)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v46 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
          v54 = v9;
          v53 = v46;
        }
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v32 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (unsigned __int8 *)(v18 + a5);
          v22 = (_DWORD *)(v20 + 4 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (unsigned __int8 *)(v17 + a5);
          v48 = (_DWORD *)(v19 + 4 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (unsigned __int8 *)(v18 + a5);
          v51 = (_DWORD *)(v20 + 4 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v35 = (unsigned __int8 *)(v17 + a5);
        v36 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v37 = *v35++;
          *v36++ = v37;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  _DWORD *v22;
  int v23;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  WTF *v33;
  void *v34;
  unsigned __int16 *v35;
  _DWORD *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  char v45;
  WTF *v46;
  unsigned __int16 *v47;
  _DWORD *v48;
  int v49;
  unsigned __int16 *v50;
  _DWORD *v51;
  int v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[128];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v38 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v41)
      v42 = v38;
    else
      v42 = 0;
    v43 = *(_BYTE *)(a4 + 40) & 7;
    if (v42 < v9)
      v9 = v42;
    v58 = v9;
    if (v43 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v53) = 0;
      LOBYTE(v54) = 0;
      v44 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, v39, v40, a5, a6, a7, a8);
      if (v45)
        v15 = v44;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v58 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1985048C8);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x198504910);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198504918);
        }
        v33 = (WTF *)(16 * v9);
        v34 = (void *)WTF::fastMalloc(v33);
        bzero(v34, (size_t)v33);
        v53 = (WTF *)v34;
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>(v57, (uint64_t *)&v53);
        v32 = v53;
        v53 = 0;
        if (v32)
          goto LABEL_27;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v46 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
          v54 = v9;
          v53 = v46;
        }
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53);
        v32 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v32, v25, v26, v27, v28, v29, v30, v31);
        }
      }
    }
    else if (v9)
    {
      v17 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v19 = *(_QWORD *)(a1 + 16);
        v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v21 = (unsigned __int16 *)(v18 + 2 * a5);
          v22 = (_DWORD *)(v20 + 4 * a3);
          do
          {
            v23 = *v21++;
            *v22++ = v23;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (unsigned __int16 *)(v17 + 2 * a5);
          v48 = (_DWORD *)(v19 + 4 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (unsigned __int16 *)(v18 + 2 * a5);
          v51 = (_DWORD *)(v20 + 4 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v35 = (unsigned __int16 *)(v17 + 2 * a5);
        v36 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v37 = *v35++;
          *v36++ = v37;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  _BOOL4 v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  float *v23;
  _DWORD *v24;
  float v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[8];
  char v49;

  v8 = a7;
  v9 = a6;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v48[0] = 0;
    v49 = 0;
    v37 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v48, a3, a4, a5, a6, a7, a8);
    if (v40)
      v41 = v37;
    else
      v41 = 0;
    if (v41 < v9)
      v9 = v41;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v48[0] = 0;
      v49 = 0;
      v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v48, v38, v39, a5, a6, a7, a8);
      if (v43)
        v15 = v42;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198504BE0);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) == 0
      || (*(_BYTE *)(a4 + 40) & 8) == 0
      || *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) != *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      goto LABEL_10;
    }
    v27 = *(_QWORD *)(a1 + 16);
    if (v27)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v28 = *(_QWORD *)(a1 + 16), !disablePrimitiveGigacageRequested))
          v28 = (v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 16);
      }
    }
    else
    {
      v28 = 0;
    }
    v29 = *(_QWORD *)(a4 + 16);
    if (v29)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v30 = *(_QWORD *)(a4 + 16), !disablePrimitiveGigacageRequested))
          v30 = (v29 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v30 = *(_QWORD *)(a4 + 16);
      }
    }
    else
    {
      v30 = 0;
    }
    if (v8 && v28 + 4 * a3 > (unint64_t)(v30 + 4 * a5))
    {
      if (v9)
      {
        if (qword_1ECF4C038)
        {
          v31 = (v29 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v32 = (v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            v33 = v31 + 4 * a5 - 4;
            v34 = v32 + 4 * a3 - 4;
            do
            {
              *(_DWORD *)(v34 + 4 * v9) = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(*(float *)(v33 + 4 * v9));
              --v9;
            }
            while (v9);
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v44 = v29 + 4 * a5 - 4;
            v45 = v27 + 4 * a3 - 4;
            do
            {
              *(_DWORD *)(v45 + 4 * v9) = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(*(float *)(v44 + 4 * v9));
              --v9;
            }
            while (v9);
          }
          else
          {
            v46 = v31 + 4 * a5 - 4;
            v47 = v32 + 4 * a3 - 4;
            do
            {
              *(_DWORD *)(v47 + 4 * v9) = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(*(float *)(v46 + 4 * v9));
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          v35 = v29 + 4 * a5 - 4;
          v36 = v27 + 4 * a3 - 4;
          do
          {
            *(_DWORD *)(v36 + 4 * v9) = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(*(float *)(v35 + 4 * v9));
            --v9;
          }
          while (v9);
        }
      }
    }
    else
    {
LABEL_10:
      if (v9)
      {
        v17 = qword_1ECF4C038 != 0;
        v18 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
          v19 = 1;
        else
          v19 = disablePrimitiveGigacageRequested == 0;
        v20 = v19;
        v21 = (v17 & v20) == 0;
        if ((v17 & v20) != 0)
          v22 = (*(_QWORD *)(a4 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        else
          v22 = *(_QWORD *)(a4 + 16);
        if (v21)
          v18 = *(_QWORD *)(a1 + 16);
        v23 = (float *)(v22 + 4 * a5);
        v24 = (_DWORD *)(v18 + 4 * a3);
        do
        {
          v25 = *v23++;
          *v24++ = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(v25);
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  _BOOL4 v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  double *v30;
  _DWORD *v31;
  double v32;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  _BYTE *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  _BYTE *v74;
  int v75;
  unsigned int v76;
  _BYTE v77[136];

  v8 = a7;
  v9 = a6;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v74) = 0;
    LOBYTE(v75) = 0;
    v61 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v74, a3, a4, a5, a6, a7, a8);
    if (v64)
      v65 = v61;
    else
      v65 = 0;
    if (v65 < v9)
      v9 = v65;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v74) = 0;
      LOBYTE(v75) = 0;
      v66 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v74, v62, v63, a5, a6, a7, a8);
      if (v67)
        v15 = v66;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198505088);
  }
  v23 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v23)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x1985050D4);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985050DCLL);
        }
        v48 = (void *)WTF::fastMalloc((WTF *)(16 * v9));
        bzero(v48, 16 * v9);
        v49 = *(_QWORD *)(a4 + 16);
        v50 = qword_1ECF4C038;
        v51 = byte_1ECF4C022;
        v73 = disablePrimitiveGigacageRequested;
        if (qword_1ECF4C038)
        {
          if (disablePrimitiveGigacageRequested)
            v52 = byte_1ECF4C022 == 0;
          else
            v52 = 0;
          if (!v52)
            v49 = (v49 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v53 = v49 + 8 * a5 - 8;
          v54 = v9;
          do
          {
            *((_DWORD *)v48 + v54 - 1) = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(*(double *)(v53 + 8 * v54));
            --v54;
          }
          while (v54);
        }
        else
        {
          v58 = v49 + 8 * a5 - 8;
          v59 = v9;
          do
          {
            *((_DWORD *)v48 + v59 - 1) = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(*(double *)(v58 + 8 * v59));
            --v59;
          }
          while (v59);
        }
        v55 = *(_QWORD *)(a1 + 16);
        if (v50)
        {
          v56 = (v55 & 0x3FFFFFFFFLL) + v50;
          v47 = (unint64_t)v48;
          if (v51)
          {
            v57 = v56 + 4 * a3 - 4;
            do
            {
              *(_DWORD *)(v57 + 4 * v9) = *((_DWORD *)v48 + v9 - 1);
              --v9;
            }
            while (v9);
          }
          else if (v73)
          {
            v68 = v55 + 4 * a3 - 4;
            do
            {
              *(_DWORD *)(v68 + 4 * v9) = *((_DWORD *)v48 + v9 - 1);
              --v9;
            }
            while (v9);
          }
          else
          {
            v71 = v56 + 4 * a3 - 4;
            do
            {
              *(_DWORD *)(v71 + 4 * v9) = *((_DWORD *)v48 + v9 - 1);
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          v47 = (unint64_t)v48;
          v60 = v55 + 4 * a3 - 4;
          do
          {
            *(_DWORD *)(v60 + 4 * v9) = *((_DWORD *)v48 + v9 - 1);
            --v9;
          }
          while (v9);
        }
        goto LABEL_67;
      }
      v74 = v77;
      v75 = 32;
      v76 = v9;
      if (v9 >= 0x21)
      {
        v34 = (_BYTE *)WTF::fastMalloc((WTF *)(4 * v9));
        v75 = v9;
        v74 = v34;
LABEL_30:
        v35 = *(_QWORD *)(a4 + 16);
        v36 = qword_1ECF4C038;
        v72 = disablePrimitiveGigacageRequested;
        if (disablePrimitiveGigacageRequested)
          v37 = byte_1ECF4C022 == 0;
        else
          v37 = 0;
        if (!v37 && qword_1ECF4C038 != 0)
          v35 = (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v39 = v34 - 4;
        v40 = v35 + 8 * a5 - 8;
        v41 = v9;
        do
        {
          v42 = v41 - 1;
          if (v41 - 1 >= v76)
          {
            __break(0xC471u);
            JUMPOUT(0x1985050CCLL);
          }
          *(_DWORD *)&v39[4 * v41] = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(*(double *)(v40 + 8 * v41));
          --v41;
        }
        while (v42);
        v43 = v74;
        if (v72)
        {
          v44 = v9 - 1;
          while (v44 < v76)
          {
            if (byte_1ECF4C022)
              v45 = v36 == 0;
            else
              v45 = 1;
            v46 = *(_QWORD *)(a1 + 16);
            if (!v45)
              v46 = (v46 & 0x3FFFFFFFFLL) + v36;
            *(_DWORD *)(v46 + 4 * a3 + 4 * v44) = *(_DWORD *)&v43[4 * v44];
            if (--v44 == -1)
              goto LABEL_50;
          }
        }
        else
        {
          v69 = v9 - 1;
          while (v69 < v76)
          {
            v70 = *(_QWORD *)(a1 + 16);
            if (v36)
              v70 = (v70 & 0x3FFFFFFFFLL) + v36;
            *(_DWORD *)(v70 + 4 * a3 + 4 * v69) = *(_DWORD *)&v43[4 * v69];
            if (--v69 == -1)
              goto LABEL_50;
          }
        }
        __break(0xC471u);
        JUMPOUT(0x19850512CLL);
      }
      v34 = v77;
      if (v9)
        goto LABEL_30;
LABEL_50:
      v47 = (unint64_t)v74;
      if (v77 != v74 && v74)
      {
        v74 = 0;
        v75 = 0;
LABEL_67:
        WTF::fastFree(v47, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    else if (v9)
    {
      v24 = qword_1ECF4C038 != 0;
      v25 = (*(_QWORD *)(a1 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
        v26 = 1;
      else
        v26 = disablePrimitiveGigacageRequested == 0;
      v27 = v26;
      v28 = (v24 & v27) == 0;
      if ((v24 & v27) != 0)
        v29 = (*(_QWORD *)(a4 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      else
        v29 = *(_QWORD *)(a4 + 16);
      if (v28)
        v25 = *(_QWORD *)(a1 + 16);
      v30 = (double *)(v29 + 8 * a5);
      v31 = (_DWORD *)(v25 + 4 * a3);
      do
      {
        v32 = *v30++;
        *v31++ = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(v32);
        --v9;
      }
      while (v9);
    }
  }
  return v23;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198505278);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError((unint64_t)a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1985053A4);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError((unint64_t)a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL8 v14;
  unint64_t v16;
  char v17;
  uint64_t v18;
  const WTF::String *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  char v43;

  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v42, a3, a4, a5, a6, a7, a8);
    if (v17)
      v12 = v16;
    else
      v12 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 24);
  }
  v13 = !__CFADD__(a3, a4);
  v14 = a3 + a4 <= v12 && v13;
  if (!v14)
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v18 = 0x3700000002;
    *(_QWORD *)(v18 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v18 + 16) = 4;
    v42 = (WTF::StringImpl *)v18;
    v20 = JSC::createRangeError((unint64_t)a2, &v42, v19);
    JSC::VM::throwException(v11, a2, v20, v21, v22, v23, v24, v25);
    v33 = v42;
    v42 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
      {
        WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
      else
      {
        *(_DWORD *)v33 -= 2;
      }
    }
  }
  return v14;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + v4;
        v11 = v2 - 1;
        while (v11 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)(v8 + 4 * v11) = *(char *)(v10 + v11);
          if (--v11 == -1)
            goto LABEL_7;
        }
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v19 = v5 + v4;
        v20 = v2 - 1;
        while (v20 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)(v8 + 4 * v20) = *(char *)(v19 + v20);
          if (--v20 == -1)
            goto LABEL_7;
        }
      }
      else
      {
        v24 = v9 + v4;
        v25 = v2 - 1;
        while (v25 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)(v8 + 4 * v25) = *(char *)(v24 + v25);
          if (--v25 == -1)
            goto LABEL_7;
        }
      }
    }
    else
    {
      v17 = v5 + v4;
      v18 = v2 - 1;
      do
      {
        if (v18 >= *((unsigned int *)a2 + 3))
          goto LABEL_42;
        *(_DWORD *)(v8 + 4 * v18) = *(char *)(v17 + v18);
        --v18;
      }
      while (v18 != -1);
LABEL_7:
      v12 = *result[4];
      v13 = *a2;
      if (v7)
      {
        if (v6)
        {
          v14 = v2 - 1;
          while (v14 < *((unsigned int *)a2 + 3))
          {
            v15 = v3[2];
            if (byte_1ECF4C022)
              v15 = (v15 & 0x3FFFFFFFFLL) + v6;
            *(_DWORD *)(v15 + 4 * v12 + 4 * v14) = *(_DWORD *)(v13 + 4 * v14);
            if (--v14 == -1)
              return result;
          }
        }
        else
        {
          v16 = v2 - 1;
          while (v16 < *((unsigned int *)a2 + 3))
          {
            *(_DWORD *)(v3[2] + 4 * v12 + 4 * v16) = *(_DWORD *)(v13 + 4 * v16);
            if (--v16 == -1)
              return result;
          }
        }
      }
      else if (v6)
      {
        v21 = v2 - 1;
        v22 = v6 + 4 * v12;
        while (v21 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)((v3[2] & 0x3FFFFFFFFLL) + v22 + 4 * v21) = *(_DWORD *)(v13 + 4 * v21);
          if (--v21 == -1)
            return result;
        }
      }
      else
      {
        v23 = v2 - 1;
        while (v23 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)(v3[2] + 4 * v12 + 4 * v23) = *(_DWORD *)(v13 + 4 * v23);
          if (--v23 == -1)
            return result;
        }
      }
    }
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x198505688);
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v4 + v9 - 1;
        v11 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v11) = *(char *)(v10 + v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v20 = v4 + v5 - 1;
        v21 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v21) = *(char *)(v20 + v21);
          --v21;
        }
        while (v21);
      }
      else
      {
        v24 = v4 + v9 - 1;
        v25 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v25) = *(char *)(v24 + v25);
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      v16 = v4 + v5 - 1;
      v17 = **result;
      do
      {
        *(_DWORD *)(v8 - 4 + 4 * v17) = *(char *)(v16 + v17);
        --v17;
      }
      while (v17);
    }
    v12 = *result[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 4;
        do
        {
          *(_DWORD *)(v14 + 4 * v12 - 4 + 4 * v2) = *(_DWORD *)(v15 + 4 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v22 = v8 - 4;
        if (v7)
        {
          v23 = v13 + 4 * v12 - 4;
          do
          {
            *(_DWORD *)(v23 + 4 * v2) = *(_DWORD *)(v22 + 4 * v2);
            --v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            *(_DWORD *)(v14 + 4 * v12 - 4 + 4 * v2) = *(_DWORD *)(v22 + 4 * v2);
            --v2;
          }
          while (v2);
        }
      }
    }
    else
    {
      v18 = v8 - 4;
      v19 = v13 + 4 * v12 - 4;
      do
      {
        *(_DWORD *)(v19 + 4 * v2) = *(_DWORD *)(v18 + 4 * v2);
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + 2 * v4 - 2;
        v11 = v8 - 4;
        v12 = **result;
        while (1)
        {
          v13 = v12 - 1;
          if (v12 - 1 >= (unint64_t)*((unsigned int *)a2 + 3))
            break;
          *(_DWORD *)(v11 + 4 * v12) = *(__int16 *)(v10 + 2 * v12);
          --v12;
          if (!v13)
            goto LABEL_7;
        }
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v23 = v5 + 2 * v4 - 2;
        v24 = v8 - 4;
        v25 = **result;
        while (1)
        {
          v26 = v25 - 1;
          if (v25 - 1 >= (unint64_t)*((unsigned int *)a2 + 3))
            break;
          *(_DWORD *)(v24 + 4 * v25) = *(__int16 *)(v23 + 2 * v25);
          --v25;
          if (!v26)
            goto LABEL_7;
        }
      }
      else
      {
        v30 = v9 + 2 * v4 - 2;
        v31 = v8 - 4;
        v32 = **result;
        while (1)
        {
          v33 = v32 - 1;
          if (v32 - 1 >= (unint64_t)*((unsigned int *)a2 + 3))
            break;
          *(_DWORD *)(v31 + 4 * v32) = *(__int16 *)(v30 + 2 * v32);
          --v32;
          if (!v33)
            goto LABEL_7;
        }
      }
    }
    else
    {
      v19 = v5 + 2 * v4 - 2;
      v20 = v8 - 4;
      v21 = **result;
      do
      {
        v22 = v21 - 1;
        if (v21 - 1 >= (unint64_t)*((unsigned int *)a2 + 3))
          goto LABEL_42;
        *(_DWORD *)(v20 + 4 * v21) = *(__int16 *)(v19 + 2 * v21);
        --v21;
      }
      while (v22);
LABEL_7:
      v14 = *result[4];
      v15 = *a2;
      if (v7)
      {
        if (v6)
        {
          v16 = v2 - 1;
          while (v16 < *((unsigned int *)a2 + 3))
          {
            v17 = v3[2];
            if (byte_1ECF4C022)
              v17 = (v17 & 0x3FFFFFFFFLL) + v6;
            *(_DWORD *)(v17 + 4 * v14 + 4 * v16) = *(_DWORD *)(v15 + 4 * v16);
            if (--v16 == -1)
              return result;
          }
        }
        else
        {
          v18 = v2 - 1;
          while (v18 < *((unsigned int *)a2 + 3))
          {
            *(_DWORD *)(v3[2] + 4 * v14 + 4 * v18) = *(_DWORD *)(v15 + 4 * v18);
            if (--v18 == -1)
              return result;
          }
        }
      }
      else if (v6)
      {
        v27 = v2 - 1;
        v28 = v6 + 4 * v14;
        while (v27 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)((v3[2] & 0x3FFFFFFFFLL) + v28 + 4 * v27) = *(_DWORD *)(v15 + 4 * v27);
          if (--v27 == -1)
            return result;
        }
      }
      else
      {
        v29 = v2 - 1;
        while (v29 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)(v3[2] + 4 * v14 + 4 * v29) = *(_DWORD *)(v15 + 4 * v29);
          if (--v29 == -1)
            return result;
        }
      }
    }
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x198505A3CLL);
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + 2 * v4 - 2;
        v11 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v11) = *(__int16 *)(v10 + 2 * v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v20 = v5 + 2 * v4 - 2;
        v21 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v21) = *(__int16 *)(v20 + 2 * v21);
          --v21;
        }
        while (v21);
      }
      else
      {
        v24 = v9 + 2 * v4 - 2;
        v25 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v25) = *(__int16 *)(v24 + 2 * v25);
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      v16 = v5 + 2 * v4 - 2;
      v17 = **result;
      do
      {
        *(_DWORD *)(v8 - 4 + 4 * v17) = *(__int16 *)(v16 + 2 * v17);
        --v17;
      }
      while (v17);
    }
    v12 = *result[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 4;
        do
        {
          *(_DWORD *)(v14 + 4 * v12 - 4 + 4 * v2) = *(_DWORD *)(v15 + 4 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v22 = v8 - 4;
        if (v7)
        {
          v23 = v13 + 4 * v12 - 4;
          do
          {
            *(_DWORD *)(v23 + 4 * v2) = *(_DWORD *)(v22 + 4 * v2);
            --v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            *(_DWORD *)(v14 + 4 * v12 - 4 + 4 * v2) = *(_DWORD *)(v22 + 4 * v2);
            --v2;
          }
          while (v2);
        }
      }
    }
    else
    {
      v18 = v8 - 4;
      v19 = v13 + 4 * v12 - 4;
      do
      {
        *(_DWORD *)(v19 + 4 * v2) = *(_DWORD *)(v18 + 4 * v2);
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + v4;
        v11 = v2 - 1;
        while (v11 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)(v8 + 4 * v11) = *(unsigned __int8 *)(v10 + v11);
          if (--v11 == -1)
            goto LABEL_7;
        }
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v19 = v5 + v4;
        v20 = v2 - 1;
        while (v20 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)(v8 + 4 * v20) = *(unsigned __int8 *)(v19 + v20);
          if (--v20 == -1)
            goto LABEL_7;
        }
      }
      else
      {
        v24 = v9 + v4;
        v25 = v2 - 1;
        while (v25 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)(v8 + 4 * v25) = *(unsigned __int8 *)(v24 + v25);
          if (--v25 == -1)
            goto LABEL_7;
        }
      }
    }
    else
    {
      v17 = v5 + v4;
      v18 = v2 - 1;
      do
      {
        if (v18 >= *((unsigned int *)a2 + 3))
          goto LABEL_42;
        *(_DWORD *)(v8 + 4 * v18) = *(unsigned __int8 *)(v17 + v18);
        --v18;
      }
      while (v18 != -1);
LABEL_7:
      v12 = *result[4];
      v13 = *a2;
      if (v7)
      {
        if (v6)
        {
          v14 = v2 - 1;
          while (v14 < *((unsigned int *)a2 + 3))
          {
            v15 = v3[2];
            if (byte_1ECF4C022)
              v15 = (v15 & 0x3FFFFFFFFLL) + v6;
            *(_DWORD *)(v15 + 4 * v12 + 4 * v14) = *(_DWORD *)(v13 + 4 * v14);
            if (--v14 == -1)
              return result;
          }
        }
        else
        {
          v16 = v2 - 1;
          while (v16 < *((unsigned int *)a2 + 3))
          {
            *(_DWORD *)(v3[2] + 4 * v12 + 4 * v16) = *(_DWORD *)(v13 + 4 * v16);
            if (--v16 == -1)
              return result;
          }
        }
      }
      else if (v6)
      {
        v21 = v2 - 1;
        v22 = v6 + 4 * v12;
        while (v21 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)((v3[2] & 0x3FFFFFFFFLL) + v22 + 4 * v21) = *(_DWORD *)(v13 + 4 * v21);
          if (--v21 == -1)
            return result;
        }
      }
      else
      {
        v23 = v2 - 1;
        while (v23 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)(v3[2] + 4 * v12 + 4 * v23) = *(_DWORD *)(v13 + 4 * v23);
          if (--v23 == -1)
            return result;
        }
      }
    }
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x198505DE0);
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v4 + v9 - 1;
        v11 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v11) = *(unsigned __int8 *)(v10 + v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v20 = v4 + v5 - 1;
        v21 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v21) = *(unsigned __int8 *)(v20 + v21);
          --v21;
        }
        while (v21);
      }
      else
      {
        v24 = v4 + v9 - 1;
        v25 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v25) = *(unsigned __int8 *)(v24 + v25);
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      v16 = v4 + v5 - 1;
      v17 = **result;
      do
      {
        *(_DWORD *)(v8 - 4 + 4 * v17) = *(unsigned __int8 *)(v16 + v17);
        --v17;
      }
      while (v17);
    }
    v12 = *result[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 4;
        do
        {
          *(_DWORD *)(v14 + 4 * v12 - 4 + 4 * v2) = *(_DWORD *)(v15 + 4 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v22 = v8 - 4;
        if (v7)
        {
          v23 = v13 + 4 * v12 - 4;
          do
          {
            *(_DWORD *)(v23 + 4 * v2) = *(_DWORD *)(v22 + 4 * v2);
            --v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            *(_DWORD *)(v14 + 4 * v12 - 4 + 4 * v2) = *(_DWORD *)(v22 + 4 * v2);
            --v2;
          }
          while (v2);
        }
      }
    }
    else
    {
      v18 = v8 - 4;
      v19 = v13 + 4 * v12 - 4;
      do
      {
        *(_DWORD *)(v19 + 4 * v2) = *(_DWORD *)(v18 + 4 * v2);
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + 2 * v4 - 2;
        v11 = v8 - 4;
        v12 = **result;
        while (1)
        {
          v13 = v12 - 1;
          if (v12 - 1 >= (unint64_t)*((unsigned int *)a2 + 3))
            break;
          *(_DWORD *)(v11 + 4 * v12) = *(unsigned __int16 *)(v10 + 2 * v12);
          --v12;
          if (!v13)
            goto LABEL_7;
        }
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v23 = v5 + 2 * v4 - 2;
        v24 = v8 - 4;
        v25 = **result;
        while (1)
        {
          v26 = v25 - 1;
          if (v25 - 1 >= (unint64_t)*((unsigned int *)a2 + 3))
            break;
          *(_DWORD *)(v24 + 4 * v25) = *(unsigned __int16 *)(v23 + 2 * v25);
          --v25;
          if (!v26)
            goto LABEL_7;
        }
      }
      else
      {
        v30 = v9 + 2 * v4 - 2;
        v31 = v8 - 4;
        v32 = **result;
        while (1)
        {
          v33 = v32 - 1;
          if (v32 - 1 >= (unint64_t)*((unsigned int *)a2 + 3))
            break;
          *(_DWORD *)(v31 + 4 * v32) = *(unsigned __int16 *)(v30 + 2 * v32);
          --v32;
          if (!v33)
            goto LABEL_7;
        }
      }
    }
    else
    {
      v19 = v5 + 2 * v4 - 2;
      v20 = v8 - 4;
      v21 = **result;
      do
      {
        v22 = v21 - 1;
        if (v21 - 1 >= (unint64_t)*((unsigned int *)a2 + 3))
          goto LABEL_42;
        *(_DWORD *)(v20 + 4 * v21) = *(unsigned __int16 *)(v19 + 2 * v21);
        --v21;
      }
      while (v22);
LABEL_7:
      v14 = *result[4];
      v15 = *a2;
      if (v7)
      {
        if (v6)
        {
          v16 = v2 - 1;
          while (v16 < *((unsigned int *)a2 + 3))
          {
            v17 = v3[2];
            if (byte_1ECF4C022)
              v17 = (v17 & 0x3FFFFFFFFLL) + v6;
            *(_DWORD *)(v17 + 4 * v14 + 4 * v16) = *(_DWORD *)(v15 + 4 * v16);
            if (--v16 == -1)
              return result;
          }
        }
        else
        {
          v18 = v2 - 1;
          while (v18 < *((unsigned int *)a2 + 3))
          {
            *(_DWORD *)(v3[2] + 4 * v14 + 4 * v18) = *(_DWORD *)(v15 + 4 * v18);
            if (--v18 == -1)
              return result;
          }
        }
      }
      else if (v6)
      {
        v27 = v2 - 1;
        v28 = v6 + 4 * v14;
        while (v27 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)((v3[2] & 0x3FFFFFFFFLL) + v28 + 4 * v27) = *(_DWORD *)(v15 + 4 * v27);
          if (--v27 == -1)
            return result;
        }
      }
      else
      {
        v29 = v2 - 1;
        while (v29 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)(v3[2] + 4 * v14 + 4 * v29) = *(_DWORD *)(v15 + 4 * v29);
          if (--v29 == -1)
            return result;
        }
      }
    }
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x1985061A0);
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + 2 * v4 - 2;
        v11 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v11) = *(unsigned __int16 *)(v10 + 2 * v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v20 = v5 + 2 * v4 - 2;
        v21 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v21) = *(unsigned __int16 *)(v20 + 2 * v21);
          --v21;
        }
        while (v21);
      }
      else
      {
        v24 = v9 + 2 * v4 - 2;
        v25 = **result;
        do
        {
          *(_DWORD *)(v8 - 4 + 4 * v25) = *(unsigned __int16 *)(v24 + 2 * v25);
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      v16 = v5 + 2 * v4 - 2;
      v17 = **result;
      do
      {
        *(_DWORD *)(v8 - 4 + 4 * v17) = *(unsigned __int16 *)(v16 + 2 * v17);
        --v17;
      }
      while (v17);
    }
    v12 = *result[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 4;
        do
        {
          *(_DWORD *)(v14 + 4 * v12 - 4 + 4 * v2) = *(_DWORD *)(v15 + 4 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v22 = v8 - 4;
        if (v7)
        {
          v23 = v13 + 4 * v12 - 4;
          do
          {
            *(_DWORD *)(v23 + 4 * v2) = *(_DWORD *)(v22 + 4 * v2);
            --v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            *(_DWORD *)(v14 + 4 * v12 - 4 + 4 * v2) = *(_DWORD *)(v22 + 4 * v2);
            --v2;
          }
          while (v2);
        }
      }
    }
    else
    {
      v18 = v8 - 4;
      v19 = v13 + 4 * v12 - 4;
      do
      {
        *(_DWORD *)(v19 + 4 * v2) = *(_DWORD *)(v18 + 4 * v2);
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setIndex(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BOOL8 result;
  uint64_t v16;
  int v17;
  JSC::JSObject *v18;

  v9 = a4;
  v12 = *((_QWORD *)a2 + 7);
  v18 = (JSC::JSObject *)a4;
  if (a4 < 0xFFFE000000000000)
  {
    if (a4 >> 49)
      *(_QWORD *)&v13 = a4 - 0x2000000000000;
    else
      JSC::JSValue::toNumberSlowCase(&v18, a2, a3, a4, a5, a6, a7, a8, a9);
    v9 = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(v13);
  }
  if (*(_DWORD *)(v12 + 80))
  {
    v17 = *(_DWORD *)(v12 + 80);
    if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) == 0
    || (v14 = *(_QWORD *)(a1 + 16)) != 0
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::inBounds(a1, a3);
    if (!result)
      return result;
    v16 = *(_QWORD *)(a1 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_DWORD *)(v16 + 4 * a3) = v9;
  }
  return 1;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::copyFromInt32ShapeArray(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unsigned __int128 *v6;
  const float *v7;
  unsigned __int128 *v8;
  unsigned __int128 *v9;
  unsigned __int128 v10;
  uint64_t v11;

  v5 = *(_QWORD *)(result + 16);
  if (v5 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v6 = (unsigned __int128 *)(v5 + 4 * a2);
  v7 = (const float *)(*(_QWORD *)(a3 + 8) + 8 * a4);
  v8 = (unsigned __int128 *)((char *)v6 + 4 * a5);
  if (a5 >= 4)
  {
    v9 = (unsigned __int128 *)((char *)v6 + 4 * (a5 & 0x3FFFFFFFFFFFFFFCLL));
    do
    {
      v10 = (unsigned __int128)vld2q_f32(v7);
      v7 += 8;
      *v6++ = v10;
    }
    while (v6 != v9);
    v6 = v9;
  }
  while (v6 != v8)
  {
    v11 = *(_QWORD *)v7;
    v7 += 2;
    *(_DWORD *)v6 = v11;
    v6 = (unsigned __int128 *)((char *)v6 + 4);
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::copyFromDoubleShapeArray(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;

  if (a5)
  {
    v5 = a5;
    v7 = *(_QWORD *)(a3 + 8);
    v8 = *(_QWORD *)(result + 16);
    if (qword_1ECF4C038)
    {
      v9 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = (_DWORD *)(v9 + 4 * a2);
        do
        {
          result = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(*(double *)(v7 + 8 * a4));
          *v10++ = result;
          ++a4;
          --v5;
        }
        while (v5);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v12 = (_DWORD *)(v8 + 4 * a2);
        do
        {
          result = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(*(double *)(v7 + 8 * a4));
          *v12++ = result;
          ++a4;
          --v5;
        }
        while (v5);
      }
      else
      {
        v13 = (_DWORD *)(v9 + 4 * a2);
        do
        {
          result = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(*(double *)(v7 + 8 * a4));
          *v13++ = result;
          ++a4;
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      v11 = (_DWORD *)(v8 + 4 * a2);
      do
      {
        result = JSC::IntegralTypedArrayAdaptor<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>,(JSC::TypedArrayType)6>::toNativeFromDouble(*(double *)(v7 + 8 * a4));
        *v11++ = result;
        ++a4;
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createWithFastVector(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::Heap *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v15;
  JSC::VM *v16;
  JSC::Heap *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t SlowCase;
  JSC::VM *v23;
  unint64_t v24;
  unint64_t v25;

  if (a3 >= 0x3E9)
  {
    __break(0xC471u);
    JUMPOUT(0x198506740);
  }
  if (!a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198506760);
  }
  v8 = a4;
  v10 = *(JSC::Heap **)(a1 + 40888);
  if (!v10)
  {
    v24 = a3;
    v16 = (JSC::VM *)a2;
    v17 = JSC::GCClient::Heap::uint32ArraySpaceSlow((JSC::Heap **)(a1 + 37552));
    a2 = (unint64_t)v16;
    a3 = v24;
    v10 = v17;
  }
  v11 = a1 + 192;
  v12 = *((_QWORD *)v10 + 3);
  if (v12 < *((_QWORD *)v10 + 4))
    goto LABEL_6;
  v12 = *((_QWORD *)v10 + 5);
  if ((v12 & 1) == 0)
  {
    v15 = *(_QWORD *)(v12 + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = v12 + HIDWORD(v15);
    *((_QWORD *)v10 + 5) = v12 + (int)v15;
LABEL_6:
    *((_QWORD *)v10 + 3) = v12 + 48;
    goto LABEL_7;
  }
  v25 = a3;
  v23 = (JSC::VM *)a2;
  v18 = (uint64_t)v10;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v18, a1 + 192, 48, 0, 0, v19, v20, v21);
  a3 = v25;
  v12 = SlowCase;
  a2 = (unint64_t)v23;
  v11 = a1 + 192;
LABEL_7:
  *(_DWORD *)v12 = 0;
  v13 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v12 = a2 >> 4;
  *(_DWORD *)(v12 + 4) = v13;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = a3;
  *(_QWORD *)(v12 + 32) = 0;
  *(_BYTE *)(v12 + 40) = 16;
  if (*(_BYTE *)(a1 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(v12 + 8) = 0;
    if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v12 + 7))
      JSC::Heap::writeBarrierSlowPath(v11, v12);
    __dmb(0xAu);
  }
  else if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v12 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v11, v12);
  }
  if (v8 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v8 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(v12 + 16) = v8;
  JSC::JSArrayBufferView::finishCreation(v12, (JSC::VM *)a1);
  return v12;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  uint64_t v18;
  unint64_t SlowCase;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v9 = *((_QWORD *)a1 + 7);
  v34 = v9;
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v29, (JSC *)v9, a2, a3, 4, 0, a7, a8);
  if (!v29)
  {
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v34);
    return 0;
  }
  v17 = *(JSC::Heap **)(v9 + 40888);
  if (!v17)
    v17 = JSC::GCClient::Heap::uint32ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
  v18 = v9 + 192;
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase >= *((_QWORD *)v17 + 4))
  {
    SlowCase = *((_QWORD *)v17 + 5);
    if ((SlowCase & 1) != 0)
    {
      v25 = (uint64_t)v17;
      JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v25, v9 + 192, 48, 0, 0, v26, v27, v28);
      v18 = v9 + 192;
      goto LABEL_6;
    }
    v24 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v24);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v24;
  }
  *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v20 = *(_DWORD *)(v29 + 8);
  *(_DWORD *)SlowCase = v29 >> 4;
  *(_DWORD *)(SlowCase + 4) = v20;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v31;
  *(_BYTE *)(SlowCase + 40) = v32;
  v21 = v33;
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v21;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v33;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v18, SlowCase);
  }
  v22 = v30;
  if (v30 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v22 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v22;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
  return SlowCase;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createUninitialized(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  unint64_t SlowCase;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v24;
  JSC::ArrayBuffer *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *Allocator;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v9 = *((_QWORD *)a1 + 7);
  v39 = v9;
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)&v34, (JSC *)v9, a2, a3, 4, 1, a7, a8);
  if (!v34)
  {
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v39);
    return 0;
  }
  v17 = *(JSC::Heap **)(v9 + 40888);
  if (!v17)
    v17 = JSC::GCClient::Heap::uint32ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase < *((_QWORD *)v17 + 4))
    goto LABEL_5;
  SlowCase = *((_QWORD *)v17 + 5);
  if ((SlowCase & 1) == 0)
  {
    v29 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v29);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v29;
LABEL_5:
    *((_QWORD *)v17 + 3) = SlowCase + 48;
    goto LABEL_6;
  }
  v30 = (uint64_t)v17;
  JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v30, v9 + 192, 48, 0, 0, v31, v32, v33);
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v19 = *(_DWORD *)(v34 + 8);
  *(_DWORD *)SlowCase = v34 >> 4;
  *(_DWORD *)(SlowCase + 4) = v19;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_OWORD *)(SlowCase + 24) = v36;
  *(_BYTE *)(SlowCase + 40) = v37;
  v20 = v38;
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = v20;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v9 + 192, SlowCase);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(SlowCase + 8) = v38;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v9 + 192, SlowCase);
  }
  v21 = v35;
  if (v35 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v21 = (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(SlowCase + 16) = v21;
  if (*(_BYTE *)(v9 + 755))
    __dmb(0xAu);
  v22 = *(unsigned __int8 *)(SlowCase + 40);
  if (v22 != 16)
  {
    v24 = v22 - 88;
    if ((v22 - 88) <= 0x35)
    {
      if (((1 << v24) & 0x3D) != 0)
      {
        v25 = *(JSC::ArrayBuffer **)(*(_QWORD *)(SlowCase + 8) - 8);
LABEL_20:
        JSC::Heap::addReference((JSC::Heap *)(v9 + 192), (JSC::JSCell *)SlowCase, v25);
        return SlowCase;
      }
      if (((1 << v24) & 0x3D000000000000) != 0)
      {
        v25 = *(JSC::ArrayBuffer **)(SlowCase + 48);
        goto LABEL_20;
      }
    }
    if (v22 != 48)
    {
      __break(0xC471u);
      JUMPOUT(0x198506C8CLL);
    }
    if ((SlowCase & 8) != 0)
      v26 = (SlowCase - 112) | 1;
    else
      v26 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v26 & 1) != 0)
      v27 = (_QWORD *)(v26 + 47);
    else
      v27 = (_QWORD *)(*(_QWORD *)v26 + 32);
    Allocator = (_QWORD *)v27[2];
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator(v27, v26);
    v27[2] = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = v9 + 736;
    Allocator[2] = JSC::JSArrayBufferView::finalize;
  }
  return SlowCase;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromTypedArray(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD v9[5];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v12 = a3;
  v13 = a2;
  v10 = a6;
  v11 = a5;
  v9[0] = &v10;
  v9[1] = a1;
  v9[2] = &v13;
  v9[3] = &v12;
  v9[4] = &v11;
  switch(*(_BYTE *)(a4 + 5))
  {
    case '\'':
      result = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '(':
      result = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ')':
      result = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '*':
      result = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '+':
      result = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ',':
    case '-':
      result = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()((uint64_t)v9, a4, a3, a4, a5, a6, a7, a8);
      break;
    case '.':
      result = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '/':
      result = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '0':
      result = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '1':
      result = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198506D2CLL);
  }
  return result;
}

unint64_t JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t Uninitialized;
  int8x16_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _QWORD v27[3];
  char v28;
  uint64_t v29;
  char *v30;
  _OWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  JSC::JSGlobalObject *v34;

  v33 = *((_QWORD *)a1 + 7);
  v34 = a1;
  v28 = 0;
  v29 = 0x800000000;
  v30 = (char *)v31 + 8;
  memset(v31, 0, sizeof(v31));
  v32 = 0;
  v27[0] = &v28;
  v27[1] = &v34;
  v27[2] = &v33;
  JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(a1, (uint64_t)this, a4, (uint64_t)v27, a5, a6, a7, a8);
  v16 = v33;
  if (*(_DWORD *)(v33 + 80))
  {
    v25 = *(_DWORD *)(v33 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v33 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v16 + 16))
    {
LABEL_29:
      Uninitialized = 0;
      goto LABEL_30;
    }
  }
  Uninitialized = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createUninitialized(v34, a2, v29, v11, v12, v13, v14, v15);
  if (Uninitialized && (_DWORD)v29)
  {
    v19 = 0;
    do
    {
      v20 = *((_QWORD *)v34 + 7);
      v21 = JSC::toNativeFromValue<JSC::Uint32Adaptor>(v34, *(JSC::JSObject **)&v30[8 * v19], v10, v11, v12, v13, v14, v15, v18);
      if (*(_DWORD *)(v20 + 80))
      {
        v24 = *(_DWORD *)(v20 + 80);
        if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v20 + 64), 7u, v10, v11, v12, v13, v14, v15);
        if (*(_QWORD *)(v20 + 16))
          goto LABEL_29;
      }
      if ((*(_BYTE *)(Uninitialized + 40) & 8) == 0
        || (v22 = *(_QWORD *)(Uninitialized + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::inBounds(Uninitialized, v19))
          goto LABEL_29;
        v23 = *(_QWORD *)(Uninitialized + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v23 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_DWORD *)(v23 + 4 * v19) = v21;
      }
    }
    while (++v19 < v29);
  }
LABEL_30:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v29, v9, v10, v11, v12, v13, v14, v15);
  return Uninitialized;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromArrayLike(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC::JSObject *this, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int128 *v32;
  const float *v33;
  unsigned __int128 *v34;
  unsigned __int128 *v35;
  unsigned __int128 v36;
  _BOOL8 result;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  JSC::JSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x16_t v49;
  JSC::VM *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  JSC::JSObject *v67;
  int8x16_t v68;
  JSC::VM *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  JSC::JSObject *v76;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::VM *v78;
  uint64_t v79;
  int v80;
  BOOL v81;
  uint64_t v82;
  const WTF::String *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::StringImpl *v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  char v107;

  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v106) = 0;
    v107 = 0;
    v38 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v106, a3, (uint64_t)this, a5, a6, a7, a8);
    if (v39)
      v15 = v38;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 24);
  }
  if (__CFADD__(a3, a6) || a3 + a6 > v15)
  {
    v82 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v82 = 0x3700000002;
    *(_QWORD *)(v82 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v82 + 16) = 4;
    v106 = (WTF::StringImpl *)v82;
    v84 = JSC::createRangeError((unint64_t)a2, &v106, v83);
    JSC::VM::throwException(v14, a2, v84, v85, v86, v87, v88, v89);
    v97 = v106;
    v106 = 0;
    if (v97)
    {
      if (*(_DWORD *)v97 == 2)
      {
        WTF::StringImpl::~StringImpl(v97, v90, v91, v92, v93, v94, v95, v96);
        WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
      }
      else
      {
        *(_DWORD *)v97 -= 2;
      }
    }
    return 0;
  }
  if (a6 >= 0xFFFFFFFF)
    v16 = 0xFFFFFFFFLL;
  else
    v16 = a6;
  if (v16 >= a5)
    v17 = v16 - a5;
  else
    v17 = 0;
  if (!this)
    goto LABEL_57;
  v18 = *((unsigned __int8 *)this + 5);
  if ((v18 & 0xFE) != 0x24 || v17 != a6 || v18 != 36)
    goto LABEL_57;
  v19 = *((_BYTE *)this + 4);
  v20 = (v19 & 0xE) != 0 ? *(unsigned int *)(*((_QWORD *)this + 1) - 8) : 0;
  if (a6 + a5 > v20)
    goto LABEL_57;
  v21 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v22 = *(_QWORD *)(v21 + 2216);
  v23 = (v22 & 1) != 0 ? (v22 >> 1) & 3 : *(unsigned __int8 *)(v22 + 4);
  if (v23 == 2 || *(_BYTE *)(*(_QWORD *)(v21 + 2048) + 4) == 2)
    goto LABEL_57;
  v24 = *(_QWORD *)(v21 + 2304);
  v25 = (v24 & 1) != 0 ? (v24 >> 1) & 3 : *(unsigned __int8 *)(v24 + 4);
  if (v25 == 2)
    goto LABEL_57;
  v26 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
  v27 = (v26 >> 1) & 7;
  if ((v26 & 0x10) != 0)
    v27 = ((v26 & 0xE) + 10) >> 1;
  v28 = *(_DWORD *)(v21 + 4 * v27 + 852);
  if (v28)
    v29 = 16 * (v28 & 0xFFFFFFFE);
  else
    v29 = 0;
  if (v29 != 16 * (*(_DWORD *)this & 0xFFFFFFFE))
  {
    if ((v26 & 0x20) == 0)
    {
      v40 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
      if (!v40)
        v40 = *((_QWORD *)this + 2);
      if (v40 == *(_QWORD *)(v21 + 672)
        && JSC::JSObject::getDirectOffset(this, *(JSC::VM **)(v21 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 56) + 41952) + 2712), this, a5, a6, a7, a8) == -1)
      {
        v19 = *((_BYTE *)this + 4);
        goto LABEL_31;
      }
    }
LABEL_57:
    if (v16 <= a5)
    {
LABEL_74:
      if (v17 >= a6)
        return 1;
      while (1)
      {
        v67 = (JSC::JSObject *)JSC::JSObject::get(this, (uint64_t ***)a2, (const WTF::StringImpl *)(a5 + v17), (uint64_t)this, a5, a6, a7, a8);
        if (*((_DWORD *)v14 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v14, v60, v61, v62, v63, v64, v65, v66))
            break;
        }
        v69 = (JSC::VM *)*((_QWORD *)a2 + 7);
        v72 = JSC::toNativeFromValue<JSC::Uint32Adaptor>(a2, v67, v61, v62, v63, v64, v65, v66, v68);
        if (*((_DWORD *)v69 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v69, v70, v71, (uint64_t)this, a5, a6, a7, a8))
            break;
        }
        if ((*(_BYTE *)(a1 + 40) & 8) == 0
          || (v73 = *(_QWORD *)(a1 + 16)) != 0
          && (!qword_1ECF4C038
           || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
           || (v73 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::inBounds(a1, a3 + v17);
          if (!result)
            return result;
          v74 = *(_QWORD *)(a1 + 16);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v74 = (v74 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_DWORD *)(v74 + 4 * a3 + 4 * v17) = v72;
        }
        ++v17;
        result = 1;
        if (v17 >= a6)
          return result;
      }
    }
    else
    {
      v41 = 0;
      while (1)
      {
        v42 = (JSC::JSObject *)JSC::JSObject::get(this, a2, (a5 + v41));
        if (*((_DWORD *)v14 + 20))
        {
          v76 = v42;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v14, (uint64_t)v42, v43, v44, v45, v46, v47, v48);
          v42 = v76;
          if (hasExceptionsAfterHandlingTraps)
            break;
        }
        v50 = (JSC::VM *)*((_QWORD *)a2 + 7);
        v53 = JSC::toNativeFromValue<JSC::Uint32Adaptor>(a2, v42, v43, v44, v45, v46, v47, v48, v49);
        if (*((_DWORD *)v50 + 20))
        {
          v78 = v50;
          v79 = v41;
          v80 = v53;
          v81 = JSC::VM::hasExceptionsAfterHandlingTraps(v78, v51, v52, (uint64_t)this, a5, a6, a7, a8);
          v53 = v80;
          v41 = v79;
          if (v81)
            break;
        }
        if ((*(_BYTE *)(a1 + 40) & 8) == 0
          || (v54 = *(_QWORD *)(a1 + 16)) != 0
          && (!qword_1ECF4C038
           || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
           || (v54 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          v55 = v41;
          v56 = v53;
          v57 = v55;
          result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::inBounds(a1, a3 + v55);
          if (!result)
            return result;
          v58 = *(_QWORD *)(a1 + 16);
          v59 = v56;
          if (qword_1ECF4C038)
          {
            v41 = v57;
            if (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
              v58 = (v58 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          }
          else
          {
            v41 = v57;
          }
          *(_DWORD *)(v58 + 4 * a3 + 4 * v41) = v59;
        }
        if (++v41 >= v17)
          goto LABEL_74;
      }
    }
    return 0;
  }
LABEL_31:
  v30 = v19 & 0xE;
  if (v30 != 4)
  {
    if (v30 == 6)
    {
      JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::copyFromDoubleShapeArray(a1, a3, (uint64_t)this, a5, a6);
      return 1;
    }
    goto LABEL_57;
  }
  v31 = *(_QWORD *)(a1 + 16);
  if (v31 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v32 = (unsigned __int128 *)(v31 + 4 * a3);
  v33 = (const float *)(*((_QWORD *)this + 1) + 8 * a5);
  v34 = (unsigned __int128 *)((char *)v32 + 4 * a6);
  if (a6 >= 4)
  {
    v35 = (unsigned __int128 *)((char *)v32 + 4 * (a6 & 0xFFFFFFFC));
    do
    {
      v36 = (unsigned __int128)vld2q_f32(v33);
      v33 += 8;
      *v32++ = v36;
    }
    while (v32 != v35);
    v32 = v35;
  }
  if (v32 == v34)
    return 1;
  result = 1;
  do
  {
    v75 = *(_QWORD *)v33;
    v33 += 2;
    *(_DWORD *)v32 = v75;
    v32 = (unsigned __int128 *)((char *)v32 + 4);
  }
  while (v32 != v34);
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  JSC::VM *v17;
  unint64_t v18;
  _BOOL4 v19;
  _BOOL8 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  JSC::Heap **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  JSC::Exception *v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t *);
  uint64_t *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  JSC::JSGlobalObject *v60;
  _QWORD *v61;

  v10 = *(unint64_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    LOBYTE(v59) = 0;
    LOBYTE(v60) = 0;
    v25 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)&v59, a3, a4, a5, a6, a7, a8);
    if (v26)
      v12 = v25;
    else
      v12 = 0;
    v13 = *(unint64_t **)a1;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(unint64_t **)a1;
  }
  if (v12 >= *v10)
    v14 = *v10;
  else
    v14 = v12;
  *v13 = v14;
  v15 = **(_QWORD **)(a1 + 16);
  v16 = **(_QWORD **)(a1 + 24);
  v17 = *(JSC::VM **)(v15 + 56);
  if ((*(_BYTE *)(v11 + 40) & 7u) > 2)
  {
    LOBYTE(v59) = 0;
    LOBYTE(v60) = 0;
    v27 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v11, (uint64_t)&v59, a3, a4, a5, a6, a7, a8);
    if (v28)
      v18 = v27;
    else
      v18 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(v11 + 24);
  }
  v19 = !__CFADD__(v16, v14);
  v20 = v16 + v14 <= v18 && v19;
  if (v20)
  {
    if (*(unsigned __int8 *)(a2 + 5) - 44 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1985075ECLL);
    }
    v21 = *(_QWORD *)(v11 + 16);
    if (v21 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v22 = (void *)(v21 + 4 * **(_QWORD **)(a1 + 24));
    v23 = *(_QWORD *)(a2 + 16);
    if (v23 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v23 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memmove(v22, (const void *)(v23 + 4 * **(_QWORD **)(a1 + 32)), 4 * **(_QWORD **)a1);
  }
  else
  {
    v29 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v29 = 0x3700000002;
    *(_QWORD *)(v29 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v29 + 16) = 4;
    v58 = (WTF::StringImpl *)v29;
    v30 = *(_QWORD *)(v15 + 128);
    v31 = *(JSC::Heap ***)(v15 + 56);
    if ((v30 & 1) != 0)
    {
      v56 = *(uint64_t (**)(uint64_t *))(v30 & 0xFFFFFFFFFFFFFFFCLL);
      v57 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v15 & 8) != 0)
        v57 = (uint64_t *)(v15 - 16);
      v59 = *v57;
      v60 = (JSC::JSGlobalObject *)v15;
      v61 = (_QWORD *)(v15 + 128);
      v30 = v56(&v59);
    }
    v32 = JSC::ErrorInstance::create(v31, v30, &v58, 0, 0, 0, 2, 1);
    v39 = (JSC::Exception *)v32;
    if ((v32 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x4C)))
    {
      v39 = (JSC::Exception *)JSC::Exception::create((uint64_t)v17, (JSC::VM *)v32, 0, v33, v34, v35, v36, v37);
    }
    JSC::VM::throwException(v17, (JSC::JSGlobalObject *)v15, v39, v38, v33, v34, v35, v36, v37);
    v47 = v58;
    v58 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
      {
        WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)v47 -= 2;
      }
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(uint64_t a1, unint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  unint64_t v18;
  _BOOL4 v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _DWORD *v26;
  int v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  char *v39;
  _DWORD *v40;
  int v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  JSC::Heap **v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  JSC::Exception *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  char *v69;
  _DWORD *v70;
  int v71;
  uint64_t (*v72)(WTF **);
  WTF **v73;
  char *v74;
  _DWORD *v75;
  int v76;
  WTF *v77;
  unint64_t v78;
  _QWORD v79[16];
  WTF::StringImpl *v80[5];
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v8 = a7;
  v83 = a4;
  v84 = a3;
  v82 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v77) = 0;
    LOBYTE(v78) = 0;
    v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
    if (v43)
      v44 = v42;
    else
      v44 = 0;
    v45 = *(_BYTE *)(a4 + 40) & 7;
    if (v44 >= a6)
      v16 = a6;
    else
      v16 = v44;
    v81 = v16;
    if (v45 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v77) = 0;
      LOBYTE(v78) = 0;
      v46 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
      if (v47)
        v15 = v46;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 >= a6)
      v16 = a6;
    else
      v16 = *(_QWORD *)(a4 + 24);
    v81 = v16;
  }
  if (__CFADD__(a5, v16) || a5 + v16 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198507A98);
  }
  v17 = *(JSC::VM **)(this + 56);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v77) = 0;
    LOBYTE(v78) = 0;
    v48 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
    if (v49)
      v18 = v48;
    else
      v18 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 24);
  }
  v19 = !__CFADD__(a3, v16);
  v20 = a3 + v16 <= v18 && v19;
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v80[0] = (WTF::StringImpl *)&v81;
      v80[1] = (WTF::StringImpl *)&v83;
      v80[2] = (WTF::StringImpl *)&v82;
      v80[3] = (WTF::StringImpl *)a1;
      v80[4] = (WTF::StringImpl *)&v84;
      if (v16 >> 30)
      {
        if (v16 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x198507BF8);
        }
        if ((v16 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198507C00);
        }
        v38 = (void *)WTF::fastMalloc((WTF *)(16 * v16));
        bzero(v38, 16 * v16);
        v77 = (WTF *)v38;
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>((uint64_t **)v80, (uint64_t *)&v77);
        v37 = v77;
        v77 = 0;
        if (v37)
          goto LABEL_36;
      }
      else
      {
        v77 = (WTF *)v79;
        LODWORD(v78) = 32;
        HIDWORD(v78) = v16;
        if (v16 >= 0x21)
        {
          v29 = (WTF *)WTF::fastMalloc((WTF *)(4 * v16));
          LODWORD(v78) = v16;
          v77 = v29;
        }
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t **)v80, (uint64_t *)&v77);
        v37 = v77;
        if (v79 != (_QWORD *)v77 && v77)
        {
          v77 = 0;
          LODWORD(v78) = 0;
LABEL_36:
          WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
    else if (v16)
    {
      v21 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v22 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v23 = *(_QWORD *)(a1 + 16);
        v24 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v25 = (char *)(v22 + a5);
          v26 = (_DWORD *)(v24 + 4 * a3);
          do
          {
            v27 = *v25++;
            *v26++ = v27;
            --v16;
          }
          while (v16);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v69 = (char *)(v21 + a5);
          v70 = (_DWORD *)(v23 + 4 * a3);
          do
          {
            v71 = *v69++;
            *v70++ = v71;
            --v16;
          }
          while (v16);
        }
        else
        {
          v74 = (char *)(v22 + a5);
          v75 = (_DWORD *)(v24 + 4 * a3);
          do
          {
            v76 = *v74++;
            *v75++ = v76;
            --v16;
          }
          while (v16);
        }
      }
      else
      {
        v39 = (char *)(v21 + a5);
        v40 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v41 = *v39++;
          *v40++ = v41;
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v50 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v50 = 0x3700000002;
    *(_QWORD *)(v50 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v50 + 16) = 4;
    v80[0] = (WTF::StringImpl *)v50;
    v51 = *(_QWORD *)(this + 128);
    v52 = *(JSC::Heap ***)(this + 56);
    if ((v51 & 1) != 0)
    {
      v72 = *(uint64_t (**)(WTF **))(v51 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v73 = (WTF **)(this - 16);
      else
        v73 = (WTF **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v77 = *v73;
      v78 = this;
      v79[0] = this + 128;
      v51 = v72(&v77);
    }
    v53 = JSC::ErrorInstance::create(v52, v51, v80, 0, 0, 0, 2, 1);
    v60 = (JSC::Exception *)v53;
    if ((v53 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v53 & 0xFFFFFFFE) + 0x4C)))
    {
      v60 = (JSC::Exception *)JSC::Exception::create((uint64_t)v17, (JSC::VM *)v53, 0, v54, v55, v56, v57, v58);
    }
    JSC::VM::throwException(v17, (JSC::JSGlobalObject *)this, v60, v59, v54, v55, v56, v57, v58);
    v68 = v80[0];
    v80[0] = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 != 2)
      {
        *(_DWORD *)v68 -= 2;
        return v20;
      }
      WTF::StringImpl::~StringImpl(v68, v61, v62, v63, v64, v65, v66, v67);
      goto LABEL_36;
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(uint64_t a1, unint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  unint64_t v18;
  _BOOL4 v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 *v25;
  _DWORD *v26;
  int v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  __int16 *v39;
  _DWORD *v40;
  int v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  JSC::Heap **v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  JSC::Exception *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  __int16 *v69;
  _DWORD *v70;
  int v71;
  uint64_t (*v72)(WTF **);
  WTF **v73;
  __int16 *v74;
  _DWORD *v75;
  int v76;
  WTF *v77;
  unint64_t v78;
  _QWORD v79[16];
  WTF::StringImpl *v80[5];
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v8 = a7;
  v83 = a4;
  v84 = a3;
  v82 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v77) = 0;
    LOBYTE(v78) = 0;
    v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
    if (v43)
      v44 = v42;
    else
      v44 = 0;
    v45 = *(_BYTE *)(a4 + 40) & 7;
    if (v44 >= a6)
      v16 = a6;
    else
      v16 = v44;
    v81 = v16;
    if (v45 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v77) = 0;
      LOBYTE(v78) = 0;
      v46 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
      if (v47)
        v15 = v46;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 >= a6)
      v16 = a6;
    else
      v16 = *(_QWORD *)(a4 + 24);
    v81 = v16;
  }
  if (__CFADD__(a5, v16) || a5 + v16 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198507EC4);
  }
  v17 = *(JSC::VM **)(this + 56);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v77) = 0;
    LOBYTE(v78) = 0;
    v48 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
    if (v49)
      v18 = v48;
    else
      v18 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 24);
  }
  v19 = !__CFADD__(a3, v16);
  v20 = a3 + v16 <= v18 && v19;
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v80[0] = (WTF::StringImpl *)&v81;
      v80[1] = (WTF::StringImpl *)&v83;
      v80[2] = (WTF::StringImpl *)&v82;
      v80[3] = (WTF::StringImpl *)a1;
      v80[4] = (WTF::StringImpl *)&v84;
      if (v16 >> 30)
      {
        if (v16 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x198508024);
        }
        if ((v16 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850802CLL);
        }
        v38 = (void *)WTF::fastMalloc((WTF *)(16 * v16));
        bzero(v38, 16 * v16);
        v77 = (WTF *)v38;
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>((uint64_t **)v80, (uint64_t *)&v77);
        v37 = v77;
        v77 = 0;
        if (v37)
          goto LABEL_36;
      }
      else
      {
        v77 = (WTF *)v79;
        LODWORD(v78) = 32;
        HIDWORD(v78) = v16;
        if (v16 >= 0x21)
        {
          v29 = (WTF *)WTF::fastMalloc((WTF *)(4 * v16));
          LODWORD(v78) = v16;
          v77 = v29;
        }
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t **)v80, (uint64_t *)&v77);
        v37 = v77;
        if (v79 != (_QWORD *)v77 && v77)
        {
          v77 = 0;
          LODWORD(v78) = 0;
LABEL_36:
          WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
    else if (v16)
    {
      v21 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v22 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v23 = *(_QWORD *)(a1 + 16);
        v24 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v25 = (__int16 *)(v22 + 2 * a5);
          v26 = (_DWORD *)(v24 + 4 * a3);
          do
          {
            v27 = *v25++;
            *v26++ = v27;
            --v16;
          }
          while (v16);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v69 = (__int16 *)(v21 + 2 * a5);
          v70 = (_DWORD *)(v23 + 4 * a3);
          do
          {
            v71 = *v69++;
            *v70++ = v71;
            --v16;
          }
          while (v16);
        }
        else
        {
          v74 = (__int16 *)(v22 + 2 * a5);
          v75 = (_DWORD *)(v24 + 4 * a3);
          do
          {
            v76 = *v74++;
            *v75++ = v76;
            --v16;
          }
          while (v16);
        }
      }
      else
      {
        v39 = (__int16 *)(v21 + 2 * a5);
        v40 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v41 = *v39++;
          *v40++ = v41;
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v50 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v50 = 0x3700000002;
    *(_QWORD *)(v50 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v50 + 16) = 4;
    v80[0] = (WTF::StringImpl *)v50;
    v51 = *(_QWORD *)(this + 128);
    v52 = *(JSC::Heap ***)(this + 56);
    if ((v51 & 1) != 0)
    {
      v72 = *(uint64_t (**)(WTF **))(v51 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v73 = (WTF **)(this - 16);
      else
        v73 = (WTF **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v77 = *v73;
      v78 = this;
      v79[0] = this + 128;
      v51 = v72(&v77);
    }
    v53 = JSC::ErrorInstance::create(v52, v51, v80, 0, 0, 0, 2, 1);
    v60 = (JSC::Exception *)v53;
    if ((v53 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v53 & 0xFFFFFFFE) + 0x4C)))
    {
      v60 = (JSC::Exception *)JSC::Exception::create((uint64_t)v17, (JSC::VM *)v53, 0, v54, v55, v56, v57, v58);
    }
    JSC::VM::throwException(v17, (JSC::JSGlobalObject *)this, v60, v59, v54, v55, v56, v57, v58);
    v68 = v80[0];
    v80[0] = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 != 2)
      {
        *(_DWORD *)v68 -= 2;
        return v20;
      }
      WTF::StringImpl::~StringImpl(v68, v61, v62, v63, v64, v65, v66, v67);
      goto LABEL_36;
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::VM *v23;
  unint64_t v24;
  _BOOL4 v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _DWORD *v32;
  int v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  WTF *v44;
  void *v45;
  unsigned __int8 *v46;
  _DWORD *v47;
  int v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  JSC::Heap **v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  JSC::Exception *v63;
  WTF::AtomStringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  unsigned __int8 *v72;
  _DWORD *v73;
  int v74;
  uint64_t (*v75)(WTF **);
  WTF **v76;
  unsigned __int8 *v77;
  _DWORD *v78;
  int v79;
  WTF *v80;
  JSC::JSGlobalObject *v81;
  _QWORD v82[16];
  WTF::StringImpl *v83[5];
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v8 = a7;
  v86 = a4;
  v87 = a3;
  v85 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v80) = 0;
    LOBYTE(v81) = 0;
    v49 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v80, a3, a4, a5, a6, a7, a8);
    if (v50)
      v15 = v49;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
  }
  if (v15 >= a6)
    v16 = a6;
  else
    v16 = v15;
  v84 = v16;
  if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v16, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    JUMPOUT(0x1985082BCLL);
  }
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v80) = 0;
    LOBYTE(v81) = 0;
    v51 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v80, v17, v18, v19, v20, v21, v22);
    if (v52)
      v24 = v51;
    else
      v24 = 0;
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 24);
  }
  v25 = !__CFADD__(a3, v16);
  v26 = a3 + v16 <= v24 && v25;
  if (v26)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v83[0] = (WTF::StringImpl *)&v84;
      v83[1] = (WTF::StringImpl *)&v86;
      v83[2] = (WTF::StringImpl *)&v85;
      v83[3] = (WTF::StringImpl *)a1;
      v83[4] = (WTF::StringImpl *)&v87;
      if (v16 >> 30)
      {
        if (v16 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x19850841CLL);
        }
        if ((v16 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198508424);
        }
        v44 = (WTF *)(16 * v16);
        v45 = (void *)WTF::fastMalloc(v44);
        bzero(v45, (size_t)v44);
        v80 = (WTF *)v45;
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>((uint64_t **)v83, (uint64_t *)&v80);
        v43 = v80;
        v80 = 0;
        if (v43)
          goto LABEL_35;
      }
      else
      {
        v80 = (WTF *)v82;
        LODWORD(v81) = 32;
        HIDWORD(v81) = v16;
        if (v16 >= 0x21)
        {
          v35 = (WTF *)WTF::fastMalloc((WTF *)(4 * v16));
          LODWORD(v81) = v16;
          v80 = v35;
        }
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t **)v83, (uint64_t *)&v80);
        v43 = v80;
        if (v82 != (_QWORD *)v80 && v80)
        {
          v80 = 0;
          LODWORD(v81) = 0;
LABEL_35:
          WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
        }
      }
    }
    else if (v16)
    {
      v27 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v28 = (v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v29 = *(_QWORD *)(a1 + 16);
        v30 = (v29 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v31 = (unsigned __int8 *)(v28 + a5);
          v32 = (_DWORD *)(v30 + 4 * a3);
          do
          {
            v33 = *v31++;
            *v32++ = v33;
            --v16;
          }
          while (v16);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v72 = (unsigned __int8 *)(v27 + a5);
          v73 = (_DWORD *)(v29 + 4 * a3);
          do
          {
            v74 = *v72++;
            *v73++ = v74;
            --v16;
          }
          while (v16);
        }
        else
        {
          v77 = (unsigned __int8 *)(v28 + a5);
          v78 = (_DWORD *)(v30 + 4 * a3);
          do
          {
            v79 = *v77++;
            *v78++ = v79;
            --v16;
          }
          while (v16);
        }
      }
      else
      {
        v46 = (unsigned __int8 *)(v27 + a5);
        v47 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v48 = *v46++;
          *v47++ = v48;
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v53 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v53 = 0x3700000002;
    *(_QWORD *)(v53 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v53 + 16) = 4;
    v83[0] = (WTF::StringImpl *)v53;
    v54 = *(_QWORD *)(a2 + 128);
    v55 = *(JSC::Heap ***)(a2 + 56);
    if ((v54 & 1) != 0)
    {
      v75 = *(uint64_t (**)(WTF **))(v54 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a2 & 8) != 0)
        v76 = (WTF **)(a2 - 16);
      else
        v76 = (WTF **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v80 = *v76;
      v81 = (JSC::JSGlobalObject *)a2;
      v82[0] = a2 + 128;
      v54 = v75(&v80);
    }
    v56 = JSC::ErrorInstance::create(v55, v54, v83, 0, 0, 0, 2, 1);
    v63 = (JSC::Exception *)v56;
    if ((v56 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C)))
    {
      v63 = (JSC::Exception *)JSC::Exception::create((uint64_t)v23, (JSC::VM *)v56, 0, v57, v58, v59, v60, v61);
    }
    JSC::VM::throwException(v23, (JSC::JSGlobalObject *)a2, v63, v62, v57, v58, v59, v60, v61);
    v71 = v83[0];
    v83[0] = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 != 2)
      {
        *(_DWORD *)v71 -= 2;
        return v26;
      }
      WTF::StringImpl::~StringImpl(v71, v64, v65, v66, v67, v68, v69, v70);
      goto LABEL_35;
    }
  }
  return v26;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(uint64_t a1, unint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  unint64_t v18;
  _BOOL4 v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _DWORD *v26;
  int v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  unsigned __int8 *v39;
  _DWORD *v40;
  int v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  JSC::Heap **v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  JSC::Exception *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  unsigned __int8 *v69;
  _DWORD *v70;
  int v71;
  uint64_t (*v72)(WTF **);
  WTF **v73;
  unsigned __int8 *v74;
  _DWORD *v75;
  int v76;
  WTF *v77;
  unint64_t v78;
  _QWORD v79[16];
  WTF::StringImpl *v80[5];
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v8 = a7;
  v83 = a4;
  v84 = a3;
  v82 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v77) = 0;
    LOBYTE(v78) = 0;
    v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
    if (v43)
      v44 = v42;
    else
      v44 = 0;
    v45 = *(_BYTE *)(a4 + 40) & 7;
    if (v44 >= a6)
      v16 = a6;
    else
      v16 = v44;
    v81 = v16;
    if (v45 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v77) = 0;
      LOBYTE(v78) = 0;
      v46 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
      if (v47)
        v15 = v46;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 >= a6)
      v16 = a6;
    else
      v16 = *(_QWORD *)(a4 + 24);
    v81 = v16;
  }
  if (__CFADD__(a5, v16) || a5 + v16 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1985086E0);
  }
  v17 = *(JSC::VM **)(this + 56);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v77) = 0;
    LOBYTE(v78) = 0;
    v48 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
    if (v49)
      v18 = v48;
    else
      v18 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 24);
  }
  v19 = !__CFADD__(a3, v16);
  v20 = a3 + v16 <= v18 && v19;
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v80[0] = (WTF::StringImpl *)&v81;
      v80[1] = (WTF::StringImpl *)&v83;
      v80[2] = (WTF::StringImpl *)&v82;
      v80[3] = (WTF::StringImpl *)a1;
      v80[4] = (WTF::StringImpl *)&v84;
      if (v16 >> 30)
      {
        if (v16 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x198508840);
        }
        if ((v16 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198508848);
        }
        v38 = (void *)WTF::fastMalloc((WTF *)(16 * v16));
        bzero(v38, 16 * v16);
        v77 = (WTF *)v38;
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>((uint64_t **)v80, (uint64_t *)&v77);
        v37 = v77;
        v77 = 0;
        if (v37)
          goto LABEL_36;
      }
      else
      {
        v77 = (WTF *)v79;
        LODWORD(v78) = 32;
        HIDWORD(v78) = v16;
        if (v16 >= 0x21)
        {
          v29 = (WTF *)WTF::fastMalloc((WTF *)(4 * v16));
          LODWORD(v78) = v16;
          v77 = v29;
        }
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t **)v80, (uint64_t *)&v77);
        v37 = v77;
        if (v79 != (_QWORD *)v77 && v77)
        {
          v77 = 0;
          LODWORD(v78) = 0;
LABEL_36:
          WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
    else if (v16)
    {
      v21 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v22 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v23 = *(_QWORD *)(a1 + 16);
        v24 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v25 = (unsigned __int8 *)(v22 + a5);
          v26 = (_DWORD *)(v24 + 4 * a3);
          do
          {
            v27 = *v25++;
            *v26++ = v27;
            --v16;
          }
          while (v16);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v69 = (unsigned __int8 *)(v21 + a5);
          v70 = (_DWORD *)(v23 + 4 * a3);
          do
          {
            v71 = *v69++;
            *v70++ = v71;
            --v16;
          }
          while (v16);
        }
        else
        {
          v74 = (unsigned __int8 *)(v22 + a5);
          v75 = (_DWORD *)(v24 + 4 * a3);
          do
          {
            v76 = *v74++;
            *v75++ = v76;
            --v16;
          }
          while (v16);
        }
      }
      else
      {
        v39 = (unsigned __int8 *)(v21 + a5);
        v40 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v41 = *v39++;
          *v40++ = v41;
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v50 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v50 = 0x3700000002;
    *(_QWORD *)(v50 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v50 + 16) = 4;
    v80[0] = (WTF::StringImpl *)v50;
    v51 = *(_QWORD *)(this + 128);
    v52 = *(JSC::Heap ***)(this + 56);
    if ((v51 & 1) != 0)
    {
      v72 = *(uint64_t (**)(WTF **))(v51 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v73 = (WTF **)(this - 16);
      else
        v73 = (WTF **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v77 = *v73;
      v78 = this;
      v79[0] = this + 128;
      v51 = v72(&v77);
    }
    v53 = JSC::ErrorInstance::create(v52, v51, v80, 0, 0, 0, 2, 1);
    v60 = (JSC::Exception *)v53;
    if ((v53 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v53 & 0xFFFFFFFE) + 0x4C)))
    {
      v60 = (JSC::Exception *)JSC::Exception::create((uint64_t)v17, (JSC::VM *)v53, 0, v54, v55, v56, v57, v58);
    }
    JSC::VM::throwException(v17, (JSC::JSGlobalObject *)this, v60, v59, v54, v55, v56, v57, v58);
    v68 = v80[0];
    v80[0] = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 != 2)
      {
        *(_DWORD *)v68 -= 2;
        return v20;
      }
      WTF::StringImpl::~StringImpl(v68, v61, v62, v63, v64, v65, v66, v67);
      goto LABEL_36;
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(uint64_t a1, unint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  unint64_t v18;
  _BOOL4 v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  _DWORD *v26;
  int v27;
  WTF *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  unsigned __int16 *v39;
  _DWORD *v40;
  int v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  JSC::Heap **v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  JSC::Exception *v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  unsigned __int16 *v69;
  _DWORD *v70;
  int v71;
  uint64_t (*v72)(WTF **);
  WTF **v73;
  unsigned __int16 *v74;
  _DWORD *v75;
  int v76;
  WTF *v77;
  unint64_t v78;
  _QWORD v79[16];
  WTF::StringImpl *v80[5];
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v8 = a7;
  v83 = a4;
  v84 = a3;
  v82 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v77) = 0;
    LOBYTE(v78) = 0;
    v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
    if (v43)
      v44 = v42;
    else
      v44 = 0;
    v45 = *(_BYTE *)(a4 + 40) & 7;
    if (v44 >= a6)
      v16 = a6;
    else
      v16 = v44;
    v81 = v16;
    if (v45 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v77) = 0;
      LOBYTE(v78) = 0;
      v46 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
      if (v47)
        v15 = v46;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 >= a6)
      v16 = a6;
    else
      v16 = *(_QWORD *)(a4 + 24);
    v81 = v16;
  }
  if (__CFADD__(a5, v16) || a5 + v16 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198508B0CLL);
  }
  v17 = *(JSC::VM **)(this + 56);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v77) = 0;
    LOBYTE(v78) = 0;
    v48 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v77, a3, a4, a5, a6, a7, a8);
    if (v49)
      v18 = v48;
    else
      v18 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 24);
  }
  v19 = !__CFADD__(a3, v16);
  v20 = a3 + v16 <= v18 && v19;
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v80[0] = (WTF::StringImpl *)&v81;
      v80[1] = (WTF::StringImpl *)&v83;
      v80[2] = (WTF::StringImpl *)&v82;
      v80[3] = (WTF::StringImpl *)a1;
      v80[4] = (WTF::StringImpl *)&v84;
      if (v16 >> 30)
      {
        if (v16 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x198508C6CLL);
        }
        if ((v16 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198508C74);
        }
        v38 = (void *)WTF::fastMalloc((WTF *)(16 * v16));
        bzero(v38, 16 * v16);
        v77 = (WTF *)v38;
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<std::unique_ptr<int [],WTF::UniqueArrayFree<int []>>>((uint64_t **)v80, (uint64_t *)&v77);
        v37 = v77;
        v77 = 0;
        if (v37)
          goto LABEL_36;
      }
      else
      {
        v77 = (WTF *)v79;
        LODWORD(v78) = 32;
        HIDWORD(v78) = v16;
        if (v16 >= 0x21)
        {
          v29 = (WTF *)WTF::fastMalloc((WTF *)(4 * v16));
          LODWORD(v78) = v16;
          v77 = v29;
        }
        JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t **)v80, (uint64_t *)&v77);
        v37 = v77;
        if (v79 != (_QWORD *)v77 && v77)
        {
          v77 = 0;
          LODWORD(v78) = 0;
LABEL_36:
          WTF::fastFree((unint64_t)v37, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
    else if (v16)
    {
      v21 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v22 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v23 = *(_QWORD *)(a1 + 16);
        v24 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v25 = (unsigned __int16 *)(v22 + 2 * a5);
          v26 = (_DWORD *)(v24 + 4 * a3);
          do
          {
            v27 = *v25++;
            *v26++ = v27;
            --v16;
          }
          while (v16);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v69 = (unsigned __int16 *)(v21 + 2 * a5);
          v70 = (_DWORD *)(v23 + 4 * a3);
          do
          {
            v71 = *v69++;
            *v70++ = v71;
            --v16;
          }
          while (v16);
        }
        else
        {
          v74 = (unsigned __int16 *)(v22 + 2 * a5);
          v75 = (_DWORD *)(v24 + 4 * a3);
          do
          {
            v76 = *v74++;
            *v75++ = v76;
            --v16;
          }
          while (v16);
        }
      }
      else
      {
        v39 = (unsigned __int16 *)(v21 + 2 * a5);
        v40 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v41 = *v39++;
          *v40++ = v41;
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v50 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v50 = 0x3700000002;
    *(_QWORD *)(v50 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v50 + 16) = 4;
    v80[0] = (WTF::StringImpl *)v50;
    v51 = *(_QWORD *)(this + 128);
    v52 = *(JSC::Heap ***)(this + 56);
    if ((v51 & 1) != 0)
    {
      v72 = *(uint64_t (**)(WTF **))(v51 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v73 = (WTF **)(this - 16);
      else
        v73 = (WTF **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v77 = *v73;
      v78 = this;
      v79[0] = this + 128;
      v51 = v72(&v77);
    }
    v53 = JSC::ErrorInstance::create(v52, v51, v80, 0, 0, 0, 2, 1);
    v60 = (JSC::Exception *)v53;
    if ((v53 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v53 & 0xFFFFFFFE) + 0x4C)))
    {
      v60 = (JSC::Exception *)JSC::Exception::create((uint64_t)v17, (JSC::VM *)v53, 0, v54, v55, v56, v57, v58);
    }
    JSC::VM::throwException(v17, (JSC::JSGlobalObject *)this, v60, v59, v54, v55, v56, v57, v58);
    v68 = v80[0];
    v80[0] = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 != 2)
      {
        *(_DWORD *)v68 -= 2;
        return v20;
      }
      WTF::StringImpl::~StringImpl(v68, v61, v62, v63, v64, v65, v66, v67);
      goto LABEL_36;
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  unint64_t v18;
  _BOOL4 v19;
  _BOOL8 result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  float v32;
  double v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  double v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  double v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  char v69;
  _BOOL8 v70;
  uint64_t v71;
  unint64_t v72;
  JSC::Heap **v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  JSC::Exception *v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  float v101;
  double v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  uint64_t (*v108)(uint64_t *);
  uint64_t *v109;
  WTF::StringImpl *v110;
  uint64_t v111;
  JSC::JSGlobalObject *v112;
  _QWORD *v113;

  v8 = a7;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v111) = 0;
    LOBYTE(v112) = 0;
    v63 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v111, a3, a4, a5, a6, a7, a8);
    if (v64)
      v65 = v63;
    else
      v65 = 0;
    if (v65 >= a6)
      v16 = a6;
    else
      v16 = v65;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v111) = 0;
      LOBYTE(v112) = 0;
      v66 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v111, a3, a4, a5, a6, a7, a8);
      if (v67)
        v15 = v66;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 >= a6)
      v16 = a6;
    else
      v16 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v16) || a5 + v16 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198509064);
  }
  v17 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v111) = 0;
    LOBYTE(v112) = 0;
    v68 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v111, a3, a4, a5, a6, a7, a8);
    if (v69)
      v18 = v68;
    else
      v18 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 24);
  }
  v19 = !__CFADD__(a3, v16);
  result = a3 + v16 <= v18 && v19;
  if (result)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) == 0
      || (*(_BYTE *)(a4 + 40) & 8) == 0
      || *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) != *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      goto LABEL_19;
    }
    v40 = *(_QWORD *)(a1 + 16);
    if (v40)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v41 = *(_QWORD *)(a1 + 16), !disablePrimitiveGigacageRequested))
          v41 = (v40 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v41 = *(_QWORD *)(a1 + 16);
      }
    }
    else
    {
      v41 = 0;
    }
    v42 = *(_QWORD *)(a4 + 16);
    if (v42)
    {
      v43 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v43 = *(_QWORD *)(a4 + 16), !disablePrimitiveGigacageRequested))
          v43 = (v42 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
    }
    else
    {
      v43 = 0;
    }
    if (v8 && v41 + 4 * a3 > (unint64_t)(v43 + 4 * a5))
    {
      if (v16)
      {
        if (qword_1ECF4C038)
        {
          v44 = (v42 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v45 = (v40 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            v46 = v45 + 4 * a3 - 4;
            do
            {
              v47 = *(float *)(v44 + 4 * a5 - 4 + 4 * v16);
              v48 = v47;
              v49 = (int)v47;
              if ((double)(int)v47 != v47)
              {
                v50 = (*(_QWORD *)&v48 >> 52) & 0x7FFLL;
                v51 = v50 - 1023;
                v52 = *(_QWORD *)&v48 >> (51 - (*(_QWORD *)&v48 >> 52));
                if (v50 > 0x433)
                  LODWORD(v52) = *(_QWORD *)&v48 << ((*(_QWORD *)&v48 >> 52) - 51);
                if (v50 >= 0x41F)
                  v53 = v52;
                else
                  v53 = (((1 << ((*(_QWORD *)&v48 >> 52) + 1)) - 1) & v52) + (1 << ((*(_QWORD *)&v48 >> 52) + 1));
                if (v48 >= 0.0)
                  v49 = v53;
                else
                  v49 = -v53;
                if (v51 > 0x53)
                  v49 = 0;
              }
              *(_DWORD *)(v46 + 4 * v16--) = v49;
            }
            while (v16);
          }
          else
          {
            v98 = disablePrimitiveGigacageRequested;
            if (disablePrimitiveGigacageRequested)
              v45 = *(_QWORD *)(a1 + 16);
            v99 = v45 + 4 * a3 - 4;
            do
            {
              v100 = v42;
              if (!v98)
                v100 = v44;
              v101 = *(float *)(v100 + 4 * a5 - 4 + 4 * v16);
              v102 = v101;
              v103 = (int)v101;
              if ((double)(int)v101 != v101)
              {
                v104 = (*(_QWORD *)&v102 >> 52) & 0x7FFLL;
                v105 = v104 - 1023;
                v106 = *(_QWORD *)&v102 >> (51 - (*(_QWORD *)&v102 >> 52));
                if (v104 > 0x433)
                  LODWORD(v106) = *(_QWORD *)&v102 << ((*(_QWORD *)&v102 >> 52) - 51);
                if (v104 >= 0x41F)
                  v107 = v106;
                else
                  v107 = (((1 << ((*(_QWORD *)&v102 >> 52) + 1)) - 1) & v106) + (1 << ((*(_QWORD *)&v102 >> 52) + 1));
                if (v102 >= 0.0)
                  v103 = v107;
                else
                  v103 = -v107;
                if (v105 > 0x53)
                  v103 = 0;
              }
              *(_DWORD *)(v99 + 4 * v16--) = v103;
            }
            while (v16);
          }
        }
        else
        {
          v54 = v42 + 4 * a5 - 4;
          v55 = v40 + 4 * a3 - 4;
          do
          {
            v56 = *(float *)(v54 + 4 * v16);
            v57 = v56;
            v58 = (int)v56;
            if ((double)(int)v56 != v56)
            {
              v59 = (*(_QWORD *)&v57 >> 52) & 0x7FFLL;
              v60 = v59 - 1023;
              v61 = *(_QWORD *)&v57 >> (51 - (*(_QWORD *)&v57 >> 52));
              if (v59 > 0x433)
                LODWORD(v61) = *(_QWORD *)&v57 << ((*(_QWORD *)&v57 >> 52) - 51);
              if (v59 >= 0x41F)
                v62 = v61;
              else
                v62 = (((1 << ((*(_QWORD *)&v57 >> 52) + 1)) - 1) & v61) + (1 << ((*(_QWORD *)&v57 >> 52) + 1));
              if (v57 >= 0.0)
                v58 = v62;
              else
                v58 = -v62;
              if (v60 > 0x53)
                v58 = 0;
            }
            *(_DWORD *)(v55 + 4 * v16--) = v58;
          }
          while (v16);
        }
      }
    }
    else
    {
LABEL_19:
      if (v16)
      {
        v21 = *(_QWORD *)(a4 + 16);
        v22 = qword_1ECF4C038;
        v23 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v24 = *(_QWORD *)(a1 + 16);
        v25 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v26 = disablePrimitiveGigacageRequested;
        v27 = 4 * a5;
        v28 = 4 * a3;
        do
        {
          if (byte_1ECF4C022)
            v29 = 1;
          else
            v29 = v26 == 0;
          v30 = v29;
          if (v29)
            v31 = v23;
          else
            v31 = v21;
          if (!v22)
            v31 = v21;
          v32 = *(float *)(v31 + v27);
          v33 = v32;
          v34 = (int)v32;
          if ((double)(int)v32 != v32)
          {
            v36 = (*(_QWORD *)&v33 >> 52) & 0x7FFLL;
            v37 = v36 - 1023;
            v38 = *(_QWORD *)&v33 >> (51 - (*(_QWORD *)&v33 >> 52));
            if (v36 > 0x433)
              LODWORD(v38) = *(_QWORD *)&v33 << ((*(_QWORD *)&v33 >> 52) - 51);
            if (v36 >= 0x41F)
              v39 = v38;
            else
              v39 = (((1 << ((*(_QWORD *)&v33 >> 52) + 1)) - 1) & v38) + (1 << ((*(_QWORD *)&v33 >> 52) + 1));
            if (v33 >= 0.0)
              v34 = v39;
            else
              v34 = -v39;
            if (v37 > 0x53)
              v34 = 0;
          }
          if (v30)
            v35 = v25;
          else
            v35 = v24;
          if (!v22)
            v35 = v24;
          *(_DWORD *)(v35 + v28) = v34;
          v27 += 4;
          v28 += 4;
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v70 = result;
    v71 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v71 = 0x3700000002;
    *(_QWORD *)(v71 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v71 + 16) = 4;
    v110 = (WTF::StringImpl *)v71;
    v72 = *(_QWORD *)(a2 + 128);
    v73 = *(JSC::Heap ***)(a2 + 56);
    if ((v72 & 1) != 0)
    {
      v108 = *(uint64_t (**)(uint64_t *))(v72 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a2 & 8) != 0)
        v109 = (uint64_t *)(a2 - 16);
      else
        v109 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v111 = *v109;
      v112 = (JSC::JSGlobalObject *)a2;
      v113 = (_QWORD *)(a2 + 128);
      v72 = v108(&v111);
    }
    v74 = JSC::ErrorInstance::create(v73, v72, &v110, 0, 0, 0, 2, 1);
    v81 = (JSC::Exception *)v74;
    if ((v74 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v74 & 0xFFFFFFFE) + 0x4C)))
    {
      v81 = (JSC::Exception *)JSC::Exception::create((uint64_t)v17, (JSC::VM *)v74, 0, v75, v76, v77, v78, v79);
    }
    JSC::VM::throwException(v17, (JSC::JSGlobalObject *)a2, v81, v80, v75, v76, v77, v78, v79);
    v89 = v110;
    v110 = 0;
    if (v89)
    {
      if (*(_DWORD *)v89 == 2)
      {
        WTF::StringImpl::~StringImpl(v89, v82, v83, v84, v85, v86, v87, v88);
        WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
      }
      else
      {
        *(_DWORD *)v89 -= 2;
      }
    }
    return v70;
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(uint64_t a1, unint64_t this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  unint64_t v18;
  _BOOL4 v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  int *v25;
  double v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  double *v43;
  int *v44;
  double v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  JSC::Heap **v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  JSC::Exception *v69;
  WTF::AtomStringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  double *v78;
  int *v79;
  double v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  uint64_t (*v86)(WTF **);
  WTF **v87;
  double *v88;
  int *v89;
  double v90;
  int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  WTF *v96;
  unint64_t v97;
  _QWORD v98[16];
  WTF::StringImpl *v99[5];
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v8 = a7;
  v102 = a4;
  v103 = a3;
  v101 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v96) = 0;
    LOBYTE(v97) = 0;
    v51 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v96, a3, a4, a5, a6, a7, a8);
    if (v52)
      v53 = v51;
    else
      v53 = 0;
    v54 = *(_BYTE *)(a4 + 40) & 7;
    if (v53 >= a6)
      v16 = a6;
    else
      v16 = v53;
    v100 = v16;
    if (v54 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v96) = 0;
      LOBYTE(v97) = 0;
      v55 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v96, a3, a4, a5, a6, a7, a8);
      if (v56)
        v15 = v55;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 >= a6)
      v16 = a6;
    else
      v16 = *(_QWORD *)(a4 + 24);
    v100 = v16;
  }
  if (__CFADD__(a5, v16) || a5 + v16 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198509620);
  }
  v17 = *(JSC::VM **)(this + 56);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v96) = 0;
    LOBYTE(v97) = 0;
    v57 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v96, a3, a4, a5, a6, a7, a8);
    if (v58)
      v18 = v57;
    else
      v18 = 0;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 24);
  }
  v19 = !__CFADD__(a3, v16);
  v20 = a3 + v16 <= v18 && v19;
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v99[0] = (WTF::StringImpl *)&v100;
      v99[1] = (WTF::StringImpl *)&v102;
      v99[2] = (WTF::StringImpl *)&v101;
      v99[3] = (WTF::StringImpl *)a1;
      v99[4] = (WTF::StringImpl *)&v103;
      if (v16 >> 30)
      {
        if (v16 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x1985097F0);
        }
        if ((v16 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1985097F8);
        }
        v41 = (void *)WTF::fastMalloc((WTF *)(16 * v16));
        bzero(v41, 16 * v16);
        v96 = (WTF *)v41;
        JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<std::unique_ptr<unsigned int [],WTF::UniqueArrayFree<unsigned int []>>>((uint64_t **)v99, (uint64_t *)&v96);
        v40 = v96;
        v96 = 0;
        if (v40)
          goto LABEL_48;
      }
      else
      {
        v96 = (WTF *)v98;
        LODWORD(v97) = 32;
        HIDWORD(v97) = v16;
        if (v16 >= 0x21)
        {
          v32 = (WTF *)WTF::fastMalloc((WTF *)(4 * v16));
          LODWORD(v97) = v16;
          v96 = v32;
        }
        JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t **)v99, (uint64_t *)&v96);
        v40 = v96;
        if (v98 != (_QWORD *)v96 && v96)
        {
          v96 = 0;
          LODWORD(v97) = 0;
LABEL_48:
          WTF::fastFree((unint64_t)v40, v33, v34, v35, v36, v37, v38, v39);
        }
      }
    }
    else if (v16)
    {
      v21 = *(_QWORD *)(a4 + 16);
      v22 = *(_QWORD *)(a1 + 16);
      if (qword_1ECF4C038)
      {
        v23 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v24 = (double *)(v23 + 8 * a5);
          v25 = (int *)((v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 4 * a3);
          do
          {
            v26 = *v24;
            v27 = (int)*v24;
            if (*v24 != (double)v27)
            {
              v28 = (*(_QWORD *)&v26 >> 52) & 0x7FFLL;
              v29 = v28 - 1023;
              v30 = *(_QWORD *)&v26 >> (51 - (*(_QWORD *)&v26 >> 52));
              if (v28 > 0x433)
                LODWORD(v30) = *(_QWORD *)&v26 << ((*(_QWORD *)&v26 >> 52) - 51);
              if (v28 >= 0x41F)
                v31 = v30;
              else
                v31 = (((1 << ((*(_QWORD *)&v26 >> 52) + 1)) - 1) & v30) + (1 << ((*(_QWORD *)&v26 >> 52) + 1));
              if (v26 >= 0.0)
                v27 = v31;
              else
                v27 = -v31;
              if (v29 > 0x53)
                v27 = 0;
            }
            *v25++ = v27;
            ++v24;
            --v16;
          }
          while (v16);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v78 = (double *)(v21 + 8 * a5);
          v79 = (int *)(v22 + 4 * a3);
          do
          {
            v80 = *v78;
            v81 = (int)*v78;
            if (*v78 != (double)v81)
            {
              v82 = (*(_QWORD *)&v80 >> 52) & 0x7FFLL;
              v83 = v82 - 1023;
              v84 = *(_QWORD *)&v80 >> (51 - (*(_QWORD *)&v80 >> 52));
              if (v82 > 0x433)
                LODWORD(v84) = *(_QWORD *)&v80 << ((*(_QWORD *)&v80 >> 52) - 51);
              if (v82 >= 0x41F)
                v85 = v84;
              else
                v85 = (((1 << ((*(_QWORD *)&v80 >> 52) + 1)) - 1) & v84) + (1 << ((*(_QWORD *)&v80 >> 52) + 1));
              if (v80 >= 0.0)
                v81 = v85;
              else
                v81 = -v85;
              if (v83 > 0x53)
                v81 = 0;
            }
            *v79++ = v81;
            ++v78;
            --v16;
          }
          while (v16);
        }
        else
        {
          v88 = (double *)(v23 + 8 * a5);
          v89 = (int *)((v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 4 * a3);
          do
          {
            v90 = *v88;
            v91 = (int)*v88;
            if (*v88 != (double)v91)
            {
              v92 = (*(_QWORD *)&v90 >> 52) & 0x7FFLL;
              v93 = v92 - 1023;
              v94 = *(_QWORD *)&v90 >> (51 - (*(_QWORD *)&v90 >> 52));
              if (v92 > 0x433)
                LODWORD(v94) = *(_QWORD *)&v90 << ((*(_QWORD *)&v90 >> 52) - 51);
              if (v92 >= 0x41F)
                v95 = v94;
              else
                v95 = (((1 << ((*(_QWORD *)&v90 >> 52) + 1)) - 1) & v94) + (1 << ((*(_QWORD *)&v90 >> 52) + 1));
              if (v90 >= 0.0)
                v91 = v95;
              else
                v91 = -v95;
              if (v93 > 0x53)
                v91 = 0;
            }
            *v89++ = v91;
            ++v88;
            --v16;
          }
          while (v16);
        }
      }
      else
      {
        v43 = (double *)(v21 + 8 * a5);
        v44 = (int *)(v22 + 4 * a3);
        do
        {
          v45 = *v43;
          v46 = (int)*v43;
          if (*v43 != (double)v46)
          {
            v47 = (*(_QWORD *)&v45 >> 52) & 0x7FFLL;
            v48 = v47 - 1023;
            v49 = *(_QWORD *)&v45 >> (51 - (*(_QWORD *)&v45 >> 52));
            if (v47 > 0x433)
              LODWORD(v49) = *(_QWORD *)&v45 << ((*(_QWORD *)&v45 >> 52) - 51);
            if (v47 >= 0x41F)
              v50 = v49;
            else
              v50 = (((1 << ((*(_QWORD *)&v45 >> 52) + 1)) - 1) & v49) + (1 << ((*(_QWORD *)&v45 >> 52) + 1));
            if (v45 >= 0.0)
              v46 = v50;
            else
              v46 = -v50;
            if (v48 > 0x53)
              v46 = 0;
          }
          *v44++ = v46;
          ++v43;
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v59 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v59 = 0x3700000002;
    *(_QWORD *)(v59 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v59 + 16) = 4;
    v99[0] = (WTF::StringImpl *)v59;
    v60 = *(_QWORD *)(this + 128);
    v61 = *(JSC::Heap ***)(this + 56);
    if ((v60 & 1) != 0)
    {
      v86 = *(uint64_t (**)(WTF **))(v60 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v87 = (WTF **)(this - 16);
      else
        v87 = (WTF **)(this & 0xFFFFFFFFFFFFC000 | 8);
      v96 = *v87;
      v97 = this;
      v98[0] = this + 128;
      v60 = v86(&v96);
    }
    v62 = JSC::ErrorInstance::create(v61, v60, v99, 0, 0, 0, 2, 1);
    v69 = (JSC::Exception *)v62;
    if ((v62 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x4C)))
    {
      v69 = (JSC::Exception *)JSC::Exception::create((uint64_t)v17, (JSC::VM *)v62, 0, v63, v64, v65, v66, v67);
    }
    JSC::VM::throwException(v17, (JSC::JSGlobalObject *)this, v69, v68, v63, v64, v65, v66, v67);
    v77 = v99[0];
    v99[0] = 0;
    if (v77)
    {
      if (*(_DWORD *)v77 != 2)
      {
        *(_DWORD *)v77 -= 2;
        return v20;
      }
      WTF::StringImpl::~StringImpl(v77, v70, v71, v72, v73, v74, v75, v76);
      goto LABEL_48;
    }
  }
  return v20;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  JSC::VM *v15;
  unint64_t v16;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  JSC::Heap **v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  JSC::Exception *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t *);
  uint64_t *v53;
  JSC::VM *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;

  v8 = a6;
  v54 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v56) = 0;
    LOBYTE(v57) = 0;
    v18 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v56, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v18;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v56) = 0;
      LOBYTE(v57) = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v56, a3, a4, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1985099C0);
  }
  v15 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v56) = 0;
    LOBYTE(v57) = 0;
    v23 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v56, a3, a4, a5, a6, a7, a8);
    if (v24)
      v16 = v23;
    else
      v16 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 24);
  }
  if (__CFADD__(a3, v8) || a3 + v8 > v16)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x3700000002;
    *(_QWORD *)(v25 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v25 + 16) = 4;
    v55 = (WTF::StringImpl *)v25;
    v26 = *(_QWORD *)(a2 + 128);
    v27 = *(JSC::Heap ***)(a2 + 56);
    if ((v26 & 1) != 0)
    {
      v52 = *(uint64_t (**)(uint64_t *))(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a2 & 8) != 0)
        v53 = (uint64_t *)(a2 - 16);
      else
        v53 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v56 = *v53;
      v57 = a2;
      v58 = a2 + 128;
      v26 = v52(&v56);
    }
    v28 = JSC::ErrorInstance::create(v27, v26, &v55, 0, 0, 0, 2, 1);
    v35 = (JSC::Exception *)v28;
    if ((v28 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C)))
    {
      v35 = (JSC::Exception *)JSC::Exception::create((uint64_t)v15, (JSC::VM *)v28, 0, v29, v30, v31, v32, v33);
    }
    JSC::VM::throwException(v15, (JSC::JSGlobalObject *)a2, v35, v34, v29, v30, v31, v32, v33);
    v43 = v55;
    v55 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v43 -= 2;
      }
    }
  }
  else
  {
    JSC::throwTypeError(a2, &v54, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  }
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  JSC::VM *v15;
  unint64_t v16;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  JSC::Heap **v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  JSC::Exception *v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t *);
  uint64_t *v53;
  JSC::VM *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;

  v8 = a6;
  v54 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v56) = 0;
    LOBYTE(v57) = 0;
    v18 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v56, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v18;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v56) = 0;
      LOBYTE(v57) = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v56, a3, a4, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198509C34);
  }
  v15 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    LOBYTE(v56) = 0;
    LOBYTE(v57) = 0;
    v23 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a1, (uint64_t)&v56, a3, a4, a5, a6, a7, a8);
    if (v24)
      v16 = v23;
    else
      v16 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 24);
  }
  if (__CFADD__(a3, v8) || a3 + v8 > v16)
  {
    v25 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v25 = 0x3700000002;
    *(_QWORD *)(v25 + 8) = "Range consisting of offset and length are out of bounds";
    *(_DWORD *)(v25 + 16) = 4;
    v55 = (WTF::StringImpl *)v25;
    v26 = *(_QWORD *)(a2 + 128);
    v27 = *(JSC::Heap ***)(a2 + 56);
    if ((v26 & 1) != 0)
    {
      v52 = *(uint64_t (**)(uint64_t *))(v26 & 0xFFFFFFFFFFFFFFFCLL);
      if ((a2 & 8) != 0)
        v53 = (uint64_t *)(a2 - 16);
      else
        v53 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      v56 = *v53;
      v57 = a2;
      v58 = a2 + 128;
      v26 = v52(&v56);
    }
    v28 = JSC::ErrorInstance::create(v27, v26, &v55, 0, 0, 0, 2, 1);
    v35 = (JSC::Exception *)v28;
    if ((v28 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C)))
    {
      v35 = (JSC::Exception *)JSC::Exception::create((uint64_t)v15, (JSC::VM *)v28, 0, v29, v30, v31, v32, v33);
    }
    JSC::VM::throwException(v15, (JSC::JSGlobalObject *)a2, v35, v34, v29, v30, v31, v32, v33);
    v43 = v55;
    v55 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
      {
        WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v43 -= 2;
      }
    }
  }
  else
  {
    JSC::throwTypeError(a2, &v54, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  }
  return 0;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<WTF::Vector<unsigned int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      if (byte_1ECF4C022)
      {
        v9 = v8 - 4;
        v10 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v4 - 8;
        v11 = **result;
        while (1)
        {
          v12 = *(double *)(v10 + 8 * v11);
          v13 = (int)v12;
          if (v12 != (double)(int)v12)
          {
            v15 = (*(_QWORD *)&v12 >> 52) & 0x7FFLL;
            v16 = v15 - 1023;
            v17 = *(_QWORD *)&v12 >> (51 - (*(_QWORD *)&v12 >> 52));
            if (v15 > 0x433)
              LODWORD(v17) = *(_QWORD *)&v12 << ((*(_QWORD *)&v12 >> 52) - 51);
            if (v15 >= 0x41F)
              v18 = v17;
            else
              v18 = (((1 << ((*(_QWORD *)&v12 >> 52) + 1)) - 1) & v17) + (1 << ((*(_QWORD *)&v12 >> 52) + 1));
            if (v12 >= 0.0)
              v13 = v18;
            else
              v13 = -v18;
            if (v16 > 0x53)
              v13 = 0;
          }
          v14 = v11 - 1;
          if (v11 - 1 >= (unint64_t)*((unsigned int *)a2 + 3))
            break;
          *(_DWORD *)(v9 + 4 * v11--) = v13;
          if (!v14)
            goto LABEL_55;
        }
      }
      else
      {
        v29 = v2 - 1;
        v30 = 8 * v4;
        while (1)
        {
          if (v7)
            v31 = v5;
          else
            v31 = (v5 & 0x3FFFFFFFFLL) + v6;
          v32 = *(double *)(v31 + v30 + 8 * v29);
          v33 = (int)v32;
          if (v32 != (double)(int)v32)
          {
            v34 = (*(_QWORD *)&v32 >> 52) & 0x7FFLL;
            v35 = v34 - 1023;
            v36 = *(_QWORD *)&v32 >> (51 - (*(_QWORD *)&v32 >> 52));
            if (v34 > 0x433)
              LODWORD(v36) = *(_QWORD *)&v32 << ((*(_QWORD *)&v32 >> 52) - 51);
            if (v34 >= 0x41F)
              v37 = v36;
            else
              v37 = (((1 << ((*(_QWORD *)&v32 >> 52) + 1)) - 1) & v36) + (1 << ((*(_QWORD *)&v32 >> 52) + 1));
            if (v32 >= 0.0)
              v33 = v37;
            else
              v33 = -v37;
            if (v35 > 0x53)
              v33 = 0;
          }
          if (v29 >= *((unsigned int *)a2 + 3))
            break;
          *(_DWORD *)(v8 + 4 * v29--) = v33;
          if (v29 == -1)
            goto LABEL_55;
        }
      }
    }
    else
    {
      v19 = v8 - 4;
      v20 = v5 + 8 * v4 - 8;
      v21 = **result;
      do
      {
        v22 = *(double *)(v20 + 8 * v21);
        v23 = (int)v22;
        if (v22 != (double)(int)v22)
        {
          v25 = (*(_QWORD *)&v22 >> 52) & 0x7FFLL;
          v26 = v25 - 1023;
          v27 = *(_QWORD *)&v22 >> (51 - (*(_QWORD *)&v22 >> 52));
          if (v25 > 0x433)
            LODWORD(v27) = *(_QWORD *)&v22 << ((*(_QWORD *)&v22 >> 52) - 51);
          if (v25 >= 0x41F)
            v28 = v27;
          else
            v28 = (((1 << ((*(_QWORD *)&v22 >> 52) + 1)) - 1) & v27) + (1 << ((*(_QWORD *)&v22 >> 52) + 1));
          if (v22 >= 0.0)
            v23 = v28;
          else
            v23 = -v28;
          if (v26 > 0x53)
            v23 = 0;
        }
        v24 = v21 - 1;
        if (v21 - 1 >= (unint64_t)*((unsigned int *)a2 + 3))
          goto LABEL_77;
        *(_DWORD *)(v19 + 4 * v21--) = v23;
      }
      while (v24);
LABEL_55:
      v38 = *result[4];
      v39 = *a2;
      if (v7)
      {
        if (v6)
        {
          v40 = v2 - 1;
          while (v40 < *((unsigned int *)a2 + 3))
          {
            v41 = v3[2];
            if (byte_1ECF4C022)
              v41 = (v41 & 0x3FFFFFFFFLL) + v6;
            *(_DWORD *)(v41 + 4 * v38 + 4 * v40) = *(_DWORD *)(v39 + 4 * v40);
            if (--v40 == -1)
              return result;
          }
        }
        else
        {
          v42 = v2 - 1;
          while (v42 < *((unsigned int *)a2 + 3))
          {
            *(_DWORD *)(v3[2] + 4 * v38 + 4 * v42) = *(_DWORD *)(v39 + 4 * v42);
            if (--v42 == -1)
              return result;
          }
        }
      }
      else if (v6)
      {
        v43 = v2 - 1;
        v44 = v6 + 4 * v38;
        while (v43 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)((v3[2] & 0x3FFFFFFFFLL) + v44 + 4 * v43) = *(_DWORD *)(v39 + 4 * v43);
          if (--v43 == -1)
            return result;
        }
      }
      else
      {
        v45 = v2 - 1;
        while (v45 < *((unsigned int *)a2 + 3))
        {
          *(_DWORD *)(v3[2] + 4 * v38 + 4 * v45) = *(_DWORD *)(v39 + 4 * v45);
          if (--v45 == -1)
            return result;
        }
      }
    }
LABEL_77:
    __break(0xC471u);
    JUMPOUT(0x19850A040);
  }
  return result;
}

uint64_t **JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<std::unique_ptr<unsigned int [],WTF::UniqueArrayFree<unsigned int []>>>(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = **result;
  if (v2)
  {
    v3 = result[3];
    v4 = *result[2];
    v5 = *(_QWORD *)(*result[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      if (byte_1ECF4C022)
      {
        v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v4 - 8;
        v10 = **result;
        do
        {
          v11 = *(double *)(v9 + 8 * v10);
          v12 = (int)v11;
          if (v11 != (double)(int)v11)
          {
            v13 = (*(_QWORD *)&v11 >> 52) & 0x7FFLL;
            v14 = v13 - 1023;
            v15 = *(_QWORD *)&v11 >> (51 - (*(_QWORD *)&v11 >> 52));
            if (v13 > 0x433)
              LODWORD(v15) = *(_QWORD *)&v11 << ((*(_QWORD *)&v11 >> 52) - 51);
            if (v13 >= 0x41F)
              v16 = v15;
            else
              v16 = (((1 << ((*(_QWORD *)&v11 >> 52) + 1)) - 1) & v15) + (1 << ((*(_QWORD *)&v11 >> 52) + 1));
            if (v11 >= 0.0)
              v12 = v16;
            else
              v12 = -v16;
            if (v14 > 0x53)
              v12 = 0;
          }
          *(_DWORD *)(v8 - 4 + 4 * v10--) = v12;
        }
        while (v10);
      }
      else
      {
        v24 = 8 * v4 - 8;
        v25 = **result;
        do
        {
          v26 = v5;
          if (!v7)
            v26 = (v5 & 0x3FFFFFFFFLL) + v6;
          v27 = *(double *)(v26 + v24 + 8 * v25);
          v28 = (int)v27;
          if (v27 != (double)(int)v27)
          {
            v29 = (*(_QWORD *)&v27 >> 52) & 0x7FFLL;
            v30 = v29 - 1023;
            v31 = *(_QWORD *)&v27 >> (51 - (*(_QWORD *)&v27 >> 52));
            if (v29 > 0x433)
              LODWORD(v31) = *(_QWORD *)&v27 << ((*(_QWORD *)&v27 >> 52) - 51);
            if (v29 >= 0x41F)
              v32 = v31;
            else
              v32 = (((1 << ((*(_QWORD *)&v27 >> 52) + 1)) - 1) & v31) + (1 << ((*(_QWORD *)&v27 >> 52) + 1));
            if (v27 >= 0.0)
              v28 = v32;
            else
              v28 = -v32;
            if (v30 > 0x53)
              v28 = 0;
          }
          *(_DWORD *)(v8 - 4 + 4 * v25--) = v28;
        }
        while (v25);
      }
    }
    else
    {
      v17 = **result;
      do
      {
        v18 = *(double *)(v5 + 8 * v4 - 8 + 8 * v17);
        v19 = (int)v18;
        if (v18 != (double)(int)v18)
        {
          v20 = (*(_QWORD *)&v18 >> 52) & 0x7FFLL;
          v21 = v20 - 1023;
          v22 = *(_QWORD *)&v18 >> (51 - (*(_QWORD *)&v18 >> 52));
          if (v20 > 0x433)
            LODWORD(v22) = *(_QWORD *)&v18 << ((*(_QWORD *)&v18 >> 52) - 51);
          if (v20 >= 0x41F)
            v23 = v22;
          else
            v23 = (((1 << ((*(_QWORD *)&v18 >> 52) + 1)) - 1) & v22) + (1 << ((*(_QWORD *)&v18 >> 52) + 1));
          if (v18 >= 0.0)
            v19 = v23;
          else
            v19 = -v23;
          if (v21 > 0x53)
            v19 = 0;
        }
        *(_DWORD *)(v8 - 4 + 4 * v17--) = v19;
      }
      while (v17);
    }
    v33 = *result[4];
    v34 = v3[2];
    if (v6)
    {
      v35 = (v34 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v36 = v8 - 4;
        do
        {
          *(_DWORD *)(v35 + 4 * v33 - 4 + 4 * v2) = *(_DWORD *)(v36 + 4 * v2);
          --v2;
        }
        while (v2);
      }
      else
      {
        v39 = v8 - 4;
        if (v7)
        {
          v40 = v34 + 4 * v33 - 4;
          do
          {
            *(_DWORD *)(v40 + 4 * v2) = *(_DWORD *)(v39 + 4 * v2);
            --v2;
          }
          while (v2);
        }
        else
        {
          do
          {
            *(_DWORD *)(v35 + 4 * v33 - 4 + 4 * v2) = *(_DWORD *)(v39 + 4 * v2);
            --v2;
          }
          while (v2);
        }
      }
    }
    else
    {
      v37 = v8 - 4;
      v38 = v34 + 4 * v33 - 4;
      do
      {
        *(_DWORD *)(v38 + 4 * v2) = *(_DWORD *)(v37 + 4 * v2);
        --v2;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t JSC::toNativeFromValue<JSC::Uint32Adaptor>(JSC::JSGlobalObject *a1, JSC::JSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  double v10;
  JSC::JSObject *v11;

  v11 = a2;
  if ((unint64_t)a2 >= 0xFFFE000000000000)
    return (uint64_t)a2;
  if (!((unint64_t)a2 >> 49))
  {
    JSC::JSValue::toNumberSlowCase(&v11, a1, a3, a4, a5, a6, a7, a8, a9);
    return JSC::IntegralTypedArrayAdaptor<unsigned int,JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>,(JSC::TypedArrayType)7>::toNativeFromDouble(v10);
  }
  return JSC::IntegralTypedArrayAdaptor<unsigned int,JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>,(JSC::TypedArrayType)7>::toNativeFromDouble(COERCE_DOUBLE((JSC::JSObject *)((char *)a2 - 0x2000000000000)));
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::copyFromDoubleShapeArray(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  double v9;
  int v10;
  int *v11;
  double v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  double v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;

  if (a5)
  {
    v5 = *(_QWORD *)(a3 + 8);
    v6 = *(_QWORD *)(result + 16);
    if (qword_1ECF4C038)
    {
      v7 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v8 = (int *)(v7 + 4 * a2);
        do
        {
          v9 = *(double *)(v5 + 8 * a4);
          v10 = (int)v9;
          if (v9 != (double)(int)v9)
          {
            v14 = (*(_QWORD *)&v9 >> 52) & 0x7FFLL;
            v15 = v14 - 1023;
            v16 = *(_QWORD *)&v9 >> (51 - (*(_QWORD *)&v9 >> 52));
            if (v14 > 0x433)
              LODWORD(v16) = *(_QWORD *)&v9 << ((*(_QWORD *)&v9 >> 52) - 51);
            if (v14 >= 0x41F)
              v17 = v16;
            else
              v17 = (((1 << ((*(_QWORD *)&v9 >> 52) + 1)) - 1) & v16) + (1 << ((*(_QWORD *)&v9 >> 52) + 1));
            if (v9 >= 0.0)
              v10 = v17;
            else
              v10 = -v17;
            if (v15 > 0x53)
              v10 = 0;
          }
          *v8++ = v10;
          ++a4;
          --a5;
        }
        while (a5);
      }
      else
      {
        v22 = disablePrimitiveGigacageRequested;
        v23 = 4 * a2;
        do
        {
          v24 = *(double *)(v5 + 8 * a4);
          v25 = (int)v24;
          if (v24 != (double)(int)v24)
          {
            v27 = (*(_QWORD *)&v24 >> 52) & 0x7FFLL;
            v28 = v27 - 1023;
            result = *(_QWORD *)&v24 >> (51 - (*(_QWORD *)&v24 >> 52));
            result = v27 <= 0x433
                   ? result
                   : (*(_QWORD *)&v24 << ((*(_QWORD *)&v24 >> 52) - 51));
            v29 = v27 >= 0x41F
                ? result
                : (((1 << ((*(_QWORD *)&v24 >> 52) + 1)) - 1) & result)
                + (1 << ((*(_QWORD *)&v24 >> 52) + 1));
            v25 = v24 >= 0.0 ? v29 : -v29;
            if (v28 > 0x53)
              v25 = 0;
          }
          v26 = v6;
          if (!v22)
            v26 = v7;
          *(_DWORD *)(v26 + v23) = v25;
          v23 += 4;
          ++a4;
          --a5;
        }
        while (a5);
      }
    }
    else
    {
      v11 = (int *)(v6 + 4 * a2);
      do
      {
        v12 = *(double *)(v5 + 8 * a4);
        v13 = (int)v12;
        if (v12 != (double)(int)v12)
        {
          v18 = (*(_QWORD *)&v12 >> 52) & 0x7FFLL;
          v19 = v18 - 1023;
          v20 = *(_QWORD *)&v12 >> (51 - (*(_QWORD *)&v12 >> 52));
          if (v18 > 0x433)
            LODWORD(v20) = *(_QWORD *)&v12 << ((*(_QWORD *)&v12 >> 52) - 51);
          if (v18 >= 0x41F)
            v21 = v20;
          else
            v21 = (((1 << ((*(_QWORD *)&v12 >> 52) + 1)) - 1) & v20) + (1 << ((*(_QWORD *)&v12 >> 52) + 1));
          if (v12 >= 0.0)
            v13 = v21;
          else
            v13 = -v21;
          if (v19 > 0x53)
            v13 = 0;
        }
        *v11++ = v13;
        ++a4;
        --a5;
      }
      while (a5);
    }
  }
  return result;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  unint64_t SlowCase;
  JSC::JSCell *v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  uint64_t v27;

  v9 = *((_QWORD *)a1 + 7);
  v27 = v9;
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v26, (JSC *)v9, a2, a3, 4, 0, a7, a8);
  if (!v26[0])
  {
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v27);
    return 0;
  }
  v17 = *(JSC::Heap **)(v9 + 40464);
  if (!v17)
    v17 = JSC::GCClient::Heap::float32ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase >= *((_QWORD *)v17 + 4))
  {
    SlowCase = *((_QWORD *)v17 + 5);
    if ((SlowCase & 1) != 0)
    {
      v22 = (uint64_t)v17;
      JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v22, v9 + 192, 48, 0, 0, v23, v24, v25);
      goto LABEL_6;
    }
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v21);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v21;
  }
  *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v19 = JSC::JSArrayBufferView::JSArrayBufferView((JSC::JSCell *)SlowCase, v9, (uint64_t)v26);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v19, (JSC::VM *)v9);
  return SlowCase;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createUninitialized(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  unint64_t SlowCase;
  JSC::JSCell *v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  uint64_t v27;

  v9 = *((_QWORD *)a1 + 7);
  v27 = v9;
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v26, (JSC *)v9, a2, a3, 4, 1, a7, a8);
  if (!v26[0])
  {
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v27);
    return 0;
  }
  v17 = *(JSC::Heap **)(v9 + 40464);
  if (!v17)
    v17 = JSC::GCClient::Heap::float32ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase >= *((_QWORD *)v17 + 4))
  {
    SlowCase = *((_QWORD *)v17 + 5);
    if ((SlowCase & 1) != 0)
    {
      v22 = (uint64_t)v17;
      JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v22, v9 + 192, 48, 0, 0, v23, v24, v25);
      goto LABEL_6;
    }
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v21);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v21;
  }
  *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v19 = JSC::JSArrayBufferView::JSArrayBufferView((JSC::JSCell *)SlowCase, v9, (uint64_t)v26);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v19, (JSC::VM *)v9);
  return SlowCase;
}

void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromTypedArray(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v8[5];
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::JSGlobalObject *v12;

  v11 = a3;
  v12 = a2;
  v9 = a6;
  v10 = a5;
  v8[0] = &v9;
  v8[1] = a1;
  v8[2] = &v12;
  v8[3] = &v11;
  v8[4] = &v10;
  switch(*(_BYTE *)(a4 + 5))
  {
    case '\'':
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '(':
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ')':
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '*':
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '+':
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ',':
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '-':
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '.':
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()((uint64_t)v8, a4, a3, a4, a5, a6, a7, a8);
      break;
    case '/':
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '0':
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '1':
      JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19850A82CLL);
  }
}

unint64_t JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t Uninitialized;
  int8x16_t v18;
  unint64_t v19;
  JSC::JSObject *v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  JSC::JSObject *v28[3];
  char v29;
  uint64_t v30;
  char *v31;
  _OWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  JSC::JSGlobalObject *v35;

  v34 = *((_QWORD *)a1 + 7);
  v35 = a1;
  v29 = 0;
  v30 = 0x800000000;
  v31 = (char *)v32 + 8;
  memset(v32, 0, sizeof(v32));
  v33 = 0;
  v28[0] = (JSC::JSObject *)&v29;
  v28[1] = (JSC::JSObject *)&v35;
  v28[2] = (JSC::JSObject *)&v34;
  JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(a1, (uint64_t)this, a4, (uint64_t)v28, a5, a6, a7, a8);
  v16 = v34;
  if (*(_DWORD *)(v34 + 80))
  {
    v26 = *(_DWORD *)(v34 + 80);
    if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v34 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v16 + 16))
    {
LABEL_35:
      Uninitialized = 0;
      goto LABEL_36;
    }
  }
  Uninitialized = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createUninitialized(v35, a2, v30, v11, v12, v13, v14, v15);
  if (Uninitialized && (_DWORD)v30)
  {
    v19 = 0;
    do
    {
      v9 = v35;
      v20 = *(JSC::JSObject **)&v31[8 * v19];
      v21 = *((_QWORD *)v35 + 7);
      v28[0] = v20;
      if ((unint64_t)v20 < 0xFFFE000000000000)
      {
        if ((unint64_t)v20 >> 49)
          v18.i64[0] = (uint64_t)v20 - 0x2000000000000;
        else
          JSC::JSValue::toNumberSlowCase(v28, v35, v10, v11, v12, v13, v14, v15, v18);
        v22 = *(double *)v18.i64;
      }
      else
      {
        v22 = (float)(int)v20;
      }
      if (*(_DWORD *)(v21 + 80))
      {
        v25 = *(_DWORD *)(v21 + 80);
        if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, v10, v11, v12, v13, v14, v15);
        if (*(_QWORD *)(v21 + 16))
          goto LABEL_35;
      }
      if ((*(_BYTE *)(Uninitialized + 40) & 8) == 0
        || (v23 = *(_QWORD *)(Uninitialized + 16)) != 0
        && (!qword_1ECF4C038
         || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
         || (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::inBounds(Uninitialized, v19))
          goto LABEL_35;
        v24 = *(_QWORD *)(Uninitialized + 16);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v24 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(float *)(v24 + 4 * v19) = v22;
      }
    }
    while (++v19 < v30);
  }
LABEL_36:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v30, v9, v10, v11, v12, v13, v14, v15);
  return Uninitialized;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromArrayLike(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  JSC::VM *v14;
  _BOOL8 result;
  const JSC::PropertyTable *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  float v47;
  float *v48;
  float v49;
  unint64_t v50;
  uint64_t v51;
  int DirectOffset;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x16_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int8x16_t v69;
  BOOL v70;
  uint64_t v71;
  BOOL hasExceptionsAfterHandlingTraps;
  int v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  float *v78;
  uint64_t v79;
  float v80;
  uint64_t v81;

  v8 = a6;
  v9 = a5;
  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, a6, a5, a6, a7, a8);
  if (!result)
    return result;
  v21 = 0xFFFFFFFFLL;
  if (v8 < 0xFFFFFFFF)
    v21 = v8;
  if (v21 >= v9)
    v22 = v21 - v9;
  else
    v22 = 0;
  if (!a4)
    goto LABEL_63;
  v23 = *(unsigned __int8 *)(a4 + 5);
  v24 = (v23 & 0xFE) == 0x24 && v22 == v8;
  if (!v24 || v23 != 36)
    goto LABEL_63;
  v25 = *(_BYTE *)(a4 + 4);
  v26 = (v25 & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(a4 + 8) - 8) : 0;
  if (v8 + v9 > v26)
    goto LABEL_63;
  v27 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28);
  v28 = *(_QWORD *)(v27 + 2216);
  v29 = (v28 & 1) != 0 ? (v28 >> 1) & 3 : *(unsigned __int8 *)(v28 + 4);
  if (v29 == 2 || *(_BYTE *)(*(_QWORD *)(v27 + 2048) + 4) == 2)
    goto LABEL_63;
  v30 = *(_QWORD *)(v27 + 2304);
  v31 = (v30 & 1) != 0 ? (v30 >> 1) & 3 : *(unsigned __int8 *)(v30 + 4);
  if (v31 == 2)
    goto LABEL_63;
  v32 = *(unsigned __int8 *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 8);
  v33 = (v32 >> 1) & 7;
  if ((v32 & 0x10) != 0)
    v33 = ((v32 & 0xE) + 10) >> 1;
  v34 = *(_DWORD *)(v27 + 4 * v33 + 852);
  if (v34)
    v35 = 16 * (v34 & 0xFFFFFFFE);
  else
    v35 = 0;
  if (v35 != 16 * (*(_DWORD *)a4 & 0xFFFFFFFE))
  {
    if ((v32 & 0x20) != 0)
      goto LABEL_63;
    v50 = v21;
    v51 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x30);
    if (!v51)
      v51 = *(_QWORD *)(a4 + 16);
    v24 = v51 == *(_QWORD *)(v27 + 672);
    v21 = v50;
    if (!v24)
      goto LABEL_63;
    DirectOffset = JSC::JSObject::getDirectOffset((_DWORD *)a4, *(JSC::VM **)(v27 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 56) + 41952) + 2712), v16, v17, v18, v19, v20);
    v21 = v50;
    if (DirectOffset != -1)
      goto LABEL_63;
    v25 = *(_BYTE *)(a4 + 4);
  }
  v36 = v25 & 0xE;
  if (v36 == 4)
  {
    if (v21 > v9)
    {
      v37 = *(_QWORD *)(a4 + 8);
      if (disablePrimitiveGigacageRequested)
      {
        v38 = qword_1ECF4C038;
        v39 = 4 * a3;
        result = 1;
        do
        {
          v40 = *(_QWORD *)(v37 + 8 * v9);
          if (v40)
          {
            v41 = (float)(int)v40;
            v42 = *(_QWORD *)(a1 + 16);
            if (v38 && byte_1ECF4C022)
              v42 = (v42 & 0x3FFFFFFFFLL) + v38;
          }
          else
          {
            v42 = *(_QWORD *)(a1 + 16);
            v41 = NAN;
            if (v38 && byte_1ECF4C022)
            {
              v42 = (v42 & 0x3FFFFFFFFLL) + v38;
              v41 = NAN;
            }
          }
          *(float *)(v42 + v39) = v41;
          v39 += 4;
          LODWORD(v9) = v9 + 1;
          --v8;
        }
        while (v8);
      }
      else
      {
        v77 = *(_QWORD *)(a1 + 16);
        if (qword_1ECF4C038)
          v77 = (v77 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v78 = (float *)(v77 + 4 * a3);
        result = 1;
        do
        {
          v79 = *(_QWORD *)(v37 + 8 * v9);
          v80 = (float)(int)v79;
          if (!v79)
            v80 = NAN;
          *v78++ = v80;
          LODWORD(v9) = v9 + 1;
          --v8;
        }
        while (v8);
      }
      return result;
    }
    return 1;
  }
  if (v36 != 6)
  {
LABEL_63:
    if (v21 <= v9)
    {
LABEL_68:
      if (v22 >= v8)
        return 1;
      while (1)
      {
        v64 = JSC::JSObject::get((JSC::JSObject *)a4, (uint64_t ***)a2, (const WTF::StringImpl *)(v9 + v22), (uint64_t)v16, v17, v18, v19, v20);
        if (*((_DWORD *)v14 + 20))
        {
          v71 = v64;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v14, v62, v63, v64, v65, v66, v67, v68);
          v64 = v71;
          if (hasExceptionsAfterHandlingTraps)
            break;
        }
        if (!JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setIndex(a1, a2, a3 + v22, v64, v65, v66, v67, v68, v69))break;
        ++v22;
        result = 1;
        if (v22 >= v8)
          return result;
      }
    }
    else
    {
      v53 = 0;
      while (1)
      {
        v56 = JSC::JSObject::get((JSC::JSObject *)a4, a2, (v9 + v53));
        if (*((_DWORD *)v14 + 20))
        {
          v81 = v56;
          v70 = JSC::VM::hasExceptionsAfterHandlingTraps(v14, v54, v55, v56, v57, v58, v59, v60);
          v56 = v81;
          if (v70)
            break;
        }
        if (!JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setIndex(a1, a2, a3 + v53, v56, v57, v58, v59, v60, v61))break;
        if (++v53 >= v22)
          goto LABEL_68;
      }
    }
    return 0;
  }
  if (v21 <= v9)
    return 1;
  v43 = *(_QWORD *)(a4 + 8);
  v44 = *(_QWORD *)(a1 + 16);
  if (qword_1ECF4C038)
  {
    v45 = (v44 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    if (byte_1ECF4C022)
    {
      v46 = (float *)(v45 + 4 * a3);
      result = 1;
      do
      {
        v47 = *(double *)(v43 + 8 * v9);
        *v46++ = v47;
        ++v9;
        --v8;
      }
      while (v8);
    }
    else
    {
      v73 = disablePrimitiveGigacageRequested;
      v74 = 4 * a3;
      result = 1;
      do
      {
        v75 = v44;
        if (!v73)
          v75 = v45;
        v76 = *(double *)(v43 + 8 * v9);
        *(float *)(v75 + v74) = v76;
        v74 += 4;
        ++v9;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v48 = (float *)(v44 + 4 * a3);
    result = 1;
    do
    {
      v49 = *(double *)(v43 + 8 * v9);
      *v48++ = v49;
      ++v9;
      --v8;
    }
    while (v8);
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v20;
  char v21;
  _BYTE v22[16];

  v10 = *(uint64_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v22[0] = 0;
    v22[8] = 0;
    v20 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v22, a3, a4, a5, a6, a7, a8);
    if (v21)
      v12 = v20;
    else
      v12 = 0;
    v13 = *(uint64_t **)a1;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(uint64_t **)a1;
  }
  if (v12 >= *v10)
    v14 = *v10;
  else
    v14 = v12;
  *v13 = v14;
  v15 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(v11, **(JSC::JSGlobalObject ***)(a1 + 16), **(_QWORD **)(a1 + 24), v14, a5, a6, a7, a8);
  if (v15)
  {
    if (*(unsigned __int8 *)(a2 + 5) - 44 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x19850AFD8);
    }
    v16 = *(_QWORD *)(v11 + 16);
    if (v16 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v17 = (void *)(v16 + 4 * **(_QWORD **)(a1 + 24));
    v18 = *(_QWORD *)(a2 + 16);
    if (v18 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memmove(v17, (const void *)(v18 + 4 * **(_QWORD **)(a1 + 32)), 4 * **(_QWORD **)a1);
  }
  return v15;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  float *v23;
  int v24;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  char *v37;
  float *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char *v48;
  float *v49;
  int v50;
  char *v51;
  float *v52;
  int v53;
  WTF *v54;
  int v55;
  int v56;
  _BYTE v57[128];
  uint64_t *v58[5];
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v8 = a7;
  v9 = a6;
  v61 = a4;
  v62 = a3;
  v60 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v54) = 0;
    LOBYTE(v55) = 0;
    v40 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v54, a3, a4, a5, a6, a7, a8);
    if (v43)
      v44 = v40;
    else
      v44 = 0;
    v45 = *(_BYTE *)(a4 + 40) & 7;
    if (v44 < v9)
      v9 = v44;
    v59 = v9;
    if (v45 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v54) = 0;
      LOBYTE(v55) = 0;
      v46 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v54, v41, v42, a5, a6, a7, a8);
      if (v47)
        v15 = v46;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v59 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19850B334);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v58[0] = (uint64_t *)&v59;
      v58[1] = &v61;
      v58[2] = &v60;
      v58[3] = (uint64_t *)a1;
      v58[4] = &v62;
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x19850B36CLL);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850B374);
        }
        v35 = (WTF *)(16 * v9);
        v36 = (void *)WTF::fastMalloc(v35);
        bzero(v36, (size_t)v35);
        v54 = (WTF *)v36;
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<std::unique_ptr<float [],WTF::UniqueArrayFree<float []>>>(v58, (uint64_t *)&v54);
        v34 = v54;
        v54 = 0;
        if (v34)
          goto LABEL_27;
      }
      else
      {
        v54 = (WTF *)v57;
        v55 = 32;
        v56 = v9;
        if (v9 >= 0x21)
        {
          v26 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
          v55 = v9;
          v54 = v26;
        }
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<WTF::Vector<float,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v58, (uint64_t *)&v54, v17);
        v34 = v54;
        if (v57 != (_BYTE *)v54 && v54)
        {
          v54 = 0;
          v55 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
    else if (v9)
    {
      v18 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v22 = (char *)(v19 + a5);
          v23 = (float *)(v21 + 4 * a3);
          do
          {
            v24 = *v22++;
            *v23++ = (float)v24;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v48 = (char *)(v18 + a5);
          v49 = (float *)(v20 + 4 * a3);
          do
          {
            v50 = *v48++;
            *v49++ = (float)v50;
            --v9;
          }
          while (v9);
        }
        else
        {
          v51 = (char *)(v19 + a5);
          v52 = (float *)(v21 + 4 * a3);
          do
          {
            v53 = *v51++;
            *v52++ = (float)v53;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v37 = (char *)(v18 + a5);
        v38 = (float *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v39 = *v37++;
          *v38++ = (float)v39;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  float *v23;
  int v24;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  __int16 *v37;
  float *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  __int16 *v48;
  float *v49;
  int v50;
  __int16 *v51;
  float *v52;
  int v53;
  WTF *v54;
  int v55;
  int v56;
  _BYTE v57[128];
  uint64_t *v58[5];
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v8 = a7;
  v9 = a6;
  v61 = a4;
  v62 = a3;
  v60 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v54) = 0;
    LOBYTE(v55) = 0;
    v40 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v54, a3, a4, a5, a6, a7, a8);
    if (v43)
      v44 = v40;
    else
      v44 = 0;
    v45 = *(_BYTE *)(a4 + 40) & 7;
    if (v44 < v9)
      v9 = v44;
    v59 = v9;
    if (v45 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v54) = 0;
      LOBYTE(v55) = 0;
      v46 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v54, v41, v42, a5, a6, a7, a8);
      if (v47)
        v15 = v46;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v59 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19850B624);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v58[0] = (uint64_t *)&v59;
      v58[1] = &v61;
      v58[2] = &v60;
      v58[3] = (uint64_t *)a1;
      v58[4] = &v62;
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x19850B65CLL);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850B664);
        }
        v35 = (WTF *)(16 * v9);
        v36 = (void *)WTF::fastMalloc(v35);
        bzero(v36, (size_t)v35);
        v54 = (WTF *)v36;
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<std::unique_ptr<float [],WTF::UniqueArrayFree<float []>>>(v58, (uint64_t *)&v54);
        v34 = v54;
        v54 = 0;
        if (v34)
          goto LABEL_27;
      }
      else
      {
        v54 = (WTF *)v57;
        v55 = 32;
        v56 = v9;
        if (v9 >= 0x21)
        {
          v26 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
          v55 = v9;
          v54 = v26;
        }
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<WTF::Vector<float,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v58, (uint64_t *)&v54, v17);
        v34 = v54;
        if (v57 != (_BYTE *)v54 && v54)
        {
          v54 = 0;
          v55 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
    else if (v9)
    {
      v18 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v22 = (__int16 *)(v19 + 2 * a5);
          v23 = (float *)(v21 + 4 * a3);
          do
          {
            v24 = *v22++;
            *v23++ = (float)v24;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v48 = (__int16 *)(v18 + 2 * a5);
          v49 = (float *)(v20 + 4 * a3);
          do
          {
            v50 = *v48++;
            *v49++ = (float)v50;
            --v9;
          }
          while (v9);
        }
        else
        {
          v51 = (__int16 *)(v19 + 2 * a5);
          v52 = (float *)(v21 + 4 * a3);
          do
          {
            v53 = *v51++;
            *v52++ = (float)v53;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v37 = (__int16 *)(v18 + 2 * a5);
        v38 = (float *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v39 = *v37++;
          *v38++ = (float)v39;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

float JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  float *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  float *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  int *v40;
  float *v41;
  int v42;
  uint64_t v43;
  int *v44;
  float *v45;
  int v46;
  _BYTE v47[16];

  v8 = a7;
  v9 = a6;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v47[0] = 0;
    v47[8] = 0;
    v38 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
    if (v39)
      v15 = v38;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
  }
  if (v15 < v9)
    v9 = v15;
  if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v9, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    JUMPOUT(0x19850B8E4);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, v16, v17, v18, v19))
  {
    if ((*(_BYTE *)(a1 + 40) & 8) == 0
      || (*(_BYTE *)(a4 + 40) & 8) == 0
      || *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) != *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      goto LABEL_10;
    }
    v28 = *(_QWORD *)(a1 + 16);
    if (v28)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v29 = *(_QWORD *)(a1 + 16), !disablePrimitiveGigacageRequested))
          v29 = (v28 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v29 = *(_QWORD *)(a1 + 16);
      }
    }
    else
    {
      v29 = 0;
    }
    v30 = *(_QWORD *)(a4 + 16);
    if (v30)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v31 = *(_QWORD *)(a4 + 16), !disablePrimitiveGigacageRequested))
          v31 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v31 = *(_QWORD *)(a4 + 16);
      }
    }
    else
    {
      v31 = 0;
    }
    if (v8 && v29 + 4 * a3 > (unint64_t)(v31 + 4 * a5))
    {
      if (v9)
      {
        if (qword_1ECF4C038)
        {
          v32 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v33 = (v28 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            do
            {
              result = (float)*(int *)(v32 + 4 * a5 - 4 + 4 * v9);
              *(float *)(v33 + 4 * a3 - 4 + 4 * v9--) = result;
            }
            while (v9);
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v43 = v28 + 4 * a3 - 4;
            do
            {
              result = (float)*(int *)(v30 + 4 * a5 - 4 + 4 * v9);
              *(float *)(v43 + 4 * v9--) = result;
            }
            while (v9);
          }
          else
          {
            do
            {
              result = (float)*(int *)(v32 + 4 * a5 - 4 + 4 * v9);
              *(float *)(v33 + 4 * a3 - 4 + 4 * v9--) = result;
            }
            while (v9);
          }
        }
        else
        {
          v37 = v28 + 4 * a3 - 4;
          do
          {
            result = (float)*(int *)(v30 + 4 * a5 - 4 + 4 * v9);
            *(float *)(v37 + 4 * v9--) = result;
          }
          while (v9);
        }
      }
    }
    else
    {
LABEL_10:
      if (v9)
      {
        v21 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038)
        {
          v22 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v23 = *(_QWORD *)(a1 + 16);
          v24 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            v25 = (int *)(v22 + 4 * a5);
            v26 = (float *)(v24 + 4 * a3);
            do
            {
              v27 = *v25++;
              result = (float)v27;
              *v26++ = (float)v27;
              --v9;
            }
            while (v9);
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v40 = (int *)(v21 + 4 * a5);
            v41 = (float *)(v23 + 4 * a3);
            do
            {
              v42 = *v40++;
              result = (float)v42;
              *v41++ = (float)v42;
              --v9;
            }
            while (v9);
          }
          else
          {
            v44 = (int *)(v22 + 4 * a5);
            v45 = (float *)(v24 + 4 * a3);
            do
            {
              v46 = *v44++;
              result = (float)v46;
              *v45++ = (float)v46;
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          v34 = (int *)(v21 + 4 * a5);
          v35 = (float *)(*(_QWORD *)(a1 + 16) + 4 * a3);
          do
          {
            v36 = *v34++;
            result = (float)v36;
            *v35++ = (float)v36;
            --v9;
          }
          while (v9);
        }
      }
    }
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  float *v27;
  unsigned int v28;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  __n128 v41;
  unsigned __int8 *v42;
  float *v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  unsigned __int8 *v47;
  float *v48;
  unsigned int v49;
  unsigned __int8 *v50;
  float *v51;
  unsigned int v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[128];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v46)
      v15 = v45;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
  }
  if (v15 < v9)
    v9 = v15;
  v58 = v9;
  if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v9, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    JUMPOUT(0x19850BC28);
  }
  v20 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, v16, v17, v18, v19);
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x19850BC60);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850BC68);
        }
        v39 = (WTF *)(16 * v9);
        v40 = (void *)WTF::fastMalloc(v39);
        bzero(v40, (size_t)v39);
        v53 = (WTF *)v40;
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<float [],WTF::UniqueArrayFree<float []>>>(v57, (uint64_t *)&v53, v41);
        v38 = v53;
        v53 = 0;
        if (v38)
          goto LABEL_26;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v30 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
          v54 = v9;
          v53 = v30;
        }
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<float,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53, v21);
        v38 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_26:
          WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
        }
      }
    }
    else if (v9)
    {
      v22 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v23 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v24 = *(_QWORD *)(a1 + 16);
        v25 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v26 = (unsigned __int8 *)(v23 + a5);
          v27 = (float *)(v25 + 4 * a3);
          do
          {
            v28 = *v26++;
            *v27++ = (float)v28;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (unsigned __int8 *)(v22 + a5);
          v48 = (float *)(v24 + 4 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = (float)v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (unsigned __int8 *)(v23 + a5);
          v51 = (float *)(v25 + 4 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = (float)v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v42 = (unsigned __int8 *)(v22 + a5);
        v43 = (float *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v44 = *v42++;
          *v43++ = (float)v44;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  float *v23;
  unsigned int v24;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  __n128 v37;
  unsigned __int8 *v38;
  float *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  unsigned __int8 *v49;
  float *v50;
  unsigned int v51;
  unsigned __int8 *v52;
  float *v53;
  unsigned int v54;
  WTF *v55;
  int v56;
  int v57;
  _BYTE v58[128];
  uint64_t *v59[5];
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v8 = a7;
  v9 = a6;
  v62 = a4;
  v63 = a3;
  v61 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v55) = 0;
    LOBYTE(v56) = 0;
    v41 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, a3, a4, a5, a6, a7, a8);
    if (v44)
      v45 = v41;
    else
      v45 = 0;
    v46 = *(_BYTE *)(a4 + 40) & 7;
    if (v45 < v9)
      v9 = v45;
    v60 = v9;
    if (v46 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v55) = 0;
      LOBYTE(v56) = 0;
      v47 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, v42, v43, a5, a6, a7, a8);
      if (v48)
        v15 = v47;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v60 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19850BF10);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v59[0] = (uint64_t *)&v60;
      v59[1] = &v62;
      v59[2] = &v61;
      v59[3] = (uint64_t *)a1;
      v59[4] = &v63;
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x19850BF48);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850BF50);
        }
        v35 = (WTF *)(16 * v9);
        v36 = (void *)WTF::fastMalloc(v35);
        bzero(v36, (size_t)v35);
        v55 = (WTF *)v36;
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<float [],WTF::UniqueArrayFree<float []>>>(v59, (uint64_t *)&v55, v37);
        v34 = v55;
        v55 = 0;
        if (v34)
          goto LABEL_27;
      }
      else
      {
        v55 = (WTF *)v58;
        v56 = 32;
        v57 = v9;
        if (v9 >= 0x21)
        {
          v26 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
          v56 = v9;
          v55 = v26;
        }
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<float,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v59, (uint64_t *)&v55, v17);
        v34 = v55;
        if (v58 != (_BYTE *)v55 && v55)
        {
          v55 = 0;
          v56 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
    else if (v9)
    {
      v18 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v22 = (unsigned __int8 *)(v19 + a5);
          v23 = (float *)(v21 + 4 * a3);
          do
          {
            v24 = *v22++;
            *v23++ = (float)v24;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v49 = (unsigned __int8 *)(v18 + a5);
          v50 = (float *)(v20 + 4 * a3);
          do
          {
            v51 = *v49++;
            *v50++ = (float)v51;
            --v9;
          }
          while (v9);
        }
        else
        {
          v52 = (unsigned __int8 *)(v19 + a5);
          v53 = (float *)(v21 + 4 * a3);
          do
          {
            v54 = *v52++;
            *v53++ = (float)v54;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v38 = (unsigned __int8 *)(v18 + a5);
        v39 = (float *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v40 = *v38++;
          *v39++ = (float)v40;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  float *v23;
  unsigned int v24;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  float v37;
  unsigned __int16 *v38;
  float *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  unsigned __int16 *v49;
  float *v50;
  unsigned int v51;
  unsigned __int16 *v52;
  float *v53;
  unsigned int v54;
  WTF *v55;
  int v56;
  int v57;
  _BYTE v58[128];
  uint64_t *v59[5];
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v8 = a7;
  v9 = a6;
  v62 = a4;
  v63 = a3;
  v61 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v55) = 0;
    LOBYTE(v56) = 0;
    v41 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, a3, a4, a5, a6, a7, a8);
    if (v44)
      v45 = v41;
    else
      v45 = 0;
    v46 = *(_BYTE *)(a4 + 40) & 7;
    if (v45 < v9)
      v9 = v45;
    v60 = v9;
    if (v46 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v55) = 0;
      LOBYTE(v56) = 0;
      v47 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, v42, v43, a5, a6, a7, a8);
      if (v48)
        v15 = v47;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v60 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19850C200);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v59[0] = (uint64_t *)&v60;
      v59[1] = &v62;
      v59[2] = &v61;
      v59[3] = (uint64_t *)a1;
      v59[4] = &v63;
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x19850C238);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850C240);
        }
        v35 = (WTF *)(16 * v9);
        v36 = (void *)WTF::fastMalloc(v35);
        bzero(v36, (size_t)v35);
        v55 = (WTF *)v36;
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<std::unique_ptr<float [],WTF::UniqueArrayFree<float []>>>(v59, (uint64_t *)&v55, v37);
        v34 = v55;
        v55 = 0;
        if (v34)
          goto LABEL_27;
      }
      else
      {
        v55 = (WTF *)v58;
        v56 = 32;
        v57 = v9;
        if (v9 >= 0x21)
        {
          v26 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
          v56 = v9;
          v55 = v26;
        }
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<WTF::Vector<float,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v59, (uint64_t *)&v55, v17);
        v34 = v55;
        if (v58 != (_BYTE *)v55 && v55)
        {
          v55 = 0;
          v56 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
    else if (v9)
    {
      v18 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v22 = (unsigned __int16 *)(v19 + 2 * a5);
          v23 = (float *)(v21 + 4 * a3);
          do
          {
            v24 = *v22++;
            *v23++ = (float)v24;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v49 = (unsigned __int16 *)(v18 + 2 * a5);
          v50 = (float *)(v20 + 4 * a3);
          do
          {
            v51 = *v49++;
            *v50++ = (float)v51;
            --v9;
          }
          while (v9);
        }
        else
        {
          v52 = (unsigned __int16 *)(v19 + 2 * a5);
          v53 = (float *)(v21 + 4 * a3);
          do
          {
            v54 = *v52++;
            *v53++ = (float)v54;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v38 = (unsigned __int16 *)(v18 + 2 * a5);
        v39 = (float *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v40 = *v38++;
          *v39++ = (float)v40;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

float JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  float *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  float *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unsigned int *v40;
  float *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  float *v45;
  unsigned int v46;
  _BYTE v47[16];

  v8 = a7;
  v9 = a6;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v47[0] = 0;
    v47[8] = 0;
    v38 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
    if (v39)
      v15 = v38;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
  }
  if (v15 < v9)
    v9 = v15;
  if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v9, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    JUMPOUT(0x19850C4C0);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, v16, v17, v18, v19))
  {
    if ((*(_BYTE *)(a1 + 40) & 8) == 0
      || (*(_BYTE *)(a4 + 40) & 8) == 0
      || *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) != *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      goto LABEL_10;
    }
    v28 = *(_QWORD *)(a1 + 16);
    if (v28)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v29 = *(_QWORD *)(a1 + 16), !disablePrimitiveGigacageRequested))
          v29 = (v28 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v29 = *(_QWORD *)(a1 + 16);
      }
    }
    else
    {
      v29 = 0;
    }
    v30 = *(_QWORD *)(a4 + 16);
    if (v30)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v31 = *(_QWORD *)(a4 + 16), !disablePrimitiveGigacageRequested))
          v31 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v31 = *(_QWORD *)(a4 + 16);
      }
    }
    else
    {
      v31 = 0;
    }
    if (v8 && v29 + 4 * a3 > (unint64_t)(v31 + 4 * a5))
    {
      if (v9)
      {
        if (qword_1ECF4C038)
        {
          v32 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v33 = (v28 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            do
            {
              result = (float)*(unsigned int *)(v32 + 4 * a5 - 4 + 4 * v9);
              *(float *)(v33 + 4 * a3 - 4 + 4 * v9--) = result;
            }
            while (v9);
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v43 = v28 + 4 * a3 - 4;
            do
            {
              result = (float)*(unsigned int *)(v30 + 4 * a5 - 4 + 4 * v9);
              *(float *)(v43 + 4 * v9--) = result;
            }
            while (v9);
          }
          else
          {
            do
            {
              result = (float)*(unsigned int *)(v32 + 4 * a5 - 4 + 4 * v9);
              *(float *)(v33 + 4 * a3 - 4 + 4 * v9--) = result;
            }
            while (v9);
          }
        }
        else
        {
          v37 = v28 + 4 * a3 - 4;
          do
          {
            result = (float)*(unsigned int *)(v30 + 4 * a5 - 4 + 4 * v9);
            *(float *)(v37 + 4 * v9--) = result;
          }
          while (v9);
        }
      }
    }
    else
    {
LABEL_10:
      if (v9)
      {
        v21 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038)
        {
          v22 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v23 = *(_QWORD *)(a1 + 16);
          v24 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            v25 = (unsigned int *)(v22 + 4 * a5);
            v26 = (float *)(v24 + 4 * a3);
            do
            {
              v27 = *v25++;
              result = (float)v27;
              *v26++ = (float)v27;
              --v9;
            }
            while (v9);
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v40 = (unsigned int *)(v21 + 4 * a5);
            v41 = (float *)(v23 + 4 * a3);
            do
            {
              v42 = *v40++;
              result = (float)v42;
              *v41++ = (float)v42;
              --v9;
            }
            while (v9);
          }
          else
          {
            v44 = (unsigned int *)(v22 + 4 * a5);
            v45 = (float *)(v24 + 4 * a3);
            do
            {
              v46 = *v44++;
              result = (float)v46;
              *v45++ = (float)v46;
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          v34 = (unsigned int *)(v21 + 4 * a5);
          v35 = (float *)(*(_QWORD *)(a1 + 16) + 4 * a3);
          do
          {
            v36 = *v34++;
            result = (float)v36;
            *v35++ = (float)v36;
            --v9;
          }
          while (v9);
        }
      }
    }
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  float *v23;
  double v24;
  float v25;
  WTF *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  void *v37;
  double *v38;
  float *v39;
  double v40;
  float v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  double *v50;
  float *v51;
  double v52;
  float v53;
  double *v54;
  float *v55;
  double v56;
  float v57;
  WTF *v58;
  int v59;
  int v60;
  _BYTE v61[128];
  uint64_t *v62[5];
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v8 = a7;
  v9 = a6;
  v65 = a4;
  v66 = a3;
  v64 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v58) = 0;
    LOBYTE(v59) = 0;
    v42 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v58, a3, a4, a5, a6, a7, a8);
    if (v45)
      v46 = v42;
    else
      v46 = 0;
    v47 = *(_BYTE *)(a4 + 40) & 7;
    if (v46 < v9)
      v9 = v46;
    v63 = v9;
    if (v47 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v58) = 0;
      LOBYTE(v59) = 0;
      v48 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v58, v43, v44, a5, a6, a7, a8);
      if (v49)
        v15 = v48;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v63 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19850C838);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v62[0] = (uint64_t *)&v63;
      v62[1] = &v65;
      v62[2] = &v64;
      v62[3] = (uint64_t *)a1;
      v62[4] = &v66;
      if (v9 >> 30)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x19850C870);
        }
        if ((v9 & 0x3000000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850C878);
        }
        v36 = (WTF *)(16 * v9);
        v37 = (void *)WTF::fastMalloc(v36);
        bzero(v37, (size_t)v36);
        v58 = (WTF *)v37;
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<std::unique_ptr<float [],WTF::UniqueArrayFree<float []>>>(v62, (uint64_t *)&v58);
        v35 = v58;
        v58 = 0;
        if (v35)
          goto LABEL_27;
      }
      else
      {
        v58 = (WTF *)v61;
        v59 = 32;
        v60 = v9;
        if (v9 >= 0x21)
        {
          v27 = (WTF *)WTF::fastMalloc((WTF *)(4 * v9));
          v59 = v9;
          v58 = v27;
        }
        JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<WTF::Vector<float,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v62, (uint64_t *)&v58, v17);
        v35 = v58;
        if (v61 != (_BYTE *)v58 && v58)
        {
          v58 = 0;
          v59 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v35, v28, v29, v30, v31, v32, v33, v34);
        }
      }
    }
    else if (v9)
    {
      v18 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v22 = (double *)(v19 + 8 * a5);
          v23 = (float *)(v21 + 4 * a3);
          do
          {
            v24 = *v22++;
            v25 = v24;
            *v23++ = v25;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v50 = (double *)(v18 + 8 * a5);
          v51 = (float *)(v20 + 4 * a3);
          do
          {
            v52 = *v50++;
            v53 = v52;
            *v51++ = v53;
            --v9;
          }
          while (v9);
        }
        else
        {
          v54 = (double *)(v19 + 8 * a5);
          v55 = (float *)(v21 + 4 * a3);
          do
          {
            v56 = *v54++;
            v57 = v56;
            *v55++ = v57;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v38 = (double *)(v18 + 8 * a5);
        v39 = (float *)(*(_QWORD *)(a1 + 16) + 4 * a3);
        do
        {
          v40 = *v38++;
          v41 = v40;
          *v39++ = v41;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x19850C9C4);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError((unint64_t)a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x19850CAF0);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError((unint64_t)a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

float JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<WTF::Vector<float,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, float result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 4;
      v14 = v5 + v11 - 1;
      v15 = **a1;
      do
      {
        *(float *)(v13 + 4 * v15) = (float)*(char *)(v14 + v15);
        --v15;
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v25 = v10 - 4;
      v26 = v5 + v6 - 1;
      v27 = **a1;
      do
      {
        *(float *)(v25 + 4 * v27) = (float)*(char *)(v26 + v27);
        --v27;
      }
      while (v27);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v31 = v10 - 4;
      v32 = v5 + v11 - 1;
      v33 = **a1;
      do
      {
        *(float *)(v31 + 4 * v33) = (float)*(char *)(v32 + v33);
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v22 = v10 - 4;
    v23 = v5 + v6 - 1;
    v24 = **a1;
    do
    {
      *(float *)(v22 + 4 * v24) = (float)*(char *)(v23 + v24);
      --v24;
    }
    while (v24);
  }
  v16 = *a1[4];
  v17 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v18 = v4[2];
      if (v7)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result = *(float *)(v17 - 4 + 4 * v3);
          if (byte_1ECF4C022)
            v20 = v19;
          else
            v20 = v18;
          *(float *)(v20 + 4 * v16 - 4 + 4 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v21 = v18 + 4 * v16 - 4;
        do
        {
          result = *(float *)(v17 - 4 + 4 * v3);
          *(float *)(v21 + 4 * v3--) = result;
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x19850CCB0);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v28 = v4[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v29 = v28;
  v30 = v29 + 4 * v16 - 4;
  do
  {
    result = *(float *)(v17 - 4 + 4 * v3);
    *(float *)(v30 + 4 * v3--) = result;
  }
  while (v3);
  return result;
}

float JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<std::unique_ptr<float [],WTF::UniqueArrayFree<float []>>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = **a1;
  if (v2)
  {
    v3 = a1[3];
    v4 = *a1[2];
    v5 = *(_QWORD *)(*a1[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v4 + v9 - 1;
        v11 = **a1;
        do
        {
          *(float *)(v8 - 4 + 4 * v11) = (float)*(char *)(v10 + v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v21 = v4 + v5 - 1;
        v22 = **a1;
        do
        {
          *(float *)(v8 - 4 + 4 * v22) = (float)*(char *)(v21 + v22);
          --v22;
        }
        while (v22);
      }
      else
      {
        v25 = v4 + v9 - 1;
        v26 = **a1;
        do
        {
          *(float *)(v8 - 4 + 4 * v26) = (float)*(char *)(v25 + v26);
          --v26;
        }
        while (v26);
      }
    }
    else
    {
      v17 = v4 + v5 - 1;
      v18 = **a1;
      do
      {
        *(float *)(v8 - 4 + 4 * v18) = (float)*(char *)(v17 + v18);
        --v18;
      }
      while (v18);
    }
    v12 = *a1[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 4;
        do
        {
          result = *(float *)(v15 + 4 * v2);
          *(float *)(v14 + 4 * v12 - 4 + 4 * v2--) = result;
        }
        while (v2);
      }
      else
      {
        v23 = v8 - 4;
        if (v7)
        {
          v24 = v13 + 4 * v12 - 4;
          do
          {
            result = *(float *)(v23 + 4 * v2);
            *(float *)(v24 + 4 * v2--) = result;
          }
          while (v2);
        }
        else
        {
          do
          {
            result = *(float *)(v23 + 4 * v2);
            *(float *)(v14 + 4 * v12 - 4 + 4 * v2--) = result;
          }
          while (v2);
        }
      }
    }
    else
    {
      v19 = v8 - 4;
      v20 = v13 + 4 * v12 - 4;
      do
      {
        result = *(float *)(v19 + 4 * v2);
        *(float *)(v20 + 4 * v2--) = result;
      }
      while (v2);
    }
  }
  return result;
}

float JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<WTF::Vector<float,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, float result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 4;
      v14 = v11 + 2 * v5 - 2;
      v15 = **a1;
      do
      {
        *(float *)(v13 + 4 * v15) = (float)*(__int16 *)(v14 + 2 * v15);
        --v15;
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v25 = v10 - 4;
      v26 = v6 + 2 * v5 - 2;
      v27 = **a1;
      do
      {
        *(float *)(v25 + 4 * v27) = (float)*(__int16 *)(v26 + 2 * v27);
        --v27;
      }
      while (v27);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v31 = v10 - 4;
      v32 = v11 + 2 * v5 - 2;
      v33 = **a1;
      do
      {
        *(float *)(v31 + 4 * v33) = (float)*(__int16 *)(v32 + 2 * v33);
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v22 = v10 - 4;
    v23 = v6 + 2 * v5 - 2;
    v24 = **a1;
    do
    {
      *(float *)(v22 + 4 * v24) = (float)*(__int16 *)(v23 + 2 * v24);
      --v24;
    }
    while (v24);
  }
  v16 = *a1[4];
  v17 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v18 = v4[2];
      if (v7)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result = *(float *)(v17 - 4 + 4 * v3);
          if (byte_1ECF4C022)
            v20 = v19;
          else
            v20 = v18;
          *(float *)(v20 + 4 * v16 - 4 + 4 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v21 = v18 + 4 * v16 - 4;
        do
        {
          result = *(float *)(v17 - 4 + 4 * v3);
          *(float *)(v21 + 4 * v3--) = result;
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x19850D02CLL);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v28 = v4[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v29 = v28;
  v30 = v29 + 4 * v16 - 4;
  do
  {
    result = *(float *)(v17 - 4 + 4 * v3);
    *(float *)(v30 + 4 * v3--) = result;
  }
  while (v3);
  return result;
}

float JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<std::unique_ptr<float [],WTF::UniqueArrayFree<float []>>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = **a1;
  if (v2)
  {
    v3 = a1[3];
    v4 = *a1[2];
    v5 = *(_QWORD *)(*a1[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + 2 * v4 - 2;
        v11 = **a1;
        do
        {
          *(float *)(v8 - 4 + 4 * v11) = (float)*(__int16 *)(v10 + 2 * v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v21 = v5 + 2 * v4 - 2;
        v22 = **a1;
        do
        {
          *(float *)(v8 - 4 + 4 * v22) = (float)*(__int16 *)(v21 + 2 * v22);
          --v22;
        }
        while (v22);
      }
      else
      {
        v25 = v9 + 2 * v4 - 2;
        v26 = **a1;
        do
        {
          *(float *)(v8 - 4 + 4 * v26) = (float)*(__int16 *)(v25 + 2 * v26);
          --v26;
        }
        while (v26);
      }
    }
    else
    {
      v17 = v5 + 2 * v4 - 2;
      v18 = **a1;
      do
      {
        *(float *)(v8 - 4 + 4 * v18) = (float)*(__int16 *)(v17 + 2 * v18);
        --v18;
      }
      while (v18);
    }
    v12 = *a1[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 4;
        do
        {
          result = *(float *)(v15 + 4 * v2);
          *(float *)(v14 + 4 * v12 - 4 + 4 * v2--) = result;
        }
        while (v2);
      }
      else
      {
        v23 = v8 - 4;
        if (v7)
        {
          v24 = v13 + 4 * v12 - 4;
          do
          {
            result = *(float *)(v23 + 4 * v2);
            *(float *)(v24 + 4 * v2--) = result;
          }
          while (v2);
        }
        else
        {
          do
          {
            result = *(float *)(v23 + 4 * v2);
            *(float *)(v14 + 4 * v12 - 4 + 4 * v2--) = result;
          }
          while (v2);
        }
      }
    }
    else
    {
      v19 = v8 - 4;
      v20 = v13 + 4 * v12 - 4;
      do
      {
        result = *(float *)(v19 + 4 * v2);
        *(float *)(v20 + 4 * v2--) = result;
      }
      while (v2);
    }
  }
  return result;
}

__n128 JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<float,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, __n128 result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 4;
      v14 = v5 + v11 - 1;
      v15 = **a1;
      do
      {
        result.n128_u8[0] = *(_BYTE *)(v14 + v15);
        result.n128_f32[0] = (float)result.n128_u32[0];
        *(_DWORD *)(v13 + 4 * v15--) = result.n128_u32[0];
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v25 = v10 - 4;
      v26 = v5 + v6 - 1;
      v27 = **a1;
      do
      {
        result.n128_u8[0] = *(_BYTE *)(v26 + v27);
        result.n128_f32[0] = (float)result.n128_u32[0];
        *(_DWORD *)(v25 + 4 * v27--) = result.n128_u32[0];
      }
      while (v27);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v31 = v10 - 4;
      v32 = v5 + v11 - 1;
      v33 = **a1;
      do
      {
        result.n128_u8[0] = *(_BYTE *)(v32 + v33);
        result.n128_f32[0] = (float)result.n128_u32[0];
        *(_DWORD *)(v31 + 4 * v33--) = result.n128_u32[0];
      }
      while (v33);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v22 = v10 - 4;
    v23 = v5 + v6 - 1;
    v24 = **a1;
    do
    {
      result.n128_u8[0] = *(_BYTE *)(v23 + v24);
      result.n128_f32[0] = (float)result.n128_u32[0];
      *(_DWORD *)(v22 + 4 * v24--) = result.n128_u32[0];
    }
    while (v24);
  }
  v16 = *a1[4];
  v17 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v18 = v4[2];
      if (v7)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result.n128_u32[0] = *(_DWORD *)(v17 - 4 + 4 * v3);
          if (byte_1ECF4C022)
            v20 = v19;
          else
            v20 = v18;
          *(_DWORD *)(v20 + 4 * v16 - 4 + 4 * v3--) = result.n128_u32[0];
        }
        while (v3);
      }
      else
      {
        v21 = v18 + 4 * v16 - 4;
        do
        {
          result.n128_u32[0] = *(_DWORD *)(v17 - 4 + 4 * v3);
          *(_DWORD *)(v21 + 4 * v3--) = result.n128_u32[0];
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x19850D3A8);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v28 = v4[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v29 = v28;
  v30 = v29 + 4 * v16 - 4;
  do
  {
    result.n128_u32[0] = *(_DWORD *)(v17 - 4 + 4 * v3);
    *(_DWORD *)(v30 + 4 * v3--) = result.n128_u32[0];
  }
  while (v3);
  return result;
}

__n128 JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<float [],WTF::UniqueArrayFree<float []>>>(uint64_t **a1, uint64_t *a2, __n128 result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = **a1;
  if (v3)
  {
    v4 = a1[3];
    v5 = *a1[2];
    v6 = *(_QWORD *)(*a1[1] + 16);
    v7 = qword_1ECF4C038;
    v8 = disablePrimitiveGigacageRequested;
    v9 = *a2;
    if (qword_1ECF4C038)
    {
      v10 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v11 = v5 + v10 - 1;
        v12 = **a1;
        do
        {
          result.n128_u8[0] = *(_BYTE *)(v11 + v12);
          result.n128_f32[0] = (float)result.n128_u32[0];
          *(_DWORD *)(v9 - 4 + 4 * v12--) = result.n128_u32[0];
        }
        while (v12);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v21 = v5 + v6 - 1;
        v22 = **a1;
        do
        {
          result.n128_u8[0] = *(_BYTE *)(v21 + v22);
          result.n128_f32[0] = (float)result.n128_u32[0];
          *(_DWORD *)(v9 - 4 + 4 * v22--) = result.n128_u32[0];
        }
        while (v22);
      }
      else
      {
        v25 = v5 + v10 - 1;
        v26 = **a1;
        do
        {
          result.n128_u8[0] = *(_BYTE *)(v25 + v26);
          result.n128_f32[0] = (float)result.n128_u32[0];
          *(_DWORD *)(v9 - 4 + 4 * v26--) = result.n128_u32[0];
        }
        while (v26);
      }
    }
    else
    {
      v17 = v5 + v6 - 1;
      v18 = **a1;
      do
      {
        result.n128_u8[0] = *(_BYTE *)(v17 + v18);
        result.n128_f32[0] = (float)result.n128_u32[0];
        *(_DWORD *)(v9 - 4 + 4 * v18--) = result.n128_u32[0];
      }
      while (v18);
    }
    v13 = *a1[4];
    v14 = v4[2];
    if (v7)
    {
      v15 = (v14 & 0x3FFFFFFFFLL) + v7;
      if (byte_1ECF4C022)
      {
        v16 = v9 - 4;
        do
        {
          result.n128_u32[0] = *(_DWORD *)(v16 + 4 * v3);
          *(_DWORD *)(v15 + 4 * v13 - 4 + 4 * v3--) = result.n128_u32[0];
        }
        while (v3);
      }
      else
      {
        v23 = v9 - 4;
        if (v8)
        {
          v24 = v14 + 4 * v13 - 4;
          do
          {
            result.n128_u32[0] = *(_DWORD *)(v23 + 4 * v3);
            *(_DWORD *)(v24 + 4 * v3--) = result.n128_u32[0];
          }
          while (v3);
        }
        else
        {
          do
          {
            result.n128_u32[0] = *(_DWORD *)(v23 + 4 * v3);
            *(_DWORD *)(v15 + 4 * v13 - 4 + 4 * v3--) = result.n128_u32[0];
          }
          while (v3);
        }
      }
    }
    else
    {
      v19 = v9 - 4;
      v20 = v14 + 4 * v13 - 4;
      do
      {
        result.n128_u32[0] = *(_DWORD *)(v19 + 4 * v3);
        *(_DWORD *)(v20 + 4 * v3--) = result.n128_u32[0];
      }
      while (v3);
    }
  }
  return result;
}

float JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<WTF::Vector<float,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, float result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 4;
      v14 = v11 + 2 * v5 - 2;
      v15 = **a1;
      do
      {
        LOWORD(result) = *(_WORD *)(v14 + 2 * v15);
        result = (float)LODWORD(result);
        *(float *)(v13 + 4 * v15--) = result;
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v25 = v10 - 4;
      v26 = v6 + 2 * v5 - 2;
      v27 = **a1;
      do
      {
        LOWORD(result) = *(_WORD *)(v26 + 2 * v27);
        result = (float)LODWORD(result);
        *(float *)(v25 + 4 * v27--) = result;
      }
      while (v27);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v31 = v10 - 4;
      v32 = v11 + 2 * v5 - 2;
      v33 = **a1;
      do
      {
        LOWORD(result) = *(_WORD *)(v32 + 2 * v33);
        result = (float)LODWORD(result);
        *(float *)(v31 + 4 * v33--) = result;
      }
      while (v33);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v22 = v10 - 4;
    v23 = v6 + 2 * v5 - 2;
    v24 = **a1;
    do
    {
      LOWORD(result) = *(_WORD *)(v23 + 2 * v24);
      result = (float)LODWORD(result);
      *(float *)(v22 + 4 * v24--) = result;
    }
    while (v24);
  }
  v16 = *a1[4];
  v17 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v18 = v4[2];
      if (v7)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result = *(float *)(v17 - 4 + 4 * v3);
          if (byte_1ECF4C022)
            v20 = v19;
          else
            v20 = v18;
          *(float *)(v20 + 4 * v16 - 4 + 4 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v21 = v18 + 4 * v16 - 4;
        do
        {
          result = *(float *)(v17 - 4 + 4 * v3);
          *(float *)(v21 + 4 * v3--) = result;
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x19850D730);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v28 = v4[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v29 = v28;
  v30 = v29 + 4 * v16 - 4;
  do
  {
    result = *(float *)(v17 - 4 + 4 * v3);
    *(float *)(v30 + 4 * v3--) = result;
  }
  while (v3);
  return result;
}

float JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<std::unique_ptr<float [],WTF::UniqueArrayFree<float []>>>(uint64_t **a1, uint64_t *a2, float result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = **a1;
  if (v3)
  {
    v4 = a1[3];
    v5 = *a1[2];
    v6 = *(_QWORD *)(*a1[1] + 16);
    v7 = qword_1ECF4C038;
    v8 = disablePrimitiveGigacageRequested;
    v9 = *a2;
    if (qword_1ECF4C038)
    {
      v10 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v11 = v10 + 2 * v5 - 2;
        v12 = **a1;
        do
        {
          LOWORD(result) = *(_WORD *)(v11 + 2 * v12);
          result = (float)LODWORD(result);
          *(float *)(v9 - 4 + 4 * v12--) = result;
        }
        while (v12);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v21 = v6 + 2 * v5 - 2;
        v22 = **a1;
        do
        {
          LOWORD(result) = *(_WORD *)(v21 + 2 * v22);
          result = (float)LODWORD(result);
          *(float *)(v9 - 4 + 4 * v22--) = result;
        }
        while (v22);
      }
      else
      {
        v25 = v10 + 2 * v5 - 2;
        v26 = **a1;
        do
        {
          LOWORD(result) = *(_WORD *)(v25 + 2 * v26);
          result = (float)LODWORD(result);
          *(float *)(v9 - 4 + 4 * v26--) = result;
        }
        while (v26);
      }
    }
    else
    {
      v17 = v6 + 2 * v5 - 2;
      v18 = **a1;
      do
      {
        LOWORD(result) = *(_WORD *)(v17 + 2 * v18);
        result = (float)LODWORD(result);
        *(float *)(v9 - 4 + 4 * v18--) = result;
      }
      while (v18);
    }
    v13 = *a1[4];
    v14 = v4[2];
    if (v7)
    {
      v15 = (v14 & 0x3FFFFFFFFLL) + v7;
      if (byte_1ECF4C022)
      {
        v16 = v9 - 4;
        do
        {
          result = *(float *)(v16 + 4 * v3);
          *(float *)(v15 + 4 * v13 - 4 + 4 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v23 = v9 - 4;
        if (v8)
        {
          v24 = v14 + 4 * v13 - 4;
          do
          {
            result = *(float *)(v23 + 4 * v3);
            *(float *)(v24 + 4 * v3--) = result;
          }
          while (v3);
        }
        else
        {
          do
          {
            result = *(float *)(v23 + 4 * v3);
            *(float *)(v15 + 4 * v13 - 4 + 4 * v3--) = result;
          }
          while (v3);
        }
      }
    }
    else
    {
      v19 = v9 - 4;
      v20 = v14 + 4 * v13 - 4;
      do
      {
        result = *(float *)(v19 + 4 * v3);
        *(float *)(v20 + 4 * v3--) = result;
      }
      while (v3);
    }
  }
  return result;
}

float JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<WTF::Vector<float,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, float result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 4;
      v14 = v11 + 8 * v5 - 8;
      v15 = **a1;
      do
      {
        v16 = *(double *)(v14 + 8 * v15);
        *(float *)(v13 + 4 * v15--) = v16;
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v27 = v10 - 4;
      v28 = v6 + 8 * v5 - 8;
      v29 = **a1;
      do
      {
        v30 = *(double *)(v28 + 8 * v29);
        *(float *)(v27 + 4 * v29--) = v30;
      }
      while (v29);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v34 = v10 - 4;
      v35 = v11 + 8 * v5 - 8;
      v36 = **a1;
      do
      {
        v37 = *(double *)(v35 + 8 * v36);
        *(float *)(v34 + 4 * v36--) = v37;
      }
      while (v36);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v23 = v10 - 4;
    v24 = v6 + 8 * v5 - 8;
    v25 = **a1;
    do
    {
      v26 = *(double *)(v24 + 8 * v25);
      *(float *)(v23 + 4 * v25--) = v26;
    }
    while (v25);
  }
  v17 = *a1[4];
  v18 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v19 = v4[2];
      if (v7)
      {
        v20 = (v19 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result = *(float *)(v18 - 4 + 4 * v3);
          if (byte_1ECF4C022)
            v21 = v20;
          else
            v21 = v19;
          *(float *)(v21 + 4 * v17 - 4 + 4 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v22 = v19 + 4 * v17 - 4;
        do
        {
          result = *(float *)(v18 - 4 + 4 * v3);
          *(float *)(v22 + 4 * v3--) = result;
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x19850DAACLL);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v31 = v4[2];
  v32 = (v31 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v32 = v31;
  v33 = v32 + 4 * v17 - 4;
  do
  {
    result = *(float *)(v18 - 4 + 4 * v3);
    *(float *)(v33 + 4 * v3--) = result;
  }
  while (v3);
  return result;
}

float JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float64Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float64Adaptor&)#1}::operator()<std::unique_ptr<float [],WTF::UniqueArrayFree<float []>>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float result;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;

  v2 = **a1;
  if (v2)
  {
    v3 = a1[3];
    v4 = *a1[2];
    v5 = *(_QWORD *)(*a1[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + 8 * v4 - 8;
        v11 = **a1;
        do
        {
          v12 = *(double *)(v10 + 8 * v11);
          *(float *)(v8 - 4 + 4 * v11--) = v12;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v23 = v5 + 8 * v4 - 8;
        v24 = **a1;
        do
        {
          v25 = *(double *)(v23 + 8 * v24);
          *(float *)(v8 - 4 + 4 * v24--) = v25;
        }
        while (v24);
      }
      else
      {
        v28 = v9 + 8 * v4 - 8;
        v29 = **a1;
        do
        {
          v30 = *(double *)(v28 + 8 * v29);
          *(float *)(v8 - 4 + 4 * v29--) = v30;
        }
        while (v29);
      }
    }
    else
    {
      v18 = v5 + 8 * v4 - 8;
      v19 = **a1;
      do
      {
        v20 = *(double *)(v18 + 8 * v19);
        *(float *)(v8 - 4 + 4 * v19--) = v20;
      }
      while (v19);
    }
    v13 = *a1[4];
    v14 = v3[2];
    if (v6)
    {
      v15 = (v14 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v16 = v8 - 4;
        do
        {
          result = *(float *)(v16 + 4 * v2);
          *(float *)(v15 + 4 * v13 - 4 + 4 * v2--) = result;
        }
        while (v2);
      }
      else
      {
        v26 = v8 - 4;
        if (v7)
        {
          v27 = v14 + 4 * v13 - 4;
          do
          {
            result = *(float *)(v26 + 4 * v2);
            *(float *)(v27 + 4 * v2--) = result;
          }
          while (v2);
        }
        else
        {
          do
          {
            result = *(float *)(v26 + 4 * v2);
            *(float *)(v15 + 4 * v13 - 4 + 4 * v2--) = result;
          }
          while (v2);
        }
      }
    }
    else
    {
      v21 = v8 - 4;
      v22 = v14 + 4 * v13 - 4;
      do
      {
        result = *(float *)(v21 + 4 * v2);
        *(float *)(v22 + 4 * v2--) = result;
      }
      while (v2);
    }
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setIndex(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  float v12;
  double v13;
  uint64_t v14;
  _BOOL8 result;
  uint64_t v16;
  int v17;
  JSC::JSObject *v18;

  v11 = *((_QWORD *)a2 + 7);
  v18 = (JSC::JSObject *)a4;
  if (a4 < 0xFFFE000000000000)
  {
    if (a4 >> 49)
      *(_QWORD *)&v13 = a4 - 0x2000000000000;
    else
      JSC::JSValue::toNumberSlowCase(&v18, a2, a3, a4, a5, a6, a7, a8, a9);
    v12 = v13;
  }
  else
  {
    v12 = (float)(int)a4;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v17 = *(_DWORD *)(v11 + 80);
    if ((v17 & 0x27) != 0 && (v17 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) == 0
    || (v14 = *(_QWORD *)(a1 + 16)) != 0
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    result = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::inBounds(a1, a3);
    if (!result)
      return result;
    v16 = *(_QWORD *)(a1 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v16 = (v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(float *)(v16 + 4 * a3) = v12;
  }
  return 1;
}

JSC::JSCell *JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createWithFastVector(JSC::Heap **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v9;
  JSC::JSCell *v10;
  _QWORD v12[4];
  char v13;
  uint64_t v14;

  v12[0] = a2;
  v12[1] = a4;
  v12[2] = a3;
  v12[3] = 0;
  v13 = 16;
  v14 = 0;
  if (a3 >= 0x3E9 || !a2)
  {
    __break(0xC471u);
    JUMPOUT(0x19850DE4CLL);
  }
  v9 = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(a1, (JSC::VM *)0x30, a3, a4, a5, a6, a7, a8);
  v10 = JSC::JSArrayBufferView::JSArrayBufferView(v9, (uint64_t)a1, (uint64_t)v12);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v10, (JSC::VM *)a1);
  return v9;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::Heap *v17;
  unint64_t SlowCase;
  JSC::JSCell *v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  uint64_t v27;

  v9 = *((_QWORD *)a1 + 7);
  v27 = v9;
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v26, (JSC *)v9, a2, a3, 8, 0, a7, a8);
  if (!v26[0])
  {
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v27);
    return 0;
  }
  v17 = *(JSC::Heap **)(v9 + 40472);
  if (!v17)
    v17 = JSC::GCClient::Heap::float64ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
  SlowCase = *((_QWORD *)v17 + 3);
  if (SlowCase >= *((_QWORD *)v17 + 4))
  {
    SlowCase = *((_QWORD *)v17 + 5);
    if ((SlowCase & 1) != 0)
    {
      v22 = (uint64_t)v17;
      JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v22, v9 + 192, 48, 0, 0, v23, v24, v25);
      goto LABEL_6;
    }
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v17 + 6);
    *((_QWORD *)v17 + 4) = SlowCase + HIDWORD(v21);
    *((_QWORD *)v17 + 5) = SlowCase + (int)v21;
  }
  *((_QWORD *)v17 + 3) = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v19 = JSC::JSArrayBufferView::JSArrayBufferView((JSC::JSCell *)SlowCase, v9, (uint64_t)v26);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v19, (JSC::VM *)v9);
  return SlowCase;
}

JSC::JSCell *JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createUninitialized(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::JSCell *v17;
  JSC::JSCell *v18;
  unint64_t OutOfMemoryError;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  JSC::Exception *v26;
  _QWORD v28[6];

  v9 = (JSC *)*((_QWORD *)a1 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v28, v9, a2, a3, 8, 1, a7, a8);
  if (v28[0])
  {
    v17 = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>((JSC::Heap **)v9, (JSC::VM *)0x30, v11, v12, v13, v14, v15, v16);
    v18 = JSC::JSArrayBufferView::JSArrayBufferView(v17, (uint64_t)v9, (uint64_t)v28);
    JSC::JSArrayBufferView::finishCreation((unint64_t)v18, v9);
  }
  else
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v10);
    v26 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v26 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)OutOfMemoryError, 0, v20, v21, v22, v23, v24);
    }
    JSC::VM::throwException(v9, a1, v26, v25, v20, v21, v22, v23, v24);
    return 0;
  }
  return v17;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromTypedArray(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD v9[5];
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v12 = a3;
  v13 = a2;
  v10 = a6;
  v11 = a5;
  v9[0] = &v10;
  v9[1] = a1;
  v9[2] = &v13;
  v9[3] = &v12;
  v9[4] = &v11;
  switch(*(_BYTE *)(a4 + 5))
  {
    case '\'':
      result = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '(':
      result = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ')':
      result = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '*':
      result = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '+':
      result = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case ',':
      result = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '-':
      result = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '.':
      result = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '/':
      result = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()((uint64_t)v9, a4, a3, a4, a5, a6, a7, a8);
      break;
    case '0':
      result = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '1':
      result = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19850E0B8);
  }
  return result;
}

JSC::JSCell *JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  JSC *v19;
  JSC::JSGlobalObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::JSCell *v27;
  JSC::JSCell *v28;
  int8x16_t v29;
  unint64_t v30;
  unint64_t OutOfMemoryError;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  JSC::Exception *v38;
  int v40;
  char v41;
  uint64_t v42;
  char *v43;
  _OWORD v44[4];
  uint64_t v45;
  uint64_t v46;
  JSC **v47;
  _QWORD v48[6];

  v9 = *((_QWORD *)a1 + 7);
  v45 = 0;
  v46 = v9;
  v41 = 0;
  v42 = 0x800000000;
  v43 = (char *)v44 + 8;
  memset(v44, 0, sizeof(v44));
  v47 = (JSC **)a1;
  v48[0] = &v41;
  v48[1] = &v47;
  v48[2] = &v46;
  JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(a1, (uint64_t)this, a4, (uint64_t)v48, a5, a6, a7, a8);
  v17 = v46;
  if (*(_DWORD *)(v46 + 80))
  {
    v40 = *(_DWORD *)(v46 + 80);
    if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v46 + 64), 7u, v11, v12, v13, v14, v15, v16);
    if (*(_QWORD *)(v17 + 16))
      goto LABEL_12;
  }
  v18 = (JSC::JSGlobalObject *)v47;
  v19 = v47[7];
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v48, v19, a2, v42, 8, 1, v15, v16);
  if (!v48[0])
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v18, v20);
    v38 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v38 = (JSC::Exception *)JSC::Exception::create((uint64_t)v19, (JSC::VM *)OutOfMemoryError, 0, v32, v33, v34, v35, v36);
    }
    JSC::VM::throwException(v19, v18, v38, v37, v32, v33, v34, v35, v36);
LABEL_12:
    v27 = 0;
    goto LABEL_13;
  }
  v27 = (JSC::JSCell *)JSC::allocateCell<JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>>((JSC::Heap **)v19, (JSC::VM *)0x30, v21, v22, v23, v24, v25, v26);
  v28 = JSC::JSArrayBufferView::JSArrayBufferView(v27, (uint64_t)v19, (uint64_t)v48);
  JSC::JSArrayBufferView::finishCreation((unint64_t)v28, v19);
  if (v27 && (_DWORD)v42)
  {
    v30 = 0;
    while ((JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setIndex((uint64_t)v27, (JSC::JSGlobalObject *)v47, v30, *(_QWORD *)&v43[8 * v30], v13, v14, v15, v16, v29) & 1) != 0)
    {
      if (++v30 >= v42)
        goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v42, v10, v11, v12, v13, v14, v15, v16);
  return v27;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromArrayLike(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v14;
  _BOOL8 result;
  const JSC::PropertyTable *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  double *v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x16_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int8x16_t v65;
  int v66;
  uint64_t v67;
  double *v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;

  v8 = a6;
  v9 = a5;
  v14 = *(_QWORD *)(a2 + 56);
  result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, a6, a5, a6, a7, a8);
  if (!result)
    return result;
  if (v8 >= 0xFFFFFFFF)
    v21 = 0xFFFFFFFFLL;
  else
    v21 = v8;
  if (v21 >= v9)
    v22 = v21 - v9;
  else
    v22 = 0;
  if (!a4)
    goto LABEL_66;
  v23 = *(unsigned __int8 *)(a4 + 5);
  v24 = (v23 & 0xFE) == 0x24 && v22 == v8;
  if (!v24 || v23 != 36)
    goto LABEL_66;
  v25 = *(_BYTE *)(a4 + 4);
  v26 = (v25 & 0xE) != 0 ? *(unsigned int *)(*(_QWORD *)(a4 + 8) - 8) : 0;
  if (v8 + v9 > v26)
    goto LABEL_66;
  v27 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28);
  v28 = *(_QWORD *)(v27 + 2216);
  v29 = (v28 & 1) != 0 ? (v28 >> 1) & 3 : *(unsigned __int8 *)(v28 + 4);
  if (v29 == 2 || *(_BYTE *)(*(_QWORD *)(v27 + 2048) + 4) == 2)
    goto LABEL_66;
  v30 = *(_QWORD *)(v27 + 2304);
  v31 = (v30 & 1) != 0 ? (v30 >> 1) & 3 : *(unsigned __int8 *)(v30 + 4);
  if (v31 == 2)
    goto LABEL_66;
  v32 = *(unsigned __int8 *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 8);
  v33 = (v32 >> 1) & 7;
  if ((v32 & 0x10) != 0)
    v33 = ((v32 & 0xE) + 10) >> 1;
  v34 = *(_DWORD *)(v27 + 4 * v33 + 852);
  if (v34)
    v35 = 16 * (v34 & 0xFFFFFFFE);
  else
    v35 = 0;
  if (v35 != 16 * (*(_DWORD *)a4 & 0xFFFFFFFE))
  {
    if ((v32 & 0x20) != 0)
      goto LABEL_66;
    v49 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x30);
    if (!v49)
      v49 = *(_QWORD *)(a4 + 16);
    if (v49 != *(_QWORD *)(v27 + 672)
      || JSC::JSObject::getDirectOffset((_DWORD *)a4, *(JSC::VM **)(v27 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 56) + 41952) + 2712), v16, v17, v18, v19, v20) != -1)
    {
      goto LABEL_66;
    }
    v25 = *(_BYTE *)(a4 + 4);
  }
  v36 = v25 & 0xE;
  if (v36 == 6)
  {
    v43 = *(_QWORD *)(a1 + 16);
    if (v43 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v43 = (v43 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    if ((_DWORD)v8)
    {
      v44 = (_QWORD *)(v43 + 8 * a3);
      v45 = (_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * v9);
      if ((_DWORD)v8 == 1)
        *v44 = *v45;
      else
        memcpy(v44, v45, 8 * v8);
    }
    return 1;
  }
  if (v36 != 4)
  {
LABEL_66:
    if (v21 <= v9)
    {
LABEL_77:
      if (v22 >= v8)
        return 1;
      while (1)
      {
        v60 = JSC::JSObject::get((JSC::JSObject *)a4, (uint64_t ***)a2, (const WTF::StringImpl *)(v9 + v22), (uint64_t)v16, v17, v18, v19, v20);
        if (*(_DWORD *)(v14 + 80))
        {
          v66 = *(_DWORD *)(v14 + 80);
          if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
          {
            v72 = v60;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v59, v60, v61, v62, v63, v64);
            v60 = v72;
          }
          if (*(_QWORD *)(v14 + 16))
            break;
        }
        if ((JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, a3 + v22, v60, v61, v62, v63, v64, v65) & 1) == 0)break;
        if (++v22 >= v8)
          return 1;
      }
    }
    else
    {
      v50 = 0;
      while (1)
      {
        v52 = JSC::JSObject::get((JSC::JSObject *)a4, (JSC::JSGlobalObject *)a2, (v9 + v50));
        if (*(_DWORD *)(v14 + 80))
        {
          v58 = *(_DWORD *)(v14 + 80);
          if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
          {
            v71 = v52;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v51, v52, v53, v54, v55, v56);
            v52 = v71;
          }
          if (*(_QWORD *)(v14 + 16))
            break;
        }
        if ((JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setIndex(a1, (JSC::JSGlobalObject *)a2, a3 + v50, v52, v53, v54, v55, v56, v57) & 1) == 0)break;
        if (++v50 >= v22)
          goto LABEL_77;
      }
    }
    return 0;
  }
  if (v21 <= v9)
    return 1;
  v37 = *(_QWORD *)(a4 + 8);
  if (disablePrimitiveGigacageRequested)
  {
    v38 = qword_1ECF4C038;
    if (qword_1ECF4C038)
    {
      v39 = 8 * a3;
      result = 1;
      do
      {
        v40 = *(_QWORD *)(v37 + 8 * v9);
        if (v40)
        {
          v41 = (double)(int)v40;
          v42 = *(_QWORD *)(a1 + 16);
          if (byte_1ECF4C022)
            v42 = (v42 & 0x3FFFFFFFFLL) + v38;
        }
        else
        {
          v42 = *(_QWORD *)(a1 + 16);
          v41 = NAN;
          if (byte_1ECF4C022)
            v42 = (v42 & 0x3FFFFFFFFLL) + v38;
        }
        *(double *)(v42 + v39) = v41;
        v39 += 8;
        LODWORD(v9) = v9 + 1;
        --v8;
      }
      while (v8);
    }
    else
    {
      v46 = (double *)(*(_QWORD *)(a1 + 16) + 8 * a3);
      result = 1;
      do
      {
        v47 = *(_QWORD *)(v37 + 8 * v9);
        v48 = (double)(int)v47;
        if (!v47)
          v48 = NAN;
        *v46++ = v48;
        LODWORD(v9) = v9 + 1;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    v67 = *(_QWORD *)(a1 + 16);
    if (qword_1ECF4C038)
      v67 = (v67 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v68 = (double *)(v67 + 8 * a3);
    result = 1;
    do
    {
      v69 = *(_QWORD *)(v37 + 8 * v9);
      v70 = (double)(int)v69;
      if (!v69)
        v70 = NAN;
      *v68++ = v70;
      LODWORD(v9) = v9 + 1;
      --v8;
    }
    while (v8);
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE v22[16];

  v10 = *(uint64_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v22[0] = 0;
    v22[8] = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v22, a3, a4, a5, a6, a7, a8);
    if (v17)
      v12 = v16;
    else
      v12 = 0;
    v13 = *(uint64_t **)a1;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(uint64_t **)a1;
  }
  if (v12 >= *v10)
    v14 = *v10;
  else
    v14 = v12;
  *v13 = v14;
  v15 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(v11, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), v14, a5, a6, a7, a8);
  if (v15)
  {
    if (*(unsigned __int8 *)(a2 + 5) - 47 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x19850E81CLL);
    }
    v18 = *(_QWORD *)(v11 + 16);
    if (v18 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v19 = (void *)(v18 + 8 * **(_QWORD **)(a1 + 24));
    v20 = *(_QWORD *)(a2 + 16);
    if (v20 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v20 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memmove(v19, (const void *)(v20 + 8 * **(_QWORD **)(a1 + 32)), 8 * **(_QWORD **)a1);
  }
  return v15;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  double *v23;
  int v24;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  char *v37;
  double *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char *v48;
  double *v49;
  int v50;
  char *v51;
  double *v52;
  int v53;
  WTF *v54;
  int v55;
  int v56;
  _BYTE v57[256];
  uint64_t *v58[5];
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v8 = a7;
  v9 = a6;
  v61 = a4;
  v62 = a3;
  v60 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v54) = 0;
    LOBYTE(v55) = 0;
    v40 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v54, a3, a4, a5, a6, a7, a8);
    if (v43)
      v44 = v40;
    else
      v44 = 0;
    v45 = *(_BYTE *)(a4 + 40) & 7;
    if (v44 < v9)
      v9 = v44;
    v59 = v9;
    if (v45 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v54) = 0;
      LOBYTE(v55) = 0;
      v46 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v54, v41, v42, a5, a6, a7, a8);
      if (v47)
        v15 = v46;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v59 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19850EB78);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v58[0] = (uint64_t *)&v59;
      v58[1] = &v61;
      v58[2] = &v60;
      v58[3] = (uint64_t *)a1;
      v58[4] = &v62;
      if (v9 >> 29)
      {
        if (v9 >> 61)
        {
          __break(0xC471u);
          JUMPOUT(0x19850EBB0);
        }
        if ((v9 & 0x1C00000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850EBB8);
        }
        v35 = (WTF *)(v9 << 6);
        v36 = (void *)WTF::fastMalloc(v35);
        bzero(v36, (size_t)v35);
        v54 = (WTF *)v36;
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(v58, (uint64_t *)&v54);
        v34 = v54;
        v54 = 0;
        if (v34)
          goto LABEL_27;
      }
      else
      {
        v54 = (WTF *)v57;
        v55 = 32;
        v56 = v9;
        if (v9 >= 0x21)
        {
          v26 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
          v55 = v9;
          v54 = v26;
        }
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v58, (uint64_t *)&v54, v17);
        v34 = v54;
        if (v57 != (_BYTE *)v54 && v54)
        {
          v54 = 0;
          v55 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
    else if (v9)
    {
      v18 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v22 = (char *)(v19 + a5);
          v23 = (double *)(v21 + 8 * a3);
          do
          {
            v24 = *v22++;
            *v23++ = (double)v24;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v48 = (char *)(v18 + a5);
          v49 = (double *)(v20 + 8 * a3);
          do
          {
            v50 = *v48++;
            *v49++ = (double)v50;
            --v9;
          }
          while (v9);
        }
        else
        {
          v51 = (char *)(v19 + a5);
          v52 = (double *)(v21 + 8 * a3);
          do
          {
            v53 = *v51++;
            *v52++ = (double)v53;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v37 = (char *)(v18 + a5);
        v38 = (double *)(*(_QWORD *)(a1 + 16) + 8 * a3);
        do
        {
          v39 = *v37++;
          *v38++ = (double)v39;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  double *v23;
  int v24;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  __int16 *v37;
  double *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  __int16 *v48;
  double *v49;
  int v50;
  __int16 *v51;
  double *v52;
  int v53;
  WTF *v54;
  int v55;
  int v56;
  _BYTE v57[256];
  uint64_t *v58[5];
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v8 = a7;
  v9 = a6;
  v61 = a4;
  v62 = a3;
  v60 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v54) = 0;
    LOBYTE(v55) = 0;
    v40 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v54, a3, a4, a5, a6, a7, a8);
    if (v43)
      v44 = v40;
    else
      v44 = 0;
    v45 = *(_BYTE *)(a4 + 40) & 7;
    if (v44 < v9)
      v9 = v44;
    v59 = v9;
    if (v45 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v54) = 0;
      LOBYTE(v55) = 0;
      v46 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v54, v41, v42, a5, a6, a7, a8);
      if (v47)
        v15 = v46;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v59 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19850EE68);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v58[0] = (uint64_t *)&v59;
      v58[1] = &v61;
      v58[2] = &v60;
      v58[3] = (uint64_t *)a1;
      v58[4] = &v62;
      if (v9 >> 29)
      {
        if (v9 >> 61)
        {
          __break(0xC471u);
          JUMPOUT(0x19850EEA0);
        }
        if ((v9 & 0x1C00000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850EEA8);
        }
        v35 = (WTF *)(v9 << 6);
        v36 = (void *)WTF::fastMalloc(v35);
        bzero(v36, (size_t)v35);
        v54 = (WTF *)v36;
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(v58, (uint64_t *)&v54);
        v34 = v54;
        v54 = 0;
        if (v34)
          goto LABEL_27;
      }
      else
      {
        v54 = (WTF *)v57;
        v55 = 32;
        v56 = v9;
        if (v9 >= 0x21)
        {
          v26 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
          v55 = v9;
          v54 = v26;
        }
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v58, (uint64_t *)&v54, v17);
        v34 = v54;
        if (v57 != (_BYTE *)v54 && v54)
        {
          v54 = 0;
          v55 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
    else if (v9)
    {
      v18 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v22 = (__int16 *)(v19 + 2 * a5);
          v23 = (double *)(v21 + 8 * a3);
          do
          {
            v24 = *v22++;
            *v23++ = (double)v24;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v48 = (__int16 *)(v18 + 2 * a5);
          v49 = (double *)(v20 + 8 * a3);
          do
          {
            v50 = *v48++;
            *v49++ = (double)v50;
            --v9;
          }
          while (v9);
        }
        else
        {
          v51 = (__int16 *)(v19 + 2 * a5);
          v52 = (double *)(v21 + 8 * a3);
          do
          {
            v53 = *v51++;
            *v52++ = (double)v53;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v37 = (__int16 *)(v18 + 2 * a5);
        v38 = (double *)(*(_QWORD *)(a1 + 16) + 8 * a3);
        do
        {
          v39 = *v37++;
          *v38++ = (double)v39;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  double *v27;
  int v28;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  int *v41;
  double *v42;
  int v43;
  unint64_t v44;
  char v45;
  int *v46;
  double *v47;
  int v48;
  int *v49;
  double *v50;
  int v51;
  WTF *v52;
  int v53;
  int v54;
  _BYTE v55[256];
  uint64_t *v56[5];
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v8 = a7;
  v9 = a6;
  v59 = a4;
  v60 = a3;
  v58 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v52) = 0;
    LOBYTE(v53) = 0;
    v44 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v52, a3, a4, a5, a6, a7, a8);
    if (v45)
      v15 = v44;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
  }
  if (v15 < v9)
    v9 = v15;
  v57 = v9;
  if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v9, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    JUMPOUT(0x19850F124);
  }
  v20 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, v16, v17, v18, v19);
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v56[0] = (uint64_t *)&v57;
      v56[1] = &v59;
      v56[2] = &v58;
      v56[3] = (uint64_t *)a1;
      v56[4] = &v60;
      if (v9 >> 29)
      {
        if (v9 >> 61)
        {
          __break(0xC471u);
          JUMPOUT(0x19850F15CLL);
        }
        if ((v9 & 0x1C00000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850F164);
        }
        v39 = (WTF *)(v9 << 6);
        v40 = (void *)WTF::fastMalloc(v39);
        bzero(v40, (size_t)v39);
        v52 = (WTF *)v40;
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(v56, (uint64_t *)&v52);
        v38 = v52;
        v52 = 0;
        if (v38)
          goto LABEL_26;
      }
      else
      {
        v52 = (WTF *)v55;
        v53 = 32;
        v54 = v9;
        if (v9 >= 0x21)
        {
          v30 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
          v53 = v9;
          v52 = v30;
        }
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v56, (uint64_t *)&v52, v21);
        v38 = v52;
        if (v55 != (_BYTE *)v52 && v52)
        {
          v52 = 0;
          v53 = 0;
LABEL_26:
          WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
        }
      }
    }
    else if (v9)
    {
      v22 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v23 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v24 = *(_QWORD *)(a1 + 16);
        v25 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v26 = (int *)(v23 + 4 * a5);
          v27 = (double *)(v25 + 8 * a3);
          do
          {
            v28 = *v26++;
            *v27++ = (double)v28;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v46 = (int *)(v22 + 4 * a5);
          v47 = (double *)(v24 + 8 * a3);
          do
          {
            v48 = *v46++;
            *v47++ = (double)v48;
            --v9;
          }
          while (v9);
        }
        else
        {
          v49 = (int *)(v23 + 4 * a5);
          v50 = (double *)(v25 + 8 * a3);
          do
          {
            v51 = *v49++;
            *v50++ = (double)v51;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v41 = (int *)(v22 + 4 * a5);
        v42 = (double *)(*(_QWORD *)(a1 + 16) + 8 * a3);
        do
        {
          v43 = *v41++;
          *v42++ = (double)v43;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  __n64 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  double *v27;
  unsigned int v28;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  __n64 v41;
  unsigned __int8 *v42;
  double *v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  unsigned __int8 *v47;
  double *v48;
  unsigned int v49;
  unsigned __int8 *v50;
  double *v51;
  unsigned int v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[256];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v46)
      v15 = v45;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
  }
  if (v15 < v9)
    v9 = v15;
  v58 = v9;
  if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v9, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    JUMPOUT(0x19850F3D8);
  }
  v20 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, v16, v17, v18, v19);
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 29)
      {
        if (v9 >> 61)
        {
          __break(0xC471u);
          JUMPOUT(0x19850F410);
        }
        if ((v9 & 0x1C00000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850F418);
        }
        v39 = (WTF *)(v9 << 6);
        v40 = (void *)WTF::fastMalloc(v39);
        bzero(v40, (size_t)v39);
        v53 = (WTF *)v40;
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(v57, (uint64_t *)&v53, v41);
        v38 = v53;
        v53 = 0;
        if (v38)
          goto LABEL_26;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v30 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
          v54 = v9;
          v53 = v30;
        }
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53, v21);
        v38 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_26:
          WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
        }
      }
    }
    else if (v9)
    {
      v22 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v23 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v24 = *(_QWORD *)(a1 + 16);
        v25 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v26 = (unsigned __int8 *)(v23 + a5);
          v27 = (double *)(v25 + 8 * a3);
          do
          {
            v28 = *v26++;
            *v27++ = (double)v28;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (unsigned __int8 *)(v22 + a5);
          v48 = (double *)(v24 + 8 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = (double)v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (unsigned __int8 *)(v23 + a5);
          v51 = (double *)(v25 + 8 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = (double)v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v42 = (unsigned __int8 *)(v22 + a5);
        v43 = (double *)(*(_QWORD *)(a1 + 16) + 8 * a3);
        do
        {
          v44 = *v42++;
          *v43++ = (double)v44;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  __n64 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  double *v23;
  unsigned int v24;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  __n64 v37;
  unsigned __int8 *v38;
  double *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  unsigned __int8 *v49;
  double *v50;
  unsigned int v51;
  unsigned __int8 *v52;
  double *v53;
  unsigned int v54;
  WTF *v55;
  int v56;
  int v57;
  _BYTE v58[256];
  uint64_t *v59[5];
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v8 = a7;
  v9 = a6;
  v62 = a4;
  v63 = a3;
  v61 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v55) = 0;
    LOBYTE(v56) = 0;
    v41 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, a3, a4, a5, a6, a7, a8);
    if (v44)
      v45 = v41;
    else
      v45 = 0;
    v46 = *(_BYTE *)(a4 + 40) & 7;
    if (v45 < v9)
      v9 = v45;
    v60 = v9;
    if (v46 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v55) = 0;
      LOBYTE(v56) = 0;
      v47 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, v42, v43, a5, a6, a7, a8);
      if (v48)
        v15 = v47;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v60 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19850F6C0);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v59[0] = (uint64_t *)&v60;
      v59[1] = &v62;
      v59[2] = &v61;
      v59[3] = (uint64_t *)a1;
      v59[4] = &v63;
      if (v9 >> 29)
      {
        if (v9 >> 61)
        {
          __break(0xC471u);
          JUMPOUT(0x19850F6F8);
        }
        if ((v9 & 0x1C00000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850F700);
        }
        v35 = (WTF *)(v9 << 6);
        v36 = (void *)WTF::fastMalloc(v35);
        bzero(v36, (size_t)v35);
        v55 = (WTF *)v36;
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(v59, (uint64_t *)&v55, v37);
        v34 = v55;
        v55 = 0;
        if (v34)
          goto LABEL_27;
      }
      else
      {
        v55 = (WTF *)v58;
        v56 = 32;
        v57 = v9;
        if (v9 >= 0x21)
        {
          v26 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
          v56 = v9;
          v55 = v26;
        }
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v59, (uint64_t *)&v55, v17);
        v34 = v55;
        if (v58 != (_BYTE *)v55 && v55)
        {
          v55 = 0;
          v56 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
    else if (v9)
    {
      v18 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v22 = (unsigned __int8 *)(v19 + a5);
          v23 = (double *)(v21 + 8 * a3);
          do
          {
            v24 = *v22++;
            *v23++ = (double)v24;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v49 = (unsigned __int8 *)(v18 + a5);
          v50 = (double *)(v20 + 8 * a3);
          do
          {
            v51 = *v49++;
            *v50++ = (double)v51;
            --v9;
          }
          while (v9);
        }
        else
        {
          v52 = (unsigned __int8 *)(v19 + a5);
          v53 = (double *)(v21 + 8 * a3);
          do
          {
            v54 = *v52++;
            *v53++ = (double)v54;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v38 = (unsigned __int8 *)(v18 + a5);
        v39 = (double *)(*(_QWORD *)(a1 + 16) + 8 * a3);
        do
        {
          v40 = *v38++;
          *v39++ = (double)v40;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  double *v23;
  unsigned int v24;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  void *v36;
  double v37;
  unsigned __int16 *v38;
  double *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  unsigned __int16 *v49;
  double *v50;
  unsigned int v51;
  unsigned __int16 *v52;
  double *v53;
  unsigned int v54;
  WTF *v55;
  int v56;
  int v57;
  _BYTE v58[256];
  uint64_t *v59[5];
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v8 = a7;
  v9 = a6;
  v62 = a4;
  v63 = a3;
  v61 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v55) = 0;
    LOBYTE(v56) = 0;
    v41 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, a3, a4, a5, a6, a7, a8);
    if (v44)
      v45 = v41;
    else
      v45 = 0;
    v46 = *(_BYTE *)(a4 + 40) & 7;
    if (v45 < v9)
      v9 = v45;
    v60 = v9;
    if (v46 <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      LOBYTE(v55) = 0;
      LOBYTE(v56) = 0;
      v47 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v55, v42, v43, a5, a6, a7, a8);
      if (v48)
        v15 = v47;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
    v60 = v9;
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x19850F9B0);
  }
  v16 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (v16)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v59[0] = (uint64_t *)&v60;
      v59[1] = &v62;
      v59[2] = &v61;
      v59[3] = (uint64_t *)a1;
      v59[4] = &v63;
      if (v9 >> 29)
      {
        if (v9 >> 61)
        {
          __break(0xC471u);
          JUMPOUT(0x19850F9E8);
        }
        if ((v9 & 0x1C00000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850F9F0);
        }
        v35 = (WTF *)(v9 << 6);
        v36 = (void *)WTF::fastMalloc(v35);
        bzero(v36, (size_t)v35);
        v55 = (WTF *)v36;
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(v59, (uint64_t *)&v55, v37);
        v34 = v55;
        v55 = 0;
        if (v34)
          goto LABEL_27;
      }
      else
      {
        v55 = (WTF *)v58;
        v56 = 32;
        v57 = v9;
        if (v9 >= 0x21)
        {
          v26 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
          v56 = v9;
          v55 = v26;
        }
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v59, (uint64_t *)&v55, v17);
        v34 = v55;
        if (v58 != (_BYTE *)v55 && v55)
        {
          v55 = 0;
          v56 = 0;
LABEL_27:
          WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
        }
      }
    }
    else if (v9)
    {
      v18 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v20 = *(_QWORD *)(a1 + 16);
        v21 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v22 = (unsigned __int16 *)(v19 + 2 * a5);
          v23 = (double *)(v21 + 8 * a3);
          do
          {
            v24 = *v22++;
            *v23++ = (double)v24;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v49 = (unsigned __int16 *)(v18 + 2 * a5);
          v50 = (double *)(v20 + 8 * a3);
          do
          {
            v51 = *v49++;
            *v50++ = (double)v51;
            --v9;
          }
          while (v9);
        }
        else
        {
          v52 = (unsigned __int16 *)(v19 + 2 * a5);
          v53 = (double *)(v21 + 8 * a3);
          do
          {
            v54 = *v52++;
            *v53++ = (double)v54;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v38 = (unsigned __int16 *)(v18 + 2 * a5);
        v39 = (double *)(*(_QWORD *)(a1 + 16) + 8 * a3);
        do
        {
          v40 = *v38++;
          *v39++ = (double)v40;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v16;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  double *v27;
  unsigned int v28;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  double v41;
  unsigned int *v42;
  double *v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  unsigned int *v47;
  double *v48;
  unsigned int v49;
  unsigned int *v50;
  double *v51;
  unsigned int v52;
  WTF *v53;
  int v54;
  int v55;
  _BYTE v56[256];
  uint64_t *v57[5];
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = a7;
  v9 = a6;
  v60 = a4;
  v61 = a3;
  v59 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v53) = 0;
    LOBYTE(v54) = 0;
    v45 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v53, a3, a4, a5, a6, a7, a8);
    if (v46)
      v15 = v45;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
  }
  if (v15 < v9)
    v9 = v15;
  v58 = v9;
  if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v9, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    JUMPOUT(0x19850FC6CLL);
  }
  v20 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, v16, v17, v18, v19);
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v57[0] = (uint64_t *)&v58;
      v57[1] = &v60;
      v57[2] = &v59;
      v57[3] = (uint64_t *)a1;
      v57[4] = &v61;
      if (v9 >> 29)
      {
        if (v9 >> 61)
        {
          __break(0xC471u);
          JUMPOUT(0x19850FCA4);
        }
        if ((v9 & 0x1C00000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850FCACLL);
        }
        v39 = (WTF *)(v9 << 6);
        v40 = (void *)WTF::fastMalloc(v39);
        bzero(v40, (size_t)v39);
        v53 = (WTF *)v40;
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint32Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(v57, (uint64_t *)&v53, v41);
        v38 = v53;
        v53 = 0;
        if (v38)
          goto LABEL_26;
      }
      else
      {
        v53 = (WTF *)v56;
        v54 = 32;
        v55 = v9;
        if (v9 >= 0x21)
        {
          v30 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
          v54 = v9;
          v53 = v30;
        }
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint32Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, (uint64_t *)&v53, v21);
        v38 = v53;
        if (v56 != (_BYTE *)v53 && v53)
        {
          v53 = 0;
          v54 = 0;
LABEL_26:
          WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
        }
      }
    }
    else if (v9)
    {
      v22 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v23 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v24 = *(_QWORD *)(a1 + 16);
        v25 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v26 = (unsigned int *)(v23 + 4 * a5);
          v27 = (double *)(v25 + 8 * a3);
          do
          {
            v28 = *v26++;
            *v27++ = (double)v28;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v47 = (unsigned int *)(v22 + 4 * a5);
          v48 = (double *)(v24 + 8 * a3);
          do
          {
            v49 = *v47++;
            *v48++ = (double)v49;
            --v9;
          }
          while (v9);
        }
        else
        {
          v50 = (unsigned int *)(v23 + 4 * a5);
          v51 = (double *)(v25 + 8 * a3);
          do
          {
            v52 = *v50++;
            *v51++ = (double)v52;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v42 = (unsigned int *)(v22 + 4 * a5);
        v43 = (double *)(*(_QWORD *)(a1 + 16) + 8 * a3);
        do
        {
          v44 = *v42++;
          *v43++ = (double)v44;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v20;
}

BOOL JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  double *v27;
  float v28;
  WTF *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  float *v41;
  double *v42;
  float v43;
  unint64_t v44;
  char v45;
  float *v46;
  double *v47;
  float v48;
  float *v49;
  double *v50;
  float v51;
  WTF *v52;
  int v53;
  int v54;
  _BYTE v55[256];
  uint64_t *v56[5];
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v8 = a7;
  v9 = a6;
  v59 = a4;
  v60 = a3;
  v58 = a5;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    LOBYTE(v52) = 0;
    LOBYTE(v53) = 0;
    v44 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)&v52, a3, a4, a5, a6, a7, a8);
    if (v45)
      v15 = v44;
    else
      v15 = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
  }
  if (v15 < v9)
    v9 = v15;
  v57 = v9;
  if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v9, a4, a5, a6, a7, a8))
  {
    __break(0xC471u);
    JUMPOUT(0x19850FF20);
  }
  v20 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, v16, v17, v18, v19);
  if (v20)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) != 0
      && (*(_BYTE *)(a4 + 40) & 8) != 0
      && v8
      && *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) == *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      v56[0] = (uint64_t *)&v57;
      v56[1] = &v59;
      v56[2] = &v58;
      v56[3] = (uint64_t *)a1;
      v56[4] = &v60;
      if (v9 >> 29)
      {
        if (v9 >> 61)
        {
          __break(0xC471u);
          JUMPOUT(0x19850FF58);
        }
        if ((v9 & 0x1C00000000000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19850FF60);
        }
        v39 = (WTF *)(v9 << 6);
        v40 = (void *)WTF::fastMalloc(v39);
        bzero(v40, (size_t)v39);
        v52 = (WTF *)v40;
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(v56, (uint64_t *)&v52);
        v38 = v52;
        v52 = 0;
        if (v38)
          goto LABEL_26;
      }
      else
      {
        v52 = (WTF *)v55;
        v53 = 32;
        v54 = v9;
        if (v9 >= 0x21)
        {
          v30 = (WTF *)WTF::fastMalloc((WTF *)(8 * v9));
          v53 = v9;
          v52 = v30;
        }
        JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v56, (uint64_t *)&v52, v21);
        v38 = v52;
        if (v55 != (_BYTE *)v52 && v52)
        {
          v52 = 0;
          v53 = 0;
LABEL_26:
          WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
        }
      }
    }
    else if (v9)
    {
      v22 = *(_QWORD *)(a4 + 16);
      if (qword_1ECF4C038)
      {
        v23 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v24 = *(_QWORD *)(a1 + 16);
        v25 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v26 = (float *)(v23 + 4 * a5);
          v27 = (double *)(v25 + 8 * a3);
          do
          {
            v28 = *v26++;
            *v27++ = v28;
            --v9;
          }
          while (v9);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v46 = (float *)(v22 + 4 * a5);
          v47 = (double *)(v24 + 8 * a3);
          do
          {
            v48 = *v46++;
            *v47++ = v48;
            --v9;
          }
          while (v9);
        }
        else
        {
          v49 = (float *)(v23 + 4 * a5);
          v50 = (double *)(v25 + 8 * a3);
          do
          {
            v51 = *v49++;
            *v50++ = v51;
            --v9;
          }
          while (v9);
        }
      }
      else
      {
        v41 = (float *)(v22 + 4 * a5);
        v42 = (double *)(*(_QWORD *)(a1 + 16) + 8 * a3);
        do
        {
          v43 = *v41++;
          *v42++ = v43;
          --v9;
        }
        while (v9);
      }
    }
  }
  return v20;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1985100A4);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1985101D0);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, double result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 8;
      v14 = v5 + v11 - 1;
      v15 = **a1;
      do
      {
        *(double *)(v13 + 8 * v15) = (double)*(char *)(v14 + v15);
        --v15;
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v25 = v10 - 8;
      v26 = v5 + v6 - 1;
      v27 = **a1;
      do
      {
        *(double *)(v25 + 8 * v27) = (double)*(char *)(v26 + v27);
        --v27;
      }
      while (v27);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v31 = v10 - 8;
      v32 = v5 + v11 - 1;
      v33 = **a1;
      do
      {
        *(double *)(v31 + 8 * v33) = (double)*(char *)(v32 + v33);
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v22 = v10 - 8;
    v23 = v5 + v6 - 1;
    v24 = **a1;
    do
    {
      *(double *)(v22 + 8 * v24) = (double)*(char *)(v23 + v24);
      --v24;
    }
    while (v24);
  }
  v16 = *a1[4];
  v17 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v18 = v4[2];
      if (v7)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          if (byte_1ECF4C022)
            v20 = v19;
          else
            v20 = v18;
          *(double *)(v20 + 8 * v16 - 8 + 8 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v21 = v18 + 8 * v16 - 8;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          *(double *)(v21 + 8 * v3--) = result;
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198510390);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v28 = v4[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v29 = v28;
  v30 = v29 + 8 * v16 - 8;
  do
  {
    result = *(double *)(v17 - 8 + 8 * v3);
    *(double *)(v30 + 8 * v3--) = result;
  }
  while (v3);
  return result;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int8Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = **a1;
  if (v2)
  {
    v3 = a1[3];
    v4 = *a1[2];
    v5 = *(_QWORD *)(*a1[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v4 + v9 - 1;
        v11 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v11) = (double)*(char *)(v10 + v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v21 = v4 + v5 - 1;
        v22 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v22) = (double)*(char *)(v21 + v22);
          --v22;
        }
        while (v22);
      }
      else
      {
        v25 = v4 + v9 - 1;
        v26 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v26) = (double)*(char *)(v25 + v26);
          --v26;
        }
        while (v26);
      }
    }
    else
    {
      v17 = v4 + v5 - 1;
      v18 = **a1;
      do
      {
        *(double *)(v8 - 8 + 8 * v18) = (double)*(char *)(v17 + v18);
        --v18;
      }
      while (v18);
    }
    v12 = *a1[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 8;
        do
        {
          result = *(double *)(v15 + 8 * v2);
          *(double *)(v14 + 8 * v12 - 8 + 8 * v2--) = result;
        }
        while (v2);
      }
      else
      {
        v23 = v8 - 8;
        if (v7)
        {
          v24 = v13 + 8 * v12 - 8;
          do
          {
            result = *(double *)(v23 + 8 * v2);
            *(double *)(v24 + 8 * v2--) = result;
          }
          while (v2);
        }
        else
        {
          do
          {
            result = *(double *)(v23 + 8 * v2);
            *(double *)(v14 + 8 * v12 - 8 + 8 * v2--) = result;
          }
          while (v2);
        }
      }
    }
    else
    {
      v19 = v8 - 8;
      v20 = v13 + 8 * v12 - 8;
      do
      {
        result = *(double *)(v19 + 8 * v2);
        *(double *)(v20 + 8 * v2--) = result;
      }
      while (v2);
    }
  }
  return result;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, double result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 8;
      v14 = v11 + 2 * v5 - 2;
      v15 = **a1;
      do
      {
        *(double *)(v13 + 8 * v15) = (double)*(__int16 *)(v14 + 2 * v15);
        --v15;
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v25 = v10 - 8;
      v26 = v6 + 2 * v5 - 2;
      v27 = **a1;
      do
      {
        *(double *)(v25 + 8 * v27) = (double)*(__int16 *)(v26 + 2 * v27);
        --v27;
      }
      while (v27);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v31 = v10 - 8;
      v32 = v11 + 2 * v5 - 2;
      v33 = **a1;
      do
      {
        *(double *)(v31 + 8 * v33) = (double)*(__int16 *)(v32 + 2 * v33);
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v22 = v10 - 8;
    v23 = v6 + 2 * v5 - 2;
    v24 = **a1;
    do
    {
      *(double *)(v22 + 8 * v24) = (double)*(__int16 *)(v23 + 2 * v24);
      --v24;
    }
    while (v24);
  }
  v16 = *a1[4];
  v17 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v18 = v4[2];
      if (v7)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          if (byte_1ECF4C022)
            v20 = v19;
          else
            v20 = v18;
          *(double *)(v20 + 8 * v16 - 8 + 8 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v21 = v18 + 8 * v16 - 8;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          *(double *)(v21 + 8 * v3--) = result;
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x19851070CLL);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v28 = v4[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v29 = v28;
  v30 = v29 + 8 * v16 - 8;
  do
  {
    result = *(double *)(v17 - 8 + 8 * v3);
    *(double *)(v30 + 8 * v3--) = result;
  }
  while (v3);
  return result;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int16Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = **a1;
  if (v2)
  {
    v3 = a1[3];
    v4 = *a1[2];
    v5 = *(_QWORD *)(*a1[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + 2 * v4 - 2;
        v11 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v11) = (double)*(__int16 *)(v10 + 2 * v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v21 = v5 + 2 * v4 - 2;
        v22 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v22) = (double)*(__int16 *)(v21 + 2 * v22);
          --v22;
        }
        while (v22);
      }
      else
      {
        v25 = v9 + 2 * v4 - 2;
        v26 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v26) = (double)*(__int16 *)(v25 + 2 * v26);
          --v26;
        }
        while (v26);
      }
    }
    else
    {
      v17 = v5 + 2 * v4 - 2;
      v18 = **a1;
      do
      {
        *(double *)(v8 - 8 + 8 * v18) = (double)*(__int16 *)(v17 + 2 * v18);
        --v18;
      }
      while (v18);
    }
    v12 = *a1[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 8;
        do
        {
          result = *(double *)(v15 + 8 * v2);
          *(double *)(v14 + 8 * v12 - 8 + 8 * v2--) = result;
        }
        while (v2);
      }
      else
      {
        v23 = v8 - 8;
        if (v7)
        {
          v24 = v13 + 8 * v12 - 8;
          do
          {
            result = *(double *)(v23 + 8 * v2);
            *(double *)(v24 + 8 * v2--) = result;
          }
          while (v2);
        }
        else
        {
          do
          {
            result = *(double *)(v23 + 8 * v2);
            *(double *)(v14 + 8 * v12 - 8 + 8 * v2--) = result;
          }
          while (v2);
        }
      }
    }
    else
    {
      v19 = v8 - 8;
      v20 = v13 + 8 * v12 - 8;
      do
      {
        result = *(double *)(v19 + 8 * v2);
        *(double *)(v20 + 8 * v2--) = result;
      }
      while (v2);
    }
  }
  return result;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, double result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 8;
      v14 = v11 + 4 * v5 - 4;
      v15 = **a1;
      do
      {
        *(double *)(v13 + 8 * v15) = (double)*(int *)(v14 + 4 * v15);
        --v15;
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v25 = v10 - 8;
      v26 = v6 + 4 * v5 - 4;
      v27 = **a1;
      do
      {
        *(double *)(v25 + 8 * v27) = (double)*(int *)(v26 + 4 * v27);
        --v27;
      }
      while (v27);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v31 = v10 - 8;
      v32 = v11 + 4 * v5 - 4;
      v33 = **a1;
      do
      {
        *(double *)(v31 + 8 * v33) = (double)*(int *)(v32 + 4 * v33);
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v22 = v10 - 8;
    v23 = v6 + 4 * v5 - 4;
    v24 = **a1;
    do
    {
      *(double *)(v22 + 8 * v24) = (double)*(int *)(v23 + 4 * v24);
      --v24;
    }
    while (v24);
  }
  v16 = *a1[4];
  v17 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v18 = v4[2];
      if (v7)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          if (byte_1ECF4C022)
            v20 = v19;
          else
            v20 = v18;
          *(double *)(v20 + 8 * v16 - 8 + 8 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v21 = v18 + 8 * v16 - 8;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          *(double *)(v21 + 8 * v3--) = result;
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198510A88);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v28 = v4[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v29 = v28;
  v30 = v29 + 8 * v16 - 8;
  do
  {
    result = *(double *)(v17 - 8 + 8 * v3);
    *(double *)(v30 + 8 * v3--) = result;
  }
  while (v3);
  return result;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Int32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Int32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Int32Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = **a1;
  if (v2)
  {
    v3 = a1[3];
    v4 = *a1[2];
    v5 = *(_QWORD *)(*a1[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + 4 * v4 - 4;
        v11 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v11) = (double)*(int *)(v10 + 4 * v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v21 = v5 + 4 * v4 - 4;
        v22 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v22) = (double)*(int *)(v21 + 4 * v22);
          --v22;
        }
        while (v22);
      }
      else
      {
        v25 = v9 + 4 * v4 - 4;
        v26 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v26) = (double)*(int *)(v25 + 4 * v26);
          --v26;
        }
        while (v26);
      }
    }
    else
    {
      v17 = v5 + 4 * v4 - 4;
      v18 = **a1;
      do
      {
        *(double *)(v8 - 8 + 8 * v18) = (double)*(int *)(v17 + 4 * v18);
        --v18;
      }
      while (v18);
    }
    v12 = *a1[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 8;
        do
        {
          result = *(double *)(v15 + 8 * v2);
          *(double *)(v14 + 8 * v12 - 8 + 8 * v2--) = result;
        }
        while (v2);
      }
      else
      {
        v23 = v8 - 8;
        if (v7)
        {
          v24 = v13 + 8 * v12 - 8;
          do
          {
            result = *(double *)(v23 + 8 * v2);
            *(double *)(v24 + 8 * v2--) = result;
          }
          while (v2);
        }
        else
        {
          do
          {
            result = *(double *)(v23 + 8 * v2);
            *(double *)(v14 + 8 * v12 - 8 + 8 * v2--) = result;
          }
          while (v2);
        }
      }
    }
    else
    {
      v19 = v8 - 8;
      v20 = v13 + 8 * v12 - 8;
      do
      {
        result = *(double *)(v19 + 8 * v2);
        *(double *)(v20 + 8 * v2--) = result;
      }
      while (v2);
    }
  }
  return result;
}

__n64 JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, __n64 result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 8;
      v14 = v5 + v11 - 1;
      v15 = **a1;
      do
      {
        result.n64_u8[0] = *(_BYTE *)(v14 + v15);
        result.n64_f64[0] = (double)result.n64_u64[0];
        *(double *)(v13 + 8 * v15--) = result.n64_f64[0];
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v25 = v10 - 8;
      v26 = v5 + v6 - 1;
      v27 = **a1;
      do
      {
        result.n64_u8[0] = *(_BYTE *)(v26 + v27);
        result.n64_f64[0] = (double)result.n64_u64[0];
        *(double *)(v25 + 8 * v27--) = result.n64_f64[0];
      }
      while (v27);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v31 = v10 - 8;
      v32 = v5 + v11 - 1;
      v33 = **a1;
      do
      {
        result.n64_u8[0] = *(_BYTE *)(v32 + v33);
        result.n64_f64[0] = (double)result.n64_u64[0];
        *(double *)(v31 + 8 * v33--) = result.n64_f64[0];
      }
      while (v33);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v22 = v10 - 8;
    v23 = v5 + v6 - 1;
    v24 = **a1;
    do
    {
      result.n64_u8[0] = *(_BYTE *)(v23 + v24);
      result.n64_f64[0] = (double)result.n64_u64[0];
      *(double *)(v22 + 8 * v24--) = result.n64_f64[0];
    }
    while (v24);
  }
  v16 = *a1[4];
  v17 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v18 = v4[2];
      if (v7)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result.n64_u64[0] = *(unint64_t *)(v17 - 8 + 8 * v3);
          if (byte_1ECF4C022)
            v20 = v19;
          else
            v20 = v18;
          *(double *)(v20 + 8 * v16 - 8 + 8 * v3--) = result.n64_f64[0];
        }
        while (v3);
      }
      else
      {
        v21 = v18 + 8 * v16 - 8;
        do
        {
          result.n64_u64[0] = *(unint64_t *)(v17 - 8 + 8 * v3);
          *(double *)(v21 + 8 * v3--) = result.n64_f64[0];
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198510E04);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v28 = v4[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v29 = v28;
  v30 = v29 + 8 * v16 - 8;
  do
  {
    result.n64_u64[0] = *(unint64_t *)(v17 - 8 + 8 * v3);
    *(double *)(v30 + 8 * v3--) = result.n64_f64[0];
  }
  while (v3);
  return result;
}

__n64 JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint8Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint8Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(uint64_t **a1, uint64_t *a2, __n64 result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = **a1;
  if (v3)
  {
    v4 = a1[3];
    v5 = *a1[2];
    v6 = *(_QWORD *)(*a1[1] + 16);
    v7 = qword_1ECF4C038;
    v8 = disablePrimitiveGigacageRequested;
    v9 = *a2;
    if (qword_1ECF4C038)
    {
      v10 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v11 = v5 + v10 - 1;
        v12 = **a1;
        do
        {
          result.n64_u8[0] = *(_BYTE *)(v11 + v12);
          result.n64_f64[0] = (double)result.n64_u64[0];
          *(double *)(v9 - 8 + 8 * v12--) = result.n64_f64[0];
        }
        while (v12);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v21 = v5 + v6 - 1;
        v22 = **a1;
        do
        {
          result.n64_u8[0] = *(_BYTE *)(v21 + v22);
          result.n64_f64[0] = (double)result.n64_u64[0];
          *(double *)(v9 - 8 + 8 * v22--) = result.n64_f64[0];
        }
        while (v22);
      }
      else
      {
        v25 = v5 + v10 - 1;
        v26 = **a1;
        do
        {
          result.n64_u8[0] = *(_BYTE *)(v25 + v26);
          result.n64_f64[0] = (double)result.n64_u64[0];
          *(double *)(v9 - 8 + 8 * v26--) = result.n64_f64[0];
        }
        while (v26);
      }
    }
    else
    {
      v17 = v5 + v6 - 1;
      v18 = **a1;
      do
      {
        result.n64_u8[0] = *(_BYTE *)(v17 + v18);
        result.n64_f64[0] = (double)result.n64_u64[0];
        *(double *)(v9 - 8 + 8 * v18--) = result.n64_f64[0];
      }
      while (v18);
    }
    v13 = *a1[4];
    v14 = v4[2];
    if (v7)
    {
      v15 = (v14 & 0x3FFFFFFFFLL) + v7;
      if (byte_1ECF4C022)
      {
        v16 = v9 - 8;
        do
        {
          result.n64_u64[0] = *(unint64_t *)(v16 + 8 * v3);
          *(double *)(v15 + 8 * v13 - 8 + 8 * v3--) = result.n64_f64[0];
        }
        while (v3);
      }
      else
      {
        v23 = v9 - 8;
        if (v8)
        {
          v24 = v14 + 8 * v13 - 8;
          do
          {
            result.n64_u64[0] = *(unint64_t *)(v23 + 8 * v3);
            *(double *)(v24 + 8 * v3--) = result.n64_f64[0];
          }
          while (v3);
        }
        else
        {
          do
          {
            result.n64_u64[0] = *(unint64_t *)(v23 + 8 * v3);
            *(double *)(v15 + 8 * v13 - 8 + 8 * v3--) = result.n64_f64[0];
          }
          while (v3);
        }
      }
    }
    else
    {
      v19 = v9 - 8;
      v20 = v14 + 8 * v13 - 8;
      do
      {
        result.n64_u64[0] = *(unint64_t *)(v19 + 8 * v3);
        *(double *)(v20 + 8 * v3--) = result.n64_f64[0];
      }
      while (v3);
    }
  }
  return result;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, double result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 8;
      v14 = v11 + 2 * v5 - 2;
      v15 = **a1;
      do
      {
        LOWORD(result) = *(_WORD *)(v14 + 2 * v15);
        result = (double)*(unint64_t *)&result;
        *(double *)(v13 + 8 * v15--) = result;
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v25 = v10 - 8;
      v26 = v6 + 2 * v5 - 2;
      v27 = **a1;
      do
      {
        LOWORD(result) = *(_WORD *)(v26 + 2 * v27);
        result = (double)*(unint64_t *)&result;
        *(double *)(v25 + 8 * v27--) = result;
      }
      while (v27);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v31 = v10 - 8;
      v32 = v11 + 2 * v5 - 2;
      v33 = **a1;
      do
      {
        LOWORD(result) = *(_WORD *)(v32 + 2 * v33);
        result = (double)*(unint64_t *)&result;
        *(double *)(v31 + 8 * v33--) = result;
      }
      while (v33);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v22 = v10 - 8;
    v23 = v6 + 2 * v5 - 2;
    v24 = **a1;
    do
    {
      LOWORD(result) = *(_WORD *)(v23 + 2 * v24);
      result = (double)*(unint64_t *)&result;
      *(double *)(v22 + 8 * v24--) = result;
    }
    while (v24);
  }
  v16 = *a1[4];
  v17 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v18 = v4[2];
      if (v7)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          if (byte_1ECF4C022)
            v20 = v19;
          else
            v20 = v18;
          *(double *)(v20 + 8 * v16 - 8 + 8 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v21 = v18 + 8 * v16 - 8;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          *(double *)(v21 + 8 * v3--) = result;
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x19851118CLL);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v28 = v4[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v29 = v28;
  v30 = v29 + 8 * v16 - 8;
  do
  {
    result = *(double *)(v17 - 8 + 8 * v3);
    *(double *)(v30 + 8 * v3--) = result;
  }
  while (v3);
  return result;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint16Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(uint64_t **a1, uint64_t *a2, double result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = **a1;
  if (v3)
  {
    v4 = a1[3];
    v5 = *a1[2];
    v6 = *(_QWORD *)(*a1[1] + 16);
    v7 = qword_1ECF4C038;
    v8 = disablePrimitiveGigacageRequested;
    v9 = *a2;
    if (qword_1ECF4C038)
    {
      v10 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v11 = v10 + 2 * v5 - 2;
        v12 = **a1;
        do
        {
          LOWORD(result) = *(_WORD *)(v11 + 2 * v12);
          result = (double)*(unint64_t *)&result;
          *(double *)(v9 - 8 + 8 * v12--) = result;
        }
        while (v12);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v21 = v6 + 2 * v5 - 2;
        v22 = **a1;
        do
        {
          LOWORD(result) = *(_WORD *)(v21 + 2 * v22);
          result = (double)*(unint64_t *)&result;
          *(double *)(v9 - 8 + 8 * v22--) = result;
        }
        while (v22);
      }
      else
      {
        v25 = v10 + 2 * v5 - 2;
        v26 = **a1;
        do
        {
          LOWORD(result) = *(_WORD *)(v25 + 2 * v26);
          result = (double)*(unint64_t *)&result;
          *(double *)(v9 - 8 + 8 * v26--) = result;
        }
        while (v26);
      }
    }
    else
    {
      v17 = v6 + 2 * v5 - 2;
      v18 = **a1;
      do
      {
        LOWORD(result) = *(_WORD *)(v17 + 2 * v18);
        result = (double)*(unint64_t *)&result;
        *(double *)(v9 - 8 + 8 * v18--) = result;
      }
      while (v18);
    }
    v13 = *a1[4];
    v14 = v4[2];
    if (v7)
    {
      v15 = (v14 & 0x3FFFFFFFFLL) + v7;
      if (byte_1ECF4C022)
      {
        v16 = v9 - 8;
        do
        {
          result = *(double *)(v16 + 8 * v3);
          *(double *)(v15 + 8 * v13 - 8 + 8 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v23 = v9 - 8;
        if (v8)
        {
          v24 = v14 + 8 * v13 - 8;
          do
          {
            result = *(double *)(v23 + 8 * v3);
            *(double *)(v24 + 8 * v3--) = result;
          }
          while (v3);
        }
        else
        {
          do
          {
            result = *(double *)(v23 + 8 * v3);
            *(double *)(v15 + 8 * v13 - 8 + 8 * v3--) = result;
          }
          while (v3);
        }
      }
    }
    else
    {
      v19 = v9 - 8;
      v20 = v14 + 8 * v13 - 8;
      do
      {
        result = *(double *)(v19 + 8 * v3);
        *(double *)(v20 + 8 * v3--) = result;
      }
      while (v3);
    }
  }
  return result;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint32Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, double result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 8;
      v14 = v11 + 4 * v5 - 4;
      v15 = **a1;
      do
      {
        LODWORD(result) = *(_DWORD *)(v14 + 4 * v15);
        result = (double)*(unint64_t *)&result;
        *(double *)(v13 + 8 * v15--) = result;
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v25 = v10 - 8;
      v26 = v6 + 4 * v5 - 4;
      v27 = **a1;
      do
      {
        LODWORD(result) = *(_DWORD *)(v26 + 4 * v27);
        result = (double)*(unint64_t *)&result;
        *(double *)(v25 + 8 * v27--) = result;
      }
      while (v27);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v31 = v10 - 8;
      v32 = v11 + 4 * v5 - 4;
      v33 = **a1;
      do
      {
        LODWORD(result) = *(_DWORD *)(v32 + 4 * v33);
        result = (double)*(unint64_t *)&result;
        *(double *)(v31 + 8 * v33--) = result;
      }
      while (v33);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v22 = v10 - 8;
    v23 = v6 + 4 * v5 - 4;
    v24 = **a1;
    do
    {
      LODWORD(result) = *(_DWORD *)(v23 + 4 * v24);
      result = (double)*(unint64_t *)&result;
      *(double *)(v22 + 8 * v24--) = result;
    }
    while (v24);
  }
  v16 = *a1[4];
  v17 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v18 = v4[2];
      if (v7)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          if (byte_1ECF4C022)
            v20 = v19;
          else
            v20 = v18;
          *(double *)(v20 + 8 * v16 - 8 + 8 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v21 = v18 + 8 * v16 - 8;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          *(double *)(v21 + 8 * v3--) = result;
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198511508);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v28 = v4[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v29 = v28;
  v30 = v29 + 8 * v16 - 8;
  do
  {
    result = *(double *)(v17 - 8 + 8 * v3);
    *(double *)(v30 + 8 * v3--) = result;
  }
  while (v3);
  return result;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Uint32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Uint32Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(uint64_t **a1, uint64_t *a2, double result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = **a1;
  if (v3)
  {
    v4 = a1[3];
    v5 = *a1[2];
    v6 = *(_QWORD *)(*a1[1] + 16);
    v7 = qword_1ECF4C038;
    v8 = disablePrimitiveGigacageRequested;
    v9 = *a2;
    if (qword_1ECF4C038)
    {
      v10 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v11 = v10 + 4 * v5 - 4;
        v12 = **a1;
        do
        {
          LODWORD(result) = *(_DWORD *)(v11 + 4 * v12);
          result = (double)*(unint64_t *)&result;
          *(double *)(v9 - 8 + 8 * v12--) = result;
        }
        while (v12);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v21 = v6 + 4 * v5 - 4;
        v22 = **a1;
        do
        {
          LODWORD(result) = *(_DWORD *)(v21 + 4 * v22);
          result = (double)*(unint64_t *)&result;
          *(double *)(v9 - 8 + 8 * v22--) = result;
        }
        while (v22);
      }
      else
      {
        v25 = v10 + 4 * v5 - 4;
        v26 = **a1;
        do
        {
          LODWORD(result) = *(_DWORD *)(v25 + 4 * v26);
          result = (double)*(unint64_t *)&result;
          *(double *)(v9 - 8 + 8 * v26--) = result;
        }
        while (v26);
      }
    }
    else
    {
      v17 = v6 + 4 * v5 - 4;
      v18 = **a1;
      do
      {
        LODWORD(result) = *(_DWORD *)(v17 + 4 * v18);
        result = (double)*(unint64_t *)&result;
        *(double *)(v9 - 8 + 8 * v18--) = result;
      }
      while (v18);
    }
    v13 = *a1[4];
    v14 = v4[2];
    if (v7)
    {
      v15 = (v14 & 0x3FFFFFFFFLL) + v7;
      if (byte_1ECF4C022)
      {
        v16 = v9 - 8;
        do
        {
          result = *(double *)(v16 + 8 * v3);
          *(double *)(v15 + 8 * v13 - 8 + 8 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v23 = v9 - 8;
        if (v8)
        {
          v24 = v14 + 8 * v13 - 8;
          do
          {
            result = *(double *)(v23 + 8 * v3);
            *(double *)(v24 + 8 * v3--) = result;
          }
          while (v3);
        }
        else
        {
          do
          {
            result = *(double *)(v23 + 8 * v3);
            *(double *)(v15 + 8 * v13 - 8 + 8 * v3--) = result;
          }
          while (v3);
        }
      }
    }
    else
    {
      v19 = v9 - 8;
      v20 = v14 + 8 * v13 - 8;
      do
      {
        result = *(double *)(v19 + 8 * v3);
        *(double *)(v20 + 8 * v3--) = result;
      }
      while (v3);
    }
  }
  return result;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<WTF::Vector<double,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t *a2, double result)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = **a1;
  if (!v3)
    return result;
  v4 = a1[3];
  v5 = *a1[2];
  v6 = *(_QWORD *)(*a1[1] + 16);
  v7 = qword_1ECF4C038;
  v8 = disablePrimitiveGigacageRequested;
  v9 = *((unsigned int *)a2 + 3);
  v10 = *a2;
  if (qword_1ECF4C038)
  {
    v11 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v12 = v3 - 1;
    if (byte_1ECF4C022)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v13 = v10 - 8;
      v14 = v11 + 4 * v5 - 4;
      v15 = **a1;
      do
      {
        *(double *)(v13 + 8 * v15) = *(float *)(v14 + 4 * v15);
        --v15;
      }
      while (v15);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      if (v12 >= v9)
        goto LABEL_39;
      v25 = v10 - 8;
      v26 = v6 + 4 * v5 - 4;
      v27 = **a1;
      do
      {
        *(double *)(v25 + 8 * v27) = *(float *)(v26 + 4 * v27);
        --v27;
      }
      while (v27);
    }
    else
    {
      if (v12 >= v9)
        goto LABEL_39;
      v31 = v10 - 8;
      v32 = v11 + 4 * v5 - 4;
      v33 = **a1;
      do
      {
        *(double *)(v31 + 8 * v33) = *(float *)(v32 + 4 * v33);
        --v33;
      }
      while (v33);
    }
  }
  else
  {
    v12 = v3 - 1;
    if (v3 - 1 >= v9)
      goto LABEL_39;
    v22 = v10 - 8;
    v23 = v6 + 4 * v5 - 4;
    v24 = **a1;
    do
    {
      *(double *)(v22 + 8 * v24) = *(float *)(v23 + 4 * v24);
      --v24;
    }
    while (v24);
  }
  v16 = *a1[4];
  v17 = *a2;
  if (v8)
  {
    if (v12 < v9)
    {
      v18 = v4[2];
      if (v7)
      {
        v19 = (v18 & 0x3FFFFFFFFLL) + v7;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          if (byte_1ECF4C022)
            v20 = v19;
          else
            v20 = v18;
          *(double *)(v20 + 8 * v16 - 8 + 8 * v3--) = result;
        }
        while (v3);
      }
      else
      {
        v21 = v18 + 8 * v16 - 8;
        do
        {
          result = *(double *)(v17 - 8 + 8 * v3);
          *(double *)(v21 + 8 * v3--) = result;
        }
        while (v3);
      }
      return result;
    }
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198511884);
  }
  if (v12 >= v9)
    goto LABEL_39;
  v28 = v4[2];
  v29 = (v28 & 0x3FFFFFFFFLL) + v7;
  if (!v7)
    v29 = v28;
  v30 = v29 + 8 * v16 - 8;
  do
  {
    result = *(double *)(v17 - 8 + 8 * v3);
    *(double *)(v30 + 8 * v3--) = result;
  }
  while (v3);
  return result;
}

double JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType<JSC::Float32Adaptor>(JSC::JSGlobalObject *,unsigned long,JSC::JSGenericTypedArrayView<JSC::Float32Adaptor> *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::Float32Adaptor&)#1}::operator()<std::unique_ptr<double [],WTF::UniqueArrayFree<double []>>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = **a1;
  if (v2)
  {
    v3 = a1[3];
    v4 = *a1[2];
    v5 = *(_QWORD *)(*a1[1] + 16);
    v6 = qword_1ECF4C038;
    v7 = disablePrimitiveGigacageRequested;
    v8 = *a2;
    if (qword_1ECF4C038)
    {
      v9 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v10 = v9 + 4 * v4 - 4;
        v11 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v11) = *(float *)(v10 + 4 * v11);
          --v11;
        }
        while (v11);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v21 = v5 + 4 * v4 - 4;
        v22 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v22) = *(float *)(v21 + 4 * v22);
          --v22;
        }
        while (v22);
      }
      else
      {
        v25 = v9 + 4 * v4 - 4;
        v26 = **a1;
        do
        {
          *(double *)(v8 - 8 + 8 * v26) = *(float *)(v25 + 4 * v26);
          --v26;
        }
        while (v26);
      }
    }
    else
    {
      v17 = v5 + 4 * v4 - 4;
      v18 = **a1;
      do
      {
        *(double *)(v8 - 8 + 8 * v18) = *(float *)(v17 + 4 * v18);
        --v18;
      }
      while (v18);
    }
    v12 = *a1[4];
    v13 = v3[2];
    if (v6)
    {
      v14 = (v13 & 0x3FFFFFFFFLL) + v6;
      if (byte_1ECF4C022)
      {
        v15 = v8 - 8;
        do
        {
          result = *(double *)(v15 + 8 * v2);
          *(double *)(v14 + 8 * v12 - 8 + 8 * v2--) = result;
        }
        while (v2);
      }
      else
      {
        v23 = v8 - 8;
        if (v7)
        {
          v24 = v13 + 8 * v12 - 8;
          do
          {
            result = *(double *)(v23 + 8 * v2);
            *(double *)(v24 + 8 * v2--) = result;
          }
          while (v2);
        }
        else
        {
          do
          {
            result = *(double *)(v23 + 8 * v2);
            *(double *)(v14 + 8 * v12 - 8 + 8 * v2--) = result;
          }
          while (v2);
        }
      }
    }
    else
    {
      v19 = v8 - 8;
      v20 = v13 + 8 * v12 - 8;
      do
      {
        result = *(double *)(v19 + 8 * v2);
        *(double *)(v20 + 8 * v2--) = result;
      }
      while (v2);
    }
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setIndex(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  JSC::JSObject *v22;

  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v22 = (JSC::JSObject *)a4;
  if (a4 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)a4;
  }
  else if (a4 >> 49)
  {
    *(_QWORD *)&v13 = a4 - 0x2000000000000;
  }
  else
  {
    JSC::JSValue::toNumberSlowCase(&v22, a2, a3, a4, a5, a6, a7, a8, a9);
    v13 = v12;
  }
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v14 = *(_QWORD *)(a1 + 16);
    if (!v14
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    if (*(_BYTE *)(v17 + 64) && (v21 = *(_QWORD *)(v17 + 32)) != 0)
      v18 = *(_QWORD *)(v21 + 32);
    else
      v18 = *(_QWORD *)(v17 + 48);
    v20 = *(_QWORD *)(a1 + 24);
    v19 = *(_QWORD *)(a1 + 32);
    if (v19 + 8 * v20 > v18)
      return 0;
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if (a3 >= (v18 - v19) >> 3)
        return 0;
    }
    else if (v20 <= a3)
    {
      return 0;
    }
LABEL_12:
    v15 = *(_QWORD *)(a1 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(double *)(v15 + 8 * a3) = v13;
    return 1;
  }
  if (*(_QWORD *)(a1 + 24) > a3)
    goto LABEL_12;
  return 0;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t SlowCase;
  JSC::JSCell *v19;
  unint64_t OutOfMemoryError;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  JSC::Exception *v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[6];

  v9 = *((_QWORD *)a1 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v34, (JSC *)v9, a2, a3, 8, 0, a7, a8);
  if (v34[0])
  {
    v17 = *(_QWORD **)(v9 + 40344);
    if (!v17)
      v17 = (_QWORD *)JSC::GCClient::Heap::bigInt64ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
    SlowCase = v17[3];
    if (SlowCase >= v17[4])
    {
      SlowCase = v17[5];
      if ((SlowCase & 1) != 0)
      {
        v30 = (uint64_t)v17;
        JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v30, v9 + 192, 48, 0, 0, v31, v32, v33);
        goto LABEL_6;
      }
      v29 = *(_QWORD *)(SlowCase + 8) ^ v17[6];
      v17[4] = SlowCase + HIDWORD(v29);
      v17[5] = SlowCase + (int)v29;
    }
    v17[3] = SlowCase + 48;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    v19 = JSC::JSArrayBufferView::JSArrayBufferView((JSC::JSCell *)SlowCase, v9, (uint64_t)v34);
    JSC::JSArrayBufferView::finishCreation((unint64_t)v19, (JSC::VM *)v9);
    return SlowCase;
  }
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v10);
  v27 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v27 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v21, v22, v23, v24, v25);
  }
  JSC::VM::throwException((JSC::VM *)v9, a1, v27, v26, v21, v22, v23, v24, v25);
  return 0;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::createUninitialized(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t SlowCase;
  JSC::JSCell *v19;
  unint64_t OutOfMemoryError;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  JSC::Exception *v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[6];

  v9 = *((_QWORD *)a1 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v34, (JSC *)v9, a2, a3, 8, 1, a7, a8);
  if (v34[0])
  {
    v17 = *(_QWORD **)(v9 + 40344);
    if (!v17)
      v17 = (_QWORD *)JSC::GCClient::Heap::bigInt64ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
    SlowCase = v17[3];
    if (SlowCase >= v17[4])
    {
      SlowCase = v17[5];
      if ((SlowCase & 1) != 0)
      {
        v30 = (uint64_t)v17;
        JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v30, v9 + 192, 48, 0, 0, v31, v32, v33);
        goto LABEL_6;
      }
      v29 = *(_QWORD *)(SlowCase + 8) ^ v17[6];
      v17[4] = SlowCase + HIDWORD(v29);
      v17[5] = SlowCase + (int)v29;
    }
    v17[3] = SlowCase + 48;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    v19 = JSC::JSArrayBufferView::JSArrayBufferView((JSC::JSCell *)SlowCase, v9, (uint64_t)v34);
    JSC::JSArrayBufferView::finishCreation((unint64_t)v19, (JSC::VM *)v9);
    return SlowCase;
  }
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v10);
  v27 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v27 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v21, v22, v23, v24, v25);
  }
  JSC::VM::throwException((JSC::VM *)v9, a1, v27, v26, v21, v22, v23, v24, v25);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromTypedArray(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v41[5];
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  JSC::VM *v46;
  _BYTE v47[8];
  char v48;

  v45 = a2;
  v43 = a5;
  v44 = a3;
  v41[0] = &v42;
  v41[1] = a1;
  v41[2] = &v45;
  v41[3] = &v44;
  v41[4] = &v43;
  v42 = a6;
  switch(*(_BYTE *)(a4 + 5))
  {
    case '\'':
      return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
    case '(':
      v46 = *(JSC::VM **)(a2 + 56);
      if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
      {
        v47[0] = 0;
        v48 = 0;
        v34 = a5;
        v38 = a6;
        v24 = a4;
        v25 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
        a4 = v24;
        a5 = v34;
        a6 = v38;
        if (v26)
          v17 = v25;
        else
          v17 = 0;
      }
      else
      {
        v17 = *(_QWORD *)(a4 + 24);
      }
      if (v17 >= a6)
        v12 = a6;
      else
        v12 = v17;
      if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v12, a4, a5, a6, a7, a8))
      {
        __break(0xC471u);
        JUMPOUT(0x198511FCCLL);
      }
      goto LABEL_26;
    case ')':
      return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
    case '*':
      return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
    case '+':
      return JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
    case ',':
      v46 = *(JSC::VM **)(a2 + 56);
      if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
      {
        v47[0] = 0;
        v48 = 0;
        v33 = a5;
        v37 = a6;
        v21 = a4;
        v22 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
        a4 = v21;
        a5 = v33;
        a6 = v37;
        if (v23)
          v11 = v22;
        else
          v11 = 0;
      }
      else
      {
        v11 = *(_QWORD *)(a4 + 24);
      }
      if (v11 >= a6)
        v12 = a6;
      else
        v12 = v11;
      if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v12, a4, a5, a6, a7, a8))
      {
        __break(0xC471u);
        JUMPOUT(0x198511F74);
      }
      goto LABEL_26;
    case '-':
      v46 = *(JSC::VM **)(a2 + 56);
      if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
      {
        v47[0] = 0;
        v48 = 0;
        v36 = a5;
        v40 = a6;
        v30 = a4;
        v31 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
        a4 = v30;
        a5 = v36;
        a6 = v40;
        if (v32)
          v20 = v31;
        else
          v20 = 0;
      }
      else
      {
        v20 = *(_QWORD *)(a4 + 24);
      }
      if (v20 >= a6)
        v12 = a6;
      else
        v12 = v20;
      if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v12, a4, a5, a6, a7, a8))
      {
        __break(0xC471u);
        JUMPOUT(0x1985120F4);
      }
      goto LABEL_26;
    case '.':
      v46 = *(JSC::VM **)(a2 + 56);
      if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
      {
        v47[0] = 0;
        v48 = 0;
        v35 = a5;
        v39 = a6;
        v27 = a4;
        v28 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
        a4 = v27;
        a5 = v35;
        a6 = v39;
        if (v29)
          v19 = v28;
        else
          v19 = 0;
      }
      else
      {
        v19 = *(_QWORD *)(a4 + 24);
      }
      if (v19 >= a6)
        v12 = a6;
      else
        v12 = v19;
      if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v12, a4, a5, a6, a7, a8))
      {
        __break(0xC471u);
        JUMPOUT(0x1985121B8);
      }
LABEL_26:
      if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v12, v13, v14, v15, v16))
        JSC::throwTypeError(a2, &v46, (uint64_t)"Content types of source and destination typed arrays are different", 67);
      result = 0;
      break;
    case '/':
      result = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '0':
      result = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()((uint64_t)v41, a4, a3, a4, a5, a6, a7, a8);
      break;
    case '1':
      result = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198511EF8);
  }
  return result;
}

unint64_t JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t Uninitialized;
  int8x16_t v18;
  unint64_t v19;
  int v20;
  _QWORD v22[3];
  char v23;
  uint64_t v24;
  char *v25;
  _OWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  JSC::JSGlobalObject *v29;

  v28 = *((_QWORD *)a1 + 7);
  v29 = a1;
  v23 = 0;
  v24 = 0x800000000;
  v25 = (char *)v26 + 8;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v22[0] = &v23;
  v22[1] = &v29;
  v22[2] = &v28;
  JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(a1, (uint64_t)this, a4, (uint64_t)v22, a5, a6, a7, a8);
  v16 = v28;
  if (*(_DWORD *)(v28 + 80))
  {
    v20 = *(_DWORD *)(v28 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v16 + 16))
    {
LABEL_10:
      Uninitialized = 0;
      goto LABEL_11;
    }
  }
  Uninitialized = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::createUninitialized(v29, a2, v24, v11, v12, v13, v14, v15);
  if (Uninitialized && (_DWORD)v24)
  {
    v19 = 0;
    while ((JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex(Uninitialized, v29, v19, *(JSC::Structure **)&v25[8 * v19], v12, v13, v14, v15, v18) & 1) != 0)
    {
      if (++v19 >= v24)
        goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v24, v9, v10, v11, v12, v13, v14, v15);
  return Uninitialized;
}

BOOL JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromArrayLike(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC::JSObject *a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  _BOOL8 result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  JSC::Structure *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  int v33;
  uint64_t v34;
  JSC::Structure *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int8x16_t v40;
  int v41;
  JSC::Structure *v42;
  JSC::Structure *v43;

  v14 = *((_QWORD *)a2 + 7);
  result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, (unint64_t)a2, a3, a6, a5, a6, a7, a8);
  if (result)
  {
    v21 = 0xFFFFFFFFLL;
    if (a6 < 0xFFFFFFFF)
      v21 = a6;
    v22 = v21 >= a5;
    v23 = v21 - a5;
    if (v22)
      v24 = v23;
    else
      v24 = 0;
    if (v23 != 0 && v22)
    {
      v25 = 0;
      while (1)
      {
        v27 = (JSC::Structure *)JSC::JSObject::get(a4, a2, (a5 + v25));
        if (*(_DWORD *)(v14 + 80))
        {
          v33 = *(_DWORD *)(v14 + 80);
          if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
          {
            v42 = v27;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v26, (uint64_t)v27, v28, v29, v30, v31);
            v27 = v42;
          }
          if (*(_QWORD *)(v14 + 16))
            break;
        }
        if ((JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex(a1, a2, a3 + v25, v27, v28, v29, v30, v31, v32) & 1) == 0)break;
        if (++v25 >= v24)
          goto LABEL_19;
      }
    }
    else
    {
LABEL_19:
      if (v24 >= a6)
        return 1;
      while (1)
      {
        v35 = (JSC::Structure *)JSC::JSObject::get(a4, (uint64_t ***)a2, (const WTF::StringImpl *)(a5 + v24), v16, v17, v18, v19, v20);
        if (*(_DWORD *)(v14 + 80))
        {
          v41 = *(_DWORD *)(v14 + 80);
          if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
          {
            v43 = v35;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v34, (uint64_t)v35, v36, v37, v38, v39);
            v35 = v43;
          }
          if (*(_QWORD *)(v14 + 16))
            break;
        }
        if ((JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex(a1, a2, a3 + v24, v35, v36, v37, v38, v39, v40) & 1) == 0)break;
        if (++v24 >= a6)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE v22[16];

  v10 = *(uint64_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v22[0] = 0;
    v22[8] = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v22, a3, a4, a5, a6, a7, a8);
    if (v17)
      v12 = v16;
    else
      v12 = 0;
    v13 = *(uint64_t **)a1;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(uint64_t **)a1;
  }
  if (v12 >= *v10)
    v14 = *v10;
  else
    v14 = v12;
  *v13 = v14;
  v15 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(v11, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), v14, a5, a6, a7, a8);
  if (v15)
  {
    if (*(unsigned __int8 *)(a2 + 5) - 47 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x198512588);
    }
    v18 = *(_QWORD *)(v11 + 16);
    if (v18 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v19 = (void *)(v18 + 8 * **(_QWORD **)(a1 + 24));
    v20 = *(_QWORD *)(a2 + 16);
    if (v20 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v20 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memmove(v19, (const void *)(v20 + 8 * **(_QWORD **)(a1 + 32)), 8 * **(_QWORD **)a1);
  }
  return v15;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198512780);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1985128ACLL);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x1985129D8);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198512B04);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198512C30);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

BOOL JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType<JSC::BigUint64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE v48[8];
  char v49;

  v8 = a7;
  v9 = a6;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v48[0] = 0;
    v49 = 0;
    v34 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v48, a3, a4, a5, a6, a7, a8);
    if (v37)
      v38 = v34;
    else
      v38 = 0;
    if (v38 < v9)
      v9 = v38;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v48[0] = 0;
      v49 = 0;
      v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v48, v35, v36, a5, a6, a7, a8);
      if (v40)
        v15 = v39;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x198512EB0);
  }
  result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (result)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) == 0
      || (*(_BYTE *)(a4 + 40) & 8) == 0
      || *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) != *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      goto LABEL_10;
    }
    v24 = *(_QWORD *)(a1 + 16);
    if (v24)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v25 = *(_QWORD *)(a1 + 16), !disablePrimitiveGigacageRequested))
          v25 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v25 = *(_QWORD *)(a1 + 16);
      }
    }
    else
    {
      v25 = 0;
    }
    v26 = *(_QWORD *)(a4 + 16);
    if (v26)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v27 = *(_QWORD *)(a4 + 16), !disablePrimitiveGigacageRequested))
          v27 = (v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v27 = *(_QWORD *)(a4 + 16);
      }
    }
    else
    {
      v27 = 0;
    }
    if (v8 && v25 + 8 * a3 > (unint64_t)(v27 + 8 * a5))
    {
      if (v9)
      {
        if (qword_1ECF4C038)
        {
          v28 = (v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v29 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            do
            {
              *(_QWORD *)(v29 + 8 * a3 - 8 + 8 * v9) = *(_QWORD *)(v28 + 8 * a5 - 8 + 8 * v9);
              --v9;
            }
            while (v9);
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v44 = v24 + 8 * a3 - 8;
            do
            {
              *(_QWORD *)(v44 + 8 * v9) = *(_QWORD *)(v26 + 8 * a5 - 8 + 8 * v9);
              --v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              *(_QWORD *)(v29 + 8 * a3 - 8 + 8 * v9) = *(_QWORD *)(v28 + 8 * a5 - 8 + 8 * v9);
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          v33 = v24 + 8 * a3 - 8;
          do
          {
            *(_QWORD *)(v33 + 8 * v9) = *(_QWORD *)(v26 + 8 * a5 - 8 + 8 * v9);
            --v9;
          }
          while (v9);
        }
      }
    }
    else
    {
LABEL_10:
      if (v9)
      {
        v17 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038)
        {
          v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v19 = *(_QWORD *)(a1 + 16);
          v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            v21 = (uint64_t *)(v18 + 8 * a5);
            v22 = (_QWORD *)(v20 + 8 * a3);
            do
            {
              v23 = *v21++;
              *v22++ = v23;
              --v9;
            }
            while (v9);
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v41 = (uint64_t *)(v17 + 8 * a5);
            v42 = (_QWORD *)(v19 + 8 * a3);
            do
            {
              v43 = *v41++;
              *v42++ = v43;
              --v9;
            }
            while (v9);
          }
          else
          {
            v45 = (uint64_t *)(v18 + 8 * a5);
            v46 = (_QWORD *)(v20 + 8 * a3);
            do
            {
              v47 = *v45++;
              *v46++ = v47;
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          v30 = (uint64_t *)(v17 + 8 * a5);
          v31 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a3);
          do
          {
            v32 = *v30++;
            *v31++ = v32;
            --v9;
          }
          while (v9);
        }
      }
    }
  }
  return result;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::Structure *v33;

  v11 = *((_QWORD *)a2 + 7);
  v33 = a4;
  JSC::JSValue::toBigInt(&v33, a2, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v11 + 80))
  {
    v21 = *(_DWORD *)(v11 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    {
      v31 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v12 = v31;
    }
    if (*(_QWORD *)(v11 + 16))
      goto LABEL_11;
  }
  if (!*(_DWORD *)(v12 + 8))
  {
LABEL_11:
    v20 = 0;
  }
  else
  {
    v19 = *(_QWORD *)(v12 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v20 = *(_QWORD *)v19;
    if (*(_BYTE *)(v12 + 16))
      v20 = -v20;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v25 = *(_DWORD *)(v11 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
    {
      v32 = v20;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v20 = v32;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 8) != 0)
  {
    v22 = *(_QWORD *)(a1 + 16);
    if (!v22
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return 1;
    }
  }
  if ((*(_BYTE *)(a1 + 40) & 7u) > 2)
  {
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8);
    if (*(_BYTE *)(v26 + 64) && (v30 = *(_QWORD *)(v26 + 32)) != 0)
      v27 = *(_QWORD *)(v30 + 32);
    else
      v27 = *(_QWORD *)(v26 + 48);
    v29 = *(_QWORD *)(a1 + 24);
    v28 = *(_QWORD *)(a1 + 32);
    if (v28 + 8 * v29 > v27)
      return 0;
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      if (a3 >= (v27 - v28) >> 3)
        return 0;
    }
    else if (v29 <= a3)
    {
      return 0;
    }
LABEL_20:
    v23 = *(_QWORD *)(a1 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v23 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(v23 + 8 * a3) = v20;
    return 1;
  }
  if (*(_QWORD *)(a1 + 24) > a3)
    goto LABEL_20;
  return 0;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::create(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t SlowCase;
  JSC::JSCell *v19;
  unint64_t OutOfMemoryError;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  JSC::Exception *v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[6];

  v9 = *((_QWORD *)a1 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v34, (JSC *)v9, a2, a3, 8, 0, a7, a8);
  if (v34[0])
  {
    v17 = *(_QWORD **)(v9 + 40360);
    if (!v17)
      v17 = (_QWORD *)JSC::GCClient::Heap::bigUint64ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
    SlowCase = v17[3];
    if (SlowCase >= v17[4])
    {
      SlowCase = v17[5];
      if ((SlowCase & 1) != 0)
      {
        v30 = (uint64_t)v17;
        JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v30, v9 + 192, 48, 0, 0, v31, v32, v33);
        goto LABEL_6;
      }
      v29 = *(_QWORD *)(SlowCase + 8) ^ v17[6];
      v17[4] = SlowCase + HIDWORD(v29);
      v17[5] = SlowCase + (int)v29;
    }
    v17[3] = SlowCase + 48;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    v19 = JSC::JSArrayBufferView::JSArrayBufferView((JSC::JSCell *)SlowCase, v9, (uint64_t)v34);
    JSC::JSArrayBufferView::finishCreation((unint64_t)v19, (JSC::VM *)v9);
    return SlowCase;
  }
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v10);
  v27 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v27 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v21, v22, v23, v24, v25);
  }
  JSC::VM::throwException((JSC::VM *)v9, a1, v27, v26, v21, v22, v23, v24, v25);
  return 0;
}

unint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::createUninitialized(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t SlowCase;
  JSC::JSCell *v19;
  unint64_t OutOfMemoryError;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  JSC::Exception *v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[6];

  v9 = *((_QWORD *)a1 + 7);
  JSC::JSArrayBufferView::ConstructionContext::ConstructionContext((uint64_t)v34, (JSC *)v9, a2, a3, 8, 1, a7, a8);
  if (v34[0])
  {
    v17 = *(_QWORD **)(v9 + 40360);
    if (!v17)
      v17 = (_QWORD *)JSC::GCClient::Heap::bigUint64ArraySpaceSlow((JSC::Heap **)(v9 + 37552));
    SlowCase = v17[3];
    if (SlowCase >= v17[4])
    {
      SlowCase = v17[5];
      if ((SlowCase & 1) != 0)
      {
        v30 = (uint64_t)v17;
        JSC::sanitizeStackForVM((JSC *)v9, v10, v11, v12, v13, v14, v15, v16);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v30, v9 + 192, 48, 0, 0, v31, v32, v33);
        goto LABEL_6;
      }
      v29 = *(_QWORD *)(SlowCase + 8) ^ v17[6];
      v17[4] = SlowCase + HIDWORD(v29);
      v17[5] = SlowCase + (int)v29;
    }
    v17[3] = SlowCase + 48;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    v19 = JSC::JSArrayBufferView::JSArrayBufferView((JSC::JSCell *)SlowCase, v9, (uint64_t)v34);
    JSC::JSArrayBufferView::finishCreation((unint64_t)v19, (JSC::VM *)v9);
    return SlowCase;
  }
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, v10);
  v27 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v27 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v21, v22, v23, v24, v25);
  }
  JSC::VM::throwException((JSC::VM *)v9, a1, v27, v26, v21, v22, v23, v24, v25);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setFromTypedArray(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v41[5];
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  JSC::VM *v46;
  _BYTE v47[8];
  char v48;

  v45 = a2;
  v43 = a5;
  v44 = a3;
  v41[0] = &v42;
  v41[1] = a1;
  v41[2] = &v45;
  v41[3] = &v44;
  v41[4] = &v43;
  v42 = a6;
  switch(*(_BYTE *)(a4 + 5))
  {
    case '\'':
      return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
    case '(':
      v46 = *(JSC::VM **)(a2 + 56);
      if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
      {
        v47[0] = 0;
        v48 = 0;
        v34 = a5;
        v38 = a6;
        v24 = a4;
        v25 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
        a4 = v24;
        a5 = v34;
        a6 = v38;
        if (v26)
          v17 = v25;
        else
          v17 = 0;
      }
      else
      {
        v17 = *(_QWORD *)(a4 + 24);
      }
      if (v17 >= a6)
        v12 = a6;
      else
        v12 = v17;
      if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v12, a4, a5, a6, a7, a8))
      {
        __break(0xC471u);
        JUMPOUT(0x19851359CLL);
      }
      goto LABEL_26;
    case ')':
      return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
    case '*':
      return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
    case '+':
      return JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
    case ',':
      v46 = *(JSC::VM **)(a2 + 56);
      if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
      {
        v47[0] = 0;
        v48 = 0;
        v33 = a5;
        v37 = a6;
        v21 = a4;
        v22 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
        a4 = v21;
        a5 = v33;
        a6 = v37;
        if (v23)
          v11 = v22;
        else
          v11 = 0;
      }
      else
      {
        v11 = *(_QWORD *)(a4 + 24);
      }
      if (v11 >= a6)
        v12 = a6;
      else
        v12 = v11;
      if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v12, a4, a5, a6, a7, a8))
      {
        __break(0xC471u);
        JUMPOUT(0x198513544);
      }
      goto LABEL_26;
    case '-':
      v46 = *(JSC::VM **)(a2 + 56);
      if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
      {
        v47[0] = 0;
        v48 = 0;
        v36 = a5;
        v40 = a6;
        v30 = a4;
        v31 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
        a4 = v30;
        a5 = v36;
        a6 = v40;
        if (v32)
          v20 = v31;
        else
          v20 = 0;
      }
      else
      {
        v20 = *(_QWORD *)(a4 + 24);
      }
      if (v20 >= a6)
        v12 = a6;
      else
        v12 = v20;
      if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v12, a4, a5, a6, a7, a8))
      {
        __break(0xC471u);
        JUMPOUT(0x1985136C4);
      }
      goto LABEL_26;
    case '.':
      v46 = *(JSC::VM **)(a2 + 56);
      if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
      {
        v47[0] = 0;
        v48 = 0;
        v35 = a5;
        v39 = a6;
        v27 = a4;
        v28 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v47, a3, a4, a5, a6, a7, a8);
        a4 = v27;
        a5 = v35;
        a6 = v39;
        if (v29)
          v19 = v28;
        else
          v19 = 0;
      }
      else
      {
        v19 = *(_QWORD *)(a4 + 24);
      }
      if (v19 >= a6)
        v12 = a6;
      else
        v12 = v19;
      if (!JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::canAccessRangeQuickly(a4, a5, v12, a4, a5, a6, a7, a8))
      {
        __break(0xC471u);
        JUMPOUT(0x198513788);
      }
LABEL_26:
      if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v12, v13, v14, v15, v16))
        JSC::throwTypeError(a2, &v46, (uint64_t)"Content types of source and destination typed arrays are different", 67);
      result = 0;
      break;
    case '/':
      result = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '0':
      result = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
    case '1':
      result = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()((uint64_t)v41, a4, a3, a4, a5, a6, a7, a8);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x1985134C8);
  }
  return result;
}

unint64_t JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>>(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t Uninitialized;
  int8x16_t v18;
  unint64_t v19;
  int v20;
  _QWORD v22[3];
  char v23;
  uint64_t v24;
  char *v25;
  _OWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  JSC::JSGlobalObject *v29;

  v28 = *((_QWORD *)a1 + 7);
  v29 = a1;
  v23 = 0;
  v24 = 0x800000000;
  v25 = (char *)v26 + 8;
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  v22[0] = &v23;
  v22[1] = &v29;
  v22[2] = &v28;
  JSC::forEachInIterable<JSC::JSObject * JSC::constructGenericTypedArrayViewFromIterator<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>>(JSC::JSGlobalObject *,JSC::Structure *,JSC::JSObject *,JSC::JSValue)::{lambda(JSC::VM &,JSC::JSGlobalObject&,JSC::JSValue)#1}>(a1, (uint64_t)this, a4, (uint64_t)v22, a5, a6, a7, a8);
  v16 = v28;
  if (*(_DWORD *)(v28 + 80))
  {
    v20 = *(_DWORD *)(v28 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, v10, v11, v12, v13, v14, v15);
    if (*(_QWORD *)(v16 + 16))
    {
LABEL_10:
      Uninitialized = 0;
      goto LABEL_11;
    }
  }
  Uninitialized = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::createUninitialized(v29, a2, v24, v11, v12, v13, v14, v15);
  if (Uninitialized && (_DWORD)v24)
  {
    v19 = 0;
    while ((JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setIndex(Uninitialized, v29, v19, *(JSC::Structure **)&v25[8 * v19], v12, v13, v14, v15, v18) & 1) != 0)
    {
      if (++v19 >= v24)
        goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_11:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v24, v9, v10, v11, v12, v13, v14, v15);
  return Uninitialized;
}

BOOL JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setFromTypedArray(JSC::JSGlobalObject *,unsigned long,JSC::JSArrayBufferView *,unsigned long,unsigned long,JSC::CopyType)::{lambda(JSC::JSArrayBufferView *)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE v22[16];

  v10 = *(uint64_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v22[0] = 0;
    v22[8] = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, (uint64_t)v22, a3, a4, a5, a6, a7, a8);
    if (v17)
      v12 = v16;
    else
      v12 = 0;
    v13 = *(uint64_t **)a1;
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(uint64_t **)a1;
  }
  if (v12 >= *v10)
    v14 = *v10;
  else
    v14 = v12;
  *v13 = v14;
  v15 = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(v11, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 24), v14, a5, a6, a7, a8);
  if (v15)
  {
    if (*(unsigned __int8 *)(a2 + 5) - 47 >= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1985139C8);
    }
    v18 = *(_QWORD *)(v11 + 16);
    if (v18 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v19 = (void *)(v18 + 8 * **(_QWORD **)(a1 + 24));
    v20 = *(_QWORD *)(a2 + 16);
    if (v20 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v20 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memmove(v19, (const void *)(v20 + 8 * **(_QWORD **)(a1 + 32)), 8 * **(_QWORD **)a1);
  }
  return v15;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::Int8Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198513BC0);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::Int16Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198513CECLL);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::Uint8ClampedAdaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198513E18);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::Uint16Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198513F44);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

uint64_t JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::Float64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  JSC::VM *v23;
  _BYTE v24[8];
  char v25;

  v8 = a6;
  v23 = *(JSC::VM **)(a2 + 56);
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v24[0] = 0;
    v25 = 0;
    v16 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, a3, a4, a5, a6, a7, a8);
    if (v19)
      v20 = v16;
    else
      v20 = 0;
    if (v20 < v8)
      v8 = v20;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v14 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v24[0] = 0;
      v25 = 0;
      v21 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v24, v17, v18, a5, a6, a7, a8);
      if (v22)
        v14 = v21;
      else
        v14 = 0;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 24);
    if (v14 < a6)
      v8 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v8) || a5 + v8 > v14)
  {
    __break(0xC471u);
    JUMPOUT(0x198514070);
  }
  if (JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v8, a5, a6, a7, a8))
    JSC::throwTypeError(a2, &v23, (uint64_t)"Content types of source and destination typed arrays are different", 67);
  return 0;
}

BOOL JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType<JSC::BigInt64Adaptor>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;
  unint64_t v15;
  _BOOL8 result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE v48[8];
  char v49;

  v8 = a7;
  v9 = a6;
  if ((*(_BYTE *)(a4 + 40) & 7u) > 2)
  {
    v48[0] = 0;
    v49 = 0;
    v34 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v48, a3, a4, a5, a6, a7, a8);
    if (v37)
      v38 = v34;
    else
      v38 = 0;
    if (v38 < v9)
      v9 = v38;
    if ((*(_BYTE *)(a4 + 40) & 7u) <= 2)
    {
      v15 = *(_QWORD *)(a4 + 24);
    }
    else
    {
      v48[0] = 0;
      v49 = 0;
      v39 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a4, (uint64_t)v48, v35, v36, a5, a6, a7, a8);
      if (v40)
        v15 = v39;
      else
        v15 = 0;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15 < a6)
      v9 = *(_QWORD *)(a4 + 24);
  }
  if (__CFADD__(a5, v9) || a5 + v9 > v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1985142F0);
  }
  result = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::validateRange(a1, a2, a3, v9, a5, a6, a7, a8);
  if (result)
  {
    if ((*(_BYTE *)(a1 + 40) & 8) == 0
      || (*(_BYTE *)(a4 + 40) & 8) == 0
      || *(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) != *(_QWORD *)(*(_QWORD *)(a4 + 8) - 8))
    {
      goto LABEL_10;
    }
    v24 = *(_QWORD *)(a1 + 16);
    if (v24)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v25 = *(_QWORD *)(a1 + 16), !disablePrimitiveGigacageRequested))
          v25 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v25 = *(_QWORD *)(a1 + 16);
      }
    }
    else
    {
      v25 = 0;
    }
    v26 = *(_QWORD *)(a4 + 16);
    if (v26)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v27 = *(_QWORD *)(a4 + 16), !disablePrimitiveGigacageRequested))
          v27 = (v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v27 = *(_QWORD *)(a4 + 16);
      }
    }
    else
    {
      v27 = 0;
    }
    if (v8 && v25 + 8 * a3 > (unint64_t)(v27 + 8 * a5))
    {
      if (v9)
      {
        if (qword_1ECF4C038)
        {
          v28 = (v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v29 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            do
            {
              *(_QWORD *)(v29 + 8 * a3 - 8 + 8 * v9) = *(_QWORD *)(v28 + 8 * a5 - 8 + 8 * v9);
              --v9;
            }
            while (v9);
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v44 = v24 + 8 * a3 - 8;
            do
            {
              *(_QWORD *)(v44 + 8 * v9) = *(_QWORD *)(v26 + 8 * a5 - 8 + 8 * v9);
              --v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              *(_QWORD *)(v29 + 8 * a3 - 8 + 8 * v9) = *(_QWORD *)(v28 + 8 * a5 - 8 + 8 * v9);
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          v33 = v24 + 8 * a3 - 8;
          do
          {
            *(_QWORD *)(v33 + 8 * v9) = *(_QWORD *)(v26 + 8 * a5 - 8 + 8 * v9);
            --v9;
          }
          while (v9);
        }
      }
    }
    else
    {
LABEL_10:
      if (v9)
      {
        v17 = *(_QWORD *)(a4 + 16);
        if (qword_1ECF4C038)
        {
          v18 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v19 = *(_QWORD *)(a1 + 16);
          v20 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            v21 = (uint64_t *)(v18 + 8 * a5);
            v22 = (_QWORD *)(v20 + 8 * a3);
            do
            {
              v23 = *v21++;
              *v22++ = v23;
              --v9;
            }
            while (v9);
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v41 = (uint64_t *)(v17 + 8 * a5);
            v42 = (_QWORD *)(v19 + 8 * a3);
            do
            {
              v43 = *v41++;
              *v42++ = v43;
              --v9;
            }
            while (v9);
          }
          else
          {
            v45 = (uint64_t *)(v18 + 8 * a5);
            v46 = (_QWORD *)(v20 + 8 * a3);
            do
            {
              v47 = *v45++;
              *v46++ = v47;
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          v30 = (uint64_t *)(v17 + 8 * a5);
          v31 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a3);
          do
          {
            v32 = *v30++;
            *v31++ = v32;
            --v9;
          }
          while (v9);
        }
      }
    }
  }
  return result;
}

void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::rehash(uint64_t a1, int a2)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(unsigned int *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 28);
  if (a2 == 1)
  {
    v6 = 8 * v4;
    if (v6 <= 5)
      v6 = 5;
    v7 = *(_DWORD *)(a1 + 24);
    do
    {
      v8 = v7;
      v7 >>= 1;
    }
    while (v8 >= v6);
    goto LABEL_16;
  }
  if ((_DWORD)v5)
  {
    if (v5 < 5 || 8 * v4 > v5)
    {
      if (3 * v4 <= v5)
      {
        v8 = *(_DWORD *)(a1 + 24);
        if (v5 > 0x40)
          goto LABEL_16;
      }
      else if ((v5 & 0x80000000) != 0)
      {
        __break(0xC471u);
        return;
      }
      v8 = 2 * v5;
    }
    else
    {
      v8 = v5 >> 1;
    }
  }
  else
  {
    v8 = 4;
  }
LABEL_16:
  JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::makeAndSetNewBuffer(a1, v8);
  if ((_DWORD)v5)
  {
    v17 = 0;
    v18 = *(_QWORD *)(a1 + 16);
    v19 = *(_DWORD *)(a1 + 24) - 1;
    do
    {
      v20 = *(_QWORD *)(v3 + 8 * v17);
      if (v20 != -3 && v20 != 0)
      {
        v22 = (~(v20 << 32) + v20) ^ ((unint64_t)(~(v20 << 32) + v20) >> 22);
        v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
        v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
        v25 = (v24 >> 31) ^ v24;
        do
        {
          v26 = v25 & v19;
          v25 = v26 + 1;
        }
        while (*(_QWORD *)(v18 + 8 * v26));
        *(_QWORD *)(v18 + 8 * v26) = v20;
      }
      ++v17;
    }
    while (v17 != v5);
  }
  *(_DWORD *)(a1 + 32) = 0;
  WTF::fastFree(v3, v10, v11, v12, v13, v14, v15, v16);
}

void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::makeAndSetNewBuffer(uint64_t a1, unsigned int a2)
{
  WTF *v4;
  void *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (WTF *)(8 * a2);
  v5 = (void *)WTF::fastMalloc(v4);
  bzero(v5, (size_t)v4);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  WTF::fastFree(v6, v7, v8, v9, v10, v11, v12, v13);
  WTF::fastFree(0, v14, v15, v16, v17, v18, v19, v20);
  *(_DWORD *)(a1 + 24) = a2;
}

void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::rehash(uint64_t a1, int a2)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  void *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(unsigned int *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 28);
  if (a2 == 1)
  {
    v43 = 8 * v4;
    if (v43 <= 5)
      v43 = 5;
    v44 = *(_DWORD *)(a1 + 24);
    do
    {
      v42 = v44;
      v44 >>= 1;
    }
    while (v42 >= v43);
    goto LABEL_11;
  }
  if ((_DWORD)v5)
  {
    if (v5 < 5 || 8 * v4 > v5)
    {
      if (3 * v4 <= v5)
      {
        v42 = *(_DWORD *)(a1 + 24);
        if (v5 > 0x40)
          goto LABEL_11;
      }
      else if ((v5 & 0x80000000) != 0)
      {
        __break(0xC471u);
        return;
      }
      v42 = 2 * v5;
    }
    else
    {
      v42 = v5 >> 1;
    }
  }
  else
  {
    v42 = 4;
  }
LABEL_11:
  v7 = (void *)WTF::fastMalloc((WTF *)(16 * v42));
  bzero(v7, 16 * v42);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  WTF::fastFree(v8, v9, v10, v11, v12, v13, v14, v15);
  WTF::fastFree(0, v16, v17, v18, v19, v20, v21, v22);
  *(_DWORD *)(a1 + 24) = v42;
  if ((_DWORD)v5)
  {
    v30 = 0;
    v31 = *(_QWORD *)(a1 + 16);
    do
    {
      v32 = (uint64_t *)(v3 + 16 * v30);
      v33 = *v32;
      if (*v32)
        v34 = v33 == -3;
      else
        v34 = 1;
      if (!v34)
      {
        v35 = (~(v33 << 32) + v33) ^ ((unint64_t)(~(v33 << 32) + v33) >> 22);
        v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
        v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
        v38 = (v37 >> 31) ^ v37;
        do
        {
          v39 = v38 & (v42 - 1);
          v38 = v39 + 1;
        }
        while (*(_QWORD *)(v31 + 16 * v39));
        v40 = v32[1];
        v41 = (_QWORD *)(v31 + 16 * v39);
        *v41 = v33;
        v41[1] = v40;
      }
      ++v30;
    }
    while (v30 != v5);
  }
  *(_DWORD *)(a1 + 32) = 0;
  WTF::fastFree(v3, v23, v24, v25, v26, v27, v28, v29);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [21],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", ": Entered reoptimize");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [58],char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", ": Not reoptimizing because we've already been jettisoned.");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [20],JSC::CodeBlock,char [72],char [2]>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v6, "%s", ": Not reoptimizing ");
  JSC::CodeBlock::dumpAssumingJITType(a2);
  WTF::PrintStream::printf(v6, "%s", " because it either didn't exit enough or didn't loop enough after exit.");
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [50],JSC::ExecutionCounter<(JSC::CountingVariant)1>,char [2]>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v6, "%s", ": Entered triggerTierUpNow with executeCounter = ");
  WTF::PrintStream::printf(v6, "%lf/%lf, %d", *(float *)(a2 + 4) + (double)*(int *)a2, (double)*(int *)(a2 + 8), *(_DWORD *)a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<char [64],JSC::CodeBlock,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Unexpected code block in DFG->FTL trigger tier up now in loop: ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [56],JSC::ExecutionCounter<(JSC::CountingVariant)1>,char [2]>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v6, "%s", ": Entered triggerTierUpNowInLoop with executeCounter = ");
  WTF::PrintStream::printf(v6, "%lf/%lf, %d", *(float *)(a2 + 4) + (double)*(int *)a2, (double)*(int *)(a2 + 8), *(_DWORD *)a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

uint64_t WTF::dataLog<JSC::CodeBlock,char [52],JSC::ExecutionCounter<(JSC::CountingVariant)1>,char [2]>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  char v8;
  char **v9;
  char *v10;

  v4 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v5 = WTF::s_file;
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v6, "%s", ": Entered triggerOSREntryNow with executeCounter = ");
  WTF::PrintStream::printf(v6, "%lf/%lf, %d", *(float *)(a2 + 4) + (double)*(int *)a2, (double)*(int *)(a2 + 8), *(_DWORD *)a2);
  WTF::PrintStream::printf(v6, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
}

void JSC::DFG::`anonymous namespace'::PhantomInsertionPhase::handleBlock(JSC::DFG::BasicBlock *)::{lambda(JSC::Operand)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v8 = *(_QWORD *)(a1 + 8);
  if (**(_QWORD **)a1 == a2)
    return;
  if (HIDWORD(a2) == 2)
  {
    v10 = *(unsigned int *)(v8 + 244);
    v9 = *(unsigned int *)(v8 + 240) + (uint64_t)(int)a2;
  }
  else
  {
    if ((a2 & 0x80000000) == 0)
    {
      v14 = ((unint64_t)a2 << 32) - 0x500000000;
      v12 = *(_QWORD *)(v8 + 224);
      v13 = *(_QWORD *)(v12 + (v14 >> 29));
      if (!v13)
        return;
      v11 = v14 >> 32;
      goto LABEL_10;
    }
    v9 = a2 ^ 0xFFFFFFFFLL;
    v10 = *(unsigned int *)(v8 + 240);
  }
  v11 = v9 + v10;
  v12 = *(_QWORD *)(v8 + 224);
  v13 = *(_QWORD *)(v12 + 8 * v11);
  if (!v13)
    return;
LABEL_10:
  *(_QWORD *)(v12 + 8 * v11) = 0;
  if (*(_DWORD *)(v13 + 88) != **(_DWORD **)(a1 + 16))
  {
    ++*(_DWORD *)(v13 + 52);
    v15 = **(_QWORD **)(a1 + 24);
    v16 = **(unsigned int **)(a1 + 32);
    if (*(_DWORD *)(v15 + 220) <= v16)
    {
      __break(0xC471u);
    }
    else
    {
      v17 = v8 + 72;
      v18 = (v16 + 1);
      JSC::DFG::NodeOrigin::forInsertingAfter((uint64_t)&v30, *(JSC::DFG::Graph **)(*(_QWORD *)(v15 + 208) + 8 * v16), *(JSC::DFG::Node **)(v8 + 32), *(JSC::DFG::Graph **)(*(_QWORD *)(v15 + 208) + 8 * v16), a5, a6, a7, a8);
      v21 = 0xC4000000000000;
      if ((*(_DWORD *)(v13 + 56) & 7) != 3)
        v21 = 0;
      v22 = 0xD0000000000000;
      if ((*(_DWORD *)(v13 + 56) & 7) != 5)
        v22 = v21;
      JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::Edge>(v17, v18, 0, 23, (uint64_t)&v30, v22 | v13 & 0xFF00FFFFFFFFFFFFLL, v19, v20);
      if ((v31 & 1) != 0 && (v31 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v31 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
      if ((v30 & 1) != 0 && (v30 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v30 & 0xFFFFFFFF8, v23, v24, v25, v26, v27, v28, v29);
    }
  }
}

uint64_t JSC::DFG::NodeOrigin::forInsertingAfter(uint64_t this, JSC::DFG::Graph *a2, JSC::DFG::Node *a3, JSC::DFG::Graph *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  JSC::DFG::Node *v22;
  JSC::DFG::Node *v23;
  JSC::DFG::Graph *v24;
  JSC::DFG::Graph *v25;
  JSC::DFG::Graph *v26;
  JSC::DFG::Graph *v27;

  v8 = this;
  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    this = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    if ((v9 & 2) != 0
      || ((v12 = *(unsigned int *)((v9 & 0xFFFFFFFF8) + 8), (_DWORD)v12 != 0x3FFFFFFF)
        ? (v13 = (_DWORD)v12 == -1)
        : (v13 = 1),
          v13))
    {
      v14 = 2;
    }
    else if (v12 >> 28)
    {
      v18 = this;
      v24 = a2;
      v26 = a4;
      v22 = a3;
      v19 = v12;
      this = WTF::fastMalloc((WTF *)0x10);
      a3 = v22;
      a2 = v24;
      a4 = v26;
      *(_QWORD *)this = v18;
      *(_DWORD *)(this + 8) = v19;
      v14 = 1;
    }
    else
    {
      v14 = this;
      this = v12 << 36;
    }
    v9 = this | v14;
  }
  *(_QWORD *)v8 = v9;
  v10 = *((_QWORD *)a2 + 1);
  if ((v10 & 1) != 0)
  {
    this = *(_QWORD *)(v10 & 0xFFFFFFFF8);
    if ((v10 & 2) != 0
      || ((v15 = *(unsigned int *)((v10 & 0xFFFFFFFF8) + 8), (_DWORD)v15 != 0x3FFFFFFF)
        ? (v16 = (_DWORD)v15 == -1)
        : (v16 = 1),
          v16))
    {
      v17 = 2;
    }
    else if (v15 >> 28)
    {
      v20 = this;
      v25 = a2;
      v27 = a4;
      v23 = a3;
      v21 = v15;
      this = WTF::fastMalloc((WTF *)0x10);
      a3 = v23;
      a2 = v25;
      a4 = v27;
      *(_QWORD *)this = v20;
      *(_DWORD *)(this + 8) = v21;
      v17 = 1;
    }
    else
    {
      v17 = this;
      this = v15 << 36;
    }
    v10 = this | v17;
  }
  *(_QWORD *)(v8 + 8) = v10;
  v11 = *((_WORD *)a2 + 8);
  *(_WORD *)(v8 + 16) = v11;
  if ((_BYTE)v11)
  {
    this = JSC::DFG::clobbersExitState(a3, a4, a3, (uint64_t)a4, a5, a6, a7, a8);
    if ((_DWORD)this)
      *(_BYTE *)(v8 + 16) = 0;
  }
  return this;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashMap<JSC::DFG::Node *,WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DFG::Node *>>::rehash(_QWORD *a1, unsigned int a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t **v34;
  unint64_t **v35;
  uint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  _DWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *result;
  uint64_t v54;
  int v55;
  _QWORD *v56;
  uint64_t v58;

  v4 = a1;
  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    v16 = a2;
    v17 = v8 + 40;
    do
    {
      *(_QWORD *)(v17 - 24) = 0;
      *(_QWORD *)(v17 - 16) = v17;
      *(_QWORD *)(v17 - 8) = 3;
      v17 += 48;
      --v16;
    }
    while (v16);
  }
  *v4 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*v4 - 8) = a2 - 1;
  *(_DWORD *)(*v4 - 16) = 0;
  *(_DWORD *)(*v4 - 12) = v7;
  if (v6)
  {
    v18 = 0;
    v19 = 0;
    v58 = v6;
    v56 = v4;
    do
    {
      v20 = (uint64_t *)(v5 + 48 * v18);
      v21 = *v20;
      if (*v20)
      {
        if (v21 != -1)
        {
          v22 = *v4;
          if (*v4)
            v23 = *(_DWORD *)(v22 - 8);
          else
            v23 = 0;
          v24 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
          v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
          v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
          v27 = v23 & ((v26 >> 31) ^ v26);
          v28 = 1;
          do
          {
            v29 = v27;
            v30 = (_QWORD *)(v22 + 48 * v27);
            v27 = (v27 + v28++) & v23;
          }
          while (*v30);
          v31 = v29;
          v32 = v22 + 48 * v29;
          v35 = *(unint64_t ***)(v32 + 8);
          v34 = (unint64_t **)(v32 + 8);
          v33 = (unint64_t)v35;
          if (v34 + 2 != v35 && v33 != 0)
          {
            *v34 = 0;
            *(_DWORD *)(v22 + 48 * v29 + 16) = 0;
            WTF::fastFree(v33, v9, v10, v11, v12, v13, v14, v15);
            v21 = *v20;
          }
          *v30 = v21;
          v37 = v5 + 48 * v18;
          *v34 = (unint64_t *)(v34 + 2);
          v40 = *(unint64_t **)(v37 + 8);
          v39 = (unint64_t *)(v37 + 8);
          v38 = v40;
          v41 = v22 + 48 * v31;
          *(_QWORD *)(v41 + 16) = 3;
          v42 = (_DWORD *)(v41 + 16);
          v43 = v39 + 2;
          if (v40 == v39 + 2)
          {
            memcpy(v34 + 2, v39 + 2, 8 * *(unsigned int *)(v5 + 48 * v18 + 20));
          }
          else
          {
            *v39 = (unint64_t)v43;
            *v34 = v38;
            v54 = v5 + 48 * v18;
            v55 = *(_DWORD *)(v54 + 16);
            *(_DWORD *)(v54 + 16) = 3;
            *v42 = v55;
          }
          v4 = v56;
          v44 = v5 + 48 * v18;
          v45 = *(_DWORD *)(v44 + 20);
          *(_DWORD *)(v44 + 20) = 0;
          v42[1] = v45;
          v46 = *v39;
          if (v43 != (_QWORD *)*v39 && v46 != 0)
          {
            *v39 = 0;
            *(_DWORD *)(v5 + 48 * v18 + 16) = 0;
            WTF::fastFree(v46, v9, v10, v11, v12, v13, v14, v15);
          }
          if (v20 == a3)
            v19 = v30;
        }
      }
      else
      {
        v48 = v5 + 48 * v18;
        v51 = *(_QWORD **)(v48 + 8);
        v50 = (_QWORD *)(v48 + 8);
        v49 = (unint64_t)v51;
        if (v50 + 2 != v51 && v49 != 0)
        {
          *v50 = 0;
          *(_DWORD *)(v5 + 48 * v18 + 16) = 0;
          WTF::fastFree(v49, v9, v10, v11, v12, v13, v14, v15);
        }
      }
      ++v18;
    }
    while (v18 != v58);
  }
  else
  {
    v19 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree(v5 - 16, v9, v10, v11, v12, v13, v14, v15);
  return v19;
}

uint64_t WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 4)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 3;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((const void *)(v4 + 16) != v5 && v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::Node *,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 4)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 3;
    goto LABEL_11;
  }
  if (!(v5 >> 29))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 8 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::Operands<std::optional<JSC::JSValue>,WTF::Vector<std::optional<JSC::JSValue>,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::dump(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  WTF::PrintStream *v8;
  unint64_t v9;
  unint64_t i;
  unsigned __int8 *v11;
  WTF::PrintStream *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  WTF::PrintStream *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  char v24;

  v3 = result;
  v23[0] = " ";
  v23[1] = 2;
  v23[2] = &str_77_5;
  v23[3] = 1;
  v24 = 0;
  v4 = *(unsigned int *)(result + 16);
  v5 = v4 - 1;
  v22 = v4 - 1;
  if ((_DWORD)v4)
  {
    do
    {
      v6 = (unsigned __int8 *)(*(_QWORD *)v3 + 16 * v5);
      v7 = v5;
      if (v6[8])
      {
        v20 = "arg";
        v21 = 4;
        v18 = ":";
        v19 = 2;
        v8 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,std::optional<JSC::JSValue>>(v8, (uint64_t)v23, (uint64_t)&v20, &v22, (uint64_t)&v18, v6);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v7 = v22;
      }
      v5 = v7 - 1;
      v22 = v7 - 1;
    }
    while (v7);
  }
  v22 = 0;
  v9 = *(unsigned int *)(v3 + 20);
  if ((_DWORD)v9)
  {
    for (i = 0; i < v9; v22 = i)
    {
      v11 = (unsigned __int8 *)(*(_QWORD *)v3 + 16 * (i + *(unsigned int *)(v3 + 16)));
      if (v11[8])
      {
        v20 = "loc";
        v21 = 4;
        v18 = ":";
        v19 = 2;
        v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,std::optional<JSC::JSValue>>(v12, (uint64_t)v23, (uint64_t)&v20, &v22, (uint64_t)&v18, v11);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        i = v22;
        v9 = *(unsigned int *)(v3 + 20);
      }
      ++i;
    }
  }
  else
  {
    v9 = 0;
  }
  v22 = 0;
  v13 = *(unsigned int *)(v3 + 12);
  v14 = *(unsigned int *)(v3 + 16);
  if (v14 + v9 != v13)
  {
    v15 = 0;
    do
    {
      v16 = (unsigned __int8 *)(*(_QWORD *)v3 + 16 * (v14 + v9 + v15));
      if (v16[8])
      {
        v20 = "tmp";
        v21 = 4;
        v18 = ":";
        v19 = 2;
        v17 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,std::optional<JSC::JSValue>>(v17, (uint64_t)v23, (uint64_t)&v20, &v22, (uint64_t)&v18, v16);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        v15 = v22;
        v13 = *(unsigned int *)(v3 + 12);
        v14 = *(unsigned int *)(v3 + 16);
        v9 = *(unsigned int *)(v3 + 20);
      }
      v22 = ++v15;
    }
    while (v15 < v13 - (v14 + v9));
  }
  return result;
}

uint64_t WTF::PrintStream::printImpl<WTF::CommaPrinter,WTF::ASCIILiteral,unsigned long,WTF::ASCIILiteral,std::optional<JSC::JSValue>>(WTF::PrintStream *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  WTF::PrintStream *v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  float v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  WTF::PrintStream *v28;
  float v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  WTF::PrintStream *v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  WTF::PrintStream *v39;
  JSC::Structure *v40;
  unint64_t v41;
  uint64_t v43;
  int v44;
  char v45;

  if (*(_BYTE *)(a2 + 32))
  {
    v12 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v13 = *(char **)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v13)
    {
      v17 = v14 - 1;
      if (!v14)
        v17 = 0;
      WTF::StringImpl::utf8ForCharacters(v13, v17, (uint64_t)&v43, v16);
    }
    else
    {
      v24 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = 0;
      *(_BYTE *)(v24 + 16) = 0;
      v43 = v24;
      v44 = 0;
    }
    WTF::printExpectedCStringHelper(v15, "StringView", &v43);
    if (v44 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v44])(&v45, &v43);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  }
  else
  {
    v18 = (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    v19 = *(char **)(a2 + 16);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    if (v19)
    {
      v23 = v20 - 1;
      if (!v20)
        v23 = 0;
      WTF::StringImpl::utf8ForCharacters(v19, v23, (uint64_t)&v43, v22);
    }
    else
    {
      v25 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = 0;
      *(_BYTE *)(v25 + 16) = 0;
      v43 = v25;
      v44 = 0;
    }
    WTF::printExpectedCStringHelper(v21, "StringView", &v43);
    if (v44 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v44])(&v45, &v43);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(a2 + 32) = 1;
  }
  v26 = *(char **)a3;
  v27 = *(_QWORD *)(a3 + 8);
  v28 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v26)
  {
    v30 = v27 - 1;
    if (!v27)
      v30 = 0;
    WTF::StringImpl::utf8ForCharacters(v26, v30, (uint64_t)&v43, v29);
  }
  else
  {
    v31 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v31 = 1;
    *(_QWORD *)(v31 + 8) = 0;
    *(_BYTE *)(v31 + 16) = 0;
    v43 = v31;
    v44 = 0;
  }
  WTF::printExpectedCStringHelper(v28, "StringView", &v43);
  if (v44 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v44])(&v45, &v43);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  WTF::PrintStream::printf(a1, "%lu", *a4);
  v32 = *(char **)a5;
  v33 = *(_QWORD *)(a5 + 8);
  v34 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v32)
  {
    v36 = v33 - 1;
    if (!v33)
      v36 = 0;
    WTF::StringImpl::utf8ForCharacters(v32, v36, (uint64_t)&v43, v35);
  }
  else
  {
    v37 = WTF::fastMalloc((WTF *)0x11);
    *(_DWORD *)v37 = 1;
    *(_QWORD *)(v37 + 8) = 0;
    *(_BYTE *)(v37 + 16) = 0;
    v43 = v37;
    v44 = 0;
  }
  WTF::printExpectedCStringHelper(v34, "StringView", &v43);
  if (v44 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v44])(&v45, &v43);
  (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
  v38 = a6[8];
  v39 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
  if (v38)
  {
    v40 = 0;
    v41 = *(_QWORD *)a6;
    if (*(_QWORD *)a6 && (v41 & 0xFFFE000000000002) == 0)
      v40 = (JSC::Structure *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE));
    JSC::JSValue::dumpInContextAssumingStructure((JSC::JSValue *)a6, v39, 0, v40);
  }
  else
  {
    WTF::PrintStream::printf(v39, "%s", "<nullopt>");
  }
  return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t JSC::DFG::performPredictionPropagation(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::DFG::Graph *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  int v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  unint64_t *v51;
  WTF *v52;
  uint64_t v53;
  unint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  JSC::DFG::Graph *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  JSC::DFG::Node *v69;
  float v70;
  int v71;
  uint64_t v72;
  BOOL v73;
  BOOL v74;
  float *v75;
  float *v76;
  float *v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  float *v81;
  float *v82;
  float *v83;
  int v84;
  unint64_t v85;
  BOOL v86;
  uint64_t v87;
  JSC::DFG::Graph *v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  float *v93;
  float *v94;
  float *v95;
  float *v96;
  float *v97;
  float *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  BOOL v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  int v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  float *v115;
  float *v116;
  float *v117;
  float *v118;
  unint64_t v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  int v130;
  int v131;
  int v132;
  unint64_t v133;
  int v134;
  int v135;
  int v136;
  float *v137;
  float *v138;
  float *v139;
  unint64_t v140;
  unsigned int v141;
  int v142;
  double v143;
  JSC::DFG::Graph *v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  unsigned int *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  BOOL v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  JSC::DFG::Graph *v174;
  unint64_t v175;
  unsigned __int8 v176;
  unint64_t v177;
  unint64_t v178;
  unsigned int v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  WTF *v188;
  uint64_t v189;
  unint64_t *v190;
  BOOL v191;
  BOOL v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  WTF *v200;
  WTF *v201;
  WTF *v202;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned __int8 *v211;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char hasExitSite;
  uint64_t v221;
  uint64_t v222;
  _BOOL4 v224;
  BOOL v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v231;
  unint64_t v232;
  int v233;
  unint64_t v234;
  int v235;
  _QWORD *v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  int v244;
  int v245;
  _QWORD *v246;
  WTF::Lock *v247;
  int v248;
  float *v249;
  float *v250;
  float *v251;
  float *v252;
  float *v253;
  float *v254;
  float *v255;
  int v256;
  int v257;
  int v258;
  BOOL v259;
  int v260;
  float *v261;
  unsigned int v262;
  float *v263;
  float *v264;
  float *v265;
  int v266;
  int v267;
  int v268;
  BOOL v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v276;
  int v277;
  int v278;
  int v279;
  WTF *v280;
  JSC::DFG::Graph *v281;
  unint64_t v282;
  unint64_t *v283;
  int v284;
  int v285;
  uint64_t v286;
  unsigned int v287;
  BOOL v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t *v291;
  BOOL v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unsigned int v301;
  unint64_t v302;
  int v303;
  float *v304;
  float *v305;
  float *v306;
  float *v307;
  float *v308;
  float *v309;
  int v310;
  int v311;
  int v312;
  BOOL v313;
  int v314;
  int v315;
  int v316;
  float *v317;
  unint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  int v322;
  int v323;
  BOOL v324;
  float *v325;
  unint64_t v326;
  BOOL v327;
  int ShouldSpeculateInt32;
  unint64_t v329;
  uint64_t v330;
  int v331;
  int v332;
  int v333;
  BOOL v334;
  unint64_t v335;
  uint64_t v336;
  BOOL v337;
  int v338;
  BOOL v339;
  _BOOL8 v340;
  int v341;
  _QWORD *v342;
  _QWORD *v343;
  _QWORD *v344;
  int v345;
  unsigned int v346;
  float *v347;
  unint64_t v348;
  BOOL v349;
  int v351;
  int v352;
  int v353;
  BOOL v354;
  int v355;
  int v356;
  int v357;
  int v358;
  BOOL v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unsigned int v364;
  WTF *v365;
  uint64_t v366;
  WTF *v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t i;
  uint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  uint64_t v387;
  __int16 v388;
  JSC::DFG::Graph *v389;
  __int128 v390;
  char v391;
  WTF *v392;
  WTF *v393;
  uint64_t v394;
  WTF *v395;
  int v396;
  unsigned int v397;
  _BYTE v398[128];
  JSC::DFG::Node *v399;
  unsigned __int8 v400;
  int v401;
  _QWORD v402[2];
  __int128 v403;
  double v404;
  char v405;
  __int128 *v406;
  __int128 v407;
  char v408;
  char v409;
  uint64_t v410;

  v410 = *MEMORY[0x1E0C80C00];
  v385 = -1;
  v386 = -1;
  v387 = 0;
  v388 = 256;
  v389 = this;
  *(_QWORD *)&v390 = "prediction propagation";
  *((_QWORD *)&v390 + 1) = 23;
  v391 = 0;
  v392 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v385);
  v393 = 0;
  v394 = 0;
  v10 = *((unsigned int *)this + 77);
  v395 = (WTF *)v398;
  LODWORD(v11) = 16;
  v396 = 16;
  v397 = v10;
  if (v10 >= 0x11)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198517A08);
    }
    v13 = (WTF *)WTF::fastMalloc((WTF *)(8 * v10));
    v396 = v10;
    v395 = v13;
    v12 = v397;
    LODWORD(v11) = v10;
    LODWORD(v10) = v397;
  }
  else
  {
    v12 = v10;
    v13 = (WTF *)v398;
  }
  v400 = 0;
  v401 = 0;
  if (v11 >= v10)
  {
    v14 = v12;
    v15 = v10;
    goto LABEL_5;
  }
  v397 = 0;
  v365 = (WTF *)v398;
  if (v398 != (_BYTE *)v13)
  {
    v395 = 0;
    v396 = 0;
    WTF::fastFree((unint64_t)v13, v3, v4, v5, v6, v7, v8, v9);
    v365 = v395;
    if (!v395)
    {
      v365 = (WTF *)v398;
      v395 = (WTF *)v398;
      v11 = 16;
      v396 = 16;
      goto LABEL_656;
    }
    LODWORD(v11) = v396;
  }
  v11 = v11;
LABEL_656:
  if (v12 <= v11)
  {
    v13 = v365;
  }
  else
  {
    v366 = v397;
    if (v12 < 0x11)
    {
      v367 = (WTF *)v398;
      v395 = (WTF *)v398;
      v396 = 16;
    }
    else
    {
      if (v12 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198517A10);
      }
      v367 = (WTF *)WTF::fastMalloc((WTF *)(8 * v12));
      v396 = v12;
      v395 = v367;
    }
    memcpy(v367, v365, 8 * v366);
    v13 = v395;
    if (v398 != (_BYTE *)v365)
    {
      if (v395 == v365)
      {
        v395 = 0;
        v396 = 0;
      }
      WTF::fastFree((unint64_t)v365, v378, v379, v380, v381, v382, v383, v384);
      v13 = v395;
    }
  }
  v14 = v397;
  v15 = v397;
LABEL_5:
  if (v15)
    bzero(v13, 8 * (v14 - (v14 != 0)) + 8);
  if (v15 != (_DWORD)v10)
    bzero((char *)v13 + 8 * v14, 8 * (v12 - v14));
  v397 = v10;
  v402[0] = "DFG";
  v402[1] = 4;
  v403 = v390;
  v404 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v361 = mach_absolute_time();
    v363 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v363 != -1)
    {
      *(_QWORD *)&v407 = &v405;
      v406 = &v407;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v406, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v362) = dword_1ECF4400C;
    v404 = (double)(v361 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v362 * 1000000000.0);
  }
  v401 = 0;
  v22 = v389;
  v23 = *((unsigned int *)v389 + 15);
  if ((_DWORD)v23)
  {
    v24 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v389 + 6) + 8 * v24))
    {
      if (v23 == ++v24)
        goto LABEL_85;
    }
    if ((_DWORD)v23 != (_DWORD)v24)
    {
      v25 = *((_DWORD *)v389 + 15);
      while (1)
      {
        if (v25 <= v24)
        {
          __break(0xC471u);
          JUMPOUT(0x198517944);
        }
        v26 = *(_QWORD *)(*((_QWORD *)v22 + 6) + 8 * v24);
        v27 = *(unsigned int *)(v26 + 220);
        if ((_DWORD)v27)
          break;
LABEL_50:
        v24 = (v24 + 1);
        if (v25 > v24)
        {
          while (!*(_QWORD *)(*((_QWORD *)v22 + 6) + 8 * v24))
          {
            if (v25 == ++v24)
            {
              LODWORD(v24) = v25;
              break;
            }
          }
        }
        if ((_DWORD)v23 == (_DWORD)v24)
          goto LABEL_85;
      }
      v28 = *(unint64_t ***)(v26 + 208);
      v29 = 8 * v27;
      while (1)
      {
        v31 = *v28;
        v399 = (JSC::DFG::Node *)v31;
        switch(*((_WORD *)v31 + 9))
        {
          case 0:
            v33 = *(_QWORD *)v31[9];
            if (!v33)
              goto LABEL_454;
            if (v33 >= 0xFFFE000000000000)
            {
              v40 = (*(_QWORD *)v31[9] & 0xFFFFFFFELL) == 0;
              goto LABEL_43;
            }
            if (v33 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              v46 = (uint64_t)COERCE_DOUBLE(v33 - 0x2000000000000);
              if ((double)v46 != COERCE_DOUBLE(v33 - 0x2000000000000))
                goto LABEL_69;
              if (v46)
              {
                if ((unint64_t)(v46 + 0x8000000000000) >> 52)
                  goto LABEL_69;
                goto LABEL_355;
              }
              if ((uint64_t)v33 >= 0x2000000000000)
                goto LABEL_355;
              goto LABEL_69;
            }
            if ((v33 & 0xFFFE000000000002) != 0)
            {
              v42 = v33 & 0xFFFFFFFFFFFFFFFELL;
              goto LABEL_48;
            }
            if (qword_1ECF4C080 > v33)
              goto LABEL_698;
            if (v33 >> 36 || (v33 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_698;
            v35 = *(unsigned __int8 *)(v33 + 5);
            if (v35 != 2)
            {
              v36 = JSC::speculatedTypeMapping[v35];
              if (v36 != 0x1000000000)
                goto LABEL_39;
LABEL_355:
              v36 = JSC::int52AwareSpeculationFromValue(v33);
              goto LABEL_39;
            }
            v43 = *(_QWORD *)(v33 + 8);
            if (v43)
              v44 = (*(_QWORD *)(v33 + 8) & 1) == 0;
            else
              v44 = 0;
            if (v44)
            {
              if (v43 >= qword_1ECF4C080 && !(v43 >> 36) && (v43 & 0xFFFFFFFFFLL) != 0)
              {
                if ((*(_BYTE *)(v43 + 16) & 0x10) == 0)
                  goto LABEL_73;
LABEL_67:
                v36 = 0x10000000;
                goto LABEL_39;
              }
LABEL_698:
              v36 = 0;
            }
            else
            {
LABEL_73:
              v36 = 805306368;
            }
LABEL_39:
            v37 = v31[8];
LABEL_40:
            v30 = v37 | v36;
LABEL_21:
            v31[8] = v30;
LABEL_22:
            ++v28;
            v29 -= 8;
            if (!v29)
            {
              v25 = *((_DWORD *)v22 + 15);
              goto LABEL_50;
            }
            break;
          case 1:
            v274 = *(_QWORD *)v31[9];
            if (!v274)
            {
LABEL_454:
              v36 = 0x40000000000;
              goto LABEL_39;
            }
            if (v274 >= 0xFFFE000000000000)
            {
              v40 = (*(_QWORD *)v31[9] & 0xFFFFFFFELL) == 0;
LABEL_43:
              v36 = 0x200000000;
              v41 = 0x100000000;
LABEL_44:
              if (v40)
                v36 = v41;
              goto LABEL_39;
            }
            if (v274 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              v360 = (uint64_t)COERCE_DOUBLE(v274 - 0x2000000000000);
              if ((double)v360 != COERCE_DOUBLE(v274 - 0x2000000000000))
                goto LABEL_69;
              if (v360)
              {
                if ((unint64_t)(v360 + 0x8000000000000) >> 52)
                  goto LABEL_69;
LABEL_634:
                v36 = 0x1000000000;
                goto LABEL_39;
              }
              if ((uint64_t)v274 >= 0x2000000000000)
                goto LABEL_634;
LABEL_69:
              v36 = 0x2000000000;
              goto LABEL_39;
            }
            if ((v274 & 0xFFFE000000000002) != 0)
            {
              v42 = v274 & 0xFFFFFFFFFFFFFFFELL;
LABEL_48:
              v40 = v42 == 6;
              v36 = 0x20000000000;
              v41 = 0x10000000000;
              goto LABEL_44;
            }
            if (qword_1ECF4C080 > v274)
              goto LABEL_698;
            if (v274 >> 36 || (v274 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_698;
            v276 = *(unsigned __int8 *)(v274 + 5);
            if (v276 != 2)
            {
              v36 = JSC::speculatedTypeMapping[v276];
              goto LABEL_39;
            }
            v348 = *(_QWORD *)(v274 + 8);
            if (v348)
              v349 = (v348 & 1) == 0;
            else
              v349 = 0;
            if (v349)
            {
              if (v348 < qword_1ECF4C080)
                goto LABEL_698;
              if (v348 >> 36 || (v348 & 0xFFFFFFFFFLL) == 0)
                goto LABEL_698;
              if ((*(_BYTE *)(v348 + 16) & 0x10) != 0)
                goto LABEL_67;
            }
            goto LABEL_73;
          case 2:
          case 4:
          case 0x11:
          case 0x12:
          case 0x13:
          case 0x23:
          case 0x24:
          case 0x25:
          case 0x36:
          case 0x38:
          case 0x39:
          case 0x3A:
          case 0x3B:
          case 0x3C:
          case 0x60:
          case 0x61:
          case 0x67:
          case 0x85:
          case 0x8D:
          case 0x91:
          case 0x92:
          case 0xB3:
          case 0xB4:
          case 0xB5:
          case 0xBA:
          case 0xBB:
          case 0xBC:
          case 0xBE:
          case 0x116:
          case 0x117:
          case 0x118:
          case 0x119:
          case 0x11A:
          case 0x11B:
          case 0x11C:
          case 0x11D:
          case 0x11E:
          case 0x11F:
          case 0x120:
          case 0x121:
          case 0x122:
          case 0x15C:
          case 0x15D:
          case 0x15E:
          case 0x15F:
          case 0x160:
          case 0x163:
          case 0x17E:
          case 0x17F:
          case 0x1A1:
            JSC::DFG::Graph::logAssertionFailure(v389, (JSC::DFG::Node *)v31, (const WTF::CString *)"./dfg/DFGPredictionPropagationPhase.cpp", (const char *)0x630, "void JSC::DFG::(anonymous namespace)::PredictionPropagationPhase::processInvariantsForNode()", "Unexpected node during prediction propagation");
            __break(0xC471u);
            JUMPOUT(0x19851751CLL);
          case 3:
            v273 = v31[8];
            v272 = 805306368;
            if (!*(_DWORD *)(v31[9] + 8))
              v272 = 0x3F73FFFFFFF7;
            goto LABEL_441;
          case 5:
            v36 = v31[9];
            goto LABEL_39;
          case 6:
          case 0xF:
          case 0x10:
          case 0x29:
          case 0x2B:
          case 0x2D:
          case 0x2F:
          case 0x32:
          case 0x34:
          case 0x37:
          case 0x3E:
          case 0x40:
          case 0x41:
          case 0x42:
          case 0x44:
          case 0x45:
          case 0x46:
          case 0x47:
          case 0x48:
          case 0x52:
          case 0x53:
          case 0x54:
          case 0x55:
          case 0x56:
          case 0x57:
          case 0x58:
          case 0x59:
          case 0x5A:
          case 0x5C:
          case 0xCA:
          case 0xCB:
          case 0xCC:
          case 0xCD:
          case 0xCF:
          case 0xD0:
          case 0xD1:
          case 0xD2:
          case 0xD3:
          case 0x13B:
          case 0x13C:
          case 0x13D:
          case 0x13F:
          case 0x140:
          case 0x189:
            v32 = HIDWORD(v394);
            if (HIDWORD(v394) == (_DWORD)v394)
            {
              v38 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v393, HIDWORD(v394) + 1, (unint64_t)&v399);
              v39 = HIDWORD(v394) + 1;
              *((_QWORD *)v393 + HIDWORD(v394)) = *v38;
              HIDWORD(v394) = v39;
            }
            else
            {
              *((_QWORD *)v393 + HIDWORD(v394)) = v31;
              HIDWORD(v394) = v32 + 1;
            }
            goto LABEL_22;
          case 7:
          case 0xA4:
          case 0xC4:
          case 0x103:
            v30 = v31[8] | 1;
            goto LABEL_21;
          case 8:
            v30 = v31[8] | 0x100000;
            goto LABEL_21;
          case 9:
          case 0xA:
          case 0xA5:
          case 0xA6:
          case 0xA7:
          case 0xA9:
          case 0x104:
          case 0x105:
          case 0x159:
          case 0x15A:
          case 0x162:
            v30 = v31[8] | 0x8000000;
            goto LABEL_21;
          case 0xB:
          case 0x96:
          case 0x97:
          case 0x14A:
          case 0x167:
          case 0x168:
          case 0x169:
          case 0x16A:
          case 0x16B:
            v30 = v31[8] | 4;
            goto LABEL_21;
          case 0xD:
          case 0x2A:
          case 0x2C:
          case 0x2E:
          case 0x30:
          case 0x31:
          case 0x33:
          case 0x35:
          case 0x3F:
          case 0x43:
          case 0x9E:
          case 0x9F:
          case 0xA1:
          case 0xA2:
          case 0xD7:
          case 0xE2:
          case 0xE3:
          case 0xE4:
          case 0x113:
          case 0x188:
          case 0x18A:
          case 0x191:
          case 0x19E:
            v30 = v31[8] | 0x300000000;
            goto LABEL_21;
          case 0x1A:
          case 0x16F:
            __break(0xC471u);
            JUMPOUT(0x198517650);
          case 0x1B:
            __break(0xC471u);
            JUMPOUT(0x1985177ECLL);
          case 0x1E:
            v262 = *((_DWORD *)v31 + 18) + ~*(_DWORD *)((v31[3] & 0xFF00FFFFFFFFFFFFLL) + 0x30);
            if (v397 <= v262)
            {
              __break(0xC471u);
              JUMPOUT(0x198517974);
            }
            v36 = *((_QWORD *)v395 + v262);
            goto LABEL_39;
          case 0x21:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x6D:
          case 0x6E:
          case 0x6F:
          case 0x70:
          case 0x71:
          case 0x72:
          case 0x73:
          case 0x74:
          case 0x8E:
          case 0x8F:
          case 0x98:
          case 0x9A:
          case 0xAB:
          case 0xAD:
          case 0xAE:
          case 0xB0:
          case 0xC1:
          case 0xC2:
          case 0xD4:
          case 0xD5:
          case 0xD8:
          case 0xD9:
          case 0xDA:
          case 0xDB:
          case 0xDC:
          case 0xDD:
          case 0xDE:
          case 0xDF:
          case 0xE0:
          case 0xE1:
          case 0xF1:
          case 0xF2:
          case 0xF3:
          case 0xF4:
          case 0xF5:
          case 0xF6:
          case 0xF7:
          case 0xF8:
          case 0xF9:
          case 0xFA:
          case 0xFB:
          case 0xFC:
          case 0xFD:
          case 0xFE:
          case 0xFF:
          case 0x108:
          case 0x141:
          case 0x142:
          case 0x143:
          case 0x144:
          case 0x146:
          case 0x157:
          case 0x164:
          case 0x166:
          case 0x184:
          case 0x18B:
          case 0x18D:
          case 0x18E:
          case 0x192:
          case 0x193:
          case 0x19A:
          case 0x1A0:
          case 0x1AB:
          case 0x1AC:
          case 0x1AE:
            v36 = v31[10];
            goto LABEL_39;
          case 0x3D:
          case 0xA0:
          case 0xA3:
            v30 = v31[8] | 0xC00000000;
            goto LABEL_21;
          case 0x49:
          case 0x4A:
          case 0x50:
          case 0x51:
            goto LABEL_687;
          case 0x4B:
            v30 = v31[8] | 0x3000000000;
            goto LABEL_21;
          case 0x4C:
          case 0x4D:
          case 0x4E:
          case 0x4F:
            v326 = v31[10];
            if (v326)
              v327 = (v326 & 0xFFFFFEFCFFFFFFFFLL) == 0;
            else
              v327 = 0;
            if (!v327
              || (ShouldSpeculateInt32 = JSC::DFG::Graph::roundShouldSpeculateInt32((uint64_t)v389, (uint64_t *)v31, v401),
                  v31 = (unint64_t *)v399,
                  !ShouldSpeculateInt32))
            {
LABEL_687:
              v30 = v31[8] | 0x7000000000;
              goto LABEL_21;
            }
            v329 = *((_QWORD *)v399 + 8);
LABEL_542:
            v330 = v329 | 0x300000000;
LABEL_543:
            v31[8] = v330;
            goto LABEL_22;
          case 0x5B:
          case 0x94:
          case 0xC8:
          case 0xE5:
          case 0x13E:
          case 0x145:
          case 0x147:
          case 0x148:
          case 0x149:
          case 0x14B:
          case 0x19B:
          case 0x19C:
          case 0x19D:
          case 0x19F:
            v30 = v31[8] | 0x30000000;
            goto LABEL_21;
          case 0x82:
          case 0x83:
          case 0x9D:
          case 0xCE:
          case 0xE7:
          case 0xE8:
          case 0xE9:
          case 0xEA:
          case 0xEB:
          case 0xEC:
          case 0xED:
          case 0xEE:
          case 0xEF:
          case 0xF0:
          case 0x123:
          case 0x124:
          case 0x125:
          case 0x126:
          case 0x127:
          case 0x128:
          case 0x129:
          case 0x12A:
          case 0x12B:
          case 0x12C:
          case 0x12D:
          case 0x12E:
          case 0x12F:
          case 0x130:
          case 0x131:
          case 0x132:
          case 0x133:
          case 0x134:
          case 0x135:
          case 0x136:
          case 0x137:
          case 0x139:
          case 0x13A:
          case 0x14D:
          case 0x14E:
          case 0x14F:
          case 0x150:
          case 0x151:
          case 0x152:
          case 0x156:
          case 0x180:
          case 0x185:
          case 0x186:
          case 0x18C:
          case 0x196:
            v30 = v31[8] | 0x10000000000;
            goto LABEL_21;
          case 0x86:
          case 0x99:
          case 0x115:
          case 0x18F:
          case 0x190:
            v30 = v31[8] | 0x80000000;
            goto LABEL_21;
          case 0x88:
          case 0x89:
          case 0x8A:
          case 0x93:
            v30 = v31[8] | 0x20000000000;
            goto LABEL_21;
          case 0xA8:
          case 0x197:
            v272 = v31[8];
            v273 = 0x3F73FFFFFFF7;
            goto LABEL_441;
          case 0xAA:
            v272 = v31[8];
            v273 = 0x20000FFFFFF7;
            goto LABEL_441;
          case 0xC5:
          case 0xC6:
          case 0xC7:
          case 0xC9:
          case 0xD6:
          case 0x106:
          case 0x107:
          case 0x109:
          case 0x10A:
          case 0x10B:
          case 0x114:
            v30 = v31[8] | 2;
            goto LABEL_21;
          case 0xE6:
            v31[8] |= 0x30000000uLL;
            v345 = *(_DWORD *)((v31[3] & 0xFF00FFFFFFFFFFFFLL) + 0x38);
            if ((v345 | 0x44000) != v345)
              *(_DWORD *)((v31[3] & 0xFF00FFFFFFFFFFFFLL) + 0x38) = v345 | 0x44000;
            goto LABEL_22;
          case 0x10C:
            v37 = v31[8];
            v36 = JSC::speculatedTypeMapping[*(unsigned __int8 *)(v31[9] + 9)];
            goto LABEL_40;
          case 0x10D:
            v346 = *((unsigned __int8 *)v31 + 72) - 1;
            if (v346 >= 0xB)
            {
              __break(0xC471u);
              JUMPOUT(0x19851796CLL);
            }
            v36 = qword_1991563E8[(char)v346];
            goto LABEL_39;
          case 0x10E:
            v30 = v31[8] | 0x40000;
            goto LABEL_21;
          case 0x10F:
            v30 = v31[8] | 0x40000000;
            goto LABEL_21;
          case 0x110:
            v30 = v31[8] | 0x20000;
            goto LABEL_21;
          case 0x111:
            v30 = v31[8] | 0x200000;
            goto LABEL_21;
          case 0x112:
            v30 = v31[8] | 0x400000;
            goto LABEL_21;
          case 0x138:
          case 0x14C:
          case 0x183:
            v30 = v31[8] | 0x10000000;
            goto LABEL_21;
          case 0x15B:
            v30 = v31[8] | 0x8000;
            goto LABEL_21;
          case 0x161:
            v30 = v31[8] | 0x10000;
            goto LABEL_21;
          case 0x181:
            v272 = v31[8];
            v273 = 0x2800FFFFFFF7;
LABEL_441:
            v30 = v272 | v273;
            goto LABEL_21;
          case 0x182:
            v277 = *((_DWORD *)v31 + 12);
            v278 = v397;
            if (v397 <= ~v277)
              v278 = ~v277;
            v279 = v278 + v277;
            if (v278 + v277 == -1 || (v280 = v395, *((_QWORD *)v395 + ~v277) |= 0x300000000uLL, !v279))
            {
              __break(0xC471u);
              JUMPOUT(0x19851794CLL);
            }
            *((_QWORD *)v280 + -v277) |= 0x300000000uLL;
            goto LABEL_22;
          case 0x1A3:
            v329 = v31[8];
            if (*((unsigned __int8 *)v31 + 72) == 165)
              goto LABEL_542;
            v330 = v329 | 0x20000000000;
            goto LABEL_543;
          case 0x1AF:
          case 0x1B0:
            v30 = v31[8] | 0xFF00000000;
            goto LABEL_21;
          default:
            goto LABEL_22;
        }
      }
    }
  }
  do
  {
LABEL_85:
    v400 = 0;
    if (!HIDWORD(v394))
      break;
    v49 = v393;
    v50 = 8 * HIDWORD(v394);
    do
    {
      v51 = *(unint64_t **)v49;
      v49 = (WTF *)((char *)v49 + 8);
      v399 = (JSC::DFG::Node *)v51;
      v50 -= 8;
    }
    while (v50);
    if (!v400)
      break;
    v400 = 0;
    if (!HIDWORD(v394))
      break;
    v47 = HIDWORD(v394) - 1;
    v48 = 8 * (HIDWORD(v394) - 1);
    do
    {
      if (HIDWORD(v394) <= v47)
      {
        __break(0xC471u);
        JUMPOUT(0x198517934);
      }
      v399 = *(JSC::DFG::Node **)((char *)v393 + v48);
      v48 -= 8;
      --v47;
    }
    while (v47 != -1);
  }
  while (v400);
  v401 = 1;
  do
  {
    v400 = 0;
    if (!HIDWORD(v394))
      break;
    v52 = v393;
    v53 = 8 * HIDWORD(v394);
    do
    {
      v54 = *(unint64_t **)v52;
      v52 = (WTF *)((char *)v52 + 8);
      v399 = (JSC::DFG::Node *)v54;
      v53 -= 8;
    }
    while (v53);
    if (!v400)
      break;
    v400 = 0;
    if (!HIDWORD(v394))
      break;
    v55 = HIDWORD(v394) - 1;
    v56 = 8 * (HIDWORD(v394) - 1);
    do
    {
      if (HIDWORD(v394) <= v55)
      {
        __break(0xC471u);
        JUMPOUT(0x19851793CLL);
      }
      v399 = *(JSC::DFG::Node **)((char *)v393 + v56);
      v56 -= 8;
      --v55;
    }
    while (v55 != -1);
  }
  while (v400);
  v401 = 2;
  do
  {
    v400 = 0;
    v57 = v389;
    v58 = *((_QWORD *)v389 + 58);
    if (v58)
    {
      v59 = 0;
      v60 = 0;
      v61 = *((unsigned int *)v389 + 121);
      do
      {
        if (v59 >> 4 >= v61)
        {
          __break(0xC471u);
          JUMPOUT(0x1985178FCLL);
        }
        v62 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)v57 + 59) + 8 * (v59 >> 4)) + ((v59 & 0xF) << 6));
        v63 = v62;
        do
        {
          v64 = v63;
          v63 = (_QWORD *)*v63;
        }
        while (v63);
        if (v64 != v62)
          *v62 = v64;
        v64[6] = 0;
        v59 = ++v60;
      }
      while (v58 > v60);
    }
    if (*((_DWORD *)v57 + 15))
    {
      v65 = 0;
      do
      {
        v66 = *(_QWORD *)(*((_QWORD *)v57 + 6) + 8 * v65);
        if (v66 && *(_DWORD *)(v66 + 220))
        {
          v67 = 0;
          while (2)
          {
            v399 = *(JSC::DFG::Node **)(*(_QWORD *)(v66 + 208) + 8 * v67);
            v69 = v399;
            v70 = *(float *)(v66 + 192);
            v71 = *((unsigned __int16 *)v399 + 9);
            switch(*((_WORD *)v399 + 9))
            {
              case 0x10:
                v72 = *(_QWORD *)((*((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
                if (v72)
                  v73 = (v72 & 0xFFFFFF0FFFFFFFFFLL) == 0;
                else
                  v73 = 0;
                if (v73)
                {
                  v116 = (float *)*((_QWORD *)v399 + 9);
                  v117 = v116;
                  do
                  {
                    v118 = v117;
                    v117 = *(float **)v117;
                  }
                  while (v117);
                  goto LABEL_201;
                }
                v74 = (v72 & 0xFF00000000) != 0 && (v72 & 0xFFFFFF00FFFFFFFFLL) == 0;
                if (!v74 || (v72 ? (v86 = (v72 & 0xFFFFFFF0FFFFFFFFLL) == 0) : (v86 = 0), v86))
                {
                  v75 = (float *)*((_QWORD *)v399 + 9);
                  v76 = v75;
                  do
                  {
                    v77 = v76;
                    v76 = *(float **)v76;
                  }
                  while (v76);
                  goto LABEL_127;
                }
                goto LABEL_115;
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x15:
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
              case 0x21:
              case 0x22:
              case 0x23:
              case 0x24:
              case 0x25:
              case 0x26:
              case 0x27:
              case 0x28:
              case 0x29:
              case 0x2A:
              case 0x2B:
              case 0x2C:
              case 0x2D:
              case 0x2E:
              case 0x2F:
              case 0x30:
              case 0x31:
              case 0x32:
              case 0x33:
              case 0x34:
              case 0x35:
              case 0x36:
              case 0x37:
              case 0x38:
              case 0x39:
              case 0x3A:
              case 0x3B:
              case 0x3C:
              case 0x3D:
              case 0x3F:
              case 0x41:
              case 0x43:
              case 0x49:
              case 0x4A:
              case 0x4B:
              case 0x4C:
              case 0x4D:
              case 0x4E:
              case 0x4F:
              case 0x52:
              case 0x53:
              case 0x54:
              case 0x59:
              case 0x5B:
              case 0x5C:
              case 0x5D:
              case 0x5E:
              case 0x5F:
              case 0x60:
              case 0x61:
              case 0x62:
              case 0x63:
              case 0x64:
                goto LABEL_132;
              case 0x14:
                goto LABEL_115;
              case 0x3E:
              case 0x40:
              case 0x55:
              case 0x56:
                v99 = *(_QWORD *)((*((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
                v100 = v99 & 0xFF00000000;
                v101 = v99 & 0xFFFFFF00FFFFFFFFLL;
                if (v100)
                  v102 = v101 == 0;
                else
                  v102 = 0;
                if (!v102)
                  goto LABEL_186;
                v103 = *(_QWORD *)((*((_QWORD *)v399 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
                v104 = v103 & 0xFF00000000;
                v105 = v103 & 0xFFFFFF00FFFFFFFFLL;
                v106 = v104 && v105 == 0;
                if (!v106 || JSC::DFG::Graph::addSpeculationMode((uint64_t)v389, (uint64_t)v399, v401))
                  goto LABEL_186;
                v204 = *(_QWORD *)v69;
                v205 = *(_QWORD *)v69 & 0xFFFFFFFF8;
                if ((*(_QWORD *)v69 & 1) != 0)
                  v205 = *(_QWORD *)(*(_QWORD *)v69 & 0xFFFFFFFF8);
                if (v205)
                  v206 = *(_QWORD *)(v205 + 8);
                else
                  v206 = *((_QWORD *)v389 + 5);
                if ((v204 & 2) != 0)
                {
                  LODWORD(v207) = -1;
                }
                else if ((v204 & 1) != 0)
                {
                  LODWORD(v207) = *(_DWORD *)((*(_QWORD *)v69 & 0xFFFFFFFF8) + 8);
                }
                else
                {
                  v207 = v204 >> 36;
                }
                v208 = *((_QWORD *)v69 + 3);
                v209 = *((_QWORD *)v69 + 4);
                v210 = *(_QWORD *)(v206 + 56);
                LODWORD(v406) = v207;
                WORD2(v406) = 12;
                BYTE6(v406) = 0;
                v211 = (unsigned __int8 *)(v210 + 31);
                v409 = 0;
                *((_QWORD *)&v407 + 1) = v210 + 31;
                v408 = 1;
                if (__ldaxr((unsigned __int8 *)(v210 + 31)))
                {
                  __clrex();
LABEL_316:
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v211);
                  goto LABEL_317;
                }
                if (__stxr(1u, v211))
                  goto LABEL_316;
LABEL_317:
                v409 = 1;
                hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v210 + 96), (uint64_t)&v407, (int *)&v406);
                if (!v408)
                  goto LABEL_318;
                v247 = (WTF::Lock *)*((_QWORD *)&v407 + 1);
                v248 = __ldxr(*((unsigned __int8 **)&v407 + 1));
                if (v248 == 1)
                {
                  if (!__stlxr(0, *((unsigned __int8 **)&v407 + 1)))
                    goto LABEL_318;
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow(v247, v213, v214, v215, v216, v217, v218, v219);
LABEL_318:
                if ((hasExitSite & 1) != 0)
                {
                  v107 = 1;
                }
                else
                {
                  v221 = *(_QWORD *)((v208 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
                  v222 = *(_QWORD *)((v209 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
                  v224 = (v222 & 0xFFFFFFF0FFFFFFFFLL) == 0 && v222 != 0;
                  if (v221)
                    v225 = (v221 & 0xFFFFFFF0FFFFFFFFLL) == 0;
                  else
                    v225 = 0;
                  if (v225)
                  {
                    if (v224)
                      goto LABEL_186;
                  }
                  else if (!v224)
                  {
                    goto LABEL_330;
                  }
                  v314 = *((_DWORD *)v69 + 14);
                  v315 = v314 & 0xFC000;
                  if ((v314 & 0xFC000) == 0)
                  {
LABEL_330:
                    v107 = 1;
                    goto LABEL_187;
                  }
                  v316 = v314 & 0xDC000;
                  v107 = 1;
                  if (v316 == v315)
                  {
                    if (*(_WORD *)((v208 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 1 || !v221)
                      goto LABEL_330;
                    v107 = 1;
                    if ((v221 & 0xFFFFFFE0FFFFFFFFLL) == 0)
                    {
                      if (*(_WORD *)((v209 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 1)
                        goto LABEL_330;
                      v107 = 1;
                      if (v222 && (v222 & 0xFFFFFFE0FFFFFFFFLL) == 0)
LABEL_186:
                        v107 = 0;
                    }
                  }
                }
LABEL_187:
                v108 = *((_QWORD *)v69 + 3) & 0xFF00FFFFFFFFFFFFLL;
                v109 = *(unsigned __int16 *)(v108 + 0x12);
                if ((v109 & 0xFFFE) == 0x36)
                {
                  v108 = *(_QWORD *)((*((_QWORD *)v69 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                  v109 = *(unsigned __int16 *)(v108 + 0x12);
                }
                if (v109 == 15)
                {
                  v137 = *(float **)(v108 + 72);
                  v138 = v137;
                  do
                  {
                    v139 = v138;
                    v138 = *(float **)v138;
                  }
                  while (v138);
                  if (v139 != v137)
                    *(_QWORD *)v137 = v139;
                  v139[v107 + 12] = v70 + v139[v107 + 12];
                }
                v110 = *((_QWORD *)v69 + 4) & 0xFF00FFFFFFFFFFFFLL;
                v111 = *(unsigned __int16 *)(v110 + 0x12);
                if ((v111 & 0xFFFE) == 0x36)
                {
                  v110 = *(_QWORD *)((*((_QWORD *)v69 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                  v111 = *(unsigned __int16 *)(v110 + 0x12);
                }
                if (v111 == 15)
                {
                  v112 = *(_QWORD **)(v110 + 72);
                  v113 = v112;
                  do
                  {
                    v114 = v113;
                    v113 = (_QWORD *)*v113;
                  }
                  while (v113);
LABEL_195:
                  if (v114 != v112)
                    *v112 = v114;
                  v115 = (float *)v114 + v107;
LABEL_198:
                  v115[12] = v70 + v115[12];
                }
                goto LABEL_115;
              case 0x42:
              case 0x57:
                v226 = *(_QWORD *)((*((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
                v227 = *(_QWORD *)((*((_QWORD *)v399 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
                if ((v226 & 0xFF00000000) == 0
                  || (v226 & 0xFFFFFF00FFFFFFFFLL) != 0
                  || (v227 & 0xFF00000000) == 0
                  || (v227 & 0xFFFFFF00FFFFFFFFLL) != 0)
                {
                  goto LABEL_410;
                }
                v231 = v226 | v227;
                if ((v231 & 0x8F800000000) != 0)
                  goto LABEL_343;
                if (v401)
                  v256 = 384;
                else
                  v256 = 256;
                v257 = *((_DWORD *)v399 + 14);
                v258 = v257 & 0xFFFE0;
                v259 = (v71 - 66) > 0x15 || ((1 << (v71 - 66)) & 0x243C0D) == 0;
                v260 = v257 & 0xF7FE0;
                if (!v259)
                  v260 = v258;
                if (v71 == 74)
                  v260 = v258;
                if ((v260 & v256) != 0)
                {
                  if ((v260 & 0x4000) == 0)
                    goto LABEL_410;
                }
                else
                {
                  if (v401)
                    v310 = 1536;
                  else
                    v310 = 1024;
                  v311 = v260 & v310;
                  v312 = v260 & 0x8000;
                  if (v311)
                    v313 = v312 == 0;
                  else
                    v313 = 1;
                  if (v313)
                    goto LABEL_410;
                }
LABEL_343:
                if ((v231 & 0xFFFFFFF0FFFFFFFFLL) != 0)
                  goto LABEL_344;
                if (v401)
                  v351 = 1536;
                else
                  v351 = 1024;
                v352 = *((_DWORD *)v399 + 14);
                v353 = v352 & 0xFFFE0;
                v354 = (v71 - 66) > 0x15 || ((1 << (v71 - 66)) & 0x243C0D) == 0;
                v355 = v352 & 0xF7FE0;
                if (!v354)
                  v355 = v353;
                v356 = v71 == 74 ? v353 : v355;
                if ((v356 & 0x40) != 0
                  || ((v357 = v356 & v351, v358 = v356 & 0x8000, v357) ? (v359 = v358 == 0) : (v359 = 1),
                      !v359 || (JSC::DFG::Graph::hasExitSite((uint64_t)v389, (unint64_t *)v399, 12) & 1) != 0))
                {
LABEL_344:
                  v107 = 1;
                  goto LABEL_345;
                }
LABEL_410:
                v107 = 0;
LABEL_345:
                v232 = *((_QWORD *)v69 + 3) & 0xFF00FFFFFFFFFFFFLL;
                v233 = *(unsigned __int16 *)(v232 + 0x12);
                if ((v233 & 0xFFFE) == 0x36)
                {
                  v232 = *(_QWORD *)((*((_QWORD *)v69 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                  v233 = *(unsigned __int16 *)(v232 + 0x12);
                }
                if (v233 == 15)
                {
                  v263 = *(float **)(v232 + 72);
                  v264 = v263;
                  do
                  {
                    v265 = v264;
                    v264 = *(float **)v264;
                  }
                  while (v264);
                  if (v265 != v263)
                    *(_QWORD *)v263 = v265;
                  v265[v107 + 12] = v70 + v265[v107 + 12];
                }
                v234 = *((_QWORD *)v69 + 4) & 0xFF00FFFFFFFFFFFFLL;
                v235 = *(unsigned __int16 *)(v234 + 0x12);
                if ((v235 & 0xFFFE) == 0x36)
                {
                  v234 = *(_QWORD *)((*((_QWORD *)v69 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                  v235 = *(unsigned __int16 *)(v234 + 0x12);
                }
                if (v235 != 15)
                  goto LABEL_115;
                v112 = *(_QWORD **)(v234 + 72);
                v236 = v112;
                do
                {
                  v114 = v236;
                  v236 = (_QWORD *)*v236;
                }
                while (v236);
                goto LABEL_195;
              case 0x44:
              case 0x45:
              case 0x58:
              case 0x5A:
                v237 = *((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL;
                v238 = *(_QWORD *)(v237 + 0x40);
                v239 = *((_QWORD *)v399 + 4) & 0xFF00FFFFFFFFFFFFLL;
                v240 = *(_QWORD *)(v239 + 0x40);
                if ((v238 & 0xFF00000000) == 0
                  || (v238 & 0xFFFFFF00FFFFFFFFLL) != 0
                  || (v240 & 0xFF00000000) == 0
                  || (v240 & 0xFFFFFF00FFFFFFFFLL) != 0)
                {
                  goto LABEL_439;
                }
                if (((v238 | v240) & 0x8F800000000) != 0)
                  goto LABEL_368;
                if (v401)
                  v266 = 384;
                else
                  v266 = 256;
                v267 = *((_DWORD *)v399 + 14);
                v268 = v267 & 0xFFFE0;
                v269 = (v71 - 68) > 0x14 || ((1 << (v71 - 68)) & 0x190F03) == 0;
                v270 = v267 & 0xF7FE0;
                if (!v269)
                  v270 = v268;
                if (v71 == 74)
                  v271 = v268;
                else
                  v271 = v270;
                if ((v271 & v266) != 0)
                {
                  if ((v271 & 0x4000) != 0)
                    goto LABEL_368;
                }
                else
                {
                  if (v401)
                    v331 = 1536;
                  else
                    v331 = 1024;
                  v332 = v271 & v331;
                  v333 = v271 & 0x8000;
                  if (v332)
                    v334 = v333 == 0;
                  else
                    v334 = 1;
                  if (!v334)
                  {
LABEL_368:
                    v107 = 1;
                    goto LABEL_369;
                  }
                }
LABEL_439:
                v107 = 0;
LABEL_369:
                v244 = *(unsigned __int16 *)((*((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                if ((v244 & 0xFFFE) == 0x36)
                {
                  v237 = *(_QWORD *)((*((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                  v244 = *(unsigned __int16 *)(v237 + 0x12);
                }
                if (v244 == 15)
                {
                  v307 = *(float **)(v237 + 72);
                  v308 = v307;
                  do
                  {
                    v309 = v308;
                    v308 = *(float **)v308;
                  }
                  while (v308);
                  if (v309 != v307)
                    *(_QWORD *)v307 = v309;
                  v309[v107 + 12] = v70 + v309[v107 + 12];
                }
                v245 = *(unsigned __int16 *)(v239 + 18);
                if ((v245 & 0xFFFE) == 0x36)
                {
                  v239 = *(_QWORD *)(v239 + 24) & 0xFF00FFFFFFFFFFFFLL;
                  v245 = *(unsigned __int16 *)(v239 + 18);
                }
                if (v245 != 15)
                  goto LABEL_115;
                v112 = *(_QWORD **)(v239 + 72);
                v246 = v112;
                do
                {
                  v114 = v246;
                  v246 = (_QWORD *)*v246;
                }
                while (v246);
                goto LABEL_195;
              case 0x46:
                v335 = *((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL;
                v336 = *(_QWORD *)(v335 + 0x40);
                v337 = (v336 & 0xFF00000000) != 0 && (v336 & 0xFFFFFF00FFFFFFFFLL) == 0;
                v340 = 0;
                if (v337)
                {
                  if ((v336 & 0x8F800000000) != 0
                    || (!v401
                     || (*((_QWORD *)v399 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0
                     && (*(_BYTE *)((*((_QWORD *)v399 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0
                      ? (v338 = 256)
                      : (v338 = 384),
                        (*((_DWORD *)v399 + 14) & v338) != 0
                      ? (v339 = (*((_DWORD *)v399 + 14) & 0x4000) == 0)
                      : (v339 = 1),
                        !v339))
                  {
                    v340 = 1;
                  }
                }
                v341 = *(unsigned __int16 *)((*((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                if ((v341 & 0xFFFE) == 0x36)
                {
                  v335 = *(_QWORD *)((*((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                  v341 = *(unsigned __int16 *)(v335 + 0x12);
                }
                if (v341 != 15)
                  goto LABEL_115;
                v342 = *(_QWORD **)(v335 + 72);
                v343 = v342;
                do
                {
                  v344 = v343;
                  v343 = (_QWORD *)*v343;
                }
                while (v343);
                if (v344 != v342)
                  *v342 = v344;
                v115 = (float *)v344 + v340;
                goto LABEL_198;
              case 0x47:
              case 0x48:
                v281 = v389;
                v283 = (unint64_t *)((char *)v399 + 24);
                v282 = *((_QWORD *)v399 + 3);
                v284 = *((_DWORD *)v399 + 14);
                if ((v284 & 0x10) != 0)
                {
                  v285 = *((_DWORD *)v399 + 8);
                  v286 = (v285 + v282);
                  if (v286 <= v282)
                    goto LABEL_475;
                  v287 = *((_DWORD *)v389 + 41);
                  v288 = v287 >= v282;
                  v289 = v287 - v282;
                  if (!v288)
                    v289 = 0;
                  if (v289 <= v285 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19851797CLL);
                  }
                  v290 = v286 - v282;
                  v291 = (uint64_t *)(*((_QWORD *)v389 + 19) + 8 * v282);
                  v292 = 1;
                  do
                  {
                    v293 = *v291++;
                    v294 = v293 & 0xFF00FFFFFFFFFFFFLL;
                    if ((v293 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v295 = *(_QWORD *)(v294 + 64);
                      if ((v295 & 0xFFFFFF00FFFFFFFFLL) != 0 || (v295 & 0xFF00000000) == 0)
                        v292 = 0;
                    }
                    --v290;
                  }
                  while (v290);
LABEL_474:
                  if (v292)
                    goto LABEL_475;
                  goto LABEL_680;
                }
                v368 = v282 & 0xFF00FFFFFFFFFFFFLL;
                if (!v368)
                {
LABEL_475:
                  v297 = JSC::DFG::Graph::variadicArithShouldSpeculateInt32((uint64_t)v389, (uint64_t)v399, v401) ^ 1;
                  v281 = v389;
                  v284 = *((_DWORD *)v69 + 14);
                  goto LABEL_476;
                }
                v369 = *(_QWORD *)(v368 + 64);
                v292 = (v369 & 0xFFFFFF00FFFFFFFFLL) == 0 && (v369 & 0xFF00000000) != 0;
                if ((*((_QWORD *)v399 + 4) & 0xFF00FFFFFFFFFFFFLL) == 0)
                  goto LABEL_474;
                v370 = *(_QWORD *)((*((_QWORD *)v399 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
                if ((v370 & 0xFFFFFF00FFFFFFFFLL) != 0 || (v370 & 0xFF00000000) == 0)
                  v292 = 0;
                if ((*((_QWORD *)v399 + 5) & 0xFF00FFFFFFFFFFFFLL) == 0)
                  goto LABEL_474;
                v372 = *(_QWORD *)((*((_QWORD *)v399 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
                v373 = v372 & 0xFF00000000;
                v374 = v372 & 0xFFFFFF00FFFFFFFFLL;
                if (v373 && v374 == 0)
                  goto LABEL_474;
LABEL_680:
                v297 = 0;
LABEL_476:
                if ((v284 & 0x10) != 0)
                {
                  v298 = *((_QWORD *)v69 + 3);
                  v299 = (*((_DWORD *)v69 + 8) + v298);
                  if (v299 > v298)
                  {
                    v300 = *((_QWORD *)v69 + 3);
                    v301 = *((_DWORD *)v281 + 41);
                    if (v301 <= v298)
                      v298 = v298;
                    else
                      v298 = v301;
                    do
                    {
                      if (v300 == v298)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198517984);
                      }
                      v302 = *(_QWORD *)(*((_QWORD *)v281 + 19) + 8 * v300) & 0xFF00FFFFFFFFFFFFLL;
                      if (v302)
                      {
                        v303 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)v281 + 19) + 8 * v300) & 0xFF00FFFFFFFFFFFFLL)
                                                   + 0x12);
                        if ((v303 & 0xFFFE) == 0x36)
                        {
                          v302 = *(_QWORD *)((*(_QWORD *)(*((_QWORD *)v281 + 19) + 8 * v300) & 0xFF00FFFFFFFFFFFFLL)
                                           + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                          v303 = *(unsigned __int16 *)(v302 + 0x12);
                        }
                        if (v303 == 15)
                        {
                          v304 = *(float **)(v302 + 72);
                          v305 = v304;
                          do
                          {
                            v306 = v305;
                            v305 = *(float **)v305;
                          }
                          while (v305);
                          if (v306 != v304)
                            *(_QWORD *)v304 = v306;
                          v306[v297 + 12] = v70 + v306[v297 + 12];
                        }
                      }
                      ++v300;
                    }
                    while (v300 != v299);
                  }
                }
                else
                {
                  for (i = 0; i != 3; ++i)
                  {
                    v377 = v283[i];
                    if ((v377 & 0xFF00FFFFFFFFFFFFLL) == 0)
                      break;
                  }
                }
                goto LABEL_115;
              case 0x50:
              case 0x51:
                v318 = *((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL;
                v319 = *(_QWORD *)(v318 + 0x40);
                v320 = v319 & 0xFF00000000;
                v321 = v319 & 0xFFFFFF00FFFFFFFFLL;
                v322 = *(unsigned __int16 *)(v318 + 0x12);
                v323 = v322 & 0xFFFE;
                if (v320)
                  v324 = v321 == 0;
                else
                  v324 = 0;
                if (v324)
                {
                  if (v323 == 54)
                  {
                    v318 = *(_QWORD *)((*((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                    v322 = *(unsigned __int16 *)(v318 + 0x12);
                  }
                  if (v322 == 15)
                  {
                    v116 = *(float **)(v318 + 72);
                    v325 = v116;
                    do
                    {
                      v118 = v325;
                      v325 = *(float **)v325;
                    }
                    while (v325);
                    goto LABEL_201;
                  }
                }
                else
                {
                  if (v323 == 54)
                  {
                    v318 = *(_QWORD *)((*((_QWORD *)v399 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                    v322 = *(unsigned __int16 *)(v318 + 0x12);
                  }
                  if (v322 == 15)
                  {
                    v75 = *(float **)(v318 + 72);
                    v347 = v75;
                    do
                    {
                      v77 = v347;
                      v347 = *(float **)v347;
                    }
                    while (v347);
                    goto LABEL_127;
                  }
                }
                goto LABEL_115;
              case 0x65:
              case 0x66:
              case 0x67:
              case 0x68:
                goto LABEL_204;
              default:
                if (v71 == 391)
                {
LABEL_204:
                  v119 = *((_QWORD *)v399 + 3);
                  v120 = *((_DWORD *)v389 + 41);
                  if (v120 <= v119)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19851799CLL);
                  }
                  v121 = v119 + 1;
                  if (v120 <= (int)v119 + 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985179A4);
                  }
                  v122 = v119 + 2;
                  if (v120 <= (int)v119 + 2)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1985179ACLL);
                  }
                  v123 = *((_QWORD *)v399 + 3);
                  v124 = *((_QWORD *)v389 + 19);
                  v125 = *(_QWORD *)(v124 + 8 * v123) & 0xFF00FFFFFFFFFFFFLL;
                  v126 = *(unsigned __int16 *)(v125 + 0x12);
                  if ((v126 & 0xFFFE) == 0x36)
                  {
                    v125 = *(_QWORD *)((*(_QWORD *)(v124 + 8 * v123) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                    v126 = *(unsigned __int16 *)(v125 + 0x12);
                  }
                  v127 = *(_QWORD *)(v124 + 8 * v121);
                  v128 = *(_QWORD *)(v124 + 8 * v122);
                  if (v126 == 15)
                  {
                    v249 = *(float **)(v125 + 72);
                    v250 = v249;
                    do
                    {
                      v251 = v250;
                      v250 = *(float **)v250;
                    }
                    while (v250);
                    if (v251 != v249)
                      *(_QWORD *)v249 = v251;
                    v251[12] = v70 + v251[12];
                  }
                  v129 = v127 & 0xFF00FFFFFFFFFFFFLL;
                  v130 = *(unsigned __int16 *)((v127 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  if ((v130 & 0xFFFE) == 0x36)
                  {
                    v129 = *(_QWORD *)((v127 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                    v130 = *(unsigned __int16 *)(v129 + 0x12);
                  }
                  if (v130 == 15)
                  {
                    v252 = *(float **)(v129 + 72);
                    v253 = v252;
                    do
                    {
                      v254 = v253;
                      v253 = *(float **)v253;
                    }
                    while (v253);
                    if (v254 != v252)
                      *(_QWORD *)v252 = v254;
                    v254[12] = v70 + v254[12];
                  }
                  if (v71 == 264)
                  {
                    v131 = *((_DWORD *)v69 + 18);
                  }
                  else if (v71 == 146)
                  {
                    LOBYTE(v131) = *((_BYTE *)v69 + 80);
                  }
                  else
                  {
                    LOBYTE(v131) = *((_BYTE *)v69 + 72);
                  }
                  v132 = v131;
                  v133 = v128 & 0xFF00FFFFFFFFFFFFLL;
                  v134 = *(unsigned __int16 *)((v128 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                  v135 = v134 & 0xFFFE;
                  if (v132 == 8)
                  {
                    if (v135 == 54)
                    {
                      v133 = *(_QWORD *)(v133 + 24) & 0xFF00FFFFFFFFFFFFLL;
                      v134 = *(unsigned __int16 *)(v133 + 18);
                    }
                    if (v134 == 15)
                    {
                      v116 = *(float **)(v133 + 72);
                      v317 = v116;
                      do
                      {
                        v118 = v317;
                        v317 = *(float **)v317;
                      }
                      while (v317);
LABEL_201:
                      if (v118 != v116)
                        *(_QWORD *)v116 = v118;
                      v118[13] = v70 + v118[13];
                    }
                  }
                  else
                  {
                    if (v135 == 54)
                    {
                      v133 = *(_QWORD *)(v133 + 24) & 0xFF00FFFFFFFFFFFFLL;
                      v134 = *(unsigned __int16 *)(v133 + 18);
                    }
                    if (v134 == 15)
                    {
                      v75 = *(float **)(v133 + 72);
                      v255 = v75;
                      do
                      {
                        v77 = v255;
                        v255 = *(float **)v255;
                      }
                      while (v255);
                      goto LABEL_127;
                    }
                  }
                }
                else if (v71 == 429)
                {
                  if ((*((_BYTE *)v399 + 75) & 1) != 0)
                  {
                    v364 = *((_DWORD *)v399 + 6) + 2;
                    if (*((_DWORD *)v389 + 41) <= v364)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198517994);
                    }
                    JSC::DFG::Graph::voteNode(*(_QWORD *)(*((_QWORD *)v389 + 19) + 8 * v364), v70);
                  }
                }
                else
                {
LABEL_132:
                  v78 = *((_QWORD *)v399 + 3);
                  if ((*((_BYTE *)v399 + 56) & 0x10) != 0)
                  {
                    v87 = (*((_DWORD *)v399 + 8) + v78);
                    if (v87 > v78)
                    {
                      v88 = v389;
                      v89 = *((_DWORD *)v389 + 41);
                      v90 = *((_QWORD *)v399 + 3);
                      if (v89 <= v78)
                        v78 = v78;
                      else
                        v78 = v89;
                      do
                      {
                        if (v90 == v78)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19851798CLL);
                        }
                        v91 = *(_QWORD *)(*((_QWORD *)v88 + 19) + 8 * v90) & 0xFF00FFFFFFFFFFFFLL;
                        if (v91)
                        {
                          v92 = *(unsigned __int16 *)((*(_QWORD *)(*((_QWORD *)v88 + 19) + 8 * v90) & 0xFF00FFFFFFFFFFFFLL)
                                                    + 0x12);
                          if ((v92 & 0xFFFE) == 0x36)
                          {
                            v91 = *(_QWORD *)((*(_QWORD *)(*((_QWORD *)v88 + 19) + 8 * v90) & 0xFF00FFFFFFFFFFFFLL)
                                            + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                            v92 = *(unsigned __int16 *)(v91 + 0x12);
                          }
                          if (v92 == 15)
                          {
                            v93 = *(float **)(v91 + 72);
                            v94 = v93;
                            do
                            {
                              v95 = v94;
                              v94 = *(float **)v94;
                            }
                            while (v94);
                            if (v95 != v93)
                              *(_QWORD *)v93 = v95;
                            v95[12] = v70 + v95[12];
                          }
                        }
                        ++v90;
                      }
                      while (v90 != v87);
                    }
                  }
                  else
                  {
                    v79 = v78 & 0xFF00FFFFFFFFFFFFLL;
                    if ((v78 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      v80 = *(unsigned __int16 *)((v78 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                      if ((v80 & 0xFFFE) == 0x36)
                      {
                        v79 = *(_QWORD *)((v78 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                        v80 = *(unsigned __int16 *)(v79 + 0x12);
                      }
                      if (v80 == 15)
                      {
                        v81 = *(float **)(v79 + 72);
                        v82 = v81;
                        do
                        {
                          v83 = v82;
                          v82 = *(float **)v82;
                        }
                        while (v82);
                        if (v83 != v81)
                          *(_QWORD *)v81 = v83;
                        v83[12] = v70 + v83[12];
                      }
                      v68 = *((_QWORD *)v69 + 4) & 0xFF00FFFFFFFFFFFFLL;
                      if (v68)
                      {
                        v84 = *(unsigned __int16 *)((*((_QWORD *)v69 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                        if ((v84 & 0xFFFE) == 0x36)
                        {
                          v68 = *(_QWORD *)((*((_QWORD *)v69 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                          v84 = *(unsigned __int16 *)(v68 + 0x12);
                        }
                        if (v84 == 15)
                        {
                          v98 = *(float **)(v68 + 72);
                          v97 = v98;
                          do
                          {
                            v96 = v97;
                            v97 = *(float **)v97;
                          }
                          while (v97);
                          if (v96 != v98)
                            *(_QWORD *)v98 = v96;
                          v96[12] = v70 + v96[12];
                        }
                        v85 = *((_QWORD *)v69 + 5) & 0xFF00FFFFFFFFFFFFLL;
                        if (v85)
                        {
                          v136 = *(unsigned __int16 *)((*((_QWORD *)v69 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
                          if ((v136 & 0xFFFE) == 0x36)
                          {
                            v85 = *(_QWORD *)((*((_QWORD *)v69 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
                            v136 = *(unsigned __int16 *)(v85 + 0x12);
                          }
                          if (v136 == 15)
                          {
                            v75 = *(float **)(v85 + 72);
                            v261 = v75;
                            do
                            {
                              v77 = v261;
                              v261 = *(float **)v261;
                            }
                            while (v261);
LABEL_127:
                            if (v77 != v75)
                              *(_QWORD *)v75 = v77;
                            v77[12] = v70 + v77[12];
                          }
                        }
                      }
                    }
                  }
                }
LABEL_115:
                if (++v67 < (unint64_t)*(unsigned int *)(v66 + 220))
                  continue;
                v57 = v389;
                break;
            }
            break;
          }
        }
        ++v65;
      }
      while (v65 < *((unsigned int *)v57 + 15));
      v58 = *((_QWORD *)v57 + 58);
    }
    if (v58)
    {
      v140 = 0;
      v141 = 0;
      v142 = v400;
      v143 = *(double *)&xmmword_1ECF4C558;
      v144 = v389;
      do
      {
        if (v140 >> 4 >= *((unsigned int *)v57 + 121))
        {
          __break(0xC471u);
          JUMPOUT(0x198517904);
        }
        v146 = *(_QWORD *)(*((_QWORD *)v57 + 59) + 8 * (v140 >> 4));
        v147 = v140 & 0xF;
        v148 = v146 + (v147 << 6);
        if (*(_QWORD *)v148)
          goto LABEL_234;
        if (!*(_DWORD *)(v148 + 28)
          || (v149 = v146 + (v147 << 6), *(_BYTE *)(v149 + 40))
          || (v150 = *(_DWORD *)(v149 + 36), (v150 & 0x80000) != 0))
        {
          v162 = v146 + (v147 << 6);
          v163 = *(int *)(v162 + 56);
          v152 = (unsigned int *)(v162 + 56);
          v153 = v163;
          if (v163 >= 4)
          {
            __break(0xC471u);
            JUMPOUT(0x198517630);
          }
        }
        else
        {
          v151 = v146 + (v147 << 6);
          v154 = *(int *)(v151 + 56);
          v152 = (unsigned int *)(v151 + 56);
          v153 = v154;
          if ((_DWORD)v154 == 3)
            goto LABEL_232;
          v155 = (_QWORD *)(v146 + (v147 << 6));
          do
          {
            v156 = v155;
            v155 = (_QWORD *)*v155;
          }
          while (v155);
          if (v156 != (_QWORD *)v148)
            *(_QWORD *)v148 = v156;
          v157 = v156[1];
          v158 = v157 & 0xFF00000000;
          v159 = v157 & 0xFFFFFF00FFFFFFFFLL;
          if (v158)
            v160 = v159 == 0;
          else
            v160 = 0;
          if (v160)
          {
            v164 = (_QWORD *)(v146 + (v147 << 6));
            do
            {
              v165 = v164;
              v164 = (_QWORD *)*v164;
            }
            while (v164);
            if (v165 != (_QWORD *)v148)
              *(_QWORD *)v148 = v165;
            v166 = v165[1];
            v167 = v166 && (v166 & 0xFFFFFF0FFFFFFFFFLL) == 0;
            if (v167
              || (v150 & 0x40000) == 0
              && *(float *)(v146 + (v147 << 6) + 52) / *(float *)(v146 + (v147 << 6) + 48) >= v143)
            {
              if ((_DWORD)v153)
              {
                switch((_DWORD)v153)
                {
                  case 2:
                    v161 = 3;
                    break;
                  case 1:
                    goto LABEL_232;
                  case 3:
                    v161 = 3;
                    break;
                  default:
                    __break(0xC471u);
                    JUMPOUT(0x19851792CLL);
                }
              }
              else
              {
                v161 = 1;
              }
              goto LABEL_251;
            }
          }
          if (v153 >= 4)
          {
            __break(0xC471u);
            JUMPOUT(0x1985175C4);
          }
        }
        v161 = dword_1991564E0[v153];
LABEL_251:
        if (v161 != (_DWORD)v153)
        {
          *v152 = v161;
          v145 = 1;
          goto LABEL_233;
        }
LABEL_232:
        v145 = 0;
LABEL_233:
        v142 |= v145;
        v400 = v142;
        v57 = v144;
LABEL_234:
        v140 = ++v141;
      }
      while (*((_QWORD *)v57 + 58) > (unint64_t)v141);
    }
    v174 = v389;
    v175 = *((_QWORD *)v389 + 58);
    v176 = v400;
    if (v175)
    {
      v177 = 0;
      v178 = *((unsigned int *)v389 + 121);
      v179 = 1;
      do
      {
        if (v177 >> 4 >= v178)
        {
          __break(0xC471u);
          JUMPOUT(0x19851790CLL);
        }
        v181 = *(_QWORD *)(*((_QWORD *)v174 + 59) + 8 * (v177 >> 4));
        v182 = v177 & 0xF;
        if (!*(_QWORD *)(v181 + (v182 << 6)))
        {
          v183 = v181 + (v182 << 6);
          if (*(_DWORD *)(v183 + 56) != 1)
            goto LABEL_269;
          v186 = *(_QWORD *)(v183 + 8);
          v184 = (uint64_t *)(v183 + 8);
          v185 = v186;
          v187 = v186 | 0x4000000000;
          if ((v186 & 0xFFFFFF8CFFFFFFFFLL) == 0)
            v187 = v185;
          if ((v187 & 0xF00000000) != 0)
            v187 |= 0x1000000000uLL;
          if (v185 == v187)
          {
LABEL_269:
            v180 = 0;
          }
          else
          {
            *v184 = v187;
            v180 = 1;
          }
          v176 |= v180;
          v400 = v176;
        }
        v177 = v179++;
      }
      while (v175 > v177);
    }
    if (!v176)
      goto LABEL_287;
    v400 = 0;
    if (!HIDWORD(v394))
      goto LABEL_287;
    v188 = v393;
    v189 = 8 * HIDWORD(v394);
    do
    {
      v190 = *(unint64_t **)v188;
      v188 = (WTF *)((char *)v188 + 8);
      v399 = (JSC::DFG::Node *)v190;
      v189 -= 8;
    }
    while (v189);
  }
  while (v400);
  v174 = v389;
LABEL_287:
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v191 = (*(_DWORD *)(*((_QWORD *)v174 + 3) + 16) & 0xFFFFFFFE) == 4) : (v191 = 0),
        !v191 ? (v192 = BYTE2(qword_1ECF4C32A) == 0) : (v192 = 0),
        !v192))
  {
    v407 = v390;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v174 + 1088, "Phase ", (uint64_t)&v407, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v402);
  v200 = v395;
  if (v398 != (_BYTE *)v395 && v395)
  {
    v395 = 0;
    v396 = 0;
    WTF::fastFree((unint64_t)v200, v193, v194, v195, v196, v197, v198, v199);
  }
  v201 = v393;
  if (v393)
  {
    v393 = 0;
    LODWORD(v394) = 0;
    WTF::fastFree((unint64_t)v201, v193, v194, v195, v196, v197, v198, v199);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v391)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v385, (uint64_t)v193, v194, v195, v196, v197, v198, v199);
  v202 = v392;
  v392 = 0;
  if (v202)
  {
    if (*(_DWORD *)v202 == 1)
      WTF::fastFree((unint64_t)v202, v193, v194, v195, v196, v197, v198, v199);
    else
      --*(_DWORD *)v202;
  }
  return 1;
}

uint64_t JSC::DFG::PromotedHeapLocation::createHint(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;

  v4 = *(_QWORD *)a3;
  if ((*(_QWORD *)a3 & 1) != 0)
  {
    v18 = *(_QWORD *)(v4 & 0xFFFFFFFF8);
    if ((v4 & 2) != 0
      || ((v19 = *(unsigned int *)((v4 & 0xFFFFFFFF8) + 8), (_DWORD)v19 != 0x3FFFFFFF)
        ? (v20 = (_DWORD)v19 == -1)
        : (v20 = 1),
          v20))
    {
      v21 = 2;
    }
    else if (v19 >> 28)
    {
      v36 = a2;
      v38 = a1;
      v32 = a4;
      v34 = a3;
      v26 = v19;
      v27 = WTF::fastMalloc((WTF *)0x10);
      a4 = v32;
      a3 = v34;
      v28 = v27;
      a2 = v36;
      a1 = v38;
      *(_QWORD *)v28 = v18;
      *(_DWORD *)(v28 + 8) = v26;
      v21 = 1;
      v18 = v28;
    }
    else
    {
      v21 = v18;
      v18 = v19 << 36;
    }
    v4 = v18 | v21;
  }
  v40 = v4;
  v5 = *(_QWORD *)(a3 + 8);
  if ((v5 & 1) != 0)
  {
    v22 = *(_QWORD *)(v5 & 0xFFFFFFFF8);
    if ((v5 & 2) != 0
      || ((v23 = *(unsigned int *)((v5 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
        ? (v24 = (_DWORD)v23 == -1)
        : (v24 = 1),
          v24))
    {
      v25 = 2;
    }
    else if (v23 >> 28)
    {
      v37 = a2;
      v39 = a1;
      v33 = a4;
      v35 = a3;
      v29 = v23;
      v30 = WTF::fastMalloc((WTF *)0x10);
      a4 = v33;
      a3 = v35;
      v31 = v30;
      a2 = v37;
      a1 = v39;
      *(_QWORD *)v31 = v22;
      *(_DWORD *)(v31 + 8) = v29;
      v25 = 1;
      v22 = v31;
    }
    else
    {
      v25 = v22;
      v22 = v23 << 36;
    }
    v5 = v22 | v25;
  }
  v41 = v5;
  v42 = *(_WORD *)(a3 + 16);
  v6 = 0xC4000000000000;
  if ((*(_DWORD *)(*a1 + 56) & 7) == 3)
    v7 = 0xC4000000000000;
  else
    v7 = 0;
  v8 = 0xD0000000000000;
  if ((*(_DWORD *)(*a1 + 56) & 7) == 5)
    v7 = 0xD0000000000000;
  if ((*(_DWORD *)(a4 + 56) & 7) != 3)
    v6 = 0;
  if ((*(_DWORD *)(a4 + 56) & 7) != 5)
    v8 = v6;
  v16 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::OpInfo,JSC::DFG::Edge,JSC::DFG::Edge>(a2, 0, 0x117u, (uint64_t)&v40, a1[1], HIDWORD(a1[1]), v7 | *a1 & 0xFF00FFFFFFFFFFFFLL, v8 | a4 & 0xFF00FFFFFFFFFFFFLL);
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  return v16;
}

uint64_t JSC::DFG::performPutStackSinking(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v2;
  BOOL v3;
  BOOL v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  JSC::DFG *v21;
  __int128 v22;
  char v23;
  WTF *v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;
  double v28;
  char v29;
  __int128 *v30;

  v17 = -1;
  v18 = -1;
  v19 = 0;
  v20 = 256;
  v21 = this;
  *(_QWORD *)&v22 = "PutStack sinking";
  *((_QWORD *)&v22 + 1) = 17;
  v23 = 0;
  v24 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v17);
  v26[0] = "DFG";
  v26[1] = 4;
  v27 = v22;
  v28 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v14 = mach_absolute_time();
    v16 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v16 != -1)
    {
      *(_QWORD *)&v25 = &v29;
      v30 = &v25;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v30, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v15) = dword_1ECF4400C;
    v28 = (double)(v14 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v15 * 1000000000.0);
  }
  if ((_DWORD)v2)
  {
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v3 = (*(_DWORD *)(*((_QWORD *)v21 + 3) + 16) & 0xFFFFFFFE) == 4) : (v3 = 0),
          !v3 ? (v4 = BYTE2(qword_1ECF4C32A) == 0) : (v4 = 0),
          !v4))
    {
      v25 = v22;
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v21 + 1088, "Phase ", (uint64_t)&v25, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v26);
  if (HIBYTE(qword_1ECF4C32A) && !v23)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v17, (uint64_t)v5, v6, v7, v8, v9, v10, v11);
  v12 = v24;
  v24 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree((unint64_t)v12, v5, v6, v7, v8, v9, v10, v11);
    else
      --*(_DWORD *)v12;
  }
  return v2;
}

void JSC::DFG::RegisteredStructureSet::filter(JSC::DFG::RegisteredStructureSet *this, const JSC::DFG::StructureAbstractValue *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v9 = *(_QWORD *)this;
  v10 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL);
  if ((v9 & 1) == 0)
  {
    if (!v10)
      return;
    v11 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 == 4 || (*(_QWORD *)a2 & 2) != 0)
      return;
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v11 & 1) != 0)
    {
      v14 = *v13;
      if ((_DWORD)v14)
      {
        if (*((unsigned int **)v13 + 1) == v10)
          return;
        v15 = 0;
        v16 = v13 + 4;
        while (v14 - 1 != v15)
        {
          v17 = *(unsigned int **)&v16[2 * v15++];
          if (v17 == v10)
          {
            if (v15 < v14)
              return;
            break;
          }
        }
      }
    }
    else if (v13 == v10)
    {
      return;
    }
LABEL_42:
    *(_QWORD *)this = v9 & 2;
    return;
  }
  v18 = *v10;
  if (!*v10)
  {
LABEL_41:
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
    v9 = *(_QWORD *)this;
    goto LABEL_42;
  }
  v19 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == 4 || (*(_QWORD *)a2 & 2) != 0)
    return;
  v21 = v10 + 2;
  v22 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v19 & 1) != 0)
  {
    v25 = 0;
    while (1)
    {
      v26 = *v22;
      if (!(_DWORD)v26)
        goto LABEL_38;
      v27 = *(_QWORD *)&v21[2 * v25];
      if (*((_QWORD *)v22 + 1) != v27)
        break;
LABEL_39:
      if (++v25 >= v18)
        goto LABEL_40;
    }
    v28 = 0;
    while (v26 - 1 != v28)
    {
      v29 = *(_QWORD *)&v22[2 * v28++ + 4];
      if (v29 == v27)
      {
        if (v28 < v26)
          goto LABEL_39;
        break;
      }
    }
LABEL_38:
    v30 = v25;
    *v10 = --v18;
    --v25;
    *(_QWORD *)&v21[2 * v30] = *(_QWORD *)&v21[2 * v18];
    goto LABEL_39;
  }
  v23 = 0;
  do
  {
    if (*(unsigned int **)&v21[2 * v23] != v22)
    {
      v24 = v23;
      *v10 = --v18;
      --v23;
      *(_QWORD *)&v21[2 * v24] = *(_QWORD *)&v21[2 * v18];
    }
    ++v23;
  }
  while (v23 < v18);
LABEL_40:
  if (!v18)
    goto LABEL_41;
}

void JSC::DFG::RegisteredStructureSet::filterArrayModes(JSC::DFG::RegisteredStructureSet *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;

  v9 = *(_QWORD *)this;
  v10 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL;
  if ((v9 & 1) != 0)
  {
    v13 = *(_DWORD *)v10;
    if (!*(_DWORD *)v10)
      goto LABEL_17;
    v14 = 0;
    v15 = v10 + 8;
    do
    {
      v16 = *(_QWORD *)(v15 + 8 * v14);
      v17 = *(unsigned __int8 *)(v16 + 9);
      if ((v17 - 39) <= 0xA)
        v18 = JSC::typedArrayModes[v17 - 39];
      else
        v18 = 1 << *(_BYTE *)(v16 + 8);
      if ((v18 & a2) == 0)
      {
        v19 = v14;
        *(_DWORD *)v10 = --v13;
        --v14;
        *(_QWORD *)(v15 + 8 * v19) = *(_QWORD *)(v15 + 8 * v13);
      }
      ++v14;
    }
    while (v14 < v13);
    if (!v13)
    {
LABEL_17:
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      v9 = *(_QWORD *)this;
LABEL_18:
      *(_QWORD *)this = v9 & 2;
    }
  }
  else if (v10)
  {
    v11 = *(unsigned __int8 *)(v10 + 9);
    v12 = (v11 - 39) <= 0xA ? JSC::typedArrayModes[v11 - 39] : 1 << *(_BYTE *)(v10 + 8);
    if ((v12 & a2) == 0)
      goto LABEL_18;
  }
}

void JSC::DFG::RegisteredStructureSet::filter(JSC::DFG::RegisteredStructureSet *this, const JSC::DFG::AbstractValue *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const JSC::DFG::AbstractValue *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v27;
  const JSC::DFG::AbstractValue **v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  const JSC::DFG::AbstractValue *v33;
  unint64_t v34;
  uint64_t v35;

  v8 = a2;
  v10 = *(_QWORD *)this;
  v11 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL;
  if ((v10 & 1) != 0)
  {
    v24 = *(_DWORD *)v11;
    if (!*(_DWORD *)v11)
      goto LABEL_13;
    v25 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 == 4 || (*(_QWORD *)a2 & 2) != 0)
      goto LABEL_3;
    v27 = v11 + 8;
    v28 = (const JSC::DFG::AbstractValue **)(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v25 & 1) == 0)
    {
      v29 = 0;
      do
      {
        if (*(const JSC::DFG::AbstractValue ***)(v27 + 8 * v29) != v28)
        {
          v30 = v29;
          *(_DWORD *)v11 = --v24;
          --v29;
          *(_QWORD *)(v27 + 8 * v30) = *(_QWORD *)(v27 + 8 * v24);
        }
        ++v29;
      }
      while (v29 < v24);
LABEL_52:
      if (v24)
        goto LABEL_3;
LABEL_13:
      WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
      v10 = *(_QWORD *)this;
LABEL_14:
      *(_QWORD *)this = v10 & 2;
      goto LABEL_15;
    }
    v31 = 0;
    while (1)
    {
      v32 = *(unsigned int *)v28;
      if (!(_DWORD)v32)
        goto LABEL_50;
      v33 = *(const JSC::DFG::AbstractValue **)(v27 + 8 * v31);
      if (v28[1] != v33)
        break;
LABEL_51:
      if (++v31 >= v24)
        goto LABEL_52;
    }
    v34 = 0;
    while (v32 - 1 != v34)
    {
      a2 = v28[v34++ + 2];
      if (a2 == v33)
      {
        if (v34 < v32)
          goto LABEL_51;
        break;
      }
    }
LABEL_50:
    v35 = v31;
    *(_DWORD *)v11 = --v24;
    --v31;
    *(_QWORD *)(v27 + 8 * v35) = *(_QWORD *)(v27 + 8 * v24);
    goto LABEL_51;
  }
  if (v11)
  {
    v17 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 != 4 && (*(_QWORD *)a2 & 2) == 0)
    {
      v19 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v17 & 1) != 0)
      {
        v20 = *v19;
        if (!(_DWORD)v20)
          goto LABEL_14;
        if (*((_QWORD *)v19 + 1) != v11)
        {
          v21 = 0;
          v22 = v19 + 4;
          while (v20 - 1 != v21)
          {
            v23 = *(_QWORD *)&v22[2 * v21++];
            if (v23 == v11)
            {
              if (v21 < v20)
                goto LABEL_3;
              goto LABEL_14;
            }
          }
          goto LABEL_14;
        }
      }
      else if (v19 != (unsigned int *)v11)
      {
        goto LABEL_14;
      }
    }
  }
LABEL_3:
  v12 = *((_QWORD *)v8 + 1);
  if ((v10 & 1) != 0)
  {
    v13 = *(_DWORD *)v11;
    if (*(_DWORD *)v11)
    {
      v14 = 0;
      v15 = v11 + 8;
      do
      {
        if ((JSC::speculatedTypeMapping[*(unsigned __int8 *)(*(_QWORD *)(v15 + 8 * v14) + 9)] & v12) == 0)
        {
          v16 = v14;
          *(_DWORD *)v11 = --v13;
          --v14;
          *(_QWORD *)(v15 + 8 * v16) = *(_QWORD *)(v15 + 8 * v13);
        }
        ++v14;
      }
      while (v14 < v13);
      if (v13)
        goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v11 && (JSC::speculatedTypeMapping[*(unsigned __int8 *)(v11 + 9)] & v12) == 0)
    goto LABEL_14;
LABEL_15:
  JSC::DFG::RegisteredStructureSet::filterArrayModes(this, (void *)*((unsigned int *)v8 + 4), a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::RegisteredStructureSet::validateReferences(uint64_t this, const void ***a2)
{
  _DWORD *v3;
  const void **v4;
  int v5;
  int v6;
  const void *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  const void **v11;
  int v12;
  int v13;
  const void *v14;
  int v15;
  _DWORD *v16;
  unint64_t v17;

  v3 = (_DWORD *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL);
  if ((*(_QWORD *)this & 1) != 0)
  {
    if (*v3)
    {
      v9 = 0;
      while (1)
      {
        v10 = *(_QWORD *)&v3[2 * v9 + 2];
        v17 = v10;
        if (v10)
        {
          v11 = *a2;
          if (!*a2)
            goto LABEL_19;
          v12 = *((_DWORD *)v11 - 2);
          this = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v17);
          v10 = v17;
          v13 = this & v12;
          v14 = v11[this & v12];
          if (v14 != (const void *)v17)
            break;
        }
LABEL_17:
        if (++v9 >= (unint64_t)*v3)
          return this;
      }
      v15 = 1;
      while (v14)
      {
        v13 = (v13 + v15) & v12;
        v14 = v11[v13];
        ++v15;
        if (v14 == (const void *)v17)
          goto LABEL_17;
      }
LABEL_19:
      v16 = (_DWORD *)v10;
      WTF::dataLog<char [20],JSC::JSValue,char [2]>("Found untracked reference: ", (JSC::JSValue *)&v16, "\n");
      WTF::dataLog<char [25],JSC::TrackedReferences,char [2]>("All tracked references: ", a2, "\n");
      __break(0xC471u);
LABEL_21:
      JUMPOUT(0x198518BACLL);
    }
  }
  else if (v3)
  {
    v17 = *(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL;
    v4 = *a2;
    if (!*a2)
    {
LABEL_20:
      v16 = v3;
      WTF::dataLog<char [20],JSC::JSValue,char [2]>("Found untracked reference: ", (JSC::JSValue *)&v16, "\n");
      WTF::dataLog<char [25],JSC::TrackedReferences,char [2]>("All tracked references: ", a2, "\n");
      __break(0xC471u);
      goto LABEL_21;
    }
    v5 = *((_DWORD *)v4 - 2);
    this = WTF::IdentityHashTranslator<WTF::HashMap<JSC::CodeBlock *,unsigned int,WTF::DefaultHash<JSC::CodeBlock *>,WTF::HashTraits<JSC::CodeBlock *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::CodeBlock *>>::hash<JSC::CodeBlock *>(&v17);
    v3 = (_DWORD *)v17;
    v6 = this & v5;
    v7 = v4[this & v5];
    if (v7 != (const void *)v17)
    {
      v8 = 1;
      while (v7)
      {
        v6 = (v6 + v8) & v5;
        v7 = v4[v6];
        ++v8;
        if (v7 == (const void *)v17)
          return this;
      }
      goto LABEL_20;
    }
  }
  return this;
}

void JSC::DFG::SSACalculator::~SSACalculator(JSC::DFG::SSACalculator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v9 = *((unsigned int *)this + 13);
  v10 = *((_QWORD *)this + 5);
  if ((_DWORD)v9)
  {
    v11 = 24 * v9;
    v12 = v10 + 8;
    do
    {
      v13 = *(_QWORD *)v12;
      if (*(_QWORD *)v12)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      v14 = *(_QWORD *)(v12 - 8);
      if (v14)
        WTF::fastFree(v14 - 16, a2, a3, a4, a5, a6, a7, a8);
      v12 += 24;
      v11 -= 24;
    }
    while (v11);
    v10 = *((_QWORD *)this + 5);
  }
  if (v10)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 4);
  if (v15)
  {
    do
    {
      v16 = *(_QWORD *)(v15 + 24);
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
      v15 = v16;
    }
    while (v16);
  }
  *((_QWORD *)this + 4) = 0;
  v17 = *((_QWORD *)this + 3);
  if (v17)
  {
    do
    {
      v18 = *(_QWORD *)(v17 + 24);
      WTF::fastFree(v17, a2, a3, a4, a5, a6, a7, a8);
      v17 = v18;
    }
    while (v18);
  }
  *((_QWORD *)this + 3) = 0;
  v19 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v20 = 0;
    while (v20 >> 3 < *((unsigned int *)this + 5))
    {
      v21 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v20 >> 3)) + 24 * (v20 & 7);
      v22 = *(_QWORD *)v21;
      if (*(_QWORD *)v21)
      {
        *(_QWORD *)v21 = 0;
        *(_DWORD *)(v21 + 8) = 0;
        WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
        v19 = *(_QWORD *)this;
      }
      if (++v20 >= v19)
        goto LABEL_21;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_21:
    if (*((_DWORD *)this + 5))
    {
      v23 = 0;
      do
        WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 1) + 8 * v23++), a2, a3, a4, a5, a6, a7, a8);
      while (v23 < *((unsigned int *)this + 5));
    }
    v24 = *((_QWORD *)this + 1);
    if (v24)
    {
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 0;
      WTF::fastFree(v24, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::DFG::SSACalculator::reset(JSC::DFG::SSACalculator *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  WTF::SegmentedVector<JSC::DFG::SSACalculator::Variable,8ul>::clear((unint64_t *)this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if (v16)
  {
    do
    {
      v17 = *(_QWORD *)(v16 + 24);
      WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
      v16 = v17;
    }
    while (v17);
  }
  *((_QWORD *)this + 3) = 0;
  v18 = *((_QWORD *)this + 4);
  if (v18)
  {
    do
    {
      v19 = *(_QWORD *)(v18 + 24);
      WTF::fastFree(v18, v9, v10, v11, v12, v13, v14, v15);
      v18 = v19;
    }
    while (v19);
  }
  *((_QWORD *)this + 4) = 0;
  v20 = *((_DWORD *)this + 13);
  if (v20)
  {
    v21 = v20 - 1;
    v22 = 24 * (v20 - 1);
    do
    {
      v23 = *((_DWORD *)this + 13);
      if (v23 <= v21)
        goto LABEL_18;
      v24 = *((_QWORD *)this + 5);
      v25 = *(_QWORD *)(v24 + v22);
      if (v25)
      {
        *(_QWORD *)(v24 + v22) = 0;
        WTF::fastFree(v25 - 16, v9, v10, v11, v12, v13, v14, v15);
        v23 = *((_DWORD *)this + 13);
      }
      if (v23 <= v21)
      {
LABEL_18:
        __break(0xC471u);
        JUMPOUT(0x198518E54);
      }
      v26 = *((_QWORD *)this + 5) + v22;
      if (*(_DWORD *)(v26 + 16))
      {
        if (*(_DWORD *)(v26 + 20))
          *(_DWORD *)(v26 + 20) = 0;
        v27 = *(_QWORD *)(v26 + 8);
        if (v27)
        {
          *(_QWORD *)(v26 + 8) = 0;
          *(_DWORD *)(v26 + 16) = 0;
          WTF::fastFree(v27, v9, v10, v11, v12, v13, v14, v15);
        }
      }
      v22 -= 24;
      --v21;
    }
    while (v21 != -1);
  }
}

void WTF::SegmentedVector<JSC::DFG::SSACalculator::Variable,8ul>::clear(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v9 = *a1;
  if (!*a1)
  {
LABEL_7:
    if (*((_DWORD *)a1 + 5))
    {
      v13 = 0;
      do
      {
        WTF::fastFree(*(_QWORD *)(a1[1] + 8 * v13++), a2, a3, a4, a5, a6, a7, a8);
        v14 = *((unsigned int *)a1 + 5);
      }
      while (v13 < v14);
      if (!*((_DWORD *)a1 + 4))
        goto LABEL_11;
      if ((_DWORD)v14)
        *((_DWORD *)a1 + 5) = 0;
    }
    else if (!*((_DWORD *)a1 + 4))
    {
LABEL_11:
      *a1 = 0;
      return;
    }
    v15 = a1[1];
    if (v15)
    {
      a1[1] = 0;
      *((_DWORD *)a1 + 4) = 0;
      WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
    }
    goto LABEL_11;
  }
  v10 = 0;
  while (v10 >> 3 < *((unsigned int *)a1 + 5))
  {
    v11 = *(_QWORD *)(a1[1] + 8 * (v10 >> 3)) + 24 * (v10 & 7);
    v12 = *(_QWORD *)v11;
    if (*(_QWORD *)v11)
    {
      *(_QWORD *)v11 = 0;
      *(_DWORD *)(v11 + 8) = 0;
      WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      v9 = *a1;
    }
    if (++v10 >= v9)
      goto LABEL_7;
  }
  __break(0xC471u);
}

unint64_t JSC::DFG::SSACalculator::newVariable(JSC::DFG::SSACalculator *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = (*(_QWORD *)this)++;
  v3 = v2 >> 3;
  v4 = *((unsigned int *)this + 5);
  if (v2 >> 3 >= v4)
  {
    v9 = (_QWORD *)((char *)this + 8);
    v10 = WTF::fastMalloc((WTF *)0xC0);
    v13 = v10;
    v11 = *((unsigned int *)this + 5);
    if ((_DWORD)v11 == *((_DWORD *)this + 4))
    {
      v12 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 8, v11 + 1, (unint64_t)&v13);
      v11 = *((unsigned int *)this + 5);
      *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v11) = *v12;
    }
    else
    {
      *(_QWORD *)(*v9 + 8 * v11) = v10;
    }
    v4 = (v11 + 1);
    *((_DWORD *)this + 5) = v4;
    v5 = *(_QWORD *)this - 1;
    v3 = v5 >> 3;
  }
  else
  {
    LOBYTE(v5) = v2;
  }
  if (v3 >= v4
    || (v6 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * v3) + 24 * (v5 & 7),
        *(_QWORD *)v6 = 0,
        *(_QWORD *)(v6 + 8) = 0,
        *(_DWORD *)(v6 + 16) = v2,
        v7 = *(_QWORD *)this - 1,
        v7 >> 3 >= *((unsigned int *)this + 5)))
  {
    __break(0xC471u);
    JUMPOUT(0x198519040);
  }
  return *(_QWORD *)(*((_QWORD *)this + 1) + 8 * (v7 >> 3)) + 24 * (v7 & 7);
}

_QWORD *JSC::DFG::SSACalculator::newDef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a3;
  v24 = a2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = 0;
  result[3] = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = result;
  v22 = result;
  v14 = *(_DWORD *)(a3 + 8);
  if (*(_DWORD *)(a1 + 52) <= v14)
  {
    __break(0xC471u);
  }
  else
  {
    WTF::HashMap<JSC::DFG::SSACalculator::Variable *,JSC::DFG::SSACalculator::Def *,WTF::DefaultHash<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Def *>,WTF::HashTableTraits>::add<JSC::DFG::SSACalculator::Def *&>((uint64_t *)(*(_QWORD *)(a1 + 40) + 24 * v14), &v24, (uint64_t *)&v22, v9, v10, v11, v12, v13, (uint64_t)&v20);
    if (v21)
    {
      v15 = v24;
      v16 = *(unsigned int *)(v24 + 12);
      if ((_DWORD)v16 == *(_DWORD *)(v24 + 8))
      {
        v18 = (_QWORD *)WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, v16 + 1, (unint64_t)&v23);
        v19 = *(unsigned int *)(v15 + 12);
        v17 = v19 + 1;
        *(_QWORD *)(*(_QWORD *)v15 + 8 * v19) = *v18;
      }
      else
      {
        v17 = v16 + 1;
        *(_QWORD *)(*(_QWORD *)v24 + 8 * v16) = a3;
      }
      *(_DWORD *)(v15 + 12) = v17;
    }
    else
    {
      *(_QWORD *)(v20 + 8) = v22;
    }
    return v22;
  }
  return result;
}

uint64_t JSC::DFG::SSACalculator::nonLocalReachingDef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 784);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(_DWORD *)(v3 + 20);
  if (v5 <= v4)
    goto LABEL_27;
  v6 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v6 + 32 * v4 + 16);
  if (v7)
  {
    v8 = *(_DWORD *)(a1 + 52);
    v9 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = (v11 >> 31) ^ v11;
    if (v8 > v5)
    {
      while (1)
      {
        v19 = *(unsigned int *)(v7 + 8);
        if (v8 <= v19)
          break;
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v19);
        if (v20)
        {
          v21 = *(_DWORD *)(v20 - 8);
          v22 = v21 & v12;
          v23 = *(_QWORD *)(v20 + 16 * v22);
          if (v23 == a3)
          {
LABEL_23:
            v7 = *(_QWORD *)(v20 + 16 * v22 + 8);
            if (v7)
              return v7;
          }
          else
          {
            v24 = 1;
            while (v23)
            {
              v22 = ((_DWORD)v22 + v24) & v21;
              v23 = *(_QWORD *)(v20 + 16 * v22);
              ++v24;
              if (v23 == a3)
                goto LABEL_23;
            }
          }
        }
        if (v5 <= v19)
        {
          __break(0xC471u);
          JUMPOUT(0x198519490);
        }
        v7 = *(_QWORD *)(v6 + 32 * v19 + 16);
        if (!v7)
          return v7;
      }
    }
    else
    {
      while (1)
      {
        v13 = *(unsigned int *)(v7 + 8);
        if (v8 <= v13)
          break;
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 * v13);
        if (v14)
        {
          v15 = *(_DWORD *)(v14 - 8);
          v16 = v15 & v12;
          v17 = *(_QWORD *)(v14 + 16 * v16);
          if (v17 == a3)
          {
LABEL_12:
            v7 = *(_QWORD *)(v14 + 16 * v16 + 8);
            if (v7)
              return v7;
          }
          else
          {
            v18 = 1;
            while (v17)
            {
              v16 = ((_DWORD)v16 + v18) & v15;
              v17 = *(_QWORD *)(v14 + 16 * v16);
              ++v18;
              if (v17 == a3)
                goto LABEL_12;
            }
          }
        }
        v7 = *(_QWORD *)(v6 + 32 * v13 + 16);
        if (!v7)
          return v7;
      }
    }
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x198519488);
  }
  return v7;
}

uint64_t JSC::DFG::performSSAConversion(JSC::DFG *this, JSC::DFG::Graph *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  JSC::DFG *v29;
  __int128 v30;
  char v31;
  WTF *v32;
  JSC::DFG *v33;
  WTF *v34;
  uint64_t v35;
  _BYTE v36[128];
  __int128 v37;
  WTF *v38[2];
  uint64_t v39;
  __int128 v40;
  _QWORD v41[2];
  __int128 v42;
  double v43;
  char v44;
  __int128 *v45;

  v25 = -1;
  v26 = -1;
  v27 = 0;
  v28 = 256;
  v29 = this;
  *(_QWORD *)&v30 = "SSA conversion";
  *((_QWORD *)&v30 + 1) = 15;
  v31 = 0;
  v32 = 0;
  JSC::DFG::Phase::beginPhase((JSC::DFG::Graph **)&v25);
  v33 = this;
  v34 = (WTF *)v36;
  v35 = 8;
  v37 = 0u;
  *(_OWORD *)v38 = 0u;
  v39 = 0;
  v41[0] = "DFG";
  v41[1] = 4;
  v42 = v30;
  v43 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v22 = mach_absolute_time();
    v24 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v24 != -1)
    {
      *(_QWORD *)&v40 = &v44;
      v45 = &v40;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v45, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v23) = dword_1ECF4400C;
    v43 = (double)(v22 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v23 * 1000000000.0);
  }
  JSC::DFG::SSAConversionPhase::run((JSC::DFG::SSAConversionPhase *)&v25, v3, v4, v5, v6, v7, v8, v9);
  if (qword_1ECF4C32A | byte_1ECF4C323
    || (BYTE1(qword_1ECF4C32A) ? (v10 = (*(_DWORD *)(*((_QWORD *)v29 + 3) + 16) & 0xFFFFFFFE) == 4) : (v10 = 0),
        v10 || BYTE2(qword_1ECF4C32A)))
  {
    v40 = v30;
    WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>((uint64_t)v29 + 1088, "Phase ", (uint64_t)&v40, " changed the IR.\n", "\n");
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v41);
  v18 = v38[1];
  if (v38[1])
  {
    v38[1] = 0;
    LODWORD(v39) = 0;
    WTF::fastFree((unint64_t)v18, v11, v12, v13, v14, v15, v16, v17);
  }
  if (v38[0])
    WTF::fastFree((unint64_t)v38[0] - 16, v11, v12, v13, v14, v15, v16, v17);
  if (*((_QWORD *)&v37 + 1))
    WTF::fastFree(*((_QWORD *)&v37 + 1) - 16, v11, v12, v13, v14, v15, v16, v17);
  if ((_QWORD)v37)
    WTF::fastFree(v37 - 16, v11, v12, v13, v14, v15, v16, v17);
  v19 = v34;
  if (v36 != (_BYTE *)v34 && v34)
  {
    v34 = 0;
    LODWORD(v35) = 0;
    WTF::fastFree((unint64_t)v19, v11, v12, v13, v14, v15, v16, v17);
  }
  if (HIBYTE(qword_1ECF4C32A) && !v31)
    JSC::DFG::Phase::validate((JSC::DFG::Phase *)&v25, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
  v20 = v32;
  v32 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
      WTF::fastFree((unint64_t)v20, v11, v12, v13, v14, v15, v16, v17);
    else
      --*(_DWORD *)v20;
  }
  return 1;
}

uint64_t JSC::DFG::runAndLog<JSC::DFG::PredictionInjectionPhase>(JSC::DFG::PredictionInjectionPhase *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;
  double v13;
  char v14;
  __int128 *v15;

  v11[0] = "DFG";
  v11[1] = 4;
  v12 = *(_OWORD *)((char *)this + 40);
  v13 = 0.0;
  if (byte_1ECF4C67A | byte_1ECF4C33D)
  {
    v7 = mach_absolute_time();
    v9 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v9 != -1)
    {
      *(_QWORD *)&v10 = &v14;
      v15 = &v10;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    LODWORD(v8) = dword_1ECF4400C;
    v13 = (double)(v7 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v8 * 1000000000.0);
  }
  v2 = JSC::DFG::PredictionInjectionPhase::run(this);
  if ((_DWORD)v2)
  {
    v3 = *((_QWORD *)this + 4);
    if (qword_1ECF4C32A | byte_1ECF4C323
      || (BYTE1(qword_1ECF4C32A) ? (v4 = (*(_DWORD *)(*(_QWORD *)(v3 + 24) + 16) & 0xFFFFFFFE) == 4) : (v4 = 0),
          !v4 ? (v5 = BYTE2(qword_1ECF4C32A) == 0) : (v5 = 0),
          !v5))
    {
      v10 = *(_OWORD *)((char *)this + 40);
      WTF::dataLog<JSC::DFG::Prefix,char [7],WTF::ASCIILiteral,char [18],char [2]>(v3 + 1088, "Phase ", (uint64_t)&v10, " changed the IR.\n", "\n");
    }
  }
  JSC::CompilerTimingScope::~CompilerTimingScope((JSC::CompilerTimingScope *)v11);
  return v2;
}

uint64_t JSC::DFG::PredictionInjectionPhase::run(JSC::DFG::PredictionInjectionPhase *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;

  v1 = *((_QWORD *)this + 4);
  LODWORD(v2) = *(_DWORD *)(v1 + 60);
  if (!(_DWORD)v2)
  {
LABEL_159:
    __break(0xC471u);
    JUMPOUT(0x198519E70);
  }
  v3 = *(_QWORD **)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 440);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ~(*v3 << 32) + *v3;
    v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    v9 = v5 & (((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27)));
    v10 = (uint64_t *)(v4 + 88 * v9);
    v11 = *v10;
    if (*v10 != *v3)
    {
      v61 = 1;
      while (v11)
      {
        v9 = (v9 + v61) & v5;
        v10 = (uint64_t *)(v4 + 88 * v9);
        v11 = *v10;
        ++v61;
        if (*v10 == *v3)
          goto LABEL_4;
      }
      v10 = (uint64_t *)(v4 + 88 * *(unsigned int *)(v4 - 4));
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_4:
  v12 = *(unsigned int *)(*(_QWORD *)(v1 + 32) + 28);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = *(_QWORD *)(v1 + 40);
    v15 = qword_1ECF4C080;
    do
    {
      v16 = *(_DWORD **)(v14 + 152);
      if (*v16 <= v13)
        goto LABEL_159;
      if (v13 >= *((unsigned int *)v10 + 5))
      {
        __break(0xC471u);
        JUMPOUT(0x198519F10);
      }
      v17 = (unint64_t *)&v16[6 * v13 + 2];
      v18 = *(_QWORD **)(*(_QWORD *)(v10[1] + 8 * v13) + 72);
      v19 = v18;
      do
      {
        v20 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
      if (v20 != v18)
        *v18 = v20;
      v21 = *v17;
      if (!*v17)
      {
        v22 = 0;
        goto LABEL_14;
      }
      if (v21 >= 0xFFFE000000000000)
      {
        if ((v21 & 0xFFFFFFFE) != 0)
          v22 = 0x200000000;
        else
          v22 = 0x100000000;
        goto LABEL_31;
      }
      if (v21 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v59 = (uint64_t)COERCE_DOUBLE(v21 - 0x2000000000000);
        if ((double)v59 == COERCE_DOUBLE(v21 - 0x2000000000000))
        {
          if (v59)
          {
            if (!((unint64_t)(v59 + 0x8000000000000) >> 52))
              goto LABEL_138;
          }
          else if ((uint64_t)v21 >= 0x2000000000000)
          {
LABEL_138:
            v22 = 0x1000000000;
            goto LABEL_31;
          }
        }
        v22 = 0x2000000000;
      }
      else
      {
        if ((v21 & 0xFFFE000000000002) != 0)
        {
          if ((v21 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v22 = 0x10000000000;
          else
            v22 = 0x20000000000;
          goto LABEL_31;
        }
        if (v15 > v21)
        {
LABEL_156:
          v22 = 0;
          goto LABEL_31;
        }
        v22 = 0;
        if (v21 >> 36 || (v21 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_31;
        v29 = *(unsigned __int8 *)(v21 + 5);
        if (v29 == 2)
        {
          v57 = *(_QWORD *)(v21 + 8);
          if (!v57)
            goto LABEL_134;
          v22 = 805306368;
          if ((v57 & 1) == 0)
          {
            if (v57 < v15)
              goto LABEL_156;
            v22 = 0;
            if (v57 >> 36 || (v57 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_31;
            if ((*(_BYTE *)(v57 + 16) & 0x10) == 0)
            {
LABEL_134:
              v22 = 805306368;
              goto LABEL_31;
            }
            v22 = 0x10000000;
          }
        }
        else
        {
          v22 = JSC::speculatedTypeMapping[v29];
        }
      }
LABEL_31:
      *v17 = 0;
LABEL_14:
      v23 = v17[1];
      if (!v23)
        goto LABEL_15;
      if (v23 >= 0xFFFE000000000000)
      {
        if ((v23 & 0xFFFFFFFE) != 0)
          v30 = 0x200000000;
        else
          v30 = 0x100000000;
        goto LABEL_40;
      }
      if (v23 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
      {
        v60 = (uint64_t)COERCE_DOUBLE(v23 - 0x2000000000000);
        if ((double)v60 == COERCE_DOUBLE(v23 - 0x2000000000000))
        {
          if (v60)
          {
            if (!((unint64_t)(v60 + 0x8000000000000) >> 52))
              goto LABEL_141;
          }
          else if ((uint64_t)v23 >= 0x2000000000000)
          {
LABEL_141:
            v30 = 0x1000000000;
            goto LABEL_40;
          }
        }
        v30 = 0x2000000000;
      }
      else
      {
        if ((v23 & 0xFFFE000000000002) != 0)
        {
          if ((v23 & 0xFFFFFFFFFFFFFFFELL) == 6)
            v30 = 0x10000000000;
          else
            v30 = 0x20000000000;
          goto LABEL_40;
        }
        if (v15 > v23)
        {
LABEL_157:
          v30 = 0;
          goto LABEL_40;
        }
        v30 = 0;
        if (v23 >> 36 || (v23 & 0xFFFFFFFFFLL) == 0)
          goto LABEL_40;
        v31 = *(unsigned __int8 *)(v23 + 5);
        if (v31 == 2)
        {
          v58 = *(_QWORD *)(v23 + 8);
          if (!v58)
            goto LABEL_135;
          v30 = 805306368;
          if ((v58 & 1) == 0)
          {
            if (v58 < v15)
              goto LABEL_157;
            v30 = 0;
            if (v58 >> 36 || (v58 & 0xFFFFFFFFFLL) == 0)
              goto LABEL_40;
            if ((*(_BYTE *)(v58 + 16) & 0x10) == 0)
            {
LABEL_135:
              v30 = 805306368;
              goto LABEL_40;
            }
            v30 = 0x10000000;
          }
        }
        else
        {
          v30 = JSC::speculatedTypeMapping[v31];
        }
      }
LABEL_40:
      v22 |= v30;
      v17[1] = 0;
LABEL_15:
      v24 = v17[2] | v22;
      v17[2] = v24;
      v25 = v20;
      do
      {
        v26 = v25;
        v25 = (_QWORD *)*v25;
      }
      while (v25);
      if (v26 != v20)
        *v20 = v26;
      v27 = v26[1];
      v28 = v27 | v24;
      v26[1] = v28;
      if (v28 != v27)
        v20[2] |= v20[1];
      ++v13;
    }
    while (v13 != v12);
  }
  v32 = 0;
  if (v2 <= 1)
    v2 = 1;
  else
    v2 = v2;
  do
  {
    v33 = v3[v32];
    if (v33)
    {
      if (*(_BYTE *)(v33 + 19))
      {
        v34 = *(_QWORD *)(v1 + 24);
        if (*(_DWORD *)(v33 + 4) == *(_DWORD *)(v34 + 108))
        {
          v35 = *(unsigned int *)(v34 + 92);
          if ((_DWORD)v35)
          {
            v36 = 0;
            v37 = *(unsigned int *)(v34 + 96);
            v38 = qword_1ECF4C080;
            do
            {
              if (v36 < v37)
              {
                v40 = v36 + 5;
              }
              else
              {
                v39 = *(unsigned int *)(v34 + 100) + v37;
                if (v36 >= v39)
                {
                  v62 = *(_QWORD *)(v34 + 80) + 16 * v36;
                  if (!*(_BYTE *)(v62 + 8))
                    goto LABEL_55;
                  v42 = *(_QWORD *)v62;
                  v43 = *(unsigned int *)(v33 + 88) + (uint64_t)((int)v36 - (int)v39) + *(unsigned int *)(v33 + 92);
                  goto LABEL_59;
                }
                v40 = v37 + ~(_DWORD)v36;
              }
              v41 = *(_QWORD *)(v34 + 80) + 16 * v36;
              if (!*(_BYTE *)(v41 + 8))
                goto LABEL_55;
              v42 = *(_QWORD *)v41;
              if ((v40 & 0x80000000) != 0)
                v43 = (v40 ^ 0xFFFFFFFFLL) + *(unsigned int *)(v33 + 88);
              else
                v43 = (int)(v40 - 5);
LABEL_59:
              v44 = *(_QWORD *)(*(_QWORD *)(v33 + 72) + 8 * v43);
              if (v44)
              {
                v45 = *(_QWORD **)(v44 + 72);
                v46 = v45;
                do
                {
                  v47 = v46;
                  v46 = (_QWORD *)*v46;
                }
                while (v46);
                if (v47 != v45)
                  *v45 = v47;
                if (!v42)
                {
                  v48 = 0x40000000000;
                  goto LABEL_73;
                }
                if (v42 >= 0xFFFE000000000000)
                {
                  if ((v42 & 0xFFFFFFFE) != 0)
                    v48 = 0x200000000;
                  else
                    v48 = 0x100000000;
                  goto LABEL_73;
                }
                if (v42 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
                {
                  if ((v42 & 0xFFFE000000000002) != 0)
                  {
                    if ((v42 & 0xFFFFFFFFFFFFFFFELL) == 6)
                      v48 = 0x10000000000;
                    else
                      v48 = 0x20000000000;
                    goto LABEL_73;
                  }
                  if (v38 > v42)
                    goto LABEL_155;
                  v48 = 0;
                  if (v42 >> 36 || (v42 & 0xFFFFFFFFFLL) == 0)
                    goto LABEL_73;
                  v49 = *(unsigned __int8 *)(v42 + 5);
                  if (v49 != 2)
                  {
                    v48 = JSC::speculatedTypeMapping[v49];
                    goto LABEL_73;
                  }
                  v54 = *(_QWORD *)(v42 + 8);
                  if (!v54)
                  {
LABEL_127:
                    v48 = 805306368;
                    goto LABEL_73;
                  }
                  v48 = 805306368;
                  if ((v54 & 1) != 0)
                    goto LABEL_73;
                  if (v54 < v38)
                  {
LABEL_155:
                    v48 = 0;
                  }
                  else
                  {
                    v48 = 0;
                    if (v54 >> 36 || (v54 & 0xFFFFFFFFFLL) == 0)
                      goto LABEL_73;
                    if ((*(_BYTE *)(v54 + 16) & 0x10) == 0)
                      goto LABEL_127;
                    v48 = 0x10000000;
                  }
LABEL_73:
                  v50 = v47;
                  do
                  {
                    v51 = v50;
                    v50 = (_QWORD *)*v50;
                  }
                  while (v50);
                  if (v51 != v47)
                    *v47 = v51;
                  v52 = v51[1];
                  v53 = v52 | v48;
                  v51[1] = v53;
                  if (v53 != v52)
                    v47[2] |= v47[1];
                  goto LABEL_55;
                }
                v55 = (uint64_t)COERCE_DOUBLE(v42 - 0x2000000000000);
                if ((double)v55 != COERCE_DOUBLE(v42 - 0x2000000000000))
                {
LABEL_95:
                  v48 = 0x2000000000;
                  goto LABEL_73;
                }
                if (v55)
                {
                  if ((unint64_t)(v55 + 0x8000000000000) >> 52)
                    goto LABEL_95;
                }
                else if ((uint64_t)v42 < 0x2000000000000)
                {
                  goto LABEL_95;
                }
                v48 = 0x1000000000;
                goto LABEL_73;
              }
LABEL_55:
              ++v36;
            }
            while (v36 != v35);
          }
        }
      }
    }
    ++v32;
  }
  while (v32 != v2);
  return 1;
}

uint64_t JSC::DFG::`anonymous namespace'::PredictionPropagationPhase::propagateThroughArgumentPositions(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  int v30;
  int v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  int v46;
  int v47;

  v1 = *(_QWORD *)(this + 32);
  v2 = *(_QWORD *)(v1 + 488);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(unsigned int *)(v1 + 508);
    do
    {
      if (v3 >> 3 >= v5)
      {
LABEL_71:
        __break(0xC471u);
        JUMPOUT(0x19851A244);
      }
      v6 = *(_QWORD *)(*(_QWORD *)(v1 + 496) + 8 * (v3 >> 3));
      v7 = v3 & 7;
      v8 = (uint64_t *)(v6 + 48 * (v3 & 7));
      v9 = *((unsigned int *)v8 + 7);
      if (!(_DWORD)v9)
        goto LABEL_52;
      v10 = 0;
      v11 = 0;
      v12 = v6 + 48 * v7;
      v15 = *(_DWORD *)(v12 + 8);
      v13 = v12 + 8;
      v14 = v15;
      v16 = *(_QWORD *)(v13 + 8);
      v17 = (_BYTE *)(v13 + 5);
      v18 = *v8;
      do
      {
        v19 = v18;
        v20 = v14;
        v21 = *(_QWORD **)(v16 + 8 * v10);
        v22 = v21;
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
        if (v23 != v21)
          *v21 = v23;
        v24 = v23;
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
        if (v25 != v23)
          *v23 = v25;
        v18 = v25[2] | v19;
        *v8 = v18;
        v26 = v23;
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
        if (v27 != v23)
          *v23 = v27;
        v28 = *((unsigned int *)v27 + 14);
        if ((_DWORD)v20)
        {
          switch((_DWORD)v20)
          {
            case 2:
              if (v28 >= 4)
                goto LABEL_71;
              v28 = dword_1991564E0[(int)v28];
              break;
            case 1:
              if (v28 >= 4)
              {
                __break(0xC471u);
                JUMPOUT(0x19851A2C4);
              }
              v28 = dword_1991564D0[(int)v28];
              break;
            case 3:
              v28 = 3;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x19851A284);
          }
        }
        v14 = v20;
        if ((_DWORD)v28 != (_DWORD)v20)
        {
          *(_DWORD *)v13 = v28;
          v14 = v28;
        }
        v29 = *((_BYTE *)v23 + 40);
        v30 = *v17;
        v31 = (v30 | v29);
        if (v30 != v31)
          *v17 = v31;
        v11 |= v18 != v19 || (_DWORD)v28 != (_DWORD)v20 || v30 != v31;
        ++v10;
      }
      while (v10 != v9);
      if ((v11 & 1) != 0)
      {
        v32 = 0;
        v33 = 0;
        do
        {
          v34 = *(_QWORD **)(v16 + 8 * v32);
          v35 = v34;
          do
          {
            v36 = v35;
            v35 = (_QWORD *)*v35;
          }
          while (v35);
          if (v36 != v34)
            *v34 = v36;
          v37 = *v8;
          v38 = v36;
          do
          {
            v39 = v38;
            v38 = (_QWORD *)*v38;
          }
          while (v38);
          if (v39 != v36)
            *v36 = v39;
          v40 = v39[2];
          v41 = v40 | v37;
          v39[2] = v41;
          v42 = *(_DWORD *)v13;
          v43 = v36;
          do
          {
            v44 = v43;
            v43 = (_QWORD *)*v43;
          }
          while (v43);
          if (v44 != v36)
            *v36 = v44;
          v45 = *((_DWORD *)v44 + 14);
          if (v45)
          {
            switch(v45)
            {
              case 2:
                if (v42 >= 4)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19851A264);
                }
                v42 = dword_1991564E0[v42];
                break;
              case 1:
                if (v42 >= 4)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19851A2E4);
                }
                v42 = dword_1991564D0[v42];
                break;
              case 3:
                v42 = 3;
                break;
              default:
                __break(0xC471u);
                JUMPOUT(0x19851A2A4);
            }
          }
          if (v42 != v45)
            *((_DWORD *)v44 + 14) = v42;
          v46 = *((unsigned __int8 *)v36 + 40);
          v47 = (v46 | *v17);
          if (v47 != v46)
            *((_BYTE *)v36 + 40) = v47;
          v33 |= v41 != v40 || v42 != v45 || v47 != v46;
          ++v32;
        }
        while (v32 != v9);
      }
      else
      {
LABEL_52:
        v33 = 0;
      }
      *(_BYTE *)(this + 240) |= v33 & 1;
      v3 = ++v4;
    }
    while (v2 > v4);
  }
  return this;
}

void JSC::DFG::`anonymous namespace'::PredictionPropagationPhase::propagate(JSC::DFG::_anonymous_namespace_::PredictionPropagationPhase *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  unint64_t v72;
  unint64_t v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  BOOL v93;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  _BOOL4 v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  BOOL v124;
  int v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  BOOL v135;
  unint64_t v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v149;
  int v150;
  int v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int v155;
  WTF::Lock *v156;
  int v157;
  BOOL v158;
  int v159;
  int v160;
  int v161;
  WTF::Lock *v162;
  int v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  unsigned int v171;
  BOOL v172;
  unsigned int v173;
  uint64_t v174;
  _BOOL4 v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  BOOL v185;
  BOOL v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int8 *v197;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char hasExitSite;
  uint64_t v207;
  uint64_t v208;
  _BOOL4 v210;
  uint64_t v211;
  uint64_t v213;
  uint64_t v214;
  BOOL v215;
  int v216;
  int v217;
  int v218;
  int v219;
  BOOL v220;
  uint64_t v221;
  BOOL v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unsigned __int8 *v231;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  BOOL v242;
  uint64_t v243;
  int v244;
  int v245;
  int v246;
  int v247;
  int v248;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  BOOL v258;
  uint64_t v260;
  int v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  BOOL v268;
  BOOL v269;
  uint64_t v270;
  int v271;
  uint64_t v274;
  WTF::Lock *v276;
  int v277;
  int v278;
  int v279;
  int v280;
  uint64_t v281;
  BOOL v282;
  unsigned int v283;
  uint64_t v284;
  int v285;
  int v286;
  int v287;
  uint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unsigned __int8 *v293;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  uint64_t v303;
  uint64_t v305;
  uint64_t v306;
  BOOL v307;
  unint64_t v309;
  unint64_t v310;
  BOOL v311;
  unint64_t v312;
  unint64_t v313;
  WTF::Lock *v316;
  int v317;
  WTF::Lock *v318;
  int v319;
  unsigned int v320;
  int v321;
  unsigned int v322;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v329;
  int v331;
  int v332;
  int v333;
  uint64_t v334;
  int v335;
  int v336;
  BOOL v337;
  int v338;
  int v339;
  int v340;
  int v341;
  BOOL v342;
  int v343;
  int v344;
  int v345;
  int v346;
  int v347;
  int v348;
  unsigned int v349;
  unsigned int v350;
  uint64_t v351;
  int v353;
  __int16 v354;
  char v355;
  int v356;
  WTF::Lock *v357;
  char v358;
  char v359;
  uint64_t v360;

  v360 = *MEMORY[0x1E0C80C00];
  v10 = *((unsigned __int16 *)a2 + 9);
  if (v10 == 16)
  {
    v11 = (unint64_t *)*((_QWORD *)a2 + 9);
    v12 = v11;
    do
    {
      v13 = (unint64_t)v12;
      v12 = (unint64_t *)*v12;
    }
    while (v12);
    if ((unint64_t *)v13 != v11)
      *v11 = v13;
    v14 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
    v15 = (_QWORD *)v13;
    do
    {
      v16 = v15;
      v15 = (_QWORD *)*v15;
    }
    while (v15);
    if (v16 == (_QWORD *)v13)
    {
      v17 = v16[1];
      v18 = v17 | v14;
      v16[1] = v18;
      if (v18 == v17)
      {
LABEL_10:
        LOBYTE(v13) = 0;
        goto LABEL_11;
      }
    }
    else
    {
      *(_QWORD *)v13 = v16;
      v29 = v16[1];
      v30 = v29 | v14;
      v16[1] = v30;
      if (v30 == v29)
        goto LABEL_10;
    }
    *(_QWORD *)(v13 + 16) |= *(_QWORD *)(v13 + 8);
    LOBYTE(v13) = 1;
    goto LABEL_11;
  }
  LOBYTE(v13) = 0;
  switch(*((_WORD *)a2 + 9))
  {
    case 6:
      v13 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (!*((_BYTE *)a2 + 72))
      {
        if (v13 == 0x10000000000)
        {
          v79 = *((_QWORD *)this + 29);
          v80 = *(_QWORD *)(v79 + 64);
          v81 = v80 | 0x10000000000;
          goto LABEL_104;
        }
        if (v13)
          v92 = (v13 & 0xFFFFFFFCFFFFFFFFLL) == 0;
        else
          v92 = 0;
        if (v92)
          goto LABEL_102;
        if (v13)
          v93 = (v13 & 0xFFFFFFF0FFFFFFFFLL) == 0;
        else
          v93 = 0;
        if (v93)
          goto LABEL_469;
        if ((v13 & 0xFF00000000) != 0 && (v13 & 0xFFFFFF00FFFFFFFFLL) == 0)
          goto LABEL_687;
        switch(v13)
        {
          case 0x10000000uLL:
            v79 = *((_QWORD *)this + 29);
            v80 = *(_QWORD *)(v79 + 64);
            v81 = v80 | 0x10000000;
            goto LABEL_104;
          case 0x40000000uLL:
            v79 = *((_QWORD *)this + 29);
            v80 = *(_QWORD *)(v79 + 64);
            v81 = v80 | 0x40000000;
            goto LABEL_104;
          case 0x80000000000uLL:
            goto LABEL_692;
        }
        if (!v13 || (v13 & 0xFFFFFFFFCFFFFFFFLL) != 0)
        {
LABEL_48:
          v13 = *((_QWORD *)a2 + 10);
          goto LABEL_39;
        }
        goto LABEL_241;
      }
      if (v13)
        v164 = (v13 & 0xFFFFFFFFCFFFFFFFLL) == 0;
      else
        v164 = 0;
      if (v164)
      {
        v79 = *((_QWORD *)this + 29);
        v80 = *(_QWORD *)(v79 + 64);
        v81 = v80 | 0x20000;
        goto LABEL_104;
      }
      if (v13)
      {
        v165 = v13 & 0x20000FFFFFF7;
        if ((v13 & 0x30000000) != 0)
          v165 = v13 & 0x20000FFDFFF7 | 0x20000;
        v166 = v165 | 0x8000000;
        if ((v13 & 0xFFFFDFFFF0000008) != 0)
          v13 = v166;
        goto LABEL_39;
      }
      goto LABEL_11;
    case 0xF:
      v19 = (_QWORD *)*((_QWORD *)a2 + 9);
      v20 = v19;
      do
      {
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
      if (v21 != v19)
        *v19 = v21;
      v22 = v21;
      do
      {
        v23 = v22;
        v22 = (_QWORD *)*v22;
      }
      while (v22);
      if (v23 != v21)
        *v21 = v23;
      v13 = v23[1];
      if (*((_BYTE *)v21 + 40) || !*((_DWORD *)v21 + 7))
        goto LABEL_37;
      v24 = v21;
      do
      {
        v25 = v24;
        v24 = (_QWORD *)*v24;
      }
      while (v24);
      if (v25 != v21)
        *v21 = v25;
      v26 = v25[2];
      v27 = (v26 & 0xFFFFFFF0FFFFFFFFLL) != 0 || v26 == 0;
      if (v27)
      {
LABEL_37:
        if ((v13 & 0x800000000) != 0)
        {
          v13 = v13 & 0xFFFFFFE7FFFFFFFFLL | 0x1000000000;
          goto LABEL_39;
        }
      }
      if (v13)
        goto LABEL_39;
      goto LABEL_11;
    case 0x29:
      v13 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (v13)
      {
        if ((v13 & 0xFFFFFDFFFFFFFFFFLL) != 0 && (v13 & 0xFFFFFC00FFFFFFFFLL) == 0)
          goto LABEL_102;
        if (v13 == 0x80000000000)
          goto LABEL_692;
        goto LABEL_477;
      }
      goto LABEL_11;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
      v69 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v70 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (v69)
        v71 = v70 == 0;
      else
        v71 = 1;
      if (v71)
        goto LABEL_10;
      v72 = v69 & 0xFFFFFDFFFFFFFFFFLL;
      v73 = v69 & 0xFFFFFC00FFFFFFFFLL;
      if (v72)
        v74 = v73 == 0;
      else
        v74 = 0;
      v75 = v70 & 0xFFFFFDFFFFFFFFFFLL;
      v76 = v70 & 0xFFFFFC00FFFFFFFFLL;
      if (v74 && v75 != 0 && v76 == 0)
        goto LABEL_102;
LABEL_477:
      v79 = *((_QWORD *)this + 29);
      v80 = *(_QWORD *)(v79 + 64);
      if ((*((_BYTE *)a2 + 57) & 0x18) == 0)
        goto LABEL_103;
      goto LABEL_693;
    case 0x37:
      if (!*((_DWORD *)this + 61)
        || (*(_BYTE *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0
        || (*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0)
      {
        v218 = 256;
      }
      else
      {
        v218 = 384;
      }
      v219 = *((_DWORD *)a2 + 14) & v218;
      v79 = *((_QWORD *)this + 29);
      v80 = *(_QWORD *)(v79 + 64);
      if (v219)
        v220 = (*((_DWORD *)a2 + 14) & 0x4000) == 0;
      else
        v220 = 1;
      if (!v220)
        goto LABEL_470;
      goto LABEL_103;
    case 0x3E:
      v41 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v42 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (v41)
        v189 = v42 == 0;
      else
        v189 = 1;
      if (v189)
        goto LABEL_10;
      if (JSC::DFG::Graph::addSpeculationMode(*((_QWORD *)this + 4), (uint64_t)a2, *((_DWORD *)this + 61)))
        goto LABEL_102;
      v190 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
      v191 = *(_QWORD *)a2;
      v192 = *(_QWORD *)a2 & 0xFFFFFFFF8;
      if ((*(_QWORD *)a2 & 1) != 0)
        v192 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
      if (v192)
        v190 = *(_QWORD *)(v192 + 8);
      v193 = *(_QWORD *)(v190 + 56);
      if ((v191 & 2) != 0)
      {
        LODWORD(v194) = -1;
      }
      else if ((v191 & 1) != 0)
      {
        LODWORD(v194) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v194 = v191 >> 36;
      }
      v195 = *((_QWORD *)a2 + 3);
      v196 = *((_QWORD *)a2 + 4);
      v353 = v194;
      v354 = 12;
      v355 = 0;
      v197 = (unsigned __int8 *)(v193 + 31);
      v359 = 0;
      v357 = (WTF::Lock *)(v193 + 31);
      v358 = 1;
      if (__ldaxr((unsigned __int8 *)(v193 + 31)))
      {
        __clrex();
LABEL_364:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v197);
        goto LABEL_365;
      }
      if (__stxr(1u, v197))
        goto LABEL_364;
LABEL_365:
      v359 = 1;
      hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v193 + 96), (uint64_t)&v356, &v353);
      if (!v358)
        goto LABEL_366;
      v318 = v357;
      v319 = __ldxr((unsigned __int8 *)v357);
      if (v319 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v357))
          goto LABEL_366;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v318, v199, v200, v201, v202, v203, v204, v205);
LABEL_366:
      if ((hasExitSite & 1) != 0)
        goto LABEL_376;
      v207 = *(_QWORD *)((v195 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v208 = *(_QWORD *)((v196 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v210 = (v208 & 0xFFFFFFF0FFFFFFFFLL) == 0 && v208 != 0;
      if (!v207 || (v207 & 0xFFFFFFF0FFFFFFFFLL) != 0)
      {
        if (!v210)
          goto LABEL_376;
LABEL_673:
        v321 = *((_DWORD *)a2 + 14);
        if ((v321 & 0xFC000) == 0
          || (v321 & 0xDC000) != (v321 & 0xFC000)
          || *(_WORD *)((v195 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 1
          || !v207
          || (v207 & 0xFFFFFFE0FFFFFFFFLL) != 0
          || *(_WORD *)((v196 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 1
          || !v208
          || (v208 & 0xFFFFFFE0FFFFFFFFLL) != 0)
        {
LABEL_376:
          if (((v41 | v42) & 0xFFFFFE00FFFFFFFFLL) != 0)
          {
            v79 = *((_QWORD *)this + 29);
            v80 = *(_QWORD *)(v79 + 64);
            if ((v41 & 0x7000000000) != 0 || (*((_DWORD *)a2 + 14) & 0x3820) != 0 || (v42 & 0x7000000000) != 0)
            {
LABEL_688:
              v149 = 0x7300000000;
LABEL_689:
              v81 = v80 | v149;
              goto LABEL_104;
            }
            goto LABEL_103;
          }
          goto LABEL_86;
        }
        goto LABEL_469;
      }
      if (!v210)
        goto LABEL_673;
      goto LABEL_469;
    case 0x40:
      v121 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v123 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (v121)
        v185 = v123 == 0;
      else
        v185 = 1;
      if (v185)
        goto LABEL_10;
      if ((v121 & 0xFFFFFDFFFFFFFFFFLL) == 0
        || (v121 & 0xFFFFFC00FFFFFFFFLL) != 0
        || (v123 & 0xFFFFFDFFFFFFFFFFLL) == 0
        || (v123 & 0xFFFFFC00FFFFFFFFLL) != 0)
      {
        v79 = *((_QWORD *)this + 29);
        v80 = *(_QWORD *)(v79 + 64);
        if ((v121 & 0x7000000000) == 0 && (*((_DWORD *)a2 + 14) & 0x3820) == 0 && (v123 & 0x7000000000) == 0)
          goto LABEL_103;
        goto LABEL_688;
      }
      if (JSC::DFG::Graph::addSpeculationMode(*((_QWORD *)this + 4), (uint64_t)a2, *((_DWORD *)this + 61)))
        goto LABEL_102;
      if (!JSC::DFG::Graph::addShouldSpeculateInt52(*(JSC::DFG::Graph **)(*((_QWORD *)this + 4) + 40), a2))
        goto LABEL_206;
      goto LABEL_469;
    case 0x41:
    case 0x54:
      v211 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (!v211)
        goto LABEL_10;
      if ((v211 & 0xFFFFFEFCFFFFFFFFLL) != 0)
        goto LABEL_385;
      v244 = 1024;
      v245 = 256;
      if ((v211 & 0x10000000000) == 0 && *((_DWORD *)this + 61))
      {
        if ((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0
          && (*(_BYTE *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0)
        {
          v244 = 1024;
        }
        else
        {
          v244 = 1536;
          v245 = 384;
        }
      }
      v246 = *((_DWORD *)a2 + 14);
      v247 = v246 & 0xFFFE0;
      if (v10 != 74 && ((v10 - 65) > 0x13 || ((1 << (v10 - 65)) & 0x8781B) == 0))
        v247 = v246 & 0xF7FE0;
      if ((v247 & v245) != 0)
      {
        v211 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
        if ((v247 & 0x4000) == 0)
          goto LABEL_102;
      }
      else
      {
        if ((v247 & v244) == 0)
          goto LABEL_102;
        v211 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
        if ((v247 & 0x8000) == 0)
          goto LABEL_102;
      }
LABEL_385:
      if ((v211 & 0xFFFFFFF0FFFFFFFFLL) != 0)
        goto LABEL_386;
      v284 = v211;
      if (!*((_DWORD *)this + 61)
        || (*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0)
      {
        v285 = 1024;
      }
      else
      {
        v285 = 1536;
      }
      v286 = *((_DWORD *)a2 + 14);
      v287 = v286 & 0xFFFE0;
      if (v10 != 74)
      {
        v322 = v10 - 65;
        if (v322 > 0x13 || ((1 << v322) & 0x8781B) == 0)
          v287 = v286 & 0xF7FE0;
      }
      if ((v287 & 0x40) != 0 || (v287 & v285) != 0 && (v287 & 0x8000) != 0)
        goto LABEL_386;
      v288 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
      v289 = *(_QWORD *)a2;
      v290 = *(_QWORD *)a2 & 0xFFFFFFFF8;
      if ((*(_QWORD *)a2 & 1) != 0)
        v290 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
      if (v290)
        v288 = *(_QWORD *)(v290 + 8);
      v291 = *(_QWORD *)(v288 + 56);
      if ((v289 & 2) != 0)
      {
        LODWORD(v292) = -1;
      }
      else if ((v289 & 1) != 0)
      {
        LODWORD(v292) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v292 = v289 >> 36;
      }
      v353 = v292;
      v354 = 12;
      v355 = 0;
      v293 = (unsigned __int8 *)(v291 + 31);
      v359 = 0;
      v357 = (WTF::Lock *)(v291 + 31);
      v358 = 1;
      if (__ldaxr((unsigned __int8 *)(v291 + 31)))
      {
        __clrex();
LABEL_613:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v293);
        goto LABEL_614;
      }
      if (__stxr(1u, v293))
        goto LABEL_613;
LABEL_614:
      v359 = 1;
      v302 = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v291 + 96), (uint64_t)&v356, &v353);
      if (!v358)
        goto LABEL_615;
      v316 = v357;
      v317 = __ldxr((unsigned __int8 *)v357);
      if (v317 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v357))
          goto LABEL_615;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v316, v295, v296, v297, v298, v299, v300, v301);
LABEL_615:
      v211 = v284;
      if ((v302 & 1) == 0)
        goto LABEL_469;
LABEL_386:
      if ((v211 & 0x7300000000) == 0 || (v211 & 0xFFFFFF8CFFFFFFFFLL) != 0)
      {
        v79 = *((_QWORD *)this + 29);
        v265 = *(_QWORD *)(v79 + 64);
        v266 = v265 | 0x300000000;
        LOBYTE(v13) = (v265 | 0x300000000) != v265;
        *(_QWORD *)(v79 + 64) = v266;
        v267 = *((_DWORD *)a2 + 14);
        if (*((_WORD *)a2 + 9) == 84 && (v267 & 0x1800) != 0)
        {
          v27 = v266 == v265;
          v327 = v265 | 0x80300000000;
          *(_QWORD *)(v79 + 64) = v327;
          LOBYTE(v13) = !v27 || v327 != v266;
          v266 = v327;
        }
        if ((v267 & 0x20) != 0)
        {
          v264 = v266 | 0x7000000000;
          goto LABEL_547;
        }
        goto LABEL_11;
      }
      v213 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v214 = v213 & 0x8000000000;
      v215 = (v213 & 0xFFFFFE40FFFFFFFFLL) != 0 || v213 == 0;
      v90 = 0x7000000000;
      if (!v215)
        v90 = 0x3000000000;
      v88 = *((_QWORD *)this + 29);
      v89 = *(_QWORD *)(v88 + 64);
      v87 = v214 | v89;
LABEL_127:
      v91 = v87 | v90;
LABEL_210:
      LOBYTE(v13) = v91 != v89;
      *(_QWORD *)(v88 + 64) = v91;
      goto LABEL_11;
    case 0x42:
    case 0x57:
      v121 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v122 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
      v123 = *(_QWORD *)(v122 + 0x40);
      if (v121)
        v124 = v123 == 0;
      else
        v124 = 1;
      if (v124)
        goto LABEL_10;
      if ((v121 & 0xFFFFFDFFFFFFFFFFLL) == 0 || (v121 & 0xFFFFFC00FFFFFFFFLL) != 0)
      {
        v268 = v10 == 87;
        v269 = v10 == 87;
        if (!v268 || v121 != 0x80000000000)
          goto LABEL_551;
        if (v123 != 0x80000000000)
        {
          v269 = 1;
LABEL_551:
          v143 = *((_QWORD *)this + 29);
          v270 = *(_QWORD *)(v143 + 64);
          v145 = v270 | 0x300000000;
          LOBYTE(v13) = (v270 | 0x300000000) != v270;
          *(_QWORD *)(v143 + 64) = v270 | 0x300000000;
          v271 = *((_DWORD *)a2 + 14);
          if ((v121 & 0x7000000000) != 0 || (*((_DWORD *)a2 + 14) & 0x20) != 0 || (v123 & 0x7000000000) != 0)
          {
            v27 = v145 == v270;
            v274 = v270 | 0x7300000000;
            *(_QWORD *)(v143 + 64) = v274;
            LOBYTE(v13) = !v27 || v274 != v145;
            v145 = v274;
          }
          if ((v271 & 0x1800) == 0)
            v269 = 0;
          if (!v269 && ((v121 | v123) & 0x80000000000) == 0)
            goto LABEL_11;
          goto LABEL_568;
        }
LABEL_692:
        v79 = *((_QWORD *)this + 29);
        v80 = *(_QWORD *)(v79 + 64);
LABEL_693:
        v81 = v80 | 0x80000000000;
        goto LABEL_104;
      }
      if ((v123 & 0xFFFFFDFFFFFFFFFFLL) == 0 || (v123 & 0xFFFFFC00FFFFFFFFLL) != 0)
      {
        v269 = v10 == 87;
        goto LABEL_551;
      }
      v127 = *((_DWORD *)this + 61);
      if ((v123 & 0x10000000000) != 0 && v122 != 0)
      {
        if (((v121 | v123) & 0x8F800000000) != 0)
        {
LABEL_757:
          if (((v121 | v123) & 0xFFFFFFF0FFFFFFFFLL) != 0)
            goto LABEL_206;
          if (v127)
            v331 = 1536;
          else
            v331 = 1024;
          v332 = *((_DWORD *)a2 + 14);
          v333 = v332 & 0xFFFE0;
          if (v10 != 74)
          {
            v350 = v10 - 66;
            if (v350 > 0x15 || ((1 << v350) & 0x243C0D) == 0)
              v333 = v332 & 0xF7FE0;
          }
          if ((v333 & 0x40) != 0
            || (v334 = *((_QWORD *)this + 4), (v333 & v331) != 0) && (v333 & 0x8000) != 0
            || JSC::DFG::Graph::hasExitSite(v334, (unint64_t *)a2, 12))
          {
LABEL_206:
            v68 = v123 | v121;
            goto LABEL_207;
          }
LABEL_469:
          v79 = *((_QWORD *)this + 29);
          v80 = *(_QWORD *)(v79 + 64);
LABEL_470:
          v81 = v80 | 0xC00000000;
LABEL_104:
          v82 = v81 == v80;
LABEL_105:
          LOBYTE(v13) = !v82;
          *(_QWORD *)(v79 + 64) = v81;
          goto LABEL_11;
        }
        v340 = 1;
        v341 = 256;
        if ((v121 & 0x10000000000) == 0 && v127)
        {
          v342 = (v123 & 0x10000000000) == 0 || v122 == 0;
          if (v342)
            v341 = 384;
          else
            v341 = 256;
          if (v342)
            v340 = 2;
          else
            v340 = 1;
        }
        v343 = *((_DWORD *)a2 + 14);
        v344 = v343 & 0xFFFE0;
        if (v10 != 74 && ((v10 - 66) > 0x15 || ((1 << (v10 - 66)) & 0x243C0D) == 0))
          v344 = v343 & 0xF7FE0;
        if ((v344 & v341) != 0)
        {
          if ((v344 & 0x4000) != 0)
            goto LABEL_757;
        }
        else
        {
          if (v340 == 1)
            v345 = 1024;
          else
            v345 = 1;
          if (v340 == 2)
            v346 = 1536;
          else
            v346 = v345;
          if ((v344 & v346) != 0 && (v344 & 0x8000) != 0)
            goto LABEL_757;
        }
LABEL_102:
        v79 = *((_QWORD *)this + 29);
        v80 = *(_QWORD *)(v79 + 64);
LABEL_103:
        v81 = v80 | 0x300000000;
        goto LABEL_104;
      }
      if (((v121 | v123) & 0x8F800000000) == 0)
      {
        if ((v121 & 0x10000000000) == 0 && v127 != 0)
          v150 = 384;
        else
          v150 = 256;
        v151 = *((_DWORD *)a2 + 14);
        v152 = v151 & 0xFFFE0;
        if (v10 != 74 && ((v10 - 66) > 0x15 || ((1 << (v10 - 66)) & 0x243C0D) == 0))
          v152 = v151 & 0xF7FE0;
        if ((v152 & v150) != 0)
        {
          if ((v152 & 0x4000) == 0)
            goto LABEL_102;
        }
        else
        {
          if ((v121 & 0x10000000000) == 0 && v127 != 0)
            v184 = 1536;
          else
            v184 = 1024;
          if ((v152 & v184) == 0 || (v152 & 0x8000) == 0)
            goto LABEL_102;
        }
      }
      if (((v121 | v123) & 0xFFFFFFF0FFFFFFFFLL) != 0)
        goto LABEL_206;
      if (v127)
        v278 = 1536;
      else
        v278 = 1024;
      v279 = *((_DWORD *)a2 + 14);
      v280 = v279 & 0xFFFE0;
      if (v10 != 74)
      {
        v320 = v10 - 66;
        if (v320 > 0x15 || ((1 << v320) & 0x243C0D) == 0)
          v280 = v279 & 0xF7FE0;
      }
      if ((v280 & 0x40) != 0)
        goto LABEL_206;
      v281 = *((_QWORD *)this + 4);
      if ((v280 & v278) != 0 && (v280 & 0x8000) != 0)
        goto LABEL_206;
      if ((JSC::DFG::Graph::hasExitSite(v281, (unint64_t *)a2, 12) & 1) != 0)
        goto LABEL_206;
      goto LABEL_469;
    case 0x44:
    case 0x45:
    case 0x58:
    case 0x5A:
      v132 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v133 = *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL;
      v134 = *(_QWORD *)(v133 + 0x40);
      if (v132)
        v135 = v134 == 0;
      else
        v135 = 1;
      if (v135)
        goto LABEL_10;
      if ((v132 & 0xFFFFFDFFFFFFFFFFLL) == 0
        || (v132 & 0xFFFFFC00FFFFFFFFLL) != 0
        || (v134 & 0xFFFFFDFFFFFFFFFFLL) == 0
        || (v134 & 0xFFFFFC00FFFFFFFFLL) != 0)
      {
        if (v10 != 88 && v10 != 90)
        {
LABEL_687:
          v79 = *((_QWORD *)this + 29);
          v80 = *(_QWORD *)(v79 + 64);
          goto LABEL_688;
        }
        if (v132 != 0x80000000000 || v134 != 0x80000000000)
        {
          v250 = *((_QWORD *)this + 29);
          v251 = *(_QWORD *)(v250 + 64);
          v252 = v251 | 0x7300000000;
          LOBYTE(v13) = (v251 | 0x7300000000) != v251;
          *(_QWORD *)(v250 + 64) = v251 | 0x7300000000;
          if ((v132 & 0x80000000000) != 0 || (*((_DWORD *)a2 + 14) & 0x1800) != 0 || (v134 & 0x80000000000) != 0)
          {
            *(_QWORD *)(v250 + 64) = v251 | 0x87300000000;
            LOBYTE(v13) = v252 != v251 || (v251 | 0x87300000000) != v252;
          }
          goto LABEL_11;
        }
        goto LABEL_692;
      }
      if ((v134 & 0x10000000000) == 0 || v133 == 0)
      {
        if (((v132 | v134) & 0x8F800000000) == 0)
        {
          v158 = (v132 & 0x10000000000) == 0 && *((_DWORD *)this + 61) != 0;
          if (v158)
            v159 = 384;
          else
            v159 = 256;
          v160 = *((_DWORD *)a2 + 14);
          v161 = v160 & 0xFFFE0;
          if (v10 != 74)
          {
            v283 = v10 - 68;
            if (v283 > 0x14 || ((1 << v283) & 0x190F03) == 0)
              v161 = v160 & 0xF7FE0;
          }
          if ((v161 & v159) != 0)
          {
            if ((v161 & 0x4000) == 0)
              goto LABEL_102;
          }
          else
          {
            if (v158)
              v216 = 1536;
            else
              v216 = 1024;
            if ((v161 & v216) == 0 || (v161 & 0x8000) == 0)
              goto LABEL_102;
          }
        }
      }
      else if (((v132 | v134) & 0x8F800000000) == 0)
      {
        v335 = 1;
        v336 = 256;
        if ((v132 & 0x10000000000) == 0 && *((_DWORD *)this + 61))
        {
          v337 = (v134 & 0x10000000000) == 0 || v133 == 0;
          if (v337)
            v336 = 384;
          else
            v336 = 256;
          if (v337)
            v335 = 2;
          else
            v335 = 1;
        }
        v338 = *((_DWORD *)a2 + 14);
        v339 = v338 & 0xFFFE0;
        if (v10 != 74)
        {
          v349 = v10 - 68;
          if (v349 > 0x14 || ((1 << v349) & 0x190F03) == 0)
            v339 = v338 & 0xF7FE0;
        }
        if ((v339 & v336) != 0)
        {
          if ((v339 & 0x4000) == 0)
            goto LABEL_102;
        }
        else
        {
          if (v335 == 1)
            v347 = 1024;
          else
            v347 = 1;
          if (v335 == 2)
            v348 = 1536;
          else
            v348 = v347;
          if ((v339 & v348) == 0 || (v339 & 0x8000) == 0)
            goto LABEL_102;
        }
      }
LABEL_235:
      v79 = *((_QWORD *)this + 29);
      v80 = *(_QWORD *)(v79 + 64);
      v81 = v80 | 0x7000000000;
      goto LABEL_104;
    case 0x46:
      v221 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (v221)
        v222 = (v221 & 0xFFFFFEFCFFFFFFFFLL) == 0;
      else
        v222 = 0;
      if (!v222)
        goto LABEL_235;
      v223 = 256;
      if ((v221 & 0x10000000000) == 0 && *((_DWORD *)this + 61))
      {
        if ((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0
          && (*(_BYTE *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0)
        {
          v223 = 256;
        }
        else
        {
          v223 = 384;
        }
      }
      v224 = *((_DWORD *)a2 + 14);
      if ((v224 & v223) != 0 && (v224 & 0x4000) != 0)
        goto LABEL_235;
      goto LABEL_102;
    case 0x47:
    case 0x48:
      v167 = *((_QWORD *)this + 4);
      v168 = *((_QWORD *)a2 + 3);
      if ((*((_BYTE *)a2 + 56) & 0x10) == 0)
      {
        if ((v168 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v174 = *(_QWORD *)((v168 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
          v175 = v174 == 0;
          if ((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v325 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
            if (!v325)
              v175 = 1;
            v174 |= v325;
            if ((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) != 0)
            {
              v326 = *(_QWORD *)((*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
              if (!v326)
                v175 = 1;
              v174 |= v326;
            }
          }
          goto LABEL_318;
        }
LABEL_719:
        v174 = 0;
        goto LABEL_319;
      }
      v169 = *((_DWORD *)a2 + 8);
      v170 = (v169 + v168);
      if (v170 <= v168)
        goto LABEL_719;
      v171 = *(_DWORD *)(v167 + 164);
      v172 = v171 >= v168;
      v173 = v171 - v168;
      if (!v172)
        v173 = 0;
      if (v173 <= v169 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19851BDF8);
      }
      v174 = 0;
      v175 = 0;
      v176 = v170 - v168;
      v177 = (uint64_t *)(*(_QWORD *)(v167 + 152) + 8 * v168);
      do
      {
        v178 = *v177++;
        v179 = v178 & 0xFF00FFFFFFFFFFFFLL;
        if ((v178 & 0xFF00FFFFFFFFFFFFLL) != 0)
        {
          v180 = *(_QWORD *)(v179 + 64);
          if (!v180)
            v175 = 1;
          v174 |= v180;
        }
        --v176;
      }
      while (v176);
LABEL_318:
      if (v175)
        goto LABEL_10;
LABEL_319:
      if (JSC::DFG::Graph::variadicArithShouldSpeculateInt32(v167, (uint64_t)a2, *((_DWORD *)this + 61)))
        goto LABEL_102;
      v181 = (v174 & 0xFFFFFE40FFFFFFFFLL) != 0 || v174 == 0;
      v182 = 0x7000000000;
      if (!v181)
        v182 = 0x3000000000;
      v183 = v182 | v174 & 0x8000000000;
      v31 = *((_QWORD *)this + 29);
      v32 = *(_QWORD *)(v31 + 64);
      v33 = v183 | v32;
LABEL_40:
      LOBYTE(v13) = v33 != v32;
      *(_QWORD *)(v31 + 64) = v33;
LABEL_11:
      *((_BYTE *)this + 240) |= v13;
      return;
    case 0x52:
    case 0x53:
      v83 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (!v83)
        goto LABEL_10;
      if ((v83 & 0xFFFFFDFFFFFFFFFFLL) != 0 && (v83 & 0xFFFFFC00FFFFFFFFLL) == 0)
        goto LABEL_115;
      v79 = *((_QWORD *)this + 29);
      v262 = *(_QWORD *)(v79 + 64);
      if (v83 == 0x80000000000)
      {
        v81 = v262 | 0x80000000000;
        v82 = (v262 | 0x80000000000) == v262;
        goto LABEL_105;
      }
      v266 = v262 | 0x300000000;
      LOBYTE(v13) = (v262 | 0x300000000) != v262;
      *(_QWORD *)(v79 + 64) = v262 | 0x300000000;
      v263 = *((_DWORD *)a2 + 14);
      if ((v263 & 0x1820) != 0)
      {
        if ((v263 & 0x20) != 0)
        {
          v27 = v266 == v262;
          v329 = v262 | 0x7300000000;
          *(_QWORD *)(v79 + 64) = v329;
          LOBYTE(v13) = !v27 || v329 != v266;
          v266 = v329;
        }
        if ((v263 & 0x1800) != 0)
          goto LABEL_539;
      }
      goto LABEL_11;
    case 0x55:
      v41 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v42 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (v41)
        v43 = v42 == 0;
      else
        v43 = 1;
      if (v43)
        goto LABEL_10;
      if ((v41 & 0xFFFFFDFFFFFFFFFFLL) == 0
        || (v41 & 0xFFFFFC00FFFFFFFFLL) != 0
        || (v42 & 0xFFFFFDFFFFFFFFFFLL) == 0
        || (v42 & 0xFFFFFC00FFFFFFFFLL) != 0)
      {
        if ((v41 & 0xFFFFFFFFCFFDFFFFLL) == 0 || (v42 & 0xFFFFFFFFCFFDFFFFLL) == 0)
        {
LABEL_241:
          v79 = *((_QWORD *)this + 29);
          v80 = *(_QWORD *)(v79 + 64);
          v81 = v80 | 0x30000000;
          goto LABEL_104;
        }
        if (v41 == 0x80000000000 && v42 == 0x80000000000)
          goto LABEL_692;
        v254 = *((_QWORD *)this + 29);
        v255 = *(_QWORD *)(v254 + 64);
        v256 = v255 | 0x300000000;
        LOBYTE(v13) = (v255 | 0x300000000) != v255;
        *(_QWORD *)(v254 + 64) = v255 | 0x300000000;
        v257 = *((_DWORD *)a2 + 14);
        if ((v257 & 0x20) != 0)
        {
          v27 = v256 == v255;
          v303 = v255 | 0x7300000000;
          *(_QWORD *)(v254 + 64) = v303;
          LOBYTE(v13) = !v27 || v303 != v256;
          v256 = v303;
        }
        if ((v257 & 0x1800) != 0)
        {
          *(_QWORD *)(v254 + 64) = v256 | 0x80000000000;
          if ((v256 | 0x80000000000) != v256)
            LOBYTE(v13) = 1;
          v256 |= 0x80000000000uLL;
        }
        if ((v257 & 0x2000) != 0)
        {
          v258 = (v256 | 0x30000000) == v256;
          *(_QWORD *)(v254 + 64) = v256 | 0x30000000;
          goto LABEL_569;
        }
        goto LABEL_11;
      }
      if (JSC::DFG::Graph::addSpeculationMode(*((_QWORD *)this + 4), (uint64_t)a2, *((_DWORD *)this + 61)))
        goto LABEL_102;
      v47 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
      v48 = *(_QWORD *)a2;
      v49 = *(_QWORD *)a2 & 0xFFFFFFFF8;
      if ((*(_QWORD *)a2 & 1) != 0)
        v49 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
      if (v49)
        v47 = *(_QWORD *)(v49 + 8);
      v50 = *(_QWORD *)(v47 + 56);
      if ((v48 & 2) != 0)
      {
        LODWORD(v51) = -1;
      }
      else if ((v48 & 1) != 0)
      {
        LODWORD(v51) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v51 = v48 >> 36;
      }
      v52 = *((_QWORD *)a2 + 3);
      v53 = *((_QWORD *)a2 + 4);
      v353 = v51;
      v354 = 12;
      v355 = 0;
      v54 = (unsigned __int8 *)(v50 + 31);
      v359 = 0;
      v357 = (WTF::Lock *)(v50 + 31);
      v358 = 1;
      if (__ldaxr((unsigned __int8 *)(v50 + 31)))
      {
        __clrex();
LABEL_74:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v54);
        goto LABEL_75;
      }
      if (__stxr(1u, v54))
        goto LABEL_74;
LABEL_75:
      v359 = 1;
      v63 = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v50 + 96), (uint64_t)&v356, &v353);
      if (!v358)
        goto LABEL_76;
      v156 = v357;
      v157 = __ldxr((unsigned __int8 *)v357);
      if (v157 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v357))
        {
LABEL_76:
          if ((v63 & 1) != 0)
            goto LABEL_86;
          v64 = *(_QWORD *)((v52 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
          v65 = *(_QWORD *)((v53 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
          v67 = (v65 & 0xFFFFFFF0FFFFFFFFLL) == 0 && v65 != 0;
          if (v64 && (v64 & 0xFFFFFFF0FFFFFFFFLL) == 0)
          {
            if (v67)
              goto LABEL_469;
          }
          else if (!v67)
          {
            goto LABEL_86;
          }
          v217 = *((_DWORD *)a2 + 14);
          if ((v217 & 0xFC000) != 0
            && (v217 & 0xDC000) == (v217 & 0xFC000)
            && *(_WORD *)((v52 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 1
            && v64
            && (v64 & 0xFFFFFFE0FFFFFFFFLL) == 0
            && *(_WORD *)((v53 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 1
            && v65
            && (v65 & 0xFFFFFFE0FFFFFFFFLL) == 0)
          {
            goto LABEL_469;
          }
LABEL_86:
          v68 = v42 | v41;
LABEL_207:
          v129 = v68 & 0x8000000000;
          v27 = (v68 & 0xFFFFFE40FFFFFFFFLL) == 0;
          v130 = 0x7000000000;
          if (v27)
            v130 = 0x3000000000;
          v88 = *((_QWORD *)this + 29);
          v89 = *(_QWORD *)(v88 + 64);
          v91 = v130 | v129 | v89;
          goto LABEL_210;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v156, v56, v57, v58, v59, v60, v61, v62);
      goto LABEL_76;
    case 0x56:
      v95 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v96 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (v95)
        v97 = v96 == 0;
      else
        v97 = 1;
      if (v97)
        goto LABEL_10;
      if ((v95 & 0xFFFFFDFFFFFFFFFFLL) == 0 || (v95 & 0xFFFFFC00FFFFFFFFLL) != 0)
      {
        if (v95 == 0x80000000000 && v96 == 0x80000000000)
          goto LABEL_692;
LABEL_528:
        v79 = *((_QWORD *)this + 29);
        v260 = *(_QWORD *)(v79 + 64);
        v266 = v260 | 0x300000000;
        LOBYTE(v13) = (v260 | 0x300000000) != v260;
        *(_QWORD *)(v79 + 64) = v260 | 0x300000000;
        v261 = *((_DWORD *)a2 + 14);
        if ((v261 & 0x1820) == 0)
          goto LABEL_11;
        if ((v261 & 0x20) != 0)
        {
          v27 = v266 == v260;
          v351 = v260 | 0x7300000000;
          *(_QWORD *)(v79 + 64) = v351;
          LOBYTE(v13) = !v27 || v351 != v266;
          v266 = v351;
        }
        if ((v261 & 0x1800) == 0)
          goto LABEL_11;
LABEL_539:
        v264 = v266 | 0x80000000000;
LABEL_547:
        v258 = v264 == v266;
        *(_QWORD *)(v79 + 64) = v264;
LABEL_569:
        if (!v258)
          LOBYTE(v13) = 1;
        goto LABEL_11;
      }
      if ((v96 & 0xFFFFFDFFFFFFFFFFLL) == 0 || (v96 & 0xFFFFFC00FFFFFFFFLL) != 0)
        goto LABEL_528;
      if (JSC::DFG::Graph::addSpeculationMode(*((_QWORD *)this + 4), (uint64_t)a2, *((_DWORD *)this + 61)))
        goto LABEL_102;
      v100 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
      v101 = *(_QWORD *)a2;
      v102 = *(_QWORD *)a2 & 0xFFFFFFFF8;
      if ((*(_QWORD *)a2 & 1) != 0)
        v102 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
      if (v102)
        v100 = *(_QWORD *)(v102 + 8);
      v103 = *(_QWORD *)(v100 + 56);
      if ((v101 & 2) != 0)
      {
        LODWORD(v104) = -1;
      }
      else if ((v101 & 1) != 0)
      {
        LODWORD(v104) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v104 = v101 >> 36;
      }
      v105 = *((_QWORD *)a2 + 3);
      v106 = *((_QWORD *)a2 + 4);
      v353 = v104;
      v354 = 12;
      v355 = 0;
      v107 = (unsigned __int8 *)(v103 + 31);
      v359 = 0;
      v357 = (WTF::Lock *)(v103 + 31);
      v358 = 1;
      if (__ldaxr((unsigned __int8 *)(v103 + 31)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v107))
      {
LABEL_173:
        v359 = 1;
        v116 = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v103 + 96), (uint64_t)&v356, &v353);
        if (!v358)
          goto LABEL_174;
        v162 = v357;
        v163 = __ldxr((unsigned __int8 *)v357);
        if (v163 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v357))
          {
LABEL_174:
            if ((v116 & 1) == 0)
            {
              v117 = *(_QWORD *)((v105 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
              v118 = *(_QWORD *)((v106 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
              v120 = (v118 & 0xFFFFFFF0FFFFFFFFLL) == 0 && v118 != 0;
              if (v117 && (v117 & 0xFFFFFFF0FFFFFFFFLL) == 0)
              {
                if (v120)
                  goto LABEL_469;
              }
              else if (!v120)
              {
                goto LABEL_184;
              }
              v225 = *((_DWORD *)a2 + 14);
              if ((v225 & 0xFC000) != 0
                && (v225 & 0xDC000) == (v225 & 0xFC000)
                && *(_WORD *)((v105 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 1
                && v117
                && (v117 & 0xFFFFFFE0FFFFFFFFLL) == 0
                && *(_WORD *)((v106 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 1
                && v118
                && (v118 & 0xFFFFFFE0FFFFFFFFLL) == 0)
              {
                goto LABEL_469;
              }
            }
LABEL_184:
            v68 = v96 | v95;
            goto LABEL_207;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v162, v109, v110, v111, v112, v113, v114, v115);
        goto LABEL_174;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v107);
      goto LABEL_173;
    case 0x59:
      v305 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      v306 = *(_QWORD *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (v305)
        v307 = v306 == 0;
      else
        v307 = 1;
      if (v307)
        goto LABEL_10;
      if (v305 == 0x80000000000 && v306 == 0x80000000000)
        goto LABEL_692;
      v309 = v305 & 0xFFFFFDFFFFFFFFFFLL;
      v310 = v305 & 0xFFFFFC00FFFFFFFFLL;
      if (v309)
        v311 = v310 == 0;
      else
        v311 = 0;
      v312 = v306 & 0xFFFFFDFFFFFFFFFFLL;
      v313 = v306 & 0xFFFFFC00FFFFFFFFLL;
      if (v311 && v312 != 0 && v313 == 0)
        goto LABEL_235;
      v79 = *((_QWORD *)this + 29);
      v80 = *(_QWORD *)(v79 + 64);
      v149 = 0x87000000000;
      goto LABEL_689;
    case 0x5C:
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      v34 = *((_QWORD *)this + 4);
      v35 = *((_QWORD *)a2 + 3);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v153 = *(_DWORD *)(v34 + 164);
        if (v153 <= v35)
        {
          __break(0xC471u);
          JUMPOUT(0x19851BDB8);
        }
        v154 = *(_QWORD *)(v34 + 152);
        v36 = *(_QWORD *)((*(_QWORD *)(v154 + 8 * v35) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
        if (!v36)
          goto LABEL_10;
        v155 = v35 + 1;
        if (v153 <= v155)
        {
          __break(0xC471u);
          JUMPOUT(0x19851BDC0);
        }
        v37 = (uint64_t *)(v154 + 8 * v155);
      }
      else
      {
        v36 = *(_QWORD *)((v35 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
        if (!v36)
          goto LABEL_10;
        v37 = (uint64_t *)((char *)a2 + 32);
      }
      v38 = *v37;
      v27 = v10 == 146;
      v39 = (char *)a2 + 72;
      if (v27)
        v39 = (char *)a2 + 80;
      v356 = *(_DWORD *)v39;
      v40 = JSC::DFG::ArrayMode::refine((JSC::DFG::ArrayMode *)&v356, (JSC::DFG::Graph *)v34, a2, v36, *(_QWORD *)((v38 & 0xFF00FFFFFFFFFFFFLL) + 0x40), 0, a7, a8);
      switch((char)v40)
      {
        case 7:
          if (BYTE2(v40) - 3 > 1)
            goto LABEL_102;
          v31 = *((_QWORD *)this + 29);
          v32 = *(_QWORD *)(v31 + 64);
          v33 = *((_QWORD *)a2 + 10) | v32 | 0x300000000;
          goto LABEL_40;
        case 8:
          v131 = *((_QWORD *)a2 + 10);
          if (BYTE2(v40) - 3 <= 1)
          {
            v31 = *((_QWORD *)this + 29);
            v32 = *(_QWORD *)(v31 + 64);
            v33 = v131 | v32 | 0x3000000000;
          }
          else
          {
            v31 = *((_QWORD *)this + 29);
            v32 = *(_QWORD *)(v31 + 64);
            if ((v131 & 0x2000000000) != 0)
              v33 = v32 | 0x3000000000;
            else
              v33 = v32 | 0x1000000000;
          }
          goto LABEL_40;
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
          v79 = *((_QWORD *)this + 29);
          v80 = *(_QWORD *)(v79 + 64);
          if (BYTE2(v40) - 3 > 1 || *((_WORD *)a2 + 9) != 92)
            goto LABEL_103;
          goto LABEL_266;
        case 20:
          v248 = *((unsigned __int16 *)a2 + 9);
          if ((*((_WORD *)a2 + 42) & 0x8F8) == 0)
          {
            if (v248 != 92)
              goto LABEL_469;
            v79 = *((_QWORD *)this + 29);
            v80 = *(_QWORD *)(v79 + 64);
            if (BYTE2(v40) - 3 <= 1)
            {
LABEL_266:
              v149 = 0x20300000000;
              goto LABEL_689;
            }
            goto LABEL_103;
          }
          if (BYTE2(v40) - 3 <= 1 && v248 == 92)
          {
            v79 = *((_QWORD *)this + 29);
            v80 = *(_QWORD *)(v79 + 64);
            v149 = 0x21300000000;
            goto LABEL_689;
          }
          goto LABEL_469;
        case 21:
        case 22:
          v79 = *((_QWORD *)this + 29);
          v80 = *(_QWORD *)(v79 + 64);
          if (BYTE2(v40) - 3 > 1 || *((_WORD *)a2 + 9) != 92)
          {
            v81 = v80 | 0xF000000000;
            goto LABEL_104;
          }
          v149 = 0x27000000000;
          break;
        case 23:
        case 24:
          v79 = *((_QWORD *)this + 29);
          v80 = *(_QWORD *)(v79 + 64);
          if (BYTE2(v40) - 3 > 1 || *((_WORD *)a2 + 9) != 92)
            goto LABEL_693;
          v149 = 0xA0000000000;
          goto LABEL_689;
        default:
          goto LABEL_48;
      }
      goto LABEL_689;
    case 0x13B:
      v141 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (!v141)
        goto LABEL_10;
      if ((v141 & 0x20000FFFFFF7) != 0)
      {
        if ((v141 & 0x20000) != 0
          && JSC::DFG::Graph::canOptimizeStringObjectAccess(*((JSC::DFG::Graph **)this + 4), *((const JSC::CodeOrigin **)this + 29)))
        {
          v141 = v141 & 0xFFFFDFFFC0000008 | 0x30000000;
        }
        else
        {
          v141 = v141 & 0xFFFFD48C80000008 | 0xB7370000000;
        }
      }
      goto LABEL_244;
    case 0x13C:
      v141 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (v141)
        v282 = (v141 & 0x20000) == 0;
      else
        v282 = 0;
      if (v282)
      {
        v13 = 1879048192;
        if ((v141 & 0xFFFFFFFF8FFFFFFFLL) == 0)
          v13 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
LABEL_39:
        v31 = *((_QWORD *)this + 29);
        v32 = *(_QWORD *)(v31 + 64);
        v33 = v32 | v13;
        goto LABEL_40;
      }
      if (!v141)
        goto LABEL_10;
      if ((v141 & 0xFFFFFFFF8FFFFFFFLL) != 0)
      {
        if ((v141 & 0x20000) != 0)
        {
          if (JSC::DFG::Graph::canOptimizeStringObjectAccess(*((JSC::DFG::Graph **)this + 4), *((const JSC::CodeOrigin **)this + 29)))v141 = v141 & 0x40000000 | 0x30000000;
          else
            v141 = 1879048192;
        }
        else
        {
          v141 = 1879048192;
        }
      }
LABEL_244:
      v79 = *((_QWORD *)this + 29);
      v80 = *(_QWORD *)(v79 + 64);
      v81 = v80 | v141;
      goto LABEL_104;
    case 0x13D:
      v141 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (v141)
        v242 = (v141 & 0xFFFFFF008FFFFFFFLL) == 0;
      else
        v242 = 0;
      if (v242)
        goto LABEL_244;
      if (!v141)
        goto LABEL_10;
      if ((v141 & 0xFFFFFF008FFFFFFFLL) != 0)
      {
        v243 = 0xFF70000000;
        if ((v141 & 0x20000) != 0
          && JSC::DFG::Graph::canOptimizeStringObjectAccess(*((JSC::DFG::Graph **)this + 4), *((const JSC::CodeOrigin **)this + 29)))
        {
          v243 = v141 & 0x40000000 | 0x30000000;
        }
      }
      else
      {
        v243 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      }
      v79 = *((_QWORD *)this + 29);
      v80 = *(_QWORD *)(v79 + 64);
      v81 = v80 | v243;
      goto LABEL_104;
    case 0x13F:
    case 0x140:
      v83 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (!v83)
        goto LABEL_10;
      if ((v83 & 0xFFFFFDFFFFFFFFFFLL) == 0 || (v83 & 0xFFFFFC00FFFFFFFFLL) != 0)
      {
        if (v10 == 320 && v83 == 0x80000000000)
          goto LABEL_692;
        v143 = *((_QWORD *)this + 29);
        v144 = *(_QWORD *)(v143 + 64);
        v145 = v144 | 0x300000000;
        LOBYTE(v13) = (v144 | 0x300000000) != v144;
        *(_QWORD *)(v143 + 64) = v144 | 0x300000000;
        v146 = *((_DWORD *)a2 + 14);
        if ((v146 & 0x20) != 0)
        {
          v27 = v145 == v144;
          v147 = v144 | 0x7300000000;
          *(_QWORD *)(v143 + 64) = v147;
          LOBYTE(v13) = !v27 || v147 != v145;
          v145 = v147;
        }
        if (v10 == 320 && (v146 & 0x1800) != 0)
        {
LABEL_568:
          v258 = (v145 | 0x80000000000) == v145;
          *(_QWORD *)(v143 + 64) = v145 | 0x80000000000;
          goto LABEL_569;
        }
        goto LABEL_11;
      }
LABEL_115:
      if ((v83 & 0x8F800000000) == 0)
      {
        v85 = 256;
        if ((v83 & 0x10000000000) == 0 && *((_DWORD *)this + 61))
        {
          if ((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) != 0
            && (*(_BYTE *)((*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL) + 0x45) & 1) != 0)
          {
            v85 = 256;
          }
          else
          {
            v85 = 384;
          }
        }
        v86 = *((_DWORD *)a2 + 14);
        if ((v86 & v85) == 0 || (v86 & 0x4000) == 0)
          goto LABEL_102;
      }
      if ((v83 & 0xFFFFFFF0FFFFFFFFLL) != 0 || (*((_BYTE *)a2 + 56) & 0x40) != 0)
        goto LABEL_124;
      v226 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
      v227 = *(_QWORD *)a2;
      v228 = *(_QWORD *)a2 & 0xFFFFFFFF8;
      if ((*(_QWORD *)a2 & 1) != 0)
        v228 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
      if (v228)
        v226 = *(_QWORD *)(v228 + 8);
      v229 = *(_QWORD *)(v226 + 56);
      if ((v227 & 2) != 0)
      {
        LODWORD(v230) = -1;
      }
      else if ((v227 & 1) != 0)
      {
        LODWORD(v230) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
      }
      else
      {
        v230 = v227 >> 36;
      }
      v353 = v230;
      v354 = 12;
      v355 = 0;
      v231 = (unsigned __int8 *)(v229 + 31);
      v359 = 0;
      v357 = (WTF::Lock *)(v229 + 31);
      v358 = 1;
      if (__ldaxr((unsigned __int8 *)(v229 + 31)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v231))
      {
LABEL_467:
        v359 = 1;
        v240 = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v229 + 96), (uint64_t)&v356, &v353);
        if (!v358)
          goto LABEL_468;
        v276 = v357;
        v277 = __ldxr((unsigned __int8 *)v357);
        if (v277 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v357))
          {
LABEL_468:
            if ((v240 & 1) == 0)
              goto LABEL_469;
LABEL_124:
            v87 = 0x7000000000;
            if ((v83 & 0xFFFFFE40FFFFFFFFLL) == 0)
              v87 = 0x3000000000;
            v88 = *((_QWORD *)this + 29);
            v89 = *(_QWORD *)(v88 + 64);
            v90 = v83 & 0x8000000000 | v89;
            goto LABEL_127;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow(v276, v233, v234, v235, v236, v237, v238, v239);
        goto LABEL_468;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v231);
      goto LABEL_467;
    case 0x189:
      v13 = *(_QWORD *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x40);
      if (!v13)
        goto LABEL_11;
      goto LABEL_39;
    default:
      goto LABEL_11;
  }
}

BOOL JSC::DFG::Graph::addShouldSpeculateInt52(JSC::DFG::Graph *this, JSC::DFG::Node *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char hasExitSite;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v22;
  _BOOL8 result;
  WTF::Lock *v24;
  int v25;
  int v26;
  _BOOL4 v28;
  int v29;
  __int16 v30;
  char v31;
  _BYTE v32[8];
  WTF::Lock *v33;
  char v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v4 = *(_QWORD *)(*(_QWORD *)a2 & 0xFFFFFFFF8);
  if (v4)
    this = *(JSC::DFG::Graph **)(v4 + 8);
  v5 = *((_QWORD *)this + 7);
  if ((v3 & 2) != 0)
  {
    LODWORD(v6) = -1;
  }
  else if ((v3 & 1) != 0)
  {
    LODWORD(v6) = *(_DWORD *)((*(_QWORD *)a2 & 0xFFFFFFFF8) + 8);
  }
  else
  {
    v6 = v3 >> 36;
  }
  v7 = *((_QWORD *)a2 + 3);
  v8 = *((_QWORD *)a2 + 4);
  v29 = v6;
  v30 = 12;
  v31 = 0;
  v9 = (unsigned __int8 *)(v5 + 31);
  v35 = 0;
  v33 = (WTF::Lock *)(v5 + 31);
  v34 = 1;
  if (__ldaxr((unsigned __int8 *)(v5 + 31)))
  {
    __clrex();
LABEL_10:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v9);
    goto LABEL_11;
  }
  if (__stxr(1u, v9))
    goto LABEL_10;
LABEL_11:
  v35 = 1;
  hasExitSite = JSC::DFG::ExitProfile::hasExitSite((uint64_t **)(v5 + 96), (uint64_t)v32, &v29);
  if (!v34)
    goto LABEL_12;
  v24 = v33;
  v25 = __ldxr((unsigned __int8 *)v33);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_30:
    WTF::Lock::unlockSlow(v24, v11, v12, v13, v14, v15, v16, v17);
LABEL_12:
  if ((hasExitSite & 1) != 0)
    return 0;
  v19 = *(_QWORD *)((v7 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  v20 = *(_QWORD *)((v8 & 0xFF00FFFFFFFFFFFFLL) + 0x40);
  v22 = (v20 & 0xFFFFFFF0FFFFFFFFLL) == 0 && v20 != 0;
  if (v19 && (v19 & 0xFFFFFFF0FFFFFFFFLL) == 0)
  {
    if (v22)
      return 1;
  }
  else if (!v22)
  {
    return 0;
  }
  result = 0;
  v26 = *((_DWORD *)a2 + 14);
  if ((v26 & 0xFC000) != 0 && (v26 & 0xDC000) == (v26 & 0xFC000))
  {
    if (*(_WORD *)((v7 & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 1)
      return 0;
    result = 0;
    if (v19 && (v19 & 0xFFFFFFE0FFFFFFFFLL) == 0)
    {
      v28 = (v20 & 0xFFFFFFE0FFFFFFFFLL) == 0 && v20 != 0;
      return *(_WORD *)((v8 & 0xFF00FFFFFFFFFFFFLL) + 0x12) != 1 && v28;
    }
  }
  return result;
}

float JSC::DFG::Graph::voteNode(uint64_t a1, float result)
{
  unint64_t v2;
  int v3;
  float *v4;
  float *v5;
  float *v6;

  v2 = a1 & 0xFF00FFFFFFFFFFFFLL;
  v3 = *(unsigned __int16 *)((a1 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if ((v3 & 0xFFFE) == 0x36)
  {
    v2 = *(_QWORD *)((a1 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
    v3 = *(unsigned __int16 *)(v2 + 0x12);
  }
  if (v3 == 15)
  {
    v4 = *(float **)(v2 + 72);
    v5 = v4;
    do
    {
      v6 = v5;
      v5 = *(float **)v5;
    }
    while (v5);
    if (v6 != v4)
      *(_QWORD *)v4 = v6;
    result = v6[12] + result;
    v6[12] = result;
  }
  return result;
}

float JSC::DFG::`anonymous namespace'::PredictionPropagationPhase::doDoubleVoting(JSC::DFG::Node *,float)::{lambda(JSC::DFG::Edge &)#2}::operator()(unsigned int a1, uint64_t a2, float result)
{
  unint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  float *v8;

  v3 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v4 = *(unsigned __int16 *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if ((v4 & 0xFFFE) == 0x36)
  {
    v3 = *(_QWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x18) & 0xFF00FFFFFFFFFFFFLL;
    v4 = *(unsigned __int16 *)(v3 + 0x12);
  }
  if (v4 == 15)
  {
    v5 = *(_QWORD **)(v3 + 72);
    v6 = v5;
    do
    {
      v7 = v6;
      v6 = (_QWORD *)*v6;
    }
    while (v6);
    if (v7 != v5)
      *v5 = v7;
    v8 = (float *)v7 + a1;
    result = v8[12] + result;
    v8[12] = result;
  }
  return result;
}

uint64_t WTF::PrintStream::printImpl<JSC::DFG::PromotedLocationKind,char [2],unsigned int,char [2]>(WTF::PrintStream *a1, int *a2, const char *a3, _DWORD *a4, const char *a5)
{
  uint64_t v5;
  const char *v10;
  WTF::PrintStream *v11;
  uint64_t result;

  v5 = *a2;
  if (v5 >= 0x14)
  {
    result = 143;
    __break(0xC471u);
  }
  else
  {
    v10 = off_1E358E618[v5];
    v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v11, "%s", v10);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    WTF::PrintStream::printf(a1, "%s", a3);
    WTF::PrintStream::printf(a1, "%u", *a4);
    return WTF::PrintStream::printf(a1, "%s", a5);
  }
  return result;
}

uint64_t WTF::PrintStream::printImpl<JSC::DFG::PromotedLocationKind,char [2],JSC::DFG::Node *,char [3],unsigned int,char [2]>(WTF::PrintStream *a1, int *a2, const char *a3, uint64_t *a4, const char *a5, _DWORD *a6, const char *a7)
{
  uint64_t v7;
  const char *v14;
  WTF::PrintStream *v15;
  uint64_t v16;
  int v17;
  WTF::PrintStream *v18;
  const char *v19;
  WTF::PrintStream *v20;
  uint64_t result;

  v7 = *a2;
  if (v7 < 0x14)
  {
    v14 = off_1E358E618[v7];
    v15 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v15, "%s", v14);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    WTF::PrintStream::printf(a1, "%s", a3);
    v16 = *a4;
    if (*a4)
    {
      v17 = *(_DWORD *)(v16 + 20);
      v18 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
      WTF::PrintStream::printf(v18, "%s", "D@");
      WTF::PrintStream::printf(v18, "%u", v17);
      (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
      if ((*(_DWORD *)(v16 + 56) & 7) == 3)
      {
        v19 = "<Double>";
      }
      else
      {
        if ((*(_DWORD *)(v16 + 56) & 7) != 5)
        {
LABEL_9:
          WTF::PrintStream::printf(a1, "%s", a5);
          WTF::PrintStream::printf(a1, "%u", *a6);
          return WTF::PrintStream::printf(a1, "%s", a7);
        }
        v19 = "<Int52>";
      }
    }
    else
    {
      v19 = "-";
    }
    v20 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 32))(a1);
    WTF::PrintStream::printf(v20, "%s", v19);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a1 + 40))(a1);
    goto LABEL_9;
  }
  result = 143;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(JSC::DFG::Graph **this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  unint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  unint64_t v17;
  unint64_t v18;
  JSC::DFG::Graph *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  WTF *v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  WTF *v44;
  void *v45;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  JSC::DFG::Graph *v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  _QWORD *v63;
  WTF *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  char *v73;
  char v74;
  uint64_t v75;
  WTF *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  char *v83;
  char v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  JSC::DFG::Graph *v112;
  uint64_t v113;
  uint64_t v114;
  size_t v115;
  JSC::DFG::Graph *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unsigned int *v123;
  WTF *v124;
  void *v125;
  uint64_t v126;
  JSC::DFG::Node **v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  BOOL v138;
  unsigned int v139;
  void **v140;
  size_t v141;
  size_t v142;
  void *v143;
  int v144;
  unint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  unint64_t v162;
  uint64_t v163;
  BOOL v164;
  uint64_t v165;
  int8x8_t *v166;
  uint64_t v167;
  int8x8_t v168;
  int8x8_t v169;
  int8x8_t v170;
  int8x8_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  int8x16_t *v176;
  int8x16_t *v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  _QWORD *v186;
  unsigned int v187;
  uint64_t v188;
  int v189;
  const void *v190;
  size_t v191;
  void *v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  size_t v203;
  void *v204;
  unint64_t v205;
  uint64_t v206;
  char *v207;
  unint64_t v208;
  size_t v209;
  void *v210;
  unsigned int v211;
  uint64_t v212;
  char *v213;
  unint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t v217;
  size_t v218;
  void *v219;
  size_t v220;
  uint64_t v221;
  unint64_t v222;
  WTF *v223;
  int v224;
  JSC::DFG::Graph *v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  char v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  WTF *v242;
  int v243;
  _QWORD *v244;
  _QWORD *v245;
  uint64_t v246;
  int v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int *v251;
  uint64_t *v252;
  uint64_t v253;
  int v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  WTF *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  int v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t *v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  unsigned int v289;
  uint64_t v290;
  BOOL v291;
  unint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  _QWORD *v298;
  unint64_t v299;
  _DWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  const void *v304;
  unint64_t v305;
  WTF *v306;
  WTF *v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  WTF *v312;
  WTF *v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  JSC::DFG::Graph *v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  WTF *v325;
  JSC::DFG::Graph *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unsigned int v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  char v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  int v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void **v362;
  unint64_t v363;
  unint64_t v364;
  char *v365;
  uint64_t v366;
  unsigned int v367;
  unsigned int i;
  size_t v369;
  int v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t *v373;
  unint64_t v374;
  char v375;
  uint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  BOOL v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  int v391;
  int v392;
  unsigned int v393;
  uint64_t v394;
  size_t v395;
  uint64_t *v396;
  unsigned int v397;
  WTF *v398;
  int v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unsigned int v403;
  uint64_t v404;
  uint64_t v405;
  _QWORD *v406;
  unsigned int v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  int v413;
  WTF *v414;
  void *v415;
  void *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  void *v426;
  WTF *v427;
  size_t v428;
  uint64_t v429;
  uint64_t v430;
  WTF *v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  unsigned int *v435;
  void *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t *v444;
  uint64_t v445;
  unint64_t v446;
  WTF *v447;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t *v455;
  uint64_t *v456;
  uint64_t v457;
  int v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unsigned int v462;
  uint64_t v463;
  int v464;
  uint64_t v465;
  int v466;
  WTF *v467;
  uint64_t v468;
  uint64_t v469;
  WTF *v470;
  uint64_t v471;
  WTF *v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int v475;
  unsigned int v476;
  unsigned int v477;
  uint64_t v478;
  int v479;
  uint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t v483;
  BOOL v484;
  uint64_t v485;
  unsigned int v487;
  _BYTE *v488;
  BOOL v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  void *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  int v504;
  unsigned int v505;
  _QWORD *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  int v513;
  uint64_t v514;
  uint64_t v515;
  BOOL v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  BOOL v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  uint64_t v526;
  _QWORD *v527;
  _QWORD *v528;
  unint64_t v529;
  WTF *v530;
  unint64_t v531;
  unint64_t v532;
  uint64_t v533;
  char v534;
  uint64_t *v535;
  void *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  void *v541;
  int v542;
  uint64_t *v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  unsigned int v547;
  uint64_t v549;
  int v550;
  BOOL v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  void *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  int v562;
  int v563;
  unsigned int v564;
  uint64_t v565;
  unint64_t v566;
  uint64_t v567;
  void *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t *v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t *v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  char v588;
  uint64_t *v589;
  void *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  BOOL v594;
  JSC::DFG::Graph *v595;
  unsigned int v596;
  uint64_t *v597;
  int v598;
  unint64_t v599;
  uint64_t *v600;
  JSC::DFG::Node *v601;
  uint64_t v602;
  unsigned int v603;
  uint64_t v604;
  WTF *v605;
  unsigned int v606;
  int v607;
  unsigned int v608;
  WTF *v609;
  char v610;
  size_t v611;
  size_t v612;
  size_t v613;
  unsigned int v614;
  unint64_t v615;
  void *__src;
  const void *__srca;
  unint64_t __srcb;
  uint64_t __srcc;
  char *__srcd;
  void *__srce;
  void *__srcf;
  size_t v623;
  unsigned int *v624;
  char v625;
  WTF *v626;
  int v627;
  _QWORD *v628;
  uint64_t v629;
  int v630;
  uint64_t v631;
  JSC::DFG::Graph *v632;
  JSC::DFG::Graph *v633;
  WTF *__na;
  size_t __n;
  JSC::DFG::Graph *v636;
  unsigned int v637;
  int v638;
  uint64_t v639;
  unint64_t v640;
  char v641;
  WTF *v642;
  WTF *v643;
  unsigned int v644;
  unint64_t v645;
  WTF *v646;
  unsigned int v647;
  WTF *v648;
  WTF *v649;
  unint64_t v650;
  unint64_t v651;
  int v652;
  void *v653;
  JSC::DFG::Graph **v654;
  _BYTE v655[24];
  _BYTE v656[31];
  char v657;
  _QWORD *v658[2];
  size_t v659;
  int v660;
  void *__dst;
  size_t __len;
  uint64_t v663;
  uint64_t v664;
  WTF *v665;
  void **p_s1;
  void *__s1;
  size_t v668;
  _QWORD v669[4];
  unsigned int *v670;
  WTF *v671;
  uint64_t v672;
  _BYTE v673[128];
  __int128 v674;
  __int128 v675;
  __int128 v676;
  uint64_t v677;
  JSC::DFG *v678;
  WTF *v679;
  void **v680;
  void **p_dst;
  WTF **v682;
  size_t *v683;
  WTF *v684[2];
  WTF **v685;
  void **v686;
  uint64_t *v687;
  int *v688;
  unint64_t v689;
  JSC::DFG::Node *v690;
  char v691[9];

  JSC::DFG::Graph::ensureSSADominators(this[4]);
  v654 = this;
  v8 = (unsigned int *)this[4];
  v674 = 0u;
  v675 = 0u;
  v676 = 0u;
  v677 = 0;
  v9 = v8[15];
  if ((_DWORD)v9)
  {
    v10 = 16;
    if (v9 > 0x10)
      v10 = v8[15];
    if (v10 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198520118);
    }
    LODWORD(v677) = 24 * (int)v10 / 0x18u;
    *((_QWORD *)&v676 + 1) = WTF::fastMalloc((WTF *)(24 * v10));
    bzero(*((void **)&v676 + 1), 24 * ((24 * (unint64_t)v9 - 24) / 0x18) + 24);
    v11 = (unsigned int *)this[4];
    v12 = v11[15];
  }
  else
  {
    v12 = 0;
    v11 = v8;
  }
  HIDWORD(v677) = v9;
  v678 = (JSC::DFG *)v8;
  v670 = v11;
  v671 = (WTF *)v673;
  v672 = 8;
  v640 = v12;
  if (v12)
  {
    v13 = 16;
    if (v12 > 0x10)
      v13 = v12;
    if (v13 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198520120);
    }
    v14 = (WTF *)WTF::fastMalloc((WTF *)(24 * v13));
    v15 = 24 * v12;
    v16 = v14;
    bzero(v14, 24 * ((v15 - 24) / 0x18uLL) + 24);
    v17 = *((unsigned int *)v654[4] + 15);
    v649 = v16;
    if ((_DWORD)v17)
    {
      v18 = 16;
      if (v17 > 0x10)
        v18 = *((unsigned int *)v654[4] + 15);
      if (v18 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x198520130);
      }
      v646 = (WTF *)WTF::fastMalloc((WTF *)(24 * v18));
      bzero(v646, 24 * ((24 * (unint64_t)v17 - 24) / 0x18) + 24);
      v19 = v654[4];
      v20 = *((unsigned int *)v19 + 15);
      v615 = v17;
      if ((_DWORD)v20)
      {
        v21 = 0;
        while (!*(_QWORD *)(*((_QWORD *)v19 + 6) + 8 * v21))
        {
          if (v20 == ++v21)
            goto LABEL_18;
        }
        if ((_DWORD)v20 != (_DWORD)v21)
        {
          v23 = v21;
          v24 = *((unsigned int *)v19 + 15);
          v650 = v24;
          do
          {
            if (v24 <= v23)
            {
              __break(0xC471u);
              JUMPOUT(0x19851FFD8);
            }
            v25 = *(_QWORD *)(*((_QWORD *)v19 + 6) + 8 * v23);
            v26 = *(unsigned int *)(v25 + 84);
            v27 = (unint64_t)(v26 + 31) >> 3;
            v28 = (WTF *)(v27 & 0x3FFFFFFC);
            if ((_DWORD)v26)
            {
              v29 = (void *)WTF::fastMalloc((WTF *)(v27 & 0x3FFFFFFC));
              bzero(v29, (size_t)v28);
            }
            else
            {
              v29 = 0;
            }
            bzero(v29, (size_t)v28);
            v30 = *(unsigned int *)(v25 + 8);
            if (v640 <= v30)
            {
              __break(0xC471u);
              JUMPOUT(0x19851FFE0);
            }
            v31 = *(_QWORD *)(v25 + 88);
            v32 = (char *)v649 + 24 * v30;
            v33 = (unint64_t)(*((_QWORD *)v32 + 1) + 31) >> 5;
            if (v33 == (unint64_t)(v26 + 31) >> 5)
            {
              memcpy(*(void **)v32, v29, 4 * v33);
            }
            else
            {
              v34 = (void *)WTF::fastMalloc(v28);
              memcpy(v34, v29, (size_t)v28);
              if (*(_QWORD *)v32)
                WTF::fastFree(*(_QWORD *)v32, v35, v36, v37, v38, v39, v40, v41);
              *(_QWORD *)v32 = v34;
            }
            *((_QWORD *)v32 + 1) = v26;
            *((_QWORD *)v649 + 3 * v30 + 2) = v31;
            if (v29)
              WTF::fastFree((unint64_t)v29, v35, v36, v37, v38, v39, v40, v41);
            v42 = *(unsigned int *)(v25 + 84);
            v43 = (unint64_t)(v42 + 31) >> 3;
            v44 = (WTF *)(v43 & 0x3FFFFFFC);
            if ((_DWORD)v42)
            {
              v45 = (void *)WTF::fastMalloc((WTF *)(v43 & 0x3FFFFFFC));
              bzero(v45, (size_t)v44);
            }
            else
            {
              v45 = 0;
            }
            bzero(v45, (size_t)v44);
            v46 = *(_DWORD *)(v25 + 8);
            if (v615 <= v46)
            {
              __break(0xC471u);
              JUMPOUT(0x19851FFE8);
            }
            v47 = *(_QWORD *)(v25 + 88);
            v48 = (char *)v646 + 24 * v46;
            v49 = (unint64_t)(*((_QWORD *)v48 + 1) + 31) >> 5;
            if (v49 == (unint64_t)(v42 + 31) >> 5)
            {
              memcpy(*(void **)v48, v45, 4 * v49);
            }
            else
            {
              v50 = (void *)WTF::fastMalloc(v44);
              memcpy(v50, v45, (size_t)v44);
              if (*(_QWORD *)v48)
                WTF::fastFree(*(_QWORD *)v48, v2, v51, v3, v4, v5, v6, v7);
              *(_QWORD *)v48 = v50;
            }
            *((_QWORD *)v48 + 1) = v42;
            *((_QWORD *)v646 + 3 * v46 + 2) = v47;
            if (v45)
              WTF::fastFree((unint64_t)v45, v2, v51, v3, v4, v5, v6, v7);
            ++v23;
            v24 = *((unsigned int *)v19 + 15);
            if (v24 <= v23)
            {
              v52 = v650;
            }
            else
            {
              v52 = v650;
              while (!*(_QWORD *)(*((_QWORD *)v19 + 6) + 8 * v23))
              {
                if (v24 == ++v23)
                {
                  v23 = *((unsigned int *)v19 + 15);
                  goto LABEL_46;
                }
              }
              v23 = v23;
            }
LABEL_46:
            ;
          }
          while (v52 != v23);
        }
        v610 = 0;
        v22 = v615;
      }
      else
      {
LABEL_18:
        v610 = 0;
        v22 = v17;
      }
      goto LABEL_52;
    }
    v615 = 0;
  }
  else
  {
    v615 = 0;
    v649 = 0;
  }
  v22 = 0;
  v646 = 0;
  v610 = 1;
LABEL_52:
  v644 = v22;
  do
  {
    v53 = *((_DWORD *)v654[4] + 15);
    if (!v53)
      break;
    v641 = 0;
    do
    {
      --v53;
      v54 = v654[4];
      if (*((_DWORD *)v54 + 15) <= v53)
      {
        __break(0xC471u);
        JUMPOUT(0x19851FF34);
      }
      v55 = *(_QWORD *)(*((_QWORD *)v54 + 6) + 8 * v53);
      if (v55)
      {
        v56 = *(_DWORD *)(v55 + 8);
        if (v22 <= v56)
        {
          __break(0xC471u);
          JUMPOUT(0x19851FF3CLL);
        }
        v57 = (char *)v646 + 24 * v56;
        v58 = *((_QWORD *)v57 + 1);
        v647 = v53;
        if ((unint64_t)(v58 + 31) < 0x20)
        {
          v651 = *((_QWORD *)v57 + 1);
          v59 = 0;
        }
        else
        {
          v59 = (char *)WTF::fastMalloc((WTF *)(((unint64_t)(v58 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL));
          memcpy(v59, *(const void **)v57, ((unint64_t)(*((_QWORD *)v57 + 1) + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
          v651 = *((_QWORD *)v57 + 1);
        }
        v60 = *((_QWORD *)v646 + 3 * v56 + 2);
        v61 = *(_DWORD *)(v55 + 220);
        while (v61)
        {
          --v61;
          v689 = 0;
          if (*(_DWORD *)(v55 + 220) <= v61)
          {
            __break(0xC471u);
            JUMPOUT(0x19851FE5CLL);
          }
          v689 = *(_QWORD *)(*(_QWORD *)(v55 + 208) + 8 * v61);
          v690 = (JSC::DFG::Node *)&v679;
          v684[0] = (WTF *)&v685;
          v684[1] = (WTF *)4;
          v668 = 4;
          __dst = &v689;
          __len = (size_t)v684;
          v665 = (WTF *)&v689;
          p_s1 = &__s1;
          __s1 = v669;
          v679 = v654[4];
          v680 = (void **)v689;
          p_dst = &__dst;
          v682 = &v665;
          v683 = &v659;
          v658[0] = &v679;
          v63 = __s1;
          if (HIDWORD(v668))
          {
            v65 = 8 * HIDWORD(v668);
            v66 = (unint64_t *)__s1;
            do
            {
              v67 = *v66++;
              v68 = HIDWORD(v67);
              v69 = v60 + HIDWORD(v60) + (int)v67;
              v70 = ~(_DWORD)v67 + (unint64_t)v60;
              v71 = v67 - 5;
              v72 = (v67 & 0x80000000) == 0;
              if ((v67 & 0x80000000) == 0)
                v73 = &v59[4 * ((unint64_t)v71 >> 5)];
              else
                v73 = &v59[(v70 >> 3) & 0x3FFFFFFC];
              if (v72)
                LOBYTE(v70) = v71;
              if (v68 == 2)
              {
                v73 = &v59[4 * (v69 >> 5)];
                v74 = v69;
              }
              else
              {
                v74 = v70;
              }
              *(_DWORD *)v73 &= ~(1 << v74);
              v65 -= 8;
            }
            while (v65);
          }
          v64 = v684[0];
          if (HIDWORD(v684[1]))
          {
            v75 = 8 * HIDWORD(v684[1]);
            v76 = v684[0];
            do
            {
              v77 = *(_QWORD *)v76;
              v76 = (WTF *)((char *)v76 + 8);
              v78 = HIDWORD(v77);
              v79 = v60 + HIDWORD(v60) + (int)v77;
              v80 = ~(_DWORD)v77 + (unint64_t)v60;
              v81 = v77 - 5;
              v2 = &v59[4 * ((unint64_t)((int)v77 - 5) >> 5)];
              v82 = (v77 & 0x80000000) == 0;
              if ((v77 & 0x80000000) == 0)
                v83 = &v59[4 * ((unint64_t)v81 >> 5)];
              else
                v83 = &v59[(v80 >> 3) & 0x3FFFFFFC];
              if (v82)
                LOBYTE(v80) = v81;
              if (v78 == 2)
              {
                v83 = &v59[4 * (v79 >> 5)];
                v84 = v79;
              }
              else
              {
                v84 = v80;
              }
              *(_DWORD *)v83 |= 1 << v84;
              v75 -= 8;
            }
            while (v75);
          }
          if (v669 != v63 && v63)
          {
            __s1 = 0;
            LODWORD(v668) = 0;
            WTF::fastFree((unint64_t)v63, v2, v62, v3, v4, v5, v6, v7);
            v64 = v684[0];
          }
          if (&v685 != (WTF ***)v64 && v64)
          {
            v684[0] = 0;
            LODWORD(v684[1]) = 0;
            WTF::fastFree((unint64_t)v64, v2, v62, v3, v4, v5, v6, v7);
          }
        }
        v85 = *(unsigned int *)(v55 + 8);
        if (v640 <= v85)
        {
          __break(0xC471u);
          JUMPOUT(0x19851FF44);
        }
        v86 = (char *)v649 + 24 * v85;
        v87 = *((_QWORD *)v86 + 1);
        v88 = (v651 + 31) >> 5;
        v89 = 4 * v88;
        if (v651 == v87)
        {
          v90 = 4 * v88;
          while (v90)
          {
            v91 = *(_DWORD *)&v59[v90 - 4];
            v92 = *(_DWORD *)(*(_QWORD *)v86 - 4 + v90);
            v90 -= 4;
            if (v91 != v92)
              goto LABEL_97;
          }
LABEL_111:
          v22 = v644;
          v53 = v647;
          goto LABEL_112;
        }
LABEL_97:
        if (v88 == (unint64_t)(v87 + 31) >> 5)
        {
          memcpy(*(void **)v86, v59, v89);
        }
        else
        {
          __na = (WTF *)(((v651 + 31) >> 3) & 0x1FFFFFFFFFFFFFFCLL);
          v642 = (WTF *)WTF::fastMalloc(__na);
          memcpy(v642, v59, (size_t)__na);
          if (*(_QWORD *)v86)
            WTF::fastFree(*(_QWORD *)v86, v2, v89, v3, v4, v5, v6, v7);
          *(_QWORD *)v86 = v642;
        }
        *((_QWORD *)v86 + 1) = v651;
        *((_QWORD *)v649 + 3 * v85 + 2) = v60;
        v93 = *(unsigned int *)(v55 + 52);
        v641 = 1;
        if (!(_DWORD)v93)
          goto LABEL_111;
        v22 = v644;
        v53 = v647;
        if (v651)
        {
          v94 = *(uint64_t **)(v55 + 40);
          v95 = &v94[v93];
          do
          {
            v96 = *v94;
            v97 = v651;
            do
            {
              v98 = *(_DWORD *)(v96 + 8);
              if (v644 <= v98)
              {
                __break(0xC471u);
                JUMPOUT(0x19851FED4);
              }
              --v97;
              if ((*(_DWORD *)&v59[4 * (v97 >> 5)] & (1 << v97)) != 0)
                *(_DWORD *)(*((_QWORD *)v646 + 3 * v98) + 4 * (v97 >> 5)) |= 1 << v97;
            }
            while (v97);
            ++v94;
            v641 = 1;
          }
          while (v94 != v95);
        }
        else
        {
LABEL_112:
          if (!v59)
            continue;
        }
        WTF::fastFree((unint64_t)v59, v2, v89, v3, v4, v5, v6, v7);
      }
    }
    while (v53);
  }
  while ((v641 & 1) != 0);
  if (!v640)
  {
    __break(0xC471u);
    JUMPOUT(0x198520138);
  }
  v99 = *((unsigned int *)v649 + 4);
  while (v99)
  {
    --v99;
    if (((*(_DWORD *)(*(_QWORD *)v649 + ((v99 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v99) & 1) == 0)
    {
      JSC::DFG::Graph::logAssertionFailure(v654[4], 0, (const WTF::CString *)"./dfg/DFGPutStackSinkingPhase.cpp", (const char *)0x9F, "BOOL JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()", "liveAtHead.atIndex(0).argument(i)");
      __break(0xC471u);
      JUMPOUT(0x19851D320);
    }
  }
  v100 = *((unsigned int *)v654[4] + 15);
  if (!(_DWORD)v100)
  {
    __break(0xC471u);
    JUMPOUT(0x198520140);
  }
  v101 = 16;
  if (v100 > 0x10)
    v101 = *((unsigned int *)v654[4] + 15);
  if (v101 >= 0xAAAAAAB)
  {
    __break(0xC471u);
    JUMPOUT(0x198520148);
  }
  v102 = (unsigned int *)WTF::fastMalloc((WTF *)(24 * v101));
  bzero(v102, 24 * ((24 * (unint64_t)v100 - 24) / 0x18) + 24);
  v109 = *((unsigned int *)v654[4] + 15);
  v648 = (WTF *)v102;
  v645 = v100;
  __n = v109;
  if ((_DWORD)v109)
  {
    v110 = 16;
    if (v109 > 0x10)
      v110 = *((unsigned int *)v654[4] + 15);
    if (v110 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x198520158);
    }
    v643 = (WTF *)WTF::fastMalloc((WTF *)(24 * v110));
    bzero(v643, 24 * ((24 * (unint64_t)v109 - 24) / 0x18) + 24);
    v112 = v654[4];
    v113 = *((unsigned int *)v112 + 15);
    if ((_DWORD)v113)
    {
      v114 = 0;
      while (!*(_QWORD *)(*((_QWORD *)v112 + 6) + 8 * v114))
      {
        if (v113 == ++v114)
          goto LABEL_141;
      }
      if ((_DWORD)v113 != (_DWORD)v114)
      {
        v200 = v114;
        v201 = *((unsigned int *)v112 + 15);
        do
        {
          if (v201 <= v200)
          {
            __break(0xC471u);
            JUMPOUT(0x19851FFF0);
          }
          v202 = *(_QWORD *)(*((_QWORD *)v112 + 6) + 8 * v200);
          v203 = *(unsigned int *)(v202 + 84);
          if ((_DWORD)v203)
          {
            v204 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v202 + 84));
            bzero(v204, v203);
          }
          else
          {
            v204 = 0;
          }
          v205 = *(unsigned int *)(v202 + 8);
          if (v645 <= v205)
          {
            __break(0xC471u);
            JUMPOUT(0x19851FFF8);
          }
          v206 = *(_QWORD *)(v202 + 88);
          v207 = (char *)v648 + 24 * v205;
          v208 = *(_QWORD *)v207;
          if (*(_QWORD *)v207)
          {
            *(_QWORD *)v207 = 0;
            *((_DWORD *)v207 + 2) = 0;
            WTF::fastFree(v208, (void *)v103, v111, v104, v105, v106, v107, v108);
          }
          *(_QWORD *)v207 = v204;
          *((_DWORD *)v207 + 2) = v203;
          *((_DWORD *)v207 + 3) = v203;
          *((_QWORD *)v648 + 3 * v205 + 2) = v206;
          v209 = *(unsigned int *)(v202 + 84);
          if ((_DWORD)v209)
          {
            v210 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v202 + 84));
            bzero(v210, v209);
          }
          else
          {
            v210 = 0;
          }
          v211 = *(_DWORD *)(v202 + 8);
          if (__n <= v211)
          {
            __break(0xC471u);
            JUMPOUT(0x198520000);
          }
          v212 = *(_QWORD *)(v202 + 88);
          v213 = (char *)v643 + 24 * v211;
          v214 = *(_QWORD *)v213;
          if (*(_QWORD *)v213)
          {
            *(_QWORD *)v213 = 0;
            *((_DWORD *)v213 + 2) = 0;
            WTF::fastFree(v214, (void *)v103, v111, v104, v105, v106, v107, v108);
          }
          *(_QWORD *)v213 = v210;
          *((_DWORD *)v213 + 2) = v209;
          *((_DWORD *)v213 + 3) = v209;
          *((_QWORD *)v643 + 3 * v211 + 2) = v212;
          ++v200;
          v201 = *((unsigned int *)v112 + 15);
          if (v201 <= v200)
          {
            v102 = (unsigned int *)v648;
          }
          else
          {
            v102 = (unsigned int *)v648;
            while (!*(_QWORD *)(*((_QWORD *)v112 + 6) + 8 * v200))
            {
              if (v201 == ++v200)
              {
                v200 = *((unsigned int *)v112 + 15);
                goto LABEL_289;
              }
            }
            v200 = v200;
          }
LABEL_289:
          ;
        }
        while (v113 != v200);
      }
    }
  }
  else
  {
    v643 = 0;
  }
LABEL_141:
  v115 = v102[5];
  if ((_DWORD)v115)
    memset((void *)(*(_QWORD *)v102 + v102[4]), 7, v115);
LABEL_143:
  v116 = v654[4];
  v117 = *((unsigned int *)v116 + 15);
  if (!(_DWORD)v117)
    goto LABEL_938;
  v118 = 0;
  while (2)
  {
    if (*(_QWORD *)(*((_QWORD *)v116 + 6) + 8 * v118))
    {
      if ((_DWORD)v117 == (_DWORD)v118)
        break;
      v625 = 0;
      LODWORD(v119) = *((_DWORD *)v116 + 15);
      LODWORD(v120) = v118;
      v636 = v654[4];
      v630 = v119;
      while (1)
      {
        if (v119 <= v120)
        {
          __break(0xC471u);
          JUMPOUT(0x19851FF4CLL);
        }
        v652 = v120;
        v121 = *(_QWORD *)(*((_QWORD *)v116 + 6) + 8 * v120);
        v122 = *(unsigned int *)(v121 + 8);
        if (v645 <= v122)
        {
          __break(0xC471u);
          JUMPOUT(0x19851FF54);
        }
        v123 = &v102[6 * v122];
        v124 = (WTF *)v123[3];
        __s1 = 0;
        LODWORD(v668) = 0;
        HIDWORD(v668) = (_DWORD)v124;
        if ((_DWORD)v124)
        {
          v125 = (void *)WTF::fastMalloc(v124);
          LODWORD(v668) = (_DWORD)v124;
          __s1 = v125;
          memcpy(v125, *(const void **)v123, v123[3]);
        }
        v669[0] = *(_QWORD *)&v102[6 * v122 + 4];
        v126 = *(unsigned int *)(v121 + 220);
        if ((_DWORD)v126)
        {
          v127 = *(JSC::DFG::Node ***)(v121 + 208);
          v128 = 8 * v126;
          do
          {
            v690 = 0;
            v690 = *v127;
            v103 = (unint64_t)v690;
            v130 = *((unsigned __int16 *)v690 + 9);
            switch(v130)
            {
              case 18:
                v131 = *((_QWORD *)v690 + 9);
                if (HIDWORD(v131) == 2)
                {
                  v129 = LODWORD(v669[0]) + (uint64_t)(int)v131 + HIDWORD(v669[0]);
                }
                else if ((v131 & 0x80000000) != 0)
                {
                  v129 = (*((_QWORD *)v690 + 9) ^ 0xFFFFFFFFLL) + LODWORD(v669[0]);
                }
                else
                {
                  v129 = (uint64_t)(((unint64_t)v131 << 32) - 0x500000000) >> 32;
                }
                *((_BYTE *)__s1 + v129) = 7;
                break;
              case 17:
                v132 = *((_QWORD *)v690 + 9);
                v133 = *(_QWORD *)v132;
                if (HIDWORD(*(_QWORD *)v132) == 2)
                {
                  v134 = LODWORD(v669[0]) + (uint64_t)(int)v133 + HIDWORD(v669[0]);
                }
                else if ((v133 & 0x80000000) != 0)
                {
                  v134 = (*(_QWORD *)v132 ^ 0xFFFFFFFFLL) + LODWORD(v669[0]);
                }
                else
                {
                  v134 = (uint64_t)(((unint64_t)v133 << 32) - 0x500000000) >> 32;
                }
                *((_BYTE *)__s1 + v134) = *(_BYTE *)(v132 + 12);
                break;
              case 19:
                v135 = **((_QWORD **)v690 + 9);
                if (HIDWORD(v135) == 2)
                {
                  v136 = LODWORD(v669[0]) + (uint64_t)(int)v135 + HIDWORD(v669[0]);
                }
                else if ((v135 & 0x80000000) != 0)
                {
                  v136 = (**((_QWORD **)v690 + 9) ^ 0xFFFFFFFFLL) + LODWORD(v669[0]);
                }
                else
                {
                  v136 = (uint64_t)(((unint64_t)v135 << 32) - 0x500000000) >> 32;
                }
                v137 = *((unsigned __int8 *)__s1 + v136);
                if (BYTE6(qword_1ECF4C32A) | HIBYTE(qword_1ECF4C32A))
                  v138 = v137 == 7;
                else
                  v138 = 0;
                if (v138)
                {
                  JSC::DFG::Graph::logAssertionFailure(v654[4], v690, (const WTF::CString *)"./dfg/DFGPutStackSinkingPhase.cpp", (const char *)0x105, "BOOL JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()", "!isConflicting");
                  __break(0xC471u);
                  JUMPOUT(0x19851FC58);
                }
                if (v137 == 7)
                {
                  v542 = 1;
                  v116 = v636;
                  goto LABEL_245;
                }
                break;
              default:
                v679 = (WTF *)&v690;
                v680 = &__s1;
                __dst = &v690;
                __len = (size_t)&__s1;
                v684[0] = v654[4];
                v684[1] = v690;
                v685 = &v679;
                v686 = &__dst;
                v687 = &v664;
                v665 = (WTF *)v684;
                v658[0] = v684;
                break;
            }
            ++v127;
            v128 -= 8;
          }
          while (v128);
        }
        v139 = *(_DWORD *)(v121 + 8);
        if (__n <= v139)
        {
          __break(0xC471u);
          JUMPOUT(0x19851FF5CLL);
        }
        v140 = (void **)((char *)v643 + 24 * v139);
        v141 = HIDWORD(v668);
        v142 = *((unsigned int *)v140 + 3);
        if (HIDWORD(v668) == v142)
        {
          v143 = __s1;
          if (!memcmp(__s1, *v140, HIDWORD(v668)))
          {
            v542 = 31;
            v102 = (unsigned int *)v648;
            v116 = v636;
            goto LABEL_183;
          }
        }
        if (&__s1 != v140)
        {
          if (v142 > v141)
          {
            *((_DWORD *)v140 + 3) = v141;
          }
          else
          {
            v145 = *((unsigned int *)v140 + 2);
            if (v141 > v145)
            {
              if (*((_DWORD *)v140 + 2))
              {
                if (v142)
                  *((_DWORD *)v140 + 3) = 0;
                v540 = (unint64_t)*v140;
                if (*v140)
                {
                  *v140 = 0;
                  *((_DWORD *)v140 + 2) = 0;
                  WTF::fastFree(v540, (void *)v103, v115, v104, v105, v106, v107, v108);
                  v145 = *((unsigned int *)v140 + 2);
                }
              }
              v189 = HIDWORD(v668);
              if (v145 < HIDWORD(v668))
              {
                v190 = *v140;
                v191 = *((unsigned int *)v140 + 3);
                v192 = (void *)WTF::fastMalloc((WTF *)HIDWORD(v668));
                *((_DWORD *)v140 + 2) = v189;
                *v140 = v192;
                memcpy(v192, v190, v191);
                if (v190)
                {
                  if (*v140 == v190)
                  {
                    *v140 = 0;
                    *((_DWORD *)v140 + 2) = 0;
                  }
                  WTF::fastFree((unint64_t)v190, v193, v194, v195, v196, v197, v198, v199);
                }
              }
            }
            v141 = *((unsigned int *)v140 + 3);
          }
          v146 = (char *)*v140;
          v147 = (char *)__s1;
          if (v141)
          {
            memmove(v146, __s1, v141);
            v148 = *((unsigned int *)v140 + 3);
            v146 = (char *)*v140;
            v147 = (char *)__s1;
          }
          else
          {
            v148 = 0;
          }
          memcpy(&v146[v148], &v147[v148], HIDWORD(v668) - v148);
          *((_DWORD *)v140 + 3) = HIDWORD(v668);
        }
        v104 = 24;
        *((_QWORD *)v643 + 3 * v139 + 2) = v669[0];
        v149 = *(unsigned int *)(v121 + 220);
        v150 = *(_QWORD *)(v121 + 208);
        v151 = *(_QWORD *)(v150 + 8 * v149 - 8);
        v152 = *(unsigned __int16 *)(v151 + 18);
        if ((v152 - 364) >= 0xC)
        {
          v188 = v150 - 16;
          v102 = (unsigned int *)v648;
          v116 = v636;
          v105 = 7;
          do
          {
            v151 = *(_QWORD *)(v188 + 8 * v149);
            v152 = *(unsigned __int16 *)(v151 + 18);
            --v149;
          }
          while ((v152 - 364) > 0xB);
        }
        else
        {
          v102 = (unsigned int *)v648;
          v116 = v636;
          v105 = 7;
        }
        v106 = 1;
        switch(v152)
        {
          case 364:
            goto LABEL_203;
          case 365:
            v106 = 2;
            goto LABEL_203;
          case 366:
            v106 = (*(_DWORD *)(*(_QWORD *)(v151 + 72) + 12) + 1);
            goto LABEL_698;
          case 367:
            v106 = *(unsigned int *)(*(_QWORD *)(v151 + 72) + 12);
LABEL_698:
            if (!(_DWORD)v106)
              goto LABEL_244;
LABEL_203:
            v153 = 0;
            v154 = 0;
            v155 = (uint64_t *)(v151 + 72);
            v156 = HIDWORD(v668);
            v157 = HIDWORD(v668) & 0xFFFFFFF0;
            v158 = -(uint64_t)(HIDWORD(v668) & 0xFFFFFFF8);
            break;
          default:
            v625 = 1;
            v542 = 0;
            goto LABEL_245;
        }
        do
        {
          if (v152 == 366)
          {
            v186 = (_QWORD *)*v155;
            v187 = *(_DWORD *)(*v155 + 12);
            if (v187 <= v153)
            {
              if (v187 != v153)
              {
                __break(0xC471u);
                JUMPOUT(0x19851F82CLL);
              }
              v159 = (uint64_t)(v186 + 2);
            }
            else
            {
              v159 = *v186 + 32 * v154 + 16;
            }
          }
          else if (v152 == 367)
          {
            if (*(_DWORD *)(*v155 + 12) <= v153)
            {
              __break(0xC471u);
              JUMPOUT(0x198520018);
            }
            v159 = *(_QWORD *)*v155 + 8 * v154;
          }
          else if (v153)
          {
            if (v153 != 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19851FE4CLL);
            }
            v159 = *v155 + 16;
          }
          else
          {
            v159 = (uint64_t)v155;
            if (v152 != 364)
              v159 = *v155;
          }
          if ((_DWORD)v156)
          {
            v160 = *(unsigned int *)(*(_QWORD *)v159 + 8);
            if (v645 <= v160)
            {
              __break(0xC471u);
              JUMPOUT(0x19851FF80);
            }
            v161 = (char *)__s1;
            v162 = *(_QWORD *)&v102[6 * v160];
            v163 = v156;
            if (v156 < 8)
              goto LABEL_223;
            v164 = v162 >= (unint64_t)__s1 + v156 || (unint64_t)__s1 >= v162 + v156;
            v163 = v156;
            if (!v164)
              goto LABEL_223;
            if (v156 >= 0x10)
            {
              v165 = v156 & 0xFFFFFFF0;
              v176 = (int8x16_t *)((char *)__s1 + v156 - 16);
              v177 = (int8x16_t *)(v162 + v156 - 16);
              v103 = v157;
              do
              {
                v178 = vrev64q_s8(*v177);
                v179 = vextq_s8(v178, v178, 8uLL);
                v180 = *v176--;
                v181 = vrev64q_s8(v180);
                v182 = vextq_s8(v181, v181, 8uLL);
                v183 = vceqzq_s8(v182);
                v184.i64[0] = 0x707070707070707;
                v184.i64[1] = 0x707070707070707;
                v185 = vrev64q_s8(vbslq_s8(vbicq_s8(vtstq_s8(v179, v179), v183), vbslq_s8(vceqq_s8(v179, v182), v179, v184), vbslq_s8(vbicq_s8(v183, vceqzq_s8(v179)), v179, v182)));
                *v177-- = vextq_s8(v185, v185, 8uLL);
                v103 -= 16;
              }
              while (v103);
              if (v165 == v156)
                goto LABEL_234;
              if ((v156 & 8) == 0)
              {
                v163 = v156 & 0xF;
LABEL_223:
                v172 = v161 - 1;
                v173 = v162 - 1;
                do
                {
                  v174 = v163 - 1;
                  v103 = v172[v163];
                  if (*(unsigned __int8 *)(v173 + v163) == (_DWORD)v103)
                    LODWORD(v115) = *(unsigned __int8 *)(v173 + v163);
                  else
                    LODWORD(v115) = 7;
                  if (v172[v163])
                    v115 = v115;
                  else
                    v115 = *(unsigned __int8 *)(v173 + v163);
                  if (*(_BYTE *)(v173 + v163))
                    v175 = v115;
                  else
                    v175 = v172[v163];
                  *(_BYTE *)(v173 + v163--) = v175;
                }
                while (v174);
                goto LABEL_234;
              }
            }
            else
            {
              v165 = 0;
            }
            v166 = (int8x8_t *)&v161[v156 - v165 - 8];
            v103 = v162 + v156 - v165 - 8;
            v167 = v158 + v165;
            do
            {
              v168 = vrev64_s8(*(int8x8_t *)v103);
              v169 = *v166--;
              v170 = vrev64_s8(v169);
              v171 = vceqz_s8(v170);
              *(int8x8_t *)v103 = vrev64_s8(vbsl_s8(vbic_s8(vtst_s8(v168, v168), v171), vbsl_s8(vceq_s8(v168, v170), v168, (int8x8_t)0x707070707070707), vbsl_s8(vbic_s8(v171, vceqz_s8(v168)), v168, v170)));
              v103 -= 8;
              v167 += 8;
            }
            while (v167);
            if ((v156 & 0xFFFFFFF8) == v156)
              goto LABEL_234;
            v163 = v156 & 7;
            goto LABEL_223;
          }
LABEL_234:
          v153 = v154 + 1;
          v154 = (v154 + 1);
        }
        while ((_DWORD)v106 != v153);
LABEL_244:
        v542 = 0;
        v625 = 1;
LABEL_245:
        v143 = __s1;
LABEL_183:
        if (v143)
        {
          __s1 = 0;
          LODWORD(v668) = 0;
          WTF::fastFree((unint64_t)v143, (void *)v103, v115, v104, v105, v106, v107, v108);
        }
        if (v542 != 31 && v542)
        {
          v429 = 0;
          v428 = __n;
          goto LABEL_621;
        }
        v120 = (v652 + 1);
        v119 = *((unsigned int *)v116 + 15);
        if (v119 <= v120)
        {
          v144 = v630;
        }
        else
        {
          v144 = v630;
          while (!*(_QWORD *)(*((_QWORD *)v116 + 6) + 8 * v120))
          {
            if (v119 == ++v120)
            {
              LODWORD(v120) = *((_DWORD *)v116 + 15);
              break;
            }
          }
        }
        if (v144 == (_DWORD)v120)
        {
          if ((v625 & 1) == 0)
          {
            v116 = v654[4];
            LODWORD(v117) = *((_DWORD *)v116 + 15);
            goto LABEL_292;
          }
          goto LABEL_143;
        }
      }
    }
    if (v117 != ++v118)
      continue;
    break;
  }
LABEL_292:
  if (!(_DWORD)v117)
  {
LABEL_938:
    __break(0xC471u);
    JUMPOUT(0x198520110);
  }
  v215 = (uint64_t *)*((_QWORD *)v116 + 6);
  v216 = *v215;
  v217 = *(unsigned int *)(*v215 + 84);
  if (!(_DWORD)v217)
  {
    v219 = 0;
    LODWORD(v221) = *(_DWORD *)(v216 + 88);
    v220 = *(unsigned int *)(v216 + 92);
    v665 = 0;
    p_s1 = 0;
LABEL_841:
    v637 = 0;
    v664 = 0;
    goto LABEL_324;
  }
  if (v217 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x198520168);
  }
  v218 = 8 * v217;
  v219 = (void *)WTF::fastMalloc((WTF *)(8 * v217));
  bzero(v219, v218);
  v116 = v654[4];
  LODWORD(v117) = *((_DWORD *)v116 + 15);
  v221 = *(unsigned int *)(v216 + 88);
  v220 = *(unsigned int *)(v216 + 92);
  v665 = 0;
  p_s1 = 0;
  if (!(_DWORD)v117)
  {
    __break(0xC471u);
    JUMPOUT(0x198520170);
  }
  v215 = (uint64_t *)*((_QWORD *)v116 + 6);
  v222 = *(unsigned int *)(*v215 + 84);
  if (!(_DWORD)v222)
    goto LABEL_841;
  v223 = 0;
  v637 = 0;
  v224 = -(int)v222;
  v611 = v220;
  do
  {
    v225 = v654[4];
    if (!*((_DWORD *)v225 + 15))
    {
      __break(0xC471u);
      JUMPOUT(0x19851FF88);
    }
    v226 = v222 - 1;
    v227 = **((_QWORD **)v225 + 6);
    v228 = *(unsigned int *)(v227 + 88);
    if (v222 - 1 < v228)
    {
      v230 = v222 + 4;
      v231 = v222 + 4;
      goto LABEL_302;
    }
    v229 = *(unsigned int *)(v227 + 92);
    if (v229 + v228 > v226)
    {
      v230 = v228 - v222;
      v231 = v224 + v228;
LABEL_302:
      v232 = v231 >> 31;
      goto LABEL_303;
    }
    v230 = ~(v228 + v229) + v222;
    v232 = 2;
LABEL_303:
    __s1 = (void *)(v230 | (unint64_t)(v232 << 32));
    v233 = v674;
    *(_QWORD *)&v674 = v674 + 1;
    v234 = v233 >> 3;
    v235 = DWORD1(v675);
    if (v233 >> 3 >= DWORD1(v675))
    {
      v242 = (WTF *)WTF::fastMalloc((WTF *)0xC0);
      v684[0] = v242;
      v243 = DWORD1(v675);
      if (DWORD1(v675) == (_DWORD)v675)
      {
        v245 = (_QWORD *)WTF::Vector<JSC::ParserArenaDeletable *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v674 + 8, DWORD1(v675) + 1, (unint64_t)v684);
        v243 = DWORD1(v675);
        *(_QWORD *)(*((_QWORD *)&v674 + 1) + 8 * DWORD1(v675)) = *v245;
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)&v674 + 1) + 8 * DWORD1(v675)) = v242;
      }
      v235 = (v243 + 1);
      DWORD1(v675) = v243 + 1;
      v236 = v674 - 1;
      v234 = (unint64_t)(v674 - 1) >> 3;
      v220 = v611;
    }
    else
    {
      v236 = v233;
    }
    if (v234 >= v235)
    {
      __break(0xC471u);
      JUMPOUT(0x19851FF90);
    }
    v237 = *(_QWORD *)(*((_QWORD *)&v674 + 1) + 8 * v234) + 24 * (v236 & 7);
    *(_QWORD *)v237 = 0;
    *(_QWORD *)(v237 + 8) = 0;
    *(_DWORD *)(v237 + 16) = v233;
    v238 = (unint64_t)(v674 - 1) >> 3;
    if (v238 >= DWORD1(v675))
    {
      __break(0xC471u);
      JUMPOUT(0x19851FF98);
    }
    v239 = *(_QWORD *)(*((_QWORD *)&v674 + 1) + 8 * v238) + 24 * (((_BYTE)v674 - 1) & 7);
    if ((int)__s1 >= 0)
      v240 = (((_QWORD)__s1 << 32) - 0x500000000) >> 32;
    else
      v240 = (__s1 ^ 0xFFFFFFFFLL) + v221;
    if ((unint64_t)__s1 >> 32 == 2)
      v240 = v221 + v220 + (int)__s1;
    *((_QWORD *)v219 + v240) = v239;
    if (v637 == (_DWORD)p_s1)
    {
      v244 = (_QWORD *)WTF::Vector<JSC::Operand,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v665, v637 + 1, (unint64_t)&__s1);
      v241 = HIDWORD(p_s1);
      v223 = v665;
      v220 = v611;
      *((_QWORD *)v665 + HIDWORD(p_s1)) = *v244;
    }
    else
    {
      *((_QWORD *)v223 + v637) = __s1;
      v241 = HIDWORD(p_s1);
    }
    v637 = v241 + 1;
    HIDWORD(p_s1) = v241 + 1;
    ++v224;
    v222 = v226;
  }
  while (v226);
  v116 = v654[4];
  LODWORD(v117) = *((_DWORD *)v116 + 15);
  v664 = 0;
  if ((_DWORD)v117)
  {
    v215 = (uint64_t *)*((_QWORD *)v116 + 6);
LABEL_324:
    v246 = 0;
    v247 = v117;
    v611 = v220;
    while (!v215[v246])
    {
      if (v117 == ++v246)
        goto LABEL_355;
    }
    if ((_DWORD)v117 != (_DWORD)v246)
    {
      v248 = v117;
      while (1)
      {
        if (v248 <= v246)
        {
          __break(0xC471u);
          JUMPOUT(0x198520020);
        }
        v249 = *(_QWORD *)(*((_QWORD *)v116 + 6) + 8 * v246);
        v250 = *(unsigned int *)(v249 + 220);
        if ((_DWORD)v250)
          break;
LABEL_350:
        v246 = (v246 + 1);
        if (v248 > v246)
        {
          while (!*(_QWORD *)(*((_QWORD *)v116 + 6) + 8 * v246))
          {
            if (v248 == ++v246)
            {
              LODWORD(v246) = v248;
              break;
            }
          }
        }
        if (v247 == (_DWORD)v246)
          goto LABEL_355;
      }
      v251 = (unsigned int *)v116;
      v252 = *(uint64_t **)(v249 + 208);
      v253 = 8 * v250;
      while (2)
      {
        __s1 = 0;
        v104 = *v252;
        __s1 = (void *)v104;
        v254 = *(unsigned __int16 *)(v104 + 18);
        if (v254 == 17)
        {
          WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add(&v664, (uint64_t *)&__s1, v115, v104, v105, v106, v107, v108, (uint64_t)v684);
          v255 = **((_QWORD **)__s1 + 9);
          v256 = HIDWORD(v255);
          v257 = v221 + v611 + (int)v255;
          if ((v255 & 0x80000000) == 0)
            v258 = (uint64_t)(((unint64_t)v255 << 32) - 0x500000000) >> 32;
          else
            v258 = (v255 ^ 0xFFFFFFFFLL) + v221;
          if (v256 == 2)
            v258 = v257;
          v259 = *((_QWORD *)v219 + v258);
          v104 = *((_QWORD *)__s1 + 3) & 0xFF00FFFFFFFFFFFFLL;
        }
        else
        {
          if (v254 != 19)
            goto LABEL_335;
          v260 = **(_QWORD **)(v104 + 72);
          v261 = HIDWORD(v260);
          v262 = v221 + v220 + (int)v260;
          if ((v260 & 0x80000000) == 0)
            v263 = (uint64_t)(((unint64_t)v260 << 32) - 0x500000000) >> 32;
          else
            v263 = (v260 ^ 0xFFFFFFFFLL) + v221;
          if (v261 == 2)
            v263 = v262;
          v259 = *((_QWORD *)v219 + v263);
        }
        JSC::DFG::SSACalculator::newDef((uint64_t)&v674, v259, v249, v104);
        v220 = v611;
LABEL_335:
        ++v252;
        v253 -= 8;
        if (!v253)
        {
          v116 = (JSC::DFG::Graph *)v251;
          v248 = v251[15];
          goto LABEL_350;
        }
        continue;
      }
    }
  }
LABEL_355:
  v606 = v221;
  if (!*((_QWORD *)v678 + 98))
  {
    JSC::DFG::Graph::logAssertionFailure(v678, 0, (const WTF::CString *)"./dfg/DFGSSACalculator.h", (const char *)0xB2, "void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:387:13)]", "m_graph.m_ssaDominators");
    __break(0xC471u);
    JUMPOUT(0x19851FB24);
  }
  v653 = v219;
  __src = (void *)v674;
  if ((_QWORD)v674)
  {
    v264 = 0;
    do
    {
      if (v264 >> 3 >= DWORD1(v675))
      {
        __break(0xC471u);
        JUMPOUT(0x19851FF6CLL);
      }
      v265 = *(_QWORD *)(*((_QWORD *)&v674 + 1) + 8 * (v264 >> 3)) + 24 * (v264 & 7);
      v266 = *((_QWORD *)v678 + 98);
      v689 = 0x8000000000000000;
      v267 = *(unsigned int *)(v265 + 12);
      v680 = 0;
      if ((_DWORD)v267)
      {
        if (v267 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198520008);
        }
        v268 = (WTF *)WTF::fastMalloc((WTF *)(8 * v267));
        LODWORD(v680) = v267;
        v679 = v268;
        v631 = v265;
        memcpy(v268, *(const void **)v265, 8 * *(unsigned int *)(v265 + 12));
        v626 = v665;
        do
        {
          v269 = *((_QWORD *)v679 + v267 - 1);
          HIDWORD(v680) = v267 - 1;
          v684[0] = (WTF *)&v685;
          LODWORD(v684[1]) = 16;
          v685 = (WTF **)v269;
          LODWORD(v267) = 1;
          do
          {
            v270 = *((_QWORD *)v684[0] + v267 - 1);
            HIDWORD(v684[1]) = v267 - 1;
            v271 = *(unsigned int *)(v270 + 220);
            if ((_DWORD)v271)
            {
              v272 = 8 * v271;
              while (1)
              {
                v273 = *(_QWORD *)(*(_QWORD *)(v270 + 208) - 8 + v272);
                v274 = *(unsigned __int16 *)(v273 + 18);
                if ((v274 - 364) < 0xC)
                  break;
                if ((v274 - 28) < 2 || (v274 - 23) <= 2)
                {
                  v272 -= 8;
                  if (v272)
                    continue;
                }
                goto LABEL_427;
              }
            }
            else
            {
LABEL_427:
              v273 = 0;
            }
            v275 = 1;
            switch(*(_WORD *)(v273 + 18))
            {
              case 0x16C:
                goto LABEL_371;
              case 0x16D:
                v275 = 2;
                goto LABEL_371;
              case 0x16E:
                v275 = *(_DWORD *)(*(_QWORD *)(v273 + 72) + 12) + 1;
                goto LABEL_409;
              case 0x16F:
                v275 = *(_DWORD *)(*(_QWORD *)(v273 + 72) + 12);
LABEL_409:
                if (v275)
                {
LABEL_371:
                  v276 = 0;
                  v277 = 0;
                  v278 = (uint64_t *)(v273 + 72);
                  do
                  {
                    v279 = *(unsigned __int16 *)(v273 + 18);
                    if (v279 == 366)
                    {
                      v288 = (_QWORD *)*v278;
                      v289 = *(_DWORD *)(*v278 + 12);
                      if (v289 <= v276)
                      {
                        if (v289 != v276)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19851F4ECLL);
                        }
                        v280 = (uint64_t)(v288 + 2);
                      }
                      else
                      {
                        v280 = *v288 + 32 * v277 + 16;
                      }
                    }
                    else if (v279 == 367)
                    {
                      if (*(_DWORD *)(*v278 + 12) <= v276)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19851FECCLL);
                      }
                      v280 = *(_QWORD *)*v278 + 8 * v277;
                    }
                    else if (v276)
                    {
                      if (v276 != 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19851FCD0);
                      }
                      v280 = *v278 + 16;
                    }
                    else
                    {
                      v280 = v273 + 72;
                      if (v279 != 364)
                        v280 = *v278;
                    }
                    v281 = *(_QWORD *)v280;
                    v282 = *(unsigned int *)(*(_QWORD *)v280 + 8);
                    v283 = *(_DWORD *)(v266 + 20);
                    if (v283 <= v282)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19851FE84);
                    }
                    v284 = *(unsigned int *)(v269 + 8);
                    if (v283 <= v284)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19851FE8CLL);
                    }
                    v285 = *(_QWORD *)(v266 + 8);
                    v286 = v285 + 32 * v282;
                    v287 = v285 + 32 * v284;
                    if (*(_DWORD *)(v286 + 24) <= *(_DWORD *)(v287 + 24)
                      || *(_DWORD *)(v286 + 28) >= *(_DWORD *)(v287 + 28))
                    {
                      v690 = (JSC::DFG::Node *)v281;
                      v308 = v689;
                      if ((v689 & 0x8000000000000000) != 0)
                        v295 = 63;
                      else
                        v295 = *(_QWORD *)(2 * v689);
                      if (v295 <= v282)
                      {
                        WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v689, v282 + 1, 0);
                        v308 = v689;
                      }
                      v290 = 2 * v308 + 8;
                      v291 = v308 < 0;
                      v292 = &v689;
                      if (!v291)
                        v292 = (unint64_t *)v290;
                      v293 = (v282 >> 3) & 0x1FFFFFF8;
                      v294 = *(unint64_t *)((char *)v292 + v293);
                      *(unint64_t *)((char *)v292 + v293) = v294 | (1 << v282);
                      if ((v294 & (1 << v282)) == 0)
                      {
                        v296 = *(unsigned int *)(v631 + 16);
                        if (v637 <= v296)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19851FEA4);
                        }
                        v297 = *(unsigned int *)(v281 + 8);
                        if (v640 <= v297)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19851FEACLL);
                        }
                        v103 = *((_QWORD *)v626 + v296);
                        v298 = (_QWORD *)((char *)v649 + 24 * v297);
                        if (HIDWORD(v103) == 2)
                        {
                          v299 = *((unsigned int *)v649 + 6 * v297 + 4)
                               + (uint64_t)(int)v103
                               + *((unsigned int *)v649 + 6 * v297 + 5);
                          v300 = (_DWORD *)(*v298 + 4 * (v299 >> 5));
                        }
                        else if ((v103 & 0x80000000) != 0)
                        {
                          v299 = ~(_DWORD)v103
                               + (unint64_t)*((unsigned int *)v649 + 6 * v297 + 4);
                          v300 = (_DWORD *)(*v298 + ((v299 >> 3) & 0x3FFFFFFC));
                        }
                        else
                        {
                          LOBYTE(v299) = v103 - 5;
                          v300 = (_DWORD *)(*v298 + 4 * ((unint64_t)((int)v103 - 5) >> 5));
                        }
                        if (((*v300 >> v299) & 1) != 0)
                        {
                          if (v645 <= v297)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x19851FEB4);
                          }
                          v488 = (_BYTE *)JSC::Operands<JSC::DFG::FlushFormat,WTF::Vector<JSC::DFG::FlushFormat,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::operand((uint64_t)v648 + 24 * v297, v103);
                          if (*v488)
                            v489 = *v488 == 7;
                          else
                            v489 = 1;
                          if (!v489)
                          {
                            v603 = *v488;
                            if (!*(_DWORD *)(v281 + 220))
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19851FEBCLL);
                            }
                            v490 = (uint64_t)v654[4];
                            JSC::DFG::NodeOrigin::withExitOK(**(_QWORD **)(v281 + 208), 0, (uint64_t)&__s1);
                            v495 = JSC::DFG::Graph::addNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin>(v490, 0x3B73FFFFFFF7, 27, (uint64_t)&__s1, v491, v492, v493, v494);
                            JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)&__s1, v496, v497, v498, v499, v500, v501, v502);
                            v503 = JSC::DFG::resultFor(v603);
                            v504 = *(_DWORD *)(v495 + 56);
                            if ((v504 | v503) != v504)
                              *(_DWORD *)(v495 + 56) = v504 | v503;
                            v505 = *(_DWORD *)(v281 + 8);
                            if (HIDWORD(v677) <= v505)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x19851FEC4);
                            }
                            v604 = *((_QWORD *)&v676 + 1) + 24 * v505;
                            v506 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                            *v506 = v631;
                            v506[1] = v281;
                            v506[2] = v495;
                            v506[3] = 0;
                            v506[3] = v676;
                            *(_QWORD *)&v676 = v506;
                            __dst = v506;
                            v512 = *(unsigned int *)(v604 + 20);
                            if ((_DWORD)v512 == *(_DWORD *)(v604 + 16))
                            {
                              WTF::Vector<JSC::DFG::SSACalculator::Def *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::SSACalculator::Def *&>(v604 + 8, (unint64_t)&__dst);
                            }
                            else
                            {
                              *(_QWORD *)(*(_QWORD *)(v604 + 8) + 8 * v512) = v506;
                              *(_DWORD *)(v604 + 20) = v512 + 1;
                            }
                            v658[0] = (_QWORD *)v631;
                            WTF::HashMap<JSC::DFG::SSACalculator::Variable *,JSC::DFG::SSACalculator::Def *,WTF::DefaultHash<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Variable *>,WTF::HashTraits<JSC::DFG::SSACalculator::Def *>,WTF::HashTableTraits>::add<JSC::DFG::SSACalculator::Def *&>((uint64_t *)v604, (uint64_t *)v658, (uint64_t *)&__dst, v507, v508, v509, v510, v511, (uint64_t)&__s1);
                            v513 = HIDWORD(v680);
                            if (HIDWORD(v680) == (_DWORD)v680)
                            {
                              WTF::Vector<JSC::DFG::BasicBlock *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::BasicBlock *&>((uint64_t)&v679, (unint64_t)&v690);
                            }
                            else
                            {
                              *((_QWORD *)v679 + HIDWORD(v680)) = v281;
                              HIDWORD(v680) = v513 + 1;
                            }
                          }
                        }
                      }
                    }
                    v276 = v277 + 1;
                    v277 = (v277 + 1);
                  }
                  while (v275 != v276);
                }
                break;
              default:
                break;
            }
            v301 = *(unsigned int *)(v270 + 8);
            if (*(_DWORD *)(v266 + 20) <= v301)
            {
              __break(0xC471u);
              JUMPOUT(0x19851FE9CLL);
            }
            v302 = *(_QWORD *)(v266 + 8) + 32 * v301;
            v303 = *(unsigned int *)(v302 + 12);
            v267 = HIDWORD(v684[1]);
            v219 = v653;
            if ((_DWORD)v303)
            {
              v304 = *(const void **)v302;
              v305 = HIDWORD(v684[1]) + v303;
              if (v305 > LODWORD(v684[1]))
              {
                v309 = LODWORD(v684[1]) + ((unint64_t)LODWORD(v684[1]) >> 2);
                if (v309 >= 0x10)
                  v310 = v309 + 1;
                else
                  v310 = 16;
                if (v310 <= v305)
                  v311 = HIDWORD(v684[1]) + v303;
                else
                  v311 = v310;
                v312 = v684[0];
                if (v311 < 0x11)
                {
                  v313 = (WTF *)&v685;
                  v684[0] = (WTF *)&v685;
                  LODWORD(v684[1]) = 16;
                }
                else
                {
                  if (v311 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19851FF64);
                  }
                  v313 = (WTF *)WTF::fastMalloc((WTF *)(8 * v311));
                  LODWORD(v684[1]) = v311;
                  v684[0] = v313;
                }
                memcpy(v313, v312, 8 * v267);
                if (&v685 != (WTF ***)v312 && v312)
                {
                  if (v684[0] == v312)
                  {
                    v684[0] = 0;
                    LODWORD(v684[1]) = 0;
                  }
                  WTF::fastFree((unint64_t)v312, v314, v315, v316, v317, v318, v319, v320);
                }
              }
              if (v305 < HIDWORD(v684[1]))
              {
                __break(0xC471u);
                JUMPOUT(0x19851FEECLL);
              }
              memcpy((char *)v684[0] + 8 * HIDWORD(v684[1]), v304, 8 * v303);
              HIDWORD(v684[1]) = v267 + v303;
              LODWORD(v267) = v267 + v303;
            }
          }
          while ((_DWORD)v267);
          v306 = v684[0];
          if (&v685 != (WTF ***)v684[0] && v684[0])
          {
            v684[0] = 0;
            LODWORD(v684[1]) = 0;
            WTF::fastFree((unint64_t)v306, (void *)v103, v115, v104, v105, v106, v107, v108);
          }
          LODWORD(v267) = HIDWORD(v680);
        }
        while (HIDWORD(v680));
        v307 = v679;
        if (v679)
        {
          v679 = 0;
          LODWORD(v680) = 0;
          WTF::fastFree((unint64_t)v307, (void *)v103, v115, v104, v105, v106, v107, v108);
        }
      }
      if ((v689 & 0x8000000000000000) == 0)
        WTF::fastFree(2 * v689, (void *)v103, v115, v104, v105, v106, v107, v108);
      ++v264;
    }
    while ((void *)v264 != __src);
  }
  v321 = v654[4];
  if (!*((_DWORD *)v321 + 15))
  {
    __break(0xC471u);
    JUMPOUT(0x198520178);
  }
  v322 = (uint64_t *)*((_QWORD *)v321 + 6);
  v323 = *v322;
  v324 = *(unsigned int *)(*v322 + 84);
  LODWORD(v680) = 0;
  v679 = 0;
  HIDWORD(v680) = v324;
  v102 = (unsigned int *)v648;
  if ((_DWORD)v324)
  {
    if (v324 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x198520180);
    }
    v325 = (WTF *)WTF::fastMalloc((WTF *)(8 * v324));
    LODWORD(v680) = v324;
    v679 = v325;
    if (HIDWORD(v680))
      bzero(v325, 8 * HIDWORD(v680));
  }
  p_dst = *(void ***)(v323 + 88);
  __dst = 0;
  __len = 0;
  v663 = 0;
  v326 = v654[4];
  v327 = *((unsigned int *)v326 + 15);
  if ((_DWORD)v327)
  {
    v328 = 0;
    while (!*(_QWORD *)(*((_QWORD *)v326 + 6) + 8 * v328))
    {
      if (v327 == ++v328)
        goto LABEL_606;
    }
    if ((_DWORD)v327 != (_DWORD)v328)
    {
      v329 = v606;
      v623 = v611 + v606;
      v627 = *((_DWORD *)v326 + 15);
      LODWORD(v330) = v627;
      v632 = v654[4];
      while (1)
      {
        if (v330 <= v328)
        {
          __break(0xC471u);
          JUMPOUT(0x198520028);
        }
        v638 = v328;
        v331 = *(_QWORD *)(*((_QWORD *)v326 + 6) + 8 * v328);
        v332 = HIDWORD(v680);
        if (HIDWORD(v680))
        {
          v333 = 0;
          v334 = 8 * HIDWORD(v680);
          do
          {
            *(_QWORD *)((char *)v679 + v333) = 0;
            v333 += 8;
          }
          while (v334 != v333);
          v335 = p_dst;
          v336 = HIDWORD(p_dst) + (unint64_t)p_dst;
          v337 = *(unsigned int *)(v331 + 8);
          v338 = HIDWORD(v677);
          while (--v332 >= v335)
          {
            if (v332 < v336)
            {
              v339 = v335 + ~(_DWORD)v332;
LABEL_462:
              v340 = v339;
              v341 = (v339 ^ 0xFFFFFFFFLL) + v329;
              v342 = (uint64_t)(((unint64_t)v339 << 32) - 0x500000000) >> 32;
              v72 = (v339 & 0x80000000) == 0;
              v343 = 0;
              if (v72)
                v344 = v342;
              else
                v344 = v341;
              v345 = v340;
              goto LABEL_466;
            }
            v345 = (v332 - v336);
            LODWORD(v340) = v332 - v336;
            v344 = v623 + (int)v332 - (int)v336;
            v343 = 1;
LABEL_466:
            v346 = *((_QWORD *)v678 + 98);
            v103 = *(unsigned int *)(v346 + 20);
            if (v103 <= v337)
            {
              __break(0xC471u);
              JUMPOUT(0x19851FE94);
            }
            v347 = *(_QWORD *)(v346 + 8);
            v348 = *(_QWORD *)(v347 + 32 * v337 + 16);
            if (v348)
            {
              v349 = *((_QWORD *)v219 + v344);
              v350 = (~(v349 << 32) + v349) ^ ((unint64_t)(~(v349 << 32) + v349) >> 22);
              v351 = 9 * ((v350 + ~(v350 << 13)) ^ ((v350 + ~(v350 << 13)) >> 8));
              v352 = (v351 ^ (v351 >> 15)) + ~((v351 ^ (v351 >> 15)) << 27);
              v353 = (v352 >> 31) ^ v352;
              if (v338 > v103)
              {
                while (1)
                {
                  v354 = *(unsigned int *)(v348 + 8);
                  if (v338 <= v354)
                    break;
                  v104 = *(_QWORD *)(*((_QWORD *)&v676 + 1) + 24 * v354);
                  if (v104)
                  {
                    v106 = *(unsigned int *)(v104 - 8);
                    v105 = v106 & v353;
                    v107 = 16 * v105;
                    v108 = *(_QWORD *)(v104 + 16 * v105);
                    if (v108 == v349)
                    {
LABEL_478:
                      v104 = *(_QWORD *)(v104 + 16 * v105 + 8);
                      if (v104)
                        goto LABEL_479;
                    }
                    else
                    {
                      v107 = 1;
                      while (v108)
                      {
                        v105 = ((_DWORD)v105 + (_DWORD)v107) & v106;
                        v108 = *(_QWORD *)(v104 + 16 * v105);
                        v107 = (v107 + 1);
                        if (v108 == v349)
                          goto LABEL_478;
                      }
                    }
                  }
                  if (v103 <= v354)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19851FE54);
                  }
                  v348 = *(_QWORD *)(v347 + 32 * v354 + 16);
                  if (!v348)
                    goto LABEL_485;
                }
LABEL_878:
                __break(0xC471u);
                JUMPOUT(0x19851FDECLL);
              }
              do
              {
                v103 = *(unsigned int *)(v348 + 8);
                if (v338 <= v103)
                  goto LABEL_878;
                v359 = *(_QWORD *)(*((_QWORD *)&v676 + 1) + 24 * v103);
                if (v359)
                {
                  v105 = *(unsigned int *)(v359 - 8);
                  v104 = v105 & v353;
                  v106 = 16 * v104;
                  v107 = *(_QWORD *)(v359 + 16 * v104);
                  if (v107 == v349)
                  {
LABEL_487:
                    v104 = *(_QWORD *)(v359 + 16 * v104 + 8);
                    if (v104)
                    {
LABEL_479:
                      v355 = v336 + (int)v340;
                      v356 = (v345 ^ 0xFFFFFFFFLL) + v335;
                      v357 = ((v345 << 32) - 0x500000000) >> 32;
                      if ((int)v340 >= 0)
                        v358 = v357;
                      else
                        v358 = v356;
                      if ((v343 & 1) != 0)
                        v358 = v355;
                      *((_QWORD *)v679 + v358) = *(_QWORD *)(v104 + 16);
                      break;
                    }
                  }
                  else
                  {
                    v106 = 1;
                    while (v107)
                    {
                      v104 = ((_DWORD)v104 + (_DWORD)v106) & v105;
                      v107 = *(_QWORD *)(v359 + 16 * v104);
                      v106 = (v106 + 1);
                      if (v107 == v349)
                        goto LABEL_487;
                    }
                  }
                }
                v103 = v347 + 32 * v103;
                v348 = *(_QWORD *)(v103 + 16);
              }
              while (v348);
            }
LABEL_485:
            if (!v332)
              goto LABEL_499;
          }
          v339 = v332 + 5;
          goto LABEL_462;
        }
        v337 = *(unsigned int *)(v331 + 8);
LABEL_499:
        if (HIDWORD(v677) <= v337)
        {
          __break(0xC471u);
          JUMPOUT(0x198520030);
        }
        v360 = *((_QWORD *)&v676 + 1) + 24 * v337;
        v361 = *(unsigned int *)(v360 + 20);
        if ((_DWORD)v361)
          break;
LABEL_501:
        if (v645 <= v337)
        {
          __break(0xC471u);
          JUMPOUT(0x198520038);
        }
        v362 = (void **)((char *)v648 + 24 * v337);
        if (v362 != &__dst)
        {
          v363 = *((unsigned int *)v362 + 3);
          if (HIDWORD(__len) > v363)
          {
            HIDWORD(__len) = *((_DWORD *)v362 + 3);
          }
          else
          {
            v364 = __len;
            if (v363 > __len)
            {
              if ((_DWORD)__len)
              {
                if (HIDWORD(__len))
                  HIDWORD(__len) = 0;
                v541 = __dst;
                if (__dst)
                {
                  __dst = 0;
                  LODWORD(__len) = 0;
                  WTF::fastFree((unint64_t)v541, (void *)v103, v363, v104, v105, v106, v107, v108);
                  v364 = __len;
                }
              }
              v414 = (WTF *)*((unsigned int *)v362 + 3);
              if (v364 < (unint64_t)v414)
              {
                __srca = __dst;
                v612 = HIDWORD(__len);
                v607 = *((_DWORD *)v362 + 3);
                v415 = (void *)WTF::fastMalloc(v414);
                LODWORD(__len) = v607;
                __dst = v415;
                memcpy(v415, __srca, v612);
                if (__srca)
                {
                  if (__dst == __srca)
                  {
                    __dst = 0;
                    LODWORD(__len) = 0;
                  }
                  WTF::fastFree((unint64_t)__srca, v416, v417, v418, v419, v420, v421, v422);
                }
              }
            }
            v363 = HIDWORD(__len);
          }
          v365 = (char *)__dst;
          if (v363)
          {
            memmove(__dst, *v362, v363);
            v366 = HIDWORD(__len);
            v365 = (char *)__dst;
          }
          else
          {
            v366 = 0;
          }
          memcpy(&v365[v366], (char *)*v362 + v366, (_BYTE *)*v362 + *((unsigned int *)v362 + 3) - ((_BYTE *)*v362 + v366));
          HIDWORD(__len) = *((_DWORD *)v362 + 3);
        }
        v663 = *((_QWORD *)v648 + 3 * v337 + 2);
        v660 = 0;
        v367 = *(_DWORD *)(v331 + 220);
        if (v367)
        {
          for (i = 0; i < v367; v660 = ++i)
          {
            v659 = 0;
            v369 = *(_QWORD *)(*(_QWORD *)(v331 + 208) + 8 * i);
            v659 = v369;
            v370 = *(unsigned __int16 *)(v369 + 18);
            switch(v370)
            {
              case 18:
                v371 = *(_QWORD *)(v369 + 72);
                if (HIDWORD(v371) == 2)
                {
                  v372 = v663 + (uint64_t)(int)v371 + HIDWORD(v663);
                }
                else if ((v371 & 0x80000000) != 0)
                {
                  v372 = (*(_QWORD *)(v369 + 72) ^ 0xFFFFFFFFLL) + v663;
                }
                else
                {
                  v372 = (uint64_t)(((unint64_t)v371 << 32) - 0x500000000) >> 32;
                }
                *((_BYTE *)__dst + v372) = 7;
                break;
              case 17:
                v373 = *(unint64_t **)(v369 + 72);
                v374 = *v373;
                v375 = *((_BYTE *)v373 + 12);
                if (HIDWORD(v374) == 2)
                {
                  *((_BYTE *)__dst + v663 + (uint64_t)(int)v374 + HIDWORD(v663)) = v375;
                  v376 = p_dst + (uint64_t)(int)v374 + HIDWORD(p_dst);
                }
                else if ((v374 & 0x80000000) != 0)
                {
                  *((_BYTE *)__dst + (v374 ^ 0xFFFFFFFFLL) + v663) = v375;
                  v376 = (v374 ^ 0xFFFFFFFFLL) + p_dst;
                }
                else
                {
                  v376 = (uint64_t)(((unint64_t)v374 << 32) - 0x500000000) >> 32;
                  *((_BYTE *)__dst + v376) = v375;
                }
                *((_QWORD *)v679 + v376) = *(_QWORD *)(v369 + 24) & 0xFF00FFFFFFFFFFFFLL;
                break;
              case 19:
                v377 = *(_QWORD *)(v369 + 72);
                v378 = *(_QWORD *)v377;
                if (HIDWORD(*(_QWORD *)v377) == 2)
                {
                  v522 = (int)v378;
                  v523 = v663 + (uint64_t)(int)v378 + HIDWORD(v663);
                  v524 = *((unsigned __int8 *)__dst + v523);
                  if (*((_BYTE *)__dst + v523))
                  {
                    if (v524 == 7)
                    {
LABEL_774:
                      JSC::DFG::Graph::logAssertionFailure(v654[4], (JSC::DFG::Node *)v369, (const WTF::CString *)"./dfg/DFGPutStackSinkingPhase.cpp", (const char *)0x1CB, "BOOL JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()", "deferred.operand(data->operand) != ConflictingFlush");
                      JSC::Operands<JSC::DFG::FlushFormat,WTF::Vector<JSC::DFG::FlushFormat,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::operand((uint64_t)&__dst, *(_QWORD *)v377);
                      WTFCrashWithInfoImpl(459, "./dfg/DFGPutStackSinkingPhase.cpp", "BOOL JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()");
                    }
                    if (v524 != *(unsigned __int8 *)(v377 + 12))
                    {
LABEL_915:
                      JSC::DFG::Graph::logAssertionFailure(v654[4], (JSC::DFG::Node *)v369, (const WTF::CString *)"./dfg/DFGPutStackSinkingPhase.cpp", (const char *)0x1D8, "BOOL JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()", "format == data->format");
                      __break(0xC471u);
                      JUMPOUT(0x19851FFD0);
                    }
                    v408 = v522 + p_dst + (unint64_t)HIDWORD(p_dst);
                    goto LABEL_570;
                  }
                  v383 = v522 + p_dst + (unint64_t)HIDWORD(p_dst);
                }
                else
                {
                  v379 = *(_QWORD *)v377;
                  if ((v378 & 0x80000000) != 0)
                    v380 = (v379 ^ 0xFFFFFFFFLL) + v663;
                  else
                    v380 = (uint64_t)(((unint64_t)v378 << 32) - 0x500000000) >> 32;
                  v381 = *((unsigned __int8 *)__dst + v380);
                  if (*((_BYTE *)__dst + v380))
                    v382 = v381 == 7;
                  else
                    v382 = 1;
                  if (!v382)
                  {
                    if (v381 != *(unsigned __int8 *)(v377 + 12))
                      goto LABEL_915;
                    if ((v378 & 0x80000000) != 0)
                      v408 = (v379 ^ 0xFFFFFFFFLL) + p_dst;
                    else
                      v408 = (uint64_t)(((unint64_t)v378 << 32) - 0x500000000) >> 32;
LABEL_570:
                    v409 = *((_QWORD *)v679 + v408);
                    v410 = 0xC4000000000000;
                    if ((*(_DWORD *)(v409 + 56) & 7) != 3)
                      v410 = 0;
                    v411 = 0xD0000000000000;
                    if ((*(_DWORD *)(v409 + 56) & 7) != 5)
                      v411 = v410;
                    v412 = v409 & 0xFF00FFFFFFFFFFFFLL;
                    *(_QWORD *)(v369 + 24) = v411 | v412;
                    if (!v412)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19851F768);
                    }
                    if ((*(_QWORD *)(v369 + 32) & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19851F788);
                    }
                    if ((*(_DWORD *)(v369 + 56) & 7u) - 3 > 4)
                      v413 = 1;
                    else
                      v413 = dword_199156440[(*(_DWORD *)(v369 + 56) & 7) - 3];
                    *(_WORD *)(v369 + 18) = 4;
                    *(_DWORD *)(v369 + 56) = v413;
                    continue;
                  }
                  if ((v378 & 0x80000000) != 0)
                  {
                    if (*((_BYTE *)__dst + (v379 ^ 0xFFFFFFFFLL) + v663) == 7)
                      goto LABEL_774;
                    v383 = (v379 ^ 0xFFFFFFFFLL) + p_dst;
                  }
                  else
                  {
                    v383 = (uint64_t)(((unint64_t)v378 << 32) - 0x500000000) >> 32;
                    if (*((_BYTE *)__dst + v383) == 7)
                      goto LABEL_774;
                  }
                }
                *((_QWORD *)v679 + v383) = v369;
                break;
              default:
                v684[0] = (WTF *)&v659;
                v684[1] = (WTF *)&__dst;
                v685 = &v679;
                v686 = (void **)v654;
                v687 = (uint64_t *)&v670;
                v688 = &v660;
                v658[0] = &v659;
                v658[1] = &__dst;
                __s1 = v654[4];
                v668 = v369;
                v669[0] = v684;
                v669[1] = v658;
                v669[2] = &v657;
                v689 = (unint64_t)&__s1;
                v690 = (JSC::DFG::Node *)&__s1;
                i = v660;
                v367 = *(_DWORD *)(v331 + 220);
                break;
            }
          }
        }
        v384 = v367 - 1;
        do
        {
          if (v384 >= v367)
          {
            __break(0xC471u);
            JUMPOUT(0x198520040);
          }
          v385 = *(_QWORD *)(*(_QWORD *)(v331 + 208) + 8 * v384--);
        }
        while (*(unsigned __int16 *)(v385 + 18) - 364 > 0xB);
        v386 = *(_QWORD *)v385;
        if ((*(_QWORD *)v385 & 1) != 0)
        {
          v514 = *(_QWORD *)(v386 & 0xFFFFFFFF8);
          if ((v386 & 2) != 0
            || ((v515 = *(unsigned int *)((v386 & 0xFFFFFFFF8) + 8), (_DWORD)v515 != 0x3FFFFFFF)
              ? (v516 = (_DWORD)v515 == -1)
              : (v516 = 1),
                v516))
          {
            v517 = 2;
          }
          else if (v515 >> 28)
          {
            __srce = *(void **)(v386 & 0xFFFFFFFF8);
            v514 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v514 = __srce;
            *(_DWORD *)(v514 + 8) = v515;
            v517 = 1;
          }
          else
          {
            v517 = *(_QWORD *)(v386 & 0xFFFFFFFF8);
            v514 = v515 << 36;
          }
          v386 = v514 | v517;
        }
        v684[0] = (WTF *)v386;
        v387 = *(_QWORD *)(v385 + 8);
        if ((v387 & 1) != 0)
        {
          v518 = *(_QWORD *)(v387 & 0xFFFFFFFF8);
          if ((v387 & 2) != 0
            || ((v519 = *(unsigned int *)((v387 & 0xFFFFFFFF8) + 8), (_DWORD)v519 != 0x3FFFFFFF)
              ? (v520 = (_DWORD)v519 == -1)
              : (v520 = 1),
                v520))
          {
            v521 = 2;
          }
          else if (v519 >> 28)
          {
            __srcf = *(void **)(v387 & 0xFFFFFFFF8);
            v518 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v518 = __srcf;
            *(_DWORD *)(v518 + 8) = v519;
            v521 = 1;
          }
          else
          {
            v521 = *(_QWORD *)(v387 & 0xFFFFFFFF8);
            v518 = v519 << 36;
          }
          v387 = v518 | v521;
        }
        v684[1] = (WTF *)v387;
        LOWORD(v685) = *(_WORD *)(v385 + 16);
        v388 = *(unsigned int *)(v331 + 220);
        if ((_DWORD)v388)
        {
          v389 = 8 * v388;
          while (1)
          {
            v390 = *(_QWORD *)(*(_QWORD *)(v331 + 208) - 8 + v389);
            v391 = *(unsigned __int16 *)(v390 + 18);
            if ((v391 - 364) < 0xC)
              break;
            if ((v391 - 28) < 2 || (v391 - 23) <= 2)
            {
              v389 -= 8;
              if (v389)
                continue;
            }
            goto LABEL_707;
          }
        }
        else
        {
LABEL_707:
          v390 = 0;
        }
        v392 = 1;
        switch(*(_WORD *)(v390 + 18))
        {
          case 0x16C:
            goto LABEL_551;
          case 0x16D:
            v392 = 2;
            goto LABEL_551;
          case 0x16E:
            v392 = *(_DWORD *)(*(_QWORD *)(v390 + 72) + 12) + 1;
            goto LABEL_594;
          case 0x16F:
            v392 = *(_DWORD *)(*(_QWORD *)(v390 + 72) + 12);
LABEL_594:
            if (!v392)
              goto LABEL_595;
LABEL_551:
            v393 = 0;
            v394 = 0;
            v395 = (v384 + 1);
            v396 = (uint64_t *)(v390 + 72);
            v397 = HIDWORD(p_s1);
            v398 = v665;
            break;
          default:
            goto LABEL_595;
        }
        do
        {
          v399 = *(unsigned __int16 *)(v390 + 18);
          if (v399 == 366)
          {
            v406 = (_QWORD *)*v396;
            v407 = *(_DWORD *)(*v396 + 12);
            if (v407 > v393)
            {
              v401 = *v406 + 32 * v394;
LABEL_559:
              v400 = v401 + 16;
              goto LABEL_560;
            }
            if (v407 != v393)
            {
              __break(0xC471u);
              JUMPOUT(0x19851FAC0);
            }
            v400 = (uint64_t)(v406 + 2);
          }
          else if (v399 == 367)
          {
            if (*(_DWORD *)(*v396 + 12) <= v393)
            {
              __break(0xC471u);
              JUMPOUT(0x198520108);
            }
            v400 = *(_QWORD *)*v396 + 8 * v394;
          }
          else
          {
            if (v393)
            {
              if (v393 != 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19851FE7CLL);
              }
              v401 = *v396;
              goto LABEL_559;
            }
            v400 = (uint64_t)v396;
            if (v399 != 364)
              v400 = *v396;
          }
LABEL_560:
          v402 = *(_QWORD *)v400;
          v403 = *(_DWORD *)(*(_QWORD *)v400 + 8);
          if (HIDWORD(v677) <= v403)
          {
            __break(0xC471u);
            JUMPOUT(0x198520010);
          }
          v404 = *((_QWORD *)&v676 + 1) + 24 * v403;
          v405 = *(unsigned int *)(v404 + 20);
          if ((_DWORD)v405)
          {
            v543 = *(uint64_t **)(v404 + 8);
            v602 = 8 * v405;
            v605 = v398;
            v598 = v392;
            v613 = v395;
            v597 = v396;
            v596 = v397;
            while (1)
            {
              v600 = v543;
              v544 = *v543;
              v545 = *(unsigned int *)(*(_QWORD *)*v543 + 16);
              if (v397 <= v545)
              {
                __break(0xC471u);
                JUMPOUT(0x198520060);
              }
              v546 = *(unsigned int *)(v402 + 8);
              if (v645 <= v546)
              {
                __break(0xC471u);
                JUMPOUT(0x198520068);
              }
              v601 = *(JSC::DFG::Node **)(v544 + 16);
              __srcb = *((_QWORD *)v605 + v545);
              v547 = *(unsigned __int8 *)JSC::Operands<JSC::DFG::FlushFormat,WTF::Vector<JSC::DFG::FlushFormat,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::operand((uint64_t)v648 + 24 * v546, __srcb);
              v608 = v547;
              if (v547 == 7 || v547 == 0)
              {
                JSC::DFG::Graph::logAssertionFailure(v654[4], 0, (const WTF::CString *)"./dfg/DFGPutStackSinkingPhase.cpp", (const char *)0x224, "BOOL JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()", "isConcrete(format)");
                WTFCrashWithInfoImpl(548, "./dfg/DFGPutStackSinkingPhase.cpp", "BOOL JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()");
              }
              v599 = JSC::DFG::uncheckedUseKindFor(v547);
              if (HIDWORD(__srcb) == 2)
                break;
              if ((__srcb & 0x80000000) != 0)
                v549 = (__srcb ^ 0xFFFFFFFFLL) + v663;
              else
                v549 = (uint64_t)((__srcb << 32) - 0x500000000) >> 32;
              v550 = *((unsigned __int8 *)__dst + v549);
              if (v550)
                v551 = v550 == 7;
              else
                v551 = 1;
              if (v551)
                goto LABEL_831;
              if ((__srcb & 0x80000000) != 0)
              {
                v565 = __srcb ^ 0xFFFFFFFFLL;
                v566 = p_dst;
LABEL_836:
                v567 = v565 + v566;
                goto LABEL_837;
              }
              v567 = (uint64_t)((__srcb << 32) - 0x500000000) >> 32;
LABEL_837:
              __srcc = *((_QWORD *)v679 + v567);
              if (!__srcc)
              {
                JSC::DFG::Graph::logAssertionFailure(v654[4], v601, (const WTF::CString *)"./dfg/DFGPutStackSinkingPhase.cpp", (const char *)0x230, "BOOL JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()", "incoming");
                __break(0xC471u);
                JUMPOUT(0x198520100);
              }
LABEL_838:
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v655, (const JSC::DFG::NodeOrigin *)v684);
              JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo,JSC::DFG::Edge>((uint64_t)&v670, v613, 0, 0x1Au, (uint64_t)v655, (uint64_t)v601, __srcc & 0xFF00FFFFFFFFFFFFLL | (v599 << 50));
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v655, v568, v569, v570, v571, v572, v573, v574);
              v395 = v613;
              v543 = v600 + 1;
              v398 = v605;
              v72 = v602 == 8;
              v602 -= 8;
              v392 = v598;
              v396 = v597;
              v397 = v596;
              if (v72)
                goto LABEL_562;
            }
            if (*((_BYTE *)__dst + v663 + (uint64_t)(int)__srcb + HIDWORD(v663)))
              v594 = *((_BYTE *)__dst + v663 + (uint64_t)(int)__srcb + HIDWORD(v663)) == 7;
            else
              v594 = 1;
            if (v594)
            {
LABEL_831:
              JSC::DFG::NodeOrigin::NodeOrigin((uint64_t)v656, (const JSC::DFG::NodeOrigin *)v684);
              v595 = v654[4];
              v552 = WTF::fastMalloc((WTF *)0x18);
              *(_QWORD *)v552 = __srcb;
              *(_DWORD *)(v552 + 8) = 0x3FFFFFFF;
              *(_BYTE *)(v552 + 12) = v608;
              *(_QWORD *)(v552 + 16) = 0;
              *(_QWORD *)(v552 + 16) = *((_QWORD *)v595 + 74);
              *((_QWORD *)v595 + 74) = v552;
              __srcc = JSC::DFG::InsertionSet::insertNode<JSC::DFG::NodeType,JSC::DFG::NodeOrigin,JSC::DFG::OpInfo>((uint64_t)&v670, v613, 0, 19, (uint64_t)v656, v552, v553, v554);
              JSC::DFG::NodeOrigin::~NodeOrigin((JSC::DFG::NodeOrigin *)v656, v555, v556, v557, v558, v559, v560, v561);
              v562 = JSC::DFG::resultFor(v608);
              v563 = *(_DWORD *)(__srcc + 56);
              v564 = v563 & 0xFFFFFFF8 | v562;
              if ((v563 & 0xFFFFFFF8) != v563 || v564 != (v563 & 0xFFFFFFF8))
                *(_DWORD *)(__srcc + 56) = v564;
              goto LABEL_838;
            }
            v565 = (int)__srcb;
            v566 = p_dst + (unint64_t)HIDWORD(p_dst);
            goto LABEL_836;
          }
LABEL_562:
          v393 = v394 + 1;
          v394 = (v394 + 1);
        }
        while (v392 != v393);
LABEL_595:
        JSC::DFG::InsertionSet::execute((JSC::DFG::InsertionSet *)&v670, (JSC::DFG::BasicBlock *)v331);
        if (((uint64_t)v684[1] & 1) != 0 && ((unint64_t)v684[1] & 0xFFFFFFFF8) != 0)
          WTF::fastFree((unint64_t)v684[1] & 0xFFFFFFFF8, (void *)v103, v115, v104, v105, v106, v107, v108);
        v219 = v653;
        v326 = v632;
        if (((uint64_t)v684[0] & 1) != 0 && ((unint64_t)v684[0] & 0xFFFFFFFF8) != 0)
          WTF::fastFree((unint64_t)v684[0] & 0xFFFFFFFF8, (void *)v103, v115, v104, v105, v106, v107, v108);
        LODWORD(v328) = v638 + 1;
        v330 = *((unsigned int *)v632 + 15);
        if (v330 > v638 + 1)
        {
          v423 = (v638 + 1);
          while (!*(_QWORD *)(*((_QWORD *)v632 + 6) + 8 * v423))
          {
            if (v330 == ++v423)
            {
              LODWORD(v328) = *((_DWORD *)v632 + 15);
              goto LABEL_603;
            }
          }
          LODWORD(v328) = v423;
        }
LABEL_603:
        if (v627 == (_DWORD)v328)
        {
          v326 = v654[4];
          LODWORD(v327) = *((_DWORD *)v326 + 15);
          goto LABEL_605;
        }
      }
      v575 = *(uint64_t **)(v360 + 8);
      v614 = HIDWORD(p_s1);
      __srcd = (char *)(8 * v361);
      v609 = v665;
      while (2)
      {
        v576 = *v575;
        v577 = *(unsigned int *)(*(_QWORD *)*v575 + 16);
        if (v614 <= v577)
        {
          __break(0xC471u);
          JUMPOUT(0x198520160);
        }
        v578 = *((_QWORD *)v609 + v577);
        JSC::DFG::InsertionSet::insert((JSC::DFG::InsertionSet *)&v670, 0, *(JSC::DFG::Node **)(v576 + 16), v104, v105, v106, v107, v108);
        if (HIDWORD(v578) == 2)
        {
          v580 = HIDWORD(p_dst);
          v579 = p_dst + (uint64_t)(int)v578;
LABEL_849:
          v581 = v579 + v580;
        }
        else
        {
          if ((v578 & 0x80000000) != 0)
          {
            v579 = v578 ^ 0xFFFFFFFFLL;
            v580 = p_dst;
            goto LABEL_849;
          }
          v581 = (uint64_t)(((unint64_t)v578 << 32) - 0x500000000) >> 32;
        }
        *((_QWORD *)v679 + v581) = *(_QWORD *)(v576 + 16);
        ++v575;
        __srcd -= 8;
        if (!__srcd)
        {
          v337 = *(unsigned int *)(v331 + 8);
          goto LABEL_501;
        }
        continue;
      }
    }
LABEL_605:
    v102 = (unsigned int *)v648;
LABEL_606:
    if ((_DWORD)v327)
    {
      v424 = 0;
      v425 = v327;
      while (!*(_QWORD *)(*((_QWORD *)v326 + 6) + 8 * v424))
      {
        if (v327 == ++v424)
          goto LABEL_610;
      }
      if ((_DWORD)v327 != (_DWORD)v424)
      {
        v103 = 1;
        v115 = 0x12400001800284;
        v104 = (uint64_t)v684;
        v105 = 25;
        v450 = v327;
        while (1)
        {
          if (v450 <= v424)
          {
            __break(0xC471u);
            JUMPOUT(0x198520048);
          }
          v451 = *(_QWORD *)(*((_QWORD *)v326 + 6) + 8 * v424);
          v452 = *(unsigned int *)(v451 + 220);
          v453 = v664;
          if ((_DWORD)v452 && v664 != 0)
            break;
LABEL_660:
          v424 = (v424 + 1);
          if (v450 > v424)
          {
            while (!*(_QWORD *)(*((_QWORD *)v326 + 6) + 8 * v424))
            {
              if (v450 == ++v424)
              {
                LODWORD(v424) = v450;
                break;
              }
            }
          }
          if ((_DWORD)v425 == (_DWORD)v424)
            goto LABEL_610;
        }
        v455 = *(uint64_t **)(v451 + 208);
        v456 = &v455[v452];
        while (2)
        {
          if (v453)
          {
            v457 = *v455;
            v458 = *(_DWORD *)(v453 - 8);
            v459 = ~(*v455 << 32) + *v455;
            v460 = (v459 ^ (v459 >> 22)) + ~((v459 ^ (v459 >> 22)) << 13);
            v461 = (9 * (v460 ^ (v460 >> 8))) ^ ((9 * (v460 ^ (v460 >> 8))) >> 15);
            v462 = v458 & (((v461 + ~(v461 << 27)) >> 31) ^ (v461 + ~((_DWORD)v461 << 27)));
            v463 = *(_QWORD *)(v453 + 8 * v462);
            if (v463 != *v455)
            {
              v464 = 1;
              while (v463)
              {
                v462 = (v462 + v464) & v458;
                v463 = *(_QWORD *)(v453 + 8 * v462);
                ++v464;
                if (v463 == v457)
                  goto LABEL_671;
              }
              goto LABEL_676;
            }
LABEL_671:
            v465 = (uint64_t)v654[4];
            v466 = *(unsigned __int16 *)(v457 + 18);
            if (v466 == 154)
            {
              v639 = v425;
              v633 = v326;
              v525 = *(_QWORD *)(v457 + 72);
              v684[0] = 0;
              v526 = *(unsigned int *)(v525 + 20);
              if ((_DWORD)v526)
              {
                v527 = *(_QWORD **)(v525 + 8);
                v528 = &v527[4 * v526];
                v628 = v528;
                do
                {
                  v529 = *v527 & 0xFFFFFFFFFFFFFFFCLL;
                  if ((*v527 & 1) != 0)
                  {
                    if (*(_DWORD *)v529)
                    {
                      v531 = 0;
                      v624 = (unsigned int *)(*v527 & 0xFFFFFFFFFFFFFFFCLL);
                      do
                      {
                        JSC::DFG::Node::remove(JSC::DFG::Graph &)::$_0::operator()((uint64_t)v684, *(_QWORD *)(v529 + 8 * v531 + 8));
                        v529 = (unint64_t)v624;
                        v528 = v628;
                        ++v531;
                      }
                      while (v531 < *v624);
                    }
                  }
                  else if (v529)
                  {
                    if (((uint64_t)v684[0] & 1) != 0)
                    {
                      WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine((uint64_t *)v684, v529);
                      v528 = v628;
                    }
                    else if (((unint64_t)v684[0] & 0xFFFFFFFFFFFFFFFCLL) != v529)
                    {
                      if (((unint64_t)v684[0] & 0xFFFFFFFFFFFFFFFCLL) != 0)
                      {
                        v532 = *v527 & 0xFFFFFFFFFFFFFFFCLL;
                        v533 = WTF::fastMalloc((WTF *)0x28);
                        v528 = v628;
                        *(_QWORD *)v533 = 0x400000002;
                        v534 = (char)v684[0];
                        *(_QWORD *)(v533 + 8) = (unint64_t)v684[0] & 0xFFFFFFFFFFFFFFFCLL;
                        *(_QWORD *)(v533 + 16) = v532;
                        v530 = (WTF *)(v534 & 2 | (unint64_t)v533 | 1);
                      }
                      else
                      {
                        v530 = (WTF *)((uint64_t)v684[0] & 2 | v529);
                      }
                      v684[0] = v530;
                    }
                  }
                  v527 += 4;
                }
                while (v527 != v528);
              }
              v535 = JSC::DFG::Graph::addStructureSet(v465, (unint64_t *)v684, (unint64_t *)v115, v104, v105, v106, v107, v108);
              *(_WORD *)(v457 + 18) = 132;
              *(_DWORD *)(v457 + 56) = 8;
              *(_QWORD *)(v457 + 72) = v535;
              v219 = v653;
              if (((uint64_t)v684[0] & 1) != 0)
                WTF::fastFree((unint64_t)v684[0] & 0xFFFFFFFFFFFFFFFCLL, v536, v537, v538, v539, v106, v107, v108);
            }
            else
            {
              if (v466 != 294)
              {
                if ((*(_BYTE *)(v457 + 56) & 0x10) != 0)
                {
                  LODWORD(v474) = *(_DWORD *)(v457 + 32);
                  if ((_DWORD)v474)
                  {
                    v475 = 0;
                    v476 = 0;
                    v477 = *(_DWORD *)(v465 + 164);
                    v478 = *(_QWORD *)(v465 + 152);
                    do
                    {
                      v479 = *(_DWORD *)(v457 + 24);
                      v480 = v475 + v479;
                      if (v477 <= v480)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x198520050);
                      }
                      v481 = *(_QWORD *)(v478 + 8 * v480);
                      if ((v481 & 0xFF00FFFFFFFFFFFFLL) != 0)
                      {
                        v482 = 0;
                        if ((v481 & 0x1000000000000) == 0)
                        {
                          v483 = (v481 >> 50) & 0x3F;
                          if ((_DWORD)v483)
                          {
                            v484 = v483 > 0x34;
                            v485 = (1 << v483) & 0x12400001800284;
                            if (v484 || v485 == 0)
                            {
                              v487 = v476 + v479;
                              if (v477 <= v487)
                              {
                                __break(0xC471u);
                                JUMPOUT(0x198520058);
                              }
                              ++v476;
                              v482 = *(_QWORD *)(v478 + 8 * v487);
                              *(_QWORD *)(v478 + 8 * v487) = v481;
                            }
                          }
                        }
                        *(_QWORD *)(v478 + 8 * v480) = v482;
                        v474 = *(_QWORD *)(v457 + 32);
                      }
                      ++v475;
                    }
                    while (v475 < v474);
                  }
                  else
                  {
                    v476 = 0;
                  }
                  *(_WORD *)(v457 + 18) = 25;
                  *(_DWORD *)(v457 + 56) = 24;
                  *(_QWORD *)(v457 + 32) = v476;
                }
                else
                {
                  v467 = *(WTF **)(v457 + 24);
                  v684[1] = 0;
                  v684[0] = 0;
                  v685 = 0;
                  if (((unint64_t)v467 & 0xFF00FFFFFFFFFFFFLL) != 0)
                  {
                    v468 = 0;
                    if (((unint64_t)v467 & 0x1000000000000) == 0)
                    {
                      v469 = ((unint64_t)v467 >> 50) & 0x3F;
                      if ((_DWORD)v469)
                      {
                        if (v469 > 0x34 || ((1 << v469) & 0x12400001800284) == 0)
                        {
                          v684[0] = v467;
                          v468 = 1;
                        }
                      }
                    }
                    v470 = *(WTF **)(v457 + 32);
                    if (((unint64_t)v470 & 0xFF00FFFFFFFFFFFFLL) != 0)
                    {
                      if (((unint64_t)v470 & 0x1000000000000) == 0)
                      {
                        v471 = ((unint64_t)v470 >> 50) & 0x3F;
                        if ((_DWORD)v471)
                        {
                          if (v471 > 0x34 || ((1 << v471) & 0x12400001800284) == 0)
                            v684[v468++] = v470;
                        }
                      }
                      v472 = *(WTF **)(v457 + 40);
                      if (((unint64_t)v472 & 0xFF00FFFFFFFFFFFFLL) != 0
                        && ((unint64_t)v472 & 0x1000000000000) == 0)
                      {
                        v473 = ((unint64_t)v472 >> 50) & 0x3F;
                        if ((_DWORD)v473)
                        {
                          if (v473 > 0x34 || ((1 << v473) & 0x12400001800284) == 0)
                            v684[v468] = v472;
                        }
                      }
                    }
                  }
                  *(_OWORD *)(v457 + 24) = *(_OWORD *)v684;
                  *(_QWORD *)(v457 + 40) = v685;
                  *(_WORD *)(v457 + 18) = 24;
                  *(_DWORD *)(v457 + 56) = 8;
                }
                goto LABEL_676;
              }
              v639 = v425;
              v633 = v326;
              v582 = *(_QWORD *)(v457 + 72);
              v684[0] = 0;
              v583 = *(unsigned int *)(v582 + 12);
              if ((_DWORD)v583)
              {
                v584 = *(uint64_t **)v582;
                v585 = 16 * v583;
                do
                {
                  v586 = *v584;
                  if (((uint64_t)v684[0] & 1) != 0)
                  {
                    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)v684, v586);
                  }
                  else
                  {
                    v629 = *v584;
                    if (v586 != ((unint64_t)v684[0] & 0xFFFFFFFFFFFFFFFCLL))
                    {
                      if (((unint64_t)v684[0] & 0xFFFFFFFFFFFFFFFCLL) != 0)
                      {
                        v587 = WTF::fastMalloc((WTF *)0x28);
                        *(_QWORD *)v587 = 0x400000002;
                        v588 = (char)v684[0];
                        *(_QWORD *)(v587 + 8) = (unint64_t)v684[0] & 0xFFFFFFFFFFFFFFFCLL;
                        *(_QWORD *)(v587 + 16) = v629;
                        v684[0] = (WTF *)(v588 & 2 | (unint64_t)v587 | 1);
                      }
                      else
                      {
                        v684[0] = (WTF *)((uint64_t)v684[0] & 2 | (unint64_t)v629);
                      }
                    }
                  }
                  v584 += 2;
                  v585 -= 16;
                }
                while (v585);
              }
              v589 = JSC::DFG::Graph::addStructureSet(v465, (unint64_t *)v684);
              *(_WORD *)(v457 + 18) = 132;
              *(_DWORD *)(v457 + 56) = 8;
              *(_QWORD *)(v457 + 72) = v589;
              if (((uint64_t)v684[0] & 1) != 0)
                WTF::fastFree((unint64_t)v684[0] & 0xFFFFFFFFFFFFFFFCLL, v590, v591, v592, v593, v106, v107, v108);
              v219 = v653;
            }
            v326 = v633;
            v425 = v639;
            v103 = 1;
            v115 = 0x12400001800284;
            v104 = (uint64_t)v684;
            v105 = 25;
          }
LABEL_676:
          if (++v455 == v456)
          {
            v450 = *((_DWORD *)v326 + 15);
            v102 = (unsigned int *)v648;
            goto LABEL_660;
          }
          v453 = v664;
          continue;
        }
      }
    }
LABEL_610:
    v426 = __dst;
    if (__dst)
    {
      __dst = 0;
      LODWORD(__len) = 0;
      WTF::fastFree((unint64_t)v426, (void *)v103, v115, v104, v105, v106, v107, v108);
    }
  }
  v427 = v679;
  v428 = __n;
  if (v679)
  {
    v679 = 0;
    LODWORD(v680) = 0;
    WTF::fastFree((unint64_t)v427, (void *)v103, v115, v104, v105, v106, v107, v108);
  }
  if (v664)
    WTF::fastFree(v664 - 16, (void *)v103, v115, v104, v105, v106, v107, v108);
  if (v665)
    WTF::fastFree((unint64_t)v665, (void *)v103, v115, v104, v105, v106, v107, v108);
  if (v219)
    WTF::fastFree((unint64_t)v219, (void *)v103, v115, v104, v105, v106, v107, v108);
  v429 = 1;
LABEL_621:
  if ((_DWORD)v428)
  {
    v430 = 24 * v428;
    v431 = v643;
    do
    {
      v432 = *(_QWORD *)v431;
      if (*(_QWORD *)v431)
      {
        *(_QWORD *)v431 = 0;
        *((_DWORD *)v431 + 2) = 0;
        WTF::fastFree(v432, (void *)v103, v115, v104, v105, v106, v107, v108);
      }
      v431 = (WTF *)((char *)v431 + 24);
      v430 -= 24;
    }
    while (v430);
  }
  if (v643)
    WTF::fastFree((unint64_t)v643, (void *)v103, v115, v104, v105, v106, v107, v108);
  v433 = 0;
  do
  {
    v434 = *(_QWORD *)&v102[v433];
    if (v434)
    {
      v435 = &v102[v433];
      *(_QWORD *)v435 = 0;
      v435[2] = 0;
      WTF::fastFree(v434, (void *)v103, v115, v104, v105, v106, v107, v108);
    }
    v433 += 6;
  }
  while (6 * v645 != v433);
  WTF::fastFree((unint64_t)v102, (void *)v103, v115, v104, v105, v106, v107, v108);
  if ((v610 & 1) == 0)
  {
    v443 = 24 * v615;
    v444 = (unint64_t *)v646;
    do
    {
      if (*v444)
        WTF::fastFree(*v444, v436, v437, v438, v439, v440, v441, v442);
      v444 += 3;
      v443 -= 24;
    }
    while (v443);
  }
  if (v646)
    WTF::fastFree((unint64_t)v646, v436, v437, v438, v439, v440, v441, v442);
  v445 = 0;
  do
  {
    v446 = *(_QWORD *)((char *)v649 + v445);
    if (v446)
      WTF::fastFree(v446, v436, v437, v438, v439, v440, v441, v442);
    v445 += 24;
  }
  while (24 * v640 != v445);
  if (v649)
    WTF::fastFree((unint64_t)v649, v436, v437, v438, v439, v440, v441, v442);
  v447 = v671;
  if (v673 != (_BYTE *)v671 && v671 != 0)
  {
    v671 = 0;
    LODWORD(v672) = 0;
    WTF::fastFree((unint64_t)v447, v436, v437, v438, v439, v440, v441, v442);
  }
  JSC::DFG::SSACalculator::~SSACalculator((JSC::DFG::SSACalculator *)&v674, v436, v437, v438, v439, v440, v441, v442);
  return v429;
}

uint64_t JSC::Operands<JSC::DFG::FlushFormat,WTF::Vector<JSC::DFG::FlushFormat,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>>::operand(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (HIDWORD(a2) == 2)
  {
    v3 = *(unsigned int *)(a1 + 20);
    v2 = *(unsigned int *)(a1 + 16) + (uint64_t)(int)a2;
  }
  else
  {
    if ((a2 & 0x80000000) == 0)
    {
      v4 = (int)a2 - 5;
      return *(_QWORD *)a1 + v4;
    }
    v2 = a2 ^ 0xFFFFFFFFLL;
    v3 = *(unsigned int *)(a1 + 16);
  }
  v4 = v2 + v3;
  return *(_QWORD *)a1 + v4;
}

unint64_t JSC::DFG::uncheckedUseKindFor(unsigned int a1)
{
  if (a1 >= 8)
  {
    __break(0xC471u);
    JUMPOUT(0x198520238);
  }
  return (0x70931340200uLL >> (8 * a1)) & 0x3F;
}

uint64_t JSC::DFG::resultFor(unsigned int a1)
{
  uint64_t result;

  if (a1 < 8)
    return dword_199156454[(char)a1];
  result = 66;
  __break(0xC471u);
  return result;
}

void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t ***a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  char v32;
  char *v33;
  char v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t **v44;
  unint64_t v45;
  int v46;
  char v47;
  int v48;
  char v49;
  char v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  int v55;
  char v56;
  int v57;
  char v58;
  char v59;
  int v60;
  char v61;
  char v62;
  int v63;
  char v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  char v71;
  int v72;
  char v73;
  uint64_t v74;
  char v75;
  int v76;
  char v77;
  unsigned int v78;
  unsigned int v79;
  char v80;
  int v81;
  char v82;
  char v83;
  int v84;
  char v85;
  char v86;
  int v87;
  char v88;
  char v89;
  int v90;
  char v91;
  uint64_t v92;
  unsigned int v93;
  char v94;
  int v95;
  char v96;
  char v97;
  int v98;
  char v99;
  char v100;
  int v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  int v117;
  char v118;
  uint64_t v119;
  unsigned int v120;
  char v121;
  int v122;
  char v123;
  char v124;
  int v125;
  char v126;
  uint64_t v127;
  char v128;
  int v129;
  char v130;
  char v131;
  int v132;
  char v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  char v139;
  int v140;
  char v141;
  BOOL v142;
  uint64_t v143;
  char v144;
  int v145;
  char v146;
  char v147;
  int v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  _BOOL4 v156;
  char v157;
  int v158;
  char v159;
  char v160;
  int v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  char v166;
  int v167;
  char v168;
  char v169;
  int v170;
  char v171;
  char v172;
  int v173;
  char v174;
  char v175;
  int v176;
  char v177;
  char v178;
  int v179;
  char v180;
  char v181;
  int v182;
  char v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unsigned int v208;
  unsigned int v209;
  char v210;
  int v211;
  char v212;
  char v213;
  int v214;
  char v215;
  char v216;
  int v217;
  char v218;
  char v219;
  int v220;
  char v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t **v225;
  uint64_t v226;
  char v227;
  int v228;
  char v229;
  char v230;
  int v231;
  char v232;
  unsigned int *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char v237;
  int v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t **v242;
  uint64_t v243;
  char v244;
  int v245;
  char v246;
  _DWORD *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  char v262;
  int v263;
  char v264;
  uint64_t v265;
  char v266;
  int v267;
  char v268;
  char v269;
  int v270;
  char v271;
  char v272;
  int v273;
  char v274;
  char v275;
  int v276;
  char v277;
  char v278;
  int v279;
  char v280;
  char v281;
  int v282;
  char v283;
  int v284;
  unsigned int *v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  int v289;
  unsigned int v290;
  BOOL v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v295;
  char v297;
  int v298;
  char v299;
  unsigned int v300;
  unsigned int v301;
  char v302;
  int v303;
  char v304;
  int v305;
  char v306;
  int v307;
  char v308;
  uint64_t v309;
  char v310;
  int v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  int v316;
  char v317;
  char v318;
  int v319;
  char v320;
  char v321;
  int v322;
  char v323;
  char v324;
  int v325;
  char v326;
  char v327;
  int v328;
  char v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  char v333;
  int v334;
  char v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  unsigned int v355;
  unsigned int *v356;
  uint64_t v357;
  unsigned int v358;
  WTF *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unsigned int v381;
  _DWORD *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  int v396;
  char v397;
  int v398;
  char v399;
  int v400;
  int v401;
  unsigned int v402;
  unsigned int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unsigned int v415;
  BOOL v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unsigned int v425;
  uint64_t v426;
  _DWORD *v427;
  _QWORD *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  BOOL v472;
  int v473;
  BOOL v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  unsigned int v488;
  unsigned int v489;
  uint64_t v490;
  unsigned int v491;
  _QWORD *v492;
  _QWORD *v493;
  _QWORD *v494;
  _QWORD *v495;
  _QWORD *v496;
  _QWORD *v497;
  _QWORD *v498;
  _QWORD *v499;
  _QWORD *v500;
  _QWORD *v501;
  _QWORD *v502;
  _QWORD *v503;
  _QWORD *v504;
  _QWORD *v505;
  _QWORD *v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t **v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  const char *v524;
  void *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  BOOL v537;
  uint64_t v538;
  uint64_t v539;
  BOOL v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unsigned int v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unsigned int v576;
  char v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  char v592;
  int v593;
  char v594;
  int v595;
  int v596;
  int v597;
  int v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  uint64_t v602;
  uint64_t v603;
  int v604;
  uint64_t v605;
  char v606;
  char v607;
  char v608;
  uint64_t v609;
  int v610;
  uint64_t v611;
  char v612;
  char v613;
  char v614;
  char v615;
  WTF *v616;
  uint64_t v617;
  uint64_t v618;
  char v619;
  char v620;
  char v621;
  char v622;
  uint64_t v623;
  uint64_t v624;
  char v625;
  char v626;
  char v627;
  char v628;
  char v629;
  char v630;
  char v631;
  uint64_t v632;
  int v633;
  uint64_t v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  uint64_t v638;
  char v639;
  char v640;
  char v641;
  char v642;
  uint64_t v643;
  int v644;
  uint64_t v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  _QWORD v649[3];

  v13 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v13 = *(_QWORD *)v13;
  while (v13)
  {
    v15 = *(_QWORD *)(v13 + 24);
    if ((*(_BYTE *)(v13 + 32) & 1) != 0)
    {
      v28 = (HIDWORD(v15) & 0xFFFFF | ((int)(v15 >> 28) >> 24 << 20)) + 3;
      v15 = *(_QWORD *)(v13 + 24);
    }
    if ((v15 >> 60) - 3 <= 2)
    {
      v45 = (HIDWORD(v15) & 0xFFFFF | ((int)(v15 >> 28) >> 24 << 20)) + 4;
    }
    v16 = *(_QWORD *)(v13 + 16);
    v13 = v16 & 0xFFFFFFFF8;
    if ((v16 & 1) != 0)
      v13 = *(_QWORD *)v13;
  }
  if (*((_BYTE *)this + 960))
  {
    v487 = *(unsigned int *)(*((_QWORD *)this + 4) + 48);
  }
  v649[0] = a5;
  v649[1] = a3;
  v649[2] = a4;
  if (*((int *)this + 238) <= 0 && JSC::DFG::Node::hasArrayMode(a2))
  {
    v488 = *((unsigned __int16 *)a2 + 9);
    if (v488 > 0xC9)
    {
      if (v488 - 202 > 0x3E || ((1 << (v488 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v489 = v488 - 333;
        if (v489 > 0x3A || ((1 << v489) & 0x7A8000000000003) == 0)
        {
LABEL_1333:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x198523FE0);
        }
      }
      goto LABEL_327;
    }
    v577 = v488 - 101;
    if (v488 - 101 > 0x3E)
      goto LABEL_1332;
    if (((1 << v577) & 0x7E0070000000000FLL) != 0)
    {
LABEL_327:
      return;
    }
    if (((1 << v577) & 0x18000000000) == 0)
    {
LABEL_1332:
      if (v488 - 92 >= 2)
        goto LABEL_1333;
      goto LABEL_327;
    }
  }
  v14 = *((unsigned __int16 *)a2 + 9);
  switch(*((_WORD *)a2 + 9))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 0xB:
    case 0xC:
    case 0xE:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x43:
    case 0x45:
    case 0x47:
    case 0x48:
    case 0x4A:
    case 0x5B:
    case 0x86:
    case 0x94:
    case 0x95:
    case 0xA4:
    case 0xA5:
    case 0xA6:
    case 0xA9:
    case 0xB6:
    case 0xB7:
    case 0xB9:
    case 0xBB:
    case 0xBC:
    case 0xBD:
    case 0xBF:
    case 0xC0:
    case 0xE2:
    case 0xE3:
    case 0xE4:
    case 0xE5:
    case 0xEB:
    case 0xEC:
    case 0xEE:
    case 0xEF:
    case 0xF0:
    case 0x117:
    case 0x118:
    case 0x127:
    case 0x128:
    case 0x12A:
    case 0x12D:
    case 0x12E:
    case 0x12F:
    case 0x130:
    case 0x132:
    case 0x133:
    case 0x134:
    case 0x137:
    case 0x138:
    case 0x139:
    case 0x13A:
    case 0x148:
    case 0x149:
    case 0x14B:
    case 0x14C:
    case 0x153:
    case 0x154:
    case 0x16C:
    case 0x16D:
    case 0x16E:
    case 0x16F:
    case 0x170:
    case 0x175:
    case 0x17B:
    case 0x17C:
    case 0x183:
    case 0x188:
    case 0x189:
    case 0x19A:
    case 0x19C:
    case 0x19D:
    case 0x19F:
    case 0x1A2:
    case 0x1A3:
    case 0x1A4:
    case 0x1A5:
    case 0x1A6:
    case 0x1A7:
    case 0x1A8:
    case 0x1A9:
    case 0x1AA:
      return;
    case 6:
      v281 = 2;
      while (1)
      {
        v282 = v281 & 3;
        if (v282 == 1)
          break;
        if (v282 == 2)
          v283 = 1;
        else
          v283 = 3;
        if (v282 == 3)
          v281 = 1;
        else
          v281 = v283;
      }
      LOBYTE(v282) = 2;
      while (v282 != 1)
        LOBYTE(v282) = 1;
      LOBYTE(v282) = 2;
      while (v282 != 1)
        LOBYTE(v282) = 1;
      return;
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0x54:
    case 0x5E:
    case 0x5F:
    case 0x60:
    case 0x61:
    case 0x69:
    case 0x6A:
    case 0x6B:
    case 0x6C:
    case 0x6E:
    case 0x6F:
    case 0x70:
    case 0x71:
    case 0x72:
    case 0x73:
    case 0x74:
    case 0x75:
    case 0x76:
    case 0x77:
    case 0x78:
    case 0x79:
    case 0x7A:
    case 0x7B:
    case 0x7C:
    case 0x7D:
    case 0x7E:
    case 0x7F:
    case 0x80:
    case 0x81:
    case 0x82:
    case 0x83:
    case 0x8E:
    case 0x8F:
    case 0xA7:
    case 0xA8:
    case 0xB0:
    case 0xB1:
    case 0xC5:
    case 0xC6:
    case 0xC7:
    case 0xC8:
    case 0xC9:
    case 0xD4:
    case 0xD5:
    case 0xD8:
    case 0xF1:
    case 0xF2:
    case 0xF3:
    case 0xF4:
    case 0xF5:
    case 0xF6:
    case 0xF7:
    case 0xF8:
    case 0xF9:
    case 0xFA:
    case 0xFB:
    case 0xFC:
    case 0xFD:
    case 0xFE:
    case 0xFF:
    case 0x100:
    case 0x113:
    case 0x124:
    case 0x125:
    case 0x129:
    case 0x13B:
    case 0x13C:
    case 0x13D:
    case 0x140:
    case 0x141:
    case 0x147:
    case 0x14D:
    case 0x14E:
    case 0x14F:
    case 0x150:
    case 0x151:
    case 0x152:
    case 0x155:
    case 0x156:
    case 0x166:
    case 0x181:
    case 0x185:
    case 0x186:
    case 0x19B:
      goto LABEL_96;
    case 0xD:
      v222 = *((_QWORD *)a2 + 9);
      if (v222)
      {
        v355 = (HIDWORD(*(_QWORD *)(v222 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v222 + 24) >> 28) >> 24 << 20)) + 4;
        v43 = ((unint64_t)v355 << 15) | ((unint64_t)(v355 >> 31) << 47) | 2;
      }
      else
      {
        v43 = 131074;
      }
      goto LABEL_56;
    case 0xF:
      v492 = (_QWORD *)*((_QWORD *)a2 + 9);
      v493 = v492;
      do
      {
        v494 = v493;
        v493 = (_QWORD *)*v493;
      }
      while (v493);
      if (v494 != v492)
        *v492 = v494;
      v495 = (_QWORD *)*((_QWORD *)a2 + 9);
      v496 = v495;
      do
      {
        v497 = v496;
        v496 = (_QWORD *)*v496;
      }
      while (v496);
      if (v497 != v495)
        *v495 = v497;
      v33 = &v639;
      goto LABEL_1057;
    case 0x10:
      v498 = (_QWORD *)*((_QWORD *)a2 + 9);
      v499 = v498;
      do
      {
        v500 = v499;
        v499 = (_QWORD *)*v499;
      }
      while (v499);
      if (v500 != v498)
        *v498 = v500;
      v501 = (_QWORD *)*((_QWORD *)a2 + 9);
      v502 = v501;
      do
      {
        v503 = v502;
        v502 = (_QWORD *)*v502;
      }
      while (v502);
      if (v503 != v501)
        *v501 = v503;
      JSC::DFG::LazyNode::LazyNode(&v638, (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x11:
      v37 = **((_QWORD **)a2 + 9);
      v38 = 2;
      goto LABEL_51;
    case 0x12:
      v17 = *((_QWORD *)a2 + 9);
      v18 = *a4;
      v19 = v17 << 15 >> 15;
      v20 = (uint64_t *)(*a4)[3];
      v21 = *v20;
      v22 = v20[1];
      if (HIDWORD(v19) == 1)
      {
        if ((v17 & 0x80000000) != 0)
        {
          v23 = *v18;
          if (!*(_DWORD *)(v23 + 60))
          {
            __break(0xC471u);
            JUMPOUT(0x198524148);
          }
          v24 = ~(_DWORD)v17;
          v25 = *(unsigned int *)(**(_QWORD **)(v23 + 48) + 92);
LABEL_21:
          if (v24 >= v25)
            return;
          v616 = (WTF *)v19;
          goto LABEL_23;
        }
      }
      else if (!HIDWORD(v19) && v17 >= 5)
      {
        v29 = *v18;
        if (!*(_DWORD *)(v29 + 60))
        {
          __break(0xC471u);
          JUMPOUT(0x198524150);
        }
        v24 = (v17 - 5);
        v25 = *(unsigned int *)(**(_QWORD **)(v29 + 48) + 88);
        goto LABEL_21;
      }
      v616 = (WTF *)(v17 << 15 >> 15);
      if ((v17 & 0x1FFFF00000000) != 0x200000000 && v17 < 5)
        return;
LABEL_23:
      v26 = *(unsigned __int16 *)(*(_QWORD *)v21 + 18);
      if ((v26 - 17) >= 2 && (v26 - 99) >= 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198523EECLL);
      }
      v27 = *(unsigned int *)(v22 + 12);
      if ((_DWORD)v27 == *(_DWORD *)(v22 + 8))
        *(_QWORD *)(*(_QWORD *)v22 + 8 * *(unsigned int *)(v22 + 12)) = *(_QWORD *)WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22, (void *)(v27 + 1), (unint64_t)&v616, (uint64_t)a4, a5, a6, a7, a8);
      else
        *(_QWORD *)(*(_QWORD *)v22 + 8 * v27) = v19;
      ++*(_DWORD *)(v22 + 12);
      return;
    case 0x13:
      v41 = **((_QWORD **)a2 + 9);
      v42 = 2;
      goto LABEL_55;
    case 0x1C:
      v504 = (_QWORD *)*((_QWORD *)a2 + 9);
      v505 = v504;
      do
      {
        v506 = v505;
        v505 = (_QWORD *)*v505;
      }
      while (v505);
      if (v506 != v504)
        *v504 = v506;
      v243 = (v506[3] << 15) | 2;
      v242 = *a3;
      goto LABEL_628;
    case 0x21:
      v41 = *((unsigned int *)a2 + 18);
      v42 = 35;
      goto LABEL_55;
    case 0x22:
      v40 = *a4;
      v39 = 16419;
      goto LABEL_53;
    case 0x28:
      v30 = 2;
      while (1)
      {
        v31 = v30 & 3;
        if (v31 == 1)
          break;
        if (v31 == 2)
          v32 = 1;
        else
          v32 = 3;
        if (v31 == 3)
          v30 = 1;
        else
          v30 = v32;
      }
      return;
    case 0x29:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26 < 3)
        return;
      goto LABEL_327;
    case 0x2A:
    case 0x142:
    case 0x143:
      if ((*((_BYTE *)a2 + 30) & 0xFC) == 0)
        goto LABEL_327;
      return;
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x32:
    case 0x34:
    case 0x55:
    case 0x56:
    case 0x57:
    case 0x58:
    case 0x59:
    case 0x5A:
      v136 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      switch((_DWORD)v136)
      {
        case 0x1A:
          v240 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v241 = 0x68000000000000;
          break;
        case 0x1C:
          v240 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v241 = 0x70000000000000;
          break;
        case 0x1B:
          v240 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
          v241 = 0x6C000000000000;
          break;
        default:
          goto LABEL_327;
      }
      if (v240 != v241)
        goto LABEL_327;
LABEL_627:
      v242 = *a3;
      v243 = 16385;
LABEL_628:
      goto LABEL_1041;
    case 0x2C:
    case 0x2E:
    case 0x30:
    case 0x31:
    case 0x33:
    case 0x35:
      if ((*((_BYTE *)a2 + 30) & 0xFC) == 0 || (*((_BYTE *)a2 + 38) & 0xFC) == 0)
LABEL_96:
      return;
    case 0x3F:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 < 2)
        return;
      goto LABEL_327;
    case 0x40:
    case 0x42:
    case 0x44:
      v74 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v74 == 49 || (_DWORD)v74 == 1 || (_DWORD)v74 == 52)
        return;
      if ((_DWORD)v74)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198520904);
      }
      goto LABEL_327;
    case 0x41:
      v223 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v223 == 49 || (_DWORD)v223 == 1 || (_DWORD)v223 == 52)
        return;
      goto LABEL_327;
    case 0x46:
      v309 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v309 != 49 && (_DWORD)v309 != 1)
        goto LABEL_327;
      return;
    case 0x49:
    case 0x4C:
    case 0x4D:
    case 0x4E:
    case 0x4F:
    case 0x50:
    case 0x51:
    case 0x131:
      v163 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v164 = 0xC4000000000000;
      goto LABEL_419;
    case 0x4B:
      v40 = *a4;
      v39 = 16409;
      goto LABEL_53;
    case 0x52:
    case 0x53:
      v412 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (!(_DWORD)v412)
        goto LABEL_327;
      if (v412 > 0x34 || ((1 << v412) & 0x1200001C000002) == 0)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1985230ECLL);
      }
      return;
    case 0x5C:
    case 0x5D:
      v54 = *((_DWORD *)a2 + 18);
      if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
      {
        switch(*((_DWORD *)a2 + 14) & 7)
        {
          case 3:
            v55 = 13;
            break;
          case 4:
            v55 = 17;
            break;
          case 5:
            v55 = 19;
            break;
          case 7:
            __break(0xC471u);
            JUMPOUT(0x1985240D0);
          default:
            __break(0xC471u);
            JUMPOUT(0x198524100);
        }
      }
      else
      {
        v55 = 21;
      }
      switch(*((_DWORD *)a2 + 18))
      {
        case 0u:
        case 1u:
        case 2u:
        case 4u:
        case 0x17u:
        case 0x18u:
          goto LABEL_327;
        case 3u:
          v160 = 2;
          while (1)
          {
            v161 = v160 & 3;
            if (v161 == 1)
              break;
            if (v161 == 2)
              v162 = 1;
            else
              v162 = 3;
            if (v161 == 3)
              v160 = 1;
            else
              v160 = v162;
          }
          return;
        case 5u:
          if (BYTE2(v54) - 3 <= 1)
            goto LABEL_327;
          return;
        case 6u:
          return;
        case 7u:
          if (BYTE2(v54) > 3u || BYTE2(v54) == 2)
            goto LABEL_327;
          v116 = 2;
          while (1)
          {
            v117 = v116 & 3;
            if (v117 == 1)
              break;
            if (v117 == 2)
              v118 = 1;
            else
              v118 = 3;
            if (v117 == 3)
              v116 = 1;
            else
              v116 = v118;
          }
          LOBYTE(v117) = 2;
          while (v117 != 1)
            LOBYTE(v117) = 1;
          v137 = *((_DWORD *)a2 + 6);
          v138 = *((_DWORD *)this + 41);
          if (v138 <= v137)
          {
            __break(0xC471u);
            JUMPOUT(0x198524214);
          }
          if (v138 <= v137 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198520F80);
          }
          return;
        case 8u:
          if (BYTE2(v54) >= 2u && BYTE2(v54) != 3)
            goto LABEL_327;
          v131 = 2;
          while (1)
          {
            v132 = v131 & 3;
            if (v132 == 1)
              break;
            if (v132 == 2)
              v133 = 1;
            else
              v133 = 3;
            if (v132 == 3)
              v131 = 1;
            else
              v131 = v133;
          }
          LOBYTE(v132) = 2;
          while (v132 != 1)
            LOBYTE(v132) = 1;
          v134 = *((_DWORD *)a2 + 6);
          v135 = *((_DWORD *)this + 41);
          if (v135 <= v134)
          {
            __break(0xC471u);
            JUMPOUT(0x19852420CLL);
          }
          if (v135 <= v134 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198520EF8);
          }
          return;
        case 9u:
          if (BYTE2(v54) >= 2u && BYTE2(v54) != 3)
            goto LABEL_327;
          v56 = 2;
          while (1)
          {
            v57 = v56 & 3;
            if (v57 == 1)
              break;
            if (v57 == 2)
              v58 = 1;
            else
              v58 = 3;
            if (v57 == 3)
              v56 = 1;
            else
              v56 = v58;
          }
          LOBYTE(v57) = 2;
          while (v57 != 1)
            LOBYTE(v57) = 1;
          v65 = *((_DWORD *)a2 + 6);
          v66 = *((_DWORD *)this + 41);
          if (v66 <= v65)
          {
            __break(0xC471u);
            JUMPOUT(0x1985241BCLL);
          }
          if (v66 <= v65 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19852081CLL);
          }
          return;
        case 0xAu:
        case 0xBu:
          if (BYTE2(v54) <= 1u)
            goto LABEL_1158;
          goto LABEL_327;
        case 0xCu:
          if (BYTE2(v54) > 1u)
            goto LABEL_327;
          v380 = *((_QWORD *)a2 + 3);
          v381 = *((_DWORD *)this + 41);
          if (v381 <= v380)
          {
            __break(0xC471u);
            JUMPOUT(0x1985242BCLL);
          }
          if (v381 <= (int)v380 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1985242C4);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v636, v55, 16404, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          JSC::DFG::LazyNode::LazyNode(&v635, a2);
          if (v636 == 36 && (v637 & 0x3FFF) != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198522E70);
          }
          return;
        case 0xDu:
          v490 = *((_QWORD *)a2 + 3);
          v491 = *((_DWORD *)this + 41);
          if (v491 <= v490)
          {
            __break(0xC471u);
            JUMPOUT(0x1985242E4);
          }
          if (v491 <= (int)v490 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1985242ECLL);
          }
          JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v633, v55, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
          JSC::DFG::LazyNode::LazyNode(&v632, a2);
          if (v633 == 36 && (v634 & 0x3FFF) != 2)
          {
            __break(0xC471u);
            JUMPOUT(0x198523714);
          }
          return;
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          v75 = 2;
          while (1)
          {
            v76 = v75 & 3;
            if (v76 == 1)
              break;
            if (v76 == 2)
              v77 = 1;
            else
              v77 = 3;
            if (v76 == 3)
              v75 = 1;
            else
              v75 = v77;
          }
          LOBYTE(v76) = 2;
          while (v76 != 1)
            LOBYTE(v76) = 1;
          if ((v54 & 0x40000000) != 0)
            goto LABEL_1164;
          v78 = *((_DWORD *)a2 + 6);
          v79 = *((_DWORD *)this + 41);
          if (v79 <= v78)
          {
            __break(0xC471u);
            JUMPOUT(0x1985241DCLL);
          }
          if (v79 <= v78 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1985209B0);
          }
          return;
        case 0x19u:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
          __break(0xC471u);
          JUMPOUT(0x198523680);
        default:
          __break(0xC471u);
          JUMPOUT(0x198523734);
      }
      return;
    case 0x62:
    case 0xC3:
    case 0xD9:
    case 0xDB:
    case 0xDC:
    case 0x108:
    case 0x14A:
    case 0x184:
    case 0x187:
      goto LABEL_327;
    case 0x63:
      v247 = (_DWORD *)*((_QWORD *)a2 + 9);
      v260 = v247[6];
      if (v260)
      {
        v261 = v260 - 1;
        do
        {
          --v261;
        }
        while (v261 != -1);
      }
      return;
    case 0x64:
      v382 = (_DWORD *)*((_QWORD *)a2 + 9);
      v395 = v382[6];
      if (v395)
      {
        v396 = v395 - 1;
        do
        {
          --v396;
        }
        while (v396 != -1);
      }
      return;
    case 0x65:
    case 0x66:
    case 0x67:
    case 0x68:
      v67 = *((_DWORD *)a2 + 6);
      v68 = *((_DWORD *)this + 41);
      if (v68 <= v67)
      {
        __break(0xC471u);
        JUMPOUT(0x1985241C4);
      }
      if (v68 <= v67 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x1985241CCLL);
      }
      if (v68 <= v67 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x1985241D4);
      }
      v69 = *((_DWORD *)a2 + 18);
      v70 = *((_DWORD *)a2 + 14) & 7;
      if (v70 >= 2 && v70 - 3 >= 3)
      {
        if (v70 == 7)
        {
          __break(0xC471u);
          JUMPOUT(0x19852100CLL);
        }
        __break(0xC471u);
        JUMPOUT(0x198524120);
      }
      if (*((_DWORD *)a2 + 18) - 14 >= 9)
      {
        switch(*((_DWORD *)a2 + 18))
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
          case 5u:
          case 6u:
          case 0xCu:
          case 0xDu:
          case 0x17u:
          case 0x18u:
            goto LABEL_327;
          case 3u:
            goto LABEL_1041;
          case 7u:
            if (BYTE2(v69) - 3 < 2)
              goto LABEL_327;
            v306 = 2;
            while (1)
            {
              v307 = v306 & 3;
              if (v307 == 1)
                break;
              if (v307 == 2)
                v308 = 1;
              else
                v308 = 3;
              if (v307 == 3)
                v306 = 1;
              else
                v306 = v308;
            }
            LOBYTE(v307) = 2;
            while (v307 != 1)
              LOBYTE(v307) = 1;
            LOBYTE(v307) = 2;
            while (v307 != 1)
              LOBYTE(v307) = 1;
            LOBYTE(v307) = 2;
            while (v307 != 1)
              LOBYTE(v307) = 1;
            goto LABEL_1022;
          case 8u:
            if (BYTE2(v69) - 3 <= 1)
              goto LABEL_327;
            v354 = *((unsigned __int16 *)a2 + 9);
            if (v354 != 264)
              goto LABEL_1028;
            goto LABEL_1029;
          case 9u:
            if (BYTE2(v69) - 3 < 2)
              goto LABEL_327;
            v144 = 2;
            while (1)
            {
              v145 = v144 & 3;
              if (v145 == 1)
                break;
              if (v145 == 2)
                v146 = 1;
              else
                v146 = 3;
              if (v145 == 3)
                v144 = 1;
              else
                v144 = v146;
            }
            LOBYTE(v145) = 2;
            while (v145 != 1)
              LOBYTE(v145) = 1;
            LOBYTE(v145) = 2;
            while (v145 != 1)
              LOBYTE(v145) = 1;
            LOBYTE(v145) = 2;
            while (v145 != 1)
              LOBYTE(v145) = 1;
LABEL_1022:
            if (v14 == 264)
              goto LABEL_1029;
            if (v14 != 146)
              goto LABEL_1024;
            goto LABEL_1322;
          case 0xAu:
            if (BYTE2(v69) - 3 <= 1)
              goto LABEL_327;
            v354 = *((unsigned __int16 *)a2 + 9);
            if (v354 == 264)
              goto LABEL_1029;
LABEL_1028:
            if (v354 == 146)
LABEL_1322:
              v69 = *((_DWORD *)a2 + 20);
            else
LABEL_1029:
              v69 = *((_DWORD *)a2 + 18);
LABEL_1024:
            if ((v69 & 0xFE0000) == 0)
              return;
            v40 = *a4;
            v39 = 16388;
            break;
          case 0xBu:
            if ((v69 & 0xFE0000) != 0)
              goto LABEL_327;
            v40 = *a4;
            v39 = 16403;
            goto LABEL_53;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
            __break(0xC471u);
            JUMPOUT(0x198523EA4);
          default:
            __break(0xC471u);
            JUMPOUT(0x19852404CLL);
        }
        goto LABEL_53;
      }
      if ((v69 & 0x40000000) != 0)
      {
        goto LABEL_1184;
      }
      v71 = 2;
      while (1)
      {
        v72 = v71 & 3;
        if (v72 == 1)
          break;
        if (v72 == 2)
          v73 = 1;
        else
          v73 = 3;
        if (v72 == 3)
          v71 = 1;
        else
          v71 = v73;
      }
      LOBYTE(v72) = 2;
      while (v72 != 1)
        LOBYTE(v72) = 1;
      return;
    case 0x6D:
      v333 = 2;
      while (1)
      {
        v334 = v333 & 3;
        if (v334 == 1)
          break;
        if (v334 == 2)
          v335 = 1;
        else
          v335 = 3;
        if (v334 == 3)
          v333 = 1;
        else
          v333 = v335;
      }
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      LOBYTE(v334) = 2;
      while (v334 != 1)
        LOBYTE(v334) = 1;
      return;
    case 0x84:
    case 0x85:
      v34 = 2;
      while (1)
      {
        v35 = v34 & 3;
        if (v35 == 1)
          break;
        if (v35 == 2)
          v36 = 1;
        else
          v36 = 3;
        if (v35 == 3)
          v34 = 1;
        else
          v34 = v36;
      }
      return;
    case 0x87:
      v62 = 2;
      while (1)
      {
        v63 = v62 & 3;
        if (v63 == 1)
          break;
        if (v63 == 2)
          v64 = 1;
        else
          v64 = 3;
        if (v63 == 3)
          v62 = 1;
        else
          v62 = v64;
      }
      LOBYTE(v63) = 2;
      while (v63 != 1)
        LOBYTE(v63) = 1;
      LOBYTE(v63) = 2;
      while (v63 != 1)
        LOBYTE(v63) = 1;
      LOBYTE(v63) = 2;
      while (v63 != 1)
        LOBYTE(v63) = 1;
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8) + 16) & 0x3E000) == 0x4000)
        goto LABEL_1162;
      return;
    case 0x88:
    case 0x89:
      v169 = 2;
      while (1)
      {
        v170 = v169 & 3;
        if (v170 == 1)
          break;
        if (v170 == 2)
          v171 = 1;
        else
          v171 = 3;
        if (v170 == 3)
          v169 = 1;
        else
          v169 = v171;
      }
      LOBYTE(v170) = 2;
      while (v170 != 1)
        LOBYTE(v170) = 1;
      return;
    case 0x8A:
      v50 = 2;
      while (1)
      {
        v51 = v50 & 3;
        if (v51 == 1)
          break;
        if (v51 == 2)
          v52 = 1;
        else
          v52 = 3;
        if (v51 == 3)
          v50 = 1;
        else
          v50 = v52;
      }
      return;
    case 0x8B:
      v172 = 2;
      while (1)
      {
        v173 = v172 & 3;
        if (v173 == 1)
          break;
        if (v173 == 2)
          v174 = 1;
        else
          v174 = 3;
        if (v173 == 3)
          v172 = 1;
        else
          v172 = v174;
      }
      LOBYTE(v173) = 2;
      while (v173 != 1)
        LOBYTE(v173) = 1;
      return;
    case 0x8C:
    case 0x8D:
      v139 = 2;
      while (1)
      {
        v140 = v139 & 3;
        if (v140 == 1)
          break;
        if (v140 == 2)
          v141 = 1;
        else
          v141 = 3;
        if (v140 == 3)
          v139 = 1;
        else
          v139 = v141;
      }
      LOBYTE(v140) = 2;
      while (v140 != 1)
        LOBYTE(v140) = 1;
      return;
    case 0x90:
      goto LABEL_1178;
    case 0x91:
    case 0x92:
      v157 = 2;
      while (1)
      {
        v158 = v157 & 3;
        if (v158 == 1)
          break;
        if (v158 == 2)
          v159 = 1;
        else
          v159 = 3;
        if (v158 == 3)
          v157 = 1;
        else
          v157 = v159;
      }
      LOBYTE(v158) = 2;
      while (v158 != 1)
        LOBYTE(v158) = 1;
      LOBYTE(v158) = 2;
      while (v158 != 1)
        LOBYTE(v158) = 1;
      LOBYTE(v158) = 2;
      while (v158 != 1)
        LOBYTE(v158) = 1;
      LOBYTE(v158) = 2;
      while (v158 != 1)
        LOBYTE(v158) = 1;
      LOBYTE(v158) = 2;
      while (v158 != 1)
        LOBYTE(v158) = 1;
      LOBYTE(v158) = 2;
      while (v158 != 1)
        LOBYTE(v158) = 1;
      return;
    case 0x93:
      v97 = 2;
      while (1)
      {
        v98 = v97 & 3;
        if (v98 == 1)
          break;
        if (v98 == 2)
          v99 = 1;
        else
          v99 = 3;
        if (v98 == 3)
          v97 = 1;
        else
          v97 = v99;
      }
      return;
    case 0x96:
      v33 = &v641;
      goto LABEL_1057;
    case 0x97:
      v33 = &v640;
      goto LABEL_1057;
    case 0x98:
    case 0x99:
      if (*((int *)this + 238) < 2)
        return;
      v33 = &v626;
      goto LABEL_1057;
    case 0x9A:
      v86 = 2;
      while (1)
      {
        v87 = v86 & 3;
        if (v87 == 1)
          break;
        if (v87 == 2)
          v88 = 1;
        else
          v88 = 3;
        if (v87 == 3)
          v86 = 1;
        else
          v86 = v88;
      }
      LOBYTE(v87) = 2;
      while (v87 != 1)
        LOBYTE(v87) = 1;
      if (*((int *)this + 238) < 2)
        return;
      v33 = &v625;
      goto LABEL_1057;
    case 0x9B:
      if (*((int *)this + 238) >= 2)
        JSC::DFG::LazyNode::LazyNode(&v623, (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x9C:
      v147 = 2;
      while (1)
      {
        v148 = v147 & 3;
        if (v148 == 1)
          break;
        if (v148 == 2)
          v149 = 1;
        else
          v149 = 3;
        if (v148 == 3)
          v147 = 1;
        else
          v147 = v149;
      }
      LOBYTE(v148) = 2;
      while (v148 != 1)
        LOBYTE(v148) = 1;
      v150 = *((_QWORD *)a2 + 9);
      v151 = *(unsigned int *)(v150 + 20);
      v152 = (v151 << 6) - 64;
      v153 = v152;
      do
      {
        if (v153 == -64)
          goto LABEL_381;
        v154 = *(_DWORD *)(*(_QWORD *)(v150 + 8) + v153) - 2;
        v153 -= 64;
      }
      while (v154 > 3);
      LOBYTE(v154) = 2;
      while (v154 != 1)
        LOBYTE(v154) = 1;
LABEL_381:
      while (v151)
      {
        if (--v151 >= (unint64_t)*(unsigned int *)(v150 + 20))
        {
          __break(0xC471u);
          JUMPOUT(0x19852421CLL);
        }
        v155 = v152 - 64;
        v156 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v150 + 8) + v152));
        v152 = v155;
        if (v156)
        {
          v262 = 2;
          while (1)
          {
            v263 = v262 & 3;
            if (v263 == 1)
              break;
            if (v263 == 2)
              v264 = 1;
            else
              v264 = 3;
            if (v263 == 3)
              v262 = 1;
            else
              v262 = v264;
          }
          break;
        }
      }
      if (*((int *)this + 238) >= 2)
        JSC::DFG::LazyNode::LazyNode(&v624, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x9D:
      if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9)))
        return;
LABEL_1162:
      v40 = *a4;
      v39 = 16399;
      goto LABEL_53;
    case 0x9E:
      v46 = *((_DWORD *)a2 + 18);
      switch((char)v46)
      {
        case 3:
          goto LABEL_1041;
        case 5:
          return;
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
          v47 = 2;
          while (1)
          {
            v48 = v47 & 3;
            if (v48 == 1)
              break;
            if (v48 == 2)
              v49 = 1;
            else
              v49 = 3;
            if (v48 == 3)
              v47 = 1;
            else
              v47 = v49;
          }
          return;
        case 12:
        case 13:
          v33 = &v622;
          goto LABEL_1057;
        case 25:
          goto LABEL_1356;
        default:
          v591 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
          if (v591 == 12 || !v591)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
            __break(0xC471u);
            JUMPOUT(0x19852449CLL);
          }
LABEL_1356:
          v592 = 2;
          while (1)
          {
            v593 = v592 & 3;
            if (v593 == 1)
              break;
            if (v593 == 2)
              v594 = 1;
            else
              v594 = 3;
            if (v593 == 3)
              v592 = 1;
            else
              v592 = v594;
          }
          if ((v46 & 0x40000000) != 0)
            goto LABEL_1184;
          return;
      }
    case 0x9F:
      v305 = *((_DWORD *)a2 + 18);
      if (v305 != 25)
      {
        v595 = JSC::DFG::toTypedArrayType(v305);
        if (v595 == 12 || !v595)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
          __break(0xC471u);
          JUMPOUT(0x1985242B4);
        }
      }
      if ((v305 & 0x40000000) != 0)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
        __break(0xC471u);
        JUMPOUT(0x198521FA4);
      }
      return;
    case 0xA0:
      v507 = *((_DWORD *)a2 + 18);
      if (v507 == 25)
        goto LABEL_1228;
      v596 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
      if (v596 == 12 || !v596)
      {
        if (v507 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x198524350);
        }
        goto LABEL_1041;
      }
      if (v507 == 3)
        goto LABEL_1041;
LABEL_1228:
      if ((v507 & 0x40000000) != 0)
        goto LABEL_1184;
      v33 = &v621;
      goto LABEL_1057;
    case 0xA1:
      if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
      {
        __break(0xC471u);
        JUMPOUT(0x198524204);
      }
      v33 = &v620;
      goto LABEL_1057;
    case 0xA2:
      v508 = *((unsigned __int8 *)a2 + 72);
      if (v508 == 25)
        goto LABEL_1234;
      v597 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
      if (v597 == 12 || !v597)
      {
        if (v508 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x1985243B4);
        }
        goto LABEL_1041;
      }
      if (v508 == 3)
        goto LABEL_1041;
LABEL_1234:
      if (*((_WORD *)a2 + 9) == 146)
        v509 = *((_DWORD *)a2 + 20);
      else
        v509 = *((_DWORD *)a2 + 18);
      if ((v509 & 0x40000000) == 0)
      {
        v33 = &v628;
        goto LABEL_1057;
      }
      goto LABEL_1184;
    case 0xA3:
      v510 = *((unsigned __int8 *)a2 + 72);
      if (v510 == 25)
        goto LABEL_1239;
      v598 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
      if (v598 == 12 || !v598)
      {
        if (v510 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x198524418);
        }
        goto LABEL_1041;
      }
      if (v510 == 3)
      {
LABEL_1041:
        v40 = *a4;
        v39 = 16424;
        goto LABEL_53;
      }
LABEL_1239:
      if (*((_WORD *)a2 + 9) == 146)
        v511 = *((_DWORD *)a2 + 20);
      else
        v511 = *((_DWORD *)a2 + 18);
      if ((v511 & 0x40000000) != 0)
      {
LABEL_1184:
        v40 = *a4;
        v39 = 16423;
LABEL_53:
      }
      else
      {
        v33 = &v627;
LABEL_1057:
        JSC::DFG::LazyNode::LazyNode(v33, a2);
      }
      return;
    case 0xAA:
      v44 = *a3;
      v43 = 16385;
      goto LABEL_57;
    case 0xAB:
      v41 = *((unsigned int *)a2 + 18);
      v42 = 21;
      goto LABEL_55;
    case 0xAC:
      v37 = *((unsigned int *)a2 + 18);
      v38 = 21;
      goto LABEL_51;
    case 0xAD:
    case 0xAE:
      v41 = *((_QWORD *)a2 + 9);
      v42 = 36;
      goto LABEL_55;
    case 0xAF:
      v37 = *((_QWORD *)a2 + 9);
      v38 = 36;
      goto LABEL_51;
    case 0xB2:
      goto LABEL_1041;
    case 0xB3:
      v178 = 2;
      while (1)
      {
        v179 = v178 & 3;
        if (v179 == 1)
          break;
        if (v179 == 2)
          v180 = 1;
        else
          v180 = 3;
        if (v179 == 3)
          v178 = 1;
        else
          v178 = v180;
      }
      return;
    case 0xB4:
      v269 = 2;
      while (1)
      {
        v270 = v269 & 3;
        if (v270 == 1)
          break;
        if (v270 == 2)
          v271 = 1;
        else
          v271 = 3;
        if (v270 == 3)
          v269 = 1;
        else
          v269 = v271;
      }
      return;
    case 0xB5:
      v40 = *a4;
      v39 = 16408;
      goto LABEL_53;
    case 0xB8:
    case 0xBA:
      v59 = 2;
      while (1)
      {
        v60 = v59 & 3;
        if (v60 == 1)
          break;
        if (v60 == 2)
          v61 = 1;
        else
          v61 = 3;
        if (v60 == 3)
          v59 = 1;
        else
          v59 = v61;
      }
      return;
    case 0xBE:
      v33 = &v631;
      goto LABEL_1057;
    case 0xC1:
      v331 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v331 != 21 && (_DWORD)v331 != 49 && (_DWORD)v331 != 1)
        goto LABEL_327;
      v332 = *((_QWORD *)a2 + 4);
      if ((v332 & 0xFF00FFFFFFFFFFFFLL) == 0)
        return;
LABEL_897:
      v163 = v332 & 0xFC000000000000;
      v164 = 0x4000000000000;
LABEL_419:
      if (v163 != v164)
        goto LABEL_327;
      return;
    case 0xC2:
      if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
        goto LABEL_327;
      v297 = 2;
      while (1)
      {
        v298 = v297 & 3;
        if (v298 == 1)
          break;
        if (v298 == 2)
          v299 = 1;
        else
          v299 = 3;
        if (v298 == 3)
          v297 = 1;
        else
          v297 = v299;
      }
      LOBYTE(v298) = 2;
      while (v298 != 1)
        LOBYTE(v298) = 1;
      LOBYTE(v298) = 2;
      while (v298 != 1)
        LOBYTE(v298) = 1;
      return;
    case 0xC4:
      v404 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v404 == 11)
      {
        v40 = *a4;
        v39 = 16394;
        goto LABEL_53;
      }
      if ((_DWORD)v404)
      {
        __break(0xC471u);
        JUMPOUT(0x19852355CLL);
      }
      goto LABEL_327;
    case 0xCA:
    case 0xCB:
    case 0xCC:
    case 0xCD:
    case 0xCF:
    case 0xD0:
    case 0xD1:
    case 0xD2:
    case 0xD3:
      if (v14 - 202 >= 0xA || ((0x3EFu >> (v14 + 54)) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1985241B4);
      }
      v426 = dword_199156474[(__int16)(v14 - 202)];
      v427 = (_DWORD *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v576 = v426 + *v427;
        if (*((_DWORD *)this + 41) <= v576)
        {
          __break(0xC471u);
          JUMPOUT(0x198524420);
        }
        v428 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v576);
      }
      else
      {
        v428 = &v427[2 * v426];
      }
      if ((*v428 & 0xFF00FFFFFFFFFFFFLL) == 0)
        goto LABEL_327;
      goto LABEL_1152;
    case 0xCE:
      v549 = (uint64_t *)((char *)a2 + 24);
      if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
      {
        v590 = *v549;
        if (*((_DWORD *)this + 41) <= v590)
        {
          __break(0xC471u);
          JUMPOUT(0x1985244A4);
        }
        v549 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v590);
      }
      v332 = *v549;
      goto LABEL_897;
    case 0xD6:
      v321 = 2;
      while (1)
      {
        v322 = v321 & 3;
        if (v322 == 1)
          break;
        if (v322 == 2)
          v323 = 1;
        else
          v323 = 3;
        if (v322 == 3)
          v321 = 1;
        else
          v321 = v323;
      }
      LOBYTE(v322) = 2;
      while (v322 != 1)
        LOBYTE(v322) = 1;
      LOBYTE(v322) = 2;
      while (v322 != 1)
        LOBYTE(v322) = 1;
      LOBYTE(v322) = 2;
      while (v322 != 1)
        LOBYTE(v322) = 1;
      LOBYTE(v322) = 2;
      while (v322 != 1)
        LOBYTE(v322) = 1;
      LOBYTE(v322) = 2;
      while (v322 != 1)
        LOBYTE(v322) = 1;
      LOBYTE(v322) = 2;
      while (v322 != 1)
        LOBYTE(v322) = 1;
      LOBYTE(v322) = 2;
      while (v322 != 1)
        LOBYTE(v322) = 1;
      LOBYTE(v322) = 2;
      while (v322 != 1)
        LOBYTE(v322) = 1;
      LOBYTE(v322) = 2;
      while (v322 != 1)
        LOBYTE(v322) = 1;
      return;
    case 0xD7:
      v327 = 2;
      while (1)
      {
        v328 = v327 & 3;
        if (v328 == 1)
          break;
        if (v328 == 2)
          v329 = 1;
        else
          v329 = 3;
        if (v328 == 3)
          v327 = 1;
        else
          v327 = v329;
      }
      LOBYTE(v328) = 2;
      while (v328 != 1)
        LOBYTE(v328) = 1;
      LOBYTE(v328) = 2;
      while (v328 != 1)
        LOBYTE(v328) = 1;
      LOBYTE(v328) = 2;
      while (v328 != 1)
        LOBYTE(v328) = 1;
      LOBYTE(v328) = 2;
      while (v328 != 1)
        LOBYTE(v328) = 1;
      v330 = *((unsigned __int8 *)a2 + 72);
      switch(v330)
      {
        case 9:
          LOBYTE(v328) = 2;
          while (v328 != 1)
            LOBYTE(v328) = 1;
          return;
        case 7:
          v44 = *a3;
          v43 = 16400;
          break;
        case 8:
          v44 = *a3;
          v43 = 16401;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198523DF0);
      }
      goto LABEL_57;
    case 0xDA:
    case 0xDE:
      v278 = 2;
      while (1)
      {
        v279 = v278 & 3;
        if (v279 == 1)
          break;
        if (v279 == 2)
          v280 = 1;
        else
          v280 = 3;
        if (v279 == 3)
          v278 = 1;
        else
          v278 = v280;
      }
      LOBYTE(v279) = 2;
      while (v279 != 1)
        LOBYTE(v279) = 1;
      return;
    case 0xDD:
      v318 = 2;
      while (1)
      {
        v319 = v318 & 3;
        if (v319 == 1)
          break;
        if (v319 == 2)
          v320 = 1;
        else
          v320 = 3;
        if (v319 == 3)
          v318 = 1;
        else
          v318 = v320;
      }
      LOBYTE(v319) = 2;
      while (v319 != 1)
        LOBYTE(v319) = 1;
      LOBYTE(v319) = 2;
      while (v319 != 1)
        LOBYTE(v319) = 1;
      LOBYTE(v319) = 2;
      while (v319 != 1)
        LOBYTE(v319) = 1;
      return;
    case 0xDF:
    case 0xE0:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
        || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000
        || (*((_QWORD *)a2 + 5) & 0xFC000000000000) != 0x54000000000000)
      {
        goto LABEL_327;
      }
      v216 = 2;
      while (1)
      {
        v217 = v216 & 3;
        if (v217 == 1)
          break;
        if (v217 == 2)
          v218 = 1;
        else
          v218 = 3;
        if (v217 == 3)
          v216 = 1;
        else
          v216 = v218;
      }
      LOBYTE(v217) = 2;
      while (v217 != 1)
        LOBYTE(v217) = 1;
      LOBYTE(v217) = 2;
      while (v217 != 1)
        LOBYTE(v217) = 1;
      LOBYTE(v217) = 2;
      while (v217 != 1)
        LOBYTE(v217) = 1;
      return;
    case 0xE1:
      v163 = *((_QWORD *)a2 + 5) & 0xFC000000000000;
      v164 = 0x54000000000000;
      goto LABEL_419;
    case 0xE6:
      v265 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((v265 - 1) < 2)
        return;
      if ((_DWORD)v265)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198521B84);
      }
      goto LABEL_327;
    case 0xE7:
    case 0xE8:
    case 0xE9:
    case 0xEA:
    case 0xED:
      v53 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v53 == 21)
      {
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) == 0x54000000000000)
        {
          v83 = 2;
          while (1)
          {
            v84 = v83 & 3;
            if (v84 == 1)
              break;
            if (v84 == 2)
              v85 = 1;
            else
              v85 = 3;
            if (v84 == 3)
              v83 = 1;
            else
              v83 = v85;
          }
          LOBYTE(v84) = 2;
          while (v84 != 1)
            LOBYTE(v84) = 1;
        }
        return;
      }
      if ((_DWORD)v53 || (*((_BYTE *)a2 + 38) & 0xFC) != 0)
        return;
      goto LABEL_327;
    case 0x101:
    case 0x102:
      goto LABEL_1041;
    case 0x103:
    case 0x104:
    case 0x105:
    case 0x10C:
    case 0x10E:
    case 0x110:
    case 0x111:
    case 0x112:
    case 0x116:
    case 0x119:
    case 0x11A:
    case 0x11B:
    case 0x11C:
    case 0x11D:
    case 0x11E:
    case 0x11F:
    case 0x120:
    case 0x121:
    case 0x122:
      v80 = 2;
      while (1)
      {
        v81 = v80 & 3;
        if (v81 == 1)
          break;
        if (v81 == 2)
          v82 = 1;
        else
          v82 = 3;
        if (v81 == 3)
          v80 = 1;
        else
          v80 = v82;
      }
      LOBYTE(v81) = 2;
      while (v81 != 1)
        LOBYTE(v81) = 1;
      return;
    case 0x106:
      v100 = 2;
      while (1)
      {
        v101 = v100 & 3;
        if (v101 == 1)
          break;
        if (v101 == 2)
          v102 = 1;
        else
          v102 = 3;
        if (v101 == 3)
          v100 = 1;
        else
          v100 = v102;
      }
      LOBYTE(v101) = 2;
      while (v101 != 1)
        LOBYTE(v101) = 1;
      v103 = *((_QWORD *)a2 + 4);
      v104 = v103;
      if ((v103 & 0x80000000) != 0)
      {
        JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v103) + 0x2000000000000, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      else
      {
        JSC::DFG::Graph::freeze((uint64_t)this, v103 | 0xFFFE000000000000, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (!(_DWORD)v103)
          return;
      }
      v111 = *((unsigned __int16 *)a2 + 9);
      switch(v111)
      {
        case 267:
          goto LABEL_1031;
        case 264:
          LOBYTE(v112) = *((_DWORD *)a2 + 19) & 0xF;
          break;
        case 352:
LABEL_1031:
          LOBYTE(v112) = *((_DWORD *)a2 + 21) & 0xF;
          break;
        default:
          v112 = *((_DWORD *)a2 + 18);
          break;
      }
      if (v112 - 4 < 6
        || v112 <= 0x19u && ((1 << v112) & 0x2A00000) != 0)
      {
        v113 = *((unsigned int *)this + 107);
        if (v103 >= v113)
        {
          if ((_DWORD)v113)
          {
            v233 = (unsigned int *)*((_QWORD *)this + 52);
            v234 = 4 * v113;
            do
            {
              v235 = *v233;
              if (v235 < v103)
              {
                if (*((_DWORD *)this + 41) <= (v235 + *((_DWORD *)a2 + 6)))
                {
                  __break(0xC471u);
                  JUMPOUT(0x19852423CLL);
                }
                if ((v235 & 0x80000000) != 0)
                  v236 = COERCE__INT64((double)v235) + 0x2000000000000;
                else
                  v236 = v235 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v236, v105, v106, v107, v108, v109, v110);
              }
              ++v233;
              v234 -= 4;
            }
            while (v234);
          }
        }
        else
        {
          v114 = 0;
          do
          {
            if (*((_DWORD *)this + 41) <= (v114 + *((_DWORD *)a2 + 6)))
            {
              __break(0xC471u);
              JUMPOUT(0x1985241E4);
            }
            if ((v114 & 0x80000000) != 0)
              v115 = COERCE__INT64((double)v114) + 0x2000000000000;
            else
              v115 = v114 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v115, v105, v106, v107, v108, v109, v110);
            ++v114;
          }
          while (v104 != v114);
        }
      }
      return;
    case 0x107:
      v413 = *((unsigned int *)a2 + 8);
      if (!*((_DWORD *)a2 + 8))
        goto LABEL_578;
      v414 = *((_QWORD *)a2 + 3);
      v415 = *((_DWORD *)this + 41);
      v416 = v415 >= v414;
      LODWORD(v417) = v415 - v414;
      if (v416)
        v417 = v417;
      else
        v417 = 0;
      while (1)
      {
        if (!v417)
        {
          __break(0xC471u);
          JUMPOUT(0x1985242CCLL);
        }
        if (*(_WORD *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v414) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
          break;
        LODWORD(v414) = v414 + 1;
        --v417;
        if (!--v413)
          goto LABEL_578;
      }
LABEL_718:
LABEL_578:
      v40 = *a4;
      v39 = 16407;
      goto LABEL_53;
    case 0x109:
      v219 = 2;
      while (1)
      {
        v220 = v219 & 3;
        if (v220 == 1)
          break;
        if (v220 == 2)
          v221 = 1;
        else
          v221 = 3;
        if (v220 == 3)
          v219 = 1;
        else
          v219 = v221;
      }
      LOBYTE(v220) = 2;
      while (v220 != 1)
        LOBYTE(v220) = 1;
      return;
    case 0x10A:
      v310 = 2;
      while (1)
      {
        v311 = v310 & 3;
        if (v311 == 1)
          break;
        if (v311 == 2)
          v312 = 1;
        else
          v312 = 3;
        if (v311 == 3)
          v310 = 1;
        else
          v310 = v312;
      }
      LOBYTE(v311) = 2;
      while (v311 != 1)
        LOBYTE(v311) = 1;
      v313 = *((unsigned int *)a2 + 20);
      if ((v313 & 0x80000000) != 0)
        v314 = COERCE__INT64((double)v313) + 0x2000000000000;
      else
        v314 = v313 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v314, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      return;
    case 0x10B:
      v181 = 2;
      while (1)
      {
        v182 = v181 & 3;
        if (v182 == 1)
          break;
        if (v182 == 2)
          v183 = 1;
        else
          v183 = 3;
        if (v182 == 3)
          v181 = 1;
        else
          v181 = v183;
      }
      LOBYTE(v182) = 2;
      while (v182 != 1)
        LOBYTE(v182) = 1;
      v184 = (uint64_t *)*((_QWORD *)a2 + 9);
      v185 = *v184;
      v186 = *(unsigned int *)(*v184 + 8);
      if ((v186 & 0x80000000) != 0)
        v187 = COERCE__INT64((double)v186) + 0x2000000000000;
      else
        v187 = v186 | 0xFFFE000000000000;
      JSC::DFG::Graph::freeze((uint64_t)this, v187, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v195 = *((unsigned __int16 *)a2 + 9);
      switch(v195)
      {
        case 267:
          goto LABEL_1073;
        case 264:
          LOBYTE(v196) = *((_DWORD *)a2 + 19) & 0xF;
          break;
        case 352:
LABEL_1073:
          LOBYTE(v196) = *((_DWORD *)a2 + 21) & 0xF;
          break;
        default:
          v196 = *((_DWORD *)a2 + 18);
          break;
      }
      if (v196 - 4 < 6
        || ((v472 = v196 > 0x19u, v473 = (1 << v196) & 0x2A00000, !v472)
          ? (v474 = v473 == 0)
          : (v474 = 1),
            !v474))
      {
        v197 = *((unsigned int *)this + 107);
        if (v197 <= v186)
        {
          v616 = 0;
          v617 = 0;
          if ((_DWORD)v197)
          {
            v356 = (unsigned int *)*((_QWORD *)this + 52);
            v357 = 4 * v197;
            do
            {
              v358 = *v356;
              LODWORD(v599) = v358;
              if (v358 < v186)
              {
                if (HIDWORD(v617) == (_DWORD)v617)
                {
                  WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v616, (unint64_t)&v599);
                }
                else
                {
                  *((_DWORD *)v616 + HIDWORD(v617)) = v358;
                  ++HIDWORD(v617);
                }
              }
              ++v356;
              v357 -= 4;
            }
            while (v357);
            v359 = v616;
            if (HIDWORD(v617))
            {
              v360 = v185 + 16;
              v361 = 4 * HIDWORD(v617);
              do
              {
                v362 = *(unsigned int *)v359;
                if ((v362 & 0x80000000) != 0)
                  v363 = COERCE__INT64((double)v362) + 0x2000000000000;
                else
                  v363 = v362 | 0xFFFE000000000000;
                JSC::DFG::Graph::freeze((uint64_t)this, v363, v189, v190, v191, v192, v193, v194);
                if ((*(_BYTE *)(v185 + 4) & 0xE) == 6)
                  v370 = *(_QWORD *)(v360 + 8 * v362) + 0x2000000000000;
                else
                  v370 = *(_QWORD *)(v360 + 8 * v362);
                JSC::DFG::Graph::freeze((uint64_t)this, v370, v364, v365, v366, v367, v368, v369);
                v359 = (WTF *)((char *)v359 + 4);
                v361 -= 4;
              }
              while (v361);
              v359 = v616;
            }
            if (v359)
            {
              v616 = 0;
              LODWORD(v617) = 0;
              WTF::fastFree((unint64_t)v359, v188, v189, v190, v191, v192, v193, v194);
            }
          }
        }
        else if ((_DWORD)v186)
        {
          v198 = 0;
          v199 = v185 + 16;
          do
          {
            if ((v198 & 0x80000000) != 0)
              v200 = COERCE__INT64((double)v198) + 0x2000000000000;
            else
              v200 = v198 | 0xFFFE000000000000;
            JSC::DFG::Graph::freeze((uint64_t)this, v200, v189, v190, v191, v192, v193, v194);
            if ((*(_BYTE *)(v185 + 4) & 0xE) == 6)
              v207 = *(_QWORD *)(v199 + 8 * v198) + 0x2000000000000;
            else
              v207 = *(_QWORD *)(v199 + 8 * v198);
            JSC::DFG::Graph::freeze((uint64_t)this, v207, v201, v202, v203, v204, v205, v206);
            ++v198;
          }
          while (v186 != v198);
        }
      }
      return;
    case 0x10D:
      v224 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (!(_DWORD)v224)
        goto LABEL_327;
      if ((_DWORD)v224 != 1 && (_DWORD)v224 != 52)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x198523538);
      }
      goto LABEL_576;
    case 0x10F:
      v512 = *((_QWORD *)a2 + 3);
      if ((v512 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v512 & 0xFC000000000000) == 0x54000000000000)
        goto LABEL_576;
      goto LABEL_327;
    case 0x114:
      if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) & 1) == 0)
        goto LABEL_327;
      v272 = 2;
      while (1)
      {
        v273 = v272 & 3;
        if (v273 == 1)
          break;
        if (v273 == 2)
          v274 = 1;
        else
          v274 = 3;
        if (v273 == 3)
          v272 = 1;
        else
          v272 = v274;
      }
      LOBYTE(v273) = 2;
      while (v273 != 1)
        LOBYTE(v273) = 1;
      return;
    case 0x115:
      v284 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
      if (v284 == 352)
      {
LABEL_1178:
        v44 = *a3;
        v43 = 16423;
LABEL_57:
        return;
      }
      if (v284 != 349)
        goto LABEL_327;
      goto LABEL_718;
    case 0x123:
      v33 = &v630;
      goto LABEL_1057;
    case 0x126:
      v44 = *a3;
      v43 = 16394;
      goto LABEL_57;
    case 0x12B:
      v124 = 2;
      while (1)
      {
        v125 = v124 & 3;
        if (v125 == 1)
          break;
        if (v125 == 2)
          v126 = 1;
        else
          v126 = 3;
        if (v125 == 3)
          v124 = 1;
        else
          v124 = v126;
      }
      return;
    case 0x12C:
      v213 = 2;
      while (1)
      {
        v214 = v213 & 3;
        if (v214 == 1)
          break;
        if (v214 == 2)
          v215 = 1;
        else
          v215 = 3;
        if (v214 == 3)
          v213 = 1;
        else
          v213 = v215;
      }
      return;
    case 0x135:
      v266 = 2;
      while (1)
      {
        v267 = v266 & 3;
        if (v267 == 1)
          break;
        if (v267 == 2)
          v268 = 1;
        else
          v268 = 3;
        if (v267 == 3)
          v266 = 1;
        else
          v266 = v268;
      }
      return;
    case 0x136:
      v33 = &v642;
      goto LABEL_1057;
    case 0x13E:
    case 0x145:
      v127 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if (v127 > 0x34)
        goto LABEL_1306;
      if (((1 << v127) & 0x12026000400002) != 0)
        return;
      if (((1 << v127) & 0x101) != 0)
        goto LABEL_327;
      if (v127 != 24)
      {
LABEL_1306:
        __break(0xC471u);
        JUMPOUT(0x198523D1CLL);
      }
      v128 = 2;
      while (1)
      {
        v129 = v128 & 3;
        if (v129 == 1)
          break;
        if (v129 == 2)
          v130 = 1;
        else
          v130 = 3;
        if (v129 == 3)
          v128 = 1;
        else
          v128 = v130;
      }
      return;
    case 0x13F:
      v163 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
      v164 = 0x54000000000000;
      goto LABEL_419;
    case 0x144:
LABEL_576:
      v225 = *a3;
      v226 = 16407;
      goto LABEL_577;
    case 0x146:
      v513 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
      if ((_DWORD)v513 == 28)
        return;
      if ((_DWORD)v513)
      {
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
        __break(0xC471u);
        JUMPOUT(0x1985239BCLL);
      }
      goto LABEL_327;
    case 0x157:
      v41 = *((unsigned int *)a2 + 18);
      v42 = 33;
LABEL_55:
      v43 = v42 | (v41 << 15);
      goto LABEL_56;
    case 0x158:
      v37 = *((unsigned int *)a2 + 18);
      v38 = 33;
LABEL_51:
      v39 = v38 | (v37 << 15);
      goto LABEL_52;
    case 0x159:
      v119 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 40);
      if ((v119 & 1) != 0)
        v120 = (v119 >> 1) & 3;
      else
        v120 = *(unsigned __int8 *)(v119 + 4);
      if (v120 != 2)
      v121 = 2;
      while (1)
      {
        v122 = v121 & 3;
        if (v122 == 1)
          break;
        if (v122 == 2)
          v123 = 1;
        else
          v123 = 3;
        if (v122 == 3)
          v121 = 1;
        else
          v121 = v123;
      }
      LOBYTE(v122) = 2;
      while (v122 != 1)
        LOBYTE(v122) = 1;
      return;
    case 0x15A:
      v225 = *a3;
      v226 = 16385;
LABEL_577:
      goto LABEL_578;
    case 0x15B:
    case 0x161:
    case 0x162:
      v230 = 2;
      while (1)
      {
        v231 = v230 & 3;
        if (v231 == 1)
          break;
        if (v231 == 2)
          v232 = 1;
        else
          v232 = 3;
        if (v231 == 3)
          v230 = 1;
        else
          v230 = v232;
      }
      LOBYTE(v231) = 2;
      while (v231 != 1)
        LOBYTE(v231) = 1;
      return;
    case 0x15C:
    case 0x163:
      if ((*(_DWORD *)(*((_QWORD *)this + 3) + 16) & 0xFFFFFFFE) != 4)
      v227 = 2;
      while (1)
      {
        v228 = v227 & 3;
        if (v228 == 1)
          break;
        if (v228 == 2)
          v229 = 1;
        else
          v229 = 3;
        if (v228 == 3)
          v227 = 1;
        else
          v227 = v229;
      }
      LOBYTE(v228) = 2;
      while (v228 != 1)
        LOBYTE(v228) = 1;
      return;
    case 0x15D:
    case 0x15E:
    case 0x15F:
    case 0x160:
      v237 = 2;
      while (1)
      {
        v238 = v237 & 3;
        if (v238 == 1)
          break;
        if (v238 == 2)
          v239 = 1;
        else
          v239 = 3;
        if (v238 == 3)
          v237 = 1;
        else
          v237 = v239;
      }
      LOBYTE(v238) = 2;
      while (v238 != 1)
        LOBYTE(v238) = 1;
      return;
    case 0x164:
      v33 = &v619;
      goto LABEL_1057;
    case 0x165:
      JSC::DFG::LazyNode::LazyNode(&v618, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      return;
    case 0x167:
    case 0x168:
    case 0x169:
    case 0x16A:
      v92 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 112);
      if ((v92 & 1) != 0)
        v93 = (v92 >> 1) & 3;
      else
        v93 = *(unsigned __int8 *)(v92 + 4);
      if (v93 != 2)
      {
        v244 = 2;
        while (1)
        {
          v245 = v244 & 3;
          if (v245 == 1)
            break;
          if (v245 == 2)
            v246 = 1;
          else
            v246 = 3;
          if (v245 == 3)
            v244 = 1;
          else
            v244 = v246;
        }
      }
      v94 = 2;
      while (1)
      {
        v95 = v94 & 3;
        if (v95 == 1)
          break;
        if (v95 == 2)
          v96 = 1;
        else
          v96 = 3;
        if (v95 == 3)
          v94 = 1;
        else
          v94 = v96;
      }
      LOBYTE(v95) = 2;
      while (v95 != 1)
        LOBYTE(v95) = 1;
      return;
    case 0x16B:
      v324 = 2;
      while (1)
      {
        v325 = v324 & 3;
        if (v325 == 1)
          break;
        if (v325 == 2)
          v326 = 1;
        else
          v326 = 3;
        if (v325 == 3)
          v324 = 1;
        else
          v324 = v326;
      }
      LOBYTE(v325) = 2;
      while (v325 != 1)
        LOBYTE(v325) = 1;
      return;
    case 0x171:
    case 0x172:
    case 0x173:
    case 0x174:
    case 0x176:
    case 0x177:
      v89 = 2;
      while (1)
      {
        v90 = v89 & 3;
        if (v90 == 1)
          break;
        if (v90 == 2)
          v91 = 1;
        else
          v91 = 3;
        if (v90 == 3)
          v89 = 1;
        else
          v89 = v91;
      }
      return;
    case 0x178:
    case 0x179:
    case 0x17A:
    case 0x17D:
      v40 = *a4;
      v39 = 16418;
      goto LABEL_53;
    case 0x17E:
      v514 = *a3;
      v515 = 16392;
      goto LABEL_1298;
    case 0x17F:
      v514 = *a3;
      v515 = 16387;
LABEL_1298:
      v40 = *a4;
      v39 = 16392;
      goto LABEL_53;
    case 0x180:
    case 0x182:
      if (v14 != 386)
        goto LABEL_1079;
      v165 = *((unsigned __int8 *)a2 + 80);
      if (v165 == 2)
      {
        if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x198524234);
        }
        if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000) == 0x20000000000000)
        {
          v166 = 2;
          while (1)
          {
            v167 = v166 & 3;
            if (v167 == 1)
              break;
            if (v167 == 2)
              v168 = 1;
            else
              v168 = 3;
            if (v167 == 3)
              v166 = 1;
            else
              v166 = v168;
          }
          LOBYTE(v167) = 2;
          while (v167 != 1)
            LOBYTE(v167) = 1;
          LOBYTE(v167) = 2;
          while (v167 != 1)
            LOBYTE(v167) = 1;
          return;
        }
      }
      else
      {
        if (v165 != 1)
          goto LABEL_327;
LABEL_1079:
        v397 = 2;
        while (1)
        {
          v398 = v397 & 3;
          if (v398 == 1)
            break;
          if (v398 == 2)
            v399 = 1;
          else
            v399 = 3;
          if (v398 == 3)
            v397 = 1;
          else
            v397 = v399;
        }
        if (v14 == 146)
          v400 = *((_DWORD *)a2 + 20);
        else
          v400 = *((_DWORD *)a2 + 18);
        if (v14 == 386)
          v401 = 11;
        else
          v401 = 12;
        if (v400 != 9)
        {
          switch((char)v400)
          {
            case 3:
              goto LABEL_1041;
            case 7:
              if (BYTE2(v400) > 1u)
                goto LABEL_327;
              v556 = *((_QWORD *)a2 + 3);
              v557 = *((_DWORD *)this + 41);
              if (v557 <= v556)
              {
                __break(0xC471u);
                JUMPOUT(0x198524428);
              }
              if (v557 <= (int)v556 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x198524430);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v647, v401, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              JSC::DFG::LazyNode::LazyNode(&v646, a2);
              if (v647 == 36 && (v648 & 0x3FFF) != 2)
              {
                __break(0xC471u);
                JUMPOUT(0x198523DC4);
              }
              return;
            case 8:
              if (BYTE2(v400) > 1u)
                goto LABEL_327;
              v424 = *((_QWORD *)a2 + 3);
              v425 = *((_DWORD *)this + 41);
              if (v425 <= v424)
              {
                __break(0xC471u);
                JUMPOUT(0x1985242D4);
              }
              if (v425 <= (int)v424 + 1)
              {
                __break(0xC471u);
                JUMPOUT(0x1985242DCLL);
              }
              JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v644, v401, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
              JSC::DFG::LazyNode::LazyNode(&v643, a2);
              if (v644 == 36 && (v645 & 0x3FFF) != 2)
              {
                __break(0xC471u);
                JUMPOUT(0x198523218);
              }
              return;
            case 10:
              if (BYTE2(v400) > 1u)
                goto LABEL_327;
LABEL_1158:
              v44 = *a3;
              v43 = 16403;
              goto LABEL_57;
            default:
              goto LABEL_327;
          }
        }
        if (BYTE2(v400) <= 1u)
        {
          LOBYTE(v398) = 2;
          while (v398 != 1)
            LOBYTE(v398) = 1;
          LOBYTE(v398) = 2;
          while (v398 != 1)
            LOBYTE(v398) = 1;
          v402 = *((_DWORD *)a2 + 6);
          v403 = *((_DWORD *)this + 41);
          if (v403 <= v402)
          {
            __break(0xC471u);
            JUMPOUT(0x198524244);
          }
          if (v403 <= v402 + 1)
          {
            __break(0xC471u);
            JUMPOUT(0x198522FC8);
          }
          return;
        }
      }
      goto LABEL_327;
    case 0x18A:
      v142 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000;
      v143 = 16411;
      goto LABEL_349;
    case 0x18B:
      v175 = 2;
      while (1)
      {
        v176 = v175 & 3;
        if (v176 == 1)
          break;
        if (v176 == 2)
          v177 = 1;
        else
          v177 = 3;
        if (v176 == 3)
          v175 = 1;
        else
          v175 = v177;
      }
      return;
    case 0x18C:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
        v372 = 16413;
      else
        v372 = 16414;
      v33 = &v615;
      goto LABEL_1057;
    case 0x18D:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
        v371 = 16413;
      else
        v371 = 16414;
      v33 = &v614;
      goto LABEL_1057;
    case 0x18E:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
        v411 = 16413;
      else
        v411 = 16414;
      v33 = &v613;
      goto LABEL_1057;
    case 0x18F:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
        v379 = 16411;
      else
        v379 = 16412;
      v33 = &v612;
      goto LABEL_1057;
    case 0x190:
      if (*((_DWORD *)a2 + 18))
        v541 = 16412;
      else
        v541 = 16411;
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v610, 48, v541, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      JSC::DFG::LazyNode::LazyNode(&v609, a2);
      if (v610 == 36 && (v611 & 0x3FFF) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198523C5CLL);
      }
      return;
    case 0x191:
      if (*((_DWORD *)a2 + 18))
        v516 = 16412;
      else
        v516 = 16411;
      v33 = &v608;
      goto LABEL_1057;
    case 0x192:
      if (*((_DWORD *)a2 + 18))
        v548 = 16412;
      else
        v548 = 16411;
      v33 = &v607;
      goto LABEL_1057;
    case 0x193:
      if (*((_DWORD *)a2 + 18))
        v532 = 16412;
      else
        v532 = 16411;
      v33 = &v606;
      goto LABEL_1057;
    case 0x194:
      v275 = 2;
      while (1)
      {
        v276 = v275 & 3;
        if (v276 == 1)
          break;
        if (v276 == 2)
          v277 = 1;
        else
          v277 = 3;
        if (v276 == 3)
          v275 = 1;
        else
          v275 = v277;
      }
      return;
    case 0x195:
      v208 = *((_DWORD *)a2 + 6);
      v209 = *((_DWORD *)this + 41);
      if (v209 <= v208)
      {
        __break(0xC471u);
        JUMPOUT(0x198524224);
      }
      if (v209 <= v208 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19852422CLL);
      }
      v210 = 2;
      while (1)
      {
        v211 = v210 & 3;
        if (v211 == 1)
          break;
        if (v211 == 2)
          v212 = 1;
        else
          v212 = 3;
        if (v211 == 3)
          v210 = 1;
        else
          v210 = v212;
      }
      return;
    case 0x196:
      if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
        v39 = 16411;
      else
        v39 = 16412;
      goto LABEL_52;
    case 0x197:
      v142 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x88000000000000;
      v143 = 16415;
LABEL_349:
      if (v142)
        v43 = v143;
      else
        v43 = v143 + 1;
LABEL_56:
      v44 = *a3;
      goto LABEL_57;
    case 0x198:
      if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x2C000000000000)
      {
      }
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v604, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
      JSC::DFG::LazyNode::LazyNode(&v603, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
      if (v604 == 36 && (v605 & 0x3FFF) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x198523AB8);
      }
      return;
    case 0x199:
      v300 = *((_DWORD *)a2 + 6);
      v301 = *((_DWORD *)this + 41);
      if (v301 <= v300)
      {
        __break(0xC471u);
        JUMPOUT(0x19852424CLL);
      }
      if (v301 <= v300 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x198524254);
      }
      if (v301 <= v300 + 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19852425CLL);
      }
      if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * (v300 + 1)) & 0xFC000000000000) != 0x2C000000000000)
      {
      }
      v302 = 2;
      while (1)
      {
        v303 = v302 & 3;
        if (v303 == 1)
          break;
        if (v303 == 2)
          v304 = 1;
        else
          v304 = 3;
        if (v303 == 3)
          v302 = 1;
        else
          v302 = v304;
      }
      return;
    case 0x19E:
      goto LABEL_627;
    case 0x1A0:
      v285 = *(unsigned int **)(*((_QWORD *)a2 + 9) + 16);
      if (!v285)
        goto LABEL_327;
      v286 = v285[5];
      v287 = v285[6];
      v288 = (unsigned __int16)v285[5];
      v289 = (unsigned __int16)v285[6];
      v290 = v285[7];
      if (v288 != WORD1(v286))
      {
        v291 = WORD1(v286) == 0xFFFF && v288 == 0;
        v292 = (v286 << 15) | 0x25;
        if (v291)
          v293 = 16385;
        else
          v293 = v292;
      }
      if (v289 != WORD1(v287))
      {
        if (WORD1(v287) == 0xFFFF && v289 == 0)
          v295 = 16387;
        else
          v295 = (v287 << 15) | 0x25;
      }
      if ((_WORD)v290)
      {
        if (v290 < 0xFFFF0000 || (unsigned __int16)v290 != 0xFFFF)
          goto LABEL_741;
      }
      else if (v290 <= 0xFFFEFFFF)
      {
LABEL_741:
        v33 = &v629;
        goto LABEL_1057;
      }
      return;
    case 0x1A1:
      v533 = *((_QWORD *)a2 + 9);
      v534 = *(unsigned int *)(v533 + 44);
      v535 = *(unsigned int *)(v533 + 48);
      v536 = (unsigned __int16)*(_DWORD *)(v533 + 44);
      if (v536 != WORD1(v534))
      {
        v537 = WORD1(v534) == 0xFFFF && v536 == 0;
        v538 = (v534 << 15) | 0x25;
        if (v537)
          v539 = 16385;
        else
          v539 = v538;
      }
      if ((unsigned __int16)v535 == WORD1(v535))
        return;
      if ((_WORD)v535)
        v540 = 0;
      else
        v540 = WORD1(v535) == 0xFFFF;
      if (v540)
      {
        v40 = *a4;
        v39 = 16387;
      }
      else
      {
        v39 = (v535 << 15) | 0x25;
LABEL_52:
        v40 = *a4;
      }
      goto LABEL_53;
    case 0x1AB:
    case 0x1AC:
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
        goto LABEL_1164;
      v441 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
      JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v601, v441, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
      JSC::DFG::LazyNode::LazyNode(&v600, a2);
      if (v601 == 36 && (v602 & 0x3FFF) != 2)
      {
        __break(0xC471u);
        JUMPOUT(0x19852338CLL);
      }
      return;
    case 0x1AD:
      if ((*((_BYTE *)a2 + 74) & 1) != 0)
LABEL_1164:
LABEL_1152:
      v40 = *a4;
      v39 = 16406;
      goto LABEL_53;
    case 0x1AE:
    case 0x1AF:
      v315 = 2;
      while (1)
      {
        v316 = v315 & 3;
        if (v316 == 1)
          break;
        if (v316 == 2)
          v317 = 1;
        else
          v317 = 3;
        if (v316 == 3)
          v315 = 1;
        else
          v315 = v317;
      }
      return;
    case 0x1B0:
      v40 = *a4;
      v39 = 16410;
      goto LABEL_53;
    case 0x1B1:
      __break(0xC471u);
      JUMPOUT(0x198523B6CLL);
    default:
      v616 = (WTF *)JSC::DFG::Graph::opName(v14);
      v617 = v523;
      WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v616, &v599);
      if (v599)
        v524 = (const char *)(v599 + 16);
      else
        v524 = 0;
      JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v524);
      WTF::CString::~CString((WTF::CString *)&v599, v525, v526, v527, v528, v529, v530, v531);
      __break(0xC471u);
      JUMPOUT(0x198523B2CLL);
  }
}

uint64_t **JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>::operator()(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((a2 & 0x3FFF) == 2)
  {
    if ((a2 & 0x4000) != 0)
    v14 = a2 >> 15;
    v15 = (unint64_t)a2 >> 15;
    v16 = result[2][1];
    v17 = (unint64_t)(a2 >> 15) >> 32;
    if ((_DWORD)v17 == 1)
    {
      if ((v15 & 0x80000000) != 0)
      {
        if (*((_DWORD *)*result + 15))
        {
          if (~((unint64_t)a2 >> 15) >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*result)[6]
                                                                                                + 92))
            return result;
LABEL_32:
          v19 = a2 >> 15;
LABEL_33:
          v18 = *(unsigned int *)(v16 + 12);
          if ((_DWORD)v18 == *(_DWORD *)(v16 + 8))
          {
            result = (uint64_t **)WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, (void *)(v18 + 1), (unint64_t)&v19, a4, a5, a6, a7, a8);
            *(_QWORD *)(*(_QWORD *)v16 + 8 * *(unsigned int *)(v16 + 12)) = *result;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v16 + 8 * v18) = v14;
          }
          ++*(_DWORD *)(v16 + 12);
          return result;
        }
        goto LABEL_46;
      }
    }
    else if (!(_DWORD)v17 && v15 >= 5)
    {
      if (*((_DWORD *)*result + 15))
      {
        if ((v14 - 5) >= (unint64_t)*(unsigned int *)(*(_QWORD *)(*result)[6] + 88))
          return result;
        goto LABEL_32;
      }
LABEL_46:
      __break(0xC471u);
      JUMPOUT(0x198524E78);
    }
    v19 = a2 >> 15;
    if ((unint64_t)a2 >> 47 != 2 && v15 < 5)
      return result;
    goto LABEL_33;
  }
  if (a2 == 16386)
  LOWORD(v8) = a2;
  while (1)
  {
    v9 = v8 & 0x3FFF;
    if (v9 == 1)
      break;
    if (v9 == 2)
      v10 = 16385;
    else
      v10 = 16387;
    if ((v8 & 0x4000) != 0)
      v8 = v10;
    else
      v8 = v9 | 0x4000u;
    if (v9 == 40)
      v8 = 16385;
    if (v9 == 3)
      v8 = 16385;
    if (v8 == 16386)
  }
  LOWORD(v11) = 16386;
  while (1)
  {
    v12 = v11 & 0x3FFF;
    if (v12 == 1)
      break;
    if (v12 == 2)
      v13 = 16385;
    else
      v13 = 16387;
    if (v12 == 3)
      v11 = 16385;
    else
      v11 = v13;
    if (v11 == a2)
  }
  return result;
}

_QWORD *JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&)::{lambda(void)#1}>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>> const&)::{lambda(void)#1} const&)::{lambda(void)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

}

_QWORD *JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>>::operator()(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  if ((a2 & 0x3FFF) == 2)
  {
    if ((a2 & 0x4000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1985250ACLL);
    }
    v14 = a2 >> 15;
    v15 = (unint64_t)a2 >> 15;
    v16 = (uint64_t *)result[3];
    v17 = *v16;
    v18 = v16[1];
    v19 = (unint64_t)(a2 >> 15) >> 32;
    if ((_DWORD)v19 == 1)
    {
      if ((v15 & 0x80000000) != 0)
      {
        if (!*(_DWORD *)(*result + 60))
        {
          __break(0xC471u);
          JUMPOUT(0x1985250D4);
        }
        if (~((unint64_t)a2 >> 15) >= (unint64_t)*(unsigned int *)(**(_QWORD **)(*result + 48)
                                                                                              + 92))
          return result;
LABEL_32:
        v22 = a2 >> 15;
LABEL_33:
        v20 = *(unsigned __int16 *)(*(_QWORD *)v17 + 18);
        if ((v20 - 17) >= 2 && (v20 - 99) >= 2)
        {
          __break(0xC471u);
          JUMPOUT(0x1985250CCLL);
        }
        v21 = *(unsigned int *)(v18 + 12);
        if ((_DWORD)v21 == *(_DWORD *)(v18 + 8))
        {
          result = (_QWORD *)WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18, (void *)(v21 + 1), (unint64_t)&v22, a4, a5, a6, a7, a8);
          *(_QWORD *)(*(_QWORD *)v18 + 8 * *(unsigned int *)(v18 + 12)) = *result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v18 + 8 * v21) = v14;
        }
        ++*(_DWORD *)(v18 + 12);
        return result;
      }
    }
    else if (!(_DWORD)v19 && v15 >= 5)
    {
      if (!*(_DWORD *)(*result + 60))
      {
LABEL_51:
        __break(0xC471u);
        JUMPOUT(0x198524F48);
      }
      if ((v14 - 5) >= (unint64_t)*(unsigned int *)(**(_QWORD **)(*result + 48) + 88))
        return result;
      goto LABEL_32;
    }
    v22 = a2 >> 15;
    if ((unint64_t)a2 >> 47 != 2 && v15 < 5)
      return result;
    goto LABEL_33;
  }
  if (a2 == 16386)
    goto LABEL_51;
  LOWORD(v8) = a2;
  while (1)
  {
    v9 = v8 & 0x3FFF;
    if (v9 == 1)
      break;
    if (v9 == 2)
      v10 = 16385;
    else
      v10 = 16387;
    if ((v8 & 0x4000) != 0)
      v8 = v10;
    else
      v8 = v9 | 0x4000u;
    if (v9 == 40)
      v8 = 16385;
    if (v9 == 3)
      v8 = 16385;
    if (v8 == 16386)
      goto LABEL_51;
  }
  LOWORD(v11) = 16386;
  while (1)
  {
    v12 = v11 & 0x3FFF;
    if (v12 == 1)
      return result;
    if (v12 == 2)
      v13 = 16385;
    else
      v13 = 16387;
    if (v12 == 3)
      v11 = 16385;
    else
      v11 = v13;
    if (v11 == a2)
      goto LABEL_51;
  }
}

uint64_t **JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>::readTop(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  BOOL v30;
  _QWORD *v31;
  BOOL v32;
  int v33;
  unsigned int *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37[2];
  uint64_t *v38[2];
  uint64_t **v39;
  uint64_t **v40;

  v8 = result;
  v39 = result;
  v40 = result;
  v38[0] = (uint64_t *)&v40;
  v38[1] = (uint64_t *)&v39;
  v37[0] = (uint64_t *)result;
  v37[1] = (uint64_t *)v38;
  v9 = (unint64_t)result[1];
  v10 = *(unsigned __int16 *)(v9 + 18);
  if (v10 > 0x15A)
  {
    if (*(unsigned __int16 *)(v9 + 18) <= 0x162u)
    {
      if (v10 == 347 || (v10 - 353) < 2)
        goto LABEL_32;
      if (v10 != 348)
    }
    else
    {
      if (v10 == 358)
      {
        v19 = (_QWORD *)(*(_QWORD *)v9 & 0xFFFFFFFF8);
        if ((*(_QWORD *)v9 & 1) != 0)
          v19 = (_QWORD *)*v19;
        v20 = *(_DWORD *)(v9 + 72);
        if (v19)
        {
          v36 = v19;
          v34 = (unsigned int *)*v19;
          if (v34 && *v34 > v20)
          {
            v35 = v20 + (HIDWORD(v36[3]) & 0xFFFFF | ((int)(v36[3] >> 28) >> 24 << 20)) + 5;
          }
          v21 = v8[2];
          v22 = (HIDWORD(v36[3]) & 0xFFFFF | ((int)(v36[3] >> 28) >> 24 << 20)) + 4;
        }
        else
        {
          if (v20 >= *(_DWORD *)((*result)[4] + 28))
            return result;
          v21 = result[2];
          v22 = v20 + 5;
        }
      }
      if (v10 == 372)
        goto LABEL_25;
      if (v10 != 355)
    }
    if ((*(_DWORD *)((*result)[3] + 16) & 0xFFFFFFFE) == 4)
      return result;
LABEL_32:
    v12 = v10 - 245;
    v13 = (v10 - 245) > 7 || ((1 << (v10 + 11)) & 0xCF) == 0;
    if (v13 && (v10 - 96) >= 5 && (v10 - 371) > 1)
      goto LABEL_39;
    if (v10 <= 98)
    {
      if ((v10 - 96) >= 3)
        goto LABEL_99;
      v18 = (_QWORD *)(v9 + 24);
    }
    else
    {
      if ((v10 - 99) < 2)
      {
        v18 = (_QWORD *)(v9 + 32);
        goto LABEL_57;
      }
      v30 = v12 > 7 || ((1 << (v10 + 11)) & 0xCF) == 0;
      if (v30 && (v10 - 371) >= 2)
      {
LABEL_99:
        __break(0xC471u);
        JUMPOUT(0x1985254A8);
      }
      v18 = (_QWORD *)(v9 + 40);
    }
LABEL_57:
    if ((*v18 & 0xFF00FFFFFFFFFFFFLL) == 0)
    {
LABEL_39:
      v14 = *(_QWORD *)v9;
LABEL_40:
      v15 = (_QWORD *)(v14 & 0xFFFFFFFF8);
      if ((v14 & 1) != 0)
        v15 = (_QWORD *)*v15;
      if ((v10 & 0xFFFE) == 0x60)
        v16 = *(_DWORD *)(v9 + 72);
      else
        v16 = 0;
      result = v39;
      v17 = v15;
    }
    if (v10 <= 98)
    {
      if ((v10 - 96) < 3)
      {
        v23 = (_QWORD *)(v9 + 24);
        goto LABEL_79;
      }
    }
    else
    {
      if ((v10 - 99) < 2)
      {
        v23 = (_QWORD *)(v9 + 32);
LABEL_79:
        v14 = *(_QWORD *)(*v23 & 0xFF00FFFFFFFFFFFFLL);
        goto LABEL_40;
      }
      if (v12 <= 7 && ((1 << (v10 + 11)) & 0xCF) != 0 || (v10 - 371) < 2)
      {
        v23 = (_QWORD *)(v9 + 40);
        goto LABEL_79;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1985254D4);
  }
  if (*(unsigned __int16 *)(v9 + 18) <= 0x106u)
  {
    if (*(unsigned __int16 *)(v9 + 18) > 0xF5u)
    {
      if (v10 != 252 && v10 != 246 && v10 != 248)
      v9 = (unint64_t)v8[1];
      v10 = *(unsigned __int16 *)(v9 + 18);
    }
    else
    {
      if ((v10 - 96) < 2)
        goto LABEL_32;
      if (v10 != 100)
    }
LABEL_25:
    v11 = (v10 - 245) > 7 || ((1 << (v10 + 11)) & 0xCF) == 0;
    if (v11 && (v10 - 96) >= 5 && (v10 - 371) > 1)
      goto LABEL_32;
    if (v10 <= 98)
    {
      if ((v10 - 96) >= 3)
        goto LABEL_105;
      v31 = (_QWORD *)(v9 + 24);
    }
    else
    {
      if ((v10 - 99) < 2)
      {
        v31 = (_QWORD *)(v9 + 32);
        goto LABEL_89;
      }
      v32 = (v10 - 245) > 7 || ((1 << (v10 + 11)) & 0xCF) == 0;
      if (v32 && (v10 - 371) >= 2)
      {
LABEL_105:
        __break(0xC471u);
        JUMPOUT(0x198525538);
      }
      v31 = (_QWORD *)(v9 + 40);
    }
LABEL_89:
    if ((*v31 & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      if (*(_WORD *)((*(_QWORD *)JSC::DFG::Node::argumentsChild((JSC::DFG::Node *)v9) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 351
        || *(_WORD *)((*(_QWORD *)JSC::DFG::Node::argumentsChild((JSC::DFG::Node *)v8[1]) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
      {
        v33 = *(unsigned __int16 *)((*(_QWORD *)JSC::DFG::Node::argumentsChild((JSC::DFG::Node *)v8[1]) & 0xFF00FFFFFFFFFFFFLL)
                                  + 0x12);
        v9 = *(_QWORD *)JSC::DFG::Node::argumentsChild((JSC::DFG::Node *)v8[1]) & 0xFF00FFFFFFFFFFFFLL;
        if (v33 != 351)
      }
      v9 = (unint64_t)v8[1];
      v10 = *(unsigned __int16 *)(v9 + 18);
    }
    goto LABEL_32;
  }
  if ((v10 - 275) < 2)
    goto LABEL_32;
  if (v10 != 277)
  {
    if (v10 == 263)
  }
  v24 = *(_QWORD *)(v9 + 24) & 0xFF00FFFFFFFFFFFFLL;
  v25 = *(unsigned __int16 *)(v24 + 0x12);
  if (v25 <= 0x15B)
  {
    v26 = v25 - 278;
    v27 = v26 > 0xC;
    v28 = (1 << v26) & 0x15F1;
    if (!v27 && v28 != 0)
      goto LABEL_66;
  }
  if (v25 == 355 || v25 - 348 < 4)
  {
LABEL_66:
    v17 = (_QWORD *)(*(_QWORD *)v24 & 0xFFFFFFFF8);
    if ((*(_QWORD *)v24 & 1) != 0)
      v17 = (_QWORD *)*v17;
    v16 = *(_DWORD *)(v24 + 72);
  }
  if (v25 != 352)
  return result;
}

uint64_t JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>::readTop(void)::{lambda(JSC::DFG::Node *)#1}::operator()(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD **v15;
  unsigned int v16;
  char v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v9 = result;
  v10 = *(_QWORD *)(*(_QWORD *)result + 32);
  if ((*(_BYTE *)(*(_QWORD *)(v10 + 64) + 68) & 1) == 0)
  {
    v25 = *(_DWORD *)(v10 + 28);
    if (v25)
    {
      v26 = v25 - 1;
      do
      {
        v27 = *(_QWORD *)(v9 + 16);
        v39 = (v26 + 5) | ((unint64_t)((v26 + 5) >> 31) << 32);
        if (v26 < 0xFFFFFFFB)
        {
          v28 = *(_QWORD *)(v27 + 8);
          v29 = *(unsigned int *)(v28 + 12);
          if ((_DWORD)v29 == *(_DWORD *)(v28 + 8))
          {
            result = WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28, (void *)(v29 + 1), (unint64_t)&v39, a4, a5, a6, a7, a8);
            *(_QWORD *)(*(_QWORD *)v28 + 8 * *(unsigned int *)(v28 + 12)) = *(_QWORD *)result;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v28 + 8 * v29) = (v26 + 5) | ((unint64_t)((v26 + 5) >> 31) << 32);
          }
          ++*(_DWORD *)(v28 + 12);
        }
      }
      while (v26--);
    }
  }
  v11 = (_DWORD *)(*a2 & 0xFFFFFFFF8);
  if ((*a2 & 1) != 0)
    v11 = *(_DWORD **)v11;
  while (v11)
  {
    if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 64) + 68) & 1) == 0)
    {
      if (*(_QWORD *)v11)
      {
        v19 = **(_DWORD **)v11;
        if (v19)
        {
          v20 = v19 + 4;
          do
          {
            v21 = *(_QWORD *)(v9 + 16);
            v22 = v20
                + (HIDWORD(*((_QWORD *)v11 + 3)) & 0xFFFFF | ((int)(*((_QWORD *)v11 + 3) >> 28) >> 24 << 20));
            v39 = v22 | ((unint64_t)(v22 >> 31) << 32);
            if (v22 >= 5)
            {
              v23 = *(_QWORD *)(v21 + 8);
              v24 = *(unsigned int *)(v23 + 12);
              if ((_DWORD)v24 == *(_DWORD *)(v23 + 8))
              {
                result = WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v23, (void *)(v24 + 1), (unint64_t)&v39, a4, a5, a6, a7, a8);
                *(_QWORD *)(*(_QWORD *)v23 + 8 * *(unsigned int *)(v23 + 12)) = *(_QWORD *)result;
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)v23 + 8 * v24) = v22 | ((unint64_t)(v22 >> 31) << 32);
              }
              ++*(_DWORD *)(v23 + 12);
            }
            --v20;
          }
          while (v20 != 4);
        }
      }
    }
    v12 = *((_QWORD *)v11 + 3);
    if ((v11[8] & 1) != 0)
    {
      v31 = *(_QWORD *)(v9 + 16);
      v32 = (HIDWORD(v12) & 0xFFFFF | ((int)(v12 >> 28) >> 24 << 20)) + 3;
      v39 = v32 | ((unint64_t)(v32 >> 31) << 32);
      if (v32 >= 5)
      {
        v33 = *(_QWORD *)(v31 + 8);
        v34 = *(unsigned int *)(v33 + 12);
        if ((_DWORD)v34 == *(_DWORD *)(v33 + 8))
        {
          result = WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v33, (void *)(v34 + 1), (unint64_t)&v39, a4, a5, a6, a7, a8);
          *(_QWORD *)(*(_QWORD *)v33 + 8 * *(unsigned int *)(v33 + 12)) = *(_QWORD *)result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v33 + 8 * v34) = v32 | ((unint64_t)(v32 >> 31) << 32);
        }
        ++*(_DWORD *)(v33 + 12);
        v12 = *((_QWORD *)v11 + 3);
      }
    }
    if ((v12 >> 60) - 3 <= 2)
    {
      v35 = *(_QWORD *)(v9 + 16);
      v36 = (HIDWORD(v12) & 0xFFFFF | ((int)(v12 >> 28) >> 24 << 20)) + 4;
      v39 = v36 | ((unint64_t)(v36 >> 31) << 32);
      if (v36 >= 5)
      {
        v37 = *(_QWORD *)(v35 + 8);
        v38 = *(unsigned int *)(v37 + 12);
        if ((_DWORD)v38 == *(_DWORD *)(v37 + 8))
        {
          result = WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, (void *)(v38 + 1), (unint64_t)&v39, a4, a5, a6, a7, a8);
          *(_QWORD *)(*(_QWORD *)v37 + 8 * *(unsigned int *)(v37 + 12)) = *(_QWORD *)result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v37 + 8 * v38) = v36 | ((unint64_t)(v36 >> 31) << 32);
        }
        ++*(_DWORD *)(v37 + 12);
      }
    }
    do
    {
      v13 = *((_QWORD *)v11 + 2);
      v14 = *((_QWORD *)v11 + 3) >> 60;
      v15 = (_DWORD **)(v13 & 0xFFFFFFFF8);
      v11 = (_DWORD *)(v13 & 0xFFFFFFFF8);
      if ((v13 & 1) != 0)
        v11 = *v15;
      v16 = (v14 < 0xC) & (0x824u >> v14);
      if (v11)
        v17 = v16;
      else
        v17 = 0;
    }
    while ((v17 & 1) != 0);
    if ((v13 & 1) != 0)
      v18 = v16;
    else
      v18 = 1;
    if (v16)
      v11 = 0;
    else
      v11 = v15;
    if ((v18 & 1) == 0)
      v11 = *v15;
  }
  return result;
}

uint64_t **JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>::readTop(void)::{lambda(JSC::DFG::Node *)#3}::operator()(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;

  v8 = *(_DWORD *)(a2 + 32);
  if (v8)
  {
    v10 = result;
    v11 = 0;
    v12 = *result;
    v13 = *(uint64_t **)(a2 + 72);
    do
    {
      v14 = (unint64_t *)(2 * *v13);
      if (*v13 < 0)
        v15 = 63;
      else
        v15 = *v14;
      if (v15 > v11)
      {
        v16 = (uint64_t *)(v14 + 1);
        v17 = *v13 >= 0 ? v16 : v13;
        if (((*(unint64_t *)((char *)v17 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
        {
          v18 = *v12;
          v19 = v11 + *(_QWORD *)(a2 + 24);
          if (*(_DWORD *)(*v12 + 164) <= v19)
          {
            __break(0xC471u);
            return result;
          }
          if (*(_WORD *)((*(_QWORD *)(*(_QWORD *)(v18 + 152) + 8 * v19) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
          {
            v8 = *(_DWORD *)(a2 + 32);
          }
        }
      }
      ++v11;
    }
    while (v11 < v8);
  }
  return result;
}

uint64_t **JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>::readTop(void)::{lambda(JSC::DFG::Node *)#2}::operator()(uint64_t **result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  _QWORD *v14;

  v8 = a2[3] & 0xFF00FFFFFFFFFFFFLL;
  v9 = *(unsigned __int16 *)(v8 + 0x12);
  if (v9 <= 0x15B)
  {
    v10 = v9 - 278;
    v11 = v10 > 0xC;
    v12 = (1 << v10) & 0x15F1;
    if (!v11 && v12 != 0)
      goto LABEL_6;
  }
  if (v9 != 355 && v9 - 348 >= 4)
  {
    if (v9 == 352)
      return result;
  }
LABEL_6:
  v14 = (_QWORD *)(*(_QWORD *)v8 & 0xFFFFFFFF8);
  if ((*(_QWORD *)v8 & 1) != 0)
    v14 = (_QWORD *)*v14;
}

uint64_t JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#2},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#1}>::readTop(void)::{lambda(JSC::InlineCallFrame *,unsigned int)#1}::operator()(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t *v9;
  unsigned int *v11;
  unint64_t v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v8 = a3;
  v9 = (unint64_t *)result;
  if (a2)
  {
    v11 = *(unsigned int **)a2;
    if (*(_QWORD *)a2)
    {
      do
      {
        if (*v11 <= v8)
          break;
        v12 = v9[2];
        v13 = v8 + (HIDWORD(*(_QWORD *)(a2 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(a2 + 24) >> 28) >> 24 << 20));
        v14 = __CFADD__(v13, 5);
        v15 = (v13 + 5) | ((unint64_t)((v13 + 5) >> 31) << 32);
        v29 = v15;
        if (!v14)
        {
          v16 = *(_QWORD *)(v12 + 8);
          v17 = *(unsigned int *)(v16 + 12);
          if ((_DWORD)v17 == *(_DWORD *)(v16 + 8))
          {
            result = WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, (void *)(v17 + 1), (unint64_t)&v29, a4, a5, a6, a7, a8);
            v17 = *(unsigned int *)(v16 + 12);
            v18 = *(_QWORD *)v16;
            v15 = *(_QWORD *)result;
          }
          else
          {
            v18 = *(_QWORD *)v16;
          }
          *(_QWORD *)(v18 + 8 * v17) = v15;
          ++*(_DWORD *)(v16 + 12);
          v11 = *(unsigned int **)a2;
        }
        ++v8;
      }
      while (v11);
    }
    v19 = *(_QWORD *)(a2 + 24);
    if ((v19 >> 60) - 3 < 3)
    {
      v20 = v9[2];
      v21 = (HIDWORD(v19) & 0xFFFFF | ((int)(v19 >> 28) >> 24 << 20)) + 4;
      v29 = v21 | ((unint64_t)(v21 >> 31) << 32);
      if (v21 >= 5)
      {
        v22 = *(_QWORD *)(v20 + 8);
        v23 = *(unsigned int *)(v22 + 12);
        if ((_DWORD)v23 == *(_DWORD *)(v22 + 8))
        {
          result = WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v22, (void *)(v23 + 1), (unint64_t)&v29, a4, a5, a6, a7, a8);
          *(_QWORD *)(*(_QWORD *)v22 + 8 * *(unsigned int *)(v22 + 12)) = *(_QWORD *)result;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)v22 + 8 * v23) = v21 | ((unint64_t)(v21 >> 31) << 32);
        }
        ++*(_DWORD *)(v22 + 12);
      }
    }
  }
  else
  {
    v24 = *(_QWORD *)result;
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 32) + 28) > a3)
    {
      v25 = a3;
      do
      {
        v26 = v9[2];
        v29 = (v25 + 5) | ((unint64_t)((v25 + 5) >> 31) << 32);
        if (v25 <= 0xFFFFFFFA)
        {
          v27 = *(_QWORD *)(v26 + 8);
          v28 = *(unsigned int *)(v27 + 12);
          if ((_DWORD)v28 == *(_DWORD *)(v27 + 8))
          {
            result = WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27, (void *)(v28 + 1), (unint64_t)&v29, a4, a5, a6, a7, a8);
            *(_QWORD *)(*(_QWORD *)v27 + 8 * *(unsigned int *)(v27 + 12)) = *(_QWORD *)result;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)v27 + 8 * v28) = (v25 + 5) | ((unint64_t)((v25 + 5) >> 31) << 32);
          }
          ++*(_DWORD *)(v27 + 12);
          v24 = *v9;
        }
        ++v25;
      }
      while (v25 < *(unsigned int *)(*(_QWORD *)(v24 + 32) + 28));
    }
  }
  return result;
}

_QWORD *JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#1}::operator()(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a2;
  if (a2 >= 5)
  {
    v8 = result[1];
    v9 = *(unsigned int *)(v8 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(v8 + 8))
    {
      result = (_QWORD *)WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result[1], (void *)(v9 + 1), (unint64_t)&v10, a4, a5, a6, a7, a8);
      *(_QWORD *)(*(_QWORD *)v8 + 8 * *(unsigned int *)(v8 + 12)) = *result;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = a2;
    }
    ++*(_DWORD *)(v8 + 12);
  }
  return result;
}

uint64_t WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 5)
  {
    v16 = (_QWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 4;
    goto LABEL_12;
  }
  if (!(v14 >> 29))
  {
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = 8 * v15;
      v18 = (uint64_t *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 8;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::Operand,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 5)
    {
      v15 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (v11 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v14)
    {
      v16 = 8 * v14;
      v17 = (uint64_t *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 8;
      }
      while (v16);
    }
    if (a1 + 16 != v13 && v13)
    {
      if (*(_QWORD *)a1 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,void JSC::DFG::clobberize<JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>>>(JSC::DFG::Graph &,JSC::DFG::Node *,JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&,JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&,JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#3},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand)#4},JSC::DFG::`anonymous namespace'::PutStackSinkingPhase::run(void)::{lambda(JSC::Operand,JSC::DFG::LazyNode)#2}>> const&)::{lambda(void)#1}>(JSC::DFG::Graph *this, JSC::DFG::Node *a2, _QWORD ****a3, _QWORD **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  unint64_t v20;
  char *v21;
  char v22;
  int v23;
  char v24;
  unint64_t v25;
  char v26;
  int v27;
  char v28;
  int v29;
  char v30;
  int v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  int v43;
  char v44;
  char v45;
  int v46;
  char v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  char v55;
  int v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  char v63;
  unsigned int v64;
  unsigned int v65;
  char v66;
  int v67;
  char v68;
  char v69;
  int v70;
  char v71;
  char v72;
  int v73;
  char v74;
  char v75;
  int v76;
  char v77;
  char v78;
  int v79;
  char v80;
  uint64_t v81;
  unsigned int v82;
  char v83;
  int v84;
  char v85;
  char v86;
  int v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  int v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  char v108;
  int v109;
  char v110;
  char v111;
  int v112;
  char v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  char v118;
  int v119;
  char v120;
  uint64_t v121;
  char v122;
  int v123;
  char v124;
  char v125;
  int v126;
  char v127;
  BOOL v128;
  uint64_t v129;
  char v130;
  int v131;
  char v132;
  char v133;
  int v134;
  char v135;
  char v136;
  int v137;
  char v138;
  char v139;
  int v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  _BOOL4 v148;
  int v149;
  char v150;
  int v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  int v156;
  char v157;
  char v158;
  int v159;
  char v160;
  char v161;
  int v162;
  char v163;
  char v164;
  int v165;
  char v166;
  char v167;
  int v168;
  char v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unsigned int v194;
  unsigned int v195;
  char v196;
  int v197;
  char v198;
  char v199;
  int v200;
  char v201;
  char v202;
  int v203;
  char v204;
  char v205;
  int v206;
  char v207;
  char v208;
  int v209;
  char v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  int v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD ***v220;
  uint64_t v221;
  char v222;
  int v223;
  char v224;
  char v225;
  int v226;
  char v227;
  char v228;
  int v229;
  char v230;
  _DWORD *v231;
  int v232;
  int v233;
  unsigned int *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char v238;
  int v239;
  char v240;
  char v241;
  int v242;
  char v243;
  char v244;
  int v245;
  char v246;
  char v247;
  int v248;
  char v249;
  char v250;
  int v251;
  char v252;
  int v253;
  char v254;
  int v255;
  char v256;
  char v257;
  int v258;
  char v259;
  int v260;
  char v261;
  int v262;
  char v263;
  char v264;
  int v265;
  char v266;
  char v267;
  int v268;
  char v269;
  char v270;
  int v271;
  char v272;
  char v273;
  int v274;
  char v275;
  char v276;
  int v277;
  char v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int *v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  unsigned int v287;
  BOOL v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v292;
  char v294;
  int v295;
  char v296;
  unsigned int v297;
  unsigned int v298;
  char v299;
  int v300;
  char v301;
  char v302;
  int v303;
  char v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  int v309;
  char v310;
  char v311;
  int v312;
  char v313;
  char v314;
  int v315;
  char v316;
  uint64_t v317;
  char v318;
  int v319;
  char v320;
  unsigned int *v321;
  uint64_t v322;
  unsigned int v323;
  unsigned int v324;
  WTF *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  _DWORD *v337;
  int v338;
  int v339;
  uint64_t v340;
  unsigned int v341;
  char v342;
  int v343;
  char v344;
  int v345;
  int v346;
  unsigned int v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int v356;
  BOOL v357;
  uint64_t v358;
  uint64_t v359;
  _DWORD *v360;
  _QWORD *v361;
  int v362;
  BOOL v363;
  int v364;
  BOOL v365;
  unint64_t v366;
  unsigned int v367;
  unsigned int v368;
  _QWORD *v369;
  _QWORD *v370;
  _QWORD *v371;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  _QWORD *v375;
  _QWORD *v376;
  _QWORD *v377;
  _QWORD *v378;
  _QWORD *v379;
  _QWORD *v380;
  _QWORD *v381;
  _QWORD *v382;
  _QWORD *v383;
  int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  uint64_t v389;
  _QWORD ***v390;
  uint64_t v391;
  _QWORD ***v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int v401;
  BOOL v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t *v406;
  uint64_t v407;
  unsigned int v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  const char *v412;
  void *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unsigned int v420;
  char v421;
  uint64_t v422;
  int v423;
  char v424;
  int v425;
  char v426;
  int v427;
  int v428;
  int v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  int v436;
  uint64_t v437;
  char v438;
  char v439;
  char v440;
  uint64_t v441;
  int v442;
  uint64_t v443;
  char v444;
  WTF *v445;
  uint64_t v446;
  uint64_t v447;
  char v448;
  char v449;
  char v450;
  char v451;
  uint64_t v452;
  uint64_t v453;
  char v454;
  char v455;
  char v456;
  char v457;
  char v458;
  char v459;
  char v460;
  uint64_t v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  char v468;
  uint64_t v469;
  char v470;
  char v471;
  char v472;
  char v473;
  uint64_t v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  uint64_t v479;
  _QWORD v480[3];

  v13 = *(_QWORD *)a2 & 0xFFFFFFFF8;
  if ((*(_QWORD *)a2 & 1) != 0)
    v13 = *(_QWORD *)v13;
  while (v13)
  {
    v15 = *(_QWORD *)(v13 + 24);
    if ((*(_BYTE *)(v13 + 32) & 1) != 0)
    {
      v20 = (HIDWORD(v15) & 0xFFFFF | ((int)(v15 >> 28) >> 24 << 20)) + 3;
      v15 = *(_QWORD *)(v13 + 24);
    }
    if ((v15 >> 60) - 3 <= 2)
    {
      v25 = (HIDWORD(v15) & 0xFFFFF | ((int)(v15 >> 28) >> 24 << 20)) + 4;
    }
    v16 = *(_QWORD *)(v13 + 16);
    v13 = v16 & 0xFFFFFFFF8;
    if ((v16 & 1) != 0)
      v13 = *(_QWORD *)v13;
  }
  if (*((_BYTE *)this + 960))
  {
    v366 = *(unsigned int *)(*((_QWORD *)this + 4) + 48);
  }
  v480[0] = a5;
  v480[1] = a3;
  v480[2] = a4;
  if (*((int *)this + 238) <= 0 && JSC::DFG::Node::hasArrayMode(a2))
  {
    v367 = *((unsigned __int16 *)a2 + 9);
    if (v367 > 0xC9)
    {
      if (v367 - 202 > 0x3E || ((1 << (v367 + 54)) & 0x400000000E002FEFLL) == 0)
      {
        v368 = v367 - 333;
        if (v368 > 0x3A || ((1 << v368) & 0x7A8000000000003) == 0)
        {
LABEL_1352:
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0xBF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Unhandled ArrayMode opcode.");
          __break(0xC471u);
          JUMPOUT(0x198529C38);
        }
      }
      goto LABEL_257;
    }
    v421 = v367 - 101;
    if (v367 - 101 > 0x3E)
      goto LABEL_1351;
    if (((1 << v421) & 0x7E0070000000000FLL) != 0)
    {
LABEL_257:
      return;
    }
    if (((1 << v421) & 0x18000000000) == 0)
    {
LABEL_1351:
      if (v367 - 92 >= 2)
        goto LABEL_1352;
      goto LABEL_257;
    }
  }
  v14 = *((unsigned __int16 *)a2 + 9);
  if (v14 - 20 >= 8)
  {
    switch(*((_WORD *)a2 + 9))
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 0xB:
      case 0xC:
      case 0xE:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
      case 0x3A:
      case 0x3B:
      case 0x3C:
      case 0x3D:
      case 0x3E:
      case 0x43:
      case 0x45:
      case 0x47:
      case 0x48:
      case 0x4A:
      case 0x5B:
      case 0x86:
      case 0x94:
      case 0x95:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA9:
      case 0xB6:
      case 0xB7:
      case 0xB9:
      case 0xBB:
      case 0xBC:
      case 0xBD:
      case 0xBF:
      case 0xC0:
      case 0xE2:
      case 0xE3:
      case 0xE4:
      case 0xE5:
      case 0xEB:
      case 0xEC:
      case 0xEE:
      case 0xEF:
      case 0xF0:
      case 0x117:
      case 0x118:
      case 0x127:
      case 0x128:
      case 0x12A:
      case 0x12D:
      case 0x12E:
      case 0x12F:
      case 0x130:
      case 0x132:
      case 0x133:
      case 0x134:
      case 0x137:
      case 0x138:
      case 0x139:
      case 0x13A:
      case 0x148:
      case 0x149:
      case 0x14B:
      case 0x14C:
      case 0x153:
      case 0x154:
      case 0x16C:
      case 0x16D:
      case 0x16E:
      case 0x16F:
      case 0x170:
      case 0x175:
      case 0x17B:
      case 0x17C:
      case 0x183:
      case 0x188:
      case 0x189:
      case 0x19A:
      case 0x19C:
      case 0x19D:
      case 0x19F:
      case 0x1A2:
      case 0x1A3:
      case 0x1A4:
      case 0x1A5:
      case 0x1A6:
      case 0x1A7:
      case 0x1A8:
      case 0x1A9:
      case 0x1AA:
        return;
      case 6:
        v241 = 2;
        while (1)
        {
          v242 = v241 & 3;
          if (v242 == 1)
            break;
          if (v242 == 2)
            v243 = 1;
          else
            v243 = 3;
          if (v242 == 3)
            v241 = 1;
          else
            v241 = v243;
        }
        LOBYTE(v242) = 2;
        while (v242 != 1)
          LOBYTE(v242) = 1;
        LOBYTE(v242) = 2;
        while (v242 != 1)
          LOBYTE(v242) = 1;
        return;
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0x54:
      case 0x5E:
      case 0x5F:
      case 0x60:
      case 0x61:
      case 0x69:
      case 0x6A:
      case 0x6B:
      case 0x6C:
      case 0x6E:
      case 0x6F:
      case 0x70:
      case 0x71:
      case 0x72:
      case 0x73:
      case 0x74:
      case 0x75:
      case 0x76:
      case 0x77:
      case 0x78:
      case 0x79:
      case 0x7A:
      case 0x7B:
      case 0x7C:
      case 0x7D:
      case 0x7E:
      case 0x7F:
      case 0x80:
      case 0x81:
      case 0x82:
      case 0x83:
      case 0x8E:
      case 0x8F:
      case 0xA7:
      case 0xA8:
      case 0xB0:
      case 0xB1:
      case 0xC5:
      case 0xC6:
      case 0xC7:
      case 0xC8:
      case 0xC9:
      case 0xD4:
      case 0xD5:
      case 0xD8:
      case 0xF1:
      case 0xF2:
      case 0xF3:
      case 0xF4:
      case 0xF5:
      case 0xF6:
      case 0xF7:
      case 0xF8:
      case 0xF9:
      case 0xFA:
      case 0xFB:
      case 0xFC:
      case 0xFD:
      case 0xFE:
      case 0xFF:
      case 0x100:
      case 0x113:
      case 0x124:
      case 0x125:
      case 0x129:
      case 0x13B:
      case 0x13C:
      case 0x13D:
      case 0x140:
      case 0x141:
      case 0x147:
      case 0x14D:
      case 0x14E:
      case 0x14F:
      case 0x150:
      case 0x151:
      case 0x152:
      case 0x155:
      case 0x156:
      case 0x166:
      case 0x181:
      case 0x185:
      case 0x186:
      case 0x19B:
        goto LABEL_77;
      case 0xD:
        v211 = *((_QWORD *)a2 + 9);
        if (v211)
        {
          v324 = (HIDWORD(*(_QWORD *)(v211 + 24)) & 0xFFFFF | ((int)(*(_QWORD *)(v211 + 24) >> 28) >> 24 << 20)) + 4;
          v41 = ((unint64_t)v324 << 15) | ((unint64_t)(v324 >> 31) << 47) | 2;
        }
        else
        {
          v41 = 131074;
        }
        goto LABEL_73;
      case 0xF:
        v369 = (_QWORD *)*((_QWORD *)a2 + 9);
        v370 = v369;
        do
        {
          v371 = v370;
          v370 = (_QWORD *)*v370;
        }
        while (v370);
        if (v371 != v369)
          *v369 = v371;
        v372 = (_QWORD *)*((_QWORD *)a2 + 9);
        v373 = v372;
        do
        {
          v374 = v373;
          v373 = (_QWORD *)*v373;
        }
        while (v373);
        if (v374 != v372)
          *v372 = v374;
        v21 = &v470;
        goto LABEL_1088;
      case 0x10:
        v375 = (_QWORD *)*((_QWORD *)a2 + 9);
        v376 = v375;
        do
        {
          v377 = v376;
          v376 = (_QWORD *)*v376;
        }
        while (v376);
        if (v377 != v375)
          *v375 = v377;
        v378 = (_QWORD *)*((_QWORD *)a2 + 9);
        v379 = v378;
        do
        {
          v380 = v379;
          v379 = (_QWORD *)*v379;
        }
        while (v379);
        if (v380 != v378)
          *v378 = v380;
        JSC::DFG::LazyNode::LazyNode(&v469, (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL));
        return;
      case 0x11:
        JSC::DFG::LazyNode::LazyNode(&v467, (JSC::DFG::Node *)(*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL));
        return;
      case 0x12:
        v58 = *((_QWORD *)a2 + 9);
        v59 = 2;
        goto LABEL_131;
      case 0x13:
        v21 = &v468;
        goto LABEL_1088;
      case 0x1C:
        v381 = (_QWORD *)*((_QWORD *)a2 + 9);
        v382 = v381;
        do
        {
          v383 = v382;
          v382 = (_QWORD *)*v382;
        }
        while (v382);
        if (v383 != v381)
          *v381 = v383;
        v221 = (v383[3] << 15) | 2;
        v220 = *a3;
        goto LABEL_584;
      case 0x21:
        v39 = *((unsigned int *)a2 + 18);
        v40 = 35;
        goto LABEL_72;
      case 0x22:
        return;
      case 0x28:
        v17 = 2;
        while (1)
        {
          v18 = v17 & 3;
          if (v18 == 1)
            break;
          if (v18 == 2)
            v19 = 1;
          else
            v19 = 3;
          if (v18 == 3)
            v17 = 1;
          else
            v17 = v19;
        }
        return;
      case 0x29:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 26 >= 3)
          goto LABEL_257;
        return;
      case 0x2A:
      case 0x142:
      case 0x143:
        if ((*((_BYTE *)a2 + 30) & 0xFC) == 0)
          goto LABEL_257;
        return;
      case 0x2B:
      case 0x2D:
      case 0x2F:
      case 0x32:
      case 0x34:
      case 0x55:
      case 0x56:
      case 0x57:
      case 0x58:
      case 0x59:
      case 0x5A:
        v105 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        switch((_DWORD)v105)
        {
          case 0x1A:
            v218 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v219 = 0x68000000000000;
            break;
          case 0x1C:
            v218 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v219 = 0x70000000000000;
            break;
          case 0x1B:
            v218 = *((_QWORD *)a2 + 4) & 0xFC000000000000;
            v219 = 0x6C000000000000;
            break;
          default:
            goto LABEL_257;
        }
        if (v218 != v219)
          goto LABEL_257;
LABEL_583:
        v220 = *a3;
        v221 = 16385;
LABEL_584:
        goto LABEL_585;
      case 0x2C:
      case 0x2E:
      case 0x30:
      case 0x31:
      case 0x33:
      case 0x35:
        if ((*((_BYTE *)a2 + 30) & 0xFC) == 0 || (*((_BYTE *)a2 + 38) & 0xFC) == 0)
LABEL_77:
        return;
      case 0x3F:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 1 >= 2)
          goto LABEL_257;
        return;
      case 0x40:
      case 0x42:
      case 0x44:
        v50 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v50 == 49 || (_DWORD)v50 == 1 || (_DWORD)v50 == 52)
          return;
        if ((_DWORD)v50)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1EB, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x1985263B0);
        }
        goto LABEL_257;
      case 0x41:
        v212 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v212 != 49 && (_DWORD)v212 != 1 && (_DWORD)v212 != 52)
          goto LABEL_257;
        return;
      case 0x46:
        v281 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v281 != 49 && (_DWORD)v281 != 1)
          goto LABEL_257;
        return;
      case 0x49:
      case 0x4C:
      case 0x4D:
      case 0x4E:
      case 0x4F:
      case 0x50:
      case 0x51:
      case 0x131:
        v153 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
        v154 = 0xC4000000000000;
        goto LABEL_411;
      case 0x4B:
        return;
      case 0x52:
      case 0x53:
        v349 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (!(_DWORD)v349)
          goto LABEL_257;
        if (v349 > 0x34 || ((1 << v349) & 0x1200001C000002) == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x351, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198528C84);
        }
        return;
      case 0x5C:
      case 0x5D:
        v34 = *((_DWORD *)a2 + 18);
        if ((*((_DWORD *)a2 + 14) & 7u) >= 2)
        {
          switch(*((_DWORD *)a2 + 14) & 7)
          {
            case 3:
              v35 = 13;
              break;
            case 4:
              v35 = 17;
              break;
            case 5:
              v35 = 19;
              break;
            case 7:
              __break(0xC471u);
              JUMPOUT(0x198529D30);
            default:
              __break(0xC471u);
              JUMPOUT(0x198529D60);
          }
        }
        else
        {
          v35 = 21;
        }
        switch(*((_DWORD *)a2 + 18))
        {
          case 0u:
          case 1u:
          case 2u:
          case 4u:
          case 0x17u:
          case 0x18u:
            goto LABEL_257;
          case 3u:
            v136 = 2;
            while (1)
            {
              v137 = v136 & 3;
              if (v137 == 1)
                break;
              if (v137 == 2)
                v138 = 1;
              else
                v138 = 3;
              if (v137 == 3)
                v136 = 1;
              else
                v136 = v138;
            }
            return;
          case 5u:
            if (BYTE2(v34) - 3 <= 1)
              goto LABEL_257;
            return;
          case 6u:
            return;
          case 7u:
            if (BYTE2(v34) > 3u || BYTE2(v34) == 2)
              goto LABEL_257;
            v102 = 2;
            while (1)
            {
              v103 = v102 & 3;
              if (v103 == 1)
                break;
              if (v103 == 2)
                v104 = 1;
              else
                v104 = 3;
              if (v103 == 3)
                v102 = 1;
              else
                v102 = v104;
            }
            LOBYTE(v103) = 2;
            while (v103 != 1)
              LOBYTE(v103) = 1;
            v116 = *((_DWORD *)a2 + 6);
            v117 = *((_DWORD *)this + 41);
            if (v117 <= v116)
            {
              __break(0xC471u);
              JUMPOUT(0x198529E44);
            }
            if (v117 <= v116 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x1985269E0);
            }
            return;
          case 8u:
            if (BYTE2(v34) >= 2u && BYTE2(v34) != 3)
              goto LABEL_257;
            v111 = 2;
            while (1)
            {
              v112 = v111 & 3;
              if (v112 == 1)
                break;
              if (v112 == 2)
                v113 = 1;
              else
                v113 = 3;
              if (v112 == 3)
                v111 = 1;
              else
                v111 = v113;
            }
            LOBYTE(v112) = 2;
            while (v112 != 1)
              LOBYTE(v112) = 1;
            v114 = *((_DWORD *)a2 + 6);
            v115 = *((_DWORD *)this + 41);
            if (v115 <= v114)
            {
              __break(0xC471u);
              JUMPOUT(0x198529E3CLL);
            }
            if (v115 <= v114 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198526990);
            }
            return;
          case 9u:
            if (BYTE2(v34) >= 2u && BYTE2(v34) != 3)
              goto LABEL_257;
            v36 = 2;
            while (1)
            {
              v37 = v36 & 3;
              if (v37 == 1)
                break;
              if (v37 == 2)
                v38 = 1;
              else
                v38 = 3;
              if (v37 == 3)
                v36 = 1;
              else
                v36 = v38;
            }
            LOBYTE(v37) = 2;
            while (v37 != 1)
              LOBYTE(v37) = 1;
            v48 = *((_DWORD *)a2 + 6);
            v49 = *((_DWORD *)this + 41);
            if (v49 <= v48)
            {
              __break(0xC471u);
              JUMPOUT(0x198529E0CLL);
            }
            if (v49 <= v48 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198526344);
            }
            return;
          case 0xAu:
          case 0xBu:
            if (BYTE2(v34) <= 1u)
              goto LABEL_1174;
            goto LABEL_257;
          case 0xCu:
            if (BYTE2(v34) > 1u)
              goto LABEL_257;
            v340 = *((_QWORD *)a2 + 3);
            v341 = *((_DWORD *)this + 41);
            if (v341 <= v340)
            {
              __break(0xC471u);
              JUMPOUT(0x198529F0CLL);
            }
            if (v341 <= (int)v340 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198529F14);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v465, v35, 16404, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            JSC::DFG::LazyNode::LazyNode(&v464, a2);
            if (v465 == 36 && (v466 & 0x3FFF) != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x198528AD4);
            }
            return;
          case 0xDu:
            v407 = *((_QWORD *)a2 + 3);
            v408 = *((_DWORD *)this + 41);
            if (v408 <= v407)
            {
              __break(0xC471u);
              JUMPOUT(0x19852A060);
            }
            if (v408 <= (int)v407 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19852A068);
            }
            JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v462, v35, 16405, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
            JSC::DFG::LazyNode::LazyNode(&v461, a2);
            if (v462 == 36 && (v463 & 0x3FFF) != 2)
            {
              __break(0xC471u);
              JUMPOUT(0x198529938);
            }
            return;
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
            v61 = 2;
            while (1)
            {
              v62 = v61 & 3;
              if (v62 == 1)
                break;
              if (v62 == 2)
                v63 = 1;
              else
                v63 = 3;
              if (v62 == 3)
                v61 = 1;
              else
                v61 = v63;
            }
            LOBYTE(v62) = 2;
            while (v62 != 1)
              LOBYTE(v62) = 1;
            if ((v34 & 0x40000000) != 0)
              goto LABEL_1194;
            v64 = *((_DWORD *)a2 + 6);
            v65 = *((_DWORD *)this + 41);
            if (v65 <= v64)
            {
              __break(0xC471u);
              JUMPOUT(0x198529E2CLL);
            }
            if (v65 <= v64 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198526504);
            }
            return;
          case 0x19u:
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x45B, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for get");
            __break(0xC471u);
            JUMPOUT(0x1985298A4);
          default:
            __break(0xC471u);
            JUMPOUT(0x198529958);
        }
        return;
      case 0x62:
      case 0xC3:
      case 0xD9:
      case 0xDB:
      case 0xDC:
      case 0x108:
      case 0x14A:
      case 0x184:
      case 0x187:
        goto LABEL_257;
      case 0x63:
        v231 = (_DWORD *)*((_QWORD *)a2 + 9);
        v232 = v231[6];
        if (v232)
        {
          v233 = v232 - 1;
          do
          {
            --v233;
          }
          while (v233 != -1);
        }
        return;
      case 0x64:
        v337 = (_DWORD *)*((_QWORD *)a2 + 9);
        v338 = v337[6];
        if (v338)
        {
          v339 = v338 - 1;
          do
          {
            --v339;
          }
          while (v339 != -1);
        }
        return;
      case 0x65:
      case 0x66:
      case 0x67:
      case 0x68:
        v51 = *((_DWORD *)a2 + 6);
        v52 = *((_DWORD *)this + 41);
        if (v52 <= v51)
        {
          __break(0xC471u);
          JUMPOUT(0x198529E14);
        }
        if (v52 <= v51 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198529E1CLL);
        }
        if (v52 <= v51 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198529E24);
        }
        v53 = *((_DWORD *)a2 + 18);
        v54 = *((_DWORD *)a2 + 14) & 7;
        if (v54 >= 2 && v54 - 3 >= 3)
        {
          if (v54 == 7)
          {
            __break(0xC471u);
            JUMPOUT(0x198526B88);
          }
          __break(0xC471u);
          JUMPOUT(0x198529D80);
        }
        if (*((_DWORD *)a2 + 18) - 14 >= 9)
        {
          switch(*((_DWORD *)a2 + 18))
          {
            case 0u:
            case 1u:
            case 2u:
            case 4u:
            case 5u:
            case 6u:
            case 0xCu:
            case 0xDu:
            case 0x17u:
            case 0x18u:
              goto LABEL_257;
            case 3u:
              goto LABEL_585;
            case 7u:
              if (BYTE2(v53) - 3 < 2)
                goto LABEL_257;
              v273 = 2;
              while (1)
              {
                v274 = v273 & 3;
                if (v274 == 1)
                  break;
                if (v274 == 2)
                  v275 = 1;
                else
                  v275 = 3;
                if (v274 == 3)
                  v273 = 1;
                else
                  v273 = v275;
              }
              LOBYTE(v274) = 2;
              while (v274 != 1)
                LOBYTE(v274) = 1;
              LOBYTE(v274) = 2;
              while (v274 != 1)
                LOBYTE(v274) = 1;
              LOBYTE(v274) = 2;
              while (v274 != 1)
                LOBYTE(v274) = 1;
              goto LABEL_1038;
            case 8u:
              if (BYTE2(v53) - 3 < 2)
                goto LABEL_257;
              v311 = 2;
              while (1)
              {
                v312 = v311 & 3;
                if (v312 == 1)
                  break;
                if (v312 == 2)
                  v313 = 1;
                else
                  v313 = 3;
                if (v312 == 3)
                  v311 = 1;
                else
                  v311 = v313;
              }
              LOBYTE(v312) = 2;
              while (v312 != 1)
                LOBYTE(v312) = 1;
              LOBYTE(v312) = 2;
              while (v312 != 1)
                LOBYTE(v312) = 1;
              LOBYTE(v312) = 2;
              while (v312 != 1)
                LOBYTE(v312) = 1;
LABEL_1038:
              if (v14 == 264)
                goto LABEL_1205;
              if (v14 != 146)
                goto LABEL_1040;
              goto LABEL_1353;
            case 9u:
              if (BYTE2(v53) - 3 < 2)
                goto LABEL_257;
              v130 = 2;
              while (1)
              {
                v131 = v130 & 3;
                if (v131 == 1)
                  break;
                if (v131 == 2)
                  v132 = 1;
                else
                  v132 = 3;
                if (v131 == 3)
                  v130 = 1;
                else
                  v130 = v132;
              }
              LOBYTE(v131) = 2;
              while (v131 != 1)
                LOBYTE(v131) = 1;
              LOBYTE(v131) = 2;
              while (v131 != 1)
                LOBYTE(v131) = 1;
              LOBYTE(v131) = 2;
              while (v131 != 1)
                LOBYTE(v131) = 1;
              if (v14 == 264)
              {
                v53 = *((_DWORD *)a2 + 18);
              }
              else if (v14 == 146)
              {
                v53 = *((_DWORD *)a2 + 20);
              }
              if ((v53 & 0xFE0000) != 0)
              {
                v205 = 2;
                while (1)
                {
                  v206 = v205 & 3;
                  if (v206 == 1)
                    break;
                  if (v206 == 2)
                    v207 = 1;
                  else
                    v207 = 3;
                  if (v206 == 3)
                    v205 = 1;
                  else
                    v205 = v207;
                }
              }
              return;
            case 0xAu:
              if (BYTE2(v53) - 3 <= 1)
                goto LABEL_257;
              if (*((_WORD *)a2 + 9) == 146)
LABEL_1353:
                v53 = *((_DWORD *)a2 + 20);
              else
LABEL_1205:
                v53 = *((_DWORD *)a2 + 18);
LABEL_1040:
              if ((v53 & 0xFE0000) != 0)
              break;
            case 0xBu:
              if ((v53 & 0xFE0000) != 0)
                goto LABEL_257;
              break;
            case 0x19u:
              JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x4E6, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "impossible array mode for put");
              __break(0xC471u);
              JUMPOUT(0x198529B1CLL);
            default:
              __break(0xC471u);
              JUMPOUT(0x198529CACLL);
          }
        }
        else
        {
          if ((v53 & 0x40000000) != 0)
          {
            goto LABEL_1201;
          }
          v55 = 2;
          while (1)
          {
            v56 = v55 & 3;
            if (v56 == 1)
              break;
            if (v56 == 2)
              v57 = 1;
            else
              v57 = 3;
            if (v56 == 3)
              v55 = 1;
            else
              v55 = v57;
          }
          LOBYTE(v56) = 2;
          while (v56 != 1)
            LOBYTE(v56) = 1;
        }
        return;
      case 0x6D:
        v314 = 2;
        while (1)
        {
          v315 = v314 & 3;
          if (v315 == 1)
            break;
          if (v315 == 2)
            v316 = 1;
          else
            v316 = 3;
          if (v315 == 3)
            v314 = 1;
          else
            v314 = v316;
        }
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        LOBYTE(v315) = 2;
        while (v315 != 1)
          LOBYTE(v315) = 1;
        return;
      case 0x84:
      case 0x85:
        v22 = 2;
        while (1)
        {
          v23 = v22 & 3;
          if (v23 == 1)
            break;
          if (v23 == 2)
            v24 = 1;
          else
            v24 = 3;
          if (v23 == 3)
            v22 = 1;
          else
            v22 = v24;
        }
        return;
      case 0x87:
        v45 = 2;
        while (1)
        {
          v46 = v45 & 3;
          if (v46 == 1)
            break;
          if (v46 == 2)
            v47 = 1;
          else
            v47 = 3;
          if (v46 == 3)
            v45 = 1;
          else
            v45 = v47;
        }
        LOBYTE(v46) = 2;
        while (v46 != 1)
          LOBYTE(v46) = 1;
        LOBYTE(v46) = 2;
        while (v46 != 1)
          LOBYTE(v46) = 1;
        LOBYTE(v46) = 2;
        while (v46 != 1)
          LOBYTE(v46) = 1;
        if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 8) + 16) & 0x3E000) == 0x4000)
          goto LABEL_1179;
        return;
      case 0x88:
      case 0x89:
        v161 = 2;
        while (1)
        {
          v162 = v161 & 3;
          if (v162 == 1)
            break;
          if (v162 == 2)
            v163 = 1;
          else
            v163 = 3;
          if (v162 == 3)
            v161 = 1;
          else
            v161 = v163;
        }
        LOBYTE(v162) = 2;
        while (v162 != 1)
          LOBYTE(v162) = 1;
        return;
      case 0x8A:
        v26 = 2;
        while (1)
        {
          v27 = v26 & 3;
          if (v27 == 1)
            break;
          if (v27 == 2)
            v28 = 1;
          else
            v28 = 3;
          if (v27 == 3)
            v26 = 1;
          else
            v26 = v28;
        }
        return;
      case 0x8B:
        v164 = 2;
        while (1)
        {
          v165 = v164 & 3;
          if (v165 == 1)
            break;
          if (v165 == 2)
            v166 = 1;
          else
            v166 = 3;
          if (v165 == 3)
            v164 = 1;
          else
            v164 = v166;
        }
        LOBYTE(v165) = 2;
        while (v165 != 1)
          LOBYTE(v165) = 1;
        return;
      case 0x8C:
      case 0x8D:
        v125 = 2;
        while (1)
        {
          v126 = v125 & 3;
          if (v126 == 1)
            break;
          if (v126 == 2)
            v127 = 1;
          else
            v127 = 3;
          if (v126 == 3)
            v125 = 1;
          else
            v125 = v127;
        }
        LOBYTE(v126) = 2;
        while (v126 != 1)
          LOBYTE(v126) = 1;
        return;
      case 0x90:
        goto LABEL_1195;
      case 0x91:
      case 0x92:
        v133 = 2;
        while (1)
        {
          v134 = v133 & 3;
          if (v134 == 1)
            break;
          if (v134 == 2)
            v135 = 1;
          else
            v135 = 3;
          if (v134 == 3)
            v133 = 1;
          else
            v133 = v135;
        }
        LOBYTE(v134) = 2;
        while (v134 != 1)
          LOBYTE(v134) = 1;
        LOBYTE(v134) = 2;
        while (v134 != 1)
          LOBYTE(v134) = 1;
        LOBYTE(v134) = 2;
        while (v134 != 1)
          LOBYTE(v134) = 1;
        LOBYTE(v134) = 2;
        while (v134 != 1)
          LOBYTE(v134) = 1;
        LOBYTE(v134) = 2;
        while (v134 != 1)
          LOBYTE(v134) = 1;
        LOBYTE(v134) = 2;
        while (v134 != 1)
          LOBYTE(v134) = 1;
        return;
      case 0x93:
        v78 = 2;
        while (1)
        {
          v79 = v78 & 3;
          if (v79 == 1)
            break;
          if (v79 == 2)
            v80 = 1;
          else
            v80 = 3;
          if (v79 == 3)
            v78 = 1;
          else
            v78 = v80;
        }
        return;
      case 0x96:
        v21 = &v472;
        goto LABEL_1088;
      case 0x97:
        v21 = &v471;
        goto LABEL_1088;
      case 0x98:
      case 0x99:
        if (*((int *)this + 238) < 2)
          return;
        v21 = &v455;
        goto LABEL_1088;
      case 0x9A:
        v72 = 2;
        while (1)
        {
          v73 = v72 & 3;
          if (v73 == 1)
            break;
          if (v73 == 2)
            v74 = 1;
          else
            v74 = 3;
          if (v73 == 3)
            v72 = 1;
          else
            v72 = v74;
        }
        LOBYTE(v73) = 2;
        while (v73 != 1)
          LOBYTE(v73) = 1;
        if (*((int *)this + 238) < 2)
          return;
        v21 = &v454;
        goto LABEL_1088;
      case 0x9B:
        if (*((int *)this + 238) >= 2)
          JSC::DFG::LazyNode::LazyNode(&v452, (JSC::DFG::Node *)(*((_QWORD *)a2 + 5) & 0xFF00FFFFFFFFFFFFLL));
        return;
      case 0x9C:
        v139 = 2;
        while (1)
        {
          v140 = v139 & 3;
          if (v140 == 1)
            break;
          if (v140 == 2)
            v141 = 1;
          else
            v141 = 3;
          if (v140 == 3)
            v139 = 1;
          else
            v139 = v141;
        }
        LOBYTE(v140) = 2;
        while (v140 != 1)
          LOBYTE(v140) = 1;
        v142 = *((_QWORD *)a2 + 9);
        v143 = *(unsigned int *)(v142 + 20);
        v144 = (v143 << 6) - 64;
        v145 = v144;
        do
        {
          if (v145 == -64)
            goto LABEL_395;
          v146 = *(_DWORD *)(*(_QWORD *)(v142 + 8) + v145) - 2;
          v145 -= 64;
        }
        while (v146 > 3);
        LOBYTE(v146) = 2;
        while (v146 != 1)
          LOBYTE(v146) = 1;
LABEL_395:
        while (v143)
        {
          if (--v143 >= (unint64_t)*(unsigned int *)(v142 + 20))
          {
            __break(0xC471u);
            JUMPOUT(0x198529E6CLL);
          }
          v147 = v144 - 64;
          v148 = JSC::PutByVariant::reallocatesStorage((JSC::PutByVariant *)(*(_QWORD *)(v142 + 8) + v144));
          v144 = v147;
          if (v148)
          {
            v247 = 2;
            while (1)
            {
              v248 = v247 & 3;
              if (v248 == 1)
                break;
              if (v248 == 2)
                v249 = 1;
              else
                v249 = 3;
              if (v248 == 3)
                v247 = 1;
              else
                v247 = v249;
            }
            break;
          }
        }
        if (*((int *)this + 238) >= 2)
          JSC::DFG::LazyNode::LazyNode(&v453, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
        return;
      case 0x9D:
        if (!JSC::DFG::MultiDeleteByOffsetData::writesStructures(*((_QWORD *)a2 + 9)))
          return;
LABEL_1179:
        return;
      case 0x9E:
        v29 = *((_DWORD *)a2 + 18);
        switch((char)v29)
        {
          case 3:
            goto LABEL_585;
          case 5:
            return;
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
            v30 = 2;
            while (1)
            {
              v31 = v30 & 3;
              if (v31 == 1)
                break;
              if (v31 == 2)
                v32 = 1;
              else
                v32 = 3;
              if (v31 == 3)
                v30 = 1;
              else
                v30 = v32;
            }
            return;
          case 12:
          case 13:
            v21 = &v451;
            goto LABEL_1088;
          case 25:
            goto LABEL_1374;
          default:
            v423 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
            if (v423 == 12 || !v423)
            {
              JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x638, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
              __break(0xC471u);
              JUMPOUT(0x19852A0ECLL);
            }
LABEL_1374:
            v424 = 2;
            while (1)
            {
              v425 = v424 & 3;
              if (v425 == 1)
                break;
              if (v425 == 2)
                v426 = 1;
              else
                v426 = 3;
              if (v425 == 3)
                v424 = 1;
              else
                v424 = v426;
            }
            if ((v29 & 0x40000000) != 0)
              goto LABEL_1201;
            return;
        }
      case 0x9F:
        v260 = *((_DWORD *)a2 + 18);
        if (v260 != 25)
        {
          v427 = JSC::DFG::toTypedArrayType(v260);
          if (v427 == 12 || !v427)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x644, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView()");
            __break(0xC471u);
            JUMPOUT(0x198529EECLL);
          }
        }
        if ((v260 & 0x40000000) != 0)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x645, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "!mode.mayBeResizableOrGrowableSharedTypedArray()");
          __break(0xC471u);
          JUMPOUT(0x198527910);
        }
        return;
      case 0xA0:
        v384 = *((_DWORD *)a2 + 18);
        if (v384 == 25)
          goto LABEL_1248;
        v428 = JSC::DFG::toTypedArrayType(*((_DWORD *)a2 + 18));
        if (v428 == 12 || !v428)
        {
          if (v384 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x64C, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x198529F90);
          }
          goto LABEL_585;
        }
        if (v384 == 3)
          goto LABEL_585;
LABEL_1248:
        if ((v384 & 0x40000000) != 0)
          goto LABEL_1201;
        v21 = &v450;
        goto LABEL_1088;
      case 0xA1:
        if ((*((_DWORD *)a2 + 18) & 0xFE) != 0xA)
        {
          __break(0xC471u);
          JUMPOUT(0x198529E64);
        }
        v21 = &v449;
        goto LABEL_1088;
      case 0xA2:
        v385 = *((unsigned __int8 *)a2 + 72);
        if (v385 == 25)
          goto LABEL_1253;
        v429 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        if (v429 == 12 || !v429)
        {
          if (v385 != 3)
          {
            JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x59D, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
            __break(0xC471u);
            JUMPOUT(0x198529FF4);
          }
          goto LABEL_585;
        }
        if (v385 == 3)
          goto LABEL_585;
LABEL_1253:
        if (*((_WORD *)a2 + 9) == 146)
          v386 = *((_DWORD *)a2 + 20);
        else
          v386 = *((_DWORD *)a2 + 18);
        if ((v386 & 0x40000000) == 0)
        {
          v21 = &v457;
          goto LABEL_1088;
        }
        goto LABEL_1201;
      case 0xA3:
        v387 = *((unsigned __int8 *)a2 + 72);
        if (v387 == 25)
          goto LABEL_1258;
        v430 = JSC::DFG::toTypedArrayType(*((unsigned __int8 *)a2 + 72));
        if (v430 != 12 && v430)
        {
          if (v387 != 3)
          {
LABEL_1258:
            if (*((_WORD *)a2 + 9) == 146)
              v388 = *((_DWORD *)a2 + 20);
            else
              v388 = *((_DWORD *)a2 + 18);
            if ((v388 & 0x40000000) != 0)
            {
LABEL_1201:
            }
            else
            {
              v21 = &v456;
LABEL_1088:
              JSC::DFG::LazyNode::LazyNode(v21, a2);
            }
            return;
          }
        }
        else if (v387 != 3)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x5AF, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit");
          __break(0xC471u);
          JUMPOUT(0x19852A058);
        }
LABEL_585:
        return;
      case 0xAA:
        return;
      case 0xAB:
        v39 = *((unsigned int *)a2 + 18);
        v40 = 21;
        goto LABEL_72;
      case 0xAC:
        v58 = *((unsigned int *)a2 + 18);
        v59 = 21;
        goto LABEL_131;
      case 0xAD:
      case 0xAE:
        v39 = *((_QWORD *)a2 + 9);
        v40 = 36;
        goto LABEL_72;
      case 0xAF:
        v58 = *((_QWORD *)a2 + 9);
        v59 = 36;
        goto LABEL_131;
      case 0xB2:
        v318 = 2;
        while (1)
        {
          v319 = v318 & 3;
          if (v319 == 1)
            break;
          if (v319 == 2)
            v320 = 1;
          else
            v320 = 3;
          if (v319 == 3)
            v318 = 1;
          else
            v318 = v320;
        }
        LOBYTE(v319) = 2;
        while (v319 != 1)
          LOBYTE(v319) = 1;
        return;
      case 0xB3:
        v155 = 2;
        while (1)
        {
          v156 = v155 & 3;
          if (v156 == 1)
            break;
          if (v156 == 2)
            v157 = 1;
          else
            v157 = 3;
          if (v156 == 3)
            v155 = 1;
          else
            v155 = v157;
        }
        return;
      case 0xB4:
        v257 = 2;
        while (1)
        {
          v258 = v257 & 3;
          if (v258 == 1)
            break;
          if (v258 == 2)
            v259 = 1;
          else
            v259 = 3;
          if (v258 == 3)
            v257 = 1;
          else
            v257 = v259;
        }
        return;
      case 0xB5:
        return;
      case 0xB8:
      case 0xBA:
        v42 = 2;
        while (1)
        {
          v43 = v42 & 3;
          if (v43 == 1)
            break;
          if (v43 == 2)
            v44 = 1;
          else
            v44 = 3;
          if (v43 == 3)
            v42 = 1;
          else
            v42 = v44;
        }
        return;
      case 0xBE:
        v21 = &v460;
        goto LABEL_1088;
      case 0xC1:
        v306 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v306 != 21 && (_DWORD)v306 != 49 && (_DWORD)v306 != 1)
          goto LABEL_257;
        v307 = *((_QWORD *)a2 + 4);
        if ((v307 & 0xFF00FFFFFFFFFFFFLL) == 0)
          return;
LABEL_885:
        v153 = v307 & 0xFC000000000000;
        v154 = 0x4000000000000;
LABEL_411:
        if (v153 != v154)
          goto LABEL_257;
        return;
      case 0xC2:
        if (((*((_QWORD *)a2 + 3) >> 50) & 0x3F) - 12 > 2)
          goto LABEL_257;
        v264 = 2;
        while (1)
        {
          v265 = v264 & 3;
          if (v265 == 1)
            break;
          if (v265 == 2)
            v266 = 1;
          else
            v266 = 3;
          if (v265 == 3)
            v264 = 1;
          else
            v264 = v266;
        }
        LOBYTE(v265) = 2;
        while (v265 != 1)
          LOBYTE(v265) = 1;
        LOBYTE(v265) = 2;
        while (v265 != 1)
          LOBYTE(v265) = 1;
        return;
      case 0xC4:
        v350 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v350 == 11)
        {
          return;
        }
        if ((_DWORD)v350)
        {
          __break(0xC471u);
          JUMPOUT(0x198529154);
        }
        goto LABEL_257;
      case 0xCA:
      case 0xCB:
      case 0xCC:
      case 0xCD:
      case 0xCF:
      case 0xD0:
      case 0xD1:
      case 0xD2:
      case 0xD3:
        if (v14 - 202 >= 0xA || ((0x3EFu >> (v14 + 54)) & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198529E04);
        }
        v359 = dword_199156474[(__int16)(v14 - 202)];
        v360 = (_DWORD *)((char *)a2 + 24);
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          v420 = v359 + *v360;
          if (*((_DWORD *)this + 41) <= v420)
          {
            __break(0xC471u);
            JUMPOUT(0x19852A070);
          }
          v361 = (_QWORD *)(*((_QWORD *)this + 19) + 8 * v420);
        }
        else
        {
          v361 = &v360[2 * v359];
        }
        if ((*v361 & 0xFF00FFFFFFFFFFFFLL) == 0)
          goto LABEL_257;
        goto LABEL_1176;
      case 0xCE:
        v406 = (uint64_t *)((char *)a2 + 24);
        if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
        {
          v422 = *v406;
          if (*((_DWORD *)this + 41) <= v422)
          {
            __break(0xC471u);
            JUMPOUT(0x19852A0F4);
          }
          v406 = (uint64_t *)(*((_QWORD *)this + 19) + 8 * v422);
        }
        v307 = *v406;
        goto LABEL_885;
      case 0xD6:
        v261 = 2;
        while (1)
        {
          v262 = v261 & 3;
          if (v262 == 1)
            break;
          if (v262 == 2)
            v263 = 1;
          else
            v263 = 3;
          if (v262 == 3)
            v261 = 1;
          else
            v261 = v263;
        }
        LOBYTE(v262) = 2;
        while (v262 != 1)
          LOBYTE(v262) = 1;
        LOBYTE(v262) = 2;
        while (v262 != 1)
          LOBYTE(v262) = 1;
        LOBYTE(v262) = 2;
        while (v262 != 1)
          LOBYTE(v262) = 1;
        LOBYTE(v262) = 2;
        while (v262 != 1)
          LOBYTE(v262) = 1;
        LOBYTE(v262) = 2;
        while (v262 != 1)
          LOBYTE(v262) = 1;
        LOBYTE(v262) = 2;
        while (v262 != 1)
          LOBYTE(v262) = 1;
        LOBYTE(v262) = 2;
        while (v262 != 1)
          LOBYTE(v262) = 1;
        LOBYTE(v262) = 2;
        while (v262 != 1)
          LOBYTE(v262) = 1;
        LOBYTE(v262) = 2;
        while (v262 != 1)
          LOBYTE(v262) = 1;
        return;
      case 0xD7:
        v302 = 2;
        while (1)
        {
          v303 = v302 & 3;
          if (v303 == 1)
            break;
          if (v303 == 2)
            v304 = 1;
          else
            v304 = 3;
          if (v303 == 3)
            v302 = 1;
          else
            v302 = v304;
        }
        LOBYTE(v303) = 2;
        while (v303 != 1)
          LOBYTE(v303) = 1;
        LOBYTE(v303) = 2;
        while (v303 != 1)
          LOBYTE(v303) = 1;
        LOBYTE(v303) = 2;
        while (v303 != 1)
          LOBYTE(v303) = 1;
        LOBYTE(v303) = 2;
        while (v303 != 1)
          LOBYTE(v303) = 1;
        v305 = *((unsigned __int8 *)a2 + 72);
        switch(v305)
        {
          case 9:
            LOBYTE(v303) = 2;
            while (v303 != 1)
              LOBYTE(v303) = 1;
            break;
          case 7:
            break;
          case 8:
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x198529ACCLL);
        }
        return;
      case 0xDA:
      case 0xDE:
        v270 = 2;
        while (1)
        {
          v271 = v270 & 3;
          if (v271 == 1)
            break;
          if (v271 == 2)
            v272 = 1;
          else
            v272 = 3;
          if (v271 == 3)
            v270 = 1;
          else
            v270 = v272;
        }
        LOBYTE(v271) = 2;
        while (v271 != 1)
          LOBYTE(v271) = 1;
        return;
      case 0xDD:
        v267 = 2;
        while (1)
        {
          v268 = v267 & 3;
          if (v268 == 1)
            break;
          if (v268 == 2)
            v269 = 1;
          else
            v269 = 3;
          if (v268 == 3)
            v267 = 1;
          else
            v267 = v269;
        }
        LOBYTE(v268) = 2;
        while (v268 != 1)
          LOBYTE(v268) = 1;
        LOBYTE(v268) = 2;
        while (v268 != 1)
          LOBYTE(v268) = 1;
        LOBYTE(v268) = 2;
        while (v268 != 1)
          LOBYTE(v268) = 1;
        return;
      case 0xDF:
      case 0xE0:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) != 0x54000000000000
          || (*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x40000000000000
          || (*((_QWORD *)a2 + 5) & 0xFC000000000000) != 0x54000000000000)
        {
          goto LABEL_257;
        }
        v199 = 2;
        while (1)
        {
          v200 = v199 & 3;
          if (v200 == 1)
            break;
          if (v200 == 2)
            v201 = 1;
          else
            v201 = 3;
          if (v200 == 3)
            v199 = 1;
          else
            v199 = v201;
        }
        LOBYTE(v200) = 2;
        while (v200 != 1)
          LOBYTE(v200) = 1;
        LOBYTE(v200) = 2;
        while (v200 != 1)
          LOBYTE(v200) = 1;
        LOBYTE(v200) = 2;
        while (v200 != 1)
          LOBYTE(v200) = 1;
        return;
      case 0xE1:
        v153 = *((_QWORD *)a2 + 5) & 0xFC000000000000;
        v154 = 0x54000000000000;
        goto LABEL_411;
      case 0xE6:
        v217 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((v217 - 1) < 2)
          return;
        if ((_DWORD)v217)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x1D3, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198527470);
        }
        goto LABEL_257;
      case 0xE7:
      case 0xE8:
      case 0xE9:
      case 0xEA:
      case 0xED:
        v33 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v33 == 21)
        {
          if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) == 0x54000000000000)
          {
            v69 = 2;
            while (1)
            {
              v70 = v69 & 3;
              if (v70 == 1)
                break;
              if (v70 == 2)
                v71 = 1;
              else
                v71 = 3;
              if (v70 == 3)
                v69 = 1;
              else
                v69 = v71;
            }
            LOBYTE(v70) = 2;
            while (v70 != 1)
              LOBYTE(v70) = 1;
          }
          return;
        }
        if ((_DWORD)v33 || (*((_BYTE *)a2 + 38) & 0xFC) != 0)
          return;
        goto LABEL_257;
      case 0x101:
      case 0x102:
        goto LABEL_585;
      case 0x103:
      case 0x104:
      case 0x105:
      case 0x10C:
      case 0x10E:
      case 0x110:
      case 0x111:
      case 0x112:
      case 0x116:
      case 0x119:
      case 0x11A:
      case 0x11B:
      case 0x11C:
      case 0x11D:
      case 0x11E:
      case 0x11F:
      case 0x120:
      case 0x121:
      case 0x122:
        v66 = 2;
        while (1)
        {
          v67 = v66 & 3;
          if (v67 == 1)
            break;
          if (v67 == 2)
            v68 = 1;
          else
            v68 = 3;
          if (v67 == 3)
            v66 = 1;
          else
            v66 = v68;
        }
        LOBYTE(v67) = 2;
        while (v67 != 1)
          LOBYTE(v67) = 1;
        return;
      case 0x106:
        v86 = 2;
        while (1)
        {
          v87 = v86 & 3;
          if (v87 == 1)
            break;
          if (v87 == 2)
            v88 = 1;
          else
            v88 = 3;
          if (v87 == 3)
            v86 = 1;
          else
            v86 = v88;
        }
        LOBYTE(v87) = 2;
        while (v87 != 1)
          LOBYTE(v87) = 1;
        v89 = *((_QWORD *)a2 + 4);
        v90 = v89;
        if ((v89 & 0x80000000) != 0)
        {
          JSC::DFG::Graph::freeze((uint64_t)this, COERCE__INT64((double)v89) + 0x2000000000000, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        else
        {
          JSC::DFG::Graph::freeze((uint64_t)this, v89 | 0xFFFE000000000000, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          if (!(_DWORD)v89)
            return;
        }
        v97 = *((unsigned __int16 *)a2 + 9);
        switch(v97)
        {
          case 267:
            goto LABEL_1061;
          case 264:
            LOBYTE(v98) = *((_DWORD *)a2 + 19) & 0xF;
            break;
          case 352:
LABEL_1061:
            LOBYTE(v98) = *((_DWORD *)a2 + 21) & 0xF;
            break;
          default:
            v98 = *((_DWORD *)a2 + 18);
            break;
        }
        if (v98 - 4 < 6
          || v98 <= 0x19u && ((1 << v98) & 0x2A00000) != 0)
        {
          v99 = *((unsigned int *)this + 107);
          if (v89 >= v99)
          {
            if ((_DWORD)v99)
            {
              v234 = (unsigned int *)*((_QWORD *)this + 52);
              v235 = 4 * v99;
              do
              {
                v236 = *v234;
                if (v236 < v89)
                {
                  if (*((_DWORD *)this + 41) <= (v236 + *((_DWORD *)a2 + 6)))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198529E8CLL);
                  }
                  if ((v236 & 0x80000000) != 0)
                    v237 = COERCE__INT64((double)v236) + 0x2000000000000;
                  else
                    v237 = v236 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v237, v91, v92, v93, v94, v95, v96);
                }
                ++v234;
                v235 -= 4;
              }
              while (v235);
            }
          }
          else
          {
            v100 = 0;
            do
            {
              if (*((_DWORD *)this + 41) <= (v100 + *((_DWORD *)a2 + 6)))
              {
                __break(0xC471u);
                JUMPOUT(0x198529E34);
              }
              if ((v100 & 0x80000000) != 0)
                v101 = COERCE__INT64((double)v100) + 0x2000000000000;
              else
                v101 = v100 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v101, v91, v92, v93, v94, v95, v96);
              ++v100;
            }
            while (v90 != v100);
          }
        }
        return;
      case 0x107:
        v354 = *((unsigned int *)a2 + 8);
        if (!*((_DWORD *)a2 + 8))
          goto LABEL_1314;
        v355 = *((_QWORD *)a2 + 3);
        v356 = *((_DWORD *)this + 41);
        v357 = v356 >= v355;
        LODWORD(v358) = v356 - v355;
        if (v357)
          v358 = v358;
        else
          v358 = 0;
        while (1)
        {
          if (!v358)
          {
            __break(0xC471u);
            JUMPOUT(0x198529F1CLL);
          }
          if (*(_WORD *)((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * v355) & 0xFF00FFFFFFFFFFFFLL) + 0x12) == 350)
            break;
          LODWORD(v355) = v355 + 1;
          --v358;
          if (!--v354)
            goto LABEL_1314;
        }
LABEL_686:
LABEL_1314:
        return;
      case 0x109:
        v202 = 2;
        while (1)
        {
          v203 = v202 & 3;
          if (v203 == 1)
            break;
          if (v203 == 2)
            v204 = 1;
          else
            v204 = 3;
          if (v203 == 3)
            v202 = 1;
          else
            v202 = v204;
        }
        LOBYTE(v203) = 2;
        while (v203 != 1)
          LOBYTE(v203) = 1;
        return;
      case 0x10A:
        v276 = 2;
        while (1)
        {
          v277 = v276 & 3;
          if (v277 == 1)
            break;
          if (v277 == 2)
            v278 = 1;
          else
            v278 = 3;
          if (v277 == 3)
            v276 = 1;
          else
            v276 = v278;
        }
        LOBYTE(v277) = 2;
        while (v277 != 1)
          LOBYTE(v277) = 1;
        v279 = *((unsigned int *)a2 + 20);
        if ((v279 & 0x80000000) != 0)
          v280 = COERCE__INT64((double)v279) + 0x2000000000000;
        else
          v280 = v279 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v280, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        return;
      case 0x10B:
        v167 = 2;
        while (1)
        {
          v168 = v167 & 3;
          if (v168 == 1)
            break;
          if (v168 == 2)
            v169 = 1;
          else
            v169 = 3;
          if (v168 == 3)
            v167 = 1;
          else
            v167 = v169;
        }
        LOBYTE(v168) = 2;
        while (v168 != 1)
          LOBYTE(v168) = 1;
        v170 = (uint64_t *)*((_QWORD *)a2 + 9);
        v171 = *v170;
        v172 = *(unsigned int *)(*v170 + 8);
        if ((v172 & 0x80000000) != 0)
          v173 = COERCE__INT64((double)v172) + 0x2000000000000;
        else
          v173 = v172 | 0xFFFE000000000000;
        JSC::DFG::Graph::freeze((uint64_t)this, v173, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v181 = *((unsigned __int16 *)a2 + 9);
        switch(v181)
        {
          case 267:
            goto LABEL_1086;
          case 264:
            LOBYTE(v182) = *((_DWORD *)a2 + 19) & 0xF;
            break;
          case 352:
LABEL_1086:
            LOBYTE(v182) = *((_DWORD *)a2 + 21) & 0xF;
            break;
          default:
            v182 = *((_DWORD *)a2 + 18);
            break;
        }
        if (v182 - 4 < 6
          || ((v363 = v182 > 0x19u, v364 = (1 << v182) & 0x2A00000, !v363)
            ? (v365 = v364 == 0)
            : (v365 = 1),
              !v365))
        {
          v183 = *((unsigned int *)this + 107);
          if (v183 <= v172)
          {
            v445 = 0;
            v446 = 0;
            if ((_DWORD)v183)
            {
              v321 = (unsigned int *)*((_QWORD *)this + 52);
              v322 = 4 * v183;
              do
              {
                v323 = *v321;
                LODWORD(v431) = v323;
                if (v323 < v172)
                {
                  if (HIDWORD(v446) == (_DWORD)v446)
                  {
                    WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>((uint64_t)&v445, (unint64_t)&v431);
                  }
                  else
                  {
                    *((_DWORD *)v445 + HIDWORD(v446)) = v323;
                    ++HIDWORD(v446);
                  }
                }
                ++v321;
                v322 -= 4;
              }
              while (v322);
              v325 = v445;
              if (HIDWORD(v446))
              {
                v326 = v171 + 16;
                v327 = 4 * HIDWORD(v446);
                do
                {
                  v328 = *(unsigned int *)v325;
                  if ((v328 & 0x80000000) != 0)
                    v329 = COERCE__INT64((double)v328) + 0x2000000000000;
                  else
                    v329 = v328 | 0xFFFE000000000000;
                  JSC::DFG::Graph::freeze((uint64_t)this, v329, v175, v176, v177, v178, v179, v180);
                  if ((*(_BYTE *)(v171 + 4) & 0xE) == 6)
                    v336 = *(_QWORD *)(v326 + 8 * v328) + 0x2000000000000;
                  else
                    v336 = *(_QWORD *)(v326 + 8 * v328);
                  JSC::DFG::Graph::freeze((uint64_t)this, v336, v330, v331, v332, v333, v334, v335);
                  v325 = (WTF *)((char *)v325 + 4);
                  v327 -= 4;
                }
                while (v327);
                v325 = v445;
              }
              if (v325)
              {
                v445 = 0;
                LODWORD(v446) = 0;
                WTF::fastFree((unint64_t)v325, v174, v175, v176, v177, v178, v179, v180);
              }
            }
          }
          else if ((_DWORD)v172)
          {
            v184 = 0;
            v185 = v171 + 16;
            do
            {
              if ((v184 & 0x80000000) != 0)
                v186 = COERCE__INT64((double)v184) + 0x2000000000000;
              else
                v186 = v184 | 0xFFFE000000000000;
              JSC::DFG::Graph::freeze((uint64_t)this, v186, v175, v176, v177, v178, v179, v180);
              if ((*(_BYTE *)(v171 + 4) & 0xE) == 6)
                v193 = *(_QWORD *)(v185 + 8 * v184) + 0x2000000000000;
              else
                v193 = *(_QWORD *)(v185 + 8 * v184);
              JSC::DFG::Graph::freeze((uint64_t)this, v193, v187, v188, v189, v190, v191, v192);
              ++v184;
            }
            while (v172 != v184);
          }
        }
        return;
      case 0x10D:
        v213 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (!(_DWORD)v213)
          goto LABEL_257;
        if ((_DWORD)v213 != 1 && (_DWORD)v213 != 52)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x6CA, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198529130);
        }
        v214 = 2;
        while (1)
        {
          v215 = v214 & 3;
          if (v215 == 1)
            break;
          if (v215 == 2)
            v216 = 1;
          else
            v216 = 3;
          if (v215 == 3)
            v214 = 1;
          else
            v214 = v216;
        }
        LOBYTE(v215) = 2;
        while (v215 != 1)
          LOBYTE(v215) = 1;
        return;
      case 0x10F:
        v405 = *((_QWORD *)a2 + 3);
        if ((v405 & 0xFF00FFFFFFFFFFFFLL) == 0 || (v405 & 0xFC000000000000) == 0x54000000000000)
          goto LABEL_1312;
        goto LABEL_257;
      case 0x114:
        if ((JSC::DFG::Graph::isWatchingHavingABadTimeWatchpoint(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8) & 1) == 0)
          goto LABEL_257;
        v238 = 2;
        while (1)
        {
          v239 = v238 & 3;
          if (v239 == 1)
            break;
          if (v239 == 2)
            v240 = 1;
          else
            v240 = 3;
          if (v239 == 3)
            v238 = 1;
          else
            v238 = v240;
        }
        LOBYTE(v239) = 2;
        while (v239 != 1)
          LOBYTE(v239) = 1;
        return;
      case 0x115:
        v253 = *(unsigned __int16 *)((*((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
        if (v253 == 352)
        {
LABEL_1195:
          return;
        }
        if (v253 != 349)
          goto LABEL_257;
        goto LABEL_686;
      case 0x123:
        v21 = &v459;
        goto LABEL_1088;
      case 0x126:
        return;
      case 0x12B:
        v118 = 2;
        while (1)
        {
          v119 = v118 & 3;
          if (v119 == 1)
            break;
          if (v119 == 2)
            v120 = 1;
          else
            v120 = 3;
          if (v119 == 3)
            v118 = 1;
          else
            v118 = v120;
        }
        return;
      case 0x12C:
        v208 = 2;
        while (1)
        {
          v209 = v208 & 3;
          if (v209 == 1)
            break;
          if (v209 == 2)
            v210 = 1;
          else
            v210 = 3;
          if (v209 == 3)
            v208 = 1;
          else
            v208 = v210;
        }
        return;
      case 0x135:
        v250 = 2;
        while (1)
        {
          v251 = v250 & 3;
          if (v251 == 1)
            break;
          if (v251 == 2)
            v252 = 1;
          else
            v252 = 3;
          if (v251 == 3)
            v250 = 1;
          else
            v250 = v252;
        }
        return;
      case 0x136:
        v21 = &v473;
        goto LABEL_1088;
      case 0x13E:
      case 0x145:
        v121 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if (v121 > 0x34)
          goto LABEL_1326;
        if (((1 << v121) & 0x12026000400002) != 0)
          return;
        if (((1 << v121) & 0x101) != 0)
          goto LABEL_257;
        if (v121 != 24)
        {
LABEL_1326:
          __break(0xC471u);
          JUMPOUT(0x198529984);
        }
        v122 = 2;
        while (1)
        {
          v123 = v122 & 3;
          if (v123 == 1)
            break;
          if (v123 == 2)
            v124 = 1;
          else
            v124 = 3;
          if (v123 == 3)
            v122 = 1;
          else
            v122 = v124;
        }
        return;
      case 0x13F:
        v153 = *((_QWORD *)a2 + 3) & 0xFC000000000000;
        v154 = 0x54000000000000;
        goto LABEL_411;
      case 0x144:
LABEL_1312:
        v390 = *a3;
        v391 = 16407;
        goto LABEL_1313;
      case 0x146:
        v389 = (*((_QWORD *)a2 + 3) >> 50) & 0x3FLL;
        if ((_DWORD)v389 == 28)
          return;
        if ((_DWORD)v389)
        {
          JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x33F, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", "Bad use kind");
          __break(0xC471u);
          JUMPOUT(0x198529590);
        }
        goto LABEL_257;
      case 0x157:
        v39 = *((unsigned int *)a2 + 18);
        v40 = 33;
LABEL_72:
        v41 = v40 | (v39 << 15);
        goto LABEL_73;
      case 0x158:
        v58 = *((unsigned int *)a2 + 18);
        v59 = 33;
LABEL_131:
        v60 = v59 | (v58 << 15);
        goto LABEL_132;
      case 0x159:
        v106 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 40);
        if ((v106 & 1) != 0)
          v107 = (v106 >> 1) & 3;
        else
          v107 = *(unsigned __int8 *)(v106 + 4);
        if (v107 != 2)
        v108 = 2;
        while (1)
        {
          v109 = v108 & 3;
          if (v109 == 1)
            break;
          if (v109 == 2)
            v110 = 1;
          else
            v110 = 3;
          if (v109 == 3)
            v108 = 1;
          else
            v108 = v110;
        }
        LOBYTE(v109) = 2;
        while (v109 != 1)
          LOBYTE(v109) = 1;
        return;
      case 0x15A:
        v390 = *a3;
        v391 = 16385;
LABEL_1313:
        goto LABEL_1314;
      case 0x15B:
      case 0x161:
      case 0x162:
        v225 = 2;
        while (1)
        {
          v226 = v225 & 3;
          if (v226 == 1)
            break;
          if (v226 == 2)
            v227 = 1;
          else
            v227 = 3;
          if (v226 == 3)
            v225 = 1;
          else
            v225 = v227;
        }
        LOBYTE(v226) = 2;
        while (v226 != 1)
          LOBYTE(v226) = 1;
        return;
      case 0x15C:
      case 0x163:
        if ((*(_DWORD *)(*((_QWORD *)this + 3) + 16) & 0xFFFFFFFE) != 4)
        v228 = 2;
        while (1)
        {
          v229 = v228 & 3;
          if (v229 == 1)
            break;
          if (v229 == 2)
            v230 = 1;
          else
            v230 = 3;
          if (v229 == 3)
            v228 = 1;
          else
            v228 = v230;
        }
        LOBYTE(v229) = 2;
        while (v229 != 1)
          LOBYTE(v229) = 1;
        return;
      case 0x15D:
      case 0x15E:
      case 0x15F:
      case 0x160:
        v222 = 2;
        while (1)
        {
          v223 = v222 & 3;
          if (v223 == 1)
            break;
          if (v223 == 2)
            v224 = 1;
          else
            v224 = 3;
          if (v223 == 3)
            v222 = 1;
          else
            v222 = v224;
        }
        LOBYTE(v223) = 2;
        while (v223 != 1)
          LOBYTE(v223) = 1;
        return;
      case 0x164:
        v21 = &v448;
        goto LABEL_1088;
      case 0x165:
        JSC::DFG::LazyNode::LazyNode(&v447, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
        return;
      case 0x167:
      case 0x168:
      case 0x169:
      case 0x16A:
        v81 = *(_QWORD *)(**((_QWORD **)a2 + 9) + 112);
        if ((v81 & 1) != 0)
          v82 = (v81 >> 1) & 3;
        else
          v82 = *(unsigned __int8 *)(v81 + 4);
        if (v82 != 2)
        {
          v244 = 2;
          while (1)
          {
            v245 = v244 & 3;
            if (v245 == 1)
              break;
            if (v245 == 2)
              v246 = 1;
            else
              v246 = 3;
            if (v245 == 3)
              v244 = 1;
            else
              v244 = v246;
          }
        }
        v83 = 2;
        while (1)
        {
          v84 = v83 & 3;
          if (v84 == 1)
            break;
          if (v84 == 2)
            v85 = 1;
          else
            v85 = 3;
          if (v84 == 3)
            v83 = 1;
          else
            v83 = v85;
        }
        LOBYTE(v84) = 2;
        while (v84 != 1)
          LOBYTE(v84) = 1;
        return;
      case 0x16B:
        v308 = 2;
        while (1)
        {
          v309 = v308 & 3;
          if (v309 == 1)
            break;
          if (v309 == 2)
            v310 = 1;
          else
            v310 = 3;
          if (v309 == 3)
            v308 = 1;
          else
            v308 = v310;
        }
        LOBYTE(v309) = 2;
        while (v309 != 1)
          LOBYTE(v309) = 1;
        return;
      case 0x171:
      case 0x172:
      case 0x173:
      case 0x174:
      case 0x176:
      case 0x177:
        v75 = 2;
        while (1)
        {
          v76 = v75 & 3;
          if (v76 == 1)
            break;
          if (v76 == 2)
            v77 = 1;
          else
            v77 = 3;
          if (v76 == 3)
            v75 = 1;
          else
            v75 = v77;
        }
        return;
      case 0x178:
      case 0x179:
      case 0x17A:
      case 0x17D:
        return;
      case 0x17E:
        v392 = *a3;
        v393 = 16392;
        goto LABEL_1271;
      case 0x17F:
        v392 = *a3;
        v393 = 16387;
LABEL_1271:
        return;
      case 0x180:
      case 0x182:
        if (v14 != 386)
          goto LABEL_1096;
        v149 = *((unsigned __int8 *)a2 + 80);
        if (v149 != 2)
        {
          if (v149 != 1)
            goto LABEL_257;
LABEL_1096:
          v342 = 2;
          while (1)
          {
            v343 = v342 & 3;
            if (v343 == 1)
              break;
            if (v343 == 2)
              v344 = 1;
            else
              v344 = 3;
            if (v343 == 3)
              v342 = 1;
            else
              v342 = v344;
          }
          if (v14 == 146)
            v345 = *((_DWORD *)a2 + 20);
          else
            v345 = *((_DWORD *)a2 + 18);
          if (v14 == 386)
            v346 = 11;
          else
            v346 = 12;
          if (v345 == 9)
          {
            if (BYTE2(v345) > 1u)
              goto LABEL_257;
            LOBYTE(v343) = 2;
            while (v343 != 1)
              LOBYTE(v343) = 1;
            LOBYTE(v343) = 2;
            while (v343 != 1)
              LOBYTE(v343) = 1;
            v347 = *((_DWORD *)a2 + 6);
            v348 = *((_DWORD *)this + 41);
            if (v348 <= v347)
            {
              __break(0xC471u);
              JUMPOUT(0x198529E94);
            }
            if (v348 <= v347 + 1)
            {
              __break(0xC471u);
              JUMPOUT(0x198528BBCLL);
            }
          }
          else
          {
            switch((char)v345)
            {
              case 3:
                goto LABEL_585;
              case 7:
                if (BYTE2(v345) > 1u)
                  goto LABEL_257;
                v409 = *((_QWORD *)a2 + 3);
                v410 = *((_DWORD *)this + 41);
                if (v410 <= v409)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19852A078);
                }
                if (v410 <= (int)v409 + 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19852A080);
                }
                JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v478, v346, 16400, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
                JSC::DFG::LazyNode::LazyNode(&v477, a2);
                if (v478 == 36 && (v479 & 0x3FFF) != 2)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198529A2CLL);
                }
                return;
              case 8:
                if (BYTE2(v345) > 1u)
                  goto LABEL_257;
                v352 = *((_QWORD *)a2 + 3);
                v353 = *((_DWORD *)this + 41);
                if (v353 <= v352)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198529F24);
                }
                if (v353 <= (int)v352 + 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198529F2CLL);
                }
                JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v475, v346, 16401, *(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)), *(_QWORD *)(*((_QWORD *)this + 19) + 8 * (*((_QWORD *)a2 + 3) + 1)), 0);
                JSC::DFG::LazyNode::LazyNode(&v474, a2);
                if (v475 == 36 && (v476 & 0x3FFF) != 2)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198528D94);
                }
                return;
              case 10:
                if (BYTE2(v345) > 1u)
                  goto LABEL_257;
LABEL_1174:
                break;
              default:
                goto LABEL_257;
            }
          }
          return;
        }
        if (*((_DWORD *)this + 41) <= *((_QWORD *)a2 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x198529E84);
        }
        if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * *((_QWORD *)a2 + 3)) & 0xFC000000000000) == 0x20000000000000)
        {
          v150 = 2;
          while (1)
          {
            v151 = v150 & 3;
            if (v151 == 1)
              break;
            if (v151 == 2)
              v152 = 1;
            else
              v152 = 3;
            if (v151 == 3)
              v150 = 1;
            else
              v150 = v152;
          }
          LOBYTE(v151) = 2;
          while (v151 != 1)
            LOBYTE(v151) = 1;
          LOBYTE(v151) = 2;
          while (v151 != 1)
            LOBYTE(v151) = 1;
          return;
        }
        goto LABEL_257;
      case 0x18A:
      case 0x18F:
        v128 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000;
        v129 = 16411;
        goto LABEL_326;
      case 0x18B:
        v158 = 2;
        while (1)
        {
          v159 = v158 & 3;
          if (v159 == 1)
            break;
          if (v159 == 2)
            v160 = 1;
          else
            v160 = 3;
          if (v159 == 3)
            v158 = 1;
          else
            v158 = v160;
        }
        return;
      case 0x18C:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
          v317 = 16413;
        else
          v317 = 16414;
        return;
      case 0x18D:
        v128 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000;
        v129 = 16413;
        goto LABEL_326;
      case 0x18E:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x80000000000000)
          v351 = 16413;
        else
          v351 = 16414;
        v21 = &v444;
        goto LABEL_1088;
      case 0x190:
        if (*((_DWORD *)a2 + 18))
          v394 = 16412;
        else
          v394 = 16411;
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v442, 48, v394, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        JSC::DFG::LazyNode::LazyNode(&v441, a2);
        if (v442 == 36 && (v443 & 0x3FFF) != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198529648);
        }
        return;
      case 0x191:
        if (*((_DWORD *)a2 + 18))
          v396 = 16412;
        else
          v396 = 16411;
        v21 = &v440;
        goto LABEL_1088;
      case 0x192:
        if (*((_DWORD *)a2 + 18))
          v397 = 16412;
        else
          v397 = 16411;
        v21 = &v439;
        goto LABEL_1088;
      case 0x193:
        if (*((_DWORD *)a2 + 18))
          v395 = 16412;
        else
          v395 = 16411;
        v21 = &v438;
        goto LABEL_1088;
      case 0x194:
        v254 = 2;
        while (1)
        {
          v255 = v254 & 3;
          if (v255 == 1)
            break;
          if (v255 == 2)
            v256 = 1;
          else
            v256 = 3;
          if (v255 == 3)
            v254 = 1;
          else
            v254 = v256;
        }
        return;
      case 0x195:
        v194 = *((_DWORD *)a2 + 6);
        v195 = *((_DWORD *)this + 41);
        if (v195 <= v194)
        {
          __break(0xC471u);
          JUMPOUT(0x198529E74);
        }
        if (v195 <= v194 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198529E7CLL);
        }
        v196 = 2;
        while (1)
        {
          v197 = v196 & 3;
          if (v197 == 1)
            break;
          if (v197 == 2)
            v198 = 1;
          else
            v198 = 3;
          if (v197 == 3)
            v196 = 1;
          else
            v196 = v198;
        }
        return;
      case 0x196:
        if ((*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x78000000000000)
          v60 = 16411;
        else
          v60 = 16412;
        goto LABEL_132;
      case 0x197:
        v128 = (*((_QWORD *)a2 + 3) & 0xFC000000000000) == 0x88000000000000;
        v129 = 16415;
LABEL_326:
        if (v128)
          v41 = v129;
        else
          v41 = v129 + 1;
LABEL_73:
        return;
      case 0x198:
        if ((*((_QWORD *)a2 + 4) & 0xFC000000000000) != 0x2C000000000000)
        {
        }
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v436, 55, 16416, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0);
        JSC::DFG::LazyNode::LazyNode(&v435, (JSC::DFG::Node *)(*((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL));
        if (v436 == 36 && (v437 & 0x3FFF) != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198529724);
        }
        return;
      case 0x199:
        v297 = *((_DWORD *)a2 + 6);
        v298 = *((_DWORD *)this + 41);
        if (v298 <= v297)
        {
          __break(0xC471u);
          JUMPOUT(0x198529EF4);
        }
        if (v298 <= v297 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x198529EFCLL);
        }
        if (v298 <= v297 + 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198529F04);
        }
        if ((*(_QWORD *)(*((_QWORD *)this + 19) + 8 * (v297 + 1)) & 0xFC000000000000) != 0x2C000000000000)
        {
        }
        v299 = 2;
        while (1)
        {
          v300 = v299 & 3;
          if (v300 == 1)
            break;
          if (v300 == 2)
            v301 = 1;
          else
            v301 = 3;
          if (v300 == 3)
            v299 = 1;
          else
            v299 = v301;
        }
        return;
      case 0x19E:
        goto LABEL_583;
      case 0x1A0:
        v282 = *(unsigned int **)(*((_QWORD *)a2 + 9) + 16);
        if (!v282)
          goto LABEL_257;
        v283 = v282[5];
        v284 = v282[6];
        v285 = (unsigned __int16)v282[5];
        v286 = (unsigned __int16)v282[6];
        v287 = v282[7];
        if (v285 != WORD1(v283))
        {
          v288 = WORD1(v283) == 0xFFFF && v285 == 0;
          v289 = (v283 << 15) | 0x25;
          if (v288)
            v290 = 16385;
          else
            v290 = v289;
        }
        if (v286 != WORD1(v284))
        {
          if (WORD1(v284) == 0xFFFF && v286 == 0)
            v292 = 16387;
          else
            v292 = (v284 << 15) | 0x25;
        }
        if ((_WORD)v287)
        {
          if (v287 >= 0xFFFF0000 && (unsigned __int16)v287 == 0xFFFF)
            return;
        }
        else if (v287 > 0xFFFEFFFF)
        {
          return;
        }
        v21 = &v458;
        goto LABEL_1088;
      case 0x1A1:
        v398 = *((_QWORD *)a2 + 9);
        v399 = *(unsigned int *)(v398 + 44);
        v400 = *(unsigned int *)(v398 + 48);
        v401 = (unsigned __int16)*(_DWORD *)(v398 + 44);
        if (v401 != WORD1(v399))
        {
          v402 = WORD1(v399) == 0xFFFF && v401 == 0;
          v403 = (v399 << 15) | 0x25;
          if (v402)
            v404 = 16385;
          else
            v404 = v403;
        }
        if ((unsigned __int16)v400 != WORD1(v400))
        {
          if (!(_WORD)v400 && WORD1(v400) == 0xFFFF)
          {
          }
          else
          {
            v60 = (v400 << 15) | 0x25;
LABEL_132:
          }
        }
        return;
      case 0x1AB:
      case 0x1AC:
        if ((*((_BYTE *)a2 + 74) & 1) != 0)
          goto LABEL_1194;
        v362 = JSC::DFG::indexedPropertyLocForResultType((JSC::DFG *)(*((_DWORD *)a2 + 14) & 7));
        JSC::DFG::HeapLocation::HeapLocation((uint64_t)&v433, v362, (*((_QWORD *)a2 + 9) << 15) | 0x16, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5));
        JSC::DFG::LazyNode::LazyNode(&v432, a2);
        if (v433 == 36 && (v434 & 0x3FFF) != 2)
        {
          __break(0xC471u);
          JUMPOUT(0x198528F78);
        }
        return;
      case 0x1AD:
        if ((*((_BYTE *)a2 + 74) & 1) == 0)
          goto LABEL_1176;
LABEL_1194:
LABEL_1176:
        return;
      case 0x1AE:
      case 0x1AF:
        v294 = 2;
        while (1)
        {
          v295 = v294 & 3;
          if (v295 == 1)
            break;
          if (v295 == 2)
            v296 = 1;
          else
            v296 = 3;
          if (v295 == 3)
            v294 = 1;
          else
            v294 = v296;
        }
        return;
      case 0x1B0:
        return;
      case 0x1B1:
        __break(0xC471u);
        JUMPOUT(0x1985297CCLL);
      default:
        v445 = (WTF *)JSC::DFG::Graph::opName(v14);
        v446 = v411;
        WTF::toCString<char [25],WTF::ASCIILiteral>("Unrecognized node type: ", (uint64_t)&v445, &v431);
        if (v431)
          v412 = (const char *)(v431 + 16);
        else
          v412 = 0;
        JSC::DFG::Graph::logAssertionFailure(this, a2, (const WTF::CString *)"./dfg/DFGClobberize.h", (const char *)0x8E7, "void JSC::DFG::clobberize(Graph &, Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]", v412);
        WTF::CString::~CString((WTF::CString *)&v431, v413, v414, v415, v416, v417, v418, v419);
        __break(0xC471u);
        JUMPOUT(0x198529AA0);
    }
  }
}

