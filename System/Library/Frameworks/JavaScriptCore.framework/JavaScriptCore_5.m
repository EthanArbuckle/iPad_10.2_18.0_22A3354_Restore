uint64_t JSC::DFG::Graph::isWatchingRegExpPrimordialPropertiesWatchpoint(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v10 = *((_QWORD *)this + 4);
LABEL_3:
    v11 = (_QWORD *)(v9 & 0xFFFFFFFF8);
    v12 = 1;
    v13 = 1;
LABEL_4:
    v14 = v11;
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v18 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v18 != 0x3FFFFFFF) ? (v19 = v18 == -1) : (v19 = 1), v19))
  {
    v20 = 2;
  }
  else if (v18 >> 28)
  {
    v26 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = v17;
    *(_DWORD *)(v26 + 8) = v18;
    v20 = 1;
    v17 = v26;
  }
  else
  {
    v20 = v17;
    v17 = 0;
  }
  v9 = v17 | v20;
  v10 = *((_QWORD *)this + 4);
  if ((v9 & 1) == 0)
    goto LABEL_3;
  v21 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v22 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v22 != 0x3FFFFFFF) ? (v23 = v22 == -1) : (v23 = 1), v23))
  {
    v24 = 2;
  }
  else if (v22 >> 28)
  {
    v27 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
    v28 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = v21;
    *(_DWORD *)(v28 + 8) = v27;
    v24 = 1;
    v21 = v28;
  }
  else
  {
    v24 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    v21 = 0;
  }
  v25 = v21 | v24;
  v11 = (_QWORD *)(v25 & 0xFFFFFFFF8);
  if ((v25 & 1) == 0)
  {
    v13 = 0;
    v12 = 1;
    goto LABEL_4;
  }
  v12 = 0;
  v13 = 0;
  v14 = (_QWORD *)*v11;
LABEL_5:
  if (v14)
    v10 = v14[1];
  v15 = *(_QWORD *)(v10 + 8);
  if ((v12 & 1) == 0 && v11)
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) == 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return JSC::DFG::Graph::isWatchingGlobalObjectWatchpoint<JSC::InlineWatchpointSet>((uint64_t)this, v15, (JSC::InlineWatchpointSet *)(v15 + 2256), 12, a5, a6, a7, a8);
}

BOOL JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(WTF::UniquedStringImpl *,JSC::JSValue)#1}::operator()(uint64_t a1, _DWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL8 v8;
  uint64_t v12;
  int Concurrently;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  JSC::DFG::Node *v22;
  __int128 *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int *v39;
  int v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  __int128 v53;
  uint64_t v54;

  if (**(_DWORD ***)a1 != a2)
    return 0;
  v52 = 0;
  v12 = *(_QWORD *)(a1 + 16);
  Concurrently = JSC::Structure::getConcurrently(**(_QWORD **)(a1 + 8), a2, &v52, a4, a5, a6, a7, a8);
  v8 = Concurrently == -1;
  if (Concurrently == -1)
  {
    v20 = *(_QWORD *)(v12 + 24);
    v21 = *(unsigned __int8 *)(v20 + 81);
    if (v21 <= 1)
      LOBYTE(v21) = 1;
    *(_BYTE *)(v20 + 81) = v21;
    v22 = **(JSC::DFG::Node ***)(a1 + 24);
    v23 = JSC::DFG::Graph::freeze(*(_QWORD *)(v12 + 8), a3, v14, v15, v16, v17, v18, v19);
    v53 = *v23;
    v54 = *((_QWORD *)v23 + 2);
    v31 = *(_QWORD *)(v12 + 24);
    v32 = *(_QWORD *)(v31 + 8);
    v33 = *(unsigned int *)(((unint64_t)v22 & 0xFFFFFFFFFFFFFFFELL) + 20);
    v34 = (uint64_t *)(v32 + 24);
    v35 = (uint64_t *)(v32 + 8);
    if ((v22 & 1) != 0)
      v35 = v34;
    v36 = *v35;
    v37 = *v35 + 32 * v33;
    v38 = *(_DWORD *)(v31 + 88);
    v39 = (unsigned int *)(v37 + 20);
    v40 = *(_DWORD *)(v37 + 20);
    if (v38 != v40)
    {
      if ((*(_QWORD *)(v37 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v40 ^ v38) >= 2)
        {
          v41 = *(_QWORD *)v37;
          if (*(_QWORD *)v37 != 4)
          {
            *(_QWORD *)v37 = v41 | 2;
            v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v41 & 1) != 0)
            {
              v45 = 2 * *v42;
              while (v45 * 4)
              {
                v46 = *(_QWORD *)&v42[v45];
                if ((*(_BYTE *)(v46 + 19) & 0xC) == 0)
                {
                  v47 = *(_QWORD *)(v46 + 96);
                  v48 = (v47 & 1) != 0 ? (v47 >> 1) & 3 : *(unsigned __int8 *)(v47 + 4);
                  v45 -= 2;
                  if (v48 != 2)
                    continue;
                }
                v51 = v38;
                v50 = v33;
                v49 = v36;
                WTF::fastFree((unint64_t)v42, v24, v25, v26, v27, v28, v29, v30);
                v36 = v49;
                v39 = (unsigned int *)(v37 + 20);
                v33 = v50;
                v38 = v51;
                goto LABEL_25;
              }
            }
            else if (v42)
            {
              if ((*((_BYTE *)v42 + 19) & 0xC) != 0
                || ((v43 = *((_QWORD *)v42 + 12), (v43 & 1) != 0)
                  ? (v44 = (v43 >> 1) & 3)
                  : (v44 = *(unsigned __int8 *)(v43 + 4)),
                    v44 == 2))
              {
LABEL_25:
                *(_QWORD *)v37 = 4;
              }
            }
          }
          *(_DWORD *)(v36 + 32 * v33 + 16) = -21020677;
        }
        if ((v38 & 1) != 0)
          *(_QWORD *)v37 &= ~2uLL;
        *v39 = v38;
        v31 = *(_QWORD *)(v12 + 24);
      }
      else
      {
        *v39 = v38;
      }
    }
    JSC::DFG::AbstractValue::set(v37, *(_QWORD **)(v12 + 8), (unint64_t *)&v53, *(unsigned __int8 *)(v31 + 82), v27, v28, v29, v30);
    JSC::DFG::AbstractValue::fixTypeForRepresentation(v37, *(JSC::DFG::Graph **)(v12 + 8), v22);
  }
  return v8;
}

uint64_t JSC::DFG::StructureAbstractValue::toStructureSet@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this != 4 && (*(_QWORD *)this & 2) == 0)
  {
    *a2 = 0;
    v5 = (_DWORD *)(v3 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v3 & 1) != 0)
    {
      if (*v5)
      {
        v6 = 0;
        v7 = 0;
        do
        {
          v8 = &v5[2 * v7];
          v9 = *((_QWORD *)v8 + 1);
          if ((v6 & 1) != 0)
          {
            this = WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(a2, *((_QWORD *)v8 + 1));
            v6 = *a2;
          }
          else if (v9 != (v6 & 0xFFFFFFFFFFFFFFFCLL))
          {
            if ((v6 & 0xFFFFFFFFFFFFFFFCLL) != 0)
            {
              this = WTF::fastMalloc((WTF *)0x28);
              *(_QWORD *)this = 0x400000002;
              v10 = *a2;
              *(_QWORD *)(this + 8) = *a2 & 0xFFFFFFFFFFFFFFFCLL;
              *(_QWORD *)(this + 16) = v9;
              v6 = v10 & 2 | this | 1;
            }
            else
            {
              v6 = v6 & 2 | v9;
            }
            *a2 = v6;
          }
          ++v7;
        }
        while (v7 < *v5);
      }
    }
    else if (v5)
    {
      *a2 = (uint64_t)v5;
    }
  }
  else
  {
    this = 190;
    __break(0xC471u);
  }
  return this;
}

uint64_t *JSC::DFG::Graph::addStructureSet(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t *v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unint64_t *v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  uint64_t v86;

  v10 = *(_QWORD *)(a1 + 1064);
  *(_QWORD *)(a1 + 1064) = v10 + 1;
  v11 = v10 >> 4;
  v12 = *(unsigned int *)(a1 + 1084);
  if (v10 >> 4 >= v12)
  {
    v77 = (_QWORD *)(a1 + 1072);
    v78 = WTF::fastMalloc((WTF *)0x80);
    v86 = v78;
    v79 = *(unsigned int *)(a1 + 1084);
    if ((_DWORD)v79 == *(_DWORD *)(a1 + 1080))
    {
      v80 = (_QWORD *)WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 1072, v79 + 1, (unint64_t)&v86);
      v79 = *(unsigned int *)(a1 + 1084);
      *(_QWORD *)(*(_QWORD *)(a1 + 1072) + 8 * v79) = *v80;
    }
    else
    {
      *(_QWORD *)(*v77 + 8 * v79) = v78;
    }
    v12 = (v79 + 1);
    *(_DWORD *)(a1 + 1084) = v12;
    v10 = *(_QWORD *)(a1 + 1064) - 1;
    v11 = v10 >> 4;
  }
  if (v11 >= v12)
  {
    __break(0xC471u);
    JUMPOUT(0x197C6C2B8);
  }
  v13 = *(_QWORD *)(a1 + 1072);
  v14 = *(_QWORD *)(v13 + 8 * v11);
  v15 = v10 & 0xF;
  *(_QWORD *)(v14 + 8 * v15) = 0;
  v16 = v10 >> 4;
  if (v16 >= v12)
  {
LABEL_109:
    __break(0xC471u);
    JUMPOUT(0x197C6C294);
  }
  v17 = (uint64_t *)(*(_QWORD *)(v13 + 8 * v16) + 8 * v15);
  v18 = *a2;
  if ((*a2 & 1) != 0)
    v19 = *(unsigned int *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
  else
    v19 = v18 > 3;
  if (v19)
  {
    for (i = 0; i != v19; ++i)
    {
      v21 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
      if ((*a2 & 1) != 0)
        v21 = *(_QWORD *)(v21 + 8 * i + 8);
      if (v21)
      {
        v22 = *(_QWORD *)(a1 + 24);
        v23 = *(unsigned __int8 *)(v21 + 5);
        if (v23 == 1)
        {
          v24 = (uint64_t *)(v22 + 296);
          v25 = *(_QWORD *)(v22 + 296);
          if (v25
            || (WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v24, 0, (uint64_t)a3, a4, a5, a6, a7, a8), (v25 = *v24) != 0))
          {
            v26 = *(_DWORD *)(v25 - 8);
          }
          else
          {
            v26 = 0;
          }
          v27 = v21 >> 4;
          v28 = v26 & (v21 >> 4);
          v29 = (_DWORD *)(v25 + 4 * v28);
          v30 = *v29;
          if (*v29)
          {
            v31 = 0;
            v32 = 1;
            while (v30 != (_DWORD)v27)
            {
              if (v30 == 1)
                v31 = v29;
              v28 = (v28 + v32) & v26;
              v29 = (_DWORD *)(v25 + 4 * v28);
              v30 = *v29;
              ++v32;
              if (!*v29)
              {
                if (v31)
                {
                  *v31 = 0;
                  --*(_DWORD *)(*v24 - 16);
                  v29 = v31;
                }
                goto LABEL_22;
              }
            }
          }
          else
          {
LABEL_22:
            *v29 = v27;
            v33 = *v24;
            if (*v24)
              v34 = *(_DWORD *)(v33 - 12) + 1;
            else
              v34 = 1;
            *(_DWORD *)(v33 - 12) = v34;
            v35 = *v24;
            if (*v24)
              v36 = *(_DWORD *)(v35 - 12);
            else
              v36 = 0;
            v37 = (*(_DWORD *)(v35 - 16) + v36);
            v38 = *(unsigned int *)(v35 - 4);
            if (v38 > 0x400)
            {
              if (v38 <= 2 * v37)
LABEL_97:
                WTF::HashTable<JSC::StructureID,JSC::StructureID,WTF::IdentityExtractor,WTF::DefaultHash<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>,WTF::HashTraits<JSC::StructureID>>::expand(v24, (unint64_t)v29, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            else if (3 * v38 <= 4 * v37)
            {
              goto LABEL_97;
            }
          }
        }
        else
        {
          if (v23 == 18)
            goto LABEL_109;
          v54 = (uint64_t *)(v22 + 288);
          v55 = *(_QWORD *)(v22 + 288);
          if (v55
            || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v54, 8uLL, 0, a4, a5, a6, a7, a8), (v55 = *v54) != 0))
          {
            v56 = *(_DWORD *)(v55 - 8);
          }
          else
          {
            v56 = 0;
          }
          v57 = (~(v21 << 32) + v21) ^ ((~(v21 << 32) + v21) >> 22);
          v58 = 9 * ((v57 + ~(v57 << 13)) ^ ((v57 + ~(v57 << 13)) >> 8));
          v59 = (v58 ^ (v58 >> 15)) + ~((v58 ^ (v58 >> 15)) << 27);
          v60 = v56 & ((v59 >> 31) ^ v59);
          a3 = (unint64_t *)(v55 + 8 * v60);
          v61 = *a3;
          if (*a3)
          {
            v62 = 0;
            v63 = 1;
            while (v61 != v21)
            {
              if (v61 == -1)
                v62 = a3;
              v60 = (v60 + v63) & v56;
              a3 = (unint64_t *)(v55 + 8 * v60);
              v61 = *a3;
              ++v63;
              if (!*a3)
              {
                if (v62)
                {
                  *v62 = 0;
                  --*(_DWORD *)(*v54 - 16);
                  a3 = v62;
                }
                goto LABEL_68;
              }
            }
          }
          else
          {
LABEL_68:
            *a3 = v21;
            v74 = *v54;
            if (*v54)
              v75 = *(_DWORD *)(v74 - 12) + 1;
            else
              v75 = 1;
            *(_DWORD *)(v74 - 12) = v75;
            v71 = *v54;
            if (*v54)
              v85 = *(_DWORD *)(v71 - 12);
            else
              v85 = 0;
            v72 = (*(_DWORD *)(v71 - 16) + v85);
            v73 = *(unsigned int *)(v71 - 4);
            if (v73 > 0x400)
            {
              if (v73 > 2 * v72)
                goto LABEL_28;
LABEL_106:
              v81 = ((_DWORD)v73 << (6 * *(_DWORD *)(v71 - 12) >= (2 * v73)));
              goto LABEL_77;
            }
            if (3 * v73 <= 4 * v72)
            {
              if ((_DWORD)v73)
                goto LABEL_106;
              v81 = 8;
LABEL_77:
              WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v54, v81, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
          }
        }
      }
LABEL_28:
      if ((*(_BYTE *)(v21 + 19) & 0xC) == 0)
      {
        v40 = v21 + 96;
        v39 = *(_QWORD *)(v21 + 96);
        v41 = (v39 & 1) != 0 ? (v39 >> 1) & 3 : *(unsigned __int8 *)(v39 + 4);
        if (v41 != 2)
        {
          v42 = *(_QWORD *)(a1 + 24);
          v45 = *(_QWORD *)(v42 + 152);
          v44 = (uint64_t *)(v42 + 152);
          v43 = v45;
          if (v45
            || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v44, 8uLL, 0, a4, a5, a6, a7, a8), (v43 = *v44) != 0))
          {
            v46 = *(_DWORD *)(v43 - 8);
          }
          else
          {
            v46 = 0;
          }
          v47 = (~(v40 << 32) + v40) ^ ((~(v40 << 32) + v40) >> 22);
          v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
          v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
          v50 = v46 & ((v49 >> 31) ^ v49);
          a3 = (unint64_t *)(v43 + 8 * v50);
          v51 = *a3;
          if (*a3)
          {
            v52 = 0;
            v53 = 1;
            while (v51 != v40)
            {
              if (v51 == -1)
                v52 = a3;
              v50 = (v50 + v53) & v46;
              a3 = (unint64_t *)(v43 + 8 * v50);
              v51 = *a3;
              ++v53;
              if (!*a3)
              {
                if (v52)
                {
                  *v52 = 0;
                  --*(_DWORD *)(*v44 - 16);
                  a3 = v52;
                }
                goto LABEL_52;
              }
            }
            goto LABEL_58;
          }
LABEL_52:
          *a3 = v40;
          v64 = *v44;
          if (*v44)
            v65 = *(_DWORD *)(v64 - 12) + 1;
          else
            v65 = 1;
          *(_DWORD *)(v64 - 12) = v65;
          v66 = *v44;
          if (*v44)
            v67 = *(_DWORD *)(v66 - 12);
          else
            v67 = 0;
          v68 = (*(_DWORD *)(v66 - 16) + v67);
          v69 = *(unsigned int *)(v66 - 4);
          if (v69 > 0x400)
          {
            if (v69 > 2 * v68)
              goto LABEL_58;
LABEL_99:
            v84 = ((_DWORD)v69 << (6 * *(_DWORD *)(v66 - 12) >= (2 * v69)));
LABEL_91:
            WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(v44, v84, (uint64_t)a3, a4, a5, a6, a7, a8);
            goto LABEL_58;
          }
          if (3 * v69 <= 4 * v68)
          {
            if ((_DWORD)v69)
              goto LABEL_99;
            v84 = 8;
            goto LABEL_91;
          }
        }
      }
LABEL_58:
      v70 = *v17;
      if ((*v17 & 1) != 0)
      {
        WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(v17, v21);
      }
      else if (v21 != (v70 & 0xFFFFFFFFFFFFFFFCLL))
      {
        if ((v70 & 0xFFFFFFFFFFFFFFFCLL) != 0)
        {
          v82 = WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v82 = 0x400000002;
          v83 = *v17;
          *(_QWORD *)(v82 + 8) = *v17 & 0xFFFFFFFFFFFFFFFCLL;
          *(_QWORD *)(v82 + 16) = v21;
          *v17 = v83 & 2 | v82 | 1;
        }
        else
        {
          *v17 = *v17 & 2 | v21;
        }
      }
    }
  }
  return v17;
}

uint64_t JSC::DFG::Graph::isWatchingArrayBufferDetachWatchpoint(JSC::DFG::Graph *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v9 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v10 = *((_QWORD *)this + 4);
LABEL_3:
    v11 = (_QWORD *)(v9 & 0xFFFFFFFF8);
    v12 = 1;
    v13 = 1;
LABEL_4:
    v14 = v11;
    goto LABEL_5;
  }
  v17 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v18 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v18 != 0x3FFFFFFF) ? (v19 = v18 == -1) : (v19 = 1), v19))
  {
    v20 = 2;
  }
  else if (v18 >> 28)
  {
    v26 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v26 = v17;
    *(_DWORD *)(v26 + 8) = v18;
    v20 = 1;
    v17 = v26;
  }
  else
  {
    v20 = v17;
    v17 = 0;
  }
  v9 = v17 | v20;
  v10 = *((_QWORD *)this + 4);
  if ((v9 & 1) == 0)
    goto LABEL_3;
  v21 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
  if ((v9 & 2) != 0
    || ((v22 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8), v22 != 0x3FFFFFFF) ? (v23 = v22 == -1) : (v23 = 1), v23))
  {
    v24 = 2;
  }
  else if (v22 >> 28)
  {
    v27 = *(_DWORD *)((v9 & 0xFFFFFFFF8) + 8);
    v28 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v28 = v21;
    *(_DWORD *)(v28 + 8) = v27;
    v24 = 1;
    v21 = v28;
  }
  else
  {
    v24 = *(_QWORD *)(v9 & 0xFFFFFFFF8);
    v21 = 0;
  }
  v25 = v21 | v24;
  v11 = (_QWORD *)(v25 & 0xFFFFFFFF8);
  if ((v25 & 1) == 0)
  {
    v13 = 0;
    v12 = 1;
    goto LABEL_4;
  }
  v12 = 0;
  v13 = 0;
  v14 = (_QWORD *)*v11;
LABEL_5:
  if (v14)
    v10 = v14[1];
  v15 = *(_QWORD *)(v10 + 8);
  if ((v12 & 1) == 0 && v11)
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) == 0 && (v9 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v9 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return JSC::DFG::Graph::isWatchingGlobalObjectWatchpoint<JSC::WatchpointSet>((uint64_t)this, v15, *(_QWORD *)(v15 + 2080), 7, a5, a6, a7, a8);
}

void JSC::DFG::PhiChildren::forAllTransitiveIncomingValues<JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Node *)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  WTF *v21;
  unint64_t v22;
  BOOL v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  WTF *v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  unint64_t v62;
  unsigned int *v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  int v74[6];
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;

  v78 = a2;
  v9 = *(unsigned __int16 *)(a2 + 18);
  if (v9 != 27)
  {
    if (v9 <= 2)
    {
      v22 = **(_QWORD **)(a2 + 72);
      v23 = v22 && (v22 & 0xFFFE000000000002) == 0;
      if (v23 && *(_BYTE *)(v22 + 5) == 1)
      {
        v24 = *(_QWORD **)a3;
        v25 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), v22, v74, a4, a5, a6, a7, a8);
        v26 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFFCLL);
        if ((*v24 & 1) != 0)
        {
          v70 = *v26;
          if ((_DWORD)v70)
          {
            if (*((_QWORD *)v26 + 1) == v25)
              return;
            v71 = 0;
            v72 = v26 + 4;
            do
            {
              if (v70 - 1 == v71)
                goto LABEL_19;
              v73 = *(_QWORD *)&v72[2 * v71++];
            }
            while (v73 != v25);
            if (v71 < v70)
              return;
          }
        }
        else if (v26 == (unsigned int *)v25)
        {
          return;
        }
      }
    }
LABEL_19:
    **(_BYTE **)(a3 + 16) = 0;
    return;
  }
  v76 = 0;
  v77 = 0;
  v75 = 0;
  WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add(&v77, &v78, a3, a4, a5, a6, a7, a8, (uint64_t)v74);
  v18 = HIDWORD(v76);
  if (HIDWORD(v76) == (_DWORD)v76)
  {
    v69 = (_QWORD *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, HIDWORD(v76) + 1, (unint64_t)&v78);
    v18 = HIDWORD(v76);
    *((_QWORD *)v75 + HIDWORD(v76)) = *v69;
  }
  else
  {
    *((_QWORD *)v75 + HIDWORD(v76)) = v78;
  }
  v19 = __CFADD__(v18, 1);
  v20 = v18 + 1;
  HIDWORD(v76) = v20;
  if (v19)
    goto LABEL_6;
  do
  {
    v27 = *((_QWORD *)v75 + --v20);
    HIDWORD(v76) = v20;
    v28 = *a1;
    v29 = *(_DWORD *)(*a1 - 8);
    v30 = (~(v27 << 32) + v27) ^ ((unint64_t)(~(v27 << 32) + v27) >> 22);
    v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
    v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
    v33 = v29 & ((v32 >> 31) ^ v32);
    v34 = *a1 + 48 * v33;
    v35 = *(_QWORD *)v34;
    if (*(_QWORD *)v34 != v27)
    {
      v36 = 1;
      while (v35)
      {
        v33 = (v33 + v36) & v29;
        v34 = v28 + 48 * v33;
        v35 = *(_QWORD *)v34;
        ++v36;
        if (*(_QWORD *)v34 == v27)
          goto LABEL_25;
      }
      v34 = v28 + 48 * *(unsigned int *)(v28 - 4);
    }
LABEL_25:
    v37 = *(unsigned int *)(v34 + 20);
    if (!(_DWORD)v37)
      continue;
    v38 = *(_QWORD *)(v34 + 8);
    v39 = v38 + 8 * v37;
    do
    {
      v40 = *(_QWORD *)(*(_QWORD *)v38 + 24) & 0xFF00FFFFFFFFFFFFLL;
      *(_QWORD *)v74 = v40;
      v41 = *(unsigned __int16 *)(v40 + 18);
      if (v41 == 27)
      {
        v42 = v77;
        if (v77
          || (WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(&v77, 0, v12, v13, v14, v15, v16, v17), (v42 = v77) != 0))
        {
          v43 = *(_DWORD *)(v42 - 8);
        }
        else
        {
          v43 = 0;
        }
        v44 = *(_QWORD *)v74;
        v45 = (~(*(_QWORD *)v74 << 32) + *(_QWORD *)v74) ^ ((~(*(_QWORD *)v74 << 32) + *(_QWORD *)v74) >> 22);
        v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((unint64_t)(v45 + ~(v45 << 13)) >> 8));
        v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
        v48 = v43 & ((v47 >> 31) ^ v47);
        v11 = v42 + 8 * v48;
        v49 = *(_QWORD *)v11;
        if (!*(_QWORD *)v11)
        {
LABEL_38:
          *(_QWORD *)v11 = v44;
          if (v77)
            v52 = *(_DWORD *)(v77 - 12) + 1;
          else
            v52 = 1;
          *(_DWORD *)(v77 - 12) = v52;
          if (v77)
            v53 = *(_DWORD *)(v77 - 12);
          else
            v53 = 0;
          v54 = (*(_DWORD *)(v77 - 16) + v53);
          v55 = *(unsigned int *)(v77 - 4);
          if (v55 > 0x400)
          {
            if (v55 > 2 * v54)
              goto LABEL_44;
          }
          else if (3 * v55 > 4 * v54)
          {
LABEL_44:
            v56 = HIDWORD(v76);
            if (HIDWORD(v76) == (_DWORD)v76)
            {
              v64 = (uint64_t *)WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v75, HIDWORD(v76) + 1, (unint64_t)v74);
              v56 = HIDWORD(v76);
              v57 = HIDWORD(v76) + 1;
              v58 = v75;
              v59 = *v64;
            }
            else
            {
              v57 = HIDWORD(v76) + 1;
              v58 = v75;
              v59 = *(_QWORD *)v74;
            }
            *((_QWORD *)v58 + v56) = v59;
            HIDWORD(v76) = v57;
            goto LABEL_57;
          }
          WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(&v77, (uint64_t *)v11, v12, v13, v14, v15, v16, v17);
          goto LABEL_44;
        }
        v50 = 0;
        v51 = 1;
        while (v49 != *(_QWORD *)v74)
        {
          if (v49 == -1)
            v50 = (_QWORD *)v11;
          v48 = (v48 + v51) & v43;
          v11 = v42 + 8 * v48;
          v49 = *(_QWORD *)v11;
          ++v51;
          if (!*(_QWORD *)v11)
          {
            if (v50)
            {
              *v50 = 0;
              --*(_DWORD *)(v77 - 16);
              v44 = *(_QWORD *)v74;
              v11 = (unint64_t)v50;
            }
            goto LABEL_38;
          }
        }
      }
      else
      {
        if (v41 > 2)
          goto LABEL_56;
        v11 = **(_QWORD **)(v40 + 72);
        v60 = v11 && (v11 & 0xFFFE000000000002) == 0;
        if (!v60 || *(_BYTE *)(v11 + 5) != 1)
          goto LABEL_56;
        v61 = *(_QWORD **)a3;
        v62 = JSC::DFG::Graph::registerStructure(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 8), v11, &v79, v13, v14, v15, v16, v17);
        v63 = (unsigned int *)(*v61 & 0xFFFFFFFFFFFFFFFCLL);
        if ((*v61 & 1) == 0)
        {
          if (v63 == (unsigned int *)v62)
            goto LABEL_57;
          goto LABEL_56;
        }
        v65 = *v63;
        if (!(_DWORD)v65)
          goto LABEL_56;
        if (*((_QWORD *)v63 + 1) != v62)
        {
          v66 = 0;
          v67 = v63 + 4;
          while (v65 - 1 != v66)
          {
            v68 = *(_QWORD *)&v67[2 * v66++];
            if (v68 == v62)
            {
              if (v66 >= v65)
                break;
              goto LABEL_57;
            }
          }
LABEL_56:
          **(_BYTE **)(a3 + 16) = 0;
        }
      }
LABEL_57:
      v38 += 8;
    }
    while (v38 != v39);
    v20 = HIDWORD(v76);
  }
  while (v20);
LABEL_6:
  v21 = v75;
  if (v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree((unint64_t)v21, (void *)v11, v12, v13, v14, v15, v16, v17);
  }
  if (v77)
    WTF::fastFree(v77 - 16, (void *)v11, v12, v13, v14, v15, v16, v17);
}

uint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::filterByValue<JSC::DFG::Edge>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;

  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v20 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v20 | 2;
          v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v20 & 1) != 0)
          {
            v24 = 2 * *v21;
            while (v24 * 4)
            {
              v25 = *(_QWORD *)&v21[v24];
              if ((*(_BYTE *)(v25 + 19) & 0xC) == 0)
              {
                v26 = *(_QWORD *)(v25 + 96);
                v27 = (v26 & 1) != 0 ? (v26 >> 1) & 3 : *(unsigned __int8 *)(v26 + 4);
                v24 -= 2;
                if (v27 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v21, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_31;
            }
          }
          else if (v21)
          {
            if ((*((_BYTE *)v21 + 19) & 0xC) != 0
              || ((v22 = *((_QWORD *)v21 + 12), (v22 & 1) != 0)
                ? (v23 = (v22 >> 1) & 3)
                : (v23 = *(unsigned __int8 *)(v22 + 4)),
                  v23 == 2))
            {
LABEL_31:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  v28 = *(_OWORD *)a3;
  v29 = *(_QWORD *)(a3 + 16);
  result = JSC::DFG::AbstractValue::filterByValue((JSC::DFG::AbstractValue *)v16, (const JSC::DFG::FrozenValue *)&v28, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 80) = 0;
    return 1;
  }
  return result;
}

uint64_t JSC::DFG::ArrayMode::arrayModesThatPassFiltering(JSC::DFG::ArrayMode *this)
{
  int v1;
  unsigned int v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unsigned int *v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;

  v1 = *(unsigned __int8 *)this;
  if (v1 != 9)
  {
    v5 = v1 - 4;
    v4 = 0x10000;
    switch(v5)
    {
      case 0:
        return 4273946619;
      case 2:
        v6 = *((char *)this + 1);
        if (v6 >= 7)
          return 0;
        v7 = (unsigned int *)&unk_1991242C0;
        return v7[v6];
      case 3:
        v2 = *((unsigned __int8 *)this + 1);
        if (v2 >= 7)
          goto LABEL_17;
        v3 = &unk_1991242DC;
        goto LABEL_4;
      case 4:
        v2 = *((unsigned __int8 *)this + 1);
        if (v2 >= 7)
          goto LABEL_17;
        v3 = &unk_1991242F8;
        goto LABEL_4;
      case 6:
        v6 = *((char *)this + 1);
        if (v6 >= 7)
          return 0;
        v7 = (unsigned int *)&unk_199124330;
        return v7[v6];
      case 7:
        v14 = *((unsigned __int8 *)this + 1);
        if (v14 - 2 >= 3)
        {
          if (v14 >= 2)
          {
            if (v14 == 6)
            {
              v15 = 12288;
              goto LABEL_52;
            }
            if (v14 == 5)
            {
              v15 = 536879104;
              goto LABEL_67;
            }
            v15 = 0;
          }
          else
          {
            v15 = 4096;
          }
        }
        else
        {
          v15 = 0x2000;
        }
        if (v14 - 2 < 3)
        {
          v16 = 2048;
          return v16 | v15;
        }
        if (v14 < 2)
        {
          v16 = 1024;
          return v16 | v15;
        }
        if (v14 != 5)
        {
          if (v14 != 6)
          {
            v16 = 0;
            return v16 | v15;
          }
LABEL_52:
          v16 = 3072;
          return v16 | v15;
        }
LABEL_67:
        v16 = 134219776;
        return v16 | v15;
      case 8:
      case 9:
        v9 = 536879104;
        v10 = *((unsigned __int8 *)this + 1);
        v11 = v10 - 2;
        if (v10 - 2 >= 3)
        {
          if (v10 >= 2)
          {
            if (v10 == 6)
            {
              v9 = 12288;
              v12 = 3072;
              goto LABEL_49;
            }
            if (v10 == 5)
            {
              v12 = 134219776;
              goto LABEL_64;
            }
            v12 = 0;
          }
          else
          {
            v12 = 1024;
          }
        }
        else
        {
          v12 = 2048;
        }
        if (v11 >= 3)
        {
          if (v10 >= 2)
          {
            if (v10 == 5)
              goto LABEL_64;
            if (v10 == 6)
            {
              v9 = 12288;
              goto LABEL_49;
            }
            v9 = 0;
          }
          else
          {
            v9 = 4096;
          }
        }
        else
        {
          v9 = 0x2000;
        }
        if (v11 < 3)
        {
          v13 = 2;
          return v9 | v12 | v13;
        }
        if (v10 < 2)
        {
          v13 = 1;
          return v9 | v12 | v13;
        }
        if (v10 != 5)
        {
          if (v10 != 6)
          {
            v13 = 0;
            return v9 | v12 | v13;
          }
LABEL_49:
          v13 = 3;
          return v9 | v12 | v13;
        }
LABEL_64:
        v13 = 131074;
        return v9 | v12 | v13;
      case 10:
        return v4;
      case 11:
        return 0x20000;
      case 12:
        return 0x40000;
      case 13:
        return 0x80000;
      case 14:
        return 0x100000;
      case 15:
        return 0x4000000;
      case 16:
        return 0x8000000;
      case 17:
        return 0x10000000;
      case 18:
        return 0x20000000;
      case 19:
        return 0x40000000;
      case 20:
        return 0x80000000;
      case 21:
        return 4229890048;
      default:
        return 1;
    }
  }
  v2 = *((unsigned __int8 *)this + 1);
  if (v2 >= 7)
  {
LABEL_17:
    LODWORD(v4) = 0;
  }
  else
  {
    v3 = &unk_199124314;
LABEL_4:
    LODWORD(v4) = v3[(char)v2];
  }
  if ((*((_BYTE *)this + 3) & 0x10) != 0)
    return v4 & 0x3F0;
  else
    return v4;
}

uint64_t JSC::JSArrayBufferView::byteOffset(JSC::JSArrayBufferView *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char v11;

  if ((*((_BYTE *)this + 40) & 7u) > 2
    && (LOBYTE(v10) = 0,
        v11 = 0,
        JSC::isArrayBufferViewOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(this, &v10, a3, a4, a5, a6, a7, a8)))
  {
    return 0;
  }
  else
  {
    return *((_QWORD *)this + 4);
  }
}

uint64_t *JSC::DFG::RegisteredStructureSet::RegisteredStructureSet(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  *a1 = 0;
  v3 = *a2;
  if ((*a2 & 1) == 0 || v3 == 4)
    *a1 = v3 & 0xFFFFFFFFFFFFFFFDLL;
  else
    WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(a1, a2);
  return a1;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::observeTransitions(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;

  if (a3[3])
  {
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_DWORD *)(*(_QWORD *)(v9 + 72) + 220) > dword_1ECF4C460)
    {
      *(_DWORD *)(v9 + 88) = (*(_DWORD *)(v9 + 88) & 0xFFFFFFFE) + 2;
      v12 = *(unsigned __int8 *)(v9 + 81);
      if (v12 <= 3)
        LOBYTE(v12) = 3;
      *(_BYTE *)(v9 + 81) = v12;
      *(_BYTE *)(v9 + 82) = 1;
    }
    else
    {
      v13 = a3;
      JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::forAllValues<JSC::DFG::AbstractValue::TransitionsObserver>(a1, a2, &v13, a4, a5, a6, a7, a8);
      v10 = *(_QWORD *)(a1 + 24);
      v11 = *(unsigned __int8 *)(v10 + 81);
      if (v11 <= 2)
        LOBYTE(v11) = 2;
      *(_BYTE *)(v10 + 81) = v11;
    }
  }
}

unint64_t JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::setTupleConstant(unint64_t result, JSC::DFG::Node *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v8 = *(_QWORD *)(result + 24);
  v9 = (~*(_DWORD *)(((unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL) + 48) + a3);
  if (*(_DWORD *)(v8 + 52) <= v9)
  {
    __break(0xC471u);
  }
  else
  {
    v12 = result;
    v13 = *(_QWORD *)(v8 + 40) + 32 * v9;
    v14 = (void *)*(unsigned int *)(v8 + 88);
    if ((_DWORD)v14 != *(_DWORD *)(v13 + 20))
    {
      if ((*(_QWORD *)(v13 + 8) & 0x2800FFFFFFF7) != 0)
      {
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v13, v14, a3, (uint64_t)a4, a5, a6, a7, a8);
        v8 = *(_QWORD *)(v12 + 24);
      }
      else
      {
        *(_DWORD *)(v13 + 20) = (_DWORD)v14;
      }
    }
    JSC::DFG::AbstractValue::set(v13, *(_QWORD **)(v12 + 8), a4, *(unsigned __int8 *)(v8 + 82), a5, a6, a7, a8);
    return JSC::DFG::AbstractValue::fixTypeForRepresentation(v13, *(JSC::DFG::Graph **)(v12 + 8), a2);
  }
  return result;
}

void WTF::toCString<char [32],JSC::DFG::Node *,char [3],JSC::DFG::Edge,char [45],JSC::DFG::UseKind,char [13],JSC::SpeculationDump>(const char *a1@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, JSC::DFG::Edge *a4@<X3>, const char *a5@<X4>, unsigned __int8 *a6@<X5>, const char *a7@<X6>, WTF::PrintStream **a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v17;
  const char *v18;
  WTF::PrintStream **v19;
  int v20;
  WTF::PrintStream *v21;
  const char *v22;
  WTF::PrintStream *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (**v36)(WTF::StringPrintStream *__hidden);
  _BYTE *v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v36 = off_1E3572250;
  v37 = v39;
  v38 = xmmword_199122F80;
  v39[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v36, "%s", a1);
  v17 = *a2;
  if (*a2)
  {
    v18 = a7;
    v19 = a8;
    v20 = *(_DWORD *)(v17 + 20);
    v21 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v36[4])(&v36);
    WTF::PrintStream::printf(v21, "%s", "D@");
    WTF::PrintStream::printf(v21, "%u", v20);
    v36[5]((WTF::StringPrintStream *)&v36);
    if ((*(_DWORD *)(v17 + 56) & 7) == 3)
    {
      v22 = "<Double>";
      a8 = v19;
      a7 = v18;
    }
    else
    {
      a8 = v19;
      a7 = v18;
      if ((*(_DWORD *)(v17 + 56) & 7) != 5)
        goto LABEL_8;
      v22 = "<Int52>";
    }
  }
  else
  {
    v22 = "-";
  }
  v23 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v36[4])(&v36);
  WTF::PrintStream::printf(v23, "%s", v22);
  v36[5]((WTF::StringPrintStream *)&v36);
LABEL_8:
  WTF::PrintStream::printf((WTF::PrintStream *)&v36, "%s", a3);
  JSC::DFG::Edge::dump(a4, (WTF::PrintStream *)&v36);
  WTF::PrintStream::printf((WTF::PrintStream *)&v36, "%s", a5);
  WTF::printInternal((uint64_t)&v36, *a6);
  WTF::PrintStream::printf((WTF::PrintStream *)&v36, "%s", a7);
  JSC::dumpSpeculation((JSC *)&v36, *a8);
  v36[5]((WTF::StringPrintStream *)&v36);
  v32 = v37;
  v31 = v38;
  *a9 = 0;
  if (!v32)
  {
    v35 = 0;
LABEL_13:
    WTF::fastFree(v35, v24, v25, v26, v27, v28, v29, v30);
    return;
  }
  if (v31 > 0xFFFFFFFFFFFFFFEELL)
  {
    __break(0xC471u);
    JUMPOUT(0x197C6D1A0);
  }
  v33 = WTF::fastMalloc((WTF *)(v31 + 17));
  *(_DWORD *)v33 = 1;
  *(_QWORD *)(v33 + 8) = v31;
  *a9 = v33;
  v34 = v33 + 16;
  memcpy((void *)(v33 + 16), v32, v31);
  *(_BYTE *)(v34 + v31) = 0;
  v35 = (unint64_t)v37;
  if (v37 != v39)
    goto LABEL_13;
}

__n128 JSC::DFG::AbstractValue::set(JSC::DFG::AbstractValue *this, JSC::DFG::Graph *a2, const JSC::DFG::AbstractValue *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 result;

  v10 = *(_QWORD *)this;
  if (this != a3)
  {
    if ((v10 & 1) != 0)
      WTF::fastFree(v10 & 0xFFFFFFFFFFFFFFFCLL, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v11 = *(_QWORD *)a3;
    if ((*(_QWORD *)a3 & 1) == 0 || v11 == 4)
    {
      v12 = v11 & 0xFFFFFFFFFFFFFFFDLL;
      v10 = v11 | 2;
      if ((*(_BYTE *)this & 2) == 0)
        v10 = v12;
      *(_QWORD *)this = v10;
    }
    else
    {
      WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)this, a3);
      v10 = *(_QWORD *)this;
    }
  }
  v13 = v10 & 0xFFFFFFFFFFFFFFFDLL;
  v14 = v10 | 2;
  if ((*(_BYTE *)a3 & 2) == 0)
    v14 = v13;
  *(_QWORD *)this = v14;
  result = *(__n128 *)((char *)a3 + 8);
  *((_QWORD *)this + 3) = *((_QWORD *)a3 + 3);
  *(__n128 *)((char *)this + 8) = result;
  return result;
}

uint64_t WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine(uint64_t *a1, _QWORD *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v3 = (_DWORD *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
  v4 = *v3;
  v5 = 8 * v4;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (!v6)
    goto LABEL_5;
  v7 = (unint64_t)(v5 + 23) >> 4;
  if (v4 <= 0x33)
  {
    v8 = 23 * v7 + 7;
  }
  else if (v4 > 0x4E1
         || (v8 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v7 + 626),
             *(_DWORD *)(v6 + 8052) <= v8))
  {
LABEL_5:
    result = bmalloc_allocate_casual(v5 + 8, 1);
    goto LABEL_10;
  }
  v10 = v6 + 8 * v8;
  v11 = v10 + 8064;
  *(_BYTE *)(v10 + 8064) = 1;
  v12 = *(unsigned int *)(v10 + 8080);
  if ((_DWORD)v12)
  {
    *(_DWORD *)(v11 + 16) = v12 - *(_DWORD *)(v11 + 20);
    result = *(_QWORD *)(v11 + 8) - v12;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 40);
    v17 = *(_QWORD *)(v11 + 24);
    if (!v16)
    {
      if (*(_BYTE *)(v11 + 5) == 6)
      {
        v19 = *(unsigned int *)(v11 + 32);
        v20 = *(_DWORD *)(v11 + 36);
        if (v19 < v20)
        {
          *(_QWORD *)(v11 + 8 * v19 + 56) = 0;
          v21 = (unint64_t *)(8 * v8 + 8 * v19 + v6 + 8128);
          v22 = v20 - 1 - v19;
          while (v22)
          {
            v17 += 1024;
            v24 = *v21++;
            v23 = v24;
            LODWORD(v19) = v19 + 1;
            --v22;
            if (v24)
            {
              v16 = __rbit64(v23);
              *(_DWORD *)(v11 + 32) = v19;
              *(_QWORD *)(v11 + 24) = v17;
              goto LABEL_15;
            }
          }
          *(_DWORD *)(v11 + 32) = v20;
        }
      }
      *(_BYTE *)v11 = 0;
      goto LABEL_5;
    }
LABEL_15:
    v18 = __clz(v16);
    *(_QWORD *)(v11 + 40) = v16 & ~(0x8000000000000000 >> v18);
    result = v17 + 16 * v18;
  }
  *(_BYTE *)v11 = 0;
LABEL_10:
  *(_DWORD *)result = 0;
  *(_DWORD *)(result + 4) = v4;
  *(_DWORD *)result = *v3;
  v13 = *v3;
  if ((_DWORD)v13)
  {
    v14 = v13 - 1;
    do
    {
      v15 = v14;
      *(_QWORD *)(result + 8 + 8 * v14) = *(_QWORD *)&v3[2 * v14 + 2];
      --v14;
    }
    while (v15);
  }
  *a1 = *a1 & 2 | result | 1;
  return result;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#1}::operator()(_BYTE **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;

  v9 = *((_QWORD *)*a1 + 3);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = (_QWORD *)(v10 + 24);
  v12 = (_QWORD *)(v10 + 8);
  if ((*a2 & 1) != 0)
    v13 = v11;
  else
    v13 = v12;
  v14 = *v13 + 32 * *(unsigned int *)((*a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (void *)*(unsigned int *)(v9 + 88);
  if ((_DWORD)v15 != *(_DWORD *)(v14 + 20))
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v14, v15, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v14 + 20) = (_DWORD)v15;
  }
  if ((*(_QWORD *)(v14 + 8) & 0xFFFFFFFFCFFFFFFFLL) != 0)
    *a1[1] = 0;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#2}::operator()(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;

  v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = (_QWORD *)(v10 + 24);
  v12 = (_QWORD *)(v10 + 8);
  if ((*a2 & 1) != 0)
    v13 = v11;
  else
    v13 = v12;
  v14 = *v13 + 32 * *(unsigned int *)((*a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (void *)*(unsigned int *)(v9 + 88);
  if ((_DWORD)v15 != *(_DWORD *)(v14 + 20))
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v14, v15, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v14 + 20) = (_DWORD)v15;
  }
  v16 = *(_QWORD *)(v14 + 24);
  if (v16 > 0xFFFDFFFFFFFFFFFFLL)
  {
    v17 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v17 + 4))
    {
      if (*(_DWORD *)v17 < (int)v16)
        LODWORD(v16) = *(_DWORD *)v17;
      *(_DWORD *)v17 = v16;
    }
    else
    {
      *(_DWORD *)v17 = v16;
    }
    *(_BYTE *)(v17 + 4) = 1;
  }
  else
  {
    **(_BYTE **)(a1 + 8) = 0;
  }
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#3}::operator()(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t *v32;
  double v33;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  double v51;

  v9 = *a1;
  v10 = a1[1];
  v11 = **a1;
  v12 = *a2;
  v13 = v10[3];
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *a2 & 0xFF00FFFFFFFFFFFELL;
  v16 = *(unsigned int *)(v15 + 0x14);
  v17 = (uint64_t *)(v14 + 24);
  if ((*a2 & 1) == 0)
    v17 = (uint64_t *)(v14 + 8);
  v18 = *v17;
  v19 = *v17 + 32 * v16;
  v20 = *(_DWORD *)(v13 + 88);
  v22 = (unsigned int *)(v19 + 20);
  v21 = *(_DWORD *)(v19 + 20);
  if (v20 != v21)
  {
    if ((*(_QWORD *)(v19 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v21 ^ v20) >= 2)
      {
        v35 = *(_QWORD *)v19;
        if (*(_QWORD *)v19 != 4)
        {
          *(_QWORD *)v19 = v35 | 2;
          v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v35 & 1) != 0)
          {
            v43 = 2 * *v37;
            while (v43 * 4)
            {
              v44 = *(_QWORD *)&v37[v43];
              if ((*(_BYTE *)(v44 + 19) & 0xC) == 0)
              {
                v45 = *(_QWORD *)(v44 + 96);
                v46 = (v45 & 1) != 0 ? (v45 >> 1) & 3 : *(unsigned __int8 *)(v45 + 4);
                v43 -= 2;
                if (v46 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v37, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_35;
            }
          }
          else if (v37)
          {
            if ((*((_BYTE *)v37 + 19) & 0xC) != 0
              || ((v38 = *((_QWORD *)v37 + 12), (v38 & 1) != 0)
                ? (v39 = (v38 >> 1) & 3)
                : (v39 = *(unsigned __int8 *)(v38 + 4)),
                  v39 == 2))
            {
LABEL_35:
              *(_QWORD *)v19 = 4;
            }
          }
        }
        *(_DWORD *)(v18 + 32 * v16 + 16) = -21020677;
      }
      if ((v20 & 1) != 0)
        *(_QWORD *)v19 &= ~2uLL;
      *v22 = v20;
      v9 = *a1;
      v12 = *a2;
      v13 = v10[3];
      v14 = *(_QWORD *)(v13 + 8);
      v15 = *a2 & 0xFF00FFFFFFFFFFFELL;
    }
    else
    {
      *v22 = v20;
    }
  }
  *v9 = ((*(_QWORD *)(v19 + 8) | v11) >> 1) & 0x4000000000 | *(_QWORD *)(v19 + 8) | v11;
  v23 = *(unsigned int *)(v15 + 20);
  v24 = (uint64_t *)(v14 + 24);
  v25 = (uint64_t *)(v14 + 8);
  if ((v12 & 1) != 0)
    v26 = v24;
  else
    v26 = v25;
  v27 = *v26;
  v28 = *v26 + 32 * v23;
  v29 = *(_DWORD *)(v13 + 88);
  v30 = *(_DWORD *)(v28 + 20);
  if (v29 != v30)
  {
    if ((*(_QWORD *)(v28 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v30 ^ v29) >= 2)
      {
        v36 = *(_QWORD *)v28;
        if (*(_QWORD *)v28 != 4)
        {
          *(_QWORD *)v28 = v36 | 2;
          v40 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v36 & 1) != 0)
          {
            v47 = 2 * *v40;
            while (v47 * 4)
            {
              v48 = *(_QWORD *)&v40[v47];
              if ((*(_BYTE *)(v48 + 19) & 0xC) == 0)
              {
                v49 = *(_QWORD *)(v48 + 96);
                v50 = (v49 & 1) != 0 ? (v49 >> 1) & 3 : *(unsigned __int8 *)(v49 + 4);
                v47 -= 2;
                if (v50 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v40, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_42;
            }
          }
          else if (v40)
          {
            if ((*((_BYTE *)v40 + 19) & 0xC) != 0
              || ((v41 = *((_QWORD *)v40 + 12), (v41 & 1) != 0)
                ? (v42 = (v41 >> 1) & 3)
                : (v42 = *(unsigned __int8 *)(v41 + 4)),
                  v42 == 2))
            {
LABEL_42:
              *(_QWORD *)v28 = 4;
            }
          }
        }
        *(_DWORD *)(v27 + 32 * v23 + 16) = -21020677;
      }
      if ((v29 & 1) != 0)
        *(_QWORD *)v28 &= ~2uLL;
    }
    *(_DWORD *)(v28 + 20) = v29;
  }
  v31 = *(_QWORD *)(v28 + 24);
  if (v31 >> 49)
  {
    v32 = a1[3];
    if (*((_BYTE *)v32 + 8))
    {
      v33 = *(double *)v32;
      v51 = (double)(int)v31;
      if (v31 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v51 = v31 - 0x2000000000000;
      if (v33 >= v51 && (v51 != 0.0 || v33 != 0.0 || (*(_QWORD *)&v33 & 0x8000000000000000) == 0))
      {
        if (v51 <= v33)
          v33 = -0.0;
        v33 = v51 + v33;
      }
    }
    else
    {
      v33 = (double)(int)v31;
      if (v31 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v33 = v31 - 0x2000000000000;
    }
    *(double *)v32 = v33;
    *((_BYTE *)v32 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a1[2] = 0;
  }
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#4}::operator()(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;

  v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = (_QWORD *)(v10 + 24);
  v12 = (_QWORD *)(v10 + 8);
  if ((*a2 & 1) != 0)
    v13 = v11;
  else
    v13 = v12;
  v14 = *v13 + 32 * *(unsigned int *)((*a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (void *)*(unsigned int *)(v9 + 88);
  if ((_DWORD)v15 != *(_DWORD *)(v14 + 20))
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v14, v15, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v14 + 20) = (_DWORD)v15;
  }
  v16 = *(_QWORD *)(v14 + 24);
  if (v16 > 0xFFFDFFFFFFFFFFFFLL)
  {
    v17 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(v17 + 4))
    {
      if (*(_DWORD *)v17 > (int)v16)
        LODWORD(v16) = *(_DWORD *)v17;
      *(_DWORD *)v17 = v16;
    }
    else
    {
      *(_DWORD *)v17 = v16;
    }
    *(_BYTE *)(v17 + 4) = 1;
  }
  else
  {
    **(_BYTE **)(a1 + 8) = 0;
  }
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::Edge &)#5}::operator()(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t *v32;
  double v33;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;

  v9 = *a1;
  v10 = a1[1];
  v11 = **a1;
  v12 = *a2;
  v13 = v10[3];
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *a2 & 0xFF00FFFFFFFFFFFELL;
  v16 = *(unsigned int *)(v15 + 0x14);
  v17 = (uint64_t *)(v14 + 24);
  if ((*a2 & 1) == 0)
    v17 = (uint64_t *)(v14 + 8);
  v18 = *v17;
  v19 = *v17 + 32 * v16;
  v20 = *(_DWORD *)(v13 + 88);
  v22 = (unsigned int *)(v19 + 20);
  v21 = *(_DWORD *)(v19 + 20);
  if (v20 != v21)
  {
    if ((*(_QWORD *)(v19 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v21 ^ v20) >= 2)
      {
        v35 = *(_QWORD *)v19;
        if (*(_QWORD *)v19 != 4)
        {
          *(_QWORD *)v19 = v35 | 2;
          v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v35 & 1) != 0)
          {
            v44 = 2 * *v37;
            while (v44 * 4)
            {
              v45 = *(_QWORD *)&v37[v44];
              if ((*(_BYTE *)(v45 + 19) & 0xC) == 0)
              {
                v46 = *(_QWORD *)(v45 + 96);
                v47 = (v46 & 1) != 0 ? (v46 >> 1) & 3 : *(unsigned __int8 *)(v46 + 4);
                v44 -= 2;
                if (v47 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v37, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_35;
            }
          }
          else if (v37)
          {
            if ((*((_BYTE *)v37 + 19) & 0xC) != 0
              || ((v38 = *((_QWORD *)v37 + 12), (v38 & 1) != 0)
                ? (v39 = (v38 >> 1) & 3)
                : (v39 = *(unsigned __int8 *)(v38 + 4)),
                  v39 == 2))
            {
LABEL_35:
              *(_QWORD *)v19 = 4;
            }
          }
        }
        *(_DWORD *)(v18 + 32 * v16 + 16) = -21020677;
      }
      if ((v20 & 1) != 0)
        *(_QWORD *)v19 &= ~2uLL;
      *v22 = v20;
      v9 = *a1;
      v12 = *a2;
      v13 = v10[3];
      v14 = *(_QWORD *)(v13 + 8);
      v15 = *a2 & 0xFF00FFFFFFFFFFFELL;
    }
    else
    {
      *v22 = v20;
    }
  }
  *v9 = ((*(_QWORD *)(v19 + 8) | v11) >> 1) & 0x4000000000 | *(_QWORD *)(v19 + 8) | v11;
  v23 = *(unsigned int *)(v15 + 20);
  v24 = (uint64_t *)(v14 + 24);
  v25 = (uint64_t *)(v14 + 8);
  if ((v12 & 1) != 0)
    v26 = v24;
  else
    v26 = v25;
  v27 = *v26;
  v28 = *v26 + 32 * v23;
  v29 = *(_DWORD *)(v13 + 88);
  v30 = *(_DWORD *)(v28 + 20);
  if (v29 != v30)
  {
    if ((*(_QWORD *)(v28 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v30 ^ v29) >= 2)
      {
        v36 = *(_QWORD *)v28;
        if (*(_QWORD *)v28 != 4)
        {
          *(_QWORD *)v28 = v36 | 2;
          v40 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v36 & 1) != 0)
          {
            v48 = 2 * *v40;
            while (v48 * 4)
            {
              v49 = *(_QWORD *)&v40[v48];
              if ((*(_BYTE *)(v49 + 19) & 0xC) == 0)
              {
                v50 = *(_QWORD *)(v49 + 96);
                v51 = (v50 & 1) != 0 ? (v50 >> 1) & 3 : *(unsigned __int8 *)(v50 + 4);
                v48 -= 2;
                if (v51 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v40, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_42;
            }
          }
          else if (v40)
          {
            if ((*((_BYTE *)v40 + 19) & 0xC) != 0
              || ((v41 = *((_QWORD *)v40 + 12), (v41 & 1) != 0)
                ? (v42 = (v41 >> 1) & 3)
                : (v42 = *(unsigned __int8 *)(v41 + 4)),
                  v42 == 2))
            {
LABEL_42:
              *(_QWORD *)v28 = 4;
            }
          }
        }
        *(_DWORD *)(v27 + 32 * v23 + 16) = -21020677;
      }
      if ((v29 & 1) != 0)
        *(_QWORD *)v28 &= ~2uLL;
    }
    *(_DWORD *)(v28 + 20) = v29;
  }
  v31 = *(_QWORD *)(v28 + 24);
  if (v31 >> 49)
  {
    v32 = a1[3];
    if (*((_BYTE *)v32 + 8))
    {
      v33 = *(double *)v32;
      v43 = (double)(int)v31;
      if (v31 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v43 = v31 - 0x2000000000000;
      if (v33 <= v43 && (v43 != 0.0 || v33 != 0.0 || (*(_QWORD *)&v33 & 0x8000000000000000) != 0))
      {
        if (v43 >= v33)
          v33 = -0.0;
        v33 = v43 + v33;
      }
    }
    else
    {
      v33 = (double)(int)v31;
      if (v31 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v33 = v31 - 0x2000000000000;
    }
    *(double *)v32 = v33;
    *((_BYTE *)v32 + 8) = 1;
  }
  else
  {
    *(_BYTE *)a1[2] = 0;
  }
}

BOOL WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(uint64_t *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFFCLL);
  v5 = *v4;
  if ((_DWORD)v5)
  {
    if (*((_QWORD *)v4 + 1) == a2)
      return 0;
    v6 = 0;
    while (v5 - 1 != v6)
    {
      v7 = *(_QWORD *)&v4[2 * v6++ + 4];
      if (v7 == a2)
        return v6 >= v5;
    }
  }
  v9 = v4[1];
  if (v5 >= v9)
  {
    v10 = 2 * v9;
    v11 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * ((2 * v9) >> 1)) | 8));
    v19 = (unint64_t)v11;
    *v11 = 0;
    v11[1] = v10;
    *v11 = *v4 + 1;
    v20 = *v4;
    if ((_DWORD)v20)
    {
      v21 = v20 - 1;
      do
        *(_QWORD *)&v11[2 * v21 + 2] = *(_QWORD *)&v4[2 * v21 + 2];
      while ((unint64_t)v21--);
    }
    else
    {
      v20 = 0;
    }
    *(_QWORD *)&v11[2 * v20 + 2] = a2;
    WTF::fastFree((unint64_t)v4, v12, v13, v14, v15, v16, v17, v18);
    *a1 = *a1 & 2 | v19 | 1;
  }
  else
  {
    *v4 = v5 + 1;
    *(_QWORD *)&v4[2 * v5 + 2] = a2;
  }
  return 1;
}

BOOL WTF::TinyPtrSet<JSC::Structure *>::addOutOfLine(uint64_t *a1, uint64_t a2)
{
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;
  _DWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFFCLL);
  v5 = *v4;
  if ((_DWORD)v5)
  {
    if (*((_QWORD *)v4 + 1) == a2)
      return 0;
    v6 = 0;
    while (v5 - 1 != v6)
    {
      v7 = *(_QWORD *)&v4[2 * v6++ + 4];
      if (v7 == a2)
        return v6 >= v5;
    }
  }
  v9 = v4[1];
  if (v5 >= v9)
  {
    v10 = 2 * v9;
    v11 = (_DWORD *)WTF::fastMalloc((WTF *)((16 * ((2 * v9) >> 1)) | 8));
    v19 = (unint64_t)v11;
    *v11 = 0;
    v11[1] = v10;
    *v11 = *v4 + 1;
    v20 = *v4;
    if ((_DWORD)v20)
    {
      v21 = v20 - 1;
      do
        *(_QWORD *)&v11[2 * v21 + 2] = *(_QWORD *)&v4[2 * v21 + 2];
      while ((unint64_t)v21--);
    }
    else
    {
      v20 = 0;
    }
    *(_QWORD *)&v11[2 * v20 + 2] = a2;
    WTF::fastFree((unint64_t)v4, v12, v13, v14, v15, v16, v17, v18);
    *a1 = *a1 & 2 | v19 | 1;
  }
  else
  {
    *v4 = v5 + 1;
    *(_QWORD *)&v4[2 * v5 + 2] = a2;
  }
  return 1;
}

uint64_t WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 8 * v10);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  if (!(v5 >> 29))
  {
    v6 = result;
    v7 = *(const void **)result;
    v8 = *(unsigned int *)(result + 12);
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
    memcpy(v9, v7, 8 * v8);
    if (v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::forEach<JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int,JSC::DFG::Node *)::{lambda(JSC::DFG::RegisteredStructure)#3}>(_QWORD *result, uint64_t a2)
{
  unsigned int *v3;
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v3 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFFCLL);
  if ((*result & 1) != 0)
  {
    if (*v3)
    {
      v6 = 0;
      do
      {
        v7 = *(_QWORD *)&v3[2 * v6 + 2];
        v8 = *(unsigned __int8 *)(v7 + 9);
        if ((v8 - 39) <= 0xA)
          v9 = JSC::typedArrayModes[v8 - 39];
        else
          v9 = 1 << *(_BYTE *)(v7 + 8);
        result = (_QWORD *)JSC::DFG::ArrayMode::arrayModesThatPassFiltering(*(JSC::DFG::ArrayMode **)a2);
        if ((result | v9) != (_DWORD)result || *(_QWORD *)(v7 + 40) != **(_QWORD **)(a2 + 16))
          **(_BYTE **)(a2 + 8) = 0;
        ++v6;
      }
      while (v6 < *v3);
    }
  }
  else if (v3)
  {
    v4 = *((unsigned __int8 *)v3 + 9);
    if ((v4 - 39) <= 0xA)
      v5 = JSC::typedArrayModes[v4 - 39];
    else
      v5 = 1 << *((_BYTE *)v3 + 8);
    result = (_QWORD *)JSC::DFG::ArrayMode::arrayModesThatPassFiltering(*(JSC::DFG::ArrayMode **)a2);
    if ((result | v5) != (_DWORD)result || *((_QWORD *)v3 + 5) != **(_QWORD **)(a2 + 16))
      **(_BYTE **)(a2 + 8) = 0;
  }
  return result;
}

uint64_t *WTF::HashSet<JSC::DFG::Node *,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTableTraits>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t *v10;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v10 = result;
  v12 = *result;
  if (*result
    || (result = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(result, 0, a3, a4, a5, a6, a7, a8), (v12 = *v10) != 0))
  {
    v13 = 0;
    v14 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v14 = 0;
    v13 = 1;
  }
  v15 = *a2;
  v16 = ~(*a2 << 32) + *a2;
  v17 = 9
      * (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) ^ (((v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v14 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v12 + 8 * v19);
  v21 = *v20;
  if (*v20)
  {
    v22 = 0;
    v23 = 1;
    do
    {
      if (v21 == v15)
      {
        if ((v13 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v12 - 4);
        v31 = 0;
        v30 = v12 + 8 * v32;
        goto LABEL_18;
      }
      if (v21 == -1)
        v22 = v20;
      v19 = (v19 + v23) & v14;
      v20 = (uint64_t *)(v12 + 8 * v19);
      v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *v22 = 0;
      --*(_DWORD *)(*v10 - 16);
      v15 = *a2;
      v20 = v22;
    }
  }
  *v20 = v15;
  v24 = *v10;
  if (*v10)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v10;
  if (*v10)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_17;
LABEL_25:
    result = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(v10, v20, a3, a4, a5, a6, a7, a8);
    v20 = result;
    v26 = *v10;
    if (*v10)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
    goto LABEL_17;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_25;
LABEL_17:
  v30 = v26 + 8 * v29;
  v31 = 1;
LABEL_18:
  *(_QWORD *)a9 = v20;
  *(_QWORD *)(a9 + 8) = v30;
  *(_BYTE *)(a9 + 16) = v31;
  return result;
}

_QWORD *WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::expand(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t impl_casual_case;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
    if (v11)
    {
      v13 = v11 << (6 * v12 >= (2 * v11));
      goto LABEL_4;
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = 8;
LABEL_4:
  v14 = 8 * v13;
  v15 = v14 + 16;
  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 752);
  if (v16)
  {
    v17 = (unint64_t)(v14 + 31) >> 4;
    if (v13 <= 0x32)
    {
      v18 = 23 * v17 + 7;
    }
    else
    {
      if (v13 > 0x4E0)
        goto LABEL_8;
      v18 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v17 + 626);
      if (*(_DWORD *)(v16 + 8052) <= v18)
        goto LABEL_8;
    }
    v21 = v16 + 8 * v18;
    v22 = v21 + 8064;
    *(_BYTE *)(v21 + 8064) = 1;
    v23 = *(unsigned int *)(v21 + 8080);
    if ((_DWORD)v23)
    {
      *(_DWORD *)(v22 + 16) = v23 - *(_DWORD *)(v22 + 20);
      impl_casual_case = *(_QWORD *)(v22 + 8) - v23;
    }
    else
    {
      v40 = *(_QWORD *)(v22 + 40);
      v41 = *(_QWORD *)(v22 + 24);
      if (!v40)
      {
        if (*(_BYTE *)(v22 + 5) == 6)
        {
          v43 = *(unsigned int *)(v22 + 32);
          v44 = *(_DWORD *)(v22 + 36);
          if (v43 < v44)
          {
            *(_QWORD *)(v22 + 8 * v43 + 56) = 0;
            v45 = (unint64_t *)(8 * v18 + 8 * v43 + v16 + 8128);
            v46 = v44 - 1 - v43;
            while (v46)
            {
              v41 += 1024;
              v48 = *v45++;
              v47 = v48;
              LODWORD(v43) = v43 + 1;
              --v46;
              if (v48)
              {
                v40 = __rbit64(v47);
                *(_DWORD *)(v22 + 32) = v43;
                *(_QWORD *)(v22 + 24) = v41;
                goto LABEL_37;
              }
            }
            *(_DWORD *)(v22 + 32) = v44;
          }
        }
        *(_BYTE *)v22 = 0;
        goto LABEL_8;
      }
LABEL_37:
      v42 = __clz(v40);
      *(_QWORD *)(v22 + 40) = v40 & ~(0x8000000000000000 >> v42);
      impl_casual_case = v41 + 16 * v42;
    }
    *(_BYTE *)v22 = 0;
    v19 = 1;
    goto LABEL_13;
  }
LABEL_8:
  impl_casual_case = (unint64_t)bmalloc_allocate_impl_casual_case(v15, 1, a3, a4, a5, a6, a7, a8);
LABEL_13:
  if ((v19 & 1) != 0 && (v19 & 0xFFFFFFFF00000000) != 0x100000000)
  {
    if (v13 < 0x1FFFFE)
      goto LABEL_22;
    v24 = pas_page_malloc_cached_alignment;
    if (!pas_page_malloc_cached_alignment)
    {
      v24 = pas_page_malloc_alignment_slow();
      pas_page_malloc_cached_alignment = v24;
    }
    if (((v24 - 1) & (v15 | impl_casual_case)) != 0)
    {
LABEL_22:
      bzero((void *)impl_casual_case, v15);
    }
    else
    {
      if (!v24)
        pas_page_malloc_cached_alignment = pas_page_malloc_alignment_slow();
      mmap((void *)impl_casual_case, v15, 3, 4114, 889192448, 0);
    }
  }
  *a1 = impl_casual_case + 16;
  *(_DWORD *)(impl_casual_case + 12) = v13;
  *(_DWORD *)(*a1 - 8) = v13 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    v25 = 0;
    v26 = 0;
    do
    {
      v27 = (uint64_t *)(v10 + 8 * v25);
      v28 = *v27;
      if ((unint64_t)(*v27 + 1) >= 2)
      {
        v29 = *a1;
        v30 = *a1 ? *(_DWORD *)(v29 - 8) : 0;
        v31 = (~(v28 << 32) + v28) ^ ((unint64_t)(~(v28 << 32) + v28) >> 22);
        v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
        v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
        v34 = v30 & ((v33 >> 31) ^ v33);
        v35 = 1;
        do
        {
          v36 = v34;
          v37 = *(_QWORD *)(v29 + 8 * v34);
          v34 = (v34 + v35++) & v30;
        }
        while (v37);
        v38 = (_QWORD *)(v29 + 8 * v36);
        *v38 = v28;
        if (v27 == a2)
          v26 = v38;
      }
      ++v25;
    }
    while (v25 != v11);
  }
  else
  {
    v26 = 0;
  }
  if (v10)
    WTF::fastFree(v10 - 16, (void *)v19, a3, a4, a5, a6, a7, a8);
  return v26;
}

uint64_t WTF::Vector<JSC::DFG::Node *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t StatusReg;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *casual;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WTF::SegmentedVector<JSC::DFG::OSRExitCompilationInfo,4ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 29))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = 8 * v9;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v13 = *(_QWORD *)(StatusReg + 752);
    if (v13)
    {
      v14 = (unint64_t)(v11 + 15) >> 4;
      if (v9 <= 0x34)
      {
        v15 = 23 * v14 + 7;
      }
      else
      {
        if (v9 > 0x4E2)
          goto LABEL_15;
        v15 = *((unsigned int *)&bmalloc_common_primitive_heap_support + v14 + 626);
        if (*(_DWORD *)(v13 + 8052) <= v15)
          goto LABEL_15;
      }
      v17 = v13 + 8 * v15;
      v18 = v17 + 8064;
      *(_BYTE *)(v17 + 8064) = 1;
      v19 = *(unsigned int *)(v17 + 8080);
      if ((_DWORD)v19)
      {
        *(_DWORD *)(v18 + 16) = v19 - *(_DWORD *)(v18 + 20);
        casual = (void *)(*(_QWORD *)(v18 + 8) - v19);
      }
      else
      {
        v27 = *(_QWORD *)(v18 + 40);
        v28 = *(_QWORD *)(v18 + 24);
        if (!v27)
        {
          if (*(_BYTE *)(v18 + 5) == 6)
          {
            v30 = *(unsigned int *)(v18 + 32);
            v31 = *(_DWORD *)(v18 + 36);
            if (v30 < v31)
            {
              *(_QWORD *)(v18 + 8 * v30 + 56) = 0;
              v32 = (unint64_t *)(8 * v15 + 8 * v30 + v13 + 8128);
              v33 = v31 - 1 - v30;
              while (v33)
              {
                v28 += 1024;
                v35 = *v32++;
                v34 = v35;
                LODWORD(v30) = v30 + 1;
                --v33;
                if (v35)
                {
                  v27 = __rbit64(v34);
                  *(_DWORD *)(v18 + 32) = v30;
                  *(_QWORD *)(v18 + 24) = v28;
                  goto LABEL_30;
                }
              }
              *(_DWORD *)(v18 + 32) = v31;
            }
          }
          *(_BYTE *)v18 = 0;
          goto LABEL_15;
        }
LABEL_30:
        v29 = __clz(v27);
        *(_QWORD *)(v18 + 40) = v27 & ~(0x8000000000000000 >> v29);
        casual = (void *)(v28 + 16 * v29);
      }
      *(_BYTE *)v18 = 0;
LABEL_20:
      *(_DWORD *)(v4 + 8) = v9;
      *(_QWORD *)v4 = casual;
      memcpy(casual, (const void *)v5, 8 * v10);
      if (v5)
      {
        if (*(_QWORD *)v4 == v5)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
        }
        v25 = *(_QWORD *)(StatusReg + 752);
        if (v25)
        {
          if (!(v5 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v5 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v5)) & 1) != 0)
          {
            goto LABEL_26;
          }
          if (v5 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v5 >> 24)
          {
            v20 = 0;
          }
          else
          {
            v20 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v5 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                     + 24) >> (2 * ((BYTE3(v5) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v20 == 1)
            {
LABEL_26:
              v26 = *(unsigned int *)(v25 + 8000);
              if (v26 >= 0x3E7)
              {
                pas_thread_local_cache_append_deallocation_slow(v25, v5, (os_unfair_lock_s *)5, v20, v21, v22, v23, v24);
              }
              else
              {
                *(_QWORD *)(v25 + 8 * v26) = v5 | 0x5000000000000;
                *(_DWORD *)(v25 + 8000) = v26 + 1;
              }
              return v3;
            }
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v25, v5, 1, v20, v21, v22, v23, v24);
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v5, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
      return v3;
    }
LABEL_15:
    casual = (void *)bmalloc_allocate_casual(v11, 1);
    goto LABEL_20;
  }
  __break(0xC471u);
  return result;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::forAllValues<JSC::DFG::AbstractValue::TransitionObserver>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int *v32;
  int v33;
  int v34;
  void **v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  void **v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  void **v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int *v65;
  int v66;
  int v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  void **v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  int *v105;
  int v106;
  int v107;
  void **v108;
  uint64_t v109;
  unsigned int *v110;
  uint64_t v111;
  unsigned int v112;
  void **v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  _QWORD v124[2];

  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_DWORD *)(*(_QWORD *)(v10 + 72) + 220);
  if (v11 > a2)
    v12 = ((_DWORD)a2 + 1);
  else
    v12 = v11;
  if ((_DWORD)v12)
  {
    while (1)
    {
      --v12;
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(v13 + 72);
      if (v12 >= *(unsigned int *)(v14 + 220))
      {
        __break(0xC471u);
        JUMPOUT(0x197C6EF90);
      }
      v15 = *(_QWORD *)(*(_QWORD *)(v14 + 208) + 8 * v12);
      v124[0] = a3;
      v124[1] = a1;
      v16 = *(_QWORD *)(v13 + 8);
      v17 = *(unsigned int *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 20);
      v18 = (uint64_t *)(v16 + 24);
      v19 = (uint64_t *)(v16 + 8);
      if ((v15 & 1) != 0)
        v19 = v18;
      v20 = *v19;
      v21 = *v19 + 32 * v17;
      v22 = *(_DWORD *)(v13 + 88);
      v23 = *(_DWORD *)(v21 + 20);
      if (v22 != v23)
        break;
      if ((*(_QWORD *)(v21 + 8) & 0x2800FFFFFFF7) != 0)
        goto LABEL_16;
LABEL_10:
      if (*(_WORD *)(v15 + 18) == 27)
        JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::forAllValues<JSC::DFG::AbstractValue::TransitionObserver>(unsigned int,JSC::DFG::AbstractValue::TransitionObserver &)::{lambda(JSC::DFG::NodeFlowProjection)#1}::operator()((uint64_t)v124, v15 | 1, a3, a4, a5, a6, a7, a8);
      if (!v12)
      {
        v10 = *(_QWORD *)(a1 + 24);
        goto LABEL_53;
      }
    }
    if ((*(_QWORD *)(v21 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v23 ^ v22) >= 2)
      {
        v36 = *(_QWORD *)v21;
        if (*(_QWORD *)v21 != 4)
        {
          *(_QWORD *)v21 = v36 | 2;
          v37 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v36 & 1) != 0)
          {
            v75 = 2 * *v37;
            while (v75 * 4)
            {
              v76 = *(_QWORD *)&v37[v75];
              if ((*(_BYTE *)(v76 + 19) & 0xC) == 0)
              {
                v77 = *(_QWORD *)(v76 + 96);
                v78 = (v77 & 1) != 0 ? (v77 >> 1) & 3 : *(unsigned __int8 *)(v77 + 4);
                v75 -= 2;
                if (v78 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v37, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_99;
            }
          }
          else if (v37)
          {
            if ((*((_BYTE *)v37 + 19) & 0xC) != 0
              || ((v38 = *((_QWORD *)v37 + 12), (v38 & 1) != 0)
                ? (v39 = (v38 >> 1) & 3)
                : (v39 = *(unsigned __int8 *)(v38 + 4)),
                  v39 == 2))
            {
LABEL_99:
              *(_QWORD *)v21 = 4;
            }
          }
        }
        *(_DWORD *)(v20 + 32 * v17 + 16) = -21020677;
      }
      if ((v22 & 1) != 0)
        *(_QWORD *)v21 &= ~2uLL;
    }
    *(_DWORD *)(v21 + 20) = v22;
    if ((*(_QWORD *)(v21 + 8) & 0x2800FFFFFFF7) == 0)
      goto LABEL_10;
LABEL_16:
    v25 = *(void ***)a3;
    v24 = *(_QWORD *)(a3 + 8);
    v26 = *(_QWORD *)v21;
    if (*(_QWORD *)v21 == 4)
      goto LABEL_17;
    v35 = (void **)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v26 & 1) != 0)
    {
      v40 = *(unsigned int *)v35;
      if (!(_DWORD)v40)
        goto LABEL_17;
      if (v35[1] != v25)
      {
        v41 = 0;
        v42 = (unsigned int *)(v35 + 2);
        while (v40 - 1 != v41)
        {
          v43 = *(void ***)&v42[2 * v41++];
          if (v43 == v25)
          {
            if (v41 >= v40)
              goto LABEL_17;
            goto LABEL_47;
          }
        }
        goto LABEL_17;
      }
LABEL_47:
      if (!WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)v21, *(_QWORD *)(a3 + 8)))
      {
LABEL_17:
        v27 = *((unsigned __int8 *)v25 + 9);
        if ((v27 - 39) <= 0xA)
          v28 = JSC::typedArrayModes[v27 - 39];
        else
          v28 = 1 << *((_BYTE *)v25 + 8);
        v29 = *(unsigned __int8 *)(v24 + 9);
        if ((v29 - 39) <= 0xA)
          v30 = JSC::typedArrayModes[v29 - 39];
        else
          v30 = 1 << *(_BYTE *)(v24 + 8);
        v31 = v20 + 32 * v17;
        v34 = *(_DWORD *)(v31 + 16);
        v32 = (int *)(v31 + 16);
        v33 = v34;
        if ((v34 & v28) != 0)
          *v32 = v33 | v30;
        goto LABEL_10;
      }
      v74 = *(_QWORD *)v21;
    }
    else
    {
      if (v25 != v35 || (void **)v24 == v35)
        goto LABEL_17;
      if (v35)
      {
        v72 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v72 = 0x400000002;
        v73 = *(_QWORD *)v21;
        *(_QWORD *)(v72 + 8) = *(_QWORD *)v21 & 0xFFFFFFFFFFFFFFFCLL;
        *(_QWORD *)(v72 + 16) = v24;
        v74 = v73 & 2 | v72 | 1;
      }
      else
      {
        v74 = *(_QWORD *)v21 & 2 | v24;
      }
      *(_QWORD *)v21 = v74;
    }
    if ((v74 & 1) != 0 && *(_DWORD *)(v74 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
    {
      WTF::fastFree(v74 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      *(_QWORD *)v21 = 4;
    }
    goto LABEL_17;
  }
LABEL_53:
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 944) == 2)
  {
    v45 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 200);
    v46 = *(unsigned int *)(v45 + 76);
    if ((_DWORD)v46)
    {
      v47 = *(uint64_t **)(v45 + 64);
      v48 = &v47[v46];
      while (1)
      {
        v49 = *v47;
        if (*v47)
        {
          v50 = v49 & 0xFFFFFFFFFFFFFFFELL;
          if ((v49 & 1) == 0)
          {
            v51 = *(_QWORD *)(a1 + 24);
            v52 = (uint64_t *)(*(_QWORD *)(v51 + 8) + 8);
LABEL_63:
            v53 = *(unsigned int *)(v50 + 20);
            v54 = *v52;
            v55 = *v52 + 32 * v53;
            v56 = *(_DWORD *)(v51 + 88);
            v57 = *(_DWORD *)(v55 + 20);
            if (v56 != v57)
            {
              if ((*(_QWORD *)(v55 + 8) & 0x2800FFFFFFF7) != 0)
              {
                if ((v57 ^ v56) >= 2)
                {
                  v68 = *(_QWORD *)v55;
                  if (*(_QWORD *)v55 != 4)
                  {
                    *(_QWORD *)v55 = v68 | 2;
                    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFFCLL);
                    if ((v68 & 1) != 0)
                    {
                      v79 = 2 * *v69;
                      while (v79 * 4)
                      {
                        v80 = *(_QWORD *)&v69[v79];
                        if ((*(_BYTE *)(v80 + 19) & 0xC) == 0)
                        {
                          v81 = *(_QWORD *)(v80 + 96);
                          v82 = (v81 & 1) != 0 ? (v81 >> 1) & 3 : *(unsigned __int8 *)(v81 + 4);
                          v79 -= 2;
                          if (v82 != 2)
                            continue;
                        }
                        WTF::fastFree((unint64_t)v69, a2, a3, a4, a5, a6, a7, a8);
                        goto LABEL_88;
                      }
                    }
                    else if (v69)
                    {
                      if ((*((_BYTE *)v69 + 19) & 0xC) != 0
                        || ((v70 = *((_QWORD *)v69 + 12), (v70 & 1) != 0)
                          ? (v71 = (v70 >> 1) & 3)
                          : (v71 = *(unsigned __int8 *)(v70 + 4)),
                            v71 == 2))
                      {
LABEL_88:
                        *(_QWORD *)v55 = 4;
                      }
                    }
                  }
                  *(_DWORD *)(v54 + 32 * v53 + 16) = -21020677;
                }
                if ((v56 & 1) != 0)
                  *(_QWORD *)v55 &= ~2uLL;
              }
              *(_DWORD *)(v55 + 20) = v56;
            }
            if ((*(_QWORD *)(v55 + 8) & 0x2800FFFFFFF7) != 0)
            {
              v59 = *(void ***)a3;
              v58 = *(_QWORD *)(a3 + 8);
              JSC::DFG::StructureAbstractValue::observeTransition((uint64_t *)v55, *(void ***)a3, v58, a4, a5, a6, a7, a8);
              v60 = *((unsigned __int8 *)v59 + 9);
              v61 = (v60 - 39) <= 0xA ? JSC::typedArrayModes[v60 - 39] : 1 << *((_BYTE *)v59 + 8);
              v62 = *(unsigned __int8 *)(v58 + 9);
              v63 = (v62 - 39) <= 0xA ? JSC::typedArrayModes[v62 - 39] : 1 << *(_BYTE *)(v58 + 8);
              v64 = v54 + 32 * v53;
              v67 = *(_DWORD *)(v64 + 16);
              v65 = (int *)(v64 + 16);
              v66 = v67;
              if ((v67 & v61) != 0)
                *v65 = v66 | v63;
            }
            goto LABEL_65;
          }
          if (*(_WORD *)(v50 + 18) == 27)
          {
            v51 = *(_QWORD *)(a1 + 24);
            v52 = (uint64_t *)(*(_QWORD *)(v51 + 8) + 24);
            goto LABEL_63;
          }
        }
LABEL_65:
        if (++v47 == v48)
        {
          v10 = *(_QWORD *)(a1 + 24);
          break;
        }
      }
    }
  }
  v44 = *(unsigned int *)(v10 + 28);
  if ((_DWORD)v44)
  {
    do
    {
      --v44;
      v83 = *(_QWORD *)(a1 + 24);
      if (((1 << v44) & *(_DWORD *)(*(_QWORD *)(v83 + 56) + 4 * (v44 >> 5))) == 0)
      {
        v84 = *(_QWORD *)(v83 + 16);
        v85 = v84 + 32 * v44;
        v86 = *(_QWORD *)(*(_QWORD *)(v83 + 72) + 120);
        v87 = (uint64_t *)(v86 + 32 * v44);
        v88 = *(_QWORD *)v85;
        if (v84 != v86)
        {
          if ((v88 & 1) != 0)
            WTF::fastFree(v88 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
          v89 = *v87;
          if ((*v87 & 1) == 0 || v89 == 4)
          {
            if ((*(_BYTE *)v85 & 2) != 0)
              v88 = v89 | 2;
            else
              v88 = v89 & 0xFFFFFFFFFFFFFFFDLL;
            *(_QWORD *)v85 = v88;
          }
          else
          {
            WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::copyFromOutOfLine((uint64_t *)v85, v87);
            v88 = *(_QWORD *)v85;
          }
        }
        v90 = v88 & 0xFFFFFFFFFFFFFFFDLL;
        v91 = v88 | 2;
        if ((*(_BYTE *)v87 & 2) == 0)
          v91 = v90;
        *(_QWORD *)v85 = v91;
        v92 = *(_OWORD *)(v87 + 1);
        *(_QWORD *)(v85 + 24) = v87[3];
        *(_OWORD *)(v85 + 8) = v92;
        *(_DWORD *)(v85 + 20) = *(_DWORD *)(v83 + 84);
        *(_DWORD *)(*(_QWORD *)(v83 + 56) + 4 * (v44 >> 5)) |= 1 << v44;
      }
      v93 = *(_QWORD *)(v83 + 16);
      v94 = v93 + 32 * v44;
      v95 = *(_DWORD *)(v83 + 88);
      v96 = *(_DWORD *)(v94 + 20);
      if (v95 != v96)
      {
        if ((*(_QWORD *)(v94 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v96 ^ v95) >= 2)
          {
            v109 = *(_QWORD *)v94;
            if (*(_QWORD *)v94 != 4)
            {
              *(_QWORD *)v94 = v109 | 2;
              v110 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v109 & 1) != 0)
              {
                v120 = 2 * *v110;
                while (v120 * 4)
                {
                  v121 = *(_QWORD *)&v110[v120];
                  if ((*(_BYTE *)(v121 + 19) & 0xC) == 0)
                  {
                    v122 = *(_QWORD *)(v121 + 96);
                    v123 = (v122 & 1) != 0 ? (v122 >> 1) & 3 : *(unsigned __int8 *)(v122 + 4);
                    v120 -= 2;
                    if (v123 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v110, a2, a3, a4, a5, a6, a7, a8);
                  goto LABEL_185;
                }
              }
              else if (v110)
              {
                if ((*((_BYTE *)v110 + 19) & 0xC) != 0
                  || ((v111 = *((_QWORD *)v110 + 12), (v111 & 1) != 0)
                    ? (v112 = (v111 >> 1) & 3)
                    : (v112 = *(unsigned __int8 *)(v111 + 4)),
                      v112 == 2))
                {
LABEL_185:
                  *(_QWORD *)v94 = 4;
                }
              }
            }
            *(_DWORD *)(v93 + 32 * v44 + 16) = -21020677;
          }
          if ((v95 & 1) != 0)
            *(_QWORD *)v94 &= ~2uLL;
        }
        *(_DWORD *)(v94 + 20) = v95;
      }
      if ((*(_QWORD *)(v94 + 8) & 0x2800FFFFFFF7) == 0)
        continue;
      v98 = *(void ***)a3;
      v97 = *(_QWORD *)(a3 + 8);
      v99 = *(_QWORD *)v94;
      if (*(_QWORD *)v94 != 4)
      {
        v108 = (void **)(v99 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v99 & 1) != 0)
        {
          v115 = *(unsigned int *)v108;
          if ((_DWORD)v115)
          {
            if (v108[1] != v98)
            {
              v114 = 0;
              v116 = (unsigned int *)(v108 + 2);
              while (v115 - 1 != v114)
              {
                v113 = *(void ***)&v116[2 * v114++];
                if (v113 == v98)
                {
                  if (v114 >= v115)
                    goto LABEL_128;
                  goto LABEL_164;
                }
              }
              goto LABEL_128;
            }
LABEL_164:
            if (WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine((uint64_t *)(v93 + 32 * v44), *(_QWORD *)(a3 + 8)))
            {
              v117 = *(_QWORD *)v94;
              goto LABEL_158;
            }
          }
        }
        else if (v98 == v108 && (void **)v97 != v108)
        {
          if (v108)
          {
            v118 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v118 = 0x400000002;
            v119 = *(_QWORD *)v94;
            *(_QWORD *)(v118 + 8) = *(_QWORD *)v94 & 0xFFFFFFFFFFFFFFFCLL;
            *(_QWORD *)(v118 + 16) = v97;
            v117 = v119 & 2 | v118 | 1;
          }
          else
          {
            v117 = *(_QWORD *)v94 & 2 | v97;
          }
          *(_QWORD *)v94 = v117;
LABEL_158:
          if ((v117 & 1) != 0 && *(_DWORD *)(v117 & 0xFFFFFFFFFFFFFFFCLL) >= 0xBu)
          {
            WTF::fastFree(v117 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
            *(_QWORD *)v94 = 4;
          }
        }
      }
LABEL_128:
      v100 = *((unsigned __int8 *)v98 + 9);
      if ((v100 - 39) <= 0xA)
        v101 = JSC::typedArrayModes[v100 - 39];
      else
        v101 = 1 << *((_BYTE *)v98 + 8);
      v102 = *(unsigned __int8 *)(v97 + 9);
      if ((v102 - 39) <= 0xA)
        v103 = JSC::typedArrayModes[v102 - 39];
      else
        v103 = 1 << *(_BYTE *)(v97 + 8);
      v104 = v93 + 32 * v44;
      v107 = *(_DWORD *)(v104 + 16);
      v105 = (int *)(v104 + 16);
      v106 = v107;
      if ((v107 & v101) != 0)
        *v105 = v106 | v103;
    }
    while (v44);
  }
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::forAllValues<JSC::DFG::AbstractValue::TransitionObserver>(unsigned int,JSC::DFG::AbstractValue::TransitionObserver &)::{lambda(JSC::DFG::NodeFlowProjection)#1}::operator()(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;

  v8 = *(uint64_t **)a1;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
  v12 = (uint64_t *)(v10 + 24);
  v13 = (uint64_t *)(v10 + 8);
  if ((a2 & 1) != 0)
    v13 = v12;
  v14 = *v13;
  v15 = *v13 + 32 * v11;
  v16 = *(_DWORD *)(v9 + 88);
  v17 = *(_DWORD *)(v15 + 20);
  if (v16 != v17)
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v17 ^ v16) >= 2)
      {
        v28 = *(_QWORD *)v15;
        if (*(_QWORD *)v15 != 4)
        {
          *(_QWORD *)v15 = v28 | 2;
          v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v28 & 1) != 0)
          {
            v32 = 2 * *v29;
            while (v32 * 4)
            {
              v33 = *(_QWORD *)&v29[v32];
              if ((*(_BYTE *)(v33 + 19) & 0xC) == 0)
              {
                v34 = *(_QWORD *)(v33 + 96);
                v35 = (v34 & 1) != 0 ? (v34 >> 1) & 3 : *(unsigned __int8 *)(v34 + 4);
                v32 -= 2;
                if (v35 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v29, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_25;
            }
          }
          else if (v29)
          {
            if ((*((_BYTE *)v29 + 19) & 0xC) != 0
              || ((v30 = *((_QWORD *)v29 + 12), (v30 & 1) != 0)
                ? (v31 = (v30 >> 1) & 3)
                : (v31 = *(unsigned __int8 *)(v30 + 4)),
                  v31 == 2))
            {
LABEL_25:
              *(_QWORD *)v15 = 4;
            }
          }
        }
        *(_DWORD *)(v14 + 32 * v11 + 16) = -21020677;
      }
      if ((v16 & 1) != 0)
        *(_QWORD *)v15 &= ~2uLL;
    }
    *(_DWORD *)(v15 + 20) = v16;
  }
  if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
  {
    v19 = *v8;
    v18 = v8[1];
    JSC::DFG::StructureAbstractValue::observeTransition((uint64_t *)v15, (void **)v19, v18, a4, a5, a6, a7, a8);
    v20 = *(unsigned __int8 *)(v19 + 9);
    if ((v20 - 39) <= 0xA)
      v21 = JSC::typedArrayModes[v20 - 39];
    else
      v21 = 1 << *(_BYTE *)(v19 + 8);
    v22 = *(unsigned __int8 *)(v18 + 9);
    if ((v22 - 39) <= 0xA)
      v23 = JSC::typedArrayModes[v22 - 39];
    else
      v23 = 1 << *(_BYTE *)(v18 + 8);
    v24 = v14 + 32 * v11;
    v27 = *(_DWORD *)(v24 + 16);
    v25 = (int *)(v24 + 16);
    v26 = v27;
    if ((v27 & v21) != 0)
      *v25 = v26 | v23;
  }
}

BOOL WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::mergeOtherOutOfLine(uint64_t *a1, _QWORD *a2)
{
  unsigned int *v3;
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
  if (*v3 >= 2)
  {
    if ((*a1 & 1) != 0)
      goto LABEL_3;
    v9 = (unint64_t)*a1 <= 3 ? *v3 : *v3 + 1;
    v10 = WTF::fastMalloc((WTF *)(8 * v9 + 8));
    *(_DWORD *)v10 = 0;
    *(_DWORD *)(v10 + 4) = v9;
    v11 = *a1;
    v12 = *a1 & 0xFFFFFFFFFFFFFFFCLL;
    if (v12)
    {
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = v12;
    }
    *a1 = v11 & 2 | v10 | 1;
    if (*v3)
    {
LABEL_3:
      v4 = 0;
      v5 = 0;
      do
        v5 |= WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(a1, *(_QWORD *)&v3[2 * v4++ + 2]);
      while (v4 < *v3);
      return v5 & 1;
    }
LABEL_8:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  v7 = *((_QWORD *)v3 + 1);
  v8 = *a1;
  if ((*a1 & 1) == 0)
  {
    if (v7 != (v8 & 0xFFFFFFFFFFFFFFFCLL))
    {
      if ((v8 & 0xFFFFFFFFFFFFFFFCLL) != 0)
      {
        v14 = WTF::fastMalloc((WTF *)0x28);
        *(_QWORD *)v14 = 0x400000002;
        v15 = *a1;
        *(_QWORD *)(v14 + 8) = *a1 & 0xFFFFFFFFFFFFFFFCLL;
        *(_QWORD *)(v14 + 16) = v7;
        v13 = v15 & 2 | v14 | 1;
      }
      else
      {
        v13 = *a1 & 2 | v7;
      }
      *a1 = v13;
      LOBYTE(v5) = 1;
      return v5 & 1;
    }
    goto LABEL_8;
  }
  return WTF::TinyPtrSet<JSC::DFG::RegisteredStructure>::addOutOfLine(a1, v7);
}

uint64_t WTF::Vector<JSC::DFG::Transition,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::Transition>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<JSC::DFG::Transition,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2, a4, a5, a6, a7, a8);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t WTF::Vector<JSC::DFG::Transition,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::Transition,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 4)
  {
    v16 = (_OWORD *)(result + 16);
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 3;
    goto LABEL_12;
  }
  if (!(v14 >> 28))
  {
    v16 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = 16 * v15;
      v18 = (__int128 *)v10;
      do
      {
        v19 = *v18++;
        *v16++ = v19;
        v17 -= 16;
      }
      while (v17);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (*(_QWORD *)v9 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::Transition,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;

  v8 = *(unsigned int *)(result + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 <= v8)
    return 1;
  v12 = result;
  v13 = *(_QWORD *)result;
  v14 = *(unsigned int *)(result + 12);
  if (v11 < 4)
  {
    v15 = (_OWORD *)(result + 16);
    *(_QWORD *)v12 = v12 + 16;
    *(_DWORD *)(v12 + 8) = 3;
    goto LABEL_11;
  }
  if (!(v11 >> 28))
  {
    v15 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v11));
    *(_DWORD *)(v12 + 8) = v11;
    *(_QWORD *)v12 = v15;
LABEL_11:
    if ((_DWORD)v14)
    {
      v16 = 16 * v14;
      v17 = (__int128 *)v13;
      do
      {
        v18 = *v17++;
        *v15++ = v18;
        v16 -= 16;
      }
      while (v16);
    }
    if (v12 + 16 != v13 && v13)
    {
      if (*(_QWORD *)v12 == v13)
      {
        *(_QWORD *)v12 = 0;
        *(_DWORD *)(v12 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::forAllValues<JSC::DFG::AbstractValue::TransitionsObserver>(uint64_t a1, void *a2, _DWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  int v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  _QWORD v82[2];

  v10 = *(_QWORD *)(a1 + 24);
  LODWORD(v11) = *(_DWORD *)(*(_QWORD *)(v10 + 72) + 220);
  if (v11 > a2)
    v11 = ((_DWORD)a2 + 1);
  else
    v11 = v11;
  if ((_DWORD)v11)
  {
    v12 = v11 - 1;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 72);
      if (v12 >= *(unsigned int *)(v13 + 220))
      {
        __break(0xC471u);
        return;
      }
      v14 = *(_QWORD *)(*(_QWORD *)(v13 + 208) + 8 * v12);
      v82[0] = a3;
      v82[1] = a1;
      JSC::DFG::NodeFlowProjection::forEach<void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::forAllValues<JSC::DFG::AbstractValue::TransitionsObserver>(unsigned int,JSC::DFG::AbstractValue::TransitionsObserver &)::{lambda(JSC::DFG::NodeFlowProjection)#1}>(v14, v82, (uint64_t)a3, a4, a5, a6, a7, a8);
      --v12;
    }
    while (v12 != -1);
    v10 = *(_QWORD *)(a1 + 24);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 944) != 2)
    goto LABEL_10;
  v41 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 200);
  v42 = *(unsigned int *)(v41 + 76);
  if (!(_DWORD)v42)
    goto LABEL_10;
  v43 = *(uint64_t **)(v41 + 64);
  v44 = &v43[v42];
  do
  {
    v45 = *v43;
    if (!*v43)
      goto LABEL_49;
    v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
    if ((v45 & 1) != 0)
    {
      if (*(_WORD *)(v46 + 18) != 27)
        goto LABEL_49;
      v47 = *(_QWORD *)(a1 + 24);
      v48 = (uint64_t *)(*(_QWORD *)(v47 + 8) + 24);
    }
    else
    {
      v47 = *(_QWORD *)(a1 + 24);
      v48 = (uint64_t *)(*(_QWORD *)(v47 + 8) + 8);
    }
    v49 = *(unsigned int *)(v46 + 20);
    v50 = *v48;
    v51 = *v48 + 32 * v49;
    v52 = *(_DWORD *)(v47 + 88);
    v53 = *(_DWORD *)(v51 + 20);
    if (v52 != v53)
    {
      if ((*(_QWORD *)(v51 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v53 ^ v52) >= 2)
        {
          v70 = *(_QWORD *)v51;
          if (*(_QWORD *)v51 != 4)
          {
            *(_QWORD *)v51 = v70 | 2;
            v71 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v70 & 1) != 0)
            {
              v78 = 2 * *v71;
              while (v78 * 4)
              {
                v79 = *(_QWORD *)&v71[v78];
                if ((*(_BYTE *)(v79 + 19) & 0xC) == 0)
                {
                  v80 = *(_QWORD *)(v79 + 96);
                  v81 = (v80 & 1) != 0 ? (v80 >> 1) & 3 : *(unsigned __int8 *)(v80 + 4);
                  v78 -= 2;
                  if (v81 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v71, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                goto LABEL_76;
              }
            }
            else if (v71)
            {
              if ((*((_BYTE *)v71 + 19) & 0xC) != 0
                || ((v72 = *((_QWORD *)v71 + 12), (v72 & 1) == 0)
                  ? (v77 = *(unsigned __int8 *)(v72 + 4))
                  : (v77 = (v72 >> 1) & 3),
                    v77 == 2))
              {
LABEL_76:
                *(_QWORD *)v51 = 4;
              }
            }
          }
          *(_DWORD *)(v50 + 32 * v49 + 16) = -21020677;
        }
        if ((v52 & 1) != 0)
          *(_QWORD *)v51 &= ~2uLL;
      }
      *(_DWORD *)(v51 + 20) = v52;
    }
    if ((*(_QWORD *)(v51 + 8) & 0x2800FFFFFFF7) != 0)
    {
      v54 = (uint64_t *)*a3;
      JSC::DFG::StructureAbstractValue::observeTransitions((uint64_t *)v51, *a3, (uint64_t)a3, a4, a5, a6, a7, a8);
      v55 = *((_DWORD *)v54 + 3);
      v56 = v50 + 32 * v49;
      v59 = *(_DWORD *)(v56 + 16);
      v57 = (int *)(v56 + 16);
      v58 = v59;
      v60 = 0;
      if (v55)
      {
        v61 = *v54;
        v62 = v55 - 1;
        do
        {
          v63 = v62;
          v64 = *(_QWORD *)(v61 + 16 * v62);
          v65 = *(unsigned __int8 *)(v64 + 9);
          if ((v65 - 39) <= 0xA)
            v66 = JSC::typedArrayModes[v65 - 39];
          else
            v66 = 1 << *(_BYTE *)(v64 + 8);
          if ((v66 & v58) != 0)
          {
            v67 = *(_QWORD *)(v61 + 16 * v62 + 8);
            v68 = *(unsigned __int8 *)(v67 + 9);
            if ((v68 - 39) <= 0xA)
              v69 = JSC::typedArrayModes[v68 - 39];
            else
              v69 = 1 << *(_BYTE *)(v67 + 8);
            v60 |= v69;
          }
          --v62;
        }
        while (v63);
      }
      *v57 = v60 | v58;
    }
LABEL_49:
    ++v43;
  }
  while (v43 != v44);
  v10 = *(_QWORD *)(a1 + 24);
LABEL_10:
  v15 = *(unsigned int *)(v10 + 28);
  if ((_DWORD)v15)
  {
    do
    {
      --v15;
      v16 = *(_QWORD *)(a1 + 24);
      if (((*(_DWORD *)(*(_QWORD *)(v16 + 56) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v15) & 1) == 0)
        JSC::DFG::InPlaceAbstractState::activateVariable(*(JSC::DFG::InPlaceAbstractState **)(a1 + 24), v15, (uint64_t)a3, a4, a5, a6, a7, a8);
      v17 = *(_QWORD *)(v16 + 16);
      v18 = (uint64_t *)(v17 + 32 * v15);
      v19 = *(_DWORD *)(v16 + 88);
      v20 = *((_DWORD *)v18 + 5);
      if (v19 != v20)
      {
        if ((v18[1] & 0x2800FFFFFFF7) != 0)
        {
          if ((v20 ^ v19) >= 2)
          {
            v37 = *v18;
            if (*v18 != 4)
            {
              *v18 = v37 | 2;
              v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v37 & 1) != 0)
              {
                v73 = 2 * *v38;
                while (v73 * 4)
                {
                  v74 = *(_QWORD *)&v38[v73];
                  if ((*(_BYTE *)(v74 + 19) & 0xC) == 0)
                  {
                    v75 = *(_QWORD *)(v74 + 96);
                    v76 = (v75 & 1) != 0 ? (v75 >> 1) & 3 : *(unsigned __int8 *)(v75 + 4);
                    v73 -= 2;
                    if (v76 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v38, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  goto LABEL_40;
                }
              }
              else if (v38)
              {
                if ((*((_BYTE *)v38 + 19) & 0xC) != 0
                  || ((v39 = *((_QWORD *)v38 + 12), (v39 & 1) != 0)
                    ? (v40 = (v39 >> 1) & 3)
                    : (v40 = *(unsigned __int8 *)(v39 + 4)),
                      v40 == 2))
                {
LABEL_40:
                  *v18 = 4;
                }
              }
            }
            *(_DWORD *)(v17 + 32 * v15 + 16) = -21020677;
          }
          if ((v19 & 1) != 0)
            *v18 &= ~2uLL;
        }
        *((_DWORD *)v18 + 5) = v19;
      }
      if ((v18[1] & 0x2800FFFFFFF7) != 0)
      {
        v21 = (uint64_t *)*a3;
        JSC::DFG::StructureAbstractValue::observeTransitions((uint64_t *)(v17 + 32 * v15), *a3, (uint64_t)a3, a4, a5, a6, a7, a8);
        v22 = *((_DWORD *)v21 + 3);
        v23 = v17 + 32 * v15;
        v26 = *(_DWORD *)(v23 + 16);
        v24 = (int *)(v23 + 16);
        v25 = v26;
        v27 = 0;
        if (v22)
        {
          v28 = *v21;
          v29 = v22 - 1;
          do
          {
            v30 = v29;
            v31 = *(_QWORD *)(v28 + 16 * v29);
            v32 = *(unsigned __int8 *)(v31 + 9);
            if ((v32 - 39) <= 0xA)
              v33 = JSC::typedArrayModes[v32 - 39];
            else
              v33 = 1 << *(_BYTE *)(v31 + 8);
            if ((v33 & v25) != 0)
            {
              v34 = *(_QWORD *)(v28 + 16 * v29 + 8);
              v35 = *(unsigned __int8 *)(v34 + 9);
              if ((v35 - 39) <= 0xA)
                v36 = JSC::typedArrayModes[v35 - 39];
              else
                v36 = 1 << *(_BYTE *)(v34 + 8);
              v27 |= v36;
            }
            --v29;
          }
          while (v30);
        }
        *v24 = v27 | v25;
      }
    }
    while (v15);
  }
}

void JSC::DFG::NodeFlowProjection::forEach<void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::forAllValues<JSC::DFG::AbstractValue::TransitionsObserver>(unsigned int,JSC::DFG::AbstractValue::TransitionsObserver &)::{lambda(JSC::DFG::NodeFlowProjection)#1}>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int v40;
  _DWORD **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _DWORD *v47;
  int v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;

  v10 = (_DWORD **)*a2;
  v11 = *(_QWORD *)(a2[1] + 24);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = a1 & 0xFFFFFFFFFFFFFFFELL;
  v14 = *(unsigned int *)((a1 & 0xFFFFFFFFFFFFFFFELL) + 20);
  v15 = (uint64_t *)(v12 + 24);
  v16 = (uint64_t *)(v12 + 8);
  if ((a1 & 1) != 0)
    v16 = v15;
  v17 = *v16;
  v18 = *v16 + 32 * v14;
  v19 = *(_DWORD *)(v11 + 88);
  v20 = *(_DWORD *)(v18 + 20);
  if (v19 != v20)
  {
    if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v20 ^ v19) >= 2)
      {
        v37 = *(_QWORD *)v18;
        if (*(_QWORD *)v18 != 4)
        {
          *(_QWORD *)v18 = v37 | 2;
          v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v37 & 1) != 0)
          {
            v63 = 2 * *v38;
            while (v63 * 4)
            {
              v64 = *(_QWORD *)&v38[v63];
              if ((*(_BYTE *)(v64 + 19) & 0xC) == 0)
              {
                v65 = *(_QWORD *)(v64 + 96);
                v66 = (v65 & 1) != 0 ? (v65 >> 1) & 3 : *(unsigned __int8 *)(v65 + 4);
                v63 -= 2;
                if (v66 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v38, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_30;
            }
          }
          else if (v38)
          {
            if ((*((_BYTE *)v38 + 19) & 0xC) != 0
              || ((v39 = *((_QWORD *)v38 + 12), (v39 & 1) != 0)
                ? (v40 = (v39 >> 1) & 3)
                : (v40 = *(unsigned __int8 *)(v39 + 4)),
                  v40 == 2))
            {
LABEL_30:
              *(_QWORD *)v18 = 4;
            }
          }
        }
        *(_DWORD *)(v17 + 32 * v14 + 16) = -21020677;
      }
      if ((v19 & 1) != 0)
        *(_QWORD *)v18 &= ~2uLL;
    }
    *(_DWORD *)(v18 + 20) = v19;
  }
  if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
  {
    v21 = *v10;
    JSC::DFG::StructureAbstractValue::observeTransitions((uint64_t *)v18, v21, a3, a4, a5, a6, a7, a8);
    v22 = v21[3];
    v23 = v17 + 32 * v14;
    v26 = *(_DWORD *)(v23 + 16);
    v24 = (int *)(v23 + 16);
    v25 = v26;
    v27 = 0;
    if (v22)
    {
      v28 = *(_QWORD *)v21;
      v29 = v22 - 1;
      do
      {
        v30 = v29;
        v31 = *(_QWORD *)(v28 + 16 * v29);
        v32 = *(unsigned __int8 *)(v31 + 9);
        if ((v32 - 39) <= 0xA)
          v33 = JSC::typedArrayModes[v32 - 39];
        else
          v33 = 1 << *(_BYTE *)(v31 + 8);
        if ((v33 & v25) != 0)
        {
          v34 = *(_QWORD *)(v28 + 16 * v29 + 8);
          v35 = *(unsigned __int8 *)(v34 + 9);
          if ((v35 - 39) <= 0xA)
            v36 = JSC::typedArrayModes[v35 - 39];
          else
            v36 = 1 << *(_BYTE *)(v34 + 8);
          v27 |= v36;
        }
        --v29;
      }
      while (v30);
    }
    *v24 = v27 | v25;
  }
  if (*(_WORD *)(a1 + 18) == 27)
  {
    v41 = (_DWORD **)*a2;
    v42 = *(_QWORD *)(a2[1] + 24);
    v43 = *(unsigned int *)(v13 + 20);
    v44 = *(_QWORD *)(*(_QWORD *)(v42 + 8) + 24);
    v45 = v44 + 32 * v43;
    v46 = (void *)*(unsigned int *)(v42 + 88);
    if ((_DWORD)v46 != *(_DWORD *)(v45 + 20))
    {
      if ((*(_QWORD *)(v45 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)(v44 + 32 * v43), v46, a3, a4, a5, a6, a7, a8);
      else
        *(_DWORD *)(v45 + 20) = (_DWORD)v46;
    }
    if ((*(_QWORD *)(v45 + 8) & 0x2800FFFFFFF7) != 0)
    {
      v47 = *v41;
      JSC::DFG::StructureAbstractValue::observeTransitions((uint64_t *)(v44 + 32 * v43), v47, a3, a4, a5, a6, a7, a8);
      v48 = v47[3];
      v49 = v44 + 32 * v43;
      v52 = *(_DWORD *)(v49 + 16);
      v50 = (int *)(v49 + 16);
      v51 = v52;
      v53 = 0;
      if (v48)
      {
        v54 = *(_QWORD *)v47;
        v55 = v48 - 1;
        do
        {
          v56 = v55;
          v57 = *(_QWORD *)(v54 + 16 * v55);
          v58 = *(unsigned __int8 *)(v57 + 9);
          if ((v58 - 39) <= 0xA)
            v59 = JSC::typedArrayModes[v58 - 39];
          else
            v59 = 1 << *(_BYTE *)(v57 + 8);
          if ((v59 & v51) != 0)
          {
            v60 = *(_QWORD *)(v54 + 16 * v55 + 8);
            v61 = *(unsigned __int8 *)(v60 + 9);
            if ((v61 - 39) <= 0xA)
              v62 = JSC::typedArrayModes[v61 - 39];
            else
              v62 = 1 << *(_BYTE *)(v60 + 8);
            v53 |= v62;
          }
          --v55;
        }
        while (v56);
      }
      *v50 = v53 | v51;
    }
  }
}

void WTF::VectorDestructor<true,JSC::PutByVariant>::destruct(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v9 = a1;
    do
    {
      v10 = v9[6];
      v9[6] = 0;
      if (v10)
        WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
      v11 = v9[4];
      v9[4] = 0;
      if (v11)
      {
        v12 = *(_QWORD *)v11;
        if (v11 + 16 != *(_QWORD *)v11 && v12 != 0)
        {
          *(_QWORD *)v11 = 0;
          *(_DWORD *)(v11 + 8) = 0;
          WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
        }
        WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
      }
      v14 = (unsigned int *)v9[3];
      v9[3] = 0;
      if (v14)
      {
        do
        {
          v15 = __ldaxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((unint64_t)v14, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      v17 = v9[1];
      if ((v17 & 1) != 0)
        WTF::fastFree(v17 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4, a5, a6, a7, a8);
      v9 += 8;
    }
    while (v9 != a2);
  }
}

uint64_t WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int *v35;
  int v36;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if (v5 + 4 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v11 = *(_QWORD *)a1;
        return v11 + 4 * ((uint64_t)(v3 - v5) >> 2);
      }
      if (!(v10 >> 30))
      {
        v11 = WTF::fastMalloc((WTF *)(4 * v10));
        v19 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          *(_DWORD *)(v11 + v19) = *(_DWORD *)(v5 + v19);
          v19 += 4;
        }
        while (4 * v6 != v19);
        if (v5)
        {
          if (v11 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
          v11 = *(_QWORD *)a1;
        }
        return v11 + 4 * ((uint64_t)(v3 - v5) >> 2);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x197C7033CLL);
    }
  }
  v20 = *(unsigned int *)(a1 + 8);
  v21 = v20 + (v20 >> 2);
  if (v21 >= 0x10)
    v22 = v21 + 1;
  else
    v22 = 16;
  if (v22 <= a2)
    v23 = a2;
  else
    v23 = v22;
  if (v23 > v20)
  {
    if (v23 >> 30)
      goto LABEL_35;
    v24 = *(unsigned int *)(a1 + 12);
    v25 = WTF::fastMalloc((WTF *)(4 * v23));
    *(_DWORD *)(a1 + 8) = v23;
    *(_QWORD *)a1 = v25;
    if ((_DWORD)v24)
    {
      v33 = 4 * v24;
      v34 = (_DWORD *)v25;
      v35 = (int *)v5;
      do
      {
        v36 = *v35++;
        *v34++ = v36;
        v33 -= 4;
      }
      while (v33);
    }
    if (v5)
    {
      if (v25 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v26, v27, v28, v29, v30, v31, v32);
    }
  }
  return v3;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3572FD0;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3572FD0;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  JSC::AssemblerBuffer *v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int *v66;
  uint64_t v67;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v16 = 0;
      v17 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v16, v10, v11, v12, v13, v14, v15);
        ++v17;
        v16 += 16;
      }
      while (v17 < *(unsigned int *)(a1 + 92));
    }
  }
  v18 = *(unsigned int *)(a1 + 136);
  if (v18 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a1 + 144), 0, v11, v12, v13, v14, v15);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v18 << 35) + 0x380000001ALL, 0, v11, v12, v13, v14, v15);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v19, v20, v21, v22, v23, v24, (int *)&v64);
  *(_QWORD *)(a1 + 64) = v64;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_10;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v26, v27, v28, v29, v30, v31);
LABEL_10:
    v32 = 0;
    LOBYTE(v33) = 0;
    goto LABEL_11;
  }
  v41 = *(_BYTE *)(a1 + 74);
  v66 = 0;
  v67 = 2;
  v42 = *(_QWORD *)(a2 + 3960);
  v43 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v43 & 1) != 0)
    goto LABEL_55;
  while (1)
  {
    v65 = v43;
    v42 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v42, &v65, &v67, &v66, v28, v29, v30, v31);
    v44 = v42;
    if ((v65 & 1) != 0)
    {
      v42 = v65 & 0xFFFFFFFF8;
      if ((v65 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v42, v25, v26, v27, v28, v29, v30, v31);
    }
    if ((v44 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v26, v27, v28, v29, v30, v31);
      LOBYTE(v33) = 0;
      v32 = 0;
      goto LABEL_51;
    }
    v45 = *(unsigned int *)(a1 + 92);
    if (!(_DWORD)v45)
      break;
    v43 = 0;
    v46 = 16 * v45;
    v47 = (char *)(*(_QWORD *)(a1 + 80) + 2);
    while (1)
    {
      v49 = *v47;
      v47 += 16;
      v48 = v49;
      if ((v49 & 0x40) != 0)
        break;
      v43 |= 1 << v48;
      v46 -= 16;
      if (!v46)
        goto LABEL_39;
    }
LABEL_54:
    __break(1u);
LABEL_55:
    v58 = v42;
    v59 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
    if ((v43 & 2) != 0
      || ((v60 = *(unsigned int *)((v43 & 0xFFFFFFFF8) + 8), (_DWORD)v60 != 0x3FFFFFFF)
        ? (v61 = (_DWORD)v60 == -1)
        : (v61 = 1),
          v61))
    {
      v62 = 2;
    }
    else if (v60 >> 28)
    {
      v63 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v63 = v59;
      *(_DWORD *)(v63 + 8) = v60;
      v62 = 1;
      v59 = v63;
    }
    else
    {
      v62 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
      v59 = v60 << 36;
    }
    v43 = v59 | v62;
    v42 = v58;
  }
  v43 = 0;
LABEL_39:
  if ((v41 & 0x40) != 0)
    goto LABEL_54;
  v32 = 1;
  v50 = v43 | (1 << v41);
  LOBYTE(v33) = 1;
  if ((v50 & 2) != 0)
  {
    v51 = (unsigned __int16)~(_WORD)v50 & 0xFFFE;
    if (v51)
    {
      v33 = __clz(__rbit64(v51));
      if (v33 == 1)
      {
        v32 = 1;
      }
      else
      {
        if (v33 == 31)
        {
          v54 = (unsigned int *)(a2 + 200);
          v53 = *(_DWORD *)(a2 + 200);
          v55 = (JSC::AssemblerBuffer *)(a2 + 56);
          v56 = v53 + 4;
          v57 = *(_DWORD *)(a2 + 192);
          v52 = -1862270913;
        }
        else
        {
          v52 = v33 | 0xAA0103E0;
          v54 = (unsigned int *)(a2 + 200);
          v53 = *(_DWORD *)(a2 + 200);
          v55 = (JSC::AssemblerBuffer *)(a2 + 56);
          v56 = v53 + 4;
          v57 = *(_DWORD *)(a2 + 192);
        }
        if (v56 > v57)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v55, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
          v53 = *v54;
        }
        *(_DWORD *)(*(_QWORD *)v55 + v53) = v52;
        *v54 += 4;
        v32 = 1;
      }
    }
    else
    {
      v32 = 1;
      LOBYTE(v33) = -1;
    }
  }
LABEL_51:
  if ((v67 & 1) != 0 && (v67 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v67 & 0xFFFFFFFF8, v25, v26, v27, v28, v29, v30, v31);
LABEL_11:
  v34 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v34 == 31)
    {
      v35 = -1862270945;
    }
    else if (v34 == 255)
    {
      v35 = -1442774017;
    }
    else
    {
      v35 = v34 | 0xAA0003E0;
    }
    v37 = (unsigned int *)(a2 + 200);
    v36 = *(_DWORD *)(a2 + 200);
    if (v36 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v25, v26, v27, v28, v29, v30, v31);
      v36 = *v37;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = v35;
    *v37 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
  {
LABEL_25:
    if (v32)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v33, v26, v27, v28, v29, v30, v31);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v26, v27, v28, v29, v30, v31);
    return;
  }
  v38 = *(_DWORD *)(a1 + 92);
  if (!v38)
  {
LABEL_24:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_25;
  }
  v39 = v38 - 1;
  v40 = 16 * (v38 - 1);
  while (*(_DWORD *)(a1 + 92) > v39)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v40, v26, v27, v28, v29, v30, v31);
    v40 -= 16;
    if (--v39 == -1)
      goto LABEL_24;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573030;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573030;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::NoResultTag>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint8x8_t v31;
  __int32 v32;
  uint8x8_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  char v44;
  char v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  unsigned __int8 *v52;
  char *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  unsigned __int8 *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  __int16 v76;
  int64_t v77;
  char *v78;
  char *v79;
  void *__dst;
  uint64_t v81;
  _WORD v82[4];

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v17 = 0;
      v18 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v17, v11, v12, v13, v14, v15, v16);
        ++v18;
        v17 += 16;
      }
      while (v18 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(unsigned int *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(unsigned __int8 *)(a1 + 152);
  v22 = *(unsigned __int8 *)(a1 + 153);
  v23 = *(unsigned __int8 *)(a1 + 154);
  __dst = v82;
  v81 = 3;
  if (v21 == 1)
  {
    v24 = 0;
  }
  else
  {
    v82[0] = v21 | 0x100;
    v24 = 1;
    HIDWORD(v81) = 1;
  }
  if (v22 != 2)
  {
    v82[v24++] = v22 | 0x200;
    HIDWORD(v81) = v24;
  }
  if (v23 == 3)
  {
    if (!v24)
      goto LABEL_68;
  }
  else
  {
    v82[v24++] = v23 | 0x300;
    HIDWORD(v81) = v24;
  }
  do
  {
    v25 = 0;
    v26 = 0;
    v27 = (char *)__dst;
    v28 = v24;
    do
    {
      if ((*((_BYTE *)__dst + v25 + 1) & 0x40) != 0)
      {
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }
      v26 |= 1 << *((_BYTE *)__dst + v25 + 1);
      v25 += 2;
    }
    while (2 * v24 != v25);
    v29 = 0;
    do
    {
      v30 = *((_BYTE *)__dst + v29) & 0x7F;
      if (v30 >= 0x40)
        goto LABEL_85;
      v26 &= ~(1 << v30);
      v29 += 2;
    }
    while (2 * v24 != v29);
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v31.i16[0] = vaddlv_u8(v31);
    v32 = v31.i32[0];
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
    v33.i16[0] = vaddlv_u8(v33);
    if (v33.i32[0] + v32)
    {
      v34 = 0;
      if (v24 <= 1)
        v35 = 1;
      else
        v35 = v24;
      v36 = 2 * v35;
      while (1)
      {
        v37 = *((unsigned __int8 *)__dst + v34 + 1);
        if ((v37 & 0x7Fu) >= 0x40)
          goto LABEL_85;
        if (((v26 >> (v37 & 0x7F)) & 1) != 0)
          break;
        v34 += 2;
        if (v36 == v34)
          goto LABEL_61;
      }
      v38 = *((unsigned __int8 *)__dst + v34);
      if (v38 != v37)
      {
        v39 = (char)v38;
        if ((char)v38 == 63)
        {
          v40 = *(_DWORD *)(a2 + 200);
          v41 = *(_DWORD *)(a2 + 192);
          if ((char)v37 == 31)
            goto LABEL_55;
          v43 = v37 & 0x1F | 0xD2800000;
        }
        else
        {
          v40 = *(_DWORD *)(a2 + 200);
          v41 = *(_DWORD *)(a2 + 192);
          v42 = v37 == 31 || v39 == 31;
          if (!v42)
          {
            v43 = v37 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_56;
          }
LABEL_55:
          v43 = (char)v37 | (32 * v39) | 0x91000000;
        }
LABEL_56:
        if (v40 + 4 > v41)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v10, v11, v12, v13, v14, v15, v16);
          v40 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = v43;
        *(_DWORD *)(a2 + 200) += 4;
        v27 = (char *)__dst;
        v28 = HIDWORD(v81);
      }
      memmove(&v27[v34], &v27[v34 + 2], 2 * v28 - v34 - 2);
      v24 = HIDWORD(v81) - 1;
      goto LABEL_60;
    }
    v44 = *(_BYTE *)__dst;
    v45 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v45, v12, v13, v14, v15, v16);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v81) - 2);
    v46 = (HIDWORD(v81) - 1);
    v42 = HIDWORD(v81) == 1;
    HIDWORD(v81) = v46;
    v47 = (unsigned __int8 *)__dst;
    v48 = (unsigned __int8 *)__dst + 2 * v46;
    if (v42)
    {
      v55 = 0;
      v56 = 0;
      v51 = 0;
      v10 = v48;
    }
    else
    {
      v49 = 2 * v46;
      v50 = __dst;
      while (*v50 != v45)
      {
        v50 += 2;
        v49 -= 2;
        if (!v49)
          goto LABEL_40;
      }
      *v50 = v44;
LABEL_40:
      v51 = 0;
      v52 = v47;
      v10 = v48;
      v53 = (char *)v48;
      do
      {
        if (*v47 == v47[1])
        {
          v54 = v47;
          if (v53 != (char *)__dst + 2 * HIDWORD(v81))
          {
            v79 = (char *)v48;
            if (v47 == v10)
            {
              v54 = (unsigned __int8 *)v53;
            }
            else
            {
              v77 = v52 - v10;
              v78 = v53;
              memmove(v53, v10, v52 - v10);
              v54 = (unsigned __int8 *)&v78[v77];
            }
            v48 = (unsigned __int8 *)v79;
          }
          v10 = v47 + 2;
          ++v51;
          v53 = (char *)v54;
        }
        v47 += 2;
        v52 += 2;
      }
      while (v47 < v48);
      v47 = (unsigned __int8 *)__dst;
      v55 = HIDWORD(v81);
      v56 = HIDWORD(v81);
      v48 = (unsigned __int8 *)v53;
    }
    v57 = &v47[2 * v55];
    if (v10 != v57)
    {
      memmove(v48, v10, v57 - v10);
      v56 = HIDWORD(v81);
    }
    v24 = v56 - v51;
LABEL_60:
    HIDWORD(v81) = v24;
LABEL_61:
    ;
  }
  while (v24);
  v58 = __dst;
  if (v82 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v81) = 0;
    WTF::fastFree((unint64_t)v58, v10, v11, v12, v13, v14, v15, v16);
  }
LABEL_68:
  if (v19 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v20, 0, v12, v13, v14, v15, v16);
  else
LABEL_86:
    JSC::MacroAssemblerARM64::load64(a2, (v19 << 35) + 0x380000001ALL, 0, v12, v13, v14, v15, v16);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v59, v60, v61, v62, v63, v64, (int *)&__dst);
  *(_QWORD *)(a1 + 64) = __dst;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_73;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0, v65, v66, v67, v68, v69, v70);
LABEL_73:
    v71 = 0;
    v72 = 0;
    goto LABEL_74;
  }
  v76 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::NoResultTag,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 80), v65, v66, v67, v68, v69, v70);
  v72 = v76;
  v71 = HIBYTE(v76);
LABEL_74:
  if (*(_BYTE *)(a1 + 72))
  {
LABEL_80:
    if (!*(_BYTE *)(a1 + 73))
    {
      if (v71)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, v72, v65, v66, v67, v68, v69, v70);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v65, v66, v67, v68, v69, v70);
    return;
  }
  v73 = *(_DWORD *)(a1 + 92);
  if (!v73)
  {
LABEL_79:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_80;
  }
  v74 = v73 - 1;
  v75 = 16 * (v73 - 1);
  while (*(_DWORD *)(a1 + 92) > v74)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v75, v65, v66, v67, v68, v69, v70);
    v75 -= 16;
    if (--v74 == -1)
      goto LABEL_79;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::NoResultTag,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  char v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;

  v9 = a1;
  v40 = 0;
  v41 = 2;
  v10 = *(_QWORD *)(a1 + 3960);
  v11 = *(_QWORD *)(*(_QWORD *)(v9 + 3976) + 8);
  if ((v11 & 1) != 0)
  {
    v31 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v32 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v32 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v32 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else if (v32 >> 28)
    {
      v38 = v10;
      v35 = v32;
      v36 = WTF::fastMalloc((WTF *)0x10);
      v10 = v38;
      *(_QWORD *)v36 = v31;
      *(_DWORD *)(v36 + 8) = v35;
      v34 = 1;
      v31 = v36;
    }
    else
    {
      v34 = v31;
      v31 = v32 << 36;
    }
    v11 = v31 | v34;
  }
  v39 = v11;
  v19 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v10, &v39, &v41, &v40, a5, a6, a7, a8);
  if ((v39 & 1) != 0 && (v39 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v39 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  if ((v19 & 1) != 0)
  {
    v22 = a2[3];
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = 16 * v22;
      v25 = (char *)(*(_QWORD *)a2 + 2);
      do
      {
        v27 = *v25;
        v25 += 16;
        v26 = v27;
        if ((v27 & 0x40) != 0)
        {
          __break(1u);
LABEL_37:
          v37 = v23;
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)a2, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
          LODWORD(v23) = v37;
          v29 = *(_DWORD *)v9;
LABEL_17:
          *(_DWORD *)(*(_QWORD *)a2 + v29) = v23;
          *(_DWORD *)v9 += 4;
          goto LABEL_18;
        }
        v23 |= 1 << v26;
        v24 -= 16;
      }
      while (v24);
      if ((v23 & 1) == 0)
        goto LABEL_19;
      v28 = (unsigned __int16)~(_WORD)v23;
      if (v28)
      {
        v19 = __clz(__rbit64(v28));
        if (!v19)
          goto LABEL_18;
        if (v19 == 31)
          LODWORD(v23) = -1862270945;
        else
          LODWORD(v23) = v19 | 0xAA0003E0;
        v30 = *(_DWORD *)(v9 + 200);
        v9 += 200;
        v29 = v30;
        a2 = (unsigned int *)(v9 - 144);
        if (v30 + 4 <= *(_DWORD *)(v9 - 8))
          goto LABEL_17;
        goto LABEL_37;
      }
      v20 = 1;
      v19 = 255;
    }
    else
    {
LABEL_19:
      v19 = 0;
LABEL_18:
      v20 = 1;
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v9, 0, v13, v14, v15, v16, v17, v18);
    v19 = 0;
    v20 = 0;
  }
  if ((v41 & 1) != 0 && (v41 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v41 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  return v19 | (v20 << 8);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,double),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573090;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,double),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573090;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,double),JSC::NoResultTag>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,double),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  JSC::AssemblerBuffer *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint8x8_t v33;
  __int32 v34;
  uint8x8_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  unsigned int v45;
  char v46;
  char v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  _BYTE *v51;
  int v52;
  unsigned __int8 *v53;
  char *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint8x8_t v81;
  __int32 v82;
  uint8x8_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  char v91;
  char v92;
  uint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned __int8 *v99;
  char *v100;
  unsigned __int8 *v101;
  int64_t v102;
  char *v103;
  void *v104;
  char v105;
  unsigned __int8 v106;
  int64_t v107;
  char *v108;
  char *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  JSC::AssemblerBuffer *v113;
  void *__dst;
  int v115;
  unsigned int v116;
  _WORD v117[4];

  v10 = (char *)JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v18 = 0;
      v19 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v18, v12, v13, v14, v15, v16, v17);
        ++v19;
        v18 += 16;
      }
      while (v19 < *(unsigned int *)(a1 + 92));
    }
  }
  v20 = *(unsigned int *)(a1 + 136);
  v21 = *(_QWORD *)(a1 + 144);
  v22 = *(unsigned __int8 *)(a1 + 152);
  v23 = *(unsigned __int8 *)(a1 + 153);
  v24 = *(unsigned __int8 *)(a1 + 154);
  __dst = v117;
  v115 = 2;
  if (v22 == 1)
  {
    if (v23 == 2)
      goto LABEL_66;
    v25 = 0;
  }
  else
  {
    v117[0] = v22 | 0x100;
    v25 = 1;
    v116 = 1;
    if (v23 == 2)
      goto LABEL_11;
  }
  v117[v25++] = v23 | 0x200;
  v116 = v25;
LABEL_11:
  v26 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v27 = 0;
    v28 = 0;
    v29 = (char *)__dst;
    v30 = v25;
    do
    {
      if ((*((_BYTE *)__dst + v27 + 1) & 0x40) != 0)
        goto LABEL_128;
      v28 |= 1 << *((_BYTE *)__dst + v27 + 1);
      v27 += 2;
    }
    while (2 * v25 != v27);
    v31 = 0;
    do
    {
      v32 = *((_BYTE *)__dst + v31) & 0x7F;
      if (v32 >= 0x40)
        goto LABEL_128;
      v28 &= ~(1 << v32);
      v31 += 2;
    }
    while (2 * v25 != v31);
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v33.i16[0] = vaddlv_u8(v33);
    v34 = v33.i32[0];
    v35 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v28));
    v35.i16[0] = vaddlv_u8(v35);
    if (v35.i32[0] + v34)
    {
      v36 = 0;
      if (v25 <= 1)
        v37 = 1;
      else
        v37 = v25;
      v38 = 2 * v37;
      while (1)
      {
        v39 = *((unsigned __int8 *)__dst + v36 + 1);
        if ((v39 & 0x7Fu) >= 0x40)
          goto LABEL_128;
        if (((v28 >> (v39 & 0x7F)) & 1) != 0)
          break;
        v36 += 2;
        if (v38 == v36)
          goto LABEL_62;
      }
      v40 = *((unsigned __int8 *)__dst + v36);
      if (v40 == v39)
        goto LABEL_60;
      v41 = (char)v40;
      if ((char)v40 == 63)
      {
        v42 = *(_DWORD *)(a2 + 200);
        v43 = *(_DWORD *)(a2 + 192);
        if ((char)v39 != 31)
        {
          v45 = v39 & 0x1F | 0xD2800000;
          goto LABEL_57;
        }
      }
      else
      {
        v42 = *(_DWORD *)(a2 + 200);
        v43 = *(_DWORD *)(a2 + 192);
        v44 = v39 == 31 || v41 == 31;
        if (!v44)
        {
          v45 = v39 & 0xFFE0FFFF | ((v41 & 0x1F) << 16) | 0xAA0003E0;
LABEL_57:
          if (v42 + 4 > v43)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v26, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
            v42 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v42) = v45;
          *(_DWORD *)(a2 + 200) += 4;
          v29 = (char *)__dst;
          v30 = v116;
LABEL_60:
          v10 = (char *)memmove(&v29[v36], &v29[v36 + 2], 2 * v30 - v36 - 2);
          v25 = v116 - 1;
          goto LABEL_61;
        }
      }
      v45 = (char)v39 | (32 * v41) | 0x91000000;
      goto LABEL_57;
    }
    v113 = v26;
    v46 = *(_BYTE *)__dst;
    v47 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v47, v13, v14, v15, v16, v17);
    memmove(__dst, (char *)__dst + 2, 2 * v116 - 2);
    v48 = v116 - 1;
    v44 = v116 == 1;
    v116 = v48;
    v49 = (unsigned __int8 *)__dst;
    v10 = (char *)__dst + 2 * v48;
    v111 = v20;
    if (v44)
    {
      v56 = 0;
      v57 = 0;
      v52 = 0;
      v11 = (char *)__dst + 2 * v48;
    }
    else
    {
      v50 = 2 * v48;
      v51 = __dst;
      while (*v51 != v47)
      {
        v51 += 2;
        v50 -= 2;
        if (!v50)
          goto LABEL_40;
      }
      *v51 = v46;
LABEL_40:
      v52 = 0;
      v53 = v49;
      v11 = v10;
      v54 = v10;
      do
      {
        if (*v49 == v49[1])
        {
          v55 = v49;
          if (v54 != (char *)__dst + 2 * v116)
          {
            v109 = v10;
            if (v49 == (unsigned __int8 *)v11)
            {
              v55 = (unsigned __int8 *)v54;
            }
            else
            {
              v107 = v53 - (unsigned __int8 *)v11;
              memmove(v54, v11, v53 - (unsigned __int8 *)v11);
              v55 = (unsigned __int8 *)&v54[v107];
            }
            v10 = v109;
          }
          v11 = (char *)(v49 + 2);
          ++v52;
          v54 = (char *)v55;
        }
        v49 += 2;
        v53 += 2;
      }
      while (v49 < (unsigned __int8 *)v10);
      v49 = (unsigned __int8 *)__dst;
      v56 = v116;
      v57 = v116;
      v10 = v54;
    }
    v58 = (char *)&v49[2 * v56];
    v20 = v111;
    if (v11 != v58)
    {
      v10 = (char *)memmove(v10, v11, v58 - v11);
      v57 = v116;
    }
    v25 = v57 - v52;
    v26 = v113;
LABEL_61:
    v116 = v25;
LABEL_62:
    ;
  }
  while (v25);
  v10 = (char *)__dst;
  if (v117 != __dst)
    goto LABEL_129;
LABEL_66:
  while (1)
  {
    __dst = v117;
    v115 = 1;
    if (!v24)
      break;
    v117[0] = v24;
    v116 = 1;
    v76 = 1;
LABEL_84:
    v77 = 0;
    v78 = 0;
    while (((*((_BYTE *)__dst + v77 + 1) + 32) & 0x40) == 0)
    {
      v78 |= 1 << (*((_BYTE *)__dst + v77 + 1) + 32);
      v77 += 2;
      if (2 * v76 == v77)
      {
        v79 = 0;
        while (1)
        {
          v80 = (*((_BYTE *)__dst + v79) + 32) & 0x7F;
          if (v80 >= 0x40)
            goto LABEL_128;
          v78 &= ~(1 << v80);
          v79 += 2;
          if (2 * v76 == v79)
          {
            v81 = (uint8x8_t)vcnt_s8((int8x8_t)v78);
            v81.i16[0] = vaddlv_u8(v81);
            v82 = v81.i32[0];
            v83 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v78));
            v83.i16[0] = vaddlv_u8(v83);
            if (v83.i32[0] + v82)
            {
              v84 = 0;
              if (v76 <= 1)
                v85 = 1;
              else
                v85 = v76;
              v86 = 2 * v85;
              while (1)
              {
                v24 = *((char *)__dst + v84 + 1);
                v87 = (*((_BYTE *)__dst + v84 + 1) + 32) & 0x7F;
                if (v87 >= 0x40)
                  goto LABEL_128;
                if (((v78 >> v87) & 1) != 0)
                {
                  v88 = v20;
                  v89 = *((char *)__dst + v84);
                  v90 = *(_DWORD *)(a2 + 200);
                  if (v90 + 4 > *(_DWORD *)(a2 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
                    v90 = *(_DWORD *)(a2 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v90) = v24 | (32 * v89) | 0x1E604000;
                  *(_DWORD *)(a2 + 200) += 4;
                  v10 = (char *)memmove((char *)__dst + v84, (char *)__dst + v84 + 2, 2 * v116 - v84 - 2);
                  v76 = v116 - 1;
                  v20 = v88;
                  goto LABEL_102;
                }
                v84 += 2;
                if (v86 == v84)
                  goto LABEL_103;
              }
            }
            v91 = *(_BYTE *)__dst;
            v92 = *((_BYTE *)__dst + 1);
            JSC::MacroAssemblerARM64::swapDouble((_DWORD *)a2, *(char *)__dst, v92, v13, v14, v15, v16, v17);
            memmove(__dst, (char *)__dst + 2, 2 * v116 - 2);
            v93 = v116 - 1;
            v44 = v116 == 1;
            v116 = v93;
            v94 = (unsigned __int8 *)__dst;
            v10 = (char *)__dst + 2 * v93;
            if (v44)
            {
              v97 = 0;
              v98 = 0;
              v24 = 0;
              v11 = (char *)__dst + 2 * v93;
            }
            else
            {
              v95 = 2 * v93;
              v96 = __dst;
              while (*v96 != v92)
              {
                v96 += 2;
                v95 -= 2;
                if (!v95)
                  goto LABEL_112;
              }
              *v96 = v91;
LABEL_112:
              v112 = v20;
              v24 = 0;
              v99 = v94;
              v11 = v10;
              v100 = v10;
              v108 = v10;
              do
              {
                if (*v94 == v94[1])
                {
                  v101 = v94;
                  if (v100 != (char *)__dst + 2 * v116)
                  {
                    if (v94 == (unsigned __int8 *)v11)
                    {
                      v101 = (unsigned __int8 *)v100;
                    }
                    else
                    {
                      v110 = v24;
                      v102 = v99 - (unsigned __int8 *)v11;
                      memmove(v100, v11, v99 - (unsigned __int8 *)v11);
                      v10 = v108;
                      v101 = (unsigned __int8 *)&v100[v102];
                      v24 = v110;
                    }
                  }
                  v11 = (char *)(v94 + 2);
                  ++v24;
                  v100 = (char *)v101;
                }
                v94 += 2;
                v99 += 2;
              }
              while (v94 < (unsigned __int8 *)v10);
              v94 = (unsigned __int8 *)__dst;
              v97 = v116;
              v98 = v116;
              v10 = v100;
              v20 = v112;
            }
            v103 = (char *)&v94[2 * v97];
            if (v11 != v103)
            {
              v10 = (char *)memmove(v10, v11, v103 - v11);
              v98 = v116;
            }
            v76 = v98 - v24;
LABEL_102:
            v116 = v76;
LABEL_103:
            if (!v76)
            {
              v104 = __dst;
              if (v117 != __dst && __dst)
              {
                __dst = 0;
                v115 = 0;
                WTF::fastFree((unint64_t)v104, v11, v12, v13, v14, v15, v16, v17);
              }
              goto LABEL_67;
            }
            goto LABEL_84;
          }
        }
      }
    }
LABEL_128:
    __break(1u);
LABEL_129:
    if (v10)
    {
      __dst = 0;
      v115 = 0;
      WTF::fastFree((unint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
LABEL_67:
  if (v20 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v21, 0, v13, v14, v15, v16, v17);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v20 << 35) + 0x380000001ALL, 0, v13, v14, v15, v16, v17);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v59, v60, v61, v62, v63, v64, (int *)&__dst);
  *(_QWORD *)(a1 + 64) = __dst;
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_72:
    v71 = 0;
    v72 = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 72))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0, v65, v66, v67, v68, v69, v70);
      goto LABEL_72;
    }
    JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,double),JSC::NoResultTag,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 80));
    v72 = v105;
    v71 = v106;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_79;
  v73 = *(_DWORD *)(a1 + 92);
  if (!v73)
  {
LABEL_78:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_79:
    if (!*(_BYTE *)(a1 + 73))
    {
      if (v71)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, v72, v65, v66, v67, v68, v69, v70);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v65, v66, v67, v68, v69, v70);
    return;
  }
  v74 = v73 - 1;
  v75 = 16 * (v73 - 1);
  while (*(_DWORD *)(a1 + 92) > v74)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v75, v65, v66, v67, v68, v69, v70);
    v75 -= 16;
    if (--v74 == -1)
      goto LABEL_78;
  }
  __break(0xC471u);
}

void JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,double),JSC::NoResultTag,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;

  v25 = 0;
  v26 = 2;
  v4 = *(_QWORD *)(a1 + 3960);
  JSC::CodeOrigin::CodeOrigin(&v24, (const JSC::CodeOrigin *)(*(_QWORD *)(a1 + 3976) + 8));
  v16 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v4, (unint64_t *)&v24, &v26, &v25, v5, v6, v7, v8);
  if ((v24 & 1) != 0 && (v24 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v24 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
  if ((v16 & 1) != 0)
  {
    v17 = a2[3];
    if ((_DWORD)v17)
    {
      v18 = 0;
      v19 = 16 * v17;
      v20 = (char *)(*(_QWORD *)a2 + 2);
      do
      {
        v22 = *v20;
        v20 += 16;
        v21 = v22;
        if ((v22 & 0x40) != 0)
        {
          __break(1u);
          return;
        }
        v18 |= 1 << v21;
        v19 -= 16;
      }
      while (v19);
      if ((v18 & 1) != 0)
      {
        v23 = (unsigned __int16)~(_WORD)v18;
        if (v23)
          JSC::MacroAssemblerARM64::move((_DWORD *)a1, 0, __clz(__rbit64(v23)), v11, v12, v13, v14, v15);
      }
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 0, v10, v11, v12, v13, v14, v15);
  }
  if ((v26 & 1) != 0 && (v26 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v26 & 0xFFFFFFFF8, v9, v10, v11, v12, v13, v14, v15);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::StructureStubInfoIndex &,JSC::ARM64Registers::RegisterID&,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address &,JSC::ExceptionOperationResult<void> (*&)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::NoResultTag&,JSC::JSValueRegs&,JSC::JSValueRegs&,JSC::JSValueRegs&,JSC::ARM64Registers::RegisterID&,decltype(nullptr) &>(uint64_t *a1@<X0>, _DWORD **a2@<X1>, int *a3@<X2>, char *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, unsigned __int8 *a7@<X6>, char *a8@<X7>, uint64_t *a9@<X8>, int *a10, char *a11, char *a12, char *a13, char *a14)
{
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  int v34;
  char v35;
  char v36;
  char v37;
  char v38;
  unsigned int v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  char v52;
  int v53;
  int v54;
  _DWORD *v55;
  int v56;
  _BYTE *v57;
  unsigned int v58;
  _BYTE v59[24];
  WTF *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[32];

  v23 = WTF::fastMalloc((WTF *)0xD0);
  v24 = *((unsigned int *)a1 + 3);
  v25 = v59;
  v57 = v59;
  v58 = v24;
  if (v24 >= 3)
  {
    if (v24 >= 0x15555556)
      goto LABEL_22;
    v25 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v24));
    v57 = v25;
    LODWORD(v24) = *((_DWORD *)a1 + 3);
  }
  if ((_DWORD)v24)
  {
    v26 = *a1;
    v27 = *a1 + 12 * v24;
    do
    {
      *(_DWORD *)v25 = *(_DWORD *)v26;
      *(_QWORD *)(v25 + 4) = *(_QWORD *)(v26 + 4);
      v26 += 12;
      v25 += 12;
    }
    while (v26 != v27);
  }
  v28 = *a2;
  v56 = *a3;
  v29 = *a4;
  v30 = *a5;
  v31 = *a6;
  v32 = *a7;
  v33 = *a8;
  v34 = *a10;
  v35 = *a11;
  v36 = *a12;
  v37 = *a13;
  v38 = *a14;
  v39 = v58;
  v60 = (WTF *)v63;
  v61 = 2;
  v62 = v58;
  if (v58 >= 3)
  {
    v52 = v33;
    v53 = v32;
    v54 = v34;
    v55 = v28;
    if (v58 < 0x15555556)
    {
      v40 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v58));
      v61 = 12 * v58 / 0xC;
      v60 = (WTF *)v40;
      v39 = v58;
      v28 = v55;
      v32 = v53;
      v34 = v54;
      v33 = v52;
      goto LABEL_11;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x197C71E14);
  }
  v40 = v63;
  if (v58)
  {
LABEL_11:
    v41 = v57;
    v42 = &v57[12 * v39];
    do
    {
      *(_DWORD *)v40 = *(_DWORD *)v41;
      *(_QWORD *)(v40 + 4) = *(_QWORD *)(v41 + 4);
      v41 += 12;
      v40 += 12;
    }
    while (v41 != v42);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag>::CallSlowPathGenerator(v23, (uint64_t *)&v60, v28, v32, v33, v34);
  v50 = v60;
  if (v63 != (_BYTE *)v60 && v60 != 0)
  {
    v60 = 0;
    v61 = 0;
    WTF::fastFree((unint64_t)v50, v43, v44, v45, v46, v47, v48, v49);
  }
  *(_QWORD *)v23 = &off_1E35745D0;
  *(_BYTE *)(v23 + 160) = v29;
  *(_QWORD *)(v23 + 164) = v30;
  *(_QWORD *)(v23 + 176) = v31;
  *(_BYTE *)(v23 + 184) = v35;
  *(_BYTE *)(v23 + 185) = v36;
  *(_BYTE *)(v23 + 186) = v37;
  *(_BYTE *)(v23 + 187) = v38;
  *(_QWORD *)(v23 + 192) = 0;
  *(_DWORD *)(v23 + 200) = v56;
  *a9 = v23;
  if (v59 != v57)
  {
    if (v57)
      WTF::fastFree((unint64_t)v57, v43, v44, v45, v46, v47, v48, v49);
  }
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3574600;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_DWORD *)(v11 + 104) = a6;
  *(_QWORD *)(v11 + 112) = v11 + 128;
  *(_QWORD *)(v11 + 120) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 112, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574600;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574600;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::unpackAndGenerate<0ul,1ul,2ul,3ul,4ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __int16 *v49;
  int v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned int v69;
  unsigned int v70;
  __int16 v71;
  _BYTE v72[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 124))
      {
        v14 = 0;
        v15 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 112) + v14, a3, a4, a5, a6, a7, a8);
          ++v15;
          v14 += 16;
        }
        while (v15 < *(unsigned int *)(a1 + 124));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 200) + 136), *(char *)(a1 + 160), a5, a6, a7, a8);
    v23 = *(_DWORD *)(a1 + 184);
    v69 = 0;
    if ((_BYTE)v23)
    {
      v71 = v23;
      v24 = 1;
      v69 = 1;
    }
    else
    {
      v24 = 0;
    }
    if ((v23 & 0xFF00) != 0x100)
    {
      *(_WORD *)&v72[2 * v24++ - 2] = BYTE1(v23) | 0x100;
      v69 = v24;
    }
    if ((v23 & 0xFF0000) != 0x20000)
    {
      *(_WORD *)&v72[2 * v24++ - 2] = BYTE2(v23) | 0x200;
      v69 = v24;
    }
    if (HIBYTE(v23) == 3)
    {
      if (!v24)
      {
LABEL_71:
        v59 = *(_DWORD *)(a2 + 200);
        if (v59 + 4 > *(_DWORD *)(a2 + 192))
        {
LABEL_74:
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
          v59 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v59) = -763363324;
        *(_DWORD *)(a2 + 200) += 4;
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 164), v17, v18, v19, v20, v21, v22);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag>::tearDown(a1, a2, v60, v61, v62, v63, v64, v65);
        return;
      }
    }
    else
    {
      *(_WORD *)&v72[2 * v24++ - 2] = HIBYTE(v23) | 0x300;
      v69 = v24;
    }
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = v24;
      do
      {
        if ((v72[v25 - 1] & 0x40) != 0)
        {
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        v26 |= 1 << v72[v25 - 1];
        v25 += 2;
      }
      while (2 * v24 != v25);
      v28 = 0;
      do
      {
        v29 = v72[v28 - 2] & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_73;
        v26 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v24 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.i32[0] + v31)
      {
        v33 = 0;
        if (v24 <= 1)
          v34 = 1;
        else
          v34 = v24;
        v35 = 2 * v34;
        while (1)
        {
          v36 = v72[v33 - 1];
          if ((v36 & 0x7Fu) >= 0x40)
            goto LABEL_73;
          if (((v26 >> (v36 & 0x7F)) & 1) != 0)
            break;
          v33 += 2;
          if (v35 == v33)
            goto LABEL_67;
        }
        v37 = v72[v33 - 2];
        if (v37 != v36)
        {
          v38 = (char)v37;
          if ((char)v37 == 63)
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            if (v36 == 31)
              goto LABEL_61;
            v42 = v36 & 0x1F | 0xD2800000;
          }
          else
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            v41 = (char)v36 == 31 || v38 == 31;
            if (!v41)
            {
              v42 = v36 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_62;
            }
LABEL_61:
            v42 = (char)v36 | (32 * v38) | 0x91000000;
          }
LABEL_62:
          if (v39 + 4 > v40)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v16, v17, v18, v19, v20, v21, v22);
            v39 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v42;
          *(_DWORD *)(a2 + 200) += 4;
          v27 = v69;
        }
        memmove(&v72[v33 - 2], &v72[v33], 2 * v27 - v33 - 2);
        v24 = v69 - 1;
        goto LABEL_66;
      }
      v43 = HIBYTE(v71);
      v44 = v71;
      JSC::MacroAssemblerARM64::swap(a2, (char)v71, SHIBYTE(v71), v18, v19, v20, v21, v22);
      memmove(&v71, v72, 2 * v69 - 2);
      v45 = v69 - 1;
      v41 = v69 == 1;
      v70 = v45;
      v46 = (unsigned __int8 *)&v71;
      v47 = &v72[2 * v45 - 2];
      if (v41)
      {
        v56 = 0;
        v57 = 0;
        v50 = 0;
        v16 = v47;
      }
      else
      {
        v48 = 2 * v45;
        v49 = &v71;
        while (*(unsigned __int8 *)v49 != v43)
        {
          ++v49;
          v48 -= 2;
          if (!v48)
            goto LABEL_46;
        }
        *(_BYTE *)v49 = v44;
LABEL_46:
        v50 = 0;
        v51 = (char *)&v71;
        v16 = v47;
        v52 = v47;
        do
        {
          if (*v46 == v46[1])
          {
            v53 = v46;
            if (v52 != &v72[2 * v70 - 2])
            {
              v67 = v47;
              v68 = v46;
              if (v46 == v16)
              {
                v53 = v52;
              }
              else
              {
                v54 = v51 - (char *)v16;
                v55 = v52;
                v66 = v51;
                memmove(v52, v16, v51 - (char *)v16);
                v51 = v66;
                v53 = &v55[v54];
              }
              v47 = v67;
              v46 = v68;
            }
            v16 = v46 + 2;
            ++v50;
            v52 = v53;
          }
          v46 += 2;
          v51 += 2;
        }
        while (v46 < v47);
        v56 = v70;
        v57 = v70;
        v47 = v52;
      }
      v58 = &v72[2 * v56 - 2];
      if (v16 != v58)
      {
        memmove(v47, v16, v58 - v16);
        v57 = v70;
      }
      v24 = v57 - v50;
LABEL_66:
      v69 = v24;
LABEL_67:
      ;
    }
    while (v24);
    goto LABEL_71;
  }
  v11 = 0;
  v12 = 0;
  v13 = 12 * v10;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v13 == v11)
      goto LABEL_5;
  }
  __break(0xC471u);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  __int16 v16;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v10 = 0;
    v11 = 0;
    goto LABEL_5;
  }
  v16 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 112), *(unsigned int *)(a1 + 104), a4, a5, a6, a7, a8);
  v11 = v16;
  v10 = HIBYTE(v16);
LABEL_5:
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 101))
      v15 = 1;
    else
      v15 = v10 == 0;
    if (!v15)
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, v11, a3, a4, a5, a6, a7, a8);
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v12 = *(_DWORD *)(a1 + 124);
  if (!v12)
  {
LABEL_10:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_11;
  }
  v13 = v12 - 1;
  v14 = 16 * (v12 - 1);
  while (*(_DWORD *)(a1 + 124) > v13)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 112) + v14, a3, a4, a5, a6, a7, a8);
    v14 -= 16;
    if (--v13 == -1)
      goto LABEL_10;
  }
  __break(0xC471u);
}

uint64_t WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,4u>(std::array<JSC::ARM64Registers::RegisterID,4u>,std::array<JSC::ARM64Registers::RegisterID,4u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v15;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 3);
  v6 = (char *)(*a1 + 2 * v5);
  if (v5 <= a3)
  {
    v7 = 0;
    v10 = (char *)(*a1 + 2 * v5);
  }
  else
  {
    v7 = 0;
    v8 = (char *)(v4 + 2 * a3);
    v9 = v8;
    v10 = (char *)(*a1 + 2 * v5);
    v11 = v10;
    do
    {
      if (*v9 == v9[1])
      {
        v12 = v9;
        if (v11 != (char *)(*a1 + 2 * *((unsigned int *)a1 + 3)))
        {
          if (v9 == v10)
          {
            v12 = v11;
          }
          else
          {
            v15 = v8 - v10;
            memmove(v11, v10, v8 - v10);
            v12 = &v11[v15];
          }
        }
        v10 = v9 + 2;
        v7 = (v7 + 1);
        v11 = v12;
      }
      v9 += 2;
      v8 += 2;
    }
    while (v9 < v6);
    v4 = *a1;
    v5 = *((unsigned int *)a1 + 3);
    v6 = v11;
  }
  v13 = (char *)(v4 + 2 * v5);
  if (v10 != v13)
  {
    memmove(v6, v10, v13 - v10);
    LODWORD(v5) = *((_DWORD *)a1 + 3);
  }
  *((_DWORD *)a1 + 3) = v5 - v7;
  return v7;
}

uint64_t JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  uint64_t v37;

  v36 = 0;
  v37 = 2;
  v10 = *(_QWORD *)(a1 + 3960);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 3976) + 8);
  if ((v11 & 1) != 0)
  {
    v19 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v24 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
        ? (v30 = (_DWORD)v24 == -1)
        : (v30 = 1),
          v30))
    {
      v31 = 2;
    }
    else if (v24 >> 28)
    {
LABEL_32:
      v34 = v10;
      v32 = v24;
      v33 = WTF::fastMalloc((WTF *)0x10);
      v10 = v34;
      *(_QWORD *)v33 = v19;
      *(_DWORD *)(v33 + 8) = v32;
      v31 = 1;
      v19 = v33;
    }
    else
    {
      v31 = v19;
      v19 = v24 << 36;
    }
    v11 = v19 | v31;
  }
  v35 = v11;
  v10 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v10, &v35, &v37, &v36, a5, a6, a7, a8);
  v19 = v10;
  if ((v35 & 1) != 0)
  {
    v10 = v35 & 0xFFFFFFFF8;
    if ((v35 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v10, v12, v13, v14, v15, v16, v17, v18);
  }
  if ((v19 & 1) != 0)
  {
    v23 = a2[3];
    if ((_DWORD)v23)
    {
      v24 = 0;
      v25 = 16 * v23;
      v26 = (char *)(*(_QWORD *)a2 + 2);
      do
      {
        v28 = *v26;
        v26 += 16;
        v27 = v28;
        if ((v28 & 0x40) != 0)
        {
          __break(1u);
          goto LABEL_32;
        }
        v24 |= 1 << v27;
        v25 -= 16;
      }
      while (v25);
      if ((v24 & 1) == 0)
        goto LABEL_15;
      v29 = (unsigned __int16)~(_WORD)v24;
      if (v29)
      {
        v20 = __clz(__rbit64(v29));
        JSC::MacroAssemblerARM64::move((_DWORD *)a1, 0, v20, v14, v15, v16, v17, v18);
        goto LABEL_14;
      }
      v21 = 1;
      LODWORD(v20) = 255;
    }
    else
    {
LABEL_15:
      LODWORD(v20) = 0;
LABEL_14:
      v21 = 1;
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 0, v13, v14, v15, v16, v17, v18);
    LODWORD(v20) = 0;
    v21 = 0;
  }
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  return v20 | (v21 << 8);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<void> (*&)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::NoResultTag&,JSC::JSValueRegs&,JSC::JSValueRegs&,JSC::JSValueRegs&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,decltype(nullptr) &>(uint64_t *a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X2>, unsigned __int8 *a4@<X3>, char *a5@<X4>, int *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t *a9@<X8>, char *a10, uint64_t *a11)
{
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  char v27;
  int v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  unsigned int v33;
  _DWORD *v34;
  _BYTE *v35;
  _BYTE *v36;
  _BYTE *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  int v47;
  int v48;
  uint64_t v49;
  _BYTE *v50;
  unsigned int v51;
  _BYTE v52[24];
  WTF *v53;
  unsigned int v54;
  unsigned int v55;
  _BYTE v56[24];

  v20 = WTF::fastMalloc((WTF *)0xC0);
  v21 = *((unsigned int *)a1 + 3);
  v22 = v52;
  v50 = v52;
  v51 = v21;
  if (v21 >= 3)
  {
    if (v21 >= 0x15555556)
      goto LABEL_22;
    v22 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v21));
    v50 = v22;
    LODWORD(v21) = *((_DWORD *)a1 + 3);
  }
  if ((_DWORD)v21)
  {
    v23 = *a1;
    v24 = *a1 + 12 * v21;
    do
    {
      *(_DWORD *)v22 = *(_DWORD *)v23;
      *(_QWORD *)(v22 + 4) = *(_QWORD *)(v23 + 4);
      v23 += 12;
      v22 += 12;
    }
    while (v23 != v24);
  }
  v25 = *a2;
  v49 = *a3;
  v26 = *a4;
  v27 = *a5;
  v28 = *a6;
  v29 = *a7;
  v30 = *a8;
  v31 = *a10;
  v32 = *a11;
  v33 = v51;
  v53 = (WTF *)v56;
  v54 = 2;
  v55 = v51;
  if (v51 >= 3)
  {
    v47 = v28;
    v48 = v26;
    if (v51 < 0x15555556)
    {
      v34 = v25;
      v35 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v51));
      v54 = 12 * v51 / 0xC;
      v53 = (WTF *)v35;
      v33 = v51;
      v25 = v34;
      v28 = v47;
      v26 = v48;
      goto LABEL_11;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x197C72C64);
  }
  v35 = v56;
  if (v51)
  {
LABEL_11:
    v36 = v50;
    v37 = &v50[12 * v33];
    do
    {
      *(_DWORD *)v35 = *(_DWORD *)v36;
      *(_QWORD *)(v35 + 4) = *(_QWORD *)(v36 + 4);
      v36 += 12;
      v35 += 12;
    }
    while (v36 != v37);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag>::CallSlowPathGenerator(v20, (uint64_t *)&v53, v25, v26, v27, v28);
  v45 = v53;
  if (v56 != (_BYTE *)v53 && v53 != 0)
  {
    v53 = 0;
    v54 = 0;
    WTF::fastFree((unint64_t)v45, v38, v39, v40, v41, v42, v43, v44);
  }
  *(_QWORD *)v20 = &off_1E3574630;
  *(_QWORD *)(v20 + 160) = v49;
  *(_BYTE *)(v20 + 168) = v29;
  *(_BYTE *)(v20 + 169) = v30;
  *(_BYTE *)(v20 + 170) = v31;
  *(_QWORD *)(v20 + 176) = v32;
  *(_QWORD *)(v20 + 184) = 0;
  *a9 = v20;
  if (v52 != v50)
  {
    if (v50)
      WTF::fastFree((unint64_t)v50, v38, v39, v40, v41, v42, v43, v44);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574600;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574600;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::unpackAndGenerate<0ul,1ul,2ul,3ul,4ul>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  char v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  int v51;
  unsigned __int8 *v52;
  void *v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void *__dst;
  uint64_t v72;
  _WORD v73[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(v8 + 5768) = 1;
      if (*(_DWORD *)(a1 + 124))
      {
        v14 = 0;
        v15 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 112) + v14, a3, a4, a5, a6, a7, a8);
          ++v15;
          v14 += 16;
        }
        while (v15 < *(unsigned int *)(a1 + 124));
      }
    }
    v16 = *(unsigned __int8 *)(a1 + 168);
    v17 = *(unsigned __int8 *)(a1 + 169);
    v18 = *(unsigned __int8 *)(a1 + 170);
    v19 = *(_QWORD *)(a1 + 176);
    __dst = v73;
    v72 = 3;
    if (v16)
    {
      v73[0] = v16;
      v16 = 1;
      HIDWORD(v72) = 1;
    }
    if (v17 != 1)
    {
      v73[v16++] = v17 | 0x100;
      HIDWORD(v72) = v16;
    }
    if (v18 == 2)
    {
      if (!v16)
      {
LABEL_71:
        v54 = *(_DWORD *)(v8 + 200);
        if (v54 + 4 > *(_DWORD *)(v8 + 192))
        {
LABEL_74:
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v54 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v54) = -763363324;
        *(_DWORD *)(v8 + 200) += 4;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v19, 3, a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 160), v55, v56, v57, v58, v59, v60, (int *)&v70);
        *(_QWORD *)(a1 + 92) = v70;
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag>::tearDown(a1, v8, v61, v62, v63, v64, v65, v66);
        return;
      }
    }
    else
    {
      v73[v16++] = v18 | 0x200;
      HIDWORD(v72) = v16;
    }
    do
    {
      v20 = 0;
      v21 = 0;
      v22 = (char *)__dst;
      v23 = v16;
      do
      {
        if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
        {
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
        v20 += 2;
      }
      while (2 * v16 != v20);
      v24 = 0;
      do
      {
        v25 = *((_BYTE *)__dst + v24) & 0x7F;
        if (v25 >= 0x40)
          goto LABEL_73;
        v21 &= ~(1 << v25);
        v24 += 2;
      }
      while (2 * v16 != v24);
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v26.i16[0] = vaddlv_u8(v26);
      v27 = v26.i32[0];
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.i32[0] + v27)
      {
        v29 = 0;
        if (v16 <= 1)
          v30 = 1;
        else
          v30 = v16;
        v31 = 2 * v30;
        while (1)
        {
          v32 = *((unsigned __int8 *)__dst + v29 + 1);
          if ((v32 & 0x7Fu) >= 0x40)
            goto LABEL_73;
          if (((v21 >> (v32 & 0x7F)) & 1) != 0)
            break;
          v29 += 2;
          if (v31 == v29)
            goto LABEL_64;
        }
        v33 = *((unsigned __int8 *)__dst + v29);
        if (v33 != v32)
        {
          v34 = (char)v33;
          if ((char)v33 == 63)
          {
            v35 = *(_DWORD *)(v8 + 200);
            v36 = *(_DWORD *)(v8 + 192);
            if (v32 == 31)
              goto LABEL_58;
            v38 = v32 & 0x1F | 0xD2800000;
          }
          else
          {
            v35 = *(_DWORD *)(v8 + 200);
            v36 = *(_DWORD *)(v8 + 192);
            v37 = (char)v32 == 31 || v34 == 31;
            if (!v37)
            {
              v38 = v32 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v38 = (char)v32 | (32 * v34) | 0x91000000;
          }
LABEL_59:
          if (v35 + 4 > v36)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v35 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v35) = v38;
          *(_DWORD *)(v8 + 200) += 4;
          v22 = (char *)__dst;
          v23 = HIDWORD(v72);
        }
        memmove(&v22[v29], &v22[v29 + 2], 2 * v23 - v29 - 2);
        v16 = HIDWORD(v72) - 1;
        goto LABEL_63;
      }
      v39 = *(_BYTE *)__dst;
      v40 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v40, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v72) - 2);
      v41 = (HIDWORD(v72) - 1);
      v37 = HIDWORD(v72) == 1;
      HIDWORD(v72) = v41;
      v42 = (unsigned __int8 *)__dst;
      v43 = (unsigned __int8 *)__dst + 2 * v41;
      if (v37)
      {
        v50 = 0;
        v51 = 0;
        v46 = 0;
        a2 = v43;
      }
      else
      {
        v44 = 2 * v41;
        v45 = __dst;
        while (*v45 != v40)
        {
          v45 += 2;
          v44 -= 2;
          if (!v44)
            goto LABEL_43;
        }
        *v45 = v39;
LABEL_43:
        v46 = 0;
        v47 = v42;
        a2 = v43;
        v48 = (char *)v43;
        do
        {
          if (*v42 == v42[1])
          {
            v49 = v42;
            if (v48 != (char *)__dst + 2 * HIDWORD(v72))
            {
              v69 = (char *)v43;
              if (v42 == a2)
              {
                v49 = (unsigned __int8 *)v48;
              }
              else
              {
                v67 = v47 - a2;
                v68 = v48;
                memmove(v48, a2, v47 - a2);
                v49 = (unsigned __int8 *)&v68[v67];
              }
              v43 = (unsigned __int8 *)v69;
            }
            a2 = v42 + 2;
            ++v46;
            v48 = (char *)v49;
          }
          v42 += 2;
          v47 += 2;
        }
        while (v42 < v43);
        v42 = (unsigned __int8 *)__dst;
        v50 = HIDWORD(v72);
        v51 = HIDWORD(v72);
        v43 = (unsigned __int8 *)v48;
      }
      v52 = &v42[2 * v50];
      if (a2 != v52)
      {
        memmove(v43, a2, v52 - a2);
        v51 = HIDWORD(v72);
      }
      v16 = v51 - v46;
LABEL_63:
      HIDWORD(v72) = v16;
LABEL_64:
      ;
    }
    while (v16);
    v53 = __dst;
    if (v73 != __dst)
    {
      if (__dst)
      {
        __dst = 0;
        LODWORD(v72) = 0;
        WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    goto LABEL_71;
  }
  v11 = 0;
  v12 = 0;
  v13 = 12 * v10;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v13 == v11)
      goto LABEL_5;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35730F0;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35730F0;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::NoResultTag>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

unsigned int *JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  char v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  unsigned __int8 *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  __int16 v73;
  int64_t v74;
  char *v75;
  char *v76;
  void *__dst;
  uint64_t v78;
  _WORD v79[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_93:
    JUMPOUT(0x197C73998);
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 124))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 124));
    }
  }
  v15 = *(unsigned int *)(a1 + 168);
  v16 = *(_QWORD *)(a1 + 176);
  v17 = *(unsigned __int8 *)(a1 + 184);
  v18 = *(unsigned __int8 *)(a1 + 185);
  v19 = *(unsigned __int8 *)(a1 + 186);
  __dst = v79;
  v78 = 3;
  if (v17 == 1)
  {
    v20 = 0;
  }
  else
  {
    v79[0] = v17 | 0x100;
    v20 = 1;
    HIDWORD(v78) = 1;
  }
  if (v18 != 2)
  {
    v79[v20++] = v18 | 0x200;
    HIDWORD(v78) = v20;
  }
  if (v19 == 3)
  {
    if (!v20)
      goto LABEL_72;
  }
  else
  {
    v79[v20++] = v19 | 0x300;
    HIDWORD(v78) = v20;
  }
  do
  {
    v21 = 0;
    v22 = 0;
    v23 = (char *)__dst;
    v24 = v20;
    do
    {
      if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
      {
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
      v21 += 2;
    }
    while (2 * v20 != v21);
    v25 = 0;
    do
    {
      v26 = *((_BYTE *)__dst + v25) & 0x7F;
      if (v26 >= 0x40)
        goto LABEL_89;
      v22 &= ~(1 << v26);
      v25 += 2;
    }
    while (2 * v20 != v25);
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
    v27.i16[0] = vaddlv_u8(v27);
    v28 = v27.i32[0];
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.i32[0] + v28)
    {
      v30 = 0;
      if (v20 <= 1)
        v31 = 1;
      else
        v31 = v20;
      v32 = 2 * v31;
      while (1)
      {
        v33 = *((unsigned __int8 *)__dst + v30 + 1);
        if ((v33 & 0x7Fu) >= 0x40)
          goto LABEL_89;
        if (((v22 >> (v33 & 0x7F)) & 1) != 0)
          break;
        v30 += 2;
        if (v32 == v30)
          goto LABEL_65;
      }
      v34 = *((unsigned __int8 *)__dst + v30);
      if (v34 != v33)
      {
        v35 = (char)v34;
        if ((char)v34 == 63)
        {
          v36 = *(_DWORD *)(v8 + 200);
          v37 = *(_DWORD *)(v8 + 192);
          if ((char)v33 == 31)
            goto LABEL_59;
          v39 = v33 & 0x1F | 0xD2800000;
        }
        else
        {
          v36 = *(_DWORD *)(v8 + 200);
          v37 = *(_DWORD *)(v8 + 192);
          v38 = v33 == 31 || v35 == 31;
          if (!v38)
          {
            v39 = v33 & 0xFFE0FFFF | ((v35 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_60;
          }
LABEL_59:
          v39 = (char)v33 | (32 * v35) | 0x91000000;
        }
LABEL_60:
        if (v36 + 4 > v37)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v36 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v36) = v39;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = HIDWORD(v78);
      }
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = HIDWORD(v78) - 1;
      goto LABEL_64;
    }
    v40 = *(_BYTE *)__dst;
    v41 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v41, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v78) - 2);
    v42 = (HIDWORD(v78) - 1);
    v38 = HIDWORD(v78) == 1;
    HIDWORD(v78) = v42;
    v43 = (unsigned __int8 *)__dst;
    v44 = (unsigned __int8 *)__dst + 2 * v42;
    if (v38)
    {
      v51 = 0;
      v52 = 0;
      v47 = 0;
      a2 = v44;
    }
    else
    {
      v45 = 2 * v42;
      v46 = __dst;
      while (*v46 != v41)
      {
        v46 += 2;
        v45 -= 2;
        if (!v45)
          goto LABEL_44;
      }
      *v46 = v40;
LABEL_44:
      v47 = 0;
      v48 = v43;
      a2 = v44;
      v49 = (char *)v44;
      do
      {
        if (*v43 == v43[1])
        {
          v50 = v43;
          if (v49 != (char *)__dst + 2 * HIDWORD(v78))
          {
            v76 = (char *)v44;
            if (v43 == a2)
            {
              v50 = (unsigned __int8 *)v49;
            }
            else
            {
              v74 = v48 - a2;
              v75 = v49;
              memmove(v49, a2, v48 - a2);
              v50 = (unsigned __int8 *)&v75[v74];
            }
            v44 = (unsigned __int8 *)v76;
          }
          a2 = v43 + 2;
          ++v47;
          v49 = (char *)v50;
        }
        v43 += 2;
        v48 += 2;
      }
      while (v43 < v44);
      v43 = (unsigned __int8 *)__dst;
      v51 = HIDWORD(v78);
      v52 = HIDWORD(v78);
      v44 = (unsigned __int8 *)v49;
    }
    v53 = &v43[2 * v51];
    if (a2 != v53)
    {
      memmove(v44, a2, v53 - a2);
      v52 = HIDWORD(v78);
    }
    v20 = v52 - v47;
LABEL_64:
    HIDWORD(v78) = v20;
LABEL_65:
    ;
  }
  while (v20);
  v54 = __dst;
  if (v79 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v78) = 0;
    WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_72:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
LABEL_90:
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 160), v55, v56, v57, v58, v59, v60, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_77;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 0, v61, v62, v63, v64, v65, v66);
LABEL_77:
    v67 = 0;
    v68 = 0;
    goto LABEL_78;
  }
  v73 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int,long long),JSC::NoResultTag,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, (unsigned int *)(a1 + 112), v61, v62, v63, v64, v65, v66);
  v68 = v73;
  v67 = HIBYTE(v73);
LABEL_78:
  if (!*(_BYTE *)(a1 + 100))
  {
    v69 = *(_DWORD *)(a1 + 124);
    if (v69)
    {
      v70 = v69 - 1;
      v71 = 16 * (v69 - 1);
      while (*(_DWORD *)(a1 + 124) > v70)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 112) + v71, v61, v62, v63, v64, v65, v66);
        v71 -= 16;
        if (--v70 == -1)
          goto LABEL_83;
      }
      __break(0xC471u);
      goto LABEL_93;
    }
LABEL_83:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (!*(_BYTE *)(a1 + 101) && v67)
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, v68, v61, v62, v63, v64, v65, v66);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573150;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573150;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSString *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  _BYTE *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  unsigned int *v83;
  JSC::AssemblerBuffer *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void *__dst;
  int v97;
  unsigned int v98;
  _WORD v99[4];
  unint64_t v100;
  unsigned int *v101;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v18 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v18, v12, v13, v14, v15, v16, v17);
        ++v8;
        v18 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(unsigned int *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(unsigned __int8 *)(a1 + 152);
  v22 = *(unsigned __int8 *)(a1 + 153);
  __dst = v99;
  v97 = 2;
  if (v21 == 1)
  {
    if (v22 == 2)
      goto LABEL_65;
    v23 = 0;
  }
  else
  {
    v99[0] = v21 | 0x100;
    v23 = 1;
    v98 = 1;
    if (v22 == 2)
      goto LABEL_11;
  }
  v99[v23++] = v22 | 0x200;
  v98 = v23;
  do
  {
LABEL_11:
    v24 = 0;
    v25 = 0;
    v26 = (char *)__dst;
    v27 = v23;
    do
    {
      if ((*((_BYTE *)__dst + v24 + 1) & 0x40) != 0)
        goto LABEL_107;
      v25 |= 1 << *((_BYTE *)__dst + v24 + 1);
      v24 += 2;
    }
    while (2 * v23 != v24);
    v28 = 0;
    do
    {
      v29 = *((_BYTE *)__dst + v28) & 0x7F;
      if (v29 >= 0x40)
        goto LABEL_107;
      v25 &= ~(1 << v29);
      v28 += 2;
    }
    while (2 * v23 != v28);
    v30 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
    v30.i16[0] = vaddlv_u8(v30);
    v31 = v30.i32[0];
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.i32[0] + v31)
    {
      v8 = 0;
      if (v23 <= 1)
        v33 = 1;
      else
        v33 = v23;
      v34 = 2 * v33;
      while (1)
      {
        v35 = *((unsigned __int8 *)__dst + v8 + 1);
        if ((v35 & 0x7Fu) >= 0x40)
          goto LABEL_107;
        if (((v25 >> (v35 & 0x7F)) & 1) != 0)
          break;
        v8 += 2;
        if (v34 == v8)
          goto LABEL_61;
      }
      v36 = *((unsigned __int8 *)__dst + v8);
      if (v36 == v35)
      {
LABEL_59:
        memmove(&v26[v8], &v26[v8 + 2], 2 * v27 - v8 - 2);
        v23 = v98 - 1;
        goto LABEL_60;
      }
      v37 = (char)v36;
      if ((char)v36 == 63)
      {
        v38 = *(_DWORD *)(a2 + 200);
        v39 = *(_DWORD *)(a2 + 192);
        if ((char)v35 != 31)
        {
          v41 = v35 & 0x1F | 0xD2800000;
          goto LABEL_56;
        }
      }
      else
      {
        v38 = *(_DWORD *)(a2 + 200);
        v39 = *(_DWORD *)(a2 + 192);
        v40 = v35 == 31 || v37 == 31;
        if (!v40)
        {
          v41 = v35 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
LABEL_56:
          if (v38 + 4 > v39)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
            v38 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = v41;
          *(_DWORD *)(a2 + 200) += 4;
          v26 = (char *)__dst;
          v27 = v98;
          goto LABEL_59;
        }
      }
      v41 = (char)v35 | (32 * v37) | 0x91000000;
      goto LABEL_56;
    }
    v42 = *(_BYTE *)__dst;
    v43 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v43, v13, v14, v15, v16, v17);
    memmove(__dst, (char *)__dst + 2, 2 * v98 - 2);
    v44 = v98 - 1;
    v40 = v98 == 1;
    v98 = v44;
    v8 = (unint64_t)__dst;
    v45 = (char *)__dst + 2 * v44;
    if (v40)
    {
      v52 = 0;
      v53 = 0;
      v48 = 0;
      v11 = v45;
    }
    else
    {
      v46 = 2 * v44;
      v47 = __dst;
      while (*v47 != v43)
      {
        v47 += 2;
        v46 -= 2;
        if (!v46)
          goto LABEL_39;
      }
      *v47 = v42;
LABEL_39:
      v48 = 0;
      v49 = v8;
      v11 = v45;
      v50 = v45;
      do
      {
        if (*(unsigned __int8 *)v8 == *(unsigned __int8 *)(v8 + 1))
        {
          v51 = (char *)v8;
          if (v50 != (char *)__dst + 2 * v98)
          {
            v94 = v45;
            if ((_BYTE *)v8 == v11)
            {
              v51 = v50;
            }
            else
            {
              v92 = v49 - (_QWORD)v11;
              v93 = v50;
              memmove(v50, v11, v49 - (_QWORD)v11);
              v51 = &v93[v92];
            }
            v45 = v94;
          }
          v11 = (_BYTE *)(v8 + 2);
          ++v48;
          v50 = v51;
        }
        v8 += 2;
        v49 += 2;
      }
      while (v8 < (unint64_t)v45);
      v8 = (unint64_t)__dst;
      v52 = v98;
      v53 = v98;
      v45 = v50;
    }
    v54 = (_BYTE *)(v8 + 2 * v52);
    if (v11 != v54)
    {
      memmove(v45, v11, v54 - v11);
      v53 = v98;
    }
    v23 = v53 - v48;
LABEL_60:
    v98 = v23;
LABEL_61:
    ;
  }
  while (v23);
  v55 = __dst;
  if (v99 != __dst && __dst)
  {
    __dst = 0;
    v97 = 0;
    WTF::fastFree((unint64_t)v55, v11, v12, v13, v14, v15, v16, v17);
  }
LABEL_65:
  if (v19 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v20, 0, v13, v14, v15, v16, v17);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v19 << 35) + 0x380000001ALL, 0, v13, v14, v15, v16, v17);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v56, v57, v58, v59, v60, v61, (int *)&v95);
  *(_QWORD *)(a1 + 64) = v95;
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_70:
    v62 = 0;
    LOBYTE(v8) = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 72))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
      goto LABEL_70;
    }
    LOBYTE(v8) = *(_BYTE *)(a1 + 74);
    __dst = (void *)2;
    v101 = 0;
    v70 = *(_QWORD *)(a2 + 3960);
    v71 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
    if ((v71 & 1) != 0)
    {
      v87 = *(_QWORD *)(v71 & 0xFFFFFFFF8);
      if ((v71 & 2) != 0
        || ((v88 = *(unsigned int *)((v71 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
          ? (v89 = (_DWORD)v88 == -1)
          : (v89 = 1),
            v89))
      {
        v90 = 2;
      }
      else if (v88 >> 28)
      {
        v91 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v91 = v87;
        *(_DWORD *)(v91 + 8) = v88;
        v90 = 1;
        v87 = v91;
      }
      else
      {
        v90 = *(_QWORD *)(v71 & 0xFFFFFFFF8);
        v87 = v88 << 36;
      }
      v71 = v87 | v90;
    }
    v100 = v71;
    v72 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v70, &v100, (uint64_t *)&__dst, &v101, v14, v15, v16, v17);
    if ((v100 & 1) != 0 && (v100 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v100 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
    if ((v72 & 1) != 0)
    {
      v73 = *(unsigned int *)(a1 + 92);
      if ((_DWORD)v73)
      {
        v74 = 0;
        v75 = 16 * v73;
        v76 = (char *)(*(_QWORD *)(a1 + 80) + 2);
        while (1)
        {
          v78 = *v76;
          v76 += 16;
          v77 = v78;
          if ((v78 & 0x40) != 0)
            goto LABEL_107;
          v74 |= 1 << v77;
          v75 -= 16;
          if (!v75)
            goto LABEL_99;
        }
      }
      v74 = 0;
LABEL_99:
      if ((v8 & 0x40) != 0)
      {
LABEL_107:
        __break(1u);
        goto LABEL_108;
      }
      v62 = 1;
      v79 = v74 | (1 << v8);
      LOBYTE(v8) = 1;
      if ((v79 & 2) != 0)
      {
        v80 = (unsigned __int16)~(_WORD)v79 & 0xFFFE;
        if (v80)
        {
          LODWORD(v8) = __clz(__rbit64(v80));
          if ((_DWORD)v8 == 1)
          {
            v62 = 1;
          }
          else
          {
            if ((_DWORD)v8 != 31)
            {
              v81 = v8 | 0xAA0103E0;
              v83 = (unsigned int *)(a2 + 200);
              v82 = *(_DWORD *)(a2 + 200);
              v84 = (JSC::AssemblerBuffer *)(a2 + 56);
              v85 = v82 + 4;
              v86 = *(_DWORD *)(a2 + 192);
              goto LABEL_109;
            }
LABEL_108:
            v83 = (unsigned int *)(a2 + 200);
            v82 = *(_DWORD *)(a2 + 200);
            v84 = (JSC::AssemblerBuffer *)(a2 + 56);
            v85 = v82 + 4;
            v86 = *(_DWORD *)(a2 + 192);
            v81 = -1862270913;
LABEL_109:
            if (v85 > v86)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v84, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
              v82 = *v83;
            }
            *(_DWORD *)(*(_QWORD *)v84 + v82) = v81;
            *v83 += 4;
            v62 = 1;
          }
        }
        else
        {
          v62 = 1;
          LOBYTE(v8) = -1;
        }
      }
    }
    else
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
      LOBYTE(v8) = 0;
      v62 = 0;
    }
    if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
      WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  }
  v63 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v63 == 31)
    {
      v64 = -1862270945;
    }
    else if (v63 == 255)
    {
      v64 = -1442774017;
    }
    else
    {
      v64 = v63 | 0xAA0003E0;
    }
    v66 = (unsigned int *)(a2 + 200);
    v65 = *(_DWORD *)(a2 + 200);
    if (v65 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
      v65 = *v66;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v65) = v64;
    *v66 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
  {
LABEL_85:
    if (v62)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v8, v12, v13, v14, v15, v16, v17);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v12, v13, v14, v15, v16, v17);
    return;
  }
  v67 = *(_DWORD *)(a1 + 92);
  if (!v67)
  {
LABEL_84:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_85;
  }
  v68 = v67 - 1;
  v69 = 16 * (v67 - 1);
  while (*(_DWORD *)(a1 + 92) > v68)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v69, v12, v13, v14, v15, v16, v17);
    v69 -= 16;
    if (--v68 == -1)
      goto LABEL_84;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35731B0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35731B0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,int),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int *v94;
  JSC::AssemblerBuffer *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int16 *v101;
  uint64_t v102;
  void *__dst;
  int v104;
  unsigned int v105;
  __int16 v106;
  unint64_t v107;
  unsigned int *v108;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_129;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = &v106;
  __dst = &v106;
  v104 = 1;
  if (v17 != 1)
  {
    v106 = v17 | 0x100;
    v105 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_129;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_129;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v100 = v19;
      v101 = v18;
      v99 = v15;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v105 - 2);
      v40 = v105 - 1;
      v35 = v105 == 1;
      v105 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v105)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v105;
        v44 = v105;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v105;
      }
      v20 = v44 - v45;
      v15 = v99;
      v18 = v101;
      v19 = v100;
LABEL_40:
      v105 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v104 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_129;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v105 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v105;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&v102);
  *(_QWORD *)(a1 + 92) = v102;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
LABEL_67:
    v67 = 0;
    LOBYTE(v68) = 0;
    goto LABEL_68;
  }
  v76 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v108 = 0;
  v77 = *(_QWORD *)(v8 + 3960);
  v78 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v78 & 1) != 0)
  {
    v86 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
    if ((v78 & 2) != 0
      || ((v87 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v87 != 0x3FFFFFFF)
        ? (v88 = (_DWORD)v87 == -1)
        : (v88 = 1),
          v88))
    {
      v89 = 2;
    }
    else if (v87 >> 28)
    {
      v98 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v98 = v86;
      *(_DWORD *)(v98 + 8) = v87;
      v89 = 1;
      v86 = v98;
    }
    else
    {
      v89 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
      v86 = v87 << 36;
    }
    v78 = v86 | v89;
  }
  v107 = v78;
  v79 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v77, &v107, (uint64_t *)&__dst, &v108, v63, v64, v65, v66);
  if ((v107 & 1) != 0 && (v107 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v107 & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
  if ((v79 & 1) != 0)
  {
    v80 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v80)
    {
      v81 = 0;
      v82 = 16 * v80;
      v83 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v85 = *v83;
        v83 += 16;
        v84 = v85;
        if ((v85 & 0x40) != 0)
          break;
        v81 |= 1 << v84;
        v82 -= 16;
        if (!v82)
          goto LABEL_108;
      }
    }
    else
    {
      v81 = 0;
LABEL_108:
      if ((v76 & 0x40) == 0)
      {
        v67 = 1;
        v90 = v81 | (1 << v76);
        LOBYTE(v68) = 1;
        if ((v90 & 2) != 0)
        {
          v91 = (unsigned __int16)~(_WORD)v90 & 0xFFFE;
          if (v91)
          {
            v68 = __clz(__rbit64(v91));
            if (v68 == 1)
            {
              v67 = 1;
            }
            else
            {
              if (v68 == 31)
              {
                v94 = (unsigned int *)(v8 + 200);
                v93 = *(_DWORD *)(v8 + 200);
                v95 = (JSC::AssemblerBuffer *)(v8 + 56);
                v96 = v93 + 4;
                v97 = *(_DWORD *)(v8 + 192);
                v92 = -1862270913;
              }
              else
              {
                v92 = v68 | 0xAA0103E0;
                v94 = (unsigned int *)(v8 + 200);
                v93 = *(_DWORD *)(v8 + 200);
                v95 = (JSC::AssemblerBuffer *)(v8 + 56);
                v96 = v93 + 4;
                v97 = *(_DWORD *)(v8 + 192);
              }
              if (v96 > v97)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v95, (uint64_t)v60, v61, v62, v63, v64, v65, v66);
                v93 = *v94;
              }
              *(_DWORD *)(*(_QWORD *)v95 + v93) = v92;
              *v94 += 4;
              v67 = 1;
            }
          }
          else
          {
            v67 = 1;
            LOBYTE(v68) = -1;
          }
        }
        goto LABEL_90;
      }
    }
LABEL_129:
    __break(1u);
LABEL_130:
    __break(0xC471u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
  LOBYTE(v68) = 0;
  v67 = 0;
LABEL_90:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
LABEL_68:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_81;
      }
      goto LABEL_130;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v67)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateStrictInt52Operand>(uint64_t result, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  char v14;

  *(_QWORD *)result = this;
  *(_BYTE *)(result + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v11 = result;
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 8) == 1)
    {
      v12 = *(unsigned __int8 *)(a3 + 16);
      if (v12 == 255)
      {
        LOBYTE(v12) = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(*(JSC::DFG::SpeculativeJIT **)a3, v9, 3, a4, a5, a6, a7, a8);
        *(_BYTE *)(a3 + 16) = v12;
      }
      if ((char)v12 > 15)
        v14 = -1;
      else
        v14 = v12;
      ++*((_DWORD *)this + 3 * v14 + 1196);
    }
    else
    {
      LOBYTE(v12) = JSC::DFG::SpeculativeJIT::allocate(this, v9, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(v11 + 8) = v12;
    return v11;
  }
  return result;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,unsigned long long (*)(double),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573210;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,unsigned long long (*)(double),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573210;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,unsigned long long (*)(double),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,unsigned long long (*)(double),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::FPRegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  char *v9;
  unsigned int v10;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  int v23;
  unsigned int v24;
  JSC::AssemblerBuffer *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint8x8_t v34;
  __int32 v35;
  uint8x8_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned __int8 *v49;
  unint64_t v50;
  char *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned int v62;
  uint64_t v63;
  void *__dst;
  int v65;
  unsigned int v66;
  __int16 v67;
  unint64_t v68;
  unsigned int *v69;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v20 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v20, v14, v15, v16, v17, v18, v19);
        ++v8;
        v20 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 92));
    }
  }
  v21 = *(unsigned __int8 *)(a1 + 136);
  v22 = (unsigned int *)&v67;
  __dst = &v67;
  v65 = 1;
  if (v21)
  {
    v67 = v21;
    v66 = 1;
    v25 = (JSC::AssemblerBuffer *)(a2 + 56);
    v29 = 1;
LABEL_28:
    v30 = 0;
    v31 = 0;
    while (((*((_BYTE *)__dst + v30 + 1) + 32) & 0x40) == 0)
    {
      v31 |= 1 << (*((_BYTE *)__dst + v30 + 1) + 32);
      v30 += 2;
      if (2 * v29 == v30)
      {
        v32 = 0;
        while (1)
        {
          v33 = (*((_BYTE *)__dst + v32) + 32) & 0x7F;
          if (v33 >= 0x40)
            goto LABEL_79;
          v31 &= ~(1 << v33);
          v32 += 2;
          if (2 * v29 == v32)
          {
            v34 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
            v34.i16[0] = vaddlv_u8(v34);
            v35 = v34.i32[0];
            v36 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v31));
            v36.i16[0] = vaddlv_u8(v36);
            if (v36.i32[0] + v35)
            {
              v8 = 0;
              if (v29 <= 1)
                v37 = 1;
              else
                v37 = v29;
              v38 = 2 * v37;
              while (1)
              {
                LODWORD(v9) = *((char *)__dst + v8 + 1);
                v39 = (*((_BYTE *)__dst + v8 + 1) + 32) & 0x7F;
                if (v39 >= 0x40)
                  goto LABEL_79;
                if (((v31 >> v39) & 1) != 0)
                {
                  v10 = *((char *)__dst + v8);
                  v40 = *(_DWORD *)(a2 + 200);
                  if (v40 + 4 > *(_DWORD *)(a2 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v13, v14, v15, v16, v17, v18, v19);
                    v40 = *(_DWORD *)(a2 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = v9 | (32 * v10) | 0x1E604000;
                  *(_DWORD *)(a2 + 200) += 4;
                  memmove((char *)__dst + v8, (char *)__dst + v8 + 2, 2 * v66 - v8 - 2);
                  v29 = v66 - 1;
                  goto LABEL_46;
                }
                v8 += 2;
                if (v38 == v8)
                  goto LABEL_47;
              }
            }
            v41 = *(_BYTE *)__dst;
            LODWORD(v9) = *((char *)__dst + 1);
            JSC::MacroAssemblerARM64::swapDouble((_DWORD *)a2, *(char *)__dst, v9, v15, v16, v17, v18, v19);
            memmove(__dst, (char *)__dst + 2, 2 * v66 - 2);
            v42 = v66 - 1;
            v58 = v66 == 1;
            v66 = v42;
            v43 = (unsigned __int8 *)__dst;
            v44 = (char *)__dst + 2 * v42;
            if (v58)
            {
              v47 = 0;
              v48 = 0;
              v10 = 0;
              v13 = (char *)__dst + 2 * v42;
            }
            else
            {
              v45 = 2 * v42;
              v46 = __dst;
              while (*v46 != v9)
              {
                v46 += 2;
                v45 -= 2;
                if (!v45)
                  goto LABEL_56;
              }
              *v46 = v41;
LABEL_56:
              v10 = 0;
              v8 = (unint64_t)v43;
              v13 = v44;
              v9 = v44;
              v61 = v44;
              do
              {
                if (*v43 == v43[1])
                {
                  v49 = v43;
                  if (v9 != (char *)__dst + 2 * v66)
                  {
                    if (v43 == (unsigned __int8 *)v13)
                    {
                      v49 = (unsigned __int8 *)v9;
                    }
                    else
                    {
                      v62 = v10;
                      v50 = v8 - (_QWORD)v13;
                      memmove(v9, v13, v8 - (_QWORD)v13);
                      v44 = v61;
                      v49 = (unsigned __int8 *)&v9[v50];
                      v10 = v62;
                    }
                  }
                  v13 = (char *)(v43 + 2);
                  ++v10;
                  v9 = (char *)v49;
                }
                v43 += 2;
                v8 += 2;
              }
              while (v43 < (unsigned __int8 *)v44);
              v43 = (unsigned __int8 *)__dst;
              v47 = v66;
              v48 = v66;
              v44 = v9;
            }
            v51 = (char *)&v43[2 * v47];
            if (v13 != v51)
            {
              memmove(v44, v13, v51 - v13);
              v48 = v66;
            }
            v29 = v48 - v10;
LABEL_46:
            v66 = v29;
LABEL_47:
            if (!v29)
            {
              v52 = __dst;
              if (&v67 != __dst && __dst)
              {
                __dst = 0;
                v65 = 0;
                WTF::fastFree((unint64_t)v52, v13, v14, v15, v16, v17, v18, v19);
              }
              goto LABEL_6;
            }
            goto LABEL_28;
          }
        }
      }
    }
LABEL_79:
    __break(1u);
LABEL_80:
    JSC::AssemblerBuffer::outOfLineGrow(v25, (uint64_t)v13, v14, v15, v16, v17, v18, v19);
    v24 = *v22;
    goto LABEL_16;
  }
LABEL_6:
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v14, v15, v16, v17, v18, v19, (int *)&v63);
  *(_QWORD *)(a1 + 64) = v63;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_9;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0xFFFFFFFFLL, v14, v15, v16, v17, v18, v19);
LABEL_9:
    LODWORD(v9) = 0;
    LOBYTE(v8) = 0;
    goto LABEL_10;
  }
  __dst = (void *)2;
  v69 = 0;
  v53 = *(_QWORD *)(a2 + 3960);
  v54 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v54 & 1) != 0)
  {
    v56 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
    if ((v54 & 2) != 0
      || ((v57 = *(unsigned int *)((v54 & 0xFFFFFFFF8) + 8), (_DWORD)v57 != 0x3FFFFFFF)
        ? (v58 = (_DWORD)v57 == -1)
        : (v58 = 1),
          v58))
    {
      v59 = 2;
    }
    else if (v57 >> 28)
    {
      v60 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v60 = v56;
      *(_DWORD *)(v60 + 8) = v57;
      v59 = 1;
      v56 = v60;
    }
    else
    {
      v59 = *(_QWORD *)(v54 & 0xFFFFFFFF8);
      v56 = v57 << 36;
    }
    v54 = v56 | v59;
  }
  v68 = v54;
  v55 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v53, &v68, (uint64_t *)&__dst, &v69, v16, v17, v18, v19);
  if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v68 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  if ((v55 & 1) != 0)
  {
    LODWORD(v9) = 1;
    LOBYTE(v8) = -1;
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0xFFFFFFFFLL, v14, v15, v16, v17, v18, v19);
    LOBYTE(v8) = 0;
    LODWORD(v9) = 0;
  }
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
LABEL_10:
  v23 = *(unsigned __int8 *)(a1 + 74);
  if (!*(_BYTE *)(a1 + 74))
    goto LABEL_17;
  if (v23 == 31)
  {
    v10 = -1862270945;
  }
  else if (v23 == 255)
  {
    v10 = -1442774017;
  }
  else
  {
    v10 = v23 | 0xAA0003E0;
  }
  v22 = (unsigned int *)(a2 + 200);
  v24 = *(_DWORD *)(a2 + 200);
  v25 = (JSC::AssemblerBuffer *)(a2 + 56);
  if (v24 + 4 > *(_DWORD *)(a2 + 192))
    goto LABEL_80;
LABEL_16:
  *(_DWORD *)(*(_QWORD *)v25 + v24) = v10;
  *v22 += 4;
LABEL_17:
  if (*(_BYTE *)(a1 + 72))
  {
LABEL_23:
    if ((_DWORD)v9)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v8, v14, v15, v16, v17, v18, v19);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v14, v15, v16, v17, v18, v19);
    return;
  }
  v26 = *(_DWORD *)(a1 + 92);
  if (!v26)
  {
LABEL_22:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_23;
  }
  v27 = v26 - 1;
  v28 = 16 * (v26 - 1);
  while (*(_DWORD *)(a1 + 92) > v27)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v28, v14, v15, v16, v17, v18, v19);
    v28 -= 16;
    if (--v27 == -1)
      goto LABEL_22;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E35747B0;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_DWORD *)(v11 + 104) = a6;
  *(_QWORD *)(v11 + 112) = v11 + 128;
  *(_QWORD *)(v11 + 120) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 112, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35747B0;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35747B0;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  char v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  int v52;
  unsigned __int8 *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  char *v69;
  void *__dst;
  uint64_t v71;
  _WORD v72[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(v8 + 5768) = 1;
      if (*(_DWORD *)(a1 + 124))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 124));
      }
    }
    v15 = *(unsigned int *)(a1 + 168);
    v16 = *(_QWORD *)(a1 + 176);
    v17 = *(unsigned __int8 *)(a1 + 184);
    v18 = *(unsigned __int8 *)(a1 + 185);
    v19 = *(unsigned __int8 *)(a1 + 186);
    __dst = v72;
    v71 = 3;
    if (v17 == 1)
    {
      v20 = 0;
    }
    else
    {
      v72[0] = v17 | 0x100;
      v20 = 1;
      HIDWORD(v71) = 1;
    }
    if (v18 != 2)
    {
      v72[v20++] = v18 | 0x200;
      HIDWORD(v71) = v20;
    }
    if (v19 == 3)
    {
      if (!v20)
      {
LABEL_72:
        if (v15 == 0xFFFFFFFFLL)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
        else
LABEL_76:
          JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 160), v55, v56, v57, v58, v59, v60, (int *)&__dst);
        *(_QWORD *)(a1 + 92) = __dst;
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag>::tearDown(a1, v8, v61, v62, v63, v64, v65, v66);
        return;
      }
    }
    else
    {
      v72[v20++] = v19 | 0x300;
      HIDWORD(v71) = v20;
    }
    do
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
        {
LABEL_75:
          __break(1u);
          goto LABEL_76;
        }
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_75;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
      {
        v30 = 0;
        if (v20 <= 1)
          v31 = 1;
        else
          v31 = v20;
        v32 = 2 * v31;
        while (1)
        {
          v33 = *((unsigned __int8 *)__dst + v30 + 1);
          if ((v33 & 0x7Fu) >= 0x40)
            goto LABEL_75;
          if (((v22 >> (v33 & 0x7F)) & 1) != 0)
            break;
          v30 += 2;
          if (v32 == v30)
            goto LABEL_65;
        }
        v34 = *((unsigned __int8 *)__dst + v30);
        if (v34 != v33)
        {
          v35 = (char)v34;
          if ((char)v34 == 63)
          {
            v36 = *(_DWORD *)(v8 + 200);
            v37 = *(_DWORD *)(v8 + 192);
            if ((char)v33 == 31)
              goto LABEL_59;
            v39 = v33 & 0x1F | 0xD2800000;
          }
          else
          {
            v36 = *(_DWORD *)(v8 + 200);
            v37 = *(_DWORD *)(v8 + 192);
            v38 = v33 == 31 || v35 == 31;
            if (!v38)
            {
              v39 = v33 & 0xFFE0FFFF | ((v35 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_60;
            }
LABEL_59:
            v39 = (char)v33 | (32 * v35) | 0x91000000;
          }
LABEL_60:
          if (v36 + 4 > v37)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v36 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v36) = v39;
          *(_DWORD *)(v8 + 200) += 4;
          v23 = (char *)__dst;
          v24 = HIDWORD(v71);
        }
        memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
        v20 = HIDWORD(v71) - 1;
        goto LABEL_64;
      }
      v40 = *(_BYTE *)__dst;
      v41 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v41, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v71) - 2);
      v42 = (HIDWORD(v71) - 1);
      v38 = HIDWORD(v71) == 1;
      HIDWORD(v71) = v42;
      v43 = (unsigned __int8 *)__dst;
      v44 = (unsigned __int8 *)__dst + 2 * v42;
      if (v38)
      {
        v51 = 0;
        v52 = 0;
        v47 = 0;
        a2 = v44;
      }
      else
      {
        v45 = 2 * v42;
        v46 = __dst;
        while (*v46 != v41)
        {
          v46 += 2;
          v45 -= 2;
          if (!v45)
            goto LABEL_44;
        }
        *v46 = v40;
LABEL_44:
        v47 = 0;
        v48 = v43;
        a2 = v44;
        v49 = (char *)v44;
        do
        {
          if (*v43 == v43[1])
          {
            v50 = v43;
            if (v49 != (char *)__dst + 2 * HIDWORD(v71))
            {
              v69 = (char *)v44;
              if (v43 == a2)
              {
                v50 = (unsigned __int8 *)v49;
              }
              else
              {
                v67 = v48 - a2;
                v68 = v49;
                memmove(v49, a2, v48 - a2);
                v50 = (unsigned __int8 *)&v68[v67];
              }
              v44 = (unsigned __int8 *)v69;
            }
            a2 = v43 + 2;
            ++v47;
            v49 = (char *)v50;
          }
          v43 += 2;
          v48 += 2;
        }
        while (v43 < v44);
        v43 = (unsigned __int8 *)__dst;
        v51 = HIDWORD(v71);
        v52 = HIDWORD(v71);
        v44 = (unsigned __int8 *)v49;
      }
      v53 = &v43[2 * v51];
      if (a2 != v53)
      {
        memmove(v44, a2, v53 - a2);
        v52 = HIDWORD(v71);
      }
      v20 = v52 - v47;
LABEL_64:
      HIDWORD(v71) = v20;
LABEL_65:
      ;
    }
    while (v20);
    v54 = __dst;
    if (v72 != __dst)
    {
      if (__dst)
      {
        __dst = 0;
        LODWORD(v71) = 0;
        WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    goto LABEL_72;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  __int16 v16;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v10 = 0;
    v11 = 0;
    goto LABEL_5;
  }
  v16 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 112), *(unsigned int *)(a1 + 104), a4, a5, a6, a7, a8);
  v11 = v16;
  v10 = HIBYTE(v16);
LABEL_5:
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_11:
    if (*(_BYTE *)(a1 + 101))
      v15 = 1;
    else
      v15 = v10 == 0;
    if (!v15)
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, v11, a3, a4, a5, a6, a7, a8);
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v12 = *(_DWORD *)(a1 + 124);
  if (!v12)
  {
LABEL_10:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_11;
  }
  v13 = v12 - 1;
  v14 = 16 * (v12 - 1);
  while (*(_DWORD *)(a1 + 124) > v13)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 112) + v14, a3, a4, a5, a6, a7, a8);
    v14 -= 16;
    if (--v13 == -1)
      goto LABEL_10;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long),JSC::NoResultTag,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  char v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  uint64_t v37;

  v36 = 0;
  v37 = 2;
  v10 = *(_QWORD *)(a1 + 3960);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 3976) + 8);
  if ((v11 & 1) != 0)
  {
    v19 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    if ((v11 & 2) != 0
      || ((v24 = *(unsigned int *)((v11 & 0xFFFFFFFF8) + 8), (_DWORD)v24 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v24 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else if (v24 >> 28)
    {
LABEL_32:
      v34 = v10;
      v32 = v24;
      v33 = WTF::fastMalloc((WTF *)0x10);
      v10 = v34;
      *(_QWORD *)v33 = v19;
      *(_DWORD *)(v33 + 8) = v32;
      v30 = 1;
      v19 = v33;
    }
    else
    {
      v30 = v19;
      v19 = v24 << 36;
    }
    v11 = v19 | v30;
  }
  v35 = v11;
  v10 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v10, &v35, &v37, &v36, a5, a6, a7, a8);
  v19 = v10;
  if ((v35 & 1) != 0)
  {
    v10 = v35 & 0xFFFFFFFF8;
    if ((v35 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v10, v12, v13, v14, v15, v16, v17, v18);
  }
  if ((v19 & 1) != 0)
  {
    v23 = a2[3];
    if ((_DWORD)v23)
    {
      v24 = 0;
      v25 = 16 * v23;
      v26 = (char *)(*(_QWORD *)a2 + 2);
      do
      {
        v28 = *v26;
        v26 += 16;
        v27 = v28;
        if ((v28 & 0x40) != 0)
        {
          __break(1u);
          goto LABEL_32;
        }
        v24 |= 1 << v27;
        v25 -= 16;
      }
      while (v25);
      if ((v24 & 1) == 0)
        goto LABEL_12;
      v31 = (unsigned __int16)~(_WORD)v24;
      if (v31)
      {
        v20 = __clz(__rbit64(v31));
        JSC::MacroAssemblerARM64::move((_DWORD *)a1, 0, v20, v14, v15, v16, v17, v18);
        goto LABEL_13;
      }
      v21 = 1;
      LODWORD(v20) = 255;
    }
    else
    {
LABEL_12:
      LODWORD(v20) = 0;
LABEL_13:
      v21 = 1;
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 0, v13, v14, v15, v16, v17, v18);
    LODWORD(v20) = 0;
    v21 = 0;
  }
  if ((v37 & 1) != 0 && (v37 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v37 & 0xFFFFFFFF8, v12, v13, v14, v15, v16, v17, v18);
  return v20 | (v21 << 8);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574600;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574600;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned __int8 v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  __int16 *v48;
  int v49;
  char *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  int64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int8 *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned int v68;
  unsigned int v69;
  __int16 v70;
  _BYTE v71[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 124))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 124));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 200) + 136), *(char *)(a1 + 160), a5, a6, a7, a8);
    v22 = *(_DWORD *)(a1 + 184);
    v68 = 0;
    if ((_BYTE)v22)
    {
      v70 = v22;
      v23 = 1;
      v68 = 1;
    }
    else
    {
      v23 = 0;
    }
    if ((v22 & 0xFF00) != 0x100)
    {
      *(_WORD *)&v71[2 * v23++ - 2] = BYTE1(v22) | 0x100;
      v68 = v23;
    }
    if ((v22 & 0xFF0000) != 0x20000)
    {
      *(_WORD *)&v71[2 * v23++ - 2] = BYTE2(v22) | 0x200;
      v68 = v23;
    }
    if (HIBYTE(v22) == 3)
    {
      if (!v23)
      {
LABEL_71:
        v58 = *(_DWORD *)(a2 + 200);
        if (v58 + 4 > *(_DWORD *)(a2 + 192))
        {
LABEL_74:
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
          v58 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v58) = -763363324;
        *(_DWORD *)(a2 + 200) += 4;
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 164), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag>::tearDown(a1, a2, v59, v60, v61, v62, v63, v64);
        return;
      }
    }
    else
    {
      *(_WORD *)&v71[2 * v23++ - 2] = HIBYTE(v22) | 0x300;
      v68 = v23;
    }
    do
    {
      v24 = 0;
      v25 = 0;
      v26 = v23;
      do
      {
        if ((v71[v24 - 1] & 0x40) != 0)
        {
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        v25 |= 1 << v71[v24 - 1];
        v24 += 2;
      }
      while (2 * v23 != v24);
      v27 = 0;
      do
      {
        v28 = v71[v27 - 2] & 0x7F;
        if (v28 >= 0x40)
          goto LABEL_73;
        v25 &= ~(1 << v28);
        v27 += 2;
      }
      while (2 * v23 != v27);
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v29.i16[0] = vaddlv_u8(v29);
      v30 = v29.i32[0];
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.i32[0] + v30)
      {
        v32 = 0;
        if (v23 <= 1)
          v33 = 1;
        else
          v33 = v23;
        v34 = 2 * v33;
        while (1)
        {
          v35 = v71[v32 - 1];
          if ((v35 & 0x7Fu) >= 0x40)
            goto LABEL_73;
          if (((v25 >> (v35 & 0x7F)) & 1) != 0)
            break;
          v32 += 2;
          if (v34 == v32)
            goto LABEL_67;
        }
        v36 = v71[v32 - 2];
        if (v36 != v35)
        {
          v37 = (char)v36;
          if ((char)v36 == 63)
          {
            v38 = *(_DWORD *)(a2 + 200);
            v39 = *(_DWORD *)(a2 + 192);
            if ((char)v35 == 31)
              goto LABEL_61;
            v41 = v35 & 0x1F | 0xD2800000;
          }
          else
          {
            v38 = *(_DWORD *)(a2 + 200);
            v39 = *(_DWORD *)(a2 + 192);
            v40 = v35 == 31 || v37 == 31;
            if (!v40)
            {
              v41 = v35 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_62;
            }
LABEL_61:
            v41 = (char)v35 | (32 * v37) | 0x91000000;
          }
LABEL_62:
          if (v38 + 4 > v39)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
            v38 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = v41;
          *(_DWORD *)(a2 + 200) += 4;
          v26 = v68;
        }
        memmove(&v71[v32 - 2], &v71[v32], 2 * v26 - v32 - 2);
        v23 = v68 - 1;
        goto LABEL_66;
      }
      v42 = HIBYTE(v70);
      v43 = v70;
      JSC::MacroAssemblerARM64::swap(a2, (char)v70, SHIBYTE(v70), v17, v18, v19, v20, v21);
      memmove(&v70, v71, 2 * v68 - 2);
      v44 = v68 - 1;
      v40 = v68 == 1;
      v69 = v44;
      v45 = (unsigned __int8 *)&v70;
      v46 = &v71[2 * v44 - 2];
      if (v40)
      {
        v55 = 0;
        v56 = 0;
        v49 = 0;
        v15 = v46;
      }
      else
      {
        v47 = 2 * v44;
        v48 = &v70;
        while (*(unsigned __int8 *)v48 != v42)
        {
          ++v48;
          v47 -= 2;
          if (!v47)
            goto LABEL_46;
        }
        *(_BYTE *)v48 = v43;
LABEL_46:
        v49 = 0;
        v50 = (char *)&v70;
        v15 = v46;
        v51 = v46;
        do
        {
          if (*v45 == v45[1])
          {
            v52 = v45;
            if (v51 != &v71[2 * v69 - 2])
            {
              v66 = v46;
              v67 = v45;
              if (v45 == v15)
              {
                v52 = v51;
              }
              else
              {
                v53 = v50 - (char *)v15;
                v54 = v51;
                v65 = v50;
                memmove(v51, v15, v50 - (char *)v15);
                v50 = v65;
                v52 = &v54[v53];
              }
              v46 = v66;
              v45 = v67;
            }
            v15 = v45 + 2;
            ++v49;
            v51 = v52;
          }
          v45 += 2;
          v50 += 2;
        }
        while (v45 < v46);
        v55 = v69;
        v56 = v69;
        v46 = v51;
      }
      v57 = &v71[2 * v55 - 2];
      if (v15 != v57)
      {
        memmove(v46, v15, v57 - v15);
        v56 = v69;
      }
      v23 = v56 - v49;
LABEL_66:
      v68 = v23;
LABEL_67:
      ;
    }
    while (v23);
    goto LABEL_71;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574600;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574600;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  char *v67;
  char *v68;
  void *__dst;
  uint64_t v70;
  _WORD v71[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(v8 + 5768) = 1;
      if (*(_DWORD *)(a1 + 124))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 124));
      }
    }
    v15 = *(unsigned __int8 *)(a1 + 168);
    v16 = *(unsigned __int8 *)(a1 + 169);
    v17 = *(unsigned __int8 *)(a1 + 170);
    v18 = *(_QWORD *)(a1 + 176);
    __dst = v71;
    v70 = 3;
    if (v15)
    {
      v71[0] = v15;
      v15 = 1;
      HIDWORD(v70) = 1;
    }
    if (v16 != 1)
    {
      v71[v15++] = v16 | 0x100;
      HIDWORD(v70) = v15;
    }
    if (v17 == 2)
    {
      if (!v15)
      {
LABEL_71:
        v53 = *(_DWORD *)(v8 + 200);
        if (v53 + 4 > *(_DWORD *)(v8 + 192))
        {
LABEL_74:
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v53 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v53) = -763363324;
        *(_DWORD *)(v8 + 200) += 4;
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v18, 3, a4, a5, a6, a7, a8);
        JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 160), v54, v55, v56, v57, v58, v59, (int *)&__dst);
        *(_QWORD *)(a1 + 92) = __dst;
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag>::tearDown(a1, v8, v60, v61, v62, v63, v64, v65);
        return;
      }
    }
    else
    {
      v71[v15++] = v17 | 0x200;
      HIDWORD(v70) = v15;
    }
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = (char *)__dst;
      v22 = v15;
      do
      {
        if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        {
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
        v19 += 2;
      }
      while (2 * v15 != v19);
      v23 = 0;
      do
      {
        v24 = *((_BYTE *)__dst + v23) & 0x7F;
        if (v24 >= 0x40)
          goto LABEL_73;
        v20 &= ~(1 << v24);
        v23 += 2;
      }
      while (2 * v15 != v23);
      v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v25.i16[0] = vaddlv_u8(v25);
      v26 = v25.i32[0];
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.i32[0] + v26)
      {
        v28 = 0;
        if (v15 <= 1)
          v29 = 1;
        else
          v29 = v15;
        v30 = 2 * v29;
        while (1)
        {
          v31 = *((unsigned __int8 *)__dst + v28 + 1);
          if ((v31 & 0x7Fu) >= 0x40)
            goto LABEL_73;
          if (((v20 >> (v31 & 0x7F)) & 1) != 0)
            break;
          v28 += 2;
          if (v30 == v28)
            goto LABEL_64;
        }
        v32 = *((unsigned __int8 *)__dst + v28);
        if (v32 != v31)
        {
          v33 = (char)v32;
          if ((char)v32 == 63)
          {
            v34 = *(_DWORD *)(v8 + 200);
            v35 = *(_DWORD *)(v8 + 192);
            if ((char)v31 == 31)
              goto LABEL_58;
            v37 = v31 & 0x1F | 0xD2800000;
          }
          else
          {
            v34 = *(_DWORD *)(v8 + 200);
            v35 = *(_DWORD *)(v8 + 192);
            v36 = v31 == 31 || v33 == 31;
            if (!v36)
            {
              v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v37 = (char)v31 | (32 * v33) | 0x91000000;
          }
LABEL_59:
          if (v34 + 4 > v35)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v34 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v34) = v37;
          *(_DWORD *)(v8 + 200) += 4;
          v21 = (char *)__dst;
          v22 = HIDWORD(v70);
        }
        memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
        v15 = HIDWORD(v70) - 1;
        goto LABEL_63;
      }
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v70) - 2);
      v40 = (HIDWORD(v70) - 1);
      v36 = HIDWORD(v70) == 1;
      HIDWORD(v70) = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (unsigned __int8 *)__dst + 2 * v40;
      if (v36)
      {
        v49 = 0;
        v50 = 0;
        v45 = 0;
        a2 = v42;
      }
      else
      {
        v43 = 2 * v40;
        v44 = __dst;
        while (*v44 != v39)
        {
          v44 += 2;
          v43 -= 2;
          if (!v43)
            goto LABEL_43;
        }
        *v44 = v38;
LABEL_43:
        v45 = 0;
        v46 = v41;
        a2 = v42;
        v47 = (char *)v42;
        do
        {
          if (*v41 == v41[1])
          {
            v48 = v41;
            if (v47 != (char *)__dst + 2 * HIDWORD(v70))
            {
              v68 = (char *)v42;
              if (v41 == a2)
              {
                v48 = (unsigned __int8 *)v47;
              }
              else
              {
                v66 = v46 - a2;
                v67 = v47;
                memmove(v47, a2, v46 - a2);
                v48 = (unsigned __int8 *)&v67[v66];
              }
              v42 = (unsigned __int8 *)v68;
            }
            a2 = v41 + 2;
            ++v45;
            v47 = (char *)v48;
          }
          v41 += 2;
          v46 += 2;
        }
        while (v41 < v42);
        v41 = (unsigned __int8 *)__dst;
        v49 = HIDWORD(v70);
        v50 = HIDWORD(v70);
        v42 = (unsigned __int8 *)v47;
      }
      v51 = &v41[2 * v49];
      if (a2 != v51)
      {
        memmove(v42, a2, v51 - a2);
        v50 = HIDWORD(v70);
      }
      v15 = v50 - v45;
LABEL_63:
      HIDWORD(v70) = v15;
LABEL_64:
      ;
    }
    while (v15);
    v52 = __dst;
    if (v71 != __dst)
    {
      if (__dst)
      {
        __dst = 0;
        LODWORD(v70) = 0;
        WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    goto LABEL_71;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3573300;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_DWORD *)(v11 + 104) = a6;
  *(_QWORD *)(v11 + 112) = v11 + 128;
  *(_QWORD *)(v11 + 120) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 112, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573300;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573300;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __int16 *v49;
  int v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char *v54;
  int64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  __int16 v71;
  _BYTE v72[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 124))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 124));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 188) + 136), *(char *)(a1 + 160), a5, a6, a7, a8);
    v22 = *(unsigned __int8 *)(a1 + 184);
    v23 = *(unsigned __int8 *)(a1 + 185);
    v24 = *(unsigned __int8 *)(a1 + 186);
    v69 = 0;
    if (*(_BYTE *)(a1 + 184))
    {
      v71 = *(unsigned __int8 *)(a1 + 184);
      v22 = 1;
      v69 = 1;
    }
    if (v23 != 1)
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v23 | 0x100;
      v69 = v22;
    }
    if (v24 == 2)
    {
      if (!v22)
      {
LABEL_68:
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 164), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag>::tearDown(a1, a2, v60, v61, v62, v63, v64, v65);
        return;
      }
    }
    else
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v24 | 0x200;
      v69 = v22;
    }
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = v22;
      do
      {
        if ((v72[v25 - 1] & 0x40) != 0)
        {
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        v26 |= 1 << v72[v25 - 1];
        v25 += 2;
      }
      while (2 * v22 != v25);
      v28 = 0;
      do
      {
        v29 = v72[v28 - 2] & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_69;
        v26 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v22 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.i32[0] + v31)
      {
        v33 = 0;
        if (v22 <= 1)
          v34 = 1;
        else
          v34 = v22;
        v35 = 2 * v34;
        while (1)
        {
          v36 = v72[v33 - 1];
          if ((v36 & 0x7Fu) >= 0x40)
            goto LABEL_69;
          if (((v26 >> (v36 & 0x7F)) & 1) != 0)
            break;
          v33 += 2;
          if (v35 == v33)
            goto LABEL_64;
        }
        v37 = v72[v33 - 2];
        if (v37 != v36)
        {
          v38 = (char)v37;
          if ((char)v37 == 63)
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            if ((char)v36 == 31)
              goto LABEL_58;
            v42 = v36 & 0x1F | 0xD2800000;
          }
          else
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            v41 = v36 == 31 || v38 == 31;
            if (!v41)
            {
              v42 = v36 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v42 = (char)v36 | (32 * v38) | 0x91000000;
          }
LABEL_59:
          if (v39 + 4 > v40)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
            v39 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v42;
          *(_DWORD *)(a2 + 200) += 4;
          v27 = v69;
        }
        memmove(&v72[v33 - 2], &v72[v33], 2 * v27 - v33 - 2);
        v22 = v69 - 1;
        goto LABEL_63;
      }
      v43 = HIBYTE(v71);
      v44 = v71;
      JSC::MacroAssemblerARM64::swap(a2, (char)v71, SHIBYTE(v71), v17, v18, v19, v20, v21);
      memmove(&v71, v72, 2 * v69 - 2);
      v45 = v69 - 1;
      v41 = v69 == 1;
      v70 = v45;
      v46 = (unsigned __int8 *)&v71;
      v47 = &v72[2 * v45 - 2];
      if (v41)
      {
        v57 = 0;
        v58 = 0;
        v50 = 0;
        v15 = v47;
      }
      else
      {
        v48 = 2 * v45;
        v49 = &v71;
        while (*(unsigned __int8 *)v49 != v43)
        {
          ++v49;
          v48 -= 2;
          if (!v48)
            goto LABEL_43;
        }
        *(_BYTE *)v49 = v44;
LABEL_43:
        v50 = 0;
        v51 = (char *)&v71;
        v15 = v47;
        v52 = v47;
        do
        {
          if (*v46 == v46[1])
          {
            v53 = v46;
            if (v52 != &v72[2 * v70 - 2])
            {
              v68 = v50;
              v66 = v47;
              v67 = v46;
              if (v46 == v15)
              {
                v53 = v52;
              }
              else
              {
                v54 = v51;
                v55 = v51 - (char *)v15;
                v56 = v52;
                memmove(v52, v15, v51 - (char *)v15);
                v51 = v54;
                v53 = &v56[v55];
              }
              v47 = v66;
              v46 = v67;
              v50 = v68;
            }
            v15 = v46 + 2;
            ++v50;
            v52 = v53;
          }
          v46 += 2;
          v51 += 2;
        }
        while (v46 < v47);
        v57 = v70;
        v58 = v70;
        v47 = v52;
      }
      v59 = &v72[2 * v57 - 2];
      if (v15 != v59)
      {
        memmove(v47, v15, v59 - v15);
        v58 = v70;
      }
      v22 = v58 - v50;
LABEL_63:
      v69 = v22;
LABEL_64:
      ;
    }
    while (v22);
    goto LABEL_68;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
LABEL_70:
  __break(0xC471u);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  JSC::AssemblerBuffer *v22;
  char *v23;
  char v24;
  char v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  JSC::AssemblerBuffer *v33;
  unint64_t v34;
  unsigned int *v35;
  uint64_t v36;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v12 = 0;
    LOBYTE(v8) = 0;
    goto LABEL_5;
  }
  v35 = 0;
  v36 = 2;
  v16 = *(_QWORD *)(a2 + 3960);
  v17 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v17 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 3960);
    v9 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
    if ((v17 & 2) != 0
      || ((v28 = *(unsigned int *)((v17 & 0xFFFFFFFF8) + 8), (_DWORD)v28 != 0x3FFFFFFF)
        ? (v29 = (_DWORD)v28 == -1)
        : (v29 = 1),
          v29))
    {
      v30 = 2;
    }
    else if (v28 >> 28)
    {
      v32 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v32 = v9;
      *(_DWORD *)(v32 + 8) = v28;
      v30 = 1;
      v9 = v32;
    }
    else
    {
      v30 = *(_QWORD *)(v17 & 0xFFFFFFFF8);
      v9 = v28 << 36;
    }
    v17 = v9 | v30;
    v16 = v8;
  }
  v34 = v17;
  v18 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v16, &v34, &v36, &v35, a5, a6, a7, a8);
  if ((v34 & 1) != 0 && (v34 & 0xFFFFFFFF8) != 0)
  {
    LOBYTE(v8) = v18;
    WTF::fastFree(v34 & 0xFFFFFFFF8, v19, a3, a4, a5, a6, a7, a8);
    v18 = v8;
  }
  if ((v18 & 1) != 0)
  {
    v20 = *(unsigned int *)(a1 + 124);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = (JSC::AssemblerBuffer *)(16 * v20);
      v23 = (char *)(*(_QWORD *)(a1 + 112) + 2);
      do
      {
        v25 = *v23;
        v23 += 16;
        v24 = v25;
        if ((v25 & 0x40) != 0)
        {
          __break(1u);
LABEL_50:
          v33 = v22;
          v31 = (unsigned int *)v21;
          JSC::AssemblerBuffer::outOfLineGrow(v22, (uint64_t)v19, a3, a4, a5, a6, a7, a8);
          v21 = (unint64_t)v31;
          v22 = v33;
          v27 = *v31;
LABEL_34:
          *(_DWORD *)(*(_QWORD *)v22 + v27) = v9;
          *(_DWORD *)v21 += 4;
          goto LABEL_35;
        }
        v21 |= 1 << v24;
        v22 = (JSC::AssemblerBuffer *)((char *)v22 - 16);
      }
      while (v22);
      if ((v21 & 1) == 0)
        goto LABEL_31;
      v26 = (unsigned __int16)~(_WORD)v21;
      if (v26)
      {
        LODWORD(v8) = __clz(__rbit64(v26));
        if (!(_DWORD)v8)
          goto LABEL_35;
        if ((_DWORD)v8 == 31)
          LODWORD(v9) = -1862270945;
        else
          LODWORD(v9) = v8 | 0xAA0003E0;
        v21 = a2 + 200;
        v27 = *(_DWORD *)(a2 + 200);
        v22 = (JSC::AssemblerBuffer *)(a2 + 56);
        if (v27 + 4 <= *(_DWORD *)(a2 + 192))
          goto LABEL_34;
        goto LABEL_50;
      }
      v12 = 1;
      LOBYTE(v8) = -1;
    }
    else
    {
LABEL_31:
      LOBYTE(v8) = 0;
LABEL_35:
      v12 = 1;
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0, a3, a4, a5, a6, a7, a8);
    LOBYTE(v8) = 0;
    v12 = 0;
  }
  if ((v36 & 1) != 0 && (v36 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v36 & 0xFFFFFFFF8, v19, a3, a4, a5, a6, a7, a8);
LABEL_5:
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_11:
    if (v12)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v8, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v13 = *(_DWORD *)(a1 + 124);
  if (!v13)
  {
LABEL_10:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_11;
  }
  v14 = v13 - 1;
  v15 = 16 * (v13 - 1);
  while (*(_DWORD *)(a1 + 124) > v14)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 112) + v15, a3, a4, a5, a6, a7, a8);
    v15 -= 16;
    if (--v14 == -1)
      goto LABEL_10;
  }
  __break(0xC471u);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<void> (*&)(long long,long long,JSC::StructureStubInfo *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::NoResultTag&,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, int *a7, char *a8, char *a9, uint64_t *a10)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  char v24;
  int v25;
  char v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  _DWORD *v30;
  _BYTE *v31;
  _BYTE *v32;
  _BYTE *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  int v43;
  uint64_t v44;
  _BYTE *v46;
  unsigned int v47;
  _BYTE v48[24];
  WTF *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE v52[24];

  v17 = WTF::fastMalloc((WTF *)0xB8);
  v18 = *((unsigned int *)a2 + 3);
  v46 = v48;
  v47 = v18;
  if (v18 < 3)
  {
    v19 = v48;
  }
  else
  {
    if (v18 >= 0x15555556)
      goto LABEL_23;
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v18));
    v46 = v19;
    LODWORD(v18) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v18)
  {
    v20 = *a2;
    v21 = *a2 + 12 * v18;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = *a3;
  v44 = *a4;
  v23 = *a5;
  v24 = *a6;
  v25 = *a7;
  v26 = *a8;
  v27 = *a9;
  v28 = *a10;
  v29 = v47;
  v49 = (WTF *)v52;
  v50 = 2;
  v51 = v47;
  if (v47 >= 3)
  {
    v43 = v23;
    if (v47 < 0x15555556)
    {
      v30 = v22;
      v31 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v47));
      v50 = 12 * v47 / 0xC;
      v49 = (WTF *)v31;
      v29 = v47;
      v22 = v30;
      v23 = v43;
      goto LABEL_12;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197C7766CLL);
  }
  v31 = v52;
  if (v47)
  {
LABEL_12:
    v32 = v46;
    v33 = &v46[12 * v29];
    do
    {
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_QWORD *)(v31 + 4) = *(_QWORD *)(v32 + 4);
      v32 += 12;
      v31 += 12;
    }
    while (v32 != v33);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag>::CallSlowPathGenerator(v17, (uint64_t *)&v49, v22, v23, v24, v25);
  v41 = v49;
  if (v52 != (_BYTE *)v49 && v49 != 0)
  {
    v49 = 0;
    v50 = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  *(_QWORD *)v17 = &off_1E3573330;
  *(_QWORD *)(v17 + 160) = v44;
  *(_BYTE *)(v17 + 168) = v26;
  *(_BYTE *)(v17 + 169) = v27;
  *(_QWORD *)(v17 + 176) = v28;
  *a1 = v17;
  if (v48 != v46)
  {
    if (v46)
      WTF::fastFree((unint64_t)v46, v34, v35, v36, v37, v38, v39, v40);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573300;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573300;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  char *v66;
  char *v67;
  void *__dst;
  int v69;
  unsigned int v70;
  _WORD v71[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_73:
        __break(1u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 124))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 124));
    }
  }
  v15 = *(unsigned __int8 *)(a1 + 168);
  v16 = *(unsigned __int8 *)(a1 + 169);
  v17 = *(_QWORD *)(a1 + 176);
  __dst = v71;
  v69 = 2;
  if (v15)
  {
    v71[0] = v15;
    v18 = 1;
    v70 = 1;
    if (v16 == 1)
      goto LABEL_15;
  }
  else
  {
    if (v16 == 1)
      goto LABEL_69;
    v18 = 0;
  }
  v71[v18++] = v16 | 0x100;
  v70 = v18;
  do
  {
LABEL_15:
    v19 = 0;
    v20 = 0;
    v21 = (char *)__dst;
    v22 = v18;
    do
    {
      if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        goto LABEL_73;
      v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
      v19 += 2;
    }
    while (2 * v18 != v19);
    v23 = 0;
    do
    {
      v24 = *((_BYTE *)__dst + v23) & 0x7F;
      if (v24 >= 0x40)
        goto LABEL_73;
      v20 &= ~(1 << v24);
      v23 += 2;
    }
    while (2 * v18 != v23);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.i32[0];
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.i32[0] + v26)
    {
      v28 = 0;
      if (v18 <= 1)
        v29 = 1;
      else
        v29 = v18;
      v30 = 2 * v29;
      while (1)
      {
        v31 = *((unsigned __int8 *)__dst + v28 + 1);
        if ((v31 & 0x7Fu) >= 0x40)
          goto LABEL_73;
        if (((v20 >> (v31 & 0x7F)) & 1) != 0)
          break;
        v28 += 2;
        if (v30 == v28)
          goto LABEL_65;
      }
      v32 = *((unsigned __int8 *)__dst + v28);
      if (v32 == v31)
      {
LABEL_63:
        memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
        v18 = v70 - 1;
        goto LABEL_64;
      }
      v33 = (char)v32;
      if ((char)v32 == 63)
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        if ((char)v31 != 31)
        {
          v37 = v31 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        v36 = v31 == 31 || v33 == 31;
        if (!v36)
        {
          v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v34 + 4 > v35)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v34 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v34) = v37;
          *(_DWORD *)(v8 + 200) += 4;
          v21 = (char *)__dst;
          v22 = v70;
          goto LABEL_63;
        }
      }
      v37 = (char)v31 | (32 * v33) | 0x91000000;
      goto LABEL_60;
    }
    v38 = *(_BYTE *)__dst;
    v39 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v70 - 2);
    v40 = v70 - 1;
    v36 = v70 == 1;
    v70 = v40;
    v41 = (unsigned __int8 *)__dst;
    v42 = (unsigned __int8 *)__dst + 2 * v40;
    if (v36)
    {
      v49 = 0;
      v50 = 0;
      v45 = 0;
      a2 = v42;
    }
    else
    {
      v43 = 2 * v40;
      v44 = __dst;
      while (*v44 != v39)
      {
        v44 += 2;
        v43 -= 2;
        if (!v43)
          goto LABEL_43;
      }
      *v44 = v38;
LABEL_43:
      v45 = 0;
      v46 = v41;
      a2 = v42;
      v47 = (char *)v42;
      do
      {
        if (*v41 == v41[1])
        {
          v48 = v41;
          if (v47 != (char *)__dst + 2 * v70)
          {
            v67 = (char *)v42;
            if (v41 == a2)
            {
              v48 = (unsigned __int8 *)v47;
            }
            else
            {
              v65 = v46 - a2;
              v66 = v47;
              memmove(v47, a2, v46 - a2);
              v48 = (unsigned __int8 *)&v66[v65];
            }
            v42 = (unsigned __int8 *)v67;
          }
          a2 = v41 + 2;
          ++v45;
          v47 = (char *)v48;
        }
        v41 += 2;
        v46 += 2;
      }
      while (v41 < v42);
      v41 = (unsigned __int8 *)__dst;
      v49 = v70;
      v50 = v70;
      v42 = (unsigned __int8 *)v47;
    }
    v51 = &v41[2 * v49];
    if (a2 != v51)
    {
      memmove(v42, a2, v51 - a2);
      v50 = v70;
    }
    v18 = v50 - v45;
LABEL_64:
    v70 = v18;
LABEL_65:
    ;
  }
  while (v18);
  v52 = __dst;
  if (v71 != __dst)
  {
    if (__dst)
    {
      __dst = 0;
      v69 = 0;
      WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_69:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v17, 2, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 160), v53, v54, v55, v56, v57, v58, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag>::tearDown(a1, v8, v59, v60, v61, v62, v63, v64);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573300;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573300;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __int16 *v49;
  int v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char *v54;
  int64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  __int16 v71;
  _BYTE v72[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 124))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 124));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 188) + 136), *(char *)(a1 + 160), a5, a6, a7, a8);
    v22 = *(unsigned __int8 *)(a1 + 184);
    v23 = *(unsigned __int8 *)(a1 + 185);
    v24 = *(unsigned __int8 *)(a1 + 186);
    v69 = 0;
    if (*(_BYTE *)(a1 + 184))
    {
      v71 = *(unsigned __int8 *)(a1 + 184);
      v22 = 1;
      v69 = 1;
    }
    if (v23 != 1)
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v23 | 0x100;
      v69 = v22;
    }
    if (v24 == 2)
    {
      if (!v22)
      {
LABEL_68:
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 164), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag>::tearDown(a1, a2, v60, v61, v62, v63, v64, v65);
        return;
      }
    }
    else
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v24 | 0x200;
      v69 = v22;
    }
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = v22;
      do
      {
        if ((v72[v25 - 1] & 0x40) != 0)
        {
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        v26 |= 1 << v72[v25 - 1];
        v25 += 2;
      }
      while (2 * v22 != v25);
      v28 = 0;
      do
      {
        v29 = v72[v28 - 2] & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_69;
        v26 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v22 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.i32[0] + v31)
      {
        v33 = 0;
        if (v22 <= 1)
          v34 = 1;
        else
          v34 = v22;
        v35 = 2 * v34;
        while (1)
        {
          v36 = v72[v33 - 1];
          if ((v36 & 0x7Fu) >= 0x40)
            goto LABEL_69;
          if (((v26 >> (v36 & 0x7F)) & 1) != 0)
            break;
          v33 += 2;
          if (v35 == v33)
            goto LABEL_64;
        }
        v37 = v72[v33 - 2];
        if (v37 != v36)
        {
          v38 = (char)v37;
          if ((char)v37 == 63)
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            if ((char)v36 == 31)
              goto LABEL_58;
            v42 = v36 & 0x1F | 0xD2800000;
          }
          else
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            v41 = v36 == 31 || v38 == 31;
            if (!v41)
            {
              v42 = v36 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v42 = (char)v36 | (32 * v38) | 0x91000000;
          }
LABEL_59:
          if (v39 + 4 > v40)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
            v39 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v42;
          *(_DWORD *)(a2 + 200) += 4;
          v27 = v69;
        }
        memmove(&v72[v33 - 2], &v72[v33], 2 * v27 - v33 - 2);
        v22 = v69 - 1;
        goto LABEL_63;
      }
      v43 = HIBYTE(v71);
      v44 = v71;
      JSC::MacroAssemblerARM64::swap(a2, (char)v71, SHIBYTE(v71), v17, v18, v19, v20, v21);
      memmove(&v71, v72, 2 * v69 - 2);
      v45 = v69 - 1;
      v41 = v69 == 1;
      v70 = v45;
      v46 = (unsigned __int8 *)&v71;
      v47 = &v72[2 * v45 - 2];
      if (v41)
      {
        v57 = 0;
        v58 = 0;
        v50 = 0;
        v15 = v47;
      }
      else
      {
        v48 = 2 * v45;
        v49 = &v71;
        while (*(unsigned __int8 *)v49 != v43)
        {
          ++v49;
          v48 -= 2;
          if (!v48)
            goto LABEL_43;
        }
        *(_BYTE *)v49 = v44;
LABEL_43:
        v50 = 0;
        v51 = (char *)&v71;
        v15 = v47;
        v52 = v47;
        do
        {
          if (*v46 == v46[1])
          {
            v53 = v46;
            if (v52 != &v72[2 * v70 - 2])
            {
              v68 = v50;
              v66 = v47;
              v67 = v46;
              if (v46 == v15)
              {
                v53 = v52;
              }
              else
              {
                v54 = v51;
                v55 = v51 - (char *)v15;
                v56 = v52;
                memmove(v52, v15, v51 - (char *)v15);
                v51 = v54;
                v53 = &v56[v55];
              }
              v47 = v66;
              v46 = v67;
              v50 = v68;
            }
            v15 = v46 + 2;
            ++v50;
            v52 = v53;
          }
          v46 += 2;
          v51 += 2;
        }
        while (v46 < v47);
        v57 = v70;
        v58 = v70;
        v47 = v52;
      }
      v59 = &v72[2 * v57 - 2];
      if (v15 != v59)
      {
        memmove(v47, v15, v59 - v15);
        v58 = v70;
      }
      v22 = v58 - v50;
LABEL_63:
      v69 = v22;
LABEL_64:
      ;
    }
    while (v22);
    goto LABEL_68;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
LABEL_70:
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573300;
  v9 = *(_QWORD *)(a1 + 112);
  if (a1 + 128 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 120) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573300;
  v9 = (WTF *)*((_QWORD *)this + 14);
  if ((WTF *)((char *)this + 128) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag,JSC::CCallHelpers::CellValue,JSC::CCallHelpers::CellValue,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  char *v66;
  char *v67;
  void *__dst;
  int v69;
  unsigned int v70;
  _WORD v71[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_73:
        __break(1u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 124))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 112) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 124));
    }
  }
  v15 = *(unsigned __int8 *)(a1 + 168);
  v16 = *(unsigned __int8 *)(a1 + 169);
  v17 = *(_QWORD *)(a1 + 176);
  __dst = v71;
  v69 = 2;
  if (v15)
  {
    v71[0] = v15;
    v18 = 1;
    v70 = 1;
    if (v16 == 1)
      goto LABEL_15;
  }
  else
  {
    if (v16 == 1)
      goto LABEL_69;
    v18 = 0;
  }
  v71[v18++] = v16 | 0x100;
  v70 = v18;
  do
  {
LABEL_15:
    v19 = 0;
    v20 = 0;
    v21 = (char *)__dst;
    v22 = v18;
    do
    {
      if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        goto LABEL_73;
      v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
      v19 += 2;
    }
    while (2 * v18 != v19);
    v23 = 0;
    do
    {
      v24 = *((_BYTE *)__dst + v23) & 0x7F;
      if (v24 >= 0x40)
        goto LABEL_73;
      v20 &= ~(1 << v24);
      v23 += 2;
    }
    while (2 * v18 != v23);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.i32[0];
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.i32[0] + v26)
    {
      v28 = 0;
      if (v18 <= 1)
        v29 = 1;
      else
        v29 = v18;
      v30 = 2 * v29;
      while (1)
      {
        v31 = *((unsigned __int8 *)__dst + v28 + 1);
        if ((v31 & 0x7Fu) >= 0x40)
          goto LABEL_73;
        if (((v20 >> (v31 & 0x7F)) & 1) != 0)
          break;
        v28 += 2;
        if (v30 == v28)
          goto LABEL_65;
      }
      v32 = *((unsigned __int8 *)__dst + v28);
      if (v32 == v31)
      {
LABEL_63:
        memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
        v18 = v70 - 1;
        goto LABEL_64;
      }
      v33 = (char)v32;
      if ((char)v32 == 63)
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        if ((char)v31 != 31)
        {
          v37 = v31 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        v36 = v31 == 31 || v33 == 31;
        if (!v36)
        {
          v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v34 + 4 > v35)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v34 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v34) = v37;
          *(_DWORD *)(v8 + 200) += 4;
          v21 = (char *)__dst;
          v22 = v70;
          goto LABEL_63;
        }
      }
      v37 = (char)v31 | (32 * v33) | 0x91000000;
      goto LABEL_60;
    }
    v38 = *(_BYTE *)__dst;
    v39 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v70 - 2);
    v40 = v70 - 1;
    v36 = v70 == 1;
    v70 = v40;
    v41 = (unsigned __int8 *)__dst;
    v42 = (unsigned __int8 *)__dst + 2 * v40;
    if (v36)
    {
      v49 = 0;
      v50 = 0;
      v45 = 0;
      a2 = v42;
    }
    else
    {
      v43 = 2 * v40;
      v44 = __dst;
      while (*v44 != v39)
      {
        v44 += 2;
        v43 -= 2;
        if (!v43)
          goto LABEL_43;
      }
      *v44 = v38;
LABEL_43:
      v45 = 0;
      v46 = v41;
      a2 = v42;
      v47 = (char *)v42;
      do
      {
        if (*v41 == v41[1])
        {
          v48 = v41;
          if (v47 != (char *)__dst + 2 * v70)
          {
            v67 = (char *)v42;
            if (v41 == a2)
            {
              v48 = (unsigned __int8 *)v47;
            }
            else
            {
              v65 = v46 - a2;
              v66 = v47;
              memmove(v47, a2, v46 - a2);
              v48 = (unsigned __int8 *)&v66[v65];
            }
            v42 = (unsigned __int8 *)v67;
          }
          a2 = v41 + 2;
          ++v45;
          v47 = (char *)v48;
        }
        v41 += 2;
        v46 += 2;
      }
      while (v41 < v42);
      v41 = (unsigned __int8 *)__dst;
      v49 = v70;
      v50 = v70;
      v42 = (unsigned __int8 *)v47;
    }
    v51 = &v41[2 * v49];
    if (a2 != v51)
    {
      memmove(v42, a2, v51 - a2);
      v50 = v70;
    }
    v18 = v50 - v45;
LABEL_64:
    v70 = v18;
LABEL_65:
    ;
  }
  while (v18);
  v52 = __dst;
  if (v71 != __dst)
  {
    if (__dst)
    {
      __dst = 0;
      v69 = 0;
      WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_69:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v17, 2, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 160), v53, v54, v55, v56, v57, v58, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,JSC::StructureStubInfo *),JSC::NoResultTag>::tearDown(a1, v8, v59, v60, v61, v62, v63, v64);
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3574660;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574660;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathICGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574660;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathICGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  __int16 *v49;
  int v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  char *v54;
  int64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  __int16 v71;
  _BYTE v72[6];

  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    JSC::MacroAssemblerARM64::sub64(a2, 26, (136 * *(_DWORD *)(a1 + 180) + 136), *(char *)(a1 + 152), a5, a6, a7, a8);
    v22 = *(unsigned __int8 *)(a1 + 176);
    v23 = *(unsigned __int8 *)(a1 + 177);
    v24 = *(unsigned __int8 *)(a1 + 178);
    v69 = 0;
    if (*(_BYTE *)(a1 + 176))
    {
      v71 = *(unsigned __int8 *)(a1 + 176);
      v22 = 1;
      v69 = 1;
    }
    if (v23 != 1)
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v23 | 0x100;
      v69 = v22;
    }
    if (v24 == 2)
    {
      if (!v22)
      {
LABEL_68:
        JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 156), v16, v17, v18, v19, v20, v21);
        JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::tearDown(a1, a2, v60, v61, v62, v63, v64, v65);
        return;
      }
    }
    else
    {
      *(_WORD *)&v72[2 * v22++ - 2] = v24 | 0x200;
      v69 = v22;
    }
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = v22;
      do
      {
        if ((v72[v25 - 1] & 0x40) != 0)
        {
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        v26 |= 1 << v72[v25 - 1];
        v25 += 2;
      }
      while (2 * v22 != v25);
      v28 = 0;
      do
      {
        v29 = v72[v28 - 2] & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_69;
        v26 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v22 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v32.i16[0] = vaddlv_u8(v32);
      if (v32.i32[0] + v31)
      {
        v33 = 0;
        if (v22 <= 1)
          v34 = 1;
        else
          v34 = v22;
        v35 = 2 * v34;
        while (1)
        {
          v36 = v72[v33 - 1];
          if ((v36 & 0x7Fu) >= 0x40)
            goto LABEL_69;
          if (((v26 >> (v36 & 0x7F)) & 1) != 0)
            break;
          v33 += 2;
          if (v35 == v33)
            goto LABEL_64;
        }
        v37 = v72[v33 - 2];
        if (v37 != v36)
        {
          v38 = (char)v37;
          if ((char)v37 == 63)
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            if ((char)v36 == 31)
              goto LABEL_58;
            v42 = v36 & 0x1F | 0xD2800000;
          }
          else
          {
            v39 = *(_DWORD *)(a2 + 200);
            v40 = *(_DWORD *)(a2 + 192);
            v41 = v36 == 31 || v38 == 31;
            if (!v41)
            {
              v42 = v36 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_59;
            }
LABEL_58:
            v42 = (char)v36 | (32 * v38) | 0x91000000;
          }
LABEL_59:
          if (v39 + 4 > v40)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
            v39 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v42;
          *(_DWORD *)(a2 + 200) += 4;
          v27 = v69;
        }
        memmove(&v72[v33 - 2], &v72[v33], 2 * v27 - v33 - 2);
        v22 = v69 - 1;
        goto LABEL_63;
      }
      v43 = HIBYTE(v71);
      v44 = v71;
      JSC::MacroAssemblerARM64::swap(a2, (char)v71, SHIBYTE(v71), v17, v18, v19, v20, v21);
      memmove(&v71, v72, 2 * v69 - 2);
      v45 = v69 - 1;
      v41 = v69 == 1;
      v70 = v45;
      v46 = (unsigned __int8 *)&v71;
      v47 = &v72[2 * v45 - 2];
      if (v41)
      {
        v57 = 0;
        v58 = 0;
        v50 = 0;
        v15 = v47;
      }
      else
      {
        v48 = 2 * v45;
        v49 = &v71;
        while (*(unsigned __int8 *)v49 != v43)
        {
          ++v49;
          v48 -= 2;
          if (!v48)
            goto LABEL_43;
        }
        *(_BYTE *)v49 = v44;
LABEL_43:
        v50 = 0;
        v51 = (char *)&v71;
        v15 = v47;
        v52 = v47;
        do
        {
          if (*v46 == v46[1])
          {
            v53 = v46;
            if (v52 != &v72[2 * v70 - 2])
            {
              v68 = v50;
              v66 = v47;
              v67 = v46;
              if (v46 == v15)
              {
                v53 = v52;
              }
              else
              {
                v54 = v51;
                v55 = v51 - (char *)v15;
                v56 = v52;
                memmove(v52, v15, v51 - (char *)v15);
                v51 = v54;
                v53 = &v56[v55];
              }
              v47 = v66;
              v46 = v67;
              v50 = v68;
            }
            v15 = v46 + 2;
            ++v50;
            v52 = v53;
          }
          v46 += 2;
          v51 += 2;
        }
        while (v46 < v47);
        v57 = v70;
        v58 = v70;
        v47 = v52;
      }
      v59 = &v72[2 * v57 - 2];
      if (v15 != v59)
      {
        memmove(v47, v15, v59 - v15);
        v58 = v70;
      }
      v22 = v58 - v50;
LABEL_63:
      v69 = v22;
LABEL_64:
      ;
    }
    while (v22);
    goto LABEL_68;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
LABEL_70:
  __break(0xC471u);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  __int16 v19;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v10 = 0;
    v11 = 0;
    goto LABEL_5;
  }
  v19 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102), a4, a5, a6, a7, a8);
  v11 = v19;
  v10 = HIBYTE(v19);
LABEL_5:
  v12 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v12 == 31)
    {
      v13 = -1862270945;
    }
    else if (v12 == 255)
    {
      v13 = -1442774017;
    }
    else
    {
      v13 = v12 | 0xAA0003E0;
    }
    v15 = (unsigned int *)(a2 + 200);
    v14 = *(_DWORD *)(a2 + 200);
    if (v14 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *v15;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = v13;
    *v15 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
    goto LABEL_19;
  v16 = *(_DWORD *)(a1 + 116);
  if (!v16)
  {
LABEL_18:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_19:
    if (!*(_BYTE *)(a1 + 101))
    {
      if (v10)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, v11, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v17 = v16 - 1;
  v18 = 16 * (v16 - 1);
  while (*(_DWORD *)(a1 + 116) > v17)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v18, a3, a4, a5, a6, a7, a8);
    v18 -= 16;
    if (--v17 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  v39 = 0;
  v40 = 2;
  v11 = *(_QWORD *)(a1 + 3960);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 3976) + 8);
  if ((v12 & 1) != 0)
  {
    v20 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v25 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v25 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else
    {
      if (v25 >> 28)
        goto LABEL_33;
      v34 = v20;
      v20 = v25 << 36;
    }
    goto LABEL_24;
  }
  while (1)
  {
    v38 = v12;
    v11 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v11, &v38, &v40, &v39, a5, a6, a7, a8);
    v20 = v11;
    if ((v38 & 1) != 0)
    {
      v11 = v38 & 0xFFFFFFFF8;
      if ((v38 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v11, v13, v14, v15, v16, v17, v18, v19);
    }
    if ((v20 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v14, v15, v16, v17, v18, v19);
      LODWORD(v21) = 0;
      v22 = 0;
      goto LABEL_5;
    }
    v24 = a2[3];
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 16 * v24;
      v27 = (char *)(*(_QWORD *)a2 + 2);
      while (1)
      {
        v29 = *v27;
        v27 += 16;
        v28 = v29;
        if ((v29 & 0x40) != 0)
          goto LABEL_32;
        v25 |= 1 << v28;
        v26 -= 16;
        if (!v26)
          goto LABEL_11;
      }
    }
    v25 = 0;
LABEL_11:
    v30 = a3;
    if ((a3 & 0x40) == 0)
      break;
LABEL_32:
    __break(1u);
LABEL_33:
    v37 = v11;
    v35 = v25;
    v36 = WTF::fastMalloc((WTF *)0x10);
    v11 = v37;
    *(_QWORD *)v36 = v20;
    *(_DWORD *)(v36 + 8) = v35;
    v34 = 1;
    v20 = v36;
LABEL_24:
    v12 = v20 | v34;
  }
  LODWORD(v21) = 1;
  v31 = v25 | (1 << v30);
  if ((v31 & 2) != 0)
  {
    v32 = (unsigned __int16)~(_WORD)v31 & 0xFFFE;
    if (v32)
    {
      v21 = __clz(__rbit64(v32));
      v22 = 1;
      JSC::MacroAssemblerARM64::move((_DWORD *)a1, 1, v21, v15, v16, v17, v18, v19);
    }
    else
    {
      v22 = 1;
      LODWORD(v21) = 255;
    }
  }
  else
  {
    v22 = 1;
  }
LABEL_5:
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  return v21 | (v22 << 8);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574660;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574660;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned int v50;
  unsigned __int8 *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  char *v66;
  char *v67;
  void *__dst;
  int v69;
  unsigned int v70;
  _WORD v71[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_73:
        __break(1u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned __int8 *)(a1 + 160);
  v16 = *(unsigned __int8 *)(a1 + 161);
  v17 = *(_QWORD *)(a1 + 168);
  __dst = v71;
  v69 = 2;
  if (v15)
  {
    v71[0] = v15;
    v18 = 1;
    v70 = 1;
    if (v16 == 1)
      goto LABEL_15;
  }
  else
  {
    if (v16 == 1)
      goto LABEL_69;
    v18 = 0;
  }
  v71[v18++] = v16 | 0x100;
  v70 = v18;
  do
  {
LABEL_15:
    v19 = 0;
    v20 = 0;
    v21 = (char *)__dst;
    v22 = v18;
    do
    {
      if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        goto LABEL_73;
      v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
      v19 += 2;
    }
    while (2 * v18 != v19);
    v23 = 0;
    do
    {
      v24 = *((_BYTE *)__dst + v23) & 0x7F;
      if (v24 >= 0x40)
        goto LABEL_73;
      v20 &= ~(1 << v24);
      v23 += 2;
    }
    while (2 * v18 != v23);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.i32[0];
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.i32[0] + v26)
    {
      v28 = 0;
      if (v18 <= 1)
        v29 = 1;
      else
        v29 = v18;
      v30 = 2 * v29;
      while (1)
      {
        v31 = *((unsigned __int8 *)__dst + v28 + 1);
        if ((v31 & 0x7Fu) >= 0x40)
          goto LABEL_73;
        if (((v20 >> (v31 & 0x7F)) & 1) != 0)
          break;
        v28 += 2;
        if (v30 == v28)
          goto LABEL_65;
      }
      v32 = *((unsigned __int8 *)__dst + v28);
      if (v32 == v31)
      {
LABEL_63:
        memmove(&v21[v28], &v21[v28 + 2], 2 * v22 - v28 - 2);
        v18 = v70 - 1;
        goto LABEL_64;
      }
      v33 = (char)v32;
      if ((char)v32 == 63)
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        if ((char)v31 != 31)
        {
          v37 = v31 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v34 = *(_DWORD *)(v8 + 200);
        v35 = *(_DWORD *)(v8 + 192);
        v36 = v31 == 31 || v33 == 31;
        if (!v36)
        {
          v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v34 + 4 > v35)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v34 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v34) = v37;
          *(_DWORD *)(v8 + 200) += 4;
          v21 = (char *)__dst;
          v22 = v70;
          goto LABEL_63;
        }
      }
      v37 = (char)v31 | (32 * v33) | 0x91000000;
      goto LABEL_60;
    }
    v38 = *(_BYTE *)__dst;
    v39 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v70 - 2);
    v40 = v70 - 1;
    v36 = v70 == 1;
    v70 = v40;
    v41 = (unsigned __int8 *)__dst;
    v42 = (unsigned __int8 *)__dst + 2 * v40;
    if (v36)
    {
      v49 = 0;
      v50 = 0;
      v45 = 0;
      a2 = v42;
    }
    else
    {
      v43 = 2 * v40;
      v44 = __dst;
      while (*v44 != v39)
      {
        v44 += 2;
        v43 -= 2;
        if (!v43)
          goto LABEL_43;
      }
      *v44 = v38;
LABEL_43:
      v45 = 0;
      v46 = v41;
      a2 = v42;
      v47 = (char *)v42;
      do
      {
        if (*v41 == v41[1])
        {
          v48 = v41;
          if (v47 != (char *)__dst + 2 * v70)
          {
            v67 = (char *)v42;
            if (v41 == a2)
            {
              v48 = (unsigned __int8 *)v47;
            }
            else
            {
              v65 = v46 - a2;
              v66 = v47;
              memmove(v47, a2, v46 - a2);
              v48 = (unsigned __int8 *)&v66[v65];
            }
            v42 = (unsigned __int8 *)v67;
          }
          a2 = v41 + 2;
          ++v45;
          v47 = (char *)v48;
        }
        v41 += 2;
        v46 += 2;
      }
      while (v41 < v42);
      v41 = (unsigned __int8 *)__dst;
      v49 = v70;
      v50 = v70;
      v42 = (unsigned __int8 *)v47;
    }
    v51 = &v41[2 * v49];
    if (a2 != v51)
    {
      memmove(v42, a2, v51 - a2);
      v50 = v70;
    }
    v18 = v50 - v45;
LABEL_64:
    v70 = v18;
LABEL_65:
    ;
  }
  while (v18);
  v52 = __dst;
  if (v71 != __dst)
  {
    if (__dst)
    {
      __dst = 0;
      v69 = 0;
      WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
    }
  }
LABEL_69:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v17, 2, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v53, v54, v55, v56, v57, v58, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::tearDown(a1, v8, v59, v60, v61, v62, v63, v64);
}

uint64_t std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,JSC::DFG::OperandSpeculationMode,void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;

  v8 = result;
  if (*(_BYTE *)(result + 24))
  {
    if ((*(_QWORD *)(result + 8) & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v9 = *(char *)(result + 16);
      if (v9 > 15)
        v9 = -1;
      --*(_DWORD *)(*(_QWORD *)result + 12 * v9 + 4784);
    }
    *(_BYTE *)(result + 24) = 0;
  }
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = -1;
  if ((a3 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_11;
  v10 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 < *(unsigned int *)(a2 + 4004))
  {
    if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v10 + 12))
      *(_BYTE *)(result + 16) = JSC::DFG::SpeculativeJIT::fillJSValue(a2, a3, a3, a4, a5, a6, a7, a8);
LABEL_11:
    *(_BYTE *)(v8 + 24) = 1;
    return v8;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateInt32Operand,JSC::DFG::SpeculateInt32Operand>(uint64_t a1, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  JSC::DFG::SpeculativeJIT *v19;
  unint64_t v21;
  unint64_t v22;
  int v24;
  int v25;
  int v26;

  v8 = this;
  *(_QWORD *)a1 = this;
  *(_BYTE *)(a1 + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v11 = *((unsigned int *)v8 + 1001);
  if (v10 >= v11)
    goto LABEL_27;
  v14 = *((_QWORD *)v8 + 499);
  v15 = *(_DWORD *)(v14 + 24 * (int)v10 + 8);
  if (v15 == 1)
  {
    v16 = *(unsigned __int8 *)(a3 + 16);
    if (v16 != 255)
      goto LABEL_4;
    v19 = *(JSC::DFG::SpeculativeJIT **)a3;
LABEL_10:
    LOBYTE(v16) = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v19, v9, a3 + 17, a4, a5, a6, a7, a8);
    *(_BYTE *)(a3 + 16) = v16;
    goto LABEL_4;
  }
  v21 = *(_QWORD *)(a4 + 8) & 0xFF00FFFFFFFFFFFFLL;
  v22 = ~*(_DWORD *)(v21 + 0x30);
  if (v22 >= v11)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x197C79B34);
  }
  if (*(_DWORD *)(v14 + 24 * (int)v22 + 8) == 1)
  {
    v16 = *(unsigned __int8 *)(a4 + 16);
    if (v16 == 255)
    {
      LOBYTE(v16) = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(*(JSC::DFG::SpeculativeJIT **)a4, *(_QWORD *)(a4 + 8), a4 + 17, a4, a5, a6, a7, a8);
      *(_BYTE *)(a4 + 16) = v16;
    }
    goto LABEL_4;
  }
  if (v15 != 2 || (v9 & 0xFF00FFFFFFFFFFFFLL) != v21)
    goto LABEL_19;
  v24 = *(unsigned __int8 *)(a3 + 16);
  if (v24 == 255)
  {
    LOBYTE(v24) = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(*(JSC::DFG::SpeculativeJIT **)a3, v9, a3 + 17, a4, a5, a6, a7, a8);
    *(_BYTE *)(a3 + 16) = v24;
  }
  v25 = *(unsigned __int8 *)(a4 + 16);
  if (v25 == 255)
  {
    LOBYTE(v25) = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(*(JSC::DFG::SpeculativeJIT **)a4, *(_QWORD *)(a4 + 8), a4 + 17, a4, a5, a6, a7, a8);
    *(_BYTE *)(a4 + 16) = v25;
  }
  v26 = v24;
  v8 = *(JSC::DFG::SpeculativeJIT **)a1;
  if (v26 != v25)
  {
LABEL_19:
    LOBYTE(v16) = JSC::DFG::SpeculativeJIT::allocate(v8, v9, a3, a4, a5, a6, a7, a8);
    goto LABEL_8;
  }
  v16 = *(unsigned __int8 *)(a3 + 16);
  if (v16 == 255)
  {
    v19 = *(JSC::DFG::SpeculativeJIT **)a3;
    v9 = *(_QWORD *)(a3 + 8);
    goto LABEL_10;
  }
LABEL_4:
  if ((char)v16 > 15)
    v17 = -1;
  else
    v17 = v16;
  ++*((_DWORD *)v8 + 3 * v17 + 1196);
LABEL_8:
  *(_BYTE *)(a1 + 8) = v16;
  return a1;
}

uint64_t JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  v39 = 0;
  v40 = 2;
  v11 = *(_QWORD *)(a1 + 3960);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 3976) + 8);
  if ((v12 & 1) != 0)
  {
    v20 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v25 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v25 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else
    {
      if (v25 >> 28)
        goto LABEL_32;
      v34 = v20;
      v20 = v25 << 36;
    }
    goto LABEL_24;
  }
  while (1)
  {
    v38 = v12;
    v11 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v11, &v38, &v40, &v39, a5, a6, a7, a8);
    v20 = v11;
    if ((v38 & 1) != 0)
    {
      v11 = v38 & 0xFFFFFFFF8;
      if ((v38 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v11, v13, v14, v15, v16, v17, v18, v19);
    }
    if ((v20 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v14, v15, v16, v17, v18, v19);
      v21 = 0;
      v22 = 0;
      goto LABEL_5;
    }
    v24 = a2[3];
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 16 * v24;
      v27 = (char *)(*(_QWORD *)a2 + 2);
      while (1)
      {
        v29 = *v27;
        v27 += 16;
        v28 = v29;
        if ((v29 & 0x40) != 0)
          goto LABEL_31;
        v25 |= 1 << v28;
        v26 -= 16;
        if (!v26)
          goto LABEL_11;
      }
    }
    v25 = 0;
LABEL_11:
    if ((a3 & 0x40) == 0)
      break;
LABEL_31:
    __break(1u);
LABEL_32:
    v37 = v11;
    v35 = v25;
    v36 = WTF::fastMalloc((WTF *)0x10);
    v11 = v37;
    *(_QWORD *)v36 = v20;
    *(_DWORD *)(v36 + 8) = v35;
    v34 = 1;
    v20 = v36;
LABEL_24:
    v12 = v20 | v34;
  }
  v21 = 1;
  v30 = v25 | (1 << a3);
  v22 = 1;
  if ((v30 & 2) != 0)
  {
    v31 = (unsigned __int16)~(_WORD)v30 & 0xFFFE;
    if (v31)
    {
      v32 = __clz(__rbit64(v31));
      JSC::MacroAssemblerARM64::move((_DWORD *)a1, 1, v32, v15, v16, v17, v18, v19);
      v21 = v32;
    }
    else
    {
      v21 = 255;
    }
  }
LABEL_5:
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  return v21 | (v22 << 8);
}

void JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::generateInline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v12;
  int v13;
  int i;
  unsigned __int16 *v15;
  int Inline;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int j;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  WTF *v45;
  int *v47;
  WTF *v48;
  uint64_t v49;
  _BYTE v50[28];
  int v51;
  unint64_t v52;

  v12 = (JSC::AssemblerBuffer *)(a2 + 56);
  v13 = *(_DWORD *)(a2 + 200);
  for (i = *(_DWORD *)(a2 + 52); v13 < i; i = *(_DWORD *)(a2 + 52))
  {
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
      v13 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
    v13 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v13;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)a3 = v13;
  v15 = *(unsigned __int16 **)a1;
  if (*(_QWORD *)a1 && (*v15 & 0x1F80) == 0)
  {
    *(_BYTE *)(a2 + 328) = 1;
    if (v13 < i)
    {
      do
      {
        if ((v13 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
          v13 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
        v13 = *(_DWORD *)(a2 + 200) + 4;
        *(_DWORD *)(a2 + 200) = v13;
      }
      while (v13 < *(_DWORD *)(a2 + 52));
    }
    v26 = v13;
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
      v26 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = 335544320;
    v27 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v27;
    v28 = 0xFF000F4500000000;
    if (!*(_BYTE *)(a2 + 328))
      v28 = 0xFF000F4100000000;
    *(_BYTE *)(a2 + 328) = 0;
    v51 = v13;
    v52 = v28;
    if (v13 != -1)
    {
      v29 = (_QWORD *)(a3 + 24);
      v30 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v30 == *(_DWORD *)(a3 + 32))
      {
        v31 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, (void *)(v30 + 1), (unint64_t)&v51, (uint64_t)v15, a5, a6, a7, a8);
        v32 = (_DWORD *)(*(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36));
        *v32 = *(_DWORD *)v31;
        v33 = (unint64_t *)(v32 + 1);
        v28 = *(_QWORD *)(v31 + 4);
      }
      else
      {
        v47 = (int *)(*v29 + 12 * v30);
        *v47 = v13;
        v33 = (unint64_t *)(v47 + 1);
      }
      *v33 = v28;
      ++*(_DWORD *)(a3 + 36);
      v27 = *(_DWORD *)(a2 + 200);
    }
    for (*(_BYTE *)(a3 + 64) = 1; v27 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v27)
    {
      if ((v27 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
        v27 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = -721215457;
      v27 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    *(_DWORD *)(a3 + 4) = v27;
    *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    Inline = JSC::JITAddGenerator::generateInline((_BYTE *)(a1 + 57), (_DWORD *)a2, a3, v15, a5, a6, a7, a8);
    if (Inline)
    {
      if (Inline == 1)
      {
        v48 = (WTF *)v50;
        v49 = 2;
        if (!JSC::JITAddGenerator::generateFastPath((_BYTE *)(a1 + 57), a2, (uint64_t)&v48, a3 + 24, *(_QWORD *)a1, a4, v22, v23))goto LABEL_25;
        for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
        {
          if ((j + 4) > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
            j = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
          j = *(_DWORD *)(a2 + 200) + 4;
        }
        *(_DWORD *)(a2 + 208) = 0;
        *(_DWORD *)(a3 + 4) = j;
        *(_BYTE *)(a3 + 64) = 0;
        if (HIDWORD(v49))
        {
          v42 = 0;
          v43 = 0;
          v44 = 12 * HIDWORD(v49);
          while (v43 < HIDWORD(v49))
          {
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v48 + v42), a2, v35, v36, v37, v38, v39, v40);
            ++v43;
            v42 += 12;
            if (v44 == v42)
              goto LABEL_25;
          }
          __break(0xC471u);
        }
        else
        {
LABEL_25:
          v45 = v48;
          if (v50 != (_BYTE *)v48 && v48 != 0)
          {
            v48 = 0;
            LODWORD(v49) = 0;
            WTF::fastFree((unint64_t)v45, v34, v35, v36, v37, v38, v39, v40);
          }
        }
      }
    }
    else
    {
      v24 = *(unsigned int *)(a2 + 200);
      v25 = v24 - v13;
      if (v25 <= 3)
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::emitNops((_DWORD *)a2, 4 - v25, v18, v19, v20, v21, v22, v23);
        LODWORD(v24) = *(_DWORD *)(a2 + 200);
      }
      for (*(_BYTE *)(a3 + 64) = 1; (int)v24 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v24)
      {
        if ((v24 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v12, v17, v18, v19, v20, v21, v22, v23);
          LODWORD(v24) = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = -721215457;
        LODWORD(v24) = *(_DWORD *)(a2 + 200) + 4;
      }
      *(_DWORD *)(a2 + 208) = 0;
      *(_DWORD *)(a3 + 4) = v24;
    }
  }
}

uint64_t JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::~Node(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v14;

  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v14 && v14 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

unint64_t *WTF::Box<JSC::MathICGenerationState>::~Box(unint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::emitNops(_DWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  unsigned int v12;

  if ((a2 & 3) != 0)
  {
    __break(0xC471u);
  }
  else if (a2 >= 4)
  {
    v9 = a2 >> 2;
    v10 = (JSC::AssemblerBuffer *)(a1 + 14);
    v11 = a1[50];
    v12 = 1;
    do
    {
      if (v11 + 4 > a1[48])
      {
        JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
        v11 = a1[50];
      }
      *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = -721215457;
      v11 = a1[50] + 4;
      a1[50] = v11;
    }
    while (v9 > v12++);
  }
}

uint64_t WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v14;

  *(_QWORD *)a1 = &off_1E3573420;
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v14 && v14 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)this = &off_1E3573420;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1},void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator()(a1 + 8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::DFG::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int *v52;
  unsigned int v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  JSC::ARM64LogicalImmediate *v65;
  unsigned int v66;
  int v67;
  uint64_t *v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)a1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(*(_QWORD *)(a1 + 24) + 32), *(_QWORD *)a1, a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)v9, v10, v11, v12, v13, v14, v15, v16, (int *)&v72);
  v23 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v23 + 16) = v72;
  v24 = *(unsigned __int8 *)(a1 + 32);
  v25 = *(unsigned __int8 *)(a1 + 33);
  v72 = *(_QWORD *)(a1 + 34);
  if ((v72 & 0xFF00) != 0x100 || *(_DWORD *)((char *)&v72 + 2) < 1)
  {
    v72 = *(_QWORD *)(a1 + 56);
    if ((v72 & 0xFF00) != 0x100 || *(int *)((char *)&v72 + 2) < 1)
      goto LABEL_8;
    v66 = *(unsigned __int8 *)(a1 + 44);
    v67 = *(unsigned __int16 *)((*(_QWORD *)(a1 + 72) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v67 == 355 || v67 == 348)
    {
      v68 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v68 = *(uint64_t **)((*(_QWORD *)(a1 + 72) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v25 = v66;
  }
  else
  {
    v66 = *(unsigned __int8 *)(a1 + 44);
    v69 = *(unsigned __int16 *)((*(_QWORD *)(a1 + 48) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v69 == 355 || v69 == 348)
    {
      v68 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v68 = *(uint64_t **)((*(_QWORD *)(a1 + 48) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v24 = v66;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, *v68, (char)v66, v18, v19, v20, v21, v22);
  v23 = *(_QWORD *)(a1 + 24);
LABEL_8:
  v27 = *(_QWORD *)(a1 + 8);
  v28 = *(unsigned int *)(a1 + 20);
  if (*(_BYTE *)(v23 + 72))
  {
    v29 = *(unsigned __int8 *)(a1 + 44);
    v30 = *(_QWORD *)(a1 + 80);
    v31 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, *(JSC::DFG::JITCompiler **)(a1 + 88), v17, v18, v19, v20, v21, v22);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((int *)&v72, (unsigned __int8 *)v9, v27, v28, v30, v29, v31, v32, v24, v25, *(JSC::ARM64LogicalImmediate **)(a1 + 96));
  }
  else
  {
    v62 = *(_QWORD *)(a1 + 104);
    v63 = *(unsigned __int8 *)(a1 + 44);
    v64 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, *(JSC::DFG::JITCompiler **)(a1 + 88), v17, v18, v19, v20, v21, v22);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v72, (unsigned __int8 *)v9, v27, v28, v62, v63, v64, v65, v24, v25);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 20) = v72;
  JSC::ARM64Assembler::label((_DWORD *)(v9 + 32), v33, v34, v35, v36, v37, v38, v39, (int *)&v71);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v9 + 56), 335544320, v40, v41, v42, v43, v44, v45);
  if (*(_BYTE *)(v9 + 328))
    v51 = 69;
  else
    v51 = 65;
  v72 = v71;
  LOBYTE(v73) = v51;
  *(_WORD *)((char *)&v73 + 1) = 15;
  BYTE3(v73) = -1;
  v70 = *(_DWORD *)(a1 + 112);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v72, &v70, v9, v46, v47, v48, v49, v50);
  v72 = *(_QWORD *)(a1 + 96);
  v52 = *(unsigned int **)(a1 + 24);
  if (v52)
  {
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 + 1, v52));
  }
  v73 = v52;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>(v9, &v72);
  return void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}::~LinkBuffer((uint64_t)&v72, v54, v55, v56, v57, v58, v59, v60);
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(int *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, JSC::ARM64LogicalImmediate *a11)
{
  unsigned __int8 *v11;
  unsigned int *v12;
  JSC::AssemblerBuffer *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  _BYTE *v17;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  unsigned __int16 v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned __int8 *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int16 v67;
  unsigned int v68;
  uint64_t v69;
  int64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v75;
  JSC::AssemblerBuffer *v76;
  void *__dst;
  int v78;
  unsigned int v79;
  _WORD v80[4];

  v12 = (unsigned int *)a8;
  v14 = (JSC::AssemblerBuffer *)a6;
  v15 = a5;
  v16 = a2;
  v75 = a3;
  v76 = (JSC::AssemblerBuffer *)a4;
  v17 = a2 + 5768;
  a2[5768] = 1;
  if (a4)
  {
    v20 = 0;
    LODWORD(v11) = 1;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl((uint64_t)v16, a3 + 16 * v20, a3, a4, a5, a6, a7, a8);
      v20 = v11;
      v21 = a4 > v11;
      LODWORD(v11) = (_DWORD)v11 + 1;
    }
    while (v21);
  }
  __dst = v80;
  v78 = 2;
  if (a9 != 1)
  {
    v80[0] = a9 | 0x100;
    v22 = 1;
    v79 = 1;
    if (a10 == 2)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (a10 != 2)
  {
    v22 = 0;
LABEL_9:
    v80[v22++] = a10 | 0x200;
    v79 = v22;
LABEL_10:
    v23 = 1;
    while (1)
    {
      v24 = 0;
      v25 = 0;
      v26 = __dst;
      v27 = v22;
      do
      {
        if ((*((_BYTE *)__dst + v24 + 1) & 0x40) != 0)
          goto LABEL_80;
        v25 |= 1 << *((_BYTE *)__dst + v24 + 1);
        v24 += 2;
      }
      while (2 * v22 != v24);
      v28 = 0;
      do
      {
        v29 = *((_BYTE *)__dst + v28) & 0x7F;
        if (v29 >= 0x40)
          goto LABEL_80;
        v25 &= ~(1 << v29);
        v28 += 2;
      }
      while (2 * v22 != v28);
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.i32[0];
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
      v32.i16[0] = vaddlv_u8(v32);
      if (!(v32.i32[0] + v31))
      {
        v73 = v15;
        v42 = *(_BYTE *)__dst;
        v43 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v16, *(char *)__dst, v43, a4, a5, a6, a7, a8);
        memmove(__dst, (char *)__dst + 2, 2 * v79 - 2);
        v44 = v79 - 1;
        v40 = v79 == 1;
        v79 = v44;
        v11 = (unsigned __int8 *)__dst;
        v45 = (char *)__dst + 2 * v44;
        if (v40)
        {
          v52 = 0;
          v53 = 0;
          v48 = 0;
          a2 = (unsigned __int8 *)v45;
        }
        else
        {
          v46 = 2 * v44;
          v47 = __dst;
          while (*v47 != v43)
          {
            v47 += 2;
            v46 -= 2;
            if (!v46)
              goto LABEL_39;
          }
          *v47 = v42;
LABEL_39:
          v48 = 0;
          v49 = v11;
          a2 = (unsigned __int8 *)v45;
          v50 = v45;
          do
          {
            if (*v11 == v11[1])
            {
              v51 = v11;
              if (v50 != (char *)__dst + 2 * v79)
              {
                v72 = v45;
                if (v11 == a2)
                {
                  v51 = (unsigned __int8 *)v50;
                }
                else
                {
                  v70 = v49 - a2;
                  v71 = v50;
                  memmove(v50, a2, v49 - a2);
                  v51 = (unsigned __int8 *)&v71[v70];
                }
                v45 = v72;
              }
              a2 = v11 + 2;
              ++v48;
              v50 = (char *)v51;
            }
            v11 += 2;
            v49 += 2;
          }
          while (v11 < (unsigned __int8 *)v45);
          v11 = (unsigned __int8 *)__dst;
          v52 = v79;
          v53 = v79;
          v45 = v50;
        }
        v54 = &v11[2 * v52];
        v15 = v73;
        if (a2 != v54)
        {
          memmove(v45, a2, v54 - a2);
          v53 = v79;
        }
        v22 = v53 - v48;
        goto LABEL_60;
      }
      v11 = 0;
      v33 = v22 <= 1 ? 1 : v22;
      v34 = 2 * v33;
      while (1)
      {
        v35 = v11[(_QWORD)__dst + 1];
        if ((v35 & 0x7Fu) >= 0x40)
          goto LABEL_80;
        if (((v25 >> (v35 & 0x7F)) & 1) != 0)
          break;
        v11 += 2;
        if ((unsigned __int8 *)v34 == v11)
          goto LABEL_61;
      }
      v36 = v11[(_QWORD)__dst];
      if (v36 != v35)
        break;
LABEL_59:
      memmove(&v11[(_QWORD)v26], &v11[(_QWORD)v26 + 2], 2 * v27 - (_QWORD)v11 - 2);
      v22 = v79 - 1;
LABEL_60:
      v79 = v22;
LABEL_61:
      if (!v22)
      {
        v55 = __dst;
        if (v80 != __dst && __dst)
        {
          __dst = 0;
          v78 = 0;
          WTF::fastFree((unint64_t)v55, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_65;
      }
    }
    v37 = (char)v36;
    if ((char)v36 == 63)
    {
      v38 = *((_DWORD *)v16 + 50);
      v39 = *((_DWORD *)v16 + 48);
      if (v35 != 31)
      {
        v41 = v35 & 0x1F | 0xD2800000;
        goto LABEL_56;
      }
    }
    else
    {
      v38 = *((_DWORD *)v16 + 50);
      v39 = *((_DWORD *)v16 + 48);
      v40 = (char)v35 == 31 || v37 == 31;
      if (!v40)
      {
        v41 = v35 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
LABEL_56:
        if (v38 + 4 > v39)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v16 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v38 = *((_DWORD *)v16 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v16 + 7) + v38) = v41;
        *((_DWORD *)v16 + 50) += 4;
        v26 = __dst;
        v27 = v79;
        goto LABEL_59;
      }
    }
    v41 = (char)v35 | (32 * v37) | 0x91000000;
    goto LABEL_56;
  }
LABEL_65:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v16, (uint64_t)a11, 3, a4, a5, a6, a7, a8);
  if ((_DWORD)a7 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v16, (uint64_t)v12, 0, v56, v57, v58, v59, v60);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v16, (a7 << 35) + 0x380000001ALL, 0, v56, v57, v58, v59, v60);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v16, v15, v61, v62, v63, v64, v65, v66, a1);
  JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::JSValueRegs,std::span<JSC::DFG::SilentRegisterSavePlan const,18446744073709551615ul>>((uint64_t)v16, &v75, (char)v14);
  v23 = v67;
  if (!(_BYTE)v14)
    goto LABEL_73;
  if (v14 == 31)
    LODWORD(v11) = -1862270945;
  else
    LODWORD(v11) = v14 & 0x1F | 0xAA0003E0;
  v12 = (unsigned int *)(v16 + 200);
  v68 = *((_DWORD *)v16 + 50);
  v14 = (JSC::AssemblerBuffer *)(v16 + 56);
  if (v68 + 4 > *((_DWORD *)v16 + 48))
    goto LABEL_81;
  while (1)
  {
    *(_DWORD *)(*(_QWORD *)v14 + v68) = (_DWORD)v11;
    *v12 += 4;
LABEL_73:
    v14 = v76;
    if (!(_DWORD)v76)
      break;
    v11 = (unsigned __int8 *)(v76 - 1);
    v12 = (unsigned int *)(v75 - 16);
    v69 = 4 * v76;
    while (v11 < (unsigned __int8 *)v14)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)v16, (uint64_t)&v12[v69], a3, a4, a5, a6, a7, a8);
      v69 -= 4;
      if (!(v69 * 4))
        goto LABEL_77;
    }
LABEL_80:
    __break(1u);
LABEL_81:
    JSC::AssemblerBuffer::outOfLineGrow(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v68 = *v12;
  }
LABEL_77:
  *v17 = 0;
  if (v23 >= 0x100u)
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v16, (char)v23, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(int *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, JSC::ARM64LogicalImmediate *this, uint64_t a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  char v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  JSC::AssemblerBuffer *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  char *v89;
  _BYTE *v90;
  char v93;
  void *__dst;
  int v95;
  unsigned int v96;
  _WORD v97[4];
  unint64_t v98;
  unsigned int *v99;

  v93 = a6;
  v13 = a3;
  v14 = (uint64_t)a2;
  v15 = a2 + 5768;
  a2[5768] = 1;
  if (a4)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl(v14, v13 + 16 * v16, a3, a4, a5, a6, a7, (uint64_t)this);
      v16 = v17;
    }
    while (a4 > v17++);
  }
  __dst = v97;
  v95 = 2;
  if (a9 != 1)
  {
    v97[0] = a9 | 0x100;
    v19 = 1;
    v96 = 1;
    if (a10 == 2)
      goto LABEL_10;
    goto LABEL_9;
  }
  if (a10 != 2)
  {
    LODWORD(v19) = 0;
LABEL_9:
    v97[v19] = a10 | 0x200;
    v19 = (v19 + 1);
    v96 = v19;
LABEL_10:
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v19;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_96;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v19 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_96;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v19 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (!(v29.i32[0] + v28))
      {
        v90 = v15;
        v40 = *(_BYTE *)__dst;
        v41 = *((_BYTE *)__dst + 1);
        JSC::MacroAssemblerARM64::swap(v14, *(char *)__dst, v41, a4, a5, a6, a7, (uint64_t)this);
        memmove(__dst, (char *)__dst + 2, 2 * v96 - 2);
        v42 = v96 - 1;
        v38 = v96 == 1;
        v96 = v42;
        v43 = (unsigned __int8 *)__dst;
        v44 = (char *)__dst + 2 * v42;
        if (v38)
        {
          v51 = 0;
          v52 = 0;
          v47 = 0;
          a2 = (unsigned __int8 *)v44;
        }
        else
        {
          v45 = 2 * v42;
          v46 = __dst;
          while (*v46 != v41)
          {
            v46 += 2;
            v45 -= 2;
            if (!v45)
              goto LABEL_39;
          }
          *v46 = v40;
LABEL_39:
          v47 = 0;
          v48 = v43;
          a2 = (unsigned __int8 *)v44;
          v49 = v44;
          do
          {
            if (*v43 == v43[1])
            {
              v50 = v43;
              if (v49 != (char *)__dst + 2 * v96)
              {
                v89 = v44;
                if (v43 == a2)
                {
                  v50 = (unsigned __int8 *)v49;
                }
                else
                {
                  v87 = v48 - a2;
                  v88 = v49;
                  memmove(v49, a2, v48 - a2);
                  v50 = (unsigned __int8 *)&v88[v87];
                }
                v44 = v89;
              }
              a2 = v43 + 2;
              ++v47;
              v49 = (char *)v50;
            }
            v43 += 2;
            v48 += 2;
          }
          while (v43 < (unsigned __int8 *)v44);
          v43 = (unsigned __int8 *)__dst;
          v51 = v96;
          v52 = v96;
          v44 = v49;
        }
        v53 = &v43[2 * v51];
        v15 = v90;
        if (a2 != v53)
        {
          memmove(v44, a2, v53 - a2);
          v52 = v96;
        }
        v19 = v52 - v47;
        goto LABEL_60;
      }
      v30 = 0;
      v31 = v19 <= 1 ? 1 : v19;
      v32 = 2 * v31;
      while (1)
      {
        v33 = *((unsigned __int8 *)__dst + v30 + 1);
        if ((v33 & 0x7Fu) >= 0x40)
          goto LABEL_96;
        if (((v22 >> (v33 & 0x7F)) & 1) != 0)
          break;
        v30 += 2;
        if (v32 == v30)
          goto LABEL_61;
      }
      v34 = *((unsigned __int8 *)__dst + v30);
      if (v34 != v33)
        break;
LABEL_59:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v19 = v96 - 1;
LABEL_60:
      v96 = v19;
LABEL_61:
      if (!(_DWORD)v19)
      {
        v54 = __dst;
        if (v97 != __dst && __dst)
        {
          __dst = 0;
          v95 = 0;
          WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, (uint64_t)this);
        }
        goto LABEL_65;
      }
    }
    v35 = (char)v34;
    if ((char)v34 == 63)
    {
      v36 = *(_DWORD *)(v14 + 200);
      v37 = *(_DWORD *)(v14 + 192);
      if (v33 != 31)
      {
        v39 = v33 & 0x1F | 0xD2800000;
        goto LABEL_56;
      }
    }
    else
    {
      v36 = *(_DWORD *)(v14 + 200);
      v37 = *(_DWORD *)(v14 + 192);
      v38 = (char)v33 == 31 || v35 == 31;
      if (!v38)
      {
        v39 = v33 & 0xFFE0FFFF | ((v35 & 0x1F) << 16) | 0xAA0003E0;
LABEL_56:
        if (v36 + 4 > v37)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v14 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, (uint64_t)this);
          v36 = *(_DWORD *)(v14 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v14 + 56) + v36) = v39;
        *(_DWORD *)(v14 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v96;
        goto LABEL_59;
      }
    }
    v39 = (char)v33 | (32 * v35) | 0x91000000;
    goto LABEL_56;
  }
LABEL_65:
  if ((_DWORD)a7 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v14, (uint64_t)this, 0, a4, a5, a6, a7, (uint64_t)this);
  else
    JSC::MacroAssemblerARM64::load64(v14, (a7 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, (uint64_t)this);
  JSC::DFG::SpeculativeJIT::appendCall(v14, a5, v55, v56, v57, v58, v59, v60, a1);
  __dst = (void *)2;
  v99 = 0;
  v20 = *(_QWORD *)(v14 + 3960);
  v19 = *(_QWORD *)(*(_QWORD *)(v14 + 3976) + 8);
  if ((v19 & 1) != 0)
    goto LABEL_97;
  while (1)
  {
    v98 = v19;
    v20 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v20, &v98, (uint64_t *)&__dst, &v99, a5, a6, a7, (uint64_t)this);
    if ((v98 & 1) != 0 && (v98 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v98 & 0xFFFFFFFF8, v61, v62, v63, a5, a6, a7, (uint64_t)this);
    if ((v20 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v14, 1, v62, v63, a5, a6, a7, (uint64_t)this);
      LOBYTE(v64) = 0;
      v65 = v93;
      goto LABEL_71;
    }
    v19 = 0;
    if (a4)
    {
      v70 = 16 * a4;
      v71 = (char *)(v13 + 2);
      do
      {
        v73 = *v71;
        v71 += 16;
        v72 = v73;
        if ((v73 & 0x40) != 0)
          goto LABEL_96;
        v19 |= 1 << v72;
        v70 -= 16;
      }
      while (v70);
    }
    v65 = v93;
    if ((v93 & 0x40) == 0)
      break;
LABEL_96:
    __break(1u);
LABEL_97:
    v82 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
    if ((v19 & 2) != 0
      || ((v83 = *(unsigned int *)((v19 & 0xFFFFFFFF8) + 8), (_DWORD)v83 != 0x3FFFFFFF)
        ? (v84 = (_DWORD)v83 == -1)
        : (v84 = 1),
          v84))
    {
      v85 = 2;
    }
    else if (v83 >> 28)
    {
      v86 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v86 = v82;
      *(_DWORD *)(v86 + 8) = v83;
      v85 = 1;
      v82 = v86;
    }
    else
    {
      v85 = *(_QWORD *)(v19 & 0xFFFFFFFF8);
      v82 = v83 << 36;
    }
    v19 = v82 | v85;
  }
  LOBYTE(v64) = 1;
  v74 = v19 | (1 << v93);
  if ((v74 & 2) != 0)
  {
    v75 = (unsigned __int16)~(_WORD)v74 & 0xFFFE;
    if (v75)
    {
      v64 = __clz(__rbit64(v75));
      if (v64 != 1)
      {
        if (v64 == 31)
        {
          v78 = (unsigned int *)(v14 + 200);
          v77 = *(_DWORD *)(v14 + 200);
          v79 = (JSC::AssemblerBuffer *)(v14 + 56);
          v80 = v77 + 4;
          v81 = *(_DWORD *)(v14 + 192);
          v76 = -1862270913;
        }
        else
        {
          v76 = v64 | 0xAA0103E0;
          v78 = (unsigned int *)(v14 + 200);
          v77 = *(_DWORD *)(v14 + 200);
          v79 = (JSC::AssemblerBuffer *)(v14 + 56);
          v80 = v77 + 4;
          v81 = *(_DWORD *)(v14 + 192);
        }
        if (v80 > v81)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v79, (uint64_t)v61, v62, v63, a5, a6, a7, (uint64_t)this);
          v65 = v93;
          v77 = *v78;
        }
        *(_DWORD *)(*(_QWORD *)v79 + v77) = v76;
        *v78 += 4;
      }
    }
    else
    {
      LOBYTE(v64) = -1;
    }
  }
LABEL_71:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
  {
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v61, v62, v63, a5, a6, a7, (uint64_t)this);
    v65 = v93;
  }
  if (v65)
  {
    if (v65 == 31)
      v66 = -1862270945;
    else
      v66 = v65 & 0x1F | 0xAA0003E0;
    v68 = (unsigned int *)(v14 + 200);
    v67 = *(_DWORD *)(v14 + 200);
    if (v67 + 4 > *(_DWORD *)(v14 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v14 + 56), (uint64_t)v61, v62, v63, a5, a6, a7, (uint64_t)this);
      v67 = *v68;
    }
    *(_DWORD *)(*(_QWORD *)(v14 + 56) + v67) = v66;
    *v68 += 4;
  }
  v19 = a4;
  if ((_DWORD)a4)
  {
    v13 -= 16;
    v69 = 16 * a4;
    while ((unint64_t)a4 - 1 < a4)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(v14, v13 + v69, v62, v63, a5, a6, a7, (uint64_t)this);
      v69 -= 16;
      if (!v69)
        goto LABEL_83;
    }
    goto LABEL_96;
  }
LABEL_83:
  *v15 = 0;
  if ((_DWORD)v20)
    JSC::DFG::SpeculativeJIT::exceptionCheck(v14, (char)v64, v62, v63, a5, a6, a7, (uint64_t)this);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = WTF::fastMalloc((WTF *)0x20);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3573448;
  *(_QWORD *)(v4 + 16) = *a2;
  v6 = (unsigned int *)a2[1];
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 24) = v6;
  v8 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 240))
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
LABEL_14:
    *v9 = v5;
    *(_DWORD *)(a1 + 244) = v8 + 1;
    return;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(const void **)(a1 + 232);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a1 + 232) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*(const void **)(a1 + 232) == v13)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v8 = *(unsigned int *)(a1 + 244);
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
    goto LABEL_14;
  }
  __break(0xC471u);
}

uint64_t void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}::~LinkBuffer(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::JSValueRegs,std::span<JSC::DFG::SilentRegisterSavePlan const,18446744073709551615ul>>(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;

  v28 = 0;
  v29 = 2;
  v6 = *(_QWORD *)(a1 + 3960);
  JSC::CodeOrigin::CodeOrigin(&v27, (const JSC::CodeOrigin *)(*(_QWORD *)(a1 + 3976) + 8));
  v18 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v6, (unint64_t *)&v27, &v29, &v28, v7, v8, v9, v10);
  if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if ((v18 & 1) != 0)
  {
    v19 = a2[1];
    if (v19)
    {
      v20 = 0;
      v21 = 16 * v19;
      v22 = (char *)(*a2 + 2);
      while (1)
      {
        v24 = *v22;
        v22 += 16;
        v23 = v24;
        if ((v24 & 0x40) != 0)
          break;
        v20 |= 1 << v23;
        v21 -= 16;
        if (!v21)
          goto LABEL_10;
      }
    }
    else
    {
      v20 = 0;
LABEL_10:
      if ((a3 & 0x40) == 0)
      {
        v25 = v20 | (1 << a3);
        if ((v25 & 2) != 0)
        {
          v26 = (unsigned __int16)~(_WORD)v25 & 0xFFFE;
          if (v26)
            JSC::MacroAssemblerARM64::move((_DWORD *)a1, 1, __clz(__rbit64(v26)), v13, v14, v15, v16, v17);
        }
        goto LABEL_4;
      }
    }
    __break(1u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v12, v13, v14, v15, v16, v17);
LABEL_4:
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;

  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v12 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v12 && v12 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 16), (int *)(*(_QWORD *)(a1 + 24) + 8), a2);
}

_QWORD *JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(_QWORD *result, int *a2, _QWORD *a3)
{
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v3 = *a2;
  if (*a2 < 4)
    v4 = 0;
  else
    v4 = *(_DWORD *)((v3 & 0xFFFFFFFC) + a3[3] - 4);
  v5 = (v3 - v4);
  v6 = a3[23];
  v7 = v5 + v6;
  if (v6 > v7 || v6 + a3[1] < v7)
    goto LABEL_27;
  result[3] = v7;
  v8 = a2[1];
  if (v8 < 4)
    v9 = 0;
  else
    v9 = *(_DWORD *)((v8 & 0xFFFFFFFC) + a3[3] - 4);
  v10 = (v8 - v9);
  v11 = a3[23];
  v12 = v10 + v11;
  if (v11 > v12 || v11 + a3[1] < v12)
  {
    __break(0xC471u);
    JUMPOUT(0x197C7B870);
  }
  result[4] = v12;
  v14 = a2[3];
  if (v14 < 4)
    v15 = 0;
  else
    v15 = *(_DWORD *)((v14 & 0xFFFFFFFC) + a3[3] - 4);
  v16 = (v14 - v15);
  v17 = a3[23];
  v18 = v16 + v17;
  if (v17 > v18 || v17 + a3[1] < v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197C7B890);
  }
  result[5] = v18;
  v19 = a2[2];
  v20 = v19 < 4 ? 0 : *(_DWORD *)((v19 & 0xFFFFFFFC) + a3[3] - 4);
  v21 = (v19 - v20);
  v22 = a3[23];
  v23 = v21 + v22;
  if (v22 > v23 || v22 + a3[1] < v23)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x197C7B850);
  }
  result[6] = v23;
  return result;
}

void JSC::JITMathIC<JSC::JITSubGenerator,JSC::BinaryArithProfile>::generateInline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v12;
  int v13;
  int i;
  unsigned __int16 *v15;
  int Inline;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int j;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  WTF *v45;
  int *v47;
  WTF *v48;
  uint64_t v49;
  _BYTE v50[28];
  int v51;
  unint64_t v52;

  v12 = (JSC::AssemblerBuffer *)(a2 + 56);
  v13 = *(_DWORD *)(a2 + 200);
  for (i = *(_DWORD *)(a2 + 52); v13 < i; i = *(_DWORD *)(a2 + 52))
  {
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
      v13 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
    v13 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v13;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)a3 = v13;
  v15 = *(unsigned __int16 **)a1;
  if (*(_QWORD *)a1 && (*v15 & 0x1F80) == 0)
  {
    *(_BYTE *)(a2 + 328) = 1;
    if (v13 < i)
    {
      do
      {
        if ((v13 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
          v13 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
        v13 = *(_DWORD *)(a2 + 200) + 4;
        *(_DWORD *)(a2 + 200) = v13;
      }
      while (v13 < *(_DWORD *)(a2 + 52));
    }
    v26 = v13;
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
      v26 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v26) = 335544320;
    v27 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v27;
    v28 = 0xFF000F4500000000;
    if (!*(_BYTE *)(a2 + 328))
      v28 = 0xFF000F4100000000;
    *(_BYTE *)(a2 + 328) = 0;
    v51 = v13;
    v52 = v28;
    if (v13 != -1)
    {
      v29 = (_QWORD *)(a3 + 24);
      v30 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v30 == *(_DWORD *)(a3 + 32))
      {
        v31 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, (void *)(v30 + 1), (unint64_t)&v51, (uint64_t)v15, a5, a6, a7, a8);
        v32 = (_DWORD *)(*(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36));
        *v32 = *(_DWORD *)v31;
        v33 = (unint64_t *)(v32 + 1);
        v28 = *(_QWORD *)(v31 + 4);
      }
      else
      {
        v47 = (int *)(*v29 + 12 * v30);
        *v47 = v13;
        v33 = (unint64_t *)(v47 + 1);
      }
      *v33 = v28;
      ++*(_DWORD *)(a3 + 36);
      v27 = *(_DWORD *)(a2 + 200);
    }
    for (*(_BYTE *)(a3 + 64) = 1; v27 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v27)
    {
      if ((v27 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
        v27 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v27) = -721215457;
      v27 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    *(_DWORD *)(a3 + 4) = v27;
    *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    Inline = JSC::JITSubGenerator::generateInline((_BYTE *)(a1 + 57), (_DWORD *)a2, a3, v15, a5, a6, a7, a8);
    if (Inline)
    {
      if (Inline == 1)
      {
        v48 = (WTF *)v50;
        v49 = 2;
        if (!JSC::JITSubGenerator::generateFastPath((_BYTE *)(a1 + 57), a2, (uint64_t)&v48, a3 + 24, *(unsigned __int16 **)a1, a4, v22, v23))goto LABEL_25;
        for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
        {
          if ((j + 4) > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)v34, v35, v36, v37, v38, v39, v40);
            j = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
          j = *(_DWORD *)(a2 + 200) + 4;
        }
        *(_DWORD *)(a2 + 208) = 0;
        *(_DWORD *)(a3 + 4) = j;
        *(_BYTE *)(a3 + 64) = 0;
        if (HIDWORD(v49))
        {
          v42 = 0;
          v43 = 0;
          v44 = 12 * HIDWORD(v49);
          while (v43 < HIDWORD(v49))
          {
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v48 + v42), a2, v35, v36, v37, v38, v39, v40);
            ++v43;
            v42 += 12;
            if (v44 == v42)
              goto LABEL_25;
          }
          __break(0xC471u);
        }
        else
        {
LABEL_25:
          v45 = v48;
          if (v50 != (_BYTE *)v48 && v48 != 0)
          {
            v48 = 0;
            LODWORD(v49) = 0;
            WTF::fastFree((unint64_t)v45, v34, v35, v36, v37, v38, v39, v40);
          }
        }
      }
    }
    else
    {
      v24 = *(unsigned int *)(a2 + 200);
      v25 = v24 - v13;
      if (v25 <= 3)
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::emitNops((_DWORD *)a2, 4 - v25, v18, v19, v20, v21, v22, v23);
        LODWORD(v24) = *(_DWORD *)(a2 + 200);
      }
      for (*(_BYTE *)(a3 + 64) = 1; (int)v24 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v24)
      {
        if ((v24 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v12, v17, v18, v19, v20, v21, v22, v23);
          LODWORD(v24) = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = -721215457;
        LODWORD(v24) = *(_DWORD *)(a2 + 200) + 4;
      }
      *(_DWORD *)(a2 + 208) = 0;
      *(_DWORD *)(a3 + 4) = v24;
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v14;

  *(_QWORD *)a1 = &off_1E3573470;
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v14 && v14 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)this = &off_1E3573470;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1},void>::call(uint64_t a1, uint64_t a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t i;
  int j;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  JSC::ARM64LogicalImmediate *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::ARM64LogicalImmediate *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint8x8_t v53;
  __int32 v54;
  uint8x8_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int k;
  unsigned int v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t *v106;
  unsigned int v107;
  unsigned int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  const void *v112;
  void *v113;
  char v114;
  uint64_t v115;
  unsigned __int8 *v116;
  JSC::ARM64LogicalImmediate *v117;
  uint64_t v118;
  _BYTE *v119;
  int v120;
  unsigned __int8 *v121;
  char *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  unsigned int v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char v130;
  char v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t v138;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  int64_t v146;
  char *v147;
  int v148;
  char v149;
  JSC::ARM64LogicalImmediate *v150;
  JSC::AssemblerBuffer *v151;
  JSC::ARM64LogicalImmediate *v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  void *__dst;
  int v157;
  unsigned int v158;
  _WORD v159[4];
  unint64_t v160;
  unsigned int *v161;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(unsigned int *)(v10 + 44);
  if ((_DWORD)v11)
  {
    v12 = 0;
    for (i = 0; i != v11; ++i)
    {
      if (i >= *(unsigned int *)(v10 + 44))
      {
        __break(0xC471u);
        goto LABEL_167;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v10 + 32) + v12), v9, (uint64_t)a3, a4, a5, a6, a7, a8);
      v12 += 12;
    }
  }
  v151 = (JSC::AssemblerBuffer *)(v9 + 56);
  for (j = *(_DWORD *)(v9 + 200); j < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v151, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      j = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + j) = -721215457;
    j = *(_DWORD *)(v9 + 200) + 4;
  }
  *(_DWORD *)(v9 + 208) = 0;
  v15 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v15 + 16) = j;
  v16 = *(unsigned __int8 *)(a1 + 40);
  v17 = *(unsigned __int8 *)(a1 + 41);
  if (!*(_BYTE *)(v15 + 72))
  {
    v32 = *(_QWORD *)(a1 + 16);
    v33 = *(unsigned int *)(a1 + 28);
    v34 = *(_QWORD *)(a1 + 112);
    v35 = *(unsigned __int8 *)(a1 + 52);
    v36 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, *(JSC::DFG::JITCompiler **)(a1 + 96), a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&__dst, (unsigned __int8 *)v9, v32, v33, v34, v35, v36, v37, v16, v17);
    v45 = *(_QWORD *)(a1 + 32);
    v46 = __dst;
    goto LABEL_67;
  }
  v18 = *(unsigned int *)(a1 + 28);
  v19 = *(unsigned __int8 *)(a1 + 52);
  v153 = *(_QWORD *)(a1 + 88);
  v154 = *(_QWORD *)(a1 + 16);
  v27 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, *(JSC::DFG::JITCompiler **)(a1 + 96), a3, a4, a5, a6, a7, a8);
  v28 = *(_QWORD *)(a1 + 104);
  v152 = v20;
  *(_BYTE *)(v9 + 5768) = 1;
  if ((_DWORD)v18)
  {
    v29 = v154;
    v30 = v18;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl(v9, v29, v21, v22, v23, v24, v25, v26);
      v29 += 16;
      --v30;
    }
    while (v30);
  }
  __dst = v159;
  v157 = 2;
  if ((_DWORD)v16 == 1)
  {
    if ((_DWORD)v17 == 2)
      goto LABEL_48;
    v31 = 0;
  }
  else
  {
    v159[0] = v16 | 0x100;
    v31 = 1;
    v158 = 1;
    if ((_DWORD)v17 == 2)
      goto LABEL_17;
  }
  v159[v31++] = v17 | 0x200;
  v158 = v31;
  do
  {
LABEL_17:
    v47 = 0;
    v48 = 0;
    v49 = (char *)__dst;
    v50 = v31;
    do
    {
      if ((*((_BYTE *)__dst + v47 + 1) & 0x40) != 0)
        goto LABEL_167;
      v48 |= 1 << *((_BYTE *)__dst + v47 + 1);
      v47 += 2;
    }
    while (2 * v31 != v47);
    v51 = 0;
    do
    {
      v52 = *((_BYTE *)__dst + v51) & 0x7F;
      if (v52 >= 0x40)
        goto LABEL_167;
      v48 &= ~(1 << v52);
      v51 += 2;
    }
    while (2 * v31 != v51);
    v53 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
    v53.i16[0] = vaddlv_u8(v53);
    v54 = v53.i32[0];
    v55 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v48));
    v55.i16[0] = vaddlv_u8(v55);
    if (v55.i32[0] + v54)
    {
      v56 = 0;
      if (v31 <= 1uLL)
        v57 = 1;
      else
        v57 = v31;
      v58 = 2 * v57;
      while (1)
      {
        v59 = *((unsigned __int8 *)__dst + v56 + 1);
        if ((v59 & 0x7Fu) >= 0x40)
          goto LABEL_167;
        if (((v48 >> (v59 & 0x7F)) & 1) != 0)
          break;
        v56 += 2;
        if (v58 == v56)
          goto LABEL_42;
      }
      v60 = *((unsigned __int8 *)__dst + v56);
      if (v60 == v59)
      {
LABEL_40:
        memmove(&v49[v56], &v49[v56 + 2], 2 * v50 - v56 - 2);
        v31 = v158 - 1;
        goto LABEL_41;
      }
      v61 = (char)v60;
      if ((char)v60 == 63)
      {
        v62 = *(_DWORD *)(v9 + 200);
        v63 = *(_DWORD *)(v9 + 192);
        if ((char)v59 != 31)
        {
          v65 = v59 & 0x1F | 0xD2800000;
          goto LABEL_37;
        }
      }
      else
      {
        v62 = *(_DWORD *)(v9 + 200);
        v63 = *(_DWORD *)(v9 + 192);
        v64 = v59 == 31 || v61 == 31;
        if (!v64)
        {
          v65 = v59 & 0xFFE0FFFF | ((v61 & 0x1F) << 16) | 0xAA0003E0;
LABEL_37:
          if (v62 + 4 > v63)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v151, (uint64_t)v20, v21, v22, v23, v24, v25, v26);
            v62 = *(_DWORD *)(v9 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v9 + 56) + v62) = v65;
          *(_DWORD *)(v9 + 200) += 4;
          v49 = (char *)__dst;
          v50 = v158;
          goto LABEL_40;
        }
      }
      v65 = (char)v59 | (32 * v61) | 0x91000000;
      goto LABEL_37;
    }
    v114 = *((_BYTE *)__dst + 1);
    v149 = *(_BYTE *)__dst;
    JSC::MacroAssemblerARM64::swap(v9, *(char *)__dst, v114, v22, v23, v24, v25, v26);
    memmove(__dst, (char *)__dst + 2, 2 * v158 - 2);
    v115 = v158 - 1;
    v64 = v158 == 1;
    v158 = v115;
    v116 = (unsigned __int8 *)__dst;
    v117 = (JSC::ARM64LogicalImmediate *)((char *)__dst + 2 * v115);
    if (v64)
    {
      v124 = 0;
      v125 = 0;
      v120 = 0;
      v20 = v117;
    }
    else
    {
      v118 = 2 * v115;
      v119 = __dst;
      while (*v119 != v114)
      {
        v119 += 2;
        v118 -= 2;
        if (!v118)
          goto LABEL_97;
      }
      *v119 = v149;
LABEL_97:
      v120 = 0;
      v121 = v116;
      v20 = v117;
      v122 = (char *)v117;
      do
      {
        if (*v116 == v116[1])
        {
          v123 = v116;
          if (v122 != (char *)__dst + 2 * v158)
          {
            v148 = v120;
            v150 = v117;
            if (v116 == (unsigned __int8 *)v20)
            {
              v123 = (unsigned __int8 *)v122;
            }
            else
            {
              v146 = v121 - (unsigned __int8 *)v20;
              v147 = v122;
              memmove(v122, v20, v121 - (unsigned __int8 *)v20);
              v123 = (unsigned __int8 *)&v147[v146];
            }
            v117 = v150;
            v120 = v148;
          }
          v20 = (JSC::ARM64LogicalImmediate *)(v116 + 2);
          ++v120;
          v122 = (char *)v123;
        }
        v116 += 2;
        v121 += 2;
      }
      while (v116 < (unsigned __int8 *)v117);
      v116 = (unsigned __int8 *)__dst;
      v124 = v158;
      v125 = v158;
      v117 = (JSC::ARM64LogicalImmediate *)v122;
    }
    v126 = &v116[2 * v124];
    if (v20 != (JSC::ARM64LogicalImmediate *)v126)
    {
      v144 = v120;
      memmove(v117, v20, v126 - (unsigned __int8 *)v20);
      v120 = v144;
      v125 = v158;
    }
    v31 = v125 - v120;
LABEL_41:
    v158 = v31;
LABEL_42:
    ;
  }
  while (v31);
  v66 = __dst;
  if (v159 != __dst && __dst)
  {
    __dst = 0;
    v157 = 0;
    WTF::fastFree((unint64_t)v66, v20, v21, v22, v23, v24, v25, v26);
  }
LABEL_48:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, v28, 3, v22, v23, v24, v25, v26);
  if ((_DWORD)v27 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, (uint64_t)v152, 0, v67, v68, v69, v70, v71);
  else
    JSC::MacroAssemblerARM64::load64(v9, (v27 << 35) + 0x380000001ALL, 0, v67, v68, v69, v70, v71);
  JSC::DFG::SpeculativeJIT::appendCall(v9, v153, v72, v73, v74, v75, v76, v77, (int *)&v155);
  __dst = (void *)2;
  v161 = 0;
  v82 = *(_QWORD *)(v9 + 3960);
  v83 = *(_QWORD *)(*(_QWORD *)(v9 + 3976) + 8);
  if ((v83 & 1) != 0)
  {
    v140 = *(_QWORD *)(v83 & 0xFFFFFFFF8);
    if ((v83 & 2) != 0
      || ((v141 = *(unsigned int *)((v83 & 0xFFFFFFFF8) + 8), (_DWORD)v141 != 0x3FFFFFFF)
        ? (v142 = (_DWORD)v141 == -1)
        : (v142 = 1),
          v142))
    {
      v143 = 2;
    }
    else if (v141 >> 28)
    {
      v145 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v145 = v140;
      *(_DWORD *)(v145 + 8) = v141;
      v143 = 1;
      v140 = v145;
    }
    else
    {
      v143 = *(_QWORD *)(v83 & 0xFFFFFFFF8);
      v140 = v141 << 36;
    }
    v83 = v140 | v143;
  }
  v160 = v83;
  v84 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v82, &v160, (uint64_t *)&__dst, &v161, v78, v79, v80, v81);
  if ((v160 & 1) != 0 && (v160 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v160 & 0xFFFFFFFF8, v38, v39, v40, v41, v42, v43, v44);
  if ((v84 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v9, 1, v39, v40, v41, v42, v43, v44);
    LOBYTE(v85) = 0;
    goto LABEL_54;
  }
  v127 = 0;
  if ((_DWORD)v18)
  {
    v128 = 16 * v18;
    v129 = (char *)(v154 + 2);
    while (1)
    {
      v131 = *v129;
      v129 += 16;
      v130 = v131;
      if ((v131 & 0x40) != 0)
        break;
      v127 |= 1 << v130;
      v128 -= 16;
      if (!v128)
        goto LABEL_113;
    }
LABEL_167:
    __break(1u);
LABEL_168:
    __break(0xC471u);
    return;
  }
LABEL_113:
  if ((v19 & 0x40) != 0)
    goto LABEL_167;
  LOBYTE(v85) = 1;
  v132 = v127 | (1 << v19);
  if ((v132 & 2) != 0)
  {
    v133 = (unsigned __int16)~(_WORD)v132 & 0xFFFE;
    if (v133)
    {
      v85 = __clz(__rbit64(v133));
      if (v85 != 1)
      {
        if (v85 == 31)
        {
          v135 = *(_DWORD *)(v9 + 200);
          v136 = v135 + 4;
          v137 = *(_DWORD *)(v9 + 192);
          v134 = -1862270913;
        }
        else
        {
          v134 = v85 | 0xAA0103E0;
          v135 = *(_DWORD *)(v9 + 200);
          v136 = v135 + 4;
          v137 = *(_DWORD *)(v9 + 192);
        }
        if (v136 > v137)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v151, (uint64_t)v38, v39, v40, v41, v42, v43, v44);
          v135 = *(_DWORD *)(v9 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v9 + 56) + v135) = v134;
        *(_DWORD *)(v9 + 200) += 4;
      }
    }
    else
    {
      LOBYTE(v85) = -1;
    }
  }
LABEL_54:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v38, v39, v40, v41, v42, v43, v44);
  if (v19)
  {
    if (v19 == 31)
      v86 = -1862270945;
    else
      v86 = v19 | 0xAA0003E0;
    v87 = *(_DWORD *)(v9 + 200);
    if (v87 + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v151, (uint64_t)v38, v39, v40, v41, v42, v43, v44);
      v87 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v87) = v86;
    *(_DWORD *)(v9 + 200) += 4;
  }
  if ((_DWORD)v18)
  {
    v88 = 16 * v18;
    do
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(v9, v154 - 16 + v88, v39, v40, v41, v42, v43, v44);
      v88 -= 16;
    }
    while (v88);
  }
  *(_BYTE *)(v9 + 5768) = 0;
  if (v84)
    JSC::DFG::SpeculativeJIT::exceptionCheck(v9, (char)v85, v39, v40, v41, v42, v43, v44);
  v45 = *(_QWORD *)(a1 + 32);
  v46 = v155;
LABEL_67:
  *(_QWORD *)(v45 + 20) = v46;
  for (k = *(_DWORD *)(v9 + 200); (signed int)k < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = k)
  {
    if (k + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v151, (uint64_t)v38, v39, v40, v41, v42, v43, v44);
      k = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + k) = -721215457;
    k = *(_DWORD *)(v9 + 200) + 4;
  }
  v90 = k;
  if (k + 4 > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v151, (uint64_t)v38, v39, v40, v41, v42, v43, v44);
    v90 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v90) = 335544320;
  *(_DWORD *)(v9 + 200) += 4;
  if (*(_BYTE *)(v9 + 328))
    v91 = 69;
  else
    v91 = 65;
  __dst = (void *)k;
  LOBYTE(v157) = v91;
  *(_WORD *)((char *)&v157 + 1) = 15;
  HIBYTE(v157) = -1;
  LODWORD(v161) = *(_DWORD *)(a1 + 120);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&__dst, (unsigned int *)&v161, v9, v40, v41, v42, v43, v44);
  v92 = *(_QWORD *)(a1 + 104);
  v93 = *(_QWORD *)(a1 + 32);
  if (v93)
  {
    do
      v94 = __ldaxr((unsigned int *)v93);
    while (__stlxr(v94 + 1, (unsigned int *)v93));
  }
  v95 = WTF::fastMalloc((WTF *)0x20);
  v103 = v95;
  *(_DWORD *)(v95 + 8) = 1;
  *(_QWORD *)v95 = &off_1E3573498;
  *(_QWORD *)(v95 + 16) = v92;
  if (v93)
  {
    do
      v104 = __ldaxr((unsigned int *)v93);
    while (__stlxr(v104 + 1, (unsigned int *)v93));
  }
  *(_QWORD *)(v95 + 24) = v93;
  v105 = *(unsigned int *)(v9 + 244);
  if ((_DWORD)v105 == *(_DWORD *)(v9 + 240))
  {
    v109 = v105 + (v105 >> 2);
    if (v109 >= 0x10)
      v110 = v109 + 1;
    else
      v110 = 16;
    if (v110 <= v105 + 1)
      v111 = v105 + 1;
    else
      v111 = v110;
    if (v111 >> 29)
      goto LABEL_168;
    v112 = *(const void **)(v9 + 232);
    v113 = (void *)WTF::fastMalloc((WTF *)(8 * v111));
    *(_DWORD *)(v9 + 240) = v111;
    *(_QWORD *)(v9 + 232) = v113;
    memcpy(v113, v112, 8 * v105);
    if (v112)
    {
      if (*(const void **)(v9 + 232) == v112)
      {
        *(_QWORD *)(v9 + 232) = 0;
        *(_DWORD *)(v9 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v112, v96, v97, v98, v99, v100, v101, v102);
    }
    v105 = *(unsigned int *)(v9 + 244);
    v106 = (uint64_t *)(*(_QWORD *)(v9 + 232) + 8 * v105);
  }
  else
  {
    v106 = (uint64_t *)(*(_QWORD *)(v9 + 232) + 8 * v105);
  }
  *v106 = v103;
  *(_DWORD *)(v9 + 244) = v105 + 1;
  if (v93)
  {
    do
    {
      v107 = __ldaxr((unsigned int *)v93);
      v108 = v107 - 1;
    }
    while (__stlxr(v108, (unsigned int *)v93));
    if (!v108)
    {
      atomic_store(1u, (unsigned int *)v93);
      v138 = *(_QWORD *)(v93 + 32);
      if (v93 + 48 != v138 && v138 != 0)
      {
        *(_QWORD *)(v93 + 32) = 0;
        *(_DWORD *)(v93 + 40) = 0;
        WTF::fastFree(v138, v96, v97, v98, v99, v100, v101, v102);
      }
      WTF::fastFree(v93, v96, v97, v98, v99, v100, v101, v102);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;

  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v12 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v12 && v12 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITSubGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITSubGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 16), (int *)(*(_QWORD *)(a1 + 24) + 8), a2);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,JSC::JSObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E35734F0;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,JSC::JSObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E35734F0;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,JSC::JSObject *,long long),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,JSC::JSObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint8x8_t v35;
  __int32 v36;
  uint8x8_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  char v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  _BYTE *v51;
  char *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  int v55;
  unsigned __int8 *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  char v69;
  unsigned __int8 v70;
  int64_t v71;
  char *v72;
  char *v73;
  void *__dst;
  uint64_t v75;
  _WORD v76[4];

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v19 = 0;
      v20 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v19, v13, v14, v15, v16, v17, v18);
        ++v20;
        v19 += 16;
      }
      while (v20 < *(unsigned int *)(a1 + 92));
    }
  }
  v21 = *(unsigned int *)(a1 + 136);
  v22 = *(_QWORD *)(a1 + 144);
  v23 = *(unsigned __int8 *)(a1 + 152);
  v24 = *(unsigned __int8 *)(a1 + 153);
  v25 = *(unsigned __int8 *)(a1 + 154);
  __dst = v76;
  v75 = 3;
  if (v23 == 1)
  {
    v26 = 0;
  }
  else
  {
    v76[0] = v23 | 0x100;
    v26 = 1;
    HIDWORD(v75) = 1;
  }
  if (v24 != 2)
  {
    v76[v26++] = v24 | 0x200;
    HIDWORD(v75) = v26;
  }
  v27 = 2852127712;
  if (v25 == 3)
  {
    if (!v26)
      goto LABEL_69;
  }
  else
  {
    v76[v26++] = v25 | 0x300;
    HIDWORD(v75) = v26;
  }
  v28 = 2432696320;
  do
  {
    v29 = 0;
    v30 = 0;
    v31 = (char *)__dst;
    v32 = v26;
    do
    {
      if ((*((_BYTE *)__dst + v29 + 1) & 0x40) != 0)
      {
LABEL_93:
        __break(1u);
        goto LABEL_94;
      }
      v30 |= 1 << *((_BYTE *)__dst + v29 + 1);
      v29 += 2;
    }
    while (2 * v26 != v29);
    v33 = 0;
    do
    {
      v34 = *((_BYTE *)__dst + v33) & 0x7F;
      if (v34 >= 0x40)
        goto LABEL_93;
      v30 &= ~(1 << v34);
      v33 += 2;
    }
    while (2 * v26 != v33);
    v35 = (uint8x8_t)vcnt_s8((int8x8_t)v30);
    v35.i16[0] = vaddlv_u8(v35);
    v36 = v35.i32[0];
    v37 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v30));
    v37.i16[0] = vaddlv_u8(v37);
    if (v37.i32[0] + v36)
    {
      v8 = 0;
      if (v26 <= 1)
        v38 = 1;
      else
        v38 = v26;
      v39 = 2 * v38;
      while (1)
      {
        v40 = *((unsigned __int8 *)__dst + v8 + 1);
        if ((v40 & 0x7Fu) >= 0x40)
          goto LABEL_93;
        if (((v30 >> (v40 & 0x7F)) & 1) != 0)
          break;
        v8 += 2;
        if (v39 == v8)
          goto LABEL_62;
      }
      v41 = *((unsigned __int8 *)__dst + v8);
      if (v41 != v40)
      {
        v42 = (char)v41;
        if ((char)v41 == 63)
        {
          v43 = *(_DWORD *)(a2 + 200);
          v44 = *(_DWORD *)(a2 + 192);
          if ((char)v40 == 31)
            goto LABEL_56;
          LODWORD(v9) = v40 & 0x1F | 0xD2800000;
        }
        else
        {
          v43 = *(_DWORD *)(a2 + 200);
          v44 = *(_DWORD *)(a2 + 192);
          v45 = v40 == 31 || v42 == 31;
          if (!v45)
          {
            LODWORD(v9) = v40 & 0xFFE0FFFF | ((v42 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_57;
          }
LABEL_56:
          LODWORD(v9) = (char)v40 | (32 * v42) | 0x91000000;
        }
LABEL_57:
        if (v43 + 4 > v44)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
          v43 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v43) = (_DWORD)v9;
        *(_DWORD *)(a2 + 200) += 4;
        v31 = (char *)__dst;
        v32 = HIDWORD(v75);
      }
      memmove(&v31[v8], &v31[v8 + 2], 2 * v32 - v8 - 2);
      v26 = HIDWORD(v75) - 1;
      goto LABEL_61;
    }
    LODWORD(v9) = *(char *)__dst;
    v46 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, v9, v46, v14, v15, v16, v17, v18);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v75) - 2);
    v47 = (HIDWORD(v75) - 1);
    v45 = HIDWORD(v75) == 1;
    HIDWORD(v75) = v47;
    v48 = (unsigned __int8 *)__dst;
    v49 = (unsigned __int8 *)__dst + 2 * v47;
    if (v45)
    {
      v54 = 0;
      v55 = 0;
      LODWORD(v8) = 0;
      v12 = v49;
    }
    else
    {
      v50 = 2 * v47;
      v51 = __dst;
      while (*v51 != v46)
      {
        v51 += 2;
        v50 -= 2;
        if (!v50)
          goto LABEL_41;
      }
      *v51 = (_BYTE)v9;
LABEL_41:
      LODWORD(v8) = 0;
      v9 = v48;
      v12 = v49;
      v52 = (char *)v49;
      do
      {
        if (*v48 == v48[1])
        {
          v53 = v48;
          if (v52 != (char *)__dst + 2 * HIDWORD(v75))
          {
            v73 = (char *)v49;
            if (v48 == v12)
            {
              v53 = (unsigned __int8 *)v52;
            }
            else
            {
              v71 = v9 - v12;
              v72 = v52;
              memmove(v52, v12, v9 - v12);
              v53 = (unsigned __int8 *)&v72[v71];
            }
            v49 = (unsigned __int8 *)v73;
          }
          v12 = v48 + 2;
          LODWORD(v8) = v8 + 1;
          v52 = (char *)v53;
        }
        v48 += 2;
        v9 += 2;
      }
      while (v48 < v49);
      v48 = (unsigned __int8 *)__dst;
      v54 = HIDWORD(v75);
      v55 = HIDWORD(v75);
      v49 = (unsigned __int8 *)v52;
    }
    v56 = &v48[2 * v54];
    if (v12 != v56)
    {
      memmove(v49, v12, v56 - v12);
      v55 = HIDWORD(v75);
    }
    v26 = v55 - v8;
    v27 = 2852127712;
LABEL_61:
    HIDWORD(v75) = v26;
LABEL_62:
    ;
  }
  while (v26);
  v57 = __dst;
  if (v76 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v75) = 0;
    WTF::fastFree((unint64_t)v57, v12, v13, v14, v15, v16, v17, v18);
  }
LABEL_69:
  if (v21 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v22, 0, v14, v15, v16, v17, v18);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v21 << 35) + 0x380000001ALL, 0, v14, v15, v16, v17, v18);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v58, v59, v60, v61, v62, v63, (int *)&__dst);
  *(_QWORD *)(a1 + 64) = __dst;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_74;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v13, v14, v15, v16, v17, v18);
LABEL_74:
    LODWORD(v8) = 0;
    LOBYTE(v22) = 0;
    goto LABEL_75;
  }
  JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 80), *(_BYTE *)(a1 + 74));
  LOBYTE(v22) = v69;
  LODWORD(v8) = v70;
LABEL_75:
  v64 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v64 == 31)
    {
      LODWORD(v9) = -1862270945;
    }
    else if (v64 == 255)
    {
      LODWORD(v9) = -1442774017;
    }
    else
    {
      LODWORD(v9) = v64 | 0xAA0003E0;
    }
    v27 = a2 + 200;
    v65 = *(_DWORD *)(a2 + 200);
    v28 = a2 + 56;
    if (v65 + 4 > *(_DWORD *)(a2 + 192))
    {
LABEL_94:
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v28, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
      v65 = *(_DWORD *)v27;
    }
    *(_DWORD *)(*(_QWORD *)v28 + v65) = (_DWORD)v9;
    *(_DWORD *)v27 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_88;
  v66 = *(_DWORD *)(a1 + 92);
  if (!v66)
  {
LABEL_87:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_88:
    if (!*(_BYTE *)(a1 + 73))
    {
      if ((_DWORD)v8)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v22, v13, v14, v15, v16, v17, v18);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v13, v14, v15, v16, v17, v18);
    return;
  }
  v67 = v66 - 1;
  v68 = 16 * (v66 - 1);
  while (*(_DWORD *)(a1 + 92) > v67)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v68, v13, v14, v15, v16, v17, v18);
    v68 -= 16;
    if (--v67 == -1)
      goto LABEL_87;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long,WTF::UniquedStringImpl *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573550;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long,WTF::UniquedStringImpl *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573550;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long,WTF::UniquedStringImpl *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long,WTF::UniquedStringImpl *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  char v81;
  unsigned __int8 v82;
  uint64_t v83;
  __int16 *v84;
  void *__dst;
  int v86;
  unsigned int v87;
  __int16 v88;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 184);
  v19 = &v88;
  __dst = &v88;
  v86 = 1;
  if (v17 != 1)
  {
    v88 = v17 | 0x100;
    v87 = 1;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_92;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_92;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v83 = v15;
      v84 = v19;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v87 - 2);
      v40 = v87 - 1;
      v35 = v87 == 1;
      v87 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v87)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v87;
        v44 = v87;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v87;
      }
      v20 = v44 - v45;
      v15 = v83;
      v19 = v84;
LABEL_40:
      v87 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v19 != __dst && __dst)
        {
          __dst = 0;
          v86 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_92;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v87 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v87;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | 0x91000000;
    goto LABEL_36;
  }
LABEL_62:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v18, 2, a4, a5, a6, a7, a8);
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, v54, v55, v56, v57, v58);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, v54, v55, v56, v57, v58);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v59, v60, v61, v62, v63, v64, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v66, v67, v68, v69, v70, v71);
LABEL_67:
    v72 = 0;
    v73 = 0;
    goto LABEL_68;
  }
  JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102));
  v73 = v81;
  v72 = v82;
LABEL_68:
  v74 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v74 == 31)
    {
      v75 = -1862270945;
    }
    else if (v74 == 255)
    {
      v75 = -1442774017;
    }
    else
    {
      v75 = v74 | 0xAA0003E0;
    }
    v77 = (unsigned int *)(v8 + 200);
    v76 = *(_DWORD *)(v8 + 200);
    if (v76 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v65, v66, v67, v68, v69, v70, v71);
      v76 = *v77;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v76) = v75;
    *v77 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v78 = *(_DWORD *)(a1 + 116);
    if (v78)
    {
      v79 = v78 - 1;
      v80 = 16 * (v78 - 1);
      while (*(_DWORD *)(a1 + 116) > v79)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v80, v66, v67, v68, v69, v70, v71);
        v80 -= 16;
        if (--v79 == -1)
          goto LABEL_81;
      }
LABEL_93:
      __break(0xC471u);
      return;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (!*(_BYTE *)(a1 + 101))
  {
    if (v72)
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, v73, v66, v67, v68, v69, v70, v71);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v66, v67, v68, v69, v70, v71);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35735B0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35735B0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  unsigned __int8 v77;
  uint64_t v78;
  int v79;
  __int16 *v80;
  void *__dst;
  int v82;
  unsigned int v83;
  __int16 v84;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = &v84;
  __dst = &v84;
  v82 = 1;
  if (v17 != 1)
  {
    v84 = v17 | 0x100;
    v83 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_92;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_92;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v79 = v19;
      v80 = v18;
      v78 = v15;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v83 - 2);
      v40 = v83 - 1;
      v35 = v83 == 1;
      v83 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v83)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v83;
        v44 = v83;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v83;
      }
      v20 = v44 - v45;
      v15 = v78;
      v18 = v80;
      v19 = v79;
LABEL_40:
      v83 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v82 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_92;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v83 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v83;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
LABEL_67:
    v67 = 0;
    v68 = 0;
    goto LABEL_68;
  }
  JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102));
  v68 = v76;
  v67 = v77;
LABEL_68:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_81;
      }
LABEL_93:
      __break(0xC471u);
      return;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (!*(_BYTE *)(a1 + 101))
  {
    if (v67)
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateWhicheverInt52Operand>(uint64_t result, JSC::DFG::SpeculativeJIT *this, JSC::DFG::SpeculateWhicheverInt52Operand *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  int v11;
  unsigned int v12;

  *(_QWORD *)result = this;
  *(_BYTE *)(result + 8) = -1;
  v8 = ~*(_DWORD *)((*((_QWORD *)a3 + 1) & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v8 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    v10 = result;
    if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v8 + 8) == 1)
    {
      v11 = JSC::DFG::SpeculateWhicheverInt52Operand::gpr(a3, (uint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v11 > 15)
        v12 = -1;
      else
        v12 = v11;
      ++*((_DWORD *)this + 3 * v12 + 1196);
    }
    else
    {
      LOBYTE(v11) = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)this, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(v10 + 8) = v11;
    return v10;
  }
  return result;
}

uint64_t JSC::JITMathIC<JSC::JITNegGenerator,JSC::UnaryArithProfile>::generateInline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v12;
  int v13;
  int i;
  unsigned __int16 *v15;
  int Inline;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t FastPath;
  unsigned int v28;
  int v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t *v35;
  int *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  int v51;
  WTF *v52;
  uint64_t v53;
  _BYTE v54[28];
  int v55;
  unint64_t v56;

  v12 = (JSC::AssemblerBuffer *)(a2 + 56);
  v13 = *(_DWORD *)(a2 + 200);
  for (i = *(_DWORD *)(a2 + 52); v13 < i; i = *(_DWORD *)(a2 + 52))
  {
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
      v13 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
    v13 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v13;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)a3 = v13;
  v15 = *(unsigned __int16 **)a1;
  if (*(_QWORD *)a1 && (*v15 & 0x380) == 0)
  {
    *(_BYTE *)(a2 + 328) = 1;
    if (v13 < i)
    {
      do
      {
        if ((v13 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
          v13 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
        v13 = *(_DWORD *)(a2 + 200) + 4;
        *(_DWORD *)(a2 + 200) = v13;
      }
      while (v13 < *(_DWORD *)(a2 + 52));
    }
    v28 = v13;
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
      v28 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = 335544320;
    v29 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v29;
    v30 = 0xFF000F4500000000;
    if (!*(_BYTE *)(a2 + 328))
      v30 = 0xFF000F4100000000;
    *(_BYTE *)(a2 + 328) = 0;
    v55 = v13;
    v56 = v30;
    if (v13 != -1)
    {
      v31 = (_QWORD *)(a3 + 24);
      v32 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v32 == *(_DWORD *)(a3 + 32))
      {
        v33 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, (void *)(v32 + 1), (unint64_t)&v55, (uint64_t)v15, a5, a6, a7, a8);
        v34 = (_DWORD *)(*(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36));
        *v34 = *(_DWORD *)v33;
        v35 = (unint64_t *)(v34 + 1);
        v30 = *(_QWORD *)(v33 + 4);
      }
      else
      {
        v36 = (int *)(*v31 + 12 * v32);
        *v36 = v13;
        v35 = (unint64_t *)(v36 + 1);
      }
      *v35 = v30;
      ++*(_DWORD *)(a3 + 36);
      v29 = *(_DWORD *)(a2 + 200);
    }
    FastPath = 1;
    for (*(_BYTE *)(a3 + 64) = 1; v29 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v29)
    {
      if ((v29 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
        v29 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v29) = -721215457;
      v29 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    *(_DWORD *)(a3 + 4) = v29;
    *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    Inline = JSC::JITNegGenerator::generateInline((unsigned __int8 *)(a1 + 57), (_DWORD *)a2, a3, v15, a5, a6, a7, a8);
    if (Inline)
    {
      if (Inline == 1)
      {
        v52 = (WTF *)v54;
        v53 = 2;
        FastPath = JSC::JITNegGenerator::generateFastPath((unsigned __int8 *)(a1 + 57), a2, (uint64_t)&v52, a3 + 24, *(unsigned __int16 **)a1, a4, v22, v23);
        if ((_DWORD)FastPath)
        {
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)a2, (uint64_t)v37, v38, v39, v40, v41, v42, v43, &v51);
          *(_DWORD *)(a3 + 4) = v51;
          *(_BYTE *)(a3 + 64) = 0;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v52, a2, v44, v45, v46, v47, v48, v49);
        }
        v50 = v52;
        if (v54 != (_BYTE *)v52 && v52)
        {
          v52 = 0;
          LODWORD(v53) = 0;
          WTF::fastFree((unint64_t)v50, v37, v38, v39, v40, v41, v42, v43);
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      v24 = *(unsigned int *)(a2 + 200);
      v25 = v24 - v13;
      if (v25 <= 3)
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::emitNops((_DWORD *)a2, 4 - v25, v18, v19, v20, v21, v22, v23);
        LODWORD(v24) = *(_DWORD *)(a2 + 200);
      }
      for (*(_BYTE *)(a3 + 64) = 1; (int)v24 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v24)
      {
        if ((v24 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v12, v17, v18, v19, v20, v21, v22, v23);
          LODWORD(v24) = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = -721215457;
        LODWORD(v24) = *(_DWORD *)(a2 + 200) + 4;
      }
      *(_DWORD *)(a2 + 208) = 0;
      *(_DWORD *)(a3 + 4) = v24;
      return 1;
    }
  }
  return FastPath;
}

uint64_t WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(JSC::DFG::Node *,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v14;

  *(_QWORD *)a1 = &off_1E35735E0;
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v14 && v14 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(JSC::DFG::Node *,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)this = &off_1E35735E0;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(JSC::DFG::Node *,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(void)#1},void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(JSC::DFG::Node *,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(void)#1}::operator()(a1 + 8, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(JSC::DFG::Node *,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(void)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::DFG::Node *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int *v49;
  unsigned int v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::ARM64LogicalImmediate *v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;

  v9 = *(_QWORD *)a1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)(*(_QWORD *)(a1 + 24) + 32), *(_QWORD *)a1, a3, a4, a5, a6, a7, a8);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::label((_DWORD *)v9, v10, v11, v12, v13, v14, v15, v16, (int *)&v63);
  v23 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v23 + 16) = v63;
  v24 = *(_QWORD *)(a1 + 8);
  v25 = *(unsigned int *)(a1 + 20);
  if (*(_BYTE *)(v23 + 72))
  {
    v26 = *(_QWORD *)(a1 + 32);
    v27 = *(unsigned __int8 *)(a1 + 40);
    v28 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, *(JSC::DFG::JITCompiler **)(a1 + 48), v17, v18, v19, v20, v21, v22);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((int *)&v63, (char *)v9, v24, v25, v26, v27, v28, v29, *(unsigned __int8 *)(a1 + 56), *(JSC::ARM64LogicalImmediate **)(a1 + 64));
  }
  else
  {
    v59 = *(_QWORD *)(a1 + 72);
    v60 = *(unsigned __int8 *)(a1 + 40);
    v61 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, *(JSC::DFG::JITCompiler **)(a1 + 48), v17, v18, v19, v20, v21, v22);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>((int *)&v63, (char *)v9, v24, v25, v59, v60, v61, v62, *(unsigned __int8 *)(a1 + 56));
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 20) = v63;
  JSC::ARM64Assembler::label((_DWORD *)(v9 + 32), v30, v31, v32, v33, v34, v35, v36, (int *)&v66);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(v9 + 56), 335544320, v37, v38, v39, v40, v41, v42);
  if (*(_BYTE *)(v9 + 328))
    v48 = 69;
  else
    v48 = 65;
  v63 = v66;
  LOBYTE(v64) = v48;
  *(_WORD *)((char *)&v64 + 1) = 15;
  BYTE3(v64) = -1;
  v65 = *(_DWORD *)(a1 + 80);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v63, &v65, v9, v43, v44, v45, v46, v47);
  v63 = *(_QWORD *)(a1 + 64);
  v49 = *(unsigned int **)(a1 + 24);
  if (v49)
  {
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 + 1, v49));
  }
  v64 = v49;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(JSC::DFG::Node *,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>(v9, &v63);
  return void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITAddGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}::~LinkBuffer((uint64_t)&v63, v51, v52, v53, v54, v55, v56, v57);
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(int *a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, JSC::ARM64LogicalImmediate *a10)
{
  unsigned int *v10;
  JSC::AssemblerBuffer *v12;
  char *v13;
  _BYTE *v14;
  uint64_t v17;
  unsigned int v18;
  unsigned __int16 v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int16 v63;
  unsigned int v64;
  uint64_t v65;
  int64_t v66;
  char *v67;
  char v68;
  int v69;
  char *__src;
  uint64_t v73;
  JSC::AssemblerBuffer *v74;
  void *__dst;
  int v76;
  unsigned int v77;
  __int16 v78;

  v10 = (unsigned int *)a8;
  v12 = (JSC::AssemblerBuffer *)a6;
  v13 = a2;
  v73 = a3;
  v74 = (JSC::AssemblerBuffer *)a4;
  v14 = a2 + 5768;
  a2[5768] = 1;
  if (a4)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl((uint64_t)v13, a3 + 16 * v17, a3, a4, a5, a6, a7, a8);
      v17 = v18;
    }
    while (a4 > v18++);
  }
  __dst = &v78;
  v76 = 1;
  if (a9 == 1)
    goto LABEL_57;
  v78 = a9 | 0x100;
  v20 = 1;
  v77 = 1;
  LODWORD(v21) = (_DWORD)v13 + 56;
  v22 = 1;
  do
  {
    v23 = 0;
    v24 = 0;
    v25 = (char *)__dst;
    v26 = v22;
    do
    {
      if ((*((_BYTE *)__dst + v23 + 1) & 0x40) != 0)
        goto LABEL_72;
      v24 |= 1 << *((_BYTE *)__dst + v23 + 1);
      v23 += 2;
    }
    while (2 * v22 != v23);
    v27 = 0;
    do
    {
      v28 = *((_BYTE *)__dst + v27) & 0x7F;
      if (v28 >= 0x40)
        goto LABEL_72;
      v24 &= ~(1 << v28);
      v27 += 2;
    }
    while (2 * v22 != v27);
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v29.i16[0] = vaddlv_u8(v29);
    v30 = v29.i32[0];
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v24));
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.i32[0] + v30)
    {
      v32 = 0;
      if (v22 <= 1)
        v33 = 1;
      else
        v33 = v22;
      v34 = 2 * v33;
      while (1)
      {
        v35 = *((unsigned __int8 *)__dst + v32 + 1);
        if ((v35 & 0x7Fu) >= 0x40)
          goto LABEL_72;
        if (((v24 >> (v35 & 0x7F)) & 1) != 0)
          break;
        v32 += 2;
        if (v34 == v32)
          goto LABEL_36;
      }
      v36 = *((unsigned __int8 *)__dst + v32);
      if (v36 == v35)
        goto LABEL_34;
      if ((char)v36 == 63)
      {
        if (v35 != 31)
        {
          v38 = v35 & 0x1F | 0xD2800000;
          goto LABEL_31;
        }
      }
      else
      {
        v37 = (char)v35 == 31 || (char)v36 == 31;
        if (!v37)
        {
          v38 = v35 & 0xFFE0FFFF | ((v36 & 0x1F) << 16) | 0xAA0003E0;
LABEL_31:
          v39 = *((_DWORD *)v13 + 50);
          if (v39 + 4 > *((_DWORD *)v13 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v13 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v39 = *((_DWORD *)v13 + 50);
          }
          *(_DWORD *)(*((_QWORD *)v13 + 7) + v39) = v38;
          *((_DWORD *)v13 + 50) += 4;
          v25 = (char *)__dst;
          v26 = v77;
LABEL_34:
          memmove(&v25[v32], &v25[v32 + 2], 2 * v26 - v32 - 2);
          v22 = v77 - 1;
          goto LABEL_35;
        }
      }
      v38 = (char)v35 | (32 * (char)v36) | 0x91000000;
      goto LABEL_31;
    }
    v40 = *((_BYTE *)__dst + 1);
    v68 = *(_BYTE *)__dst;
    JSC::MacroAssemblerARM64::swap((uint64_t)v13, *(char *)__dst, v40, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v77 - 2);
    v41 = v77 - 1;
    v37 = v77 == 1;
    v77 = v41;
    v42 = (unsigned __int8 *)__dst;
    __src = (char *)__dst + 2 * v41;
    if (v37)
    {
      v43 = 0;
      v44 = 0;
      v69 = 0;
      a2 = (char *)__dst + 2 * v41;
    }
    else
    {
      v46 = 2 * v41;
      v47 = __dst;
      while (*v47 != v40)
      {
        v47 += 2;
        v46 -= 2;
        if (!v46)
          goto LABEL_46;
      }
      *v47 = v68;
LABEL_46:
      v69 = 0;
      v48 = v42;
      a2 = __src;
      v49 = __src;
      do
      {
        if (*v42 == v42[1])
        {
          v50 = v42;
          if (v49 != (char *)__dst + 2 * v77)
          {
            if (v42 == (unsigned __int8 *)a2)
            {
              v50 = (unsigned __int8 *)v49;
            }
            else
            {
              v66 = v48 - (unsigned __int8 *)a2;
              v67 = v49;
              memmove(v49, a2, v48 - (unsigned __int8 *)a2);
              v50 = (unsigned __int8 *)&v67[v66];
            }
          }
          a2 = (char *)(v42 + 2);
          ++v69;
          v49 = (char *)v50;
        }
        v42 += 2;
        v48 += 2;
      }
      while (v42 < (unsigned __int8 *)__src);
      v42 = (unsigned __int8 *)__dst;
      v43 = v77;
      v44 = v77;
      __src = v49;
    }
    v45 = (char *)&v42[2 * v43];
    if (a2 != v45)
    {
      memmove(__src, a2, v45 - a2);
      v44 = v77;
    }
    v22 = v44 - v69;
LABEL_35:
    v77 = v22;
LABEL_36:
    ;
  }
  while (v22);
  v51 = __dst;
  if (&v78 != __dst && __dst)
  {
    __dst = 0;
    v76 = 0;
    WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_57:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v13, (uint64_t)a10, 2, a4, a5, a6, a7, a8);
  if ((_DWORD)a7 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v13, (uint64_t)v10, 0, v52, v53, v54, v55, v56);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v13, (a7 << 35) + 0x380000001ALL, 0, v52, v53, v54, v55, v56);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v13, a5, v57, v58, v59, v60, v61, v62, a1);
  JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::JSValueRegs,std::span<JSC::DFG::SilentRegisterSavePlan const,18446744073709551615ul>>((uint64_t)v13, &v73, (char)v12);
  v20 = v63;
  if (!(_BYTE)v12)
    goto LABEL_65;
  if (v12 == 31)
    LODWORD(v21) = -1862270945;
  else
    LODWORD(v21) = v12 & 0x1F | 0xAA0003E0;
  v10 = (unsigned int *)(v13 + 200);
  v64 = *((_DWORD *)v13 + 50);
  v12 = (JSC::AssemblerBuffer *)(v13 + 56);
  if (v64 + 4 > *((_DWORD *)v13 + 48))
    goto LABEL_73;
  while (1)
  {
    *(_DWORD *)(*(_QWORD *)v12 + v64) = v21;
    *v10 += 4;
LABEL_65:
    v12 = v74;
    if (!(_DWORD)v74)
      break;
    v21 = v74 - 1;
    v10 = (unsigned int *)(v73 - 16);
    v65 = 4 * v74;
    while (v21 < (unint64_t)v12)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)v13, (uint64_t)&v10[v65], a3, a4, a5, a6, a7, a8);
      v65 -= 4;
      if (!(v65 * 4))
        goto LABEL_69;
    }
LABEL_72:
    __break(1u);
LABEL_73:
    JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v64 = *v10;
  }
LABEL_69:
  *v14 = 0;
  if (v20 >= 0x100u)
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v13, (char)v20, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(int *a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, JSC::ARM64LogicalImmediate *this, uint64_t a9)
{
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  unsigned __int8 *v46;
  char *v47;
  unsigned __int8 *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  char v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  JSC::AssemblerBuffer *v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  char *v82;
  char v83;
  int v84;
  char *__src;
  _BYTE *v86;
  void *__dst;
  int v89;
  unsigned int v90;
  __int16 v91;
  unint64_t v92;
  unsigned int *v93;

  LOBYTE(v11) = a6;
  v13 = a3;
  v14 = (uint64_t)a2;
  v86 = a2 + 5768;
  a2[5768] = 1;
  if (a4)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      JSC::DFG::SpeculativeJIT::silentSpillImpl(v14, v13 + 16 * v16, a3, a4, a5, a6, a7, (uint64_t)this);
      v16 = v17;
    }
    while (a4 > v17++);
  }
  __dst = &v91;
  v89 = 1;
  if (a9 == 1)
    goto LABEL_57;
  v91 = a9 | 0x100;
  v19 = 1;
  v90 = 1;
  v20 = 1;
  do
  {
    v21 = 0;
    v22 = 0;
    v23 = (char *)__dst;
    v24 = v20;
    do
    {
      if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
        goto LABEL_93;
      v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
      v21 += 2;
    }
    while (2 * v20 != v21);
    v25 = 0;
    do
    {
      v26 = *((_BYTE *)__dst + v25) & 0x7F;
      if (v26 >= 0x40)
        goto LABEL_93;
      v22 &= ~(1 << v26);
      v25 += 2;
    }
    while (2 * v20 != v25);
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
    v27.i16[0] = vaddlv_u8(v27);
    v28 = v27.i32[0];
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.i32[0] + v28)
    {
      v30 = 0;
      if (v20 <= 1)
        v31 = 1;
      else
        v31 = v20;
      v32 = 2 * v31;
      while (1)
      {
        v33 = *((unsigned __int8 *)__dst + v30 + 1);
        if ((v33 & 0x7Fu) >= 0x40)
          goto LABEL_93;
        if (((v22 >> (v33 & 0x7F)) & 1) != 0)
          break;
        v30 += 2;
        if (v32 == v30)
          goto LABEL_36;
      }
      v34 = *((unsigned __int8 *)__dst + v30);
      if (v34 == v33)
        goto LABEL_34;
      v34 = (char)v34;
      if ((char)v34 == 63)
      {
        if (v33 != 31)
        {
          v36 = v33 & 0x1F | 0xD2800000;
          goto LABEL_31;
        }
      }
      else
      {
        v35 = (char)v33 == 31 || v34 == 31;
        if (!v35)
        {
          v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_31:
          v37 = *(_DWORD *)(v14 + 200);
          if (v37 + 4 > *(_DWORD *)(v14 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v14 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, (uint64_t)this);
            v37 = *(_DWORD *)(v14 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v14 + 56) + v37) = v36;
          *(_DWORD *)(v14 + 200) += 4;
          v23 = (char *)__dst;
          v24 = v90;
          v19 = 1;
LABEL_34:
          memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
          v20 = v90 - 1;
          goto LABEL_35;
        }
      }
      v36 = (char)v33 | (32 * v34) | 0x91000000;
      goto LABEL_31;
    }
    v38 = *((_BYTE *)__dst + 1);
    v83 = *(_BYTE *)__dst;
    JSC::MacroAssemblerARM64::swap(v14, *(char *)__dst, v38, a4, a5, a6, a7, (uint64_t)this);
    memmove(__dst, (char *)__dst + 2, 2 * v90 - 2);
    v39 = v90 - 1;
    v35 = v90 == 1;
    v90 = v39;
    v40 = (unsigned __int8 *)__dst;
    __src = (char *)__dst + 2 * v39;
    if (v35)
    {
      v41 = 0;
      v42 = 0;
      v84 = 0;
      a2 = (char *)__dst + 2 * v39;
    }
    else
    {
      v44 = 2 * v39;
      v45 = __dst;
      while (*v45 != v38)
      {
        v45 += 2;
        v44 -= 2;
        if (!v44)
          goto LABEL_46;
      }
      *v45 = v83;
LABEL_46:
      v84 = 0;
      v46 = v40;
      a2 = __src;
      v47 = __src;
      do
      {
        if (*v40 == v40[1])
        {
          v48 = v40;
          if (v47 != (char *)__dst + 2 * v90)
          {
            if (v40 == (unsigned __int8 *)a2)
            {
              v48 = (unsigned __int8 *)v47;
            }
            else
            {
              v81 = v46 - (unsigned __int8 *)a2;
              v82 = v47;
              memmove(v47, a2, v46 - (unsigned __int8 *)a2);
              v48 = (unsigned __int8 *)&v82[v81];
            }
          }
          a2 = (char *)(v40 + 2);
          ++v84;
          v47 = (char *)v48;
        }
        v40 += 2;
        v46 += 2;
      }
      while (v40 < (unsigned __int8 *)__src);
      v40 = (unsigned __int8 *)__dst;
      v41 = v90;
      v42 = v90;
      __src = v47;
    }
    v43 = (char *)&v40[2 * v41];
    if (a2 != v43)
    {
      memmove(__src, a2, v43 - a2);
      v42 = v90;
    }
    v20 = v42 - v84;
    v19 = 1;
LABEL_35:
    v90 = v20;
LABEL_36:
    ;
  }
  while ((_DWORD)v20);
  v49 = __dst;
  if (&v91 != __dst && __dst)
  {
    __dst = 0;
    v89 = 0;
    WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, (uint64_t)this);
  }
LABEL_57:
  if ((_DWORD)a7 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v14, (uint64_t)this, 0, a4, a5, a6, a7, (uint64_t)this);
  else
    JSC::MacroAssemblerARM64::load64(v14, (a7 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, (uint64_t)this);
  JSC::DFG::SpeculativeJIT::appendCall(v14, a5, v50, v51, v52, v53, v54, v55, a1);
  __dst = (void *)2;
  v93 = 0;
  v19 = *(_QWORD *)(v14 + 3960);
  v20 = *(_QWORD *)(*(_QWORD *)(v14 + 3976) + 8);
  if ((v20 & 1) != 0)
    goto LABEL_94;
  while (2)
  {
    v92 = v20;
    v19 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v19, &v92, (uint64_t *)&__dst, &v93, a5, a6, a7, (uint64_t)this);
    if ((v92 & 1) != 0 && (v92 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v92 & 0xFFFFFFFF8, v56, v57, v58, a5, a6, a7, (uint64_t)this);
    if ((v19 & 1) != 0)
    {
      v20 = 0;
      if (a4)
      {
        v59 = 16 * a4;
        v60 = (char *)(v13 + 2);
        while (1)
        {
          v62 = *v60;
          v60 += 16;
          v61 = v62;
          if ((v62 & 0x40) != 0)
            break;
          v20 |= 1 << v61;
          v59 -= 16;
          if (!v59)
            goto LABEL_66;
        }
LABEL_93:
        __break(1u);
LABEL_94:
        v76 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
        if ((v20 & 2) != 0
          || ((v77 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v77 != 0x3FFFFFFF)
            ? (v78 = (_DWORD)v77 == -1)
            : (v78 = 1),
              v78))
        {
          v79 = 2;
        }
        else if (v77 >> 28)
        {
          v80 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v80 = v76;
          *(_DWORD *)(v80 + 8) = v77;
          v79 = 1;
          v76 = v80;
        }
        else
        {
          v79 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
          v76 = v77 << 36;
        }
        v20 = v76 | v79;
        continue;
      }
LABEL_66:
      if ((v11 & 0x40) != 0)
        goto LABEL_93;
      LOBYTE(v63) = 1;
      v64 = v20 | (1 << v11);
      if ((v64 & 2) != 0)
      {
        v65 = (unsigned __int16)~(_WORD)v64 & 0xFFFE;
        if (v65)
        {
          v63 = __clz(__rbit64(v65));
          if (v63 != 1)
          {
            if (v63 == 31)
            {
              v68 = (unsigned int *)(v14 + 200);
              v67 = *(_DWORD *)(v14 + 200);
              v69 = (JSC::AssemblerBuffer *)(v14 + 56);
              v70 = v67 + 4;
              v71 = *(_DWORD *)(v14 + 192);
              v66 = -1862270913;
            }
            else
            {
              v66 = v63 | 0xAA0103E0;
              v68 = (unsigned int *)(v14 + 200);
              v67 = *(_DWORD *)(v14 + 200);
              v69 = (JSC::AssemblerBuffer *)(v14 + 56);
              v70 = v67 + 4;
              v71 = *(_DWORD *)(v14 + 192);
            }
            if (v70 > v71)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v69, (uint64_t)v56, v57, v58, a5, a6, a7, (uint64_t)this);
              v67 = *v68;
            }
            *(_DWORD *)(*(_QWORD *)v69 + v67) = v66;
            *v68 += 4;
          }
        }
        else
        {
          LOBYTE(v63) = -1;
        }
      }
    }
    else
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v14, 1, v57, v58, a5, a6, a7, (uint64_t)this);
      LOBYTE(v63) = 0;
    }
    break;
  }
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v56, v57, v58, a5, a6, a7, (uint64_t)this);
  if ((_BYTE)v11)
  {
    if (v11 == 31)
      v72 = -1862270945;
    else
      v72 = v11 & 0x1F | 0xAA0003E0;
    v74 = (unsigned int *)(v14 + 200);
    v73 = *(_DWORD *)(v14 + 200);
    if (v73 + 4 > *(_DWORD *)(v14 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v14 + 56), (uint64_t)v56, v57, v58, a5, a6, a7, (uint64_t)this);
      v73 = *v74;
    }
    *(_DWORD *)(*(_QWORD *)(v14 + 56) + v73) = v72;
    *v74 += 4;
  }
  v20 = a4;
  if ((_DWORD)a4)
  {
    v11 = a4 - 1;
    v13 -= 16;
    v75 = 16 * a4;
    while (v11 < a4)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(v14, v13 + v75, v57, v58, a5, a6, a7, (uint64_t)this);
      v75 -= 16;
      if (!v75)
        goto LABEL_85;
    }
    goto LABEL_93;
  }
LABEL_85:
  *v86 = 0;
  if ((_DWORD)v19)
    JSC::DFG::SpeculativeJIT::exceptionCheck(v14, (char)v63, v57, v58, a5, a6, a7, (uint64_t)this);
}

void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::addLinkTask<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(JSC::DFG::Node *,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = WTF::fastMalloc((WTF *)0x20);
  v5 = v4;
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3573608;
  *(_QWORD *)(v4 + 16) = *a2;
  v6 = (unsigned int *)a2[1];
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  *(_QWORD *)(v4 + 24) = v6;
  v8 = *(unsigned int *)(a1 + 244);
  if ((_DWORD)v8 != *(_DWORD *)(a1 + 240))
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
LABEL_14:
    *v9 = v5;
    *(_DWORD *)(a1 + 244) = v8 + 1;
    return;
  }
  v10 = v8 + (v8 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v8 + 1)
    v12 = v8 + 1;
  else
    v12 = v11;
  if (!(v12 >> 29))
  {
    v13 = *(const void **)(a1 + 232);
    v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
    *(_DWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a1 + 232) = v14;
    memcpy(v14, v13, 8 * v8);
    if (v13)
    {
      if (*(const void **)(a1 + 232) == v13)
      {
        *(_QWORD *)(a1 + 232) = 0;
        *(_DWORD *)(a1 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v13, v15, v16, v17, v18, v19, v20, v21);
    }
    v8 = *(unsigned int *)(a1 + 244);
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 232) + 8 * v8);
    goto LABEL_14;
  }
  __break(0xC471u);
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(JSC::DFG::Node *,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(JSC::DFG::Node *,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;

  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v12 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v12 && v12 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITNegGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long)>(JSC::DFG::Node *,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JITUnaryMathIC<JSC::JITNegGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 16), (int *)(*(_QWORD *)(a1 + 24) + 8), a2);
}

void JSC::JITMathIC<JSC::JITMulGenerator,JSC::BinaryArithProfile>::generateInline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v12;
  int v13;
  int i;
  unsigned __int16 *v15;
  int Inline;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int j;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  WTF *v37;
  unsigned int v39;
  int v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  unint64_t *v46;
  int *v47;
  WTF *v48;
  uint64_t v49;
  _BYTE v50[28];
  int v51;
  unint64_t v52;

  v12 = (JSC::AssemblerBuffer *)(a2 + 56);
  v13 = *(_DWORD *)(a2 + 200);
  for (i = *(_DWORD *)(a2 + 52); v13 < i; i = *(_DWORD *)(a2 + 52))
  {
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
      v13 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
    v13 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v13;
  }
  *(_DWORD *)(a2 + 208) = 0;
  *(_DWORD *)a3 = v13;
  v15 = *(unsigned __int16 **)a1;
  if (*(_QWORD *)a1 && (*v15 & 0x1F80) == 0)
  {
    *(_BYTE *)(a2 + 328) = 1;
    if (v13 < i)
    {
      do
      {
        if ((v13 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
          v13 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = -721215457;
        v13 = *(_DWORD *)(a2 + 200) + 4;
        *(_DWORD *)(a2 + 200) = v13;
      }
      while (v13 < *(_DWORD *)(a2 + 52));
    }
    v39 = v13;
    if ((v13 + 4) > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
      v39 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = 335544320;
    v40 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v40;
    v41 = 0xFF000F4500000000;
    if (!*(_BYTE *)(a2 + 328))
      v41 = 0xFF000F4100000000;
    *(_BYTE *)(a2 + 328) = 0;
    v51 = v13;
    v52 = v41;
    if (v13 != -1)
    {
      v42 = (_QWORD *)(a3 + 24);
      v43 = *(unsigned int *)(a3 + 36);
      if ((_DWORD)v43 == *(_DWORD *)(a3 + 32))
      {
        v44 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, (void *)(v43 + 1), (unint64_t)&v51, (uint64_t)v15, a5, a6, a7, a8);
        v45 = (_DWORD *)(*(_QWORD *)(a3 + 24) + 12 * *(unsigned int *)(a3 + 36));
        *v45 = *(_DWORD *)v44;
        v46 = (unint64_t *)(v45 + 1);
        v41 = *(_QWORD *)(v44 + 4);
      }
      else
      {
        v47 = (int *)(*v42 + 12 * v43);
        *v47 = v13;
        v46 = (unint64_t *)(v47 + 1);
      }
      *v46 = v41;
      ++*(_DWORD *)(a3 + 36);
      v40 = *(_DWORD *)(a2 + 200);
    }
    for (*(_BYTE *)(a3 + 64) = 1; v40 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v40)
    {
      if ((v40 + 4) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, (uint64_t)v15, a5, a6, a7, a8);
        v40 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = -721215457;
      v40 = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
    *(_DWORD *)(a3 + 4) = v40;
    *(_BYTE *)(a1 + 56) = 1;
  }
  else
  {
    Inline = JSC::JITMulGenerator::generateInline(a1 + 57, a2, a3, v15, a5, a6, a7, a8);
    if (Inline)
    {
      if (Inline == 1)
      {
        v48 = (WTF *)v50;
        v49 = 2;
        if (!JSC::JITMulGenerator::generateFastPath(a1 + 57, a2, (uint64_t)&v48, a3 + 24, *(_QWORD *)a1, a4, v22, v23))goto LABEL_17;
        for (j = *(_DWORD *)(a2 + 200); j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
        {
          if ((j + 4) > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)v26, v27, v28, v29, v30, v31, v32);
            j = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
          j = *(_DWORD *)(a2 + 200) + 4;
        }
        *(_DWORD *)(a2 + 208) = 0;
        *(_DWORD *)(a3 + 4) = j;
        *(_BYTE *)(a3 + 64) = 0;
        if (HIDWORD(v49))
        {
          v34 = 0;
          v35 = 0;
          v36 = 12 * HIDWORD(v49);
          while (v35 < HIDWORD(v49))
          {
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v48 + v34), a2, v27, v28, v29, v30, v31, v32);
            ++v35;
            v34 += 12;
            if (v36 == v34)
              goto LABEL_17;
          }
          __break(0xC471u);
        }
        else
        {
LABEL_17:
          v37 = v48;
          if (v50 != (_BYTE *)v48 && v48 != 0)
          {
            v48 = 0;
            LODWORD(v49) = 0;
            WTF::fastFree((unint64_t)v37, v26, v27, v28, v29, v30, v31, v32);
          }
        }
      }
    }
    else
    {
      v24 = *(unsigned int *)(a2 + 200);
      v25 = v24 - v13;
      if (v25 <= 3)
      {
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::emitNops((_DWORD *)a2, 4 - v25, v18, v19, v20, v21, v22, v23);
        LODWORD(v24) = *(_DWORD *)(a2 + 200);
      }
      for (*(_BYTE *)(a3 + 64) = 1; (int)v24 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v24)
      {
        if ((v24 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v12, v17, v18, v19, v20, v21, v22, v23);
          LODWORD(v24) = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = -721215457;
        LODWORD(v24) = *(_DWORD *)(a2 + 200) + 4;
      }
      *(_DWORD *)(a2 + 208) = 0;
      *(_DWORD *)(a3 + 4) = v24;
    }
  }
}

uint64_t WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v14;

  *(_QWORD *)a1 = &off_1E3573630;
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v14 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v14 && v14 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;

  *(_QWORD *)this = &off_1E3573630;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1},void>::call(uint64_t a1, uint64_t a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int i;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::ARM64LogicalImmediate *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int j;
  unsigned int v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t *v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  const void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  uint64_t *v62;
  int v63;
  unint64_t v64;
  unsigned int v66;
  uint64_t v67;
  char v68;
  __int16 v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(unsigned int *)(v10 + 44);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 0;
    while (v13 < *(unsigned int *)(v10 + 44))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(v10 + 32) + v12), v9, (uint64_t)a3, a4, a5, a6, a7, a8);
      ++v13;
      v12 += 12;
      if (v11 == v13)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_70:
    JUMPOUT(0x197C7FD9CLL);
  }
LABEL_5:
  for (i = *(_DWORD *)(v9 + 200); i < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      i = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + i) = -721215457;
    i = *(_DWORD *)(v9 + 200) + 4;
  }
  *(_DWORD *)(v9 + 208) = 0;
  v15 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v15 + 16) = i;
  v16 = *(unsigned __int8 *)(a1 + 40);
  v17 = *(unsigned __int8 *)(a1 + 41);
  v67 = *(_QWORD *)(a1 + 42);
  if ((v67 & 0xFF00) == 0x100 && *(int *)((char *)&v67 + 2) >= 1)
  {
    v60 = *(unsigned __int8 *)(a1 + 52);
    v63 = *(unsigned __int16 *)((*(_QWORD *)(a1 + 56) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v63 == 355 || v63 == 348)
    {
      v62 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v62 = *(uint64_t **)((*(_QWORD *)(a1 + 56) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v16 = v60;
  }
  else
  {
    v67 = *(_QWORD *)(a1 + 64);
    if ((v67 & 0xFF00) != 0x100 || *(int *)((char *)&v67 + 2) < 1)
      goto LABEL_10;
    v60 = *(unsigned __int8 *)(a1 + 52);
    v61 = *(unsigned __int16 *)((*(_QWORD *)(a1 + 80) & 0xFF00FFFFFFFFFFFFLL) + 0x12);
    if (v61 == 355 || v61 == 348)
    {
      v62 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
      {
        JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
        LODWORD(qword_1EE342DB8) = 0;
      }
    }
    else
    {
      v62 = *(uint64_t **)((*(_QWORD *)(a1 + 80) & 0xFF00FFFFFFFFFFFFLL) + 0x48);
    }
    v17 = v60;
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, *v62, (char)v60, a4, a5, a6, a7, a8);
  v15 = *(_QWORD *)(a1 + 32);
LABEL_10:
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(unsigned int *)(a1 + 28);
  if (*(_BYTE *)(v15 + 72))
  {
    v56 = *(unsigned __int8 *)(a1 + 52);
    v57 = *(_QWORD *)(a1 + 88);
    v58 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, *(JSC::DFG::JITCompiler **)(a1 + 96), a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITAddGenerator> *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr>((int *)&v67, (unsigned __int8 *)v9, v18, v19, v57, v56, v58, v59, v16, v17, *(JSC::ARM64LogicalImmediate **)(a1 + 104));
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 112);
    v21 = *(unsigned __int8 *)(a1 + 52);
    v22 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v9, *(JSC::DFG::JITCompiler **)(a1 + 96), a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v67, (unsigned __int8 *)v9, v18, v19, v20, v21, v22, v23, v16, v17);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 20) = v67;
  for (j = *(_DWORD *)(v9 + 200); (signed int)j < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = j)
  {
    if (j + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v24, v25, v26, v27, v28, v29, v30);
      j = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + j) = -721215457;
    j = *(_DWORD *)(v9 + 200) + 4;
  }
  v32 = j;
  if (j + 4 > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), v24, v25, v26, v27, v28, v29, v30);
    v32 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v32) = 335544320;
  *(_DWORD *)(v9 + 200) += 4;
  if (*(_BYTE *)(v9 + 328))
    v33 = 69;
  else
    v33 = 65;
  v67 = j;
  v68 = v33;
  v69 = 15;
  v70 = -1;
  v66 = *(_DWORD *)(a1 + 120);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v67, &v66, v9, v26, v27, v28, v29, v30);
  v34 = *(_QWORD *)(a1 + 104);
  v35 = *(_QWORD *)(a1 + 32);
  if (v35)
  {
    do
      v36 = __ldaxr((unsigned int *)v35);
    while (__stlxr(v36 + 1, (unsigned int *)v35));
  }
  v37 = WTF::fastMalloc((WTF *)0x20);
  v45 = v37;
  *(_DWORD *)(v37 + 8) = 1;
  *(_QWORD *)v37 = &off_1E3573658;
  *(_QWORD *)(v37 + 16) = v34;
  if (v35)
  {
    do
      v46 = __ldaxr((unsigned int *)v35);
    while (__stlxr(v46 + 1, (unsigned int *)v35));
  }
  *(_QWORD *)(v37 + 24) = v35;
  v47 = *(unsigned int *)(v9 + 244);
  if ((_DWORD)v47 == *(_DWORD *)(v9 + 240))
  {
    v51 = v47 + (v47 >> 2);
    if (v51 >= 0x10)
      v52 = v51 + 1;
    else
      v52 = 16;
    if (v52 <= v47 + 1)
      v53 = v47 + 1;
    else
      v53 = v52;
    if (v53 >> 29)
    {
      __break(0xC471u);
      goto LABEL_70;
    }
    v54 = *(const void **)(v9 + 232);
    v55 = (void *)WTF::fastMalloc((WTF *)(8 * v53));
    *(_DWORD *)(v9 + 240) = v53;
    *(_QWORD *)(v9 + 232) = v55;
    memcpy(v55, v54, 8 * v47);
    if (v54)
    {
      if (*(const void **)(v9 + 232) == v54)
      {
        *(_QWORD *)(v9 + 232) = 0;
        *(_DWORD *)(v9 + 240) = 0;
      }
      WTF::fastFree((unint64_t)v54, v38, v39, v40, v41, v42, v43, v44);
    }
    v47 = *(unsigned int *)(v9 + 244);
    v48 = (uint64_t *)(*(_QWORD *)(v9 + 232) + 8 * v47);
  }
  else
  {
    v48 = (uint64_t *)(*(_QWORD *)(v9 + 232) + 8 * v47);
  }
  *v48 = v45;
  *(_DWORD *)(v9 + 244) = v47 + 1;
  if (v35)
  {
    do
    {
      v49 = __ldaxr((unsigned int *)v35);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, (unsigned int *)v35));
    if (!v50)
    {
      atomic_store(1u, (unsigned int *)v35);
      v64 = *(_QWORD *)(v35 + 32);
      if (v35 + 48 != v64 && v64 != 0)
      {
        *(_QWORD *)(v35 + 32) = 0;
        *(_DWORD *)(v35 + 40) = 0;
        WTF::fastFree(v64, v38, v39, v40, v41, v42, v43, v44);
      }
      WTF::fastFree(v35, v38, v39, v40, v41, v42, v43, v44);
    }
  }
}

uint64_t WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v13 && v13 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return a1;
}

void WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::~SharedTaskFunctor(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;

  v9 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v12 = *(_QWORD *)(v9 + 32);
      if (v9 + 48 != v12 && v12 != 0)
      {
        *(_QWORD *)(v9 + 32) = 0;
        *(_DWORD *)(v9 + 40) = 0;
        WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
      }
      WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

_QWORD *WTF::SharedTaskFunctor<void ()(JSC::LinkBuffer &),void JSC::DFG::SpeculativeJIT::compileMathIC<JSC::JITMulGenerator,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long)>(JSC::DFG::Node *,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,JSC::JITBinaryMathIC<JSC::JITMulGenerator> *),JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long))::{lambda(void)#1}::operator() const(void)::{lambda(JSC::LinkBuffer &)#1}>::run(uint64_t a1, _QWORD *a2)
{
  return JSC::JITMathIC<JSC::JITAddGenerator,JSC::BinaryArithProfile>::finalizeInlineCode(*(_QWORD **)(a1 + 16), (int *)(*(_QWORD *)(a1 + 24) + 8), a2);
}

unsigned __int8 **WTF::Vector<std::pair<JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::FPRegisterID>,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::FPRegisterID,2u>(std::array<JSC::ARM64Registers::FPRegisterID,2u>,std::array<JSC::ARM64Registers::FPRegisterID,2u>)::{lambda(JSC::ARM64Registers::FPRegisterID const&)#1}>(unsigned __int8 **result)
{
  unsigned __int8 **v1;
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  unsigned __int8 *v11;
  uint64_t v12;

  v1 = result;
  v2 = *result;
  v3 = *((unsigned int *)result + 3);
  v4 = &(*result)[2 * v3];
  if ((_DWORD)v3)
  {
    v6 = 0;
    v8 = *result;
    v7 = &(*result)[2 * v3];
    v9 = v7;
    do
    {
      if (*v2 == v2[1])
      {
        v10 = (char *)v2;
        if (v9 != &(*v1)[2 * *((unsigned int *)v1 + 3)])
        {
          if (v2 == v7)
          {
            v10 = (char *)v9;
          }
          else
          {
            v12 = v8 - v7;
            result = (unsigned __int8 **)memmove(v9, v7, v8 - v7);
            v10 = (char *)&v9[v12];
          }
        }
        v7 = v2 + 2;
        ++v6;
        v9 = (unsigned __int8 *)v10;
      }
      v2 += 2;
      v8 += 2;
    }
    while (v2 < v4);
    v2 = *v1;
    v5 = *((unsigned int *)v1 + 3);
    LODWORD(v3) = *((_DWORD *)v1 + 3);
    v4 = v9;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = &(*result)[2 * v3];
  }
  v11 = &v2[2 * v5];
  if (v7 != v11)
  {
    result = (unsigned __int8 **)memmove(v4, v7, v11 - v7);
    LODWORD(v3) = *((_DWORD *)v1 + 3);
  }
  *((_DWORD *)v1 + 3) = v3 - v6;
  return result;
}

uint64_t JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateCellOperand,JSC::DFG::SpeculateCellOperand>(uint64_t a1, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  unint64_t v21;
  unint64_t v22;
  int v24;
  int v25;
  int v26;

  v8 = this;
  *(_QWORD *)a1 = this;
  *(_BYTE *)(a1 + 8) = -1;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ~*(_DWORD *)((v9 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v11 = *((unsigned int *)v8 + 1001);
  if (v10 >= v11)
    goto LABEL_27;
  v14 = *((_QWORD *)v8 + 499);
  v15 = *(_DWORD *)(v14 + 24 * (int)v10 + 8);
  if (v15 == 1)
  {
    v16 = *(unsigned __int8 *)(a3 + 16);
    if (v16 == 255)
    {
      v17 = *(_QWORD *)a3;
LABEL_5:
      LOBYTE(v16) = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v17, v9, a3, a4, a5, a6, a7, a8);
      *(_BYTE *)(a3 + 16) = v16;
      goto LABEL_6;
    }
    goto LABEL_6;
  }
  v21 = *(_QWORD *)(a4 + 8) & 0xFF00FFFFFFFFFFFFLL;
  v22 = ~*(_DWORD *)(v21 + 0x30);
  if (v22 >= v11)
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x197C80140);
  }
  if (*(_DWORD *)(v14 + 24 * (int)v22 + 8) == 1)
  {
    v16 = *(unsigned __int8 *)(a4 + 16);
    if (v16 == 255)
    {
      LOBYTE(v16) = JSC::DFG::SpeculativeJIT::fillSpeculateCell(*(_QWORD *)a4, *(_QWORD *)(a4 + 8), a3, a4, a5, a6, a7, a8);
      *(_BYTE *)(a4 + 16) = v16;
    }
    goto LABEL_6;
  }
  if (v15 != 2 || (v9 & 0xFF00FFFFFFFFFFFFLL) != v21)
    goto LABEL_19;
  v24 = *(unsigned __int8 *)(a3 + 16);
  if (v24 == 255)
  {
    LOBYTE(v24) = JSC::DFG::SpeculativeJIT::fillSpeculateCell(*(_QWORD *)a3, v9, a3, a4, a5, a6, a7, a8);
    *(_BYTE *)(a3 + 16) = v24;
  }
  v25 = *(unsigned __int8 *)(a4 + 16);
  if (v25 == 255)
  {
    LOBYTE(v25) = JSC::DFG::SpeculativeJIT::fillSpeculateCell(*(_QWORD *)a4, *(_QWORD *)(a4 + 8), a3, a4, a5, a6, a7, a8);
    *(_BYTE *)(a4 + 16) = v25;
  }
  v26 = v24;
  v8 = *(JSC::DFG::SpeculativeJIT **)a1;
  if (v26 != v25)
  {
LABEL_19:
    LOBYTE(v16) = JSC::DFG::SpeculativeJIT::allocate(v8, v9, a3, a4, a5, a6, a7, a8);
    goto LABEL_10;
  }
  v16 = *(unsigned __int8 *)(a3 + 16);
  if (v16 == 255)
  {
    v17 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
    goto LABEL_5;
  }
LABEL_6:
  if ((char)v16 > 15)
    v18 = -1;
  else
    v18 = v16;
  ++*((_DWORD *)v8 + 3 * v18 + 1196);
LABEL_10:
  *(_BYTE *)(a1 + 8) = v16;
  return a1;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35736B0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35736B0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  char v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  JSC::AssemblerBuffer *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void *__dst;
  int v104;
  unsigned int v105;
  _WORD v106[4];
  unint64_t v107;
  unsigned int *v108;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_136;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = *(unsigned __int8 *)(a1 + 177);
  __dst = v106;
  v104 = 2;
  if (v17 == 1)
  {
    if (v18 == 2)
      goto LABEL_69;
    v19 = 0;
  }
  else
  {
    v106[0] = v17 | 0x100;
    v19 = 1;
    v105 = 1;
    if (v18 == 2)
      goto LABEL_15;
  }
  v106[v19++] = v18 | 0x200;
  v105 = v19;
  do
  {
LABEL_15:
    v20 = 0;
    v21 = 0;
    v22 = (char *)__dst;
    v23 = v19;
    do
    {
      if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
        goto LABEL_136;
      v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
      v20 += 2;
    }
    while (2 * v19 != v20);
    v24 = 0;
    do
    {
      v25 = *((_BYTE *)__dst + v24) & 0x7F;
      if (v25 >= 0x40)
        goto LABEL_136;
      v21 &= ~(1 << v25);
      v24 += 2;
    }
    while (2 * v19 != v24);
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.i32[0];
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.i32[0] + v27)
    {
      v29 = 0;
      if (v19 <= 1)
        v30 = 1;
      else
        v30 = v19;
      v31 = 2 * v30;
      while (1)
      {
        v32 = *((unsigned __int8 *)__dst + v29 + 1);
        if ((v32 & 0x7Fu) >= 0x40)
          goto LABEL_136;
        if (((v21 >> (v32 & 0x7F)) & 1) != 0)
          break;
        v29 += 2;
        if (v31 == v29)
          goto LABEL_65;
      }
      v33 = *((unsigned __int8 *)__dst + v29);
      if (v33 == v32)
      {
LABEL_63:
        memmove(&v22[v29], &v22[v29 + 2], 2 * v23 - v29 - 2);
        v19 = v105 - 1;
        goto LABEL_64;
      }
      v34 = (char)v33;
      if ((char)v33 == 63)
      {
        v35 = *(_DWORD *)(v8 + 200);
        v36 = *(_DWORD *)(v8 + 192);
        if ((char)v32 != 31)
        {
          v38 = v32 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v35 = *(_DWORD *)(v8 + 200);
        v36 = *(_DWORD *)(v8 + 192);
        v37 = v32 == 31 || v34 == 31;
        if (!v37)
        {
          v38 = v32 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v35 + 4 > v36)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v35 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v35) = v38;
          *(_DWORD *)(v8 + 200) += 4;
          v22 = (char *)__dst;
          v23 = v105;
          goto LABEL_63;
        }
      }
      v38 = (char)v32 | (32 * v34) | 0x91000000;
      goto LABEL_60;
    }
    v39 = *(_BYTE *)__dst;
    v40 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v40, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v105 - 2);
    v41 = v105 - 1;
    v37 = v105 == 1;
    v105 = v41;
    v42 = (unsigned __int8 *)__dst;
    v43 = (unsigned __int8 *)__dst + 2 * v41;
    if (v37)
    {
      v50 = 0;
      v51 = 0;
      v46 = 0;
      a2 = v43;
    }
    else
    {
      v44 = 2 * v41;
      v45 = __dst;
      while (*v45 != v40)
      {
        v45 += 2;
        v44 -= 2;
        if (!v44)
          goto LABEL_43;
      }
      *v45 = v39;
LABEL_43:
      v46 = 0;
      v47 = v42;
      a2 = v43;
      v48 = (char *)v43;
      do
      {
        if (*v42 == v42[1])
        {
          v49 = v42;
          if (v48 != (char *)__dst + 2 * v105)
          {
            v101 = (char *)v43;
            if (v42 == a2)
            {
              v49 = (unsigned __int8 *)v48;
            }
            else
            {
              v99 = v47 - a2;
              v100 = v48;
              memmove(v48, a2, v47 - a2);
              v49 = (unsigned __int8 *)&v100[v99];
            }
            v43 = (unsigned __int8 *)v101;
          }
          a2 = v42 + 2;
          ++v46;
          v48 = (char *)v49;
        }
        v42 += 2;
        v47 += 2;
      }
      while (v42 < v43);
      v42 = (unsigned __int8 *)__dst;
      v50 = v105;
      v51 = v105;
      v43 = (unsigned __int8 *)v48;
    }
    v52 = &v42[2 * v50];
    if (a2 != v52)
    {
      memmove(v43, a2, v52 - a2);
      v51 = v105;
    }
    v19 = v51 - v46;
LABEL_64:
    v105 = v19;
LABEL_65:
    ;
  }
  while (v19);
  v53 = __dst;
  if (v106 != __dst && __dst)
  {
    __dst = 0;
    v104 = 0;
    WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_69:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&v102);
  *(_QWORD *)(a1 + 92) = v102;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_74:
    v67 = 0;
    LOBYTE(v68) = 0;
    goto LABEL_75;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
    goto LABEL_74;
  }
  v76 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v108 = 0;
  v77 = *(_QWORD *)(v8 + 3960);
  v78 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v78 & 1) != 0)
  {
    v94 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
    if ((v78 & 2) != 0
      || ((v95 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v98 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v98 = v94;
      *(_DWORD *)(v98 + 8) = v95;
      v97 = 1;
      v94 = v98;
    }
    else
    {
      v97 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v78 = v94 | v97;
  }
  v107 = v78;
  v79 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v77, &v107, (uint64_t *)&__dst, &v108, v63, v64, v65, v66);
  if ((v107 & 1) != 0 && (v107 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v107 & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
  if ((v79 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
    LOBYTE(v68) = 0;
    v67 = 0;
    goto LABEL_97;
  }
  v80 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v80)
  {
    v81 = 0;
    v82 = 16 * v80;
    v83 = (char *)(*(_QWORD *)(a1 + 104) + 2);
    while (1)
    {
      v85 = *v83;
      v83 += 16;
      v84 = v85;
      if ((v85 & 0x40) != 0)
        goto LABEL_136;
      v81 |= 1 << v84;
      v82 -= 16;
      if (!v82)
        goto LABEL_106;
    }
  }
  v81 = 0;
LABEL_106:
  if ((v76 & 0x40) != 0)
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  v67 = 1;
  v86 = v81 | (1 << v76);
  LOBYTE(v68) = 1;
  if ((v86 & 2) != 0)
  {
    v87 = (unsigned __int16)~(_WORD)v86 & 0xFFFE;
    if (v87)
    {
      v68 = __clz(__rbit64(v87));
      if (v68 == 1)
      {
        v67 = 1;
      }
      else
      {
        if (v68 == 31)
        {
          v90 = (unsigned int *)(v8 + 200);
          v89 = *(_DWORD *)(v8 + 200);
          v91 = (JSC::AssemblerBuffer *)(v8 + 56);
          v92 = v89 + 4;
          v93 = *(_DWORD *)(v8 + 192);
          v88 = -1862270913;
        }
        else
        {
          v88 = v68 | 0xAA0103E0;
          v90 = (unsigned int *)(v8 + 200);
          v89 = *(_DWORD *)(v8 + 200);
          v91 = (JSC::AssemblerBuffer *)(v8 + 56);
          v92 = v89 + 4;
          v93 = *(_DWORD *)(v8 + 192);
        }
        if (v92 > v93)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v91, (uint64_t)v60, v61, v62, v63, v64, v65, v66);
          v89 = *v90;
        }
        *(_DWORD *)(*(_QWORD *)v91 + v89) = v88;
        *v90 += 4;
        v67 = 1;
      }
    }
    else
    {
      v67 = 1;
      LOBYTE(v68) = -1;
    }
  }
LABEL_97:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
LABEL_75:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_89:
    if (v67)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v68, v61, v62, v63, v64, v65, v66);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
    return;
  }
  v73 = *(_DWORD *)(a1 + 116);
  if (!v73)
  {
LABEL_88:
    *(_BYTE *)(v8 + 5768) = 0;
    goto LABEL_89;
  }
  v74 = v73 - 1;
  v75 = 16 * (v73 - 1);
  while (*(_DWORD *)(a1 + 116) > v74)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
    v75 -= 16;
    if (--v74 == -1)
      goto LABEL_88;
  }
LABEL_137:
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSRopeString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573710;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSRopeString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573710;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSRopeString *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSRopeString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  JSC::AssemblerBuffer *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int16 *v101;
  uint64_t v102;
  void *__dst;
  int v104;
  unsigned int v105;
  __int16 v106;
  unint64_t v107;
  unsigned int *v108;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_130;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = &v106;
  __dst = &v106;
  v104 = 1;
  if (v17 != 1)
  {
    v106 = v17 | 0x100;
    v105 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_130;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_130;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v100 = v19;
      v101 = v18;
      v99 = v15;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v105 - 2);
      v40 = v105 - 1;
      v35 = v105 == 1;
      v105 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v105)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v105;
        v44 = v105;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v105;
      }
      v20 = v44 - v45;
      v15 = v99;
      v18 = v101;
      v19 = v100;
LABEL_40:
      v105 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v104 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_130;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v105 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v105;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&v102);
  *(_QWORD *)(a1 + 92) = v102;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
LABEL_67:
    v67 = 0;
    LOBYTE(v68) = 0;
    goto LABEL_68;
  }
  v76 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v108 = 0;
  v77 = *(_QWORD *)(v8 + 3960);
  v78 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v78 & 1) != 0)
  {
    v94 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
    if ((v78 & 2) != 0
      || ((v95 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v98 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v98 = v94;
      *(_DWORD *)(v98 + 8) = v95;
      v97 = 1;
      v94 = v98;
    }
    else
    {
      v97 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v78 = v94 | v97;
  }
  v107 = v78;
  v79 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v77, &v107, (uint64_t *)&__dst, &v108, v63, v64, v65, v66);
  if ((v107 & 1) != 0 && (v107 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v107 & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
  if ((v79 & 1) != 0)
  {
    v80 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v80)
    {
      v81 = 0;
      v82 = 16 * v80;
      v83 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v85 = *v83;
        v83 += 16;
        v84 = v85;
        if ((v85 & 0x40) != 0)
          break;
        v81 |= 1 << v84;
        v82 -= 16;
        if (!v82)
          goto LABEL_99;
      }
    }
    else
    {
      v81 = 0;
LABEL_99:
      if ((v76 & 0x40) == 0)
      {
        v67 = 1;
        v86 = v81 | (1 << v76);
        if ((v86 & 2) != 0)
        {
          v87 = (unsigned __int16)~(_WORD)v86 & 0xFFFE;
          if (v87)
          {
            v68 = __clz(__rbit64(v87));
            if (v68 == 1)
            {
              v67 = 1;
            }
            else
            {
              if (v68 == 31)
              {
                v90 = (unsigned int *)(v8 + 200);
                v89 = *(_DWORD *)(v8 + 200);
                v91 = (JSC::AssemblerBuffer *)(v8 + 56);
                v92 = v89 + 4;
                v93 = *(_DWORD *)(v8 + 192);
                v88 = -1862270913;
              }
              else
              {
                v88 = v68 | 0xAA0103E0;
                v90 = (unsigned int *)(v8 + 200);
                v89 = *(_DWORD *)(v8 + 200);
                v91 = (JSC::AssemblerBuffer *)(v8 + 56);
                v92 = v89 + 4;
                v93 = *(_DWORD *)(v8 + 192);
              }
              if (v92 > v93)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v91, (uint64_t)v60, v61, v62, v63, v64, v65, v66);
                v89 = *v90;
              }
              *(_DWORD *)(*(_QWORD *)v91 + v89) = v88;
              *v90 += 4;
              v67 = 1;
            }
          }
          else
          {
            v67 = 1;
            LOBYTE(v68) = -1;
          }
        }
        else
        {
          LOBYTE(v68) = 1;
        }
        goto LABEL_90;
      }
    }
LABEL_130:
    __break(1u);
LABEL_131:
    __break(0xC471u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
  LOBYTE(v68) = 0;
  v67 = 0;
LABEL_90:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
LABEL_68:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_81;
      }
      goto LABEL_131;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v67)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573770;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573770;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint8x8_t v34;
  __int32 v35;
  uint8x8_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  char v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  _BYTE *v50;
  char *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned __int8 *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  __int16 v68;
  int64_t v69;
  char *v70;
  char *v71;
  void *__dst;
  int v73;
  unsigned int v74;
  _WORD v75[4];

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v19 = 0;
      v20 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v19, v13, v14, v15, v16, v17, v18);
        ++v20;
        v19 += 16;
      }
      while (v20 < *(unsigned int *)(a1 + 92));
    }
  }
  v21 = 2852127712;
  v22 = *(unsigned int *)(a1 + 136);
  v23 = *(_QWORD *)(a1 + 144);
  v24 = *(unsigned __int8 *)(a1 + 152);
  v25 = *(unsigned __int8 *)(a1 + 153);
  __dst = v75;
  v73 = 2;
  if (v24 == 1)
  {
    if (v25 == 2)
      goto LABEL_66;
    v26 = 0;
    goto LABEL_10;
  }
  v75[0] = v24 | 0x100;
  v26 = 1;
  v74 = 1;
  if (v25 != 2)
  {
LABEL_10:
    v75[v26++] = v25 | 0x200;
    v74 = v26;
  }
  v27 = 2432696320;
  do
  {
    v28 = 0;
    v29 = 0;
    v30 = (char *)__dst;
    v31 = v26;
    do
    {
      if ((*((_BYTE *)__dst + v28 + 1) & 0x40) != 0)
      {
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
      v29 |= 1 << *((_BYTE *)__dst + v28 + 1);
      v28 += 2;
    }
    while (2 * v26 != v28);
    v32 = 0;
    do
    {
      v33 = *((_BYTE *)__dst + v32) & 0x7F;
      if (v33 >= 0x40)
        goto LABEL_90;
      v29 &= ~(1 << v33);
      v32 += 2;
    }
    while (2 * v26 != v32);
    v34 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
    v34.i16[0] = vaddlv_u8(v34);
    v35 = v34.i32[0];
    v36 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v29));
    v36.i16[0] = vaddlv_u8(v36);
    if (v36.i32[0] + v35)
    {
      v8 = 0;
      if (v26 <= 1)
        v37 = 1;
      else
        v37 = v26;
      v38 = 2 * v37;
      while (1)
      {
        v39 = *((unsigned __int8 *)__dst + v8 + 1);
        if ((v39 & 0x7Fu) >= 0x40)
          goto LABEL_90;
        if (((v29 >> (v39 & 0x7F)) & 1) != 0)
          break;
        v8 += 2;
        if (v38 == v8)
          goto LABEL_62;
      }
      v40 = *((unsigned __int8 *)__dst + v8);
      if (v40 != v39)
      {
        v41 = (char)v40;
        if ((char)v40 == 63)
        {
          v42 = *(_DWORD *)(a2 + 200);
          v43 = *(_DWORD *)(a2 + 192);
          if ((char)v39 == 31)
            goto LABEL_56;
          LODWORD(v9) = v39 & 0x1F | 0xD2800000;
        }
        else
        {
          v42 = *(_DWORD *)(a2 + 200);
          v43 = *(_DWORD *)(a2 + 192);
          v44 = v39 == 31 || v41 == 31;
          if (!v44)
          {
            LODWORD(v9) = v39 & 0xFFE0FFFF | ((v41 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_57;
          }
LABEL_56:
          LODWORD(v9) = (char)v39 | (32 * v41) | 0x91000000;
        }
LABEL_57:
        if (v42 + 4 > v43)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
          v42 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v42) = (_DWORD)v9;
        *(_DWORD *)(a2 + 200) += 4;
        v30 = (char *)__dst;
        v31 = v74;
      }
      memmove(&v30[v8], &v30[v8 + 2], 2 * v31 - v8 - 2);
      v26 = v74 - 1;
      goto LABEL_61;
    }
    LODWORD(v9) = *(char *)__dst;
    v45 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, v9, v45, v14, v15, v16, v17, v18);
    memmove(__dst, (char *)__dst + 2, 2 * v74 - 2);
    v46 = v74 - 1;
    v44 = v74 == 1;
    v74 = v46;
    v47 = (unsigned __int8 *)__dst;
    v48 = (unsigned __int8 *)__dst + 2 * v46;
    if (v44)
    {
      v53 = 0;
      v54 = 0;
      LODWORD(v8) = 0;
      v12 = v48;
    }
    else
    {
      v49 = 2 * v46;
      v50 = __dst;
      while (*v50 != v45)
      {
        v50 += 2;
        v49 -= 2;
        if (!v49)
          goto LABEL_40;
      }
      *v50 = (_BYTE)v9;
LABEL_40:
      LODWORD(v8) = 0;
      v9 = v47;
      v12 = v48;
      v51 = (char *)v48;
      do
      {
        if (*v47 == v47[1])
        {
          v52 = v47;
          if (v51 != (char *)__dst + 2 * v74)
          {
            v71 = (char *)v48;
            if (v47 == v12)
            {
              v52 = (unsigned __int8 *)v51;
            }
            else
            {
              v69 = v9 - v12;
              v70 = v51;
              memmove(v51, v12, v9 - v12);
              v52 = (unsigned __int8 *)&v70[v69];
            }
            v48 = (unsigned __int8 *)v71;
          }
          v12 = v47 + 2;
          LODWORD(v8) = v8 + 1;
          v51 = (char *)v52;
        }
        v47 += 2;
        v9 += 2;
      }
      while (v47 < v48);
      v47 = (unsigned __int8 *)__dst;
      v53 = v74;
      v54 = v74;
      v48 = (unsigned __int8 *)v51;
    }
    v55 = &v47[2 * v53];
    if (v12 != v55)
    {
      memmove(v48, v12, v55 - v12);
      v54 = v74;
    }
    v26 = v54 - v8;
    v21 = 2852127712;
LABEL_61:
    v74 = v26;
LABEL_62:
    ;
  }
  while (v26);
  v56 = __dst;
  if (v75 != __dst && __dst)
  {
    __dst = 0;
    v73 = 0;
    WTF::fastFree((unint64_t)v56, v12, v13, v14, v15, v16, v17, v18);
  }
LABEL_66:
  if (v22 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v23, 0, v14, v15, v16, v17, v18);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v22 << 35) + 0x380000001ALL, 0, v14, v15, v16, v17, v18);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v57, v58, v59, v60, v61, v62, (int *)&__dst);
  *(_QWORD *)(a1 + 64) = __dst;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_71;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v13, v14, v15, v16, v17, v18);
LABEL_71:
    LODWORD(v8) = 0;
    LOBYTE(v23) = 0;
    goto LABEL_72;
  }
  v68 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 80), *(_BYTE *)(a1 + 74), v14, v15, v16, v17, v18);
  LOBYTE(v23) = v68;
  LODWORD(v8) = HIBYTE(v68);
LABEL_72:
  v63 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v63 == 31)
    {
      LODWORD(v9) = -1862270945;
    }
    else if (v63 == 255)
    {
      LODWORD(v9) = -1442774017;
    }
    else
    {
      LODWORD(v9) = v63 | 0xAA0003E0;
    }
    v21 = a2 + 200;
    v64 = *(_DWORD *)(a2 + 200);
    v27 = a2 + 56;
    if (v64 + 4 > *(_DWORD *)(a2 + 192))
    {
LABEL_91:
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v27, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
      v64 = *(_DWORD *)v21;
    }
    *(_DWORD *)(*(_QWORD *)v27 + v64) = (_DWORD)v9;
    *(_DWORD *)v21 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_85;
  v65 = *(_DWORD *)(a1 + 92);
  if (!v65)
  {
LABEL_84:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_85:
    if (!*(_BYTE *)(a1 + 73))
    {
      if ((_DWORD)v8)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v23, v13, v14, v15, v16, v17, v18);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v13, v14, v15, v16, v17, v18);
    return;
  }
  v66 = v65 - 1;
  v67 = 16 * (v65 - 1);
  while (*(_DWORD *)(a1 + 92) > v66)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v67, v13, v14, v15, v16, v17, v18);
    v67 -= 16;
    if (--v66 == -1)
      goto LABEL_84;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  v39 = 0;
  v40 = 2;
  v11 = *(_QWORD *)(a1 + 3960);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 3976) + 8);
  if ((v12 & 1) != 0)
  {
    v20 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v25 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v25 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else
    {
      if (v25 >> 28)
        goto LABEL_33;
      v34 = v20;
      v20 = v25 << 36;
    }
    goto LABEL_25;
  }
  while (1)
  {
    v38 = v12;
    v11 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v11, &v38, &v40, &v39, a5, a6, a7, a8);
    v20 = v11;
    if ((v38 & 1) != 0)
    {
      v11 = v38 & 0xFFFFFFFF8;
      if ((v38 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v11, v13, v14, v15, v16, v17, v18, v19);
    }
    if ((v20 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v14, v15, v16, v17, v18, v19);
      LODWORD(v21) = 0;
      v22 = 0;
      goto LABEL_5;
    }
    v24 = a2[3];
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 16 * v24;
      v27 = (char *)(*(_QWORD *)a2 + 2);
      while (1)
      {
        v29 = *v27;
        v27 += 16;
        v28 = v29;
        if ((v29 & 0x40) != 0)
          goto LABEL_32;
        v25 |= 1 << v28;
        v26 -= 16;
        if (!v26)
          goto LABEL_11;
      }
    }
    v25 = 0;
LABEL_11:
    v30 = a3;
    if ((a3 & 0x40) == 0)
      break;
LABEL_32:
    __break(1u);
LABEL_33:
    v37 = v11;
    v35 = v25;
    v36 = WTF::fastMalloc((WTF *)0x10);
    v11 = v37;
    *(_QWORD *)v36 = v20;
    *(_DWORD *)(v36 + 8) = v35;
    v34 = 1;
    v20 = v36;
LABEL_25:
    v12 = v20 | v34;
  }
  LODWORD(v21) = 1;
  v31 = v25 | (1 << v30);
  if ((v31 & 2) != 0)
  {
    v32 = (unsigned __int16)~(_WORD)v31 & 0xFFFE;
    if (v32)
    {
      v21 = __clz(__rbit64(v32));
      v22 = 1;
      JSC::MacroAssemblerARM64::move((_DWORD *)a1, 1, v21, v15, v16, v17, v18, v19);
    }
    else
    {
      v22 = 1;
      LODWORD(v21) = 255;
    }
  }
  else
  {
    v22 = 1;
  }
LABEL_5:
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  return v21 | (v22 << 8);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, char *a7, uint64_t *a8, char *a9, __int128 *a10)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  _BYTE *v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v49;
  WTF *v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v54;
  unsigned int v55;
  _BYTE v56[24];
  WTF *v57;
  unsigned int v58;
  unsigned int v59;
  _BYTE v60[24];
  WTF *v61;
  unsigned int v62;
  unsigned int v63;
  _BYTE v64[32];

  v17 = WTF::fastMalloc((WTF *)0xC0);
  v18 = *((unsigned int *)a2 + 3);
  v54 = v56;
  v55 = v18;
  if (v18 < 3)
  {
    v19 = v56;
  }
  else
  {
    if (v18 >= 0x15555556)
      goto LABEL_37;
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v18));
    v54 = v19;
    LODWORD(v18) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v18)
  {
    v20 = *a2;
    v21 = *a2 + 12 * v18;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = *a3;
  v52 = *a4;
  v23 = *a5;
  v24 = *a6;
  v25 = *a7;
  v26 = *a8;
  v27 = *a9;
  v51 = *a10;
  v28 = v55;
  v57 = (WTF *)v60;
  v58 = 2;
  v59 = v55;
  if (v55 < 3)
  {
    v29 = v60;
    if (!v55)
      goto LABEL_14;
  }
  else
  {
    if (v55 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C81FA8);
    }
    v29 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v55));
    v58 = 12 * v55 / 0xC;
    v57 = (WTF *)v29;
    v28 = v55;
  }
  v30 = v54;
  v31 = &v54[12 * v28];
  do
  {
    *(_DWORD *)v29 = *(_DWORD *)v30;
    *(_QWORD *)(v29 + 4) = *(_QWORD *)(v30 + 4);
    v30 += 12;
    v29 += 12;
  }
  while (v30 != v31);
LABEL_14:
  v32 = v59;
  v61 = (WTF *)v64;
  v62 = 2;
  v63 = v59;
  if (v59 < 3)
  {
    v37 = v64;
    if (!v59)
      goto LABEL_21;
LABEL_19:
    v38 = v57;
    v39 = (WTF *)((char *)v57 + 12 * v32);
    do
    {
      *(_DWORD *)v37 = *(_DWORD *)v38;
      *(_QWORD *)(v37 + 4) = *(_QWORD *)((char *)v38 + 4);
      v38 = (WTF *)((char *)v38 + 12);
      v37 += 12;
    }
    while (v38 != v39);
    goto LABEL_21;
  }
  if (v59 >= 0x15555556)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x197C81FA0);
  }
  v33 = v24;
  v34 = v27;
  v35 = v26;
  v36 = 12 * v59;
  v37 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v59));
  v62 = (v36 & 0xFFFFFFFC) / 0xC;
  v61 = (WTF *)v37;
  v32 = v59;
  v26 = v35;
  v27 = v34;
  v24 = v33;
  if (v59)
    goto LABEL_19;
LABEL_21:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v17, (uint64_t *)&v61, v22);
  v47 = v61;
  if (v64 != (_BYTE *)v61 && v61 != 0)
  {
    v61 = 0;
    v62 = 0;
    WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
  }
  *(_QWORD *)v17 = off_1E35737D0;
  *(_QWORD *)(v17 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v17 + 100) = v23;
  *(_BYTE *)(v17 + 101) = v24;
  *(_BYTE *)(v17 + 102) = v25;
  *(_QWORD *)(v17 + 104) = v17 + 120;
  v49 = v17 + 104;
  *(_QWORD *)(v17 + 112) = 2;
  if (!v23)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v22, 0, v49, v25, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v45, v46);
  v50 = v57;
  if (v60 != (_BYTE *)v57 && v57)
  {
    v57 = 0;
    v58 = 0;
    WTF::fastFree((unint64_t)v50, v40, v49, v42, v43, v44, v45, v46);
  }
  *(_QWORD *)v17 = &off_1E35737A0;
  *(_QWORD *)(v17 + 152) = v52;
  *(_QWORD *)(v17 + 160) = v26;
  *(_BYTE *)(v17 + 168) = v27;
  *(_OWORD *)(v17 + 176) = v51;
  *a1 = v17;
  if (v56 != v54)
  {
    if (v54)
      WTF::fastFree((unint64_t)v54, v40, v49, v42, v43, v44, v45, v46);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35737D0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35737D0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSScope *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int *v95;
  JSC::AssemblerBuffer *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int16 *v105;
  uint64_t v106;
  void *__dst;
  int v108;
  unsigned int v109;
  __int16 v110;
  unint64_t v111;
  unsigned int *v112;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_129;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(unsigned __int8 *)(a1 + 168);
  v17 = *(unsigned int *)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 184);
  v19 = &v110;
  __dst = &v110;
  v108 = 1;
  if (v16 != 1)
  {
    v110 = v16 | 0x100;
    v109 = 1;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_129;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_129;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v104 = v17;
      v105 = v19;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v109 - 2);
      v40 = v109 - 1;
      v35 = v109 == 1;
      v109 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v109)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v109;
        v44 = v109;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v109;
      }
      v20 = v44 - v45;
      v17 = v104;
      v19 = v105;
LABEL_40:
      v109 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v19 != __dst && __dst)
        {
          __dst = 0;
          v108 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_129;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v109 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v109;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | 0x91000000;
    goto LABEL_36;
  }
LABEL_62:
  if (v17 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v18, 2, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v17 << 35) + 0x380000001ALL, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v15, 0, v54, v55, v56, v57, v58);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v59, v60, v61, v62, v63, v64, (int *)&v106);
  v72 = 0;
  LOBYTE(v73) = 0;
  *(_QWORD *)(a1 + 92) = v106;
  if (!*(_BYTE *)(a1 + 101))
  {
    if (*(_BYTE *)(a1 + 100))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v66, v67, v68, v69, v70, v71);
      v72 = 0;
      LOBYTE(v73) = 0;
      goto LABEL_72;
    }
    v74 = *(_BYTE *)(a1 + 102);
    __dst = (void *)2;
    v112 = 0;
    v75 = *(_QWORD *)(v8 + 3960);
    v76 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
    if ((v76 & 1) != 0)
    {
      v99 = *(_QWORD *)(v76 & 0xFFFFFFFF8);
      if ((v76 & 2) != 0
        || ((v100 = *(unsigned int *)((v76 & 0xFFFFFFFF8) + 8), (_DWORD)v100 != 0x3FFFFFFF)
          ? (v101 = (_DWORD)v100 == -1)
          : (v101 = 1),
            v101))
      {
        v102 = 2;
      }
      else if (v100 >> 28)
      {
        v103 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v103 = v99;
        *(_DWORD *)(v103 + 8) = v100;
        v102 = 1;
        v99 = v103;
      }
      else
      {
        v102 = *(_QWORD *)(v76 & 0xFFFFFFFF8);
        v99 = v100 << 36;
      }
      v76 = v99 | v102;
    }
    v111 = v76;
    v77 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v75, &v111, (uint64_t *)&__dst, &v112, v68, v69, v70, v71);
    if ((v111 & 1) != 0 && (v111 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v111 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
    if ((v77 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v66, v67, v68, v69, v70, v71);
      LOBYTE(v73) = 0;
      v72 = 0;
LABEL_71:
      if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
        WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
      goto LABEL_72;
    }
    v85 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v85)
    {
      v86 = 0;
      v87 = 16 * v85;
      v88 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v90 = *v88;
        v88 += 16;
        v89 = v90;
        if ((v90 & 0x40) != 0)
          break;
        v86 |= 1 << v89;
        v87 -= 16;
        if (!v87)
          goto LABEL_96;
      }
    }
    else
    {
      v86 = 0;
LABEL_96:
      if ((v74 & 0x40) == 0)
      {
        v72 = 1;
        v91 = v86 | (1 << v74);
        if ((v91 & 2) != 0)
        {
          v92 = (unsigned __int16)~(_WORD)v91 & 0xFFFE;
          if (v92)
          {
            v73 = __clz(__rbit64(v92));
            if (v73 == 1)
            {
              v72 = 1;
            }
            else
            {
              if (v73 == 31)
              {
                v95 = (unsigned int *)(v8 + 200);
                v94 = *(_DWORD *)(v8 + 200);
                v96 = (JSC::AssemblerBuffer *)(v8 + 56);
                v97 = v94 + 4;
                v98 = *(_DWORD *)(v8 + 192);
                v93 = -1862270913;
              }
              else
              {
                v93 = v73 | 0xAA0103E0;
                v95 = (unsigned int *)(v8 + 200);
                v94 = *(_DWORD *)(v8 + 200);
                v96 = (JSC::AssemblerBuffer *)(v8 + 56);
                v97 = v94 + 4;
                v98 = *(_DWORD *)(v8 + 192);
              }
              if (v97 > v98)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v96, (uint64_t)v65, v66, v67, v68, v69, v70, v71);
                v94 = *v95;
              }
              *(_DWORD *)(*(_QWORD *)v96 + v94) = v93;
              *v95 += 4;
              v72 = 1;
            }
          }
          else
          {
            v72 = 1;
            LOBYTE(v73) = -1;
          }
        }
        else
        {
          LOBYTE(v73) = 1;
        }
        goto LABEL_71;
      }
    }
LABEL_129:
    __break(1u);
LABEL_130:
    __break(0xC471u);
    return;
  }
LABEL_72:
  v78 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v78 == 31)
    {
      v79 = -1862270945;
    }
    else if (v78 == 255)
    {
      v79 = -1442774017;
    }
    else
    {
      v79 = v78 | 0xAA0003E0;
    }
    v81 = (unsigned int *)(v8 + 200);
    v80 = *(_DWORD *)(v8 + 200);
    if (v80 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v65, v66, v67, v68, v69, v70, v71);
      v80 = *v81;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v80) = v79;
    *v81 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v82 = *(_DWORD *)(a1 + 116);
    if (v82)
    {
      v83 = v82 - 1;
      v84 = 16 * (v82 - 1);
      while (*(_DWORD *)(a1 + 116) > v83)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v84, v66, v67, v68, v69, v70, v71);
        v84 -= 16;
        if (--v83 == -1)
          goto LABEL_85;
      }
      goto LABEL_130;
    }
LABEL_85:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v72)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v73, v66, v67, v68, v69, v70, v71);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v66, v67, v68, v69, v70, v71);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSScope *,JSC::SymbolTable *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573830;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSScope *,JSC::SymbolTable *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573830;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSScope *,JSC::SymbolTable *,long long),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSScope *,JSC::SymbolTable *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 *v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  __int16 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  char v47;
  uint64_t v48;
  unsigned __int8 *v49;
  char *v50;
  uint64_t v51;
  unsigned int v52;
  char *v53;
  uint64_t v54;
  _BYTE *v55;
  unsigned __int8 *v56;
  char *v57;
  unsigned __int8 *v58;
  int64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int *v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char v105;
  char v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unsigned int v110;
  unsigned int *v111;
  JSC::AssemblerBuffer *v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int16 *v122;
  int v123;
  uint64_t v124;
  void *__dst;
  int v126;
  unsigned int v127;
  __int16 v128;
  unint64_t v129;
  unsigned int *v130;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_129;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = *(unsigned int *)(a1 + 184);
  v19 = *(_QWORD *)(a1 + 192);
  v20 = *(_QWORD *)(a1 + 200);
  v21 = &v128;
  __dst = &v128;
  v126 = 1;
  if (v17 != 2)
  {
    v128 = v17 | 0x200;
    v127 = 1;
    v22 = 1;
    while (1)
    {
      v23 = 0;
      v24 = 0;
      v25 = (char *)__dst;
      v26 = v22;
      do
      {
        if ((*((_BYTE *)__dst + v23 + 1) & 0x40) != 0)
          goto LABEL_129;
        v24 |= 1 << *((_BYTE *)__dst + v23 + 1);
        v23 += 2;
      }
      while (2 * v22 != v23);
      v27 = 0;
      do
      {
        v28 = *((_BYTE *)__dst + v27) & 0x7F;
        if (v28 >= 0x40)
          goto LABEL_129;
        v24 &= ~(1 << v28);
        v27 += 2;
      }
      while (2 * v22 != v27);
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
      v29.i16[0] = vaddlv_u8(v29);
      v30 = v29.i32[0];
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v24));
      v31.i16[0] = vaddlv_u8(v31);
      if (v31.i32[0] + v30)
        break;
      v121 = v20;
      v122 = v21;
      v120 = v19;
      v46 = *(_BYTE *)__dst;
      v47 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v47, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v127 - 2);
      v48 = v127 - 1;
      v43 = v127 == 1;
      v127 = v48;
      v49 = (unsigned __int8 *)__dst;
      v50 = (char *)__dst + 2 * v48;
      if (v43)
      {
        v51 = 0;
        v52 = 0;
        v123 = 0;
        a2 = (char *)__dst + 2 * v48;
      }
      else
      {
        v54 = 2 * v48;
        v55 = __dst;
        while (*v55 != v47)
        {
          v55 += 2;
          v54 -= 2;
          if (!v54)
            goto LABEL_51;
        }
        *v55 = v46;
LABEL_51:
        v123 = 0;
        v56 = v49;
        v57 = v50;
        a2 = v50;
        do
        {
          if (*v49 == v49[1])
          {
            v58 = v49;
            if (v57 != (char *)__dst + 2 * v127)
            {
              if (v49 == (unsigned __int8 *)a2)
              {
                v58 = (unsigned __int8 *)v57;
              }
              else
              {
                v59 = v56 - (unsigned __int8 *)a2;
                memmove(v57, a2, v56 - (unsigned __int8 *)a2);
                v58 = (unsigned __int8 *)&v57[v59];
              }
            }
            a2 = (char *)(v49 + 2);
            ++v123;
            v57 = (char *)v58;
          }
          v49 += 2;
          v56 += 2;
        }
        while (v49 < (unsigned __int8 *)v50);
        v49 = (unsigned __int8 *)__dst;
        v51 = v127;
        v52 = v127;
        v50 = v57;
      }
      v53 = (char *)&v49[2 * v51];
      if (a2 != v53)
      {
        memmove(v50, a2, v53 - a2);
        v52 = v127;
      }
      v22 = v52 - v123;
      v19 = v120;
      v20 = v121;
      v21 = v122;
LABEL_40:
      v127 = v22;
LABEL_41:
      if (!v22)
      {
        v60 = __dst;
        if (v21 != __dst && __dst)
        {
          __dst = 0;
          v126 = 0;
          WTF::fastFree((unint64_t)v60, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v32 = 0;
    if (v22 <= 1)
      v33 = 1;
    else
      v33 = v22;
    v34 = 2 * v33;
    while (1)
    {
      v35 = *((unsigned __int8 *)__dst + v32 + 1);
      if ((v35 & 0x7Fu) >= 0x40)
        goto LABEL_129;
      if (((v24 >> (v35 & 0x7F)) & 1) != 0)
        break;
      v32 += 2;
      if (v34 == v32)
        goto LABEL_41;
    }
    v36 = *((unsigned __int8 *)__dst + v32);
    if (v36 == v35)
    {
LABEL_39:
      memmove(&v25[v32], &v25[v32 + 2], 2 * v26 - v32 - 2);
      v22 = v127 - 1;
      goto LABEL_40;
    }
    v37 = v21;
    v38 = v20;
    v39 = v19;
    v40 = v18;
    v41 = v16;
    v36 = (char)v36;
    v42 = v15;
    if ((char)v36 == 63)
    {
      if ((char)v35 != 31)
      {
        v44 = v35 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v43 = v35 == 31 || v36 == 31;
      if (!v43)
      {
        v44 = v35 & 0xFFE0FFFF | ((v36 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v45 = *(_DWORD *)(v8 + 200);
        if (v45 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v45 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v45) = v44;
        *(_DWORD *)(v8 + 200) += 4;
        v25 = (char *)__dst;
        v26 = v127;
        v15 = v42;
        v16 = v41;
        v18 = v40;
        v19 = v39;
        v20 = v38;
        v21 = v37;
        goto LABEL_39;
      }
    }
    v44 = (char)v35 | (32 * v36) | 0x91000000;
    goto LABEL_36;
  }
LABEL_62:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v20, 4, a4, a5, a6, a7, a8);
  if (v18 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v19, 3, v61, v62, v63, v64, v65);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v18 << 35) + 0x380000001ALL, 3, v61, v62, v63, v64, v65);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 1, v66, v67, v68, v69, v70);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v15, 0, v71, v72, v73, v74, v75);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v76, v77, v78, v79, v80, v81, (int *)&v124);
  v89 = 0;
  LOBYTE(v16) = 0;
  *(_QWORD *)(a1 + 92) = v124;
  if (!*(_BYTE *)(a1 + 101))
  {
    if (*(_BYTE *)(a1 + 100))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v83, v84, v85, v86, v87, v88);
      v89 = 0;
      LOBYTE(v16) = 0;
      goto LABEL_72;
    }
    v90 = *(_BYTE *)(a1 + 102);
    __dst = (void *)2;
    v130 = 0;
    v91 = *(_QWORD *)(v8 + 3960);
    v92 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
    if ((v92 & 1) != 0)
    {
      v115 = *(_QWORD *)(v92 & 0xFFFFFFFF8);
      if ((v92 & 2) != 0
        || ((v116 = *(unsigned int *)((v92 & 0xFFFFFFFF8) + 8), (_DWORD)v116 != 0x3FFFFFFF)
          ? (v117 = (_DWORD)v116 == -1)
          : (v117 = 1),
            v117))
      {
        v118 = 2;
      }
      else if (v116 >> 28)
      {
        v119 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v119 = v115;
        *(_DWORD *)(v119 + 8) = v116;
        v118 = 1;
        v115 = v119;
      }
      else
      {
        v118 = *(_QWORD *)(v92 & 0xFFFFFFFF8);
        v115 = v116 << 36;
      }
      v92 = v115 | v118;
    }
    v129 = v92;
    v93 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v91, &v129, (uint64_t *)&__dst, &v130, v85, v86, v87, v88);
    if ((v129 & 1) != 0 && (v129 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v129 & 0xFFFFFFFF8, v82, v83, v84, v85, v86, v87, v88);
    if ((v93 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v83, v84, v85, v86, v87, v88);
      LOBYTE(v16) = 0;
      v89 = 0;
LABEL_71:
      if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
        WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v82, v83, v84, v85, v86, v87, v88);
      goto LABEL_72;
    }
    v101 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v101)
    {
      v102 = 0;
      v103 = 16 * v101;
      v104 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v106 = *v104;
        v104 += 16;
        v105 = v106;
        if ((v106 & 0x40) != 0)
          break;
        v102 |= 1 << v105;
        v103 -= 16;
        if (!v103)
          goto LABEL_96;
      }
    }
    else
    {
      v102 = 0;
LABEL_96:
      if ((v90 & 0x40) == 0)
      {
        v89 = 1;
        v107 = v102 | (1 << v90);
        if ((v107 & 2) != 0)
        {
          v108 = (unsigned __int16)~(_WORD)v107 & 0xFFFE;
          if (v108)
          {
            LODWORD(v16) = __clz(__rbit64(v108));
            if ((_DWORD)v16 == 1)
            {
              v89 = 1;
            }
            else
            {
              if ((_DWORD)v16 == 31)
              {
                v111 = (unsigned int *)(v8 + 200);
                v110 = *(_DWORD *)(v8 + 200);
                v112 = (JSC::AssemblerBuffer *)(v8 + 56);
                v113 = v110 + 4;
                v114 = *(_DWORD *)(v8 + 192);
                v109 = -1862270913;
              }
              else
              {
                v109 = v16 | 0xAA0103E0;
                v111 = (unsigned int *)(v8 + 200);
                v110 = *(_DWORD *)(v8 + 200);
                v112 = (JSC::AssemblerBuffer *)(v8 + 56);
                v113 = v110 + 4;
                v114 = *(_DWORD *)(v8 + 192);
              }
              if (v113 > v114)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v112, (uint64_t)v82, v83, v84, v85, v86, v87, v88);
                v110 = *v111;
              }
              *(_DWORD *)(*(_QWORD *)v112 + v110) = v109;
              *v111 += 4;
              v89 = 1;
            }
          }
          else
          {
            v89 = 1;
            LOBYTE(v16) = -1;
          }
        }
        else
        {
          LOBYTE(v16) = 1;
        }
        goto LABEL_71;
      }
    }
LABEL_129:
    __break(1u);
LABEL_130:
    __break(0xC471u);
    return;
  }
LABEL_72:
  v94 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v94 == 31)
    {
      v95 = -1862270945;
    }
    else if (v94 == 255)
    {
      v95 = -1442774017;
    }
    else
    {
      v95 = v94 | 0xAA0003E0;
    }
    v97 = (unsigned int *)(v8 + 200);
    v96 = *(_DWORD *)(v8 + 200);
    if (v96 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v82, v83, v84, v85, v86, v87, v88);
      v96 = *v97;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v96) = v95;
    *v97 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v98 = *(_DWORD *)(a1 + 116);
    if (v98)
    {
      v99 = v98 - 1;
      v100 = 16 * (v98 - 1);
      while (*(_DWORD *)(a1 + 116) > v99)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v100, v83, v84, v85, v86, v87, v88);
        v100 -= 16;
        if (--v99 == -1)
          goto LABEL_85;
      }
      goto LABEL_130;
    }
LABEL_85:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v89)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v16, v83, v84, v85, v86, v87, v88);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v83, v84, v85, v86, v87, v88);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,unsigned int,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,unsigned int,unsigned int>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573890;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,unsigned int,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,unsigned int,unsigned int>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573890;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,unsigned int,unsigned int),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

unsigned int *JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,unsigned int,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,unsigned int,unsigned int>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::ARM64LogicalImmediate *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  char v56;
  unsigned __int8 v57;
  uint64_t v58;

  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_35:
    JUMPOUT(0x197C83618);
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a1 + 176);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a1 + 180), 3, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v17, 2, v18, v19, v20, v21, v22);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v16, 1, v23, v24, v25, v26, v27);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v15, 0, v28, v29, v30, v31, v32);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 152), v33, v34, v35, v36, v37, v38, (int *)&v58);
  *(_QWORD *)(a1 + 92) = v58;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_12;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v40, v41, v42, v43, v44, v45);
LABEL_12:
    v46 = 0;
    v47 = 0;
    goto LABEL_13;
  }
  JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102));
  v47 = v56;
  v46 = v57;
LABEL_13:
  v48 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v48 == 31)
    {
      v49 = -1862270945;
    }
    else if (v48 == 255)
    {
      v49 = -1442774017;
    }
    else
    {
      v49 = v48 | 0xAA0003E0;
    }
    v51 = (unsigned int *)(a2 + 200);
    v50 = *(_DWORD *)(a2 + 200);
    if (v50 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v39, v40, v41, v42, v43, v44, v45);
      v50 = *v51;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v50) = v49;
    *v51 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v52 = *(_DWORD *)(a1 + 116);
    if (v52)
    {
      v53 = v52 - 1;
      v54 = 16 * (v52 - 1);
      while (*(_DWORD *)(a1 + 116) > v53)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v54, v40, v41, v42, v43, v44, v45);
        v54 -= 16;
        if (--v53 == -1)
          goto LABEL_26;
      }
      __break(0xC471u);
      goto LABEL_35;
    }
LABEL_26:
    *(_BYTE *)(a2 + 5768) = 0;
  }
  if (!*(_BYTE *)(a1 + 101) && v46)
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, v47, v40, v41, v42, v43, v44, v45);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, v40, v41, v42, v43, v44, v45);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35738F0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35738F0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  int v78;
  __int16 *v79;
  void *__dst;
  int v81;
  unsigned int v82;
  __int16 v83;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = &v83;
  __dst = &v83;
  v81 = 1;
  if (v17 != 1)
  {
    v83 = v17 | 0x100;
    v82 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_92;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_92;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v78 = v19;
      v79 = v18;
      v77 = v15;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v82 - 2);
      v40 = v82 - 1;
      v35 = v82 == 1;
      v82 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v82)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v82;
        v44 = v82;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v82;
      }
      v20 = v44 - v45;
      v15 = v77;
      v18 = v79;
      v19 = v78;
LABEL_40:
      v82 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v81 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_92;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v82 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v82;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
LABEL_67:
    v67 = 0;
    v68 = 0;
    goto LABEL_68;
  }
  v76 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102), v62, v63, v64, v65, v66);
  v68 = v76;
  v67 = HIBYTE(v76);
LABEL_68:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_81;
      }
LABEL_93:
      __break(0xC471u);
      return;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (!*(_BYTE *)(a1 + 101))
  {
    if (v67)
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::DFG::RegisteredStructure&,JSC::ARM64Registers::RegisterID&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, char *a7, uint64_t *a8, uint64_t *a9, char *a10)
{
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  int v30;
  _DWORD *v31;
  _BYTE *v32;
  _BYTE *v33;
  _BYTE *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  char v44;
  uint64_t v45;
  _BYTE *v47;
  unsigned int v48;
  _BYTE v49[24];
  WTF *v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE v53[24];

  v17 = WTF::fastMalloc((WTF *)0xB8);
  v18 = *((unsigned int *)a2 + 3);
  v47 = v49;
  v48 = v18;
  if (v18 < 3)
  {
    v19 = v49;
  }
  else
  {
    if (v18 >= 0x15555556)
      goto LABEL_23;
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v18));
    v47 = v19;
    LODWORD(v18) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v18)
  {
    v20 = *a2;
    v21 = *a2 + 12 * v18;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = *a3;
  v45 = *a4;
  v23 = *a5;
  v24 = *a6;
  v25 = *a7;
  v26 = *a8;
  v27 = *a9;
  v28 = *a10;
  v29 = v48;
  v50 = (WTF *)v53;
  v51 = 2;
  v52 = v48;
  if (v48 >= 3)
  {
    v44 = v25;
    if (v48 < 0x15555556)
    {
      v30 = v23;
      v31 = v22;
      v32 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v48));
      v51 = 12 * v48 / 0xC;
      v50 = (WTF *)v32;
      v29 = v48;
      v22 = v31;
      v23 = v30;
      v25 = v44;
      goto LABEL_12;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197C83FD0);
  }
  v32 = v53;
  if (v48)
  {
LABEL_12:
    v33 = v47;
    v34 = &v47[12 * v29];
    do
    {
      *(_DWORD *)v32 = *(_DWORD *)v33;
      *(_QWORD *)(v32 + 4) = *(_QWORD *)(v33 + 4);
      v33 += 12;
      v32 += 12;
    }
    while (v33 != v34);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v17, (uint64_t *)&v50, v22, v23, v24, v25);
  v42 = v50;
  if (v53 != (_BYTE *)v50 && v50 != 0)
  {
    v50 = 0;
    v51 = 0;
    WTF::fastFree((unint64_t)v42, v35, v36, v37, v38, v39, v40, v41);
  }
  *(_QWORD *)v17 = &off_1E3573920;
  *(_QWORD *)(v17 + 152) = v45;
  *(_QWORD *)(v17 + 160) = v26;
  *(_QWORD *)(v17 + 168) = v27;
  *(_BYTE *)(v17 + 176) = v28;
  *a1 = v17;
  if (v49 != v47)
  {
    if (v47)
      WTF::fastFree((unint64_t)v47, v35, v36, v37, v38, v39, v40, v41);
  }
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3573950;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573950;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573950;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  char v38;
  uint64_t v39;
  unsigned __int8 *v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  int64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 *v70;
  void *__dst;
  int v72;
  unsigned int v73;
  __int16 v74;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if (!(_DWORD)v10)
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(v8 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    v15 = *(_QWORD *)(a1 + 160);
    v16 = *(_QWORD *)(a1 + 168);
    v17 = *(unsigned __int8 *)(a1 + 176);
    v18 = &v74;
    __dst = &v74;
    v72 = 1;
    if (v17 == 2)
    {
LABEL_62:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 1, a4, a5, a6, a7, a8);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v15, 0, v53, v54, v55, v56, v57);
      JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v58, v59, v60, v61, v62, v63, (int *)&__dst);
      *(_QWORD *)(a1 + 92) = __dst;
      JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::tearDown(a1, v8, v64, v65, v66, v67, v68, v69);
      return;
    }
    v74 = v17 | 0x200;
    v73 = 1;
    v19 = 1;
    while (1)
    {
      v20 = 0;
      v21 = 0;
      v22 = (char *)__dst;
      v23 = v19;
      do
      {
        if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
          goto LABEL_66;
        v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
        v20 += 2;
      }
      while (2 * v19 != v20);
      v24 = 0;
      do
      {
        v25 = *((_BYTE *)__dst + v24) & 0x7F;
        if (v25 >= 0x40)
          goto LABEL_66;
        v21 &= ~(1 << v25);
        v24 += 2;
      }
      while (2 * v19 != v24);
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v26.i16[0] = vaddlv_u8(v26);
      v27 = v26.i32[0];
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.i32[0] + v27)
        break;
      v70 = v18;
      v37 = *(_BYTE *)__dst;
      v38 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v38, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v73 - 2);
      v39 = v73 - 1;
      v34 = v73 == 1;
      v73 = v39;
      v40 = (unsigned __int8 *)__dst;
      v41 = (char *)__dst + 2 * v39;
      if (v34)
      {
        v42 = 0;
        v43 = 0;
        v44 = 0;
        a2 = (char *)__dst + 2 * v39;
      }
      else
      {
        v46 = 2 * v39;
        v47 = __dst;
        while (*v47 != v38)
        {
          v47 += 2;
          v46 -= 2;
          if (!v46)
            goto LABEL_51;
        }
        *v47 = v37;
LABEL_51:
        v44 = 0;
        v48 = v40;
        a2 = v41;
        v49 = v41;
        do
        {
          if (*v40 == v40[1])
          {
            v50 = v40;
            if (v49 != (char *)__dst + 2 * v73)
            {
              if (v40 == (unsigned __int8 *)a2)
              {
                v50 = (unsigned __int8 *)v49;
              }
              else
              {
                v51 = v48 - (unsigned __int8 *)a2;
                memmove(v49, a2, v48 - (unsigned __int8 *)a2);
                v50 = (unsigned __int8 *)&v49[v51];
              }
            }
            a2 = (char *)(v40 + 2);
            ++v44;
            v49 = (char *)v50;
          }
          v40 += 2;
          v48 += 2;
        }
        while (v40 < (unsigned __int8 *)v41);
        v40 = (unsigned __int8 *)__dst;
        v42 = v73;
        v43 = v73;
        v41 = v49;
      }
      v45 = (char *)&v40[2 * v42];
      if (a2 != v45)
      {
        memmove(v41, a2, v45 - a2);
        v43 = v73;
      }
      v19 = v43 - v44;
      v18 = v70;
LABEL_40:
      v73 = v19;
LABEL_41:
      if (!v19)
      {
        v52 = __dst;
        if (v18 != __dst)
        {
          if (__dst)
          {
            __dst = 0;
            v72 = 0;
            WTF::fastFree((unint64_t)v52, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        goto LABEL_62;
      }
    }
    v29 = 0;
    if (v19 <= 1)
      v30 = 1;
    else
      v30 = v19;
    v31 = 2 * v30;
    while (1)
    {
      v32 = *((unsigned __int8 *)__dst + v29 + 1);
      if ((v32 & 0x7Fu) >= 0x40)
        goto LABEL_66;
      if (((v21 >> (v32 & 0x7F)) & 1) != 0)
        break;
      v29 += 2;
      if (v31 == v29)
        goto LABEL_41;
    }
    v33 = *((unsigned __int8 *)__dst + v29);
    if (v33 == v32)
    {
LABEL_39:
      memmove(&v22[v29], &v22[v29 + 2], 2 * v23 - v29 - 2);
      v19 = v73 - 1;
      goto LABEL_40;
    }
    v33 = (char)v33;
    if ((char)v33 == 63)
    {
      if ((char)v32 != 31)
      {
        v35 = v32 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v34 = v32 == 31 || v33 == 31;
      if (!v34)
      {
        v35 = v32 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v36 = *(_DWORD *)(v8 + 200);
        if (v36 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v36 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v36) = v35;
        *(_DWORD *)(v8 + 200) += 4;
        v22 = (char *)__dst;
        v23 = v73;
        goto LABEL_39;
      }
    }
    v35 = (char)v32 | (32 * v33) | 0x91000000;
    goto LABEL_36;
  }
  v11 = 0;
  v12 = 0;
  while (v12 < *(unsigned int *)(a1 + 60))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
    ++v12;
    v11 += 12;
    if (v10 == v12)
      goto LABEL_5;
  }
  __break(0xC471u);
LABEL_66:
  __break(1u);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  char v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  JSC::AssemblerBuffer *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  uint64_t v44;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v12 = 0;
    LOBYTE(v13) = 0;
    goto LABEL_5;
  }
  v21 = *(_BYTE *)(a1 + 102);
  v43 = 0;
  v44 = 2;
  v22 = *(_QWORD *)(a2 + 3960);
  v23 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v23 & 1) != 0)
  {
    v24 = *(_QWORD *)(a2 + 3960);
    v8 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
    if ((v23 & 2) != 0
      || ((v9 = *(unsigned int *)((v23 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v31 = (_DWORD)v9 == -1)
        : (v31 = 1),
          v31))
    {
      v32 = 2;
    }
    else
    {
      if (v9 >> 28)
        goto LABEL_62;
      v32 = *(_QWORD *)(v23 & 0xFFFFFFFF8);
      v8 = v9 << 36;
    }
    goto LABEL_53;
  }
  while (1)
  {
    v42 = v23;
    v24 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v22, &v42, &v44, &v43, a5, a6, a7, a8);
    if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v42 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
    if ((v24 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
      LOBYTE(v13) = 0;
      v12 = 0;
      goto LABEL_27;
    }
    v25 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v25)
    {
      v26 = 0;
      v27 = 16 * v25;
      v28 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v30 = *v28;
        v28 += 16;
        v29 = v30;
        if ((v30 & 0x40) != 0)
          goto LABEL_61;
        v26 |= 1 << v29;
        v27 -= 16;
        if (!v27)
          goto LABEL_45;
      }
    }
    v26 = 0;
LABEL_45:
    if ((v21 & 0x40) == 0)
      break;
LABEL_61:
    __break(1u);
LABEL_62:
    v41 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v41 = v8;
    *(_DWORD *)(v41 + 8) = v9;
    v32 = 1;
    v8 = v41;
LABEL_53:
    v23 = v8 | v32;
    v22 = v24;
  }
  v12 = 1;
  v33 = v26 | (1 << v21);
  LOBYTE(v13) = 1;
  if ((v33 & 2) != 0)
  {
    v34 = (unsigned __int16)~(_WORD)v33 & 0xFFFE;
    if (v34)
    {
      v13 = __clz(__rbit64(v34));
      if (v13 == 1)
      {
        v12 = 1;
      }
      else
      {
        if (v13 == 31)
        {
          v37 = (unsigned int *)(a2 + 200);
          v36 = *(_DWORD *)(a2 + 200);
          v38 = (JSC::AssemblerBuffer *)(a2 + 56);
          v39 = v36 + 4;
          v40 = *(_DWORD *)(a2 + 192);
          v35 = -1862270913;
        }
        else
        {
          v35 = v13 | 0xAA0103E0;
          v37 = (unsigned int *)(a2 + 200);
          v36 = *(_DWORD *)(a2 + 200);
          v38 = (JSC::AssemblerBuffer *)(a2 + 56);
          v39 = v36 + 4;
          v40 = *(_DWORD *)(a2 + 192);
        }
        if (v39 > v40)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v38, a2, a3, a4, a5, a6, a7, a8);
          v36 = *v37;
        }
        *(_DWORD *)(*(_QWORD *)v38 + v36) = v35;
        *v37 += 4;
        v12 = 1;
      }
    }
    else
    {
      v12 = 1;
      LOBYTE(v13) = -1;
    }
  }
LABEL_27:
  if ((v44 & 1) != 0 && (v44 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v44 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
LABEL_5:
  v14 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v14 == 31)
    {
      v15 = -1862270945;
    }
    else if (v14 == 255)
    {
      v15 = -1442774017;
    }
    else
    {
      v15 = v14 | 0xAA0003E0;
    }
    v17 = (unsigned int *)(a2 + 200);
    v16 = *(_DWORD *)(a2 + 200);
    if (v16 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v16 = *v17;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v16) = v15;
    *v17 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_19:
    if (v12)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v13, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v18 = *(_DWORD *)(a1 + 116);
  if (!v18)
  {
LABEL_18:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_19;
  }
  v19 = v18 - 1;
  v20 = 16 * (v18 - 1);
  while (*(_DWORD *)(a1 + 116) > v19)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v20, a3, a4, a5, a6, a7, a8);
    v20 -= 16;
    if (--v19 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JSArray *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E35739B0;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JSArray *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E35739B0;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JSArray *),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,JSC::JSArray *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  __int32 v31;
  uint8x8_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned int v53;
  _BYTE *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int *v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  unsigned int *v83;
  JSC::AssemblerBuffer *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void *__dst;
  int v97;
  unsigned int v98;
  _WORD v99[4];
  unint64_t v100;
  unsigned int *v101;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v18 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v18, v12, v13, v14, v15, v16, v17);
        ++v8;
        v18 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(unsigned int *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(unsigned __int8 *)(a1 + 152);
  v22 = *(unsigned __int8 *)(a1 + 153);
  __dst = v99;
  v97 = 2;
  if (v21 == 1)
  {
    if (v22 == 2)
      goto LABEL_65;
    v23 = 0;
  }
  else
  {
    v99[0] = v21 | 0x100;
    v23 = 1;
    v98 = 1;
    if (v22 == 2)
      goto LABEL_11;
  }
  v99[v23++] = v22 | 0x200;
  v98 = v23;
  do
  {
LABEL_11:
    v24 = 0;
    v25 = 0;
    v26 = (char *)__dst;
    v27 = v23;
    do
    {
      if ((*((_BYTE *)__dst + v24 + 1) & 0x40) != 0)
        goto LABEL_108;
      v25 |= 1 << *((_BYTE *)__dst + v24 + 1);
      v24 += 2;
    }
    while (2 * v23 != v24);
    v28 = 0;
    do
    {
      v29 = *((_BYTE *)__dst + v28) & 0x7F;
      if (v29 >= 0x40)
        goto LABEL_108;
      v25 &= ~(1 << v29);
      v28 += 2;
    }
    while (2 * v23 != v28);
    v30 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
    v30.i16[0] = vaddlv_u8(v30);
    v31 = v30.i32[0];
    v32 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
    v32.i16[0] = vaddlv_u8(v32);
    if (v32.i32[0] + v31)
    {
      v8 = 0;
      if (v23 <= 1)
        v33 = 1;
      else
        v33 = v23;
      v34 = 2 * v33;
      while (1)
      {
        v35 = *((unsigned __int8 *)__dst + v8 + 1);
        if ((v35 & 0x7Fu) >= 0x40)
          goto LABEL_108;
        if (((v25 >> (v35 & 0x7F)) & 1) != 0)
          break;
        v8 += 2;
        if (v34 == v8)
          goto LABEL_61;
      }
      v36 = *((unsigned __int8 *)__dst + v8);
      if (v36 == v35)
      {
LABEL_59:
        memmove(&v26[v8], &v26[v8 + 2], 2 * v27 - v8 - 2);
        v23 = v98 - 1;
        goto LABEL_60;
      }
      v37 = (char)v36;
      if ((char)v36 == 63)
      {
        v38 = *(_DWORD *)(a2 + 200);
        v39 = *(_DWORD *)(a2 + 192);
        if ((char)v35 != 31)
        {
          v41 = v35 & 0x1F | 0xD2800000;
          goto LABEL_56;
        }
      }
      else
      {
        v38 = *(_DWORD *)(a2 + 200);
        v39 = *(_DWORD *)(a2 + 192);
        v40 = v35 == 31 || v37 == 31;
        if (!v40)
        {
          v41 = v35 & 0xFFE0FFFF | ((v37 & 0x1F) << 16) | 0xAA0003E0;
LABEL_56:
          if (v38 + 4 > v39)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
            v38 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v38) = v41;
          *(_DWORD *)(a2 + 200) += 4;
          v26 = (char *)__dst;
          v27 = v98;
          goto LABEL_59;
        }
      }
      v41 = (char)v35 | (32 * v37) | 0x91000000;
      goto LABEL_56;
    }
    v42 = *(_BYTE *)__dst;
    v43 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v43, v13, v14, v15, v16, v17);
    memmove(__dst, (char *)__dst + 2, 2 * v98 - 2);
    v44 = v98 - 1;
    v40 = v98 == 1;
    v98 = v44;
    v8 = (unint64_t)__dst;
    v45 = (char *)__dst + 2 * v44;
    if (v40)
    {
      v52 = 0;
      v53 = 0;
      v48 = 0;
      v11 = v45;
    }
    else
    {
      v46 = 2 * v44;
      v47 = __dst;
      while (*v47 != v43)
      {
        v47 += 2;
        v46 -= 2;
        if (!v46)
          goto LABEL_39;
      }
      *v47 = v42;
LABEL_39:
      v48 = 0;
      v49 = v8;
      v11 = v45;
      v50 = v45;
      do
      {
        if (*(unsigned __int8 *)v8 == *(unsigned __int8 *)(v8 + 1))
        {
          v51 = (char *)v8;
          if (v50 != (char *)__dst + 2 * v98)
          {
            v94 = v45;
            if ((_BYTE *)v8 == v11)
            {
              v51 = v50;
            }
            else
            {
              v92 = v49 - (_QWORD)v11;
              v93 = v50;
              memmove(v50, v11, v49 - (_QWORD)v11);
              v51 = &v93[v92];
            }
            v45 = v94;
          }
          v11 = (_BYTE *)(v8 + 2);
          ++v48;
          v50 = v51;
        }
        v8 += 2;
        v49 += 2;
      }
      while (v8 < (unint64_t)v45);
      v8 = (unint64_t)__dst;
      v52 = v98;
      v53 = v98;
      v45 = v50;
    }
    v54 = (_BYTE *)(v8 + 2 * v52);
    if (v11 != v54)
    {
      memmove(v45, v11, v54 - v11);
      v53 = v98;
    }
    v23 = v53 - v48;
LABEL_60:
    v98 = v23;
LABEL_61:
    ;
  }
  while (v23);
  v55 = __dst;
  if (v99 != __dst && __dst)
  {
    __dst = 0;
    v97 = 0;
    WTF::fastFree((unint64_t)v55, v11, v12, v13, v14, v15, v16, v17);
  }
LABEL_65:
  if (v19 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v20, 0, v13, v14, v15, v16, v17);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v19 << 35) + 0x380000001ALL, 0, v13, v14, v15, v16, v17);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v56, v57, v58, v59, v60, v61, (int *)&v95);
  *(_QWORD *)(a1 + 64) = v95;
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_70:
    v62 = 0;
    LOBYTE(v8) = 0;
    goto LABEL_71;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
    goto LABEL_70;
  }
  LODWORD(v8) = *(unsigned __int8 *)(a1 + 74);
  __dst = (void *)2;
  v101 = 0;
  v70 = *(_QWORD *)(a2 + 3960);
  v71 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v71 & 1) != 0)
  {
    v87 = *(_QWORD *)(v71 & 0xFFFFFFFF8);
    if ((v71 & 2) != 0
      || ((v88 = *(unsigned int *)((v71 & 0xFFFFFFFF8) + 8), (_DWORD)v88 != 0x3FFFFFFF)
        ? (v89 = (_DWORD)v88 == -1)
        : (v89 = 1),
          v89))
    {
      v90 = 2;
    }
    else if (v88 >> 28)
    {
      v91 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v91 = v87;
      *(_DWORD *)(v91 + 8) = v88;
      v90 = 1;
      v87 = v91;
    }
    else
    {
      v90 = *(_QWORD *)(v71 & 0xFFFFFFFF8);
      v87 = v88 << 36;
    }
    v71 = v87 | v90;
  }
  v100 = v71;
  v72 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v70, &v100, (uint64_t *)&__dst, &v101, v14, v15, v16, v17);
  if ((v100 & 1) != 0 && (v100 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v100 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if ((v72 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
    LOBYTE(v8) = 0;
    v62 = 0;
    goto LABEL_93;
  }
  v73 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v73)
  {
    v74 = 0;
    v75 = 16 * v73;
    v76 = (char *)(*(_QWORD *)(a1 + 80) + 2);
    while (1)
    {
      v78 = *v76;
      v76 += 16;
      v77 = v78;
      if ((v78 & 0x40) != 0)
        goto LABEL_108;
      v74 |= 1 << v77;
      v75 -= 16;
      if (!v75)
        goto LABEL_102;
    }
  }
  v74 = 0;
LABEL_102:
  if ((v8 & 0x40) != 0)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  v62 = 1;
  v79 = v74 | (1 << v8);
  if ((v79 & 2) == 0)
  {
    LOBYTE(v8) = 1;
    goto LABEL_93;
  }
  v80 = (unsigned __int16)~(_WORD)v79 & 0xFFFE;
  if (!v80)
  {
    v62 = 1;
    LOBYTE(v8) = -1;
    goto LABEL_93;
  }
  LODWORD(v8) = __clz(__rbit64(v80));
  if ((_DWORD)v8 == 1)
  {
LABEL_109:
    v62 = v8;
    goto LABEL_93;
  }
  if ((_DWORD)v8 == 31)
  {
    v83 = (unsigned int *)(a2 + 200);
    v82 = *(_DWORD *)(a2 + 200);
    v84 = (JSC::AssemblerBuffer *)(a2 + 56);
    v85 = v82 + 4;
    v86 = *(_DWORD *)(a2 + 192);
    v81 = -1862270913;
  }
  else
  {
    v81 = v8 | 0xAA0103E0;
    v83 = (unsigned int *)(a2 + 200);
    v82 = *(_DWORD *)(a2 + 200);
    v84 = (JSC::AssemblerBuffer *)(a2 + 56);
    v85 = v82 + 4;
    v86 = *(_DWORD *)(a2 + 192);
  }
  if (v85 > v86)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v84, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
    v82 = *v83;
  }
  *(_DWORD *)(*(_QWORD *)v84 + v82) = v81;
  *v83 += 4;
  v62 = 1;
LABEL_93:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
LABEL_71:
  v63 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v63 == 31)
    {
      v64 = -1862270945;
    }
    else if (v63 == 255)
    {
      v64 = -1442774017;
    }
    else
    {
      v64 = v63 | 0xAA0003E0;
    }
    v66 = (unsigned int *)(a2 + 200);
    v65 = *(_DWORD *)(a2 + 200);
    if (v65 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
      v65 = *v66;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v65) = v64;
    *v66 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_85;
  v67 = *(_DWORD *)(a1 + 92);
  if (!v67)
  {
LABEL_84:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_85:
    if (v62)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v8, v12, v13, v14, v15, v16, v17);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v12, v13, v14, v15, v16, v17);
    return;
  }
  v68 = v67 - 1;
  v69 = 16 * (v67 - 1);
  while (*(_DWORD *)(a1 + 92) > v68)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v69, v12, v13, v14, v15, v16, v17);
    v69 -= 16;
    if (--v68 == -1)
      goto LABEL_84;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *,void *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573A10;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *,void *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573A10;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *,void *,int),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *,void *,int),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  JSC::ARM64LogicalImmediate *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint8x8_t v31;
  __int32 v32;
  uint8x8_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  unsigned int v43;
  char v44;
  char v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  unsigned __int8 *v52;
  char *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int8 *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int *v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int *v97;
  JSC::AssemblerBuffer *v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  int64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  void *__dst;
  int v107;
  unsigned int v108;
  _WORD v109[4];
  unint64_t v110;
  unsigned int *v111;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v17 = 0;
      v18 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v17, v11, v12, v13, v14, v15, v16);
        ++v18;
        v17 += 16;
      }
      while (v18 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(unsigned int *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(unsigned __int8 *)(a1 + 152);
  v22 = *(unsigned __int8 *)(a1 + 153);
  v23 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a1 + 156);
  __dst = v109;
  v107 = 2;
  if (v21 == 1)
  {
    if (v22 == 2)
      goto LABEL_65;
    v24 = 0;
  }
  else
  {
    v109[0] = v21 | 0x100;
    v24 = 1;
    v108 = 1;
    if (v22 == 2)
      goto LABEL_11;
  }
  v109[v24++] = v22 | 0x200;
  v108 = v24;
  do
  {
LABEL_11:
    v25 = 0;
    v26 = 0;
    v27 = (char *)__dst;
    v28 = v24;
    do
    {
      if ((*((_BYTE *)__dst + v25 + 1) & 0x40) != 0)
        goto LABEL_117;
      v26 |= 1 << *((_BYTE *)__dst + v25 + 1);
      v25 += 2;
    }
    while (2 * v24 != v25);
    v29 = 0;
    do
    {
      v30 = *((_BYTE *)__dst + v29) & 0x7F;
      if (v30 >= 0x40)
        goto LABEL_117;
      v26 &= ~(1 << v30);
      v29 += 2;
    }
    while (2 * v24 != v29);
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
    v31.i16[0] = vaddlv_u8(v31);
    v32 = v31.i32[0];
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
    v33.i16[0] = vaddlv_u8(v33);
    if (v33.i32[0] + v32)
    {
      v34 = 0;
      if (v24 <= 1)
        v35 = 1;
      else
        v35 = v24;
      v36 = 2 * v35;
      while (1)
      {
        v37 = *((unsigned __int8 *)__dst + v34 + 1);
        if ((v37 & 0x7Fu) >= 0x40)
          goto LABEL_117;
        if (((v26 >> (v37 & 0x7F)) & 1) != 0)
          break;
        v34 += 2;
        if (v36 == v34)
          goto LABEL_61;
      }
      v38 = *((unsigned __int8 *)__dst + v34);
      if (v38 == v37)
      {
LABEL_59:
        memmove(&v27[v34], &v27[v34 + 2], 2 * v28 - v34 - 2);
        v24 = v108 - 1;
        goto LABEL_60;
      }
      v39 = (char)v38;
      if ((char)v38 == 63)
      {
        v40 = *(_DWORD *)(a2 + 200);
        v41 = *(_DWORD *)(a2 + 192);
        if ((char)v37 != 31)
        {
          v43 = v37 & 0x1F | 0xD2800000;
          goto LABEL_56;
        }
      }
      else
      {
        v40 = *(_DWORD *)(a2 + 200);
        v41 = *(_DWORD *)(a2 + 192);
        v42 = v37 == 31 || v39 == 31;
        if (!v42)
        {
          v43 = v37 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0;
LABEL_56:
          if (v40 + 4 > v41)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v10, v11, v12, v13, v14, v15, v16);
            v40 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = v43;
          *(_DWORD *)(a2 + 200) += 4;
          v27 = (char *)__dst;
          v28 = v108;
          goto LABEL_59;
        }
      }
      v43 = (char)v37 | (32 * v39) | 0x91000000;
      goto LABEL_56;
    }
    v44 = *(_BYTE *)__dst;
    v45 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v45, v12, v13, v14, v15, v16);
    memmove(__dst, (char *)__dst + 2, 2 * v108 - 2);
    v46 = v108 - 1;
    v42 = v108 == 1;
    v108 = v46;
    v47 = (unsigned __int8 *)__dst;
    v48 = (unsigned __int8 *)__dst + 2 * v46;
    if (v42)
    {
      v55 = 0;
      v56 = 0;
      v51 = 0;
      v10 = v48;
    }
    else
    {
      v49 = 2 * v46;
      v50 = __dst;
      while (*v50 != v45)
      {
        v50 += 2;
        v49 -= 2;
        if (!v49)
          goto LABEL_39;
      }
      *v50 = v44;
LABEL_39:
      v51 = 0;
      v52 = v47;
      v10 = v48;
      v53 = (char *)v48;
      do
      {
        if (*v47 == v47[1])
        {
          v54 = v47;
          if (v53 != (char *)__dst + 2 * v108)
          {
            v104 = (char *)v48;
            if (v47 == v10)
            {
              v54 = (unsigned __int8 *)v53;
            }
            else
            {
              v102 = v52 - v10;
              v103 = v53;
              memmove(v53, v10, v52 - v10);
              v54 = (unsigned __int8 *)&v103[v102];
            }
            v48 = (unsigned __int8 *)v104;
          }
          v10 = v47 + 2;
          ++v51;
          v53 = (char *)v54;
        }
        v47 += 2;
        v52 += 2;
      }
      while (v47 < v48);
      v47 = (unsigned __int8 *)__dst;
      v55 = v108;
      v56 = v108;
      v48 = (unsigned __int8 *)v53;
    }
    v57 = &v47[2 * v55];
    if (v10 != v57)
    {
      memmove(v48, v10, v57 - v10);
      v56 = v108;
    }
    v24 = v56 - v51;
LABEL_60:
    v108 = v24;
LABEL_61:
    ;
  }
  while (v24);
  v58 = __dst;
  if (v109 != __dst && __dst)
  {
    __dst = 0;
    v107 = 0;
    WTF::fastFree((unint64_t)v58, v10, v11, v12, v13, v14, v15, v16);
  }
LABEL_65:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, v23, 3, v12, v13, v14, v15, v16);
  if (v19 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v20, 0, v59, v60, v61, v62, v63);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v19 << 35) + 0x380000001ALL, 0, v59, v60, v61, v62, v63);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v64, v65, v66, v67, v68, v69, (int *)&v105);
  *(_QWORD *)(a1 + 64) = v105;
  if (*(_BYTE *)(a1 + 73))
  {
LABEL_70:
    v70 = 0;
    LOBYTE(v71) = 0;
    goto LABEL_71;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v11, v12, v13, v14, v15, v16);
    goto LABEL_70;
  }
  v79 = *(_BYTE *)(a1 + 74);
  __dst = (void *)2;
  v111 = 0;
  v80 = *(_QWORD *)(a2 + 3960);
  v81 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v81 & 1) != 0)
  {
    v89 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
    if ((v81 & 2) != 0
      || ((v90 = *(unsigned int *)((v81 & 0xFFFFFFFF8) + 8), (_DWORD)v90 != 0x3FFFFFFF)
        ? (v91 = (_DWORD)v90 == -1)
        : (v91 = 1),
          v91))
    {
      v92 = 2;
    }
    else if (v90 >> 28)
    {
      v101 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v101 = v89;
      *(_DWORD *)(v101 + 8) = v90;
      v92 = 1;
      v89 = v101;
    }
    else
    {
      v92 = *(_QWORD *)(v81 & 0xFFFFFFFF8);
      v89 = v90 << 36;
    }
    v81 = v89 | v92;
  }
  v110 = v81;
  v82 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v80, &v110, (uint64_t *)&__dst, &v111, v13, v14, v15, v16);
  if ((v110 & 1) != 0 && (v110 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v110 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  if ((v82 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v11, v12, v13, v14, v15, v16);
    LOBYTE(v71) = 0;
    v70 = 0;
    goto LABEL_93;
  }
  v83 = *(unsigned int *)(a1 + 92);
  if ((_DWORD)v83)
  {
    v84 = 0;
    v85 = 16 * v83;
    v86 = (char *)(*(_QWORD *)(a1 + 80) + 2);
    while (1)
    {
      v88 = *v86;
      v86 += 16;
      v87 = v88;
      if ((v88 & 0x40) != 0)
        goto LABEL_117;
      v84 |= 1 << v87;
      v85 -= 16;
      if (!v85)
        goto LABEL_111;
    }
  }
  v84 = 0;
LABEL_111:
  if ((v79 & 0x40) != 0)
  {
LABEL_117:
    __break(1u);
LABEL_118:
    v70 = 1;
    LOBYTE(v71) = -1;
    goto LABEL_93;
  }
  v70 = 1;
  v93 = v84 | (1 << v79);
  LOBYTE(v71) = 1;
  if ((v93 & 2) == 0)
    goto LABEL_93;
  v94 = (unsigned __int16)~(_WORD)v93 & 0xFFFE;
  if (!v94)
    goto LABEL_118;
  v71 = __clz(__rbit64(v94));
  if (v71 == 1)
  {
    v70 = 1;
  }
  else
  {
    if (v71 == 31)
    {
      v97 = (unsigned int *)(a2 + 200);
      v96 = *(_DWORD *)(a2 + 200);
      v98 = (JSC::AssemblerBuffer *)(a2 + 56);
      v99 = v96 + 4;
      v100 = *(_DWORD *)(a2 + 192);
      v95 = -1862270913;
    }
    else
    {
      v95 = v71 | 0xAA0103E0;
      v97 = (unsigned int *)(a2 + 200);
      v96 = *(_DWORD *)(a2 + 200);
      v98 = (JSC::AssemblerBuffer *)(a2 + 56);
      v99 = v96 + 4;
      v100 = *(_DWORD *)(a2 + 192);
    }
    if (v99 > v100)
    {
      JSC::AssemblerBuffer::outOfLineGrow(v98, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
      v96 = *v97;
    }
    *(_DWORD *)(*(_QWORD *)v98 + v96) = v95;
    *v97 += 4;
    v70 = 1;
  }
LABEL_93:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
LABEL_71:
  v72 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v72 == 31)
    {
      v73 = -1862270945;
    }
    else if (v72 == 255)
    {
      v73 = -1442774017;
    }
    else
    {
      v73 = v72 | 0xAA0003E0;
    }
    v75 = (unsigned int *)(a2 + 200);
    v74 = *(_DWORD *)(a2 + 200);
    if (v74 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v10, v11, v12, v13, v14, v15, v16);
      v74 = *v75;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v74) = v73;
    *v75 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_85;
  v76 = *(_DWORD *)(a1 + 92);
  if (!v76)
  {
LABEL_84:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_85:
    if (v70)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v71, v11, v12, v13, v14, v15, v16);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v11, v12, v13, v14, v15, v16);
    return;
  }
  v77 = v76 - 1;
  v78 = 16 * (v76 - 1);
  while (*(_DWORD *)(a1 + 92) > v77)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v78, v11, v12, v13, v14, v15, v16);
    v78 -= 16;
    if (--v77 == -1)
      goto LABEL_84;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,JSC::JSArray *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573A70;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,JSC::JSArray *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573A70;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,JSC::JSArray *),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,JSC::JSArray *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::FPRegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint8x8_t v32;
  __int32 v33;
  uint8x8_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  uint64_t v48;
  _BYTE *v49;
  char *v50;
  char *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint8x8_t v69;
  __int32 v70;
  uint8x8_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  char v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  unsigned int v82;
  char *v83;
  unsigned __int8 *v84;
  char *v85;
  void *v86;
  char v87;
  unsigned __int8 v88;
  int v89;
  char *v90;
  int v91;
  char *v92;
  JSC::AssemblerBuffer *v93;
  void *__dst;
  int v95;
  unsigned int v96;
  __int16 v97;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v19 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v19, v13, v14, v15, v16, v17, v18);
        ++v8;
        v19 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 92));
    }
  }
  v20 = *(unsigned int *)(a1 + 136);
  v21 = *(_QWORD *)(a1 + 144);
  v22 = *(unsigned __int8 *)(a1 + 152);
  v23 = *(unsigned __int8 *)(a1 + 153);
  __dst = &v97;
  LODWORD(v24) = 1;
  v95 = 1;
  if (v23 != 1)
  {
    v97 = v23 | 0x100;
    v96 = 1;
    v25 = 1;
    while (1)
    {
      v26 = 0;
      v27 = 0;
      v28 = (char *)__dst;
      v29 = v25;
      do
      {
        if ((*((_BYTE *)__dst + v26 + 1) & 0x40) != 0)
          goto LABEL_127;
        v27 |= 1 << *((_BYTE *)__dst + v26 + 1);
        v26 += 2;
      }
      while (2 * v25 != v26);
      v30 = 0;
      do
      {
        v31 = *((_BYTE *)__dst + v30) & 0x7F;
        if (v31 >= 0x40)
          goto LABEL_127;
        v27 &= ~(1 << v31);
        v30 += 2;
      }
      while (2 * v25 != v30);
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v32.i16[0] = vaddlv_u8(v32);
      v33 = v32.i32[0];
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v27));
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] + v33)
        break;
      v89 = v22;
      v9 = *(char *)__dst;
      v41 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, v9, v41, v14, v15, v16, v17, v18);
      memmove(__dst, (char *)__dst + 2, 2 * v96 - 2);
      v42 = v96 - 1;
      v39 = v96 == 1;
      v96 = v42;
      v43 = (char *)__dst;
      v44 = (char *)__dst + 2 * v42;
      if (v39)
      {
        v45 = 0;
        v46 = 0;
        v91 = 0;
        v12 = (char *)__dst + 2 * v42;
      }
      else
      {
        v48 = 2 * v42;
        v49 = __dst;
        while (*v49 != v41)
        {
          v49 += 2;
          v48 -= 2;
          if (!v48)
            goto LABEL_47;
        }
        *v49 = v9;
LABEL_47:
        v91 = 0;
        v8 = (unint64_t)v43;
        v12 = v44;
        v50 = v44;
        do
        {
          if (*v43 == v43[1])
          {
            v51 = v43;
            if (v50 != (char *)__dst + 2 * v96)
            {
              if (v43 == v12)
              {
                v51 = v50;
              }
              else
              {
                v9 = v8 - (_QWORD)v12;
                memmove(v50, v12, v8 - (_QWORD)v12);
                v51 = &v50[v9];
              }
            }
            v12 = v43 + 2;
            ++v91;
            v50 = v51;
          }
          v43 += 2;
          v8 += 2;
        }
        while (v43 < v44);
        v43 = (char *)__dst;
        v45 = v96;
        v46 = v96;
        v44 = v50;
      }
      v47 = &v43[2 * v45];
      if (v12 != v47)
      {
        memmove(v44, v12, v47 - v12);
        v46 = v96;
      }
      v25 = v46 - v91;
      v22 = v89;
      LODWORD(v24) = 1;
LABEL_36:
      v96 = v25;
LABEL_37:
      if (!v25)
      {
        v52 = __dst;
        if (&v97 != __dst && __dst)
        {
          __dst = 0;
          v95 = 0;
          WTF::fastFree((unint64_t)v52, v12, v13, v14, v15, v16, v17, v18);
        }
        goto LABEL_58;
      }
    }
    v8 = 0;
    if (v25 <= 1)
      v35 = 1;
    else
      v35 = v25;
    v36 = 2 * v35;
    while (1)
    {
      v37 = *((unsigned __int8 *)__dst + v8 + 1);
      if ((v37 & 0x7Fu) >= 0x40)
        goto LABEL_127;
      if (((v27 >> (v37 & 0x7F)) & 1) != 0)
        break;
      v8 += 2;
      if (v36 == v8)
        goto LABEL_37;
    }
    v38 = *((unsigned __int8 *)__dst + v8);
    if (v38 == v37)
    {
LABEL_35:
      memmove(&v28[v8], &v28[v8 + 2], 2 * v29 - v8 - 2);
      v25 = v96 - 1;
      goto LABEL_36;
    }
    v38 = (char)v38;
    if ((char)v38 == 63)
    {
      if ((char)v37 != 31)
      {
        v9 = v37 & 0x1F | 0xD2800000;
        goto LABEL_32;
      }
    }
    else
    {
      v39 = v37 == 31 || v38 == 31;
      if (!v39)
      {
        v9 = v37 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
LABEL_32:
        v40 = *(_DWORD *)(a2 + 200);
        if (v40 + 4 > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
          v40 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v40) = v9;
        *(_DWORD *)(a2 + 200) += 4;
        v28 = (char *)__dst;
        v29 = v96;
        goto LABEL_35;
      }
    }
    v9 = (char)v37 | (32 * v38) | 0x91000000;
    goto LABEL_32;
  }
LABEL_58:
  __dst = &v97;
  v95 = 1;
  if (v22)
  {
    v97 = v22;
    v96 = 1;
    v22 = 509624320;
    v64 = 1;
LABEL_83:
    v65 = 0;
    v66 = 0;
    while (((*((_BYTE *)__dst + v65 + 1) + 32) & 0x40) == 0)
    {
      v66 |= 1 << (*((_BYTE *)__dst + v65 + 1) + 32);
      v65 += 2;
      if (2 * v64 == v65)
      {
        v67 = 0;
        while (1)
        {
          v68 = (*((_BYTE *)__dst + v67) + 32) & 0x7F;
          if (v68 >= 0x40)
            goto LABEL_127;
          v66 &= ~(1 << v68);
          v67 += 2;
          if (2 * v64 == v67)
          {
            v69 = (uint8x8_t)vcnt_s8((int8x8_t)v66);
            v69.i16[0] = vaddlv_u8(v69);
            v70 = v69.i32[0];
            v71 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v66));
            v71.i16[0] = vaddlv_u8(v71);
            if (v71.i32[0] + v70)
            {
              v24 = 0;
              if (v64 <= 1)
                v72 = 1;
              else
                v72 = v64;
              v73 = 2 * v72;
              while (1)
              {
                v9 = (char)v24[(_QWORD)__dst + 1];
                v74 = (v24[(_QWORD)__dst + 1] + 32) & 0x7F;
                if (v74 >= 0x40)
                  goto LABEL_127;
                if (((v66 >> v74) & 1) != 0)
                {
                  v8 = (char)v24[(_QWORD)__dst];
                  v75 = *(_DWORD *)(a2 + 200);
                  if (v75 + 4 > *(_DWORD *)(a2 + 192))
                  {
                    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v12, v13, v14, v15, v16, v17, v18);
                    v75 = *(_DWORD *)(a2 + 200);
                  }
                  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v75) = v9 | (32 * v8) | 0x1E604000;
                  *(_DWORD *)(a2 + 200) += 4;
                  memmove(&v24[(_QWORD)__dst], &v24[(_QWORD)__dst + 2], 2 * v96 - (_QWORD)v24 - 2);
                  v64 = v96 - 1;
                  goto LABEL_101;
                }
                v24 += 2;
                if ((unsigned __int8 *)v73 == v24)
                  goto LABEL_102;
              }
            }
            v9 = *(char *)__dst;
            v76 = *((_BYTE *)__dst + 1);
            JSC::MacroAssemblerARM64::swapDouble((_DWORD *)a2, v9, v76, v14, v15, v16, v17, v18);
            memmove(__dst, (char *)__dst + 2, 2 * v96 - 2);
            v77 = v96 - 1;
            v39 = v96 == 1;
            v96 = v77;
            v24 = (unsigned __int8 *)__dst;
            v78 = (char *)__dst + 2 * v77;
            if (v39)
            {
              v81 = 0;
              v82 = 0;
              v8 = 0;
              v12 = (char *)__dst + 2 * v77;
            }
            else
            {
              v79 = 2 * v77;
              v80 = __dst;
              while (*v80 != v76)
              {
                v80 += 2;
                v79 -= 2;
                if (!v79)
                  goto LABEL_111;
              }
              *v80 = v9;
LABEL_111:
              v8 = 0;
              v9 = (uint64_t)v24;
              v12 = v78;
              v83 = v78;
              v90 = v78;
              do
              {
                if (*v24 == v24[1])
                {
                  v84 = v24;
                  if (v83 != (char *)__dst + 2 * v96)
                  {
                    if (v24 == (unsigned __int8 *)v12)
                    {
                      v84 = (unsigned __int8 *)v83;
                    }
                    else
                    {
                      v92 = v83;
                      v93 = (JSC::AssemblerBuffer *)(v9 - (_QWORD)v12);
                      memmove(v83, v12, v9 - (_QWORD)v12);
                      v78 = v90;
                      v84 = (unsigned __int8 *)v93 + (_QWORD)v92;
                    }
                  }
                  v12 = (char *)(v24 + 2);
                  v8 = (v8 + 1);
                  v83 = (char *)v84;
                }
                v24 += 2;
                v9 += 2;
              }
              while (v24 < (unsigned __int8 *)v78);
              v24 = (unsigned __int8 *)__dst;
              v81 = v96;
              v82 = v96;
              v78 = v83;
            }
            v85 = (char *)&v24[2 * v81];
            if (v12 != v85)
            {
              memmove(v78, v12, v85 - v12);
              v82 = v96;
            }
            v64 = v82 - v8;
LABEL_101:
            v96 = v64;
LABEL_102:
            if (!v64)
            {
              v86 = __dst;
              if (&v97 != __dst && __dst)
              {
                __dst = 0;
                v95 = 0;
                WTF::fastFree((unint64_t)v86, v12, v13, v14, v15, v16, v17, v18);
              }
              goto LABEL_59;
            }
            goto LABEL_83;
          }
        }
      }
    }
LABEL_127:
    __break(1u);
LABEL_128:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v8, (uint64_t)v12, v13, v14, v15, v16, v17, v18);
    v60 = *(_DWORD *)v9;
    goto LABEL_71;
  }
LABEL_59:
  if (v20 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v21, 0, v14, v15, v16, v17, v18);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v20 << 35) + 0x380000001ALL, 0, v14, v15, v16, v17, v18);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v53, v54, v55, v56, v57, v58, (int *)&__dst);
  *(_QWORD *)(a1 + 64) = __dst;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_64;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v13, v14, v15, v16, v17, v18);
LABEL_64:
    v22 = 0;
    LOBYTE(v21) = 0;
    goto LABEL_65;
  }
  JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,JSC::JSArray *),JSC::JSValueRegs,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 80), *(_BYTE *)(a1 + 74));
  LOBYTE(v21) = v87;
  v22 = v88;
LABEL_65:
  v59 = *(unsigned __int8 *)(a1 + 74);
  if (!*(_BYTE *)(a1 + 74))
    goto LABEL_72;
  if (v59 == 31)
  {
    LODWORD(v24) = -1862270945;
  }
  else if (v59 == 255)
  {
    LODWORD(v24) = -1442774017;
  }
  else
  {
    LODWORD(v24) = v59 | 0xAA0003E0;
  }
  v9 = a2 + 200;
  v60 = *(_DWORD *)(a2 + 200);
  v8 = a2 + 56;
  if (v60 + 4 > *(_DWORD *)(a2 + 192))
    goto LABEL_128;
LABEL_71:
  *(_DWORD *)(*(_QWORD *)v8 + v60) = (_DWORD)v24;
  *(_DWORD *)v9 += 4;
LABEL_72:
  if (*(_BYTE *)(a1 + 72))
  {
LABEL_78:
    if (!*(_BYTE *)(a1 + 73))
    {
      if (v22)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v21, v13, v14, v15, v16, v17, v18);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v13, v14, v15, v16, v17, v18);
    return;
  }
  v61 = *(_DWORD *)(a1 + 92);
  if (!v61)
  {
LABEL_77:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_78;
  }
  v62 = v61 - 1;
  v63 = 16 * (v61 - 1);
  while (*(_DWORD *)(a1 + 92) > v62)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v63, v13, v14, v15, v16, v17, v18);
    v63 -= 16;
    if (--v62 == -1)
      goto LABEL_77;
  }
  __break(0xC471u);
}

void JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,double,JSC::JSArray *),JSC::JSValueRegs,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;

  v28 = 0;
  v29 = 2;
  v6 = *(_QWORD *)(a1 + 3960);
  JSC::CodeOrigin::CodeOrigin(&v27, (const JSC::CodeOrigin *)(*(_QWORD *)(a1 + 3976) + 8));
  v18 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v6, (unint64_t *)&v27, &v29, &v28, v7, v8, v9, v10);
  if ((v27 & 1) != 0 && (v27 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v27 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  if ((v18 & 1) != 0)
  {
    v19 = a2[3];
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = 16 * v19;
      v22 = (char *)(*(_QWORD *)a2 + 2);
      while (1)
      {
        v24 = *v22;
        v22 += 16;
        v23 = v24;
        if ((v24 & 0x40) != 0)
          break;
        v20 |= 1 << v23;
        v21 -= 16;
        if (!v21)
          goto LABEL_10;
      }
    }
    else
    {
      v20 = 0;
LABEL_10:
      if ((a3 & 0x40) == 0)
      {
        v25 = v20 | (1 << a3);
        if ((v25 & 2) != 0)
        {
          v26 = (unsigned __int16)~(_WORD)v25 & 0xFFFE;
          if (v26)
            JSC::MacroAssemblerARM64::move((_DWORD *)a1, 1, __clz(__rbit64(v26)), v13, v14, v15, v16, v17);
        }
        goto LABEL_4;
      }
    }
    __break(1u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v12, v13, v14, v15, v16, v17);
LABEL_4:
  if ((v29 & 1) != 0 && (v29 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v29 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::VM *,JSC::WatchpointSet *),JSC::NoResultTag,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573AD0;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::VM *,JSC::WatchpointSet *),JSC::NoResultTag,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573AD0;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::VM *,JSC::WatchpointSet *),JSC::NoResultTag>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::VM *,JSC::WatchpointSet *),JSC::NoResultTag,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  char v51;
  unint64_t v52;
  unsigned int v53;
  _DWORD *v54;
  unsigned int v55;
  _QWORD *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int *v62;
  uint64_t v63;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v18 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v18, v12, v13, v14, v15, v16, v17);
        ++v8;
        v18 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(_QWORD *)(a1 + 136);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a1 + 144), 1, v13, v14, v15, v16, v17);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v19, 0, v20, v21, v22, v23, v24);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v25, v26, v27, v28, v29, v30, (int *)&v60);
  *(_QWORD *)(a1 + 64) = v60;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_8;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0, v31, v32, v33, v34, v35, v36);
LABEL_8:
    v37 = 0;
    LOBYTE(v38) = 0;
    goto LABEL_9;
  }
  v62 = 0;
  v63 = 2;
  v42 = *(_QWORD *)(a2 + 3960);
  v43 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v43 & 1) != 0)
  {
    v19 = *(_QWORD *)(a2 + 3960);
    v8 = *(_QWORD *)(v43 & 0xFFFFFFFF8);
    if ((v43 & 2) != 0
      || ((v9 = *(unsigned int *)((v43 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v57 = (_DWORD)v9 == -1)
        : (v57 = 1),
          v57))
    {
      v58 = 2;
    }
    else
    {
LABEL_52:
      if (v9 >> 28)
      {
        v59 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v59 = v8;
        *(_DWORD *)(v59 + 8) = v9;
        v58 = 1;
        v8 = v59;
      }
      else
      {
        v58 = v8;
        v8 = v9 << 36;
      }
    }
    v43 = v8 | v58;
    v42 = v19;
  }
  v61 = v43;
  v44 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v42, &v61, &v63, &v62, v33, v34, v35, v36);
  if ((v61 & 1) != 0 && (v61 & 0xFFFFFFFF8) != 0)
  {
    v19 = v44;
    WTF::fastFree(v61 & 0xFFFFFFFF8, v45, v31, v32, v33, v34, v35, v36);
    LOBYTE(v44) = v19;
  }
  if ((v44 & 1) != 0)
  {
    v46 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v46)
    {
      v47 = 0;
      v48 = 16 * v46;
      v49 = (char *)(*(_QWORD *)(a1 + 80) + 2);
      do
      {
        v51 = *v49;
        v49 += 16;
        v50 = v51;
        if ((v51 & 0x40) != 0)
        {
          __break(1u);
          goto LABEL_52;
        }
        v47 |= 1 << v50;
        v48 -= 16;
      }
      while (v48);
      if ((v47 & 1) == 0)
        goto LABEL_27;
      v52 = (unsigned __int16)~(_WORD)v47;
      if (!v52)
      {
        v37 = 1;
        LOBYTE(v38) = -1;
        goto LABEL_30;
      }
      v38 = __clz(__rbit64(v52));
      if (v38)
      {
        if (v38 == 31)
          v53 = -1862270945;
        else
          v53 = v38 | 0xAA0003E0;
        v54 = (_DWORD *)(a2 + 200);
        v55 = *(_DWORD *)(a2 + 200);
        v56 = (_QWORD *)(a2 + 56);
        if (v55 + 4 > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v45, v31, v32, v33, v34, v35, v36);
          v54 = (_DWORD *)(a2 + 200);
          v56 = (_QWORD *)(a2 + 56);
          v55 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*v56 + v55) = v53;
        *v54 += 4;
      }
    }
    else
    {
LABEL_27:
      LOBYTE(v38) = 0;
    }
    v37 = 1;
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0, v31, v32, v33, v34, v35, v36);
    LOBYTE(v38) = 0;
    v37 = 0;
  }
LABEL_30:
  if ((v63 & 1) != 0 && (v63 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v63 & 0xFFFFFFFF8, v45, v31, v32, v33, v34, v35, v36);
LABEL_9:
  if (*(_BYTE *)(a1 + 72))
  {
LABEL_15:
    if (v37)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v38, v31, v32, v33, v34, v35, v36);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v31, v32, v33, v34, v35, v36);
    return;
  }
  v39 = *(_DWORD *)(a1 + 92);
  if (!v39)
  {
LABEL_14:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_15;
  }
  v40 = v39 - 1;
  v41 = 16 * (v39 - 1);
  while (*(_DWORD *)(a1 + 92) > v40)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v41, v31, v32, v33, v34, v35, v36);
    v41 -= 16;
    if (--v40 == -1)
      goto LABEL_14;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573B30;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573B30;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint8x8_t v31;
  __int32 v32;
  uint8x8_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned __int8 *v53;
  char *v54;
  unsigned __int8 *v55;
  int64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  JSC::AssemblerBuffer *v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  int v94;
  __int16 *v95;
  uint64_t v96;
  void *__dst;
  int v98;
  unsigned int v99;
  __int16 v100;
  unint64_t v101;
  unsigned int *v102;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v17 = 0;
      v18 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v17, v11, v12, v13, v14, v15, v16);
        ++v18;
        v17 += 16;
      }
      while (v18 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(unsigned int *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(unsigned __int8 *)(a1 + 152);
  v22 = &v100;
  __dst = &v100;
  v98 = 1;
  if (v21 != 1)
  {
    v100 = v21 | 0x100;
    v99 = 1;
    v23 = -1862270976;
    v24 = 1;
    while (1)
    {
      v25 = 0;
      v26 = 0;
      v27 = (char *)__dst;
      v28 = v24;
      do
      {
        if ((*((_BYTE *)__dst + v25 + 1) & 0x40) != 0)
          goto LABEL_101;
        v26 |= 1 << *((_BYTE *)__dst + v25 + 1);
        v25 += 2;
      }
      while (2 * v24 != v25);
      v29 = 0;
      do
      {
        v30 = *((_BYTE *)__dst + v29) & 0x7F;
        if (v30 >= 0x40)
          goto LABEL_101;
        v26 &= ~(1 << v30);
        v29 += 2;
      }
      while (2 * v24 != v29);
      v31 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v31.i16[0] = vaddlv_u8(v31);
      v32 = v31.i32[0];
      v33 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v26));
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.i32[0] + v32)
        break;
      v94 = v23;
      v95 = v22;
      v93 = (_DWORD *)v19;
      v42 = *(_BYTE *)__dst;
      v43 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v43, v12, v13, v14, v15, v16);
      memmove(__dst, (char *)__dst + 2, 2 * v99 - 2);
      v44 = v99 - 1;
      v39 = v99 == 1;
      v99 = v44;
      v45 = (unsigned __int8 *)__dst;
      v46 = (char *)__dst + 2 * v44;
      if (v39)
      {
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v10 = (char *)__dst + 2 * v44;
      }
      else
      {
        v51 = 2 * v44;
        v52 = __dst;
        while (*v52 != v43)
        {
          v52 += 2;
          v51 -= 2;
          if (!v51)
            goto LABEL_47;
        }
        *v52 = v42;
LABEL_47:
        v49 = 0;
        v53 = v45;
        v10 = v46;
        v54 = v46;
        do
        {
          if (*v45 == v45[1])
          {
            v55 = v45;
            if (v54 != (char *)__dst + 2 * v99)
            {
              if (v45 == (unsigned __int8 *)v10)
              {
                v55 = (unsigned __int8 *)v54;
              }
              else
              {
                v56 = v53 - (unsigned __int8 *)v10;
                memmove(v54, v10, v53 - (unsigned __int8 *)v10);
                v55 = (unsigned __int8 *)&v54[v56];
              }
            }
            v10 = (char *)(v45 + 2);
            ++v49;
            v54 = (char *)v55;
          }
          v45 += 2;
          v53 += 2;
        }
        while (v45 < (unsigned __int8 *)v46);
        v45 = (unsigned __int8 *)__dst;
        v47 = v99;
        v48 = v99;
        v46 = v54;
      }
      v50 = (char *)&v45[2 * v47];
      if (v10 != v50)
      {
        memmove(v46, v10, v50 - v10);
        v48 = v99;
      }
      v24 = v48 - v49;
      v19 = (uint64_t)v93;
      v22 = v95;
      v23 = v94;
LABEL_36:
      v99 = v24;
LABEL_37:
      if (!v24)
      {
        v57 = __dst;
        if (v22 != __dst && __dst)
        {
          __dst = 0;
          v98 = 0;
          WTF::fastFree((unint64_t)v57, v10, v11, v12, v13, v14, v15, v16);
        }
        goto LABEL_58;
      }
    }
    v34 = 0;
    if (v24 <= 1)
      v35 = 1;
    else
      v35 = v24;
    v36 = 2 * v35;
    while (1)
    {
      v37 = *((unsigned __int8 *)__dst + v34 + 1);
      if ((v37 & 0x7Fu) >= 0x40)
        goto LABEL_101;
      if (((v26 >> (v37 & 0x7F)) & 1) != 0)
        break;
      v34 += 2;
      if (v36 == v34)
        goto LABEL_37;
    }
    v38 = *((unsigned __int8 *)__dst + v34);
    if (v38 == v37)
    {
LABEL_35:
      memmove(&v27[v34], &v27[v34 + 2], 2 * v28 - v34 - 2);
      v24 = v99 - 1;
      goto LABEL_36;
    }
    v38 = (char)v38;
    if ((char)v38 == 63)
    {
      if ((char)v37 != 31)
      {
        v40 = v37 & 0x1F | 0xD2800000;
        goto LABEL_32;
      }
    }
    else
    {
      v39 = v37 == 31 || v38 == 31;
      if (!v39)
      {
        v40 = v37 & 0xFFE0FFFF | ((v38 & 0x1F) << 16) | 0xAA0003E0;
LABEL_32:
        v41 = *(_DWORD *)(a2 + 200);
        if (v41 + 4 > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v10, v11, v12, v13, v14, v15, v16);
          v41 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v41) = v40;
        *(_DWORD *)(a2 + 200) += 4;
        v27 = (char *)__dst;
        v28 = v99;
        goto LABEL_35;
      }
    }
    v40 = (char)v37 | (32 * v38) | v23;
    goto LABEL_32;
  }
LABEL_58:
  if (v19 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v20, 0, v12, v13, v14, v15, v16);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v19 << 35) + 0x380000001ALL, 0, v12, v13, v14, v15, v16);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v58, v59, v60, v61, v62, v63, (int *)&v96);
  *(_QWORD *)(a1 + 64) = v96;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_63;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v11, v12, v13, v14, v15, v16);
LABEL_63:
    LODWORD(v19) = 0;
    LOBYTE(v64) = 0;
    goto LABEL_64;
  }
  v72 = *(_BYTE *)(a1 + 74);
  __dst = (void *)2;
  v102 = 0;
  v73 = *(_QWORD *)(a2 + 3960);
  v74 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v74 & 1) != 0)
  {
    v19 = *(_QWORD *)(v74 & 0xFFFFFFFF8);
    if ((v74 & 2) != 0
      || ((v89 = *(unsigned int *)((v74 & 0xFFFFFFFF8) + 8), (_DWORD)v89 != 0x3FFFFFFF)
        ? (v90 = (_DWORD)v89 == -1)
        : (v90 = 1),
          v90))
    {
      v91 = 2;
    }
    else if (v89 >> 28)
    {
      v92 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v92 = v19;
      *(_DWORD *)(v92 + 8) = v89;
      v91 = 1;
      v19 = v92;
    }
    else
    {
      v91 = *(_QWORD *)(v74 & 0xFFFFFFFF8);
      v19 = v89 << 36;
    }
    v74 = v19 | v91;
  }
  v101 = v74;
  v75 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v73, &v101, (uint64_t *)&__dst, &v102, v13, v14, v15, v16);
  if ((v101 & 1) != 0 && (v101 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v101 & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
  if ((v75 & 1) != 0)
  {
    v76 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v76)
    {
      v77 = 0;
      v78 = 16 * v76;
      v79 = (char *)(*(_QWORD *)(a1 + 80) + 2);
      while (1)
      {
        v81 = *v79;
        v79 += 16;
        v80 = v81;
        if ((v81 & 0x40) != 0)
          break;
        v77 |= 1 << v80;
        v78 -= 16;
        if (!v78)
          goto LABEL_95;
      }
    }
    else
    {
      v77 = 0;
LABEL_95:
      if ((v72 & 0x40) == 0)
      {
        LODWORD(v19) = 1;
        v82 = v77 | (1 << v72);
        if ((v82 & 2) != 0)
        {
          v83 = (unsigned __int16)~(_WORD)v82 & 0xFFFE;
          if (v83)
          {
            v64 = __clz(__rbit64(v83));
            if (v64 == 1)
            {
              LODWORD(v19) = 1;
            }
            else
            {
              if (v64 == 31)
              {
                v19 = a2 + 200;
                v85 = *(_DWORD *)(a2 + 200);
                v86 = (JSC::AssemblerBuffer *)(a2 + 56);
                v87 = v85 + 4;
                v88 = *(_DWORD *)(a2 + 192);
                v84 = -1862270913;
              }
              else
              {
                v84 = v64 | 0xAA0103E0;
                v19 = a2 + 200;
                v85 = *(_DWORD *)(a2 + 200);
                v86 = (JSC::AssemblerBuffer *)(a2 + 56);
                v87 = v85 + 4;
                v88 = *(_DWORD *)(a2 + 192);
              }
              if (v87 > v88)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v86, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
                v85 = *(_DWORD *)v19;
              }
              *(_DWORD *)(*(_QWORD *)v86 + v85) = v84;
              *(_DWORD *)v19 += 4;
              LODWORD(v19) = 1;
            }
          }
          else
          {
            LODWORD(v19) = 1;
            LOBYTE(v64) = -1;
          }
          goto LABEL_86;
        }
        goto LABEL_102;
      }
    }
LABEL_101:
    __break(1u);
LABEL_102:
    LOBYTE(v64) = v19;
    goto LABEL_86;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v11, v12, v13, v14, v15, v16);
  LOBYTE(v64) = 0;
  LODWORD(v19) = 0;
LABEL_86:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v10, v11, v12, v13, v14, v15, v16);
LABEL_64:
  v65 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v65 == 31)
    {
      v66 = -1862270945;
    }
    else if (v65 == 255)
    {
      v66 = -1442774017;
    }
    else
    {
      v66 = v65 | 0xAA0003E0;
    }
    v68 = (unsigned int *)(a2 + 200);
    v67 = *(_DWORD *)(a2 + 200);
    if (v67 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v10, v11, v12, v13, v14, v15, v16);
      v67 = *v68;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v67) = v66;
    *v68 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_78;
  v69 = *(_DWORD *)(a1 + 92);
  if (!v69)
  {
LABEL_77:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_78:
    if ((_DWORD)v19)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v64, v11, v12, v13, v14, v15, v16);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v11, v12, v13, v14, v15, v16);
    return;
  }
  v70 = v69 - 1;
  v71 = 16 * (v69 - 1);
  while (*(_DWORD *)(a1 + 92) > v70)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v71, v11, v12, v13, v14, v15, v16);
    v71 -= 16;
    if (--v70 == -1)
      goto LABEL_77;
  }
  __break(0xC471u);
}

void JSC::DFG::SpeculativeJIT::compileTypeOf(JSC::DFG::Node *)::$_0::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::AssemblerBuffer *v25;
  int i;
  unsigned int v27;
  char v28;
  uint64_t v29;
  int *v30;
  int *v31;
  int v32;
  uint64_t v33;
  JSC::AssemblerBuffer *v34;
  int v35;
  int v36;
  char v37;
  __int16 v38;
  char v39;
  unsigned int v40;
  JSC::ARM64LogicalImmediate *v41;

  v9 = *(_QWORD *)a1;
  v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 352) + 16) + 41984);
  switch(a2)
  {
    case 1:
      v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 352) + 16) + 42056);
      break;
    case 2:
      break;
    case 3:
      v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 352) + 16) + 42008);
      break;
    case 4:
      v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 352) + 16) + 42040);
      break;
    case 5:
      v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 352) + 16) + 42048);
      break;
    case 6:
      v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 352) + 16) + 42024);
      break;
    case 7:
      v10 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 352) + 16) + 42000);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197C87584);
  }
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v40, (JSC::DFG::JITCompiler *)v9, *v10, a4, a5, a6, a7, a8);
  v16 = **(_BYTE **)(a1 + 8);
  if (v40 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, (uint64_t)v41, v16, v11, v12, v13, v14, v15);
  else
    JSC::MacroAssemblerARM64::load64(v9, ((unint64_t)v40 << 35) + 0x380000001ALL, v16, v11, v12, v13, v14, v15);
  v24 = *(_QWORD *)(a1 + 16);
  v25 = (JSC::AssemblerBuffer *)(v9 + 56);
  for (i = *(_DWORD *)(v9 + 200); i < *(_DWORD *)(v9 + 52); *(_DWORD *)(v9 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v9 + 192))
    {
      v34 = v25;
      JSC::AssemblerBuffer::outOfLineGrow(v25, v17, v18, v19, v20, v21, v22, v23);
      v25 = v34;
      i = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + i) = -721215457;
    i = *(_DWORD *)(v9 + 200) + 4;
  }
  v27 = i;
  if ((i + 4) > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v25, v17, v18, v19, v20, v21, v22, v23);
    v27 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v27) = 335544320;
  *(_DWORD *)(v9 + 200) += 4;
  if (*(_BYTE *)(v9 + 328))
    v28 = 69;
  else
    v28 = 65;
  v35 = i;
  v36 = 0;
  v37 = v28;
  v38 = 15;
  v39 = -1;
  if (i != -1)
  {
    v29 = *(unsigned int *)(v24 + 12);
    if ((_DWORD)v29 == *(_DWORD *)(v24 + 8))
    {
      v30 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24, (void *)(v29 + 1), (unint64_t)&v35, v19, v20, v21, v22, v23);
      v32 = *v30;
      v31 = v30 + 1;
      v33 = *(_QWORD *)v24 + 12 * *(unsigned int *)(v24 + 12);
      *(_DWORD *)v33 = v32;
    }
    else
    {
      v31 = &v36;
      v33 = *(_QWORD *)v24 + 12 * v29;
      *(_DWORD *)v33 = i;
    }
    *(_QWORD *)(v33 + 4) = *(_QWORD *)v31;
    ++*(_DWORD *)(v24 + 12);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573B90;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573B90;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint8x8_t v32;
  __int32 v33;
  uint8x8_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned __int8 *v53;
  char *v54;
  unsigned __int8 *v55;
  int64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  int v71;
  __int16 *v72;
  void *__dst;
  int v74;
  unsigned int v75;
  __int16 v76;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v18 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v18, v12, v13, v14, v15, v16, v17);
        v8 = (JSC::AssemblerBuffer *)((char *)v8 + 1);
        v18 += 16;
      }
      while ((unint64_t)v8 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(unsigned int *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(unsigned __int8 *)(a1 + 152);
  v22 = &v76;
  __dst = &v76;
  v23 = 1;
  v74 = 1;
  if (v21 != 1)
  {
    v76 = v21 | 0x100;
    v75 = 1;
    v24 = -1862270976;
    v25 = 1;
    do
    {
      v26 = 0;
      v27 = 0;
      v28 = (char *)__dst;
      v29 = v25;
      do
      {
        if ((*((_BYTE *)__dst + v26 + 1) & 0x40) != 0)
        {
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
        v27 |= 1 << *((_BYTE *)__dst + v26 + 1);
        v26 += 2;
      }
      while (2 * v25 != v26);
      v30 = 0;
      do
      {
        v31 = *((_BYTE *)__dst + v30) & 0x7F;
        if (v31 >= 0x40)
          goto LABEL_82;
        v27 &= ~(1 << v31);
        v30 += 2;
      }
      while (2 * v25 != v30);
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v32.i16[0] = vaddlv_u8(v32);
      v33 = v32.i32[0];
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v27));
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] + v33)
      {
        v35 = 0;
        if (v25 <= 1)
          v36 = 1;
        else
          v36 = v25;
        v37 = 2 * v36;
        while (1)
        {
          v38 = *((unsigned __int8 *)__dst + v35 + 1);
          if ((v38 & 0x7Fu) >= 0x40)
            goto LABEL_82;
          if (((v27 >> (v38 & 0x7F)) & 1) != 0)
            break;
          v35 += 2;
          if (v37 == v35)
            goto LABEL_37;
        }
        v39 = *((unsigned __int8 *)__dst + v35);
        if (v39 != v38)
        {
          v39 = (char)v39;
          if ((char)v39 == 63)
          {
            if ((char)v38 == 31)
              goto LABEL_31;
            v8 = (JSC::AssemblerBuffer *)(v38 & 0x1F | 0xD2800000);
          }
          else
          {
            v40 = v38 == 31 || v39 == 31;
            if (!v40)
            {
              v8 = (JSC::AssemblerBuffer *)(v38 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0);
              goto LABEL_32;
            }
LABEL_31:
            v8 = (JSC::AssemblerBuffer *)((char)v38 | (32 * v39) | v24);
          }
LABEL_32:
          v41 = *(_DWORD *)(a2 + 200);
          if (v41 + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
            v41 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v41) = (_DWORD)v8;
          *(_DWORD *)(a2 + 200) += 4;
          v28 = (char *)__dst;
          v29 = v75;
        }
        memmove(&v28[v35], &v28[v35 + 2], 2 * v29 - v35 - 2);
        v25 = v75 - 1;
        goto LABEL_36;
      }
      v71 = v24;
      v72 = v22;
      v70 = v19;
      v42 = *(_BYTE *)__dst;
      v43 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v43, v13, v14, v15, v16, v17);
      memmove(__dst, (char *)__dst + 2, 2 * v75 - 2);
      v44 = v75 - 1;
      v40 = v75 == 1;
      v75 = v44;
      v45 = (unsigned __int8 *)__dst;
      v46 = (char *)__dst + 2 * v44;
      if (v40)
      {
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v11 = (char *)__dst + 2 * v44;
      }
      else
      {
        v51 = 2 * v44;
        v52 = __dst;
        while (*v52 != v43)
        {
          v52 += 2;
          v51 -= 2;
          if (!v51)
            goto LABEL_47;
        }
        *v52 = v42;
LABEL_47:
        v49 = 0;
        v53 = v45;
        v11 = v46;
        v54 = v46;
        do
        {
          if (*v45 == v45[1])
          {
            v55 = v45;
            if (v54 != (char *)__dst + 2 * v75)
            {
              if (v45 == (unsigned __int8 *)v11)
              {
                v55 = (unsigned __int8 *)v54;
              }
              else
              {
                v56 = v53 - (unsigned __int8 *)v11;
                memmove(v54, v11, v53 - (unsigned __int8 *)v11);
                v55 = (unsigned __int8 *)&v54[v56];
              }
            }
            v11 = (char *)(v45 + 2);
            ++v49;
            v54 = (char *)v55;
          }
          v45 += 2;
          v53 += 2;
        }
        while (v45 < (unsigned __int8 *)v46);
        v45 = (unsigned __int8 *)__dst;
        v47 = v75;
        v48 = v75;
        v46 = v54;
      }
      v50 = (char *)&v45[2 * v47];
      if (v11 != v50)
      {
        memmove(v46, v11, v50 - v11);
        v48 = v75;
      }
      v25 = v48 - v49;
      v19 = v70;
      v22 = v72;
      v23 = 1;
      v24 = v71;
LABEL_36:
      v75 = v25;
LABEL_37:
      ;
    }
    while (v25);
    v57 = __dst;
    if (v22 != __dst && __dst)
    {
      __dst = 0;
      v74 = 0;
      WTF::fastFree((unint64_t)v57, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  if (v19 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v20, 0, v13, v14, v15, v16, v17);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v19 << 35) + 0x380000001ALL, 0, v13, v14, v15, v16, v17);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v58, v59, v60, v61, v62, v63, (int *)&__dst);
  *(_QWORD *)(a1 + 64) = __dst;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_63;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
LABEL_63:
    LODWORD(v19) = 0;
    LOBYTE(v20) = 0;
    goto LABEL_64;
  }
  v69 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 80), *(_BYTE *)(a1 + 74), v13, v14, v15, v16, v17);
  LOBYTE(v20) = v69;
  LODWORD(v19) = HIBYTE(v69);
LABEL_64:
  v64 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v64 == 31)
    {
      LODWORD(v22) = -1862270945;
    }
    else if (v64 == 255)
    {
      LODWORD(v22) = -1442774017;
    }
    else
    {
      LODWORD(v22) = v64 | 0xAA0003E0;
    }
    v23 = a2 + 200;
    v65 = *(_DWORD *)(a2 + 200);
    v8 = (JSC::AssemblerBuffer *)(a2 + 56);
    if (v65 + 4 > *(_DWORD *)(a2 + 192))
    {
LABEL_83:
      JSC::AssemblerBuffer::outOfLineGrow(v8, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
      v65 = *(_DWORD *)v23;
    }
    *(_DWORD *)(*(_QWORD *)v8 + v65) = (_DWORD)v22;
    *(_DWORD *)v23 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_77;
  v66 = *(_DWORD *)(a1 + 92);
  if (!v66)
  {
LABEL_76:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_77:
    if (!*(_BYTE *)(a1 + 73))
    {
      if ((_DWORD)v19)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v20, v12, v13, v14, v15, v16, v17);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v12, v13, v14, v15, v16, v17);
    return;
  }
  v67 = v66 - 1;
  v68 = 16 * (v66 - 1);
  while (*(_DWORD *)(a1 + 92) > v67)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v68, v12, v13, v14, v15, v16, v17);
    v68 -= 16;
    if (--v67 == -1)
      goto LABEL_76;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573BF0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573BF0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  JSC::AssemblerBuffer *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int *v63;
  uint64_t v64;

  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_71;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a1 + 160), 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 152), v15, v16, v17, v18, v19, v20, (int *)&v61);
  v28 = 0;
  LOBYTE(v29) = 0;
  *(_QWORD *)(a1 + 92) = v61;
  if (!*(_BYTE *)(a1 + 101))
  {
    if (*(_BYTE *)(a1 + 100))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v22, v23, v24, v25, v26, v27);
      v28 = 0;
      LOBYTE(v29) = 0;
      goto LABEL_17;
    }
    v30 = *(_BYTE *)(a1 + 102);
    v63 = 0;
    v64 = 2;
    v31 = *(_QWORD *)(a2 + 3960);
    v32 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
    if ((v32 & 1) != 0)
    {
      v55 = *(_QWORD *)(a2 + 3960);
      v56 = *(_QWORD *)(v32 & 0xFFFFFFFF8);
      if ((v32 & 2) != 0
        || ((v57 = *(unsigned int *)((v32 & 0xFFFFFFFF8) + 8), (_DWORD)v57 != 0x3FFFFFFF)
          ? (v58 = (_DWORD)v57 == -1)
          : (v58 = 1),
            v58))
      {
        v59 = 2;
      }
      else if (v57 >> 28)
      {
        v60 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v60 = v56;
        *(_DWORD *)(v60 + 8) = v57;
        v59 = 1;
        v56 = v60;
      }
      else
      {
        v59 = *(_QWORD *)(v32 & 0xFFFFFFFF8);
        v56 = v57 << 36;
      }
      v32 = v56 | v59;
      v31 = v55;
    }
    v62 = v32;
    v33 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v31, &v62, &v64, &v63, v24, v25, v26, v27);
    if ((v62 & 1) != 0 && (v62 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v62 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
    if ((v33 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v22, v23, v24, v25, v26, v27);
      LOBYTE(v29) = 0;
      v28 = 0;
LABEL_16:
      if ((v64 & 1) != 0 && (v64 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v64 & 0xFFFFFFFF8, v21, v22, v23, v24, v25, v26, v27);
      goto LABEL_17;
    }
    v41 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v41)
    {
      v42 = 0;
      v43 = 16 * v41;
      v44 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v46 = *v44;
        v44 += 16;
        v45 = v46;
        if ((v46 & 0x40) != 0)
          break;
        v42 |= 1 << v45;
        v43 -= 16;
        if (!v43)
          goto LABEL_41;
      }
    }
    else
    {
      v42 = 0;
LABEL_41:
      if ((v30 & 0x40) == 0)
      {
        v28 = 1;
        v47 = v42 | (1 << v30);
        if ((v47 & 2) != 0)
        {
          v48 = (unsigned __int16)~(_WORD)v47 & 0xFFFE;
          if (v48)
          {
            v29 = __clz(__rbit64(v48));
            if (v29 == 1)
            {
              v28 = 1;
            }
            else
            {
              if (v29 == 31)
              {
                v51 = (unsigned int *)(a2 + 200);
                v50 = *(_DWORD *)(a2 + 200);
                v52 = (JSC::AssemblerBuffer *)(a2 + 56);
                v53 = v50 + 4;
                v54 = *(_DWORD *)(a2 + 192);
                v49 = -1862270913;
              }
              else
              {
                v49 = v29 | 0xAA0103E0;
                v51 = (unsigned int *)(a2 + 200);
                v50 = *(_DWORD *)(a2 + 200);
                v52 = (JSC::AssemblerBuffer *)(a2 + 56);
                v53 = v50 + 4;
                v54 = *(_DWORD *)(a2 + 192);
              }
              if (v53 > v54)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v52, (uint64_t)v21, v22, v23, v24, v25, v26, v27);
                v50 = *v51;
              }
              *(_DWORD *)(*(_QWORD *)v52 + v50) = v49;
              *v51 += 4;
              v28 = 1;
            }
          }
          else
          {
            v28 = 1;
            LOBYTE(v29) = -1;
          }
        }
        else
        {
          LOBYTE(v29) = 1;
        }
        goto LABEL_16;
      }
    }
LABEL_71:
    __break(1u);
LABEL_72:
    __break(0xC471u);
    return;
  }
LABEL_17:
  v34 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v34 == 31)
    {
      v35 = -1862270945;
    }
    else if (v34 == 255)
    {
      v35 = -1442774017;
    }
    else
    {
      v35 = v34 | 0xAA0003E0;
    }
    v37 = (unsigned int *)(a2 + 200);
    v36 = *(_DWORD *)(a2 + 200);
    if (v36 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v21, v22, v23, v24, v25, v26, v27);
      v36 = *v37;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = v35;
    *v37 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v38 = *(_DWORD *)(a1 + 116);
    if (v38)
    {
      v39 = v38 - 1;
      v40 = 16 * (v38 - 1);
      while (*(_DWORD *)(a1 + 116) > v39)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v40, v22, v23, v24, v25, v26, v27);
        v40 -= 16;
        if (--v39 == -1)
          goto LABEL_30;
      }
      goto LABEL_72;
    }
LABEL_30:
    *(_BYTE *)(a2 + 5768) = 0;
  }
  if (v28)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v29, v22, v23, v24, v25, v26, v27);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, v22, v23, v24, v25, v26, v27);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,unsigned long>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573C50;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,unsigned long>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573C50;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *,unsigned long),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::Butterfly *> (*)(JSC::VM *,unsigned long),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,unsigned long>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  JSC::AssemblerBuffer *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int *v69;
  uint64_t v70;

  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_70;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(_QWORD *)(a1 + 160);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a1 + 168), 1, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v15, 0, v16, v17, v18, v19, v20);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 152), v21, v22, v23, v24, v25, v26, (int *)&v67);
  v34 = 0;
  LOBYTE(v35) = 0;
  *(_QWORD *)(a1 + 92) = v67;
  if (!*(_BYTE *)(a1 + 101))
  {
    if (*(_BYTE *)(a1 + 100))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v28, v29, v30, v31, v32, v33);
      v34 = 0;
      LOBYTE(v35) = 0;
      goto LABEL_17;
    }
    v36 = *(_BYTE *)(a1 + 102);
    v69 = 0;
    v70 = 2;
    v37 = *(_QWORD *)(a2 + 3960);
    v38 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
    if ((v38 & 1) != 0)
    {
      v61 = *(_QWORD *)(a2 + 3960);
      v62 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
      if ((v38 & 2) != 0
        || ((v63 = *(unsigned int *)((v38 & 0xFFFFFFFF8) + 8), (_DWORD)v63 != 0x3FFFFFFF)
          ? (v64 = (_DWORD)v63 == -1)
          : (v64 = 1),
            v64))
      {
        v65 = 2;
      }
      else if (v63 >> 28)
      {
        v66 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v66 = v62;
        *(_DWORD *)(v66 + 8) = v63;
        v65 = 1;
        v62 = v66;
      }
      else
      {
        v65 = *(_QWORD *)(v38 & 0xFFFFFFFF8);
        v62 = v63 << 36;
      }
      v38 = v62 | v65;
      v37 = v61;
    }
    v68 = v38;
    v39 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v37, &v68, &v70, &v69, v30, v31, v32, v33);
    if ((v68 & 1) != 0 && (v68 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v68 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
    if ((v39 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v28, v29, v30, v31, v32, v33);
      LOBYTE(v35) = 0;
      v34 = 0;
LABEL_16:
      if ((v70 & 1) != 0 && (v70 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v70 & 0xFFFFFFFF8, v27, v28, v29, v30, v31, v32, v33);
      goto LABEL_17;
    }
    v47 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v47)
    {
      v48 = 0;
      v49 = 16 * v47;
      v50 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v52 = *v50;
        v50 += 16;
        v51 = v52;
        if ((v52 & 0x40) != 0)
          break;
        v48 |= 1 << v51;
        v49 -= 16;
        if (!v49)
          goto LABEL_41;
      }
    }
    else
    {
      v48 = 0;
LABEL_41:
      if ((v36 & 0x40) == 0)
      {
        v34 = 1;
        v53 = v48 | (1 << v36);
        LOBYTE(v35) = 1;
        if ((v53 & 2) != 0)
        {
          v54 = (unsigned __int16)~(_WORD)v53 & 0xFFFE;
          if (v54)
          {
            v35 = __clz(__rbit64(v54));
            if (v35 == 1)
            {
              v34 = 1;
            }
            else
            {
              if (v35 == 31)
              {
                v57 = (unsigned int *)(a2 + 200);
                v56 = *(_DWORD *)(a2 + 200);
                v58 = (JSC::AssemblerBuffer *)(a2 + 56);
                v59 = v56 + 4;
                v60 = *(_DWORD *)(a2 + 192);
                v55 = -1862270913;
              }
              else
              {
                v55 = v35 | 0xAA0103E0;
                v57 = (unsigned int *)(a2 + 200);
                v56 = *(_DWORD *)(a2 + 200);
                v58 = (JSC::AssemblerBuffer *)(a2 + 56);
                v59 = v56 + 4;
                v60 = *(_DWORD *)(a2 + 192);
              }
              if (v59 > v60)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v58, (uint64_t)v27, v28, v29, v30, v31, v32, v33);
                v56 = *v57;
              }
              *(_DWORD *)(*(_QWORD *)v58 + v56) = v55;
              *v57 += 4;
              v34 = 1;
            }
          }
          else
          {
            v34 = 1;
            LOBYTE(v35) = -1;
          }
        }
        goto LABEL_16;
      }
    }
LABEL_70:
    __break(1u);
LABEL_71:
    __break(0xC471u);
    return;
  }
LABEL_17:
  v40 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v40 == 31)
    {
      v41 = -1862270945;
    }
    else if (v40 == 255)
    {
      v41 = -1442774017;
    }
    else
    {
      v41 = v40 | 0xAA0003E0;
    }
    v43 = (unsigned int *)(a2 + 200);
    v42 = *(_DWORD *)(a2 + 200);
    if (v42 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v27, v28, v29, v30, v31, v32, v33);
      v42 = *v43;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v42) = v41;
    *v43 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v44 = *(_DWORD *)(a1 + 116);
    if (v44)
    {
      v45 = v44 - 1;
      v46 = 16 * (v44 - 1);
      while (*(_DWORD *)(a1 + 116) > v45)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v46, v28, v29, v30, v31, v32, v33);
        v46 -= 16;
        if (--v45 == -1)
          goto LABEL_30;
      }
      goto LABEL_71;
    }
LABEL_30:
    *(_BYTE *)(a2 + 5768) = 0;
  }
  if (v34)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v35, v28, v29, v30, v31, v32, v33);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, v28, v29, v30, v31, v32, v33);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC3DFG20SpeculateCellOperandENS9_21SpeculateInt32OperandENS9_23SpeculateBooleanOperandEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  int v2;

  if ((*(_QWORD *)(a2 + 8) & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v2 = *(char *)(a2 + 16);
    if (v2 > 15)
      v2 = -1;
    --*(_DWORD *)(*(_QWORD *)a2 + 12 * v2 + 4784);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC3DFG20SpeculateCellOperandENS9_21SpeculateInt32OperandENS9_23SpeculateBooleanOperandEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(char *)(a2 + 16);
  if (v2 > 15)
    v2 = -1;
  --*(_DWORD *)(*(_QWORD *)a2 + 12 * v2 + 4784);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3JSC3DFG20SpeculateCellOperandENS9_21SpeculateInt32OperandENS9_23SpeculateBooleanOperandEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(char *)(a2 + 16);
  if (v2 > 15)
    v2 = -1;
  --*(_DWORD *)(*(_QWORD *)a2 + 12 * v2 + 4784);
}

void JSC::DFG::SpeculativeJIT::compileCallDOM(JSC::DFG::Node *)::$_4::operator()(int **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  _BYTE *v53;
  unint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unsigned int v64;
  char v65;

  v8 = a2;
  v10 = **a1;
  if (!v10)
  {
    v12 = (uint64_t *)a1[1];
    v13 = *v12;
    if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
      goto LABEL_26;
    v19 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v19 >= *(unsigned int *)(v13 + 4004))
    {
      __break(0xC471u);
      JUMPOUT(0x197C88EB8);
    }
    if (*(_BYTE *)(*(_QWORD *)(v13 + 3992) + 24 * (int)v19 + 12))
    {
      v20 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(*v12, a2, a3, a4, a5, a6, a7, a8);
      LOBYTE(v15) = v20;
      v21 = v12[1];
      if (v20 != -1)
      {
LABEL_28:
        LOBYTE(v62) = v15;
        v32 = *(unsigned int *)(v21 + 12);
        if ((_DWORD)v32 == *(_DWORD *)(v21 + 8))
        {
          v53 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v21, (WTF *)(v32 + 1), (unint64_t)&v62);
          v32 = *(unsigned int *)(v21 + 12);
          *(_BYTE *)(*(_QWORD *)v21 + v32) = *v53;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)v21 + v32) = v15;
        }
        *(_DWORD *)(v21 + 12) = v32 + 1;
        goto LABEL_31;
      }
    }
    else
    {
LABEL_26:
      v21 = v12[1];
    }
    LOBYTE(v15) = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v13, v8, a3, a4, a5, a6, a7, a8);
    goto LABEL_28;
  }
  v11 = *(_QWORD *)(*(_QWORD *)a1[2] + 8 * (v10 - 1) + 24);
  if (v11 == 0x10000000000)
  {
    v27 = (uint64_t *)a1[5];
    v28 = *v27;
    v29 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v29 >= *(unsigned int *)(*v27 + 4004))
    {
LABEL_83:
      __break(0xC471u);
      JUMPOUT(0x197C88EB0);
    }
    if (*(_BYTE *)(*(_QWORD *)(v28 + 3992) + 24 * (int)v29 + 12))
    {
      v30 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(*v27, a2, a3, a4, a5, a6, a7, a8);
      v31 = v27[1];
      if (v30 != -1)
        goto LABEL_40;
    }
    else
    {
      v31 = v27[1];
    }
    v30 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(v28, v8, a3, a4, a5, a6, a7, a8);
LABEL_40:
    LOBYTE(v62) = v30;
    v38 = *(unsigned int *)(v31 + 12);
    if ((_DWORD)v38 == *(_DWORD *)(v31 + 8))
    {
      v56 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v31, (WTF *)(v38 + 1), (unint64_t)&v62);
      v38 = *(unsigned int *)(v31 + 12);
      *(_BYTE *)(*(_QWORD *)v31 + v38) = *v56;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)v31 + v38) = v30;
    }
    *(_DWORD *)(v31 + 12) = v38 + 1;
    v39 = v27[2];
    *(_QWORD *)&v62 = v28;
    *((_QWORD *)&v62 + 1) = v8;
    LOBYTE(v63) = v30;
    HIDWORD(v63) = *(_DWORD *)((char *)&v60 + 3);
    v64 = 2;
    *(_DWORD *)((char *)&v63 + 1) = v60;
    v40 = *(unsigned int *)(v39 + 12);
    if ((_DWORD)v40 == *(_DWORD *)(v39 + 8))
    {
      v58 = WTF::Vector<std::variant<JSC::DFG::SpeculateCellOperand,JSC::DFG::SpeculateInt32Operand,JSC::DFG::SpeculateBooleanOperand>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v39, v40 + 1, (unint64_t)&v62, a4, a5, a6, a7, a8);
      v41 = *(_QWORD *)v39 + 32 * *(unsigned int *)(v39 + 12);
      *(_BYTE *)v41 = 0;
      *(_DWORD *)(v41 + 24) = -1;
      v42 = *(unsigned int *)(v58 + 24);
      if ((_DWORD)v42 == -1)
      {
LABEL_46:
        v43 = v64;
        ++*(_DWORD *)(v39 + 12);
        if ((_DWORD)v43 != -1)
          ((void (*)(char *, __int128 *))off_1E3573C70[v43])(&v65, &v62);
        goto LABEL_49;
      }
      ((void (*)(char *, uint64_t, unint64_t))off_1E3573C88[v42])(&v65, v41, v58);
    }
    else
    {
      v41 = *(_QWORD *)v39 + 32 * v40;
      *(_BYTE *)v41 = 0;
      *(_DWORD *)(v41 + 24) = -1;
      LODWORD(v42) = v64;
      if (v64 == -1)
      {
        ++*(_DWORD *)(v39 + 12);
LABEL_49:
        if (v30 > 15)
          v44 = -1;
        else
          v44 = v30;
        v45 = v28 + 12 * v44;
LABEL_67:
        --*(_DWORD *)(v45 + 4784);
        goto LABEL_68;
      }
      ((void (*)(char *, uint64_t, __int128 *))off_1E3573C88[v64])(&v65, v41, &v62);
    }
    *(_DWORD *)(v41 + 24) = v42;
    goto LABEL_46;
  }
  if (v11 == 0x300000000)
  {
    v22 = (uint64_t *)a1[4];
    v23 = *v22;
    *(_QWORD *)&v60 = v23;
    *((_QWORD *)&v60 + 1) = a2;
    LOBYTE(v61) = -1;
    v24 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v24 >= *(unsigned int *)(v23 + 4004))
    {
      __break(0xC471u);
      JUMPOUT(0x197C88EC8);
    }
    if (*(_BYTE *)(*(_QWORD *)(v23 + 3992) + 24 * (int)v24 + 12))
    {
      v25 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)v23, a2, (uint64_t)&v61 + 1, a4, a5, a6, a7, a8);
      LOBYTE(v61) = v25;
      v26 = v22[1];
      if (v25 != -1)
        goto LABEL_55;
      v8 = *((_QWORD *)&v60 + 1);
      v23 = v60;
    }
    else
    {
      v26 = v22[1];
    }
    LOBYTE(v25) = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)v23, v8, (uint64_t)&v61 + 1, a4, a5, a6, a7, a8);
    LOBYTE(v61) = v25;
LABEL_55:
    LOBYTE(v62) = v25;
    v46 = *(unsigned int *)(v26 + 12);
    if ((_DWORD)v46 == *(_DWORD *)(v26 + 8))
    {
      v57 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26, (WTF *)(v46 + 1), (unint64_t)&v62);
      v46 = *(unsigned int *)(v26 + 12);
      *(_BYTE *)(*(_QWORD *)v26 + v46) = *v57;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)v26 + v46) = v25;
    }
    *(_DWORD *)(v26 + 12) = v46 + 1;
    v47 = v22[2];
    v63 = v61;
    v62 = v60;
    v64 = 1;
    v48 = *(unsigned int *)(v47 + 12);
    if ((_DWORD)v48 == *(_DWORD *)(v47 + 8))
    {
      v59 = WTF::Vector<std::variant<JSC::DFG::SpeculateCellOperand,JSC::DFG::SpeculateInt32Operand,JSC::DFG::SpeculateBooleanOperand>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v47, v48 + 1, (unint64_t)&v62, a4, a5, a6, a7, a8);
      v49 = *(_QWORD *)v47 + 32 * *(unsigned int *)(v47 + 12);
      *(_BYTE *)v49 = 0;
      *(_DWORD *)(v49 + 24) = -1;
      v50 = *(unsigned int *)(v59 + 24);
      if ((_DWORD)v50 == -1)
      {
LABEL_61:
        v51 = v64;
        ++*(_DWORD *)(v47 + 12);
        if ((_DWORD)v51 != -1)
          ((void (*)(char *, __int128 *))off_1E3573C70[v51])(&v65, &v62);
        goto LABEL_64;
      }
      ((void (*)(char *, uint64_t, unint64_t))off_1E3573C88[v50])(&v65, v49, v59);
    }
    else
    {
      v49 = *(_QWORD *)v47 + 32 * v48;
      *(_BYTE *)v49 = 0;
      *(_DWORD *)(v49 + 24) = -1;
      LODWORD(v50) = v64;
      if (v64 == -1)
      {
        ++*(_DWORD *)(v47 + 12);
LABEL_64:
        v52 = (char)v61;
        if ((char)v61 > 15)
          v52 = -1;
        v45 = v60 + 12 * v52;
        goto LABEL_67;
      }
      ((void (*)(char *, uint64_t, __int128 *))off_1E3573C88[v64])(&v65, v49, &v62);
    }
    *(_DWORD *)(v49 + 24) = v50;
    goto LABEL_61;
  }
  if (v11 != 805306368)
    goto LABEL_83;
  v12 = (uint64_t *)a1[3];
  v13 = *v12;
  if ((a2 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_9;
  v14 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *(unsigned int *)(v13 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C88EC0);
  }
  if (!*(_BYTE *)(*(_QWORD *)(v13 + 3992) + 24 * (int)v14 + 12)
    || (v15 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(*v12, a2, a3, a4, a5, a6, a7, a8), v15 == -1))
  {
LABEL_9:
    LOBYTE(v15) = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v13, v8, a3, a4, a5, a6, a7, a8);
  }
  v65 = v15;
  v16 = v12[1];
  v17 = *(unsigned int *)(v16 + 12);
  if ((_DWORD)v17 == *(_DWORD *)(v16 + 8))
  {
    v55 = (_BYTE *)WTF::Vector<JSC::ARM64Registers::RegisterID,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12[1], (WTF *)(v17 + 1), (unint64_t)&v65);
    v17 = *(unsigned int *)(v16 + 12);
    *(_BYTE *)(*(_QWORD *)v16 + v17) = *v55;
    v18 = v65;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)v16 + v17) = v15;
    v18 = v15;
  }
  *(_DWORD *)(v16 + 12) = v17 + 1;
  JSC::DFG::SpeculativeJIT::speculateString(v13, v8, v18, a4, a5, a6, a7, a8);
LABEL_31:
  v33 = v12[2];
  *(_QWORD *)&v62 = v13;
  *((_QWORD *)&v62 + 1) = v8;
  LOBYTE(v63) = v15;
  v64 = 0;
  v34 = *(unsigned int *)(v33 + 12);
  if ((_DWORD)v34 != *(_DWORD *)(v33 + 8))
  {
    v35 = *(_QWORD *)v33 + 32 * v34;
    *(_BYTE *)v35 = 0;
    *(_DWORD *)(v35 + 24) = -1;
    LODWORD(v36) = v64;
    if (v64 == -1)
    {
      ++*(_DWORD *)(v33 + 12);
      goto LABEL_68;
    }
    ((void (*)(__int128 *, uint64_t, __int128 *))off_1E3573C88[v64])(&v60, v35, &v62);
    goto LABEL_34;
  }
  v54 = WTF::Vector<std::variant<JSC::DFG::SpeculateCellOperand,JSC::DFG::SpeculateInt32Operand,JSC::DFG::SpeculateBooleanOperand>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v33, v34 + 1, (unint64_t)&v62, a4, a5, a6, a7, a8);
  v35 = *(_QWORD *)v33 + 32 * *(unsigned int *)(v33 + 12);
  *(_BYTE *)v35 = 0;
  *(_DWORD *)(v35 + 24) = -1;
  v36 = *(unsigned int *)(v54 + 24);
  if ((_DWORD)v36 != -1)
  {
    ((void (*)(__int128 *, uint64_t, unint64_t))off_1E3573C88[v36])(&v60, v35, v54);
LABEL_34:
    *(_DWORD *)(v35 + 24) = v36;
  }
  v37 = v64;
  ++*(_DWORD *)(v33 + 12);
  if ((_DWORD)v37 != -1)
    ((void (*)(__int128 *, __int128 *))off_1E3573C70[v37])(&v60, &v62);
LABEL_68:
  ++**a1;
}

uint64_t WTF::Vector<JSC::ARM64Registers::RegisterID,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      if (v10 < 4)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 3;
        goto LABEL_30;
      }
      if (!HIDWORD(v10))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)v10);
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x197C89060);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 4)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)v15);
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC3DFG20SpeculateCellOperandENS9_21SpeculateInt32OperandENS9_23SpeculateBooleanOperandEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(a3 + 16);
  *(_BYTE *)(a3 + 16) = -1;
  *(_QWORD *)(a3 + 8) = 0;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC3DFG20SpeculateCellOperandENS9_21SpeculateInt32OperandENS9_23SpeculateBooleanOperandEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3JSC3DFG20SpeculateCellOperandENS9_21SpeculateInt32OperandENS9_23SpeculateBooleanOperandEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSA_SB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

unint64_t WTF::Vector<std::variant<JSC::DFG::SpeculateCellOperand,JSC::DFG::SpeculateInt32Operand,JSC::DFG::SpeculateBooleanOperand>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<std::variant<JSC::DFG::SpeculateCellOperand,JSC::DFG::SpeculateInt32Operand,JSC::DFG::SpeculateBooleanOperand>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    v12 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 > a2)
      a2 = v13;
    WTF::Vector<std::variant<JSC::DFG::SpeculateCellOperand,JSC::DFG::SpeculateInt32Operand,JSC::DFG::SpeculateBooleanOperand>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

void WTF::Vector<std::variant<JSC::DFG::SpeculateCellOperand,JSC::DFG::SpeculateInt32Operand,JSC::DFG::SpeculateBooleanOperand>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return;
  v8 = a2;
  v10 = *(_QWORD *)a1;
  v11 = *(unsigned int *)(a1 + 12);
  if (a2 >= 4)
  {
    if (a2 >> 27)
    {
      __break(0xC471u);
      return;
    }
    v12 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v12;
    if (!(_DWORD)v11)
      goto LABEL_12;
    goto LABEL_7;
  }
  v12 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 3;
  if ((_DWORD)v11)
  {
LABEL_7:
    v13 = 32 * v11;
    v14 = v10;
    do
    {
      *(_BYTE *)v12 = 0;
      *(_DWORD *)(v12 + 24) = -1;
      v15 = *(unsigned int *)(v14 + 24);
      if ((_DWORD)v15 != -1)
      {
        ((void (*)(char *, uint64_t, unint64_t))off_1E3573C88[v15])(&v17, v12, v14);
        *(_DWORD *)(v12 + 24) = v15;
        v16 = *(unsigned int *)(v14 + 24);
        if ((_DWORD)v16 != -1)
          ((void (*)(char *, unint64_t))off_1E3573C70[v16])(&v18, v14);
      }
      *(_DWORD *)(v14 + 24) = -1;
      v12 += 32;
      v14 += 32;
      v13 -= 32;
    }
    while (v13);
  }
LABEL_12:
  if (a1 + 16 != v10 && v10)
  {
    if (*(_QWORD *)a1 == v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::SnippetParams::Value>(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12)) = *(_OWORD *)WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<JSC::SnippetParams::Value,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSFunction *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573CE0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSFunction *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573CE0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSFunction *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSFunction *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  unsigned __int8 v77;
  uint64_t v78;
  int v79;
  __int16 *v80;
  void *__dst;
  int v82;
  unsigned int v83;
  __int16 v84;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = &v84;
  __dst = &v84;
  v82 = 1;
  if (v17 != 1)
  {
    v84 = v17 | 0x100;
    v83 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_92;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_92;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v79 = v19;
      v80 = v18;
      v78 = v15;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v83 - 2);
      v40 = v83 - 1;
      v35 = v83 == 1;
      v83 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v83)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v83;
        v44 = v83;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v83;
      }
      v20 = v44 - v45;
      v15 = v78;
      v18 = v80;
      v19 = v79;
LABEL_40:
      v83 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v82 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_92;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v83 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v83;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
LABEL_67:
    v67 = 0;
    v68 = 0;
    goto LABEL_68;
  }
  JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102));
  v68 = v76;
  v67 = v77;
LABEL_68:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_81;
      }
LABEL_93:
      __break(0xC471u);
      return;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (!*(_BYTE *)(a1 + 101))
  {
    if (v67)
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::JSString *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::RegisteredStructure>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573D40;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::JSString *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::RegisteredStructure>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573D40;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::JSString *,JSC::Structure *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::JSString *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID,JSC::DFG::RegisteredStructure>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int *v98;
  JSC::AssemblerBuffer *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  __int16 *v103;
  int v104;
  uint64_t v105;
  void *__dst;
  int v107;
  unsigned int v108;
  __int16 v109;
  unint64_t v110;
  unsigned int *v111;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_125;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(unsigned __int8 *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 176);
  v18 = &v109;
  __dst = &v109;
  v107 = 1;
  if (v16 != 1)
  {
    v109 = v16 | 0x100;
    v108 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_125;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_125;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v104 = v19;
      v103 = v18;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v108 - 2);
      v40 = v108 - 1;
      v35 = v108 == 1;
      v108 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v108)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v108;
        v44 = v108;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v108;
      }
      v20 = v44 - v45;
      v18 = v103;
      v19 = v104;
LABEL_40:
      v108 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v107 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_125;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v108 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v108;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v17, 2, a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v15, 0, v54, v55, v56, v57, v58);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v59, v60, v61, v62, v63, v64, (int *)&v105);
  v72 = 0;
  LOBYTE(v17) = 0;
  *(_QWORD *)(a1 + 92) = v105;
  if (!*(_BYTE *)(a1 + 101))
  {
    if (*(_BYTE *)(a1 + 100))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v66, v67, v68, v69, v70, v71);
      v72 = 0;
      LOBYTE(v17) = 0;
      goto LABEL_70;
    }
    v73 = *(_BYTE *)(a1 + 102);
    __dst = (void *)2;
    v111 = 0;
    v74 = *(_QWORD *)(v8 + 3960);
    v75 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
    if ((v75 & 1) != 0)
    {
      v90 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
      if ((v75 & 2) != 0
        || ((v91 = *(unsigned int *)((v75 & 0xFFFFFFFF8) + 8), (_DWORD)v91 != 0x3FFFFFFF)
          ? (v92 = (_DWORD)v91 == -1)
          : (v92 = 1),
            v92))
      {
        v93 = 2;
      }
      else if (v91 >> 28)
      {
        v102 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v102 = v90;
        *(_DWORD *)(v102 + 8) = v91;
        v93 = 1;
        v90 = v102;
      }
      else
      {
        v93 = *(_QWORD *)(v75 & 0xFFFFFFFF8);
        v90 = v91 << 36;
      }
      v75 = v90 | v93;
    }
    v110 = v75;
    v76 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v74, &v110, (uint64_t *)&__dst, &v111, v68, v69, v70, v71);
    if ((v110 & 1) != 0 && (v110 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v110 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
    if ((v76 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v66, v67, v68, v69, v70, v71);
      LOBYTE(v17) = 0;
      v72 = 0;
LABEL_69:
      if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
        WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
      goto LABEL_70;
    }
    v84 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v84)
    {
      v85 = 0;
      v86 = 16 * v84;
      v87 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v89 = *v87;
        v87 += 16;
        v88 = v89;
        if ((v89 & 0x40) != 0)
          break;
        v85 |= 1 << v88;
        v86 -= 16;
        if (!v86)
          goto LABEL_105;
      }
    }
    else
    {
      v85 = 0;
LABEL_105:
      if ((v73 & 0x40) == 0)
      {
        v72 = 1;
        v94 = v85 | (1 << v73);
        LOBYTE(v17) = 1;
        if ((v94 & 2) != 0)
        {
          v95 = (unsigned __int16)~(_WORD)v94 & 0xFFFE;
          if (v95)
          {
            LODWORD(v17) = __clz(__rbit64(v95));
            if ((_DWORD)v17 == 1)
            {
              v72 = 1;
            }
            else
            {
              if ((_DWORD)v17 == 31)
              {
                v98 = (unsigned int *)(v8 + 200);
                v97 = *(_DWORD *)(v8 + 200);
                v99 = (JSC::AssemblerBuffer *)(v8 + 56);
                v100 = v97 + 4;
                v101 = *(_DWORD *)(v8 + 192);
                v96 = -1862270913;
              }
              else
              {
                v96 = v17 | 0xAA0103E0;
                v98 = (unsigned int *)(v8 + 200);
                v97 = *(_DWORD *)(v8 + 200);
                v99 = (JSC::AssemblerBuffer *)(v8 + 56);
                v100 = v97 + 4;
                v101 = *(_DWORD *)(v8 + 192);
              }
              if (v100 > v101)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v99, (uint64_t)v65, v66, v67, v68, v69, v70, v71);
                v97 = *v98;
              }
              *(_DWORD *)(*(_QWORD *)v99 + v97) = v96;
              *v98 += 4;
              v72 = 1;
            }
          }
          else
          {
            v72 = 1;
            LOBYTE(v17) = -1;
          }
        }
        goto LABEL_69;
      }
    }
LABEL_125:
    __break(1u);
LABEL_126:
    __break(0xC471u);
    return;
  }
LABEL_70:
  v77 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v77 == 31)
    {
      v78 = -1862270945;
    }
    else if (v77 == 255)
    {
      v78 = -1442774017;
    }
    else
    {
      v78 = v77 | 0xAA0003E0;
    }
    v80 = (unsigned int *)(v8 + 200);
    v79 = *(_DWORD *)(v8 + 200);
    if (v79 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v65, v66, v67, v68, v69, v70, v71);
      v79 = *v80;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v79) = v78;
    *v80 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v81 = *(_DWORD *)(a1 + 116);
    if (v81)
    {
      v82 = v81 - 1;
      v83 = 16 * (v81 - 1);
      while (*(_DWORD *)(a1 + 116) > v82)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v83, v66, v67, v68, v69, v70, v71);
        v83 -= 16;
        if (--v82 == -1)
          goto LABEL_83;
      }
      goto LABEL_126;
    }
LABEL_83:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v72)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v17, v66, v67, v68, v69, v70, v71);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v66, v67, v68, v69, v70, v71);
}

void JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v10 = a3;
  if (a2 && *(_DWORD *)(a2 + 60) <= 0x2Fu)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  v24[0] = 0;
  v24[1] = a2;
  JSC::AssemblyHelpers::emitAllocate(a1, a3, (uint64_t)v24, a5, a6, a7, 1, a8, a9);
  v17 = (a4 >> 4) | ((unint64_t)*(unsigned int *)(a4 + 8) << 32);
  if (!v17)
  {
    v18 = 63;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
LABEL_10:
    JUMPOUT(0x197C8A43CLL);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v17, a1 + 264, v12, v13, v14, v15, v16);
  v18 = 16;
LABEL_7:
  JSC::MacroAssemblerARM64::store64(a1, v18, v10, v12, v13, v14, v15, v16);
  JSC::MacroAssemblerARM64::store64(a1, 63, v10 | 0x800000000, v19, v20, v21, v22, v23);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,JSC::Structure *,long,char *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573DA0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,JSC::Structure *,long,char *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573DA0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,JSC::Structure *,long,char *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<char *> (*)(JSC::JSGlobalObject *,JSC::Structure *,long,char *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::DFG::RegisteredStructure,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  char v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  _BYTE *v46;
  int v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  JSC::AssemblerBuffer *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  int64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  void *__dst;
  int v110;
  unsigned int v111;
  _WORD v112[4];
  unint64_t v113;
  unsigned int *v114;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_136;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 176);
  v18 = *(unsigned __int8 *)(a1 + 184);
  v19 = *(unsigned __int8 *)(a1 + 185);
  __dst = v112;
  v110 = 2;
  if (v18 == 2)
  {
    if (v19 == 3)
      goto LABEL_69;
    v20 = 0;
  }
  else
  {
    v112[0] = v18 | 0x200;
    v20 = 1;
    v111 = 1;
    if (v19 == 3)
      goto LABEL_15;
  }
  v112[v20++] = v19 | 0x300;
  v111 = v20;
  do
  {
LABEL_15:
    v21 = 0;
    v22 = 0;
    v23 = (char *)__dst;
    v24 = v20;
    do
    {
      if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
        goto LABEL_136;
      v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
      v21 += 2;
    }
    while (2 * v20 != v21);
    v25 = 0;
    do
    {
      v26 = *((_BYTE *)__dst + v25) & 0x7F;
      if (v26 >= 0x40)
        goto LABEL_136;
      v22 &= ~(1 << v26);
      v25 += 2;
    }
    while (2 * v20 != v25);
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
    v27.i16[0] = vaddlv_u8(v27);
    v28 = v27.i32[0];
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.i32[0] + v28)
    {
      v30 = 0;
      if (v20 <= 1)
        v31 = 1;
      else
        v31 = v20;
      v32 = 2 * v31;
      while (1)
      {
        v33 = *((unsigned __int8 *)__dst + v30 + 1);
        if ((v33 & 0x7Fu) >= 0x40)
          goto LABEL_136;
        if (((v22 >> (v33 & 0x7F)) & 1) != 0)
          break;
        v30 += 2;
        if (v32 == v30)
          goto LABEL_65;
      }
      v34 = *((unsigned __int8 *)__dst + v30);
      if (v34 == v33)
      {
LABEL_63:
        memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
        v20 = v111 - 1;
        goto LABEL_64;
      }
      v35 = (char)v34;
      if ((char)v34 == 63)
      {
        v36 = *(_DWORD *)(v8 + 200);
        v37 = *(_DWORD *)(v8 + 192);
        if ((char)v33 != 31)
        {
          v39 = v33 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v36 = *(_DWORD *)(v8 + 200);
        v37 = *(_DWORD *)(v8 + 192);
        v38 = v33 == 31 || v35 == 31;
        if (!v38)
        {
          v39 = v33 & 0xFFE0FFFF | ((v35 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v36 + 4 > v37)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v36 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v36) = v39;
          *(_DWORD *)(v8 + 200) += 4;
          v23 = (char *)__dst;
          v24 = v111;
          goto LABEL_63;
        }
      }
      v39 = (char)v33 | (32 * v35) | 0x91000000;
      goto LABEL_60;
    }
    v40 = *(_BYTE *)__dst;
    v41 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v41, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v111 - 2);
    v42 = v111 - 1;
    v38 = v111 == 1;
    v111 = v42;
    v43 = (unsigned __int8 *)__dst;
    v44 = (unsigned __int8 *)__dst + 2 * v42;
    if (v38)
    {
      v51 = 0;
      v52 = 0;
      v47 = 0;
      a2 = v44;
    }
    else
    {
      v45 = 2 * v42;
      v46 = __dst;
      while (*v46 != v41)
      {
        v46 += 2;
        v45 -= 2;
        if (!v45)
          goto LABEL_43;
      }
      *v46 = v40;
LABEL_43:
      v47 = 0;
      v48 = v43;
      a2 = v44;
      v49 = (char *)v44;
      do
      {
        if (*v43 == v43[1])
        {
          v50 = v43;
          if (v49 != (char *)__dst + 2 * v111)
          {
            v107 = (char *)v44;
            if (v43 == a2)
            {
              v50 = (unsigned __int8 *)v49;
            }
            else
            {
              v105 = v48 - a2;
              v106 = v49;
              memmove(v49, a2, v48 - a2);
              v50 = (unsigned __int8 *)&v106[v105];
            }
            v44 = (unsigned __int8 *)v107;
          }
          a2 = v43 + 2;
          ++v47;
          v49 = (char *)v50;
        }
        v43 += 2;
        v48 += 2;
      }
      while (v43 < v44);
      v43 = (unsigned __int8 *)__dst;
      v51 = v111;
      v52 = v111;
      v44 = (unsigned __int8 *)v49;
    }
    v53 = &v43[2 * v51];
    if (a2 != v53)
    {
      memmove(v44, a2, v53 - a2);
      v52 = v111;
    }
    v20 = v52 - v47;
LABEL_64:
    v111 = v20;
LABEL_65:
    ;
  }
  while (v20);
  v54 = __dst;
  if (v112 != __dst && __dst)
  {
    __dst = 0;
    v110 = 0;
    WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_69:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v17, 1, a4, a5, a6, a7, a8);
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, v55, v56, v57, v58, v59);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, v55, v56, v57, v58, v59);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v60, v61, v62, v63, v64, v65, (int *)&v108);
  *(_QWORD *)(a1 + 92) = v108;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_74:
    v73 = 0;
    LOBYTE(v74) = 0;
    goto LABEL_75;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v67, v68, v69, v70, v71, v72);
    goto LABEL_74;
  }
  v82 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v114 = 0;
  v83 = *(_QWORD *)(v8 + 3960);
  v84 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v84 & 1) != 0)
  {
    v100 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
    if ((v84 & 2) != 0
      || ((v101 = *(unsigned int *)((v84 & 0xFFFFFFFF8) + 8), (_DWORD)v101 != 0x3FFFFFFF)
        ? (v102 = (_DWORD)v101 == -1)
        : (v102 = 1),
          v102))
    {
      v103 = 2;
    }
    else if (v101 >> 28)
    {
      v104 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v104 = v100;
      *(_DWORD *)(v104 + 8) = v101;
      v103 = 1;
      v100 = v104;
    }
    else
    {
      v103 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
      v100 = v101 << 36;
    }
    v84 = v100 | v103;
  }
  v113 = v84;
  v85 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v83, &v113, (uint64_t *)&__dst, &v114, v69, v70, v71, v72);
  if ((v113 & 1) != 0 && (v113 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v113 & 0xFFFFFFFF8, v66, v67, v68, v69, v70, v71, v72);
  if ((v85 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v67, v68, v69, v70, v71, v72);
    LOBYTE(v74) = 0;
    v73 = 0;
    goto LABEL_97;
  }
  v86 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v86)
  {
    v87 = 0;
    v88 = 16 * v86;
    v89 = (char *)(*(_QWORD *)(a1 + 104) + 2);
    while (1)
    {
      v91 = *v89;
      v89 += 16;
      v90 = v91;
      if ((v91 & 0x40) != 0)
        goto LABEL_136;
      v87 |= 1 << v90;
      v88 -= 16;
      if (!v88)
        goto LABEL_106;
    }
  }
  v87 = 0;
LABEL_106:
  if ((v82 & 0x40) != 0)
  {
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  v73 = 1;
  v92 = v87 | (1 << v82);
  LOBYTE(v74) = 1;
  if ((v92 & 2) != 0)
  {
    v93 = (unsigned __int16)~(_WORD)v92 & 0xFFFE;
    if (v93)
    {
      v74 = __clz(__rbit64(v93));
      if (v74 == 1)
      {
        v73 = 1;
      }
      else
      {
        if (v74 == 31)
        {
          v96 = (unsigned int *)(v8 + 200);
          v95 = *(_DWORD *)(v8 + 200);
          v97 = (JSC::AssemblerBuffer *)(v8 + 56);
          v98 = v95 + 4;
          v99 = *(_DWORD *)(v8 + 192);
          v94 = -1862270913;
        }
        else
        {
          v94 = v74 | 0xAA0103E0;
          v96 = (unsigned int *)(v8 + 200);
          v95 = *(_DWORD *)(v8 + 200);
          v97 = (JSC::AssemblerBuffer *)(v8 + 56);
          v98 = v95 + 4;
          v99 = *(_DWORD *)(v8 + 192);
        }
        if (v98 > v99)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v97, (uint64_t)v66, v67, v68, v69, v70, v71, v72);
          v95 = *v96;
        }
        *(_DWORD *)(*(_QWORD *)v97 + v95) = v94;
        *v96 += 4;
        v73 = 1;
      }
    }
    else
    {
      v73 = 1;
      LOBYTE(v74) = -1;
    }
  }
LABEL_97:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v66, v67, v68, v69, v70, v71, v72);
LABEL_75:
  v75 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v75 == 31)
    {
      v76 = -1862270945;
    }
    else if (v75 == 255)
    {
      v76 = -1442774017;
    }
    else
    {
      v76 = v75 | 0xAA0003E0;
    }
    v78 = (unsigned int *)(v8 + 200);
    v77 = *(_DWORD *)(v8 + 200);
    if (v77 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v66, v67, v68, v69, v70, v71, v72);
      v77 = *v78;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v77) = v76;
    *v78 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_89:
    if (v73)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v74, v67, v68, v69, v70, v71, v72);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v67, v68, v69, v70, v71, v72);
    return;
  }
  v79 = *(_DWORD *)(a1 + 116);
  if (!v79)
  {
LABEL_88:
    *(_BYTE *)(v8 + 5768) = 0;
    goto LABEL_89;
  }
  v80 = v79 - 1;
  v81 = 16 * (v79 - 1);
  while (*(_DWORD *)(a1 + 116) > v80)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v81, v67, v68, v69, v70, v71, v72);
    v81 -= 16;
    if (--v80 == -1)
      goto LABEL_88;
  }
LABEL_137:
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573E00;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573E00;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 *v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint8x8_t v28;
  __int32 v29;
  uint8x8_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;
  char v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  char *v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  char *v47;
  uint64_t v48;
  _BYTE *v49;
  unsigned __int8 *v50;
  char *v51;
  unsigned __int8 *v52;
  int64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  char v91;
  uint64_t v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  JSC::AssemblerBuffer *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int16 *v107;
  uint64_t v108;
  void *__dst;
  int v110;
  unsigned int v111;
  __int16 v112;
  unint64_t v113;
  unsigned int *v114;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_133;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned int *)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 184);
  v19 = *(unsigned __int8 *)(a1 + 192);
  v20 = &v112;
  __dst = &v112;
  v110 = 1;
  if (v19 != 2)
  {
    v112 = v19 | 0x200;
    v111 = 1;
    v21 = 1;
    while (1)
    {
      v22 = 0;
      v23 = 0;
      v24 = (char *)__dst;
      v25 = v21;
      do
      {
        if ((*((_BYTE *)__dst + v22 + 1) & 0x40) != 0)
          goto LABEL_133;
        v23 |= 1 << *((_BYTE *)__dst + v22 + 1);
        v22 += 2;
      }
      while (2 * v21 != v22);
      v26 = 0;
      do
      {
        v27 = *((_BYTE *)__dst + v26) & 0x7F;
        if (v27 >= 0x40)
          goto LABEL_133;
        v23 &= ~(1 << v27);
        v26 += 2;
      }
      while (2 * v21 != v26);
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
      v28.i16[0] = vaddlv_u8(v28);
      v29 = v28.i32[0];
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v23));
      v30.i16[0] = vaddlv_u8(v30);
      if (v30.i32[0] + v29)
        break;
      v106 = v17;
      v107 = v20;
      v105 = v15;
      v39 = *(_BYTE *)__dst;
      v40 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v40, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v111 - 2);
      v41 = v111 - 1;
      v36 = v111 == 1;
      v111 = v41;
      v42 = (unsigned __int8 *)__dst;
      v43 = (char *)__dst + 2 * v41;
      if (v36)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        a2 = (char *)__dst + 2 * v41;
      }
      else
      {
        v48 = 2 * v41;
        v49 = __dst;
        while (*v49 != v40)
        {
          v49 += 2;
          v48 -= 2;
          if (!v48)
            goto LABEL_51;
        }
        *v49 = v39;
LABEL_51:
        v46 = 0;
        v50 = v42;
        a2 = v43;
        v51 = v43;
        do
        {
          if (*v42 == v42[1])
          {
            v52 = v42;
            if (v51 != (char *)__dst + 2 * v111)
            {
              if (v42 == (unsigned __int8 *)a2)
              {
                v52 = (unsigned __int8 *)v51;
              }
              else
              {
                v53 = v50 - (unsigned __int8 *)a2;
                memmove(v51, a2, v50 - (unsigned __int8 *)a2);
                v52 = (unsigned __int8 *)&v51[v53];
              }
            }
            a2 = (char *)(v42 + 2);
            ++v46;
            v51 = (char *)v52;
          }
          v42 += 2;
          v50 += 2;
        }
        while (v42 < (unsigned __int8 *)v43);
        v42 = (unsigned __int8 *)__dst;
        v44 = v111;
        v45 = v111;
        v43 = v51;
      }
      v47 = (char *)&v42[2 * v44];
      if (a2 != v47)
      {
        memmove(v43, a2, v47 - a2);
        v45 = v111;
      }
      v21 = v45 - v46;
      v15 = v105;
      v17 = v106;
      v20 = v107;
LABEL_40:
      v111 = v21;
LABEL_41:
      if (!v21)
      {
        v54 = __dst;
        if (v20 != __dst && __dst)
        {
          __dst = 0;
          v110 = 0;
          WTF::fastFree((unint64_t)v54, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v31 = 0;
    if (v21 <= 1)
      v32 = 1;
    else
      v32 = v21;
    v33 = 2 * v32;
    while (1)
    {
      v34 = *((unsigned __int8 *)__dst + v31 + 1);
      if ((v34 & 0x7Fu) >= 0x40)
        goto LABEL_133;
      if (((v23 >> (v34 & 0x7F)) & 1) != 0)
        break;
      v31 += 2;
      if (v33 == v31)
        goto LABEL_41;
    }
    v35 = *((unsigned __int8 *)__dst + v31);
    if (v35 == v34)
    {
LABEL_39:
      memmove(&v24[v31], &v24[v31 + 2], 2 * v25 - v31 - 2);
      v21 = v111 - 1;
      goto LABEL_40;
    }
    v35 = (char)v35;
    if ((char)v35 == 63)
    {
      if ((char)v34 != 31)
      {
        v37 = v34 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v36 = v34 == 31 || v35 == 31;
      if (!v36)
      {
        v37 = v34 & 0xFFE0FFFF | ((v35 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v38 = *(_DWORD *)(v8 + 200);
        if (v38 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v38 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v38) = v37;
        *(_DWORD *)(v8 + 200) += 4;
        v24 = (char *)__dst;
        v25 = v111;
        goto LABEL_39;
      }
    }
    v37 = (char)v34 | (32 * v35) | 0x91000000;
    goto LABEL_36;
  }
LABEL_62:
  if (v17 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v18, 1, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v17 << 35) + 0x380000001ALL, 1, a4, a5, a6, a7, a8);
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, v55, v56, v57, v58, v59);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, v55, v56, v57, v58, v59);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v60, v61, v62, v63, v64, v65, (int *)&v108);
  *(_QWORD *)(a1 + 92) = v108;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_69;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v67, v68, v69, v70, v71, v72);
LABEL_69:
    v73 = 0;
    LOBYTE(v74) = 0;
    goto LABEL_70;
  }
  v82 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v114 = 0;
  v83 = *(_QWORD *)(v8 + 3960);
  v84 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v84 & 1) != 0)
  {
    v100 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
    if ((v84 & 2) != 0
      || ((v101 = *(unsigned int *)((v84 & 0xFFFFFFFF8) + 8), (_DWORD)v101 != 0x3FFFFFFF)
        ? (v102 = (_DWORD)v101 == -1)
        : (v102 = 1),
          v102))
    {
      v103 = 2;
    }
    else if (v101 >> 28)
    {
      v104 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v104 = v100;
      *(_DWORD *)(v104 + 8) = v101;
      v103 = 1;
      v100 = v104;
    }
    else
    {
      v103 = *(_QWORD *)(v84 & 0xFFFFFFFF8);
      v100 = v101 << 36;
    }
    v84 = v100 | v103;
  }
  v113 = v84;
  v85 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v83, &v113, (uint64_t *)&__dst, &v114, v69, v70, v71, v72);
  if ((v113 & 1) != 0 && (v113 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v113 & 0xFFFFFFFF8, v66, v67, v68, v69, v70, v71, v72);
  if ((v85 & 1) != 0)
  {
    v86 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v86)
    {
      v87 = 0;
      v88 = 16 * v86;
      v89 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v91 = *v89;
        v89 += 16;
        v90 = v91;
        if ((v91 & 0x40) != 0)
          break;
        v87 |= 1 << v90;
        v88 -= 16;
        if (!v88)
          goto LABEL_101;
      }
    }
    else
    {
      v87 = 0;
LABEL_101:
      if ((v82 & 0x40) == 0)
      {
        v73 = 1;
        v92 = v87 | (1 << v82);
        if ((v92 & 2) != 0)
        {
          v93 = (unsigned __int16)~(_WORD)v92 & 0xFFFE;
          if (v93)
          {
            v74 = __clz(__rbit64(v93));
            if (v74 == 1)
            {
              v73 = 1;
            }
            else
            {
              if (v74 == 31)
              {
                v96 = (unsigned int *)(v8 + 200);
                v95 = *(_DWORD *)(v8 + 200);
                v97 = (JSC::AssemblerBuffer *)(v8 + 56);
                v98 = v95 + 4;
                v99 = *(_DWORD *)(v8 + 192);
                v94 = -1862270913;
              }
              else
              {
                v94 = v74 | 0xAA0103E0;
                v96 = (unsigned int *)(v8 + 200);
                v95 = *(_DWORD *)(v8 + 200);
                v97 = (JSC::AssemblerBuffer *)(v8 + 56);
                v98 = v95 + 4;
                v99 = *(_DWORD *)(v8 + 192);
              }
              if (v98 > v99)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v97, (uint64_t)v66, v67, v68, v69, v70, v71, v72);
                v95 = *v96;
              }
              *(_DWORD *)(*(_QWORD *)v97 + v95) = v94;
              *v96 += 4;
              v73 = 1;
            }
          }
          else
          {
            v73 = 1;
            LOBYTE(v74) = -1;
          }
        }
        else
        {
          LOBYTE(v74) = 1;
        }
        goto LABEL_92;
      }
    }
LABEL_133:
    __break(1u);
LABEL_134:
    __break(0xC471u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v67, v68, v69, v70, v71, v72);
  LOBYTE(v74) = 0;
  v73 = 0;
LABEL_92:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v66, v67, v68, v69, v70, v71, v72);
LABEL_70:
  v75 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v75 == 31)
    {
      v76 = -1862270945;
    }
    else if (v75 == 255)
    {
      v76 = -1442774017;
    }
    else
    {
      v76 = v75 | 0xAA0003E0;
    }
    v78 = (unsigned int *)(v8 + 200);
    v77 = *(_DWORD *)(v8 + 200);
    if (v77 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v66, v67, v68, v69, v70, v71, v72);
      v77 = *v78;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v77) = v76;
    *v78 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v79 = *(_DWORD *)(a1 + 116);
    if (v79)
    {
      v80 = v79 - 1;
      v81 = 16 * (v79 - 1);
      while (*(_DWORD *)(a1 + 116) > v80)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v81, v67, v68, v69, v70, v71, v72);
        v81 -= 16;
        if (--v80 == -1)
          goto LABEL_83;
      }
      goto LABEL_134;
    }
LABEL_83:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v73)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v74, v67, v68, v69, v70, v71, v72);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v67, v68, v69, v70, v71, v72);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<WTF::StringImpl *> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573E60;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<WTF::StringImpl *> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573E60;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<WTF::StringImpl *> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<WTF::StringImpl *> (*)(JSC::JSGlobalObject *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint8x8_t v32;
  __int32 v33;
  uint8x8_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned __int8 *v53;
  char *v54;
  unsigned __int8 *v55;
  int64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  char v69;
  unsigned __int8 v70;
  uint64_t v71;
  int v72;
  __int16 *v73;
  void *__dst;
  int v75;
  unsigned int v76;
  __int16 v77;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v18 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v18, v12, v13, v14, v15, v16, v17);
        v8 = (JSC::AssemblerBuffer *)((char *)v8 + 1);
        v18 += 16;
      }
      while ((unint64_t)v8 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(unsigned int *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(unsigned __int8 *)(a1 + 152);
  v22 = &v77;
  __dst = &v77;
  v23 = 1;
  v75 = 1;
  if (v21 != 1)
  {
    v77 = v21 | 0x100;
    v76 = 1;
    v24 = -1862270976;
    v25 = 1;
    do
    {
      v26 = 0;
      v27 = 0;
      v28 = (char *)__dst;
      v29 = v25;
      do
      {
        if ((*((_BYTE *)__dst + v26 + 1) & 0x40) != 0)
        {
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
        v27 |= 1 << *((_BYTE *)__dst + v26 + 1);
        v26 += 2;
      }
      while (2 * v25 != v26);
      v30 = 0;
      do
      {
        v31 = *((_BYTE *)__dst + v30) & 0x7F;
        if (v31 >= 0x40)
          goto LABEL_82;
        v27 &= ~(1 << v31);
        v30 += 2;
      }
      while (2 * v25 != v30);
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v32.i16[0] = vaddlv_u8(v32);
      v33 = v32.i32[0];
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v27));
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] + v33)
      {
        v35 = 0;
        if (v25 <= 1)
          v36 = 1;
        else
          v36 = v25;
        v37 = 2 * v36;
        while (1)
        {
          v38 = *((unsigned __int8 *)__dst + v35 + 1);
          if ((v38 & 0x7Fu) >= 0x40)
            goto LABEL_82;
          if (((v27 >> (v38 & 0x7F)) & 1) != 0)
            break;
          v35 += 2;
          if (v37 == v35)
            goto LABEL_37;
        }
        v39 = *((unsigned __int8 *)__dst + v35);
        if (v39 != v38)
        {
          v39 = (char)v39;
          if ((char)v39 == 63)
          {
            if ((char)v38 == 31)
              goto LABEL_31;
            v8 = (JSC::AssemblerBuffer *)(v38 & 0x1F | 0xD2800000);
          }
          else
          {
            v40 = v38 == 31 || v39 == 31;
            if (!v40)
            {
              v8 = (JSC::AssemblerBuffer *)(v38 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0);
              goto LABEL_32;
            }
LABEL_31:
            v8 = (JSC::AssemblerBuffer *)((char)v38 | (32 * v39) | v24);
          }
LABEL_32:
          v41 = *(_DWORD *)(a2 + 200);
          if (v41 + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
            v41 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v41) = (_DWORD)v8;
          *(_DWORD *)(a2 + 200) += 4;
          v28 = (char *)__dst;
          v29 = v76;
        }
        memmove(&v28[v35], &v28[v35 + 2], 2 * v29 - v35 - 2);
        v25 = v76 - 1;
        goto LABEL_36;
      }
      v72 = v24;
      v73 = v22;
      v71 = v19;
      v42 = *(_BYTE *)__dst;
      v43 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v43, v13, v14, v15, v16, v17);
      memmove(__dst, (char *)__dst + 2, 2 * v76 - 2);
      v44 = v76 - 1;
      v40 = v76 == 1;
      v76 = v44;
      v45 = (unsigned __int8 *)__dst;
      v46 = (char *)__dst + 2 * v44;
      if (v40)
      {
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v11 = (char *)__dst + 2 * v44;
      }
      else
      {
        v51 = 2 * v44;
        v52 = __dst;
        while (*v52 != v43)
        {
          v52 += 2;
          v51 -= 2;
          if (!v51)
            goto LABEL_47;
        }
        *v52 = v42;
LABEL_47:
        v49 = 0;
        v53 = v45;
        v11 = v46;
        v54 = v46;
        do
        {
          if (*v45 == v45[1])
          {
            v55 = v45;
            if (v54 != (char *)__dst + 2 * v76)
            {
              if (v45 == (unsigned __int8 *)v11)
              {
                v55 = (unsigned __int8 *)v54;
              }
              else
              {
                v56 = v53 - (unsigned __int8 *)v11;
                memmove(v54, v11, v53 - (unsigned __int8 *)v11);
                v55 = (unsigned __int8 *)&v54[v56];
              }
            }
            v11 = (char *)(v45 + 2);
            ++v49;
            v54 = (char *)v55;
          }
          v45 += 2;
          v53 += 2;
        }
        while (v45 < (unsigned __int8 *)v46);
        v45 = (unsigned __int8 *)__dst;
        v47 = v76;
        v48 = v76;
        v46 = v54;
      }
      v50 = (char *)&v45[2 * v47];
      if (v11 != v50)
      {
        memmove(v46, v11, v50 - v11);
        v48 = v76;
      }
      v25 = v48 - v49;
      v19 = v71;
      v22 = v73;
      v23 = 1;
      v24 = v72;
LABEL_36:
      v76 = v25;
LABEL_37:
      ;
    }
    while (v25);
    v57 = __dst;
    if (v22 != __dst && __dst)
    {
      __dst = 0;
      v75 = 0;
      WTF::fastFree((unint64_t)v57, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  if (v19 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v20, 0, v13, v14, v15, v16, v17);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v19 << 35) + 0x380000001ALL, 0, v13, v14, v15, v16, v17);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v58, v59, v60, v61, v62, v63, (int *)&__dst);
  *(_QWORD *)(a1 + 64) = __dst;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_63;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
LABEL_63:
    LODWORD(v19) = 0;
    LOBYTE(v20) = 0;
    goto LABEL_64;
  }
  JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<unsigned long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 80), *(_BYTE *)(a1 + 74));
  LOBYTE(v20) = v69;
  LODWORD(v19) = v70;
LABEL_64:
  v64 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v64 == 31)
    {
      LODWORD(v22) = -1862270945;
    }
    else if (v64 == 255)
    {
      LODWORD(v22) = -1442774017;
    }
    else
    {
      LODWORD(v22) = v64 | 0xAA0003E0;
    }
    v23 = a2 + 200;
    v65 = *(_DWORD *)(a2 + 200);
    v8 = (JSC::AssemblerBuffer *)(a2 + 56);
    if (v65 + 4 > *(_DWORD *)(a2 + 192))
    {
LABEL_83:
      JSC::AssemblerBuffer::outOfLineGrow(v8, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
      v65 = *(_DWORD *)v23;
    }
    *(_DWORD *)(*(_QWORD *)v8 + v65) = (_DWORD)v22;
    *(_DWORD *)v23 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_77;
  v66 = *(_DWORD *)(a1 + 92);
  if (!v66)
  {
LABEL_76:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_77:
    if (!*(_BYTE *)(a1 + 73))
    {
      if ((_DWORD)v19)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v20, v12, v13, v14, v15, v16, v17);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v12, v13, v14, v15, v16, v17);
    return;
  }
  v67 = v66 - 1;
  v68 = 16 * (v66 - 1);
  while (*(_DWORD *)(a1 + 92) > v67)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v68, v12, v13, v14, v15, v16, v17);
    v68 -= 16;
    if (--v67 == -1)
      goto LABEL_76;
  }
  __break(0xC471u);
}

uint64_t WTF::Vector<JSC::DFG::`anonymous namespace'::CharacterCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a3;
  v4 = result;
  v5 = *(const void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 12 * *(unsigned int *)(result + 12) > a3)
  {
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x15555556)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 12 * v8;
    v11 = (void *)WTF::fastMalloc((WTF *)(12 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 12 * v9);
    if (v5)
    {
      if (*(const void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::`anonymous namespace'::CharacterCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  const void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x15555556)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(const void **)a1;
      v7 = *(unsigned int *)(a1 + 12);
      v8 = 12 * v4;
      v9 = (void *)WTF::fastMalloc((WTF *)(12 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFFC) / 0xC;
      *(_QWORD *)a1 = v9;
      memcpy(v9, v6, 12 * v7);
      if (v6)
      {
        if (*(const void **)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree((unint64_t)v6, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

void WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char &>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = *a2;
  *(_DWORD *)(a1 + 12) = v8 + 1;
}

void WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  const void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(const void **)a1;
    v4 = *(unsigned int *)(a1 + 12);
    WTF::VectorBuffer<long long,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(a1, a2);
    memcpy(*(void **)a1, v3, 8 * v4);
    if ((const void *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(const void **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v3, v5, v6, v7, v8, v9, v10, v11);
    }
  }
}

uint64_t WTF::VectorBuffer<long long,16ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = result;
  if (a2 < 0x11)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 16;
    return 1;
  }
  v3 = a2;
  if (!(a2 >> 29))
  {
    v4 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v4;
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;

  v3 = a3;
  v4 = result;
  v5 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v5 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  if (!(v9 >> 28))
  {
    v10 = *(unsigned int *)(result + 12);
    v11 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
    if ((_DWORD)v10)
    {
      v19 = 16 * v10;
      v20 = (__int128 *)v5;
      do
      {
        v21 = *v20++;
        *v11++ = v21;
        v19 -= 16;
      }
      while (v19);
    }
    if (v5)
    {
      if (*(_QWORD *)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, v12, v13, v14, v15, v16, v17, v18);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::SpeculativeJIT::StringSwitchCase,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = 16 * v8;
        v18 = (__int128 *)v7;
        do
        {
          v19 = *v18++;
          *v9++ = v19;
          v17 -= 16;
        }
        while (v17);
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

_QWORD *WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,long long>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

unint64_t WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,5u>(std::array<JSC::ARM64Registers::RegisterID,5u>,std::array<JSC::ARM64Registers::RegisterID,5u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v15;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 3);
  v6 = (char *)(*a1 + 2 * v5);
  if (v5 <= a3)
  {
    v7 = 0;
    v10 = (char *)(*a1 + 2 * v5);
  }
  else
  {
    v7 = 0;
    v8 = (char *)(v4 + 2 * a3);
    v9 = v8;
    v10 = (char *)(*a1 + 2 * v5);
    v11 = v10;
    do
    {
      if (*v9 == v9[1])
      {
        v12 = v9;
        if (v11 != (char *)(*a1 + 2 * *((unsigned int *)a1 + 3)))
        {
          if (v9 == v10)
          {
            v12 = v11;
          }
          else
          {
            v15 = v8 - v10;
            memmove(v11, v10, v8 - v10);
            v12 = &v11[v15];
          }
        }
        v10 = v9 + 2;
        v7 = (v7 + 1);
        v11 = v12;
      }
      v9 += 2;
      v8 += 2;
    }
    while (v9 < v6);
    v4 = *a1;
    v5 = *((unsigned int *)a1 + 3);
    v6 = v11;
  }
  v13 = (char *)(v4 + 2 * v5);
  if (v10 != v13)
  {
    memmove(v6, v10, v13 - v10);
    LODWORD(v5) = *((_DWORD *)a1 + 3);
  }
  *((_DWORD *)a1 + 3) = v5 - v7;
  return v7;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSBigInt *),JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E3573EC0;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSBigInt *),JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3573EC0;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSBigInt *),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::JSBigInt *),JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint8x8_t v32;
  __int32 v33;
  uint8x8_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  char v43;
  char v44;
  uint64_t v45;
  unsigned __int8 *v46;
  char *v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  unsigned __int8 *v54;
  char *v55;
  unsigned __int8 *v56;
  int64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  JSC::AssemblerBuffer *v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  unsigned int v89;
  uint64_t v90;
  void *__dst;
  int v92;
  unsigned int v93;
  __int16 v94;
  unint64_t v95;
  unsigned int *v96;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v18 = 0;
      v19 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v18, v12, v13, v14, v15, v16, v17);
        ++v19;
        v18 += 16;
      }
      while (v19 < *(unsigned int *)(a1 + 92));
    }
  }
  v20 = *(_QWORD *)(a1 + 136);
  v21 = *(unsigned __int8 *)(a1 + 144);
  v22 = (uint64_t)&v94;
  __dst = &v94;
  LODWORD(v23) = 1;
  v92 = 1;
  if (v21 != 1)
  {
    v94 = v21 | 0x100;
    v93 = 1;
    LOBYTE(v24) = a2 + 56;
    v8 = 2432696320;
    v25 = 1;
    while (1)
    {
      v26 = 0;
      v27 = 0;
      v28 = (char *)__dst;
      v29 = v25;
      do
      {
        if ((*((_BYTE *)__dst + v26 + 1) & 0x40) != 0)
          goto LABEL_101;
        v27 |= 1 << *((_BYTE *)__dst + v26 + 1);
        v26 += 2;
      }
      while (2 * v25 != v26);
      v30 = 0;
      do
      {
        v31 = *((_BYTE *)__dst + v30) & 0x7F;
        if (v31 >= 0x40)
          goto LABEL_101;
        v27 &= ~(1 << v31);
        v30 += 2;
      }
      while (2 * v25 != v30);
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v32.i16[0] = vaddlv_u8(v32);
      v33 = v32.i32[0];
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v27));
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] + v33)
        break;
      v89 = v8;
      v88 = (_DWORD *)v22;
      v43 = *(_BYTE *)__dst;
      v44 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v44, v13, v14, v15, v16, v17);
      memmove(__dst, (char *)__dst + 2, 2 * v93 - 2);
      v45 = v93 - 1;
      v40 = v93 == 1;
      v93 = v45;
      v46 = (unsigned __int8 *)__dst;
      v47 = (char *)__dst + 2 * v45;
      if (v40)
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v11 = (char *)__dst + 2 * v45;
      }
      else
      {
        v52 = 2 * v45;
        v53 = __dst;
        while (*v53 != v44)
        {
          v53 += 2;
          v52 -= 2;
          if (!v52)
            goto LABEL_47;
        }
        *v53 = v43;
LABEL_47:
        v50 = 0;
        v54 = v46;
        v11 = v47;
        v55 = v47;
        do
        {
          if (*v46 == v46[1])
          {
            v56 = v46;
            if (v55 != (char *)__dst + 2 * v93)
            {
              if (v46 == (unsigned __int8 *)v11)
              {
                v56 = (unsigned __int8 *)v55;
              }
              else
              {
                v57 = v54 - (unsigned __int8 *)v11;
                memmove(v55, v11, v54 - (unsigned __int8 *)v11);
                v56 = (unsigned __int8 *)&v55[v57];
              }
            }
            v11 = (char *)(v46 + 2);
            ++v50;
            v55 = (char *)v56;
          }
          v46 += 2;
          v54 += 2;
        }
        while (v46 < (unsigned __int8 *)v47);
        v46 = (unsigned __int8 *)__dst;
        v48 = v93;
        v49 = v93;
        v47 = v55;
      }
      v51 = (char *)&v46[2 * v48];
      if (v11 != v51)
      {
        memmove(v47, v11, v51 - v11);
        v49 = v93;
      }
      v25 = v49 - v50;
      v22 = (uint64_t)v88;
      LODWORD(v23) = 1;
      v8 = v89;
LABEL_36:
      v93 = v25;
LABEL_37:
      if (!v25)
      {
        v58 = __dst;
        if ((void *)v22 != __dst && __dst)
        {
          __dst = 0;
          v92 = 0;
          WTF::fastFree((unint64_t)v58, v11, v12, v13, v14, v15, v16, v17);
        }
        goto LABEL_58;
      }
    }
    v35 = 0;
    if (v25 <= 1)
      v36 = 1;
    else
      v36 = v25;
    v37 = 2 * v36;
    while (1)
    {
      v38 = *((unsigned __int8 *)__dst + v35 + 1);
      if ((v38 & 0x7Fu) >= 0x40)
        goto LABEL_101;
      if (((v27 >> (v38 & 0x7F)) & 1) != 0)
        break;
      v35 += 2;
      if (v37 == v35)
        goto LABEL_37;
    }
    v39 = *((unsigned __int8 *)__dst + v35);
    if (v39 == v38)
    {
LABEL_35:
      memmove(&v28[v35], &v28[v35 + 2], 2 * v29 - v35 - 2);
      v25 = v93 - 1;
      goto LABEL_36;
    }
    v39 = (char)v39;
    if ((char)v39 == 63)
    {
      if ((char)v38 != 31)
      {
        v41 = v38 & 0x1F | 0xD2800000;
        goto LABEL_32;
      }
    }
    else
    {
      v40 = v38 == 31 || v39 == 31;
      if (!v40)
      {
        v41 = v38 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0;
LABEL_32:
        v42 = *(_DWORD *)(a2 + 200);
        if (v42 + 4 > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
          v42 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v42) = v41;
        *(_DWORD *)(a2 + 200) += 4;
        v28 = (char *)__dst;
        v29 = v93;
        goto LABEL_35;
      }
    }
    v41 = (char)v38 | (32 * v39) | v8;
    goto LABEL_32;
  }
LABEL_58:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v20, 0, v13, v14, v15, v16, v17);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v59, v60, v61, v62, v63, v64, (int *)&v90);
  LODWORD(v22) = 0;
  LOBYTE(v24) = 0;
  *(_QWORD *)(a1 + 64) = v90;
  if (!*(_BYTE *)(a1 + 73))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
      LODWORD(v22) = 0;
      LOBYTE(v24) = 0;
      goto LABEL_84;
    }
    LOBYTE(v24) = *(_BYTE *)(a1 + 74);
    __dst = (void *)2;
    v96 = 0;
    v65 = *(_QWORD *)(a2 + 3960);
    v66 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
    if ((v66 & 1) != 0)
    {
      v22 = *(_QWORD *)(v66 & 0xFFFFFFFF8);
      if ((v66 & 2) != 0
        || ((v23 = *(unsigned int *)((v66 & 0xFFFFFFFF8) + 8), (_DWORD)v23 != 0x3FFFFFFF)
          ? (v85 = (_DWORD)v23 == -1)
          : (v85 = 1),
            v85))
      {
        v86 = 2;
      }
      else if (v23 >> 28)
      {
        v87 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v87 = v22;
        *(_DWORD *)(v87 + 8) = v23;
        v86 = 1;
        v22 = v87;
      }
      else
      {
        v86 = *(_QWORD *)(v66 & 0xFFFFFFFF8);
        v22 = v23 << 36;
      }
      v66 = v22 | v86;
    }
    v95 = v66;
    v20 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v65, &v95, (uint64_t *)&__dst, &v96, v14, v15, v16, v17);
    if ((v95 & 1) != 0 && (v95 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v95 & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
    if ((v20 & 1) != 0)
    {
      v67 = *(unsigned int *)(a1 + 92);
      if ((_DWORD)v67)
      {
        v68 = 0;
        v69 = 16 * v67;
        v70 = (char *)(*(_QWORD *)(a1 + 80) + 2);
        while (1)
        {
          v72 = *v70;
          v70 += 16;
          v71 = v72;
          if ((v72 & 0x40) != 0)
            break;
          v68 |= 1 << v71;
          v69 -= 16;
          if (!v69)
            goto LABEL_71;
        }
LABEL_101:
        __break(1u);
LABEL_102:
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v20, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
        v81 = *(_DWORD *)v8;
        goto LABEL_90;
      }
      v68 = 0;
LABEL_71:
      if ((v24 & 0x40) != 0)
        goto LABEL_101;
      LODWORD(v22) = 1;
      v73 = v68 | (1 << v24);
      LOBYTE(v24) = 1;
      if ((v73 & 2) != 0)
      {
        v74 = (unsigned __int16)~(_WORD)v73 & 0xFFFE;
        if (v74)
        {
          v24 = __clz(__rbit64(v74));
          if (v24 == 1)
          {
            LODWORD(v22) = 1;
          }
          else
          {
            if (v24 == 31)
            {
              v22 = a2 + 200;
              v76 = *(_DWORD *)(a2 + 200);
              v77 = (JSC::AssemblerBuffer *)(a2 + 56);
              v78 = v76 + 4;
              v79 = *(_DWORD *)(a2 + 192);
              v75 = -1862270913;
            }
            else
            {
              v75 = v24 | 0xAA0103E0;
              v22 = a2 + 200;
              v76 = *(_DWORD *)(a2 + 200);
              v77 = (JSC::AssemblerBuffer *)(a2 + 56);
              v78 = v76 + 4;
              v79 = *(_DWORD *)(a2 + 192);
            }
            if (v78 > v79)
            {
              JSC::AssemblerBuffer::outOfLineGrow(v77, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
              v76 = *(_DWORD *)v22;
            }
            *(_DWORD *)(*(_QWORD *)v77 + v76) = v75;
            *(_DWORD *)v22 += 4;
            LODWORD(v22) = 1;
          }
        }
        else
        {
          LODWORD(v22) = 1;
          LOBYTE(v24) = -1;
        }
      }
    }
    else
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
      LOBYTE(v24) = 0;
      LODWORD(v22) = 0;
    }
    if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
      WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v11, v12, v13, v14, v15, v16, v17);
  }
LABEL_84:
  v80 = *(unsigned __int8 *)(a1 + 74);
  if (!*(_BYTE *)(a1 + 74))
    goto LABEL_91;
  if (v80 == 31)
  {
    LODWORD(v23) = -1862270945;
  }
  else if (v80 == 255)
  {
    LODWORD(v23) = -1442774017;
  }
  else
  {
    LODWORD(v23) = v80 | 0xAA0003E0;
  }
  v8 = a2 + 200;
  v81 = *(_DWORD *)(a2 + 200);
  v20 = a2 + 56;
  if (v81 + 4 > *(_DWORD *)(a2 + 192))
    goto LABEL_102;
LABEL_90:
  *(_DWORD *)(*(_QWORD *)v20 + v81) = v23;
  *(_DWORD *)v8 += 4;
LABEL_91:
  if (*(_BYTE *)(a1 + 72))
  {
LABEL_97:
    if ((_DWORD)v22)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v24, v12, v13, v14, v15, v16, v17);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v12, v13, v14, v15, v16, v17);
    return;
  }
  v82 = *(_DWORD *)(a1 + 92);
  if (!v82)
  {
LABEL_96:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_97;
  }
  v83 = v82 - 1;
  v84 = 16 * (v82 - 1);
  while (*(_DWORD *)(a1 + 92) > v83)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v84, v12, v13, v14, v15, v16, v17);
    v84 -= 16;
    if (--v83 == -1)
      goto LABEL_96;
  }
  __break(0xC471u);
}

uint64_t WTF::ScopedLambdaFunctor<std::tuple<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID> ()(void),JSC::DFG::SpeculativeJIT::compileEnumeratorNextUpdateIndexAndMode(JSC::DFG::Node *)::$_0>::implFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  uint64_t v39;
  unsigned int v40[3];

  v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 8);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 8);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = **(unsigned __int8 **)(a1 + 40);
  if (v13 == v10)
    goto LABEL_14;
  if ((char)v13 == 63)
  {
    if (v10 != 31)
    {
      v15 = v10 & 0x1F | 0xD2800000;
      goto LABEL_11;
    }
LABEL_10:
    v15 = (char)v10 | (32 * (char)v13) | 0x91000000;
    goto LABEL_11;
  }
  if ((char)v10 == 31 || (char)v13 == 31)
    goto LABEL_10;
  v15 = v10 & 0xFFE0FFFF | ((v13 & 0x1F) << 16) | 0xAA0003E0;
LABEL_11:
  v17 = (unsigned int *)(v12 + 200);
  v16 = *(_DWORD *)(v12 + 200);
  if (v16 + 4 > *(_DWORD *)(v12 + 192))
  {
    a9 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
    v16 = *v17;
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 56) + v16) = v15;
  *v17 += 4;
LABEL_14:
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v12, 0, **(char **)(a1 + 48), a5, a6, a7, a8, (uint64_t)v40, a9);
  for (i = *(_DWORD *)(v12 + 200); (signed int)i < *(_DWORD *)(v12 + 52); *(_DWORD *)(v12 + 200) = i)
  {
    if (i + 4 > *(_DWORD *)(v12 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v18, v19, v20, v21, v22, v23, v24);
      i = *(_DWORD *)(v12 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v12 + 56) + i) = -721215457;
    i = *(_DWORD *)(v12 + 200) + 4;
  }
  *(_DWORD *)(v12 + 208) = 0;
  **(_DWORD **)(a1 + 56) = i;
  if (i + 4 > *(_DWORD *)(v12 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v18, v19, v20, v21, v22, v23, v24);
    i = *(_DWORD *)(v12 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 56) + i) = (char)v10 | (32 * (char)v10) | 0x11000400;
  *(_DWORD *)(v12 + 200) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v40, v12, v19, v20, v21, v22, v23, v24);
  if (!*(_BYTE *)(v12 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197C8CEA8);
  }
  v31 = **(unsigned __int8 **)(a1 + 72) | 0x1400000000;
  *(_DWORD *)(*(_QWORD *)(v12 + 296) + 208) &= ~*(_DWORD *)(v12 + 320);
  JSC::MacroAssemblerARM64::load32(v12, v31, *(char *)(v12 + 304), v26, v27, v28, v29, v30);
  JSC::MacroAssemblerARM64::branch32(v12, 2, (char)v10, 17, v32, v33, v34, v35, (uint64_t)&v38);
  v36 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)v36 = v38;
  *(_QWORD *)(v36 + 4) = v39;
  return v10 | (v11 << 8);
}

void JSC::DFG::SpeculativeJIT::compileEnumeratorHasProperty<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned int,int)>(JSC::DFG::Node *,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long,unsigned int,int))::{lambda(JSC::JSValueRegs)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x8_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int *v59;
  int *v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  JSC::DFG::Node *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  _DWORD *v81;
  uint64_t *v82;
  int v83;
  char *v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint8x8_t v108;
  __int32 v109;
  uint8x8_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v120;
  char *v121;
  uint64_t v122;
  char *v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  uint64_t v126;
  int v127;
  char *v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  WTF *v162;
  unsigned int v163;
  char v164;
  uint64_t v165;
  char v166;
  char v167;
  char v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  _DWORD *v172;
  uint64_t *v173;
  int v174;
  char v175;
  int v176;
  uint64_t v177;
  _BYTE *v178;
  char *v179;
  int v180;
  char *v181;
  int64_t v182;
  int v183;
  char v184;
  char *v185;
  JSC::AssemblerBuffer *v186;
  JSC::ARM64LogicalImmediate *v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unsigned __int8 v192;
  unsigned __int8 v193;
  unsigned int v194[2];
  char v195;
  __int16 v196;
  char v197;
  int v198;
  uint64_t v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  WTF *v204;
  uint64_t v205;
  _BYTE v206[24];
  uint64_t v207;
  char v208;
  char *v209;
  uint64_t v210;
  _WORD v211[8];

  v192 = a2;
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 3960);
  v10 = *(_DWORD *)(*(_QWORD *)a1[1] + 24);
  v11 = *(_DWORD *)(v9 + 164);
  if (v11 <= v10 + 1)
    goto LABEL_175;
  v13 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * (v10 + 1));
  if ((v13 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_138;
  v14 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v14 >= *(unsigned int *)(v8 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C8DB1CLL);
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 3992) + 24 * (int)v14 + 12))
  {
    v15 = JSC::DFG::SpeculativeJIT::fillJSValue(*a1, v13, a3, a4, a5, a6, a7, a8);
    v9 = *(_QWORD *)(v8 + 3960);
    v10 = *(_DWORD *)(*(_QWORD *)a1[1] + 24);
    v11 = *(_DWORD *)(v9 + 164);
  }
  else
  {
LABEL_138:
    v15 = -1;
  }
  v193 = v15;
  if (v11 <= v10 + 2)
  {
    __break(0xC471u);
    JUMPOUT(0x197C8DB24);
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * (v10 + 2));
  v17 = ~*(_DWORD *)((v16 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v17 >= *(unsigned int *)(v8 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C8DB2CLL);
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 3992) + 24 * (int)v17 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(v8, v16, a3, a4, a5, a6, a7, a8);
    v19 = v18;
    v9 = *(_QWORD *)(v8 + 3960);
    v10 = *(_DWORD *)(*(_QWORD *)a1[1] + 24);
    v11 = *(_DWORD *)(v9 + 164);
  }
  else
  {
    v19 = -1;
  }
  if (v11 <= v10 + 3)
  {
    __break(0xC471u);
    JUMPOUT(0x197C8DB34);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * (v10 + 3));
  v21 = ~*(_DWORD *)((v20 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v21 >= *(unsigned int *)(v8 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C8DB3CLL);
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 3992) + 24 * (int)v21 + 12))
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(v8, v20, a3, a4, a5, a6, a7, a8);
    v23 = v22;
    v9 = *(_QWORD *)(v8 + 3960);
    v10 = *(_DWORD *)(*(_QWORD *)a1[1] + 24);
    v11 = *(_DWORD *)(v9 + 164);
  }
  else
  {
    v23 = -1;
  }
  v24 = v10 + 4;
  if (v11 <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197C8DB44);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * v24);
  v190 = v25 & 0xFF00FFFFFFFFFFFFLL;
  v191 = v13 & 0xFF00FFFFFFFFFFFFLL;
  if ((v25 & 0xFF00FFFFFFFFFFFFLL) == 0)
    goto LABEL_145;
  v26 = ~*(_DWORD *)((v25 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v26 >= *(unsigned int *)(v8 + 4004))
  {
    __break(0xC471u);
LABEL_183:
    JUMPOUT(0x197C8D9F4);
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 3992) + 24 * (int)v26 + 12))
    v27 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v8, v25, a3, a4, a5, a6, a7, a8);
  else
LABEL_145:
    v27 = -1;
  if (v193 == 0xFF)
    v193 = JSC::DFG::SpeculativeJIT::fillJSValue(v8, v13, a3, a4, a5, a6, a7, a8);
  if (v19 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(v8, v16, a3, a4, a5, a6, a7, a8);
    v19 = v28;
  }
  if (v23 == -1)
  {
    JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(v8, v20, a3, a4, a5, a6, a7, a8);
    v23 = v29;
  }
  if (v27 == -1)
    v27 = JSC::DFG::SpeculativeJIT::fillSpeculateCell(v8, v25, a3, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v8, a2, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v207, (JSC::DFG::SpeculativeJIT *)v8, v30, v31, v32, v33, v34, v35);
  v42 = v208;
  v204 = (WTF *)v206;
  v43 = (int8x8_t)2;
  v205 = 2;
  v44 = *(_QWORD *)a1[2];
  v45 = *(_QWORD *)(v8 + 5504);
  v46 = *(unsigned int *)((v44 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v47 = (_QWORD *)(v45 + 24);
  v48 = (_QWORD *)(v45 + 8);
  if ((v44 & 1) != 0)
    v49 = v47;
  else
    v49 = v48;
  v50 = *v49 + 32 * v46;
  v51 = (void *)*(unsigned int *)(v8 + 5584);
  if ((_DWORD)v51 != *(_DWORD *)(v50 + 20))
  {
    if ((*(_QWORD *)(v50 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v50, v51, v36, v37, v38, v39, v40, v41);
    else
      *(_DWORD *)(v50 + 20) = (_DWORD)v51;
  }
  if ((*(_QWORD *)(v50 + 8) & 0xFFFFD7FF00000008) != 0)
  {
    JSC::AssemblyHelpers::branchIfNotCell(v8, v192, 1, v37, v38, v39, v40, v41, (uint64_t)&v202);
    v170 = v202;
    if (v202 != -1)
    {
      v171 = HIDWORD(v205);
      if (HIDWORD(v205) == (_DWORD)v205)
      {
        v172 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v204, (void *)(HIDWORD(v205) + 1), (unint64_t)&v202, v169, v38, v39, v40, v41);
        v174 = *v172;
        v173 = (uint64_t *)(v172 + 1);
        v170 = v174;
        v171 = HIDWORD(v205);
      }
      else
      {
        v173 = &v203;
      }
      v179 = (char *)v204 + 12 * v171;
      *(_DWORD *)v179 = v170;
      *(_QWORD *)(v179 + 4) = *v173;
      ++HIDWORD(v205);
    }
  }
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)2, v8, 0, v23, v38, v39, v40, v41, (uint64_t)&v200, v43);
  v57 = v200;
  if (v200 != -1)
  {
    v58 = HIDWORD(v205);
    if (HIDWORD(v205) == (_DWORD)v205)
    {
      v59 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v204, (void *)(HIDWORD(v205) + 1), (unint64_t)&v200, v52, v53, v54, v55, v56);
      v61 = *v59;
      v60 = v59 + 1;
      v57 = v61;
      v58 = HIDWORD(v205);
    }
    else
    {
      v60 = &v201;
    }
    v62 = (char *)v204 + 12 * v58;
    *(_DWORD *)v62 = v57;
    *(_QWORD *)(v62 + 4) = *(_QWORD *)v60;
    ++HIDWORD(v205);
  }
  JSC::MacroAssemblerARM64::load32(v8, v192, v42, v52, v53, v54, v55, v56);
  if (!*(_BYTE *)(v8 + 212))
  {
    __break(0xC471u);
    goto LABEL_183;
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
  JSC::MacroAssemblerARM64::load32(v8, v27 | 0x1000000000, *(char *)(v8 + 304), v63, v64, v65, v66, v67);
  JSC::MacroAssemblerARM64::branch32(v8, 1, v42, 17, v68, v69, v70, v71, (uint64_t)&v198);
  v79 = v198;
  if (v198 != -1)
  {
    v80 = HIDWORD(v205);
    if (HIDWORD(v205) == (_DWORD)v205)
    {
      v81 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v204, (void *)(HIDWORD(v205) + 1), (unint64_t)&v198, v74, v75, v76, v77, v78);
      v83 = *v81;
      v82 = (uint64_t *)(v81 + 1);
      v79 = v83;
      v80 = HIDWORD(v205);
    }
    else
    {
      v82 = &v199;
    }
    v84 = (char *)v204 + 12 * v80;
    *(_DWORD *)v84 = v79;
    *(_QWORD *)(v84 + 4) = *v82;
    ++HIDWORD(v205);
  }
  v186 = (JSC::AssemblerBuffer *)(v8 + 56);
  v85 = *(_DWORD *)(v8 + 200);
  if (v85 + 4 > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v186, v72, (uint64_t)v73, v74, v75, v76, v77, v78);
    v85 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v85) = v42 | 0x32000BE0;
  v86 = *(_DWORD *)(v8 + 200) + 4;
  for (*(_DWORD *)(v8 + 200) = v86; v86 < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = v86)
  {
    if ((v86 + 4) > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v186, v72, (uint64_t)v73, v74, v75, v76, v77, v78);
      v86 = *(_DWORD *)(v8 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v86) = -721215457;
    v86 = *(_DWORD *)(v8 + 200) + 4;
  }
  v87 = v86;
  if ((v86 + 4) > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v186, v72, (uint64_t)v73, v74, v75, v76, v77, v78);
    v87 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v87) = 335544320;
  *(_DWORD *)(v8 + 200) += 4;
  if (*(_BYTE *)(v8 + 328))
    v88 = 69;
  else
    v88 = 65;
  v194[0] = v86;
  v194[1] = 0;
  v195 = v88;
  v196 = 15;
  v197 = -1;
  if (HIDWORD(v205))
  {
    v89 = 0;
    v90 = 0;
    v91 = 12 * HIDWORD(v205);
    while (v90 < HIDWORD(v205))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v204 + v89), v8, (uint64_t)v73, v74, v75, v76, v77, v78);
      ++v90;
      v89 += 12;
      if (v91 == v89)
        goto LABEL_55;
    }
    __break(0xC471u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(0xC471u);
    JUMPOUT(0x197C8DB14);
  }
LABEL_55:
  v189 = *(_QWORD *)a1[3];
  v92 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v8, *(JSC::DFG::JITCompiler **)a1[1], v73, v74, v75, v76, v77, v78);
  v187 = (JSC::ARM64LogicalImmediate *)v93;
  v209 = (char *)v211;
  v210 = 4;
  if (v192 == 1)
  {
    v100 = 0;
  }
  else
  {
    v211[0] = v192 | 0x100;
    v100 = 1;
    HIDWORD(v210) = 1;
  }
  v101 = v193;
  if (v193 != 2)
  {
    v211[v100++] = v193 | 0x200;
    HIDWORD(v210) = v100;
  }
  v188 = v92;
  if (v19 != 3)
  {
    v211[v100++] = v19 | 0x300;
    HIDWORD(v210) = v100;
  }
  if (v23 != 4)
  {
    v211[v100++] = v23 | 0x400;
    HIDWORD(v210) = v100;
    while (1)
    {
LABEL_63:
      v102 = 0;
      v103 = 0;
      v104 = v209;
      v105 = v100;
      do
      {
        if ((v209[v102 + 1] & 0x40) != 0)
          goto LABEL_174;
        v103 |= 1 << v209[v102 + 1];
        v102 += 2;
      }
      while (2 * v100 != v102);
      v106 = 0;
      do
      {
        v107 = v209[v106] & 0x7F;
        if (v107 >= 0x40)
          goto LABEL_174;
        v103 &= ~(1 << v107);
        v106 += 2;
      }
      while (2 * v100 != v106);
      v108 = (uint8x8_t)vcnt_s8((int8x8_t)v103);
      v108.i16[0] = vaddlv_u8(v108);
      v109 = v108.i32[0];
      v110 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v103));
      v110.i16[0] = vaddlv_u8(v110);
      if (!(v110.i32[0] + v109))
      {
        v175 = v209[1];
        v184 = *v209;
        JSC::MacroAssemblerARM64::swap(v8, *v209, v175, v95, v96, v97, v98, v99);
        memmove(v209, v209 + 2, 2 * HIDWORD(v210) - 2);
        v176 = HIDWORD(v210);
        v122 = (HIDWORD(v210) - 1);
        HIDWORD(v210) = v122;
        v124 = (unsigned __int8 *)v209;
        v128 = &v209[2 * v122];
        if (v176 == 1)
        {
          v126 = 0;
          v127 = 0;
          v93 = &v209[2 * v122];
        }
        else
        {
          v177 = 2 * v122;
          v178 = v209;
          while (*v178 != v175)
          {
            v178 += 2;
            v177 -= 2;
            if (!v177)
              goto LABEL_152;
          }
          *v178 = v184;
LABEL_152:
          LODWORD(v122) = 0;
          v125 = v124;
          v93 = v128;
          v123 = v128;
          do
          {
            if (*v124 == v124[1])
            {
              v121 = (char *)v124;
              if (v123 != &v209[2 * HIDWORD(v210)])
              {
                v183 = v122;
                v185 = v128;
                if (v124 == (unsigned __int8 *)v93)
                {
                  v121 = v123;
                }
                else
                {
                  v181 = v123;
                  v182 = v125 - (unsigned __int8 *)v93;
                  memmove(v123, v93, v125 - (unsigned __int8 *)v93);
                  v121 = &v181[v182];
                }
                v128 = v185;
                LODWORD(v122) = v183;
              }
              v93 = (char *)(v124 + 2);
              LODWORD(v122) = v122 + 1;
              v123 = v121;
            }
            v124 += 2;
            v125 += 2;
          }
          while (v124 < (unsigned __int8 *)v128);
          v124 = (unsigned __int8 *)v209;
          v126 = HIDWORD(v210);
          v127 = HIDWORD(v210);
          v128 = v123;
        }
        v129 = (char *)&v124[2 * v126];
        if (v93 != v129)
        {
          v180 = v122;
          memmove(v128, v93, v129 - v93);
          LODWORD(v122) = v180;
          v127 = HIDWORD(v210);
        }
        v100 = v127 - v122;
        goto LABEL_89;
      }
      v111 = 0;
      v112 = v100 <= 1uLL ? 1 : v100;
      v113 = 2 * v112;
      while (1)
      {
        v114 = v209[v111 + 1];
        if ((v114 & 0x7Fu) >= 0x40)
          goto LABEL_174;
        if (((v103 >> (v114 & 0x7F)) & 1) != 0)
          break;
        v111 += 2;
        if (v113 == v111)
          goto LABEL_90;
      }
      v115 = v209[v111];
      if (v115 != v114)
        break;
LABEL_88:
      memmove(&v104[v111], &v104[v111 + 2], 2 * v105 - v111 - 2);
      v100 = HIDWORD(v210) - 1;
LABEL_89:
      HIDWORD(v210) = v100;
LABEL_90:
      if (!v100)
      {
        v130 = (unint64_t)v209;
        v101 = v193;
        if (v211 != (_WORD *)v209 && v209)
        {
          v209 = 0;
          LODWORD(v210) = 0;
          WTF::fastFree(v130, v93, v94, v95, v96, v97, v98, v99);
        }
        goto LABEL_102;
      }
    }
    v116 = (char)v115;
    if ((char)v115 == 63)
    {
      v117 = *(_DWORD *)(v8 + 200);
      v118 = *(_DWORD *)(v8 + 192);
      if ((char)v114 != 31)
      {
        v120 = v114 & 0x1F | 0xD2800000;
        goto LABEL_85;
      }
    }
    else
    {
      v117 = *(_DWORD *)(v8 + 200);
      v118 = *(_DWORD *)(v8 + 192);
      if (v114 != 31 && v116 != 31)
      {
        v120 = v114 & 0xFFE0FFFF | ((v116 & 0x1F) << 16) | 0xAA0003E0;
LABEL_85:
        if (v117 + 4 > v118)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v186, (uint64_t)v93, v94, v95, v96, v97, v98, v99);
          v117 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v117) = v120;
        *(_DWORD *)(v8 + 200) += 4;
        v104 = v209;
        v105 = HIDWORD(v210);
        goto LABEL_88;
      }
    }
    v120 = (char)v114 | (32 * v116) | 0x91000000;
    goto LABEL_85;
  }
  if (v100)
    goto LABEL_63;
LABEL_102:
  if ((_DWORD)v188 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, (uint64_t)v187, 0, v95, v96, v97, v98, v99);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v188 << 35) + 0x380000001ALL, 0, v95, v96, v97, v98, v99);
  JSC::DFG::SpeculativeJIT::appendCall(v8, v189, v131, v132, v133, v134, v135, v136, (int *)&v209);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v137, v138, v139, v140, v141, v142);
  if ((_DWORD)v42)
  {
    if (v42 == 31)
      v150 = -1862270945;
    else
      v150 = v42 | 0xAA0003E0;
    v151 = *(_DWORD *)(v8 + 200);
    if (v151 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v186, v143, v144, v145, v146, v147, v148, v149);
      v151 = *(_DWORD *)(v8 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v151) = v150;
    *(_DWORD *)(v8 + 200) += 4;
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v194, v8, v144, v145, v146, v147, v148, v149);
  JSC::DFG::SpeculativeJIT::jsValueResult(v8, v42, *(_QWORD *)a1[1], 21, 0, v152, v153, v154);
  v162 = v204;
  if (v206 != (_BYTE *)v204 && v204)
  {
    v204 = 0;
    LODWORD(v205) = 0;
    WTF::fastFree((unint64_t)v162, v155, v156, v157, v158, v159, v160, v161);
  }
  if (v207)
  {
    v163 = v208;
    if (v208 != -1)
    {
      if (v208 > 15)
        v163 = -1;
      --*(_DWORD *)(v207 + 12 * v163 + 4784);
    }
  }
  if (v190)
  {
    if (v27 > 15)
      v164 = -1;
    else
      v164 = v27;
    --*(_DWORD *)(v8 + 12 * v164 + 4784);
  }
  v165 = v8 + 4776;
  if (v23 > 15)
    v166 = -1;
  else
    v166 = v23;
  --*(_DWORD *)(v165 + 12 * v166 + 8);
  if (v19 > 15)
    v167 = -1;
  else
    v167 = v19;
  --*(_DWORD *)(v165 + 12 * v167 + 8);
  if (v191)
  {
    if (v101 > 15)
      v168 = -1;
    else
      v168 = v101;
    --*(_DWORD *)(v165 + 12 * v168 + 8);
  }
}

void WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int>(uint64_t a1, int *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= v4 + 1)
    v7 = v4 + 1;
  else
    v7 = v6;
  WTF::Vector<long long,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
  v8 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = *a2;
  *(_DWORD *)(a1 + 12) = v8 + 1;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::DFG::JITCompiler::LinkableConstant>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573950;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::DFG::JITCompiler::LinkableConstant>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573950;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure,JSC::DFG::JITCompiler::LinkableConstant>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    v15 = *(_QWORD *)(a1 + 160);
    v16 = *(_QWORD *)(a1 + 168);
    v17 = *(unsigned int *)(a1 + 176);
    if (v17 == 0xFFFFFFFFLL)
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a1 + 184), 2, a4, a5, a6, a7, a8);
    else
      JSC::MacroAssemblerARM64::load64(a2, (v17 << 35) + 0x380000001ALL, 2, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v16, 1, v18, v19, v20, v21, v22);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v15, 0, v23, v24, v25, v26, v27);
    JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 152), v28, v29, v30, v31, v32, v33, (int *)&v40);
    *(_QWORD *)(a1 + 92) = v40;
    JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *,JSC::JSCell *),JSC::ARM64Registers::RegisterID>::tearDown(a1, a2, v34, v35, v36, v37, v38, v39);
  }
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,long long),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::JSValueRegs&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, char *a7, __int128 *a8, char *a9)
{
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  char v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  _DWORD *v32;
  char v33;
  char v34;
  int v35;
  _BYTE *v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v48;
  WTF *v49;
  __int128 v50;
  _BYTE *v52;
  unsigned int v53;
  _BYTE v54[24];
  WTF *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[24];
  WTF *v59;
  unsigned int v60;
  unsigned int v61;
  _BYTE v62[32];

  v16 = WTF::fastMalloc((WTF *)0xB8);
  v17 = *((unsigned int *)a2 + 3);
  v52 = v54;
  v53 = v17;
  if (v17 < 3)
  {
    v18 = v54;
  }
  else
  {
    if (v17 >= 0x15555556)
      goto LABEL_38;
    v18 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v17));
    v52 = v18;
    LODWORD(v17) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v17)
  {
    v19 = *a2;
    v20 = *a2 + 12 * v17;
    do
    {
      *(_DWORD *)v18 = *(_DWORD *)v19;
      *(_QWORD *)(v18 + 4) = *(_QWORD *)(v19 + 4);
      v19 += 12;
      v18 += 12;
    }
    while (v19 != v20);
  }
  v21 = *a3;
  v22 = *a4;
  v23 = *a5;
  v24 = *a6;
  v25 = *a7;
  v50 = *a8;
  v26 = *a9;
  v27 = v53;
  v55 = (WTF *)v58;
  v56 = 2;
  v57 = v53;
  if (v53 < 3)
  {
    v28 = v58;
  }
  else
  {
    if (v53 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C8E1DCLL);
    }
    v28 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v53));
    v56 = 12 * v53 / 0xC;
    v55 = (WTF *)v28;
    v27 = v53;
  }
  if (v27)
  {
    v29 = v52;
    v30 = &v52[12 * v27];
    do
    {
      *(_DWORD *)v28 = *(_DWORD *)v29;
      *(_QWORD *)(v28 + 4) = *(_QWORD *)(v29 + 4);
      v29 += 12;
      v28 += 12;
    }
    while (v29 != v30);
  }
  v31 = v57;
  v59 = (WTF *)v62;
  v60 = 2;
  v61 = v57;
  if (v57 < 3)
  {
    v36 = v62;
    if (!v57)
      goto LABEL_22;
LABEL_20:
    v37 = v55;
    v38 = (WTF *)((char *)v55 + 12 * v31);
    do
    {
      *(_DWORD *)v36 = *(_DWORD *)v37;
      *(_QWORD *)(v36 + 4) = *(_QWORD *)((char *)v37 + 4);
      v37 = (WTF *)((char *)v37 + 12);
      v36 += 12;
    }
    while (v37 != v38);
    goto LABEL_22;
  }
  if (v57 >= 0x15555556)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x197C8E1D4);
  }
  v32 = v21;
  v33 = v24;
  v34 = v26;
  v35 = 12 * v57;
  v36 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v57));
  v60 = (v35 & 0xFFFFFFFC) / 0xC;
  v59 = (WTF *)v36;
  v31 = v57;
  v26 = v34;
  v24 = v33;
  v21 = v32;
  if (v57)
    goto LABEL_20;
LABEL_22:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v16, (uint64_t *)&v59, v21);
  v46 = v59;
  if (v62 != (_BYTE *)v59 && v59 != 0)
  {
    v59 = 0;
    v60 = 0;
    WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
  }
  *(_QWORD *)v16 = off_1E3573F50;
  *(_QWORD *)(v16 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v16 + 100) = v23;
  *(_BYTE *)(v16 + 101) = v24;
  *(_BYTE *)(v16 + 102) = v25;
  *(_QWORD *)(v16 + 104) = v16 + 120;
  v48 = v16 + 104;
  *(_QWORD *)(v16 + 112) = 2;
  if (!v23)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v21, 0, v48, v25, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v44, v45);
  v49 = v55;
  if (v58 != (_BYTE *)v55 && v55)
  {
    v55 = 0;
    v56 = 0;
    WTF::fastFree((unint64_t)v49, v39, v48, v41, v42, v43, v44, v45);
  }
  *(_QWORD *)v16 = &off_1E3573F20;
  *(_QWORD *)(v16 + 152) = v22;
  *(_OWORD *)(v16 + 160) = v50;
  *(_BYTE *)(v16 + 176) = v26;
  *a1 = v16;
  if (v54 != v52)
  {
    if (v52)
      WTF::fastFree((unint64_t)v52, v39, v48, v41, v42, v43, v44, v45);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573F50;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573F50;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  int v78;
  __int16 *v79;
  void *__dst;
  int v81;
  unsigned int v82;
  __int16 v83;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = &v83;
  __dst = &v83;
  v81 = 1;
  if (v17 != 1)
  {
    v83 = v17 | 0x100;
    v82 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_92;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_92;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v78 = v19;
      v79 = v18;
      v77 = v15;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v82 - 2);
      v40 = v82 - 1;
      v35 = v82 == 1;
      v82 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v82)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v82;
        v44 = v82;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v82;
      }
      v20 = v44 - v45;
      v15 = v77;
      v18 = v79;
      v19 = v78;
LABEL_40:
      v82 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v81 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_92;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v82 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v82;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&__dst);
  *(_QWORD *)(a1 + 92) = __dst;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
LABEL_67:
    v67 = 0;
    v68 = 0;
    goto LABEL_68;
  }
  v76 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102), v62, v63, v64, v65, v66);
  v68 = v76;
  v67 = HIBYTE(v76);
LABEL_68:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_81;
      }
LABEL_93:
      __break(0xC471u);
      return;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (!*(_BYTE *)(a1 + 101))
  {
    if (v67)
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  v39 = 0;
  v40 = 2;
  v11 = *(_QWORD *)(a1 + 3960);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 3976) + 8);
  if ((v12 & 1) != 0)
  {
    v20 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v25 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v25 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else
    {
      if (v25 >> 28)
        goto LABEL_33;
      v34 = v20;
      v20 = v25 << 36;
    }
    goto LABEL_23;
  }
  while (1)
  {
    v38 = v12;
    v11 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v11, &v38, &v40, &v39, a5, a6, a7, a8);
    v20 = v11;
    if ((v38 & 1) != 0)
    {
      v11 = v38 & 0xFFFFFFFF8;
      if ((v38 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v11, v13, v14, v15, v16, v17, v18, v19);
    }
    if ((v20 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v14, v15, v16, v17, v18, v19);
      v21 = 0;
      v22 = 0;
      goto LABEL_5;
    }
    v24 = a2[3];
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 16 * v24;
      v27 = (char *)(*(_QWORD *)a2 + 2);
      while (1)
      {
        v29 = *v27;
        v27 += 16;
        v28 = v29;
        if ((v29 & 0x40) != 0)
          goto LABEL_32;
        v25 |= 1 << v28;
        v26 -= 16;
        if (!v26)
          goto LABEL_11;
      }
    }
    v25 = 0;
LABEL_11:
    if ((a3 & 0x40) == 0)
      break;
LABEL_32:
    __break(1u);
LABEL_33:
    v37 = v11;
    v35 = v25;
    v36 = WTF::fastMalloc((WTF *)0x10);
    v11 = v37;
    *(_QWORD *)v36 = v20;
    *(_DWORD *)(v36 + 8) = v35;
    v34 = 1;
    v20 = v36;
LABEL_23:
    v12 = v20 | v34;
  }
  v21 = 1;
  v30 = v25 | (1 << a3);
  if ((v30 & 2) != 0)
  {
    v31 = (unsigned __int16)~(_WORD)v30 & 0xFFFE;
    if (v31)
    {
      v32 = __clz(__rbit64(v31));
      v22 = 1;
      JSC::MacroAssemblerARM64::move((_DWORD *)a1, 1, v32, v15, v16, v17, v18, v19);
      v21 = v32;
    }
    else
    {
      v22 = 1;
      v21 = 255;
    }
  }
  else
  {
    v22 = 1;
  }
LABEL_5:
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  return v21 | (v22 << 8);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSArray *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3573FB0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSArray *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3573FB0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSArray *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSArray *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  JSC::AssemblerBuffer *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int16 *v101;
  uint64_t v102;
  void *__dst;
  int v104;
  unsigned int v105;
  __int16 v106;
  unint64_t v107;
  unsigned int *v108;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_129;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = &v106;
  __dst = &v106;
  v104 = 1;
  if (v17 != 1)
  {
    v106 = v17 | 0x100;
    v105 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_129;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_129;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v100 = v19;
      v101 = v18;
      v99 = v15;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v105 - 2);
      v40 = v105 - 1;
      v35 = v105 == 1;
      v105 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v105)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v105;
        v44 = v105;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v105;
      }
      v20 = v44 - v45;
      v15 = v99;
      v18 = v101;
      v19 = v100;
LABEL_40:
      v105 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v104 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_129;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v105 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v105;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&v102);
  *(_QWORD *)(a1 + 92) = v102;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
LABEL_67:
    v67 = 0;
    LOBYTE(v68) = 0;
    goto LABEL_68;
  }
  v76 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v108 = 0;
  v77 = *(_QWORD *)(v8 + 3960);
  v78 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v78 & 1) != 0)
  {
    v94 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
    if ((v78 & 2) != 0
      || ((v95 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v98 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v98 = v94;
      *(_DWORD *)(v98 + 8) = v95;
      v97 = 1;
      v94 = v98;
    }
    else
    {
      v97 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v78 = v94 | v97;
  }
  v107 = v78;
  v79 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v77, &v107, (uint64_t *)&__dst, &v108, v63, v64, v65, v66);
  if ((v107 & 1) != 0 && (v107 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v107 & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
  if ((v79 & 1) != 0)
  {
    v80 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v80)
    {
      v81 = 0;
      v82 = 16 * v80;
      v83 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v85 = *v83;
        v83 += 16;
        v84 = v85;
        if ((v85 & 0x40) != 0)
          break;
        v81 |= 1 << v84;
        v82 -= 16;
        if (!v82)
          goto LABEL_99;
      }
    }
    else
    {
      v81 = 0;
LABEL_99:
      if ((v76 & 0x40) == 0)
      {
        v67 = 1;
        v86 = v81 | (1 << v76);
        LOBYTE(v68) = 1;
        if ((v86 & 2) != 0)
        {
          v87 = (unsigned __int16)~(_WORD)v86 & 0xFFFE;
          if (v87)
          {
            v68 = __clz(__rbit64(v87));
            if (v68 == 1)
            {
              v67 = 1;
            }
            else
            {
              if (v68 == 31)
              {
                v90 = (unsigned int *)(v8 + 200);
                v89 = *(_DWORD *)(v8 + 200);
                v91 = (JSC::AssemblerBuffer *)(v8 + 56);
                v92 = v89 + 4;
                v93 = *(_DWORD *)(v8 + 192);
                v88 = -1862270913;
              }
              else
              {
                v88 = v68 | 0xAA0103E0;
                v90 = (unsigned int *)(v8 + 200);
                v89 = *(_DWORD *)(v8 + 200);
                v91 = (JSC::AssemblerBuffer *)(v8 + 56);
                v92 = v89 + 4;
                v93 = *(_DWORD *)(v8 + 192);
              }
              if (v92 > v93)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v91, (uint64_t)v60, v61, v62, v63, v64, v65, v66);
                v89 = *v90;
              }
              *(_DWORD *)(*(_QWORD *)v91 + v89) = v88;
              *v90 += 4;
              v67 = 1;
            }
          }
          else
          {
            v67 = 1;
            LOBYTE(v68) = -1;
          }
        }
        goto LABEL_90;
      }
    }
LABEL_129:
    __break(1u);
LABEL_130:
    __break(0xC471u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
  LOBYTE(v68) = 0;
  v67 = 0;
LABEL_90:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
LABEL_68:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_81;
      }
      goto LABEL_130;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v67)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574010;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574010;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  JSC::AssemblerBuffer *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int16 *v101;
  uint64_t v102;
  void *__dst;
  int v104;
  unsigned int v105;
  __int16 v106;
  unint64_t v107;
  unsigned int *v108;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_129;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = &v106;
  __dst = &v106;
  v104 = 1;
  if (v17 != 1)
  {
    v106 = v17 | 0x100;
    v105 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_129;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_129;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v100 = v19;
      v101 = v18;
      v99 = v15;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v105 - 2);
      v40 = v105 - 1;
      v35 = v105 == 1;
      v105 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v105)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v105;
        v44 = v105;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v105;
      }
      v20 = v44 - v45;
      v15 = v99;
      v18 = v101;
      v19 = v100;
LABEL_40:
      v105 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v104 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_129;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v105 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v105;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&v102);
  *(_QWORD *)(a1 + 92) = v102;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
LABEL_67:
    v67 = 0;
    LOBYTE(v68) = 0;
    goto LABEL_68;
  }
  v76 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v108 = 0;
  v77 = *(_QWORD *)(v8 + 3960);
  v78 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v78 & 1) != 0)
  {
    v94 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
    if ((v78 & 2) != 0
      || ((v95 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v98 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v98 = v94;
      *(_DWORD *)(v98 + 8) = v95;
      v97 = 1;
      v94 = v98;
    }
    else
    {
      v97 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v78 = v94 | v97;
  }
  v107 = v78;
  v79 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v77, &v107, (uint64_t *)&__dst, &v108, v63, v64, v65, v66);
  if ((v107 & 1) != 0 && (v107 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v107 & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
  if ((v79 & 1) != 0)
  {
    v80 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v80)
    {
      v81 = 0;
      v82 = 16 * v80;
      v83 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v85 = *v83;
        v83 += 16;
        v84 = v85;
        if ((v85 & 0x40) != 0)
          break;
        v81 |= 1 << v84;
        v82 -= 16;
        if (!v82)
          goto LABEL_99;
      }
    }
    else
    {
      v81 = 0;
LABEL_99:
      if ((v76 & 0x40) == 0)
      {
        v67 = 1;
        v86 = v81 | (1 << v76);
        LOBYTE(v68) = 1;
        if ((v86 & 2) != 0)
        {
          v87 = (unsigned __int16)~(_WORD)v86 & 0xFFFE;
          if (v87)
          {
            v68 = __clz(__rbit64(v87));
            if (v68 == 1)
            {
              v67 = 1;
            }
            else
            {
              if (v68 == 31)
              {
                v90 = (unsigned int *)(v8 + 200);
                v89 = *(_DWORD *)(v8 + 200);
                v91 = (JSC::AssemblerBuffer *)(v8 + 56);
                v92 = v89 + 4;
                v93 = *(_DWORD *)(v8 + 192);
                v88 = -1862270913;
              }
              else
              {
                v88 = v68 | 0xAA0103E0;
                v90 = (unsigned int *)(v8 + 200);
                v89 = *(_DWORD *)(v8 + 200);
                v91 = (JSC::AssemblerBuffer *)(v8 + 56);
                v92 = v89 + 4;
                v93 = *(_DWORD *)(v8 + 192);
              }
              if (v92 > v93)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v91, (uint64_t)v60, v61, v62, v63, v64, v65, v66);
                v89 = *v90;
              }
              *(_DWORD *)(*(_QWORD *)v91 + v89) = v88;
              *v90 += 4;
              v67 = 1;
            }
          }
          else
          {
            v67 = 1;
            LOBYTE(v68) = -1;
          }
        }
        goto LABEL_90;
      }
    }
LABEL_129:
    __break(1u);
LABEL_130:
    __break(0xC471u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
  LOBYTE(v68) = 0;
  v67 = 0;
LABEL_90:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
LABEL_68:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_81;
      }
      goto LABEL_130;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v67)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,unsigned int>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574070;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,unsigned int>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574070;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *,unsigned int),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *,unsigned int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,unsigned int>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  JSC::ARM64LogicalImmediate *v18;
  __int16 *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int *v99;
  JSC::AssemblerBuffer *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  __int16 *v105;
  uint64_t v106;
  void *__dst;
  int v108;
  unsigned int v109;
  __int16 v110;
  unint64_t v111;
  unsigned int *v112;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_129;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(a1 + 180);
  v19 = &v110;
  __dst = &v110;
  v108 = 1;
  if (v17 != 1)
  {
    v110 = v17 | 0x100;
    v109 = 1;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_129;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_129;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v104 = v15;
      v105 = v19;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v109 - 2);
      v40 = v109 - 1;
      v35 = v109 == 1;
      v109 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v109)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v109;
        v44 = v109;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v109;
      }
      v20 = v44 - v45;
      v15 = v104;
      v19 = v105;
LABEL_40:
      v109 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v19 != __dst && __dst)
        {
          __dst = 0;
          v108 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_129;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v109 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v109;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | 0x91000000;
    goto LABEL_36;
  }
LABEL_62:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v8, v18, 2, a4, a5, a6, a7, a8);
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, v54, v55, v56, v57, v58);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, v54, v55, v56, v57, v58);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v59, v60, v61, v62, v63, v64, (int *)&v106);
  *(_QWORD *)(a1 + 92) = v106;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v66, v67, v68, v69, v70, v71);
LABEL_67:
    v72 = 0;
    LOBYTE(v73) = 0;
    goto LABEL_68;
  }
  v81 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v112 = 0;
  v82 = *(_QWORD *)(v8 + 3960);
  v83 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v83 & 1) != 0)
  {
    v91 = *(_QWORD *)(v83 & 0xFFFFFFFF8);
    if ((v83 & 2) != 0
      || ((v92 = *(unsigned int *)((v83 & 0xFFFFFFFF8) + 8), (_DWORD)v92 != 0x3FFFFFFF)
        ? (v93 = (_DWORD)v92 == -1)
        : (v93 = 1),
          v93))
    {
      v94 = 2;
    }
    else if (v92 >> 28)
    {
      v103 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v103 = v91;
      *(_DWORD *)(v103 + 8) = v92;
      v94 = 1;
      v91 = v103;
    }
    else
    {
      v94 = *(_QWORD *)(v83 & 0xFFFFFFFF8);
      v91 = v92 << 36;
    }
    v83 = v91 | v94;
  }
  v111 = v83;
  v84 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v82, &v111, (uint64_t *)&__dst, &v112, v68, v69, v70, v71);
  if ((v111 & 1) != 0 && (v111 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v111 & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
  if ((v84 & 1) != 0)
  {
    v85 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v85)
    {
      v86 = 0;
      v87 = 16 * v85;
      v88 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v90 = *v88;
        v88 += 16;
        v89 = v90;
        if ((v90 & 0x40) != 0)
          break;
        v86 |= 1 << v89;
        v87 -= 16;
        if (!v87)
          goto LABEL_108;
      }
    }
    else
    {
      v86 = 0;
LABEL_108:
      if ((v81 & 0x40) == 0)
      {
        v72 = 1;
        v95 = v86 | (1 << v81);
        LOBYTE(v73) = 1;
        if ((v95 & 2) != 0)
        {
          v96 = (unsigned __int16)~(_WORD)v95 & 0xFFFE;
          if (v96)
          {
            v73 = __clz(__rbit64(v96));
            if (v73 == 1)
            {
              v72 = 1;
            }
            else
            {
              if (v73 == 31)
              {
                v99 = (unsigned int *)(v8 + 200);
                v98 = *(_DWORD *)(v8 + 200);
                v100 = (JSC::AssemblerBuffer *)(v8 + 56);
                v101 = v98 + 4;
                v102 = *(_DWORD *)(v8 + 192);
                v97 = -1862270913;
              }
              else
              {
                v97 = v73 | 0xAA0103E0;
                v99 = (unsigned int *)(v8 + 200);
                v98 = *(_DWORD *)(v8 + 200);
                v100 = (JSC::AssemblerBuffer *)(v8 + 56);
                v101 = v98 + 4;
                v102 = *(_DWORD *)(v8 + 192);
              }
              if (v101 > v102)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v100, (uint64_t)v65, v66, v67, v68, v69, v70, v71);
                v98 = *v99;
              }
              *(_DWORD *)(*(_QWORD *)v100 + v98) = v97;
              *v99 += 4;
              v72 = 1;
            }
          }
          else
          {
            v72 = 1;
            LOBYTE(v73) = -1;
          }
        }
        goto LABEL_90;
      }
    }
LABEL_129:
    __break(1u);
LABEL_130:
    __break(0xC471u);
    return;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v66, v67, v68, v69, v70, v71);
  LOBYTE(v73) = 0;
  v72 = 0;
LABEL_90:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v65, v66, v67, v68, v69, v70, v71);
LABEL_68:
  v74 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v74 == 31)
    {
      v75 = -1862270945;
    }
    else if (v74 == 255)
    {
      v75 = -1442774017;
    }
    else
    {
      v75 = v74 | 0xAA0003E0;
    }
    v77 = (unsigned int *)(v8 + 200);
    v76 = *(_DWORD *)(v8 + 200);
    if (v76 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v65, v66, v67, v68, v69, v70, v71);
      v76 = *v77;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v76) = v75;
    *v77 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v78 = *(_DWORD *)(a1 + 116);
    if (v78)
    {
      v79 = v78 - 1;
      v80 = 16 * (v78 - 1);
      while (*(_DWORD *)(a1 + 116) > v79)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v80, v66, v67, v68, v69, v70, v71);
        v80 -= 16;
        if (--v79 == -1)
          goto LABEL_81;
      }
      goto LABEL_130;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v72)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v73, v66, v67, v68, v69, v70, v71);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v66, v67, v68, v69, v70, v71);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::ARM64Registers::RegisterID&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, char *a7, __int128 *a8, char *a9)
{
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  char v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  _DWORD *v32;
  char v33;
  char v34;
  int v35;
  _BYTE *v36;
  WTF *v37;
  WTF *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v48;
  WTF *v49;
  __int128 v50;
  _BYTE *v52;
  unsigned int v53;
  _BYTE v54[24];
  WTF *v55;
  unsigned int v56;
  unsigned int v57;
  _BYTE v58[24];
  WTF *v59;
  unsigned int v60;
  unsigned int v61;
  _BYTE v62[32];

  v16 = WTF::fastMalloc((WTF *)0xB8);
  v17 = *((unsigned int *)a2 + 3);
  v52 = v54;
  v53 = v17;
  if (v17 < 3)
  {
    v18 = v54;
  }
  else
  {
    if (v17 >= 0x15555556)
      goto LABEL_38;
    v18 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v17));
    v52 = v18;
    LODWORD(v17) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v17)
  {
    v19 = *a2;
    v20 = *a2 + 12 * v17;
    do
    {
      *(_DWORD *)v18 = *(_DWORD *)v19;
      *(_QWORD *)(v18 + 4) = *(_QWORD *)(v19 + 4);
      v19 += 12;
      v18 += 12;
    }
    while (v19 != v20);
  }
  v21 = *a3;
  v22 = *a4;
  v23 = *a5;
  v24 = *a6;
  v25 = *a7;
  v50 = *a8;
  v26 = *a9;
  v27 = v53;
  v55 = (WTF *)v58;
  v56 = 2;
  v57 = v53;
  if (v53 < 3)
  {
    v28 = v58;
  }
  else
  {
    if (v53 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C9095CLL);
    }
    v28 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v53));
    v56 = 12 * v53 / 0xC;
    v55 = (WTF *)v28;
    v27 = v53;
  }
  if (v27)
  {
    v29 = v52;
    v30 = &v52[12 * v27];
    do
    {
      *(_DWORD *)v28 = *(_DWORD *)v29;
      *(_QWORD *)(v28 + 4) = *(_QWORD *)(v29 + 4);
      v29 += 12;
      v28 += 12;
    }
    while (v29 != v30);
  }
  v31 = v57;
  v59 = (WTF *)v62;
  v60 = 2;
  v61 = v57;
  if (v57 < 3)
  {
    v36 = v62;
    if (!v57)
      goto LABEL_22;
LABEL_20:
    v37 = v55;
    v38 = (WTF *)((char *)v55 + 12 * v31);
    do
    {
      *(_DWORD *)v36 = *(_DWORD *)v37;
      *(_QWORD *)(v36 + 4) = *(_QWORD *)((char *)v37 + 4);
      v37 = (WTF *)((char *)v37 + 12);
      v36 += 12;
    }
    while (v37 != v38);
    goto LABEL_22;
  }
  if (v57 >= 0x15555556)
  {
LABEL_38:
    __break(0xC471u);
    JUMPOUT(0x197C90954);
  }
  v32 = v21;
  v33 = v24;
  v34 = v26;
  v35 = 12 * v57;
  v36 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v57));
  v60 = (v35 & 0xFFFFFFFC) / 0xC;
  v59 = (WTF *)v36;
  v31 = v57;
  v26 = v34;
  v24 = v33;
  v21 = v32;
  if (v57)
    goto LABEL_20;
LABEL_22:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v16, (uint64_t *)&v59, v21);
  v46 = v59;
  if (v62 != (_BYTE *)v59 && v59 != 0)
  {
    v59 = 0;
    v60 = 0;
    WTF::fastFree((unint64_t)v46, v39, v40, v41, v42, v43, v44, v45);
  }
  *(_QWORD *)v16 = off_1E35740D0;
  *(_QWORD *)(v16 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v16 + 100) = v23;
  *(_BYTE *)(v16 + 101) = v24;
  *(_BYTE *)(v16 + 102) = v25;
  *(_QWORD *)(v16 + 104) = v16 + 120;
  v48 = v16 + 104;
  *(_QWORD *)(v16 + 112) = 2;
  if (!v23)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v21, 0, v48, v25, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v44, v45);
  v49 = v55;
  if (v58 != (_BYTE *)v55 && v55)
  {
    v55 = 0;
    v56 = 0;
    WTF::fastFree((unint64_t)v49, v39, v48, v41, v42, v43, v44, v45);
  }
  *(_QWORD *)v16 = &off_1E35740A0;
  *(_QWORD *)(v16 + 152) = v22;
  *(_OWORD *)(v16 + 160) = v50;
  *(_BYTE *)(v16 + 176) = v26;
  *a1 = v16;
  if (v54 != v52)
  {
    if (v52)
      WTF::fastFree((unint64_t)v52, v39, v48, v41, v42, v43, v44, v45);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35740D0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35740D0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  JSC::AssemblerBuffer *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int16 *v101;
  uint64_t v102;
  void *__dst;
  int v104;
  unsigned int v105;
  __int16 v106;
  unint64_t v107;
  unsigned int *v108;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_129;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = &v106;
  __dst = &v106;
  v104 = 1;
  if (v17 != 1)
  {
    v106 = v17 | 0x100;
    v105 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_129;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_129;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v100 = v19;
      v101 = v18;
      v99 = v15;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v105 - 2);
      v40 = v105 - 1;
      v35 = v105 == 1;
      v105 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v105)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v105;
        v44 = v105;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v105;
      }
      v20 = v44 - v45;
      v15 = v99;
      v18 = v101;
      v19 = v100;
LABEL_40:
      v105 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v104 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_129;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v105 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v105;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&v102);
  *(_QWORD *)(a1 + 92) = v102;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
LABEL_67:
    v67 = 0;
    LOBYTE(v68) = 0;
    goto LABEL_68;
  }
  v76 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v108 = 0;
  v77 = *(_QWORD *)(v8 + 3960);
  v78 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v78 & 1) != 0)
  {
    v94 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
    if ((v78 & 2) != 0
      || ((v95 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v98 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v98 = v94;
      *(_DWORD *)(v98 + 8) = v95;
      v97 = 1;
      v94 = v98;
    }
    else
    {
      v97 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v78 = v94 | v97;
  }
  v107 = v78;
  v79 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v77, &v107, (uint64_t *)&__dst, &v108, v63, v64, v65, v66);
  if ((v107 & 1) != 0 && (v107 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v107 & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
  if ((v79 & 1) != 0)
  {
    v80 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v80)
    {
      v81 = 0;
      v82 = 16 * v80;
      v83 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v85 = *v83;
        v83 += 16;
        v84 = v85;
        if ((v85 & 0x40) != 0)
          break;
        v81 |= 1 << v84;
        v82 -= 16;
        if (!v82)
          goto LABEL_96;
      }
LABEL_129:
      __break(1u);
LABEL_130:
      __break(0xC471u);
      return;
    }
    v81 = 0;
LABEL_96:
    if ((v76 & 0x40) != 0)
      goto LABEL_129;
    v67 = 1;
    v86 = v81 | (1 << v76);
    LOBYTE(v68) = 1;
    if ((v86 & 2) != 0)
    {
      v87 = (unsigned __int16)~(_WORD)v86 & 0xFFFE;
      if (v87)
      {
        v68 = __clz(__rbit64(v87));
        if (v68 == 1)
        {
          v67 = 1;
        }
        else
        {
          if (v68 == 31)
          {
            v90 = (unsigned int *)(v8 + 200);
            v89 = *(_DWORD *)(v8 + 200);
            v91 = (JSC::AssemblerBuffer *)(v8 + 56);
            v92 = v89 + 4;
            v93 = *(_DWORD *)(v8 + 192);
            v88 = -1862270913;
          }
          else
          {
            v88 = v68 | 0xAA0103E0;
            v90 = (unsigned int *)(v8 + 200);
            v89 = *(_DWORD *)(v8 + 200);
            v91 = (JSC::AssemblerBuffer *)(v8 + 56);
            v92 = v89 + 4;
            v93 = *(_DWORD *)(v8 + 192);
          }
          if (v92 > v93)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v91, (uint64_t)v60, v61, v62, v63, v64, v65, v66);
            v89 = *v90;
          }
          *(_DWORD *)(*(_QWORD *)v91 + v89) = v88;
          *v90 += 4;
          v67 = 1;
        }
      }
      else
      {
        v67 = 1;
        LOBYTE(v68) = -1;
      }
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
    LOBYTE(v68) = 0;
    v67 = 0;
  }
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
LABEL_68:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_81;
      }
      goto LABEL_130;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v67)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3574130;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574130;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574130;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::RegisteredStructure>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    v15 = *(_QWORD *)(a1 + 160);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a1 + 168), 1, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v15, 0, v16, v17, v18, v19, v20);
    JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 152), v21, v22, v23, v24, v25, v26, (int *)&v33);
    *(_QWORD *)(a1 + 92) = v33;
    JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID>::tearDown(a1, a2, v27, v28, v29, v30, v31, v32);
  }
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  JSC::AssemblerBuffer *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  uint64_t v42;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
LABEL_4:
    LODWORD(v8) = 0;
    LOBYTE(v11) = 0;
    goto LABEL_5;
  }
  LOBYTE(v11) = *(_BYTE *)(a1 + 102);
  v41 = 0;
  v42 = 2;
  v19 = *(_QWORD *)(a2 + 3960);
  v20 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v20 & 1) != 0)
  {
    v35 = *(_QWORD *)(a2 + 3960);
    v8 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
    if ((v20 & 2) != 0
      || ((v36 = *(unsigned int *)((v20 & 0xFFFFFFFF8) + 8), (_DWORD)v36 != 0x3FFFFFFF)
        ? (v37 = (_DWORD)v36 == -1)
        : (v37 = 1),
          v37))
    {
      v38 = 2;
    }
    else if (v36 >> 28)
    {
      v39 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v39 = v8;
      *(_DWORD *)(v39 + 8) = v36;
      v38 = 1;
      v8 = v39;
    }
    else
    {
      v38 = *(_QWORD *)(v20 & 0xFFFFFFFF8);
      v8 = v36 << 36;
    }
    v20 = v8 | v38;
    v19 = v35;
  }
  v40 = v20;
  v21 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v19, &v40, &v42, &v41, a5, a6, a7, a8);
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
  if ((v21 & 1) != 0)
  {
    v22 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = 16 * v22;
      v25 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v27 = *v25;
        v25 += 16;
        v26 = v27;
        if ((v27 & 0x40) != 0)
          break;
        v23 |= 1 << v26;
        v24 -= 16;
        if (!v24)
          goto LABEL_36;
      }
    }
    else
    {
      v23 = 0;
LABEL_36:
      if ((v11 & 0x40) == 0)
      {
        LODWORD(v8) = 1;
        v28 = v23 | (1 << v11);
        LOBYTE(v11) = 1;
        if ((v28 & 2) != 0)
        {
          v29 = (unsigned __int16)~(_WORD)v28 & 0xFFFE;
          if (v29)
          {
            v11 = __clz(__rbit64(v29));
            if (v11 == 1)
            {
              LODWORD(v8) = 1;
            }
            else
            {
              if (v11 == 31)
              {
                v8 = a2 + 200;
                v31 = *(_DWORD *)(a2 + 200);
                v32 = (JSC::AssemblerBuffer *)(a2 + 56);
                v33 = v31 + 4;
                v34 = *(_DWORD *)(a2 + 192);
                v30 = -1862270913;
              }
              else
              {
                v30 = v11 | 0xAA0103E0;
                v8 = a2 + 200;
                v31 = *(_DWORD *)(a2 + 200);
                v32 = (JSC::AssemblerBuffer *)(a2 + 56);
                v33 = v31 + 4;
                v34 = *(_DWORD *)(a2 + 192);
              }
              if (v33 > v34)
              {
                JSC::AssemblerBuffer::outOfLineGrow(v32, a2, a3, a4, a5, a6, a7, a8);
                v31 = *(_DWORD *)v8;
              }
              *(_DWORD *)(*(_QWORD *)v32 + v31) = v30;
              *(_DWORD *)v8 += 4;
              LODWORD(v8) = 1;
            }
          }
          else
          {
            LODWORD(v8) = 1;
            LOBYTE(v11) = -1;
          }
        }
        goto LABEL_27;
      }
    }
    __break(1u);
    goto LABEL_61;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
  LOBYTE(v11) = 0;
  LODWORD(v8) = 0;
LABEL_27:
  if ((v42 & 1) != 0 && (v42 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v42 & 0xFFFFFFFF8, (void *)a2, a3, a4, a5, a6, a7, a8);
LABEL_5:
  v12 = *(unsigned __int8 *)(a1 + 102);
  if (!*(_BYTE *)(a1 + 102))
    goto LABEL_13;
  if (v12 == 31)
  {
    v13 = -1862270945;
    goto LABEL_10;
  }
  if (v12 == 255)
  {
LABEL_61:
    v13 = -1442774017;
    goto LABEL_10;
  }
  v13 = v12 | 0xAA0003E0;
LABEL_10:
  v15 = (unsigned int *)(a2 + 200);
  v14 = *(_DWORD *)(a2 + 200);
  if (v14 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *v15;
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = v13;
  *v15 += 4;
LABEL_13:
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_19:
    if ((_DWORD)v8)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v11, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v16 = *(_DWORD *)(a1 + 116);
  if (!v16)
  {
LABEL_18:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_19;
  }
  v17 = v16 - 1;
  v18 = 16 * (v16 - 1);
  while (*(_DWORD *)(a1 + 116) > v17)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v18, a3, a4, a5, a6, a7, a8);
    v18 -= 16;
    if (--v17 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(_QWORD *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  unsigned int v28;
  int v29;
  _BYTE v30[29];
  char v31;
  __int16 v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v14 = *((unsigned int *)a2 + 3);
  v27 = (WTF *)v30;
  v28 = 2;
  v29 = v14;
  if (v14 < 3)
  {
    v16 = v30;
    if (!(_DWORD)v14)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v14 >= 0x15555556)
  {
    __break(0xC471u);
    return;
  }
  v15 = 12 * v14;
  v16 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v14));
  v28 = (v15 & 0xFFFFFFFC) / 0xC;
  v27 = (WTF *)v16;
  LODWORD(v14) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v14)
  {
LABEL_6:
    v17 = *a2;
    v18 = *a2 + 12 * v14;
    do
    {
      *(_DWORD *)v16 = *(_DWORD *)v17;
      *(_QWORD *)(v16 + 4) = *(_QWORD *)(v17 + 4);
      v17 += 12;
      v16 += 12;
    }
    while (v17 != v18);
  }
LABEL_8:
  v35 = a7;
  v36 = a6;
  v33 = a4;
  v34 = a3;
  v32 = 0;
  v31 = a5;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::VM *,JSC::Structure *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(a1, (uint64_t *)&v27, &v34, &v33, (unsigned __int8 *)&v32 + 1, (char *)&v32, &v31, &v36, &v35);
  v26 = v27;
  if (v30 != (_BYTE *)v27)
  {
    if (v27)
    {
      v27 = 0;
      v28 = 0;
      WTF::fastFree((unint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
    }
  }
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<JSC::JSCell *> (*&)(JSC::VM *,JSC::Structure *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&>(_QWORD *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, char *a7, uint64_t *a8, uint64_t *a9)
{
  _QWORD *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v40;
  _BYTE *v42;
  unsigned int v43;
  _BYTE v44[24];
  WTF *v45;
  unsigned int v46;
  unsigned int v47;
  _BYTE v48[24];

  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0xB0);
  v17 = *((unsigned int *)a2 + 3);
  v42 = v44;
  v43 = v17;
  if (v17 < 3)
  {
    v18 = v44;
  }
  else
  {
    if (v17 >= 0x15555556)
      goto LABEL_23;
    v18 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v17));
    v42 = v18;
    LODWORD(v17) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v17)
  {
    v19 = *a2;
    v20 = *a2 + 12 * v17;
    do
    {
      *(_DWORD *)v18 = *(_DWORD *)v19;
      *(_QWORD *)(v18 + 4) = *(_QWORD *)(v19 + 4);
      v19 += 12;
      v18 += 12;
    }
    while (v19 != v20);
  }
  v21 = *a3;
  v40 = *a4;
  v22 = *a5;
  v23 = *a6;
  v24 = *a7;
  v25 = *a8;
  v26 = *a9;
  v27 = v43;
  v45 = (WTF *)v48;
  v46 = 2;
  v47 = v43;
  if (v43 >= 3)
  {
    if (v43 < 0x15555556)
    {
      v28 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v43));
      v46 = 12 * v43 / 0xC;
      v45 = (WTF *)v28;
      v27 = v43;
      goto LABEL_12;
    }
LABEL_23:
    __break(0xC471u);
    JUMPOUT(0x197C91D3CLL);
  }
  v28 = v48;
  if (v43)
  {
LABEL_12:
    v29 = v42;
    v30 = &v42[12 * v27];
    do
    {
      *(_DWORD *)v28 = *(_DWORD *)v29;
      *(_QWORD *)(v28 + 4) = *(_QWORD *)(v29 + 4);
      v29 += 12;
      v28 += 12;
    }
    while (v29 != v30);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator((uint64_t)v16, (uint64_t *)&v45, v21, v22, v23, v24);
  v38 = v45;
  if (v48 != (_BYTE *)v45 && v45 != 0)
  {
    v45 = 0;
    v46 = 0;
    WTF::fastFree((unint64_t)v38, v31, v32, v33, v34, v35, v36, v37);
  }
  *v16 = &off_1E3574160;
  v16[19] = v40;
  v16[20] = v25;
  v16[21] = v26;
  *a1 = v16;
  if (v44 != v42)
  {
    if (v42)
      WTF::fastFree((unint64_t)v42, v31, v32, v33, v34, v35, v36, v37);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574130;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574130;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), a2, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_5:
    if (!*(_BYTE *)(a1 + 100))
    {
      *(_BYTE *)(a2 + 5768) = 1;
      if (*(_DWORD *)(a1 + 116))
      {
        v13 = 0;
        v14 = 0;
        do
        {
          JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
          ++v14;
          v13 += 16;
        }
        while (v14 < *(unsigned int *)(a1 + 116));
      }
    }
    v15 = *(_QWORD *)(a1 + 160);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a1 + 168), 1, a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v15, 0, v16, v17, v18, v19, v20);
    JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 152), v21, v22, v23, v24, v25, v26, (int *)&v33);
    *(_QWORD *)(a1 + 92) = v33;
    JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSCell *> (*)(JSC::VM *,JSC::Structure *),JSC::ARM64Registers::RegisterID>::tearDown(a1, a2, v27, v28, v29, v30, v31, v32);
  }
}

void JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSAsyncGenerator,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v10 = a3;
  if (a2 && *(_DWORD *)(a2 + 60) <= 0x4Fu)
  {
    __break(0xC471u);
    goto LABEL_10;
  }
  v24[0] = 0;
  v24[1] = a2;
  JSC::AssemblyHelpers::emitAllocate(a1, a3, (uint64_t)v24, a5, a6, a7, 1, a8, a9);
  v17 = (a4 >> 4) | ((unint64_t)*(unsigned int *)(a4 + 8) << 32);
  if (!v17)
  {
    v18 = 63;
    goto LABEL_7;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
LABEL_10:
    JUMPOUT(0x197C92094);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v17, a1 + 264, v12, v13, v14, v15, v16);
  v18 = 16;
LABEL_7:
  JSC::MacroAssemblerARM64::store64(a1, v18, v10, v12, v13, v14, v15, v16);
  JSC::MacroAssemblerARM64::store64(a1, 63, v10 | 0x800000000, v19, v20, v21, v22, v23);
}

void JSC::AssemblyHelpers::emitAllocateJSObjectWithKnownSize<JSC::JSInternalPromise,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::DFG::SpeculativeJIT::TrustedImmPtr>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  unsigned __int8 v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  if (*(_DWORD *)(a2 + 39028) <= 0x1Fu)
  {
    __break(0xC471u);
    goto LABEL_9;
  }
  v10 = a3;
  v24[0] = 0;
  v24[1] = a2 + 38968;
  JSC::AssemblyHelpers::emitAllocate(a1, a3, (uint64_t)v24, a5, a6, a7, 1, a8, a9);
  v17 = (a4 >> 4) | ((unint64_t)*(unsigned int *)(a4 + 8) << 32);
  if (!v17)
  {
    v18 = 63;
    goto LABEL_6;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
LABEL_9:
    JUMPOUT(0x197C92190);
  }
  JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, v17, a1 + 264, v12, v13, v14, v15, v16);
  v18 = 16;
LABEL_6:
  JSC::MacroAssemblerARM64::store64(a1, v18, v10, v12, v13, v14, v15, v16);
  JSC::MacroAssemblerARM64::store64(a1, 63, v10 | 0x800000000, v19, v20, v21, v22, v23);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E35741C0;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E35741C0;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v8;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint8x8_t v32;
  __int32 v33;
  uint8x8_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int v41;
  char v42;
  char v43;
  uint64_t v44;
  unsigned __int8 *v45;
  char *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  unsigned __int8 *v53;
  char *v54;
  unsigned __int8 *v55;
  int64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  int v71;
  __int16 *v72;
  void *__dst;
  int v74;
  unsigned int v75;
  __int16 v76;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v18 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v18, v12, v13, v14, v15, v16, v17);
        v8 = (JSC::AssemblerBuffer *)((char *)v8 + 1);
        v18 += 16;
      }
      while ((unint64_t)v8 < *(unsigned int *)(a1 + 92));
    }
  }
  v19 = *(unsigned int *)(a1 + 136);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(unsigned __int8 *)(a1 + 152);
  v22 = &v76;
  __dst = &v76;
  v23 = 1;
  v74 = 1;
  if (v21 != 1)
  {
    v76 = v21 | 0x100;
    v75 = 1;
    v24 = -1862270976;
    v25 = 1;
    do
    {
      v26 = 0;
      v27 = 0;
      v28 = (char *)__dst;
      v29 = v25;
      do
      {
        if ((*((_BYTE *)__dst + v26 + 1) & 0x40) != 0)
        {
LABEL_82:
          __break(1u);
          goto LABEL_83;
        }
        v27 |= 1 << *((_BYTE *)__dst + v26 + 1);
        v26 += 2;
      }
      while (2 * v25 != v26);
      v30 = 0;
      do
      {
        v31 = *((_BYTE *)__dst + v30) & 0x7F;
        if (v31 >= 0x40)
          goto LABEL_82;
        v27 &= ~(1 << v31);
        v30 += 2;
      }
      while (2 * v25 != v30);
      v32 = (uint8x8_t)vcnt_s8((int8x8_t)v27);
      v32.i16[0] = vaddlv_u8(v32);
      v33 = v32.i32[0];
      v34 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v27));
      v34.i16[0] = vaddlv_u8(v34);
      if (v34.i32[0] + v33)
      {
        v35 = 0;
        if (v25 <= 1)
          v36 = 1;
        else
          v36 = v25;
        v37 = 2 * v36;
        while (1)
        {
          v38 = *((unsigned __int8 *)__dst + v35 + 1);
          if ((v38 & 0x7Fu) >= 0x40)
            goto LABEL_82;
          if (((v27 >> (v38 & 0x7F)) & 1) != 0)
            break;
          v35 += 2;
          if (v37 == v35)
            goto LABEL_37;
        }
        v39 = *((unsigned __int8 *)__dst + v35);
        if (v39 != v38)
        {
          v39 = (char)v39;
          if ((char)v39 == 63)
          {
            if ((char)v38 == 31)
              goto LABEL_31;
            v8 = (JSC::AssemblerBuffer *)(v38 & 0x1F | 0xD2800000);
          }
          else
          {
            v40 = v38 == 31 || v39 == 31;
            if (!v40)
            {
              v8 = (JSC::AssemblerBuffer *)(v38 & 0xFFE0FFFF | ((v39 & 0x1F) << 16) | 0xAA0003E0);
              goto LABEL_32;
            }
LABEL_31:
            v8 = (JSC::AssemblerBuffer *)((char)v38 | (32 * v39) | v24);
          }
LABEL_32:
          v41 = *(_DWORD *)(a2 + 200);
          if (v41 + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v11, v12, v13, v14, v15, v16, v17);
            v41 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v41) = (_DWORD)v8;
          *(_DWORD *)(a2 + 200) += 4;
          v28 = (char *)__dst;
          v29 = v75;
        }
        memmove(&v28[v35], &v28[v35 + 2], 2 * v29 - v35 - 2);
        v25 = v75 - 1;
        goto LABEL_36;
      }
      v71 = v24;
      v72 = v22;
      v70 = v19;
      v42 = *(_BYTE *)__dst;
      v43 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v43, v13, v14, v15, v16, v17);
      memmove(__dst, (char *)__dst + 2, 2 * v75 - 2);
      v44 = v75 - 1;
      v40 = v75 == 1;
      v75 = v44;
      v45 = (unsigned __int8 *)__dst;
      v46 = (char *)__dst + 2 * v44;
      if (v40)
      {
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v11 = (char *)__dst + 2 * v44;
      }
      else
      {
        v51 = 2 * v44;
        v52 = __dst;
        while (*v52 != v43)
        {
          v52 += 2;
          v51 -= 2;
          if (!v51)
            goto LABEL_47;
        }
        *v52 = v42;
LABEL_47:
        v49 = 0;
        v53 = v45;
        v11 = v46;
        v54 = v46;
        do
        {
          if (*v45 == v45[1])
          {
            v55 = v45;
            if (v54 != (char *)__dst + 2 * v75)
            {
              if (v45 == (unsigned __int8 *)v11)
              {
                v55 = (unsigned __int8 *)v54;
              }
              else
              {
                v56 = v53 - (unsigned __int8 *)v11;
                memmove(v54, v11, v53 - (unsigned __int8 *)v11);
                v55 = (unsigned __int8 *)&v54[v56];
              }
            }
            v11 = (char *)(v45 + 2);
            ++v49;
            v54 = (char *)v55;
          }
          v45 += 2;
          v53 += 2;
        }
        while (v45 < (unsigned __int8 *)v46);
        v45 = (unsigned __int8 *)__dst;
        v47 = v75;
        v48 = v75;
        v46 = v54;
      }
      v50 = (char *)&v45[2 * v47];
      if (v11 != v50)
      {
        memmove(v46, v11, v50 - v11);
        v48 = v75;
      }
      v25 = v48 - v49;
      v19 = v70;
      v22 = v72;
      v23 = 1;
      v24 = v71;
LABEL_36:
      v75 = v25;
LABEL_37:
      ;
    }
    while (v25);
    v57 = __dst;
    if (v22 != __dst && __dst)
    {
      __dst = 0;
      v74 = 0;
      WTF::fastFree((unint64_t)v57, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  if (v19 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, v20, 0, v13, v14, v15, v16, v17);
  else
    JSC::MacroAssemblerARM64::load64(a2, (v19 << 35) + 0x380000001ALL, 0, v13, v14, v15, v16, v17);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v58, v59, v60, v61, v62, v63, (int *)&__dst);
  *(_QWORD *)(a1 + 64) = __dst;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_63;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v12, v13, v14, v15, v16, v17);
LABEL_63:
    LODWORD(v19) = 0;
    LOBYTE(v20) = 0;
    goto LABEL_64;
  }
  v69 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long),JSC::JSValueRegs,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 80), *(_BYTE *)(a1 + 74), v13, v14, v15, v16, v17);
  LOBYTE(v20) = v69;
  LODWORD(v19) = HIBYTE(v69);
LABEL_64:
  v64 = *(unsigned __int8 *)(a1 + 74);
  if (*(_BYTE *)(a1 + 74))
  {
    if (v64 == 31)
    {
      LODWORD(v22) = -1862270945;
    }
    else if (v64 == 255)
    {
      LODWORD(v22) = -1442774017;
    }
    else
    {
      LODWORD(v22) = v64 | 0xAA0003E0;
    }
    v23 = a2 + 200;
    v65 = *(_DWORD *)(a2 + 200);
    v8 = (JSC::AssemblerBuffer *)(a2 + 56);
    if (v65 + 4 > *(_DWORD *)(a2 + 192))
    {
LABEL_83:
      JSC::AssemblerBuffer::outOfLineGrow(v8, (uint64_t)v11, v12, v13, v14, v15, v16, v17);
      v65 = *(_DWORD *)v23;
    }
    *(_DWORD *)(*(_QWORD *)v8 + v65) = (_DWORD)v22;
    *(_DWORD *)v23 += 4;
  }
  if (*(_BYTE *)(a1 + 72))
    goto LABEL_77;
  v66 = *(_DWORD *)(a1 + 92);
  if (!v66)
  {
LABEL_76:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_77:
    if (!*(_BYTE *)(a1 + 73))
    {
      if ((_DWORD)v19)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v20, v12, v13, v14, v15, v16, v17);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v12, v13, v14, v15, v16, v17);
    return;
  }
  v67 = v66 - 1;
  v68 = 16 * (v66 - 1);
  while (*(_DWORD *)(a1 + 92) > v67)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v68, v12, v13, v14, v15, v16, v17);
    v68 -= 16;
    if (--v67 == -1)
      goto LABEL_76;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574220;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574220;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::JSValueRegs>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint8x8_t v27;
  __int32 v28;
  uint8x8_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  char *v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  int64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  JSC::AssemblerBuffer *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  __int16 *v101;
  uint64_t v102;
  void *__dst;
  int v104;
  unsigned int v105;
  __int16 v106;
  unint64_t v107;
  unsigned int *v108;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
      if (v10 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
    goto LABEL_129;
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = &v106;
  __dst = &v106;
  v104 = 1;
  if (v17 != 1)
  {
    v106 = v17 | 0x100;
    v105 = 1;
    v19 = -1862270976;
    v20 = 1;
    while (1)
    {
      v21 = 0;
      v22 = 0;
      v23 = (char *)__dst;
      v24 = v20;
      do
      {
        if ((*((_BYTE *)__dst + v21 + 1) & 0x40) != 0)
          goto LABEL_129;
        v22 |= 1 << *((_BYTE *)__dst + v21 + 1);
        v21 += 2;
      }
      while (2 * v20 != v21);
      v25 = 0;
      do
      {
        v26 = *((_BYTE *)__dst + v25) & 0x7F;
        if (v26 >= 0x40)
          goto LABEL_129;
        v22 &= ~(1 << v26);
        v25 += 2;
      }
      while (2 * v20 != v25);
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
      v27.i16[0] = vaddlv_u8(v27);
      v28 = v27.i32[0];
      v29 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v22));
      v29.i16[0] = vaddlv_u8(v29);
      if (v29.i32[0] + v28)
        break;
      v100 = v19;
      v101 = v18;
      v99 = v15;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * v105 - 2);
      v40 = v105 - 1;
      v35 = v105 == 1;
      v105 = v40;
      v41 = (unsigned __int8 *)__dst;
      v42 = (char *)__dst + 2 * v40;
      if (v35)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        a2 = (char *)__dst + 2 * v40;
      }
      else
      {
        v47 = 2 * v40;
        v48 = __dst;
        while (*v48 != v39)
        {
          v48 += 2;
          v47 -= 2;
          if (!v47)
            goto LABEL_51;
        }
        *v48 = v38;
LABEL_51:
        v45 = 0;
        v49 = v41;
        a2 = v42;
        v50 = v42;
        do
        {
          if (*v41 == v41[1])
          {
            v51 = v41;
            if (v50 != (char *)__dst + 2 * v105)
            {
              if (v41 == (unsigned __int8 *)a2)
              {
                v51 = (unsigned __int8 *)v50;
              }
              else
              {
                v52 = v49 - (unsigned __int8 *)a2;
                memmove(v50, a2, v49 - (unsigned __int8 *)a2);
                v51 = (unsigned __int8 *)&v50[v52];
              }
            }
            a2 = (char *)(v41 + 2);
            ++v45;
            v50 = (char *)v51;
          }
          v41 += 2;
          v49 += 2;
        }
        while (v41 < (unsigned __int8 *)v42);
        v41 = (unsigned __int8 *)__dst;
        v43 = v105;
        v44 = v105;
        v42 = v50;
      }
      v46 = (char *)&v41[2 * v43];
      if (a2 != v46)
      {
        memmove(v42, a2, v46 - a2);
        v44 = v105;
      }
      v20 = v44 - v45;
      v15 = v99;
      v18 = v101;
      v19 = v100;
LABEL_40:
      v105 = v20;
LABEL_41:
      if (!v20)
      {
        v53 = __dst;
        if (v18 != __dst && __dst)
        {
          __dst = 0;
          v104 = 0;
          WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_62;
      }
    }
    v30 = 0;
    if (v20 <= 1)
      v31 = 1;
    else
      v31 = v20;
    v32 = 2 * v31;
    while (1)
    {
      v33 = *((unsigned __int8 *)__dst + v30 + 1);
      if ((v33 & 0x7Fu) >= 0x40)
        goto LABEL_129;
      if (((v22 >> (v33 & 0x7F)) & 1) != 0)
        break;
      v30 += 2;
      if (v32 == v30)
        goto LABEL_41;
    }
    v34 = *((unsigned __int8 *)__dst + v30);
    if (v34 == v33)
    {
LABEL_39:
      memmove(&v23[v30], &v23[v30 + 2], 2 * v24 - v30 - 2);
      v20 = v105 - 1;
      goto LABEL_40;
    }
    v34 = (char)v34;
    if ((char)v34 == 63)
    {
      if ((char)v33 != 31)
      {
        v36 = v33 & 0x1F | 0xD2800000;
        goto LABEL_36;
      }
    }
    else
    {
      v35 = v33 == 31 || v34 == 31;
      if (!v35)
      {
        v36 = v33 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_36:
        v37 = *(_DWORD *)(v8 + 200);
        if (v37 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v37 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v36;
        *(_DWORD *)(v8 + 200) += 4;
        v23 = (char *)__dst;
        v24 = v105;
        goto LABEL_39;
      }
    }
    v36 = (char)v33 | (32 * v34) | v19;
    goto LABEL_36;
  }
LABEL_62:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&v102);
  *(_QWORD *)(a1 + 92) = v102;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_67;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
LABEL_67:
    v67 = 0;
    LOBYTE(v68) = 0;
    goto LABEL_68;
  }
  v76 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v108 = 0;
  v77 = *(_QWORD *)(v8 + 3960);
  v78 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v78 & 1) != 0)
  {
    v94 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
    if ((v78 & 2) != 0
      || ((v95 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v98 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v98 = v94;
      *(_DWORD *)(v98 + 8) = v95;
      v97 = 1;
      v94 = v98;
    }
    else
    {
      v97 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v78 = v94 | v97;
  }
  v107 = v78;
  v79 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v77, &v107, (uint64_t *)&__dst, &v108, v63, v64, v65, v66);
  if ((v107 & 1) != 0 && (v107 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v107 & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
  if ((v79 & 1) != 0)
  {
    v80 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v80)
    {
      v81 = 0;
      v82 = 16 * v80;
      v83 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v85 = *v83;
        v83 += 16;
        v84 = v85;
        if ((v85 & 0x40) != 0)
          break;
        v81 |= 1 << v84;
        v82 -= 16;
        if (!v82)
          goto LABEL_96;
      }
LABEL_129:
      __break(1u);
LABEL_130:
      __break(0xC471u);
      return;
    }
    v81 = 0;
LABEL_96:
    if ((v76 & 0x40) != 0)
      goto LABEL_129;
    v67 = 1;
    v86 = v81 | (1 << v76);
    LOBYTE(v68) = 1;
    if ((v86 & 2) != 0)
    {
      v87 = (unsigned __int16)~(_WORD)v86 & 0xFFFE;
      if (v87)
      {
        v68 = __clz(__rbit64(v87));
        if (v68 == 1)
        {
          v67 = 1;
        }
        else
        {
          if (v68 == 31)
          {
            v90 = (unsigned int *)(v8 + 200);
            v89 = *(_DWORD *)(v8 + 200);
            v91 = (JSC::AssemblerBuffer *)(v8 + 56);
            v92 = v89 + 4;
            v93 = *(_DWORD *)(v8 + 192);
            v88 = -1862270913;
          }
          else
          {
            v88 = v68 | 0xAA0103E0;
            v90 = (unsigned int *)(v8 + 200);
            v89 = *(_DWORD *)(v8 + 200);
            v91 = (JSC::AssemblerBuffer *)(v8 + 56);
            v92 = v89 + 4;
            v93 = *(_DWORD *)(v8 + 192);
          }
          if (v92 > v93)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v91, (uint64_t)v60, v61, v62, v63, v64, v65, v66);
            v89 = *v90;
          }
          *(_DWORD *)(*(_QWORD *)v91 + v89) = v88;
          *v90 += 4;
          v67 = 1;
        }
      }
      else
      {
        v67 = 1;
        LOBYTE(v68) = -1;
      }
    }
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
    LOBYTE(v68) = 0;
    v67 = 0;
  }
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
LABEL_68:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v73 = *(_DWORD *)(a1 + 116);
    if (v73)
    {
      v74 = v73 - 1;
      v75 = 16 * (v73 - 1);
      while (*(_DWORD *)(a1 + 116) > v74)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
        v75 -= 16;
        if (--v74 == -1)
          goto LABEL_81;
      }
      goto LABEL_130;
    }
LABEL_81:
    *(_BYTE *)(v8 + 5768) = 0;
  }
  if (v67)
  {
    if (!*(_BYTE *)(a1 + 101))
      JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v68, v61, v62, v63, v64, v65, v66);
  }
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574280;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574280;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,int),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t i;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint8x8_t v25;
  __int32 v26;
  uint8x8_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  char v36;
  char v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  _BYTE *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  void *__dst;
  int v85;
  unsigned int v86;
  _WORD v87[4];
  unint64_t v88;
  unsigned int *v89;

  v11 = (uint64_t)a2;
  v13 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v13)
  {
    v8 = 0;
    for (i = 0; i != v13; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_135;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v8), v11, a3, a4, a5, a6, a7, a8);
      v8 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v11 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v14 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v11, *(_QWORD *)(a1 + 104) + v14, a3, a4, a5, a6, a7, a8);
        ++v8;
        v14 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 116));
    }
  }
  v10 = -1442839584;
  v15 = *(unsigned int *)(a1 + 160);
  v13 = *(_QWORD *)(a1 + 168);
  v16 = *(unsigned __int8 *)(a1 + 176);
  v17 = *(unsigned __int8 *)(a1 + 177);
  __dst = v87;
  v85 = 2;
  if (v16 == 1)
  {
    if (v17 == 2)
      goto LABEL_69;
    v18 = 0;
  }
  else
  {
    v87[0] = v16 | 0x100;
    v18 = 1;
    v86 = 1;
    if (v17 == 2)
      goto LABEL_15;
  }
  v87[v18++] = v17 | 0x200;
  v86 = v18;
  do
  {
LABEL_15:
    v19 = 0;
    v20 = 0;
    v21 = (char *)__dst;
    v22 = v18;
    do
    {
      if ((*((_BYTE *)__dst + v19 + 1) & 0x40) != 0)
        goto LABEL_135;
      v20 |= 1 << *((_BYTE *)__dst + v19 + 1);
      v19 += 2;
    }
    while (2 * v18 != v19);
    v23 = 0;
    do
    {
      v24 = *((_BYTE *)__dst + v23) & 0x7F;
      if (v24 >= 0x40)
        goto LABEL_135;
      v20 &= ~(1 << v24);
      v23 += 2;
    }
    while (2 * v18 != v23);
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
    v25.i16[0] = vaddlv_u8(v25);
    v26 = v25.i32[0];
    v27 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v20));
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.i32[0] + v26)
    {
      v8 = 0;
      if (v18 <= 1)
        v28 = 1;
      else
        v28 = v18;
      v29 = 2 * v28;
      while (1)
      {
        v30 = *((unsigned __int8 *)__dst + v8 + 1);
        if ((v30 & 0x7Fu) >= 0x40)
          goto LABEL_135;
        if (((v20 >> (v30 & 0x7F)) & 1) != 0)
          break;
        v8 += 2;
        if (v29 == v8)
          goto LABEL_65;
      }
      v31 = *((unsigned __int8 *)__dst + v8);
      if (v31 == v30)
      {
LABEL_63:
        memmove(&v21[v8], &v21[v8 + 2], 2 * v22 - v8 - 2);
        v18 = v86 - 1;
        goto LABEL_64;
      }
      v32 = (char)v31;
      if ((char)v31 == 63)
      {
        v33 = *(_DWORD *)(v11 + 200);
        v34 = *(_DWORD *)(v11 + 192);
        if ((char)v30 != 31)
        {
          i = v30 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v33 = *(_DWORD *)(v11 + 200);
        v34 = *(_DWORD *)(v11 + 192);
        v35 = v30 == 31 || v32 == 31;
        if (!v35)
        {
          i = v30 & 0xFFE0FFFF | ((v32 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v33 + 4 > v34)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v33 = *(_DWORD *)(v11 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v11 + 56) + v33) = i;
          *(_DWORD *)(v11 + 200) += 4;
          v21 = (char *)__dst;
          v22 = v86;
          goto LABEL_63;
        }
      }
      i = (char)v30 | (32 * v32) | 0x91000000;
      goto LABEL_60;
    }
    v36 = *(_BYTE *)__dst;
    v37 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v11, *(char *)__dst, v37, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v86 - 2);
    v38 = v86 - 1;
    v35 = v86 == 1;
    v86 = v38;
    v8 = (unint64_t)__dst;
    v39 = (char *)__dst + 2 * v38;
    if (v35)
    {
      v45 = 0;
      v46 = 0;
      i = 0;
      a2 = v39;
    }
    else
    {
      v40 = 2 * v38;
      v41 = __dst;
      while (*v41 != v37)
      {
        v41 += 2;
        v40 -= 2;
        if (!v40)
          goto LABEL_43;
      }
      *v41 = v36;
LABEL_43:
      i = 0;
      v42 = v8;
      a2 = v39;
      v43 = v39;
      do
      {
        if (*(unsigned __int8 *)v8 == *(unsigned __int8 *)(v8 + 1))
        {
          v44 = (char *)v8;
          if (v43 != (char *)__dst + 2 * v86)
          {
            v82 = v39;
            if ((_BYTE *)v8 == a2)
            {
              v44 = v43;
            }
            else
            {
              v80 = v42 - (_QWORD)a2;
              v81 = v43;
              memmove(v43, a2, v42 - (_QWORD)a2);
              v44 = &v81[v80];
            }
            v39 = v82;
          }
          a2 = (_BYTE *)(v8 + 2);
          i = (i + 1);
          v43 = v44;
        }
        v8 += 2;
        v42 += 2;
      }
      while (v8 < (unint64_t)v39);
      v8 = (unint64_t)__dst;
      v45 = v86;
      v46 = v86;
      v39 = v43;
    }
    v47 = (_BYTE *)(v8 + 2 * v45);
    v10 = -1442839584;
    if (a2 != v47)
    {
      memmove(v39, a2, v47 - a2);
      v46 = v86;
    }
    v18 = v46 - i;
LABEL_64:
    v86 = v18;
LABEL_65:
    ;
  }
  while (v18);
  v48 = __dst;
  if (v87 != __dst && __dst)
  {
    __dst = 0;
    v85 = 0;
    WTF::fastFree((unint64_t)v48, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_69:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v11, v13, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v11, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v11, *(_QWORD *)(a1 + 152), v49, v50, v51, v52, v53, v54, (int *)&v83);
  *(_QWORD *)(a1 + 92) = v83;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_74:
    v55 = 0;
    LOBYTE(v8) = 0;
    goto LABEL_75;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, a3, a4, a5, a6, a7, a8);
    goto LABEL_74;
  }
  LOBYTE(v8) = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v89 = 0;
  v63 = *(_QWORD *)(v11 + 3960);
  v64 = *(_QWORD *)(*(_QWORD *)(v11 + 3976) + 8);
  if ((v64 & 1) != 0)
  {
    i = *(_QWORD *)(v64 & 0xFFFFFFFF8);
    if ((v64 & 2) != 0
      || ((v65 = *(unsigned int *)((v64 & 0xFFFFFFFF8) + 8), (_DWORD)v65 != 0x3FFFFFFF)
        ? (v66 = (_DWORD)v65 == -1)
        : (v66 = 1),
          v66))
    {
      v67 = 2;
    }
    else if (v65 >> 28)
    {
      v79 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v79 = i;
      *(_DWORD *)(v79 + 8) = v65;
      v67 = 1;
      i = v79;
    }
    else
    {
      v67 = *(_QWORD *)(v64 & 0xFFFFFFFF8);
      i = v65 << 36;
    }
    v64 = i | v67;
    v10 = -1442839584;
  }
  v88 = v64;
  v13 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v63, &v88, (uint64_t *)&__dst, &v89, a5, a6, a7, a8);
  if ((v88 & 1) != 0 && (v88 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v88 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v13 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v11, 1, a3, a4, a5, a6, a7, a8);
    LOBYTE(v8) = 0;
    v55 = 0;
    goto LABEL_97;
  }
  v68 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v68)
  {
    v69 = 0;
    v70 = 16 * v68;
    v71 = (char *)(*(_QWORD *)(a1 + 104) + 2);
    while (1)
    {
      v73 = *v71;
      v71 += 16;
      v72 = v73;
      if ((v73 & 0x40) != 0)
        goto LABEL_135;
      v69 |= 1 << v72;
      v70 -= 16;
      if (!v70)
        goto LABEL_120;
    }
  }
  v69 = 0;
LABEL_120:
  if ((v8 & 0x40) != 0)
  {
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  v55 = 1;
  v74 = v69 | (1 << v8);
  LOBYTE(v8) = 1;
  if ((v74 & 2) == 0)
    goto LABEL_97;
  v75 = (unsigned __int16)~(_WORD)v74 & 0xFFFE;
  if (!v75)
  {
    v55 = 1;
    LOBYTE(v8) = -1;
    goto LABEL_97;
  }
  LODWORD(v8) = __clz(__rbit64(v75));
  if ((_DWORD)v8 == 1)
  {
    v55 = 1;
    goto LABEL_97;
  }
  if ((_DWORD)v8 == 31)
  {
    i = v11 + 200;
    v76 = *(_DWORD *)(v11 + 200);
    v13 = v11 + 56;
    v77 = v76 + 4;
    v78 = *(_DWORD *)(v11 + 192);
    v10 = -1862270913;
  }
  else
  {
    v10 = v8 | 0xAA0103E0;
    i = v11 + 200;
    v76 = *(_DWORD *)(v11 + 200);
    v13 = v11 + 56;
    v77 = v76 + 4;
    v78 = *(_DWORD *)(v11 + 192);
  }
  if (v77 > v78)
  {
LABEL_136:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v13, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v76 = *(_DWORD *)i;
  }
  *(_DWORD *)(*(_QWORD *)v13 + v76) = v10;
  *(_DWORD *)i += 4;
  v55 = 1;
LABEL_97:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
LABEL_75:
  v56 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v56 == 31)
    {
      v57 = -1862270945;
    }
    else if (v56 == 255)
    {
      v57 = -1442774017;
    }
    else
    {
      v57 = v56 | 0xAA0003E0;
    }
    v59 = (unsigned int *)(v11 + 200);
    v58 = *(_DWORD *)(v11 + 200);
    if (v58 + 4 > *(_DWORD *)(v11 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v11 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v58 = *v59;
    }
    *(_DWORD *)(*(_QWORD *)(v11 + 56) + v58) = v57;
    *v59 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
    goto LABEL_89;
  v60 = *(_DWORD *)(a1 + 116);
  if (!v60)
  {
LABEL_88:
    *(_BYTE *)(v11 + 5768) = 0;
LABEL_89:
    if (v55)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(v11, (char)v8, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v11, a3, a4, a5, a6, a7, a8);
    return;
  }
  v61 = v60 - 1;
  v62 = 16 * (v60 - 1);
  while (*(_DWORD *)(a1 + 116) > v61)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(v11, *(_QWORD *)(a1 + 104) + v62, a3, a4, a5, a6, a7, a8);
    v62 -= 16;
    if (--v61 == -1)
      goto LABEL_88;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::VM *),JSC::NoResultTag,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = off_1E35742E0;
  v9 = *(_QWORD *)(a1 + 80);
  if (a1 + 96 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v11 = *(_QWORD *)(a1 + 32);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::VM *),JSC::NoResultTag,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E35742E0;
  v9 = (WTF *)*((_QWORD *)this + 10);
  if ((WTF *)((char *)this + 96) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v11 = *((_QWORD *)this + 4);
  if ((v11 & 1) != 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v12 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::VM *),JSC::NoResultTag>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 64);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ExceptionOperationResult<void> (*)(JSC::VM *),JSC::NoResultTag,JSC::DFG::SpeculativeJIT::TrustedImmPtr>::generateInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  char v45;
  unint64_t v46;
  unsigned int v47;
  _DWORD *v48;
  unsigned int v49;
  _QWORD *v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int *v56;
  uint64_t v57;

  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(a1 + 48), a2, a3, a4, a5, a6, a7, a8);
  if (!*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a2 + 5768) = 1;
    if (*(_DWORD *)(a1 + 92))
    {
      v8 = 0;
      v9 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(a2, *(_QWORD *)(a1 + 80) + v8, v13, v14, v15, v16, v17, v18);
        ++v9;
        v8 += 16;
      }
      while (v9 < *(unsigned int *)(a1 + 92));
    }
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, *(_QWORD *)(a1 + 136), 0, v14, v15, v16, v17, v18);
  JSC::DFG::SpeculativeJIT::appendCall(a2, *(_QWORD *)(a1 + 128), v19, v20, v21, v22, v23, v24, (int *)&v54);
  *(_QWORD *)(a1 + 64) = v54;
  if (*(_BYTE *)(a1 + 73))
    goto LABEL_8;
  if (*(_BYTE *)(a1 + 72))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0, v25, v26, v27, v28, v29, v30);
LABEL_8:
    v31 = 0;
    LOBYTE(v32) = 0;
    goto LABEL_9;
  }
  v56 = 0;
  v57 = 2;
  v36 = *(_QWORD *)(a2 + 3960);
  v37 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v37 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 + 3960);
    v9 = *(_QWORD *)(v37 & 0xFFFFFFFF8);
    if ((v37 & 2) != 0
      || ((v10 = *(unsigned int *)((v37 & 0xFFFFFFFF8) + 8), (_DWORD)v10 != 0x3FFFFFFF)
        ? (v51 = (_DWORD)v10 == -1)
        : (v51 = 1),
          v51))
    {
      v52 = 2;
    }
    else
    {
LABEL_52:
      if (v10 >> 28)
      {
        v53 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v53 = v9;
        *(_DWORD *)(v53 + 8) = v10;
        v52 = 1;
        v9 = v53;
      }
      else
      {
        v52 = v9;
        v9 = v10 << 36;
      }
    }
    v37 = v9 | v52;
    v36 = v8;
  }
  v55 = v37;
  v38 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v36, &v55, &v57, &v56, v27, v28, v29, v30);
  if ((v55 & 1) != 0 && (v55 & 0xFFFFFFFF8) != 0)
  {
    v8 = v38;
    WTF::fastFree(v55 & 0xFFFFFFFF8, v39, v25, v26, v27, v28, v29, v30);
    LOBYTE(v38) = v8;
  }
  if ((v38 & 1) != 0)
  {
    v40 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v40)
    {
      v41 = 0;
      v42 = 16 * v40;
      v43 = (char *)(*(_QWORD *)(a1 + 80) + 2);
      do
      {
        v45 = *v43;
        v43 += 16;
        v44 = v45;
        if ((v45 & 0x40) != 0)
        {
          __break(1u);
          goto LABEL_52;
        }
        v41 |= 1 << v44;
        v42 -= 16;
      }
      while (v42);
      if ((v41 & 1) == 0)
        goto LABEL_27;
      v46 = (unsigned __int16)~(_WORD)v41;
      if (!v46)
      {
        v31 = 1;
        LOBYTE(v32) = -1;
        goto LABEL_30;
      }
      v32 = __clz(__rbit64(v46));
      if (v32)
      {
        if (v32 == 31)
          v47 = -1862270945;
        else
          v47 = v32 | 0xAA0003E0;
        v48 = (_DWORD *)(a2 + 200);
        v49 = *(_DWORD *)(a2 + 200);
        v50 = (_QWORD *)(a2 + 56);
        if (v49 + 4 > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v39, v25, v26, v27, v28, v29, v30);
          v48 = (_DWORD *)(a2 + 200);
          v50 = (_QWORD *)(a2 + 56);
          v49 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*v50 + v49) = v47;
        *v48 += 4;
      }
    }
    else
    {
LABEL_27:
      LOBYTE(v32) = 0;
    }
    v31 = 1;
  }
  else
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 0, v25, v26, v27, v28, v29, v30);
    LOBYTE(v32) = 0;
    v31 = 0;
  }
LABEL_30:
  if ((v57 & 1) != 0 && (v57 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v57 & 0xFFFFFFFF8, v39, v25, v26, v27, v28, v29, v30);
LABEL_9:
  if (*(_BYTE *)(a1 + 72))
  {
LABEL_15:
    if (v31)
    {
      if (!*(_BYTE *)(a1 + 73))
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)v32, v25, v26, v27, v28, v29, v30);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump>::jumpTo(a1, a2, v25, v26, v27, v28, v29, v30);
    return;
  }
  v33 = *(_DWORD *)(a1 + 92);
  if (!v33)
  {
LABEL_14:
    *(_BYTE *)(a2 + 5768) = 0;
    goto LABEL_15;
  }
  v34 = v33 - 1;
  v35 = 16 * (v33 - 1);
  while (*(_DWORD *)(a1 + 92) > v34)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 80) + v35, v25, v26, v27, v28, v29, v30);
    v35 -= 16;
    if (--v34 == -1)
      goto LABEL_14;
  }
  __break(0xC471u);
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<unsigned long> (*&)(JSC::JSGlobalObject *,long long,long long),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::JSValueRegs&,JSC::JSValueRegs&>(uint64_t *a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X2>, unsigned __int8 *a4@<X3>, char *a5@<X4>, char *a6@<X5>, __int128 *a7@<X6>, char *a8@<X7>, uint64_t *a9@<X8>, char *a10)
{
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  char v29;
  char v30;
  unsigned int v31;
  _DWORD *v32;
  _BYTE *v33;
  _BYTE *v34;
  _BYTE *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  char v45;
  __int128 v46;
  _BYTE *v47;
  unsigned int v48;
  _BYTE v49[24];
  WTF *v50;
  unsigned int v51;
  unsigned int v52;
  _BYTE v53[24];

  v19 = WTF::fastMalloc((WTF *)0xB8);
  v20 = *((unsigned int *)a1 + 3);
  v21 = v49;
  v47 = v49;
  v48 = v20;
  if (v20 >= 3)
  {
    if (v20 >= 0x15555556)
      goto LABEL_22;
    v21 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v20));
    v47 = v21;
    LODWORD(v20) = *((_DWORD *)a1 + 3);
  }
  if ((_DWORD)v20)
  {
    v22 = *a1;
    v23 = *a1 + 12 * v20;
    do
    {
      *(_DWORD *)v21 = *(_DWORD *)v22;
      *(_QWORD *)(v21 + 4) = *(_QWORD *)(v22 + 4);
      v22 += 12;
      v21 += 12;
    }
    while (v22 != v23);
  }
  v24 = *a2;
  v25 = *a3;
  v26 = *a4;
  v27 = *a5;
  v28 = *a6;
  v46 = *a7;
  v29 = *a8;
  v30 = *a10;
  v31 = v48;
  v50 = (WTF *)v53;
  v51 = 2;
  v52 = v48;
  if (v48 >= 3)
  {
    v45 = v28;
    if (v48 < 0x15555556)
    {
      v32 = v24;
      v33 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v48));
      v51 = 12 * v48 / 0xC;
      v50 = (WTF *)v33;
      v31 = v48;
      v24 = v32;
      v28 = v45;
      goto LABEL_11;
    }
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x197C94178);
  }
  v33 = v53;
  if (v48)
  {
LABEL_11:
    v34 = v47;
    v35 = &v47[12 * v31];
    do
    {
      *(_DWORD *)v33 = *(_DWORD *)v34;
      *(_QWORD *)(v33 + 4) = *(_QWORD *)(v34 + 4);
      v34 += 12;
      v33 += 12;
    }
    while (v34 != v35);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v19, (uint64_t *)&v50, v24, v26, v27, v28);
  v43 = v50;
  if (v53 != (_BYTE *)v50 && v50 != 0)
  {
    v50 = 0;
    v51 = 0;
    WTF::fastFree((unint64_t)v43, v36, v37, v38, v39, v40, v41, v42);
  }
  *(_QWORD *)v19 = &off_1E35746C0;
  *(_QWORD *)(v19 + 152) = v25;
  *(_OWORD *)(v19 + 160) = v46;
  *(_BYTE *)(v19 + 176) = v29;
  *(_BYTE *)(v19 + 177) = v30;
  *a9 = v19;
  if (v49 != v47)
  {
    if (v47)
      WTF::fastFree((unint64_t)v47, v36, v37, v38, v39, v40, v41, v42);
  }
}

uint64_t JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(uint64_t result, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  unsigned int v27;
  int v28;
  _BYTE v29[24];

  v11 = result;
  v12 = *((unsigned int *)a2 + 3);
  v26 = (WTF *)v29;
  v27 = 2;
  v28 = v12;
  if (v12 < 3)
  {
    v14 = v29;
    if (!(_DWORD)v12)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v12 >= 0x15555556)
  {
    __break(0xC471u);
    return result;
  }
  v13 = 12 * v12;
  v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v12));
  v27 = (v13 & 0xFFFFFFFC) / 0xC;
  v26 = (WTF *)v14;
  LODWORD(v12) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v12)
  {
LABEL_6:
    v15 = *a2;
    v16 = *a2 + 12 * v12;
    do
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
      v15 += 12;
      v14 += 12;
    }
    while (v15 != v16);
  }
LABEL_8:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v11, (uint64_t *)&v26, a3);
  v24 = v26;
  if (v29 != (_BYTE *)v26 && v26 != 0)
  {
    v26 = 0;
    v27 = 0;
    WTF::fastFree((unint64_t)v24, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)v11 = off_1E3574690;
  *(_QWORD *)(v11 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v11 + 100) = a4;
  *(_BYTE *)(v11 + 101) = a5;
  *(_BYTE *)(v11 + 102) = a6;
  *(_QWORD *)(v11 + 104) = v11 + 120;
  *(_QWORD *)(v11 + 112) = 2;
  if (!a4)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v11 + 104, a6, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v22, v23);
  return v11;
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574690;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574690;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>::unpackAndGenerate<0ul,1ul,2ul>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  JSC::AssemblerBuffer *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint8x8_t v28;
  __int32 v29;
  uint8x8_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  char v41;
  char v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  unsigned __int8 *v49;
  char *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned int v53;
  unsigned __int8 *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  char *v69;
  char *v70;
  JSC::AssemblerBuffer *v71;
  uint64_t v72;
  void *__dst;
  int v74;
  unsigned int v75;
  _WORD v76[4];

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = 12 * v10;
    do
    {
      if (v12 >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
LABEL_77:
        __break(1u);
        return;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      ++v12;
      v11 += 12;
    }
    while (v13 != v11);
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v14 = 0;
      v15 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v14, a3, a4, a5, a6, a7, a8);
        ++v15;
        v14 += 16;
      }
      while (v15 < *(unsigned int *)(a1 + 116));
    }
  }
  v16 = *(unsigned int *)(a1 + 160);
  v17 = *(_QWORD *)(a1 + 168);
  v18 = *(unsigned __int8 *)(a1 + 176);
  v19 = *(unsigned __int8 *)(a1 + 177);
  __dst = v76;
  v74 = 2;
  if (v18 == 1)
  {
    if (v19 == 2)
      goto LABEL_70;
    v20 = 0;
  }
  else
  {
    v76[0] = v18 | 0x100;
    v20 = 1;
    v75 = 1;
    if (v19 == 2)
      goto LABEL_15;
  }
  v76[v20++] = v19 | 0x200;
  v75 = v20;
LABEL_15:
  v21 = (JSC::AssemblerBuffer *)(v8 + 56);
  do
  {
    v22 = 0;
    v23 = 0;
    v24 = (char *)__dst;
    v25 = v20;
    do
    {
      if ((*((_BYTE *)__dst + v22 + 1) & 0x40) != 0)
        goto LABEL_77;
      v23 |= 1 << *((_BYTE *)__dst + v22 + 1);
      v22 += 2;
    }
    while (2 * v20 != v22);
    v26 = 0;
    do
    {
      v27 = *((_BYTE *)__dst + v26) & 0x7F;
      if (v27 >= 0x40)
        goto LABEL_77;
      v23 &= ~(1 << v27);
      v26 += 2;
    }
    while (2 * v20 != v26);
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)v23);
    v28.i16[0] = vaddlv_u8(v28);
    v29 = v28.i32[0];
    v30 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v23));
    v30.i16[0] = vaddlv_u8(v30);
    if (v30.i32[0] + v29)
    {
      v31 = 0;
      if (v20 <= 1)
        v32 = 1;
      else
        v32 = v20;
      v33 = 2 * v32;
      while (1)
      {
        v34 = *((unsigned __int8 *)__dst + v31 + 1);
        if ((v34 & 0x7Fu) >= 0x40)
          goto LABEL_77;
        if (((v23 >> (v34 & 0x7F)) & 1) != 0)
          break;
        v31 += 2;
        if (v33 == v31)
          goto LABEL_66;
      }
      v35 = *((unsigned __int8 *)__dst + v31);
      if (v35 == v34)
      {
LABEL_64:
        memmove(&v24[v31], &v24[v31 + 2], 2 * v25 - v31 - 2);
        v20 = v75 - 1;
        goto LABEL_65;
      }
      v36 = (char)v35;
      if ((char)v35 == 63)
      {
        v37 = *(_DWORD *)(v8 + 200);
        v38 = *(_DWORD *)(v8 + 192);
        if (v34 != 31)
        {
          v40 = v34 & 0x1F | 0xD2800000;
          goto LABEL_61;
        }
      }
      else
      {
        v37 = *(_DWORD *)(v8 + 200);
        v38 = *(_DWORD *)(v8 + 192);
        v39 = (char)v34 == 31 || v36 == 31;
        if (!v39)
        {
          v40 = v34 & 0xFFE0FFFF | ((v36 & 0x1F) << 16) | 0xAA0003E0;
LABEL_61:
          if (v37 + 4 > v38)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v21, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v37 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v37) = v40;
          *(_DWORD *)(v8 + 200) += 4;
          v24 = (char *)__dst;
          v25 = v75;
          goto LABEL_64;
        }
      }
      v40 = (char)v34 | (32 * v36) | 0x91000000;
      goto LABEL_61;
    }
    v71 = v21;
    v41 = *(_BYTE *)__dst;
    v42 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v42, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v75 - 2);
    v43 = v75 - 1;
    v39 = v75 == 1;
    v75 = v43;
    v44 = (unsigned __int8 *)__dst;
    v45 = (unsigned __int8 *)__dst + 2 * v43;
    if (v39)
    {
      v52 = 0;
      v53 = 0;
      v48 = 0;
      a2 = v45;
    }
    else
    {
      v46 = 2 * v43;
      v47 = __dst;
      while (*v47 != v42)
      {
        v47 += 2;
        v46 -= 2;
        if (!v46)
          goto LABEL_44;
      }
      *v47 = v41;
LABEL_44:
      v48 = 0;
      v49 = v44;
      a2 = v45;
      v50 = (char *)v45;
      do
      {
        if (*v44 == v44[1])
        {
          v51 = v44;
          if (v50 != (char *)__dst + 2 * v75)
          {
            v70 = (char *)v45;
            if (v44 == a2)
            {
              v51 = (unsigned __int8 *)v50;
            }
            else
            {
              v68 = v49 - a2;
              v69 = v50;
              memmove(v50, a2, v49 - a2);
              v51 = (unsigned __int8 *)&v69[v68];
            }
            v45 = (unsigned __int8 *)v70;
          }
          a2 = v44 + 2;
          ++v48;
          v50 = (char *)v51;
        }
        v44 += 2;
        v49 += 2;
      }
      while (v44 < v45);
      v44 = (unsigned __int8 *)__dst;
      v52 = v75;
      v53 = v75;
      v45 = (unsigned __int8 *)v50;
    }
    v54 = &v44[2 * v52];
    v21 = v71;
    if (a2 != v54)
    {
      memmove(v45, a2, v54 - a2);
      v53 = v75;
    }
    v20 = v53 - v48;
LABEL_65:
    v75 = v20;
LABEL_66:
    ;
  }
  while (v20);
  v55 = __dst;
  if (v76 != __dst && __dst)
  {
    __dst = 0;
    v74 = 0;
    WTF::fastFree((unint64_t)v55, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_70:
  if (v16 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v17, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v16 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v56, v57, v58, v59, v60, v61, (int *)&v72);
  *(_QWORD *)(a1 + 92) = v72;
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID>::tearDown(a1, v8, v62, v63, v64, v65, v66, v67);
}

void JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID>::tearDown(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  __int16 v19;

  if (*(_BYTE *)(a1 + 101))
    goto LABEL_4;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, a3, a4, a5, a6, a7, a8);
LABEL_4:
    v10 = 0;
    v11 = 0;
    goto LABEL_5;
  }
  v19 = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (unsigned int *)(a1 + 104), *(_BYTE *)(a1 + 102), a4, a5, a6, a7, a8);
  v11 = v19;
  v10 = HIBYTE(v19);
LABEL_5:
  v12 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v12 == 31)
    {
      v13 = -1862270945;
    }
    else if (v12 == 255)
    {
      v13 = -1442774017;
    }
    else
    {
      v13 = v12 | 0xAA0003E0;
    }
    v15 = (unsigned int *)(a2 + 200);
    v14 = *(_DWORD *)(a2 + 200);
    if (v14 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
      v14 = *v15;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v14) = v13;
    *v15 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
    goto LABEL_19;
  v16 = *(_DWORD *)(a1 + 116);
  if (!v16)
  {
LABEL_18:
    *(_BYTE *)(a2 + 5768) = 0;
LABEL_19:
    if (!*(_BYTE *)(a1 + 101))
    {
      if (v10)
        JSC::DFG::SpeculativeJIT::exceptionCheck(a2, v11, a3, a4, a5, a6, a7, a8);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, a2, a3, a4, a5, a6, a7, a8);
    return;
  }
  v17 = v16 - 1;
  v18 = 16 * (v16 - 1);
  while (*(_DWORD *)(a1 + 116) > v17)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a1 + 104) + v18, a3, a4, a5, a6, a7, a8);
    v18 -= 16;
    if (--v17 == -1)
      goto LABEL_18;
  }
  __break(0xC471u);
}

uint64_t JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int *v39;
  uint64_t v40;

  v39 = 0;
  v40 = 2;
  v11 = *(_QWORD *)(a1 + 3960);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 3976) + 8);
  if ((v12 & 1) != 0)
  {
    v20 = *(_QWORD *)(v12 & 0xFFFFFFFF8);
    if ((v12 & 2) != 0
      || ((v25 = *(unsigned int *)((v12 & 0xFFFFFFFF8) + 8), (_DWORD)v25 != 0x3FFFFFFF)
        ? (v33 = (_DWORD)v25 == -1)
        : (v33 = 1),
          v33))
    {
      v34 = 2;
    }
    else
    {
      if (v25 >> 28)
        goto LABEL_32;
      v34 = v20;
      v20 = v25 << 36;
    }
    goto LABEL_24;
  }
  while (1)
  {
    v38 = v12;
    v11 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v11, &v38, &v40, &v39, a5, a6, a7, a8);
    v20 = v11;
    if ((v38 & 1) != 0)
    {
      v11 = v38 & 0xFFFFFFFF8;
      if ((v38 & 0xFFFFFFFF8) != 0)
        WTF::fastFree(v11, v13, v14, v15, v16, v17, v18, v19);
    }
    if ((v20 & 1) == 0)
    {
      JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v14, v15, v16, v17, v18, v19);
      LODWORD(v21) = 0;
      v22 = 0;
      goto LABEL_5;
    }
    v24 = a2[3];
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 16 * v24;
      v27 = (char *)(*(_QWORD *)a2 + 2);
      while (1)
      {
        v29 = *v27;
        v27 += 16;
        v28 = v29;
        if ((v29 & 0x40) != 0)
          goto LABEL_31;
        v25 |= 1 << v28;
        v26 -= 16;
        if (!v26)
          goto LABEL_11;
      }
    }
    v25 = 0;
LABEL_11:
    v30 = a3;
    if ((a3 & 0x40) == 0)
      break;
LABEL_31:
    __break(1u);
LABEL_32:
    v37 = v11;
    v35 = v25;
    v36 = WTF::fastMalloc((WTF *)0x10);
    v11 = v37;
    *(_QWORD *)v36 = v20;
    *(_DWORD *)(v36 + 8) = v35;
    v34 = 1;
    v20 = v36;
LABEL_24:
    v12 = v20 | v34;
  }
  LODWORD(v21) = 1;
  v31 = v25 | (1 << v30);
  v22 = 1;
  if ((v31 & 2) != 0)
  {
    v32 = (unsigned __int16)~(_WORD)v31 & 0xFFFE;
    if (v32)
    {
      v21 = __clz(__rbit64(v32));
      JSC::MacroAssemblerARM64::move((_DWORD *)a1, 1, v21, v15, v16, v17, v18, v19);
    }
    else
    {
      LODWORD(v21) = 255;
    }
  }
LABEL_5:
  if ((v40 & 1) != 0 && (v40 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v40 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  return v21 | (v22 << 8);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574340;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574340;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  char v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t v44;
  _BYTE *v45;
  int v46;
  unsigned __int8 *v47;
  char *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  JSC::AssemblerBuffer *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  void *__dst;
  int v104;
  unsigned int v105;
  _WORD v106[4];
  unint64_t v107;
  unsigned int *v108;

  v8 = (uint64_t)a2;
  v10 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v10)
  {
    v11 = 0;
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 60))
      {
        __break(0xC471u);
        goto LABEL_137;
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v11), v8, a3, a4, a5, a6, a7, a8);
      v11 += 12;
    }
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v8 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v8, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v14;
        v13 += 16;
      }
      while (v14 < *(unsigned int *)(a1 + 116));
    }
  }
  v15 = *(unsigned int *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 168);
  v17 = *(unsigned __int8 *)(a1 + 176);
  v18 = *(unsigned __int8 *)(a1 + 177);
  __dst = v106;
  v104 = 2;
  if (v17 == 1)
  {
    if (v18 == 2)
      goto LABEL_69;
    v19 = 0;
  }
  else
  {
    v106[0] = v17 | 0x100;
    v19 = 1;
    v105 = 1;
    if (v18 == 2)
      goto LABEL_15;
  }
  v106[v19++] = v18 | 0x200;
  v105 = v19;
  do
  {
LABEL_15:
    v20 = 0;
    v21 = 0;
    v22 = (char *)__dst;
    v23 = v19;
    do
    {
      if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
        goto LABEL_137;
      v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
      v20 += 2;
    }
    while (2 * v19 != v20);
    v24 = 0;
    do
    {
      v25 = *((_BYTE *)__dst + v24) & 0x7F;
      if (v25 >= 0x40)
        goto LABEL_137;
      v21 &= ~(1 << v25);
      v24 += 2;
    }
    while (2 * v19 != v24);
    v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v26.i16[0] = vaddlv_u8(v26);
    v27 = v26.i32[0];
    v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.i32[0] + v27)
    {
      v29 = 0;
      if (v19 <= 1)
        v30 = 1;
      else
        v30 = v19;
      v31 = 2 * v30;
      while (1)
      {
        v32 = *((unsigned __int8 *)__dst + v29 + 1);
        if ((v32 & 0x7Fu) >= 0x40)
          goto LABEL_137;
        if (((v21 >> (v32 & 0x7F)) & 1) != 0)
          break;
        v29 += 2;
        if (v31 == v29)
          goto LABEL_65;
      }
      v33 = *((unsigned __int8 *)__dst + v29);
      if (v33 == v32)
      {
LABEL_63:
        memmove(&v22[v29], &v22[v29 + 2], 2 * v23 - v29 - 2);
        v19 = v105 - 1;
        goto LABEL_64;
      }
      v34 = (char)v33;
      if ((char)v33 == 63)
      {
        v35 = *(_DWORD *)(v8 + 200);
        v36 = *(_DWORD *)(v8 + 192);
        if ((char)v32 != 31)
        {
          v38 = v32 & 0x1F | 0xD2800000;
          goto LABEL_60;
        }
      }
      else
      {
        v35 = *(_DWORD *)(v8 + 200);
        v36 = *(_DWORD *)(v8 + 192);
        v37 = v32 == 31 || v34 == 31;
        if (!v37)
        {
          v38 = v32 & 0xFFE0FFFF | ((v34 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
          if (v35 + 4 > v36)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v35 = *(_DWORD *)(v8 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v8 + 56) + v35) = v38;
          *(_DWORD *)(v8 + 200) += 4;
          v22 = (char *)__dst;
          v23 = v105;
          goto LABEL_63;
        }
      }
      v38 = (char)v32 | (32 * v34) | 0x91000000;
      goto LABEL_60;
    }
    v39 = *(_BYTE *)__dst;
    v40 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(v8, *(char *)__dst, v40, a4, a5, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * v105 - 2);
    v41 = v105 - 1;
    v37 = v105 == 1;
    v105 = v41;
    v42 = (unsigned __int8 *)__dst;
    v43 = (unsigned __int8 *)__dst + 2 * v41;
    if (v37)
    {
      v50 = 0;
      v51 = 0;
      v46 = 0;
      a2 = v43;
    }
    else
    {
      v44 = 2 * v41;
      v45 = __dst;
      while (*v45 != v40)
      {
        v45 += 2;
        v44 -= 2;
        if (!v44)
          goto LABEL_43;
      }
      *v45 = v39;
LABEL_43:
      v46 = 0;
      v47 = v42;
      a2 = v43;
      v48 = (char *)v43;
      do
      {
        if (*v42 == v42[1])
        {
          v49 = v42;
          if (v48 != (char *)__dst + 2 * v105)
          {
            v101 = (char *)v43;
            if (v42 == a2)
            {
              v49 = (unsigned __int8 *)v48;
            }
            else
            {
              v99 = v47 - a2;
              v100 = v48;
              memmove(v48, a2, v47 - a2);
              v49 = (unsigned __int8 *)&v100[v99];
            }
            v43 = (unsigned __int8 *)v101;
          }
          a2 = v42 + 2;
          ++v46;
          v48 = (char *)v49;
        }
        v42 += 2;
        v47 += 2;
      }
      while (v42 < v43);
      v42 = (unsigned __int8 *)__dst;
      v50 = v105;
      v51 = v105;
      v43 = (unsigned __int8 *)v48;
    }
    v52 = &v42[2 * v50];
    if (a2 != v52)
    {
      memmove(v43, a2, v52 - a2);
      v51 = v105;
    }
    v19 = v51 - v46;
LABEL_64:
    v105 = v19;
LABEL_65:
    ;
  }
  while (v19);
  v53 = __dst;
  if (v106 != __dst && __dst)
  {
    __dst = 0;
    v104 = 0;
    WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_69:
  if (v15 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v8, v16, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v8, (v15 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v8, *(_QWORD *)(a1 + 152), v54, v55, v56, v57, v58, v59, (int *)&v102);
  *(_QWORD *)(a1 + 92) = v102;
  if (*(_BYTE *)(a1 + 101))
  {
LABEL_74:
    v67 = 0;
    LOBYTE(v68) = 0;
    goto LABEL_75;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
    goto LABEL_74;
  }
  v76 = *(_BYTE *)(a1 + 102);
  __dst = (void *)2;
  v108 = 0;
  v77 = *(_QWORD *)(v8 + 3960);
  v78 = *(_QWORD *)(*(_QWORD *)(v8 + 3976) + 8);
  if ((v78 & 1) != 0)
  {
    v94 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
    if ((v78 & 2) != 0
      || ((v95 = *(unsigned int *)((v78 & 0xFFFFFFFF8) + 8), (_DWORD)v95 != 0x3FFFFFFF)
        ? (v96 = (_DWORD)v95 == -1)
        : (v96 = 1),
          v96))
    {
      v97 = 2;
    }
    else if (v95 >> 28)
    {
      v98 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v98 = v94;
      *(_DWORD *)(v98 + 8) = v95;
      v97 = 1;
      v94 = v98;
    }
    else
    {
      v97 = *(_QWORD *)(v78 & 0xFFFFFFFF8);
      v94 = v95 << 36;
    }
    v78 = v94 | v97;
  }
  v107 = v78;
  v79 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v77, &v107, (uint64_t *)&__dst, &v108, v63, v64, v65, v66);
  if ((v107 & 1) != 0 && (v107 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v107 & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
  if ((v79 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v8, 1, v61, v62, v63, v64, v65, v66);
    LOBYTE(v68) = 0;
    v67 = 0;
    goto LABEL_97;
  }
  v80 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v80)
  {
    v81 = 0;
    v82 = 16 * v80;
    v83 = (char *)(*(_QWORD *)(a1 + 104) + 2);
    while (1)
    {
      v85 = *v83;
      v83 += 16;
      v84 = v85;
      if ((v85 & 0x40) != 0)
        goto LABEL_137;
      v81 |= 1 << v84;
      v82 -= 16;
      if (!v82)
        goto LABEL_106;
    }
  }
  v81 = 0;
LABEL_106:
  if ((v76 & 0x40) != 0)
  {
LABEL_137:
    __break(1u);
    goto LABEL_138;
  }
  v67 = 1;
  v86 = v81 | (1 << v76);
  if ((v86 & 2) != 0)
  {
    v87 = (unsigned __int16)~(_WORD)v86 & 0xFFFE;
    if (v87)
    {
      v68 = __clz(__rbit64(v87));
      if (v68 == 1)
      {
        v67 = 1;
      }
      else
      {
        if (v68 == 31)
        {
          v90 = (unsigned int *)(v8 + 200);
          v89 = *(_DWORD *)(v8 + 200);
          v91 = (JSC::AssemblerBuffer *)(v8 + 56);
          v92 = v89 + 4;
          v93 = *(_DWORD *)(v8 + 192);
          v88 = -1862270913;
        }
        else
        {
          v88 = v68 | 0xAA0103E0;
          v90 = (unsigned int *)(v8 + 200);
          v89 = *(_DWORD *)(v8 + 200);
          v91 = (JSC::AssemblerBuffer *)(v8 + 56);
          v92 = v89 + 4;
          v93 = *(_DWORD *)(v8 + 192);
        }
        if (v92 > v93)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v91, (uint64_t)v60, v61, v62, v63, v64, v65, v66);
          v89 = *v90;
        }
        *(_DWORD *)(*(_QWORD *)v91 + v89) = v88;
        *v90 += 4;
        v67 = 1;
      }
    }
    else
    {
      v67 = 1;
      LOBYTE(v68) = -1;
    }
  }
  else
  {
    LOBYTE(v68) = 1;
  }
LABEL_97:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v60, v61, v62, v63, v64, v65, v66);
LABEL_75:
  v69 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v69 == 31)
    {
      v70 = -1862270945;
    }
    else if (v69 == 255)
    {
      v70 = -1442774017;
    }
    else
    {
      v70 = v69 | 0xAA0003E0;
    }
    v72 = (unsigned int *)(v8 + 200);
    v71 = *(_DWORD *)(v8 + 200);
    if (v71 + 4 > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v60, v61, v62, v63, v64, v65, v66);
      v71 = *v72;
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + v71) = v70;
    *v72 += 4;
  }
  if (*(_BYTE *)(a1 + 100))
  {
LABEL_89:
    if (v67)
    {
      if (!*(_BYTE *)(a1 + 101))
        JSC::DFG::SpeculativeJIT::exceptionCheck(v8, (char)v68, v61, v62, v63, v64, v65, v66);
    }
    JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v8, v61, v62, v63, v64, v65, v66);
    return;
  }
  v73 = *(_DWORD *)(a1 + 116);
  if (!v73)
  {
LABEL_88:
    *(_BYTE *)(v8 + 5768) = 0;
    goto LABEL_89;
  }
  v74 = v73 - 1;
  v75 = 16 * (v73 - 1);
  while (*(_DWORD *)(a1 + 116) > v74)
  {
    JSC::DFG::SpeculativeJIT::silentFillImpl(v8, *(_QWORD *)(a1 + 104) + v75, v61, v62, v63, v64, v65, v66);
    v75 -= 16;
    if (--v74 == -1)
      goto LABEL_88;
  }
LABEL_138:
  __break(0xC471u);
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E35743A0;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E35743A0;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID>::call@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = *(double *)(a1 + 92);
  *a2 = result;
  return result;
}

unsigned int *JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<JSC::JSString *> (*)(JSC::JSGlobalObject *,JSC::JSString *,JSC::JSString *,JSC::JSString *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>::generateInternal(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint8x8_t v26;
  __int32 v27;
  uint8x8_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  char v38;
  char v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  _BYTE *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  unsigned int v79;
  unsigned int *v80;
  JSC::AssemblerBuffer *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  void *__dst;
  uint64_t v94;
  _WORD v95[4];
  unint64_t v96;
  unsigned int *v97;

  v9 = (uint64_t)a2;
  v11 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v11)
  {
    v8 = 0;
    v12 = 0;
    while (v12 < *(unsigned int *)(a1 + 60))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(*(_QWORD *)(a1 + 48) + v8), v9, a3, a4, a5, a6, a7, a8);
      ++v12;
      v8 += 12;
      if (v11 == v12)
        goto LABEL_5;
    }
    __break(0xC471u);
LABEL_140:
    JUMPOUT(0x197C95EC4);
  }
LABEL_5:
  if (!*(_BYTE *)(a1 + 100))
  {
    *(_BYTE *)(v9 + 5768) = 1;
    if (*(_DWORD *)(a1 + 116))
    {
      v13 = 0;
      v8 = 0;
      do
      {
        JSC::DFG::SpeculativeJIT::silentSpillImpl(v9, *(_QWORD *)(a1 + 104) + v13, a3, a4, a5, a6, a7, a8);
        ++v8;
        v13 += 16;
      }
      while (v8 < *(unsigned int *)(a1 + 116));
    }
  }
  v14 = *(unsigned int *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 168);
  v16 = *(unsigned __int8 *)(a1 + 176);
  v17 = *(unsigned __int8 *)(a1 + 177);
  v18 = *(unsigned __int8 *)(a1 + 178);
  __dst = v95;
  v94 = 3;
  if (v16 == 1)
  {
    v19 = 0;
  }
  else
  {
    v95[0] = v16 | 0x100;
    v19 = 1;
    HIDWORD(v94) = 1;
  }
  if (v17 != 2)
  {
    v95[v19++] = v17 | 0x200;
    HIDWORD(v94) = v19;
  }
  if (v18 != 3)
  {
    v95[v19++] = v18 | 0x300;
    HIDWORD(v94) = v19;
LABEL_16:
    while (1)
    {
      v20 = 0;
      v21 = 0;
      v22 = (char *)__dst;
      v23 = v19;
      do
      {
        if ((*((_BYTE *)__dst + v20 + 1) & 0x40) != 0)
          goto LABEL_115;
        v21 |= 1 << *((_BYTE *)__dst + v20 + 1);
        v20 += 2;
      }
      while (2 * v19 != v20);
      v24 = 0;
      do
      {
        v25 = *((_BYTE *)__dst + v24) & 0x7F;
        if (v25 >= 0x40)
          goto LABEL_115;
        v21 &= ~(1 << v25);
        v24 += 2;
      }
      while (2 * v19 != v24);
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
      v26.i16[0] = vaddlv_u8(v26);
      v27 = v26.i32[0];
      v28 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v21));
      v28.i16[0] = vaddlv_u8(v28);
      if (v28.i32[0] + v27)
        break;
      v38 = *(_BYTE *)__dst;
      v39 = *((_BYTE *)__dst + 1);
      JSC::MacroAssemblerARM64::swap(v9, *(char *)__dst, v39, a4, a5, a6, a7, a8);
      memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v94) - 2);
      v40 = (HIDWORD(v94) - 1);
      v36 = HIDWORD(v94) == 1;
      HIDWORD(v94) = v40;
      v8 = (unint64_t)__dst;
      v41 = (char *)__dst + 2 * v40;
      if (v36)
      {
        v48 = 0;
        v49 = 0;
        v44 = 0;
        a2 = v41;
      }
      else
      {
        v42 = 2 * v40;
        v43 = __dst;
        while (*v43 != v39)
        {
          v43 += 2;
          v42 -= 2;
          if (!v42)
            goto LABEL_44;
        }
        *v43 = v38;
LABEL_44:
        v44 = 0;
        v45 = v8;
        a2 = v41;
        v46 = v41;
        do
        {
          if (*(unsigned __int8 *)v8 == *(unsigned __int8 *)(v8 + 1))
          {
            v47 = (char *)v8;
            if (v46 != (char *)__dst + 2 * HIDWORD(v94))
            {
              v91 = v41;
              if ((_BYTE *)v8 == a2)
              {
                v47 = v46;
              }
              else
              {
                v89 = v45 - (_QWORD)a2;
                v90 = v46;
                memmove(v46, a2, v45 - (_QWORD)a2);
                v47 = &v90[v89];
              }
              v41 = v91;
            }
            a2 = (_BYTE *)(v8 + 2);
            ++v44;
            v46 = v47;
          }
          v8 += 2;
          v45 += 2;
        }
        while (v8 < (unint64_t)v41);
        v8 = (unint64_t)__dst;
        v48 = HIDWORD(v94);
        v49 = HIDWORD(v94);
        v41 = v46;
      }
      v50 = (_BYTE *)(v8 + 2 * v48);
      if (a2 != v50)
      {
        memmove(v41, a2, v50 - a2);
        v49 = HIDWORD(v94);
      }
      v19 = v49 - v44;
LABEL_64:
      HIDWORD(v94) = v19;
LABEL_65:
      if (!v19)
      {
        v51 = __dst;
        if (v95 != __dst && __dst)
        {
          __dst = 0;
          LODWORD(v94) = 0;
          WTF::fastFree((unint64_t)v51, a2, a3, a4, a5, a6, a7, a8);
        }
        goto LABEL_72;
      }
    }
    v8 = 0;
    if (v19 <= 1)
      v29 = 1;
    else
      v29 = v19;
    v30 = 2 * v29;
    while (1)
    {
      v31 = *((unsigned __int8 *)__dst + v8 + 1);
      if ((v31 & 0x7Fu) >= 0x40)
        goto LABEL_115;
      if (((v21 >> (v31 & 0x7F)) & 1) != 0)
        break;
      v8 += 2;
      if (v30 == v8)
        goto LABEL_65;
    }
    v32 = *((unsigned __int8 *)__dst + v8);
    if (v32 == v31)
    {
LABEL_63:
      memmove(&v22[v8], &v22[v8 + 2], 2 * v23 - v8 - 2);
      v19 = HIDWORD(v94) - 1;
      goto LABEL_64;
    }
    v33 = (char)v32;
    if ((char)v32 == 63)
    {
      v34 = *(_DWORD *)(v9 + 200);
      v35 = *(_DWORD *)(v9 + 192);
      if ((char)v31 != 31)
      {
        v37 = v31 & 0x1F | 0xD2800000;
        goto LABEL_60;
      }
    }
    else
    {
      v34 = *(_DWORD *)(v9 + 200);
      v35 = *(_DWORD *)(v9 + 192);
      v36 = v31 == 31 || v33 == 31;
      if (!v36)
      {
        v37 = v31 & 0xFFE0FFFF | ((v33 & 0x1F) << 16) | 0xAA0003E0;
LABEL_60:
        if (v34 + 4 > v35)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v34 = *(_DWORD *)(v9 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v9 + 56) + v34) = v37;
        *(_DWORD *)(v9 + 200) += 4;
        v22 = (char *)__dst;
        v23 = HIDWORD(v94);
        goto LABEL_63;
      }
    }
    v37 = (char)v31 | (32 * v33) | 0x91000000;
    goto LABEL_60;
  }
  if (v19)
    goto LABEL_16;
LABEL_72:
  if (v14 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, v15, 0, a4, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(v9, (v14 << 35) + 0x380000001ALL, 0, a4, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v9, *(_QWORD *)(a1 + 152), v52, v53, v54, v55, v56, v57, (int *)&v92);
  *(_QWORD *)(a1 + 92) = v92;
  if (*(_BYTE *)(a1 + 101))
    goto LABEL_77;
  if (*(_BYTE *)(a1 + 100))
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(v9, 1, a3, a4, a5, a6, a7, a8);
LABEL_77:
    v58 = 0;
    LOBYTE(v8) = 0;
    goto LABEL_78;
  }
  LODWORD(v8) = *(unsigned __int8 *)(a1 + 102);
  __dst = (void *)2;
  v97 = 0;
  v67 = *(_QWORD *)(v9 + 3960);
  v68 = *(_QWORD *)(*(_QWORD *)(v9 + 3976) + 8);
  if ((v68 & 1) != 0)
  {
    v84 = *(_QWORD *)(v68 & 0xFFFFFFFF8);
    if ((v68 & 2) != 0
      || ((v85 = *(unsigned int *)((v68 & 0xFFFFFFFF8) + 8), (_DWORD)v85 != 0x3FFFFFFF)
        ? (v86 = (_DWORD)v85 == -1)
        : (v86 = 1),
          v86))
    {
      v87 = 2;
    }
    else if (v85 >> 28)
    {
      v88 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v88 = v84;
      *(_DWORD *)(v88 + 8) = v85;
      v87 = 1;
      v84 = v88;
    }
    else
    {
      v87 = *(_QWORD *)(v68 & 0xFFFFFFFF8);
      v84 = v85 << 36;
    }
    v68 = v84 | v87;
  }
  v96 = v68;
  v69 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v67, &v96, (uint64_t *)&__dst, &v97, a5, a6, a7, a8);
  if ((v96 & 1) != 0 && (v96 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v96 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  if ((v69 & 1) != 0)
  {
    v70 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v70)
    {
      v71 = 0;
      v72 = 16 * v70;
      v73 = (char *)(*(_QWORD *)(a1 + 104) + 2);
      while (1)
      {
        v75 = *v73;
        v73 += 16;
        v74 = v75;
        if ((v75 & 0x40) != 0)
          break;
        v71 |= 1 << v74;
        v72 -= 16;
        if (!v72)
          goto LABEL_109;
      }
    }
    else
    {
      v71 = 0;
LABEL_109:
      if ((v8 & 0x40) == 0)
      {
        v58 = 1;
        v76 = v71 | (1 << v8);
        if ((v76 & 2) == 0)
        {
          LOBYTE(v8) = 1;
          goto LABEL_100;
        }
        v77 = (unsigned __int16)~(_WORD)v76 & 0xFFFE;
        if (!v77)
        {
          v58 = 1;
          LOBYTE(v8) = -1;
          goto LABEL_100;
        }
        LODWORD(v8) = __clz(__rbit64(v77));
        if ((_DWORD)v8 != 1)
        {
          if ((_DWORD)v8 == 31)
          {
            v80 = (unsigned int *)(v9 + 200);
            v79 = *(_DWORD *)(v9 + 200);
            v81 = (JSC::AssemblerBuffer *)(v9 + 56);
            v82 = v79 + 4;
            v83 = *(_DWORD *)(v9 + 192);
            v78 = -1862270913;
          }
          else
          {
            v78 = v8 | 0xAA0103E0;
            v80 = (unsigned int *)(v9 + 200);
            v79 = *(_DWORD *)(v9 + 200);
            v81 = (JSC::AssemblerBuffer *)(v9 + 56);
            v82 = v79 + 4;
            v83 = *(_DWORD *)(v9 + 192);
          }
          if (v82 > v83)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v81, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
            v79 = *v80;
          }
          *(_DWORD *)(*(_QWORD *)v81 + v79) = v78;
          *v80 += 4;
          v58 = 1;
          goto LABEL_100;
        }
        goto LABEL_116;
      }
    }
LABEL_115:
    __break(1u);
LABEL_116:
    v58 = v8;
    goto LABEL_100;
  }
  JSC::DFG::SpeculativeJIT::exceptionCheck(v9, 1, a3, a4, a5, a6, a7, a8);
  LOBYTE(v8) = 0;
  v58 = 0;
LABEL_100:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
LABEL_78:
  v59 = *(unsigned __int8 *)(a1 + 102);
  if (*(_BYTE *)(a1 + 102))
  {
    if (v59 == 31)
    {
      v60 = -1862270945;
    }
    else if (v59 == 255)
    {
      v60 = -1442774017;
    }
    else
    {
      v60 = v59 | 0xAA0003E0;
    }
    v62 = (unsigned int *)(v9 + 200);
    v61 = *(_DWORD *)(v9 + 200);
    if (v61 + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v61 = *v62;
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v61) = v60;
    *v62 += 4;
  }
  if (!*(_BYTE *)(a1 + 100))
  {
    v63 = *(_DWORD *)(a1 + 116);
    if (v63)
    {
      v64 = v63 - 1;
      v65 = 16 * (v63 - 1);
      while (*(_DWORD *)(a1 + 116) > v64)
      {
        JSC::DFG::SpeculativeJIT::silentFillImpl(v9, *(_QWORD *)(a1 + 104) + v65, a3, a4, a5, a6, a7, a8);
        v65 -= 16;
        if (--v64 == -1)
          goto LABEL_91;
      }
      __break(0xC471u);
      goto LABEL_140;
    }
LABEL_91:
    *(_BYTE *)(v9 + 5768) = 0;
  }
  if (v58 && !*(_BYTE *)(a1 + 101))
    JSC::DFG::SpeculativeJIT::exceptionCheck(v9, (char)v8, a3, a4, a5, a6, a7, a8);
  return JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::jumpTo(a1, v9, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::boxInt52(JSC::DFG::SpeculativeJIT *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  v8 = a4;
  v12 = a3;
  if ((_DWORD)a2 == (_DWORD)a3)
    v12 = JSC::DFG::SpeculativeJIT::allocate(this, a2, a3, a4, a5, a6, a7, a8);
  v13 = 0;
  v14 = (char *)this + 4968;
  v15 = (_DWORD *)((char *)this + 4976);
  v16 = 0x17u;
  v17 = -1;
  while (*v15)
  {
LABEL_8:
    ++v13;
    v15 += 3;
    if (v13 == 23)
    {
      v13 = v16;
      v19 = &v14[12 * v16];
      v20 = *(_DWORD *)v19;
      *(_QWORD *)v19 = 0xFFFFFFFF3FFFFFFFLL;
      v15 = v19 + 8;
      goto LABEL_11;
    }
  }
  v18 = *(v15 - 1);
  if (v18 != -1)
  {
    if (v18 < v17)
    {
      v16 = v13;
      v17 = *(v15 - 1);
    }
    goto LABEL_8;
  }
  v20 = *(v15 - 2);
  *((_QWORD *)v15 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_11:
  *v15 = 1;
  v21 = JSC::FPRInfo::toRegister::registerForIndex[v13];
  if (v20 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v20, a3, a4, a5, a6, a7, a8);
  if (v8 == 2)
  {
    JSC::MacroAssemblerARM64::rshift64(this, a2, 12, a2, a5, a6, a7, a8);
    JSC::AssemblyHelpers::boxInt52((uint64_t)this, a2, a3, v12, v21, v23, v24, v25);
    if ((_DWORD)a2 != (_DWORD)a3)
      JSC::MacroAssemblerARM64::lshift64(this, a2, 12, a2, v26, v27, v28, v29);
  }
  else
  {
    JSC::AssemblyHelpers::boxInt52((uint64_t)this, a2, a3, v12, v21, a6, a7, a8);
  }
  if ((_DWORD)v12 != (_DWORD)a3)
  {
    if ((int)v12 > 15)
      v30 = -1;
    else
      v30 = v12;
    --*((_DWORD *)this + 3 * v30 + 1196);
  }
  v22 = &v14[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v21]];
  --*((_DWORD *)v22 + 2);
}

unsigned int *JSC::AssemblyHelpers::boxInt52(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  JSC::AssemblerBuffer *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v40[2];
  char v41;
  __int16 v42;
  char v43;
  unsigned int v44[3];

  v8 = a5;
  v10 = a3;
  v13 = (JSC::AssemblerBuffer *)(a1 + 56);
  v14 = *(_DWORD *)(a1 + 200);
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = a4 & 0x1F | (32 * (a2 & 0x1F)) | 0x93407C00;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 0, a2, a4, a5, a6, a7, a8, (uint64_t)v44);
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v15, v16, v17, v18, v19, v20, v21);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v8 | (32 * (a2 & 0x1F)) | 0x9E620000;
  v23 = *(_DWORD *)(a1 + 200);
  v24 = v23 + 4;
  *(_DWORD *)(a1 + 200) = v23 + 4;
  if ((v23 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v15, v16, v17, v18, v19, v20, v21);
    v24 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v24) = v10 & 0x1F | (32 * v8) | 0x9E660000;
  v25 = *(_DWORD *)(a1 + 200);
  v26 = v25 + 4;
  *(_DWORD *)(a1 + 200) = v25 + 4;
  v27 = v10 & 0x1F | (32 * (v10 & 0x1F));
  if (v10 == 31)
  {
    if ((v25 + 8) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v13, v15, v16, v17, v18, v19, v20, v21);
      v26 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = -885300225;
    v28 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v28;
  }
  else
  {
    JSC::AssemblerBuffer::putInt(v13, v27 | 0xCB1B0000, v16, v17, v18, v19, v20, v21);
    v28 = *(_DWORD *)(a1 + 200);
  }
  for (; v28 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v28)
  {
    if ((v28 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v13, v15, v16, v17, v18, v19, v20, v21);
      v28 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v28) = -721215457;
    v28 = *(_DWORD *)(a1 + 200) + 4;
  }
  v29 = v28;
  if ((v28 + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v15, v16, v17, v18, v19, v20, v21);
    v29 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v29) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v30 = 69;
  else
    v30 = 65;
  v40[0] = v28;
  v40[1] = 0;
  v41 = v30;
  v42 = 15;
  v43 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v44, a1, v16, v17, v18, v19, v20, v21);
  JSC::MacroAssemblerARM64::and64(a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a2, v10);
  v38 = *(_DWORD *)(a1 + 200);
  if (v38 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v13, v31, v32, v33, v34, v35, v36, v37);
    v38 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v38) = v27 | 0xAA1B0000;
  *(_DWORD *)(a1 + 200) += 4;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v40, a1, v32, v33, v34, v35, v36, v37);
}

uint64_t JSC::DFG::SpeculativeJIT::fillJSValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned int v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  _BYTE *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  unsigned int v70;
  uint64_t *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  _BYTE v88[14];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v8 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v9 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v10 = ~(_DWORD)v9;
  if (v10 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C96C54);
  }
  v12 = *(_QWORD *)(a1 + 3992);
  v13 = (_BYTE *)(v12 + 24 * (int)v10);
  v14 = v13 + 12;
  switch(v13[12])
  {
    case 0:
      v18 = a1 + 4776;
      if (*(_DWORD *)(a1 + 4784))
      {
        v19 = -1;
        v15 = 16;
      }
      else
      {
        v19 = *(_DWORD *)(a1 + 4780);
        if (v19 == -1)
        {
          v15 = 0;
          v20 = (_DWORD *)(a1 + 4784);
LABEL_11:
          v21 = 12 * v15;
          v22 = *(_DWORD *)(v18 + v21);
          *(_QWORD *)(v18 + v21) = 0xFFFFFFFF3FFFFFFFLL;
          goto LABEL_12;
        }
        v15 = 0;
      }
      if (!*(_DWORD *)(a1 + 4796))
      {
        v46 = *(_DWORD *)(a1 + 4792);
        if (v46 == -1)
        {
          v20 = (_DWORD *)(a1 + 4796);
          v15 = 1;
          goto LABEL_11;
        }
        if (v46 < v19)
          v15 = 1;
        else
          v15 = v15;
        if (v46 < v19)
          v19 = *(_DWORD *)(a1 + 4792);
      }
      if (!*(_DWORD *)(a1 + 4808))
      {
        v47 = *(_DWORD *)(a1 + 4804);
        if (v47 == -1)
        {
          v20 = (_DWORD *)(a1 + 4808);
          v15 = 2;
          goto LABEL_11;
        }
        if (v47 >= v19)
          v15 = v15;
        else
          v15 = 2;
        if (v47 < v19)
          v19 = *(_DWORD *)(a1 + 4804);
      }
      if (!*(_DWORD *)(a1 + 4820))
      {
        v48 = *(_DWORD *)(a1 + 4816);
        if (v48 == -1)
        {
          v20 = (_DWORD *)(a1 + 4820);
          v15 = 3;
          goto LABEL_11;
        }
        if (v48 >= v19)
          v15 = v15;
        else
          v15 = 3;
        if (v48 < v19)
          v19 = *(_DWORD *)(a1 + 4816);
      }
      if (!*(_DWORD *)(a1 + 4832))
      {
        v60 = *(_DWORD *)(a1 + 4828);
        if (v60 == -1)
        {
          v20 = (_DWORD *)(a1 + 4832);
          v15 = 4;
          goto LABEL_11;
        }
        if (v60 >= v19)
          v15 = v15;
        else
          v15 = 4;
        if (v60 < v19)
          v19 = *(_DWORD *)(a1 + 4828);
      }
      if (!*(_DWORD *)(a1 + 4844))
      {
        v61 = *(_DWORD *)(a1 + 4840);
        if (v61 == -1)
        {
          v20 = (_DWORD *)(a1 + 4844);
          v15 = 5;
          goto LABEL_11;
        }
        if (v61 >= v19)
          v15 = v15;
        else
          v15 = 5;
        if (v61 < v19)
          v19 = *(_DWORD *)(a1 + 4840);
      }
      if (!*(_DWORD *)(a1 + 4856))
      {
        v62 = *(_DWORD *)(a1 + 4852);
        if (v62 == -1)
        {
          v20 = (_DWORD *)(a1 + 4856);
          v15 = 6;
          goto LABEL_11;
        }
        if (v62 >= v19)
          v15 = v15;
        else
          v15 = 6;
        if (v62 < v19)
          v19 = *(_DWORD *)(a1 + 4852);
      }
      if (!*(_DWORD *)(a1 + 4868))
      {
        v63 = *(_DWORD *)(a1 + 4864);
        if (v63 == -1)
        {
          v20 = (_DWORD *)(a1 + 4868);
          v15 = 7;
          goto LABEL_11;
        }
        if (v63 >= v19)
          v15 = v15;
        else
          v15 = 7;
        if (v63 < v19)
          v19 = *(_DWORD *)(a1 + 4864);
      }
      if (!*(_DWORD *)(a1 + 4880))
      {
        v68 = *(_DWORD *)(a1 + 4876);
        if (v68 == -1)
        {
          v20 = (_DWORD *)(a1 + 4880);
          v15 = 8;
          goto LABEL_11;
        }
        if (v68 >= v19)
          v15 = v15;
        else
          v15 = 8;
        if (v68 < v19)
          v19 = *(_DWORD *)(a1 + 4876);
      }
      if (!*(_DWORD *)(a1 + 4892))
      {
        v70 = *(_DWORD *)(a1 + 4888);
        if (v70 == -1)
        {
          v20 = (_DWORD *)(a1 + 4892);
          v15 = 9;
          goto LABEL_11;
        }
        if (v70 >= v19)
          v15 = v15;
        else
          v15 = 9;
        if (v70 < v19)
          v19 = *(_DWORD *)(a1 + 4888);
      }
      if (!*(_DWORD *)(a1 + 4904))
      {
        v72 = *(_DWORD *)(a1 + 4900);
        if (v72 == -1)
        {
          v20 = (_DWORD *)(a1 + 4904);
          v15 = 10;
          goto LABEL_11;
        }
        if (v72 >= v19)
          v15 = v15;
        else
          v15 = 10;
        if (v72 < v19)
          v19 = *(_DWORD *)(a1 + 4900);
      }
      if (!*(_DWORD *)(a1 + 4916))
      {
        v73 = *(_DWORD *)(a1 + 4912);
        if (v73 == -1)
        {
          v20 = (_DWORD *)(a1 + 4916);
          v15 = 11;
          goto LABEL_11;
        }
        if (v73 >= v19)
          v15 = v15;
        else
          v15 = 11;
        if (v73 < v19)
          v19 = *(_DWORD *)(a1 + 4912);
      }
      if (!*(_DWORD *)(a1 + 4928))
      {
        v74 = *(_DWORD *)(a1 + 4924);
        if (v74 == -1)
        {
          v20 = (_DWORD *)(a1 + 4928);
          v15 = 12;
          goto LABEL_11;
        }
        if (v74 >= v19)
          v15 = v15;
        else
          v15 = 12;
        if (v74 < v19)
          v19 = *(_DWORD *)(a1 + 4924);
      }
      if (!*(_DWORD *)(a1 + 4940))
      {
        v75 = *(_DWORD *)(a1 + 4936);
        if (v75 == -1)
        {
          v20 = (_DWORD *)(a1 + 4940);
          v15 = 13;
          goto LABEL_11;
        }
        if (v75 >= v19)
          v15 = v15;
        else
          v15 = 13;
        if (v75 < v19)
          v19 = *(_DWORD *)(a1 + 4936);
      }
      if (!*(_DWORD *)(a1 + 4952))
      {
        v85 = *(_DWORD *)(a1 + 4948);
        if (v85 == -1)
        {
          v20 = (_DWORD *)(a1 + 4952);
          v15 = 14;
          goto LABEL_11;
        }
        if (v85 >= v19)
          v15 = v15;
        else
          v15 = 14;
        if (v85 < v19)
          v19 = *(_DWORD *)(a1 + 4948);
      }
      if (!*(_DWORD *)(a1 + 4964))
      {
        v86 = *(_DWORD *)(a1 + 4960);
        if (v86 == -1)
        {
          v20 = (_DWORD *)(a1 + 4964);
          v15 = 15;
          goto LABEL_11;
        }
        if (v86 >= v19)
          v15 = v15;
        else
          v15 = 15;
      }
      v87 = (unsigned int *)(v18 + 12 * v15);
      v22 = *v87;
      *(_QWORD *)v87 = 0xFFFFFFFF3FFFFFFFLL;
      v20 = v87 + 2;
LABEL_12:
      *v20 = 1;
      if (v22 != 0x3FFFFFFF)
        JSC::DFG::SpeculativeJIT::spill(a1, v22, a3, a4, a5, a6, a7, a8);
      v23 = *(unsigned __int16 *)(v8 + 18);
      if (v23 > 0xB5)
      {
        if (v23 == 182)
          goto LABEL_16;
        if (v23 == 355 || v23 == 348)
        {
          v24 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
          }
          goto LABEL_17;
        }
      }
      else if (v23 < 3)
      {
LABEL_16:
        v24 = *(uint64_t **)(v8 + 72);
LABEL_17:
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *v24, v15, a4, a5, a6, a7, a8);
        *v14 = 16;
        v30 = v12 + 24 * (int)v10;
        *(_BYTE *)(v30 + 17) = v15;
        if (*(_BYTE *)(v30 + 15))
        {
          if (*(_DWORD *)(*(_QWORD *)v13 + 20) >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197C96B1CLL);
          }
          v31 = (_QWORD *)(a1 + 5632);
          *(_DWORD *)v88 = *(_DWORD *)(*(_QWORD *)v13 + 20);
          *(_DWORD *)&v88[4] = v15 | 0x3FFFFF00;
          *(_WORD *)&v88[12] = 4100;
          *(_DWORD *)&v88[8] = 0;
          v32 = *(unsigned int *)(a1 + 5644);
          if ((_DWORD)v32 == *(_DWORD *)(a1 + 5640))
          {
            v69 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v31, v32 + 1, (unint64_t)v88, v25, v26, v27, v28, v29);
            v33 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
            v34 = *v69;
            v35 = *(uint64_t *)((char *)v69 + 6);
          }
          else
          {
            v33 = (_QWORD *)(*v31 + 14 * v32);
            v34 = *(_QWORD *)v88;
            v35 = *(_QWORD *)&v88[6];
          }
          *(_QWORD *)((char *)v33 + 6) = v35;
          *v33 = v34;
          ++*(_DWORD *)(a1 + 5644);
        }
        if (v15 > 0xF)
          v36 = -1;
        else
          v36 = v15;
        v37 = (_DWORD *)(v18 + 12 * v36);
        *v37 = v9;
        v37[1] = 1;
        return v15;
      }
      v38 = *(unsigned __int8 *)(v12 + 24 * (int)v10 + 13);
      if (v15 > 0xF)
        v39 = -1;
      else
        v39 = v15;
      v40 = (_DWORD *)(v18 + 12 * v39);
      *v40 = v9;
      v40[1] = 2;
      v41 = (v9 << 35) | 0x1D;
      if (v38 == 1)
      {
        JSC::MacroAssemblerARM64::load32(a1, v41, v15, a4, a5, a6, a7, a8);
        v67 = *(_DWORD *)(a1 + 200);
        if (v67 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v64, v65, v66, v42, v43, v44, v45);
          v67 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v67) = v15 | (32 * v15) | 0xAA1B0000;
        *(_DWORD *)(a1 + 200) += 4;
        v38 = 17;
      }
      else
      {
        JSC::MacroAssemblerARM64::load64(a1, v41, v15, a4, a5, a6, a7, a8);
        if ((v38 & 0x10) == 0)
        {
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x6A, "GPRReg JSC::DFG::SpeculativeJIT::fillJSValue(Edge)", "spillFormat & DataFormatJS");
          __break(0xC471u);
          JUMPOUT(0x197C96C88);
        }
      }
      JSC::DFG::GenerationInfo::fillJSValue(v12 + 24 * (int)v10, a1 + 5632, v15, v38, v42, v43, v44, v45);
      return v15;
    case 1:
      v49 = v12 + 24 * (int)v10;
      v51 = *(char *)(v49 + 17);
      v50 = (_BYTE *)(v49 + 17);
      v15 = v51;
      if (v51 > 15)
        v52 = -1;
      else
        v52 = v15;
      v53 = a1 + 12 * v52;
      if (*(_DWORD *)(v53 + 4784))
      {
        v83 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
        v84 = *(_DWORD *)(a1 + 200);
        if (v84 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v76, v77, v78, v79, v80, v81, v82);
          v84 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v84) = v83 & 0x1F | ((v15 & 0x1F) << 16) | 0xAA000360;
        *(_DWORD *)(a1 + 200) += 4;
        return v83;
      }
      else
      {
        *(_DWORD *)(v53 + 4784) = 1;
        v54 = *(_DWORD *)(a1 + 200);
        if (v54 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
          v54 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v54) = v15 & 0x1F | (32 * (v15 & 0x1F)) | 0xAA1B0000;
        *(_DWORD *)(a1 + 200) += 4;
        *v14 = 17;
        *v50 = v15;
        if (*(_BYTE *)(v12 + 24 * (int)v10 + 15))
        {
          if (*(_DWORD *)(*(_QWORD *)v13 + 20) >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197C96B60);
          }
          v55 = (_QWORD *)(a1 + 5632);
          *(_DWORD *)v88 = *(_DWORD *)(*(_QWORD *)v13 + 20);
          *(_QWORD *)&v88[4] = v15 | 0x3FFFFF00;
          *(_WORD *)&v88[12] = 4356;
          v56 = *(unsigned int *)(a1 + 5644);
          if ((_DWORD)v56 == *(_DWORD *)(a1 + 5640))
          {
            v71 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v55, v56 + 1, (unint64_t)v88, a4, a5, a6, a7, a8);
            v57 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
            v58 = *v71;
            v59 = *(uint64_t *)((char *)v71 + 6);
          }
          else
          {
            v57 = (_QWORD *)(*v55 + 14 * v56);
            v58 = *(_QWORD *)v88;
            v59 = *(_QWORD *)&v88[6];
          }
          *(_QWORD *)((char *)v57 + 6) = v59;
          *v57 = v58;
          ++*(_DWORD *)(a1 + 5644);
        }
      }
      return v15;
    case 2:
    case 4:
    case 5:
    case 7:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x93, "GPRReg JSC::DFG::SpeculativeJIT::fillJSValue(Edge)", "Bad data format");
      __break(0xC471u);
      JUMPOUT(0x197C96BB8);
    case 6:
    case 0x10:
    case 0x11:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x18:
      v15 = *(char *)(v12 + 24 * (int)v10 + 17);
      if ((int)v15 > 15)
        v16 = -1;
      else
        v16 = *(char *)(v12 + 24 * (int)v10 + 17);
      ++*(_DWORD *)(a1 + 12 * v16 + 4784);
      return v15;
    default:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x96, "GPRReg JSC::DFG::SpeculativeJIT::fillJSValue(Edge)", "Corrupt data format");
      __break(0xC471u);
      JUMPOUT(0x197C96C14);
  }
}

uint64_t JSC::DFG::GenerationInfo::fillJSValue(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _BYTE v15[14];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(result + 12) = a4;
  *(_BYTE *)(result + 17) = a3;
  if (*(_BYTE *)(result + 15))
  {
    if ((_DWORD)a4 == 4)
    {
      v14 = *(_DWORD *)(*(_QWORD *)result + 20);
      if (v14 >= 0xFFFFFFFE)
      {
        __break(0xC471u);
        JUMPOUT(0x197C96E54);
      }
      *(_WORD *)&v15[12] = 1028;
      *(_DWORD *)v15 = v14;
    }
    else
    {
      v9 = *(_DWORD *)(*(_QWORD *)result + 20);
      if (v9 >= 0xFFFFFFFE)
      {
        __break(0xC471u);
        JUMPOUT(0x197C96E34);
      }
      v15[12] = 4;
      v15[13] = a4;
      *(_DWORD *)v15 = v9;
    }
    *(_QWORD *)&v15[4] = a3 | 0x3FFFFF00;
    v10 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v10 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v10 + 1, (unint64_t)v15, a4, a5, a6, a7, a8);
      v11 = (_QWORD *)(*(_QWORD *)a2 + 14 * *(unsigned int *)(a2 + 12));
      v12 = *(_QWORD *)result;
      v13 = *(_QWORD *)(result + 6);
    }
    else
    {
      v11 = (_QWORD *)(*(_QWORD *)a2 + 14 * v10);
      v12 = *(_QWORD *)v15;
      v13 = *(_QWORD *)&v15[6];
    }
    *(_QWORD *)((char *)v11 + 6) = v13;
    *v11 = v12;
    ++*(_DWORD *)(a2 + 12);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::cachedGetById(uint64_t a1, int a2, JSC::CodeOrigin *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int *a9, unsigned __int8 a10, char a11)
{
  WTF **v11;
  uint64_t v13;
  JSC::CodeOrigin *v14;
  WTF *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char *v52;
  unsigned int v53;
  int v54;
  _DWORD *v55;
  WTF *v56;
  WTF *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  _BYTE *v63;
  WTF *v64;
  WTF *v65;
  unsigned int v66;
  int v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v80;
  WTF *v82;
  int *v83;
  _BYTE *v84;
  WTF *v85;
  WTF *v86;
  void *v87;
  unsigned int v88;
  _BYTE *v89;
  WTF *v90;
  WTF *v91;
  unsigned int v92;
  int v93;
  _BYTE *v94;
  _BYTE *v95;
  _BYTE *v96;
  unint64_t v97;
  unint64_t v99;
  _QWORD *v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  __int16 v106;
  int v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  WTF *v119;
  unint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  int v130;
  uint64_t v132;
  uint64_t v133;
  WTF *v134;
  unsigned int v135;
  unsigned int v136;
  _DWORD v137[8];
  uint64_t v138;
  WTF *v139;
  int v140;
  unsigned int v141;
  _BYTE v142[24];
  WTF *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  char v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  int v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  _BYTE *v159;
  unsigned int v160;
  unsigned int v161;
  _BYTE v162[24];
  __int128 v163;
  _BYTE v164[4];
  int v165;
  uint64_t v166;
  uint64_t v167;
  __int16 v168;
  int v169;
  uint64_t v170;
  char v171;
  uint64_t v172;

  v11 = (WTF **)a8;
  v13 = a6;
  v14 = a3;
  v16 = (WTF *)a10;
  v17 = a9;
  v132 = a4;
  v18 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded((JSC::DFG::SpeculativeJIT *)a1, a3, *(unsigned int *)(a1 + 5644), a4, a5, a6, a7, a8);
  v19 = 0;
  v20 = a1 + 4776;
  for (i = 15; i != -1; --i)
  {
    if ((char)i <= 15)
      v22 = i;
    else
      v22 = 0xFFFFFFFFLL;
    if (*(_DWORD *)(v20 + 12 * v22 + 8) || *(_DWORD *)(v20 + 12 * v22) != 0x3FFFFFFF)
    {
      if ((i & 0x40) != 0)
        goto LABEL_126;
      v19 |= 1 << i;
    }
  }
  v23 = a1 + 4968;
  for (j = 0x16u; j != -1; --j)
  {
    v25 = JSC::FPRInfo::toRegister::registerForIndex[j];
    v26 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v25];
    if (*(_DWORD *)(v23 + 12 * v26 + 8) || *(_DWORD *)(v23 + 12 * v26) != 0x3FFFFFFF)
    {
      v27 = v25 + 32;
      if ((v27 & 0x40) != 0)
        goto LABEL_126;
      v19 |= 1 << v27;
    }
  }
  v28 = v19 | 0xFF00FFFC0000;
  v157 = v28;
  v158 = 0;
  if (a10 == 1)
  {
    v29 = v132 & 0x7F;
    if (v29 >= 0x40)
      goto LABEL_126;
    v30 = a5 & 0x7F;
    if (v30 >= 0x40)
      goto LABEL_126;
    v31 = v28 & ~((1 << v30) | (1 << v29));
    v157 = v31;
    if ((_DWORD)v13 != -1)
    {
      if ((v13 & 0x7Fu) >= 0x40)
        goto LABEL_126;
      v31 &= ~(1 << (v13 & 0x7F));
      v157 = v31;
    }
    if ((_DWORD)a7 == -1)
      goto LABEL_27;
    if ((a7 & 0x7Fu) < 0x40)
    {
      v157 = v31 & ~(1 << (a7 & 0x7F));
      v158 = 0;
      goto LABEL_27;
    }
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }
LABEL_27:
  v130 = a10;
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    v32 = *(_QWORD *)(a1 + 368);
    if (v32)
    {
      v33 = (unsigned int *)(v32 + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 + 1, v33));
    }
    v35 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v35 = 2;
    *(_DWORD *)(v35 + 96) = 0;
    *(_OWORD *)(v35 + 12) = 0u;
    *(_OWORD *)(v35 + 28) = 0u;
    *(_DWORD *)(v35 + 44) = 0;
    *(_QWORD *)(v35 + 64) = 0;
    *(_QWORD *)(v35 + 72) = 0;
    *(_QWORD *)(v35 + 56) = 0;
    *(_QWORD *)(v35 + 104) = 0;
    *(_QWORD *)(v35 + 112) = -1;
    *(_WORD *)(v35 + 120) = -1;
    *(_DWORD *)(v35 + 122) = 0x10000;
    *(_BYTE *)(v35 + 126) = 0;
    *(_BYTE *)(v35 + 127) = BYTE12(xmmword_1ECF4C260);
    *(_BYTE *)(v35 + 128) = 0;
    *(_WORD *)(v35 + 129) &= 0xFC00u;
    *(_QWORD *)(v35 + 136) = 0;
    *(_QWORD *)(v35 + 136) = *(_QWORD *)(v32 + 184);
    *(_QWORD *)(v32 + 184) = v35;
    v36 = (unsigned int *)(v32 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (v37 == 1)
    {
      atomic_store(1u, (unsigned int *)(v32 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    }
    v38 = 0;
    v129 = 0;
  }
  else
  {
    v129 = *(_DWORD *)(a1 + 3872);
    v35 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 3872);
    v38 = 2;
  }
  v39 = *(_QWORD *)(a1 + 336);
  v40 = *(_QWORD *)v14;
  if ((*(_QWORD *)v14 & 1) != 0)
  {
    v123 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
    if ((v40 & 2) != 0
      || ((v124 = *(unsigned int *)((v40 & 0xFFFFFFFF8) + 8), (_DWORD)v124 != 0x3FFFFFFF)
        ? (v125 = (_DWORD)v124 == -1)
        : (v125 = 1),
          v125))
    {
      v126 = 2;
    }
    else if (v124 >> 28)
    {
      v128 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
      v123 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v123 = v128;
      *(_DWORD *)(v123 + 8) = v124;
      v126 = 1;
    }
    else
    {
      v126 = *(_QWORD *)(v40 & 0xFFFFFFFF8);
      v123 = v124 << 36;
    }
    v40 = v123 | v126;
  }
  LODWORD(v14) = a11;
  v147 = v40;
  BYTE1(v127) = a11;
  LOBYTE(v127) = v13;
  JSC::JITGetByIdGenerator::JITGetByIdGenerator((uint64_t)&v148, v39, v35, v38, 0, &v147, v18, (uint64_t)&v157, (uint64_t)v11, v132, a5, v127);
  if ((v147 & 1) != 0 && (v147 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v147 & 0xFFFFFFFF8, v41, v42, v43, v44, v45, v46, v47);
  v16 = (WTF *)&v145;
  v143 = (WTF *)&v145;
  v144 = 2;
  v48 = *a9;
  if (*a9 != -1)
  {
    v146 = *(_QWORD *)(a9 + 1);
    HIDWORD(v144) = 1;
    v145 = v48;
  }
  v17 = 357913942;
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    if (v156)
      v49 = 44;
    else
      v49 = 40;
    JSC::JITByIdGenerator::generateFastCommon((JSC::JITByIdGenerator *)&v148, (JSC::CCallHelpers *)a1, v49, v43, v44, v45, v46, v47);
    v137[7] = v154;
    v50 = v155;
    v138 = v155;
    v51 = HIDWORD(v144);
    if (v154 != -1)
    {
      v52 = (char *)v143 + 12 * HIDWORD(v144);
      *(_DWORD *)v52 = v154;
      *(_QWORD *)(v52 + 4) = v50;
      v51 = ++HIDWORD(v144);
    }
    v53 = v51;
    v13 = (uint64_t)v137;
    v134 = (WTF *)v137;
    v135 = 2;
    v136 = v51;
    if (v51 < 3)
    {
      v55 = v137;
      if (!v51)
        goto LABEL_54;
LABEL_52:
      v56 = v143;
      v57 = (WTF *)((char *)v143 + 12 * v53);
      do
      {
        *v55 = *(_DWORD *)v56;
        *(_QWORD *)(v55 + 1) = *(_QWORD *)((char *)v56 + 4);
        v56 = (WTF *)((char *)v56 + 12);
        v55 += 3;
      }
      while (v56 != v57);
LABEL_54:
      v11 = &v134;
      if (!a11)
      {
        v58 = operationGetByIdOptimize;
        goto LABEL_56;
      }
LABEL_127:
      if ((_DWORD)v14 == 3)
      {
        v58 = operationTryGetByIdOptimize;
      }
      else
      {
        if ((_DWORD)v14 == 2)
        {
          v58 = operationGetByIdDirectOptimize;
        }
        else if (a11 == 28)
        {
          v58 = operationGetPrivateNameByIdOptimize;
        }
        else
        {
          v58 = 0;
        }
        v17 = 357913942;
      }
LABEL_56:
      v59 = *((_QWORD *)&v148 + 1);
      v60 = WTF::fastMalloc((WTF *)0xB0);
      v61 = v136;
      v159 = v162;
      v160 = 2;
      v161 = v136;
      if (v136 < 3)
      {
        v63 = v162;
      }
      else
      {
        if (v136 >= v17)
        {
          __break(0xC471u);
          JUMPOUT(0x197C97B14);
        }
        v62 = 12 * v136;
        v63 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v136));
        v160 = (v62 & 0xFFFFFFFC) / 0xC;
        v159 = v63;
        v61 = v136;
      }
      if (v61)
      {
        v64 = v134;
        v65 = (WTF *)((char *)v134 + 12 * v61);
        do
        {
          *(_DWORD *)v63 = *(_DWORD *)v64;
          *(_QWORD *)(v63 + 4) = *(_QWORD *)((char *)v64 + 4);
          v64 = (WTF *)((char *)v64 + 12);
          v63 += 12;
        }
        while (v64 != v65);
      }
      v66 = v161;
      *(_QWORD *)&v163 = v164;
      DWORD2(v163) = 2;
      HIDWORD(v163) = v161;
      if (v161 < 3)
      {
        v68 = v164;
        if (!v161)
          goto LABEL_70;
      }
      else
      {
        if (v161 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197C97B1CLL);
        }
        v67 = 12 * v161;
        v68 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v161));
        DWORD2(v163) = (v67 & 0xFFFFFFFC) / 0xC;
        *(_QWORD *)&v163 = v68;
        v66 = v161;
        if (!v161)
        {
LABEL_70:
          JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v60, (uint64_t *)&v163, (_DWORD *)a1, v130, 0, a5);
          v78 = v163;
          if (v164 != (_BYTE *)v163 && (_QWORD)v163 != 0)
          {
            *(_QWORD *)&v163 = 0;
            DWORD2(v163) = 0;
            WTF::fastFree(v78, v71, v72, v73, v74, v75, v76, v77);
          }
          *(_QWORD *)v60 = &off_1E3574C38;
          *(_QWORD *)(v60 + 152) = v58;
          *(_BYTE *)(v60 + 160) = v132;
          *(_QWORD *)(v60 + 168) = v59;
          v80 = (unint64_t)v159;
          if (v162 != v159 && v159 != 0)
          {
            v159 = 0;
            v160 = 0;
            WTF::fastFree(v80, v71, v72, v73, v74, v75, v76, v77);
          }
          v82 = v134;
          if ((WTF *)v13 != v134 && v134)
          {
            v83 = (int *)(v11 + 1);
            v134 = 0;
LABEL_113:
            *v83 = 0;
            WTF::fastFree((unint64_t)v82, v71, v72, v73, v74, v75, v76, v77);
            goto LABEL_114;
          }
          goto LABEL_114;
        }
      }
      v69 = v159;
      v70 = &v159[12 * v66];
      do
      {
        *(_DWORD *)v68 = *(_DWORD *)v69;
        *(_QWORD *)(v68 + 4) = *(_QWORD *)(v69 + 4);
        v69 += 12;
        v68 += 12;
      }
      while (v69 != v70);
      goto LABEL_70;
    }
    if (v51 < 0x15555556)
    {
      v54 = 12 * v51;
      v55 = (_DWORD *)WTF::fastMalloc((WTF *)(12 * v51));
      v135 = (v54 & 0xFFFFFFFC) / 0xC;
      v134 = (WTF *)v55;
      v53 = HIDWORD(v144);
      if (!HIDWORD(v144))
        goto LABEL_54;
      goto LABEL_52;
    }
    __break(0xC471u);
LABEL_161:
    JUMPOUT(0x197C97B0CLL);
  }
  JSC::JITGetByIdGenerator::generateDFGDataICFastPath((uint64_t)&v148, a1, v129, v132, a5, v13, a7, v47);
  v139 = (WTF *)v142;
  v140 = 2;
  v141 = HIDWORD(v144);
  v84 = v142;
  if (HIDWORD(v144))
  {
    v85 = v143;
    v86 = (WTF *)((char *)v143 + 12 * HIDWORD(v144));
    do
    {
      *(_DWORD *)v84 = *(_DWORD *)v85;
      *(_QWORD *)(v84 + 4) = *(_QWORD *)((char *)v85 + 4);
      v85 = (WTF *)((char *)v85 + 12);
      v84 += 12;
    }
    while (v85 != v86);
  }
  if (a11)
  {
    switch(a11)
    {
      case 3:
        v87 = operationTryGetByIdOptimize;
        break;
      case 2:
        v87 = operationGetByIdDirectOptimize;
        break;
      case 28:
        v87 = operationGetPrivateNameByIdOptimize;
        break;
      default:
        v87 = 0;
        break;
    }
  }
  else
  {
    v87 = operationGetByIdOptimize;
  }
  v60 = WTF::fastMalloc((WTF *)0xB8);
  v88 = v141;
  v159 = v162;
  v160 = 2;
  v161 = v141;
  if (v141 < 3)
  {
    v89 = v162;
  }
  else
  {
    if (v141 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C97B2CLL);
    }
    v89 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v141));
    v160 = 12 * v141 / 0xC;
    v159 = v89;
    v88 = v141;
  }
  if (v88)
  {
    v90 = v139;
    v91 = (WTF *)((char *)v139 + 12 * v88);
    do
    {
      *(_DWORD *)v89 = *(_DWORD *)v90;
      *(_QWORD *)(v89 + 4) = *(_QWORD *)((char *)v90 + 4);
      v90 = (WTF *)((char *)v90 + 12);
      v89 += 12;
    }
    while (v90 != v91);
  }
  v92 = v161;
  *(_QWORD *)&v163 = v164;
  DWORD2(v163) = 2;
  HIDWORD(v163) = v161;
  if (v161 < 3)
  {
    v94 = v164;
  }
  else
  {
    if (v161 >= 0x15555556)
    {
      __break(0xC471u);
      goto LABEL_161;
    }
    v93 = 12 * v161;
    v94 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v161));
    DWORD2(v163) = (v93 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)&v163 = v94;
    v92 = v161;
  }
  if (v92)
  {
    v95 = v159;
    v96 = &v159[12 * v92];
    do
    {
      *(_DWORD *)v94 = *(_DWORD *)v95;
      *(_QWORD *)(v94 + 4) = *(_QWORD *)(v95 + 4);
      v95 += 12;
      v94 += 12;
    }
    while (v95 != v96);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v60, (uint64_t *)&v163, (_DWORD *)a1, a10, 0, a5);
  v97 = v163;
  if (v164 != (_BYTE *)v163 && (_QWORD)v163 != 0)
  {
    *(_QWORD *)&v163 = 0;
    DWORD2(v163) = 0;
    WTF::fastFree(v97, v71, v72, v73, v74, v75, v76, v77);
  }
  *(_QWORD *)v60 = &off_1E3574BD8;
  *(_BYTE *)(v60 + 152) = v13;
  *(_QWORD *)(v60 + 156) = v13 | 0x3000000000;
  *(_QWORD *)(v60 + 168) = v87;
  *(_BYTE *)(v60 + 176) = v132;
  *(_BYTE *)(v60 + 177) = v13;
  *(_DWORD *)(v60 + 180) = v129;
  v99 = (unint64_t)v159;
  if (v162 != v159 && v159)
  {
    v159 = 0;
    v160 = 0;
    WTF::fastFree(v99, v71, v72, v73, v74, v75, v76, v77);
  }
  v82 = v139;
  if (v142 != (_BYTE *)v139 && v139)
  {
    v83 = &v140;
    v139 = 0;
    goto LABEL_113;
  }
LABEL_114:
  v100 = (_QWORD *)(a1 + 408);
  v163 = v148;
  v164[0] = v149;
  v101 = v150;
  v102 = v151;
  v165 = v150;
  v166 = v151;
  v103 = HIDWORD(v151);
  v104 = v152;
  v167 = v152;
  v105 = HIDWORD(v152);
  v106 = v153;
  v168 = v153;
  v107 = v154;
  v169 = v154;
  v108 = v155;
  v170 = v155;
  v109 = v156;
  v171 = v156;
  v172 = v60;
  v110 = *(unsigned int *)(a1 + 420);
  if ((_DWORD)v110 == *(_DWORD *)(a1 + 416))
  {
    v120 = WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v110 + 1, (unint64_t)&v163, v73, v74, v75, v76, v77);
    v121 = *(_QWORD *)(a1 + 408) + 72 * *(unsigned int *)(a1 + 420);
    v122 = *(_OWORD *)v120;
    *(_BYTE *)(v121 + 16) = *(_BYTE *)(v120 + 16);
    *(_OWORD *)v121 = v122;
    *(_DWORD *)(v121 + 20) = *(_DWORD *)(v120 + 20);
    *(_DWORD *)(v121 + 24) = *(_DWORD *)(v120 + 24);
    *(_DWORD *)(v121 + 28) = *(_DWORD *)(v120 + 28);
    *(_QWORD *)(v121 + 32) = *(_QWORD *)(v120 + 32);
    *(_WORD *)(v121 + 40) = *(_WORD *)(v120 + 40);
    *(_DWORD *)(v121 + 44) = *(_DWORD *)(v120 + 44);
    *(_QWORD *)(v121 + 48) = *(_QWORD *)(v120 + 48);
    *(_BYTE *)(v121 + 56) = *(_BYTE *)(v120 + 56);
    *(_QWORD *)(v121 + 64) = *(_QWORD *)(v120 + 64);
  }
  else
  {
    v111 = 72;
    v112 = v148;
    v113 = *v100 + 72 * v110;
    *(_BYTE *)(v113 + 16) = v149;
    *(_OWORD *)v113 = v112;
    *(_DWORD *)(v113 + 20) = v101;
    *(_DWORD *)(v113 + 24) = v102;
    *(_DWORD *)(v113 + 28) = v103;
    *(_DWORD *)(v113 + 32) = v104;
    *(_DWORD *)(v113 + 36) = v105;
    *(_WORD *)(v113 + 40) = v106;
    *(_DWORD *)(v113 + 44) = v107;
    *(_QWORD *)(v113 + 48) = v108;
    *(_BYTE *)(v113 + 56) = v109;
    *(_QWORD *)(v113 + 64) = v60;
  }
  ++*(_DWORD *)(a1 + 420);
  v133 = v60;
  v114 = (_QWORD *)(a1 + 5656);
  v115 = *(unsigned int *)(a1 + 5668);
  if ((_DWORD)v115 == *(_DWORD *)(a1 + 5664))
  {
    v117 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v114, v115 + 1, (unint64_t)&v133);
    v115 = *(unsigned int *)(a1 + 5668);
    v116 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v115);
    v60 = *v117;
  }
  else
  {
    v116 = (uint64_t *)(*v114 + 8 * v115);
    v117 = &v133;
  }
  *v117 = 0;
  *v116 = v60;
  *(_DWORD *)(a1 + 5668) = v115 + 1;
  v118 = v133;
  v133 = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  v119 = v143;
  if (v16 != v143)
  {
    if (v143)
    {
      v143 = 0;
      LODWORD(v144) = 0;
      WTF::fastFree((unint64_t)v119, (void *)v111, v72, v73, v74, v75, v76, v77);
    }
  }
}

void JSC::DFG::SpeculativeJIT::cachedGetByIdWithThis(uint64_t a1, const JSC::CodeOrigin *a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9)
{
  uint64_t v10;
  WTF *v12;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t j;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unint64_t v62;
  _DWORD *v63;
  _QWORD *v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  _BYTE *v68;
  _DWORD *v69;
  unsigned int v70;
  int v71;
  _BYTE *v72;
  WTF *v73;
  WTF *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  _BYTE *v78;
  WTF *v79;
  WTF *v80;
  unsigned int v81;
  int v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v90;
  WTF *v91;
  unsigned int *v92;
  WTF *v93;
  WTF *v94;
  unsigned int v95;
  _BYTE *v96;
  WTF *v97;
  WTF *v98;
  unsigned int v99;
  int v100;
  _BYTE *v101;
  _BYTE *v102;
  _BYTE *v103;
  unint64_t v104;
  unint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  __int16 v112;
  int v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  WTF *v122;
  unint64_t v123;
  unint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  WTF *v139;
  unsigned int v140;
  unsigned int v141;
  _BYTE v142[28];
  int v143;
  uint64_t v144;
  WTF *v145;
  unsigned int v146;
  unsigned int v147;
  _BYTE v148[24];
  WTF *v149;
  uint64_t v150;
  _BYTE v151[24];
  uint64_t v152;
  __int128 v153;
  char v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  __int16 v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  _BYTE v164[4];
  int v165;
  uint64_t v166;
  uint64_t v167;
  __int16 v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  unsigned int v173;
  unsigned int v174;
  _BYTE v175[40];

  v10 = a7;
  v12 = (WTF *)a5;
  v15 = a4;
  v16 = a3;
  v17 = (_QWORD *)JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded((JSC::DFG::SpeculativeJIT *)a1, a2, *(unsigned int *)(a1 + 5644), a4, a5, a6, a7, a8);
  v23 = 0;
  v24 = a1 + 4776;
  for (i = 15; i != -1; --i)
  {
    if ((char)i <= 15)
      v26 = i;
    else
      v26 = 0xFFFFFFFFLL;
    v27 = *(unsigned int *)(v24 + 12 * v26 + 8);
    if ((_DWORD)v27 || *(_DWORD *)(v24 + 12 * v26) != 0x3FFFFFFF)
    {
      if ((i & 0x40) != 0)
        goto LABEL_125;
      v23 |= 1 << i;
    }
  }
  v28 = a1 + 4968;
  for (j = 0x16u; j != -1; --j)
  {
    v27 = JSC::FPRInfo::toRegister::registerForIndex[j];
    v30 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v27];
    if (*(_DWORD *)(v28 + 12 * v30 + 8) || *(_DWORD *)(v28 + 12 * v30) != 0x3FFFFFFF)
    {
      v27 = JSC::FPRInfo::toRegister::registerForIndex[j] + 32;
      if (((JSC::FPRInfo::toRegister::registerForIndex[j] + 32) & 0x40) != 0)
        goto LABEL_125;
      v27 = 1 << (JSC::FPRInfo::toRegister::registerForIndex[j] + 32);
      v23 |= v27;
    }
  }
  v31 = v23 | 0xFF00FFFC0000;
  v161 = v31;
  v162 = 0;
  if ((_DWORD)v16 != 255)
  {
    if ((v16 & 0x7Fu) >= 0x40)
      goto LABEL_125;
    v31 &= ~(1 << (v16 & 0x7F));
    v161 = v31;
  }
  if (v15 != 255)
  {
    if ((v15 & 0x7Fu) >= 0x40)
      goto LABEL_125;
    v31 &= ~(1 << (v15 & 0x7F));
    v161 = v31;
    v162 = 0;
  }
  if ((_DWORD)v12 != -1)
  {
    if ((v12 & 0x7Fu) >= 0x40)
      goto LABEL_125;
    v31 &= ~(1 << (v12 & 0x7F));
    v161 = v31;
    v162 = 0;
  }
  if ((_DWORD)a6 != -1)
  {
    if ((a6 & 0x7Fu) >= 0x40)
      goto LABEL_125;
    v31 &= ~(1 << (a6 & 0x7F));
    v161 = v31;
    v162 = 0;
  }
  if ((_DWORD)v10 == -1)
    goto LABEL_33;
  if ((v10 & 0x7Fu) >= 0x40)
  {
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
  v161 = v31 & ~(1 << (v10 & 0x7F));
  v162 = 0;
LABEL_33:
  v32 = (int)v17;
  v136 = (uint64_t)v12;
  v137 = v15;
  v133 = v10;
  v134 = a8;
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    v33 = *(_QWORD *)(a1 + 368);
    if (v33)
    {
      v34 = (unsigned int *)(v33 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 + 1, v34));
    }
    v36 = WTF::fastMalloc((WTF *)0x90);
    *(_QWORD *)v36 = 2;
    *(_DWORD *)(v36 + 96) = 0;
    *(_OWORD *)(v36 + 12) = 0u;
    *(_OWORD *)(v36 + 28) = 0u;
    *(_DWORD *)(v36 + 44) = 0;
    *(_QWORD *)(v36 + 64) = 0;
    *(_QWORD *)(v36 + 72) = 0;
    *(_QWORD *)(v36 + 56) = 0;
    *(_QWORD *)(v36 + 104) = 0;
    *(_QWORD *)(v36 + 112) = -1;
    *(_WORD *)(v36 + 120) = -1;
    *(_DWORD *)(v36 + 122) = 0x10000;
    *(_BYTE *)(v36 + 126) = 0;
    *(_BYTE *)(v36 + 127) = BYTE12(xmmword_1ECF4C260);
    *(_BYTE *)(v36 + 128) = 0;
    *(_WORD *)(v36 + 129) &= 0xFC00u;
    *(_QWORD *)(v36 + 136) = 0;
    *(_QWORD *)(v36 + 136) = *(_QWORD *)(v33 + 184);
    *(_QWORD *)(v33 + 184) = v36;
    v37 = (unsigned int *)(v33 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (v38 == 1)
    {
      atomic_store(1u, (unsigned int *)(v33 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
    }
    v39 = 0;
    v40 = 0;
  }
  else
  {
    v40 = *(_DWORD *)(a1 + 3872);
    v36 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 3872);
    v39 = 2;
  }
  v41 = *(_QWORD *)(a1 + 336);
  v42 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) != 0)
  {
    v126 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
    if ((v42 & 2) != 0
      || ((v127 = *(unsigned int *)((v42 & 0xFFFFFFFF8) + 8), (_DWORD)v127 != 0x3FFFFFFF)
        ? (v128 = (_DWORD)v127 == -1)
        : (v128 = 1),
          v128))
    {
      v129 = 2;
    }
    else if (v127 >> 28)
    {
      v132 = *(_DWORD *)((v42 & 0xFFFFFFFF8) + 8);
      v130 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v130 = v126;
      *(_DWORD *)(v130 + 8) = v132;
      v129 = 1;
      v126 = v130;
    }
    else
    {
      v129 = *(_QWORD *)(v42 & 0xFFFFFFFF8);
      v126 = v127 << 36;
    }
    v42 = v126 | v129;
  }
  v152 = v42;
  LOBYTE(v131) = a6;
  JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator((uint64_t)&v153, v41, v36, v39, 0, &v152, v32, (uint64_t)&v161, v134, v136, v16, v137, v131);
  if ((v152 & 1) != 0 && (v152 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v152 & 0xFFFFFFFF8, v43, v44, v45, v46, v47, v48, v49);
  v12 = (WTF *)v151;
  v149 = (WTF *)v151;
  v150 = 2;
  WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((uint64_t)&v149, a9, v44, v45, v46, v47, v48, v49);
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
  {
    JSC::JITByIdGenerator::generateFastCommon((JSC::JITByIdGenerator *)&v153, (JSC::CCallHelpers *)a1, 40, v50, v51, v52, v53, v54);
    v143 = v159;
    v60 = v160;
    v144 = v160;
    v61 = HIDWORD(v150);
    if (v159 != -1)
    {
      if (HIDWORD(v150) == (_DWORD)v150)
      {
        v62 = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v149, (void *)(HIDWORD(v150) + 1), (unint64_t)&v143, v55, v56, v57, v58, v59);
        v63 = (_DWORD *)((char *)v149 + 12 * HIDWORD(v150));
        *v63 = *(_DWORD *)v62;
        v64 = v63 + 1;
        v60 = *(_QWORD *)(v62 + 4);
      }
      else
      {
        v69 = (_DWORD *)((char *)v149 + 12 * HIDWORD(v150));
        *v69 = v159;
        v64 = v69 + 1;
      }
      *v64 = v60;
      v61 = ++HIDWORD(v150);
    }
    v70 = v61;
    v139 = (WTF *)v142;
    v140 = 2;
    v141 = v61;
    if (v61 < 3)
    {
      v72 = v142;
      if (!v61)
        goto LABEL_61;
LABEL_59:
      v73 = v149;
      v74 = (WTF *)((char *)v149 + 12 * v70);
      do
      {
        *(_DWORD *)v72 = *(_DWORD *)v73;
        *(_QWORD *)(v72 + 4) = *(_QWORD *)((char *)v73 + 4);
        v73 = (WTF *)((char *)v73 + 12);
        v72 += 12;
      }
      while (v73 != v74);
LABEL_61:
      v75 = *((_QWORD *)&v153 + 1);
      v10 = WTF::fastMalloc((WTF *)0xB0);
      v76 = v141;
      v172 = v175;
      v173 = 2;
      v174 = v141;
      v135 = v75;
      if (v141 < 3)
      {
        v77 = v136;
        v78 = v175;
      }
      else
      {
        if (v141 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197C986C8);
        }
        v77 = v136;
        v78 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v141));
        v173 = 12 * v141 / 0xC;
        v172 = v78;
        v76 = v141;
      }
      if (v76)
      {
        v79 = v139;
        v80 = (WTF *)((char *)v139 + 12 * v76);
        do
        {
          *(_DWORD *)v78 = *(_DWORD *)v79;
          *(_QWORD *)(v78 + 4) = *(_QWORD *)((char *)v79 + 4);
          v79 = (WTF *)((char *)v79 + 12);
          v78 += 12;
        }
        while (v79 != v80);
      }
      v81 = v174;
      *(_QWORD *)&v163 = v164;
      DWORD2(v163) = 2;
      HIDWORD(v163) = v174;
      if (v174 < 3)
      {
        v83 = v164;
      }
      else
      {
        if (v174 >= 0x15555556)
        {
          __break(0xC471u);
          JUMPOUT(0x197C986D0);
        }
        v82 = 12 * v174;
        v83 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v174));
        DWORD2(v163) = (v82 & 0xFFFFFFFC) / 0xC;
        *(_QWORD *)&v163 = v83;
        v81 = v174;
      }
      if (v81)
      {
        v84 = v172;
        v85 = &v172[12 * v81];
        do
        {
          *(_DWORD *)v83 = *(_DWORD *)v84;
          *(_QWORD *)(v83 + 4) = *(_QWORD *)(v84 + 4);
          v84 += 12;
          v83 += 12;
        }
        while (v84 != v85);
      }
      JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v10, (uint64_t *)&v163, (_DWORD *)a1, 1, 0, v77);
      v88 = v163;
      if (v164 != (_BYTE *)v163 && (_QWORD)v163 != 0)
      {
        *(_QWORD *)&v163 = 0;
        DWORD2(v163) = 0;
        WTF::fastFree(v88, v86, v87, v18, v19, v20, v21, v22);
      }
      *(_QWORD *)v10 = &off_1E3574C98;
      *(_QWORD *)(v10 + 152) = operationGetByIdWithThisOptimize;
      *(_BYTE *)(v10 + 160) = v16;
      *(_BYTE *)(v10 + 161) = v137;
      *(_QWORD *)(v10 + 168) = v135;
      v90 = (unint64_t)v172;
      v12 = (WTF *)v151;
      if (v175 != v172 && v172)
      {
        v172 = 0;
        v173 = 0;
        WTF::fastFree(v90, v86, v87, v18, v19, v20, v21, v22);
      }
      v91 = v139;
      if (v142 != (_BYTE *)v139 && v139)
      {
        v92 = &v140;
        v139 = 0;
LABEL_113:
        *v92 = 0;
        WTF::fastFree((unint64_t)v91, v86, v87, v18, v19, v20, v21, v22);
        goto LABEL_114;
      }
      goto LABEL_114;
    }
    if (v61 < 0x15555556)
    {
      v71 = 12 * v61;
      v72 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v61));
      v140 = (v71 & 0xFFFFFFFC) / 0xC;
      v139 = (WTF *)v72;
      v70 = HIDWORD(v150);
      if (!HIDWORD(v150))
        goto LABEL_61;
      goto LABEL_59;
    }
    __break(0xC471u);
LABEL_147:
    JUMPOUT(0x197C986C0);
  }
  v65 = v40;
  JSC::JITGetByIdGenerator::generateDFGDataICFastPath((uint64_t)&v153, a1, v40, v16, v136, a6, v133, v54);
  v66 = HIDWORD(v150);
  v145 = (WTF *)v148;
  v146 = 2;
  v147 = HIDWORD(v150);
  if (HIDWORD(v150) < 3)
  {
    v68 = v148;
    if (!HIDWORD(v150))
      goto LABEL_89;
    goto LABEL_87;
  }
  if (HIDWORD(v150) >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197C986D8);
  }
  v67 = 12 * HIDWORD(v150);
  v68 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v150)));
  v146 = (v67 & 0xFFFFFFFC) / 0xC;
  v145 = (WTF *)v68;
  v66 = HIDWORD(v150);
  if (HIDWORD(v150))
  {
LABEL_87:
    v93 = v149;
    v94 = (WTF *)((char *)v149 + 12 * v66);
    do
    {
      *(_DWORD *)v68 = *(_DWORD *)v93;
      *(_QWORD *)(v68 + 4) = *(_QWORD *)((char *)v93 + 4);
      v93 = (WTF *)((char *)v93 + 12);
      v68 += 12;
    }
    while (v93 != v94);
  }
LABEL_89:
  v10 = WTF::fastMalloc((WTF *)0xB8);
  v95 = v147;
  v172 = v175;
  v173 = 2;
  v174 = v147;
  if (v147 < 3)
  {
    v96 = v175;
    if (!v147)
      goto LABEL_95;
  }
  else
  {
    if (v147 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C986E0);
    }
    v96 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v147));
    v173 = 12 * v147 / 0xC;
    v172 = v96;
    v95 = v147;
  }
  v97 = v145;
  v98 = (WTF *)((char *)v145 + 12 * v95);
  do
  {
    *(_DWORD *)v96 = *(_DWORD *)v97;
    *(_QWORD *)(v96 + 4) = *(_QWORD *)((char *)v97 + 4);
    v97 = (WTF *)((char *)v97 + 12);
    v96 += 12;
  }
  while (v97 != v98);
LABEL_95:
  v99 = v174;
  *(_QWORD *)&v163 = v164;
  DWORD2(v163) = 2;
  HIDWORD(v163) = v174;
  if (v174 < 3)
  {
    v101 = v164;
  }
  else
  {
    if (v174 >= 0x15555556)
    {
      __break(0xC471u);
      goto LABEL_147;
    }
    v100 = 12 * v174;
    v101 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v174));
    DWORD2(v163) = (v100 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)&v163 = v101;
    v99 = v174;
  }
  if (v99)
  {
    v102 = v172;
    v103 = &v172[12 * v99];
    do
    {
      *(_DWORD *)v101 = *(_DWORD *)v102;
      *(_QWORD *)(v101 + 4) = *(_QWORD *)(v102 + 4);
      v102 += 12;
      v101 += 12;
    }
    while (v102 != v103);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v10, (uint64_t *)&v163, (_DWORD *)a1, 1, 0, v136);
  v104 = v163;
  if (v164 != (_BYTE *)v163 && (_QWORD)v163 != 0)
  {
    *(_QWORD *)&v163 = 0;
    DWORD2(v163) = 0;
    WTF::fastFree(v104, v86, v87, v18, v19, v20, v21, v22);
  }
  *(_QWORD *)v10 = &off_1E3574C68;
  *(_BYTE *)(v10 + 152) = a6;
  *(_QWORD *)(v10 + 156) = a6 | 0x3000000000;
  *(_QWORD *)(v10 + 168) = operationGetByIdWithThisOptimize;
  *(_BYTE *)(v10 + 176) = v16;
  *(_BYTE *)(v10 + 177) = v137;
  *(_BYTE *)(v10 + 178) = a6;
  *(_DWORD *)(v10 + 180) = v65;
  v106 = (unint64_t)v172;
  if (v175 != v172 && v172)
  {
    v172 = 0;
    v173 = 0;
    WTF::fastFree(v106, v86, v87, v18, v19, v20, v21, v22);
  }
  v91 = v145;
  if (v148 != (_BYTE *)v145 && v145)
  {
    v92 = &v146;
    v145 = 0;
    goto LABEL_113;
  }
LABEL_114:
  v17 = (_QWORD *)(a1 + 712);
  v163 = v153;
  v164[0] = v154;
  v107 = v155;
  v108 = v156;
  v165 = v155;
  v166 = v156;
  v109 = HIDWORD(v156);
  v110 = v157;
  v167 = v157;
  v111 = HIDWORD(v157);
  v112 = v158;
  v168 = v158;
  v113 = v159;
  v169 = v159;
  v114 = v160;
  v170 = v160;
  v171 = v10;
  v27 = *(unsigned int *)(a1 + 724);
  if ((_DWORD)v27 != *(_DWORD *)(a1 + 720))
  {
    v115 = v153;
    v116 = *v17 + (v27 << 6);
    *(_BYTE *)(v116 + 16) = v154;
    *(_OWORD *)v116 = v115;
    *(_DWORD *)(v116 + 20) = v107;
    *(_DWORD *)(v116 + 24) = v108;
    *(_DWORD *)(v116 + 28) = v109;
    *(_DWORD *)(v116 + 32) = v110;
    *(_DWORD *)(v116 + 36) = v111;
    *(_WORD *)(v116 + 40) = v112;
    *(_DWORD *)(v116 + 44) = v113;
    *(_QWORD *)(v116 + 48) = v114;
    *(_QWORD *)(v116 + 56) = v10;
    goto LABEL_116;
  }
LABEL_126:
  v123 = WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByIdWithThisGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v27 + 1, (unint64_t)&v163, v18, v19, v20, v21, v22);
  v124 = *(_QWORD *)(a1 + 712) + ((unint64_t)*(unsigned int *)(a1 + 724) << 6);
  v125 = *(_OWORD *)v123;
  *(_BYTE *)(v124 + 16) = *(_BYTE *)(v123 + 16);
  *(_OWORD *)v124 = v125;
  *(_DWORD *)(v124 + 20) = *(_DWORD *)(v123 + 20);
  *(_DWORD *)(v124 + 24) = *(_DWORD *)(v123 + 24);
  *(_DWORD *)(v124 + 28) = *(_DWORD *)(v123 + 28);
  *(_QWORD *)(v124 + 32) = *(_QWORD *)(v123 + 32);
  *(_WORD *)(v124 + 40) = *(_WORD *)(v123 + 40);
  *(_DWORD *)(v124 + 44) = *(_DWORD *)(v123 + 44);
  *(_QWORD *)(v124 + 48) = *(_QWORD *)(v123 + 48);
  *(_QWORD *)(v124 + 56) = *(_QWORD *)(v123 + 56);
LABEL_116:
  ++*(_DWORD *)(a1 + 724);
  v138 = v10;
  v117 = (_QWORD *)(a1 + 5656);
  v118 = *(unsigned int *)(a1 + 5668);
  if ((_DWORD)v118 == *(_DWORD *)(a1 + 5664))
  {
    v120 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v117, v118 + 1, (unint64_t)&v138);
    v118 = *(unsigned int *)(a1 + 5668);
    v119 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v118);
    v10 = *v120;
  }
  else
  {
    v119 = (uint64_t *)(*v117 + 8 * v118);
    v120 = &v138;
  }
  *v120 = 0;
  *v119 = v10;
  *(_DWORD *)(a1 + 5668) = v118 + 1;
  v121 = v138;
  v138 = 0;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = v149;
  if (v12 != v149)
  {
    if (v149)
    {
      v149 = 0;
      LODWORD(v150) = 0;
      WTF::fastFree((unint64_t)v122, v86, v87, v18, v19, v20, v21, v22);
    }
  }
}

void JSC::DFG::SpeculativeJIT::nonSpeculativeNonPeepholeCompareNullOrUndefined(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::JSValueOperand *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  _DWORD *v56;
  uint64_t *v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  JSC::DFG::Node *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  WTF *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int8x8_t v121;
  JSC::DFG::Node *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int v129;
  _DWORD *v130;
  uint64_t *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  int v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  char v165;
  int *v166;
  int *v167;
  int v168;
  char *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int *v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int *v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  JSC::AssemblerBuffer *v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  int v194;
  int v195;
  char v196;
  __int16 v197;
  char v198;
  int v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  _BYTE v203[12];
  uint64_t v204;
  char v205;
  uint64_t v206;
  unsigned __int8 v207;
  int v208;
  uint64_t v209;
  WTF *v210;
  uint64_t v211;
  _BYTE v212[24];
  uint64_t v213;
  unsigned __int8 v214;
  _QWORD v215[2];
  char v216;

  v10 = (JSC::DFG::JSValueOperand *)JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v215, (JSC::DFG::SpeculativeJIT *)a1, a2, a4, a5, a6, a7, a8);
  v18 = JSC::DFG::JSValueOperand::gpr(v10, v11, v12, v13, v14, v15, v16, v17);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v213, (JSC::DFG::SpeculativeJIT *)a1, v19, v20, v21, v22, v23, v24);
  v32 = v214;
  v33 = (char)v214;
  v34 = v214 & 0x1F | 0x52800000;
  v190 = (JSC::AssemblerBuffer *)(a1 + 56);
  v35 = *(_DWORD *)(a1 + 200);
  if (v35 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v190, v25, v26, v27, v28, v29, v30, v31);
    v35 = *(_DWORD *)(a1 + 200);
  }
  v191 = v32;
  v36 = v32 & 0x1F;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v35) = v34;
  *(_DWORD *)(a1 + 200) += 4;
  v210 = (WTF *)v212;
  v211 = 2;
  v193 = v18;
  v192 = v36;
  if (JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), v26, v27, v28, v29, v30, v31))
  {
    v44 = *(_QWORD *)(a1 + 5504);
    v45 = a2 & 0xFF00FFFFFFFFFFFELL;
    v46 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v47 = a2 & 1;
    v48 = (uint64_t *)(v44 + 24);
    v49 = (uint64_t *)(v44 + 8);
    if ((a2 & 1) != 0)
      v49 = v48;
    v50 = *v49;
    v51 = *v49 + 32 * v46;
    v52 = *(_DWORD *)(a1 + 5584);
    v53 = *(_DWORD *)(v51 + 20);
    if (v52 != v53)
    {
      if ((*(_QWORD *)(v51 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v53 ^ v52) >= 2)
        {
          v134 = *(_QWORD *)v51;
          if (*(_QWORD *)v51 != 4)
          {
            *(_QWORD *)v51 = v134 | 2;
            v179 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v134 & 1) != 0)
            {
              v186 = 2 * *v179;
              while (v186 * 4)
              {
                v187 = *(_QWORD *)&v179[v186];
                if ((*(_BYTE *)(v187 + 19) & 0xC) == 0)
                {
                  v188 = *(_QWORD *)(v187 + 96);
                  v189 = (v188 & 1) != 0 ? (v188 >> 1) & 3 : *(unsigned __int8 *)(v188 + 4);
                  v186 -= 2;
                  if (v189 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v179, (void *)v37, v38, v39, v40, v41, v42, v43);
                goto LABEL_125;
              }
            }
            else if (v179)
            {
              if ((*((_BYTE *)v179 + 19) & 0xC) != 0
                || ((v180 = *((_QWORD *)v179 + 12), (v180 & 1) != 0)
                  ? (v181 = (v180 >> 1) & 3)
                  : (v181 = *(unsigned __int8 *)(v180 + 4)),
                    v181 == 2))
              {
LABEL_125:
                *(_QWORD *)v51 = 4;
              }
            }
          }
          *(_DWORD *)(v50 + 32 * v46 + 16) = -21020677;
        }
        if ((v52 & 1) != 0)
          *(_QWORD *)v51 &= ~2uLL;
      }
      *(_DWORD *)(v51 + 20) = v52;
    }
    if ((*(_QWORD *)(v51 + 8) & 0x2800FFFFFFF7) != 0)
    {
      JSC::MacroAssemblerARM64::branchTest64(a1, 0, v193, 28, v40, v41, v42, v43, (uint64_t)&v208);
      v54 = v208;
      if (v208 != -1)
      {
        v55 = HIDWORD(v211);
        if (HIDWORD(v211) == (_DWORD)v211)
        {
          v56 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v210, (void *)(HIDWORD(v211) + 1), (unint64_t)&v208, v39, v40, v41, v42, v43);
          v58 = *v56;
          v57 = (uint64_t *)(v56 + 1);
          v54 = v58;
          v55 = HIDWORD(v211);
        }
        else
        {
          v57 = &v209;
        }
        v59 = (char *)v210 + 12 * v55;
        *(_DWORD *)v59 = v54;
        *(_QWORD *)(v59 + 4) = *v57;
        ++HIDWORD(v211);
      }
    }
  }
  else
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v206, (JSC::DFG::SpeculativeJIT *)a1, v38, v39, v40, v41, v42, v43);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v204, (JSC::DFG::SpeculativeJIT *)a1, v100, v101, v102, v103, v104, v105);
    *(_QWORD *)v203 = 0xFFFFFFFFLL;
    *(_DWORD *)&v203[8] = -16773311;
    v112 = *(_QWORD *)(a1 + 5504);
    v113 = (_QWORD *)(v112 + 24);
    v114 = (_QWORD *)(v112 + 8);
    if ((a2 & 1) != 0)
      v114 = v113;
    v115 = *v114 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v116 = (void *)*(unsigned int *)(a1 + 5584);
    if ((_DWORD)v116 != *(_DWORD *)(v115 + 20))
    {
      if ((*(_QWORD *)(v115 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v115, v116, v106, v107, v108, v109, v110, v111);
      else
        *(_DWORD *)(v115 + 20) = (_DWORD)v116;
    }
    if ((*(_QWORD *)(v115 + 8) & 0xFFFFD7FF00000008) != 0)
    {
      JSC::AssemblyHelpers::branchIfNotCell(a1, v18, 1, v107, v108, v109, v110, v111, (uint64_t)&v201);
      *(_DWORD *)v203 = v201;
      *(_QWORD *)&v203[4] = v202;
    }
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      goto LABEL_165;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, v18 | 0x600000000, *(char *)(a1 + 304), v107, v108, v109, v110, v111);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 0, 17, v117, v118, v119, v120, (uint64_t)&v201, v121);
    v128 = v201;
    v199 = v201;
    v200 = v202;
    if (v201 != -1)
    {
      v129 = HIDWORD(v211);
      if (HIDWORD(v211) == (_DWORD)v211)
      {
        v130 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v210, (void *)(HIDWORD(v211) + 1), (unint64_t)&v199, v123, v124, v125, v126, v127);
        v132 = *v130;
        v131 = (uint64_t *)(v130 + 1);
        v128 = v132;
        v129 = HIDWORD(v211);
      }
      else
      {
        v131 = &v200;
      }
      v135 = (char *)v210 + 12 * v129;
      *(_DWORD *)v135 = v128;
      *(_QWORD *)(v135 + 4) = *v131;
      ++HIDWORD(v211);
    }
    v136 = v207;
    v137 = v205;
    v138 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, *(JSC::DFG::JITCompiler **)(a1 + 3976), v122, v123, v124, v125, v126, v127);
    if ((_DWORD)v138 == -1)
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v139, (char)v136, v140, v141, v142, v143, v144);
    else
      JSC::MacroAssemblerARM64::load64(a1, (v138 << 35) + 0x380000001ALL, (char)v136, v140, v141, v142, v143, v144);
    JSC::MacroAssemblerARM64::load32(a1, v18, v33, v145, v146, v147, v148, v149);
    v157 = *(_DWORD *)(a1 + 200);
    if (v157 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v190, v150, v151, v152, v153, v154, v155, v156);
      v157 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v157) = v36 | (32 * v36) | 0xD37CEC00;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::load64(a1, v191 | 0x2800000000, v137, v152, v153, v154, v155, v156);
    v159 = (v137 & 0x1F) << 16;
    if (v136 == 31)
    {
      JSC::AssemblerBuffer::putInt(v190, v159 | 0xEB2063FF, v38, v39, v40, v41, v42, v43);
      v162 = *(_DWORD *)(a1 + 200);
    }
    else
    {
      v160 = v159 | (32 * (v136 & 0x1F)) | 0xEB00001F;
      v161 = *(_DWORD *)(a1 + 200);
      if (v161 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v190, v158, v38, v39, v40, v41, v42, v43);
        v161 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v161) = v160;
      v162 = *(_DWORD *)(a1 + 200) + 4;
      *(_DWORD *)(a1 + 200) = v162;
    }
    if (v162 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v190, v158, v38, v39, v40, v41, v42, v43);
      v162 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v162) = v191 | 0x1A9F17E0;
    v163 = *(_DWORD *)(a1 + 200) + 4;
    for (*(_DWORD *)(a1 + 200) = v163; v163 < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = v163)
    {
      if ((v163 + 4) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v190, v158, v38, v39, v40, v41, v42, v43);
        v163 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v163) = -721215457;
      v163 = *(_DWORD *)(a1 + 200) + 4;
    }
    v164 = v163;
    if ((v163 + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v190, v158, v38, v39, v40, v41, v42, v43);
      v164 = *(_DWORD *)(a1 + 200);
    }
    v47 = a2 & 1;
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v164) = 335544320;
    *(_DWORD *)(a1 + 200) += 4;
    if (*(_BYTE *)(a1 + 328))
      v165 = 69;
    else
      v165 = 65;
    v194 = v163;
    v195 = 0;
    v196 = v165;
    v197 = 15;
    v198 = -1;
    if (v163 != -1)
    {
      if (HIDWORD(v211) == (_DWORD)v211)
      {
        v166 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v210, (void *)(HIDWORD(v211) + 1), (unint64_t)&v194, v39, v40, v41, v42, v43);
        v168 = *v166;
        v167 = v166 + 1;
        v169 = (char *)v210 + 12 * HIDWORD(v211);
        *(_DWORD *)v169 = v168;
      }
      else
      {
        v167 = &v195;
        v169 = (char *)v210 + 12 * HIDWORD(v211);
        *(_DWORD *)v169 = v163;
      }
      *(_QWORD *)(v169 + 4) = *(_QWORD *)v167;
      ++HIDWORD(v211);
    }
    v170 = *(_QWORD *)(a1 + 5504);
    v45 = a2 & 0xFF00FFFFFFFFFFFELL;
    v171 = (_QWORD *)(v170 + 24);
    v172 = (_QWORD *)(v170 + 8);
    if ((a2 & 1) != 0)
      v172 = v171;
    v173 = *v172 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v37 = *(unsigned int *)(a1 + 5584);
    if ((_DWORD)v37 != *(_DWORD *)(v173 + 20))
    {
      if ((*(_QWORD *)(v173 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v173, (void *)v37, v38, v39, v40, v41, v42, v43);
      else
        *(_DWORD *)(v173 + 20) = v37;
    }
    if ((*(_QWORD *)(v173 + 8) & 0xFFFFD7FF00000008) != 0)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v203, a1, v38, v39, v40, v41, v42, v43);
    if (v204)
    {
      v174 = v205;
      if (v205 != -1)
      {
        if (v205 > 15)
          v174 = -1;
        --*(_DWORD *)(v204 + 12 * v174 + 4784);
      }
    }
    if (v206)
    {
      v175 = (char)v207;
      if ((char)v207 != -1)
      {
        if ((char)v207 > 15)
          v175 = -1;
        --*(_DWORD *)(v206 + 12 * v175 + 4784);
      }
    }
  }
  v60 = *(_QWORD *)(a1 + 5504);
  v61 = *(unsigned int *)(v45 + 20);
  v62 = (uint64_t *)(v60 + 24);
  v63 = (uint64_t *)(v60 + 8);
  if (v47)
    v63 = v62;
  v64 = *v63;
  v65 = *v63 + 32 * v61;
  v66 = *(_DWORD *)(a1 + 5584);
  v67 = *(_DWORD *)(v65 + 20);
  if (v66 != v67)
  {
    if ((*(_QWORD *)(v65 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v67 ^ v66) >= 2)
      {
        v133 = *(_QWORD *)v65;
        if (*(_QWORD *)v65 != 4)
        {
          *(_QWORD *)v65 = v133 | 2;
          v176 = (unsigned int *)(v133 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v133 & 1) != 0)
          {
            v182 = 2 * *v176;
            while (v182 * 4)
            {
              v183 = *(_QWORD *)&v176[v182];
              if ((*(_BYTE *)(v183 + 19) & 0xC) == 0)
              {
                v184 = *(_QWORD *)(v183 + 96);
                v185 = (v184 & 1) != 0 ? (v184 >> 1) & 3 : *(unsigned __int8 *)(v184 + 4);
                v182 -= 2;
                if (v185 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v176, (void *)v37, v38, v39, v40, v41, v42, v43);
              goto LABEL_118;
            }
          }
          else if (v176)
          {
            if ((*((_BYTE *)v176 + 19) & 0xC) != 0
              || ((v177 = *((_QWORD *)v176 + 12), (v177 & 1) != 0)
                ? (v178 = (v177 >> 1) & 3)
                : (v178 = *(unsigned __int8 *)(v177 + 4)),
                  v178 == 2))
            {
LABEL_118:
              *(_QWORD *)v65 = 4;
            }
          }
        }
        *(_DWORD *)(v64 + 32 * v61 + 16) = -21020677;
      }
      if ((v66 & 1) != 0)
        *(_QWORD *)v65 &= ~2uLL;
    }
    *(_DWORD *)(v65 + 20) = v66;
  }
  if ((*(_BYTE *)(v65 + 13) & 2) != 0)
  {
    if ((_DWORD)v193 == (_DWORD)v33)
    {
LABEL_25:
      JSC::MacroAssemblerARM64::and64(a1, -9, v33, v33);
      v71 = *(_DWORD *)(a1 + 200);
      if (v71 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v190, v70, v38, v39, v40, v41, v42, v43);
        v71 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v71) = (32 * v33) | 0xF100081F;
      v72 = *(_DWORD *)(a1 + 200);
      v73 = v72 + 4;
      *(_DWORD *)(a1 + 200) = v72 + 4;
      if ((v72 + 8) > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v190, v70, v38, v39, v40, v41, v42, v43);
        v73 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v73) = v192 | 0x1A9F17E0;
      *(_DWORD *)(a1 + 200) += 4;
      goto LABEL_30;
    }
    if ((_DWORD)v193 == 63)
    {
      v68 = *(_DWORD *)(a1 + 200);
      if ((_DWORD)v33 != 31)
      {
        v69 = v192 | 0xD2800000;
        goto LABEL_22;
      }
    }
    else
    {
      v68 = *(_DWORD *)(a1 + 200);
      if ((_DWORD)v193 != 31 && (_DWORD)v33 != 31)
      {
        v69 = v191 & 0xFFE0FFFF | ((v193 & 0x1F) << 16) | 0xAA0003E0;
LABEL_22:
        if (v68 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v190, v37, v38, v39, v40, v41, v42, v43);
          v68 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v68) = v69;
        *(_DWORD *)(a1 + 200) += 4;
        goto LABEL_25;
      }
    }
    v69 = v33 | (32 * v193) | 0x91000000;
    goto LABEL_22;
  }
LABEL_30:
  if (HIDWORD(v211))
  {
    v74 = 0;
    v75 = 0;
    v76 = 12 * HIDWORD(v211);
    do
    {
      if (v75 >= HIDWORD(v211))
      {
        __break(0xC471u);
        JUMPOUT(0x197C99288);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v210 + v74), a1, v38, v39, v40, v41, v42, v43);
      ++v75;
      v74 += 12;
    }
    while (v76 != v74);
  }
  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v33, v33);
  v77 = *(JSC::DFG::Node **)(a1 + 3976);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, v77, v78, v79, v80, v81, v82, v83);
  if ((int)v33 > 15)
    v91 = -1;
  else
    v91 = v33;
  v92 = a1 + 12 * v91;
  v93 = *((_DWORD *)v77 + 12);
  *(_DWORD *)(v92 + 4776) = v93;
  *(_DWORD *)(v92 + 4780) = 4;
  v94 = ~v93;
  if (v94 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
LABEL_165:
    JUMPOUT(0x197C991BCLL);
  }
  v95 = *(_QWORD *)(a1 + 3992) + 24 * (int)v94;
  v96 = *((_DWORD *)v77 + 13);
  *(_QWORD *)v95 = v77;
  *(_DWORD *)(v95 + 8) = v96;
  *(_BYTE *)(v95 + 17) = v33;
  *(_DWORD *)(v95 + 12) = 21;
  *(_BYTE *)(v95 + 16) = 0;
  v97 = v210;
  if (v212 != (_BYTE *)v210 && v210)
  {
    v210 = 0;
    LODWORD(v211) = 0;
    WTF::fastFree((unint64_t)v97, v84, v85, v86, v87, v88, v89, v90);
  }
  if (v213)
  {
    v98 = (char)v214;
    if ((char)v214 != -1)
    {
      if ((char)v214 > 15)
        v98 = -1;
      --*(_DWORD *)(v213 + 12 * v98 + 4784);
    }
  }
  if ((v215[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v99 = v216;
    if (v216 > 15)
      v99 = -1;
    --*(_DWORD *)(v215[0] + 12 * v99 + 4784);
  }
}

uint64_t JSC::DFG::JSValueOperand::gpr(JSC::DFG::JSValueOperand *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _DWORD *v39;
  uint64_t v40;
  unsigned int v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  _BYTE *v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t *v72;
  unsigned int v73;
  uint64_t *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  unint64_t v91;
  _BYTE v92[14];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v8 = *((unsigned __int8 *)this + 16);
  if (v8 == 255)
  {
    v10 = *(_QWORD *)this;
    v11 = *((_QWORD *)this + 1) & 0xFF00FFFFFFFFFFFFLL;
    v12 = *(unsigned int *)(v11 + 0x30);
    v13 = ~(_DWORD)v12;
    if (v13 >= *(unsigned int *)(*(_QWORD *)this + 4004))
    {
      __break(0xC471u);
      JUMPOUT(0x197C99BB0);
    }
    v14 = *(_QWORD *)(v10 + 3992);
    v15 = (_BYTE *)(v14 + 24 * (int)v13);
    v16 = v15 + 12;
    switch(v15[12])
    {
      case 0:
        v19 = v10 + 4776;
        if (*(_DWORD *)(v10 + 4784))
        {
          v20 = -1;
          v21 = 16;
        }
        else
        {
          v20 = *(_DWORD *)(v10 + 4780);
          if (v20 == -1)
          {
            v21 = 0;
            v22 = (_DWORD *)(v10 + 4784);
LABEL_13:
            v23 = 12 * v21;
            v24 = *(_DWORD *)(v19 + v23);
            *(_QWORD *)(v19 + v23) = 0xFFFFFFFF3FFFFFFFLL;
            goto LABEL_14;
          }
          v21 = 0;
        }
        if (!*(_DWORD *)(v10 + 4796))
        {
          v48 = *(_DWORD *)(v10 + 4792);
          if (v48 == -1)
          {
            v22 = (_DWORD *)(v10 + 4796);
            v21 = 1;
            goto LABEL_13;
          }
          if (v48 < v20)
            v21 = 1;
          else
            v21 = v21;
          if (v48 < v20)
            v20 = *(_DWORD *)(v10 + 4792);
        }
        if (!*(_DWORD *)(v10 + 4808))
        {
          v49 = *(_DWORD *)(v10 + 4804);
          if (v49 == -1)
          {
            v22 = (_DWORD *)(v10 + 4808);
            v21 = 2;
            goto LABEL_13;
          }
          if (v49 >= v20)
            v21 = v21;
          else
            v21 = 2;
          if (v49 < v20)
            v20 = *(_DWORD *)(v10 + 4804);
        }
        if (!*(_DWORD *)(v10 + 4820))
        {
          v50 = *(_DWORD *)(v10 + 4816);
          if (v50 == -1)
          {
            v22 = (_DWORD *)(v10 + 4820);
            v21 = 3;
            goto LABEL_13;
          }
          if (v50 >= v20)
            v21 = v21;
          else
            v21 = 3;
          if (v50 < v20)
            v20 = *(_DWORD *)(v10 + 4816);
        }
        if (!*(_DWORD *)(v10 + 4832))
        {
          v63 = *(_DWORD *)(v10 + 4828);
          if (v63 == -1)
          {
            v22 = (_DWORD *)(v10 + 4832);
            v21 = 4;
            goto LABEL_13;
          }
          if (v63 >= v20)
            v21 = v21;
          else
            v21 = 4;
          if (v63 < v20)
            v20 = *(_DWORD *)(v10 + 4828);
        }
        if (!*(_DWORD *)(v10 + 4844))
        {
          v64 = *(_DWORD *)(v10 + 4840);
          if (v64 == -1)
          {
            v22 = (_DWORD *)(v10 + 4844);
            v21 = 5;
            goto LABEL_13;
          }
          if (v64 >= v20)
            v21 = v21;
          else
            v21 = 5;
          if (v64 < v20)
            v20 = *(_DWORD *)(v10 + 4840);
        }
        if (!*(_DWORD *)(v10 + 4856))
        {
          v65 = *(_DWORD *)(v10 + 4852);
          if (v65 == -1)
          {
            v22 = (_DWORD *)(v10 + 4856);
            v21 = 6;
            goto LABEL_13;
          }
          if (v65 >= v20)
            v21 = v21;
          else
            v21 = 6;
          if (v65 < v20)
            v20 = *(_DWORD *)(v10 + 4852);
        }
        if (!*(_DWORD *)(v10 + 4868))
        {
          v66 = *(_DWORD *)(v10 + 4864);
          if (v66 == -1)
          {
            v22 = (_DWORD *)(v10 + 4868);
            v21 = 7;
            goto LABEL_13;
          }
          if (v66 >= v20)
            v21 = v21;
          else
            v21 = 7;
          if (v66 < v20)
            v20 = *(_DWORD *)(v10 + 4864);
        }
        if (!*(_DWORD *)(v10 + 4880))
        {
          v71 = *(_DWORD *)(v10 + 4876);
          if (v71 == -1)
          {
            v22 = (_DWORD *)(v10 + 4880);
            v21 = 8;
            goto LABEL_13;
          }
          if (v71 >= v20)
            v21 = v21;
          else
            v21 = 8;
          if (v71 < v20)
            v20 = *(_DWORD *)(v10 + 4876);
        }
        if (!*(_DWORD *)(v10 + 4892))
        {
          v73 = *(_DWORD *)(v10 + 4888);
          if (v73 == -1)
          {
            v22 = (_DWORD *)(v10 + 4892);
            v21 = 9;
            goto LABEL_13;
          }
          if (v73 >= v20)
            v21 = v21;
          else
            v21 = 9;
          if (v73 < v20)
            v20 = *(_DWORD *)(v10 + 4888);
        }
        if (!*(_DWORD *)(v10 + 4904))
        {
          v75 = *(_DWORD *)(v10 + 4900);
          if (v75 == -1)
          {
            v22 = (_DWORD *)(v10 + 4904);
            v21 = 10;
            goto LABEL_13;
          }
          if (v75 >= v20)
            v21 = v21;
          else
            v21 = 10;
          if (v75 < v20)
            v20 = *(_DWORD *)(v10 + 4900);
        }
        if (!*(_DWORD *)(v10 + 4916))
        {
          v76 = *(_DWORD *)(v10 + 4912);
          if (v76 == -1)
          {
            v22 = (_DWORD *)(v10 + 4916);
            v21 = 11;
            goto LABEL_13;
          }
          if (v76 >= v20)
            v21 = v21;
          else
            v21 = 11;
          if (v76 < v20)
            v20 = *(_DWORD *)(v10 + 4912);
        }
        if (!*(_DWORD *)(v10 + 4928))
        {
          v77 = *(_DWORD *)(v10 + 4924);
          if (v77 == -1)
          {
            v22 = (_DWORD *)(v10 + 4928);
            v21 = 12;
            goto LABEL_13;
          }
          if (v77 >= v20)
            v21 = v21;
          else
            v21 = 12;
          if (v77 < v20)
            v20 = *(_DWORD *)(v10 + 4924);
        }
        if (!*(_DWORD *)(v10 + 4940))
        {
          v78 = *(_DWORD *)(v10 + 4936);
          if (v78 == -1)
          {
            v22 = (_DWORD *)(v10 + 4940);
            v21 = 13;
            goto LABEL_13;
          }
          if (v78 >= v20)
            v21 = v21;
          else
            v21 = 13;
          if (v78 < v20)
            v20 = *(_DWORD *)(v10 + 4936);
        }
        if (!*(_DWORD *)(v10 + 4952))
        {
          v88 = *(_DWORD *)(v10 + 4948);
          if (v88 == -1)
          {
            v22 = (_DWORD *)(v10 + 4952);
            v21 = 14;
            goto LABEL_13;
          }
          if (v88 >= v20)
            v21 = v21;
          else
            v21 = 14;
          if (v88 < v20)
            v20 = *(_DWORD *)(v10 + 4948);
        }
        if (!*(_DWORD *)(v10 + 4964))
        {
          v89 = *(_DWORD *)(v10 + 4960);
          if (v89 == -1)
          {
            v22 = (_DWORD *)(v10 + 4964);
            v21 = 15;
            goto LABEL_13;
          }
          if (v89 >= v20)
            v21 = v21;
          else
            v21 = 15;
        }
        v90 = (unsigned int *)(v19 + 12 * v21);
        v24 = *v90;
        *(_QWORD *)v90 = 0xFFFFFFFF3FFFFFFFLL;
        v22 = v90 + 2;
LABEL_14:
        *v22 = 1;
        if (v24 != 0x3FFFFFFF)
        {
          v91 = v11;
          JSC::DFG::SpeculativeJIT::spill(v10, v24, a3, a4, a5, a6, a7, a8);
          v11 = v91;
        }
        v25 = *(unsigned __int16 *)(v11 + 18);
        if (v25 > 0xB5)
        {
          if (v25 == 182)
            goto LABEL_18;
          if (v25 == 355 || v25 == 348)
          {
            v26 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
            {
              JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
              LODWORD(qword_1EE342DB8) = 0;
            }
            goto LABEL_19;
          }
        }
        else if (v25 < 3)
        {
LABEL_18:
          v26 = *(uint64_t **)(v11 + 72);
LABEL_19:
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, *v26, v21, a4, a5, a6, a7, a8);
          *v16 = 16;
          v32 = v14 + 24 * (int)v13;
          *(_BYTE *)(v32 + 17) = v21;
          if (*(_BYTE *)(v32 + 15))
          {
            if (*(_DWORD *)(*(_QWORD *)v15 + 20) >= 0xFFFFFFFE)
            {
              __break(0xC471u);
              JUMPOUT(0x197C99A70);
            }
            v33 = (_QWORD *)(v10 + 5632);
            *(_DWORD *)v92 = *(_DWORD *)(*(_QWORD *)v15 + 20);
            *(_DWORD *)&v92[4] = v21 | 0x3FFFFF00;
            *(_WORD *)&v92[12] = 4100;
            *(_DWORD *)&v92[8] = 0;
            v34 = *(unsigned int *)(v10 + 5644);
            if ((_DWORD)v34 == *(_DWORD *)(v10 + 5640))
            {
              v72 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v33, v34 + 1, (unint64_t)v92, v27, v28, v29, v30, v31);
              v35 = (_QWORD *)(*(_QWORD *)(v10 + 5632) + 14 * *(unsigned int *)(v10 + 5644));
              v36 = *v72;
              v37 = *(uint64_t *)((char *)v72 + 6);
            }
            else
            {
              v35 = (_QWORD *)(*v33 + 14 * v34);
              v36 = *(_QWORD *)v92;
              v37 = *(_QWORD *)&v92[6];
            }
            *(_QWORD *)((char *)v35 + 6) = v37;
            *v35 = v36;
            ++*(_DWORD *)(v10 + 5644);
          }
          if (v21 > 0xF)
            v38 = -1;
          else
            v38 = v21;
          v39 = (_DWORD *)(v19 + 12 * v38);
          *v39 = v12;
          v39[1] = 1;
          goto LABEL_37;
        }
        v40 = *(unsigned __int8 *)(v14 + 24 * (int)v13 + 13);
        if (v21 > 0xF)
          v41 = -1;
        else
          v41 = v21;
        v42 = (_DWORD *)(v19 + 12 * v41);
        *v42 = v12;
        v42[1] = 2;
        v43 = (v12 << 35) | 0x1D;
        if (v40 == 1)
        {
          JSC::MacroAssemblerARM64::load32(v10, v43, v21, a4, a5, a6, a7, a8);
          v70 = *(_DWORD *)(v10 + 200);
          if (v70 + 4 > *(_DWORD *)(v10 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), v67, v68, v69, v44, v45, v46, v47);
            v70 = *(_DWORD *)(v10 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v10 + 56) + v70) = v21 | (32 * v21) | 0xAA1B0000;
          *(_DWORD *)(v10 + 200) += 4;
          v40 = 17;
        }
        else
        {
          JSC::MacroAssemblerARM64::load64(v10, v43, v21, a4, a5, a6, a7, a8);
          if ((v40 & 0x10) == 0)
          {
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 3960), *(JSC::DFG::Node **)(v10 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x6A, "GPRReg JSC::DFG::SpeculativeJIT::fillJSValue(Edge)", "spillFormat & DataFormatJS");
            __break(0xC471u);
            JUMPOUT(0x197C99BE4);
          }
        }
        JSC::DFG::GenerationInfo::fillJSValue((uint64_t)v15, v10 + 5632, v21, v40, v44, v45, v46, v47);
LABEL_37:
        LOBYTE(v8) = v21;
LABEL_8:
        *((_BYTE *)this + 16) = v8;
        break;
      case 1:
        v51 = v14 + 24 * (int)v13;
        v53 = *(char *)(v51 + 17);
        v52 = (_BYTE *)(v51 + 17);
        v8 = v53;
        if (v53 > 15)
          v54 = -1;
        else
          v54 = v8;
        v55 = v10 + 12 * v54;
        if (*(_DWORD *)(v55 + 4784))
        {
          v86 = JSC::DFG::SpeculativeJIT::allocate(*(JSC::DFG::SpeculativeJIT **)this, a2, a3, a4, a5, a6, a7, a8);
          v87 = *(_DWORD *)(v10 + 200);
          if (v87 + 4 > *(_DWORD *)(v10 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), v79, v80, v81, v82, v83, v84, v85);
            v87 = *(_DWORD *)(v10 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v10 + 56) + v87) = v86 & 0x1F | ((v8 & 0x1F) << 16) | 0xAA000360;
          *(_DWORD *)(v10 + 200) += 4;
          LOBYTE(v8) = v86;
        }
        else
        {
          v56 = v8;
          *(_DWORD *)(v55 + 4784) = 1;
          v57 = *(_DWORD *)(v10 + 200);
          if (v57 + 4 > *(_DWORD *)(v10 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v10 + 56), a2, a3, a4, a5, a6, a7, a8);
            v56 = v8;
            v57 = *(_DWORD *)(v10 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v10 + 56) + v57) = v56 & 0x1F | (32 * (v56 & 0x1F)) | 0xAA1B0000;
          *(_DWORD *)(v10 + 200) += 4;
          *v16 = 17;
          *v52 = v8;
          if (*(_BYTE *)(v14 + 24 * (int)v13 + 15))
          {
            if (*(_DWORD *)(*(_QWORD *)v15 + 20) >= 0xFFFFFFFE)
            {
              __break(0xC471u);
              JUMPOUT(0x197C99AB4);
            }
            v58 = (_QWORD *)(v10 + 5632);
            *(_DWORD *)v92 = *(_DWORD *)(*(_QWORD *)v15 + 20);
            *(_QWORD *)&v92[4] = v8 | 0x3FFFFF00;
            *(_WORD *)&v92[12] = 4356;
            v59 = *(unsigned int *)(v10 + 5644);
            if ((_DWORD)v59 == *(_DWORD *)(v10 + 5640))
            {
              v74 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v58, v59 + 1, (unint64_t)v92, a4, a5, a6, a7, a8);
              v60 = (_QWORD *)(*(_QWORD *)(v10 + 5632) + 14 * *(unsigned int *)(v10 + 5644));
              v61 = *v74;
              v62 = *(uint64_t *)((char *)v74 + 6);
            }
            else
            {
              v60 = (_QWORD *)(*v58 + 14 * v59);
              v61 = *(_QWORD *)v92;
              v62 = *(_QWORD *)&v92[6];
            }
            *(_QWORD *)((char *)v60 + 6) = v62;
            *v60 = v61;
            ++*(_DWORD *)(v10 + 5644);
          }
        }
        goto LABEL_8;
      case 2:
      case 4:
      case 5:
      case 7:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 3960), *(JSC::DFG::Node **)(v10 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x93, "GPRReg JSC::DFG::SpeculativeJIT::fillJSValue(Edge)", "Bad data format");
        __break(0xC471u);
        JUMPOUT(0x197C99B14);
      case 6:
      case 0x10:
      case 0x11:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x18:
        v8 = *(char *)(v14 + 24 * (int)v13 + 17);
        if (v8 > 15)
          v17 = -1;
        else
          v17 = *(char *)(v14 + 24 * (int)v13 + 17);
        ++*(_DWORD *)(v10 + 12 * v17 + 4784);
        goto LABEL_8;
      default:
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 3960), *(JSC::DFG::Node **)(v10 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x96, "GPRReg JSC::DFG::SpeculativeJIT::fillJSValue(Edge)", "Corrupt data format");
        __break(0xC471u);
        JUMPOUT(0x197C99B70);
    }
  }
  return (char)v8;
}

BOOL JSC::DFG::SpeculativeJIT::isKnownCell(JSC::DFG::SpeculativeJIT *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;

  v8 = *((_QWORD *)this + 688);
  v9 = (_QWORD *)(v8 + 24);
  v10 = (_QWORD *)(v8 + 8);
  if ((a2 & 1) != 0)
    v10 = v9;
  v11 = *v10 + 32 * *(unsigned int *)((a2 & 0xFFFFFFFFFFFFFFFELL) + 20);
  v12 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v12 != *(_DWORD *)(v11 + 20))
  {
    if ((*(_QWORD *)(v11 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v11, v12, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v11 + 20) = (_DWORD)v12;
  }
  return (*(_QWORD *)(v11 + 8) & 0xFFFFD7FF00000008) == 0;
}

uint64_t JSC::DFG::SpeculativeJIT::nonSpeculativePeepholeBranchNullOrUndefined(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  void *v71;
  _BOOL8 v72;
  void *v73;
  void *v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  JSC::DFG::Node *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  uint64_t v164;
  unsigned int v165;
  unsigned int *v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  void *v179;
  _BYTE v180[12];
  uint64_t v181;
  char v182;
  _BYTE v183[12];
  uint64_t v184;
  uint64_t v185;
  char v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  void *v191;

  v10 = *(void ***)(a3 + 72);
  v11 = *v10;
  v179 = v10[2];
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v184, (JSC::DFG::SpeculativeJIT *)a1, a2, a4, a5, a6, a7, a8);
  result = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v184, v12, v13, v14, v15, v16, v17, v18);
  v27 = ~*(_DWORD *)((v185 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v27 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    return result;
  }
  v28 = result;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v27 + 8) == 1)
  {
    v29 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v184, v20, v21, v22, v23, v24, v25, v26);
    v36 = v29;
    if ((int)v29 > 15)
      v37 = -1;
    else
      v37 = v29;
    ++*(_DWORD *)(a1 + 12 * v37 + 4784);
  }
  else
  {
    v36 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, v20, v21, v22, v23, v24, v25, v26);
  }
  if (JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), v30, v31, v32, v33, v34, v35))
  {
    v45 = *(_QWORD *)(a1 + 5504);
    v46 = a2 & 0xFF00FFFFFFFFFFFELL;
    v47 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v48 = a2 & 1;
    v49 = (uint64_t *)(v45 + 24);
    v50 = (uint64_t *)(v45 + 8);
    if ((a2 & 1) != 0)
      v50 = v49;
    v51 = *v50;
    v52 = *v50 + 32 * v47;
    v53 = *(_DWORD *)(a1 + 5584);
    v54 = *(_DWORD *)(v52 + 20);
    if (v53 != v54)
    {
      if ((*(_QWORD *)(v52 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v54 ^ v53) >= 2)
        {
          v162 = *(_QWORD *)v52;
          if (*(_QWORD *)v52 != 4)
          {
            *(_QWORD *)v52 = v162 | 2;
            v166 = (unsigned int *)(v162 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v162 & 1) != 0)
            {
              v175 = 2 * *v166;
              while (v175 * 4)
              {
                v176 = *(_QWORD *)&v166[v175];
                if ((*(_BYTE *)(v176 + 19) & 0xC) == 0)
                {
                  v177 = *(_QWORD *)(v176 + 96);
                  v178 = (v177 & 1) != 0 ? (v177 >> 1) & 3 : *(unsigned __int8 *)(v177 + 4);
                  v175 -= 2;
                  if (v178 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v166, v38, v39, v40, v41, v42, v43, v44);
                goto LABEL_108;
              }
            }
            else if (v166)
            {
              if ((*((_BYTE *)v166 + 19) & 0xC) != 0
                || ((v167 = *((_QWORD *)v166 + 12), (v167 & 1) != 0)
                  ? (v168 = (v167 >> 1) & 3)
                  : (v168 = *(unsigned __int8 *)(v167 + 4)),
                    v168 == 2))
              {
LABEL_108:
                *(_QWORD *)v52 = 4;
              }
            }
          }
          *(_DWORD *)(v51 + 32 * v47 + 16) = -21020677;
        }
        if ((v53 & 1) != 0)
          *(_QWORD *)v52 &= ~2uLL;
      }
      *(_DWORD *)(v52 + 20) = v53;
    }
    if ((*(_QWORD *)(v52 + 8) & 0x2800FFFFFFF7) != 0)
    {
      JSC::MacroAssemblerARM64::branchTest64(a1, 0, v28, 28, v41, v42, v43, v44, (uint64_t)v183);
      v55 = (_QWORD *)(a1 + 5264);
      v56 = *(_QWORD *)&v183[4];
      v189 = *(_DWORD *)v183;
      v190 = *(_QWORD *)&v183[4];
      v57 = v179;
      v191 = v179;
      v58 = *(unsigned int *)(a1 + 5276);
      if ((_DWORD)v58 == *(_DWORD *)(a1 + 5272))
      {
        v92 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v55, (void *)(v58 + 1), (unint64_t)&v189, v40, v41, v42, v43, v44);
        v57 = v179;
        v93 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
        *(_DWORD *)v93 = *(_DWORD *)v92;
        *(_QWORD *)(v93 + 4) = *(_QWORD *)(v92 + 4);
        *(_QWORD *)(v93 + 16) = *(_QWORD *)(v92 + 16);
      }
      else
      {
        v59 = *v55 + 24 * v58;
        *(_DWORD *)v59 = *(_DWORD *)v183;
        *(_QWORD *)(v59 + 4) = v56;
        *(_QWORD *)(v59 + 16) = v179;
      }
      v60 = v46;
      ++*(_DWORD *)(a1 + 5276);
    }
    else
    {
      v57 = v179;
      v60 = v46;
    }
  }
  else
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v183, (JSC::DFG::SpeculativeJIT *)a1, v39, v40, v41, v42, v43, v44);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v181, (JSC::DFG::SpeculativeJIT *)a1, v94, v95, v96, v97, v98, v99);
    v106 = v183[8];
    v107 = v182;
    *(_QWORD *)v180 = 0xFFFFFFFFLL;
    *(_DWORD *)&v180[8] = -16773311;
    v108 = *(_QWORD *)(a1 + 5504);
    v60 = a2 & 0xFF00FFFFFFFFFFFELL;
    if ((a2 & 1) != 0)
      v109 = (_QWORD *)(v108 + 24);
    else
      v109 = (_QWORD *)(v108 + 8);
    v110 = *v109 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v111 = (void *)*(unsigned int *)(a1 + 5584);
    if ((_DWORD)v111 != *(_DWORD *)(v110 + 20))
    {
      if ((*(_QWORD *)(v110 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v110, v111, v100, v101, v102, v103, v104, v105);
      else
        *(_DWORD *)(v110 + 20) = (_DWORD)v111;
    }
    if ((*(_QWORD *)(v110 + 8) & 0xFFFFD7FF00000008) != 0)
    {
      v112 = v28;
      JSC::AssemblyHelpers::branchIfNotCell(a1, v28, 1, v101, v102, v103, v104, v105, (uint64_t)&v189);
      *(_DWORD *)v180 = v189;
      *(_QWORD *)&v180[4] = v190;
    }
    else
    {
      v112 = v28;
    }
    JSC::DFG::SpeculativeJIT::branchTest8<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(a1, v112 | 0x600000000, (uint64_t)v179, v101, v102, v103, v104, v105);
    v119 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, *(JSC::DFG::JITCompiler **)(a1 + 3976), v113, v114, v115, v116, v117, v118);
    v126 = v106;
    v127 = v107;
    if ((_DWORD)v119 == -1)
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v120, v126, v121, v122, v123, v124, v125);
    else
      JSC::MacroAssemblerARM64::load64(a1, (v119 << 35) + 0x380000001ALL, v126, v121, v122, v123, v124, v125);
    v48 = a2 & 1;
    JSC::MacroAssemblerARM64::load32(a1, v28, v36, v128, v129, v130, v131, v132);
    v140 = *(_DWORD *)(a1 + 200);
    if (v140 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v133, v134, v135, v136, v137, v138, v139);
      v140 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v140) = v36 & 0x1F | (32 * (v36 & 0x1F)) | 0xD37CEC00;
    *(_DWORD *)(a1 + 200) += 4;
    JSC::MacroAssemblerARM64::load64(a1, v36 | 0x2800000000, v127, v135, v136, v137, v138, v139);
    JSC::MacroAssemblerARM64::branch64(a1, 0, v126, v127, v141, v142, v143, v144, (uint64_t)&v187);
    v145 = (_QWORD *)(a1 + 5264);
    v146 = v188;
    v189 = v187;
    v190 = v188;
    v191 = v11;
    v147 = *(unsigned int *)(a1 + 5276);
    if ((_DWORD)v147 == *(_DWORD *)(a1 + 5272))
    {
      v169 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v145, (void *)(v147 + 1), (unint64_t)&v189, v40, v41, v42, v43, v44);
      v170 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
      *(_DWORD *)v170 = *(_DWORD *)v169;
      *(_QWORD *)(v170 + 4) = *(_QWORD *)(v169 + 4);
      *(_QWORD *)(v170 + 16) = *(_QWORD *)(v169 + 16);
    }
    else
    {
      v148 = *v145 + 24 * v147;
      *(_DWORD *)v148 = v187;
      *(_QWORD *)(v148 + 4) = v146;
      *(_QWORD *)(v148 + 16) = v11;
    }
    ++*(_DWORD *)(a1 + 5276);
    v149 = *(_QWORD *)(a1 + 5504);
    if ((a2 & 1) != 0)
      v150 = (_QWORD *)(v149 + 24);
    else
      v150 = (_QWORD *)(v149 + 8);
    v151 = *v150 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v152 = (void *)*(unsigned int *)(a1 + 5584);
    if ((_DWORD)v152 != *(_DWORD *)(v151 + 20))
    {
      if ((*(_QWORD *)(v151 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v151, v152, v39, v40, v41, v42, v43, v44);
      else
        *(_DWORD *)(v151 + 20) = (_DWORD)v152;
    }
    if ((*(_QWORD *)(v151 + 8) & 0xFFFFD7FF00000008) != 0)
    {
      JSC::DFG::SpeculativeJIT::jump(a1, (uint64_t)v179, 1, v40, v41, v42, v43, v44);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v180, a1, v153, v154, v155, v156, v157, v158);
    }
    v57 = v179;
    if (v181)
    {
      v159 = v182;
      if (v182 != -1)
      {
        if (v182 > 15)
          v159 = -1;
        --*(_DWORD *)(v181 + 12 * v159 + 4784);
      }
    }
    if (*(_QWORD *)v183)
    {
      v160 = v183[8];
      if (v183[8] != -1)
      {
        if (v183[8] > 15)
          v160 = -1;
        --*(_DWORD *)(*(_QWORD *)v183 + 12 * v160 + 4784);
      }
    }
  }
  v61 = *(_QWORD *)(a1 + 5504);
  v62 = *(unsigned int *)(v60 + 20);
  v63 = (uint64_t *)(v61 + 24);
  v64 = (uint64_t *)(v61 + 8);
  if (v48)
    v64 = v63;
  v65 = *v64;
  v66 = *v64 + 32 * v62;
  v67 = *(_DWORD *)(a1 + 5584);
  v68 = *(_DWORD *)(v66 + 20);
  if (v67 != v68)
  {
    if ((*(_QWORD *)(v66 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v68 ^ v67) >= 2)
      {
        v161 = *(_QWORD *)v66;
        if (*(_QWORD *)v66 != 4)
        {
          *(_QWORD *)v66 = v161 | 2;
          v163 = (unsigned int *)(v161 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v161 & 1) != 0)
          {
            v171 = 2 * *v163;
            while (v171 * 4)
            {
              v172 = *(_QWORD *)&v163[v171];
              if ((*(_BYTE *)(v172 + 19) & 0xC) == 0)
              {
                v173 = *(_QWORD *)(v172 + 96);
                v174 = (v173 & 1) != 0 ? (v173 >> 1) & 3 : *(unsigned __int8 *)(v173 + 4);
                v171 -= 2;
                if (v174 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v163, v57, v39, v40, v41, v42, v43, v44);
              v57 = v179;
              goto LABEL_101;
            }
          }
          else if (v163)
          {
            if ((*((_BYTE *)v163 + 19) & 0xC) != 0
              || ((v164 = *((_QWORD *)v163 + 12), (v164 & 1) != 0)
                ? (v165 = (v164 >> 1) & 3)
                : (v165 = *(unsigned __int8 *)(v164 + 4)),
                  v165 == 2))
            {
LABEL_101:
              *(_QWORD *)v66 = 4;
            }
          }
        }
        *(_DWORD *)(v65 + 32 * v62 + 16) = -21020677;
      }
      if ((v67 & 1) != 0)
        *(_QWORD *)v66 &= ~2uLL;
    }
    *(_DWORD *)(v66 + 20) = v67;
  }
  if ((*(_BYTE *)(v66 + 13) & 2) != 0)
  {
    v69 = *(_QWORD *)(a1 + 3960);
    v70 = *(_DWORD *)(*(_QWORD *)(a1 + 3968) + 8) + 1;
    while (v70 < *(_DWORD *)(v69 + 60))
    {
      v71 = *(void **)(*(_QWORD *)(v69 + 48) + 8 * v70++);
      if (v71)
        goto LABEL_22;
    }
    v71 = 0;
LABEL_22:
    v72 = v11 == v71;
    if (v11 == v71)
      v73 = v11;
    else
      v73 = v57;
    if (v11 == v71)
      v74 = v57;
    else
      v74 = v11;
    if ((_DWORD)v28 == (_DWORD)v36)
      goto LABEL_37;
    if ((_DWORD)v28 == 63)
    {
      if ((_DWORD)v36 != 31)
      {
        v77 = v36 & 0x1F | 0xD2800000;
        goto LABEL_34;
      }
    }
    else if ((_DWORD)v28 != 31 && (_DWORD)v36 != 31)
    {
      v75 = v36 & 0x1F | ((v28 & 0x1F) << 16);
      v76 = -1442839584;
LABEL_33:
      v77 = v75 | v76;
LABEL_34:
      v79 = (unsigned int *)(a1 + 200);
      v78 = *(_DWORD *)(a1 + 200);
      if (v78 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v57, v39, v40, v41, v42, v43, v44);
        v78 = *v79;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v78) = v77;
      *v79 += 4;
LABEL_37:
      JSC::MacroAssemblerARM64::and64(a1, -9, v36, v36);
      JSC::MacroAssemblerARM64::branch64(a1, v72, v36, 2, v80, v81, v82, v83, (uint64_t)v183);
      v84 = (_QWORD *)(a1 + 5264);
      v85 = *(_QWORD *)&v183[4];
      v189 = *(_DWORD *)v183;
      v190 = *(_QWORD *)&v183[4];
      v191 = v74;
      v86 = *(unsigned int *)(a1 + 5276);
      if ((_DWORD)v86 == *(_DWORD *)(a1 + 5272))
      {
        v90 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, (void *)(v86 + 1), (unint64_t)&v189, v40, v41, v42, v43, v44);
        v91 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
        *(_DWORD *)v91 = *(_DWORD *)v90;
        *(_QWORD *)(v91 + 4) = *(_QWORD *)(v90 + 4);
        *(_QWORD *)(v91 + 16) = *(_QWORD *)(v90 + 16);
      }
      else
      {
        v87 = *v84 + 24 * v86;
        *(_DWORD *)v87 = *(_DWORD *)v183;
        *(_QWORD *)(v87 + 4) = v85;
        *(_QWORD *)(v87 + 16) = v74;
      }
      ++*(_DWORD *)(a1 + 5276);
      v57 = v73;
      goto LABEL_40;
    }
    v75 = v36 | (32 * v28);
    v76 = -1862270976;
    goto LABEL_33;
  }
LABEL_40:
  result = JSC::DFG::SpeculativeJIT::jump(a1, (uint64_t)v57, 0, v40, v41, v42, v43, v44);
  if ((_DWORD)v36 != -1)
  {
    if ((int)v36 > 15)
      v88 = -1;
    else
      v88 = v36;
    --*(_DWORD *)(a1 + 12 * v88 + 4784);
  }
  if ((v185 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v89 = v186;
    if (v186 > 15)
      v89 = -1;
    --*(_DWORD *)(v184 + 12 * v89 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::branchTest8<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, a2, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, a1, 0, 17, v10, v11, v12, v13, (uint64_t)&v25, v14);
    result = a1 + 5264;
    v21 = v26;
    v27 = v25;
    v28 = v26;
    v29 = a3;
    v22 = *(unsigned int *)(a1 + 5276);
    if ((_DWORD)v22 == *(_DWORD *)(a1 + 5272))
    {
      result = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v22 + 1), (unint64_t)&v27, v15, v16, v17, v18, v19);
      v24 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
      *(_DWORD *)v24 = *(_DWORD *)result;
      *(_QWORD *)(v24 + 4) = *(_QWORD *)(result + 4);
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(result + 16);
    }
    else
    {
      v23 = *(_QWORD *)result + 24 * v22;
      *(_DWORD *)v23 = v25;
      *(_QWORD *)(v23 + 4) = v21;
      *(_QWORD *)(v23 + 16) = a3;
    }
    ++*(_DWORD *)(a1 + 5276);
  }
  else
  {
    result = 6195;
    __break(0xC471u);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileNeitherDoubleNorHeapBigIntToNotDoubleStrictEquality(uint64_t a1, JSC::DFG::JITCompiler *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  int v96;
  int v97;
  int *v98;
  int *v99;
  int v100;
  _BYTE *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  void *v110;
  int v111;
  int v112;
  int *v113;
  int *v114;
  int v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int i;
  unsigned int v122;
  char v123;
  int *v124;
  int *v125;
  int v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  _QWORD *v146;
  uint64_t v147;
  void *v148;
  int v149;
  int v150;
  _DWORD *v151;
  uint64_t *v152;
  int v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  _DWORD *v179;
  uint64_t *v180;
  int v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  void *v187;
  int v188;
  int v189;
  int *v190;
  int *v191;
  int v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  _DWORD *v210;
  uint64_t *v211;
  int v212;
  _BYTE *v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  char v230;
  char v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  uint64_t v240;
  _BYTE v241[12];
  int v242;
  uint64_t v243;
  int v244;
  int v245;
  char v246;
  __int16 v247;
  char v248;
  int v249[3];
  int v250;
  int v251;
  int v252[3];
  int v253;
  int v254;
  unsigned int v255[3];
  _BYTE *v256;
  uint64_t v257;
  _BYTE v258[24];
  _BYTE *v259;
  uint64_t v260;
  _BYTE v261[24];
  uint64_t v262;
  char v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  char v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  char v273;

  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v271, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  v234 = a4;
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v268, (JSC::DFG::SpeculativeJIT *)a1, a4, v12, v13, v14, v15, v16);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v266, (JSC::DFG::SpeculativeJIT *)a1, v17, v18, v19, v20, v21, v22);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v264, (JSC::DFG::SpeculativeJIT *)a1, v23, v24, v25, v26, v27, v28);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v262, (JSC::DFG::SpeculativeJIT *)a1, v29, v30, v31, v32, v33, v34);
  v42 = ~*(_DWORD *)((v272 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v42 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197C9B550);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v42 + 8) == 1)
  {
    v43 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v271, v35, v36, v37, v38, v39, v40, v41);
    if (v43 > 15)
      v51 = -1;
    else
      v51 = v43;
    ++*(_DWORD *)(a1 + 12 * v51 + 4784);
  }
  else
  {
    v43 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, v35, v36, v37, v38, v39, v40, v41);
  }
  v52 = ~*(_DWORD *)((v269 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v52 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    goto LABEL_180;
  }
  v232 = v43;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v52 + 8) == 1)
  {
    v53 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v268, v44, v45, v46, v47, v48, v49, v50);
    v61 = v53;
    if (v53 > 15)
      v62 = -1;
    else
      v62 = v53;
    ++*(_DWORD *)(a1 + 12 * v62 + 4784);
  }
  else
  {
    v61 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, v44, v45, v46, v47, v48, v49, v50);
  }
  v63 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v271, v54, v55, v56, v57, v58, v59, v60);
  v71 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v268, v64, v65, v66, v67, v68, v69, v70);
  v72 = v267;
  v230 = v263;
  v231 = v265;
  v259 = v261;
  v260 = 2;
  v256 = v258;
  v257 = 2;
  v233 = v71;
  JSC::MacroAssemblerARM64::branch64(a1, 1, v63, v71, v73, v74, v75, v76, (uint64_t)v255);
  v83 = *(_QWORD *)(a1 + 5616);
  v84 = *(_QWORD *)(v83 + 8);
  v85 = (_QWORD *)(v84 + 24);
  v86 = (_QWORD *)(v84 + 8);
  if ((a3 & 1) != 0)
    v86 = v85;
  v87 = *v86 + 32 * *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v88 = (void *)*(unsigned int *)(v83 + 88);
  if ((_DWORD)v88 != *(_DWORD *)(v87 + 20))
  {
    if ((*(_QWORD *)(v87 + 8) & 0x2800FFFFFFF7) != 0)
    {
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v87, v88, v77, v78, v79, v80, v81, v82);
      v83 = *(_QWORD *)(a1 + 5616);
    }
    else
    {
      *(_DWORD *)(v87 + 20) = (_DWORD)v88;
    }
  }
  v89 = *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  if ((*(_BYTE *)(v87 + 12) & 0xF0) != 0)
  {
    v90 = *(_QWORD *)(v83 + 8);
    v91 = (_QWORD *)(v90 + 24);
    v92 = (_QWORD *)(v90 + 8);
    if ((a3 & 1) != 0)
      v92 = v91;
    v93 = *v92 + 32 * v89;
    v94 = (void *)*(unsigned int *)(v83 + 88);
    if ((_DWORD)v94 != *(_DWORD *)(v93 + 20))
    {
      if ((*(_QWORD *)(v93 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v93, v94, v77, v78, v79, v80, v81, v82);
      else
        *(_DWORD *)(v93 + 20) = (_DWORD)v94;
    }
    if ((*(_BYTE *)(v93 + 12) & 3) != 0)
    {
      JSC::MacroAssemblerARM64::branch64(a1, 2, v63, 27, v79, v80, v81, v82, (uint64_t)&v253);
      v96 = v253;
      if (v253 != -1)
      {
        v97 = HIDWORD(v260);
        if (HIDWORD(v260) == (_DWORD)v260)
        {
          v98 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v259, (void *)(HIDWORD(v260) + 1), (unint64_t)&v253, v95, v79, v80, v81, v82);
          v100 = *v98;
          v99 = v98 + 1;
          v96 = v100;
          v97 = HIDWORD(v260);
        }
        else
        {
          v99 = &v254;
        }
        v101 = &v259[12 * v97];
        *(_DWORD *)v101 = v96;
        *(_QWORD *)(v101 + 4) = *(_QWORD *)v99;
        ++HIDWORD(v260);
      }
    }
    JSC::MacroAssemblerARM64::branchTest64(a1, 1, v63, 27, v79, v80, v81, v82, (uint64_t)v252);
    JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)(((unint64_t)v63 << 32) | 0x80000000), (JSC::DFG::Node *)(a3 & 0xFF00FFFFFFFFFFFFLL), v252);
    v83 = *(_QWORD *)(a1 + 5616);
    LODWORD(v89) = *(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  }
  v102 = *(_QWORD *)(v83 + 8);
  if ((a3 & 1) != 0)
    v103 = (_QWORD *)(v102 + 24);
  else
    v103 = (_QWORD *)(v102 + 8);
  v104 = *v103 + 32 * v89;
  v105 = *(unsigned int *)(v83 + 88);
  if ((_DWORD)v105 != *(_DWORD *)(v104 + 20))
  {
    if ((*(_QWORD *)(v104 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v104, (void *)v105, v77, v78, v79, v80, v81, v82);
    else
      *(_DWORD *)(v104 + 20) = v105;
  }
  if ((*(_BYTE *)(v104 + 13) & 8) != 0)
  {
    v106 = *(_QWORD *)(a1 + 5616);
    v107 = *(_QWORD *)(v106 + 8);
    if ((a3 & 1) != 0)
      v108 = (_QWORD *)(v107 + 24);
    else
      v108 = (_QWORD *)(v107 + 8);
    v109 = *v108 + 32 * *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v110 = (void *)*(unsigned int *)(v106 + 88);
    if ((_DWORD)v110 != *(_DWORD *)(v109 + 20))
    {
      if ((*(_QWORD *)(v109 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v109, v110, v77, v78, v79, v80, v81, v82);
      else
        *(_DWORD *)(v109 + 20) = (_DWORD)v110;
    }
    if ((*(_QWORD *)(v109 + 8) & 0xFFFFD7FF00000008) != 0)
    {
      JSC::AssemblyHelpers::branchIfNotCell(a1, v63, 1, v78, v79, v80, v81, v82, (uint64_t)&v250);
      v111 = v250;
      if (v250 != -1)
      {
        v112 = HIDWORD(v260);
        if (HIDWORD(v260) == (_DWORD)v260)
        {
          v113 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v259, (void *)(HIDWORD(v260) + 1), (unint64_t)&v250, v78, v79, v80, v81, v82);
          v115 = *v113;
          v114 = v113 + 1;
          v111 = v115;
          v112 = HIDWORD(v260);
        }
        else
        {
          v114 = &v251;
        }
        v116 = &v259[12 * v112];
        *(_DWORD *)v116 = v111;
        *(_QWORD *)(v116 + 4) = *(_QWORD *)v114;
        ++HIDWORD(v260);
      }
    }
    if (*(_BYTE *)(a1 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v63 | 0x500000000, *(char *)(a1 + 304), v78, v79, v80, v81, v82);
      JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 3, v117, v118, v119, v120, (uint64_t)v249);
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)(((unint64_t)v63 << 32) | 0x80000000), (JSC::DFG::Node *)(a3 & 0xFF00FFFFFFFFFFFFLL), v249);
      goto LABEL_42;
    }
    __break(0xC471u);
LABEL_180:
    JUMPOUT(0x197C9B4D8);
  }
LABEL_42:
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v105, v77, v78, v79, v80, v81, v82);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v122 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v105, v77, v78, v79, v80, v81, v82);
    v122 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v122) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v123 = 69;
  else
    v123 = 65;
  v244 = i;
  v245 = 0;
  v246 = v123;
  v247 = 15;
  v248 = -1;
  if (i != -1)
  {
    if (HIDWORD(v260) == (_DWORD)v260)
    {
      v124 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v259, (void *)(HIDWORD(v260) + 1), (unint64_t)&v244, v78, v79, v80, v81, v82);
      v126 = *v124;
      v125 = v124 + 1;
      v127 = &v259[12 * HIDWORD(v260)];
      *(_DWORD *)v127 = v126;
    }
    else
    {
      v125 = &v245;
      v127 = &v259[12 * HIDWORD(v260)];
      *(_DWORD *)v127 = i;
    }
    *(_QWORD *)(v127 + 4) = *(_QWORD *)v125;
    ++HIDWORD(v260);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v255, a1, v77, v78, v79, v80, v81, v82);
  v128 = v72;
  JSC::DFG::SpeculativeJIT::speculateNotDouble(a1, v234, v233, v128, v129, v130, v131, v132);
  JSC::DFG::SpeculativeJIT::speculateNotDouble(a1, a3, v63, v128, v133, v134, v135, v136);
  v143 = *(_QWORD *)(a1 + 5616);
  v144 = *(_QWORD *)(v143 + 8);
  v145 = (_QWORD *)(v144 + 24);
  v146 = (_QWORD *)(v144 + 8);
  if ((a3 & 1) != 0)
    v146 = v145;
  v147 = *v146 + 32 * *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v148 = (void *)*(unsigned int *)(v143 + 88);
  if ((_DWORD)v148 != *(_DWORD *)(v147 + 20))
  {
    if ((*(_QWORD *)(v147 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v147, v148, v137, v138, v139, v140, v141, v142);
    else
      *(_DWORD *)(v147 + 20) = (_DWORD)v148;
  }
  if ((*(_QWORD *)(v147 + 8) & 0xFFFFD3FF00000008) != 0)
  {
    JSC::AssemblyHelpers::branchIfNotCell(a1, v63, 1, v138, v139, v140, v141, v142, (uint64_t)&v242);
    v149 = v242;
    if (v242 != -1)
    {
      v150 = HIDWORD(v257);
      if (HIDWORD(v257) == (_DWORD)v257)
      {
        v151 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v256, (void *)(HIDWORD(v257) + 1), (unint64_t)&v242, v138, v139, v140, v141, v142);
        v153 = *v151;
        v152 = (uint64_t *)(v151 + 1);
        v149 = v153;
        v150 = HIDWORD(v257);
      }
      else
      {
        v152 = &v243;
      }
      v154 = &v256[12 * v150];
      *(_DWORD *)v154 = v149;
      *(_QWORD *)(v154 + 4) = *v152;
      ++HIDWORD(v257);
    }
  }
  v155 = *(_QWORD *)(a1 + 5616);
  v156 = *(_QWORD *)(v155 + 8);
  v157 = (_QWORD *)(v156 + 24);
  v158 = (_QWORD *)(v156 + 8);
  if ((a3 & 1) != 0)
    v158 = v157;
  v159 = *v158 + 32 * *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v160 = (void *)*(unsigned int *)(v155 + 88);
  if ((_DWORD)v160 != *(_DWORD *)(v159 + 20))
  {
    if ((*(_QWORD *)(v159 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v159, v160, v137, v138, v139, v140, v141, v142);
    else
      *(_DWORD *)(v159 + 20) = (_DWORD)v160;
  }
  if ((*(_BYTE *)(v159 + 13) & 8) != 0)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C9B4F8);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, v63 | 0x500000000, *(char *)(a1 + 304), v138, v139, v140, v141, v142);
    JSC::MacroAssemblerARM64::branch32(a1, 0, 17, 3, v161, v162, v163, v164, (uint64_t)v241);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v63 << 32) | 0x80000000), a3, 0xFFFFF7FFFFFFFFFFLL, (uint64_t)v241, 1uLL, v165, v166);
  }
  v167 = *(_QWORD *)(a1 + 5616);
  v168 = *(_QWORD *)(v167 + 8);
  v169 = (_QWORD *)(v168 + 24);
  v170 = (_QWORD *)(v168 + 8);
  if ((a3 & 1) != 0)
    v170 = v169;
  v171 = *v170 + 32 * *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v172 = (void *)*(unsigned int *)(v167 + 88);
  if ((_DWORD)v172 != *(_DWORD *)(v171 + 20))
  {
    if ((*(_QWORD *)(v171 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v171, v172, v137, v138, v139, v140, v141, v142);
    else
      *(_DWORD *)(v171 + 20) = (_DWORD)v172;
  }
  if ((*(_QWORD *)(v171 + 8) & 0xFFFFFFFFCFFFFFFFLL) != 0)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C9B518);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, v63 | 0x500000000, *(char *)(a1 + 304), v138, v139, v140, v141, v142);
    JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v173, v174, v175, v176, (uint64_t)&v239);
    v177 = v239;
    if (v239 != -1)
    {
      v178 = HIDWORD(v257);
      if (HIDWORD(v257) == (_DWORD)v257)
      {
        v179 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v256, (void *)(HIDWORD(v257) + 1), (unint64_t)&v239, v138, v139, v140, v141, v142);
        v181 = *v179;
        v180 = (uint64_t *)(v179 + 1);
        v177 = v181;
        v178 = HIDWORD(v257);
      }
      else
      {
        v180 = &v240;
      }
      v182 = &v256[12 * v178];
      *(_DWORD *)v182 = v177;
      *(_QWORD *)(v182 + 4) = *v180;
      ++HIDWORD(v257);
    }
  }
  v183 = *(_QWORD *)(a1 + 5616);
  v184 = *(_QWORD *)(v183 + 8);
  if ((v234 & 1) != 0)
    v185 = (_QWORD *)(v184 + 24);
  else
    v185 = (_QWORD *)(v184 + 8);
  v186 = *v185 + 32 * *(unsigned int *)((v234 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v187 = (void *)*(unsigned int *)(v183 + 88);
  if ((_DWORD)v187 != *(_DWORD *)(v186 + 20))
  {
    if ((*(_QWORD *)(v186 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v186, v187, v137, v138, v139, v140, v141, v142);
    else
      *(_DWORD *)(v186 + 20) = (_DWORD)v187;
  }
  if ((*(_QWORD *)(v186 + 8) & 0xFFFFD3FF00000008) != 0)
  {
    JSC::AssemblyHelpers::branchIfNotCell(a1, v233, 1, v138, v139, v140, v141, v142, (uint64_t)&v237);
    v188 = v237;
    if (v237 != -1)
    {
      v189 = HIDWORD(v257);
      if (HIDWORD(v257) == (_DWORD)v257)
      {
        v190 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v256, (void *)(HIDWORD(v257) + 1), (unint64_t)&v237, v138, v139, v140, v141, v142);
        v192 = *v190;
        v191 = v190 + 1;
        v188 = v192;
        v189 = HIDWORD(v257);
      }
      else
      {
        v191 = &v238;
      }
      v193 = &v256[12 * v189];
      *(_DWORD *)v193 = v188;
      *(_QWORD *)(v193 + 4) = *(_QWORD *)v191;
      ++HIDWORD(v257);
    }
  }
  v194 = *(_QWORD *)(a1 + 5616);
  v195 = *(_QWORD *)(v194 + 8);
  if ((v234 & 1) != 0)
    v196 = (_QWORD *)(v195 + 24);
  else
    v196 = (_QWORD *)(v195 + 8);
  v197 = *v196 + 32 * *(unsigned int *)((v234 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v198 = (void *)*(unsigned int *)(v194 + 88);
  if ((_DWORD)v198 != *(_DWORD *)(v197 + 20))
  {
    if ((*(_QWORD *)(v197 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v197, v198, v137, v138, v139, v140, v141, v142);
    else
      *(_DWORD *)(v197 + 20) = (_DWORD)v198;
  }
  if ((*(_QWORD *)(v197 + 8) & 0xFFFFFFFFCFFFFFFFLL) != 0)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197C9B538);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, v233 | 0x500000000, *(char *)(a1 + 304), v138, v139, v140, v141, v142);
    JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 2, v199, v200, v201, v202, (uint64_t)&v235);
    v208 = v235;
    if (v235 != -1)
    {
      v209 = HIDWORD(v257);
      if (HIDWORD(v257) == (_DWORD)v257)
      {
        v210 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v256, (void *)(HIDWORD(v257) + 1), (unint64_t)&v235, v203, v204, v205, v206, v207);
        v212 = *v210;
        v211 = (uint64_t *)(v210 + 1);
        v208 = v212;
        v209 = HIDWORD(v257);
      }
      else
      {
        v211 = &v236;
      }
      v213 = &v256[12 * v209];
      *(_DWORD *)v213 = v208;
      *(_QWORD *)(v213 + 4) = *v211;
      ++HIDWORD(v257);
    }
  }
  JSC::DFG::SpeculativeJIT::compileStringEquality(a1, a2, v63, v233, v128, v231, v230, v232, v61, (unsigned int *)&v259, (unsigned int *)&v256);
  v221 = (unint64_t)v256;
  if (v258 != v256 && v256)
  {
    v256 = 0;
    LODWORD(v257) = 0;
    WTF::fastFree(v221, v214, v215, v216, v217, v218, v219, v220);
  }
  v222 = (unint64_t)v259;
  if (v261 != v259 && v259)
  {
    v259 = 0;
    LODWORD(v260) = 0;
    WTF::fastFree(v222, v214, v215, v216, v217, v218, v219, v220);
  }
  if (v61 != -1)
  {
    if (v61 > 15)
      v223 = -1;
    else
      v223 = v61;
    --*(_DWORD *)(a1 + 12 * v223 + 4784);
  }
  if (v232 != -1)
  {
    if (v232 > 15)
      v224 = -1;
    else
      v224 = v232;
    --*(_DWORD *)(a1 + 12 * v224 + 4784);
  }
  if (v262)
  {
    v225 = v263;
    if (v263 != -1)
    {
      if (v263 > 15)
        v225 = -1;
      --*(_DWORD *)(v262 + 12 * v225 + 4784);
    }
  }
  if (v264)
  {
    v226 = v265;
    if (v265 != -1)
    {
      if (v265 > 15)
        v226 = -1;
      --*(_DWORD *)(v264 + 12 * v226 + 4784);
    }
  }
  if (v266)
  {
    v227 = v267;
    if (v267 != -1)
    {
      if (v267 > 15)
        v227 = -1;
      --*(_DWORD *)(v266 + 12 * v227 + 4784);
    }
  }
  if ((v269 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v228 = v270;
    if (v270 > 15)
      v228 = -1;
    --*(_DWORD *)(v268 + 12 * v228 + 4784);
  }
  if ((v272 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v229 = v273;
    if (v273 > 15)
      v229 = -1;
    --*(_DWORD *)(v271 + 12 * v229 + 4784);
  }
}

void JSC::AssemblyHelpers::branchIfHeapBigInt(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a2 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
    JSC::MacroAssemblerARM64::load8(a2, a3 | 0x500000000, *(char *)(a2 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(a2, 0, 17, 3, v10, v11, v12, v13, a1);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::nonSpeculativePeepholeStrictEq(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  JSC::DFG::Node *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int8x8_t v153;
  uint64_t v154;
  WTF *v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v163;
  WTF *v164;
  uint64_t result;
  unsigned int v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  JSC::DFG::Node *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int8x8_t v183;
  WTF *v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  _DWORD v188[3];
  _DWORD v189[3];
  uint64_t v190;
  char v191;
  WTF *v192;
  uint64_t v193;
  _BYTE v194[24];
  uint64_t v195;
  char v196;
  uint64_t *v197;
  uint64_t v198;
  char v199;
  uint64_t *v200;
  uint64_t v201;
  char v202;

  v10 = (uint64_t *)*((_QWORD *)a3 + 9);
  v11 = *v10;
  v12 = v10[2];
  v13 = *((_QWORD *)this + 495);
  v14 = *(_DWORD *)(*((_QWORD *)this + 496) + 8) + 1;
  while (v14 < *(_DWORD *)(v13 + 60))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v14++);
    if (v15)
      goto LABEL_4;
  }
  v15 = 0;
LABEL_4:
  if (v11 == v15)
    v16 = v11;
  else
    v16 = v12;
  if (v11 == v15)
    v17 = v12;
  else
    v17 = v11;
  v18 = (v11 == v15) ^ a4;
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v200, this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v197, this, *((_QWORD *)a2 + 4), v19, v20, v21, v22, v23);
  JSC::DFG::SpeculativeJIT::speculate(this, (uint64_t)a2, *((_QWORD *)a2 + 3), v24, v25, v26, v27, v28);
  JSC::DFG::SpeculativeJIT::speculate(this, (uint64_t)a2, *((_QWORD *)a2 + 4), v29, v30, v31, v32, v33);
  v41 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v200, v34, v35, v36, v37, v38, v39, v40);
  v49 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v197, v42, v43, v44, v45, v46, v47, v48);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v195, this, v50, v51, v52, v53, v54, v55);
  v56 = v196;
  JSC::DFG::SpeculativeJIT::use(v200, (JSC::DFG::Node *)(v201 & 0xFF00FFFFFFFFFFFFLL), v57, v58, v59, v60, v61, v62);
  JSC::DFG::SpeculativeJIT::use(v197, (JSC::DFG::Node *)(v198 & 0xFF00FFFFFFFFFFFFLL), v63, v64, v65, v66, v67, v68);
  if (JSC::DFG::SpeculativeJIT::isKnownCell(this, *((_QWORD *)a2 + 3) & 0xFF00FFFFFFFFFFFFLL, v69, v70, v71, v72, v73, v74)&& JSC::DFG::SpeculativeJIT::isKnownCell(this, *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL, v75, v76, v77, v78, v79, v80))
  {
    if (v18)
      v169 = v16;
    else
      v169 = v17;
    JSC::DFG::SpeculativeJIT::branch64<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)this, 0, v41, v49, v169, v78, v79, v80);
    v176 = (unsigned int *)JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v170, v171, v172, v173, v174, v175);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<unsigned long (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v192, (uint64_t)this, v56, v176, v177, v41, v49, v178);
    JSC::DFG::SpeculativeJIT::branchTest32<JSC::ARM64Registers::RegisterID>((uint64_t)this, v18 ^ 1, v56, v17, v179, v180, v181, v182, v183);
  }
  else
  {
    v192 = (WTF *)v194;
    v193 = 2;
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v190, this, v75, v76, v77, v78, v79, v80);
    v81 = v56;
    JSC::MacroAssemblerARM64::move(this, v41, v81, v82, v83, v84, v85, v86);
    JSC::MacroAssemblerARM64::move(this, v49, v191, v87, v88, v89, v90, v91);
    JSC::MacroAssemblerARM64::add64((uint64_t)this, 0x2000000000000, v81, v81, v92, v93, v94, v95);
    JSC::MacroAssemblerARM64::add64((uint64_t)this, 0x2000000000000, v191, v191, v96, v97, v98, v99);
    JSC::MacroAssemblerARM64::or64(this, v191, v81, v81, v100, v101, v102, v103);
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, v81, 0x4000000000000, v104, v105, v106, v107, (uint64_t)v189);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v192, v189, v108, v109, v110, v111, v112, v113);
    if (v18)
      v117 = v16;
    else
      v117 = v17;
    if (v18)
      v118 = v17;
    else
      v118 = v16;
    JSC::DFG::SpeculativeJIT::branch64<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((uint64_t)this, 0, v41, v49, v117, v114, v115, v116);
    JSC::MacroAssemblerARM64::or64(this, v41, v49, v81, v119, v120, v121, v122);
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v81, 28, v123, v124, v125, v126, (uint64_t)v188);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v192, v188, v127, v128, v129, v130, v131, v132);
    JSC::DFG::SpeculativeJIT::jump((uint64_t)this, v118, 1, v133, v134, v135, v136, v137);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v184, (uint64_t *)&v192);
    v144 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v138, v139, v140, v141, v142, v143);
    JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v187, (uint64_t *)&v184, this, v81, v144, v145, v41, v49);
    JSC::DFG::SpeculativeJIT::addSlowPathGenerator((uint64_t)this, (unint64_t)&v187);
    v154 = v187;
    v187 = 0;
    if (v154)
      (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
    v155 = v184;
    if (&v186 != (uint64_t *)v184 && v184)
    {
      v184 = 0;
      v185 = 0;
      WTF::fastFree((unint64_t)v155, v146, v147, v148, v149, v150, v151, v152);
    }
    JSC::DFG::SpeculativeJIT::branchTest32<JSC::ARM64Registers::RegisterID>((uint64_t)this, v18 ^ 1, v81, v17, v149, v150, v151, v152, v153);
    if (v190)
    {
      v163 = v191;
      if (v191 != -1)
      {
        if (v191 > 15)
          v163 = -1;
        --*(_DWORD *)(v190 + 12 * v163 + 4784);
      }
    }
    v164 = v192;
    if (v194 != (_BYTE *)v192 && v192)
    {
      v192 = 0;
      LODWORD(v193) = 0;
      WTF::fastFree((unint64_t)v164, v156, v157, v158, v159, v160, v161, v162);
    }
  }
  result = JSC::DFG::SpeculativeJIT::jump((uint64_t)this, v16, 0, v158, v159, v160, v161, v162);
  if (v195)
  {
    v166 = v196;
    if (v196 != -1)
    {
      if (v196 > 15)
        v166 = -1;
      --*(_DWORD *)(v195 + 12 * v166 + 4784);
    }
  }
  if ((v198 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v167 = v199;
    if (v199 > 15)
      v167 = -1;
    --*((_DWORD *)v197 + 3 * v167 + 1196);
  }
  if ((v201 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v168 = v202;
    if (v202 > 15)
      v168 = -1;
    --*((_DWORD *)v200 + 3 * v168 + 1196);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::branch64<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  JSC::MacroAssemblerARM64::branch64(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v20);
  result = a1 + 5264;
  v16 = v21;
  v22 = v20;
  v23 = v21;
  v24 = a5;
  v17 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 5272))
  {
    result = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v17 + 1), (unint64_t)&v22, v10, v11, v12, v13, v14);
    v19 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v19 = *(_DWORD *)result;
    *(_QWORD *)(v19 + 4) = *(_QWORD *)(result + 4);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(result + 16);
  }
  else
  {
    v18 = *(_QWORD *)result + 24 * v17;
    *(_DWORD *)v18 = v20;
    *(_QWORD *)(v18 + 4) = v16;
    *(_QWORD *)(v18 + 16) = a5;
  }
  ++*(_DWORD *)(a1 + 5276);
  return result;
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<unsigned long (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::AssemblerBuffer *v12;
  unint64_t *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  __int16 *v46;
  int v47;
  char *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  int64_t v73;
  unsigned __int8 *v74;
  int v75;
  unsigned __int8 v76;
  unsigned __int8 *v77;
  unsigned int v78;
  unsigned int v79;
  __int16 v80;
  _BYTE v81[6];

  v8 = a7;
  v12 = (JSC::AssemblerBuffer *)a3;
  v15 = (unint64_t *)(a2 + 5752);
  v16 = 1;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, 1, a2 + 5752, a3, 0xFFFFFFFFLL, 0xFFFFFFFFLL, a7, a8);
  if (a6 == 1)
  {
    if (v8 == 2)
      goto LABEL_60;
    v16 = 0;
  }
  else
  {
    v80 = a6 | 0x100;
    v78 = 1;
    if (v8 == 2)
      goto LABEL_7;
  }
  *(_WORD *)&v81[2 * v16++ - 2] = v8 | 0x200;
  v78 = v16;
  do
  {
LABEL_7:
    v24 = 0;
    v25 = 0;
    v26 = v16;
    do
    {
      if ((v81[v24 - 1] & 0x40) != 0)
      {
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      v25 |= 1 << v81[v24 - 1];
      v24 += 2;
    }
    while (2 * v16 != v24);
    v27 = 0;
    do
    {
      v28 = v81[v27 - 2] & 0x7F;
      if (v28 >= 0x40)
        goto LABEL_81;
      v25 &= ~(1 << v28);
      v27 += 2;
    }
    while (2 * v16 != v27);
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
    v29.i16[0] = vaddlv_u8(v29);
    v30 = v29.i32[0];
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.i32[0] + v30)
    {
      v32 = 0;
      if (v16 <= 1)
        v33 = 1;
      else
        v33 = v16;
      v34 = 2 * v33;
      while (1)
      {
        v35 = v81[v32 - 1];
        if ((v35 & 0x7Fu) >= 0x40)
          goto LABEL_81;
        if (((v25 >> (v35 & 0x7F)) & 1) != 0)
          break;
        v32 += 2;
        if (v34 == v32)
          goto LABEL_57;
      }
      v36 = v81[v32 - 2];
      if (v36 != v35)
      {
        if ((char)v36 == 63)
        {
          v37 = *(_DWORD *)(a2 + 200);
          v38 = *(_DWORD *)(a2 + 192);
          if (v35 == 31)
            goto LABEL_51;
          v40 = v35 & 0x1F | 0xD2800000;
        }
        else
        {
          v37 = *(_DWORD *)(a2 + 200);
          v38 = *(_DWORD *)(a2 + 192);
          v39 = (char)v35 == 31 || (char)v36 == 31;
          if (!v39)
          {
            v40 = v35 & 0xFFE0FFFF | ((v36 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v40 = (char)v35 | (32 * (char)v36) | 0x91000000;
        }
LABEL_52:
        if (v37 + 4 > v38)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
          v37 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v37) = v40;
        *(_DWORD *)(a2 + 200) += 4;
        v26 = v78;
      }
      memmove(&v81[v32 - 2], &v81[v32], 2 * v26 - v32 - 2);
      v16 = v78 - 1;
      goto LABEL_56;
    }
    v41 = v80;
    v76 = HIBYTE(v80);
    JSC::MacroAssemblerARM64::swap(a2, (char)v80, SHIBYTE(v80), v19, v20, v21, v22, v23);
    memmove(&v80, v81, 2 * v78 - 2);
    v42 = v78 - 1;
    v39 = v78 == 1;
    v79 = v42;
    v43 = (unsigned __int8 *)&v80;
    v44 = &v81[2 * v42 - 2];
    if (v39)
    {
      v51 = 0;
      v52 = 0;
      v47 = 0;
      v17 = v44;
    }
    else
    {
      v45 = 2 * v42;
      v46 = &v80;
      while (*(unsigned __int8 *)v46 != v76)
      {
        ++v46;
        v45 -= 2;
        if (!v45)
          goto LABEL_35;
      }
      *(_BYTE *)v46 = v41;
LABEL_35:
      v47 = 0;
      v48 = (char *)&v80;
      v17 = v44;
      v49 = v44;
      do
      {
        if (*v43 == v43[1])
        {
          v50 = v43;
          if (v49 != &v81[2 * v79 - 2])
          {
            v75 = v47;
            v77 = v44;
            if (v43 == v17)
            {
              v50 = v49;
            }
            else
            {
              v73 = v48 - (char *)v17;
              v74 = v49;
              memmove(v49, v17, v48 - (char *)v17);
              v50 = &v74[v73];
            }
            v44 = v77;
            v47 = v75;
          }
          v17 = v43 + 2;
          ++v47;
          v49 = v50;
        }
        v43 += 2;
        v48 += 2;
      }
      while (v43 < v44);
      v51 = v79;
      v52 = v79;
      v44 = v49;
    }
    v53 = &v81[2 * v51 - 2];
    if (v17 != v53)
    {
      v54 = v47;
      memmove(v44, v17, v53 - v17);
      v47 = v54;
      v52 = v79;
    }
    v16 = v52 - v47;
LABEL_56:
    v78 = v16;
LABEL_57:
    ;
  }
  while (v16);
LABEL_60:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, a5, 0, v19, v20, v21, v22, v23);
  else
    JSC::MacroAssemblerARM64::load64(a2, ((_QWORD)a4 << 35) + 0x380000001ALL, 0, v19, v20, v21, v22, v23);
  JSC::DFG::SpeculativeJIT::appendCall(a2, (uint64_t)operationCompareStrictEqCell, v55, v56, v57, v58, v59, v60, a1);
  LOWORD(a1) = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<unsigned long (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v61, v62, v63, v64, v65, v66, v67);
  if ((_DWORD)v12)
  {
    if ((_DWORD)v12 == 31)
    {
      LODWORD(a5) = -1862270945;
    }
    else if ((_DWORD)v12 == -1)
    {
      LODWORD(a5) = -1442774017;
    }
    else
    {
      LODWORD(a5) = v12 | 0xAA0003E0;
    }
    a4 = (unsigned int *)(a2 + 200);
    v68 = *(_DWORD *)(a2 + 200);
    v12 = (JSC::AssemblerBuffer *)(a2 + 56);
    if (v68 + 4 > *(_DWORD *)(a2 + 192))
    {
LABEL_82:
      JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
      v68 = *a4;
    }
    *(_DWORD *)(*(_QWORD *)v12 + v68) = a5;
    *a4 += 4;
  }
  v69 = *(_DWORD *)(a2 + 5764);
  if (v69)
  {
    v70 = v69 - 1;
    v71 = 16 * (v69 - 1);
    while (*(_DWORD *)(a2 + 5764) > v70)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a2 + 5752) + v71, v18, v19, v20, v21, v22, v23);
      v71 -= 16;
      if (--v70 == -1)
        goto LABEL_73;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_73:
    *(_BYTE *)(a2 + 5768) = 0;
    if (*(_DWORD *)(a2 + 5760))
    {
      if (*(_DWORD *)(a2 + 5764))
        *(_DWORD *)(a2 + 5764) = 0;
      v72 = *v15;
      if (*v15)
      {
        *(_QWORD *)(a2 + 5752) = 0;
        *(_DWORD *)(a2 + 5760) = 0;
        WTF::fastFree(v72, v17, v18, v19, v20, v21, v22, v23);
      }
    }
    if ((unsigned __int16)a1 >= 0x100u)
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)a1, v18, v19, v20, v21, v22, v23);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::branchTest32<JSC::ARM64Registers::RegisterID>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x8_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, a2, a3, a5, a6, a7, a8, (uint64_t)&v21, a9);
  result = a1 + 5264;
  v17 = v22;
  v23 = v21;
  v24 = v22;
  v25 = a4;
  v18 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v18 == *(_DWORD *)(a1 + 5272))
  {
    result = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v18 + 1), (unint64_t)&v23, v11, v12, v13, v14, v15);
    v20 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v20 = *(_DWORD *)result;
    *(_QWORD *)(v20 + 4) = *(_QWORD *)(result + 4);
    *(_QWORD *)(v20 + 16) = *(_QWORD *)(result + 16);
  }
  else
  {
    v19 = *(_QWORD *)result + 24 * v18;
    *(_DWORD *)v19 = v21;
    *(_QWORD *)(v19 + 4) = v17;
    *(_QWORD *)(v19 + 16) = a4;
  }
  ++*(_DWORD *)(a1 + 5276);
  return result;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, unsigned int a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  uint64_t v13;
  _DWORD *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  _BYTE *v21;
  WTF *v22;
  WTF *v23;
  unsigned int v24;
  int v25;
  _BYTE *v26;
  WTF *v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  WTF *v38;
  WTF *v41;
  unsigned int v42;
  _BYTE v43[24];
  WTF *v44;
  unsigned int v45;
  unsigned int v46;
  _BYTE v47[24];
  WTF *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[24];

  v13 = *((unsigned int *)a2 + 3);
  v41 = (WTF *)v43;
  v42 = v13;
  if (v13 < 3)
  {
    v14 = a3;
    v15 = v43;
    if (!(_DWORD)v13)
      goto LABEL_8;
  }
  else
  {
    if (v13 >= 0x15555556)
      goto LABEL_36;
    v14 = a3;
    v15 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v13));
    v41 = (WTF *)v15;
    LODWORD(v13) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v13)
      goto LABEL_8;
  }
  v16 = *a2;
  v17 = *a2 + 12 * v13;
  do
  {
    *(_DWORD *)v15 = *(_DWORD *)v16;
    *(_QWORD *)(v15 + 4) = *(_QWORD *)(v16 + 4);
    v16 += 12;
    v15 += 12;
  }
  while (v16 != v17);
LABEL_8:
  v18 = WTF::fastMalloc((WTF *)0xB8);
  v19 = v42;
  v44 = (WTF *)v47;
  v45 = 2;
  v46 = v42;
  if (v42 < 3)
  {
    v20 = a7;
    v21 = v47;
  }
  else
  {
    if (v42 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C9C3F4);
    }
    v20 = a7;
    v21 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v42));
    v45 = 12 * v42 / 0xC;
    v44 = (WTF *)v21;
    v19 = v42;
  }
  if (v19)
  {
    v22 = v41;
    v23 = (WTF *)((char *)v41 + 12 * v19);
    do
    {
      *(_DWORD *)v21 = *(_DWORD *)v22;
      *(_QWORD *)(v21 + 4) = *(_QWORD *)((char *)v22 + 4);
      v22 = (WTF *)((char *)v22 + 12);
      v21 += 12;
    }
    while (v22 != v23);
  }
  v24 = v46;
  v48 = (WTF *)v51;
  v49 = 2;
  v50 = v46;
  if (v46 < 3)
  {
    v26 = v51;
    if (!v46)
      goto LABEL_22;
LABEL_20:
    v27 = v44;
    v28 = (WTF *)((char *)v44 + 12 * v24);
    do
    {
      *(_DWORD *)v26 = *(_DWORD *)v27;
      *(_QWORD *)(v26 + 4) = *(_QWORD *)((char *)v27 + 4);
      v27 = (WTF *)((char *)v27 + 12);
      v26 += 12;
    }
    while (v27 != v28);
    goto LABEL_22;
  }
  if (v46 >= 0x15555556)
  {
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197C9C3ECLL);
  }
  v25 = 12 * v46;
  v26 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v46));
  v49 = (v25 & 0xFFFFFFFC) / 0xC;
  v48 = (WTF *)v26;
  v24 = v46;
  if (v46)
    goto LABEL_20;
LABEL_22:
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v18, (uint64_t *)&v48, v14, 0, 0, a4);
  v36 = v48;
  if (v51 != (_BYTE *)v48 && v48 != 0)
  {
    v48 = 0;
    v49 = 0;
    WTF::fastFree((unint64_t)v36, v29, v30, v31, v32, v33, v34, v35);
  }
  *(_QWORD *)v18 = &off_1E3574CC8;
  *(_QWORD *)(v18 + 152) = operationCompareStrictEq;
  *(_QWORD *)(v18 + 160) = a5;
  *(_QWORD *)(v18 + 168) = a6;
  *(_BYTE *)(v18 + 176) = v20;
  *(_BYTE *)(v18 + 177) = a8;
  *a1 = v18;
  v38 = v44;
  if (v47 != (_BYTE *)v44 && v44)
  {
    v44 = 0;
    v45 = 0;
    WTF::fastFree((unint64_t)v38, v29, v30, v31, v32, v33, v34, v35);
  }
  if (v43 != (_BYTE *)v41)
  {
    if (v41)
      WTF::fastFree((unint64_t)v41, v29, v30, v31, v32, v33, v34, v35);
  }
}

void JSC::DFG::SpeculativeJIT::genericJSValueNonPeepholeStrictEq(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int *v102;
  int v103;
  int v104;
  int v105;
  unsigned int v106;
  unsigned int *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 v119;
  unsigned int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int8x8_t v129;
  int v130;
  unsigned int v131;
  _DWORD *v132;
  uint64_t *v133;
  int v134;
  char *v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  JSC::DFG::Node *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  unsigned int v155;
  _DWORD *v156;
  uint64_t *v157;
  int v158;
  char *v159;
  unsigned int v160;
  unsigned int v161;
  _BYTE *v162;
  WTF *v163;
  WTF *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  _BYTE *v169;
  WTF *v170;
  WTF *v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  char *v199;
  int v200;
  unint64_t v201;
  uint64_t v202;
  int v203;
  unsigned int v204;
  WTF *v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  JSC::DFG::Node *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  JSC::ARM64LogicalImmediate *v250;
  WTF *v251;
  unsigned int v252;
  _BYTE v253[24];
  uint64_t v254;
  int v255;
  uint64_t v256;
  unsigned int v257[3];
  int v258;
  uint64_t v259;
  uint64_t v260;
  unsigned __int8 v261;
  WTF *v262;
  uint64_t v263;
  _BYTE v264[24];
  uint64_t v265;
  unsigned __int8 v266;
  uint64_t *v267;
  uint64_t v268;
  char v269;
  uint64_t *v270;
  uint64_t v271;
  char v272;
  _BYTE *v273;
  unsigned int v274;
  unsigned int v275;
  _BYTE v276[29];
  char v277;
  __int16 v278;
  uint64_t (*v279)(JSC::JSGlobalObject *, JSC::JSBigInt *, JSC::JSBigInt *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int8x16_t);
  _DWORD *v280;
  char v281;
  char v282;
  __int128 v283;

  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v270, this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v267, this, *((_QWORD *)a2 + 4), v11, v12, v13, v14, v15);
  JSC::DFG::SpeculativeJIT::speculate(this, (uint64_t)a2, *((_QWORD *)a2 + 3), v16, v17, v18, v19, v20);
  JSC::DFG::SpeculativeJIT::speculate(this, (uint64_t)a2, *((_QWORD *)a2 + 4), v21, v22, v23, v24, v25);
  v33 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v270, v26, v27, v28, v29, v30, v31, v32);
  v250 = (JSC::ARM64LogicalImmediate *)JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v267, v34, v35, v36, v37, v38, v39, v40);
  v48 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v270, v41, v42, v43, v44, v45, v46, v47);
  v56 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v267, v49, v50, v51, v52, v53, v54, v55);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v265, this, v57, v58, v59, v60, v61, v62);
  v63 = v266;
  v64 = (char)v266;
  JSC::DFG::SpeculativeJIT::use(v270, (JSC::DFG::Node *)(v271 & 0xFF00FFFFFFFFFFFFLL), v65, v66, v67, v68, v69, v70);
  JSC::DFG::SpeculativeJIT::use(v267, (JSC::DFG::Node *)(v268 & 0xFF00FFFFFFFFFFFFLL), v71, v72, v73, v74, v75, v76);
  v83 = *((_QWORD *)a2 + 3);
  v84 = *((_QWORD *)this + 688);
  v85 = *(unsigned int *)((v83 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v86 = (_QWORD *)(v84 + 24);
  v87 = (_QWORD *)(v84 + 8);
  if ((v83 & 1) != 0)
    v88 = v86;
  else
    v88 = v87;
  v89 = *v88 + 32 * v85;
  v90 = (void *)*((unsigned int *)this + 1396);
  if ((_DWORD)v90 != *(_DWORD *)(v89 + 20))
  {
    if ((*(_QWORD *)(v89 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v89, v90, v77, v78, v79, v80, v81, v82);
    else
      *(_DWORD *)(v89 + 20) = (_DWORD)v90;
  }
  if ((*(_QWORD *)(v89 + 8) & 0xFFFFD7FF00000008) == 0
    && JSC::DFG::SpeculativeJIT::isKnownCell(this, *((_QWORD *)a2 + 4) & 0xFF00FFFFFFFFFFFFLL, v77, v78, v79, v80, v81, v82))
  {
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v33, (uint64_t)v250, v79, v80, v81, v82, (uint64_t)&v273);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, a3 ^ 1, v64, v209, v210, v211, v212, v213);
    JSC::ARM64Assembler::label((_DWORD *)this + 8, v214, v215, v216, v217, v218, v219, v220, (int *)&v283);
    JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), 335544320, v221, v222, v223, v224, v225, v226);
    if (*((_BYTE *)this + 328))
      v233 = 69;
    else
      v233 = 65;
    v262 = (WTF *)v283;
    LOBYTE(v263) = v233;
    *(_WORD *)((char *)&v263 + 1) = 15;
    BYTE3(v263) = -1;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v273, (uint64_t)this, v227, v228, v229, v230, v231, v232);
    v240 = (unsigned int *)JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v234, v235, v236, v237, v238, v239);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<unsigned long (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>((int *)&v283, (uint64_t)this, v64, v240, v241, v33, v250, v242);
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v262, (uint64_t)this, v243, v244, v245, v246, v247, v248);
    JSC::DFG::SpeculativeJIT::unblessedBooleanResult((uint64_t)this, v64, *((_QWORD *)this + 497), 1);
    goto LABEL_78;
  }
  v249 = a3;
  v262 = (WTF *)v264;
  v263 = 2;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v260, this, v77, v78, v79, v80, v81, v82);
  if (v48 != (_DWORD)v64)
  {
    if (v48 == 63)
    {
      if ((_DWORD)v64 != 31)
      {
        v98 = v63 & 0x1F;
        v99 = -763363328;
        goto LABEL_11;
      }
    }
    else if (v48 != 31 && (_DWORD)v64 != 31)
    {
      v98 = v63 & 0xFFE0FFFF | ((v48 & 0x1F) << 16);
      v99 = -1442839584;
LABEL_11:
      v100 = v98 | v99;
      v102 = (unsigned int *)((char *)this + 200);
      v101 = *((_DWORD *)this + 50);
      if (v101 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v91, v92, v93, v94, v95, v96, v97);
        v101 = *v102;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v101) = v100;
      *v102 += 4;
      goto LABEL_14;
    }
    v98 = v64 | (32 * v48);
    v99 = -1862270976;
    goto LABEL_11;
  }
LABEL_14:
  if (v261 == v56)
    goto LABEL_22;
  if (v56 == 63)
  {
    if (v261 != 31)
    {
      v103 = v261 & 0x1F;
      v104 = -763363328;
      goto LABEL_19;
    }
LABEL_108:
    v103 = (char)v261 | (32 * v56);
    v104 = -1862270976;
    goto LABEL_19;
  }
  if (v56 == 31 || v261 == 31)
    goto LABEL_108;
  v103 = v261 | ((v56 & 0x1F) << 16);
  v104 = -1442839584;
LABEL_19:
  v105 = v103 | v104;
  v107 = (unsigned int *)((char *)this + 200);
  v106 = *((_DWORD *)this + 50);
  if (v106 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v91, v92, v93, v94, v95, v96, v97);
    v106 = *v107;
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v106) = v105;
  *v107 += 4;
LABEL_22:
  JSC::MacroAssemblerARM64::add64((uint64_t)this, 0x2000000000000, v64, v64, v94, v95, v96, v97);
  JSC::MacroAssemblerARM64::add64((uint64_t)this, 0x2000000000000, (char)v261, (char)v261, v108, v109, v110, v111);
  v119 = v261;
  v120 = *((_DWORD *)this + 50);
  if (v120 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v112, v113, v114, v115, v116, v117, v118);
    v120 = *((_DWORD *)this + 50);
  }
  v121 = v63 & 0x1F;
  *(_DWORD *)(*((_QWORD *)this + 7) + v120) = (v121 << 16) | (32 * (v119 & 0x1F)) | v121 | 0xAA000000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 2, v64, 0x4000000000000, v115, v116, v117, v118, (uint64_t)&v258);
  v130 = v258;
  if (v258 != -1)
  {
    v131 = HIDWORD(v263);
    if (HIDWORD(v263) == (_DWORD)v263)
    {
      v132 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v262, (void *)(HIDWORD(v263) + 1), (unint64_t)&v258, v124, v125, v126, v127, v128);
      v134 = *v132;
      v133 = (uint64_t *)(v132 + 1);
      v130 = v134;
      v131 = HIDWORD(v263);
    }
    else
    {
      v133 = &v259;
    }
    v135 = (char *)v262 + 12 * v131;
    *(_DWORD *)v135 = v130;
    *(_QWORD *)(v135 + 4) = *v133;
    ++HIDWORD(v263);
  }
  v136 = (v56 & 0x1F) << 16;
  if (v48 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v136 | 0xEB2063FF, v123, v124, v125, v126, v127, v128);
    v138 = *((_DWORD *)this + 50);
  }
  else
  {
    v137 = *((_DWORD *)this + 50);
    if (v137 + 4 > *((_DWORD *)this + 48))
    {
      v129 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v122, v123, v124, v125, v126, v127, v128).n128_u64[0];
      v137 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v137) = v136 | (32 * (v48 & 0x1F)) | 0xEB00001F;
    v138 = *((_DWORD *)this + 50) + 4;
    *((_DWORD *)this + 50) = v138;
  }
  if (v138 + 4 > *((_DWORD *)this + 48))
  {
    v129 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v122, v123, v124, v125, v126, v127, v128).n128_u64[0];
    v138 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v138) = v121 | 0x1A9F17E0;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v64, 0xFFFFFFFFLL, v125, v126, v127, v128, (uint64_t)v257, v129);
  v146 = *((_DWORD *)this + 50);
  if (v146 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v139, v140, v141, v142, v143, v144, v145);
    v146 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v146) = v136 | (32 * (v48 & 0x1F)) | v121 | 0xAA000000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v64, 28, v142, v143, v144, v145, (uint64_t)&v255);
  v154 = v255;
  if (v255 != -1)
  {
    v155 = HIDWORD(v263);
    if (HIDWORD(v263) == (_DWORD)v263)
    {
      v156 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v262, (void *)(HIDWORD(v263) + 1), (unint64_t)&v255, v149, v150, v151, v152, v153);
      v158 = *v156;
      v157 = (uint64_t *)(v156 + 1);
      v154 = v158;
      v155 = HIDWORD(v263);
    }
    else
    {
      v157 = &v256;
    }
    v159 = (char *)v262 + 12 * v155;
    *(_DWORD *)v159 = v154;
    *(_QWORD *)(v159 + 4) = *v157;
    ++HIDWORD(v263);
  }
  v160 = *((_DWORD *)this + 50);
  if (v160 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v147, (uint64_t)v148, v149, v150, v151, v152, v153);
    v160 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v160) = v121 | 0xD2800000;
  *((_DWORD *)this + 50) += 4;
  v161 = HIDWORD(v263);
  v251 = (WTF *)v253;
  v252 = HIDWORD(v263);
  if (HIDWORD(v263) < 3)
  {
    v162 = v253;
  }
  else
  {
    if (HIDWORD(v263) >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197C9CE30);
    }
    v162 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v263)));
    v251 = (WTF *)v162;
    v161 = HIDWORD(v263);
  }
  if (v161)
  {
    v163 = v262;
    v164 = (WTF *)((char *)v262 + 12 * v161);
    do
    {
      *(_DWORD *)v162 = *(_DWORD *)v163;
      *(_QWORD *)(v162 + 4) = *(_QWORD *)((char *)v163 + 4);
      v163 = (WTF *)((char *)v163 + 12);
      v162 += 12;
    }
    while (v163 != v164);
  }
  v165 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v148, v149, v150, v151, v152, v153);
  v167 = v166;
  v168 = v252;
  v273 = v276;
  v274 = 2;
  v275 = v252;
  if (v252 < 3)
  {
    v169 = v276;
  }
  else
  {
    if (v252 >= 0x15555556)
      goto LABEL_112;
    v169 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v252));
    v274 = 12 * v252 / 0xC;
    v273 = v169;
    v168 = v252;
  }
  if (v168)
  {
    v170 = v251;
    v171 = (WTF *)((char *)v251 + 12 * v168);
    do
    {
      *(_DWORD *)v169 = *(_DWORD *)v170;
      *(_QWORD *)(v169 + 4) = *(_QWORD *)((char *)v170 + 4);
      v170 = (WTF *)((char *)v170 + 12);
      v169 += 12;
    }
    while (v170 != v171);
  }
  *(_QWORD *)&v283 = v165;
  *((_QWORD *)&v283 + 1) = v167;
  v282 = v33;
  v281 = (char)v250;
  v279 = operationCompareStrictEq;
  v280 = this;
  v278 = 0;
  v277 = v64;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<unsigned long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<unsigned long> (*&)(JSC::JSGlobalObject *,long long,long long),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::JSValueRegs&,JSC::JSValueRegs&>((uint64_t *)&v273, &v280, (uint64_t *)&v279, (unsigned __int8 *)&v278 + 1, (char *)&v278, &v277, &v283, &v282, &v254, &v281);
  v179 = (unint64_t)v273;
  if (v276 != v273 && v273)
  {
    v273 = 0;
    v274 = 0;
    WTF::fastFree(v179, v172, v173, v174, v175, v176, v177, v178);
  }
  v180 = (_QWORD *)((char *)this + 5656);
  v181 = *((unsigned int *)this + 1417);
  if ((_DWORD)v181 == *((_DWORD *)this + 1416))
  {
    v183 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v180, v181 + 1, (unint64_t)&v254);
    v181 = *((unsigned int *)this + 1417);
    v182 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v181);
  }
  else
  {
    v182 = (uint64_t *)(*v180 + 8 * v181);
    v183 = &v254;
  }
  v184 = *v183;
  *v183 = 0;
  *v182 = v184;
  *((_DWORD *)this + 1417) = v181 + 1;
  v185 = v254;
  v254 = 0;
  if (v185)
    (*(void (**)(uint64_t))(*(_QWORD *)v185 + 8))(v185);
  if (v253 != (_BYTE *)v251 && v251)
    WTF::fastFree((unint64_t)v251, v172, v173, v174, v175, v176, v177, v178);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v257, (uint64_t)this, v173, v174, v175, v176, v177, v178);
  JSC::MacroAssemblerARM64::xor64((uint64_t)this, (JSC::ARM64LogicalImmediate *)v249, v64, v64, v186, v187, v188, v189);
  v190 = *((_QWORD *)this + 497);
  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v64, v64);
  if ((int)v64 > 15)
    v198 = -1;
  else
    v198 = v64;
  v199 = (char *)this + 12 * v198;
  v200 = *(_DWORD *)(v190 + 48);
  *((_DWORD *)v199 + 1194) = v200;
  *((_DWORD *)v199 + 1195) = 4;
  v201 = ~v200;
  if (v201 >= *((unsigned int *)this + 1001))
  {
LABEL_112:
    __break(0xC471u);
    JUMPOUT(0x197C9CE28);
  }
  v202 = *((_QWORD *)this + 499) + 24 * (int)v201;
  v203 = *(_DWORD *)(v190 + 52);
  *(_QWORD *)v202 = v190;
  *(_DWORD *)(v202 + 8) = v203;
  *(_BYTE *)(v202 + 17) = v64;
  *(_DWORD *)(v202 + 12) = 21;
  *(_BYTE *)(v202 + 16) = 0;
  if (v260)
  {
    v204 = (char)v261;
    if ((char)v261 != -1)
    {
      if ((char)v261 > 15)
        v204 = -1;
      --*(_DWORD *)(v260 + 12 * v204 + 4784);
    }
  }
  v205 = v262;
  if (v264 != (_BYTE *)v262 && v262)
  {
    v262 = 0;
    LODWORD(v263) = 0;
    WTF::fastFree((unint64_t)v205, v191, v192, v193, v194, v195, v196, v197);
  }
LABEL_78:
  if (v265)
  {
    v206 = (char)v266;
    if ((char)v266 != -1)
    {
      if ((char)v266 > 15)
        v206 = -1;
      --*(_DWORD *)(v265 + 12 * v206 + 4784);
    }
  }
  if ((v268 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v207 = v269;
    if (v269 > 15)
      v207 = -1;
    --*((_DWORD *)v267 + 3 * v207 + 1196);
  }
  if ((v271 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v208 = v272;
    if (v272 > 15)
      v208 = -1;
    --*((_DWORD *)v270 + 3 * v208 + 1196);
  }
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<unsigned long (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs,JSC::JSValueRegs>(int *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  JSC::AssemblerBuffer *v12;
  unint64_t *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  __int16 *v46;
  int v47;
  char *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  int64_t v73;
  unsigned __int8 *v74;
  int v75;
  unsigned __int8 v76;
  unsigned __int8 *v77;
  unsigned int v78;
  unsigned int v79;
  __int16 v80;
  _BYTE v81[6];

  v8 = a7;
  v12 = (JSC::AssemblerBuffer *)a3;
  v15 = (unint64_t *)(a2 + 5752);
  v16 = 1;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, 1, a2 + 5752, a3, 0xFFFFFFFFLL, 0xFFFFFFFFLL, a7, a8);
  if (a6 == 1)
  {
    if (v8 == 2)
      goto LABEL_60;
    v16 = 0;
  }
  else
  {
    v80 = a6 | 0x100;
    v78 = 1;
    if (v8 == 2)
      goto LABEL_7;
  }
  *(_WORD *)&v81[2 * v16++ - 2] = v8 | 0x200;
  v78 = v16;
  do
  {
LABEL_7:
    v24 = 0;
    v25 = 0;
    v26 = v16;
    do
    {
      if ((v81[v24 - 1] & 0x40) != 0)
      {
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      v25 |= 1 << v81[v24 - 1];
      v24 += 2;
    }
    while (2 * v16 != v24);
    v27 = 0;
    do
    {
      v28 = v81[v27 - 2] & 0x7F;
      if (v28 >= 0x40)
        goto LABEL_81;
      v25 &= ~(1 << v28);
      v27 += 2;
    }
    while (2 * v16 != v27);
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
    v29.i16[0] = vaddlv_u8(v29);
    v30 = v29.i32[0];
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.i32[0] + v30)
    {
      v32 = 0;
      if (v16 <= 1)
        v33 = 1;
      else
        v33 = v16;
      v34 = 2 * v33;
      while (1)
      {
        v35 = v81[v32 - 1];
        if ((v35 & 0x7Fu) >= 0x40)
          goto LABEL_81;
        if (((v25 >> (v35 & 0x7F)) & 1) != 0)
          break;
        v32 += 2;
        if (v34 == v32)
          goto LABEL_57;
      }
      v36 = v81[v32 - 2];
      if (v36 != v35)
      {
        if ((char)v36 == 63)
        {
          v37 = *(_DWORD *)(a2 + 200);
          v38 = *(_DWORD *)(a2 + 192);
          if (v35 == 31)
            goto LABEL_51;
          v40 = v35 & 0x1F | 0xD2800000;
        }
        else
        {
          v37 = *(_DWORD *)(a2 + 200);
          v38 = *(_DWORD *)(a2 + 192);
          v39 = (char)v35 == 31 || (char)v36 == 31;
          if (!v39)
          {
            v40 = v35 & 0xFFE0FFFF | ((v36 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v40 = (char)v35 | (32 * (char)v36) | 0x91000000;
        }
LABEL_52:
        if (v37 + 4 > v38)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
          v37 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v37) = v40;
        *(_DWORD *)(a2 + 200) += 4;
        v26 = v78;
      }
      memmove(&v81[v32 - 2], &v81[v32], 2 * v26 - v32 - 2);
      v16 = v78 - 1;
      goto LABEL_56;
    }
    v41 = v80;
    v76 = HIBYTE(v80);
    JSC::MacroAssemblerARM64::swap(a2, (char)v80, SHIBYTE(v80), v19, v20, v21, v22, v23);
    memmove(&v80, v81, 2 * v78 - 2);
    v42 = v78 - 1;
    v39 = v78 == 1;
    v79 = v42;
    v43 = (unsigned __int8 *)&v80;
    v44 = &v81[2 * v42 - 2];
    if (v39)
    {
      v51 = 0;
      v52 = 0;
      v47 = 0;
      v17 = v44;
    }
    else
    {
      v45 = 2 * v42;
      v46 = &v80;
      while (*(unsigned __int8 *)v46 != v76)
      {
        ++v46;
        v45 -= 2;
        if (!v45)
          goto LABEL_35;
      }
      *(_BYTE *)v46 = v41;
LABEL_35:
      v47 = 0;
      v48 = (char *)&v80;
      v17 = v44;
      v49 = v44;
      do
      {
        if (*v43 == v43[1])
        {
          v50 = v43;
          if (v49 != &v81[2 * v79 - 2])
          {
            v75 = v47;
            v77 = v44;
            if (v43 == v17)
            {
              v50 = v49;
            }
            else
            {
              v73 = v48 - (char *)v17;
              v74 = v49;
              memmove(v49, v17, v48 - (char *)v17);
              v50 = &v74[v73];
            }
            v44 = v77;
            v47 = v75;
          }
          v17 = v43 + 2;
          ++v47;
          v49 = v50;
        }
        v43 += 2;
        v48 += 2;
      }
      while (v43 < v44);
      v51 = v79;
      v52 = v79;
      v44 = v49;
    }
    v53 = &v81[2 * v51 - 2];
    if (v17 != v53)
    {
      v54 = v47;
      memmove(v44, v17, v53 - v17);
      v47 = v54;
      v52 = v79;
    }
    v16 = v52 - v47;
LABEL_56:
    v78 = v16;
LABEL_57:
    ;
  }
  while (v16);
LABEL_60:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, a5, 0, v19, v20, v21, v22, v23);
  else
    JSC::MacroAssemblerARM64::load64(a2, ((_QWORD)a4 << 35) + 0x380000001ALL, 0, v19, v20, v21, v22, v23);
  JSC::DFG::SpeculativeJIT::appendCall(a2, (uint64_t)operationCompareStrictEqCell, v55, v56, v57, v58, v59, v60, a1);
  LOWORD(a1) = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<unsigned long (*)(JSC::JSGlobalObject *,JSC::JSCell *,JSC::JSCell *),JSC::ARM64Registers::RegisterID,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v61, v62, v63, v64, v65, v66, v67);
  if ((_DWORD)v12)
  {
    if ((_DWORD)v12 == 31)
    {
      LODWORD(a5) = -1862270945;
    }
    else if ((_DWORD)v12 == -1)
    {
      LODWORD(a5) = -1442774017;
    }
    else
    {
      LODWORD(a5) = v12 | 0xAA0003E0;
    }
    a4 = (unsigned int *)(a2 + 200);
    v68 = *(_DWORD *)(a2 + 200);
    v12 = (JSC::AssemblerBuffer *)(a2 + 56);
    if (v68 + 4 > *(_DWORD *)(a2 + 192))
    {
LABEL_82:
      JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
      v68 = *a4;
    }
    *(_DWORD *)(*(_QWORD *)v12 + v68) = a5;
    *a4 += 4;
  }
  v69 = *(_DWORD *)(a2 + 5764);
  if (v69)
  {
    v70 = v69 - 1;
    v71 = 16 * (v69 - 1);
    while (*(_DWORD *)(a2 + 5764) > v70)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a2 + 5752) + v71, v18, v19, v20, v21, v22, v23);
      v71 -= 16;
      if (--v70 == -1)
        goto LABEL_73;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_73:
    *(_BYTE *)(a2 + 5768) = 0;
    if (*(_DWORD *)(a2 + 5760))
    {
      if (*(_DWORD *)(a2 + 5764))
        *(_DWORD *)(a2 + 5764) = 0;
      v72 = *v15;
      if (*v15)
      {
        *(_QWORD *)(a2 + 5752) = 0;
        *(_DWORD *)(a2 + 5760) = 0;
        WTF::fastFree(v72, v17, v18, v19, v20, v21, v22, v23);
      }
    }
    if ((unsigned __int16)a1 >= 0x100u)
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)a1, v18, v19, v20, v21, v22, v23);
  }
}

void JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Graph **this, JSC::AssemblerBuffer ***a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  JSC::DFG::Graph *v24;
  JSC::ARM64LogicalImmediate *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  unsigned int *v115;
  unsigned int v116;
  uint64_t *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  uint64_t v130;
  unsigned int *v131;
  void *v132;
  unsigned int v133;
  unsigned int v134;
  int j;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int k;
  unsigned int v151;
  int v152;
  char v153;
  uint64_t v154;
  unint64_t v155;
  WTF *v156;
  unsigned int *v157;
  __int16 v158;
  unsigned __int8 *v159;
  void *v160;
  int v161;
  _BYTE *v162;
  char v163;
  __int16 v164;
  char v165;
  __int16 v166;
  void *v167;
  int v168;
  char *v169;
  char v170;
  __int16 v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  char *v175;
  void *v176;
  int v177;
  char v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  unsigned int v201;
  int v202;
  unsigned int v203;
  char v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  unint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  WTF *v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  JSC::ARM64LogicalImmediate *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  unint64_t v252;
  uint64_t v253;
  int v254;
  WTF *v255;
  unsigned int v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int *v263;
  JSC::AssemblerBuffer *v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  uint64_t v268;
  unint64_t v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  unsigned int v273;
  uint8x8_t v274;
  __int32 v275;
  uint8x8_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  int v281;
  int v282;
  unsigned int v283;
  unsigned int v285;
  void *v286;
  uint64_t v287;
  unsigned int *v288;
  unsigned int v289;
  int v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int i;
  unsigned int v295;
  int v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  int v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  int v325;
  unint64_t v326;
  uint64_t v327;
  int v328;
  unsigned int v329;
  int v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  uint64_t v349;
  WTF *v350;
  unint64_t v351;
  unint64_t v352;
  unsigned int v353;
  WTF *v354;
  void *v355;
  char *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  void *v364;
  uint64_t v365;
  unint64_t v366;
  void *v367;
  _BYTE *v368;
  int v369;
  uint64_t v370;
  int v371;
  void **v372;
  unint64_t v373;
  int v374;
  unint64_t v375;
  unsigned int v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int n;
  uint64_t v391;
  unint64_t v392;
  uint64_t v393;
  unint64_t *v394;
  char *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  void *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  int v421;
  int v422;
  int v423;
  unsigned int v424;
  uint64_t v425;
  unint64_t v426;
  unsigned int ii;
  unsigned int v428;
  char v429;
  _QWORD *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  unsigned int v440;
  int v441;
  unsigned int v442;
  uint64_t v443;
  WTF *v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  unsigned int v454;
  unsigned int v455;
  unsigned int *v456;
  JSC::AssemblerBuffer *v457;
  unsigned int v458;
  unsigned int v459;
  unint64_t v460;
  void **v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unsigned int v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  uint64_t v472;
  unint64_t v473;
  char *v474;
  uint64_t v475;
  uint64_t v476;
  unsigned int v477;
  uint8x8_t v478;
  __int32 v479;
  uint8x8_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  int v485;
  unsigned int v487;
  unsigned int v488;
  void *v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  const void *v493;
  void *v494;
  void *v495;
  void *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  WTF *v503;
  WTF *v504;
  WTF *v505;
  WTF *v506;
  unint64_t v507;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unsigned int v516;
  unint64_t v517;
  uint64_t v518;
  void **v519;
  unsigned int *v520;
  uint64_t v521;
  unsigned int v522;
  uint64_t v523;
  uint64_t v524;
  unsigned int *v525;
  JSC::ARM64LogicalImmediate *v526;
  JSC::DFG::Node *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  JSC::AssemblerBuffer *v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  JSC::ARM64LogicalImmediate *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  JSC::DFG::Node *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unsigned int v586;
  JSC::AssemblerBuffer *v587;
  unsigned int v588;
  char *v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unsigned int v598;
  unsigned int v599;
  uint64_t v600;
  unint64_t v601;
  char *v602;
  uint64_t v603;
  uint64_t v604;
  unsigned int v605;
  uint8x8_t v606;
  __int32 v607;
  uint8x8_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  int v612;
  int v613;
  int v614;
  unsigned int v615;
  unsigned int v616;
  JSC::AssemblerBuffer *v618;
  char v619;
  char v620;
  uint64_t v621;
  unsigned __int8 *v622;
  char *v623;
  uint64_t v624;
  _BYTE *v625;
  int v626;
  unsigned __int8 *v627;
  char *v628;
  unsigned __int8 *v629;
  uint64_t v630;
  int v631;
  char *v632;
  uint64_t v633;
  uint64_t v634;
  void *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  unsigned int v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  char v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  unsigned int v682;
  unsigned int v683;
  unsigned int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  _QWORD *v693;
  uint64_t v694;
  JSC::DFG::Node *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  int v701;
  unsigned int v702;
  char v703;
  uint64_t v704;
  unint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unsigned int v733;
  int v734;
  unsigned int v735;
  void *v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  WTF *v743;
  char v744;
  unsigned int v745;
  uint64_t v746;
  unint64_t v747;
  char *v748;
  uint64_t v749;
  uint64_t v750;
  unsigned int v751;
  uint8x8_t v752;
  __int32 v753;
  uint8x8_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  int v758;
  int v759;
  unsigned int v761;
  void *v762;
  uint64_t v763;
  uint64_t v764;
  BOOL v765;
  uint64_t v766;
  uint64_t v767;
  BOOL v768;
  uint64_t v769;
  uint64_t v770;
  int v771;
  unsigned int v772;
  unsigned int v773;
  unsigned int v774;
  uint64_t v775;
  unint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  void *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  char v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  void *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  unsigned int v819;
  unsigned int v820;
  uint64_t v821;
  unint64_t v822;
  WTF *v823;
  uint64_t v824;
  uint64_t v825;
  unsigned int v826;
  uint8x8_t v827;
  __int32 v828;
  uint8x8_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  int v833;
  int v834;
  int v835;
  unsigned int v836;
  unsigned int v838;
  char v839;
  unsigned __int8 v840;
  uint64_t v841;
  WTF *v842;
  uint64_t v843;
  WTF *v844;
  uint64_t v845;
  uint64_t v846;
  BOOL v847;
  uint64_t v848;
  unint64_t v849;
  uint64_t v850;
  uint64_t v851;
  BOOL v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  unsigned int v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t (*v865)(JSC::CallFrame *, const WTF::StringImpl *, void *, int8x16_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  int8x8_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  unsigned int v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  BOOL v908;
  uint64_t v909;
  int v910;
  uint64_t v911;
  uint64_t v912;
  BOOL v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  char *v918;
  char v919;
  char v920;
  unint64_t v921;
  unsigned int v922;
  unsigned int v923;
  unsigned int v924;
  unsigned int v925;
  char v926;
  char v927;
  uint64_t v928;
  unsigned __int8 *v929;
  char *v930;
  uint64_t v931;
  int v932;
  char *v933;
  void *v934;
  uint64_t v935;
  unsigned int v936;
  JSC::DFG::Graph *v937;
  char v938;
  char v939;
  uint64_t v940;
  unsigned __int8 *v941;
  uint64_t v942;
  int v943;
  char *v944;
  uint64_t v945;
  _BYTE *v946;
  unsigned __int8 *v947;
  char *v948;
  unsigned __int8 *v949;
  int64_t v950;
  uint64_t v951;
  _BYTE *v952;
  unsigned __int8 *v953;
  char *v954;
  unsigned __int8 *v955;
  uint64_t v956;
  uint64_t v957;
  char v958;
  uint64_t v959;
  char *v960;
  uint64_t v961;
  int v962;
  char *v963;
  uint64_t v964;
  uint64_t v965;
  int64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  _BYTE *v970;
  char *v971;
  char *v972;
  unsigned int v973;
  int64_t v974;
  uint64_t v975;
  int v976;
  uint64_t v977;
  unsigned int v978;
  JSC::ARM64LogicalImmediate *v979;
  int v980;
  unsigned __int8 v981;
  void *v982;
  void *v983;
  int v984;
  char *v985;
  char *v986;
  int v987;
  JSC::AssemblerBuffer *v988;
  int v989;
  int v990;
  uint64_t *m;
  uint64_t *v992;
  int v993;
  char v994;
  int __src;
  int __srca;
  char *__srcb;
  JSC::AssemblerBuffer *v998;
  unsigned int v999;
  JSC::AssemblerBuffer *v1000;
  JSC::ARM64LogicalImmediate *v1001;
  char v1002;
  JSC::AssemblerBuffer *v1003;
  int v1004;
  unsigned int v1005;
  JSC::ARM64LogicalImmediate *v1006;
  unsigned int v1007;
  unsigned int v1008;
  int v1009;
  WTF *v1010[2];
  WTF *v1011;
  uint64_t *v1012;
  WTF **v1013;
  WTF *v1014;
  char *v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  JSC::DFG::SpeculativeJIT *v1019;
  uint64_t v1020;
  char v1021;
  uint64_t v1022;
  __int128 v1023;
  char v1024;
  char v1025;
  char v1026;
  JSC::DFG::Node *v1027;
  uint64_t v1028;
  void *__dst[2];
  char *v1030;
  WTF **v1031;
  WTF *v1032;
  uint64_t v1033;
  uint64_t v1034;
  int v1035;
  _BYTE v1036[18];
  void *v1037;
  char v1038;
  _BYTE v1039[10];
  uint64_t v1040;

  v8 = (char *)this;
  v1040 = *MEMORY[0x1E0C80C00];
  v1027 = (JSC::DFG::Node *)a2;
  v9 = *((unsigned __int16 *)a2 + 9);
  switch(*((_WORD *)a2 + 9))
  {
    case 0xF1:
    case 0xFD:
      v10 = 0;
      LODWORD(v15) = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v1026 = 1;
      break;
    case 0xF2:
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v1026 = 7;
      goto LABEL_3;
    case 0xF3:
      LODWORD(v15) = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v1026 = 3;
      v10 = 1;
      break;
    case 0xF4:
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v1026 = 8;
      v10 = 1;
LABEL_3:
      LODWORD(v15) = 1;
      break;
    case 0xF5:
      v10 = 0;
      LODWORD(v15) = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v1026 = 2;
      v14 = 1;
      break;
    case 0xF6:
      v10 = 0;
      LODWORD(v15) = 0;
      v11 = 0;
      v12 = 0;
      v14 = 0;
      v1026 = 2;
      v13 = 1;
      break;
    case 0xF7:
      LODWORD(v15) = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v1026 = 4;
      v10 = 1;
      v14 = 1;
      break;
    case 0xF8:
      LODWORD(v15) = 0;
      v11 = 0;
      v12 = 0;
      v14 = 0;
      v1026 = 4;
      v10 = 1;
      v13 = 1;
      break;
    case 0xF9:
      v10 = 0;
      LODWORD(v15) = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v11 = 1;
      v1026 = 1;
      break;
    case 0xFA:
      v10 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v1026 = 7;
      LODWORD(v15) = 1;
      v11 = 1;
      break;
    case 0xFB:
      v10 = 0;
      LODWORD(v15) = 0;
      v12 = 0;
      v13 = 0;
      v1026 = 2;
      v11 = 1;
      v14 = 1;
      break;
    case 0xFC:
      v10 = 0;
      LODWORD(v15) = 0;
      v12 = 0;
      v14 = 0;
      v1026 = 2;
      v11 = 1;
      v13 = 1;
      break;
    default:
      switch(*((_WORD *)a2 + 9))
      {
        case 0x171:
          v10 = 0;
          LODWORD(v15) = 0;
          v11 = 0;
          v13 = 0;
          v14 = 0;
          v1026 = 5;
          v12 = 1;
          break;
        case 0x172:
          v10 = 0;
          v11 = 0;
          v13 = 0;
          v14 = 0;
          v1026 = 9;
          LODWORD(v15) = 1;
          v12 = 1;
          break;
        case 0x173:
          v10 = 0;
          LODWORD(v15) = 0;
          v11 = 0;
          v13 = 0;
          v1026 = 6;
          v12 = 1;
          v14 = 1;
          break;
        case 0x174:
          v10 = 0;
          LODWORD(v15) = 0;
          v11 = 0;
          v14 = 0;
          v1026 = 6;
          v12 = 1;
          v13 = 1;
          break;
        default:
          JSC::DFG::Graph::logAssertionFailure(this[495], (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x2C9, "void JSC::DFG::SpeculativeJIT::emitCall(Node *)", "bad node type");
          __break(0xC471u);
          JUMPOUT(0x197CA0F6CLL);
      }
      return;
  }
  v16 = 0;
  v1025 = -1;
  v1024 = -1;
  v1033 = 0;
  v1032 = 0;
  v1034 = -1;
  v1035 = -1;
  do
  {
    v17 = (char *)&v1032 + v16;
    v17[28] = 18;
    *(_QWORD *)(v17 + 29) = 0;
    v16 += 9;
  }
  while (v16 != 576);
  *(_WORD *)v1039 = 4863;
  *(_QWORD *)&v1039[2] = 0;
  v993 = v14;
  __src = v12;
  v1004 = v15;
  v980 = v10;
  v987 = v11;
  v990 = v13;
  if ((v15 & 1) != 0)
  {
    v998 = *a2[9];
    if (*((_BYTE *)v998 + 5) == 12)
      v18 = (uint64_t)*a2[9];
    else
      v18 = 0;
    *(_QWORD *)&v1023 = 0;
    DWORD2(v1023) = 0;
    if (((v13 | v14) & 1) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x197C9F5C4);
    }
    v19 = *((_DWORD *)a2 + 8);
    if (v9 == 253)
      v20 = -3;
    else
      v20 = -1;
    v21 = v20 + v19;
    LODWORD(v22) = v20 + v19;
    if (v18)
    {
      v23 = *(_DWORD *)(*(_QWORD *)(v18 + 88) + 44) & 0x7FFFFFFF;
      LODWORD(v22) = v21;
      if (v23 < qword_1ECF4C570)
      {
        LODWORD(v22) = v21 <= v23 + 1 ? v23 + 1 : v21;
        v24 = this[495];
        if ((v22 & 0xFFFFFFFE) + 4 > *((_DWORD *)v24 + 215))
        {
          JSC::DFG::Graph::logAssertionFailure(v24, (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x34B, "void JSC::DFG::SpeculativeJIT::emitCall(Node *)", "Graph::parameterSlotsForArgCount(numAllocatedArgs) <= m_graph.m_parameterSlots");
          __break(0xC471u);
          JUMPOUT(0x197CA0D64);
        }
      }
    }
    v25 = 0;
    v978 = -1;
    if ((v12 & 1) == 0)
    {
      v977 = 0xFFFFFFFFLL;
LABEL_22:
      v979 = v25;
      if (v21)
      {
        if (!v8[212])
        {
          __break(0xC471u);
          JUMPOUT(0x197CA06C0);
        }
        JSC::MacroAssemblerARM64::moveToCachedReg((unsigned int *)v8, (JSC::ARM64LogicalImmediate *)v21, (uint64_t)(v8 + 264), a4, a5, a6, a7, a8);
        v28 = *((_DWORD *)v8 + 50);
        if (v28 + 4 > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v26, v27, a4, a5, a6, a7, a8);
          v28 = *((_DWORD *)v8 + 50);
        }
        v29 = 0;
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v28) = -1207893008;
        v30 = 0x180000001FLL;
        *((_DWORD *)v8 + 50) += 4;
        do
        {
          v31 = *((_QWORD *)v8 + 495);
          v32 = ++v29 + *((_QWORD *)v1027 + 3);
          if (*(_DWORD *)(v31 + 164) <= v32)
          {
            __break(0xC471u);
            JUMPOUT(0x197CA190CLL);
          }
          v33 = *(_QWORD *)(*(_QWORD *)(v31 + 152) + 8 * v32);
          JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v1010, (JSC::DFG::SpeculativeJIT *)v8, v33, a4, a5, a6, a7, a8);
          v41 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v1010, v34, v35, v36, v37, v38, v39, v40);
          JSC::DFG::SpeculativeJIT::use((uint64_t)v8, v33, v42, v43, v44, v45, v46, v47);
          JSC::MacroAssemblerARM64::store64((uint64_t)v8, v41, v30, v48, v49, v50, v51, v52);
          if (((unint64_t)v1010[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v53 = (char)v1011;
            if ((char)v1011 > 15)
              v53 = -1;
            --*((_DWORD *)v1010[0] + 3 * v53 + 1196);
          }
          v30 += 0x800000000;
        }
        while (v21 != v29);
      }
      else
      {
        v256 = *((_DWORD *)v8 + 50);
        if (v256 + 4 > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v256 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v256) = -1207892993;
        *((_DWORD *)v8 + 50) += 4;
      }
      if (v21 < v22)
      {
        v432 = ((unint64_t)v21 << 35) + 0x180000001FLL;
        do
        {
          if (!v8[212])
          {
            __break(0xC471u);
            JUMPOUT(0x197CA0CD4);
          }
          JSC::MacroAssemblerARM64::moveToCachedReg(v8, 10, (uint64_t)(v8 + 264), a4, a5, a6, a7, a8);
          JSC::MacroAssemblerARM64::store64((uint64_t)v8, 16, v432, v433, v434, v435, v436, v437);
          v432 += 0x800000000;
          ++v21;
          v54 = 255;
        }
        while ((_DWORD)v22 != v21);
      }
      else
      {
        v54 = 255;
      }
      LOBYTE(v15) = v1004;
      v55 = v993;
      goto LABEL_36;
    }
    v973 = 255;
    v977 = 255;
    v979 = 0;
LABEL_256:
    ++*((_DWORD *)v8 + 1202);
    v331 = *((unsigned int *)v8 + 1200);
    if ((_DWORD)v331 != 0x3FFFFFFF)
    {
      *((_QWORD *)v8 + 600) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)v8, v331, a3, a4, a5, a6, a7, a8);
    }
    v1025 = 2;
    v332 = (uint64_t *)((char *)v1027 + 24);
    if ((*((_BYTE *)v1027 + 56) & 0x10) != 0)
    {
      v523 = *((_QWORD *)v8 + 495);
      v524 = *v332;
      if (*(_DWORD *)(v523 + 164) <= v524)
      {
        __break(0xC471u);
        JUMPOUT(0x197CA19ACLL);
      }
      v332 = (uint64_t *)(*(_QWORD *)(v523 + 152) + 8 * v524);
    }
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v1010, (JSC::DFG::SpeculativeJIT *)v8, *v332, a4, a5, a6, a7, a8);
    v340 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v1010, v333, v334, v335, v336, v337, v338, v339);
    if ((_DWORD)v15)
    {
      v348 = (void *)v340;
      --*((_DWORD *)v8 + 1202);
    }
    else
    {
      v446 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v1010, v341, v342, v343, v344, v345, v346, v347);
      if (v446)
      {
        if (v446 == 31)
        {
          v456 = (unsigned int *)(v8 + 200);
          v455 = *((_DWORD *)v8 + 50);
          v457 = (JSC::AssemblerBuffer *)(v8 + 56);
          v458 = v455 + 4;
          v459 = *((_DWORD *)v8 + 48);
          v454 = -1862269984;
        }
        else
        {
          if (v446 == 63)
            v454 = -763363328;
          else
            v454 = ((v446 & 0x1F) << 16) | 0xAA0003E0;
          v456 = (unsigned int *)(v8 + 200);
          v455 = *((_DWORD *)v8 + 50);
          v457 = (JSC::AssemblerBuffer *)(v8 + 56);
          v458 = v455 + 4;
          v459 = *((_DWORD *)v8 + 48);
        }
        if (v458 > v459)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v457, v447, v448, v449, v450, v451, v452, v453);
          v455 = *v456;
        }
        *(_DWORD *)(*(_QWORD *)v457 + v455) = v454;
        *v456 += 4;
      }
      if (v25)
      {
        --*((_DWORD *)v25 + 1196);
        --*((_DWORD *)v25 + 1211);
      }
      --*((_DWORD *)v8 + 1202);
      JSC::DFG::SpeculativeJIT::use((uint64_t *)v1010[0], (JSC::DFG::Node *)((unint64_t)v1010[1] & 0xFF00FFFFFFFFFFFFLL), v448, v449, v450, v451, v452, v453);
      v348 = 0;
    }
    v1039[0] = 27;
    LODWORD(v1034) = ((*(_DWORD *)(*((_QWORD *)v8 + 495) + 856) + *(_DWORD *)(*((_QWORD *)v8 + 495) + 860) + 3) & 0xFFFFFFFE)
                   - 2;
    LOBYTE(__dst[0]) = 0;
    *(void **)((char *)__dst + 1) = (void *)v348;
    *(void **)&v1039[1] = __dst[0];
    v1039[9] = 0;
    v349 = HIDWORD(v1033);
    if (HIDWORD(v1033) < v22)
    {
      v350 = v1032;
      if (v1033 < v22)
      {
        v351 = v1033 + ((unint64_t)v1033 >> 2);
        if (v351 >= 0x10)
          v352 = v351 + 1;
        else
          v352 = 16;
        if (v352 <= v22)
          v352 = v22;
        if (v352 >= 0x1C71C71D)
        {
          __break(0xC471u);
          JUMPOUT(0x197CA196CLL);
        }
        v353 = 9 * v352;
        v354 = (WTF *)WTF::fastMalloc((WTF *)(9 * v352));
        LODWORD(v1033) = v353 / 9;
        v1032 = v354;
        if ((_DWORD)v349)
        {
          v443 = 9 * v349;
          v444 = v350;
          do
          {
            v445 = *(_QWORD *)v444;
            *((_BYTE *)v354 + 8) = *((_BYTE *)v444 + 8);
            *(_QWORD *)v354 = v445;
            v354 = (WTF *)((char *)v354 + 9);
            v444 = (WTF *)((char *)v444 + 9);
            v443 -= 9;
          }
          while (v443);
          v354 = v1032;
        }
        if (v350)
        {
          if (v354 == v350)
          {
            v1032 = 0;
            LODWORD(v1033) = 0;
          }
          WTF::fastFree((unint64_t)v350, v355, v342, v343, v344, v345, v346, v347);
          v350 = v1032;
        }
        else
        {
          v350 = v354;
        }
      }
      if (v350 && HIDWORD(v1033) != (_DWORD)v22)
      {
        v356 = (char *)v350 + 9 * HIDWORD(v1033);
        do
        {
          *v356 = 18;
          *(_QWORD *)(v356 + 1) = 0;
          v356 += 9;
        }
        while (v356 != (char *)v350 + 9 * v22);
      }
    }
    v982 = v348;
    HIDWORD(v1033) = v22;
    HIDWORD(v1034) = v21;
    v1035 = *(_DWORD *)(*((_QWORD *)v8 + 42) + 28);
    LOBYTE(v15) = v1004;
    if (v21)
    {
      v357 = 0;
      v358 = 8;
      do
      {
        v359 = *((_QWORD *)v8 + 495);
        v360 = v357 + 1;
        v361 = v357 + 1 + *((_QWORD *)v1027 + 3);
        if (*(_DWORD *)(v359 + 164) <= v361)
        {
          __break(0xC471u);
          JUMPOUT(0x197CA1944);
        }
        v362 = *(_QWORD *)(*(_QWORD *)(v359 + 152) + 8 * v361);
        v363 = v362 & 0xFF00FFFFFFFFFFFFLL;
        v364 = (void *)*(unsigned int *)((v362 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        v15 = ~(_DWORD)v364;
        if (v15 >= *((unsigned int *)v8 + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197CA194CLL);
        }
        v365 = *((_QWORD *)v8 + 499);
        if ((v1004 & 1) == 0)
        {
          JSC::DFG::SpeculativeJIT::use((uint64_t)v8, v362, v342, v343, v344, v345, v346, v347);
          v364 = (void *)*(unsigned int *)(v363 + 48);
        }
        if (*(_BYTE *)(v365 + 24 * (int)v15 + 16))
        {
          v370 = *(_QWORD *)(v365 + 24 * (int)v15);
          v371 = *(unsigned __int16 *)(v370 + 18);
          if (v371 == 355 || v371 == 348)
          {
            v372 = (void **)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
            v12 = __src;
            LOBYTE(v15) = v1004;
            {
              JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
              LODWORD(qword_1EE342DB8) = 0;
              v372 = (void **)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
            }
          }
          else
          {
            v372 = *(void ***)(v370 + 72);
            v12 = __src;
            LOBYTE(v15) = v1004;
          }
          v373 = (unint64_t)*v372;
          LOBYTE(__dst[0]) = 17;
          *(void **)((char *)__dst + 1) = (void *)v373;
          v367 = __dst[0];
          v366 = HIBYTE(v373);
          goto LABEL_289;
        }
        if (*(_BYTE *)(v365 + 24 * (int)v15 + 12))
        {
          if (*(_BYTE *)(v365 + 24 * (int)v15 + 12) == 4)
          {
            LOBYTE(v366) = 0;
            v934 = (void *)*(unsigned __int8 *)(v365 + 24 * (int)v15 + 17);
            LOBYTE(__dst[0]) = 7;
            *(void **)((char *)__dst + 1) = v934;
            v367 = __dst[0];
            v12 = __src;
            LOBYTE(v15) = v1004;
            goto LABEL_289;
          }
          v364 = (void *)*(unsigned __int8 *)(v365 + 24 * (int)v15 + 17);
          switch(*(_BYTE *)(v365 + 24 * (int)v15 + 12))
          {
            case 1:
              v744 = 1;
              goto LABEL_587;
            case 2:
              v744 = 2;
              goto LABEL_587;
            case 3:
              v744 = 3;
              goto LABEL_587;
            case 5:
              v744 = 4;
              goto LABEL_587;
            case 6:
              v744 = 5;
LABEL_587:
              LOBYTE(__dst[0]) = v744;
              break;
            default:
              LOBYTE(__dst[0]) = 0;
              break;
          }
LABEL_287:
          v12 = __src;
          LOBYTE(v15) = v1004;
        }
        else
        {
          v369 = *(unsigned __int8 *)(v365 + 24 * (int)v15 + 13) - 1;
          v12 = __src;
          LOBYTE(v15) = v1004;
          switch(v369)
          {
            case 0:
              LOBYTE(__dst[0]) = 9;
              break;
            case 1:
              LOBYTE(__dst[0]) = 10;
              break;
            case 2:
              LOBYTE(__dst[0]) = 11;
              break;
            case 3:
              LOBYTE(__dst[0]) = 12;
              break;
            case 4:
              LOBYTE(__dst[0]) = 14;
              break;
            case 5:
              LOBYTE(__dst[0]) = 13;
              break;
            default:
              LOBYTE(__dst[0]) = 8;
              goto LABEL_287;
          }
        }
        LOBYTE(v366) = 0;
        *(void **)((char *)__dst + 1) = v364;
        v367 = __dst[0];
LABEL_289:
        if (v357 >= HIDWORD(v1033))
        {
          __break(0xC471u);
          JUMPOUT(0x197CA1954);
        }
        v368 = (char *)v1032 + v358;
        *((_QWORD *)v368 - 1) = v367;
        *v368 = v366;
        v358 += 9;
        ++v357;
      }
      while (v21 != v360);
    }
    v374 = v22 - v21;
    if (v22 > v21)
    {
      v517 = v21;
      v518 = 9 * v21;
      do
      {
        LOBYTE(__dst[0]) = 17;
        *(void **)((char *)__dst + 1) = (void *)10;
        if (v517 >= HIDWORD(v1033))
        {
          __break(0xC471u);
          JUMPOUT(0x197CA19A4);
        }
        v519 = (void **)((char *)v1032 + v518);
        *v519 = __dst[0];
        *((_BYTE *)v519 + 8) = 0;
        ++v517;
        v518 += 9;
        --v374;
      }
      while (v374);
    }
    LOBYTE(__dst[0]) = 0;
    *(void **)((char *)__dst + 1) = (void *)2;
    v1037 = __dst[0];
    v1038 = 0;
    v55 = v993;
    if ((v15 & 1) != 0)
      goto LABEL_300;
    LOBYTE(__dst[0]) = 0;
    *(void **)((char *)__dst + 1) = (void *)v973;
    v460 = (char)v973;
    if (v460 < 0x40)
    {
      v461 = (void **)&v1036[9 * v460];
      *v461 = __dst[0];
      *((_BYTE *)v461 + 8) = 0;
LABEL_300:
      v375 = atomic_load(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey);
      v54 = (uint64_t)v982;
      if (v375 != -1)
      {
        __dst[0] = &v1028;
        v1019 = (JSC::DFG::SpeculativeJIT *)__dst;
        std::__call_once(&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::onceKey, &v1019, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::$_0 &&>>);
      }
      JSC::CallFrameShuffleData::setupCalleeSaveRegisters((uint64_t)&v1032, (const JSC::RegisterAtOffsetList *)&JSC::RegisterAtOffsetList::dfgCalleeSaveRegisters(void)::result);
      if (((unint64_t)v1010[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v376 = (char)v1011;
        if ((char)v1011 > 15)
          v376 = -1;
        --*((_DWORD *)v1010[0] + 3 * v376 + 1196);
      }
      goto LABEL_36;
    }
LABEL_871:
    __break(1u);
    goto LABEL_872;
  }
  *(_QWORD *)&v1023 = 0;
  DWORD2(v1023) = 0;
  v228 = *(_QWORD *)this[497];
  if ((v228 & 1) != 0)
  {
    v906 = *(_QWORD *)(v228 & 0xFFFFFFFF8);
    if ((v228 & 2) != 0
      || ((v907 = *(unsigned int *)((v228 & 0xFFFFFFFF8) + 8), (_DWORD)v907 != 0x3FFFFFFF)
        ? (v908 = (_DWORD)v907 == -1)
        : (v908 = 1),
          v908))
    {
      v909 = 2;
    }
    else if (v907 >> 28)
    {
      v967 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v967 = v906;
      *(_DWORD *)(v967 + 8) = v907;
      v909 = 1;
      v906 = v967;
    }
    else
    {
      v909 = *(_QWORD *)(v228 & 0xFFFFFFFF8);
      v906 = v907 << 36;
    }
    v228 = v906 | v909;
    LODWORD(v15) = v1004;
  }
  v1022 = v228;
  JSC::DFG::JITCompiler::addCallLinkInfo(v8, &v1022, (uint64_t)v1010);
  v1023 = *(_OWORD *)v1010;
  v229 = HIDWORD(v1011);
  v978 = v1011;
  v25 = (JSC::ARM64LogicalImmediate *)v1012;
  if ((v1022 & 1) != 0 && (v1022 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v1022 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v977 = v229;
  if (((v13 | v14) & 1) == 0)
  {
    v230 = *((_DWORD *)v1027 + 8);
    if (*((_WORD *)v1027 + 9) == 253)
      v231 = -3;
    else
      v231 = -1;
    v21 = v231 + v230;
    if (!v12)
    {
      v998 = 0;
      LODWORD(v22) = v231 + v230;
      goto LABEL_22;
    }
    ++*((_DWORD *)v8 + 1196);
    v462 = *((unsigned int *)v8 + 1194);
    if ((_DWORD)v462 != 0x3FFFFFFF)
    {
      *((_QWORD *)v8 + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)v8, v462, a3, a4, a5, a6, a7, a8);
    }
    v979 = v25;
    ++*((_DWORD *)v8 + 1211);
    v463 = *((unsigned int *)v8 + 1209);
    if ((_DWORD)v463 != 0x3FFFFFFF)
    {
      *(_QWORD *)(v8 + 4836) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)v8, v463, a3, a4, a5, a6, a7, a8);
    }
    v998 = 0;
    v973 = 5;
    v1024 = 5;
    LODWORD(v22) = v21;
    v25 = (JSC::ARM64LogicalImmediate *)v8;
    goto LABEL_256;
  }
  v525 = (unsigned int *)*((_QWORD *)v1027 + 9);
  v526 = (JSC::ARM64LogicalImmediate *)*(unsigned int *)(*((_QWORD *)v8 + 495) + 856);
  v979 = v25;
  if (!v13)
  {
    LOBYTE(v1019) = 0;
    LOBYTE(v1028) = 0;
    LOBYTE(v1018) = 0;
    LOBYTE(v1017) = 0;
    v1010[0] = (WTF *)v8;
    v1010[1] = (WTF *)&v1027;
    v1011 = (WTF *)&v1019;
    v1012 = &v1028;
    v1013 = (WTF **)&v1018;
    v1014 = (WTF *)&v1017;
    JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_1::operator()((uint64_t)v1010, -1, a3, a4, a5, a6, a7, a8);
    if (!JSC::DFG::SpeculativeJIT::isFlushed((JSC::DFG::SpeculativeJIT *)v8))
    {
      v937 = (JSC::DFG::Graph *)*((_QWORD *)v8 + 495);
      v8 = "/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp";
      JSC::DFG::Graph::logAssertionFailure(v937, v1027, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x31A, "void JSC::DFG::SpeculativeJIT::emitCall(Node *)", "isFlushed()");
      __break(0xC471u);
      goto LABEL_871;
    }
    v540 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v8, v1027, v527, v528, v529, v530, v531, v532);
    v541 = (uint64_t)v533;
    v542 = (JSC::ARM64LogicalImmediate *)*v525;
    __dst[0] = &v1030;
    LODWORD(__dst[1]) = 1;
    if (v1019 == 1)
      goto LABEL_476;
    LOWORD(v1030) = v1019 | 0x100;
    HIDWORD(__dst[1]) = 1;
    v745 = 1;
    while (1)
    {
      v746 = 0;
      v747 = 0;
      v748 = (char *)__dst[0];
      v749 = v745;
      do
      {
        if ((*((_BYTE *)__dst[0] + v746 + 1) & 0x40) != 0)
          goto LABEL_871;
        v747 |= 1 << *((_BYTE *)__dst[0] + v746 + 1);
        v746 += 2;
      }
      while (2 * v745 != v746);
      v750 = 0;
      do
      {
        v751 = *((_BYTE *)__dst[0] + v750) & 0x7F;
        if (v751 >= 0x40)
          goto LABEL_871;
        v747 &= ~(1 << v751);
        v750 += 2;
      }
      while (2 * v745 != v750);
      v752 = (uint8x8_t)vcnt_s8((int8x8_t)v747);
      v752.i16[0] = vaddlv_u8(v752);
      v753 = v752.i32[0];
      v754 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v747));
      v754.i16[0] = vaddlv_u8(v754);
      if (!(v754.i32[0] + v753))
      {
        v958 = *((_BYTE *)__dst[0] + 1);
        v1002 = *(_BYTE *)__dst[0];
        JSC::MacroAssemblerARM64::swap((uint64_t)v8, *(char *)__dst[0], v958, v535, v536, v537, v538, v539);
        memmove(__dst[0], (char *)__dst[0] + 2, 2 * HIDWORD(__dst[1]) - 2);
        v959 = (HIDWORD(__dst[1]) - 1);
        v113 = HIDWORD(__dst[1]) == 1;
        HIDWORD(__dst[1]) = v959;
        v960 = (char *)__dst[0];
        v986 = (char *)__dst[0] + 2 * v959;
        if (v113)
        {
          v961 = 0;
          v962 = 0;
          v976 = 0;
          v533 = (JSC::AssemblerBuffer *)((char *)__dst[0] + 2 * v959);
        }
        else
        {
          v969 = 2 * v959;
          v970 = __dst[0];
          while (*v970 != v958)
          {
            v970 += 2;
            v969 -= 2;
            if (!v969)
              goto LABEL_953;
          }
          *v970 = v1002;
LABEL_953:
          v976 = 0;
          v1003 = (JSC::AssemblerBuffer *)v960;
          v971 = v986;
          v533 = (JSC::AssemblerBuffer *)v986;
          do
          {
            if (*v960 == v960[1])
            {
              v972 = v960;
              if (v971 != (char *)__dst[0] + 2 * HIDWORD(__dst[1]))
              {
                if (v960 == (char *)v533)
                {
                  v972 = v971;
                }
                else
                {
                  v974 = v1003 - v533;
                  memmove(v971, v533, v1003 - v533);
                  v972 = &v971[v974];
                }
              }
              v533 = (JSC::AssemblerBuffer *)(v960 + 2);
              ++v976;
              v971 = v972;
            }
            v960 += 2;
            v1003 = (JSC::AssemblerBuffer *)((char *)v1003 + 2);
          }
          while (v960 < v986);
          v960 = (char *)__dst[0];
          v961 = HIDWORD(__dst[1]);
          v962 = HIDWORD(__dst[1]);
          v986 = v971;
        }
        v963 = &v960[2 * v961];
        if (v533 != (JSC::AssemblerBuffer *)v963)
        {
          memmove(v986, v533, v963 - (char *)v533);
          v962 = HIDWORD(__dst[1]);
        }
        v745 = v962 - v976;
        LOBYTE(v15) = v1004;
        goto LABEL_620;
      }
      v755 = 0;
      v756 = v745 <= 1uLL ? 1 : v745;
      v757 = 2 * v756;
      while (1)
      {
        v758 = *((unsigned __int8 *)__dst[0] + v755 + 1);
        if ((v758 & 0x7Fu) >= 0x40)
          goto LABEL_871;
        if (((v747 >> (v758 & 0x7F)) & 1) != 0)
          break;
        v755 += 2;
        if (v757 == v755)
          goto LABEL_621;
      }
      v759 = *((unsigned __int8 *)__dst[0] + v755);
      if (v759 != v758)
        break;
LABEL_619:
      memmove(&v748[v755], &v748[v755 + 2], 2 * v749 - v755 - 2);
      v745 = HIDWORD(__dst[1]) - 1;
LABEL_620:
      HIDWORD(__dst[1]) = v745;
LABEL_621:
      if (!v745)
      {
        v762 = __dst[0];
        if (&v1030 != __dst[0] && __dst[0])
        {
          __dst[0] = 0;
          LODWORD(__dst[1]) = 0;
          WTF::fastFree((unint64_t)v762, v533, v534, v535, v536, v537, v538, v539);
        }
LABEL_476:
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v8, v542, 3, v535, v536, v537, v538, v539);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v8, v526, 2, v543, v544, v545, v546, v547);
        if ((_DWORD)v540 == -1)
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v8, v541, 0, v548, v549, v550, v551, v552);
        else
          JSC::MacroAssemblerARM64::load64((uint64_t)v8, (v540 << 35) + 0x380000001ALL, 0, v548, v549, v550, v551, v552);
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, (uint64_t)operationSizeFrameForVarargs, v553, v554, v555, v556, v557, v558, (int *)__dst);
        JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 1, v559, v560, v561, v562, v563, v564);
        JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_1::operator()((uint64_t)v1010, 0, v565, v566, v567, v568, v569, v570);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v8, v526, (char)v1028, v571, v572, v573, v574, v575);
        JSC::emitSetVarargsFrame(v8, 0, 0, (char)v1028, (char)v1028, v576, v577, v578);
        v586 = (32 * (char)v1028) | 0xD101001F;
        v587 = (JSC::AssemblerBuffer *)(v8 + 56);
        v588 = *((_DWORD *)v8 + 50);
        if (v588 + 4 > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v579, (uint64_t)v580, v581, v582, v583, v584, v585);
          v588 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v588) = v586;
        *((_DWORD *)v8 + 50) += 4;
        v596 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v8, v1027, v580, v581, v582, v583, v584, v585);
        v597 = (uint64_t)v589;
        v1001 = (JSC::ARM64LogicalImmediate *)*v525;
        __dst[0] = &v1030;
        LODWORD(__dst[1]) = 3;
        if (v1028 == 1)
        {
          v598 = 0;
        }
        else
        {
          LOWORD(v1030) = v1028 | 0x100;
          v598 = 1;
        }
        if (v1019 != 2)
          *((_WORD *)&v1030 + v598++) = v1019 | 0x200;
        *((_WORD *)&v1030 + v598) = 1024;
        v599 = v598 + 1;
        HIDWORD(__dst[1]) = v599;
        while (2)
        {
          v600 = 0;
          v601 = 0;
          v602 = (char *)__dst[0];
          v603 = v599;
          do
          {
            if ((*((_BYTE *)__dst[0] + v600 + 1) & 0x40) != 0)
              goto LABEL_871;
            v601 |= 1 << *((_BYTE *)__dst[0] + v600 + 1);
            v600 += 2;
          }
          while (2 * v599 != v600);
          v604 = 0;
          do
          {
            v605 = *((_BYTE *)__dst[0] + v604) & 0x7F;
            if (v605 >= 0x40)
              goto LABEL_871;
            v601 &= ~(1 << v605);
            v604 += 2;
          }
          while (2 * v599 != v604);
          v606 = (uint8x8_t)vcnt_s8((int8x8_t)v601);
          v606.i16[0] = vaddlv_u8(v606);
          v607 = v606.i32[0];
          v608 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v601));
          v608.i16[0] = vaddlv_u8(v608);
          if (v608.i32[0] + v607)
          {
            v609 = 0;
            if (v599 <= 1uLL)
              v610 = 1;
            else
              v610 = v599;
            v611 = 2 * v610;
            while (1)
            {
              v612 = *((unsigned __int8 *)__dst[0] + v609 + 1);
              if ((v612 & 0x7Fu) >= 0x40)
                goto LABEL_871;
              if (((v601 >> (v612 & 0x7F)) & 1) != 0)
                break;
              v609 += 2;
              if (v611 == v609)
                goto LABEL_511;
            }
            v613 = *((unsigned __int8 *)__dst[0] + v609);
            if (v613 != v612)
            {
              v614 = (char)v613;
              if ((char)v613 != 63)
              {
                v615 = *((_DWORD *)v8 + 50);
                v616 = *((_DWORD *)v8 + 48);
                if (v612 != 31 && v614 != 31)
                {
                  LODWORD(v15) = v612 & 0xFFE0FFFF | ((v614 & 0x1F) << 16) | 0xAA0003E0;
                  goto LABEL_507;
                }
LABEL_526:
                LODWORD(v15) = (char)v612 | (32 * v614) | 0x91000000;
LABEL_507:
                if (v615 + 4 <= v616)
                  goto LABEL_508;
LABEL_850:
                JSC::AssemblerBuffer::outOfLineGrow(v587, (uint64_t)v589, v590, v591, v592, v593, v594, v595);
                v615 = *((_DWORD *)v8 + 50);
                goto LABEL_508;
              }
              v615 = *((_DWORD *)v8 + 50);
              v616 = *((_DWORD *)v8 + 48);
              if ((char)v612 == 31)
              {
                v12 = __src;
                goto LABEL_526;
              }
              LODWORD(v15) = v612 & 0x1F | 0xD2800000;
              v12 = __src;
              if (v615 + 4 > v616)
                goto LABEL_850;
LABEL_508:
              *(_DWORD *)(*((_QWORD *)v8 + 7) + v615) = v15;
              *((_DWORD *)v8 + 50) += 4;
              v602 = (char *)__dst[0];
              v603 = HIDWORD(__dst[1]);
              LOBYTE(v15) = v1004;
            }
            memmove(&v602[v609], &v602[v609 + 2], 2 * v603 - v609 - 2);
            v599 = HIDWORD(__dst[1]) - 1;
          }
          else
          {
            v975 = v596;
            v983 = (void *)v597;
            v618 = v587;
            v619 = *(_BYTE *)__dst[0];
            v620 = *((_BYTE *)__dst[0] + 1);
            JSC::MacroAssemblerARM64::swap((uint64_t)v8, *(char *)__dst[0], v620, v591, v592, v593, v594, v595);
            memmove(__dst[0], (char *)__dst[0] + 2, 2 * HIDWORD(__dst[1]) - 2);
            v621 = (HIDWORD(__dst[1]) - 1);
            v113 = HIDWORD(__dst[1]) == 1;
            HIDWORD(__dst[1]) = v621;
            v622 = (unsigned __int8 *)__dst[0];
            v623 = (char *)__dst[0] + 2 * v621;
            if (v113)
            {
              v630 = 0;
              v631 = 0;
              v626 = 0;
              v589 = (char *)__dst[0] + 2 * v621;
            }
            else
            {
              v624 = 2 * v621;
              v625 = __dst[0];
              while (*v625 != v620)
              {
                v625 += 2;
                v624 -= 2;
                if (!v624)
                  goto LABEL_517;
              }
              *v625 = v619;
LABEL_517:
              v626 = 0;
              v627 = v622;
              v589 = v623;
              v628 = v623;
              do
              {
                if (*v622 == v622[1])
                {
                  v629 = v622;
                  if (v628 != (char *)__dst[0] + 2 * HIDWORD(__dst[1]))
                  {
                    if (v622 == (unsigned __int8 *)v589)
                    {
                      v629 = (unsigned __int8 *)v628;
                    }
                    else
                    {
                      v966 = v627 - (unsigned __int8 *)v589;
                      memmove(v628, v589, v627 - (unsigned __int8 *)v589);
                      v629 = (unsigned __int8 *)&v628[v966];
                    }
                    LOBYTE(v15) = v1004;
                  }
                  v589 = (char *)(v622 + 2);
                  ++v626;
                  v628 = (char *)v629;
                }
                v622 += 2;
                v627 += 2;
              }
              while (v622 < (unsigned __int8 *)v623);
              v622 = (unsigned __int8 *)__dst[0];
              v630 = HIDWORD(__dst[1]);
              v631 = HIDWORD(__dst[1]);
              v623 = v628;
            }
            v632 = (char *)&v622[2 * v630];
            v12 = __src;
            if (v589 != v632)
            {
              memmove(v623, v589, v632 - v589);
              v631 = HIDWORD(__dst[1]);
            }
            v599 = v631 - v626;
            v587 = v618;
            v597 = (uint64_t)v983;
            v596 = v975;
          }
          HIDWORD(__dst[1]) = v599;
LABEL_511:
          if (!v599)
          {
            v635 = __dst[0];
            if (&v1030 != __dst[0] && __dst[0])
            {
              __dst[0] = 0;
              LODWORD(__dst[1]) = 0;
              WTF::fastFree((unint64_t)v635, v589, v590, v591, v592, v593, v594, v595);
            }
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v8, v1001, 3, v591, v592, v593, v594, v595);
            v55 = v993;
            if ((_DWORD)v596 == -1)
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v8, v597, 0, v636, v637, v638, v639, v640);
            else
              JSC::MacroAssemblerARM64::load64((uint64_t)v8, (v596 << 35) + 0x380000001ALL, 0, v636, v637, v638, v639, v640);
            JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, (uint64_t)operationSetupVarargsFrame, v641, v642, v643, v644, v645, v646, (int *)__dst);
            JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 1, v647, v648, v649, v650, v651, v652);
            v660 = *((_DWORD *)v8 + 50);
            if (v660 + 4 > *((_DWORD *)v8 + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v587, v653, v654, v655, v656, v657, v658, v659);
              v660 = *((_DWORD *)v8 + 50);
            }
            *(_DWORD *)(*((_QWORD *)v8 + 7) + v660) = -1862254561;
            *((_DWORD *)v8 + 50) += 4;
            goto LABEL_540;
          }
          continue;
        }
      }
    }
    v759 = (char)v759;
    if ((char)v759 == 63)
    {
      if ((char)v758 != 31)
      {
        LODWORD(v15) = v758 & 0x1F | 0xD2800000;
        goto LABEL_616;
      }
    }
    else if (v758 != 31 && v759 != 31)
    {
      LODWORD(v15) = v758 & 0xFFE0FFFF | ((v759 & 0x1F) << 16) | 0xAA0003E0;
LABEL_616:
      v761 = *((_DWORD *)v8 + 50);
      if (v761 + 4 > *((_DWORD *)v8 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v533, v534, v535, v536, v537, v538, v539);
        v761 = *((_DWORD *)v8 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 7) + v761) = v15;
      *((_DWORD *)v8 + 50) += 4;
      v748 = (char *)__dst[0];
      v749 = HIDWORD(__dst[1]);
      LOBYTE(v15) = v1004;
      goto LABEL_619;
    }
    LODWORD(v15) = (char)v758 | (32 * v759) | 0x91000000;
    goto LABEL_616;
  }
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v8, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v691 = *((_QWORD *)v1027 + 5);
  if ((v691 & 0xFF00FFFFFFFFFFFFLL) != 0)
    JSC::DFG::SpeculativeJIT::use((uint64_t)v8, v691, v685, v686, v687, v688, v689, v690);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)v8, v526, 1, v686, v687, v688, v689, v690);
  v1010[0] = (WTF *)&v1011;
  v1010[1] = (WTF *)2;
  if ((*((_QWORD *)v1027 + 5) & 0xFF00FFFFFFFFFFFFLL) != 0)
    v692 = *(_QWORD *)(*((_QWORD *)v1027 + 5) & 0xFF00FFFFFFFFFFFFLL);
  else
    v692 = *(_QWORD *)v1027;
  v693 = (_QWORD *)(v692 & 0xFFFFFFFF8);
  if ((v692 & 1) != 0)
    v693 = (_QWORD *)*v693;
  JSC::emitSetupVarargsFrameFastCase(*(_QWORD *)(*((_QWORD *)v8 + 44) + 16), (uint64_t)v8, 1, 0, 1, 2, (uint64_t)v693, *v525, (uint64_t)v1010);
  v701 = *((_DWORD *)v8 + 50);
  if (v701 < *((_DWORD *)v8 + 13))
  {
    v55 = v993;
    do
    {
      if ((v701 + 4) > *((_DWORD *)v8 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v694, (uint64_t)v695, v696, v697, v698, v699, v700);
        v701 = *((_DWORD *)v8 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 7) + v701) = -721215457;
      v701 = *((_DWORD *)v8 + 50) + 4;
      *((_DWORD *)v8 + 50) = v701;
    }
    while (v701 < *((_DWORD *)v8 + 13));
  }
  else
  {
    v55 = v993;
  }
  v702 = v701;
  if ((v701 + 4) > *((_DWORD *)v8 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v694, (uint64_t)v695, v696, v697, v698, v699, v700);
    v702 = *((_DWORD *)v8 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v8 + 7) + v702) = 335544320;
  *((_DWORD *)v8 + 50) += 4;
  if (v8[328])
    v703 = 69;
  else
    v703 = 65;
  __dst[0] = (void *)v701;
  LOBYTE(__dst[1]) = v703;
  *(_WORD *)((char *)&__dst[1] + 1) = 15;
  BYTE3(__dst[1]) = -1;
  if (HIDWORD(v1010[1]))
  {
    v704 = 0;
    v705 = 0;
    v706 = 12 * HIDWORD(v1010[1]);
    do
    {
      if (v705 >= HIDWORD(v1010[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x197CA198CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v1010[0] + v704), (uint64_t)v8, (uint64_t)v695, v696, v697, v698, v699, v700);
      ++v705;
      v704 += 12;
    }
    while (v706 != v704);
  }
  v707 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v8, v1027, v695, v696, v697, v698, v699, v700);
  if ((_DWORD)v707 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v8, v708, 0, v709, v710, v711, v712, v713);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v8, (v707 << 35) + 0x380000001ALL, 0, v709, v710, v711, v712, v713);
  LOBYTE(v15) = v1004;
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, (uint64_t)operationThrowStackOverflowForVarargs, v714, v715, v716, v717, v718, v719, (int *)&v1019);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 0, v720, v721, v722, v723, v724, v725);
  v733 = *((_DWORD *)v8 + 50);
  if (v733 + 4 > *((_DWORD *)v8 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v726, v727, v728, v729, v730, v731, v732);
    v733 = *((_DWORD *)v8 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v8 + 7) + v733) = 1384127856;
  v734 = *((_DWORD *)v8 + 50);
  v735 = v734 + 4;
  *((_DWORD *)v8 + 50) = v734 + 4;
  if ((v734 + 8) > *((_DWORD *)v8 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v726, v727, v728, v729, v730, v731, v732);
    v735 = *((_DWORD *)v8 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v8 + 7) + v735) = -734491104;
  *((_DWORD *)v8 + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)__dst, (uint64_t)v8, v727, v728, v729, v730, v731, v732);
  v743 = v1010[0];
  if (&v1011 != (WTF **)v1010[0] && v1010[0])
  {
    v1010[0] = 0;
    LODWORD(v1010[1]) = 0;
    WTF::fastFree((unint64_t)v743, v736, v737, v738, v739, v740, v741, v742);
  }
LABEL_540:
  if (!JSC::DFG::SpeculativeJIT::isFlushed((JSC::DFG::SpeculativeJIT *)v8))
  {
LABEL_872:
    JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)v8 + 495), v1027, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x32A, "void JSC::DFG::SpeculativeJIT::emitCall(Node *)", "isFlushed()");
    __break(0xC471u);
    JUMPOUT(0x197CA10A8);
  }
  if (v55)
    JSC::DFG::SpeculativeJIT::use((uint64_t)v8, *((_QWORD *)v1027 + 5), v661, v662, v663, v664, v665, v666);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v1010, (JSC::DFG::SpeculativeJIT *)v8, *((_QWORD *)v1027 + 4), v662, v663, v664, v665, v666);
  v674 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v1010, v667, v668, v669, v670, v671, v672, v673);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)v1010[0], (JSC::DFG::Node *)((unint64_t)v1010[1] & 0xFF00FFFFFFFFFFFFLL), v675, v676, v677, v678, v679, v680);
  v682 = v674 & 0x1F | 0xF80183E0;
  v683 = *((_DWORD *)v8 + 50);
  if (v683 + 4 > *((_DWORD *)v8 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v681, a3, a4, a5, a6, a7, a8);
    v683 = *((_DWORD *)v8 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v8 + 7) + v683) = v682;
  *((_DWORD *)v8 + 50) += 4;
  if (((unint64_t)v1010[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v684 = (char)v1011;
    if ((char)v1011 > 15)
      v684 = -1;
    --*((_DWORD *)v1010[0] + 3 * v684 + 1196);
  }
  v998 = 0;
  LODWORD(v22) = 0;
  v54 = 255;
LABEL_36:
  if ((v990 | v55 | v12 ^ 1) != 1)
  {
    v981 = v54;
    v74 = -1;
    v75 = -1;
    goto LABEL_71;
  }
  if ((v15 & 1) != 0)
  {
    v54 = 0;
  }
  else
  {
    ++*((_DWORD *)v8 + 1196);
    v257 = *((unsigned int *)v8 + 1194);
    if ((_DWORD)v257 != 0x3FFFFFFF)
    {
      *((_QWORD *)v8 + 597) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)v8, v257, a3, a4, a5, a6, a7, a8);
    }
    ++*((_DWORD *)v8 + 1211);
    v258 = *((unsigned int *)v8 + 1209);
    if ((_DWORD)v258 != 0x3FFFFFFF)
    {
      *(_QWORD *)(v8 + 4836) = 0xFFFFFFFF3FFFFFFFLL;
      JSC::DFG::SpeculativeJIT::spill((uint64_t)v8, v258, a3, a4, a5, a6, a7, a8);
    }
    v1024 = 5;
    v54 = (uint64_t)v8;
  }
  ++*((_DWORD *)v8 + 1202);
  v56 = *((unsigned int *)v8 + 1200);
  if ((_DWORD)v56 != 0x3FFFFFFF)
  {
    *((_QWORD *)v8 + 600) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v8, v56, a3, a4, a5, a6, a7, a8);
  }
  v1025 = 2;
  v57 = (uint64_t *)((char *)v1027 + 24);
  if ((*((_BYTE *)v1027 + 56) & 0x10) != 0)
  {
    v438 = *((_QWORD *)v8 + 495);
    v439 = *v57;
    if (*(_DWORD *)(v438 + 164) <= v439)
    {
      __break(0xC471u);
      JUMPOUT(0x197CA1984);
    }
    v57 = (uint64_t *)(*(_QWORD *)(v438 + 152) + 8 * v439);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v1019, (JSC::DFG::SpeculativeJIT *)v8, *v57, a4, a5, a6, a7, a8);
  v65 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v1019, v58, v59, v60, v61, v62, v63, v64);
  if ((v15 & 1) != 0)
  {
    v73 = v65;
  }
  else
  {
    v259 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v1019, v66, v67, v68, v69, v70, v71, v72);
    v73 = v259;
    if (v259)
    {
      if (v259 == 31)
      {
        v263 = (unsigned int *)(v8 + 200);
        v262 = *((_DWORD *)v8 + 50);
        v264 = (JSC::AssemblerBuffer *)(v8 + 56);
        v265 = v262 + 4;
        v266 = *((_DWORD *)v8 + 48);
        v261 = -1862269984;
      }
      else
      {
        if (v259 == 63)
          v261 = -763363328;
        else
          v261 = ((v259 & 0x1F) << 16) | 0xAA0003E0;
        v263 = (unsigned int *)(v8 + 200);
        v262 = *((_DWORD *)v8 + 50);
        v264 = (JSC::AssemblerBuffer *)(v8 + 56);
        v265 = v262 + 4;
        v266 = *((_DWORD *)v8 + 48);
      }
      if (v265 > v266)
      {
        JSC::AssemblerBuffer::outOfLineGrow(v264, v260, v67, v68, v69, v70, v71, v72);
        v262 = *v263;
      }
      v73 = 0;
      *(_DWORD *)(*(_QWORD *)v264 + v262) = v261;
      *v263 += 4;
    }
  }
  LOBYTE(v1010[0]) = 0;
  LOBYTE(v1012) = 0;
  LOBYTE(__dst[0]) = 0;
  LOBYTE(v1031) = 0;
  if (*((_WORD *)v1027 + 9) == 253)
  {
    v770 = *((_QWORD *)v8 + 495);
    v771 = *((_DWORD *)v1027 + 8) + *((_DWORD *)v1027 + 6);
    v772 = v771 - 1;
    v773 = *(_DWORD *)(v770 + 164);
    if (v773 <= v771 - 1)
    {
      __break(0xC471u);
      JUMPOUT(0x197CA19C4);
    }
    v774 = v771 - 2;
    if (v773 <= v774)
    {
      __break(0xC471u);
      JUMPOUT(0x197CA19CCLL);
    }
    v775 = *(_QWORD *)(v770 + 152);
    v776 = *(_QWORD *)(v775 + 8 * v772);
    v1028 = *(_QWORD *)(v775 + 8 * v774);
    std::optional<JSC::DFG::SpeculateCellOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>((uint64_t)v1010, (JSC::DFG::SpeculativeJIT *)v8, v776, v68, v69, v70, v71, v72);
    v1018 = (uint64_t)v8;
    std::optional<JSC::DFG::JSValueOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>((uint64_t)__dst, &v1018, &v1028, v777, v778, v779, v780, v781);
    if ((_BYTE)v1012)
    {
      v789 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v1010, v782, v783, v784, v785, v786, v787, v788);
      if ((_BYTE)v1031)
      {
        v75 = v789;
        v74 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)__dst, v790, v791, v792, v793, v794, v795, v796);
        goto LABEL_46;
      }
    }
    goto LABEL_871;
  }
  v74 = -1;
  v75 = -1;
LABEL_46:
  if (v54)
    v76 = v15;
  else
    v76 = 1;
  if ((v76 & 1) == 0)
  {
    --*(_DWORD *)(v54 + 4784);
    --*(_DWORD *)(v54 + 4844);
  }
  --*((_DWORD *)v8 + 1202);
  JSC::DFG::SpeculativeJIT::use((uint64_t *)v1019, (JSC::DFG::Node *)(v1020 & 0xFF00FFFFFFFFFFFFLL), v67, v68, v69, v70, v71, v72);
  if ((_BYTE)v1012)
    JSC::DFG::SpeculativeJIT::use((uint64_t *)v1010[0], (JSC::DFG::Node *)((unint64_t)v1010[1] & 0xFF00FFFFFFFFFFFFLL), v78, v79, v80, v81, v82, v83);
  if ((_BYTE)v1031)
    JSC::DFG::SpeculativeJIT::use((uint64_t *)__dst[0], (JSC::DFG::Node *)((unint64_t)__dst[1] & 0xFF00FFFFFFFFFFFFLL), v78, v79, v80, v81, v82, v83);
  v84 = *((_DWORD *)v8 + 50);
  if (v84 + 4 > *((_DWORD *)v8 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v77, v78, v79, v80, v81, v82, v83);
    v84 = *((_DWORD *)v8 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v8 + 7) + v84) = v73 & 0x1F | 0xF80083E0;
  *((_DWORD *)v8 + 50) += 4;
  JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)v8, v77, v78, v79, v80, v81, v82, v83);
  if ((_BYTE)v1031 && ((unint64_t)__dst[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v85 = (char)v1030;
    if ((char)v1030 > 15)
      v85 = -1;
    --*((_DWORD *)__dst[0] + 3 * v85 + 1196);
  }
  if ((_BYTE)v1012 && ((unint64_t)v1010[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v86 = (char)v1011;
    if ((char)v1011 > 15)
      v86 = -1;
    --*((_DWORD *)v1010[0] + 3 * v86 + 1196);
  }
  v981 = v73;
  if ((v1020 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v87 = v1021;
    if (v1021 > 15)
      v87 = -1;
    --*((_DWORD *)v1019 + 3 * v87 + 1196);
  }
LABEL_71:
  v88 = *(_QWORD *)v1027;
  v89 = (uint64_t *)(*(_QWORD *)v1027 & 0xFFFFFFFF8);
  if ((*(_QWORD *)v1027 & 1) != 0)
  {
    v763 = *v89;
    if ((v88 & 2) != 0
      || ((v764 = *(unsigned int *)((*(_QWORD *)v1027 & 0xFFFFFFFF8) + 8), (_DWORD)v764 != 0x3FFFFFFF)
        ? (v765 = (_DWORD)v764 == -1)
        : (v765 = 1),
          v765))
    {
      v766 = 2;
    }
    else if (v764 >> 28)
    {
      v956 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v956 = v763;
      *(_DWORD *)(v956 + 8) = v764;
      v766 = 1;
      v763 = v956;
    }
    else
    {
      v766 = *v89;
      v763 = v764 << 36;
    }
    v88 = v763 | v766;
    v89 = (uint64_t *)(v88 & 0xFFFFFFFF8);
    if ((v88 & 1) != 0)
    {
      v91 = 0;
      v92 = (_QWORD *)*v89;
      v90 = 1;
    }
    else
    {
      v90 = 0;
      v91 = 1;
      v92 = (_QWORD *)(v88 & 0xFFFFFFFF8);
    }
    LOBYTE(v15) = v1004;
  }
  else
  {
    v90 = 0;
    v91 = 1;
    v92 = (_QWORD *)(*(_QWORD *)v1027 & 0xFFFFFFFF8);
  }
  if (v987)
  {
    v12 = __src;
    LOBYTE(v15) = v1004;
    do
    {
      v88 = v92[2];
      v935 = v92[3] >> 60;
      v92 = (_QWORD *)(v88 & 0xFFFFFFFF8);
      if ((v88 & 1) != 0)
        v92 = (_QWORD *)*v92;
      v936 = (v935 < 0xC) & (0x824u >> v935);
      v90 = v88 & 1;
      if (!v92)
        LOBYTE(v936) = 0;
    }
    while ((v936 & 1) != 0);
  }
  if (v90)
  {
    v54 = v91;
    v91 = *(_QWORD *)(v88 & 0xFFFFFFFF8);
    if ((v88 & 2) != 0
      || ((v767 = *(unsigned int *)((v88 & 0xFFFFFFFF8) + 8), (_DWORD)v767 != 0x3FFFFFFF)
        ? (v768 = (_DWORD)v767 == -1)
        : (v768 = 1),
          v768))
    {
      v769 = 2;
    }
    else if (v767 >> 28)
    {
      v957 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v957 = v91;
      *(_DWORD *)(v957 + 8) = v767;
      v769 = 1;
      v91 = v957;
    }
    else
    {
      v769 = *(_QWORD *)(v88 & 0xFFFFFFFF8);
      v91 = v767 << 36;
    }
    v88 = v91 | v769;
    LOBYTE(v91) = v54;
    LOBYTE(v15) = v1004;
  }
  v1018 = v88;
  v100 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded((JSC::DFG::SpeculativeJIT *)v8, (const JSC::CodeOrigin *)&v1018, *((unsigned int *)v8 + 1411), a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0)
  {
    __dst[0] = &v1026;
    if (DWORD2(v1023) == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_907;
    }
    v1010[0] = (WTF *)__dst;
    ((void (*)(WTF **, __int128 *))off_1E3574A90[DWORD2(v1023)])(v1010, &v1023);
    if (*((_WORD *)v1027 + 9) != 253)
    {
      JSC::DFG::JITCompiler::emitStoreCallSiteIndex((uint64_t)v8, (JSC::ARM64LogicalImmediate *)v100, v232, v233, v234, v235, v236, v237);
      if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 495) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
        JSC::DFG::JITCompiler::loadLinkableConstant(v8, v978 | (unint64_t)(v977 << 32), v979, v1025, v238, v239, v240, v241);
      v242 = (JSC::ARM64LogicalImmediate *)v1023;
      if (v12)
      {
        v1010[0] = (WTF *)WTF::ScopedLambdaFunctor<void ()(void),JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_6>::implFunction;
        v1010[1] = (WTF *)v1010;
        v1011 = (WTF *)&v1027;
        v1012 = (uint64_t *)v8;
        v1013 = &v1032;
        v1014 = (WTF *)&v1025;
        v1015 = &v1024;
        if (DWORD2(v1023))
        {
          v242 = 0;
        }
        else
        {
          v466 = *(unsigned __int8 *)(v1023 + 17) >> 4;
          if (v466 > 9)
          {
            __break(0xC471u);
            JUMPOUT(0x197CA1680);
          }
          v467 = 1 << v466;
          if ((v467 & 0x19E) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x197C9F09CLL);
          }
          if ((v467 & 0x260) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x197CA1660);
          }
        }
        JSC::CallLinkInfo::emitFastPathImpl(v242, (uint64_t)v8, 1, (uint64_t)v1010, v238, v239, v240, v241);
        v440 = *((_DWORD *)v8 + 50);
        if (v440 + 4 > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v217, v218, v219, v220, v221, v222, v223);
          v440 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v440) = 1384127920;
        v441 = *((_DWORD *)v8 + 50);
        v442 = v441 + 4;
        *((_DWORD *)v8 + 50) = v441 + 4;
        if ((v441 + 8) > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v217, v218, v219, v220, v221, v222, v223);
          v442 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v442) = -734491104;
        *((_DWORD *)v8 + 50) += 4;
        goto LABEL_165;
      }
      if (DWORD2(v1023))
      {
        v1010[0] = 0;
        v1010[1] = 0;
        v242 = 0;
      }
      else
      {
        v329 = *(unsigned __int8 *)(v1023 + 17) >> 4;
        if (v329 > 9)
        {
          __break(0xC471u);
          JUMPOUT(0x197CA1424);
        }
        v330 = 1 << v329;
        if ((v330 & 0x19E) == 0)
        {
          if ((v330 & 0x260) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x197C9F4E4);
          }
          __break(0xC471u);
          JUMPOUT(0x197CA1404);
        }
        v1010[0] = 0;
        v1010[1] = 0;
      }
      JSC::CallLinkInfo::emitFastPathImpl(v242, (uint64_t)v8, 0, (uint64_t)v1010, v238, v239, v240, v241);
      ++*((_DWORD *)v8 + 1196);
      v249 = *((unsigned int *)v8 + 1194);
      if ((_DWORD)v249 != 0x3FFFFFFF)
      {
        *((_QWORD *)v8 + 597) = 0xFFFFFFFF3FFFFFFFLL;
        JSC::DFG::SpeculativeJIT::spill((uint64_t)v8, v249, v243, v244, v245, v246, v247, v248);
      }
      v250 = *((_QWORD *)v8 + 497);
      v251 = *(_DWORD *)(v250 + 48);
      *((_DWORD *)v8 + 1194) = v251;
      *((_DWORD *)v8 + 1195) = 4;
      v252 = ~v251;
      if (v252 >= *((unsigned int *)v8 + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197CA195CLL);
      }
      v253 = *((_QWORD *)v8 + 499) + 24 * (int)v252;
      v254 = *(_DWORD *)(v250 + 52);
      *(_QWORD *)v253 = v250;
      *(_DWORD *)(v253 + 8) = v254;
      *(_BYTE *)(v253 + 12) = 16;
      *(_DWORD *)(v253 + 13) = 0;
      *(_BYTE *)(v253 + 17) = 0;
      JSC::MacroAssemblerARM64::add64((uint64_t)v8, 16- ((8 * (*(_DWORD *)(*((_QWORD *)v8 + 495) + 856) + *(_DWORD *)(*((_QWORD *)v8 + 495) + 860)) + 24) & 0xFFFFFFF0), 29, 31, v245, v246, v247, v248);
LABEL_164:
      --*((_DWORD *)v8 + 1196);
      goto LABEL_165;
    }
LABEL_656:
    LOBYTE(v12) = v91;
    v22 = JSC::AssemblyHelpers::selectScratchGPR<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(v75, v74);
    JSC::DFG::JITCompiler::emitStoreCallSiteIndex((uint64_t)v8, (JSC::ARM64LogicalImmediate *)v100, v797, v798, v799, v800, v801, v802);
    JSC::MacroAssemblerARM64::add64((uint64_t)v8, 4294967280, 31, v22, v803, v804, v805, v806);
    JSC::MacroAssemblerARM64::store64((uint64_t)v8, 29, v22, v807, v808, v809, v810, v811);
    v54 = (uint64_t)(v8 + 56);
    v819 = *((_DWORD *)v8 + 50);
    if (v819 + 4 <= *((_DWORD *)v8 + 48))
    {
LABEL_657:
      *(_DWORD *)(*((_QWORD *)v8 + 7) + v819) = -788495361;
      *((_DWORD *)v8 + 50) += 4;
      v1010[0] = (WTF *)&v1011;
      v1010[1] = (WTF *)3;
      if ((_DWORD)v22)
      {
        LOWORD(v1011) = v22;
        v820 = 1;
        HIDWORD(v1010[1]) = 1;
      }
      else
      {
        v820 = 0;
      }
      if (v75 != 1)
      {
        *((_WORD *)&v1011 + v820++) = v75 | 0x100;
        HIDWORD(v1010[1]) = v820;
      }
      if (v74 == 2)
      {
        if (v820)
          goto LABEL_663;
LABEL_757:
        if (JSC::DFG::Node::ecmaMode(v1027))
          v865 = operationCallDirectEvalSloppy;
        else
          v865 = operationCallDirectEvalStrict;
        JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, (uint64_t)v865, v859, v860, v861, v862, v863, v864, (int *)v1010);
        JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 0xFFFFFFFFLL, v866, v867, v868, v869, v870, v871);
        JSC::MacroAssemblerARM64::branchTest64((uint64_t)v8, 1, 0, 0xFFFFFFFFLL, v872, v873, v874, v875, (uint64_t)v1010, v876);
        v884 = *((_DWORD *)v8 + 50);
        if (v884 + 4 > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v54, v877, v878, v879, v880, v881, v882, v883);
          v884 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v884) = -1862237185;
        *((_DWORD *)v8 + 50) += 4;
        JSC::MacroAssemblerARM64::load64((uint64_t)v8, 0x80000001FLL, 0, v879, v880, v881, v882, v883);
        JSC::DFG::JITCompiler::loadLinkableConstant(v8, v978 | (unint64_t)(v977 << 32), v979, 2, v885, v886, v887, v888);
        JSC::AssemblyHelpers::emitVirtualCallWithoutMovingGlobalObject((uint64_t)v8, *(_QWORD *)(*((_QWORD *)v8 + 44) + 16), 2, 0, v889, v890, v891, v892);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v1010, (uint64_t)v8, v893, v894, v895, v896, v897, v898);
        JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_2::operator()((uint64_t)v8, v899, v900, v901, v902, v903, v904, v905);
        LOBYTE(v91) = v12;
        goto LABEL_165;
      }
      *((_WORD *)&v1011 + v820++) = v74 | 0x200;
      HIDWORD(v1010[1]) = v820;
      while (1)
      {
LABEL_663:
        v821 = 0;
        v822 = 0;
        v823 = v1010[0];
        v824 = v820;
        do
        {
          if ((*((_BYTE *)v1010[0] + v821 + 1) & 0x40) != 0)
            goto LABEL_871;
          v822 |= 1 << *((_BYTE *)v1010[0] + v821 + 1);
          v821 += 2;
        }
        while (2 * v820 != v821);
        v825 = 0;
        do
        {
          v826 = *((_BYTE *)v1010[0] + v825) & 0x7F;
          if (v826 >= 0x40)
            goto LABEL_871;
          v822 &= ~(1 << v826);
          v825 += 2;
        }
        while (2 * v820 != v825);
        v827 = (uint8x8_t)vcnt_s8((int8x8_t)v822);
        v827.i16[0] = vaddlv_u8(v827);
        v828 = v827.i32[0];
        v829 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v822));
        v829.i16[0] = vaddlv_u8(v829);
        if (!(v829.i32[0] + v828))
        {
          v839 = *(_BYTE *)v1010[0];
          v840 = *((_BYTE *)v1010[0] + 1);
          JSC::MacroAssemblerARM64::swap((uint64_t)v8, *(char *)v1010[0], (char)v840, v814, v815, v816, v817, v818);
          memmove(v1010[0], (char *)v1010[0] + 2, 2 * HIDWORD(v1010[1]) - 2);
          v841 = --HIDWORD(v1010[1]);
          if (HIDWORD(v1010[1]))
          {
            v842 = v1010[0];
            v843 = 2 * v841;
            while (*(unsigned __int8 *)v842 != v840)
            {
              v842 = (WTF *)((char *)v842 + 2);
              v843 -= 2;
              if (!v843)
                goto LABEL_695;
            }
            *(_BYTE *)v842 = v839;
          }
LABEL_695:
          WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,3u>(std::array<JSC::ARM64Registers::RegisterID,3u>,std::array<JSC::ARM64Registers::RegisterID,3u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)v1010, (uint64_t)__dst, 0);
          v820 = HIDWORD(v1010[1]);
          goto LABEL_689;
        }
        v830 = 0;
        v831 = v820 <= 1uLL ? 1 : v820;
        v832 = 2 * v831;
        while (1)
        {
          v833 = *((unsigned __int8 *)v1010[0] + v830 + 1);
          if ((v833 & 0x7Fu) >= 0x40)
            goto LABEL_871;
          if (((v822 >> (v833 & 0x7F)) & 1) != 0)
            break;
          v830 += 2;
          if (v832 == v830)
            goto LABEL_689;
        }
        v834 = *((unsigned __int8 *)v1010[0] + v830);
        if (v834 != v833)
          break;
LABEL_688:
        memmove((char *)v823 + v830, (char *)v823 + v830 + 2, 2 * v824 - v830 - 2);
        v820 = --HIDWORD(v1010[1]);
LABEL_689:
        if (!v820)
        {
          v844 = v1010[0];
          if (&v1011 != (WTF **)v1010[0] && v1010[0])
          {
            v1010[0] = 0;
            LODWORD(v1010[1]) = 0;
            WTF::fastFree((unint64_t)v844, v812, v813, v814, v815, v816, v817, v818);
          }
          goto LABEL_757;
        }
      }
      v835 = (char)v834;
      if ((char)v834 == 63)
      {
        v836 = *((_DWORD *)v8 + 50);
        if ((char)v833 != 31)
        {
          v838 = v833 & 0x1F | 0xD2800000;
          goto LABEL_685;
        }
      }
      else
      {
        v836 = *((_DWORD *)v8 + 50);
        if (v833 != 31 && v835 != 31)
        {
          v838 = v833 & 0xFFE0FFFF | ((v835 & 0x1F) << 16) | 0xAA0003E0;
LABEL_685:
          if (v836 + 4 > *((_DWORD *)v8 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v54, (uint64_t)v812, v813, v814, v815, v816, v817, v818);
            v836 = *((_DWORD *)v8 + 50);
          }
          *(_DWORD *)(*((_QWORD *)v8 + 7) + v836) = v838;
          *((_DWORD *)v8 + 50) += 4;
          v823 = v1010[0];
          v824 = HIDWORD(v1010[1]);
          goto LABEL_688;
        }
      }
      v838 = (char)v833 | (32 * v835) | 0x91000000;
      goto LABEL_685;
    }
LABEL_907:
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)v54, (uint64_t)v812, v813, v814, v815, v816, v817, v818);
    v819 = *((_DWORD *)v8 + 50);
    goto LABEL_657;
  }
  if (*((_WORD *)v1027 + 9) == 253)
    goto LABEL_656;
  v101 = (uint64_t *)((char *)v1027 + 24);
  v994 = v91;
  if ((*((_BYTE *)v1027 + 56) & 0x10) != 0)
  {
    v464 = *((_QWORD *)v8 + 495);
    v465 = *v101;
    if (*(_DWORD *)(v464 + 164) <= v465)
    {
      __break(0xC471u);
      JUMPOUT(0x197CA1994);
    }
    v101 = (uint64_t *)(*(_QWORD *)(v464 + 152) + 8 * v465);
  }
  v102 = *v101;
  v1017 = 0;
  v103 = *((_QWORD *)v8 + 688);
  v104 = *(unsigned int *)((v102 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v105 = (uint64_t *)(v103 + 24);
  v106 = (uint64_t *)(v103 + 8);
  if ((v102 & 1) != 0)
    v107 = v105;
  else
    v107 = v106;
  v108 = *v107;
  v109 = *v107 + 32 * v104;
  v110 = *((_DWORD *)v8 + 1396);
  v111 = *(_DWORD *)(v109 + 20);
  if (v110 != v111)
  {
    if ((*(_QWORD *)(v109 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v111 ^ v110) >= 2)
      {
        v468 = *(_QWORD *)v109;
        if (*(_QWORD *)v109 != 4)
        {
          *(_QWORD *)v109 = v468 | 2;
          v520 = (unsigned int *)(v468 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v468 & 1) != 0)
          {
            v855 = 2 * *v520;
            while (v855 * 4)
            {
              v856 = *(_QWORD *)&v520[v855];
              if ((*(_BYTE *)(v856 + 19) & 0xC) == 0)
              {
                v857 = *(_QWORD *)(v856 + 96);
                v858 = (v857 & 1) != 0 ? (v857 >> 1) & 3 : *(unsigned __int8 *)(v857 + 4);
                v855 -= 2;
                if (v858 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v520, v93, v94, v95, v96, v97, v98, v99);
              goto LABEL_468;
            }
          }
          else if (v520)
          {
            if ((*((_BYTE *)v520 + 19) & 0xC) != 0
              || ((v521 = *((_QWORD *)v520 + 12), (v521 & 1) != 0)
                ? (v522 = (v521 >> 1) & 3)
                : (v522 = *(unsigned __int8 *)(v521 + 4)),
                  v522 == 2))
            {
LABEL_468:
              *(_QWORD *)v109 = 4;
            }
          }
        }
        *(_DWORD *)(v108 + 32 * v104 + 16) = -21020677;
      }
      if ((v110 & 1) != 0)
        *(_QWORD *)v109 &= ~2uLL;
    }
    *(_DWORD *)(v109 + 20) = v110;
  }
  v112 = *(_QWORD *)(v109 + 24);
  if (v112)
    v113 = (v112 & 0xFFFE000000000002) == 0;
  else
    v113 = 0;
  if (v113 && *(_BYTE *)(v112 + 5) == 26)
  {
    JSC::DFG::Graph::freeze(*((_QWORD *)v8 + 495), *(_QWORD *)(v109 + 24), v94, v95, v96, v97, v98, v99);
    v1017 = *(_QWORD *)(16 * (*(_DWORD *)v112 & 0xFFFFFFFE) + 0x28);
  }
  v1016 = 0;
  if (*((_BYTE *)v998 + 5) == 8)
  {
    v287 = *((_QWORD *)v998 + 1);
    v288 = (unsigned int *)(v287 + 8);
    do
      v289 = __ldaxr(v288);
    while (__stlxr(v289 + 1, v288));
    v290 = *(unsigned __int8 *)(v287 + 14);
    do
    {
      v291 = __ldaxr(v288);
      v292 = v291 - 1;
    }
    while (__stlxr(v292, v288));
    if (!v292)
    {
      atomic_store(1u, (unsigned int *)(v287 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v287 + 32))(v287);
    }
    if (v290)
    {
      v293 = v1016;
    }
    else
    {
      v293 = v980 ? *((_QWORD *)v998 + 6) : *((_QWORD *)v998 + 5);
      v1016 = v293;
    }
    if (v293 && !*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v8 + 44) + 16) + 93444))
    {
      __dst[0] = v8;
      __dst[1] = &v1017;
      v1030 = (char *)&v1016;
      if (v12)
      {
        JSC::DFG::JITCompiler::emitStoreCallSiteIndex((uint64_t)v8, (JSC::ARM64LogicalImmediate *)v100, v94, v95, v96, v97, v98, v99);
        JSC::CallFrameShuffler::CallFrameShuffler((JSC::CallFrameShuffler *)v1010, (JSC::CCallHelpers *)v8, (const JSC::CallFrameShuffleData *)&v1032);
        JSC::CallFrameShuffler::prepareForTailCall((JSC::CallFrameShuffler *)v1010);
        v503 = v1014;
        if (v1014)
        {
          v1014 = 0;
          LODWORD(v1015) = 0;
          WTF::fastFree((unint64_t)v503, v496, v497, v498, v499, v500, v501, v502);
        }
        v504 = v1011;
        if (v1011)
        {
          v1011 = 0;
          LODWORD(v1012) = 0;
          WTF::fastFree((unint64_t)v504, v496, v497, v498, v499, v500, v501, v502);
        }
        v505 = v1010[1];
        if (v1010[1])
        {
          do
          {
            v506 = (WTF *)*((_QWORD *)v505 + 5);
            v507 = *(_QWORD *)v505;
            if ((WTF *)((char *)v505 + 16) != *(WTF **)v505 && v507 != 0)
            {
              *(_QWORD *)v505 = 0;
              *((_DWORD *)v505 + 2) = 0;
              WTF::fastFree(v507, v496, v497, v498, v499, v500, v501, v502);
            }
            WTF::fastFree((unint64_t)v505, v496, v497, v498, v499, v500, v501, v502);
            v505 = v506;
          }
          while (v506);
        }
        JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_3::operator()((uint64_t *)__dst, (uint64_t)v496, v497, v498, v499, v500, v501, v502);
        v516 = *((_DWORD *)v8 + 50);
        if (v516 + 4 > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v509, v510, v511, v512, v513, v514, v515);
          v516 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v516) = -698416192;
        *((_DWORD *)v8 + 50) += 4;
        JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v8, v1027, v510, v511, v512, v513, v514, v515);
        LOBYTE(v91) = v994;
        goto LABEL_165;
      }
      for (i = *((_DWORD *)v8 + 50); (signed int)i < *((_DWORD *)v8 + 13); *((_DWORD *)v8 + 50) = i)
      {
        if (i + 4 > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v93, v94, v95, v96, v97, v98, v99);
          i = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + i) = -721215457;
        i = *((_DWORD *)v8 + 50) + 4;
      }
      v295 = i;
      if (i + 4 > *((_DWORD *)v8 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v93, v94, v95, v96, v97, v98, v99);
        v295 = *((_DWORD *)v8 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 7) + v295) = 335544320;
      v296 = *((_DWORD *)v8 + 50) + 4;
      *((_DWORD *)v8 + 50) = v296;
      if (v8[328])
        v297 = 69;
      else
        v297 = 65;
      v1010[0] = (WTF *)i;
      LOBYTE(v1010[1]) = v297;
      *(_WORD *)((char *)&v1010[1] + 1) = 15;
      for (BYTE3(v1010[1]) = -1; v296 < *((_DWORD *)v8 + 13); *((_DWORD *)v8 + 50) = v296)
      {
        if ((v296 + 4) > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), (uint64_t)v93, v94, v95, v96, v97, v98, v99);
          v296 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v296) = -721215457;
        v296 = *((_DWORD *)v8 + 50) + 4;
      }
      *((_DWORD *)v8 + 52) = 0;
      JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_3::operator()((uint64_t *)__dst, (uint64_t)v93, v94, v95, v96, v97, v98, v99);
      v305 = *((_DWORD *)v8 + 50);
      if (v305 + 4 > *((_DWORD *)v8 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v298, v299, v300, v301, v302, v303, v304);
        v305 = *((_DWORD *)v8 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 7) + v305) = -698416192;
      *((_DWORD *)v8 + 50) += 4;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v1010, (uint64_t)v8, v299, v300, v301, v302, v303, v304);
      JSC::DFG::JITCompiler::emitStoreCallSiteIndex((uint64_t)v8, (JSC::ARM64LogicalImmediate *)v100, v306, v307, v308, v309, v310, v311);
      *((_DWORD *)v8 + 52) = 0;
      v319 = *((_DWORD *)v8 + 50);
      if (v319 + 4 > *((_DWORD *)v8 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v8 + 56), v312, v313, v314, v315, v316, v317, v318);
        v319 = *((_DWORD *)v8 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 7) + v319) = -1811939328;
      v320 = *((_DWORD *)v8 + 50) + 4;
      *((_DWORD *)v8 + 50) = v320;
      v321 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v321 = off_1E3574CF8;
      *(_DWORD *)(v321 + 8) = 1;
      *(_DWORD *)(v321 + 12) = v320;
      *(_DWORD *)(v321 + 16) = 3;
      *(_DWORD *)(v321 + 20) = v296;
      v322 = *((unsigned int *)v8 + 61);
      if ((_DWORD)v322 == *((_DWORD *)v8 + 60))
      {
        v490 = v322 + (v322 >> 2);
        if (v490 >= 0x10)
          v491 = v490 + 1;
        else
          v491 = 16;
        if (v491 <= v322 + 1)
          v492 = v322 + 1;
        else
          v492 = v491;
        if (v492 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x197CA199CLL);
        }
        v493 = (const void *)*((_QWORD *)v8 + 29);
        v494 = (void *)WTF::fastMalloc((WTF *)(8 * v492));
        *((_DWORD *)v8 + 60) = v492;
        *((_QWORD *)v8 + 29) = v494;
        memcpy(v494, v493, 8 * v322);
        if (v493)
        {
          if (*((const void **)v8 + 29) == v493)
          {
            *((_QWORD *)v8 + 29) = 0;
            *((_DWORD *)v8 + 60) = 0;
          }
          WTF::fastFree((unint64_t)v493, v495, v218, v219, v220, v221, v222, v223);
        }
        v322 = *((unsigned int *)v8 + 61);
        v323 = (uint64_t *)(*((_QWORD *)v8 + 29) + 8 * v322);
      }
      else
      {
        v323 = (uint64_t *)(*((_QWORD *)v8 + 29) + 8 * v322);
      }
      *v323 = v321;
      *((_DWORD *)v8 + 61) = v322 + 1;
      ++*((_DWORD *)v8 + 1196);
      v217 = *((unsigned int *)v8 + 1194);
      if ((_DWORD)v217 != 0x3FFFFFFF)
      {
        *((_QWORD *)v8 + 597) = 0xFFFFFFFF3FFFFFFFLL;
        JSC::DFG::SpeculativeJIT::spill((uint64_t)v8, v217, v218, v219, v220, v221, v222, v223);
      }
      v324 = *((_QWORD *)v8 + 497);
      v325 = *(_DWORD *)(v324 + 48);
      *((_DWORD *)v8 + 1194) = v325;
      *((_DWORD *)v8 + 1195) = 4;
      v326 = ~v325;
      LOBYTE(v91) = v994;
      if (v326 >= *((unsigned int *)v8 + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197CA1974);
      }
      v327 = *((_QWORD *)v8 + 499) + 24 * (int)v326;
      v328 = *(_DWORD *)(v324 + 52);
      *(_QWORD *)v327 = v324;
      *(_DWORD *)(v327 + 8) = v328;
      *(_BYTE *)(v327 + 12) = 16;
      *(_DWORD *)(v327 + 13) = 0;
      *(_BYTE *)(v327 + 17) = 0;
      goto LABEL_164;
    }
  }
  v114 = *((_QWORD *)v8 + 46);
  if (v114)
  {
    v115 = (unsigned int *)(v114 + 8);
    do
      v116 = __ldaxr(v115);
    while (__stlxr(v116 + 1, v115));
  }
  v117 = (uint64_t *)*((_QWORD *)v8 + 497);
  v118 = *((_QWORD *)v8 + 495);
  v126 = WTF::fastMalloc((WTF *)0x70);
  v127 = *v117;
  if ((*v117 & 1) != 0)
  {
    v845 = *(_QWORD *)(v127 & 0xFFFFFFFF8);
    if ((v127 & 2) != 0
      || ((v846 = *(unsigned int *)((v127 & 0xFFFFFFFF8) + 8), (_DWORD)v846 != 0x3FFFFFFF)
        ? (v847 = (_DWORD)v846 == -1)
        : (v847 = 1),
          v847))
    {
      v848 = 2;
    }
    else if (v846 >> 28)
    {
      v964 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v964 = v845;
      *(_DWORD *)(v964 + 8) = v846;
      v848 = 1;
      v845 = v964;
    }
    else
    {
      v848 = *(_QWORD *)(v127 & 0xFFFFFFFF8);
      v845 = v846 << 36;
    }
    v127 = v845 | v848;
  }
  v128 = *(_QWORD *)(v118 + 32);
  *(_QWORD *)v126 = 0;
  *(_QWORD *)(v126 + 8) = 0;
  *(_BYTE *)(v126 + 16) = 2;
  *(_BYTE *)(v126 + 17) &= ~0x10u;
  *(_QWORD *)(v126 + 20) = 0;
  v129 = (_DWORD *)(v126 + 20);
  *(_QWORD *)(v126 + 28) = 0;
  *(_DWORD *)(v126 + 36) = 0;
  if ((v127 & 1) != 0)
  {
    v1006 = (JSC::ARM64LogicalImmediate *)v126;
    v849 = v127 & 0xFFFFFFFF8;
    v850 = *(_QWORD *)(v127 & 0xFFFFFFFF8);
    if ((v127 & 2) != 0
      || ((v851 = *(unsigned int *)((v127 & 0xFFFFFFFF8) + 8), (_DWORD)v851 != 0x3FFFFFFF)
        ? (v852 = (_DWORD)v851 == -1)
        : (v852 = 1),
          v852))
    {
      v853 = 2;
    }
    else if (v851 >> 28)
    {
      v965 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v965 = v850;
      *(_DWORD *)(v965 + 8) = v851;
      v853 = 1;
      v850 = v965;
    }
    else
    {
      v853 = *(_QWORD *)(v127 & 0xFFFFFFFF8);
      v850 = v851 << 36;
    }
    v854 = v850 | v853;
    v130 = (uint64_t)v1006;
    *((_QWORD *)v1006 + 5) = v854;
    *((_OWORD *)v1006 + 3) = 0u;
    *((_OWORD *)v1006 + 4) = 0u;
    *((_BYTE *)v1006 + 80) = 0;
    *((_QWORD *)v1006 + 11) = v128;
    *((_QWORD *)v1006 + 12) = v998;
    v12 = __src;
    if (v849)
      WTF::fastFree(v849, v119, v120, v121, v122, v123, v124, v125);
  }
  else
  {
    *(_QWORD *)(v126 + 40) = v127;
    *(_OWORD *)(v126 + 48) = 0u;
    *(_OWORD *)(v126 + 64) = 0u;
    *(_BYTE *)(v126 + 80) = 0;
    *(_QWORD *)(v126 + 88) = v128;
    *(_QWORD *)(v126 + 96) = v998;
    v130 = v126;
  }
  *(_QWORD *)(v130 + 104) = 0;
  *(_QWORD *)(v130 + 104) = *(_QWORD *)(v114 + 200);
  *(_QWORD *)(v114 + 200) = v130;
  v131 = (unsigned int *)(v114 + 8);
  v132 = (void *)v130;
  do
  {
    v133 = __ldaxr(v131);
    v134 = v133 - 1;
  }
  while (__stlxr(v134, v131));
  if (!v134)
  {
    atomic_store(1u, (unsigned int *)(v114 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v114 + 32))(v114);
  }
  *(_BYTE *)(v130 + 17) = *(_BYTE *)(v130 + 17) & 0xF0 | v1026 & 0xF;
  if (!(_DWORD)v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197CA06A0);
  }
  *v129 = v22;
  if (!v12)
  {
    v988 = (JSC::AssemblerBuffer *)(v8 + 56);
    for (j = *((_DWORD *)v8 + 50); j < *((_DWORD *)v8 + 13); *((_DWORD *)v8 + 50) = j)
    {
      if ((j + 4) > *((_DWORD *)v8 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v988, (uint64_t)v119, v120, v121, v122, v123, v124, v125);
        j = *((_DWORD *)v8 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 7) + j) = -721215457;
      j = *((_DWORD *)v8 + 50) + 4;
    }
    *((_DWORD *)v8 + 52) = 0;
    JSC::DFG::JITCompiler::emitStoreCallSiteIndex((uint64_t)v8, (JSC::ARM64LogicalImmediate *)v100, v120, v121, v122, v123, v124, v125);
    JSC::DirectCallLinkInfo::emitDirectFastPath((JSC::DirectCallLinkInfo *)v130, (JSC::CCallHelpers *)v8, v136, v137, v138, v139, v140, v141, (uint64_t)v1010);
    v149 = *((_DWORD *)v8 + 50);
    for (k = *((_DWORD *)v8 + 13); v149 < k; k = *((_DWORD *)v8 + 13))
    {
      if ((v149 + 4) > *((_DWORD *)v8 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v988, (uint64_t)v142, v143, v144, v145, v146, v147, v148);
        v149 = *((_DWORD *)v8 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 7) + v149) = -721215457;
      v149 = *((_DWORD *)v8 + 50) + 4;
      *((_DWORD *)v8 + 50) = v149;
    }
    *((_DWORD *)v8 + 52) = 0;
    if ((*(_BYTE *)(v130 + 17) & 0x10) != 0 && !HIDWORD(v1010[1]))
    {
      v202 = v149;
LABEL_137:
      ++*((_DWORD *)v8 + 1196);
      v211 = *((unsigned int *)v8 + 1194);
      LOBYTE(v91) = v994;
      if ((_DWORD)v211 != 0x3FFFFFFF)
      {
        *((_QWORD *)v8 + 597) = 0xFFFFFFFF3FFFFFFFLL;
        JSC::DFG::SpeculativeJIT::spill((uint64_t)v8, v211, v143, v144, v145, v146, v147, v148);
      }
      v212 = *((_QWORD *)v8 + 497);
      v213 = *(_DWORD *)(v212 + 48);
      *((_DWORD *)v8 + 1194) = v213;
      *((_DWORD *)v8 + 1195) = 4;
      v214 = ~v213;
      if (v214 >= *((unsigned int *)v8 + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197CA193CLL);
      }
      v215 = *((_QWORD *)v8 + 499) + 24 * (int)v214;
      v216 = *(_DWORD *)(v212 + 52);
      *(_QWORD *)v215 = v212;
      *(_DWORD *)(v215 + 8) = v216;
      *(_BYTE *)(v215 + 12) = 16;
      *(_DWORD *)(v215 + 13) = 0;
      *(_BYTE *)(v215 + 17) = 0;
      JSC::MacroAssemblerARM64::add64((uint64_t)v8, 16- ((8 * (*(_DWORD *)(*((_QWORD *)v8 + 495) + 856) + *(_DWORD *)(*((_QWORD *)v8 + 495) + 860)) + 24) & 0xFFFFFFF0), 29, 31, v145, v146, v147, v148);
      --*((_DWORD *)v8 + 1196);
      v224 = v8 + 3704;
      LODWORD(__dst[0]) = v202;
      __dst[1] = v132;
      v225 = *((unsigned int *)v8 + 929);
      if ((_DWORD)v225 == *((_DWORD *)v8 + 928))
      {
        v469 = WTF::Vector<JSC::DFG::JITCompiler::JSDirectCallRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v224, (void *)(v225 + 1), (unint64_t)__dst, v219, v220, v221, v222, v223);
        v225 = *((unsigned int *)v8 + 929);
        v470 = *((_QWORD *)v8 + 463) + 16 * v225;
        *(_DWORD *)v470 = *(_DWORD *)v469;
        *(_QWORD *)(v470 + 8) = *(_QWORD *)(v469 + 8);
      }
      else
      {
        v226 = *v224 + 16 * v225;
        *(_DWORD *)v226 = v202;
        *(_QWORD *)(v226 + 8) = v132;
      }
      goto LABEL_142;
    }
    if (v149 < k)
    {
      do
      {
        if ((v149 + 4) > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v988, (uint64_t)v142, v143, v144, v145, v146, v147, v148);
          v149 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v149) = -721215457;
        v149 = *((_DWORD *)v8 + 50) + 4;
        *((_DWORD *)v8 + 50) = v149;
      }
      while (v149 < *((_DWORD *)v8 + 13));
    }
    v151 = v149;
    if ((v149 + 4) > *((_DWORD *)v8 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v988, (uint64_t)v142, v143, v144, v145, v146, v147, v148);
      v151 = *((_DWORD *)v8 + 50);
    }
    *(_DWORD *)(*((_QWORD *)v8 + 7) + v151) = 335544320;
    v152 = *((_DWORD *)v8 + 50) + 4;
    *((_DWORD *)v8 + 50) = v152;
    if (v8[328])
      v153 = 69;
    else
      v153 = 65;
    v1019 = (JSC::DFG::SpeculativeJIT *)v149;
    LOBYTE(v1020) = v153;
    *(_WORD *)((char *)&v1020 + 1) = 15;
    BYTE3(v1020) = -1;
    for (m = v89; v152 < *((_DWORD *)v8 + 13); *((_DWORD *)v8 + 50) = v152)
    {
      if ((v152 + 4) > *((_DWORD *)v8 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v988, (uint64_t)v142, v143, v144, v145, v146, v147, v148);
        v152 = *((_DWORD *)v8 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 7) + v152) = -721215457;
      v152 = *((_DWORD *)v8 + 50) + 4;
    }
    __srca = v152;
    v999 = j;
    *((_DWORD *)v8 + 52) = 0;
    v154 = HIDWORD(v1010[1]);
    if (HIDWORD(v1010[1]))
    {
      v155 = 0;
      do
      {
        if (v155 >= HIDWORD(v1010[1]))
        {
          __break(0xC471u);
          JUMPOUT(0x197CA1810);
        }
        v156 = v1010[0];
        v157 = (unsigned int *)((char *)v1010[0] + 12 * v155);
        *((_DWORD *)v8 + 52) = 0;
        v159 = (unsigned __int8 *)(v157 + 2);
        v158 = *((unsigned __int8 *)v157 + 8);
        switch(*((_BYTE *)v157 + 8))
        {
          case 0x83:
          case 0x87:
            v160 = (void *)*v157;
            v161 = *((_DWORD *)v8 + 50);
            if (v161 < *((_DWORD *)v8 + 13))
            {
              do
              {
                if ((v161 + 4) > *((_DWORD *)v8 + 48))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v988, (uint64_t)v142, v143, v144, v145, v146, v147, v148);
                  v161 = *((_DWORD *)v8 + 50);
                }
                *(_DWORD *)(*((_QWORD *)v8 + 7) + v161) = -721215457;
                v161 = *((_DWORD *)v8 + 50) + 4;
                *((_DWORD *)v8 + 50) = v161;
              }
              while (v161 < *((_DWORD *)v8 + 13));
              v158 = *v159;
            }
            v162 = (char *)v156 + 12 * v155;
            v163 = v162[9];
            v164 = v162[10];
            v165 = v162[11];
            __dst[0] = v160;
            __dst[1] = (void *)v161;
            BYTE3(v1030) = v163 & 0xF;
            *(_WORD *)((char *)&v1030 + 1) = v158;
            v166 = v164 << 6;
            goto LABEL_120;
          case 0x84:
          case 0x88:
            v167 = (void *)*v157;
            v168 = *((_DWORD *)v8 + 50);
            if (v168 < *((_DWORD *)v8 + 13))
            {
              do
              {
                if ((v168 + 4) > *((_DWORD *)v8 + 48))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v988, (uint64_t)v142, v143, v144, v145, v146, v147, v148);
                  v168 = *((_DWORD *)v8 + 50);
                }
                *(_DWORD *)(*((_QWORD *)v8 + 7) + v168) = -721215457;
                v168 = *((_DWORD *)v8 + 50) + 4;
                *((_DWORD *)v8 + 50) = v168;
              }
              while (v168 < *((_DWORD *)v8 + 13));
              v158 = *v159;
            }
            v169 = (char *)v156 + 12 * v155;
            v170 = v169[9];
            v171 = *((_WORD *)v169 + 2);
            v165 = v169[11];
            __dst[0] = v167;
            __dst[1] = (void *)v168;
            BYTE3(v1030) = v170 & 0xF;
            *(_WORD *)((char *)&v1030 + 1) = v158;
            v166 = v171 & 0x3F;
LABEL_120:
            WORD2(v1030) = v166;
            LOBYTE(v1030) = v165;
            break;
          default:
            v176 = (void *)*v157;
            v177 = *((_DWORD *)v8 + 50);
            if (v177 < *((_DWORD *)v8 + 13))
            {
              do
              {
                if ((v177 + 4) > *((_DWORD *)v8 + 48))
                {
                  JSC::AssemblerBuffer::outOfLineGrow(v988, (uint64_t)v142, v143, v144, v145, v146, v147, v148);
                  v177 = *((_DWORD *)v8 + 50);
                }
                *(_DWORD *)(*((_QWORD *)v8 + 7) + v177) = -721215457;
                v177 = *((_DWORD *)v8 + 50) + 4;
                *((_DWORD *)v8 + 50) = v177;
              }
              while (v177 < *((_DWORD *)v8 + 13));
              v158 = *v159;
            }
            v178 = *((_BYTE *)v156 + 12 * v155 + 9);
            LOBYTE(v1030) = -1;
            __dst[0] = v176;
            __dst[1] = (void *)v177;
            BYTE3(v1030) = v178 & 0xF;
            *(_WORD *)((char *)&v1030 + 1) = v158;
            WORD2(v1030) = 0;
            break;
        }
        v172 = *((unsigned int *)v8 + 11);
        if ((_DWORD)v172 == *((_DWORD *)v8 + 10))
        {
          v179 = WTF::Vector<JSC::ARM64Assembler::LinkRecord,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v8 + 32), v172 + 1, (unint64_t)__dst, v144, v145, v146, v147, v148);
          v173 = *((_QWORD *)v8 + 4) + 24 * *((unsigned int *)v8 + 11);
          *(_QWORD *)v173 = 0;
          *(_QWORD *)(v173 + 8) = 0;
          *(_BYTE *)(v173 + 16) = -1;
          v180 = (((*(unsigned __int8 *)(v173 + 19) >> 4) & 0xF) << 20) | 0xF0041;
          *(_WORD *)(v173 + 17) = 65;
          *(_BYTE *)(v173 + 19) = BYTE2(v180);
          *(_WORD *)(v173 + 20) &= 0xFC00u;
          v174 = *(_OWORD *)v179;
          v175 = *(char **)(v179 + 16);
        }
        else
        {
          v173 = *((_QWORD *)v8 + 4) + 24 * v172;
          v174 = *(_OWORD *)__dst;
          v175 = v1030;
        }
        *(_QWORD *)(v173 + 16) = v175;
        *(_OWORD *)v173 = v174;
        ++*((_DWORD *)v8 + 11);
        ++v155;
      }
      while (v155 != v154);
    }
    __dst[0] = &v1030;
    LODWORD(__dst[1]) = 1;
    if (v981 == 1)
    {
LABEL_129:
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v8, (uint64_t)v132, 0, v144, v145, v146, v147, v148);
      JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, (uint64_t)operationLinkDirectCall, v181, v182, v183, v184, v185, v186, (int *)__dst);
      JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 0, v187, v188, v189, v190, v191, v192);
      v200 = *((_DWORD *)v8 + 50);
      if (v200 < *((_DWORD *)v8 + 13))
      {
        v201 = v999;
        v202 = __srca;
        do
        {
          if ((v200 + 4) > *((_DWORD *)v8 + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v988, v193, v194, v195, v196, v197, v198, v199);
            v200 = *((_DWORD *)v8 + 50);
          }
          *(_DWORD *)(*((_QWORD *)v8 + 7) + v200) = -721215457;
          v200 = *((_DWORD *)v8 + 50) + 4;
          *((_DWORD *)v8 + 50) = v200;
        }
        while (v200 < *((_DWORD *)v8 + 13));
      }
      else
      {
        v201 = v999;
        v202 = __srca;
      }
      v203 = v200;
      if ((v200 + 4) > *((_DWORD *)v8 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v988, v193, v194, v195, v196, v197, v198, v199);
        v203 = *((_DWORD *)v8 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 7) + v203) = 335544320;
      *((_DWORD *)v8 + 50) += 4;
      if (v8[328])
        v204 = 69;
      else
        v204 = 65;
      __dst[0] = (void *)v200;
      LOBYTE(__dst[1]) = v204;
      *(_WORD *)((char *)&__dst[1] + 1) = 15;
      BYTE3(__dst[1]) = -1;
      v1007 = v201;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)__dst, &v1007, (uint64_t)v8, v195, v196, v197, v198, v199);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1019, (uint64_t)v8, v205, v206, v207, v208, v209, v210);
      goto LABEL_137;
    }
    LOWORD(v1030) = v981 | 0x100;
    HIDWORD(__dst[1]) = 1;
    v267 = 1;
    while (1)
    {
      v268 = 0;
      v269 = 0;
      v270 = (char *)__dst[0];
      v271 = v267;
      do
      {
        if ((*((_BYTE *)__dst[0] + v268 + 1) & 0x40) != 0)
          goto LABEL_871;
        v269 |= 1 << *((_BYTE *)__dst[0] + v268 + 1);
        v268 += 2;
      }
      while (2 * v267 != v268);
      v272 = 0;
      do
      {
        v273 = *((_BYTE *)__dst[0] + v272) & 0x7F;
        if (v273 >= 0x40)
          goto LABEL_871;
        v269 &= ~(1 << v273);
        v272 += 2;
      }
      while (2 * v267 != v272);
      v274 = (uint8x8_t)vcnt_s8((int8x8_t)v269);
      v274.i16[0] = vaddlv_u8(v274);
      v275 = v274.i32[0];
      v276 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v269));
      v276.i16[0] = vaddlv_u8(v276);
      if (!(v276.i32[0] + v275))
      {
        v926 = *(_BYTE *)__dst[0];
        v927 = *((_BYTE *)__dst[0] + 1);
        JSC::MacroAssemblerARM64::swap((uint64_t)v8, *(char *)__dst[0], v927, v144, v145, v146, v147, v148);
        memmove(__dst[0], (char *)__dst[0] + 2, 2 * HIDWORD(__dst[1]) - 2);
        v928 = (HIDWORD(__dst[1]) - 1);
        v113 = HIDWORD(__dst[1]) == 1;
        HIDWORD(__dst[1]) = v928;
        v929 = (unsigned __int8 *)__dst[0];
        v930 = (char *)__dst[0] + 2 * v928;
        if (v113)
        {
          v931 = 0;
          v932 = 0;
          v984 = 0;
          v142 = (char *)__dst[0] + 2 * v928;
        }
        else
        {
          v945 = 2 * v928;
          v946 = __dst[0];
          while (*v946 != v927)
          {
            v946 += 2;
            v945 -= 2;
            if (!v945)
              goto LABEL_893;
          }
          *v946 = v926;
LABEL_893:
          v984 = 0;
          v947 = v929;
          v142 = v930;
          v948 = v930;
          do
          {
            if (*v929 == v929[1])
            {
              v949 = v929;
              if (v948 != (char *)__dst[0] + 2 * HIDWORD(__dst[1]))
              {
                if (v929 == (unsigned __int8 *)v142)
                {
                  v949 = (unsigned __int8 *)v948;
                }
                else
                {
                  v950 = v947 - (unsigned __int8 *)v142;
                  memmove(v948, v142, v947 - (unsigned __int8 *)v142);
                  v949 = (unsigned __int8 *)&v948[v950];
                }
              }
              v142 = (char *)(v929 + 2);
              ++v984;
              v948 = (char *)v949;
            }
            v929 += 2;
            v947 += 2;
          }
          while (v929 < (unsigned __int8 *)v930);
          v929 = (unsigned __int8 *)__dst[0];
          v931 = HIDWORD(__dst[1]);
          v932 = HIDWORD(__dst[1]);
          v930 = v948;
        }
        v933 = (char *)&v929[2 * v931];
        if (v142 != v933)
        {
          memmove(v930, v142, v933 - v142);
          v932 = HIDWORD(__dst[1]);
        }
        v267 = v932 - v984;
        v89 = m;
        goto LABEL_212;
      }
      v277 = 0;
      v278 = v267 <= 1uLL ? 1 : v267;
      v279 = 2 * v278;
      while (1)
      {
        v280 = *((unsigned __int8 *)__dst[0] + v277 + 1);
        if ((v280 & 0x7Fu) >= 0x40)
          goto LABEL_871;
        if (((v269 >> (v280 & 0x7F)) & 1) != 0)
          break;
        v277 += 2;
        if (v279 == v277)
          goto LABEL_213;
      }
      v281 = *((unsigned __int8 *)__dst[0] + v277);
      if (v281 != v280)
        break;
LABEL_211:
      memmove(&v270[v277], &v270[v277 + 2], 2 * v271 - v277 - 2);
      v267 = HIDWORD(__dst[1]) - 1;
LABEL_212:
      HIDWORD(__dst[1]) = v267;
LABEL_213:
      if (!v267)
      {
        v286 = __dst[0];
        if (&v1030 != __dst[0] && __dst[0])
        {
          __dst[0] = 0;
          LODWORD(__dst[1]) = 0;
          WTF::fastFree((unint64_t)v286, v142, v143, v144, v145, v146, v147, v148);
        }
        goto LABEL_129;
      }
    }
    v282 = (char)v281;
    if ((char)v281 == 63)
    {
      v283 = *((_DWORD *)v8 + 50);
      if ((char)v280 != 31)
      {
        v285 = v280 & 0x1F | 0xD2800000;
        goto LABEL_208;
      }
    }
    else
    {
      v283 = *((_DWORD *)v8 + 50);
      if (v280 != 31 && v282 != 31)
      {
        v285 = v280 & 0xFFE0FFFF | ((v282 & 0x1F) << 16) | 0xAA0003E0;
LABEL_208:
        if (v283 + 4 > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v988, (uint64_t)v142, v143, v144, v145, v146, v147, v148);
          v283 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v283) = v285;
        *((_DWORD *)v8 + 50) += 4;
        v270 = (char *)__dst[0];
        v271 = HIDWORD(__dst[1]);
        goto LABEL_211;
      }
    }
    v285 = (char)v280 | (32 * v282) | 0x91000000;
    goto LABEL_208;
  }
  if (*((_WORD *)v1027 + 9) != 370)
  {
    __break(0xC471u);
    JUMPOUT(0x197CA0B90);
  }
  v1000 = (JSC::AssemblerBuffer *)(v8 + 56);
  v1005 = *((_DWORD *)v8 + 50);
  if ((signed int)v1005 < *((_DWORD *)v8 + 13))
  {
    do
    {
      if (v1005 + 4 > *((_DWORD *)v8 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v1000, (uint64_t)v119, v120, v121, v122, v123, v124, v125);
        v1005 = *((_DWORD *)v8 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v8 + 7) + v1005) = -721215457;
      v910 = *((_DWORD *)v8 + 50) + 4;
      *((_DWORD *)v8 + 50) = v910;
      v1005 = v910;
    }
    while (v910 < *((_DWORD *)v8 + 13));
  }
  *((_DWORD *)v8 + 52) = 0;
  JSC::DFG::JITCompiler::emitStoreCallSiteIndex((uint64_t)v8, (JSC::ARM64LogicalImmediate *)v100, v120, v121, v122, v123, v124, v125);
  __dst[0] = WTF::ScopedLambdaFunctor<void ()(void),JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_5>::implFunction;
  __dst[1] = __dst;
  v1030 = v8;
  v1031 = &v1032;
  v377 = (void *)v130;
  JSC::DirectCallLinkInfo::emitDirectTailCallFastPath((JSC::ARM64LogicalImmediate *)v130, (uint64_t)v8, (uint64_t)__dst, v378, v379, v380, v381, v382, (uint64_t)v1010);
  for (n = *((_DWORD *)v8 + 50); n < *((_DWORD *)v8 + 13); *((_DWORD *)v8 + 50) = n)
  {
    if ((n + 4) > *((_DWORD *)v8 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1000, v383, v384, v385, v386, v387, v388, v389);
      n = *((_DWORD *)v8 + 50);
    }
    *(_DWORD *)(*((_QWORD *)v8 + 7) + n) = -721215457;
    n = *((_DWORD *)v8 + 50) + 4;
  }
  *((_DWORD *)v8 + 52) = 0;
  if ((*(_BYTE *)(v130 + 17) & 0x10) != 0)
  {
    if (!HIDWORD(v1010[1]))
      goto LABEL_342;
    goto LABEL_314;
  }
  if (HIDWORD(v1010[1]))
  {
LABEL_314:
    v391 = 0;
    v392 = 0;
    v393 = 12 * HIDWORD(v1010[1]);
    do
    {
      if (v392 >= HIDWORD(v1010[1]))
      {
        __break(0xC471u);
        JUMPOUT(0x197CA1924);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v1010[0] + v391), (uint64_t)v8, v384, v385, v386, v387, v388, v389);
      ++v392;
      v391 += 12;
    }
    while (v393 != v391);
  }
  v394 = (unint64_t *)(v8 + 5752);
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v8, 1, (uint64_t)(v8 + 5752), 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v388, v389);
  __dst[0] = &v1030;
  LODWORD(__dst[1]) = 1;
  if (v981 == 1)
    goto LABEL_318;
  LOWORD(v1030) = v981 | 0x100;
  HIDWORD(__dst[1]) = 1;
  v471 = 1;
  do
  {
    v472 = 0;
    v473 = 0;
    v474 = (char *)__dst[0];
    v475 = v471;
    do
    {
      if ((*((_BYTE *)__dst[0] + v472 + 1) & 0x40) != 0)
        goto LABEL_871;
      v473 |= 1 << *((_BYTE *)__dst[0] + v472 + 1);
      v472 += 2;
    }
    while (2 * v471 != v472);
    v476 = 0;
    do
    {
      v477 = *((_BYTE *)__dst[0] + v476) & 0x7F;
      if (v477 >= 0x40)
        goto LABEL_871;
      v473 &= ~(1 << v477);
      v476 += 2;
    }
    while (2 * v471 != v476);
    v478 = (uint8x8_t)vcnt_s8((int8x8_t)v473);
    v478.i16[0] = vaddlv_u8(v478);
    v479 = v478.i32[0];
    v480 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v473));
    v480.i16[0] = vaddlv_u8(v480);
    if (v480.i32[0] + v479)
    {
      v481 = 0;
      if (v471 <= 1uLL)
        v482 = 1;
      else
        v482 = v471;
      v483 = 2 * v482;
      while (1)
      {
        v484 = *((unsigned __int8 *)__dst[0] + v481 + 1);
        if ((v484 & 0x7Fu) >= 0x40)
          goto LABEL_871;
        if (((v473 >> (v484 & 0x7F)) & 1) != 0)
          break;
        v481 += 2;
        if (v483 == v481)
          goto LABEL_422;
      }
      v485 = *((unsigned __int8 *)__dst[0] + v481);
      if (v485 == v484)
        goto LABEL_420;
      v485 = (char)v485;
      if ((char)v485 == 63)
      {
        if ((char)v484 != 31)
        {
          v487 = v484 & 0x1F | 0xD2800000;
          goto LABEL_417;
        }
      }
      else if (v484 != 31 && v485 != 31)
      {
        v487 = v484 & 0xFFE0FFFF | ((v485 & 0x1F) << 16) | 0xAA0003E0;
LABEL_417:
        v488 = *((_DWORD *)v8 + 50);
        if (v488 + 4 > *((_DWORD *)v8 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v1000, (uint64_t)v395, v396, v397, v398, v399, v400, v401);
          v488 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v488) = v487;
        *((_DWORD *)v8 + 50) += 4;
        v474 = (char *)__dst[0];
        v475 = HIDWORD(__dst[1]);
LABEL_420:
        memmove(&v474[v481], &v474[v481 + 2], 2 * v475 - v481 - 2);
        v471 = HIDWORD(__dst[1]) - 1;
        goto LABEL_421;
      }
      v487 = (char)v484 | (32 * v485) | 0x91000000;
      goto LABEL_417;
    }
    v992 = v89;
    v938 = *(_BYTE *)__dst[0];
    v939 = *((_BYTE *)__dst[0] + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v8, *(char *)__dst[0], v939, v397, v398, v399, v400, v401);
    memmove(__dst[0], (char *)__dst[0] + 2, 2 * HIDWORD(__dst[1]) - 2);
    v940 = (HIDWORD(__dst[1]) - 1);
    v113 = HIDWORD(__dst[1]) == 1;
    HIDWORD(__dst[1]) = v940;
    v941 = (unsigned __int8 *)__dst[0];
    __srcb = (char *)__dst[0] + 2 * v940;
    if (v113)
    {
      v942 = 0;
      v943 = 0;
      v989 = 0;
      v395 = (char *)__dst[0] + 2 * v940;
    }
    else
    {
      v951 = 2 * v940;
      v952 = __dst[0];
      while (*v952 != v939)
      {
        v952 += 2;
        v951 -= 2;
        if (!v951)
          goto LABEL_914;
      }
      *v952 = v938;
LABEL_914:
      v989 = 0;
      v953 = v941;
      v954 = __srcb;
      v395 = __srcb;
      do
      {
        if (*v941 == v941[1])
        {
          v955 = v941;
          if (v954 != (char *)__dst[0] + 2 * HIDWORD(__dst[1]))
          {
            if (v941 == (unsigned __int8 *)v395)
            {
              v955 = (unsigned __int8 *)v954;
            }
            else
            {
              v985 = (char *)(v953 - (unsigned __int8 *)v395);
              memmove(v954, v395, v953 - (unsigned __int8 *)v395);
              v955 = (unsigned __int8 *)&v985[(_QWORD)v954];
            }
          }
          v395 = (char *)(v941 + 2);
          ++v989;
          v954 = (char *)v955;
        }
        v941 += 2;
        v953 += 2;
      }
      while (v941 < (unsigned __int8 *)__srcb);
      v941 = (unsigned __int8 *)__dst[0];
      v942 = HIDWORD(__dst[1]);
      v943 = HIDWORD(__dst[1]);
      __srcb = v954;
    }
    v944 = (char *)&v941[2 * v942];
    if (v395 != v944)
    {
      memmove(__srcb, v395, v944 - v395);
      v943 = HIDWORD(__dst[1]);
    }
    v471 = v943 - v989;
    v89 = v992;
LABEL_421:
    HIDWORD(__dst[1]) = v471;
LABEL_422:
    ;
  }
  while (v471);
  v489 = __dst[0];
  if (&v1030 != __dst[0] && __dst[0])
  {
    __dst[0] = 0;
    LODWORD(__dst[1]) = 0;
    WTF::fastFree((unint64_t)v489, v395, v396, v397, v398, v399, v400, v401);
  }
LABEL_318:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v8, (uint64_t)v377, 0, v397, v398, v399, v400, v401);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v8, (uint64_t)operationLinkDirectCall, v402, v403, v404, v405, v406, v407, &v1009);
  __dst[0] = (void *)2;
  v1019 = 0;
  v412 = *((_QWORD *)v8 + 495);
  v413 = *(_QWORD *)(*((_QWORD *)v8 + 497) + 8);
  if ((v413 & 1) != 0)
  {
    v911 = *(_QWORD *)(v413 & 0xFFFFFFFF8);
    if ((v413 & 2) != 0
      || ((v912 = *(unsigned int *)((v413 & 0xFFFFFFFF8) + 8), (_DWORD)v912 != 0x3FFFFFFF)
        ? (v913 = (_DWORD)v912 == -1)
        : (v913 = 1),
          v913))
    {
      v914 = 2;
    }
    else if (v912 >> 28)
    {
      v968 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v968 = v911;
      *(_DWORD *)(v968 + 8) = v912;
      v914 = 1;
      v911 = v968;
    }
    else
    {
      v914 = *(_QWORD *)(v413 & 0xFFFFFFFF8);
      v911 = v912 << 36;
    }
    v413 = v911 | v914;
  }
  v1028 = v413;
  v421 = JSC::DFG::Graph::willCatchExceptionInMachineFrame(v412, (unint64_t *)&v1028, (uint64_t *)__dst, (unsigned int **)&v1019, v408, v409, v410, v411);
  if ((v1028 & 1) != 0 && (v1028 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v1028 & 0xFFFFFFFF8, v414, v415, v416, v417, v418, v419, v420);
  if ((v421 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, 0, v415, v416, v417, v418, v419, v420);
    goto LABEL_322;
  }
  v915 = *((unsigned int *)v8 + 1441);
  if (!(_DWORD)v915)
    goto LABEL_322;
  v916 = 0;
  v917 = 16 * v915;
  v918 = (char *)(*((_QWORD *)v8 + 719) + 2);
  do
  {
    v920 = *v918;
    v918 += 16;
    v919 = v920;
    if ((v920 & 0x40) != 0)
      goto LABEL_871;
    v916 |= 1 << v919;
    v917 -= 16;
  }
  while (v917);
  if ((v916 & 1) != 0)
  {
    v921 = (unsigned __int16)~(_WORD)v916;
    if (v921)
    {
      v422 = __clz(__rbit64(v921));
      if (v422)
      {
        if (v422 == 31)
        {
          v923 = *((_DWORD *)v8 + 50);
          v924 = v923 + 4;
          v925 = *((_DWORD *)v8 + 48);
          v922 = -1862270945;
        }
        else
        {
          v922 = v422 | 0xAA0003E0;
          v923 = *((_DWORD *)v8 + 50);
          v924 = v923 + 4;
          v925 = *((_DWORD *)v8 + 48);
        }
        if (v924 > v925)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v1000, (uint64_t)v414, v415, v416, v417, v418, v419, v420);
          v923 = *((_DWORD *)v8 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v8 + 7) + v923) = v922;
        *((_DWORD *)v8 + 50) += 4;
      }
    }
    else
    {
      LOBYTE(v422) = -1;
    }
  }
  else
  {
LABEL_322:
    LOBYTE(v422) = 0;
  }
  if (((uint64_t)__dst[0] & 1) != 0 && ((unint64_t)__dst[0] & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst[0] & 0xFFFFFFFF8, v414, v415, v416, v417, v418, v419, v420);
  v423 = *((_DWORD *)v8 + 1441);
  if (v423)
  {
    v424 = v423 - 1;
    v425 = 16 * (v423 - 1);
    do
    {
      if (*((_DWORD *)v8 + 1441) <= v424)
      {
        __break(0xC471u);
        JUMPOUT(0x197CA197CLL);
      }
      JSC::DFG::SpeculativeJIT::silentFillImpl((uint64_t)v8, *((_QWORD *)v8 + 719) + v425, v415, v416, v417, v418, v419, v420);
      v425 -= 16;
      --v424;
    }
    while (v424 != -1);
  }
  v8[5768] = 0;
  if (*((_DWORD *)v8 + 1440))
  {
    if (*((_DWORD *)v8 + 1441))
      *((_DWORD *)v8 + 1441) = 0;
    v426 = *v394;
    if (*v394)
    {
      *((_QWORD *)v8 + 719) = 0;
      *((_DWORD *)v8 + 1440) = 0;
      WTF::fastFree(v426, v414, v415, v416, v417, v418, v419, v420);
    }
  }
  if (v421)
    JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v8, (char)v422, v415, v416, v417, v418, v419, v420);
  for (ii = *((_DWORD *)v8 + 50); (signed int)ii < *((_DWORD *)v8 + 13); *((_DWORD *)v8 + 50) = ii)
  {
    if (ii + 4 > *((_DWORD *)v8 + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1000, (uint64_t)v414, v415, v416, v417, v418, v419, v420);
      ii = *((_DWORD *)v8 + 50);
    }
    *(_DWORD *)(*((_QWORD *)v8 + 7) + ii) = -721215457;
    ii = *((_DWORD *)v8 + 50) + 4;
  }
  v428 = ii;
  if (ii + 4 > *((_DWORD *)v8 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v1000, (uint64_t)v414, v415, v416, v417, v418, v419, v420);
    v428 = *((_DWORD *)v8 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v8 + 7) + v428) = 335544320;
  *((_DWORD *)v8 + 50) += 4;
  if (v8[328])
    v429 = 69;
  else
    v429 = 65;
  __dst[0] = (void *)ii;
  LOBYTE(__dst[1]) = v429;
  *(_WORD *)((char *)&__dst[1] + 1) = 15;
  BYTE3(__dst[1]) = -1;
  v1008 = v1005;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)__dst, &v1008, (uint64_t)v8, v416, v417, v418, v419, v420);
LABEL_342:
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v8, v1027, v384, v385, v386, v387, v388, v389);
  v430 = v8 + 3704;
  LODWORD(__dst[0]) = n;
  __dst[1] = v377;
  v225 = *((unsigned int *)v8 + 929);
  if ((_DWORD)v225 == *((_DWORD *)v8 + 928))
  {
    v633 = WTF::Vector<JSC::DFG::JITCompiler::JSDirectCallRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v430, (void *)(v225 + 1), (unint64_t)__dst, v219, v220, v221, v222, v223);
    v225 = *((unsigned int *)v8 + 929);
    v634 = *((_QWORD *)v8 + 463) + 16 * v225;
    *(_DWORD *)v634 = *(_DWORD *)v633;
    *(_QWORD *)(v634 + 8) = *(_QWORD *)(v633 + 8);
  }
  else
  {
    v431 = *v430 + 16 * v225;
    *(_DWORD *)v431 = n;
    *(_QWORD *)(v431 + 8) = v377;
  }
  LOBYTE(v91) = v994;
LABEL_142:
  *((_DWORD *)v8 + 929) = v225 + 1;
  v227 = v1010[0];
  if (&v1011 != (WTF **)v1010[0] && v1010[0])
  {
    v1010[0] = 0;
    LODWORD(v1010[1]) = 0;
    WTF::fastFree((unint64_t)v227, (void *)v217, v218, v219, v220, v221, v222, v223);
  }
LABEL_165:
  if ((v1018 & 1) != 0 && (v1018 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v1018 & 0xFFFFFFFF8, (void *)v217, v218, v219, v220, v221, v222, v223);
  if ((v91 & 1) == 0 && v89)
    WTF::fastFree((unint64_t)v89, (void *)v217, v218, v219, v220, v221, v222, v223);
  v255 = v1032;
  if (v1032)
  {
    v1032 = 0;
    LODWORD(v1033) = 0;
    WTF::fastFree((unint64_t)v255, (void *)v217, v218, v219, v220, v221, v222, v223);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_1::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  _QWORD v35[2];
  char v36;

  v10 = *(JSC::DFG::SpeculativeJIT **)a1;
  if (a2 != -1)
    ++*((_DWORD *)v10 + 1196);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v35, v10, *(_QWORD *)(**(_QWORD **)(a1 + 8) + 40), a4, a5, a6, a7, a8);
  **(_BYTE **)(a1 + 16) = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v35, v11, v12, v13, v14, v15, v16, v17);
  if (a2 != -1)
    --*((_DWORD *)v10 + 1196);
  JSC::DFG::SpeculativeJIT::flushRegisters(v10, v18, v19, v20, v21, v22, v23, v24);
  result = JSC::AssemblyHelpers::selectScratchGPR<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(**(char **)(a1 + 16), a2);
  v26 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)v26 = result;
  v27 = *(unsigned __int8 **)(a1 + 16);
  v28 = *v27;
  if (v28 == 255)
  {
    v29 = 0;
  }
  else
  {
    if ((v28 & 0x40) != 0)
      goto LABEL_70;
    v29 = 1 << v28;
  }
  if ((_DWORD)result != -1)
  {
    if ((result & 0x40) != 0)
      goto LABEL_70;
    v29 |= 1 << result;
  }
  if (a2 != -1 || (v29 & 1) != 0)
  {
    if ((v29 & 2) != 0)
    {
      if ((v29 & 4) != 0)
      {
        if ((v29 & 8) != 0)
        {
          if ((v29 & 0x10) != 0)
          {
            if ((v29 & 0x20) != 0)
            {
              if ((v29 & 0x40) != 0)
              {
                if ((v29 & 0x80) != 0)
                {
                  if ((v29 & 0x100) != 0)
                  {
                    if ((v29 & 0x200) != 0)
                    {
                      if ((v29 & 0x400) != 0)
                      {
                        if ((v29 & 0x800) != 0)
                        {
                          if ((v29 & 0x1000) != 0)
                          {
                            if ((v29 & 0x2000) != 0)
                            {
                              if ((v29 & 0x4000) != 0)
                              {
                                if ((v29 & 0x8000) != 0)
                                  goto LABEL_91;
                                v30 = 15;
                              }
                              else
                              {
                                v30 = 14;
                              }
                            }
                            else
                            {
                              v30 = 13;
                            }
                          }
                          else
                          {
                            v30 = 12;
                          }
                        }
                        else
                        {
                          v30 = 11;
                        }
                      }
                      else
                      {
                        v30 = 10;
                      }
                    }
                    else
                    {
                      v30 = 9;
                    }
                  }
                  else
                  {
                    v30 = 8;
                  }
                }
                else
                {
                  v30 = 7;
                }
              }
              else
              {
                v30 = 6;
              }
            }
            else
            {
              v30 = 5;
            }
          }
          else
          {
            v30 = 4;
          }
        }
        else
        {
          v30 = 3;
        }
      }
      else
      {
        v30 = 2;
      }
    }
    else
    {
      v30 = 1;
    }
  }
  else
  {
    v30 = 0;
  }
  **(_BYTE **)(a1 + 32) = v30;
  v31 = *v27;
  LODWORD(v26) = *(unsigned __int8 *)v26;
  if (v31 == 255)
  {
    v32 = 0;
  }
  else
  {
    if ((v31 & 0x40) != 0)
      goto LABEL_70;
    v32 = 1 << v31;
  }
  if ((_DWORD)v26 != 255)
  {
    if ((v26 & 0x40) == 0)
    {
      v32 |= 1 << v26;
      goto LABEL_51;
    }
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
LABEL_51:
  v26 = v32 | (1 << v30);
  if (a2 == -1 && (v26 & 1) == 0)
  {
    v33 = 0;
    goto LABEL_86;
  }
  if ((v26 & 2) == 0)
  {
    v33 = 1;
    goto LABEL_86;
  }
  if ((v26 & 4) == 0)
  {
    v33 = 2;
    goto LABEL_86;
  }
  if ((v26 & 8) == 0)
  {
    v33 = 3;
    goto LABEL_86;
  }
  if ((v26 & 0x10) == 0)
  {
    v33 = 4;
    goto LABEL_86;
  }
  if ((v26 & 0x20) == 0)
  {
    v33 = 5;
    goto LABEL_86;
  }
  if ((v26 & 0x40) == 0)
  {
    v33 = 6;
    goto LABEL_86;
  }
  if ((v26 & 0x80) == 0)
  {
    v33 = 7;
    goto LABEL_86;
  }
  if ((v26 & 0x100) == 0)
  {
    v33 = 8;
    goto LABEL_86;
  }
LABEL_71:
  if ((v26 & 0x200) == 0)
  {
    v33 = 9;
    goto LABEL_86;
  }
  if ((v26 & 0x400) == 0)
  {
    v33 = 10;
    goto LABEL_86;
  }
  if ((v26 & 0x800) == 0)
  {
    v33 = 11;
    goto LABEL_86;
  }
  if ((v26 & 0x1000) == 0)
  {
    v33 = 12;
    goto LABEL_86;
  }
  if ((v26 & 0x2000) == 0)
  {
    v33 = 13;
    goto LABEL_86;
  }
  if ((v26 & 0x4000) == 0)
  {
    v33 = 14;
    goto LABEL_86;
  }
  if ((v26 & 0x8000) != 0)
  {
LABEL_91:
    __break(0xC471u);
    JUMPOUT(0x197CA1D6CLL);
  }
  v33 = 15;
LABEL_86:
  **(_BYTE **)(a1 + 40) = v33;
  if ((v35[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v34 = v36;
    if (v36 > 15)
      v34 = -1;
    --*(_DWORD *)(v35[0] + 12 * v34 + 4784);
  }
  return result;
}

BOOL JSC::DFG::SpeculativeJIT::isFlushed(JSC::DFG::SpeculativeJIT *this)
{
  return *((_DWORD *)this + 1194) == 0x3FFFFFFF
      && *((_DWORD *)this + 1197) == 0x3FFFFFFF
      && *((_DWORD *)this + 1200) == 0x3FFFFFFF
      && *((_DWORD *)this + 1203) == 0x3FFFFFFF
      && *((_DWORD *)this + 1206) == 0x3FFFFFFF
      && *((_DWORD *)this + 1209) == 0x3FFFFFFF
      && *((_DWORD *)this + 1212) == 0x3FFFFFFF
      && *((_DWORD *)this + 1215) == 0x3FFFFFFF
      && *((_DWORD *)this + 1218) == 0x3FFFFFFF
      && *((_DWORD *)this + 1221) == 0x3FFFFFFF
      && *((_DWORD *)this + 1224) == 0x3FFFFFFF
      && *((_DWORD *)this + 1227) == 0x3FFFFFFF
      && *((_DWORD *)this + 1230) == 0x3FFFFFFF
      && *((_DWORD *)this + 1233) == 0x3FFFFFFF
      && *((_DWORD *)this + 1236) == 0x3FFFFFFF
      && *((_DWORD *)this + 1239) == 0x3FFFFFFF
      && *((_DWORD *)this + 1242) == 0x3FFFFFFF
      && *((_DWORD *)this + 1245) == 0x3FFFFFFF
      && *((_DWORD *)this + 1248) == 0x3FFFFFFF
      && *((_DWORD *)this + 1251) == 0x3FFFFFFF
      && *((_DWORD *)this + 1254) == 0x3FFFFFFF
      && *((_DWORD *)this + 1257) == 0x3FFFFFFF
      && *((_DWORD *)this + 1260) == 0x3FFFFFFF
      && *((_DWORD *)this + 1263) == 0x3FFFFFFF
      && *((_DWORD *)this + 1266) == 0x3FFFFFFF
      && *((_DWORD *)this + 1269) == 0x3FFFFFFF
      && *((_DWORD *)this + 1272) == 0x3FFFFFFF
      && *((_DWORD *)this + 1275) == 0x3FFFFFFF
      && *((_DWORD *)this + 1278) == 0x3FFFFFFF
      && *((_DWORD *)this + 1281) == 0x3FFFFFFF
      && *((_DWORD *)this + 1284) == 0x3FFFFFFF
      && *((_DWORD *)this + 1287) == 0x3FFFFFFF
      && *((_DWORD *)this + 1290) == 0x3FFFFFFF
      && *((_DWORD *)this + 1293) == 0x3FFFFFFF
      && *((_DWORD *)this + 1296) == 0x3FFFFFFF
      && *((_DWORD *)this + 1299) == 0x3FFFFFFF
      && *((_DWORD *)this + 1302) == 0x3FFFFFFF
      && *((_DWORD *)this + 1305) == 0x3FFFFFFF
      && *((_DWORD *)this + 1308) == 0x3FFFFFFF;
}

uint64_t std::optional<JSC::DFG::SpeculateCellOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>(uint64_t a1, JSC::DFG::SpeculativeJIT *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t result;

  if (*(_BYTE *)(a1 + 24))
  {
    if ((*(_QWORD *)(a1 + 8) & 0xFF00FFFFFFFFFFFFLL) != 0)
    {
      v8 = *(char *)(a1 + 16);
      if (v8 > 15)
        v8 = -1;
      --*(_DWORD *)(*(_QWORD *)a1 + 12 * v8 + 4784);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  result = JSC::DFG::SpeculateCellOperand::SpeculateCellOperand(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t JSC::DFG::SpeculateCellOperand::gpr(JSC::DFG::SpeculateCellOperand *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  JSC::DFG::AbstractValue *v18;
  unsigned int v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v34;
  _BYTE *v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  uint64_t v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  _BYTE v83[14];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v8 = *((unsigned __int8 *)this + 16);
  if (v8 == 255)
  {
    v10 = *(_QWORD *)this;
    v11 = *((_QWORD *)this + 1);
    v12 = *(_QWORD *)(*(_QWORD *)this + 5504);
    v13 = *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v14 = (uint64_t *)(v12 + 24);
    v15 = (uint64_t *)(v12 + 8);
    if ((v11 & 1) != 0)
      v15 = v14;
    v16 = *v15;
    v17 = *v15 + 32 * v13;
    v18 = (JSC::DFG::AbstractValue *)v17;
    v19 = *(_DWORD *)(v10 + 5584);
    v20 = *(_DWORD *)(v17 + 20);
    if (v19 != v20)
    {
      if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v20 ^ v19) >= 2)
        {
          v69 = *(_QWORD *)v17;
          if (*(_QWORD *)v17 != 4)
          {
            *(_QWORD *)v17 = v69 | 2;
            v70 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v69 & 1) != 0)
            {
              v76 = 2 * *v70;
              while (v76 * 4)
              {
                v77 = *(_QWORD *)&v70[v76];
                if ((*(_BYTE *)(v77 + 19) & 0xC) == 0)
                {
                  v78 = *(_QWORD *)(v77 + 96);
                  v79 = (v78 & 1) != 0 ? (v78 >> 1) & 3 : *(unsigned __int8 *)(v78 + 4);
                  v76 -= 2;
                  if (v79 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v70, a2, a3, a4, a5, a6, a7, a8);
                goto LABEL_69;
              }
            }
            else if (v70)
            {
              if ((*((_BYTE *)v70 + 19) & 0xC) != 0
                || ((v71 = *((_QWORD *)v70 + 12), (v71 & 1) != 0)
                  ? (v72 = (v71 >> 1) & 3)
                  : (v72 = *(unsigned __int8 *)(v71 + 4)),
                    v72 == 2))
              {
LABEL_69:
                *(_QWORD *)v17 = 4;
              }
            }
          }
          *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
        }
        if ((v19 & 1) != 0)
          *(_QWORD *)v17 &= ~2uLL;
      }
      *(_DWORD *)(v17 + 20) = v19;
    }
    v23 = *(_QWORD *)(v17 + 8);
    v21 = (uint64_t *)(v17 + 8);
    v22 = v23;
    v24 = v23 & 0x2C00FFFFFFF7;
    v25 = v23;
    if ((v23 & 0x2C00FFFFFFF7) == v23)
    {
LABEL_6:
      if (!v25)
      {
        v80 = (v11 >> 50) & 0x3F;
        if ((_DWORD)v80 && (v80 > 0x34 || ((1 << v80) & 0x12400001800284) == 0))
          JSC::DFG::SpeculativeJIT::terminateSpeculativeExecution(v10, 0x16uLL, 255, 0, a5, a6, a7, a8);
        LOBYTE(v8) = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
LABEL_13:
        *((_BYTE *)this + 16) = v8;
        return (char)v8;
      }
LABEL_7:
      v26 = v11 & 0xFF00FFFFFFFFFFFFLL;
      v27 = *(unsigned int *)(v26 + 48);
      v28 = ~(_DWORD)v27;
      if (v28 >= *(unsigned int *)(v10 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197CA27ECLL);
      }
      v29 = *(_QWORD *)(v10 + 3992);
      v30 = (_BYTE *)(v29 + 24 * (int)v28);
      v31 = v30 + 12;
      switch(v30[12])
      {
        case 0:
          v47 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          LOBYTE(v8) = v47;
          v53 = *(unsigned __int16 *)(v26 + 18);
          if (v53 > 0xB5)
          {
            if (v53 == 182)
              goto LABEL_31;
            if (v53 == 355 || v53 == 348)
            {
              v54 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
              {
                JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
                LODWORD(qword_1EE342DB8) = 0;
              }
LABEL_32:
              v55 = *v54;
              if ((int)v47 > 15)
                v56 = -1;
              else
                v56 = v47;
              v57 = v10 + 12 * v56;
              *(_DWORD *)(v57 + 4776) = v27;
              *(_DWORD *)(v57 + 4780) = 1;
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, v55, v47, v48, v49, v50, v51, v52);
              *v31 = 22;
              v58 = v29 + 24 * (int)v28;
              *(_BYTE *)(v58 + 17) = v8;
              if (*(_BYTE *)(v58 + 15))
              {
                v59 = *(_DWORD *)(*(_QWORD *)v30 + 20);
                if (v59 >= 0xFFFFFFFE)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197CA26E4);
                }
                v40 = (uint64_t *)(v10 + 5632);
                *(_WORD *)&v83[12] = 5636;
                *(_DWORD *)v83 = v59;
                v41 = v8 | 0x3FFFFF00;
LABEL_23:
                *(_QWORD *)&v83[4] = v41;
                v42 = *(unsigned int *)(v10 + 5644);
                if ((_DWORD)v42 != *(_DWORD *)(v10 + 5640))
                {
                  v43 = *v40;
LABEL_25:
                  v44 = (_QWORD *)(v43 + 14 * v42);
                  v45 = *(_QWORD *)v83;
                  v46 = *(_QWORD *)&v83[6];
LABEL_26:
                  *(_QWORD *)((char *)v44 + 6) = v46;
                  *v44 = v45;
                  ++*(_DWORD *)(v10 + 5644);
                  goto LABEL_13;
                }
                v73 = v42 + 1;
                goto LABEL_71;
              }
              goto LABEL_13;
            }
          }
          else if (v53 < 3)
          {
LABEL_31:
            v54 = *(uint64_t **)(v26 + 72);
            goto LABEL_32;
          }
          if ((int)v47 > 15)
            v60 = -1;
          else
            v60 = v47;
          v61 = v10 + 12 * v60;
          *(_DWORD *)(v61 + 4776) = v27;
          *(_DWORD *)(v61 + 4780) = 2;
          JSC::MacroAssemblerARM64::load64(v10, (v27 << 35) | 0x1D, v47, v48, v49, v50, v51, v52);
          v62 = (uint64_t *)(v10 + 5632);
          *v31 = 16;
          v63 = v29 + 24 * (int)v28;
          *(_BYTE *)(v63 + 17) = v8;
          v64 = (_BYTE *)(v63 + 17);
          if (*(v64 - 2))
          {
            if (*(_DWORD *)(*(_QWORD *)v30 + 20) >= 0xFFFFFFFE)
            {
              __break(0xC471u);
              JUMPOUT(0x197CA26A4);
            }
            *(_DWORD *)v83 = *(_DWORD *)(*(_QWORD *)v30 + 20);
            *(_QWORD *)&v83[4] = v8 | 0x3FFFFF00;
            *(_WORD *)&v83[12] = 4100;
            v65 = *(unsigned int *)(v10 + 5644);
            if ((_DWORD)v65 == *(_DWORD *)(v10 + 5640))
            {
              v75 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10 + 5632, v65 + 1, (unint64_t)v83, a4, a5, a6, a7, a8);
              v66 = (_QWORD *)(*(_QWORD *)(v10 + 5632) + 14 * *(unsigned int *)(v10 + 5644));
              v67 = *v75;
              v68 = *(uint64_t *)((char *)v75 + 6);
            }
            else
            {
              v66 = (_QWORD *)(*v62 + 14 * v65);
              v67 = *(_QWORD *)v83;
              v68 = *(_QWORD *)&v83[6];
            }
            *(_QWORD *)((char *)v66 + 6) = v68;
            *v66 = v67;
            ++*(_DWORD *)(v10 + 5644);
          }
          if ((v22 & 0xFFFFD3FF00000008) != 0)
          {
            JSC::AssemblyHelpers::branchIfNotCell(v10, v8, 1, a4, a5, a6, a7, a8, (uint64_t)&v81);
            *(_DWORD *)v83 = v81;
            *(_QWORD *)&v83[4] = v82;
            JSC::DFG::SpeculativeJIT::speculationCheck(v10, 1uLL, (JSC::DFG::Node *)(((unint64_t)v8 << 32) | 0x80000000), (JSC::DFG::Node *)v26, (int *)v83);
          }
          *v31 = 22;
          *v64 = v8;
          if (*(v64 - 2))
          {
            if (*(_DWORD *)(*(_QWORD *)v30 + 20) >= 0xFFFFFFFE)
            {
              __break(0xC471u);
              JUMPOUT(0x197CA26C4);
            }
            *(_DWORD *)v83 = *(_DWORD *)(*(_QWORD *)v30 + 20);
            *(_QWORD *)&v83[4] = v8 | 0x3FFFFF00;
            *(_WORD *)&v83[12] = 5636;
            v42 = *(unsigned int *)(v10 + 5644);
            if ((_DWORD)v42 != *(_DWORD *)(v10 + 5640))
            {
              v43 = *v62;
              goto LABEL_25;
            }
            v73 = v42 + 1;
            v40 = (uint64_t *)(v10 + 5632);
LABEL_71:
            v74 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v40, v73, (unint64_t)v83, a4, a5, a6, a7, a8);
            v44 = (_QWORD *)(*(_QWORD *)(v10 + 5632) + 14 * *(unsigned int *)(v10 + 5644));
            v45 = *v74;
            v46 = *(uint64_t *)((char *)v74 + 6);
            goto LABEL_26;
          }
          break;
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
        case 0x11:
        case 0x14:
        case 0x15:
        case 0x18:
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 3960), *(JSC::DFG::Node **)(v10 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x5F9, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateCell(Edge)", "Bad data format");
          __break(0xC471u);
          JUMPOUT(0x197CA2770);
        case 6:
        case 0x16:
          v8 = *(char *)(v29 + 24 * (int)v28 + 17);
          if (v8 > 15)
            v32 = -1;
          else
            v32 = *(char *)(v29 + 24 * (int)v28 + 17);
          ++*(_DWORD *)(v10 + 12 * v32 + 4784);
          goto LABEL_13;
        case 0x10:
          v34 = v29 + 24 * (int)v28;
          v36 = *(char *)(v34 + 17);
          v35 = (_BYTE *)(v34 + 17);
          v8 = v36;
          v37 = v36;
          if (v36 > 15)
            v38 = -1;
          else
            v38 = v8;
          ++*(_DWORD *)(v10 + 12 * v38 + 4784);
          if ((v22 & 0xFFFFD3FF00000008) != 0)
          {
            JSC::AssemblyHelpers::branchIfNotCell(v10, v37, 1, a4, a5, a6, a7, a8, (uint64_t)&v81);
            *(_DWORD *)v83 = v81;
            *(_QWORD *)&v83[4] = v82;
            JSC::DFG::SpeculativeJIT::speculationCheck(v10, 1uLL, (JSC::DFG::Node *)((v37 << 32) | 0x80000000), (JSC::DFG::Node *)v26, (int *)v83);
          }
          *v31 = 22;
          *v35 = v8;
          if (!*(_BYTE *)(v29 + 24 * (int)v28 + 15))
            goto LABEL_13;
          v39 = *(_DWORD *)(*(_QWORD *)(v29 + 24 * (int)v28) + 20);
          if (v39 >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197CA266CLL);
          }
          v40 = (uint64_t *)(v10 + 5632);
          *(_WORD *)&v83[12] = 5636;
          *(_DWORD *)v83 = v39;
          v41 = v37 | 0x3FFFFF00;
          goto LABEL_23;
        default:
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 3960), *(JSC::DFG::Node **)(v10 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x5FC, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateCell(Edge)", "Corrupt data format");
          __break(0xC471u);
          JUMPOUT(0x197CA27BCLL);
      }
      goto LABEL_13;
    }
    if ((v22 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow(v18, 0x2C00FFFFFFF7uLL, a3, a4, a5, a6, a7, a8))
      {
LABEL_40:
        v25 = *v21;
        goto LABEL_6;
      }
    }
    else
    {
      *v21 = v24;
      if (v24)
        goto LABEL_7;
      JSC::DFG::AbstractValue::clear(v18, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(*(_QWORD *)(v10 + 5616) + 80) = 0;
    goto LABEL_40;
  }
  return (char)v8;
}

void JSC::DFG::JITCompiler::emitStoreCallSiteIndex(uint64_t a1, JSC::ARM64LogicalImmediate *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ARM64LogicalImmediate *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  JSC::AssemblerBuffer *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  __int16 v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  v9 = (JSC::ARM64LogicalImmediate *)this;
  if (!(_DWORD)this)
  {
    v19 = (unsigned int *)(a1 + 200);
    v18 = *(_DWORD *)(a1 + 200);
    v20 = (JSC::AssemblerBuffer *)(a1 + 56);
    v21 = v18 + 4;
    v22 = *(_DWORD *)(a1 + 192);
    v23 = -1207811137;
    goto LABEL_21;
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CA2A28);
  }
  v10 = (int)this;
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) & *(_DWORD *)(a1 + 288)) == 0)
    goto LABEL_18;
  v11 = *(_QWORD *)(a1 + 280);
  if (v11 != (int)this)
  {
    v12 = (int)this;
    v13 = JSC::ARM64LogicalImmediate::create32(this);
    if (v13 != -1)
    {
      v14 = *(char *)(a1 + 272) | (v13 << 10);
      v15 = 838861792;
LABEL_7:
      v16 = v14 | v15;
      v17 = *(_DWORD *)(a1 + 200);
      if (v17 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)this, a3, a4, a5, a6, a7, a8);
        v17 = *(_DWORD *)(a1 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v17) = v16;
      *(_DWORD *)(a1 + 200) += 4;
      goto LABEL_19;
    }
    v24 = v11 ^ (unsigned __int16)v9;
    if (!((v11 ^ (unint64_t)(int)v9) >> 32))
    {
      if ((v12 & 0xFFFF0000) != (unint64_t)(v11 & 0xFFFF0000))
      {
        v25 = ((v12 & 0xFFFF0000) >> 11) | 0x72A00000 | *(_BYTE *)(a1 + 272) & 0x1F;
        v26 = *(_DWORD *)(a1 + 200);
        if (v26 + 4 > *(_DWORD *)(a1 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)this, a3, a4, a5, a6, a7, a8);
          v24 = v11 ^ v10;
          v26 = *(_DWORD *)(a1 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + v26) = v25;
        *(_DWORD *)(a1 + 200) += 4;
      }
      if (!v24)
        goto LABEL_19;
      v14 = *(_BYTE *)(a1 + 272) & 0x1F | (32 * (unsigned __int16)v12);
      v15 = 1920991232;
      goto LABEL_7;
    }
LABEL_18:
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, v9, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
LABEL_19:
    *(_QWORD *)(a1 + 280) = v10;
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) |= *(_DWORD *)(a1 + 288);
  }
  v23 = -1207811152;
  v27 = *(_DWORD *)(a1 + 200);
  v19 = (unsigned int *)(a1 + 200);
  v18 = v27;
  v20 = (JSC::AssemblerBuffer *)(v19 - 36);
  v21 = v27 + 4;
  v22 = *(v19 - 2);
LABEL_21:
  if (v21 > v22)
  {
    JSC::AssemblerBuffer::outOfLineGrow(v20, (uint64_t)this, a3, a4, a5, a6, a7, a8);
    v18 = *v19;
  }
  *(_DWORD *)(*(_QWORD *)v20 + v18) = v23;
  *v19 += 4;
}

void JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_2::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;

  ++*(_DWORD *)(a1 + 4784);
  v9 = *(unsigned int *)(a1 + 4776);
  if ((_DWORD)v9 != 0x3FFFFFFF)
  {
    *(_QWORD *)(a1 + 4776) = 0xFFFFFFFF3FFFFFFFLL;
    JSC::DFG::SpeculativeJIT::spill(a1, v9, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(_QWORD *)(a1 + 3976);
  v11 = *(_DWORD *)(v10 + 48);
  *(_DWORD *)(a1 + 4776) = v11;
  *(_DWORD *)(a1 + 4780) = 4;
  v12 = ~v11;
  if (v12 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 3992) + 24 * (int)v12;
    v14 = *(_DWORD *)(v10 + 52);
    *(_QWORD *)v13 = v10;
    *(_DWORD *)(v13 + 8) = v14;
    *(_BYTE *)(v13 + 12) = 16;
    *(_DWORD *)(v13 + 13) = 0;
    *(_BYTE *)(v13 + 17) = 0;
    JSC::MacroAssemblerARM64::add64(a1, 16- ((8 * (*(_DWORD *)(*(_QWORD *)(a1 + 3960) + 856) + *(_DWORD *)(*(_QWORD *)(a1 + 3960) + 860)) + 24) & 0xFFFFFFF0), 29, 31, a5, a6, a7, a8);
    --*(_DWORD *)(a1 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_3::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::AssemblerBuffer *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72[3];

  v9 = *a1;
  v10 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v11 = *(_DWORD *)(*a1 + 200);
  if (v11 + 4 > *(_DWORD *)(*a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v11 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v11) = -1447068675;
  v12 = *(_DWORD *)(v9 + 200);
  v13 = v12 + 4;
  *(_DWORD *)(v9 + 200) = v12 + 4;
  if ((v12 + 8) > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v13) = -1862269955;
  v14 = *(_DWORD *)(v9 + 200);
  v15 = v14 + 4;
  *(_DWORD *)(v9 + 200) = v14 + 4;
  if ((v14 + 8) > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v15) = -134151233;
  *(_DWORD *)(v9 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(v9, 29, *(_QWORD *)(*(_QWORD *)(v9 + 352) + 16) + 40, a4, a5, a6, a7, a8);
  v22 = *(_QWORD *)a1[1];
  if (v22)
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, v22, 0, v17, v18, v19, v20, v21);
    v23 = *(_DWORD *)(v9 + 200);
  }
  else
  {
    v24 = *(_DWORD *)(v9 + 200);
    if (v24 + 4 > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, 0, v16, v17, v18, v19, v20, v21);
      v24 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v24) = -129924190;
    v25 = *(_DWORD *)(v9 + 200);
    v26 = v25 + 4;
    *(_DWORD *)(v9 + 200) = v25 + 4;
    if ((v25 + 8) > *(_DWORD *)(v9 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v10, v22, v16, v17, v18, v19, v20, v21);
      v26 = *(_DWORD *)(v9 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v9 + 56) + v26) = -129957824;
    v23 = *(_DWORD *)(v9 + 200) + 4;
    *(_DWORD *)(v9 + 200) = v23;
  }
  if (v23 + 4 > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v22, v16, v17, v18, v19, v20, v21);
    v23 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v23) = -1440939039;
  *(_DWORD *)(v9 + 200) += 4;
  if (BYTE1(qword_1ECF4C780))
  {
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, *(_QWORD *)a1[2], 2, v17, v18, v19, v20, v21);
    if (*(_BYTE *)(v9 + 212))
    {
      *(_DWORD *)(*(_QWORD *)(v9 + 264) + 208) &= ~*(_DWORD *)(v9 + 288);
      v27 = *(_BYTE *)(v9 + 272);
      v28 = v27;
      v29 = vmEntryHostFunction;
      goto LABEL_21;
    }
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x197CA2EFCLL);
  }
  if (!*(_BYTE *)(v9 + 212))
    goto LABEL_35;
  v29 = *(uint64_t (**)())a1[2];
  *(_DWORD *)(*(_QWORD *)(v9 + 264) + 208) &= ~*(_DWORD *)(v9 + 288);
  v27 = *(_BYTE *)(v9 + 272);
  v28 = v27;
LABEL_21:
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v9, (uint64_t)v29, v28, v17, v18, v19, v20, v21);
  *(_DWORD *)(v9 + 208) = 0;
  v37 = *(_DWORD *)(v9 + 200);
  if (v37 + 4 > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v30, v31, v32, v33, v34, v35, v36);
    v37 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v37) = (32 * (v27 & 0x1F)) | 0xD63F0000;
  *(_DWORD *)(v9 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(v9, *(_QWORD *)(*(_QWORD *)(v9 + 352) + 16) + 16, 2, v32, v33, v34, v35, v36);
  JSC::MacroAssemblerARM64::branchTest64(v9, 1, 2, 0xFFFFFFFFLL, v38, v39, v40, v41, (uint64_t)v72, v42);
  v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 352) + 16) + 90440);
  v49 = *(_QWORD *)(v48 + 8);
  v50 = *(unsigned int **)(v48 + 16);
  if (v50)
  {
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 + 1, v50));
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v72, v49, v9, v43, v44, v45, v46, v47);
    do
    {
      v59 = __ldaxr(v50);
      v60 = v59 - 1;
    }
    while (__stlxr(v60, v50));
    if (!v60)
    {
      atomic_store(1u, v50);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v50, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    }
  }
  else
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkThunk<(WTF::PtrTag)0>(v72, v49, v9, v43, v44, v45, v46, v47);
  }
  v61 = *(_DWORD *)(v9 + 200);
  if (v61 + 4 > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v52, v53, v54, v55, v56, v57, v58);
    v61 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v61) = -1862270017;
  v62 = *(_DWORD *)(v9 + 200);
  v63 = v62 + 4;
  *(_DWORD *)(v9 + 200) = v62 + 4;
  if ((v62 + 8) > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v10, v52, v53, v54, v55, v56, v57, v58);
    v63 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v63) = -1463714819;
  *(_DWORD *)(v9 + 200) += 4;
}

uint64_t JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(JSC::DFG::SpeculativeJIT *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  JSC::DFG::AbstractValue *v17;
  unsigned int v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  __int128 *v44;
  char v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unsigned int v53;
  _DWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t *v105;
  uint64_t v106;
  unsigned int v107;
  _BYTE *v108;
  _BYTE *v109;
  int v110;
  uint64_t v111;
  _BYTE v112[14];
  uint64_t v113;

  v8 = (_BYTE *)a3;
  v113 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)this + 688);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = (JSC::DFG::AbstractValue *)v16;
  v18 = *((_DWORD *)this + 1396);
  v19 = *(_DWORD *)(v16 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v69 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v69 | 2;
          v86 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v69 & 1) != 0)
          {
            v101 = 2 * *v86;
            while (v101 * 4)
            {
              v102 = *(_QWORD *)&v86[v101];
              if ((*(_BYTE *)(v102 + 19) & 0xC) == 0)
              {
                v103 = *(_QWORD *)(v102 + 96);
                v104 = (v103 & 1) != 0 ? (v103 >> 1) & 3 : *(unsigned __int8 *)(v103 + 4);
                v101 -= 2;
                if (v104 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v86, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_83;
            }
          }
          else if (v86)
          {
            if ((*((_BYTE *)v86 + 19) & 0xC) != 0
              || ((v87 = *((_QWORD *)v86 + 12), (v87 & 1) != 0)
                ? (v88 = (v87 >> 1) & 3)
                : (v88 = *(unsigned __int8 *)(v87 + 4)),
                  v88 == 2))
            {
LABEL_83:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v18;
  }
  v22 = *(_QWORD *)(v16 + 8);
  v20 = (uint64_t *)(v16 + 8);
  v21 = v22;
  v23 = v22 & 0x300000000;
  v24 = v22;
  if ((v22 & 0x300000000) != v22)
  {
    if ((v21 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow(v17, 0x300000000uLL, a3, a4, a5, a6, a7, a8))
      {
LABEL_30:
        v24 = *v20;
        goto LABEL_5;
      }
    }
    else
    {
      *v20 = v23;
      if (v23)
      {
LABEL_6:
        v25 = a2 & 0xFF00FFFFFFFFFFFFLL;
        v26 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        v27 = ~(_DWORD)v26;
        if (v27 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197CA3950);
        }
        v28 = *((_QWORD *)this + 499);
        v29 = (_BYTE *)(v28 + 24 * (int)v27);
        v30 = v29 + 12;
        switch(v29[12])
        {
          case 0:
            v35 = JSC::DFG::SpeculativeJIT::allocate(this, a2, a3, a4, a5, a6, a7, a8);
            v31 = v35;
            v41 = *(unsigned __int16 *)(v25 + 18);
            if (v41 > 0xB5)
            {
              if (v41 == 182 || v41 == 355 || v41 == 348)
                goto LABEL_19;
            }
            else if (v41 < 3)
            {
LABEL_19:
              if ((int)v35 > 15)
                v42 = -1;
              else
                v42 = v35;
              v43 = (char *)this + 12 * v42;
              *((_DWORD *)v43 + 1194) = v26;
              *((_DWORD *)v43 + 1195) = 1;
              if (v41 == 355 || v41 == 348)
              {
                v44 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
                {
                  JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
                  LODWORD(qword_1EE342DB8) = 0;
                }
              }
              else
              {
                v44 = *(__int128 **)(v25 + 72);
              }
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)*(unsigned int *)v44, v35, v36, v37, v38, v39, v40);
              v45 = 1;
              *v30 = 1;
              v46 = v28 + 24 * (int)v27;
              *(_BYTE *)(v46 + 17) = v31;
              if (*(_BYTE *)(v46 + 15))
              {
                v47 = *(_DWORD *)(*(_QWORD *)v29 + 20);
                if (v47 >= 0xFFFFFFFE)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197CA37E0);
                }
                v48 = (_QWORD *)((char *)this + 5632);
                *(_WORD *)&v112[12] = 260;
                *(_DWORD *)v112 = v47;
                v49 = v31 | 0x3FFFFF00;
LABEL_73:
                *(_QWORD *)&v112[4] = v49;
                v82 = *((unsigned int *)this + 1411);
                if ((_DWORD)v82 == *((_DWORD *)this + 1410))
                {
                  v89 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v48, v82 + 1, (unint64_t)v112, a4, a5, a6, a7, a8);
                  v83 = (_QWORD *)(*((_QWORD *)this + 704) + 14 * *((unsigned int *)this + 1411));
                  v84 = *v89;
                  v85 = *(uint64_t *)((char *)v89 + 6);
                }
                else
                {
                  v83 = (_QWORD *)(*v48 + 14 * v82);
                  v84 = *(_QWORD *)v112;
                  v85 = *(_QWORD *)&v112[6];
                }
                *(_QWORD *)((char *)v83 + 6) = v85;
                *v83 = v84;
                ++*((_DWORD *)this + 1411);
                goto LABEL_76;
              }
              goto LABEL_76;
            }
            v108 = v8;
            v51 = *(unsigned __int8 *)(v28 + 24 * (int)v27 + 13);
            if (v51 != 1 && (v51 & 0x10) == 0)
            {
              JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x4B2, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(Edge, DataFormat &) [strict = false]", "(spillFormat & DataFormatJS) || spillFormat == DataFormatInt32");
              __break(0xC471u);
              JUMPOUT(0x197CA3988);
            }
            if ((int)v35 > 15)
              v53 = -1;
            else
              v53 = v35;
            v54 = (_DWORD *)((char *)this + 12 * v53 + 4776);
            *v54 = v26;
            v54[1] = 2;
            if ((v51 | 0x10) != 0x11)
            {
              v107 = v53;
              JSC::MacroAssemblerARM64::load64((uint64_t)this, (v26 << 35) | 0x1D, v35, v36, v37, v38, v39, v40);
              *v30 = 17;
              v70 = v28 + 24 * (int)v27;
              *(_BYTE *)(v70 + 17) = v31;
              if (*(_BYTE *)(v70 + 15))
              {
                if (*(_DWORD *)(*(_QWORD *)v29 + 20) >= 0xFFFFFFFE)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197CA37C0);
                }
                v71 = (_QWORD *)((char *)this + 5632);
                *(_DWORD *)v112 = *(_DWORD *)(*(_QWORD *)v29 + 20);
                *(_QWORD *)&v112[4] = v31 | 0x3FFFFF00;
                *(_WORD *)&v112[12] = 4356;
                v72 = *((unsigned int *)this + 1411);
                if ((_DWORD)v72 == *((_DWORD *)this + 1410))
                {
                  v100 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v71, v72 + 1, (unint64_t)v112, a4, a5, a6, a7, a8);
                  v73 = (_QWORD *)(*((_QWORD *)this + 704) + 14 * *((unsigned int *)this + 1411));
                  v74 = *v100;
                  v75 = *(uint64_t *)((char *)v100 + 6);
                }
                else
                {
                  v73 = (_QWORD *)(*v71 + 14 * v72);
                  v74 = *(_QWORD *)v112;
                  v75 = *(_QWORD *)&v112[6];
                }
                *(_QWORD *)((char *)v73 + 6) = v75;
                *v73 = v74;
                ++*((_DWORD *)this + 1411);
              }
              --*((_DWORD *)this + 3 * v107 + 1196);
LABEL_64:
              v109 = v8;
              if ((v21 & 0xC00000000) != 0)
              {
                JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x4D2, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(Edge, DataFormat &) [strict = false]", "!(type & SpecInt52Any)");
                __break(0xC471u);
                JUMPOUT(0x197CA38A4);
              }
              v76 = v28 + 24 * (int)v27;
              v78 = *(char *)(v76 + 17);
              v77 = (_BYTE *)(v76 + 17);
              v31 = v78;
              v79 = v78;
              if (v78 > 15)
                v80 = -1;
              else
                v80 = v31;
              ++*((_DWORD *)this + 3 * v80 + 1196);
              if ((v21 & 0xFFFFFFFCFFFFFFFFLL) != 0)
              {
                JSC::MacroAssemblerARM64::branch64((uint64_t)this, 3, v31, 27, a5, a6, a7, a8, (uint64_t)&v110);
                *(_DWORD *)v112 = v110;
                *(_QWORD *)&v112[4] = v111;
                JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)((v79 << 32) | 0x80000000), (JSC::DFG::Node *)v25, (int *)v112);
              }
              v45 = 17;
              *v30 = 17;
              *v77 = v31;
              v8 = v109;
              if (*(_BYTE *)(v28 + 24 * (int)v27 + 15))
              {
                v81 = *(_DWORD *)(*(_QWORD *)v29 + 20);
                if (v81 >= 0xFFFFFFFE)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197CA3738);
                }
                v48 = (_QWORD *)((char *)this + 5632);
                *(_WORD *)&v112[12] = 4356;
                *(_DWORD *)v112 = v81;
                v49 = v79 | 0x3FFFFF00;
                goto LABEL_73;
              }
LABEL_76:
              *v8 = v45;
              return v31;
            }
            v55 = (v26 << 35) | 0x1D;
            v56 = (_QWORD *)((char *)this + 5632);
            v57 = v28 + 24 * (int)v27;
            v58 = (_BYTE *)(v57 + 17);
            v59 = (_BYTE *)(v57 + 15);
            if (v51 == 1)
            {
              JSC::MacroAssemblerARM64::load32((uint64_t)this, v55, v35, v36, v37, v38, v39, v40);
              v33 = 1;
              *v30 = 1;
              *v58 = v31;
              if (*v59)
              {
                v8 = v108;
                if (*(_DWORD *)(*(_QWORD *)v29 + 20) >= 0xFFFFFFFE)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197CA3758);
                }
                *(_DWORD *)v112 = *(_DWORD *)(*(_QWORD *)v29 + 20);
                *(_QWORD *)&v112[4] = v31 | 0x3FFFFF00;
                *(_WORD *)&v112[12] = 260;
                v65 = *((unsigned int *)this + 1411);
                if ((_DWORD)v65 == *((_DWORD *)this + 1410))
                {
                  v99 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 5632, v65 + 1, (unint64_t)v112, v60, v61, v62, v63, v64);
                  v66 = (_QWORD *)(*((_QWORD *)this + 704) + 14 * *((unsigned int *)this + 1411));
                  v67 = *v99;
                  v68 = *(uint64_t *)((char *)v99 + 6);
                }
                else
                {
                  v66 = (_QWORD *)(*v56 + 14 * v65);
                  v67 = *(_QWORD *)v112;
                  v68 = *(_QWORD *)&v112[6];
                }
                *(_QWORD *)((char *)v66 + 6) = v68;
                *v66 = v67;
                ++*((_DWORD *)this + 1411);
LABEL_12:
                v33 = 1;
                goto LABEL_13;
              }
            }
            else
            {
              JSC::MacroAssemblerARM64::load64((uint64_t)this, v55, v35, v36, v37, v38, v39, v40);
              v33 = 17;
              *v30 = 17;
              *v58 = v31;
              if (*v59)
              {
                v8 = v108;
                if (*(_DWORD *)(*(_QWORD *)v29 + 20) >= 0xFFFFFFFE)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197CA3810);
                }
                *(_DWORD *)v112 = *(_DWORD *)(*(_QWORD *)v29 + 20);
                *(_QWORD *)&v112[4] = v31 | 0x3FFFFF00;
                *(_WORD *)&v112[12] = 4356;
                v95 = *((unsigned int *)this + 1411);
                if ((_DWORD)v95 == *((_DWORD *)this + 1410))
                {
                  v105 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 5632, v95 + 1, (unint64_t)v112, v90, v91, v92, v93, v94);
                  v96 = (_QWORD *)(*((_QWORD *)this + 704) + 14 * *((unsigned int *)this + 1411));
                  v97 = *v105;
                  v98 = *(uint64_t *)((char *)v105 + 6);
                }
                else
                {
                  v96 = (_QWORD *)(*v56 + 14 * v95);
                  v97 = *(_QWORD *)v112;
                  v98 = *(_QWORD *)&v112[6];
                }
                *(_QWORD *)((char *)v96 + 6) = v98;
                *v96 = v97;
                ++*((_DWORD *)this + 1411);
LABEL_35:
                v33 = 17;
                goto LABEL_13;
              }
            }
            v8 = v108;
LABEL_13:
            *v8 = v33;
            return v31;
          case 1:
            v31 = *(char *)(v28 + 24 * (int)v27 + 17);
            if ((int)v31 > 15)
              v32 = -1;
            else
              v32 = *(char *)(v28 + 24 * (int)v27 + 17);
            ++*((_DWORD *)this + 3 * v32 + 1196);
            goto LABEL_12;
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 0x14:
          case 0x15:
          case 0x16:
          case 0x18:
            JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x50E, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(Edge, DataFormat &) [strict = false]", "Bad data format");
            __break(0xC471u);
            JUMPOUT(0x197CA37A0);
          case 0x10:
            goto LABEL_64;
          case 0x11:
            v31 = *(char *)(v28 + 24 * (int)v27 + 17);
            if ((int)v31 > 15)
              v50 = -1;
            else
              v50 = *(char *)(v28 + 24 * (int)v27 + 17);
            ++*((_DWORD *)this + 3 * v50 + 1196);
            goto LABEL_35;
          default:
            JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x511, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(Edge, DataFormat &) [strict = false]", "Corrupt data format");
            __break(0xC471u);
            JUMPOUT(0x197CA38ECLL);
        }
      }
      JSC::DFG::AbstractValue::clear(v17, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(*((_QWORD *)this + 702) + 80) = 0;
    goto LABEL_30;
  }
LABEL_5:
  if (v24)
    goto LABEL_6;
  v106 = (a2 >> 50) & 0x3F;
  if ((_DWORD)v106 && (v106 > 0x34 || ((1 << v106) & 0x12400001800284) == 0))
    JSC::DFG::SpeculativeJIT::terminateSpeculativeExecution((uint64_t)this, 0x16uLL, 255, 0, a5, a6, a7, a8);
  *v8 = 1;
  return JSC::DFG::SpeculativeJIT::allocate(this, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;

  v9 = 0;
  JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(a1, a2, (uint64_t)&v9, a4, a5, a6, a7, a8);
  if (v9 != 1)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
    __break(0xC471u);
  }
}

uint64_t JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  JSC::DFG::AbstractValue *v17;
  unsigned int v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _BYTE *v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unsigned int v58;
  _DWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int *v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  _BYTE *v90;
  int v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  _BYTE *v106;
  int v107;
  uint64_t v108;
  _BYTE v109[14];
  uint64_t v110;

  v8 = (_BYTE *)a3;
  v110 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 5504);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = (JSC::DFG::AbstractValue *)v16;
  v18 = *(_DWORD *)(a1 + 5584);
  v19 = *(_DWORD *)(v16 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v78 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v78 | 2;
          v79 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v78 & 1) != 0)
          {
            v85 = 2 * *v79;
            while (v85 * 4)
            {
              v86 = *(_QWORD *)&v79[v85];
              if ((*(_BYTE *)(v86 + 19) & 0xC) == 0)
              {
                v87 = *(_QWORD *)(v86 + 96);
                v88 = (v87 & 1) != 0 ? (v87 >> 1) & 3 : *(unsigned __int8 *)(v87 + 4);
                v85 -= 2;
                if (v88 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v79, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_69;
            }
          }
          else if (v79)
          {
            if ((*((_BYTE *)v79 + 19) & 0xC) != 0
              || ((v80 = *((_QWORD *)v79 + 12), (v80 & 1) != 0)
                ? (v81 = (v80 >> 1) & 3)
                : (v81 = *(unsigned __int8 *)(v80 + 4)),
                  v81 == 2))
            {
LABEL_69:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v18;
  }
  v22 = *(_QWORD *)(v16 + 8);
  v20 = (uint64_t *)(v16 + 8);
  v21 = v22;
  v23 = v22 & 0x300000000;
  v24 = v22;
  if ((v22 & 0x300000000) != v22)
  {
    if ((v21 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow(v17, 0x300000000uLL, a3, a4, a5, a6, a7, a8))
      {
LABEL_57:
        v24 = *v20;
        goto LABEL_5;
      }
    }
    else
    {
      *v20 = v23;
      if (v23)
        goto LABEL_6;
      JSC::DFG::AbstractValue::clear(v17, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 5616) + 80) = 0;
    goto LABEL_57;
  }
LABEL_5:
  if (!v24)
  {
    v89 = (a2 >> 50) & 0x3F;
    if ((_DWORD)v89 && (v89 > 0x34 || ((1 << v89) & 0x12400001800284) == 0))
      JSC::DFG::SpeculativeJIT::terminateSpeculativeExecution(a1, 0x16uLL, 255, 0, a5, a6, a7, a8);
    *v8 = 1;
    return JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_6:
  v25 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v26 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v27 = ~(_DWORD)v26;
  if (v27 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197CA4260);
  }
  v28 = *(_QWORD *)(a1 + 3992);
  v29 = (_BYTE *)(v28 + 24 * (int)v27);
  v30 = v29 + 12;
  switch(v29[12])
  {
    case 0:
      v34 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
      v31 = v34;
      v40 = *(unsigned __int16 *)(v25 + 18);
      if (v40 > 0xB5)
      {
        if (v40 == 182 || v40 == 355 || v40 == 348)
        {
LABEL_16:
          if ((int)v34 > 15)
            v41 = -1;
          else
            v41 = v34;
          v42 = a1 + 12 * v41;
          *(_DWORD *)(v42 + 4776) = v26;
          *(_DWORD *)(v42 + 4780) = 1;
          if (v40 == 355 || v40 == 348)
          {
            v43 = v8;
            v44 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
            {
              JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
              LODWORD(qword_1EE342DB8) = 0;
            }
          }
          else
          {
            v43 = v8;
            v44 = *(__int128 **)(v25 + 72);
          }
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)*(unsigned int *)v44, v34, v35, v36, v37, v38, v39);
          *v30 = 1;
          v50 = v28 + 24 * (int)v27;
          *(_BYTE *)(v50 + 17) = v31;
          if (*(_BYTE *)(v50 + 15))
          {
            if (*(_DWORD *)(*(_QWORD *)v29 + 20) >= 0xFFFFFFFE)
            {
              __break(0xC471u);
              JUMPOUT(0x197CA41A0);
            }
            v51 = (_QWORD *)(a1 + 5632);
            *(_DWORD *)v109 = *(_DWORD *)(*(_QWORD *)v29 + 20);
            *(_QWORD *)&v109[4] = v31 | 0x3FFFFF00;
            *(_WORD *)&v109[12] = 260;
            v52 = *(unsigned int *)(a1 + 5644);
            if ((_DWORD)v52 == *(_DWORD *)(a1 + 5640))
            {
              v84 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v51, v52 + 1, (unint64_t)v109, v45, v46, v47, v48, v49);
              v53 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
              v54 = *v84;
              v55 = *(uint64_t *)((char *)v84 + 6);
            }
            else
            {
              v53 = (_QWORD *)(*v51 + 14 * v52);
              v54 = *(_QWORD *)v109;
              v55 = *(_QWORD *)&v109[6];
            }
            *(_QWORD *)((char *)v53 + 6) = v55;
            *v53 = v54;
            ++*(_DWORD *)(a1 + 5644);
          }
          *v43 = 1;
          goto LABEL_13;
        }
      }
      else if (v40 < 3)
      {
        goto LABEL_16;
      }
      v106 = v8;
      v56 = *(unsigned __int8 *)(v28 + 24 * (int)v27 + 13);
      if (v56 != 1 && (v56 & 0x10) == 0)
      {
        JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x4B2, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(Edge, DataFormat &) [strict = true]", "(spillFormat & DataFormatJS) || spillFormat == DataFormatInt32");
        __break(0xC471u);
        JUMPOUT(0x197CA4298);
      }
      if ((int)v34 > 15)
        v58 = -1;
      else
        v58 = v34;
      v59 = (_DWORD *)(a1 + 4776 + 12 * v58);
      *v59 = v26;
      v59[1] = 2;
      if ((v56 | 0x10) == 0x11)
      {
        JSC::MacroAssemblerARM64::load32(a1, (v26 << 35) | 0x1D, v34, v35, v36, v37, v38, v39);
        *v30 = 1;
        v65 = v28 + 24 * (int)v27;
        *(_BYTE *)(v65 + 17) = v31;
        if (*(_BYTE *)(v65 + 15))
        {
          if (*(_DWORD *)(*(_QWORD *)v29 + 20) >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197CA40CCLL);
          }
          v66 = (_QWORD *)(a1 + 5632);
          *(_DWORD *)v109 = *(_DWORD *)(*(_QWORD *)v29 + 20);
          *(_QWORD *)&v109[4] = v31 | 0x3FFFFF00;
          *(_WORD *)&v109[12] = 260;
          v67 = *(unsigned int *)(a1 + 5644);
          if ((_DWORD)v67 == *(_DWORD *)(a1 + 5640))
          {
            v82 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)v109, v60, v61, v62, v63, v64);
            v68 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
            v69 = *v82;
            v70 = *(uint64_t *)((char *)v82 + 6);
          }
          else
          {
            v68 = (_QWORD *)(*v66 + 14 * v67);
            v69 = *(_QWORD *)v109;
            v70 = *(_QWORD *)&v109[6];
          }
          *(_QWORD *)((char *)v68 + 6) = v70;
          *v68 = v69;
          ++*(_DWORD *)(a1 + 5644);
        }
        *v106 = 1;
      }
      else
      {
        JSC::MacroAssemblerARM64::load64(a1, (v26 << 35) | 0x1D, v34, v35, v36, v37, v38, v39);
        *v30 = 17;
        v72 = v28 + 24 * (int)v27;
        *(_BYTE *)(v72 + 17) = v31;
        if (*(_BYTE *)(v72 + 15))
        {
          if (*(_DWORD *)(*(_QWORD *)v29 + 20) >= 0xFFFFFFFE)
          {
            __break(0xC471u);
            JUMPOUT(0x197CA4180);
          }
          v73 = (_QWORD *)(a1 + 5632);
          *(_DWORD *)v109 = *(_DWORD *)(*(_QWORD *)v29 + 20);
          *(_QWORD *)&v109[4] = v31 | 0x3FFFFF00;
          *(_WORD *)&v109[12] = 4356;
          v74 = *(unsigned int *)(a1 + 5644);
          if ((_DWORD)v74 == *(_DWORD *)(a1 + 5640))
          {
            v83 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v73, v74 + 1, (unint64_t)v109, v71, a5, a6, a7, a8);
            v75 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
            v76 = *v83;
            v77 = *(uint64_t *)((char *)v83 + 6);
          }
          else
          {
            v75 = (_QWORD *)(*v73 + 14 * v74);
            v76 = *(_QWORD *)v109;
            v77 = *(_QWORD *)&v109[6];
          }
          *(_QWORD *)((char *)v75 + 6) = v77;
          *v75 = v76;
          ++*(_DWORD *)(a1 + 5644);
        }
        --*(_DWORD *)(a1 + 4776 + 12 * v58 + 8);
        v8 = v106;
LABEL_53:
        if ((v21 & 0xC00000000) != 0)
        {
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x4D2, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(Edge, DataFormat &) [strict = true]", "!(type & SpecInt52Any)");
          __break(0xC471u);
          JUMPOUT(0x197CA3F20);
        }
        v90 = v8;
        v91 = *(char *)(v28 + 24 * (int)v27 + 17);
        v92 = *(unsigned __int8 *)(v28 + 24 * (int)v27 + 17);
        if (v91 > 15)
          v91 = -1;
        v93 = (_DWORD *)(a1 + 12 * v91 + 4784);
        ++*v93;
        if ((v21 & 0xFFFFFFFCFFFFFFFFLL) != 0)
        {
          JSC::MacroAssemblerARM64::branch64(a1, 3, (char)v92, 27, a5, a6, a7, a8, (uint64_t)&v107);
          *(_DWORD *)v109 = v107;
          *(_QWORD *)&v109[4] = v108;
          JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)((v92 << 32) | 0x80000000), (JSC::DFG::Node *)v25, (int *)v109);
        }
        JSC::DFG::GenerationInfo::fillJSValue(v28 + 24 * (int)v27, a1 + 5632, v92, 17, a5, a6, a7, a8);
        --*v93;
        v8 = v90;
LABEL_105:
        v94 = v28 + 24 * (int)v27;
        v97 = *(char *)(v94 + 17);
        v95 = (_BYTE *)(v94 + 17);
        v96 = v97;
        if (v97 > 15)
          v98 = -1;
        else
          v98 = v96;
        v99 = a1 + 12 * v98;
        if (*(_DWORD *)(v99 + 4784))
        {
          v31 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v99 + 4784) = 1;
          *v30 = 1;
          *v95 = v96;
          v31 = v96;
          if (*(_BYTE *)(v28 + 24 * (int)v27 + 15))
          {
            if (*(_DWORD *)(*(_QWORD *)v29 + 20) >= 0xFFFFFFFE)
            {
              __break(0xC471u);
              JUMPOUT(0x197CA4488);
            }
            v100 = (_QWORD *)(a1 + 5632);
            *(_DWORD *)v109 = *(_DWORD *)(*(_QWORD *)v29 + 20);
            *(_QWORD *)&v109[4] = v96 | 0x3FFFFF00;
            *(_WORD *)&v109[12] = 260;
            v101 = *(unsigned int *)(a1 + 5644);
            if ((_DWORD)v101 == *(_DWORD *)(a1 + 5640))
            {
              v105 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v101 + 1, (unint64_t)v109, a4, a5, a6, a7, a8);
              v102 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
              v103 = *v105;
              v104 = *(uint64_t *)((char *)v105 + 6);
            }
            else
            {
              v102 = (_QWORD *)(*v100 + 14 * v101);
              v103 = *(_QWORD *)v109;
              v104 = *(_QWORD *)&v109[6];
            }
            *(_QWORD *)((char *)v102 + 6) = v104;
            *v102 = v103;
            ++*(_DWORD *)(a1 + 5644);
            v31 = v96;
          }
        }
        JSC::MacroAssemblerARM64::and64(a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v96, v31);
LABEL_12:
        *v8 = 1;
      }
LABEL_13:
      result = v31;
      break;
    case 1:
      v31 = *(char *)(v28 + 24 * (int)v27 + 17);
      if ((int)v31 > 15)
        v32 = -1;
      else
        v32 = *(char *)(v28 + 24 * (int)v27 + 17);
      ++*(_DWORD *)(a1 + 12 * v32 + 4784);
      goto LABEL_12;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x18:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x50E, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(Edge, DataFormat &) [strict = true]", "Bad data format");
      __break(0xC471u);
      JUMPOUT(0x197CA4160);
    case 0x10:
      goto LABEL_53;
    case 0x11:
      goto LABEL_105;
    default:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x511, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(Edge, DataFormat &) [strict = true]", "Corrupt data format");
      __break(0xC471u);
      JUMPOUT(0x197CA4240);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::fillSpeculateInt52(JSC::DFG::SpeculativeJIT *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  JSC::DFG::AbstractValue *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  char *v33;
  int v34;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  unsigned int v39;
  char *v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  __int128 *v55;
  unint64_t v56;
  unsigned int v57;
  char *v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE v97[14];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v11 = *((_QWORD *)this + 688);
  v12 = (_QWORD *)(v11 + 24);
  v13 = (_QWORD *)(v11 + 8);
  if ((a2 & 1) != 0)
    v13 = v12;
  v14 = *v13 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v15 = (JSC::DFG::AbstractValue *)v14;
  v16 = *((unsigned int *)this + 1396);
  if ((_DWORD)v16 != *(_DWORD *)(v14 + 20))
  {
    if ((*(_QWORD *)(v14 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v14, (void *)v16, a3, a4, a5, a6, a7, a8);
    else
      *(_DWORD *)(v14 + 20) = v16;
  }
  v19 = *(_QWORD *)(v14 + 8);
  v18 = (uint64_t *)(v14 + 8);
  v17 = v19;
  v20 = v19 & 0xC00000000;
  if ((v19 & 0xC00000000) != v19)
  {
    if ((v17 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow(v15, 0xC00000000uLL, a3, a4, a5, a6, a7, a8))
      {
LABEL_69:
        v17 = *v18;
        goto LABEL_5;
      }
    }
    else
    {
      *v18 = v20;
      if (v20)
      {
LABEL_6:
        v21 = a2 & 0xFF00FFFFFFFFFFFFLL;
        v22 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        v23 = ~(_DWORD)v22;
        if (v23 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197CA4C14);
        }
        v24 = *((_QWORD *)this + 499);
        v25 = (unsigned __int8 *)(v24 + 24 * (int)v23);
        v26 = v25 + 12;
        v27 = v25[12];
        if (v27 == 3)
        {
          v28 = v24 + 24 * (int)v23;
          v31 = *(char *)(v28 + 17);
          v29 = (_BYTE *)(v28 + 17);
          v30 = v31;
          if (v31 > 15)
            v32 = -1;
          else
            v32 = v30;
          v33 = (char *)this + 12 * v32;
          v34 = *((_DWORD *)v33 + 1196);
          *((_DWORD *)v33 + 1196) = v34 + 1;
          if ((_DWORD)a3 != 3)
          {
            if (v34)
            {
              v83 = v33 + 4784;
              v84 = JSC::DFG::SpeculativeJIT::allocate(this, v16, a3, a4, a5, a6, a7, a8);
              JSC::MacroAssemblerARM64::move(this, v30, v84, v85, v86, v87, v88, v89);
              --*v83;
              v30 = v84;
            }
            else
            {
              *v26 = 2;
              *v29 = v30;
              if (*(_BYTE *)(v24 + 24 * (int)v23 + 15))
              {
                if (*(_DWORD *)(*(_QWORD *)v25 + 20) >= 0xFFFFFFFE)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197CA4B58);
                }
                v42 = (_QWORD *)((char *)this + 5632);
                *(_DWORD *)v97 = *(_DWORD *)(*(_QWORD *)v25 + 20);
                *(_QWORD *)&v97[4] = v30 | 0x3FFFFF00;
                *(_WORD *)&v97[12] = 516;
                v43 = *((unsigned int *)this + 1411);
                if ((_DWORD)v43 == *((_DWORD *)this + 1410))
                {
                  v80 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v42, v43 + 1, (unint64_t)v97, a4, a5, a6, a7, a8);
                  v44 = (_QWORD *)(*((_QWORD *)this + 704) + 14 * *((unsigned int *)this + 1411));
                  v45 = *v80;
                  v46 = *(uint64_t *)((char *)v80 + 6);
                }
                else
                {
                  v44 = (_QWORD *)(*v42 + 14 * v43);
                  v45 = *(_QWORD *)v97;
                  v46 = *(_QWORD *)&v97[6];
                }
                *(_QWORD *)((char *)v44 + 6) = v46;
                *v44 = v45;
                ++*((_DWORD *)this + 1411);
              }
            }
            v47 = *((_DWORD *)this + 50);
            if (v47 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v16, a3, a4, a5, a6, a7, a8);
              v47 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v47) = v30 & 0x1F | (32 * (v30 & 0x1F)) | 0xD374CC00;
            *((_DWORD *)this + 50) += 4;
          }
          return v30;
        }
        if (v27 == 2)
        {
          v36 = v24 + 24 * (int)v23;
          v38 = *(char *)(v36 + 17);
          v37 = (_BYTE *)(v36 + 17);
          v30 = v38;
          if (v38 > 15)
            v39 = -1;
          else
            v39 = v30;
          v40 = (char *)this + 12 * v39;
          v41 = *((_DWORD *)v40 + 1196);
          *((_DWORD *)v40 + 1196) = v41 + 1;
          if ((_DWORD)a3 != 2)
          {
            if (v41)
            {
              v90 = v40 + 4784;
              v91 = JSC::DFG::SpeculativeJIT::allocate(this, v16, a3, a4, a5, a6, a7, a8);
              JSC::MacroAssemblerARM64::move(this, v30, v91, v92, v93, v94, v95, v96);
              --*v90;
              v30 = v91;
            }
            else
            {
              *v26 = 3;
              *v37 = v30;
              if (*(_BYTE *)(v24 + 24 * (int)v23 + 15))
              {
                if (*(_DWORD *)(*(_QWORD *)v25 + 20) >= 0xFFFFFFFE)
                {
                  __break(0xC471u);
                  JUMPOUT(0x197CA4BCCLL);
                }
                v66 = (_QWORD *)((char *)this + 5632);
                *(_DWORD *)v97 = *(_DWORD *)(*(_QWORD *)v25 + 20);
                *(_QWORD *)&v97[4] = v30 | 0x3FFFFF00;
                *(_WORD *)&v97[12] = 772;
                v67 = *((unsigned int *)this + 1411);
                if ((_DWORD)v67 == *((_DWORD *)this + 1410))
                {
                  v81 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v66, v67 + 1, (unint64_t)v97, a4, a5, a6, a7, a8);
                  v68 = (_QWORD *)(*((_QWORD *)this + 704) + 14 * *((unsigned int *)this + 1411));
                  v69 = *v81;
                  v70 = *(uint64_t *)((char *)v81 + 6);
                }
                else
                {
                  v68 = (_QWORD *)(*v66 + 14 * v67);
                  v69 = *(_QWORD *)v97;
                  v70 = *(_QWORD *)&v97[6];
                }
                *(_QWORD *)((char *)v68 + 6) = v70;
                *v68 = v69;
                ++*((_DWORD *)this + 1411);
              }
            }
            v71 = *((_DWORD *)this + 50);
            if (v71 + 4 > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v16, a3, a4, a5, a6, a7, a8);
              v71 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v71) = v30 & 0x1F | (32 * (v30 & 0x1F)) | 0x934CFC00;
            *((_DWORD *)this + 50) += 4;
          }
          return v30;
        }
        if (v25[12])
        {
          JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x579, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt52(Edge, DataFormat)", "Bad data format");
          __break(0xC471u);
        }
        else
        {
          v48 = JSC::DFG::SpeculativeJIT::allocate(this, v16, a3, a4, a5, a6, a7, a8);
          v30 = v48;
          v54 = *(unsigned __int16 *)(v21 + 18);
          if (v54 > 0xB5)
          {
            if (v54 == 182)
              goto LABEL_31;
            if (v54 == 355 || v54 == 348)
            {
              v55 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
              {
                v56 = 0;
                JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
                LODWORD(qword_1EE342DB8) = 0;
                goto LABEL_33;
              }
LABEL_32:
              v56 = *(_QWORD *)v55;
LABEL_33:
              if ((int)v48 > 15)
                v57 = -1;
              else
                v57 = v48;
              v58 = (char *)this + 12 * v57;
              *((_DWORD *)v58 + 1194) = v22;
              *((_DWORD *)v58 + 1195) = 1;
              v59 = (uint64_t)COERCE_DOUBLE(v56 - 0x2000000000000);
              v60 = v56 >= 0xFFFE000000000000;
              v56 = (int)v56;
              if (!v60)
                v56 = v59;
              if ((_DWORD)a3 == 2)
                v61 = v56 << 12;
              else
                v61 = v56;
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v61, v48, v49, v50, v51, v52, v53);
              JSC::DFG::GenerationInfo::fillJSValue(v24 + 24 * (int)v23, (uint64_t)this + 5632, v30, a3, v62, v63, v64, v65);
              return v30;
            }
          }
          else if (v54 < 3)
          {
LABEL_31:
            v55 = *(__int128 **)(v21 + 72);
            goto LABEL_32;
          }
          v72 = *(unsigned __int8 *)(v24 + 24 * (int)v23 + 13);
          if ((v72 & 0xFE) == 2)
          {
            if ((int)v48 > 15)
              v73 = -1;
            else
              v73 = v48;
            v74 = (char *)this + 12 * v73;
            *((_DWORD *)v74 + 1194) = v22;
            *((_DWORD *)v74 + 1195) = 2;
            JSC::MacroAssemblerARM64::load64((uint64_t)this, (v22 << 35) | 0x1D, v48, v49, v50, v51, v52, v53);
            if ((_DWORD)a3 == 3)
            {
              if (v72 == 2)
                JSC::MacroAssemblerARM64::rshift64(this, v30, 12, v30, v76, v77, v78, v79);
              JSC::DFG::GenerationInfo::fillStrictInt52((uint64_t)v25, (uint64_t)this + 5632, v30, v75, v76, v77, v78, v79);
            }
            else
            {
              if (v72 == 3)
                JSC::MacroAssemblerARM64::lshift64(this, v30, 12, v30, v76, v77, v78, v79);
              JSC::DFG::GenerationInfo::fillInt52((uint64_t)v25, (uint64_t)this + 5632, v30, v75, v76, v77, v78, v79);
            }
            return v30;
          }
          JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x545, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt52(Edge, DataFormat)", "spillFormat == DataFormatInt52 || spillFormat == DataFormatStrictInt52");
          __break(0xC471u);
        }
        JUMPOUT(0x197CA4AC8);
      }
      JSC::DFG::AbstractValue::clear(v15, v16, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(*((_QWORD *)this + 702) + 80) = 0;
    goto LABEL_69;
  }
LABEL_5:
  if (v17)
    goto LABEL_6;
  v82 = (a2 >> 50) & 0x3F;
  if ((_DWORD)v82 && (v82 > 0x34 || ((1 << v82) & 0x12400001800284) == 0))
    JSC::DFG::SpeculativeJIT::terminateSpeculativeExecution((uint64_t)this, 0x16uLL, 255, 0, a5, a6, a7, a8);
  return JSC::DFG::SpeculativeJIT::allocate(this, v16, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::GenerationInfo::fillStrictInt52(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[14];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(result + 12) = 3;
  *(_BYTE *)(result + 17) = a3;
  if (*(_BYTE *)(result + 15))
  {
    if (*(_DWORD *)(*(_QWORD *)result + 20) >= 0xFFFFFFFE)
    {
      __break(0xC471u);
      JUMPOUT(0x197CA4D68);
    }
    *(_DWORD *)v13 = *(_DWORD *)(*(_QWORD *)result + 20);
    *(_QWORD *)&v13[4] = a3 | 0x3FFFFF00;
    *(_WORD *)&v13[12] = 772;
    v9 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v9 + 1, (unint64_t)v13, a4, a5, a6, a7, a8);
      v10 = (_QWORD *)(*(_QWORD *)a2 + 14 * *(unsigned int *)(a2 + 12));
      v11 = *(_QWORD *)result;
      v12 = *(_QWORD *)(result + 6);
    }
    else
    {
      v10 = (_QWORD *)(*(_QWORD *)a2 + 14 * v9);
      v11 = *(_QWORD *)v13;
      v12 = *(_QWORD *)&v13[6];
    }
    *(_QWORD *)((char *)v10 + 6) = v12;
    *v10 = v11;
    ++*(_DWORD *)(a2 + 12);
  }
  return result;
}

uint64_t JSC::DFG::GenerationInfo::fillInt52(uint64_t result, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[14];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(result + 12) = 2;
  *(_BYTE *)(result + 17) = a3;
  if (*(_BYTE *)(result + 15))
  {
    if (*(_DWORD *)(*(_QWORD *)result + 20) >= 0xFFFFFFFE)
    {
      __break(0xC471u);
      JUMPOUT(0x197CA4E8CLL);
    }
    *(_DWORD *)v13 = *(_DWORD *)(*(_QWORD *)result + 20);
    *(_QWORD *)&v13[4] = a3 | 0x3FFFFF00;
    *(_WORD *)&v13[12] = 516;
    v9 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v9 + 1, (unint64_t)v13, a4, a5, a6, a7, a8);
      v10 = (_QWORD *)(*(_QWORD *)a2 + 14 * *(unsigned int *)(a2 + 12));
      v11 = *(_QWORD *)result;
      v12 = *(_QWORD *)(result + 6);
    }
    else
    {
      v10 = (_QWORD *)(*(_QWORD *)a2 + 14 * v9);
      v11 = *(_QWORD *)v13;
      v12 = *(_QWORD *)&v13[6];
    }
    *(_QWORD *)((char *)v10 + 6) = v12;
    *v10 = v11;
    ++*(_DWORD *)(a2 + 12);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::fillSpeculateDouble(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  int v16;
  char v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  int v41;
  __int128 *v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  JSC::DFG::Graph *v65;
  JSC::DFG::Node *v66;
  const char *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  unint64_t v80;

  v80 = a2;
  v8 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v9 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v10 = ~(_DWORD)v9;
  if (v10 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197CA5444);
  }
  v12 = *(_QWORD *)(a1 + 3992);
  v13 = v12 + 24 * (int)v10;
  v16 = *(unsigned __int8 *)(v13 + 12);
  v15 = (_BYTE *)(v13 + 12);
  v14 = v16;
  if (v16 == 4)
  {
    v17 = *(_BYTE *)(v12 + 24 * (int)v10 + 17);
    v18 = a1 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v17];
    ++*(_DWORD *)(v18 + 4976);
    return v17;
  }
  if (v14)
  {
    JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x5AB, "FPRReg JSC::DFG::SpeculativeJIT::fillSpeculateDouble(Edge)", "info.registerFormat() == DataFormatDouble");
    __break(0xC471u);
    goto LABEL_76;
  }
  v20 = *(unsigned __int16 *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x12);
  if (v20 > 0xB5)
  {
    if (v20 == 182 || v20 == 355 || v20 == 348)
      goto LABEL_8;
    goto LABEL_20;
  }
  if (v20 >= 3)
  {
LABEL_20:
    v29 = *(unsigned __int8 *)(v12 + 24 * (int)v10 + 13);
    if (v29 == 4)
    {
      v30 = 0;
      v31 = a1 + 4968;
      v32 = (_DWORD *)(a1 + 4976);
      v33 = 0x17u;
      v34 = -1;
      while (1)
      {
        if (!*v32)
        {
          v35 = *(v32 - 1);
          if (v35 == -1)
          {
            v37 = *(v32 - 2);
            *((_QWORD *)v32 - 1) = 0xFFFFFFFF3FFFFFFFLL;
            goto LABEL_29;
          }
          if (v35 < v34)
          {
            v33 = v30;
            v34 = *(v32 - 1);
          }
        }
        ++v30;
        v32 += 3;
        if (v30 == 23)
        {
          v30 = v33;
          v36 = (unsigned int *)(v31 + 12 * v33);
          v37 = *v36;
          *(_QWORD *)v36 = 0xFFFFFFFF3FFFFFFFLL;
          v32 = v36 + 2;
LABEL_29:
          *v32 = 1;
          v38 = JSC::FPRInfo::toRegister::registerForIndex[v30];
          v17 = JSC::FPRInfo::toRegister::registerForIndex[v30];
          if (v37 != 0x3FFFFFFF)
            JSC::DFG::SpeculativeJIT::spill(a1, v37, a3, a4, a5, a6, a7, a8);
          JSC::MacroAssemblerARM64::loadDouble(a1, (v9 << 35) | 0x1D, v17, a4, a5, a6, a7, a8);
          v39 = (_DWORD *)(v31 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v38]);
          goto LABEL_32;
        }
      }
    }
    v65 = *(JSC::DFG::Graph **)(a1 + 3960);
    v66 = *(JSC::DFG::Node **)(a1 + 3976);
    v78 = (const char *)JSC::dataFormatToString(v29);
    WTF::toCString<char [10],JSC::DFG::Edge,char [53],char const*>(&v79, (JSC::DFG::Edge *)&v80, &v78);
    if (v79)
      v67 = (const char *)(v79 + 16);
    else
      v67 = 0;
    JSC::DFG::Graph::logAssertionFailure(v65, v66, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x5A1, "FPRReg JSC::DFG::SpeculativeJIT::fillSpeculateDouble(Edge)", v67);
    WTF::CString::~CString((WTF::CString *)&v79, v68, v69, v70, v71, v72, v73, v74);
    __break(0xC471u);
LABEL_76:
    JUMPOUT(0x197CA53BCLL);
  }
LABEL_8:
  if (v20 > 2 || !(**(_QWORD **)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x48) >> 49))
  {
    v56 = (a2 >> 50) & 0x3F;
    if ((_DWORD)v56 && (v56 > 0x34 || ((1 << v56) & 0x12400001800284) == 0))
      JSC::DFG::SpeculativeJIT::terminateSpeculativeExecution(a1, 0x16uLL, 255, 0, a5, a6, a7, a8);
    v57 = 0;
    v58 = (_DWORD *)(a1 + 4976);
    v59 = 0x17u;
    v60 = -1;
    while (1)
    {
      if (!*v58)
      {
        v61 = *(v58 - 1);
        if (v61 == -1)
        {
          v63 = *(v58 - 2);
          *((_QWORD *)v58 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_60:
          *v58 = 1;
          v17 = JSC::FPRInfo::toRegister::registerForIndex[v57];
          if (v63 != 0x3FFFFFFF)
            JSC::DFG::SpeculativeJIT::spill(a1, v63, a3, a4, a5, a6, a7, a8);
          return v17;
        }
        if (v61 < v60)
        {
          v59 = v57;
          v60 = *(v58 - 1);
        }
      }
      ++v57;
      v58 += 3;
      if (v57 == 23)
      {
        v57 = v59;
        v62 = (unsigned int *)(a1 + 4968 + 12 * v59);
        v63 = *v62;
        *(_QWORD *)v62 = 0xFFFFFFFF3FFFFFFFLL;
        v58 = v62 + 2;
        goto LABEL_60;
      }
    }
  }
  v21 = 0;
  v22 = a1 + 4968;
  v23 = (_DWORD *)(a1 + 4976);
  v24 = 0x17u;
  v25 = -1;
  while (*v23)
  {
LABEL_15:
    ++v21;
    v23 += 3;
    if (v21 == 23)
    {
      v21 = v24;
      v27 = (unsigned int *)(v22 + 12 * v24);
      v28 = *v27;
      *(_QWORD *)v27 = 0xFFFFFFFF3FFFFFFFLL;
      v23 = v27 + 2;
      goto LABEL_35;
    }
  }
  v26 = *(v23 - 1);
  if (v26 != -1)
  {
    if (v26 < v25)
    {
      v24 = v21;
      v25 = *(v23 - 1);
    }
    goto LABEL_15;
  }
  v28 = *(v23 - 2);
  *((_QWORD *)v23 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_35:
  *v23 = 1;
  v41 = JSC::FPRInfo::toRegister::registerForIndex[v21];
  if (v28 != 0x3FFFFFFF)
  {
    v76 = a1 + 4968;
    JSC::DFG::SpeculativeJIT::spill(a1, v28, a3, a4, a5, a6, a7, a8);
    v22 = v76;
    v20 = *(unsigned __int16 *)(v8 + 18);
  }
  v17 = v41;
  if (v20 == 355 || v20 == 348)
  {
    v42 = &JSC::DFG::FrozenValue::emptySingleton(void)::empty;
    {
      JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
      LODWORD(qword_1EE342DB8) = 0;
    }
  }
  else
  {
    v42 = *(__int128 **)(v8 + 72);
  }
  v43 = v41;
  v44 = *(_QWORD *)v42;
  if (v44 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v45 = v44 - 0x2000000000000;
  else
    v45 = (double)(int)v44;
  if (v45 == 0.0)
  {
    v64 = *(_DWORD *)(a1 + 200);
    if (v64 + 4 > *(_DWORD *)(a1 + 192))
    {
      v75 = v22;
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
      v43 = v41;
      v22 = v75;
      v64 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v64) = v41 | 0x6F00E400;
    *(_DWORD *)(a1 + 200) += 4;
  }
  else
  {
    v77 = v22;
    v46 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
    v47 = v46;
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, *(uint64_t *)&v45, v46, v48, v49, v50, v51, v52);
    v54 = *(_DWORD *)(a1 + 200);
    if (v54 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v53, a3, a4, a5, a6, a7, a8);
      v54 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v54) = v41 | (32 * (v47 & 0x1F)) | 0x9E670000;
    *(_DWORD *)(a1 + 200) += 4;
    if (v47 > 15)
      v55 = -1;
    else
      v55 = v47;
    --*(_DWORD *)(a1 + 12 * v55 + 4784);
    v43 = v41;
    v22 = v77;
  }
  v39 = (_DWORD *)(v22 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v43]);
LABEL_32:
  *v39 = v9;
  v39[1] = 6;
  *v15 = 4;
  v40 = v12 + 24 * (int)v10;
  *(_BYTE *)(v40 + 17) = v17;
  if (*(_BYTE *)(v40 + 15))
    JSC::DFG::GenerationInfo::appendFill(v12 + 24 * (int)v10, a1 + 5632, a3, a4, a5, a6, a7, a8);
  return v17;
}

void WTF::toCString<char [10],JSC::DFG::Edge,char [53],char const*>(uint64_t *a1, JSC::DFG::Edge *a2, const char **a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (**v18)(WTF::StringPrintStream *__hidden);
  _BYTE *v19;
  __int128 v20;
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = off_1E3572250;
  v19 = v21;
  v20 = xmmword_199122F80;
  v21[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", "Expected ");
  JSC::DFG::Edge::dump(a2, (WTF::PrintStream *)&v18);
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", " to have double format but instead it is spilled as ");
  WTF::PrintStream::printf((WTF::PrintStream *)&v18, "%s", *a3);
  v18[5]((WTF::StringPrintStream *)&v18);
  v14 = v19;
  v13 = v20;
  *a1 = 0;
  if (!v14)
  {
    v17 = 0;
LABEL_7:
    WTF::fastFree(v17, v6, v7, v8, v9, v10, v11, v12);
    return;
  }
  if (v13 >= 0xFFFFFFFFFFFFFFF0)
  {
    __break(0xC471u);
    JUMPOUT(0x197CA55D4);
  }
  if (v13 == -17)
  {
    __break(0xC471u);
    JUMPOUT(0x197CA55DCLL);
  }
  v15 = WTF::fastMalloc((WTF *)(v13 + 17));
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = v13;
  *a1 = v15;
  v16 = v15 + 16;
  memcpy((void *)(v15 + 16), v14, v13);
  *(_BYTE *)(v16 + v13) = 0;
  v17 = (unint64_t)v19;
  if (v19 != v21)
    goto LABEL_7;
}

uint64_t JSC::dataFormatToString(unsigned int a1)
{
  uint64_t result;

  if (a1 < 0x22 && ((0x2017301EFuLL >> a1) & 1) != 0)
    return (uint64_t)off_1E3575328[(char)a1];
  result = 98;
  __break(0xC471u);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::fillSpeculateCell(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  JSC::DFG::AbstractValue *v16;
  unsigned int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t result;
  uint64_t v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _BYTE v84[14];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 5504);
  v11 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v12 = (uint64_t *)(v10 + 24);
  v13 = (uint64_t *)(v10 + 8);
  if ((a2 & 1) != 0)
    v13 = v12;
  v14 = *v13;
  v15 = *v13 + 32 * v11;
  v16 = (JSC::DFG::AbstractValue *)v15;
  v17 = *(_DWORD *)(a1 + 5584);
  v18 = *(_DWORD *)(v15 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v68 = *(_QWORD *)v15;
        if (*(_QWORD *)v15 != 4)
        {
          *(_QWORD *)v15 = v68 | 2;
          v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v68 & 1) != 0)
          {
            v75 = 2 * *v69;
            while (v75 * 4)
            {
              v76 = *(_QWORD *)&v69[v75];
              if ((*(_BYTE *)(v76 + 19) & 0xC) == 0)
              {
                v77 = *(_QWORD *)(v76 + 96);
                v78 = (v77 & 1) != 0 ? (v77 >> 1) & 3 : *(unsigned __int8 *)(v77 + 4);
                v75 -= 2;
                if (v78 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v69, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_67;
            }
          }
          else if (v69)
          {
            if ((*((_BYTE *)v69 + 19) & 0xC) != 0
              || ((v70 = *((_QWORD *)v69 + 12), (v70 & 1) != 0)
                ? (v71 = (v70 >> 1) & 3)
                : (v71 = *(unsigned __int8 *)(v70 + 4)),
                  v71 == 2))
            {
LABEL_67:
              *(_QWORD *)v15 = 4;
            }
          }
        }
        *(_DWORD *)(v14 + 32 * v11 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v15 &= ~2uLL;
    }
    *(_DWORD *)(v15 + 20) = v17;
  }
  v21 = *(_QWORD *)(v15 + 8);
  v19 = (uint64_t *)(v15 + 8);
  v20 = v21;
  v22 = v21 & 0x2C00FFFFFFF7;
  v23 = v21;
  if ((v21 & 0x2C00FFFFFFF7) != v21)
  {
    if ((v20 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow(v16, 0x2C00FFFFFFF7uLL, a3, a4, a5, a6, a7, a8))
      {
LABEL_38:
        v23 = *v19;
        goto LABEL_5;
      }
    }
    else
    {
      *v19 = v22;
      if (v22)
        goto LABEL_6;
      JSC::DFG::AbstractValue::clear(v16, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 5616) + 80) = 0;
    goto LABEL_38;
  }
LABEL_5:
  if (!v23)
  {
    v79 = (a2 >> 50) & 0x3F;
    if ((_DWORD)v79 && (v79 > 0x34 || ((1 << v79) & 0x12400001800284) == 0))
      JSC::DFG::SpeculativeJIT::terminateSpeculativeExecution(a1, 0x16uLL, 255, 0, a5, a6, a7, a8);
    return JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
  }
LABEL_6:
  v24 = a2 & 0xFF00FFFFFFFFFFFFLL;
  v25 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v26 = ~(_DWORD)v25;
  if (v26 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197CA5E58);
  }
  v27 = *(_QWORD *)(a1 + 3992);
  v28 = (_BYTE *)(v27 + 24 * (int)v26);
  v29 = v28 + 12;
  switch(v28[12])
  {
    case 0:
      v46 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
      v30 = v46;
      v52 = *(unsigned __int16 *)(v24 + 18);
      if (v52 > 0xB5)
      {
        if (v52 == 182)
          goto LABEL_29;
        if (v52 == 355 || v52 == 348)
        {
          v53 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
          {
            JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
            LODWORD(qword_1EE342DB8) = 0;
          }
LABEL_30:
          v54 = *v53;
          if ((int)v46 > 15)
            v55 = -1;
          else
            v55 = v46;
          v56 = a1 + 12 * v55;
          *(_DWORD *)(v56 + 4776) = v25;
          *(_DWORD *)(v56 + 4780) = 1;
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v54, v46, v47, v48, v49, v50, v51);
          *v29 = 22;
          v57 = v27 + 24 * (int)v26;
          *(_BYTE *)(v57 + 17) = v30;
          if (*(_BYTE *)(v57 + 15))
          {
            v58 = *(_DWORD *)(*(_QWORD *)v28 + 20);
            if (v58 >= 0xFFFFFFFE)
            {
              __break(0xC471u);
              JUMPOUT(0x197CA5D50);
            }
            v39 = (uint64_t *)(a1 + 5632);
            *(_WORD *)&v84[12] = 5636;
            *(_DWORD *)v84 = v58;
            v40 = v30 | 0x3FFFFF00;
LABEL_21:
            *(_QWORD *)&v84[4] = v40;
            v41 = *(unsigned int *)(a1 + 5644);
            if ((_DWORD)v41 != *(_DWORD *)(a1 + 5640))
            {
              v42 = *v39;
LABEL_23:
              v43 = (_QWORD *)(v42 + 14 * v41);
              v44 = *(_QWORD *)v84;
              v45 = *(_QWORD *)&v84[6];
LABEL_24:
              *(_QWORD *)((char *)v43 + 6) = v45;
              *v43 = v44;
              ++*(_DWORD *)(a1 + 5644);
              goto LABEL_12;
            }
            v72 = v41 + 1;
            goto LABEL_69;
          }
          goto LABEL_12;
        }
      }
      else if (v52 < 3)
      {
LABEL_29:
        v53 = *(uint64_t **)(v24 + 72);
        goto LABEL_30;
      }
      if ((int)v46 > 15)
        v59 = -1;
      else
        v59 = v46;
      v60 = a1 + 12 * v59;
      *(_DWORD *)(v60 + 4776) = v25;
      *(_DWORD *)(v60 + 4780) = 2;
      JSC::MacroAssemblerARM64::load64(a1, (v25 << 35) | 0x1D, v46, v47, v48, v49, v50, v51);
      v61 = (uint64_t *)(a1 + 5632);
      *v29 = 16;
      v62 = v27 + 24 * (int)v26;
      *(_BYTE *)(v62 + 17) = v30;
      v63 = (_BYTE *)(v62 + 17);
      if (*(v63 - 2))
      {
        if (*(_DWORD *)(*(_QWORD *)v28 + 20) >= 0xFFFFFFFE)
        {
          __break(0xC471u);
          JUMPOUT(0x197CA5D10);
        }
        *(_DWORD *)v84 = *(_DWORD *)(*(_QWORD *)v28 + 20);
        *(_QWORD *)&v84[4] = v30 | 0x3FFFFF00;
        *(_WORD *)&v84[12] = 4100;
        v64 = *(unsigned int *)(a1 + 5644);
        if ((_DWORD)v64 == *(_DWORD *)(a1 + 5640))
        {
          v74 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 5632, v64 + 1, (unint64_t)v84, a4, a5, a6, a7, a8);
          v65 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
          v66 = *v74;
          v67 = *(uint64_t *)((char *)v74 + 6);
        }
        else
        {
          v65 = (_QWORD *)(*v61 + 14 * v64);
          v66 = *(_QWORD *)v84;
          v67 = *(_QWORD *)&v84[6];
        }
        *(_QWORD *)((char *)v65 + 6) = v67;
        *v65 = v66;
        ++*(_DWORD *)(a1 + 5644);
      }
      if ((v20 & 0xFFFFD3FF00000008) != 0)
      {
        JSC::AssemblyHelpers::branchIfNotCell(a1, v30, 1, a4, a5, a6, a7, a8, (uint64_t)&v82);
        *(_DWORD *)v84 = v82;
        *(_QWORD *)&v84[4] = v83;
        JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)(((unint64_t)v30 << 32) | 0x80000000), (JSC::DFG::Node *)v24, (int *)v84);
      }
      *v29 = 22;
      *v63 = v30;
      if (*(v63 - 2))
      {
        if (*(_DWORD *)(*(_QWORD *)v28 + 20) >= 0xFFFFFFFE)
        {
          __break(0xC471u);
          JUMPOUT(0x197CA5D30);
        }
        *(_DWORD *)v84 = *(_DWORD *)(*(_QWORD *)v28 + 20);
        *(_QWORD *)&v84[4] = v30 | 0x3FFFFF00;
        *(_WORD *)&v84[12] = 5636;
        v41 = *(unsigned int *)(a1 + 5644);
        if ((_DWORD)v41 != *(_DWORD *)(a1 + 5640))
        {
          v42 = *v61;
          goto LABEL_23;
        }
        v72 = v41 + 1;
        v39 = (uint64_t *)(a1 + 5632);
LABEL_69:
        v73 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v39, v72, (unint64_t)v84, a4, a5, a6, a7, a8);
        v43 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
        v44 = *v73;
        v45 = *(uint64_t *)((char *)v73 + 6);
        goto LABEL_24;
      }
LABEL_12:
      result = v30;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 0x11:
    case 0x14:
    case 0x15:
    case 0x18:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x5F9, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateCell(Edge)", "Bad data format");
      __break(0xC471u);
      JUMPOUT(0x197CA5DDCLL);
    case 6:
    case 0x16:
      v30 = *(char *)(v27 + 24 * (int)v26 + 17);
      if ((int)v30 > 15)
        v31 = -1;
      else
        v31 = *(char *)(v27 + 24 * (int)v26 + 17);
      ++*(_DWORD *)(a1 + 12 * v31 + 4784);
      goto LABEL_12;
    case 0x10:
      v33 = v27 + 24 * (int)v26;
      v35 = *(char *)(v33 + 17);
      v34 = (_BYTE *)(v33 + 17);
      v30 = v35;
      v36 = v35;
      if (v35 > 15)
        v37 = -1;
      else
        v37 = v30;
      ++*(_DWORD *)(a1 + 12 * v37 + 4784);
      if ((v20 & 0xFFFFD3FF00000008) != 0)
      {
        JSC::AssemblyHelpers::branchIfNotCell(a1, v36, 1, a4, a5, a6, a7, a8, (uint64_t)&v80);
        *(_DWORD *)v84 = v80;
        *(_QWORD *)&v84[4] = v81;
        JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)((v36 << 32) | 0x80000000), (JSC::DFG::Node *)v24, (int *)v84);
      }
      *v29 = 22;
      *v34 = v30;
      if (!*(_BYTE *)(v27 + 24 * (int)v26 + 15))
        goto LABEL_12;
      v38 = *(_DWORD *)(*(_QWORD *)v28 + 20);
      if (v38 >= 0xFFFFFFFE)
      {
        __break(0xC471u);
        JUMPOUT(0x197CA5CACLL);
      }
      v39 = (uint64_t *)(a1 + 5632);
      *(_WORD *)&v84[12] = 5636;
      *(_DWORD *)v84 = v38;
      v40 = v36 | 0x3FFFFF00;
      goto LABEL_21;
    default:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x5FC, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateCell(Edge)", "Corrupt data format");
      __break(0xC471u);
      JUMPOUT(0x197CA5E28);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  JSC::DFG::AbstractValue *v16;
  unsigned int v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int8x8_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int8x8_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t *v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  _BYTE v107[14];
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a1 + 5504);
  v11 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v12 = (uint64_t *)(v10 + 24);
  v13 = (uint64_t *)(v10 + 8);
  if ((a2 & 1) != 0)
    v13 = v12;
  v14 = *v13;
  v15 = *v13 + 32 * v11;
  v16 = (JSC::DFG::AbstractValue *)v15;
  v17 = *(_DWORD *)(a1 + 5584);
  v18 = *(_DWORD *)(v15 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v15 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v90 = *(_QWORD *)v15;
        if (*(_QWORD *)v15 != 4)
        {
          *(_QWORD *)v15 = v90 | 2;
          v91 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v90 & 1) != 0)
          {
            v97 = 2 * *v91;
            while (v97 * 4)
            {
              v98 = *(_QWORD *)&v91[v97];
              if ((*(_BYTE *)(v98 + 19) & 0xC) == 0)
              {
                v99 = *(_QWORD *)(v98 + 96);
                v100 = (v99 & 1) != 0 ? (v99 >> 1) & 3 : *(unsigned __int8 *)(v99 + 4);
                v97 -= 2;
                if (v100 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v91, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_69;
            }
          }
          else if (v91)
          {
            if ((*((_BYTE *)v91 + 19) & 0xC) != 0
              || ((v92 = *((_QWORD *)v91 + 12), (v92 & 1) != 0)
                ? (v93 = (v92 >> 1) & 3)
                : (v93 = *(unsigned __int8 *)(v92 + 4)),
                  v93 == 2))
            {
LABEL_69:
              *(_QWORD *)v15 = 4;
            }
          }
        }
        *(_DWORD *)(v14 + 32 * v11 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v15 &= ~2uLL;
    }
    *(_DWORD *)(v15 + 20) = v17;
  }
  v21 = *(_QWORD *)(v15 + 8);
  v19 = (uint64_t *)(v15 + 8);
  v20 = v21;
  v22 = v21 & 0x10000000000;
  v23 = v21;
  if ((v21 & 0x10000000000) != v21)
  {
    if ((v20 & 0x2800FFFFFFF7) != 0)
    {
      if (!JSC::DFG::AbstractValue::filterSlow(v16, 0x10000000000uLL, a3, a4, a5, a6, a7, a8))
      {
LABEL_57:
        v23 = *v19;
        goto LABEL_5;
      }
    }
    else
    {
      *v19 = v22;
      if (v22)
      {
LABEL_6:
        v24 = a2 & 0xFF00FFFFFFFFFFFFLL;
        v25 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        v26 = ~(_DWORD)v25;
        if (v26 >= *(unsigned int *)(a1 + 4004))
        {
          __break(0xC471u);
          JUMPOUT(0x197CA6758);
        }
        v27 = *(_QWORD *)(a1 + 3992);
        v28 = (_BYTE *)(v27 + 24 * (int)v26);
        v29 = v28 + 12;
        if (v28[12] == 21)
        {
LABEL_8:
          v30 = *(char *)(v27 + 24 * (int)v26 + 17);
          if ((int)v30 > 15)
            v31 = -1;
          else
            v31 = *(char *)(v27 + 24 * (int)v26 + 17);
          ++*(_DWORD *)(a1 + 12 * v31 + 4784);
          return v30;
        }
        switch(v28[12])
        {
          case 0:
            v33 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
            v30 = v33;
            v39 = *(unsigned __int16 *)(v24 + 18);
            if (v39 > 0xB5)
            {
              if (v39 == 182)
                goto LABEL_16;
              if (v39 == 355 || v39 == 348)
              {
                v40 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
                {
                  JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
                  LODWORD(qword_1EE342DB8) = 0;
                }
                goto LABEL_17;
              }
            }
            else if (v39 < 3)
            {
LABEL_16:
              v40 = *(uint64_t **)(v24 + 72);
LABEL_17:
              v41 = *v40;
              if ((int)v33 > 15)
                v42 = -1;
              else
                v42 = v33;
              v43 = a1 + 12 * v42;
              *(_DWORD *)(v43 + 4776) = v25;
              *(_DWORD *)(v43 + 4780) = 1;
              JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v41, v33, v34, v35, v36, v37, v38);
              *v29 = 21;
              v44 = v27 + 24 * (int)v26;
              *(_BYTE *)(v44 + 17) = v30;
              if (!*(_BYTE *)(v44 + 15))
                return v30;
              v45 = *(_DWORD *)(*(_QWORD *)v28 + 20);
              if (v45 >= 0xFFFFFFFE)
              {
                __break(0xC471u);
                JUMPOUT(0x197CA6654);
              }
              v46 = (uint64_t *)(a1 + 5632);
              *(_WORD *)&v107[12] = 5380;
              *(_DWORD *)v107 = v45;
              v47 = v30 | 0x3FFFFF00;
LABEL_33:
              *(_QWORD *)&v107[4] = v47;
              v65 = *(unsigned int *)(a1 + 5644);
              if ((_DWORD)v65 != *(_DWORD *)(a1 + 5640))
              {
                v66 = *v46;
LABEL_53:
                v87 = (_QWORD *)(v66 + 14 * v65);
                v88 = *(_QWORD *)v107;
                v89 = *(_QWORD *)&v107[6];
LABEL_54:
                *(_QWORD *)((char *)v87 + 6) = v89;
                *v87 = v88;
                ++*(_DWORD *)(a1 + 5644);
                return v30;
              }
              v95 = v65 + 1;
              goto LABEL_72;
            }
            if ((*(_BYTE *)(v27 + 24 * (int)v26 + 13) & 0x10) == 0)
            {
              JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x61C, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(Edge)", "info.spillFormat() & DataFormatJS");
              __break(0xC471u);
              JUMPOUT(0x197CA678CLL);
            }
            if ((int)v33 > 15)
              v67 = -1;
            else
              v67 = v33;
            v68 = a1 + 12 * v67;
            *(_DWORD *)(v68 + 4776) = v25;
            *(_DWORD *)(v68 + 4780) = 2;
            JSC::MacroAssemblerARM64::load64(a1, (v25 << 35) | 0x1D, v33, v34, v35, v36, v37, v38);
            v69 = (uint64_t *)(a1 + 5632);
            *v29 = 16;
            v70 = v27 + 24 * (int)v26;
            *(_BYTE *)(v70 + 17) = v30;
            v71 = (_BYTE *)(v70 + 17);
            if (*(v71 - 2))
            {
              if (*(_DWORD *)(*(_QWORD *)v28 + 20) >= 0xFFFFFFFE)
              {
                __break(0xC471u);
                JUMPOUT(0x197CA65F4);
              }
              *(_DWORD *)v107 = *(_DWORD *)(*(_QWORD *)v28 + 20);
              *(_QWORD *)&v107[4] = v30 | 0x3FFFFF00;
              *(_WORD *)&v107[12] = 4100;
              v72 = *(unsigned int *)(a1 + 5644);
              if ((_DWORD)v72 == *(_DWORD *)(a1 + 5640))
              {
                v94 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 5632, v72 + 1, (unint64_t)v107, a4, a5, a6, a7, a8);
                v73 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
                v74 = *v94;
                v75 = *(uint64_t *)((char *)v94 + 6);
              }
              else
              {
                v73 = (_QWORD *)(*v69 + 14 * v72);
                v74 = *(_QWORD *)v107;
                v75 = *(_QWORD *)&v107[6];
              }
              *(_QWORD *)((char *)v73 + 6) = v75;
              *v73 = v74;
              ++*(_DWORD *)(a1 + 5644);
            }
            if ((v20 & 0xFFFFFEFFFFFFFFFFLL) != 0)
            {
              JSC::MacroAssemblerARM64::xor64(a1, 6, v30, v30, a5, a6, a7, a8);
              JSC::MacroAssemblerARM64::branchTest64(a1, 1, v30, 4294967294, v76, v77, v78, v79, (uint64_t)&v105, v80);
              LOBYTE(v104) = -1;
              BYTE4(v104) = v30;
              BYTE5(v104) = 3;
              *(_DWORD *)v107 = v105;
              *(_QWORD *)&v107[4] = v106;
              JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)(((unint64_t)v30 << 32) | 0x80000000), (JSC::DFG::Node *)v24, (uint64_t)v107, &v104, v81, v82);
              JSC::MacroAssemblerARM64::xor64(a1, 6, v30, v30, v83, v84, v85, v86);
            }
            *v29 = 21;
            *v71 = v30;
            if (!*(v71 - 2))
              return v30;
            if (*(_DWORD *)(*(_QWORD *)v28 + 20) >= 0xFFFFFFFE)
            {
              __break(0xC471u);
              JUMPOUT(0x197CA6614);
            }
            *(_DWORD *)v107 = *(_DWORD *)(*(_QWORD *)v28 + 20);
            *(_QWORD *)&v107[4] = v30 | 0x3FFFFF00;
            *(_WORD *)&v107[12] = 5380;
            v65 = *(unsigned int *)(a1 + 5644);
            if ((_DWORD)v65 != *(_DWORD *)(a1 + 5640))
            {
              v66 = *v69;
              goto LABEL_53;
            }
            v95 = v65 + 1;
            v46 = (uint64_t *)(a1 + 5632);
LABEL_72:
            v96 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v95, (unint64_t)v107, a4, a5, a6, a7, a8);
            v87 = (_QWORD *)(*(_QWORD *)(a1 + 5632) + 14 * *(unsigned int *)(a1 + 5644));
            v88 = *v96;
            v89 = *(uint64_t *)((char *)v96 + 6);
            goto LABEL_54;
          case 1:
          case 2:
          case 3:
          case 4:
          case 6:
          case 7:
          case 8:
          case 0x11:
          case 0x14:
          case 0x16:
          case 0x18:
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x648, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(Edge)", "Bad data format");
            __break(0xC471u);
            JUMPOUT(0x197CA65D4);
          case 5:
            goto LABEL_8;
          case 0x10:
            v48 = v27 + 24 * (int)v26;
            v50 = *(char *)(v48 + 17);
            v49 = (_BYTE *)(v48 + 17);
            v30 = v50;
            v51 = v50;
            if (v50 > 15)
              v52 = -1;
            else
              v52 = v30;
            ++*(_DWORD *)(a1 + 12 * v52 + 4784);
            if ((v20 & 0xFFFFFEFFFFFFFFFFLL) != 0)
            {
              JSC::MacroAssemblerARM64::xor64(a1, 6, v30, v30, a5, a6, a7, a8);
              JSC::MacroAssemblerARM64::branchTest64(a1, 1, v30, 4294967294, v53, v54, v55, v56, (uint64_t)&v102, v57);
              LOBYTE(v104) = -1;
              BYTE4(v104) = v30;
              BYTE5(v104) = 3;
              *(_DWORD *)v107 = v102;
              *(_QWORD *)&v107[4] = v103;
              JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)((v51 << 32) | 0x80000000), (JSC::DFG::Node *)v24, (uint64_t)v107, &v104, v58, v59);
              JSC::MacroAssemblerARM64::xor64(a1, 6, v30, v30, v60, v61, v62, v63);
            }
            *v29 = 21;
            *v49 = v30;
            if (!*(_BYTE *)(v27 + 24 * (int)v26 + 15))
              return v30;
            v64 = *(_DWORD *)(*(_QWORD *)v28 + 20);
            if (v64 >= 0xFFFFFFFE)
            {
              __break(0xC471u);
              JUMPOUT(0x197CA6634);
            }
            v46 = (uint64_t *)(a1 + 5632);
            *(_WORD *)&v107[12] = 5380;
            *(_DWORD *)v107 = v64;
            v47 = v51 | 0x3FFFFF00;
            goto LABEL_33;
          default:
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x64B, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(Edge)", "Corrupt data format");
            __break(0xC471u);
            JUMPOUT(0x197CA66E0);
        }
      }
      JSC::DFG::AbstractValue::clear(v16, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 5616) + 80) = 0;
    goto LABEL_57;
  }
LABEL_5:
  if (v23)
    goto LABEL_6;
  v101 = (a2 >> 50) & 0x3F;
  if ((_DWORD)v101 && (v101 > 0x34 || ((1 << v101) & 0x12400001800284) == 0))
    JSC::DFG::SpeculativeJIT::terminateSpeculativeExecution(a1, 0x16uLL, 255, 0, a5, a6, a7, a8);
  return JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t *JSC::DFG::SpeculativeJIT::compileObjectStrictEquality(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  JSC::DFG::Node *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *result;
  unsigned int v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[12];
  uint64_t v79;
  unsigned __int8 v80;
  _QWORD v81[2];
  char v82;
  _QWORD v83[2];
  char v84;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v83, (JSC::DFG::SpeculativeJIT *)a1, a2, a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v81, (JSC::DFG::SpeculativeJIT *)a1, a3, v11, v12, v13, v14, v15);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v79, (JSC::DFG::SpeculativeJIT *)a1, v16, v17, v18, v19, v20, v21);
  v29 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v83, v22, v23, v24, v25, v26, v27, v28);
  v43 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v81, v30, v31, v32, v33, v34, v35, v36);
  v44 = v80;
  v45 = *(_QWORD *)(a1 + 5616);
  v46 = *(_QWORD *)(v45 + 8);
  v47 = (_QWORD *)(v46 + 24);
  v48 = (_QWORD *)(v46 + 8);
  if ((a2 & 1) != 0)
    v48 = v47;
  v49 = *v48 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v50 = *(unsigned int *)(v45 + 88);
  if ((_DWORD)v50 != *(_DWORD *)(v49 + 20))
  {
    if ((*(_QWORD *)(v49 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v49, (void *)v50, v37, v38, v39, v40, v41, v42);
    else
      *(_DWORD *)(v49 + 20) = v50;
  }
  if ((*(_QWORD *)(v49 + 8) & 0xFFFFDFFFF0000008) != 0)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      goto LABEL_37;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, v29 | 0x500000000, *(char *)(a1 + 304), v38, v39, v40, v41, v42);
    JSC::MacroAssemblerARM64::branch32(a1, 3, 17, 23, v72, v73, v74, v75, (uint64_t)v78);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v29 << 32) | 0x80000000), a2, 0x20000FFFFFF7uLL, (uint64_t)v78, 1uLL, v76, v77);
  }
  v51 = (v43 & 0x1F) << 16;
  if (v29 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v51 | 0xEB2063FF, v37, v38, v39, v40, v41, v42);
    v54 = *(_DWORD *)(a1 + 200);
  }
  else
  {
    v52 = v51 | (32 * (v29 & 0x1F)) | 0xEB00001F;
    v53 = *(_DWORD *)(a1 + 200);
    if (v53 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v50, v37, v38, v39, v40, v41, v42);
      v53 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v53) = v52;
    v54 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v54;
  }
  if (v54 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v50, v37, v38, v39, v40, v41, v42);
    v54 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v54) = v44 | 0x1A9F17E0;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v44, (char)v44);
  v55 = *(JSC::DFG::Node **)(a1 + 3976);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, v55, v56, v57, v58, v59, v60, v61);
  if ((char)v44 > 15)
    v63 = -1;
  else
    v63 = (char)v44;
  v64 = a1 + 12 * v63;
  v65 = *((_DWORD *)v55 + 12);
  *(_DWORD *)(v64 + 4776) = v65;
  *(_DWORD *)(v64 + 4780) = 4;
  v66 = ~v65;
  if (v66 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x197CA6B4CLL);
  }
  v67 = *(_QWORD *)(a1 + 3992) + 24 * (int)v66;
  v68 = *((_DWORD *)v55 + 13);
  *(_QWORD *)v67 = v55;
  *(_DWORD *)(v67 + 8) = v68;
  *(_BYTE *)(v67 + 17) = v44;
  *(_DWORD *)(v67 + 12) = 21;
  *(_BYTE *)(v67 + 16) = 0;
  if (v79)
  {
    v69 = (char)v80;
    if ((char)v80 != -1)
    {
      if ((char)v80 > 15)
        v69 = -1;
      --*(_DWORD *)(v79 + 12 * v69 + 4784);
    }
  }
  if ((v81[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v70 = v82;
    if (v82 > 15)
      v70 = -1;
    --*(_DWORD *)(v81[0] + 12 * v70 + 4784);
  }
  if ((v83[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v71 = v84;
    if (v84 > 15)
      v71 = -1;
    --*(_DWORD *)(v83[0] + 12 * v71 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePeepHoleObjectStrictEquality(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  _BYTE v88[12];
  _QWORD v89[2];
  char v90;
  _QWORD v91[2];
  char v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;

  v11 = *(uint64_t **)(a4 + 72);
  v12 = *v11;
  v87 = v11[2];
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v91, (JSC::DFG::SpeculativeJIT *)a1, a2, a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v89, (JSC::DFG::SpeculativeJIT *)a1, a3, v13, v14, v15, v16, v17);
  v25 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v91, v18, v19, v20, v21, v22, v23, v24);
  v40 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v89, v26, v27, v28, v29, v30, v31, v32);
  v41 = *(_QWORD *)(a1 + 5616);
  v42 = *(_QWORD *)(v41 + 8);
  v43 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v44 = (uint64_t *)(v42 + 24);
  v45 = (uint64_t *)(v42 + 8);
  if ((a2 & 1) != 0)
    v45 = v44;
  v46 = *v45;
  v47 = *v45 + 32 * v43;
  v48 = *(_DWORD *)(v41 + 88);
  v49 = *(_DWORD *)(v47 + 20);
  if (v48 != v49)
  {
    if ((*(_QWORD *)(v47 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v49 ^ v48) >= 2)
      {
        v77 = *(_QWORD *)v47;
        if (*(_QWORD *)v47 != 4)
        {
          *(_QWORD *)v47 = v77 | 2;
          v80 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v77 & 1) != 0)
          {
            v83 = 2 * *v80;
            while (v83 * 4)
            {
              v84 = *(_QWORD *)&v80[v83];
              if ((*(_BYTE *)(v84 + 19) & 0xC) == 0)
              {
                v85 = *(_QWORD *)(v84 + 96);
                v86 = (v85 & 1) != 0 ? (v85 >> 1) & 3 : *(unsigned __int8 *)(v85 + 4);
                v83 -= 2;
                if (v86 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v80, v33, v34, v35, v36, v37, v38, v39);
              goto LABEL_42;
            }
          }
          else if (v80)
          {
            if ((*((_BYTE *)v80 + 19) & 0xC) != 0
              || ((v81 = *((_QWORD *)v80 + 12), (v81 & 1) != 0)
                ? (v82 = (v81 >> 1) & 3)
                : (v82 = *(unsigned __int8 *)(v81 + 4)),
                  v82 == 2))
            {
LABEL_42:
              *(_QWORD *)v47 = 4;
            }
          }
        }
        *(_DWORD *)(v46 + 32 * v43 + 16) = -21020677;
      }
      if ((v48 & 1) != 0)
        *(_QWORD *)v47 &= ~2uLL;
    }
    *(_DWORD *)(v47 + 20) = v48;
  }
  if ((*(_QWORD *)(v47 + 8) & 0xFFFFDFFFF0000008) != 0)
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      result = 6195;
      __break(0xC471u);
      return result;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, v25 | 0x500000000, *(char *)(a1 + 304), v35, v36, v37, v38, v39);
    JSC::MacroAssemblerARM64::branch32(a1, 3, 17, 23, v66, v67, v68, v69, (uint64_t)v88);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v25 << 32) | 0x80000000), a2, 0x20000FFFFFF7uLL, (uint64_t)v88, 1uLL, v70, v71);
  }
  v50 = *(_QWORD *)(a1 + 3960);
  v51 = *(_DWORD *)(*(_QWORD *)(a1 + 3968) + 8) + 1;
  while (v51 < *(_DWORD *)(v50 + 60))
  {
    v52 = *(_QWORD *)(*(_QWORD *)(v50 + 48) + 8 * v51++);
    if (v52)
      goto LABEL_8;
  }
  v52 = 0;
LABEL_8:
  v53 = (_QWORD *)(a1 + 5264);
  v54 = (char)v25;
  if (v12 == v52)
  {
    JSC::MacroAssemblerARM64::branch64(a1, 1, v54, v40, v36, v37, v38, v39, (uint64_t)&v93);
    v60 = v94;
    v95 = v93;
    v96 = v94;
    v97 = v87;
    v61 = *(unsigned int *)(a1 + 5276);
    if ((_DWORD)v61 == *(_DWORD *)(a1 + 5272))
    {
      v75 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 5264, (void *)(v61 + 1), (unint64_t)&v95, v55, v56, v57, v58, v59);
      v76 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
      *(_DWORD *)v76 = *(_DWORD *)v75;
      *(_QWORD *)(v76 + 4) = *(_QWORD *)(v75 + 4);
      *(_QWORD *)(v76 + 16) = *(_QWORD *)(v75 + 16);
    }
    else
    {
      v62 = *v53 + 24 * v61;
      *(_DWORD *)v62 = v93;
      *(_QWORD *)(v62 + 4) = v60;
      *(_QWORD *)(v62 + 16) = v87;
    }
    ++*(_DWORD *)(a1 + 5276);
  }
  else
  {
    JSC::MacroAssemblerARM64::branch64(a1, 0, v54, v40, v36, v37, v38, v39, (uint64_t)&v93);
    v72 = v94;
    v95 = v93;
    v96 = v94;
    v97 = v12;
    v73 = *(unsigned int *)(a1 + 5276);
    if ((_DWORD)v73 == *(_DWORD *)(a1 + 5272))
    {
      v78 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 5264, (void *)(v73 + 1), (unint64_t)&v95, v55, v56, v57, v58, v59);
      v79 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
      *(_DWORD *)v79 = *(_DWORD *)v78;
      *(_QWORD *)(v79 + 4) = *(_QWORD *)(v78 + 4);
      *(_QWORD *)(v79 + 16) = *(_QWORD *)(v78 + 16);
    }
    else
    {
      v74 = *v53 + 24 * v73;
      *(_DWORD *)v74 = v93;
      *(_QWORD *)(v74 + 4) = v72;
      *(_QWORD *)(v74 + 16) = v12;
    }
    ++*(_DWORD *)(a1 + 5276);
    v12 = v87;
  }
  result = JSC::DFG::SpeculativeJIT::jump(a1, v12, 0, v55, v56, v57, v58, v59);
  if ((v89[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v64 = v90;
    if (v90 > 15)
      v64 = -1;
    --*(_DWORD *)(v89[0] + 12 * v64 + 4784);
  }
  if ((v91[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v65 = v92;
    if (v92 > 15)
      v65 = -1;
    --*(_DWORD *)(v91[0] + 12 * v65 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileObjectToObjectOrOtherEquality(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t result;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE v143[12];
  int v144;
  uint64_t v145;
  _BYTE v146[12];
  _BYTE v147[12];
  unsigned int v148[3];
  int v149;
  uint64_t v150;
  _BYTE v151[12];
  _BYTE v152[12];
  uint64_t v153;
  char v154;
  _QWORD v155[2];
  char v156;
  _QWORD v157[2];
  char v158;
  int v159;
  int v160;
  uint64_t v161;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v157, (JSC::DFG::SpeculativeJIT *)a1, a2, a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v155, (JSC::DFG::SpeculativeJIT *)a1, a3, v11, v12, v13, v14, v15);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v153, (JSC::DFG::SpeculativeJIT *)a1, v16, v17, v18, v19, v20, v21);
  v29 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v157, v22, v23, v24, v25, v26, v27, v28);
  v37 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v155, v30, v31, v32, v33, v34, v35, v36);
  v38 = v154;
  if (JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), v39, v40, v41, v42, v43, v44))
  {
    if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a2, 0x20000FFFFFF7, v45, v46, v47, v48, v49))
    {
      JSC::AssemblyHelpers::branchIfNotObject(a1, v29, v50, v51, v52, v53, v54, (uint64_t)v152);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v29 << 32) | 0x80000000), a2, 0x20000FFFFFF7uLL, (uint64_t)v152, 1uLL, v55, v56);
    }
    v57 = v37;
    JSC::AssemblyHelpers::branchIfNotCell(a1, v37, 1, v50, v51, v52, v53, v54, (uint64_t)v148);
    if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a3, 0xFFFFF3FF0FFFFFFFLL, v58, v59, v60, v61, v62))
    {
      JSC::AssemblyHelpers::branchIfNotObject(a1, v37, v63, v64, v65, v66, v67, (uint64_t)v147);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v37 << 32) | 0x80000000), a3, 0xFFFFF3FF0FFFFFFFLL, (uint64_t)v147, 1uLL, v117, v118);
    }
  }
  else
  {
    if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a2, 0x20000FFFFFF7, v45, v46, v47, v48, v49))
    {
      JSC::AssemblyHelpers::branchIfNotObject(a1, v29, v119, v120, v121, v122, v123, (uint64_t)v151);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v29 << 32) | 0x80000000), a2, 0x20000FFFFFF7uLL, (uint64_t)v151, 1uLL, v124, v125);
    }
    JSC::MacroAssemblerARM64::branchTest8(a1, 1, v29 | 0x600000000, 1, v120, v121, v122, v123, (uint64_t)&v149);
    v160 = v149;
    v161 = v150;
    JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)(((unint64_t)v29 << 32) | 0x80000000), (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFFLL), &v160);
    v57 = v37;
    JSC::AssemblyHelpers::branchIfNotCell(a1, v37, 1, v126, v127, v128, v129, v130, (uint64_t)v148);
    if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a3, 0xFFFFF3FF0FFFFFFFLL, v131, v132, v133, v134, v135))
    {
      JSC::AssemblyHelpers::branchIfNotObject(a1, v37, v136, v137, v138, v139, v140, (uint64_t)v146);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v37 << 32) | 0x80000000), a3, 0xFFFFF3FF0FFFFFFFLL, (uint64_t)v146, 1uLL, v141, v142);
    }
    JSC::MacroAssemblerARM64::branchTest8(a1, 1, v37 | 0x600000000, 1, v137, v138, v139, v140, (uint64_t)&v144);
    v160 = v144;
    v161 = v145;
    JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)(((unint64_t)v37 << 32) | 0x80000000), (JSC::DFG::Node *)(a3 & 0xFF00FFFFFFFFFFFFLL), &v160);
  }
  JSC::MacroAssembler::comparePtr((_DWORD *)a1, 0, v29, v37, v38, v65, v66, v67);
  JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v68, v69, v70, v71, v72, v73, v74, &v159);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v75, v76, v77, v78, v79, v80);
  if (*(_BYTE *)(a1 + 328))
    v87 = 69;
  else
    v87 = 65;
  v160 = v159;
  LODWORD(v161) = 0;
  BYTE4(v161) = v87;
  *(_WORD *)((char *)&v161 + 5) = 15;
  HIBYTE(v161) = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v148, a1, v81, v82, v83, v84, v85, v86);
  if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a3, 0x2E00FFFFFFF7, v88, v89, v90, v91, v92))
  {
    JSC::MacroAssemblerARM64::move((_DWORD *)a1, v37, v38, v93, v94, v95, v96, v97);
    JSC::MacroAssemblerARM64::and64(a1, -9, v38, v38);
    JSC::MacroAssemblerARM64::branch64(a1, 1, v38, 2, v111, v112, v113, v114, (uint64_t)v143);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)((v57 << 32) | 0x80000000), a3, 0x2E00FFFFFFF7uLL, (uint64_t)v143, 1uLL, v115, v116);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, 0, v154, v93, v94, v95, v96, v97);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v160, a1, v98, v99, v100, v101, v102, v103);
  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v38, v38);
  result = JSC::DFG::SpeculativeJIT::jsValueResult(a1, v38, *(_QWORD *)(a1 + 3976), 21, 0, v104, v105, v106);
  if (v153)
  {
    v108 = v154;
    if (v154 != -1)
    {
      if (v154 > 15)
        v108 = -1;
      --*(_DWORD *)(v153 + 12 * v108 + 4784);
    }
  }
  if ((v155[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v109 = v156;
    if (v156 > 15)
      v109 = -1;
    --*(_DWORD *)(v155[0] + 12 * v109 + 4784);
  }
  if ((v157[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v110 = v158;
    if (v158 > 15)
      v110 = -1;
    --*(_DWORD *)(v157[0] + 12 * v110 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePeepHoleObjectToObjectOrOtherEquality(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t result;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE v162[12];
  int v163;
  uint64_t v164;
  _BYTE v165[12];
  _BYTE v166[12];
  unsigned int v167[3];
  int v168;
  uint64_t v169;
  _BYTE v170[12];
  _BYTE v171[12];
  uint64_t v172;
  char v173;
  _QWORD v174[2];
  char v175;
  _QWORD v176[2];
  char v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;

  v11 = *(uint64_t **)(a4 + 72);
  v12 = *v11;
  v161 = v11[2];
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v176, (JSC::DFG::SpeculativeJIT *)a1, a2, a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v174, (JSC::DFG::SpeculativeJIT *)a1, a3, v13, v14, v15, v16, v17);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v172, (JSC::DFG::SpeculativeJIT *)a1, v18, v19, v20, v21, v22, v23);
  v31 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v176, v24, v25, v26, v27, v28, v29, v30);
  v39 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v174, v32, v33, v34, v35, v36, v37, v38);
  v40 = v173;
  v53 = v31;
  v54 = (void *)(((unint64_t)v31 << 32) | 0x80000000);
  if (JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), v41, v42, v43, v44, v45, v46))
  {
    v55 = *(_QWORD *)(a1 + 5616);
    v56 = *(_QWORD *)(v55 + 8);
    v57 = (_QWORD *)(v56 + 24);
    v58 = (_QWORD *)(v56 + 8);
    if ((a2 & 1) != 0)
      v58 = v57;
    v59 = *v58 + 32 * *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v60 = (void *)*(unsigned int *)(v55 + 88);
    if ((_DWORD)v60 != *(_DWORD *)(v59 + 20))
    {
      if ((*(_QWORD *)(v59 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v59, v60, v47, v48, v49, v50, v51, v52);
      else
        *(_DWORD *)(v59 + 20) = (_DWORD)v60;
    }
    if ((*(_QWORD *)(v59 + 8) & 0xFFFFDFFFF0000008) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197CA7B58);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v53 | 0x500000000, *(char *)(a1 + 304), v48, v49, v50, v51, v52);
      JSC::MacroAssemblerARM64::branch32(a1, 3, 17, 23, v61, v62, v63, v64, (uint64_t)v171);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, v54, a2, 0x20000FFFFFF7uLL, (uint64_t)v171, 1uLL, v65, v66);
    }
    v67 = v39;
    JSC::AssemblyHelpers::branchIfNotCell(a1, v39, 1, v48, v49, v50, v51, v52, (uint64_t)v167);
    v74 = *(_QWORD *)(a1 + 5616);
    v75 = *(_QWORD *)(v74 + 8);
    v76 = (_QWORD *)(v75 + 24);
    v77 = (_QWORD *)(v75 + 8);
    if ((a3 & 1) != 0)
      v77 = v76;
    v78 = *v77 + 32 * *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v79 = (void *)*(unsigned int *)(v74 + 88);
    if ((_DWORD)v79 != *(_DWORD *)(v78 + 20))
    {
      if ((*(_QWORD *)(v78 + 8) & 0x2800FFFFFFF7) != 0)
        JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v78, v79, v68, v69, v70, v71, v72, v73);
      else
        *(_DWORD *)(v78 + 20) = (_DWORD)v79;
    }
    if ((*(_QWORD *)(v78 + 8) & 0xC00F0000000) != 0)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197CA7B78);
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
      JSC::MacroAssemblerARM64::load8(a1, v39 | 0x500000000, *(char *)(a1 + 304), v69, v70, v71, v72, v73);
      JSC::MacroAssemblerARM64::branch32(a1, 3, 17, 23, v80, v81, v82, v83, (uint64_t)v166);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v39 << 32) | 0x80000000), a3, 0xFFFFF3FF0FFFFFFFLL, (uint64_t)v166, 1uLL, v84, v85);
    }
  }
  else
  {
    if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a2, 0x20000FFFFFF7, v48, v49, v50, v51, v52))
    {
      JSC::AssemblyHelpers::branchIfNotObject(a1, v31, v137, v138, v139, v140, v141, (uint64_t)v170);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v31 << 32) | 0x80000000), a2, 0x20000FFFFFF7uLL, (uint64_t)v170, 1uLL, v142, v143);
    }
    JSC::MacroAssemblerARM64::branchTest8(a1, 1, v31 | 0x600000000, 1, v138, v139, v140, v141, (uint64_t)&v168);
    v180 = v168;
    v181 = v169;
    JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)(((unint64_t)v31 << 32) | 0x80000000), (JSC::DFG::Node *)(a2 & 0xFF00FFFFFFFFFFFFLL), &v180);
    v67 = v39;
    JSC::AssemblyHelpers::branchIfNotCell(a1, v39, 1, v144, v145, v146, v147, v148, (uint64_t)v167);
    if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a3, 0xFFFFF3FF0FFFFFFFLL, v149, v150, v151, v152, v153))
    {
      JSC::AssemblyHelpers::branchIfNotObject(a1, v39, v154, v155, v156, v157, v158, (uint64_t)v165);
      JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v39 << 32) | 0x80000000), a3, 0xFFFFF3FF0FFFFFFFLL, (uint64_t)v165, 1uLL, v159, v160);
    }
    JSC::MacroAssemblerARM64::branchTest8(a1, 1, v39 | 0x600000000, 1, v155, v156, v157, v158, (uint64_t)&v163);
    v180 = v163;
    v181 = v164;
    JSC::DFG::SpeculativeJIT::speculationCheck(a1, 1uLL, (JSC::DFG::Node *)(((unint64_t)v39 << 32) | 0x80000000), (JSC::DFG::Node *)(a3 & 0xFF00FFFFFFFFFFFFLL), &v180);
  }
  JSC::MacroAssemblerARM64::branch64(a1, 0, (char)v53, v39, v70, v71, v72, v73, (uint64_t)&v178);
  v92 = (_QWORD *)(a1 + 5264);
  v93 = v179;
  v180 = v178;
  v181 = v179;
  v182 = v12;
  v94 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v94 == *(_DWORD *)(a1 + 5272))
  {
    v135 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v92, (void *)(v94 + 1), (unint64_t)&v180, v87, v88, v89, v90, v91);
    v136 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v136 = *(_DWORD *)v135;
    *(_QWORD *)(v136 + 4) = *(_QWORD *)(v135 + 4);
    *(_QWORD *)(v136 + 16) = *(_QWORD *)(v135 + 16);
  }
  else
  {
    v95 = *v92 + 24 * v94;
    *(_DWORD *)v95 = v178;
    *(_QWORD *)(v95 + 4) = v93;
    *(_QWORD *)(v95 + 16) = v12;
  }
  ++*(_DWORD *)(a1 + 5276);
  v96 = *(_QWORD *)(a1 + 5616);
  v97 = *(_QWORD *)(v96 + 8);
  v98 = (_QWORD *)(v97 + 24);
  v99 = (_QWORD *)(v97 + 8);
  if ((a3 & 1) != 0)
    v99 = v98;
  v100 = *v99 + 32 * *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v101 = (void *)*(unsigned int *)(v96 + 88);
  if ((_DWORD)v101 != *(_DWORD *)(v100 + 20))
  {
    if ((*(_QWORD *)(v100 + 8) & 0x2800FFFFFFF7) != 0)
      JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v100, v101, v86, v87, v88, v89, v90, v91);
    else
      *(_DWORD *)(v100 + 20) = (_DWORD)v101;
  }
  if ((*(_QWORD *)(v100 + 8) & 0xFFFFD1FF00000008) == 0)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v167, a1, v86, v87, v88, v89, v90, v91);
    goto LABEL_30;
  }
  JSC::DFG::SpeculativeJIT::jump(a1, v161, 1, v87, v88, v89, v90, v91);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v167, a1, v102, v103, v104, v105, v106, v107);
  if (v40 != v39)
  {
    if ((_DWORD)v39 == 63)
    {
      if (v40 != 31)
      {
        v117 = v40 & 0x1F | 0xD2800000;
        goto LABEL_26;
      }
    }
    else if ((_DWORD)v39 != 31 && v40 != 31)
    {
      v115 = v40 | ((v39 & 0x1F) << 16);
      v116 = -1442839584;
LABEL_25:
      v117 = v115 | v116;
LABEL_26:
      v119 = (unsigned int *)(a1 + 200);
      v118 = *(_DWORD *)(a1 + 200);
      if (v118 + 4 > *(_DWORD *)(a1 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v108, v109, v110, v111, v112, v113, v114);
        v118 = *v119;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 56) + v118) = v117;
      *v119 += 4;
      goto LABEL_29;
    }
    v115 = v40 | (32 * v39);
    v116 = -1862270976;
    goto LABEL_25;
  }
LABEL_29:
  JSC::MacroAssemblerARM64::and64(a1, -9, v40, (char)v40);
  JSC::MacroAssemblerARM64::branch64(a1, 1, (char)v40, 2, v120, v121, v122, v123, (uint64_t)v162);
  JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)((v67 << 32) | 0x80000000), a3, 0x2E00FFFFFFF7uLL, (uint64_t)v162, 1uLL, v124, v125);
LABEL_30:
  result = JSC::DFG::SpeculativeJIT::jump(a1, v161, 0, v126, v127, v128, v129, v130);
  if (v172)
  {
    v132 = v173;
    if (v173 != -1)
    {
      if (v173 > 15)
        v132 = -1;
      --*(_DWORD *)(v172 + 12 * v132 + 4784);
    }
  }
  if ((v174[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v133 = v175;
    if (v175 > 15)
      v133 = -1;
    --*(_DWORD *)(v174[0] + 12 * v133 + 4784);
  }
  if ((v176[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v134 = v177;
    if (v177 > 15)
      v134 = -1;
    --*(_DWORD *)(v176[0] + 12 * v134 + 4784);
  }
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileSymbolUntypedEquality(uint64_t a1, JSC::DFG::Node *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *result;
  uint64_t v70;
  int v71;
  unsigned int v72;
  _DWORD *v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unint64_t v79;
  BOOL v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v92, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v89, (JSC::DFG::SpeculativeJIT *)a1, a4, v12, v13, v14, v15, v16);
  v24 = ~*(_DWORD *)((v93 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  v25 = *(unsigned int *)(a1 + 4004);
  if (v24 >= v25)
    goto LABEL_42;
  v26 = *(_QWORD *)(a1 + 3992);
  v27 = *(_DWORD *)(v26 + 24 * (int)v24 + 8);
  if (v27 == 1)
    goto LABEL_3;
  v79 = ~*(_DWORD *)((v90 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v79 >= v25)
  {
LABEL_42:
    __break(0xC471u);
    JUMPOUT(0x197CA7EA4);
  }
  if (*(_DWORD *)(v26 + 24 * (int)v79 + 8) == 1)
  {
    v28 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v89, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
    goto LABEL_4;
  }
  v80 = v27 == 2 && (v93 & 0xFF00FFFFFFFFFFFFLL) == (v90 & 0xFF00FFFFFFFFFFFFLL);
  if (!v80
    || (v81 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)&v92, v17, v18, v19, v20, v21, v22, v23), v81 != JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v89, v82, v83, v84, v85, v86, v87, v88)))
  {
    v36 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)a1, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
    goto LABEL_8;
  }
LABEL_3:
  v28 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)&v92, v17, v18, v19, v20, v21, v22, v23);
LABEL_4:
  v36 = v28;
  if (v28 > 15)
    v37 = -1;
  else
    v37 = v28;
  ++*(_DWORD *)(a1 + 12 * v37 + 4784);
LABEL_8:
  v38 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)&v92, v29, v30, v31, v32, v33, v34, v35);
  v46 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v89, v39, v40, v41, v42, v43, v44, v45);
  JSC::DFG::SpeculativeJIT::speculateSymbol(a1, a3, v38, v47, v48, v49, v50, v51);
  v59 = (v46 & 0x1F) << 16;
  if ((_DWORD)v38 == 31)
  {
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), v59 | 0xEB2063FF, v53, v54, v55, v56, v57, v58);
    v62 = *(_DWORD *)(a1 + 200);
  }
  else
  {
    v60 = v59 | (32 * (v38 & 0x1F)) | 0xEB00001F;
    v61 = *(_DWORD *)(a1 + 200);
    if (v61 + 4 > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v52, v53, v54, v55, v56, v57, v58);
      v61 = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + v61) = v60;
    v62 = *(_DWORD *)(a1 + 200) + 4;
    *(_DWORD *)(a1 + 200) = v62;
  }
  if (v62 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v52, v53, v54, v55, v56, v57, v58);
    v62 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v62) = v36 & 0x1F | 0x1A9F17E0;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::or32(a1, (JSC::ARM64LogicalImmediate *)6, v36, v36);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, a2, v63, v64, v65, v66, v67, v68);
  v70 = a1 + 4776;
  v71 = *((_DWORD *)a2 + 12);
  if (v36 > 15)
    v72 = -1;
  else
    v72 = v36;
  v73 = (_DWORD *)(v70 + 12 * v72);
  *v73 = v71;
  v73[1] = 4;
  v74 = ~v71;
  if (v74 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197CA7EACLL);
  }
  v75 = *(_QWORD *)(a1 + 3992) + 24 * (int)v74;
  v76 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v75 = a2;
  *(_DWORD *)(v75 + 8) = v76;
  *(_BYTE *)(v75 + 17) = v36;
  *(_DWORD *)(v75 + 12) = 21;
  *(_BYTE *)(v75 + 16) = 0;
  if (v36 != -1)
    --*(_DWORD *)(v70 + 12 * v72 + 8);
  if ((v90 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v77 = v91;
    if (v91 > 15)
      v77 = -1;
    --*(_DWORD *)(v89 + 12 * v77 + 4784);
  }
  if ((v93 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v78 = v94;
    if (v94 > 15)
      v78 = -1;
    --*(_DWORD *)(v92 + 12 * v78 + 4784);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compileInt52Compare(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  JSC::DFG::SpeculativeJIT *v32[2];
  unsigned __int8 v33;
  char v34;
  JSC::DFG::SpeculativeJIT *v35[2];
  unsigned __int8 v36;
  char v37;

  JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand((uint64_t)v35, (uint64_t)a1, *(_QWORD *)(a2 + 24));
  JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand((uint64_t)v32, (uint64_t)a1, *(_QWORD *)(a2 + 32), (uint64_t)v35, v6, v7, v8, v9);
  JSC::DFG::GPRTemporary::GPRTemporary<JSC::DFG::SpeculateWhicheverInt52Operand,JSC::DFG::SpeculateWhicheverInt52Operand>((uint64_t)&v30, (JSC::DFG::SpeculativeJIT *)a1, (JSC::DFG::SpeculateWhicheverInt52Operand *)v35, (JSC::DFG::SpeculateWhicheverInt52Operand *)v32, v10, v11, v12, v13);
  v19 = v36;
  if (v36 == 255)
  {
    if (v37)
      v20 = 3;
    else
      v20 = 2;
    v19 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v35[0], (unint64_t)v35[1], v20, v14, v15, v16, v17, v18);
    v36 = v19;
  }
  v21 = v33;
  if (v33 == 255)
  {
    if (v34)
      v22 = 3;
    else
      v22 = 2;
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v32[0], (unint64_t)v32[1], v22, v14, v15, v16, v17, v18);
    v33 = v21;
  }
  JSC::MacroAssembler::comparePtr(a1, a3, (char)v19, (char)v21, v31, v16, v17, v18);
  JSC::MacroAssemblerARM64::or32((uint64_t)a1, (JSC::ARM64LogicalImmediate *)6, v31, v31);
  result = JSC::DFG::SpeculativeJIT::jsValueResult((uint64_t)a1, v31, a1[497], 21, 0, v23, v24, v25);
  if (v30)
  {
    v27 = v31;
    if (v31 != -1)
    {
      if (v31 > 15)
        v27 = -1;
      --*(_DWORD *)(v30 + 12 * v27 + 4784);
    }
  }
  v28 = (char)v33;
  if ((char)v33 > 15)
    v28 = -1;
  --*((_DWORD *)v32[0] + 3 * v28 + 1196);
  v29 = (char)v36;
  if ((char)v36 > 15)
    v29 = -1;
  --*((_DWORD *)v35[0] + 3 * v29 + 1196);
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::compilePeepHoleInt52Branch(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unsigned int v35;
  unsigned int v36;
  JSC::DFG::SpeculativeJIT *v37[2];
  unsigned __int8 v38;
  char v39;
  JSC::DFG::SpeculativeJIT *v40[2];
  unsigned __int8 v41;
  char v42;

  v7 = *(uint64_t **)(a3 + 72);
  v8 = *v7;
  v9 = v7[2];
  v10 = *(_QWORD *)(a1 + 3960);
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 3968) + 8) + 1;
  while (v11 < *(_DWORD *)(v10 + 60))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v11++);
    if (v12)
      goto LABEL_4;
  }
  v12 = 0;
LABEL_4:
  JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand((uint64_t)v40, a1, *(_QWORD *)(a2 + 24));
  JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand((uint64_t)v37, a1, *(_QWORD *)(a2 + 32), (uint64_t)v40, v13, v14, v15, v16);
  v22 = v41;
  if (v41 == 255)
  {
    if (v42)
      v23 = 3;
    else
      v23 = 2;
    v22 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v40[0], (unint64_t)v40[1], v23, v17, v18, v19, v20, v21);
    v41 = v22;
  }
  v24 = v38;
  if (v38 == 255)
  {
    if (v39)
      v25 = 3;
    else
      v25 = 2;
    v24 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(v37[0], (unint64_t)v37[1], v25, v17, v18, v19, v20, v21);
    v38 = v24;
  }
  if (v8 == v12)
    v26 = a4 ^ 1u;
  else
    v26 = a4;
  if (v8 == v12)
    v27 = v9;
  else
    v27 = v8;
  if (v8 == v12)
    v28 = v8;
  else
    v28 = v9;
  JSC::DFG::SpeculativeJIT::branch64<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(a1, v26, (char)v22, (char)v24, v27, v19, v20, v21);
  result = JSC::DFG::SpeculativeJIT::jump(a1, v28, 0, v29, v30, v31, v32, v33);
  v35 = (char)v38;
  if ((char)v38 > 15)
    v35 = -1;
  --*((_DWORD *)v37[0] + 3 * v35 + 1196);
  v36 = (char)v41;
  if ((char)v41 > 15)
    v36 = -1;
  --*((_DWORD *)v40[0] + 3 * v36 + 1196);
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileToBoolean(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *result;
  char *v35;
  int v36;
  char v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int i;
  unsigned int v104;
  char v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  JSC::DFG::Node *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  char *v145;
  int v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  int v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned __int8 v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int8x8_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  char *v206;
  int v207;
  unint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  _DWORD *v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  char *v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _DWORD *v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  char *v249;
  unsigned int v250;
  uint64_t v251;
  int isWatchingMasqueradesAsUndefinedWatchpointSet;
  void *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  char v264;
  char v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  char *v277;
  int v278;
  unint64_t v279;
  uint64_t v280;
  int v281;
  unsigned int v282;
  char *v283;
  char *v284;
  unint64_t v285;
  char v286;
  uint64_t v287;
  char *v288;
  _DWORD *v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  char *v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  char *v328;
  int v329;
  unint64_t v330;
  uint64_t v331;
  int v332;
  unsigned int v333;
  char *v334;
  unsigned int *v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  _QWORD *v352;
  uint64_t v353;
  void *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int8x8_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  JSC::DFG::Node *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  unint64_t v398;
  char v399;
  char v400;
  char v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  char *v409;
  int v410;
  char v411;
  char *v412;
  unint64_t v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  unsigned int *v418;
  uint64_t v419;
  unsigned int v420;
  unsigned int *v421;
  uint64_t v422;
  unsigned int v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unsigned int v427;
  uint64_t v428;
  unsigned int v429;
  BOOL v430;
  uint64_t v431;
  uint64_t v432;
  unsigned int v433;
  BOOL v434;
  uint64_t v435;
  char v436;
  int v437;
  char v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unsigned int v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unsigned int v446;
  uint64_t v447;
  uint64_t v448;
  JSC::AssemblerBuffer *v449;
  int v450;
  uint64_t v451;
  int v452;
  uint64_t v453;
  unsigned __int8 v454;
  int v455;
  char *v456;
  uint64_t v457;
  char v458;
  char v459;
  _BYTE v460[12];
  _BYTE v461[12];
  int v462;
  uint64_t v463;
  unsigned int v464[2];
  char v465;
  __int16 v466;
  char v467;
  _BYTE v468[12];
  unsigned int v469[3];
  _BYTE v470[12];
  JSC::DFG::SpeculativeJIT *v471;
  unint64_t v472;
  char v473;
  _BYTE v474[15];

  v8 = a3;
  v11 = *((_QWORD *)a2 + 3);
  v12 = (v11 >> 50) & 0x3F;
  if ((v12 - 6) < 2)
  {
    v13 = *((_QWORD *)this + 702);
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v16 = (uint64_t *)(v14 + 24);
    v17 = (uint64_t *)(v14 + 8);
    if ((v11 & 1) != 0)
      v17 = v16;
    v18 = *v17;
    v19 = *v17 + 32 * v15;
    v20 = *(_DWORD *)(v13 + 88);
    v21 = *(_DWORD *)(v19 + 20);
    if (v20 != v21)
    {
      if ((*(_QWORD *)(v19 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v21 ^ v20) >= 2)
        {
          v242 = *(_QWORD *)v19;
          if (*(_QWORD *)v19 != 4)
          {
            *(_QWORD *)v19 = v242 | 2;
            v335 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v242 & 1) != 0)
            {
              v424 = 2 * *v335;
              while (v424 * 4)
              {
                v425 = *(_QWORD *)&v335[v424];
                if ((*(_BYTE *)(v425 + 19) & 0xC) == 0)
                {
                  v426 = *(_QWORD *)(v425 + 96);
                  v427 = (v426 & 1) != 0 ? (v426 >> 1) & 3 : *(unsigned __int8 *)(v426 + 4);
                  v424 -= 2;
                  if (v427 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v335, a2, a3, a4, a5, a6, a7, a8);
                goto LABEL_196;
              }
            }
            else if (v335)
            {
              if ((*((_BYTE *)v335 + 19) & 0xC) != 0
                || ((v336 = *((_QWORD *)v335 + 12), (v336 & 1) != 0)
                  ? (v337 = (v336 >> 1) & 3)
                  : (v337 = *(unsigned __int8 *)(v336 + 4)),
                    v337 == 2))
              {
LABEL_196:
                *(_QWORD *)v19 = 4;
              }
            }
          }
          *(_DWORD *)(v18 + 32 * v15 + 16) = -21020677;
        }
        if ((v20 & 1) != 0)
          *(_QWORD *)v19 &= ~2uLL;
      }
      *(_DWORD *)(v19 + 20) = v20;
    }
    if ((*(_QWORD *)(v19 + 8) & 0xFFFFFEFFFFFFFFFFLL) == 0)
    {
      v22 = *((_QWORD *)a2 + 3);
      v23 = ~*(_DWORD *)((v22 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      v24 = *((unsigned int *)this + 1001);
      if (v23 >= v24)
      {
        __break(0xC471u);
        JUMPOUT(0x197CA9978);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v23 + 12))
      {
        v25 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
        v24 = *((unsigned int *)this + 1001);
        v23 = ~*(_DWORD *)((v22 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      }
      else
      {
        v25 = -1;
      }
      if (v23 >= v24)
      {
        __break(0xC471u);
        JUMPOUT(0x197CA9980);
      }
      if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v23 + 8) == 1)
      {
        if (v25 == -1)
          v25 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean((uint64_t)this, v22, a3, a4, a5, a6, a7, a8);
        if (v25 > 15)
          v26 = -1;
        else
          v26 = v25;
        ++*((_DWORD *)this + 3 * v26 + 1196);
        v27 = v25;
      }
      else
      {
        v27 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      }
      if (v8)
      {
        if (v25 == -1)
          v25 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean((uint64_t)this, v22, a3, a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::xor32((uint64_t)this, (JSC::ARM64LogicalImmediate *)1, v25, v27, a5, a6, a7, a8);
      }
      else
      {
        if (v25 == -1)
          v25 = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean((uint64_t)this, v22, a3, a4, a5, a6, a7, a8);
        JSC::MacroAssemblerARM64::move(this, v25, v27, a4, a5, a6, a7, a8);
      }
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v28, v29, v30, v31, v32, v33);
      v35 = (char *)this + 4776;
      v36 = *((_DWORD *)a2 + 12);
      if (v27 > 15)
        v37 = -1;
      else
        v37 = v27;
      v38 = &v35[12 * v37];
      *(_DWORD *)v38 = v36;
      *((_DWORD *)v38 + 1) = 4;
      v39 = ~v36;
      if (v39 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197CA9988);
      }
      v40 = *((_QWORD *)this + 499) + 24 * (int)v39;
      v41 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v40 = a2;
      *(_DWORD *)(v40 + 8) = v41;
      *(_BYTE *)(v40 + 17) = v27;
      *(_DWORD *)(v40 + 12) = 21;
      *(_BYTE *)(v40 + 16) = 0;
      if (v27 != -1)
        --*(_DWORD *)&v35[12 * v37 + 8];
      if (v25 > 15)
        v42 = -1;
      else
        v42 = v25;
      v43 = &v35[12 * v42];
      goto LABEL_31;
    }
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v471, this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v457, this, v151, v152, v153, v154, v155, v156);
    v164 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v471, v157, v158, v159, v160, v161, v162, v163);
    if (v458 == v164)
      goto LABEL_92;
    if (v164 == 63)
    {
      if (v458 != 31)
      {
        v174 = v458 & 0x1F | 0xD2800000;
        goto LABEL_89;
      }
    }
    else if (v164 != 31 && v458 != 31)
    {
      v172 = v458 | ((v164 & 0x1F) << 16);
      v173 = -1442839584;
LABEL_88:
      v174 = v172 | v173;
LABEL_89:
      v176 = (unsigned int *)((char *)this + 200);
      v175 = *((_DWORD *)this + 50);
      if (v175 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v165, v166, v167, v168, v169, v170, v171);
        v175 = *v176;
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v175) = v174;
      *v176 += 4;
      LOBYTE(v164) = v458;
LABEL_92:
      JSC::MacroAssemblerARM64::xor64((uint64_t)this, 6, (char)v164, (char)v164, v168, v169, v170, v171);
      v184 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v471, v177, v178, v179, v180, v181, v182, v183);
      v185 = *((_QWORD *)a2 + 3);
      JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, v458, 4294967294, v186, v187, v188, v189, (uint64_t)v460, v190);
      JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v184 << 32) | 0x80000000), v185, 0x10000000000uLL, (uint64_t)v460, 1uLL, v191, v192);
      if (v8)
        v197 = 7;
      else
        v197 = 6;
      JSC::MacroAssemblerARM64::xor64((uint64_t)this, v197, v458, v458, v193, v194, v195, v196);
      v198 = v458;
      result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v199, v200, v201, v202, v203, v204);
      if (v198 > 15)
        v205 = -1;
      else
        v205 = v198;
      v206 = (char *)this + 12 * v205;
      v207 = *((_DWORD *)a2 + 12);
      *((_DWORD *)v206 + 1194) = v207;
      *((_DWORD *)v206 + 1195) = 4;
      v208 = ~v207;
      if (v208 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197CA9990);
      }
      v209 = *((_QWORD *)this + 499) + 24 * (int)v208;
      v210 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v209 = a2;
      *(_DWORD *)(v209 + 8) = v210;
      *(_BYTE *)(v209 + 17) = v198;
      *(_DWORD *)(v209 + 12) = 21;
      *(_BYTE *)(v209 + 16) = 0;
      goto LABEL_100;
    }
    v172 = v458 | (32 * v164);
    v173 = -1862270976;
    goto LABEL_88;
  }
  if (((v11 >> 50) & 0x3F) <= 0x14)
  {
    if ((_DWORD)v12 != 19)
    {
      if (!(_DWORD)v12)
      {
        JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v471, this, v11, a4, a5, a6, a7, a8);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v470, this, v214, v215, v216, v217, v218, v219);
        v454 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v471, v220, v221, v222, v223, v224, v225, v226);
        v233 = 0;
        v234 = v470[8];
        v235 = (char *)this + 4968;
        v236 = (_DWORD *)((char *)this + 4976);
        v237 = 0x17u;
        v238 = -1;
        while (1)
        {
          if (!*v236)
          {
            v239 = *(v236 - 1);
            if (v239 == -1)
            {
              v241 = *(v236 - 2);
              *((_QWORD *)v236 - 1) = 0xFFFFFFFF3FFFFFFFLL;
              goto LABEL_125;
            }
            if (v239 < v238)
            {
              v237 = v233;
              v238 = *(v236 - 1);
            }
          }
          ++v233;
          v236 += 3;
          if (v233 == 23)
          {
            v233 = v237;
            v240 = &v235[12 * v237];
            v241 = *(_DWORD *)v240;
            *(_QWORD *)v240 = 0xFFFFFFFF3FFFFFFFLL;
            v236 = v240 + 8;
LABEL_125:
            *v236 = 1;
            v243 = JSC::FPRInfo::toRegister::registerForIndex[v233];
            if (v241 != 0x3FFFFFFF)
              JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v241, v227, v228, v229, v230, v231, v232);
            v244 = 0;
            v245 = (_DWORD *)((char *)this + 4976);
            v246 = 0x17u;
            v247 = -1;
            while (1)
            {
              if (!*v245)
              {
                v248 = *(v245 - 1);
                if (v248 == -1)
                {
                  v250 = *(v245 - 2);
                  *((_QWORD *)v245 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_135:
                  v456 = (char *)this + 4968;
                  *v245 = 1;
                  v251 = JSC::FPRInfo::toRegister::registerForIndex[v244];
                  if (v250 != 0x3FFFFFFF)
                    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v250, v227, v228, v229, v230, v231, v232);
                  isWatchingMasqueradesAsUndefinedWatchpointSet = JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), v227, v228, v229, v230, v231, v232);
                  v260 = *((_QWORD *)this + 495);
                  v261 = *(_QWORD *)a2;
                  if ((*(_QWORD *)a2 & 1) == 0)
                  {
                    v262 = *(_QWORD *)(v260 + 32);
                    goto LABEL_139;
                  }
                  v452 = isWatchingMasqueradesAsUndefinedWatchpointSet;
                  v428 = *(_QWORD *)(v261 & 0xFFFFFFFF8);
                  if ((v261 & 2) != 0
                    || ((v429 = *(_DWORD *)((v261 & 0xFFFFFFFF8) + 8), v429 != 0x3FFFFFFF)
                      ? (v430 = v429 == -1)
                      : (v430 = 1),
                        v430))
                  {
                    v431 = 2;
                  }
                  else if (v429 >> 28)
                  {
                    v447 = WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v447 = v428;
                    *(_DWORD *)(v447 + 8) = v429;
                    v431 = 1;
                    v428 = v447;
                  }
                  else
                  {
                    v431 = *(_QWORD *)(v261 & 0xFFFFFFFF8);
                    v428 = 0;
                  }
                  v261 = v428 | v431;
                  v262 = *(_QWORD *)(v260 + 32);
                  if (((v428 | v431) & 1) != 0)
                  {
                    v432 = *(_QWORD *)(v261 & 0xFFFFFFFF8);
                    if ((v261 & 2) != 0
                      || ((v433 = *(_DWORD *)((v261 & 0xFFFFFFFF8) + 8), v433 != 0x3FFFFFFF)
                        ? (v434 = v433 == -1)
                        : (v434 = 1),
                          v434))
                    {
                      v435 = 2;
                    }
                    else if (v433 >> 28)
                    {
                      v448 = WTF::fastMalloc((WTF *)0x10);
                      *(_QWORD *)v448 = v432;
                      *(_DWORD *)(v448 + 8) = v433;
                      v435 = 1;
                      v432 = v448;
                    }
                    else
                    {
                      v435 = *(_QWORD *)(v261 & 0xFFFFFFFF8);
                      v432 = 0;
                    }
                    v436 = v432 | v435;
                    v263 = (uint64_t *)((v432 | v435) & 0xFFFFFFFF8);
                    if ((v436 & 1) != 0)
                    {
                      v264 = 0;
                      v265 = 0;
                      v266 = *v263;
                    }
                    else
                    {
                      v265 = 0;
                      v264 = 1;
                      v266 = (uint64_t)v263;
                    }
                    isWatchingMasqueradesAsUndefinedWatchpointSet = v452;
                  }
                  else
                  {
                    isWatchingMasqueradesAsUndefinedWatchpointSet = v452;
LABEL_139:
                    v263 = (uint64_t *)(v261 & 0xFFFFFFFF8);
                    v264 = 1;
                    v265 = 1;
                    v266 = v261 & 0xFFFFFFFF8;
                  }
                  if (v266)
                    v262 = *(_QWORD *)(v266 + 8);
                  v267 = *(_QWORD *)(v262 + 8);
                  if ((v264 & 1) == 0 && v263)
                  {
                    v437 = isWatchingMasqueradesAsUndefinedWatchpointSet;
                    WTF::fastFree((unint64_t)v263, v253, v254, v255, v256, v257, v258, v259);
                    isWatchingMasqueradesAsUndefinedWatchpointSet = v437;
                  }
                  v268 = isWatchingMasqueradesAsUndefinedWatchpointSet ^ 1u;
                  if ((v265 & 1) == 0 && (v261 & 0xFFFFFFFF8) != 0)
                  {
                    v438 = isWatchingMasqueradesAsUndefinedWatchpointSet;
                    WTF::fastFree(v261 & 0xFFFFFFFF8, v253, v254, v255, v256, v257, v258, v259);
                    LOBYTE(isWatchingMasqueradesAsUndefinedWatchpointSet) = v438;
                  }
                  LOBYTE(v457) = 0;
                  v459 = 0;
                  if ((isWatchingMasqueradesAsUndefinedWatchpointSet & 1) != 0)
                  {
                    v269 = -1;
                  }
                  else
                  {
                    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v457, this, v254, v255, v256, v257, v258, v259);
                    v459 = 1;
                    v269 = v458;
                  }
                  JSC::AssemblyHelpers::emitConvertValueToBoolean((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v454, v234, v269, v243, v251, v268, v267, v8);
                  JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v234, v234);
                  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v270, v271, v272, v273, v274, v275);
                  if ((int)v234 > 15)
                    v276 = -1;
                  else
                    v276 = v234;
                  v277 = (char *)this + 12 * v276;
                  v278 = *((_DWORD *)a2 + 12);
                  *((_DWORD *)v277 + 1194) = v278;
                  *((_DWORD *)v277 + 1195) = 4;
                  v279 = ~v278;
                  if (v279 >= *((unsigned int *)this + 1001))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197CA99A0);
                  }
                  v280 = *((_QWORD *)this + 499) + 24 * (int)v279;
                  v281 = *((_DWORD *)a2 + 13);
                  *(_QWORD *)v280 = a2;
                  *(_DWORD *)(v280 + 8) = v281;
                  *(_BYTE *)(v280 + 17) = v234;
                  *(_DWORD *)(v280 + 12) = 21;
                  *(_BYTE *)(v280 + 16) = 0;
                  if (v459)
                  {
                    if (v457)
                    {
                      v282 = v458;
                      if (v458 != -1)
                      {
                        if (v458 > 15)
                          v282 = -1;
                        --*(_DWORD *)(v457 + 12 * v282 + 4784);
                      }
                    }
                  }
                  v283 = &v456[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v251]];
                  --*((_DWORD *)v283 + 2);
                  v284 = &v456[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v243]];
                  --*((_DWORD *)v284 + 2);
                  v211 = *(_QWORD *)v470;
                  if (*(_QWORD *)v470)
                  {
                    v212 = v470[8];
                    goto LABEL_102;
                  }
LABEL_106:
                  if ((v472 & 0xFF00FFFFFFFFFFFFLL) == 0)
                    return result;
LABEL_107:
                  v213 = v473;
                  if (v473 > 15)
                    v213 = -1;
                  --*((_DWORD *)v471 + 3 * v213 + 1196);
                  return result;
                }
                if (v248 < v247)
                {
                  v246 = v244;
                  v247 = *(v245 - 1);
                }
              }
              ++v244;
              v245 += 3;
              if (v244 == 23)
              {
                v244 = v246;
                v249 = &v235[12 * v246];
                v250 = *(_DWORD *)v249;
                *(_QWORD *)v249 = 0xFFFFFFFF3FFFFFFFLL;
                v245 = v249 + 8;
                goto LABEL_135;
              }
            }
          }
        }
      }
      if ((_DWORD)v12 == 1)
      {
        v471 = this;
        v472 = v11;
        v473 = -1;
        v397 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        v398 = *((unsigned int *)this + 1001);
        if (v397 >= v398)
        {
          __break(0xC471u);
          JUMPOUT(0x197CA99B8);
        }
        if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v397 + 12))
        {
          v399 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v11, (uint64_t)v474, a4, a5, a6, a7, a8);
          v473 = v399;
          v11 = v472;
          v398 = *((unsigned int *)this + 1001);
          v397 = ~*(_DWORD *)((v472 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        }
        else
        {
          v399 = -1;
        }
        if (v397 >= v398)
        {
          __break(0xC471u);
          JUMPOUT(0x197CA99C0);
        }
        if (*(_DWORD *)(*((_QWORD *)this + 499) + 24 * (int)v397 + 8) == 1)
        {
          if (v399 == -1)
          {
            v399 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v471, v11, (uint64_t)v474, a4, a5, a6, a7, a8);
            v473 = v399;
          }
          if (v399 > 15)
            v400 = -1;
          else
            v400 = v399;
          ++*((_DWORD *)this + 3 * v400 + 1196);
          v401 = v399;
        }
        else
        {
          v401 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
          v399 = v473;
        }
        v402 = v8 ^ 1u;
        if (v399 == -1)
        {
          v399 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v471, v472, (uint64_t)v474, a4, a5, a6, a7, a8);
          v473 = v399;
        }
        JSC::MacroAssemblerARM64::compare32((uint64_t)this, v402, v399, 0, v401, a6, a7, a8);
        JSC::MacroAssemblerARM64::or32((uint64_t)this, (JSC::ARM64LogicalImmediate *)6, v401, v401);
        result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v403, v404, v405, v406, v407, v408);
        v409 = (char *)this + 4776;
        v410 = *((_DWORD *)a2 + 12);
        if (v401 > 15)
          v411 = -1;
        else
          v411 = v401;
        v412 = &v409[12 * v411];
        *(_DWORD *)v412 = v410;
        *((_DWORD *)v412 + 1) = 4;
        v413 = ~v410;
        if (v413 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197CA99C8);
        }
        v414 = *((_QWORD *)this + 499) + 24 * (int)v413;
        v415 = *((_DWORD *)a2 + 13);
        *(_QWORD *)v414 = a2;
        *(_DWORD *)(v414 + 8) = v415;
        *(_BYTE *)(v414 + 17) = v401;
        *(_DWORD *)(v414 + 12) = 21;
        *(_BYTE *)(v414 + 16) = 0;
        if (v401 != -1)
          --*(_DWORD *)&v409[12 * v411 + 8];
        goto LABEL_107;
      }
LABEL_281:
      JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x895, "void JSC::DFG::SpeculativeJIT::compileToBoolean(Node *, BOOL)", "Bad use kind");
      __break(0xC471u);
      JUMPOUT(0x197CA9630);
    }
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v471, this, v11, a4, a5, a6, a7, a8);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v457, this, v44, v45, v46, v47, v48, v49);
    v57 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v471, v50, v51, v52, v53, v54, v55, v56);
    v455 = v458;
    v450 = v57;
    if (!JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), v58, v59, v60, v61, v62, v63))
    {
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v470, this, v64, v65, v66, v67, v68, v69);
      v453 = *(_QWORD *)v470;
      v93 = v470[8];
      JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v57, 1, v338, v339, v340, v341, v342, (uint64_t)v469);
      v349 = *((_QWORD *)this + 702);
      v350 = *(_QWORD *)(v349 + 8);
      v351 = (_QWORD *)(v350 + 24);
      v352 = (_QWORD *)(v350 + 8);
      if ((v11 & 1) != 0)
        v352 = v351;
      v353 = *v352 + 32 * *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v354 = (void *)*(unsigned int *)(v349 + 88);
      if ((_DWORD)v354 != *(_DWORD *)(v353 + 20))
      {
        if ((*(_QWORD *)(v353 + 8) & 0x2800FFFFFFF7) != 0)
          JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v353, v354, v343, v344, v345, v346, v347, v348);
        else
          *(_DWORD *)(v353 + 20) = (_DWORD)v354;
      }
      if ((*(_QWORD *)(v353 + 8) & 0xC00F0000000) != 0)
      {
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197CA98D8);
        }
        *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
        JSC::MacroAssemblerARM64::load8((uint64_t)this, v57 | 0x500000000, *((char *)this + 304), v344, v345, v346, v347, v348);
        JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v355, v356, v357, v358, (uint64_t)v468);
        JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)(((unint64_t)v57 << 32) | 0x80000000), v11, 0xFFFFF3FF0FFFFFFFLL, (uint64_t)v468, 1uLL, v359, v360);
      }
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197CA98A8);
      }
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v57 | 0x600000000, *((char *)this + 304), v344, v345, v346, v347, v348);
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, (uint64_t)this, 0, 17, v361, v362, v363, v364, (uint64_t)v464, v365);
      JSC::MacroAssemblerARM64::load32((uint64_t)this, v57, (char)v93, v366, v367, v368, v369, v370);
      v378 = *((_DWORD *)this + 50);
      if (v378 + 4 > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v371, (uint64_t)v372, v373, v374, v375, v376, v377);
        v378 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v378) = v93 & 0x1F | (32 * (v93 & 0x1F)) | 0xD37CEC00;
      *((_DWORD *)this + 50) += 4;
      v379 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, *((JSC::DFG::JITCompiler **)this + 497), v372, v373, v374, v375, v376, v377);
      if ((_DWORD)v379 == -1)
      {
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197CA98F8);
        }
        v386 = v380;
        *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
        JSC::MacroAssemblerARM64::load64((uint64_t)this, v93 | 0x2800000000, *((char *)this + 304), v381, v382, v383, v384, v385);
        JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, 17, v386, v387, v388, v389, v390, (uint64_t)&v462);
      }
      else
      {
        JSC::MacroAssemblerARM64::branch64((uint64_t)&v462, (uint64_t)this, v93 | 0x2800000000, (v379 << 35) + 0x380000001ALL, v382, v383, v384, v385);
      }
      v451 = v57;
      *(_DWORD *)v470 = v462;
      *(_QWORD *)&v470[4] = v463;
      JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(((unint64_t)v57 << 32) | 0x80000000), (JSC::DFG::Node *)(v11 & 0xFF00FFFFFFFFFFFFLL), (int *)v470);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v464, (uint64_t)this, v391, v392, v393, v394, v395, v396);
LABEL_48:
      v94 = (char)v455;
      if (v8)
        v95 = 6;
      else
        v95 = 7;
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v95, (char)v455, v73, v74, v75, v76, v77);
      v449 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
      for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
      {
        if ((i + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v449, v96, v97, v98, v99, v100, v101, v102);
          i = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
        i = *((_DWORD *)this + 50) + 4;
      }
      v104 = i;
      if ((i + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v449, v96, v97, v98, v99, v100, v101, v102);
        v104 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v104) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v105 = 69;
      else
        v105 = 65;
      v464[0] = i;
      v464[1] = 0;
      v465 = v105;
      v466 = 15;
      v467 = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v469, (uint64_t)this, v97, v98, v99, v100, v101, v102);
      v113 = *((_QWORD *)this + 702);
      v114 = *(_QWORD *)(v113 + 8);
      v115 = *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v116 = (uint64_t *)(v114 + 24);
      v117 = (uint64_t *)(v114 + 8);
      if ((v11 & 1) != 0)
        v117 = v116;
      v118 = *v117;
      v119 = *v117 + 32 * v115;
      v120 = *(_DWORD *)(v113 + 88);
      v121 = *(_DWORD *)(v119 + 20);
      if (v120 == v121)
      {
LABEL_60:
        if ((*(_QWORD *)(v119 + 8) & 0xFFFFD1FF00000008) == 0)
        {
LABEL_70:
          if (v8)
            v130 = 7;
          else
            v130 = 6;
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v130, v94, v108, v109, v110, v111, v112);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v464, (uint64_t)this, v131, v132, v133, v134, v135, v136);
          v137 = (JSC::DFG::Node *)*((_QWORD *)this + 497);
          result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, v137, v138, v139, v140, v141, v142, v143);
          if ((int)v94 > 15)
            v144 = -1;
          else
            v144 = (char)v455;
          v145 = (char *)this + 12 * v144;
          v146 = *((_DWORD *)v137 + 12);
          *((_DWORD *)v145 + 1194) = v146;
          *((_DWORD *)v145 + 1195) = 4;
          v147 = ~v146;
          if (v147 >= *((unsigned int *)this + 1001))
          {
            __break(0xC471u);
            JUMPOUT(0x197CA9998);
          }
          v148 = *((_QWORD *)this + 499) + 24 * (int)v147;
          v149 = *((_DWORD *)v137 + 13);
          *(_QWORD *)v148 = v137;
          *(_DWORD *)(v148 + 8) = v149;
          *(_BYTE *)(v148 + 17) = v455;
          *(_DWORD *)(v148 + 12) = 21;
          *(_BYTE *)(v148 + 16) = 0;
          if (v453 && (_DWORD)v93 != 255)
          {
            if ((char)v93 > 15)
              v150 = -1;
            else
              v150 = v93;
            --*(_DWORD *)(v453 + 12 * v150 + 4784);
          }
LABEL_100:
          v211 = v457;
          if (v457)
          {
            v212 = v458;
LABEL_102:
            if (v212 != -1)
            {
              if (v212 > 15)
                v212 = -1;
              --*(_DWORD *)(v211 + 12 * v212 + 4784);
            }
          }
          goto LABEL_106;
        }
        if (v450 == (_DWORD)v94)
        {
LABEL_69:
          JSC::MacroAssemblerARM64::and64((uint64_t)this, -9, v455, (char)v455);
          JSC::MacroAssemblerARM64::branch64((uint64_t)this, 1, v94, 2, v124, v125, v126, v127, (uint64_t)v461);
          JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)((v451 << 32) | 0x80000000), v11, 0x2E00FFFFFFF7uLL, (uint64_t)v461, 1uLL, v128, v129);
          goto LABEL_70;
        }
        if (v450 == 63)
        {
          if ((_DWORD)v94 != 31)
          {
            v122 = v455 & 0x1F | 0xD2800000;
            goto LABEL_66;
          }
        }
        else if (v450 != 31 && (_DWORD)v94 != 31)
        {
          v122 = v455 & 0xFFE0FFFF | ((v450 & 0x1F) << 16) | 0xAA0003E0;
LABEL_66:
          v123 = *((_DWORD *)this + 50);
          if (v123 + 4 > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v449, (uint64_t)v106, v107, v108, v109, v110, v111, v112);
            v123 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v123) = v122;
          *((_DWORD *)this + 50) += 4;
          goto LABEL_69;
        }
        v122 = v94 | (32 * v450) | 0x91000000;
        goto LABEL_66;
      }
      if ((*(_QWORD *)(v119 + 8) & 0x2800FFFFFFF7) == 0)
      {
LABEL_211:
        *(_DWORD *)(v119 + 20) = v120;
        goto LABEL_60;
      }
      if ((v121 ^ v120) < 2)
      {
LABEL_241:
        if ((v120 & 1) != 0)
          *(_QWORD *)v119 &= ~2uLL;
        goto LABEL_211;
      }
      v416 = *(_QWORD *)v119;
      if (*(_QWORD *)v119 != 4)
      {
        *(_QWORD *)v119 = v416 | 2;
        v418 = (unsigned int *)(v416 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v416 & 1) != 0)
        {
          v439 = 2 * *v418;
          do
          {
            if (!(v439 * 4))
              goto LABEL_240;
            v440 = *(_QWORD *)&v418[v439];
            if ((*(_BYTE *)(v440 + 19) & 0xC) != 0)
              break;
            v441 = *(_QWORD *)(v440 + 96);
            v442 = (v441 & 1) != 0 ? (v441 >> 1) & 3 : *(unsigned __int8 *)(v441 + 4);
            v439 -= 2;
          }
          while (v442 != 2);
          WTF::fastFree((unint64_t)v418, v106, v107, v108, v109, v110, v111, v112);
        }
        else
        {
          if (!v418)
            goto LABEL_240;
          if ((*((_BYTE *)v418 + 19) & 0xC) == 0)
          {
            v419 = *((_QWORD *)v418 + 12);
            v420 = (v419 & 1) != 0 ? (v419 >> 1) & 3 : *(unsigned __int8 *)(v419 + 4);
            if (v420 != 2)
              goto LABEL_240;
          }
        }
        *(_QWORD *)v119 = 4;
      }
LABEL_240:
      *(_DWORD *)(v118 + 32 * v115 + 16) = -21020677;
      goto LABEL_241;
    }
    v70 = v57;
    JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v57, 1, v65, v66, v67, v68, v69, (uint64_t)v469);
    v78 = *((_QWORD *)this + 702);
    v79 = *(_QWORD *)(v78 + 8);
    v80 = *(unsigned int *)((v11 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v81 = (uint64_t *)(v79 + 24);
    v82 = (uint64_t *)(v79 + 8);
    if ((v11 & 1) != 0)
      v82 = v81;
    v83 = *v82;
    v84 = *v82 + 32 * v80;
    v85 = *(_DWORD *)(v78 + 88);
    v86 = *(_DWORD *)(v84 + 20);
    v451 = v70;
    if (v85 == v86)
    {
LABEL_45:
      if ((*(_QWORD *)(v84 + 8) & 0xC00F0000000) != 0)
      {
        if (!*((_BYTE *)this + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197CA970CLL);
        }
        *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
        JSC::MacroAssemblerARM64::load8((uint64_t)this, v70 | 0x500000000, *((char *)this + 304), v73, v74, v75, v76, v77);
        JSC::MacroAssemblerARM64::branch32((uint64_t)this, 3, 17, 23, v87, v88, v89, v90, (uint64_t)v470);
        JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)this, (void *)((v70 << 32) | 0x80000000), v11, 0xFFFFF3FF0FFFFFFFLL, (uint64_t)v470, 1uLL, v91, v92);
        v453 = 0;
        LODWORD(v93) = 255;
      }
      else
      {
        v453 = 0;
        LODWORD(v93) = 255;
      }
      goto LABEL_48;
    }
    if ((*(_QWORD *)(v84 + 8) & 0x2800FFFFFFF7) == 0)
    {
LABEL_213:
      *(_DWORD *)(v84 + 20) = v85;
      goto LABEL_45;
    }
    if ((v86 ^ v85) < 2)
    {
LABEL_246:
      if ((v85 & 1) != 0)
        *(_QWORD *)v84 &= ~2uLL;
      goto LABEL_213;
    }
    v417 = *(_QWORD *)v84;
    if (*(_QWORD *)v84 != 4)
    {
      *(_QWORD *)v84 = v417 | 2;
      v421 = (unsigned int *)(v417 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v417 & 1) != 0)
      {
        v443 = 2 * *v421;
        do
        {
          if (!(v443 * 4))
            goto LABEL_245;
          v444 = *(_QWORD *)&v421[v443];
          if ((*(_BYTE *)(v444 + 19) & 0xC) != 0)
            break;
          v445 = *(_QWORD *)(v444 + 96);
          v446 = (v445 & 1) != 0 ? (v445 >> 1) & 3 : *(unsigned __int8 *)(v445 + 4);
          v443 -= 2;
        }
        while (v446 != 2);
        WTF::fastFree((unint64_t)v421, v71, v72, v73, v74, v75, v76, v77);
      }
      else
      {
        if (!v421)
          goto LABEL_245;
        if ((*((_BYTE *)v421 + 19) & 0xC) == 0)
        {
          v422 = *((_QWORD *)v421 + 12);
          v423 = (v422 & 1) != 0 ? (v422 >> 1) & 3 : *(unsigned __int8 *)(v422 + 4);
          if (v423 != 2)
            goto LABEL_245;
        }
      }
      *(_QWORD *)v84 = 4;
    }
LABEL_245:
    *(_DWORD *)(v83 + 32 * v80 + 16) = -21020677;
    goto LABEL_246;
  }
  if ((_DWORD)v12 == 21)
    return (uint64_t *)JSC::DFG::SpeculativeJIT::compileToBooleanString((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v12 == 22)
    return (uint64_t *)JSC::DFG::SpeculativeJIT::compileToBooleanStringOrOther(this, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)v12 != 49)
    goto LABEL_281;
  v285 = ~*(_DWORD *)((v11 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v285 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197CA99A8);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v285 + 12))
    v286 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  else
    v286 = -1;
  v287 = 0;
  v288 = (char *)this + 4968;
  v289 = (_DWORD *)((char *)this + 4976);
  v290 = 0x17u;
  v291 = -1;
  while (*v289)
  {
LABEL_167:
    ++v287;
    v289 += 3;
    if (v287 == 23)
    {
      v287 = v290;
      v293 = &v288[12 * v290];
      v294 = *(_DWORD *)v293;
      *(_QWORD *)v293 = 0xFFFFFFFF3FFFFFFFLL;
      v289 = v293 + 8;
      goto LABEL_170;
    }
  }
  v292 = *(v289 - 1);
  if (v292 != -1)
  {
    if (v292 < v291)
    {
      v290 = v287;
      v291 = *(v289 - 1);
    }
    goto LABEL_167;
  }
  v294 = *(v289 - 2);
  *((_QWORD *)v289 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_170:
  *v289 = 1;
  v295 = JSC::FPRInfo::toRegister::registerForIndex[v287];
  if (v294 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)this, v294, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v471, this, a3, a4, a5, a6, a7, a8);
  if (v8)
    v301 = 6;
  else
    v301 = 7;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v301, (char)v472, v296, v297, v298, v299, v300);
  if (v286 == -1)
    v286 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, v11, v302, v303, v304, v305, v306, v307);
  JSC::MacroAssemblerARM64::branchDoubleNonZero((uint64_t)&v457, (uint64_t)this, v286, v303, v304, v305, v306, v307);
  if (v8)
    v313 = 7;
  else
    v313 = 6;
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)this, (JSC::ARM64LogicalImmediate *)v313, (char)v472, v308, v309, v310, v311, v312);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v457, (uint64_t)this, v314, v315, v316, v317, v318, v319);
  v320 = (char)v472;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v321, v322, v323, v324, v325, v326);
  if (v320 > 15)
    v327 = -1;
  else
    v327 = v320;
  v328 = (char *)this + 12 * v327;
  v329 = *((_DWORD *)a2 + 12);
  *((_DWORD *)v328 + 1194) = v329;
  *((_DWORD *)v328 + 1195) = 4;
  v330 = ~v329;
  if (v330 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197CA99B0);
  }
  v331 = *((_QWORD *)this + 499) + 24 * (int)v330;
  v332 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v331 = a2;
  *(_DWORD *)(v331 + 8) = v332;
  *(_BYTE *)(v331 + 17) = v320;
  *(_DWORD *)(v331 + 12) = 21;
  *(_BYTE *)(v331 + 16) = 0;
  if (v471)
  {
    v333 = (char)v472;
    if ((char)v472 != -1)
    {
      if ((char)v472 > 15)
        v333 = -1;
      --*((_DWORD *)v471 + 3 * v333 + 1196);
    }
  }
  v334 = &v288[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v295]];
  --*((_DWORD *)v334 + 2);
  v43 = &v288[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v286]];
LABEL_31:
  --*((_DWORD *)v43 + 2);
  return result;
}

unsigned int *JSC::MacroAssemblerARM64::branchDoubleNonZero(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  JSC::AssemblerBuffer *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  char v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  unsigned int v27[2];
  char v28;
  __int16 v29;
  char v30;

  v10 = (32 * a3) | 0x1E602008;
  v11 = (JSC::AssemblerBuffer *)(a2 + 56);
  v12 = *(_DWORD *)(a2 + 200);
  if (v12 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v12) = v10;
  v13 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v13;
  if (*(_BYTE *)(a2 + 328))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a2, a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a2 + 200);
  }
  if (v13 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v13) = 1409286150;
  v14 = *(_DWORD *)(a2 + 200);
  v15 = v14 + 4;
  *(_DWORD *)(a2 + 200) = v14 + 4;
  v16 = v14 + 8;
  v17 = v14 + 4;
  if (v16 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, a2, a3, a4, a5, a6, a7, a8);
    v17 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v17) = -721215457;
  v18 = *(_DWORD *)(a2 + 200) + 4;
  *(_DWORD *)(a2 + 200) = v18;
  v19 = *(unsigned __int8 *)(a2 + 328);
  if (*(_BYTE *)(a2 + 328))
    v20 = -122;
  else
    v20 = -126;
  v27[0] = v15;
  v27[1] = 0;
  v28 = v20;
  v29 = 6;
  v30 = -1;
  if (v19)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a2, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a2 + 200);
  }
  if (v18 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v18) = 1409286145;
  v21 = *(_DWORD *)(a2 + 200);
  v22 = v21 + 4;
  *(_DWORD *)(a2 + 200) = v21 + 4;
  v23 = v21 + 8;
  v24 = v21 + 4;
  if (v23 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v11, a2, a3, a4, a5, a6, a7, a8);
    v24 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = -721215457;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v25 = -122;
  else
    v25 = -126;
  *(_DWORD *)a1 = v22;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = v25;
  *(_WORD *)(a1 + 9) = 1;
  *(_BYTE *)(a1 + 11) = -1;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v27, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::DFG::SpeculativeJIT::branchTest32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int8x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load32(a1, a2, *(char *)(a1 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, a1, 1, 17, v10, v11, v12, v13, (uint64_t)&v25, v14);
    result = a1 + 5264;
    v21 = v26;
    v27 = v25;
    v28 = v26;
    v29 = a3;
    v22 = *(unsigned int *)(a1 + 5276);
    if ((_DWORD)v22 == *(_DWORD *)(a1 + 5272))
    {
      result = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v22 + 1), (unint64_t)&v27, v15, v16, v17, v18, v19);
      v24 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
      *(_DWORD *)v24 = *(_DWORD *)result;
      *(_QWORD *)(v24 + 4) = *(_QWORD *)(result + 4);
      *(_QWORD *)(v24 + 16) = *(_QWORD *)(result + 16);
    }
    else
    {
      v23 = *(_QWORD *)result + 24 * v22;
      *(_DWORD *)v23 = v25;
      *(_QWORD *)(v23 + 4) = v21;
      *(_QWORD *)(v23 + 16) = a3;
    }
    ++*(_DWORD *)(a1 + 5276);
  }
  else
  {
    result = 6195;
    __break(0xC471u);
  }
  return result;
}

uint64_t JSC::DFG::SpeculativeJIT::branchDoubleZeroOrNaN(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  JSC::MacroAssemblerARM64::branchDoubleZeroOrNaN(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v20);
  result = a1 + 5264;
  v16 = v21;
  v22 = v20;
  v23 = v21;
  v24 = a4;
  v17 = *(unsigned int *)(a1 + 5276);
  if ((_DWORD)v17 == *(_DWORD *)(a1 + 5272))
  {
    result = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v17 + 1), (unint64_t)&v22, v10, v11, v12, v13, v14);
    v19 = *(_QWORD *)(a1 + 5264) + 24 * *(unsigned int *)(a1 + 5276);
    *(_DWORD *)v19 = *(_DWORD *)result;
    *(_QWORD *)(v19 + 4) = *(_QWORD *)(result + 4);
    *(_QWORD *)(v19 + 16) = *(_QWORD *)(result + 16);
  }
  else
  {
    v18 = *(_QWORD *)result + 24 * v17;
    *(_DWORD *)v18 = v20;
    *(_QWORD *)(v18 + 4) = v16;
    *(_QWORD *)(v18 + 16) = a4;
  }
  ++*(_DWORD *)(a1 + 5276);
  return result;
}

uint64_t *JSC::DFG::SpeculativeJIT::emitBranch(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::SpeculativeJIT *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  JSC::DFG::JSValueOperand *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *result;
  uint64_t *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int i;
  unsigned int v177;
  char v178;
  JSC::DFG::Graph *v179;
  unsigned int v180;
  uint64_t v181;
  _BOOL8 v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  int8x8_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  JSC::DFG::JSValueOperand *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  _DWORD *v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  char *v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  _DWORD *v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  char *v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  int v256;
  unsigned int *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int v275;
  int v276;
  unsigned int *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  unsigned int v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  unsigned int v315;
  uint64_t v316;
  int v317;
  unsigned int *v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  char isWatchingMasqueradesAsUndefinedWatchpointSet;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  unsigned int v363;
  uint64_t v364;
  int v365;
  unsigned int *v366;
  int v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t *v405;
  uint64_t v406;
  uint64_t v407;
  unsigned int v408;
  int v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  unsigned int v418;
  int v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  _QWORD *v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  char *v450;
  unsigned int v451;
  unsigned int v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  _DWORD *v462;
  unsigned int v463;
  unsigned int v464;
  unsigned int v465;
  unsigned int *v466;
  unsigned int v467;
  unsigned int *v468;
  uint64_t v469;
  unsigned int v470;
  char v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  _QWORD *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  char *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  _QWORD *v507;
  _QWORD *v508;
  uint64_t v509;
  void *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  int8x8_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  JSC::DFG::Node *v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unsigned int v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  JSC::DFG::Node *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  unsigned int v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  _QWORD *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unsigned int *v600;
  uint64_t v601;
  unsigned int v602;
  unsigned int *v603;
  uint64_t v604;
  unsigned int v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  unsigned int *v625;
  uint64_t v626;
  unsigned int v627;
  unsigned int *v628;
  uint64_t v629;
  unsigned int v630;
  unsigned int *v631;
  uint64_t v632;
  unsigned int v633;
  unsigned int *v634;
  uint64_t v635;
  unsigned int v636;
  unsigned int *v637;
  uint64_t v638;
  unsigned int v639;
  unsigned int *v640;
  uint64_t v641;
  unsigned int v642;
  unsigned int *v643;
  uint64_t v644;
  unsigned int v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  unsigned int v649;
  unsigned int *v650;
  uint64_t v651;
  unsigned int v652;
  unsigned int *v653;
  uint64_t v654;
  unsigned int v655;
  unsigned int *v656;
  uint64_t v657;
  unsigned int v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  unsigned int v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  unsigned int v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unsigned int v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  unsigned int v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  unsigned int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unsigned int v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unsigned int v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  unsigned int v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  unsigned int v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  unsigned int v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unsigned int v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unsigned int v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  char v723;
  uint64_t v724;
  unint64_t v725;
  int v726;
  char *v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  _DWORD v735[2];
  char v736;
  __int16 v737;
  char v738;
  __int128 v739;
  _BYTE v740[12];
  uint64_t v741;
  char v742;
  _BYTE v743[12];
  uint64_t *v744;
  unint64_t v745;
  char v746;
  _BYTE v747[11];
  unsigned int v748;
  uint64_t v749;
  __int128 v750;
  uint64_t v751;

  v9 = (JSC::DFG::SpeculativeJIT *)this;
  v10 = (uint64_t *)*((_QWORD *)a2 + 9);
  v11 = *v10;
  v12 = v10[2];
  v13 = *((_QWORD *)a2 + 3);
  v14 = (v13 >> 50) & 0x3F;
  if ((v14 - 6) < 2)
  {
    v15 = (JSC::DFG::JSValueOperand *)JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v744, (JSC::DFG::SpeculativeJIT *)this, v13, a4, a5, a6, a7, a8);
    v30 = JSC::DFG::JSValueOperand::gpr(v15, v16, v17, v18, v19, v20, v21, v22);
    v32 = *((_QWORD *)a2 + 3);
    v33 = *((_QWORD *)v9 + 702);
    v34 = *(_QWORD *)(v33 + 8);
    v35 = *(unsigned int *)((v32 & 0xFF00FFFFFFFFFFFELL) + 0x14);
    v36 = (uint64_t *)(v34 + 24);
    v37 = (uint64_t *)(v34 + 8);
    if ((v32 & 1) != 0)
      v38 = v36;
    else
      v38 = v37;
    v39 = *v38;
    v40 = *v38 + 32 * v35;
    v41 = *(_DWORD *)(v33 + 88);
    v42 = *(_DWORD *)(v40 + 20);
    if (v41 != v42)
    {
      if ((*(_QWORD *)(v40 + 8) & 0x2800FFFFFFF7) != 0)
      {
        if ((v42 ^ v41) >= 2)
        {
          v204 = *(_QWORD *)v40;
          if (*(_QWORD *)v40 != 4)
          {
            *(_QWORD *)v40 = v204 | 2;
            v468 = (unsigned int *)(v204 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v204 & 1) != 0)
            {
              v646 = 2 * *v468;
              while (v646 * 4)
              {
                v647 = *(_QWORD *)&v468[v646];
                if ((*(_BYTE *)(v647 + 19) & 0xC) == 0)
                {
                  v648 = *(_QWORD *)(v647 + 96);
                  v649 = (v648 & 1) != 0 ? (v648 >> 1) & 3 : *(unsigned __int8 *)(v648 + 4);
                  v646 -= 2;
                  if (v649 != 2)
                    continue;
                }
                WTF::fastFree((unint64_t)v468, v23, v24, v25, v26, v27, v28, v29);
                goto LABEL_213;
              }
            }
            else if (v468)
            {
              if ((*((_BYTE *)v468 + 19) & 0xC) != 0
                || ((v469 = *((_QWORD *)v468 + 12), (v469 & 1) != 0)
                  ? (v470 = (v469 >> 1) & 3)
                  : (v470 = *(unsigned __int8 *)(v469 + 4)),
                    v470 == 2))
              {
LABEL_213:
                *(_QWORD *)v40 = 4;
              }
            }
          }
          *(_DWORD *)(v39 + 32 * v35 + 16) = -21020677;
        }
        if ((v41 & 1) != 0)
          *(_QWORD *)v40 &= ~2uLL;
      }
      *(_DWORD *)(v40 + 20) = v41;
    }
    if ((*(_QWORD *)(v40 + 8) & 0xFFFFFEFFFFFFFFFFLL) != 0)
    {
      JSC::MacroAssemblerARM64::branch64((uint64_t)v9, 0, v30, 6, v26, v27, v28, v29, (uint64_t)v743);
      v161 = (_QWORD *)((char *)v9 + 5264);
      v162 = *(_QWORD *)&v743[4];
      LODWORD(v750) = *(_DWORD *)v743;
      *(_QWORD *)((char *)&v750 + 4) = *(_QWORD *)&v743[4];
      v751 = v12;
      v163 = *((unsigned int *)v9 + 1319);
      if ((_DWORD)v163 == *((_DWORD *)v9 + 1318))
      {
        v489 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9 + 5264, (void *)(v163 + 1), (unint64_t)&v750, v156, v157, v158, v159, v160);
        v490 = *((_QWORD *)v9 + 658) + 24 * *((unsigned int *)v9 + 1319);
        *(_DWORD *)v490 = *(_DWORD *)v489;
        *(_QWORD *)(v490 + 4) = *(_QWORD *)(v489 + 4);
        *(_QWORD *)(v490 + 16) = *(_QWORD *)(v489 + 16);
      }
      else
      {
        v164 = *v161 + 24 * v163;
        *(_DWORD *)v164 = *(_DWORD *)v743;
        *(_QWORD *)(v164 + 4) = v162;
        *(_QWORD *)(v164 + 16) = v12;
      }
      ++*((_DWORD *)v9 + 1319);
      JSC::MacroAssemblerARM64::branch64((uint64_t)v9, 0, v30, 7, v157, v158, v159, v160, (uint64_t)v743);
      v172 = *(_QWORD *)&v743[4];
      LODWORD(v750) = *(_DWORD *)v743;
      *(_QWORD *)((char *)&v750 + 4) = *(_QWORD *)&v743[4];
      v751 = v11;
      v173 = *((unsigned int *)v9 + 1319);
      if ((_DWORD)v173 == *((_DWORD *)v9 + 1318))
      {
        v491 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9 + 5264, (void *)(v173 + 1), (unint64_t)&v750, v167, v168, v169, v170, v171);
        v492 = *((_QWORD *)v9 + 658) + 24 * *((unsigned int *)v9 + 1319);
        *(_DWORD *)v492 = *(_DWORD *)v491;
        *(_QWORD *)(v492 + 4) = *(_QWORD *)(v491 + 4);
        *(_QWORD *)(v492 + 16) = *(_QWORD *)(v491 + 16);
      }
      else
      {
        v174 = *v161 + 24 * v173;
        *(_DWORD *)v174 = *(_DWORD *)v743;
        *(_QWORD *)(v174 + 4) = v172;
        *(_QWORD *)(v174 + 16) = v11;
      }
      ++*((_DWORD *)v9 + 1319);
      v175 = *((_QWORD *)a2 + 3);
      for (i = *((_DWORD *)v9 + 50); i < *((_DWORD *)v9 + 13); *((_DWORD *)v9 + 50) = i)
      {
        if ((i + 4) > *((_DWORD *)v9 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), v165, v166, v167, v168, v169, v170, v171);
          i = *((_DWORD *)v9 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v9 + 7) + i) = -721215457;
        i = *((_DWORD *)v9 + 50) + 4;
      }
      v177 = i;
      if ((i + 4) > *((_DWORD *)v9 + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), v165, v166, v167, v168, v169, v170, v171);
        v177 = *((_DWORD *)v9 + 50);
      }
      *(_DWORD *)(*((_QWORD *)v9 + 7) + v177) = 335544320;
      *((_DWORD *)v9 + 50) += 4;
      if (*((_BYTE *)v9 + 328))
        v178 = 69;
      else
        v178 = 65;
      v735[0] = i;
      v735[1] = 0;
      v736 = v178;
      v737 = 15;
      v738 = -1;
      JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)v9, (void *)(((unint64_t)v30 << 32) | 0x80000000), v175, 0x10000000000uLL, (uint64_t)v735, 1uLL, v170, v171);
    }
    else
    {
      v43 = *((_QWORD *)v9 + 495);
      v44 = *(_DWORD *)(*((_QWORD *)v9 + 496) + 8) + 1;
      while (v44 < *(_DWORD *)(v43 + 60))
      {
        v45 = *(_QWORD *)(*(_QWORD *)(v43 + 48) + 8 * v44++);
        if (v45)
          goto LABEL_10;
      }
      v45 = 0;
LABEL_10:
      if (v11 == v45)
        v46 = v11;
      else
        v46 = v12;
      if (v11 != v45)
        v12 = v11;
      JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, (uint64_t)v9, v11 != v45, v30, v26, v27, v28, v29, (uint64_t)v743, v31);
      v52 = (_QWORD *)((char *)v9 + 5264);
      v53 = *(_QWORD *)&v743[4];
      LODWORD(v750) = *(_DWORD *)v743;
      *(_QWORD *)((char *)&v750 + 4) = *(_QWORD *)&v743[4];
      v751 = v12;
      v54 = *((unsigned int *)v9 + 1319);
      if ((_DWORD)v54 == *((_DWORD *)v9 + 1318))
      {
        v202 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, (void *)(v54 + 1), (unint64_t)&v750, v47, v48, v49, v50, v51);
        v203 = *((_QWORD *)v9 + 658) + 24 * *((unsigned int *)v9 + 1319);
        *(_DWORD *)v203 = *(_DWORD *)v202;
        *(_QWORD *)(v203 + 4) = *(_QWORD *)(v202 + 4);
        *(_QWORD *)(v203 + 16) = *(_QWORD *)(v202 + 16);
      }
      else
      {
        v55 = *v52 + 24 * v54;
        *(_DWORD *)v55 = *(_DWORD *)v743;
        *(_QWORD *)(v55 + 4) = v53;
        *(_QWORD *)(v55 + 16) = v12;
      }
      ++*((_DWORD *)v9 + 1319);
      JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v46, 0, v47, v48, v49, v50, v51);
    }
    result = JSC::DFG::SpeculativeJIT::use(v744, (JSC::DFG::Node *)(v745 & 0xFF00FFFFFFFFFFFFLL), v56, v57, v58, v59, v60, v61);
    goto LABEL_19;
  }
  if (((v13 >> 50) & 0x3F) <= 0x14)
  {
    if ((_DWORD)v14 == 19)
    {
      JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v750, (JSC::DFG::SpeculativeJIT *)this, v13, a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v744, v9, v65, v66, v67, v68, v69, v70);
      v78 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v750, v71, v72, v73, v74, v75, v76, v77);
      v728 = (char)v745;
      v726 = v78;
      if (!JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*((JSC::DFG::Graph **)v9 + 495), *((JSC::DFG::Node **)v9 + 497), v79, v80, v81, v82, v83, v84))
      {
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v743, v9, v85, v86, v87, v88, v89, v90);
        v493 = *(_QWORD *)v743;
        v114 = v743[8];
        v733 = v78;
        JSC::AssemblyHelpers::branchIfNotCell((uint64_t)v9, v78, 1, v494, v495, v496, v497, v498, (uint64_t)&v741);
        v505 = *((_QWORD *)v9 + 702);
        v506 = *(_QWORD *)(v505 + 8);
        v731 = v13 & 0xFF00FFFFFFFFFFFELL;
        v507 = (_QWORD *)(v506 + 24);
        v508 = (_QWORD *)(v506 + 8);
        if ((v13 & 1) != 0)
          v508 = v507;
        v509 = *v508 + 32 * *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v510 = (void *)*(unsigned int *)(v505 + 88);
        if ((_DWORD)v510 != *(_DWORD *)(v509 + 20))
        {
          if ((*(_QWORD *)(v509 + 8) & 0x2800FFFFFFF7) != 0)
            JSC::DFG::AbstractValue::fastForwardToSlow((uint64_t *)v509, v510, v499, v500, v501, v502, v503, v504);
          else
            *(_DWORD *)(v509 + 20) = (_DWORD)v510;
        }
        if ((*(_QWORD *)(v509 + 8) & 0xC00F0000000) != 0)
        {
          if (!*((_BYTE *)v9 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x197CAC558);
          }
          *(_DWORD *)(*((_QWORD *)v9 + 37) + 208) &= ~*((_DWORD *)v9 + 80);
          JSC::MacroAssemblerARM64::load8((uint64_t)v9, v78 | 0x500000000, *((char *)v9 + 304), v500, v501, v502, v503, v504);
          JSC::MacroAssemblerARM64::branch32((uint64_t)v9, 3, 17, 23, v511, v512, v513, v514, (uint64_t)&v739);
          JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)v9, (void *)(((unint64_t)v78 << 32) | 0x80000000), v13, 0xFFFFF3FF0FFFFFFFLL, (uint64_t)&v739, 1uLL, v515, v516);
        }
        if (!*((_BYTE *)v9 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197CAC4B8);
        }
        *(_DWORD *)(*((_QWORD *)v9 + 37) + 208) &= ~*((_DWORD *)v9 + 80);
        JSC::MacroAssemblerARM64::load8((uint64_t)v9, v78 | 0x600000000, *((char *)v9 + 304), v500, v501, v502, v503, v504);
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)1, (uint64_t)v9, 0, 17, v517, v518, v519, v520, (uint64_t)&v748, v521);
        JSC::MacroAssemblerARM64::load32((uint64_t)v9, v78, (char)v114, v522, v523, v524, v525, v526);
        v534 = *((_DWORD *)v9 + 50);
        if (v534 + 4 > *((_DWORD *)v9 + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), v527, (uint64_t)v528, v529, v530, v531, v532, v533);
          v534 = *((_DWORD *)v9 + 50);
        }
        *(_DWORD *)(*((_QWORD *)v9 + 7) + v534) = v114 & 0x1F | (32 * (v114 & 0x1F)) | 0xD37CEC00;
        *((_DWORD *)v9 + 50) += 4;
        v535 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(v9, *((JSC::DFG::JITCompiler **)v9 + 497), v528, v529, v530, v531, v532, v533);
        if ((_DWORD)v535 == -1)
        {
          if (!*((_BYTE *)v9 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x197CAC578);
          }
          v542 = v536;
          *(_DWORD *)(*((_QWORD *)v9 + 37) + 208) &= ~*((_DWORD *)v9 + 80);
          JSC::MacroAssemblerARM64::load64((uint64_t)v9, v114 | 0x2800000000, *((char *)v9 + 304), v537, v538, v539, v540, v541);
          JSC::MacroAssemblerARM64::branch64((uint64_t)v9, 0, 17, v542, v543, v544, v545, v546, (uint64_t)v740);
        }
        else
        {
          JSC::MacroAssemblerARM64::branch64((uint64_t)v740, (uint64_t)v9, v114 | 0x2800000000, (v535 << 35) + 0x380000001ALL, v538, v539, v540, v541);
        }
        v730 = v493;
        v101 = v13 & 1;
        *(_DWORD *)v743 = *(_DWORD *)v740;
        *(_QWORD *)&v743[4] = *(_QWORD *)&v740[4];
        JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)v9, 1uLL, (JSC::DFG::Node *)(((unint64_t)v78 << 32) | 0x80000000), (JSC::DFG::Node *)(v13 & 0xFF00FFFFFFFFFFFFLL), (int *)v743);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(&v748, (uint64_t)v9, v551, v552, v553, v554, v555, v556);
        goto LABEL_37;
      }
      v733 = v78;
      JSC::AssemblyHelpers::branchIfNotCell((uint64_t)v9, v78, 1, v86, v87, v88, v89, v90, (uint64_t)&v741);
      v98 = *((_QWORD *)v9 + 702);
      v99 = *(_QWORD *)(v98 + 8);
      v731 = v13 & 0xFF00FFFFFFFFFFFELL;
      v100 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v101 = v13 & 1;
      v102 = (uint64_t *)(v99 + 24);
      v103 = (uint64_t *)(v99 + 8);
      if ((v13 & 1) != 0)
        v103 = v102;
      v104 = *v103;
      v105 = *v103 + 32 * v100;
      v106 = *(_DWORD *)(v98 + 88);
      v107 = *(_DWORD *)(v105 + 20);
      if (v106 == v107)
      {
LABEL_33:
        if ((*(_QWORD *)(v105 + 8) & 0xC00F0000000) != 0)
        {
          if (!*((_BYTE *)v9 + 212))
          {
            __break(0xC471u);
            goto LABEL_585;
          }
          *(_DWORD *)(*((_QWORD *)v9 + 37) + 208) &= ~*((_DWORD *)v9 + 80);
          JSC::MacroAssemblerARM64::load8((uint64_t)v9, v733 | 0x500000000, *((char *)v9 + 304), v93, v94, v95, v96, v97);
          JSC::MacroAssemblerARM64::branch32((uint64_t)v9, 3, 17, 23, v108, v109, v110, v111, (uint64_t)v743);
          JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)v9, (void *)((v733 << 32) | 0x80000000), v13, 0xFFFFF3FF0FFFFFFFLL, (uint64_t)v743, 1uLL, v112, v113);
        }
        v730 = 0;
        LODWORD(v114) = 255;
LABEL_37:
        JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v11, 1, v93, v94, v95, v96, v97);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v741, (uint64_t)v9, v115, v116, v117, v118, v119, v120);
        v128 = *((_QWORD *)v9 + 702);
        v129 = *(_QWORD *)(v128 + 8);
        v130 = *(unsigned int *)(v731 + 20);
        v131 = (uint64_t *)(v129 + 24);
        v132 = (uint64_t *)(v129 + 8);
        if (v101)
          v132 = v131;
        v133 = *v132;
        v134 = *v132 + 32 * v130;
        v135 = *(_DWORD *)(v128 + 88);
        v136 = *(_DWORD *)(v134 + 20);
        if (v135 == v136)
        {
LABEL_40:
          if ((*(_QWORD *)(v134 + 8) & 0xFFFFD1FF00000008) == 0)
            goto LABEL_51;
          if (v728 == v726)
          {
LABEL_50:
            JSC::MacroAssemblerARM64::and64((uint64_t)v9, -9, v728, (char)v728);
            JSC::MacroAssemblerARM64::branch64((uint64_t)v9, 1, (char)v728, 2, v142, v143, v144, v145, (uint64_t)&v748);
            JSC::DFG::SpeculativeJIT::typeCheck((uint64_t)v9, (void *)((v733 << 32) | 0x80000000), v13, 0x2E00FFFFFFF7uLL, (uint64_t)&v748, 1uLL, v146, v147);
LABEL_51:
            JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v12, 0, v123, v124, v125, v126, v127);
            result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v9, *((JSC::DFG::Node **)v9 + 497), v148, v149, v150, v151, v152, v153);
            if (v730 && (_DWORD)v114 != 255)
            {
              if ((char)v114 > 15)
                v154 = -1;
              else
                v154 = v114;
              --*(_DWORD *)(v730 + 12 * v154 + 4784);
            }
            if (v744)
            {
              v155 = (char)v745;
              if ((char)v745 != -1)
              {
                if ((char)v745 > 15)
                  v155 = -1;
                --*((_DWORD *)v744 + 3 * v155 + 1196);
              }
            }
            if ((*((_QWORD *)&v750 + 1) & 0xFF00FFFFFFFFFFFFLL) == 0)
              return result;
            v63 = (uint64_t *)v750;
            v64 = (char)v751;
            goto LABEL_21;
          }
          if (v726 == 63)
          {
            if (v728 != 31)
            {
              v139 = v728 & 0x1F | 0xD2800000;
              goto LABEL_47;
            }
          }
          else if (v726 != 31 && v728 != 31)
          {
            v137 = v728 | ((v726 & 0x1F) << 16);
            v138 = -1442839584;
LABEL_46:
            v139 = v137 | v138;
LABEL_47:
            v141 = (unsigned int *)((char *)v9 + 200);
            v140 = *((_DWORD *)v9 + 50);
            if (v140 + 4 > *((_DWORD *)v9 + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), (uint64_t)v121, v122, v123, v124, v125, v126, v127);
              v140 = *v141;
            }
            *(_DWORD *)(*((_QWORD *)v9 + 7) + v140) = v139;
            *v141 += 4;
            goto LABEL_50;
          }
          v137 = v728 | (32 * v726);
          v138 = -1862270976;
          goto LABEL_46;
        }
        if ((*(_QWORD *)(v134 + 8) & 0x2800FFFFFFF7) == 0)
        {
LABEL_227:
          *(_DWORD *)(v134 + 20) = v135;
          goto LABEL_40;
        }
        if ((v136 ^ v135) < 2)
        {
LABEL_248:
          if ((v135 & 1) != 0)
            *(_QWORD *)v134 &= ~2uLL;
          goto LABEL_227;
        }
        v547 = *(_QWORD *)v134;
        if (*(_QWORD *)v134 != 4)
        {
          *(_QWORD *)v134 = v547 | 2;
          v600 = (unsigned int *)(v547 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v547 & 1) != 0)
          {
            v661 = 2 * *v600;
            do
            {
              if (!(v661 * 4))
                goto LABEL_247;
              v662 = *(_QWORD *)&v600[v661];
              if ((*(_BYTE *)(v662 + 19) & 0xC) != 0)
                break;
              v663 = *(_QWORD *)(v662 + 96);
              v664 = (v663 & 1) != 0 ? (v663 >> 1) & 3 : *(unsigned __int8 *)(v663 + 4);
              v661 -= 2;
            }
            while (v664 != 2);
            WTF::fastFree((unint64_t)v600, v121, v122, v123, v124, v125, v126, v127);
          }
          else
          {
            if (!v600)
              goto LABEL_247;
            if ((*((_BYTE *)v600 + 19) & 0xC) == 0)
            {
              v601 = *((_QWORD *)v600 + 12);
              v602 = (v601 & 1) != 0 ? (v601 >> 1) & 3 : *(unsigned __int8 *)(v601 + 4);
              if (v602 != 2)
                goto LABEL_247;
            }
          }
          *(_QWORD *)v134 = 4;
        }
LABEL_247:
        *(_DWORD *)(v133 + 32 * v130 + 16) = -21020677;
        goto LABEL_248;
      }
      if ((*(_QWORD *)(v105 + 8) & 0x2800FFFFFFF7) == 0)
      {
LABEL_229:
        *(_DWORD *)(v105 + 20) = v106;
        goto LABEL_33;
      }
      if ((v107 ^ v106) < 2)
      {
LABEL_261:
        if ((v106 & 1) != 0)
          *(_QWORD *)v105 &= ~2uLL;
        goto LABEL_229;
      }
      v548 = *(_QWORD *)v105;
      if (*(_QWORD *)v105 != 4)
      {
        *(_QWORD *)v105 = v548 | 2;
        v603 = (unsigned int *)(v548 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v548 & 1) != 0)
        {
          v665 = 2 * *v603;
          do
          {
            if (!(v665 * 4))
              goto LABEL_260;
            v666 = *(_QWORD *)&v603[v665];
            if ((*(_BYTE *)(v666 + 19) & 0xC) != 0)
              break;
            v667 = *(_QWORD *)(v666 + 96);
            v668 = (v667 & 1) != 0 ? (v667 >> 1) & 3 : *(unsigned __int8 *)(v667 + 4);
            v665 -= 2;
          }
          while (v668 != 2);
          WTF::fastFree((unint64_t)v603, v91, v92, v93, v94, v95, v96, v97);
        }
        else
        {
          if (!v603)
            goto LABEL_260;
          if ((*((_BYTE *)v603 + 19) & 0xC) == 0)
          {
            v604 = *((_QWORD *)v603 + 12);
            v605 = (v604 & 1) != 0 ? (v604 >> 1) & 3 : *(unsigned __int8 *)(v604 + 4);
            if (v605 != 2)
              goto LABEL_260;
          }
        }
        *(_QWORD *)v105 = 4;
      }
LABEL_260:
      *(_DWORD *)(v104 + 32 * v100 + 16) = -21020677;
      goto LABEL_261;
    }
    if ((_DWORD)v14 != 1)
    {
      if (!(_DWORD)v14)
      {
        v205 = (JSC::DFG::JSValueOperand *)JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v744, (JSC::DFG::SpeculativeJIT *)this, v13, a4, a5, a6, a7, a8);
        v734 = JSC::DFG::JSValueOperand::gpr(v205, v206, v207, v208, v209, v210, v211, v212);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)v743, v9, v213, v214, v215, v216, v217, v218);
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v741, v9, v219, v220, v221, v222, v223, v224);
        v232 = 0;
        v233 = (char *)v9 + 4968;
        v234 = (_DWORD *)((char *)v9 + 4976);
        v235 = 0x17u;
        v236 = -1;
        while (1)
        {
          if (!*v234)
          {
            v237 = *(v234 - 1);
            if (v237 == -1)
            {
              v239 = *(v234 - 2);
              *((_QWORD *)v234 - 1) = 0xFFFFFFFF3FFFFFFFLL;
              goto LABEL_110;
            }
            if (v237 < v236)
            {
              v235 = v232;
              v236 = *(v234 - 1);
            }
          }
          ++v232;
          v234 += 3;
          if (v232 == 23)
          {
            v232 = v235;
            v238 = &v233[12 * v235];
            v239 = *(_DWORD *)v238;
            *(_QWORD *)v238 = 0xFFFFFFFF3FFFFFFFLL;
            v234 = v238 + 8;
LABEL_110:
            *v234 = 1;
            v240 = JSC::FPRInfo::toRegister::registerForIndex[v232];
            if (v239 != 0x3FFFFFFF)
              JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v239, v226, v227, v228, v229, v230, v231);
            v241 = 0;
            v242 = (_DWORD *)((char *)v9 + 4976);
            v243 = 0x17u;
            v244 = -1;
            while (1)
            {
              if (!*v242)
              {
                v245 = *(v242 - 1);
                if (v245 == -1)
                {
                  v247 = *(v242 - 2);
                  *((_QWORD *)v242 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_120:
                  v727 = (char *)v9 + 4968;
                  v729 = v240;
                  *v242 = 1;
                  v732 = JSC::FPRInfo::toRegister::registerForIndex[v241];
                  if (v247 != 0x3FFFFFFF)
                    JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v247, v226, v227, v228, v229, v230, v231);
                  v724 = v743[8];
                  v723 = v742;
                  v248 = *((_QWORD *)v9 + 702);
                  v249 = *(_QWORD *)(v248 + 8);
                  v250 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                  v251 = (uint64_t *)(v249 + 24);
                  v252 = (uint64_t *)(v249 + 8);
                  if ((v13 & 1) != 0)
                    v252 = v251;
                  v253 = *v252;
                  v254 = *v252 + 32 * v250;
                  v255 = *(_DWORD *)(v248 + 88);
                  v257 = (unsigned int *)(v254 + 20);
                  v256 = *(_DWORD *)(v254 + 20);
                  if (v255 == v256)
                  {
LABEL_125:
                    v258 = *(_QWORD *)(v254 + 8);
                    v259 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                    if ((v258 & 0x2800FFFFFFF7) == 0)
                      goto LABEL_156;
                    v260 = *(_QWORD *)(v248 + 8);
                    v261 = (uint64_t *)(v260 + 24);
                    v262 = (uint64_t *)(v260 + 8);
                    if ((v13 & 1) != 0)
                      v262 = v261;
                    v263 = *v262;
                    v264 = *v262 + 32 * v259;
                    v265 = *(_DWORD *)(v248 + 88);
                    v266 = *(_DWORD *)(v264 + 20);
                    if (v265 == v266)
                    {
LABEL_129:
                      v267 = *(_QWORD *)(v264 + 8);
                      *(_QWORD *)v740 = 0xFFFFFFFFLL;
                      *(_DWORD *)&v740[8] = -16773311;
                      v725 = v267 & 0xFFFFD7FF00000008;
                      if ((v267 & 0xFFFFD7FF00000008) != 0)
                      {
                        JSC::AssemblyHelpers::branchIfNotCell((uint64_t)v9, v734, 1, v227, v228, v229, v230, v231, (uint64_t)&v750);
                        *(_DWORD *)v740 = v750;
                        *(_QWORD *)&v740[4] = *(_QWORD *)((char *)&v750 + 4);
                      }
                      v268 = *((_QWORD *)v9 + 702);
                      v269 = *(_QWORD *)(v268 + 8);
                      v270 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                      v271 = (uint64_t *)(v269 + 24);
                      v272 = (uint64_t *)(v269 + 8);
                      if ((v13 & 1) != 0)
                        v272 = v271;
                      v273 = *v272;
                      v274 = *v272 + 32 * v270;
                      v275 = *(_DWORD *)(v268 + 88);
                      v277 = (unsigned int *)(v274 + 20);
                      v276 = *(_DWORD *)(v274 + 20);
                      if (v275 == v276)
                      {
LABEL_134:
                        v278 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                        if ((*(_BYTE *)(v274 + 11) & 0x30) == 0)
                          goto LABEL_142;
                        v279 = *(_QWORD *)(v268 + 8);
                        v280 = (uint64_t *)(v279 + 24);
                        v281 = (uint64_t *)(v279 + 8);
                        if ((v13 & 1) != 0)
                          v281 = v280;
                        v282 = *v281;
                        v283 = *v281 + 32 * v278;
                        v284 = *(_DWORD *)(v268 + 88);
                        v285 = *(_DWORD *)(v283 + 20);
                        if (v284 == v285)
                        {
LABEL_138:
                          v286 = *(_QWORD *)(v283 + 8);
                          *(_QWORD *)&v750 = 0xFFFFFFFFLL;
                          DWORD2(v750) = -16773311;
                          if ((v286 & 0x2C00CFFFFFF7) != 0)
                          {
                            if (!*((_BYTE *)v9 + 212))
                            {
                              __break(0xC471u);
                              JUMPOUT(0x197CAC35CLL);
                            }
                            *(_DWORD *)(*((_QWORD *)v9 + 37) + 208) &= ~*((_DWORD *)v9 + 80);
                            JSC::MacroAssemblerARM64::load8((uint64_t)v9, v734 | 0x500000000, *((char *)v9 + 304), v227, v228, v229, v230, v231);
                            JSC::MacroAssemblerARM64::branch32((uint64_t)v9, 1, 17, 2, v287, v288, v289, v290, (uint64_t)&v739);
                            LODWORD(v750) = v739;
                            *(_QWORD *)((char *)&v750 + 4) = *(_QWORD *)((char *)&v739 + 4);
                            JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v739, v9, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 44) + 16) + 41968), v291, v292, v293, v294, v295);
                            JSC::DFG::SpeculativeJIT::branchLinkableConstant<JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>((uint64_t)v9, 0, v734, v739, *((uint64_t *)&v739 + 1), v12, v296, v297);
                            JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v11, 1, v298, v299, v300, v301, v302);
                            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v750, (uint64_t)v9, v303, v304, v305, v306, v307, v308);
                          }
                          else
                          {
                            JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v739, v9, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 44) + 16) + 41968), v227, v228, v229, v230, v231);
                            JSC::DFG::SpeculativeJIT::branchLinkableConstant<JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant>((uint64_t)v9, 0, v734, v739, *((uint64_t *)&v739 + 1), v12, v616, v617);
                            JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v11, 1, v618, v619, v620, v621, v622);
                          }
                          v268 = *((_QWORD *)v9 + 702);
                          LODWORD(v278) = *(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
LABEL_142:
                          v309 = *(_QWORD *)(v268 + 8);
                          v310 = v278;
                          v311 = (uint64_t *)(v309 + 24);
                          v312 = (uint64_t *)(v309 + 8);
                          if ((v13 & 1) != 0)
                            v312 = v311;
                          v313 = *v312;
                          v314 = *v312 + 32 * v278;
                          v315 = *(_DWORD *)(v268 + 88);
                          v316 = *v312 + 32 * v310;
                          v319 = *(_DWORD *)(v316 + 20);
                          v318 = (unsigned int *)(v316 + 20);
                          v317 = v319;
                          if (v315 == v319)
                          {
LABEL_145:
                            if ((*(_BYTE *)(v314 + 13) & 8) == 0)
                              goto LABEL_152;
                            v320 = *((_QWORD *)v9 + 702);
                            v321 = *(_QWORD *)(v320 + 8);
                            v322 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                            v323 = (uint64_t *)(v321 + 24);
                            v324 = (uint64_t *)(v321 + 8);
                            if ((v13 & 1) != 0)
                              v324 = v323;
                            v325 = *v324;
                            v326 = *v324 + 32 * v322;
                            v327 = *(_DWORD *)(v320 + 88);
                            v328 = *(_DWORD *)(v326 + 20);
                            if (v327 == v328)
                            {
LABEL_149:
                              v329 = *(_QWORD *)(v326 + 8);
                              *(_QWORD *)&v750 = 0xFFFFFFFFLL;
                              DWORD2(v750) = -16773311;
                              if ((v329 & 0x2400FFFFFFF7) != 0)
                              {
                                if (!*((_BYTE *)v9 + 212))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x197CAC37CLL);
                                }
                                *(_DWORD *)(*((_QWORD *)v9 + 37) + 208) &= ~*((_DWORD *)v9 + 80);
                                JSC::MacroAssemblerARM64::load8((uint64_t)v9, v734 | 0x500000000, *((char *)v9 + 304), v227, v228, v229, v230, v231);
                                JSC::MacroAssemblerARM64::branch32((uint64_t)v9, 1, 17, 3, v330, v331, v332, v333, (uint64_t)&v748);
                                LODWORD(v750) = v748;
                                *(_QWORD *)((char *)&v750 + 4) = v749;
                                JSC::DFG::SpeculativeJIT::branchTest32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>((uint64_t)v9, v734 | 0x800000000, v11, v334, v335, v336, v337, v338);
                                JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v12, 1, v339, v340, v341, v342, v343);
                                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v750, (uint64_t)v9, v344, v345, v346, v347, v348, v349);
                              }
                              else
                              {
                                JSC::DFG::SpeculativeJIT::branchTest32<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address>((uint64_t)v9, v734 | 0x800000000, v11, v227, v228, v229, v230, v231);
                                JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v12, 1, v709, v710, v711, v712, v713);
                              }
LABEL_152:
                              isWatchingMasqueradesAsUndefinedWatchpointSet = JSC::DFG::Graph::isWatchingMasqueradesAsUndefinedWatchpointSet(*((JSC::DFG::Graph **)v9 + 495), *((JSC::DFG::Node **)v9 + 497), v226, v227, v228, v229, v230, v231);
                              v356 = v11;
                              if ((isWatchingMasqueradesAsUndefinedWatchpointSet & 1) == 0)
                              {
                                JSC::DFG::SpeculativeJIT::branchTest8<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Address,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32>((uint64_t)v9, v734 | 0x600000000, v11, v351, v352, v353, v354, v355);
                                JSC::MacroAssemblerARM64::load32((uint64_t)v9, v734, (char)v724, v561, v562, v563, v564, v565);
                                v573 = *((_DWORD *)v9 + 50);
                                if (v573 + 4 > *((_DWORD *)v9 + 48))
                                {
                                  JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v9 + 56), v566, (uint64_t)v567, v568, v569, v570, v571, v572);
                                  v573 = *((_DWORD *)v9 + 50);
                                }
                                *(_DWORD *)(*((_QWORD *)v9 + 7) + v573) = v724 & 0x1F | (32 * (v724 & 0x1F)) | 0xD37CEC00;
                                *((_DWORD *)v9 + 50) += 4;
                                v574 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(v9, *((JSC::DFG::JITCompiler **)v9 + 497), v567, v568, v569, v570, v571, v572);
                                if ((_DWORD)v574 == -1)
                                  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v9, v575, v723, v576, v577, v578, v579, v580);
                                else
                                  JSC::MacroAssemblerARM64::load64((uint64_t)v9, (v574 << 35) + 0x380000001ALL, v723, v576, v577, v578, v579, v580);
                                if (!*((_BYTE *)v9 + 212))
                                {
                                  __break(0xC471u);
                                  JUMPOUT(0x197CAC5A8);
                                }
                                *(_DWORD *)(*((_QWORD *)v9 + 37) + 208) &= ~*((_DWORD *)v9 + 80);
                                JSC::MacroAssemblerARM64::load64((uint64_t)v9, v724 | 0x2800000000, *((char *)v9 + 304), v581, v582, v583, v584, v585);
                                JSC::MacroAssemblerARM64::branch64((uint64_t)v9, 1, 17, v723, v586, v587, v588, v589, (uint64_t)&v748);
                                v590 = (_QWORD *)((char *)v9 + 5264);
                                v591 = v749;
                                LODWORD(v750) = v748;
                                *(_QWORD *)((char *)&v750 + 4) = v749;
                                v751 = v11;
                                v592 = *((unsigned int *)v9 + 1319);
                                if ((_DWORD)v592 == *((_DWORD *)v9 + 1318))
                                {
                                  v659 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v590, (void *)(v592 + 1), (unint64_t)&v750, v351, v352, v353, v354, v355);
                                  v660 = *((_QWORD *)v9 + 658) + 24 * *((unsigned int *)v9 + 1319);
                                  *(_DWORD *)v660 = *(_DWORD *)v659;
                                  *(_QWORD *)(v660 + 4) = *(_QWORD *)(v659 + 4);
                                  *(_QWORD *)(v660 + 16) = *(_QWORD *)(v659 + 16);
                                }
                                else
                                {
                                  v593 = *v590 + 24 * v592;
                                  *(_DWORD *)v593 = v748;
                                  *(_QWORD *)(v593 + 4) = v591;
                                  *(_QWORD *)(v593 + 16) = v11;
                                }
                                ++*((_DWORD *)v9 + 1319);
                                v356 = v12;
                              }
                              JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v356, 1, v351, v352, v353, v354, v355);
                              if (v725)
                                JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v740, (uint64_t)v9, v226, v227, v228, v229, v230, v231);
                              v248 = *((_QWORD *)v9 + 702);
                              LODWORD(v259) = *(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
LABEL_156:
                              v357 = *(_QWORD *)(v248 + 8);
                              v358 = v259;
                              v359 = (uint64_t *)(v357 + 24);
                              v360 = (uint64_t *)(v357 + 8);
                              if ((v13 & 1) != 0)
                                v360 = v359;
                              v361 = *v360;
                              v362 = *v360 + 32 * v259;
                              v363 = *(_DWORD *)(v248 + 88);
                              v364 = *v360 + 32 * v358;
                              v367 = *(_DWORD *)(v364 + 20);
                              v366 = (unsigned int *)(v364 + 20);
                              v365 = v367;
                              if (v363 == v367)
                              {
LABEL_159:
                                if ((*(_BYTE *)(v362 + 13) & 1) != 0)
                                {
                                  JSC::MacroAssemblerARM64::branch64((uint64_t)v9, 0, v734, 6, v228, v229, v230, v231, (uint64_t)&v748);
                                  v373 = (_QWORD *)((char *)v9 + 5264);
                                  v374 = v749;
                                  LODWORD(v750) = v748;
                                  *(_QWORD *)((char *)&v750 + 4) = v749;
                                  v751 = v12;
                                  v375 = *((unsigned int *)v9 + 1319);
                                  if ((_DWORD)v375 == *((_DWORD *)v9 + 1318))
                                  {
                                    v557 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9 + 5264, (void *)(v375 + 1), (unint64_t)&v750, v368, v369, v370, v371, v372);
                                    v558 = *((_QWORD *)v9 + 658) + 24 * *((unsigned int *)v9 + 1319);
                                    *(_DWORD *)v558 = *(_DWORD *)v557;
                                    *(_QWORD *)(v558 + 4) = *(_QWORD *)(v557 + 4);
                                    *(_QWORD *)(v558 + 16) = *(_QWORD *)(v557 + 16);
                                  }
                                  else
                                  {
                                    v376 = *v373 + 24 * v375;
                                    *(_DWORD *)v376 = v748;
                                    *(_QWORD *)(v376 + 4) = v374;
                                    *(_QWORD *)(v376 + 16) = v12;
                                  }
                                  ++*((_DWORD *)v9 + 1319);
                                  JSC::MacroAssemblerARM64::branch64((uint64_t)v9, 0, v734, 7, v369, v370, v371, v372, (uint64_t)&v748);
                                  v377 = v749;
                                  LODWORD(v750) = v748;
                                  *(_QWORD *)((char *)&v750 + 4) = v749;
                                  v751 = v11;
                                  v378 = *((unsigned int *)v9 + 1319);
                                  if ((_DWORD)v378 == *((_DWORD *)v9 + 1318))
                                  {
                                    v559 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9 + 5264, (void *)(v378 + 1), (unint64_t)&v750, v227, v228, v229, v230, v231);
                                    v560 = *((_QWORD *)v9 + 658) + 24 * *((unsigned int *)v9 + 1319);
                                    *(_DWORD *)v560 = *(_DWORD *)v559;
                                    *(_QWORD *)(v560 + 4) = *(_QWORD *)(v559 + 4);
                                    *(_QWORD *)(v560 + 16) = *(_QWORD *)(v559 + 16);
                                  }
                                  else
                                  {
                                    v379 = *v373 + 24 * v378;
                                    *(_DWORD *)v379 = v748;
                                    *(_QWORD *)(v379 + 4) = v377;
                                    *(_QWORD *)(v379 + 16) = v11;
                                  }
                                  ++*((_DWORD *)v9 + 1319);
                                }
                                v380 = *((_QWORD *)v9 + 702);
                                v381 = *(_QWORD *)(v380 + 8);
                                v382 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                                v383 = (uint64_t *)(v381 + 24);
                                v384 = (uint64_t *)(v381 + 8);
                                if ((v13 & 1) != 0)
                                  v384 = v383;
                                v385 = *v384;
                                v386 = *v384 + 32 * v382;
                                v387 = *(_DWORD *)(v380 + 88);
                                v388 = *(_DWORD *)(v386 + 20);
                                if (v387 == v388)
                                {
LABEL_168:
                                  if ((*(_BYTE *)(v386 + 12) & 3) != 0)
                                  {
                                    JSC::MacroAssemblerARM64::branch64((uint64_t)v9, 8, v734, 27, v228, v229, v230, v231, (uint64_t)&v748);
                                    v394 = (_QWORD *)((char *)v9 + 5264);
                                    v395 = v749;
                                    LODWORD(v750) = v748;
                                    *(_QWORD *)((char *)&v750 + 4) = v749;
                                    v751 = v11;
                                    v396 = *((unsigned int *)v9 + 1319);
                                    if ((_DWORD)v396 == *((_DWORD *)v9 + 1318))
                                    {
                                      v594 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9 + 5264, (void *)(v396 + 1), (unint64_t)&v750, v389, v390, v391, v392, v393);
                                      v595 = *((_QWORD *)v9 + 658) + 24 * *((unsigned int *)v9 + 1319);
                                      *(_DWORD *)v595 = *(_DWORD *)v594;
                                      *(_QWORD *)(v595 + 4) = *(_QWORD *)(v594 + 4);
                                      *(_QWORD *)(v595 + 16) = *(_QWORD *)(v594 + 16);
                                    }
                                    else
                                    {
                                      v397 = *v394 + 24 * v396;
                                      *(_DWORD *)v397 = v748;
                                      *(_QWORD *)(v397 + 4) = v395;
                                      *(_QWORD *)(v397 + 16) = v11;
                                    }
                                    ++*((_DWORD *)v9 + 1319);
                                    JSC::MacroAssemblerARM64::branch64((uint64_t)v9, 0, v734, 27, v390, v391, v392, v393, (uint64_t)&v748);
                                    v398 = v749;
                                    LODWORD(v750) = v748;
                                    *(_QWORD *)((char *)&v750 + 4) = v749;
                                    v751 = v12;
                                    v399 = *((unsigned int *)v9 + 1319);
                                    if ((_DWORD)v399 == *((_DWORD *)v9 + 1318))
                                    {
                                      v596 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v9 + 5264, (void *)(v399 + 1), (unint64_t)&v750, v227, v228, v229, v230, v231);
                                      v597 = *((_QWORD *)v9 + 658) + 24 * *((unsigned int *)v9 + 1319);
                                      *(_DWORD *)v597 = *(_DWORD *)v596;
                                      *(_QWORD *)(v597 + 4) = *(_QWORD *)(v596 + 4);
                                      *(_QWORD *)(v597 + 16) = *(_QWORD *)(v596 + 16);
                                    }
                                    else
                                    {
                                      v400 = *v394 + 24 * v399;
                                      *(_DWORD *)v400 = v748;
                                      *(_QWORD *)(v400 + 4) = v398;
                                      *(_QWORD *)(v400 + 16) = v12;
                                    }
                                    ++*((_DWORD *)v9 + 1319);
                                  }
                                  v401 = *((_QWORD *)v9 + 702);
                                  v402 = *(_QWORD *)(v401 + 8);
                                  v403 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                                  v404 = (uint64_t *)(v402 + 24);
                                  v405 = (uint64_t *)(v402 + 8);
                                  if ((v13 & 1) != 0)
                                    v405 = v404;
                                  v406 = *v405;
                                  v407 = *v405 + 32 * v403;
                                  v408 = *(_DWORD *)(v401 + 88);
                                  v409 = *(_DWORD *)(v407 + 20);
                                  if (v408 == v409)
                                  {
LABEL_177:
                                    v410 = v240;
                                    if ((*(_BYTE *)(v407 + 12) & 0xF0) == 0)
                                      goto LABEL_185;
                                    v411 = *((_QWORD *)v9 + 702);
                                    v412 = *(_QWORD *)(v411 + 8);
                                    v413 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
                                    v414 = (uint64_t *)(v412 + 24);
                                    v415 = (uint64_t *)(v412 + 8);
                                    if ((v13 & 1) != 0)
                                      v415 = v414;
                                    v416 = *v415;
                                    v417 = *v415 + 32 * v413;
                                    v418 = *(_DWORD *)(v411 + 88);
                                    v419 = *(_DWORD *)(v417 + 20);
                                    if (v418 == v419)
                                    {
LABEL_181:
                                      if ((*(_QWORD *)(v417 + 8) & 0xFFFFD60C00000008) != 0)
                                      {
                                        JSC::MacroAssemblerARM64::branchTest64((uint64_t)v9, 0, v734, 27, v228, v229, v230, v231, (uint64_t)&v750);
                                        *(_DWORD *)v740 = v750;
                                        *(_QWORD *)&v740[4] = *(_QWORD *)((char *)&v750 + 4);
                                        JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(v9, v734, (char)v724, v410, 1, v420, v421, v422);
                                        JSC::MacroAssemblerARM64::branchDoubleZeroOrNaN((uint64_t)v9, v410, v732, v423, v424, v425, v426, v427, (uint64_t)&v748);
                                        v433 = (_QWORD *)((char *)v9 + 5264);
                                        v434 = v749;
                                        LODWORD(v750) = v748;
                                        *(_QWORD *)((char *)&v750 + 4) = v749;
                                        v751 = v12;
                                        v435 = *((unsigned int *)v9 + 1319);
                                        if ((_DWORD)v435 == *((_DWORD *)v9 + 1318))
                                        {
                                          v598 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v433, (void *)(v435 + 1), (unint64_t)&v750, v428, v429, v430, v431, v432);
                                          v599 = *((_QWORD *)v9 + 658) + 24 * *((unsigned int *)v9 + 1319);
                                          *(_DWORD *)v599 = *(_DWORD *)v598;
                                          *(_QWORD *)(v599 + 4) = *(_QWORD *)(v598 + 4);
                                          *(_QWORD *)(v599 + 16) = *(_QWORD *)(v598 + 16);
                                        }
                                        else
                                        {
                                          v436 = *v433 + 24 * v435;
                                          *(_DWORD *)v436 = v748;
                                          *(_QWORD *)(v436 + 4) = v434;
                                          *(_QWORD *)(v436 + 16) = v12;
                                        }
                                        ++*((_DWORD *)v9 + 1319);
                                        JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v11, 1, v428, v429, v430, v431, v432);
                                        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)v740, (uint64_t)v9, v437, v438, v439, v440, v441, v442);
                                      }
                                      else
                                      {
                                        JSC::AssemblyHelpers::unboxDoubleWithoutAssertions(v9, v734, (char)v724, v410, 1, v229, v230, v231);
                                        JSC::DFG::SpeculativeJIT::branchDoubleZeroOrNaN((uint64_t)v9, v410, v732, v12, v714, v715, v716, v717);
                                        JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v11, 1, v718, v719, v720, v721, v722);
                                      }
LABEL_185:
                                      JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v12, 0, v227, v228, v229, v230, v231);
                                      result = JSC::DFG::SpeculativeJIT::use(v744, (JSC::DFG::Node *)(v745 & 0xFF00FFFFFFFFFFFFLL), v443, v444, v445, v446, v447, v448);
                                      if (v9)
                                      {
                                        v449 = &v727[12
                                                   * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v732]];
                                        --*((_DWORD *)v449 + 2);
                                        v450 = &v727[12
                                                   * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v410]];
                                        --*((_DWORD *)v450 + 2);
                                      }
                                      if (v741)
                                      {
                                        v451 = v742;
                                        if (v742 != -1)
                                        {
                                          if (v742 > 15)
                                            v451 = -1;
                                          --*(_DWORD *)(v741 + 12 * v451 + 4784);
                                        }
                                      }
                                      if (*(_QWORD *)v743)
                                      {
                                        v452 = v743[8];
                                        if (v743[8] != -1)
                                        {
                                          if (v743[8] > 15)
                                            v452 = -1;
                                          --*(_DWORD *)(*(_QWORD *)v743 + 12 * v452 + 4784);
                                        }
                                      }
LABEL_19:
                                      if ((v745 & 0xFF00FFFFFFFFFFFFLL) == 0)
                                        return result;
LABEL_20:
                                      v63 = v744;
                                      v64 = v746;
LABEL_21:
                                      if (v64 > 15)
                                        v64 = -1;
                                      --*((_DWORD *)v63 + 3 * v64 + 1196);
                                      return result;
                                    }
                                    if ((*(_QWORD *)(v417 + 8) & 0x2800FFFFFFF7) == 0)
                                    {
LABEL_275:
                                      *(_DWORD *)(v417 + 20) = v418;
                                      goto LABEL_181;
                                    }
                                    if ((v419 ^ v418) >= 2)
                                    {
                                      v624 = *(_QWORD *)v417;
                                      if (*(_QWORD *)v417 == 4)
                                        goto LABEL_359;
                                      *(_QWORD *)v417 = v624 | 2;
                                      v656 = (unsigned int *)(v624 & 0xFFFFFFFFFFFFFFFCLL);
                                      if ((v624 & 1) != 0)
                                      {
                                        v705 = 2 * *v656;
                                        v410 = v729;
                                        do
                                        {
                                          if (!(v705 * 4))
                                            goto LABEL_359;
                                          v706 = *(_QWORD *)&v656[v705];
                                          if ((*(_BYTE *)(v706 + 19) & 0xC) != 0)
                                            break;
                                          v707 = *(_QWORD *)(v706 + 96);
                                          v708 = (v707 & 1) != 0
                                               ? (v707 >> 1) & 3
                                               : *(unsigned __int8 *)(v707 + 4);
                                          v705 -= 2;
                                        }
                                        while (v708 != 2);
                                        WTF::fastFree((unint64_t)v656, v225, v226, v227, v228, v229, v230, v231);
                                        v410 = v729;
LABEL_441:
                                        *(_QWORD *)v417 = 4;
                                      }
                                      else if (v656)
                                      {
                                        if ((*((_BYTE *)v656 + 19) & 0xC) != 0)
                                          goto LABEL_441;
                                        v657 = *((_QWORD *)v656 + 12);
                                        v658 = (v657 & 1) != 0
                                             ? (v657 >> 1) & 3
                                             : *(unsigned __int8 *)(v657 + 4);
                                        if (v658 == 2)
                                          goto LABEL_441;
                                      }
LABEL_359:
                                      *(_DWORD *)(v416 + 32 * v413 + 16) = -21020677;
                                    }
                                    if ((v418 & 1) != 0)
                                      *(_QWORD *)v417 &= ~2uLL;
                                    goto LABEL_275;
                                  }
                                  if ((*(_QWORD *)(v407 + 8) & 0x2800FFFFFFF7) == 0)
                                  {
LABEL_257:
                                    *(_DWORD *)(v407 + 20) = v408;
                                    goto LABEL_177;
                                  }
                                  if ((v409 ^ v408) >= 2)
                                  {
                                    v609 = *(_QWORD *)v407;
                                    if (*(_QWORD *)v407 == 4)
                                      goto LABEL_326;
                                    *(_QWORD *)v407 = v609 | 2;
                                    v634 = (unsigned int *)(v609 & 0xFFFFFFFFFFFFFFFCLL);
                                    if ((v609 & 1) != 0)
                                    {
                                      v681 = 2 * *v634;
                                      do
                                      {
                                        if (!(v681 * 4))
                                          goto LABEL_326;
                                        v682 = *(_QWORD *)&v634[v681];
                                        if ((*(_BYTE *)(v682 + 19) & 0xC) != 0)
                                          break;
                                        v683 = *(_QWORD *)(v682 + 96);
                                        v684 = (v683 & 1) != 0
                                             ? (v683 >> 1) & 3
                                             : *(unsigned __int8 *)(v683 + 4);
                                        v681 -= 2;
                                      }
                                      while (v684 != 2);
                                      WTF::fastFree((unint64_t)v634, v225, v226, v227, v228, v229, v230, v231);
LABEL_391:
                                      *(_QWORD *)v407 = 4;
                                    }
                                    else if (v634)
                                    {
                                      if ((*((_BYTE *)v634 + 19) & 0xC) != 0)
                                        goto LABEL_391;
                                      v635 = *((_QWORD *)v634 + 12);
                                      v636 = (v635 & 1) != 0
                                           ? (v635 >> 1) & 3
                                           : *(unsigned __int8 *)(v635 + 4);
                                      if (v636 == 2)
                                        goto LABEL_391;
                                    }
LABEL_326:
                                    *(_DWORD *)(v406 + 32 * v403 + 16) = -21020677;
                                  }
                                  if ((v408 & 1) != 0)
                                    *(_QWORD *)v407 &= ~2uLL;
                                  goto LABEL_257;
                                }
                                if ((*(_QWORD *)(v386 + 8) & 0x2800FFFFFFF7) == 0)
                                {
LABEL_255:
                                  *(_DWORD *)(v386 + 20) = v387;
                                  goto LABEL_168;
                                }
                                if ((v388 ^ v387) >= 2)
                                {
                                  v608 = *(_QWORD *)v386;
                                  if (*(_QWORD *)v386 == 4)
                                    goto LABEL_321;
                                  *(_QWORD *)v386 = v608 | 2;
                                  v631 = (unsigned int *)(v608 & 0xFFFFFFFFFFFFFFFCLL);
                                  if ((v608 & 1) != 0)
                                  {
                                    v677 = 2 * *v631;
                                    do
                                    {
                                      if (!(v677 * 4))
                                        goto LABEL_321;
                                      v678 = *(_QWORD *)&v631[v677];
                                      if ((*(_BYTE *)(v678 + 19) & 0xC) != 0)
                                        break;
                                      v679 = *(_QWORD *)(v678 + 96);
                                      v680 = (v679 & 1) != 0
                                           ? (v679 >> 1) & 3
                                           : *(unsigned __int8 *)(v679 + 4);
                                      v677 -= 2;
                                    }
                                    while (v680 != 2);
                                    WTF::fastFree((unint64_t)v631, v225, v226, v227, v228, v229, v230, v231);
LABEL_384:
                                    *(_QWORD *)v386 = 4;
                                  }
                                  else if (v631)
                                  {
                                    if ((*((_BYTE *)v631 + 19) & 0xC) != 0)
                                      goto LABEL_384;
                                    v632 = *((_QWORD *)v631 + 12);
                                    v633 = (v632 & 1) != 0
                                         ? (v632 >> 1) & 3
                                         : *(unsigned __int8 *)(v632 + 4);
                                    if (v633 == 2)
                                      goto LABEL_384;
                                  }
LABEL_321:
                                  *(_DWORD *)(v385 + 32 * v382 + 16) = -21020677;
                                }
                                if ((v387 & 1) != 0)
                                  *(_QWORD *)v386 &= ~2uLL;
                                goto LABEL_255;
                              }
                              if ((*(_QWORD *)(v362 + 8) & 0x2800FFFFFFF7) == 0)
                              {
LABEL_253:
                                *v366 = v363;
                                goto LABEL_159;
                              }
                              if ((v365 ^ v363) >= 2)
                              {
                                v607 = *(_QWORD *)v362;
                                if (*(_QWORD *)v362 == 4)
                                  goto LABEL_316;
                                *(_QWORD *)v362 = v607 | 2;
                                v628 = (unsigned int *)(v607 & 0xFFFFFFFFFFFFFFFCLL);
                                if ((v607 & 1) != 0)
                                {
                                  v673 = 2 * *v628;
                                  do
                                  {
                                    if (!(v673 * 4))
                                      goto LABEL_316;
                                    v674 = *(_QWORD *)&v628[v673];
                                    if ((*(_BYTE *)(v674 + 19) & 0xC) != 0)
                                      break;
                                    v675 = *(_QWORD *)(v674 + 96);
                                    v676 = (v675 & 1) != 0
                                         ? (v675 >> 1) & 3
                                         : *(unsigned __int8 *)(v675 + 4);
                                    v673 -= 2;
                                  }
                                  while (v676 != 2);
                                  WTF::fastFree((unint64_t)v628, v225, v226, v227, v228, v229, v230, v231);
LABEL_377:
                                  *(_QWORD *)v362 = 4;
                                }
                                else if (v628)
                                {
                                  if ((*((_BYTE *)v628 + 19) & 0xC) != 0)
                                    goto LABEL_377;
                                  v629 = *((_QWORD *)v628 + 12);
                                  v630 = (v629 & 1) != 0
                                       ? (v629 >> 1) & 3
                                       : *(unsigned __int8 *)(v629 + 4);
                                  if (v630 == 2)
                                    goto LABEL_377;
                                }
LABEL_316:
                                *(_DWORD *)(v361 + 32 * v358 + 16) = -21020677;
                              }
                              if ((v363 & 1) != 0)
                                *(_QWORD *)v362 &= ~2uLL;
                              goto LABEL_253;
                            }
                            if ((*(_QWORD *)(v326 + 8) & 0x2800FFFFFFF7) == 0)
                            {
LABEL_272:
                              *(_DWORD *)(v326 + 20) = v327;
                              goto LABEL_149;
                            }
                            if ((v328 ^ v327) >= 2)
                            {
                              v623 = *(_QWORD *)v326;
                              if (*(_QWORD *)v326 == 4)
                                goto LABEL_354;
                              *(_QWORD *)v326 = v623 | 2;
                              v653 = (unsigned int *)(v623 & 0xFFFFFFFFFFFFFFFCLL);
                              if ((v623 & 1) != 0)
                              {
                                v701 = 2 * *v653;
                                do
                                {
                                  if (!(v701 * 4))
                                    goto LABEL_354;
                                  v702 = *(_QWORD *)&v653[v701];
                                  if ((*(_BYTE *)(v702 + 19) & 0xC) != 0)
                                    break;
                                  v703 = *(_QWORD *)(v702 + 96);
                                  v704 = (v703 & 1) != 0
                                       ? (v703 >> 1) & 3
                                       : *(unsigned __int8 *)(v703 + 4);
                                  v701 -= 2;
                                }
                                while (v704 != 2);
                                WTF::fastFree((unint64_t)v653, v225, v226, v227, v228, v229, v230, v231);
LABEL_434:
                                *(_QWORD *)v326 = 4;
                              }
                              else if (v653)
                              {
                                if ((*((_BYTE *)v653 + 19) & 0xC) != 0)
                                  goto LABEL_434;
                                v654 = *((_QWORD *)v653 + 12);
                                v655 = (v654 & 1) != 0 ? (v654 >> 1) & 3 : *(unsigned __int8 *)(v654 + 4);
                                if (v655 == 2)
                                  goto LABEL_434;
                              }
LABEL_354:
                              *(_DWORD *)(v325 + 32 * v322 + 16) = -21020677;
                            }
                            if ((v327 & 1) != 0)
                              *(_QWORD *)v326 &= ~2uLL;
                            goto LABEL_272;
                          }
                          if ((*(_QWORD *)(v314 + 8) & 0x2800FFFFFFF7) == 0)
                          {
LABEL_268:
                            *v318 = v315;
                            goto LABEL_145;
                          }
                          if ((v317 ^ v315) >= 2)
                          {
                            v612 = *(_QWORD *)v314;
                            if (*(_QWORD *)v314 == 4)
                              goto LABEL_342;
                            *(_QWORD *)v314 = v612 | 2;
                            v643 = (unsigned int *)(v612 & 0xFFFFFFFFFFFFFFFCLL);
                            if ((v612 & 1) != 0)
                            {
                              v693 = 2 * *v643;
                              do
                              {
                                if (!(v693 * 4))
                                  goto LABEL_342;
                                v694 = *(_QWORD *)&v643[v693];
                                if ((*(_BYTE *)(v694 + 19) & 0xC) != 0)
                                  break;
                                v695 = *(_QWORD *)(v694 + 96);
                                v696 = (v695 & 1) != 0 ? (v695 >> 1) & 3 : *(unsigned __int8 *)(v695 + 4);
                                v693 -= 2;
                              }
                              while (v696 != 2);
                              WTF::fastFree((unint64_t)v643, v225, v226, v227, v228, v229, v230, v231);
LABEL_412:
                              *(_QWORD *)v314 = 4;
                            }
                            else if (v643)
                            {
                              if ((*((_BYTE *)v643 + 19) & 0xC) != 0)
                                goto LABEL_412;
                              v644 = *((_QWORD *)v643 + 12);
                              v645 = (v644 & 1) != 0 ? (v644 >> 1) & 3 : *(unsigned __int8 *)(v644 + 4);
                              if (v645 == 2)
                                goto LABEL_412;
                            }
LABEL_342:
                            *(_DWORD *)(v313 + 32 * v310 + 16) = -21020677;
                          }
                          if ((v315 & 1) != 0)
                            *(_QWORD *)v314 &= ~2uLL;
                          goto LABEL_268;
                        }
                        if ((*(_QWORD *)(v283 + 8) & 0x2800FFFFFFF7) == 0)
                        {
LABEL_270:
                          *(_DWORD *)(v283 + 20) = v284;
                          goto LABEL_138;
                        }
                        if ((v285 ^ v284) >= 2)
                        {
                          v615 = *(_QWORD *)v283;
                          if (*(_QWORD *)v283 == 4)
                            goto LABEL_348;
                          *(_QWORD *)v283 = v615 | 2;
                          v650 = (unsigned int *)(v615 & 0xFFFFFFFFFFFFFFFCLL);
                          if ((v615 & 1) != 0)
                          {
                            v697 = 2 * *v650;
                            do
                            {
                              if (!(v697 * 4))
                                goto LABEL_348;
                              v698 = *(_QWORD *)&v650[v697];
                              if ((*(_BYTE *)(v698 + 19) & 0xC) != 0)
                                break;
                              v699 = *(_QWORD *)(v698 + 96);
                              v700 = (v699 & 1) != 0 ? (v699 >> 1) & 3 : *(unsigned __int8 *)(v699 + 4);
                              v697 -= 2;
                            }
                            while (v700 != 2);
                            WTF::fastFree((unint64_t)v650, v225, v226, v227, v228, v229, v230, v231);
LABEL_427:
                            *(_QWORD *)v283 = 4;
                          }
                          else if (v650)
                          {
                            if ((*((_BYTE *)v650 + 19) & 0xC) != 0)
                              goto LABEL_427;
                            v651 = *((_QWORD *)v650 + 12);
                            v652 = (v651 & 1) != 0 ? (v651 >> 1) & 3 : *(unsigned __int8 *)(v651 + 4);
                            if (v652 == 2)
                              goto LABEL_427;
                          }
LABEL_348:
                          *(_DWORD *)(v282 + 32 * v278 + 16) = -21020677;
                        }
                        if ((v284 & 1) != 0)
                          *(_QWORD *)v283 &= ~2uLL;
                        goto LABEL_270;
                      }
                      if ((*(_QWORD *)(v274 + 8) & 0x2800FFFFFFF7) == 0)
                      {
                        *v277 = v275;
                        goto LABEL_134;
                      }
                      if ((v276 ^ v275) >= 2)
                      {
                        v611 = *(_QWORD *)v274;
                        if (*(_QWORD *)v274 == 4)
                          goto LABEL_336;
                        *(_QWORD *)v274 = v611 | 2;
                        v640 = (unsigned int *)(v611 & 0xFFFFFFFFFFFFFFFCLL);
                        if ((v611 & 1) != 0)
                        {
                          v689 = 2 * *v640;
                          do
                          {
                            if (!(v689 * 4))
                              goto LABEL_336;
                            v690 = *(_QWORD *)&v640[v689];
                            if ((*(_BYTE *)(v690 + 19) & 0xC) != 0)
                              break;
                            v691 = *(_QWORD *)(v690 + 96);
                            v692 = (v691 & 1) != 0 ? (v691 >> 1) & 3 : *(unsigned __int8 *)(v691 + 4);
                            v689 -= 2;
                          }
                          while (v692 != 2);
                          WTF::fastFree((unint64_t)v640, v225, v226, v227, v228, v229, v230, v231);
LABEL_405:
                          *(_QWORD *)v274 = 4;
                        }
                        else if (v640)
                        {
                          if ((*((_BYTE *)v640 + 19) & 0xC) != 0)
                            goto LABEL_405;
                          v641 = *((_QWORD *)v640 + 12);
                          v642 = (v641 & 1) != 0 ? (v641 >> 1) & 3 : *(unsigned __int8 *)(v641 + 4);
                          if (v642 == 2)
                            goto LABEL_405;
                        }
LABEL_336:
                        *(_DWORD *)(v273 + 32 * v270 + 16) = -21020677;
                      }
                      if ((v275 & 1) != 0)
                        *(_QWORD *)v274 &= ~2uLL;
                      *v277 = v275;
                      v268 = *((_QWORD *)v9 + 702);
                      goto LABEL_134;
                    }
                    if ((*(_QWORD *)(v264 + 8) & 0x2800FFFFFFF7) == 0)
                    {
LABEL_264:
                      *(_DWORD *)(v264 + 20) = v265;
                      goto LABEL_129;
                    }
                    if ((v266 ^ v265) >= 2)
                    {
                      v610 = *(_QWORD *)v264;
                      if (*(_QWORD *)v264 == 4)
                        goto LABEL_331;
                      *(_QWORD *)v264 = v610 | 2;
                      v637 = (unsigned int *)(v610 & 0xFFFFFFFFFFFFFFFCLL);
                      if ((v610 & 1) != 0)
                      {
                        v685 = 2 * *v637;
                        do
                        {
                          if (!(v685 * 4))
                            goto LABEL_331;
                          v686 = *(_QWORD *)&v637[v685];
                          if ((*(_BYTE *)(v686 + 19) & 0xC) != 0)
                            break;
                          v687 = *(_QWORD *)(v686 + 96);
                          v688 = (v687 & 1) != 0 ? (v687 >> 1) & 3 : *(unsigned __int8 *)(v687 + 4);
                          v685 -= 2;
                        }
                        while (v688 != 2);
                        WTF::fastFree((unint64_t)v637, v225, v226, v227, v228, v229, v230, v231);
LABEL_398:
                        *(_QWORD *)v264 = 4;
                      }
                      else if (v637)
                      {
                        if ((*((_BYTE *)v637 + 19) & 0xC) != 0)
                          goto LABEL_398;
                        v638 = *((_QWORD *)v637 + 12);
                        v639 = (v638 & 1) != 0 ? (v638 >> 1) & 3 : *(unsigned __int8 *)(v638 + 4);
                        if (v639 == 2)
                          goto LABEL_398;
                      }
LABEL_331:
                      *(_DWORD *)(v263 + 32 * v259 + 16) = -21020677;
                    }
                    if ((v265 & 1) != 0)
                      *(_QWORD *)v264 &= ~2uLL;
                    goto LABEL_264;
                  }
                  if ((*(_QWORD *)(v254 + 8) & 0x2800FFFFFFF7) == 0)
                  {
                    *v257 = v255;
                    goto LABEL_125;
                  }
                  if ((v256 ^ v255) >= 2)
                  {
                    v606 = *(_QWORD *)v254;
                    if (*(_QWORD *)v254 == 4)
                      goto LABEL_310;
                    *(_QWORD *)v254 = v606 | 2;
                    v625 = (unsigned int *)(v606 & 0xFFFFFFFFFFFFFFFCLL);
                    if ((v606 & 1) != 0)
                    {
                      v669 = 2 * *v625;
                      do
                      {
                        if (!(v669 * 4))
                          goto LABEL_310;
                        v670 = *(_QWORD *)&v625[v669];
                        if ((*(_BYTE *)(v670 + 19) & 0xC) != 0)
                          break;
                        v671 = *(_QWORD *)(v670 + 96);
                        v672 = (v671 & 1) != 0 ? (v671 >> 1) & 3 : *(unsigned __int8 *)(v671 + 4);
                        v669 -= 2;
                      }
                      while (v672 != 2);
                      WTF::fastFree((unint64_t)v625, v225, v226, v227, v228, v229, v230, v231);
LABEL_370:
                      *(_QWORD *)v254 = 4;
                    }
                    else if (v625)
                    {
                      if ((*((_BYTE *)v625 + 19) & 0xC) != 0)
                        goto LABEL_370;
                      v626 = *((_QWORD *)v625 + 12);
                      v627 = (v626 & 1) != 0 ? (v626 >> 1) & 3 : *(unsigned __int8 *)(v626 + 4);
                      if (v627 == 2)
                        goto LABEL_370;
                    }
LABEL_310:
                    *(_DWORD *)(v253 + 32 * v250 + 16) = -21020677;
                  }
                  if ((v255 & 1) != 0)
                    *(_QWORD *)v254 &= ~2uLL;
                  *v257 = v255;
                  v248 = *((_QWORD *)v9 + 702);
                  goto LABEL_125;
                }
                if (v245 < v244)
                {
                  v243 = v241;
                  v244 = *(v242 - 1);
                }
              }
              ++v241;
              v242 += 3;
              if (v241 == 23)
              {
                v241 = v243;
                v246 = &v233[12 * v243];
                v247 = *(_DWORD *)v246;
                *(_QWORD *)v246 = 0xFFFFFFFF3FFFFFFFLL;
                v242 = v246 + 8;
                goto LABEL_120;
              }
            }
          }
        }
      }
LABEL_483:
      JSC::DFG::Graph::logAssertionFailure(this[495], this[497], (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x9A2, "void JSC::DFG::SpeculativeJIT::emitBranch(Node *)", "Bad use kind");
      __break(0xC471u);
      JUMPOUT(0x197CAC17CLL);
    }
    v179 = this[495];
    v180 = *((_DWORD *)this[496] + 2) + 1;
    while (v180 < *((_DWORD *)v179 + 15))
    {
      v181 = *(_QWORD *)(*((_QWORD *)v179 + 6) + 8 * v180++);
      if (v181)
        goto LABEL_83;
    }
    v181 = 0;
LABEL_83:
    v182 = v11 != v181;
    if (v11 == v181)
      v183 = v11;
    else
      v183 = v12;
    if (v11 != v181)
      v12 = v11;
    v744 = (uint64_t *)this;
    v745 = v13;
    v746 = -1;
    v184 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v184 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197CAC60CLL);
    }
    if (*((_BYTE *)this[499] + 24 * (int)v184 + 12))
    {
      v185 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)this, v13, (uint64_t)v747, a4, a5, a6, a7, a8);
      v746 = v185;
      if ((_DWORD)v185 != -1)
      {
LABEL_91:
        JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, (uint64_t)v9, v182, v185, a5, a6, a7, a8, (uint64_t)v743, v186);
        v192 = (_QWORD *)((char *)v9 + 5264);
        v193 = *(_QWORD *)&v743[4];
        LODWORD(v750) = *(_DWORD *)v743;
        *(_QWORD *)((char *)&v750 + 4) = *(_QWORD *)&v743[4];
        v751 = v12;
        v194 = *((unsigned int *)v9 + 1319);
        if ((_DWORD)v194 == *((_DWORD *)v9 + 1318))
        {
          v549 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v192, (void *)(v194 + 1), (unint64_t)&v750, v187, v188, v189, v190, v191);
          v550 = *((_QWORD *)v9 + 658) + 24 * *((unsigned int *)v9 + 1319);
          *(_DWORD *)v550 = *(_DWORD *)v549;
          *(_QWORD *)(v550 + 4) = *(_QWORD *)(v549 + 4);
          *(_QWORD *)(v550 + 16) = *(_QWORD *)(v549 + 16);
        }
        else
        {
          v195 = *v192 + 24 * v194;
          *(_DWORD *)v195 = *(_DWORD *)v743;
          *(_QWORD *)(v195 + 4) = v193;
          *(_QWORD *)(v195 + 16) = v12;
        }
        ++*((_DWORD *)v9 + 1319);
        JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v183, 0, v187, v188, v189, v190, v191);
        result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v9, a2, v196, v197, v198, v199, v200, v201);
        goto LABEL_20;
      }
      this = (JSC::DFG::Graph **)v744;
      v13 = v745;
    }
    v185 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>((JSC::DFG::SpeculativeJIT *)this, v13, (uint64_t)v747, a4, a5, a6, a7, a8);
    v746 = v185;
    goto LABEL_91;
  }
  if ((_DWORD)v14 == 21)
    return (uint64_t *)JSC::DFG::SpeculativeJIT::emitStringBranch((uint64_t)this, *((_QWORD *)a2 + 3), v11, v12, a5, a6, a7, a8);
  if ((_DWORD)v14 == 22)
    return (uint64_t *)JSC::DFG::SpeculativeJIT::emitStringOrOtherBranch((uint64_t)this, *((_QWORD *)a2 + 3), v11, v12, a5, a6, a7, a8);
  if ((_DWORD)v14 != 49)
    goto LABEL_483;
  v453 = ~*(_DWORD *)((v13 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v453 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
LABEL_585:
    JUMPOUT(0x197CAC0D4);
  }
  if (!*((_BYTE *)this[499] + 24 * (int)v453 + 12))
  {
    JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v744, (JSC::DFG::SpeculativeJIT *)this, a3, a4, a5, a6, a7, a8);
    goto LABEL_220;
  }
  v460 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)this, *((_QWORD *)a2 + 3), a3, a4, a5, a6, a7, a8);
  v461 = 0;
  v744 = (uint64_t *)v9;
  v462 = (_DWORD *)((char *)v9 + 4976);
  v463 = 0x17u;
  v464 = -1;
  while (*v462)
  {
LABEL_205:
    ++v461;
    v462 += 3;
    if (v461 == 23)
    {
      v461 = v463;
      v466 = (unsigned int *)((char *)v9 + 12 * v463 + 4968);
      v467 = *v466;
      *(_QWORD *)v466 = 0xFFFFFFFF3FFFFFFFLL;
      v462 = v466 + 2;
      goto LABEL_217;
    }
  }
  v465 = *(v462 - 1);
  if (v465 != -1)
  {
    if (v465 < v464)
    {
      v463 = v461;
      v464 = *(v462 - 1);
    }
    goto LABEL_205;
  }
  v467 = *(v462 - 2);
  *((_QWORD *)v462 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_217:
  *v462 = 1;
  v471 = JSC::FPRInfo::toRegister::registerForIndex[v461];
  if (v467 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v9, v467, v454, v455, v456, v457, v458, v459);
  LOBYTE(v745) = v471;
  if ((_DWORD)v460 == -1)
LABEL_220:
    v460 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble((uint64_t)v9, v13, v454, v455, v456, v457, v458, v459);
  JSC::MacroAssemblerARM64::branchDoubleNonZero((uint64_t)v743, (uint64_t)v9, v460, v455, v456, v457, v458, v459);
  v477 = (_QWORD *)((char *)v9 + 5264);
  v478 = *(_QWORD *)&v743[4];
  LODWORD(v750) = *(_DWORD *)v743;
  *(_QWORD *)((char *)&v750 + 4) = *(_QWORD *)&v743[4];
  v751 = v11;
  v479 = *((unsigned int *)v9 + 1319);
  if ((_DWORD)v479 == *((_DWORD *)v9 + 1318))
  {
    v613 = WTF::Vector<JSC::DFG::SpeculativeJIT::BranchRecord,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v477, (void *)(v479 + 1), (unint64_t)&v750, v472, v473, v474, v475, v476);
    v614 = *((_QWORD *)v9 + 658) + 24 * *((unsigned int *)v9 + 1319);
    *(_DWORD *)v614 = *(_DWORD *)v613;
    *(_QWORD *)(v614 + 4) = *(_QWORD *)(v613 + 4);
    *(_QWORD *)(v614 + 16) = *(_QWORD *)(v613 + 16);
  }
  else
  {
    v480 = *v477 + 24 * v479;
    *(_DWORD *)v480 = *(_DWORD *)v743;
    *(_QWORD *)(v480 + 4) = v478;
    *(_QWORD *)(v480 + 16) = v11;
  }
  ++*((_DWORD *)v9 + 1319);
  JSC::DFG::SpeculativeJIT::jump((uint64_t)v9, v12, 0, v472, v473, v474, v475, v476);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v9, a2, v481, v482, v483, v484, v485, v486);
  if (v744)
  {
    v487 = (char *)v744 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v745];
    --*((_DWORD *)v487 + 1244);
  }
  v488 = (char *)v9 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v460];
  --*((_DWORD *)v488 + 1244);
  return result;
}

void JSC::DFG::SpeculativeJIT::compileMapKeyIndex(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x8_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  _DWORD *v95;
  char *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  char v112;
  JSC::VM *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  JSC::VM *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int8x8_t v133;
  int i;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  uint64_t *v141;
  int v142;
  _DWORD *v143;
  uint64_t *v144;
  _DWORD *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int *v160;
  int *v161;
  int v162;
  _DWORD *v163;
  _QWORD *v164;
  _DWORD *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  int *v173;
  int v174;
  _DWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  unsigned int v183;
  int *v184;
  int *v185;
  int v186;
  _DWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _DWORD *v193;
  uint64_t *v194;
  int v195;
  _DWORD *v196;
  uint64_t *v197;
  _DWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int *v210;
  int *v211;
  int v212;
  _DWORD *v213;
  _QWORD *v214;
  int *v215;
  int j;
  unsigned int v217;
  char v218;
  unsigned int v219;
  void *v220;
  int *v221;
  int *v222;
  int *v223;
  int v224;
  _DWORD *v225;
  _QWORD *v226;
  int *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int m;
  unsigned int v240;
  char v241;
  uint64_t v242;
  JSC::DFG::Node *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int n;
  unsigned int v256;
  char v257;
  int *v258;
  int *v259;
  int v260;
  char *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  void *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  unint64_t v277;
  uint64_t v278;
  unsigned int v279;
  char *v280;
  uint64_t v281;
  int v282;
  WTF *v283;
  WTF *v284;
  WTF *v285;
  WTF *v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  int8x8_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  unsigned int v376;
  _DWORD *v377;
  char *v378;
  unsigned int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  unsigned int v388;
  int v389;
  unsigned int v390;
  uint64_t v391;
  int v392;
  unsigned int v393;
  JSC::VM *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  JSC::VM *v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int8x8_t v414;
  int ii;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  _DWORD *v421;
  uint64_t *v422;
  int v423;
  _DWORD *v424;
  uint64_t *v425;
  _DWORD *v426;
  unint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  int *v441;
  int *v442;
  int v443;
  _DWORD *v444;
  _QWORD *v445;
  _DWORD *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  WTF **v454;
  int *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  unint64_t v464;
  uint64_t v465;
  unsigned int v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  int jj;
  unsigned int v475;
  char v476;
  uint64_t v477;
  JSC::DFG::Node *v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unsigned int v484;
  uint64_t v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int kk;
  unsigned int v491;
  char v492;
  int *v493;
  int *v494;
  int v495;
  _DWORD *v496;
  _QWORD *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  unsigned int v504;
  int *v505;
  int *v506;
  int v507;
  char *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  int *v516;
  int *v517;
  int v518;
  _DWORD *v519;
  _QWORD *v520;
  int *v521;
  unsigned __int8 v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  unsigned int v533;
  unsigned int v534;
  _DWORD *v535;
  int *v536;
  unsigned int v537;
  char *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  int v557;
  unsigned int v558;
  _DWORD *v559;
  uint64_t *v560;
  int v561;
  char *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  unsigned int v575;
  int *v576;
  int *v577;
  int v578;
  char *v579;
  int k;
  unsigned int v581;
  char v582;
  int *v583;
  int *v584;
  int v585;
  char *v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  int v596;
  unsigned int v597;
  int *v598;
  int *v599;
  int v600;
  char *v601;
  unsigned int v602;
  char v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  char v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  char v704;
  int *v705;
  int *v706;
  uint64_t v707;
  unint64_t v708;
  uint64_t v709;
  unsigned int v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  int v714;
  unint64_t v715;
  uint64_t v716;
  unsigned int v717;
  char *v718;
  uint64_t v719;
  int v720;
  WTF *v721;
  WTF *v722;
  WTF *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unsigned __int8 v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  char v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  char v837;
  char *v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  int *v844;
  int *v845;
  int v846;
  _DWORD *v847;
  _QWORD *v848;
  _DWORD *v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  int *v854;
  _DWORD *v855;
  uint64_t *v856;
  int v857;
  _DWORD *v858;
  uint64_t *v859;
  _DWORD *v860;
  int v861;
  unsigned int v862;
  char v863;
  _DWORD *v864;
  char *v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  char v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  char v960;
  int v961;
  unsigned int v962;
  _DWORD *v963;
  uint64_t *v964;
  int v965;
  char *v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  char v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  char v1050;
  JSC::AssemblerBuffer *v1051;
  JSC::AssemblerBuffer *v1052;
  char v1053;
  unsigned int v1054;
  char v1055;
  uint64_t v1056;
  uint64_t v1057;
  unsigned int v1058;
  unsigned __int8 v1059;
  unsigned __int8 v1060;
  int v1061;
  int v1062;
  char v1063;
  __int16 v1064;
  char v1065;
  int v1066;
  int v1067[2];
  char v1068;
  __int16 v1069;
  char v1070;
  int v1071;
  int v1072;
  char v1073;
  __int16 v1074;
  char v1075;
  int v1076;
  int v1077;
  int v1078;
  int v1079;
  char v1080;
  __int16 v1081;
  char v1082;
  int v1083;
  int v1084;
  int v1085;
  uint64_t v1086;
  unsigned int v1087;
  int v1088;
  int v1089;
  int v1090;
  char v1091;
  __int16 v1092;
  char v1093;
  int v1094;
  int v1095;
  char v1096;
  __int16 v1097;
  char v1098;
  int v1099;
  int v1100;
  char v1101;
  __int16 v1102;
  char v1103;
  int v1104;
  int v1105;
  char v1106;
  __int16 v1107;
  char v1108;
  int v1109;
  uint64_t v1110;
  int v1111;
  int v1112;
  int v1113;
  int v1114;
  char v1115;
  __int16 v1116;
  char v1117;
  int v1118[2];
  char v1119;
  __int16 v1120;
  char v1121;
  int v1122;
  int v1123;
  char v1124;
  __int16 v1125;
  char v1126;
  int v1127[2];
  char v1128;
  __int16 v1129;
  char v1130;
  int v1131[2];
  char v1132;
  __int16 v1133;
  char v1134;
  unsigned int v1135[2];
  char v1136;
  __int16 v1137;
  char v1138;
  unsigned int v1139[3];
  unsigned int v1140[3];
  int v1141;
  uint64_t v1142;
  int v1143;
  int v1144;
  int v1145;
  uint64_t v1146;
  WTF *v1147;
  uint64_t v1148;
  _BYTE v1149[24];
  WTF *v1150;
  uint64_t v1151;
  _BYTE v1152[24];
  WTF *v1153;
  uint64_t v1154;
  _BYTE v1155[24];
  unsigned int v1156;
  JSC::ARM64LogicalImmediate *v1157;
  int v1158;
  uint64_t v1159;
  WTF *v1160;
  uint64_t v1161;
  _BYTE v1162[24];
  uint64_t v1163;
  unsigned __int8 v1164;
  uint64_t v1165;
  unsigned __int8 v1166;
  uint64_t v1167;
  char v1168;
  uint64_t v1169;
  char v1170;
  uint64_t v1171;
  char v1172;
  JSC::DFG::SpeculativeJIT *v1173;
  unint64_t v1174;
  char v1175;
  _BYTE v1176[7];
  _QWORD v1177[2];
  char v1178;
  _QWORD v1179[2];
  char v1180;

  v10 = &v1159;
  v11 = *((_QWORD *)a2 + 3);
  v12 = (v11 >> 50) & 0x3F;
  if ((_DWORD)v12 == 30)
  {
    JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v1179, this, v11, a4, a5, a6, a7, a8);
    JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v1177, this, *((_QWORD *)a2 + 4), v13, v14, v15, v16, v17);
    v24 = *((_QWORD *)a2 + 5);
    v1173 = this;
    v1174 = v24;
    v1175 = -1;
    v25 = ~*(_DWORD *)((v24 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v25 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197CAF444);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v25 + 12))
      v1175 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v24, (uint64_t)v1176, v19, v20, v21, v22, v23);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v1171, this, v18, v19, v20, v21, v22, v23);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v1169, this, v26, v27, v28, v29, v30, v31);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v1167, this, v32, v33, v34, v35, v36, v37);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v1165, this, v38, v39, v40, v41, v42, v43);
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v1163, this, v44, v45, v46, v47, v48, v49);
    v57 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v1179, v50, v51, v52, v53, v54, v55, v56);
    v1057 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v1177, v58, v59, v60, v61, v62, v63, v64);
    v1059 = v1175;
    if (v1175 == 255)
    {
      v1059 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v1173, v1174, (uint64_t)v1176, v65, v66, v67, v68, v69);
      v1175 = v1059;
    }
    v70 = v1172;
    v71 = v1170;
    v72 = v1168;
    v73 = v1166;
    v74 = v1164;
    JSC::DFG::SpeculativeJIT::speculateMapObject((uint64_t)this, *((_QWORD *)a2 + 3), v57, v65, v66, v67, v68, v69);
    v80 = *((_QWORD *)a2 + 4);
    if ((v80 & 0xFC000000000000) != 0)
      JSC::DFG::SpeculativeJIT::speculate(this, (uint64_t)a2, v80, v75, v76, v77, v78, v79);
    v1160 = (WTF *)v1162;
    v1161 = 2;
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Get the JSImmutableButterfly first.");
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v57 | 0x1000000000, v70, v75, v76, v77, v78, v79);
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v70, 0xFFFFFFFFLL, v81, v82, v83, v84, (uint64_t)&v1158, v85);
    v93 = v1158;
    if (v1158 != -1)
    {
      v94 = HIDWORD(v1161);
      if (HIDWORD(v1161) == (_DWORD)v1161)
      {
        v95 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1160, (void *)(HIDWORD(v1161) + 1), (unint64_t)&v1158, v88, v89, v90, v91, v92);
        v10 = (uint64_t *)(v95 + 1);
        v93 = *v95;
        v94 = HIDWORD(v1161);
      }
      v96 = (char *)v1160 + 12 * v94;
      *(_DWORD *)v96 = v93;
      *(_QWORD *)(v96 + 4) = *v10;
      ++HIDWORD(v1161);
    }
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [114]>((uint64_t)this);
    v1052 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
    v97 = *((_DWORD *)this + 50);
    if (v97 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1052, v86, v87, v88, v89, v90, v91, v92);
      v97 = *((_DWORD *)this + 50);
    }
    v1056 = v57;
    *(_DWORD *)(*((_QWORD *)this + 7) + v97) = v70 | (32 * v70) | 0x91004000;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::load32((uint64_t)this, v70 | 0x1000000000, v72, v88, v89, v90, v91, v92);
    v105 = *((_DWORD *)this + 50);
    if (v105 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1052, v98, v99, v100, v101, v102, v103, v104);
      v105 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v105) = v71 | (32 * v72) | 0x51000400;
    v106 = *((_DWORD *)this + 50);
    v107 = v106 + 4;
    *((_DWORD *)this + 50) = v106 + 4;
    if ((v106 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1052, v98, v99, v100, v101, v102, v103, v104);
      v107 = *((_DWORD *)this + 50);
    }
    v108 = v73;
    v109 = (char)v73;
    *(_DWORD *)(*((_QWORD *)this + 7) + v107) = ((v1059 & 0x1F) << 16) | (32 * (v71 & 0x1F)) | v71 & 0x1F | 0xA000000;
    v110 = *((_DWORD *)this + 50);
    v111 = v110 + 4;
    *((_DWORD *)this + 50) = v110 + 4;
    if ((v110 + 8) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1052, v98, v99, v100, v101, v102, v103, v104);
      v111 = *((_DWORD *)this + 50);
    }
    v112 = v71;
    *(_DWORD *)(*((_QWORD *)this + 7) + v111) = v71 | (32 * v71) | 0x11001000;
    *((_DWORD *)this + 50) += 4;
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Get the entryKeyIndex JSValue.");
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v70 | ((unint64_t)v71 << 8) | 0x300000000, 0x200000000uLL, v109, v101, v102, v103, v104);
    v119 = *(JSC::VM **)(*((_QWORD *)this + 44) + 16);
    v120 = *((_QWORD *)v119 + 5230);
    if (!v120)
      v120 = JSC::VM::orderedHashTableDeletedValueSlow(v119, v113, 0, v114, v115, v116, v117, v118);
    JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v1156, this, v120, v114, v115, v116, v117, v118);
    if (v1156 == 0xFFFFFFFFLL)
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v1157, v71, v121, v122, v123, v124, v125);
    else
      JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v1156 << 35) + 0x380000001ALL, (char)v71, v121, v122, v123, v124, v125);
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [74]>((uint64_t)this);
    for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
    {
      if ((i + 4) > *((_DWORD *)this + 48))
      {
        v133 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v1052, v126, v127, v128, v129, v130, v131, v132).n128_u64[0];
        i = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
      i = *((_DWORD *)this + 50) + 4;
    }
    *((_DWORD *)this + 52) = 0;
    v1153 = (WTF *)v1155;
    v1154 = 2;
    v1150 = (WTF *)v1152;
    v1151 = 2;
    v1147 = (WTF *)v1149;
    v1148 = 2;
    JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v109, 0xFFFFFFFFLL, v129, v130, v131, v132, (uint64_t)&v1145, v133);
    if (v1145 != -1)
    {
      if (HIDWORD(v1161) == (_DWORD)v1161)
      {
        v140 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1160, (void *)(HIDWORD(v1161) + 1), (unint64_t)&v1145, v135, v136, v137, v138, v139);
        v142 = *v140;
        v141 = (uint64_t *)(v140 + 1);
        v143 = (_DWORD *)((char *)v1160 + 12 * HIDWORD(v1161));
        *v143 = v142;
        v144 = (uint64_t *)(v143 + 1);
      }
      else
      {
        v145 = (_DWORD *)((char *)v1160 + 12 * HIDWORD(v1161));
        *v145 = v1145;
        v144 = (uint64_t *)(v145 + 1);
        v141 = &v1146;
      }
      *v144 = *v141;
      ++HIDWORD(v1161);
    }
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Get the entryKey JSValue.");
    JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v73, (char)v73);
    v1053 = v73;
    v146 = v70 | (unint64_t)(v73 << 8) | 0x300000000;
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v70 | (unint64_t)(v108 << 8) | 0x300000000, 0x200000000uLL, (char)v74, v147, v148, v149, v150);
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [52]>((uint64_t)this);
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v74, v112, v151, v152, v153, v154, (uint64_t)&v1143);
    if (v1143 != -1)
    {
      if (HIDWORD(v1148) == (_DWORD)v1148)
      {
        v160 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1147, (void *)(HIDWORD(v1148) + 1), (unint64_t)&v1143, v155, v156, v157, v158, v159);
        v162 = *v160;
        v161 = v160 + 1;
        v163 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
        *v163 = v162;
        v164 = v163 + 1;
      }
      else
      {
        v165 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
        *v165 = v1143;
        v164 = v165 + 1;
        v161 = &v1144;
      }
      *v164 = *(_QWORD *)v161;
      ++HIDWORD(v1148);
    }
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Now the current entryKey is not a deleted value. Then check whether it matches the target key.");
    v166 = (*((_QWORD *)a2 + 4) >> 50) & 0x3FLL;
    if ((_DWORD)v166 == 21)
    {
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v74, v1057, v156, v157, v158, v159, (uint64_t)&v1111);
      if (v1111 != -1)
      {
        if (HIDWORD(v1154) == (_DWORD)v1154)
        {
          v172 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1153, (void *)(HIDWORD(v1154) + 1), (unint64_t)&v1111, v167, v168, v169, v170, v171);
          v174 = *v172;
          v173 = v172 + 1;
          v175 = (_DWORD *)((char *)v1153 + 12 * HIDWORD(v1154));
          *v175 = v174;
          v176 = v175 + 1;
        }
        else
        {
          v187 = (_DWORD *)((char *)v1153 + 12 * HIDWORD(v1154));
          *v187 = v1111;
          v176 = v187 + 1;
          v173 = &v1112;
        }
        *v176 = *(_QWORD *)v173;
        ++HIDWORD(v1154);
      }
      JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v74, 1, v167, v168, v169, v170, v171, (uint64_t)&v1109);
      if (v1109 != -1)
      {
        if (HIDWORD(v1148) == (_DWORD)v1148)
        {
          v193 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1147, (void *)(HIDWORD(v1148) + 1), (unint64_t)&v1109, v188, v189, v190, v191, v192);
          v195 = *v193;
          v194 = (uint64_t *)(v193 + 1);
          v196 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
          *v196 = v195;
          v197 = (uint64_t *)(v196 + 1);
        }
        else
        {
          v198 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
          *v198 = v1109;
          v197 = (uint64_t *)(v198 + 1);
          v194 = &v1110;
        }
        *v197 = *v194;
        ++HIDWORD(v1148);
      }
      if (!*((_BYTE *)this + 212))
      {
        __break(0xC471u);
        JUMPOUT(0x197CAEF3CLL);
      }
      *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
      JSC::MacroAssemblerARM64::load8((uint64_t)this, v74 | 0x500000000, *((char *)this + 304), v188, v189, v190, v191, v192);
      JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 2, v199, v200, v201, v202, (uint64_t)&v1104);
      if (v1104 != -1)
      {
        if (HIDWORD(v1148) == (_DWORD)v1148)
        {
          v210 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1147, (void *)(HIDWORD(v1148) + 1), (unint64_t)&v1104, v205, v206, v207, v208, v209);
          v212 = *v210;
          v211 = v210 + 1;
          v213 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
          *v213 = v212;
          v214 = v213 + 1;
        }
        else
        {
          v215 = (int *)((char *)v1147 + 12 * HIDWORD(v1148));
          *v215 = v1104;
          v214 = v215 + 1;
          v211 = &v1105;
        }
        *v214 = *(_QWORD *)v211;
        ++HIDWORD(v1148);
      }
      for (j = *((_DWORD *)this + 50); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
      {
        if ((j + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v1052, v203, v204, v205, v206, v207, v208, v209);
          j = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
        j = *((_DWORD *)this + 50) + 4;
      }
      v217 = j;
      if ((j + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v1052, v203, v204, v205, v206, v207, v208, v209);
        v217 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v217) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v218 = 69;
      else
        v218 = 65;
      v1099 = j;
      v1100 = 0;
      v1101 = v218;
      v1102 = 15;
      v1103 = -1;
      if (j == -1)
        goto LABEL_84;
      v219 = HIDWORD(v1151);
      if (HIDWORD(v1151) == (_DWORD)v1151)
      {
        v220 = (void *)(HIDWORD(v1151) + 1);
        v221 = &v1099;
LABEL_80:
        v222 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1150, v220, (unint64_t)v221, v205, v206, v207, v208, v209);
        v224 = *v222;
        v223 = v222 + 1;
        v225 = (_DWORD *)((char *)v1150 + 12 * HIDWORD(v1151));
        *v225 = v224;
        v226 = v225 + 1;
        goto LABEL_83;
      }
      v223 = &v1100;
    }
    else
    {
      switch((int)v166)
      {
        case 0:
          JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v74, v1057, v156, v157, v158, v159, (uint64_t)&v1094);
          v182 = v1094;
          if (v1094 != -1)
          {
            v183 = HIDWORD(v1154);
            if (HIDWORD(v1154) == (_DWORD)v1154)
            {
              v184 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1153, (void *)(HIDWORD(v1154) + 1), (unint64_t)&v1094, v177, v178, v179, v180, v181);
              v186 = *v184;
              v185 = v184 + 1;
              v182 = v186;
              v183 = HIDWORD(v1154);
            }
            else
            {
              v185 = &v1095;
            }
            v508 = (char *)v1153 + 12 * v183;
            *(_DWORD *)v508 = v182;
            *(_QWORD *)(v508 + 4) = *(_QWORD *)v185;
            ++HIDWORD(v1154);
          }
          JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v74, 1, v177, v178, v179, v180, v181, (uint64_t)&v1089);
          if (v1089 != -1)
          {
            if (HIDWORD(v1148) == (_DWORD)v1148)
            {
              v516 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1147, (void *)(HIDWORD(v1148) + 1), (unint64_t)&v1089, v511, v512, v513, v514, v515);
              v518 = *v516;
              v517 = v516 + 1;
              v519 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
              *v519 = v518;
              v520 = v519 + 1;
            }
            else
            {
              v521 = (int *)((char *)v1147 + 12 * HIDWORD(v1148));
              *v521 = v1089;
              v520 = v521 + 1;
              v517 = &v1090;
            }
            *v520 = *(_QWORD *)v517;
            ++HIDWORD(v1148);
          }
          v522 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v1177, v509, v510, v511, v512, v513, v514, v515);
          JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v522, 1, v523, v524, v525, v526, v527, (uint64_t)&v1087);
          v533 = v1087;
          if (v1087 != -1)
          {
            v534 = HIDWORD(v1148);
            if (HIDWORD(v1148) == (_DWORD)v1148)
            {
              v535 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1147, (void *)(HIDWORD(v1148) + 1), (unint64_t)&v1087, v528, v529, v530, v531, v532);
              v537 = *v535;
              v536 = v535 + 1;
              v533 = v537;
              v534 = HIDWORD(v1148);
            }
            else
            {
              v536 = &v1088;
            }
            v538 = (char *)v1147 + 12 * v534;
            *(_DWORD *)v538 = v533;
            *(_QWORD *)(v538 + 4) = *(_QWORD *)v536;
            ++HIDWORD(v1148);
          }
          if (!*((_BYTE *)this + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x197CAF144);
          }
          *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
          JSC::MacroAssemblerARM64::load8((uint64_t)this, v74 | 0x500000000, *((char *)this + 304), v528, v529, v530, v531, v532);
          JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, 17, 2, v539, v540, v541, v542, (uint64_t)v1140);
          if (!*((_BYTE *)this + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x197CAF164);
          }
          *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
          JSC::MacroAssemblerARM64::load8((uint64_t)this, v74 | 0x500000000, *((char *)this + 304), v543, v544, v545, v546, v547);
          JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 3, v548, v549, v550, v551, (uint64_t)&v1085);
          v557 = v1085;
          if (v1085 != -1)
          {
            v558 = HIDWORD(v1148);
            if (HIDWORD(v1148) == (_DWORD)v1148)
            {
              v559 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1147, (void *)(HIDWORD(v1148) + 1), (unint64_t)&v1085, v552, v553, v554, v555, v556);
              v561 = *v559;
              v560 = (uint64_t *)(v559 + 1);
              v557 = v561;
              v558 = HIDWORD(v1148);
            }
            else
            {
              v560 = &v1086;
            }
            v562 = (char *)v1147 + 12 * v558;
            *(_DWORD *)v562 = v557;
            *(_QWORD *)(v562 + 4) = *v560;
            ++HIDWORD(v1148);
          }
          if (!*((_BYTE *)this + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x197CAF184);
          }
          *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
          JSC::MacroAssemblerARM64::load8((uint64_t)this, v1057 | 0x500000000, *((char *)this + 304), v552, v553, v554, v555, v556);
          JSC::MacroAssemblerARM64::branch32((uint64_t)this, 0, 17, 3, v563, v564, v565, v566, (uint64_t)&v1083);
          v574 = v1083;
          if (v1083 != -1)
          {
            v575 = HIDWORD(v1151);
            if (HIDWORD(v1151) == (_DWORD)v1151)
            {
              v576 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1150, (void *)(HIDWORD(v1151) + 1), (unint64_t)&v1083, v569, v570, v571, v572, v573);
              v578 = *v576;
              v577 = v576 + 1;
              v574 = v578;
              v575 = HIDWORD(v1151);
            }
            else
            {
              v577 = &v1084;
            }
            v579 = (char *)v1150 + 12 * v575;
            *(_DWORD *)v579 = v574;
            *(_QWORD *)(v579 + 4) = *(_QWORD *)v577;
            ++HIDWORD(v1151);
          }
          for (k = *((_DWORD *)this + 50); k < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = k)
          {
            if ((k + 4) > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v1052, v567, v568, v569, v570, v571, v572, v573);
              k = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + k) = -721215457;
            k = *((_DWORD *)this + 50) + 4;
          }
          v581 = k;
          if ((k + 4) > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v1052, v567, v568, v569, v570, v571, v572, v573);
            v581 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v581) = 335544320;
          *((_DWORD *)this + 50) += 4;
          if (*((_BYTE *)this + 328))
            v582 = 69;
          else
            v582 = 65;
          v1078 = k;
          v1079 = 0;
          v1080 = v582;
          v1081 = 15;
          v1082 = -1;
          if (k != -1)
          {
            if (HIDWORD(v1148) == (_DWORD)v1148)
            {
              v583 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1147, (void *)(HIDWORD(v1148) + 1), (unint64_t)&v1078, v569, v570, v571, v572, v573);
              v585 = *v583;
              v584 = v583 + 1;
              v586 = (char *)v1147 + 12 * HIDWORD(v1148);
              *(_DWORD *)v586 = v585;
            }
            else
            {
              v584 = &v1079;
              v586 = (char *)v1147 + 12 * HIDWORD(v1148);
              *(_DWORD *)v586 = k;
            }
            *(_QWORD *)(v586 + 4) = *(_QWORD *)v584;
            ++HIDWORD(v1148);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v1140, (uint64_t)this, v568, v569, v570, v571, v572, v573);
          if (!*((_BYTE *)this + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x197CAF1F0);
          }
          *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
          JSC::MacroAssemblerARM64::load8((uint64_t)this, v1057 | 0x500000000, *((char *)this + 304), v587, v588, v589, v590, v591);
          JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 2, v592, v593, v594, v595, (uint64_t)&v1076);
          v596 = v1076;
          if (v1076 != -1)
          {
            v597 = HIDWORD(v1148);
            if (HIDWORD(v1148) == (_DWORD)v1148)
            {
              v598 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1147, (void *)(HIDWORD(v1148) + 1), (unint64_t)&v1076, v205, v206, v207, v208, v209);
              v600 = *v598;
              v599 = v598 + 1;
              v596 = v600;
              v597 = HIDWORD(v1148);
            }
            else
            {
              v599 = &v1077;
            }
            v601 = (char *)v1147 + 12 * v597;
            *(_DWORD *)v601 = v596;
            *(_QWORD *)(v601 + 4) = *(_QWORD *)v599;
            ++HIDWORD(v1148);
          }
          for (j = *((_DWORD *)this + 50); j < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = j)
          {
            if ((j + 4) > *((_DWORD *)this + 48))
            {
              JSC::AssemblerBuffer::outOfLineGrow(v1052, v203, v204, v205, v206, v207, v208, v209);
              j = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + j) = -721215457;
            j = *((_DWORD *)this + 50) + 4;
          }
          v602 = j;
          if ((j + 4) > *((_DWORD *)this + 48))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v1052, v203, v204, v205, v206, v207, v208, v209);
            v602 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v602) = 335544320;
          *((_DWORD *)this + 50) += 4;
          if (*((_BYTE *)this + 328))
            v603 = 69;
          else
            v603 = 65;
          v1071 = j;
          v1072 = 0;
          v1073 = v603;
          v1074 = 15;
          v1075 = -1;
          if (j == -1)
            goto LABEL_84;
          v219 = HIDWORD(v1151);
          if (HIDWORD(v1151) == (_DWORD)v1151)
          {
            v220 = (void *)(HIDWORD(v1151) + 1);
            v221 = &v1071;
            goto LABEL_80;
          }
          v223 = &v1072;
          break;
        case 1:
        case 6:
        case 11:
          goto LABEL_396;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 9:
        case 10:
          goto LABEL_404;
        case 8:
          JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v74, v1057, v156, v157, v158, v159, (uint64_t)v1140);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1153, v1140, v604, v605, v606, v607, v608, v609);
          JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v74, 1, v610, v611, v612, v613, v614, (uint64_t)v1139);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1139, v615, v616, v617, v618, v619, v620);
          JSC::AssemblyHelpers::branchIfString((uint64_t)v1135, (uint64_t)this, v74, v621, v622, v623, v624, v625);
          JSC::AssemblyHelpers::branchIfNotHeapBigInt((uint64_t)this, v74, v626, v627, v628, v629, v630, (uint64_t)v1131);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1131, v631, v632, v633, v634, v635, v636);
          JSC::AssemblyHelpers::branchIfHeapBigInt((uint64_t)v1127, (uint64_t)this, v1057, v637, v638, v639, v640, v641);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1150, v1127, v642, v643, v644, v645, v646, v647);
          JSC::ARM64Assembler::label((_DWORD *)this + 8, v648, v649, v650, v651, v652, v653, v654, v1118);
          JSC::AssemblerBuffer::putInt(v1052, 335544320, v655, v656, v657, v658, v659, v660);
          if (*((_BYTE *)this + 328))
            v667 = 69;
          else
            v667 = 65;
          v1122 = v1118[0];
          v1123 = 0;
          v1124 = v667;
          v1125 = 15;
          v1126 = -1;
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, &v1122, v661, v662, v663, v664, v665, v666);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v1135, (uint64_t)this, v668, v669, v670, v671, v672, v673);
          JSC::AssemblyHelpers::branchIfNotString((uint64_t)this, v1057, v674, v675, v676, v677, v678, (uint64_t)v1118);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1118, v679, v680, v681, v682, v683, v684);
          JSC::ARM64Assembler::label((_DWORD *)this + 8, v685, v686, v687, v688, v689, v690, v691, v1067);
          JSC::AssemblerBuffer::putInt(v1052, 335544320, v692, v693, v694, v695, v696, v697);
          if (*((_BYTE *)this + 328))
            v704 = 69;
          else
            v704 = 65;
          v1113 = v1067[0];
          v1114 = 0;
          v1115 = v704;
          v1116 = 15;
          v1117 = -1;
          v705 = &v1113;
          goto LABEL_325;
        default:
          if ((_DWORD)v166 == 27)
          {
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v74, v1057, v156, v157, v158, v159, (uint64_t)v1140);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1153, v1140, v1009, v1010, v1011, v1012, v1013, v1014);
            JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v74, 1, v1015, v1016, v1017, v1018, v1019, (uint64_t)v1139);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1139, v1020, v1021, v1022, v1023, v1024, v1025);
            JSC::AssemblyHelpers::branchIfNotHeapBigInt((uint64_t)this, v74, v1026, v1027, v1028, v1029, v1030, (uint64_t)v1135);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1135, v1031, v1032, v1033, v1034, v1035, v1036);
            JSC::ARM64Assembler::label((_DWORD *)this + 8, v1037, v1038, v1039, v1040, v1041, v1042, v1043, v1127);
            JSC::AssemblerBuffer::putInt(v1052, 335544320, v1044, v1045, v1046, v1047, v1048, v1049);
            if (*((_BYTE *)this + 328))
              v1050 = 69;
            else
              v1050 = 65;
            v1131[0] = v1127[0];
            v1131[1] = 0;
            v1132 = v1050;
            v1133 = 15;
            v1134 = -1;
            v705 = v1131;
LABEL_325:
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1150, v705, v698, v699, v700, v701, v702, v703);
          }
          else
          {
            if ((_DWORD)v166 != 25)
            {
LABEL_404:
              __break(0xC471u);
              JUMPOUT(0x197CAEB78);
            }
LABEL_396:
            JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v74, v1057, v156, v157, v158, v159, (uint64_t)&v1141);
            v961 = v1141;
            if (v1141 != -1)
            {
              v962 = HIDWORD(v1154);
              if (HIDWORD(v1154) == (_DWORD)v1154)
              {
                v963 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1153, (void *)(HIDWORD(v1154) + 1), (unint64_t)&v1141, v205, v206, v207, v208, v209);
                v965 = *v963;
                v964 = (uint64_t *)(v963 + 1);
                v961 = v965;
                v962 = HIDWORD(v1154);
              }
              else
              {
                v964 = &v1142;
              }
              v966 = (char *)v1153 + 12 * v962;
              *(_DWORD *)v966 = v961;
              *(_QWORD *)(v966 + 4) = *v964;
              ++HIDWORD(v1154);
            }
          }
          goto LABEL_84;
      }
    }
    v227 = (int *)((char *)v1150 + 12 * v219);
    *v227 = j;
    v226 = v227 + 1;
LABEL_83:
    *v226 = *(_QWORD *)v223;
    ++HIDWORD(v1151);
LABEL_84:
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [103]>((uint64_t)this);
    if (HIDWORD(v1148))
    {
      v228 = 0;
      v229 = 0;
      v230 = 12 * HIDWORD(v1148);
      do
      {
        if (v229 >= HIDWORD(v1148))
        {
          __break(0xC471u);
          JUMPOUT(0x197CAF40CLL);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v1147 + v228), (uint64_t)this, v204, v205, v206, v207, v208, v209);
        ++v229;
        v228 += 12;
      }
      while (v230 != v228);
    }
    v231 = *((_DWORD *)this + 50);
    if (v231 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1052, v203, v204, v205, v206, v207, v208, v209);
      v231 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v231) = v109 | (32 * v109) | 0x11000800;
    *((_DWORD *)this + 50) += 4;
    JSC::MacroAssemblerARM64::load64((uint64_t)this, v146, 0x200000000uLL, v109, v206, v207, v208, v209);
    for (m = *((_DWORD *)this + 50); m < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = m)
    {
      if ((m + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v1052, v232, v233, v234, v235, v236, v237, v238);
        m = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + m) = -721215457;
      m = *((_DWORD *)this + 50) + 4;
    }
    v240 = m;
    if ((m + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1052, v232, v233, v234, v235, v236, v237, v238);
      v240 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v240) = 335544320;
    *((_DWORD *)this + 50) += 4;
    if (*((_BYTE *)this + 328))
      v241 = 69;
    else
      v241 = 65;
    v1067[0] = m;
    v1067[1] = 0;
    v1068 = v241;
    v1069 = 15;
    v1070 = -1;
    v1066 = i;
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)v1067, (unsigned int *)&v1066, (uint64_t)this, v234, v235, v236, v237, v238);
    v249 = HIDWORD(v1151);
    if (HIDWORD(v1151))
    {
      if (!(_BYTE)word_1ECF4C286
        || (JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "The slow path should call the operation."), (v249 = HIDWORD(v1151)) != 0))
      {
        v250 = 0;
        v251 = 0;
        v252 = 12 * v249;
        do
        {
          if (v251 >= HIDWORD(v1151))
          {
            __break(0xC471u);
            JUMPOUT(0x197CAF404);
          }
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v1150 + v250), (uint64_t)this, (uint64_t)v243, v244, v245, v246, v247, v248);
          ++v251;
          v250 += 12;
        }
        while (v252 != v250);
      }
      v253 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v243, v244, v245, v246, v247, v248);
      JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(v1067, (uint64_t)this, (uint64_t)operationMapKeyIndex, v109, v253, v254, v1056, v1057, v1059);
      for (n = *((_DWORD *)this + 50); n < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = n)
      {
        if ((n + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v1052, v242, (uint64_t)v243, v244, v245, v246, v247, v248);
          n = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + n) = -721215457;
        n = *((_DWORD *)this + 50) + 4;
      }
      v256 = n;
      if ((n + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v1052, v242, (uint64_t)v243, v244, v245, v246, v247, v248);
        v256 = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + v256) = 335544320;
      *((_DWORD *)this + 50) += 4;
      if (*((_BYTE *)this + 328))
        v257 = 69;
      else
        v257 = 65;
      v1061 = n;
      v1062 = 0;
      v1063 = v257;
      v1064 = 15;
      v1065 = -1;
      if (n != -1)
      {
        if (HIDWORD(v1154) == (_DWORD)v1154)
        {
          v258 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1153, (void *)(HIDWORD(v1154) + 1), (unint64_t)&v1061, v244, v245, v246, v247, v248);
          v260 = *v258;
          v259 = v258 + 1;
          v261 = (char *)v1153 + 12 * HIDWORD(v1154);
          *(_DWORD *)v261 = v260;
        }
        else
        {
          v259 = &v1062;
          v261 = (char *)v1153 + 12 * HIDWORD(v1154);
          *(_DWORD *)v261 = n;
        }
        *(_QWORD *)(v261 + 4) = *(_QWORD *)v259;
        ++HIDWORD(v1154);
      }
    }
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Didn't find a matched entryKey.");
    if (HIDWORD(v1161))
    {
      v262 = 0;
      v263 = 0;
      v264 = 12 * HIDWORD(v1161);
      do
      {
        if (v263 >= HIDWORD(v1161))
        {
          __break(0xC471u);
          JUMPOUT(0x197CAF414);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v1160 + v262), (uint64_t)this, (uint64_t)v243, v244, v245, v246, v247, v248);
        ++v263;
        v262 += 12;
      }
      while (v264 != v262);
    }
    v265 = *((_DWORD *)this + 50);
    if (v265 + 4 > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1052, v242, (uint64_t)v243, v244, v245, v246, v247, v248);
      v265 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v265) = v1053 & 0x1F | 0x12800000;
    *((_DWORD *)this + 50) += 4;
    if ((_BYTE)word_1ECF4C286)
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Done, either found or not found.");
    if (HIDWORD(v1154))
    {
      v266 = 0;
      v267 = 0;
      v268 = 12 * HIDWORD(v1154);
      do
      {
        if (v267 >= HIDWORD(v1154))
        {
          __break(0xC471u);
          JUMPOUT(0x197CAF41CLL);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v1153 + v266), (uint64_t)this, (uint64_t)v243, v244, v245, v246, v247, v248);
        ++v267;
        v266 += 12;
      }
      while (v268 != v266);
    }
    JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, (uint64_t)v243, v244, v245, v246, v247, v248);
    v276 = *((_DWORD *)a2 + 12);
    v277 = ~v276;
    if (v277 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197CAF44CLL);
    }
    v278 = *((_QWORD *)this + 499);
    if ((int)v109 > 15)
      v279 = -1;
    else
      v279 = v109;
    v280 = (char *)this + 12 * v279;
    *((_DWORD *)v280 + 1194) = v276;
    *((_DWORD *)v280 + 1195) = 5;
    v281 = v278 + 24 * (int)v277;
    v282 = *((_DWORD *)a2 + 13);
    *(_QWORD *)v281 = a2;
    *(_DWORD *)(v281 + 8) = v282;
    *(_BYTE *)(v281 + 17) = v109;
    *(_DWORD *)(v281 + 12) = 1;
    *(_BYTE *)(v281 + 16) = 0;
    v283 = v1147;
    if (v1149 != (_BYTE *)v1147 && v1147)
    {
      v1147 = 0;
      LODWORD(v1148) = 0;
      WTF::fastFree((unint64_t)v283, v269, v270, v271, v272, v273, v274, v275);
    }
    v284 = v1150;
    if (v1152 != (_BYTE *)v1150 && v1150)
    {
      v1150 = 0;
      LODWORD(v1151) = 0;
      WTF::fastFree((unint64_t)v284, v269, v270, v271, v272, v273, v274, v275);
    }
    v285 = v1153;
    if (v1155 != (_BYTE *)v1153 && v1153)
    {
      v1153 = 0;
      LODWORD(v1154) = 0;
      WTF::fastFree((unint64_t)v285, v269, v270, v271, v272, v273, v274, v275);
    }
    v286 = v1160;
    goto LABEL_142;
  }
  if ((_DWORD)v12 != 31)
  {
    __break(0xC471u);
    JUMPOUT(0x197CAEB98);
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v1179, this, v11, a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v1177, this, *((_QWORD *)a2 + 4), v295, v296, v297, v298, v299);
  v306 = *((_QWORD *)a2 + 5);
  v1173 = this;
  v1174 = v306;
  v1175 = -1;
  v307 = ~*(_DWORD *)((v306 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v307 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197CAF454);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v307 + 12))
    v1175 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, v306, (uint64_t)v1176, v301, v302, v303, v304, v305);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v1171, this, v300, v301, v302, v303, v304, v305);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v1169, this, v308, v309, v310, v311, v312, v313);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v1167, this, v314, v315, v316, v317, v318, v319);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v1165, this, v320, v321, v322, v323, v324, v325);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v1163, this, v326, v327, v328, v329, v330, v331);
  v339 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v1179, v332, v333, v334, v335, v336, v337, v338);
  v1058 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v1177, v340, v341, v342, v343, v344, v345, v346);
  v1060 = v1175;
  if (v1175 == 255)
  {
    v1060 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(v1173, v1174, (uint64_t)v1176, v347, v348, v349, v350, v351);
    v1175 = v1060;
  }
  v352 = v1172;
  v353 = v1170;
  v354 = v1168;
  v355 = v1166;
  v356 = v1164;
  JSC::DFG::SpeculativeJIT::speculateSetObject((uint64_t)this, *((_QWORD *)a2 + 3), v339, v347, v348, v349, v350, v351);
  v362 = *((_QWORD *)a2 + 4);
  if ((v362 & 0xFC000000000000) != 0)
    JSC::DFG::SpeculativeJIT::speculate(this, (uint64_t)a2, v362, v357, v358, v359, v360, v361);
  v1160 = (WTF *)v1162;
  v1161 = 2;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Get the JSImmutableButterfly first.");
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v339 | 0x1000000000, v352, v357, v358, v359, v360, v361);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, v352, 0xFFFFFFFFLL, v363, v364, v365, v366, (uint64_t)&v1158, v367);
  v375 = v1158;
  if (v1158 != -1)
  {
    v376 = HIDWORD(v1161);
    if (HIDWORD(v1161) == (_DWORD)v1161)
    {
      v377 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1160, (void *)(HIDWORD(v1161) + 1), (unint64_t)&v1158, v370, v371, v372, v373, v374);
      v10 = (uint64_t *)(v377 + 1);
      v375 = *v377;
      v376 = HIDWORD(v1161);
    }
    v378 = (char *)v1160 + 12 * v376;
    *(_DWORD *)v378 = v375;
    *(_QWORD *)(v378 + 4) = *v10;
    ++HIDWORD(v1161);
  }
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [114]>((uint64_t)this);
  v1051 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
  v379 = *((_DWORD *)this + 50);
  if (v379 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v1051, v368, v369, v370, v371, v372, v373, v374);
    v379 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v379) = v352 | (32 * v352) | 0x91004000;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v352 | 0x1000000000, v354, v370, v371, v372, v373, v374);
  v387 = v353 | (32 * v354) | 0x51000400;
  v388 = *((_DWORD *)this + 50);
  if (v388 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v1051, v380, v381, v382, v383, v384, v385, v386);
    v388 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v388) = v387;
  v389 = *((_DWORD *)this + 50);
  v390 = v389 + 4;
  *((_DWORD *)this + 50) = v389 + 4;
  if ((v389 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v1051, v380, v381, v382, v383, v384, v385, v386);
    v390 = *((_DWORD *)this + 50);
  }
  v391 = (char)v355;
  *(_DWORD *)(*((_QWORD *)this + 7) + v390) = ((v1060 & 0x1F) << 16) | (32 * (v353 & 0x1F)) | v353 & 0x1F | 0xA000000;
  v392 = *((_DWORD *)this + 50);
  v393 = v392 + 4;
  *((_DWORD *)this + 50) = v392 + 4;
  if ((v392 + 8) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v1051, v380, v381, v382, v383, v384, v385, v386);
    v393 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v393) = v353 | (32 * v353) | 0x11001000;
  *((_DWORD *)this + 50) += 4;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Get the entryKeyIndex JSValue.");
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v352 | ((unint64_t)v353 << 8) | 0x300000000, 0x200000000uLL, (char)v355, v383, v384, v385, v386);
  v400 = *(JSC::VM **)(*((_QWORD *)this + 44) + 16);
  v401 = *((_QWORD *)v400 + 5230);
  if (!v401)
    v401 = JSC::VM::orderedHashTableDeletedValueSlow(v400, v394, 0, v395, v396, v397, v398, v399);
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v1156, this, v401, v395, v396, v397, v398, v399);
  if (v1156 == 0xFFFFFFFFLL)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, (uint64_t)v1157, v353, v402, v403, v404, v405, v406);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)this, ((unint64_t)v1156 << 35) + 0x380000001ALL, (char)v353, v402, v403, v404, v405, v406);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [74]>((uint64_t)this);
  for (ii = *((_DWORD *)this + 50); ii < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = ii)
  {
    if ((ii + 4) > *((_DWORD *)this + 48))
    {
      v414 = (int8x8_t)JSC::AssemblerBuffer::outOfLineGrow(v1051, v407, v408, v409, v410, v411, v412, v413).n128_u64[0];
      ii = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + ii) = -721215457;
    ii = *((_DWORD *)this + 50) + 4;
  }
  v1054 = ii;
  *((_DWORD *)this + 52) = 0;
  v1153 = (WTF *)v1155;
  v1154 = 2;
  v1150 = (WTF *)v1152;
  v1151 = 2;
  v1147 = (WTF *)v1149;
  v1148 = 2;
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 0, (char)v355, 0xFFFFFFFFLL, v410, v411, v412, v413, (uint64_t)&v1145, v414);
  if (v1145 != -1)
  {
    if (HIDWORD(v1161) == (_DWORD)v1161)
    {
      v421 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1160, (void *)(HIDWORD(v1161) + 1), (unint64_t)&v1145, v416, v417, v418, v419, v420);
      v423 = *v421;
      v422 = (uint64_t *)(v421 + 1);
      v424 = (_DWORD *)((char *)v1160 + 12 * HIDWORD(v1161));
      *v424 = v423;
      v425 = (uint64_t *)(v424 + 1);
    }
    else
    {
      v426 = (_DWORD *)((char *)v1160 + 12 * HIDWORD(v1161));
      *v426 = v1145;
      v425 = (uint64_t *)(v426 + 1);
      v422 = &v1146;
    }
    *v425 = *v422;
    ++HIDWORD(v1161);
  }
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Get the entryKey JSValue.");
  JSC::MacroAssemblerARM64::and64((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, v355, (char)v355);
  v1055 = v355;
  v427 = v352 | (unint64_t)(v355 << 8) | 0x300000000;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v427, 0x200000000uLL, (char)v356, v428, v429, v430, v431);
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [52]>((uint64_t)this);
  JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v356, (char)v353, v432, v433, v434, v435, (uint64_t)&v1143);
  if (v1143 != -1)
  {
    if (HIDWORD(v1148) == (_DWORD)v1148)
    {
      v441 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1147, (void *)(HIDWORD(v1148) + 1), (unint64_t)&v1143, v436, v437, v438, v439, v440);
      v443 = *v441;
      v442 = v441 + 1;
      v444 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
      *v444 = v443;
      v445 = v444 + 1;
    }
    else
    {
      v446 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
      *v446 = v1143;
      v445 = v446 + 1;
      v442 = &v1144;
    }
    *v445 = *(_QWORD *)v442;
    ++HIDWORD(v1148);
  }
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Now the current entryKey is not a deleted value. Then check whether it matches the target key.");
  v447 = (*((_QWORD *)a2 + 4) >> 50) & 0x3FLL;
  if (((*((_QWORD *)a2 + 4) >> 50) & 0x3F) <= 0x14)
  {
    switch((int)v447)
    {
      case 0:
        JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v356, v1058, v437, v438, v439, v440, (uint64_t)&v1141);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1153, &v1141, v724, v725, v726, v727, v728, v729);
        JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v356, 1, v730, v731, v732, v733, v734, (uint64_t)v1140);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1140, v735, v736, v737, v738, v739, v740);
        v748 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v1177, v741, v742, v743, v744, v745, v746, v747);
        JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v748, 1, v749, v750, v751, v752, v753, (uint64_t)v1139);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1139, v754, v755, v756, v757, v758, v759);
        JSC::AssemblyHelpers::branchIfString((uint64_t)v1135, (uint64_t)this, v356, v760, v761, v762, v763, v764);
        JSC::AssemblyHelpers::branchIfNotHeapBigInt((uint64_t)this, v356, v765, v766, v767, v768, v769, (uint64_t)v1131);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1131, v770, v771, v772, v773, v774, v775);
        JSC::AssemblyHelpers::branchIfHeapBigInt((uint64_t)v1127, (uint64_t)this, v1058, v776, v777, v778, v779, v780);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1150, v1127, v781, v782, v783, v784, v785, v786);
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v787, v788, v789, v790, v791, v792, v793, v1118);
        JSC::AssemblerBuffer::putInt(v1051, 335544320, v794, v795, v796, v797, v798, v799);
        if (*((_BYTE *)this + 328))
          v806 = 69;
        else
          v806 = 65;
        v1122 = v1118[0];
        v1123 = 0;
        v1124 = v806;
        v1125 = 15;
        v1126 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, &v1122, v800, v801, v802, v803, v804, v805);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v1135, (uint64_t)this, v807, v808, v809, v810, v811, v812);
        JSC::AssemblyHelpers::branchIfNotString((uint64_t)this, v1058, v813, v814, v815, v816, v817, (uint64_t)v1118);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1118, v818, v819, v820, v821, v822, v823);
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v824, v825, v826, v827, v828, v829, v830, &v1094);
        JSC::AssemblerBuffer::putInt(v1051, 335544320, v831, v832, v833, v834, v835, v836);
        if (*((_BYTE *)this + 328))
          v837 = 69;
        else
          v837 = 65;
        v1099 = v1094;
        v1100 = 0;
        v1101 = v837;
        v1102 = 15;
        v1103 = -1;
        v454 = &v1150;
        v455 = &v1099;
        goto LABEL_233;
      case 1:
      case 6:
      case 11:
        goto LABEL_232;
      case 8:
        JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v356, v1058, v437, v438, v439, v440, (uint64_t)&v1141);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1153, &v1141, v866, v867, v868, v869, v870, v871);
        JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v356, 1, v872, v873, v874, v875, v876, (uint64_t)v1140);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1140, v877, v878, v879, v880, v881, v882);
        JSC::AssemblyHelpers::branchIfString((uint64_t)v1139, (uint64_t)this, v356, v883, v884, v885, v886, v887);
        JSC::AssemblyHelpers::branchIfNotHeapBigInt((uint64_t)this, v356, v888, v889, v890, v891, v892, (uint64_t)v1135);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1135, v893, v894, v895, v896, v897, v898);
        JSC::AssemblyHelpers::branchIfHeapBigInt((uint64_t)v1131, (uint64_t)this, v1058, v899, v900, v901, v902, v903);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1150, v1131, v904, v905, v906, v907, v908, v909);
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v910, v911, v912, v913, v914, v915, v916, &v1122);
        JSC::AssemblerBuffer::putInt(v1051, 335544320, v917, v918, v919, v920, v921, v922);
        if (*((_BYTE *)this + 328))
          v929 = 69;
        else
          v929 = 65;
        v1127[0] = v1122;
        v1127[1] = 0;
        v1128 = v929;
        v1129 = 15;
        v1130 = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1127, v923, v924, v925, v926, v927, v928);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v1139, (uint64_t)this, v930, v931, v932, v933, v934, v935);
        JSC::AssemblyHelpers::branchIfNotString((uint64_t)this, v1058, v936, v937, v938, v939, v940, (uint64_t)&v1122);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, &v1122, v941, v942, v943, v944, v945, v946);
        JSC::ARM64Assembler::label((_DWORD *)this + 8, v947, v948, v949, v950, v951, v952, v953, &v1099);
        JSC::AssemblerBuffer::putInt(v1051, 335544320, v954, v955, v956, v957, v958, v959);
        if (*((_BYTE *)this + 328))
          v960 = 69;
        else
          v960 = 65;
        v1118[0] = v1099;
        v1118[1] = 0;
        v1119 = v960;
        v1120 = 15;
        v1121 = -1;
        v454 = &v1150;
        v455 = v1118;
        goto LABEL_233;
      default:
        goto LABEL_403;
    }
  }
  if ((_DWORD)v447 == 21)
  {
    JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v356, v1058, v437, v438, v439, v440, (uint64_t)&v1113);
    v503 = v1113;
    if (v1113 != -1)
    {
      v504 = HIDWORD(v1154);
      if (HIDWORD(v1154) == (_DWORD)v1154)
      {
        v505 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1153, (void *)(HIDWORD(v1154) + 1), (unint64_t)&v1113, v498, v499, v500, v501, v502);
        v507 = *v505;
        v506 = v505 + 1;
        v503 = v507;
        v504 = HIDWORD(v1154);
      }
      else
      {
        v506 = &v1114;
      }
      v838 = (char *)v1153 + 12 * v504;
      *(_DWORD *)v838 = v503;
      *(_QWORD *)(v838 + 4) = *(_QWORD *)v506;
      ++HIDWORD(v1154);
    }
    JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v356, 1, v498, v499, v500, v501, v502, (uint64_t)&v1111);
    if (v1111 != -1)
    {
      if (HIDWORD(v1148) == (_DWORD)v1148)
      {
        v844 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1147, (void *)(HIDWORD(v1148) + 1), (unint64_t)&v1111, v839, v840, v841, v842, v843);
        v846 = *v844;
        v845 = v844 + 1;
        v847 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
        *v847 = v846;
        v848 = v847 + 1;
      }
      else
      {
        v849 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
        *v849 = v1111;
        v848 = v849 + 1;
        v845 = &v1112;
      }
      *v848 = *(_QWORD *)v845;
      ++HIDWORD(v1148);
    }
    if (!*((_BYTE *)this + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197CAF2CCLL);
    }
    *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
    JSC::MacroAssemblerARM64::load8((uint64_t)this, v356 | 0x500000000, *((char *)this + 304), v839, v840, v841, v842, v843);
    JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 2, v850, v851, v852, v853, (uint64_t)&v1109);
    v854 = &v1105;
    if (v1109 != -1)
    {
      if (HIDWORD(v1148) == (_DWORD)v1148)
      {
        v855 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1147, (void *)(HIDWORD(v1148) + 1), (unint64_t)&v1109, v458, v459, v460, v461, v462);
        v857 = *v855;
        v856 = (uint64_t *)(v855 + 1);
        v858 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
        *v858 = v857;
        v859 = (uint64_t *)(v858 + 1);
      }
      else
      {
        v860 = (_DWORD *)((char *)v1147 + 12 * HIDWORD(v1148));
        *v860 = v1109;
        v859 = (uint64_t *)(v860 + 1);
        v856 = &v1110;
      }
      *v859 = *v856;
      ++HIDWORD(v1148);
    }
    v861 = *((_DWORD *)this + 50);
    if (v861 < *((_DWORD *)this + 13))
    {
      v854 = &v1105;
      do
      {
        if ((v861 + 4) > *((_DWORD *)this + 48))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v1051, v456, v457, v458, v459, v460, v461, v462);
          v861 = *((_DWORD *)this + 50);
        }
        *(_DWORD *)(*((_QWORD *)this + 7) + v861) = -721215457;
        v861 = *((_DWORD *)this + 50) + 4;
        *((_DWORD *)this + 50) = v861;
      }
      while (v861 < *((_DWORD *)this + 13));
    }
    v862 = v861;
    if ((v861 + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1051, v456, v457, v458, v459, v460, v461, v462);
      v862 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v862) = 335544320;
    *((_DWORD *)this + 50) += 4;
    if (*((_BYTE *)this + 328))
      v863 = 69;
    else
      v863 = 65;
    v1104 = v861;
    v1105 = 0;
    v1106 = v863;
    v1107 = 15;
    v1108 = -1;
    if (v861 != -1)
    {
      if (HIDWORD(v1151) == (_DWORD)v1151)
      {
        v864 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1150, (void *)(HIDWORD(v1151) + 1), (unint64_t)&v1104, v458, v459, v460, v461, v462);
        v854 = v864 + 1;
        v865 = (char *)v1150 + 12 * HIDWORD(v1151);
        *(_DWORD *)v865 = *v864;
      }
      else
      {
        v865 = (char *)v1150 + 12 * HIDWORD(v1151);
        *(_DWORD *)v865 = v861;
      }
      *(_QWORD *)(v865 + 4) = *(_QWORD *)v854;
      ++HIDWORD(v1151);
    }
  }
  else
  {
    if ((_DWORD)v447 == 27)
    {
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v356, v1058, v437, v438, v439, v440, (uint64_t)&v1141);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1153, &v1141, v967, v968, v969, v970, v971, v972);
      JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v356, 1, v973, v974, v975, v976, v977, (uint64_t)v1140);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1140, v978, v979, v980, v981, v982, v983);
      JSC::AssemblyHelpers::branchIfNotHeapBigInt((uint64_t)this, v356, v984, v985, v986, v987, v988, (uint64_t)v1139);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1147, v1139, v989, v990, v991, v992, v993, v994);
      JSC::ARM64Assembler::label((_DWORD *)this + 8, v995, v996, v997, v998, v999, v1000, v1001, v1131);
      JSC::AssemblerBuffer::putInt(v1051, 335544320, v1002, v1003, v1004, v1005, v1006, v1007);
      if (*((_BYTE *)this + 328))
        v1008 = 69;
      else
        v1008 = 65;
      v1135[0] = v1131[0];
      v1135[1] = 0;
      v1136 = v1008;
      v1137 = 15;
      v1138 = -1;
      v454 = &v1150;
      v455 = (int *)v1135;
    }
    else
    {
      if ((_DWORD)v447 != 25)
      {
LABEL_403:
        __break(0xC471u);
        JUMPOUT(0x197CAEB58);
      }
LABEL_232:
      JSC::MacroAssemblerARM64::branch64((uint64_t)this, 0, (char)v356, v1058, v437, v438, v439, v440, (uint64_t)&v1141);
      v454 = &v1153;
      v455 = &v1141;
    }
LABEL_233:
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(v454, v455, v448, v449, v450, v451, v452, v453);
  }
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [103]>((uint64_t)this);
  if (HIDWORD(v1148))
  {
    v463 = 0;
    v464 = 0;
    v465 = 12 * HIDWORD(v1148);
    do
    {
      if (v464 >= HIDWORD(v1148))
      {
        __break(0xC471u);
        JUMPOUT(0x197CAF42CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v1147 + v463), (uint64_t)this, v457, v458, v459, v460, v461, v462);
      ++v464;
      v463 += 12;
    }
    while (v465 != v463);
  }
  v466 = *((_DWORD *)this + 50);
  if (v466 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v1051, v456, v457, v458, v459, v460, v461, v462);
    v466 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v466) = v391 | (32 * v391) | 0x11000400;
  *((_DWORD *)this + 50) += 4;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v427, 0x200000000uLL, v391, v459, v460, v461, v462);
  for (jj = *((_DWORD *)this + 50); jj < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = jj)
  {
    if ((jj + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1051, v467, v468, v469, v470, v471, v472, v473);
      jj = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + jj) = -721215457;
    jj = *((_DWORD *)this + 50) + 4;
  }
  v475 = jj;
  if ((jj + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v1051, v467, v468, v469, v470, v471, v472, v473);
    v475 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v475) = 335544320;
  *((_DWORD *)this + 50) += 4;
  if (*((_BYTE *)this + 328))
    v476 = 69;
  else
    v476 = 65;
  v1094 = jj;
  v1095 = 0;
  v1096 = v476;
  v1097 = 15;
  v1098 = -1;
  v1087 = v1054;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::linkTo((unsigned int *)&v1094, &v1087, (uint64_t)this, v469, v470, v471, v472, v473);
  v484 = HIDWORD(v1151);
  if (HIDWORD(v1151))
  {
    if (!(_BYTE)word_1ECF4C286
      || (JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "The slow path should call the operation."), (v484 = HIDWORD(v1151)) != 0))
    {
      v485 = 0;
      v486 = 0;
      v487 = 12 * v484;
      do
      {
        if (v486 >= HIDWORD(v1151))
        {
          __break(0xC471u);
          JUMPOUT(0x197CAF424);
        }
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v1150 + v485), (uint64_t)this, (uint64_t)v478, v479, v480, v481, v482, v483);
        ++v486;
        v485 += 12;
      }
      while (v487 != v485);
    }
    v488 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v478, v479, v480, v481, v482, v483);
    JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,JSC::JSCell *,long long,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v1094, (uint64_t)this, (uint64_t)operationSetKeyIndex, v391, v488, v489, v339, v1058, v1060);
    for (kk = *((_DWORD *)this + 50); kk < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = kk)
    {
      if ((kk + 4) > *((_DWORD *)this + 48))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v1051, v477, (uint64_t)v478, v479, v480, v481, v482, v483);
        kk = *((_DWORD *)this + 50);
      }
      *(_DWORD *)(*((_QWORD *)this + 7) + kk) = -721215457;
      kk = *((_DWORD *)this + 50) + 4;
    }
    v491 = kk;
    if ((kk + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v1051, v477, (uint64_t)v478, v479, v480, v481, v482, v483);
      v491 = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + v491) = 335544320;
    *((_DWORD *)this + 50) += 4;
    if (*((_BYTE *)this + 328))
      v492 = 69;
    else
      v492 = 65;
    v1089 = kk;
    v1090 = 0;
    v1091 = v492;
    v1092 = 15;
    v1093 = -1;
    if (kk != -1)
    {
      if (HIDWORD(v1154) == (_DWORD)v1154)
      {
        v493 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1153, (void *)(HIDWORD(v1154) + 1), (unint64_t)&v1089, v479, v480, v481, v482, v483);
        v495 = *v493;
        v494 = v493 + 1;
        v496 = (_DWORD *)((char *)v1153 + 12 * HIDWORD(v1154));
        *v496 = v495;
        v497 = v496 + 1;
      }
      else
      {
        v706 = (int *)((char *)v1153 + 12 * HIDWORD(v1154));
        *v706 = kk;
        v497 = v706 + 1;
        v494 = &v1090;
      }
      *v497 = *(_QWORD *)v494;
      ++HIDWORD(v1154);
    }
  }
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Didn't find a matched entryKey.");
  if (HIDWORD(v1161))
  {
    v707 = 0;
    v708 = 0;
    v709 = 12 * HIDWORD(v1161);
    do
    {
      if (v708 >= HIDWORD(v1161))
      {
        __break(0xC471u);
        JUMPOUT(0x197CAF434);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v1160 + v707), (uint64_t)this, (uint64_t)v478, v479, v480, v481, v482, v483);
      ++v708;
      v707 += 12;
    }
    while (v709 != v707);
  }
  v710 = *((_DWORD *)this + 50);
  if (v710 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v1051, v477, (uint64_t)v478, v479, v480, v481, v482, v483);
    v710 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v710) = v1055 & 0x1F | 0x12800000;
  *((_DWORD *)this + 50) += 4;
  if ((_BYTE)word_1ECF4C286)
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::comment<char [36]>((uint64_t)this, "Done, either found or not found.");
  if (HIDWORD(v1154))
  {
    v711 = 0;
    v712 = 0;
    v713 = 12 * HIDWORD(v1154);
    do
    {
      if (v712 >= HIDWORD(v1154))
      {
        __break(0xC471u);
        JUMPOUT(0x197CAF43CLL);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v1153 + v711), (uint64_t)this, (uint64_t)v478, v479, v480, v481, v482, v483);
      ++v712;
      v711 += 12;
    }
    while (v713 != v711);
  }
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, (uint64_t)v478, v479, v480, v481, v482, v483);
  v714 = *((_DWORD *)a2 + 12);
  v715 = ~v714;
  if (v715 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197CAF45CLL);
  }
  v716 = *((_QWORD *)this + 499);
  if ((int)v391 > 15)
    v717 = -1;
  else
    v717 = v391;
  v718 = (char *)this + 12 * v717;
  *((_DWORD *)v718 + 1194) = v714;
  *((_DWORD *)v718 + 1195) = 5;
  v719 = v716 + 24 * (int)v715;
  v720 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v719 = a2;
  *(_DWORD *)(v719 + 8) = v720;
  *(_BYTE *)(v719 + 17) = v391;
  *(_DWORD *)(v719 + 12) = 1;
  *(_BYTE *)(v719 + 16) = 0;
  v721 = v1147;
  if (v1149 != (_BYTE *)v1147 && v1147)
  {
    v1147 = 0;
    LODWORD(v1148) = 0;
    WTF::fastFree((unint64_t)v721, v269, v270, v271, v272, v273, v274, v275);
  }
  v722 = v1150;
  if (v1152 != (_BYTE *)v1150 && v1150)
  {
    v1150 = 0;
    LODWORD(v1151) = 0;
    WTF::fastFree((unint64_t)v722, v269, v270, v271, v272, v273, v274, v275);
  }
  v723 = v1153;
  if (v1155 != (_BYTE *)v1153 && v1153)
  {
    v1153 = 0;
    LODWORD(v1154) = 0;
    WTF::fastFree((unint64_t)v723, v269, v270, v271, v272, v273, v274, v275);
  }
  v286 = v1160;
LABEL_142:
  if (v1162 != (_BYTE *)v286 && v286)
  {
    v1160 = 0;
    LODWORD(v1161) = 0;
    WTF::fastFree((unint64_t)v286, v269, v270, v271, v272, v273, v274, v275);
  }
  if (v1163)
  {
    v287 = (char)v1164;
    if ((char)v1164 != -1)
    {
      if ((char)v1164 > 15)
        v287 = -1;
      --*(_DWORD *)(v1163 + 12 * v287 + 4784);
    }
  }
  if (v1165)
  {
    v288 = (char)v1166;
    if ((char)v1166 != -1)
    {
      if ((char)v1166 > 15)
        v288 = -1;
      --*(_DWORD *)(v1165 + 12 * v288 + 4784);
    }
  }
  if (v1167)
  {
    v289 = v1168;
    if (v1168 != -1)
    {
      if (v1168 > 15)
        v289 = -1;
      --*(_DWORD *)(v1167 + 12 * v289 + 4784);
    }
  }
  if (v1169)
  {
    v290 = v1170;
    if (v1170 != -1)
    {
      if (v1170 > 15)
        v290 = -1;
      --*(_DWORD *)(v1169 + 12 * v290 + 4784);
    }
  }
  if (v1171)
  {
    v291 = v1172;
    if (v1172 != -1)
    {
      if (v1172 > 15)
        v291 = -1;
      --*(_DWORD *)(v1171 + 12 * v291 + 4784);
    }
  }
  v292 = v1175;
  if (v1175 > 15)
    v292 = -1;
  --*((_DWORD *)v1173 + 3 * v292 + 1196);
  if ((v1177[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v293 = v1178;
    if (v1178 > 15)
      v293 = -1;
    --*(_DWORD *)(v1177[0] + 12 * v293 + 4784);
  }
  if ((v1179[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v294 = v1180;
    if (v1180 > 15)
      v294 = -1;
    --*(_DWORD *)(v1179[0] + 12 * v294 + 4784);
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::jsValueResult(uint64_t a1, char a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t *result;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int v18;

  v11 = a2;
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  v13 = a2;
  if (v11 > 15)
    v13 = -1;
  v14 = a1 + 12 * v13;
  v15 = *((_DWORD *)a3 + 12);
  *(_DWORD *)(v14 + 4776) = v15;
  *(_DWORD *)(v14 + 4780) = 4;
  v16 = ~v15;
  if (v16 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 3992) + 24 * (int)v16;
    v18 = *((_DWORD *)a3 + 13);
    *(_QWORD *)v17 = a3;
    *(_DWORD *)(v17 + 8) = v18;
    *(_BYTE *)(v17 + 17) = v11;
    *(_DWORD *)(v17 + 12) = 16;
    *(_BYTE *)(v17 + 16) = 0;
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileGetByVal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  char v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x8_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  JSC::DFG::Node *v68;
  char v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  int v112;
  __int16 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  JSC::DFG::Node *v136;
  int v137;
  unsigned int v138;
  _DWORD *v139;
  unint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t i;
  uint64_t v198;
  uint64_t v199;
  uint64_t j;
  uint64_t v201;
  unsigned int v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  unsigned int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int v218;
  uint64_t v219;
  unsigned int *v220;
  unsigned int v221;
  int v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  _DWORD *v248;
  uint64_t *v249;
  int v250;
  _DWORD *v251;
  uint64_t *v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  void *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  unsigned int v270;
  unint64_t v271;
  unint64_t v272;
  char v273;
  char v274;
  unsigned int v275;
  unint64_t v276;
  unint64_t v277;
  unsigned __int8 v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char v285;
  char v286;
  int v287;
  char v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  unsigned int v305;
  _DWORD *v306;
  uint64_t *v307;
  int v308;
  _DWORD *v309;
  unsigned int v310;
  int v311;
  _BYTE *v312;
  WTF *v313;
  WTF *v314;
  uint64_t v315;
  unsigned int v316;
  _BYTE *v317;
  WTF *v318;
  WTF *v319;
  uint64_t v320;
  unsigned int v321;
  int v322;
  _BYTE *v323;
  uint64_t v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t v327;
  int v328;
  _WORD *v329;
  __int128 *v330;
  __int128 *v331;
  void *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v341;
  unint64_t v342;
  int v343;
  WTF *v344;
  int v345;
  int v346;
  int v347;
  int v348;
  int v349;
  __int16 v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  __int128 v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t *v358;
  uint64_t *v359;
  uint64_t v360;
  JSC::DFG::Node *v361;
  void *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  char v370;
  _DWORD *v371;
  unint64_t v372;
  uint64_t v373;
  int v374;
  WTF *v375;
  char v376;
  unsigned int v377;
  uint64_t (*v378)(JSC::JSGlobalObject *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t);
  int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  unsigned int v386;
  _DWORD *v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  int8x8_t v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  JSC::DFG::Node *v422;
  void *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  char v430;
  uint64_t v431;
  int v432;
  unint64_t v433;
  uint64_t v434;
  int v435;
  unint64_t v436;
  char v437;
  BOOL v438;
  char v439;
  unsigned int v440;
  JSC::DFG::Node *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  unsigned int v448;
  _DWORD *v449;
  uint64_t *v450;
  int v451;
  uint64_t v452;
  unsigned int v453;
  char v454;
  int v455;
  _BYTE *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unsigned int v463;
  _WORD *v464;
  WTF *v465;
  WTF *v466;
  void *v467;
  unint64_t v468;
  _QWORD *v469;
  uint64_t v470;
  uint64_t *v471;
  uint64_t *v472;
  uint64_t v473;
  uint64_t v474;
  WTF *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unsigned int v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  int v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  JSC::DFG::Node *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  unsigned __int8 v508;
  JSC::DFG::Node *v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unsigned __int8 *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  unsigned int v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unsigned int v530;
  uint8x8_t v531;
  __int32 v532;
  uint8x8_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  int v538;
  int v539;
  unsigned int v540;
  unsigned int v541;
  unsigned int v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  unsigned __int8 v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  unsigned int v565;
  unsigned int v566;
  unsigned int *v567;
  JSC::DFG::Node *v568;
  unsigned int v569;
  uint64_t v570;
  int v571;
  unint64_t v572;
  uint64_t v573;
  int v574;
  unsigned int v575;
  int v576;
  uint64_t v577;
  void *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  int v586;
  unsigned int v587;
  unint64_t v588;
  unint64_t v589;
  char v590;
  unsigned int v591;
  unint64_t v592;
  unint64_t v593;
  unsigned __int8 v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  char v601;
  char v602;
  char v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  char v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  int v619;
  unsigned int v620;
  _DWORD *v621;
  uint64_t *v622;
  int v623;
  char v624;
  char v625;
  int v626;
  uint64_t v627;
  unsigned __int8 *v628;
  unsigned __int8 *v629;
  uint64_t v630;
  _BYTE *v631;
  unsigned __int8 *v632;
  char *v633;
  char *v634;
  uint64_t v635;
  int v636;
  unsigned __int8 *v637;
  unsigned int *v638;
  uint64_t v639;
  unsigned int v640;
  uint64_t v641;
  unsigned int v642;
  JSC::DFG::SpeculateStrictInt32Operand *v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  char v653;
  JSC::DFG::Node *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  int8x8_t v674;
  JSC::DFG::Node *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  int v681;
  unsigned int v682;
  int *v683;
  int *v684;
  int v685;
  uint64_t v686;
  unsigned int v687;
  _BYTE *v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  unsigned int v694;
  _WORD *v695;
  WTF *v696;
  WTF *v697;
  void *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  unint64_t v705;
  _QWORD *v706;
  uint64_t v707;
  uint64_t *v708;
  uint64_t *v709;
  uint64_t v710;
  uint64_t v711;
  JSC::DFG::Node *v712;
  void *v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  char v720;
  uint64_t v721;
  int v722;
  unint64_t v723;
  uint64_t v724;
  int v725;
  unint64_t v726;
  char v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  unsigned int v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  unsigned int v743;
  void *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  char v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unsigned __int8 v767;
  uint64_t v768;
  __int16 v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  int v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  char v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  void *v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  unint64_t v848;
  char *v849;
  char v850;
  unsigned int v851;
  unsigned int v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  BOOL v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  unsigned int v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  char v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  unsigned int *v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  unsigned int v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  unsigned int v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  unsigned __int8 v922;
  char v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  int8x8_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  char v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  JSC::DFG::Node *v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  void *v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  WTF *v971;
  void *v972;
  WTF *v973;
  int v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  char v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  int v983;
  int v984;
  unsigned __int8 *v985;
  JSC::AssemblerBuffer *v986;
  char v987;
  WTF *v988;
  unsigned int v989;
  _BYTE v990[24];
  uint64_t v991;
  int v992;
  int v993;
  int v994;
  uint64_t v995;
  int v996[3];
  int v997[3];
  WTF *v998;
  int v999;
  uint64_t v1000;
  uint64_t v1001;
  _DWORD v1002[3];
  int v1003[3];
  _DWORD v1004[3];
  int v1005[3];
  _DWORD v1006[3];
  int v1007[3];
  int v1008[3];
  WTF *v1009;
  unsigned int v1010;
  unsigned int v1011;
  _BYTE v1012[24];
  uint64_t v1013;
  int v1014;
  uint64_t v1015;
  int v1016[3];
  int v1017;
  uint64_t v1018;
  int v1019[3];
  int v1020[3];
  uint64_t v1021;
  WTF *v1022;
  unsigned int v1023;
  unsigned int v1024;
  _BYTE v1025[28];
  int v1026;
  uint64_t v1027;
  WTF *v1028;
  int v1029;
  uint64_t v1030;
  uint64_t v1031;
  __int128 v1032;
  _BYTE v1033[4];
  int v1034;
  uint64_t v1035;
  uint64_t v1036;
  __int16 v1037;
  int v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  unsigned int v1042;
  int v1043;
  uint64_t v1044;
  WTF *v1045;
  uint64_t v1046;
  _BYTE v1047[24];
  _QWORD v1048[2];
  uint64_t v1049;
  _QWORD v1050[2];
  char v1051;
  uint64_t (*v1052)(JSC::JSGlobalObject *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t);
  uint64_t v1053;
  char v1054;
  int v1055[3];
  JSC::DFG::Node *v1056;
  __int128 v1057;
  _BYTE v1058[24];
  __int128 v1059;
  _WORD v1060[2];
  int v1061;
  uint64_t v1062;
  uint64_t v1063;
  __int16 v1064;
  int v1065;
  uint64_t v1066;
  uint64_t v1067;
  char v1068;
  __int128 *v1069;
  uint64_t v1070;
  _BYTE v1071[40];

  v1056 = (JSC::DFG::Node *)a2;
  v11 = *(unsigned __int16 *)(a2 + 18);
  if (v11 == 146)
    v12 = *(_DWORD *)(a2 + 80);
  else
    v12 = *(_DWORD *)(a2 + 72);
  switch((char)v12)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 25:
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), (JSC::DFG::Node *)a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0xA87, "void JSC::DFG::SpeculativeJIT::compileGetByVal(Node *, const ScopedLambda<std::tuple<JSValueRegs, DataFormat, CanUseFlush> (DataFormat)> &)", "Bad array mode type");
      __break(0xC471u);
      JUMPOUT(0x197CB2180);
    case 4:
    case 23:
    case 24:
      v78 = *(_QWORD *)(a1 + 3960);
      v79 = *(_QWORD *)(v78 + 1016);
      if (!v79)
        goto LABEL_97;
      v80 = *(_DWORD *)(v79 - 8);
      v81 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v82 = 9 * ((v81 + ~(v81 << 13)) ^ ((v81 + ~(v81 << 13)) >> 8));
      v83 = (v82 ^ (v82 >> 15)) + ~((v82 ^ (v82 >> 15)) << 27);
      v84 = v80 & ((v83 >> 31) ^ v83);
      v85 = *(_QWORD *)(v79 + 8 * v84);
      if (v85 == a2)
        goto LABEL_56;
      v86 = 1;
      while (v85)
      {
        v84 = (v84 + v86) & v80;
        v85 = *(_QWORD *)(v79 + 8 * v84);
        ++v86;
        if (v85 == a2)
        {
LABEL_56:
          v87 = *(_QWORD *)(a2 + 24);
          v88 = *(_DWORD *)(v78 + 164);
          if (v88 <= v87)
          {
            __break(0xC471u);
            JUMPOUT(0x197CB2A48);
          }
          v89 = *(_QWORD *)(v78 + 152);
          v90 = *(_QWORD *)(v89 + 8 * *(_QWORD *)(a2 + 24));
          if ((v90 & 0xFC000000000000) == 0x2C000000000000)
          {
            v91 = v87 + 1;
            if (v88 <= v91)
            {
              __break(0xC471u);
              JUMPOUT(0x197CB2A8CLL);
            }
            v92 = (*(_QWORD *)(v89 + 8 * v91) >> 50) & 0x3FLL;
            if ((_DWORD)v92 == 21)
            {
              JSC::DFG::SpeculativeJIT::compileGetByValForObjectWithString(a1, (_QWORD *)a2, a3, a4, a5, a6, a7, a8);
              return;
            }
            if ((_DWORD)v92 == 25)
            {
              JSC::DFG::SpeculativeJIT::compileGetByValForObjectWithSymbol(a1, (_QWORD *)a2, a3, a4, a5, a6, a7, a8);
              return;
            }
          }
          JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v1032, (JSC::DFG::SpeculativeJIT *)a1, v90, a4, a5, a6, a7, a8);
          v482 = *(_QWORD *)(a1 + 3960);
          v483 = *((_DWORD *)v1056 + 6) + 1;
          if (*(_DWORD *)(v482 + 164) <= v483)
          {
            __break(0xC471u);
LABEL_641:
            __break(1u);
            goto LABEL_642;
          }
          JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v1069, (JSC::DFG::SpeculativeJIT *)a1, *(_QWORD *)(*(_QWORD *)(v482 + 152) + 8 * v483), v477, v478, v479, v480, v481);
          v491 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v1032, v484, v485, v486, v487, v488, v489, v490);
          v499 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v1069, v492, v493, v494, v495, v496, v497, v498);
          v500 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), 16);
          v508 = v500;
          if ((v500 & 0xFF0000) == 0)
          {
            v895 = (unsigned int *)JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, v1056, v502, v503, v504, v505, v506, v507);
            v551 = v508;
            JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&v1059, a1, (JSC::AssemblerBuffer *)v508, v895, v896, v491, v499, v897);
            goto LABEL_367;
          }
          JSC::DFG::SpeculativeJIT::flushRegisters((JSC::DFG::SpeculativeJIT *)a1, v501, (uint64_t)v502, v503, v504, v505, v506, v507);
          v522 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, v1056, v509, v510, v511, v512, v513, v514);
          v523 = (uint64_t)v515;
          *(_QWORD *)&v1059 = v1060;
          DWORD2(v1059) = 2;
          if (v491 == 1)
          {
            if ((_DWORD)v499 == 2)
              goto LABEL_359;
            v524 = 0;
          }
          else
          {
            v1060[0] = v491 | 0x100;
            v524 = 1;
            HIDWORD(v1059) = 1;
            if ((_DWORD)v499 == 2)
              goto LABEL_328;
          }
          v1060[v524++] = v499 | 0x200;
          HIDWORD(v1059) = v524;
LABEL_328:
          while (2)
          {
            v525 = 0;
            v526 = 0;
            v527 = v1059;
            v528 = v524;
            do
            {
              if ((*(_BYTE *)(v1059 + v525 + 1) & 0x40) != 0)
                goto LABEL_641;
              v526 |= 1 << *(_BYTE *)(v1059 + v525 + 1);
              v525 += 2;
            }
            while (2 * v524 != v525);
            v529 = 0;
            do
            {
              v530 = *(_BYTE *)(v1059 + v529) & 0x7F;
              if (v530 >= 0x40)
                goto LABEL_641;
              v526 &= ~(1 << v530);
              v529 += 2;
            }
            while (2 * v524 != v529);
            v531 = (uint8x8_t)vcnt_s8((int8x8_t)v526);
            v531.i16[0] = vaddlv_u8(v531);
            v532 = v531.i32[0];
            v533 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v526));
            v533.i16[0] = vaddlv_u8(v533);
            if (v533.i32[0] + v532)
            {
              v534 = 0;
              if (v524 <= 1uLL)
                v535 = 1;
              else
                v535 = v524;
              v536 = 2 * v535;
              while (1)
              {
                v537 = *(unsigned __int8 *)(v1059 + v534 + 1);
                if ((v537 & 0x7Fu) >= 0x40)
                  goto LABEL_641;
                if (((v526 >> (v537 & 0x7F)) & 1) != 0)
                  break;
                v534 += 2;
                if (v536 == v534)
                  goto LABEL_353;
              }
              v538 = *(unsigned __int8 *)(v1059 + v534);
              if (v538 != v537)
              {
                v539 = (char)v538;
                if ((char)v538 == 63)
                {
                  v540 = *(_DWORD *)(a1 + 200);
                  v541 = *(_DWORD *)(a1 + 192);
                  if ((char)v537 == 31)
                    goto LABEL_355;
                  v543 = v537 & 0x1F | 0xD2800000;
                }
                else
                {
                  v540 = *(_DWORD *)(a1 + 200);
                  v541 = *(_DWORD *)(a1 + 192);
                  if (v537 != 31 && v539 != 31)
                  {
                    v543 = v537 & 0xFFE0FFFF | ((v539 & 0x1F) << 16) | 0xAA0003E0;
                    goto LABEL_348;
                  }
LABEL_355:
                  v543 = (char)v537 | (32 * v539) | 0x91000000;
                }
LABEL_348:
                if (v540 + 4 > v541)
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), (uint64_t)v515, v516, v517, v518, v519, v520, v521);
                  v540 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v540) = v543;
                *(_DWORD *)(a1 + 200) += 4;
                v527 = v1059;
                v528 = HIDWORD(v1059);
              }
              memmove((void *)(v527 + v534), (const void *)(v527 + v534 + 2), 2 * v528 - v534 - 2);
              v524 = HIDWORD(v1059) - 1;
            }
            else
            {
              v624 = *(_BYTE *)v1059;
              v625 = *(_BYTE *)(v1059 + 1);
              JSC::MacroAssemblerARM64::swap(a1, *(char *)v1059, v625, v517, v518, v519, v520, v521);
              memmove((void *)v1059, (const void *)(v1059 + 2), 2 * HIDWORD(v1059) - 2);
              v626 = HIDWORD(v1059);
              v627 = (HIDWORD(v1059) - 1);
              HIDWORD(v1059) = v627;
              v628 = (unsigned __int8 *)v1059;
              v629 = (unsigned __int8 *)(v1059 + 2 * v627);
              if (v626 == 1)
              {
                v635 = 0;
                v636 = 0;
                v515 = (unsigned __int8 *)(v1059 + 2 * v627);
              }
              else
              {
                v630 = 2 * v627;
                v631 = (_BYTE *)v1059;
                while (*v631 != v625)
                {
                  v631 += 2;
                  v630 -= 2;
                  if (!v630)
                    goto LABEL_404;
                }
                *v631 = v624;
LABEL_404:
                LODWORD(v627) = 0;
                v632 = v628;
                v515 = v629;
                v633 = (char *)v629;
                do
                {
                  if (*v628 == v628[1])
                  {
                    v634 = (char *)v628;
                    if (v633 != (char *)(v1059 + 2 * HIDWORD(v1059)))
                    {
                      v983 = v627;
                      v985 = v629;
                      if (v628 == v515)
                      {
                        v634 = v633;
                      }
                      else
                      {
                        v980 = v632 - v515;
                        memmove(v633, v515, v632 - v515);
                        v634 = &v633[v980];
                      }
                      v629 = v985;
                      LODWORD(v627) = v983;
                    }
                    v515 = v628 + 2;
                    LODWORD(v627) = v627 + 1;
                    v633 = v634;
                  }
                  v628 += 2;
                  v632 += 2;
                }
                while (v628 < v629);
                v628 = (unsigned __int8 *)v1059;
                v635 = HIDWORD(v1059);
                v636 = HIDWORD(v1059);
                v629 = (unsigned __int8 *)v633;
              }
              v637 = &v628[2 * v635];
              if (v515 != v637)
              {
                v974 = v627;
                memmove(v629, v515, v637 - v515);
                LODWORD(v627) = v974;
                v636 = HIDWORD(v1059);
              }
              v524 = v636 - v627;
            }
            HIDWORD(v1059) = v524;
LABEL_353:
            if (!v524)
            {
              v544 = v1059;
              if (v1060 != (_WORD *)v1059 && (_QWORD)v1059)
              {
                *(_QWORD *)&v1059 = 0;
                DWORD2(v1059) = 0;
                WTF::fastFree(v544, v515, v516, v517, v518, v519, v520, v521);
              }
LABEL_359:
              if ((_DWORD)v522 == -1)
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, v523, 0, v517, v518, v519, v520, v521);
              else
                JSC::MacroAssemblerARM64::load64(a1, (v522 << 35) + 0x380000001ALL, 0, v517, v518, v519, v520, v521);
              v551 = v508;
              JSC::DFG::SpeculativeJIT::appendCall(a1, (uint64_t)operationGetByValGeneric, v545, v546, v547, v548, v549, v550, (int *)&v1059);
              JSC::DFG::SpeculativeJIT::exceptionCheck(a1, 1, v552, v553, v554, v555, v556, v557);
              if (v508)
              {
                if (v508 == 31)
                  v565 = -1862270945;
                else
                  v565 = v508 & 0x1F | 0xAA0003E0;
                v567 = (unsigned int *)(a1 + 200);
                v566 = *(_DWORD *)(a1 + 200);
                if (v566 + 4 > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v558, v559, v560, v561, v562, v563, v564);
                  v566 = *v567;
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v566) = v565;
                *v567 += 4;
              }
LABEL_367:
              v568 = v1056;
              JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, v1056, v559, v560, v561, v562, v563, v564);
              v569 = (char)v551;
              if ((char)v508 > 15)
                v569 = -1;
              v570 = a1 + 12 * v569;
              v571 = *((_DWORD *)v568 + 12);
              *(_DWORD *)(v570 + 4776) = v571;
              *(_DWORD *)(v570 + 4780) = 4;
              v572 = ~v571;
              if (v572 < *(unsigned int *)(a1 + 4004))
              {
                v573 = *(_QWORD *)(a1 + 3992) + 24 * (int)v572;
                v574 = *((_DWORD *)v568 + 13);
                *(_QWORD *)v573 = v568;
                *(_DWORD *)(v573 + 8) = v574;
                *(_BYTE *)(v573 + 17) = v508;
                *(_DWORD *)(v573 + 12) = 16;
                *(_BYTE *)(v573 + 16) = 0;
                if ((v1070 & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v575 = v1071[0];
                  if (v1071[0] > 15)
                    v575 = -1;
                  --*((_DWORD *)v1069 + 3 * v575 + 1196);
                }
                if ((*((_QWORD *)&v1032 + 1) & 0xFF00FFFFFFFFFFFFLL) != 0)
                {
                  v378 = (uint64_t (*)(JSC::JSGlobalObject *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t))v1032;
                  v379 = v1033[0];
LABEL_240:
                  if (v379 > 15)
                    v379 = -1;
                  v77 = (uint64_t)v378 + 12 * v379;
LABEL_47:
                  --*(_DWORD *)(v77 + 4784);
                }
                return;
              }
LABEL_642:
              __break(0xC471u);
              JUMPOUT(0x197CB2ACCLL);
            }
            continue;
          }
        }
      }
LABEL_97:
      if (*(_DWORD *)(v78 + 164) <= *(_QWORD *)(a2 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB29E4);
      }
      JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)&v1052, (JSC::DFG::SpeculativeJIT *)a1, *(_QWORD *)(*(_QWORD *)(v78 + 152) + 8 * *(_QWORD *)(a2 + 24)), a4, a5, a6, a7, a8);
      v148 = *(_QWORD *)(a1 + 3960);
      v149 = *((_DWORD *)v1056 + 6) + 1;
      if (*(_DWORD *)(v148 + 164) <= v149)
      {
        __break(0xC471u);
        JUMPOUT(0x197CB29ECLL);
      }
      JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v1050, (JSC::DFG::SpeculativeJIT *)a1, *(_QWORD *)(*(_QWORD *)(v148 + 152) + 8 * v149), v143, v144, v145, v146, v147);
      v986 = (JSC::AssemblerBuffer *)JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)&v1052, v150, v151, v152, v153, v154, v155, v156);
      v979 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v1050, v157, v158, v159, v160, v161, v162, v163);
      v170 = *(_QWORD *)(a1 + 3960);
      if (((*(_DWORD *)(*(_QWORD *)(v170 + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
      {
        v171 = 0;
        v172 = 255;
      }
      else
      {
        JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v1059, (JSC::DFG::SpeculativeJIT *)a1, v164, v165, v166, v167, v168, v169);
        v171 = v1059;
        v172 = BYTE8(v1059);
        v170 = *(_QWORD *)(a1 + 3960);
      }
      if (*(_DWORD *)(v170 + 164) <= *((_QWORD *)v1056 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB29F4);
      }
      JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, (uint64_t)v1056, *(_QWORD *)(*(_QWORD *)(v170 + 152) + 8 * *((_QWORD *)v1056 + 3)), v165, v166, v167, v168, v169);
      v178 = *(_QWORD *)(a1 + 3960);
      v179 = *((_DWORD *)v1056 + 6) + 1;
      if (*(_DWORD *)(v178 + 164) <= v179)
      {
        __break(0xC471u);
        JUMPOUT(0x197CB29FCLL);
      }
      v180 = &v1044;
      JSC::DFG::SpeculativeJIT::speculate((JSC::DFG::SpeculativeJIT *)a1, (uint64_t)v1056, *(_QWORD *)(*(_QWORD *)(v178 + 152) + 8 * v179), v173, v174, v175, v176, v177);
      v981 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), 16);
      v186 = *(_QWORD *)v1056;
      v984 = v172;
      if ((*(_QWORD *)v1056 & 1) != 0)
      {
        v196 = v171;
        v227 = *(_QWORD *)(v186 & 0xFFFFFFFF8);
        if ((v186 & 2) != 0
          || (v215 = *(unsigned int *)((v186 & 0xFFFFFFFF8) + 8), (_DWORD)v215 == 0x3FFFFFFF)
          || (_DWORD)v215 == -1)
        {
          v853 = 2;
        }
        else
        {
          if (v215 >> 28)
            goto LABEL_603;
          v853 = *(_QWORD *)(v186 & 0xFFFFFFFF8);
          v227 = v215 << 36;
        }
        goto LABEL_529;
      }
      while (1)
      {
        v1049 = v186;
        v194 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded((JSC::DFG::SpeculativeJIT *)a1, (const JSC::CodeOrigin *)&v1049, *(unsigned int *)(a1 + 5644), v181, v182, v183, v184, v185);
        v195 = 0;
        v196 = a1 + 4776;
        for (i = 15; i != -1; --i)
        {
          if ((char)i <= 15)
            v198 = i;
          else
            v198 = 0xFFFFFFFFLL;
          if (*(_DWORD *)(v196 + 12 * v198 + 8) || *(_DWORD *)(v196 + 12 * v198) != 0x3FFFFFFF)
          {
            if ((i & 0x40) != 0)
              goto LABEL_641;
            v195 |= 1 << i;
          }
        }
        v199 = a1 + 4968;
        for (j = 0x16u; j != -1; --j)
        {
          v201 = JSC::FPRInfo::toRegister::registerForIndex[j];
          v202 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v201];
          if (*(_DWORD *)(v199 + 12 * v202 + 8) || *(_DWORD *)(v199 + 12 * v202) != 0x3FFFFFFF)
          {
            v203 = v201 + 32;
            if ((v203 & 0x40) != 0)
              goto LABEL_641;
            v195 |= 1 << v203;
          }
        }
        v1048[0] = v195 | 0xFF00FFFC0000;
        v1048[1] = 0;
        v978 = v171;
        v1045 = (WTF *)v1047;
        v1046 = 2;
        v204 = *(_QWORD *)(a1 + 3960);
        if (*(_DWORD *)(v204 + 164) <= *((_QWORD *)v1056 + 3))
        {
          __break(0xC471u);
          JUMPOUT(0x197CB2A04);
        }
        v205 = *(_QWORD *)(*(_QWORD *)(v204 + 152) + 8 * *((_QWORD *)v1056 + 3));
        v206 = *(_QWORD *)(a1 + 5504);
        v207 = *(unsigned int *)((v205 & 0xFF00FFFFFFFFFFFELL) + 0x14);
        v208 = v206 + 24;
        v209 = v206 + 8;
        v210 = (uint64_t *)((v205 & 1) != 0 ? v208 : v209);
        v211 = *v210;
        v212 = *v210 + 32 * v207;
        v213 = *(_DWORD *)(a1 + 5584);
        v214 = *(_DWORD *)(v212 + 20);
        if (v213 != v214)
          break;
LABEL_123:
        LODWORD(v215) = v984;
        if ((*(_QWORD *)(v212 + 8) & 0xFFFFD7FF00000008) != 0)
        {
          JSC::MacroAssemblerARM64::branchTest64(a1, 1, (uint64_t)v986, 28, v190, v191, v192, v193, (uint64_t)&v1043);
          v385 = v1043;
          if (v1043 != -1)
          {
            v386 = HIDWORD(v1046);
            if (HIDWORD(v1046) == (_DWORD)v1046)
            {
              v387 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1045, (void *)(HIDWORD(v1046) + 1), (unint64_t)&v1043, v380, v381, v382, v383, v384);
              v180 = (uint64_t *)(v387 + 1);
              v385 = *v387;
              v386 = HIDWORD(v1046);
            }
            v388 = (char *)v1045 + 12 * v386;
            *(_DWORD *)v388 = v385;
            *(_QWORD *)(v388 + 4) = *v180;
            ++HIDWORD(v1046);
          }
        }
        if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
        {
          v216 = *(_QWORD *)(a1 + 368);
          if (v216)
          {
            v217 = (unsigned int *)(v216 + 8);
            do
              v218 = __ldaxr(v217);
            while (__stlxr(v218 + 1, v217));
          }
          v219 = WTF::fastMalloc((WTF *)0x90);
          *(_QWORD *)v219 = 2;
          *(_DWORD *)(v219 + 96) = 0;
          *(_OWORD *)(v219 + 12) = 0u;
          *(_OWORD *)(v219 + 28) = 0u;
          *(_DWORD *)(v219 + 44) = 0;
          *(_QWORD *)(v219 + 64) = 0;
          *(_QWORD *)(v219 + 72) = 0;
          *(_QWORD *)(v219 + 56) = 0;
          *(_QWORD *)(v219 + 104) = 0;
          *(_QWORD *)(v219 + 112) = -1;
          *(_WORD *)(v219 + 120) = -1;
          *(_DWORD *)(v219 + 122) = 0x10000;
          *(_BYTE *)(v219 + 126) = 0;
          *(_BYTE *)(v219 + 127) = BYTE12(xmmword_1ECF4C260);
          *(_BYTE *)(v219 + 128) = 0;
          *(_WORD *)(v219 + 129) &= 0xFC00u;
          *(_QWORD *)(v219 + 136) = 0;
          *(_QWORD *)(v219 + 136) = *(_QWORD *)(v216 + 184);
          *(_QWORD *)(v216 + 184) = v219;
          v220 = (unsigned int *)(v216 + 8);
          do
            v221 = __ldaxr(v220);
          while (__stlxr(v221 - 1, v220));
          if (v221 == 1)
          {
            atomic_store(1u, (unsigned int *)(v216 + 8));
            (*(void (**)(uint64_t))(*(_QWORD *)v216 + 32))(v216);
          }
          v222 = 0;
          v223 = 0;
        }
        else
        {
          v223 = *(_DWORD *)(a1 + 3872);
          v219 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>(a1 + 3872);
          v222 = 2;
        }
        v1040 = v219;
        LODWORD(v1041) = v222;
        v1042 = v223;
        v224 = *(_QWORD *)(a1 + 336);
        v225 = v1041;
        v226 = v1049;
        if ((v1049 & 1) != 0)
        {
          v854 = v1041;
          v215 = *(_QWORD *)(a1 + 336);
          v855 = *(_QWORD *)(v1049 & 0xFFFFFFFF8);
          if ((v1049 & 2) != 0
            || ((v856 = *(unsigned int *)((v1049 & 0xFFFFFFFF8) + 8), (_DWORD)v856 != 0x3FFFFFFF)
              ? (v857 = (_DWORD)v856 == -1)
              : (v857 = 1),
                v857))
          {
            v858 = 2;
          }
          else if (v856 >> 28)
          {
            v976 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v976 = v855;
            *(_DWORD *)(v976 + 8) = v856;
            v858 = 1;
            v855 = v976;
          }
          else
          {
            v858 = *(_QWORD *)(v1049 & 0xFFFFFFFF8);
            v855 = v856 << 36;
          }
          v226 = v855 | v858;
          v224 = v215;
          v225 = v854;
          LODWORD(v215) = v984;
        }
        v227 = v981;
        v1031 = v226;
        BYTE1(v977) = v215;
        LOBYTE(v977) = -1;
        JSC::JITGetByValGenerator::JITGetByValGenerator((uint64_t)&v1032, v224, v219, v225, 0, &v1031, v194, 4, (uint64_t)v1048, (char)v986, 0, v979, 0, v981, v977);
        if ((v1031 & 1) != 0 && (v1031 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v1031 & 0xFFFFFFFF8, v228, v229, v230, v231, v232, v233, v234);
        *(_QWORD *)&v1059 = a1;
        *((_QWORD *)&v1059 + 1) = &v1056;
        if ((_DWORD)v1041 != -1)
        {
          v1069 = &v1059;
          ((void (*)(__int128 **, uint64_t *))off_1E3574AA8[v1041])(&v1069, &v1040);
          v241 = (char)v981;
          if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
          {
            JSC::JITGetByValGenerator::generateFastPath((JSC::JITGetByValGenerator *)&v1032, (JSC::CCallHelpers *)a1, v235, v236, v237, v238, v239, v240);
            v1026 = v1038;
            v1027 = v1039;
            v247 = HIDWORD(v1046);
            if (v1038 != -1)
            {
              if (HIDWORD(v1046) == (_DWORD)v1046)
              {
                v248 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1045, (void *)(HIDWORD(v1046) + 1), (unint64_t)&v1026, v242, v243, v244, v245, v246);
                v250 = *v248;
                v249 = (uint64_t *)(v248 + 1);
                v251 = (_DWORD *)((char *)v1045 + 12 * HIDWORD(v1046));
                *v251 = v250;
                v252 = (uint64_t *)(v251 + 1);
              }
              else
              {
                v309 = (_DWORD *)((char *)v1045 + 12 * HIDWORD(v1046));
                *v309 = v1038;
                v252 = (uint64_t *)(v309 + 1);
                v249 = &v1027;
              }
              *v252 = *v249;
              v247 = ++HIDWORD(v1046);
            }
            v310 = v247;
            v1022 = (WTF *)v1025;
            v1023 = 2;
            v1024 = v247;
            if (v247 < 3)
            {
              v312 = v1025;
            }
            else
            {
              if (v247 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197CB2A6CLL);
              }
              v311 = 12 * v247;
              v312 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v247));
              v1023 = (v311 & 0xFFFFFFFC) / 0xC;
              v1022 = (WTF *)v312;
              v310 = HIDWORD(v1046);
              v247 = HIDWORD(v1046);
            }
            if (v247)
            {
              v313 = v1045;
              v314 = (WTF *)((char *)v1045 + 12 * v310);
              do
              {
                *(_DWORD *)v312 = *(_DWORD *)v313;
                *(_QWORD *)(v312 + 4) = *(_QWORD *)((char *)v313 + 4);
                v313 = (WTF *)((char *)v313 + 12);
                v312 += 12;
              }
              while (v313 != v314);
            }
            v315 = *((_QWORD *)&v1032 + 1);
            v316 = v1024;
            *(_QWORD *)&v1057 = v1058;
            DWORD2(v1057) = 2;
            HIDWORD(v1057) = v1024;
            if (v1024 < 3)
            {
              v317 = v1058;
            }
            else
            {
              if (v1024 >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197CB2A74);
              }
              v317 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v1024));
              DWORD2(v1057) = 12 * v1024 / 0xC;
              *(_QWORD *)&v1057 = v317;
              v316 = v1024;
            }
            if (v316)
            {
              v318 = v1022;
              v319 = (WTF *)((char *)v1022 + 12 * v316);
              do
              {
                *(_DWORD *)v317 = *(_DWORD *)v318;
                *(_QWORD *)(v317 + 4) = *(_QWORD *)((char *)v318 + 4);
                v318 = (WTF *)((char *)v318 + 12);
                v317 += 12;
              }
              while (v318 != v319);
            }
            v320 = WTF::fastMalloc((WTF *)0xB8);
            v321 = HIDWORD(v1057);
            v1069 = (__int128 *)v1071;
            LODWORD(v1070) = 2;
            HIDWORD(v1070) = HIDWORD(v1057);
            if (HIDWORD(v1057) < 3)
            {
              v323 = v1071;
            }
            else
            {
              if (HIDWORD(v1057) >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197CB2A7CLL);
              }
              v322 = 12 * HIDWORD(v1057);
              v323 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v1057)));
              LODWORD(v1070) = (v322 & 0xFFFFFFFC) / 0xC;
              v1069 = (__int128 *)v323;
              v321 = HIDWORD(v1057);
              v241 = (char)v981;
            }
            if (v321)
            {
              v324 = v1057;
              v325 = v1057 + 12 * v321;
              do
              {
                *(_DWORD *)v323 = *(_DWORD *)v324;
                *(_QWORD *)(v323 + 4) = *(_QWORD *)(v324 + 4);
                v324 += 12;
                v323 += 12;
              }
              while (v324 != v325);
            }
            v326 = HIDWORD(v1070);
            *(_QWORD *)&v1059 = v1060;
            DWORD2(v1059) = 2;
            HIDWORD(v1059) = HIDWORD(v1070);
            if (HIDWORD(v1070) < 3)
            {
              v329 = v1060;
            }
            else
            {
              if (HIDWORD(v1070) >= 0x15555556)
              {
                __break(0xC471u);
                JUMPOUT(0x197CB2A84);
              }
              v327 = v241;
              v328 = 12 * HIDWORD(v1070);
              v329 = (_WORD *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v1070)));
              DWORD2(v1059) = (v328 & 0xFFFFFFFC) / 0xC;
              *(_QWORD *)&v1059 = v329;
              v326 = HIDWORD(v1070);
              v241 = v327;
            }
            if (v326)
            {
              v330 = v1069;
              v331 = (__int128 *)((char *)v1069 + 12 * v326);
              do
              {
                *(_DWORD *)v329 = *(_DWORD *)v330;
                *(_QWORD *)(v329 + 2) = *(_QWORD *)((char *)v330 + 4);
                v330 = (__int128 *)((char *)v330 + 12);
                v329 += 6;
              }
              while (v330 != v331);
            }
            JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v320, (uint64_t *)&v1059, (_DWORD *)a1, 0, 0, v241);
            v339 = v1059;
            if (v1060 != (_WORD *)v1059 && (_QWORD)v1059 != 0)
            {
              *(_QWORD *)&v1059 = 0;
              DWORD2(v1059) = 0;
              WTF::fastFree(v339, v332, v333, v334, v335, v336, v337, v338);
            }
            *(_QWORD *)v320 = &off_1E3574D80;
            *(_QWORD *)(v320 + 152) = operationGetByValOptimize;
            *(_BYTE *)(v320 + 160) = (_BYTE)v986;
            *(_BYTE *)(v320 + 161) = v979;
            *(_QWORD *)(v320 + 168) = v315;
            *(_QWORD *)(v320 + 176) = 0;
            v341 = (unint64_t)v1069;
            if (v1071 != (_BYTE *)v1069 && v1069)
            {
              v1069 = 0;
              LODWORD(v1070) = 0;
              WTF::fastFree(v341, v332, v333, v334, v335, v336, v337, v338);
            }
            v342 = v1057;
            v343 = v984;
            if (v1058 != (_BYTE *)v1057 && (_QWORD)v1057)
            {
              *(_QWORD *)&v1057 = 0;
              DWORD2(v1057) = 0;
              WTF::fastFree(v342, v332, v333, v334, v335, v336, v337, v338);
            }
            v344 = v1022;
            if (v1025 != (_BYTE *)v1022 && v1022)
            {
              v1022 = 0;
              v1023 = 0;
              WTF::fastFree((unint64_t)v344, v332, v333, v334, v335, v336, v337, v338);
            }
          }
          else
          {
            JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)&v1032, a1, v1042, (char)v215, v237, v238, v239, v240);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v1028, (uint64_t *)&v1045);
            JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,decltype(nullptr)>((uint64_t *)&v1059, (uint64_t *)&v1028, (_DWORD *)a1, v1042, v215, v215 | 0x3000000000, v241, (char)v986, v979, v215);
            v320 = v1059;
            v973 = v1028;
            if (&v1030 != (uint64_t *)v1028 && v1028)
            {
              v1028 = 0;
              v1029 = 0;
              WTF::fastFree((unint64_t)v973, v972, v333, v334, v335, v336, v337, v338);
            }
            v343 = v984;
          }
          v1059 = v1032;
          LOBYTE(v1060[0]) = v1033[0];
          v345 = v1034;
          v346 = v1035;
          v1061 = v1034;
          v1062 = v1035;
          v347 = HIDWORD(v1035);
          v348 = v1036;
          v1063 = v1036;
          v349 = HIDWORD(v1036);
          v350 = v1037;
          v1064 = v1037;
          v351 = v1038;
          v1065 = v1038;
          v352 = v1039;
          v1066 = v1039;
          v1067 = v320;
          v353 = *(unsigned int *)(a1 + 996);
          if ((_DWORD)v353 == *(_DWORD *)(a1 + 992))
          {
            WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITGetByValGenerator>>(a1 + 984, (unint64_t)&v1059);
          }
          else
          {
            v354 = *(_QWORD *)(a1 + 984) + (v353 << 6);
            v355 = v1032;
            *(_BYTE *)(v354 + 16) = v1033[0];
            *(_OWORD *)v354 = v355;
            *(_DWORD *)(v354 + 20) = v345;
            *(_DWORD *)(v354 + 24) = v346;
            *(_DWORD *)(v354 + 28) = v347;
            *(_DWORD *)(v354 + 32) = v348;
            *(_DWORD *)(v354 + 36) = v349;
            *(_WORD *)(v354 + 40) = v350;
            *(_DWORD *)(v354 + 44) = v351;
            *(_QWORD *)(v354 + 48) = v352;
            *(_QWORD *)(v354 + 56) = v320;
            ++*(_DWORD *)(a1 + 996);
          }
          v1021 = v320;
          v356 = (_QWORD *)(a1 + 5656);
          v357 = *(unsigned int *)(a1 + 5668);
          if ((_DWORD)v357 == *(_DWORD *)(a1 + 5664))
          {
            v359 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v356, v357 + 1, (unint64_t)&v1021);
            v357 = *(unsigned int *)(a1 + 5668);
            v358 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v357);
            v320 = *v359;
          }
          else
          {
            v358 = (uint64_t *)(*v356 + 8 * v357);
            v359 = &v1021;
          }
          *v359 = 0;
          *v358 = v320;
          *(_DWORD *)(a1 + 5668) = v357 + 1;
          v360 = v1021;
          v1021 = 0;
          if (v360)
            (*(void (**)(uint64_t))(*(_QWORD *)v360 + 8))(v360);
          v361 = v1056;
          JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, v1056, v333, v334, v335, v336, v337, v338);
          v369 = *((_DWORD *)v361 + 12);
          if ((int)v241 > 15)
            v370 = -1;
          else
            v370 = v981;
          v371 = (_DWORD *)(v196 + 12 * v370);
          *v371 = v369;
          v371[1] = 4;
          v372 = ~v369;
          if (v372 >= *(unsigned int *)(a1 + 4004))
          {
            __break(0xC471u);
            JUMPOUT(0x197CB2A0CLL);
          }
          v373 = *(_QWORD *)(a1 + 3992) + 24 * (int)v372;
          v374 = *((_DWORD *)v361 + 13);
          *(_QWORD *)v373 = v361;
          *(_DWORD *)(v373 + 8) = v374;
          *(_BYTE *)(v373 + 17) = v981;
          *(_DWORD *)(v373 + 12) = 16;
          *(_BYTE *)(v373 + 16) = 0;
          v375 = v1045;
          if (v1047 != (_BYTE *)v1045 && v1045)
          {
            v1045 = 0;
            LODWORD(v1046) = 0;
            WTF::fastFree((unint64_t)v375, v362, v363, v364, v365, v366, v367, v368);
          }
          if ((v1049 & 1) != 0 && (v1049 & 0xFFFFFFFF8) != 0)
            WTF::fastFree(v1049 & 0xFFFFFFFF8, v362, v363, v364, v365, v366, v367, v368);
          if (v978 && v343 != 255)
          {
            if ((char)v343 > 15)
              v376 = -1;
            else
              v376 = v343;
            --*(_DWORD *)(v978 + 12 * v376 + 4784);
          }
          if ((v1050[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v377 = v1051;
            if (v1051 > 15)
              v377 = -1;
            --*(_DWORD *)(v1050[0] + 12 * v377 + 4784);
          }
          if ((v1053 & 0xFF00FFFFFFFFFFFFLL) != 0)
          {
            v378 = v1052;
            v379 = v1054;
            goto LABEL_240;
          }
          return;
        }
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_603:
        v975 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v975 = v227;
        *(_DWORD *)(v975 + 8) = v215;
        v853 = 1;
        v227 = v975;
LABEL_529:
        v186 = v227 | v853;
        v171 = v196;
      }
      if ((*(_QWORD *)(v212 + 8) & 0x2800FFFFFFF7) == 0)
        goto LABEL_248;
      if ((v214 ^ v213) < 2)
        goto LABEL_316;
      v476 = *(_QWORD *)v212;
      if (*(_QWORD *)v212 == 4)
        goto LABEL_315;
      *(_QWORD *)v212 = v476 | 2;
      v638 = (unsigned int *)(v476 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v476 & 1) != 0)
      {
        v859 = 2 * *v638;
        do
        {
          if (!(v859 * 4))
            goto LABEL_315;
          v860 = *(_QWORD *)&v638[v859];
          if ((*(_BYTE *)(v860 + 19) & 0xC) != 0)
            break;
          v861 = *(_QWORD *)(v860 + 96);
          v862 = (v861 & 1) != 0 ? (v861 >> 1) & 3 : *(unsigned __int8 *)(v861 + 4);
          v859 -= 2;
        }
        while (v862 != 2);
        WTF::fastFree((unint64_t)v638, v187, v188, v189, v190, v191, v192, v193);
      }
      else
      {
        if (!v638)
          goto LABEL_315;
        if ((*((_BYTE *)v638 + 19) & 0xC) == 0)
        {
          v639 = *((_QWORD *)v638 + 12);
          v640 = (v639 & 1) != 0 ? (v639 >> 1) & 3 : *(unsigned __int8 *)(v639 + 4);
          if (v640 != 2)
            goto LABEL_315;
        }
      }
      *(_QWORD *)v212 = 4;
LABEL_315:
      *(_DWORD *)(v211 + 32 * v207 + 16) = -21020677;
LABEL_316:
      if ((v213 & 1) != 0)
        *(_QWORD *)v212 &= ~2uLL;
LABEL_248:
      *(_DWORD *)(v212 + 20) = v213;
      goto LABEL_123;
    case 5:
      JSC::DFG::SpeculativeJIT::compileGetByValOnString(a1, a2, a3, a4, a5, a6, a7, a8);
      return;
    case 6:
      v641 = *(_QWORD *)(a1 + 3960);
      v642 = *(_DWORD *)(a2 + 24) + 1;
      if (*(_DWORD *)(v641 + 164) <= v642)
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2BF4);
      }
      v643 = (JSC::DFG::SpeculateStrictInt32Operand *)JSC::DFG::SpeculateStrictInt32Operand::SpeculateStrictInt32Operand((uint64_t)&v1059, a1, *(_QWORD *)(*(_QWORD *)(v641 + 152) + 8 * v642), 0, a5, a6, a7, a8);
      JSC::DFG::SpeculateStrictInt32Operand::gpr(v643, v644, v645, v646, v647, v648, v649, v650);
      v652 = v651;
      v653 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), 16);
      v654 = v1056;
      JSC::MacroAssemblerARM64::branchTest32(a1, 4, v652, v652, v655, v656, v657, v658, (uint64_t)v1055);
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, v654, v1055);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, v653, v659, v660, v661, v662, v663);
      JSC::DFG::SpeculativeJIT::jsValueResult(a1, v653, v1056, v664, v665, v666, v667, v668);
      goto LABEL_424;
    case 7:
    case 9:
      if (v11 == 146)
        v13 = *(_DWORD *)(a2 + 80);
      else
        v13 = *(_DWORD *)(a2 + 72);
      if ((v13 & 0xFE0000) == 0)
      {
        v14 = *(_QWORD *)(a1 + 3960);
        v15 = *(_DWORD *)(a2 + 24);
        v16 = *(_DWORD *)(v14 + 164);
        if (v16 <= v15 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197CB28F0);
        }
        v17 = *(_QWORD *)(*(_QWORD *)(v14 + 152) + 8 * (v15 + 1));
        v18 = ~*(_DWORD *)((v17 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v18 >= *(unsigned int *)(a1 + 4004))
        {
          __break(0xC471u);
          JUMPOUT(0x197CB28F8);
        }
        if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v18 + 12))
        {
          LOBYTE(v1059) = 0;
          v19 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(a1, v17, (uint64_t)&v1059, a4, a5, a6, a7, a8);
          if (v1059 != 1)
          {
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
            __break(0xC471u);
            JUMPOUT(0x197CB2944);
          }
          v20 = v19;
          v14 = *(_QWORD *)(a1 + 3960);
          v15 = *((_DWORD *)v1056 + 6);
          v16 = *(_DWORD *)(v14 + 164);
        }
        else
        {
          v20 = -1;
        }
        v21 = v15 + 2;
        if (v16 <= v21)
        {
          __break(0xC471u);
          JUMPOUT(0x197CB2900);
        }
        v22 = *(_QWORD *)(*(_QWORD *)(v14 + 152) + 8 * v21);
        v23 = ~*(_DWORD *)((v22 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v23 >= *(unsigned int *)(a1 + 4004))
        {
          __break(0xC471u);
          JUMPOUT(0x197CB2908);
        }
        if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v23 + 12))
          v24 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v22, a3, a4, a5, a6, a7, a8);
        else
          v24 = -1;
        if (v20 == -1)
        {
          LOBYTE(v1059) = 0;
          v25 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(a1, v17, (uint64_t)&v1059, a4, a5, a6, a7, a8);
          if (v1059 != 1)
          {
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
            __break(0xC471u);
            JUMPOUT(0x197CB2980);
          }
          v20 = v25;
        }
        if (v24 == 0xFF)
          v24 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v22, a3, a4, a5, a6, a7, a8);
        v26 = v20;
        if (*(_BYTE *)(a1 + 5244))
        {
          v27 = *((unsigned __int16 *)v1056 + 9);
          if (v27 == 264)
          {
            v28 = *((_DWORD *)v1056 + 18);
          }
          else if (v27 == 146)
          {
            LOBYTE(v28) = *((_BYTE *)v1056 + 80);
          }
          else
          {
            LOBYTE(v28) = *((_BYTE *)v1056 + 72);
          }
          if (v28 == 7)
            v29 = 17;
          else
            v29 = 16;
          v30 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), v29);
          if (!*(_BYTE *)(a1 + 212))
          {
            __break(0xC471u);
            JUMPOUT(0x197CB1D64);
          }
          v36 = v30;
          *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
          JSC::MacroAssemblerARM64::load32(a1, v24 | 0xFFFFFFF800000000, *(char *)(a1 + 304), v31, v32, v33, v34, v35);
          JSC::MacroAssemblerARM64::branch32(a1, 2, v20, 17, v37, v38, v39, v40, (uint64_t)v1020);
          JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, v1020);
          JSC::MacroAssemblerARM64::load64(a1, v24 | ((unint64_t)v20 << 8) | 0x300000000, 0x200000000uLL, (char)v36, v41, v42, v43, v44);
          if (*((_WORD *)v1056 + 9) == 146)
            v50 = *((_DWORD *)v1056 + 20);
          else
            v50 = *((_DWORD *)v1056 + 18);
          if ((v50 & 0xFF0000) != 0)
          {
            JSC::MacroAssemblerARM64::branchTest64(a1, 0, (char)v36, 0xFFFFFFFFLL, v45, v46, v47, v48, (uint64_t)v1019, v49);
            JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xEuLL, (JSC::DFG::Node *)0xFF80000000, 0, v1019);
          }
          else
          {
            JSC::MacroAssemblerARM64::branchTest64(a1, 1, (char)v36, 0xFFFFFFFFLL, v45, v46, v47, v48, (uint64_t)&v1059, v49);
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, (char)v36, v51, v52, v53, v54, v55);
            JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1059, a1, v56, v57, v58, v59, v60, v61);
          }
          v68 = v1056;
          JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, v1056, v62, v63, v64, v65, v66, v67);
          if ((char)v36 > 15)
            v69 = -1;
          else
            v69 = v36;
          v70 = a1 + 12 * v69;
          v71 = *((_DWORD *)v68 + 12);
          *(_DWORD *)(v70 + 4776) = v71;
          *(_DWORD *)(v70 + 4780) = 4;
          v72 = ~v71;
          if (v72 >= *(unsigned int *)(a1 + 4004))
          {
            __break(0xC471u);
            JUMPOUT(0x197CB2910);
          }
          v73 = *((_DWORD *)v68 + 13);
          v74 = *(_QWORD *)(a1 + 3992) + 24 * (int)v72;
          *(_QWORD *)v74 = v68;
          *(_DWORD *)(v74 + 8) = v73;
          *(_BYTE *)(v74 + 12) = HIBYTE(v36);
          *(_BYTE *)(v74 + 17) = v36;
          *(_DWORD *)(v74 + 13) = 0;
        }
        goto LABEL_38;
      }
      v260 = *(_QWORD *)(a1 + 3960);
      if (*(_DWORD *)(v260 + 164) <= *(_QWORD *)(a2 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2A94);
      }
      JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v1069, (JSC::DFG::SpeculativeJIT *)a1, *(_QWORD *)(*(_QWORD *)(v260 + 152) + 8 * *(_QWORD *)(a2 + 24)), a4, a5, a6, a7, a8);
      v268 = *(_QWORD *)(a1 + 3960);
      v269 = *((_DWORD *)v1056 + 6);
      v270 = *(_DWORD *)(v268 + 164);
      if (v270 <= v269 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2A9CLL);
      }
      v271 = *(_QWORD *)(*(_QWORD *)(v268 + 152) + 8 * (v269 + 1));
      v272 = ~*(_DWORD *)((v271 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v272 >= *(unsigned int *)(a1 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2AA4);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v272 + 12))
      {
        LOBYTE(v1059) = 0;
        v273 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(a1, v271, (uint64_t)&v1059, v263, v264, v265, v266, v267);
        if (v1059 != 1)
        {
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
          __break(0xC471u);
          JUMPOUT(0x197CB2B00);
        }
        v274 = v273;
        v268 = *(_QWORD *)(a1 + 3960);
        v269 = *((_DWORD *)v1056 + 6);
        v270 = *(_DWORD *)(v268 + 164);
      }
      else
      {
        v274 = -1;
      }
      v275 = v269 + 2;
      if (v270 <= v275)
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2AACLL);
      }
      v276 = *(_QWORD *)(*(_QWORD *)(v268 + 152) + 8 * v275);
      v277 = ~*(_DWORD *)((v276 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v277 >= *(unsigned int *)(a1 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2AB4);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v277 + 12))
        v278 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v276, v262, v263, v264, v265, v266, v267);
      else
        v278 = -1;
      v285 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)&v1069, v261, v262, v263, v264, v265, v266, v267);
      if (v274 == -1)
      {
        LOBYTE(v1059) = 0;
        v286 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(a1, v271, (uint64_t)&v1059, v280, v281, v282, v283, v284);
        if (v1059 != 1)
        {
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
          __break(0xC471u);
          JUMPOUT(0x197CB2B34);
        }
        v274 = v286;
      }
      if (v278 == 0xFF)
        v278 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v276, v279, v280, v281, v282, v283, v284);
      v287 = v274;
      if (*(_BYTE *)(a1 + 5244))
      {
        v288 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), 16);
        *(_QWORD *)&v1032 = v1033;
        *((_QWORD *)&v1032 + 1) = 2;
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197CB23ECLL);
        }
        v294 = v288;
        *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
        JSC::MacroAssemblerARM64::load32(a1, v278 | 0xFFFFFFF800000000, *(char *)(a1 + 304), v289, v290, v291, v292, v293);
        JSC::MacroAssemblerARM64::branch32(a1, 2, v274, 17, v295, v296, v297, v298, (uint64_t)&v1017);
        v304 = v1017;
        if (v1017 != -1)
        {
          v305 = HIDWORD(v1032);
          if (HIDWORD(v1032) == DWORD2(v1032))
          {
            v306 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1032, (void *)(HIDWORD(v1032) + 1), (unint64_t)&v1017, v299, v300, v301, v302, v303);
            v308 = *v306;
            v307 = (uint64_t *)(v306 + 1);
            v304 = v308;
            v305 = HIDWORD(v1032);
          }
          else
          {
            v307 = &v1018;
          }
          v389 = v1032 + 12 * v305;
          *(_DWORD *)v389 = v304;
          *(_QWORD *)(v389 + 4) = *v307;
          ++HIDWORD(v1032);
        }
        JSC::MacroAssemblerARM64::load64(a1, v278 | ((unint64_t)v274 << 8) | 0x300000000, 0x200000000uLL, v294, v300, v301, v302, v303);
        if (*((_WORD *)v1056 + 9) == 146)
          v395 = *((_DWORD *)v1056 + 20);
        else
          v395 = *((_DWORD *)v1056 + 18);
        if ((v395 & 0xFF0000) == 0x30000)
        {
          JSC::MacroAssemblerARM64::branchTest64(a1, 1, v294, 0xFFFFFFFFLL, v390, v391, v392, v393, (uint64_t)&v1059, v394);
          if (HIDWORD(v1032))
          {
            v402 = 0;
            v403 = 0;
            v404 = 12 * HIDWORD(v1032);
            do
            {
              if (v403 >= HIDWORD(v1032))
              {
                __break(0xC471u);
                JUMPOUT(0x197CB294CLL);
              }
              JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)(v1032 + v402), a1, v396, v397, v398, v399, v400, v401);
              ++v403;
              v402 += 12;
            }
            while (v404 != v402);
          }
          JSC::MacroAssemblerARM64::branchTest32(a1, 4, v274, v274, v398, v399, v400, v401, (uint64_t)v1016);
          JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xBuLL, (JSC::DFG::Node *)0xFF80000000, 0, v1016);
          JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, v294, v405, v406, v407, v408, v409);
          JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1059, a1, v410, v411, v412, v413, v414, v415);
        }
        else
        {
          JSC::MacroAssemblerARM64::branchTest64(a1, 0, v294, 0xFFFFFFFFLL, v390, v391, v392, v393, (uint64_t)&v1014, v394);
          v447 = v1014;
          v448 = HIDWORD(v1032);
          if (v1014 != -1)
          {
            if (HIDWORD(v1032) == DWORD2(v1032))
            {
              v449 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1032, (void *)(HIDWORD(v1032) + 1), (unint64_t)&v1014, v442, v443, v444, v445, v446);
              v451 = *v449;
              v450 = (uint64_t *)(v449 + 1);
              v447 = v451;
              v448 = HIDWORD(v1032);
            }
            else
            {
              v450 = &v1015;
            }
            v452 = v1032 + 12 * v448;
            *(_DWORD *)v452 = v447;
            *(_QWORD *)(v452 + 4) = *v450;
            v448 = ++HIDWORD(v1032);
          }
          v453 = v448;
          v1009 = (WTF *)v1012;
          v1010 = 2;
          v1011 = v448;
          if (v448 < 3)
          {
            v456 = v1012;
          }
          else
          {
            if (v448 >= 0x15555556)
            {
              __break(0xC471u);
              JUMPOUT(0x197CB2B3CLL);
            }
            v454 = v285;
            v455 = 12 * v448;
            v456 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v448));
            v1010 = (v455 & 0xFFFFFFFC) / 0xC;
            v1009 = (WTF *)v456;
            v453 = HIDWORD(v1032);
            v448 = HIDWORD(v1032);
            v285 = v454;
          }
          if (v448)
          {
            v457 = v1032;
            v458 = v1032 + 12 * v453;
            do
            {
              *(_DWORD *)v456 = *(_DWORD *)v457;
              *(_QWORD *)(v456 + 4) = *(_QWORD *)(v457 + 4);
              v457 += 12;
              v456 += 12;
            }
            while (v457 != v458);
          }
          v459 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, v1056, v441, v442, v443, v444, v445, v446);
          v460 = v459;
          v462 = v461;
          v463 = v1011;
          *(_QWORD *)&v1059 = v1060;
          DWORD2(v1059) = 2;
          HIDWORD(v1059) = v1011;
          if (v1011 < 3)
          {
            v464 = v1060;
          }
          else
          {
            v982 = v459;
            if (v1011 >= 0x15555556)
            {
              __break(0xC471u);
              JUMPOUT(0x197CB2B44);
            }
            v464 = (_WORD *)WTF::fastMalloc((WTF *)(12 * v1011));
            DWORD2(v1059) = 12 * v1011 / 0xC;
            *(_QWORD *)&v1059 = v464;
            v463 = v1011;
            v287 = v274;
            v460 = v982;
          }
          if (v463)
          {
            v465 = v1009;
            v466 = (WTF *)((char *)v1009 + 12 * v463);
            do
            {
              *(_DWORD *)v464 = *(_DWORD *)v465;
              *(_QWORD *)(v464 + 2) = *(_QWORD *)((char *)v465 + 4);
              v465 = (WTF *)((char *)v465 + 12);
              v464 += 6;
            }
            while (v465 != v466);
          }
          *(_QWORD *)&v1057 = v460;
          *((_QWORD *)&v1057 + 1) = v462;
          v1045 = (WTF *)a1;
          v1052 = operationGetByValObjectInt;
          LOBYTE(v1050[0]) = 0;
          LOBYTE(v1040) = 0;
          LOBYTE(v1048[0]) = v294;
          LOBYTE(v1049) = v285;
          v1068 = v274;
          std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::ARM64Registers::RegisterID&,JSC::ARM64Registers::RegisterID&>(&v1013, (uint64_t *)&v1059, (_DWORD **)&v1045, (uint64_t *)&v1052, (unsigned __int8 *)v1050, (char *)&v1040, (char *)v1048, &v1057, (char *)&v1049, &v1068);
          v468 = v1059;
          if (v1060 != (_WORD *)v1059 && (_QWORD)v1059)
          {
            *(_QWORD *)&v1059 = 0;
            DWORD2(v1059) = 0;
            WTF::fastFree(v468, v467, v416, v417, v418, v419, v420, v421);
          }
          v469 = (_QWORD *)(a1 + 5656);
          v470 = *(unsigned int *)(a1 + 5668);
          if ((_DWORD)v470 == *(_DWORD *)(a1 + 5664))
          {
            v472 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v469, v470 + 1, (unint64_t)&v1013);
            v470 = *(unsigned int *)(a1 + 5668);
            v471 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v470);
          }
          else
          {
            v471 = (uint64_t *)(*v469 + 8 * v470);
            v472 = &v1013;
          }
          v473 = *v472;
          *v472 = 0;
          *v471 = v473;
          *(_DWORD *)(a1 + 5668) = v470 + 1;
          v474 = v1013;
          v1013 = 0;
          if (v474)
            (*(void (**)(uint64_t))(*(_QWORD *)v474 + 8))(v474);
          v475 = v1009;
          if (v1012 != (_BYTE *)v1009 && v1009)
          {
            v1009 = 0;
            v1010 = 0;
            WTF::fastFree((unint64_t)v475, v467, v416, v417, v418, v419, v420, v421);
          }
        }
        v422 = v1056;
        JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, v1056, v416, v417, v418, v419, v420, v421);
        if (v294 > 15)
          v430 = -1;
        else
          v430 = v294;
        v431 = a1 + 12 * v430;
        v432 = *((_DWORD *)v422 + 12);
        *(_DWORD *)(v431 + 4776) = v432;
        *(_DWORD *)(v431 + 4780) = 4;
        v433 = ~v432;
        if (v433 >= *(unsigned int *)(a1 + 4004))
        {
          __break(0xC471u);
          JUMPOUT(0x197CB2ABCLL);
        }
        v434 = *(_QWORD *)(a1 + 3992) + 24 * (int)v433;
        v435 = *((_DWORD *)v422 + 13);
        *(_QWORD *)v434 = v422;
        *(_DWORD *)(v434 + 8) = v435;
        *(_BYTE *)(v434 + 17) = v294;
        *(_DWORD *)(v434 + 12) = 16;
        *(_BYTE *)(v434 + 16) = 0;
        v436 = v1032;
        if (v1033 != (_BYTE *)v1032 && (_QWORD)v1032)
        {
          *(_QWORD *)&v1032 = 0;
          DWORD2(v1032) = 0;
          WTF::fastFree(v436, v423, v424, v425, v426, v427, v428, v429);
        }
      }
      if (v278 != 0xFF)
      {
        if ((char)v278 > 15)
          v437 = -1;
        else
          v437 = v278;
        --*(_DWORD *)(a1 + 12 * v437 + 4784);
      }
      v438 = v287 <= 15;
      goto LABEL_272;
    case 8:
      if (v11 == 146)
        v93 = *(_DWORD *)(a2 + 80);
      else
        v93 = *(_DWORD *)(a2 + 72);
      if ((v93 & 0xFE0000) == 0)
      {
        v94 = *(_QWORD *)(a1 + 3960);
        v95 = *(_DWORD *)(a2 + 24);
        v96 = *(_DWORD *)(v94 + 164);
        if (v96 <= v95 + 1)
        {
          __break(0xC471u);
          JUMPOUT(0x197CB2988);
        }
        v97 = *(_QWORD *)(*(_QWORD *)(v94 + 152) + 8 * (v95 + 1));
        v98 = ~*(_DWORD *)((v97 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v98 >= *(unsigned int *)(a1 + 4004))
        {
          __break(0xC471u);
          JUMPOUT(0x197CB2990);
        }
        if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v98 + 12))
        {
          LOBYTE(v1059) = 0;
          v99 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(a1, v97, (uint64_t)&v1059, a4, a5, a6, a7, a8);
          if (v1059 != 1)
          {
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
            __break(0xC471u);
            JUMPOUT(0x197CB29DCLL);
          }
          v20 = v99;
          v94 = *(_QWORD *)(a1 + 3960);
          v95 = *((_DWORD *)v1056 + 6);
          v96 = *(_DWORD *)(v94 + 164);
        }
        else
        {
          v20 = -1;
        }
        v100 = v95 + 2;
        if (v96 <= v100)
        {
          __break(0xC471u);
          JUMPOUT(0x197CB2998);
        }
        v101 = *(_QWORD *)(*(_QWORD *)(v94 + 152) + 8 * v100);
        v102 = ~*(_DWORD *)((v101 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
        if (v102 >= *(unsigned int *)(a1 + 4004))
        {
          __break(0xC471u);
          JUMPOUT(0x197CB29A0);
        }
        if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v102 + 12))
          v24 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v101, a3, a4, a5, a6, a7, a8);
        else
          v24 = -1;
        if (v20 == -1)
        {
          LOBYTE(v1059) = 0;
          v103 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(a1, v97, (uint64_t)&v1059, a4, a5, a6, a7, a8);
          if (v1059 != 1)
          {
            JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
            __break(0xC471u);
            JUMPOUT(0x197CB2A40);
          }
          v20 = v103;
        }
        if (v24 == 0xFF)
          v24 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v101, a3, a4, a5, a6, a7, a8);
        v26 = v20;
        if (!*(_BYTE *)(a1 + 5244))
          goto LABEL_38;
        v104 = 0;
        v105 = a1 + 4968;
        v106 = (_DWORD *)(a1 + 4976);
        v107 = 0x17u;
        v108 = -1;
        while (1)
        {
          if (!*v106)
          {
            v109 = *(v106 - 1);
            if (v109 == -1)
            {
              v111 = *(v106 - 2);
              *((_QWORD *)v106 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_87:
              *v106 = 1;
              v112 = JSC::FPRInfo::toRegister::registerForIndex[v104];
              if (v111 != 0x3FFFFFFF)
                JSC::DFG::SpeculativeJIT::spill(a1, v111, a3, a4, a5, a6, a7, a8);
              v113 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), 4);
              if (!*(_BYTE *)(a1 + 212))
              {
                __break(0xC471u);
                JUMPOUT(0x197CB21A0);
              }
              v119 = v113;
              *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
              JSC::MacroAssemblerARM64::load32(a1, v24 | 0xFFFFFFF800000000, *(char *)(a1 + 304), v114, v115, v116, v117, v118);
              JSC::MacroAssemblerARM64::branch32(a1, 2, v20, 17, v120, v121, v122, v123, (uint64_t)v1008);
              JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, v1008);
              JSC::MacroAssemblerARM64::loadDouble(a1, v24 | ((unint64_t)v20 << 8) | 0x300000000, 0x200000000uLL, (char)v112, v124, v125, v126, v127);
              if (*((_WORD *)v1056 + 9) == 146)
                v135 = *((_DWORD *)v1056 + 20);
              else
                v135 = *((_DWORD *)v1056 + 18);
              if ((v135 & 0xFF0000) != 0)
              {
                v259 = *(_DWORD *)(a1 + 200);
                if (v259 + 4 > *(_DWORD *)(a1 + 192))
                {
                  JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v128, v129, v130, v131, v132, v133, v134);
                  v259 = *(_DWORD *)(a1 + 200);
                }
                *(_DWORD *)(*(_QWORD *)(a1 + 56) + v259) = (v112 << 16) | (32 * v112) | 0x1E602000;
                *(_DWORD *)(a1 + 200) += 4;
                JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(a1, 1, v129, v130, v131, v132, v133, v134, (uint64_t)v1007);
                JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xEuLL, (JSC::DFG::Node *)0xFF80000000, 0, v1007);
              }
              if ((v119 & 0xFF00) == 0x1000)
              {
                JSC::AssemblyHelpers::boxDouble((_DWORD *)a1, (char)v112, (char)v119, 1, v131, v132, v133, v134);
                JSC::DFG::SpeculativeJIT::jsValueResult(a1, v119, v1056, v942, v943, v944, v945, v946);
                v138 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v112];
              }
              else
              {
                v136 = v1056;
                JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, v1056, v129, v130, v131, v132, v133, v134);
                v137 = *((_DWORD *)v136 + 12);
                v138 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v112];
                v139 = (_DWORD *)(v105 + 12 * v138);
                *v139 = v137;
                v139[1] = 6;
                v140 = ~v137;
                if (v140 >= *(unsigned int *)(a1 + 4004))
                {
                  __break(0xC471u);
                  JUMPOUT(0x197CB29A8);
                }
                v141 = *(_QWORD *)(a1 + 3992) + 24 * (int)v140;
                v142 = *((_DWORD *)v136 + 13);
                *(_QWORD *)v141 = v136;
                *(_DWORD *)(v141 + 8) = v142;
                *(_BYTE *)(v141 + 17) = v112;
                *(_DWORD *)(v141 + 12) = 4;
                *(_BYTE *)(v141 + 16) = 0;
              }
              --*(_DWORD *)(v105 + 12 * v138 + 8);
LABEL_38:
              if (v24 != 0xFF)
              {
                if ((char)v24 > 15)
                  v75 = -1;
                else
                  v75 = v24;
                --*(_DWORD *)(a1 + 12 * v75 + 4784);
              }
              if (v26 > 15)
                v76 = -1;
              else
                v76 = v20;
              v77 = a1 + 12 * v76;
              goto LABEL_47;
            }
            if (v109 < v108)
            {
              v107 = v104;
              v108 = *(v106 - 1);
            }
          }
          ++v104;
          v106 += 3;
          if (v104 == 23)
          {
            v104 = v107;
            v110 = (unsigned int *)(v105 + 12 * v107);
            v111 = *v110;
            *(_QWORD *)v110 = 0xFFFFFFFF3FFFFFFFLL;
            v106 = v110 + 2;
            goto LABEL_87;
          }
        }
      }
      if (v11 == 146)
        v728 = *(_DWORD *)(a2 + 80);
      else
        v728 = *(_DWORD *)(a2 + 72);
      v729 = 16;
      if ((v728 & 0xFF0000) == 0x30000)
      {
        if ((*(_BYTE *)(a2 + 58) & 2) != 0)
          v729 = 16;
        else
          v729 = 4;
      }
      v730 = *(_QWORD *)(a1 + 3960);
      if (*(_DWORD *)(v730 + 164) <= *(_QWORD *)(a2 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2BFCLL);
      }
      JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v1032, (JSC::DFG::SpeculativeJIT *)a1, *(_QWORD *)(*(_QWORD *)(v730 + 152) + 8 * *(_QWORD *)(a2 + 24)), a4, a5, a6, a7, a8);
      v735 = *(_QWORD *)(a1 + 3960);
      v736 = *((_DWORD *)v1056 + 6) + 1;
      if (*(_DWORD *)(v735 + 164) <= v736)
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2C04);
      }
      JSC::DFG::SpeculateStrictInt32Operand::SpeculateStrictInt32Operand((uint64_t)&v1069, a1, *(_QWORD *)(*(_QWORD *)(v735 + 152) + 8 * v736), 0, v731, v732, v733, v734);
      v742 = *(_QWORD *)(a1 + 3960);
      v743 = *((_DWORD *)v1056 + 6) + 2;
      if (*(_DWORD *)(v742 + 164) <= v743)
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2C0CLL);
      }
      JSC::DFG::StorageOperand::StorageOperand((uint64_t)&v1057, a1, *(_QWORD *)(*(_QWORD *)(v742 + 152) + 8 * v743), v737, v738, v739, v740, v741);
      v751 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)&v1032, v744, v745, v746, v747, v748, v749, v750);
      JSC::DFG::SpeculateStrictInt32Operand::gpr((JSC::DFG::SpeculateStrictInt32Operand *)&v1069, v752, v753, v754, v755, v756, v757, v758);
      v766 = v765;
      v767 = v1058[0];
      if (v1058[0] == 255)
      {
        v767 = JSC::DFG::SpeculativeJIT::fillStorage(v1057, *((unint64_t *)&v1057 + 1), v759, v760, v761, v762, v763, v764);
        v1058[0] = v767;
      }
      if (!*(_BYTE *)(a1 + 5244))
        goto LABEL_505;
      JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v1045, (JSC::DFG::SpeculativeJIT *)a1, v759, v760, v761, v762, v763, v764);
      v768 = (char)v1046;
      v769 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), v729);
      *(_QWORD *)&v1059 = v1060;
      *((_QWORD *)&v1059 + 1) = 2;
      JSC::MacroAssemblerARM64::branch32(a1, 2, v766, v767 | 0xFFFFFFF800000000, v770, v771, v772, v773, (uint64_t)v1006);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1059, v1006, v774, v775, v776, v777, v778, v779);
      JSC::MacroAssemblerARM64::loadDouble(a1, v767 | ((unint64_t)v766 << 8) | 0x300000000, 0x200000000uLL, v768, v780, v781, v782, v783);
      if (*((_WORD *)v1056 + 9) == 146)
        v791 = *((_DWORD *)v1056 + 20);
      else
        v791 = *((_DWORD *)v1056 + 18);
      if ((v791 & 0xFF0000) != 0x30000)
      {
        v947 = (char)v768;
        JSC::AssemblyHelpers::branchIfNaN((_DWORD *)a1, v947, v785, v786, v787, v788, v789, v790, (uint64_t)v1002);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1059, v1002, v948, v949, v950, v951, v952, v953);
        v798 = (char)v769;
        JSC::AssemblyHelpers::boxDouble((_DWORD *)a1, v947, v798, 1, v954, v955, v956, v957);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v998, (uint64_t *)&v1059);
        v964 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, v1056, v958, v959, v960, v961, v962, v963);
        JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(&v1001, (uint64_t *)&v998, (_DWORD *)a1, v798, v964, v965, v751, v766);
        JSC::DFG::SpeculativeJIT::addSlowPathGenerator(a1, (unint64_t)&v1001);
        v970 = v1001;
        v1001 = 0;
        if (v970)
          (*(void (**)(uint64_t))(*(_QWORD *)v970 + 8))(v970);
        v971 = v998;
        if (&v1000 != (uint64_t *)v998 && v998)
        {
          v998 = 0;
          v999 = 0;
          WTF::fastFree((unint64_t)v971, v966, v967, v968, v969, v838, v839, v840);
        }
        goto LABEL_498;
      }
      if ((v769 & 0xFF00) != 0x400)
      {
        JSC::AssemblyHelpers::branchIfNaN((_DWORD *)a1, (char)v768, v785, v786, v787, v788, v789, v790, (uint64_t)v1004);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v1059, v1004, v792, v793, v794, v795, v796, v797);
        v798 = (char)v769;
        JSC::AssemblyHelpers::boxDouble((_DWORD *)a1, (char)v768, v798, 1, v799, v800, v801, v802);
        JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v803, v804, v805, v806, v807, v808, v809, (int *)v1050);
        JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v810, v811, v812, v813, v814, v815);
        if (*(_BYTE *)(a1 + 328))
          v822 = 69;
        else
          v822 = 65;
        v1052 = (uint64_t (*)(JSC::JSGlobalObject *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t))LODWORD(v1050[0]);
        LOBYTE(v1053) = v822;
        *(_WORD *)((char *)&v1053 + 1) = 15;
        BYTE3(v1053) = -1;
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v1059, a1, v816, v817, v818, v819, v820, v821);
        JSC::MacroAssemblerARM64::branchTest32(a1, 4, v766, v766, v823, v824, v825, v826, (uint64_t)v1003);
        JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xBuLL, (JSC::DFG::Node *)0xFF80000000, 0, v1003);
        JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, 10, v798, v827, v828, v829, v830, v831);
        JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1052, a1, v832, v833, v834, v835, v836, v837);
LABEL_498:
        JSC::DFG::SpeculativeJIT::jsValueResult(a1, v798, (uint64_t)v1056, 16, 0, v838, v839, v840);
        goto LABEL_499;
      }
      JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v784, v785, v786, v787, v788, v789, v790, (int *)v1050);
      JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v863, v864, v865, v866, v867, v868);
      if (*(_BYTE *)(a1 + 328))
        v875 = 69;
      else
        v875 = 65;
      v1052 = (uint64_t (*)(JSC::JSGlobalObject *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t))LODWORD(v1050[0]);
      LOBYTE(v1053) = v875;
      *(_WORD *)((char *)&v1053 + 1) = 15;
      BYTE3(v1053) = -1;
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v1059, a1, v869, v870, v871, v872, v873, v874);
      JSC::MacroAssemblerARM64::branchTest32(a1, 4, v766, v766, v876, v877, v878, v879, (uint64_t)v1005);
      JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xBuLL, (JSC::DFG::Node *)0xFF80000000, 0, v1005);
      if ((_MergedGlobals_24 & 1) == 0)
      {
        qword_1ECF58510 = 0x7FF8000000000000;
        _MergedGlobals_24 = 1;
      }
      JSC::MacroAssemblerARM64::loadDouble(a1, (uint64_t)&qword_1ECF58510, (char)v768, v880, v881, v882, v883, v884);
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v1052, a1, v885, v886, v887, v888, v889, v890);
      JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)a1, (char)v768, v1056, 0, v891, v892, v893, v894);
LABEL_499:
      v848 = v1059;
      if (v1060 != (_WORD *)v1059 && (_QWORD)v1059)
      {
        *(_QWORD *)&v1059 = 0;
        DWORD2(v1059) = 0;
        WTF::fastFree(v848, v841, v842, v843, v844, v845, v846, v847);
      }
      if (v1045)
      {
        v849 = (char *)v1045
             + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v1046];
        --*((_DWORD *)v849 + 1244);
      }
      v767 = v1058[0];
LABEL_505:
      if (v767 != 0xFF)
      {
        if ((char)v767 > 15)
          v850 = -1;
        else
          v850 = v767;
        --*(_DWORD *)(v1057 + 12 * v850 + 4784);
      }
      v851 = v1071[0];
      if (v1071[0] > 15)
        v851 = -1;
      --*((_DWORD *)v1069 + 3 * v851 + 1196);
      if ((*((_QWORD *)&v1032 + 1) & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v852 = v1033[0];
        if (v1033[0] > 15)
          v852 = -1;
        v77 = v1032 + 12 * v852;
        goto LABEL_47;
      }
      return;
    case 10:
    case 11:
      if (v11 == 146)
        v576 = *(_DWORD *)(a2 + 80);
      else
        v576 = *(_DWORD *)(a2 + 72);
      if ((v576 & 0xFE0000) == 0)
      {
        v898 = *(_QWORD *)(a1 + 3960);
        v899 = *(_DWORD *)(a2 + 24) + 1;
        if (*(_DWORD *)(v898 + 164) <= v899)
        {
          __break(0xC471u);
          JUMPOUT(0x197CB2C14);
        }
        JSC::DFG::SpeculateStrictInt32Operand::SpeculateStrictInt32Operand((uint64_t)&v1059, a1, *(_QWORD *)(*(_QWORD *)(v898 + 152) + 8 * v899), 0, a5, a6, a7, a8);
        v905 = *(_QWORD *)(a1 + 3960);
        v906 = *((_DWORD *)v1056 + 6) + 2;
        if (*(_DWORD *)(v905 + 164) <= v906)
        {
          __break(0xC471u);
          JUMPOUT(0x197CB2C1CLL);
        }
        JSC::DFG::StorageOperand::StorageOperand((uint64_t)&v1032, a1, *(_QWORD *)(*(_QWORD *)(v905 + 152) + 8 * v906), v900, v901, v902, v903, v904);
        JSC::DFG::SpeculateStrictInt32Operand::gpr((JSC::DFG::SpeculateStrictInt32Operand *)&v1059, v907, v908, v909, v910, v911, v912, v913);
        v921 = v920;
        v922 = v1033[0];
        if (v1033[0] == 255)
        {
          v922 = JSC::DFG::SpeculativeJIT::fillStorage(v1032, *((unint64_t *)&v1032 + 1), v914, v915, v916, v917, v918, v919);
          v1033[0] = v922;
        }
        if (*(_BYTE *)(a1 + 5244))
        {
          v923 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), 16);
          JSC::MacroAssemblerARM64::branch32(a1, 2, v921, v922 | 0xFFFFFFFC00000000, v924, v925, v926, v927, (uint64_t)v997);
          JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xFuLL, (JSC::DFG::Node *)0xFF80000000, 0, v997);
          v928 = v923;
          JSC::MacroAssemblerARM64::load64(a1, v922 | ((unint64_t)v921 << 8) | 0x300000000, 0x200000010uLL, v928, v929, v930, v931, v932);
          JSC::MacroAssemblerARM64::branchTest64(a1, 0, v928, 0xFFFFFFFFLL, v933, v934, v935, v936, (uint64_t)v996, v937);
          JSC::DFG::SpeculativeJIT::speculationCheck(a1, 0xEuLL, (JSC::DFG::Node *)0xFF80000000, 0, v996);
          JSC::DFG::SpeculativeJIT::jsValueResult(a1, v928, (uint64_t)v1056, 16, 0, v938, v939, v940);
          v922 = v1033[0];
        }
        if (v922 != 0xFF)
        {
          if ((char)v922 > 15)
            v941 = -1;
          else
            v941 = v922;
          --*(_DWORD *)(v1032 + 12 * v941 + 4784);
        }
LABEL_424:
        v378 = (uint64_t (*)(JSC::JSGlobalObject *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t))v1059;
        v379 = SLOBYTE(v1060[0]);
        goto LABEL_240;
      }
      v577 = *(_QWORD *)(a1 + 3960);
      if (*(_DWORD *)(v577 + 164) <= *(_QWORD *)(a2 + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2B4CLL);
      }
      JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v1069, (JSC::DFG::SpeculativeJIT *)a1, *(_QWORD *)(*(_QWORD *)(v577 + 152) + 8 * *(_QWORD *)(a2 + 24)), a4, a5, a6, a7, a8);
      v585 = *(_QWORD *)(a1 + 3960);
      v586 = *((_DWORD *)v1056 + 6);
      v587 = *(_DWORD *)(v585 + 164);
      if (v587 <= v586 + 1)
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2B54);
      }
      v588 = *(_QWORD *)(*(_QWORD *)(v585 + 152) + 8 * (v586 + 1));
      v589 = ~*(_DWORD *)((v588 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v589 >= *(unsigned int *)(a1 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2B5CLL);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v589 + 12))
      {
        LOBYTE(v1059) = 0;
        v590 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(a1, v588, (uint64_t)&v1059, v580, v581, v582, v583, v584);
        if (v1059 != 1)
        {
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
          __break(0xC471u);
          JUMPOUT(0x197CB2BA8);
        }
        v274 = v590;
        v585 = *(_QWORD *)(a1 + 3960);
        v586 = *((_DWORD *)v1056 + 6);
        v587 = *(_DWORD *)(v585 + 164);
      }
      else
      {
        v274 = -1;
      }
      v591 = v586 + 2;
      if (v587 <= v591)
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2B64);
      }
      v592 = *(_QWORD *)(*(_QWORD *)(v585 + 152) + 8 * v591);
      v593 = ~*(_DWORD *)((v592 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v593 >= *(unsigned int *)(a1 + 4004))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB2B6CLL);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v593 + 12))
        v594 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v592, v579, v580, v581, v582, v583, v584);
      else
        v594 = -1;
      v601 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)&v1069, v578, v579, v580, v581, v582, v583, v584);
      if (v274 == -1)
      {
        LOBYTE(v1059) = 0;
        v602 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(a1, v588, (uint64_t)&v1059, v596, v597, v598, v599, v600);
        if (v1059 != 1)
        {
          JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(a1 + 3960), *(JSC::DFG::Node **)(a1 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
          __break(0xC471u);
          JUMPOUT(0x197CB2BDCLL);
        }
        v274 = v602;
      }
      if (v594 == 0xFF)
        v594 = JSC::DFG::SpeculativeJIT::fillStorage(a1, v592, v595, v596, v597, v598, v599, v600);
      if (*(_BYTE *)(a1 + 5244))
      {
        v603 = (*(uint64_t (**)(_QWORD, uint64_t))a3)(*(_QWORD *)(a3 + 8), 16);
        *(_QWORD *)&v1032 = v1033;
        *((_QWORD *)&v1032 + 1) = 2;
        if (!*(_BYTE *)(a1 + 212))
        {
          __break(0xC471u);
          JUMPOUT(0x197CB27C4);
        }
        v609 = v603;
        *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
        JSC::MacroAssemblerARM64::load32(a1, v594 | 0xFFFFFFFC00000000, *(char *)(a1 + 304), v604, v605, v606, v607, v608);
        JSC::MacroAssemblerARM64::branch32(a1, 2, v274, 17, v610, v611, v612, v613, (uint64_t)&v994);
        v619 = v994;
        if (v994 != -1)
        {
          v620 = HIDWORD(v1032);
          if (HIDWORD(v1032) == DWORD2(v1032))
          {
            v621 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1032, (void *)(HIDWORD(v1032) + 1), (unint64_t)&v994, v614, v615, v616, v617, v618);
            v623 = *v621;
            v622 = (uint64_t *)(v621 + 1);
            v619 = v623;
            v620 = HIDWORD(v1032);
          }
          else
          {
            v622 = &v995;
          }
          v669 = v1032 + 12 * v620;
          *(_DWORD *)v669 = v619;
          *(_QWORD *)(v669 + 4) = *v622;
          ++HIDWORD(v1032);
        }
        JSC::MacroAssemblerARM64::load64(a1, v594 | ((unint64_t)v274 << 8) | 0x300000000, 0x200000010uLL, v609, v615, v616, v617, v618);
        JSC::MacroAssemblerARM64::branchTest64(a1, 0, v609, 0xFFFFFFFFLL, v670, v671, v672, v673, (uint64_t)&v992, v674);
        v681 = v992;
        v682 = HIDWORD(v1032);
        if (v992 != -1)
        {
          if (HIDWORD(v1032) == DWORD2(v1032))
          {
            v683 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1032, (void *)(HIDWORD(v1032) + 1), (unint64_t)&v992, v676, v677, v678, v679, v680);
            v685 = *v683;
            v684 = v683 + 1;
            v681 = v685;
            v682 = HIDWORD(v1032);
          }
          else
          {
            v684 = &v993;
          }
          v686 = v1032 + 12 * v682;
          *(_DWORD *)v686 = v681;
          *(_QWORD *)(v686 + 4) = *(_QWORD *)v684;
          v682 = ++HIDWORD(v1032);
        }
        v687 = v682;
        v988 = (WTF *)v990;
        v989 = v682;
        if (v682 < 3)
        {
          v688 = v990;
        }
        else
        {
          if (v682 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197CB2BE4);
          }
          v688 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v682));
          v988 = (WTF *)v688;
          v687 = HIDWORD(v1032);
          v682 = HIDWORD(v1032);
        }
        v987 = v601;
        if (v682)
        {
          v689 = v1032;
          v690 = v1032 + 12 * v687;
          do
          {
            *(_DWORD *)v688 = *(_DWORD *)v689;
            *(_QWORD *)(v688 + 4) = *(_QWORD *)(v689 + 4);
            v689 += 12;
            v688 += 12;
          }
          while (v689 != v690);
        }
        v691 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)a1, v1056, v675, v676, v677, v678, v679, v680);
        v693 = v692;
        v694 = v989;
        *(_QWORD *)&v1059 = v1060;
        DWORD2(v1059) = 2;
        HIDWORD(v1059) = v989;
        if (v989 < 3)
        {
          v695 = v1060;
        }
        else
        {
          if (v989 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197CB2BECLL);
          }
          v695 = (_WORD *)WTF::fastMalloc((WTF *)(12 * v989));
          DWORD2(v1059) = 12 * v989 / 0xC;
          *(_QWORD *)&v1059 = v695;
          v694 = v989;
        }
        if (v694)
        {
          v696 = v988;
          v697 = (WTF *)((char *)v988 + 12 * v694);
          do
          {
            *(_DWORD *)v695 = *(_DWORD *)v696;
            *(_QWORD *)(v695 + 2) = *(_QWORD *)((char *)v696 + 4);
            v696 = (WTF *)((char *)v696 + 12);
            v695 += 6;
          }
          while (v696 != v697);
        }
        *(_QWORD *)&v1057 = v691;
        *((_QWORD *)&v1057 + 1) = v693;
        v1045 = (WTF *)a1;
        v1052 = operationGetByValObjectInt;
        LOBYTE(v1050[0]) = 0;
        LOBYTE(v1040) = 0;
        LOBYTE(v1048[0]) = v609;
        LOBYTE(v1049) = v987;
        v1068 = v274;
        std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::ARM64Registers::RegisterID&,JSC::ARM64Registers::RegisterID&>(&v991, (uint64_t *)&v1059, (_DWORD **)&v1045, (uint64_t *)&v1052, (unsigned __int8 *)v1050, (char *)&v1040, (char *)v1048, &v1057, (char *)&v1049, &v1068);
        v705 = v1059;
        if (v1060 != (_WORD *)v1059 && (_QWORD)v1059)
        {
          *(_QWORD *)&v1059 = 0;
          DWORD2(v1059) = 0;
          WTF::fastFree(v705, v698, v699, v700, v701, v702, v703, v704);
        }
        v706 = (_QWORD *)(a1 + 5656);
        v707 = *(unsigned int *)(a1 + 5668);
        if ((_DWORD)v707 == *(_DWORD *)(a1 + 5664))
        {
          v709 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v706, v707 + 1, (unint64_t)&v991);
          v707 = *(unsigned int *)(a1 + 5668);
          v708 = (uint64_t *)(*(_QWORD *)(a1 + 5656) + 8 * v707);
        }
        else
        {
          v708 = (uint64_t *)(*v706 + 8 * v707);
          v709 = &v991;
        }
        v710 = *v709;
        *v709 = 0;
        *v708 = v710;
        *(_DWORD *)(a1 + 5668) = v707 + 1;
        v711 = v991;
        v991 = 0;
        if (v711)
          (*(void (**)(uint64_t))(*(_QWORD *)v711 + 8))(v711);
        if (v990 != (_BYTE *)v988 && v988)
          WTF::fastFree((unint64_t)v988, v698, v699, v700, v701, v702, v703, v704);
        v712 = v1056;
        JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, v1056, v699, v700, v701, v702, v703, v704);
        if (v609 > 15)
          v720 = -1;
        else
          v720 = v609;
        v721 = a1 + 12 * v720;
        v722 = *((_DWORD *)v712 + 12);
        *(_DWORD *)(v721 + 4776) = v722;
        *(_DWORD *)(v721 + 4780) = 4;
        v723 = ~v722;
        if (v723 >= *(unsigned int *)(a1 + 4004))
        {
          __break(0xC471u);
          JUMPOUT(0x197CB2B74);
        }
        v724 = *(_QWORD *)(a1 + 3992) + 24 * (int)v723;
        v725 = *((_DWORD *)v712 + 13);
        *(_QWORD *)v724 = v712;
        *(_DWORD *)(v724 + 8) = v725;
        *(_BYTE *)(v724 + 17) = v609;
        *(_DWORD *)(v724 + 12) = 16;
        *(_BYTE *)(v724 + 16) = 0;
        v726 = v1032;
        if (v1033 != (_BYTE *)v1032 && (_QWORD)v1032)
        {
          *(_QWORD *)&v1032 = 0;
          DWORD2(v1032) = 0;
          WTF::fastFree(v726, v713, v714, v715, v716, v717, v718, v719);
        }
      }
      if (v594 != 0xFF)
      {
        if ((char)v594 > 15)
          v727 = -1;
        else
          v727 = v594;
        --*(_DWORD *)(a1 + 12 * v727 + 4784);
      }
      v438 = v274 <= 15;
LABEL_272:
      if (v438)
        v439 = v274;
      else
        v439 = -1;
      --*(_DWORD *)(a1 + 12 * v439 + 4784);
      if ((v1070 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v440 = v1071[0];
        if (v1071[0] > 15)
          v440 = -1;
        v77 = (uint64_t)v1069 + 12 * v440;
        goto LABEL_47;
      }
      return;
    case 12:
      JSC::DFG::SpeculativeJIT::compileGetByValOnDirectArguments(a1, a2, a3, a4, a5, a6, a7, a8);
      return;
    case 13:
      JSC::DFG::SpeculativeJIT::compileGetByValOnScopedArguments(a1, a2, a3, a4, a5, a6, a7, a8);
      return;
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      if (v11 == 146)
        v253 = *(_DWORD *)(a2 + 80);
      else
        v253 = *(_DWORD *)(a2 + 72);
      v254 = JSC::DFG::toTypedArrayType(v253);
      if ((v254 - 1) > 6)
        JSC::DFG::SpeculativeJIT::compileGetByValOnFloatTypedArray(a1, a2, v254, a3, v255, v256, v257, v258);
      else
        JSC::DFG::SpeculativeJIT::compileGetByValOnIntTypedArray(a1, a2, v254, a3, v255, v256, v257, v258);
      return;
    default:
      return;
  }
}

void JSC::DFG::SpeculateStrictInt32Operand::gpr(JSC::DFG::SpeculateStrictInt32Operand *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  if (*((unsigned __int8 *)this + 16) == 255)
  {
    v10 = *(_QWORD *)this;
    v9 = *((_QWORD *)this + 1);
    v12 = 0;
    v11 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(v10, v9, (uint64_t)&v12, a4, a5, a6, a7, a8);
    if (v12 == 1)
    {
      *((_BYTE *)this + 16) = v11;
    }
    else
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v10 + 3960), *(JSC::DFG::Node **)(v10 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
      __break(0xC471u);
    }
  }
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, uint64_t a2, JSC::AssemblerBuffer *a3, unsigned int *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::AssemblerBuffer *v12;
  unsigned int *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  __int16 *v46;
  int v47;
  char *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  unsigned __int8 *v72;
  int v73;
  unsigned __int8 v74;
  unsigned __int8 *v75;
  unsigned int v76;
  unsigned int v77;
  __int16 v78;
  _BYTE v79[6];

  v8 = a7;
  v12 = a3;
  v15 = (unsigned int *)(a2 + 5752);
  v16 = 1;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, 1, a2 + 5752, (char)a3, 0xFFFFFFFFLL, 0xFFFFFFFFLL, a7, a8);
  if (a6 == 1)
  {
    if (v8 == 2)
      goto LABEL_60;
    v16 = 0;
  }
  else
  {
    v78 = a6 | 0x100;
    v76 = 1;
    if (v8 == 2)
      goto LABEL_7;
  }
  *(_WORD *)&v79[2 * v16++ - 2] = v8 | 0x200;
  v76 = v16;
  do
  {
LABEL_7:
    v24 = 0;
    v25 = 0;
    v26 = v16;
    do
    {
      if ((v79[v24 - 1] & 0x40) != 0)
      {
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      v25 |= 1 << v79[v24 - 1];
      v24 += 2;
    }
    while (2 * v16 != v24);
    v27 = 0;
    do
    {
      v28 = v79[v27 - 2] & 0x7F;
      if (v28 >= 0x40)
        goto LABEL_80;
      v25 &= ~(1 << v28);
      v27 += 2;
    }
    while (2 * v16 != v27);
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
    v29.i16[0] = vaddlv_u8(v29);
    v30 = v29.i32[0];
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v25));
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.i32[0] + v30)
    {
      v32 = 0;
      if (v16 <= 1)
        v33 = 1;
      else
        v33 = v16;
      v34 = 2 * v33;
      while (1)
      {
        v35 = v79[v32 - 1];
        if ((v35 & 0x7Fu) >= 0x40)
          goto LABEL_80;
        if (((v25 >> (v35 & 0x7F)) & 1) != 0)
          break;
        v32 += 2;
        if (v34 == v32)
          goto LABEL_57;
      }
      v36 = v79[v32 - 2];
      if (v36 != v35)
      {
        if ((char)v36 == 63)
        {
          v37 = *(_DWORD *)(a2 + 200);
          v38 = *(_DWORD *)(a2 + 192);
          if (v35 == 31)
            goto LABEL_51;
          v40 = v35 & 0x1F | 0xD2800000;
        }
        else
        {
          v37 = *(_DWORD *)(a2 + 200);
          v38 = *(_DWORD *)(a2 + 192);
          v39 = (char)v35 == 31 || (char)v36 == 31;
          if (!v39)
          {
            v40 = v35 & 0xFFE0FFFF | ((v36 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_52;
          }
LABEL_51:
          v40 = (char)v35 | (32 * (char)v36) | 0x91000000;
        }
LABEL_52:
        if (v37 + 4 > v38)
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v17, v18, v19, v20, v21, v22, v23);
          v37 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v37) = v40;
        *(_DWORD *)(a2 + 200) += 4;
        v26 = v76;
      }
      memmove(&v79[v32 - 2], &v79[v32], 2 * v26 - v32 - 2);
      v16 = v76 - 1;
      goto LABEL_56;
    }
    v41 = v78;
    v74 = HIBYTE(v78);
    JSC::MacroAssemblerARM64::swap(a2, (char)v78, SHIBYTE(v78), v19, v20, v21, v22, v23);
    memmove(&v78, v79, 2 * v76 - 2);
    v42 = v76 - 1;
    v39 = v76 == 1;
    v77 = v42;
    v43 = (unsigned __int8 *)&v78;
    v44 = &v79[2 * v42 - 2];
    if (v39)
    {
      v51 = 0;
      v52 = 0;
      v47 = 0;
      v17 = v44;
    }
    else
    {
      v45 = 2 * v42;
      v46 = &v78;
      while (*(unsigned __int8 *)v46 != v74)
      {
        ++v46;
        v45 -= 2;
        if (!v45)
          goto LABEL_35;
      }
      *(_BYTE *)v46 = v41;
LABEL_35:
      v47 = 0;
      v48 = (char *)&v78;
      v17 = v44;
      v49 = v44;
      do
      {
        if (*v43 == v43[1])
        {
          v50 = v43;
          if (v49 != &v79[2 * v77 - 2])
          {
            v73 = v47;
            v75 = v44;
            if (v43 == v17)
            {
              v50 = v49;
            }
            else
            {
              v71 = v48 - (char *)v17;
              v72 = v49;
              memmove(v49, v17, v48 - (char *)v17);
              v50 = &v72[v71];
            }
            v44 = v75;
            v47 = v73;
          }
          v17 = v43 + 2;
          ++v47;
          v49 = v50;
        }
        v43 += 2;
        v48 += 2;
      }
      while (v43 < v44);
      v51 = v77;
      v52 = v77;
      v44 = v49;
    }
    v53 = &v79[2 * v51 - 2];
    if (v17 != v53)
    {
      v54 = v47;
      memmove(v44, v17, v53 - v17);
      v47 = v54;
      v52 = v77;
    }
    v16 = v52 - v47;
LABEL_56:
    v76 = v16;
LABEL_57:
    ;
  }
  while (v16);
LABEL_60:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, a5, 0, v19, v20, v21, v22, v23);
  else
    JSC::MacroAssemblerARM64::load64(a2, ((_QWORD)a4 << 35) + 0x380000001ALL, 0, v19, v20, v21, v22, v23);
  JSC::DFG::SpeculativeJIT::appendCall(a2, (uint64_t)operationGetByValGeneric, v55, v56, v57, v58, v59, v60, a1);
  LOWORD(a1) = JSC::DFG::SpeculativeJIT::tryHandleOrGetExceptionUnderSilentSpill<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,long long,long long),JSC::JSValueRegs,WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v15, (char)v12, v61, v62, v63, v64, v65);
  if ((_BYTE)v12)
  {
    if (v12 == 31)
      LODWORD(a5) = -1862270945;
    else
      LODWORD(a5) = v12 & 0x1F | 0xAA0003E0;
    a4 = (unsigned int *)(a2 + 200);
    v66 = *(_DWORD *)(a2 + 200);
    v12 = (JSC::AssemblerBuffer *)(a2 + 56);
    if (v66 + 4 > *(_DWORD *)(a2 + 192))
    {
LABEL_81:
      JSC::AssemblerBuffer::outOfLineGrow(v12, (uint64_t)v17, v18, v19, v20, v21, v22, v23);
      v66 = *a4;
    }
    *(_DWORD *)(*(_QWORD *)v12 + v66) = a5;
    *a4 += 4;
  }
  v67 = *(_DWORD *)(a2 + 5764);
  if (v67)
  {
    v68 = v67 - 1;
    v69 = 16 * (v67 - 1);
    while (*(_DWORD *)(a2 + 5764) > v68)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a2 + 5752) + v69, v18, v19, v20, v21, v22, v23);
      v69 -= 16;
      if (--v68 == -1)
        goto LABEL_72;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_72:
    *(_BYTE *)(a2 + 5768) = 0;
    if (*(_DWORD *)(a2 + 5760))
    {
      if (*(_DWORD *)(a2 + 5764))
        *(_DWORD *)(a2 + 5764) = 0;
      v70 = *(_QWORD *)v15;
      if (*(_QWORD *)v15)
      {
        *(_QWORD *)(a2 + 5752) = 0;
        *(_DWORD *)(a2 + 5760) = 0;
        WTF::fastFree(v70, v17, v18, v19, v20, v21, v22, v23);
      }
    }
    if ((unsigned __int16)a1 >= 0x100u)
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)a1, v18, v19, v20, v21, v22, v23);
  }
}

void JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,decltype(nullptr)>(uint64_t *a1, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6, uint64_t a7, char a8, char a9, char a10)
{
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE *v24;
  WTF *v25;
  WTF *v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  int v30;
  _BYTE *v31;
  WTF *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF *v43;
  WTF *v44;
  unsigned int v45;
  _BYTE v46[24];
  WTF *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE v50[24];
  WTF *v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE v54[24];

  v18 = *((unsigned int *)a2 + 3);
  v44 = (WTF *)v46;
  v45 = v18;
  if (v18 < 3)
  {
    v19 = v46;
  }
  else
  {
    if (v18 >= 0x15555556)
      goto LABEL_36;
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v18));
    v44 = (WTF *)v19;
    LODWORD(v18) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v18)
  {
    v20 = *a2;
    v21 = *a2 + 12 * v18;
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)(v20 + 4);
      v20 += 12;
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = WTF::fastMalloc((WTF *)0xC8);
  v23 = v45;
  v47 = (WTF *)v50;
  v48 = 2;
  v49 = v45;
  if (v45 < 3)
  {
    v24 = v50;
  }
  else
  {
    if (v45 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CB35A0);
    }
    v24 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v45));
    v48 = 12 * v45 / 0xC;
    v47 = (WTF *)v24;
    v23 = v45;
  }
  if (v23)
  {
    v25 = v44;
    v26 = (WTF *)((char *)v44 + 12 * v23);
    do
    {
      *(_DWORD *)v24 = *(_DWORD *)v25;
      *(_QWORD *)(v24 + 4) = *(_QWORD *)((char *)v25 + 4);
      v25 = (WTF *)((char *)v25 + 12);
      v24 += 12;
    }
    while (v25 != v26);
  }
  v27 = v49;
  v51 = (WTF *)v54;
  v52 = 2;
  v53 = v49;
  if (v49 >= 3)
  {
    if (v49 < 0x15555556)
    {
      v28 = a6;
      v29 = a8;
      v30 = 12 * v49;
      v31 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v49));
      v52 = (v30 & 0xFFFFFFFC) / 0xC;
      v51 = (WTF *)v31;
      v27 = v49;
      goto LABEL_19;
    }
LABEL_36:
    __break(0xC471u);
    JUMPOUT(0x197CB3598);
  }
  v28 = a6;
  v29 = a8;
  v31 = v54;
LABEL_19:
  if (v27)
  {
    v32 = v47;
    v33 = (WTF *)((char *)v47 + 12 * v27);
    do
    {
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_QWORD *)(v31 + 4) = *(_QWORD *)((char *)v32 + 4);
      v32 = (WTF *)((char *)v32 + 12);
      v31 += 12;
    }
    while (v32 != v33);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v22, (uint64_t *)&v51, a3, 0, 0, a7);
  v41 = v51;
  if (v54 != (_BYTE *)v51 && v51 != 0)
  {
    v51 = 0;
    v52 = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  *(_QWORD *)v22 = &off_1E3574D20;
  *(_BYTE *)(v22 + 152) = a5;
  *(_QWORD *)(v22 + 156) = v28;
  *(_QWORD *)(v22 + 168) = operationGetByValOptimize;
  *(_BYTE *)(v22 + 176) = v29;
  *(_BYTE *)(v22 + 177) = a9;
  *(_BYTE *)(v22 + 178) = a10;
  *(_QWORD *)(v22 + 184) = 0;
  *(_DWORD *)(v22 + 192) = a4;
  *a1 = v22;
  v43 = v47;
  if (v50 != (_BYTE *)v47 && v47)
  {
    v47 = 0;
    v48 = 0;
    WTF::fastFree((unint64_t)v43, v34, v35, v36, v37, v38, v39, v40);
  }
  if (v46 != (_BYTE *)v44)
  {
    if (v44)
      WTF::fastFree((unint64_t)v44, v34, v35, v36, v37, v38, v39, v40);
  }
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, char a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  WTF *v29;
  unsigned int v30;
  int v31;
  _BYTE v32[27];
  char v33;
  char v34;
  char v35;
  __int16 v36;
  uint64_t (*v37)(JSC::JSGlobalObject *, uint64_t, unint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x16_t);
  _DWORD *v38;
  __int128 v39;

  v16 = *((unsigned int *)a2 + 3);
  v29 = (WTF *)v32;
  v30 = 2;
  v31 = v16;
  if (v16 < 3)
  {
    v18 = v32;
    if (!(_DWORD)v16)
      goto LABEL_8;
    goto LABEL_6;
  }
  if (v16 >= 0x15555556)
  {
    __break(0xC471u);
    return;
  }
  v17 = 12 * v16;
  v18 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v16));
  v30 = (v17 & 0xFFFFFFFC) / 0xC;
  v29 = (WTF *)v18;
  LODWORD(v16) = *((_DWORD *)a2 + 3);
  if ((_DWORD)v16)
  {
LABEL_6:
    v19 = *a2;
    v20 = *a2 + 12 * v16;
    do
    {
      *(_DWORD *)v18 = *(_DWORD *)v19;
      *(_QWORD *)(v18 + 4) = *(_QWORD *)(v19 + 4);
      v19 += 12;
      v18 += 12;
    }
    while (v19 != v20);
  }
LABEL_8:
  *(_QWORD *)&v39 = a5;
  *((_QWORD *)&v39 + 1) = a6;
  v37 = operationGetByValObjectInt;
  v38 = a3;
  v36 = 0;
  v35 = a4;
  v34 = a7;
  v33 = a8;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT *&,JSC::ExceptionOperationResult<long long> (*&)(JSC::JSGlobalObject *,JSC::JSObject *,int),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::ARM64Registers::RegisterID&,JSC::DFG::JITCompiler::LinkableConstant&,JSC::ARM64Registers::RegisterID&,JSC::ARM64Registers::RegisterID&>(a1, (uint64_t *)&v29, &v38, (uint64_t *)&v37, (unsigned __int8 *)&v36 + 1, (char *)&v36, &v35, &v39, &v34, &v33);
  v28 = v29;
  if (v32 != (_BYTE *)v29)
  {
    if (v29)
    {
      v29 = 0;
      v30 = 0;
      WTF::fastFree((unint64_t)v28, v21, v22, v23, v24, v25, v26, v27);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileRegExpTestInline(JSC::DFG::Node *)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int8x8_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int *v42;
  int *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  _BYTE *v61;
  _BYTE *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int *v85;
  int *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  char v131;
  uint64_t v132;
  int *v133;
  int *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  unsigned int v145;
  int v146;
  unsigned int v147;
  char v148;
  uint64_t v149;
  int *v150;
  int *v151;
  int v152;
  uint64_t v153;
  int v154;
  int v155;
  char v156;
  __int16 v157;
  char v158;
  int v159;
  int v160;
  char v161;
  __int16 v162;
  char v163;
  __int128 v164;
  unsigned int v165[3];
  int v166;
  int v167;
  char v168;
  char v169;
  char v170;
  char v171;
  _WORD v172[7];
  __int128 v173;
  int v174;
  int v175;
  int v176;
  uint64_t v177;
  __int128 v178;

  v12 = *(_QWORD *)a2;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)a2, a3 | 0x800000000, **(char **)(a2 + 8), a4, a5, a6, a7, a8);
  JSC::MacroAssemblerARM64::branchTest64(v12, 1, **(char **)(a2 + 8), 1, v13, v14, v15, v16, (uint64_t)&v176, v17);
  v23 = v176;
  if (v176 != -1)
  {
    v24 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v24 == *(_DWORD *)(a4 + 8))
    {
      v25 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v24 + 1), (unint64_t)&v176, v18, v19, v20, v21, v22);
      v27 = *v25;
      v26 = (uint64_t *)(v25 + 1);
      v23 = v27;
      LODWORD(v24) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v26 = &v177;
    }
    v28 = *(_QWORD *)a4 + 12 * v24;
    *(_DWORD *)v28 = v23;
    *(_QWORD *)(v28 + 4) = *v26;
    ++*(_DWORD *)(a4 + 12);
  }
  if (!*(_BYTE *)(v12 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CB3DA4);
  }
  v29 = **(unsigned __int8 **)(a2 + 8) | 0x1000000000;
  *(_DWORD *)(*(_QWORD *)(v12 + 296) + 208) &= ~*(_DWORD *)(v12 + 320);
  JSC::MacroAssemblerARM64::load32(v12, v29, *(char *)(v12 + 304), v18, v19, v20, v21, v22);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)4, v12, 0, 17, v30, v31, v32, v33, (uint64_t)&v174, v34);
  v40 = v174;
  if (v174 != -1)
  {
    v41 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v41 == *(_DWORD *)(a4 + 8))
    {
      v42 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v41 + 1), (unint64_t)&v174, v35, v36, v37, v38, v39);
      v44 = *v42;
      v43 = v42 + 1;
      v40 = v44;
      LODWORD(v41) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v43 = &v175;
    }
    v45 = *(_QWORD *)a4 + 12 * v41;
    *(_DWORD *)v45 = v40;
    *(_QWORD *)(v45 + 4) = *(_QWORD *)v43;
    ++*(_DWORD *)(a4 + 12);
  }
  JSC::MacroAssemblerARM64::load64(v12, **(unsigned __int8 **)(a2 + 8) | 0x800000000, **(char **)(a2 + 16), v35, v36, v37, v38, v39);
  JSC::MacroAssemblerARM64::load32(v12, **(unsigned __int8 **)(a2 + 8) | 0x400000000, **(char **)(a2 + 24), v46, v47, v48, v49, v50);
  memset(v172, 255, sizeof(v172));
  v173 = xmmword_199124350;
  v59 = *(char **)(a2 + 8);
  v58 = *(char **)(a2 + 16);
  v168 = *v58;
  v169 = *v59;
  v60 = *(char **)(a2 + 32);
  v170 = **(_BYTE **)(a2 + 24);
  v171 = *v60;
  v61 = *(_BYTE **)(a2 + 40);
  v62 = *(_BYTE **)(a2 + 48);
  HIBYTE(v172[2]) = *v61;
  LOBYTE(v172[3]) = *v62;
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 56) + 7) & 0x40) != 0)
    HIBYTE(v172[3]) = **(_BYTE **)(a2 + 64);
  HIBYTE(v172[1]) = *v61;
  LOBYTE(v172[2]) = *v58;
  v63 = *(unsigned int **)(v12 + 368);
  if (v63)
  {
    v64 = v63 + 2;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 + 1, v64));
    v66 = (uint64_t)(v63 + 10);
    do
    {
      v67 = __ldaxr(v64);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v64));
    if (!v68)
    {
      atomic_store(1u, v63 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 32))(v63);
    }
  }
  else
  {
    v66 = 40;
  }
  v69 = *(_DWORD *)(v12 + 200);
  if (v69 + 4 > *(_DWORD *)(v12 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v51, v52, v53, v54, v55, v56, v57);
    v69 = *(_DWORD *)(v12 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 56) + v69) = v169 & 0x1F | 0x52800000;
  *(_DWORD *)(v12 + 200) += 4;
  v70 = **(_QWORD **)(a2 + 72);
  v71 = *(_QWORD *)(v70 + 8);
  if (v71)
  {
    v72 = *(_QWORD *)(v71 + 8);
    v73 = *(unsigned int *)(v71 + 4) | ((unint64_t)((*(_DWORD *)(v71 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v72 = 0;
    v73 = 0x100000000;
  }
  JSC::Yarr::jitCompileInlinedTest(*(_QWORD *)(v12 + 3960) + 8, v72, v73, *(unsigned __int16 *)(v70 + 18), 0, *(_QWORD *)(*(_QWORD *)(v12 + 352) + 16), v66 + 168, v12, (uint64_t)&v168);
  JSC::MacroAssemblerARM64::branch32(v12, 0, SHIBYTE(v172[1]), 4294967294, v74, v75, v76, v77, (uint64_t)&v166);
  v83 = v166;
  if (v166 != -1)
  {
    v84 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v84 == *(_DWORD *)(a4 + 8))
    {
      v85 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v84 + 1), (unint64_t)&v166, v78, v79, v80, v81, v82);
      v87 = *v85;
      v86 = v85 + 1;
      v83 = v87;
      LODWORD(v84) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v86 = &v167;
    }
    v88 = *(_QWORD *)a4 + 12 * v84;
    *(_DWORD *)v88 = v83;
    *(_QWORD *)(v88 + 4) = *(_QWORD *)v86;
    ++*(_DWORD *)(a4 + 12);
  }
  JSC::MacroAssemblerARM64::branchTest32(v12, 4, SHIBYTE(v172[1]), SHIBYTE(v172[1]), v79, v80, v81, v82, (uint64_t)v165);
  JSC::DFG::JITCompiler::LinkableConstant::LinkableConstant((JSC::DFG::JITCompiler::LinkableConstant *)&v164, (JSC::DFG::JITCompiler *)v12, **(_QWORD **)(a2 + 72), v89, v90, v91, v92, v93);
  v94 = **(unsigned __int8 **)(a2 + 80) | 0x86800000000;
  v178 = v164;
  JSC::DFG::JITCompiler::LinkableConstant::store((int *)&v178, v12, v94, v95, v96, v97, v98, v99);
  JSC::MacroAssemblerARM64::store64(v12, a3, **(unsigned __int8 **)(a2 + 80) | 0x86000000000, v100, v101, v102, v103, v104);
  JSC::MacroAssemblerARM64::store32(v12, SHIBYTE(v172[1]), **(unsigned __int8 **)(a2 + 80) | 0x84800000000, v105, v106, v107, v108, v109);
  JSC::MacroAssemblerARM64::store32(v12, SLOBYTE(v172[2]), **(unsigned __int8 **)(a2 + 80) | 0x85000000000, v110, v111, v112, v113, v114);
  JSC::MacroAssemblerARM64::store8(v12, 63, **(unsigned __int8 **)(a2 + 80) | 0x85800000000, v115, v116, v117, v118, v119);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 2;
  v127 = **(char **)(a2 + 40) | 0x320003E0;
  v128 = *(_DWORD *)(v12 + 200);
  if (v128 + 4 > *(_DWORD *)(v12 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v120, v121, v122, v123, v124, v125, v126);
    v128 = *(_DWORD *)(v12 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 56) + v128) = v127;
  v129 = *(_DWORD *)(v12 + 200) + 4;
  for (*(_DWORD *)(v12 + 200) = v129; v129 < *(_DWORD *)(v12 + 52); *(_DWORD *)(v12 + 200) = v129)
  {
    if ((v129 + 4) > *(_DWORD *)(v12 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v120, v121, v122, v123, v124, v125, v126);
      v129 = *(_DWORD *)(v12 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v12 + 56) + v129) = -721215457;
    v129 = *(_DWORD *)(v12 + 200) + 4;
  }
  v130 = v129;
  if ((v129 + 4) > *(_DWORD *)(v12 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v120, v121, v122, v123, v124, v125, v126);
    v130 = *(_DWORD *)(v12 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 56) + v130) = 335544320;
  *(_DWORD *)(v12 + 200) += 4;
  if (*(_BYTE *)(v12 + 328))
    v131 = 69;
  else
    v131 = 65;
  v159 = v129;
  v160 = 0;
  v161 = v131;
  v162 = 15;
  v163 = -1;
  if (v129 != -1)
  {
    v132 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v132 == *(_DWORD *)(a1 + 8))
    {
      v133 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(v132 + 1), (unint64_t)&v159, v122, v123, v124, v125, v126);
      v135 = *v133;
      v134 = v133 + 1;
      v136 = *(_QWORD *)a1 + 12 * *(unsigned int *)(a1 + 12);
      *(_DWORD *)v136 = v135;
    }
    else
    {
      v134 = &v160;
      v136 = *(_QWORD *)a1 + 12 * v132;
      *(_DWORD *)v136 = v129;
    }
    *(_QWORD *)(v136 + 4) = *(_QWORD *)v134;
    ++*(_DWORD *)(a1 + 12);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v165, v12, v121, v122, v123, v124, v125, v126);
  v144 = **(_BYTE **)(a2 + 40) & 0x1F | 0x52800000;
  v145 = *(_DWORD *)(v12 + 200);
  if (v145 + 4 > *(_DWORD *)(v12 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v137, v138, v139, v140, v141, v142, v143);
    v145 = *(_DWORD *)(v12 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 56) + v145) = v144;
  v146 = *(_DWORD *)(v12 + 200) + 4;
  for (*(_DWORD *)(v12 + 200) = v146; v146 < *(_DWORD *)(v12 + 52); *(_DWORD *)(v12 + 200) = v146)
  {
    if ((v146 + 4) > *(_DWORD *)(v12 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v137, v138, v139, v140, v141, v142, v143);
      v146 = *(_DWORD *)(v12 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v12 + 56) + v146) = -721215457;
    v146 = *(_DWORD *)(v12 + 200) + 4;
  }
  v147 = v146;
  if ((v146 + 4) > *(_DWORD *)(v12 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v12 + 56), v137, v138, v139, v140, v141, v142, v143);
    v147 = *(_DWORD *)(v12 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v12 + 56) + v147) = 335544320;
  *(_DWORD *)(v12 + 200) += 4;
  if (*(_BYTE *)(v12 + 328))
    v148 = 69;
  else
    v148 = 65;
  v154 = v146;
  v155 = 0;
  v156 = v148;
  v157 = 15;
  v158 = -1;
  if (v146 != -1)
  {
    v149 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v149 == *(_DWORD *)(a1 + 8))
    {
      v150 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(v149 + 1), (unint64_t)&v154, v139, v140, v141, v142, v143);
      v152 = *v150;
      v151 = v150 + 1;
      v153 = *(_QWORD *)a1 + 12 * *(unsigned int *)(a1 + 12);
      *(_DWORD *)v153 = v152;
    }
    else
    {
      v151 = &v155;
      v153 = *(_QWORD *)a1 + 12 * v149;
      *(_DWORD *)v153 = v146;
    }
    *(_QWORD *)(v153 + 4) = *(_QWORD *)v151;
    ++*(_DWORD *)(a1 + 12);
  }
}

void JSC::DFG::SpeculativeJIT::compileNewTypedArrayWithInt52Size(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char v15;
  _QWORD *v16;
  unint64_t *v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;

  v10 = *((_QWORD *)this + 495);
  v11 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 1) == 0)
  {
    v12 = *(_QWORD *)(v10 + 32);
LABEL_3:
    v13 = (_QWORD *)(v11 & 0xFFFFFFFF8);
    v14 = 1;
    v15 = 1;
    goto LABEL_4;
  }
  v33 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v34 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v34 != 0x3FFFFFFF) ? (v35 = v34 == -1) : (v35 = 1), v35))
  {
    v36 = 2;
  }
  else if (v34 >> 28)
  {
    v42 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v42 = v33;
    *(_DWORD *)(v42 + 8) = v34;
    v36 = 1;
    v33 = v42;
  }
  else
  {
    v36 = v33;
    v33 = 0;
  }
  v11 = v33 | v36;
  v12 = *(_QWORD *)(v10 + 32);
  if (((v33 | v36) & 1) == 0)
    goto LABEL_3;
  v37 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
  if ((v11 & 2) != 0
    || ((v38 = *(_DWORD *)((v11 & 0xFFFFFFFF8) + 8), v38 != 0x3FFFFFFF) ? (v39 = v38 == -1) : (v39 = 1), v39))
  {
    v40 = 2;
  }
  else if (v38 >> 28)
  {
    v43 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v43 = v37;
    *(_DWORD *)(v43 + 8) = v38;
    v40 = 1;
    v37 = v43;
  }
  else
  {
    v40 = *(_QWORD *)(v11 & 0xFFFFFFFF8);
    v37 = 0;
  }
  v41 = v37 | v40;
  v13 = (_QWORD *)(v41 & 0xFFFFFFFF8);
  if ((v41 & 1) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_6;
    goto LABEL_5;
  }
  v15 = 0;
  v14 = 1;
LABEL_4:
  v16 = v13;
  if (v13)
LABEL_5:
    v12 = v16[1];
LABEL_6:
  v17 = *(unint64_t **)(v12 + 8);
  if ((v14 & 1) == 0 && v13)
    WTF::fastFree((unint64_t)v13, a2, a3, a4, a5, a6, a7, a8);
  if ((v15 & 1) == 0 && (v11 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v11 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v18 = *((_DWORD *)a2 + 18);
  switch((char)v18)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x197CB4184);
    case 1:
      v19 = v17 + 208;
      break;
    case 2:
      v19 = v17 + 211;
      break;
    case 3:
      v19 = v17 + 214;
      break;
    case 4:
      v19 = v17 + 217;
      break;
    case 5:
      v19 = v17 + 220;
      break;
    case 6:
      v19 = v17 + 223;
      break;
    case 7:
      v19 = v17 + 226;
      break;
    case 8:
      v19 = v17 + 229;
      break;
    case 9:
      v19 = v17 + 232;
      break;
    case 10:
      v19 = v17 + 235;
      break;
    case 11:
      v19 = v17 + 238;
      break;
    case 12:
      v19 = v17 + 241;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x197CB41A4);
  }
  v20 = *v19;
  if ((v20 & 1) != 0)
    v21 = 0;
  else
    v21 = v20;
  v22 = JSC::DFG::Graph::registerStructure(*((_QWORD *)this + 495), v21, &v44, a4, a5, a6, a7, a8);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x197CB40D0);
  }
  v28 = *((_QWORD *)a2 + 3);
  if ((v28 & 0xFC000000000000) != 0xD0000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x197CB40F0);
  }
  v29 = ~*(_DWORD *)((v28 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v29 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197CB41E4);
  }
  v30 = v22;
  if (!*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v29 + 12)
    || (v31 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(this, *((_QWORD *)a2 + 3), 3, v23, v24, v25, v26, v27),
        (_DWORD)v31 == -1))
  {
    v31 = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(this, v28, 3, v23, v24, v25, v26, v27);
  }
  JSC::DFG::SpeculativeJIT::emitNewTypedArrayWithSizeInRegister(this, a2, v18, v30, v31, v25, v26, v27);
  if ((int)v31 > 15)
    v32 = -1;
  else
    v32 = v31;
  --*((_DWORD *)this + 3 * v32 + 1196);
}

uint64_t *JSC::DFG::SpeculativeJIT::compileGetTypedArrayLengthAsInt52(JSC::DFG::Graph **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  JSC::DFG::SpeculateCellOperand *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned __int8 v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::DFG::Graph *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int *v49;
  unint64_t v50;
  uint64_t v52;
  JSC::DFG::Node *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int8x8_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *result;
  int v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  unsigned int v70;
  char *v71;
  int v72;
  unsigned int *v73;
  char v74;
  unint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  int v104;
  int v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  char *v120;
  int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  BOOL v130;
  unsigned int v131;
  uint64_t v132;
  unsigned __int8 v133;
  int v134[3];
  uint64_t v135;
  char v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  char v141;

  v10 = *((unsigned __int16 *)a2 + 9);
  if (v10 == 146)
    v11 = *((_DWORD *)a2 + 20);
  else
    v11 = *((_DWORD *)a2 + 18);
  if (v11 != 25)
  {
    v129 = JSC::DFG::toTypedArrayType(v11);
    if (v129)
      v130 = v129 == 12;
    else
      v130 = 1;
    if (v130)
    {
      JSC::DFG::Graph::logAssertionFailure(this[495], a2, (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0xC8F, "void JSC::DFG::SpeculativeJIT::compileGetTypedArrayLengthAsInt52(Node *)", "node->arrayMode().isSomeTypedArrayView()");
      __break(0xC471u);
      goto LABEL_106;
    }
    v10 = *((unsigned __int16 *)a2 + 9);
  }
  if (v10 == 146)
  {
    if ((*((_DWORD *)a2 + 20) & 0x40000000) == 0)
    {
LABEL_6:
      v12 = (JSC::DFG::SpeculateCellOperand *)JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v139, (JSC::DFG::SpeculativeJIT *)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
      v20 = ~*(_DWORD *)((v140 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
      if (v20 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB47F8);
      }
      if (*((_DWORD *)this[499] + 6 * (int)v20 + 2) == 1)
      {
        v29 = JSC::DFG::SpeculateCellOperand::gpr(v12, v13, v14, v15, v16, v17, v18, v19);
        v28 = v29;
        if ((int)v29 > 15)
          v30 = -1;
        else
          v30 = v29;
        ++*((_DWORD *)this + 3 * v30 + 1196);
      }
      else
      {
        v28 = JSC::DFG::SpeculativeJIT::allocate((JSC::DFG::SpeculativeJIT *)this, (uint64_t)v13, v14, v15, v16, v17, v18, v19);
      }
      v31 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)&v139, v21, v22, v23, v24, v25, v26, v27);
      v39 = *((_QWORD *)a2 + 3);
      v40 = this[688];
      v41 = *(unsigned int *)((v39 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v42 = (uint64_t *)((char *)v40 + 24);
      v43 = (uint64_t *)((char *)v40 + 8);
      if ((v39 & 1) != 0)
        v44 = v42;
      else
        v44 = v43;
      v45 = *v44;
      v46 = *v44 + 32 * v41;
      v47 = *((_DWORD *)this + 1396);
      v49 = (unsigned int *)(v46 + 20);
      v48 = *(_DWORD *)(v46 + 20);
      if (v47 != v48)
      {
        if ((*(_QWORD *)(v46 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v48 ^ v47) >= 2)
          {
            v75 = *(_QWORD *)v46;
            if (*(_QWORD *)v46 != 4)
            {
              *(_QWORD *)v46 = v75 | 2;
              v76 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v75 & 1) != 0)
              {
                v125 = 2 * *v76;
                while (v125 * 4)
                {
                  v126 = *(_QWORD *)&v76[v125];
                  if ((*(_BYTE *)(v126 + 19) & 0xC) == 0)
                  {
                    v127 = *(_QWORD *)(v126 + 96);
                    v128 = (v127 & 1) != 0 ? (v127 >> 1) & 3 : *(unsigned __int8 *)(v127 + 4);
                    v125 -= 2;
                    if (v128 != 2)
                      continue;
                  }
                  v133 = v31;
                  v131 = v47;
                  v132 = v41;
                  WTF::fastFree((unint64_t)v76, v32, v33, v34, v35, v36, v37, v38);
                  v41 = v132;
                  v49 = (unsigned int *)(v46 + 20);
                  v47 = v131;
                  v31 = v133;
                  goto LABEL_96;
                }
              }
              else if (v76)
              {
                if ((*((_BYTE *)v76 + 19) & 0xC) != 0
                  || ((v77 = *((_QWORD *)v76 + 12), (v77 & 1) != 0)
                    ? (v78 = (v77 >> 1) & 3)
                    : (v78 = *(unsigned __int8 *)(v77 + 4)),
                      v78 == 2))
                {
LABEL_96:
                  *(_QWORD *)v46 = 4;
                }
              }
            }
            *(_DWORD *)(v45 + 32 * v41 + 16) = -21020677;
          }
          if ((v47 & 1) != 0)
            *(_QWORD *)v46 &= ~2uLL;
        }
        *v49 = v47;
      }
      v50 = *(_QWORD *)v46;
      if ((*(_QWORD *)v46 & 2) != 0)
        goto LABEL_22;
      if (v50 <= 4 && ((1 << v50) & 0x15) != 0)
        goto LABEL_22;
      v73 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v50 & 1) != 0)
      {
        v79 = *v73;
        if (!(_DWORD)v79)
          goto LABEL_52;
        v80 = (uint64_t *)(v73 + 2);
        v74 = 1;
        do
        {
          v81 = *v80++;
          if (*(_BYTE *)(16 * *(unsigned int *)(v81 + 76) + 0xF4))
            v74 = 0;
          --v79;
        }
        while (v79);
      }
      else
      {
        if (!v73)
          goto LABEL_52;
        v74 = *(_BYTE *)(16 * v73[19] + 0xF4) ^ 1;
      }
      if (!v74)
      {
LABEL_22:
        if (*((_BYTE *)this + 212))
        {
          v52 = v31;
          v53 = (JSC::DFG::Node *)(((unint64_t)v31 << 32) | 0x80000000);
          *((_DWORD *)this[37] + 52) &= ~*((_DWORD *)this + 80);
          JSC::MacroAssemblerARM64::load8((uint64_t)this, v31 | 0x2800000000, *((char *)this + 304), v34, v35, v36, v37, v38);
          JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)6, (uint64_t)this, 1, 17, v54, v55, v56, v57, (uint64_t)v134, v58);
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x1DuLL, v53, a2, v134);
LABEL_24:
          JSC::MacroAssemblerARM64::load64((uint64_t)this, v52 | 0x1800000000, v28, v34, v35, v36, v37, v38);
          result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v59, v60, v61, v62, v63, v64);
          v66 = *((_DWORD *)a2 + 12);
          v67 = ~v66;
          if (v67 >= *((unsigned int *)this + 1001))
          {
            __break(0xC471u);
            JUMPOUT(0x197CB4808);
          }
          v68 = (uint64_t)this[499] + 24 * (int)v67;
          v69 = (char *)(this + 597);
          if ((int)v28 > 15)
            v70 = -1;
          else
            v70 = v28;
          v71 = &v69[12 * v70];
          *(_DWORD *)v71 = v66;
          *((_DWORD *)v71 + 1) = 4;
          v72 = *((_DWORD *)a2 + 13);
          *(_QWORD *)v68 = a2;
          *(_DWORD *)(v68 + 8) = v72;
          *(_BYTE *)(v68 + 17) = v28;
          *(_DWORD *)(v68 + 12) = 3;
          *(_BYTE *)(v68 + 16) = 0;
          if ((_DWORD)v28 != -1)
            --*(_DWORD *)&v69[12 * v70 + 8];
          goto LABEL_78;
        }
        __break(0xC471u);
LABEL_106:
        JUMPOUT(0x197CB4764);
      }
LABEL_52:
      v52 = v31;
      goto LABEL_24;
    }
  }
  else if ((*((_DWORD *)a2 + 18) & 0x40000000) == 0)
  {
    goto LABEL_6;
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v139, (JSC::DFG::SpeculativeJIT *)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v137, (JSC::DFG::SpeculativeJIT *)this, v82, v83, v84, v85, v86, v87);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v135, (JSC::DFG::SpeculativeJIT *)this, v88, v89, v90, v91, v92, v93);
  v102 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)&v139, v94, v95, v96, v97, v98, v99, v100);
  v103 = v136;
  v104 = *((unsigned __int16 *)a2 + 9);
  if (v104 == 264)
  {
    v105 = *((_DWORD *)a2 + 18);
  }
  else if (v104 == 146)
  {
    LOBYTE(v105) = *((_BYTE *)a2 + 80);
  }
  else
  {
    LOBYTE(v105) = *((_BYTE *)a2 + 72);
  }
  v106 = v138;
  if (v105 == 25)
  {
    v107 = 0;
    v108 = 0;
  }
  else
  {
    if (v104 == 146)
      v109 = *((_DWORD *)a2 + 20);
    else
      v109 = *((_DWORD *)a2 + 18);
    v107 = JSC::DFG::toTypedArrayType(v109);
    v108 = 256;
  }
  JSC::AssemblyHelpers::loadTypedArrayByteLengthImpl((uint64_t)this, v102, v103, v106, v103, v108 | v107, 0, v101);
  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v110, v111, v112, v113, v114, v115);
  v116 = *((_DWORD *)a2 + 12);
  v117 = ~v116;
  if (v117 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197CB4800);
  }
  v118 = (uint64_t)this[499] + 24 * (int)v117;
  if ((int)v103 > 15)
    v119 = -1;
  else
    v119 = v103;
  v120 = (char *)this + 12 * v119;
  *((_DWORD *)v120 + 1194) = v116;
  *((_DWORD *)v120 + 1195) = 4;
  v121 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v118 = a2;
  *(_DWORD *)(v118 + 8) = v121;
  *(_BYTE *)(v118 + 17) = v103;
  *(_DWORD *)(v118 + 12) = 3;
  *(_BYTE *)(v118 + 16) = 0;
  if (v135)
  {
    v122 = v136;
    if (v136 != -1)
    {
      if (v136 > 15)
        v122 = -1;
      --*(_DWORD *)(v135 + 12 * v122 + 4784);
    }
  }
  if (v137)
  {
    v123 = v138;
    if (v138 != -1)
    {
      if (v138 > 15)
        v123 = -1;
      --*(_DWORD *)(v137 + 12 * v123 + 4784);
    }
  }
LABEL_78:
  if ((v140 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v124 = v141;
    if (v141 > 15)
      v124 = -1;
    --*(_DWORD *)(v139 + 12 * v124 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileGetTypedArrayByteOffsetAsInt52(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  uint64_t v44;
  JSC::DFG::Node *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x8_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  char *v61;
  int v62;
  unsigned int v63;
  WTF *v64;
  int v65;
  unsigned int *v66;
  char v67;
  unint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 v103;
  char v104;
  uint64_t v105;
  int v106;
  int v107;
  char v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int i;
  unsigned int v126;
  unsigned int v127;
  char v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  uint64_t v147;
  unsigned int v148;
  char *v149;
  int v150;
  WTF *v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  unsigned __int8 v161;
  int v162[3];
  unsigned int v163[2];
  char v164;
  __int16 v165;
  char v166;
  WTF *v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  char v175;
  WTF *v176;
  uint64_t v177;
  char v178;

  if (*((_WORD *)a2 + 9) == 146)
  {
    if ((*((_DWORD *)a2 + 20) & 0x40000000) == 0)
    {
LABEL_3:
      JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v167, this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
      JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v176, this, v10, v11, v12, v13, v14, v15);
      v23 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)&v167, v16, v17, v18, v19, v20, v21, v22);
      v31 = (char)v177;
      v32 = *((_QWORD *)a2 + 3);
      v33 = *((_QWORD *)this + 688);
      v34 = *(unsigned int *)((v32 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v35 = (uint64_t *)(v33 + 24);
      v36 = (uint64_t *)(v33 + 8);
      if ((v32 & 1) != 0)
        v37 = v35;
      else
        v37 = v36;
      v38 = *v37;
      v39 = *v37 + 32 * v34;
      v40 = *((_DWORD *)this + 1396);
      v41 = *(_DWORD *)(v39 + 20);
      if (v40 != v41)
      {
        if ((*(_QWORD *)(v39 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v41 ^ v40) >= 2)
          {
            v68 = *(_QWORD *)v39;
            if (*(_QWORD *)v39 != 4)
            {
              *(_QWORD *)v39 = v68 | 2;
              v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v68 & 1) != 0)
              {
                v155 = 2 * *v69;
                while (v155 * 4)
                {
                  v156 = *(_QWORD *)&v69[v155];
                  if ((*(_BYTE *)(v156 + 19) & 0xC) == 0)
                  {
                    v157 = *(_QWORD *)(v156 + 96);
                    v158 = (v157 & 1) != 0 ? (v157 >> 1) & 3 : *(unsigned __int8 *)(v157 + 4);
                    v155 -= 2;
                    if (v158 != 2)
                      continue;
                  }
                  v161 = v23;
                  v159 = v34;
                  v160 = v38;
                  WTF::fastFree((unint64_t)v69, v24, v25, v26, v27, v28, v29, v30);
                  v38 = v160;
                  v34 = v159;
                  v23 = v161;
                  goto LABEL_116;
                }
              }
              else if (v69)
              {
                if ((*((_BYTE *)v69 + 19) & 0xC) != 0
                  || ((v70 = *((_QWORD *)v69 + 12), (v70 & 1) != 0)
                    ? (v71 = (v70 >> 1) & 3)
                    : (v71 = *(unsigned __int8 *)(v70 + 4)),
                      v71 == 2))
                {
LABEL_116:
                  *(_QWORD *)v39 = 4;
                }
              }
            }
            *(_DWORD *)(v38 + 32 * v34 + 16) = -21020677;
          }
          if ((v40 & 1) != 0)
            *(_QWORD *)v39 &= ~2uLL;
        }
        *(_DWORD *)(v39 + 20) = v40;
      }
      v42 = *(_QWORD *)v39;
      if ((*(_QWORD *)v39 & 2) != 0)
        goto LABEL_12;
      if (v42 <= 4 && ((1 << v42) & 0x15) != 0)
        goto LABEL_12;
      v66 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v42 & 1) != 0)
      {
        v72 = *v66;
        if (!(_DWORD)v72)
          goto LABEL_47;
        v73 = (uint64_t *)(v66 + 2);
        v67 = 1;
        do
        {
          v74 = *v73++;
          if (*(_BYTE *)(16 * *(unsigned int *)(v74 + 76) + 0xF4))
            v67 = 0;
          --v72;
        }
        while (v72);
      }
      else
      {
        if (!v66)
          goto LABEL_47;
        v67 = *(_BYTE *)(16 * v66[19] + 0xF4) ^ 1;
      }
      if (!v67)
      {
LABEL_12:
        if (*((_BYTE *)this + 212))
        {
          v44 = v23;
          v45 = (JSC::DFG::Node *)(((unint64_t)v23 << 32) | 0x80000000);
          *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
          JSC::MacroAssemblerARM64::load8((uint64_t)this, v23 | 0x2800000000, *((char *)this + 304), v26, v27, v28, v29, v30);
          JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)6, (uint64_t)this, 1, 17, v46, v47, v48, v49, (uint64_t)v162, v50);
          JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x1DuLL, v45, a2, v162);
          goto LABEL_14;
        }
        __break(0xC471u);
LABEL_120:
        JUMPOUT(0x197CB4F08);
      }
LABEL_47:
      v44 = v23;
LABEL_14:
      JSC::MacroAssemblerARM64::load64((uint64_t)this, v44 | 0x2000000000, v31, v26, v27, v28, v29, v30);
      JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v51, v52, v53, v54, v55, v56);
      v57 = *((_DWORD *)a2 + 12);
      v58 = ~v57;
      if (v58 >= *((unsigned int *)this + 1001))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB4F8CLL);
      }
      v59 = *((_QWORD *)this + 499) + 24 * (int)v58;
      if ((int)v31 > 15)
        v60 = -1;
      else
        v60 = v31;
      v61 = (char *)this + 12 * v60;
      *((_DWORD *)v61 + 1194) = v57;
      *((_DWORD *)v61 + 1195) = 4;
      v62 = *((_DWORD *)a2 + 13);
      *(_QWORD *)v59 = a2;
      *(_DWORD *)(v59 + 8) = v62;
      *(_BYTE *)(v59 + 17) = v31;
      *(_DWORD *)(v59 + 12) = 3;
      *(_BYTE *)(v59 + 16) = 0;
      if (v176)
      {
        v63 = (char)v177;
        if ((char)v177 != -1)
        {
          if ((char)v177 > 15)
            v63 = -1;
          --*((_DWORD *)v176 + 3 * v63 + 1196);
        }
      }
      if ((v168 & 0xFF00FFFFFFFFFFFFLL) != 0)
      {
        v64 = v167;
        v65 = v169;
LABEL_95:
        if (v65 > 15)
          v65 = -1;
        --*((_DWORD *)v64 + 3 * v65 + 1196);
        return;
      }
      return;
    }
  }
  else if ((*((_DWORD *)a2 + 18) & 0x40000000) == 0)
  {
    goto LABEL_3;
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)&v176, this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v174, this, v75, v76, v77, v78, v79, v80);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v172, this, v81, v82, v83, v84, v85, v86);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v170, this, v87, v88, v89, v90, v91, v92);
  v103 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)&v176, v93, v94, v95, v96, v97, v98, v99);
  v104 = v171;
  v105 = v171;
  v106 = *((unsigned __int16 *)a2 + 9);
  if (v106 == 264)
  {
    v107 = *((_DWORD *)a2 + 18);
  }
  else if (v106 == 146)
  {
    LOBYTE(v107) = *((_BYTE *)a2 + 80);
  }
  else
  {
    LOBYTE(v107) = *((_BYTE *)a2 + 72);
  }
  v108 = v175;
  v109 = v173;
  if (v107 == 25)
  {
    v110 = 0;
    v111 = 0;
  }
  else
  {
    if (v106 == 146)
      v112 = *((_DWORD *)a2 + 20);
    else
      v112 = *((_DWORD *)a2 + 18);
    v110 = JSC::DFG::toTypedArrayType(v112);
    v111 = 256;
  }
  JSC::AssemblyHelpers::branchIfResizableOrGrowableSharedTypedArrayIsOutOfBounds((uint64_t)this, v103, v108, v109, v111 | v110, v100, v101, v102, (uint64_t)&v167);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v103 | 0x2000000000, v105, v113, v114, v115, v116, v117);
  for (i = *((_DWORD *)this + 50); i < *((_DWORD *)this + 13); *((_DWORD *)this + 50) = i)
  {
    if ((i + 4) > *((_DWORD *)this + 48))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v118, v119, v120, v121, v122, v123, v124);
      i = *((_DWORD *)this + 50);
    }
    *(_DWORD *)(*((_QWORD *)this + 7) + i) = -721215457;
    i = *((_DWORD *)this + 50) + 4;
  }
  v126 = i;
  if ((i + 4) > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v118, v119, v120, v121, v122, v123, v124);
    v126 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v126) = 335544320;
  v127 = *((_DWORD *)this + 50) + 4;
  *((_DWORD *)this + 50) = v127;
  if (*((_BYTE *)this + 328))
    v128 = 69;
  else
    v128 = 65;
  v163[0] = i;
  v163[1] = 0;
  v164 = v128;
  v165 = 15;
  v166 = -1;
  if (HIDWORD(v168))
  {
    v129 = 0;
    v130 = 0;
    v131 = 12 * HIDWORD(v168);
    do
    {
      if (v130 >= HIDWORD(v168))
      {
        __break(0xC471u);
        JUMPOUT(0x197CB4F84);
      }
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v167 + v129), (uint64_t)this, v119, v120, v121, v122, v123, v124);
      ++v130;
      v129 += 12;
    }
    while (v131 != v129);
    v127 = *((_DWORD *)this + 50);
  }
  if (v127 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), v118, v119, v120, v121, v122, v123, v124);
    v127 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v127) = v104 & 0x1F | 0x52800000;
  *((_DWORD *)this + 50) += 4;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v163, (uint64_t)this, v119, v120, v121, v122, v123, v124);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v132, v133, v134, v135, v136, v137);
  v145 = *((_DWORD *)a2 + 12);
  v146 = ~v145;
  if (v146 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    goto LABEL_120;
  }
  v147 = *((_QWORD *)this + 499) + 24 * (int)v146;
  if ((int)v105 > 15)
    v148 = -1;
  else
    v148 = v105;
  v149 = (char *)this + 12 * v148;
  *((_DWORD *)v149 + 1194) = v145;
  *((_DWORD *)v149 + 1195) = 4;
  v150 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v147 = a2;
  *(_DWORD *)(v147 + 8) = v150;
  *(_BYTE *)(v147 + 17) = v105;
  *(_DWORD *)(v147 + 12) = 3;
  *(_BYTE *)(v147 + 16) = 0;
  v151 = v167;
  if (&v169 != (char *)v167 && v167)
  {
    v167 = 0;
    LODWORD(v168) = 0;
    WTF::fastFree((unint64_t)v151, v138, v139, v140, v141, v142, v143, v144);
  }
  if (v170)
  {
    v152 = v171;
    if (v171 != -1)
    {
      if (v171 > 15)
        v152 = -1;
      --*(_DWORD *)(v170 + 12 * v152 + 4784);
    }
  }
  if (v172)
  {
    v153 = v173;
    if (v173 != -1)
    {
      if (v173 > 15)
        v153 = -1;
      --*(_DWORD *)(v172 + 12 * v153 + 4784);
    }
  }
  if (v174)
  {
    v154 = v175;
    if (v175 != -1)
    {
      if (v175 > 15)
        v154 = -1;
      --*(_DWORD *)(v174 + 12 * v154 + 4784);
    }
  }
  if ((v177 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v64 = v176;
    v65 = v178;
    goto LABEL_95;
  }
}

#error "197CB4F98: too big function (funcsize=0)"

void JSC::DFG::SpeculativeJIT::convertAnyInt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  WTF *v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  WTF *v110;
  int v111;
  uint64_t v112;
  unsigned int v113[2];
  char v114;
  __int16 v115;
  char v116;
  unsigned int v117[3];
  _DWORD v118[3];
  WTF *v119;
  uint64_t v120;
  _BYTE v121[24];
  uint64_t v122;
  char v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  char v127;
  _QWORD v128[2];
  char v129;
  unsigned int v130;

  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v128, (JSC::DFG::SpeculativeJIT *)a1, a2, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v126, (JSC::DFG::SpeculativeJIT *)a1, v11, v12, v13, v14, v15, v16);
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v124, (JSC::DFG::SpeculativeJIT *)a1, v17, v18, v19, v20, v21, v22);
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v122, (JSC::DFG::SpeculativeJIT *)a1, v23, v24, v25, v26, v27, v28);
  v36 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v128, v29, v30, v31, v32, v33, v34, v35);
  v37 = v127;
  v38 = v125;
  v39 = v123;
  v119 = (WTF *)v121;
  v120 = 2;
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, v36, 27, v40, v41, v42, v43, (uint64_t)v118);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v119, v118, v44, v45, v46, v47, v48, v49);
  JSC::MacroAssemblerARM64::branch64(a1, 3, v36, 27, v50, v51, v52, v53, (uint64_t)v117);
  JSC::MacroAssemblerARM64::signExtend32ToPtr((_DWORD *)a1, v36, a3, v54, v55, v56, v57, v58);
  JSC::ARM64Assembler::label((_DWORD *)(a1 + 32), v59, v60, v61, v62, v63, v64, v65, (int *)&v130);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 56), 335544320, v66, v67, v68, v69, v70, v71);
  if (*(_BYTE *)(a1 + 328))
    v78 = 69;
  else
    v78 = 65;
  v113[0] = v130;
  v113[1] = 0;
  v114 = v78;
  v115 = 15;
  v116 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v117, a1, v72, v73, v74, v75, v76, v77);
  JSC::AssemblyHelpers::unboxDoubleWithoutAssertions((_DWORD *)a1, v36, a3, v38, 1, v79, v80, v81);
  JSC::AssemblyHelpers::branchConvertDoubleToInt52(a1, v38, a3, (uint64_t)&v119, v37, v39, v82, v83);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v113, a1, v84, v85, v86, v87, v88, v89);
  if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a2, 0x1300000000, v90, v91, v92, v93, v94))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::JumpList((uint64_t)&v110, (uint64_t *)&v119);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)v36 << 32) | 0x80000000), a2, 0x1300000000uLL, (unsigned int *)&v110, 1uLL, v102, v103);
    v104 = v110;
    if (&v112 != (uint64_t *)v110)
    {
      if (v110)
      {
        v110 = 0;
        v111 = 0;
        WTF::fastFree((unint64_t)v104, v95, v96, v97, v98, v99, v100, v101);
      }
    }
  }
  v105 = v119;
  if (v121 != (_BYTE *)v119 && v119)
  {
    v119 = 0;
    LODWORD(v120) = 0;
    WTF::fastFree((unint64_t)v105, v95, v96, v97, v98, v99, v100, v101);
  }
  if (v122)
  {
    v106 = v122 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v123];
    --*(_DWORD *)(v106 + 4976);
  }
  if (v124)
  {
    v107 = v124 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v125];
    --*(_DWORD *)(v107 + 4976);
  }
  if (v126)
  {
    v108 = v127;
    if (v127 != -1)
    {
      if (v127 > 15)
        v108 = -1;
      --*(_DWORD *)(v126 + 12 * v108 + 4784);
    }
  }
  if ((v128[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v109 = v129;
    if (v129 > 15)
      v109 = -1;
    --*(_DWORD *)(v128[0] + 12 * v109 + 4784);
  }
}

void JSC::AssemblyHelpers::branchConvertDoubleToInt52(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v12;
  JSC::AssemblerBuffer *v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  int i;
  unsigned int v65;
  char v66;
  int *v67;
  int *v68;
  int v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  WTF *v95;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  char v101;
  __int16 v102;
  char v103;
  int v104;
  uint64_t v105;
  unsigned int v106[3];
  int v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  _BYTE v111[24];

  v8 = a6;
  v12 = a2;
  v109 = (WTF *)v111;
  v110 = 2;
  v14 = (JSC::AssemblerBuffer *)(a1 + 56);
  v15 = *(_DWORD *)(a1 + 200);
  if (v15 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(a1 + 200);
  }
  v16 = a3 & 0x1F;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v15) = v16 | (32 * v12) | 0x9E780000;
  v17 = *(_DWORD *)(a1 + 200);
  v18 = v17 + 4;
  *(_DWORD *)(a1 + 200) = v17 + 4;
  if ((v17 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
  }
  v19 = 32 * v12;
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = v8 | (32 * v16) | 0x9E620000;
  v20 = *(_DWORD *)(a1 + 200);
  v21 = v20 + 4;
  *(_DWORD *)(a1 + 200) = v20 + 4;
  if ((v20 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, a2, a3, a4, a5, a6, a7, a8);
    v21 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v21) = v19 | (v8 << 16) | 0x1E602000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare(a1, 1, a3, a4, a5, a6, a7, a8, (uint64_t)&v107);
  v28 = v107;
  if (v107 != -1)
  {
    v29 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v29 == *(_DWORD *)(a4 + 8))
    {
      v30 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v29 + 1), (unint64_t)&v107, v22, v23, v24, v25, v26);
      v32 = *v30;
      v31 = (uint64_t *)(v30 + 1);
      v28 = v32;
      LODWORD(v29) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v31 = &v108;
    }
    v33 = *(_QWORD *)a4 + 12 * v29;
    *(_DWORD *)v33 = v28;
    *(_QWORD *)(v33 + 4) = *v31;
    ++*(_DWORD *)(a4 + 12);
  }
  JSC::MacroAssemblerARM64::branchTest64(a1, 0, a3, 0xFFFFFFFFLL, v23, v24, v25, v26, (uint64_t)v106, v27);
  v41 = *(_DWORD *)(a1 + 200);
  if (v41 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v34, v35, v36, v37, v38, v39, v40);
    v41 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v41) = a5 | 0xB24D33E0;
  v42 = *(_DWORD *)(a1 + 200);
  v43 = v42 + 4;
  *(_DWORD *)(a1 + 200) = v42 + 4;
  if ((_DWORD)a3 == 31)
  {
    v45 = a5 | ((a5 & 0x1F) << 16);
    v46 = -1960811552;
    goto LABEL_17;
  }
  v44 = v16 << 16;
  if ((_DWORD)a5 != 31)
  {
    v45 = v44 | (32 * (a5 & 0x1F));
    v46 = a5 & 0x1F | 0x8B000000;
LABEL_17:
    v47 = v45 | v46;
    goto LABEL_18;
  }
  v47 = v44 | 0x8B2063FF;
LABEL_18:
  if ((v42 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v34, v35, v36, v37, v38, v39, v40);
    v43 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v43) = v47;
  v48 = *(_DWORD *)(a1 + 200);
  v49 = v48 + 4;
  *(_DWORD *)(a1 + 200) = v48 + 4;
  v50 = a5 & 0x1F;
  if ((v48 + 8) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v34, v35, v36, v37, v38, v39, v40);
    v49 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v49) = v50 | (32 * v50) | 0xD374FC00;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branch64(a1, 9, a5, 4094, v37, v38, v39, v40, (uint64_t)&v104);
  v58 = v104;
  if (v104 != -1)
  {
    v59 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v59 == *(_DWORD *)(a4 + 8))
    {
      v60 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v59 + 1), (unint64_t)&v104, v53, v54, v55, v56, v57);
      v62 = *v60;
      v61 = (uint64_t *)(v60 + 1);
      v58 = v62;
      LODWORD(v59) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v61 = &v105;
    }
    v63 = *(_QWORD *)a4 + 12 * v59;
    *(_DWORD *)v63 = v58;
    *(_QWORD *)(v63 + 4) = *v61;
    ++*(_DWORD *)(a4 + 12);
  }
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v14, v51, v52, v53, v54, v55, v56, v57);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v65 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v51, v52, v53, v54, v55, v56, v57);
    v65 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v65) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v66 = 69;
  else
    v66 = 65;
  v99 = i;
  v100 = 0;
  v101 = v66;
  v102 = 15;
  v103 = -1;
  if (i != -1)
  {
    if (HIDWORD(v110) == (_DWORD)v110)
    {
      v67 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v109, (void *)(HIDWORD(v110) + 1), (unint64_t)&v99, v53, v54, v55, v56, v57);
      v69 = *v67;
      v68 = v67 + 1;
      v70 = (char *)v109 + 12 * HIDWORD(v110);
      *(_DWORD *)v70 = v69;
    }
    else
    {
      v68 = &v100;
      v70 = (char *)v109 + 12 * HIDWORD(v110);
      *(_DWORD *)v70 = i;
    }
    *(_QWORD *)(v70 + 4) = *(_QWORD *)v68;
    ++HIDWORD(v110);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v106, a1, v52, v53, v54, v55, v56, v57);
  v78 = *(_DWORD *)(a1 + 200);
  if (v78 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, v71, v72, v73, v74, v75, v76, v77);
    v78 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v78) = v19 | v50 | 0x9E660000;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::branchTest64((JSC::ARM64LogicalImmediate *)0x8000000000000000, a1, 1, a5, v74, v75, v76, v77, (uint64_t)&v97);
  v86 = v97;
  if (v97 != -1)
  {
    v87 = *(unsigned int *)(a4 + 12);
    if ((_DWORD)v87 == *(_DWORD *)(a4 + 8))
    {
      v88 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, (void *)(v87 + 1), (unint64_t)&v97, v81, v82, v83, v84, v85);
      v90 = *v88;
      v89 = (uint64_t *)(v88 + 1);
      v86 = v90;
      LODWORD(v87) = *(_DWORD *)(a4 + 12);
    }
    else
    {
      v89 = &v98;
    }
    v91 = *(_QWORD *)a4 + 12 * v87;
    *(_DWORD *)v91 = v86;
    *(_QWORD *)(v91 + 4) = *v89;
    ++*(_DWORD *)(a4 + 12);
  }
  if (HIDWORD(v110))
  {
    v92 = 0;
    v93 = 0;
    v94 = 12 * HIDWORD(v110);
    while (v93 < HIDWORD(v110))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v109 + v92), a1, v80, v81, v82, v83, v84, v85);
      ++v93;
      v92 += 12;
      if (v94 == v92)
        goto LABEL_49;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_49:
    v95 = v109;
    if (v111 != (_BYTE *)v109 && v109 != 0)
    {
      v109 = 0;
      LODWORD(v110) = 0;
      WTF::fastFree((unint64_t)v95, v79, v80, v81, v82, v83, v84, v85);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileStringCodePointAt(JSC::DFG::Node **this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::Node *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WTF *v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  _DWORD v185[3];
  _DWORD v186[3];
  _DWORD v187[3];
  _DWORD v188[2];
  char v189;
  __int16 v190;
  char v191;
  WTF *v192;
  uint64_t v193;
  _BYTE v194[24];
  unsigned int v195[3];
  int v196[3];
  uint64_t v197;
  unsigned __int8 v198;
  uint64_t v199;
  unsigned __int8 v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  unsigned __int8 v204;
  _QWORD v205[2];
  char v206;
  _QWORD v207[2];
  char v208;
  int v209;

  v8 = a2;
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v207, (JSC::DFG::SpeculativeJIT *)this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::SpeculateStrictInt32Operand::SpeculateStrictInt32Operand((uint64_t)v205, (uint64_t)this, *((_QWORD *)v8 + 4), 0, v10, v11, v12, v13);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v203, (JSC::DFG::SpeculativeJIT *)this, v14, v15, v16, v17, v18, v19);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v201, (JSC::DFG::SpeculativeJIT *)this, v20, v21, v22, v23, v24, v25);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v199, (JSC::DFG::SpeculativeJIT *)this, v26, v27, v28, v29, v30, v31);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v197, (JSC::DFG::SpeculativeJIT *)this, v32, v33, v34, v35, v36, v37);
  LOBYTE(v8) = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v207, v38, v39, v40, v41, v42, v43, v44);
  JSC::DFG::SpeculateStrictInt32Operand::gpr((JSC::DFG::SpeculateStrictInt32Operand *)v205, v45, v46, v47, v48, v49, v50, v51);
  v53 = v52;
  v54 = v204;
  v55 = v202;
  v56 = v200;
  v57 = v198;
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v8 | 0x800000000, (char)v204, v58, v59, v60, v61, v62);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v54 | 0x400000000, v55, v63, v64, v65, v66, v67);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, v53, v55, v68, v69, v70, v71, (uint64_t)v196);
  JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 0x16uLL, (JSC::DFG::Node *)0xFF80000000, 0, v196);
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v54 | 0x800000000, (char)v57, v72, v73, v74, v75, v76);
  JSC::MacroAssemblerARM64::branchTest32((uint64_t)this, 0, v54 | 0x1000000000, 4, v77, v78, v79, v80, (uint64_t)v195);
  v192 = (WTF *)v194;
  v193 = 2;
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v57 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v53 << 8), 0x200000000uLL, (char)v54, v81, v82, v83, v84);
  JSC::ARM64Assembler::label((_DWORD *)this + 8, v85, v86, v87, v88, v89, v90, v91, &v209);
  JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(this + 7), 335544320, v92, v93, v94, v95, v96, v97);
  if (*((_BYTE *)this + 328))
    v104 = 69;
  else
    v104 = 65;
  v188[0] = v209;
  v188[1] = 0;
  v189 = v104;
  v190 = 15;
  v191 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v192, v188, v98, v99, v100, v101, v102, v103);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v195, (uint64_t)this, v105, v106, v107, v108, v109, v110);
  JSC::MacroAssemblerARM64::load16((uint64_t)this, v57 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v53 << 8) | 0x100000000, 0x200000000uLL, (char)v54, v111, v112, v113, v114);
  JSC::MacroAssemblerARM64::add32((uint64_t)this, 1, v53, (char)v56, v115, v116, v117, v118);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 2, (char)v56, v55, v119, v120, v121, v122, (uint64_t)v187);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v192, v187, v123, v124, v125, v126, v127, v128);
  JSC::MacroAssemblerARM64::and32((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFC00, v54, v55);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, v55, 55296, v129, v130, v131, v132, (uint64_t)v186);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v192, v186, v133, v134, v135, v136, v137, v138);
  JSC::MacroAssemblerARM64::load16((uint64_t)this, v57 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)v56 << 8) | 0x100000000, 0x200000000uLL, (char)v56, v139, v140, v141, v142);
  JSC::MacroAssemblerARM64::and32((uint64_t)this, (JSC::ARM64LogicalImmediate *)0xFFFFFC00, v56, v55);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, v55, 56320, v143, v144, v145, v146, (uint64_t)v185);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::append(&v192, v185, v147, v148, v149, v150, v151, v152);
  JSC::MacroAssemblerARM64::lshift32(this, 10, (char)v54, v153, v154, v155, v156, v157);
  JSC::MacroAssemblerARM64::getEffectiveAddress(this, v54 | (v56 << 8), 0x2FCA02400, (char)v54, v158, v159, v160, v161);
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::link((unsigned int *)&v192, (uint64_t)this, v162, v163, v164, v165, v166, v167);
  JSC::DFG::SpeculativeJIT::strictInt32Result((uint64_t *)this, (char)v54, this[497], 1, 0, v168, v169, v170);
  v178 = v192;
  if (v194 != (_BYTE *)v192 && v192)
  {
    v192 = 0;
    LODWORD(v193) = 0;
    WTF::fastFree((unint64_t)v178, v171, v172, v173, v174, v175, v176, v177);
  }
  if (v197)
  {
    v179 = (char)v198;
    if ((char)v198 != -1)
    {
      if ((char)v198 > 15)
        v179 = -1;
      --*(_DWORD *)(v197 + 12 * v179 + 4784);
    }
  }
  if (v199)
  {
    v180 = (char)v200;
    if ((char)v200 != -1)
    {
      if ((char)v200 > 15)
        v180 = -1;
      --*(_DWORD *)(v199 + 12 * v180 + 4784);
    }
  }
  if (v201)
  {
    v181 = v202;
    if (v202 != -1)
    {
      if (v202 > 15)
        v181 = -1;
      --*(_DWORD *)(v201 + 12 * v181 + 4784);
    }
  }
  if (v203)
  {
    v182 = (char)v204;
    if ((char)v204 != -1)
    {
      if ((char)v204 > 15)
        v182 = -1;
      --*(_DWORD *)(v203 + 12 * v182 + 4784);
    }
  }
  v183 = v206;
  if (v206 > 15)
    v183 = -1;
  --*(_DWORD *)(v205[0] + 12 * v183 + 4784);
  if ((v207[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v184 = v208;
    if (v208 > 15)
      v184 = -1;
    --*(_DWORD *)(v207[0] + 12 * v184 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::compileGetByValWithThisMegamorphic(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  _DWORD *v87;
  uint64_t *v88;
  int v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  unsigned int v101;
  int *v102;
  int *v103;
  int v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int8x8_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  _DWORD *v118;
  uint64_t *v119;
  int v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int8x8_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  int *v134;
  int *v135;
  int v136;
  char *v137;
  void *v138;
  JSC::DFG::Node *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  WTF *v151;
  int v152;
  _BYTE *v153;
  WTF *v154;
  char *v155;
  unint64_t v156;
  unsigned int v158;
  _BYTE *v159;
  WTF *v160;
  WTF *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  _BYTE *v166;
  WTF *v167;
  WTF *v168;
  uint64_t v169;
  unsigned int v170;
  int v171;
  _BYTE *v172;
  WTF *v173;
  WTF *v174;
  unsigned int v175;
  int v176;
  _BYTE *v177;
  _BYTE *v178;
  _BYTE *v179;
  unsigned int v180;
  int v181;
  _BYTE *v182;
  _BYTE *v183;
  _BYTE *v184;
  void *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  WTF *v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t *v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned int v216;
  char *v217;
  int v218;
  unint64_t v219;
  uint64_t v220;
  int v221;
  WTF *v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int v234;
  unsigned __int8 v235;
  char v236;
  unsigned __int8 v237;
  WTF *v238;
  unsigned int v239;
  _BYTE v240[24];
  uint64_t v241;
  int v242;
  int v243;
  int v244;
  uint64_t v245;
  int v246;
  int v247;
  int v248;
  uint64_t v249;
  WTF *v250;
  uint64_t v251;
  _BYTE v252[24];
  uint64_t v253;
  unsigned __int8 v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  char v258;
  uint64_t v259;
  char v260;
  _QWORD v261[2];
  char v262;
  _QWORD v263[2];
  char v264;
  _QWORD v265[2];
  char v266;
  WTF *v267;
  unsigned int v268;
  unsigned int v269;
  _BYTE v270[24];
  _BYTE *v271;
  unsigned int v272;
  unsigned int v273;
  _BYTE v274[24];
  _BYTE *v275;
  unsigned int v276;
  unsigned int v277;
  _BYTE v278[24];
  _BYTE *v279;
  unsigned int v280;
  unsigned int v281;
  _BYTE v282[32];

  v10 = (_QWORD *)((char *)a2 + 24);
  v11 = (unint64_t *)((char *)a2 + 24);
  if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
  {
    v230 = *((_QWORD *)this + 495);
    if (*(_DWORD *)(v230 + 164) <= *v10)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCCDB0);
    }
    v11 = (unint64_t *)(*(_QWORD *)(v230 + 152) + 8 * *v10);
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v265, this, *v11, a4, a5, a6, a7, a8);
  if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
  {
    v231 = *((_QWORD *)this + 495);
    v232 = *(_DWORD *)v10 + 1;
    if (*(_DWORD *)(v231 + 164) <= v232)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCCDB8);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v231 + 152) + 8 * v232);
  }
  else
  {
    v17 = (uint64_t *)((char *)a2 + 32);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v263, this, *v17, v12, v13, v14, v15, v16);
  if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
  {
    v233 = *((_QWORD *)this + 495);
    v234 = *(_DWORD *)v10 + 2;
    if (*(_DWORD *)(v233 + 164) <= v234)
    {
      __break(0xC471u);
LABEL_171:
      JUMPOUT(0x197CCCD48);
    }
    v23 = (uint64_t *)(*(_QWORD *)(v233 + 152) + 8 * v234);
  }
  else
  {
    v23 = (uint64_t *)((char *)a2 + 40);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v261, this, *v23, v18, v19, v20, v21, v22);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v259, this, v24, v25, v26, v27, v28, v29);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v257, this, v30, v31, v32, v33, v34, v35);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v255, this, v36, v37, v38, v39, v40, v41);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v253, this, v42, v43, v44, v45, v46, v47);
  v55 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v265, v48, v49, v50, v51, v52, v53, v54);
  v63 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v261, v56, v57, v58, v59, v60, v61, v62);
  v236 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v263, v64, v65, v66, v67, v68, v69, v70);
  v71 = v260;
  v72 = v258;
  v73 = v256;
  v74 = v254;
  v250 = (WTF *)v252;
  v251 = 2;
  v237 = v63;
  JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v63, 1, v75, v76, v77, v78, v79, (uint64_t)&v248);
  v85 = v248;
  if (v248 != -1)
  {
    v86 = HIDWORD(v251);
    if (HIDWORD(v251) == (_DWORD)v251)
    {
      v87 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v250, (void *)(HIDWORD(v251) + 1), (unint64_t)&v248, v80, v81, v82, v83, v84);
      v89 = *v87;
      v88 = (uint64_t *)(v87 + 1);
      v85 = v89;
      v86 = HIDWORD(v251);
    }
    else
    {
      v88 = &v249;
    }
    v90 = (char *)v250 + 12 * v86;
    *(_DWORD *)v90 = v85;
    *(_QWORD *)(v90 + 4) = *v88;
    ++HIDWORD(v251);
  }
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    goto LABEL_171;
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load8((uint64_t)this, v63 | 0x500000000, *((char *)this + 304), v80, v81, v82, v83, v84);
  JSC::MacroAssemblerARM64::branch32((uint64_t)this, 1, 17, 2, v91, v92, v93, v94, (uint64_t)&v246);
  v100 = v246;
  if (v246 != -1)
  {
    v101 = HIDWORD(v251);
    if (HIDWORD(v251) == (_DWORD)v251)
    {
      v102 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v250, (void *)(HIDWORD(v251) + 1), (unint64_t)&v246, v95, v96, v97, v98, v99);
      v104 = *v102;
      v103 = v102 + 1;
      v100 = v104;
      v101 = HIDWORD(v251);
    }
    else
    {
      v103 = &v247;
    }
    v105 = (char *)v250 + 12 * v101;
    *(_DWORD *)v105 = v100;
    *(_QWORD *)(v105 + 4) = *(_QWORD *)v103;
    ++HIDWORD(v251);
  }
  JSC::MacroAssemblerARM64::load64((uint64_t)this, v63 | 0x800000000, (char)v74, v95, v96, v97, v98, v99);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)this, 1, (char)v74, 1, v106, v107, v108, v109, (uint64_t)&v244, v110);
  v116 = v244;
  if (v244 != -1)
  {
    v117 = HIDWORD(v251);
    if (HIDWORD(v251) == (_DWORD)v251)
    {
      v118 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v250, (void *)(HIDWORD(v251) + 1), (unint64_t)&v244, v111, v112, v113, v114, v115);
      v120 = *v118;
      v119 = (uint64_t *)(v118 + 1);
      v116 = v120;
      v117 = HIDWORD(v251);
    }
    else
    {
      v119 = &v245;
    }
    v121 = (char *)v250 + 12 * v117;
    *(_DWORD *)v121 = v116;
    *(_QWORD *)(v121 + 4) = *v119;
    ++HIDWORD(v251);
  }
  if (!*((_BYTE *)this + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CCCD68);
  }
  *(_DWORD *)(*((_QWORD *)this + 37) + 208) &= ~*((_DWORD *)this + 80);
  JSC::MacroAssemblerARM64::load32((uint64_t)this, v74 | 0x1000000000, *((char *)this + 304), v111, v112, v113, v114, v115);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x10, (uint64_t)this, 0, 17, v122, v123, v124, v125, (uint64_t)&v242, v126);
  v132 = v242;
  if (v242 != -1)
  {
    v133 = HIDWORD(v251);
    if (HIDWORD(v251) == (_DWORD)v251)
    {
      v134 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v250, (void *)(HIDWORD(v251) + 1), (unint64_t)&v242, v127, v128, v129, v130, v131);
      v136 = *v134;
      v135 = v134 + 1;
      v132 = v136;
      v133 = HIDWORD(v251);
    }
    else
    {
      v135 = &v243;
    }
    v137 = (char *)v250 + 12 * v133;
    *(_DWORD *)v137 = v132;
    *(_QWORD *)(v137 + 4) = *(_QWORD *)v135;
    ++HIDWORD(v251);
  }
  v235 = v55;
  JSC::AssemblyHelpers::loadMegamorphicProperty((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v55, (char)v74, 0, v73, v71, v72, (uint64_t)&v279, v73);
  v145 = (unint64_t)v279;
  v146 = v281;
  if (v281)
  {
    v147 = HIDWORD(v251);
    v148 = HIDWORD(v251) + (unint64_t)v281;
    if (v148 <= v251)
    {
LABEL_47:
      if (v148 < HIDWORD(v251))
      {
        __break(0xC471u);
        JUMPOUT(0x197CCCD78);
      }
      v155 = (char *)v250 + 12 * HIDWORD(v251);
      v156 = v145 + 12 * v146;
      do
      {
        *(_DWORD *)v155 = *(_DWORD *)v145;
        *(_QWORD *)(v155 + 4) = *(_QWORD *)(v145 + 4);
        v145 += 12;
        v155 += 12;
      }
      while (v145 != v156);
      HIDWORD(v251) = v148;
      v145 = (unint64_t)v279;
      goto LABEL_51;
    }
    v149 = v251 + ((unint64_t)v251 >> 2);
    if (v149 >= 0x10)
      v150 = v149 + 1;
    else
      v150 = 16;
    if (v150 <= v148)
      v150 = HIDWORD(v251) + (unint64_t)v281;
    v151 = v250;
    if (v150 < 3)
    {
      v250 = (WTF *)v252;
      LODWORD(v251) = 2;
      v153 = v252;
      if (!HIDWORD(v251))
        goto LABEL_42;
    }
    else
    {
      if (v150 >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197CCCDA8);
      }
      v152 = 12 * v150;
      v153 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v150));
      LODWORD(v251) = (v152 & 0xFFFFFFFC) / 0xC;
      v250 = (WTF *)v153;
      if (!v147)
        goto LABEL_42;
    }
    v154 = v151;
    do
    {
      *(_DWORD *)v153 = *(_DWORD *)v154;
      *(_QWORD *)(v153 + 4) = *(_QWORD *)((char *)v154 + 4);
      v154 = (WTF *)((char *)v154 + 12);
      v153 += 12;
    }
    while (v154 != (WTF *)((char *)v151 + 12 * v147));
LABEL_42:
    if (v252 != (_BYTE *)v151 && v151)
    {
      if (v250 == v151)
      {
        v250 = 0;
        LODWORD(v251) = 0;
      }
      WTF::fastFree((unint64_t)v151, v138, (uint64_t)v139, v140, v141, v142, v143, v144);
    }
    goto LABEL_47;
  }
LABEL_51:
  if (v282 != (_BYTE *)v145 && v145 != 0)
  {
    v279 = 0;
    v280 = 0;
    WTF::fastFree(v145, v138, (uint64_t)v139, v140, v141, v142, v143, v144);
  }
  v158 = HIDWORD(v251);
  v238 = (WTF *)v240;
  v239 = HIDWORD(v251);
  if (HIDWORD(v251) < 3)
  {
    v159 = v240;
    if (!HIDWORD(v251))
      goto LABEL_63;
    goto LABEL_61;
  }
  if (HIDWORD(v251) >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197CCCD80);
  }
  v159 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v251)));
  v238 = (WTF *)v159;
  v158 = HIDWORD(v251);
  if (HIDWORD(v251))
  {
LABEL_61:
    v160 = v250;
    v161 = (WTF *)((char *)v250 + 12 * v158);
    do
    {
      *(_DWORD *)v159 = *(_DWORD *)v160;
      *(_QWORD *)(v159 + 4) = *(_QWORD *)((char *)v160 + 4);
      v160 = (WTF *)((char *)v160 + 12);
      v159 += 12;
    }
    while (v160 != v161);
  }
LABEL_63:
  v162 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v139, v140, v141, v142, v143, v144);
  v164 = v163;
  v165 = v239;
  v267 = (WTF *)v270;
  v268 = 2;
  v269 = v239;
  if (v239 < 3)
  {
    v166 = v270;
    if (!v239)
      goto LABEL_69;
  }
  else
  {
    if (v239 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCCD88);
    }
    v166 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v239));
    v268 = 12 * v239 / 0xC;
    v267 = (WTF *)v166;
    v165 = v239;
  }
  v167 = v238;
  v168 = (WTF *)((char *)v238 + 12 * v165);
  do
  {
    *(_DWORD *)v166 = *(_DWORD *)v167;
    *(_QWORD *)(v166 + 4) = *(_QWORD *)((char *)v167 + 4);
    v167 = (WTF *)((char *)v167 + 12);
    v166 += 12;
  }
  while (v167 != v168);
LABEL_69:
  v169 = WTF::fastMalloc((WTF *)0xB8);
  v170 = v269;
  v271 = v274;
  v272 = 2;
  v273 = v269;
  if (v269 < 3)
  {
    v172 = v274;
  }
  else
  {
    if (v269 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCCD90);
    }
    v171 = 12 * v269;
    v172 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v269));
    v272 = (v171 & 0xFFFFFFFC) / 0xC;
    v271 = v172;
    v170 = v269;
  }
  if (v170)
  {
    v173 = v267;
    v174 = (WTF *)((char *)v267 + 12 * v170);
    do
    {
      *(_DWORD *)v172 = *(_DWORD *)v173;
      *(_QWORD *)(v172 + 4) = *(_QWORD *)((char *)v173 + 4);
      v173 = (WTF *)((char *)v173 + 12);
      v172 += 12;
    }
    while (v173 != v174);
  }
  v175 = v273;
  v275 = v278;
  v276 = 2;
  v277 = v273;
  if (v273 < 3)
  {
    v177 = v278;
  }
  else
  {
    if (v273 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCCD98);
    }
    v176 = 12 * v273;
    v177 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v273));
    v276 = (v176 & 0xFFFFFFFC) / 0xC;
    v275 = v177;
    v175 = v273;
  }
  if (v175)
  {
    v178 = v271;
    v179 = &v271[12 * v175];
    do
    {
      *(_DWORD *)v177 = *(_DWORD *)v178;
      *(_QWORD *)(v177 + 4) = *(_QWORD *)(v178 + 4);
      v178 += 12;
      v177 += 12;
    }
    while (v178 != v179);
  }
  v180 = v277;
  v279 = v282;
  v280 = 2;
  v281 = v277;
  if (v277 < 3)
  {
    v182 = v282;
    if (!v277)
      goto LABEL_90;
LABEL_88:
    v183 = v275;
    v184 = &v275[12 * v180];
    do
    {
      *(_DWORD *)v182 = *(_DWORD *)v183;
      *(_QWORD *)(v182 + 4) = *(_QWORD *)(v183 + 4);
      v183 += 12;
      v182 += 12;
    }
    while (v183 != v184);
    goto LABEL_90;
  }
  if (v277 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197CCCDA0);
  }
  v181 = 12 * v277;
  v182 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v277));
  v280 = (v181 & 0xFFFFFFFC) / 0xC;
  v279 = v182;
  v180 = v277;
  if (v277)
    goto LABEL_88;
LABEL_90:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v169, (uint64_t *)&v279, this);
  v192 = (unint64_t)v279;
  if (v282 != v279 && v279 != 0)
  {
    v279 = 0;
    v280 = 0;
    WTF::fastFree(v192, v185, v186, v187, v188, v189, v190, v191);
  }
  *(_QWORD *)v169 = off_1E3575190;
  *(_QWORD *)(v169 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v169 + 100) = 0;
  *(_BYTE *)(v169 + 102) = v73;
  *(_QWORD *)(v169 + 104) = v169 + 120;
  *(_QWORD *)(v169 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v169 + 104, v73, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v190, v191);
  v201 = (unint64_t)v275;
  if (v278 != v275 && v275)
  {
    v275 = 0;
    v276 = 0;
    WTF::fastFree(v201, v194, v195, v196, v197, v198, v199, v200);
  }
  *(_QWORD *)v169 = &off_1E3575160;
  *(_QWORD *)(v169 + 152) = operationGetByValWithThisMegamorphicGeneric;
  *(_QWORD *)(v169 + 160) = v162;
  *(_QWORD *)(v169 + 168) = v164;
  *(_BYTE *)(v169 + 176) = v235;
  *(_BYTE *)(v169 + 177) = v237;
  *(_BYTE *)(v169 + 178) = v236;
  v241 = v169;
  v202 = (unint64_t)v271;
  if (v274 != v271 && v271)
  {
    v271 = 0;
    v272 = 0;
    WTF::fastFree(v202, v194, v195, v196, v197, v198, v199, v200);
  }
  v203 = v267;
  if (v270 != (_BYTE *)v267 && v267)
  {
    v267 = 0;
    v268 = 0;
    WTF::fastFree((unint64_t)v203, v194, v195, v196, v197, v198, v199, v200);
  }
  v204 = (_QWORD *)((char *)this + 5656);
  v205 = *((unsigned int *)this + 1417);
  if ((_DWORD)v205 == *((_DWORD *)this + 1416))
  {
    v207 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v204, v205 + 1, (unint64_t)&v241);
    v205 = *((unsigned int *)this + 1417);
    v206 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v205);
    v169 = *v207;
  }
  else
  {
    v206 = (uint64_t *)(*v204 + 8 * v205);
    v207 = &v241;
  }
  *v207 = 0;
  *v206 = v169;
  *((_DWORD *)this + 1417) = v205 + 1;
  v208 = v241;
  v241 = 0;
  if (v208)
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
  if (v240 != (_BYTE *)v238 && v238)
    WTF::fastFree((unint64_t)v238, v194, v195, v196, v197, v198, v199, v200);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v195, v196, v197, v198, v199, v200);
  if ((int)v73 > 15)
    v216 = -1;
  else
    v216 = v73;
  v217 = (char *)this + 12 * v216;
  v218 = *((_DWORD *)a2 + 12);
  *((_DWORD *)v217 + 1194) = v218;
  *((_DWORD *)v217 + 1195) = 4;
  v219 = ~v218;
  if (v219 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
    JUMPOUT(0x197CCCD70);
  }
  v220 = *((_QWORD *)this + 499) + 24 * (int)v219;
  v221 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v220 = a2;
  *(_DWORD *)(v220 + 8) = v221;
  *(_BYTE *)(v220 + 17) = v73;
  *(_DWORD *)(v220 + 12) = 16;
  *(_BYTE *)(v220 + 16) = 0;
  v222 = v250;
  if (v252 != (_BYTE *)v250 && v250)
  {
    v250 = 0;
    LODWORD(v251) = 0;
    WTF::fastFree((unint64_t)v222, v209, v210, v211, v212, v213, v214, v215);
  }
  if (v253)
  {
    v223 = (char)v254;
    if ((char)v254 != -1)
    {
      if ((char)v254 > 15)
        v223 = -1;
      --*(_DWORD *)(v253 + 12 * v223 + 4784);
    }
  }
  if (v255)
  {
    v224 = v256;
    if (v256 != -1)
    {
      if (v256 > 15)
        v224 = -1;
      --*(_DWORD *)(v255 + 12 * v224 + 4784);
    }
  }
  if (v257)
  {
    v225 = v258;
    if (v258 != -1)
    {
      if (v258 > 15)
        v225 = -1;
      --*(_DWORD *)(v257 + 12 * v225 + 4784);
    }
  }
  if (v259)
  {
    v226 = v260;
    if (v260 != -1)
    {
      if (v260 > 15)
        v226 = -1;
      --*(_DWORD *)(v259 + 12 * v226 + 4784);
    }
  }
  if ((v261[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v227 = v262;
    if (v262 > 15)
      v227 = -1;
    --*(_DWORD *)(v261[0] + 12 * v227 + 4784);
  }
  if ((v263[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v228 = v264;
    if (v264 > 15)
      v228 = -1;
    --*(_DWORD *)(v263[0] + 12 * v228 + 4784);
  }
  if ((v265[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v229 = v266;
    if (v266 > 15)
      v229 = -1;
    --*(_DWORD *)(v265[0] + 12 * v229 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_3::operator()(uint64_t a1, uint64_t a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::DFG::JITCompiler::LinkableConstant *v9;
  JSC::AssemblerBuffer *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  JSC::AssemblerBuffer *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint8x8_t v36;
  __int32 v37;
  uint8x8_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  char v49;
  char v50;
  uint64_t v51;
  unsigned __int8 *v52;
  JSC::AssemblerBuffer *v53;
  uint64_t v54;
  _BYTE *v55;
  int v56;
  unsigned __int8 *v57;
  char *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  unsigned __int8 *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint8x8_t v82;
  __int32 v83;
  uint8x8_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v94;
  char v95;
  char v96;
  uint64_t v97;
  unsigned __int8 *v98;
  JSC::AssemblerBuffer *v99;
  uint64_t v100;
  _BYTE *v101;
  int v102;
  unsigned __int8 *v103;
  char *v104;
  unsigned __int8 *v105;
  uint64_t v106;
  int v107;
  unsigned __int8 *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  int64_t v124;
  int64_t v125;
  char *v126;
  char *v127;
  JSC::AssemblerBuffer *v128;
  JSC::AssemblerBuffer *v129;
  void *__dst;
  uint64_t v131;
  _WORD v132[4];

  v9 = *(JSC::DFG::JITCompiler::LinkableConstant **)a1;
  v17 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(*(JSC::DFG::JITCompiler::LinkableConstant **)a1, **(JSC::DFG::JITCompiler ***)(a1 + 8), a3, a4, a5, a6, a7, a8);
  v18 = v10;
  switch(*(_WORD *)(**(_QWORD **)(a1 + 8) + 18))
  {
    case 0xCA:
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *,void *,void *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&__dst, (unsigned __int8 *)v9, (uint64_t)operationAtomicsAdd, **(char **)(a1 + 16), v17, (uint64_t)v10, **(char **)(a1 + 24), **(char **)(a1 + 32), **(_BYTE **)(a1 + 40));
      return;
    case 0xCB:
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *,void *,void *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&__dst, (unsigned __int8 *)v9, (uint64_t)operationAtomicsAnd, **(char **)(a1 + 16), v17, (uint64_t)v10, **(char **)(a1 + 24), **(char **)(a1 + 32), **(_BYTE **)(a1 + 40));
      return;
    case 0xCC:
      v23 = **(unsigned __int8 **)(a1 + 16);
      v24 = **(unsigned __int8 **)(a1 + 24);
      v25 = *(unsigned __int8 **)(a1 + 40);
      v26 = **(unsigned __int8 **)(a1 + 32);
      v27 = *v25;
      v28 = v25[1];
      __dst = v132;
      v131 = 4;
      if (v24 == 1)
      {
        v29 = 0;
      }
      else
      {
        v132[0] = v24 | 0x100;
        v29 = 1;
        HIDWORD(v131) = 1;
      }
      if (v26 != 2)
      {
        v132[v29++] = v26 | 0x200;
        HIDWORD(v131) = v29;
      }
      if (v27 != 3)
      {
        v132[v29++] = v27 | 0x300;
        HIDWORD(v131) = v29;
      }
      if (v28 == 4)
      {
        if (!v29)
          goto LABEL_141;
      }
      else
      {
        v132[v29++] = v28 | 0x400;
        HIDWORD(v131) = v29;
      }
      while (1)
      {
        v76 = 0;
        v77 = 0;
        v78 = (char *)__dst;
        v79 = v29;
        do
        {
          if ((*((_BYTE *)__dst + v76 + 1) & 0x40) != 0)
            goto LABEL_150;
          v77 |= 1 << *((_BYTE *)__dst + v76 + 1);
          v76 += 2;
        }
        while (2 * v29 != v76);
        v80 = 0;
        do
        {
          v81 = *((_BYTE *)__dst + v80) & 0x7F;
          if (v81 >= 0x40)
            goto LABEL_150;
          v77 &= ~(1 << v81);
          v80 += 2;
        }
        while (2 * v29 != v80);
        v82 = (uint8x8_t)vcnt_s8((int8x8_t)v77);
        v82.i16[0] = vaddlv_u8(v82);
        v83 = v82.i32[0];
        v84 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v77));
        v84.i16[0] = vaddlv_u8(v84);
        if (!(v84.i32[0] + v83))
        {
          v95 = *(_BYTE *)__dst;
          v96 = *((_BYTE *)__dst + 1);
          JSC::MacroAssemblerARM64::swap((uint64_t)v9, *(char *)__dst, v96, v12, v13, v14, v15, v16);
          memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v131) - 2);
          v97 = (HIDWORD(v131) - 1);
          v47 = HIDWORD(v131) == 1;
          HIDWORD(v131) = v97;
          v98 = (unsigned __int8 *)__dst;
          v99 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v97);
          if (v47)
          {
            v106 = 0;
            v107 = 0;
            v102 = 0;
            v10 = v99;
          }
          else
          {
            v100 = 2 * v97;
            v101 = __dst;
            while (*v101 != v96)
            {
              v101 += 2;
              v100 -= 2;
              if (!v100)
                goto LABEL_113;
            }
            *v101 = v95;
LABEL_113:
            v102 = 0;
            v103 = v98;
            v10 = v99;
            v104 = (char *)v99;
            do
            {
              if (*v98 == v98[1])
              {
                v105 = v98;
                if (v104 != (char *)__dst + 2 * HIDWORD(v131))
                {
                  v129 = v99;
                  if (v98 == (unsigned __int8 *)v10)
                  {
                    v105 = (unsigned __int8 *)v104;
                  }
                  else
                  {
                    v125 = v103 - (unsigned __int8 *)v10;
                    v127 = v104;
                    memmove(v104, v10, v103 - (unsigned __int8 *)v10);
                    v105 = (unsigned __int8 *)&v127[v125];
                  }
                  v99 = v129;
                }
                v10 = (JSC::AssemblerBuffer *)(v98 + 2);
                ++v102;
                v104 = (char *)v105;
              }
              v98 += 2;
              v103 += 2;
            }
            while (v98 < (unsigned __int8 *)v99);
            v98 = (unsigned __int8 *)__dst;
            v106 = HIDWORD(v131);
            v107 = HIDWORD(v131);
            v99 = (JSC::AssemblerBuffer *)v104;
          }
          v108 = &v98[2 * v106];
          if (v10 != (JSC::AssemblerBuffer *)v108)
          {
            memmove(v99, v10, v108 - (unsigned __int8 *)v10);
            v107 = HIDWORD(v131);
          }
          v29 = v107 - v102;
          goto LABEL_133;
        }
        v85 = 0;
        v86 = v29 <= 1 ? 1 : v29;
        v87 = 2 * v86;
        while (1)
        {
          v88 = *((unsigned __int8 *)__dst + v85 + 1);
          if ((v88 & 0x7Fu) >= 0x40)
            goto LABEL_150;
          if (((v77 >> (v88 & 0x7F)) & 1) != 0)
            break;
          v85 += 2;
          if (v87 == v85)
            goto LABEL_134;
        }
        v89 = *((unsigned __int8 *)__dst + v85);
        if (v89 != v88)
          break;
LABEL_132:
        memmove(&v78[v85], &v78[v85 + 2], 2 * v79 - v85 - 2);
        v29 = HIDWORD(v131) - 1;
LABEL_133:
        HIDWORD(v131) = v29;
LABEL_134:
        if (!v29)
        {
          v109 = __dst;
          if (v132 != __dst && __dst)
          {
            __dst = 0;
            LODWORD(v131) = 0;
            WTF::fastFree((unint64_t)v109, v10, v11, v12, v13, v14, v15, v16);
          }
LABEL_141:
          if ((_DWORD)v17 == -1)
            JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v9, (uint64_t)v18, 0, v12, v13, v14, v15, v16);
          else
            JSC::MacroAssemblerARM64::load64((uint64_t)v9, (v17 << 35) + 0x380000001ALL, 0, v12, v13, v14, v15, v16);
          JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, (uint64_t)operationAtomicsCompareExchange, v110, v111, v112, v113, v114, v115, (int *)&__dst);
          JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v9, 1, v116, v117, v118, v119, v120, v121);
          if (v23)
          {
            if (v23 == 31)
            {
LABEL_147:
              LODWORD(v17) = -1862270945;
            }
            else
            {
              if (v23 != 255)
              {
                LODWORD(v17) = v23 | 0xAA0003E0;
                goto LABEL_148;
              }
LABEL_154:
              LODWORD(v17) = -1442774017;
            }
LABEL_148:
            v123 = *((_DWORD *)v9 + 50);
            v9 = (JSC::DFG::JITCompiler::LinkableConstant *)((char *)v9 + 200);
            v122 = v123;
            v18 = (JSC::DFG::JITCompiler::LinkableConstant *)((char *)v9 - 144);
            if (v123 + 4 > *((_DWORD *)v9 - 2))
            {
LABEL_151:
              JSC::AssemblerBuffer::outOfLineGrow(v18, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
              v122 = *(_DWORD *)v9;
            }
            *(_DWORD *)(*(_QWORD *)v18 + v122) = v17;
            *(_DWORD *)v9 += 4;
          }
          return;
        }
      }
      v90 = (char)v89;
      if ((char)v89 == 63)
      {
        v91 = *((_DWORD *)v9 + 50);
        v92 = *((_DWORD *)v9 + 48);
        if ((char)v88 != 31)
        {
          v94 = v88 & 0x1F | 0xD2800000;
          goto LABEL_129;
        }
      }
      else
      {
        v91 = *((_DWORD *)v9 + 50);
        v92 = *((_DWORD *)v9 + 48);
        if (v88 != 31 && v90 != 31)
        {
          v94 = v88 & 0xFFE0FFFF | ((v90 & 0x1F) << 16) | 0xAA0003E0;
LABEL_129:
          if (v91 + 4 > v92)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::JITCompiler::LinkableConstant *)((char *)v9 + 56), (uint64_t)v10, v11, v12, v13, v14, v15, v16);
            v91 = *((_DWORD *)v9 + 50);
          }
          *(_DWORD *)(*((_QWORD *)v9 + 7) + v91) = v94;
          *((_DWORD *)v9 + 50) += 4;
          v78 = (char *)__dst;
          v79 = HIDWORD(v131);
          goto LABEL_132;
        }
      }
      v94 = (char)v88 | (32 * v90) | 0x91000000;
      goto LABEL_129;
    case 0xCD:
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *,void *,void *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&__dst, (unsigned __int8 *)v9, (uint64_t)operationAtomicsExchange, **(char **)(a1 + 16), v17, (uint64_t)v10, **(char **)(a1 + 24), **(char **)(a1 + 32), **(_BYTE **)(a1 + 40));
      return;
    case 0xCF:
      v19 = **(unsigned __int8 **)(a1 + 16);
      v20 = **(unsigned __int8 **)(a1 + 24);
      v21 = **(unsigned __int8 **)(a1 + 32);
      __dst = v132;
      LODWORD(v131) = 2;
      if (v20 == 1)
      {
        if (v21 == 2)
          goto LABEL_72;
        v22 = 0;
      }
      else
      {
        v132[0] = v20 | 0x100;
        v22 = 1;
        HIDWORD(v131) = 1;
        if (v21 == 2)
          goto LABEL_18;
      }
      v132[v22++] = v21 | 0x200;
      HIDWORD(v131) = v22;
      break;
    case 0xD0:
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *,void *,void *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&__dst, (unsigned __int8 *)v9, (uint64_t)operationAtomicsOr, **(char **)(a1 + 16), v17, (uint64_t)v10, **(char **)(a1 + 24), **(char **)(a1 + 32), **(_BYTE **)(a1 + 40));
      return;
    case 0xD1:
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *,void *,void *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&__dst, (unsigned __int8 *)v9, (uint64_t)operationAtomicsStore, **(char **)(a1 + 16), v17, (uint64_t)v10, **(char **)(a1 + 24), **(char **)(a1 + 32), **(_BYTE **)(a1 + 40));
      return;
    case 0xD2:
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *,void *,void *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&__dst, (unsigned __int8 *)v9, (uint64_t)operationAtomicsSub, **(char **)(a1 + 16), v17, (uint64_t)v10, **(char **)(a1 + 24), **(char **)(a1 + 32), **(_BYTE **)(a1 + 40));
      return;
    case 0xD3:
      JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,void *,void *,void *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>((int *)&__dst, (unsigned __int8 *)v9, (uint64_t)operationAtomicsXor, **(char **)(a1 + 16), v17, (uint64_t)v10, **(char **)(a1 + 24), **(char **)(a1 + 32), **(_BYTE **)(a1 + 40));
      return;
    default:
      __break(0xC471u);
      JUMPOUT(0x197CCD81CLL);
  }
  do
  {
LABEL_18:
    v30 = 0;
    v31 = 0;
    v32 = (char *)__dst;
    v33 = v22;
    do
    {
      if ((*((_BYTE *)__dst + v30 + 1) & 0x40) != 0)
      {
LABEL_150:
        __break(1u);
        goto LABEL_151;
      }
      v31 |= 1 << *((_BYTE *)__dst + v30 + 1);
      v30 += 2;
    }
    while (2 * v22 != v30);
    v34 = 0;
    do
    {
      v35 = *((_BYTE *)__dst + v34) & 0x7F;
      if (v35 >= 0x40)
        goto LABEL_150;
      v31 &= ~(1 << v35);
      v34 += 2;
    }
    while (2 * v22 != v34);
    v36 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
    v36.i16[0] = vaddlv_u8(v36);
    v37 = v36.i32[0];
    v38 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v31));
    v38.i16[0] = vaddlv_u8(v38);
    if (v38.i32[0] + v37)
    {
      v39 = 0;
      if (v22 <= 1)
        v40 = 1;
      else
        v40 = v22;
      v41 = 2 * v40;
      while (1)
      {
        v42 = *((unsigned __int8 *)__dst + v39 + 1);
        if ((v42 & 0x7Fu) >= 0x40)
          goto LABEL_150;
        if (((v31 >> (v42 & 0x7F)) & 1) != 0)
          break;
        v39 += 2;
        if (v41 == v39)
          goto LABEL_68;
      }
      v43 = *((unsigned __int8 *)__dst + v39);
      if (v43 == v42)
        goto LABEL_66;
      v44 = (char)v43;
      if ((char)v43 == 63)
      {
        v45 = *((_DWORD *)v9 + 50);
        v46 = *((_DWORD *)v9 + 48);
        if ((char)v42 != 31)
        {
          v48 = v42 & 0x1F | 0xD2800000;
          goto LABEL_63;
        }
      }
      else
      {
        v45 = *((_DWORD *)v9 + 50);
        v46 = *((_DWORD *)v9 + 48);
        v47 = v42 == 31 || v44 == 31;
        if (!v47)
        {
          v48 = v42 & 0xFFE0FFFF | ((v44 & 0x1F) << 16) | 0xAA0003E0;
LABEL_63:
          if (v45 + 4 > v46)
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::JITCompiler::LinkableConstant *)((char *)v9 + 56), (uint64_t)v10, v11, v12, v13, v14, v15, v16);
            v45 = *((_DWORD *)v9 + 50);
          }
          *(_DWORD *)(*((_QWORD *)v9 + 7) + v45) = v48;
          *((_DWORD *)v9 + 50) += 4;
          v32 = (char *)__dst;
          v33 = HIDWORD(v131);
LABEL_66:
          memmove(&v32[v39], &v32[v39 + 2], 2 * v33 - v39 - 2);
          v22 = HIDWORD(v131) - 1;
          goto LABEL_67;
        }
      }
      v48 = (char)v42 | (32 * v44) | 0x91000000;
      goto LABEL_63;
    }
    v49 = *(_BYTE *)__dst;
    v50 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap((uint64_t)v9, *(char *)__dst, v50, v12, v13, v14, v15, v16);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v131) - 2);
    v51 = (HIDWORD(v131) - 1);
    v47 = HIDWORD(v131) == 1;
    HIDWORD(v131) = v51;
    v52 = (unsigned __int8 *)__dst;
    v53 = (JSC::AssemblerBuffer *)((char *)__dst + 2 * v51);
    if (v47)
    {
      v60 = 0;
      v61 = 0;
      v56 = 0;
      v10 = v53;
    }
    else
    {
      v54 = 2 * v51;
      v55 = __dst;
      while (*v55 != v50)
      {
        v55 += 2;
        v54 -= 2;
        if (!v54)
          goto LABEL_46;
      }
      *v55 = v49;
LABEL_46:
      v56 = 0;
      v57 = v52;
      v10 = v53;
      v58 = (char *)v53;
      do
      {
        if (*v52 == v52[1])
        {
          v59 = v52;
          if (v58 != (char *)__dst + 2 * HIDWORD(v131))
          {
            v128 = v53;
            if (v52 == (unsigned __int8 *)v10)
            {
              v59 = (unsigned __int8 *)v58;
            }
            else
            {
              v124 = v57 - (unsigned __int8 *)v10;
              v126 = v58;
              memmove(v58, v10, v57 - (unsigned __int8 *)v10);
              v59 = (unsigned __int8 *)&v126[v124];
            }
            v53 = v128;
          }
          v10 = (JSC::AssemblerBuffer *)(v52 + 2);
          ++v56;
          v58 = (char *)v59;
        }
        v52 += 2;
        v57 += 2;
      }
      while (v52 < (unsigned __int8 *)v53);
      v52 = (unsigned __int8 *)__dst;
      v60 = HIDWORD(v131);
      v61 = HIDWORD(v131);
      v53 = (JSC::AssemblerBuffer *)v58;
    }
    v62 = &v52[2 * v60];
    if (v10 != (JSC::AssemblerBuffer *)v62)
    {
      memmove(v53, v10, v62 - (unsigned __int8 *)v10);
      v61 = HIDWORD(v131);
    }
    v22 = v61 - v56;
LABEL_67:
    HIDWORD(v131) = v22;
LABEL_68:
    ;
  }
  while (v22);
  v63 = __dst;
  if (v132 != __dst && __dst)
  {
    __dst = 0;
    LODWORD(v131) = 0;
    WTF::fastFree((unint64_t)v63, v10, v11, v12, v13, v14, v15, v16);
  }
LABEL_72:
  if ((_DWORD)v17 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(v9, (uint64_t)v18, 0, v12, v13, v14, v15, v16);
  else
    JSC::MacroAssemblerARM64::load64((uint64_t)v9, (v17 << 35) + 0x380000001ALL, 0, v12, v13, v14, v15, v16);
  JSC::DFG::SpeculativeJIT::appendCall((uint64_t)v9, (uint64_t)operationAtomicsLoad, v64, v65, v66, v67, v68, v69, (int *)&__dst);
  JSC::DFG::SpeculativeJIT::exceptionCheck((uint64_t)v9, 1, v70, v71, v72, v73, v74, v75);
  if (v19)
  {
    if (v19 == 31)
      goto LABEL_147;
    if (v19 != 255)
    {
      LODWORD(v17) = v19 | 0xAA0003E0;
      goto LABEL_148;
    }
    goto LABEL_154;
  }
}

uint64_t std::optional<JSC::DFG::FPRTemporary>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,void>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  uint64_t v17;
  char v18;

  if (*(_BYTE *)(result + 16))
  {
    if (*(_QWORD *)result)
    {
      v8 = *(_QWORD *)result
         + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*(char *)(result + 8)];
      --*(_DWORD *)(v8 + 4976);
    }
    *(_BYTE *)(result + 16) = 0;
  }
  v9 = 0;
  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = -1;
  v10 = (_DWORD *)(a2 + 4976);
  v11 = 0x17u;
  v12 = -1;
  while (*v10)
  {
LABEL_10:
    ++v9;
    v10 += 3;
    if (v9 == 23)
    {
      v9 = v11;
      v14 = (unsigned int *)(a2 + 4968 + 12 * v11);
      v15 = *v14;
      *(_QWORD *)v14 = 0xFFFFFFFF3FFFFFFFLL;
      v10 = v14 + 2;
      goto LABEL_13;
    }
  }
  v13 = *(v10 - 1);
  if (v13 != -1)
  {
    if (v13 < v12)
    {
      v11 = v9;
      v12 = *(v10 - 1);
    }
    goto LABEL_10;
  }
  v15 = *(v10 - 2);
  *((_QWORD *)v10 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_13:
  *v10 = 1;
  v16 = JSC::FPRInfo::toRegister::registerForIndex[v9];
  if (v15 != 0x3FFFFFFF)
  {
    v18 = v16;
    v17 = result;
    JSC::DFG::SpeculativeJIT::spill(a2, v15, a3, a4, a5, a6, a7, a8);
    v16 = v18;
    result = v17;
  }
  *(_BYTE *)(result + 8) = v16;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void JSC::MacroAssemblerARM64::nop(JSC::MacroAssemblerARM64 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = *((_DWORD *)this + 50);
  if (v9 + 4 > *((_DWORD *)this + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::MacroAssemblerARM64 *)((char *)this + 56), a2, a3, a4, a5, a6, a7, a8);
    v9 = *((_DWORD *)this + 50);
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + v9) = -721215457;
  *((_DWORD *)this + 50) += 4;
}

void JSC::MacroAssemblerARM64::add32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  if ((_DWORD)a2 == 31)
  {
    v12 = a3 | ((a3 & 0x1F) << 16) | 0xB2063E0;
LABEL_7:
    JSC::AssemblerBuffer::putInt((JSC::AssemblerBuffer *)(a1 + 14), v12, a3, a4, a5, a6, a7, a8);
    return;
  }
  v9 = (a2 & 0x1F) << 16;
  if ((_DWORD)a3 == 31)
  {
    v12 = v9 | 0xB2063FFu;
    goto LABEL_7;
  }
  v10 = v9 | (32 * (a3 & 0x1F)) | a3 & 0x1F | 0xB000000;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = v10;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::and32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = ((v9 & 0x1F) << 16) | (32 * (v8 & 0x1F)) | v8 & 0x1F | 0xA000000;
  a1[50] += 4;
}

{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0xA000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::or32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = ((v9 & 0x1F) << 16) | (32 * (v8 & 0x1F)) | v8 & 0x1F | 0x2A000000;
  a1[50] += 4;
}

{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x2A000000;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::sub32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v13;

  v8 = (a2 & 0x1F) << 16;
  if ((_DWORD)a3 == 31)
  {
    v9 = 1260413951;
  }
  else
  {
    v8 |= 32 * (a3 & 0x1F);
    v9 = a3 & 0x1F | 0x4B000000;
  }
  v10 = v8 | v9;
  v12 = a1 + 50;
  v11 = a1[50];
  v13 = a1 + 14;
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = *v12;
  }
  *(_DWORD *)(*v13 + v11) = v10;
  *v12 += 4;
}

void JSC::MacroAssemblerARM64::xor32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  unsigned int v11;

  v8 = a3;
  v9 = a2;
  v11 = a1[50];
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v11) = ((v9 & 0x1F) << 16) | (32 * (v8 & 0x1F)) | v8 & 0x1F | 0x4A000000;
  a1[50] += 4;
}

{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x4A000000;
  a1[50] += 4;
}

uint64_t JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList::operator=(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v11 = a1 + 16;
  v10 = *(_QWORD *)a1;
  if (v10 != v11)
  {
    if (v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    *(_QWORD *)a1 = v11;
  }
  v12 = *(_QWORD *)a2;
  if (*(_DWORD **)a2 == a2 + 4)
  {
    v14 = a2[3];
    if (v14)
    {
      v15 = v12 + 12 * v14;
      do
      {
        *(_DWORD *)v11 = *(_DWORD *)v12;
        *(_QWORD *)(v11 + 4) = *(_QWORD *)(v12 + 4);
        v12 += 12;
        v11 += 12;
      }
      while (v12 != v15);
    }
    v13 = a2[2];
  }
  else
  {
    *(_QWORD *)a2 = a2 + 4;
    *(_QWORD *)a1 = v12;
    v13 = a2[2];
    a2[2] = 2;
  }
  *(_DWORD *)(a1 + 8) = v13;
  v16 = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v16;
  return a1;
}

void JSC::MacroAssemblerARM64::store64(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v11;

  v10 = a1;
  if (!a2)
  {
    v11 = 63;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a1 + 212))
  {
    JSC::MacroAssemblerARM64::moveToCachedReg((_DWORD *)a1, a2, a1 + 264, a4, a5, a6, a7, a8);
    a1 = v10;
    v11 = 16;
LABEL_5:
    JSC::MacroAssemblerARM64::store64(a1, v11, a3, a4, a5, a6, a7, a8);
    return;
  }
  __break(0xC471u);
}

void JSC::DFG::slowPathMove<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,JSC::ARM64Registers::RegisterID,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm64>(uint64_t *a1, int *a2, _DWORD *a3, char a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  JSC::AssemblerBuffer *v20;
  JSC::AssemblerBuffer *v21;

  v8 = WTF::fastMalloc((WTF *)0x50);
  v9 = *a2;
  v10 = *(_QWORD *)(a2 + 1);
  v11 = JSC::DFG::SlowPathGenerator::SlowPathGenerator(v8, (JSC::DFG::SpeculativeJIT *)a3);
  *(_QWORD *)v11 = off_1E35746F0;
  *(_DWORD *)(v11 + 48) = v9;
  *(_QWORD *)(v11 + 52) = v10;
  v19 = a3[50];
  *(_DWORD *)(v11 + 60) = v19;
  if (v19 < a3[13])
  {
    v20 = (JSC::AssemblerBuffer *)(a3 + 14);
    do
    {
      if ((v19 + 4) > a3[48])
      {
        v21 = v20;
        JSC::AssemblerBuffer::outOfLineGrow(v20, v12, v13, v14, v15, v16, v17, v18);
        v20 = v21;
        v19 = a3[50];
      }
      *(_DWORD *)(*((_QWORD *)a3 + 7) + v19) = -721215457;
      v19 = a3[50] + 4;
      a3[50] = v19;
      *(_DWORD *)(v8 + 60) = v19;
    }
    while (v19 < a3[13]);
  }
  a3[52] = 0;
  *(_QWORD *)v8 = &off_1E3574E10;
  *(_BYTE *)(v8 + 64) = a4;
  *(_QWORD *)(v8 + 72) = 10;
  *a1 = v8;
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::JSGlobalObject *,JSC::JSArray *),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID>(uint64_t *a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  WTF *v20;
  WTF *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  _BYTE *v25;
  WTF *v26;
  WTF *v27;
  unsigned int v28;
  int v29;
  _BYTE *v30;
  WTF *v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v53;
  unsigned int v54;
  _BYTE v55[24];
  WTF *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[24];
  WTF *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[24];
  _BYTE *v64;
  unsigned int v65;
  unsigned int v66;
  _BYTE v67[32];

  v13 = *((unsigned int *)a2 + 3);
  v53 = (WTF *)v55;
  v54 = v13;
  if (v13 < 3)
  {
    v14 = v55;
    if (!(_DWORD)v13)
      goto LABEL_8;
  }
  else
  {
    if (v13 >= 0x15555556)
      goto LABEL_47;
    v14 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v13));
    v53 = (WTF *)v14;
    LODWORD(v13) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v13)
      goto LABEL_8;
  }
  v15 = *a2;
  v16 = *a2 + 12 * v13;
  do
  {
    *(_DWORD *)v14 = *(_DWORD *)v15;
    *(_QWORD *)(v14 + 4) = *(_QWORD *)(v15 + 4);
    v15 += 12;
    v14 += 12;
  }
  while (v15 != v16);
LABEL_8:
  v17 = WTF::fastMalloc((WTF *)0xB8);
  v18 = v54;
  v56 = (WTF *)v59;
  v57 = 2;
  v58 = v54;
  if (v54 < 3)
  {
    v19 = v59;
  }
  else
  {
    if (v54 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCE34CLL);
    }
    v19 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v54));
    v57 = 12 * v54 / 0xC;
    v56 = (WTF *)v19;
    v18 = v54;
  }
  if (v18)
  {
    v20 = v53;
    v21 = (WTF *)((char *)v53 + 12 * v18);
    do
    {
      *(_DWORD *)v19 = *(_DWORD *)v20;
      *(_QWORD *)(v19 + 4) = *(_QWORD *)((char *)v20 + 4);
      v20 = (WTF *)((char *)v20 + 12);
      v19 += 12;
    }
    while (v20 != v21);
  }
  v22 = v58;
  v60 = (WTF *)v63;
  v61 = 2;
  v62 = v58;
  v51 = a5;
  if (v58 < 3)
  {
    v23 = a6;
    v25 = v63;
  }
  else
  {
    if (v58 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCE354);
    }
    v23 = a6;
    v24 = 12 * v58;
    v25 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v58));
    v61 = (v24 & 0xFFFFFFFC) / 0xC;
    v60 = (WTF *)v25;
    v22 = v58;
  }
  if (v22)
  {
    v26 = v56;
    v27 = (WTF *)((char *)v56 + 12 * v22);
    do
    {
      *(_DWORD *)v25 = *(_DWORD *)v26;
      *(_QWORD *)(v25 + 4) = *(_QWORD *)((char *)v26 + 4);
      v26 = (WTF *)((char *)v26 + 12);
      v25 += 12;
    }
    while (v26 != v27);
  }
  v28 = v62;
  v64 = v67;
  v65 = 2;
  v66 = v62;
  if (v62 < 3)
  {
    v30 = v67;
    if (!v62)
      goto LABEL_29;
LABEL_27:
    v31 = v60;
    v32 = (WTF *)((char *)v60 + 12 * v28);
    do
    {
      *(_DWORD *)v30 = *(_DWORD *)v31;
      *(_QWORD *)(v30 + 4) = *(_QWORD *)((char *)v31 + 4);
      v31 = (WTF *)((char *)v31 + 12);
      v30 += 12;
    }
    while (v31 != v32);
    goto LABEL_29;
  }
  if (v62 >= 0x15555556)
  {
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x197CCE344);
  }
  v29 = 12 * v62;
  v30 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v62));
  v65 = (v29 & 0xFFFFFFFC) / 0xC;
  v64 = v30;
  v28 = v62;
  if (v62)
    goto LABEL_27;
LABEL_29:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v17, (uint64_t *)&v64, a3);
  v40 = (unint64_t)v64;
  if (v67 != v64 && v64 != 0)
  {
    v64 = 0;
    v65 = 0;
    WTF::fastFree(v40, v33, v34, v35, v36, v37, v38, v39);
  }
  *(_QWORD *)v17 = off_1E3574ED0;
  *(_QWORD *)(v17 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v17 + 100) = 0;
  *(_BYTE *)(v17 + 102) = a4;
  *(_QWORD *)(v17 + 104) = v17 + 120;
  *(_QWORD *)(v17 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)a3, 0, v17 + 104, a4, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v38, v39);
  v49 = v60;
  if (v63 != (_BYTE *)v60 && v60)
  {
    v60 = 0;
    v61 = 0;
    WTF::fastFree((unint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
  }
  *(_QWORD *)v17 = &off_1E3574EA0;
  *(_QWORD *)(v17 + 152) = operationArrayPop;
  *(_QWORD *)(v17 + 160) = v51;
  *(_QWORD *)(v17 + 168) = v23;
  *(_BYTE *)(v17 + 176) = a7;
  *a1 = v17;
  v50 = v56;
  if (v59 != (_BYTE *)v56 && v56)
  {
    v56 = 0;
    v57 = 0;
    WTF::fastFree((unint64_t)v50, v42, v43, v44, v45, v46, v47, v48);
  }
  if (v55 != (_BYTE *)v53)
  {
    if (v53)
      WTF::fastFree((unint64_t)v53, v42, v43, v44, v45, v46, v47, v48);
  }
}

uint64_t *JSC::DFG::SpeculativeJIT::compileFunctionBind(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  JSC::DFG::Node *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::ARM64LogicalImmediate *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *result;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  _BYTE v124[8];
  uint64_t v125;
  char v126;
  _QWORD v127[2];
  char v128;
  _QWORD v129[2];
  char v130;
  _QWORD v131[2];
  char v132;
  _QWORD v133[2];
  char v134;
  _QWORD v135[2];
  char v136;

  v10 = (uint64_t *)((char *)a2 + 56);
  v11 = (uint64_t *)((char *)a2 + 24);
  v12 = (unint64_t *)((char *)a2 + 24);
  if ((*((_BYTE *)a2 + 56) & 0x10) != 0)
  {
    v114 = *((_QWORD *)this + 495);
    if (*(_DWORD *)(v114 + 164) <= *v11)
    {
      __break(0xC471u);
      goto LABEL_54;
    }
    v12 = (unint64_t *)(*(_QWORD *)(v114 + 152) + 8 * *v11);
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v135, this, *v12, a4, a5, a6, a7, a8);
  if ((*(_BYTE *)v10 & 0x10) != 0)
  {
    v115 = *((_QWORD *)this + 495);
    v116 = *(_DWORD *)v11 + 1;
    if (*(_DWORD *)(v115 + 164) <= v116)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCE700);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v115 + 152) + 8 * v116);
  }
  else
  {
    v18 = (uint64_t *)((char *)a2 + 32);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v133, this, *v18, v13, v14, v15, v16, v17);
  if ((*(_BYTE *)v10 & 0x10) != 0)
  {
    v117 = *((_QWORD *)this + 495);
    v118 = *(_DWORD *)v11 + 2;
    if (*(_DWORD *)(v117 + 164) <= v118)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCE708);
    }
    v24 = (uint64_t *)(*(_QWORD *)(v117 + 152) + 8 * v118);
  }
  else
  {
    v24 = (uint64_t *)((char *)a2 + 40);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v131, this, *v24, v19, v20, v21, v22, v23);
  if ((*(_BYTE *)v10 & 0x10) != 0)
  {
    v119 = *((_QWORD *)this + 495);
    v120 = *(_DWORD *)v11 + 3;
    if (*(_DWORD *)(v119 + 164) <= v120)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCE710);
    }
    v30 = (uint64_t *)(*(_QWORD *)(v119 + 152) + 8 * v120);
  }
  else
  {
    v30 = (uint64_t *)((char *)a2 + 48);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v129, this, *v30, v25, v26, v27, v28, v29);
  v36 = v10;
  if ((*(_BYTE *)v10 & 0x10) != 0)
  {
    v121 = *((_QWORD *)this + 495);
    v122 = *(_DWORD *)v11 + 4;
    if (*(_DWORD *)(v121 + 164) <= v122)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCE718);
    }
    v36 = (uint64_t *)(*(_QWORD *)(v121 + 152) + 8 * v122);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v127, this, *v36, v31, v32, v33, v34, v35);
  v44 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v135, v37, v38, v39, v40, v41, v42, v43);
  v52 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v133, v45, v46, v47, v48, v49, v50, v51);
  v60 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v131, v53, v54, v55, v56, v57, v58, v59);
  v68 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v129, v61, v62, v63, v64, v65, v66, v67);
  v81 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v127, v69, v70, v71, v72, v73, v74, v75);
  if ((*(_BYTE *)v10 & 0x10) != 0)
  {
    v123 = *((_QWORD *)this + 495);
    if (*(_DWORD *)(v123 + 164) > *v11)
    {
      v11 = (uint64_t *)(*(_QWORD *)(v123 + 152) + 8 * *v11);
      goto LABEL_10;
    }
    __break(0xC471u);
LABEL_54:
    JUMPOUT(0x197CCE6F8);
  }
LABEL_10:
  JSC::DFG::SpeculativeJIT::speculateObject((uint64_t)this, *v11, v44, v76, v77, v78, v79, v80);
  JSC::DFG::GPRTemporary::GPRTemporary((uint64_t)&v125, this, 0, v82, v83, v84, v85, v86);
  v87 = v126;
  JSC::DFG::SpeculativeJIT::flushRegisters(this, v88, v89, v90, v91, v92, v93, v94);
  v101 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v95, v96, v97, v98, v99, v100);
  JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSBoundFunction *> (*)(JSC::JSGlobalObject *,JSC::JSObject *,long long,long long,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs>((unint64_t)v124, (uint64_t)this, v87, v101, v102, v44, v52, v60, v68, v81);
  result = JSC::DFG::SpeculativeJIT::cellResult((uint64_t *)this, v87, a2, 0, v103, v104, v105, v106);
  if (v125)
  {
    v108 = v126;
    if (v126 != -1)
    {
      if (v126 > 15)
        v108 = -1;
      --*(_DWORD *)(v125 + 12 * v108 + 4784);
    }
  }
  if ((v127[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v109 = v128;
    if (v128 > 15)
      v109 = -1;
    --*(_DWORD *)(v127[0] + 12 * v109 + 4784);
  }
  if ((v129[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v110 = v130;
    if (v130 > 15)
      v110 = -1;
    --*(_DWORD *)(v129[0] + 12 * v110 + 4784);
  }
  if ((v131[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v111 = v132;
    if (v132 > 15)
      v111 = -1;
    --*(_DWORD *)(v131[0] + 12 * v111 + 4784);
  }
  if ((v133[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v112 = v134;
    if (v134 > 15)
      v112 = -1;
    --*(_DWORD *)(v133[0] + 12 * v112 + 4784);
  }
  if ((v135[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v113 = v136;
    if (v136 > 15)
      v113 = -1;
    --*(_DWORD *)(v135[0] + 12 * v113 + 4784);
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compileGetByIdWithThisMegamorphic(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  JSC::DFG::Node *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _BYTE *v61;
  WTF *v62;
  WTF *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _BYTE *v67;
  WTF *v68;
  WTF *v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  _BYTE *v73;
  WTF *v74;
  WTF *v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  _BYTE *v79;
  _BYTE *v80;
  _BYTE *v81;
  unsigned int v82;
  int v83;
  _BYTE *v84;
  _BYTE *v85;
  _BYTE *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  WTF *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  char *v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  WTF *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  unsigned int v133;
  _BYTE v134[24];
  uint64_t v135;
  WTF *v136;
  int v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  char v145;
  _QWORD v146[2];
  char v147;
  _QWORD v148[2];
  char v149;
  WTF *v150;
  unsigned int v151;
  unsigned int v152;
  _BYTE v153[24];
  _BYTE *v154;
  unsigned int v155;
  unsigned int v156;
  _BYTE v157[24];
  _BYTE *v158;
  unsigned int v159;
  unsigned int v160;
  _BYTE v161[24];
  _BYTE *v162;
  unsigned int v163;
  unsigned int v164;
  _BYTE v165[32];

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v148, this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v146, this, *((_QWORD *)a2 + 4), v10, v11, v12, v13, v14);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v144, this, v15, v16, v17, v18, v19, v20);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v142, this, v21, v22, v23, v24, v25, v26);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v140, this, v27, v28, v29, v30, v31, v32);
  v40 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v148, v33, v34, v35, v36, v37, v38, v39);
  v48 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v146, v41, v42, v43, v44, v45, v46, v47);
  v49 = v145;
  v50 = v143;
  v51 = v141;
  v52 = JSC::DFG::Node::cacheableIdentifier(a2);
  if (v52)
  {
    if ((v52 & 1) != 0)
      v53 = (WTF::StringImpl *)(v52 & 0xFFFFFFFFFFFFFFFELL);
    else
      v53 = *(WTF::StringImpl **)(v52 + 8);
  }
  else
  {
    v53 = 0;
  }
  JSC::AssemblyHelpers::loadMegamorphicProperty((uint64_t)this, *(_QWORD *)(*((_QWORD *)this + 44) + 16), v40, 0xFFFFFFFFLL, v53, v51, v49, v50, (uint64_t)&v136, v51);
  v60 = v138;
  v132 = (WTF *)v134;
  v133 = v138;
  if (v138 < 3)
  {
    v61 = v134;
    if (!v138)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (v138 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197CCEE7CLL);
  }
  v61 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v138));
  v132 = (WTF *)v61;
  v60 = v138;
  if (v138)
  {
LABEL_9:
    v62 = v136;
    v63 = (WTF *)((char *)v136 + 12 * v60);
    do
    {
      *(_DWORD *)v61 = *(_DWORD *)v62;
      *(_QWORD *)(v61 + 4) = *(_QWORD *)((char *)v62 + 4);
      v62 = (WTF *)((char *)v62 + 12);
      v61 += 12;
    }
    while (v62 != v63);
  }
LABEL_11:
  v64 = JSC::DFG::JITCompiler::LinkableConstant::globalObject(this, a2, v54, v55, v56, v57, v58, v59);
  v131 = v65;
  v130 = JSC::DFG::Node::cacheableIdentifier(a2);
  v66 = v133;
  v150 = (WTF *)v153;
  v151 = 2;
  v152 = v133;
  if (v133 < 3)
  {
    v67 = v153;
  }
  else
  {
    if (v133 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCEE84);
    }
    v67 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v133));
    v151 = 12 * v133 / 0xC;
    v150 = (WTF *)v67;
    v66 = v133;
  }
  if (v66)
  {
    v68 = v132;
    v69 = (WTF *)((char *)v132 + 12 * v66);
    do
    {
      *(_DWORD *)v67 = *(_DWORD *)v68;
      *(_QWORD *)(v67 + 4) = *(_QWORD *)((char *)v68 + 4);
      v68 = (WTF *)((char *)v68 + 12);
      v67 += 12;
    }
    while (v68 != v69);
  }
  v70 = WTF::fastMalloc((WTF *)0xC0);
  v71 = v152;
  v154 = v157;
  v155 = 2;
  v156 = v152;
  if (v152 < 3)
  {
    v73 = v157;
  }
  else
  {
    if (v152 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCEE8CLL);
    }
    v72 = 12 * v152;
    v73 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v152));
    v155 = (v72 & 0xFFFFFFFC) / 0xC;
    v154 = v73;
    v71 = v152;
  }
  if (v71)
  {
    v74 = v150;
    v75 = (WTF *)((char *)v150 + 12 * v71);
    do
    {
      *(_DWORD *)v73 = *(_DWORD *)v74;
      *(_QWORD *)(v73 + 4) = *(_QWORD *)((char *)v74 + 4);
      v74 = (WTF *)((char *)v74 + 12);
      v73 += 12;
    }
    while (v74 != v75);
  }
  v76 = v156;
  v158 = v161;
  v159 = 2;
  v160 = v156;
  if (v156 < 3)
  {
    v77 = v64;
    v79 = v161;
  }
  else
  {
    if (v156 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CCEE94);
    }
    v77 = v64;
    v78 = 12 * v156;
    v79 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v156));
    v159 = (v78 & 0xFFFFFFFC) / 0xC;
    v158 = v79;
    v76 = v156;
  }
  if (v76)
  {
    v80 = v154;
    v81 = &v154[12 * v76];
    do
    {
      *(_DWORD *)v79 = *(_DWORD *)v80;
      *(_QWORD *)(v79 + 4) = *(_QWORD *)(v80 + 4);
      v80 += 12;
      v79 += 12;
    }
    while (v80 != v81);
  }
  v82 = v160;
  v162 = v165;
  v163 = 2;
  v164 = v160;
  if (v160 >= 3)
  {
    if (v160 >= 0x15555556)
      goto LABEL_99;
    v83 = 12 * v160;
    v84 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v160));
    v163 = (v83 & 0xFFFFFFFC) / 0xC;
    v162 = v84;
    v82 = v160;
    if (!v160)
      goto LABEL_39;
    goto LABEL_37;
  }
  v84 = v165;
  if (v160)
  {
LABEL_37:
    v85 = v158;
    v86 = &v158[12 * v82];
    do
    {
      *(_DWORD *)v84 = *(_DWORD *)v85;
      *(_QWORD *)(v84 + 4) = *(_QWORD *)(v85 + 4);
      v85 += 12;
      v84 += 12;
    }
    while (v85 != v86);
  }
LABEL_39:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v70, (uint64_t *)&v162, this);
  v94 = (unint64_t)v162;
  if (v165 != v162 && v162 != 0)
  {
    v162 = 0;
    v163 = 0;
    WTF::fastFree(v94, v87, v88, v89, v90, v91, v92, v93);
  }
  *(_QWORD *)v70 = off_1E35750D0;
  *(_QWORD *)(v70 + 92) = 0xFFFFFFFFLL;
  *(_WORD *)(v70 + 100) = 0;
  *(_BYTE *)(v70 + 102) = v51;
  *(_QWORD *)(v70 + 104) = v70 + 120;
  *(_QWORD *)(v70 + 112) = 2;
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)this, 0, v70 + 104, v51, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v92, v93);
  v103 = (unint64_t)v158;
  if (v161 != v158 && v158)
  {
    v158 = 0;
    v159 = 0;
    WTF::fastFree(v103, v96, v97, v98, v99, v100, v101, v102);
  }
  *(_QWORD *)v70 = &off_1E35750A0;
  *(_QWORD *)(v70 + 152) = operationGetByIdWithThisMegamorphicGeneric;
  *(_QWORD *)(v70 + 160) = v77;
  *(_QWORD *)(v70 + 168) = v131;
  *(_BYTE *)(v70 + 176) = v40;
  *(_BYTE *)(v70 + 177) = v48;
  *(_QWORD *)(v70 + 184) = v130;
  v135 = v70;
  v104 = (unint64_t)v154;
  if (v157 != v154 && v154)
  {
    v154 = 0;
    v155 = 0;
    WTF::fastFree(v104, v96, v97, v98, v99, v100, v101, v102);
  }
  v105 = v150;
  if (v153 != (_BYTE *)v150 && v150)
  {
    v150 = 0;
    v151 = 0;
    WTF::fastFree((unint64_t)v105, v96, v97, v98, v99, v100, v101, v102);
  }
  v106 = (_QWORD *)((char *)this + 5656);
  v107 = *((unsigned int *)this + 1417);
  if ((_DWORD)v107 == *((_DWORD *)this + 1416))
  {
    v109 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v107 + 1, (unint64_t)&v135);
    v107 = *((unsigned int *)this + 1417);
    v108 = (uint64_t *)(*((_QWORD *)this + 707) + 8 * v107);
    v70 = *v109;
  }
  else
  {
    v108 = (uint64_t *)(*v106 + 8 * v107);
    v109 = &v135;
  }
  *v109 = 0;
  *v108 = v70;
  *((_DWORD *)this + 1417) = v107 + 1;
  v110 = v135;
  v135 = 0;
  if (v110)
    (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
  if (v134 != (_BYTE *)v132 && v132)
    WTF::fastFree((unint64_t)v132, v96, v97, v98, v99, v100, v101, v102);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)this, a2, v97, v98, v99, v100, v101, v102);
  if ((int)v51 > 15)
    v118 = -1;
  else
    v118 = v51;
  v119 = (char *)this + 12 * v118;
  v120 = *((_DWORD *)a2 + 12);
  *((_DWORD *)v119 + 1194) = v120;
  *((_DWORD *)v119 + 1195) = 4;
  v121 = ~v120;
  if (v121 >= *((unsigned int *)this + 1001))
  {
LABEL_99:
    __break(0xC471u);
    JUMPOUT(0x197CCEE74);
  }
  v122 = *((_QWORD *)this + 499) + 24 * (int)v121;
  v123 = *((_DWORD *)a2 + 13);
  *(_QWORD *)v122 = a2;
  *(_DWORD *)(v122 + 8) = v123;
  *(_BYTE *)(v122 + 17) = v51;
  *(_DWORD *)(v122 + 12) = 16;
  *(_BYTE *)(v122 + 16) = 0;
  v124 = v136;
  if (&v139 != (uint64_t *)v136 && v136)
  {
    v136 = 0;
    v137 = 0;
    WTF::fastFree((unint64_t)v124, v111, v112, v113, v114, v115, v116, v117);
  }
  if (v140)
  {
    v125 = v141;
    if (v141 != -1)
    {
      if (v141 > 15)
        v125 = -1;
      --*(_DWORD *)(v140 + 12 * v125 + 4784);
    }
  }
  if (v142)
  {
    v126 = v143;
    if (v143 != -1)
    {
      if (v143 > 15)
        v126 = -1;
      --*(_DWORD *)(v142 + 12 * v126 + 4784);
    }
  }
  if (v144)
  {
    v127 = v145;
    if (v145 != -1)
    {
      if (v145 > 15)
        v127 = -1;
      --*(_DWORD *)(v144 + 12 * v127 + 4784);
    }
  }
  if ((v146[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v128 = v147;
    if (v147 > 15)
      v128 = -1;
    --*(_DWORD *)(v146[0] + 12 * v128 + 4784);
  }
  if ((v148[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v129 = v149;
    if (v149 > 15)
      v129 = -1;
    --*(_DWORD *)(v148[0] + 12 * v129 + 4784);
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<void> (*)(JSC::JSGlobalObject *,long long,long long,long long,long long),JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, JSC::ARM64LogicalImmediate *this, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v12;
  unsigned int v14;
  JSC::AssemblerBuffer *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  __int32 v22;
  uint8x8_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unsigned __int8 v34;
  char v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  __int16 *v40;
  int v41;
  char *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int64_t v61;
  unsigned __int8 *v62;
  JSC::AssemblerBuffer *v63;
  unsigned int v64;
  unsigned int v65;
  __int16 v66;
  _BYTE v67[6];

  v12 = (uint64_t)a2;
  v64 = 0;
  if ((_DWORD)a6 == 1)
  {
    v14 = 0;
  }
  else
  {
    v66 = a6 | 0x100;
    v14 = 1;
    v64 = 1;
  }
  if ((_DWORD)a7 != 2)
  {
    *(_WORD *)&v67[2 * v14++ - 2] = a7 | 0x200;
    v64 = v14;
  }
  if ((_DWORD)a8 != 3)
  {
    *(_WORD *)&v67[2 * v14++ - 2] = a8 | 0x300;
    v64 = v14;
  }
  if (a9 == 4)
  {
    if (!v14)
      goto LABEL_64;
  }
  else
  {
    *(_WORD *)&v67[2 * v14++ - 2] = a9 | 0x400;
    v64 = v14;
  }
  v15 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    v16 = 0;
    v17 = 0;
    v18 = v14;
    do
    {
      if ((v67[v16 - 1] & 0x40) != 0)
      {
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      v17 |= 1 << v67[v16 - 1];
      v16 += 2;
    }
    while (2 * v14 != v16);
    v19 = 0;
    do
    {
      v20 = v67[v19 - 2] & 0x7F;
      if (v20 >= 0x40)
        goto LABEL_67;
      v17 &= ~(1 << v20);
      v19 += 2;
    }
    while (2 * v14 != v19);
    v21 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
    v21.i16[0] = vaddlv_u8(v21);
    v22 = v21.i32[0];
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.i32[0] + v22)
    {
      v24 = 0;
      if (v14 <= 1)
        v25 = 1;
      else
        v25 = v14;
      v26 = 2 * v25;
      while (1)
      {
        v27 = v67[v24 - 1];
        if ((v27 & 0x7Fu) >= 0x40)
          goto LABEL_67;
        if (((v17 >> (v27 & 0x7F)) & 1) != 0)
          break;
        v24 += 2;
        if (v26 == v24)
          goto LABEL_60;
      }
      v28 = v67[v24 - 2];
      if (v28 != v27)
      {
        v29 = (char)v28;
        if ((char)v28 == 63)
        {
          v30 = *(_DWORD *)(v12 + 200);
          v31 = *(_DWORD *)(v12 + 192);
          if (v27 == 31)
            goto LABEL_54;
          v33 = v27 & 0x1F | 0xD2800000;
        }
        else
        {
          v30 = *(_DWORD *)(v12 + 200);
          v31 = *(_DWORD *)(v12 + 192);
          v32 = (char)v27 == 31 || v29 == 31;
          if (!v32)
          {
            v33 = v27 & 0xFFE0FFFF | ((v29 & 0x1F) << 16) | 0xAA0003E0;
            goto LABEL_55;
          }
LABEL_54:
          v33 = (char)v27 | (32 * v29) | 0x91000000;
        }
LABEL_55:
        if (v30 + 4 > v31)
        {
          JSC::AssemblerBuffer::outOfLineGrow(v15, (uint64_t)a2, a3, a4, (uint64_t)this, a6, a7, a8);
          v30 = *(_DWORD *)(v12 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v12 + 56) + v30) = v33;
        *(_DWORD *)(v12 + 200) += 4;
        v18 = v64;
      }
      memmove(&v67[v24 - 2], &v67[v24], 2 * v18 - v24 - 2);
      v14 = v64 - 1;
      goto LABEL_59;
    }
    v63 = v15;
    v34 = HIBYTE(v66);
    v35 = v66;
    JSC::MacroAssemblerARM64::swap(v12, (char)v66, SHIBYTE(v66), a4, (uint64_t)this, a6, a7, a8);
    memmove(&v66, v67, 2 * v64 - 2);
    v36 = v64 - 1;
    v32 = v64 == 1;
    v65 = v36;
    v37 = (unsigned __int8 *)&v66;
    v38 = &v67[2 * v36 - 2];
    if (v32)
    {
      v45 = 0;
      v46 = 0;
      v41 = 0;
      a2 = v38;
    }
    else
    {
      v39 = 2 * v36;
      v40 = &v66;
      while (*(unsigned __int8 *)v40 != v34)
      {
        ++v40;
        v39 -= 2;
        if (!v39)
          goto LABEL_39;
      }
      *(_BYTE *)v40 = v35;
LABEL_39:
      v41 = 0;
      v42 = (char *)&v66;
      a2 = v38;
      v43 = v38;
      do
      {
        if (*v37 == v37[1])
        {
          v44 = v37;
          if (v43 != &v67[2 * v65 - 2])
          {
            v62 = v38;
            if (v37 == a2)
            {
              v44 = v43;
            }
            else
            {
              v60 = v43;
              v61 = v42 - (char *)a2;
              memmove(v43, a2, v42 - (char *)a2);
              v44 = &v60[v61];
            }
            v38 = v62;
          }
          a2 = v37 + 2;
          ++v41;
          v43 = v44;
        }
        v37 += 2;
        v42 += 2;
      }
      while (v37 < v38);
      v45 = v65;
      v46 = v65;
      v38 = v43;
    }
    v47 = &v67[2 * v45 - 2];
    if (a2 != v47)
    {
      memmove(v38, a2, v47 - a2);
      v46 = v65;
    }
    v14 = v46 - v41;
    v15 = v63;
LABEL_59:
    v64 = v14;
LABEL_60:
    ;
  }
  while (v14);
LABEL_64:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v12, (uint64_t)this, 0, a4, (uint64_t)this, a6, a7, a8);
  else
LABEL_68:
    JSC::MacroAssemblerARM64::load64(v12, (a4 << 35) + 0x380000001ALL, 0, a4, (uint64_t)this, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v12, a3, v48, v49, v50, v51, v52, v53, a1);
  JSC::DFG::SpeculativeJIT::exceptionCheck(v12, 0, v54, v55, v56, v57, v58, v59);
}

void JSC::MacroAssemblerARM64::test64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v9;
  char v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v8 = a5;
  v9 = a3;
  v10 = a2;
  if (a4 == 0xFFFFFFFFLL)
  {
    v12 = (unsigned __int16)(32 * (a3 & 0x1F)) | ((a3 & 0x1F) << 16) | 0xEA00001F;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 212))
    {
      __break(0xC471u);
      return;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a4, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
    v12 = (32 * (v9 & 0x1F)) | 0xEA10001F;
  }
  v13 = *(_DWORD *)(a1 + 200);
  if (v13 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v12;
  v14 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v14;
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = (v8 & 0x1F | ((v10 & 0xF) << 12)) ^ 0x1A9F17E0;
  *(_DWORD *)(a1 + 200) += 4;
}

void JSC::DFG::SpeculativeJIT::callOperationWithoutExceptionCheck<unsigned long long (*)(JSC::VM *,JSC::JSBigInt *),JSC::ARM64Registers::RegisterID,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>(int *a1, unsigned __int8 *a2, uint64_t a3, JSC::ARM64LogicalImmediate *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AssemblerBuffer *v9;
  uint64_t v10;
  __int16 *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint8x8_t v20;
  __int32 v21;
  uint8x8_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  __int16 *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  __int16 *v54;
  int v55;
  JSC::AssemblerBuffer *v56;
  unsigned int v57;
  unsigned int v58;
  __int16 v59;
  _BYTE v60[6];

  v9 = (JSC::AssemblerBuffer *)a3;
  v10 = (uint64_t)a2;
  v12 = &v59;
  if ((_DWORD)a5 != 1)
  {
    v59 = a5 | 0x100;
    v57 = 1;
    v56 = (JSC::AssemblerBuffer *)(a2 + 56);
    v13 = -1862270976;
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = 0;
      v17 = v14;
      do
      {
        if ((v60[v15 - 1] & 0x40) != 0)
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        v16 |= 1 << v60[v15 - 1];
        v15 += 2;
      }
      while (2 * v14 != v15);
      v18 = 0;
      do
      {
        v19 = v60[v18 - 2] & 0x7F;
        if (v19 >= 0x40)
          goto LABEL_62;
        v16 &= ~(1 << v19);
        v18 += 2;
      }
      while (2 * v14 != v18);
      v20 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v20.i16[0] = vaddlv_u8(v20);
      v21 = v20.i32[0];
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v16));
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] + v21)
      {
        v23 = 0;
        if (v14 <= 1)
          v24 = 1;
        else
          v24 = v14;
        v25 = 2 * v24;
        while (1)
        {
          v26 = v60[v23 - 1];
          if ((v26 & 0x7Fu) >= 0x40)
            goto LABEL_62;
          if (((v16 >> (v26 & 0x7F)) & 1) != 0)
            break;
          v23 += 2;
          if (v25 == v23)
            goto LABEL_33;
        }
        v27 = v60[v23 - 2];
        if (v27 != v26)
        {
          if ((char)v27 == 63)
          {
            if (v26 == 31)
              goto LABEL_27;
            v29 = v26 & 0x1F | 0xD2800000;
          }
          else
          {
            v28 = (char)v26 == 31 || (char)v27 == 31;
            if (!v28)
            {
              v29 = v26 & 0xFFE0FFFF | ((v27 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_28;
            }
LABEL_27:
            v29 = (char)v26 | (32 * (char)v27) | v13;
          }
LABEL_28:
          v30 = *(_DWORD *)(v10 + 200);
          if (v30 + 4 > *(_DWORD *)(v10 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow(v56, (uint64_t)a2, a3, (uint64_t)this, a5, a6, a7, a8);
            v30 = *(_DWORD *)(v10 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(v10 + 56) + v30) = v29;
          *(_DWORD *)(v10 + 200) += 4;
          v17 = v57;
        }
        memmove(&v60[v23 - 2], &v60[v23], 2 * v17 - v23 - 2);
        v14 = v57 - 1;
        goto LABEL_32;
      }
      v55 = v13;
      v54 = v12;
      v31 = HIBYTE(v59);
      v32 = v59;
      JSC::MacroAssemblerARM64::swap(v10, (char)v59, SHIBYTE(v59), (uint64_t)this, a5, a6, a7, a8);
      memmove(&v59, v60, 2 * v57 - 2);
      v33 = v57 - 1;
      v28 = v57 == 1;
      v58 = v33;
      v34 = (char *)&v59;
      v35 = &v60[2 * v33 - 2];
      if (v28)
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
        a2 = &v60[2 * v33 - 2];
      }
      else
      {
        v40 = 2 * v33;
        v41 = &v59;
        while (*(unsigned __int8 *)v41 != v31)
        {
          ++v41;
          v40 -= 2;
          if (!v40)
            goto LABEL_43;
        }
        *(_BYTE *)v41 = v32;
LABEL_43:
        v38 = 0;
        v42 = (char *)&v59;
        a2 = (unsigned __int8 *)v35;
        v43 = v35;
        do
        {
          if (*v34 == v34[1])
          {
            v44 = v34;
            if (v43 != &v60[2 * v58 - 2])
            {
              if (v34 == (char *)a2)
              {
                v44 = v43;
              }
              else
              {
                v45 = v42 - (char *)a2;
                memmove(v43, a2, v42 - (char *)a2);
                v44 = &v43[v45];
              }
            }
            a2 = (unsigned __int8 *)(v34 + 2);
            ++v38;
            v43 = v44;
          }
          v34 += 2;
          v42 += 2;
        }
        while (v34 < v35);
        v36 = v58;
        v37 = v58;
        v35 = v43;
      }
      v39 = &v60[2 * v36 - 2];
      if (a2 != v39)
      {
        memmove(v35, a2, v39 - a2);
        v37 = v58;
      }
      v14 = v37 - v38;
      v12 = v54;
      v13 = v55;
LABEL_32:
      v57 = v14;
LABEL_33:
      ;
    }
    while (v14);
    if (v12 != &v59 && &v59)
      WTF::fastFree((unint64_t)&v59, a2, a3, (uint64_t)this, a5, a6, a7, a8);
  }
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)v10, (uint64_t)this, 0, (uint64_t)this, a5, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(v10, (uint64_t)operationMapHashHeapBigInt, v46, v47, v48, v49, v50, v51, a1);
  if ((_DWORD)v9)
  {
    if ((_DWORD)v9 == 31)
    {
      LODWORD(a1) = -1862270945;
    }
    else if ((_DWORD)v9 == -1)
    {
      LODWORD(a1) = -1442774017;
    }
    else
    {
      LODWORD(a1) = v9 & 0x1F | 0xAA0003E0;
    }
    v53 = *(_DWORD *)(v10 + 200);
    v10 += 200;
    v52 = v53;
    v9 = (JSC::AssemblerBuffer *)(v10 - 144);
    if (v53 + 4 > *(_DWORD *)(v10 - 8))
    {
LABEL_63:
      JSC::AssemblerBuffer::outOfLineGrow(v9, (uint64_t)a2, a3, (uint64_t)this, a5, a6, a7, a8);
      v52 = *(_DWORD *)v10;
    }
    *(_DWORD *)(*(_QWORD *)v9 + v52) = (_DWORD)a1;
    *(_DWORD *)v10 += 4;
  }
}

void JSC::AssemblyHelpers::branchIfString(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a2 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
    JSC::MacroAssemblerARM64::load8(a2, a3 | 0x500000000, *(char *)(a2 + 304), a4, a5, a6, a7, a8);
    JSC::MacroAssemblerARM64::branch32(a2, 0, 17, 2, v10, v11, v12, v13, a1);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::DFG::SpeculativeJIT::callOperationWithSilentSpill<JSC::ExceptionOperationResult<unsigned long long> (*)(JSC::JSGlobalObject *,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::JSValueRegs>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t a7, uint64_t a8)
{
  int v11;
  unint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint8x8_t v29;
  __int32 v30;
  uint8x8_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned int v44;
  char *v45;
  uint64_t v46;
  _BYTE *v47;
  unsigned __int8 *v48;
  char *v49;
  unsigned __int8 *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  unsigned int v79;
  unsigned int *v80;
  JSC::AssemblerBuffer *v81;
  unsigned int v82;
  unsigned int v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  int64_t v88;
  char *v89;
  char v90;
  int v91;
  char *__src;
  void *__dst;
  int v94;
  unsigned int v95;
  __int16 v96;
  unint64_t v97;
  unsigned int *v98;

  v11 = a3;
  v14 = (unint64_t *)(a2 + 5752);
  JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, 1, a2 + 5752, a3, 0xFFFFFFFFLL, 0xFFFFFFFFLL, a7, a8);
  __dst = &v96;
  v94 = 1;
  if (a6 == 1)
    goto LABEL_54;
  v96 = a6 | 0x100;
  v95 = 1;
  v22 = 1;
  do
  {
    v23 = 0;
    v24 = 0;
    v25 = (char *)__dst;
    v26 = v22;
    do
    {
      if ((*((_BYTE *)__dst + v23 + 1) & 0x40) != 0)
        goto LABEL_92;
      v24 |= 1 << *((_BYTE *)__dst + v23 + 1);
      v23 += 2;
    }
    while (2 * v22 != v23);
    v27 = 0;
    do
    {
      v28 = *((_BYTE *)__dst + v27) & 0x7F;
      if (v28 >= 0x40)
        goto LABEL_92;
      v24 &= ~(1 << v28);
      v27 += 2;
    }
    while (2 * v22 != v27);
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
    v29.i16[0] = vaddlv_u8(v29);
    v30 = v29.i32[0];
    v31 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v24));
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.i32[0] + v30)
    {
      v32 = 0;
      if (v22 <= 1)
        v33 = 1;
      else
        v33 = v22;
      v34 = 2 * v33;
      while (1)
      {
        v35 = *((unsigned __int8 *)__dst + v32 + 1);
        if ((v35 & 0x7Fu) >= 0x40)
          goto LABEL_92;
        if (((v24 >> (v35 & 0x7F)) & 1) != 0)
          break;
        v32 += 2;
        if (v34 == v32)
          goto LABEL_33;
      }
      v36 = *((unsigned __int8 *)__dst + v32);
      if (v36 == v35)
      {
LABEL_31:
        memmove(&v25[v32], &v25[v32 + 2], 2 * v26 - v32 - 2);
        v22 = v95 - 1;
        goto LABEL_32;
      }
      v36 = (char)v36;
      if ((char)v36 == 63)
      {
        if (v35 != 31)
        {
          v38 = v35 & 0x1F | 0xD2800000;
          goto LABEL_28;
        }
      }
      else
      {
        v37 = (char)v35 == 31 || v36 == 31;
        if (!v37)
        {
          v38 = v35 & 0xFFE0FFFF | ((v36 & 0x1F) << 16) | 0xAA0003E0;
LABEL_28:
          v39 = *(_DWORD *)(a2 + 200);
          if (v39 + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
            v39 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v39) = v38;
          *(_DWORD *)(a2 + 200) += 4;
          v25 = (char *)__dst;
          v26 = v95;
          goto LABEL_31;
        }
      }
      v38 = (char)v35 | (32 * v36) | 0x91000000;
      goto LABEL_28;
    }
    v40 = *((_BYTE *)__dst + 1);
    v90 = *(_BYTE *)__dst;
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v40, v17, v18, v19, v20, v21);
    memmove(__dst, (char *)__dst + 2, 2 * v95 - 2);
    v41 = v95 - 1;
    v37 = v95 == 1;
    v95 = v41;
    v42 = (unsigned __int8 *)__dst;
    __src = (char *)__dst + 2 * v41;
    if (v37)
    {
      v43 = 0;
      v44 = 0;
      v91 = 0;
      v15 = (char *)__dst + 2 * v41;
    }
    else
    {
      v46 = 2 * v41;
      v47 = __dst;
      while (*v47 != v40)
      {
        v47 += 2;
        v46 -= 2;
        if (!v46)
          goto LABEL_43;
      }
      *v47 = v90;
LABEL_43:
      v91 = 0;
      v48 = v42;
      v15 = __src;
      v49 = __src;
      do
      {
        if (*v42 == v42[1])
        {
          v50 = v42;
          if (v49 != (char *)__dst + 2 * v95)
          {
            if (v42 == (unsigned __int8 *)v15)
            {
              v50 = (unsigned __int8 *)v49;
            }
            else
            {
              v88 = v48 - (unsigned __int8 *)v15;
              v89 = v49;
              memmove(v49, v15, v48 - (unsigned __int8 *)v15);
              v50 = (unsigned __int8 *)&v89[v88];
            }
          }
          v15 = (char *)(v42 + 2);
          ++v91;
          v49 = (char *)v50;
        }
        v42 += 2;
        v48 += 2;
      }
      while (v42 < (unsigned __int8 *)__src);
      v42 = (unsigned __int8 *)__dst;
      v43 = v95;
      v44 = v95;
      __src = v49;
    }
    v45 = (char *)&v42[2 * v43];
    if (v15 != v45)
    {
      memmove(__src, v15, v45 - v15);
      v44 = v95;
    }
    v22 = v44 - v91;
LABEL_32:
    v95 = v22;
LABEL_33:
    ;
  }
  while (v22);
  v51 = __dst;
  if (&v96 != __dst && __dst)
  {
    __dst = 0;
    v94 = 0;
    WTF::fastFree((unint64_t)v51, v15, v16, v17, v18, v19, v20, v21);
  }
LABEL_54:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, a5, 0, v17, v18, v19, v20, v21);
  else
    JSC::MacroAssemblerARM64::load64(a2, (a4 << 35) + 0x380000001ALL, 0, v17, v18, v19, v20, v21);
  JSC::DFG::SpeculativeJIT::appendCall(a2, (uint64_t)operationMapHash, v52, v53, v54, v55, v56, v57, (int *)a1);
  __dst = (void *)2;
  v98 = 0;
  a1 = *(_QWORD *)(a2 + 3960);
  v62 = *(_QWORD *)(*(_QWORD *)(a2 + 3976) + 8);
  if ((v62 & 1) != 0)
  {
    v84 = *(_QWORD *)(v62 & 0xFFFFFFFF8);
    if ((v62 & 2) != 0
      || ((a4 = *(unsigned int *)((v62 & 0xFFFFFFFF8) + 8), (_DWORD)a4 != 0x3FFFFFFF)
        ? (v85 = (_DWORD)a4 == -1)
        : (v85 = 1),
          v85))
    {
      v86 = 2;
    }
    else if (a4 >> 28)
    {
      v87 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v87 = v84;
      *(_DWORD *)(v87 + 8) = a4;
      v86 = 1;
      v84 = v87;
    }
    else
    {
      v86 = *(_QWORD *)(v62 & 0xFFFFFFFF8);
      v84 = a4 << 36;
    }
    v62 = v84 | v86;
  }
  v97 = v62;
  LODWORD(a1) = JSC::DFG::Graph::willCatchExceptionInMachineFrame(a1, &v97, (uint64_t *)&__dst, &v98, v58, v59, v60, v61);
  if ((v97 & 1) != 0 && (v97 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v97 & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if ((a1 & 1) == 0)
  {
    JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v16, v17, v18, v19, v20, v21);
    LOBYTE(a4) = 0;
    goto LABEL_60;
  }
  v70 = *(unsigned int *)(a2 + 5764);
  if ((_DWORD)v70)
  {
    v71 = 0;
    v72 = 16 * v70;
    v73 = (char *)(*(_QWORD *)(a2 + 5752) + 2);
    while (1)
    {
      v75 = *v73;
      v73 += 16;
      v74 = v75;
      if ((v75 & 0x40) != 0)
        break;
      v71 |= 1 << v74;
      v72 -= 16;
      if (!v72)
      {
        if ((v11 & 0x40) != 0)
          break;
        goto LABEL_86;
      }
    }
LABEL_92:
    __break(1u);
LABEL_93:
    v80 = (unsigned int *)(a2 + 200);
    v79 = *(_DWORD *)(a2 + 200);
    v81 = (JSC::AssemblerBuffer *)(a2 + 56);
    v82 = v79 + 4;
    v83 = *(_DWORD *)(a2 + 192);
    v78 = -1862270913;
    goto LABEL_94;
  }
  v71 = 0;
  if ((v11 & 0x40) != 0)
    goto LABEL_92;
LABEL_86:
  LOBYTE(a4) = 1;
  v76 = v71 | (1 << v11);
  if ((v76 & 2) == 0)
    goto LABEL_60;
  v77 = (unsigned __int16)~(_WORD)v76 & 0xFFFE;
  if (!v77)
  {
    LOBYTE(a4) = -1;
    goto LABEL_60;
  }
  LODWORD(a4) = __clz(__rbit64(v77));
  if ((_DWORD)a4 != 1)
  {
    if ((_DWORD)a4 == 31)
      goto LABEL_93;
    v78 = a4 | 0xAA0103E0;
    v80 = (unsigned int *)(a2 + 200);
    v79 = *(_DWORD *)(a2 + 200);
    v81 = (JSC::AssemblerBuffer *)(a2 + 56);
    v82 = v79 + 4;
    v83 = *(_DWORD *)(a2 + 192);
LABEL_94:
    if (v82 > v83)
    {
      JSC::AssemblerBuffer::outOfLineGrow(v81, (uint64_t)v15, v16, v17, v18, v19, v20, v21);
      v79 = *v80;
    }
    *(_DWORD *)(*(_QWORD *)v81 + v79) = v78;
    *v80 += 4;
  }
LABEL_60:
  if ((__dst & 1) != 0 && ((unint64_t)__dst & 0xFFFFFFFF8) != 0)
    WTF::fastFree((unint64_t)__dst & 0xFFFFFFFF8, v15, v16, v17, v18, v19, v20, v21);
  if (v11)
  {
    if (v11 == 31)
    {
      v63 = -1862270945;
    }
    else if (v11 == -1)
    {
      v63 = -1442774017;
    }
    else
    {
      v63 = v11 & 0x1F | 0xAA0003E0;
    }
    v65 = (unsigned int *)(a2 + 200);
    v64 = *(_DWORD *)(a2 + 200);
    if (v64 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), (uint64_t)v15, v16, v17, v18, v19, v20, v21);
      v64 = *v65;
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v64) = v63;
    *v65 += 4;
  }
  v66 = *(_DWORD *)(a2 + 5764);
  if (v66)
  {
    v67 = v66 - 1;
    v68 = 16 * (v66 - 1);
    while (*(_DWORD *)(a2 + 5764) > v67)
    {
      JSC::DFG::SpeculativeJIT::silentFillImpl(a2, *(_QWORD *)(a2 + 5752) + v68, v16, v17, v18, v19, v20, v21);
      v68 -= 16;
      if (--v67 == -1)
        goto LABEL_73;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_73:
    *(_BYTE *)(a2 + 5768) = 0;
    if (*(_DWORD *)(a2 + 5760))
    {
      if (*(_DWORD *)(a2 + 5764))
        *(_DWORD *)(a2 + 5764) = 0;
      v69 = *v14;
      if (*v14)
      {
        *(_QWORD *)(a2 + 5752) = 0;
        *(_DWORD *)(a2 + 5760) = 0;
        WTF::fastFree(v69, v15, v16, v17, v18, v19, v20, v21);
      }
    }
    if ((_DWORD)a1)
      JSC::DFG::SpeculativeJIT::exceptionCheck(a2, (char)a4, v16, v17, v18, v19, v20, v21);
  }
}

void JSC::AssemblyHelpers::branchIfNotSymbol(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a1 + 212))
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
    JSC::MacroAssemblerARM64::load8(a1, a2 | 0x500000000, *(char *)(a1 + 304), a3, a4, a5, a6, a7);
    JSC::MacroAssemblerARM64::branch32(a1, 1, 17, 4, v10, v11, v12, v13, a8);
  }
  else
  {
    __break(0xC471u);
  }
}

void JSC::MacroAssemblerARM64::add64(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_16;
  v11 = -1862270448;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load64(a1, a3, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  if (a2 < 0x1000)
  {
LABEL_3:
    v19 = ((a2 & 0xFFF) << 10) | v11;
    goto LABEL_9;
  }
  v20 = -788528624;
  v21 = -a2;
  if (-a2 < 0x1000)
    goto LABEL_5;
  if ((a2 & 0xFFF) == 0)
  {
    if (!HIBYTE(a2))
    {
      v11 = -1858076144;
      a2 >>= 12;
      goto LABEL_3;
    }
    v21 = -(a2 >> 12);
    if (v21 < 0x1000)
    {
      v20 = -784334320;
LABEL_5:
      v19 = v20 | (v21 << 10);
      goto LABEL_9;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x197CD01A0);
  }
  v19 = -1961819632;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, a2, *(char *)(a1 + 304), v14, v15, v16, v17, v18);
LABEL_9:
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v12, v13, v14, v15, v16, v17, v18);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v19;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(a1, 16, a3, v14, v15, v16, v17, v18);
}

void JSC::MacroAssemblerARM64::add32(uint64_t a1, int a2, JSC::ARM64LogicalImmediate *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;

  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_16;
  v11 = 285213200;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, (uint64_t)a3, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  if (a2 < 0x1000)
  {
LABEL_3:
    v19 = ((a2 & 0xFFF) << 10) | v11;
    goto LABEL_9;
  }
  v20 = 1358955024;
  v21 = -a2;
  if (-a2 < 0x1000)
    goto LABEL_5;
  if ((a2 & 0xFFF) == 0)
  {
    if (!HIBYTE(a2))
    {
      v11 = 289407504;
      a2 >>= 12;
      goto LABEL_3;
    }
    v21 = -(a2 >> 12);
    if (v21 < 0x1000)
    {
      v20 = 1363149328;
LABEL_5:
      v19 = v20 | (v21 << 10);
      goto LABEL_9;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x197CD031CLL);
  }
  v19 = 185664016;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a2, *(char *)(a1 + 304), v14, v15, v16, v17, v18);
LABEL_9:
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v12, v13, v14, v15, v16, v17, v18);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v19;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(a1, 16, a3, v14, v15, v16, v17, v18);
}

void JSC::MacroAssemblerARM64::sub32(uint64_t a1, int a2, JSC::ARM64LogicalImmediate *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;

  if (!*(_BYTE *)(a1 + 212))
    goto LABEL_17;
  v11 = 1358955024;
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::load32(a1, (uint64_t)a3, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  if (a2 < 0x1000)
  {
LABEL_3:
    v19 = v11 | ((a2 & 0xFFF) << 10);
    goto LABEL_10;
  }
  v20 = -a2;
  if (-a2 < 0x1000)
  {
    v21 = 0;
LABEL_6:
    v19 = v21 | (v20 << 10) | 0x11000210;
    goto LABEL_10;
  }
  if ((a2 & 0xFFF) == 0)
  {
    if (!HIBYTE(a2))
    {
      v11 = 1363149328;
      a2 >>= 12;
      goto LABEL_3;
    }
    v20 = -(a2 >> 12);
    if (v20 < 0x1000)
    {
      v21 = 0x400000;
      goto LABEL_6;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x197CD04A0);
  }
  v19 = 1259405840;
  *(_DWORD *)(*(_QWORD *)(a1 + 296) + 208) &= ~*(_DWORD *)(a1 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a1, (JSC::ARM64LogicalImmediate *)a2, *(char *)(a1 + 304), v14, v15, v16, v17, v18);
LABEL_10:
  v22 = *(_DWORD *)(a1 + 200);
  if (v22 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), v12, v13, v14, v15, v16, v17, v18);
    v22 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v22) = v19;
  *(_DWORD *)(a1 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(a1, 16, a3, v14, v15, v16, v17, v18);
}

void JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>(_QWORD *a1, uint64_t *a2, _DWORD *a3, char a4, char a5, char a6, uint64_t a7)
{
  uint64_t v8[2];
  __int16 v9;
  uint64_t (*v10)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, int8x8_t);
  _DWORD *v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;

  v15 = a4;
  v14 = a5;
  v13 = a6;
  v11 = a3;
  v12 = a7;
  v10 = operationInByValOptimize;
  v9 = 0;
  v8[1] = 0;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::JSValueRegs,JSC::CCallHelpers::CellValue,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::CCallHelpers::CellValue&,JSC::JSValueRegs&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,decltype(nullptr) &>(a2, &v11, (uint64_t *)&v10, (unsigned __int8 *)&v9 + 1, (char *)&v9, &v15, &v14, &v13, v8, &v12);
  *a1 = v8[0];
}

uint64_t *JSC::DFG::SpeculativeJIT::blessedBooleanResult(uint64_t a1, int a2, JSC::DFG::Node *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *result;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;

  result = JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)a1, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (a2 > 15)
    v12 = -1;
  else
    v12 = a2;
  v13 = a1 + 12 * v12;
  v14 = *((_DWORD *)a3 + 12);
  *(_DWORD *)(v13 + 4776) = v14;
  *(_DWORD *)(v13 + 4780) = 4;
  v15 = ~v14;
  if (v15 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 3992) + 24 * (int)v15;
    v17 = *((_DWORD *)a3 + 13);
    *(_QWORD *)v16 = a3;
    *(_DWORD *)(v16 + 8) = v17;
    *(_BYTE *)(v16 + 17) = a2;
    *(_DWORD *)(v16 + 12) = 21;
    *(_BYTE *)(v16 + 16) = 0;
  }
  return result;
}

uint64_t std::optional<JSC::DFG::SpeculateBooleanOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;

  v8 = result;
  if (*(_BYTE *)(result + 24))
  {
    v9 = *(char *)(result + 16);
    if (v9 > 15)
      v9 = -1;
    --*(_DWORD *)(*(_QWORD *)result + 12 * v9 + 4784);
    *(_BYTE *)(result + 24) = 0;
  }
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = -1;
  v10 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *(unsigned int *)(a2 + 4004))
  {
    __break(0xC471u);
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v10 + 12))
      *(_BYTE *)(result + 16) = JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(a2, a3, a3, a4, a5, a6, a7, a8);
    *(_BYTE *)(v8 + 24) = 1;
    return v8;
  }
  return result;
}

void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_6::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;

  v9 = *(_DWORD **)a1;
  JSC::MacroAssemblerARM64::load16(*(_QWORD *)a1, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), **(char **)(a1 + 16), a5, a6, a7, a8);
  v17 = **(_BYTE **)(a1 + 16);
  v18 = v9[50];
  if (v18 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v10, v11, v12, v13, v14, v15, v16);
    v18 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v18) = v17 & 0x1F | (32 * (v17 & 0x1F)) | 0x5AC00400;
  v9[50] += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)v9, (JSC::ARM64LogicalImmediate *)0xFFFF, v17, v17);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 1))
  {
    v26 = **(_BYTE **)(a1 + 16) & 0x1F | (32 * **(unsigned __int8 **)(a1 + 16)) | 0x13003C00;
    v27 = v9[50];
    if (v27 + 4 > v9[48])
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v19, v20, v21, v22, v23, v24, v25);
      v27 = v9[50];
    }
    *(_DWORD *)(*((_QWORD *)v9 + 7) + v27) = v26;
    v9[50] += 4;
  }
}

void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_5::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unint64_t **)(a1 + 16);
  v11 = *v10;
  v12 = v10[1];
  v13 = **(char **)(a1 + 24);
  if (*(_BYTE *)(*(_QWORD *)a1 + 1))
    JSC::MacroAssemblerARM64::load16SignedExtendTo32(v9, v11, v12, v13, a5, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load16(v9, v11, v12, v13, a5, a6, a7, a8);
}

void JSC::MacroAssemblerARM64::byteSwap32(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v10;

  v8 = a2;
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = v8 & 0x1F | (32 * (v8 & 0x1F)) | 0x5AC00800;
  a1[50] += 4;
}

void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_7::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;

  v9 = *(_DWORD **)a1;
  JSC::MacroAssemblerARM64::loadFloat(*(_QWORD *)a1, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), **(char **)(a1 + 16), a5, a6, a7, a8);
  v17 = **(char **)(a1 + 16);
  v18 = v9[50];
  if (v18 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v10, v11, v12, v13, v14, v15, v16);
    v18 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v18) = v17 | (32 * v17) | 0x1E22C000;
  v9[50] += 4;
}

void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_8::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  char v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;

  v9 = *(_DWORD **)a1;
  JSC::MacroAssemblerARM64::load32(*(_QWORD *)a1, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), **(char **)(a1 + 16), a5, a6, a7, a8);
  v17 = **(_BYTE **)(a1 + 16);
  v18 = v9[50];
  if (v18 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v10, v11, v12, v13, v14, v15, v16);
    v18 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v18) = v17 & 0x1F | (32 * (v17 & 0x1F)) | 0x5AC00800;
  v19 = v9[50];
  v20 = v19 + 4;
  v9[50] = v19 + 4;
  v21 = **(_BYTE **)(a1 + 16);
  v22 = **(char **)(a1 + 24);
  if ((v19 + 8) > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v10, v11, v12, v13, v14, v15, v16);
    v20 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v20) = v22 | (32 * (v21 & 0x1F)) | 0x1E270000;
  v23 = v9[50];
  v24 = v23 + 4;
  v9[50] = v23 + 4;
  v25 = **(char **)(a1 + 24);
  if ((v23 + 8) > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v10, v11, v12, v13, v14, v15, v16);
    v24 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v24) = v25 | (32 * v25) | 0x1E22C000;
  v9[50] += 4;
}

void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_10::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  char v22;
  int v23;

  v9 = *(_DWORD **)a1;
  JSC::MacroAssemblerARM64::load64(*(_QWORD *)a1, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), **(char **)(a1 + 16), a5, a6, a7, a8);
  v17 = **(_BYTE **)(a1 + 16) & 0x1F;
  v18 = v17 | (32 * v17) | 0xDAC00C00;
  v19 = v9[50];
  if (v19 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v10, v11, v12, v13, v14, v15, v16);
    v19 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v19) = v18;
  v20 = v9[50];
  v21 = v20 + 4;
  v9[50] = v20 + 4;
  v22 = **(_BYTE **)(a1 + 16);
  v23 = **(char **)(a1 + 24);
  if ((v20 + 8) > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), v10, v11, v12, v13, v14, v15, v16);
    v21 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v21) = v23 | (32 * (v22 & 0x1F)) | 0x9E670000;
  v9[50] += 4;
}

uint64_t *JSC::DFG::SpeculativeJIT::compileDateSet(JSC::DFG::SpeculativeJIT *this, JSC::DFG::Node *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *result;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118[2];
  unsigned __int8 v119;
  _QWORD v120[2];
  char v121;

  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v120, this, *((_QWORD *)a2 + 3), a4, a5, a6, a7, a8);
  JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand((uint64_t)v118, (uint64_t)this, *((_QWORD *)a2 + 4), v10, v11, v12, v13, v14);
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v116, this, v15, v16, v17, v18, v19, v20);
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v114, this, v21, v22, v23, v24, v25, v26);
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v112, this, v27, v28, v29, v30, v31, v32);
  JSC::DFG::FPRTemporary::FPRTemporary((uint64_t)&v110, this, v33, v34, v35, v36, v37, v38);
  v52 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v120, v39, v40, v41, v42, v43, v44, v45);
  v53 = v119;
  if (v119 == 255)
  {
    v53 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(v118[0], v118[1], v46, v47, v48, v49, v50, v51);
    v119 = v53;
  }
  v54 = v117;
  v55 = v117;
  v56 = v115;
  v57 = v115;
  v58 = v113;
  v59 = v111;
  JSC::DFG::SpeculativeJIT::speculateDateObject((uint64_t)this, *((_QWORD *)a2 + 3), v52, v47, v48, v49, v50, v51);
  v60 = (char)v53;
  JSC::MacroAssemblerARM64::roundTowardZeroDouble(this, v60, v54, v61, v62, v63, v64, v65);
  JSC::MacroAssemblerARM64::moveZeroToDouble(this, v56, v66, v67, v68, v69, v70, v71);
  JSC::MacroAssemblerARM64::addDouble(this, v56, v54, v72, v73, v74, v75, v76);
  if ((byte_1ECF58509 & 1) == 0)
  {
    qword_1ECF58518 = 0x7FF8000000000000;
    byte_1ECF58509 = 1;
  }
  JSC::MacroAssemblerARM64::loadDouble((uint64_t)this, (uint64_t)&JSC::DFG::SpeculativeJIT::compileDateSet(JSC::DFG::Node *)::max, v58, v77, v78, v79, v80, v81);
  JSC::MacroAssemblerARM64::loadDouble((uint64_t)this, (uint64_t)&qword_1ECF58518, v59, v82, v83, v84, v85, v86);
  v87 = v57;
  JSC::MacroAssemblerARM64::absDouble(this, v60, v87, v88, v89, v90, v91, v92);
  JSC::MacroAssemblerARM64::moveDoubleConditionallyDouble(this, v87, v58, v59, v55, v55, v93, v94);
  JSC::MacroAssemblerARM64::storeDouble((uint64_t)this, v55, v52 | 0x1000000000, v95, v96, v97, v98, v99);
  result = JSC::DFG::SpeculativeJIT::doubleResult((uint64_t *)this, v55, a2, 0, v100, v101, v102, v103);
  if (v110)
  {
    v105 = v110 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v111];
    --*(_DWORD *)(v105 + 4976);
  }
  if (v112)
  {
    v106 = v112 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v113];
    --*(_DWORD *)(v106 + 4976);
  }
  if (v114)
  {
    v107 = v114 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v115];
    --*(_DWORD *)(v107 + 4976);
  }
  if (v116)
  {
    v108 = v116 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v117];
    --*(_DWORD *)(v108 + 4976);
  }
  --*(_DWORD *)(v118[0]
              + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(char)v119]
              + 4976);
  if ((v120[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v109 = v121;
    if (v121 > 15)
      v109 = -1;
    --*(_DWORD *)(v120[0] + 12 * v109 + 4784);
  }
  return result;
}

uint64_t std::optional<JSC::DFG::SpeculateInt32Operand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>(uint64_t result, JSC::DFG::SpeculativeJIT *this, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  unint64_t v10;

  v8 = result;
  if (*(_BYTE *)(result + 24))
  {
    v9 = *(char *)(result + 16);
    if (v9 > 15)
      v9 = -1;
    --*(_DWORD *)(*(_QWORD *)result + 12 * v9 + 4784);
    *(_BYTE *)(result + 24) = 0;
  }
  *(_QWORD *)result = this;
  *(_QWORD *)(result + 8) = a3;
  *(_BYTE *)(result + 16) = -1;
  v10 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v10 >= *((unsigned int *)this + 1001))
  {
    __break(0xC471u);
  }
  else
  {
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 12))
      *(_BYTE *)(result + 16) = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<false>(this, a3, result + 17, a4, a5, a6, a7, a8);
    *(_BYTE *)(v8 + 24) = 1;
    return v8;
  }
  return result;
}

uint64_t std::optional<JSC::DFG::SpeculateDoubleOperand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;

  if (*(_BYTE *)(a1 + 24))
  {
    v9 = *(_QWORD *)a1
       + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[*(char *)(a1 + 16)];
    --*(_DWORD *)(v9 + 4976);
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = -1;
  if (((a3 >> 50) & 0x3F) - 49 >= 3
    || (v10 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30), v10 >= *(unsigned int *)(a2 + 4004)))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD0F18);
  }
  if (*(_BYTE *)(*(_QWORD *)(a2 + 3992) + 24 * (int)v10 + 12))
    *(_BYTE *)(a1 + 16) = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a2, a3, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

uint64_t std::optional<JSC::DFG::SpeculateStrictInt52Operand>::emplace[abi:sn180100]<JSC::DFG::SpeculativeJIT *,JSC::DFG::Edge &,void>(uint64_t a1, JSC::DFG::SpeculativeJIT *this, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unint64_t v10;

  if (*(_BYTE *)(a1 + 24))
  {
    v9 = *(char *)(a1 + 16);
    if (v9 > 15)
      v9 = -1;
    --*(_DWORD *)(*(_QWORD *)a1 + 12 * v9 + 4784);
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = -1;
  if ((a3 & 0xFC000000000000) != 0xD0000000000000
    || (v10 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30), v10 >= *((unsigned int *)this + 1001)))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD0FF8);
  }
  if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v10 + 12))
    *(_BYTE *)(a1 + 16) = JSC::DFG::SpeculativeJIT::fillSpeculateInt52(this, a3, 3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_12::operator()(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  char v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  char v16;

  v9 = (uint64_t)*a1;
  v10 = *a1[1];
  v11 = *a1[2];
  v12 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v13 = *((_DWORD *)*a1 + 50);
  if (v13 + 4 > *((_DWORD *)*a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v13) = v11 & 0x1F | (32 * v10) | 0x1E260000;
  v14 = *(_DWORD *)(v9 + 200);
  v15 = v14 + 4;
  *(_DWORD *)(v9 + 200) = v14 + 4;
  v16 = *a1[2];
  if ((v14 + 8) > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v15) = v16 & 0x1F | (32 * (v16 & 0x1F)) | 0x5AC00800;
  *(_DWORD *)(v9 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(v9, *a1[2], *(_QWORD *)a1[3], *((_QWORD *)a1[3] + 1), a5, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_14::operator()(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  char v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  char v16;

  v9 = (uint64_t)*a1;
  v10 = *a1[1];
  v11 = *a1[2];
  v12 = (JSC::AssemblerBuffer *)(*a1 + 56);
  v13 = *((_DWORD *)*a1 + 50);
  if (v13 + 4 > *((_DWORD *)*a1 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(*a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v13) = v11 & 0x1F | (32 * v10) | 0x9E660000;
  v14 = *(_DWORD *)(v9 + 200);
  v15 = v14 + 4;
  *(_DWORD *)(v9 + 200) = v14 + 4;
  v16 = *a1[2];
  if ((v14 + 8) > *(_DWORD *)(v9 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v15 = *(_DWORD *)(v9 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v9 + 56) + v15) = v16 & 0x1F | (32 * (v16 & 0x1F)) | 0xDAC00C00;
  *(_DWORD *)(v9 + 200) += 4;
  JSC::MacroAssemblerARM64::store64(v9, *a1[2], *(_QWORD *)a1[3], *((_QWORD *)a1[3] + 1), a5, a6, a7, a8);
}

void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_16::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(_DWORD **)a1;
  v10 = **(unsigned __int8 **)(a1 + 8);
  v11 = *(unsigned __int8 **)(a1 + 16);
  v12 = (char)*v11;
  if (v10 == *v11)
    goto LABEL_14;
  v13 = *v11;
  if (v10 == 63)
  {
    if (v13 != 31)
    {
      v15 = v12 & 0x1F | 0xD2800000;
      goto LABEL_11;
    }
LABEL_10:
    v15 = v12 | (32 * **(char **)(a1 + 8)) | 0x91000000;
    goto LABEL_11;
  }
  if (v10 == 31 || v12 == 31)
    goto LABEL_10;
  v15 = v12 | ((v10 & 0x1F) << 16) | 0xAA0003E0;
LABEL_11:
  v17 = v9 + 50;
  v16 = v9[50];
  if (v16 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), a2, a3, a4, a5, a6, a7, a8);
    v16 = *v17;
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v16) = v15;
  *v17 += 4;
  LOBYTE(v10) = **(_BYTE **)(a1 + 16);
LABEL_14:
  v18 = v9[50];
  if (v18 + 4 > v9[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v9 + 14), a2, a3, a4, a5, a6, a7, a8);
    v18 = v9[50];
  }
  *(_DWORD *)(*((_QWORD *)v9 + 7) + v18) = v10 & 0x1F | (32 * (v10 & 0x1F)) | 0x5AC00400;
  v9[50] += 4;
  JSC::MacroAssemblerARM64::and32((uint64_t)v9, (JSC::ARM64LogicalImmediate *)0xFFFF, v10, (char)v10);
  JSC::MacroAssemblerARM64::store16((uint64_t)v9, **(_BYTE **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v19, v20, v21, v22);
}

void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_18::operator()(uint64_t a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;

  v2 = *(_DWORD **)a1;
  JSC::MacroAssemblerARM64::and64(*(_QWORD *)a1, (JSC::ARM64LogicalImmediate *)0xFFFFFFFFLL, **(_BYTE **)(a1 + 8), **(char **)(a1 + 16));
  v10 = **(_BYTE **)(a1 + 16);
  v11 = v2[50];
  if (v11 + 4 > v2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v2 + 14), v3, v4, v5, v6, v7, v8, v9);
    v11 = v2[50];
  }
  *(_DWORD *)(*((_QWORD *)v2 + 7) + v11) = v10 & 0x1F | (32 * (v10 & 0x1F)) | 0x5AC00800;
  v2[50] += 4;
  JSC::MacroAssemblerARM64::store32((uint64_t)v2, **(_BYTE **)(a1 + 16), **(_QWORD **)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), v6, v7, v8, v9);
}

void JSC::MacroAssemblerARM64::branchAdd32(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, JSC::ARM64LogicalImmediate *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int i;
  int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;

  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD15C8);
  }
  v9 = a4;
  v13 = 822084112;
  *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
  JSC::MacroAssemblerARM64::load32(a2, (uint64_t)a5, *(char *)(a2 + 272), a4, (uint64_t)a5, a6, a7, a8);
  if (v9 < 0x1000)
    goto LABEL_3;
  v22 = 1895825936;
  v23 = -v9;
  if (-v9 < 0x1000)
    goto LABEL_5;
  if ((v9 & 0xFFF) == 0)
  {
    if (!HIBYTE(v9))
    {
      v13 = 826278416;
      v9 >>= 12;
LABEL_3:
      v21 = ((v9 & 0xFFF) << 10) | v13;
      goto LABEL_9;
    }
    v23 = -(v9 >> 12);
    if (v23 < 0x1000)
    {
      v22 = 1900020240;
LABEL_5:
      v21 = v22 | (v23 << 10);
      goto LABEL_9;
    }
  }
  if (!*(_BYTE *)(a2 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD1618);
  }
  v21 = 722534928;
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImm32,int>((unsigned int *)a2, (JSC::ARM64LogicalImmediate *)v9, *(char *)(a2 + 304), v16, v17, v18, v19, v20);
LABEL_9:
  v24 = *(_DWORD *)(a2 + 200);
  if (v24 + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v14, v15, v16, v17, v18, v19, v20);
    v24 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = v21;
  *(_DWORD *)(a2 + 200) += 4;
  JSC::MacroAssemblerARM64::store32(a2, 16, a5, v16, v17, v18, v19, v20);
  if (*(_BYTE *)(a2 + 328))
  {
    for (i = *(_DWORD *)(a2 + 200); (signed int)i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
    {
      if (i + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v25, v26, v27, v28, v29, v30, v31);
        i = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
      i = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
  }
  else
  {
    i = *(_DWORD *)(a2 + 200);
  }
  if (i + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v25, v26, v27, v28, v29, v30, v31);
    i = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = a3 | 0x54000000;
  v33 = *(_DWORD *)(a2 + 200);
  v34 = v33 + 4;
  *(_DWORD *)(a2 + 200) = v33 + 4;
  v35 = v33 + 8;
  v36 = v33 + 4;
  if (v35 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), v25, v26, v27, v28, v29, v30, v31);
    v36 = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = -721215457;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v37 = -122;
  else
    v37 = -126;
  *(_DWORD *)a1 = v34;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = v37;
  *(_BYTE *)(a1 + 9) = a3;
  *(_WORD *)(a1 + 10) = -256;
}

_QWORD *WTF::HashMap<JSC::BytecodeIndex,unsigned int,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(_QWORD *result, uint64_t *a2, int *a3, _DWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  char v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,unsigned int>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,unsigned int,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  v14 = (v13 ^ HIWORD(v13)) & v10;
  v15 = (_DWORD *)(v8 + 8 * v14);
  v16 = *v15;
  if (*v15 != -1)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (v16 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v8 - 4);
        v24 = 0;
        v23 = v8 + 8 * v28;
        goto LABEL_12;
      }
      if (v16 == -2)
        v25 = v15;
      v14 = (v14 + v26) & v10;
      v15 = (_DWORD *)(v8 + 8 * v14);
      v16 = *v15;
      ++v26;
    }
    while (*v15 != -1);
    if (v25)
    {
      *v25 = 0xFFFFFFFFLL;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v15 = v25;
    }
  }
  *v15 = v11;
  v15[1] = *a4;
  v17 = *a2;
  if (*a2)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_11;
    goto LABEL_23;
  }
  if (3 * v22 <= 4 * v21)
  {
    if (!(_DWORD)v22)
    {
      v27 = 8;
LABEL_26:
      result = WTF::HashTable<JSC::BytecodeIndex,WTF::KeyValuePair<JSC::BytecodeIndex,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::BytecodeIndex,unsigned int>>,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashMap<JSC::BytecodeIndex,unsigned int,WTF::DefaultHash<JSC::BytecodeIndex>,WTF::HashTraits<JSC::BytecodeIndex>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::BytecodeIndex>>::rehash(a2, v27, v15);
      v15 = result;
      v19 = *a2;
      if (*a2)
        v22 = *(unsigned int *)(v19 - 4);
      else
        v22 = 0;
      goto LABEL_11;
    }
LABEL_23:
    v27 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
    goto LABEL_26;
  }
LABEL_11:
  v23 = v19 + 8 * v22;
  v24 = 1;
LABEL_12:
  *v7 = v15;
  v7[1] = v23;
  *((_BYTE *)v7 + 16) = v24;
  return result;
}

void JSC::DFG::SpeculativeJIT::speculateAnyInt(JSC::DFG::SpeculativeJIT *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char v34;

  v10 = *((_QWORD *)a1 + 702);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v13 = (uint64_t *)(v11 + 24);
  v14 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v14 = v13;
  v15 = *v14;
  v16 = *v14 + 32 * v12;
  v17 = *(_DWORD *)(v10 + 88);
  v18 = *(_DWORD *)(v16 + 20);
  if (v17 != v18)
  {
    if ((*(_QWORD *)(v16 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v18 ^ v17) >= 2)
      {
        v25 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 != 4)
        {
          *(_QWORD *)v16 = v25 | 2;
          v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v25 & 1) != 0)
          {
            v29 = 2 * *v26;
            while (v29 * 4)
            {
              v30 = *(_QWORD *)&v26[v29];
              if ((*(_BYTE *)(v30 + 19) & 0xC) == 0)
              {
                v31 = *(_QWORD *)(v30 + 96);
                v32 = (v31 & 1) != 0 ? (v31 >> 1) & 3 : *(unsigned __int8 *)(v31 + 4);
                v29 -= 2;
                if (v32 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v26, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_33;
            }
          }
          else if (v26)
          {
            if ((*((_BYTE *)v26 + 19) & 0xC) != 0
              || ((v27 = *((_QWORD *)v26 + 12), (v27 & 1) != 0)
                ? (v28 = (v27 >> 1) & 3)
                : (v28 = *(unsigned __int8 *)(v27 + 4)),
                  v28 == 2))
            {
LABEL_33:
              *(_QWORD *)v16 = 4;
            }
          }
        }
        *(_DWORD *)(v15 + 32 * v12 + 16) = -21020677;
      }
      if ((v17 & 1) != 0)
        *(_QWORD *)v16 &= ~2uLL;
    }
    *(_DWORD *)(v16 + 20) = v17;
  }
  if ((*(_QWORD *)(v16 + 8) & 0xFFFFFFECFFFFFFFFLL) != 0)
  {
    JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v33, a1, a3, a4, a5, a6, a7, a8);
    JSC::DFG::SpeculativeJIT::convertAnyInt((uint64_t)a1, a2, v34, v19, v20, v21, v22, v23);
    if (v33)
    {
      v24 = v34;
      if (v34 != -1)
      {
        if (v34 > 15)
          v24 = -1;
        --*(_DWORD *)(v33 + 12 * v24 + 4784);
      }
    }
  }
}

void JSC::DFG::SpeculativeJIT::speculateInt32(uint64_t a1, unint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[12];

  if (JSC::DFG::SpeculativeJIT::needsTypeCheck(a1, a2, 0x300000000, a4, a5, a6, a7, a8))
  {
    JSC::MacroAssemblerARM64::branch64(a1, 3, (char)a3, 27, v11, v12, v13, v14, (uint64_t)v17);
    JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)(((unint64_t)a3 << 32) | 0x80000000), a2, 0x300000000uLL, (uint64_t)v17, 1uLL, v15, v16);
  }
}

void JSC::DFG::SpeculativeJIT::speculateDoubleRepAnyInt(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  int v59;
  _BYTE *v60;
  WTF *v61;
  WTF *v62;
  WTF *v63;
  WTF *v65;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  WTF *v88;
  unsigned int v89;
  int v90;
  _BYTE v91[24];
  WTF *v92;
  uint64_t v93;
  _BYTE v94[24];
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;

  v10 = *(_QWORD *)(a1 + 5616);
  v11 = *(_QWORD *)(v10 + 8);
  v12 = a2 & 0xFF00FFFFFFFFFFFELL;
  v13 = *(unsigned int *)((a2 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v14 = (uint64_t *)(v11 + 24);
  v15 = (uint64_t *)(v11 + 8);
  if ((a2 & 1) != 0)
    v15 = v14;
  v16 = *v15;
  v17 = *v15 + 32 * v13;
  v18 = *(_DWORD *)(v10 + 88);
  v19 = *(_DWORD *)(v17 + 20);
  if (v18 != v19)
  {
    if ((*(_QWORD *)(v17 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v19 ^ v18) >= 2)
      {
        v71 = *(_QWORD *)v17;
        if (*(_QWORD *)v17 != 4)
        {
          *(_QWORD *)v17 = v71 | 2;
          v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v71 & 1) != 0)
          {
            v79 = 2 * *v72;
            while (v79 * 4)
            {
              v80 = *(_QWORD *)&v72[v79];
              if ((*(_BYTE *)(v80 + 19) & 0xC) == 0)
              {
                v81 = *(_QWORD *)(v80 + 96);
                v82 = (v81 & 1) != 0 ? (v81 >> 1) & 3 : *(unsigned __int8 *)(v81 + 4);
                v79 -= 2;
                if (v82 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v72, (void *)a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_95;
            }
          }
          else if (v72)
          {
            if ((*((_BYTE *)v72 + 19) & 0xC) != 0
              || ((v73 = *((_QWORD *)v72 + 12), (v73 & 1) != 0)
                ? (v74 = (v73 >> 1) & 3)
                : (v74 = *(unsigned __int8 *)(v73 + 4)),
                  v74 == 2))
            {
LABEL_95:
              *(_QWORD *)v17 = 4;
            }
          }
        }
        *(_DWORD *)(v16 + 32 * v13 + 16) = -21020677;
      }
      if ((v18 & 1) != 0)
        *(_QWORD *)v17 &= ~2uLL;
    }
    *(_DWORD *)(v17 + 20) = v18;
  }
  if ((*(_QWORD *)(v17 + 8) & 0xFFFFFFEFFFFFFFFFLL) == 0)
    return;
  if (((a2 >> 50) & 0x3F) - 49 >= 3)
  {
    __break(0xC471u);
    goto LABEL_108;
  }
  v20 = ~*(_DWORD *)((a2 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v20 >= *(unsigned int *)(a1 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD203CLL);
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3992) + 24 * (int)v20 + 12))
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, a2, a3, a4, a5, a6, a7, a8);
  else
    v21 = -1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v97, (JSC::DFG::SpeculativeJIT *)a1, a3, a4, a5, a6, a7, a8);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v95, (JSC::DFG::SpeculativeJIT *)a1, v22, v23, v24, v25, v26, v27);
  v34 = 0;
  v35 = (_DWORD *)(a1 + 4976);
  v36 = 0x17u;
  v37 = -1;
  while (*v35)
  {
LABEL_14:
    ++v34;
    v35 += 3;
    if (v34 == 23)
    {
      v34 = v36;
      v39 = (unsigned int *)(a1 + 4968 + 12 * v36);
      v40 = *v39;
      *(_QWORD *)v39 = 0xFFFFFFFF3FFFFFFFLL;
      v35 = v39 + 2;
      goto LABEL_17;
    }
  }
  v38 = *(v35 - 1);
  if (v38 != -1)
  {
    if (v38 < v37)
    {
      v36 = v34;
      v37 = *(v35 - 1);
    }
    goto LABEL_14;
  }
  v40 = *(v35 - 2);
  *((_QWORD *)v35 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_17:
  v87 = a1 + 4968;
  *v35 = 1;
  v41 = JSC::FPRInfo::toRegister::registerForIndex[v34];
  if (v40 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill(a1, v40, v28, v29, v30, v31, v32, v33);
  if (v21 == -1)
    v21 = JSC::DFG::SpeculativeJIT::fillSpeculateDouble(a1, a2, v28, v29, v30, v31, v32, v33);
  v92 = (WTF *)v94;
  v93 = 2;
  JSC::AssemblyHelpers::branchConvertDoubleToInt52(a1, v21, v98, (uint64_t)&v92, v96, v41, v32, v33);
  v49 = *(_QWORD *)(a1 + 5616);
  v50 = *(_QWORD *)(v49 + 8);
  v51 = *(unsigned int *)(v12 + 20);
  v52 = (uint64_t *)(v50 + 24);
  v53 = (uint64_t *)(v50 + 8);
  if ((a2 & 1) != 0)
    v53 = v52;
  v54 = *v53;
  v55 = *v53 + 32 * v51;
  v56 = *(_DWORD *)(v49 + 88);
  v57 = *(_DWORD *)(v55 + 20);
  if (v56 != v57)
  {
    if ((*(_QWORD *)(v55 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v57 ^ v56) >= 2)
      {
        v75 = *(_QWORD *)v55;
        if (*(_QWORD *)v55 != 4)
        {
          *(_QWORD *)v55 = v75 | 2;
          v76 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v75 & 1) != 0)
          {
            v83 = 2 * *v76;
            while (v83 * 4)
            {
              v84 = *(_QWORD *)&v76[v83];
              if ((*(_BYTE *)(v84 + 19) & 0xC) == 0)
              {
                v85 = *(_QWORD *)(v84 + 96);
                v86 = (v85 & 1) != 0 ? (v85 >> 1) & 3 : *(unsigned __int8 *)(v85 + 4);
                v83 -= 2;
                if (v86 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v76, v42, v43, v44, v45, v46, v47, v48);
              goto LABEL_105;
            }
          }
          else if (v76)
          {
            if ((*((_BYTE *)v76 + 19) & 0xC) != 0
              || ((v77 = *((_QWORD *)v76 + 12), (v77 & 1) != 0)
                ? (v78 = (v77 >> 1) & 3)
                : (v78 = *(unsigned __int8 *)(v77 + 4)),
                  v78 == 2))
            {
LABEL_105:
              *(_QWORD *)v55 = 4;
            }
          }
        }
        *(_DWORD *)(v54 + 32 * v51 + 16) = -21020677;
      }
      if ((v56 & 1) != 0)
        *(_QWORD *)v55 &= ~2uLL;
    }
    *(_DWORD *)(v55 + 20) = v56;
  }
  if ((*(_QWORD *)(v55 + 8) & 0xFFFFFFEFFFFFFFFFLL) == 0)
    goto LABEL_37;
  v58 = HIDWORD(v93);
  v88 = (WTF *)v91;
  v89 = 2;
  v90 = HIDWORD(v93);
  if (HIDWORD(v93) < 3)
  {
    v60 = v91;
    if (HIDWORD(v93))
      goto LABEL_30;
    goto LABEL_32;
  }
  if (HIDWORD(v93) >= 0x15555556)
  {
    __break(0xC471u);
LABEL_108:
    JUMPOUT(0x197CD1FC4);
  }
  v59 = 12 * HIDWORD(v93);
  v60 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v93)));
  v89 = (v59 & 0xFFFFFFFC) / 0xC;
  v88 = (WTF *)v60;
  v58 = HIDWORD(v93);
  if (!HIDWORD(v93))
    goto LABEL_32;
LABEL_30:
  v61 = v92;
  v62 = (WTF *)((char *)v92 + 12 * v58);
  do
  {
    *(_DWORD *)v60 = *(_DWORD *)v61;
    *(_QWORD *)(v60 + 4) = *(_QWORD *)((char *)v61 + 4);
    v61 = (WTF *)((char *)v61 + 12);
    v60 += 12;
  }
  while (v61 != v62);
LABEL_32:
  JSC::DFG::SpeculativeJIT::typeCheck(a1, (void *)0xFF80000000, a2, 0x1000000000uLL, (unsigned int *)&v88, 1uLL, v47, v48);
  v63 = v88;
  if (v91 != (_BYTE *)v88 && v88 != 0)
  {
    v88 = 0;
    v89 = 0;
    WTF::fastFree((unint64_t)v63, v42, v43, v44, v45, v46, v47, v48);
  }
LABEL_37:
  v65 = v92;
  if (v94 != (_BYTE *)v92 && v92 != 0)
  {
    v92 = 0;
    LODWORD(v93) = 0;
    WTF::fastFree((unint64_t)v65, v42, v43, v44, v45, v46, v47, v48);
  }
  if (a1)
  {
    v67 = v87 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v41];
    --*(_DWORD *)(v67 + 8);
  }
  if (v95)
  {
    v68 = v96;
    if (v96 != -1)
    {
      if (v96 > 15)
        v68 = -1;
      --*(_DWORD *)(v95 + 12 * v68 + 4784);
    }
  }
  if (v97)
  {
    v69 = v98;
    if (v98 != -1)
    {
      if (v98 > 15)
        v69 = -1;
      --*(_DWORD *)(v97 + 12 * v69 + 4784);
    }
  }
  v70 = v87 + 12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v21];
  --*(_DWORD *)(v70 + 8);
}

void JSC::MacroAssemblerARM64::mulDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x1E600800;
  a1[50] += 4;
}

{
  unsigned __int8 v8;
  unsigned int v10;

  v8 = a2;
  v10 = a1[50];
  if (v10 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v10 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v10) = v8 | (32 * v8) | 0x1E600800;
  a1[50] += 4;
}

void JSC::MacroAssemblerARM64::subDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (32 * v10) | (v9 << 16) | v8 | 0x1E603800;
  a1[50] += 4;
}

void JSC::DFG::SpeculativeJIT::compileDateGet(JSC::DFG::Node *)::$_1::operator()<JSC::ExceptionOperationResult<long long> ()(JSC::VM *,JSC::DateInstance *)>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  int *v13;
  JSC::DFG::SpeculativeJIT *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _DWORD *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  _DWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  _BYTE *v86;
  WTF *v87;
  WTF *v88;
  uint64_t v89;
  char v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  JSC::DFG::Node *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  char *v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  WTF *v119;
  char *v120;
  char *v121;
  unsigned int v122;
  uint64_t v123;
  char *v124;
  WTF *v125;
  unsigned int v126;
  int v127;
  _BYTE v128[24];
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  WTF *v134;
  uint64_t v135;
  _BYTE v136[24];
  uint64_t v137;
  unsigned __int8 v138;
  char v139;
  char v140;
  unsigned __int8 v141;
  uint64_t v142;
  JSC::DFG::SpeculativeJIT *v143;
  uint64_t v144;
  char v145[9];

  v12 = &v133;
  v13 = &v131;
  v14 = *(JSC::DFG::SpeculativeJIT **)a1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v137, *(JSC::DFG::SpeculativeJIT **)a1, a3, a4, a5, a6, a7, a8);
  v21 = 0;
  v22 = (char *)v14 + 4968;
  v23 = (_DWORD *)((char *)v14 + 4976);
  v24 = 0x17u;
  v25 = -1;
  v123 = a4;
  while (*v23)
  {
LABEL_6:
    ++v21;
    v23 += 3;
    if (v21 == 23)
    {
      v21 = v24;
      v27 = &v22[12 * v24];
      v28 = *(_DWORD *)v27;
      *(_QWORD *)v27 = 0xFFFFFFFF3FFFFFFFLL;
      v23 = v27 + 8;
      goto LABEL_9;
    }
  }
  v26 = *(v23 - 1);
  if (v26 != -1)
  {
    if (v26 < v25)
    {
      v24 = v21;
      v25 = *(v23 - 1);
    }
    goto LABEL_6;
  }
  v28 = *(v23 - 2);
  *((_QWORD *)v23 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_9:
  *v23 = 1;
  v29 = JSC::FPRInfo::toRegister::registerForIndex[v21];
  if (v28 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v14, v28, v15, v16, v17, v18, v19, v20);
  v30 = 0;
  v31 = (_DWORD *)((char *)v14 + 4976);
  v32 = 0x17u;
  v33 = -1;
  v124 = (char *)v14 + 4968;
  while (2)
  {
    if (*v31)
    {
LABEL_16:
      ++v30;
      v31 += 3;
      if (v30 == 23)
      {
        v30 = v32;
        v35 = &v22[12 * v32];
        v36 = *(_DWORD *)v35;
        *(_QWORD *)v35 = 0xFFFFFFFF3FFFFFFFLL;
        v31 = v35 + 8;
        goto LABEL_19;
      }
      continue;
    }
    break;
  }
  v34 = *(v31 - 1);
  if (v34 != -1)
  {
    if (v34 < v33)
    {
      v32 = v30;
      v33 = *(v31 - 1);
    }
    goto LABEL_16;
  }
  v36 = *(v31 - 2);
  *((_QWORD *)v31 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_19:
  *v31 = 1;
  v37 = JSC::FPRInfo::toRegister::registerForIndex[v30];
  if (v36 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v14, v36, v15, v16, v17, v18, v19, v20);
  v38 = v138;
  v39 = (char)v138;
  v134 = (WTF *)v136;
  v135 = 2;
  JSC::MacroAssemblerARM64::load64((uint64_t)v14, **(unsigned __int8 **)(a1 + 8) | 0x1800000000, v39, v16, v17, v18, v19, v20);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v14, 0, v39, 0xFFFFFFFFLL, v40, v41, v42, v43, (uint64_t)&v132, v44);
  v50 = v132;
  if (v132 != -1)
  {
    v51 = HIDWORD(v135);
    if (HIDWORD(v135) == (_DWORD)v135)
    {
      v52 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v134, (void *)(HIDWORD(v135) + 1), (unint64_t)&v132, v45, v46, v47, v48, v49);
      v12 = (uint64_t *)(v52 + 1);
      v50 = *v52;
      v51 = HIDWORD(v135);
    }
    v53 = (char *)v134 + 12 * v51;
    *(_DWORD *)v53 = v50;
    *(_QWORD *)(v53 + 4) = *v12;
    ++HIDWORD(v135);
  }
  JSC::MacroAssemblerARM64::loadDouble((uint64_t)v14, **(unsigned __int8 **)(a1 + 8) | 0x1000000000, v29, v45, v46, v47, v48, v49);
  JSC::MacroAssemblerARM64::loadDouble((uint64_t)v14, v38 | (a2 << 32), v37, v54, v55, v56, v57, v58);
  v66 = *((_DWORD *)v14 + 50);
  if (v66 + 4 > *((_DWORD *)v14 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v14 + 56), v59, v60, v61, v62, v63, v64, v65);
    v66 = *((_DWORD *)v14 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v14 + 7) + v66) = (32 * v29) | ((_DWORD)v37 << 16) | 0x1E602000;
  *((_DWORD *)v14 + 50) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)v14, 1, v60, v61, v62, v63, v64, v65, (uint64_t)&v130);
  v72 = v130;
  if (v130 != -1)
  {
    v73 = HIDWORD(v135);
    if (HIDWORD(v135) == (_DWORD)v135)
    {
      v74 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v134, (void *)(HIDWORD(v135) + 1), (unint64_t)&v130, v67, v68, v69, v70, v71);
      v13 = v74 + 1;
      v72 = *v74;
      v73 = HIDWORD(v135);
    }
    v75 = (char *)v134 + 12 * v73;
    *(_DWORD *)v75 = v72;
    *(_QWORD *)(v75 + 4) = *(_QWORD *)v13;
    ++HIDWORD(v135);
  }
  JSC::MacroAssemblerARM64::load32((uint64_t)v14, v38 | (a3 << 32), v39, v67, v68, v69, v70, v71);
  v83 = *((_DWORD *)v14 + 50);
  if (v83 + 4 > *((_DWORD *)v14 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v14 + 56), v76, v77, v78, v79, v80, v81, v82);
    v83 = *((_DWORD *)v14 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v14 + 7) + v83) = v38 & 0x1F | ((v38 & 0x1F) << 16) | 0xAA000360;
  *((_DWORD *)v14 + 50) += 4;
  v84 = HIDWORD(v135);
  v125 = (WTF *)v128;
  v126 = 2;
  v127 = HIDWORD(v135);
  if (HIDWORD(v135) < 3)
  {
    v86 = v128;
    if (!HIDWORD(v135))
      goto LABEL_40;
    goto LABEL_38;
  }
  if (HIDWORD(v135) >= 0x15555556)
  {
    __break(0xC471u);
LABEL_62:
    JUMPOUT(0x197CD2778);
  }
  v85 = 12 * HIDWORD(v135);
  v86 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v135)));
  v126 = (v85 & 0xFFFFFFFC) / 0xC;
  v125 = (WTF *)v86;
  v84 = HIDWORD(v135);
  if (HIDWORD(v135))
  {
LABEL_38:
    v87 = v134;
    v88 = (WTF *)((char *)v134 + 12 * v84);
    do
    {
      *(_DWORD *)v86 = *(_DWORD *)v87;
      *(_QWORD *)(v86 + 4) = *(_QWORD *)((char *)v87 + 4);
      v87 = (WTF *)((char *)v87 + 12);
      v86 += 12;
    }
    while (v87 != v88);
  }
LABEL_40:
  v89 = *(_QWORD *)(*((_QWORD *)v14 + 44) + 16);
  v90 = **(_BYTE **)(a1 + 8);
  v145[0] = v39;
  v143 = v14;
  v144 = v89;
  v142 = v123;
  v141 = 0;
  v140 = 1;
  v139 = v90;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::DateInstance *),JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(JSC::VM *,JSC::DateInstance *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::ARM64Registers::RegisterID&>(&v129, (uint64_t *)&v125, (_DWORD **)&v143, &v142, &v141, &v140, v145, &v144, &v139);
  v98 = (_QWORD *)((char *)v14 + 5656);
  v99 = *((unsigned int *)v14 + 1417);
  if ((_DWORD)v99 == *((_DWORD *)v14 + 1416))
  {
    v101 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v98, v99 + 1, (unint64_t)&v129);
    v99 = *((unsigned int *)v14 + 1417);
    v100 = (uint64_t *)(*((_QWORD *)v14 + 707) + 8 * v99);
  }
  else
  {
    v100 = (uint64_t *)(*v98 + 8 * v99);
    v101 = &v129;
  }
  v102 = *v101;
  *v101 = 0;
  *v100 = v102;
  *((_DWORD *)v14 + 1417) = v99 + 1;
  v103 = v129;
  v129 = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  v104 = v125;
  if (v128 != (_BYTE *)v125 && v125)
  {
    v125 = 0;
    v126 = 0;
    WTF::fastFree((unint64_t)v104, v91, v92, v93, v94, v95, v96, v97);
  }
  v105 = **(JSC::DFG::Node ***)(a1 + 16);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v14, v105, v92, v93, v94, v95, v96, v97);
  v113 = (char)v38;
  if ((int)v39 > 15)
    v113 = -1;
  v114 = (char *)v14 + 12 * v113;
  v115 = *((_DWORD *)v105 + 12);
  *((_DWORD *)v114 + 1194) = v115;
  *((_DWORD *)v114 + 1195) = 4;
  v116 = ~v115;
  if (v116 >= *((unsigned int *)v14 + 1001))
  {
    __break(0xC471u);
    goto LABEL_62;
  }
  v117 = *((_QWORD *)v14 + 499) + 24 * (int)v116;
  v118 = *((_DWORD *)v105 + 13);
  *(_QWORD *)v117 = v105;
  *(_DWORD *)(v117 + 8) = v118;
  *(_BYTE *)(v117 + 17) = v39;
  *(_DWORD *)(v117 + 12) = 16;
  *(_BYTE *)(v117 + 16) = 0;
  v119 = v134;
  if (v136 != (_BYTE *)v134 && v134)
  {
    v134 = 0;
    LODWORD(v135) = 0;
    WTF::fastFree((unint64_t)v119, v106, v107, v108, v109, v110, v111, v112);
  }
  v120 = &v124[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v37]];
  --*((_DWORD *)v120 + 2);
  v121 = &v124[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v29]];
  --*((_DWORD *)v121 + 2);
  if (v137)
  {
    v122 = (char)v138;
    if ((char)v138 != -1)
    {
      if ((char)v138 > 15)
        v122 = -1;
      --*(_DWORD *)(v137 + 12 * v122 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileDateGet(JSC::DFG::Node *)::$_0::operator()<JSC::ExceptionOperationResult<long long> ()(JSC::VM *,JSC::DateInstance *),JSC::DFG::SpeculativeJIT::compileDateGet(JSC::DFG::Node *)::$_2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  int *v11;
  JSC::DFG::SpeculativeJIT *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _DWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  int *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  _BYTE *v88;
  WTF *v89;
  WTF *v90;
  uint64_t v91;
  char v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  WTF *v106;
  JSC::DFG::Node *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  char *v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  WTF *v121;
  char *v122;
  char *v123;
  unsigned int v124;
  char *v125;
  WTF *v126;
  unsigned int v127;
  int v128;
  _BYTE v129[24];
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  WTF *v135;
  uint64_t v136;
  _BYTE v137[24];
  uint64_t v138;
  unsigned __int8 v139;
  char v140;
  char v141;
  unsigned __int8 v142;
  unint64_t (*v143)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  JSC::DFG::SpeculativeJIT *v144;
  uint64_t v145;
  char v146[9];

  v10 = &v134;
  v11 = &v132;
  v12 = *(JSC::DFG::SpeculativeJIT **)a1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v138, *(JSC::DFG::SpeculativeJIT **)a1, a3, a4, a5, a6, a7, a8);
  v19 = 0;
  v20 = (char *)v12 + 4968;
  v21 = (_DWORD *)((char *)v12 + 4976);
  v22 = 0x17u;
  v23 = -1;
  while (*v21)
  {
LABEL_6:
    ++v19;
    v21 += 3;
    if (v19 == 23)
    {
      v19 = v22;
      v25 = &v20[12 * v22];
      v26 = *(_DWORD *)v25;
      *(_QWORD *)v25 = 0xFFFFFFFF3FFFFFFFLL;
      v21 = v25 + 8;
      goto LABEL_9;
    }
  }
  v24 = *(v21 - 1);
  if (v24 != -1)
  {
    if (v24 < v23)
    {
      v22 = v19;
      v23 = *(v21 - 1);
    }
    goto LABEL_6;
  }
  v26 = *(v21 - 2);
  *((_QWORD *)v21 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_9:
  *v21 = 1;
  v27 = JSC::FPRInfo::toRegister::registerForIndex[v19];
  if (v26 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v12, v26, v13, v14, v15, v16, v17, v18);
  v28 = 0;
  v29 = (_DWORD *)((char *)v12 + 4976);
  v30 = 0x17u;
  v31 = -1;
  while (2)
  {
    if (*v29)
    {
LABEL_16:
      ++v28;
      v29 += 3;
      if (v28 == 23)
      {
        v28 = v30;
        v33 = &v20[12 * v30];
        v34 = *(_DWORD *)v33;
        *(_QWORD *)v33 = 0xFFFFFFFF3FFFFFFFLL;
        v29 = v33 + 8;
        goto LABEL_19;
      }
      continue;
    }
    break;
  }
  v32 = *(v29 - 1);
  if (v32 != -1)
  {
    if (v32 < v31)
    {
      v30 = v28;
      v31 = *(v29 - 1);
    }
    goto LABEL_16;
  }
  v34 = *(v29 - 2);
  *((_QWORD *)v29 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_19:
  v125 = (char *)v12 + 4968;
  *v29 = 1;
  v35 = JSC::FPRInfo::toRegister::registerForIndex[v28];
  if (v34 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v12, v34, v13, v14, v15, v16, v17, v18);
  v36 = v139;
  v37 = (char)v139;
  v135 = (WTF *)v137;
  v136 = 2;
  JSC::MacroAssemblerARM64::load64((uint64_t)v12, **(unsigned __int8 **)(a1 + 8) | 0x1800000000, v37, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v12, 0, v37, 0xFFFFFFFFLL, v38, v39, v40, v41, (uint64_t)&v133, v42);
  v48 = v133;
  if (v133 != -1)
  {
    v49 = HIDWORD(v136);
    if (HIDWORD(v136) == (_DWORD)v136)
    {
      v50 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v135, (void *)(HIDWORD(v136) + 1), (unint64_t)&v133, v43, v44, v45, v46, v47);
      v10 = (uint64_t *)(v50 + 1);
      v48 = *v50;
      v49 = HIDWORD(v136);
    }
    v51 = (char *)v135 + 12 * v49;
    *(_DWORD *)v51 = v48;
    *(_QWORD *)(v51 + 4) = *v10;
    ++HIDWORD(v136);
  }
  JSC::MacroAssemblerARM64::loadDouble((uint64_t)v12, **(unsigned __int8 **)(a1 + 8) | 0x1000000000, v27, v43, v44, v45, v46, v47);
  JSC::MacroAssemblerARM64::loadDouble((uint64_t)v12, v36 | 0x800000000, v35, v52, v53, v54, v55, v56);
  v64 = *((_DWORD *)v12 + 50);
  if (v64 + 4 > *((_DWORD *)v12 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v12 + 56), v57, v58, v59, v60, v61, v62, v63);
    v64 = *((_DWORD *)v12 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v12 + 7) + v64) = (32 * v27) | ((_DWORD)v35 << 16) | 0x1E602000;
  *((_DWORD *)v12 + 50) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)v12, 1, v58, v59, v60, v61, v62, v63, (uint64_t)&v131);
  v70 = v131;
  if (v131 != -1)
  {
    v71 = HIDWORD(v136);
    if (HIDWORD(v136) == (_DWORD)v136)
    {
      v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v135, (void *)(HIDWORD(v136) + 1), (unint64_t)&v131, v65, v66, v67, v68, v69);
      v11 = v72 + 1;
      v70 = *v72;
      v71 = HIDWORD(v136);
    }
    v73 = (char *)v135 + 12 * v71;
    *(_DWORD *)v73 = v70;
    *(_QWORD *)(v73 + 4) = *(_QWORD *)v11;
    ++HIDWORD(v136);
  }
  JSC::MacroAssemblerARM64::load32((uint64_t)v12, v36 | 0x3000000000, v37, v65, v66, v67, v68, v69);
  if ((_DWORD)v37 == 31)
    v81 = 1262446591;
  else
    v81 = 65537 * (v36 & 0x1F) + 1258292192;
  v84 = *(_DWORD *)(a2 + 200);
  v83 = (unsigned int *)(a2 + 200);
  v82 = v84;
  if (v84 + 4 > *(v83 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v83 - 36), v74, v75, v76, v77, v78, v79, v80);
    v82 = *v83;
  }
  *(_DWORD *)(*((_QWORD *)v83 - 18) + v82) = v81;
  *v83 += 4;
  v85 = *((_DWORD *)v12 + 50);
  if (v85 + 4 > *((_DWORD *)v12 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v12 + 56), v74, v75, v76, v77, v78, v79, v80);
    v85 = *((_DWORD *)v12 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v12 + 7) + v85) = 65537 * (v36 & 0x1F) - 1442839712;
  *((_DWORD *)v12 + 50) += 4;
  v86 = HIDWORD(v136);
  v126 = (WTF *)v129;
  v127 = 2;
  v128 = HIDWORD(v136);
  if (HIDWORD(v136) < 3)
  {
    v88 = v129;
    if (!HIDWORD(v136))
      goto LABEL_44;
    goto LABEL_42;
  }
  if (HIDWORD(v136) >= 0x15555556)
  {
    __break(0xC471u);
LABEL_67:
    JUMPOUT(0x197CD2E10);
  }
  v87 = 12 * HIDWORD(v136);
  v88 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v136)));
  v127 = (v87 & 0xFFFFFFFC) / 0xC;
  v126 = (WTF *)v88;
  v86 = HIDWORD(v136);
  if (HIDWORD(v136))
  {
LABEL_42:
    v89 = v135;
    v90 = (WTF *)((char *)v135 + 12 * v86);
    do
    {
      *(_DWORD *)v88 = *(_DWORD *)v89;
      *(_QWORD *)(v88 + 4) = *(_QWORD *)((char *)v89 + 4);
      v89 = (WTF *)((char *)v89 + 12);
      v88 += 12;
    }
    while (v89 != v90);
  }
LABEL_44:
  v91 = *(_QWORD *)(*((_QWORD *)v12 + 44) + 16);
  v92 = **(_BYTE **)(a1 + 8);
  v146[0] = v37;
  v144 = v12;
  v145 = v91;
  v143 = operationDateGetTimezoneOffset;
  v142 = 0;
  v141 = 1;
  v140 = v92;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::DateInstance *),JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(JSC::VM *,JSC::DateInstance *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::ARM64Registers::RegisterID&>(&v130, (uint64_t *)&v126, (_DWORD **)&v144, (uint64_t *)&v143, &v142, &v141, v146, &v145, &v140);
  v100 = (_QWORD *)((char *)v12 + 5656);
  v101 = *((unsigned int *)v12 + 1417);
  if ((_DWORD)v101 == *((_DWORD *)v12 + 1416))
  {
    v103 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v100, v101 + 1, (unint64_t)&v130);
    v101 = *((unsigned int *)v12 + 1417);
    v102 = (uint64_t *)(*((_QWORD *)v12 + 707) + 8 * v101);
  }
  else
  {
    v102 = (uint64_t *)(*v100 + 8 * v101);
    v103 = &v130;
  }
  v104 = *v103;
  *v103 = 0;
  *v102 = v104;
  *((_DWORD *)v12 + 1417) = v101 + 1;
  v105 = v130;
  v130 = 0;
  if (v105)
    (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  v106 = v126;
  if (v129 != (_BYTE *)v126 && v126)
  {
    v126 = 0;
    v127 = 0;
    WTF::fastFree((unint64_t)v106, v93, v94, v95, v96, v97, v98, v99);
  }
  v107 = **(JSC::DFG::Node ***)(a1 + 16);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v12, v107, v94, v95, v96, v97, v98, v99);
  v115 = (char)v36;
  if ((int)v37 > 15)
    v115 = -1;
  v116 = (char *)v12 + 12 * v115;
  v117 = *((_DWORD *)v107 + 12);
  *((_DWORD *)v116 + 1194) = v117;
  *((_DWORD *)v116 + 1195) = 4;
  v118 = ~v117;
  if (v118 >= *((unsigned int *)v12 + 1001))
  {
    __break(0xC471u);
    goto LABEL_67;
  }
  v119 = *((_QWORD *)v12 + 499) + 24 * (int)v118;
  v120 = *((_DWORD *)v107 + 13);
  *(_QWORD *)v119 = v107;
  *(_DWORD *)(v119 + 8) = v120;
  *(_BYTE *)(v119 + 17) = v37;
  *(_DWORD *)(v119 + 12) = 16;
  *(_BYTE *)(v119 + 16) = 0;
  v121 = v135;
  if (v137 != (_BYTE *)v135 && v135)
  {
    v135 = 0;
    LODWORD(v136) = 0;
    WTF::fastFree((unint64_t)v121, v108, v109, v110, v111, v112, v113, v114);
  }
  v122 = &v125[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v35]];
  --*((_DWORD *)v122 + 2);
  v123 = &v125[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v27]];
  --*((_DWORD *)v123 + 2);
  if (v138)
  {
    v124 = (char)v139;
    if ((char)v139 != -1)
    {
      if ((char)v139 > 15)
        v124 = -1;
      --*(_DWORD *)(v138 + 12 * v124 + 4784);
    }
  }
}

void JSC::DFG::SpeculativeJIT::compileDateGet(JSC::DFG::Node *)::$_0::operator()<JSC::ExceptionOperationResult<long long> ()(JSC::VM *,JSC::DateInstance *),JSC::DFG::SpeculativeJIT::compileDateGet(JSC::DFG::Node *)::$_3>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  int *v11;
  JSC::DFG::SpeculativeJIT *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _DWORD *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  _DWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  int *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  _BYTE *v85;
  WTF *v86;
  WTF *v87;
  uint64_t v88;
  char v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  WTF *v103;
  JSC::DFG::Node *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  char *v113;
  int v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  WTF *v118;
  char *v119;
  char *v120;
  unsigned int v121;
  char *v122;
  WTF *v123;
  unsigned int v124;
  int v125;
  _BYTE v126[24];
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  _BYTE v134[24];
  uint64_t v135;
  unsigned __int8 v136;
  char v137;
  char v138;
  unsigned __int8 v139;
  uint64_t (*v140)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  JSC::DFG::SpeculativeJIT *v141;
  uint64_t v142;
  char v143[9];

  v10 = &v131;
  v11 = &v129;
  v12 = *(JSC::DFG::SpeculativeJIT **)a1;
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v135, *(JSC::DFG::SpeculativeJIT **)a1, a3, a4, a5, a6, a7, a8);
  v19 = 0;
  v20 = (char *)v12 + 4968;
  v21 = (_DWORD *)((char *)v12 + 4976);
  v22 = 0x17u;
  v23 = -1;
  while (*v21)
  {
LABEL_6:
    ++v19;
    v21 += 3;
    if (v19 == 23)
    {
      v19 = v22;
      v25 = &v20[12 * v22];
      v26 = *(_DWORD *)v25;
      *(_QWORD *)v25 = 0xFFFFFFFF3FFFFFFFLL;
      v21 = v25 + 8;
      goto LABEL_9;
    }
  }
  v24 = *(v21 - 1);
  if (v24 != -1)
  {
    if (v24 < v23)
    {
      v22 = v19;
      v23 = *(v21 - 1);
    }
    goto LABEL_6;
  }
  v26 = *(v21 - 2);
  *((_QWORD *)v21 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_9:
  *v21 = 1;
  v27 = JSC::FPRInfo::toRegister::registerForIndex[v19];
  if (v26 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v12, v26, v13, v14, v15, v16, v17, v18);
  v28 = 0;
  v29 = (_DWORD *)((char *)v12 + 4976);
  v30 = 0x17u;
  v31 = -1;
  while (2)
  {
    if (*v29)
    {
LABEL_16:
      ++v28;
      v29 += 3;
      if (v28 == 23)
      {
        v28 = v30;
        v33 = &v20[12 * v30];
        v34 = *(_DWORD *)v33;
        *(_QWORD *)v33 = 0xFFFFFFFF3FFFFFFFLL;
        v29 = v33 + 8;
        goto LABEL_19;
      }
      continue;
    }
    break;
  }
  v32 = *(v29 - 1);
  if (v32 != -1)
  {
    if (v32 < v31)
    {
      v30 = v28;
      v31 = *(v29 - 1);
    }
    goto LABEL_16;
  }
  v34 = *(v29 - 2);
  *((_QWORD *)v29 - 1) = 0xFFFFFFFF3FFFFFFFLL;
LABEL_19:
  v122 = (char *)v12 + 4968;
  *v29 = 1;
  v35 = JSC::FPRInfo::toRegister::registerForIndex[v28];
  if (v34 != 0x3FFFFFFF)
    JSC::DFG::SpeculativeJIT::spill((uint64_t)v12, v34, v13, v14, v15, v16, v17, v18);
  v36 = v136;
  v37 = (char)v136;
  v132 = (WTF *)v134;
  v133 = 2;
  JSC::MacroAssemblerARM64::load64((uint64_t)v12, **(unsigned __int8 **)(a1 + 8) | 0x1800000000, v37, v14, v15, v16, v17, v18);
  JSC::MacroAssemblerARM64::branchTest64((uint64_t)v12, 0, v37, 0xFFFFFFFFLL, v38, v39, v40, v41, (uint64_t)&v130, v42);
  v48 = v130;
  if (v130 != -1)
  {
    v49 = HIDWORD(v133);
    if (HIDWORD(v133) == (_DWORD)v133)
    {
      v50 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v132, (void *)(HIDWORD(v133) + 1), (unint64_t)&v130, v43, v44, v45, v46, v47);
      v10 = (uint64_t *)(v50 + 1);
      v48 = *v50;
      v49 = HIDWORD(v133);
    }
    v51 = (char *)v132 + 12 * v49;
    *(_DWORD *)v51 = v48;
    *(_QWORD *)(v51 + 4) = *v10;
    ++HIDWORD(v133);
  }
  JSC::MacroAssemblerARM64::loadDouble((uint64_t)v12, **(unsigned __int8 **)(a1 + 8) | 0x1000000000, v27, v43, v44, v45, v46, v47);
  JSC::MacroAssemblerARM64::loadDouble((uint64_t)v12, v36 | 0x800000000, v35, v52, v53, v54, v55, v56);
  v64 = *((_DWORD *)v12 + 50);
  if (v64 + 4 > *((_DWORD *)v12 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v12 + 56), v57, v58, v59, v60, v61, v62, v63);
    v64 = *((_DWORD *)v12 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v12 + 7) + v64) = (32 * v27) | ((_DWORD)v35 << 16) | 0x1E602000;
  *((_DWORD *)v12 + 50) += 4;
  JSC::MacroAssemblerARM64::jumpAfterFloatingPointCompare((uint64_t)v12, 1, v58, v59, v60, v61, v62, v63, (uint64_t)&v128);
  v70 = v128;
  if (v128 != -1)
  {
    v71 = HIDWORD(v133);
    if (HIDWORD(v133) == (_DWORD)v133)
    {
      v72 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v132, (void *)(HIDWORD(v133) + 1), (unint64_t)&v128, v65, v66, v67, v68, v69);
      v11 = v72 + 1;
      v70 = *v72;
      v71 = HIDWORD(v133);
    }
    v73 = (char *)v132 + 12 * v71;
    *(_DWORD *)v73 = v70;
    *(_QWORD *)(v73 + 4) = *(_QWORD *)v11;
    ++HIDWORD(v133);
  }
  JSC::MacroAssemblerARM64::load32((uint64_t)v12, v36 | 0x1000000000, v37, v65, v66, v67, v68, v69);
  v81 = a2[50];
  if (v81 + 4 > a2[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 14), v74, v75, v76, v77, v78, v79, v80);
    v81 = a2[50];
  }
  *(_DWORD *)(*((_QWORD *)a2 + 7) + v81) = v37 | (32 * v37) | 0x511DB000;
  a2[50] += 4;
  v82 = *((_DWORD *)v12 + 50);
  if (v82 + 4 > *((_DWORD *)v12 + 48))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)v12 + 56), v74, v75, v76, v77, v78, v79, v80);
    v82 = *((_DWORD *)v12 + 50);
  }
  *(_DWORD *)(*((_QWORD *)v12 + 7) + v82) = v36 & 0x1F | ((v36 & 0x1F) << 16) | 0xAA000360;
  *((_DWORD *)v12 + 50) += 4;
  v83 = HIDWORD(v133);
  v123 = (WTF *)v126;
  v124 = 2;
  v125 = HIDWORD(v133);
  if (HIDWORD(v133) < 3)
  {
    v85 = v126;
    if (!HIDWORD(v133))
      goto LABEL_42;
    goto LABEL_40;
  }
  if (HIDWORD(v133) >= 0x15555556)
  {
    __break(0xC471u);
LABEL_64:
    JUMPOUT(0x197CD3484);
  }
  v84 = 12 * HIDWORD(v133);
  v85 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v133)));
  v124 = (v84 & 0xFFFFFFFC) / 0xC;
  v123 = (WTF *)v85;
  v83 = HIDWORD(v133);
  if (HIDWORD(v133))
  {
LABEL_40:
    v86 = v132;
    v87 = (WTF *)((char *)v132 + 12 * v83);
    do
    {
      *(_DWORD *)v85 = *(_DWORD *)v86;
      *(_QWORD *)(v85 + 4) = *(_QWORD *)((char *)v86 + 4);
      v86 = (WTF *)((char *)v86 + 12);
      v85 += 12;
    }
    while (v86 != v87);
  }
LABEL_42:
  v88 = *(_QWORD *)(*((_QWORD *)v12 + 44) + 16);
  v89 = **(_BYTE **)(a1 + 8);
  v143[0] = v37;
  v141 = v12;
  v142 = v88;
  v140 = operationDateGetYear;
  v139 = 0;
  v138 = 1;
  v137 = v89;
  std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::DateInstance *),JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(JSC::VM *,JSC::DateInstance *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::ARM64Registers::RegisterID&>(&v127, (uint64_t *)&v123, (_DWORD **)&v141, (uint64_t *)&v140, &v139, &v138, v143, &v142, &v137);
  v97 = (_QWORD *)((char *)v12 + 5656);
  v98 = *((unsigned int *)v12 + 1417);
  if ((_DWORD)v98 == *((_DWORD *)v12 + 1416))
  {
    v100 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v97, v98 + 1, (unint64_t)&v127);
    v98 = *((unsigned int *)v12 + 1417);
    v99 = (uint64_t *)(*((_QWORD *)v12 + 707) + 8 * v98);
  }
  else
  {
    v99 = (uint64_t *)(*v97 + 8 * v98);
    v100 = &v127;
  }
  v101 = *v100;
  *v100 = 0;
  *v99 = v101;
  *((_DWORD *)v12 + 1417) = v98 + 1;
  v102 = v127;
  v127 = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  v103 = v123;
  if (v126 != (_BYTE *)v123 && v123)
  {
    v123 = 0;
    v124 = 0;
    WTF::fastFree((unint64_t)v103, v90, v91, v92, v93, v94, v95, v96);
  }
  v104 = **(JSC::DFG::Node ***)(a1 + 16);
  JSC::DFG::SpeculativeJIT::useChildren((uint64_t *)v12, v104, v91, v92, v93, v94, v95, v96);
  v112 = (char)v36;
  if ((int)v37 > 15)
    v112 = -1;
  v113 = (char *)v12 + 12 * v112;
  v114 = *((_DWORD *)v104 + 12);
  *((_DWORD *)v113 + 1194) = v114;
  *((_DWORD *)v113 + 1195) = 4;
  v115 = ~v114;
  if (v115 >= *((unsigned int *)v12 + 1001))
  {
    __break(0xC471u);
    goto LABEL_64;
  }
  v116 = *((_QWORD *)v12 + 499) + 24 * (int)v115;
  v117 = *((_DWORD *)v104 + 13);
  *(_QWORD *)v116 = v104;
  *(_DWORD *)(v116 + 8) = v117;
  *(_BYTE *)(v116 + 17) = v37;
  *(_DWORD *)(v116 + 12) = 16;
  *(_BYTE *)(v116 + 16) = 0;
  v118 = v132;
  if (v134 != (_BYTE *)v132 && v132)
  {
    v132 = 0;
    LODWORD(v133) = 0;
    WTF::fastFree((unint64_t)v118, v105, v106, v107, v108, v109, v110, v111);
  }
  v119 = &v122[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v35]];
  --*((_DWORD *)v119 + 2);
  v120 = &v122[12 * JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[(int)v27]];
  --*((_DWORD *)v120 + 2);
  if (v135)
  {
    v121 = (char)v136;
    if ((char)v136 != -1)
    {
      if ((char)v136 > 15)
        v121 = -1;
      --*(_DWORD *)(v135 + 12 * v121 + 4784);
    }
  }
}

void JSC::MacroAssemblerARM64::moveDoubleConditionallyDouble(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  JSC::AssemblerBuffer *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a2;
  v14 = (JSC::AssemblerBuffer *)(a1 + 14);
  v15 = a1[50];
  if (v15 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v15 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v15) = (32 * v12) | (v11 << 16) | 0x1E602000;
  v16 = a1[50];
  v17 = v16 + 4;
  a1[50] = v16 + 4;
  if ((v16 + 8) > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow(v14, a2, a3, a4, a5, a6, a7, a8);
    v17 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v17) = (32 * v10) | (v9 << 16) | v8 | 0x1E608C00;
  a1[50] += 4;
}

void JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID,decltype(nullptr)>(uint64_t *a1, uint64_t *a2, _DWORD *a3, int a4, char a5, uint64_t a6, uint64_t a7, char a8, char a9, char a10, char a11)
{
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _BYTE *v25;
  WTF *v26;
  WTF *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  WTF *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  WTF *v43;
  char v44;
  WTF *v45;
  unsigned int v46;
  _BYTE v47[24];
  WTF *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE v51[24];
  WTF *v52;
  unsigned int v53;
  unsigned int v54;
  _BYTE v55[24];

  v19 = *((unsigned int *)a2 + 3);
  v45 = (WTF *)v47;
  v46 = v19;
  if (v19 < 3)
  {
    v20 = v47;
    if (!(_DWORD)v19)
      goto LABEL_8;
  }
  else
  {
    if (v19 >= 0x15555556)
      goto LABEL_35;
    v20 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v19));
    v45 = (WTF *)v20;
    LODWORD(v19) = *((_DWORD *)a2 + 3);
    if (!(_DWORD)v19)
      goto LABEL_8;
  }
  v21 = *a2;
  v22 = *a2 + 12 * v19;
  do
  {
    *(_DWORD *)v20 = *(_DWORD *)v21;
    *(_QWORD *)(v20 + 4) = *(_QWORD *)(v21 + 4);
    v21 += 12;
    v20 += 12;
  }
  while (v21 != v22);
LABEL_8:
  v23 = WTF::fastMalloc((WTF *)0xC8);
  v24 = v46;
  v25 = v51;
  v48 = (WTF *)v51;
  v49 = 2;
  v50 = v46;
  if (v46 >= 3)
  {
    if (v46 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CD3894);
    }
    v25 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v46));
    v49 = 12 * v46 / 0xC;
    v48 = (WTF *)v25;
    v24 = v46;
  }
  if (v24)
  {
    v26 = v45;
    v27 = (WTF *)((char *)v45 + 12 * v24);
    do
    {
      *(_DWORD *)v25 = *(_DWORD *)v26;
      *(_QWORD *)(v25 + 4) = *(_QWORD *)((char *)v26 + 4);
      v26 = (WTF *)((char *)v26 + 12);
      v25 += 12;
    }
    while (v26 != v27);
  }
  v28 = v50;
  v52 = (WTF *)v55;
  v53 = 2;
  v54 = v50;
  v44 = a5;
  if (v50 >= 3)
  {
    if (v50 < 0x15555556)
    {
      v29 = a6;
      v30 = 12 * v50;
      v31 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v50));
      v53 = (v30 & 0xFFFFFFFC) / 0xC;
      v52 = (WTF *)v31;
      v28 = v50;
      goto LABEL_18;
    }
LABEL_35:
    __break(0xC471u);
    JUMPOUT(0x197CD388CLL);
  }
  v29 = a6;
  v31 = v55;
LABEL_18:
  if (v28)
  {
    v32 = v48;
    v33 = (WTF *)((char *)v48 + 12 * v28);
    do
    {
      *(_DWORD *)v31 = *(_DWORD *)v32;
      *(_QWORD *)(v31 + 4) = *(_QWORD *)((char *)v32 + 4);
      v32 = (WTF *)((char *)v32 + 12);
      v31 += 12;
    }
    while (v32 != v33);
  }
  JSC::DFG::CallSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::ARM64Registers::RegisterID>::CallSlowPathGenerator(v23, (uint64_t *)&v52, a3, 0, 0, a7);
  v41 = v52;
  if (v55 != (_BYTE *)v52 && v52 != 0)
  {
    v52 = 0;
    v53 = 0;
    WTF::fastFree((unint64_t)v41, v34, v35, v36, v37, v38, v39, v40);
  }
  *(_QWORD *)v23 = &off_1E3574FB0;
  *(_BYTE *)(v23 + 152) = v44;
  *(_QWORD *)(v23 + 156) = v29;
  *(_QWORD *)(v23 + 168) = operationGetByValWithThisOptimize;
  *(_BYTE *)(v23 + 176) = a8;
  *(_BYTE *)(v23 + 177) = a9;
  *(_BYTE *)(v23 + 178) = a10;
  *(_BYTE *)(v23 + 179) = a11;
  *(_QWORD *)(v23 + 184) = 0;
  *(_DWORD *)(v23 + 192) = a4;
  *a1 = v23;
  v43 = v48;
  if (v51 != (_BYTE *)v48 && v48)
  {
    v48 = 0;
    v49 = 0;
    WTF::fastFree((unint64_t)v43, v34, v35, v36, v37, v38, v39, v40);
  }
  if (v47 != (_BYTE *)v45)
  {
    if (v45)
      WTF::fastFree((unint64_t)v45, v34, v35, v36, v37, v38, v39, v40);
  }
}

void JSC::DFG::SpeculativeJIT::callOperation<JSC::ExceptionOperationResult<JSC::JSBoundFunction *> (*)(JSC::JSGlobalObject *,JSC::JSObject *,long long,long long,long long,long long),JSC::ARM64Registers::RegisterID,JSC::DFG::JITCompiler::LinkableConstant,JSC::ARM64Registers::RegisterID,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, JSC::ARM64LogicalImmediate *this, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v12;
  int *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint8x8_t v22;
  __int32 v23;
  uint8x8_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v34;
  char v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  char v62;
  JSC::AssemblerBuffer *v63;
  char v64;
  void *__dst;
  uint64_t v66;
  _WORD v67[8];

  v12 = a3;
  v14 = (int *)a1;
  __dst = v67;
  v66 = 5;
  if ((_DWORD)a6 == 1)
  {
    v15 = 0;
  }
  else
  {
    v67[0] = a6 | 0x100;
    v15 = 1;
    HIDWORD(v66) = 1;
  }
  if (a7 != 2)
  {
    v67[v15++] = a7 | 0x200;
    HIDWORD(v66) = v15;
  }
  if (a8 != 3)
  {
    v67[v15++] = a8 | 0x300;
    HIDWORD(v66) = v15;
  }
  if (a9 != 4)
  {
    v67[v15++] = a9 | 0x400;
    HIDWORD(v66) = v15;
  }
  if (a10 == 5)
  {
    if (!v15)
      goto LABEL_54;
  }
  else
  {
    v67[v15++] = a10 | 0x500;
    HIDWORD(v66) = v15;
  }
  v63 = (JSC::AssemblerBuffer *)(a2 + 56);
  do
  {
    while (2)
    {
      v16 = 0;
      v17 = 0;
      v18 = (char *)__dst;
      v19 = v15;
      do
      {
        if ((*((_BYTE *)__dst + v16 + 1) & 0x40) != 0)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        v17 |= 1 << *((_BYTE *)__dst + v16 + 1);
        v16 += 2;
      }
      while (2 * v15 != v16);
      v20 = 0;
      do
      {
        v21 = *((_BYTE *)__dst + v20) & 0x7F;
        if (v21 >= 0x40)
          goto LABEL_65;
        v17 &= ~(1 << v21);
        v20 += 2;
      }
      while (2 * v15 != v20);
      v22 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
      v22.i16[0] = vaddlv_u8(v22);
      v23 = v22.i32[0];
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)HIDWORD(v17));
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.i32[0] + v23)
      {
        v25 = 0;
        if (v15 <= 1)
          v26 = 1;
        else
          v26 = v15;
        v27 = 2 * v26;
        while (1)
        {
          v28 = *((unsigned __int8 *)__dst + v25 + 1);
          if ((v28 & 0x7Fu) >= 0x40)
            goto LABEL_65;
          if (((v17 >> (v28 & 0x7F)) & 1) != 0)
            break;
          v25 += 2;
          if (v27 == v25)
            goto LABEL_44;
        }
        v29 = *((unsigned __int8 *)__dst + v25);
        if (v29 != v28)
        {
          v30 = (char)v29;
          if ((char)v29 == 63)
          {
            v31 = *(_DWORD *)(a2 + 200);
            v32 = *(_DWORD *)(a2 + 192);
            if (v28 == 31)
              goto LABEL_48;
            v34 = v28 & 0x1F | 0xD2800000;
          }
          else
          {
            v31 = *(_DWORD *)(a2 + 200);
            v32 = *(_DWORD *)(a2 + 192);
            if ((char)v28 != 31 && v30 != 31)
            {
              v34 = v28 & 0xFFE0FFFF | ((v30 & 0x1F) << 16) | 0xAA0003E0;
              goto LABEL_49;
            }
LABEL_48:
            v34 = (char)v28 | (32 * v30) | 0x91000000;
          }
LABEL_49:
          if (v31 + 4 > v32)
          {
            JSC::AssemblerBuffer::outOfLineGrow(v63, a2, a3, a4, (uint64_t)this, a6, a7, a8);
            v31 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = v34;
          *(_DWORD *)(a2 + 200) += 4;
          v18 = (char *)__dst;
          v19 = HIDWORD(v66);
        }
        a1 = (unint64_t)memmove(&v18[v25], &v18[v25 + 2], 2 * v19 - v25 - 2);
        v15 = HIDWORD(v66) - 1;
        HIDWORD(v66) = v15;
        if (v15)
          continue;
        goto LABEL_53;
      }
      break;
    }
    v35 = *(_BYTE *)__dst;
    v62 = *((_BYTE *)__dst + 1);
    JSC::MacroAssemblerARM64::swap(a2, *(char *)__dst, v62, a4, (uint64_t)this, a6, a7, a8);
    memmove(__dst, (char *)__dst + 2, 2 * HIDWORD(v66) - 2);
    v36 = --HIDWORD(v66);
    if (HIDWORD(v66))
    {
      v37 = __dst;
      v38 = 2 * v36;
      while (*v37 != v62)
      {
        v37 += 2;
        v38 -= 2;
        if (!v38)
          goto LABEL_43;
      }
      *v37 = v35;
    }
LABEL_43:
    a1 = WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,5ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,5u>(std::array<JSC::ARM64Registers::RegisterID,5u>,std::array<JSC::ARM64Registers::RegisterID,5u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>((uint64_t *)&__dst, (uint64_t)&v64, 0);
    v15 = HIDWORD(v66);
LABEL_44:
    ;
  }
  while (v15);
LABEL_53:
  a1 = (unint64_t)__dst;
  if (v67 == __dst)
    goto LABEL_54;
LABEL_66:
  if (a1)
  {
    __dst = 0;
    LODWORD(v66) = 0;
    WTF::fastFree(a1, (void *)a2, a3, a4, (uint64_t)this, a6, a7, a8);
  }
LABEL_54:
  if ((_DWORD)a4 == -1)
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)this, 0, a4, (uint64_t)this, a6, a7, a8);
  else
    JSC::MacroAssemblerARM64::load64(a2, (a4 << 35) + 0x380000001ALL, 0, a4, (uint64_t)this, a6, a7, a8);
  JSC::DFG::SpeculativeJIT::appendCall(a2, (uint64_t)operationFunctionBind, v39, v40, v41, v42, v43, v44, v14);
  JSC::DFG::SpeculativeJIT::exceptionCheck(a2, 1, v45, v46, v47, v48, v49, v50);
  if (v12)
  {
    if (v12 == 31)
    {
      v58 = -1862270945;
    }
    else if (v12 == -1)
    {
      v58 = -1442774017;
    }
    else
    {
      v58 = v12 | 0xAA0003E0;
    }
    v61 = *(_DWORD *)(a2 + 200);
    v60 = (unsigned int *)(a2 + 200);
    v59 = v61;
    if (v61 + 4 > *(v60 - 2))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v60 - 36), v51, v52, v53, v54, v55, v56, v57);
      v59 = *v60;
    }
    *(_DWORD *)(*((_QWORD *)v60 - 18) + v59) = v58;
    *v60 += 4;
  }
}

void JSC::DFG::SpeculativeJIT::compileEnumeratorPutByVal(JSC::DFG::Node *)::$_0::operator()(uint64_t *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int8x8_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  unsigned __int8 *v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  WTF **v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  _DWORD *v100;
  uint64_t *v101;
  int v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  int v112;
  WTF **v113;
  uint64_t v114;
  uint64_t *v115;
  int *v116;
  int *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  WTF **v137;
  uint64_t v138;
  uint64_t *v139;
  _DWORD *v140;
  uint64_t *v141;
  int v142;
  uint64_t v143;
  unsigned int v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int8x8_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  BOOL v158;
  WTF **v159;
  uint64_t v160;
  uint64_t *v161;
  int *v162;
  int *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int i;
  unsigned int v182;
  char v183;
  int *v184;
  int *v185;
  int v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  char v197;
  uint64_t v198;
  unsigned int *v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t *v213;
  unsigned int v214;
  int v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int j;
  unsigned int v230;
  char v231;
  int *v232;
  int *v233;
  int v234;
  char *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t k;
  uint64_t v244;
  uint64_t v245;
  uint64_t m;
  uint64_t v247;
  unsigned int v248;
  char v249;
  uint64_t v250;
  unsigned int *v251;
  unsigned int v252;
  uint64_t v253;
  unsigned int *v254;
  unsigned int v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  void *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t (*v276)(uint64_t, unint64_t, const WTF::StringImpl *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, __n128);
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unsigned int v282;
  _DWORD *v283;
  uint64_t *v284;
  int v285;
  _DWORD *v286;
  uint64_t *v287;
  unsigned int v288;
  int v289;
  _BYTE *v290;
  _DWORD *v291;
  unsigned int v292;
  int v293;
  _BYTE *v294;
  __int128 *v295;
  __int128 *v296;
  void *v297;
  JSC::DFG::Node *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  WTF *v305;
  __int128 *v307;
  __int128 *v308;
  char v309;
  int v310;
  int v311;
  int v312;
  int v313;
  int v314;
  __int16 v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  __int128 v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t *v323;
  uint64_t v324;
  unint64_t v325;
  _BYTE *v326;
  WTF *v327;
  WTF *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  unsigned int v332;
  int *v333;
  WTF *v334;
  WTF *v335;
  uint64_t v336;
  int v337;
  int v338;
  _BYTE *v339;
  int *v340;
  int *v341;
  unsigned int v342;
  uint64_t v343;
  int v344;
  _BYTE *v345;
  __int128 *v346;
  __int128 *v347;
  unsigned int v348;
  int v349;
  _BYTE *v350;
  uint64_t v351;
  uint64_t v352;
  void *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t *v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  WTF *v372;
  unsigned int v374;
  unsigned int v375;
  unsigned int v376;
  char v377;
  char v378;
  unsigned int v379;
  unsigned int v380;
  WTF *v381;
  WTF *v382;
  BOOL v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  BOOL v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  JSC::AssemblerBuffer *v396;
  JSC::AssemblerBuffer *v397;
  int v398;
  unsigned __int8 v399;
  uint64_t v400;
  char v401;
  unsigned __int8 v402;
  int v404;
  _BOOL4 v405;
  char v406;
  _QWORD *v407;
  uint64_t *v408;
  unsigned __int8 v409;
  WTF *v410;
  unsigned int v411;
  _BYTE v412[24];
  uint64_t v413;
  uint64_t v414;
  WTF *v415;
  unsigned int v416;
  unsigned int v417;
  _BYTE v418[28];
  int v419;
  uint64_t v420;
  WTF *v421;
  unsigned int v422;
  int v423;
  _BYTE v424[24];
  uint64_t v425;
  __int128 v426;
  _BYTE v427[4];
  int v428;
  uint64_t v429;
  uint64_t v430;
  __int16 v431;
  int v432;
  uint64_t v433;
  _QWORD v434[2];
  uint64_t v435;
  int v436;
  int v437;
  char v438;
  __int16 v439;
  char v440;
  int v441;
  int v442;
  char v443;
  __int16 v444;
  char v445;
  int v446;
  int v447;
  int v448;
  uint64_t v449;
  int v450;
  int v451;
  int v452;
  uint64_t v453;
  WTF *v454;
  uint64_t v455;
  _BYTE v456[24];
  uint64_t v457;
  unsigned __int8 v458;
  uint64_t v459;
  unsigned __int8 v460;
  _QWORD v461[2];
  char v462;
  _QWORD v463[2];
  char v464;
  _QWORD v465[2];
  char v466;
  WTF *v467;
  uint64_t v468;
  _BYTE v469[24];
  WTF *v470;
  uint64_t v471;
  _BYTE v472[24];
  __int128 v473;
  _BYTE v474[4];
  int v475;
  uint64_t v476;
  uint64_t v477;
  __int16 v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  int *v482;
  uint64_t v483;
  int v484[6];
  __int128 *v485;
  uint64_t v486;
  _BYTE v487[40];

  v470 = (WTF *)v472;
  v471 = 2;
  v467 = (WTF *)v469;
  v468 = 2;
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 3960);
  v10 = *(_DWORD *)(*(_QWORD *)a1[1] + 24) + 1;
  if (*(_DWORD *)(v9 + 164) <= v10)
  {
    __break(0xC471u);
    JUMPOUT(0x197CD59D8);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v465, (JSC::DFG::SpeculativeJIT *)v8, *(_QWORD *)(*(_QWORD *)(v9 + 152) + 8 * v10), a4, a5, a6, a7, a8);
  v17 = *(_QWORD *)(v8 + 3960);
  v18 = *(_DWORD *)(*(_QWORD *)a1[1] + 24) + 2;
  if (*(_DWORD *)(v17 + 164) <= v18)
  {
    __break(0xC471u);
    JUMPOUT(0x197CD59E0);
  }
  JSC::DFG::JSValueOperand::JSValueOperand((uint64_t)v463, (JSC::DFG::SpeculativeJIT *)v8, *(_QWORD *)(*(_QWORD *)(v17 + 152) + 8 * v18), v12, v13, v14, v15, v16);
  v24 = *(_QWORD *)(v8 + 3960);
  v25 = *(_DWORD *)(*(_QWORD *)a1[1] + 24);
  v26 = *(_DWORD *)(v24 + 164);
  if (v26 <= v25 + 4)
  {
    __break(0xC471u);
    JUMPOUT(0x197CD59E8);
  }
  v27 = *(_QWORD *)(*(_QWORD *)(v24 + 152) + 8 * (v25 + 4));
  v28 = ~*(_DWORD *)((v27 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v28 >= *(unsigned int *)(v8 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD59F0);
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 3992) + 24 * (int)v28 + 12))
  {
    LOBYTE(v473) = 0;
    v29 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(v8, v27, (uint64_t)&v473, v19, v20, v21, v22, v23);
    if (v473 != 1)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v8 + 3960), *(JSC::DFG::Node **)(v8 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
      __break(0xC471u);
      JUMPOUT(0x197CD5A4CLL);
    }
    v30 = v29;
    v24 = *(_QWORD *)(v8 + 3960);
    v25 = *(_DWORD *)(*(_QWORD *)a1[1] + 24);
    v26 = *(_DWORD *)(v24 + 164);
  }
  else
  {
    v30 = -1;
  }
  if (v26 <= v25 + 5)
  {
    __break(0xC471u);
    JUMPOUT(0x197CD59F8);
  }
  v31 = *(_QWORD *)(*(_QWORD *)(v24 + 152) + 8 * (v25 + 5));
  v32 = ~*(_DWORD *)((v31 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
  if (v32 >= *(unsigned int *)(v8 + 4004))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD5A00);
  }
  if (*(_BYTE *)(*(_QWORD *)(v8 + 3992) + 24 * (int)v32 + 12))
  {
    LOBYTE(v473) = 0;
    v33 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(v8, v31, (uint64_t)&v473, v19, v20, v21, v22, v23);
    if (v473 != 1)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v8 + 3960), *(JSC::DFG::Node **)(v8 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
      __break(0xC471u);
      JUMPOUT(0x197CD5A80);
    }
    v34 = v33;
    v24 = *(_QWORD *)(v8 + 3960);
    v25 = *(_DWORD *)(*(_QWORD *)a1[1] + 24);
    v26 = *(_DWORD *)(v24 + 164);
  }
  else
  {
    v34 = -1;
  }
  v35 = v25 + 6;
  if (v26 <= v35)
  {
    __break(0xC471u);
    JUMPOUT(0x197CD5A08);
  }
  JSC::DFG::SpeculateCellOperand::SpeculateCellOperand((uint64_t)v461, (JSC::DFG::SpeculativeJIT *)v8, *(_QWORD *)(*(_QWORD *)(v24 + 152) + 8 * v35), v19, v20, v21, v22, v23);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v459, (JSC::DFG::SpeculativeJIT *)v8, v36, v37, v38, v39, v40, v41);
  JSC::DFG::GPRTemporary::GPRTemporary((JSC::DFG::GPRTemporary *)&v457, (JSC::DFG::SpeculativeJIT *)v8, v42, v43, v44, v45, v46, v47);
  v409 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v463, v48, v49, v50, v51, v52, v53, v54);
  v69 = JSC::DFG::JSValueOperand::gpr((JSC::DFG::JSValueOperand *)v465, v55, v56, v57, v58, v59, v60, v61);
  if (v34 == -1)
  {
    LOBYTE(v473) = 0;
    v70 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(v8, v31, (uint64_t)&v473, v64, v65, v66, v67, v68);
    if (v473 != 1)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v8 + 3960), *(JSC::DFG::Node **)(v8 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
      __break(0xC471u);
      JUMPOUT(0x197CD5AB4);
    }
    v34 = v70;
  }
  if (v30 == -1)
  {
    LOBYTE(v473) = 0;
    v71 = JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal<true>(v8, v27, (uint64_t)&v473, v64, v65, v66, v67, v68);
    if (v473 != 1)
    {
      JSC::DFG::Graph::logAssertionFailure(*(JSC::DFG::Graph **)(v8 + 3960), *(JSC::DFG::Node **)(v8 + 3976), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x520, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(Edge)", "mustBeDataFormatInt32 == DataFormatInt32");
      __break(0xC471u);
      JUMPOUT(0x197CD5AE8);
    }
    v30 = v71;
  }
  v402 = JSC::DFG::SpeculateCellOperand::gpr((JSC::DFG::SpeculateCellOperand *)v461, v62, v63, v64, v65, v66, v67, v68);
  v77 = v460;
  v78 = (_QWORD *)a1[1];
  v79 = *v78;
  v80 = *(unsigned __int16 *)(*v78 + 18);
  if (v80 == 6)
    goto LABEL_23;
  if (*(unsigned __int16 *)(*v78 + 18) <= 0x74u)
  {
    if ((v80 - 101) >= 4)
    {
LABEL_371:
      __break(0xC471u);
      JUMPOUT(0x197CD5950);
    }
  }
  else
  {
    v197 = v80 - 117;
    if ((v80 - 117) <= 0x3C)
    {
      if (((1 << v197) & 0x100000000000201FLL) != 0)
        goto LABEL_110;
      if (((1 << v197) & 0x4020) != 0)
        goto LABEL_23;
    }
    if (v80 != 391)
    {
      if (v80 != 253)
        goto LABEL_371;
LABEL_23:
      v81 = (unsigned __int8 *)(v79 + 72);
      goto LABEL_24;
    }
  }
LABEL_110:
  v81 = (unsigned __int8 *)(v79 + 80);
LABEL_24:
  v404 = *v81;
  v454 = (WTF *)v456;
  v455 = 2;
  v82 = *(_QWORD *)(v8 + 3960);
  v83 = *(_DWORD *)(*v78 + 24);
  v84 = v83 + 1;
  v85 = *(_DWORD *)(v82 + 164);
  if (v85 <= v83 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x197CD5A10);
  }
  v399 = v69;
  v400 = v458;
  v408 = a1;
  v406 = v30;
  v86 = v83 + 4;
  if (v85 <= v86)
  {
    __break(0xC471u);
    JUMPOUT(0x197CD5A18);
  }
  v87 = *(_QWORD *)(v82 + 152);
  v88 = *(_QWORD *)(v87 + 8 * v84) & 0xFF00FFFFFFFFFFFFLL;
  v89 = *(_QWORD *)(v87 + 8 * v86) & 0xFF00FFFFFFFFFFFFLL;
  if (v88 == v89)
    v90 = &v467;
  else
    v90 = &v454;
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)5, v8, 1, v34, v72, v73, v74, v75, (uint64_t)&v452, v76);
  v98 = v452;
  if (v452 != -1)
  {
    v99 = HIDWORD(v455);
    if (HIDWORD(v455) == (_DWORD)v455)
    {
      v100 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v454, (void *)(HIDWORD(v455) + 1), (unint64_t)&v452, v93, v94, v95, v96, v97);
      v102 = *v100;
      v101 = (uint64_t *)(v100 + 1);
      v98 = v102;
      v99 = HIDWORD(v455);
    }
    else
    {
      v101 = &v453;
    }
    v103 = (char *)v454 + 12 * v99;
    *(_DWORD *)v103 = v98;
    *(_QWORD *)(v103 + 4) = *v101;
    ++HIDWORD(v455);
  }
  v104 = *(_QWORD *)v408[2];
  v105 = *(_QWORD *)(v8 + 5504);
  v106 = *(unsigned int *)((v104 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v401 = v34;
  v398 = v34;
  if ((v104 & 1) != 0)
    v107 = (uint64_t *)(v105 + 24);
  else
    v107 = (uint64_t *)(v105 + 8);
  v108 = *v107;
  v109 = *v107 + 32 * v106;
  v110 = *(_DWORD *)(v8 + 5584);
  v111 = *(_DWORD *)(v109 + 20);
  if (v110 != v111)
  {
    if ((*(_QWORD *)(v109 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v111 ^ v110) >= 2)
      {
        v198 = *(_QWORD *)v109;
        if (*(_QWORD *)v109 != 4)
        {
          *(_QWORD *)v109 = v198 | 2;
          v199 = (unsigned int *)(v198 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v198 & 1) != 0)
          {
            v389 = 2 * *v199;
            while (v389 * 4)
            {
              v390 = *(_QWORD *)&v199[v389];
              if ((*(_BYTE *)(v390 + 19) & 0xC) == 0)
              {
                v391 = *(_QWORD *)(v390 + 96);
                v392 = (v391 & 1) != 0 ? (v391 >> 1) & 3 : *(unsigned __int8 *)(v391 + 4);
                v389 -= 2;
                if (v392 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v199, v91, v92, v93, v94, v95, v96, v97);
              goto LABEL_360;
            }
          }
          else if (v199)
          {
            if ((*((_BYTE *)v199 + 19) & 0xC) != 0
              || ((v200 = *((_QWORD *)v199 + 12), (v200 & 1) != 0)
                ? (v201 = (v200 >> 1) & 3)
                : (v201 = *(unsigned __int8 *)(v200 + 4)),
                  v201 == 2))
            {
LABEL_360:
              *(_QWORD *)v109 = 4;
            }
          }
        }
        *(_DWORD *)(v108 + 32 * v106 + 16) = -21020677;
      }
      if ((v110 & 1) != 0)
        *(_QWORD *)v109 &= ~2uLL;
    }
    *(_DWORD *)(v109 + 20) = v110;
  }
  if ((*(_QWORD *)(v109 + 8) & 0xFFFFD7FF00000008) != 0)
  {
    JSC::AssemblyHelpers::branchIfNotCell(v8, a2, 1, v93, v94, v95, v96, v97, (uint64_t)&v450);
    v112 = v450;
    if (v450 != -1)
    {
      if (v88 == v89)
        v113 = &v467;
      else
        v113 = &v454;
      v114 = *((unsigned int *)v113 + 3);
      v115 = &v455;
      if (v88 == v89)
        v115 = &v468;
      if ((_DWORD)v114 == *(_DWORD *)v115)
      {
        v116 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v90, (void *)(v114 + 1), (unint64_t)&v450, v93, v94, v95, v96, v97);
        v118 = *v116;
        v117 = v116 + 1;
        v112 = v118;
        LODWORD(v114) = *((_DWORD *)v113 + 3);
      }
      else
      {
        v117 = &v451;
      }
      v119 = (uint64_t)*v90 + 12 * v114;
      *(_DWORD *)v119 = v112;
      *(_QWORD *)(v119 + 4) = *(_QWORD *)v117;
      ++*((_DWORD *)v113 + 3);
    }
  }
  JSC::MacroAssemblerARM64::load32(v8, a2, (char)v77, v93, v94, v95, v96, v97);
  if (!*(_BYTE *)(v8 + 212))
  {
    __break(0xC471u);
    goto LABEL_401;
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
  JSC::MacroAssemblerARM64::load32(v8, v402 | 0x1000000000, *(char *)(v8 + 304), v120, v121, v122, v123, v124);
  JSC::MacroAssemblerARM64::branch32(v8, 1, (char)v77, 17, v125, v126, v127, v128, (uint64_t)&v448);
  v136 = v448;
  if (v448 != -1)
  {
    if (v88 == v89)
      v137 = &v467;
    else
      v137 = &v454;
    v138 = *((unsigned int *)v137 + 3);
    v139 = &v455;
    if (v88 == v89)
      v139 = &v468;
    if ((_DWORD)v138 == *(_DWORD *)v139)
    {
      v140 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v90, (void *)(v138 + 1), (unint64_t)&v448, v131, v132, v133, v134, v135);
      v142 = *v140;
      v141 = (uint64_t *)(v140 + 1);
      v136 = v142;
      LODWORD(v138) = *((_DWORD *)v137 + 3);
    }
    else
    {
      v141 = &v449;
    }
    v143 = (uint64_t)*v90 + 12 * v138;
    *(_DWORD *)v143 = v136;
    *(_QWORD *)(v143 + 4) = *v141;
    ++*((_DWORD *)v137 + 3);
  }
  v396 = (JSC::AssemblerBuffer *)(v8 + 56);
  v144 = *(_DWORD *)(v8 + 200);
  if (v144 + 4 > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v396, v129, v130, v131, v132, v133, v134, v135);
    v144 = *(_DWORD *)(v8 + 200);
  }
  v145 = v77 & 0x1F;
  v146 = v145 | (32 * v145);
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v144) = v146 | 0xD37CEC00;
  *(_DWORD *)(v8 + 200) += 4;
  if (!*(_BYTE *)(v8 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD56A4);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
  JSC::MacroAssemblerARM64::load32(v8, v77 | 0x1000000000, *(char *)(v8 + 304), v131, v132, v133, v134, v135);
  JSC::MacroAssemblerARM64::branchTest32((JSC::ARM64LogicalImmediate *)0x40000, v8, 1, 17, v147, v148, v149, v150, (uint64_t)&v446, v151);
  v157 = v446;
  if (v446 != -1)
  {
    v158 = v88 == v89;
    if (v88 == v89)
      v159 = &v467;
    else
      v159 = &v454;
    v160 = *((unsigned int *)v159 + 3);
    v161 = &v455;
    if (v158)
      v161 = &v468;
    if ((_DWORD)v160 == *(_DWORD *)v161)
    {
      v162 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v90, (void *)(v160 + 1), (unint64_t)&v446, v152, v153, v154, v155, v156);
      v164 = *v162;
      v163 = v162 + 1;
      v157 = v164;
      LODWORD(v160) = *((_DWORD *)v159 + 3);
    }
    else
    {
      v163 = &v447;
    }
    v165 = (uint64_t)*v90 + 12 * v160;
    *(_DWORD *)v165 = v157;
    *(_QWORD *)(v165 + 4) = *(_QWORD *)v163;
    ++*((_DWORD *)v159 + 3);
  }
  if (!*(_BYTE *)(v8 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD56C4);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 296) + 208) &= ~*(_DWORD *)(v8 + 320);
  JSC::MacroAssemblerARM64::load32(v8, v402 | 0x2000000000, *(char *)(v8 + 304), v152, v153, v154, v155, v156);
  JSC::MacroAssemblerARM64::branch32(v8, 2, v406, 17, v166, v167, v168, v169, (uint64_t)&v473);
  JSC::MacroAssemblerARM64::store64(v8, v409, a2 | ((unint64_t)v406 << 8) | 0x300000000, 0x200000010uLL, v170, v171, v172, v173);
  for (i = *(_DWORD *)(v8 + 200); i < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v396, v174, v175, v176, v177, v178, v179, v180);
      i = *(_DWORD *)(v8 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + i) = -721215457;
    i = *(_DWORD *)(v8 + 200) + 4;
  }
  v182 = i;
  if ((i + 4) > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v396, v174, v175, v176, v177, v178, v179, v180);
    v182 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v182) = 335544320;
  *(_DWORD *)(v8 + 200) += 4;
  if (*(_BYTE *)(v8 + 328))
    v183 = 69;
  else
    v183 = 65;
  v441 = i;
  v442 = 0;
  v443 = v183;
  v444 = 15;
  v445 = -1;
  if (i != -1)
  {
    if (HIDWORD(v471) == (_DWORD)v471)
    {
      v184 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v470, (void *)(HIDWORD(v471) + 1), (unint64_t)&v441, v176, v177, v178, v179, v180);
      v186 = *v184;
      v185 = v184 + 1;
      v187 = (char *)v470 + 12 * HIDWORD(v471);
      *(_DWORD *)v187 = v186;
    }
    else
    {
      v185 = &v442;
      v187 = (char *)v470 + 12 * HIDWORD(v471);
      *(_DWORD *)v187 = i;
    }
    *(_QWORD *)(v187 + 4) = *(_QWORD *)v185;
    ++HIDWORD(v471);
  }
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)&v473, v8, v175, v176, v177, v178, v179, v180);
  if (v406 != v77)
  {
    if (v406 == 63)
    {
      if ((char)v77 != 31)
      {
        v202 = v145 | 0xD2800000;
LABEL_117:
        v203 = *(_DWORD *)(v8 + 200);
        if (v203 + 4 > *(_DWORD *)(v8 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow(v396, v188, v189, v190, v191, v192, v193, v194);
          v203 = *(_DWORD *)(v8 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 56) + v203) = v202;
        *(_DWORD *)(v8 + 200) += 4;
        goto LABEL_120;
      }
    }
    else if (v406 != 31 && (_DWORD)v77 != 31)
    {
      v195 = v77 & 0xFFE0FFFF | ((v406 & 0x1F) << 16);
      v196 = -1442839584;
LABEL_116:
      v202 = v195 | v196;
      goto LABEL_117;
    }
    v195 = (char)v77 | (32 * v406);
    v196 = -1862270976;
    goto LABEL_116;
  }
LABEL_120:
  if (!*(_BYTE *)(v8 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD5740);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 264) + 208) &= ~*(_DWORD *)(v8 + 288);
  JSC::MacroAssemblerARM64::load32(v8, v402 | 0x2000000000, *(char *)(v8 + 272), v190, v191, v192, v193, v194);
  if ((_DWORD)v77 == 31)
  {
    v211 = 1261462527;
    v393 = *(unsigned int *)(v8 + 200);
    if ((v393 + 4) <= *(_DWORD *)(v8 + 192))
    {
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v393) = 1261462527;
      v214 = *(_DWORD *)(v8 + 200) + 4;
      *(_DWORD *)(v8 + 200) = v214;
      v213 = v408;
      goto LABEL_369;
    }
    v213 = v408;
  }
  else
  {
    v211 = v146 | 0x4B100000;
    v212 = *(unsigned int *)(v8 + 200);
    v213 = v408;
    if ((v212 + 4) <= *(_DWORD *)(v8 + 192))
    {
      *(_DWORD *)(*(_QWORD *)(v8 + 56) + v212) = v211;
      v214 = *(_DWORD *)(v8 + 200) + 4;
      *(_DWORD *)(v8 + 200) = v214;
LABEL_124:
      v215 = v145 | (v145 << 16) | 0x4B0003E0;
      goto LABEL_125;
    }
  }
  JSC::AssemblerBuffer::outOfLineGrow(v396, v204, v205, v206, v207, v208, v209, v210);
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + *(unsigned int *)(v8 + 200)) = v211;
  v214 = *(_DWORD *)(v8 + 200) + 4;
  *(_DWORD *)(v8 + 200) = v214;
  if ((_DWORD)v77 != 31)
    goto LABEL_124;
LABEL_369:
  v215 = 1262446591;
LABEL_125:
  if (v214 + 4 > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v396, v204, v205, v206, v207, v208, v209, v210);
    v214 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v214) = v215;
  v216 = *(_DWORD *)(v8 + 200);
  v217 = v216 + 4;
  *(_DWORD *)(v8 + 200) = v216 + 4;
  if ((v216 + 8) > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v396, v204, v205, v206, v207, v208, v209, v210);
    v217 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v217) = v145 | (32 * v77) | 0x93407C00;
  *(_DWORD *)(v8 + 200) += 4;
  JSC::MacroAssemblerARM64::load64(v8, a2 | 0x800000000, (char)v400, v206, v207, v208, v209, v210);
  JSC::MacroAssemblerARM64::store64(v8, v409, v400 | (v77 << 8) | 0x300000000, 0x2FFFFFFF0uLL, v218, v219, v220, v221);
  for (j = *(_DWORD *)(v8 + 200); j < *(_DWORD *)(v8 + 52); *(_DWORD *)(v8 + 200) = j)
  {
    if ((j + 4) > *(_DWORD *)(v8 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v396, v222, v223, v224, v225, v226, v227, v228);
      j = *(_DWORD *)(v8 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + j) = -721215457;
    j = *(_DWORD *)(v8 + 200) + 4;
  }
  v230 = j;
  if ((j + 4) > *(_DWORD *)(v8 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v396, v222, v223, v224, v225, v226, v227, v228);
    v230 = *(_DWORD *)(v8 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 56) + v230) = 335544320;
  *(_DWORD *)(v8 + 200) += 4;
  if (*(_BYTE *)(v8 + 328))
    v231 = 69;
  else
    v231 = 65;
  v436 = j;
  v437 = 0;
  v438 = v231;
  v439 = 15;
  v440 = -1;
  if (j != -1)
  {
    if (HIDWORD(v471) == (_DWORD)v471)
    {
      v232 = (int *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v470, (void *)(HIDWORD(v471) + 1), (unint64_t)&v436, v224, v225, v226, v227, v228);
      v234 = *v232;
      v233 = v232 + 1;
      v235 = (char *)v470 + 12 * HIDWORD(v471);
      *(_DWORD *)v235 = v234;
    }
    else
    {
      v233 = &v437;
      v235 = (char *)v470 + 12 * HIDWORD(v471);
      *(_DWORD *)v235 = j;
    }
    *(_QWORD *)(v235 + 4) = *(_QWORD *)v233;
    ++HIDWORD(v471);
  }
  if (HIDWORD(v455))
  {
    v236 = 0;
    v237 = 0;
    v238 = 12 * HIDWORD(v455);
    while (v237 < HIDWORD(v455))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v454 + v236), v8, v223, v224, v225, v226, v227, v228);
      ++v237;
      v236 += 12;
      if (v238 == v236)
        goto LABEL_144;
    }
    __break(0xC471u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(0xC471u);
    JUMPOUT(0x197CD59D0);
  }
LABEL_144:
  v239 = **(_QWORD **)v213[1];
  if ((v239 & 1) != 0)
  {
    v253 = *(_QWORD *)(v239 & 0xFFFFFFFF8);
    if ((v239 & 2) != 0
      || ((v258 = *(unsigned int *)((v239 & 0xFFFFFFFF8) + 8), (_DWORD)v258 != 0x3FFFFFFF)
        ? (v383 = (_DWORD)v258 == -1)
        : (v383 = 1),
          v383))
    {
      v384 = 2;
    }
    else
    {
      if (v258 >> 28)
        goto LABEL_373;
      v384 = *(_QWORD *)(v239 & 0xFFFFFFFF8);
      v253 = v258 << 36;
    }
    goto LABEL_363;
  }
  while (1)
  {
    v435 = v239;
    v240 = JSC::DFG::SpeculativeJIT::recordCallSiteAndGenerateExceptionHandlingOSRExitIfNeeded((JSC::DFG::SpeculativeJIT *)v8, (const JSC::CodeOrigin *)&v435, *(unsigned int *)(v8 + 5644), v224, v225, v226, v227, v228);
    v241 = 0;
    v242 = v8 + 4776;
    for (k = 15; k != -1; --k)
    {
      if ((char)k <= 15)
        v244 = k;
      else
        v244 = 0xFFFFFFFFLL;
      if (*(_DWORD *)(v242 + 12 * v244 + 8) || *(_DWORD *)(v242 + 12 * v244) != 0x3FFFFFFF)
      {
        if ((k & 0x40) != 0)
          goto LABEL_379;
        v241 |= 1 << k;
      }
    }
    v245 = v8 + 4968;
    for (m = 0x16u; m != -1; --m)
    {
      v247 = JSC::FPRInfo::toRegister::registerForIndex[m];
      v248 = JSC::FPRInfo::toIndex(JSC::ARM64Registers::FPRegisterID)::indexForRegister[v247];
      if (*(_DWORD *)(v245 + 12 * v248 + 8) || *(_DWORD *)(v245 + 12 * v248) != 0x3FFFFFFF)
      {
        v249 = v247 + 32;
        if ((v249 & 0x40) != 0)
          goto LABEL_379;
        v241 |= 1 << v249;
      }
    }
    v434[0] = v241 | 0xFF00FFFC0000;
    v434[1] = 0;
    if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 352) + 24) + 16) - 1) & 0xFFFFFFFD) != 0)
    {
      v250 = *(_QWORD *)(v8 + 368);
      if (v250)
      {
        v251 = (unsigned int *)(v250 + 8);
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 + 1, v251));
      }
      v253 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)v253 = 2;
      *(_DWORD *)(v253 + 96) = 0;
      *(_OWORD *)(v253 + 12) = 0u;
      *(_OWORD *)(v253 + 28) = 0u;
      *(_DWORD *)(v253 + 44) = 0;
      *(_QWORD *)(v253 + 64) = 0;
      *(_QWORD *)(v253 + 72) = 0;
      *(_QWORD *)(v253 + 56) = 0;
      *(_QWORD *)(v253 + 104) = 0;
      *(_QWORD *)(v253 + 112) = -1;
      *(_WORD *)(v253 + 120) = -1;
      *(_DWORD *)(v253 + 122) = 0x10000;
      *(_BYTE *)(v253 + 126) = 0;
      *(_BYTE *)(v253 + 127) = BYTE12(xmmword_1ECF4C260);
      *(_BYTE *)(v253 + 128) = 0;
      *(_WORD *)(v253 + 129) &= 0xFC00u;
      *(_QWORD *)(v253 + 136) = 0;
      *(_QWORD *)(v253 + 136) = *(_QWORD *)(v250 + 184);
      *(_QWORD *)(v250 + 184) = v253;
      v254 = (unsigned int *)(v250 + 8);
      do
        v255 = __ldaxr(v254);
      while (__stlxr(v255 - 1, v254));
      if (v255 == 1)
      {
        atomic_store(1u, (unsigned int *)(v250 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v250 + 32))(v250);
      }
      v256 = 0;
      v257 = 0;
    }
    else
    {
      v257 = *(_DWORD *)(v8 + 3872);
      v253 = WTF::SegmentedVector<JSC::DFG::UnlinkedStructureStubInfo,8ul>::alloc<>(v8 + 3872);
      v256 = 2;
    }
    v482 = (int *)v253;
    LODWORD(v483) = v256;
    v484[0] = v257;
    v258 = *(_QWORD *)(v8 + 336);
    v259 = v483;
    v260 = v435;
    if ((v435 & 1) != 0)
    {
      v385 = *(_QWORD *)(v435 & 0xFFFFFFFF8);
      if ((v435 & 2) != 0
        || ((v386 = *(unsigned int *)((v435 & 0xFFFFFFFF8) + 8), (_DWORD)v386 != 0x3FFFFFFF)
          ? (v387 = (_DWORD)v386 == -1)
          : (v387 = 1),
            v387))
      {
        v388 = 2;
      }
      else if (v386 >> 28)
      {
        v397 = *(JSC::AssemblerBuffer **)(v435 & 0xFFFFFFFF8);
        v385 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v385 = v397;
        *(_DWORD *)(v385 + 8) = v386;
        v388 = 1;
      }
      else
      {
        v388 = *(_QWORD *)(v435 & 0xFFFFFFFF8);
        v385 = v386 << 36;
      }
      v260 = v385 | v388;
    }
    v425 = v260;
    BYTE1(v395) = v77;
    LOBYTE(v395) = -1;
    if (v404)
      v261 = 11;
    else
      v261 = 10;
    JSC::JITPutByValGenerator::JITPutByValGenerator((uint64_t)&v426, v258, v253, v259, 0, &v425, v240, v261, (uint64_t)v434, a2, 0, v399, 0, v409, v395);
    if ((v425 & 1) != 0 && (v425 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v425 & 0xFFFFFFFF8, v262, v263, v264, v265, v266, v267, v268);
    v269 = v408[1];
    *(_QWORD *)&v473 = v8;
    *((_QWORD *)&v473 + 1) = v269;
    if ((_DWORD)v483 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_373:
    v394 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v394 = v253;
    *(_DWORD *)(v394 + 8) = v258;
    v384 = 1;
    v253 = v394;
LABEL_363:
    v239 = v253 | v384;
  }
  v485 = &v473;
  ((void (*)(__int128 **, int **))off_1E3574B50[v483])(&v485, &v482);
  v485 = (__int128 *)v487;
  v486 = 2;
  if (v404)
    v276 = operationPutByValSloppyOptimize;
  else
    v276 = operationPutByValStrictOptimize;
  if (((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 3960) + 24) + 16) - 1) & 0xFFFFFFFD) == 0)
  {
    JSC::JITInlineCacheGenerator::generateDFGDataICFastPath((uint64_t)&v426, v8, v484[0], (char)v77, v272, v273, v274, v275);
    v288 = HIDWORD(v486);
    v421 = (WTF *)v424;
    v422 = 2;
    v423 = HIDWORD(v486);
    if (HIDWORD(v486) < 3)
    {
      v290 = v424;
      if (!HIDWORD(v486))
        goto LABEL_205;
      goto LABEL_203;
    }
    if (HIDWORD(v486) < 0x15555556)
    {
      v289 = 12 * HIDWORD(v486);
      v290 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v486)));
      v422 = (v289 & 0xFFFFFFFC) / 0xC;
      v421 = (WTF *)v290;
      v288 = HIDWORD(v486);
      if (!HIDWORD(v486))
      {
LABEL_205:
        JSC::DFG::slowPathICCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::ARM64Registers::RegisterID,decltype(nullptr)>((uint64_t *)&v421, (_DWORD *)v8, v484[0], v77, v77 | 0x3000000000, (uint64_t)v276, 0, a2, (uint64_t *)&v473, v399, v409, v77);
        v304 = v473;
        *(_QWORD *)&v473 = 0;
        v305 = v421;
        if (v424 == (_BYTE *)v421 || !v421)
          goto LABEL_209;
        v421 = 0;
        v422 = 0;
        goto LABEL_208;
      }
LABEL_203:
      v307 = v485;
      v308 = (__int128 *)((char *)v485 + 12 * v288);
      do
      {
        *(_DWORD *)v290 = *(_DWORD *)v307;
        *(_QWORD *)(v290 + 4) = *(_QWORD *)((char *)v307 + 4);
        v307 = (__int128 *)((char *)v307 + 12);
        v290 += 12;
      }
      while (v307 != v308);
      goto LABEL_205;
    }
    __break(0xC471u);
LABEL_401:
    JUMPOUT(0x197CD5674);
  }
  JSC::JITGetByValGenerator::generateFastPath((JSC::JITGetByValGenerator *)&v426, (JSC::CCallHelpers *)v8, v270, v271, v272, v273, v274, v275);
  v419 = v432;
  v420 = v433;
  v282 = HIDWORD(v486);
  if (v432 != -1)
  {
    if (HIDWORD(v486) == (_DWORD)v486)
    {
      v283 = (_DWORD *)WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v485, (void *)(HIDWORD(v486) + 1), (unint64_t)&v419, v277, v278, v279, v280, v281);
      v285 = *v283;
      v284 = (uint64_t *)(v283 + 1);
      v286 = (_DWORD *)v485 + 3 * HIDWORD(v486);
      *v286 = v285;
      v287 = (uint64_t *)(v286 + 1);
    }
    else
    {
      v291 = (_DWORD *)v485 + 3 * HIDWORD(v486);
      *v291 = v432;
      v287 = (uint64_t *)(v291 + 1);
      v284 = &v420;
    }
    *v287 = *v284;
    v282 = ++HIDWORD(v486);
  }
  v292 = v282;
  v415 = (WTF *)v418;
  v416 = 2;
  v417 = v282;
  if (v282 < 3)
  {
    v294 = v418;
    if (!v282)
      goto LABEL_197;
LABEL_195:
    v295 = v485;
    v296 = (__int128 *)((char *)v485 + 12 * v292);
    do
    {
      *(_DWORD *)v294 = *(_DWORD *)v295;
      *(_QWORD *)(v294 + 4) = *(_QWORD *)((char *)v295 + 4);
      v295 = (__int128 *)((char *)v295 + 12);
      v294 += 12;
    }
    while (v295 != v296);
    goto LABEL_197;
  }
  if (v282 >= 0x15555556)
  {
    __break(0xC471u);
    JUMPOUT(0x197CD5AF0);
  }
  v293 = 12 * v282;
  v294 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v282));
  v416 = (v293 & 0xFFFFFFFC) / 0xC;
  v415 = (WTF *)v294;
  v292 = HIDWORD(v486);
  if (HIDWORD(v486))
    goto LABEL_195;
LABEL_197:
  JSC::DFG::slowPathCall<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<void> (*)(long long,long long,long long,JSC::StructureStubInfo *,JSC::ArrayProfile *),JSC::NoResultTag,JSC::JSValueRegs,JSC::JSValueRegs,JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,decltype(nullptr)>((uint64_t *)&v415, (_DWORD *)v8, (uint64_t)v276, 0, a2, v399, v409, *((uint64_t *)&v426 + 1), (uint64_t *)&v473);
  v304 = v473;
  *(_QWORD *)&v473 = 0;
  v305 = v415;
  if (v418 != (_BYTE *)v415 && v415 != 0)
  {
    v415 = 0;
    v416 = 0;
LABEL_208:
    WTF::fastFree((unint64_t)v305, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
  }
LABEL_209:
  v309 = v401;
  v473 = v426;
  v474[0] = v427[0];
  v310 = v428;
  v311 = v429;
  v475 = v428;
  v476 = v429;
  v312 = HIDWORD(v429);
  v313 = v430;
  v477 = v430;
  v314 = HIDWORD(v430);
  v315 = v431;
  v478 = v431;
  v316 = v432;
  v479 = v432;
  v317 = v433;
  v480 = v433;
  v481 = v304;
  v318 = *(unsigned int *)(v8 + 1812);
  if ((_DWORD)v318 == *(_DWORD *)(v8 + 1808))
  {
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::DFG::InlineCacheWrapper<JSC::JITPutByValGenerator>>(v8 + 1800, (unint64_t)&v473);
  }
  else
  {
    v319 = *(_QWORD *)(v8 + 1800) + (v318 << 6);
    v320 = v426;
    *(_BYTE *)(v319 + 16) = v427[0];
    *(_OWORD *)v319 = v320;
    *(_DWORD *)(v319 + 20) = v310;
    *(_DWORD *)(v319 + 24) = v311;
    *(_DWORD *)(v319 + 28) = v312;
    *(_DWORD *)(v319 + 32) = v313;
    *(_DWORD *)(v319 + 36) = v314;
    *(_WORD *)(v319 + 40) = v315;
    *(_DWORD *)(v319 + 44) = v316;
    *(_QWORD *)(v319 + 48) = v317;
    *(_QWORD *)(v319 + 56) = v304;
    ++*(_DWORD *)(v8 + 1812);
  }
  v414 = v304;
  v321 = *(unsigned int *)(v8 + 5668);
  if ((_DWORD)v321 == *(_DWORD *)(v8 + 5664))
  {
    v323 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8 + 5656, v321 + 1, (unint64_t)&v414);
    v321 = *(unsigned int *)(v8 + 5668);
    v322 = (_QWORD *)(*(_QWORD *)(v8 + 5656) + 8 * v321);
    v304 = *v323;
  }
  else
  {
    v322 = (_QWORD *)(*(_QWORD *)(v8 + 5656) + 8 * v321);
    v323 = &v414;
  }
  *v323 = 0;
  *v322 = v304;
  *(_DWORD *)(v8 + 5668) = v321 + 1;
  v324 = v414;
  v414 = 0;
  if (v324)
    (*(void (**)(uint64_t))(*(_QWORD *)v324 + 8))(v324);
  v325 = (unint64_t)v485;
  if (v487 != (_BYTE *)v485 && v485)
  {
    v485 = 0;
    LODWORD(v486) = 0;
    WTF::fastFree(v325, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
  }
  if ((v435 & 1) != 0 && (v435 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v435 & 0xFFFFFFFF8, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
  if (HIDWORD(v468))
  {
    v410 = (WTF *)v412;
    v411 = HIDWORD(v468);
    if (HIDWORD(v468) <= 2)
    {
      v327 = v467;
      v328 = (WTF *)((char *)v467 + 12 * HIDWORD(v468));
      v326 = v412;
    }
    else
    {
      if (HIDWORD(v468) >= 0x15555556)
      {
        __break(0xC471u);
        JUMPOUT(0x197CD5AF8);
      }
      v326 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v468)));
      v410 = (WTF *)v326;
      if (!HIDWORD(v468))
      {
LABEL_226:
        v329 = JSC::DFG::JITCompiler::LinkableConstant::globalObject((JSC::DFG::JITCompiler::LinkableConstant *)v8, *(JSC::DFG::JITCompiler **)v408[1], v298, v299, v300, v301, v302, v303);
        v331 = v330;
        v332 = v411;
        v482 = v484;
        LODWORD(v483) = 2;
        HIDWORD(v483) = v411;
        if (v411 < 3)
        {
          v333 = v484;
        }
        else
        {
          if (v411 >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197CD5B00);
          }
          v333 = (int *)WTF::fastMalloc((WTF *)(12 * v411));
          LODWORD(v483) = 12 * v411 / 0xC;
          v482 = v333;
          v332 = v411;
        }
        v334 = v410;
        v335 = (WTF *)((char *)v410 + 12 * v332);
        do
        {
          *v333 = *(_DWORD *)v334;
          *(_QWORD *)(v333 + 1) = *(_QWORD *)((char *)v334 + 4);
          v334 = (WTF *)((char *)v334 + 12);
          v333 += 3;
        }
        while (v334 != v335);
        v405 = v404 == 0;
        v336 = WTF::fastMalloc((WTF *)0xC8);
        v337 = HIDWORD(v483);
        v485 = (__int128 *)v487;
        LODWORD(v486) = 2;
        HIDWORD(v486) = HIDWORD(v483);
        if (HIDWORD(v483) < 3)
        {
          v339 = v487;
        }
        else
        {
          if (HIDWORD(v483) >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197CD5B08);
          }
          v338 = 12 * HIDWORD(v483);
          v339 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v483)));
          LODWORD(v486) = (v338 & 0xFFFFFFFC) / 0xC;
          v485 = (__int128 *)v339;
          v337 = HIDWORD(v483);
        }
        if (v337)
        {
          v340 = v482;
          v341 = &v482[3 * v337];
          do
          {
            *(_DWORD *)v339 = *v340;
            *(_QWORD *)(v339 + 4) = *(_QWORD *)(v340 + 1);
            v340 += 3;
            v339 += 12;
          }
          while (v340 != v341);
        }
        v342 = HIDWORD(v486);
        *(_QWORD *)&v426 = v427;
        DWORD2(v426) = 2;
        HIDWORD(v426) = HIDWORD(v486);
        v407 = (_QWORD *)(v8 + 5656);
        if (HIDWORD(v486) < 3)
        {
          v343 = v329;
          v345 = v427;
        }
        else
        {
          if (HIDWORD(v486) >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197CD5B10);
          }
          v343 = v329;
          v344 = 12 * HIDWORD(v486);
          v345 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v486)));
          DWORD2(v426) = (v344 & 0xFFFFFFFC) / 0xC;
          *(_QWORD *)&v426 = v345;
          v342 = HIDWORD(v486);
        }
        if (v342)
        {
          v346 = v485;
          v347 = (__int128 *)((char *)v485 + 12 * v342);
          do
          {
            *(_DWORD *)v345 = *(_DWORD *)v346;
            *(_QWORD *)(v345 + 4) = *(_QWORD *)((char *)v346 + 4);
            v346 = (__int128 *)((char *)v346 + 12);
            v345 += 12;
          }
          while (v346 != v347);
        }
        v348 = HIDWORD(v426);
        *(_QWORD *)&v473 = v474;
        DWORD2(v473) = 2;
        HIDWORD(v473) = HIDWORD(v426);
        if (HIDWORD(v426) < 3)
        {
          v350 = v474;
          if (!HIDWORD(v426))
            goto LABEL_253;
        }
        else
        {
          if (HIDWORD(v426) >= 0x15555556)
          {
            __break(0xC471u);
            JUMPOUT(0x197CD5B18);
          }
          v349 = 12 * HIDWORD(v426);
          v350 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * HIDWORD(v426)));
          DWORD2(v473) = (v349 & 0xFFFFFFFC) / 0xC;
          *(_QWORD *)&v473 = v350;
          v348 = HIDWORD(v426);
          if (!HIDWORD(v426))
            goto LABEL_253;
        }
        v351 = v426;
        v352 = v426 + 12 * v348;
        do
        {
          *(_DWORD *)v350 = *(_DWORD *)v351;
          *(_QWORD *)(v350 + 4) = *(_QWORD *)(v351 + 4);
          v351 += 12;
          v350 += 12;
        }
        while (v351 != v352);
LABEL_253:
        JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v336, (uint64_t *)&v473, (_DWORD *)v8);
        v360 = v473;
        if (v474 != (_BYTE *)v473 && (_QWORD)v473 != 0)
        {
          *(_QWORD *)&v473 = 0;
          DWORD2(v473) = 0;
          WTF::fastFree(v360, v353, v354, v355, v356, v357, v358, v359);
        }
        *(_QWORD *)v336 = off_1E3574BA8;
        *(_QWORD *)(v336 + 92) = 0xFFFFFFFFLL;
        *(_WORD *)(v336 + 100) = 0;
        *(_DWORD *)(v336 + 104) = 0;
        *(_QWORD *)(v336 + 112) = v336 + 128;
        *(_QWORD *)(v336 + 120) = 2;
        JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, 0, v336 + 112, 0xFFFFFFFFLL, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v358, v359);
        v362 = v426;
        if (v427 != (_BYTE *)v426 && (_QWORD)v426)
        {
          *(_QWORD *)&v426 = 0;
          DWORD2(v426) = 0;
          WTF::fastFree(v362, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
        }
        *(_QWORD *)v336 = &off_1E3574B78;
        *(_QWORD *)(v336 + 160) = operationEnumeratorRecoverNameAndPutByVal;
        *(_QWORD *)(v336 + 168) = v343;
        *(_QWORD *)(v336 + 176) = v331;
        *(_BYTE *)(v336 + 184) = a2;
        *(_BYTE *)(v336 + 185) = v409;
        *(_DWORD *)(v336 + 188) = v405;
        *(_BYTE *)(v336 + 192) = v406;
        *(_BYTE *)(v336 + 193) = v402;
        v413 = v336;
        v363 = (unint64_t)v485;
        if (v487 != (_BYTE *)v485 && v485)
        {
          v485 = 0;
          LODWORD(v486) = 0;
          WTF::fastFree(v363, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
        }
        v364 = (unint64_t)v482;
        if (v484 != v482 && v482)
        {
          v482 = 0;
          LODWORD(v483) = 0;
          WTF::fastFree(v364, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
        }
        v365 = *(unsigned int *)(v8 + 5668);
        if ((_DWORD)v365 == *(_DWORD *)(v8 + 5664))
        {
          v367 = (uint64_t *)WTF::Vector<std::unique_ptr<JSC::DFG::SlowPathGenerator>,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v407, v365 + 1, (unint64_t)&v413);
          v365 = *(unsigned int *)(v8 + 5668);
          v366 = (uint64_t *)(*(_QWORD *)(v8 + 5656) + 8 * v365);
          v336 = *v367;
        }
        else
        {
          v366 = (uint64_t *)(*v407 + 8 * v365);
          v367 = &v413;
        }
        *v367 = 0;
        *v366 = v336;
        *(_DWORD *)(v8 + 5668) = v365 + 1;
        v368 = v413;
        v413 = 0;
        if (v368)
          (*(void (**)(uint64_t))(*(_QWORD *)v368 + 8))(v368);
        v309 = v401;
        if (v412 != (_BYTE *)v410 && v410)
          WTF::fastFree((unint64_t)v410, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
        goto LABEL_274;
      }
      v327 = v467;
      v328 = (WTF *)((char *)v467 + 12 * HIDWORD(v468));
    }
    do
    {
      *(_DWORD *)v326 = *(_DWORD *)v327;
      *(_QWORD *)(v326 + 4) = *(_QWORD *)((char *)v327 + 4);
      v327 = (WTF *)((char *)v327 + 12);
      v326 += 12;
    }
    while (v327 != v328);
    goto LABEL_226;
  }
LABEL_274:
  if (HIDWORD(v471))
  {
    v369 = 0;
    v370 = 0;
    v371 = 12 * HIDWORD(v471);
    while (v370 < HIDWORD(v471))
    {
      JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link((unsigned int *)((char *)v470 + v369), v8, (uint64_t)v298, v299, v300, v301, v302, v303);
      ++v370;
      v369 += 12;
      if (v371 == v369)
        goto LABEL_278;
    }
    goto LABEL_380;
  }
LABEL_278:
  v372 = v454;
  if (v456 != (_BYTE *)v454 && v454 != 0)
  {
    v454 = 0;
    LODWORD(v455) = 0;
    WTF::fastFree((unint64_t)v372, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
  }
  if (v457)
  {
    v374 = (char)v458;
    if ((char)v458 != -1)
    {
      if ((char)v458 > 15)
        v374 = -1;
      --*(_DWORD *)(v457 + 12 * v374 + 4784);
    }
  }
  if (v459)
  {
    v375 = (char)v460;
    if ((char)v460 != -1)
    {
      if ((char)v460 > 15)
        v375 = -1;
      --*(_DWORD *)(v459 + 12 * v375 + 4784);
    }
  }
  if ((v461[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v376 = v462;
    if (v462 > 15)
      v376 = -1;
    --*(_DWORD *)(v461[0] + 12 * v376 + 4784);
  }
  if (v398 > 15)
    v377 = -1;
  else
    v377 = v309;
  --*(_DWORD *)(v242 + 12 * v377 + 8);
  if (v406 > 15)
    v378 = -1;
  else
    v378 = v406;
  --*(_DWORD *)(v242 + 12 * v378 + 8);
  if ((v463[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v379 = v464;
    if (v464 > 15)
      v379 = -1;
    --*(_DWORD *)(v463[0] + 12 * v379 + 4784);
  }
  if ((v465[1] & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v380 = v466;
    if (v466 > 15)
      v380 = -1;
    --*(_DWORD *)(v465[0] + 12 * v380 + 4784);
  }
  v381 = v467;
  if (v469 != (_BYTE *)v467 && v467)
  {
    v467 = 0;
    LODWORD(v468) = 0;
    WTF::fastFree((unint64_t)v381, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
  }
  v382 = v470;
  if (v472 != (_BYTE *)v470)
  {
    if (v470)
    {
      v470 = 0;
      LODWORD(v471) = 0;
      WTF::fastFree((unint64_t)v382, v297, (uint64_t)v298, v299, v300, v301, v302, v303);
    }
  }
}

void JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateClonedArguments(JSC::DFG::Node *)::$_1>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  v9 = a1[50];
  if (v9 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v9 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v9) = 1384120325;
  a1[50] += 4;
}

void JSC::CCallHelpers::setupArgument<JSC::DFG::SpeculativeJIT::compileCreateClonedArguments(JSC::DFG::Node *)::$_2>(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  if ((a2 & 1) != 0)
  {
    v8 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
    if ((a2 & 2) != 0
      || ((v9 = *(unsigned int *)((a2 & 0xFFFFFFFF8) + 8), (_DWORD)v9 != 0x3FFFFFFF)
        ? (v10 = (_DWORD)v9 == -1)
        : (v10 = 1),
          v10))
    {
      v11 = 2;
    }
    else if (v9 >> 28)
    {
      v20 = a1;
      v21 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v22 = *(_DWORD *)((a2 & 0xFFFFFFFF8) + 8);
      v8 = WTF::fastMalloc((WTF *)0x10);
      a1 = v20;
      *(_QWORD *)v8 = v21;
      *(_DWORD *)(v8 + 8) = v22;
      v11 = 1;
    }
    else
    {
      v11 = *(_QWORD *)(a2 & 0xFFFFFFFF8);
      v8 = v9 << 36;
    }
    v12 = v8 | v11;
    v23 = v8 | v11;
    JSC::DFG::SpeculativeJIT::emitGetCallee(a1, &v23, 4, a4, a5, a6, a7, a8);
    if ((v12 & 1) != 0 && (v12 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v12 & 0xFFFFFFFF8, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    v23 = a2;
    JSC::DFG::SpeculativeJIT::emitGetCallee(a1, &v23, 4, a4, a5, a6, a7, a8);
  }
}

unint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + 72 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v11 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v11 >= 0x10)
      v12 = v11 + 1;
    else
      v12 = 16;
    if (v12 > a2)
      a2 = v12;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v14 = a3 - v10;
    v15 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 > a2)
      a2 = v16;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v14;
  }
  return v8;
}

void WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByIdGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v9 = *(_QWORD *)a1;
    v10 = *(_DWORD *)(a1 + 12);
    if (a2 < 5)
    {
      v12 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (a2 >= 0x38E38E4)
      {
        __break(0xC471u);
        return;
      }
      v11 = 72 * a2;
      v12 = WTF::fastMalloc((WTF *)(72 * a2));
      *(_DWORD *)(a1 + 8) = (v11 & 0xFFFFFFF8) / 0x48;
      *(_QWORD *)a1 = v12;
    }
    if (v10)
    {
      v13 = v9;
      do
      {
        v14 = *(_OWORD *)v13;
        *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
        *(_OWORD *)v12 = v14;
        *(_DWORD *)(v12 + 20) = *(_DWORD *)(v13 + 20);
        *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
        *(_DWORD *)(v12 + 28) = *(_DWORD *)(v13 + 28);
        *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
        *(_WORD *)(v12 + 40) = *(_WORD *)(v13 + 40);
        *(_DWORD *)(v12 + 44) = *(_DWORD *)(v13 + 44);
        *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
        *(_BYTE *)(v12 + 56) = *(_BYTE *)(v13 + 56);
        *(_QWORD *)(v12 + 64) = *(_QWORD *)(v13 + 64);
        v13 += 72;
        v12 += 72;
      }
      while (v13 != v9 + 72 * v10);
    }
    if (a1 + 16 != v9 && v9)
    {
      if (*(_QWORD *)a1 == v9)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v9, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

unint64_t WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByIdWithThisGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v8 = a3;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v10 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    v14 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 > a2)
      a2 = v15;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByIdWithThisGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v11 = a3 - v10;
    v12 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v12 >= 0x10)
      v13 = v12 + 1;
    else
      v13 = 16;
    if (v13 > a2)
      a2 = v13;
    WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByIdWithThisGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)a1 + v11;
  }
  return v8;
}

void WTF::Vector<JSC::DFG::InlineCacheWrapper<JSC::JITGetByIdWithThisGenerator>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return;
  v8 = a2;
  v10 = *(_QWORD *)a1;
  v11 = *(unsigned int *)(a1 + 12);
  if (a2 < 5)
  {
    v12 = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 4;
    if (!(_DWORD)v11)
      goto LABEL_9;
  }
  else
  {
    if (a2 >> 26)
    {
      __break(0xC471u);
      return;
    }
    v12 = WTF::fastMalloc((WTF *)(a2 << 6));
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v12;
    if (!(_DWORD)v11)
      goto LABEL_9;
  }
  v13 = v10;
  do
  {
    v14 = *(_OWORD *)v13;
    *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
    *(_OWORD *)v12 = v14;
    *(_DWORD *)(v12 + 20) = *(_DWORD *)(v13 + 20);
    *(_DWORD *)(v12 + 24) = *(_DWORD *)(v13 + 24);
    *(_DWORD *)(v12 + 28) = *(_DWORD *)(v13 + 28);
    *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
    *(_WORD *)(v12 + 40) = *(_WORD *)(v13 + 40);
    *(_DWORD *)(v12 + 44) = *(_DWORD *)(v13 + 44);
    *(_QWORD *)(v12 + 48) = *(_QWORD *)(v13 + 48);
    *(_QWORD *)(v12 + 56) = *(_QWORD *)(v13 + 56);
    v13 += 64;
    v12 += 64;
  }
  while (v13 != v10 + (v11 << 6));
LABEL_9:
  if (a1 + 16 != v10 && v10)
  {
    if (*(_QWORD *)a1 == v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::DFG::JSValueOperand::JSValueOperand(uint64_t a1, JSC::DFG::SpeculativeJIT *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  unsigned int v22;
  char *v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  char v45;
  JSC::AssemblerBuffer *v46;
  int v47;
  _BYTE v48[14];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = -1;
  if ((a3 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v10 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v10 >= *((unsigned int *)this + 1001))
      goto LABEL_32;
    v11 = *((_QWORD *)this + 499);
    v12 = v11 + 24 * (int)v10;
    v15 = *(unsigned __int8 *)(v12 + 12);
    v13 = (_BYTE *)(v12 + 12);
    v14 = v15;
    if (v15)
    {
      if (v14 <= 0x18)
      {
        if (((1 << v14) & 0x1730040) != 0)
        {
          v16 = *(char *)(v11 + 24 * (int)v10 + 17);
          if (v16 > 15)
            v17 = -1;
          else
            v17 = *(char *)(v11 + 24 * (int)v10 + 17);
          ++*((_DWORD *)this + 3 * v17 + 1196);
          goto LABEL_10;
        }
        if (v14 == 1)
        {
          v19 = v11 + 24 * (int)v10;
          v21 = *(char *)(v19 + 17);
          v20 = (_BYTE *)(v19 + 17);
          v16 = v21;
          if (v21 > 15)
            v22 = -1;
          else
            v22 = v16;
          v23 = (char *)this + 12 * v22;
          if (*((_DWORD *)v23 + 1196))
          {
            v46 = (JSC::DFG::SpeculativeJIT *)((char *)this + 56);
            v33 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
            v41 = *((_DWORD *)this + 50);
            if (v41 + 4 > *((_DWORD *)this + 48))
            {
              v45 = v33;
              JSC::AssemblerBuffer::outOfLineGrow(v46, v34, v35, v36, v37, v38, v39, v40);
              v33 = v45;
              v41 = *((_DWORD *)this + 50);
            }
            *(_DWORD *)(*((_QWORD *)this + 7) + v41) = v33 & 0x1F | ((v16 & 0x1F) << 16) | 0xAA000360;
            *((_DWORD *)this + 50) += 4;
            LOBYTE(v16) = v33;
            goto LABEL_10;
          }
          v24 = v16;
          *((_DWORD *)v23 + 1196) = 1;
          v25 = *((_DWORD *)this + 50);
          if (v25 + 4 > *((_DWORD *)this + 48))
          {
            v44 = v13;
            v47 = v10;
            v42 = v20;
            v43 = v11;
            JSC::AssemblerBuffer::outOfLineGrow((JSC::DFG::SpeculativeJIT *)((char *)this + 56), (uint64_t)this, a3, a4, a5, a6, a7, a8);
            v24 = v16;
            v20 = v42;
            v11 = v43;
            v13 = v44;
            LODWORD(v10) = v47;
            v25 = *((_DWORD *)this + 50);
          }
          *(_DWORD *)(*((_QWORD *)this + 7) + v25) = v24 & 0x1F | (32 * (v24 & 0x1F)) | 0xAA1B0000;
          *((_DWORD *)this + 50) += 4;
          *v13 = 17;
          *v20 = v16;
          if (!*(_BYTE *)(v11 + 24 * (int)v10 + 15))
          {
LABEL_10:
            *(_BYTE *)(a1 + 16) = v16;
            return a1;
          }
          v26 = *(_DWORD *)(*(_QWORD *)(v11 + 24 * (int)v10) + 20);
          if (v26 < 0xFFFFFFFE)
          {
            v27 = (_QWORD *)((char *)this + 5632);
            *(_DWORD *)v48 = v26;
            *(_QWORD *)&v48[4] = v16 | 0x3FFFFF00;
            *(_WORD *)&v48[12] = 4356;
            v28 = *((unsigned int *)this + 1411);
            if ((_DWORD)v28 == *((_DWORD *)this + 1410))
            {
              v32 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v27, v28 + 1, (unint64_t)v48, a4, a5, a6, a7, a8);
              v29 = (_QWORD *)(*((_QWORD *)this + 704) + 14 * *((unsigned int *)this + 1411));
              v30 = *v32;
              v31 = *(uint64_t *)((char *)v32 + 6);
            }
            else
            {
              v29 = (_QWORD *)(*v27 + 14 * v28);
              v30 = *(_QWORD *)v48;
              v31 = *(_QWORD *)&v48[6];
            }
            *(_QWORD *)((char *)v29 + 6) = v31;
            *v29 = v30;
            ++*((_DWORD *)this + 1411);
            goto LABEL_10;
          }
LABEL_32:
          __break(0xC471u);
          JUMPOUT(0x197CD6290);
        }
        if (((1 << v14) & 0xB4) != 0)
        {
          JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x93, "GPRReg JSC::DFG::SpeculativeJIT::fillJSValue(Edge)", "Bad data format");
          __break(0xC471u);
          JUMPOUT(0x197CD6310);
        }
      }
      JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x96, "GPRReg JSC::DFG::SpeculativeJIT::fillJSValue(Edge)", "Corrupt data format");
      __break(0xC471u);
      JUMPOUT(0x197CD635CLL);
    }
  }
  return a1;
}

void JSC::MacroAssemblerARM64::branchTest64(JSC::ARM64LogicalImmediate *this@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v9;
  int v10;
  uint8x8_t v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int j;
  int v21;
  unsigned int v22;
  JSC::AssemblerBuffer *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  char v33;
  char v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  JSC::AssemblerBuffer *v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int i;

  v9 = a4;
  v10 = a3;
  if (this != (JSC::ARM64LogicalImmediate *)-1)
  {
    if (a3 <= 1)
    {
      v14 = (uint8x8_t)vcnt_s8((int8x8_t)this);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] == 1)
      {
        v15 = __clz(__rbit64((unint64_t)this));
        if (*(_BYTE *)(a2 + 328))
        {
          for (i = *(_DWORD *)(a2 + 200); i < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = i)
          {
            if ((i + 4) > *(_DWORD *)(a2 + 192))
            {
              JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
              i = *(_DWORD *)(a2 + 200);
            }
            *(_DWORD *)(*(_QWORD *)(a2 + 56) + i) = -721215457;
            i = *(_DWORD *)(a2 + 200) + 4;
          }
          *(_DWORD *)(a2 + 208) = 0;
        }
        v16 = (v15 << 26) & 0x80000000;
        v17 = v15 << 19;
        if (v10)
        {
          v18 = v17 | v9 & 0x1F | v16;
          v19 = 922746880;
        }
        else
        {
          v18 = v17 & 0xF80000 | v9 & 0x1F | v16;
          v19 = 905969664;
        }
        v35 = v18 | v19;
        v36 = *(_DWORD *)(a2 + 200);
        if (v36 + 4 > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
          v36 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v36) = v35;
        v30 = *(_DWORD *)(a2 + 200) + 4;
        *(_DWORD *)(a2 + 200) = v30;
        v32 = v15 & 0x3F;
        v37 = v30;
        if ((v30 + 4) > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
          v37 = *(_DWORD *)(a2 + 200);
        }
        v33 = 0;
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v37) = -721215457;
        *(_DWORD *)(a2 + 200) += 4;
        if (*(_BYTE *)(a2 + 328))
          v34 = -120;
        else
          v34 = -124;
        goto LABEL_51;
      }
    }
    v21 = JSC::ARM64LogicalImmediate::create64((uint64_t)this);
    if (v21 != -1)
    {
      v22 = (32 * (v9 & 0x1F)) | (v21 << 10) | 0xF200001F;
      v23 = (JSC::AssemblerBuffer *)(a2 + 56);
      v24 = *(_DWORD *)(a2 + 200);
      if (v24 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
        v24 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v24) = v22;
      v25 = *(_DWORD *)(a2 + 200) + 4;
      *(_DWORD *)(a2 + 200) = v25;
      if (*(_BYTE *)(a2 + 328))
      {
        while ((signed int)v25 < *(_DWORD *)(a2 + 52))
        {
          if (v25 + 4 > *(_DWORD *)(a2 + 192))
          {
            JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
            v25 = *(_DWORD *)(a2 + 200);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 56) + v25) = -721215457;
          v25 = *(_DWORD *)(a2 + 200) + 4;
          *(_DWORD *)(a2 + 200) = v25;
        }
        *(_DWORD *)(a2 + 208) = 0;
      }
      v26 = v10 | 0x54000000;
LABEL_23:
      if (v25 + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v23, a3, a4, (uint64_t)this, a5, a6, a7, a8);
        v25 = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v25) = v26;
      v29 = *(_DWORD *)(a2 + 200);
      v30 = v29 + 4;
      *(_DWORD *)(a2 + 200) = v29 + 4;
      v31 = v29 + 4;
      if ((v29 + 8) > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow(v23, a3, a4, (uint64_t)this, a5, a6, a7, a8);
        v31 = *(_DWORD *)(a2 + 200);
      }
      v32 = 0;
      v33 = 0;
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + v31) = -721215457;
      *(_DWORD *)(a2 + 200) += 4;
      if (*(_BYTE *)(a2 + 328))
        v34 = -122;
      else
        v34 = -126;
      v9 = -1;
      goto LABEL_51;
    }
    if (!*(_BYTE *)(a2 + 212))
    {
      __break(0xC471u);
      JUMPOUT(0x197CD67A4);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288);
    JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a2, (uint64_t)this, *(char *)(a2 + 272), (uint64_t)this, a5, a6, a7, a8);
    v27 = (32 * (v9 & 0x1F)) | 0xEA10001F;
LABEL_19:
    v28 = *(_DWORD *)(a2 + 200);
    if (v28 + 4 > *(_DWORD *)(a2 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
      v28 = *(_DWORD *)(a2 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 56) + v28) = v27;
    v25 = *(_DWORD *)(a2 + 200) + 4;
    *(_DWORD *)(a2 + 200) = v25;
    if (*(_BYTE *)(a2 + 328))
    {
      for (; (signed int)v25 < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = v25)
      {
        if (v25 + 4 > *(_DWORD *)(a2 + 192))
        {
          JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
          v25 = *(_DWORD *)(a2 + 200);
        }
        *(_DWORD *)(*(_QWORD *)(a2 + 56) + v25) = -721215457;
        v25 = *(_DWORD *)(a2 + 200) + 4;
      }
      *(_DWORD *)(a2 + 208) = 0;
    }
    v26 = v10 | 0x54000000;
    v23 = (JSC::AssemblerBuffer *)(a2 + 56);
    goto LABEL_23;
  }
  if (a3 > 1)
  {
    v27 = (unsigned __int16)(32 * (a4 & 0x1F)) | ((a4 & 0x1F) << 16) | 0xEA00001F;
    goto LABEL_19;
  }
  if (*(_BYTE *)(a2 + 328))
  {
    for (j = *(_DWORD *)(a2 + 200); (signed int)j < *(_DWORD *)(a2 + 52); *(_DWORD *)(a2 + 200) = j)
    {
      if (j + 4 > *(_DWORD *)(a2 + 192))
      {
        JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a2 + 56), a3, a4, (uint64_t)this, a5, a6, a7, a8);
        j = *(_DWORD *)(a2 + 200);
      }
      *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = -721215457;
      j = *(_DWORD *)(a2 + 200) + 4;
    }
    *(_DWORD *)(a2 + 208) = 0;
  }
  else
  {
    j = *(_DWORD *)(a2 + 200);
  }
  v38 = (JSC::AssemblerBuffer *)(a2 + 56);
  if (v10)
    v39 = -1258291200;
  else
    v39 = -1275068416;
  v40 = v9 & 0x1F | v39;
  if (j + 4 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v38, a3, a4, (uint64_t)this, a5, a6, a7, a8);
    v38 = (JSC::AssemblerBuffer *)(a2 + 56);
    j = *(_DWORD *)(a2 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + j) = v40;
  v41 = *(_DWORD *)(a2 + 200);
  v30 = v41 + 4;
  *(_DWORD *)(a2 + 200) = v41 + 4;
  v42 = v41 + 8;
  v43 = v41 + 4;
  if (v42 > *(_DWORD *)(a2 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v38, a3, a4, (uint64_t)this, a5, a6, a7, a8);
    v43 = *(_DWORD *)(a2 + 200);
  }
  v32 = 0;
  *(_DWORD *)(*(_QWORD *)(a2 + 56) + v43) = -721215457;
  *(_DWORD *)(a2 + 200) += 4;
  if (*(_BYTE *)(a2 + 328))
    v34 = -121;
  else
    v34 = -125;
  v33 = 1;
LABEL_51:
  *(_DWORD *)a9 = v30;
  *(_DWORD *)(a9 + 4) = v32;
  *(_BYTE *)(a9 + 8) = v34;
  *(_BYTE *)(a9 + 9) = v10;
  *(_BYTE *)(a9 + 10) = v33;
  *(_BYTE *)(a9 + 11) = v9;
}

void JSC::MacroAssemblerARM64::xor64(uint64_t a1, JSC::ARM64LogicalImmediate *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v9;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;

  v8 = a4;
  v9 = a3;
  if (this == (JSC::ARM64LogicalImmediate *)-1)
  {
    v13 = a4 & 0x1F | ((a3 & 0x1F) << 16);
    v14 = -1440742432;
  }
  else
  {
    v12 = JSC::ARM64LogicalImmediate::create64((uint64_t)this);
    if (v12 == -1)
    {
      if (!*(_BYTE *)(a1 + 212))
      {
        __break(0xC471u);
        return;
      }
      *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
      JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (uint64_t)this, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
      v13 = v8 & 0x1F | (32 * (v9 & 0x1F));
      v14 = -904921088;
    }
    else
    {
      v13 = (32 * (v9 & 0x1F)) | (v12 << 10);
      v14 = v8 | 0xD2000000;
    }
  }
  v15 = v13 | v14;
  v18 = *(_DWORD *)(a1 + 200);
  v17 = (unsigned int *)(a1 + 200);
  v16 = v18;
  if (v18 + 4 > *(v17 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v17 - 36), (uint64_t)this, a3, a4, a5, a6, a7, a8);
    v16 = *v17;
  }
  *(_DWORD *)(*((_QWORD *)v17 - 18) + v16) = v15;
  *v17 += 4;
}

_BYTE ***std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::OptimizingCallLinkInfo *,JSC::BaselineUnlinkedCallLinkInfo *,JSC::DFG::UnlinkedCallLinkInfo *> &>(_BYTE ***result, uint64_t a2)
{
  *(_WORD *)(*(_QWORD *)a2 + 17) = *(_WORD *)(*(_QWORD *)a2 + 17) & 0xFF0F | (16 * (***result & 0xF));
  return result;
}

_BYTE ***std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::OptimizingCallLinkInfo *,JSC::BaselineUnlinkedCallLinkInfo *,JSC::DFG::UnlinkedCallLinkInfo *> &>(_BYTE ***result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 8) = ***result;
  return result;
}

void JSC::MacroAssemblerARM64::sub64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;

  v8 = a4;
  v9 = a2;
  if (a3 < 0x1000)
  {
    v11 = -1073741824;
LABEL_3:
    v12 = a4 | (32 * a2) | v11 | ((a3 & 0xFFF) << 10);
LABEL_7:
    v15 = 285212672;
LABEL_8:
    v16 = v12 | v15;
    goto LABEL_9;
  }
  v13 = -(int)a3;
  if (-(int)a3 < 0x1000)
  {
    v14 = 0x80000000;
LABEL_6:
    v12 = a4 | (32 * a2) | v14 | (v13 << 10);
    goto LABEL_7;
  }
  if ((a3 & 0xFFF) == 0)
  {
    v20 = (int)a3 >> 12;
    if (!BYTE3(a3))
    {
      v11 = -1069547520;
      a3 = ((int)a3 >> 12);
      goto LABEL_3;
    }
    v13 = -v20;
    if (-v20 < 0x1000)
    {
      v14 = -2143289344;
      goto LABEL_6;
    }
  }
  if (!*(_BYTE *)(a1 + 212))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD6B78);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 264) + 208) &= ~*(_DWORD *)(a1 + 288);
  JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>((_DWORD *)a1, (int)a3, *(char *)(a1 + 272), a4, a5, a6, a7, a8);
  if (v8 == 31 || v9 == 31)
  {
    v12 = v8 | (32 * v9);
    v15 = -886022144;
    goto LABEL_8;
  }
  v16 = v8 & 0x1F | (32 * (v9 & 0x1F)) | 0xCB100000;
LABEL_9:
  v19 = *(_DWORD *)(a1 + 200);
  v18 = (unsigned int *)(a1 + 200);
  v17 = v19;
  if (v19 + 4 > *(v18 - 2))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(v18 - 36), a2, a3, a4, a5, a6, a7, a8);
    v17 = *v18;
  }
  *(_DWORD *)(*((_QWORD *)v18 - 18) + v17) = v16;
  *v18 += 4;
}

uint64_t WTF::Vector<JSC::DFG::JITCompiler::JSDirectCallRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v8 = a3;
  v9 = result;
  v10 = *(_QWORD *)result;
  if (*(_QWORD *)result <= a3 && v10 + 16 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<JSC::DFG::JITCompiler::JSDirectCallRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)v9 + v8 - v10;
  }
  v11 = *(unsigned int *)(result + 8);
  v12 = v11 + (v11 >> 2);
  if (v12 >= 0x10)
    v13 = v12 + 1;
  else
    v13 = 16;
  if (v13 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  else
    v14 = v13;
  if (v14 <= v11)
    return v8;
  v15 = *(unsigned int *)(result + 12);
  if (v14 < 5)
  {
    v16 = result + 16;
    *(_QWORD *)v9 = v9 + 16;
    *(_DWORD *)(v9 + 8) = 4;
    goto LABEL_12;
  }
  if (!(v14 >> 28))
  {
    v16 = WTF::fastMalloc((WTF *)(16 * v14));
    *(_DWORD *)(v9 + 8) = v14;
    *(_QWORD *)v9 = v16;
LABEL_12:
    if ((_DWORD)v15)
    {
      v17 = v16;
      v18 = v10;
      do
      {
        *(_DWORD *)v17 = *(_DWORD *)v18;
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(v18 + 8);
        v18 += 16;
        v17 += 16;
      }
      while (v18 != v10 + 16 * v15);
    }
    if (v9 + 16 != v10 && v10)
    {
      if (v16 == v10)
      {
        *(_QWORD *)v9 = 0;
        *(_DWORD *)(v9 + 8) = 0;
      }
      WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
    }
    return v8;
  }
  __break(0xC471u);
  return result;
}

void WTF::Vector<JSC::DFG::JITCompiler::JSDirectCallRecord,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v8 = *(unsigned int *)(a1 + 8);
  v9 = v8 + (v8 >> 2);
  if (v9 >= 0x10)
    v10 = v9 + 1;
  else
    v10 = 16;
  if (v10 <= (unint64_t)a2)
    v11 = (unint64_t)a2;
  else
    v11 = v10;
  if (v11 > v8)
  {
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 12);
    if (v11 < 5)
    {
      v15 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
    }
    else
    {
      if (v11 >> 28)
      {
        __break(0xC471u);
        return;
      }
      v15 = WTF::fastMalloc((WTF *)(16 * v11));
      *(_DWORD *)(a1 + 8) = v11;
      *(_QWORD *)a1 = v15;
    }
    if ((_DWORD)v14)
    {
      v16 = v15;
      v17 = v13;
      do
      {
        *(_DWORD *)v16 = *(_DWORD *)v17;
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
        v17 += 16;
        v16 += 16;
      }
      while (v17 != v13 + 16 * v14);
    }
    if (a1 + 16 != v13 && v13)
    {
      if (v15 == v13)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::DFG::GenerationInfo::appendFill(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE v19[14];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned __int8 *)(result + 12);
  if (v9 == 4)
  {
    v17 = *(_DWORD *)(*(_QWORD *)result + 20);
    if (v17 >= 0xFFFFFFFE)
    {
      __break(0xC471u);
      JUMPOUT(0x197CD6F0CLL);
    }
    v18 = *(unsigned __int8 *)(result + 17);
    *(_WORD *)&v19[12] = 1028;
    *(_DWORD *)v19 = v17;
    v12 = v18 | 0x3FFFFF00;
  }
  else
  {
    v10 = *(_DWORD *)(*(_QWORD *)result + 20);
    if (v10 >= 0xFFFFFFFE)
    {
      __break(0xC471u);
      JUMPOUT(0x197CD6EECLL);
    }
    v11 = *(unsigned __int8 *)(result + 17);
    v19[12] = 4;
    v19[13] = v9;
    *(_DWORD *)v19 = v10;
    v12 = v11 | 0x3FFFFF00;
  }
  *(_QWORD *)&v19[4] = v12;
  v13 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v13 == *(_DWORD *)(a2 + 8))
  {
    result = WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v13 + 1, (unint64_t)v19, a4, a5, a6, a7, a8);
    v14 = (_QWORD *)(*(_QWORD *)a2 + 14 * *(unsigned int *)(a2 + 12));
    v15 = *(_QWORD *)result;
    v16 = *(_QWORD *)(result + 6);
  }
  else
  {
    v14 = (_QWORD *)(*(_QWORD *)a2 + 14 * v13);
    v15 = *(_QWORD *)v19;
    v16 = *(_QWORD *)&v19[6];
  }
  *(_QWORD *)((char *)v14 + 6) = v16;
  *v14 = v15;
  ++*(_DWORD *)(a2 + 12);
  return result;
}

uint64_t JSC::DFG::SpeculateCellOperand::SpeculateCellOperand(uint64_t a1, JSC::DFG::SpeculativeJIT *this, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  JSC::DFG::AbstractValue *v19;
  unsigned int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  int v32;
  unsigned int v33;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _BYTE v84[14];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = this;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = -1;
  v9 = a3 & 0xFF00FFFFFFFFFFFFLL;
  if ((a3 & 0xFF00FFFFFFFFFFFFLL) != 0)
  {
    v11 = ~*(_DWORD *)((a3 & 0xFF00FFFFFFFFFFFFLL) + 0x30);
    if (v11 >= *((unsigned int *)this + 1001))
    {
      __break(0xC471u);
      JUMPOUT(0x197CD7764);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 499) + 24 * (int)v11 + 12))
    {
      v13 = *((_QWORD *)this + 688);
      v14 = *(unsigned int *)((a3 & 0xFF00FFFFFFFFFFFELL) + 0x14);
      v15 = (uint64_t *)(v13 + 24);
      v16 = (uint64_t *)(v13 + 8);
      if ((a3 & 1) != 0)
        v16 = v15;
      v17 = *v16;
      v18 = *v16 + 32 * v14;
      v19 = (JSC::DFG::AbstractValue *)v18;
      v20 = *((_DWORD *)this + 1396);
      v21 = *(_DWORD *)(v18 + 20);
      if (v20 != v21)
      {
        if ((*(_QWORD *)(v18 + 8) & 0x2800FFFFFFF7) != 0)
        {
          if ((v21 ^ v20) >= 2)
          {
            v70 = *(_QWORD *)v18;
            if (*(_QWORD *)v18 != 4)
            {
              *(_QWORD *)v18 = v70 | 2;
              v71 = (unsigned int *)(v70 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v70 & 1) != 0)
              {
                v77 = 2 * *v71;
                while (v77 * 4)
                {
                  v78 = *(_QWORD *)&v71[v77];
                  if ((*(_BYTE *)(v78 + 19) & 0xC) == 0)
                  {
                    v79 = *(_QWORD *)(v78 + 96);
                    v80 = (v79 & 1) != 0 ? (v79 >> 1) & 3 : *(unsigned __int8 *)(v79 + 4);
                    v77 -= 2;
                    if (v80 != 2)
                      continue;
                  }
                  WTF::fastFree((unint64_t)v71, this, a3, a4, a5, a6, a7, a8);
                  goto LABEL_71;
                }
              }
              else if (v71)
              {
                if ((*((_BYTE *)v71 + 19) & 0xC) != 0
                  || ((v72 = *((_QWORD *)v71 + 12), (v72 & 1) != 0)
                    ? (v73 = (v72 >> 1) & 3)
                    : (v73 = *(unsigned __int8 *)(v72 + 4)),
                      v73 == 2))
                {
LABEL_71:
                  *(_QWORD *)v18 = 4;
                }
              }
            }
            *(_DWORD *)(v17 + 32 * v14 + 16) = -21020677;
          }
          if ((v20 & 1) != 0)
            *(_QWORD *)v18 &= ~2uLL;
        }
        *(_DWORD *)(v18 + 20) = v20;
      }
      v24 = *(_QWORD *)(v18 + 8);
      v22 = (uint64_t *)(v18 + 8);
      v23 = v24;
      v25 = v24 & 0x2C00FFFFFFF7;
      v26 = v24;
      if ((v24 & 0x2C00FFFFFFF7) == v24)
      {
LABEL_8:
        if (!v26)
        {
          v81 = (a3 >> 50) & 0x3F;
          if ((_DWORD)v81 && (v81 > 0x34 || ((1 << v81) & 0x12400001800284) == 0))
            JSC::DFG::SpeculativeJIT::terminateSpeculativeExecution((uint64_t)this, 0x16uLL, 255, 0, a5, a6, a7, a8);
          LOBYTE(v32) = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
LABEL_15:
          *(_BYTE *)(a1 + 16) = v32;
          return a1;
        }
LABEL_9:
        v27 = *(unsigned int *)(v9 + 48);
        v28 = ~(_DWORD)v27;
        if (v28 >= *((unsigned int *)this + 1001))
        {
          __break(0xC471u);
          JUMPOUT(0x197CD776CLL);
        }
        v29 = *((_QWORD *)this + 499);
        v30 = (_BYTE *)(v29 + 24 * (int)v28);
        v31 = v30 + 12;
        switch(v30[12])
        {
          case 0:
            v48 = JSC::DFG::SpeculativeJIT::allocate(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
            LOBYTE(v32) = v48;
            v54 = *(unsigned __int16 *)(v9 + 18);
            if (v54 > 0xB5)
            {
              if (v54 == 182)
                goto LABEL_33;
              if (v54 == 355 || v54 == 348)
              {
                v55 = (uint64_t *)&JSC::DFG::FrozenValue::emptySingleton(void)::empty;
                {
                  JSC::DFG::FrozenValue::emptySingleton(void)::empty = 0uLL;
                  LODWORD(qword_1EE342DB8) = 0;
                }
LABEL_34:
                v56 = *v55;
                if ((int)v48 > 15)
                  v57 = -1;
                else
                  v57 = v48;
                v58 = (char *)this + 12 * v57;
                *((_DWORD *)v58 + 1194) = v27;
                *((_DWORD *)v58 + 1195) = 1;
                JSC::MacroAssemblerARM64::moveInternal<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::TrustedImmPtr,long>(this, v56, v48, v49, v50, v51, v52, v53);
                *v31 = 22;
                v59 = v29 + 24 * (int)v28;
                *(_BYTE *)(v59 + 17) = v32;
                if (*(_BYTE *)(v59 + 15))
                {
                  v60 = *(_DWORD *)(*(_QWORD *)v30 + 20);
                  if (v60 >= 0xFFFFFFFE)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x197CD765CLL);
                  }
                  v41 = (uint64_t *)((char *)this + 5632);
                  *(_WORD *)&v84[12] = 5636;
                  *(_DWORD *)v84 = v60;
                  v42 = v32 | 0x3FFFFF00;
LABEL_25:
                  *(_QWORD *)&v84[4] = v42;
                  v43 = *((unsigned int *)this + 1411);
                  if ((_DWORD)v43 != *((_DWORD *)this + 1410))
                  {
                    v44 = *v41;
LABEL_27:
                    v45 = (_QWORD *)(v44 + 14 * v43);
                    v46 = *(_QWORD *)v84;
                    v47 = *(_QWORD *)&v84[6];
LABEL_28:
                    *(_QWORD *)((char *)v45 + 6) = v47;
                    *v45 = v46;
                    ++*((_DWORD *)this + 1411);
                    goto LABEL_15;
                  }
                  v74 = v43 + 1;
                  goto LABEL_73;
                }
                goto LABEL_15;
              }
            }
            else if (v54 < 3)
            {
LABEL_33:
              v55 = *(uint64_t **)(v9 + 72);
              goto LABEL_34;
            }
            if ((int)v48 > 15)
              v61 = -1;
            else
              v61 = v48;
            v62 = (char *)this + 12 * v61;
            *((_DWORD *)v62 + 1194) = v27;
            *((_DWORD *)v62 + 1195) = 2;
            JSC::MacroAssemblerARM64::load64((uint64_t)this, (v27 << 35) | 0x1D, v48, v49, v50, v51, v52, v53);
            v63 = (uint64_t *)((char *)this + 5632);
            *v31 = 16;
            v64 = v29 + 24 * (int)v28;
            *(_BYTE *)(v64 + 17) = v32;
            v65 = (_BYTE *)(v64 + 17);
            if (*(v65 - 2))
            {
              if (*(_DWORD *)(*(_QWORD *)v30 + 20) >= 0xFFFFFFFE)
              {
                __break(0xC471u);
                JUMPOUT(0x197CD761CLL);
              }
              *(_DWORD *)v84 = *(_DWORD *)(*(_QWORD *)v30 + 20);
              *(_QWORD *)&v84[4] = v32 | 0x3FFFFF00;
              *(_WORD *)&v84[12] = 4100;
              v66 = *((unsigned int *)this + 1411);
              if ((_DWORD)v66 == *((_DWORD *)this + 1410))
              {
                v76 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 5632, v66 + 1, (unint64_t)v84, a4, a5, a6, a7, a8);
                v67 = (_QWORD *)(*((_QWORD *)this + 704) + 14 * *((unsigned int *)this + 1411));
                v68 = *v76;
                v69 = *(uint64_t *)((char *)v76 + 6);
              }
              else
              {
                v67 = (_QWORD *)(*v63 + 14 * v66);
                v68 = *(_QWORD *)v84;
                v69 = *(_QWORD *)&v84[6];
              }
              *(_QWORD *)((char *)v67 + 6) = v69;
              *v67 = v68;
              ++*((_DWORD *)this + 1411);
            }
            if ((v23 & 0xFFFFD3FF00000008) != 0)
            {
              JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v32, 1, a4, a5, a6, a7, a8, (uint64_t)&v82);
              *(_DWORD *)v84 = v82;
              *(_QWORD *)&v84[4] = v83;
              JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)(((unint64_t)v32 << 32) | 0x80000000), (JSC::DFG::Node *)v9, (int *)v84);
            }
            *v31 = 22;
            *v65 = v32;
            if (*(v65 - 2))
            {
              if (*(_DWORD *)(*(_QWORD *)v30 + 20) >= 0xFFFFFFFE)
              {
                __break(0xC471u);
                JUMPOUT(0x197CD763CLL);
              }
              *(_DWORD *)v84 = *(_DWORD *)(*(_QWORD *)v30 + 20);
              *(_QWORD *)&v84[4] = v32 | 0x3FFFFF00;
              *(_WORD *)&v84[12] = 5636;
              v43 = *((unsigned int *)this + 1411);
              if ((_DWORD)v43 != *((_DWORD *)this + 1410))
              {
                v44 = *v63;
                goto LABEL_27;
              }
              v74 = v43 + 1;
              v41 = (uint64_t *)((char *)this + 5632);
LABEL_73:
              v75 = (uint64_t *)WTF::Vector<JSC::DFG::VariableEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v41, v74, (unint64_t)v84, a4, a5, a6, a7, a8);
              v45 = (_QWORD *)(*((_QWORD *)this + 704) + 14 * *((unsigned int *)this + 1411));
              v46 = *v75;
              v47 = *(uint64_t *)((char *)v75 + 6);
              goto LABEL_28;
            }
            break;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 0x11:
          case 0x14:
          case 0x15:
          case 0x18:
            JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x5F9, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateCell(Edge)", "Bad data format");
            __break(0xC471u);
            JUMPOUT(0x197CD76E8);
          case 6:
          case 0x16:
            v32 = *(char *)(v29 + 24 * (int)v28 + 17);
            if (v32 > 15)
              v33 = -1;
            else
              v33 = *(char *)(v29 + 24 * (int)v28 + 17);
            ++*((_DWORD *)this + 3 * v33 + 1196);
            goto LABEL_15;
          case 0x10:
            v35 = v29 + 24 * (int)v28;
            v37 = *(char *)(v35 + 17);
            v36 = (_BYTE *)(v35 + 17);
            v32 = v37;
            v38 = v37;
            if (v37 > 15)
              v39 = -1;
            else
              v39 = v32;
            ++*((_DWORD *)this + 3 * v39 + 1196);
            if ((v23 & 0xFFFFD3FF00000008) != 0)
            {
              JSC::AssemblyHelpers::branchIfNotCell((uint64_t)this, v38, 1, a4, a5, a6, a7, a8, (uint64_t)&v82);
              *(_DWORD *)v84 = v82;
              *(_QWORD *)&v84[4] = v83;
              JSC::DFG::SpeculativeJIT::speculationCheck((uint64_t)this, 1uLL, (JSC::DFG::Node *)((v38 << 32) | 0x80000000), (JSC::DFG::Node *)v9, (int *)v84);
            }
            *v31 = 22;
            *v36 = v32;
            if (!*(_BYTE *)(v29 + 24 * (int)v28 + 15))
              goto LABEL_15;
            v40 = *(_DWORD *)(*(_QWORD *)(v29 + 24 * (int)v28) + 20);
            if (v40 >= 0xFFFFFFFE)
            {
              __break(0xC471u);
              JUMPOUT(0x197CD75E4);
            }
            v41 = (uint64_t *)((char *)this + 5632);
            *(_WORD *)&v84[12] = 5636;
            *(_DWORD *)v84 = v40;
            v42 = v38 | 0x3FFFFF00;
            goto LABEL_25;
          default:
            JSC::DFG::Graph::logAssertionFailure(*((JSC::DFG::Graph **)this + 495), *((JSC::DFG::Node **)this + 497), (const WTF::CString *)"/Library/Caches/com.apple.xbs/Sources/JavaScriptCore/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp", (const char *)0x5FC, "GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateCell(Edge)", "Corrupt data format");
            __break(0xC471u);
            JUMPOUT(0x197CD7734);
        }
        goto LABEL_15;
      }
      if ((v23 & 0x2800FFFFFFF7) != 0)
      {
        if (!JSC::DFG::AbstractValue::filterSlow(v19, 0x2C00FFFFFFF7uLL, a3, a4, a5, a6, a7, a8))
        {
LABEL_42:
          v26 = *v22;
          goto LABEL_8;
        }
      }
      else
      {
        *v22 = v25;
        if (v25)
          goto LABEL_9;
        JSC::DFG::AbstractValue::clear(v19, (uint64_t)this, a3, a4, a5, a6, a7, a8);
      }
      *(_BYTE *)(*((_QWORD *)this + 702) + 80) = 0;
      goto LABEL_42;
    }
  }
  return a1;
}

void JSC::MacroAssemblerARM64::branch64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!*(_BYTE *)(a2 + 212)
    || (*(_DWORD *)(*(_QWORD *)(a2 + 264) + 208) &= ~*(_DWORD *)(a2 + 288),
        JSC::MacroAssemblerARM64::load64(a2, a3, *(char *)(a2 + 272), a4, a5, a6, a7, a8),
        !*(_BYTE *)(a2 + 212)))
  {
    __break(0xC471u);
    JUMPOUT(0x197CD788CLL);
  }
  *(_DWORD *)(*(_QWORD *)(a2 + 296) + 208) &= ~*(_DWORD *)(a2 + 320);
  JSC::MacroAssemblerARM64::load64(a2, a4, *(char *)(a2 + 304), v11, v12, v13, v14, v15);
  JSC::MacroAssemblerARM64::branch64(a2, 0, 16, 17, v16, v17, v18, v19, a1);
}

unsigned int *JSC::MacroAssemblerARM64::branchDoubleZeroOrNaN@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v11;
  JSC::AssemblerBuffer *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  char v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int i;
  unsigned int v35;
  char v36;
  unsigned int v38[2];
  char v39;
  __int16 v40;
  char v41;
  unsigned int v42[2];
  char v43;
  __int16 v44;
  char v45;

  v11 = (32 * a2) | 0x1E602008;
  v12 = (JSC::AssemblerBuffer *)(a1 + 56);
  v13 = *(_DWORD *)(a1 + 200);
  if (v13 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v13) = v11;
  v14 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v14;
  if (*(_BYTE *)(a1 + 328))
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  if (v14 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v14) = 1409286150;
  v15 = *(_DWORD *)(a1 + 200);
  v16 = v15 + 4;
  *(_DWORD *)(a1 + 200) = v15 + 4;
  v17 = v15 + 8;
  v18 = v15 + 4;
  if (v17 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v18 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v18) = -721215457;
  v19 = *(_DWORD *)(a1 + 200) + 4;
  *(_DWORD *)(a1 + 200) = v19;
  v20 = *(unsigned __int8 *)(a1 + 328);
  if (*(_BYTE *)(a1 + 328))
    v21 = -122;
  else
    v21 = -126;
  v42[0] = v16;
  v42[1] = 0;
  v43 = v21;
  v44 = 6;
  v45 = -1;
  if (v20)
  {
    JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::padBeforePatch((_DWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    v19 = *(_DWORD *)(a1 + 200);
  }
  if (v19 + 4 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v19 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v19) = 1409286145;
  v22 = *(_DWORD *)(a1 + 200);
  v23 = v22 + 4;
  *(_DWORD *)(a1 + 200) = v22 + 4;
  v24 = v22 + 8;
  v25 = v22 + 4;
  if (v24 > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, a2, a3, a4, a5, a6, a7, a8);
    v25 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v25) = -721215457;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v26 = -122;
  else
    v26 = -126;
  v38[0] = v23;
  v38[1] = 0;
  v39 = v26;
  v40 = 1;
  v41 = -1;
  JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v42, a1, a3, a4, a5, a6, a7, a8);
  for (i = *(_DWORD *)(a1 + 200); i < *(_DWORD *)(a1 + 52); *(_DWORD *)(a1 + 200) = i)
  {
    if ((i + 4) > *(_DWORD *)(a1 + 192))
    {
      JSC::AssemblerBuffer::outOfLineGrow(v12, v27, v28, v29, v30, v31, v32, v33);
      i = *(_DWORD *)(a1 + 200);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 56) + i) = -721215457;
    i = *(_DWORD *)(a1 + 200) + 4;
  }
  v35 = i;
  if ((i + 4) > *(_DWORD *)(a1 + 192))
  {
    JSC::AssemblerBuffer::outOfLineGrow(v12, v27, v28, v29, v30, v31, v32, v33);
    v35 = *(_DWORD *)(a1 + 200);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 56) + v35) = 335544320;
  *(_DWORD *)(a1 + 200) += 4;
  if (*(_BYTE *)(a1 + 328))
    v36 = 69;
  else
    v36 = 65;
  *(_DWORD *)a9 = i;
  *(_DWORD *)(a9 + 4) = 0;
  *(_BYTE *)(a9 + 8) = v36;
  *(_WORD *)(a9 + 9) = 15;
  *(_BYTE *)(a9 + 11) = -1;
  return JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Jump::link(v38, a1, v28, v29, v30, v31, v32, v33);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileGetByVal(JSC::DFG::Node *,WTF::ScopedLambda<std::tuple<JSC::JSValueRegs,JSC::DataFormat,JSC::DFG::SpeculativeJIT::CanUseFlush> ()(JSC::DataFormat)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;

  v8 = *a1;
  v9 = **a1;
  v10 = *(_QWORD *)(v9 + 3960);
  v11 = *(_DWORD *)(*(_QWORD *)(*a1)[1] + 24) + 1;
  if (*(_DWORD *)(v10 + 164) <= v11)
    goto LABEL_98;
  v12 = *a2;
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * v11);
  v14 = *(_QWORD *)(v9 + 5504);
  v15 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (uint64_t *)(v14 + 24);
  v17 = (uint64_t *)(v14 + 8);
  if ((v13 & 1) != 0)
    v18 = v16;
  else
    v18 = v17;
  v19 = *v18;
  v20 = *v18 + 32 * v15;
  v21 = *(_DWORD *)(v9 + 5584);
  v22 = *(_DWORD *)(v20 + 20);
  if (v21 != v22)
  {
    if ((*(_QWORD *)(v20 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v22 ^ v21) >= 2)
      {
        v48 = *(_QWORD *)v20;
        if (*(_QWORD *)v20 != 4)
        {
          *(_QWORD *)v20 = v48 | 2;
          v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v48 & 1) != 0)
          {
            v60 = 2 * *v49;
            while (v60 * 4)
            {
              v61 = *(_QWORD *)&v49[v60];
              if ((*(_BYTE *)(v61 + 19) & 0xC) == 0)
              {
                v62 = *(_QWORD *)(v61 + 96);
                v63 = (v62 & 1) != 0 ? (v62 >> 1) & 3 : *(unsigned __int8 *)(v62 + 4);
                v60 -= 2;
                if (v63 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_75;
            }
          }
          else if (v49)
          {
            if ((*((_BYTE *)v49 + 19) & 0xC) != 0
              || ((v50 = *((_QWORD *)v49 + 12), (v50 & 1) != 0)
                ? (v51 = (v50 >> 1) & 3)
                : (v51 = *(unsigned __int8 *)(v50 + 4)),
                  v51 == 2))
            {
LABEL_75:
              *(_QWORD *)v20 = 4;
            }
          }
        }
        *(_DWORD *)(v19 + 32 * v15 + 16) = -21020677;
      }
      if ((v21 & 1) != 0)
        *(_QWORD *)v20 &= ~2uLL;
    }
    *(_DWORD *)(v20 + 20) = v21;
  }
  if ((*(_QWORD *)(v20 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v47 = 32;
    goto LABEL_22;
  }
  v23 = *(_QWORD *)(v9 + 3960);
  v24 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v23 + 164) <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197CD7FCCLL);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 152) + 8 * v24);
  v26 = *(_QWORD *)(v9 + 5504);
  v27 = *(unsigned int *)((v25 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v28 = (uint64_t *)(v26 + 24);
  v29 = (uint64_t *)(v26 + 8);
  if ((v25 & 1) != 0)
    v30 = v28;
  else
    v30 = v29;
  v31 = *v30;
  v32 = *v30 + 32 * v27;
  v33 = *(_DWORD *)(v9 + 5584);
  v34 = *(_DWORD *)(v32 + 20);
  if (v33 != v34)
  {
    if ((*(_QWORD *)(v32 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v34 ^ v33) >= 2)
      {
        v52 = *(_QWORD *)v32;
        if (*(_QWORD *)v32 != 4)
        {
          *(_QWORD *)v32 = v52 | 2;
          v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v52 & 1) != 0)
          {
            v64 = 2 * *v53;
            while (v64 * 4)
            {
              v65 = *(_QWORD *)&v53[v64];
              if ((*(_BYTE *)(v65 + 19) & 0xC) == 0)
              {
                v66 = *(_QWORD *)(v65 + 96);
                v67 = (v66 & 1) != 0 ? (v66 >> 1) & 3 : *(unsigned __int8 *)(v66 + 4);
                v64 -= 2;
                if (v67 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_85;
            }
          }
          else if (v53)
          {
            if ((*((_BYTE *)v53 + 19) & 0xC) != 0
              || ((v54 = *((_QWORD *)v53 + 12), (v54 & 1) != 0)
                ? (v55 = (v54 >> 1) & 3)
                : (v55 = *(unsigned __int8 *)(v54 + 4)),
                  v55 == 2))
            {
LABEL_85:
              *(_QWORD *)v32 = 4;
            }
          }
        }
        *(_DWORD *)(v31 + 32 * v27 + 16) = -21020677;
      }
      if ((v33 & 1) != 0)
        *(_QWORD *)v32 &= ~2uLL;
    }
    *(_DWORD *)(v32 + 20) = v33;
  }
  if ((*(_QWORD *)(v32 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v47 = 64;
    goto LABEL_22;
  }
  v35 = *(_QWORD *)(v9 + 3960);
  v36 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v35 + 164) <= v36)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x197CD7FC4);
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v35 + 152) + 8 * v36);
  v38 = *(_QWORD *)(v9 + 5504);
  v39 = *(unsigned int *)((v37 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v40 = (uint64_t *)(v38 + 24);
  v41 = (uint64_t *)(v38 + 8);
  if ((v37 & 1) != 0)
    v42 = v40;
  else
    v42 = v41;
  v43 = *v42;
  v44 = *v42 + 32 * v39;
  v45 = *(_DWORD *)(v9 + 5584);
  v46 = *(_DWORD *)(v44 + 20);
  if (v45 != v46)
  {
    if ((*(_QWORD *)(v44 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v46 ^ v45) >= 2)
      {
        v56 = *(_QWORD *)v44;
        if (*(_QWORD *)v44 != 4)
        {
          *(_QWORD *)v44 = v56 | 2;
          v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v56 & 1) != 0)
          {
            v68 = 2 * *v57;
            while (v68 * 4)
            {
              v69 = *(_QWORD *)&v57[v68];
              if ((*(_BYTE *)(v69 + 19) & 0xC) == 0)
              {
                v70 = *(_QWORD *)(v69 + 96);
                v71 = (v70 & 1) != 0 ? (v70 >> 1) & 3 : *(unsigned __int8 *)(v70 + 4);
                v68 -= 2;
                if (v71 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v57, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_95;
            }
          }
          else if (v57)
          {
            if ((*((_BYTE *)v57 + 19) & 0xC) != 0
              || ((v58 = *((_QWORD *)v57 + 12), (v58 & 1) != 0)
                ? (v59 = (v58 >> 1) & 3)
                : (v59 = *(unsigned __int8 *)(v58 + 4)),
                  v59 == 2))
            {
LABEL_95:
              *(_QWORD *)v44 = 4;
            }
          }
        }
        *(_DWORD *)(v43 + 32 * v39 + 16) = -21020677;
      }
      if ((v45 & 1) != 0)
        *(_QWORD *)v44 &= ~2uLL;
    }
    *(_DWORD *)(v44 + 20) = v45;
  }
  if ((*(_QWORD *)(v44 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v47 = 128;
LABEL_22:
    *(_WORD *)(v12 + 129) |= v47;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileGetByVal(JSC::DFG::Node *,WTF::ScopedLambda<std::tuple<JSC::JSValueRegs,JSC::DataFormat,JSC::DFG::SpeculativeJIT::CanUseFlush> ()(JSC::DataFormat)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  char v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;

  v8 = *a1;
  v9 = **a1;
  v10 = *(_QWORD *)(v9 + 3960);
  v11 = *(_DWORD *)(*(_QWORD *)(*a1)[1] + 24) + 1;
  if (*(_DWORD *)(v10 + 164) <= v11)
    goto LABEL_98;
  v12 = *a2;
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * v11);
  v14 = *(_QWORD *)(v9 + 5504);
  v15 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (uint64_t *)(v14 + 24);
  v17 = (uint64_t *)(v14 + 8);
  if ((v13 & 1) != 0)
    v18 = v16;
  else
    v18 = v17;
  v19 = *v18;
  v20 = *v18 + 32 * v15;
  v21 = *(_DWORD *)(v9 + 5584);
  v22 = *(_DWORD *)(v20 + 20);
  if (v21 != v22)
  {
    if ((*(_QWORD *)(v20 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v22 ^ v21) >= 2)
      {
        v48 = *(_QWORD *)v20;
        if (*(_QWORD *)v20 != 4)
        {
          *(_QWORD *)v20 = v48 | 2;
          v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v48 & 1) != 0)
          {
            v60 = 2 * *v49;
            while (v60 * 4)
            {
              v61 = *(_QWORD *)&v49[v60];
              if ((*(_BYTE *)(v61 + 19) & 0xC) == 0)
              {
                v62 = *(_QWORD *)(v61 + 96);
                v63 = (v62 & 1) != 0 ? (v62 >> 1) & 3 : *(unsigned __int8 *)(v62 + 4);
                v60 -= 2;
                if (v63 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_75;
            }
          }
          else if (v49)
          {
            if ((*((_BYTE *)v49 + 19) & 0xC) != 0
              || ((v50 = *((_QWORD *)v49 + 12), (v50 & 1) != 0)
                ? (v51 = (v50 >> 1) & 3)
                : (v51 = *(unsigned __int8 *)(v50 + 4)),
                  v51 == 2))
            {
LABEL_75:
              *(_QWORD *)v20 = 4;
            }
          }
        }
        *(_DWORD *)(v19 + 32 * v15 + 16) = -21020677;
      }
      if ((v21 & 1) != 0)
        *(_QWORD *)v20 &= ~2uLL;
    }
    *(_DWORD *)(v20 + 20) = v21;
  }
  if ((*(_QWORD *)(v20 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v47 = 2;
    goto LABEL_22;
  }
  v23 = *(_QWORD *)(v9 + 3960);
  v24 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v23 + 164) <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197CD843CLL);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 152) + 8 * v24);
  v26 = *(_QWORD *)(v9 + 5504);
  v27 = *(unsigned int *)((v25 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v28 = (uint64_t *)(v26 + 24);
  v29 = (uint64_t *)(v26 + 8);
  if ((v25 & 1) != 0)
    v30 = v28;
  else
    v30 = v29;
  v31 = *v30;
  v32 = *v30 + 32 * v27;
  v33 = *(_DWORD *)(v9 + 5584);
  v34 = *(_DWORD *)(v32 + 20);
  if (v33 != v34)
  {
    if ((*(_QWORD *)(v32 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v34 ^ v33) >= 2)
      {
        v52 = *(_QWORD *)v32;
        if (*(_QWORD *)v32 != 4)
        {
          *(_QWORD *)v32 = v52 | 2;
          v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v52 & 1) != 0)
          {
            v64 = 2 * *v53;
            while (v64 * 4)
            {
              v65 = *(_QWORD *)&v53[v64];
              if ((*(_BYTE *)(v65 + 19) & 0xC) == 0)
              {
                v66 = *(_QWORD *)(v65 + 96);
                v67 = (v66 & 1) != 0 ? (v66 >> 1) & 3 : *(unsigned __int8 *)(v66 + 4);
                v64 -= 2;
                if (v67 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_85;
            }
          }
          else if (v53)
          {
            if ((*((_BYTE *)v53 + 19) & 0xC) != 0
              || ((v54 = *((_QWORD *)v53 + 12), (v54 & 1) != 0)
                ? (v55 = (v54 >> 1) & 3)
                : (v55 = *(unsigned __int8 *)(v54 + 4)),
                  v55 == 2))
            {
LABEL_85:
              *(_QWORD *)v32 = 4;
            }
          }
        }
        *(_DWORD *)(v31 + 32 * v27 + 16) = -21020677;
      }
      if ((v33 & 1) != 0)
        *(_QWORD *)v32 &= ~2uLL;
    }
    *(_DWORD *)(v32 + 20) = v33;
  }
  if ((*(_QWORD *)(v32 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v47 = 1;
    goto LABEL_22;
  }
  v35 = *(_QWORD *)(v9 + 3960);
  v36 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v35 + 164) <= v36)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x197CD8434);
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v35 + 152) + 8 * v36);
  v38 = *(_QWORD *)(v9 + 5504);
  v39 = *(unsigned int *)((v37 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v40 = (uint64_t *)(v38 + 24);
  v41 = (uint64_t *)(v38 + 8);
  if ((v37 & 1) != 0)
    v42 = v40;
  else
    v42 = v41;
  v43 = *v42;
  v44 = *v42 + 32 * v39;
  v45 = *(_DWORD *)(v9 + 5584);
  v46 = *(_DWORD *)(v44 + 20);
  if (v45 != v46)
  {
    if ((*(_QWORD *)(v44 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v46 ^ v45) >= 2)
      {
        v56 = *(_QWORD *)v44;
        if (*(_QWORD *)v44 != 4)
        {
          *(_QWORD *)v44 = v56 | 2;
          v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v56 & 1) != 0)
          {
            v68 = 2 * *v57;
            while (v68 * 4)
            {
              v69 = *(_QWORD *)&v57[v68];
              if ((*(_BYTE *)(v69 + 19) & 0xC) == 0)
              {
                v70 = *(_QWORD *)(v69 + 96);
                v71 = (v70 & 1) != 0 ? (v70 >> 1) & 3 : *(unsigned __int8 *)(v70 + 4);
                v68 -= 2;
                if (v71 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v57, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_95;
            }
          }
          else if (v57)
          {
            if ((*((_BYTE *)v57 + 19) & 0xC) != 0
              || ((v58 = *((_QWORD *)v57 + 12), (v58 & 1) != 0)
                ? (v59 = (v58 >> 1) & 3)
                : (v59 = *(unsigned __int8 *)(v58 + 4)),
                  v59 == 2))
            {
LABEL_95:
              *(_QWORD *)v44 = 4;
            }
          }
        }
        *(_DWORD *)(v43 + 32 * v39 + 16) = -21020677;
      }
      if ((v45 & 1) != 0)
        *(_QWORD *)v44 &= ~2uLL;
    }
    *(_DWORD *)(v44 + 20) = v45;
  }
  if ((*(_QWORD *)(v44 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v47 = 4;
LABEL_22:
    *(_BYTE *)(v12 + 1) |= v47;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compileGetByVal(JSC::DFG::Node *,WTF::ScopedLambda<std::tuple<JSC::JSValueRegs,JSC::DataFormat,JSC::DFG::SpeculativeJIT::CanUseFlush> ()(JSC::DataFormat)> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  char v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;

  v8 = *a1;
  v9 = **a1;
  v10 = *(_QWORD *)(v9 + 3960);
  v11 = *(_DWORD *)(*(_QWORD *)(*a1)[1] + 24) + 1;
  if (*(_DWORD *)(v10 + 164) <= v11)
    goto LABEL_98;
  v12 = *a2;
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 152) + 8 * v11);
  v14 = *(_QWORD *)(v9 + 5504);
  v15 = *(unsigned int *)((v13 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v16 = (uint64_t *)(v14 + 24);
  v17 = (uint64_t *)(v14 + 8);
  if ((v13 & 1) != 0)
    v18 = v16;
  else
    v18 = v17;
  v19 = *v18;
  v20 = *v18 + 32 * v15;
  v21 = *(_DWORD *)(v9 + 5584);
  v22 = *(_DWORD *)(v20 + 20);
  if (v21 != v22)
  {
    if ((*(_QWORD *)(v20 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v22 ^ v21) >= 2)
      {
        v48 = *(_QWORD *)v20;
        if (*(_QWORD *)v20 != 4)
        {
          *(_QWORD *)v20 = v48 | 2;
          v49 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v48 & 1) != 0)
          {
            v60 = 2 * *v49;
            while (v60 * 4)
            {
              v61 = *(_QWORD *)&v49[v60];
              if ((*(_BYTE *)(v61 + 19) & 0xC) == 0)
              {
                v62 = *(_QWORD *)(v61 + 96);
                v63 = (v62 & 1) != 0 ? (v62 >> 1) & 3 : *(unsigned __int8 *)(v62 + 4);
                v60 -= 2;
                if (v63 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v49, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_75;
            }
          }
          else if (v49)
          {
            if ((*((_BYTE *)v49 + 19) & 0xC) != 0
              || ((v50 = *((_QWORD *)v49 + 12), (v50 & 1) != 0)
                ? (v51 = (v50 >> 1) & 3)
                : (v51 = *(unsigned __int8 *)(v50 + 4)),
                  v51 == 2))
            {
LABEL_75:
              *(_QWORD *)v20 = 4;
            }
          }
        }
        *(_DWORD *)(v19 + 32 * v15 + 16) = -21020677;
      }
      if ((v21 & 1) != 0)
        *(_QWORD *)v20 &= ~2uLL;
    }
    *(_DWORD *)(v20 + 20) = v21;
  }
  if ((*(_QWORD *)(v20 + 8) & 0xFFFFFFFFCFFFFFFFLL) == 0)
  {
    v47 = 2;
    goto LABEL_22;
  }
  v23 = *(_QWORD *)(v9 + 3960);
  v24 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v23 + 164) <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197CD88ACLL);
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v23 + 152) + 8 * v24);
  v26 = *(_QWORD *)(v9 + 5504);
  v27 = *(unsigned int *)((v25 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v28 = (uint64_t *)(v26 + 24);
  v29 = (uint64_t *)(v26 + 8);
  if ((v25 & 1) != 0)
    v30 = v28;
  else
    v30 = v29;
  v31 = *v30;
  v32 = *v30 + 32 * v27;
  v33 = *(_DWORD *)(v9 + 5584);
  v34 = *(_DWORD *)(v32 + 20);
  if (v33 != v34)
  {
    if ((*(_QWORD *)(v32 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v34 ^ v33) >= 2)
      {
        v52 = *(_QWORD *)v32;
        if (*(_QWORD *)v32 != 4)
        {
          *(_QWORD *)v32 = v52 | 2;
          v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v52 & 1) != 0)
          {
            v64 = 2 * *v53;
            while (v64 * 4)
            {
              v65 = *(_QWORD *)&v53[v64];
              if ((*(_BYTE *)(v65 + 19) & 0xC) == 0)
              {
                v66 = *(_QWORD *)(v65 + 96);
                v67 = (v66 & 1) != 0 ? (v66 >> 1) & 3 : *(unsigned __int8 *)(v66 + 4);
                v64 -= 2;
                if (v67 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v53, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_85;
            }
          }
          else if (v53)
          {
            if ((*((_BYTE *)v53 + 19) & 0xC) != 0
              || ((v54 = *((_QWORD *)v53 + 12), (v54 & 1) != 0)
                ? (v55 = (v54 >> 1) & 3)
                : (v55 = *(unsigned __int8 *)(v54 + 4)),
                  v55 == 2))
            {
LABEL_85:
              *(_QWORD *)v32 = 4;
            }
          }
        }
        *(_DWORD *)(v31 + 32 * v27 + 16) = -21020677;
      }
      if ((v33 & 1) != 0)
        *(_QWORD *)v32 &= ~2uLL;
    }
    *(_DWORD *)(v32 + 20) = v33;
  }
  if ((*(_QWORD *)(v32 + 8) & 0xFFFFFFFCFFFFFFFFLL) == 0)
  {
    v47 = 1;
    goto LABEL_22;
  }
  v35 = *(_QWORD *)(v9 + 3960);
  v36 = *(_DWORD *)(*(_QWORD *)v8[1] + 24) + 1;
  if (*(_DWORD *)(v35 + 164) <= v36)
  {
LABEL_98:
    __break(0xC471u);
    JUMPOUT(0x197CD88A4);
  }
  v37 = *(_QWORD *)(*(_QWORD *)(v35 + 152) + 8 * v36);
  v38 = *(_QWORD *)(v9 + 5504);
  v39 = *(unsigned int *)((v37 & 0xFF00FFFFFFFFFFFELL) + 0x14);
  v40 = (uint64_t *)(v38 + 24);
  v41 = (uint64_t *)(v38 + 8);
  if ((v37 & 1) != 0)
    v42 = v40;
  else
    v42 = v41;
  v43 = *v42;
  v44 = *v42 + 32 * v39;
  v45 = *(_DWORD *)(v9 + 5584);
  v46 = *(_DWORD *)(v44 + 20);
  if (v45 != v46)
  {
    if ((*(_QWORD *)(v44 + 8) & 0x2800FFFFFFF7) != 0)
    {
      if ((v46 ^ v45) >= 2)
      {
        v56 = *(_QWORD *)v44;
        if (*(_QWORD *)v44 != 4)
        {
          *(_QWORD *)v44 = v56 | 2;
          v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v56 & 1) != 0)
          {
            v68 = 2 * *v57;
            while (v68 * 4)
            {
              v69 = *(_QWORD *)&v57[v68];
              if ((*(_BYTE *)(v69 + 19) & 0xC) == 0)
              {
                v70 = *(_QWORD *)(v69 + 96);
                v71 = (v70 & 1) != 0 ? (v70 >> 1) & 3 : *(unsigned __int8 *)(v70 + 4);
                v68 -= 2;
                if (v71 != 2)
                  continue;
              }
              WTF::fastFree((unint64_t)v57, a2, a3, a4, a5, a6, a7, a8);
              goto LABEL_95;
            }
          }
          else if (v57)
          {
            if ((*((_BYTE *)v57 + 19) & 0xC) != 0
              || ((v58 = *((_QWORD *)v57 + 12), (v58 & 1) != 0)
                ? (v59 = (v58 >> 1) & 3)
                : (v59 = *(unsigned __int8 *)(v58 + 4)),
                  v59 == 2))
            {
LABEL_95:
              *(_QWORD *)v44 = 4;
            }
          }
        }
        *(_DWORD *)(v43 + 32 * v39 + 16) = -21020677;
      }
      if ((v45 & 1) != 0)
        *(_QWORD *)v44 &= ~2uLL;
    }
    *(_DWORD *)(v44 + 20) = v45;
  }
  if ((*(_QWORD *)(v44 + 8) & 0xFFFFFFFFBFFFFFFFLL) == 0)
  {
    v47 = 4;
LABEL_22:
    *(_BYTE *)(v12 + 1) |= v47;
  }
}

uint64_t WTF::Vector<std::pair<JSC::ARM64Registers::RegisterID,JSC::ARM64Registers::RegisterID>,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<void JSC::CCallHelpers::shuffleRegisters<JSC::ARM64Registers::RegisterID,3u>(std::array<JSC::ARM64Registers::RegisterID,3u>,std::array<JSC::ARM64Registers::RegisterID,3u>)::{lambda(JSC::ARM64Registers::RegisterID const&)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t *v20;
  int v21;
  unsigned __int8 *v22;

  v3 = *a1;
  v4 = *((unsigned int *)a1 + 3);
  v5 = (unsigned __int8 *)(*a1 + 2 * v4);
  if (v4 <= a3)
  {
    v6 = 0;
    v9 = (unsigned __int8 *)(*a1 + 2 * v4);
  }
  else
  {
    v6 = 0;
    v7 = (unsigned __int8 *)(v3 + 2 * a3);
    v8 = v7;
    v9 = v5;
    v10 = v5;
    do
    {
      if (*v8 == v8[1])
      {
        v11 = (char *)v8;
        if (v10 != (unsigned __int8 *)(*a1 + 2 * *((unsigned int *)a1 + 3)))
        {
          v22 = v5;
          v21 = v6;
          v19 = v8;
          v20 = a1;
          if (v8 == v9)
          {
            v11 = (char *)v10;
          }
          else
          {
            v14 = v7;
            v15 = v7 - v9;
            v16 = (char *)v10;
            memmove(v10, v9, v7 - v9);
            v7 = v14;
            v11 = &v16[v15];
          }
          v8 = v19;
          a1 = v20;
          LODWORD(v6) = v21;
          v5 = v22;
        }
        v9 = v8 + 2;
        v6 = (v6 + 1);
        v10 = (unsigned __int8 *)v11;
      }
      v8 += 2;
      v7 += 2;
    }
    while (v8 < v5);
    v3 = *a1;
    v4 = *((unsigned int *)a1 + 3);
    v5 = v10;
  }
  v12 = (unsigned __int8 *)(v3 + 2 * v4);
  if (v9 != v12)
  {
    v17 = a1;
    v18 = v6;
    memmove(v5, v9, v12 - v9);
    v6 = v18;
    a1 = v17;
    LODWORD(v4) = *((_DWORD *)v17 + 3);
  }
  *((_DWORD *)a1 + 3) = v4 - v6;
  return v6;
}

void JSC::MacroAssemblerARM64::urshift64(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v13;

  if (!(_DWORD)a3)
  {
    if ((_DWORD)a2 == (_DWORD)a4)
      return;
    if ((_DWORD)a2 == 63)
    {
      if ((_DWORD)a4 != 31)
      {
        v10 = a4 & 0x1F | 0xD2800000;
        goto LABEL_4;
      }
    }
    else if ((_DWORD)a2 != 31 && (_DWORD)a4 != 31)
    {
      v8 = a4 & 0x1F | ((a2 & 0x1F) << 16);
      v9 = -1442839584;
      goto LABEL_3;
    }
    v8 = a4 | (32 * a2);
    v9 = -1862270976;
    goto LABEL_3;
  }
  v8 = (unsigned __int16)(32 * (a2 & 0x1F)) | ((a3 & 0x3F) << 16) | a4 & 0x1F;
  v9 = -750715904;
LABEL_3:
  v10 = v8 | v9;
LABEL_4:
  v12 = a1 + 50;
  v11 = a1[50];
  v13 = a1 + 14;
  if (v11 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v11 = *v12;
  }
  *(_DWORD *)(*v13 + v11) = v10;
  *v12 += 4;
}

{
  char v8;
  char v9;
  char v10;
  unsigned int v12;

  v8 = a4;
  v9 = a3;
  v10 = a2;
  v12 = a1[50];
  if (v12 + 4 > a1[48])
  {
    JSC::AssemblerBuffer::outOfLineGrow((JSC::AssemblerBuffer *)(a1 + 14), a2, a3, a4, a5, a6, a7, a8);
    v12 = a1[50];
  }
  *(_DWORD *)(*((_QWORD *)a1 + 7) + v12) = (unsigned __int16)(32 * (v10 & 0x1F)) | ((v9 & 0x1F) << 16) | v8 & 0x1F | 0x9AC02400;
  a1[50] += 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(_QWORD *)a2 + 129) |= 0x40u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 1u;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,JSC::StructureStubInfo *,JSC::BaselineUnlinkedStructureStubInfo *,JSC::DFG::UnlinkedStructureStubInfo *> &>(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 1) |= 1u;
}

void std::make_unique[abi:sn180100]<JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::DateInstance *),JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>,JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList&,JSC::DFG::SpeculativeJIT*&,JSC::ExceptionOperationResult<long long> (*&)(JSC::VM *,JSC::DateInstance *),JSC::SpillRegistersMode &,JSC::DFG::ExceptionCheckRequirement &,JSC::JSValueRegs&,JSC::DFG::SpeculativeJIT::TrustedImmPtr&,JSC::ARM64Registers::RegisterID&>(uint64_t *a1, uint64_t *a2, _DWORD **a3, uint64_t *a4, unsigned __int8 *a5, char *a6, char *a7, uint64_t *a8, char *a9)
{
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  _DWORD *v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  _BYTE *v37;
  WTF *v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  _BYTE *v53;
  unsigned int v54;
  _BYTE v55[24];
  WTF *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE v59[24];
  WTF *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[24];

  v16 = WTF::fastMalloc((WTF *)0xB0);
  v17 = *((unsigned int *)a2 + 3);
  v53 = v55;
  v54 = v17;
  if (v17 < 3)
  {
    v18 = v55;
  }
  else
  {
    if (v17 >= 0x15555556)
      goto LABEL_37;
    v18 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v17));
    v53 = v18;
    LODWORD(v17) = *((_DWORD *)a2 + 3);
  }
  if ((_DWORD)v17)
  {
    v19 = *a2;
    v20 = *a2 + 12 * v17;
    do
    {
      *(_DWORD *)v18 = *(_DWORD *)v19;
      *(_QWORD *)(v18 + 4) = *(_QWORD *)(v19 + 4);
      v19 += 12;
      v18 += 12;
    }
    while (v19 != v20);
  }
  v21 = *a3;
  v51 = *a4;
  v22 = *a5;
  v23 = *a6;
  v24 = *a7;
  v25 = *a8;
  v26 = *a9;
  v27 = v54;
  v56 = (WTF *)v59;
  v57 = 2;
  v58 = v54;
  if (v54 < 3)
  {
    v28 = v59;
    if (!v54)
      goto LABEL_14;
  }
  else
  {
    if (v54 >= 0x15555556)
    {
      __break(0xC471u);
      JUMPOUT(0x197CD8E8CLL);
    }
    v28 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v54));
    v57 = 12 * v54 / 0xC;
    v56 = (WTF *)v28;
    v27 = v54;
  }
  v29 = v53;
  v30 = &v53[12 * v27];
  do
  {
    *(_DWORD *)v28 = *(_DWORD *)v29;
    *(_QWORD *)(v28 + 4) = *(_QWORD *)(v29 + 4);
    v29 += 12;
    v28 += 12;
  }
  while (v29 != v30);
LABEL_14:
  v31 = v58;
  v60 = (WTF *)v63;
  v61 = 2;
  v62 = v58;
  if (v58 < 3)
  {
    v37 = v63;
    if (!v58)
      goto LABEL_21;
LABEL_19:
    v38 = v56;
    v39 = (WTF *)((char *)v56 + 12 * v31);
    do
    {
      *(_DWORD *)v37 = *(_DWORD *)v38;
      *(_QWORD *)(v37 + 4) = *(_QWORD *)((char *)v38 + 4);
      v38 = (WTF *)((char *)v38 + 12);
      v37 += 12;
    }
    while (v38 != v39);
    goto LABEL_21;
  }
  if (v58 >= 0x15555556)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x197CD8E84);
  }
  v32 = v21;
  v33 = v23;
  v34 = v26;
  v35 = v25;
  v36 = 12 * v58;
  v37 = (_BYTE *)WTF::fastMalloc((WTF *)(12 * v58));
  v61 = (v36 & 0xFFFFFFFC) / 0xC;
  v60 = (WTF *)v37;
  v31 = v58;
  v25 = v35;
  v26 = v34;
  v23 = v33;
  v21 = v32;
  if (v58)
    goto LABEL_19;
LABEL_21:
  JSC::DFG::JumpingSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList>::JumpingSlowPathGenerator(v16, (uint64_t *)&v60, v21);
  v47 = v60;
  if (v63 != (_BYTE *)v60 && v60 != 0)
  {
    v60 = 0;
    v61 = 0;
    WTF::fastFree((unint64_t)v47, v40, v41, v42, v43, v44, v45, v46);
  }
  *(_QWORD *)v16 = off_1E3574B18;
  *(_QWORD *)(v16 + 92) = 0xFFFFFFFFLL;
  *(_BYTE *)(v16 + 100) = v22;
  *(_BYTE *)(v16 + 101) = v23;
  *(_BYTE *)(v16 + 102) = v24;
  *(_QWORD *)(v16 + 104) = v16 + 120;
  v49 = v16 + 104;
  *(_QWORD *)(v16 + 112) = 2;
  if (!v22)
    JSC::DFG::SpeculativeJIT::silentSpillAllRegistersImpl<WTF::Vector<JSC::DFG::SilentRegisterSavePlan,2ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v21, 0, v49, v24, 0xFFFFFFFFLL, 0xFFFFFFFFLL, v45, v46);
  v50 = v56;
  if (v59 != (_BYTE *)v56 && v56)
  {
    v56 = 0;
    v57 = 0;
    WTF::fastFree((unint64_t)v50, v40, v49, v42, v43, v44, v45, v46);
  }
  *(_QWORD *)v16 = &off_1E3574AE8;
  *(_QWORD *)(v16 + 152) = v51;
  *(_QWORD *)(v16 + 160) = v25;
  *(_BYTE *)(v16 + 168) = v26;
  *a1 = v16;
  if (v55 != v53)
  {
    if (v53)
      WTF::fastFree((unint64_t)v53, v40, v49, v42, v43, v44, v45, v46);
  }
}

uint64_t JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::DateInstance *),JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = off_1E3574B18;
  v9 = *(_QWORD *)(a1 + 104);
  if (a1 + 120 != v9 && v9 != 0)
  {
    *(_QWORD *)(a1 + 104) = 0;
    *(_DWORD *)(a1 + 112) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574808;
  v11 = *(_QWORD *)(a1 + 48);
  if (a1 + 64 != v11 && v11 != 0)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)a1 = off_1E3574838;
  v13 = *(_QWORD *)(a1 + 32);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a1 + 24);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void JSC::DFG::CallResultAndArgumentsSlowPathGenerator<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::JumpList,JSC::ExceptionOperationResult<long long> (*)(JSC::VM *,JSC::DateInstance *),JSC::JSValueRegs,JSC::DFG::SpeculativeJIT::TrustedImmPtr,JSC::ARM64Registers::RegisterID>::~CallResultAndArgumentsSlowPathGenerator(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF *v9;
  WTF *v11;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = off_1E3574B18;
  v9 = (WTF *)*((_QWORD *)this + 13);
  if ((WTF *)((char *)this + 120) != v9 && v9 != 0)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574808;
  v11 = (WTF *)*((_QWORD *)this + 6);
  if ((WTF *)((char *)this + 64) != v11 && v11 != 0)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree((unint64_t)v11, a2, a3, a4, a5, a6, a7, a8);
  }
  *(_QWORD *)this = off_1E3574838;
  v13 = *((_QWORD *)this + 4);
  if ((v13 & 1) != 0 && (v13 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v13 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  v14 = *((_QWORD *)this + 3);
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

