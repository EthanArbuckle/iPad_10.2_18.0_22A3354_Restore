size_t JSC::intlLocalePrototypeFuncGetNumberingSystems(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::IntlLocale *v10;
  JSC::VM *v12;

  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = (JSC::IntlLocale *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v12, (uint64_t)"Intl.Locale.prototype.getNumberingSystems called on value that's not a Locale", 78);
  }
  else
  {
    return JSC::IntlLocale::numberingSystems(v10, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  }
}

_BYTE *JSC::intlLocalePrototypeFuncGetTimeZones(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::IntlLocale *v4;
  JSC::VM *v6;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v4 = (JSC::IntlLocale *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v4 & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
  {
    return (_BYTE *)JSC::throwTypeError((unint64_t)this, &v6, (uint64_t)"Intl.Locale.prototype.getTimeZones called on value that's not a Locale", 71);
  }
  else
  {
    return JSC::IntlLocale::timeZones(v4, this);
  }
}

unint64_t JSC::intlLocalePrototypeFuncGetTextInfo(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::IntlLocale *v4;
  JSC::VM *v6;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v4 = (JSC::IntlLocale *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v4 & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v6, (uint64_t)"Intl.Locale.prototype.getTextInfo called on value that's not a Locale", 70);
  }
  else
  {
    return JSC::IntlLocale::textInfo(v4, this);
  }
}

unint64_t JSC::intlLocalePrototypeFuncGetWeekInfo(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::IntlLocale *v4;
  JSC::VM *v6;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v4 = (JSC::IntlLocale *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v4 & 0xFFFE000000000002) != 0
    || &JSC::IntlLocale::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v6, (uint64_t)"Intl.Locale.prototype.getWeekInfo called on value that's not a Locale", 70);
  }
  else
  {
    return JSC::IntlLocale::weekInfo(v4, this);
  }
}

uint64_t JSC::intlNumberFormatConstructorFuncSupportedLocalesOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v26;
  WTF *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  unsigned int v39;
  char v40;
  WTF **v41;

  v11 = *((_QWORD *)this + 7);
  v12 = atomic_load(&JSC::intlAvailableLocales(void)::initializeOnce);
  if (v12 != -1)
  {
    v38 = (WTF *)&v40;
    v41 = &v38;
    std::__call_once(&JSC::intlAvailableLocales(void)::initializeOnce, &v41, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableLocales(void)::$_0 &&>>);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  JSC::canonicalizeLocaleList((unint64_t)this, v13, (uint64_t)a3, a4, a5, a6, a7, a8, &v38, a9);
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_6;
  v37 = *(_DWORD *)(v11 + 80);
  if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v15, v16, v17, v18, v19, v20);
  if (*(_QWORD *)(v11 + 16))
  {
    v23 = 0;
  }
  else
  {
LABEL_6:
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v21 = 10;
    else
      v21 = *((_QWORD *)a2 + 7);
    JSC::supportedLocales(this, (const WTF::StringImpl *)&JSC::intlAvailableLocales(void)::availableLocales, (JSC::Structure *)&v38, v21, v17, v18, v19, v20);
    v23 = v22;
  }
  v24 = v38;
  if (v39)
  {
    v26 = 8 * v39;
    v27 = v38;
    do
    {
      v28 = *(WTF::StringImpl **)v27;
      *(_QWORD *)v27 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, v14, v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      v27 = (WTF *)((char *)v27 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  if (v24)
    WTF::fastFree((unint64_t)v24, v14, v15, v16, v17, v18, v19, v20);
  return v23;
}

uint64_t JSC::JSGlobalObject::numberFormatStructure(unint64_t this)
{
  uint64_t v1;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  _QWORD v5[3];

  v1 = *(_QWORD *)(this + 400);
  if ((v1 & 1) != 0)
  {
    v3 = *(uint64_t (**)(_QWORD *))(v1 & 0xFFFFFFFFFFFFFFFCLL);
    v4 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v4 = (_QWORD *)(this - 16);
    v5[0] = *v4;
    v5[1] = this;
    v5[2] = this + 400;
    return v3(v5);
  }
  return v1;
}

JSC::JSObject *JSC::constructIntlNumberFormat(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[50];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 50);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

uint64_t JSC::intlNumberFormatPrototypeFuncFormatToParts(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  double v23;
  int v24;
  JSC::VM *v25;
  char v26;

  v10 = *((_QWORD *)this + 7);
  v25 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlNumberFormat::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v25, (uint64_t)"Intl.NumberFormat.prototype.formatToParts called on value that's not a NumberFormat", 84);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  JSC::toIntlMathematicalValue((JSC::VM **)this, v12, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)&v23, a9);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_6;
  v22 = *(_DWORD *)(v10 + 80);
  if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
  if (*(_QWORD *)(v10 + 16))
  {
    v20 = 0;
  }
  else
  {
LABEL_6:
    if (v24)
      v19 = JSC::IntlNumberFormat::formatToParts(v11, (unint64_t)this, (JSC::IntlMathematicalValue *)&v23, 0);
    else
      v19 = JSC::IntlNumberFormat::formatToParts((JSC::IntlNumberFormat *)v11, this, v23, 0);
    v20 = v19;
  }
  if (v24 != -1)
    ((void (*)(char *, double *))off_1E359CE60[v24])(&v26, &v23);
  return v20;
}

unint64_t JSC::intlNumberFormatPrototypeFuncResolvedOptions(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  JSC::IntlNumberFormat *v12;
  const WTF::String *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(_QWORD *);
  _QWORD *v21;
  int v22;
  JSC::IntlNumberFormat *v23;
  JSC::VM *v24;
  _QWORD v25[3];

  v9 = *(_QWORD *)(this + 56);
  v24 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  v11 = *(_QWORD *)(this + 400);
  if ((v11 & 1) != 0)
  {
    v20 = *(void (**)(_QWORD *))(v11 & 0xFFFFFFFFFFFFFFFCLL);
    v21 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v21 = (_QWORD *)(this - 16);
    v25[0] = *v21;
    v25[1] = this;
    v25[2] = this + 400;
    v20(v25);
  }
  v12 = (JSC::IntlNumberFormat *)JSC::unwrapForLegacyIntlConstructor<JSC::IntlNumberFormat>(this, v10, *(_DWORD **)(this + 408), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    v22 = *(_DWORD *)(v9 + 80);
    if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
    {
      v23 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)v13, v14, v15, v16, v17, v18);
      v12 = v23;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if (v12)
    return JSC::IntlNumberFormat::resolvedOptions(v12, (JSC::JSGlobalObject *)this, v13, v14, v15, v16, v17, v18);
  return JSC::throwTypeError(this, &v24, (uint64_t)"Intl.NumberFormat.prototype.resolvedOptions called on value that's not a NumberFormat", 86);
}

uint64_t JSC::unwrapForLegacyIntlConstructor<JSC::IntlNumberFormat>(unint64_t a1, uint64_t a2, _DWORD *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int HasInstance;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL hasExceptionsAfterHandlingTraps;
  BOOL v36;
  int v37;

  if ((a2 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(a2 + 5) < 0x17u)
    return 0;
  result = a2;
  if (&JSC::IntlNumberFormat::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
    return result;
  v11 = *(_QWORD *)(a1 + 56);
  JSC::JSObject::getDirect(a3, (JSC::VM *)v11, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2160), a4, a5, a6, a7, a8);
  HasInstance = JSC::JSObject::defaultHasInstance(a1, a2, v12, v13, v14, v15, v16, v17);
  if (*(_DWORD *)(v11 + 80))
  {
    v37 = HasInstance;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v19, v20, v21, v22, v23, v24, v25);
    result = 0;
    if (hasExceptionsAfterHandlingTraps || ((v37 ^ 1) & 1) != 0)
      return result;
  }
  else if (!HasInstance)
  {
    return 0;
  }
  v26 = JSC::JSObject::get((unsigned int *)a2, a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 48) + 4312), v21, v22, v23, v24, v25);
  v34 = v26;
  if (!*(_DWORD *)(v11 + 80))
  {
    if ((v26 & 0xFFFE000000000002) == 0)
    {
LABEL_9:
      if (&JSC::IntlNumberFormat::s_info == (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
        return v34;
      else
        return 0;
    }
    return 0;
  }
  v36 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v27, v28, v29, v30, v31, v32, v33);
  result = 0;
  if (!v36 && (v34 & 0xFFFE000000000002) == 0)
    goto LABEL_9;
  return result;
}

uint64_t JSC::JSGlobalObject::numberFormatConstructor(unint64_t this)
{
  uint64_t v2;
  void (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  v2 = *(_QWORD *)(this + 400);
  if ((v2 & 1) != 0)
  {
    v4 = *(void (**)(_QWORD *))(v2 & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v5 = (_QWORD *)(this - 16);
    v6[0] = *v5;
    v6[1] = this;
    v6[2] = this + 400;
    v4(v6);
  }
  return *(_QWORD *)(this + 408);
}

unint64_t JSC::intlObjectFuncGetCanonicalLocales(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  unint64_t v11;
  JSC::JSGlobalObject *v12;
  const WTF::String *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  JSC::VM *v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  JSC::VM *v25;
  WTF *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  int v33;
  unint64_t OutOfMemoryError;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  JSC::Exception *v41;
  WTF *v42;
  uint64_t v44;
  WTF *v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  WTF *v56;
  JSC::Structure *v57;

  v10 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  JSC::canonicalizeLocaleList((unint64_t)this, v11, (uint64_t)a3, a4, a5, a6, a7, a8, &v56, a9);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_4;
  v55 = *(_DWORD *)(v10 + 80);
  if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v13, v14, v15, v16, v17, v18);
  if (*(_QWORD *)(v10 + 16))
  {
    v24 = 0;
    LODWORD(v20) = (_DWORD)v57;
  }
  else
  {
LABEL_4:
    v20 = (JSC::VM *)v57;
    v21 = *((_DWORD *)this + 227);
    if (v21)
      v22 = 16 * (v21 & 0xFFFFFFFE);
    else
      v22 = 0;
    v23 = JSC::JSArray::tryCreate((JSC::JSArray *)v10, v22, (JSC::Structure *)v57, v14, v15, v16, v17, v18, v19);
    if (v23)
    {
      v24 = v23;
      if (!(_DWORD)v20)
        goto LABEL_22;
      v25 = 0;
      v26 = v56;
      while (1)
      {
        v27 = JSC::jsString((JSC *)v10, v26, v13, v14, v15, v16, v17, v18);
        JSC::JSObject::putDirectIndex(v24, (unint64_t)this, v25, v27, v28, v29, v30, v31, v32);
        if (*(_DWORD *)(v10 + 80))
        {
          v33 = *(_DWORD *)(v10 + 80);
          if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v13, v14, v15, v16, v17, v18);
          if (*(_QWORD *)(v10 + 16))
            break;
        }
        v25 = (JSC::VM *)((char *)v25 + 1);
        v26 = (WTF *)((char *)v26 + 8);
        if (v20 == v25)
          goto LABEL_22;
      }
    }
    else
    {
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, v12);
      v41 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v41 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)OutOfMemoryError, 0, v35, v36, v37, v38, v39);
      }
      JSC::VM::throwException((JSC::VM *)v10, this, v41, v40, v35, v36, v37, v38, v39);
    }
    v24 = 0;
  }
LABEL_22:
  v42 = v56;
  if ((_DWORD)v20)
  {
    v44 = 8 * v20;
    v45 = v56;
    do
    {
      v46 = *(WTF::StringImpl **)v45;
      *(_QWORD *)v45 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
        {
          WTF::StringImpl::~StringImpl(v46, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
          WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
        }
        else
        {
          *(_DWORD *)v46 -= 2;
        }
      }
      v45 = (WTF *)((char *)v45 + 8);
      v44 -= 8;
    }
    while (v44);
  }
  if (v42)
    WTF::fastFree((unint64_t)v42, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
  return v24;
}

unint64_t JSC::intlObjectFuncSupportedValuesOf(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t KeywordValues;
  unsigned int v24;
  const char *v25;
  unsigned int v26;
  JSC *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  JSC::JSGlobalObject *v54;
  uint64_t v55;
  JSC::VM *v56;
  char *v57;
  int *v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int32x4_t v67;
  WTF *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char *v78;
  int v79;
  unsigned int v80;
  WTF *v81;
  signed int v82;
  WTF *v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  JSC::Heap **v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  JSC::Exception *v95;
  WTF::StringImpl *v96;
  unsigned int v97;
  WTF *v98;
  WTF::AtomStringImpl *v99;
  const WTF::StringImpl **v100;
  signed int v101;
  WTF *v102;
  unsigned int v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  _BYTE *v114;
  int v115;
  int *v116;
  _BYTE *v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  WTF::StringImpl **v123;
  char *v124;
  WTF *v125;
  uint64_t v126;
  WTF *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  const WTF::StringImpl *v148;
  const WTF::StringImpl *v149;
  const WTF::StringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __n128 v156;
  WTF *v157;
  WTF *v158;
  const WTF::StringImpl **v159;
  uint64_t v160;
  WTF *v161;
  BOOL v162;
  unint64_t OutOfMemoryError;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  JSC::Exception *v170;
  uint64_t v171;
  WTF **v172;
  WTF *v173;
  BOOL v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  WTF *v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  size_t v192;
  uint64_t v193;
  WTF *v194;
  WTF *v195;
  int *v196;
  _BYTE *v197;
  const WTF::StringImpl *v198;
  uint64_t v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  WTF *v205;
  uint64_t v206;
  int v207;
  uint64_t v208;
  _BYTE *v209;
  int v210;
  int *v211;
  _BYTE *v212;
  WTF::AtomStringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  WTF *v218;
  uint64_t v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  unint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  const WTF::StringImpl *v231;
  const WTF::StringImpl *v232;
  const WTF::StringImpl *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __n128 v239;
  WTF *v240;
  WTF *v241;
  const WTF::StringImpl **v242;
  uint64_t v243;
  WTF *v244;
  BOOL v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __n128 v252;
  WTF *v253;
  uint64_t v254;
  WTF::StringImpl *v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  WTF *v264;
  BOOL v265;
  uint64_t v266;
  WTF **v267;
  WTF *v268;
  BOOL v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  unint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  WTF *v288;
  uint64_t v289;
  uint64_t v290;
  WTF::StringImpl *v291;
  unint64_t v292;
  void *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  WTF *v300;
  uint64_t v301;
  WTF::StringImpl *v302;
  unint64_t v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  WTF *v311;
  uint64_t v312;
  uint64_t v313;
  WTF::StringImpl *v314;
  unint64_t v315;
  void *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  WTF *v323;
  uint64_t v324;
  WTF::StringImpl *v325;
  unint64_t v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v335;
  uint64_t (*v336)(WTF **);
  WTF **v337;
  int v338;
  WTF *v339;
  WTF::StringImpl *v340;
  WTF::StringImpl *v341;
  int v342;
  WTF::StringImpl *v343;
  uint64_t v344;
  int v345;
  JSC::VM *v346;
  WTF *v347;
  unint64_t v348;
  char *v349;

  v10 = *(_QWORD *)(this + 56);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v347 = (WTF *)10;
LABEL_42:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v347, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, (int **)&v340);
    goto LABEL_8;
  }
  v11 = *((_QWORD *)a2 + 6);
  v347 = (WTF *)v11;
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
    goto LABEL_42;
  v12 = *(WTF::StringImpl **)(v11 + 8);
  if ((v12 & 1) != 0)
  {
    v12 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v11, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (!v12)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v12)
LABEL_6:
    *(_DWORD *)v12 += 2;
LABEL_7:
  v340 = v12;
LABEL_8:
  if (*(_DWORD *)(v10 + 80))
  {
    v335 = *(_DWORD *)(v10 + 80);
    if ((v335 & 0x27) != 0 && (v335 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      goto LABEL_253;
  }
  if (WTF::equalInternal<unsigned char>((uint64_t)v340, (unint64_t)"calendar", 8))
  {
    v20 = atomic_load(&JSC::intlAvailableCalendars(void)::initializeOnce);
    if (v20 != -1)
    {
      v347 = (WTF *)&v346;
      v343 = (WTF::StringImpl *)&v347;
      std::__call_once(&JSC::intlAvailableCalendars(void)::initializeOnce, &v343, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableCalendars(void)::$_0 &&>>);
    }
    v21 = &JSC::intlAvailableCalendars(void)::availableCalendars;
LABEL_13:
    v22 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(this, (uint64_t)v21, v19, v13, v14, v15, v16, v17, v18);
    goto LABEL_26;
  }
  if (!WTF::equalInternal<unsigned char>((uint64_t)v340, (unint64_t)"collation", 9))
  {
    if (WTF::equalInternal<unsigned char>((uint64_t)v340, (unint64_t)"currency", 8))
    {
      v346 = *(JSC::VM **)(this + 56);
      LODWORD(v341) = 0;
      KeywordValues = ucurr_openISOCurrencies();
      if ((int)v341 >= 1 || (v26 = uenum_count(), (int)v341 >= 1))
      {
        v25 = "failed to enumerate available currencies";
        goto LABEL_22;
      }
      v79 = v26;
      v347 = (WTF *)&v349;
      v348 = 1;
      if (v26 < 0xFFFFFFFE)
      {
        v101 = v26 + 2;
        if ((v26 + 2) >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19896CBB0);
        }
        v102 = (WTF *)WTF::fastMalloc((WTF *)(8 * v101));
        LODWORD(v348) = v101;
        v347 = v102;
        v80 = HIDWORD(v348);
        v343 = (WTF::StringImpl *)"VES";
        v344 = 4;
        if (HIDWORD(v348) == v101)
        {
          WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v347, (uint64_t *)&v343);
          v103 = HIDWORD(v348);
          goto LABEL_183;
        }
        v81 = v102;
      }
      else
      {
        v80 = 0;
        v81 = (WTF *)&v349;
      }
      v199 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v199 = 0x300000002;
      *(_QWORD *)(v199 + 8) = "VES";
      *(_DWORD *)(v199 + 16) = 4;
      v200 = HIDWORD(v348);
      *((_QWORD *)v81 + v80) = v199;
      v103 = v200 + 1;
      HIDWORD(v348) = v200 + 1;
LABEL_183:
      v343 = (WTF::StringImpl *)"UYW";
      v344 = 4;
      if (v103 == (_DWORD)v348)
      {
        WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v347, (uint64_t *)&v343);
      }
      else
      {
        v205 = v347;
        v206 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v206 = 0x300000002;
        *(_QWORD *)(v206 + 8) = "UYW";
        *(_DWORD *)(v206 + 16) = 4;
        v207 = HIDWORD(v348);
        *((_QWORD *)v205 + v103) = v206;
        HIDWORD(v348) = v207 + 1;
      }
      if (v79 >= 1)
      {
        while (1)
        {
          v345 = 0;
          v208 = uenum_next();
          if ((int)v341 >= 1)
            break;
          v209 = (_BYTE *)v208;
          if (v208)
          {
            v210 = v345;
            if (v345)
            {
              if (v345 < 0)
              {
                __break(0xC471u);
                JUMPOUT(0x19896CB98);
              }
              v211 = (int *)WTF::fastCompactMalloc((WTF *)(v345 + 20));
              v212 = v211 + 5;
              *v211 = 2;
              v211[1] = v210;
              *((_QWORD *)v211 + 1) = v211 + 5;
              v211[4] = 4;
              if (v210 == 1)
                *v212 = *v209;
              else
                memcpy(v212, v209, v210);
            }
            else
            {
              WTF::StringImpl::s_emptyAtomString += 2;
              v211 = &WTF::StringImpl::s_emptyAtomString;
            }
          }
          else
          {
            v211 = 0;
          }
          v343 = (WTF::StringImpl *)v211;
          if (!WTF::equalInternal<unsigned char>((uint64_t)v211, (unint64_t)"EQE", 3)
            && !WTF::equalInternal<unsigned char>((uint64_t)v343, (unint64_t)"LSM", 3))
          {
            LODWORD(v216) = HIDWORD(v348);
            if (HIDWORD(v348) == (_DWORD)v348)
            {
              v217 = WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v347, HIDWORD(v348) + 1, (unint64_t)&v343);
              v216 = HIDWORD(v348);
              v218 = v347;
              v219 = *(_QWORD *)v217;
              *(_QWORD *)v217 = 0;
              *((_QWORD *)v218 + v216) = v219;
            }
            else
            {
              v220 = v343;
              v343 = 0;
              *((_QWORD *)v347 + HIDWORD(v348)) = v220;
            }
            HIDWORD(v348) = v216 + 1;
          }
          v221 = v343;
          v343 = 0;
          if (v221)
          {
            if (*(_DWORD *)v221 == 2)
            {
              WTF::StringImpl::~StringImpl(v221, v213, v214, v215, v201, v202, v203, v204);
              WTF::fastFree(v222, v223, v224, v225, v226, v227, v228, v229);
            }
            else
            {
              *(_DWORD *)v221 -= 2;
            }
          }
          if (!--v79)
            goto LABEL_208;
        }
        JSC::throwTypeError(this, &v346, (uint64_t)"failed to enumerate available currencies", 41);
        v22 = 0;
        goto LABEL_284;
      }
LABEL_208:
      v230 = 126 - 2 * __clz(HIDWORD(v348));
      if (HIDWORD(v348))
        v231 = (const WTF::StringImpl *)v230;
      else
        v231 = 0;
      std::__introsort<std::_ClassicAlgPolicy,JSC::availableCurrencies(JSC::JSGlobalObject *)::$_0 &,WTF::String *,false>((const WTF::StringImpl **)v347, (WTF *)((char *)v347 + 8 * HIDWORD(v348)), v231, 1, v201, v202, v203, v204);
      v240 = v347;
      if (HIDWORD(v348))
      {
        v241 = (WTF *)((char *)v347 + 8 * HIDWORD(v348));
        if (HIDWORD(v348) != 1)
        {
          v242 = (const WTF::StringImpl **)((char *)v347 + 8);
          v243 = 8 * HIDWORD(v348) - 16;
          while (1)
          {
            v244 = *(WTF **)v240;
            v232 = *v242;
            if (*(const WTF::StringImpl **)v240 == *v242)
              break;
            v245 = !v244 || v232 == 0;
            if (!v245 && WTF::equal(v244, v232, v233))
              break;
            ++v242;
            v240 = (WTF *)((char *)v240 + 8);
            v243 -= 8;
            if (v242 == (const WTF::StringImpl **)v241)
              goto LABEL_275;
          }
          if ((WTF *)((char *)v240 + 16) != v241)
          {
            v266 = 16;
            v267 = (WTF **)v240;
            while (1)
            {
              v268 = *v267;
              v232 = *(const WTF::StringImpl **)((char *)v240 + v266);
              if (*v267 != v232)
              {
                if (v268)
                  v269 = v232 == 0;
                else
                  v269 = 1;
                if (v269)
                  goto LABEL_246;
                if (!WTF::equal(v268, v232, v233))
                  break;
              }
LABEL_249:
              v266 += 8;
              v243 -= 8;
              if (!v243)
                goto LABEL_274;
            }
            v232 = *(const WTF::StringImpl **)((char *)v240 + v266);
LABEL_246:
            *(_QWORD *)((char *)v240 + v266) = 0;
            v271 = v267[1];
            ++v267;
            v270 = v271;
            *v267 = v232;
            if (v271)
            {
              if (*(_DWORD *)v270 == 2)
              {
                WTF::StringImpl::~StringImpl(v270, v232, (uint64_t)v233, v234, v235, v236, v237, v238);
                WTF::fastFree(v272, v273, v274, v275, v276, v277, v278, v279);
              }
              else
              {
                *(_DWORD *)v270 -= 2;
              }
            }
            goto LABEL_249;
          }
          v267 = (WTF **)v240;
LABEL_274:
          v241 = (WTF *)(v267 + 1);
        }
      }
      else
      {
        v241 = v347;
      }
LABEL_275:
      v311 = (WTF *)((char *)v347 + 8 * HIDWORD(v348));
      v312 = HIDWORD(v348) - ((v311 - v241) >> 3);
      if (v311 != v241)
      {
        v313 = -8 * ((v311 - v241) >> 3);
        do
        {
          v314 = *(WTF::StringImpl **)((char *)v311 + v313);
          *(_QWORD *)((char *)v311 + v313) = 0;
          if (v314)
          {
            if (*(_DWORD *)v314 == 2)
            {
              WTF::StringImpl::~StringImpl(v314, v232, (uint64_t)v233, v234, v235, v236, v237, v238);
              WTF::fastFree(v315, v316, v317, v318, v319, v320, v321, v322);
            }
            else
            {
              *(_DWORD *)v314 -= 2;
            }
          }
          v313 += 8;
        }
        while (v313);
      }
      HIDWORD(v348) = v312;
      v22 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(this, (uint64_t)&v347, v239, (uint64_t)v233, v234, v235, v236, v237, v238);
LABEL_284:
      if (HIDWORD(v348))
      {
        v323 = v347;
        v324 = 8 * HIDWORD(v348);
        do
        {
          v325 = *(WTF::StringImpl **)v323;
          *(_QWORD *)v323 = 0;
          if (v325)
          {
            if (*(_DWORD *)v325 == 2)
            {
              WTF::StringImpl::~StringImpl(v325, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v326, v327, v328, v329, v330, v331, v332, v333);
            }
            else
            {
              *(_DWORD *)v325 -= 2;
            }
          }
          v323 = (WTF *)((char *)v323 + 8);
          v324 -= 8;
        }
        while (v324);
      }
LABEL_292:
      v264 = v347;
      v265 = &v349 == (char **)v347;
      goto LABEL_293;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v340, (unint64_t)"numberingSystem", 15))
    {
      v346 = *(JSC::VM **)(this + 56);
      LODWORD(v341) = 0;
      KeywordValues = unumsys_openAvailableNames();
      if ((int)v341 >= 1 || (v39 = uenum_count(), (int)v341 >= 1))
      {
        v25 = "failed to enumerate available numbering systems";
        v27 = (JSC *)this;
        v28 = 48;
        goto LABEL_23;
      }
      v97 = v39;
      v98 = (WTF *)&v349;
      v347 = (WTF *)&v349;
      v348 = 1;
      if (v39 >= 2)
      {
        if (v39 >> 29)
        {
LABEL_314:
          __break(0xC471u);
          JUMPOUT(0x19896CB90);
        }
        v185 = (WTF *)WTF::fastMalloc((WTF *)(8 * (int)v39));
        LODWORD(v348) = v97;
        v347 = v185;
        do
        {
LABEL_157:
          v345 = 0;
          v186 = uenum_next();
          if ((int)v341 >= 1)
          {
            JSC::throwTypeError(this, &v346, (uint64_t)"failed to enumerate available numbering systems", 48);
LABEL_227:
            v22 = 0;
            goto LABEL_228;
          }
          v187 = (WTF::StringImpl *)v186;
          v188 = unumsys_openByName();
          v189 = v188;
          if ((int)v341 < 1)
          {
            if (MEMORY[0x19AEBC6F0](v188))
            {
              v190 = 4;
            }
            else
            {
              v191 = v345;
              v192 = v345;
              v343 = v187;
              v344 = v345;
              v193 = HIDWORD(v348);
              if (HIDWORD(v348) == (_DWORD)v348)
              {
                WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,std::span<char const,18446744073709551615ul>>((uint64_t)&v347, (uint64_t)&v343);
              }
              else
              {
                v194 = v347;
                if (v187)
                {
                  if (v345)
                  {
                    v339 = v347;
                    if (v345 < 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19896CBA8);
                    }
                    v195 = v98;
                    v196 = (int *)WTF::fastCompactMalloc((WTF *)(v345 + 20));
                    v197 = v196 + 5;
                    *v196 = 2;
                    v196[1] = v191;
                    *((_QWORD *)v196 + 1) = v196 + 5;
                    v196[4] = 4;
                    if (v191 == 1)
                      *v197 = *(_BYTE *)v187;
                    else
                      memcpy(v197, v187, v192);
                    v194 = v339;
                  }
                  else
                  {
                    v195 = v98;
                    v196 = &WTF::StringImpl::s_emptyAtomString;
                    WTF::StringImpl::s_emptyAtomString += 2;
                  }
                }
                else
                {
                  v195 = v98;
                  v196 = 0;
                }
                *((_QWORD *)v194 + v193) = v196;
                ++HIDWORD(v348);
                v98 = v195;
              }
              v190 = 0;
            }
          }
          else
          {
            JSC::throwTypeError(this, &v346, (uint64_t)"failed to enumerate available numbering systems", 48);
            v190 = 1;
          }
          if (v189)
            unumsys_close();
          if ((v190 | 4) != 4)
            goto LABEL_227;
          --v97;
        }
        while (v97);
        v100 = (const WTF::StringImpl **)v347;
        v99 = (WTF *)((char *)v347 + 8 * HIDWORD(v348));
        if (!HIDWORD(v348))
          goto LABEL_224;
        v198 = (const WTF::StringImpl *)(126 - 2 * __clz(HIDWORD(v348)));
      }
      else
      {
        v99 = (WTF::AtomStringImpl *)&v349;
        v100 = (const WTF::StringImpl **)&v349;
        if (v97 == 1)
          goto LABEL_157;
LABEL_224:
        v198 = 0;
      }
      std::__introsort<std::_ClassicAlgPolicy,JSC::availableNumberingSystems(JSC::JSGlobalObject *)::$_0 &,WTF::String *,false>(v100, v99, v198, 1, a5, a6, a7, a8);
      v22 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(this, (uint64_t)&v347, v252, v246, v247, v248, v249, v250, v251);
LABEL_228:
      if (HIDWORD(v348))
      {
        v253 = v347;
        v254 = 8 * HIDWORD(v348);
        do
        {
          v255 = *(WTF::StringImpl **)v253;
          *(_QWORD *)v253 = 0;
          if (v255)
          {
            if (*(_DWORD *)v255 == 2)
            {
              WTF::StringImpl::~StringImpl(v255, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v256, v257, v258, v259, v260, v261, v262, v263);
            }
            else
            {
              *(_DWORD *)v255 -= 2;
            }
          }
          v253 = (WTF *)((char *)v253 + 8);
          v254 -= 8;
        }
        while (v254);
      }
      v264 = v347;
      v265 = v98 == v347;
LABEL_293:
      if (!v265 && v264 != 0)
      {
        v347 = 0;
        LODWORD(v348) = 0;
        WTF::fastFree((unint64_t)v264, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      }
      goto LABEL_24;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v340, (unint64_t)"timeZone", 8))
    {
      v40 = atomic_load(&JSC::intlAvailableTimeZones(void)::initializeOnce);
      if (v40 != -1)
      {
        v347 = (WTF *)&v346;
        v343 = (WTF::StringImpl *)&v347;
        std::__call_once(&JSC::intlAvailableTimeZones(void)::initializeOnce, &v343, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableTimeZones(void)::$_0 &&>>);
      }
      v21 = &JSC::intlAvailableTimeZones(void)::availableTimeZones;
      goto LABEL_13;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v340, (unint64_t)"unit", 4))
    {
      v50 = *(_QWORD *)(this + 56);
      v51 = *(_DWORD *)(this + 896);
      if (v51)
        v52 = 16 * (v51 & 0xFFFFFFFE);
      else
        v52 = 0;
      v53 = JSC::JSArray::tryCreate(*(JSC::JSArray **)(this + 56), v52, (JSC::Structure *)0x2D, v44, v45, v46, v47, v48, v49);
      if (v53)
      {
        v22 = v53;
        v55 = 0;
        v56 = 0;
        while (1)
        {
          v57 = (&JSC::simpleUnits)[v55 + 3];
          if (!v57 || (v338 = (_DWORD)v57 - 1, v57 == (char *)1))
          {
            WTF::StringImpl::s_emptyAtomString += 2;
            v58 = &WTF::StringImpl::s_emptyAtomString;
          }
          else
          {
            v78 = (&JSC::simpleUnits)[v55 + 2];
            v58 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
            *v58 = 2;
            v58[1] = v338;
            *((_QWORD *)v58 + 1) = v78;
            v58[4] = 4;
          }
          v347 = (WTF *)v58;
          v66 = JSC::jsString(v50, (JSC::VM *)&v347, (uint64_t)a3, a4, a5, a6, a7, a8);
          v68 = v347;
          v347 = 0;
          if (v68)
          {
            if (*(_DWORD *)v68 == 2)
            {
              WTF::StringImpl::~StringImpl(v68, v59, v60, v61, v62, v63, v64, v65);
              WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
            }
            else
            {
              *(_DWORD *)v68 -= 2;
            }
          }
          JSC::JSObject::putDirectIndex(v22, this, v56, v66, v62, v63, v64, v65, v67);
          if (*(_DWORD *)(v50 + 80))
          {
            v77 = *(_DWORD *)(v50 + 80);
            if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v50 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v50 + 16))
              break;
          }
          v55 += 4;
          v56 = (JSC::VM *)((_DWORD)v56 + 1);
          if (v55 == 180)
            goto LABEL_26;
        }
      }
      else
      {
        OutOfMemoryError = JSC::createOutOfMemoryError(this, v54);
        v170 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v170 = (JSC::Exception *)JSC::Exception::create(v50, (JSC::VM *)OutOfMemoryError, 0, v164, v165, v166, v167, v168);
        }
        JSC::VM::throwException((JSC::VM *)v50, (JSC::JSGlobalObject *)this, v170, v169, v164, v165, v166, v167, v168);
      }
    }
    else
    {
      v85 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v85 = 0x2600000002;
      *(_QWORD *)(v85 + 8) = "Unknown key for Intl.supportedValuesOf";
      *(_DWORD *)(v85 + 16) = 4;
      v343 = (WTF::StringImpl *)v85;
      v86 = *(_QWORD *)(this + 128);
      v87 = *(JSC::Heap ***)(this + 56);
      if ((v86 & 1) != 0)
      {
        v336 = *(uint64_t (**)(WTF **))(v86 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v337 = (WTF **)(this - 16);
        else
          v337 = (WTF **)(this & 0xFFFFFFFFFFFFC000 | 8);
        v347 = *v337;
        v348 = this;
        v349 = (char *)(this + 128);
        v86 = v336(&v347);
      }
      v88 = JSC::ErrorInstance::create(v87, v86, &v343, 0, 0, 0, 2, 1);
      v95 = (JSC::Exception *)v88;
      if ((v88 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v88 & 0xFFFFFFFE) + 0x4C)))
      {
        v95 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v88, 0, v89, v90, v91, v92, v93);
      }
      JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v95, v94, v89, v90, v91, v92, v93);
      v96 = v343;
      v343 = 0;
      if (v96)
      {
        if (*(_DWORD *)v96 == 2)
        {
          WTF::StringImpl::~StringImpl(v96, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v280, v281, v282, v283, v284, v285, v286, v287);
        }
        else
        {
          *(_DWORD *)v96 -= 2;
        }
      }
    }
LABEL_253:
    v22 = 0;
    goto LABEL_26;
  }
  v346 = *(JSC::VM **)(this + 56);
  v345 = 0;
  KeywordValues = ucol_getKeywordValues();
  if (v345 < 1)
  {
    v24 = uenum_count();
    if (v345 < 1)
    {
      v41 = v24;
      v347 = (WTF *)&v349;
      v348 = 1;
      if (v24 < 0xFFFFFFFE)
      {
        v82 = v24 + 2;
        if ((v24 + 2) >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x19896CBA0);
        }
        v83 = (WTF *)WTF::fastMalloc((WTF *)(8 * v82));
        LODWORD(v348) = v82;
        v347 = v83;
        v42 = HIDWORD(v348);
        v343 = (WTF::StringImpl *)"emoji";
        v344 = 6;
        if (HIDWORD(v348) == v82)
        {
          WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v347, (uint64_t *)&v343);
          v84 = HIDWORD(v348);
LABEL_86:
          v343 = (WTF::StringImpl *)"eor";
          v344 = 4;
          if (v84 == (_DWORD)v348)
          {
            WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::ASCIILiteral>((uint64_t)&v347, (uint64_t *)&v343);
          }
          else
          {
            v110 = v347;
            v111 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v111 = 0x300000002;
            *(_QWORD *)(v111 + 8) = "eor";
            *(_DWORD *)(v111 + 16) = 4;
            v112 = HIDWORD(v348);
            *((_QWORD *)v110 + v84) = v111;
            HIDWORD(v348) = v112 + 1;
          }
          if (v41 >= 1)
          {
            while (1)
            {
              v342 = 0;
              v113 = uenum_next();
              if (v345 >= 1)
              {
                JSC::throwTypeError(this, &v346, (uint64_t)"failed to enumerate available collations", 41);
                v22 = 0;
                goto LABEL_265;
              }
              v114 = (_BYTE *)v113;
              if (v113)
              {
                v115 = v342;
                if (v342)
                {
                  if (v342 < 0)
                    goto LABEL_314;
                  v116 = (int *)WTF::fastCompactMalloc((WTF *)(v342 + 20));
                  v117 = v116 + 5;
                  *v116 = 2;
                  v116[1] = v115;
                  *((_QWORD *)v116 + 1) = v116 + 5;
                  v116[4] = 4;
                  if (v115 == 1)
                    *v117 = *v114;
                  else
                    memcpy(v117, v114, v115);
                }
                else
                {
                  WTF::StringImpl::s_emptyAtomString += 2;
                  v116 = &WTF::StringImpl::s_emptyAtomString;
                }
              }
              else
              {
                v116 = 0;
              }
              v341 = (WTF::StringImpl *)v116;
              if (!WTF::equalInternal<unsigned char>((uint64_t)v116, (unint64_t)"standard", 8)
                && !WTF::equalInternal<unsigned char>((uint64_t)v341, (unint64_t)"search", 6))
              {
                break;
              }
LABEL_114:
              v130 = v341;
              v341 = 0;
              if (v130)
              {
                if (*(_DWORD *)v130 == 2)
                {
                  WTF::StringImpl::~StringImpl(v130, v118, v119, v120, v106, v107, v108, v109);
                  WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
                }
                else
                {
                  *(_DWORD *)v130 -= 2;
                }
              }
              if (!--v41)
                goto LABEL_121;
            }
            JSC::mapICUCollationKeywordToBCP47((JSC *)&v341, &v343);
            LODWORD(v121) = HIDWORD(v348);
            if ((_BYTE)v344)
            {
              if (HIDWORD(v348) != (_DWORD)v348)
              {
                v127 = v347;
                v128 = v343;
                v343 = 0;
LABEL_109:
                *((_QWORD *)v127 + HIDWORD(v348)) = v128;
                goto LABEL_110;
              }
              v122 = HIDWORD(v348) + 1;
              v123 = &v343;
            }
            else
            {
              if (HIDWORD(v348) != (_DWORD)v348)
              {
                v127 = v347;
                v128 = v341;
                v341 = 0;
                goto LABEL_109;
              }
              v122 = HIDWORD(v348) + 1;
              v123 = &v341;
            }
            v124 = WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v347, v122, (unint64_t)v123);
            v121 = HIDWORD(v348);
            v125 = v347;
            v126 = *(_QWORD *)v124;
            *(_QWORD *)v124 = 0;
            *((_QWORD *)v125 + v121) = v126;
LABEL_110:
            HIDWORD(v348) = v121 + 1;
            if ((_BYTE)v344)
            {
              v129 = v343;
              v343 = 0;
              if (v129)
              {
                if (*(_DWORD *)v129 == 2)
                {
                  WTF::StringImpl::~StringImpl(v129, v118, v119, v120, v106, v107, v108, v109);
                  WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
                }
                else
                {
                  *(_DWORD *)v129 -= 2;
                }
              }
            }
            goto LABEL_114;
          }
LABEL_121:
          v147 = 126 - 2 * __clz(HIDWORD(v348));
          if (HIDWORD(v348))
            v148 = (const WTF::StringImpl *)v147;
          else
            v148 = 0;
          std::__introsort<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,false>((const WTF::StringImpl **)v347, (WTF *)((char *)v347 + 8 * HIDWORD(v348)), v148, 1, v106, v107, v108, v109);
          v157 = v347;
          if (HIDWORD(v348))
          {
            v158 = (WTF *)((char *)v347 + 8 * HIDWORD(v348));
            if (HIDWORD(v348) != 1)
            {
              v159 = (const WTF::StringImpl **)((char *)v347 + 8);
              v160 = 8 * HIDWORD(v348) - 16;
              while (1)
              {
                v161 = *(WTF **)v157;
                v149 = *v159;
                if (*(const WTF::StringImpl **)v157 == *v159)
                  break;
                v162 = !v161 || v149 == 0;
                if (!v162 && WTF::equal(v161, v149, v150))
                  break;
                ++v159;
                v157 = (WTF *)((char *)v157 + 8);
                v160 -= 8;
                if (v159 == (const WTF::StringImpl **)v158)
                  goto LABEL_256;
              }
              if ((WTF *)((char *)v157 + 16) != v158)
              {
                v171 = 16;
                v172 = (WTF **)v157;
                while (1)
                {
                  v173 = *v172;
                  v149 = *(const WTF::StringImpl **)((char *)v157 + v171);
                  if (*v172 != v149)
                  {
                    if (v173)
                      v174 = v149 == 0;
                    else
                      v174 = 1;
                    if (v174)
                      goto LABEL_149;
                    if (!WTF::equal(v173, v149, v150))
                      break;
                  }
LABEL_152:
                  v171 += 8;
                  v160 -= 8;
                  if (!v160)
                    goto LABEL_255;
                }
                v149 = *(const WTF::StringImpl **)((char *)v157 + v171);
LABEL_149:
                *(_QWORD *)((char *)v157 + v171) = 0;
                v176 = v172[1];
                ++v172;
                v175 = v176;
                *v172 = v149;
                if (v176)
                {
                  if (*(_DWORD *)v175 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v175, v149, (uint64_t)v150, v151, v152, v153, v154, v155);
                    WTF::fastFree(v177, v178, v179, v180, v181, v182, v183, v184);
                  }
                  else
                  {
                    *(_DWORD *)v175 -= 2;
                  }
                }
                goto LABEL_152;
              }
              v172 = (WTF **)v157;
LABEL_255:
              v158 = (WTF *)(v172 + 1);
            }
          }
          else
          {
            v158 = v347;
          }
LABEL_256:
          v288 = (WTF *)((char *)v347 + 8 * HIDWORD(v348));
          v289 = HIDWORD(v348) - ((v288 - v158) >> 3);
          if (v288 != v158)
          {
            v290 = -8 * ((v288 - v158) >> 3);
            do
            {
              v291 = *(WTF::StringImpl **)((char *)v288 + v290);
              *(_QWORD *)((char *)v288 + v290) = 0;
              if (v291)
              {
                if (*(_DWORD *)v291 == 2)
                {
                  WTF::StringImpl::~StringImpl(v291, v149, (uint64_t)v150, v151, v152, v153, v154, v155);
                  WTF::fastFree(v292, v293, v294, v295, v296, v297, v298, v299);
                }
                else
                {
                  *(_DWORD *)v291 -= 2;
                }
              }
              v290 += 8;
            }
            while (v290);
          }
          HIDWORD(v348) = v289;
          v22 = JSC::createArrayFromStringVector<WTF::Vector<WTF::String,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(this, (uint64_t)&v347, v156, (uint64_t)v150, v151, v152, v153, v154, v155);
LABEL_265:
          if (HIDWORD(v348))
          {
            v300 = v347;
            v301 = 8 * HIDWORD(v348);
            do
            {
              v302 = *(WTF::StringImpl **)v300;
              *(_QWORD *)v300 = 0;
              if (v302)
              {
                if (*(_DWORD *)v302 == 2)
                {
                  WTF::StringImpl::~StringImpl(v302, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v303, v304, v305, v306, v307, v308, v309, v310);
                }
                else
                {
                  *(_DWORD *)v302 -= 2;
                }
              }
              v300 = (WTF *)((char *)v300 + 8);
              v301 -= 8;
            }
            while (v301);
          }
          goto LABEL_292;
        }
        v43 = v83;
      }
      else
      {
        v42 = 0;
        v43 = (WTF *)&v349;
      }
      v104 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v104 = 0x500000002;
      *(_QWORD *)(v104 + 8) = "emoji";
      *(_DWORD *)(v104 + 16) = 4;
      v105 = HIDWORD(v348);
      *((_QWORD *)v43 + v42) = v104;
      v84 = v105 + 1;
      HIDWORD(v348) = v105 + 1;
      goto LABEL_86;
    }
  }
  v25 = "failed to enumerate available collations";
LABEL_22:
  v27 = (JSC *)this;
  v28 = 41;
LABEL_23:
  JSC::throwTypeError((unint64_t)v27, &v346, (uint64_t)v25, v28);
  v22 = 0;
LABEL_24:
  if (KeywordValues)
    uenum_close();
LABEL_26:
  v29 = v340;
  v340 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
  }
  return v22;
}

unint64_t JSC::createCollatorConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t Structure;
  uint64_t v17;
  JSC::JSObject *v18;
  uint64_t (*v20)(_QWORD *);
  _QWORD *v21;
  _QWORD v22[3];

  v10 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  Structure = JSC::IntlCollatorConstructor::createStructure((unint64_t *)this, (JSC::VM *)v10, *(_QWORD *)(v10 + 664), a4, a5, a6, a7, a8, a9);
  v17 = *(_QWORD *)(v10 + 304);
  if ((v17 & 1) != 0)
  {
    v20 = *(uint64_t (**)(_QWORD *))(v17 & 0xFFFFFFFFFFFFFFFCLL);
    v21 = (_QWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v10 & 8) != 0)
      v21 = (_QWORD *)(v10 - 16);
    v22[0] = *v21;
    v22[1] = v10;
    v22[2] = v10 + 304;
    v17 = v20(v22);
  }
  if (*(_QWORD *)(v17 + 48) == 2)
    v18 = 0;
  else
    v18 = *(JSC::JSObject **)(v17 + 48);
  return JSC::IntlCollatorConstructor::create((uint64_t)this, Structure, v18, v11, v12, v13, v14, v15);
}

uint64_t JSC::createDateTimeFormatConstructor(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v5)(_QWORD *);
  _QWORD *v6;
  _QWORD v7[3];

  v2 = *(_QWORD *)(16 * (*a2 & 0xFFFFFFFE) + 0x28);
  v3 = *(_QWORD *)(v2 + 384);
  if ((v3 & 1) != 0)
  {
    v5 = *(void (**)(_QWORD *))(v3 & 0xFFFFFFFFFFFFFFFCLL);
    v6 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v2 & 8) != 0)
      v6 = (_QWORD *)(v2 - 16);
    v7[0] = *v6;
    v7[1] = v2;
    v7[2] = v2 + 384;
    v5(v7);
  }
  return *(_QWORD *)(v2 + 392);
}

uint64_t JSC::createDisplayNamesConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v10;
  unint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t Structure;
  uint64_t v20;
  JSC::JSObject *v21;
  uint64_t v22;
  JSC::JSObject *v23;
  JSC::JSObject *v24;
  uint64_t (*v26)(_QWORD *);
  _QWORD *v27;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t SlowCase;
  _QWORD v34[3];

  v10 = (uint64_t *)((char *)this + 38552);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  Structure = JSC::IntlDisplayNamesConstructor::createStructure((unint64_t *)this, (JSC::VM *)v11, *(_QWORD *)(v11 + 664), a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(v11 + 312);
  if ((v20 & 1) != 0)
  {
    v26 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v27 = (_QWORD *)(v11 - 16);
    v34[0] = *v27;
    v34[1] = v11;
    v34[2] = v11 + 312;
    v20 = v26(v34);
  }
  v21 = *(JSC::JSObject **)(v20 + 48);
  v22 = *v10;
  if (*v10 < (unint64_t)v10[1])
    goto LABEL_3;
  v22 = v10[2];
  if ((v22 & 1) == 0)
  {
    v28 = *(_QWORD *)(v22 + 8) ^ v10[3];
    v10[1] = v22 + HIDWORD(v28);
    v10[2] = v22 + (int)v28;
LABEL_3:
    *v10 = v22 + 48;
    goto LABEL_4;
  }
  v29 = *(JSC::JSObject **)(v20 + 48);
  JSC::sanitizeStackForVM(this, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v30, v31, v32);
  v21 = v29;
  v22 = SlowCase;
LABEL_4:
  if (v21 == (JSC::JSObject *)2)
    v23 = 0;
  else
    v23 = v21;
  *(_DWORD *)v22 = 0;
  v24 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v22, (uint64_t)this, Structure, (uint64_t)JSC::callIntlDisplayNames, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructIntlDisplayNames);
  JSC::IntlDisplayNamesConstructor::finishCreation(v24, this, v23);
  return v22;
}

uint64_t JSC::createLocaleConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v10;
  unint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t Structure;
  uint64_t v20;
  JSC::JSObject *v21;
  uint64_t v22;
  JSC::JSObject *v23;
  JSC::JSObject *v24;
  uint64_t (*v26)(_QWORD *);
  _QWORD *v27;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t SlowCase;
  _QWORD v34[3];

  v10 = (uint64_t *)((char *)this + 38552);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  Structure = JSC::IntlLocaleConstructor::createStructure((unint64_t *)this, (JSC::VM *)v11, *(_QWORD *)(v11 + 664), a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(v11 + 336);
  if ((v20 & 1) != 0)
  {
    v26 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v27 = (_QWORD *)(v11 - 16);
    v34[0] = *v27;
    v34[1] = v11;
    v34[2] = v11 + 336;
    v20 = v26(v34);
  }
  v21 = *(JSC::JSObject **)(v20 + 48);
  v22 = *v10;
  if (*v10 < (unint64_t)v10[1])
    goto LABEL_3;
  v22 = v10[2];
  if ((v22 & 1) == 0)
  {
    v28 = *(_QWORD *)(v22 + 8) ^ v10[3];
    v10[1] = v22 + HIDWORD(v28);
    v10[2] = v22 + (int)v28;
LABEL_3:
    *v10 = v22 + 48;
    goto LABEL_4;
  }
  v29 = *(JSC::JSObject **)(v20 + 48);
  JSC::sanitizeStackForVM(this, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v30, v31, v32);
  v21 = v29;
  v22 = SlowCase;
LABEL_4:
  if (v21 == (JSC::JSObject *)2)
    v23 = 0;
  else
    v23 = v21;
  *(_DWORD *)v22 = 0;
  v24 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v22, (uint64_t)this, Structure, (uint64_t)JSC::callIntlLocale, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructIntlLocale);
  JSC::IntlLocaleConstructor::finishCreation(v24, this, v23);
  return v22;
}

uint64_t JSC::createNumberFormatConstructor(uint64_t a1, _DWORD *a2)
{
  return JSC::JSGlobalObject::numberFormatConstructor(*(_QWORD *)(16 * (*a2 & 0xFFFFFFFE) + 0x28));
}

unint64_t JSC::createPluralRulesConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t SlowCase;
  unint64_t *v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSObject *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  WTF::StringImpl *v38;
  JSC::JSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t (*v54)(WTF::StringImpl **);
  WTF::StringImpl **v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63[3];

  v10 = (unint64_t *)((char *)this + 40136);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v12 = *(_QWORD *)(v11 + 664);
  LODWORD(v63[0]) = 75291;
  if ((v12 & 0xFFFE000000000002) == 0 && v12 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v12, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = *v10;
  if (*v10 < v10[1])
    goto LABEL_9;
  SlowCase = v10[2];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v10[3];
    v10[1] = SlowCase + HIDWORD(v53);
    v10[2] = SlowCase + (int)v53;
LABEL_9:
    *v10 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)this + 192, 128, 0, 0, v57, v58, v59);
LABEL_10:
  v15 = (unint64_t *)((char *)this + 38552);
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, (uint64_t)this, v11, v12, (uint64_t)v63, (unint64_t)&JSC::IntlPluralRulesConstructor::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v23 = *(_QWORD *)(v11 + 344);
  if ((v23 & 1) != 0)
  {
    v54 = *(uint64_t (**)(WTF::StringImpl **))(v23 & 0xFFFFFFFFFFFFFFFCLL);
    v55 = (WTF::StringImpl **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v55 = (WTF::StringImpl **)(v11 - 16);
    v63[0] = *v55;
    v63[1] = (WTF::StringImpl *)v11;
    v63[2] = (WTF::StringImpl *)(v11 + 344);
    v23 = v54(v63);
  }
  v24 = *(JSC::JSObject **)(v23 + 48);
  v25 = *v15;
  if (*v15 < *((_QWORD *)this + 4820))
    goto LABEL_14;
  v25 = *((_QWORD *)this + 4821);
  if ((v25 & 1) == 0)
  {
    v56 = *(_QWORD *)(v25 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v25 + HIDWORD(v56);
    *((_QWORD *)this + 4821) = v25 + (int)v56;
LABEL_14:
    *v15 = v25 + 48;
    goto LABEL_15;
  }
  JSC::sanitizeStackForVM(this, v16, v17, v18, v19, v20, v21, v22);
  v25 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v60, v61, v62);
LABEL_15:
  *(_DWORD *)v25 = 0;
  JSC::InternalFunction::InternalFunction(v25, (uint64_t)this, SlowCase, (uint64_t)JSC::callIntlPluralRules, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructIntlPluralRules);
  v26 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v26 = 0xB00000002;
  *(_QWORD *)(v26 + 8) = "PluralRules";
  *(_DWORD *)(v26 + 16) = 4;
  v63[0] = (WTF::StringImpl *)v26;
  JSC::InternalFunction::finishCreation(v25, this, 0, (JSC::VM *)v63, 1, v27, v28, v29);
  v38 = v63[0];
  v63[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  if (v24 == (JSC::JSObject *)2)
    v39 = 0;
  else
    v39 = v24;
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v25, (uint64_t)this, *(_QWORD *)(v10[227] + 2160), (uint64_t)v39, 14, v34, v35, v36, v37);
  JSC::JSObject::putDirectWithoutTransition(v39, (uint64_t)this, *(_QWORD *)(v10[227] + 1080), v25, 4, v40, v41, v42, v43);
  return v25;
}

unint64_t JSC::createRelativeTimeFormatConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t SlowCase;
  unint64_t *v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::JSObject *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  WTF::StringImpl *v38;
  JSC::JSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t (*v54)(WTF::StringImpl **);
  WTF::StringImpl **v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63[3];

  v10 = (unint64_t *)((char *)this + 40136);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v12 = *(_QWORD *)(v11 + 664);
  LODWORD(v63[0]) = 75291;
  if ((v12 & 0xFFFE000000000002) == 0 && v12 && *(unsigned __int8 *)(v12 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v12, this, a9, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = *v10;
  if (*v10 < v10[1])
    goto LABEL_9;
  SlowCase = v10[2];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v10[3];
    v10[1] = SlowCase + HIDWORD(v53);
    v10[2] = SlowCase + (int)v53;
LABEL_9:
    *v10 = SlowCase + 128;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 40112, (uint64_t)this + 192, 128, 0, 0, v57, v58, v59);
LABEL_10:
  v15 = (unint64_t *)((char *)this + 38552);
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, (uint64_t)this, v11, v12, (uint64_t)v63, (unint64_t)&JSC::IntlRelativeTimeFormatConstructor::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v23 = *(_QWORD *)(v11 + 352);
  if ((v23 & 1) != 0)
  {
    v54 = *(uint64_t (**)(WTF::StringImpl **))(v23 & 0xFFFFFFFFFFFFFFFCLL);
    v55 = (WTF::StringImpl **)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v55 = (WTF::StringImpl **)(v11 - 16);
    v63[0] = *v55;
    v63[1] = (WTF::StringImpl *)v11;
    v63[2] = (WTF::StringImpl *)(v11 + 352);
    v23 = v54(v63);
  }
  v24 = *(JSC::JSObject **)(v23 + 48);
  v25 = *v15;
  if (*v15 < *((_QWORD *)this + 4820))
    goto LABEL_14;
  v25 = *((_QWORD *)this + 4821);
  if ((v25 & 1) == 0)
  {
    v56 = *(_QWORD *)(v25 + 8) ^ *((_QWORD *)this + 4822);
    *((_QWORD *)this + 4820) = v25 + HIDWORD(v56);
    *((_QWORD *)this + 4821) = v25 + (int)v56;
LABEL_14:
    *v15 = v25 + 48;
    goto LABEL_15;
  }
  JSC::sanitizeStackForVM(this, v16, v17, v18, v19, v20, v21, v22);
  v25 = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v60, v61, v62);
LABEL_15:
  *(_DWORD *)v25 = 0;
  JSC::InternalFunction::InternalFunction(v25, (uint64_t)this, SlowCase, (uint64_t)JSC::callIntlRelativeTimeFormat, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructIntlRelativeTimeFormat);
  v26 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v26 = 0x1200000002;
  *(_QWORD *)(v26 + 8) = "RelativeTimeFormat";
  *(_DWORD *)(v26 + 16) = 4;
  v63[0] = (WTF::StringImpl *)v26;
  JSC::InternalFunction::finishCreation(v25, this, 0, (JSC::VM *)v63, 1, v27, v28, v29);
  v38 = v63[0];
  v63[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v30, v31, v32, v33, v34, v35, v36);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  if (v24 == (JSC::JSObject *)2)
    v39 = 0;
  else
    v39 = v24;
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v25, (uint64_t)this, *(_QWORD *)(v10[227] + 2160), (uint64_t)v39, 14, v34, v35, v36, v37);
  JSC::JSObject::putDirectWithoutTransition(v39, (uint64_t)this, *(_QWORD *)(v10[227] + 1080), v25, 4, v40, v41, v42, v43);
  return v25;
}

uint64_t JSC::createSegmenterConstructor(JSC *this, JSC::VM *a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t *v10;
  unint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t Structure;
  uint64_t v20;
  JSC::JSObject *v21;
  uint64_t v22;
  JSC::JSObject *v23;
  JSC::JSObject *v24;
  uint64_t (*v26)(_QWORD *);
  _QWORD *v27;
  unint64_t v28;
  JSC::JSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t SlowCase;
  _QWORD v34[3];

  v10 = (uint64_t *)((char *)this + 38552);
  v11 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  Structure = JSC::IntlSegmenterConstructor::createStructure((unint64_t *)this, (JSC::VM *)v11, *(_QWORD *)(v11 + 664), a4, a5, a6, a7, a8, a9);
  v20 = *(_QWORD *)(v11 + 368);
  if ((v20 & 1) != 0)
  {
    v26 = *(uint64_t (**)(_QWORD *))(v20 & 0xFFFFFFFFFFFFFFFCLL);
    v27 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v11 & 8) != 0)
      v27 = (_QWORD *)(v11 - 16);
    v34[0] = *v27;
    v34[1] = v11;
    v34[2] = v11 + 368;
    v20 = v26(v34);
  }
  v21 = *(JSC::JSObject **)(v20 + 48);
  v22 = *v10;
  if (*v10 < (unint64_t)v10[1])
    goto LABEL_3;
  v22 = v10[2];
  if ((v22 & 1) == 0)
  {
    v28 = *(_QWORD *)(v22 + 8) ^ v10[3];
    v10[1] = v22 + HIDWORD(v28);
    v10[2] = v22 + (int)v28;
LABEL_3:
    *v10 = v22 + 48;
    goto LABEL_4;
  }
  v29 = *(JSC::JSObject **)(v20 + 48);
  JSC::sanitizeStackForVM(this, v12, v13, v14, v15, v16, v17, v18);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38528, (uint64_t)this + 192, 48, 0, 0, v30, v31, v32);
  v21 = v29;
  v22 = SlowCase;
LABEL_4:
  if (v21 == (JSC::JSObject *)2)
    v23 = 0;
  else
    v23 = v21;
  *(_DWORD *)v22 = 0;
  v24 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v22, (uint64_t)this, Structure, (uint64_t)JSC::callIntlSegmenter, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructIntlSegmenter);
  JSC::IntlSegmenterConstructor::finishCreation(v24, this, v23);
  return v22;
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,false>(const WTF::StringImpl **a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::StringImpl *v8;
  const WTF::StringImpl **v9;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const WTF::StringImpl **v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  WTF **v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const WTF::StringImpl **v29;
  const WTF::StringImpl **v30;
  WTF *v31;
  WTF *v32;
  const WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  WTF **v35;
  const WTF::StringImpl **v36;
  WTF *v37;
  WTF **v38;
  WTF *v39;
  WTF *v40;
  const WTF::StringImpl **v41;
  const WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  BOOL v45;
  const WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  const WTF::StringImpl **v64;
  const WTF::StringImpl *v65;
  const WTF::StringImpl **v66;
  const WTF::StringImpl *v67;
  const WTF::StringImpl *v68;
  const WTF::StringImpl **v69;
  const WTF::StringImpl *v70;
  const WTF::StringImpl *v71;
  WTF **v72;
  const WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const WTF::StringImpl *v92;
  WTF **v93;
  const WTF::StringImpl *v94;
  const WTF::StringImpl *v95;
  WTF *v96;
  const WTF::StringImpl *v97;
  WTF *v98;
  const WTF::StringImpl *v99;
  const WTF::StringImpl *v100;
  WTF **v101;
  BOOL v103;
  uint64_t v104;
  const WTF::StringImpl **v105;
  WTF *v106;
  const WTF::StringImpl *v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF *v115;
  uint64_t i;
  WTF::StringImpl **v117;
  WTF::StringImpl *v118;
  WTF::StringImpl **v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  int64_t v138;
  uint64_t v139;
  WTF **v140;
  const WTF::StringImpl **v141;
  const WTF::StringImpl *v142;
  WTF::StringImpl **v143;
  WTF *v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const WTF::StringImpl *v167;
  WTF **v168;
  WTF::StringImpl **v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  WTF::StringImpl *v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  unint64_t v186;
  WTF **v187;
  const WTF::StringImpl *v188;
  WTF::StringImpl **v189;
  WTF *v190;
  WTF *v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::AtomStringImpl *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl *v235;
  WTF *v236;
  const WTF::StringImpl **v237;
  const WTF::StringImpl *v238;
  uint64_t v239;
  WTF::StringImpl **v240;
  int v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const WTF::StringImpl *v258;
  int64_t v259;
  char v260;
  int64_t v261;

  v260 = a4;
  v8 = a3;
  v9 = (const WTF::StringImpl **)a2;
LABEL_2:
  v11 = (const WTF::StringImpl *)(v9 - 1);
  v12 = (const WTF::StringImpl *)(v9 - 2);
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (char *)v9 - (char *)v13;
    v15 = v9 - v13;
    switch(v15)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((WTF::codePointCompare(*(v9 - 1), *a1, a3) & 0x80000000) != 0)
        {
          v92 = *a1;
          *a1 = *(v9 - 1);
          *(v9 - 1) = v92;
        }
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, v11);
        return;
      case 4:
        v93 = a1 + 2;
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
        if ((WTF::codePointCompare(*(v9 - 1), a1[2], v94) & 0x80000000) != 0)
        {
          v96 = *v93;
          *v93 = *(v9 - 1);
          *(v9 - 1) = v96;
          if ((WTF::codePointCompare(*v93, a1[1], v95) & 0x80000000) != 0)
          {
            v99 = a1[1];
            v98 = a1[2];
            v100 = *a1;
            a1[1] = v98;
            a1[2] = v99;
            if ((WTF::codePointCompare(v98, v100, v97) & 0x80000000) != 0)
              *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          }
        }
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,0>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3, (WTF **)v11);
        return;
      default:
        if (v14 > 191)
        {
          if (!v8)
          {
            if (a1 == v9)
              return;
            v137 = (unint64_t)(v15 - 2) >> 1;
            v261 = v137;
            do
            {
              v138 = v137;
              if (v261 >= v137)
              {
                v139 = (2 * v137) | 1;
                v140 = &a1[v139];
                if (2 * v137 + 2 < v15 && (int)WTF::codePointCompare(*v140, v140[1], a3) < 0)
                {
                  ++v140;
                  v139 = 2 * v138 + 2;
                }
                v141 = &a1[v138];
                if ((WTF::codePointCompare(*v140, *v141, a3) & 0x80000000) == 0)
                {
                  v259 = v138;
                  v142 = *v141;
                  *v141 = 0;
                  do
                  {
                    v143 = v140;
                    v144 = *v140;
                    *v140 = 0;
                    v145 = *v141;
                    *v141 = v144;
                    if (v145)
                    {
                      if (*(_DWORD *)v145 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v145, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
                      }
                      else
                      {
                        *(_DWORD *)v145 -= 2;
                      }
                    }
                    if (v261 < v139)
                      break;
                    v146 = (2 * v139) | 1;
                    v140 = &a1[v146];
                    v147 = 2 * v139 + 2;
                    if (v147 < v15 && (int)WTF::codePointCompare(*v140, v140[1], a3) < 0)
                    {
                      ++v140;
                      v146 = v147;
                    }
                    v141 = v143;
                    v139 = v146;
                  }
                  while ((WTF::codePointCompare(*v140, v142, a3) & 0x80000000) == 0);
                  v156 = *v143;
                  *v143 = v142;
                  v138 = v259;
                  if (v156)
                  {
                    if (*(_DWORD *)v156 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v156, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
                    }
                    else
                    {
                      *(_DWORD *)v156 -= 2;
                    }
                  }
                }
              }
              v137 = v138 - 1;
            }
            while (v138);
            v165 = (unint64_t)v14 >> 3;
            while (1)
            {
              v166 = 0;
              v167 = *a1;
              *a1 = 0;
              v168 = a1;
              do
              {
                v169 = v168;
                v168 += v166 + 1;
                v170 = 2 * v166;
                v166 = (2 * v166) | 1;
                v171 = v170 + 2;
                if (v170 + 2 < v165 && (int)WTF::codePointCompare(*v168, v168[1], a3) < 0)
                {
                  ++v168;
                  v166 = v171;
                }
                v172 = *v168;
                *v168 = 0;
                v173 = *v169;
                *v169 = v172;
                if (v173)
                {
                  if (*(_DWORD *)v173 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v173, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
                  }
                  else
                  {
                    *(_DWORD *)v173 -= 2;
                  }
                }
              }
              while (v166 <= (uint64_t)((unint64_t)(v165 - 2) >> 1));
              if (v168 == --v9)
              {
                v200 = *v168;
                *v168 = v167;
                if (!v200)
                  goto LABEL_165;
                goto LABEL_163;
              }
              v182 = *v9;
              *v9 = 0;
              v183 = *v168;
              *v168 = v182;
              if (v183)
              {
                if (*(_DWORD *)v183 == 2)
                {
                  WTF::StringImpl::~StringImpl(v183, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
                }
                else
                {
                  *(_DWORD *)v183 -= 2;
                }
              }
              v184 = *v9;
              *v9 = v167;
              if (v184)
              {
                if (*(_DWORD *)v184 == 2)
                {
                  WTF::StringImpl::~StringImpl(v184, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
                }
                else
                {
                  *(_DWORD *)v184 -= 2;
                }
              }
              v185 = (char *)(v168 + 1) - (char *)a1;
              if (v185 >= 9)
              {
                v186 = (((unint64_t)v185 >> 3) - 2) >> 1;
                v187 = &a1[v186];
                if ((WTF::codePointCompare(*v187, *v168, a3) & 0x80000000) != 0)
                  break;
              }
LABEL_165:
              if (v165-- <= 2)
                return;
            }
            v188 = *v168;
            *v168 = 0;
            while (1)
            {
              v189 = v187;
              v190 = *v187;
              *v187 = 0;
              v191 = *v168;
              *v168 = v190;
              if (!v191)
                goto LABEL_156;
              if (*(_DWORD *)v191 != 2)
                break;
              WTF::StringImpl::~StringImpl(v191, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
              if (!v186)
              {
LABEL_160:
                v200 = *v189;
                *v189 = v188;
                if (!v200)
                  goto LABEL_165;
LABEL_163:
                if (*(_DWORD *)v200 == 2)
                {
                  WTF::StringImpl::~StringImpl(v200, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
                }
                else
                {
                  *(_DWORD *)v200 -= 2;
                }
                goto LABEL_165;
              }
LABEL_157:
              v186 = (v186 - 1) >> 1;
              v187 = &a1[v186];
              v168 = v189;
              if ((WTF::codePointCompare(*v187, v188, a3) & 0x80000000) == 0)
                goto LABEL_160;
            }
            *(_DWORD *)v191 -= 2;
LABEL_156:
            if (!v186)
              goto LABEL_160;
            goto LABEL_157;
          }
          v16 = (unint64_t)v15 >> 1;
          v17 = &a1[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v17, a1, v11);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, v17, v11);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1 + 1, v17 - 1, v12);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1 + 2, &a1[v16 + 1], (const WTF::StringImpl *)(v9 - 3));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v17 - 1, v17, (const WTF::StringImpl *)&a1[v16 + 1]);
            v19 = *a1;
            *a1 = *v17;
            *v17 = v19;
          }
          v8 = (const WTF::StringImpl *)((char *)v8 - 1);
          if ((v260 & 1) == 0 && (WTF::codePointCompare(*(a1 - 1), *a1, v18) & 0x80000000) == 0)
          {
            v63 = *a1;
            *a1 = 0;
            v64 = a1 + 1;
            if ((WTF::codePointCompare(v63, *(const WTF::StringImpl **)v11, v18) & 0x80000000) != 0)
            {
              do
              {
                if (v64 == v9)
                  goto LABEL_189;
                v65 = *v64++;
              }
              while ((WTF::codePointCompare(v63, v65, a3) & 0x80000000) == 0);
              v13 = v64 - 1;
            }
            else
            {
              do
              {
                v13 = v64;
                if (v64 >= v9)
                  break;
                ++v64;
              }
              while ((WTF::codePointCompare(v63, *v13, a3) & 0x80000000) == 0);
            }
            v66 = v9;
            if (v13 < v9)
            {
              v66 = v9;
              while (v66 != a1)
              {
                v67 = *--v66;
                if ((WTF::codePointCompare(v63, v67, a3) & 0x80000000) == 0)
                  goto LABEL_63;
              }
              goto LABEL_189;
            }
LABEL_63:
            if (v13 < v66)
            {
              v68 = *v13;
              *v13 = *v66;
              v69 = v13 + 1;
              *v66 = v68;
              while (v69 != v9)
              {
                v70 = *v69++;
                if ((WTF::codePointCompare(v63, v70, a3) & 0x80000000) != 0)
                {
                  v13 = v69 - 1;
                  while (v66 != a1)
                  {
                    v71 = *--v66;
                    if ((WTF::codePointCompare(v63, v71, a3) & 0x80000000) == 0)
                      goto LABEL_63;
                  }
                  goto LABEL_189;
                }
              }
              goto LABEL_189;
            }
            v72 = v13 - 1;
            if (v13 - 1 != a1)
            {
              v73 = *v72;
              *v72 = 0;
              v74 = *a1;
              *a1 = v73;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                {
                  WTF::StringImpl::~StringImpl(v74, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                }
                else
                {
                  *(_DWORD *)v74 -= 2;
                }
              }
            }
            v260 = 0;
            v75 = *v72;
            *v72 = v63;
            if (v75)
            {
              if (*(_DWORD *)v75 == 2)
              {
                WTF::StringImpl::~StringImpl(v75, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
                v260 = 0;
              }
              else
              {
                v260 = 0;
                *(_DWORD *)v75 -= 2;
              }
            }
            continue;
          }
          v20 = 0;
          v21 = *a1;
          *a1 = 0;
          do
          {
            v22 = &a1[v20 + 1];
            if (v22 == v9)
              goto LABEL_189;
            ++v20;
          }
          while ((WTF::codePointCompare(*v22, v21, v18) & 0x80000000) != 0);
          v29 = &a1[v20];
          v30 = v9;
          if (v20 != 1)
          {
            while (v30 != a1)
            {
              v31 = *--v30;
              if ((WTF::codePointCompare(v31, v21, v18) & 0x80000000) != 0)
                goto LABEL_21;
            }
LABEL_189:
            __break(1u);
            return;
          }
          v30 = v9;
          do
          {
            if (v29 >= v30)
              break;
            v32 = *--v30;
          }
          while ((WTF::codePointCompare(v32, v21, v18) & 0x80000000) == 0);
LABEL_21:
          if (v29 >= v30)
          {
            v41 = v29 - 1;
          }
          else
          {
            v258 = v8;
            v33 = v12;
            v34 = v11;
            v35 = &a1[v20];
            v36 = v30;
            do
            {
              v37 = *v35;
              *v35 = *v36;
              *v36 = v37;
              v38 = v35 + 1;
              do
              {
                if (v38 == v9)
                  goto LABEL_189;
                v39 = *v38++;
              }
              while ((WTF::codePointCompare(v39, v21, v18) & 0x80000000) != 0);
              v35 = v38 - 1;
              do
              {
                if (v36 == a1)
                  goto LABEL_189;
                v40 = *--v36;
              }
              while ((WTF::codePointCompare(v40, v21, v18) & 0x80000000) == 0);
            }
            while (v35 < v36);
            v41 = v38 - 2;
            v11 = v34;
            v12 = v33;
            v8 = v258;
          }
          if (v41 != a1)
          {
            v42 = *v41;
            *v41 = 0;
            v43 = *a1;
            *a1 = v42;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
              {
                WTF::StringImpl::~StringImpl(v43, v23, (uint64_t)v18, v24, v25, v26, v27, v28);
                WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
              }
              else
              {
                *(_DWORD *)v43 -= 2;
              }
            }
          }
          v44 = *v41;
          *v41 = v21;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::~StringImpl(v44, v23, (uint64_t)v18, v24, v25, v26, v27, v28);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_DWORD *)v44 -= 2;
            }
          }
          if (v29 < v30)
          {
LABEL_42:
            std::__introsort<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,false>(a1, v41, v8, v260 & 1);
            v260 = 0;
            v13 = v41 + 1;
            continue;
          }
          v45 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, v41, v18);
          v13 = v41 + 1;
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v41 + 1, v9, v46))
          {
            if (v45)
              continue;
            goto LABEL_42;
          }
          v9 = v41;
          if (v45)
            return;
          goto LABEL_2;
        }
        v101 = a1 + 1;
        v103 = a1 == v9 || v101 == v9;
        if ((v260 & 1) == 0)
        {
          if (v103)
            return;
          v226 = 0;
          v227 = 1;
          while (1)
          {
            v228 = v226;
            v226 = v227;
            if ((WTF::codePointCompare(*v101, a1[v228], a3) & 0x80000000) != 0)
            {
              v235 = 0;
              v236 = *v101;
              *v101 = 0;
              do
              {
                v237 = &a1[v228];
                v238 = *v237;
                *v237 = 0;
                v237[1] = v238;
                if (v235)
                {
                  if (*(_DWORD *)v235 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v235, v229, (uint64_t)a3, v230, v231, v232, v233, v234);
                    WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
                  }
                  else
                  {
                    *(_DWORD *)v235 -= 2;
                  }
                }
                if (v228 == -1)
                  goto LABEL_189;
                v239 = v228 - 1;
                v240 = &a1[v228];
                v241 = WTF::codePointCompare(v236, *(v240 - 1), a3);
                v235 = *v240;
                v228 = v239;
              }
              while (v241 < 0);
              a1[v239 + 1] = v236;
              if (v235)
              {
                if (*(_DWORD *)v235 == 2)
                {
                  WTF::StringImpl::~StringImpl(v235, v229, (uint64_t)a3, v230, v231, v232, v233, v234);
                  WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
                }
                else
                {
                  *(_DWORD *)v235 -= 2;
                }
              }
            }
            v227 = v226 + 1;
            v101 = &a1[v226 + 1];
            if (v101 == v9)
              return;
          }
        }
        if (v103)
          return;
        v104 = 0;
        v105 = a1;
        do
        {
          v107 = *v105;
          v106 = v105[1];
          v105 = v101;
          if ((WTF::codePointCompare(v106, v107, a3) & 0x80000000) == 0)
            goto LABEL_106;
          v114 = 0;
          v115 = *v101;
          *v101 = 0;
          for (i = v104; ; i -= 8)
          {
            v117 = (const WTF::StringImpl **)((char *)a1 + i);
            v118 = *(const WTF::StringImpl **)((char *)a1 + i);
            *v117 = 0;
            v117[1] = v118;
            if (!v114)
              goto LABEL_98;
            if (*(_DWORD *)v114 == 2)
              break;
            *(_DWORD *)v114 -= 2;
LABEL_98:
            if (!i)
              goto LABEL_102;
LABEL_99:
            v119 = (const WTF::StringImpl **)((char *)a1 + i);
            if ((WTF::codePointCompare(v115, *(const WTF::StringImpl **)((char *)a1 + i - 8), a3) & 0x80000000) == 0)
              goto LABEL_103;
            v114 = *v117;
          }
          WTF::StringImpl::~StringImpl(v114, v108, (uint64_t)a3, v109, v110, v111, v112, v113);
          WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
          if (i)
            goto LABEL_99;
LABEL_102:
          v119 = a1;
LABEL_103:
          v128 = *v119;
          *v119 = v115;
          if (v128)
          {
            if (*(_DWORD *)v128 == 2)
            {
              WTF::StringImpl::~StringImpl(v128, v108, (uint64_t)a3, v109, v110, v111, v112, v113);
              WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
            }
            else
            {
              *(_DWORD *)v128 -= 2;
            }
          }
LABEL_106:
          v101 = v105 + 1;
          v104 += 8;
        }
        while (v105 + 1 != v9);
        return;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,0>(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3, WTF **a4, WTF **a5)
{
  const WTF::StringImpl *v10;
  const WTF::StringImpl *v11;
  WTF *v12;
  WTF *v13;
  const WTF::StringImpl *v14;
  uint64_t result;
  const WTF::StringImpl *v16;
  WTF *v17;
  const WTF::StringImpl *v18;
  WTF *v19;
  const WTF::StringImpl *v20;
  WTF *v21;
  const WTF::StringImpl *v22;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a2, a3);
  if ((WTF::codePointCompare(*a4, *(const WTF::StringImpl **)a3, v10) & 0x80000000) != 0)
  {
    v12 = *(WTF **)a3;
    *(_QWORD *)a3 = *a4;
    *a4 = v12;
    if ((WTF::codePointCompare(*(WTF **)a3, *a2, v11) & 0x80000000) != 0)
    {
      v13 = *a2;
      *a2 = *(WTF **)a3;
      *(_QWORD *)a3 = v13;
      if ((WTF::codePointCompare(*a2, *a1, v11) & 0x80000000) != 0)
      {
        v14 = *a1;
        *a1 = *a2;
        *a2 = v14;
      }
    }
  }
  result = WTF::codePointCompare(*a5, *a4, v11);
  if ((result & 0x80000000) != 0)
  {
    v17 = *a4;
    *a4 = *a5;
    *a5 = v17;
    result = WTF::codePointCompare(*a4, *(const WTF::StringImpl **)a3, v16);
    if ((result & 0x80000000) != 0)
    {
      v19 = *(WTF **)a3;
      *(_QWORD *)a3 = *a4;
      *a4 = v19;
      result = WTF::codePointCompare(*(WTF **)a3, *a2, v18);
      if ((result & 0x80000000) != 0)
      {
        v21 = *a2;
        *a2 = *(WTF **)a3;
        *(_QWORD *)a3 = v21;
        result = WTF::codePointCompare(*a2, *a1, v20);
        if ((result & 0x80000000) != 0)
        {
          v22 = *a1;
          *a1 = *a2;
          *a2 = v22;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(const WTF::StringImpl **a1, WTF **a2, const WTF::StringImpl *a3)
{
  int v6;
  const WTF::StringImpl *v7;
  uint64_t result;
  const WTF::StringImpl *v9;
  WTF *v10;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  WTF *v13;

  v6 = WTF::codePointCompare(*a2, *a1, a3);
  result = WTF::codePointCompare(*(WTF **)a3, *a2, v7);
  if (v6 < 0)
  {
    v12 = *a1;
    if ((result & 0x80000000) != 0)
    {
      *a1 = *(const WTF::StringImpl **)a3;
      *(_QWORD *)a3 = v12;
    }
    else
    {
      *a1 = *a2;
      *a2 = v12;
      result = WTF::codePointCompare(*(WTF **)a3, v12, v9);
      if ((result & 0x80000000) != 0)
      {
        v13 = *a2;
        *a2 = *(WTF **)a3;
        *(_QWORD *)a3 = v13;
      }
    }
  }
  else if ((result & 0x80000000) != 0)
  {
    v10 = *a2;
    *a2 = *(WTF **)a3;
    *(_QWORD *)a3 = v10;
    result = WTF::codePointCompare(*a2, *a1, v9);
    if ((result & 0x80000000) != 0)
    {
      v11 = *a1;
      *a1 = *a2;
      *a2 = v11;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(const WTF::StringImpl **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _BOOL8 result;
  const WTF::StringImpl *v7;
  const WTF::StringImpl **v8;
  const WTF::StringImpl *v9;
  WTF **v10;
  uint64_t v11;
  int v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t i;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  const WTF::StringImpl *v43;
  const WTF::StringImpl *v44;
  WTF *v45;
  const WTF::StringImpl *v46;
  WTF *v47;
  const WTF::StringImpl *v48;
  const WTF::StringImpl *v49;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((WTF::codePointCompare(*(a2 - 1), *a1, a3) & 0x80000000) != 0)
      {
        v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a2 - 1));
      return 1;
    case 4:
      v42 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      if ((WTF::codePointCompare(*(a2 - 1), a1[2], v43) & 0x80000000) != 0)
      {
        v45 = *v42;
        *v42 = *(a2 - 1);
        *(a2 - 1) = v45;
        if ((WTF::codePointCompare(*v42, a1[1], v44) & 0x80000000) != 0)
        {
          v48 = a1[1];
          v47 = a1[2];
          v49 = *a1;
          a1[1] = v47;
          a1[2] = v48;
          if ((WTF::codePointCompare(v47, v49, v46) & 0x80000000) != 0)
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,0>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((WTF::codePointCompare(*v10, *v8, v9) & 0x80000000) != 0)
    {
      v19 = 0;
      v20 = *v10;
      *v10 = 0;
      for (i = v11; ; i -= 8)
      {
        v22 = (char *)a1 + i;
        v23 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v22 + 2) = 0;
        *((_QWORD *)v22 + 3) = v23;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::~StringImpl(v19, v13, (uint64_t)v9, v14, v15, v16, v17, v18);
            WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
          }
          else
          {
            *(_DWORD *)v19 -= 2;
          }
        }
        if (i == -16)
        {
          v32 = a1;
          goto LABEL_17;
        }
        if ((WTF::codePointCompare(v20, *(const WTF::StringImpl **)((char *)a1 + i + 8), v9) & 0x80000000) == 0)
          break;
        v19 = (WTF::StringImpl *)*((_QWORD *)v22 + 2);
      }
      v32 = (const WTF::StringImpl **)((char *)a1 + i + 16);
LABEL_17:
      v33 = *v32;
      *v32 = v20;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v13, (uint64_t)v9, v14, v15, v16, v17, v18);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v8 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::availableCurrencies(JSC::JSGlobalObject *)::$_0 &,WTF::String *,false>(const WTF::StringImpl **a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::StringImpl *v8;
  const WTF::StringImpl **v9;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const WTF::StringImpl **v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  WTF **v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const WTF::StringImpl **v29;
  const WTF::StringImpl **v30;
  WTF *v31;
  WTF *v32;
  const WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  WTF **v35;
  const WTF::StringImpl **v36;
  WTF *v37;
  WTF **v38;
  WTF *v39;
  WTF *v40;
  const WTF::StringImpl **v41;
  const WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  BOOL v45;
  const WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  const WTF::StringImpl **v64;
  const WTF::StringImpl *v65;
  const WTF::StringImpl **v66;
  const WTF::StringImpl *v67;
  const WTF::StringImpl *v68;
  const WTF::StringImpl **v69;
  const WTF::StringImpl *v70;
  const WTF::StringImpl *v71;
  WTF **v72;
  const WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const WTF::StringImpl *v92;
  WTF **v93;
  const WTF::StringImpl *v94;
  const WTF::StringImpl *v95;
  WTF *v96;
  const WTF::StringImpl *v97;
  WTF *v98;
  const WTF::StringImpl *v99;
  const WTF::StringImpl *v100;
  WTF **v101;
  BOOL v103;
  uint64_t v104;
  const WTF::StringImpl **v105;
  WTF *v106;
  const WTF::StringImpl *v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF *v115;
  uint64_t i;
  WTF::StringImpl **v117;
  WTF::StringImpl *v118;
  WTF::StringImpl **v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  int64_t v138;
  uint64_t v139;
  WTF **v140;
  const WTF::StringImpl **v141;
  const WTF::StringImpl *v142;
  WTF::StringImpl **v143;
  WTF *v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const WTF::StringImpl *v167;
  WTF **v168;
  WTF::StringImpl **v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  WTF::StringImpl *v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  unint64_t v186;
  WTF **v187;
  const WTF::StringImpl *v188;
  WTF::StringImpl **v189;
  WTF *v190;
  WTF *v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::AtomStringImpl *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl *v235;
  WTF *v236;
  const WTF::StringImpl **v237;
  const WTF::StringImpl *v238;
  uint64_t v239;
  WTF::StringImpl **v240;
  int v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const WTF::StringImpl *v258;
  int64_t v259;
  char v260;
  int64_t v261;

  v260 = a4;
  v8 = a3;
  v9 = (const WTF::StringImpl **)a2;
LABEL_2:
  v11 = (const WTF::StringImpl *)(v9 - 1);
  v12 = (const WTF::StringImpl *)(v9 - 2);
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (char *)v9 - (char *)v13;
    v15 = v9 - v13;
    switch(v15)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((WTF::codePointCompare(*(v9 - 1), *a1, a3) & 0x80000000) != 0)
        {
          v92 = *a1;
          *a1 = *(v9 - 1);
          *(v9 - 1) = v92;
        }
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, v11);
        return;
      case 4:
        v93 = a1 + 2;
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
        if ((WTF::codePointCompare(*(v9 - 1), a1[2], v94) & 0x80000000) != 0)
        {
          v96 = *v93;
          *v93 = *(v9 - 1);
          *(v9 - 1) = v96;
          if ((WTF::codePointCompare(*v93, a1[1], v95) & 0x80000000) != 0)
          {
            v99 = a1[1];
            v98 = a1[2];
            v100 = *a1;
            a1[1] = v98;
            a1[2] = v99;
            if ((WTF::codePointCompare(v98, v100, v97) & 0x80000000) != 0)
              *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          }
        }
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,0>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3, (WTF **)v11);
        return;
      default:
        if (v14 > 191)
        {
          if (!v8)
          {
            if (a1 == v9)
              return;
            v137 = (unint64_t)(v15 - 2) >> 1;
            v261 = v137;
            do
            {
              v138 = v137;
              if (v261 >= v137)
              {
                v139 = (2 * v137) | 1;
                v140 = &a1[v139];
                if (2 * v137 + 2 < v15 && (int)WTF::codePointCompare(*v140, v140[1], a3) < 0)
                {
                  ++v140;
                  v139 = 2 * v138 + 2;
                }
                v141 = &a1[v138];
                if ((WTF::codePointCompare(*v140, *v141, a3) & 0x80000000) == 0)
                {
                  v259 = v138;
                  v142 = *v141;
                  *v141 = 0;
                  do
                  {
                    v143 = v140;
                    v144 = *v140;
                    *v140 = 0;
                    v145 = *v141;
                    *v141 = v144;
                    if (v145)
                    {
                      if (*(_DWORD *)v145 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v145, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
                      }
                      else
                      {
                        *(_DWORD *)v145 -= 2;
                      }
                    }
                    if (v261 < v139)
                      break;
                    v146 = (2 * v139) | 1;
                    v140 = &a1[v146];
                    v147 = 2 * v139 + 2;
                    if (v147 < v15 && (int)WTF::codePointCompare(*v140, v140[1], a3) < 0)
                    {
                      ++v140;
                      v146 = v147;
                    }
                    v141 = v143;
                    v139 = v146;
                  }
                  while ((WTF::codePointCompare(*v140, v142, a3) & 0x80000000) == 0);
                  v156 = *v143;
                  *v143 = v142;
                  v138 = v259;
                  if (v156)
                  {
                    if (*(_DWORD *)v156 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v156, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
                    }
                    else
                    {
                      *(_DWORD *)v156 -= 2;
                    }
                  }
                }
              }
              v137 = v138 - 1;
            }
            while (v138);
            v165 = (unint64_t)v14 >> 3;
            while (1)
            {
              v166 = 0;
              v167 = *a1;
              *a1 = 0;
              v168 = a1;
              do
              {
                v169 = v168;
                v168 += v166 + 1;
                v170 = 2 * v166;
                v166 = (2 * v166) | 1;
                v171 = v170 + 2;
                if (v170 + 2 < v165 && (int)WTF::codePointCompare(*v168, v168[1], a3) < 0)
                {
                  ++v168;
                  v166 = v171;
                }
                v172 = *v168;
                *v168 = 0;
                v173 = *v169;
                *v169 = v172;
                if (v173)
                {
                  if (*(_DWORD *)v173 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v173, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
                  }
                  else
                  {
                    *(_DWORD *)v173 -= 2;
                  }
                }
              }
              while (v166 <= (uint64_t)((unint64_t)(v165 - 2) >> 1));
              if (v168 == --v9)
              {
                v200 = *v168;
                *v168 = v167;
                if (!v200)
                  goto LABEL_165;
                goto LABEL_163;
              }
              v182 = *v9;
              *v9 = 0;
              v183 = *v168;
              *v168 = v182;
              if (v183)
              {
                if (*(_DWORD *)v183 == 2)
                {
                  WTF::StringImpl::~StringImpl(v183, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
                }
                else
                {
                  *(_DWORD *)v183 -= 2;
                }
              }
              v184 = *v9;
              *v9 = v167;
              if (v184)
              {
                if (*(_DWORD *)v184 == 2)
                {
                  WTF::StringImpl::~StringImpl(v184, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
                }
                else
                {
                  *(_DWORD *)v184 -= 2;
                }
              }
              v185 = (char *)(v168 + 1) - (char *)a1;
              if (v185 >= 9)
              {
                v186 = (((unint64_t)v185 >> 3) - 2) >> 1;
                v187 = &a1[v186];
                if ((WTF::codePointCompare(*v187, *v168, a3) & 0x80000000) != 0)
                  break;
              }
LABEL_165:
              if (v165-- <= 2)
                return;
            }
            v188 = *v168;
            *v168 = 0;
            while (1)
            {
              v189 = v187;
              v190 = *v187;
              *v187 = 0;
              v191 = *v168;
              *v168 = v190;
              if (!v191)
                goto LABEL_156;
              if (*(_DWORD *)v191 != 2)
                break;
              WTF::StringImpl::~StringImpl(v191, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
              if (!v186)
              {
LABEL_160:
                v200 = *v189;
                *v189 = v188;
                if (!v200)
                  goto LABEL_165;
LABEL_163:
                if (*(_DWORD *)v200 == 2)
                {
                  WTF::StringImpl::~StringImpl(v200, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
                }
                else
                {
                  *(_DWORD *)v200 -= 2;
                }
                goto LABEL_165;
              }
LABEL_157:
              v186 = (v186 - 1) >> 1;
              v187 = &a1[v186];
              v168 = v189;
              if ((WTF::codePointCompare(*v187, v188, a3) & 0x80000000) == 0)
                goto LABEL_160;
            }
            *(_DWORD *)v191 -= 2;
LABEL_156:
            if (!v186)
              goto LABEL_160;
            goto LABEL_157;
          }
          v16 = (unint64_t)v15 >> 1;
          v17 = &a1[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v17, a1, v11);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, v17, v11);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1 + 1, v17 - 1, v12);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1 + 2, &a1[v16 + 1], (const WTF::StringImpl *)(v9 - 3));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v17 - 1, v17, (const WTF::StringImpl *)&a1[v16 + 1]);
            v19 = *a1;
            *a1 = *v17;
            *v17 = v19;
          }
          v8 = (const WTF::StringImpl *)((char *)v8 - 1);
          if ((v260 & 1) == 0 && (WTF::codePointCompare(*(a1 - 1), *a1, v18) & 0x80000000) == 0)
          {
            v63 = *a1;
            *a1 = 0;
            v64 = a1 + 1;
            if ((WTF::codePointCompare(v63, *(const WTF::StringImpl **)v11, v18) & 0x80000000) != 0)
            {
              do
              {
                if (v64 == v9)
                  goto LABEL_189;
                v65 = *v64++;
              }
              while ((WTF::codePointCompare(v63, v65, a3) & 0x80000000) == 0);
              v13 = v64 - 1;
            }
            else
            {
              do
              {
                v13 = v64;
                if (v64 >= v9)
                  break;
                ++v64;
              }
              while ((WTF::codePointCompare(v63, *v13, a3) & 0x80000000) == 0);
            }
            v66 = v9;
            if (v13 < v9)
            {
              v66 = v9;
              while (v66 != a1)
              {
                v67 = *--v66;
                if ((WTF::codePointCompare(v63, v67, a3) & 0x80000000) == 0)
                  goto LABEL_63;
              }
              goto LABEL_189;
            }
LABEL_63:
            if (v13 < v66)
            {
              v68 = *v13;
              *v13 = *v66;
              v69 = v13 + 1;
              *v66 = v68;
              while (v69 != v9)
              {
                v70 = *v69++;
                if ((WTF::codePointCompare(v63, v70, a3) & 0x80000000) != 0)
                {
                  v13 = v69 - 1;
                  while (v66 != a1)
                  {
                    v71 = *--v66;
                    if ((WTF::codePointCompare(v63, v71, a3) & 0x80000000) == 0)
                      goto LABEL_63;
                  }
                  goto LABEL_189;
                }
              }
              goto LABEL_189;
            }
            v72 = v13 - 1;
            if (v13 - 1 != a1)
            {
              v73 = *v72;
              *v72 = 0;
              v74 = *a1;
              *a1 = v73;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                {
                  WTF::StringImpl::~StringImpl(v74, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                }
                else
                {
                  *(_DWORD *)v74 -= 2;
                }
              }
            }
            v260 = 0;
            v75 = *v72;
            *v72 = v63;
            if (v75)
            {
              if (*(_DWORD *)v75 == 2)
              {
                WTF::StringImpl::~StringImpl(v75, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
                v260 = 0;
              }
              else
              {
                v260 = 0;
                *(_DWORD *)v75 -= 2;
              }
            }
            continue;
          }
          v20 = 0;
          v21 = *a1;
          *a1 = 0;
          do
          {
            v22 = &a1[v20 + 1];
            if (v22 == v9)
              goto LABEL_189;
            ++v20;
          }
          while ((WTF::codePointCompare(*v22, v21, v18) & 0x80000000) != 0);
          v29 = &a1[v20];
          v30 = v9;
          if (v20 != 1)
          {
            while (v30 != a1)
            {
              v31 = *--v30;
              if ((WTF::codePointCompare(v31, v21, v18) & 0x80000000) != 0)
                goto LABEL_21;
            }
LABEL_189:
            __break(1u);
            return;
          }
          v30 = v9;
          do
          {
            if (v29 >= v30)
              break;
            v32 = *--v30;
          }
          while ((WTF::codePointCompare(v32, v21, v18) & 0x80000000) == 0);
LABEL_21:
          if (v29 >= v30)
          {
            v41 = v29 - 1;
          }
          else
          {
            v258 = v8;
            v33 = v12;
            v34 = v11;
            v35 = &a1[v20];
            v36 = v30;
            do
            {
              v37 = *v35;
              *v35 = *v36;
              *v36 = v37;
              v38 = v35 + 1;
              do
              {
                if (v38 == v9)
                  goto LABEL_189;
                v39 = *v38++;
              }
              while ((WTF::codePointCompare(v39, v21, v18) & 0x80000000) != 0);
              v35 = v38 - 1;
              do
              {
                if (v36 == a1)
                  goto LABEL_189;
                v40 = *--v36;
              }
              while ((WTF::codePointCompare(v40, v21, v18) & 0x80000000) == 0);
            }
            while (v35 < v36);
            v41 = v38 - 2;
            v11 = v34;
            v12 = v33;
            v8 = v258;
          }
          if (v41 != a1)
          {
            v42 = *v41;
            *v41 = 0;
            v43 = *a1;
            *a1 = v42;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
              {
                WTF::StringImpl::~StringImpl(v43, v23, (uint64_t)v18, v24, v25, v26, v27, v28);
                WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
              }
              else
              {
                *(_DWORD *)v43 -= 2;
              }
            }
          }
          v44 = *v41;
          *v41 = v21;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::~StringImpl(v44, v23, (uint64_t)v18, v24, v25, v26, v27, v28);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_DWORD *)v44 -= 2;
            }
          }
          if (v29 < v30)
          {
LABEL_42:
            std::__introsort<std::_ClassicAlgPolicy,JSC::availableCurrencies(JSC::JSGlobalObject *)::$_0 &,WTF::String *,false>(a1, v41, v8, v260 & 1);
            v260 = 0;
            v13 = v41 + 1;
            continue;
          }
          v45 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCurrencies(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, v41, v18);
          v13 = v41 + 1;
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCurrencies(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v41 + 1, v9, v46))
          {
            if (v45)
              continue;
            goto LABEL_42;
          }
          v9 = v41;
          if (v45)
            return;
          goto LABEL_2;
        }
        v101 = a1 + 1;
        v103 = a1 == v9 || v101 == v9;
        if ((v260 & 1) == 0)
        {
          if (v103)
            return;
          v226 = 0;
          v227 = 1;
          while (1)
          {
            v228 = v226;
            v226 = v227;
            if ((WTF::codePointCompare(*v101, a1[v228], a3) & 0x80000000) != 0)
            {
              v235 = 0;
              v236 = *v101;
              *v101 = 0;
              do
              {
                v237 = &a1[v228];
                v238 = *v237;
                *v237 = 0;
                v237[1] = v238;
                if (v235)
                {
                  if (*(_DWORD *)v235 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v235, v229, (uint64_t)a3, v230, v231, v232, v233, v234);
                    WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
                  }
                  else
                  {
                    *(_DWORD *)v235 -= 2;
                  }
                }
                if (v228 == -1)
                  goto LABEL_189;
                v239 = v228 - 1;
                v240 = &a1[v228];
                v241 = WTF::codePointCompare(v236, *(v240 - 1), a3);
                v235 = *v240;
                v228 = v239;
              }
              while (v241 < 0);
              a1[v239 + 1] = v236;
              if (v235)
              {
                if (*(_DWORD *)v235 == 2)
                {
                  WTF::StringImpl::~StringImpl(v235, v229, (uint64_t)a3, v230, v231, v232, v233, v234);
                  WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
                }
                else
                {
                  *(_DWORD *)v235 -= 2;
                }
              }
            }
            v227 = v226 + 1;
            v101 = &a1[v226 + 1];
            if (v101 == v9)
              return;
          }
        }
        if (v103)
          return;
        v104 = 0;
        v105 = a1;
        do
        {
          v107 = *v105;
          v106 = v105[1];
          v105 = v101;
          if ((WTF::codePointCompare(v106, v107, a3) & 0x80000000) == 0)
            goto LABEL_106;
          v114 = 0;
          v115 = *v101;
          *v101 = 0;
          for (i = v104; ; i -= 8)
          {
            v117 = (const WTF::StringImpl **)((char *)a1 + i);
            v118 = *(const WTF::StringImpl **)((char *)a1 + i);
            *v117 = 0;
            v117[1] = v118;
            if (!v114)
              goto LABEL_98;
            if (*(_DWORD *)v114 == 2)
              break;
            *(_DWORD *)v114 -= 2;
LABEL_98:
            if (!i)
              goto LABEL_102;
LABEL_99:
            v119 = (const WTF::StringImpl **)((char *)a1 + i);
            if ((WTF::codePointCompare(v115, *(const WTF::StringImpl **)((char *)a1 + i - 8), a3) & 0x80000000) == 0)
              goto LABEL_103;
            v114 = *v117;
          }
          WTF::StringImpl::~StringImpl(v114, v108, (uint64_t)a3, v109, v110, v111, v112, v113);
          WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
          if (i)
            goto LABEL_99;
LABEL_102:
          v119 = a1;
LABEL_103:
          v128 = *v119;
          *v119 = v115;
          if (v128)
          {
            if (*(_DWORD *)v128 == 2)
            {
              WTF::StringImpl::~StringImpl(v128, v108, (uint64_t)a3, v109, v110, v111, v112, v113);
              WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
            }
            else
            {
              *(_DWORD *)v128 -= 2;
            }
          }
LABEL_106:
          v101 = v105 + 1;
          v104 += 8;
        }
        while (v105 + 1 != v9);
        return;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCurrencies(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(const WTF::StringImpl **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _BOOL8 result;
  const WTF::StringImpl *v7;
  const WTF::StringImpl **v8;
  const WTF::StringImpl *v9;
  WTF **v10;
  uint64_t v11;
  int v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t i;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  const WTF::StringImpl *v43;
  const WTF::StringImpl *v44;
  WTF *v45;
  const WTF::StringImpl *v46;
  WTF *v47;
  const WTF::StringImpl *v48;
  const WTF::StringImpl *v49;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((WTF::codePointCompare(*(a2 - 1), *a1, a3) & 0x80000000) != 0)
      {
        v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a2 - 1));
      return 1;
    case 4:
      v42 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      if ((WTF::codePointCompare(*(a2 - 1), a1[2], v43) & 0x80000000) != 0)
      {
        v45 = *v42;
        *v42 = *(a2 - 1);
        *(a2 - 1) = v45;
        if ((WTF::codePointCompare(*v42, a1[1], v44) & 0x80000000) != 0)
        {
          v48 = a1[1];
          v47 = a1[2];
          v49 = *a1;
          a1[1] = v47;
          a1[2] = v48;
          if ((WTF::codePointCompare(v47, v49, v46) & 0x80000000) != 0)
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,0>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((WTF::codePointCompare(*v10, *v8, v9) & 0x80000000) != 0)
    {
      v19 = 0;
      v20 = *v10;
      *v10 = 0;
      for (i = v11; ; i -= 8)
      {
        v22 = (char *)a1 + i;
        v23 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v22 + 2) = 0;
        *((_QWORD *)v22 + 3) = v23;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::~StringImpl(v19, v13, (uint64_t)v9, v14, v15, v16, v17, v18);
            WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
          }
          else
          {
            *(_DWORD *)v19 -= 2;
          }
        }
        if (i == -16)
        {
          v32 = a1;
          goto LABEL_17;
        }
        if ((WTF::codePointCompare(v20, *(const WTF::StringImpl **)((char *)a1 + i + 8), v9) & 0x80000000) == 0)
          break;
        v19 = (WTF::StringImpl *)*((_QWORD *)v22 + 2);
      }
      v32 = (const WTF::StringImpl **)((char *)a1 + i + 16);
LABEL_17:
      v33 = *v32;
      *v32 = v20;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v13, (uint64_t)v9, v14, v15, v16, v17, v18);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v8 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::availableNumberingSystems(JSC::JSGlobalObject *)::$_0 &,WTF::String *,false>(const WTF::StringImpl **a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::StringImpl *v8;
  const WTF::StringImpl **v9;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const WTF::StringImpl **v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  WTF **v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const WTF::StringImpl **v29;
  const WTF::StringImpl **v30;
  WTF *v31;
  WTF *v32;
  const WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  WTF **v35;
  const WTF::StringImpl **v36;
  WTF *v37;
  WTF **v38;
  WTF *v39;
  WTF *v40;
  const WTF::StringImpl **v41;
  const WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  BOOL v45;
  const WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  const WTF::StringImpl **v64;
  const WTF::StringImpl *v65;
  const WTF::StringImpl **v66;
  const WTF::StringImpl *v67;
  const WTF::StringImpl *v68;
  const WTF::StringImpl **v69;
  const WTF::StringImpl *v70;
  const WTF::StringImpl *v71;
  WTF **v72;
  const WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const WTF::StringImpl *v92;
  WTF **v93;
  const WTF::StringImpl *v94;
  const WTF::StringImpl *v95;
  WTF *v96;
  const WTF::StringImpl *v97;
  WTF *v98;
  const WTF::StringImpl *v99;
  const WTF::StringImpl *v100;
  WTF **v101;
  BOOL v103;
  uint64_t v104;
  const WTF::StringImpl **v105;
  WTF *v106;
  const WTF::StringImpl *v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF *v115;
  uint64_t i;
  WTF::StringImpl **v117;
  WTF::StringImpl *v118;
  WTF::StringImpl **v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  int64_t v138;
  uint64_t v139;
  WTF **v140;
  const WTF::StringImpl **v141;
  const WTF::StringImpl *v142;
  WTF::StringImpl **v143;
  WTF *v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const WTF::StringImpl *v167;
  WTF **v168;
  WTF::StringImpl **v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  WTF::StringImpl *v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  unint64_t v186;
  WTF **v187;
  const WTF::StringImpl *v188;
  WTF::StringImpl **v189;
  WTF *v190;
  WTF *v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::AtomStringImpl *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl *v235;
  WTF *v236;
  const WTF::StringImpl **v237;
  const WTF::StringImpl *v238;
  uint64_t v239;
  WTF::StringImpl **v240;
  int v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const WTF::StringImpl *v258;
  int64_t v259;
  char v260;
  int64_t v261;

  v260 = a4;
  v8 = a3;
  v9 = (const WTF::StringImpl **)a2;
LABEL_2:
  v11 = (const WTF::StringImpl *)(v9 - 1);
  v12 = (const WTF::StringImpl *)(v9 - 2);
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (char *)v9 - (char *)v13;
    v15 = v9 - v13;
    switch(v15)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((WTF::codePointCompare(*(v9 - 1), *a1, a3) & 0x80000000) != 0)
        {
          v92 = *a1;
          *a1 = *(v9 - 1);
          *(v9 - 1) = v92;
        }
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, v11);
        return;
      case 4:
        v93 = a1 + 2;
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
        if ((WTF::codePointCompare(*(v9 - 1), a1[2], v94) & 0x80000000) != 0)
        {
          v96 = *v93;
          *v93 = *(v9 - 1);
          *(v9 - 1) = v96;
          if ((WTF::codePointCompare(*v93, a1[1], v95) & 0x80000000) != 0)
          {
            v99 = a1[1];
            v98 = a1[2];
            v100 = *a1;
            a1[1] = v98;
            a1[2] = v99;
            if ((WTF::codePointCompare(v98, v100, v97) & 0x80000000) != 0)
              *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          }
        }
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,0>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3, (WTF **)v11);
        return;
      default:
        if (v14 > 191)
        {
          if (!v8)
          {
            if (a1 == v9)
              return;
            v137 = (unint64_t)(v15 - 2) >> 1;
            v261 = v137;
            do
            {
              v138 = v137;
              if (v261 >= v137)
              {
                v139 = (2 * v137) | 1;
                v140 = &a1[v139];
                if (2 * v137 + 2 < v15 && (int)WTF::codePointCompare(*v140, v140[1], a3) < 0)
                {
                  ++v140;
                  v139 = 2 * v138 + 2;
                }
                v141 = &a1[v138];
                if ((WTF::codePointCompare(*v140, *v141, a3) & 0x80000000) == 0)
                {
                  v259 = v138;
                  v142 = *v141;
                  *v141 = 0;
                  do
                  {
                    v143 = v140;
                    v144 = *v140;
                    *v140 = 0;
                    v145 = *v141;
                    *v141 = v144;
                    if (v145)
                    {
                      if (*(_DWORD *)v145 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v145, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
                      }
                      else
                      {
                        *(_DWORD *)v145 -= 2;
                      }
                    }
                    if (v261 < v139)
                      break;
                    v146 = (2 * v139) | 1;
                    v140 = &a1[v146];
                    v147 = 2 * v139 + 2;
                    if (v147 < v15 && (int)WTF::codePointCompare(*v140, v140[1], a3) < 0)
                    {
                      ++v140;
                      v146 = v147;
                    }
                    v141 = v143;
                    v139 = v146;
                  }
                  while ((WTF::codePointCompare(*v140, v142, a3) & 0x80000000) == 0);
                  v156 = *v143;
                  *v143 = v142;
                  v138 = v259;
                  if (v156)
                  {
                    if (*(_DWORD *)v156 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v156, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
                    }
                    else
                    {
                      *(_DWORD *)v156 -= 2;
                    }
                  }
                }
              }
              v137 = v138 - 1;
            }
            while (v138);
            v165 = (unint64_t)v14 >> 3;
            while (1)
            {
              v166 = 0;
              v167 = *a1;
              *a1 = 0;
              v168 = a1;
              do
              {
                v169 = v168;
                v168 += v166 + 1;
                v170 = 2 * v166;
                v166 = (2 * v166) | 1;
                v171 = v170 + 2;
                if (v170 + 2 < v165 && (int)WTF::codePointCompare(*v168, v168[1], a3) < 0)
                {
                  ++v168;
                  v166 = v171;
                }
                v172 = *v168;
                *v168 = 0;
                v173 = *v169;
                *v169 = v172;
                if (v173)
                {
                  if (*(_DWORD *)v173 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v173, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
                  }
                  else
                  {
                    *(_DWORD *)v173 -= 2;
                  }
                }
              }
              while (v166 <= (uint64_t)((unint64_t)(v165 - 2) >> 1));
              if (v168 == --v9)
              {
                v200 = *v168;
                *v168 = v167;
                if (!v200)
                  goto LABEL_165;
                goto LABEL_163;
              }
              v182 = *v9;
              *v9 = 0;
              v183 = *v168;
              *v168 = v182;
              if (v183)
              {
                if (*(_DWORD *)v183 == 2)
                {
                  WTF::StringImpl::~StringImpl(v183, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
                }
                else
                {
                  *(_DWORD *)v183 -= 2;
                }
              }
              v184 = *v9;
              *v9 = v167;
              if (v184)
              {
                if (*(_DWORD *)v184 == 2)
                {
                  WTF::StringImpl::~StringImpl(v184, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
                }
                else
                {
                  *(_DWORD *)v184 -= 2;
                }
              }
              v185 = (char *)(v168 + 1) - (char *)a1;
              if (v185 >= 9)
              {
                v186 = (((unint64_t)v185 >> 3) - 2) >> 1;
                v187 = &a1[v186];
                if ((WTF::codePointCompare(*v187, *v168, a3) & 0x80000000) != 0)
                  break;
              }
LABEL_165:
              if (v165-- <= 2)
                return;
            }
            v188 = *v168;
            *v168 = 0;
            while (1)
            {
              v189 = v187;
              v190 = *v187;
              *v187 = 0;
              v191 = *v168;
              *v168 = v190;
              if (!v191)
                goto LABEL_156;
              if (*(_DWORD *)v191 != 2)
                break;
              WTF::StringImpl::~StringImpl(v191, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
              if (!v186)
              {
LABEL_160:
                v200 = *v189;
                *v189 = v188;
                if (!v200)
                  goto LABEL_165;
LABEL_163:
                if (*(_DWORD *)v200 == 2)
                {
                  WTF::StringImpl::~StringImpl(v200, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
                }
                else
                {
                  *(_DWORD *)v200 -= 2;
                }
                goto LABEL_165;
              }
LABEL_157:
              v186 = (v186 - 1) >> 1;
              v187 = &a1[v186];
              v168 = v189;
              if ((WTF::codePointCompare(*v187, v188, a3) & 0x80000000) == 0)
                goto LABEL_160;
            }
            *(_DWORD *)v191 -= 2;
LABEL_156:
            if (!v186)
              goto LABEL_160;
            goto LABEL_157;
          }
          v16 = (unint64_t)v15 >> 1;
          v17 = &a1[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v17, a1, v11);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, v17, v11);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1 + 1, v17 - 1, v12);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1 + 2, &a1[v16 + 1], (const WTF::StringImpl *)(v9 - 3));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v17 - 1, v17, (const WTF::StringImpl *)&a1[v16 + 1]);
            v19 = *a1;
            *a1 = *v17;
            *v17 = v19;
          }
          v8 = (const WTF::StringImpl *)((char *)v8 - 1);
          if ((v260 & 1) == 0 && (WTF::codePointCompare(*(a1 - 1), *a1, v18) & 0x80000000) == 0)
          {
            v63 = *a1;
            *a1 = 0;
            v64 = a1 + 1;
            if ((WTF::codePointCompare(v63, *(const WTF::StringImpl **)v11, v18) & 0x80000000) != 0)
            {
              do
              {
                if (v64 == v9)
                  goto LABEL_189;
                v65 = *v64++;
              }
              while ((WTF::codePointCompare(v63, v65, a3) & 0x80000000) == 0);
              v13 = v64 - 1;
            }
            else
            {
              do
              {
                v13 = v64;
                if (v64 >= v9)
                  break;
                ++v64;
              }
              while ((WTF::codePointCompare(v63, *v13, a3) & 0x80000000) == 0);
            }
            v66 = v9;
            if (v13 < v9)
            {
              v66 = v9;
              while (v66 != a1)
              {
                v67 = *--v66;
                if ((WTF::codePointCompare(v63, v67, a3) & 0x80000000) == 0)
                  goto LABEL_63;
              }
              goto LABEL_189;
            }
LABEL_63:
            if (v13 < v66)
            {
              v68 = *v13;
              *v13 = *v66;
              v69 = v13 + 1;
              *v66 = v68;
              while (v69 != v9)
              {
                v70 = *v69++;
                if ((WTF::codePointCompare(v63, v70, a3) & 0x80000000) != 0)
                {
                  v13 = v69 - 1;
                  while (v66 != a1)
                  {
                    v71 = *--v66;
                    if ((WTF::codePointCompare(v63, v71, a3) & 0x80000000) == 0)
                      goto LABEL_63;
                  }
                  goto LABEL_189;
                }
              }
              goto LABEL_189;
            }
            v72 = v13 - 1;
            if (v13 - 1 != a1)
            {
              v73 = *v72;
              *v72 = 0;
              v74 = *a1;
              *a1 = v73;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                {
                  WTF::StringImpl::~StringImpl(v74, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                }
                else
                {
                  *(_DWORD *)v74 -= 2;
                }
              }
            }
            v260 = 0;
            v75 = *v72;
            *v72 = v63;
            if (v75)
            {
              if (*(_DWORD *)v75 == 2)
              {
                WTF::StringImpl::~StringImpl(v75, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
                v260 = 0;
              }
              else
              {
                v260 = 0;
                *(_DWORD *)v75 -= 2;
              }
            }
            continue;
          }
          v20 = 0;
          v21 = *a1;
          *a1 = 0;
          do
          {
            v22 = &a1[v20 + 1];
            if (v22 == v9)
              goto LABEL_189;
            ++v20;
          }
          while ((WTF::codePointCompare(*v22, v21, v18) & 0x80000000) != 0);
          v29 = &a1[v20];
          v30 = v9;
          if (v20 != 1)
          {
            while (v30 != a1)
            {
              v31 = *--v30;
              if ((WTF::codePointCompare(v31, v21, v18) & 0x80000000) != 0)
                goto LABEL_21;
            }
LABEL_189:
            __break(1u);
            return;
          }
          v30 = v9;
          do
          {
            if (v29 >= v30)
              break;
            v32 = *--v30;
          }
          while ((WTF::codePointCompare(v32, v21, v18) & 0x80000000) == 0);
LABEL_21:
          if (v29 >= v30)
          {
            v41 = v29 - 1;
          }
          else
          {
            v258 = v8;
            v33 = v12;
            v34 = v11;
            v35 = &a1[v20];
            v36 = v30;
            do
            {
              v37 = *v35;
              *v35 = *v36;
              *v36 = v37;
              v38 = v35 + 1;
              do
              {
                if (v38 == v9)
                  goto LABEL_189;
                v39 = *v38++;
              }
              while ((WTF::codePointCompare(v39, v21, v18) & 0x80000000) != 0);
              v35 = v38 - 1;
              do
              {
                if (v36 == a1)
                  goto LABEL_189;
                v40 = *--v36;
              }
              while ((WTF::codePointCompare(v40, v21, v18) & 0x80000000) == 0);
            }
            while (v35 < v36);
            v41 = v38 - 2;
            v11 = v34;
            v12 = v33;
            v8 = v258;
          }
          if (v41 != a1)
          {
            v42 = *v41;
            *v41 = 0;
            v43 = *a1;
            *a1 = v42;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
              {
                WTF::StringImpl::~StringImpl(v43, v23, (uint64_t)v18, v24, v25, v26, v27, v28);
                WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
              }
              else
              {
                *(_DWORD *)v43 -= 2;
              }
            }
          }
          v44 = *v41;
          *v41 = v21;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::~StringImpl(v44, v23, (uint64_t)v18, v24, v25, v26, v27, v28);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_DWORD *)v44 -= 2;
            }
          }
          if (v29 < v30)
          {
LABEL_42:
            std::__introsort<std::_ClassicAlgPolicy,JSC::availableNumberingSystems(JSC::JSGlobalObject *)::$_0 &,WTF::String *,false>(a1, v41, v8, v260 & 1);
            v260 = 0;
            v13 = v41 + 1;
            continue;
          }
          v45 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableNumberingSystems(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, v41, v18);
          v13 = v41 + 1;
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableNumberingSystems(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v41 + 1, v9, v46))
          {
            if (v45)
              continue;
            goto LABEL_42;
          }
          v9 = v41;
          if (v45)
            return;
          goto LABEL_2;
        }
        v101 = a1 + 1;
        v103 = a1 == v9 || v101 == v9;
        if ((v260 & 1) == 0)
        {
          if (v103)
            return;
          v226 = 0;
          v227 = 1;
          while (1)
          {
            v228 = v226;
            v226 = v227;
            if ((WTF::codePointCompare(*v101, a1[v228], a3) & 0x80000000) != 0)
            {
              v235 = 0;
              v236 = *v101;
              *v101 = 0;
              do
              {
                v237 = &a1[v228];
                v238 = *v237;
                *v237 = 0;
                v237[1] = v238;
                if (v235)
                {
                  if (*(_DWORD *)v235 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v235, v229, (uint64_t)a3, v230, v231, v232, v233, v234);
                    WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
                  }
                  else
                  {
                    *(_DWORD *)v235 -= 2;
                  }
                }
                if (v228 == -1)
                  goto LABEL_189;
                v239 = v228 - 1;
                v240 = &a1[v228];
                v241 = WTF::codePointCompare(v236, *(v240 - 1), a3);
                v235 = *v240;
                v228 = v239;
              }
              while (v241 < 0);
              a1[v239 + 1] = v236;
              if (v235)
              {
                if (*(_DWORD *)v235 == 2)
                {
                  WTF::StringImpl::~StringImpl(v235, v229, (uint64_t)a3, v230, v231, v232, v233, v234);
                  WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
                }
                else
                {
                  *(_DWORD *)v235 -= 2;
                }
              }
            }
            v227 = v226 + 1;
            v101 = &a1[v226 + 1];
            if (v101 == v9)
              return;
          }
        }
        if (v103)
          return;
        v104 = 0;
        v105 = a1;
        do
        {
          v107 = *v105;
          v106 = v105[1];
          v105 = v101;
          if ((WTF::codePointCompare(v106, v107, a3) & 0x80000000) == 0)
            goto LABEL_106;
          v114 = 0;
          v115 = *v101;
          *v101 = 0;
          for (i = v104; ; i -= 8)
          {
            v117 = (const WTF::StringImpl **)((char *)a1 + i);
            v118 = *(const WTF::StringImpl **)((char *)a1 + i);
            *v117 = 0;
            v117[1] = v118;
            if (!v114)
              goto LABEL_98;
            if (*(_DWORD *)v114 == 2)
              break;
            *(_DWORD *)v114 -= 2;
LABEL_98:
            if (!i)
              goto LABEL_102;
LABEL_99:
            v119 = (const WTF::StringImpl **)((char *)a1 + i);
            if ((WTF::codePointCompare(v115, *(const WTF::StringImpl **)((char *)a1 + i - 8), a3) & 0x80000000) == 0)
              goto LABEL_103;
            v114 = *v117;
          }
          WTF::StringImpl::~StringImpl(v114, v108, (uint64_t)a3, v109, v110, v111, v112, v113);
          WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
          if (i)
            goto LABEL_99;
LABEL_102:
          v119 = a1;
LABEL_103:
          v128 = *v119;
          *v119 = v115;
          if (v128)
          {
            if (*(_DWORD *)v128 == 2)
            {
              WTF::StringImpl::~StringImpl(v128, v108, (uint64_t)a3, v109, v110, v111, v112, v113);
              WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
            }
            else
            {
              *(_DWORD *)v128 -= 2;
            }
          }
LABEL_106:
          v101 = v105 + 1;
          v104 += 8;
        }
        while (v105 + 1 != v9);
        return;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableNumberingSystems(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(const WTF::StringImpl **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _BOOL8 result;
  const WTF::StringImpl *v7;
  const WTF::StringImpl **v8;
  const WTF::StringImpl *v9;
  WTF **v10;
  uint64_t v11;
  int v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t i;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  const WTF::StringImpl *v43;
  const WTF::StringImpl *v44;
  WTF *v45;
  const WTF::StringImpl *v46;
  WTF *v47;
  const WTF::StringImpl *v48;
  const WTF::StringImpl *v49;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((WTF::codePointCompare(*(a2 - 1), *a1, a3) & 0x80000000) != 0)
      {
        v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a2 - 1));
      return 1;
    case 4:
      v42 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      if ((WTF::codePointCompare(*(a2 - 1), a1[2], v43) & 0x80000000) != 0)
      {
        v45 = *v42;
        *v42 = *(a2 - 1);
        *(a2 - 1) = v45;
        if ((WTF::codePointCompare(*v42, a1[1], v44) & 0x80000000) != 0)
        {
          v48 = a1[1];
          v47 = a1[2];
          v49 = *a1;
          a1[1] = v47;
          a1[2] = v48;
          if ((WTF::codePointCompare(v47, v49, v46) & 0x80000000) != 0)
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,0>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((WTF::codePointCompare(*v10, *v8, v9) & 0x80000000) != 0)
    {
      v19 = 0;
      v20 = *v10;
      *v10 = 0;
      for (i = v11; ; i -= 8)
      {
        v22 = (char *)a1 + i;
        v23 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v22 + 2) = 0;
        *((_QWORD *)v22 + 3) = v23;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::~StringImpl(v19, v13, (uint64_t)v9, v14, v15, v16, v17, v18);
            WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
          }
          else
          {
            *(_DWORD *)v19 -= 2;
          }
        }
        if (i == -16)
        {
          v32 = a1;
          goto LABEL_17;
        }
        if ((WTF::codePointCompare(v20, *(const WTF::StringImpl **)((char *)a1 + i + 8), v9) & 0x80000000) == 0)
          break;
        v19 = (WTF::StringImpl *)*((_QWORD *)v22 + 2);
      }
      v32 = (const WTF::StringImpl **)((char *)a1 + i + 16);
LABEL_17:
      v33 = *v32;
      *v32 = v20;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v13, (uint64_t)v9, v14, v15, v16, v17, v18);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v8 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t WTF::StringView::find(WTF::StringView *this, unsigned int __c, unsigned int a3, double a4, double a5, float a6)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;

  v7 = *(_QWORD *)this;
  v8 = *((unsigned int *)this + 2);
  if (*((_BYTE *)this + 12))
  {
    if (v8 > a3)
    {
      v9 = v8 - a3;
      v10 = 16;
      if (v9 < 0x10)
        v10 = v8 - a3;
      if (v10)
      {
        v11 = v10;
        v12 = (unsigned __int8 *)(v7 + a3);
        while (*v12 != __c)
        {
          ++v12;
          if (!--v11)
            goto LABEL_9;
        }
        return (uint64_t)&v12[-v7];
      }
LABEL_9:
      if (v9 >= 0x11)
      {
        v12 = (unsigned __int8 *)memchr((void *)(v7 + a3 + v10), __c, v9 - v10);
        if (v12)
          return (uint64_t)&v12[-v7];
      }
    }
    return -1;
  }
  return WTF::find<char16_t,(void *)0>(*(_QWORD *)this, v8, __c, a3, a4, a5, a6);
}

uint64_t WTF::find<char16_t,(void *)0>(uint64_t result, unint64_t a2, unsigned int a3, unint64_t a4, double a5, double a6, float a7)
{
  int16x8_t *v7;
  unint64_t v8;
  unint64_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int16x8_t *v12;
  __int8 *v13;

  if (a2 <= a4)
    return -1;
  v7 = (int16x8_t *)(result + 2 * a4);
  v8 = result + 2 * a2;
  v9 = v8 - (_QWORD)v7;
  if ((uint64_t)(v8 - (_QWORD)v7) <= -2)
  {
    __break(1u);
    return result;
  }
  if (v9 <= 0x3E)
  {
    while (v7->u16[0] != a3)
    {
      v7 = (int16x8_t *)((char *)v7 + 2);
      v9 -= 2;
      if (!v9)
        return -1;
    }
    goto LABEL_15;
  }
  v10 = vdupq_n_s16(a3);
  if ((unint64_t)&v7->u64[1] + 6 >= v8)
  {
    v12 = (int16x8_t *)(result + 2 * a4);
LABEL_12:
    if ((unint64_t)v12 < v8)
    {
      v7 = (int16x8_t *)(v8 - 16);
      v11 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v8 - 16), v10);
      v10.i16[0] = vmaxvq_u16((uint16x8_t)v11);
      if (v10.i32[0])
        goto LABEL_14;
    }
    return -1;
  }
  while (1)
  {
    v11 = (int8x16_t)vceqq_s16(*v7, v10);
    LOWORD(a7) = vmaxvq_u16((uint16x8_t)v11);
    if (a7 != 0.0)
      break;
    v12 = v7 + 1;
    v13 = &v7[1].i8[14];
    ++v7;
    if ((unint64_t)v13 >= v8)
      goto LABEL_12;
  }
LABEL_14:
  v7 = (int16x8_t *)((char *)v7
                   + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v11)));
LABEL_15:
  if (v7 == (int16x8_t *)v8)
    return -1;
  else
    return ((uint64_t)v7->i64 - result) >> 1;
}

__n128 WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WTF::StringView,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

unsigned int *WTF::StringView::SplitResult::Iterator::operator*(unsigned int *result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;

  v1 = *(_BYTE **)result;
  v2 = result[2];
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  if (v3 <= v2)
    return (unsigned int *)"";
  v4 = result[3];
  if ((int)v3 - (int)v2 <= v4)
  {
    v4 = v3 - v2;
    if (!(_DWORD)v2)
      return *(unsigned int **)v1;
  }
  v5 = v3 - v2;
  if (v1[12])
  {
    if (v5 >= v4)
      return (unsigned int *)(*(_QWORD *)v1 + v2);
  }
  else if (v5 >= v4)
  {
    return (unsigned int *)(*(_QWORD *)v1 + 2 * v2);
  }
  __break(1u);
  return result;
}

uint64_t JSC::LanguageTagParser::LanguageTagParser(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, float a6)
{
  unsigned int *v7;
  int v8;
  char v9;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_WORD *)(a1 + 16) = 45;
  *(_BYTE *)(a1 + 18) = 1;
  v7 = (unsigned int *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a1;
  *(_DWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)(a1 + 24), a4, a5, a6);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 60) = 1;
  *(_QWORD *)(a1 + 48) = WTF::StringView::SplitResult::Iterator::operator*(v7);
  *(_DWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 60) = v9;
  return a1;
}

uint64_t JSC::intlPluralRulesConstructorFuncSupportedLocalesOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  JSC::Symbol *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v26;
  WTF *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  unsigned int v39;

  v5 = *((_QWORD *)this + 7);
  JSC::intlAvailableLocales(this);
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  JSC::canonicalizeLocaleList((unint64_t)this, v13, v6, v7, v8, v9, v10, v11, &v38, v12);
  if (!*(_DWORD *)(v5 + 80))
    goto LABEL_4;
  v37 = *(_DWORD *)(v5 + 80);
  if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v15, v16, v17, v18, v19, v20);
  if (*(_QWORD *)(v5 + 16))
  {
    v23 = 0;
  }
  else
  {
LABEL_4:
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v21 = 10;
    else
      v21 = *((_QWORD *)a2 + 7);
    JSC::supportedLocales(this, (const WTF::StringImpl *)&JSC::intlAvailableLocales(void)::availableLocales, (JSC::Structure *)&v38, v21, v17, v18, v19, v20);
    v23 = v22;
  }
  v24 = v38;
  if (v39)
  {
    v26 = 8 * v39;
    v27 = v38;
    do
    {
      v28 = *(WTF::StringImpl **)v27;
      *(_QWORD *)v27 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, v14, v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      v27 = (WTF *)((char *)v27 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  if (v24)
    WTF::fastFree((unint64_t)v24, v14, v15, v16, v17, v18, v19, v20);
  return v23;
}

uint64_t JSC::intlPluralRulesPrototypeFuncSelect(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  JSC::IntlPluralRules *v11;
  JSC::JSObject *v12;
  unint64_t v13;
  double v14;
  int v16;
  double v17;
  uint64_t v18;
  JSC::VM *v19;

  v10 = *((_QWORD *)this + 7);
  v19 = (JSC::VM *)v10;
  v11 = (JSC::IntlPluralRules *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlPluralRules::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v19, (uint64_t)"Intl.PluralRules.prototype.select called on value that's not a PluralRules", 75);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18 = 10;
    goto LABEL_12;
  }
  v12 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v18 = (uint64_t)v12;
  if ((unint64_t)v12 >= 0xFFFE000000000000)
  {
    v14 = (double)(int)v12;
    goto LABEL_8;
  }
  v13 = (unint64_t)v12 - 0x2000000000000;
  if (v13 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_12:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v18, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    goto LABEL_8;
  }
  v14 = *(double *)&v13;
  if (!*(_DWORD *)(v10 + 80))
    return JSC::IntlPluralRules::select(v11, this, v14);
LABEL_8:
  v16 = *(_DWORD *)(v10 + 80);
  if ((v16 & 0x27) != 0 && (v16 & 0x20) == 0)
  {
    v17 = v14;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v14 = v17;
  }
  if (*(_QWORD *)(v10 + 16))
    return 0;
  else
    return JSC::IntlPluralRules::select(v11, this, v14);
}

int *JSC::intlPluralRulesPrototypeFuncResolvedOptions(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::IntlPluralRules *v9;
  JSC::VM *v11;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v9 = (JSC::IntlPluralRules *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0
    || &JSC::IntlPluralRules::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return (int *)JSC::throwTypeError((unint64_t)this, &v11, (uint64_t)"Intl.PluralRules.prototype.resolvedOptions called on value that's not a PluralRules", 84);
  }
  else
  {
    return JSC::IntlPluralRules::resolvedOptions(v9, this, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::intlRelativeTimeFormatConstructorFuncSupportedLocalesOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  uint64_t v6;
  JSC::Symbol *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v26;
  WTF *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  unsigned int v39;

  v5 = *((_QWORD *)this + 7);
  JSC::intlAvailableLocales(this);
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  JSC::canonicalizeLocaleList((unint64_t)this, v13, v6, v7, v8, v9, v10, v11, &v38, v12);
  if (!*(_DWORD *)(v5 + 80))
    goto LABEL_4;
  v37 = *(_DWORD *)(v5 + 80);
  if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v15, v16, v17, v18, v19, v20);
  if (*(_QWORD *)(v5 + 16))
  {
    v23 = 0;
  }
  else
  {
LABEL_4:
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v21 = 10;
    else
      v21 = *((_QWORD *)a2 + 7);
    JSC::supportedLocales(this, (const WTF::StringImpl *)&JSC::intlAvailableLocales(void)::availableLocales, (JSC::Structure *)&v38, v21, v17, v18, v19, v20);
    v23 = v22;
  }
  v24 = v38;
  if (v39)
  {
    v26 = 8 * v39;
    v27 = v38;
    do
    {
      v28 = *(WTF::StringImpl **)v27;
      *(_QWORD *)v27 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, v14, v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      v27 = (WTF *)((char *)v27 + 8);
      v26 -= 8;
    }
    while (v26);
  }
  if (v24)
    WTF::fastFree((unint64_t)v24, v14, v15, v16, v17, v18, v19, v20);
  return v23;
}

uint64_t WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 0x21)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 32;
    goto LABEL_12;
  }
  if (!HIDWORD(v5))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)v5);
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_12:
    memcpy(v9, v7, v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

_BYTE *WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<char const,18446744073709551615ul>(uint64_t a1, char *a2, WTF *this)
{
  WTF *v3;
  _BYTE *result;
  char v7;

  v3 = this;
  result = (_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 32;
  *(_DWORD *)(a1 + 12) = (_DWORD)this;
  if ((unint64_t)this < 0x21)
  {
    if (!this)
      return (_BYTE *)a1;
    do
    {
LABEL_3:
      v7 = *a2++;
      *result++ = v7;
      v3 = (WTF *)((char *)v3 - 1);
    }
    while (v3);
    return (_BYTE *)a1;
  }
  if (!((unint64_t)this >> 32))
  {
    result = (_BYTE *)WTF::fastMalloc(this);
    *(_DWORD *)(a1 + 8) = (_DWORD)v3;
    *(_QWORD *)a1 = result;
    goto LABEL_3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>(uint64_t a1, unint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 12)) = *(_BYTE *)WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

void WTF::Vector<char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(uint64_t a1, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 0x21)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 32;
    }
    else
    {
      if (HIDWORD(v5))
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)v5);
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableLocales(void)::$_0 &&>>()
{
  int v0;
  int v1;
  int i;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  double v11;
  double v12;
  float v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  JSC::intlAvailableLocales(void)::availableLocales = 0;
  unk_1ECF53D30 = 0;
  qword_1ECF53D38 = 0;
  v0 = uloc_countAvailable();
  if (v0 >= 1)
  {
    v1 = v0;
    for (i = 0; i != v1; ++i)
    {
      uloc_getAvailable();
      JSC::languageTagForLocaleID((const char *)1, &v23);
      v10 = v23;
      if (v23)
      {
        if (*((_DWORD *)v23 + 1))
        {
          WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&v22, (uint64_t)&JSC::intlAvailableLocales(void)::availableLocales, &v23, v5, v6, v7, v8, v9);
          JSC::addScriptlessLocaleIfNeeded((uint64_t)&JSC::intlAvailableLocales(void)::availableLocales, *((WTF **)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*((_DWORD *)v10 + 4) >> 2) & 1) << 32), v11, v12, v13);
        }
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::~StringImpl(v10, v3, v4, v5, v6, v7, v8, v9);
          WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
  }
}

void JSC::addScriptlessLocaleIfNeeded(uint64_t a1, WTF *a2, uint64_t a3, double a4, double a5, float a6)
{
  unint64_t v7;
  WTF::AtomStringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  float v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  char v22;
  uint64_t v23;
  unint64_t v24;
  WTF *v25;
  double v26;
  unsigned int v27;
  unint64_t v28;
  BOOL v30;
  WTF *v31;
  WTF *v32;
  char *v33;
  unsigned int v34;
  WTF *v35;
  _BYTE *v36;
  WTF *v37;
  char v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  char v45;
  WTF *v46;
  int *v47;
  _BYTE *v48;
  int v49;
  WTF::StringImpl *v50;
  WTF *v51;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  WTF::StringImpl *v62;
  WTF *v63;
  uint64_t v64;
  unsigned __int16 v65;
  char v66;
  WTF *v67;
  uint64_t v68;
  _BYTE v69[48];

  if (a3 < 0xA)
    return;
  v67 = (WTF *)v69;
  v68 = 3;
  v63 = a2;
  v64 = a3;
  v65 = 45;
  v66 = 0;
  v7 = WTF::StringView::find((uint64_t)&v63, 0x2Du, 0, COERCE_DOUBLE(3), a5, a6);
  if (v7 != -1)
  {
    v18 = 0;
    while (v7 <= v18 && !v66)
    {
      v7 = WTF::StringView::find((uint64_t)&v63, v65, ++v18, v15, v16, v17);
      if (v7 == -1)
        goto LABEL_10;
    }
    v20 = v7 - v18;
    v19 = v64;
LABEL_14:
    v22 = 0;
    do
    {
      if (v64 <= v18)
      {
        v23 = 0x100000000;
        v25 = (WTF *)"";
      }
      else
      {
        LODWORD(v23) = v20;
        if (v64 - v18 > v20 || (LODWORD(v23) = v64 - v18, v18))
        {
          v23 = v23;
          v24 = v64 - (unint64_t)v18;
          if (BYTE4(v64))
          {
            if (v24 < v23)
              goto LABEL_90;
            v25 = (WTF *)((char *)v63 + v18);
            v23 = v23 | 0x100000000;
          }
          else
          {
            if (v24 < v23)
              goto LABEL_90;
            v25 = (WTF *)((char *)v63 + 2 * v18);
          }
        }
        else
        {
          v25 = v63;
          v23 = v64;
        }
      }
      *(_QWORD *)&v61 = v25;
      *((_QWORD *)&v61 + 1) = v23;
      if (HIDWORD(v68) == 3)
        goto LABEL_74;
      if (HIDWORD(v68) == (_DWORD)v68)
      {
        *(_QWORD *)&v26 = WTF::Vector<WTF::StringView,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView&>((uint64_t)&v67, (unint64_t)&v61).n128_u64[0];
      }
      else
      {
        v26 = *(double *)&v61;
        *((_OWORD *)v67 + HIDWORD(v68)) = v61;
        ++HIDWORD(v68);
      }
      v18 += v20;
      if (v18 >= v64)
      {
        v22 = 1;
      }
      else
      {
        while (1)
        {
          v27 = v18++;
          v28 = WTF::StringView::find((uint64_t)&v63, v65, v18, v26, v16, v17);
          if (v28 == -1)
            break;
          if (v28 > v18 || v66 != 0)
          {
            v20 = v28 - v18;
            v18 = v27 + 1;
            goto LABEL_33;
          }
        }
        v20 = v64 - 1 - v27;
        if (v66)
          v30 = 0;
        else
          v30 = (_DWORD)v64 - 1 == v27;
        if (v30)
          v22 = 1;
      }
LABEL_33:
      ;
    }
    while (v18 != v19 || !v22);
    goto LABEL_45;
  }
  v18 = 0;
LABEL_10:
  v19 = v64;
  v20 = v64 - v18;
  if ((_DWORD)v64 != v18 || v66 != 0)
    goto LABEL_14;
LABEL_45:
  if (HIDWORD(v68) != 3)
    goto LABEL_74;
  v31 = v67;
  if (*((_DWORD *)v67 + 6) == 4)
  {
    if (*((_DWORD *)v67 + 10) <= 3u)
    {
      v63 = (WTF *)&v65;
      v64 = 12;
      v32 = (WTF *)*((unsigned int *)v67 + 2);
      if ((_DWORD)v32)
      {
        v33 = *(char **)v67;
        if (v32 >= 0xD)
        {
          WTF::Vector<char,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)&v63, v32);
          v34 = HIDWORD(v64);
          if (v32 < HIDWORD(v64))
            goto LABEL_93;
          v35 = v63;
        }
        else
        {
          v34 = 0;
          v35 = (WTF *)&v65;
        }
        v36 = (char *)v35 + v34;
        v37 = v32;
        do
        {
          v38 = *v33++;
          *v36++ = v38;
          v37 = (WTF *)((char *)v37 - 1);
        }
        while (v37);
        HIDWORD(v64) = (_DWORD)v32;
        LOBYTE(v61) = 45;
        if ((_DWORD)v32 == (_DWORD)v64)
        {
          WTF::Vector<char,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)&v63, (unint64_t)&v61);
          goto LABEL_56;
        }
        v39 = v63;
      }
      else
      {
        v39 = (WTF *)&v65;
      }
      *((_BYTE *)v32 + (_QWORD)v39) = 45;
      ++HIDWORD(v64);
LABEL_56:
      if (HIDWORD(v68) <= 2)
        goto LABEL_93;
      v40 = *((unsigned int *)v67 + 10);
      v41 = HIDWORD(v64);
      if ((_DWORD)v40)
      {
        v42 = (char *)*((_QWORD *)v67 + 4);
        v43 = HIDWORD(v64) + v40;
        if (v43 > v64)
        {
          WTF::Vector<char,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>((uint64_t)&v63, (WTF *)(HIDWORD(v64) + v40));
          v41 = HIDWORD(v64);
          if (v43 < HIDWORD(v64))
          {
            __break(0xC471u);
LABEL_90:
            __break(1u);
LABEL_93:
            __break(0xC471u);
            JUMPOUT(0x198970B24);
          }
        }
        v44 = (char *)v63 + v41;
        do
        {
          v45 = *v42++;
          *v44++ = v45;
          --v40;
        }
        while (v40);
        HIDWORD(v64) = v43;
        LODWORD(v41) = v43;
      }
      if ((_DWORD)v41)
      {
        if ((v41 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198970B2CLL);
        }
        v46 = v63;
        v47 = (int *)WTF::fastCompactMalloc((WTF *)(v41 + 20));
        v48 = v47 + 5;
        *v47 = 2;
        v47[1] = v41;
        *((_QWORD *)v47 + 1) = v47 + 5;
        v47[4] = 4;
        if ((_DWORD)v41 == 1)
          *v48 = *(_BYTE *)v46;
        else
          memcpy(v48, v46, v41);
        WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v47);
        v49 = *v47 | 1;
      }
      else
      {
        v47 = &WTF::StringImpl::s_emptyAtomString;
        v49 = WTF::StringImpl::s_emptyAtomString + 2;
      }
      *v47 = v49;
      v62 = (WTF::StringImpl *)v47;
      WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::add(a1, &v62, v9, v10, v11, v12, v13, v14, (uint64_t)&v61);
      v50 = v62;
      v62 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
        {
          WTF::StringImpl::~StringImpl(v50, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
          WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)v50 -= 2;
        }
      }
      v51 = v63;
      if (&v65 != (unsigned __int16 *)v63 && v63)
      {
        v63 = 0;
        LODWORD(v64) = 0;
        WTF::fastFree((unint64_t)v51, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
      }
    }
LABEL_74:
    v31 = v67;
  }
  if (v69 != (_BYTE *)v31 && v31 != 0)
  {
    v67 = 0;
    LODWORD(v68) = 0;
    WTF::fastFree((unint64_t)v31, v8, (uint64_t)v9, v10, v11, v12, v13, v14);
  }
}

WTF *WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  WTF **v18;
  WTF *result;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  WTF *v25;
  WTF::StringImpl *v26;
  int i;
  int v28;
  WTF **v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v32;
  WTF::StringImpl *v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v12 = *(_DWORD *)(a2 + 8);
  v11 = *(unsigned int *)(a2 + 12);
  if (20 * v11 >= 19 * (unint64_t)v12 || *(_BYTE *)(a2 + 20) && v12 <= 2 * (int)v11)
  {
    if (v12)
      v36 = 2 * v12;
    else
      v36 = 8;
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::rehash(a2, v36, (uint64_t)a3, a4, a5, a6, a7, a8);
    v12 = *(_DWORD *)(a2 + 8);
  }
  v13 = v12 - 1;
  v14 = *(_DWORD *)(a2 + 16);
  v15 = *((_DWORD *)*a3 + 4);
  if (v15 < 0x100)
    v16 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v16 = v15 >> 8;
  v17 = (v16 ^ v14) & v13;
  v18 = (WTF **)(*(_QWORD *)a2 + 8 * v17);
  result = *v18;
  if (*v18)
  {
    v37 = a1;
    v20 = 0;
    while (1)
    {
      v21 = *((_DWORD *)result + 4);
      v22 = v21 < 0x100 ? WTF::StringImpl::hashSlowCase(result) : v21 >> 8;
      v23 = (v17 + v12 - ((v22 ^ v14) & v13)) & v13;
      if (v20 > v23)
        break;
      if (v22 == v16)
      {
        result = (WTF *)WTF::equal(*v18, *a3, (const WTF::StringImpl *)a3);
        v24 = *(_QWORD *)a2;
        if ((result & 1) != 0)
        {
          v34 = 0;
          a1 = v37;
          goto LABEL_35;
        }
      }
      else
      {
        v24 = *(_QWORD *)a2;
      }
      v17 = (v17 + 1) & v13;
      ++v20;
      v18 = (WTF **)(v24 + 8 * v17);
      result = *v18;
      if (!*v18)
      {
        if (v20 >= 0x80)
          *(_BYTE *)(a2 + 20) = 1;
        a1 = v37;
        goto LABEL_31;
      }
    }
    if (v20 >= 0x80)
      *(_BYTE *)(a2 + 20) = 1;
    v25 = *v18;
    *v18 = 0;
    v26 = *a3;
    if (*a3)
      *(_DWORD *)v26 += 2;
    *v18 = v26;
    for (i = v17 + 1; ; i = v28 + 1)
    {
      v28 = i & v13;
      v29 = (WTF **)(*(_QWORD *)a2 + 8 * (i & v13));
      result = *v29;
      if (!*v29)
        break;
      v30 = *((_DWORD *)result + 4);
      if (v30 < 0x100)
        v31 = WTF::StringImpl::hashSlowCase(result);
      else
        v31 = v30 >> 8;
      if (++v23 > ((v28 + v12 - ((v31 ^ v14) & v13)) & v13))
      {
        v32 = *v29;
        *v29 = v25;
        v25 = v32;
        v23 = (v28 + v12 - ((v31 ^ v14) & v13)) & v13;
      }
    }
    *v29 = v25;
    a1 = v37;
  }
  else
  {
LABEL_31:
    v33 = *a3;
    if (*a3)
      *(_DWORD *)v33 += 2;
    *v18 = v33;
  }
  ++*(_DWORD *)(a2 + 12);
  v24 = *(_QWORD *)a2;
  v34 = 1;
LABEL_35:
  v35 = v24 + 8 * *(unsigned int *)(a2 + 8);
  *(_QWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v35;
  *(_BYTE *)(a1 + 16) = v34;
  return result;
}

__n128 WTF::Vector<WTF::StringView,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::StringView&>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WTF::StringView,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<WTF::StringView,3ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      if (v10 < 4)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 3;
        goto LABEL_30;
      }
      if (!(v10 >> 28))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, 16 * v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x198970F68);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 4)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, 16 * v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

void WTF::Vector<char,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,unsigned char const>(uint64_t a1, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v7 = *(const void **)a1;
    v8 = *(unsigned int *)(a1 + 12);
    if (v5 < 0xD)
    {
      v9 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 12;
    }
    else
    {
      if (HIDWORD(v5))
      {
        __break(0xC471u);
        return;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)v5);
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
    }
    memcpy(v9, v7, v8);
    if ((const void *)(a1 + 16) != v7 && v7)
    {
      if (*(const void **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
  }
}

_BYTE *WTF::Vector<char,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>(uint64_t a1, unint64_t a2)
{
  _BYTE *result;

  result = (_BYTE *)WTF::Vector<char,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (WTF *)(*(unsigned int *)(a1 + 12) + 1), a2);
  *(_BYTE *)(*(_QWORD *)a1 + (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

uint64_t WTF::Vector<char,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, WTF *a2, unint64_t a3)
{
  unint64_t v3;
  const void *v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a3;
  v5 = *(const void **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      if (v10 < 0xD)
      {
        v11 = (void *)(a1 + 16);
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 12;
        goto LABEL_30;
      }
      if (!HIDWORD(v10))
      {
        v11 = (void *)WTF::fastMalloc((WTF *)v10);
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_30:
        memcpy(v11, v5, v6);
        if ((const void *)(a1 + 16) != v5 && v5)
        {
          if (*(const void **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v25, v26, v27, v28, v29, v30, v31);
        }
        return *(_QWORD *)a1 + v3 - (_QWORD)v5;
      }
LABEL_37:
      __break(0xC471u);
      JUMPOUT(0x198971218);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 0xD)
    {
      v17 = (void *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 12;
    }
    else
    {
      if (HIDWORD(v15))
        goto LABEL_37;
      v17 = (void *)WTF::fastMalloc((WTF *)v15);
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    memcpy(v17, v5, v16);
    if ((const void *)(a1 + 16) != v5 && v5)
    {
      if (*(const void **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    }
  }
  return v3;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlCollatorAvailableLocales(void)::$_0 &&>>()
{
  int v0;
  int v1;
  int i;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  double v11;
  double v12;
  float v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  JSC::intlCollatorAvailableLocales(void)::availableLocales = 0;
  unk_1ECF53D50 = 0;
  qword_1ECF53D58 = 0;
  v0 = ucol_countAvailable();
  if (v0 >= 1)
  {
    v1 = v0;
    for (i = 0; i != v1; ++i)
    {
      ucol_getAvailable();
      JSC::languageTagForLocaleID((const char *)1, &v23);
      v10 = v23;
      if (v23)
      {
        if (*((_DWORD *)v23 + 1))
        {
          WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&v22, (uint64_t)&JSC::intlCollatorAvailableLocales(void)::availableLocales, &v23, v5, v6, v7, v8, v9);
          JSC::addScriptlessLocaleIfNeeded((uint64_t)&JSC::intlCollatorAvailableLocales(void)::availableLocales, *((WTF **)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*((_DWORD *)v10 + 4) >> 2) & 1) << 32), v11, v12, v13);
        }
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::~StringImpl(v10, v3, v4, v5, v6, v7, v8, v9);
          WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
  }
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlSegmenterAvailableLocales(void)::$_0 &&>>()
{
  int v0;
  int v1;
  int i;
  WTF::AtomStringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  double v11;
  double v12;
  float v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;

  JSC::intlSegmenterAvailableLocales(void)::availableLocales = 0;
  *(_QWORD *)algn_1EE342FE8 = 0;
  qword_1EE342FF0 = 0;
  v0 = uloc_countAvailable();
  if (v0 >= 1)
  {
    v1 = v0;
    for (i = 0; i != v1; ++i)
    {
      uloc_getAvailable();
      JSC::languageTagForLocaleID((const char *)1, &v23);
      v10 = v23;
      if (v23)
      {
        if (*((_DWORD *)v23 + 1))
        {
          WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::add((uint64_t)&v22, (uint64_t)&JSC::intlSegmenterAvailableLocales(void)::availableLocales, &v23, v5, v6, v7, v8, v9);
          JSC::addScriptlessLocaleIfNeeded((uint64_t)&JSC::intlSegmenterAvailableLocales(void)::availableLocales, *((WTF **)v10 + 1), *((unsigned int *)v10 + 1) | ((unint64_t)((*((_DWORD *)v10 + 4) >> 2) & 1) << 32), v11, v12, v13);
        }
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::~StringImpl(v10, v3, v4, v5, v6, v7, v8, v9);
          WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
    }
  }
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::AtomStringImpl *,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, unsigned int a5@<W4>, int **a6@<X8>)
{
  int v9;
  int *v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  _WORD *v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  unsigned __int128 *v31;
  unsigned __int128 *v32;
  unsigned __int128 v33;
  char v34;
  _DWORD *v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20), &v35);
        v11 = v35;
        if (v35)
        {
          v12 = v35 + 5;
          *v35 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          if (a3)
          {
            v13 = *(_BYTE **)(a3 + 8);
            v14 = *(unsigned int *)(a3 + 4);
            if ((*(_BYTE *)(a3 + 16) & 4) != 0)
            {
              if ((_DWORD)v14 == 1)
              {
                *v12 = *v13;
              }
              else if ((_DWORD)v14)
              {
                memcpy(v11 + 5, v13, v14);
              }
            }
            else
            {
              if (v14 < 0x10)
              {
                v31 = (unsigned __int128 *)(v11 + 5);
              }
              else
              {
                v31 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
                v32 = (unsigned __int128 *)(v11 + 5);
                do
                {
                  v33 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *v32++ = v33;
                }
                while (v32 != v31);
              }
              while (v31 != (unsigned __int128 *)&v12[v14])
              {
                v34 = *v13;
                v13 += 2;
                *(_BYTE *)v31 = v34;
                v31 = (unsigned __int128 *)((char *)v31 + 1);
              }
            }
            v18 = *(unsigned int *)(a3 + 4);
          }
          else
          {
            v18 = 0;
          }
          result = (uint64_t)&v12[v18];
          if (a5 == 1)
          {
            *(_BYTE *)result = a4->i8[0];
          }
          else if (a5)
          {
            result = (uint64_t)memcpy((void *)result, a4, a5);
          }
        }
        goto LABEL_33;
      }
LABEL_36:
      v11 = 0;
      goto LABEL_33;
    }
LABEL_35:
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_33;
  }
  if (!(_DWORD)result)
    goto LABEL_35;
  if (result > 0x7FFFFFEF)
    goto LABEL_36;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20), &v35);
  v11 = v35;
  if (v35)
  {
    v15 = v35 + 5;
    *v35 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    if (a3)
    {
      v16 = *(int8x16_t **)(a3 + 8);
      v17 = *(unsigned int *)(a3 + 4);
      if ((*(_BYTE *)(a3 + 16) & 4) != 0)
      {
        v19 = (char *)&v15[v17];
        if (v17 >= 0x40)
        {
          v20 = (char *)&v15[v17 & 0xFFFFFFC0];
          v21 = 0uLL;
          v22 = (char *)(v11 + 5);
          do
          {
            v36.val[0] = *v16;
            v23 = v16[1];
            v37.val[0] = v16[2];
            v24 = v16[3];
            v16 += 4;
            v25 = v24;
            v37.val[1] = 0uLL;
            v38.val[0] = v23;
            v36.val[1] = 0uLL;
            v26 = v22;
            vst2q_s8(v26, v36);
            v26 += 32;
            v38.val[1] = 0uLL;
            vst2q_s8(v26, v38);
            v27 = v22 + 64;
            vst2q_s8(v27, v37);
            v28 = v22 + 96;
            vst2q_s8(v28, *(int8x16x2_t *)(&v21 - 1));
            v22 += 128;
          }
          while (v22 != v20);
        }
        else
        {
          v20 = (char *)(v11 + 5);
        }
        while (v20 != v19)
        {
          v29 = v16->u8[0];
          v16 = (int8x16_t *)((char *)v16 + 1);
          *(_WORD *)v20 = v29;
          v20 += 2;
        }
      }
      else if ((_DWORD)v17 == 1)
      {
        *v15 = v16->i16[0];
      }
      else if ((_DWORD)v17)
      {
        memcpy(v11 + 5, v16, 2 * v17);
      }
      v30 = *(unsigned int *)(a3 + 4);
    }
    else
    {
      v30 = 0;
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>((char *)&v15[v30], a4, a5);
  }
LABEL_33:
  *a6 = v11;
  return result;
}

WTF **WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  WTF **v12;
  WTF *v13;
  int v14;
  unsigned int v15;
  int v16;

  v3 = *a1;
  if (*a1)
  {
    v6 = *((_DWORD *)a1 + 2);
    v7 = v6 - 1;
    v8 = *((_DWORD *)a1 + 4);
    v9 = *((_DWORD *)*a2 + 4);
    if (v9 < 0x100)
    {
      v10 = WTF::StringImpl::hashSlowCase(*a2);
      v3 = *a1;
    }
    else
    {
      v10 = v9 >> 8;
    }
    v11 = (v10 ^ v8) & v7;
    v12 = (WTF **)(v3 + 8 * v11);
    v13 = *v12;
    if (*v12)
    {
      v14 = -1;
      do
      {
        v15 = *((_DWORD *)v13 + 4);
        v16 = v15 < 0x100 ? WTF::StringImpl::hashSlowCase(v13) : v15 >> 8;
        if (++v14 > ((v11 + v6 - ((v16 ^ v8) & v7)) & v7))
          break;
        if (v16 == v10 && WTF::equal(*v12, *a2, a3))
          return v12;
        v11 = (v11 + 1) & v7;
        v12 = (WTF **)(*a1 + 8 * v11);
        v13 = *v12;
      }
      while (*v12);
    }
  }
  return 0;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::defaultLocale(JSC::JSGlobalObject *)::$_0 &&>>()
{
  uint64_t v0;

  MEMORY[0x19AEBC534]();
  JSC::languageTagForLocaleID((const char *)1, &v0);
  _MergedGlobals_43 = v0;
}

uint64_t std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::numberingSystemsForLocale(WTF::String const&)::$_0 &&>>()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t result;
  WTF::AtomStringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  _BYTE *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  int v29;

  qword_1ECF58EE0 = 0;
  *(_QWORD *)&dword_1ECF58EE8 = 0;
  v29 = 0;
  unumsys_openAvailableNames();
  v28 = 0;
  v0 = uenum_next();
  if (!v0)
    return uenum_close();
  v1 = (_BYTE *)v0;
  while (1)
  {
    v2 = unumsys_openByName();
    result = MEMORY[0x19AEBC6F0](v2);
    if (!(_DWORD)result)
      break;
LABEL_16:
    unumsys_close();
    v1 = (_BYTE *)uenum_next();
    if (!v1)
      return uenum_close();
  }
  v11 = v28;
  if (!v28)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v12 = &WTF::StringImpl::s_emptyAtomString;
LABEL_11:
    v27 = (WTF::StringImpl *)v12;
    LODWORD(v14) = dword_1ECF58EEC;
    if (dword_1ECF58EEC == dword_1ECF58EE8)
    {
      v24 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&qword_1ECF58EE0, dword_1ECF58EEC + 1, (unint64_t)&v27);
      v14 = dword_1ECF58EEC;
      v25 = qword_1ECF58EE0;
      v26 = *v24;
      *v24 = 0;
      *(_QWORD *)(v25 + 8 * v14) = v26;
    }
    else
    {
      v27 = 0;
      *(_QWORD *)(qword_1ECF58EE0 + 8 * dword_1ECF58EEC) = v12;
    }
    dword_1ECF58EEC = v14 + 1;
    v15 = v27;
    v27 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
      {
        WTF::StringImpl::~StringImpl(v15, v4, v5, v6, v7, v8, v9, v10);
        WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
      }
      else
      {
        *(_DWORD *)v15 -= 2;
      }
    }
    goto LABEL_16;
  }
  if ((v28 & 0x80000000) == 0)
  {
    v12 = (int *)WTF::fastCompactMalloc((WTF *)(v28 + 20));
    v13 = v12 + 5;
    *v12 = 2;
    v12[1] = v11;
    *((_QWORD *)v12 + 1) = v12 + 5;
    v12[4] = 4;
    if (v11 == 1)
      *v13 = *v1;
    else
      memcpy(v13, v1, v11);
    WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v12);
    *v12 |= 1u;
    goto LABEL_11;
  }
  __break(0xC471u);
  return result;
}

_QWORD *WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::add(_QWORD *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v10 = result;
  v11 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a3;
  v15 = *a3 + ~(*a3 << 32);
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (_QWORD *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v11 - 4);
        v31 = 0;
        v32 = v11 + 8 * v25;
        goto LABEL_32;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (_QWORD *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
      goto LABEL_23;
  }
  else if (3 * v29 <= 4 * v28)
  {
    if (!(_DWORD)v29)
    {
      v30 = 8;
LABEL_28:
      result = WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(a2, v30, (uint64_t)v19, a4, a5, a6, a7, a8);
      v19 = result;
      v26 = *a2;
      if (*a2)
        v29 = *(unsigned int *)(v26 - 4);
      else
        v29 = 0;
      goto LABEL_31;
    }
LABEL_23:
    v30 = ((_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29)));
    goto LABEL_28;
  }
LABEL_31:
  v32 = v26 + 8 * v29;
  v31 = 1;
LABEL_32:
  *v10 = v19;
  v10[1] = v32;
  *((_BYTE *)v10 + 16) = v31;
  return result;
}

_QWORD *WTF::HashTable<unsigned long long,unsigned long long,WTF::IdentityExtractor,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (!v12)
  {
    v23 = 0;
    if (!v11)
      return v23;
    goto LABEL_16;
  }
  v22 = 0;
  v23 = 0;
  do
  {
    v24 = (uint64_t *)(v11 + 8 * v22);
    v25 = *v24;
    if ((unint64_t)(*v24 + 1) >= 2)
    {
      v26 = *a1;
      if (*a1)
        v27 = *(_DWORD *)(v26 - 8);
      else
        v27 = 0;
      v28 = (v25 + ~(v25 << 32)) ^ ((unint64_t)(v25 + ~(v25 << 32)) >> 22);
      v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
      v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
      v31 = v27 & ((v30 >> 31) ^ v30);
      v32 = 1;
      do
      {
        v33 = v31;
        v34 = *(_QWORD *)(v26 + 8 * v31);
        v31 = (v31 + v32++) & v27;
      }
      while (v34);
      v35 = (_QWORD *)(v26 + 8 * v33);
      *v35 = v25;
      if (v24 == (uint64_t *)a3)
        v23 = v35;
    }
    ++v22;
  }
  while (v22 != v12);
  if (v11)
LABEL_16:
    WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableCalendars(void)::$_0 &&>>()
{
  uint64_t KeywordValuesForLocale;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  int *v12;
  _BYTE *v13;
  const char *v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _BYTE *v20;
  size_t v21;
  unint64_t v22;
  const WTF::StringImpl **v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::AtomStringImpl *v41;
  const WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;

  KeywordValuesForLocale = ucal_getKeywordValuesForLocale();
  v1 = uenum_count();
  JSC::intlAvailableCalendars(void)::availableCalendars = 0;
  *(_QWORD *)&dword_1EE343008 = 0;
  if (!v1)
  {
    v41 = 0;
    v23 = 0;
    goto LABEL_43;
  }
  v6 = v1;
  if (v1 >> 29)
  {
    __break(0xC471u);
    JUMPOUT(0x198971FE8);
  }
  v7 = v1;
  v8 = WTF::fastMalloc((WTF *)(8 * v1));
  dword_1EE343008 = v6;
  JSC::intlAvailableCalendars(void)::availableCalendars = v8;
  do
  {
    v44 = 0;
    v9 = uenum_next();
    if (v9)
    {
      v10 = v44;
      if (v44)
      {
        if (v44 < 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198971FF0);
        }
        v11 = (_BYTE *)v9;
        v12 = (int *)WTF::fastCompactMalloc((WTF *)(v44 + 20));
        v13 = v12 + 5;
        *v12 = 2;
        v12[1] = v10;
        *((_QWORD *)v12 + 1) = v12 + 5;
        v12[4] = 4;
        if (v10 == 1)
          *v13 = *v11;
        else
          memcpy(v13, v11, v10);
      }
      else
      {
        WTF::StringImpl::s_emptyAtomString += 2;
        v12 = &WTF::StringImpl::s_emptyAtomString;
      }
    }
    else
    {
      v12 = 0;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v12, (unint64_t)"gregorian", 9))
    {
      v14 = "gregory";
      goto LABEL_16;
    }
    if (WTF::equalInternal<unsigned char>((uint64_t)v12, (unint64_t)"ethiopic-amete-alem", 19))
    {
      v14 = "ethioaa";
LABEL_16:
      v18 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v18 = 2;
      *(_DWORD *)(v18 + 4) = 7;
      *(_QWORD *)(v18 + 8) = v14;
      *(_DWORD *)(v18 + 16) = 4;
      v19 = (int *)WTF::fastCompactMalloc((WTF *)0x1B);
      *v19 = 2;
      v19[1] = 7;
      *((_QWORD *)v19 + 1) = v19 + 5;
      v19[4] = 4;
      v43 = (WTF::StringImpl *)v19;
      memcpy(v19 + 5, v14, 7uLL);
      WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v19);
      *v19 |= 1u;
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v18, v15, v16, v17, v2, v3, v4, v5);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v18 -= 2;
      }
LABEL_24:
      if (!v12)
        goto LABEL_27;
      goto LABEL_25;
    }
    if (!v12)
      goto LABEL_35;
    v20 = (_BYTE *)*((_QWORD *)v12 + 1);
    v21 = v12[1];
    if ((v12[4] & 4) != 0)
    {
      if (!(_DWORD)v21)
      {
LABEL_35:
        WTF::StringImpl::s_emptyAtomString += 2;
        v19 = &WTF::StringImpl::s_emptyAtomString;
        goto LABEL_24;
      }
      if ((v21 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198971FF8);
      }
      v19 = (int *)WTF::fastCompactMalloc((WTF *)(v21 + 20));
      v32 = v19 + 5;
      *v19 = 2;
      v19[1] = v21;
      *((_QWORD *)v19 + 1) = v19 + 5;
      v19[4] = 4;
      v43 = (WTF::StringImpl *)v19;
      if ((_DWORD)v21 == 1)
        *v32 = *v20;
      else
        memcpy(v32, v20, v21);
LABEL_38:
      WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v19);
      goto LABEL_39;
    }
    if (!(_DWORD)v21)
    {
      WTF::StringImpl::s_emptyAtomString += 2;
      v19 = &WTF::StringImpl::s_emptyAtomString;
      goto LABEL_25;
    }
    WTF::StringImpl::create8BitIfPossible(*((_WORD **)v12 + 1), v12[1], (uint64_t *)&v43);
    v19 = (int *)v43;
    if (*((_DWORD *)v43 + 4) <= 0xFFu)
      goto LABEL_38;
LABEL_39:
    *v19 |= 1u;
LABEL_25:
    if (*v12 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v15, v16, v17, v2, v3, v4, v5);
      WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
    }
    else
    {
      *v12 -= 2;
    }
LABEL_27:
    v22 = (dword_1EE34300C + 1);
    v23 = (const WTF::StringImpl **)JSC::intlAvailableCalendars(void)::availableCalendars;
    *(_QWORD *)(JSC::intlAvailableCalendars(void)::availableCalendars + 8 * dword_1EE34300C) = v19;
    dword_1EE34300C = v22;
    --v7;
  }
  while (v7);
  v41 = (WTF::AtomStringImpl *)&v23[v22];
  if ((_DWORD)v22)
  {
    v42 = (const WTF::StringImpl *)(126 - 2 * __clz(v22));
    goto LABEL_44;
  }
LABEL_43:
  v42 = 0;
LABEL_44:
  std::__introsort<std::_ClassicAlgPolicy,JSC::intlAvailableCalendars(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*,false>(v23, v41, v42, 1, v2, v3, v4, v5);
  if (KeywordValuesForLocale)
    uenum_close();
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::intlAvailableCalendars(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*,false>(const WTF::StringImpl **a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::StringImpl *v8;
  const WTF::StringImpl **v9;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const WTF::StringImpl **v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  WTF **v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const WTF::StringImpl **v29;
  const WTF::StringImpl **v30;
  WTF *v31;
  WTF *v32;
  const WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  WTF **v35;
  const WTF::StringImpl **v36;
  WTF *v37;
  WTF **v38;
  WTF *v39;
  WTF *v40;
  const WTF::StringImpl **v41;
  const WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  BOOL v45;
  const WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  const WTF::StringImpl **v64;
  const WTF::StringImpl *v65;
  const WTF::StringImpl **v66;
  const WTF::StringImpl *v67;
  const WTF::StringImpl *v68;
  const WTF::StringImpl **v69;
  const WTF::StringImpl *v70;
  const WTF::StringImpl *v71;
  WTF **v72;
  const WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const WTF::StringImpl *v92;
  WTF **v93;
  const WTF::StringImpl *v94;
  const WTF::StringImpl *v95;
  WTF *v96;
  const WTF::StringImpl *v97;
  WTF *v98;
  const WTF::StringImpl *v99;
  const WTF::StringImpl *v100;
  WTF **v101;
  BOOL v103;
  uint64_t v104;
  const WTF::StringImpl **v105;
  WTF *v106;
  const WTF::StringImpl *v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF *v115;
  uint64_t i;
  WTF::StringImpl **v117;
  WTF::StringImpl *v118;
  WTF::StringImpl **v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  int64_t v138;
  uint64_t v139;
  WTF **v140;
  const WTF::StringImpl **v141;
  const WTF::StringImpl *v142;
  WTF::StringImpl **v143;
  WTF *v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const WTF::StringImpl *v167;
  WTF **v168;
  WTF::StringImpl **v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  WTF::StringImpl *v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  unint64_t v186;
  WTF **v187;
  const WTF::StringImpl *v188;
  WTF::StringImpl **v189;
  WTF *v190;
  WTF *v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::AtomStringImpl *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl *v235;
  WTF *v236;
  const WTF::StringImpl **v237;
  const WTF::StringImpl *v238;
  uint64_t v239;
  WTF::StringImpl **v240;
  int v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const WTF::StringImpl *v258;
  int64_t v259;
  char v260;
  int64_t v261;

  v260 = a4;
  v8 = a3;
  v9 = (const WTF::StringImpl **)a2;
LABEL_2:
  v11 = (const WTF::StringImpl *)(v9 - 1);
  v12 = (const WTF::StringImpl *)(v9 - 2);
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (char *)v9 - (char *)v13;
    v15 = v9 - v13;
    switch(v15)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((WTF::codePointCompare(*(v9 - 1), *a1, a3) & 0x80000000) != 0)
        {
          v92 = *a1;
          *a1 = *(v9 - 1);
          *(v9 - 1) = v92;
        }
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, v11);
        return;
      case 4:
        v93 = a1 + 2;
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
        if ((WTF::codePointCompare(*(v9 - 1), a1[2], v94) & 0x80000000) != 0)
        {
          v96 = *v93;
          *v93 = *(v9 - 1);
          *(v9 - 1) = v96;
          if ((WTF::codePointCompare(*v93, a1[1], v95) & 0x80000000) != 0)
          {
            v99 = a1[1];
            v98 = a1[2];
            v100 = *a1;
            a1[1] = v98;
            a1[2] = v99;
            if ((WTF::codePointCompare(v98, v100, v97) & 0x80000000) != 0)
              *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          }
        }
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,0>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3, (WTF **)v11);
        return;
      default:
        if (v14 > 191)
        {
          if (!v8)
          {
            if (a1 == v9)
              return;
            v137 = (unint64_t)(v15 - 2) >> 1;
            v261 = v137;
            do
            {
              v138 = v137;
              if (v261 >= v137)
              {
                v139 = (2 * v137) | 1;
                v140 = &a1[v139];
                if (2 * v137 + 2 < v15 && (int)WTF::codePointCompare(*v140, v140[1], a3) < 0)
                {
                  ++v140;
                  v139 = 2 * v138 + 2;
                }
                v141 = &a1[v138];
                if ((WTF::codePointCompare(*v140, *v141, a3) & 0x80000000) == 0)
                {
                  v259 = v138;
                  v142 = *v141;
                  *v141 = 0;
                  do
                  {
                    v143 = v140;
                    v144 = *v140;
                    *v140 = 0;
                    v145 = *v141;
                    *v141 = v144;
                    if (v145)
                    {
                      if (*(_DWORD *)v145 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v145, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
                      }
                      else
                      {
                        *(_DWORD *)v145 -= 2;
                      }
                    }
                    if (v261 < v139)
                      break;
                    v146 = (2 * v139) | 1;
                    v140 = &a1[v146];
                    v147 = 2 * v139 + 2;
                    if (v147 < v15 && (int)WTF::codePointCompare(*v140, v140[1], a3) < 0)
                    {
                      ++v140;
                      v146 = v147;
                    }
                    v141 = v143;
                    v139 = v146;
                  }
                  while ((WTF::codePointCompare(*v140, v142, a3) & 0x80000000) == 0);
                  v156 = *v143;
                  *v143 = v142;
                  v138 = v259;
                  if (v156)
                  {
                    if (*(_DWORD *)v156 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v156, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
                    }
                    else
                    {
                      *(_DWORD *)v156 -= 2;
                    }
                  }
                }
              }
              v137 = v138 - 1;
            }
            while (v138);
            v165 = (unint64_t)v14 >> 3;
            while (1)
            {
              v166 = 0;
              v167 = *a1;
              *a1 = 0;
              v168 = a1;
              do
              {
                v169 = v168;
                v168 += v166 + 1;
                v170 = 2 * v166;
                v166 = (2 * v166) | 1;
                v171 = v170 + 2;
                if (v170 + 2 < v165 && (int)WTF::codePointCompare(*v168, v168[1], a3) < 0)
                {
                  ++v168;
                  v166 = v171;
                }
                v172 = *v168;
                *v168 = 0;
                v173 = *v169;
                *v169 = v172;
                if (v173)
                {
                  if (*(_DWORD *)v173 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v173, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
                  }
                  else
                  {
                    *(_DWORD *)v173 -= 2;
                  }
                }
              }
              while (v166 <= (uint64_t)((unint64_t)(v165 - 2) >> 1));
              if (v168 == --v9)
              {
                v200 = *v168;
                *v168 = v167;
                if (!v200)
                  goto LABEL_165;
                goto LABEL_163;
              }
              v182 = *v9;
              *v9 = 0;
              v183 = *v168;
              *v168 = v182;
              if (v183)
              {
                if (*(_DWORD *)v183 == 2)
                {
                  WTF::StringImpl::~StringImpl(v183, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
                }
                else
                {
                  *(_DWORD *)v183 -= 2;
                }
              }
              v184 = *v9;
              *v9 = v167;
              if (v184)
              {
                if (*(_DWORD *)v184 == 2)
                {
                  WTF::StringImpl::~StringImpl(v184, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
                }
                else
                {
                  *(_DWORD *)v184 -= 2;
                }
              }
              v185 = (char *)(v168 + 1) - (char *)a1;
              if (v185 >= 9)
              {
                v186 = (((unint64_t)v185 >> 3) - 2) >> 1;
                v187 = &a1[v186];
                if ((WTF::codePointCompare(*v187, *v168, a3) & 0x80000000) != 0)
                  break;
              }
LABEL_165:
              if (v165-- <= 2)
                return;
            }
            v188 = *v168;
            *v168 = 0;
            while (1)
            {
              v189 = v187;
              v190 = *v187;
              *v187 = 0;
              v191 = *v168;
              *v168 = v190;
              if (!v191)
                goto LABEL_156;
              if (*(_DWORD *)v191 != 2)
                break;
              WTF::StringImpl::~StringImpl(v191, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
              if (!v186)
              {
LABEL_160:
                v200 = *v189;
                *v189 = v188;
                if (!v200)
                  goto LABEL_165;
LABEL_163:
                if (*(_DWORD *)v200 == 2)
                {
                  WTF::StringImpl::~StringImpl(v200, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
                }
                else
                {
                  *(_DWORD *)v200 -= 2;
                }
                goto LABEL_165;
              }
LABEL_157:
              v186 = (v186 - 1) >> 1;
              v187 = &a1[v186];
              v168 = v189;
              if ((WTF::codePointCompare(*v187, v188, a3) & 0x80000000) == 0)
                goto LABEL_160;
            }
            *(_DWORD *)v191 -= 2;
LABEL_156:
            if (!v186)
              goto LABEL_160;
            goto LABEL_157;
          }
          v16 = (unint64_t)v15 >> 1;
          v17 = &a1[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v17, a1, v11);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, v17, v11);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1 + 1, v17 - 1, v12);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1 + 2, &a1[v16 + 1], (const WTF::StringImpl *)(v9 - 3));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v17 - 1, v17, (const WTF::StringImpl *)&a1[v16 + 1]);
            v19 = *a1;
            *a1 = *v17;
            *v17 = v19;
          }
          v8 = (const WTF::StringImpl *)((char *)v8 - 1);
          if ((v260 & 1) == 0 && (WTF::codePointCompare(*(a1 - 1), *a1, v18) & 0x80000000) == 0)
          {
            v63 = *a1;
            *a1 = 0;
            v64 = a1 + 1;
            if ((WTF::codePointCompare(v63, *(const WTF::StringImpl **)v11, v18) & 0x80000000) != 0)
            {
              do
              {
                if (v64 == v9)
                  goto LABEL_189;
                v65 = *v64++;
              }
              while ((WTF::codePointCompare(v63, v65, a3) & 0x80000000) == 0);
              v13 = v64 - 1;
            }
            else
            {
              do
              {
                v13 = v64;
                if (v64 >= v9)
                  break;
                ++v64;
              }
              while ((WTF::codePointCompare(v63, *v13, a3) & 0x80000000) == 0);
            }
            v66 = v9;
            if (v13 < v9)
            {
              v66 = v9;
              while (v66 != a1)
              {
                v67 = *--v66;
                if ((WTF::codePointCompare(v63, v67, a3) & 0x80000000) == 0)
                  goto LABEL_63;
              }
              goto LABEL_189;
            }
LABEL_63:
            if (v13 < v66)
            {
              v68 = *v13;
              *v13 = *v66;
              v69 = v13 + 1;
              *v66 = v68;
              while (v69 != v9)
              {
                v70 = *v69++;
                if ((WTF::codePointCompare(v63, v70, a3) & 0x80000000) != 0)
                {
                  v13 = v69 - 1;
                  while (v66 != a1)
                  {
                    v71 = *--v66;
                    if ((WTF::codePointCompare(v63, v71, a3) & 0x80000000) == 0)
                      goto LABEL_63;
                  }
                  goto LABEL_189;
                }
              }
              goto LABEL_189;
            }
            v72 = v13 - 1;
            if (v13 - 1 != a1)
            {
              v73 = *v72;
              *v72 = 0;
              v74 = *a1;
              *a1 = v73;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                {
                  WTF::StringImpl::~StringImpl(v74, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                }
                else
                {
                  *(_DWORD *)v74 -= 2;
                }
              }
            }
            v260 = 0;
            v75 = *v72;
            *v72 = v63;
            if (v75)
            {
              if (*(_DWORD *)v75 == 2)
              {
                WTF::StringImpl::~StringImpl(v75, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
                v260 = 0;
              }
              else
              {
                v260 = 0;
                *(_DWORD *)v75 -= 2;
              }
            }
            continue;
          }
          v20 = 0;
          v21 = *a1;
          *a1 = 0;
          do
          {
            v22 = &a1[v20 + 1];
            if (v22 == v9)
              goto LABEL_189;
            ++v20;
          }
          while ((WTF::codePointCompare(*v22, v21, v18) & 0x80000000) != 0);
          v29 = &a1[v20];
          v30 = v9;
          if (v20 != 1)
          {
            while (v30 != a1)
            {
              v31 = *--v30;
              if ((WTF::codePointCompare(v31, v21, v18) & 0x80000000) != 0)
                goto LABEL_21;
            }
LABEL_189:
            __break(1u);
            return;
          }
          v30 = v9;
          do
          {
            if (v29 >= v30)
              break;
            v32 = *--v30;
          }
          while ((WTF::codePointCompare(v32, v21, v18) & 0x80000000) == 0);
LABEL_21:
          if (v29 >= v30)
          {
            v41 = v29 - 1;
          }
          else
          {
            v258 = v8;
            v33 = v12;
            v34 = v11;
            v35 = &a1[v20];
            v36 = v30;
            do
            {
              v37 = *v35;
              *v35 = *v36;
              *v36 = v37;
              v38 = v35 + 1;
              do
              {
                if (v38 == v9)
                  goto LABEL_189;
                v39 = *v38++;
              }
              while ((WTF::codePointCompare(v39, v21, v18) & 0x80000000) != 0);
              v35 = v38 - 1;
              do
              {
                if (v36 == a1)
                  goto LABEL_189;
                v40 = *--v36;
              }
              while ((WTF::codePointCompare(v40, v21, v18) & 0x80000000) == 0);
            }
            while (v35 < v36);
            v41 = v38 - 2;
            v11 = v34;
            v12 = v33;
            v8 = v258;
          }
          if (v41 != a1)
          {
            v42 = *v41;
            *v41 = 0;
            v43 = *a1;
            *a1 = v42;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
              {
                WTF::StringImpl::~StringImpl(v43, v23, (uint64_t)v18, v24, v25, v26, v27, v28);
                WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
              }
              else
              {
                *(_DWORD *)v43 -= 2;
              }
            }
          }
          v44 = *v41;
          *v41 = v21;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::~StringImpl(v44, v23, (uint64_t)v18, v24, v25, v26, v27, v28);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_DWORD *)v44 -= 2;
            }
          }
          if (v29 < v30)
          {
LABEL_42:
            std::__introsort<std::_ClassicAlgPolicy,JSC::intlAvailableCalendars(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*,false>(a1, v41, v8, v260 & 1);
            v260 = 0;
            v13 = v41 + 1;
            continue;
          }
          v45 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::intlAvailableCalendars(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*>(a1, v41, v18);
          v13 = v41 + 1;
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::intlAvailableCalendars(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*>(v41 + 1, v9, v46))
          {
            if (v45)
              continue;
            goto LABEL_42;
          }
          v9 = v41;
          if (v45)
            return;
          goto LABEL_2;
        }
        v101 = a1 + 1;
        v103 = a1 == v9 || v101 == v9;
        if ((v260 & 1) == 0)
        {
          if (v103)
            return;
          v226 = 0;
          v227 = 1;
          while (1)
          {
            v228 = v226;
            v226 = v227;
            if ((WTF::codePointCompare(*v101, a1[v228], a3) & 0x80000000) != 0)
            {
              v235 = 0;
              v236 = *v101;
              *v101 = 0;
              do
              {
                v237 = &a1[v228];
                v238 = *v237;
                *v237 = 0;
                v237[1] = v238;
                if (v235)
                {
                  if (*(_DWORD *)v235 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v235, v229, (uint64_t)a3, v230, v231, v232, v233, v234);
                    WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
                  }
                  else
                  {
                    *(_DWORD *)v235 -= 2;
                  }
                }
                if (v228 == -1)
                  goto LABEL_189;
                v239 = v228 - 1;
                v240 = &a1[v228];
                v241 = WTF::codePointCompare(v236, *(v240 - 1), a3);
                v235 = *v240;
                v228 = v239;
              }
              while (v241 < 0);
              a1[v239 + 1] = v236;
              if (v235)
              {
                if (*(_DWORD *)v235 == 2)
                {
                  WTF::StringImpl::~StringImpl(v235, v229, (uint64_t)a3, v230, v231, v232, v233, v234);
                  WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
                }
                else
                {
                  *(_DWORD *)v235 -= 2;
                }
              }
            }
            v227 = v226 + 1;
            v101 = &a1[v226 + 1];
            if (v101 == v9)
              return;
          }
        }
        if (v103)
          return;
        v104 = 0;
        v105 = a1;
        do
        {
          v107 = *v105;
          v106 = v105[1];
          v105 = v101;
          if ((WTF::codePointCompare(v106, v107, a3) & 0x80000000) == 0)
            goto LABEL_106;
          v114 = 0;
          v115 = *v101;
          *v101 = 0;
          for (i = v104; ; i -= 8)
          {
            v117 = (const WTF::StringImpl **)((char *)a1 + i);
            v118 = *(const WTF::StringImpl **)((char *)a1 + i);
            *v117 = 0;
            v117[1] = v118;
            if (!v114)
              goto LABEL_98;
            if (*(_DWORD *)v114 == 2)
              break;
            *(_DWORD *)v114 -= 2;
LABEL_98:
            if (!i)
              goto LABEL_102;
LABEL_99:
            v119 = (const WTF::StringImpl **)((char *)a1 + i);
            if ((WTF::codePointCompare(v115, *(const WTF::StringImpl **)((char *)a1 + i - 8), a3) & 0x80000000) == 0)
              goto LABEL_103;
            v114 = *v117;
          }
          WTF::StringImpl::~StringImpl(v114, v108, (uint64_t)a3, v109, v110, v111, v112, v113);
          WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
          if (i)
            goto LABEL_99;
LABEL_102:
          v119 = a1;
LABEL_103:
          v128 = *v119;
          *v119 = v115;
          if (v128)
          {
            if (*(_DWORD *)v128 == 2)
            {
              WTF::StringImpl::~StringImpl(v128, v108, (uint64_t)a3, v109, v110, v111, v112, v113);
              WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
            }
            else
            {
              *(_DWORD *)v128 -= 2;
            }
          }
LABEL_106:
          v101 = v105 + 1;
          v104 += 8;
        }
        while (v105 + 1 != v9);
        return;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::intlAvailableCalendars(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*>(const WTF::StringImpl **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _BOOL8 result;
  const WTF::StringImpl *v7;
  const WTF::StringImpl **v8;
  const WTF::StringImpl *v9;
  WTF **v10;
  uint64_t v11;
  int v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t i;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  const WTF::StringImpl *v43;
  const WTF::StringImpl *v44;
  WTF *v45;
  const WTF::StringImpl *v46;
  WTF *v47;
  const WTF::StringImpl *v48;
  const WTF::StringImpl *v49;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((WTF::codePointCompare(*(a2 - 1), *a1, a3) & 0x80000000) != 0)
      {
        v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a2 - 1));
      return 1;
    case 4:
      v42 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      if ((WTF::codePointCompare(*(a2 - 1), a1[2], v43) & 0x80000000) != 0)
      {
        v45 = *v42;
        *v42 = *(a2 - 1);
        *(a2 - 1) = v45;
        if ((WTF::codePointCompare(*v42, a1[1], v44) & 0x80000000) != 0)
        {
          v48 = a1[1];
          v47 = a1[2];
          v49 = *a1;
          a1[1] = v47;
          a1[2] = v48;
          if ((WTF::codePointCompare(v47, v49, v46) & 0x80000000) != 0)
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,0>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((WTF::codePointCompare(*v10, *v8, v9) & 0x80000000) != 0)
    {
      v19 = 0;
      v20 = *v10;
      *v10 = 0;
      for (i = v11; ; i -= 8)
      {
        v22 = (char *)a1 + i;
        v23 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v22 + 2) = 0;
        *((_QWORD *)v22 + 3) = v23;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::~StringImpl(v19, v13, (uint64_t)v9, v14, v15, v16, v17, v18);
            WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
          }
          else
          {
            *(_DWORD *)v19 -= 2;
          }
        }
        if (i == -16)
        {
          v32 = a1;
          goto LABEL_17;
        }
        if ((WTF::codePointCompare(v20, *(const WTF::StringImpl **)((char *)a1 + i + 8), v9) & 0x80000000) == 0)
          break;
        v19 = (WTF::StringImpl *)*((_QWORD *)v22 + 2);
      }
      v32 = (const WTF::StringImpl **)((char *)a1 + i + 16);
LABEL_17:
      v33 = *v32;
      *v32 = v20;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v13, (uint64_t)v9, v14, v15, v16, v17, v18);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v8 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

BOOL std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::iso8601CalendarIDSlow(void)::$_0 &&>>()
{
  unint64_t v0;
  uint64_t v1;
  _BOOL8 result;
  char v3;
  char **v4;
  char *v5;

  v0 = atomic_load(&JSC::intlAvailableCalendars(void)::initializeOnce);
  if (v0 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&JSC::intlAvailableCalendars(void)::initializeOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableCalendars(void)::$_0 &&>>);
  }
  if (!dword_1EE34300C)
  {
LABEL_7:
    __break(0xC471u);
    JUMPOUT(0x198972CE0);
  }
  v1 = 0;
  while (1)
  {
    result = WTF::equalInternal<unsigned char>(*(_QWORD *)(JSC::intlAvailableCalendars(void)::availableCalendars + 8 * v1), (unint64_t)"iso8601", 7);
    if (result)
      break;
    if (++v1 >= (unint64_t)dword_1EE34300C)
      goto LABEL_7;
  }
  JSC::iso8601CalendarIDStorage = v1;
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlAvailableTimeZones(void)::$_0 &&>>()
{
  uint64_t v0;
  unsigned int v1;
  StringView v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  StringView v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  BOOL v23;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  int v45;
  uint64_t v46;
  int v47;
  WTF *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  int16x8_t *v63;
  int16x8_t v64;
  int8x16_t v65;
  int16x8_t *v66;
  char *v67;
  int16x8_t v68;
  const WTF::StringImpl **v69;
  WTF::AtomStringImpl *v70;
  const WTF::StringImpl *v71;
  const WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  WTF *v79;
  const WTF::StringImpl **v80;
  uint64_t v81;
  WTF *v82;
  const WTF::StringImpl *v83;
  BOOL v84;
  uint64_t v85;
  WTF **v86;
  WTF *v87;
  const WTF::StringImpl *v88;
  BOOL v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  int64_t v101;
  uint64_t v102;
  unint64_t v103;
  WTF *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  size_t v109;
  int *v110;
  _BYTE *v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  WTF *v119;
  WTF *v120;
  WTF *v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF *v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  WTF *v144;
  uint64_t v145;
  int v146;
  WTF *v147;
  uint64_t v148;
  WTF::StringImpl *v149;
  StringView v150;
  StringView v151;

  v147 = 0;
  v148 = 0;
  v146 = 0;
  v0 = ucal_openTimeZoneIDEnumeration();
  v1 = uenum_count();
  v143 = v0;
  if (!v1)
  {
    v70 = 0;
    v69 = 0;
    goto LABEL_157;
  }
  v6 = v1;
  if (v1 >> 29)
  {
    __break(0xC471u);
LABEL_232:
    __break(1u);
    goto LABEL_233;
  }
  v7 = 0;
  LODWORD(v148) = v1;
  v147 = (WTF *)WTF::fastMalloc((WTF *)(8 * (int)v1));
  do
  {
    LODWORD(v149) = 0;
    v9 = (char *)uenum_next();
    if (v9)
    {
      v10 = v149;
      if ((_DWORD)v149)
      {
        if ((v149 & 0x80000000) != 0)
          goto LABEL_233;
        v11 = WTF::fastCompactMalloc((WTF *)((int)v149 + 20));
        v12 = (int *)v11;
        v13 = (char *)(v11 + 20);
        *(_DWORD *)v11 = 2;
        *(_DWORD *)(v11 + 4) = v10;
        *(_QWORD *)(v11 + 8) = v11 + 20;
        *(_DWORD *)(v11 + 16) = 4;
        if (v10 == 1)
        {
          *v13 = *v9;
          v14 = 4;
          v10 = 1;
        }
        else
        {
          memcpy((void *)(v11 + 20), v9, (int)v10);
          v14 = 4;
        }
      }
      else
      {
        v10 = dword_1ECF2C424;
        WTF::StringImpl::s_emptyAtomString += 2;
        v14 = dword_1ECF2C430;
        v13 = (char *)off_1ECF2C428;
        v12 = &WTF::StringImpl::s_emptyAtomString;
      }
      v15 = (v14 >> 2) & 1;
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v10 = 0;
      v15 = 1;
    }
    v16 = v10;
    LODWORD(v150.m_characters) = v10;
    HIDWORD(v150.m_characters) = v15;
    *(_QWORD *)&v150.m_length = "SystemV/";
    v8.m_characters = (void *)0x100000008;
    if ((WTF::startsWith((int8x16_t *)v13, v150, v8) & 1) != 0)
    {
LABEL_77:
      v0 = v143;
      goto LABEL_78;
    }
    LODWORD(v151.m_characters) = v10;
    HIDWORD(v151.m_characters) = v15;
    *(_QWORD *)&v151.m_length = "Etc/";
    v2.m_characters = (void *)0x100000004;
    if (!WTF::startsWith((int8x16_t *)v13, v151, v2))
    {
      if (v15)
      {
        if (v10)
        {
          v20 = 16;
          if (v10 < 0x10uLL)
            v20 = v10;
          v21 = v20;
          v22 = v13;
          do
          {
            if (*v22 == 47)
              goto LABEL_61;
            ++v22;
            --v21;
          }
          while (v21);
          if (v10 < 0x11)
            goto LABEL_30;
          v22 = memchr(&v13[v20], 47, v10 - v20);
          if (v22)
          {
LABEL_61:
            v29 = v22 - v13;
            goto LABEL_62;
          }
        }
LABEL_70:
        v23 = 0;
        v24 = v13 == "UTC";
LABEL_71:
        if (v24 && v23)
          goto LABEL_89;
        goto LABEL_73;
      }
      if (!v10)
        goto LABEL_70;
      v30 = &v13[2 * v10];
      if (v10 > 0x1F)
      {
        v63 = (int16x8_t *)v13;
        do
        {
          v64.i64[0] = 0x2F002F002F002FLL;
          v64.i64[1] = 0x2F002F002F002FLL;
          v65 = (int8x16_t)vceqq_s16(*v63, v64);
          v64.i16[0] = vmaxvq_u16((uint16x8_t)v65);
          if (v64.i32[0])
            goto LABEL_151;
          v66 = v63 + 1;
          v67 = &v63[1].i8[14];
          ++v63;
        }
        while (v67 < v30);
        if (v66 < (int16x8_t *)v30)
        {
          v68.i64[0] = 0x2F002F002F002FLL;
          v68.i64[1] = 0x2F002F002F002FLL;
          v65 = (int8x16_t)vceqq_s16(*((int16x8_t *)v30 - 1), v68);
          v68.i16[0] = vmaxvq_u16((uint16x8_t)v65);
          if (v68.i32[0])
          {
            v63 = (int16x8_t *)(v30 - 16);
LABEL_151:
            v32 = &v63->i8[2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v65))];
            goto LABEL_152;
          }
        }
      }
      else
      {
        v31 = 2 * v10;
        v32 = v13;
        while (*(_WORD *)v32 != 47)
        {
          v32 += 2;
          v31 -= 2;
          if (!v31)
            goto LABEL_30;
        }
LABEL_152:
        if (v32 != v30)
        {
          v29 = (v32 - v13) >> 1;
LABEL_62:
          if (v29 != -1)
            goto LABEL_89;
        }
      }
LABEL_30:
      v23 = v10 == 3;
      v24 = v13 == "UTC";
      if (v13 == "UTC" || v10 != 3)
        goto LABEL_71;
      if (v15)
      {
        if (*v13 != 85)
        {
LABEL_34:
          v16 = 3;
          goto LABEL_73;
        }
        v27 = *(unsigned __int16 *)(v13 + 1);
        v28 = 17236;
      }
      else
      {
        if (*(_WORD *)v13 != 85)
          goto LABEL_34;
        v27 = *(_DWORD *)(v13 + 2);
        v28 = 4390996;
      }
      if (v27 == v28)
        goto LABEL_89;
      goto LABEL_34;
    }
    v19 = v10 != 7;
    if (v13 == "Etc/UTC" || v10 != 7)
    {
      if (v13 == "Etc/UTC" && v10 == 7)
        goto LABEL_89;
    }
    else if (v15)
    {
      if (*v13 == 69 && *(_DWORD *)(v13 + 1) == 1429169012 && *(_DWORD *)(v13 + 3) == 1129600303)
        goto LABEL_89;
    }
    else if (*(_WORD *)v13 == 69
           && *(_QWORD *)(v13 + 2) == 0x55002F00630074
           && *(_QWORD *)(v13 + 6) == 0x4300540055002FLL)
    {
      goto LABEL_89;
    }
    if (v13 == "Etc/GMT")
      v19 = 1;
    if (!v19)
    {
      if (v15)
      {
        if (*v13 != 69 || *(_DWORD *)(v13 + 1) != 1194287988)
          goto LABEL_77;
        v25 = *(_DWORD *)(v13 + 3);
        v26 = 1414350639;
        goto LABEL_85;
      }
      if (*(_WORD *)v13 != 69
        || *(_QWORD *)(v13 + 2) != 0x47002F00630074
        || *(_QWORD *)(v13 + 6) != 0x54004D0047002FLL)
      {
        goto LABEL_77;
      }
      goto LABEL_89;
    }
    if (v13 == "Etc/GMT" && v10 == 7)
      goto LABEL_89;
LABEL_73:
    if (v13 != "GMT" && v16 == 3)
    {
      if (v15)
      {
        if (*v13 != 71)
          goto LABEL_77;
        v25 = *(unsigned __int16 *)(v13 + 1);
        v26 = 21581;
      }
      else
      {
        if (*(_WORD *)v13 != 71)
          goto LABEL_77;
        v25 = *(_DWORD *)(v13 + 2);
        v26 = 5505101;
      }
LABEL_85:
      if (v25 != v26)
        goto LABEL_77;
      goto LABEL_89;
    }
    if (v13 != "GMT" || v16 != 3)
      goto LABEL_77;
LABEL_89:
    if (v9)
    {
      v41 = v12[4];
      v42 = *((_QWORD *)v12 + 1);
      v43 = v12[1];
      v44 = v43 != 7;
      if ((char *)v42 == "Etc/UTC" || v43 != 7)
      {
        if ((char *)v42 == "Etc/UTC")
        {
          v45 = v12[1];
          v0 = v143;
          if (v43 == 7)
            goto LABEL_117;
        }
        else
        {
          v45 = v12[1];
          v0 = v143;
        }
      }
      else
      {
        if ((v41 & 4) != 0)
        {
          v0 = v143;
          if (*(_BYTE *)v42 == 69 && *(_DWORD *)(v42 + 1) == 1429169012 && *(_DWORD *)(v42 + 3) == 1129600303)
            goto LABEL_117;
        }
        else
        {
          v0 = v143;
          if (*(_WORD *)v42 == 69)
          {
            v45 = 7;
            if (*(_QWORD *)(v42 + 2) == 0x55002F00630074 && *(_QWORD *)(v42 + 6) == 0x4300540055002FLL)
              goto LABEL_117;
            goto LABEL_99;
          }
        }
        v45 = 7;
      }
LABEL_99:
      if ((char *)v42 == "Etc/GMT")
        v44 = 1;
      if (v44)
      {
        if ((char *)v42 == "Etc/GMT" && v43 == 7)
          goto LABEL_117;
        goto LABEL_110;
      }
      if (v45)
      {
        if ((v41 & 4) != 0)
        {
          if (*(_BYTE *)v42 == 69 && *(_DWORD *)(v42 + 1) == 1194287988 && *(_DWORD *)(v42 + 3) == 1414350639)
            goto LABEL_117;
        }
        else if (*(_WORD *)v42 == 69
               && *(_QWORD *)(v42 + 2) == 0x47002F00630074
               && *(_QWORD *)(v42 + 6) == 0x54004D0047002FLL)
        {
          goto LABEL_117;
        }
LABEL_110:
        if ((char *)v42 == "GMT" || v45 != 3)
        {
          if ((char *)v42 != "GMT" || v45 != 3)
          {
LABEL_114:
            v46 = (uint64_t)v12;
            v12 = 0;
            goto LABEL_118;
          }
        }
        else
        {
          if ((v41 & 4) != 0)
          {
            if (*(_BYTE *)v42 != 71)
              goto LABEL_114;
            v57 = *(unsigned __int16 *)(v42 + 1);
            v58 = 21581;
          }
          else
          {
            if (*(_WORD *)v42 != 71)
              goto LABEL_114;
            v57 = *(_DWORD *)(v42 + 2);
            v58 = 5505101;
          }
          if (v57 != v58)
            goto LABEL_114;
        }
      }
LABEL_117:
      v46 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v46 = 0x300000002;
      *(_QWORD *)(v46 + 8) = "UTC";
      *(_DWORD *)(v46 + 16) = 4;
      goto LABEL_118;
    }
    v46 = (uint64_t)v12;
    v12 = 0;
    v0 = v143;
LABEL_118:
    v144 = (WTF *)v46;
    LOBYTE(v145) = 1;
    v47 = HIDWORD(v148);
    if (HIDWORD(v148) == (_DWORD)v148)
    {
      v59 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v147, HIDWORD(v148) + 1, (unint64_t)&v144);
      v60 = HIDWORD(v148);
      v61 = v147;
      v62 = *v59;
      *v59 = 0;
      *((_QWORD *)v61 + v60) = v62;
      HIDWORD(v148) = v60 + 1;
      if (!(_BYTE)v145)
        goto LABEL_78;
    }
    else
    {
      v144 = 0;
      *((_QWORD *)v147 + HIDWORD(v148)) = v46;
      HIDWORD(v148) = v47 + 1;
    }
    v48 = v144;
    v144 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v17, v18, (uint64_t)v2.m_characters, *(uint64_t *)&v2.m_length, v3, v4, v5);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
LABEL_78:
    if (v12)
    {
      if (*v12 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v12, v17, v18, (uint64_t)v2.m_characters, *(uint64_t *)&v2.m_length, v3, v4, v5);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *v12 -= 2;
      }
    }
    ++v7;
  }
  while (v7 != v6);
  v69 = (const WTF::StringImpl **)v147;
  v70 = (WTF *)((char *)v147 + 8 * HIDWORD(v148));
  if (HIDWORD(v148))
  {
    v71 = (const WTF::StringImpl *)(126 - 2 * __clz(HIDWORD(v148)));
    goto LABEL_158;
  }
LABEL_157:
  v71 = 0;
LABEL_158:
  std::__introsort<std::_ClassicAlgPolicy,JSC::intlAvailableTimeZones(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*,false>(v69, v70, v71, 1, *(uint64_t *)&v2.m_length, v3, v4, v5);
  v78 = v147;
  if (HIDWORD(v148))
  {
    v79 = (WTF *)((char *)v147 + 8 * HIDWORD(v148));
    if (HIDWORD(v148) != 1)
    {
      v80 = (const WTF::StringImpl **)((char *)v147 + 8);
      v81 = 8 * HIDWORD(v148) - 16;
      while (1)
      {
        v82 = *(WTF **)v78;
        v83 = *v80;
        if (*(const WTF::StringImpl **)v78 == *v80)
          break;
        v84 = !v82 || v83 == 0;
        if (!v84 && WTF::equal(v82, v83, v72))
          break;
        ++v80;
        v78 = (WTF *)((char *)v78 + 8);
        v81 -= 8;
        if (v80 == (const WTF::StringImpl **)v79)
          goto LABEL_187;
      }
      if ((WTF *)((char *)v78 + 16) != v79)
      {
        v85 = 16;
        v86 = (WTF **)v78;
        while (1)
        {
          v87 = *v86;
          v88 = *(const WTF::StringImpl **)((char *)v78 + v85);
          if (*v86 != v88)
          {
            if (v87)
              v89 = v88 == 0;
            else
              v89 = 1;
            if (v89)
              goto LABEL_179;
            if (!WTF::equal(v87, v88, v72))
              break;
          }
LABEL_182:
          v85 += 8;
          v81 -= 8;
          if (!v81)
            goto LABEL_186;
        }
        v88 = *(const WTF::StringImpl **)((char *)v78 + v85);
LABEL_179:
        *(_QWORD *)((char *)v78 + v85) = 0;
        v91 = v86[1];
        ++v86;
        v90 = v91;
        *v86 = v88;
        if (v91)
        {
          if (*(_DWORD *)v90 == 2)
          {
            WTF::StringImpl::~StringImpl(v90, v88, (uint64_t)v72, v73, v74, v75, v76, v77);
            WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          }
          else
          {
            *(_DWORD *)v90 -= 2;
          }
        }
        goto LABEL_182;
      }
      v86 = (WTF **)v78;
LABEL_186:
      v79 = (WTF *)(v86 + 1);
    }
  }
  else
  {
    v79 = v147;
  }
LABEL_187:
  JSC::intlAvailableTimeZones(void)::availableTimeZones = 0;
  unk_1EE343028 = 0;
  v100 = v147;
  v101 = v79 - v147;
  if (v79 - v147 <= -8)
    goto LABEL_232;
  v144 = 0;
  v145 = 0;
  if (v79 == v147)
    goto LABEL_206;
  if (HIDWORD(v101))
  {
LABEL_233:
    __break(0xC471u);
    JUMPOUT(0x198973824);
  }
  v102 = v101 >> 3;
  v103 = (unint64_t)v101 >> 3;
  v104 = (WTF *)WTF::fastMalloc((WTF *)v101);
  v105 = 0;
  LODWORD(v145) = v103;
  v144 = v104;
  v106 = 8 * v102;
  do
  {
    v107 = *((_QWORD *)v100 + v105);
    if (!v107)
    {
LABEL_200:
      WTF::StringImpl::s_emptyAtomString += 2;
      v110 = &WTF::StringImpl::s_emptyAtomString;
      goto LABEL_204;
    }
    v108 = *(_BYTE **)(v107 + 8);
    v109 = *(unsigned int *)(v107 + 4);
    if ((*(_BYTE *)(v107 + 16) & 4) != 0)
    {
      if (!(_DWORD)v109)
        goto LABEL_200;
      if ((v109 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19897382CLL);
      }
      v110 = (int *)WTF::fastCompactMalloc((WTF *)(v109 + 20));
      v111 = v110 + 5;
      *v110 = 2;
      v110[1] = v109;
      *((_QWORD *)v110 + 1) = v110 + 5;
      v110[4] = 4;
      v149 = (WTF::StringImpl *)v110;
      if ((_DWORD)v109 == 1)
        *v111 = *v108;
      else
        memcpy(v111, v108, v109);
LABEL_202:
      WTF::StringImpl::hashSlowCase((WTF::StringImpl *)v110);
      goto LABEL_203;
    }
    if (!(_DWORD)v109)
      goto LABEL_200;
    WTF::StringImpl::create8BitIfPossible(v108, v109, (uint64_t *)&v149);
    v110 = (int *)v149;
    if (*((_DWORD *)v149 + 4) <= 0xFFu)
      goto LABEL_202;
LABEL_203:
    *v110 |= 1u;
LABEL_204:
    *((_QWORD *)v104 + v105++) = v110;
    v106 -= 8;
  }
  while (v106);
  HIDWORD(v145) = v105;
  v0 = v143;
LABEL_206:
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)&JSC::intlAvailableTimeZones(void)::availableTimeZones, &v144, (uint64_t)v72, v73, v74, v75, v76, v77);
  if (HIDWORD(v145))
  {
    v121 = v144;
    v122 = 8 * HIDWORD(v145);
    do
    {
      v123 = *(WTF::StringImpl **)v121;
      *(_QWORD *)v121 = 0;
      if (v123)
      {
        if (*(_DWORD *)v123 == 2)
        {
          WTF::StringImpl::~StringImpl(v123, v112, v113, v114, v115, v116, v117, v118);
          WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
        }
        else
        {
          *(_DWORD *)v123 -= 2;
        }
      }
      v121 = (WTF *)((char *)v121 + 8);
      v122 -= 8;
    }
    while (v122);
  }
  v119 = v144;
  if (v144)
  {
    v144 = 0;
    LODWORD(v145) = 0;
    WTF::fastFree((unint64_t)v119, v112, v113, v114, v115, v116, v117, v118);
  }
  if (v0)
    uenum_close();
  if (HIDWORD(v148))
  {
    v132 = v147;
    v133 = 8 * HIDWORD(v148);
    do
    {
      v134 = *(WTF::StringImpl **)v132;
      *(_QWORD *)v132 = 0;
      if (v134)
      {
        if (*(_DWORD *)v134 == 2)
        {
          WTF::StringImpl::~StringImpl(v134, v112, v113, v114, v115, v116, v117, v118);
          WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
        }
        else
        {
          *(_DWORD *)v134 -= 2;
        }
      }
      v132 = (WTF *)((char *)v132 + 8);
      v133 -= 8;
    }
    while (v133);
  }
  v120 = v147;
  if (v147)
  {
    v147 = 0;
    LODWORD(v148) = 0;
    WTF::fastFree((unint64_t)v120, v112, v113, v114, v115, v116, v117, v118);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,JSC::intlAvailableTimeZones(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*,false>(const WTF::StringImpl **a1, WTF::AtomStringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::StringImpl *v8;
  const WTF::StringImpl **v9;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  const WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const WTF::StringImpl **v17;
  const WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  WTF **v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const WTF::StringImpl **v29;
  const WTF::StringImpl **v30;
  WTF *v31;
  WTF *v32;
  const WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  WTF **v35;
  const WTF::StringImpl **v36;
  WTF *v37;
  WTF **v38;
  WTF *v39;
  WTF *v40;
  const WTF::StringImpl **v41;
  const WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  BOOL v45;
  const WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  const WTF::StringImpl **v64;
  const WTF::StringImpl *v65;
  const WTF::StringImpl **v66;
  const WTF::StringImpl *v67;
  const WTF::StringImpl *v68;
  const WTF::StringImpl **v69;
  const WTF::StringImpl *v70;
  const WTF::StringImpl *v71;
  WTF **v72;
  const WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const WTF::StringImpl *v92;
  WTF **v93;
  const WTF::StringImpl *v94;
  const WTF::StringImpl *v95;
  WTF *v96;
  const WTF::StringImpl *v97;
  WTF *v98;
  const WTF::StringImpl *v99;
  const WTF::StringImpl *v100;
  WTF **v101;
  BOOL v103;
  uint64_t v104;
  const WTF::StringImpl **v105;
  WTF *v106;
  const WTF::StringImpl *v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  WTF *v115;
  uint64_t i;
  WTF::StringImpl **v117;
  WTF::StringImpl *v118;
  WTF::StringImpl **v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF::StringImpl *v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  int64_t v138;
  uint64_t v139;
  WTF **v140;
  const WTF::StringImpl **v141;
  const WTF::StringImpl *v142;
  WTF::StringImpl **v143;
  WTF *v144;
  WTF::StringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  unint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  const WTF::StringImpl *v167;
  WTF **v168;
  WTF::StringImpl **v169;
  uint64_t v170;
  uint64_t v171;
  WTF *v172;
  WTF::StringImpl *v173;
  unint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  const WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  uint64_t v185;
  unint64_t v186;
  WTF **v187;
  const WTF::StringImpl *v188;
  WTF::StringImpl **v189;
  WTF *v190;
  WTF *v191;
  unint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  WTF::StringImpl *v200;
  unint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::AtomStringImpl *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl *v235;
  WTF *v236;
  const WTF::StringImpl **v237;
  const WTF::StringImpl *v238;
  uint64_t v239;
  WTF::StringImpl **v240;
  int v241;
  unint64_t v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  const WTF::StringImpl *v258;
  int64_t v259;
  char v260;
  int64_t v261;

  v260 = a4;
  v8 = a3;
  v9 = (const WTF::StringImpl **)a2;
LABEL_2:
  v11 = (const WTF::StringImpl *)(v9 - 1);
  v12 = (const WTF::StringImpl *)(v9 - 2);
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (char *)v9 - (char *)v13;
    v15 = v9 - v13;
    switch(v15)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((WTF::codePointCompare(*(v9 - 1), *a1, a3) & 0x80000000) != 0)
        {
          v92 = *a1;
          *a1 = *(v9 - 1);
          *(v9 - 1) = v92;
        }
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, v11);
        return;
      case 4:
        v93 = a1 + 2;
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
        if ((WTF::codePointCompare(*(v9 - 1), a1[2], v94) & 0x80000000) != 0)
        {
          v96 = *v93;
          *v93 = *(v9 - 1);
          *(v9 - 1) = v96;
          if ((WTF::codePointCompare(*v93, a1[1], v95) & 0x80000000) != 0)
          {
            v99 = a1[1];
            v98 = a1[2];
            v100 = *a1;
            a1[1] = v98;
            a1[2] = v99;
            if ((WTF::codePointCompare(v98, v100, v97) & 0x80000000) != 0)
              *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          }
        }
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,0>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3, (WTF **)v11);
        return;
      default:
        if (v14 > 191)
        {
          if (!v8)
          {
            if (a1 == v9)
              return;
            v137 = (unint64_t)(v15 - 2) >> 1;
            v261 = v137;
            do
            {
              v138 = v137;
              if (v261 >= v137)
              {
                v139 = (2 * v137) | 1;
                v140 = &a1[v139];
                if (2 * v137 + 2 < v15 && (int)WTF::codePointCompare(*v140, v140[1], a3) < 0)
                {
                  ++v140;
                  v139 = 2 * v138 + 2;
                }
                v141 = &a1[v138];
                if ((WTF::codePointCompare(*v140, *v141, a3) & 0x80000000) == 0)
                {
                  v259 = v138;
                  v142 = *v141;
                  *v141 = 0;
                  do
                  {
                    v143 = v140;
                    v144 = *v140;
                    *v140 = 0;
                    v145 = *v141;
                    *v141 = v144;
                    if (v145)
                    {
                      if (*(_DWORD *)v145 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v145, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
                      }
                      else
                      {
                        *(_DWORD *)v145 -= 2;
                      }
                    }
                    if (v261 < v139)
                      break;
                    v146 = (2 * v139) | 1;
                    v140 = &a1[v146];
                    v147 = 2 * v139 + 2;
                    if (v147 < v15 && (int)WTF::codePointCompare(*v140, v140[1], a3) < 0)
                    {
                      ++v140;
                      v146 = v147;
                    }
                    v141 = v143;
                    v139 = v146;
                  }
                  while ((WTF::codePointCompare(*v140, v142, a3) & 0x80000000) == 0);
                  v156 = *v143;
                  *v143 = v142;
                  v138 = v259;
                  if (v156)
                  {
                    if (*(_DWORD *)v156 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v156, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v157, v158, v159, v160, v161, v162, v163, v164);
                    }
                    else
                    {
                      *(_DWORD *)v156 -= 2;
                    }
                  }
                }
              }
              v137 = v138 - 1;
            }
            while (v138);
            v165 = (unint64_t)v14 >> 3;
            while (1)
            {
              v166 = 0;
              v167 = *a1;
              *a1 = 0;
              v168 = a1;
              do
              {
                v169 = v168;
                v168 += v166 + 1;
                v170 = 2 * v166;
                v166 = (2 * v166) | 1;
                v171 = v170 + 2;
                if (v170 + 2 < v165 && (int)WTF::codePointCompare(*v168, v168[1], a3) < 0)
                {
                  ++v168;
                  v166 = v171;
                }
                v172 = *v168;
                *v168 = 0;
                v173 = *v169;
                *v169 = v172;
                if (v173)
                {
                  if (*(_DWORD *)v173 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v173, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v174, v175, v176, v177, v178, v179, v180, v181);
                  }
                  else
                  {
                    *(_DWORD *)v173 -= 2;
                  }
                }
              }
              while (v166 <= (uint64_t)((unint64_t)(v165 - 2) >> 1));
              if (v168 == --v9)
              {
                v200 = *v168;
                *v168 = v167;
                if (!v200)
                  goto LABEL_165;
                goto LABEL_163;
              }
              v182 = *v9;
              *v9 = 0;
              v183 = *v168;
              *v168 = v182;
              if (v183)
              {
                if (*(_DWORD *)v183 == 2)
                {
                  WTF::StringImpl::~StringImpl(v183, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v202, v203, v204, v205, v206, v207, v208, v209);
                }
                else
                {
                  *(_DWORD *)v183 -= 2;
                }
              }
              v184 = *v9;
              *v9 = v167;
              if (v184)
              {
                if (*(_DWORD *)v184 == 2)
                {
                  WTF::StringImpl::~StringImpl(v184, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v210, v211, v212, v213, v214, v215, v216, v217);
                }
                else
                {
                  *(_DWORD *)v184 -= 2;
                }
              }
              v185 = (char *)(v168 + 1) - (char *)a1;
              if (v185 >= 9)
              {
                v186 = (((unint64_t)v185 >> 3) - 2) >> 1;
                v187 = &a1[v186];
                if ((WTF::codePointCompare(*v187, *v168, a3) & 0x80000000) != 0)
                  break;
              }
LABEL_165:
              if (v165-- <= 2)
                return;
            }
            v188 = *v168;
            *v168 = 0;
            while (1)
            {
              v189 = v187;
              v190 = *v187;
              *v187 = 0;
              v191 = *v168;
              *v168 = v190;
              if (!v191)
                goto LABEL_156;
              if (*(_DWORD *)v191 != 2)
                break;
              WTF::StringImpl::~StringImpl(v191, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v192, v193, v194, v195, v196, v197, v198, v199);
              if (!v186)
              {
LABEL_160:
                v200 = *v189;
                *v189 = v188;
                if (!v200)
                  goto LABEL_165;
LABEL_163:
                if (*(_DWORD *)v200 == 2)
                {
                  WTF::StringImpl::~StringImpl(v200, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v218, v219, v220, v221, v222, v223, v224, v225);
                }
                else
                {
                  *(_DWORD *)v200 -= 2;
                }
                goto LABEL_165;
              }
LABEL_157:
              v186 = (v186 - 1) >> 1;
              v187 = &a1[v186];
              v168 = v189;
              if ((WTF::codePointCompare(*v187, v188, a3) & 0x80000000) == 0)
                goto LABEL_160;
            }
            *(_DWORD *)v191 -= 2;
LABEL_156:
            if (!v186)
              goto LABEL_160;
            goto LABEL_157;
          }
          v16 = (unint64_t)v15 >> 1;
          v17 = &a1[(unint64_t)v15 >> 1];
          if ((unint64_t)v14 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v17, a1, v11);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, v17, v11);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1 + 1, v17 - 1, v12);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1 + 2, &a1[v16 + 1], (const WTF::StringImpl *)(v9 - 3));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(v17 - 1, v17, (const WTF::StringImpl *)&a1[v16 + 1]);
            v19 = *a1;
            *a1 = *v17;
            *v17 = v19;
          }
          v8 = (const WTF::StringImpl *)((char *)v8 - 1);
          if ((v260 & 1) == 0 && (WTF::codePointCompare(*(a1 - 1), *a1, v18) & 0x80000000) == 0)
          {
            v63 = *a1;
            *a1 = 0;
            v64 = a1 + 1;
            if ((WTF::codePointCompare(v63, *(const WTF::StringImpl **)v11, v18) & 0x80000000) != 0)
            {
              do
              {
                if (v64 == v9)
                  goto LABEL_189;
                v65 = *v64++;
              }
              while ((WTF::codePointCompare(v63, v65, a3) & 0x80000000) == 0);
              v13 = v64 - 1;
            }
            else
            {
              do
              {
                v13 = v64;
                if (v64 >= v9)
                  break;
                ++v64;
              }
              while ((WTF::codePointCompare(v63, *v13, a3) & 0x80000000) == 0);
            }
            v66 = v9;
            if (v13 < v9)
            {
              v66 = v9;
              while (v66 != a1)
              {
                v67 = *--v66;
                if ((WTF::codePointCompare(v63, v67, a3) & 0x80000000) == 0)
                  goto LABEL_63;
              }
              goto LABEL_189;
            }
LABEL_63:
            if (v13 < v66)
            {
              v68 = *v13;
              *v13 = *v66;
              v69 = v13 + 1;
              *v66 = v68;
              while (v69 != v9)
              {
                v70 = *v69++;
                if ((WTF::codePointCompare(v63, v70, a3) & 0x80000000) != 0)
                {
                  v13 = v69 - 1;
                  while (v66 != a1)
                  {
                    v71 = *--v66;
                    if ((WTF::codePointCompare(v63, v71, a3) & 0x80000000) == 0)
                      goto LABEL_63;
                  }
                  goto LABEL_189;
                }
              }
              goto LABEL_189;
            }
            v72 = v13 - 1;
            if (v13 - 1 != a1)
            {
              v73 = *v72;
              *v72 = 0;
              v74 = *a1;
              *a1 = v73;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                {
                  WTF::StringImpl::~StringImpl(v74, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
                }
                else
                {
                  *(_DWORD *)v74 -= 2;
                }
              }
            }
            v260 = 0;
            v75 = *v72;
            *v72 = v63;
            if (v75)
            {
              if (*(_DWORD *)v75 == 2)
              {
                WTF::StringImpl::~StringImpl(v75, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
                v260 = 0;
              }
              else
              {
                v260 = 0;
                *(_DWORD *)v75 -= 2;
              }
            }
            continue;
          }
          v20 = 0;
          v21 = *a1;
          *a1 = 0;
          do
          {
            v22 = &a1[v20 + 1];
            if (v22 == v9)
              goto LABEL_189;
            ++v20;
          }
          while ((WTF::codePointCompare(*v22, v21, v18) & 0x80000000) != 0);
          v29 = &a1[v20];
          v30 = v9;
          if (v20 != 1)
          {
            while (v30 != a1)
            {
              v31 = *--v30;
              if ((WTF::codePointCompare(v31, v21, v18) & 0x80000000) != 0)
                goto LABEL_21;
            }
LABEL_189:
            __break(1u);
            return;
          }
          v30 = v9;
          do
          {
            if (v29 >= v30)
              break;
            v32 = *--v30;
          }
          while ((WTF::codePointCompare(v32, v21, v18) & 0x80000000) == 0);
LABEL_21:
          if (v29 >= v30)
          {
            v41 = v29 - 1;
          }
          else
          {
            v258 = v8;
            v33 = v12;
            v34 = v11;
            v35 = &a1[v20];
            v36 = v30;
            do
            {
              v37 = *v35;
              *v35 = *v36;
              *v36 = v37;
              v38 = v35 + 1;
              do
              {
                if (v38 == v9)
                  goto LABEL_189;
                v39 = *v38++;
              }
              while ((WTF::codePointCompare(v39, v21, v18) & 0x80000000) != 0);
              v35 = v38 - 1;
              do
              {
                if (v36 == a1)
                  goto LABEL_189;
                v40 = *--v36;
              }
              while ((WTF::codePointCompare(v40, v21, v18) & 0x80000000) == 0);
            }
            while (v35 < v36);
            v41 = v38 - 2;
            v11 = v34;
            v12 = v33;
            v8 = v258;
          }
          if (v41 != a1)
          {
            v42 = *v41;
            *v41 = 0;
            v43 = *a1;
            *a1 = v42;
            if (v43)
            {
              if (*(_DWORD *)v43 == 2)
              {
                WTF::StringImpl::~StringImpl(v43, v23, (uint64_t)v18, v24, v25, v26, v27, v28);
                WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
              }
              else
              {
                *(_DWORD *)v43 -= 2;
              }
            }
          }
          v44 = *v41;
          *v41 = v21;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::~StringImpl(v44, v23, (uint64_t)v18, v24, v25, v26, v27, v28);
              WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
            }
            else
            {
              *(_DWORD *)v44 -= 2;
            }
          }
          if (v29 < v30)
          {
LABEL_42:
            std::__introsort<std::_ClassicAlgPolicy,JSC::intlAvailableTimeZones(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*,false>(a1, v41, v8, v260 & 1);
            v260 = 0;
            v13 = v41 + 1;
            continue;
          }
          v45 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::intlAvailableTimeZones(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*>(a1, v41, v18);
          v13 = v41 + 1;
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::intlAvailableTimeZones(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*>(v41 + 1, v9, v46))
          {
            if (v45)
              continue;
            goto LABEL_42;
          }
          v9 = v41;
          if (v45)
            return;
          goto LABEL_2;
        }
        v101 = a1 + 1;
        v103 = a1 == v9 || v101 == v9;
        if ((v260 & 1) == 0)
        {
          if (v103)
            return;
          v226 = 0;
          v227 = 1;
          while (1)
          {
            v228 = v226;
            v226 = v227;
            if ((WTF::codePointCompare(*v101, a1[v228], a3) & 0x80000000) != 0)
            {
              v235 = 0;
              v236 = *v101;
              *v101 = 0;
              do
              {
                v237 = &a1[v228];
                v238 = *v237;
                *v237 = 0;
                v237[1] = v238;
                if (v235)
                {
                  if (*(_DWORD *)v235 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v235, v229, (uint64_t)a3, v230, v231, v232, v233, v234);
                    WTF::fastFree(v242, v243, v244, v245, v246, v247, v248, v249);
                  }
                  else
                  {
                    *(_DWORD *)v235 -= 2;
                  }
                }
                if (v228 == -1)
                  goto LABEL_189;
                v239 = v228 - 1;
                v240 = &a1[v228];
                v241 = WTF::codePointCompare(v236, *(v240 - 1), a3);
                v235 = *v240;
                v228 = v239;
              }
              while (v241 < 0);
              a1[v239 + 1] = v236;
              if (v235)
              {
                if (*(_DWORD *)v235 == 2)
                {
                  WTF::StringImpl::~StringImpl(v235, v229, (uint64_t)a3, v230, v231, v232, v233, v234);
                  WTF::fastFree(v250, v251, v252, v253, v254, v255, v256, v257);
                }
                else
                {
                  *(_DWORD *)v235 -= 2;
                }
              }
            }
            v227 = v226 + 1;
            v101 = &a1[v226 + 1];
            if (v101 == v9)
              return;
          }
        }
        if (v103)
          return;
        v104 = 0;
        v105 = a1;
        do
        {
          v107 = *v105;
          v106 = v105[1];
          v105 = v101;
          if ((WTF::codePointCompare(v106, v107, a3) & 0x80000000) == 0)
            goto LABEL_106;
          v114 = 0;
          v115 = *v101;
          *v101 = 0;
          for (i = v104; ; i -= 8)
          {
            v117 = (const WTF::StringImpl **)((char *)a1 + i);
            v118 = *(const WTF::StringImpl **)((char *)a1 + i);
            *v117 = 0;
            v117[1] = v118;
            if (!v114)
              goto LABEL_98;
            if (*(_DWORD *)v114 == 2)
              break;
            *(_DWORD *)v114 -= 2;
LABEL_98:
            if (!i)
              goto LABEL_102;
LABEL_99:
            v119 = (const WTF::StringImpl **)((char *)a1 + i);
            if ((WTF::codePointCompare(v115, *(const WTF::StringImpl **)((char *)a1 + i - 8), a3) & 0x80000000) == 0)
              goto LABEL_103;
            v114 = *v117;
          }
          WTF::StringImpl::~StringImpl(v114, v108, (uint64_t)a3, v109, v110, v111, v112, v113);
          WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
          if (i)
            goto LABEL_99;
LABEL_102:
          v119 = a1;
LABEL_103:
          v128 = *v119;
          *v119 = v115;
          if (v128)
          {
            if (*(_DWORD *)v128 == 2)
            {
              WTF::StringImpl::~StringImpl(v128, v108, (uint64_t)a3, v109, v110, v111, v112, v113);
              WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
            }
            else
            {
              *(_DWORD *)v128 -= 2;
            }
          }
LABEL_106:
          v101 = v105 + 1;
          v104 += 8;
        }
        while (v105 + 1 != v9);
        return;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,JSC::intlAvailableTimeZones(void)::$_0::operator() const(void)::{lambda(WTF::String const&,WTF::String const&)#1} &,WTF::String*>(const WTF::StringImpl **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  _BOOL8 result;
  const WTF::StringImpl *v7;
  const WTF::StringImpl **v8;
  const WTF::StringImpl *v9;
  WTF **v10;
  uint64_t v11;
  int v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t i;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF **v42;
  const WTF::StringImpl *v43;
  const WTF::StringImpl *v44;
  WTF *v45;
  const WTF::StringImpl *v46;
  WTF *v47;
  const WTF::StringImpl *v48;
  const WTF::StringImpl *v49;

  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((WTF::codePointCompare(*(a2 - 1), *a1, a3) & 0x80000000) != 0)
      {
        v7 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a2 - 1));
      return 1;
    case 4:
      v42 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      if ((WTF::codePointCompare(*(a2 - 1), a1[2], v43) & 0x80000000) != 0)
      {
        v45 = *v42;
        *v42 = *(a2 - 1);
        *(a2 - 1) = v45;
        if ((WTF::codePointCompare(*v42, a1[1], v44) & 0x80000000) != 0)
        {
          v48 = a1[1];
          v47 = a1[2];
          v49 = *a1;
          a1[1] = v47;
          a1[2] = v48;
          if ((WTF::codePointCompare(v47, v49, v46) & 0x80000000) != 0)
            *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
        }
      }
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *,0>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2), a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,JSC::availableCollations(JSC::JSGlobalObject *)::$_0 &,WTF::String *>(a1, a1 + 1, (const WTF::StringImpl *)(a1 + 2));
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((WTF::codePointCompare(*v10, *v8, v9) & 0x80000000) != 0)
    {
      v19 = 0;
      v20 = *v10;
      *v10 = 0;
      for (i = v11; ; i -= 8)
      {
        v22 = (char *)a1 + i;
        v23 = *(uint64_t *)((char *)a1 + i + 16);
        *((_QWORD *)v22 + 2) = 0;
        *((_QWORD *)v22 + 3) = v23;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::~StringImpl(v19, v13, (uint64_t)v9, v14, v15, v16, v17, v18);
            WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
          }
          else
          {
            *(_DWORD *)v19 -= 2;
          }
        }
        if (i == -16)
        {
          v32 = a1;
          goto LABEL_17;
        }
        if ((WTF::codePointCompare(v20, *(const WTF::StringImpl **)((char *)a1 + i + 8), v9) & 0x80000000) == 0)
          break;
        v19 = (WTF::StringImpl *)*((_QWORD *)v22 + 2);
      }
      v32 = (const WTF::StringImpl **)((char *)a1 + i + 16);
LABEL_17:
      v33 = *v32;
      *v32 = v20;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v13, (uint64_t)v9, v14, v15, v16, v17, v18);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v8 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

unint64_t JSC::IntlRelativeTimeFormatPrototype::create(JSC::IntlRelativeTimeFormatPrototype *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a2 = v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1700000002;
  *(_QWORD *)(v13 + 8) = "Intl.RelativeTimeFormat";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::IntlRelativeTimeFormatPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlRelativeTimeFormatPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlSegmentIterator::visitChildren(JSC::IntlSegmentIterator *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 4);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::IntlSegmentIterator::visitChildren(JSC::IntlSegmentIterator *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 4));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::IntlSegmentIterator::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlSegmentIterator::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::IntlSegmenter::createSegmentDataObject(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  JSC::JSGlobalObject *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int RuleStatus;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t result;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t SlowCase;
  uint64_t v41;
  int v42;
  uint64_t Slow;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;

  v8 = a6;
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(v11 + 15056);
  if (v12)
  {
    v13 = *(unsigned int *)(v12 + 60);
    v14 = *(_QWORD *)(v12 + 24);
    if (v14 >= *(_QWORD *)(v12 + 32))
    {
      v14 = *(_QWORD *)(v12 + 40);
      if ((v14 & 1) != 0)
      {
        v44 = a1;
        v36 = a4;
        JSC::sanitizeStackForVM((JSC *)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v12, v11 + 192, v13, 0, 0, v37, v38, v39);
        LODWORD(a4) = v36;
        v14 = SlowCase;
        a1 = v44;
        goto LABEL_4;
      }
      v35 = *(_QWORD *)(v14 + 8) ^ *(_QWORD *)(v12 + 48);
      *(_QWORD *)(v12 + 32) = v14 + HIDWORD(v35);
      *(_QWORD *)(v12 + 40) = v14 + (int)v35;
    }
    *(_QWORD *)(v12 + 24) = v14 + v13;
  }
  else
  {
    v41 = a1;
    v42 = a4;
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v11 + 14936, (JSC *)v11, 0x40uLL, 0, a5, a6, a7, a8);
    LODWORD(a4) = v42;
    v14 = Slow;
    a1 = v41;
    if (!v14)
    {
      result = 110;
      __break(0xC471u);
      return result;
    }
  }
LABEL_4:
  *(_DWORD *)v14 = 0;
  *(_DWORD *)v14 = *(_DWORD *)(a1 + 848);
  *(_DWORD *)(v14 + 4) = 16783360;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_QWORD *)(v14 + 56) = 0;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  v15 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2272);
  v16 = JSC::jsSubstring((JSC *)a1, a2, a3, (a4 - (_DWORD)a3), a5, a6, a7, a8, (int8x16_t)0);
  v45 = 0;
  v46 = v14;
  v47 = -1;
  v17.n128_u64[0] = 0x100000001000000;
  v48 = 0x1000000;
  v49 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v14, v11, v15, (uint64_t)v16, 0, (uint64_t)&v45, v18, v19, v17);
  v20 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1552);
  v45 = 0;
  v46 = v14;
  v47 = -1;
  v21.n128_u64[0] = 0x100000001000000;
  v48 = 0x1000000;
  v49 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v14, v11, v20, a3 | 0xFFFE000000000000, 0, (uint64_t)&v45, v22, v23, v21);
  v24 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1576);
  v45 = 0;
  v46 = v14;
  v47 = -1;
  v25.n128_u64[0] = 0x100000001000000;
  v48 = 0x1000000;
  v49 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v14, v11, v24, (uint64_t)a2, 0, (uint64_t)&v45, v26, v27, v25);
  if (v8 == 1)
  {
    RuleStatus = ubrk_getRuleStatus();
    v32 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1712);
    if (RuleStatus <= 0x64)
      v33 = 6;
    else
      v33 = 7;
    v45 = 0;
    v46 = v14;
    v47 = -1;
    v31.n128_u64[0] = 0x100000001000000;
    v48 = 0x1000000;
    v49 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v14, v11, v32, v33, 0, (uint64_t)&v45, v29, v30, v31);
  }
  return v14;
}

unint64_t JSC::IntlSegmentIteratorPrototype::create(JSC::IntlSegmentIteratorPrototype *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a2 = v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0x1700000002;
  *(_QWORD *)(v13 + 8) = "Segment String Iterator";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::IntlSegmentIteratorPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlSegmentIteratorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::IntlSegmenter::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlSegmenter::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlSegmenterConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, JSC::JSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x900000002;
  *(_QWORD *)(v6 + 8) = "Segmenter";
  *(_DWORD *)(v6 + 16) = 4;
  v31 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)&v31, 1, v7, v8, v9);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), (uint64_t)a3, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectWithoutTransition(a3, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)a1, 4, v19, v20, v21, v22);
}

uint64_t JSC::IntlSegmenterConstructor::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75291;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlSegmenterConstructor::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::Exception *JSC::callIntlSegmenter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Segmenter", 10);
}

unint64_t JSC::constructIntlSegmenter(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  JSC::JSGlobalObject *v12;
  JSC::JSGlobalObject *i;
  char **v14;
  uint64_t v15;
  unint64_t v16;
  JSC::JSObject *SubclassStructure;
  JSC::JSObject *v18;
  _QWORD *v19;
  unint64_t SlowCase;
  int v21;
  unint64_t v22;
  uint64_t v23;
  JSC::VM *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  const char *v53;
  JSC *v54;
  uint64_t v55;
  const WTF::String *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF *v59;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int8x16_t v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  unint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t (*v107)(JSC::VM **);
  JSC::VM **v108;
  uint64_t (*v109)(JSC::VM **);
  JSC::VM **v110;
  int v111;
  int *v112;
  int v113;
  WTF::StringImpl *v114;
  JSC::VM *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  JSC::Heap **v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double v136;
  JSC::Exception *v137;
  WTF::StringImpl *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t (*v149)(_QWORD *);
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  JSC::VM *v158;
  uint64_t v159;
  char *v160;
  char v161;
  char v162;
  char v163;
  char v164;
  char v165;
  char v166;
  char v167;
  char v168;
  char v169;
  WTF *v170;
  int v171;
  unsigned int v172;
  JSC::VM *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  uint64_t v176;
  _QWORD v177[3];
  const char *v178;
  uint64_t v179;
  _BYTE v180[8];
  const char *v181;
  uint64_t v182;
  char v183;
  const char *v184;
  uint64_t v185;
  char v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(this + 56);
  v12 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v12 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v18 = *(JSC::JSObject **)(this + 368);
    if ((v18 & 1) == 0)
      goto LABEL_15;
    v109 = *(uint64_t (**)(JSC::VM **))((unint64_t)v18 & 0xFFFFFFFFFFFFFFFCLL);
    v110 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v110 = (JSC::VM **)(this - 16);
    v158 = *v110;
    v159 = this;
    v160 = (char *)(this + 368);
    SubclassStructure = (JSC::JSObject *)v109(&v158);
  }
  else
  {
    v158 = *(JSC::VM **)(this + 56);
    for (i = v12; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
    {
      while (1)
      {
        v14 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v14 != &JSC::JSBoundFunction::s_info && v14 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v15 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_10;
      }
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError(this, &v158, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v15 = 0;
LABEL_10:
    if (*(_DWORD *)(v11 + 80))
    {
      v106 = *(_DWORD *)(v11 + 80);
      if ((v106 & 0x27) != 0 && (v106 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
      {
        v18 = 0;
        goto LABEL_15;
      }
    }
    v16 = *(_QWORD *)(v15 + 368);
    if ((v16 & 1) != 0)
    {
      v107 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
      v108 = (JSC::VM **)(v15 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v15 & 8) != 0)
        v108 = (JSC::VM **)(v15 - 16);
      v158 = *v108;
      v159 = v15;
      v160 = (char *)(v15 + 368);
      v16 = v107(&v158);
    }
    SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v12, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
  }
  v18 = SubclassStructure;
LABEL_15:
  if (*(_DWORD *)(v11 + 80))
  {
    v101 = *(_DWORD *)(v11 + 80);
    if ((v101 & 0x27) != 0 && (v101 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v19 = *(_QWORD **)(v11 + 40616);
  if (!v19)
    v19 = (_QWORD *)JSC::GCClient::Heap::intlSegmenterSpaceSlow((JSC::Heap **)(v11 + 37552));
  SlowCase = v19[3];
  if (SlowCase < v19[4])
    goto LABEL_19;
  SlowCase = v19[5];
  if ((SlowCase & 1) == 0)
  {
    v102 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v102);
    v19[5] = SlowCase + (int)v102;
LABEL_19:
    v19[3] = SlowCase + 48;
    goto LABEL_20;
  }
  v151 = (uint64_t)v19;
  JSC::sanitizeStackForVM((JSC *)v11, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v151, v11 + 192, 48, 0, 0, v152, v153, v154);
LABEL_20:
  *(_DWORD *)SlowCase = 0;
  v21 = *((_DWORD *)v18 + 2);
  *(_DWORD *)SlowCase = (unint64_t)v18 >> 4;
  *(_DWORD *)(SlowCase + 4) = v21;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_BYTE *)(SlowCase + 32) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22 = 10;
    goto LABEL_70;
  }
  v22 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_70:
    v23 = 10;
    goto LABEL_25;
  }
  v23 = *((_QWORD *)a2 + 7);
LABEL_25:
  v173 = *(JSC::VM **)(this + 56);
  v24 = v173;
  JSC::canonicalizeLocaleList(this, v22, (uint64_t)a3, a4, a5, a6, a7, a8, &v170, a9);
  if (*((_DWORD *)v24 + 20))
  {
    v103 = *((_DWORD *)v24 + 20);
    if ((v103 & 0x27) != 0 && (v103 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v24 + 64), 7u, v26, v27, v28, v29, v30, v31);
    if (*((_QWORD *)v24 + 2))
      goto LABEL_49;
  }
  v158 = *(JSC::VM **)(this + 56);
  if (v23 != 10)
  {
    if ((v23 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v23 + 5) > 0x16u)
      goto LABEL_30;
    JSC::throwTypeError(this, &v158, (uint64_t)"options argument is not an object or undefined", 47);
  }
  v23 = 0;
LABEL_30:
  if (*((_DWORD *)v24 + 20))
  {
    v104 = *((_DWORD *)v24 + 20);
    if ((v104 & 0x27) != 0 && (v104 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v24 + 64), 7u, v26, v27, v28, v29, v30, v31);
    if (*((_QWORD *)v24 + 2))
      goto LABEL_49;
  }
  LOBYTE(v158) = 0;
  LOBYTE(v159) = 0;
  LOBYTE(v160) = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  v169 = 0;
  v32 = *(_QWORD *)(*((_QWORD *)v24 + 5244) + 1792);
  v178 = "lookup";
  v179 = 7;
  v180[0] = 0;
  v181 = "best fit";
  v182 = 9;
  v183 = 1;
  v40 = JSC::intlOption<JSC::LocaleMatcher>((JSC::JSGlobalObject *)this, (unsigned int *)v23, v32, (uint64_t)&v178, 2, (unint64_t)"localeMatcher must be either \"lookup\" or \"best fit\"", 52, 1);
  if (!*((_DWORD *)v24 + 20))
    goto LABEL_32;
  v105 = *((_DWORD *)v24 + 20);
  if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v24 + 64), 7u, v34, v35, v36, v37, v38, v39);
  if (!*((_QWORD *)v24 + 2))
  {
LABEL_32:
    v41 = atomic_load(&JSC::intlSegmenterAvailableLocales(void)::initializeOnce);
    if (v41 != -1)
    {
      v178 = (const char *)v177;
      v155 = (WTF::StringImpl *)&v178;
      std::__call_once(&JSC::intlSegmenterAvailableLocales(void)::initializeOnce, &v155, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlSegmenterAvailableLocales(void)::$_0 &&>>);
    }
    JSC::resolveLocale((JSC *)this, (const WTF::StringImpl *)&JSC::intlSegmenterAvailableLocales(void)::availableLocales, (uint64_t)&v170, v40, (uint64_t)&v158, 0, 0, (uint64_t)JSC::IntlSegmenter::initializeSegmenter(JSC::JSGlobalObject *,JSC::JSValue,JSC::JSValue)::$_0::__invoke, (uint64_t)&v155);
    v50 = (WTF::StringImpl **)(SlowCase + 24);
    v51 = v155;
    if (v155)
      *(_DWORD *)v155 += 2;
    v52 = *v50;
    *v50 = v51;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v42, v43, v44, v45, v46, v47, v48);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
        v51 = *v50;
        if (!*v50)
          goto LABEL_40;
        goto LABEL_54;
      }
      *(_DWORD *)v52 -= 2;
    }
    if (!v51)
    {
LABEL_40:
      v53 = "failed to initialize Segmenter due to invalid locale";
      v54 = (JSC *)this;
      v55 = 53;
      goto LABEL_41;
    }
LABEL_54:
    if (!*((_DWORD *)v51 + 1))
      goto LABEL_40;
    v56 = *(const WTF::String **)(*((_QWORD *)v24 + 5244) + 1408);
    v178 = "grapheme";
    v179 = 9;
    v180[0] = 0;
    v181 = "word";
    v182 = 5;
    v183 = 1;
    v184 = "sentence";
    v185 = 9;
    v186 = 2;
    if (!v23)
      goto LABEL_58;
    v69 = *(_QWORD *)(this + 56);
    v70 = JSC::JSObject::get((unsigned int *)v23, this, (unint64_t)v56, v44, v45, v46, v47, v48);
    v72 = v70;
    v176 = v70;
    if (*(_DWORD *)(v69 + 80))
    {
      v111 = *(_DWORD *)(v69 + 80);
      if ((v111 & 0x27) != 0 && (v111 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v69 + 64), 7u, (uint64_t)v56, v44, v45, v46, v47, v48);
      v73 = 0;
      if (*(_QWORD *)(v69 + 16) || v72 == 10)
        goto LABEL_114;
    }
    else if (v70 == 10)
    {
LABEL_58:
      v73 = 0;
LABEL_114:
      *(_BYTE *)(SlowCase + 32) = v73;
      v115 = v173;
      if (*((_DWORD *)v173 + 20))
      {
        v147 = *((_DWORD *)v173 + 20);
        if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v173 + 64), 7u, (uint64_t)v56, v44, v45, v46, v47, v48);
        if (*((_QWORD *)v115 + 2))
          goto LABEL_42;
      }
      LODWORD(v177[0]) = 0;
      WTF::String::utf8((uint64_t *)(SlowCase + 24), 0, v44, v45, v46, v47, v48, &v178, v49);
      v116 = v178;
      v117 = ubrk_open();
      v118 = *(_QWORD *)(SlowCase + 16);
      *(_QWORD *)(SlowCase + 16) = v117;
      if (v118)
        ubrk_close();
      if (v116)
      {
        if (*(_DWORD *)v116 == 1)
          WTF::fastFree((unint64_t)v116, v42, (uint64_t)v56, v44, v45, v46, v47, v48);
        else
          --*(_DWORD *)v116;
      }
      if (SLODWORD(v177[0]) < 1)
        goto LABEL_42;
      v53 = "failed to initialize Segmenter";
      v54 = (JSC *)this;
      v55 = 31;
LABEL_41:
      JSC::throwTypeError((unint64_t)v54, &v173, (uint64_t)v53, v55);
LABEL_42:
      std::array<WTF::String,6ul>::~array(&v157, v42, (uint64_t)v56, v44, v45, v46, v47, v48);
      v57 = v156;
      v156 = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
        {
          WTF::StringImpl::~StringImpl(v57, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        }
        else
        {
          *(_DWORD *)v57 -= 2;
        }
      }
      v58 = v155;
      v155 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
        {
          WTF::StringImpl::~StringImpl(v58, v33, v34, v35, v36, v37, v38, v39);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
        else
        {
          *(_DWORD *)v58 -= 2;
        }
      }
      goto LABEL_48;
    }
    if ((v72 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v72 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v176, (JSC::JSGlobalObject *)this, v56, v44, v45, v46, v47, v48, (int **)&v175);
      goto LABEL_103;
    }
    v112 = *(int **)(v72 + 8);
    if ((v112 & 1) != 0)
    {
      v112 = *JSC::JSRopeString::resolveRope(v72, (JSC::JSGlobalObject *)this, (uint64_t)v56, v44, v71, v45, v46, v47, v48);
      if (!v112)
        goto LABEL_102;
    }
    else if (!v112)
    {
LABEL_102:
      v175 = (WTF::StringImpl *)v112;
LABEL_103:
      if (!*(_DWORD *)(v69 + 80))
        goto LABEL_104;
      v148 = *(_DWORD *)(v69 + 80);
      if ((v148 & 0x27) != 0 && (v148 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v69 + 64), 7u, (uint64_t)v56, v44, v45, v46, v47, v48);
      if (!*(_QWORD *)(v69 + 16))
      {
LABEL_104:
        if (WTF::equalInternal<unsigned char>((uint64_t)v175, (unint64_t)"grapheme", 8))
        {
          v113 = 0;
LABEL_110:
          v73 = v180[24 * v113];
          goto LABEL_111;
        }
        if (WTF::equalInternal<unsigned char>((uint64_t)v175, (unint64_t)"word", 4))
        {
          v113 = 1;
          goto LABEL_110;
        }
        if (WTF::equalInternal<unsigned char>((uint64_t)v175, (unint64_t)"sentence", 8))
        {
          v113 = 2;
          goto LABEL_110;
        }
        v127 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v127 = 0x3C00000002;
        *(_QWORD *)(v127 + 8) = "granularity must be either \"grapheme\", \"word\", or \"sentence\"";
        *(_DWORD *)(v127 + 16) = 4;
        v174 = (WTF::StringImpl *)v127;
        v128 = *(_QWORD *)(this + 128);
        v129 = *(JSC::Heap ***)(this + 56);
        if ((v128 & 1) != 0)
        {
          v149 = *(uint64_t (**)(_QWORD *))(v128 & 0xFFFFFFFFFFFFFFFCLL);
          if ((this & 8) != 0)
            v150 = (_QWORD *)(this - 16);
          else
            v150 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
          v177[0] = *v150;
          v177[1] = this;
          v177[2] = this + 128;
          v128 = v149(v177);
        }
        v130 = JSC::ErrorInstance::create(v129, v128, &v174, 0, 0, 0, 2, 1);
        v137 = (JSC::Exception *)v130;
        if ((v130 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v130 & 0xFFFFFFFE) + 0x4C)))
        {
          v137 = (JSC::Exception *)JSC::Exception::create(v69, (JSC::VM *)v130, 0, v131, v132, v133, v134, v135);
        }
        JSC::VM::throwException((JSC::VM *)v69, (JSC::JSGlobalObject *)this, v137, v136, v131, v132, v133, v134, v135);
        v138 = v174;
        v174 = 0;
        if (v138)
        {
          if (*(_DWORD *)v138 == 2)
          {
            WTF::StringImpl::~StringImpl(v138, v42, (uint64_t)v56, v44, v45, v46, v47, v48);
            WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
          }
          else
          {
            *(_DWORD *)v138 -= 2;
          }
        }
      }
      v73 = 0;
LABEL_111:
      v114 = v175;
      v175 = 0;
      if (v114)
      {
        if (*(_DWORD *)v114 == 2)
        {
          WTF::StringImpl::~StringImpl(v114, v42, (uint64_t)v56, v44, v45, v46, v47, v48);
          WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
        }
        else
        {
          *(_DWORD *)v114 -= 2;
        }
      }
      goto LABEL_114;
    }
    *v112 += 2;
    goto LABEL_102;
  }
LABEL_48:
  std::array<std::optional<WTF::String>,6ul>::~array((uint64_t)&v158, v33, v34, v35, v36, v37, v38, v39);
LABEL_49:
  if (v172)
  {
    v90 = v170;
    v91 = 8 * v172;
    do
    {
      v92 = *(WTF::StringImpl **)v90;
      *(_QWORD *)v90 = 0;
      if (v92)
      {
        if (*(_DWORD *)v92 == 2)
        {
          WTF::StringImpl::~StringImpl(v92, v25, v26, v27, v28, v29, v30, v31);
          WTF::fastFree(v93, v94, v95, v96, v97, v98, v99, v100);
        }
        else
        {
          *(_DWORD *)v92 -= 2;
        }
      }
      v90 = (WTF *)((char *)v90 + 8);
      v91 -= 8;
    }
    while (v91);
  }
  v59 = v170;
  if (v170)
  {
    v170 = 0;
    v171 = 0;
    WTF::fastFree((unint64_t)v59, v25, v26, v27, v28, v29, v30, v31);
  }
  return SlowCase;
}

unint64_t JSC::IntlSegmenterPrototype::create(JSC::IntlSegmenterPrototype *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  JSC::VM *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t SlowCase;
  WTF::StringImpl *v48;

  v9 = (_QWORD *)((char *)this + 38904);
  v10 = *((_QWORD *)this + 4863);
  if (v10 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v10 = *((_QWORD *)this + 4865);
  if ((v10 & 1) == 0)
  {
    v42 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v10 + HIDWORD(v42);
    *((_QWORD *)this + 4865) = v10 + (int)v42;
LABEL_2:
    *v9 = v10 + 16;
    goto LABEL_3;
  }
  v43 = a2;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v44, v45, v46);
  a2 = v43;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = *(_QWORD *)(v9[381] + 2776);
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v13 = 0xE00000002;
  *(_QWORD *)(v13 + 8) = "Intl.Segmenter";
  *(_DWORD *)(v13 + 16) = 4;
  v48 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString((uint64_t)this, (JSC::VM *)&v48, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v10, (uint64_t)this, v12, v20, 6, v21, v22, v23, v24);
  v32 = v48;
  v48 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v10;
}

uint64_t JSC::IntlSegmenterPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlSegmenterPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::IntlSegments::visitChildren(JSC::IntlSegments *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 4);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::IntlSegments::visitChildren(JSC::IntlSegments *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 4));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::IntlSegments::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlSegments::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::IntlSegmentsPrototype::create(JSC::IntlSegmentsPrototype *this, JSC::VM *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  WTF::StringImpl *v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  WTF::StringImpl *v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC::VM *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t SlowCase;
  WTF::StringImpl *v76;

  v10 = (_QWORD *)((char *)this + 38904);
  v11 = *((_QWORD *)this + 4863);
  if (v11 < *((_QWORD *)this + 4864))
    goto LABEL_2;
  v11 = *((_QWORD *)this + 4865);
  if ((v11 & 1) == 0)
  {
    v51 = *(_QWORD *)(v11 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v11 + HIDWORD(v51);
    *((_QWORD *)this + 4865) = v11 + (int)v51;
LABEL_2:
    *v10 = v11 + 16;
    goto LABEL_3;
  }
  v71 = a2;
  JSC::sanitizeStackForVM(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)this + 38880, (uint64_t)this + 192, 16, 0, 0, v72, v73, v74);
  a2 = v71;
  v11 = SlowCase;
LABEL_3:
  *(_DWORD *)v11 = 0;
  v12 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v11 = (unint64_t)a3 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v13 = v10[381];
  v14 = *(WTF::StringImpl **)(v13 + 2712);
  if (v14)
  {
    v15 = *(_DWORD *)v14 + 2;
    *(_DWORD *)v14 = v15;
    if ((*((_BYTE *)v14 + 16) & 0x20) != 0)
    {
      v16 = *(WTF::StringImpl **)(v13 + 872);
      if (!v16)
        goto LABEL_9;
      v15 = *(_DWORD *)v16;
    }
    else
    {
      v16 = v14;
    }
    *(_DWORD *)v16 = v15 + 2;
LABEL_9:
    v76 = v16;
    v24 = JSC::JSFunction::create((uint64_t)this, (uint64_t)a2, 0, &v76, (uint64_t)JSC::intlSegmentsPrototypeFuncIterator, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v26 = v76;
    v76 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, v17, v18, v19, v20, v21, v22, v23);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v11, (uint64_t)this, (unint64_t)v14, v24, 4, v21, v22, v23, v25);
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::~StringImpl(v14, v27, v28, v29, v30, v31, v32, v33);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
    return v11;
  }
  v52 = *(WTF::StringImpl **)(v13 + 872);
  if (v52)
    *(_DWORD *)v52 += 2;
  v76 = v52;
  v60 = JSC::JSFunction::create((uint64_t)this, (uint64_t)a2, 0, &v76, (uint64_t)JSC::intlSegmentsPrototypeFuncIterator, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v62 = v76;
  v76 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v11, (uint64_t)this, 0, v60, 4, v57, v58, v59, v61);
  return v11;
}

uint64_t JSC::IntlSegmentsPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 8215;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::IntlSegmentsPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::intlSegmentsPrototypeFuncIterator(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  JSC::VM *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  unint64_t result;
  int v21;
  uint64_t (*v22)(_QWORD *);
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::VM *v28;
  int v29;
  uint64_t v30;
  _QWORD v31[3];

  v4 = *(_QWORD *)(this + 56);
  v28 = (JSC::VM *)v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0
    || &JSC::IntlSegments::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v28, (uint64_t)"%Segments.prototype%[@@iterator] called on value that's not a Segments", 71);
  }
  v30 = v4;
  v29 = 0;
  v6 = ubrk_clone();
  ubrk_first();
  v14 = *(_QWORD *)(this + 360);
  if ((v14 & 1) != 0)
  {
    v22 = *(uint64_t (**)(_QWORD *))(v14 & 0xFFFFFFFFFFFFFFFCLL);
    v23 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v23 = (_QWORD *)(this - 16);
    v31[0] = *v23;
    v31[1] = this;
    v31[2] = this + 360;
    v14 = v22(v31);
  }
  v15 = *(unsigned int **)(v5 + 24);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  v17 = *(_QWORD *)(v5 + 32);
  v18 = *(_BYTE *)(v5 + 40);
  v19 = *(_QWORD **)(v4 + 40608);
  if (!v19)
    v19 = (_QWORD *)JSC::GCClient::Heap::intlSegmentIteratorSpaceSlow((JSC::Heap **)(v4 + 37552));
  result = v19[3];
  if (result < v19[4])
    goto LABEL_9;
  result = v19[5];
  if ((result & 1) == 0)
  {
    v24 = *(_QWORD *)(result + 8) ^ v19[6];
    v19[4] = result + HIDWORD(v24);
    v19[5] = result + (int)v24;
LABEL_9:
    v19[3] = result + 48;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM((JSC *)v4, v7, v8, v9, v10, v11, v12, v13);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v19, v4 + 192, 48, 0, 0, v25, v26, v27);
LABEL_10:
  *(_DWORD *)result = 0;
  v21 = *(_DWORD *)(v14 + 8);
  *(_DWORD *)result = v14 >> 4;
  *(_DWORD *)(result + 4) = v21;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v15;
  *(_QWORD *)(result + 32) = v17;
  *(_BYTE *)(result + 40) = v18;
  if (*(_BYTE *)(v4 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::intlRelativeTimeFormatPrototypeFuncFormat(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;

  v10 = *((_QWORD *)this + 7);
  v35 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlRelativeTimeFormat::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)"Intl.RelativeTimeFormat.prototype.format called on value that's not a RelativeTimeFormat", 89);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v34 = (WTF::StringImpl *)10;
    goto LABEL_28;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  v34 = v13;
  if ((unint64_t)v13 >= 0xFFFE000000000000)
  {
    v15 = (double)(int)v13;
    goto LABEL_8;
  }
  v14 = (unint64_t)v13 - 0x2000000000000;
  if (v14 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_28:
    JSC::JSValue::toNumberSlowCase(&v34, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v15 = *(double *)a9.i64;
    goto LABEL_8;
  }
  v15 = *(double *)&v14;
LABEL_8:
  if (*(_DWORD *)(v10 + 80))
  {
    v31 = *(_DWORD *)(v10 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v33 = 10;
  }
  else
  {
    v16 = *((_QWORD *)a2 + 7);
    v33 = v16;
    if ((v16 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v16 + 5) == 2)
    {
      v17 = *(int **)(v16 + 8);
      if ((v17 & 1) != 0)
      {
        v17 = *JSC::JSRopeString::resolveRope(v16, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (!v17)
          goto LABEL_15;
      }
      else if (!v17)
      {
LABEL_15:
        v34 = (WTF::StringImpl *)v17;
        goto LABEL_16;
      }
      *v17 += 2;
      goto LABEL_15;
    }
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v33, this, a3, a4, a5, a6, a7, a8, (int **)&v34);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_17;
LABEL_16:
  v32 = *(_DWORD *)(v10 + 80);
  if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
  {
    v20 = 0;
  }
  else
  {
LABEL_17:
    if (v34)
    {
      v18 = *((_QWORD *)v34 + 1);
      v19 = *((unsigned int *)v34 + 1) | ((unint64_t)((*((_DWORD *)v34 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v18 = 0;
      v19 = 0x100000000;
    }
    *(double *)a9.i64 = v15;
    v20 = JSC::IntlRelativeTimeFormat::format(v11, (unint64_t)this, v18, v19, (__n128)a9);
  }
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  return v20;
}

unint64_t JSC::intlRelativeTimeFormatPrototypeFuncFormatToParts(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  int *v17;
  _WORD *v18;
  unint64_t v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;

  v10 = *((_QWORD *)this + 7);
  v35 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlRelativeTimeFormat::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v35, (uint64_t)"Intl.RelativeTimeFormat.prototype.formatToParts called on value that's not a RelativeTimeFormat", 96);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v34 = (WTF::StringImpl *)10;
    goto LABEL_28;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  v34 = v13;
  if ((unint64_t)v13 >= 0xFFFE000000000000)
  {
    v15 = (double)(int)v13;
    goto LABEL_8;
  }
  v14 = (unint64_t)v13 - 0x2000000000000;
  if (v14 > 0xFFFBFFFFFFFFFFFFLL)
  {
LABEL_28:
    JSC::JSValue::toNumberSlowCase(&v34, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    v15 = *(double *)a9.i64;
    goto LABEL_8;
  }
  v15 = *(double *)&v14;
LABEL_8:
  if (*(_DWORD *)(v10 + 80))
  {
    v31 = *(_DWORD *)(v10 + 80);
    if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v33 = 10;
  }
  else
  {
    v16 = *((_QWORD *)a2 + 7);
    v33 = v16;
    if ((v16 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v16 + 5) == 2)
    {
      v17 = *(int **)(v16 + 8);
      if ((v17 & 1) != 0)
      {
        v17 = *JSC::JSRopeString::resolveRope(v16, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (!v17)
          goto LABEL_15;
      }
      else if (!v17)
      {
LABEL_15:
        v34 = (WTF::StringImpl *)v17;
        goto LABEL_16;
      }
      *v17 += 2;
      goto LABEL_15;
    }
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v33, this, a3, a4, a5, a6, a7, a8, (int **)&v34);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_17;
LABEL_16:
  v32 = *(_DWORD *)(v10 + 80);
  if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
  {
    v20 = 0;
  }
  else
  {
LABEL_17:
    if (v34)
    {
      v18 = (_WORD *)*((_QWORD *)v34 + 1);
      v19 = *((unsigned int *)v34 + 1) | ((unint64_t)((*((_DWORD *)v34 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v18 = 0;
      v19 = 0x100000000;
    }
    *(double *)a9.i64 = v15;
    v20 = JSC::IntlRelativeTimeFormat::formatToParts(v11, (unint64_t)this, v18, v19, (__n128)a9);
  }
  v21 = v34;
  v34 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  return v20;
}

unint64_t JSC::intlRelativeTimeFormatPrototypeFuncResolvedOptions(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::IntlRelativeTimeFormat *v9;
  JSC::VM *v11;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v9 = (JSC::IntlRelativeTimeFormat *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v9 & 0xFFFE000000000002) != 0
    || &JSC::IntlRelativeTimeFormat::s_info != (char **)(16
                                                       * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v11, (uint64_t)"Intl.RelativeTimeFormat.prototype.resolvedOptions called on value that's not a RelativeTimeFormat", 98);
  }
  else
  {
    return JSC::IntlRelativeTimeFormat::resolvedOptions(v9, this, a3, a4, a5, a6, a7, a8);
  }
}

unint64_t JSC::intlSegmentIteratorPrototypeFuncNext(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  JSC::JSString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t SegmentDataObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC *v17;
  int v18;
  int v20;
  unint64_t v21;
  JSC::VM *v22;

  v4 = *((_QWORD *)this + 7);
  v22 = (JSC::VM *)v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0
    || &JSC::IntlSegmentIterator::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v22, (uint64_t)"Intl.SegmentIterator.prototype.next called on value that's not a SegmentIterator", 81);
  }
  v6 = (JSC::JSString *)ubrk_current();
  v7 = ubrk_next();
  if ((_DWORD)v7 == -1)
  {
    v17 = this;
    SegmentDataObject = 10;
    v18 = 1;
  }
  else
  {
    SegmentDataObject = JSC::IntlSegmenter::createSegmentDataObject((uint64_t)this, *(JSC::JSGlobalObject **)(v5 + 32), v6, v7, *(_QWORD *)(v5 + 16), *(unsigned __int8 *)(v5 + 40), v8, v9);
    if (*(_DWORD *)(v4 + 80))
    {
      v20 = *(_DWORD *)(v4 + 80);
      if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      {
        v21 = SegmentDataObject;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v11, v12, v13, v14, v15, v16);
        SegmentDataObject = v21;
      }
      if (*(_QWORD *)(v4 + 16))
        return 0;
    }
    v17 = this;
    v18 = 0;
  }
  return JSC::createIteratorResultObject((unint64_t)v17, SegmentDataObject, v18);
}

void JSC::IntlSegmenter::initializeSegmenter(JSC::JSGlobalObject *,JSC::JSValue,JSC::JSValue)::$_0::__invoke(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t JSC::intlSegmenterConstructorSupportedLocalesOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  WTF *v38;
  int v39;
  unsigned int v40;
  char v41;
  WTF **v42;

  v11 = *((_QWORD *)this + 7);
  v12 = atomic_load(&JSC::intlSegmenterAvailableLocales(void)::initializeOnce);
  if (v12 != -1)
  {
    v38 = (WTF *)&v41;
    v42 = &v38;
    std::__call_once(&JSC::intlSegmenterAvailableLocales(void)::initializeOnce, &v42, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::intlSegmenterAvailableLocales(void)::$_0 &&>>);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  JSC::canonicalizeLocaleList((unint64_t)this, v13, (uint64_t)a3, a4, a5, a6, a7, a8, &v38, a9);
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_6;
  v37 = *(_DWORD *)(v11 + 80);
  if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v15, v16, v17, v18, v19, v20);
  if (*(_QWORD *)(v11 + 16))
  {
    v23 = 0;
  }
  else
  {
LABEL_6:
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v21 = 10;
    else
      v21 = *((_QWORD *)a2 + 7);
    JSC::supportedLocales(this, (const WTF::StringImpl *)&JSC::intlSegmenterAvailableLocales(void)::availableLocales, (JSC::Structure *)&v38, v21, v17, v18, v19, v20);
    v23 = v22;
  }
  if (v40)
  {
    v26 = v38;
    v27 = 8 * v40;
    do
    {
      v28 = *(WTF::StringImpl **)v26;
      *(_QWORD *)v26 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, v14, v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      v26 = (WTF *)((char *)v26 + 8);
      v27 -= 8;
    }
    while (v27);
  }
  v24 = v38;
  if (v38)
  {
    v38 = 0;
    v39 = 0;
    WTF::fastFree((unint64_t)v24, v14, v15, v16, v17, v18, v19, v20);
  }
  return v23;
}

unint64_t JSC::intlSegmenterPrototypeFuncSegment(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int **v13;
  JSC::JSGlobalObject *v14;
  unint64_t OutOfMemoryError;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  JSC::Exception *v22;
  JSC::VM *v23;
  unint64_t result;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  JSC::VM *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t SlowCase;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  int v40;
  int v41;
  int v42;
  uint64_t (*v43)(_QWORD *);
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  JSC::VM *v50;
  int v51;
  void *__src;
  unsigned int v53;
  int v54;
  JSC::VM *v55;
  uint64_t v56;
  _QWORD v57[3];

  v10 = *(_QWORD *)(this + 56);
  v50 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || &JSC::IntlSegmenter::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError(this, &v50, (uint64_t)"Intl.Segmenter.prototype.segment called on value that's not a Segmenter", 72);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v55 = (JSC::VM *)v10;
    v56 = 10;
  }
  else
  {
    v12 = *((_QWORD *)a2 + 6);
    v55 = (JSC::VM *)v10;
    v56 = v12;
    if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
      goto LABEL_6;
  }
  v12 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v56, this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_6:
  if (*(_DWORD *)(v10 + 80))
  {
    v41 = *(_DWORD *)(v10 + 80);
    if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v13 = (int **)(v12 + 8);
  if ((*(_BYTE *)(v12 + 8) & 1) != 0)
    v13 = JSC::JSRopeString::resolveRope(v12, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v42 = *(_DWORD *)(v10 + 80);
    if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  WTF::String::charactersWithoutNullTermination((WTF::String *)v13, (uint64_t)&__src);
  if (v54)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError(this, v14);
    v22 = (JSC::Exception *)OutOfMemoryError;
    v23 = v55;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v22 = (JSC::Exception *)JSC::Exception::create((uint64_t)v55, (JSC::VM *)OutOfMemoryError, 0, v16, v17, v18, v19, v20);
    }
    JSC::VM::throwException(v23, (JSC::JSGlobalObject *)this, v22, v21, v16, v17, v18, v19, v20);
    SlowCase = 0;
LABEL_18:
    if (v54 != -1)
      ((void (*)(_QWORD *, void **))off_1E359E0F0[v54])(v57, &__src);
    return SlowCase;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  v25 = result;
  *(_DWORD *)result = 1;
  v26 = v53;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v26;
  if (!(_DWORD)v26)
  {
LABEL_17:
    v51 = 0;
    v28 = ubrk_clone();
    ubrk_setText();
    v37 = *(_QWORD *)(this + 376);
    if ((v37 & 1) != 0)
    {
      v43 = *(uint64_t (**)(_QWORD *))(v37 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v44 = (_QWORD *)(this - 16);
      else
        v44 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
      v57[0] = *v44;
      v57[1] = this;
      v57[2] = this + 376;
      v37 = v43(v57);
    }
    v38 = *(_BYTE *)(v11 + 32);
    v39 = *(_QWORD **)(v10 + 40624);
    if (!v39)
      v39 = (_QWORD *)JSC::GCClient::Heap::intlSegmentsSpaceSlow((JSC::Heap **)(v10 + 37552));
    SlowCase = v39[3];
    if (SlowCase >= v39[4])
    {
      v49 = (uint64_t)v39;
      SlowCase = v39[5];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v10, v29, v30, v31, v32, v33, v34, v35);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v49, v10 + 192, 48, 0, 0, v46, v47, v48);
      }
      else
      {
        v45 = *(_QWORD *)(SlowCase + 8) ^ v39[6];
        v39[4] = SlowCase + HIDWORD(v45);
        v39[5] = SlowCase + (int)v45;
        v39[3] = SlowCase + 48;
      }
    }
    else
    {
      v39[3] = SlowCase + 48;
    }
    *(_DWORD *)SlowCase = 0;
    v40 = *(_DWORD *)(v37 + 8);
    *(_DWORD *)SlowCase = v37 >> 4;
    *(_DWORD *)(SlowCase + 4) = v40;
    *(_QWORD *)(SlowCase + 8) = 0;
    *(_QWORD *)(SlowCase + 16) = v28;
    *(_QWORD *)(SlowCase + 24) = v25;
    *(_QWORD *)(SlowCase + 32) = v12;
    *(_BYTE *)(SlowCase + 40) = v38;
    if (*(_BYTE *)(v10 + 755))
      __dmb(0xAu);
    goto LABEL_18;
  }
  if ((v26 & 0x80000000) == 0)
  {
    v27 = (void *)WTF::fastMalloc((WTF *)(2 * v26));
    *(_DWORD *)(v25 + 16) = v26;
    *(_QWORD *)(v25 + 8) = v27;
    memcpy(v27, __src, 2 * v53);
    goto LABEL_17;
  }
  __break(0xC471u);
  return result;
}

unint64_t JSC::intlSegmenterPrototypeFuncResolvedOptions(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t SlowCase;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  WTF::AtomStringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  unint64_t result;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  JSC *v57;
  JSC *v58;
  JSC::VM *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  uint64_t v65;

  v8 = *((_QWORD *)this + 7);
  v59 = (JSC::VM *)v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0
    || &JSC::IntlSegmenter::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v59, (uint64_t)"Intl.Segmenter.prototype.resolvedOptions called on value that's not a Segmenter", 80);
  }
  v10 = *(_QWORD *)(v8 + 15056);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 + 60);
    SlowCase = *(_QWORD *)(v10 + 24);
    if (SlowCase >= *(_QWORD *)(v10 + 32))
    {
      SlowCase = *(_QWORD *)(v10 + 40);
      if ((SlowCase & 1) != 0)
      {
        v58 = this;
        v51 = *((_QWORD *)a2 + 5);
        v52 = *(unsigned int *)(v10 + 60);
        JSC::sanitizeStackForVM((JSC *)v8, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v53 = v52;
        v9 = v51;
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, v8 + 192, v53, 0, 0, v54, v55, v56);
        this = v58;
        goto LABEL_6;
      }
      v50 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 48);
      *(_QWORD *)(v10 + 32) = SlowCase + HIDWORD(v50);
      *(_QWORD *)(v10 + 40) = SlowCase + (int)v50;
    }
    *(_QWORD *)(v10 + 24) = SlowCase + v11;
LABEL_6:
    *(_DWORD *)SlowCase = 0;
    *(_DWORD *)SlowCase = *((_DWORD *)this + 212);
    *(_DWORD *)(SlowCase + 4) = 16783360;
    *(_OWORD *)(SlowCase + 8) = 0u;
    *(_OWORD *)(SlowCase + 24) = 0u;
    *(_OWORD *)(SlowCase + 40) = 0u;
    *(_QWORD *)(SlowCase + 56) = 0;
    if (*(_BYTE *)(v8 + 755))
      __dmb(0xAu);
    v13 = *(_QWORD *)(*(_QWORD *)(v8 + 41952) + 1784);
    v14 = JSC::jsString((JSC *)v8, (JSC::VM *)(v9 + 24), a3, a4, a5, a6, a7, a8);
    v61 = 0;
    v62 = SlowCase;
    v63 = -1;
    v15.n128_u64[0] = 0x100000001000000;
    v64 = 0x1000000;
    v65 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v13, v14, 0, (uint64_t)&v61, v16, v17, v15);
    v24 = 0;
    v25 = *(_QWORD *)(*(_QWORD *)(v8 + 41952) + 1408);
    v26 = *(char *)(v9 + 32);
    if (v26 <= 2)
    {
      v27 = off_1E359E1A0[v26];
      v28 = dword_199158034[v26];
      v24 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v24 = 2;
      *(_DWORD *)(v24 + 4) = v28;
      *(_QWORD *)(v24 + 8) = v27;
      *(_DWORD *)(v24 + 16) = 4;
    }
    v60 = (WTF::StringImpl *)v24;
    v29 = JSC::jsNontrivialString(v8, (JSC::VM *)&v60, v18, v19, v20, v21, v22, v23);
    v61 = 0;
    v62 = SlowCase;
    v63 = -1;
    v30.n128_u64[0] = 0x100000001000000;
    v64 = 0x1000000;
    v65 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)SlowCase, v8, v25, v29, 0, (uint64_t)&v61, v31, v32, v30);
    v40 = v60;
    v60 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
      {
        WTF::StringImpl::~StringImpl(v40, v33, v34, v35, v36, v37, v38, v39);
        WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
      }
      else
      {
        *(_DWORD *)v40 -= 2;
      }
    }
    return SlowCase;
  }
  v57 = this;
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v8 + 14936, (JSC *)v8, 0x40uLL, 0, a5, a6, a7, a8);
  this = v57;
  if (SlowCase)
    goto LABEL_6;
  result = 110;
  __break(0xC471u);
  return result;
}

unint64_t JSC::intlSegmentsPrototypeFuncContaining(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10)
{
  uint64_t v11;
  uint64_t v12;
  JSC::JSObject *v13;
  double v14;
  unsigned int v16;
  JSC::JSString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  int v22;
  unint64_t v23;
  double v24;
  JSC::VM *v25;
  uint64_t v26;

  v11 = *((_QWORD *)this + 7);
  v25 = (JSC::VM *)v11;
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0
    || &JSC::IntlSegments::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError((unint64_t)this, &v25, (uint64_t)"%Segments.prototype%.containing called on value that's not a Segments", 70);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26 = 10;
    goto LABEL_17;
  }
  v13 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v26 = (uint64_t)v13;
  if ((unint64_t)v13 < 0xFFFE000000000000)
  {
    v23 = (unint64_t)v13 - 0x2000000000000;
    if (v23 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v21 = *(double *)&v23;
      goto LABEL_18;
    }
LABEL_17:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v26, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_18:
    HIDWORD(a10) = 0;
    v14 = trunc(v21 + 0.0);
    goto LABEL_6;
  }
  v14 = (double)(int)v13;
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_29;
LABEL_6:
  v22 = *(_DWORD *)(v11 + 80);
  if ((v22 & 0x27) != 0 && (v22 & 0x20) == 0)
  {
    v24 = v14;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v14 = v24;
  }
  if (*(_QWORD *)(v11 + 16))
    return 0;
LABEL_29:
  if (v14 < 0.0)
    return 10;
  LODWORD(a10) = *(_DWORD *)(*(_QWORD *)(v12 + 24) + 20);
  if (v14 >= (double)*(unint64_t *)&a10)
    return 10;
  v16 = ubrk_preceding();
  if (v16 == -1)
    v17 = 0;
  else
    v17 = (JSC::JSString *)v16;
  v18 = ubrk_following();
  if ((_DWORD)v18 == -1)
    v18 = *(unsigned int *)(*(_QWORD *)(v12 + 24) + 20);
  return JSC::IntlSegmenter::createSegmentDataObject((uint64_t)this, *(JSC::JSGlobalObject **)(v12 + 32), v17, v18, *(_QWORD *)(v12 + 16), *(unsigned __int8 *)(v12 + 40), v19, v20);
}

const char *JSC::intrinsicName()
{
  const char *result;

  result = "NoIntrinsic";
  switch("NoIntrinsic")
  {
    case 0u:
      return result;
    case 1u:
      result = "AbsIntrinsic";
      break;
    case 2u:
      result = "ACosIntrinsic";
      break;
    case 3u:
      result = "ASinIntrinsic";
      break;
    case 4u:
      result = "ATanIntrinsic";
      break;
    case 5u:
      result = "ACoshIntrinsic";
      break;
    case 6u:
      result = "ASinhIntrinsic";
      break;
    case 7u:
      result = "ATanhIntrinsic";
      break;
    case 8u:
      result = "MinIntrinsic";
      break;
    case 9u:
      result = "MaxIntrinsic";
      break;
    case 0xAu:
      result = "SqrtIntrinsic";
      break;
    case 0xBu:
      result = "SinIntrinsic";
      break;
    case 0xCu:
      result = "CbrtIntrinsic";
      break;
    case 0xDu:
      result = "Clz32Intrinsic";
      break;
    case 0xEu:
      result = "CosIntrinsic";
      break;
    case 0xFu:
      result = "TanIntrinsic";
      break;
    case 0x10u:
      result = "CoshIntrinsic";
      break;
    case 0x11u:
      result = "SinhIntrinsic";
      break;
    case 0x12u:
      result = "TanhIntrinsic";
      break;
    case 0x13u:
      result = "ArrayPushIntrinsic";
      break;
    case 0x14u:
      result = "ArrayPopIntrinsic";
      break;
    case 0x15u:
      result = "ArraySliceIntrinsic";
      break;
    case 0x16u:
      result = "ArraySpliceIntrinsic";
      break;
    case 0x17u:
      result = "ArrayIndexOfIntrinsic";
      break;
    case 0x18u:
      result = "ArrayValuesIntrinsic";
      break;
    case 0x19u:
      result = "ArrayKeysIntrinsic";
      break;
    case 0x1Au:
      result = "ArrayEntriesIntrinsic";
      break;
    case 0x1Bu:
      result = "BooleanConstructorIntrinsic";
      break;
    case 0x1Cu:
      result = "CharCodeAtIntrinsic";
      break;
    case 0x1Du:
      result = "CharAtIntrinsic";
      break;
    case 0x1Eu:
      result = "DatePrototypeGetTimeIntrinsic";
      break;
    case 0x1Fu:
      result = "DatePrototypeGetFullYearIntrinsic";
      break;
    case 0x20u:
      result = "DatePrototypeGetUTCFullYearIntrinsic";
      break;
    case 0x21u:
      result = "DatePrototypeGetMonthIntrinsic";
      break;
    case 0x22u:
      result = "DatePrototypeGetUTCMonthIntrinsic";
      break;
    case 0x23u:
      result = "DatePrototypeGetDateIntrinsic";
      break;
    case 0x24u:
      result = "DatePrototypeGetUTCDateIntrinsic";
      break;
    case 0x25u:
      result = "DatePrototypeGetDayIntrinsic";
      break;
    case 0x26u:
      result = "DatePrototypeGetUTCDayIntrinsic";
      break;
    case 0x27u:
      result = "DatePrototypeGetHoursIntrinsic";
      break;
    case 0x28u:
      result = "DatePrototypeGetUTCHoursIntrinsic";
      break;
    case 0x29u:
      result = "DatePrototypeGetMinutesIntrinsic";
      break;
    case 0x2Au:
      result = "DatePrototypeGetUTCMinutesIntrinsic";
      break;
    case 0x2Bu:
      result = "DatePrototypeGetSecondsIntrinsic";
      break;
    case 0x2Cu:
      result = "DatePrototypeGetUTCSecondsIntrinsic";
      break;
    case 0x2Du:
      result = "DatePrototypeGetMillisecondsIntrinsic";
      break;
    case 0x2Eu:
      result = "DatePrototypeGetUTCMillisecondsIntrinsic";
      break;
    case 0x2Fu:
      result = "DatePrototypeGetTimezoneOffsetIntrinsic";
      break;
    case 0x30u:
      result = "DatePrototypeGetYearIntrinsic";
      break;
    case 0x31u:
      result = "DatePrototypeSetTimeIntrinsic";
      break;
    case 0x32u:
      result = "FromCharCodeIntrinsic";
      break;
    case 0x33u:
      result = "GlobalIsNaNIntrinsic";
      break;
    case 0x34u:
      result = "PowIntrinsic";
      break;
    case 0x35u:
      result = "FloorIntrinsic";
      break;
    case 0x36u:
      result = "CeilIntrinsic";
      break;
    case 0x37u:
      result = "RoundIntrinsic";
      break;
    case 0x38u:
      result = "ExpIntrinsic";
      break;
    case 0x39u:
      result = "Expm1Intrinsic";
      break;
    case 0x3Au:
      result = "LogIntrinsic";
      break;
    case 0x3Bu:
      result = "Log10Intrinsic";
      break;
    case 0x3Cu:
      result = "Log1pIntrinsic";
      break;
    case 0x3Du:
      result = "Log2Intrinsic";
      break;
    case 0x3Eu:
      result = "RegExpExecIntrinsic";
      break;
    case 0x3Fu:
      result = "RegExpTestIntrinsic";
      break;
    case 0x40u:
      result = "RegExpTestFastIntrinsic";
      break;
    case 0x41u:
      result = "RegExpMatchFastIntrinsic";
      break;
    case 0x42u:
      result = "ObjectAssignIntrinsic";
      break;
    case 0x43u:
      result = "ObjectCreateIntrinsic";
      break;
    case 0x44u:
      result = "ObjectGetOwnPropertyNamesIntrinsic";
      break;
    case 0x45u:
      result = "ObjectGetOwnPropertySymbolsIntrinsic";
      break;
    case 0x46u:
      result = "ObjectGetPrototypeOfIntrinsic";
      break;
    case 0x47u:
      result = "ObjectIsIntrinsic";
      break;
    case 0x48u:
      result = "ObjectKeysIntrinsic";
      break;
    case 0x49u:
      result = "ObjectToStringIntrinsic";
      break;
    case 0x4Au:
      result = "ReflectGetPrototypeOfIntrinsic";
      break;
    case 0x4Bu:
      result = "ReflectOwnKeysIntrinsic";
      break;
    case 0x4Cu:
      result = "StringConstructorIntrinsic";
      break;
    case 0x4Du:
      result = "StringPrototypeCodePointAtIntrinsic";
      break;
    case 0x4Eu:
      result = "StringPrototypeIndexOfIntrinsic";
      break;
    case 0x4Fu:
      result = "StringPrototypeLocaleCompareIntrinsic";
      break;
    case 0x50u:
      result = "StringPrototypeValueOfIntrinsic";
      break;
    case 0x51u:
      result = "StringPrototypeReplaceIntrinsic";
      break;
    case 0x52u:
      result = "StringPrototypeReplaceRegExpIntrinsic";
      break;
    case 0x53u:
      result = "StringPrototypeReplaceStringIntrinsic";
      break;
    case 0x54u:
      result = "StringPrototypeSliceIntrinsic";
      break;
    case 0x55u:
      result = "StringPrototypeSubstringIntrinsic";
      break;
    case 0x56u:
      result = "StringPrototypeToLowerCaseIntrinsic";
      break;
    case 0x57u:
      result = "NumberPrototypeToStringIntrinsic";
      break;
    case 0x58u:
      result = "NumberIsNaNIntrinsic";
      break;
    case 0x59u:
      result = "NumberIsIntegerIntrinsic";
      break;
    case 0x5Au:
      result = "NumberConstructorIntrinsic";
      break;
    case 0x5Bu:
      result = "IMulIntrinsic";
      break;
    case 0x5Cu:
      result = "RandomIntrinsic";
      break;
    case 0x5Du:
      result = "FRoundIntrinsic";
      break;
    case 0x5Eu:
      result = "ToIntegerOrInfinityIntrinsic";
      break;
    case 0x5Fu:
      result = "ToLengthIntrinsic";
      break;
    case 0x60u:
      result = "TruncIntrinsic";
      break;
    case 0x61u:
      result = "TypedArrayValuesIntrinsic";
      break;
    case 0x62u:
      result = "TypedArrayKeysIntrinsic";
      break;
    case 0x63u:
      result = "TypedArrayEntriesIntrinsic";
      break;
    case 0x64u:
      result = "IsTypedArrayViewIntrinsic";
      break;
    case 0x65u:
      result = "BoundFunctionCallIntrinsic";
      break;
    case 0x66u:
      result = "RemoteFunctionCallIntrinsic";
      break;
    case 0x67u:
      result = "JSMapGetIntrinsic";
      break;
    case 0x68u:
      result = "JSMapHasIntrinsic";
      break;
    case 0x69u:
      result = "JSMapSetIntrinsic";
      break;
    case 0x6Au:
      result = "JSMapDeleteIntrinsic";
      break;
    case 0x6Bu:
      result = "JSMapValuesIntrinsic";
      break;
    case 0x6Cu:
      result = "JSMapKeysIntrinsic";
      break;
    case 0x6Du:
      result = "JSMapEntriesIntrinsic";
      break;
    case 0x6Eu:
      result = "JSMapStorageIntrinsic";
      break;
    case 0x6Fu:
      result = "JSMapIterationNextIntrinsic";
      break;
    case 0x70u:
      result = "JSMapIterationEntryIntrinsic";
      break;
    case 0x71u:
      result = "JSMapIterationEntryKeyIntrinsic";
      break;
    case 0x72u:
      result = "JSMapIterationEntryValueIntrinsic";
      break;
    case 0x73u:
      result = "JSSetStorageIntrinsic";
      break;
    case 0x74u:
      result = "JSSetIterationNextIntrinsic";
      break;
    case 0x75u:
      result = "JSSetIterationEntryIntrinsic";
      break;
    case 0x76u:
      result = "JSSetIterationEntryKeyIntrinsic";
      break;
    case 0x77u:
      result = "JSMapIteratorNextIntrinsic";
      break;
    case 0x78u:
      result = "JSMapIteratorKeyIntrinsic";
      break;
    case 0x79u:
      result = "JSMapIteratorValueIntrinsic";
      break;
    case 0x7Au:
      result = "JSSetIteratorNextIntrinsic";
      break;
    case 0x7Bu:
      result = "JSSetIteratorKeyIntrinsic";
      break;
    case 0x7Cu:
      result = "JSSetHasIntrinsic";
      break;
    case 0x7Du:
      result = "JSSetAddIntrinsic";
      break;
    case 0x7Eu:
      result = "JSSetDeleteIntrinsic";
      break;
    case 0x7Fu:
      result = "JSSetValuesIntrinsic";
      break;
    case 0x80u:
      result = "JSSetEntriesIntrinsic";
      break;
    case 0x81u:
      result = "JSWeakMapGetIntrinsic";
      break;
    case 0x82u:
      result = "JSWeakMapHasIntrinsic";
      break;
    case 0x83u:
      result = "JSWeakMapSetIntrinsic";
      break;
    case 0x84u:
      result = "JSWeakSetHasIntrinsic";
      break;
    case 0x85u:
      result = "JSWeakSetAddIntrinsic";
      break;
    case 0x86u:
      result = "HasOwnPropertyIntrinsic";
      break;
    case 0x87u:
      result = "AtomicsAddIntrinsic";
      break;
    case 0x88u:
      result = "AtomicsAndIntrinsic";
      break;
    case 0x89u:
      result = "AtomicsCompareExchangeIntrinsic";
      break;
    case 0x8Au:
      result = "AtomicsExchangeIntrinsic";
      break;
    case 0x8Bu:
      result = "AtomicsIsLockFreeIntrinsic";
      break;
    case 0x8Cu:
      result = "AtomicsLoadIntrinsic";
      break;
    case 0x8Du:
      result = "AtomicsNotifyIntrinsic";
      break;
    case 0x8Eu:
      result = "AtomicsOrIntrinsic";
      break;
    case 0x8Fu:
      result = "AtomicsStoreIntrinsic";
      break;
    case 0x90u:
      result = "AtomicsSubIntrinsic";
      break;
    case 0x91u:
      result = "AtomicsWaitIntrinsic";
      break;
    case 0x92u:
      result = "AtomicsWaitAsyncIntrinsic";
      break;
    case 0x93u:
      result = "AtomicsXorIntrinsic";
      break;
    case 0x94u:
      result = "ParseIntIntrinsic";
      break;
    case 0x95u:
      result = "FunctionToStringIntrinsic";
      break;
    case 0x96u:
      result = "FunctionBindIntrinsic";
      break;
    case 0x97u:
      result = "TypedArrayLengthIntrinsic";
      break;
    case 0x98u:
      result = "TypedArrayByteLengthIntrinsic";
      break;
    case 0x99u:
      result = "TypedArrayByteOffsetIntrinsic";
      break;
    case 0x9Au:
      result = "UnderscoreProtoIntrinsic";
      break;
    case 0x9Bu:
      result = "SpeciesGetterIntrinsic";
      break;
    case 0x9Cu:
      result = "WebAssemblyInstanceExportsIntrinsic";
      break;
    case 0x9Du:
      result = "DFGTrueIntrinsic";
      break;
    case 0x9Eu:
      result = "FTLTrueIntrinsic";
      break;
    case 0x9Fu:
      result = "OSRExitIntrinsic";
      break;
    case 0xA0u:
      result = "IsFinalTierIntrinsic";
      break;
    case 0xA1u:
      result = "SetInt32HeapPredictionIntrinsic";
      break;
    case 0xA2u:
      result = "CheckInt32Intrinsic";
      break;
    case 0xA3u:
      result = "FiatInt52Intrinsic";
      break;
    case 0xA4u:
      result = "CPUMfenceIntrinsic";
      break;
    case 0xA5u:
      result = "CPURdtscIntrinsic";
      break;
    case 0xA6u:
      result = "CPUCpuidIntrinsic";
      break;
    case 0xA7u:
      result = "CPUPauseIntrinsic";
      break;
    case 0xA8u:
      result = "DataViewGetInt8";
      break;
    case 0xA9u:
      result = "DataViewGetUint8";
      break;
    case 0xAAu:
      result = "DataViewGetInt16";
      break;
    case 0xABu:
      result = "DataViewGetUint16";
      break;
    case 0xACu:
      result = "DataViewGetInt32";
      break;
    case 0xADu:
      result = "DataViewGetUint32";
      break;
    case 0xAEu:
      result = "DataViewGetFloat32";
      break;
    case 0xAFu:
      result = "DataViewGetFloat64";
      break;
    case 0xB0u:
      result = "DataViewSetInt8";
      break;
    case 0xB1u:
      result = "DataViewSetUint8";
      break;
    case 0xB2u:
      result = "DataViewSetInt16";
      break;
    case 0xB3u:
      result = "DataViewSetUint16";
      break;
    case 0xB4u:
      result = "DataViewSetInt32";
      break;
    case 0xB5u:
      result = "DataViewSetUint32";
      break;
    case 0xB6u:
      result = "DataViewSetFloat32";
      break;
    case 0xB7u:
      result = "DataViewSetFloat64";
      break;
    case 0xB8u:
      result = "WasmFunctionIntrinsic";
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198978054);
  }
  return result;
}

uint64_t WTF::printInternal(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::PrintStream *v6;
  float v7;
  unsigned int v8;
  uint64_t v10;
  int v11;
  char v12;

  v2 = (char *)JSC::intrinsicName();
  v4 = v3;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  if (v2)
  {
    v8 = v4 - 1;
    if (!v4)
      v8 = 0;
    WTF::StringImpl::utf8ForCharacters(v2, v8, (uint64_t)&v10, v7);
  }
  else
  {
    WTF::CString::CString(&v10, &str_25, 0);
    v11 = 0;
  }
  WTF::printExpectedCStringHelper(v6, "StringView", &v10);
  if (v11 != -1)
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v11])(&v12, &v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t JSC::iteratorNext(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD v31[4];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::VM *v36;

  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v36 = v9;
  if ((a3 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v33) = 0;
    return JSC::throwTypeError(a1, &v36);
  }
  if (*(_BYTE *)(a3 + 5) == 26)
  {
    v13 = *(_QWORD *)(a3 + 24);
    if ((v13 & 1) != 0)
      v13 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v13 + 5) == 8)
    {
      LOBYTE(v33) = 1;
      v34 = *(_QWORD *)(v13 + 40);
      LOBYTE(v35) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v33) = 2;
      v14 = *(_QWORD *)(a3 + 16);
      v34 = v13;
      v35 = v14;
    }
    goto LABEL_7;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C)
                                                         + 0x38))(&v33, a3);
  if (!(_BYTE)v33)
    return JSC::throwTypeError(a1, &v36);
LABEL_7:
  LOBYTE(v28) = 0;
  v29 = 0x800000000;
  v15 = (char *)v31 + 8;
  v30 = (char *)v31 + 8;
  memset(v31, 0, sizeof(v31));
  v32 = 0;
  if (a4)
  {
    JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append(&v28, a4, a3, a4, a5, a6, a7, a8);
    v15 = v30;
    v16 = v29;
  }
  else
  {
    v16 = 0;
  }
  v26 = v15;
  v27 = v16;
  v24 = JSC::call((uint64_t *)a1, a3, (unsigned __int8 *)&v33, a2, (uint64_t)&v26, a6, a7, a8);
  if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v17, v18, v19, v20, v21, v22, v23))
  {
    v24 = 0;
  }
  else if ((v24 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v24 + 5) <= 0x16u)
  {
    v24 = JSC::throwTypeError((unint64_t)a1, &v36, (uint64_t)"Iterator result interface is not an object.", 44);
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v29, v17, v18, v19, v20, v21, v22, v23);
  return v24;
}

uint64_t JSC::iteratorValue(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  _WORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned __int16 *v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  BOOL v61;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int8x16_t **v66;
  int v67;
  _BYTE *v68;
  uint64_t v69;
  JSC::VM *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned __int16 *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned __int8 *v104;
  int v105;
  double v106;
  const unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unsigned int v110;
  JSC::VM *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t Index;
  int v121;
  char v122;
  uint64_t v123;
  int v124;
  _BYTE *v125;
  uint64_t v126;
  unsigned __int16 *v128;
  uint64_t v129;
  unsigned int v130;
  unsigned __int8 *v131;
  uint64_t v132;
  unsigned int v133;
  JSC::VM *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  _DWORD *v147;
  uint64_t v148;
  uint64_t (*v149)(unint64_t);
  uint64_t v150;
  unint64_t v151;
  _DWORD *v152;
  _DWORD *v153;
  _QWORD v154[2];
  uint64_t v155;
  char v156;
  int8x16_t **v157;
  uint64_t v158;
  JSC::VM *v159[18];

  v159[16] = *(JSC::VM **)MEMORY[0x1E0C80C00];
  v148 = a2;
  v11 = *((_QWORD *)a1 + 7);
  v12 = *(_QWORD *)(v11 + 41952);
  v13 = *(_QWORD *)(v12 + 2608);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v151 = 0xFFFFFFFF00000000;
  LOBYTE(v155) = 0;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v153 = 0;
  memset(v154, 0, 13);
  v152 = (_DWORD *)a2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v14 = a2;
    v15 = *(unsigned __int8 *)(a2 + 5);
    if (v15 > 0x16)
      goto LABEL_3;
    if (v15 == 2)
    {
      if (*(_QWORD *)(v12 + 1768) == v13)
      {
        v117 = *(_QWORD *)(a2 + 8);
        if ((v117 & 1) != 0)
          v118 = (unsigned int *)(a2 + 16);
        else
          v118 = (unsigned int *)(v117 + 4);
        v119 = *v118;
        if ((v119 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v119) + 0x2000000000000;
        else
          Index = v119 | 0xFFFE000000000000;
        v121 = 14;
        goto LABEL_257;
      }
      if (v13)
      {
        v124 = *(_DWORD *)(v13 + 16);
        if ((v124 & 0x20) == 0)
        {
          v125 = *(_BYTE **)(v13 + 8);
          v126 = *(unsigned int *)(v13 + 4);
          if ((v124 & 4) != 0)
          {
            if (!(_DWORD)v126)
              goto LABEL_267;
            a3 = *v125 - 48;
            if (a3 > 9)
              goto LABEL_267;
            if (v126 >= 2 && *v125 == 48)
              goto LABEL_267;
            v143 = v125 + 1;
            v144 = v126 - 1;
            while (v144)
            {
              if (a3 > 0x19999999)
                goto LABEL_267;
              v145 = *v143 - 48;
              if (v145 > 9)
                goto LABEL_267;
              v122 = 0;
              v52 = __CFADD__(v145, 10 * a3);
              a3 = v145 + 10 * (_DWORD)a3;
              ++v143;
              --v144;
              if (v52)
                goto LABEL_258;
            }
          }
          else
          {
            if (!(_DWORD)v126)
              goto LABEL_267;
            a3 = *(unsigned __int16 *)v125 - 48;
            if (a3 > 9)
              goto LABEL_267;
            if (*(_WORD *)v125 == 48 && v126 > 1)
              goto LABEL_267;
            v128 = (unsigned __int16 *)(v125 + 2);
            v129 = v126 - 1;
            while (v129)
            {
              if (a3 > 0x19999999)
                goto LABEL_267;
              v130 = *v128 - 48;
              if (v130 > 9)
                goto LABEL_267;
              v122 = 0;
              v52 = __CFADD__(v130, 10 * a3);
              a3 = v130 + 10 * (_DWORD)a3;
              ++v128;
              --v129;
              if (v52)
                goto LABEL_258;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v146 = *(_QWORD *)(a2 + 8);
            v147 = (_DWORD *)((v146 & 1) != 0 ? a2 + 16 : v146 + 4);
            if (*v147 > a3)
            {
              Index = JSC::JSString::getIndex((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v11 + 80)
                || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, a3, a4, a5, a6, a7, a8))
              {
                v121 = 10;
LABEL_257:
                v149 = (uint64_t (*)(unint64_t))Index;
                LODWORD(v151) = v121;
                v153 = 0;
                v122 = 1;
                BYTE1(v154[1]) = 1;
                goto LABEL_258;
              }
            }
          }
        }
      }
LABEL_267:
      v122 = 0;
LABEL_258:
      if (*(_DWORD *)(v11 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, a3, a4, a5, a6, a7, a8))
        goto LABEL_43;
      if ((v122 & 1) != 0)
        goto LABEL_51;
    }
  }
  v123 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v148, (unint64_t)a1);
  if (!v123)
    goto LABEL_43;
  v14 = v123;
  v11 = *((_QWORD *)a1 + 7);
LABEL_3:
  v16 = (_BYTE *)(v14 + 6);
  v17 = v13 >> 4;
  v18 = v14;
  if ((*(_BYTE *)(v14 + 6) & 8) == 0)
  {
    v9 = v14;
    do
    {
      v19 = *(_DWORD *)v9 & 0xFFFFFFFE;
      v20 = 16 * v19;
      if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v19 + 0x20)) != 0)
        goto LABEL_16;
      v21 = *(_QWORD *)(16 * v19 + 0x58);
      if (!v21)
      {
        v32 = *(_QWORD *)(16 * v19 + 0x40);
        if (!v32 || *(_BYTE *)(v32 + 5) != 1 && *(_DWORD *)(v32 + 80) < 2u)
          goto LABEL_16;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v20, (JSC::VM *)v11, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v21)
          goto LABEL_16;
      }
      if (!*(_DWORD *)(v21 + 24))
        goto LABEL_16;
      v22 = *(_QWORD *)(v21 + 16);
      v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
      v24 = *(unsigned int *)(v21 + 8);
      v25 = *(_DWORD *)(v13 + 16);
      if ((v22 & 1) != 0)
      {
        if ((v25 & 0x20) != 0)
          v25 = *(_DWORD *)(v13 + 32);
        v26 = *(_DWORD *)(v21 + 12);
        v27 = (v25 >> 8) & *(_QWORD *)&v26;
        v28 = *(unsigned __int8 *)(v23 + v27);
        if (!*(_BYTE *)(v23 + v27))
          goto LABEL_16;
        v29 = v23 + v24;
        v30 = 1;
        while (1)
        {
          v31 = *(_QWORD *)(v29 + 8 * (v28 - 1));
          if (v13 == (v31 & 0xFFFFFFFFFFFFLL))
            break;
          v27 = ((_DWORD)v27 + v30) & v26;
          v28 = *(unsigned __int8 *)(v23 + v27);
          ++v30;
          if (!*(_BYTE *)(v23 + v27))
            goto LABEL_16;
        }
        a6 = (v31 >> 16) & 0xFF00000000 | HIBYTE(v31);
      }
      else
      {
        if ((v25 & 0x20) != 0)
          v25 = *(_DWORD *)(v13 + 32);
        v33 = *(_DWORD *)(v21 + 12);
        v34 = v33 & (v25 >> 8);
        v35 = *(_DWORD *)(v23 + 4 * v34);
        if (!v35)
          goto LABEL_16;
        v36 = v23 + 4 * v24;
        v37 = 1;
        while (1)
        {
          v38 = (v35 - 1);
          if (v13 == *(_QWORD *)(v36 + 16 * v38))
            break;
          v34 = (v34 + v37) & v33;
          v35 = *(_DWORD *)(v23 + 4 * v34);
          ++v37;
          if (!v35)
            goto LABEL_16;
        }
        a6 = *(unsigned int *)(v36 + 16 * v38 + 8) | ((unint64_t)*(unsigned __int8 *)(v36 + 16 * v38 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v44 = v9 + 16;
          v45 = a6 << 32;
        }
        else
        {
          v44 = *(_QWORD *)(v9 + 8) - 8;
          v45 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v44 + (v45 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v46 = *(unsigned __int8 *)(a4 + 5);
          if (v46 != 5)
          {
            if (v46 != 6)
              goto LABEL_49;
            v63 = *(_DWORD *)(v20 + 16) & 3;
            v64 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v66 = *(int8x16_t ***)(a4 + 24);
              v65 = *(_QWORD *)(a4 + 32);
              v149 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v150 = v64;
              LODWORD(v151) = HIDWORD(a6);
              v153 = (_DWORD *)v9;
              goto LABEL_92;
            }
            v149 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v150 = v64;
            LODWORD(v151) = HIDWORD(a6);
            v153 = (_DWORD *)v9;
LABEL_152:
            BYTE1(v154[1]) = 3;
            if (v63 != 2)
              LOBYTE(v154[1]) = 1;
            goto LABEL_51;
          }
          v54 = (unsigned int *)v9;
          v55 = v11;
LABEL_72:
          JSC::JSObject::fillGetterPropertySlot(v54, v55, (uint64_t)&v149, a4, a5, a6);
          goto LABEL_51;
        }
LABEL_49:
        v149 = (uint64_t (*)(unint64_t))a4;
        v153 = (_DWORD *)v9;
LABEL_50:
        v151 = __PAIR64__(a6, a5);
        LOWORD(v154[1]) = 257;
        goto LABEL_51;
      }
LABEL_16:
      if ((*v16 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v9, (JSC::VM *)v11, v13, (uint64_t)&v149) & 1) != 0)
      {
        goto LABEL_51;
      }
      v18 = *(_QWORD *)(v20 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v9 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!v13)
          goto LABEL_43;
        v39 = *(_DWORD *)(v13 + 16);
        if ((v39 & 0x20) != 0)
          goto LABEL_43;
        v40 = *(_WORD **)(v13 + 8);
        v41 = *(unsigned int *)(v13 + 4);
        if ((v39 & 4) == 0)
        {
          if ((_DWORD)v41)
          {
            v42 = (unsigned __int16)*v40 - 48;
            if (v42 <= 9 && (*v40 != 48 || v41 <= 1))
            {
              v49 = v40 + 1;
              v50 = v41 - 1;
              v43 = 10;
              while (v50)
              {
                if (v42 <= 0x19999999)
                {
                  v51 = *v49 - 48;
                  if (v51 <= 9)
                  {
                    v52 = __CFADD__(v51, 10 * v42);
                    v42 = v51 + 10 * (_DWORD)v42;
                    ++v49;
                    --v50;
                    if (!v52)
                      continue;
                  }
                }
                goto LABEL_53;
              }
              goto LABEL_215;
            }
          }
          goto LABEL_43;
        }
        if (!(_DWORD)v41)
          goto LABEL_43;
        v42 = *(unsigned __int8 *)v40 - 48;
        if (v42 > 9 || v41 >= 2 && *(_BYTE *)v40 == 48)
          goto LABEL_43;
        v108 = (unsigned __int8 *)v40 + 1;
        v109 = v41 - 1;
        v43 = 10;
        while (v109)
        {
          if (v42 <= 0x19999999)
          {
            v110 = *v108 - 48;
            if (v110 <= 9)
            {
              v52 = __CFADD__(v110, 10 * v42);
              v42 = v110 + 10 * (_DWORD)v42;
              ++v108;
              --v109;
              if (!v52)
                continue;
            }
          }
          goto LABEL_53;
        }
LABEL_215:
        if ((_DWORD)v42 == -1)
        {
LABEL_43:
          v43 = 10;
          goto LABEL_53;
        }
        v111 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v43 = 10;
        while (2)
        {
          v112 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
          v114 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v112 + 0x4C) + 0x70))(v14, a1, v42, &v149);
          if (*((_DWORD *)v111 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v111, v113, a3, a4, a5, a6, a7, a8))
            goto LABEL_43;
          if ((v114 & 1) != 0)
            goto LABEL_51;
          if (BYTE2(v154[1]) == 3)
          {
            if (BYTE4(v154[1]))
              goto LABEL_43;
            v115 = *(unsigned __int8 *)(v14 + 5);
            if (v115 != 61)
              goto LABEL_221;
          }
          else
          {
            v115 = *(unsigned __int8 *)(v14 + 5);
            if (v115 == 61)
            {
              if (BYTE2(v154[1]) == 1)
                goto LABEL_43;
            }
            else
            {
LABEL_221:
              if ((v115 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v14, v113, a3, a4, a5, a6, a7, a8) <= v42)
              {
                goto LABEL_43;
              }
            }
          }
          if ((*(_WORD *)(v112 + 12) & 0x800) == 0 || BYTE2(v154[1]) == 3)
          {
            v116 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
            if (!v116)
              v116 = *(_QWORD *)(v14 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v116 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                        * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                                                        + 0xB0))(v14, a1);
            }
            else
            {
              v116 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
              if (!v116)
                v116 = *(_QWORD *)(v14 + 16);
            }
            if (*((_DWORD *)v111 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v111, v113, a3, a4, a5, a6, a7, a8))
              goto LABEL_43;
          }
          if ((v116 & 0xFFFE000000000002) != 0)
            goto LABEL_53;
          v14 = v116;
          if (*(unsigned __int8 *)(v116 + 5) <= 0x16u)
            goto LABEL_53;
          continue;
        }
      }
      v16 = (_BYTE *)(v18 + 6);
      v9 = v18;
    }
    while ((*(_BYTE *)(v18 + 6) & 8) == 0);
  }
  if (v13)
  {
    v67 = *(_DWORD *)(v13 + 16);
    if ((v67 & 0x20) == 0)
    {
      v68 = *(_BYTE **)(v13 + 8);
      v69 = *(unsigned int *)(v13 + 4);
      if ((v67 & 4) != 0)
      {
        if ((_DWORD)v69)
        {
          v9 = *v68 - 48;
          if (v9 <= 9 && (v69 < 2 || *v68 != 48))
          {
            v131 = v68 + 1;
            v132 = v69 - 1;
            while (v132)
            {
              if (v9 <= 0x19999999)
              {
                v133 = *v131 - 48;
                if (v133 <= 9)
                {
                  v52 = __CFADD__(v133, 10 * v9);
                  v9 = v133 + 10 * (_DWORD)v9;
                  ++v131;
                  --v132;
                  if (!v52)
                    continue;
                }
              }
              goto LABEL_100;
            }
LABEL_290:
            if ((_DWORD)v9 != -1)
            {
              v134 = (JSC::VM *)*((_QWORD *)a1 + 7);
              v43 = 10;
              while (1)
              {
                v135 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
                v136 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v135 + 0x4C) + 0x70))(v14, a1, v9, &v149);
                v138 = v136;
                if (*((_DWORD *)v134 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v134, v137, a3, a4, a5, a6, a7, a8);
                  if (((hasExceptionsAfterHandlingTraps | v138) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_51;
                    goto LABEL_43;
                  }
                }
                else if ((v136 & 1) != 0)
                {
                  goto LABEL_51;
                }
                if (BYTE2(v154[1]) == 3)
                {
                  if (BYTE4(v154[1]))
                    goto LABEL_43;
                  v139 = *(unsigned __int8 *)(v14 + 5);
                  if (v139 == 61)
                    goto LABEL_297;
                }
                else
                {
                  v139 = *(unsigned __int8 *)(v14 + 5);
                  if (v139 == 61)
                  {
                    if (BYTE2(v154[1]) == 1)
                      goto LABEL_43;
                    goto LABEL_297;
                  }
                }
                if ((v139 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v14, v137, a3, a4, a5, a6, a7, a8) <= v9)
                {
                  goto LABEL_43;
                }
LABEL_297:
                if ((*(_WORD *)(v135 + 12) & 0x800) == 0 || BYTE2(v154[1]) == 3)
                {
                  v140 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
                  if (!v140)
                    v140 = *(_QWORD *)(v14 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v140 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16
                                                                                              * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)
                                                                                              + 0xB0))(v14, a1);
                  }
                  else
                  {
                    v140 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
                    if (!v140)
                      v140 = *(_QWORD *)(v14 + 16);
                  }
                  if (*((_DWORD *)v134 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v134, v137, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_43;
                  }
                }
                if ((v140 & 0xFFFE000000000002) == 0)
                {
                  v14 = v140;
                  if (*(unsigned __int8 *)(v140 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_53;
              }
            }
          }
        }
      }
      else if ((_DWORD)v69)
      {
        v9 = *(unsigned __int16 *)v68 - 48;
        if (v9 <= 9 && (*(_WORD *)v68 != 48 || v69 <= 1))
        {
          v95 = (unsigned __int16 *)(v68 + 2);
          v96 = v69 - 1;
          while (v96)
          {
            if (v9 <= 0x19999999)
            {
              v97 = *v95 - 48;
              if (v97 <= 9)
              {
                v52 = __CFADD__(v97, 10 * v9);
                v9 = v97 + 10 * (_DWORD)v9;
                ++v95;
                --v96;
                if (!v52)
                  continue;
              }
            }
            goto LABEL_100;
          }
          goto LABEL_290;
        }
      }
    }
  }
LABEL_100:
  v70 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v43 = 10;
  while (1)
  {
    v71 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v18 + 6) & 8) == 0)
      break;
    v100 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) + 0x68))(v18, a1, v13, &v149);
    if (*((_DWORD *)v70 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v70, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_43;
    if ((v100 & 1) != 0)
      goto LABEL_51;
    if (BYTE2(v154[1]) == 3)
    {
      if (BYTE4(v154[1]))
        goto LABEL_43;
      v101 = *(unsigned __int8 *)(v18 + 5);
      if (v101 != 61)
      {
LABEL_175:
        if (!v13)
          goto LABEL_114;
        if ((v101 - 50) < 0xFFFFFFF5)
          goto LABEL_114;
        v102 = *(_DWORD *)(v13 + 16);
        if ((v102 & 0x20) != 0)
          goto LABEL_114;
        v103 = *(unsigned int *)(v13 + 4);
        if (!(_DWORD)v103)
          goto LABEL_114;
        v104 = *(unsigned __int8 **)(v13 + 8);
        if ((v102 & 4) == 0)
        {
          v105 = *(unsigned __int16 *)v104;
          if ((_DWORD)v103 == 1)
            goto LABEL_181;
          if (v105 == 45)
          {
            v105 = *((unsigned __int16 *)v104 + 1);
            goto LABEL_186;
          }
          if ((v105 - 48) >= 0xA && ((_DWORD)v103 != 8 || v105 != 73))
          {
LABEL_199:
            if ((_DWORD)v103 != 3 || v105 != 78)
              goto LABEL_114;
          }
LABEL_190:
          v9 = v9 & 0xFFFFFF0000000000 | v103 | ((unint64_t)((v102 >> 2) & 1) << 32);
          JSC::jsToNumber(v104, v9);
          WTF::numberToString(v159, v106);
          if (WTF::equal(v13, (unint64_t)v159, v107))
            goto LABEL_43;
          goto LABEL_114;
        }
        v105 = *v104;
        if ((_DWORD)v103 == 1)
        {
LABEL_181:
          if ((v105 - 48) < 0xA)
            goto LABEL_43;
          goto LABEL_114;
        }
        if (v105 == 45)
        {
          v105 = v104[1];
LABEL_186:
          if ((v105 - 48) < 0xA)
          {
            if ((_DWORD)v103 == 2)
              goto LABEL_43;
            goto LABEL_190;
          }
          if ((_DWORD)v103 != 9)
            goto LABEL_114;
        }
        else
        {
          if ((v105 - 48) < 0xA)
            goto LABEL_190;
          if ((_DWORD)v103 != 8)
            goto LABEL_199;
        }
        if (v105 != 73)
          goto LABEL_114;
        goto LABEL_190;
      }
    }
    else
    {
      v101 = *(unsigned __int8 *)(v18 + 5);
      if (v101 != 61)
        goto LABEL_175;
      if (BYTE2(v154[1]) == 1)
        goto LABEL_43;
    }
LABEL_114:
    if ((*(_WORD *)(v71 + 12) & 0x800) == 0)
    {
      v83 = *(_DWORD *)v18;
LABEL_116:
      v84 = *(_QWORD *)(16 * (v83 & 0xFFFFFFFE) + 0x30);
      if (!v84)
        v84 = *(_QWORD *)(v18 + 16);
      goto LABEL_118;
    }
    v83 = *(_DWORD *)v18;
    if (BYTE2(v154[1]) == 3)
      goto LABEL_116;
    v99 = 16 * (v83 & 0xFFFFFFFE);
    if ((*(_WORD *)(v99 + 12) & 0x800) != 0)
    {
      v84 = (*(uint64_t (**)(unint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v99 + 76)
                                                                               + 0xB0))(v18, a1);
    }
    else
    {
      v84 = *(_QWORD *)(v99 + 48);
      if (!v84)
        v84 = *(_QWORD *)(v18 + 16);
    }
    if (*((_DWORD *)v70 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v70, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_43;
LABEL_118:
    if ((v84 & 0xFFFE000000000002) == 0)
    {
      v18 = v84;
      if (*(unsigned __int8 *)(v84 + 5) > 0x16u)
        continue;
    }
    goto LABEL_53;
  }
  if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_113;
  v72 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
  if (!v72)
  {
    v85 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
    if (!v85 || *(_BYTE *)(v85 + 5) != 1 && *(_DWORD *)(v85 + 80) < 2u)
      goto LABEL_113;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)), v70, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v72)
      goto LABEL_113;
  }
  if (!*(_DWORD *)(v72 + 24))
    goto LABEL_113;
  v73 = *(_QWORD *)(v72 + 16);
  v74 = v73 & 0xFFFFFFFFFFFFFFFELL;
  v75 = *(unsigned int *)(v72 + 8);
  v76 = *(_DWORD *)(v13 + 16);
  if ((v73 & 1) != 0)
  {
    if ((v76 & 0x20) != 0)
      v76 = *(_DWORD *)(v13 + 32);
    v77 = *(_DWORD *)(v72 + 12);
    v78 = (v76 >> 8) & *(_QWORD *)&v77;
    v79 = *(unsigned __int8 *)(v74 + v78);
    if (*(_BYTE *)(v74 + v78))
    {
      v80 = v74 + v75;
      v81 = 1;
      while (1)
      {
        v82 = *(_QWORD *)(v80 + 8 * (v79 - 1));
        if (v13 == (v82 & 0xFFFFFFFFFFFFLL))
          break;
        v78 = ((_DWORD)v78 + v81) & v77;
        v79 = *(unsigned __int8 *)(v74 + v78);
        ++v81;
        if (!*(_BYTE *)(v74 + v78))
          goto LABEL_113;
      }
      a6 = (v82 >> 16) & 0xFF00000000 | HIBYTE(v82);
      goto LABEL_126;
    }
LABEL_113:
    if ((*(_BYTE *)(v18 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v70, v13, (uint64_t)&v149) & 1) != 0)
    {
      goto LABEL_51;
    }
    goto LABEL_114;
  }
  if ((v76 & 0x20) != 0)
    v76 = *(_DWORD *)(v13 + 32);
  v86 = *(_DWORD *)(v72 + 12);
  v87 = v86 & (v76 >> 8);
  v88 = *(_DWORD *)(v74 + 4 * v87);
  if (!v88)
    goto LABEL_113;
  v89 = v74 + 4 * v75;
  v90 = 1;
  while (1)
  {
    v91 = (v88 - 1);
    if (v13 == *(_QWORD *)(v89 + 16 * v91))
      break;
    v87 = (v87 + v90) & v86;
    v88 = *(_DWORD *)(v74 + 4 * v87);
    ++v90;
    if (!v88)
      goto LABEL_113;
  }
  a6 = *(unsigned int *)(v89 + 16 * v91 + 8) | ((unint64_t)*(unsigned __int8 *)(v89 + 16 * v91 + 12) << 32);
LABEL_126:
  if ((_DWORD)a6 == -1)
    goto LABEL_113;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v92 = v18 + 16;
    v93 = a6 << 32;
  }
  else
  {
    v92 = *(_QWORD *)(v18 + 8) - 8;
    v93 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v92 + (v93 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_141:
    v149 = (uint64_t (*)(unint64_t))a4;
    v153 = (_DWORD *)v18;
    goto LABEL_50;
  }
  v94 = *(unsigned __int8 *)(a4 + 5);
  if (v94 == 5)
  {
    v54 = (unsigned int *)v18;
    v55 = (uint64_t)v70;
    goto LABEL_72;
  }
  if (v94 != 6)
    goto LABEL_141;
  v63 = *(_DWORD *)(v71 + 16) & 3;
  v98 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v149 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v150 = v98;
    LODWORD(v151) = HIDWORD(a6);
    v153 = (_DWORD *)v18;
    goto LABEL_152;
  }
  v66 = *(int8x16_t ***)(a4 + 24);
  v65 = *(_QWORD *)(a4 + 32);
  v149 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v150 = v98;
  LODWORD(v151) = HIDWORD(a6);
  v153 = (_DWORD *)v18;
LABEL_92:
  BYTE1(v154[1]) = 3;
  if (v63 != 2)
    LOBYTE(v154[1]) = 1;
  BYTE3(v154[1]) = 1;
  v157 = v66;
  v158 = v65;
LABEL_51:
  if (BYTE1(v154[1]) == 1)
  {
    v43 = (uint64_t)v149;
  }
  else
  {
    if (BYTE1(v154[1]) == 2)
    {
      v53 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v149, a1, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v56 = (unint64_t)v153;
      v57 = *(_QWORD *)(16 * (*v153 & 0xFFFFFFFE) + 0x28);
      if ((v151 & 0x20) != 0)
        v56 = (unint64_t)v152;
      if (BYTE3(v154[1]) != 1)
        goto LABEL_89;
      if ((v56 & 0xFFFE000000000002) != 0)
        goto LABEL_202;
      v58 = *(unsigned int *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C);
      v59 = *(_DWORD *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C) != 0;
      v60 = 16 * v58;
      if ((_DWORD)v58)
        v61 = v157 == (int8x16_t **)v60;
      else
        v61 = 1;
      if (!v61)
      {
        do
        {
          v60 = *(_QWORD *)(v60 + 16);
          v59 = v60 != 0;
        }
        while ((int8x16_t **)v60 != v157 && v60 != 0);
      }
      if (!v59)
      {
LABEL_202:
        v159[0] = *((JSC::VM **)a1 + 7);
        v53 = JSC::throwDOMAttributeGetterTypeError(v57, v159, v157, (WTF::StringImpl *)v13);
      }
      else
      {
LABEL_89:
        v53 = v149(v57);
      }
    }
    v43 = v53;
  }
LABEL_53:
  if (v156)
  {
    v47 = *(_DWORD *)(v155 + 4);
    if (!v47)
    {
      __break(0xC471u);
      JUMPOUT(0x198978D20);
    }
    *(_DWORD *)(v155 + 4) = v47 - 1;
  }
  return v43;
}

BOOL JSC::iteratorComplete(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  JSC::VM *v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v50;
  unsigned __int16 *v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  BOOL v67;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int8x16_t **v72;
  int v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  JSC::VM *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  int v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned __int16 *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned __int8 *v111;
  int v112;
  double v113;
  const unsigned __int8 *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  unsigned int v117;
  JSC::VM *v118;
  uint64_t v119;
  char v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int *v124;
  uint64_t v125;
  uint64_t Index;
  int v127;
  char v128;
  uint64_t v129;
  int v130;
  _BYTE *v131;
  uint64_t v132;
  unsigned __int16 *v134;
  uint64_t v135;
  unsigned int v136;
  unsigned __int8 *v137;
  uint64_t v138;
  unsigned int v139;
  JSC::VM *v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  uint64_t v145;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v148;
  uint64_t v149;
  unsigned int v150;
  uint64_t v151;
  _DWORD *v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t (*v155)(unint64_t);
  uint64_t v156;
  unint64_t v157;
  _DWORD *v158;
  _DWORD *v159;
  _QWORD v160[2];
  uint64_t v161;
  char v162;
  int8x16_t **v163;
  uint64_t v164;
  JSC::VM *v165[18];

  v165[16] = *(JSC::VM **)MEMORY[0x1E0C80C00];
  v154 = a2;
  v10 = *((_QWORD *)a1 + 7);
  v11 = *(_QWORD *)(v10 + 41952);
  v12 = *(_QWORD *)(v11 + 1200);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v157 = 0xFFFFFFFF00000000;
  LOBYTE(v161) = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v159 = 0;
  memset(v160, 0, 13);
  v158 = (_DWORD *)a2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v13 = a2;
    v14 = *(unsigned __int8 *)(a2 + 5);
    v15 = (JSC::VM *)v10;
    if (v14 > 0x16)
      goto LABEL_3;
    if (v14 == 2)
    {
      if (*(_QWORD *)(v11 + 1768) == v12)
      {
        v123 = *(_QWORD *)(a2 + 8);
        if ((v123 & 1) != 0)
          v124 = (unsigned int *)(a2 + 16);
        else
          v124 = (unsigned int *)(v123 + 4);
        v125 = *v124;
        if ((v125 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v125) + 0x2000000000000;
        else
          Index = v125 | 0xFFFE000000000000;
        v127 = 14;
        goto LABEL_281;
      }
      if (v12)
      {
        v130 = *(_DWORD *)(v12 + 16);
        if ((v130 & 0x20) == 0)
        {
          v131 = *(_BYTE **)(v12 + 8);
          v132 = *(unsigned int *)(v12 + 4);
          if ((v130 & 4) != 0)
          {
            if (!(_DWORD)v132)
              goto LABEL_291;
            a3 = *v131 - 48;
            if (a3 > 9)
              goto LABEL_291;
            if (v132 >= 2 && *v131 == 48)
              goto LABEL_291;
            v148 = v131 + 1;
            v149 = v132 - 1;
            while (v149)
            {
              if (a3 > 0x19999999)
                goto LABEL_291;
              v150 = *v148 - 48;
              if (v150 > 9)
                goto LABEL_291;
              v128 = 0;
              v54 = __CFADD__(v150, 10 * a3);
              a3 = v150 + 10 * (_DWORD)a3;
              ++v148;
              --v149;
              if (v54)
                goto LABEL_282;
            }
          }
          else
          {
            if (!(_DWORD)v132)
              goto LABEL_291;
            a3 = *(unsigned __int16 *)v131 - 48;
            if (a3 > 9)
              goto LABEL_291;
            if (*(_WORD *)v131 == 48 && v132 > 1)
              goto LABEL_291;
            v134 = (unsigned __int16 *)(v131 + 2);
            v135 = v132 - 1;
            while (v135)
            {
              if (a3 > 0x19999999)
                goto LABEL_291;
              v136 = *v134 - 48;
              if (v136 > 9)
                goto LABEL_291;
              v128 = 0;
              v54 = __CFADD__(v136, 10 * a3);
              a3 = v136 + 10 * (_DWORD)a3;
              ++v134;
              --v135;
              if (v54)
                goto LABEL_282;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v151 = *(_QWORD *)(a2 + 8);
            v152 = (_DWORD *)((v151 & 1) != 0 ? a2 + 16 : v151 + 4);
            if (*v152 > a3)
            {
              Index = JSC::JSString::getIndex((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
              if (!*(_DWORD *)(v10 + 80)
                || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, a3, a4, a5, a6, a7, a8))
              {
                v127 = 10;
LABEL_281:
                v155 = (uint64_t (*)(unint64_t))Index;
                LODWORD(v157) = v127;
                v159 = 0;
                v128 = 1;
                BYTE1(v160[1]) = 1;
                goto LABEL_282;
              }
            }
          }
        }
      }
LABEL_291:
      v128 = 0;
LABEL_282:
      if (*(_DWORD *)(v10 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, a3, a4, a5, a6, a7, a8))
        goto LABEL_43;
      if ((v128 & 1) != 0)
        goto LABEL_51;
    }
  }
  v129 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v154, (unint64_t)a1);
  if (!v129)
    goto LABEL_43;
  v13 = v129;
  v15 = (JSC::VM *)*((_QWORD *)a1 + 7);
LABEL_3:
  v16 = (_BYTE *)(v13 + 6);
  v17 = v12 >> 4;
  v18 = v13;
  if ((*(_BYTE *)(v13 + 6) & 8) == 0)
  {
    v19 = v13;
    do
    {
      v20 = *(_DWORD *)v19 & 0xFFFFFFFE;
      v21 = 16 * v20;
      if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v20 + 0x20)) != 0)
        goto LABEL_16;
      v22 = *(_QWORD *)(16 * v20 + 0x58);
      if (!v22)
      {
        v33 = *(_QWORD *)(16 * v20 + 0x40);
        if (!v33 || *(_BYTE *)(v33 + 5) != 1 && *(_DWORD *)(v33 + 80) < 2u)
          goto LABEL_16;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v21, v15, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v22)
          goto LABEL_16;
      }
      if (!*(_DWORD *)(v22 + 24))
        goto LABEL_16;
      v23 = *(_QWORD *)(v22 + 16);
      v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      v25 = *(unsigned int *)(v22 + 8);
      v26 = *(_DWORD *)(v12 + 16);
      if ((v23 & 1) != 0)
      {
        if ((v26 & 0x20) != 0)
          v26 = *(_DWORD *)(v12 + 32);
        v27 = *(_DWORD *)(v22 + 12);
        v28 = (v26 >> 8) & *(_QWORD *)&v27;
        v29 = *(unsigned __int8 *)(v24 + v28);
        if (!*(_BYTE *)(v24 + v28))
          goto LABEL_16;
        v30 = v24 + v25;
        v31 = 1;
        while (1)
        {
          v32 = *(_QWORD *)(v30 + 8 * (v29 - 1));
          if (v12 == (v32 & 0xFFFFFFFFFFFFLL))
            break;
          v28 = ((_DWORD)v28 + v31) & v27;
          v29 = *(unsigned __int8 *)(v24 + v28);
          ++v31;
          if (!*(_BYTE *)(v24 + v28))
            goto LABEL_16;
        }
        a6 = (v32 >> 16) & 0xFF00000000 | HIBYTE(v32);
      }
      else
      {
        if ((v26 & 0x20) != 0)
          v26 = *(_DWORD *)(v12 + 32);
        v34 = *(_DWORD *)(v22 + 12);
        v35 = v34 & (v26 >> 8);
        v36 = *(_DWORD *)(v24 + 4 * v35);
        if (!v36)
          goto LABEL_16;
        v37 = v24 + 4 * v25;
        v38 = 1;
        while (1)
        {
          v39 = (v36 - 1);
          if (v12 == *(_QWORD *)(v37 + 16 * v39))
            break;
          v35 = (v35 + v38) & v34;
          v36 = *(_DWORD *)(v24 + 4 * v35);
          ++v38;
          if (!v36)
            goto LABEL_16;
        }
        a6 = *(unsigned int *)(v37 + 16 * v39 + 8) | ((unint64_t)*(unsigned __int8 *)(v37 + 16 * v39 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v45 = v19 + 16;
          v46 = a6 << 32;
        }
        else
        {
          v45 = *(_QWORD *)(v19 + 8) - 8;
          v46 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v45 + (v46 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v47 = *(unsigned __int8 *)(a4 + 5);
          if (v47 != 5)
          {
            if (v47 != 6)
              goto LABEL_49;
            v69 = *(_DWORD *)(v21 + 16) & 3;
            v70 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v72 = *(int8x16_t ***)(a4 + 24);
              v71 = *(_QWORD *)(a4 + 32);
              v155 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v156 = v70;
              LODWORD(v157) = HIDWORD(a6);
              v159 = (_DWORD *)v19;
              goto LABEL_109;
            }
            v155 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v156 = v70;
            LODWORD(v157) = HIDWORD(a6);
            v159 = (_DWORD *)v19;
LABEL_174:
            BYTE1(v160[1]) = 3;
            if (v69 != 2)
              LOBYTE(v160[1]) = 1;
            goto LABEL_51;
          }
          v57 = (unsigned int *)v19;
          v58 = (uint64_t)v15;
LABEL_84:
          JSC::JSObject::fillGetterPropertySlot(v57, v58, (uint64_t)&v155, a4, a5, a6);
          goto LABEL_51;
        }
LABEL_49:
        v155 = (uint64_t (*)(unint64_t))a4;
        v159 = (_DWORD *)v19;
LABEL_50:
        v157 = __PAIR64__(a6, a5);
        LOWORD(v160[1]) = 257;
        goto LABEL_51;
      }
LABEL_16:
      if ((*v16 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v19, v15, v12, (uint64_t)&v155) & 1) != 0)
      {
        goto LABEL_51;
      }
      v18 = *(_QWORD *)(v21 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v19 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!v12)
          goto LABEL_43;
        v40 = *(_DWORD *)(v12 + 16);
        if ((v40 & 0x20) != 0)
          goto LABEL_43;
        v41 = *(_WORD **)(v12 + 8);
        v42 = *(unsigned int *)(v12 + 4);
        if ((v40 & 4) == 0)
        {
          if ((_DWORD)v42)
          {
            v43 = (unsigned __int16)*v41 - 48;
            if (v43 <= 9 && (*v41 != 48 || v42 <= 1))
            {
              v51 = v41 + 1;
              v52 = v42 - 1;
              v44 = 10;
              while (v52)
              {
                if (v43 <= 0x19999999)
                {
                  v53 = *v51 - 48;
                  if (v53 <= 9)
                  {
                    v54 = __CFADD__(v53, 10 * v43);
                    v43 = v53 + 10 * (_DWORD)v43;
                    ++v51;
                    --v52;
                    if (!v54)
                      continue;
                  }
                }
                goto LABEL_53;
              }
              goto LABEL_239;
            }
          }
          goto LABEL_43;
        }
        if (!(_DWORD)v42)
          goto LABEL_43;
        v43 = *(unsigned __int8 *)v41 - 48;
        if (v43 > 9 || v42 >= 2 && *(_BYTE *)v41 == 48)
          goto LABEL_43;
        v115 = (unsigned __int8 *)v41 + 1;
        v116 = v42 - 1;
        v44 = 10;
        while (v116)
        {
          if (v43 <= 0x19999999)
          {
            v117 = *v115 - 48;
            if (v117 <= 9)
            {
              v54 = __CFADD__(v117, 10 * v43);
              v43 = v117 + 10 * (_DWORD)v43;
              ++v115;
              --v116;
              if (!v54)
                continue;
            }
          }
          goto LABEL_53;
        }
LABEL_239:
        if ((_DWORD)v43 == -1)
        {
LABEL_43:
          v44 = 10;
          goto LABEL_53;
        }
        v118 = (JSC::VM *)*((_QWORD *)a1 + 7);
        v44 = 10;
        while (2)
        {
          v119 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
          v120 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v119 + 0x4C) + 0x70))(v13, a1, v43, &v155);
          if (*((_DWORD *)v118 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v118, a2, a3, a4, a5, a6, a7, a8))
            goto LABEL_43;
          if ((v120 & 1) != 0)
            goto LABEL_51;
          if (BYTE2(v160[1]) == 3)
          {
            if (BYTE4(v160[1]))
              goto LABEL_43;
            v121 = *(unsigned __int8 *)(v13 + 5);
            if (v121 != 61)
              goto LABEL_245;
          }
          else
          {
            v121 = *(unsigned __int8 *)(v13 + 5);
            if (v121 == 61)
            {
              if (BYTE2(v160[1]) == 1)
                goto LABEL_43;
            }
            else
            {
LABEL_245:
              if ((v121 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v13, a2, a3, a4, a5, a6, a7, a8) <= v43)
              {
                goto LABEL_43;
              }
            }
          }
          if ((*(_WORD *)(v119 + 12) & 0x800) == 0 || BYTE2(v160[1]) == 3)
          {
            v122 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
            if (!v122)
              v122 = *(_QWORD *)(v13 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v122 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v13 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v13, a1);
            }
            else
            {
              v122 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
              if (!v122)
                v122 = *(_QWORD *)(v13 + 16);
            }
            if (*((_DWORD *)v118 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v118, a2, a3, a4, a5, a6, a7, a8))
              goto LABEL_43;
          }
          if ((v122 & 0xFFFE000000000002) != 0)
            goto LABEL_53;
          v13 = v122;
          if (*(unsigned __int8 *)(v122 + 5) <= 0x16u)
            goto LABEL_53;
          continue;
        }
      }
      v16 = (_BYTE *)(v18 + 6);
      v19 = v18;
    }
    while ((*(_BYTE *)(v18 + 6) & 8) == 0);
  }
  if (v12)
  {
    v73 = *(_DWORD *)(v12 + 16);
    if ((v73 & 0x20) == 0)
    {
      v74 = *(_BYTE **)(v12 + 8);
      v75 = *(unsigned int *)(v12 + 4);
      if ((v73 & 4) != 0)
      {
        if ((_DWORD)v75)
        {
          v76 = *v74 - 48;
          if (v76 <= 9 && (v75 < 2 || *v74 != 48))
          {
            v137 = v74 + 1;
            v138 = v75 - 1;
            while (v138)
            {
              if (v76 <= 0x19999999)
              {
                v139 = *v137 - 48;
                if (v139 <= 9)
                {
                  v54 = __CFADD__(v139, 10 * v76);
                  v76 = v139 + 10 * (_DWORD)v76;
                  ++v137;
                  --v138;
                  if (!v54)
                    continue;
                }
              }
              goto LABEL_120;
            }
LABEL_314:
            if ((_DWORD)v76 != -1)
            {
              v140 = (JSC::VM *)*((_QWORD *)a1 + 7);
              v44 = 10;
              while (1)
              {
                v141 = 16 * (*(_DWORD *)v13 & 0xFFFFFFFE);
                v142 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, uint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v141 + 0x4C) + 0x70))(v13, a1, v76, &v155);
                v143 = v142;
                if (*((_DWORD *)v140 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v140, a2, a3, a4, a5, a6, a7, a8);
                  if (((hasExceptionsAfterHandlingTraps | v143) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_51;
                    goto LABEL_43;
                  }
                }
                else if ((v142 & 1) != 0)
                {
                  goto LABEL_51;
                }
                if (BYTE2(v160[1]) == 3)
                {
                  if (BYTE4(v160[1]))
                    goto LABEL_43;
                  v144 = *(unsigned __int8 *)(v13 + 5);
                  if (v144 == 61)
                    goto LABEL_321;
                }
                else
                {
                  v144 = *(unsigned __int8 *)(v13 + 5);
                  if (v144 == 61)
                  {
                    if (BYTE2(v160[1]) == 1)
                      goto LABEL_43;
                    goto LABEL_321;
                  }
                }
                if ((v144 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v13, a2, a3, a4, a5, a6, a7, a8) <= v76)
                {
                  goto LABEL_43;
                }
LABEL_321:
                if ((*(_WORD *)(v141 + 12) & 0x800) == 0 || BYTE2(v160[1]) == 3)
                {
                  v145 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
                  if (!v145)
                    v145 = *(_QWORD *)(v13 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v145 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v13, a1);
                  }
                  else
                  {
                    v145 = *(_QWORD *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x30);
                    if (!v145)
                      v145 = *(_QWORD *)(v13 + 16);
                  }
                  if (*((_DWORD *)v140 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v140, a2, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_43;
                  }
                }
                if ((v145 & 0xFFFE000000000002) == 0)
                {
                  v13 = v145;
                  if (*(unsigned __int8 *)(v145 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_53;
              }
            }
          }
        }
      }
      else if ((_DWORD)v75)
      {
        v76 = *(unsigned __int16 *)v74 - 48;
        if (v76 <= 9 && (*(_WORD *)v74 != 48 || v75 <= 1))
        {
          v102 = (unsigned __int16 *)(v74 + 2);
          v103 = v75 - 1;
          while (v103)
          {
            if (v76 <= 0x19999999)
            {
              v104 = *v102 - 48;
              if (v104 <= 9)
              {
                v54 = __CFADD__(v104, 10 * v76);
                v76 = v104 + 10 * (_DWORD)v76;
                ++v102;
                --v103;
                if (!v54)
                  continue;
              }
            }
            goto LABEL_120;
          }
          goto LABEL_314;
        }
      }
    }
  }
LABEL_120:
  v77 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v44 = 10;
  while (1)
  {
    v78 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v18 + 6) & 8) == 0)
      break;
    v107 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) + 0x68))(v18, a1, v12, &v155);
    if (*((_DWORD *)v77 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v77, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_43;
    if ((v107 & 1) != 0)
      goto LABEL_51;
    if (BYTE2(v160[1]) == 3)
    {
      if (BYTE4(v160[1]))
        goto LABEL_43;
      v108 = *(unsigned __int8 *)(v18 + 5);
      if (v108 != 61)
      {
LABEL_197:
        if (!v12)
          goto LABEL_134;
        if ((v108 - 50) < 0xFFFFFFF5)
          goto LABEL_134;
        v109 = *(_DWORD *)(v12 + 16);
        if ((v109 & 0x20) != 0)
          goto LABEL_134;
        v110 = *(unsigned int *)(v12 + 4);
        if (!(_DWORD)v110)
          goto LABEL_134;
        v111 = *(unsigned __int8 **)(v12 + 8);
        if ((v109 & 4) == 0)
        {
          v112 = *(unsigned __int16 *)v111;
          if ((_DWORD)v110 == 1)
            goto LABEL_203;
          if (v112 == 45)
          {
            v112 = *((unsigned __int16 *)v111 + 1);
            goto LABEL_209;
          }
          if ((v112 - 48) >= 0xA && ((_DWORD)v110 != 8 || v112 != 73))
          {
LABEL_223:
            if ((_DWORD)v110 != 3 || v112 != 78)
              goto LABEL_134;
          }
LABEL_214:
          v153 = v153 & 0xFFFFFF0000000000 | v110 | ((unint64_t)((v109 >> 2) & 1) << 32);
          JSC::jsToNumber(v111, v153);
          WTF::numberToString(v165, v113);
          if (WTF::equal(v12, (unint64_t)v165, v114))
            goto LABEL_43;
          goto LABEL_134;
        }
        v112 = *v111;
        if ((_DWORD)v110 == 1)
        {
LABEL_203:
          if ((v112 - 48) < 0xA)
            goto LABEL_43;
          goto LABEL_134;
        }
        if (v112 == 45)
        {
          v112 = v111[1];
LABEL_209:
          if ((v112 - 48) < 0xA)
          {
            if ((_DWORD)v110 == 2)
              goto LABEL_43;
            goto LABEL_214;
          }
          if ((_DWORD)v110 != 9)
            goto LABEL_134;
        }
        else
        {
          if ((v112 - 48) < 0xA)
            goto LABEL_214;
          if ((_DWORD)v110 != 8)
            goto LABEL_223;
        }
        if (v112 != 73)
          goto LABEL_134;
        goto LABEL_214;
      }
    }
    else
    {
      v108 = *(unsigned __int8 *)(v18 + 5);
      if (v108 != 61)
        goto LABEL_197;
      if (BYTE2(v160[1]) == 1)
        goto LABEL_43;
    }
LABEL_134:
    if ((*(_WORD *)(v78 + 12) & 0x800) == 0)
    {
      v90 = *(_DWORD *)v18;
LABEL_136:
      v91 = *(_QWORD *)(16 * (v90 & 0xFFFFFFFE) + 0x30);
      if (!v91)
        v91 = *(_QWORD *)(v18 + 16);
      goto LABEL_138;
    }
    v90 = *(_DWORD *)v18;
    if (BYTE2(v160[1]) == 3)
      goto LABEL_136;
    v106 = 16 * (v90 & 0xFFFFFFFE);
    if ((*(_WORD *)(v106 + 12) & 0x800) != 0)
    {
      v91 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v106 + 76) + 0xB0))(v18, a1);
    }
    else
    {
      v91 = *(_QWORD *)(v106 + 48);
      if (!v91)
        v91 = *(_QWORD *)(v18 + 16);
    }
    if (*((_DWORD *)v77 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v77, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_43;
LABEL_138:
    if ((v91 & 0xFFFE000000000002) == 0)
    {
      v18 = v91;
      if (*(unsigned __int8 *)(v91 + 5) > 0x16u)
        continue;
    }
    goto LABEL_53;
  }
  if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_133;
  v79 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
  if (!v79)
  {
    v92 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
    if (!v92 || *(_BYTE *)(v92 + 5) != 1 && *(_DWORD *)(v92 + 80) < 2u)
      goto LABEL_133;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)), v77, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v79)
      goto LABEL_133;
  }
  if (!*(_DWORD *)(v79 + 24))
    goto LABEL_133;
  v80 = *(_QWORD *)(v79 + 16);
  v81 = v80 & 0xFFFFFFFFFFFFFFFELL;
  v82 = *(unsigned int *)(v79 + 8);
  v83 = *(_DWORD *)(v12 + 16);
  if ((v80 & 1) != 0)
  {
    if ((v83 & 0x20) != 0)
      v83 = *(_DWORD *)(v12 + 32);
    v84 = *(_DWORD *)(v79 + 12);
    v85 = (v83 >> 8) & *(_QWORD *)&v84;
    v86 = *(unsigned __int8 *)(v81 + v85);
    if (*(_BYTE *)(v81 + v85))
    {
      v87 = v81 + v82;
      v88 = 1;
      while (1)
      {
        v89 = *(_QWORD *)(v87 + 8 * (v86 - 1));
        if (v12 == (v89 & 0xFFFFFFFFFFFFLL))
          break;
        v85 = ((_DWORD)v85 + v88) & v84;
        v86 = *(unsigned __int8 *)(v81 + v85);
        ++v88;
        if (!*(_BYTE *)(v81 + v85))
          goto LABEL_133;
      }
      a6 = (v89 >> 16) & 0xFF00000000 | HIBYTE(v89);
      goto LABEL_146;
    }
LABEL_133:
    if ((*(_BYTE *)(v18 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v77, v12, (uint64_t)&v155) & 1) != 0)
    {
      goto LABEL_51;
    }
    goto LABEL_134;
  }
  if ((v83 & 0x20) != 0)
    v83 = *(_DWORD *)(v12 + 32);
  v93 = *(_DWORD *)(v79 + 12);
  v94 = v93 & (v83 >> 8);
  v95 = *(_DWORD *)(v81 + 4 * v94);
  if (!v95)
    goto LABEL_133;
  v96 = v81 + 4 * v82;
  v97 = 1;
  while (1)
  {
    v98 = (v95 - 1);
    if (v12 == *(_QWORD *)(v96 + 16 * v98))
      break;
    v94 = (v94 + v97) & v93;
    v95 = *(_DWORD *)(v81 + 4 * v94);
    ++v97;
    if (!v95)
      goto LABEL_133;
  }
  a6 = *(unsigned int *)(v96 + 16 * v98 + 8) | ((unint64_t)*(unsigned __int8 *)(v96 + 16 * v98 + 12) << 32);
LABEL_146:
  if ((_DWORD)a6 == -1)
    goto LABEL_133;
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v99 = v18 + 16;
    v100 = a6 << 32;
  }
  else
  {
    v99 = *(_QWORD *)(v18 + 8) - 8;
    v100 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v99 + (v100 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_163:
    v155 = (uint64_t (*)(unint64_t))a4;
    v159 = (_DWORD *)v18;
    goto LABEL_50;
  }
  v101 = *(unsigned __int8 *)(a4 + 5);
  if (v101 == 5)
  {
    v57 = (unsigned int *)v18;
    v58 = (uint64_t)v77;
    goto LABEL_84;
  }
  if (v101 != 6)
    goto LABEL_163;
  v69 = *(_DWORD *)(v78 + 16) & 3;
  v105 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v155 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v156 = v105;
    LODWORD(v157) = HIDWORD(a6);
    v159 = (_DWORD *)v18;
    goto LABEL_174;
  }
  v72 = *(int8x16_t ***)(a4 + 24);
  v71 = *(_QWORD *)(a4 + 32);
  v155 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v156 = v105;
  LODWORD(v157) = HIDWORD(a6);
  v159 = (_DWORD *)v18;
LABEL_109:
  BYTE1(v160[1]) = 3;
  if (v69 != 2)
    LOBYTE(v160[1]) = 1;
  BYTE3(v160[1]) = 1;
  v163 = v72;
  v164 = v71;
LABEL_51:
  if (BYTE1(v160[1]) == 1)
  {
    v44 = (unint64_t)v155;
  }
  else
  {
    if (BYTE1(v160[1]) == 2)
    {
      v56 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v155, a1, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v62 = (unint64_t)v159;
      v63 = *(_QWORD *)(16 * (*v159 & 0xFFFFFFFE) + 0x28);
      if ((v157 & 0x20) != 0)
        v62 = (unint64_t)v158;
      if (BYTE3(v160[1]) != 1)
        goto LABEL_106;
      if ((v62 & 0xFFFE000000000002) != 0)
        goto LABEL_226;
      v64 = *(unsigned int *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x4C);
      v65 = *(_DWORD *)(16 * (*(_DWORD *)v62 & 0xFFFFFFFE) + 0x4C) != 0;
      v66 = 16 * v64;
      if ((_DWORD)v64)
        v67 = v163 == (int8x16_t **)v66;
      else
        v67 = 1;
      if (!v67)
      {
        do
        {
          v66 = *(_QWORD *)(v66 + 16);
          v65 = v66 != 0;
        }
        while ((int8x16_t **)v66 != v163 && v66 != 0);
      }
      if (!v65)
      {
LABEL_226:
        v165[0] = *((JSC::VM **)a1 + 7);
        v56 = JSC::throwDOMAttributeGetterTypeError(v63, v165, v163, (WTF::StringImpl *)v12);
      }
      else
      {
LABEL_106:
        v56 = v155(v63);
      }
    }
    v44 = v56;
  }
LABEL_53:
  if (v162)
  {
    v48 = *(_DWORD *)(v161 + 4);
    if (!v48)
    {
      __break(0xC471u);
      JUMPOUT(0x198979D5CLL);
    }
    *(_DWORD *)(v161 + 4) = v48 - 1;
  }
  if (*(_DWORD *)(v10 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, a2, a3, a4, a5, a6, a7, a8))
    return 1;
  if (v44 >= 0xFFFE000000000000)
  {
    v55 = (_DWORD)v44 == 0;
    return !v55;
  }
  if (v44 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    return COERCE_DOUBLE(v44 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v44 - 0x2000000000000) < 0.0;
  if ((v44 & 0xFFFE000000000002) != 0)
    return v44 == 7;
  v50 = *(unsigned __int8 *)(v44 + 5);
  if (v50 == 2)
  {
    v59 = *(_QWORD *)(v44 + 8);
    if ((v59 & 1) != 0)
      v60 = (int *)(v44 + 16);
    else
      v60 = (int *)(v59 + 4);
    v61 = *v60;
    goto LABEL_89;
  }
  if (v50 == 3)
  {
    v61 = *(_DWORD *)(v44 + 8);
LABEL_89:
    v55 = v61 == 0;
    return !v55;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0xA) & 1) == 0)
    return 1;
  v55 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
  return !v55;
}

uint64_t JSC::iteratorStep(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;

  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v17 = JSC::iteratorNext(a1, a2, a3, 0, a5, a6, a7, a8);
  if (*((_DWORD *)v9 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v9, v10, v11, v12, v13, v14, v15, v16))
    return 0;
  v26 = JSC::iteratorComplete(a1, v17, v11, v12, v13, v14, v15, v16, v18);
  if (*((_DWORD *)v9 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v9, v19, v20, v21, v22, v23, v24, v25))
      return 0;
  }
  if (v26)
    return 6;
  return v17;
}

void JSC::iteratorClose(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unsigned int *v11;
  JSC::Exception *v12;
  unsigned int *v13;
  unint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _WORD *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  BOOL v60;
  int v62;
  BOOL v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int8x16_t **v79;
  int v80;
  _BYTE *v81;
  uint64_t v82;
  unsigned int v83;
  JSC::VMTraps *v84;
  JSC::VMTraps *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  JSC::VM *v91;
  JSC::VMTraps *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  int v105;
  unsigned int v106;
  int v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  JSC::VM *v113;
  JSC::VMTraps *v114;
  char *v115;
  char *v116;
  char OwnStaticPropertySlot;
  char *v118;
  uint64_t v119;
  char *v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned __int8 *v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  size_t v132;
  char *v133;
  char *v134;
  int v135;
  uint64_t v136;
  unsigned __int8 *v137;
  JSC::VM **v138;
  uint64_t v139;
  int v140;
  int v141;
  JSC::VM **p_dst;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  int v147;
  unsigned int *v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int16 *v152;
  uint64_t v153;
  unsigned int v154;
  int v155;
  int v156;
  uint64_t v157;
  unsigned __int8 *v158;
  uint64_t v159;
  unsigned int v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  int v165;
  uint64_t v166;
  int v167;
  int v168;
  unint64_t v169;
  unint64_t v170;
  char v171;
  uint64_t v172;
  unsigned int *v173;
  uint64_t v174;
  uint64_t Index;
  int v176;
  char v177;
  int v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned __int16 *v183;
  uint64_t v184;
  unsigned int v185;
  unsigned __int8 *v186;
  uint64_t v187;
  unsigned int v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  char v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  char v198;
  int v199;
  unint64_t v200;
  unint64_t v201;
  char v202;
  unsigned int v203;
  unsigned __int8 *v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  _DWORD *v209;
  unsigned int v210;
  unint64_t v211;
  JSC::VMTraps *v212;
  JSC::VMTraps *v213;
  char *v214;
  char *v215;
  char v216;
  JSC::Structure *v217;
  uint64_t v218;
  uint64_t v219;
  JSC::VMTraps *v220;
  JSC::VMTraps *v221;
  JSC::VMTraps *v222;
  JSC::VMTraps *v223;
  JSC::VMTraps *v224;
  JSC::VM *v225;
  uint64_t v226;
  uint64_t (*v227)(unint64_t);
  uint64_t v228;
  unint64_t v229;
  _DWORD *v230;
  _DWORD *v231;
  _QWORD v232[2];
  uint64_t v233;
  char v234;
  int8x16_t **v235;
  uint64_t v236;
  JSC::VM *__dst;
  _QWORD v238[15];
  char __s[8];
  int v240;
  uint64_t v241;

  v9 = a2;
  v241 = *MEMORY[0x1E0C80C00];
  v11 = (unsigned int *)*((_QWORD *)a1 + 7);
  v225 = (JSC::VM *)v11;
  v226 = a2;
  v12 = (JSC::Exception *)*((_QWORD *)v11 + 2);
  v13 = v11;
  if (v12)
  {
    *((_QWORD *)v11 + 2) = 0;
    v148 = v11 + 20;
    do
      v149 = __ldaxr(v148);
    while (__stlxr(v149 & 0xFFFFFFEF, v148));
    v13 = (unsigned int *)*((_QWORD *)a1 + 7);
  }
  v14 = *(_QWORD *)(*((_QWORD *)v11 + 5244) + 384);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v229 = 0xFFFFFFFF00000000;
  LOBYTE(v233) = 0;
  v234 = 0;
  v235 = 0;
  v236 = 0;
  v231 = 0;
  memset(v232, 0, 13);
  v230 = (_DWORD *)a2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v15 = *(unsigned __int8 *)(a2 + 5);
    if (v15 > 0x16)
      goto LABEL_4;
    if (v15 == 2)
    {
      if (*(_QWORD *)(*((_QWORD *)v13 + 5244) + 1768) == v14)
      {
        v172 = *(_QWORD *)(a2 + 8);
        if ((v172 & 1) != 0)
          v173 = (unsigned int *)(a2 + 16);
        else
          v173 = (unsigned int *)(v172 + 4);
        v174 = *v173;
        if ((v174 & 0x80000000) != 0)
        {
          *(double *)a9.i64 = (double)v174;
          Index = COERCE__INT64((double)v174) + 0x2000000000000;
        }
        else
        {
          Index = v174 | 0xFFFE000000000000;
        }
        v176 = 14;
        goto LABEL_343;
      }
      if (v14)
      {
        v178 = *(_DWORD *)(v14 + 16);
        if ((v178 & 0x20) == 0)
        {
          v179 = *(_BYTE **)(v14 + 8);
          v180 = *(unsigned int *)(v14 + 4);
          if ((v178 & 4) != 0)
          {
            if (!(_DWORD)v180)
              goto LABEL_349;
            a3 = *v179 - 48;
            if (a3 > 9)
              goto LABEL_349;
            if (v180 >= 2 && *v179 == 48)
              goto LABEL_349;
            v205 = v179 + 1;
            v206 = v180 - 1;
            while (v206)
            {
              if (a3 > 0x19999999)
                goto LABEL_349;
              v207 = *v205 - 48;
              if (v207 > 9)
                goto LABEL_349;
              v177 = 0;
              v51 = __CFADD__(v207, 10 * a3);
              a3 = v207 + 10 * (_DWORD)a3;
              ++v205;
              --v206;
              if (v51)
                goto LABEL_350;
            }
          }
          else
          {
            if (!(_DWORD)v180)
              goto LABEL_349;
            a3 = *(unsigned __int16 *)v179 - 48;
            if (a3 > 9)
              goto LABEL_349;
            if (*(_WORD *)v179 == 48 && v180 > 1)
              goto LABEL_349;
            v183 = (unsigned __int16 *)(v179 + 2);
            v184 = v180 - 1;
            while (v184)
            {
              if (a3 > 0x19999999)
                goto LABEL_349;
              v185 = *v183 - 48;
              if (v185 > 9)
                goto LABEL_349;
              v177 = 0;
              v51 = __CFADD__(v185, 10 * a3);
              a3 = v185 + 10 * (_DWORD)a3;
              ++v183;
              --v184;
              if (v51)
                goto LABEL_350;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v208 = *(_QWORD *)(a2 + 8);
            v209 = (_DWORD *)((v208 & 1) != 0 ? a2 + 16 : v208 + 4);
            if (*v209 > a3)
            {
              Index = JSC::JSString::getIndex((JSC::JSString *)a2, a1, a3, a4, a5, a6, a7, a8, a9);
              if (!v13[20])
                goto LABEL_447;
              v210 = v13[20];
              if ((v210 & 0x27) != 0 && (v210 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 16), 7u, a3, a4, a5, a6, a7, a8);
              if (!*((_QWORD *)v13 + 2))
              {
LABEL_447:
                v176 = 10;
LABEL_343:
                v227 = (uint64_t (*)(unint64_t))Index;
                LODWORD(v229) = v176;
                v231 = 0;
                v177 = 1;
                BYTE1(v232[1]) = 1;
                goto LABEL_350;
              }
            }
          }
        }
      }
LABEL_349:
      v177 = 0;
LABEL_350:
      if (v13[20])
      {
        v203 = v13[20];
        if ((v203 & 0x27) != 0 && (v203 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 16), 7u, a3, a4, a5, a6, a7, a8);
        if (*((_QWORD *)v13 + 2))
          goto LABEL_47;
      }
      if ((v177 & 1) != 0)
        goto LABEL_66;
    }
  }
  v181 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v226, (unint64_t)a1);
  if (!v181)
    goto LABEL_47;
  v9 = v181;
  v13 = (unsigned int *)*((_QWORD *)a1 + 7);
LABEL_4:
  v16 = (_BYTE *)(v9 + 6);
  v17 = v14 >> 4;
  v18 = v9;
  if ((*(_BYTE *)(v9 + 6) & 8) == 0)
  {
    v19 = v9;
    do
    {
      v20 = *(_DWORD *)v19 & 0xFFFFFFFE;
      v21 = 16 * v20;
      if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v20 + 0x20)) != 0)
        goto LABEL_33;
      v22 = *(_QWORD *)(16 * v20 + 0x58);
      if (!v22)
      {
        v23 = *(_QWORD *)(16 * v20 + 0x40);
        if (!v23 || *(_BYTE *)(v23 + 5) != 1 && *(_DWORD *)(v23 + 80) < 2u)
          goto LABEL_33;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v21, (JSC::VM *)v13, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v22)
          goto LABEL_33;
      }
      if (!*(_DWORD *)(v22 + 24))
        goto LABEL_33;
      v24 = *(_QWORD *)(v22 + 16);
      v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
      v26 = *(unsigned int *)(v22 + 8);
      v27 = *(_DWORD *)(v14 + 16);
      if ((v24 & 1) != 0)
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v14 + 32);
        v28 = *(_DWORD *)(v22 + 12);
        v29 = (v27 >> 8) & *(_QWORD *)&v28;
        v30 = *(unsigned __int8 *)(v25 + v29);
        if (!*(_BYTE *)(v25 + v29))
          goto LABEL_33;
        v31 = v25 + v26;
        v32 = 1;
        while (1)
        {
          v33 = *(_QWORD *)(v31 + 8 * (v30 - 1));
          if (v14 == (v33 & 0xFFFFFFFFFFFFLL))
            break;
          v29 = ((_DWORD)v29 + v32) & v28;
          v30 = *(unsigned __int8 *)(v25 + v29);
          ++v32;
          if (!*(_BYTE *)(v25 + v29))
            goto LABEL_33;
        }
        a6 = (v33 >> 16) & 0xFF00000000 | HIBYTE(v33);
      }
      else
      {
        if ((v27 & 0x20) != 0)
          v27 = *(_DWORD *)(v14 + 32);
        v34 = *(_DWORD *)(v22 + 12);
        v35 = v34 & (v27 >> 8);
        v36 = *(_DWORD *)(v25 + 4 * v35);
        if (!v36)
          goto LABEL_33;
        v37 = v25 + 4 * v26;
        v38 = 1;
        while (1)
        {
          v39 = (v36 - 1);
          if (v14 == *(_QWORD *)(v37 + 16 * v39))
            break;
          v35 = (v35 + v38) & v34;
          v36 = *(_DWORD *)(v25 + 4 * v35);
          ++v38;
          if (!v36)
            goto LABEL_33;
        }
        a6 = *(unsigned int *)(v37 + 16 * v39 + 8) | ((unint64_t)*(unsigned __int8 *)(v37 + 16 * v39 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v45 = v19 + 16;
          v46 = a6 << 32;
        }
        else
        {
          v45 = *(_QWORD *)(v19 + 8) - 8;
          v46 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v45 + (v46 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v47 = *(unsigned __int8 *)(a4 + 5);
          if (v47 != 5)
          {
            if (v47 != 6)
              goto LABEL_54;
            v76 = *(_DWORD *)(v21 + 16) & 3;
            v77 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v79 = *(int8x16_t ***)(a4 + 24);
              v78 = *(_QWORD *)(a4 + 32);
              v227 = *(uint64_t (**)(unint64_t))(a4 + 8);
              v228 = v77;
              LODWORD(v229) = HIDWORD(a6);
              v231 = (_DWORD *)v19;
              goto LABEL_116;
            }
            v227 = *(uint64_t (**)(unint64_t))(a4 + 8);
            v228 = v77;
            LODWORD(v229) = HIDWORD(a6);
            v231 = (_DWORD *)v19;
LABEL_261:
            BYTE1(v232[1]) = 3;
            if (v76 != 2)
              LOBYTE(v232[1]) = 1;
            goto LABEL_66;
          }
          v52 = (unsigned int *)v19;
          v53 = (uint64_t)v13;
LABEL_65:
          JSC::JSObject::fillGetterPropertySlot(v52, v53, (uint64_t)&v227, a4, a5, a6);
          goto LABEL_66;
        }
LABEL_54:
        v227 = (uint64_t (*)(unint64_t))a4;
        v231 = (_DWORD *)v19;
LABEL_55:
        v229 = __PAIR64__(a6, a5);
        LOWORD(v232[1]) = 257;
        goto LABEL_66;
      }
LABEL_33:
      if ((*v16 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v19, (JSC::VM *)v13, v14, (uint64_t)&v227) & 1) != 0)
      {
        goto LABEL_66;
      }
      v18 = *(_QWORD *)(v21 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v19 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!v14)
          goto LABEL_47;
        v40 = *(_DWORD *)(v14 + 16);
        if ((v40 & 0x20) != 0)
          goto LABEL_47;
        v41 = *(_WORD **)(v14 + 8);
        v42 = *(unsigned int *)(v14 + 4);
        if ((v40 & 4) == 0)
        {
          if ((_DWORD)v42)
          {
            v43 = (unsigned __int16)*v41 - 48;
            if (v43 <= 9 && (*v41 != 48 || v42 <= 1))
            {
              v48 = v41 + 1;
              v49 = v42 - 1;
              v44 = 10;
              while (v49)
              {
                if (v43 <= 0x19999999)
                {
                  v50 = *v48 - 48;
                  if (v50 <= 9)
                  {
                    v51 = __CFADD__(v50, 10 * v43);
                    v43 = v50 + 10 * v43;
                    ++v48;
                    --v49;
                    if (!v51)
                      continue;
                  }
                }
                goto LABEL_86;
              }
              goto LABEL_294;
            }
          }
          goto LABEL_47;
        }
        if (!(_DWORD)v42)
          goto LABEL_47;
        v43 = *(unsigned __int8 *)v41 - 48;
        if (v43 > 9 || v42 >= 2 && *(_BYTE *)v41 == 48)
          goto LABEL_47;
        v158 = (unsigned __int8 *)v41 + 1;
        v159 = v42 - 1;
        v44 = 10;
        while (v159)
        {
          if (v43 <= 0x19999999)
          {
            v160 = *v158 - 48;
            if (v160 <= 9)
            {
              v51 = __CFADD__(v160, 10 * v43);
              v43 = v160 + 10 * v43;
              ++v158;
              --v159;
              if (!v51)
                continue;
            }
          }
          goto LABEL_86;
        }
LABEL_294:
        if (v43 == -1)
        {
LABEL_47:
          v44 = 10;
          goto LABEL_86;
        }
        v161 = v43;
        v162 = *((_QWORD *)a1 + 7);
        v223 = (JSC::VMTraps *)(v162 + 64);
        v44 = 10;
        while (2)
        {
          v163 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
          v164 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v163 + 0x4C) + 0x70))(v9, a1, v161, &v227);
          if (*(_DWORD *)(v162 + 80))
          {
            v167 = *(_DWORD *)(v162 + 80);
            if ((v167 & 0x27) != 0 && (v167 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v223, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v162 + 16))
              goto LABEL_86;
          }
          if ((v164 & 1) != 0)
            goto LABEL_66;
          if (BYTE2(v232[1]) == 3)
          {
            if (BYTE4(v232[1]))
              goto LABEL_86;
            v165 = *(unsigned __int8 *)(v9 + 5);
            if (v165 != 61)
              goto LABEL_300;
          }
          else
          {
            v165 = *(unsigned __int8 *)(v9 + 5);
            if (v165 == 61)
            {
              if (BYTE2(v232[1]) == 1)
                goto LABEL_86;
            }
            else
            {
LABEL_300:
              if ((v165 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  LOBYTE(v238[0]) = 0;
                  v170 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v169 = v171 ? v170 : 0;
                }
                else
                {
                  v169 = *(_QWORD *)(v9 + 24);
                }
                if (v169 <= v161)
                  goto LABEL_86;
              }
            }
          }
          if ((*(_WORD *)(v163 + 12) & 0x800) == 0 || BYTE2(v232[1]) == 3)
          {
            v166 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
            if (!v166)
              v166 = *(_QWORD *)(v9 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v166 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v9 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v9, a1);
            }
            else
            {
              v166 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
              if (!v166)
                v166 = *(_QWORD *)(v9 + 16);
            }
            if (*(_DWORD *)(v162 + 80))
            {
              v168 = *(_DWORD *)(v162 + 80);
              if ((v168 & 0x27) != 0 && (v168 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v223, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v162 + 16))
                goto LABEL_86;
            }
          }
          if ((v166 & 0xFFFE000000000002) != 0)
            goto LABEL_86;
          v9 = v166;
          if (*(unsigned __int8 *)(v166 + 5) <= 0x16u)
            goto LABEL_86;
          continue;
        }
      }
      v16 = (_BYTE *)(v18 + 6);
      v19 = v18;
    }
    while ((*(_BYTE *)(v18 + 6) & 8) == 0);
  }
  if (v14)
  {
    v80 = *(_DWORD *)(v14 + 16);
    if ((v80 & 0x20) == 0)
    {
      v81 = *(_BYTE **)(v14 + 8);
      v82 = *(unsigned int *)(v14 + 4);
      if ((v80 & 4) != 0)
      {
        if ((_DWORD)v82)
        {
          v83 = *v81 - 48;
          if (v83 <= 9 && (v82 < 2 || *v81 != 48))
          {
            v186 = v81 + 1;
            v187 = v82 - 1;
            while (v187)
            {
              if (v83 <= 0x19999999)
              {
                v188 = *v186 - 48;
                if (v188 <= 9)
                {
                  v51 = __CFADD__(v188, 10 * v83);
                  v83 = v188 + 10 * v83;
                  ++v186;
                  --v187;
                  if (!v51)
                    continue;
                }
              }
              goto LABEL_126;
            }
LABEL_376:
            if (v83 != -1)
            {
              v189 = v83;
              v190 = *((_QWORD *)a1 + 7);
              v224 = (JSC::VMTraps *)(v190 + 64);
              v44 = 10;
              while (1)
              {
                v191 = 16 * (*(_DWORD *)v9 & 0xFFFFFFFE);
                v192 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v191 + 0x4C) + 0x70))(v9, a1, v189, &v227);
                v193 = v192;
                if (*(_DWORD *)(v190 + 80))
                {
                  v196 = *(_DWORD *)(v190 + 80);
                  if ((v196 & 0x27) != 0 && (v196 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v224, 7u, a3, a4, a5, a6, a7, a8);
                  v197 = *(_QWORD *)(v190 + 16);
                  if (v197)
                    v198 = 1;
                  else
                    v198 = v193;
                  if ((v198 & 1) != 0)
                  {
                    if (!v197)
                      goto LABEL_66;
                    goto LABEL_47;
                  }
                }
                else if ((v192 & 1) != 0)
                {
                  goto LABEL_66;
                }
                if (BYTE2(v232[1]) == 3)
                {
                  if (BYTE4(v232[1]))
                    goto LABEL_86;
                  v194 = *(unsigned __int8 *)(v9 + 5);
                  if (v194 == 61)
                    goto LABEL_383;
                }
                else
                {
                  v194 = *(unsigned __int8 *)(v9 + 5);
                  if (v194 == 61)
                  {
                    if (BYTE2(v232[1]) == 1)
                      goto LABEL_86;
                    goto LABEL_383;
                  }
                }
                if ((v194 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v9 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    LOBYTE(v238[0]) = 0;
                    v201 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v9, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v200 = v202 ? v201 : 0;
                  }
                  else
                  {
                    v200 = *(_QWORD *)(v9 + 24);
                  }
                  if (v200 <= v189)
                    goto LABEL_86;
                }
LABEL_383:
                if ((*(_WORD *)(v191 + 12) & 0x800) == 0 || BYTE2(v232[1]) == 3)
                {
                  v195 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                  if (!v195)
                    v195 = *(_QWORD *)(v9 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v195 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v9, a1);
                  }
                  else
                  {
                    v195 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x30);
                    if (!v195)
                      v195 = *(_QWORD *)(v9 + 16);
                  }
                  if (*(_DWORD *)(v190 + 80))
                  {
                    v199 = *(_DWORD *)(v190 + 80);
                    if ((v199 & 0x27) != 0 && (v199 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v224, 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v190 + 16))
                      goto LABEL_86;
                  }
                }
                if ((v195 & 0xFFFE000000000002) == 0)
                {
                  v9 = v195;
                  if (*(unsigned __int8 *)(v195 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_86;
              }
            }
          }
        }
      }
      else if ((_DWORD)v82)
      {
        v83 = *(unsigned __int16 *)v81 - 48;
        if (v83 <= 9 && (*(_WORD *)v81 != 48 || v82 <= 1))
        {
          v152 = (unsigned __int16 *)(v81 + 2);
          v153 = v82 - 1;
          while (v153)
          {
            if (v83 <= 0x19999999)
            {
              v154 = *v152 - 48;
              if (v154 <= 9)
              {
                v51 = __CFADD__(v154, 10 * v83);
                v83 = v154 + 10 * v83;
                ++v152;
                --v153;
                if (!v51)
                  continue;
              }
            }
            goto LABEL_126;
          }
          goto LABEL_376;
        }
      }
    }
  }
LABEL_126:
  v84 = (JSC::VMTraps *)*((_QWORD *)a1 + 7);
  v85 = (JSC::VMTraps *)((char *)v84 + 64);
  v86 = &__s[1];
  v87 = &__s[3];
  v44 = 10;
  while (1)
  {
    v88 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v18 + 6) & 8) == 0)
      break;
    v213 = v85;
    v215 = v87;
    v120 = v86;
    v219 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    v216 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, uint64_t (**)(unint64_t)))(16 * *(unsigned int *)(v219 + 0x4C) + 0x68))(v18, a1, v14, &v227);
    v222 = v84;
    if (*((_DWORD *)v84 + 20))
    {
      v146 = *((_DWORD *)v84 + 20);
      if ((v146 & 0x27) != 0 && (v146 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v213, 7u, a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v84 + 2))
        goto LABEL_86;
    }
    if ((v216 & 1) != 0)
      goto LABEL_66;
    if (BYTE2(v232[1]) == 3)
    {
      if (BYTE4(v232[1]))
        goto LABEL_86;
      v121 = *(unsigned __int8 *)(v18 + 5);
      if (v121 == 61)
        goto LABEL_226;
    }
    else
    {
      v121 = *(unsigned __int8 *)(v18 + 5);
      if (v121 == 61)
      {
        v85 = v213;
        v87 = v215;
        v86 = v120;
        v88 = v219;
        if (BYTE2(v232[1]) == 1)
          goto LABEL_86;
        goto LABEL_156;
      }
    }
    if (!v14)
      goto LABEL_226;
    if ((v121 - 50) < 0xFFFFFFF5)
      goto LABEL_226;
    v122 = *(_DWORD *)(v14 + 16);
    if ((v122 & 0x20) != 0)
      goto LABEL_226;
    v123 = *(unsigned int *)(v14 + 4);
    if (!(_DWORD)v123)
      goto LABEL_226;
    v124 = *(unsigned __int8 **)(v14 + 8);
    if ((v122 & 4) != 0)
    {
      v125 = *v124;
      if ((_DWORD)v123 == 1)
      {
LABEL_181:
        v85 = v213;
        v87 = v215;
        v86 = v120;
        v88 = v219;
        if ((v125 - 48) < 0xA)
          goto LABEL_86;
        goto LABEL_156;
      }
      if (v125 == 45)
      {
        v125 = v124[1];
        goto LABEL_185;
      }
      if ((v125 - 48) < 0xA)
        goto LABEL_196;
      if ((_DWORD)v123 == 8)
        goto LABEL_195;
    }
    else
    {
      v125 = *(unsigned __int16 *)v124;
      if ((_DWORD)v123 == 1)
        goto LABEL_181;
      if (v125 == 45)
      {
        v125 = *((unsigned __int16 *)v124 + 1);
LABEL_185:
        if ((v125 - 48) < 0xA)
        {
          if ((_DWORD)v123 == 2)
            goto LABEL_86;
          goto LABEL_196;
        }
        if ((_DWORD)v123 != 9)
          goto LABEL_226;
LABEL_195:
        if (v125 != 73)
          goto LABEL_226;
        goto LABEL_196;
      }
      if ((v125 - 48) < 0xA || (_DWORD)v123 == 8 && v125 == 73)
        goto LABEL_196;
    }
    if ((_DWORD)v123 != 3 || v125 != 78)
      goto LABEL_226;
LABEL_196:
    v211 = v211 & 0xFFFFFF0000000000 | v123 | ((unint64_t)((v122 >> 2) & 1) << 32);
    JSC::jsToNumber(v124, v211);
    v127 = (v126 >> 52) & 0x7FF;
    if ((_DWORD)v127 == 2047)
    {
      if ((v126 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v128 = v215;
      }
      else
      {
        if ((v126 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v134 = v120;
        }
        else
        {
          v134 = __s;
        }
        *(_QWORD *)v134 = 0x7974696E69666E49;
        v128 = v134 + 8;
      }
      goto LABEL_210;
    }
    v129 = v126 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v126 & 0x8000000000000000) != 0 && v129)
    {
      __s[0] = 45;
      v130 = v120;
    }
    else
    {
      if (!v129)
      {
        __s[0] = 48;
        v128 = v120;
        goto LABEL_210;
      }
      v130 = __s;
    }
    v131 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v126 & 0x800FFFFFFFFFFFFFLL, v127);
    v128 = WTF::dragonbox::detail::to_shortest(v131, v132, (uint64_t)v130, v133);
LABEL_210:
    *v128 = 0;
    v135 = strlen(__s);
    memcpy(&__dst, __s, v135);
    *((_BYTE *)&v238[-1] + v135) = 0;
    v136 = *(unsigned int *)(v14 + 4);
    v137 = *(unsigned __int8 **)(v14 + 8);
    if ((*(_BYTE *)(v14 + 16) & 4) != 0)
    {
      if ((_DWORD)v136)
      {
        p_dst = &__dst;
        v143 = *(unsigned int *)(v14 + 4);
        do
        {
          v145 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::VM **)((char *)p_dst + 1);
          v144 = v145;
          if (!v145 || *v137 != v144)
            goto LABEL_226;
          ++v137;
        }
        while (--v143);
      }
    }
    else if ((_DWORD)v136)
    {
      v138 = &__dst;
      v139 = *(unsigned int *)(v14 + 4);
      while (1)
      {
        v141 = *(unsigned __int8 *)v138;
        v138 = (JSC::VM **)((char *)v138 + 1);
        v140 = v141;
        if (!v141 || *(unsigned __int16 *)v137 != v140)
          break;
        v137 += 2;
        if (!--v139)
          goto LABEL_222;
      }
LABEL_226:
      v85 = v213;
      v87 = v215;
      v86 = v120;
      v88 = v219;
      v84 = v222;
      goto LABEL_156;
    }
LABEL_222:
    v85 = v213;
    v87 = v215;
    v86 = v120;
    v88 = v219;
    v84 = v222;
    if (!*((_BYTE *)&v238[-1] + v136))
      goto LABEL_86;
LABEL_156:
    if ((*(_WORD *)(v88 + 12) & 0x800) == 0)
    {
      v111 = *(_DWORD *)v18;
LABEL_158:
      v112 = *(_QWORD *)(16 * (v111 & 0xFFFFFFFE) + 0x30);
      if (!v112)
        v112 = *(_QWORD *)(v18 + 16);
      goto LABEL_160;
    }
    v111 = *(_DWORD *)v18;
    if (BYTE2(v232[1]) == 3)
      goto LABEL_158;
    v212 = v85;
    v214 = v87;
    v118 = v86;
    v119 = 16 * (v111 & 0xFFFFFFFE);
    if ((*(_WORD *)(v119 + 12) & 0x800) != 0)
    {
      v112 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v119 + 76) + 0xB0))(v18, a1);
    }
    else
    {
      v112 = *(_QWORD *)(v119 + 48);
      if (!v112)
        v112 = *(_QWORD *)(v18 + 16);
    }
    if (*((_DWORD *)v84 + 20))
    {
      v147 = *((_DWORD *)v84 + 20);
      if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v212, 7u, a3, a4, a5, a6, a7, a8);
      v85 = v212;
      v87 = v214;
      v86 = v118;
      if (*((_QWORD *)v84 + 2))
        goto LABEL_86;
    }
    else
    {
      v85 = v212;
      v87 = v214;
      v86 = v118;
    }
LABEL_160:
    if ((v112 & 0xFFFE000000000002) == 0)
    {
      v18 = v112;
      if (*(unsigned __int8 *)(v112 + 5) > 0x16u)
        continue;
    }
    goto LABEL_86;
  }
  if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_155;
  v89 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
  if (!v89)
  {
    v90 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
    if (!v90 || *(_BYTE *)(v90 + 5) != 1 && *(_DWORD *)(v90 + 80) < 2u)
      goto LABEL_155;
    v217 = (JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE));
    v220 = v84;
    v91 = v84;
    v92 = v85;
    v93 = v86;
    v94 = v87;
    JSC::Structure::materializePropertyTable(v217, v91, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    v87 = v94;
    v86 = v93;
    v88 = (uint64_t)v217;
    v84 = v220;
    v85 = v92;
    if (!v89)
      goto LABEL_155;
  }
  if (!*(_DWORD *)(v89 + 24))
    goto LABEL_155;
  v95 = *(_QWORD *)(v89 + 16);
  v96 = v95 & 0xFFFFFFFFFFFFFFFELL;
  v97 = *(unsigned int *)(v89 + 8);
  v98 = *(_DWORD *)(v14 + 16);
  if ((v95 & 1) != 0)
  {
    if ((v98 & 0x20) != 0)
      v98 = *(_DWORD *)(v14 + 32);
    v99 = *(_DWORD *)(v89 + 12);
    v100 = (v98 >> 8) & *(_QWORD *)&v99;
    v101 = *(unsigned __int8 *)(v96 + v100);
    if (*(_BYTE *)(v96 + v100))
    {
      v102 = v96 + v97;
      v103 = 1;
      while (1)
      {
        v104 = *(_QWORD *)(v102 + 8 * (v101 - 1));
        if (v14 == (v104 & 0xFFFFFFFFFFFFLL))
          break;
        v100 = ((_DWORD)v100 + v103) & v99;
        v101 = *(unsigned __int8 *)(v96 + v100);
        ++v103;
        if (!*(_BYTE *)(v96 + v100))
          goto LABEL_155;
      }
      a6 = (v104 >> 16) & 0xFF00000000 | HIBYTE(v104);
      goto LABEL_152;
    }
    goto LABEL_155;
  }
  if ((v98 & 0x20) != 0)
    v98 = *(_DWORD *)(v14 + 32);
  v105 = *(_DWORD *)(v89 + 12);
  v106 = v105 & (v98 >> 8);
  v107 = *(_DWORD *)(v96 + 4 * v106);
  if (!v107)
    goto LABEL_155;
  v108 = v96 + 4 * v97;
  v109 = 1;
  while (1)
  {
    v110 = (v107 - 1);
    if (v14 == *(_QWORD *)(v108 + 16 * v110))
      break;
    v106 = (v106 + v109) & v105;
    v107 = *(_DWORD *)(v96 + 4 * v106);
    ++v109;
    if (!v107)
      goto LABEL_155;
  }
  a6 = *(unsigned int *)(v108 + 16 * v110 + 8) | ((unint64_t)*(unsigned __int8 *)(v108 + 16 * v110 + 12) << 32);
LABEL_152:
  if ((_DWORD)a6 == -1)
  {
LABEL_155:
    if ((*(_BYTE *)(v18 + 6) & 0x20) != 0)
    {
      v218 = v88;
      v221 = v84;
      v113 = v84;
      v114 = v85;
      v115 = v86;
      v116 = v87;
      OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v113, v14, (uint64_t)&v227);
      v87 = v116;
      v86 = v115;
      v88 = v218;
      v84 = v221;
      v85 = v114;
      if ((OwnStaticPropertySlot & 1) != 0)
        goto LABEL_66;
    }
    goto LABEL_156;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v150 = v18 + 16;
    v151 = a6 << 32;
  }
  else
  {
    v150 = *(_QWORD *)(v18 + 8) - 8;
    v151 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v150 + (v151 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_267:
    v227 = (uint64_t (*)(unint64_t))a4;
    v231 = (_DWORD *)v18;
    goto LABEL_55;
  }
  v155 = *(unsigned __int8 *)(a4 + 5);
  if (v155 == 5)
  {
    v52 = (unsigned int *)v18;
    v53 = (uint64_t)v84;
    goto LABEL_65;
  }
  if (v155 != 6)
    goto LABEL_267;
  v76 = *(_DWORD *)(v88 + 16) & 3;
  v157 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v227 = *(uint64_t (**)(unint64_t))(a4 + 8);
    v228 = v157;
    LODWORD(v229) = HIDWORD(a6);
    v231 = (_DWORD *)v18;
    goto LABEL_261;
  }
  v79 = *(int8x16_t ***)(a4 + 24);
  v78 = *(_QWORD *)(a4 + 32);
  v227 = *(uint64_t (**)(unint64_t))(a4 + 8);
  v228 = v157;
  LODWORD(v229) = HIDWORD(a6);
  v231 = (_DWORD *)v18;
LABEL_116:
  BYTE1(v232[1]) = 3;
  if (v76 != 2)
    LOBYTE(v232[1]) = 1;
  BYTE3(v232[1]) = 1;
  v235 = v79;
  v236 = v78;
LABEL_66:
  if (BYTE1(v232[1]) == 1)
  {
    v44 = (uint64_t)v227;
  }
  else
  {
    if (BYTE1(v232[1]) == 2)
    {
      v54 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v227, a1, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v55 = (unint64_t)v231;
      v56 = *(_QWORD *)(16 * (*v231 & 0xFFFFFFFE) + 0x28);
      if ((v229 & 0x20) != 0)
        v55 = (unint64_t)v230;
      if (BYTE3(v232[1]) != 1)
        goto LABEL_84;
      if ((v55 & 0xFFFE000000000002) != 0)
        goto LABEL_281;
      v57 = *(unsigned int *)(16 * (*(_DWORD *)v55 & 0xFFFFFFFE) + 0x4C);
      v58 = *(_DWORD *)(16 * (*(_DWORD *)v55 & 0xFFFFFFFE) + 0x4C) != 0;
      v59 = 16 * v57;
      if ((_DWORD)v57)
        v60 = v235 == (int8x16_t **)v59;
      else
        v60 = 1;
      if (!v60)
      {
        do
        {
          v59 = *(_QWORD *)(v59 + 16);
          v58 = v59 != 0;
        }
        while ((int8x16_t **)v59 != v235 && v59 != 0);
      }
      if (!v58)
      {
LABEL_281:
        __dst = (JSC::VM *)*((_QWORD *)a1 + 7);
        v54 = JSC::throwDOMAttributeGetterTypeError(v56, &__dst, v235, (WTF::StringImpl *)v14);
      }
      else
      {
LABEL_84:
        v54 = v227(v56);
      }
    }
    v44 = v54;
  }
LABEL_86:
  if (v234)
  {
    v62 = *(_DWORD *)(v233 + 4);
    if (!v62)
    {
      __break(0xC471u);
      JUMPOUT(0x19897B37CLL);
    }
    *(_DWORD *)(v233 + 4) = v62 - 1;
  }
  if (*((_QWORD *)v225 + 2))
    v63 = 1;
  else
    v63 = (v44 & 0xFFFFFFFFFFFFFFF7) == 2;
  if (v63)
  {
    if (!v12)
      return;
LABEL_95:
    JSC::VM::throwException(v225, a1, v12, *(double *)a9.i64, a4, a5, a6, a7, a8);
    return;
  }
  if ((v44 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v227) = 0;
    goto LABEL_112;
  }
  if (*(_BYTE *)(v44 + 5) != 26)
  {
    (*(void (**)(uint64_t (**__return_ptr)(unint64_t), uint64_t))(16
                                                                                           * *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C)
                                                                                           + 0x38))(&v227, v44);
    if ((_BYTE)v227)
      goto LABEL_103;
LABEL_112:
    if (!v12)
    {
      JSC::throwTypeError(a1, &v225);
      return;
    }
    goto LABEL_95;
  }
  v64 = *(_QWORD *)(v44 + 24);
  if ((v64 & 1) != 0)
    v64 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v64 + 5) == 8)
  {
    LOBYTE(v227) = 1;
    v228 = *(_QWORD *)(v64 + 40);
    LOBYTE(v229) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE)
                                                                              + 0x4C));
  }
  else
  {
    LOBYTE(v227) = 2;
    v65 = *(_QWORD *)(v44 + 16);
    v228 = v64;
    v229 = v65;
  }
LABEL_103:
  LOBYTE(__dst) = 0;
  v238[0] = 0x800000000;
  memset(&v238[2], 0, 72);
  v238[1] = &v238[3];
  *(_QWORD *)__s = &v238[3];
  v240 = 0;
  v66 = JSC::call((uint64_t *)a1, v44, (unsigned __int8 *)&v227, v226, (uint64_t)__s, a6, a7, a8);
  if (v12)
  {
    JSC::VM::throwException(v225, a1, v12, v74, v69, v70, v71, v72, v73);
  }
  else
  {
    v75 = v66;
    if (!*((_DWORD *)v225 + 20))
      goto LABEL_107;
    v156 = *((_DWORD *)v225 + 20);
    if ((v156 & 0x27) != 0 && (v156 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v225 + 64), 7u, v68, v69, v70, v71, v72, v73);
    if (!*((_QWORD *)v225 + 2))
    {
LABEL_107:
      if ((v75 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v75 + 5) <= 0x16u)
        JSC::throwTypeError((unint64_t)a1, &v225, (uint64_t)"Iterator result interface is not an object.", 44);
    }
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v238, v67, v68, v69, v70, v71, v72, v73);
}

unint64_t JSC::createIteratorResultObjectStructure(JSC *this, JSC::JSObject **a2, JSC::JSGlobalObject *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  unint64_t result;
  int v21;

  v10 = JSC::StructureCache::emptyObjectStructureForPrototype((JSC::StructureCache *)(a2 + 246), (JSC::JSGlobalObject *)a2, a2[82], 6, 0, 0, a8, a9, a4);
  v21 = 0;
  v15 = JSC::Structure::addPropertyTransition(this, v10, *(_QWORD *)(*((_QWORD *)this + 5244) + 2608), 0, &v21, v14, v11, v12, v13);
  if (v21
    || (result = JSC::Structure::addPropertyTransition(this, v15, *(_QWORD *)(*((_QWORD *)this + 5244) + 1200), 0, &v21, v19, v16, v17, v18), v21 != 1))
  {
    __break(0xC471u);
    JUMPOUT(0x19897BC14);
  }
  return result;
}

unint64_t JSC::createIteratorResultObject(unint64_t a1, uint64_t a2, int a3)
{
  JSC *v5;
  JSC::VM *v6;
  JSC::Structure *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = *(JSC **)(a1 + 56);
  v6 = (JSC::VM *)JSC::LazyClassStructure::get((JSC::LazyClassStructure *)(a1 + 1072), a1);
  v13 = JSC::constructEmptyObject(v5, v6, v7, v8, v9, v10, v11, v12);
  JSC::JSObject::putDirectOffset(v13, (uint64_t)v5, 0, a2);
  if (a3)
    v14 = 7;
  else
    v14 = 6;
  JSC::JSObject::putDirectOffset(v13, (uint64_t)v5, 1, v14);
  return v13;
}

BOOL JSC::hasIteratorMethod(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Method;
  WTF::StringImpl *v20;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl *v31;
  _BYTE v32[24];
  uint64_t v33;
  uint64_t v34;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v33 = v2;
  v34 = v3;
  if (*(unsigned __int8 *)(a2 + 5) < 0x17u)
    return 0;
  v6 = *(_QWORD *)(a1 + 56);
  v32[0] = 0;
  v7 = (unint64_t *)(*(_QWORD *)(v6 + 41952) + 2712);
  v8 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v8 = 0x2B00000002;
  *(_QWORD *)(v8 + 8) = "Symbol.iterator property should be callable";
  *(_DWORD *)(v8 + 16) = 4;
  v31 = (WTF::StringImpl *)v8;
  Method = JSC::JSObject::getMethod((unsigned int *)a2, a1, (uint64_t)v32, v7, &v31, v9, v10, v11);
  v20 = v31;
  v31 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  if (!*(_DWORD *)(v6 + 80))
    return Method != 10;
  v30 = *(_DWORD *)(v6 + 80);
  if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v6 + 64), 7u, v13, v14, v15, v16, v17, v18);
  return !*(_QWORD *)(v6 + 16) && Method != 10;
}

uint64_t JSC::iteratorMethod(JSC *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t Method;
  WTF::StringImpl *v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  _BYTE v30[24];

  v5 = *((_QWORD *)this + 7);
  v30[0] = 0;
  v6 = (unint64_t *)(*(_QWORD *)(v5 + 41952) + 2712);
  v7 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v7 = 0x2B00000002;
  *(_QWORD *)(v7 + 8) = "Symbol.iterator property should be callable";
  *(_DWORD *)(v7 + 16) = 4;
  v29 = (WTF::StringImpl *)v7;
  Method = JSC::JSObject::getMethod((unsigned int *)a2, (unint64_t)this, (uint64_t)v30, v6, &v29, v8, v9, v10);
  v19 = v29;
  v29 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (*(_DWORD *)(v5 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5, (uint64_t)v11, v12, v13, v14, v15, v16, v17))
  {
    return 10;
  }
  return Method;
}

uint64_t JSC::iteratorForIterable(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::VM *v35;

  v9 = *((_QWORD *)a1 + 7);
  v35 = (JSC::VM *)v9;
  if ((a3 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v32) = 0;
    goto LABEL_16;
  }
  if (*(_BYTE *)(a3 + 5) != 26)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C)
                                                           + 0x38))(&v32, a3);
    if ((_BYTE)v32)
      goto LABEL_8;
LABEL_16:
    JSC::throwTypeError(a1, &v35);
    return 0;
  }
  v12 = *(_QWORD *)(a3 + 24);
  if ((v12 & 1) != 0)
    v12 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v12 + 5) == 8)
  {
    LOBYTE(v32) = 1;
    v33 = *(_QWORD *)(v12 + 40);
    LOBYTE(v34) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C));
  }
  else
  {
    LOBYTE(v32) = 2;
    v13 = *(_QWORD *)(a3 + 16);
    v33 = v12;
    v34 = v13;
  }
LABEL_8:
  v30 = 0;
  v31 = 0;
  v20 = JSC::call((uint64_t *)a1, a3, (unsigned __int8 *)&v32, a2, (uint64_t)&v30, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    v29 = *(_DWORD *)(v9 + 80);
    if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if ((v20 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v20 + 5) <= 0x16u)
    goto LABEL_16;
  JSC::JSObject::get((unsigned int *)v20, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2000), v15, v16, v17, v18, v19);
  if (*(_DWORD *)(v9 + 80))
  {
    v27 = *(_DWORD *)(v9 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  return v20;
}

uint64_t JSC::iteratorForIterable(JSC::VM **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  JSC::VM *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unsigned __int16 *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned __int8 *v100;
  int v101;
  double v102;
  const unsigned __int8 *v103;
  unsigned __int8 *v104;
  uint64_t v105;
  unsigned int v106;
  JSC::VM *v107;
  uint64_t v108;
  char v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t Index;
  int v116;
  char v117;
  uint64_t v118;
  int v119;
  _BYTE *v120;
  uint64_t v121;
  unsigned __int16 *v123;
  uint64_t v124;
  unsigned int v125;
  unsigned __int8 *v126;
  uint64_t v127;
  unsigned int v128;
  JSC::VM *v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  unsigned __int8 *v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  _DWORD *v141;
  unint64_t v142;
  JSC::VM *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD v150[2];
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v10 = a1[7];
  v143 = v10;
  v144 = a2;
  v11 = (char *)v10 + 41952;
  v12 = *((_QWORD *)v10 + 5244);
  v13 = *(_QWORD *)(v12 + 2712);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v147 = 0xFFFFFFFF00000000;
  LOBYTE(v151) = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v149 = 0;
  memset(v150, 0, 13);
  v148 = a2;
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v14 = a2;
    v15 = *(unsigned __int8 *)(a2 + 5);
    if (v15 > 0x16)
      goto LABEL_3;
    if (v15 == 2)
    {
      if (*(_QWORD *)(v12 + 1768) == v13)
      {
        v112 = *(_QWORD *)(a2 + 8);
        if ((v112 & 1) != 0)
          v113 = (unsigned int *)(a2 + 16);
        else
          v113 = (unsigned int *)(v112 + 4);
        v114 = *v113;
        if ((v114 & 0x80000000) != 0)
          Index = COERCE__INT64((double)v114) + 0x2000000000000;
        else
          Index = v114 | 0xFFFE000000000000;
        v116 = 14;
        goto LABEL_241;
      }
      if (v13)
      {
        v119 = *(_DWORD *)(v13 + 16);
        if ((v119 & 0x20) == 0)
        {
          v120 = *(_BYTE **)(v13 + 8);
          v121 = *(unsigned int *)(v13 + 4);
          if ((v119 & 4) != 0)
          {
            if (!(_DWORD)v121)
              goto LABEL_251;
            a3 = *v120 - 48;
            if (a3 > 9)
              goto LABEL_251;
            if (v121 >= 2 && *v120 == 48)
              goto LABEL_251;
            v137 = v120 + 1;
            v138 = v121 - 1;
            while (v138)
            {
              if (a3 > 0x19999999)
                goto LABEL_251;
              v139 = *v137 - 48;
              if (v139 > 9)
                goto LABEL_251;
              v117 = 0;
              v69 = __CFADD__(v139, 10 * a3);
              a3 = v139 + 10 * (_DWORD)a3;
              ++v137;
              --v138;
              if (v69)
                goto LABEL_242;
            }
          }
          else
          {
            if (!(_DWORD)v121)
              goto LABEL_251;
            a3 = *(unsigned __int16 *)v120 - 48;
            if (a3 > 9)
              goto LABEL_251;
            if (*(_WORD *)v120 == 48 && v121 > 1)
              goto LABEL_251;
            v123 = (unsigned __int16 *)(v120 + 2);
            v124 = v121 - 1;
            while (v124)
            {
              if (a3 > 0x19999999)
                goto LABEL_251;
              v125 = *v123 - 48;
              if (v125 > 9)
                goto LABEL_251;
              v117 = 0;
              v69 = __CFADD__(v125, 10 * a3);
              a3 = v125 + 10 * (_DWORD)a3;
              ++v123;
              --v124;
              if (v69)
                goto LABEL_242;
            }
          }
          if ((_DWORD)a3 != -1)
          {
            v140 = *(_QWORD *)(a2 + 8);
            v141 = (_DWORD *)((v140 & 1) != 0 ? a2 + 16 : v140 + 4);
            if (*v141 > a3)
            {
              Index = JSC::JSString::getIndex((JSC::JSString *)a2, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8, a9);
              if (!*((_DWORD *)v10 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v10, a2, a3, a4, a5, a6, a7, a8))
              {
                v116 = 10;
LABEL_241:
                v145 = Index;
                LODWORD(v147) = v116;
                v149 = 0;
                v117 = 1;
                BYTE1(v150[1]) = 1;
                goto LABEL_242;
              }
            }
          }
        }
      }
LABEL_251:
      v117 = 0;
LABEL_242:
      if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, a2, a3, a4, a5, a6, a7, a8))
        goto LABEL_43;
      if ((v117 & 1) != 0)
        goto LABEL_51;
    }
  }
  v118 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v144, (unint64_t)a1);
  if (!v118)
    goto LABEL_43;
  v14 = v118;
  v10 = a1[7];
LABEL_3:
  v16 = (_BYTE *)(v14 + 6);
  v17 = v13 >> 4;
  v18 = v14;
  if ((*(_BYTE *)(v14 + 6) & 8) == 0)
  {
    v19 = v14;
    do
    {
      v20 = *(_DWORD *)v19 & 0xFFFFFFFE;
      v21 = 16 * v20;
      if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v20 + 0x20)) != 0)
        goto LABEL_16;
      v22 = *(_QWORD *)(16 * v20 + 0x58);
      if (!v22)
      {
        v33 = *(_QWORD *)(16 * v20 + 0x40);
        if (!v33 || *(_BYTE *)(v33 + 5) != 1 && *(_DWORD *)(v33 + 80) < 2u)
          goto LABEL_16;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v21, v10, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v22)
          goto LABEL_16;
      }
      if (!*(_DWORD *)(v22 + 24))
        goto LABEL_16;
      v23 = *(_QWORD *)(v22 + 16);
      v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      v25 = *(unsigned int *)(v22 + 8);
      v26 = *(_DWORD *)(v13 + 16);
      if ((v23 & 1) != 0)
      {
        if ((v26 & 0x20) != 0)
          v26 = *(_DWORD *)(v13 + 32);
        v27 = *(_DWORD *)(v22 + 12);
        v28 = (v26 >> 8) & *(_QWORD *)&v27;
        v29 = *(unsigned __int8 *)(v24 + v28);
        if (!*(_BYTE *)(v24 + v28))
          goto LABEL_16;
        v30 = v24 + v25;
        v31 = 1;
        while (1)
        {
          v32 = *(_QWORD *)(v30 + 8 * (v29 - 1));
          if (v13 == (v32 & 0xFFFFFFFFFFFFLL))
            break;
          v28 = ((_DWORD)v28 + v31) & v27;
          v29 = *(unsigned __int8 *)(v24 + v28);
          ++v31;
          if (!*(_BYTE *)(v24 + v28))
            goto LABEL_16;
        }
        a6 = (v32 >> 16) & 0xFF00000000 | HIBYTE(v32);
      }
      else
      {
        if ((v26 & 0x20) != 0)
          v26 = *(_DWORD *)(v13 + 32);
        v34 = *(_DWORD *)(v22 + 12);
        v35 = v34 & (v26 >> 8);
        v36 = *(_DWORD *)(v24 + 4 * v35);
        if (!v36)
          goto LABEL_16;
        v37 = v24 + 4 * v25;
        v38 = 1;
        while (1)
        {
          v39 = (v36 - 1);
          if (v13 == *(_QWORD *)(v37 + 16 * v39))
            break;
          v35 = (v35 + v38) & v34;
          v36 = *(_DWORD *)(v24 + 4 * v35);
          ++v38;
          if (!v36)
            goto LABEL_16;
        }
        a6 = *(unsigned int *)(v37 + 16 * v39 + 8) | ((unint64_t)*(unsigned __int8 *)(v37 + 16 * v39 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v45 = v19 + 16;
          v46 = a6 << 32;
        }
        else
        {
          v45 = *(_QWORD *)(v19 + 8) - 8;
          v46 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v45 + (v46 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v47 = *(unsigned __int8 *)(a4 + 5);
          if (v47 != 5)
          {
            if (v47 != 6)
              goto LABEL_49;
            v74 = *(_DWORD *)(v21 + 16) & 3;
            v75 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v77 = *(_QWORD *)(a4 + 24);
              v76 = *(_QWORD *)(a4 + 32);
              v145 = *(_QWORD *)(a4 + 8);
              v146 = v75;
              LODWORD(v147) = HIDWORD(a6);
              v149 = v19;
              goto LABEL_95;
            }
            v145 = *(_QWORD *)(a4 + 8);
            v146 = v75;
            LODWORD(v147) = HIDWORD(a6);
            v149 = v19;
LABEL_140:
            BYTE1(v150[1]) = 3;
            if (v74 != 2)
              LOBYTE(v150[1]) = 1;
            goto LABEL_51;
          }
          v72 = (unsigned int *)v19;
          v73 = (uint64_t)v10;
LABEL_89:
          JSC::JSObject::fillGetterPropertySlot(v72, v73, (uint64_t)&v145, a4, a5, a6);
          goto LABEL_51;
        }
LABEL_49:
        v145 = a4;
        v149 = v19;
LABEL_50:
        v147 = __PAIR64__(a6, a5);
        LOWORD(v150[1]) = 257;
        goto LABEL_51;
      }
LABEL_16:
      if ((*v16 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v19, v10, v13, (uint64_t)&v145) & 1) != 0)
      {
        goto LABEL_51;
      }
      v18 = *(_QWORD *)(v21 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v19 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!v13)
          goto LABEL_43;
        v40 = *(_DWORD *)(v13 + 16);
        if ((v40 & 0x20) != 0)
          goto LABEL_43;
        v41 = *(_WORD **)(v13 + 8);
        v42 = *(unsigned int *)(v13 + 4);
        if ((v40 & 4) == 0)
        {
          if ((_DWORD)v42)
          {
            v43 = (unsigned __int16)*v41 - 48;
            if (v43 <= 9 && (*v41 != 48 || v42 <= 1))
            {
              v66 = v41 + 1;
              v67 = v42 - 1;
              v44 = 10;
              while (v67)
              {
                if (v43 <= 0x19999999)
                {
                  v68 = *v66 - 48;
                  if (v68 <= 9)
                  {
                    v69 = __CFADD__(v68, 10 * v43);
                    v43 = v68 + 10 * (_DWORD)v43;
                    ++v66;
                    --v67;
                    if (!v69)
                      continue;
                  }
                }
                goto LABEL_53;
              }
              goto LABEL_199;
            }
          }
          goto LABEL_43;
        }
        if (!(_DWORD)v42)
          goto LABEL_43;
        v43 = *(unsigned __int8 *)v41 - 48;
        if (v43 > 9 || v42 >= 2 && *(_BYTE *)v41 == 48)
          goto LABEL_43;
        v104 = (unsigned __int8 *)v41 + 1;
        v105 = v42 - 1;
        v44 = 10;
        while (v105)
        {
          if (v43 <= 0x19999999)
          {
            v106 = *v104 - 48;
            if (v106 <= 9)
            {
              v69 = __CFADD__(v106, 10 * v43);
              v43 = v106 + 10 * (_DWORD)v43;
              ++v104;
              --v105;
              if (!v69)
                continue;
            }
          }
          goto LABEL_53;
        }
LABEL_199:
        if ((_DWORD)v43 == -1)
        {
LABEL_43:
          v44 = 10;
          goto LABEL_53;
        }
        v107 = a1[7];
        v44 = 10;
        while (2)
        {
          v108 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
          v109 = (*(uint64_t (**)(uint64_t, JSC::VM **, uint64_t, uint64_t *))(16
                                                                                    * *(unsigned int *)(v108 + 0x4C)
                                                                                    + 0x70))(v14, a1, v43, &v145);
          if (*((_DWORD *)v107 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v107, a2, a3, a4, a5, a6, a7, a8))
            goto LABEL_43;
          if ((v109 & 1) != 0)
            goto LABEL_51;
          if (BYTE2(v150[1]) == 3)
          {
            if (BYTE4(v150[1]))
              goto LABEL_43;
            v110 = *(unsigned __int8 *)(v14 + 5);
            if (v110 != 61)
              goto LABEL_205;
          }
          else
          {
            v110 = *(unsigned __int8 *)(v14 + 5);
            if (v110 == 61)
            {
              if (BYTE2(v150[1]) == 1)
                goto LABEL_43;
            }
            else
            {
LABEL_205:
              if ((v110 - 39) <= 0xA
                && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v14, a2, a3, a4, a5, a6, a7, a8) <= v43)
              {
                goto LABEL_43;
              }
            }
          }
          if ((*(_WORD *)(v108 + 12) & 0x800) == 0 || BYTE2(v150[1]) == 3)
          {
            v111 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
            if (!v111)
              v111 = *(_QWORD *)(v14 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v111 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0xB0))(v14, a1);
            }
            else
            {
              v111 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
              if (!v111)
                v111 = *(_QWORD *)(v14 + 16);
            }
            if (*((_DWORD *)v107 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v107, a2, a3, a4, a5, a6, a7, a8))
              goto LABEL_43;
          }
          if ((v111 & 0xFFFE000000000002) != 0)
            goto LABEL_53;
          v14 = v111;
          if (*(unsigned __int8 *)(v111 + 5) <= 0x16u)
            goto LABEL_53;
          continue;
        }
      }
      v16 = (_BYTE *)(v18 + 6);
      v19 = v18;
    }
    while ((*(_BYTE *)(v18 + 6) & 8) == 0);
  }
  if (v13)
  {
    v78 = *(_DWORD *)(v13 + 16);
    if ((v78 & 0x20) == 0)
    {
      v79 = *(_BYTE **)(v13 + 8);
      v80 = *(unsigned int *)(v13 + 4);
      if ((v78 & 4) != 0)
      {
        if ((_DWORD)v80)
        {
          v81 = *v79 - 48;
          if (v81 <= 9 && (v80 < 2 || *v79 != 48))
          {
            v126 = v79 + 1;
            v127 = v80 - 1;
            while (v127)
            {
              if (v81 <= 0x19999999)
              {
                v128 = *v126 - 48;
                if (v128 <= 9)
                {
                  v69 = __CFADD__(v128, 10 * v81);
                  v81 = v128 + 10 * (_DWORD)v81;
                  ++v126;
                  --v127;
                  if (!v69)
                    continue;
                }
              }
              goto LABEL_105;
            }
LABEL_274:
            if ((_DWORD)v81 != -1)
            {
              v129 = a1[7];
              v44 = 10;
              while (1)
              {
                v130 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
                v131 = (*(uint64_t (**)(uint64_t, JSC::VM **, uint64_t, uint64_t *))(16
                                                                                          * *(unsigned int *)(v130 + 0x4C)
                                                                                          + 0x70))(v14, a1, v81, &v145);
                v132 = v131;
                if (*((_DWORD *)v129 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v129, a2, a3, a4, a5, a6, a7, a8);
                  if (((hasExceptionsAfterHandlingTraps | v132) & 1) != 0)
                  {
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_51;
                    goto LABEL_43;
                  }
                }
                else if ((v131 & 1) != 0)
                {
                  goto LABEL_51;
                }
                if (BYTE2(v150[1]) == 3)
                {
                  if (BYTE4(v150[1]))
                    goto LABEL_43;
                  v133 = *(unsigned __int8 *)(v14 + 5);
                  if (v133 == 61)
                    goto LABEL_281;
                }
                else
                {
                  v133 = *(unsigned __int8 *)(v14 + 5);
                  if (v133 == 61)
                  {
                    if (BYTE2(v150[1]) == 1)
                      goto LABEL_43;
                    goto LABEL_281;
                  }
                }
                if ((v133 - 39) <= 0xA
                  && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v14, a2, a3, a4, a5, a6, a7, a8) <= v81)
                {
                  goto LABEL_43;
                }
LABEL_281:
                if ((*(_WORD *)(v130 + 12) & 0x800) == 0 || BYTE2(v150[1]) == 3)
                {
                  v134 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
                  if (!v134)
                    v134 = *(_QWORD *)(v14 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v134 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v14, a1);
                  }
                  else
                  {
                    v134 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
                    if (!v134)
                      v134 = *(_QWORD *)(v14 + 16);
                  }
                  if (*((_DWORD *)v129 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v129, a2, a3, a4, a5, a6, a7, a8))
                  {
                    goto LABEL_43;
                  }
                }
                if ((v134 & 0xFFFE000000000002) == 0)
                {
                  v14 = v134;
                  if (*(unsigned __int8 *)(v134 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_53;
              }
            }
          }
        }
      }
      else if ((_DWORD)v80)
      {
        v81 = *(unsigned __int16 *)v79 - 48;
        if (v81 <= 9 && (*(_WORD *)v79 != 48 || v80 <= 1))
        {
          v91 = (unsigned __int16 *)(v79 + 2);
          v92 = v80 - 1;
          while (v92)
          {
            if (v81 <= 0x19999999)
            {
              v93 = *v91 - 48;
              if (v93 <= 9)
              {
                v69 = __CFADD__(v93, 10 * v81);
                v81 = v93 + 10 * (_DWORD)v81;
                ++v91;
                --v92;
                if (!v69)
                  continue;
              }
            }
            goto LABEL_105;
          }
          goto LABEL_274;
        }
      }
    }
  }
LABEL_105:
  v82 = a1[7];
  v44 = 10;
  while (1)
  {
    v83 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v18 + 6) & 8) == 0)
      break;
    v96 = (*(uint64_t (**)(uint64_t, JSC::VM **, unint64_t, uint64_t *))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0x68))(v18, a1, v13, &v145);
    if (*((_DWORD *)v82 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v82, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_43;
    if ((v96 & 1) != 0)
      goto LABEL_51;
    if (BYTE2(v150[1]) == 3)
    {
      if (BYTE4(v150[1]))
        goto LABEL_43;
      v97 = *(unsigned __int8 *)(v18 + 5);
      if (v97 != 61)
      {
LABEL_160:
        if (!v13)
          goto LABEL_112;
        if ((v97 - 50) < 0xFFFFFFF5)
          goto LABEL_112;
        v98 = *(_DWORD *)(v13 + 16);
        if ((v98 & 0x20) != 0)
          goto LABEL_112;
        v99 = *(unsigned int *)(v13 + 4);
        if (!(_DWORD)v99)
          goto LABEL_112;
        v100 = *(unsigned __int8 **)(v13 + 8);
        if ((v98 & 4) == 0)
        {
          v101 = *(unsigned __int16 *)v100;
          if ((_DWORD)v99 == 1)
            goto LABEL_166;
          if (v101 == 45)
          {
            v101 = *((unsigned __int16 *)v100 + 1);
            goto LABEL_171;
          }
          if ((v101 - 48) >= 0xA && ((_DWORD)v99 != 8 || v101 != 73))
          {
LABEL_184:
            if ((_DWORD)v99 != 3 || v101 != 78)
              goto LABEL_112;
          }
LABEL_177:
          v142 = v142 & 0xFFFFFF0000000000 | v99 | ((unint64_t)((v98 >> 2) & 1) << 32);
          JSC::jsToNumber(v100, v142);
          WTF::numberToString(&v155, v102);
          if (WTF::equal(v13, (unint64_t)&v155, v103))
            goto LABEL_43;
          goto LABEL_112;
        }
        v101 = *v100;
        if ((_DWORD)v99 == 1)
        {
LABEL_166:
          if ((v101 - 48) < 0xA)
            goto LABEL_43;
          goto LABEL_112;
        }
        if (v101 == 45)
        {
          v101 = v100[1];
LABEL_171:
          if ((v101 - 48) < 0xA)
          {
            if ((_DWORD)v99 == 2)
              goto LABEL_43;
            goto LABEL_177;
          }
          if ((_DWORD)v99 != 9)
            goto LABEL_112;
        }
        else
        {
          if ((v101 - 48) < 0xA)
            goto LABEL_177;
          if ((_DWORD)v99 != 8)
            goto LABEL_184;
        }
        if (v101 != 73)
          goto LABEL_112;
        goto LABEL_177;
      }
    }
    else
    {
      v97 = *(unsigned __int8 *)(v18 + 5);
      if (v97 != 61)
        goto LABEL_160;
      if (BYTE2(v150[1]) == 1)
        goto LABEL_43;
    }
LABEL_112:
    if ((*(_WORD *)(v83 + 12) & 0x800) == 0)
    {
      v86 = *(_DWORD *)v18;
LABEL_114:
      v87 = *(_QWORD *)(16 * (v86 & 0xFFFFFFFE) + 0x30);
      if (!v87)
        v87 = *(_QWORD *)(v18 + 16);
      goto LABEL_116;
    }
    v86 = *(_DWORD *)v18;
    if (BYTE2(v150[1]) == 3)
      goto LABEL_114;
    v95 = 16 * (v86 & 0xFFFFFFFE);
    if ((*(_WORD *)(v95 + 12) & 0x800) != 0)
    {
      v87 = (*(uint64_t (**)(uint64_t, JSC::VM **))(16 * *(unsigned int *)(v95 + 76) + 0xB0))(v18, a1);
    }
    else
    {
      v87 = *(_QWORD *)(v95 + 48);
      if (!v87)
        v87 = *(_QWORD *)(v18 + 16);
    }
    if (*((_DWORD *)v82 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v82, a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_43;
LABEL_116:
    if ((v87 & 0xFFFE000000000002) == 0)
    {
      v18 = v87;
      if (*(unsigned __int8 *)(v87 + 5) > 0x16u)
        continue;
    }
    goto LABEL_53;
  }
  if (!(_DWORD)v17
    || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) != 0
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)), v82, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v84)|| (v155 = v13, v85 = JSC::PropertyTable::get(v84, (uint64_t *)&v155), a6 = v85, (_DWORD)v85 == -1))
  {
    if ((*(_BYTE *)(v18 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, v82, v13, (uint64_t)&v145) & 1) != 0)
    {
      goto LABEL_51;
    }
    goto LABEL_112;
  }
  a5 = HIDWORD(v85);
  if ((int)v85 <= 63)
  {
    v88 = v18 + 16;
    v89 = v85 << 32;
  }
  else
  {
    v88 = *(_QWORD *)(v18 + 8) - 8;
    v89 = 0x3F00000000 - (v85 << 32);
  }
  a4 = *(_QWORD *)(v88 + (v89 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_124:
    v145 = a4;
    v149 = v18;
    goto LABEL_50;
  }
  v90 = *(unsigned __int8 *)(a4 + 5);
  if (v90 == 5)
  {
    v72 = (unsigned int *)v18;
    v73 = (uint64_t)v82;
    goto LABEL_89;
  }
  if (v90 != 6)
    goto LABEL_124;
  v74 = *(_DWORD *)(v83 + 16) & 3;
  v94 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v145 = *(_QWORD *)(a4 + 8);
    v146 = v94;
    LODWORD(v147) = HIDWORD(v85);
    v149 = v18;
    goto LABEL_140;
  }
  v77 = *(_QWORD *)(a4 + 24);
  v76 = *(_QWORD *)(a4 + 32);
  v145 = *(_QWORD *)(a4 + 8);
  v146 = v94;
  LODWORD(v147) = HIDWORD(v85);
  v149 = v18;
LABEL_95:
  BYTE1(v150[1]) = 3;
  if (v74 != 2)
    LOBYTE(v150[1]) = 1;
  BYTE3(v150[1]) = 1;
  v153 = v77;
  v154 = v76;
LABEL_51:
  if (BYTE1(v150[1]) == 1)
  {
    v44 = v145;
  }
  else
  {
    if (BYTE1(v150[1]) == 2)
      v71 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v145, (JSC::JSGlobalObject *)a1, a3, a4, a5, a6, a7, a8);
    else
      v71 = JSC::PropertySlot::customGetter((uint64_t)&v145, a1[7], (WTF::StringImpl *)v13);
    v44 = v71;
  }
LABEL_53:
  if (v152)
  {
    v48 = *(_DWORD *)(v151 + 4);
    if (!v48)
    {
      __break(0xC471u);
      JUMPOUT(0x19897C77CLL);
    }
    *(_DWORD *)(v151 + 4) = v48 - 1;
  }
  if (*((_DWORD *)v143 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v143, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if ((v44 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v155) = 0;
    goto LABEL_80;
  }
  if (*(_BYTE *)(v44 + 5) != 26)
  {
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v44 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(&v155, v44);
    if ((_BYTE)v155)
      goto LABEL_63;
    goto LABEL_80;
  }
  v49 = *(_QWORD *)(v44 + 24);
  if ((v49 & 1) != 0)
    v49 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v49 + 5) == 8)
  {
    LOBYTE(v155) = 1;
    v156 = *(_QWORD *)(v49 + 40);
    LOBYTE(v157) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE)
                                                                              + 0x4C));
  }
  else
  {
    LOBYTE(v155) = 2;
    v50 = *(_QWORD *)(v44 + 16);
    v156 = v49;
    v157 = v50;
  }
LABEL_63:
  v145 = 0;
  LODWORD(v146) = 0;
  v58 = JSC::call((uint64_t *)a1, v44, (unsigned __int8 *)&v155, v144, (uint64_t)&v145, a6, a7, a8);
  if (*((_DWORD *)v143 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v143, v51, v52, v53, v54, v55, v56, v57))
    return 0;
  if ((v58 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v58 + 5) <= 0x16u)
  {
LABEL_80:
    JSC::throwTypeError((JSC::JSGlobalObject *)a1, &v143);
    return 0;
  }
  JSC::JSObject::get((unsigned int *)v58, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)v11 + 2000), v53, v54, v55, v56, v57);
  if (*((_DWORD *)v143 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v143, v59, v60, v61, v62, v63, v64, v65))
    return 0;
  return v58;
}

uint64_t JSC::getIterationMode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  unsigned __int8 v7;
  uint64_t v8;

  if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 36)
    return 1;
  v4 = *(_QWORD *)(a2 + 2216);
  v5 = (v4 & 1) != 0 ? (v4 >> 1) & 3 : *(unsigned __int8 *)(v4 + 4);
  if (v5 == 2 || (a4 & 0xFFFE000000000002) != 0)
    return 1;
  v7 = 1;
  if (*(_BYTE *)(a4 + 5) == 26)
  {
    v8 = *(_QWORD *)(a2 + 528);
    if ((v8 & 1) != 0)
      v8 = 0;
    if (v8 == a4)
      return 2;
    else
      return 1;
  }
  return v7;
}

uint64_t JSC::getIterationMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  if ((a3 & 0xFFFE000000000002) == 0
    && *(_BYTE *)(a3 + 5) == 36
    && ((v3 = *(unsigned __int8 *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 8), (v3 & 0x10) != 0)
      ? (v4 = ((v3 & 0xE) + 10) >> 1)
      : (v4 = (v3 >> 1) & 7),
        (v5 = *(_DWORD *)(a2 + 4 * v4 + 852)) != 0 ? (v6 = 16 * (v5 & 0xFFFFFFFE)) : (v6 = 0),
        v6 == 16 * (*(_DWORD *)a3 & 0xFFFFFFFE)))
  {
    v7 = *(_QWORD *)(a2 + 2216);
    if ((v7 & 1) != 0)
      v8 = (v7 >> 1) & 3;
    else
      v8 = *(unsigned __int8 *)(v7 + 4);
    if (v8 == 2)
      return 1;
    else
      return 2;
  }
  else
  {
    return 1;
  }
}

void JSC::IteratorPrototype::finishCreation(JSC::IteratorPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  double v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  _DWORD *v55;
  __int128 v56;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v11 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 2712);
  if (v11)
  {
    *(_DWORD *)v11 += 2;
    v12 = JSC::BuiltinExecutables::iteratorPrototypeSymbolIteratorGetterCodeExecutable(*((JSC::BuiltinExecutables **)a2 + 11644), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v13 = *(_DWORD **)(*((_QWORD *)a2 + 11644) + 8);
    ++v13[2];
    v55 = v13;
    v56 = xmmword_1991259E0;
    v22 = JSC::UnlinkedFunctionExecutable::link(v12, (uint64_t)a2, 0, (uint64_t)&v55, 0, 0, 0, v14, COERCE_DOUBLE(0x26F8A00026F5DLL), v15, v16);
    v23 = v55;
    v55 = 0;
    if (v23)
    {
      if (v23[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
      else
        --v23[2];
    }
    v24 = JSC::JSFunction::create((uint64_t)a2, v22, a3, v17, v18, v19, v20, v21);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v11, v24, 4, v25, v26, v27, v28);
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  else
  {
    v44 = JSC::iteratorPrototypeSymbolIteratorGetterCodeGenerator((JSC::BuiltinExecutables **)a2, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v50 = JSC::JSFunction::create((uint64_t)a2, v44, a3, v45, v46, v47, v48, v49);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v50, 4, v51, v52, v53, v54);
  }
}

uint64_t JSC::JSArray::put(JSC::JSObject *this, WTF::StringImpl **a2, unint64_t a3, JSC::JSObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v10;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  JSC::JSObject *v22;
  JSC::JSObject *v23;
  char v25;
  WTF::StringImpl *v26;
  JSC::Butterfly *v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL8 v31;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  int v40;
  JSC::JSObject *v41;
  JSC::JSGlobalObject *v42;
  unsigned int v43;
  JSC::Butterfly *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  const WTF::String *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  JSC::VM *v86;
  JSC::JSObject *v87;
  WTF::StringImpl *v88;

  v10 = (unint64_t)a4;
  v14 = a2[7];
  v86 = v14;
  v87 = a4;
  if ((*((_BYTE *)this + 4) & 0x10) != 0)
    JSC::JSObject::convertFromCopyOnWrite(this, v14, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  if (*(_QWORD *)(*((_QWORD *)v14 + 5244) + 1768) == a3)
  {
    if ((*((_BYTE *)this + 4) & 0xEu) - 10 <= 3)
    {
      v52 = (uint64_t *)*((_QWORD *)this + 1);
      if (v52)
      {
        v53 = *v52;
        if (v53)
        {
          if ((*(_BYTE *)(v53 + 16) & 2) != 0)
          {
            if ((*(_BYTE *)(a5 + 20) & 1) != 0)
              JSC::throwTypeError((unint64_t)a2, &v86, (uint64_t)"Array length is not writable", 29);
            return 0;
          }
        }
      }
    }
    if (*(JSC::JSObject **)(a5 + 8) != this)
      return JSC::JSObject::definePropertyOnReceiver((unint64_t)a2, a3, v10, a5, a5, a6, a7, a8, a9);
    if (v10 < 0xFFFE000000000000)
    {
      v45 = v10 - 0x2000000000000;
      if (v10 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase(&v87, (JSC::JSGlobalObject *)a2, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
        v45 = a9.n128_u64[0];
      }
      v46 = (v45 >> 52) & 0x7FF;
      v47 = v46 - 1023;
      v48 = v45 >> (51 - (v45 >> 52));
      if (v46 > 0x433)
        LODWORD(v48) = v45 << ((v45 >> 52) - 51);
      if (v46 >= 0x41F)
        v49 = v48;
      else
        v49 = (((1 << ((v45 >> 52) + 1)) - 1) & v48) + (1 << ((v45 >> 52) + 1));
      if ((v45 & 0x8000000000000000) == 0)
        v50 = v49;
      else
        v50 = -v49;
      if (v47 <= 0x53)
        v10 = v50;
      else
        v10 = 0;
    }
    if (*((_DWORD *)v14 + 20))
    {
      v54 = *((_DWORD *)v14 + 20);
      if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
        JSC::VMTraps::handleTraps((WTF::StringImpl *)((char *)v14 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v14 + 2))
        return 0;
    }
    if ((unint64_t)v87 >= 0xFFFE000000000000)
    {
      a9.n128_f64[0] = (double)(int)v87;
    }
    else if ((unint64_t)v87 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase(&v87, (JSC::JSGlobalObject *)a2, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    }
    else
    {
      a9.n128_u64[0] = (unint64_t)v87 - 0x2000000000000;
    }
    if (*((_DWORD *)v14 + 20))
    {
      v55 = *((_DWORD *)v14 + 20);
      if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      {
        v85 = a9.n128_u64[0];
        JSC::VMTraps::handleTraps((WTF::StringImpl *)((char *)v14 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
        a9.n128_u64[0] = v85;
      }
      if (*((_QWORD *)v14 + 2))
        return 0;
    }
    if (a9.n128_f64[0] != (double)v10)
    {
      v57 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v57 = 0x1400000002;
      *(_QWORD *)(v57 + 8) = "Invalid array length";
      *(_DWORD *)(v57 + 16) = 4;
      v88 = (WTF::StringImpl *)v57;
      v59 = JSC::createRangeError((unint64_t)a2, &v88, v58);
      JSC::VM::throwException(v14, (JSC::JSGlobalObject *)a2, v59, v60, v61, v62, v63, v64);
      v72 = v88;
      v88 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, v65, v66, v67, v68, v69, v70, v71);
          WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
      return 0;
    }
    v25 = *(_BYTE *)(a5 + 20);
    v26 = a2[7];
    v88 = v26;
    v27 = (JSC::Butterfly *)*((_QWORD *)this + 1);
    v28 = *((_BYTE *)this + 4);
    v29 = v28 & 0x1F;
    if (v29 == 9)
      goto LABEL_30;
    if (v29 <= 0x19)
    {
      if (((1 << v29) & 0xA8) != 0)
      {
LABEL_30:
        v30 = *((_DWORD *)v27 - 2);
        if (v30 == (_DWORD)v10)
          return 1;
        if (v10 <= 0x10000000)
        {
          if (v10 >> 5 < 0xC35)
            goto LABEL_71;
          if (JSC::JSObject::countElements(this) >= v10 >> 3)
          {
            v30 = *((_DWORD *)v27 - 2);
LABEL_71:
            v51 = v30 - v10;
            if (v30 < v10)
            {
              v56 = *((_QWORD *)this + 1);
              if (*(_DWORD *)(v56 - 4) < v10 || (*((_BYTE *)this + 4) & 0x10) != 0)
              {
                if (!JSC::JSObject::ensureLengthSlow(this, v26, v10, (uint64_t)a4, a5, a6, a7, a8, a9))
                {
                  JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a2, (JSC::JSGlobalObject *)&v88);
                  return 0;
                }
                v56 = *((_QWORD *)this + 1);
              }
              if (*(_DWORD *)(v56 - 8) < v10)
                *(_DWORD *)(v56 - 8) = v10;
            }
            else if (v51 > v10 && v51 >= 0x41)
            {
              JSC::JSObject::reallocateAndShrinkButterfly(this, v26, v10);
            }
            else
            {
              if ((*((_BYTE *)this + 4) & 0xF) == 7)
              {
                if (v30 > v10)
                  memset_pattern16((char *)v27 + 8 * (v30 - 1 - (unint64_t)(v30 - 1 - v10)), &memset_pattern_4, 8 * (v30 - 1 - v10) + 8);
              }
              else if (v30 > v10)
              {
                bzero((char *)v27 + 8 * (v30 - 1 - (unint64_t)(v30 - 1 - v10)), 8 * (v30 - 1 - v10) + 8);
              }
              *((_DWORD *)v27 - 2) = v10;
            }
            return 1;
          }
        }
        if ((*((_BYTE *)this + 4) & 0xEu) < 0xA)
          v44 = JSC::JSObject::ensureArrayStorageSlow(this, v26, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
        else
          v44 = (JSC::Butterfly *)*((_QWORD *)this + 1);
        v40 = v25 & 1;
        v41 = this;
        v42 = (JSC::JSGlobalObject *)a2;
        v43 = v10;
        return JSC::JSArray::setLengthWithArrayStorage((uint64_t)v41, v42, v43, v40, v44);
      }
      if (((1 << v29) & 0x2800) != 0)
      {
LABEL_53:
        v40 = v25 & 1;
        v41 = this;
        v42 = (JSC::JSGlobalObject *)a2;
        v43 = v10;
        v44 = v27;
        return JSC::JSArray::setLengthWithArrayStorage((uint64_t)v41, v42, v43, v40, v44);
      }
      if (((1 << v29) & 0x2A00000) != 0)
      {
        if (*((_DWORD *)v27 - 2) == (_DWORD)v10)
          return 1;
        JSC::JSObject::convertFromCopyOnWrite(this, v26, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
        v27 = (JSC::Butterfly *)*((_QWORD *)this + 1);
        goto LABEL_30;
      }
    }
    if (v29 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19897D9F4);
    }
    if (!(_DWORD)v10)
      return 1;
    if (v10 >> 5 < 0xC35)
    {
      JSC::JSObject::createInitialUndecided(this, v26, v10, a9);
      return 1;
    }
    if ((v28 & 0xEu) <= 9)
      v27 = JSC::JSObject::ensureArrayStorageSlow(this, v26, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_53;
  }
  v15 = (uint64_t)a2[7];
  if (!a3)
    goto LABEL_9;
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    goto LABEL_9;
  v17 = *(_BYTE **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) != 0)
  {
    if (!(_DWORD)v18)
      goto LABEL_9;
    v19 = *v17 - 48;
    if (v19 > 9 || v18 >= 2 && *v17 == 48)
      goto LABEL_9;
    v81 = v17 + 1;
    v82 = v18 - 1;
    while (v82)
    {
      if (v19 <= 0x19999999)
      {
        v83 = *v81 - 48;
        if (v83 <= 9)
        {
          v36 = __CFADD__(v83, 10 * v19);
          v19 = v83 + 10 * v19;
          ++v81;
          --v82;
          if (!v36)
            continue;
        }
      }
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)v18)
      goto LABEL_9;
    v19 = *(unsigned __int16 *)v17 - 48;
    if (v19 > 9)
      goto LABEL_9;
    if (*(_WORD *)v17 == 48 && v18 > 1)
      goto LABEL_9;
    v33 = (unsigned __int16 *)(v17 + 2);
    v34 = v18 - 1;
    while (v34)
    {
      if (v19 <= 0x19999999)
      {
        v35 = *v33 - 48;
        if (v35 <= 9)
        {
          v36 = __CFADD__(v35, 10 * v19);
          v19 = v35 + 10 * v19;
          ++v33;
          --v34;
          if (!v36)
            continue;
        }
      }
      goto LABEL_9;
    }
  }
  if (v19 != -1)
  {
    v84 = *(_QWORD *)(a5 + 8);
    if ((JSC::JSObject *)v84 == this
      || (v84 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v84 + 5) == 32 && *(JSC::JSObject **)(v84 + 16) == this)
    {
      return (*(uint64_t (**)(JSC::JSObject *, WTF::StringImpl **))(16
                                                                            * *(unsigned int *)(16
                                                                                              * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                              + 0x4C)
                                                                            + 0x50))(this, a2);
    }
    else
    {
      return JSC::ordinarySetSlow((unint64_t)a2, (uint64_t)this, (WTF::StringImpl *)a3, v10, v84, *(_BYTE *)(a5 + 20) & 1, a7, a8);
    }
  }
LABEL_9:
  if (*(_QWORD *)(*(_QWORD *)(v15 + 41952) + 16) != a3)
  {
    v20 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    v21 = *(_DWORD *)(v20 + 0x10);
    if ((v21 & 0x10) == 0)
    {
      v22 = this;
      while ((*(_WORD *)(v20 + 12) & 0x800) == 0 && (v22 == this || (*(_WORD *)(v20 + 12) & 0x400) == 0))
      {
        v23 = *(JSC::JSObject **)(v20 + 48);
        if (!v23)
          v23 = (JSC::JSObject *)*((_QWORD *)v22 + 2);
        if (v23 == (JSC::JSObject *)2)
        {
          v37 = *(_QWORD *)(a5 + 8);
          if ((JSC::JSObject *)v37 != this
            && ((v37 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v37 + 5) != 32 || *(JSC::JSObject **)(v37 + 16) != this))
          {
            return JSC::JSObject::definePropertyOnReceiver((unint64_t)a2, a3, v10, a5, a5, a6, a7, a8, a9);
          }
          if ((*((_BYTE *)this + 6) & 0x20) != 0 && (v21 & 0x400000) == 0)
            return JSC::JSObject::putInlineFastReplacingStaticPropertyIfNeeded((unsigned __int8 *)this, (unint64_t)a2, a3, v10, a5, a9, a6, a7, a8);
          v88 = a2[7];
          v38 = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)0>((unsigned __int8 *)this, v15, a3, v10, 0, a5, a7, a8, a9);
          v31 = v39 == 0;
          if (v39)
          {
            if ((*(_BYTE *)(a5 + 20) & 1) != 0)
              JSC::throwTypeError((unint64_t)a2, &v88, (uint64_t)v38, v39);
          }
          return v31;
        }
        v20 = 16 * (*(_DWORD *)v23 & 0xFFFFFFFE);
        v22 = v23;
        if ((*(_BYTE *)(v20 + 0x10) & 0x10) != 0)
          return JSC::JSObject::putInlineSlow((unsigned __int8 *)this, (unint64_t)a2, a3, (const JSC::PropertyTable *)v10, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))a5, a6, a7, a8, a9);
      }
    }
  }
  return JSC::JSObject::putInlineSlow((unsigned __int8 *)this, (unint64_t)a2, a3, (const JSC::PropertyTable *)v10, (uint64_t (*)(_QWORD, unsigned __int8 *, const JSC::PropertyTable *, unint64_t))a5, a6, a7, a8, a9);
}

uint64_t JSC::JSArray::deleteProperty(unsigned int *a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41952) + 1768) == a3)
    return 0;
  else
    return JSC::JSObject::deleteProperty(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSArray::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t result;
  int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unsigned int v59;

  v10 = *(JSC::VM **)(a2 + 56);
  if (*(_QWORD *)(*((_QWORD *)v10 + 5244) + 1768) == a3)
  {
    if ((*(_BYTE *)(a1 + 4) & 0xEu) - 10 <= 3)
    {
      v37 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)v37)
      {
        v38 = *(_DWORD *)(*(_QWORD *)v37 + 16) & 2 | 0xC;
LABEL_38:
        v39 = *(_DWORD *)(v37 - 8);
        if ((v39 & 0x80000000) != 0)
        {
          v40 = COERCE__INT64((double)v39) + 0x2000000000000;
          goto LABEL_40;
        }
LABEL_39:
        v40 = v39 | 0xFFFE000000000000;
LABEL_40:
        *(_QWORD *)a4 = v40;
        *(_DWORD *)(a4 + 16) = v38;
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 1;
        return result;
      }
    }
    else
    {
      if ((*(_BYTE *)(a1 + 4) & 0xE) == 0)
      {
        v39 = 0;
        v38 = 12;
        goto LABEL_39;
      }
      v37 = *(_QWORD *)(a1 + 8);
    }
    v38 = 12;
    goto LABEL_38;
  }
  if (!(a3 >> 4))
    goto LABEL_44;
  v13 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v13 + 0x20)) != 0)
    goto LABEL_44;
  v14 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v14)
  {
    v25 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v25 || *(_BYTE *)(v25 + 5) != 1 && *(_DWORD *)(v25 + 80) < 2u)
      goto LABEL_44;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v14)
      goto LABEL_44;
  }
  if (!*(_DWORD *)(v14 + 24))
    goto LABEL_44;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  v17 = *(unsigned int *)(v14 + 8);
  v18 = *(_DWORD *)(a3 + 16);
  if ((v15 & 1) != 0)
  {
    if ((v18 & 0x20) != 0)
      v18 = *(_DWORD *)(a3 + 32);
    v19 = *(_DWORD *)(v14 + 12);
    v20 = (v18 >> 8) & *(_QWORD *)&v19;
    v21 = *(unsigned __int8 *)(v16 + v20);
    if (*(_BYTE *)(v16 + v20))
    {
      v22 = v16 + v17;
      v23 = 1;
      while (1)
      {
        v24 = *(_QWORD *)(v22 + 8 * (v21 - 1));
        if (a3 == (v24 & 0xFFFFFFFFFFFFLL))
          break;
        v20 = ((_DWORD)v20 + v23) & v19;
        v21 = *(unsigned __int8 *)(v16 + v20);
        ++v23;
        if (!*(_BYTE *)(v16 + v20))
          goto LABEL_44;
      }
      a6 = (v24 >> 16) & 0xFF00000000 | HIBYTE(v24);
      goto LABEL_19;
    }
LABEL_44:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v10, a3, a4) & 1) != 0)
    {
      return 1;
    }
    if (!a3)
      return 0;
    v41 = *(_DWORD *)(a3 + 16);
    if ((v41 & 0x20) != 0)
      return 0;
    v42 = *(_BYTE **)(a3 + 8);
    v43 = *(unsigned int *)(a3 + 4);
    if ((v41 & 4) != 0)
    {
      if ((_DWORD)v43)
      {
        v44 = *v42 - 48;
        if (v44 <= 9 && (v43 < 2 || *v42 != 48))
        {
          v57 = v42 + 1;
          v58 = v43 - 1;
          while (v58)
          {
            if (v44 > 0x19999999)
              goto LABEL_50;
            v59 = *v57 - 48;
            if (v59 > 9)
              goto LABEL_50;
            v45 = 0;
            v46 = 0;
            v47 = 0;
            v51 = __CFADD__(v59, 10 * v44);
            v44 = v59 + 10 * v44;
            ++v57;
            --v58;
            if (v51)
              goto LABEL_51;
          }
          goto LABEL_88;
        }
      }
    }
    else if ((_DWORD)v43)
    {
      v44 = *(unsigned __int16 *)v42 - 48;
      if (v44 <= 9 && (*(_WORD *)v42 != 48 || v43 <= 1))
      {
        v48 = (unsigned __int16 *)(v42 + 2);
        v49 = v43 - 1;
        while (v49)
        {
          if (v44 > 0x19999999)
            goto LABEL_50;
          v50 = *v48 - 48;
          if (v50 > 9)
            goto LABEL_50;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v51 = __CFADD__(v50, 10 * v44);
          v44 = v50 + 10 * v44;
          ++v48;
          --v49;
          if (v51)
            goto LABEL_51;
        }
LABEL_88:
        v45 = 0x100000000;
        if (v44 == -1)
        {
          v45 = 0;
          v46 = 0;
        }
        else
        {
          v46 = v44;
        }
        if (v44 == -1)
          v47 = 0;
        else
          v47 = v44 & 0xFFFFFF00;
LABEL_51:
        if ((v45 & 0x100000000) != 0)
          return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, (const WTF::StringImpl *)(v47 | v46), a4, a5, a6, a7, a8);
        return 0;
      }
    }
LABEL_50:
    v45 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_51;
  }
  if ((v18 & 0x20) != 0)
    v18 = *(_DWORD *)(a3 + 32);
  v31 = *(_DWORD *)(v14 + 12);
  v32 = v31 & (v18 >> 8);
  v33 = *(_DWORD *)(v16 + 4 * v32);
  if (!v33)
    goto LABEL_44;
  v34 = v16 + 4 * v17;
  v35 = 1;
  while (1)
  {
    v36 = (v33 - 1);
    if (*(_QWORD *)(v34 + 16 * v36) == a3)
      break;
    v32 = (v32 + v35) & v31;
    v33 = *(_DWORD *)(v16 + 4 * v32);
    ++v35;
    if (!v33)
      goto LABEL_44;
  }
  a6 = *(unsigned int *)(v34 + 16 * v36 + 8) | ((unint64_t)*(unsigned __int8 *)(v34 + 16 * v36 + 12) << 32);
LABEL_19:
  if ((_DWORD)a6 == -1)
    goto LABEL_44;
  if ((int)a6 <= 63)
  {
    v26 = a1 + 16;
    v27 = a6 << 32;
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 8) - 8;
    v27 = 0x3F00000000 - (a6 << 32);
  }
  v28 = *(_QWORD *)(v26 + (v27 >> 29));
  if ((v28 & 0xFFFE000000000002) != 0)
    goto LABEL_25;
  v29 = *(unsigned __int8 *)(v28 + 5);
  if (v29 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v10, a4, v28, SHIDWORD(a6), a6);
    return 1;
  }
  if (v29 != 6)
  {
LABEL_25:
    *(_QWORD *)a4 = v28;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v52 = *(_DWORD *)(v13 + 16) & 3;
  v54 = *(_QWORD *)(v28 + 8);
  v53 = *(_QWORD *)(v28 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x4C)))
  {
    v56 = *(_QWORD *)(v28 + 24);
    v55 = *(_QWORD *)(v28 + 32);
    *(_QWORD *)a4 = v54;
    *(_QWORD *)(a4 + 8) = v53;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v52 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v56;
    *(_QWORD *)(a4 + 80) = v55;
  }
  else
  {
    *(_QWORD *)a4 = v54;
    *(_QWORD *)(a4 + 8) = v53;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v52 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

void JSC::JSArray::getOwnSpecialPropertyNames(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::AtomStringImpl *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46[2];
  char v47;
  uint64_t v48;
  WTF::StringImpl *v49[7];

  if ((_DWORD)a4)
    return;
  v49[5] = v8;
  v49[6] = v9;
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41952) + 1768);
  v49[0] = v11;
  v12 = *((_DWORD *)v11 + 4);
  if ((v12 & 0x20) != 0)
  {
    if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v11 + 36) & 4) != 0)
      return;
  }
  else if ((a3[3] & 2) == 0)
  {
    return;
  }
  v13 = *a3;
  v14 = *(unsigned int *)(*a3 + 20);
  if (v14 <= 0x13)
  {
    if (!(_DWORD)v14)
    {
LABEL_9:
      if ((v12 & 0x20) != 0)
      {
        v16 = *(_DWORD *)v11 + 2;
      }
      else
      {
        if ((v12 & 0x10) != 0)
        {
          *(_DWORD *)v11 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a3[2] + 41912), (unint64_t)v11, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v46);
          v11 = v46[0];
        }
        v16 = *(_DWORD *)v11;
        *(_DWORD *)v11 += 2;
        if (!v16)
        {
          WTF::StringImpl::~StringImpl(v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
LABEL_14:
          v46[0] = v11;
          v17 = *(unsigned int *)(v13 + 20);
          if ((_DWORD)v17 == *(_DWORD *)(v13 + 16))
          {
            WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(v13 + 8, (unint64_t)v46);
            v37 = v46[0];
            v46[0] = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
              {
                WTF::StringImpl::~StringImpl(v37, v30, v31, v32, v33, v34, v35, v36);
                WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
              }
              else
              {
                *(_DWORD *)v37 -= 2;
              }
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v13 + 8) + 8 * v17) = v11;
            *(_DWORD *)(v13 + 20) = v17 + 1;
          }
          return;
        }
      }
      *(_DWORD *)v11 = v16;
      goto LABEL_14;
    }
    v21 = *(WTF::StringImpl ***)(v13 + 8);
    while (*v21 != v11)
    {
      ++v21;
      if (!--v14)
        goto LABEL_9;
    }
  }
  else
  {
    v15 = a3[1];
    if (!v15 || !*(_DWORD *)(v15 - 12))
    {
      v18 = *(uint64_t **)(v13 + 8);
      v19 = 8 * v14;
      do
      {
        v20 = *v18++;
        v48 = v20;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, &v48, a4, a5, a6, a7, a8, (uint64_t)v46);
        v19 -= 8;
      }
      while (v19);
    }
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(a3 + 1, (uint64_t *)v49, a4, a5, a6, a7, a8, (uint64_t)v46);
    if (v47)
    {
      v11 = v49[0];
      v13 = *a3;
      v12 = *((_DWORD *)v49[0] + 4);
      goto LABEL_9;
    }
  }
}

uint64_t JSC::JSArray::defineOwnProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, JSC::PropertyDescriptor *this, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  JSC::VM *v21;
  _QWORD *v22;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned __int16 *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  char v37;
  uint64_t v38;
  JSC::VM *v39;
  unsigned int v40;
  JSC::ArrayStorage *v41;
  const char *v42;
  unint64_t v43;
  uint64_t v44;
  JSC::Butterfly *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v54;
  const WTF::String *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::AtomStringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  WTF::StringImpl *v82;
  JSC::VM *v83;

  v9 = a5;
  v13 = *((_QWORD *)a2 + 7);
  v83 = (JSC::VM *)v13;
  if (*(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768) == a3)
  {
    if ((*(_BYTE *)(a1 + 4) & 0xE) != 0)
      v25 = *(unsigned int *)(*(_QWORD *)(a1 + 8) - 8);
    else
      v25 = 0;
    v26 = *(WTF::StringImpl **)this;
    if (*(_QWORD *)this)
    {
      v82 = *(WTF::StringImpl **)this;
      if ((unint64_t)v26 < 0xFFFE000000000000)
      {
        v46 = (unint64_t)v26 - 0x2000000000000;
        if (v46 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase(&v82, a2, a3, (uint64_t)this, a5, a6, a7, a8, a9);
          v46 = a9.i64[0];
        }
        v47 = (v46 >> 52) & 0x7FF;
        v48 = v47 - 1023;
        v49 = v46 >> (51 - (v46 >> 52));
        if (v47 > 0x433)
          LODWORD(v49) = v46 << ((v46 >> 52) - 51);
        if (v47 >= 0x41F)
          v50 = v49;
        else
          v50 = (((1 << ((v46 >> 52) + 1)) - 1) & v49) + (1 << ((v46 >> 52) + 1));
        if ((v46 & 0x8000000000000000) == 0)
          v51 = v50;
        else
          v51 = -v50;
        if (v48 <= 0x53)
          v25 = v51;
        else
          v25 = 0;
      }
      else
      {
        v25 = (uint64_t)v26;
      }
      if (*(_DWORD *)(v13 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, a3, (uint64_t)this, a5, a6, a7, a8))
      {
        return 0;
      }
      v27 = *(WTF::StringImpl **)this;
      v82 = v27;
      if ((unint64_t)v27 >= 0xFFFE000000000000)
      {
        *(double *)a9.i64 = (double)(int)v27;
      }
      else
      {
        v28 = (unint64_t)v27 - 0x2000000000000;
        if (v28 > 0xFFFBFFFFFFFFFFFFLL)
          JSC::JSValue::toNumberSlowCase(&v82, a2, a3, (uint64_t)this, a5, a6, a7, a8, a9);
        else
          a9.i64[0] = v28;
      }
      if (*(_DWORD *)(v13 + 80))
      {
        v81 = a9.i64[0];
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, a3, (uint64_t)this, a5, a6, a7, a8);
        a9.i64[0] = v81;
        if (hasExceptionsAfterHandlingTraps)
          return 0;
      }
      if (*(double *)a9.i64 != (double)v25)
      {
        v54 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v54 = 0x1400000002;
        *(_QWORD *)(v54 + 8) = "Invalid array length";
        *(_DWORD *)(v54 + 16) = 4;
        v82 = (WTF::StringImpl *)v54;
        v56 = JSC::createRangeError((unint64_t)a2, &v82, v55);
        JSC::VM::throwException((JSC::VM *)v13, a2, v56, v57, v58, v59, v60, v61);
        v69 = v82;
        v82 = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
          {
            WTF::StringImpl::~StringImpl(v69, v62, v63, v64, v65, v66, v67, v68);
            WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
          }
          else
          {
            *(_DWORD *)v69 -= 2;
          }
        }
        return 0;
      }
    }
    v29 = *((_DWORD *)this + 7);
    if ((v29 & 4) != 0 && (*((_BYTE *)this + 24) & 8) == 0)
    {
      if (!(_DWORD)v9)
        return v9;
      v42 = "Attempting to change configurable attribute of unconfigurable property.";
      v43 = (unint64_t)a2;
      v44 = 72;
      goto LABEL_63;
    }
    if ((v29 & 2) != 0 && JSC::PropertyDescriptor::enumerable(this))
    {
      if (!(_DWORD)v9)
        return v9;
      v42 = "Attempting to change enumerable attribute of unconfigurable property.";
      goto LABEL_62;
    }
    if (*(_OWORD *)((char *)this + 8) != 0)
    {
      if ((_DWORD)v9)
      {
        v42 = "Attempting to change access mechanism for an unconfigurable property.";
LABEL_62:
        v43 = (unint64_t)a2;
        v44 = 70;
LABEL_63:
        JSC::throwTypeError(v43, &v83, (uint64_t)v42, v44);
        return 0;
      }
      return v9;
    }
    v30 = *(_BYTE *)(a1 + 4) & 0xE;
    if ((v30 - 10) <= 3)
    {
      v31 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)v31 && (*(_BYTE *)(*(_QWORD *)v31 + 16) & 2) != 0)
      {
        if ((*((_BYTE *)this + 28) & 1) != 0 && (*((_BYTE *)this + 24) & 2) == 0)
        {
          if (!(_DWORD)v9)
            return v9;
          v42 = "Attempting to change writable attribute of unconfigurable property.";
          v43 = (unint64_t)a2;
          v44 = 68;
          goto LABEL_63;
        }
        if ((_DWORD)v25 != *(_DWORD *)(v31 - 8))
        {
          if (!(_DWORD)v9)
            return v9;
          v42 = "Attempting to change value of a readonly property.";
          v43 = (unint64_t)a2;
          v44 = 51;
          goto LABEL_63;
        }
      }
    }
    else
    {
      if ((*(_BYTE *)(a1 + 4) & 0xE) == 0)
      {
LABEL_35:
        if ((_DWORD)v25 == v30)
          v9 = 1;
        else
          v9 = JSC::JSArray::setLength((JSC::JSArray *)a1, (JSC::VM **)a2, v25, v9, a5, a6, a7, a8, (__n128)a9);
        if ((*((_BYTE *)this + 28) & 1) == 0)
          return v9;
        v37 = *(_BYTE *)(a1 + 4);
        if ((v37 & 0xEu) - 10 <= 3)
        {
          v38 = *(_QWORD *)(a1 + 8);
          if (v38)
          {
            v38 = *(_QWORD *)v38;
            if (v38)
              LODWORD(v38) = (*(unsigned __int8 *)(v38 + 16) >> 1) & 1;
          }
        }
        else
        {
          LOBYTE(v38) = 0;
        }
        if ((*((_DWORD *)this + 6) & 2) == 0 || (v38 & 1) != 0)
          return v9;
        v39 = (JSC::VM *)*((_QWORD *)a2 + 7);
        v40 = v37 & 0xF;
        if (v40 - 10 >= 4)
        {
          if (v40 > 9)
            goto LABEL_57;
          if (v40 == 2)
            goto LABEL_57;
          v45 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)a1, v39, a3, (uint64_t)this, a5, a6, a7, a8, (__n128)a9);
          if (!v45)
            goto LABEL_57;
          v41 = v45;
        }
        else
        {
          v41 = *(JSC::ArrayStorage **)(a1 + 8);
        }
        JSC::JSObject::enterDictionaryIndexingModeWhenArrayStorageAlreadyExists((JSC::JSObject *)a1, v39, v41, (uint64_t)this, a5, a6, a7, a8);
LABEL_57:
        *(_DWORD *)(**(_QWORD **)(a1 + 8) + 16) |= 2u;
        return v9;
      }
      v31 = *(_QWORD *)(a1 + 8);
    }
    v30 = *(_DWORD *)(v31 - 8);
    goto LABEL_35;
  }
  if (!a3)
    return JSC::JSObject::defineOwnNonIndexProperty((int *)a1, a2, (WTF::StringImpl *)a3, (uint64_t)this, a5);
  v14 = *(_DWORD *)(a3 + 16);
  if ((v14 & 0x20) != 0)
    return JSC::JSObject::defineOwnNonIndexProperty((int *)a1, a2, (WTF::StringImpl *)a3, (uint64_t)this, a5);
  v15 = *(_BYTE **)(a3 + 8);
  v16 = *(unsigned int *)(a3 + 4);
  if ((v14 & 4) != 0)
  {
    if ((_DWORD)v16)
    {
      v17 = *v15 - 48;
      if (v17 <= 9 && (v16 < 2 || *v15 != 48))
      {
        v78 = v15 + 1;
        v79 = v16 - 1;
        while (v79)
        {
          if (v17 > 0x19999999)
            goto LABEL_7;
          v80 = *v78 - 48;
          if (v80 > 9)
            goto LABEL_7;
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v36 = __CFADD__(v80, 10 * v17);
          v17 = v80 + 10 * v17;
          ++v78;
          --v79;
          if (v36)
            goto LABEL_8;
        }
        goto LABEL_125;
      }
    }
LABEL_7:
    v18 = 0;
    v19 = 0;
    v20 = 0;
    goto LABEL_8;
  }
  if (!(_DWORD)v16)
    goto LABEL_7;
  v17 = *(unsigned __int16 *)v15 - 48;
  if (v17 > 9)
    goto LABEL_7;
  if (*(_WORD *)v15 == 48 && v16 > 1)
    goto LABEL_7;
  v33 = (unsigned __int16 *)(v15 + 2);
  v34 = v16 - 1;
  while (v34)
  {
    if (v17 > 0x19999999)
      goto LABEL_7;
    v35 = *v33 - 48;
    if (v35 > 9)
      goto LABEL_7;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v36 = __CFADD__(v35, 10 * v17);
    v17 = v35 + 10 * v17;
    ++v33;
    --v34;
    if (v36)
      goto LABEL_8;
  }
LABEL_125:
  v18 = 0x100000000;
  if (v17 == -1)
  {
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v19 = v17;
  }
  if (v17 == -1)
    v20 = 0;
  else
    v20 = v17 & 0xFFFFFF00;
LABEL_8:
  v21 = (JSC::VM *)(v20 | v19);
  if ((v18 & 0x100000000) != 0)
  {
    if ((*(_BYTE *)(a1 + 4) & 0xE) == 0)
      return JSC::JSObject::defineOwnIndexedProperty((JSC::JSObject *)a1, a2, v21, this, a5, a6, a7, a8, (__n128)a9);
    v22 = *(_QWORD **)(a1 + 8);
    if (*((_DWORD *)v22 - 2) > v21 || (*(_BYTE *)(a1 + 4) & 0xEu) - 10 > 3)
      return JSC::JSObject::defineOwnIndexedProperty((JSC::JSObject *)a1, a2, v21, this, a5, a6, a7, a8, (__n128)a9);
    v52 = *v22;
    if (!v52 || (*(_BYTE *)(v52 + 16) & 2) == 0)
      return JSC::JSObject::defineOwnIndexedProperty((JSC::JSObject *)a1, a2, v21, this, a5, a6, a7, a8, (__n128)a9);
    if (!(_DWORD)a5)
      return v9;
    v42 = "Attempting to define numeric property on array with non-writable length property.";
    v43 = (unint64_t)a2;
    v44 = 82;
    goto LABEL_63;
  }
  return JSC::JSObject::defineOwnNonIndexProperty((int *)a1, a2, (WTF::StringImpl *)a3, (uint64_t)this, a5);
}

unint64_t JSC::JSArray::tryCreateUninitializedRestricted(uint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t result;
  unint64_t v23;
  unsigned int *v24;
  _DWORD *v25;
  void *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;

  if (a4 > 0x10000000)
    return 0;
  v8 = a4;
  v9 = a3;
  v11 = *a1;
  v12 = *(unsigned __int16 *)(a3 + 24);
  if (v12 == 65534
    || (v12 == 0xFFFF ? (v13 = *(_DWORD *)(*(_QWORD *)(a3 + 64) + 84)) : (v13 = *(unsigned __int16 *)(a3 + 24)),
        v13 < 64))
  {
    v14 = 0;
  }
  else if ((v13 - 63) >= 5)
  {
    v28 = (v13 - 64) | ((v13 - 64) >> 1) | (((v13 - 64) | ((v13 - 64) >> 1)) >> 2);
    v29 = v28 | (v28 >> 4) | ((v28 | (v28 >> 4)) >> 8);
    v14 = (v29 | HIWORD(v29)) + 1;
  }
  else
  {
    v14 = 4;
  }
  v15 = *(_BYTE *)(a3 + 8) & 0xE;
  if (v15 <= 9)
  {
    if (v12 == 65534)
      goto LABEL_12;
    if (v12 == 0xFFFF)
      v12 = *(_DWORD *)(*(_QWORD *)(a3 + 64) + 84);
    if (v12 < 64)
    {
LABEL_12:
      v16 = 8;
    }
    else if ((v12 - 63) >= 5)
    {
      v30 = (v12 - 64) | ((v12 - 64) >> 1) | (((v12 - 64) | ((v12 - 64) >> 1)) >> 2);
      v31 = v30 | (v30 >> 4) | ((v30 | (v30 >> 4)) >> 8);
      v16 = 8 * ((v31 | HIWORD(v31)) + 1) + 8;
    }
    else
    {
      v16 = 40;
    }
    if (a4 <= 3)
      v17 = 3;
    else
      v17 = a4;
    if (!(_DWORD)a4)
      v17 = 5;
    v18 = v16 + 8 * v17;
    if (v18 > 0x50)
    {
      if (v18 <= 0x1F60)
        v18 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v18 + 15) >> 2) & 0xFFFFFFFFCLL));
    }
    else
    {
      v18 = (v18 + 15) & 0x3FFFFFFFF0;
    }
    v19 = v18 - v16;
    a3 = ((v18 - v16) & 0x7FFFFFFF8) + 8 * v14 + 8;
    if (a3 <= 0x1F60
      && (v20 = *(_QWORD *)(v11 + (((((v18 - v16) & 0x7FFFFFFF8) + 8 * v14 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
    {
      v21 = *(unsigned int *)(v20 + 60);
      result = *(_QWORD *)(v20 + 24);
      if (result >= *(_QWORD *)(v20 + 32))
      {
        result = *(_QWORD *)(v20 + 40);
        if ((result & 1) == 0)
        {
          v44 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v20 + 48);
          *(_QWORD *)(v20 + 32) = result + HIDWORD(v44);
          *(_QWORD *)(v20 + 40) = result + (int)v44;
          *(_QWORD *)(v20 + 24) = result + v21;
LABEL_25:
          v23 = v19 >> 3;
          if ((v19 >> 3) >= 0x10000001)
          {
            __break(0xC471u);
            JUMPOUT(0x19897EA58);
          }
          v24 = (unsigned int *)(result + 8 * v14);
          v25 = v24 + 2;
          *v24 = v8;
          v24[1] = v23;
          if (v15 != 6)
          {
            if (v23 <= v8)
              goto LABEL_30;
            v26 = (void *)(result + 8 * (v14 + (unint64_t)v8) + 8);
            goto LABEL_29;
          }
          if (v23 > v8)
            memset_pattern16((void *)(result + 8 * (v14 + (unint64_t)v8) + 8), &memset_pattern_263, 8 * (v23 + ~v8) + 8);
          goto LABEL_30;
        }
        v54 = v14;
        v48 = v15;
        v49 = *(_QWORD *)(v11 + (((a3 + 15) >> 1) & 0x1FFFFFFFF8) + 6736);
        v50 = *(unsigned int *)(v20 + 60);
        JSC::sanitizeStackForVM((JSC *)v11, a2, a3, a4, a5, a6, a7, a8);
        v51 = v49;
        v15 = v48;
        v14 = v54;
        result = JSC::LocalAllocator::allocateSlowCase(v51, v11 + 192, v50, a2, 1);
      }
      else
      {
        *(_QWORD *)(v20 + 24) = result + v21;
      }
    }
    else
    {
      result = JSC::CompleteSubspace::tryAllocateSlow(v11 + 6648, (JSC *)v11, a3, (uint64_t)a2, a5, a6, a7, a8);
    }
    if (!result)
      return result;
    goto LABEL_25;
  }
  if (v12 == 65534)
    goto LABEL_51;
  if (v12 == 0xFFFF)
    v12 = *(_DWORD *)(*(_QWORD *)(a3 + 64) + 84);
  if (v12 < 64)
  {
LABEL_51:
    v32 = 0;
  }
  else if ((v12 - 63) >= 5)
  {
    v45 = (v12 - 64) | ((v12 - 64) >> 1) | (((v12 - 64) | ((v12 - 64) >> 1)) >> 2);
    v46 = v45 | (v45 >> 4) | ((v45 | (v45 >> 4)) >> 8);
    v32 = (v46 | HIWORD(v46)) + 1;
  }
  else
  {
    v32 = 4;
  }
  if (a4 <= 4)
    v33 = 4;
  else
    v33 = a4;
  v34 = v32 + v33;
  v35 = 8 * (v32 + v33);
  if (v34 > 7)
  {
    if (v34 > 0x3E9)
      v36 = v35 + 24;
    else
      v36 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v35 + 39) >> 2) & 0x7FFFFFFFCLL));
  }
  else
  {
    v36 = (v35 + 39) & 0x1FFFFFFFF0;
  }
  v37 = v36 - 8 * v32 + 0x7FFFFFFE8;
  v38 = (v37 >> 3);
  v39 = v38 + v14;
  v40 = 8 * v39;
  if (v39 <= 0x3E9 && (v41 = *(_QWORD *)(v11 + (((unint64_t)(v40 + 39) >> 1) & 0xFFFFFFFF8) + 6736)) != 0)
  {
    result = *(_QWORD *)(v41 + 24);
    if (result >= *(_QWORD *)(v41 + 32))
    {
      v52 = *(_QWORD *)(v11 + (((unint64_t)(v40 + 39) >> 1) & 0xFFFFFFFF8) + 6736);
      v53 = *(unsigned int *)(v41 + 60);
      result = *(_QWORD *)(v41 + 40);
      if ((result & 1) == 0)
      {
        v47 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v41 + 48);
        *(_QWORD *)(v41 + 32) = result + HIDWORD(v47);
        *(_QWORD *)(v41 + 40) = result + (int)v47;
        *(_QWORD *)(v41 + 24) = result + v53;
        goto LABEL_62;
      }
      JSC::sanitizeStackForVM((JSC *)v11, a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v52, v11 + 192, v53, a2, 1);
    }
    else
    {
      *(_QWORD *)(v41 + 24) = result + *(unsigned int *)(v41 + 60);
    }
  }
  else
  {
    result = JSC::CompleteSubspace::tryAllocateSlow(v11 + 6648, (JSC *)v11, v40 + 24, (uint64_t)a2, a5, a6, a7, a8);
  }
  if (!result)
    return result;
LABEL_62:
  v23 = v37 >> 3;
  if ((v37 >> 3) >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x19897EB60);
  }
  v42 = result + 8 * v14;
  *(_QWORD *)v42 = v8 | (unint64_t)(v38 << 32);
  *(_QWORD *)(v42 + 8) = 0;
  v25 = (_DWORD *)(v42 + 8);
  *(_DWORD *)(v42 + 16) = 0;
  *(_DWORD *)(v42 + 20) = v8;
  if (v23 > v8)
  {
    v26 = (void *)(result + 8 * (v14 + (unint64_t)v8) + 24);
LABEL_29:
    bzero(v26, 8 * (v23 + ~v8) + 8);
  }
LABEL_30:
  result = *(_QWORD *)(v11 + 37584);
  if (result < *(_QWORD *)(v11 + 37592))
  {
LABEL_31:
    *(_QWORD *)(v11 + 37584) = result + 16;
    goto LABEL_32;
  }
  result = *(_QWORD *)(v11 + 37600);
  if ((result & 1) == 0)
  {
    v43 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v11 + 37608);
    *(_QWORD *)(v11 + 37592) = result + HIDWORD(v43);
    *(_QWORD *)(v11 + 37600) = result + (int)v43;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM((JSC *)v11, a2, a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase(v11 + 37560, v11 + 192, 16, a2, 0);
LABEL_32:
  *(_DWORD *)result = 0;
  v27 = *(_DWORD *)(v9 + 8);
  *(_DWORD *)result = v9 >> 4;
  *(_DWORD *)(result + 4) = v27;
  *(_QWORD *)(result + 8) = v25;
  if (*(_BYTE *)(v11 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::JSArray::eagerlyInitializeButterfly(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v3;
  unsigned int v4;

  v3 = *(char **)(a2 + 8);
  v4 = *(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 8) & 0xE;
  if (v4 >= 0xA)
  {
    if (!a3)
      return;
    v3 += 16;
LABEL_6:
    bzero(v3, 8 * a3);
    return;
  }
  if (v4 != 6)
  {
    if (!a3)
      return;
    goto LABEL_6;
  }
  if (a3)
    memset_pattern16(v3, &memset_pattern_268, 8 * a3);
}

uint64_t JSC::JSArray::setLength(JSC::JSArray *this, JSC::VM **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  JSC::Butterfly *v12;
  char v13;
  unsigned int v14;
  JSC::JSGlobalObject *v16;
  JSC::Butterfly *v17;
  unsigned int v18;
  JSC::JSArray *v19;
  uint64_t v20;
  JSC::JSArray *v21;
  JSC::VM *v22;
  JSC::VM *v23;
  unsigned int v24;
  unsigned int v25;
  JSC::JSArray *v26;
  JSC::JSObject *v27;
  JSC::JSObject *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  JSC::JSGlobalObject *v33;
  JSC::JSGlobalObject *v34;
  JSC::JSGlobalObject *v35;
  JSC::JSGlobalObject *v36;
  JSC::JSGlobalObject *v37;
  JSC::VM *v38;

  v9 = a3;
  v10 = (JSC::JSGlobalObject *)a2;
  v11 = a2[7];
  v38 = v11;
  v12 = (JSC::Butterfly *)*((_QWORD *)this + 1);
  v13 = *((_BYTE *)this + 4);
  if ((v13 & 0x1F) != 9)
  {
    switch(*((_BYTE *)this + 4) & 0x1F)
    {
      case 1:
        v32 = a4;
        v37 = v10;
        v28 = this;
        if (!(_DWORD)a3)
          return 1;
        if (a3 >> 5 < 0xC35)
        {
          JSC::JSObject::createInitialUndecided(this, v11, a3, a9);
          return 1;
        }
        if ((v13 & 0xEu) <= 9)
          v12 = JSC::JSObject::ensureArrayStorageSlow(this, v11, a3, a4, a5, a6, a7, a8, a9);
        this = v28;
        v16 = v37;
        LODWORD(a3) = v9;
        LODWORD(a4) = v32;
LABEL_6:
        v17 = v12;
        break;
      case 3:
      case 5:
      case 7:
        goto LABEL_2;
      case 0xB:
      case 0xD:
        v16 = v10;
        goto LABEL_6;
      case 0x15:
      case 0x17:
      case 0x19:
        v29 = a4;
        v34 = v10;
        if (*((_DWORD *)v12 - 2) == (_DWORD)a3)
          return 1;
        v21 = this;
        v22 = v11;
        JSC::JSObject::convertFromCopyOnWrite(this, v11, a3, a4, a5, a6, a7, a8, a9);
        v11 = v22;
        this = v21;
        v12 = (JSC::Butterfly *)*((_QWORD *)v21 + 1);
        v10 = v34;
        a4 = v29;
        goto LABEL_2;
      default:
        __break(0xC471u);
        JUMPOUT(0x19897EF18);
    }
    return JSC::JSArray::setLengthWithArrayStorage((uint64_t)this, v16, a3, a4, v17);
  }
LABEL_2:
  v14 = *((_DWORD *)v12 - 2);
  if (v14 == (_DWORD)v9)
    return 1;
  if (v9 > 0x10000000)
  {
LABEL_29:
    v36 = v10;
    v31 = a4;
    v26 = this;
    if ((*((_BYTE *)this + 4) & 0xEu) < 0xA)
      v17 = JSC::JSObject::ensureArrayStorageSlow(this, v11, a3, a4, a5, a6, a7, a8, a9);
    else
      v17 = (JSC::Butterfly *)*((_QWORD *)this + 1);
    this = v26;
    v16 = v36;
    LODWORD(a3) = v9;
    LODWORD(a4) = v31;
    return JSC::JSArray::setLengthWithArrayStorage((uint64_t)this, v16, a3, a4, v17);
  }
  if (v9 >> 5 >= 0xC35)
  {
    v27 = this;
    v35 = v10;
    v23 = v11;
    v30 = a4;
    v24 = JSC::JSObject::countElements(this);
    a4 = v30;
    v11 = v23;
    v10 = v35;
    v25 = v24;
    this = v27;
    if (v25 >= v9 >> 3)
    {
      v14 = *((_DWORD *)v12 - 2);
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_10:
  v18 = v14 - v9;
  if (v14 >= v9)
  {
    if (v18 > v9 && v18 >= 0x41)
    {
      JSC::JSObject::reallocateAndShrinkButterfly(this, v11, v9);
    }
    else
    {
      if ((*((_BYTE *)this + 4) & 0xF) == 7)
      {
        if (v14 > v9)
          memset_pattern16((char *)v12 + 8 * (v14 - 1 - (unint64_t)(v14 - 1 - v9)), &memset_pattern_4, 8 * (v14 - 1 - v9) + 8);
      }
      else if (v14 > v9)
      {
        bzero((char *)v12 + 8 * (v14 - 1 - (unint64_t)(v14 - 1 - v9)), 8 * (v14 - 1 - v9) + 8);
      }
      *((_DWORD *)v12 - 2) = v9;
    }
    return 1;
  }
  v33 = v10;
  v19 = this;
  v20 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v20 - 4) >= v9 && (*((_BYTE *)this + 4) & 0x10) == 0)
  {
LABEL_22:
    if (*(_DWORD *)(v20 - 8) < v9)
      *(_DWORD *)(v20 - 8) = v9;
    return 1;
  }
  if (JSC::JSObject::ensureLengthSlow(this, v11, v9, a4, a5, a6, a7, a8, a9))
  {
    v20 = *((_QWORD *)v19 + 1);
    goto LABEL_22;
  }
  JSC::throwOutOfMemoryError(v33, (JSC::JSGlobalObject *)&v38);
  return 0;
}

unint64_t JSC::JSArray::unshiftCountSlowCase(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v9;
  int v10;
  JSC::Butterfly *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unint64_t result;
  __int128 v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  JSC::Butterfly *v42;
  unsigned __int8 *v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  JSC::JSObject *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  _QWORD *v71;
  unsigned int v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned int v76;
  JSC::Structure *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  char *v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  void *v104;
  JSC::Butterfly *v105;
  unsigned int v106;
  int v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  char *v116;
  char *v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  __int128 v155;
  uint64_t v156;
  char *i;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  char *v162;
  char *v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  JSC::Butterfly *v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  int v180;
  int v181;
  JSC::JSObject *v182;
  JSC::Butterfly *v183;

  v9 = a4;
  v10 = a3;
  if ((*(_BYTE *)(a1 + 4) & 0xEu) < 0xA)
    v12 = JSC::JSObject::ensureArrayStorageSlow((JSC::JSObject *)a1, a2, a3, a4, a5, a6, a7, a8, a9);
  else
    v12 = *(JSC::Butterfly **)(a1 + 8);
  v13 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  v14 = JSC::Structure::outOfLineCapacity((JSC::Structure *)v13);
  v16 = *(unsigned __int16 *)(v13 + 24);
  if (v16 == 65534)
    goto LABEL_7;
  if (v16 == 0xFFFF)
    v16 = *(_DWORD *)(*(_QWORD *)(v13 + 64) + 84);
  v17 = v16 - 63;
  if (v16 <= 63)
LABEL_7:
    v17 = 0;
  v19 = *((_DWORD *)v12 - 2);
  v18 = *((_DWORD *)v12 - 1);
  v20 = (char *)v12 - 8;
  if (v19 >= v18)
    v21 = v18;
  else
    v21 = v19;
  if (0x10000000 - (int)v21 < v9)
    return 0;
  v182 = (JSC::JSObject *)a1;
  v183 = v12;
  v22 = *((_DWORD *)v12 + 2) + v18;
  if (v21 + v9 <= 4)
    v23 = 4;
  else
    v23 = v21 + v9;
  v24 = 2 * v23;
  if (v24 >= 0x10000000)
    v25 = 0x10000000;
  else
    v25 = v24;
  v26 = v22 > v25 && v21 + v9 >= v22 >> 3;
  v27 = !v26;
  v180 = v27;
  v181 = v21 + v9;
  v179 = v14;
  v28 = v14;
  if (v26)
  {
    v31 = JSC::Butterfly::base(v183, (JSC::Structure *)v13);
  }
  else
  {
    result = JSC::Butterfly::tryCreateUninitialized(a2, (uint64_t)v182, 0, v14, 1, 8 * v25 + 16, 0, v15);
    if (!result)
      return result;
    v31 = result - 8 * v28 - 8;
    v22 = v25;
  }
  v32 = v21 + v9;
  if ((v10 & 1) != 0)
  {
    v33 = *((_DWORD *)v183 - 1);
    if (v22 - v181 >= (v33 - v19) >> 1)
      v34 = (v33 - v19) >> 1;
    else
      v34 = v22 - v181;
    if (v33 > v19)
      v35 = v34;
    else
      v35 = 0;
  }
  else
  {
    v35 = v22 - v181;
  }
  v36 = v179;
  v37 = v180;
  v38 = v35 + v181;
  if (v35 + v181 >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x19897F694);
  }
  v39 = v22 - v38;
  v40 = (_QWORD *)(v31 + 8 * v39);
  v41 = (char *)&v40[v179];
  v42 = (JSC::Butterfly *)(v41 + 8);
  if ((v180 & 1) != 0)
  {
    v43 = 0;
    goto LABEL_37;
  }
  v43 = (unsigned __int8 *)(v13 + 15);
  if (__ldaxr((unsigned __int8 *)(v13 + 15)))
  {
    __clrex();
LABEL_80:
    v174 = v28;
    v175 = v31;
    v177 = v35 + v181;
    v173 = v39;
    v73 = v35;
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v13 + 15);
    v38 = v177;
    v36 = v179;
    v35 = v73;
    v39 = v173;
    v28 = v174;
    v43 = (unsigned __int8 *)(v13 + 15);
    v31 = v175;
    v42 = (JSC::Butterfly *)(v41 + 8);
    v37 = v180;
    v32 = v21 + v9;
    goto LABEL_37;
  }
  if (__stxr(1u, v43))
    goto LABEL_80;
LABEL_37:
  if (!v10)
  {
    v74 = v43;
    v176 = v42;
    v75 = v31;
    v76 = v35;
    v77 = (JSC::Structure *)v13;
    v178 = v38;
    v78 = v39;
    v79 = JSC::Butterfly::base(v183, v77);
    v80 = v76;
    v81 = v78;
    v82 = v178;
    v83 = v28;
    v84 = v181;
    v85 = v75;
    if (v75 == v79 && (_DWORD)v78 == *((_DWORD *)v183 + 2))
      goto LABEL_118;
    v86 = &v41[-8 * v28];
    v87 = 8 * v28;
    v88 = 8 * v28 + 24;
    v89 = &v20[-8 * v28];
    if (v20 >= v41)
    {
      if (v179 <= 0x1B)
      {
        v132 = v88 >> 3;
        if ((v88 >> 3) <= 1)
          v132 = 1;
        else
          v132 = v132;
        v84 = v181;
        v83 = v28;
        v85 = v75;
        v82 = v178;
        v81 = v78;
        v80 = v76;
        do
        {
          v133 = *(_QWORD *)v89;
          v89 += 8;
          *v40++ = v133;
          --v132;
        }
        while (v132);
        goto LABEL_87;
      }
      v161 = v88 & 0xFFFFFFFE0;
      v162 = &v86[v88];
      v163 = &v86[v161];
      while (v86 != v163)
      {
        v164 = *(_OWORD *)v89;
        v165 = *((_OWORD *)v89 + 1);
        v89 += 32;
        *(_OWORD *)v86 = v164;
        *((_OWORD *)v86 + 1) = v165;
        v86 += 32;
      }
      while (v86 != v162)
      {
        v166 = *(_QWORD *)v89;
        v89 += 8;
        *(_QWORD *)v86 = v166;
        v86 += 8;
      }
    }
    else
    {
      v90 = &v89[v88];
      if (&v89[v88] > v86)
      {
        if (v179 > 0x1B)
        {
          for (i = &v86[v88]; i != &v86[v88 & 0xFFFFFFFE0]; i -= 8)
          {
            v158 = *((_QWORD *)v90 - 1);
            v90 -= 8;
            *((_QWORD *)i - 1) = v158;
          }
          while (i != v86)
          {
            v159 = *((_OWORD *)v90 - 2);
            v160 = *((_OWORD *)v90 - 1);
            v90 -= 32;
            *((_OWORD *)i - 2) = v159;
            *((_OWORD *)i - 1) = v160;
            i -= 32;
          }
        }
        else
        {
          v91 = (uint64_t *)((char *)v183 + 8);
          do
          {
            v92 = *v91--;
            *(_QWORD *)(v75 + 8 * v78 + 16 + v87) = v92;
            v87 -= 8;
          }
          while (v87 != -24);
        }
        goto LABEL_87;
      }
      if (v179 <= 0x1B)
      {
        v145 = v88 >> 3;
        if ((v88 >> 3) <= 1)
          v145 = 1;
        else
          v145 = v145;
        v84 = v181;
        v83 = v28;
        v85 = v75;
        v82 = v178;
        v81 = v78;
        v80 = v76;
        do
        {
          v146 = *(_QWORD *)v89;
          v89 += 8;
          *v40++ = v146;
          --v145;
        }
        while (v145);
        goto LABEL_87;
      }
      v167 = v88 & 0xFFFFFFFE0;
      v168 = &v86[v88];
      v169 = &v86[v167];
      while (v86 != v169)
      {
        v170 = *(_OWORD *)v89;
        v171 = *((_OWORD *)v89 + 1);
        v89 += 32;
        *(_OWORD *)v86 = v170;
        *((_OWORD *)v86 + 1) = v171;
        v86 += 32;
      }
      while (v86 != v168)
      {
        v172 = *(_QWORD *)v89;
        v89 += 8;
        *(_QWORD *)v86 = v172;
        v86 += 8;
      }
    }
    v84 = v181;
    v83 = v28;
    v85 = v75;
    v82 = v178;
    v81 = v78;
    v80 = v76;
LABEL_87:
    v93 = v41 + 24;
    v94 = (__int128 *)((char *)v183 + 16);
    v95 = 8 * v21;
    if ((char *)v183 + 16 < v41 + 24)
    {
      v108 = (char *)v94 + v95;
      if ((char *)v94 + v95 <= v93)
      {
        if (v21 > 0x1E)
        {
          v134 = v95 & 0x7FFFFFFE0;
          v135 = &v93[v95];
          v136 = &v93[v134];
          while (v93 != v136)
          {
            v137 = *v94;
            v138 = v94[1];
            v94 += 2;
            *(_OWORD *)v93 = v137;
            *((_OWORD *)v93 + 1) = v138;
            v93 += 32;
          }
          while (v93 != v135)
          {
            v139 = *(_QWORD *)v94;
            v94 = (__int128 *)((char *)v94 + 8);
            *(_QWORD *)v93 = v139;
            v93 += 8;
          }
          v84 = v181;
          v83 = v28;
          v85 = v75;
          v82 = v178;
          v81 = v78;
          v80 = v76;
        }
        else
        {
          v84 = v181;
          v83 = v28;
          v85 = v75;
          v82 = v178;
          v81 = v78;
          v80 = v76;
          if ((_DWORD)v21)
          {
            do
            {
              v131 = *(_QWORD *)v94;
              v94 = (__int128 *)((char *)v94 + 8);
              *(_QWORD *)v93 = v131;
              v93 += 8;
              --v21;
            }
            while (v21);
          }
        }
      }
      else if (v21 <= 0x1E)
      {
        if ((_DWORD)v21)
        {
          do
          {
            *(_QWORD *)&v41[v95 + 16] = *(_QWORD *)((char *)v183 + v95 + 8);
            v95 -= 8;
          }
          while (v95);
        }
      }
      else
      {
        v109 = v95 & 0x7FFFFFFE0;
        v110 = &v93[v95];
        v111 = &v93[v109];
        while (v110 != v111)
        {
          v112 = *((_QWORD *)v108 - 1);
          v108 -= 8;
          *((_QWORD *)v110 - 1) = v112;
          v110 -= 8;
        }
        while (v110 != v93)
        {
          v113 = *((_OWORD *)v108 - 2);
          v114 = *((_OWORD *)v108 - 1);
          v108 -= 32;
          *((_OWORD *)v110 - 2) = v113;
          *((_OWORD *)v110 - 1) = v114;
          v110 -= 32;
        }
      }
    }
    else if (v21 > 0x1E)
    {
      v115 = v95 & 0x7FFFFFFE0;
      v116 = &v93[v95];
      v117 = &v93[v115];
      while (v93 != v117)
      {
        v118 = *v94;
        v119 = v94[1];
        v94 += 2;
        *(_OWORD *)v93 = v118;
        *((_OWORD *)v93 + 1) = v119;
        v93 += 32;
      }
      while (v93 != v116)
      {
        v120 = *(_QWORD *)v94;
        v94 = (__int128 *)((char *)v94 + 8);
        *(_QWORD *)v93 = v120;
        v93 += 8;
      }
    }
    else if ((_DWORD)v21)
    {
      do
      {
        v96 = *(_QWORD *)v94;
        v94 = (__int128 *)((char *)v94 + 8);
        *(_QWORD *)v93 = v96;
        v93 += 8;
        --v21;
      }
      while (v21);
    }
    if (v84 < v82)
    {
      bzero((void *)(v85 + 8 * (v83 + v84 + v81) + 24), 8 * (v80 - 1) + 8);
      LODWORD(v81) = v78;
      v82 = v178;
    }
LABEL_118:
    *((_DWORD *)v41 + 1) = v82;
    *((_DWORD *)v41 + 4) = v81;
    JSC::JSObject::setButterfly(v182, a2, v176);
    if ((v180 & 1) != 0)
      return 1;
    goto LABEL_93;
  }
  v44 = &v41[8 * v9 + 24];
  v45 = (__int128 *)((char *)v183 + 16);
  v46 = 8 * v21;
  if ((char *)v183 + 16 < v44)
  {
    v49 = (char *)v45 + v46;
    v47 = v182;
    if ((char *)v45 + v46 <= v44)
    {
      if (v21 > 0x1E)
      {
        v124 = v46 & 0x7FFFFFFE0;
        v125 = &v44[v46];
        v126 = &v44[v124];
        while (v44 != v126)
        {
          v30 = *v45;
          v127 = v45[1];
          v45 += 2;
          *(_OWORD *)v44 = v30;
          *((_OWORD *)v44 + 1) = v127;
          v44 += 32;
        }
        while (v44 != v125)
        {
          v128 = *(_QWORD *)v45;
          v45 = (__int128 *)((char *)v45 + 8);
          *(_QWORD *)v44 = v128;
          v44 += 8;
        }
      }
      else if ((_DWORD)v21)
      {
        do
        {
          v121 = *(_QWORD *)v45;
          v45 = (__int128 *)((char *)v45 + 8);
          *(_QWORD *)v44 = v121;
          v44 += 8;
          --v21;
        }
        while (v21);
      }
    }
    else if (v21 <= 0x1E)
    {
      if ((_DWORD)v21)
      {
        v71 = (_QWORD *)(v46 + 8 * v9 + 8 * v28 + 8 * v39 + v31 + 16);
        do
        {
          *v71-- = *(_QWORD *)((char *)v183 + v46 + 8);
          v46 -= 8;
        }
        while (v46);
      }
    }
    else
    {
      v50 = v46 & 0x7FFFFFFE0;
      v51 = &v44[v46];
      v52 = &v44[v50];
      while (v51 != v52)
      {
        v53 = *((_QWORD *)v49 - 1);
        v49 -= 8;
        *((_QWORD *)v51 - 1) = v53;
        v51 -= 8;
      }
      while (v51 != v44)
      {
        v30 = *((_OWORD *)v49 - 2);
        v54 = *((_OWORD *)v49 - 1);
        v49 -= 32;
        *((_OWORD *)v51 - 2) = v30;
        *((_OWORD *)v51 - 1) = v54;
        v51 -= 32;
      }
    }
  }
  else
  {
    v47 = v182;
    if (v21 > 0x1E)
    {
      v55 = v46 & 0x7FFFFFFE0;
      v56 = &v44[v46];
      v57 = &v44[v55];
      while (v44 != v57)
      {
        v30 = *v45;
        v58 = v45[1];
        v45 += 2;
        *(_OWORD *)v44 = v30;
        *((_OWORD *)v44 + 1) = v58;
        v44 += 32;
      }
      while (v44 != v56)
      {
        v59 = *(_QWORD *)v45;
        v45 = (__int128 *)((char *)v45 + 8);
        *(_QWORD *)v44 = v59;
        v44 += 8;
      }
    }
    else if ((_DWORD)v21)
    {
      do
      {
        v48 = *(_QWORD *)v45;
        v45 = (__int128 *)((char *)v45 + 8);
        *(_QWORD *)v44 = v48;
        v44 += 8;
        --v21;
      }
      while (v21);
    }
  }
  v60 = &v41[-8 * v17];
  v61 = 8 * v17 + 24;
  v62 = &v20[-8 * v17];
  if (v20 >= v41)
  {
    if (v17 > 0x1B)
    {
      v147 = v61 & 0xFFFFFFFE0;
      v148 = &v60[v61];
      v149 = &v60[v147];
      while (v60 != v149)
      {
        v30 = *(_OWORD *)v62;
        v150 = *((_OWORD *)v62 + 1);
        v62 += 32;
        *(_OWORD *)v60 = v30;
        *((_OWORD *)v60 + 1) = v150;
        v60 += 32;
      }
      while (v60 != v148)
      {
        v151 = *(_QWORD *)v62;
        v62 += 8;
        *(_QWORD *)v60 = v151;
        v60 += 8;
      }
    }
    else
    {
      v122 = v61 >> 3;
      if (v122 <= 1)
        v122 = 1;
      else
        v122 = v122;
      do
      {
        v123 = *(_QWORD *)v62;
        v62 += 8;
        *(_QWORD *)v60 = v123;
        v60 += 8;
        --v122;
      }
      while (v122);
    }
  }
  else
  {
    v63 = &v62[v61];
    if (&v62[v61] <= v60)
    {
      if (v17 > 0x1B)
      {
        v152 = v61 & 0xFFFFFFFE0;
        v153 = &v60[v61];
        v154 = &v60[v152];
        while (v60 != v154)
        {
          v30 = *(_OWORD *)v62;
          v155 = *((_OWORD *)v62 + 1);
          v62 += 32;
          *(_OWORD *)v60 = v30;
          *((_OWORD *)v60 + 1) = v155;
          v60 += 32;
        }
        while (v60 != v153)
        {
          v156 = *(_QWORD *)v62;
          v62 += 8;
          *(_QWORD *)v60 = v156;
          v60 += 8;
        }
      }
      else
      {
        v129 = v61 >> 3;
        if (v129 <= 1)
          v129 = 1;
        else
          v129 = v129;
        do
        {
          v130 = *(_QWORD *)v62;
          v62 += 8;
          *(_QWORD *)v60 = v130;
          v60 += 8;
          --v129;
        }
        while (v129);
      }
    }
    else if (v17 > 0x1B)
    {
      v140 = v61 & 0xFFFFFFFE0;
      v141 = &v60[v61];
      v142 = &v60[v140];
      while (v141 != v142)
      {
        v143 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v141 - 1) = v143;
        v141 -= 8;
      }
      while (v141 != v60)
      {
        v30 = *((_OWORD *)v63 - 2);
        v144 = *((_OWORD *)v63 - 1);
        v63 -= 32;
        *((_OWORD *)v141 - 2) = v30;
        *((_OWORD *)v141 - 1) = v144;
        v141 -= 32;
      }
    }
    else
    {
      v64 = v61 >> 3;
      v65 = (_QWORD *)(v31 + 8 * (v28 + v39) + 16);
      v66 = (uint64_t *)((char *)v183 + 8);
      do
      {
        v67 = *v66--;
        *v65-- = v67;
        --v64;
      }
      while (v64);
    }
  }
  v68 = &v41[-8 * v28];
  v69 = &v68[8 * (v36 - v17)];
  v70 = &v68[(8 * (v36 - v17)) & 0x7FFFFFFC0];
  *(_QWORD *)&v30 = 0;
  while (v68 != v70)
  {
    *(_OWORD *)v68 = v30;
    *((_OWORD *)v68 + 1) = v30;
    *((_OWORD *)v68 + 2) = v30;
    *((_OWORD *)v68 + 3) = v30;
    v68 += 64;
  }
  while (v68 != v69)
  {
    *(_QWORD *)v68 = 0;
    v68 += 8;
  }
  if (v37)
  {
    if (v32 < v38)
    {
      v104 = (void *)(v31 + 8 * (v28 + v32 + v39) + 24);
      v105 = v42;
      v106 = v38;
      v107 = v39;
      bzero(v104, 8 * (v35 - 1) + 8);
      LODWORD(v39) = v107;
      v38 = v106;
      v42 = v105;
    }
    *((_DWORD *)v41 + 1) = v38;
    *((_DWORD *)v41 + 4) = v39;
    JSC::JSObject::setButterfly(v47, a2, v42);
    return 1;
  }
  v74 = v43;
  *((_DWORD *)v41 + 1) = v38;
  *((_DWORD *)v41 + 4) = v39;
  JSC::JSObject::setButterfly(v47, a2, v42);
LABEL_93:
  v103 = __ldxr(v74);
  if (v103 == 1)
  {
    if (!__stlxr(0, v74))
      return 1;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v74, 0, v97, v98, v99, v100, v101, v102);
  return 1;
}

uint64_t JSC::Butterfly::base(JSC::Butterfly *this, JSC::Structure *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if ((*((_BYTE *)a2 + 8) & 0xEu) >= 0xA)
    v2 = *((unsigned int *)this + 2);
  else
    v2 = 0;
  v3 = *((unsigned __int16 *)a2 + 12);
  if (v3 == 65534)
    goto LABEL_7;
  if (v3 == 0xFFFF)
    v3 = *(_DWORD *)(*((_QWORD *)a2 + 8) + 84);
  if (v3 < 64)
  {
LABEL_7:
    v4 = 0;
  }
  else if ((v3 - 63) >= 5)
  {
    v5 = (v3 - 64) | ((v3 - 64) >> 1) | (((v3 - 64) | ((v3 - 64) >> 1)) >> 2);
    v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
    v4 = (v6 | HIWORD(v6)) + 1;
  }
  else
  {
    v4 = 4;
  }
  return (uint64_t)this + -8 * v2 + -8 * v4 - 8;
}

uint64_t JSC::JSObject::setButterfly(JSC::JSObject *this, JSC::VM *a2, JSC::Butterfly *a3)
{
  uint64_t result;

  result = (uint64_t)a2 + 192;
  if (*((_BYTE *)a2 + 755))
  {
    __dmb(0xAu);
    *((_QWORD *)this + 1) = a3;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      result = JSC::Heap::writeBarrierSlowPath(result, (unint64_t)this);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)this + 1) = a3;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      return JSC::Heap::writeBarrierSlowPath(result, (unint64_t)this);
  }
  return result;
}

uint64_t JSC::JSArray::setLengthWithArrayStorage(uint64_t this, JSC::JSGlobalObject *a2, unsigned int a3, int a4, JSC::ArrayStorage *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v29;
  uint64_t v30;
  int v31;
  void *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  JSC::JSObject *v39;
  JSC::ArrayStorage *v40;
  unsigned int v41;
  unsigned int v42;
  JSC::SparseArrayValueMap *v43;
  unsigned int v44;
  void *__base;
  size_t __nel;
  JSC::VM *v47;

  v47 = (JSC::VM *)*((_QWORD *)a2 + 7);
  LODWORD(v5) = *((_DWORD *)a5 - 2);
  v6 = *(_QWORD *)a5;
  if (!*(_QWORD *)a5)
    goto LABEL_2;
  if ((*(_BYTE *)(v6 + 16) & 2) != 0)
  {
    if (a4)
      JSC::throwTypeError((unint64_t)a2, &v47, (uint64_t)"Attempted to assign to readonly property.", 42);
    return 0;
  }
  v12 = v5 - a3;
  if (v5 > a3)
  {
    v41 = a3;
    v42 = *((_DWORD *)a5 - 2);
    v39 = (JSC::JSObject *)this;
    v40 = a5;
    v13 = 0;
    __base = 0;
    __nel = 0;
    v43 = (JSC::SparseArrayValueMap *)v6;
    v14 = *(_QWORD *)(v6 + 8);
    if (v14)
      v13 = *(unsigned int *)(v14 - 12);
    if (v13 >= v12)
      v15 = v12;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 30)
      {
        __break(0xC471u);
        return this;
      }
      LODWORD(__nel) = v15;
      __base = (void *)WTF::fastMalloc((WTF *)(4 * v15));
      v14 = *((_QWORD *)v43 + 1);
    }
    if (v14)
      v16 = (unsigned int *)(v14 + 24 * *(unsigned int *)(v14 - 4));
    else
      v16 = 0;
    v17 = (unsigned int *)JSC::SparseArrayValueMap::begin(v43);
    if (v16 != v17)
    {
      v25 = v17;
      v26 = v18;
      do
      {
        v27 = *v25;
        v44 = v27;
        if (v42 > v27 && v27 >= v41)
        {
          if (HIDWORD(__nel) == (_DWORD)__nel)
          {
            WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,int &>((uint64_t)&__base, (unint64_t)&v44);
          }
          else
          {
            *((_DWORD *)__base + HIDWORD(__nel)) = v27;
            ++HIDWORD(__nel);
          }
        }
        while (1)
        {
          v25 += 6;
          if (v25 == v26)
            break;
          if (*(_QWORD *)v25 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_37;
        }
        v25 = v26;
LABEL_37:
        ;
      }
      while (v25 != v16);
    }
    if ((*((_BYTE *)v43 + 16) & 1) != 0)
    {
      qsort(__base, HIDWORD(__nel), 4uLL, (int (__cdecl *)(const void *, const void *))JSC::compareKeysForQSort);
      if (HIDWORD(__nel))
      {
        v33 = HIDWORD(__nel) - 1;
        while (1)
        {
          v34 = *((_DWORD *)__base + v33);
          v35 = JSC::SparseArrayValueMap::find(v43, v34);
          if ((v35[2] & 8) != 0)
            break;
          v36 = v33;
          JSC::SparseArrayValueMap::remove((uint64_t)v43, v35, (uint64_t)v18, v20, v21, v22, v23, v24);
          --v33;
          if (!v36)
            goto LABEL_46;
        }
        *((_DWORD *)v40 - 2) = v34 + 1;
        if (a4)
          JSC::throwTypeError((unint64_t)a2, &v47, (uint64_t)"Unable to delete property.", 27);
        v31 = 0;
LABEL_47:
        v32 = __base;
        if (__base)
        {
          __base = 0;
          LODWORD(__nel) = 0;
          WTF::fastFree((unint64_t)v32, v18, v19, v20, v21, v22, v23, v24);
        }
        a5 = v40;
        a3 = v41;
        LODWORD(v5) = v42;
        if (v31)
          goto LABEL_2;
        return 0;
      }
    }
    else
    {
      if (HIDWORD(__nel))
      {
        v29 = 0;
        do
          JSC::SparseArrayValueMap::remove(v43, *((_DWORD *)__base + v29++), v19, v20, v21, v22, v23, v24);
        while (v29 < HIDWORD(__nel));
      }
      v30 = *((_QWORD *)v43 + 1);
      if (!v30 || !*(_DWORD *)(v30 - 12))
        JSC::JSObject::deallocateSparseIndexMap((uint64_t)v39);
    }
LABEL_46:
    v31 = 1;
    goto LABEL_47;
  }
LABEL_2:
  if (v5 > a3)
  {
    v7 = *((_DWORD *)a5 - 1);
    if (v7 >= v5)
      v5 = v5;
    else
      v5 = v7;
    if (v5 > a3)
    {
      v8 = *((_DWORD *)a5 + 3);
      v9 = v5 - a3;
      v10 = (_QWORD *)((char *)a5 + 8 * a3 + 16);
      do
      {
        v11 = *v10 != 0;
        *v10++ = 0;
        v8 -= v11;
        --v9;
      }
      while (v9);
      *((_DWORD *)a5 + 3) = v8;
    }
  }
  *((_DWORD *)a5 - 2) = a3;
  return 1;
}

unint64_t JSC::compareKeysForQSort(JSC *this, _DWORD *a2, const void *a3)
{
  return (__PAIR64__(*(_DWORD *)this > *a2, *(_DWORD *)this) - *a2) >> 32;
}

uint64_t *JSC::SparseArrayValueMap::find(JSC::SparseArrayValueMap *this, unsigned int a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t *result;
  uint64_t v9;
  int v10;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~((unint64_t)a2 << 32) + a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  result = (uint64_t *)(v2 + 24 * v7);
  v9 = *result;
  if (*result != a2)
  {
    v10 = 1;
    while (v9 != -1)
    {
      v7 = (v7 + v10) & v3;
      result = (uint64_t *)(v2 + 24 * v7);
      v9 = *result;
      ++v10;
      if (*result == a2)
        return result;
    }
    return (uint64_t *)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
  return result;
}

uint64_t JSC::JSArray::appendMemcpy(JSC::JSCell *a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unint64_t v9;
  __int128 *v10;
  int v11;
  unsigned int v12;
  unsigned __int8 v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v22;
  char *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t SlowCase;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t result;
  _OWORD *i;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  double v66;
  double v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  JSC::VM *v71;
  uint64_t v72;
  const WTF::String *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::AtomStringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  JSC::JSGlobalObject *v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  char v109;

  v9 = a7;
  v10 = (__int128 *)a6;
  v11 = a5;
  v12 = a4;
  v106 = a3;
  v107 = a3;
  v15 = *((_BYTE *)a1 + 4);
  if ((v15 & 0x10) != 0)
  {
    JSC::JSObject::convertFromCopyOnWrite(a1, (JSC::VM *)a3, a3, a4, a5, a6, a7, a8, a9);
    a3 = v106;
    v15 = *((_BYTE *)a1 + 4);
  }
  v16 = 0;
  v17 = v15 & 0xF;
  if ((v11 & 0xEu) > 9
    || ((v18 = v11 & v15 & 1, v19 = v15 & 0xE, v18) ? (v20 = v19 > 9) : (v20 = 1), v20))
  {
LABEL_17:
    if (v17 != 3)
    {
LABEL_18:
      if (v17 != v16 || v9 > 0x1869F)
        return 0;
      goto LABEL_22;
    }
LABEL_93:
    result = 1;
    switch(v16)
    {
      case 0:
        return 0;
      case 5:
        JSC::JSObject::convertUndecidedToInt32(a1, (JSC::VM *)a3, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
        goto LABEL_109;
      case 7:
        JSC::JSObject::convertUndecidedToDouble(a1, (JSC::VM *)a3, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
        goto LABEL_109;
      case 9:
        JSC::JSObject::convertUndecidedToContiguous(a1, (JSC::VM *)a3, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
LABEL_109:
        a3 = v106;
        goto LABEL_110;
      default:
        return result;
    }
  }
  if (v17 == 3)
  {
    v16 = v11;
    goto LABEL_93;
  }
  if (v11 == 3)
  {
    v16 = v17;
    goto LABEL_17;
  }
  if (v17 != 9 && v17 != 5)
  {
LABEL_14:
    if (v17 == v11)
      v16 = v17;
    else
      v16 = 0;
    goto LABEL_17;
  }
  if (v11 != 5)
  {
    v16 = v11;
    if (v11 == 9)
      goto LABEL_18;
    goto LABEL_14;
  }
LABEL_110:
  if (v9 >> 5 > 0xC34)
    return 0;
LABEL_22:
  v22 = v9 + v12;
  if (HIDWORD(v22))
  {
    v71 = (JSC::VM *)a3;
    v72 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v72 = 0x2800000002;
    *(_QWORD *)(v72 + 8) = "Length exceeded the maximum array length";
    *(_DWORD *)(v72 + 16) = 4;
    v108 = (WTF::StringImpl *)v72;
    v74 = JSC::createRangeError((unint64_t)a2, &v108, v73);
    JSC::VM::throwException(v71, a2, v74, v75, v76, v77, v78, v79);
    v87 = v108;
    v108 = 0;
    if (v87)
    {
      if (*(_DWORD *)v87 == 2)
      {
        WTF::StringImpl::~StringImpl(v87, v80, v81, v82, v83, v84, v85, v86);
        WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
      }
      else
      {
        *(_DWORD *)v87 -= 2;
      }
    }
    return 0;
  }
  if (v22 >> 5 > 0xC34)
    return 0;
  v23 = (char *)*((_QWORD *)a1 + 1);
  v24 = *((_DWORD *)v23 - 1);
  if (v24 >= v22)
  {
    if ((*((_BYTE *)a1 + 4) & 0x10) == 0)
      goto LABEL_63;
  }
  else if ((*((_BYTE *)a1 + 4) & 0x10) == 0)
  {
    goto LABEL_26;
  }
  JSC::JSObject::convertFromCopyOnWrite(a1, (JSC::VM *)a3, a3, a4, a5, a6, a7, a8, a9);
  a3 = v106;
  v23 = (char *)*((_QWORD *)a1 + 1);
  v24 = *((_DWORD *)v23 - 1);
  if (v24 >= v22)
    goto LABEL_63;
LABEL_26:
  v25 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
  v105 = v9;
  v103 = a2;
  if (v25 == 65534)
    goto LABEL_30;
  if (v25 == 0xFFFF)
    v25 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
  if (v25 < 64)
  {
LABEL_30:
    v26 = 0;
  }
  else if ((v25 - 63) >= 5)
  {
    v62 = (v25 - 64) | ((v25 - 64) >> 1) | (((v25 - 64) | ((v25 - 64) >> 1)) >> 2);
    v63 = v62 | (v62 >> 4) | ((v62 | (v62 >> 4)) >> 8);
    v26 = (v63 | HIWORD(v63)) + 1;
  }
  else
  {
    v26 = 4;
  }
  v108 = (WTF::StringImpl *)a3;
  v109 = 0;
  v27 = v26;
  v28 = 8 * v26 + 8;
  v29 = v27 + v24;
  v30 = 8 * v29;
  v31 = 8 * v29 + 8;
  v104 = v12;
  if (v29 > 9)
  {
    if (v29 > 0x3EB)
      v32 = 8 * v29 + 8;
    else
      v32 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v30 + 23) >> 2) & 0x7FFFFFFFCLL));
  }
  else
  {
    v32 = (v30 + 23) & 0x1FFFFFFFF0;
  }
  v33 = (unint64_t)(v32 - v28) >> 3;
  if (v33 >= v22)
  {
    v46 = 0;
    goto LABEL_50;
  }
  v34 = 2 * v22;
  if ((2 * v22) <= 3)
    v34 = 3;
  v35 = v28 + (8 * v34);
  if (v35 > 0x50)
  {
    if (v35 <= 0x1F60)
      v35 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v35 + 15) >> 2) & 0xFFFFFFFFCLL));
  }
  else
  {
    v35 = (v35 + 15) & 0x3FFFFFFFF0;
  }
  v36 = v35 - v28;
  v33 = v36 >> 3;
  v37 = &v23[-8 * v27];
  v38 = v37 - 8;
  v39 = (v36 & 0x7FFFFFFF8) + v28;
  v40 = a3 + 6648;
  if ((_DWORD)v27 || *(_BYTE *)(a3 + 755) || (v38 & 8) == 0)
  {
    if (v39 <= 0x1F60 && (v41 = *(_QWORD *)(a3 + (((v39 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
    {
      v42 = *(unsigned int *)(v41 + 60);
      SlowCase = *(_QWORD *)(v41 + 24);
      if (SlowCase < *(_QWORD *)(v41 + 32))
      {
        *(_QWORD *)(v41 + 24) = SlowCase + v42;
        goto LABEL_45;
      }
      SlowCase = *(_QWORD *)(v41 + 40);
      if ((SlowCase & 1) == 0)
      {
        v70 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v41 + 48);
        *(_QWORD *)(v41 + 32) = SlowCase + HIDWORD(v70);
        *(_QWORD *)(v41 + 40) = SlowCase + (int)v70;
        *(_QWORD *)(v41 + 24) = SlowCase + v42;
LABEL_46:
        if (v29 > 0x1D)
        {
          for (i = (_OWORD *)SlowCase; i != (_OWORD *)((v31 & 0x1FFFFFFFE0) + SlowCase); i += 2)
          {
            v59 = *(_OWORD *)v38;
            v60 = *((_OWORD *)v38 + 1);
            v38 += 32;
            *i = v59;
            i[1] = v60;
          }
          while (i != (_OWORD *)(v31 + SlowCase))
          {
            v61 = *(_QWORD *)v38;
            v38 += 8;
            *(_QWORD *)i = v61;
            i = (_OWORD *)((char *)i + 8);
          }
        }
        else
        {
          v44 = 0;
          v45 = 1;
          do
          {
            *(_QWORD *)(SlowCase + 8 * v44) = *(_QWORD *)&v38[8 * v44];
            v44 = v45++;
          }
          while (v31 >> 3 > v44);
        }
        v46 = SlowCase + 8 * v27 + 8;
        v23 = (char *)v46;
        goto LABEL_50;
      }
      v100 = *(unsigned int *)(v41 + 60);
      v101 = a3 + 192;
      v99 = v41;
      v102 = 8 * v29 + 8;
      JSC::sanitizeStackForVM((JSC *)a3, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v99, v101, v100, (uint64_t)&v108, 1, v88, v89, v90);
    }
    else
    {
      v102 = 8 * v29 + 8;
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v40, (JSC *)a3, v39, (uint64_t)&v108, a5, a6, a7, a8);
    }
    v31 = v102;
    a3 = v106;
LABEL_45:
    if (!SlowCase)
    {
      v47 = 0;
      goto LABEL_59;
    }
    goto LABEL_46;
  }
  v68 = JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(v40, (JSC *)a3, (uint64_t)(v37 - 8), v39, (uint64_t)&v108, 1, a7, a8);
  if (!v68)
  {
    v47 = 0;
    a3 = v106;
    goto LABEL_59;
  }
  v46 = (uint64_t)(v68 + 8);
  v23 = v68 + 8;
  a3 = v106;
LABEL_50:
  if ((*((_BYTE *)a1 + 4) & 0xE) != 6)
  {
    if (v24 >= v33)
      goto LABEL_54;
    bzero(&v23[8 * v24], 8 * (v33 + ~v24) + 8);
    goto LABEL_53;
  }
  if (v24 < v33)
  {
    memset_pattern16(&v23[8 * v24], &memset_pattern_99, 8 * (v33 + ~v24) + 8);
LABEL_53:
    a3 = v106;
  }
LABEL_54:
  if (v46)
  {
    if (v33 >= 0x10000001)
    {
      __break(0xC471u);
      JUMPOUT(0x198980470);
    }
    *((_DWORD *)v23 - 1) = v33;
    __dmb(0xAu);
    *((_QWORD *)a1 + 1) = v46;
    if (*(_DWORD *)(a3 + 760) >= *((unsigned __int8 *)a1 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(a3 + 192, (unint64_t)a1);
      a3 = v106;
    }
  }
  else
  {
    __dmb(0xAu);
    if (v33 >= 0x10000001)
    {
      __break(0xC471u);
      JUMPOUT(0x198980500);
    }
    *((_DWORD *)v23 - 1) = v33;
  }
  v47 = 1;
LABEL_59:
  v12 = v104;
  if (v109)
  {
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v108 + 192, 0);
    a3 = v106;
  }
  if (!v47)
  {
    JSC::throwOutOfMemoryError(v103, (JSC::JSGlobalObject *)&v107);
    return 0;
  }
  v23 = (char *)*((_QWORD *)a1 + 1);
  v9 = v105;
LABEL_63:
  if (*((_DWORD *)v23 - 2) < v22)
    *((_DWORD *)v23 - 2) = v22;
  if (v11 == 3)
  {
    v69 = *((_QWORD *)a1 + 1);
    if (v17 == 7)
    {
      if (v22 > v12)
        memset_pattern16((void *)(v69 + 8 * v12), &memset_pattern_268, ((8 * v9 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 8);
    }
    else if (v22 > v12)
    {
      bzero((void *)(v69 + 8 * v12), ((8 * v9 + 0x7FFFFFFF8) & 0x7FFFFFFF8) + 8);
    }
    return 1;
  }
  v48 = *((_QWORD *)a1 + 1);
  if (v17 != 7)
  {
    v49 = (_OWORD *)(v48 + 8 * v12);
    if (v9 > 0x1E)
    {
      v52 = (_OWORD *)((char *)v49 + 8 * v9);
      v53 = (_OWORD *)((char *)v49 + ((8 * v9) & 0x7FFFFFFFFFFFFFE0));
      while (v49 != v53)
      {
        v54 = *v10;
        v55 = v10[1];
        v10 += 2;
        *v49 = v54;
        v49[1] = v55;
        v49 += 2;
      }
      while (v49 != v52)
      {
        v56 = *(_QWORD *)v10;
        v10 = (__int128 *)((char *)v10 + 8);
        *(_QWORD *)v49 = v56;
        v49 = (_OWORD *)((char *)v49 + 8);
      }
    }
    else if (v9)
    {
      v50 = v9;
      do
      {
        v51 = *(_QWORD *)v10;
        v10 = (__int128 *)((char *)v10 + 8);
        *(_QWORD *)v49 = v51;
        v49 = (_OWORD *)((char *)v49 + 8);
        --v50;
      }
      while (v50);
      if (!a1)
        return 1;
    }
    if (*(_DWORD *)(a3 + 760) >= *((unsigned __int8 *)a1 + 7))
      JSC::Heap::writeBarrierSlowPath(a3 + 192, (unint64_t)a1);
    return 1;
  }
  if (!v9)
    return 1;
  v64 = 8 * v9;
  result = 1;
  do
  {
    v65 = *(_QWORD *)v10;
    v10 = (__int128 *)((char *)v10 + 8);
    v66 = (double)(int)v65;
    *(_QWORD *)&v67 = v65 - 0x2000000000000;
    if (v65 <= 0xFFFDFFFFFFFFFFFFLL)
      v66 = v67;
    *(double *)(v48 + 8 * v12++) = v66;
    v64 -= 8;
  }
  while (v64);
  return result;
}

uint64_t JSC::JSObject::ensureLength(JSC::JSObject *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v9;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t Slow;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  _OWORD *i;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  JSC::VM *v51;
  char v52;

  if (a3 >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x1989809DCLL);
  }
  v9 = a3;
  v12 = *((_QWORD *)this + 1);
  v13 = *(_DWORD *)(v12 - 4);
  if (v13 >= a3)
  {
    if ((*((_BYTE *)this + 4) & 0x10) == 0)
      goto LABEL_42;
  }
  else if ((*((_BYTE *)this + 4) & 0x10) == 0)
  {
    goto LABEL_4;
  }
  JSC::JSObject::convertFromCopyOnWrite(this, a2, a3, a4, a5, a6, a7, a8, a9);
  v12 = *((_QWORD *)this + 1);
  v13 = *(_DWORD *)(v12 - 4);
  if (v13 >= v9)
    goto LABEL_42;
LABEL_4:
  v14 = *(unsigned __int16 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x18);
  if (v14 == 65534)
    goto LABEL_8;
  if (v14 == 0xFFFF)
    v14 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
  if (v14 < 64)
  {
LABEL_8:
    v15 = 0;
  }
  else if ((v14 - 63) >= 5)
  {
    v43 = (v14 - 64) | ((v14 - 64) >> 1) | (((v14 - 64) | ((v14 - 64) >> 1)) >> 2);
    v44 = v43 | (v43 >> 4) | ((v43 | (v43 >> 4)) >> 8);
    v15 = (v44 | HIWORD(v44)) + 1;
  }
  else
  {
    v15 = 4;
  }
  v51 = a2;
  v52 = 0;
  v16 = v15;
  v17 = v13;
  v18 = 8 * v15 + 8;
  v19 = v16 + v13;
  v20 = 8 * v19;
  v21 = 8 * v19 + 8;
  if (v19 > 9)
  {
    if (v19 > 0x3EB)
      v22 = 8 * v19 + 8;
    else
      v22 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v20 + 23) >> 2) & 0x7FFFFFFFCLL));
  }
  else
  {
    v22 = (v20 + 23) & 0x1FFFFFFFF0;
  }
  v23 = (unint64_t)(v22 - v18) >> 3;
  if (v23 < v9)
  {
    v24 = 2 * v9;
    if (2 * v9 >= 0x10000000)
      v24 = 0x10000000;
    if (v24 <= 3)
      v24 = 3;
    v25 = v18 + 8 * v24;
    if (v25 > 0x50)
    {
      if (v25 <= 0x1F60)
        v25 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v25 + 15) >> 2) & 0xFFFFFFFFCLL));
    }
    else
    {
      v25 = (v25 + 15) & 0x3FFFFFFFF0;
    }
    v26 = v25 - v18;
    v23 = v26 >> 3;
    v27 = v12 - 8 * v16;
    v28 = (_OWORD *)(v27 - 8);
    v29 = (v26 & 0x7FFFFFFF8) + v18;
    v30 = (char *)a2 + 6648;
    if ((_DWORD)v16 || *((_BYTE *)a2 + 755) || (v28 & 8) == 0)
    {
      if (v29 <= 0x1F60 && (v31 = *(_QWORD *)((char *)a2 + (((v29 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
      {
        v32 = *(unsigned int *)(v31 + 60);
        Slow = *(_QWORD *)(v31 + 24);
        if (Slow >= *(_QWORD *)(v31 + 32))
        {
          Slow = *(_QWORD *)(v31 + 40);
          if ((Slow & 1) == 0)
          {
            v46 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v31 + 48);
            *(_QWORD *)(v31 + 32) = Slow + HIDWORD(v46);
            *(_QWORD *)(v31 + 40) = Slow + (int)v46;
            *(_QWORD *)(v31 + 24) = Slow + v32;
            goto LABEL_25;
          }
          v50 = v23;
          v47 = v31;
          v23 = *(unsigned int *)(v31 + 60);
          JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
          v48 = v47;
          v17 = v13;
          v49 = v23;
          LODWORD(v23) = v50;
          Slow = JSC::LocalAllocator::allocateSlowCase(v48, (char *)a2 + 192, v49, &v51, 1);
          if (Slow)
            goto LABEL_25;
        }
        else
        {
          *(_QWORD *)(v31 + 24) = Slow + v32;
          if (Slow)
          {
LABEL_25:
            if (v19 > 0x1D)
            {
              for (i = (_OWORD *)Slow; i != (_OWORD *)((v21 & 0x1FFFFFFFE0) + Slow); i += 2)
              {
                v40 = *v28;
                v41 = v28[1];
                v28 += 2;
                *i = v40;
                i[1] = v41;
              }
              while (i != (_OWORD *)(v21 + Slow))
              {
                v42 = *(_QWORD *)v28;
                v28 = (_OWORD *)((char *)v28 + 8);
                *(_QWORD *)i = v42;
                i = (_OWORD *)((char *)i + 8);
              }
            }
            else
            {
              v34 = 0;
              v35 = 1;
              do
              {
                *(_QWORD *)(Slow + 8 * v34) = *((_QWORD *)v28 + v34);
                v34 = v35++;
              }
              while (v21 >> 3 > v34);
            }
            v36 = Slow + 8 * v16 + 8;
            goto LABEL_29;
          }
        }
      }
      else
      {
        Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v30, a2, v29, (uint64_t)&v51, a5, a6, a7, a8);
        if (Slow)
          goto LABEL_25;
      }
    }
    else
    {
      v45 = JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual((uint64_t)v30, a2, v27 - 8, v29, (uint64_t)&v51, 1, a7, a8);
      if (v45)
      {
        v36 = (uint64_t)(v45 + 8);
LABEL_29:
        v12 = v36;
        goto LABEL_30;
      }
    }
    v37 = 0;
    goto LABEL_38;
  }
  v36 = 0;
LABEL_30:
  if ((*((_BYTE *)this + 4) & 0xE) == 6)
  {
    if (v13 < v23)
      memset_pattern16((void *)(v12 + 8 * v17), &memset_pattern_99, 8 * (v23 + ~v13) + 8);
  }
  else if (v13 < v23)
  {
    bzero((void *)(v12 + 8 * v17), 8 * (v23 + ~v13) + 8);
    if (v36)
      goto LABEL_34;
LABEL_50:
    __dmb(0xAu);
    if (v23 >= 0x10000001)
    {
      __break(0xC471u);
      JUMPOUT(0x198980A78);
    }
    *(_DWORD *)(v12 - 4) = v23;
    goto LABEL_37;
  }
  if (!v36)
    goto LABEL_50;
LABEL_34:
  if (v23 >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x198980A10);
  }
  *(_DWORD *)(v12 - 4) = v23;
  __dmb(0xAu);
  *((_QWORD *)this + 1) = v36;
  if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
LABEL_37:
  v37 = 1;
LABEL_38:
  if (v52)
    JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v51 + 192, 0);
  if (!v37)
    return 0;
  v12 = *((_QWORD *)this + 1);
LABEL_42:
  if (*(_DWORD *)(v12 - 8) < v9)
    *(_DWORD *)(v12 - 8) = v9;
  return 1;
}

uint64_t JSC::JSArray::appendMemcpy(JSC::JSArray *this, JSC::JSGlobalObject *a2, JSC::VM *a3, uint64_t a4, JSC::JSArray *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v10;
  int v12;
  unsigned int v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  __int128 *v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  const WTF::String *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  JSC::VM *v95;

  v95 = a3;
  if (a5 == this)
    return 0;
  v10 = *((unsigned __int8 *)this + 4);
  if ((v10 & 0xEu) > 9)
    return 0;
  v12 = *((unsigned __int8 *)a5 + 4);
  if ((v12 & 0xEu) > 9)
    return 0;
  v13 = a4;
  if (*((_BYTE *)this + 5) != 36
    || (v16 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30)) == 0
    || (v17 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v16 != *(_QWORD *)(v17 + 672))
    || ((v18 = *(_QWORD *)(v17 + 2304), (v18 & 1) != 0)
      ? (v19 = (v18 >> 1) & 3)
      : (v19 = *(unsigned __int8 *)(v18 + 4)),
        v19 == 2))
  {
    if (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) == 36)
    {
      v20 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
      v21 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
      v22 = (v21 >> 1) & 7;
      if ((v21 & 0x10) != 0)
        v22 = ((v21 & 0xE) + 10) >> 1;
      v23 = *(_DWORD *)(v20 + 4 * v22 + 852);
      if (v23)
        v24 = 16 * (v23 & 0xFFFFFFFE);
      else
        v24 = 0;
      if (v24 == 16 * (*(_DWORD *)this & 0xFFFFFFFE))
      {
        v25 = *(_QWORD *)(v20 + 2304);
        v26 = (v25 & 1) != 0 ? (v25 >> 1) & 3 : *(unsigned __int8 *)(v25 + 4);
        if (v26 != 2)
          goto LABEL_35;
      }
    }
    else
    {
      LOBYTE(v21) = *(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
    }
    if ((v21 & 0x20) != 0)
      return 0;
    v27 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
    if (v27)
    {
      if (*(_BYTE *)(*(_QWORD *)(v27 + 2048) + 4) == 2)
        return 0;
    }
    v28 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
    if (!v28)
      v28 = *((_QWORD *)this + 2);
    if ((v28 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v28 + 5) >= 0x17u)
    {
      while ((*(_BYTE *)(v28 + 4) & 0xE) == 0)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 8) & 0x20) != 0)
          break;
        v29 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x28);
        if (v29)
        {
          if (*(_BYTE *)(*(_QWORD *)(v29 + 2048) + 4) == 2)
            break;
        }
        v30 = *(_QWORD *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x30);
        if (!v30)
          v30 = *(_QWORD *)(v28 + 16);
        if ((v30 & 0xFFFE000000000002) == 0)
        {
          v28 = v30;
          if (*(unsigned __int8 *)(v30 + 5) > 0x16u)
            continue;
        }
        goto LABEL_35;
      }
      return 0;
    }
  }
LABEL_35:
  if (*((_BYTE *)a5 + 5) == 36)
  {
    v31 = *(_QWORD *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x30);
    if (v31)
    {
      v32 = *(_QWORD *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x28);
      if (v31 == *(_QWORD *)(v32 + 672))
      {
        v33 = *(_QWORD *)(v32 + 2304);
        v34 = (v33 & 1) != 0 ? (v33 >> 1) & 3 : *(unsigned __int8 *)(v33 + 4);
        if (v34 != 2)
          goto LABEL_66;
      }
    }
  }
  if (*(_BYTE *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 9) == 36)
  {
    v35 = *(_QWORD *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x28);
    v36 = *(unsigned __int8 *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 8);
    v37 = (v36 >> 1) & 7;
    if ((v36 & 0x10) != 0)
      v37 = ((v36 & 0xE) + 10) >> 1;
    v38 = *(_DWORD *)(v35 + 4 * v37 + 852);
    if (v38)
      v39 = 16 * (v38 & 0xFFFFFFFE);
    else
      v39 = 0;
    if (v39 == 16 * (*(_DWORD *)a5 & 0xFFFFFFFE))
    {
      v40 = *(_QWORD *)(v35 + 2304);
      v41 = (v40 & 1) != 0 ? (v40 >> 1) & 3 : *(unsigned __int8 *)(v40 + 4);
      if (v41 != 2)
        goto LABEL_66;
    }
  }
  else
  {
    LOBYTE(v36) = *(_BYTE *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 8);
  }
  if ((v36 & 0x20) != 0)
    return 0;
  v42 = *(_QWORD *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x28);
  if (v42)
  {
    if (*(_BYTE *)(*(_QWORD *)(v42 + 2048) + 4) == 2)
      return 0;
  }
  v43 = *(_QWORD *)(16 * (*(_DWORD *)a5 & 0xFFFFFFFE) + 0x30);
  if (!v43)
    v43 = *((_QWORD *)a5 + 2);
  if ((v43 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v43 + 5) >= 0x17u)
  {
    while ((*(_BYTE *)(v43 + 4) & 0xE) == 0)
    {
      if ((*(_BYTE *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 8) & 0x20) != 0)
        break;
      v44 = *(_QWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x28);
      if (v44)
      {
        if (*(_BYTE *)(*(_QWORD *)(v44 + 2048) + 4) == 2)
          break;
      }
      v45 = *(_QWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x30);
      if (!v45)
        v45 = *(_QWORD *)(v43 + 16);
      if ((v45 & 0xFFFE000000000002) == 0)
      {
        v43 = v45;
        if (*(unsigned __int8 *)(v45 + 5) > 0x16u)
          continue;
      }
      goto LABEL_66;
    }
    return 0;
  }
LABEL_66:
  v46 = v10 & 0xF;
  v47 = v12 & 0xF;
  if ((v10 & v12 & 1) != 0)
  {
    if (v46 == 3)
    {
      v48 = v12 & 0xF;
      goto LABEL_106;
    }
    if (v47 == 3)
    {
      v48 = v10 & 0xF;
    }
    else
    {
      if (v46 == 9 || v46 == 5)
      {
        if (v47 == 5)
        {
LABEL_78:
          if ((*((_BYTE *)a5 + 4) & 0xE) != 0)
            v49 = *(_DWORD *)(*((_QWORD *)a5 + 1) - 8);
          else
            v49 = 0;
          v50 = v13 + v49;
          if (__CFADD__(v13, v49))
          {
            v70 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v70 = 0x2800000002;
            *(_QWORD *)(v70 + 8) = "Length exceeded the maximum array length";
            *(_DWORD *)(v70 + 16) = 4;
            v94 = (WTF::StringImpl *)v70;
            v72 = JSC::createRangeError((unint64_t)a2, &v94, v71);
            JSC::VM::throwException(a3, a2, v72, v73, v74, v75, v76, v77);
            v85 = v94;
            v94 = 0;
            if (v85)
            {
              if (*(_DWORD *)v85 == 2)
              {
                WTF::StringImpl::~StringImpl(v85, v78, v79, v80, v81, v82, v83, v84);
                WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
              }
              else
              {
                *(_DWORD *)v85 -= 2;
              }
            }
          }
          else if (v50 >> 5 <= 0xC34)
          {
            v51 = *((_QWORD *)this + 1);
            if (*(_DWORD *)(v51 - 4) >= v50 && (*((_BYTE *)this + 4) & 0x10) == 0)
            {
LABEL_86:
              if (*(_DWORD *)(v51 - 8) < v50)
                *(_DWORD *)(v51 - 8) = v50;
              if (v47 == 3)
              {
                v64 = *((_QWORD *)this + 1);
                if (v46 == 7)
                {
                  if (v50 > v13)
                    memset_pattern16((void *)(v64 + 8 * v13), &memset_pattern_268, 8 * (v49 - 1) + 8);
                }
                else if (v50 > v13)
                {
                  bzero((void *)(v64 + 8 * v13), 8 * (v49 - 1) + 8);
                }
                return 1;
              }
              v52 = (__int128 *)*((_QWORD *)a5 + 1);
              v53 = (_OWORD *)(*((_QWORD *)this + 1) + 8 * v13);
              if (v46 != 7)
              {
                if (v49 > 0x1E)
                {
                  v56 = (_OWORD *)((char *)v53 + 8 * v49);
                  v57 = (_OWORD *)((char *)v53 + ((8 * v49) & 0x7FFFFFFE0));
                  while (v53 != v57)
                  {
                    v58 = *v52;
                    v59 = v52[1];
                    v52 += 2;
                    *v53 = v58;
                    v53[1] = v59;
                    v53 += 2;
                  }
                  while (v53 != v56)
                  {
                    v60 = *(_QWORD *)v52;
                    v52 = (__int128 *)((char *)v52 + 8);
                    *(_QWORD *)v53 = v60;
                    v53 = (_OWORD *)((char *)v53 + 8);
                  }
                }
                else if (v49)
                {
                  v54 = v49;
                  do
                  {
                    v55 = *(_QWORD *)v52;
                    v52 = (__int128 *)((char *)v52 + 8);
                    *(_QWORD *)v53 = v55;
                    v53 = (_OWORD *)((char *)v53 + 8);
                    --v54;
                  }
                  while (v54);
                }
                if (*((_DWORD *)a3 + 190) >= *((unsigned __int8 *)this + 7))
                  JSC::Heap::writeBarrierSlowPath((uint64_t)a3 + 192, (unint64_t)this);
                return 1;
              }
              if (v49 > 0x1E)
              {
                v65 = (_OWORD *)((char *)v53 + 8 * v49);
                v66 = (_OWORD *)((char *)v53 + ((8 * v49) & 0x7FFFFFFE0));
                while (v53 != v66)
                {
                  v67 = *v52;
                  v68 = v52[1];
                  v52 += 2;
                  *v53 = v67;
                  v53[1] = v68;
                  v53 += 2;
                }
                while (v53 != v65)
                {
                  v69 = *(_QWORD *)v52;
                  v52 = (__int128 *)((char *)v52 + 8);
                  *(_QWORD *)v53 = v69;
                  v53 = (_OWORD *)((char *)v53 + 8);
                }
              }
              else if (v49)
              {
                v62 = v49;
                result = 1;
                do
                {
                  v63 = *(_QWORD *)v52;
                  v52 = (__int128 *)((char *)v52 + 8);
                  *(_QWORD *)v53 = v63;
                  v53 = (_OWORD *)((char *)v53 + 8);
                  --v62;
                }
                while (v62);
                return result;
              }
              return 1;
            }
            if (JSC::JSObject::ensureLengthSlow(this, a3, v13 + v49, a4, (uint64_t)a5, a6, a7, a8, a9))
            {
              v51 = *((_QWORD *)this + 1);
              goto LABEL_86;
            }
            JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)&v95);
          }
          return 0;
        }
        v48 = v12 & 0xF;
        if (v47 == 9)
        {
LABEL_77:
          if (v46 != v48)
            return 0;
          goto LABEL_78;
        }
      }
      if (v46 == v47)
        v48 = v46;
      else
        v48 = 0;
    }
  }
  else
  {
    v48 = 0;
  }
  if (v46 != 3)
    goto LABEL_77;
LABEL_106:
  result = 1;
  switch(v48)
  {
    case 0:
      return 0;
    case 5:
      JSC::JSObject::convertUndecidedToInt32(this, a3, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8, a9.n128_f64[0]);
      goto LABEL_78;
    case 7:
      JSC::JSObject::convertUndecidedToDouble(this, a3, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8, a9.n128_f64[0]);
      goto LABEL_78;
    case 9:
      JSC::JSObject::convertUndecidedToContiguous(this, a3, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8, a9.n128_f64[0]);
      goto LABEL_78;
    default:
      return result;
  }
  return result;
}

uint64_t JSC::JSArray::pop(JSC::JSArray *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v11;
  char v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _DWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  const char *v25;
  JSC::JSGlobalObject *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  __n128 v45;
  uint64_t v46;
  JSC::VM *v47;

  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v47 = v11;
  v12 = *((_BYTE *)this + 4);
  if ((v12 & 0x10) != 0)
  {
    JSC::JSObject::convertFromCopyOnWrite(this, v11, a3, a4, a5, a6, a7, a8, a9);
    v12 = *((_BYTE *)this + 4);
  }
  v13 = (_DWORD *)*((_QWORD *)this + 1);
  if ((v12 & 0xF) != 9)
  {
    result = 10;
    switch(v12 & 0xF)
    {
      case 1:
        return result;
      case 3:
        v24 = *(v13 - 2);
        if (!v24)
          return 10;
        LODWORD(v15) = v24 - 1;
        goto LABEL_30;
      case 5:
        goto LABEL_4;
      case 7:
        v17 = *(v13 - 2);
        if (!v17)
          return 10;
        v18 = (v17 - 1);
        if (v18 >= *(v13 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x198981318);
        }
        v19 = *(_QWORD *)&v13[2 * v18];
        *(_QWORD *)&v13[2 * v18] = 0x7FF8000000000000;
        *(v13 - 2) = v18;
        return v19 + 0x2000000000000;
      case 0xB:
      case 0xD:
        v20 = *(v13 - 2);
        if (!v20)
        {
          if ((v12 & 0xEu) - 10 <= 3 && *(_QWORD *)v13 && (*(_BYTE *)(*(_QWORD *)v13 + 16) & 2) != 0)
          {
            v25 = "Attempted to assign to readonly property.";
            v26 = a2;
            v27 = 42;
            goto LABEL_38;
          }
          return 10;
        }
        LODWORD(v15) = v20 - 1;
        if (v15 >= *(v13 - 1))
          goto LABEL_30;
        v21 = &v13[2 * v15];
        v23 = *((_QWORD *)v21 + 2);
        v22 = v21 + 4;
        result = v23;
        if (!v23)
          goto LABEL_30;
        --v13[3];
        *v22 = 0;
        if ((v12 & 0xEu) - 10 <= 3 && *(_QWORD *)v13 && (*(_BYTE *)(*(_QWORD *)v13 + 16) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1989812E8);
        }
        return result;
      default:
        __break(0xC471u);
        JUMPOUT(0x198981400);
    }
    goto LABEL_8;
  }
LABEL_4:
  v14 = *(v13 - 2);
  if (!v14)
    return 10;
  v15 = (v14 - 1);
  if (v15 >= *(v13 - 1))
  {
    __break(0xC471u);
    JUMPOUT(0x198981274);
  }
  result = *(_QWORD *)&v13[2 * v15];
  if (result)
  {
    *(_QWORD *)&v13[2 * v15] = 0;
LABEL_8:
    *(v13 - 2) = v15;
    return result;
  }
LABEL_30:
  if ((v12 & 0xE) != 0)
    v28 = v15;
  else
    v28 = 0xFFFFFFFFLL;
  v46 = JSC::JSObject::get(this, a2, v28);
  if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v29, v30, v31, v32, v33, v34, v35))
  {
    v44 = JSC::JSObject::deletePropertyByIndex(this, a2, (JSC::JSGlobalObject *)v28, v31, v32, v33, v34, v35, v36);
    if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, v37, v38, v39, v40, v41, v42, v43))
    {
      if ((v44 & 1) != 0)
      {
        JSC::JSArray::setLength(this, (JSC::VM **)a2, v28, 1, v40, v41, v42, v43, v45);
        return v46;
      }
      v25 = "Unable to delete property.";
      v26 = a2;
      v27 = 27;
LABEL_38:
      JSC::throwTypeError((unint64_t)v26, &v47, (uint64_t)v25, v27);
      return 10;
    }
  }
  return 0;
}

void JSC::JSArray::push(unint64_t a1, JSC::VM **a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  double v12;
  JSC::VM *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const WTF::String *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::AtomStringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;

  a9.n128_f64[0] = (double)(int)a3;
  if (a3 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v12 = a3 - 0x2000000000000;
  else
    v12 = (double)(int)a3;
  if (a3 >> 49)
  {
    if (a3 < 0xFFFE000000000000)
    {
      while (2)
      {
        v13 = a2[7];
        v14 = *(_BYTE *)(a1 + 4);
        if ((v14 & 0x10) != 0)
        {
          JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)a1, a2[7], a3, a4, a5, a6, a7, a8, a9);
          v14 = *(_BYTE *)(a1 + 4);
        }
        v15 = *(_QWORD *)(a1 + 8);
        switch(v14 & 0x1F)
        {
          case 1:
            JSC::JSObject::createInitialUndecided((JSC::JSObject *)a1, v13, 0, a9);
            goto LABEL_64;
          case 3:
LABEL_64:
            JSC::JSObject::convertUndecidedForValue(a1, v13, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
            continue;
          case 5:
            JSC::JSObject::convertInt32ForValue((JSC::JSObject *)a1, v13, a3, a4, a5, a6, a7, a8);
            continue;
          case 7:
LABEL_18:
            v17 = *(unsigned int *)(v15 - 8);
            if (v17 < *(_DWORD *)(v15 - 4))
            {
              *(double *)(v15 + 8 * v17) = v12;
LABEL_16:
              *(_DWORD *)(v15 - 8) = v17 + 1;
            }
            else
            {
              if ((_DWORD)v17 == -1)
                goto LABEL_26;
              JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)6>((JSC::JSObject *)a1, (JSC::VM *)a2, v17, a3, a5, a6, a7, a8, a9);
            }
            break;
          case 9:
            goto LABEL_9;
          case 0xB:
            goto LABEL_49;
          case 0xD:
            goto LABEL_43;
          default:
            goto LABEL_54;
        }
        break;
      }
    }
    else
    {
      while (2)
      {
        v13 = a2[7];
        v14 = *(_BYTE *)(a1 + 4);
        if ((v14 & 0x10) != 0)
        {
          JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)a1, a2[7], a3, a4, a5, a6, a7, a8, a9);
          v14 = *(_BYTE *)(a1 + 4);
        }
        v15 = *(_QWORD *)(a1 + 8);
        switch(v14 & 0x1F)
        {
          case 1:
            JSC::JSObject::createInitialUndecided((JSC::JSObject *)a1, v13, 0, a9);
            goto LABEL_42;
          case 3:
LABEL_42:
            JSC::JSObject::convertUndecidedForValue(a1, v13, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
            continue;
          case 5:
            v17 = *(unsigned int *)(v15 - 8);
            if (v17 < *(_DWORD *)(v15 - 4))
            {
              *(_QWORD *)(v15 + 8 * v17) = a3;
              goto LABEL_16;
            }
            if ((_DWORD)v17 == -1)
              goto LABEL_26;
            JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)4>((JSC::JSObject *)a1, (unint64_t)a2, v17, a3, a5, a6, a7, a8, (int32x4_t)a9);
            break;
          case 7:
            goto LABEL_18;
          case 9:
            goto LABEL_9;
          case 0xB:
            goto LABEL_49;
          case 0xD:
            goto LABEL_43;
          default:
            goto LABEL_54;
        }
        break;
      }
    }
  }
  else
  {
    while (2)
    {
      v13 = a2[7];
      v14 = *(_BYTE *)(a1 + 4);
      if ((v14 & 0x10) != 0)
      {
        JSC::JSObject::convertFromCopyOnWrite((JSC::JSObject *)a1, a2[7], a3, a4, a5, a6, a7, a8, a9);
        v14 = *(_BYTE *)(a1 + 4);
      }
      v15 = *(_QWORD *)(a1 + 8);
      switch(v14 & 0x1F)
      {
        case 1:
          JSC::JSObject::createInitialUndecided((JSC::JSObject *)a1, v13, 0, a9);
          goto LABEL_66;
        case 3:
LABEL_66:
          JSC::JSObject::convertUndecidedForValue(a1, v13, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
          continue;
        case 5:
          JSC::JSObject::convertInt32ForValue((JSC::JSObject *)a1, v13, a3, a4, a5, a6, a7, a8);
          continue;
        case 7:
          JSC::JSObject::convertDoubleToContiguous((JSC::JSObject *)a1, v13, a3, a4, a5, a6, a7, a8, a9.n128_f64[0]);
          continue;
        case 9:
LABEL_9:
          v16 = *(unsigned int *)(v15 - 8);
          if (v16 < *(_DWORD *)(v15 - 4))
          {
            *(_QWORD *)(v15 + 8 * v16) = a3;
            *(_DWORD *)(v15 - 8) = v16 + 1;
            if (a3
              && (a3 & 0xFFFE000000000002) == 0
              && *((_DWORD *)v13 + 190) >= *(unsigned __int8 *)(a1 + 7))
            {
              JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, a1);
            }
            return;
          }
          if ((_DWORD)v16 != -1)
          {
            JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes<(unsigned char)8>((JSC::JSObject *)a1, (JSC::VM *)a2, v16, a3, a5, a6, a7, a8, a9);
            return;
          }
LABEL_26:
          (*(void (**)(unint64_t, JSC::VM **))(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                 + 0x4C)
                                                               + 0x50))(a1, a2);
          goto LABEL_27;
        case 0xB:
LABEL_49:
          v51 = v15;
          goto LABEL_50;
        case 0xD:
LABEL_43:
          v51 = v15;
          if ((v14 & 0xE) != 0)
            v42 = *(unsigned int *)(v15 - 8);
          else
            v42 = 0;
          LOBYTE(v52) = 0;
          v48 = JSC::JSObject::attemptToInterceptPutByIndexOnHole((const WTF::StringImpl *)a1, (unint64_t)a2, v42, a3, 1, &v52, a7, a8);
          if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13, v43, v44, v45, v46, v47, a7, a8))
            return;
          if (v48)
          {
            if ((_DWORD)v42 != -1)
              JSC::JSArray::setLength((JSC::JSArray *)a1, a2, (v42 + 1), 1, v46, v47, a7, a8, v49);
          }
          else
          {
LABEL_50:
            v50 = *(unsigned int *)(v51 - 8);
            if (v50 >= *(_DWORD *)(v51 - 4))
            {
              if ((_DWORD)v50 == -1)
              {
                (*(void (**)(unint64_t, JSC::VM **))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x50))(a1, a2);
LABEL_27:
                if (!*((_QWORD *)v13 + 2))
                {
                  v18 = WTF::fastCompactMalloc((WTF *)0x20);
                  *(_QWORD *)v18 = 0x2800000002;
                  *(_QWORD *)(v18 + 8) = "Length exceeded the maximum array length";
                  *(_DWORD *)(v18 + 16) = 4;
                  v52 = (WTF::StringImpl *)v18;
                  v20 = JSC::createRangeError((unint64_t)a2, &v52, v19);
                  JSC::VM::throwException(v13, (JSC::JSGlobalObject *)a2, v20, v21, v22, v23, v24, v25);
                  v33 = v52;
                  v52 = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v33, v26, v27, v28, v29, v30, v31, v32);
                      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
                    }
                    else
                    {
                      *(_DWORD *)v33 -= 2;
                    }
                  }
                }
              }
              else
              {
                JSC::JSObject::putByIndexBeyondVectorLengthWithArrayStorage((unsigned int *)a1, (JSC::VM *)a2, *(_DWORD *)(v51 - 8), a3, 1, v51, a7, a8);
              }
            }
            else
            {
              *(_QWORD *)(v51 + 8 * v50 + 16) = a3;
              if (a3
                && (a3 & 0xFFFE000000000002) == 0
                && *((_DWORD *)v13 + 190) >= *(unsigned __int8 *)(a1 + 7))
              {
                JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, a1);
              }
              *(_DWORD *)(v51 - 8) = v50 + 1;
              ++*(_DWORD *)(v51 + 12);
            }
          }
          break;
        default:
LABEL_54:
          __break(0xC471u);
          JUMPOUT(0x1989818F0);
      }
      break;
    }
  }
}

uint64_t JSC::Structure::holesMustForwardToPrototype(JSC::Structure *this, JSC::JSObject *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  JSC::Structure *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  if (*((_BYTE *)this + 9) == 36)
  {
    v2 = *((_QWORD *)this + 5);
    v3 = *((unsigned __int8 *)this + 8);
    v4 = (v3 >> 1) & 7;
    if ((v3 & 0x10) != 0)
      v4 = ((v3 & 0xE) + 10) >> 1;
    v5 = *(_DWORD *)(v2 + 4 * v4 + 852);
    if (v5)
      v6 = (JSC::Structure *)(16 * (v5 & 0xFFFFFFFE));
    else
      v6 = 0;
    if (v6 == this)
    {
      v7 = *(_QWORD *)(v2 + 2304);
      v8 = (v7 & 1) != 0 ? (v7 >> 1) & 3 : *(unsigned __int8 *)(v7 + 4);
      if (v8 != 2)
        return 0;
    }
  }
  else
  {
    LOBYTE(v3) = *((_BYTE *)this + 8);
  }
  if ((v3 & 0x20) != 0)
    return 1;
  v9 = *((_QWORD *)this + 5);
  if (v9 && *(_BYTE *)(*(_QWORD *)(v9 + 2048) + 4) == 2)
    return 1;
  else
    return JSC::Structure::holesMustForwardToPrototypeSlow(this, a2);
}

unint64_t JSC::JSArray::tryCreateUninitializedRestricted(uint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t result;
  unint64_t v22;
  unsigned int *v23;
  _DWORD *v24;
  void *v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;

  if (a3 > 0x10000000)
    return 0;
  v8 = a3;
  v10 = *a1;
  v11 = *(unsigned __int16 *)(a2 + 24);
  if (v11 == 65534
    || (v11 == 0xFFFF ? (v12 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84)) : (v12 = *(unsigned __int16 *)(a2 + 24)),
        v12 < 64))
  {
    v13 = 0;
  }
  else if ((v12 - 63) >= 5)
  {
    v27 = (v12 - 64) | ((v12 - 64) >> 1) | (((v12 - 64) | ((v12 - 64) >> 1)) >> 2);
    v28 = v27 | (v27 >> 4) | ((v27 | (v27 >> 4)) >> 8);
    v13 = (v28 | HIWORD(v28)) + 1;
  }
  else
  {
    v13 = 4;
  }
  v14 = *(_BYTE *)(a2 + 8) & 0xE;
  if (v14 <= 9)
  {
    if (v11 == 65534)
      goto LABEL_12;
    if (v11 == 0xFFFF)
      v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
    if (v11 < 64)
    {
LABEL_12:
      v15 = 8;
    }
    else if ((v11 - 63) >= 5)
    {
      v29 = (v11 - 64) | ((v11 - 64) >> 1) | (((v11 - 64) | ((v11 - 64) >> 1)) >> 2);
      v30 = v29 | (v29 >> 4) | ((v29 | (v29 >> 4)) >> 8);
      v15 = 8 * ((v30 | HIWORD(v30)) + 1) + 8;
    }
    else
    {
      v15 = 40;
    }
    if (a3 <= 3)
      v16 = 3;
    else
      v16 = a3;
    if (!(_DWORD)a3)
      v16 = 5;
    v17 = v15 + 8 * v16;
    if (v17 > 0x50)
    {
      if (v17 <= 0x1F60)
        v17 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v17 + 15) >> 2) & 0xFFFFFFFFCLL));
    }
    else
    {
      v17 = (v17 + 15) & 0x3FFFFFFFF0;
    }
    v18 = v17 - v15;
    a3 = ((v17 - v15) & 0x7FFFFFFF8) + 8 * v13 + 8;
    if (a3 <= 0x1F60
      && (v19 = *(_QWORD *)(v10 + (((((v17 - v15) & 0x7FFFFFFF8) + 8 * v13 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
    {
      v20 = *(unsigned int *)(v19 + 60);
      result = *(_QWORD *)(v19 + 24);
      if (result >= *(_QWORD *)(v19 + 32))
      {
        result = *(_QWORD *)(v19 + 40);
        if ((result & 1) != 0)
        {
          v53 = v13;
          v47 = *(_BYTE *)(a2 + 8) & 0xE;
          v48 = *(_QWORD *)(v10 + (((a3 + 15) >> 1) & 0x1FFFFFFFF8) + 6736);
          v49 = *(unsigned int *)(v19 + 60);
          JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
          v50 = v48;
          v14 = v47;
          v13 = v53;
          result = JSC::LocalAllocator::allocateSlowCase(v50, v10 + 192, v49, 0, 1);
          if (!result)
            return result;
        }
        else
        {
          v43 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v19 + 48);
          *(_QWORD *)(v19 + 32) = result + HIDWORD(v43);
          *(_QWORD *)(v19 + 40) = result + (int)v43;
          *(_QWORD *)(v19 + 24) = result + v20;
        }
      }
      else
      {
        *(_QWORD *)(v19 + 24) = result + v20;
        if (!result)
          return result;
      }
    }
    else
    {
      result = JSC::CompleteSubspace::tryAllocateSlow(v10 + 6648, (JSC *)v10, a3, 0, a5, a6, a7, a8);
      if (!result)
        return result;
    }
    v22 = v18 >> 3;
    if ((v18 >> 3) >= 0x10000001)
    {
      __break(0xC471u);
      JUMPOUT(0x198981F38);
    }
    v23 = (unsigned int *)(result + 8 * v13);
    v24 = v23 + 2;
    *v23 = v8;
    v23[1] = v22;
    if (v14 != 6)
    {
      if (v22 <= v8)
        goto LABEL_29;
      v25 = (void *)(result + 8 * (v13 + (unint64_t)v8) + 8);
      goto LABEL_28;
    }
    if (v22 > v8)
      memset_pattern16((void *)(result + 8 * (v13 + (unint64_t)v8) + 8), &memset_pattern_263, 8 * (v22 + ~v8) + 8);
    goto LABEL_29;
  }
  if (v11 == 65534)
    goto LABEL_51;
  if (v11 == 0xFFFF)
    v11 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
  if (v11 < 64)
  {
LABEL_51:
    v31 = 0;
  }
  else if ((v11 - 63) >= 5)
  {
    v44 = (v11 - 64) | ((v11 - 64) >> 1) | (((v11 - 64) | ((v11 - 64) >> 1)) >> 2);
    v45 = v44 | (v44 >> 4) | ((v44 | (v44 >> 4)) >> 8);
    v31 = (v45 | HIWORD(v45)) + 1;
  }
  else
  {
    v31 = 4;
  }
  if (a3 <= 4)
    v32 = 4;
  else
    v32 = a3;
  v33 = v31 + v32;
  v34 = 8 * (v31 + v32);
  if (v33 > 7)
  {
    if (v33 > 0x3E9)
      v35 = v34 + 24;
    else
      v35 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v34 + 39) >> 2) & 0x7FFFFFFFCLL));
  }
  else
  {
    v35 = (v34 + 39) & 0x1FFFFFFFF0;
  }
  v36 = v35 - 8 * v31 + 0x7FFFFFFE8;
  v37 = (v36 >> 3);
  v38 = v37 + v13;
  v39 = 8 * v38;
  if (v38 <= 0x3E9 && (v40 = *(_QWORD *)(v10 + (((unint64_t)(v39 + 39) >> 1) & 0xFFFFFFFF8) + 6736)) != 0)
  {
    result = *(_QWORD *)(v40 + 24);
    if (result >= *(_QWORD *)(v40 + 32))
    {
      v51 = *(_QWORD *)(v10 + (((unint64_t)(v39 + 39) >> 1) & 0xFFFFFFFF8) + 6736);
      v52 = *(unsigned int *)(v40 + 60);
      result = *(_QWORD *)(v40 + 40);
      if ((result & 1) == 0)
      {
        v46 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v40 + 48);
        *(_QWORD *)(v40 + 32) = result + HIDWORD(v46);
        *(_QWORD *)(v40 + 40) = result + (int)v46;
        *(_QWORD *)(v40 + 24) = result + v52;
        goto LABEL_62;
      }
      JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v51, v10 + 192, v52, 0, 1);
    }
    else
    {
      *(_QWORD *)(v40 + 24) = result + *(unsigned int *)(v40 + 60);
    }
  }
  else
  {
    result = JSC::CompleteSubspace::tryAllocateSlow(v10 + 6648, (JSC *)v10, v39 + 24, 0, a5, a6, a7, a8);
  }
  if (!result)
    return result;
LABEL_62:
  v22 = v36 >> 3;
  if ((v36 >> 3) >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x198982040);
  }
  v41 = result + 8 * v13;
  *(_QWORD *)v41 = v8 | (unint64_t)(v37 << 32);
  *(_QWORD *)(v41 + 8) = 0;
  v24 = (_DWORD *)(v41 + 8);
  *(_DWORD *)(v41 + 16) = 0;
  *(_DWORD *)(v41 + 20) = v8;
  if (v22 > v8)
  {
    v25 = (void *)(result + 8 * (v13 + (unint64_t)v8) + 24);
LABEL_28:
    bzero(v25, 8 * (v22 + ~v8) + 8);
  }
LABEL_29:
  result = *(_QWORD *)(v10 + 37584);
  if (result < *(_QWORD *)(v10 + 37592))
  {
LABEL_30:
    *(_QWORD *)(v10 + 37584) = result + 16;
    goto LABEL_31;
  }
  result = *(_QWORD *)(v10 + 37600);
  if ((result & 1) == 0)
  {
    v42 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v10 + 37608);
    *(_QWORD *)(v10 + 37592) = result + HIDWORD(v42);
    *(_QWORD *)(v10 + 37600) = result + (int)v42;
    goto LABEL_30;
  }
  JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase(v10 + 37560, v10 + 192, 16, 0, 0);
LABEL_31:
  *(_DWORD *)result = 0;
  v26 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v26;
  *(_QWORD *)(result + 8) = v24;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::JSArray::shiftCountWithArrayStorage(JSC::JSArray *this, JSC::VM *a2, uint64_t a3, uint64_t a4, JSC::ArrayStorage *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  uint64_t v11;
  unsigned int v12;
  char v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  unint64_t v35;
  _OWORD *v36;
  char *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  _OWORD *v46;
  uint64_t v47;
  __int128 *v48;
  uint64_t v49;
  char *v50;
  _OWORD *i;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _OWORD *v74;
  _OWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *k;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  _OWORD *v82;
  _OWORD *v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  char *v87;
  _OWORD *j;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _OWORD *v93;
  _OWORD *v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _OWORD *v98;
  _OWORD *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  _OWORD *v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v8 = *((_DWORD *)a5 - 2);
  v9 = v8 - a4;
  if (v8 < a4)
  {
    __break(0xC471u);
    JUMPOUT(0x198982534);
  }
  if (*((_DWORD *)a5 + 3) != v8)
    return 0;
  LODWORD(v11) = a4;
  v12 = a3;
  v16 = (unsigned __int8 *)this + 4;
  v15 = *((_BYTE *)this + 4);
  v17 = v15 & 0xF;
  if (v17 - 10 >= 4)
  {
    if (v17 > 9 || v17 == 2)
    {
      __break(0xC471u);
      JUMPOUT(0x19898268CLL);
    }
    if ((v15 & 0xE) == 0xC)
      return 0;
LABEL_9:
    if (!v8)
      return 1;
    *((_DWORD *)a5 + 3) = v9;
    *((_DWORD *)a5 - 2) = v9;
    v19 = *((_DWORD *)a5 - 1);
    v20 = v19 - a3;
    if (v19 <= a3)
      return 1;
    while (1)
    {
      v21 = *v16;
      if ((v21 & 0x40) != 0)
        break;
      v22 = __ldaxr(v16);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 0x40, v16))
          goto LABEL_16;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_16:
    LODWORD(v23) = v11 + v12;
    if (v11 + v12 > v19)
      v23 = v19;
    else
      v23 = v23;
    if (v11 + v12 > v19)
      v11 = v20;
    else
      v11 = v11;
    if (v8 >= v19)
      v24 = v19;
    else
      v24 = v8;
    v25 = v24 - v23;
    if (v25 <= v12)
    {
      v46 = (_OWORD *)((char *)a5 + 8 * v12 + 16);
      v47 = 8 * (v24 - v23);
      v48 = (__int128 *)((char *)a5 + 8 * v23 + 16);
      if (v23 < v12)
      {
        v50 = (char *)v48 + v47;
        if ((__int128 *)((char *)v48 + v47) <= v46)
        {
          if (v25 > 0x1E)
          {
            v68 = v47 & 0x7FFFFFFE0;
            v69 = (_OWORD *)((char *)v46 + v47);
            v70 = (_OWORD *)((char *)v46 + v68);
            while (v46 != v70)
            {
              v71 = *v48;
              v72 = v48[1];
              v48 += 2;
              *v46 = v71;
              v46[1] = v72;
              v46 += 2;
            }
            while (v46 != v69)
            {
              v73 = *(_QWORD *)v48;
              v48 = (__int128 *)((char *)v48 + 8);
              *(_QWORD *)v46 = v73;
              v46 = (_OWORD *)((char *)v46 + 8);
            }
          }
          else if (v24 != (_DWORD)v23)
          {
            do
            {
              v67 = *(_QWORD *)v48;
              v48 = (__int128 *)((char *)v48 + 8);
              *(_QWORD *)v46 = v67;
              v46 = (_OWORD *)((char *)v46 + 8);
              --v25;
            }
            while (v25);
          }
        }
        else if (v25 <= 0x1E)
        {
          if (v24 != (_DWORD)v23)
          {
            do
            {
              *((_QWORD *)a5 + v12 + v25 + 1) = *((_QWORD *)a5 + v23 + v25 + 1);
              --v25;
            }
            while (v25);
          }
        }
        else
        {
          for (i = (_OWORD *)((char *)v46 + v47);
                i != (_OWORD *)((char *)v46 + (v47 & 0x7FFFFFFE0));
                i = (_OWORD *)((char *)i - 8))
          {
            v52 = *((_QWORD *)v50 - 1);
            v50 -= 8;
            *((_QWORD *)i - 1) = v52;
          }
          while (i != v46)
          {
            v53 = *((_OWORD *)v50 - 2);
            v54 = *((_OWORD *)v50 - 1);
            v50 -= 32;
            *(i - 2) = v53;
            *(i - 1) = v54;
            i -= 2;
          }
        }
      }
      else if (v25 > 0x1E)
      {
        v55 = v47 & 0x7FFFFFFE0;
        v56 = (_OWORD *)((char *)v46 + v47);
        v57 = (_OWORD *)((char *)v46 + v55);
        while (v46 != v57)
        {
          v58 = *v48;
          v59 = v48[1];
          v48 += 2;
          *v46 = v58;
          v46[1] = v59;
          v46 += 2;
        }
        while (v46 != v56)
        {
          v60 = *(_QWORD *)v48;
          v48 = (__int128 *)((char *)v48 + 8);
          *(_QWORD *)v46 = v60;
          v46 = (_OWORD *)((char *)v46 + 8);
        }
      }
      else if (v24 != (_DWORD)v23)
      {
        do
        {
          v49 = *(_QWORD *)v48;
          v48 = (__int128 *)((char *)v48 + 8);
          *(_QWORD *)v46 = v49;
          v46 = (_OWORD *)((char *)v46 + 8);
          --v25;
        }
        while (v25);
      }
      if (v24 - v11 < v24)
        bzero((char *)a5 + 8 * (v24 - v11) + 16, 8 * (v23 + ~v12) + 8);
      if (this)
      {
LABEL_80:
        while (1)
        {
          v61 = *v16;
          if ((v61 & 0xC0) != 0x40)
            break;
          v62 = __ldxr(v16);
          if (v62 == v61)
          {
            if (!__stxr(v61 & 0xBF, v16))
              return 1;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, a3, a4, (uint64_t)a5, a6, a7, a8);
      }
      return 1;
    }
    if (v12)
    {
      if (v23 > v19)
      {
        __break(0xC471u);
        JUMPOUT(0x19898284CLL);
      }
      v74 = (_OWORD *)((char *)a5 + 16);
      v75 = (_OWORD *)((char *)a5 + 8 * v11 + 16);
      v76 = 8 * v12;
      v77 = v12;
      if ((_DWORD)v11)
      {
        v87 = (char *)v74 + v76;
        if ((_OWORD *)((char *)v74 + v76) <= v75)
        {
          if (v12 > 0x1E)
          {
            v103 = v76 & 0x7FFFFFFE0;
            v104 = (_OWORD *)((char *)v75 + v76);
            v105 = (_OWORD *)((char *)v75 + v103);
            while (v75 != v105)
            {
              v106 = *v74;
              v107 = v74[1];
              v74 += 2;
              *v75 = v106;
              v75[1] = v107;
              v75 += 2;
            }
            while (v75 != v104)
            {
              v108 = *(_QWORD *)v74;
              v74 = (_OWORD *)((char *)v74 + 8);
              *(_QWORD *)v75 = v108;
              v75 = (_OWORD *)((char *)v75 + 8);
            }
          }
          else
          {
            do
            {
              *((_QWORD *)v74 + v11) = *(_QWORD *)v74;
              v74 = (_OWORD *)((char *)v74 + 8);
              --v77;
            }
            while (v77);
          }
        }
        else if (v12 <= 0x1E)
        {
          do
          {
            *(_QWORD *)((char *)a5 + 8 * v11 + v76 + 8) = *(_QWORD *)((char *)a5 + v76 + 8);
            v76 -= 8;
          }
          while (v76);
        }
        else
        {
          for (j = (_OWORD *)((char *)v75 + v76);
                j != (_OWORD *)((char *)v75 + (v76 & 0x7FFFFFFE0));
                j = (_OWORD *)((char *)j - 8))
          {
            v89 = *((_QWORD *)v87 - 1);
            v87 -= 8;
            *((_QWORD *)j - 1) = v89;
          }
          while (j != v75)
          {
            v90 = *((_OWORD *)v87 - 2);
            v91 = *((_OWORD *)v87 - 1);
            v87 -= 32;
            *(j - 2) = v90;
            *(j - 1) = v91;
            j -= 2;
          }
        }
      }
      else if (v12 > 0x1E)
      {
        v92 = v76 & 0x7FFFFFFE0;
        v93 = (_OWORD *)((char *)v75 + v76);
        v94 = (_OWORD *)((char *)v75 + v92);
        while (v75 != v94)
        {
          v95 = *v74;
          v96 = v74[1];
          v74 += 2;
          *v75 = v95;
          v75[1] = v96;
          v75 += 2;
        }
        while (v75 != v93)
        {
          v97 = *(_QWORD *)v74;
          v74 = (_OWORD *)((char *)v74 + 8);
          *(_QWORD *)v75 = v97;
          v75 = (_OWORD *)((char *)v75 + 8);
        }
      }
      else
      {
        do
        {
          *((_QWORD *)v74 + v11) = *(_QWORD *)v74;
          v74 = (_OWORD *)((char *)v74 + 8);
          --v77;
        }
        while (v77);
      }
    }
    v26 = *(_DWORD *)this & 0xFFFFFFFE;
    v27 = 16 * v26;
    v28 = (unsigned __int8 *)((32 * (v26 >> 1)) | 0xF);
    LODWORD(v26) = __ldaxr(v28);
    if ((_DWORD)v26)
    {
      __clrex();
    }
    else if (!__stxr(1u, v28))
    {
      goto LABEL_30;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v28);
LABEL_30:
    v29 = *((_QWORD *)this + 1);
    v30 = *(unsigned __int16 *)(v27 + 24);
    if (v30 == 65534)
      goto LABEL_34;
    if (v30 == 0xFFFF)
      v30 = *(_DWORD *)(*(_QWORD *)(v27 + 64) + 84);
    if (v30 < 64)
    {
LABEL_34:
      v31 = 0;
    }
    else if ((v30 - 63) >= 5)
    {
      v44 = (v30 - 64) | ((v30 - 64) >> 1) | (((v30 - 64) | ((v30 - 64) >> 1)) >> 2);
      v45 = v44 | (v44 >> 4) | ((v44 | (v44 >> 4)) >> 8);
      v31 = (v45 | HIWORD(v45)) + 1;
    }
    else
    {
      v31 = 4;
    }
    v32 = v29 - 8;
    v33 = (__int128 *)(v29 - 8 - 8 * v31);
    v34 = 8 * v31;
    v35 = 8 * v31 + 24;
    v36 = (__int128 *)((char *)v33 + 8 * v11);
    if ((_DWORD)v11)
    {
      v37 = (char *)v33 + v35;
      if ((__int128 *)((char *)v33 + v35) <= v36)
      {
        if (v31 > 0x1B)
        {
          v98 = (_OWORD *)((char *)v36 + v35);
          v99 = (_OWORD *)((char *)v36 + (v35 & 0xFFFFFFFE0));
          while (v36 != v99)
          {
            v100 = *v33;
            v101 = v33[1];
            v33 += 2;
            *v36 = v100;
            v36[1] = v101;
            v36 += 2;
          }
          while (v36 != v98)
          {
            v102 = *(_QWORD *)v33;
            v33 = (__int128 *)((char *)v33 + 8);
            *(_QWORD *)v36 = v102;
            v36 = (_OWORD *)((char *)v36 + 8);
          }
        }
        else
        {
          v65 = -8 - v34;
          do
          {
            *(_QWORD *)(v29 + 8 * v11 + v65) = *(_QWORD *)(v29 + v65);
            v65 += 8;
          }
          while (v65 != 16);
        }
      }
      else if (v31 > 0x1B)
      {
        for (k = (_OWORD *)((char *)v36 + v35);
              k != (_OWORD *)((char *)v36 + (v35 & 0xFFFFFFFE0));
              k = (_OWORD *)((char *)k - 8))
        {
          v79 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *((_QWORD *)k - 1) = v79;
        }
        while (k != v36)
        {
          v80 = *((_OWORD *)v37 - 2);
          v81 = *((_OWORD *)v37 - 1);
          v37 -= 32;
          *(k - 2) = v80;
          *(k - 1) = v81;
          k -= 2;
        }
      }
      else
      {
        v38 = v35 >> 3;
        v39 = (_QWORD *)(v29 + 8);
        do
        {
          v39[v11] = *v39;
          --v39;
          --v38;
        }
        while (v38);
      }
    }
    else if (v31 > 0x1B)
    {
      v82 = (_OWORD *)((char *)v36 + v35);
      v83 = (_OWORD *)((char *)v36 + (v35 & 0xFFFFFFFE0));
      while (v36 != v83)
      {
        v84 = *v33;
        v85 = v33[1];
        v33 += 2;
        *v36 = v84;
        v36[1] = v85;
        v36 += 2;
      }
      while (v36 != v82)
      {
        v86 = *(_QWORD *)v33;
        v33 = (__int128 *)((char *)v33 + 8);
        *(_QWORD *)v36 = v86;
        v36 = (_OWORD *)((char *)v36 + 8);
      }
    }
    else
    {
      v64 = -8 - v34;
      do
      {
        *(_QWORD *)(v29 + 8 * v11 + v64) = *(_QWORD *)(v29 + v64);
        v64 += 8;
      }
      while (v64 != 16);
    }
    v40 = v32 + 8 * v11;
    *(_DWORD *)(v40 + 16) += v11;
    if (v19 - v11 >= 0x10000001)
    {
      __break(0xC471u);
      JUMPOUT(0x198982554);
    }
    v41 = v40 + 8;
    *(_DWORD *)(v40 + 4) = v19 - v11;
    v42 = (char *)a2 + 192;
    if (*((_BYTE *)a2 + 755))
    {
      __dmb(0xAu);
      *((_QWORD *)this + 1) = v41;
      if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v42, (unint64_t)this);
      __dmb(0xAu);
    }
    else
    {
      *((_QWORD *)this + 1) = v41;
      if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v42, (unint64_t)this);
    }
    v43 = __ldxr(v28);
    if (v43 == 1)
    {
      if (!__stlxr(0, v28))
        goto LABEL_80;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v28, 0, a3, a4, (uint64_t)a5, a6, a7, a8);
    goto LABEL_80;
  }
  if ((v15 & 0xE) != 0xC && **((_QWORD **)this + 1) == 0)
    goto LABEL_9;
  return 0;
}

uint64_t JSC::JSArray::unshiftCountWithArrayStorage(JSC::JSArray *this, JSC::JSGlobalObject *a2, unsigned int a3, uint64_t a4, JSC::ArrayStorage *a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  char *v10;
  unsigned int v11;
  unsigned int v14;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  int v38;
  char *v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *i;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *j;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  uint64_t v85;

  v9 = *((_QWORD *)a2 + 7);
  v85 = v9;
  v10 = (char *)a5 - 8;
  v11 = *((_DWORD *)a5 - 2);
  if (v11 < a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198982CC0);
  }
  if (*((_DWORD *)a5 + 3) != v11)
    return 0;
  v14 = a3;
  if (*(_QWORD *)a5)
  {
    if ((*(_BYTE *)(*(_QWORD *)a5 + 16) & 1) != 0)
      return 0;
  }
  v17 = (unsigned __int8 *)this + 4;
  if ((*((_BYTE *)this + 4) & 0xE) == 0xC)
    return 0;
  if (a3)
    v18 = a3 < v11 >> 1;
  else
    v18 = 1;
  v19 = *((_DWORD *)a5 - 1);
  ++*(_DWORD *)(v9 + 916);
  while (1)
  {
    v20 = *v17;
    if ((v20 & 0x40) != 0)
      break;
    v21 = __ldaxr(v17);
    if (v21 == v20)
    {
      if (!__stxr(v20 | 0x40, v17))
        goto LABEL_17;
    }
    else
    {
      __clrex();
    }
  }
  v83 = v18;
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
  v18 = v83;
LABEL_17:
  if (!(_DWORD)v18)
  {
    if (v19 - v11 >= a4)
    {
      v39 = (char *)a5 + 16;
      if (!v14)
        goto LABEL_41;
      goto LABEL_76;
    }
    goto LABEL_62;
  }
  if (*((_DWORD *)a5 + 2) < a4)
  {
LABEL_62:
    v38 = v18;
    if (!JSC::JSArray::unshiftCountSlowCase((uint64_t)this, (JSC::VM *)v9, v18, a4, (uint64_t)a5, a6, a7, a8, a9))
    {
      JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)&v85);
      goto LABEL_71;
    }
    v35 = (char *)*((_QWORD *)this + 1);
    goto LABEL_40;
  }
  v84 = v18;
  v23 = *(_DWORD *)this & 0xFFFFFFFE;
  v24 = 16 * v23;
  v25 = (unsigned __int8 *)((32 * (v23 >> 1)) | 0xF);
  LODWORD(v23) = __ldaxr(v25);
  if ((_DWORD)v23)
  {
    __clrex();
  }
  else if (!__stxr(1u, v25))
  {
    goto LABEL_22;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v25);
LABEL_22:
  v26 = *(unsigned __int16 *)(v24 + 24);
  if (v26 == 65534)
    goto LABEL_26;
  if (v26 == 0xFFFF)
    v26 = *(_DWORD *)(*(_QWORD *)(v24 + 64) + 84);
  if (v26 < 64)
  {
LABEL_26:
    v27 = 0;
LABEL_27:
    v28 = &v10[-8 * a4];
    v29 = -v27;
    v30 = &v28[-8 * v27];
    v31 = (8 * v27) | 0x18;
    goto LABEL_28;
  }
  if ((v26 - 63) <= 4)
  {
    v27 = 4;
    goto LABEL_27;
  }
  v42 = (v26 - 64) | ((v26 - 64) >> 1) | (((v26 - 64) | ((v26 - 64) >> 1)) >> 2);
  v43 = v42 | (v42 >> 4) | ((v42 | (v42 >> 4)) >> 8);
  v44 = v43 | HIWORD(v43);
  v45 = v44 + 1;
  v28 = &v10[-8 * a4];
  v29 = -v45;
  v30 = &v28[-8 * v45];
  v31 = 8 * v45 + 24;
  if (v44 <= 0x1A)
  {
LABEL_28:
    v32 = v31 >> 3;
    v33 = &v10[8 * v29];
    do
    {
      v34 = *(_QWORD *)v33;
      v33 += 8;
      *(_QWORD *)v30 = v34;
      v30 += 8;
      --v32;
    }
    while (v32);
    goto LABEL_30;
  }
  v46 = &v10[8 * v29];
  v47 = v31 & 0xFFFFFFFE0;
  v48 = &v30[v31];
  v49 = &v30[v47];
  while (v30 != v49)
  {
    v50 = *(_OWORD *)v46;
    v51 = *((_OWORD *)v46 + 1);
    v46 += 32;
    *(_OWORD *)v30 = v50;
    *((_OWORD *)v30 + 1) = v51;
    v30 += 32;
  }
  while (v30 != v48)
  {
    v52 = *(_QWORD *)v46;
    v46 += 8;
    *(_QWORD *)v30 = v52;
    v30 += 8;
  }
LABEL_30:
  *((_DWORD *)v28 + 4) -= a4;
  if ((v19 + a4) >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x198982D64);
  }
  v35 = v28 + 8;
  *((_DWORD *)v28 + 1) = v19 + a4;
  v36 = v9 + 192;
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    *((_QWORD *)this + 1) = v35;
    if (*(_DWORD *)(v9 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath(v36, (unint64_t)this);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)this + 1) = v35;
    if (*(_DWORD *)(v9 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath(v36, (unint64_t)this);
  }
  v37 = __ldxr(v25);
  if (v37 == 1)
  {
    if (!__stlxr(0, v25))
      goto LABEL_39;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, v18, a4, (uint64_t)a5, a6, a7, a8);
LABEL_39:
  v38 = v84;
LABEL_40:
  v39 = v35 + 16;
  if (!v14)
    goto LABEL_41;
  if (v38)
  {
    if (v14 > 0x1E)
    {
      v61 = &v39[8 * a4];
      for (i = v35 + 16; i != &v39[(8 * v14) & 0x7FFFFFFE0]; i += 32)
      {
        v63 = *(_OWORD *)v61;
        v64 = *((_OWORD *)v61 + 1);
        v61 += 32;
        *(_OWORD *)i = v63;
        *((_OWORD *)i + 1) = v64;
      }
      while (i != &v39[8 * v14])
      {
        v65 = *(_QWORD *)v61;
        v61 += 8;
        *(_QWORD *)i = v65;
        i += 8;
      }
    }
    else
    {
      v53 = v35 + 16;
      v54 = v14;
      do
      {
        *v53 = v53[a4];
        ++v53;
        --v54;
      }
      while (v54);
    }
    goto LABEL_41;
  }
LABEL_76:
  v57 = v11 - v14;
  if (v11 != v14)
  {
    v58 = &v39[8 * v14];
    v40 = a4;
    v59 = 8 * (v11 - v14);
    v60 = &v58[8 * a4];
    if ((_DWORD)a4)
    {
      v66 = &v58[v59];
      if (&v58[v59] <= v60)
      {
        if (v57 > 0x1E)
        {
          v77 = v59 & 0x7FFFFFFE0;
          v78 = &v60[v59];
          v79 = &v60[v77];
          while (v60 != v79)
          {
            v80 = *(_OWORD *)v58;
            v81 = *((_OWORD *)v58 + 1);
            v58 += 32;
            *(_OWORD *)v60 = v80;
            *((_OWORD *)v60 + 1) = v81;
            v60 += 32;
          }
          while (v60 != v78)
          {
            v82 = *(_QWORD *)v58;
            v58 += 8;
            *(_QWORD *)v60 = v82;
            v60 += 8;
          }
          goto LABEL_43;
        }
        do
        {
          *(_QWORD *)&v58[8 * a4] = *(_QWORD *)v58;
          v58 += 8;
          --v57;
        }
        while (v57);
      }
      else
      {
        if (v57 > 0x1E)
        {
          for (j = &v60[v59]; j != &v60[v59 & 0x7FFFFFFE0]; j -= 8)
          {
            v68 = *((_QWORD *)v66 - 1);
            v66 -= 8;
            *((_QWORD *)j - 1) = v68;
          }
          while (j != v60)
          {
            v69 = *((_OWORD *)v66 - 2);
            v70 = *((_OWORD *)v66 - 1);
            v66 -= 32;
            *((_OWORD *)j - 2) = v69;
            *((_OWORD *)j - 1) = v70;
            j -= 32;
          }
          goto LABEL_43;
        }
        v76 = v57 - 1;
        do
        {
          *(_QWORD *)&v60[8 * v76] = *(_QWORD *)&v58[8 * v76];
          --v76;
        }
        while (v76 != -1);
      }
    }
    else
    {
      if (v57 > 0x1E)
      {
        v71 = &v60[v59];
        v72 = &v60[v59 & 0x7FFFFFFE0];
        while (v60 != v72)
        {
          v73 = *(_OWORD *)v58;
          v74 = *((_OWORD *)v58 + 1);
          v58 += 32;
          *(_OWORD *)v60 = v73;
          *((_OWORD *)v60 + 1) = v74;
          v60 += 32;
        }
        while (v60 != v71)
        {
          v75 = *(_QWORD *)v58;
          v58 += 8;
          *(_QWORD *)v60 = v75;
          v60 += 8;
        }
LABEL_71:
        while (1)
        {
          v55 = *v17;
          if ((v55 & 0xC0) != 0x40)
            break;
          v56 = __ldxr(v17);
          if (v56 == v55)
          {
            if (!__stxr(v55 & 0xBF, v17))
              goto LABEL_45;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v18, a4, (uint64_t)a5, a6, a7, a8);
        goto LABEL_45;
      }
      do
      {
        *(_QWORD *)v58 = *(_QWORD *)v58;
        v58 += 8;
        --v57;
      }
      while (v57);
    }
  }
LABEL_41:
  if (!(_DWORD)a4)
    goto LABEL_44;
  v40 = a4;
  do
  {
LABEL_43:
    *(_QWORD *)&v39[8 * v14++] = 0;
    --v40;
  }
  while (v40);
LABEL_44:
  if (this)
    goto LABEL_71;
LABEL_45:
  v41 = *(_DWORD *)(v9 + 916) - 1;
  *(_DWORD *)(v9 + 916) = v41;
  if (*(unsigned __int8 *)(v9 + 1198) | HIBYTE(dword_1ECF4C5CE))
  {
    if (!v41)
    {
      *(_BYTE *)(v9 + 1198) = 0;
      JSC::Heap::collectIfNecessaryOrDefer(v9 + 192, 0);
    }
  }
  return 1;
}

uint64_t JSC::JSArray::unshiftCountWithAnyIndexingType(JSC::JSArray *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v11;
  char v12;
  JSC::Butterfly *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t SlowCase;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  _OWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  char *v62;
  _OWORD *j;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t result;
  unint64_t k;
  __int128 v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  int64x2_t *v85;
  int64x2_t *v86;
  int64x2_t *v87;
  char *v88;
  uint32x2_t v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  JSC::JSArray *v93;
  JSC::JSGlobalObject *v94;
  uint64_t v95;
  _OWORD *v96;
  _OWORD *v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  JSC::JSGlobalObject *v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  JSC::JSGlobalObject *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  __int128 *v130;
  uint64_t v131;
  _OWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _OWORD *i;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  _OWORD *v140;
  _OWORD *v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  _OWORD *v146;
  _OWORD *v147;
  __int128 v148;
  __int128 v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  unsigned int v155;
  JSC::JSGlobalObject *v156;
  JSC::VM *v157;
  JSC::VM *v158;
  JSC::VM *v159;
  char v160;

  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v157 = v11;
  v158 = v11;
  v12 = *((_BYTE *)this + 4);
  if ((v12 & 0x10) != 0)
  {
    v83 = a4;
    v84 = a3;
    JSC::JSObject::convertFromCopyOnWrite(this, v11, a3, a4, a5, a6, a7, a8, a9);
    a3 = v84;
    a4 = v83;
    v11 = v157;
    v12 = *((_BYTE *)this + 4);
  }
  v13 = (JSC::Butterfly *)*((_QWORD *)this + 1);
  if ((v12 & 0xF) != 9)
  {
    result = 0;
    switch(v12 & 0xF)
    {
      case 1:
      case 3:
        return result;
      case 5:
        goto LABEL_4;
      case 7:
        v108 = a2;
        v109 = a4;
        v110 = *((unsigned int *)v13 - 2);
        v111 = a3;
        v112 = (v110 - a3);
        if (v112 >> 5 >= 0xC35)
        {
          if ((v12 & 0xEu) <= 9)
            v13 = JSC::JSObject::ensureArrayStorageSlow(this, v157, a3, a4, a5, a6, a7, a8, a9);
          v93 = this;
          v94 = v108;
          LODWORD(a3) = v111;
          a4 = v109;
          return JSC::JSArray::unshiftCountWithArrayStorage(v93, v94, a3, a4, v13, a6, a7, a8, a9);
        }
        v121 = (v110 + a4);
        if (__CFADD__((_DWORD)v110, (_DWORD)a4))
          goto LABEL_197;
        if (v121 > 0x10000000)
          return 0;
        if ((JSC::JSObject::ensureLength(this, v157, v121, a4, a5, a6, a7, a8, a9) & 1) == 0)
        {
LABEL_197:
          v124 = v108;
          goto LABEL_180;
        }
        if ((_DWORD)v110 == v111)
          return 1;
        v125 = *((_QWORD *)this + 1);
        if (*((_BYTE *)this + 5) != 36
          || (v126 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30)) == 0
          || (v127 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v126 != *(_QWORD *)(v127 + 672))
          || ((v128 = *(_QWORD *)(v127 + 2304), (v128 & 1) != 0)
            ? (v129 = (v128 >> 1) & 3)
            : (v129 = *(unsigned __int8 *)(v128 + 4)),
              v129 == 2))
        {
          if (JSC::Structure::holesMustForwardToPrototype((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), this))
          {
            while (v110 > v111)
              --v110;
          }
        }
        v130 = (__int128 *)(v125 + 8 * v111);
        v131 = 8 * v112;
        v132 = (__int128 *)((char *)v130 + 8 * v109);
        if ((_DWORD)v109)
        {
          v133 = (uint64_t)v130 + v131;
          if ((__int128 *)((char *)v130 + v131) <= v132)
          {
            if (v112 <= 0x1E)
            {
              result = 1;
              do
              {
                *((_QWORD *)v130 + v109) = *(_QWORD *)v130;
                v130 = (__int128 *)((char *)v130 + 8);
                --v112;
              }
              while (v112);
              return result;
            }
            v145 = v131 & 0x7FFFFFFE0;
            v146 = (_OWORD *)((char *)v132 + v131);
            v147 = (_OWORD *)((char *)v132 + v145);
            while (v132 != v147)
            {
              v148 = *v130;
              v149 = v130[1];
              v130 += 2;
              *v132 = v148;
              v132[1] = v149;
              v132 += 2;
            }
            while (v132 != v146)
            {
              v150 = *(_QWORD *)v130;
              v130 = (__int128 *)((char *)v130 + 8);
              *(_QWORD *)v132 = v150;
              v132 = (_OWORD *)((char *)v132 + 8);
            }
          }
          else
          {
            if (v112 <= 0x1E)
            {
              v134 = v112 - 1;
              result = 1;
              do
              {
                *((_QWORD *)v132 + v134) = *((_QWORD *)v130 + v134);
                --v134;
              }
              while (v134 != -1);
              return result;
            }
            for (i = (_OWORD *)((char *)v132 + v131);
                  i != (_OWORD *)((char *)v132 + (v131 & 0x7FFFFFFE0));
                  i = (_OWORD *)((char *)i - 8))
            {
              v136 = *(_QWORD *)(v133 - 8);
              v133 -= 8;
              *((_QWORD *)i - 1) = v136;
            }
            while (i != v132)
            {
              v137 = *(_OWORD *)(v133 - 32);
              v138 = *(_OWORD *)(v133 - 16);
              v133 -= 32;
              *(i - 2) = v137;
              *(i - 1) = v138;
              i -= 2;
            }
          }
        }
        else
        {
          if (v112 <= 0x1E)
          {
            result = 1;
            do
            {
              *(_QWORD *)v130 = *(_QWORD *)v130;
              v130 = (__int128 *)((char *)v130 + 8);
              --v112;
            }
            while (v112);
            return result;
          }
          v139 = v131 & 0x7FFFFFFE0;
          v140 = (_OWORD *)((char *)v132 + v131);
          v141 = (_OWORD *)((char *)v132 + v139);
          while (v132 != v141)
          {
            v142 = *v130;
            v143 = v130[1];
            v130 += 2;
            *v132 = v142;
            v132[1] = v143;
            v132 += 2;
          }
          while (v132 != v140)
          {
            v144 = *(_QWORD *)v130;
            v130 = (__int128 *)((char *)v130 + 8);
            *(_QWORD *)v132 = v144;
            v132 = (_OWORD *)((char *)v132 + 8);
          }
        }
        break;
      case 0xB:
      case 0xD:
        v93 = this;
        v94 = a2;
        return JSC::JSArray::unshiftCountWithArrayStorage(v93, v94, a3, a4, v13, a6, a7, a8, a9);
      default:
        __break(0xC471u);
        JUMPOUT(0x198983990);
    }
    return 1;
  }
LABEL_4:
  v14 = *((_DWORD *)v13 - 2);
  v15 = (v14 - a3);
  if (v15 >> 5 < 0xC35)
  {
    v16 = v14 + a4;
    if (__CFADD__(v14, (_DWORD)a4))
    {
      v124 = a2;
      goto LABEL_180;
    }
    v156 = a2;
    if (v16 > 0x10000000)
      return 0;
    v17 = *((_DWORD *)v13 - 1);
    if ((v12 & 0x10) == 0 && v17 >= v16)
    {
      v43 = *((_DWORD *)v13 - 2);
LABEL_50:
      if (v43 < v16)
      {
        *((_DWORD *)v13 - 2) = v16;
        v13 = (JSC::Butterfly *)*((_QWORD *)this + 1);
      }
      if (v14 == (_DWORD)a3)
        goto LABEL_105;
      v44 = (_OWORD *)((char *)v13 + 8 * a3);
      if (*((_BYTE *)this + 5) != 36
        || (v45 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30)) == 0
        || (v46 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v45 != *(_QWORD *)(v46 + 672))
        || ((v47 = *(_QWORD *)(v46 + 2304), (v47 & 1) != 0)
          ? (v48 = (v47 >> 1) & 3)
          : (v48 = *(unsigned __int8 *)(v47 + 4)),
            v48 == 2))
      {
        if (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) == 36)
        {
          v49 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
          v50 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
          v51 = (v50 >> 1) & 7;
          if ((v50 & 0x10) != 0)
            v51 = ((v50 & 0xE) + 10) >> 1;
          v52 = *(_DWORD *)(v49 + 4 * v51 + 852);
          if (v52)
            v53 = 16 * (v52 & 0xFFFFFFFE);
          else
            v53 = 0;
          if (v53 == 16 * (*(_DWORD *)this & 0xFFFFFFFE))
          {
            v54 = *(_QWORD *)(v49 + 2304);
            v55 = (v54 & 1) != 0 ? (v54 >> 1) & 3 : *(unsigned __int8 *)(v54 + 4);
            if (v55 != 2)
              goto LABEL_84;
          }
        }
        else
        {
          LOBYTE(v50) = *(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
        }
        if ((v50 & 0x20) != 0
          || (v56 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28)) != 0
          && *(_BYTE *)(*(_QWORD *)(v56 + 2048) + 4) == 2)
        {
LABEL_133:
          v85 = (int64x2_t *)((char *)v44 + 8 * v15);
          if (v15 > 0x1F)
          {
            v86 = (int64x2_t *)((char *)v13 + 8 * a3);
            do
            {
              a9 = (__n128)vceqzq_s64(*v86);
              a9.n128_u64[0] = (unint64_t)vmovn_s64((int64x2_t)a9);
              if (a9.n128_u64[0])
                goto LABEL_140;
              v87 = v86 + 1;
              v88 = &v86[1].i8[8];
              ++v86;
            }
            while (v88 < (char *)v85);
            if (v87 < v85)
            {
              a9 = (__n128)vceqzq_s64(v85[-1]);
              a9.n128_u64[0] = (unint64_t)vmovn_s64((int64x2_t)a9);
              if (a9.n128_u64[0])
              {
                v86 = v85 - 1;
LABEL_140:
                v89 = (uint32x2_t)vorn_s8((int8x8_t)0x100000000, (int8x8_t)a9.n128_u64[0]);
                a9.n128_u64[0] = (unint64_t)vpmin_u32(v89, v89);
                v90 = &v86->i64[a9.n128_u8[0]];
                goto LABEL_141;
              }
            }
            goto LABEL_84;
          }
          v106 = 8 * v15;
          v90 = (uint64_t *)((char *)v13 + 8 * a3);
          while (*v90)
          {
            ++v90;
            v106 -= 8;
            if (!v106)
              goto LABEL_84;
          }
LABEL_141:
          if (v90 == (uint64_t *)v85)
            goto LABEL_84;
          v91 = a3;
          v92 = a4;
          if ((*((_BYTE *)this + 4) & 0xEu) <= 9)
            v13 = JSC::JSObject::ensureArrayStorageSlow(this, v157, a3, a4, a5, a6, a7, a8, a9);
          v93 = this;
          v94 = v156;
          LODWORD(a3) = v91;
          goto LABEL_145;
        }
        v57 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
        if (!v57)
          v57 = *((_QWORD *)this + 2);
        if ((v57 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v57 + 5) >= 0x17u)
        {
          while ((*(_BYTE *)(v57 + 4) & 0xE) == 0)
          {
            if ((*(_BYTE *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 8) & 0x20) != 0)
              break;
            v58 = *(_QWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x28);
            if (v58)
            {
              if (*(_BYTE *)(*(_QWORD *)(v58 + 2048) + 4) == 2)
                break;
            }
            v59 = *(_QWORD *)(16 * (*(_DWORD *)v57 & 0xFFFFFFFE) + 0x30);
            if (!v59)
              v59 = *(_QWORD *)(v57 + 16);
            if ((v59 & 0xFFFE000000000002) == 0)
            {
              v57 = v59;
              if (*(unsigned __int8 *)(v59 + 5) > 0x16u)
                continue;
            }
            goto LABEL_84;
          }
          goto LABEL_133;
        }
      }
LABEL_84:
      v60 = 8 * v15;
      v61 = (_OWORD *)((char *)v44 + 8 * a4);
      if ((_DWORD)a4)
      {
        v62 = (char *)v44 + v60;
        if ((_OWORD *)((char *)v44 + v60) <= v61)
        {
          if (v15 > 0x1E)
          {
            v95 = v60 & 0x7FFFFFFE0;
            v96 = (_OWORD *)((char *)v61 + v60);
            v97 = (_OWORD *)((char *)v61 + v95);
            while (v61 != v97)
            {
              v98 = *v44;
              v99 = v44[1];
              v44 += 2;
              *v61 = v98;
              v61[1] = v99;
              v61 += 2;
            }
            while (v61 != v96)
            {
              v100 = *(_QWORD *)v44;
              v44 = (_OWORD *)((char *)v44 + 8);
              *(_QWORD *)v61 = v100;
              v61 = (_OWORD *)((char *)v61 + 8);
            }
          }
          else
          {
            do
            {
              *((_QWORD *)v44 + a4) = *(_QWORD *)v44;
              v44 = (_OWORD *)((char *)v44 + 8);
              --v15;
            }
            while (v15);
          }
        }
        else if (v15 <= 0x1E)
        {
          v79 = v15 - 1;
          do
          {
            *((_QWORD *)v61 + v79) = *((_QWORD *)v44 + v79);
            --v79;
          }
          while (v79 != -1);
        }
        else
        {
          for (j = (_OWORD *)((char *)v61 + v60);
                j != (_OWORD *)((char *)v61 + (v60 & 0x7FFFFFFE0));
                j = (_OWORD *)((char *)j - 8))
          {
            v64 = *((_QWORD *)v62 - 1);
            v62 -= 8;
            *((_QWORD *)j - 1) = v64;
          }
          while (j != v61)
          {
            v65 = *((_OWORD *)v62 - 2);
            v66 = *((_OWORD *)v62 - 1);
            v62 -= 32;
            *(j - 2) = v65;
            *(j - 1) = v66;
            j -= 2;
          }
        }
      }
      else if (v15 > 0x1E)
      {
        v67 = v60 & 0x7FFFFFFE0;
        v68 = (_OWORD *)((char *)v61 + v60);
        v69 = (_OWORD *)((char *)v61 + v67);
        while (v61 != v69)
        {
          v70 = *v44;
          v71 = v44[1];
          v44 += 2;
          *v61 = v70;
          v61[1] = v71;
          v61 += 2;
        }
        while (v61 != v68)
        {
          v72 = *(_QWORD *)v44;
          v44 = (_OWORD *)((char *)v44 + 8);
          *(_QWORD *)v61 = v72;
          v61 = (_OWORD *)((char *)v61 + 8);
        }
      }
      else
      {
        do
        {
          *(_QWORD *)v44 = *(_QWORD *)v44;
          v44 = (_OWORD *)((char *)v44 + 8);
          --v15;
        }
        while (v15);
      }
LABEL_105:
      if (*((_DWORD *)v11 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, (unint64_t)this);
      return 1;
    }
    if ((v12 & 0x10) != 0)
    {
      v122 = a4;
      v123 = a3;
      JSC::JSObject::convertFromCopyOnWrite(this, v157, a3, a4, a5, a6, a7, a8, a9);
      a3 = v123;
      a4 = v122;
      v11 = v157;
      v13 = (JSC::Butterfly *)*((_QWORD *)this + 1);
      v17 = *((_DWORD *)v13 - 1);
      if (v17 >= v16)
      {
LABEL_49:
        v43 = *((_DWORD *)v13 - 2);
        goto LABEL_50;
      }
    }
    v18 = *(unsigned __int16 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x18);
    if (v18 == 65534)
      goto LABEL_14;
    if (v18 == 0xFFFF)
      v18 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40) + 84);
    if (v18 < 64)
    {
LABEL_14:
      v19 = 0;
    }
    else if ((v18 - 63) >= 5)
    {
      v77 = (v18 - 64) | ((v18 - 64) >> 1) | (((v18 - 64) | ((v18 - 64) >> 1)) >> 2);
      v78 = v77 | (v77 >> 4) | ((v77 | (v77 >> 4)) >> 8);
      v19 = (v78 | HIWORD(v78)) + 1;
    }
    else
    {
      v19 = 4;
    }
    v159 = v11;
    v160 = 0;
    v20 = v19;
    v21 = 8 * v19 + 8;
    v22 = v20 + v17;
    v23 = 8 * v22;
    v24 = 8 * v22 + 8;
    if (v22 > 9)
    {
      if (v22 > 0x3EB)
        v25 = 8 * v22 + 8;
      else
        v25 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                              + (((unint64_t)(v23 + 23) >> 2) & 0x7FFFFFFFCLL));
    }
    else
    {
      v25 = (v23 + 23) & 0x1FFFFFFFF0;
    }
    v26 = (unint64_t)(v25 - v21) >> 3;
    if (v16 <= v26)
    {
      v39 = 0;
      goto LABEL_36;
    }
    v27 = 2 * v16;
    if (2 * v16 >= 0x10000000)
      v27 = 0x10000000;
    if (v27 <= 3)
      v27 = 3;
    v28 = v21 + 8 * v27;
    if (v28 > 0x50)
    {
      if (v28 <= 0x1F60)
        v28 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v28 + 15) >> 2) & 0xFFFFFFFFCLL));
    }
    else
    {
      v28 = (v28 + 15) & 0x3FFFFFFFF0;
    }
    v29 = v28 - v21;
    v26 = v29 >> 3;
    v30 = (char *)v13 - 8 * v20;
    v31 = v30 - 8;
    v32 = (v29 & 0x7FFFFFFF8) + v21;
    v33 = (uint64_t)v11 + 6648;
    if (!(_DWORD)v20 && !*((_BYTE *)v11 + 755) && (v31 & 8) != 0)
    {
      v80 = a3;
      v81 = a4;
      v82 = JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(v33, v11, (uint64_t)(v30 - 8), v32, (uint64_t)&v159, 1, a7, a8);
      if (v82)
      {
        v39 = (uint64_t)(v82 + 8);
        v13 = (JSC::Butterfly *)(v82 + 8);
        a4 = v81;
        a3 = v80;
        goto LABEL_36;
      }
      v42 = 0;
      v11 = v157;
      a4 = v81;
      a3 = v80;
      goto LABEL_45;
    }
    if (v32 <= 0x1F60 && (v34 = *(_QWORD *)((char *)v11 + (((v32 + 15) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
    {
      v35 = *(unsigned int *)(v34 + 60);
      SlowCase = *(_QWORD *)(v34 + 24);
      if (SlowCase < *(_QWORD *)(v34 + 32))
      {
        *(_QWORD *)(v34 + 24) = SlowCase + v35;
LABEL_31:
        if (SlowCase)
        {
LABEL_32:
          if (v22 > 0x1D)
          {
            for (k = SlowCase; k != (v24 & 0x1FFFFFFFE0) + SlowCase; k += 32)
            {
              a9 = *(__n128 *)v31;
              v75 = *((_OWORD *)v31 + 1);
              v31 += 32;
              *(__n128 *)k = a9;
              *(_OWORD *)(k + 16) = v75;
            }
            while (k != v24 + SlowCase)
            {
              v76 = *(_QWORD *)v31;
              v31 += 8;
              a9.n128_u64[0] = v76;
              *(_QWORD *)k = v76;
              k += 8;
            }
          }
          else
          {
            v37 = 0;
            v38 = 1;
            do
            {
              *(_QWORD *)(SlowCase + 8 * v37) = *(_QWORD *)&v31[8 * v37];
              v37 = v38++;
            }
            while (v24 >> 3 > v37);
          }
          v39 = SlowCase + 8 * v20 + 8;
          v13 = (JSC::Butterfly *)v39;
LABEL_36:
          if ((*((_BYTE *)this + 4) & 0xE) == 6)
          {
            if (v17 >= v26)
            {
LABEL_40:
              if (v39)
              {
                v11 = v157;
                if (v26 >= 0x10000001)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198983600);
                }
                *((_DWORD *)v13 - 1) = v26;
                __dmb(0xAu);
                *((_QWORD *)this + 1) = v39;
                if (*((_DWORD *)v157 + 190) >= *((unsigned __int8 *)this + 7))
                {
                  v103 = a4;
                  v104 = a3;
                  JSC::Heap::writeBarrierSlowPath((uint64_t)v157 + 192, (unint64_t)this);
                  a3 = v104;
                  a4 = v103;
                  v11 = v157;
                }
              }
              else
              {
                __dmb(0xAu);
                v11 = v157;
                if (v26 >= 0x10000001)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1989836F0);
                }
                *((_DWORD *)v13 - 1) = v26;
              }
              v42 = 1;
              goto LABEL_45;
            }
            v40 = a3;
            v41 = a4;
            memset_pattern16((char *)v13 + 8 * v17, &memset_pattern_99, 8 * (v26 + ~v17) + 8);
          }
          else
          {
            if (v17 >= v26)
              goto LABEL_40;
            v41 = a4;
            v40 = a3;
            bzero((char *)v13 + 8 * v17, 8 * (v26 + ~v17) + 8);
          }
          a3 = v40;
          a4 = v41;
          goto LABEL_40;
        }
        v42 = 0;
LABEL_45:
        if (v160)
        {
          v101 = a4;
          v102 = a3;
          JSC::Heap::collectIfNecessaryOrDefer((uint64_t)v159 + 192, 0);
          a3 = v102;
          a4 = v101;
          v11 = v157;
        }
        if (v42)
        {
          v13 = (JSC::Butterfly *)*((_QWORD *)this + 1);
          goto LABEL_49;
        }
        v124 = v156;
LABEL_180:
        JSC::throwOutOfMemoryError(v124, (JSC::JSGlobalObject *)&v158);
        return 1;
      }
      SlowCase = *(_QWORD *)(v34 + 40);
      if ((SlowCase & 1) == 0)
      {
        v105 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v34 + 48);
        *(_QWORD *)(v34 + 32) = SlowCase + HIDWORD(v105);
        *(_QWORD *)(v34 + 40) = SlowCase + (int)v105;
        *(_QWORD *)(v34 + 24) = SlowCase + v35;
        goto LABEL_32;
      }
      v153 = v15;
      v151 = (uint64_t)v11 + 192;
      v113 = v14;
      v114 = v34;
      v152 = v16;
      v115 = *(unsigned int *)(v34 + 60);
      v154 = a3;
      v155 = a4;
      JSC::sanitizeStackForVM(v11, a2, a3, a4, a5, a6, a7, a8);
      v116 = v114;
      v14 = v113;
      v15 = v153;
      v117 = v115;
      v16 = v152;
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v116, v151, v117, (uint64_t)&v159, 1, v118, v119, v120);
    }
    else
    {
      v154 = a3;
      v155 = a4;
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v33, v157, v32, (uint64_t)&v159, a5, a6, a7, a8);
    }
    a3 = v154;
    a4 = v155;
    v11 = v157;
    goto LABEL_31;
  }
  v107 = a3;
  v92 = a4;
  if ((v12 & 0xEu) <= 9)
    v13 = JSC::JSObject::ensureArrayStorageSlow(this, v157, a3, a4, a5, a6, a7, a8, a9);
  v93 = this;
  v94 = a2;
  LODWORD(a3) = v107;
LABEL_145:
  a4 = v92;
  return JSC::JSArray::unshiftCountWithArrayStorage(v93, v94, a3, a4, v13, a6, a7, a8, a9);
}

uint64_t JSC::JSArray::fillArgList(uint64_t this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v10 = this;
  v11 = 0;
  v12 = *(_QWORD *)(this + 8);
  switch(*(_BYTE *)(this + 4) & 0xF)
  {
    case 1:
      return this;
    case 3:
      goto LABEL_35;
    case 5:
    case 9:
      v13 = *(_DWORD *)(v12 - 8);
      if (!v13)
        goto LABEL_34;
      goto LABEL_7;
    case 7:
      if (!*(_DWORD *)(v12 - 8))
        goto LABEL_34;
      v11 = 0;
      v23 = (_DWORD *)(a3 + 8);
      v24 = a3 + 32;
      do
      {
        v25 = *(_QWORD *)(v12 + 8 * v11) + 0x2000000000000;
        v26 = *(unsigned int *)(a3 + 8);
        if ((_DWORD)v26 != *(_DWORD *)(a3 + 12)
          && ((v27 = *(_QWORD *)(a3 + 16), v27 != v24) ? (v28 = v27 == 0) : (v28 = 1), v28))
        {
          *(_QWORD *)(v27 + 8 * v26) = v25;
          *v23 = v26 + 1;
        }
        else
        {
          this = JSC::MarkedVectorBase::slowAppend(a3 + 8, v25, a3, a4, a5, a6, a7, a8);
          if ((_DWORD)this == 1)
            *(_BYTE *)a3 = 1;
        }
        ++v11;
      }
      while (v11 < *(unsigned int *)(v12 - 8));
      goto LABEL_35;
    case 0xB:
    case 0xD:
      v13 = *(_DWORD *)(v12 - 8);
      v14 = *(_DWORD *)(v12 - 4);
      v12 += 16;
      if (v14 < v13)
        v13 = v14;
      if (v13)
      {
LABEL_7:
        v15 = 0;
        v16 = (_DWORD *)(a3 + 8);
        v17 = a3 + 32;
        v18 = v13;
        while (1)
        {
          v19 = *(_QWORD *)(v12 + 8 * v15);
          if (!v19)
            break;
          v20 = *(unsigned int *)(a3 + 8);
          if ((_DWORD)v20 != *(_DWORD *)(a3 + 12)
            && ((v21 = *(_QWORD *)(a3 + 16), v21 != v17) ? (v22 = v21 == 0) : (v22 = 1), v22))
          {
            *(_QWORD *)(v21 + 8 * v20) = v19;
            *v16 = v20 + 1;
          }
          else
          {
            this = JSC::MarkedVectorBase::slowAppend(a3 + 8, v19, a3, a4, a5, a6, a7, a8);
            if ((_DWORD)this == 1)
              *(_BYTE *)a3 = 1;
          }
          if (v18 == ++v15)
          {
            v11 = v18;
            goto LABEL_35;
          }
        }
        v11 = v15;
      }
      else
      {
LABEL_34:
        v11 = 0;
      }
LABEL_35:
      while (1)
      {
        v29 = (*(_BYTE *)(v10 + 4) & 0xE) != 0 ? *(_DWORD *)(*(_QWORD *)(v10 + 8) - 8) : 0;
        if (v11 >= v29)
          break;
        this = JSC::JSObject::get((JSC::JSObject *)v10, a2, v11);
        v36 = *(unsigned int *)(a3 + 8);
        if ((_DWORD)v36 == *(_DWORD *)(a3 + 12) || (v37 = *(_QWORD *)(a3 + 16), v37 != a3 + 32) && v37)
        {
          this = JSC::MarkedVectorBase::slowAppend(a3 + 8, this, v30, v31, v32, v33, v34, v35);
          if ((_DWORD)this == 1)
            *(_BYTE *)a3 = 1;
        }
        else
        {
          *(_QWORD *)(v37 + 8 * v36) = this;
          *(_DWORD *)(a3 + 8) = v36 + 1;
        }
        v11 = (v11 + 1);
      }
      return this;
    default:
      __break(0xC471u);
      JUMPOUT(0x198983CF0);
  }
}

uint64_t JSC::JSArray::copyToArguments(uint64_t this, JSC::JSGlobalObject *a2, JSC::JSValue *a3, unint64_t a4, int a5)
{
  JSC::VM *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  JSC::JSValue *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL hasExceptionsAfterHandlingTraps;
  int v25;
  JSC::JSValue *v26;
  int v27;
  JSC::JSGlobalObject *v28;
  unsigned int v29;
  uint64_t v30;

  v5 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v6 = a5 + a4;
  v7 = *(_QWORD *)(this + 8);
  v8 = *(_BYTE *)(this + 4) & 0xF;
  if (v8 != 9)
  {
    v14 = v8 - 1;
    v10 = a4;
    switch(v14)
    {
      case 0:
        return this;
      case 2:
        goto LABEL_7;
      case 4:
        break;
      case 6:
        v10 = a4;
        if (*(_DWORD *)(v7 - 8) > a4)
        {
          v10 = a4;
          v15 = a3;
          do
          {
            *(_QWORD *)v15 = *(_QWORD *)(v7 + 8 * v10) + 0x2000000000000;
            v15 = (JSC::JSValue *)((char *)v15 + 8);
            ++v10;
          }
          while (v10 < *(unsigned int *)(v7 - 8));
        }
        goto LABEL_7;
      case 10:
      case 12:
        v16 = *(_DWORD *)(v7 - 4);
        v7 += 16;
        if (v16 >= v6)
          v9 = a5 + a4;
        else
          v9 = v16;
        goto LABEL_3;
      default:
        __break(0xC471u);
        JUMPOUT(0x198983EA0);
    }
  }
  v9 = *(_DWORD *)(v7 - 8);
LABEL_3:
  v10 = a4;
  if (v9 > a4)
  {
    v11 = 0;
    v10 = v9;
    v12 = a4;
    while (1)
    {
      v13 = *(_QWORD *)(v7 + 8 * v12);
      if (!v13)
        break;
      *((_QWORD *)a3 + v11) = v13;
      ++v12;
      ++v11;
      if (v10 == v12)
        goto LABEL_7;
    }
    v10 = v12;
  }
LABEL_7:
  while (v10 < v6)
  {
    while (1)
    {
      v29 = v6;
      v30 = this;
      v28 = a2;
      v27 = a4;
      v25 = v10;
      v26 = a3;
      *((_QWORD *)a3 + (v10 - a4)) = JSC::JSObject::get((JSC::JSObject *)this, a2, v10);
      if (*((_DWORD *)v5 + 20))
        break;
      a3 = v26;
      v10 = (v25 + 1);
      v6 = v29;
      LODWORD(a4) = v27;
      a2 = v28;
      this = v30;
      if (v10 >= v29)
        return this;
    }
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v5, v17, v18, v19, v20, v21, v22, v23);
    LODWORD(a4) = v27;
    a3 = v26;
    a2 = v28;
    this = v30;
    v6 = v29;
    if (hasExceptionsAfterHandlingTraps)
      break;
    v10 = (v25 + 1);
  }
  return this;
}

BOOL JSC::JSArray::isIteratorProtocolFastAndNonObservable(JSC::JSArray *this, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v18;

  v8 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v9 = *(_QWORD *)(v8 + 2216);
  if ((v9 & 1) != 0)
    v10 = (v9 >> 1) & 3;
  else
    v10 = *(unsigned __int8 *)(v9 + 4);
  if (v10 == 2 || *(_BYTE *)(*(_QWORD *)(v8 + 2048) + 4) == 2)
    return 0;
  v11 = *(_QWORD *)(v8 + 2304);
  v12 = (v11 & 1) != 0 ? (v11 >> 1) & 3 : *(unsigned __int8 *)(v11 + 4);
  if (v12 == 2)
    return 0;
  v13 = *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 8);
  v14 = (v13 >> 1) & 7;
  if ((v13 & 0x10) != 0)
    v14 = ((v13 & 0xE) + 10) >> 1;
  v15 = *(_DWORD *)(v8 + 4 * v14 + 852);
  if (v15)
    v16 = 16 * (v15 & 0xFFFFFFFE);
  else
    v16 = 0;
  if (v16 == 16 * (*(_DWORD *)this & 0xFFFFFFFE))
    return 1;
  if ((v13 & 0x20) != 0)
    return 0;
  v18 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
  if (!v18)
    v18 = *((_QWORD *)this + 2);
  return v18 == *(_QWORD *)(v8 + 672)
      && JSC::JSObject::getDirectOffset(this, *(JSC::VM **)(v8 + 56), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 56) + 41952) + 2712), a4, a5, a6, a7, a8) == -1;
}

unint64_t JSC::constructArray(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t UninitializedRestricted;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  JSC::VM *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::VM *v34;

  v10 = *(unsigned int *)(a3 + 8);
  v34 = *(JSC::VM **)(a1 + 56);
  UninitializedRestricted = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)&v34, a2, v10, a4, a5, a6, a7, a8);
  if (!UninitializedRestricted)
  {
    __break(0xC471u);
    JUMPOUT(0x1989841F4);
  }
  v18 = UninitializedRestricted;
  v19 = *(unsigned __int8 *)(a2 + 8);
  if ((v19 & 0x10) != 0)
    v20 = ((v19 & 0xE) + 10) >> 1;
  else
    v20 = (v19 >> 1) & 7;
  v21 = *(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * v20 + 852);
  if (v21)
    v22 = 16 * (v21 & 0xFFFFFFFE);
  else
    v22 = 0;
  if (v22 != a2)
    JSC::JSArray::eagerlyInitializeButterfly(UninitializedRestricted, UninitializedRestricted, v10);
  if ((_DWORD)v10)
  {
    v23 = 0;
    v24 = 0;
    v25 = 8 * v10;
    while (2)
    {
      if (v24 >= *(unsigned int *)(a3 + 8))
        v26 = 10;
      else
        v26 = *(_QWORD *)(*(_QWORD *)a3 + v23);
      v27 = v34;
      v28 = *(_QWORD *)(v18 + 8);
      switch(*(_BYTE *)(v18 + 4) & 0xF)
      {
        case 3:
          JSC::JSObject::convertUndecidedForValue(v18, v34, v26, v12, v13, v14, v15, v16, v17);
          JSC::JSObject::setIndexQuickly(v18, v27, v24, v26, v30, v31, v32, v33);
          goto LABEL_22;
        case 4:
        case 5:
          if (v26 > 0xFFFDFFFFFFFFFFFFLL)
            goto LABEL_15;
          JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)v18, v34, v24, v26, v13, v14, v15, v16);
          goto LABEL_22;
        case 6:
        case 7:
          if (v26 >> 49)
          {
            v17 = (double)(int)v26;
            if (v26 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v17 = v26 - 0x2000000000000;
            *(double *)(v28 + v23) = v17;
          }
          else
          {
            JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)v18, v34, v24, v26, v13, v14, v15, v16, v17);
          }
          goto LABEL_22;
        case 8:
        case 9:
LABEL_15:
          *(_QWORD *)(v28 + v23) = v26;
          if (v26)
            goto LABEL_16;
          goto LABEL_22;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          *(_QWORD *)(v28 + v23 + 16) = v26;
          if (!v26)
            goto LABEL_22;
LABEL_16:
          if ((v26 & 0xFFFE000000000002) == 0
            && *((_DWORD *)v27 + 190) >= *(unsigned __int8 *)(v18 + 7))
          {
            JSC::Heap::writeBarrierSlowPath((uint64_t)v27 + 192, v18);
          }
LABEL_22:
          ++v24;
          v23 += 8;
          if (v25 == v23)
            break;
          continue;
        default:
          __break(0xC471u);
          JUMPOUT(0x198984254);
      }
      break;
    }
  }
  if (*((_BYTE *)v34 + 755))
    __dmb(0xAu);
  return v18;
}

unint64_t JSC::JSObject::initializeIndex(unint64_t result, JSC::VM **a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v11;
  JSC::VM *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = result;
  v12 = *a2;
  v13 = *(_QWORD *)(result + 8);
  switch(*(_BYTE *)(result + 4) & 0xF)
  {
    case 3:
      JSC::JSObject::convertUndecidedForValue(result, *a2, a4, a4, a5, a6, a7, a8, a9);
      return JSC::JSObject::setIndexQuickly(v11, v12, a3, a4, v15, v16, v17, v18);
    case 4:
    case 5:
      if (a4 > 0xFFFDFFFFFFFFFFFFLL)
        goto LABEL_2;
      return JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)result, *a2, a3, a4, a5, a6, a7, a8);
    case 6:
    case 7:
      if (!(a4 >> 49))
        return JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)result, *a2, a3, a4, a5, a6, a7, a8, a9);
      v14 = (double)(int)a4;
      if (a4 <= 0xFFFDFFFFFFFFFFFFLL)
        *(_QWORD *)&v14 = a4 - 0x2000000000000;
      *(double *)(v13 + 8 * a3) = v14;
      return result;
    case 8:
    case 9:
LABEL_2:
      *(_QWORD *)(v13 + 8 * a3) = a4;
      if (a4)
        goto LABEL_3;
      return result;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
      *(_QWORD *)(v13 + 8 * a3 + 16) = a4;
      if (!a4)
        return result;
LABEL_3:
      if ((a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)v12 + 190) >= *(unsigned __int8 *)(result + 7))
        return JSC::Heap::writeBarrierSlowPath((uint64_t)v12 + 192, result);
      return result;
    default:
      __break(0xC471u);
      JUMPOUT(0x1989843F8);
  }
}

unint64_t JSC::constructArray(JSC *this, JSC::JSGlobalObject *a2, JSC::Structure *a3, const JSC::JSValue *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unint64_t UninitializedRestricted;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  JSC::JSGlobalObject *v21;
  uint64_t i;
  JSC::VM *v24;

  v8 = a4;
  v24 = (JSC::VM *)*((_QWORD *)this + 7);
  UninitializedRestricted = JSC::JSArray::tryCreateUninitializedRestricted((uint64_t *)&v24, (unint64_t)a2, (unint64_t)a4, (uint64_t)a4, a5, a6, a7, a8);
  if (!UninitializedRestricted)
  {
    __break(0xC471u);
    JUMPOUT(0x198984510);
  }
  v17 = UninitializedRestricted;
  v18 = *((unsigned __int8 *)a2 + 8);
  if ((v18 & 0x10) != 0)
    v19 = ((v18 & 0xE) + 10) >> 1;
  else
    v19 = (v18 >> 1) & 7;
  v20 = *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v19 + 852);
  if (v20)
    v21 = (JSC::JSGlobalObject *)(16 * (v20 & 0xFFFFFFFE));
  else
    v21 = 0;
  if (v21 != a2)
    JSC::JSArray::eagerlyInitializeButterfly(UninitializedRestricted, UninitializedRestricted, v8);
  if (v8)
  {
    for (i = 0; i != v8; ++i)
      JSC::JSObject::initializeIndex(v17, &v24, i, *((_QWORD *)a3 + i), v12, v13, v14, v15, v16);
  }
  if (*((_BYTE *)v24 + 755))
    __dmb(0xAu);
  return v17;
}

unint64_t JSC::constructArrayNegativeIndexed(JSC *this, unint64_t a2, JSC::Structure *a3, const JSC::JSValue *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  unsigned int v11;
  JSC::Structure *v12;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t SlowCase;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  _DWORD *v28;
  void *v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  JSC::JSGlobalObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  BOOL v42;
  double v43;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t OutOfMemoryError;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  JSC::Exception *v72;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v10 = *((_QWORD *)this + 7);
  if (a4 > 0x10000000)
    goto LABEL_95;
  v11 = a4;
  v12 = a3;
  v14 = *(unsigned __int16 *)(a2 + 24);
  if (v14 == 65534
    || (v14 == 0xFFFF ? (v15 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84)) : (v15 = *(unsigned __int16 *)(a2 + 24)),
        v15 < 64))
  {
    v16 = 0;
  }
  else if ((v15 - 63) >= 5)
  {
    v45 = (v15 - 64) | ((v15 - 64) >> 1) | (((v15 - 64) | ((v15 - 64) >> 1)) >> 2);
    v46 = v45 | (v45 >> 4) | ((v45 | (v45 >> 4)) >> 8);
    v16 = (v46 | HIWORD(v46)) + 1;
  }
  else
  {
    v16 = 4;
  }
  v17 = *(_BYTE *)(a2 + 8) & 0xE;
  if (v17 <= 9)
  {
    if (v14 == 65534)
      goto LABEL_12;
    if (v14 == 0xFFFF)
      v14 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
    if (v14 < 64)
    {
LABEL_12:
      v18 = 8;
    }
    else if ((v14 - 63) >= 5)
    {
      v47 = (v14 - 64) | ((v14 - 64) >> 1) | (((v14 - 64) | ((v14 - 64) >> 1)) >> 2);
      v48 = v47 | (v47 >> 4) | ((v47 | (v47 >> 4)) >> 8);
      v18 = 8 * ((v48 | HIWORD(v48)) + 1) + 8;
    }
    else
    {
      v18 = 40;
    }
    if (a4 <= 3)
      v19 = 3;
    else
      v19 = a4;
    if (!(_DWORD)a4)
      v19 = 5;
    v20 = v18 + 8 * v19;
    if (v20 > 0x50)
    {
      if (v20 <= 0x1F60)
        v20 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep + (((v20 + 15) >> 2) & 0xFFFFFFFFCLL));
    }
    else
    {
      v20 = (v20 + 15) & 0x3FFFFFFFF0;
    }
    v21 = v20 - v18;
    a3 = (JSC::Structure *)(((v20 - v18) & 0x7FFFFFFF8) + 8 * v16 + 8);
    if ((unint64_t)a3 <= 0x1F60
      && (v22 = *(_QWORD *)(v10 + (((((v20 - v18) & 0x7FFFFFFF8) + 8 * v16 + 23) >> 1) & 0x1FFFFFFFF8) + 6736)) != 0)
    {
      v23 = *(unsigned int *)(v22 + 60);
      SlowCase = *(_QWORD *)(v22 + 24);
      if (SlowCase >= *(_QWORD *)(v22 + 32))
      {
        SlowCase = *(_QWORD *)(v22 + 40);
        if ((SlowCase & 1) == 0)
        {
          v75 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v22 + 48);
          *(_QWORD *)(v22 + 32) = SlowCase + HIDWORD(v75);
          *(_QWORD *)(v22 + 40) = SlowCase + (int)v75;
          *(_QWORD *)(v22 + 24) = SlowCase + v23;
          goto LABEL_25;
        }
        v86 = *(unsigned int *)(v22 + 60);
        JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v22, v10 + 192, v86, 0, 1, v87, v88, v89);
      }
      else
      {
        *(_QWORD *)(v22 + 24) = SlowCase + v23;
      }
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v10 + 6648, (JSC *)v10, (unint64_t)a3, 0, a5, a6, a7, a8);
    }
    if (SlowCase)
    {
LABEL_25:
      v25 = v21 >> 3;
      if ((v21 >> 3) >= 0x10000001)
      {
        __break(0xC471u);
        JUMPOUT(0x198984AE0);
      }
      v26 = v16;
      v27 = (unsigned int *)(SlowCase + 8 * v16);
      v28 = v27 + 2;
      *v27 = v11;
      v27[1] = v25;
      if (v17 != 6)
      {
        if (v25 <= v11)
          goto LABEL_30;
        v29 = (void *)(SlowCase + 8 * (v26 + v11) + 8);
        goto LABEL_29;
      }
      if (v25 > v11)
        memset_pattern16((void *)(SlowCase + 8 * (v26 + v11) + 8), &memset_pattern_263, 8 * (v25 + ~v11) + 8);
      goto LABEL_30;
    }
LABEL_95:
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, (JSC::JSGlobalObject *)a2);
    v72 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v72 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)OutOfMemoryError, 0, v66, v67, v68, v69, v70);
    }
    JSC::VM::throwException((JSC::VM *)v10, this, v72, v71, v66, v67, v68, v69, v70);
    v30 = 0;
    goto LABEL_98;
  }
  if (v14 == 65534)
    goto LABEL_81;
  if (v14 == 0xFFFF)
    v14 = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 84);
  if (v14 < 64)
  {
LABEL_81:
    v53 = 0;
  }
  else if ((v14 - 63) >= 5)
  {
    v80 = (v14 - 64) | ((v14 - 64) >> 1) | (((v14 - 64) | ((v14 - 64) >> 1)) >> 2);
    v81 = v80 | (v80 >> 4) | ((v80 | (v80 >> 4)) >> 8);
    v53 = (v81 | HIWORD(v81)) + 1;
  }
  else
  {
    v53 = 4;
  }
  if (a4 <= 4)
    v54 = 4;
  else
    v54 = a4;
  v55 = v53 + v54;
  v56 = 8 * (v53 + v54);
  if (v55 > 7)
  {
    if (v55 > 0x3E9)
      v57 = v56 + 24;
    else
      v57 = *(unsigned int *)((char *)JSC::MarkedSpace::s_sizeClassForSizeStep
                            + (((unint64_t)(v56 + 39) >> 2) & 0x7FFFFFFFCLL));
  }
  else
  {
    v57 = (v56 + 39) & 0x1FFFFFFFF0;
  }
  v58 = v57 - 8 * v53 + 0x7FFFFFFE8;
  v59 = (v58 >> 3);
  v60 = v59 + v16;
  v61 = 8 * v60;
  if (v60 <= 0x3E9 && (v62 = *(_QWORD *)(v10 + (((unint64_t)(v61 + 39) >> 1) & 0xFFFFFFFF8) + 6736)) != 0)
  {
    SlowCase = *(_QWORD *)(v62 + 24);
    if (SlowCase >= *(_QWORD *)(v62 + 32))
    {
      v93 = *(unsigned int *)(v62 + 60);
      SlowCase = *(_QWORD *)(v62 + 40);
      if ((SlowCase & 1) == 0)
      {
        v85 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v62 + 48);
        *(_QWORD *)(v62 + 32) = SlowCase + HIDWORD(v85);
        *(_QWORD *)(v62 + 40) = SlowCase + (int)v85;
        *(_QWORD *)(v62 + 24) = SlowCase + v93;
        goto LABEL_92;
      }
      JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v62, v10 + 192, v93, 0, 1, v90, v91, v92);
    }
    else
    {
      *(_QWORD *)(v62 + 24) = SlowCase + *(unsigned int *)(v62 + 60);
    }
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v10 + 6648, (JSC *)v10, v61 + 24, 0, a5, a6, a7, a8);
  }
  if (!SlowCase)
    goto LABEL_95;
LABEL_92:
  v25 = v58 >> 3;
  if ((v58 >> 3) >= 0x10000001)
  {
    __break(0xC471u);
    JUMPOUT(0x198984C4CLL);
  }
  v63 = v16;
  v64 = SlowCase + 8 * v16;
  *(_QWORD *)v64 = v11 | (unint64_t)(v59 << 32);
  *(_QWORD *)(v64 + 8) = 0;
  v28 = (_DWORD *)(v64 + 8);
  *(_DWORD *)(v64 + 16) = 0;
  *(_DWORD *)(v64 + 20) = v11;
  if (v25 > v11)
  {
    v29 = (void *)(SlowCase + 8 * (v63 + v11) + 24);
LABEL_29:
    bzero(v29, 8 * (v25 + ~v11) + 8);
  }
LABEL_30:
  v30 = *(_QWORD *)(v10 + 37584);
  if (v30 < *(_QWORD *)(v10 + 37592))
  {
LABEL_31:
    *(_QWORD *)(v10 + 37584) = v30 + 16;
    goto LABEL_32;
  }
  v30 = *(_QWORD *)(v10 + 37600);
  if ((v30 & 1) == 0)
  {
    v74 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v10 + 37608);
    *(_QWORD *)(v10 + 37592) = v30 + HIDWORD(v74);
    *(_QWORD *)(v10 + 37600) = v30 + (int)v74;
    goto LABEL_31;
  }
  JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 37560, v10 + 192, 16, 0, 0, v82, v83, v84);
  v30 = SlowCase;
LABEL_32:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v30 = a2 >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  *(_QWORD *)(v30 + 8) = v28;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v32 = *(unsigned __int8 *)(a2 + 8);
  if ((v32 & 0x10) != 0)
    v33 = ((v32 & 0xE) + 10) >> 1;
  else
    v33 = (v32 >> 1) & 7;
  v34 = *(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * v33 + 852);
  if (v34)
    v35 = (JSC::JSGlobalObject *)(16 * (v34 & 0xFFFFFFFE));
  else
    v35 = 0;
  if (v35 != (JSC::JSGlobalObject *)a2)
    JSC::JSArray::eagerlyInitializeButterfly(SlowCase, v30, v11);
  if (v11)
  {
    v36 = 0;
    v37 = 0;
    v38 = 8 * v11;
    while (1)
    {
      v40 = *(_QWORD *)v12;
      v12 = (JSC::Structure *)((char *)v12 - 8);
      v39 = v40;
      v41 = *(_QWORD *)(v30 + 8);
      switch(*(_BYTE *)(v30 + 4) & 0xF)
      {
        case 3:
          JSC::JSObject::convertUndecidedForValue(v30, (JSC::VM *)v10, v39, (uint64_t)a4, a5, a6, a7, a8, a9);
          JSC::JSObject::setIndexQuickly(v30, (JSC::VM *)v10, v36, v39, v49, v50, v51, v52);
          goto LABEL_49;
        case 4:
        case 5:
          if (v39 > 0xFFFDFFFFFFFFFFFFLL)
            goto LABEL_44;
          *(_QWORD *)&v43 = v39 - 0x2000000000000;
          if (v39 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL || BYTE1(dword_1ECF4C5C0) == 0)
            JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)v30, (JSC::VM *)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v43);
          else
            JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)v30, (JSC::VM *)v10, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v43);
          JSC::JSObject::setIndexQuickly(v30, (JSC::VM *)v10, v36, v39, v76, v77, v78, v79);
          goto LABEL_49;
        case 6:
        case 7:
          if (v39 >> 49)
          {
            a9 = (double)(int)v39;
            if (v39 <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&a9 = v39 - 0x2000000000000;
            *(double *)(v41 + v37) = a9;
            v37 += 8;
            v36 = (v36 + 1);
            if (v38 == v37)
              goto LABEL_98;
          }
          else
          {
            JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)v30, (JSC::VM *)v10, v36, v39, a5, a6, a7, a8, a9);
LABEL_49:
            v37 += 8;
            v36 = (v36 + 1);
            if (v38 == v37)
              goto LABEL_98;
          }
          break;
        case 8:
        case 9:
LABEL_44:
          *(_QWORD *)(v41 + v37) = v39;
          goto LABEL_45;
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          *(_QWORD *)(v41 + v37 + 16) = v39;
LABEL_45:
          if (v39)
            v42 = (v39 & 0xFFFE000000000002) == 0;
          else
            v42 = 0;
          if (v42 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v30 + 7))
            JSC::Heap::writeBarrierSlowPath(v10 + 192, v30);
          goto LABEL_49;
        default:
          __break(0xC471u);
          JUMPOUT(0x198984D1CLL);
      }
    }
  }
LABEL_98:
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  return v30;
}

uint64_t JSC::JSArrayBuffer::estimatedSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v1 + 64) && (v8 = *(_QWORD *)(v1 + 32)) != 0)
    v2 = *(_QWORD *)(v8 + 32);
  else
    v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(unsigned __int16 *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x18);
    if (v4 == 65534)
      goto LABEL_9;
    if (v4 == 0xFFFF)
      v4 = *(_DWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40) + 84);
    v5 = __OFSUB__(v4, 63);
    LODWORD(v3) = v4 - 63;
    if (((int)v3 < 0) ^ v5 | ((_DWORD)v3 == 0))
LABEL_9:
      LODWORD(v3) = 0;
    v3 = v3;
  }
  if ((a1 & 8) != 0)
    v6 = *(_QWORD *)(a1 - 88);
  else
    v6 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v2 + v3 + v6 + 96;
}

unint64_t JSC::JSArrayBuffer::create(uint64_t a1, unint64_t a2, JSC::ArrayBuffer **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v11;
  JSC::Heap *v12;
  unint64_t SlowCase;
  int v14;
  JSC::ArrayBuffer *v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v11 = *(JSC::Heap **)(a1 + 40320);
  if (!v11)
    v11 = JSC::GCClient::Heap::arrayBufferSpaceSlow((JSC::Heap **)(a1 + 37552));
  v12 = (JSC::Heap *)(a1 + 192);
  SlowCase = *((_QWORD *)v11 + 3);
  if (SlowCase < *((_QWORD *)v11 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v11 + 5);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v11 + 6);
    *((_QWORD *)v11 + 4) = SlowCase + HIDWORD(v18);
    *((_QWORD *)v11 + 5) = SlowCase + (int)v18;
LABEL_4:
    *((_QWORD *)v11 + 3) = SlowCase + 32;
    goto LABEL_5;
  }
  v19 = (uint64_t)v11;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v19, a1 + 192, 32, 0, 0, v20, v21, v22);
  v12 = (JSC::Heap *)(a1 + 192);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v14 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v14;
  *(_QWORD *)(SlowCase + 8) = 0;
  v15 = *a3;
  *(_QWORD *)(SlowCase + 16) = *a3;
  v16 = *(_QWORD *)(a2 + 40);
  if (*(_BYTE *)(a1 + 755))
  {
    __dmb(0xAu);
    v15 = *(JSC::ArrayBuffer **)(SlowCase + 16);
  }
  JSC::Heap::addReference(v12, (JSC::JSCell *)SlowCase, v15);
  (*(void (**)(_QWORD, uint64_t, _QWORD, unint64_t))(**(_QWORD **)(a1 + 93024) + 24))(*(_QWORD *)(a1 + 93024), v16, *(_QWORD *)(SlowCase + 16), SlowCase);
  return SlowCase;
}

uint64_t JSC::JSArrayBuffer::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 38;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSArrayBuffer::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

BOOL JSC::JSArrayBuffer::isShared(JSC::JSArrayBuffer *this)
{
  uint64_t (*v1)();

  if (*(_QWORD *)(*((_QWORD *)this + 2) + 32))
    v1 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v1 = 0;
  return v1 != 0;
}

void JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)1>::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1100000002;
  *(_QWORD *)(v6 + 8) = "SharedArrayBuffer";
  *(_DWORD *)(v6 + 16) = 4;
  v31 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)1, (JSC::VM *)&v31, 1, v7, v8, v9);
  v18 = v31;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v14, v15, v16, v17);
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2752), *(_QWORD *)(*((_QWORD *)a1 + 5) + 1640), (const JSC::PropertyTable *)0x16, v19, v20, v21, v22);
}

uint64_t JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)1>::createStructure(JSC::VM *a1, JSC::VM *a2, uint64_t this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = (unint64_t *)((char *)a1 + 40136);
  v19 = 67099;
  if ((this & 0xFFFE000000000002) == 0 && this && *(unsigned __int8 *)(this + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(this, a1, a9, this, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM(a1, a2, this, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)a1 + 40112, (uint64_t)a1 + 192, 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, this, (uint64_t)&v19, (unint64_t)&JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)1>::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::ArrayBuffer **WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(JSC::ArrayBuffer **a1, JSC::ArrayBuffer **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::ArrayBuffer *v9;
  JSC::ArrayBuffer *v10;
  BOOL v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = *a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    v11 = *(_DWORD *)v10 == 2;
    *(_DWORD *)v10 -= 2;
    if (v11)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v10, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  return a1;
}

JSC::Exception *JSC::callArrayBuffer(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"ArrayBuffer", 12);
}

JSC::Exception *JSC::constructSharedArrayBuffer(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  int v12;
  double v13;
  JSC::JSObject *v14;
  unint64_t v15;
  uint64_t v16;
  JSC::JSObject *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  JSC::JSGlobalObject *v21;
  JSC::JSGlobalObject *i;
  char **v23;
  uint64_t v24;
  unint64_t v25;
  JSC::JSObject *SubclassStructure;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  JSC::JSGlobalObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  JSC::JSObject *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t OutOfMemoryError;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  JSC::Exception *v63;
  uint64_t v65;
  unint64_t v66;
  JSC::Heap **v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  JSC::Exception *v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  int v84;
  int v85;
  uint64_t (*v86)(JSC::JSObject **);
  JSC::JSObject **v87;
  int v88;
  int v89;
  uint64_t (*v90)(JSC::JSObject **);
  JSC::JSObject **v91;
  int v92;
  int v93;
  uint64_t (*v94)(JSC::JSObject **);
  JSC::JSObject **v95;
  WTF::StringImpl *v96;
  JSC::ArrayBuffer *v97;
  JSC::JSObject *v98;
  uint64_t v99;
  char *v100;

  v11 = *(_QWORD *)(this + 56);
  v12 = *((_DWORD *)a2 + 8);
  v13 = 0.0;
  if (v12 == 1)
    goto LABEL_13;
  v14 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v98 = v14;
  if ((unint64_t)v14 >= 0xFFFE000000000000)
  {
    v13 = (double)(int)v14;
  }
  else
  {
    v15 = (unint64_t)v14 - 0x2000000000000;
    if (v15 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase(&v98, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      v13 = *(double *)a9.i64;
    }
    else
    {
      v13 = *(double *)&v15;
    }
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v88 = *(_DWORD *)(v11 + 80);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (!BYTE2(qword_1ECF4C7A8))
    goto LABEL_13;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_13;
  v16 = *((_QWORD *)a2 + 7);
  if ((v16 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) < 0x17u)
    goto LABEL_13;
  v17 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)v16, this, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1800), (uint64_t)a4, a5, a6, a7, a8);
  v98 = v17;
  if (*(_DWORD *)(v11 + 80))
  {
    v92 = *(_DWORD *)(v11 + 80);
    if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
    v17 = v98;
  }
  if (v17 == (JSC::JSObject *)10)
  {
LABEL_13:
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v97 = 0;
    goto LABEL_14;
  }
  v20 = JSC::JSValue::toTypedArrayIndex(&v98, (JSC::JSGlobalObject *)this, (uint64_t)"maxByteLength", 14, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v11 + 80))
  {
    v93 = *(_DWORD *)(v11 + 80);
    if ((v93 & 0x27) != 0 && (v93 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v97 = 0;
  *(double *)a9.i64 = (double)v20;
  if (v13 <= (double)v20)
  {
    v18 = 1;
    v19 = 1;
LABEL_14:
    v21 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
    if (v21 == *((JSC::JSGlobalObject **)a2 + 3))
    {
      v27 = *(_QWORD *)(this + 1144);
      if ((v27 & 1) == 0)
        goto LABEL_28;
      v90 = *(uint64_t (**)(JSC::JSObject **))(v27 & 0xFFFFFFFFFFFFFFFCLL);
      v91 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v91 = (JSC::JSObject **)(this - 16);
      v98 = *v91;
      v99 = this;
      v100 = (char *)(this + 1144);
      SubclassStructure = (JSC::JSObject *)v90(&v98);
    }
    else
    {
      v98 = *(JSC::JSObject **)(this + 56);
      for (i = v21; ; i = (JSC::JSGlobalObject *)*((_QWORD *)i + 2))
      {
        while (1)
        {
          v23 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
          if (v23 != &JSC::JSBoundFunction::s_info && v23 != &JSC::JSRemoteFunction::s_info)
            break;
          i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
        }
        if (*((_BYTE *)i + 5) != 61)
        {
          v24 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
          goto LABEL_23;
        }
        if (JSC::ProxyObject::isRevoked(i))
          break;
      }
      JSC::throwTypeError(this, &v98, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
      v24 = 0;
LABEL_23:
      if (*(_DWORD *)(v11 + 80))
      {
        v85 = *(_DWORD *)(v11 + 80);
        if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v11 + 16))
        {
          v27 = 0;
          goto LABEL_28;
        }
      }
      v25 = *(_QWORD *)(v24 + 1144);
      if ((v25 & 1) != 0)
      {
        v86 = *(uint64_t (**)(JSC::JSObject **))(v25 & 0xFFFFFFFFFFFFFFFCLL);
        v87 = (JSC::JSObject **)(v24 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v24 & 8) != 0)
          v87 = (JSC::JSObject **)(v24 - 16);
        v98 = *v87;
        v99 = v24;
        v100 = (char *)(v24 + 1144);
        v25 = v86(&v98);
      }
      SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v21, (JSC::JSObject *)v25, a4, a5, a6, a7, a8);
    }
    v27 = (unint64_t)SubclassStructure;
LABEL_28:
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_29;
    v84 = *(_DWORD *)(v11 + 80);
    if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_29:
      if (v12 == 1)
      {
        v28 = 0;
LABEL_32:
        if (v18)
        {
          JSC::ArrayBuffer::tryCreateShared((JSC::ArrayBuffer *)v11, v28, 1u, v20, &v98);
          v38 = v98;
          v97 = v98;
          if (!v98)
          {
LABEL_41:
            OutOfMemoryError = JSC::createOutOfMemoryError(this, v32);
            v63 = (JSC::Exception *)OutOfMemoryError;
            if ((OutOfMemoryError & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16
                                                                      * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                      + 0x4C)))
            {
              v63 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)OutOfMemoryError, 0, v57, v58, v59, v60, v61);
            }
            return JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v63, v62, v57, v58, v59, v60, v61);
          }
        }
        else
        {
          JSC::ArrayBuffer::tryCreate(v28, 1, v20, v19, 0, a6, a7, a8, &v98);
          v38 = v98;
          v97 = v98;
          if (!v98)
            goto LABEL_41;
          JSC::ArrayBufferContents::makeShared((JSC::JSObject *)((char *)v98 + 16));
          *((_BYTE *)v38 + 93) = 1;
        }
        v46 = JSC::JSArrayBuffer::create(v11, v27, &v97, v33, v34, v35, v36, v37);
        v47 = *(_DWORD *)v38 == 2;
        *(_DWORD *)v38 -= 2;
        if (!v47)
          return (JSC::Exception *)v46;
        JSC::ArrayBuffer::~ArrayBuffer(v38, v39, v40, v41, v42, v43, v44, v45);
LABEL_40:
        WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
        return (JSC::Exception *)v46;
      }
      v98 = (JSC::JSObject *)(*(_QWORD *)&v13 + 0x2000000000000);
      v28 = JSC::JSValue::toTypedArrayIndex(&v98, (JSC::JSGlobalObject *)this, (uint64_t)"length", 7, a5, a6, a7, a8, a9);
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_32;
      v89 = *(_DWORD *)(v11 + 80);
      if ((v89 & 0x27) != 0 && (v89 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v29, v30, v31, a6, a7, a8);
      if (!*(_QWORD *)(v11 + 16))
        goto LABEL_32;
    }
    return 0;
  }
  v65 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v65 = 0x2F00000002;
  *(_QWORD *)(v65 + 8) = "ArrayBuffer length exceeds maxByteLength option";
  *(_DWORD *)(v65 + 16) = 4;
  v96 = (WTF::StringImpl *)v65;
  v66 = *(_QWORD *)(this + 128);
  v67 = *(JSC::Heap ***)(this + 56);
  if ((v66 & 1) != 0)
  {
    v94 = *(uint64_t (**)(JSC::JSObject **))(v66 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v95 = (JSC::JSObject **)(this - 16);
    else
      v95 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v98 = *v95;
    v99 = this;
    v100 = (char *)(this + 128);
    v66 = v94(&v98);
  }
  v68 = JSC::ErrorInstance::create(v67, v66, &v96, 0, 0, 0, 2, 1);
  v75 = (JSC::Exception *)v68;
  if ((v68 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v68 & 0xFFFFFFFE) + 0x4C)))
  {
    v75 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v68, 0, v69, v70, v71, v72, v73);
  }
  v46 = (unint64_t)JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v75, v74, v69, v70, v71, v72, v73);
  v83 = v96;
  v96 = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 != 2)
    {
      *(_DWORD *)v83 -= 2;
      return (JSC::Exception *)v46;
    }
    WTF::StringImpl::~StringImpl(v83, v76, v77, v78, v79, v80, v81, v82);
    goto LABEL_40;
  }
  return (JSC::Exception *)v46;
}

void JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)0>::finishCreation(JSC::JSObject *a1, JSC *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::AtomStringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  WTF::StringImpl *v37;
  WTF::AtomStringImpl *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  WTF::StringImpl *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  WTF::StringImpl *v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;

  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0xB00000002;
  *(_QWORD *)(v6 + 8) = "ArrayBuffer";
  *(_DWORD *)(v6 + 16) = 4;
  v114 = (WTF::StringImpl *)v6;
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, (const WTF::String *)1, (JSC::VM *)&v114, 1, v7, v8, v9);
  v18 = v114;
  v114 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::~StringImpl(v18, v10, v11, v12, v13, v14, v15, v16);
      WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    else
    {
      *(_DWORD *)v18 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a3, 14, v14, v15, v16, v17);
  v19 = *((_QWORD *)a1 + 5);
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)a1, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2752), *(_QWORD *)(v19 + 1632), (const JSC::PropertyTable *)0x16, v20, v21, v22, v23);
  v24 = *((_QWORD *)a2 + 5244);
  v25 = *(WTF::StringImpl **)(v24 + 1688);
  if (!v25)
  {
    v114 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, (uint64_t)a2, v19, (unint64_t *)&v114, 1, (uint64_t)JSC::arrayBufferFuncIsView, 0, 0, 4u);
    goto LABEL_13;
  }
  v26 = *(_DWORD *)v25 + 2;
  *(_DWORD *)v25 = v26;
  if ((*((_BYTE *)v25 + 16) & 0x20) != 0)
  {
    v27 = *(WTF::StringImpl **)(v24 + 872);
    if (!v27)
      goto LABEL_8;
    v26 = *(_DWORD *)v27;
  }
  else
  {
    v27 = v25;
  }
  *(_DWORD *)v27 = v26 + 2;
LABEL_8:
  v114 = v27;
  v35 = JSC::JSFunction::create((uint64_t)a2, v19, 1, &v114, (uint64_t)JSC::arrayBufferFuncIsView, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v37 = v114;
  v114 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v106, v107, v108, v109, v110, v111, v112, v113);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)v25, v35, 4, v32, v33, v34, v36);
  if (*(_DWORD *)v25 == 2)
  {
    WTF::StringImpl::~StringImpl(v25, v38, v39, v40, v41, v42, v43, v44);
    WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
  }
  else
  {
    *(_DWORD *)v25 -= 2;
  }
LABEL_13:
  v45 = JSC::Symbols::isViewPrivateName[0] + 4;
  JSC::Symbols::isViewPrivateName[0] += 4;
  if ((byte_1ECF305B0 & 0x20) == 0)
  {
    v46 = (WTF::StringImpl *)JSC::Symbols::isViewPrivateName;
LABEL_15:
    *(_DWORD *)v46 = v45 + 2;
    goto LABEL_16;
  }
  v46 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 872);
  if (v46)
  {
    v45 = *(_DWORD *)v46;
    goto LABEL_15;
  }
LABEL_16:
  v114 = v46;
  v54 = JSC::JSFunction::create((uint64_t)a2, v19, 1, &v114, (uint64_t)JSC::arrayBufferFuncIsView, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v56 = v114;
  v114 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
    {
      WTF::StringImpl::~StringImpl(v56, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
    }
    else
    {
      *(_DWORD *)v56 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, (unint64_t)JSC::Symbols::isViewPrivateName, v54, 4, v51, v52, v53, v55);
  v64 = JSC::Symbols::isViewPrivateName[0] - 2;
  if (JSC::Symbols::isViewPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isViewPrivateName, v57, v58, v59, v60, v61, v62, v63);
    WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
    v64 = JSC::Symbols::isViewPrivateName[0];
  }
  else
  {
    JSC::Symbols::isViewPrivateName[0] -= 2;
  }
  v65 = v64 - 2;
  if (v65)
  {
    JSC::Symbols::isViewPrivateName[0] = v65;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::isViewPrivateName, v57, v58, v59, v60, v61, v62, v63);
    WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
  }
}

uint64_t JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)0>::createStructure(JSC::VM *a1, JSC::VM *a2, uint64_t this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = (unint64_t *)((char *)a1 + 40136);
  v19 = 67099;
  if ((this & 0xFFFE000000000002) == 0 && this && *(unsigned __int8 *)(this + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(this, a1, a9, this, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM(a1, a2, this, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)a1 + 40112, (uint64_t)a1 + 192, 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, this, (uint64_t)&v19, (unint64_t)&JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)0>::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::JSObject *JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)0>::constructImpl(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[200];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 200);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

JSC::Exception *JSC::constructArrayBuffer(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(WTF::StringImpl **);
  WTF::StringImpl **v50;
  JSC::JSObject *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  const WTF::String *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  JSC::ArrayBuffer *v70;
  uint64_t v71;
  JSC::JSGlobalObject *v72;
  WTF::StringImpl *v73;
  JSC::JSGlobalObject **v74;
  char *v75;

  v11 = *(_QWORD *)(this + 56);
  v71 = v11;
  v72 = (JSC::JSGlobalObject *)this;
  v12 = *((_DWORD *)a2 + 8);
  if (v12 == 1)
  {
    v15 = 0.0;
LABEL_10:
    v17 = 0;
    v18 = 0;
    v70 = 0;
    goto LABEL_11;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  v73 = v13;
  if ((unint64_t)v13 >= 0xFFFE000000000000)
  {
    v15 = (double)(int)v13;
  }
  else
  {
    v14 = (unint64_t)v13 - 0x2000000000000;
    if (v14 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase(&v73, (JSC::JSGlobalObject *)this, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      v15 = *(double *)a9.i64;
    }
    else
    {
      v15 = *(double *)&v14;
    }
  }
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (!BYTE2(qword_1ECF4C7A8))
    goto LABEL_10;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_10;
  v16 = *((_QWORD *)a2 + 7);
  if ((v16 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) < 0x17u)
    goto LABEL_10;
  v52 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v16, this, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1800), (uint64_t)a4, a5, a6, a7, a8);
  v73 = v52;
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (v52 == (WTF::StringImpl *)10)
    goto LABEL_10;
  v18 = JSC::JSValue::toTypedArrayIndex(&v73, (JSC::JSGlobalObject *)this, (uint64_t)"maxByteLength", 14, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v70 = 0;
  *(double *)a9.i64 = (double)v18;
  if (v15 > (double)v18)
  {
    v53 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v53 = 0x2F00000002;
    *(_QWORD *)(v53 + 8) = "ArrayBuffer length exceeds maxByteLength option";
    *(_DWORD *)(v53 + 16) = 4;
    v73 = (WTF::StringImpl *)v53;
    v55 = JSC::createRangeError(this, &v73, v54);
    v38 = JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v55, v56, v57, v58, v59, v60);
    v68 = v73;
    v73 = 0;
    if (!v68)
      return (JSC::Exception *)v38;
    if (*(_DWORD *)v68 != 2)
    {
      *(_DWORD *)v68 -= 2;
      return (JSC::Exception *)v38;
    }
    WTF::StringImpl::~StringImpl(v68, v61, v62, v63, v64, v65, v66, v67);
    goto LABEL_21;
  }
  v17 = 1;
LABEL_11:
  v69 = *((_QWORD *)a2 + 5);
  if (v69 != *((_QWORD *)a2 + 3))
  {
    v73 = (WTF::StringImpl *)v11;
    v74 = &v72;
    v75 = (char *)&v69;
    v51 = JSC::JSGenericArrayBufferConstructor<(JSC::ArrayBufferSharingMode)0>::constructImpl(JSC::JSGlobalObject *,JSC::CallFrame *)::{lambda(void)#1}::operator()((uint64_t *)&v73, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_30:
    v19 = (unint64_t)v51;
    goto LABEL_13;
  }
  v19 = *(_QWORD *)(this + 1600);
  if ((v19 & 1) != 0)
  {
    v49 = *(uint64_t (**)(WTF::StringImpl **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
    v50 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v50 = (WTF::StringImpl **)(this - 16);
    v73 = *v50;
    v74 = (JSC::JSGlobalObject **)this;
    v75 = (char *)(this + 1600);
    v51 = (JSC::JSObject *)v49(&v73);
    goto LABEL_30;
  }
LABEL_13:
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (v12 == 1)
  {
    v24 = 0;
  }
  else
  {
    v73 = (WTF::StringImpl *)(*(_QWORD *)&v15 + 0x2000000000000);
    v24 = JSC::JSValue::toTypedArrayIndex(&v73, v72, (uint64_t)"length", 7, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v20, v21, v22, v23, a6, a7, a8))
    {
      return 0;
    }
  }
  JSC::ArrayBuffer::tryCreate(v24, 1, v18, v17, 0, a6, a7, a8, &v73);
  v30 = v73;
  v70 = v73;
  if (!v73)
    return JSC::throwOutOfMemoryError(v72, (JSC::JSGlobalObject *)&v71);
  v38 = JSC::JSArrayBuffer::create(v11, v19, &v70, v25, v26, v27, v28, v29);
  v39 = *(_DWORD *)v30 == 2;
  *(_DWORD *)v30 -= 2;
  if (v39)
  {
    JSC::ArrayBuffer::~ArrayBuffer(v30, v31, v32, v33, v34, v35, v36, v37);
LABEL_21:
    WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
  }
  return (JSC::Exception *)v38;
}

uint64_t JSC::arrayBufferFuncIsView(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;

  if (*((_DWORD *)a2 + 8) == 1)
    return 6;
  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) != 0)
    return 6;
  if (*(unsigned __int8 *)(v3 + 5) - 51 < 0xFFFFFFF4 || v3 == 0)
    return 6;
  else
    return 7;
}

void JSC::JSArrayBufferPrototype::finishCreation(JSC::JSObject *a1, uint64_t a2, JSC::VM *a3, int a4)
{
  char v4;
  uint64_t v8;
  unint64_t v9;
  int v10;
  const char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  WTF::StringImpl *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::AtomStringImpl *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  int v64;
  WTF::StringImpl *v65;
  WTF::AtomStringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  WTF::StringImpl *v75;
  WTF::AtomStringImpl *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  WTF::StringImpl *v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  WTF::StringImpl *v105;
  int v106;
  WTF::StringImpl *v107;
  WTF::AtomStringImpl *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __n128 v116;
  WTF::StringImpl *v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  WTF::AtomStringImpl *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  WTF::AtomStringImpl *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  WTF::StringImpl *v141;
  uint64_t (*v142)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *);
  unint64_t *v143;
  WTF::AtomStringImpl *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t (*v255)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *);
  unint64_t *v256;
  WTF::StringImpl *v257;
  WTF::AtomStringImpl *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  WTF::StringImpl *v265;
  WTF::AtomStringImpl *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  WTF::StringImpl *v273;
  WTF::AtomStringImpl *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  WTF::StringImpl *v281;
  WTF::AtomStringImpl *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  void *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  void *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;
  WTF::StringImpl *v323;
  WTF::StringImpl *v324;
  WTF::StringImpl *v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;

  v4 = a4;
  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  v8 = a2 + 41952;
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 41952) + 2776);
  v10 = 12;
  if (a4)
  {
    v10 = 18;
    v11 = "SharedArrayBuffer";
  }
  else
  {
    v11 = "ArrayBuffer";
  }
  v12 = v10 - 1;
  v13 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_DWORD *)v13 = 2;
  *(_DWORD *)(v13 + 4) = v12;
  *(_QWORD *)(v13 + 8) = v11;
  *(_DWORD *)(v13 + 16) = 4;
  v329 = (WTF::StringImpl *)v13;
  v20 = JSC::jsNontrivialString(a2, (JSC::VM *)&v329, v14, v15, v16, v17, v18, v19);
  JSC::JSObject::putDirectWithoutTransition(a1, a2, v9, v20, 6, v21, v22, v23, v24);
  v32 = v329;
  v329 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v151, v152, v153, v154, v155, v156, v157, v158);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  if ((v4 & 1) == 0)
  {
    v33 = *(_QWORD *)v8;
    v34 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 2312);
    if (!v34)
    {
      v328 = 0;
      JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, a2, (uint64_t)a3, (unint64_t *)&v328, 2, (uint64_t)JSC::arrayBufferProtoFuncSlice, 0, 0, 4u);
      goto LABEL_19;
    }
    v35 = *(_DWORD *)v34 + 2;
    *(_DWORD *)v34 = v35;
    v328 = v34;
    if ((*((_BYTE *)v34 + 16) & 0x20) != 0)
    {
      v36 = *(WTF::StringImpl **)(v33 + 872);
      if (!v36)
        goto LABEL_14;
      v35 = *(_DWORD *)v36;
    }
    else
    {
      v36 = v34;
    }
    *(_DWORD *)v36 = v35 + 2;
LABEL_14:
    v329 = v36;
    v44 = JSC::JSFunction::create(a2, (uint64_t)a3, 2, &v329, (uint64_t)JSC::arrayBufferProtoFuncSlice, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v46 = v329;
    v329 = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
      {
        WTF::StringImpl::~StringImpl(v46, v37, v38, v39, v40, v41, v42, v43);
        WTF::fastFree(v199, v200, v201, v202, v203, v204, v205, v206);
      }
      else
      {
        *(_DWORD *)v46 -= 2;
      }
    }
    JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v34, v44, 4, v41, v42, v43, v45);
    if (*(_DWORD *)v34 == 2)
    {
      WTF::StringImpl::~StringImpl(v34, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
    }
    else
    {
      *(_DWORD *)v34 -= 2;
    }
LABEL_19:
    v54 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 920);
    if (v54)
    {
      *(_DWORD *)v54 += 2;
      v327 = v54;
      JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, (unint64_t *)&v327, (uint64_t)JSC::arrayBufferProtoGetterFuncByteLength, 0, (const JSC::PropertyTable *)0x16);
      v327 = 0;
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl(v54, v55, v56, v57, v58, v59, v60, v61);
        WTF::fastFree(v167, v168, v169, v170, v171, v172, v173, v174);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
    else
    {
      v327 = 0;
      JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, (unint64_t *)&v327, (uint64_t)JSC::arrayBufferProtoGetterFuncByteLength, 0, (const JSC::PropertyTable *)0x16);
      v327 = 0;
    }
    if (!BYTE2(qword_1ECF4C7A8))
      return;
    v62 = *(_QWORD *)v8;
    v63 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 2200);
    if (!v63)
    {
      v328 = 0;
      JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, a2, (uint64_t)a3, (unint64_t *)&v328, 1, (uint64_t)JSC::arrayBufferProtoFuncResize, 0, 0, 4u);
      goto LABEL_32;
    }
    v64 = *(_DWORD *)v63 + 2;
    *(_DWORD *)v63 = v64;
    v328 = v63;
    if ((*((_BYTE *)v63 + 16) & 0x20) != 0)
    {
      v65 = *(WTF::StringImpl **)(v62 + 872);
      if (!v65)
        goto LABEL_27;
      v64 = *(_DWORD *)v65;
    }
    else
    {
      v65 = v63;
    }
    *(_DWORD *)v65 = v64 + 2;
LABEL_27:
    v329 = v65;
    v73 = JSC::JSFunction::create(a2, (uint64_t)a3, 1, &v329, (uint64_t)JSC::arrayBufferProtoFuncResize, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v75 = v329;
    v329 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
      {
        WTF::StringImpl::~StringImpl(v75, v66, v67, v68, v69, v70, v71, v72);
        WTF::fastFree(v231, v232, v233, v234, v235, v236, v237, v238);
      }
      else
      {
        *(_DWORD *)v75 -= 2;
      }
    }
    JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v63, v73, 4, v70, v71, v72, v74);
    if (*(_DWORD *)v63 == 2)
    {
      WTF::StringImpl::~StringImpl(v63, v76, v77, v78, v79, v80, v81, v82);
      WTF::fastFree(v175, v176, v177, v178, v179, v180, v181, v182);
    }
    else
    {
      *(_DWORD *)v63 -= 2;
    }
LABEL_32:
    if (!(_BYTE)qword_1ECF4C7A0)
      goto LABEL_51;
    v83 = *(_QWORD *)v8;
    v84 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 2544);
    if (!v84)
    {
      v329 = 0;
      JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, a2, (uint64_t)a3, (unint64_t *)&v329, 0, (uint64_t)JSC::arrayBufferProtoFuncTransfer, 0, 0, 4u);
      goto LABEL_42;
    }
    v85 = *(_DWORD *)v84 + 2;
    *(_DWORD *)v84 = v85;
    if ((*((_BYTE *)v84 + 16) & 0x20) != 0)
    {
      v86 = *(WTF::StringImpl **)(v83 + 872);
      if (!v86)
        goto LABEL_37;
      v85 = *(_DWORD *)v86;
    }
    else
    {
      v86 = v84;
    }
    *(_DWORD *)v86 = v85 + 2;
LABEL_37:
    v329 = v86;
    v94 = JSC::JSFunction::create(a2, (uint64_t)a3, 0, &v329, (uint64_t)JSC::arrayBufferProtoFuncTransfer, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v96 = v329;
    v329 = 0;
    if (v96)
    {
      if (*(_DWORD *)v96 == 2)
      {
        WTF::StringImpl::~StringImpl(v96, v87, v88, v89, v90, v91, v92, v93);
        WTF::fastFree(v239, v240, v241, v242, v243, v244, v245, v246);
      }
      else
      {
        *(_DWORD *)v96 -= 2;
      }
    }
    JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v84, v94, 4, v91, v92, v93, v95);
    if (*(_DWORD *)v84 == 2)
    {
      WTF::StringImpl::~StringImpl(v84, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v207, v208, v209, v210, v211, v212, v213, v214);
    }
    else
    {
      *(_DWORD *)v84 -= 2;
    }
LABEL_42:
    v104 = *(_QWORD *)v8;
    v105 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 2552);
    if (!v105)
    {
      v329 = 0;
      JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, a2, (uint64_t)a3, (unint64_t *)&v329, 0, (uint64_t)JSC::arrayBufferProtoFuncTransferToFixedLength, 0, 0, 4u);
      goto LABEL_51;
    }
    v106 = *(_DWORD *)v105 + 2;
    *(_DWORD *)v105 = v106;
    if ((*((_BYTE *)v105 + 16) & 0x20) != 0)
    {
      v107 = *(WTF::StringImpl **)(v104 + 872);
      if (!v107)
        goto LABEL_46;
      v106 = *(_DWORD *)v107;
    }
    else
    {
      v107 = v105;
    }
    *(_DWORD *)v107 = v106 + 2;
LABEL_46:
    v329 = v107;
    v115 = JSC::JSFunction::create(a2, (uint64_t)a3, 0, &v329, (uint64_t)JSC::arrayBufferProtoFuncTransferToFixedLength, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v117 = v329;
    v329 = 0;
    if (v117)
    {
      if (*(_DWORD *)v117 == 2)
      {
        WTF::StringImpl::~StringImpl(v117, v108, v109, v110, v111, v112, v113, v114);
        WTF::fastFree(v247, v248, v249, v250, v251, v252, v253, v254);
      }
      else
      {
        *(_DWORD *)v117 -= 2;
      }
    }
    JSC::JSObject::putDirectWithoutTransition(a1, a2, (unint64_t)v105, v115, 4, v112, v113, v114, v116);
    if (*(_DWORD *)v105 == 2)
    {
      WTF::StringImpl::~StringImpl(v105, v118, v119, v120, v121, v122, v123, v124);
      WTF::fastFree(v215, v216, v217, v218, v219, v220, v221, v222);
    }
    else
    {
      *(_DWORD *)v105 -= 2;
    }
LABEL_51:
    v125 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 2192);
    if (v125)
    {
      *(_DWORD *)v125 += 2;
      v326 = v125;
      JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, (unint64_t *)&v326, (uint64_t)JSC::arrayBufferProtoGetterFuncResizable, 0, (const JSC::PropertyTable *)0x16);
      if (*(_DWORD *)v125 == 2)
      {
        WTF::StringImpl::~StringImpl(v125, v126, v127, v128, v129, v130, v131, v132);
        WTF::fastFree(v183, v184, v185, v186, v187, v188, v189, v190);
      }
      else
      {
        *(_DWORD *)v125 -= 2;
      }
    }
    else
    {
      v326 = 0;
      JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, (unint64_t *)&v326, (uint64_t)JSC::arrayBufferProtoGetterFuncResizable, 0, (const JSC::PropertyTable *)0x16);
    }
    v133 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 1800);
    if (v133)
    {
      *(_DWORD *)v133 += 2;
      v325 = v133;
      JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, (unint64_t *)&v325, (uint64_t)JSC::arrayBufferProtoGetterFuncMaxByteLength, 0, (const JSC::PropertyTable *)0x16);
      if (*(_DWORD *)v133 == 2)
      {
        WTF::StringImpl::~StringImpl(v133, v134, v135, v136, v137, v138, v139, v140);
        WTF::fastFree(v191, v192, v193, v194, v195, v196, v197, v198);
      }
      else
      {
        *(_DWORD *)v133 -= 2;
      }
    }
    else
    {
      v325 = 0;
      JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, (unint64_t *)&v325, (uint64_t)JSC::arrayBufferProtoGetterFuncMaxByteLength, 0, (const JSC::PropertyTable *)0x16);
    }
    if ((_BYTE)qword_1ECF4C7A0)
    {
      v141 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 1176);
      if (v141)
      {
        *(_DWORD *)v141 += 2;
        v324 = v141;
        v142 = JSC::arrayBufferProtoGetterFuncDetached;
        v143 = (unint64_t *)&v324;
        goto LABEL_60;
      }
      v324 = 0;
      v255 = JSC::arrayBufferProtoGetterFuncDetached;
      v256 = (unint64_t *)&v324;
      goto LABEL_92;
    }
    return;
  }
  v257 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 2312);
  if (v257)
  {
    *(_DWORD *)v257 += 2;
    v329 = v257;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, a2, (uint64_t)a3, (unint64_t *)&v329, 2, (uint64_t)JSC::sharedArrayBufferProtoFuncSlice, 0, 0, 4u);
    if (*(_DWORD *)v257 == 2)
    {
      WTF::StringImpl::~StringImpl(v257, v258, v259, v260, v261, v262, v263, v264);
      WTF::fastFree(v289, v290, v291, v292, v293, v294, v295, v296);
    }
    else
    {
      *(_DWORD *)v257 -= 2;
    }
  }
  else
  {
    v329 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, a2, (uint64_t)a3, (unint64_t *)&v329, 2, (uint64_t)JSC::sharedArrayBufferProtoFuncSlice, 0, 0, 4u);
  }
  v265 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 920);
  if (v265)
  {
    *(_DWORD *)v265 += 2;
    v323 = v265;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, (unint64_t *)&v323, (uint64_t)JSC::sharedArrayBufferProtoGetterFuncByteLength, 0, (const JSC::PropertyTable *)0x16);
    if (*(_DWORD *)v265 == 2)
    {
      WTF::StringImpl::~StringImpl(v265, v266, v267, v268, v269, v270, v271, v272);
      WTF::fastFree(v297, v298, v299, v300, v301, v302, v303, v304);
    }
    else
    {
      *(_DWORD *)v265 -= 2;
    }
  }
  else
  {
    v323 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, (unint64_t *)&v323, (uint64_t)JSC::sharedArrayBufferProtoGetterFuncByteLength, 0, (const JSC::PropertyTable *)0x16);
  }
  if (BYTE2(qword_1ECF4C7A8))
  {
    v273 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 1424);
    if (v273)
    {
      *(_DWORD *)v273 += 2;
      v329 = v273;
      JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, a2, (uint64_t)a3, (unint64_t *)&v329, 1, (uint64_t)JSC::sharedArrayBufferProtoFuncGrow, 0, 0, 4u);
      if (*(_DWORD *)v273 == 2)
      {
        WTF::StringImpl::~StringImpl(v273, v274, v275, v276, v277, v278, v279, v280);
        WTF::fastFree(v305, v306, v307, v308, v309, v310, v311, v312);
      }
      else
      {
        *(_DWORD *)v273 -= 2;
      }
    }
    else
    {
      v329 = 0;
      JSC::JSObject::putDirectNativeFunctionWithoutTransition(a1, a2, (uint64_t)a3, (unint64_t *)&v329, 1, (uint64_t)JSC::sharedArrayBufferProtoFuncGrow, 0, 0, 4u);
    }
    v281 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 1432);
    if (v281)
    {
      *(_DWORD *)v281 += 2;
      v322 = v281;
      JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, (unint64_t *)&v322, (uint64_t)JSC::sharedArrayBufferProtoGetterFuncGrowable, 0, (const JSC::PropertyTable *)0x16);
      if (*(_DWORD *)v281 == 2)
      {
        WTF::StringImpl::~StringImpl(v281, v282, v283, v284, v285, v286, v287, v288);
        WTF::fastFree(v313, v314, v315, v316, v317, v318, v319, v320);
      }
      else
      {
        *(_DWORD *)v281 -= 2;
      }
    }
    else
    {
      v322 = 0;
      JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, (unint64_t *)&v322, (uint64_t)JSC::sharedArrayBufferProtoGetterFuncGrowable, 0, (const JSC::PropertyTable *)0x16);
    }
    v141 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 1800);
    if (v141)
    {
      *(_DWORD *)v141 += 2;
      v321 = v141;
      v142 = JSC::sharedArrayBufferProtoGetterFuncMaxByteLength;
      v143 = (unint64_t *)&v321;
LABEL_60:
      JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, v143, (uint64_t)v142, 0, (const JSC::PropertyTable *)0x16);
      if (*(_DWORD *)v141 == 2)
      {
        WTF::StringImpl::~StringImpl(v141, v144, v145, v146, v147, v148, v149, v150);
        WTF::fastFree(v223, v224, v225, v226, v227, v228, v229, v230);
      }
      else
      {
        *(_DWORD *)v141 -= 2;
      }
      return;
    }
    v321 = 0;
    v255 = JSC::sharedArrayBufferProtoGetterFuncMaxByteLength;
    v256 = (unint64_t *)&v321;
LABEL_92:
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)a1, (JSC::GetterSetter *)a2, a3, v256, (uint64_t)v255, 0, (const JSC::PropertyTable *)0x16);
  }
}

uint64_t JSC::arrayBufferProtoFuncSlice(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v10 = *((_QWORD *)a2 + 5);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
    goto LABEL_6;
  }
  v11 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_6:
    v12 = 10;
    return JSC::arrayBufferSlice(this, v10, v11, v12, 0, a7, a8, a9, a4);
  }
  v12 = *((_QWORD *)a2 + 7);
  return JSC::arrayBufferSlice(this, v10, v11, v12, 0, a7, a8, a9, a4);
}

unint64_t JSC::arrayBufferProtoGetterFuncByteLength(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return JSC::arrayBufferByteLength((unint64_t)this, *((_QWORD *)a2 + 5), 0);
}

uint64_t JSC::arrayBufferProtoFuncResize(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  const char *v14;
  uint64_t v15;
  JSC::Exception *v16;
  JSC::JSObject *v17;
  double v18;
  JSC::ArrayBuffer *v19;
  uint64_t v20;
  BOOL v21;
  WTF::StringImpl *v22;
  uint64_t result;
  unint64_t v24;
  JSC::Heap **v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  JSC::Exception *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t v42;
  unint64_t v43;
  JSC::Heap **v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  JSC::Exception *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  int v62;
  JSC::Heap **v63;
  uint64_t (*v64)(uint64_t *);
  uint64_t *v65;
  JSC::Heap **v66;
  uint64_t (*v67)(uint64_t *);
  uint64_t *v68;
  unint64_t v69;
  double v70;
  WTF::StringImpl *v71;
  JSC::VM *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;

  v9 = (uint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v72 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v11 + 5) != 38
    || ((v12 = *(_QWORD *)(v11 + 16), *(_QWORD *)(v12 + 32))
      ? (v13 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
      : (v13 = 0),
        v13))
  {
    v14 = "Receiver must be ArrayBuffer";
LABEL_8:
    v15 = 29;
    return JSC::throwTypeError((unint64_t)this, &v72, (uint64_t)v14, v15);
  }
  if (!*(_BYTE *)(v12 + 64))
  {
    v14 = "ArrayBuffer is not resizable";
    goto LABEL_8;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v74 = 10;
    goto LABEL_42;
  }
  v17 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v74 = (uint64_t)v17;
  if ((unint64_t)v17 < 0xFFFE000000000000)
  {
    v69 = (unint64_t)v17 - 0x2000000000000;
    if (v69 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v61 = *(double *)&v69;
      goto LABEL_43;
    }
LABEL_42:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v74, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_43:
    v18 = trunc(v61 + 0.0);
    goto LABEL_14;
  }
  v18 = (double)(int)v17;
LABEL_14:
  if (*(_DWORD *)(v10 + 80))
  {
    v62 = *(_DWORD *)(v10 + 80);
    if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
    {
      v70 = v18;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v18 = v70;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v19 = *(JSC::ArrayBuffer **)(v11 + 16);
  v20 = *((_QWORD *)v19 + 2);
  if (!v20
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    v14 = "Receiver is detached";
    this = (JSC *)v9;
    v15 = 21;
    return JSC::throwTypeError((unint64_t)this, &v72, (uint64_t)v14, v15);
  }
  v21 = ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
     || (*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v21 || v18 < 0.0)
  {
    v42 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v42 = 0x1A00000002;
    *(_QWORD *)(v42 + 8) = "new length is out of range";
    *(_DWORD *)(v42 + 16) = 4;
    v73 = (WTF::StringImpl *)v42;
    v43 = *(_QWORD *)(v9 + 128);
    v44 = *(JSC::Heap ***)(v9 + 56);
    if ((v43 & 1) != 0)
    {
      v63 = *(JSC::Heap ***)(v9 + 56);
      v64 = *(uint64_t (**)(uint64_t *))(v43 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v65 = (uint64_t *)(v9 - 16);
      else
        v65 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v74 = *v65;
      v75 = v9;
      v76 = (char *)(v9 + 128);
      v43 = v64(&v74);
      v44 = v63;
    }
    v45 = JSC::ErrorInstance::create(v44, v43, &v73, 0, 0, 0, 2, 1);
    v52 = (JSC::Exception *)v45;
    if ((v45 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C)))
    {
      v52 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v45, 0, v46, v47, v48, v49, v50);
    }
    v16 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v52, v51, v46, v47, v48, v49, v50);
    v41 = v73;
    v73 = 0;
    if (!v41)
      return (uint64_t)v16;
LABEL_36:
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
    return (uint64_t)v16;
  }
  v22 = (WTF::StringImpl *)v18;
  JSC::ArrayBuffer::resize(v19, (JSC::VM *)v10, (unint64_t)v18, a4, a5, a6, a7, a8, (uint64_t)&v74);
  if (!(_DWORD)v75)
    return 10;
  v74 = (uint64_t)"ArrayBuffer resize failed with new byte length ";
  v75 = 48;
  v73 = v22;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v74, (unint64_t *)&v73, (int **)&v71);
  if (v71)
  {
    v24 = *(_QWORD *)(v9 + 128);
    v25 = *(JSC::Heap ***)(v9 + 56);
    if ((v24 & 1) != 0)
    {
      v66 = *(JSC::Heap ***)(v9 + 56);
      v67 = *(uint64_t (**)(uint64_t *))(v24 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v68 = (uint64_t *)(v9 - 16);
      else
        v68 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v74 = *v68;
      v75 = v9;
      v76 = (char *)(v9 + 128);
      v24 = v67(&v74);
      v25 = v66;
    }
    v26 = JSC::ErrorInstance::create(v25, v24, &v71, 0, 0, 0, 2, 1);
    v33 = (JSC::Exception *)v26;
    if ((v26 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C)))
    {
      v33 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v26, 0, v27, v28, v29, v30, v31);
    }
    v16 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v33, v32, v27, v28, v29, v30, v31);
    v41 = v71;
    v71 = 0;
    if (!v41)
      return (uint64_t)v16;
    goto LABEL_36;
  }
  __break(0xC471u);
  return result;
}

unint64_t JSC::arrayBufferProtoFuncTransfer(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *((_QWORD *)a2 + 5);
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  return JSC::arrayBufferProtoFuncTransferImpl(this, v10, (JSC::JSObject *)v11, 0, a6, a7, a8, a9, a4);
}

unint64_t JSC::arrayBufferProtoFuncTransferToFixedLength(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *((_QWORD *)a2 + 5);
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  return JSC::arrayBufferProtoFuncTransferImpl(this, v10, (JSC::JSObject *)v11, 1, a6, a7, a8, a9, a4);
}

uint64_t JSC::arrayBufferProtoGetterFuncResizable(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  JSC::VM *v7;

  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 38)
    return JSC::throwTypeError((unint64_t)this, &v7, (uint64_t)"Receiver must be ArrayBuffer", 29);
  v4 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v4 + 32)
     ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
     : 0)
  {
    return JSC::throwTypeError((unint64_t)this, &v7, (uint64_t)"Receiver must be ArrayBuffer", 29);
  }
  if (*(_BYTE *)(v4 + 64))
    return 7;
  return 6;
}

unint64_t JSC::arrayBufferProtoGetterFuncMaxByteLength(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  double v8;
  JSC::VM *v9;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 38)
    return JSC::throwTypeError((unint64_t)this, &v9, (uint64_t)"Receiver must be ArrayBuffer", 29);
  v4 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v4 + 32)
     ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
     : 0)
  {
    return JSC::throwTypeError((unint64_t)this, &v9, (uint64_t)"Receiver must be ArrayBuffer", 29);
  }
  if (!*(_BYTE *)(v4 + 64))
  {
    v7 = *(_QWORD *)(v4 + 48);
    if (!HIDWORD(v7))
    {
      if ((v7 & 0x80000000) == 0)
        return v7 | 0xFFFE000000000000;
      goto LABEL_15;
    }
LABEL_17:
    v8 = (double)v7;
    return *(_QWORD *)&v8 + 0x2000000000000;
  }
  v7 = *(_QWORD *)(v4 + 56);
  if (HIDWORD(v7))
    goto LABEL_17;
  if ((v7 & 0x80000000) != 0)
  {
LABEL_15:
    v8 = (double)v7;
    return *(_QWORD *)&v8 + 0x2000000000000;
  }
  return v7 | 0xFFFE000000000000;
}

uint64_t JSC::arrayBufferProtoGetterFuncDetached(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  JSC::VM *v8;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 38)
    return JSC::throwTypeError((unint64_t)this, &v8, (uint64_t)"Receiver must be ArrayBuffer", 29);
  v4 = *(_QWORD *)(v3 + 16);
  if (*(_QWORD *)(v4 + 32)
     ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
     : 0)
  {
    return JSC::throwTypeError((unint64_t)this, &v8, (uint64_t)"Receiver must be ArrayBuffer", 29);
  }
  v7 = *(_QWORD *)(v4 + 16);
  if (v7
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    return 6;
  }
  else
  {
    return 7;
  }
}

uint64_t JSC::sharedArrayBufferProtoFuncSlice(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v10 = *((_QWORD *)a2 + 5);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v11 = 10;
    goto LABEL_6;
  }
  v11 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_6:
    v12 = 10;
    return JSC::arrayBufferSlice(this, v10, v11, v12, 1, a7, a8, a9, a4);
  }
  v12 = *((_QWORD *)a2 + 7);
  return JSC::arrayBufferSlice(this, v10, v11, v12, 1, a7, a8, a9, a4);
}

unint64_t JSC::sharedArrayBufferProtoGetterFuncByteLength(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return JSC::arrayBufferByteLength((unint64_t)this, *((_QWORD *)a2 + 5), 1);
}

uint64_t JSC::sharedArrayBufferProtoFuncGrow(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  JSC::JSObject *v14;
  double v15;
  BOOL v16;
  WTF::StringImpl *v17;
  uint64_t result;
  unint64_t v19;
  JSC::Heap **v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  JSC::Exception *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  JSC::Exception *v36;
  WTF::StringImpl *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  JSC::Heap **v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  JSC::Exception *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  int v60;
  JSC::Heap **v61;
  uint64_t (*v62)(uint64_t *);
  uint64_t *v63;
  JSC::Heap **v64;
  uint64_t (*v65)(uint64_t *);
  uint64_t *v66;
  unint64_t v67;
  double v68;
  WTF::StringImpl *v69;
  JSC::VM *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;

  v10 = *(_QWORD *)(this + 56);
  v70 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0
    || *(_BYTE *)(v11 + 5) != 38
    || ((v12 = *(_QWORD *)(v11 + 16), *(_QWORD *)(v12 + 32))
      ? (v13 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance)
      : (v13 = 0),
        !v13))
  {
    v38 = "Receiver must be SharedArrayBuffer";
    v39 = 35;
    return JSC::throwTypeError(this, &v70, (uint64_t)v38, v39);
  }
  if (!*(_BYTE *)(v12 + 64))
  {
    v38 = "SharedArrayBuffer is not growable";
    v39 = 34;
    return JSC::throwTypeError(this, &v70, (uint64_t)v38, v39);
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v72 = 10;
    goto LABEL_38;
  }
  v14 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
  v72 = (uint64_t)v14;
  if ((unint64_t)v14 < 0xFFFE000000000000)
  {
    v67 = (unint64_t)v14 - 0x2000000000000;
    if (v67 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v59 = *(double *)&v67;
      goto LABEL_39;
    }
LABEL_38:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v72, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_39:
    v15 = trunc(v59 + 0.0);
    goto LABEL_11;
  }
  v15 = (double)(int)v14;
LABEL_11:
  if (*(_DWORD *)(v10 + 80))
  {
    v60 = *(_DWORD *)(v10 + 80);
    if ((v60 & 0x27) != 0 && (v60 & 0x20) == 0)
    {
      v68 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v15 = v68;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v16 = ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
     || (*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFLL) == 0;
  if (!v16 || v15 < 0.0)
  {
    v40 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v40 = 0x1A00000002;
    *(_QWORD *)(v40 + 8) = "new length is out of range";
    *(_DWORD *)(v40 + 16) = 4;
    v71 = (WTF::StringImpl *)v40;
    v41 = *(_QWORD *)(this + 128);
    v42 = *(JSC::Heap ***)(this + 56);
    if ((v41 & 1) != 0)
    {
      v61 = *(JSC::Heap ***)(this + 56);
      v62 = *(uint64_t (**)(uint64_t *))(v41 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v63 = (uint64_t *)(this - 16);
      else
        v63 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      v72 = *v63;
      v73 = this;
      v74 = (char *)(this + 128);
      v41 = v62(&v72);
      v42 = v61;
    }
    v43 = JSC::ErrorInstance::create(v42, v41, &v71, 0, 0, 0, 2, 1);
    v50 = (JSC::Exception *)v43;
    if ((v43 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C)))
    {
      v50 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v43, 0, v44, v45, v46, v47, v48);
    }
    v36 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v50, v49, v44, v45, v46, v47, v48);
    v37 = v71;
    v71 = 0;
    if (!v37)
      return (uint64_t)v36;
LABEL_32:
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v29, v30, v31, v32, v33, v34, v35);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
    return (uint64_t)v36;
  }
  v17 = (WTF::StringImpl *)v15;
  JSC::ArrayBuffer::grow(*(JSC::ArrayBuffer **)(v11 + 16), (JSC::VM *)v10, (unint64_t)v15, a4, a5, a6, a7, a8, (uint64_t)&v72);
  if (!(_DWORD)v73)
    return 10;
  v72 = (uint64_t)"grow failed with new byte length ";
  v73 = 34;
  v71 = v17;
  result = WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v72, (unint64_t *)&v71, (int **)&v69);
  if (v69)
  {
    v19 = *(_QWORD *)(this + 128);
    v20 = *(JSC::Heap ***)(this + 56);
    if ((v19 & 1) != 0)
    {
      v64 = *(JSC::Heap ***)(this + 56);
      v65 = *(uint64_t (**)(uint64_t *))(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v66 = (uint64_t *)(this - 16);
      else
        v66 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
      v72 = *v66;
      v73 = this;
      v74 = (char *)(this + 128);
      v19 = v65(&v72);
      v20 = v64;
    }
    v21 = JSC::ErrorInstance::create(v20, v19, &v69, 0, 0, 0, 2, 1);
    v28 = (JSC::Exception *)v21;
    if ((v21 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)))
    {
      v28 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v21, 0, v22, v23, v24, v25, v26);
    }
    v36 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v28, v27, v22, v23, v24, v25, v26);
    v37 = v69;
    v69 = 0;
    if (!v37)
      return (uint64_t)v36;
    goto LABEL_32;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::sharedArrayBufferProtoGetterFuncGrowable(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  JSC::VM *v7;

  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 38)
    return JSC::throwTypeError((unint64_t)this, &v7, (uint64_t)"Receiver must be SharedArrayBuffer", 35);
  v4 = *(_QWORD *)(v3 + 16);
  if (!(*(_QWORD *)(v4 + 32)
       ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
       : 0))
    return JSC::throwTypeError((unint64_t)this, &v7, (uint64_t)"Receiver must be SharedArrayBuffer", 35);
  if (*(_BYTE *)(v4 + 64))
    return 7;
  return 6;
}

uint64_t JSC::sharedArrayBufferProtoGetterFuncMaxByteLength(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  double v8;
  JSC::VM *v9;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v3 + 5) == 38)
  {
    v4 = *(_QWORD *)(v3 + 16);
    if (*(_QWORD *)(v4 + 32)
       ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
       : 0)
    {
      if (*(_BYTE *)(v4 + 64))
      {
        v6 = *(_QWORD *)(v4 + 56);
        if (!HIDWORD(v6))
        {
          if ((v6 & 0x80000000) == 0)
            return v6 | 0xFFFE000000000000;
          goto LABEL_15;
        }
      }
      else
      {
        v6 = *(_QWORD *)(v4 + 48);
        if (!HIDWORD(v6))
        {
          if ((v6 & 0x80000000) == 0)
            return v6 | 0xFFFE000000000000;
LABEL_15:
          v8 = (double)v6;
          return *(_QWORD *)&v8 + 0x2000000000000;
        }
      }
      v8 = (double)v6;
      return *(_QWORD *)&v8 + 0x2000000000000;
    }
  }
  return JSC::throwTypeError((unint64_t)this, &v9, (uint64_t)"Receiver must be SharedArrayBuffer", 35);
}

unint64_t JSC::JSArrayBufferPrototype::create(JSC *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t SlowCase;

  v9 = (uint64_t)a1;
  v10 = *((_QWORD *)a1 + 4863);
  if (v10 >= *((_QWORD *)a1 + 4864))
  {
    v10 = *((_QWORD *)a1 + 4865);
    if ((v10 & 1) != 0)
    {
      v14 = (uint64_t)a1 + 38880;
      v15 = (uint64_t)a1 + 192;
      v16 = a4;
      v18 = a3;
      JSC::sanitizeStackForVM(a1, a1, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v14, v15, 16, 0, 0, v19, v20, v21);
      a3 = v18;
      v9 = (uint64_t)a1;
      LODWORD(a4) = v16;
      v10 = SlowCase;
      goto LABEL_3;
    }
    v13 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)a1 + 4866);
    *((_QWORD *)a1 + 4864) = v10 + HIDWORD(v13);
    *((_QWORD *)a1 + 4865) = v10 + (int)v13;
  }
  *((_QWORD *)a1 + 4863) = v10 + 16;
LABEL_3:
  *(_DWORD *)v10 = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)v10 = a3 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  JSC::JSArrayBufferPrototype::finishCreation((JSC::JSObject *)v10, v9, a2, a4);
  return v10;
}

uint64_t JSC::JSArrayBufferPrototype::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 23;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSArrayBufferPrototype::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::JSArrayBufferView::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v29;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  if ((*((_BYTE *)this + 40) & 8) == 0)
    return;
  __dmb(0xBu);
  v17 = *((unsigned __int8 *)this + 40);
  if (v17 == 88)
  {
LABEL_4:
    v18 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
    goto LABEL_5;
  }
  if (v17 == 48 || v17 == 16)
  {
    v18 = (unint64_t)JSC::JSArrayBufferView::slowDownAndWasteMemory((uint64_t)this, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    v29 = v17 - 90;
    if (v29 > 0x33)
      goto LABEL_26;
    if (((1 << v29) & 0xF400000000000) == 0)
    {
      if (((1 << v29) & 0xF) == 0)
        goto LABEL_26;
      goto LABEL_4;
    }
    v18 = *((_QWORD *)this + 6);
  }
LABEL_5:
  if (!v18)
  {
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x198987BE4);
  }
  if (!*((_BYTE *)a2 + 130))
  {
    v19 = *((_QWORD *)a2 + 15);
    v20 = *(_DWORD **)(v19 + 48);
    v21 = v20[1];
    v22 = (~(v18 << 32) + v18) ^ ((~(v18 << 32) + v18) >> 22);
    v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
    v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
    v25 = v21 & ((v24 >> 31) ^ v24);
    v26 = v25;
    while (1)
    {
      v27 = *(_QWORD *)&v20[2 * v26 + 4];
      if (!v27)
        break;
      if (v18 == v27)
        return;
      v26 = ((_DWORD)v26 + 1) & v21;
      if ((_DWORD)v26 == (_DWORD)v25)
        goto LABEL_26;
    }
    if (WTF::ConcurrentPtrHashSet::addSlow(v19, v20, v21, v25, v26, v18, v15, v16))
    {
      if (*((_BYTE *)a2 + 131))
        (*(void (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 144))(a2, v18);
      ++*((_QWORD *)a2 + 9);
    }
  }
}

void JSC::JSArrayBufferView::visitChildren(JSC::JSArrayBufferView *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  char v27;

  v25[0] = a2;
  v25[1] = this;
  v27 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v26 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198987E64);
  }
  *((_QWORD *)a2 + 11) = v25;
  JSC::JSObject::visitChildren(this, a2, a3);
  if ((*((_BYTE *)this + 40) & 8) == 0)
    goto LABEL_24;
  __dmb(0xBu);
  v13 = *((unsigned __int8 *)this + 40);
  if (v13 == 88)
    goto LABEL_5;
  if (v13 == 48 || v13 == 16)
  {
    v14 = (unint64_t)JSC::JSArrayBufferView::slowDownAndWasteMemory((uint64_t)this, v6, v7, v8, v9, v10, v11, v12);
    if (!v14)
      goto LABEL_10;
  }
  else
  {
    v15 = v13 - 90;
    if (v15 > 0x33)
      goto LABEL_10;
    if (((1 << v15) & 0xF400000000000) == 0)
    {
      if (((1 << v15) & 0xF) == 0)
        goto LABEL_10;
LABEL_5:
      v14 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
      if (!v14)
        goto LABEL_10;
      goto LABEL_14;
    }
    v14 = *((_QWORD *)this + 6);
    if (!v14)
    {
LABEL_10:
      __break(0xC471u);
      JUMPOUT(0x198987D48);
    }
  }
LABEL_14:
  if (!*((_BYTE *)a2 + 130))
  {
    v16 = *((_QWORD *)a2 + 15);
    v17 = *(_DWORD **)(v16 + 48);
    v18 = v17[1];
    v19 = (~(v14 << 32) + v14) ^ ((~(v14 << 32) + v14) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = v22;
    while (1)
    {
      v24 = *(_QWORD *)&v17[2 * v23 + 4];
      if (!v24)
        break;
      if (v14 == v24)
        goto LABEL_24;
      v23 = ((_DWORD)v23 + 1) & v18;
      if ((_DWORD)v23 == (_DWORD)v22)
      {
        __break(0xC471u);
        JUMPOUT(0x198987E08);
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow(v16, v17, v18, v22, v23, v14, v11, v12))
    {
      if (*((_BYTE *)a2 + 131))
        (*(void (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 144))(a2, v14);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_24:
  *(_QWORD *)(v25[0] + 88) = v26;
}

uint64_t JSC::JSArrayBufferView::ConstructionContext::ConstructionContext(uint64_t a1, JSC *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t SlowCase;
  BOOL v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  size_t v32;

  v8 = a6;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (a4 <= 0x3E8)
  {
    v11 = a5 * a4 + 7;
    v12 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 0xFFFFFFFFFFFFFFF8) <= 0x1F60 && (v13 = *((_QWORD *)a2 + ((v12 + 15) >> 4) + 324)) != 0)
    {
      v14 = *(unsigned int *)(v13 + 60);
      SlowCase = *(_QWORD *)(v13 + 24);
      if (SlowCase >= *(_QWORD *)(v13 + 32))
      {
        SlowCase = *(_QWORD *)(v13 + 40);
        if ((SlowCase & 1) == 0)
        {
          v25 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v13 + 48);
          *(_QWORD *)(v13 + 32) = SlowCase + HIDWORD(v25);
          *(_QWORD *)(v13 + 40) = SlowCase + (int)v25;
          *(_QWORD *)(v13 + 24) = SlowCase + v14;
LABEL_7:
          *(_QWORD *)a1 = a3;
          *(_QWORD *)(a1 + 8) = SlowCase;
          *(_BYTE *)(a1 + 32) = 16;
          if (!v8)
          {
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              SlowCase = (SlowCase & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            if ((v11 & 0x7FFFFFFF8) != 0)
              bzero((void *)SlowCase, v11 & 0x7FFFFFFF8);
          }
          return a1;
        }
        v32 = a5 * a4 + 7;
        v26 = (char *)a2 + 192;
        JSC::sanitizeStackForVM(a2, a2, v12, a4, a5, a6, a7, a8);
        v27 = (uint64_t)v26;
        v11 = v32;
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v13, v27, v14, 0, 1, v28, v29, v30);
      }
      else
      {
        *(_QWORD *)(v13 + 24) = SlowCase + v14;
      }
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 2504, a2, v12, 0, a5, a6, a7, a8);
    }
    if (!SlowCase)
      return a1;
    goto LABEL_7;
  }
  v17 = !is_mul_ok(a4, a5);
  v18 = a4 * a5;
  if (v18 <= 0x100000000 && !v17)
  {
    v31 = a4 * a5;
    v20 = (_DWORD)a6 ? Gigacage::tryMalloc(0, v18) : Gigacage::tryZeroedMalloc(0, v18, a3, a4, a5, a6, a7, a8);
    *(_QWORD *)(a1 + 8) = v20;
    if (v20)
    {
      if (!qword_1ECF4C038
        || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
        || (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
      {
        if (v31 >= 0x101)
          JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)a2 + 192, 0, 0, v31, v21, v22, v23, v24);
        *(_QWORD *)a1 = a3;
        *(_BYTE *)(a1 + 32) = 48;
      }
    }
  }
  return a1;
}

uint64_t JSC::JSArrayBufferView::ConstructionContext::ConstructionContext(uint64_t result, JSC *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 *SlowCase;
  unint64_t *v17;
  __n128 *v18;
  __n128 *v19;
  unint64_t v20;
  uint64_t (*v21)();
  char v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = 0;
  if ((_BYTE)a7)
    v9 = a6;
  else
    v9 = 0;
  *(_QWORD *)(result + 16) = v9;
  *(_QWORD *)(result + 24) = a5;
  v10 = *(_QWORD *)a4;
  if (*(_BYTE *)(*(_QWORD *)a4 + 64))
  {
    if (*(_QWORD *)(v10 + 32))
      v21 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v21 = 0;
    if ((_BYTE)a7)
      v11 = 92;
    else
      v11 = 93;
    if ((_BYTE)a7)
      v22 = 90;
    else
      v22 = 91;
    if (v21)
      v11 = v22;
  }
  else
  {
    v11 = 88;
  }
  *(_BYTE *)(result + 32) = v11;
  v12 = *(_QWORD *)(v10 + 16);
  if (v12 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v12 = (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(result + 8) = v12 + a5;
  v13 = *(_QWORD *)a4;
  v14 = *((_QWORD *)a2 + 843);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 + 60);
    SlowCase = *(__n128 **)(v14 + 24);
    if ((unint64_t)SlowCase >= *(_QWORD *)(v14 + 32))
    {
      SlowCase = *(__n128 **)(v14 + 40);
      if ((SlowCase & 1) == 0)
      {
        v20 = SlowCase->n128_u64[1] ^ *(_QWORD *)(v14 + 48);
        *(_QWORD *)(v14 + 32) = (char *)SlowCase + HIDWORD(v20);
        *(_QWORD *)(v14 + 40) = (char *)SlowCase + (int)v20;
        *(_QWORD *)(v14 + 24) = (char *)SlowCase + v15;
        goto LABEL_14;
      }
      v29 = *(_QWORD *)a4;
      v30 = result;
      v23 = (_QWORD *)((char *)a2 + 192);
      JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
      v24 = (uint64_t)v23;
      v13 = v29;
      SlowCase = (__n128 *)JSC::LocalAllocator::allocateSlowCase(v14, v24, v15, 0, 1, v25, v26, v27);
      result = v30;
    }
    else
    {
      *(_QWORD *)(v14 + 24) = (char *)SlowCase + v15;
    }
  }
  else
  {
    v28 = result;
    SlowCase = (__n128 *)JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 6648, a2, 8uLL, 0, a5, a6, a7, a8);
    result = v28;
  }
  if (!SlowCase)
  {
    __break(0xC471u);
    JUMPOUT(0x198988264);
  }
LABEL_14:
  SlowCase->n128_u64[0] = v13;
  v17 = &SlowCase->n128_u64[1];
  v18 = SlowCase;
  v19 = SlowCase;
  a9.n128_u64[0] = 0;
  while (SlowCase != v19)
  {
    *SlowCase = a9;
    SlowCase[1] = a9;
    SlowCase[2] = a9;
    SlowCase[3] = a9;
    SlowCase += 4;
  }
  while (SlowCase != v18)
  {
    SlowCase->n128_u64[0] = 0;
    SlowCase = (__n128 *)((char *)SlowCase + 8);
  }
  *(_QWORD *)(result + 40) = v17;
  return result;
}

JSC::JSCell *JSC::JSArrayBufferView::JSArrayBufferView(JSC::JSCell *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  *(_DWORD *)a1 = *(_QWORD *)a3 >> 4;
  *((_DWORD *)a1 + 1) = v5;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)(a3 + 16);
  *((_BYTE *)a1 + 40) = *(_BYTE *)(a3 + 32);
  v6 = *(_QWORD *)(a3 + 40);
  v7 = a2 + 192;
  if (*(_BYTE *)(a2 + 755))
  {
    __dmb(0xAu);
    *((_QWORD *)a1 + 1) = v6;
    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      JSC::Heap::writeBarrierSlowPath(v7, (unint64_t)a1);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)a1 + 1) = v6;
    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      JSC::Heap::writeBarrierSlowPath(v7, (unint64_t)a1);
  }
  v8 = *(_QWORD *)(a3 + 8);
  if (v8 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v8 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *((_QWORD *)a1 + 2) = v8;
  return a1;
}

{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  *(_DWORD *)a1 = *(_QWORD *)a3 >> 4;
  *((_DWORD *)a1 + 1) = v5;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_OWORD *)((char *)a1 + 24) = *(_OWORD *)(a3 + 16);
  *((_BYTE *)a1 + 40) = *(_BYTE *)(a3 + 32);
  v6 = *(_QWORD *)(a3 + 40);
  v7 = a2 + 192;
  if (*(_BYTE *)(a2 + 755))
  {
    __dmb(0xAu);
    *((_QWORD *)a1 + 1) = v6;
    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      JSC::Heap::writeBarrierSlowPath(v7, (unint64_t)a1);
    __dmb(0xAu);
  }
  else
  {
    *((_QWORD *)a1 + 1) = v6;
    if (*(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
      JSC::Heap::writeBarrierSlowPath(v7, (unint64_t)a1);
  }
  v8 = *(_QWORD *)(a3 + 8);
  if (v8 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v8 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *((_QWORD *)a1 + 2) = v8;
  return a1;
}

void JSC::JSArrayBufferView::finishCreation(unint64_t this, JSC::VM *a2)
{
  JSC::VM *v2;
  JSC::JSCell *v3;
  int v4;
  char v5;
  JSC::Heap *v6;
  JSC::ArrayBuffer *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *Allocator;
  JSC::VM *v11;
  JSC::JSCell *v12;
  _QWORD *v13;

  v2 = a2;
  v3 = (JSC::JSCell *)this;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(unsigned __int8 *)(this + 40);
  if (v4 != 16)
  {
    v5 = v4 - 88;
    if ((v4 - 88) <= 0x35)
    {
      if (((1 << v5) & 0x3D) != 0)
      {
        v6 = (JSC::VM *)((char *)a2 + 192);
        v7 = *(JSC::ArrayBuffer **)(*((_QWORD *)v3 + 1) - 8);
LABEL_7:
        JSC::Heap::addReference(v6, v3, v7);
        return;
      }
      if (((1 << v5) & 0x3D000000000000) != 0)
      {
        v6 = (JSC::VM *)((char *)a2 + 192);
        v7 = (JSC::ArrayBuffer *)*((_QWORD *)v3 + 6);
        goto LABEL_7;
      }
    }
    if (v4 == 48)
    {
      if ((this & 8) != 0)
        v8 = (this - 112) | 1;
      else
        v8 = this & 0xFFFFFFFFFFFFC000;
      if ((v8 & 1) != 0)
        v9 = (_QWORD *)(v8 + 47);
      else
        v9 = (_QWORD *)(*(_QWORD *)v8 + 32);
      Allocator = (_QWORD *)v9[2];
      if (!Allocator)
      {
        v13 = v9;
        v11 = v2;
        v12 = v3;
        Allocator = (_QWORD *)JSC::WeakSet::findAllocator(v9, v8);
        v2 = v11;
        v3 = v12;
        v9 = v13;
      }
      v9[2] = *Allocator;
      *Allocator = v3;
      Allocator[1] = (char *)v2 + 736;
      Allocator[2] = JSC::JSArrayBufferView::finalize;
    }
    else
    {
      __break(0xC471u);
    }
  }
}

void JSC::JSArrayBufferView::finalize(JSC::JSArrayBufferView *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;

  if (*((_BYTE *)this + 40) == 48)
  {
    v8 = *((_QWORD *)this + 2);
    if (v8 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v8 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    Gigacage::free(0, v8, a3, a4, a5, a6, a7, a8);
  }
}

JSC::ArrayBuffer *JSC::JSArrayBufferView::unsharedBuffer(JSC::JSArrayBufferView *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  JSC::ArrayBuffer *result;
  unsigned int v12;
  uint64_t (*v13)();

  v9 = *((unsigned __int8 *)this + 40);
  if (v9 != 88)
  {
    if (v9 == 48 || v9 == 16)
    {
      result = JSC::JSArrayBufferView::slowDownAndWasteMemory((uint64_t)this, a2, a3, a4, a5, a6, a7, a8);
      if (!result)
        return result;
      goto LABEL_14;
    }
    result = 0;
    v12 = v9 - 90;
    if (v12 > 0x33)
      return result;
    if (((1 << v12) & 0xF400000000000) != 0)
    {
      result = (JSC::ArrayBuffer *)*((_QWORD *)this + 6);
      if (!result)
        return result;
      goto LABEL_14;
    }
    if (((1 << v12) & 0xF) == 0)
      return result;
  }
  result = *(JSC::ArrayBuffer **)(*((_QWORD *)this + 1) - 8);
  if (!result)
    return result;
LABEL_14:
  if (*((_QWORD *)result + 4))
    v13 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v13 = 0;
  if (v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1989886FCLL);
  }
  return result;
}

uint64_t JSC::JSArrayBufferView::possiblySharedJSBuffer(JSC::JSArrayBufferView *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  int v11;
  JSC::ArrayBuffer *v12;
  unsigned int v15;
  unint64_t OutOfMemoryError;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v11 = *((unsigned __int8 *)this + 40);
  if (v11 == 88)
  {
LABEL_2:
    v12 = *(JSC::ArrayBuffer **)(*((_QWORD *)this + 1) - 8);
    goto LABEL_3;
  }
  if (v11 == 48 || v11 == 16)
  {
    v12 = JSC::JSArrayBufferView::slowDownAndWasteMemory((uint64_t)this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v15 = v11 - 90;
    if (v15 > 0x33)
      goto LABEL_15;
    if (((1 << v15) & 0xF400000000000) == 0)
    {
      if (((1 << v15) & 0xF) == 0)
        goto LABEL_15;
      goto LABEL_2;
    }
    v12 = (JSC::ArrayBuffer *)*((_QWORD *)this + 6);
  }
LABEL_3:
  if (v12)
    return (*(uint64_t (**)(_QWORD *, JSC::JSGlobalObject *, _QWORD))(**((_QWORD **)v10 + 11628) + 16))(*((_QWORD **)v10 + 11628), a2, *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28));
LABEL_15:
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a2, a2);
  JSC::VM::throwException(v10, a2, OutOfMemoryError, v17, v18, v19, v20, v21);
  return 0;
}

void JSC::JSArrayBufferView::detachFromArrayBuffer(JSC::JSArrayBufferView *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  JSC::VM *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t **v28;
  _QWORD v29[2];

  v10 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v11 = *v10;
    if ((v11 & 0x40) != 0)
      break;
    v12 = __ldaxr(v10);
    if (v12 == v11)
    {
      if (!__stxr(v11 | 0x40, v10))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_8:
  v13 = *((unsigned __int8 *)this + 40);
  if ((v13 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19898893CLL);
  }
  v14 = v13 - 88;
  if (v14 <= 0x35)
  {
    if (((1 << v14) & 0x3D) != 0)
    {
      v15 = *(_QWORD *)(*((_QWORD *)this + 1) - 8);
LABEL_14:
      if (*(_QWORD *)(v15 + 32))
        v16 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
      else
        v16 = 0;
      if (v16)
      {
        __break(0xC471u);
        JUMPOUT(0x19898895CLL);
      }
      goto LABEL_18;
    }
    if (((1 << v14) & 0x3D000000000000) != 0)
    {
      v15 = *((_QWORD *)this + 6);
      goto LABEL_14;
    }
  }
LABEL_18:
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v17 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v18 = *(_QWORD *)(v17 + 2080);
  if (*(_BYTE *)(v18 + 4) == 1)
  {
    v21 = *(JSC::VM **)(v17 + 56);
    v29[0] = &off_1E3583C90;
    v29[1] = "ArrayBuffer detached";
    __dmb(0xAu);
    v24 = *(uint64_t **)(v18 + 8);
    v23 = (uint64_t *)(v18 + 8);
    v22 = v24;
    *((_BYTE *)v23 - 4) = 2;
    v25 = *((_DWORD *)v21 + 229);
    *((_DWORD *)v21 + 229) = v25 + 1;
    if (v24 != v23)
    {
      v28 = (uint64_t **)v23;
      do
      {
        v27 = *v22;
        v26 = (uint64_t *)v22[1];
        *v26 = *v22;
        *(_QWORD *)(v27 + 8) = v26;
        *v22 = 0;
        v22[1] = 0;
        JSC::Watchpoint::fire((unint64_t)v22, v21, v29, a5, a6, a7, a8, a9, a2);
        v22 = *v28;
      }
      while (*v28 != (uint64_t *)v28);
      v25 = *((_DWORD *)v21 + 229) - 1;
    }
    *((_DWORD *)v21 + 229) = v25;
    __dmb(0xAu);
  }
  while (1)
  {
    v19 = *v10;
    if ((v19 & 0xC0) != 0x40)
      break;
    v20 = __ldxr(v10);
    if (v20 == v19)
    {
      if (!__stxr(v19 & 0xBF, v10))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a4, a5, a6, a7, a8, a9);
}

JSC::ArrayBuffer *JSC::JSArrayBufferView::slowDownAndWasteMemory(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  __n128 v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  JSC::ArrayBuffer *v27;
  JSC::Butterfly *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int **v65;
  unsigned int *v66;

  if (this)
  {
    v9 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v9 = (_QWORD *)(this - 16);
    v10 = *v9 + 192;
  }
  else
  {
    v10 = 0;
  }
  ++*(_DWORD *)(v10 + 724);
  v11 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  if ((*(_BYTE *)(v11 + 8) & 0xE) != 0
    || ((v12 = *(unsigned __int8 *)(this + 40),
         *(unsigned __int8 *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9) - 50 >= 0xFFFFFFF5)
      ? (v13 = (v12 & 0x40) == 0)
      : (v13 = 1),
        !v13))
  {
    __break(0xC471u);
    JUMPOUT(0x198988A78);
  }
  if (v12 == 48)
  {
    v14 = *(_QWORD *)(this + 16);
    if (v14 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v14 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    if ((*(_BYTE *)(this + 5) - 42) >= 8u)
      LOBYTE(v15) = 0;
    else
      v15 = qword_199158070[(char)(*(_BYTE *)(this + 5) - 42)];
    v16 = *(_QWORD *)(this + 24) << v15;
    v17 = atomic_load(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey);
    if (v17 != -1)
    {
      v66 = (unsigned int *)&v64;
      v65 = &v66;
      std::__call_once(&JSC::ArrayBuffer::primitiveGigacageDestructor(void)::onceKey, &v65, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::ArrayBuffer::primitiveGigacageDestructor(void)::$_0 &&>>);
    }
    v18 = JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor;
    v19 = (unsigned int *)(JSC::ArrayBuffer::primitiveGigacageDestructor(void)::destructor + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v66 = (unsigned int *)v18;
    JSC::ArrayBuffer::createFromBytes((Gigacage *)v14, v16, &v66, (uint64_t *)&v65);
    v23 = v66;
    v66 = 0;
    if (v23)
    {
      v24 = v23 + 2;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v23 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
      }
    }
    v27 = (JSC::ArrayBuffer *)v65;
    if (!v65)
    {
      __break(0xC471u);
      JUMPOUT(0x198988DACLL);
    }
  }
  else
  {
    if (v12 != 16)
    {
      __break(0xC471u);
      JUMPOUT(0x198988E6CLL);
    }
    v41 = *(_QWORD *)(this + 16);
    if (v41 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    if ((*(_BYTE *)(this + 5) - 42) > 7u)
      LOBYTE(v42) = 0;
    else
      v42 = qword_199158070[(char)(*(_BYTE *)(this + 5) - 42)];
    JSC::ArrayBuffer::tryCreate((const void *)v41, *(_QWORD *)(this + 24) << v42, a5, a6, a7, a8, (uint64_t *)&v66);
    v27 = (JSC::ArrayBuffer *)v66;
    if (!v66)
      goto LABEL_78;
  }
  v28 = *(JSC::Butterfly **)(this + 8);
  v29 = *(unsigned __int16 *)(v11 + 24);
  if (v29 == 65534)
    goto LABEL_34;
  if (v29 == 0xFFFF)
    v29 = *(_DWORD *)(*(_QWORD *)(v11 + 64) + 84);
  if (v29 < 64)
  {
LABEL_34:
    v30 = 0;
  }
  else if ((v29 - 63) >= 5)
  {
    v43 = (v29 - 64) | ((v29 - 64) >> 1) | (((v29 - 64) | ((v29 - 64) >> 1)) >> 2);
    v44 = v43 | (v43 >> 4) | ((v43 | (v43 >> 4)) >> 8);
    v30 = (v44 | HIWORD(v44)) + 1;
  }
  else
  {
    v30 = 4;
  }
  if (v28)
  {
    v31 = JSC::Butterfly::growArrayRight(v28, (JSC::VM *)(v10 - 192), (JSC::JSObject *)this, (JSC::Structure *)v11, v30, 0, 0, 0);
  }
  else
  {
    v66 = 0;
    v31 = JSC::Butterfly::create((JSC *)(v10 - 192), v22, this, 0, v30, 1, (unint64_t *)&v66, 0, v21);
  }
  if (*(_BYTE *)(v10 + 563))
  {
    __dmb(0xAu);
    *(_QWORD *)(this + 8) = v31;
    if (*(_DWORD *)(v10 + 568) >= *(unsigned __int8 *)(this + 7))
      JSC::Heap::writeBarrierSlowPath(v10, this);
    __dmb(0xAu);
  }
  else
  {
    *(_QWORD *)(this + 8) = v31;
    if (*(_DWORD *)(v10 + 568) >= *(unsigned __int8 *)(this + 7))
      JSC::Heap::writeBarrierSlowPath(v10, this);
  }
  v38 = (unsigned __int8 *)(this + 4);
  while (1)
  {
    v39 = *v38;
    if ((v39 & 0x40) != 0)
      break;
    v40 = __ldaxr(v38);
    if (v40 == v39)
    {
      if (!__stxr(v39 | 0x40, v38))
        goto LABEL_64;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(this + 4);
LABEL_64:
  *(_QWORD *)(*(_QWORD *)(this + 8) - 8) = v27;
  v45 = *((_QWORD *)v27 + 2);
  if (v45 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v45 = (v45 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(this + 16) = v45;
  __dmb(0xAu);
  *(_BYTE *)(this + 40) = 88;
  while (1)
  {
    v46 = *v38;
    if ((v46 & 0xC0) != 0x40)
      break;
    v47 = __ldxr(v38);
    if (v47 == v46)
    {
      if (!__stxr(v46 & 0xBF, v38))
        goto LABEL_76;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(this + 4), 0, v32, v33, v34, v35, v36, v37);
LABEL_76:
  JSC::Heap::addReference((JSC::Heap *)v10, (JSC::JSCell *)this, v27);
  v13 = *(_DWORD *)v27 == 2;
  *(_DWORD *)v27 -= 2;
  if (v13)
  {
    JSC::ArrayBuffer::~ArrayBuffer(v27, v48, v49, v50, v51, v52, v53, v54);
    WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
  }
LABEL_78:
  --*(_DWORD *)(v10 + 724);
  return v27;
}

JSC::ArrayBuffer *JSC::JSArrayBufferView::possiblySharedImpl@<X0>(JSC::JSArrayBufferView *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  JSC::ArrayBuffer *result;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  JSC::ArrayBuffer *v33;
  uint64_t v34;

  result = JSC::JSArrayBufferView::possiblySharedBuffer(this, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    v13 = *((_QWORD *)this + 3);
    v12 = *((_QWORD *)this + 4);
    switch(*((_BYTE *)this + 5))
    {
      case '\'':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v22 = 0;
        else
          v22 = v13;
        JSC::GenericTypedArrayView<JSC::Int8Adaptor>::wrappedAs(&v34, &v33, v12, v22, !(*((_BYTE *)this + 40) & 1));
        goto LABEL_7;
      case '(':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v23 = 0;
        else
          v23 = v13;
        JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::wrappedAs(&v34, &v33, v12, v23, !(*((_BYTE *)this + 40) & 1));
        goto LABEL_7;
      case ')':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v24 = 0;
        else
          v24 = v13;
        JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::wrappedAs(&v34, &v33, v12, v24, !(*((_BYTE *)this + 40) & 1));
        goto LABEL_7;
      case '*':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v25 = 0;
        else
          v25 = v13;
        JSC::GenericTypedArrayView<JSC::Int16Adaptor>::wrappedAs(&v34, &v33, v12, v25, !(*((_BYTE *)this + 40) & 1));
        goto LABEL_7;
      case '+':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v26 = 0;
        else
          v26 = v13;
        JSC::GenericTypedArrayView<JSC::Uint16Adaptor>::wrappedAs(&v34, &v33, v12, v26, !(*((_BYTE *)this + 40) & 1));
        goto LABEL_7;
      case ',':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v27 = 0;
        else
          v27 = v13;
        JSC::GenericTypedArrayView<JSC::Int32Adaptor>::wrappedAs(&v34, &v33, v12, v27, !(*((_BYTE *)this + 40) & 1));
        goto LABEL_7;
      case '-':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v14 = 0;
        else
          v14 = v13;
        JSC::GenericTypedArrayView<JSC::Uint32Adaptor>::wrappedAs(&v34, (uint64_t *)&v33, v12, v14, !(*((_BYTE *)this + 40) & 1));
        goto LABEL_7;
      case '.':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v28 = 0;
        else
          v28 = v13;
        JSC::GenericTypedArrayView<JSC::Float32Adaptor>::wrappedAs(&v34, &v33, v12, v28, !(*((_BYTE *)this + 40) & 1));
        goto LABEL_7;
      case '/':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v29 = 0;
        else
          v29 = v13;
        JSC::GenericTypedArrayView<JSC::Float64Adaptor>::wrappedAs(&v34, &v33, v12, v29, !(*((_BYTE *)this + 40) & 1));
        goto LABEL_7;
      case '0':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v30 = 0;
        else
          v30 = v13;
        JSC::GenericTypedArrayView<JSC::BigInt64Adaptor>::wrappedAs(&v34, &v33, v12, v30, !(*((_BYTE *)this + 40) & 1));
        goto LABEL_7;
      case '1':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v31 = 0;
        else
          v31 = v13;
        JSC::GenericTypedArrayView<JSC::BigUint64Adaptor>::wrappedAs(&v34, &v33, v12, v31, !(*((_BYTE *)this + 40) & 1));
LABEL_7:
        *a9 = v34;
        break;
      case '2':
        *(_DWORD *)result += 2;
        v33 = result;
        if ((*((_BYTE *)this + 40) & 1) != 0)
          v32 = 0;
        else
          v32 = v13;
        JSC::DataView::wrappedAs(&v33, v12, v32, !(*((_BYTE *)this + 40) & 1), &v34);
        *a9 = v34;
        v34 = 0;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198988F84);
    }
    return (JSC::ArrayBuffer *)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v33, v15, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    *a9 = 0;
  }
  return result;
}

void JSC::GenericTypedArrayView<JSC::Int8Adaptor>::wrappedAs(uint64_t *a1, JSC::ArrayBuffer **a2, unint64_t a3, unint64_t a4, char a5)
{
  JSC::ArrayBuffer *v10;
  uint64_t (*v11)();
  unint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ArrayBuffer *v25;
  BOOL v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::ArrayBuffer *v35;

  v10 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v10 + 4))
      v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (!v11)
      goto LABEL_16;
    v12 = *((_QWORD *)v10 + 7);
  }
  else
  {
    v12 = *((_QWORD *)v10 + 6);
  }
  if (a5)
    v13 = a4 > v12 - a3;
  else
    v13 = 0;
  v14 = !v13;
  if (v12 < a3 || (v14 & 1) == 0)
  {
    *a1 = 0;
    return;
  }
LABEL_16:
  v15 = WTF::fastMalloc((WTF *)0x28);
  v16 = *a2;
  *a2 = 0;
  v35 = v16;
  if (a5)
    v17 = a4;
  else
    v17 = 0;
  *a1 = JSC::ArrayBufferView::ArrayBufferView(v15, 1, (uint64_t *)&v35, a3, v17, a5 != 0);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25 == 2;
    *(_DWORD *)v25 -= 2;
    if (v26)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

void JSC::GenericTypedArrayView<JSC::Uint8Adaptor>::wrappedAs(uint64_t *a1, JSC::ArrayBuffer **a2, unint64_t a3, unint64_t a4, char a5)
{
  JSC::ArrayBuffer *v10;
  uint64_t (*v11)();
  unint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ArrayBuffer *v25;
  BOOL v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::ArrayBuffer *v35;

  v10 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v10 + 4))
      v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (!v11)
      goto LABEL_16;
    v12 = *((_QWORD *)v10 + 7);
  }
  else
  {
    v12 = *((_QWORD *)v10 + 6);
  }
  if (a5)
    v13 = a4 > v12 - a3;
  else
    v13 = 0;
  v14 = !v13;
  if (v12 < a3 || (v14 & 1) == 0)
  {
    *a1 = 0;
    return;
  }
LABEL_16:
  v15 = WTF::fastMalloc((WTF *)0x28);
  v16 = *a2;
  *a2 = 0;
  v35 = v16;
  if (a5)
    v17 = a4;
  else
    v17 = 0;
  *a1 = JSC::ArrayBufferView::ArrayBufferView(v15, 2, (uint64_t *)&v35, a3, v17, a5 != 0);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25 == 2;
    *(_DWORD *)v25 -= 2;
    if (v26)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

void JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::wrappedAs(uint64_t *a1, JSC::ArrayBuffer **a2, unint64_t a3, unint64_t a4, char a5)
{
  JSC::ArrayBuffer *v10;
  uint64_t (*v11)();
  unint64_t v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ArrayBuffer *v25;
  BOOL v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::ArrayBuffer *v35;

  v10 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v10 + 4))
      v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (!v11)
      goto LABEL_16;
    v12 = *((_QWORD *)v10 + 7);
  }
  else
  {
    v12 = *((_QWORD *)v10 + 6);
  }
  if (a5)
    v13 = a4 > v12 - a3;
  else
    v13 = 0;
  v14 = !v13;
  if (v12 < a3 || (v14 & 1) == 0)
  {
    *a1 = 0;
    return;
  }
LABEL_16:
  v15 = WTF::fastMalloc((WTF *)0x28);
  v16 = *a2;
  *a2 = 0;
  v35 = v16;
  if (a5)
    v17 = a4;
  else
    v17 = 0;
  *a1 = JSC::ArrayBufferView::ArrayBufferView(v15, 3, (uint64_t *)&v35, a3, v17, a5 != 0);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25 == 2;
    *(_DWORD *)v25 -= 2;
    if (v26)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

void JSC::GenericTypedArrayView<JSC::Int16Adaptor>::wrappedAs(uint64_t *a1, JSC::ArrayBuffer **a2, unint64_t a3, unint64_t a4, char a5)
{
  JSC::ArrayBuffer *v10;
  uint64_t (*v11)();
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ArrayBuffer *v25;
  BOOL v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::ArrayBuffer *v35;

  v10 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v10 + 4))
      v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (!v11)
      goto LABEL_12;
    v12 = *((_QWORD *)v10 + 7);
  }
  else
  {
    v12 = *((_QWORD *)v10 + 6);
  }
  v13 = v12 >= a3;
  v14 = v12 - a3;
  if (!v13 || a5 && a4 > v14 >> 1)
    goto LABEL_20;
LABEL_12:
  if ((a3 & 1) != 0)
  {
LABEL_20:
    *a1 = 0;
    return;
  }
  v15 = WTF::fastMalloc((WTF *)0x28);
  v16 = *a2;
  *a2 = 0;
  v35 = v16;
  if (a5)
    v17 = 2 * a4;
  else
    v17 = 0;
  *a1 = JSC::ArrayBufferView::ArrayBufferView(v15, 4, (uint64_t *)&v35, a3, v17, a5 != 0);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25 == 2;
    *(_DWORD *)v25 -= 2;
    if (v26)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

void JSC::GenericTypedArrayView<JSC::Uint16Adaptor>::wrappedAs(uint64_t *a1, JSC::ArrayBuffer **a2, unint64_t a3, unint64_t a4, char a5)
{
  JSC::ArrayBuffer *v10;
  uint64_t (*v11)();
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ArrayBuffer *v25;
  BOOL v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::ArrayBuffer *v35;

  v10 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v10 + 4))
      v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (!v11)
      goto LABEL_12;
    v12 = *((_QWORD *)v10 + 7);
  }
  else
  {
    v12 = *((_QWORD *)v10 + 6);
  }
  v13 = v12 >= a3;
  v14 = v12 - a3;
  if (!v13 || a5 && a4 > v14 >> 1)
    goto LABEL_20;
LABEL_12:
  if ((a3 & 1) != 0)
  {
LABEL_20:
    *a1 = 0;
    return;
  }
  v15 = WTF::fastMalloc((WTF *)0x28);
  v16 = *a2;
  *a2 = 0;
  v35 = v16;
  if (a5)
    v17 = 2 * a4;
  else
    v17 = 0;
  *a1 = JSC::ArrayBufferView::ArrayBufferView(v15, 5, (uint64_t *)&v35, a3, v17, a5 != 0);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25 == 2;
    *(_DWORD *)v25 -= 2;
    if (v26)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

void JSC::GenericTypedArrayView<JSC::Int32Adaptor>::wrappedAs(uint64_t *a1, JSC::ArrayBuffer **a2, unint64_t a3, unint64_t a4, char a5)
{
  JSC::ArrayBuffer *v10;
  uint64_t (*v11)();
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ArrayBuffer *v25;
  BOOL v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::ArrayBuffer *v35;

  v10 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v10 + 4))
      v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (!v11)
      goto LABEL_12;
    v12 = *((_QWORD *)v10 + 7);
  }
  else
  {
    v12 = *((_QWORD *)v10 + 6);
  }
  v13 = v12 >= a3;
  v14 = v12 - a3;
  if (!v13 || a5 && a4 > v14 >> 2)
    goto LABEL_13;
LABEL_12:
  if ((a3 & 3) != 0)
  {
LABEL_13:
    *a1 = 0;
    return;
  }
  v15 = WTF::fastMalloc((WTF *)0x28);
  v16 = *a2;
  *a2 = 0;
  v35 = v16;
  if (a5)
    v17 = 4 * a4;
  else
    v17 = 0;
  *a1 = JSC::ArrayBufferView::ArrayBufferView(v15, 6, (uint64_t *)&v35, a3, v17, a5 != 0);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25 == 2;
    *(_DWORD *)v25 -= 2;
    if (v26)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

void JSC::GenericTypedArrayView<JSC::Uint32Adaptor>::wrappedAs(uint64_t *a1, uint64_t *a2, unint64_t a3, unint64_t a4, char a5)
{
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::ArrayBuffer *v24;
  uint64_t (*v25)();
  JSC::ArrayBuffer *v26;

  v10 = (_QWORD *)*a2;
  if (*(_BYTE *)(*a2 + 64))
  {
    if (v10[4])
      v25 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v25 = 0;
    if (!v25)
      goto LABEL_7;
    v11 = v10[7];
  }
  else
  {
    v11 = v10[6];
  }
  v12 = v11 >= a3;
  v13 = v11 - a3;
  if (!v12 || a5 && a4 > v13 >> 2)
    goto LABEL_14;
LABEL_7:
  if ((a3 & 3) != 0)
  {
LABEL_14:
    *a1 = 0;
    return;
  }
  v14 = WTF::fastMalloc((WTF *)0x28);
  v15 = *a2;
  *a2 = 0;
  v26 = (JSC::ArrayBuffer *)v15;
  if (a5)
    v16 = 4 * a4;
  else
    v16 = 0;
  *a1 = JSC::ArrayBufferView::ArrayBufferView(v14, 7, (uint64_t *)&v26, a3, v16, a5 != 0);
  v24 = v26;
  v26 = 0;
  if (v24)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v24, v17, v18, v19, v20, v21, v22, v23);
}

void JSC::GenericTypedArrayView<JSC::Float32Adaptor>::wrappedAs(uint64_t *a1, JSC::ArrayBuffer **a2, unint64_t a3, unint64_t a4, char a5)
{
  JSC::ArrayBuffer *v10;
  uint64_t (*v11)();
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ArrayBuffer *v25;
  BOOL v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::ArrayBuffer *v35;

  v10 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v10 + 4))
      v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (!v11)
      goto LABEL_12;
    v12 = *((_QWORD *)v10 + 7);
  }
  else
  {
    v12 = *((_QWORD *)v10 + 6);
  }
  v13 = v12 >= a3;
  v14 = v12 - a3;
  if (!v13 || a5 && a4 > v14 >> 2)
    goto LABEL_13;
LABEL_12:
  if ((a3 & 3) != 0)
  {
LABEL_13:
    *a1 = 0;
    return;
  }
  v15 = WTF::fastMalloc((WTF *)0x28);
  v16 = *a2;
  *a2 = 0;
  v35 = v16;
  if (a5)
    v17 = 4 * a4;
  else
    v17 = 0;
  *a1 = JSC::ArrayBufferView::ArrayBufferView(v15, 8, (uint64_t *)&v35, a3, v17, a5 != 0);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25 == 2;
    *(_DWORD *)v25 -= 2;
    if (v26)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

void JSC::GenericTypedArrayView<JSC::Float64Adaptor>::wrappedAs(uint64_t *a1, JSC::ArrayBuffer **a2, unint64_t a3, unint64_t a4, char a5)
{
  JSC::ArrayBuffer *v10;
  uint64_t (*v11)();
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ArrayBuffer *v25;
  BOOL v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::ArrayBuffer *v35;

  v10 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v10 + 4))
      v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (!v11)
      goto LABEL_12;
    v12 = *((_QWORD *)v10 + 7);
  }
  else
  {
    v12 = *((_QWORD *)v10 + 6);
  }
  v13 = v12 >= a3;
  v14 = v12 - a3;
  if (!v13 || a5 && a4 > v14 >> 3)
    goto LABEL_13;
LABEL_12:
  if ((a3 & 7) != 0)
  {
LABEL_13:
    *a1 = 0;
    return;
  }
  v15 = WTF::fastMalloc((WTF *)0x28);
  v16 = *a2;
  *a2 = 0;
  v35 = v16;
  if (a5)
    v17 = 8 * a4;
  else
    v17 = 0;
  *a1 = JSC::ArrayBufferView::ArrayBufferView(v15, 9, (uint64_t *)&v35, a3, v17, a5 != 0);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25 == 2;
    *(_DWORD *)v25 -= 2;
    if (v26)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

void JSC::GenericTypedArrayView<JSC::BigInt64Adaptor>::wrappedAs(uint64_t *a1, JSC::ArrayBuffer **a2, unint64_t a3, unint64_t a4, char a5)
{
  JSC::ArrayBuffer *v10;
  uint64_t (*v11)();
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ArrayBuffer *v25;
  BOOL v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::ArrayBuffer *v35;

  v10 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v10 + 4))
      v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (!v11)
      goto LABEL_12;
    v12 = *((_QWORD *)v10 + 7);
  }
  else
  {
    v12 = *((_QWORD *)v10 + 6);
  }
  v13 = v12 >= a3;
  v14 = v12 - a3;
  if (!v13 || a5 && a4 > v14 >> 3)
    goto LABEL_13;
LABEL_12:
  if ((a3 & 7) != 0)
  {
LABEL_13:
    *a1 = 0;
    return;
  }
  v15 = WTF::fastMalloc((WTF *)0x28);
  v16 = *a2;
  *a2 = 0;
  v35 = v16;
  if (a5)
    v17 = 8 * a4;
  else
    v17 = 0;
  *a1 = JSC::ArrayBufferView::ArrayBufferView(v15, 10, (uint64_t *)&v35, a3, v17, a5 != 0);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25 == 2;
    *(_DWORD *)v25 -= 2;
    if (v26)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

void JSC::GenericTypedArrayView<JSC::BigUint64Adaptor>::wrappedAs(uint64_t *a1, JSC::ArrayBuffer **a2, unint64_t a3, unint64_t a4, char a5)
{
  JSC::ArrayBuffer *v10;
  uint64_t (*v11)();
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  JSC::ArrayBuffer *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSC::ArrayBuffer *v25;
  BOOL v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::ArrayBuffer *v35;

  v10 = *a2;
  if (*((_BYTE *)*a2 + 64))
  {
    if (*((_QWORD *)v10 + 4))
      v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (!v11)
      goto LABEL_12;
    v12 = *((_QWORD *)v10 + 7);
  }
  else
  {
    v12 = *((_QWORD *)v10 + 6);
  }
  v13 = v12 >= a3;
  v14 = v12 - a3;
  if (!v13 || a5 && a4 > v14 >> 3)
    goto LABEL_13;
LABEL_12:
  if ((a3 & 7) != 0)
  {
LABEL_13:
    *a1 = 0;
    return;
  }
  v15 = WTF::fastMalloc((WTF *)0x28);
  v16 = *a2;
  *a2 = 0;
  v35 = v16;
  if (a5)
    v17 = 8 * a4;
  else
    v17 = 0;
  *a1 = JSC::ArrayBufferView::ArrayBufferView(v15, 11, (uint64_t *)&v35, a3, v17, a5 != 0);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    v26 = *(_DWORD *)v25 == 2;
    *(_DWORD *)v25 -= 2;
    if (v26)
    {
      JSC::ArrayBuffer::~ArrayBuffer(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
}

BOOL JSC::JSArrayBufferView::isIteratorProtocolFastAndNonObservable(JSC::JSArrayBufferView *this, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _BOOL8 result;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t *);
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t *);
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;

  if (*((unsigned __int8 *)this + 5) - 39 > 0xA)
    return 0;
  v9 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  switch(*((_BYTE *)this + 5))
  {
    case '\'':
      v10 = (uint64_t *)(v9 + 1664);
      v11 = 1;
      break;
    case '(':
      v10 = (uint64_t *)(v9 + 1688);
      v11 = 2;
      break;
    case ')':
      v10 = (uint64_t *)(v9 + 1712);
      v11 = 3;
      break;
    case '*':
      v10 = (uint64_t *)(v9 + 1736);
      v11 = 4;
      break;
    case '+':
      v10 = (uint64_t *)(v9 + 1760);
      v11 = 5;
      break;
    case ',':
      v10 = (uint64_t *)(v9 + 1784);
      v11 = 6;
      break;
    case '-':
      v10 = (uint64_t *)(v9 + 1808);
      v11 = 7;
      break;
    case '.':
      v10 = (uint64_t *)(v9 + 1832);
      v11 = 8;
      break;
    case '/':
      v10 = (uint64_t *)(v9 + 1856);
      v11 = 9;
      break;
    case '0':
      v10 = (uint64_t *)(v9 + 1880);
      v11 = 10;
      break;
    case '1':
      v10 = (uint64_t *)(v9 + 1904);
      v11 = 11;
      break;
    case '2':
      v10 = (uint64_t *)(v9 + 1928);
      v11 = 12;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198989E08);
  }
  if ((*v10 & 1) != 0)
  {
    v30 = *(void (**)(uint64_t *))(*v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9)
    {
      v31 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v9 & 8) != 0)
        v31 = (uint64_t *)(v9 - 16);
      v32 = *v31;
    }
    else
    {
      v32 = -192;
    }
    v35 = v32;
    v36 = v9;
    v37 = v10;
    v30(&v35);
  }
  v12 = *(_QWORD *)(v9 + 2216);
  v13 = (v12 & 1) != 0 ? (v12 >> 1) & 3 : *(unsigned __int8 *)(v12 + 4);
  if (v13 == 2)
    return 0;
  if (v11 == 6)
  {
    v14 = (uint64_t *)(v9 + 2472);
  }
  else
  {
    switch(v11)
    {
      case 1:
        v14 = (uint64_t *)(v9 + 2392);
        break;
      case 2:
        v14 = (uint64_t *)(v9 + 2408);
        break;
      case 3:
        v14 = (uint64_t *)(v9 + 2424);
        break;
      case 4:
        v14 = (uint64_t *)(v9 + 2440);
        break;
      case 5:
        v14 = (uint64_t *)(v9 + 2456);
        break;
      case 7:
        v14 = (uint64_t *)(v9 + 2488);
        break;
      case 8:
        v14 = (uint64_t *)(v9 + 2504);
        break;
      case 9:
        v14 = (uint64_t *)(v9 + 2520);
        break;
      case 10:
        v14 = (uint64_t *)(v9 + 2536);
        break;
      case 11:
        v14 = (uint64_t *)(v9 + 2552);
        break;
      case 12:
        v14 = (uint64_t *)(v9 + 2568);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x19898A0ECLL);
    }
  }
  v15 = *v14;
  v16 = (v15 & 1) != 0 ? (v15 >> 1) & 3 : *(unsigned __int8 *)(v15 + 4);
  if (v16 != 1)
    return 0;
  v17 = *(_QWORD *)(v9 + 2368);
  v18 = (v17 & 1) != 0 ? (v17 >> 1) & 3 : *(unsigned __int8 *)(v17 + 4);
  if (v18 != 1)
    return 0;
  v19 = *(JSC::VM **)(v9 + 56);
  v20 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  switch(*(_BYTE *)(v20 + 9))
  {
    case '\'':
      v21 = (uint64_t *)(v9 + 1680);
      goto LABEL_18;
    case '(':
      v21 = (uint64_t *)(v9 + 1704);
      goto LABEL_18;
    case ')':
      v21 = (uint64_t *)(v9 + 1728);
      goto LABEL_18;
    case '*':
      v21 = (uint64_t *)(v9 + 1752);
      goto LABEL_18;
    case '+':
      v21 = (uint64_t *)(v9 + 1776);
      goto LABEL_18;
    case ',':
      v21 = (uint64_t *)(v9 + 1800);
      goto LABEL_18;
    case '-':
      v21 = (uint64_t *)(v9 + 1824);
      goto LABEL_18;
    case '.':
      v21 = (uint64_t *)(v9 + 1848);
      goto LABEL_18;
    case '/':
      v21 = (uint64_t *)(v9 + 1872);
      goto LABEL_18;
    case '0':
      v21 = (uint64_t *)(v9 + 1896);
      goto LABEL_18;
    case '1':
      v21 = (uint64_t *)(v9 + 1920);
      goto LABEL_18;
    case '2':
      v21 = (uint64_t *)(v9 + 1944);
LABEL_18:
      v22 = *v21;
      if ((v22 & 1) != 0)
        v22 = 0;
      if (v22 != v20)
      {
        switch(*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 9))
        {
          case '\'':
            v23 = (uint64_t *)(v9 + 1664);
            break;
          case '(':
            v23 = (uint64_t *)(v9 + 1688);
            break;
          case ')':
            v23 = (uint64_t *)(v9 + 1712);
            break;
          case '*':
            v23 = (uint64_t *)(v9 + 1736);
            break;
          case '+':
            v23 = (uint64_t *)(v9 + 1760);
            break;
          case ',':
            v23 = (uint64_t *)(v9 + 1784);
            break;
          case '-':
            v23 = (uint64_t *)(v9 + 1808);
            break;
          case '.':
            v23 = (uint64_t *)(v9 + 1832);
            break;
          case '/':
            v23 = (uint64_t *)(v9 + 1856);
            break;
          case '0':
            v23 = (uint64_t *)(v9 + 1880);
            break;
          case '1':
            v23 = (uint64_t *)(v9 + 1904);
            break;
          case '2':
            v23 = (uint64_t *)(v9 + 1928);
            break;
          default:
            goto LABEL_28;
        }
        v24 = *v23;
        if ((v24 & 1) != 0)
          v24 = 0;
        if (v24 != v20)
          goto LABEL_28;
      }
      return 1;
    default:
LABEL_28:
      v26 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
      if (!v26)
        v26 = *((_QWORD *)this + 2);
      switch(v11)
      {
        case 1:
          v27 = (uint64_t *)(v9 + 1664);
          break;
        case 2:
          v27 = (uint64_t *)(v9 + 1688);
          break;
        case 3:
          v27 = (uint64_t *)(v9 + 1712);
          break;
        case 4:
          v27 = (uint64_t *)(v9 + 1736);
          break;
        case 5:
          v27 = (uint64_t *)(v9 + 1760);
          break;
        case 6:
          v27 = (uint64_t *)(v9 + 1784);
          break;
        case 7:
          v27 = (uint64_t *)(v9 + 1808);
          break;
        case 8:
          v27 = (uint64_t *)(v9 + 1832);
          break;
        case 9:
          v27 = (uint64_t *)(v9 + 1856);
          break;
        case 10:
          v27 = (uint64_t *)(v9 + 1880);
          break;
        case 11:
          v27 = (uint64_t *)(v9 + 1904);
          break;
        case 12:
          v27 = (uint64_t *)(v9 + 1928);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x19898A130);
      }
      v28 = *v27;
      if ((*v27 & 1) != 0)
      {
        v33 = *(uint64_t (**)(uint64_t *))(v28 & 0xFFFFFFFFFFFFFFFCLL);
        v34 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v9 & 8) != 0)
          v34 = (uint64_t *)(v9 - 16);
        v35 = *v34;
        v36 = v9;
        v37 = v27;
        v28 = v33(&v35);
      }
      v29 = *(_QWORD *)(v28 + 48);
      if (v29 == 2)
        v29 = 0;
      if (v26 != v29)
        return 0;
      result = JSC::JSObject::getDirectOffset(this, v19, *(_QWORD *)(*((_QWORD *)v19 + 5244) + 2712), a4, a5, a6, a7, a8) == -1;
      break;
  }
  return result;
}

uint64_t JSC::JSGlobalObject::typedArrayPrototype(uint64_t *a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(_QWORD *);
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[3];

  switch(a2)
  {
    case 0:
      __break(0xC471u);
      JUMPOUT(0x19898A368);
    case 1:
      v2 = a1 + 208;
      break;
    case 2:
      v2 = a1 + 211;
      break;
    case 3:
      v2 = a1 + 214;
      break;
    case 4:
      v2 = a1 + 217;
      break;
    case 5:
      v2 = a1 + 220;
      break;
    case 6:
      v2 = a1 + 223;
      break;
    case 7:
      v2 = a1 + 226;
      break;
    case 8:
      v2 = a1 + 229;
      break;
    case 9:
      v2 = a1 + 232;
      break;
    case 10:
      v2 = a1 + 235;
      break;
    case 11:
      v2 = a1 + 238;
      break;
    case 12:
      v2 = a1 + 241;
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x19898A388);
  }
  v3 = *v2;
  if ((*v2 & 1) != 0)
  {
    v6 = *(uint64_t (**)(_QWORD *))(v3 & 0xFFFFFFFFFFFFFFFCLL);
    if (a1)
    {
      v7 = (uint64_t *)((unint64_t)a1 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a1 & 8) != 0)
        v7 = a1 - 2;
      v8 = *v7;
    }
    else
    {
      v8 = -192;
    }
    v9[0] = v8;
    v9[1] = a1;
    v9[2] = v2;
    v3 = v6(v9);
  }
  v4 = *(_QWORD *)(v3 + 48);
  if (v4 == 2)
    return 0;
  else
    return v4;
}

uint64_t WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t JSC::arrayBufferSlice(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unsigned int v9;
  uint64_t v11;
  uint64_t v13;
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  char *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  BOOL v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  unint64_t v37;
  JSC::VM *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)();
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  unint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t (*v97)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v98;
  uint64_t v99;
  uint64_t v100;
  int8x16_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unsigned int v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  int v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t (*v131)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v132;
  int v133;
  _WORD *v134;
  uint64_t v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  unsigned __int16 *v140;
  uint64_t v141;
  unsigned int v142;
  BOOL v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  size_t v147;
  const void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  JSC::ArrayBuffer *v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  JSC::ArrayBuffer *v169;
  uint64_t v170;
  uint64_t (*v171)();
  uint64_t (*v172)();
  unint64_t v173;
  JSC::ArrayBuffer *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  size_t v178;
  size_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  JSC::ArrayBuffer *v192;
  unint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t (*v201)();
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t OutOfMemoryError;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  double v222;
  JSC::Exception *v223;
  JSC::ArrayBuffer *v224;
  unint64_t v226;
  uint64_t v227;
  size_t v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  BOOL v237;
  uint64_t v238;
  BOOL v239;
  int v241;
  JSC::VM *v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  int8x16_t **v246;
  int v247;
  int v248;
  _BYTE *v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  int v264;
  unint64_t v265;
  int v266;
  unsigned int v267;
  int v268;
  unint64_t v269;
  int v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  unsigned int v277;
  uint64_t v278;
  unsigned __int8 *v279;
  int v280;
  unint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  char *v285;
  unint64_t v286;
  size_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  unsigned __int8 *v291;
  JSC::ArrayBuffer **v292;
  uint64_t v293;
  int v294;
  int v295;
  JSC::ArrayBuffer **p_dst;
  uint64_t v297;
  int v298;
  int v299;
  int v300;
  void (*v301)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v302;
  void (*v303)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v304;
  uint64_t v305;
  int v306;
  BOOL v307;
  uint64_t v308;
  uint64_t v309;
  unsigned __int16 *v310;
  uint64_t v311;
  unsigned int v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int *v317;
  uint64_t v318;
  JSC::ArrayBuffer *Index;
  int v320;
  char v321;
  int v322;
  _BYTE *v323;
  uint64_t v324;
  uint64_t v325;
  unsigned __int16 *v326;
  uint64_t v327;
  unsigned int v328;
  int v329;
  unsigned __int8 *v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t v333;
  char v334;
  int v335;
  uint64_t v336;
  int v337;
  unint64_t v338;
  unint64_t v339;
  int v340;
  unsigned __int8 *v341;
  uint64_t v342;
  unsigned int v343;
  uint64_t v344;
  char v345;
  char v346;
  int v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  char v351;
  unint64_t v352;
  unint64_t v353;
  int v354;
  unsigned __int8 *v355;
  uint64_t v356;
  unsigned int v357;
  uint64_t v358;
  _DWORD *v359;
  int v360;
  unint64_t v361;
  char v362;
  uint64_t v363;
  int v364;
  JSC::VMTraps *v365;
  JSC::VMTraps *v366;
  JSC::VMTraps *v367;
  JSC::VM *v368;
  JSC::VM *v369;
  JSC::VM *v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  unint64_t v375;
  double v376;
  JSC::VM *v377;
  JSC::JSObject *v378;
  JSC::JSObject *v379;
  JSC::VM *v380;
  _DWORD *v381;
  JSC::ArrayBuffer *v382;
  uint64_t v383;
  unint64_t v384;
  _DWORD *v385;
  _DWORD *v386;
  _QWORD v387[2];
  uint64_t v388;
  char v389;
  int8x16_t **v390;
  uint64_t v391;
  JSC::VM *v392;
  JSC::ArrayBuffer *__dst;
  uint64_t v394;
  _QWORD *v395;
  _QWORD v396[13];
  char __s[8];
  int v398;
  uint64_t v399;

  v9 = a5;
  v399 = *MEMORY[0x1E0C80C00];
  v378 = (JSC::JSObject *)a4;
  v379 = (JSC::JSObject *)a3;
  v11 = *((_QWORD *)a1 + 7);
  v377 = (JSC::VM *)v11;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 38)
    goto LABEL_6;
  v13 = *(_QWORD *)(a2 + 16);
  v14 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  v15 = *(_QWORD *)(v13 + 32);
  if (!v15)
    v14 = 0;
  if ((v14 != 0) != (_DWORD)a5)
  {
LABEL_6:
    v16 = 12;
    if ((_DWORD)a5)
      v16 = 18;
    __dst = (JSC::ArrayBuffer *)"Receiver must be ";
    v394 = 18;
    if ((_DWORD)a5)
      v17 = "SharedArrayBuffer";
    else
      v17 = "ArrayBuffer";
    v382 = (JSC::ArrayBuffer *)v17;
    v383 = v16;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(&__dst, (uint64_t)&v382, (int **)__s);
    if (!*(_QWORD *)__s)
    {
      __break(0xC471u);
      JUMPOUT(0x19898B770);
    }
    v25 = JSC::throwTypeError((unint64_t)a1, &v377, (WTF::StringImpl **)__s);
    v26 = *(WTF::StringImpl **)__s;
    *(_QWORD *)__s = 0;
    if (!v26)
      return v25;
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      return v25;
    }
    WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
LABEL_329:
    WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    return v25;
  }
  if ((a5 & 1) == 0)
  {
    v27 = *(_QWORD *)(v13 + 16);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return JSC::throwTypeError((unint64_t)a1, &v377, (uint64_t)"Receiver is detached", 21);
    }
  }
  if (*(_BYTE *)(v13 + 64))
    v28 = v15 == 0;
  else
    v28 = 1;
  if (v28)
    v130 = *(_QWORD *)(v13 + 48);
  else
    v130 = *(_QWORD *)(v15 + 32);
  if (a3 < 0xFFFE000000000000)
  {
    if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(&v379, a1, a3, a4, a5, a6, a7, a8, a9);
    else
      a9.i64[0] = a3 - 0x2000000000000;
    v29 = trunc(*(double *)a9.i64 + 0.0);
  }
  else
  {
    v29 = (double)(int)a3;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v83 = *(_DWORD *)(v11 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v30 = (double)v130;
  if (v29 <= (double)v130)
    *(double *)a9.i64 = v29;
  else
    *(double *)a9.i64 = (double)v130;
  v31 = v29 + v30;
  if (v29 + v30 < 0.0)
    v31 = 0.0;
  if (v29 < 0.0)
    v32 = v31;
  else
    v32 = *(double *)a9.i64;
  if (v378 != (JSC::JSObject *)10)
  {
    if ((unint64_t)v378 < 0xFFFE000000000000)
    {
      if ((unint64_t)v378 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v378, a1, a3, a4, a5, a6, a7, a8, a9);
      else
        v78 = (char *)v378 - 0x2000000000000;
      v33 = trunc(*(double *)&v78 + 0.0);
    }
    else
    {
      v33 = (double)(int)v378;
    }
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_41;
    v96 = *(_DWORD *)(v11 + 80);
    if ((v96 & 0x27) != 0 && (v96 & 0x20) == 0)
    {
      v376 = v33;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, a4, a5, a6, a7, a8);
      v33 = v376;
    }
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_41:
      if (v33 <= v30)
        v34 = v33;
      else
        v34 = (double)v130;
      v35 = v33 + v30;
      if (v33 + v30 < 0.0)
        v35 = 0.0;
      if (v33 < 0.0)
        v36 = v35;
      else
        v36 = v34;
      LODWORD(v130) = v36;
      goto LABEL_50;
    }
    return 0;
  }
LABEL_50:
  v374 = v32;
  LODWORD(v37) = v130 - v374;
  if (v130 >= v374)
    v37 = v37;
  else
    v37 = 0;
  v375 = v37;
  v38 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v380 = v38;
  v39 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  if ((v9 & 1) != 0)
  {
    v40 = *(_QWORD *)(v39 + 1144);
    if ((v40 & 1) == 0)
      goto LABEL_57;
    v41 = (_QWORD *)(v39 + 1144);
  }
  else
  {
    v40 = *(_QWORD *)(v39 + 1600);
    if ((v40 & 1) == 0)
      goto LABEL_57;
    v41 = (_QWORD *)(v39 + 1600);
  }
  v97 = *(uint64_t (**)(JSC::ArrayBuffer **))(v40 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v39 & 8) != 0)
    v98 = (JSC::ArrayBuffer **)(v39 - 16);
  else
    v98 = (JSC::ArrayBuffer **)(v39 & 0xFFFFFFFFFFFFC000 | 8);
  __dst = *v98;
  v394 = v39;
  v395 = v41;
  v40 = v97(&__dst);
LABEL_57:
  if (v9)
    v42 = 2352;
  else
    v42 = 2344;
  v43 = *(_QWORD *)(v39 + v42);
  if ((v43 & 1) != 0)
    v44 = (v43 >> 1) & 3;
  else
    v44 = *(unsigned __int8 *)(v43 + 4);
  v45 = *(_QWORD *)(v40 + 48);
  if (!v44)
    JSC::JSGlobalObject::tryInstallArrayBufferSpeciesWatchpoint(v39, v9, a3, a4, a5, a6, a7, a8);
  v46 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  if ((*(_BYTE *)(v46 + 0x12) & 0x20) == 0)
  {
    v47 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!v47)
      v47 = *(_QWORD *)(a2 + 16);
    v48 = v45 == 2 ? 0 : v45;
    if (v48 == v47)
    {
      v49 = *(_QWORD *)(v39 + v42);
      v50 = (v49 & 1) != 0 ? (v49 >> 1) & 3 : *(unsigned __int8 *)(v49 + 4);
      if (v50 == 1)
      {
        v51 = 0;
        v52 = 0;
        goto LABEL_75;
      }
    }
  }
  v79 = *((_QWORD *)a1 + 7);
  v392 = (JSC::VM *)v79;
  v80 = *(_QWORD *)(v46 + 40);
  if ((v9 & 1) != 0)
  {
    v81 = *(_QWORD *)(v80 + 1144);
    if ((v81 & 1) == 0)
      goto LABEL_129;
    v82 = (_QWORD *)(v80 + 1144);
  }
  else
  {
    v81 = *(_QWORD *)(v80 + 1600);
    if ((v81 & 1) == 0)
      goto LABEL_129;
    v82 = (_QWORD *)(v80 + 1600);
  }
  v131 = *(uint64_t (**)(JSC::ArrayBuffer **))(v81 & 0xFFFFFFFFFFFFFFFCLL);
  if ((v80 & 8) != 0)
    v132 = (JSC::ArrayBuffer **)(v80 - 16);
  else
    v132 = (JSC::ArrayBuffer **)(v80 & 0xFFFFFFFFFFFFC000 | 8);
  __dst = *v132;
  v394 = v80;
  v395 = v82;
  v81 = v131(&__dst);
LABEL_129:
  if (v9)
    v85 = 2352;
  else
    v85 = 2344;
  v86 = *(_QWORD *)(v80 + v85);
  if ((v86 & 1) != 0)
    v87 = (v86 >> 1) & 3;
  else
    v87 = *(unsigned __int8 *)(v86 + 4);
  v88 = *(_QWORD *)(v81 + 48);
  if (!v87)
    JSC::JSGlobalObject::tryInstallArrayBufferSpeciesWatchpoint(v80, v9, a3, a4, a5, a6, a7, a8);
  if ((*(_BYTE *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x12) & 0x20) == 0)
  {
    v89 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x30);
    if (!v89)
      v89 = *(_QWORD *)(a2 + 16);
    v90 = v88 == 2 ? 0 : v88;
    if (v90 == v89)
    {
      v91 = *(_QWORD *)(v80 + v85);
      v92 = (v91 & 1) != 0 ? (v91 >> 1) & 3 : *(unsigned __int8 *)(v91 + 4);
      if (v92 == 1)
      {
        v93 = 0;
        v52 = 0;
        LOBYTE(v94) = 0;
        goto LABEL_147;
      }
    }
  }
  v99 = v79 + 41952;
  v100 = JSC::JSObject::get((unsigned int *)a2, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v79 + 41952) + 1080), a4, a5, a6, a7, a8);
  v381 = (_DWORD *)v100;
  if (*(_DWORD *)(v79 + 80))
  {
    v247 = *(_DWORD *)(v79 + 80);
    if ((v247 & 0x27) != 0 && (v247 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v79 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v79 + 16))
      goto LABEL_382;
    v100 = (uint64_t)v381;
  }
  if ((v100 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v100 + 5) >= 0x17u)
  {
    (*(void (**)(JSC::ArrayBuffer **__return_ptr, uint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v100 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x40))(&__dst, v100);
    v100 = (uint64_t)v381;
    if ((_BYTE)__dst)
    {
      v102 = *(_QWORD *)(16 * (*v381 & 0xFFFFFFFE) + 0x28);
      if ((v9 & 1) != 0)
      {
        v103 = *(_QWORD *)(v102 + 1144);
        if ((v103 & 1) != 0)
        {
          v301 = *(void (**)(JSC::ArrayBuffer **))(v103 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v102 & 8) != 0)
            v302 = (JSC::ArrayBuffer **)(v102 - 16);
          else
            v302 = (JSC::ArrayBuffer **)(v102 & 0xFFFFFFFFFFFFC000 | 8);
          __dst = *v302;
          v394 = v102;
          v395 = (_QWORD *)(v102 + 1144);
          v301(&__dst);
        }
        v104 = (_QWORD *)(v102 + 1152);
      }
      else
      {
        v105 = *(_QWORD *)(v102 + 1600);
        if ((v105 & 1) != 0)
        {
          v303 = *(void (**)(JSC::ArrayBuffer **))(v105 & 0xFFFFFFFFFFFFFFFCLL);
          if ((v102 & 8) != 0)
            v304 = (JSC::ArrayBuffer **)(v102 - 16);
          else
            v304 = (JSC::ArrayBuffer **)(v102 & 0xFFFFFFFFFFFFC000 | 8);
          __dst = *v304;
          v394 = v102;
          v395 = (_QWORD *)(v102 + 1600);
          v303(&__dst);
        }
        v104 = (_QWORD *)(v102 + 1608);
      }
      if (*v104 != v100)
      {
        v100 = (uint64_t)v381;
        goto LABEL_173;
      }
LABEL_382:
      v93 = 0;
      v52 = 0;
      LOBYTE(v94) = 0;
      goto LABEL_147;
    }
  }
LABEL_173:
  if (v100 == 10)
    goto LABEL_382;
  if ((v100 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v100 + 5) <= 0x16u)
  {
    JSC::throwTypeError((unint64_t)a1, &v392, (uint64_t)"constructor property should not be null", 40);
    goto LABEL_382;
  }
  v106 = *(_QWORD *)(*(_QWORD *)v99 + 2752);
  v101.i64[0] = 0xFFFFFFFF00000000;
  v384 = 0xFFFFFFFF00000000;
  LOBYTE(v388) = 0;
  v389 = 0;
  v390 = 0;
  v391 = 0;
  v386 = 0;
  memset(v387, 0, 13);
  v385 = (_DWORD *)v100;
  v368 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v107 = *(unsigned __int8 *)(v100 + 5);
  if (v107 > 0x16)
    goto LABEL_177;
  if (v107 == 2)
  {
    if (*(_QWORD *)(*((_QWORD *)v368 + 5244) + 1768) == v106)
    {
      v316 = *(_QWORD *)(v100 + 8);
      if ((v316 & 1) != 0)
        v317 = (unsigned int *)(v100 + 16);
      else
        v317 = (unsigned int *)(v316 + 4);
      v318 = *v317;
      if ((v318 & 0x80000000) != 0)
        Index = (JSC::ArrayBuffer *)(COERCE__INT64((double)v318) + 0x2000000000000);
      else
        Index = (JSC::ArrayBuffer *)(v318 | 0xFFFE000000000000);
      v320 = 14;
      goto LABEL_567;
    }
    if (v106)
    {
      v322 = *(_DWORD *)(v106 + 16);
      if ((v322 & 0x20) == 0)
      {
        v323 = *(_BYTE **)(v106 + 8);
        v324 = *(unsigned int *)(v106 + 4);
        if ((v322 & 4) != 0)
        {
          if (!(_DWORD)v324)
            goto LABEL_579;
          a3 = *v323 - 48;
          if (a3 > 9 || v324 >= 2 && *v323 == 48)
            goto LABEL_579;
          v355 = v323 + 1;
          v356 = v324 - 1;
          while (v356)
          {
            if (a3 > 0x19999999)
              goto LABEL_579;
            v357 = *v355 - 48;
            if (v357 > 9)
              goto LABEL_579;
            v321 = 0;
            v143 = __CFADD__(v357, 10 * a3);
            a3 = v357 + 10 * (_DWORD)a3;
            ++v355;
            --v356;
            if (v143)
              goto LABEL_580;
          }
        }
        else
        {
          if (!(_DWORD)v324)
            goto LABEL_579;
          a3 = *(unsigned __int16 *)v323 - 48;
          if (a3 > 9 || *(_WORD *)v323 == 48 && v324 > 1)
            goto LABEL_579;
          v326 = (unsigned __int16 *)(v323 + 2);
          v327 = v324 - 1;
          while (v327)
          {
            if (a3 > 0x19999999)
              goto LABEL_579;
            v328 = *v326 - 48;
            if (v328 > 9)
              goto LABEL_579;
            v321 = 0;
            v143 = __CFADD__(v328, 10 * a3);
            a3 = v328 + 10 * (_DWORD)a3;
            ++v326;
            --v327;
            if (v143)
              goto LABEL_580;
          }
        }
        if ((_DWORD)a3 != -1)
        {
          v358 = *(_QWORD *)(v100 + 8);
          v359 = (_DWORD *)((v358 & 1) != 0 ? v100 + 16 : v358 + 4);
          if (*v359 > a3)
          {
            Index = (JSC::ArrayBuffer *)JSC::JSString::getIndex((JSC::JSString *)v100, a1, a3, a4, a5, a6, a7, a8, v101);
            if (!*((_DWORD *)v368 + 20))
              goto LABEL_740;
            v360 = *((_DWORD *)v368 + 20);
            if ((v360 & 0x27) != 0 && (v360 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v368 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (!*((_QWORD *)v368 + 2))
            {
LABEL_740:
              v320 = 10;
LABEL_567:
              v382 = Index;
              LODWORD(v384) = v320;
              v386 = 0;
              v321 = 1;
              BYTE1(v387[1]) = 1;
              goto LABEL_580;
            }
          }
        }
      }
    }
LABEL_579:
    v321 = 0;
LABEL_580:
    if (*((_DWORD *)v368 + 20))
    {
      v329 = *((_DWORD *)v368 + 20);
      if ((v329 & 0x27) != 0 && (v329 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v368 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*((_QWORD *)v368 + 2))
        goto LABEL_233;
    }
    if ((v321 & 1) != 0)
      goto LABEL_353;
  }
  v305 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v381, (unint64_t)a1);
  if (!v305)
    goto LABEL_233;
  v100 = v305;
  v368 = (JSC::VM *)*((_QWORD *)a1 + 7);
LABEL_177:
  v108 = (_BYTE *)(v100 + 6);
  v371 = v106 >> 4;
  v109 = v100;
  if ((*(_BYTE *)(v100 + 6) & 8) == 0)
  {
    v110 = v100;
    do
    {
      v111 = 16 * (*(_DWORD *)v110 & 0xFFFFFFFE);
      if (!(_DWORD)v371 || (v371 & ~*(_DWORD *)(16 * (*(_DWORD *)v110 & 0xFFFFFFFE) + 0x20)) != 0)
        goto LABEL_206;
      v112 = *(_QWORD *)(16 * (*(_DWORD *)v110 & 0xFFFFFFFE) + 0x58);
      if (!v112)
      {
        v113 = *(_QWORD *)(16 * (*(_DWORD *)v110 & 0xFFFFFFFE) + 0x40);
        if (!v113 || *(_BYTE *)(v113 + 5) != 1 && *(_DWORD *)(v113 + 80) < 2u)
          goto LABEL_206;
        JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v110 & 0xFFFFFFFE)), v368, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v112)
          goto LABEL_206;
      }
      if (!*(_DWORD *)(v112 + 24))
        goto LABEL_206;
      v114 = *(_QWORD *)(v112 + 16);
      v115 = v114 & 0xFFFFFFFFFFFFFFFELL;
      v116 = *(unsigned int *)(v112 + 8);
      v117 = *(_DWORD *)(v106 + 16);
      if ((v114 & 1) != 0)
      {
        if ((v117 & 0x20) != 0)
          v117 = *(_DWORD *)(v106 + 32);
        v118 = *(_DWORD *)(v112 + 12);
        v119 = (v117 >> 8) & *(_QWORD *)&v118;
        v120 = *(unsigned __int8 *)(v115 + v119);
        if (!*(_BYTE *)(v115 + v119))
          goto LABEL_206;
        v121 = v115 + v116;
        v122 = 1;
        while (1)
        {
          v123 = *(_QWORD *)(v121 + 8 * (v120 - 1));
          if (v106 == (v123 & 0xFFFFFFFFFFFFLL))
            break;
          v119 = ((_DWORD)v119 + v122) & v118;
          v120 = *(unsigned __int8 *)(v115 + v119);
          ++v122;
          if (!*(_BYTE *)(v115 + v119))
            goto LABEL_206;
        }
        a6 = (v123 >> 16) & 0xFF00000000 | HIBYTE(v123);
      }
      else
      {
        if ((v117 & 0x20) != 0)
          v117 = *(_DWORD *)(v106 + 32);
        v124 = *(_DWORD *)(v112 + 12);
        v125 = v124 & (v117 >> 8);
        v126 = *(_DWORD *)(v115 + 4 * v125);
        if (!v126)
          goto LABEL_206;
        v127 = v115 + 4 * v116;
        v128 = 1;
        while (1)
        {
          v129 = (v126 - 1);
          if (v106 == *(_QWORD *)(v127 + 16 * v129))
            break;
          v125 = (v125 + v128) & v124;
          v126 = *(_DWORD *)(v115 + 4 * v125);
          ++v128;
          if (!v126)
            goto LABEL_206;
        }
        a6 = *(unsigned int *)(v127 + 16 * v129 + 8) | ((unint64_t)*(unsigned __int8 *)(v127 + 16 * v129 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v137 = v110 + 16;
          v138 = a6 << 32;
        }
        else
        {
          v137 = *(_QWORD *)(v110 + 8) - 8;
          v138 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v137 + (v138 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v139 = *(unsigned __int8 *)(a4 + 5);
          if (v139 != 5)
          {
            if (v139 != 6)
              goto LABEL_242;
            v243 = *(_DWORD *)(v111 + 16) & 3;
            v244 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v246 = *(int8x16_t ***)(a4 + 24);
              v245 = *(_QWORD *)(a4 + 32);
              v382 = *(JSC::ArrayBuffer **)(a4 + 8);
              v383 = v244;
              LODWORD(v384) = HIDWORD(a6);
              v386 = (_DWORD *)v110;
              goto LABEL_385;
            }
            v382 = *(JSC::ArrayBuffer **)(a4 + 8);
            v383 = v244;
            LODWORD(v384) = HIDWORD(a6);
            v386 = (_DWORD *)v110;
LABEL_550:
            BYTE1(v387[1]) = 3;
            if (v243 != 2)
              LOBYTE(v387[1]) = 1;
            goto LABEL_353;
          }
          v231 = (unsigned int *)v110;
          v232 = (uint64_t)v368;
LABEL_352:
          JSC::JSObject::fillGetterPropertySlot(v231, v232, (uint64_t)&v382, a4, a5, a6);
          goto LABEL_353;
        }
LABEL_242:
        v382 = (JSC::ArrayBuffer *)a4;
        v386 = (_DWORD *)v110;
LABEL_243:
        v384 = __PAIR64__(a6, a5);
        LOWORD(v387[1]) = 257;
        goto LABEL_353;
      }
LABEL_206:
      if ((*v108 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v110, v368, v106, (uint64_t)&v382) & 1) != 0)
      {
        goto LABEL_353;
      }
      v109 = *(_QWORD *)(v111 + 48);
      if (!v109)
        v109 = *(_QWORD *)(v110 + 16);
      if ((v109 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v109 + 5) < 0x17u)
      {
        if (!v106)
          goto LABEL_233;
        v133 = *(_DWORD *)(v106 + 16);
        if ((v133 & 0x20) != 0)
          goto LABEL_233;
        v134 = *(_WORD **)(v106 + 8);
        v135 = *(unsigned int *)(v106 + 4);
        if ((v133 & 4) == 0)
        {
          if ((_DWORD)v135)
          {
            v136 = (unsigned __int16)*v134 - 48;
            if (v136 <= 9 && (*v134 != 48 || v135 <= 1))
            {
              v140 = v134 + 1;
              v141 = v135 - 1;
              v94 = 10;
              while (v141)
              {
                if (v136 <= 0x19999999)
                {
                  v142 = *v140 - 48;
                  if (v142 <= 9)
                  {
                    v143 = __CFADD__(v142, 10 * v136);
                    v136 = v142 + 10 * v136;
                    ++v140;
                    --v141;
                    if (!v143)
                      continue;
                  }
                }
                goto LABEL_377;
              }
              goto LABEL_621;
            }
          }
          goto LABEL_233;
        }
        if (!(_DWORD)v135)
          goto LABEL_233;
        v136 = *(unsigned __int8 *)v134 - 48;
        if (v136 > 9 || v135 >= 2 && *(_BYTE *)v134 == 48)
          goto LABEL_233;
        v330 = (unsigned __int8 *)v134 + 1;
        v331 = v135 - 1;
        v94 = 10;
        while (v331)
        {
          if (v136 <= 0x19999999)
          {
            v332 = *v330 - 48;
            if (v332 <= 9)
            {
              v143 = __CFADD__(v332, 10 * v136);
              v136 = v332 + 10 * v136;
              ++v330;
              --v331;
              if (!v143)
                continue;
            }
          }
          goto LABEL_377;
        }
LABEL_621:
        if (v136 == -1)
        {
LABEL_233:
          v94 = 10;
          goto LABEL_377;
        }
        v369 = (JSC::VM *)v136;
        v372 = *((_QWORD *)a1 + 7);
        v366 = (JSC::VMTraps *)(v372 + 64);
        v94 = 10;
        while (2)
        {
          v333 = 16 * (*(_DWORD *)v100 & 0xFFFFFFFE);
          v334 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, JSC::VM *, JSC::ArrayBuffer **))(16 * *(unsigned int *)(v333 + 0x4C) + 0x70))(v100, a1, v369, &v382);
          if (*(_DWORD *)(v372 + 80))
          {
            v337 = *(_DWORD *)(v372 + 80);
            if ((v337 & 0x27) != 0 && (v337 & 0x20) == 0)
              JSC::VMTraps::handleTraps(v366, 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v372 + 16))
              goto LABEL_377;
          }
          if ((v334 & 1) != 0)
            goto LABEL_353;
          if (BYTE2(v387[1]) == 3)
          {
            if (BYTE4(v387[1]))
              goto LABEL_377;
            v335 = *(unsigned __int8 *)(v100 + 5);
            if (v335 != 61)
              goto LABEL_627;
          }
          else
          {
            v335 = *(unsigned __int8 *)(v100 + 5);
            if (v335 == 61)
            {
              if (BYTE2(v387[1]) == 1)
                goto LABEL_377;
            }
            else
            {
LABEL_627:
              if ((v335 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v100 + 40) & 7u) > 2)
                {
                  LOBYTE(__dst) = 0;
                  LOBYTE(v394) = 0;
                  v339 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v100, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                  v338 = (_BYTE)a2 ? v339 : 0;
                }
                else
                {
                  v338 = *(_QWORD *)(v100 + 24);
                }
                if (v338 <= (unint64_t)v369)
                  goto LABEL_377;
              }
            }
          }
          if ((*(_WORD *)(v333 + 12) & 0x800) == 0 || BYTE2(v387[1]) == 3)
          {
            v336 = *(_QWORD *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0x30);
            if (!v336)
              v336 = *(_QWORD *)(v100 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v336 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v100 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v100, a1);
            }
            else
            {
              v336 = *(_QWORD *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0x30);
              if (!v336)
                v336 = *(_QWORD *)(v100 + 16);
            }
            if (*(_DWORD *)(v372 + 80))
            {
              v340 = *(_DWORD *)(v372 + 80);
              if ((v340 & 0x27) != 0 && (v340 & 0x20) == 0)
                JSC::VMTraps::handleTraps(v366, 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v372 + 16))
                goto LABEL_377;
            }
          }
          if ((v336 & 0xFFFE000000000002) != 0)
            goto LABEL_377;
          v100 = v336;
          if (*(unsigned __int8 *)(v336 + 5) <= 0x16u)
            goto LABEL_377;
          continue;
        }
      }
      v108 = (_BYTE *)(v109 + 6);
      v110 = v109;
    }
    while ((*(_BYTE *)(v109 + 6) & 8) == 0);
  }
  if (v106)
  {
    v248 = *(_DWORD *)(v106 + 16);
    if ((v248 & 0x20) == 0)
    {
      v249 = *(_BYTE **)(v106 + 8);
      v250 = *(unsigned int *)(v106 + 4);
      if ((v248 & 4) != 0)
      {
        if ((_DWORD)v250)
        {
          v251 = *v249 - 48;
          if (v251 <= 9 && (v250 < 2 || *v249 != 48))
          {
            v341 = v249 + 1;
            v342 = v250 - 1;
            while (v342)
            {
              if (v251 <= 0x19999999)
              {
                v343 = *v341 - 48;
                if (v343 <= 9)
                {
                  v143 = __CFADD__(v343, 10 * v251);
                  v251 = v343 + 10 * v251;
                  ++v341;
                  --v342;
                  if (!v143)
                    continue;
                }
              }
              goto LABEL_402;
            }
LABEL_677:
            if (v251 != -1)
            {
              v370 = (JSC::VM *)v251;
              v373 = *((_QWORD *)a1 + 7);
              v367 = (JSC::VMTraps *)(v373 + 64);
              v94 = 10;
              while (1)
              {
                v344 = 16 * (*(_DWORD *)v100 & 0xFFFFFFFE);
                v345 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, JSC::VM *, JSC::ArrayBuffer **))(16 * *(unsigned int *)(v344 + 0x4C) + 0x70))(v100, a1, v370, &v382);
                v346 = v345;
                if (*(_DWORD *)(v373 + 80))
                {
                  v349 = *(_DWORD *)(v373 + 80);
                  if ((v349 & 0x27) != 0 && (v349 & 0x20) == 0)
                    JSC::VMTraps::handleTraps(v367, 7u, a3, a4, a5, a6, a7, a8);
                  v350 = *(_QWORD *)(v373 + 16);
                  if (v350)
                    v351 = 1;
                  else
                    v351 = v346;
                  if ((v351 & 1) != 0)
                  {
                    if (!v350)
                      goto LABEL_353;
                    goto LABEL_233;
                  }
                }
                else if ((v345 & 1) != 0)
                {
                  goto LABEL_353;
                }
                if (BYTE2(v387[1]) == 3)
                {
                  if (BYTE4(v387[1]))
                    goto LABEL_377;
                  v347 = *(unsigned __int8 *)(v100 + 5);
                  if (v347 == 61)
                    goto LABEL_684;
                }
                else
                {
                  v347 = *(unsigned __int8 *)(v100 + 5);
                  if (v347 == 61)
                  {
                    if (BYTE2(v387[1]) == 1)
                      goto LABEL_377;
                    goto LABEL_684;
                  }
                }
                if ((v347 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v100 + 40) & 7u) > 2)
                  {
                    LOBYTE(__dst) = 0;
                    LOBYTE(v394) = 0;
                    v353 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v100, (uint64_t)&__dst, a3, a4, a5, a6, a7, a8);
                    v352 = (_BYTE)a2 ? v353 : 0;
                  }
                  else
                  {
                    v352 = *(_QWORD *)(v100 + 24);
                  }
                  if (v352 <= (unint64_t)v370)
                    goto LABEL_377;
                }
LABEL_684:
                if ((*(_WORD *)(v344 + 12) & 0x800) == 0 || BYTE2(v387[1]) == 3)
                {
                  v348 = *(_QWORD *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0x30);
                  if (!v348)
                    v348 = *(_QWORD *)(v100 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v348 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                     * *(unsigned int *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0x4C)
                                                                                     + 0xB0))(v100, a1);
                  }
                  else
                  {
                    v348 = *(_QWORD *)(16 * (*(_DWORD *)v100 & 0xFFFFFFFE) + 0x30);
                    if (!v348)
                      v348 = *(_QWORD *)(v100 + 16);
                  }
                  if (*(_DWORD *)(v373 + 80))
                  {
                    v354 = *(_DWORD *)(v373 + 80);
                    if ((v354 & 0x27) != 0 && (v354 & 0x20) == 0)
                      JSC::VMTraps::handleTraps(v367, 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v373 + 16))
                      goto LABEL_377;
                  }
                }
                if ((v348 & 0xFFFE000000000002) == 0)
                {
                  v100 = v348;
                  if (*(unsigned __int8 *)(v348 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_377;
              }
            }
          }
        }
      }
      else if ((_DWORD)v250)
      {
        v251 = *(unsigned __int16 *)v249 - 48;
        if (v251 <= 9 && (*(_WORD *)v249 != 48 || v250 <= 1))
        {
          v310 = (unsigned __int16 *)(v249 + 2);
          v311 = v250 - 1;
          while (v311)
          {
            if (v251 <= 0x19999999)
            {
              v312 = *v310 - 48;
              if (v312 <= 9)
              {
                v143 = __CFADD__(v312, 10 * v251);
                v251 = v312 + 10 * v251;
                ++v310;
                --v311;
                if (!v143)
                  continue;
              }
            }
            goto LABEL_402;
          }
          goto LABEL_677;
        }
      }
    }
  }
LABEL_402:
  v252 = *((_QWORD *)a1 + 7);
  v365 = (JSC::VMTraps *)(v252 + 64);
  v94 = 10;
  while (1)
  {
    v253 = 16 * (*(_DWORD *)v109 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v109 + 6) & 8) == 0)
      break;
    v362 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, JSC::ArrayBuffer **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v109 & 0xFFFFFFFE) + 0x4C) + 0x68))(v109, a1, v106, &v382);
    if (*(_DWORD *)(v252 + 80))
    {
      v300 = *(_DWORD *)(v252 + 80);
      if ((v300 & 0x27) != 0 && (v300 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v365, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v252 + 16))
        goto LABEL_377;
    }
    if ((v362 & 1) != 0)
      goto LABEL_353;
    if (BYTE2(v387[1]) == 3)
    {
      if (BYTE4(v387[1]))
        goto LABEL_377;
      v276 = *(unsigned __int8 *)(v109 + 5);
      if (v276 == 61)
        goto LABEL_432;
    }
    else
    {
      v276 = *(unsigned __int8 *)(v109 + 5);
      if (v276 == 61)
      {
        if (BYTE2(v387[1]) == 1)
          goto LABEL_377;
        goto LABEL_432;
      }
    }
    if (!v106)
      goto LABEL_432;
    if ((v276 - 50) < 0xFFFFFFF5)
      goto LABEL_432;
    v277 = *(_DWORD *)(v106 + 16);
    if ((v277 & 0x20) != 0)
      goto LABEL_432;
    v278 = *(unsigned int *)(v106 + 4);
    if (!(_DWORD)v278)
      goto LABEL_432;
    v279 = *(unsigned __int8 **)(v106 + 8);
    if ((v277 & 4) != 0)
    {
      v280 = *v279;
      if ((_DWORD)v278 == 1)
      {
LABEL_461:
        if ((v280 - 48) < 0xA)
          goto LABEL_377;
        goto LABEL_432;
      }
      if (v280 == 45)
      {
        v280 = v279[1];
        goto LABEL_465;
      }
      if ((v280 - 48) < 0xA)
        goto LABEL_476;
      if ((_DWORD)v278 == 8)
        goto LABEL_475;
    }
    else
    {
      v280 = *(unsigned __int16 *)v279;
      if ((_DWORD)v278 == 1)
        goto LABEL_461;
      if (v280 == 45)
      {
        v280 = *((unsigned __int16 *)v279 + 1);
LABEL_465:
        if ((v280 - 48) < 0xA)
        {
          if ((_DWORD)v278 == 2)
            goto LABEL_377;
          goto LABEL_476;
        }
        if ((_DWORD)v278 != 9)
          goto LABEL_432;
LABEL_475:
        if (v280 != 73)
          goto LABEL_432;
        goto LABEL_476;
      }
      if ((v280 - 48) < 0xA || (_DWORD)v278 == 8 && v280 == 73)
        goto LABEL_476;
    }
    if ((_DWORD)v278 != 3 || v280 != 78)
      goto LABEL_432;
LABEL_476:
    v361 = v361 & 0xFFFFFF0000000000 | v278 | ((unint64_t)((v277 >> 2) & 1) << 32);
    JSC::jsToNumber(v279, v361);
    v282 = (v281 >> 52) & 0x7FF;
    if ((_DWORD)v282 == 2047)
    {
      if ((v281 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", 3);
        v283 = &__s[3];
      }
      else
      {
        if ((v281 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v289 = &__s[1];
        }
        else
        {
          v289 = __s;
        }
        *(_QWORD *)v289 = 0x7974696E69666E49;
        v283 = v289 + 8;
      }
      goto LABEL_490;
    }
    v284 = v281 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v281 & 0x8000000000000000) != 0 && v284)
    {
      __s[0] = 45;
      v285 = &__s[1];
    }
    else
    {
      if (!v284)
      {
        __s[0] = 48;
        v283 = &__s[1];
        goto LABEL_490;
      }
      v285 = __s;
    }
    v363 = (uint64_t)v285;
    v286 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v281 & 0x800FFFFFFFFFFFFFLL, v282);
    v283 = WTF::dragonbox::detail::to_shortest(v286, v287, v363, v288);
LABEL_490:
    *v283 = 0;
    v364 = strlen(__s);
    memcpy(&__dst, __s, v364);
    *((_BYTE *)&__dst + v364) = 0;
    v290 = *(unsigned int *)(v106 + 4);
    v291 = *(unsigned __int8 **)(v106 + 8);
    if ((*(_BYTE *)(v106 + 16) & 4) != 0)
    {
      if ((_DWORD)v290)
      {
        p_dst = &__dst;
        v297 = *(unsigned int *)(v106 + 4);
        do
        {
          v299 = *(unsigned __int8 *)p_dst;
          p_dst = (JSC::ArrayBuffer **)((char *)p_dst + 1);
          v298 = v299;
          if (!v299 || *v291 != v298)
            goto LABEL_432;
          ++v291;
        }
        while (--v297);
      }
    }
    else if ((_DWORD)v290)
    {
      v292 = &__dst;
      v293 = *(unsigned int *)(v106 + 4);
      do
      {
        v295 = *(unsigned __int8 *)v292;
        v292 = (JSC::ArrayBuffer **)((char *)v292 + 1);
        v294 = v295;
        if (!v295 || *(unsigned __int16 *)v291 != v294)
          goto LABEL_432;
        v291 += 2;
      }
      while (--v293);
    }
    if (!*((_BYTE *)&__dst + v290))
      goto LABEL_377;
LABEL_432:
    if ((*(_WORD *)(v253 + 12) & 0x800) == 0)
    {
      v272 = *(_DWORD *)v109;
LABEL_434:
      v273 = *(_QWORD *)(16 * (v272 & 0xFFFFFFFE) + 0x30);
      if (!v273)
        v273 = *(_QWORD *)(v109 + 16);
      goto LABEL_436;
    }
    v272 = *(_DWORD *)v109;
    if (BYTE2(v387[1]) == 3)
      goto LABEL_434;
    v274 = 16 * (v272 & 0xFFFFFFFE);
    if ((*(_WORD *)(v274 + 12) & 0x800) != 0)
    {
      v273 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16 * *(unsigned int *)(v274 + 76) + 0xB0))(v109, a1);
    }
    else
    {
      v273 = *(_QWORD *)(v274 + 48);
      if (!v273)
        v273 = *(_QWORD *)(v109 + 16);
    }
    if (*(_DWORD *)(v252 + 80))
    {
      v275 = *(_DWORD *)(v252 + 80);
      if ((v275 & 0x27) != 0 && (v275 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v365, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v252 + 16))
        goto LABEL_377;
    }
LABEL_436:
    if ((v273 & 0xFFFE000000000002) == 0)
    {
      v109 = v273;
      if (*(unsigned __int8 *)(v273 + 5) > 0x16u)
        continue;
    }
    goto LABEL_377;
  }
  if (!(_DWORD)v371 || (v371 & ~*(_DWORD *)(16 * (*(_DWORD *)v109 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_431;
  v254 = *(_QWORD *)(16 * (*(_DWORD *)v109 & 0xFFFFFFFE) + 0x58);
  if (!v254)
  {
    v255 = *(_QWORD *)(16 * (*(_DWORD *)v109 & 0xFFFFFFFE) + 0x40);
    if (!v255 || *(_BYTE *)(v255 + 5) != 1 && *(_DWORD *)(v255 + 80) < 2u)
      goto LABEL_431;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v109 & 0xFFFFFFFE)), (JSC::VM *)v252, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v254)
      goto LABEL_431;
  }
  if (!*(_DWORD *)(v254 + 24))
    goto LABEL_431;
  v256 = *(_QWORD *)(v254 + 16);
  v257 = v256 & 0xFFFFFFFFFFFFFFFELL;
  v258 = *(unsigned int *)(v254 + 8);
  v259 = *(_DWORD *)(v106 + 16);
  if ((v256 & 1) != 0)
  {
    if ((v259 & 0x20) != 0)
      v259 = *(_DWORD *)(v106 + 32);
    v260 = *(_DWORD *)(v254 + 12);
    v261 = (v259 >> 8) & *(_QWORD *)&v260;
    v262 = *(unsigned __int8 *)(v257 + v261);
    if (*(_BYTE *)(v257 + v261))
    {
      v263 = v257 + v258;
      v264 = 1;
      while (1)
      {
        v265 = *(_QWORD *)(v263 + 8 * (v262 - 1));
        if (v106 == (v265 & 0xFFFFFFFFFFFFLL))
          break;
        v261 = ((_DWORD)v261 + v264) & v260;
        v262 = *(unsigned __int8 *)(v257 + v261);
        ++v264;
        if (!*(_BYTE *)(v257 + v261))
          goto LABEL_431;
      }
      a6 = (v265 >> 16) & 0xFF00000000 | HIBYTE(v265);
      goto LABEL_428;
    }
    goto LABEL_431;
  }
  if ((v259 & 0x20) != 0)
    v259 = *(_DWORD *)(v106 + 32);
  v266 = *(_DWORD *)(v254 + 12);
  v267 = v266 & (v259 >> 8);
  v268 = *(_DWORD *)(v257 + 4 * v267);
  if (!v268)
    goto LABEL_431;
  v269 = v257 + 4 * v258;
  v270 = 1;
  while (1)
  {
    v271 = (v268 - 1);
    if (v106 == *(_QWORD *)(v269 + 16 * v271))
      break;
    v267 = (v267 + v270) & v266;
    v268 = *(_DWORD *)(v257 + 4 * v267);
    ++v270;
    if (!v268)
      goto LABEL_431;
  }
  a6 = *(unsigned int *)(v269 + 16 * v271 + 8) | ((unint64_t)*(unsigned __int8 *)(v269 + 16 * v271 + 12) << 32);
LABEL_428:
  if ((_DWORD)a6 == -1)
  {
LABEL_431:
    if ((*(_BYTE *)(v109 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v109, (JSC::VM *)v252, v106, (uint64_t)&v382) & 1) != 0)
    {
      goto LABEL_353;
    }
    goto LABEL_432;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v308 = v109 + 16;
    v309 = a6 << 32;
  }
  else
  {
    v308 = *(_QWORD *)(v109 + 8) - 8;
    v309 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v308 + (v309 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_556:
    v382 = (JSC::ArrayBuffer *)a4;
    v386 = (_DWORD *)v109;
    goto LABEL_243;
  }
  v314 = *(unsigned __int8 *)(a4 + 5);
  if (v314 == 5)
  {
    v231 = (unsigned int *)v109;
    v232 = v252;
    goto LABEL_352;
  }
  if (v314 != 6)
    goto LABEL_556;
  v243 = *(_DWORD *)(v253 + 16) & 3;
  v325 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v382 = *(JSC::ArrayBuffer **)(a4 + 8);
    v383 = v325;
    LODWORD(v384) = HIDWORD(a6);
    v386 = (_DWORD *)v109;
    goto LABEL_550;
  }
  v246 = *(int8x16_t ***)(a4 + 24);
  v245 = *(_QWORD *)(a4 + 32);
  v382 = *(JSC::ArrayBuffer **)(a4 + 8);
  v383 = v325;
  LODWORD(v384) = HIDWORD(a6);
  v386 = (_DWORD *)v109;
LABEL_385:
  BYTE1(v387[1]) = 3;
  if (v243 != 2)
    LOBYTE(v387[1]) = 1;
  BYTE3(v387[1]) = 1;
  v390 = v246;
  v391 = v245;
LABEL_353:
  if (BYTE1(v387[1]) == 1)
  {
    v94 = (uint64_t)v382;
  }
  else
  {
    if (BYTE1(v387[1]) == 2)
    {
      v233 = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v382, a1, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v234 = (unint64_t)v386;
      v235 = *(_QWORD *)(16 * (*v386 & 0xFFFFFFFE) + 0x28);
      if ((v384 & 0x20) != 0)
        v234 = (unint64_t)v385;
      if (BYTE3(v387[1]) != 1)
        goto LABEL_375;
      if ((v234 & 0xFFFE000000000002) != 0)
        goto LABEL_607;
      v236 = *(unsigned int *)(16 * (*(_DWORD *)v234 & 0xFFFFFFFE) + 0x4C);
      v237 = *(_DWORD *)(16 * (*(_DWORD *)v234 & 0xFFFFFFFE) + 0x4C) != 0;
      v238 = 16 * v236;
      if ((_DWORD)v236)
        v239 = v390 == (int8x16_t **)v238;
      else
        v239 = 1;
      if (!v239)
      {
        do
        {
          v238 = *(_QWORD *)(v238 + 16);
          v237 = v238 != 0;
        }
        while ((int8x16_t **)v238 != v390 && v238 != 0);
      }
      if (!v237)
      {
LABEL_607:
        __dst = (JSC::ArrayBuffer *)*((_QWORD *)a1 + 7);
        v233 = JSC::throwDOMAttributeGetterTypeError(v235, &__dst, v390, (WTF::StringImpl *)v106);
      }
      else
      {
LABEL_375:
        v233 = ((uint64_t (*)(unint64_t))v382)(v235);
      }
    }
    v94 = v233;
  }
LABEL_377:
  if (v389)
  {
    v241 = *(_DWORD *)(v388 + 4);
    if (!v241)
    {
      __break(0xC471u);
      JUMPOUT(0x19898BE68);
    }
    *(_DWORD *)(v388 + 4) = v241 - 1;
  }
  v242 = v392;
  if (*((_DWORD *)v392 + 20))
  {
    v306 = *((_DWORD *)v392 + 20);
    if ((v306 & 0x27) != 0 && (v306 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v392 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v242 + 2))
      v307 = 1;
    else
      v307 = (v94 & 0xFFFFFFFFFFFFFFF7) == 2;
    if (!v307)
      goto LABEL_535;
    goto LABEL_382;
  }
  if ((v94 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_382;
LABEL_535:
  v93 = v94 & 0xFFFFFFFFFFFFFF00;
  v52 = 1;
LABEL_147:
  v51 = v93 & 0xFFFFFFFFFFFFFF00 | v94;
  v38 = v380;
LABEL_75:
  if (*((_DWORD *)v38 + 20))
  {
    v84 = *((_DWORD *)v38 + 20);
    if ((v84 & 0x27) != 0 && (v84 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v38 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v38 + 2))
      return 0;
  }
  if (!v52)
  {
    if ((v9 & 1) != 0)
    {
      __dst = 0;
      goto LABEL_313;
    }
    v25 = 0;
LABEL_269:
    v149 = *(_QWORD *)(a2 + 16);
    v150 = *(_QWORD *)(v149 + 16);
    if (!v150
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v150 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      return JSC::throwTypeError((unint64_t)a1, &v377, (uint64_t)"Receiver is detached", 21);
    }
    if (!v52)
    {
      __dst = 0;
      if (*(_BYTE *)(v149 + 64))
      {
        JSC::ArrayBuffer::tryCreate(v375, 1, 0, 0, 0, a6, a7, a8, &v382);
        WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(&__dst, &v382, v151, v152, v153, v154, v155, v156);
        v160 = v382;
        if (v382)
        {
          v28 = *(_DWORD *)v382 == 2;
          *(_DWORD *)v382 -= 2;
          if (v28)
          {
            JSC::ArrayBuffer::~ArrayBuffer(v160, v157, v158, v159, a5, a6, a7, a8);
            WTF::fastFree(v161, v162, v163, v164, v165, v166, v167, v168);
          }
        }
        v169 = __dst;
        if (!__dst)
          goto LABEL_322;
        v170 = *(_QWORD *)(a2 + 16);
        if (*(_QWORD *)(v170 + 32))
          v171 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
        else
          v171 = 0;
        if (*((_QWORD *)__dst + 4))
          v172 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
        else
          v172 = 0;
        if ((v171 != 0) != (v172 != 0))
        {
          if (v172)
          {
            __break(0xC471u);
            JUMPOUT(0x19898B550);
          }
          if (!v171)
          {
            __break(0xC471u);
            JUMPOUT(0x19898B570);
          }
          JSC::ArrayBufferContents::makeShared((JSC::ArrayBuffer *)((char *)__dst + 16));
          *((_BYTE *)v169 + 93) = 1;
          v170 = *(_QWORD *)(a2 + 16);
        }
        if (*(_BYTE *)(v170 + 64) && (v229 = *(_QWORD *)(v170 + 32)) != 0)
          v173 = *(_QWORD *)(v229 + 32);
        else
          v173 = *(_QWORD *)(v170 + 48);
        v174 = __dst;
        if (v173 > v374)
        {
          v175 = *((_QWORD *)__dst + 2);
          if (v175 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v175 = (v175 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v176 = *(_QWORD *)(v170 + 16);
          if (v176 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v176 = (v176 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (*(_BYTE *)(v170 + 64) && (v230 = *(_QWORD *)(v170 + 32)) != 0)
            v177 = *(_QWORD *)(v230 + 32);
          else
            v177 = *(_QWORD *)(v170 + 48);
          v178 = v177 - v374;
          if (v178 >= v375)
            v179 = v375;
          else
            v179 = v178;
          memcpy((void *)v175, (const void *)(v176 + v374), v179);
          v174 = __dst;
        }
        if (v174)
          goto LABEL_318;
      }
LABEL_313:
      JSC::ArrayBuffer::sliceWithClampedIndex(*(JSC::ArrayBuffer **)(a2 + 16), v374, v130, a5, a6, a7, a8, (uint64_t *)&v382);
      WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::operator=(&__dst, &v382, v180, v181, v182, v183, v184, v185);
      v192 = v382;
      if (v382)
      {
        v28 = *(_DWORD *)v382 == 2;
        *(_DWORD *)v382 -= 2;
        if (v28)
        {
          JSC::ArrayBuffer::~ArrayBuffer(v192, v157, v186, v187, v188, v189, v190, v191);
          WTF::fastFree(v193, v194, v195, v196, v197, v198, v199, v200);
        }
      }
      v174 = __dst;
      if (__dst)
      {
LABEL_318:
        if (*((_QWORD *)v174 + 4))
          v201 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
        else
          v201 = 0;
        v202 = JSC::JSGlobalObject::arrayBufferStructure((unint64_t)a1, v201 != 0);
        v208 = JSC::JSArrayBuffer::create(v11, v202, &__dst, v203, v204, v205, v206, v207);
LABEL_325:
        v25 = v208;
        v224 = __dst;
        __dst = 0;
        if (!v224)
          return v25;
        v28 = *(_DWORD *)v224 == 2;
        *(_DWORD *)v224 -= 2;
        if (!v28)
          return v25;
        JSC::ArrayBuffer::~ArrayBuffer(v224, v209, v210, v211, v212, v213, v214, v215);
        goto LABEL_329;
      }
LABEL_322:
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)v157);
      v223 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v223 = (JSC::Exception *)JSC::Exception::create((uint64_t)v377, (JSC::VM *)OutOfMemoryError, 0, v217, v218, v219, v220, v221);
      }
      v208 = (unint64_t)JSC::VM::throwException(v377, a1, v223, v222, v217, v218, v219, v220, v221);
      goto LABEL_325;
    }
    if (*(_BYTE *)(v149 + 64) && (v313 = *(_QWORD *)(v149 + 32)) != 0)
      v226 = *(_QWORD *)(v313 + 32);
    else
      v226 = *(_QWORD *)(v149 + 48);
    if (v226 <= v374)
      return v25;
    v145 = *(_QWORD *)(*(_QWORD *)(v25 + 16) + 16);
    if (v145)
    {
      if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
        goto LABEL_340;
      v145 = (v145 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
        goto LABEL_339;
    }
    else
    {
      v145 = 0;
      if (!qword_1ECF4C038)
        goto LABEL_340;
      if (byte_1ECF4C022)
      {
LABEL_339:
        v150 = (v150 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        goto LABEL_340;
      }
    }
    if (disablePrimitiveGigacageRequested)
    {
LABEL_340:
      v148 = (const void *)(v150 + v374);
      if (*(_BYTE *)(v149 + 64) && (v315 = *(_QWORD *)(v149 + 32)) != 0)
        v227 = *(_QWORD *)(v315 + 32);
      else
        v227 = *(_QWORD *)(v149 + 48);
      v228 = v227 - v374;
      if (v228 >= v375)
        v147 = v375;
      else
        v147 = v228;
      goto LABEL_268;
    }
    goto LABEL_339;
  }
  LOBYTE(__dst) = 0;
  memset(v396, 0, 72);
  v53 = COERCE__INT64((double)v375) + 0x2000000000000;
  if ((v375 & 0x80000000) == 0)
    v53 = v375 | 0xFFFE000000000000;
  v395 = &v396[1];
  v396[1] = v53;
  v394 = 0x800000001;
  *(_QWORD *)__s = &v396[1];
  v398 = 1;
  v392 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((v51 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v382) = 0;
LABEL_117:
    JSC::throwTypeError((unint64_t)a1, &v392, (uint64_t)"Species construction did not get a valid constructor", 53);
    v25 = 0;
    goto LABEL_84;
  }
  if (*(_BYTE *)(v51 + 5) == 26)
    JSC::JSFunction::getConstructData((uint64_t *)&v382, (uint64_t *)v51, (JSC::JSCell *)a2);
  else
    (*(void (**)(JSC::ArrayBuffer **__return_ptr, unint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v51 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x40))(&v382, v51);
  if (!(_BYTE)v382)
    goto LABEL_117;
  v25 = JSC::Interpreter::executeConstruct((JSC::VM *)(*((_QWORD *)a1 + 7) + 90560), (WTF::Thread *)v51, (unsigned __int8 *)&v382, (uint64_t)__s, (WTF *)v51, v54, v55, v56);
LABEL_84:
  if (*((_DWORD *)v38 + 20))
  {
    v95 = *((_DWORD *)v38 + 20);
    if ((v95 & 0x27) != 0 && (v95 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v38 + 64), 7u, v58, v59, v60, v61, v62, v63);
    if (*((_QWORD *)v38 + 2))
    {
LABEL_102:
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v394, v57, v58, v59, v60, v61, v62, v63);
      return 0;
    }
  }
  v64 = "Species construction does not create ArrayBuffer";
  v65 = 49;
  if (*(_BYTE *)(v25 + 5) != 38 || !v25)
  {
LABEL_101:
    JSC::throwTypeError((unint64_t)a1, &v380, (uint64_t)v64, v65);
    goto LABEL_102;
  }
  v66 = *(_QWORD *)(v25 + 16);
  v67 = *(_QWORD *)(v66 + 32);
  if (v67)
    v68 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v68 = 0;
  if ((v9 & 1) != 0)
  {
    if (!v68)
    {
      v64 = "SharedArrayBuffer.prototype.slice creates non-shared ArrayBuffer";
      v65 = 65;
      goto LABEL_101;
    }
  }
  else
  {
    if (v68)
    {
      v64 = "ArrayBuffer.prototype.slice creates SharedArrayBuffer";
      v65 = 54;
      goto LABEL_101;
    }
    v69 = *(_QWORD *)(v66 + 16);
    if (!v69
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v69 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      v64 = "Created ArrayBuffer is detached";
      v65 = 32;
      goto LABEL_101;
    }
  }
  if (v25 == a2)
  {
    v64 = "Species construction returns same ArrayBuffer to a receiver";
    v65 = 60;
    goto LABEL_101;
  }
  if (*(_BYTE *)(v66 + 64) && v67)
    v144 = *(_QWORD *)(v67 + 32);
  else
    v144 = *(_QWORD *)(v66 + 48);
  if (v144 < v375)
  {
    v64 = "Species construction returns ArrayBuffer which byteLength is less than requested";
    v65 = 81;
    goto LABEL_101;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v394, v57, (uint64_t)"Species construction does not create ArrayBuffer", 49, v60, v61, v62, v63);
  if ((v9 & 1) == 0)
    goto LABEL_269;
  v145 = *(_QWORD *)(*(_QWORD *)(v25 + 16) + 16);
  if (v145 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v145 = (v145 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v146 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  if (v146 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v146 = (v146 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v147 = v375;
  v148 = (const void *)(v146 + v374);
LABEL_268:
  memcpy((void *)v145, v148, v147);
  return v25;
}

uint64_t JSC::JSGlobalObject::arrayBufferStructure(unint64_t a1, char a2)
{
  uint64_t result;
  uint64_t (*v4)(_QWORD *);
  _QWORD *v5;
  _QWORD v6[3];

  if ((a2 & 1) != 0)
    return JSC::LazyClassStructure::get((JSC::LazyClassStructure *)(a1 + 1144), a1);
  result = *(_QWORD *)(a1 + 1600);
  if ((result & 1) != 0)
  {
    v4 = *(uint64_t (**)(_QWORD *))(result & 0xFFFFFFFFFFFFFFFCLL);
    v5 = (_QWORD *)(a1 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a1 & 8) != 0)
      v5 = (_QWORD *)(a1 - 16);
    v6[0] = *v5;
    v6[1] = a1;
    v6[2] = a1 + 1600;
    return v4(v6);
  }
  return result;
}

unint64_t JSC::arrayBufferByteLength(unint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v11;
  const char *v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  double v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  WTF::StringImpl *v32;
  JSC::VM *v33;

  v33 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) == 0 && *(_BYTE *)(a2 + 5) == 38)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    v6 = *(_QWORD *)(v4 + 32);
    if (!v6)
      v5 = 0;
    if ((v5 != 0) == a3)
    {
      if ((a3 & 1) == 0)
      {
        v7 = *(_QWORD *)(v4 + 16);
        if (!v7
          || qword_1ECF4C038
          && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          && !((v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        {
          return 0xFFFE000000000000;
        }
      }
      if (*(_BYTE *)(v4 + 64))
        v8 = v6 == 0;
      else
        v8 = 1;
      if (v8)
        v31 = *(_QWORD *)(v4 + 48);
      else
        v31 = *(_QWORD *)(v6 + 32);
      if (HIDWORD(v31))
      {
        v22 = (double)v31;
      }
      else
      {
        if ((v31 & 0x80000000) == 0)
          return v31 | 0xFFFE000000000000;
        v22 = (double)v31;
      }
      return *(_QWORD *)&v22 + 0x2000000000000;
    }
  }
  v11 = a3 == 0;
  if (a3)
    v12 = "SharedArrayBuffer";
  else
    v12 = "ArrayBuffer";
  if (v11)
    v13 = 12;
  else
    v13 = 18;
  WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)"Receiver must be ", 18, (uint64_t)v12, v13, (int **)&v32);
  v9 = JSC::throwTypeError(a1, &v33, &v32);
  v21 = v32;
  v32 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  return v9;
}

unint64_t JSC::arrayBufferProtoFuncTransferImpl(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSObject *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)();
  const char *v15;
  JSC::VM **v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  JSC::ArrayBuffer *v21;
  uint64_t v22;
  int v23;
  JSC::VM *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  JSC::Heap **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  JSC::Exception *v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  JSC::ArrayBuffer *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int *v81;
  unsigned int v82;
  BOOL v83;
  JSC::JSGlobalObject *v84;
  uint64_t v85;
  size_t v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::AtomStringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  WTF::StringImpl *v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t OutOfMemoryError;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  JSC::Exception *v175;
  uint64_t v176;
  unint64_t v177;
  JSC::Heap **v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  JSC::Exception *v186;
  WTF::StringImpl *v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  JSC::Heap **v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  double v204;
  JSC::Exception *v205;
  WTF::AtomStringImpl *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  uint64_t v214;
  unint64_t v215;
  JSC::Heap **v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  double v223;
  JSC::Exception *v224;
  WTF::StringImpl *v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  JSC::Heap **v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  double v243;
  JSC::Exception *v244;
  WTF::StringImpl *v245;
  unint64_t v246;
  void *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t (*v254)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v255;
  unint64_t v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  void *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t (*v281)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v282;
  uint64_t (*v283)(__int128 *);
  _QWORD *v284;
  uint64_t (*v285)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v286;
  uint64_t (*v287)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v288;
  uint64_t v289;
  JSC::JSObject *v290;
  WTF::StringImpl *v291;
  WTF::StringImpl *v292;
  __int128 v293;
  JSC::SharedArrayBufferContents *v294[2];
  __int128 v295;
  char v296;
  JSC::VM *v297;
  WTF::StringImpl *v298;
  JSC::ArrayBuffer *v299;
  uint64_t v300;
  unint64_t v301;

  v9 = (unint64_t)a1;
  v10 = *((_QWORD *)a1 + 7);
  v289 = v10;
  v290 = a3;
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 38)
    goto LABEL_6;
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(v12 + 32);
  v14 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  if (!v13)
    v14 = 0;
  if (v14)
  {
LABEL_6:
    v15 = "Receiver must be ArrayBuffer";
    v16 = (JSC::VM **)&v289;
    v17 = 29;
LABEL_7:
    JSC::throwTypeError((unint64_t)a1, v16, (uint64_t)v15, v17);
    return 0;
  }
  if (*(_BYTE *)(v12 + 92))
  {
    v15 = "Receiver cannot be detached because it is WebAssembly.Memory";
    v16 = (JSC::VM **)&v289;
    v17 = 61;
    goto LABEL_7;
  }
  v19 = a4;
  if (a3 == (JSC::JSObject *)10)
  {
    v20 = *(_QWORD *)(v12 + 16);
    if (v20
      && (!qword_1ECF4C038
       || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
       || (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      if (*(_BYTE *)(v12 + 64) && v13)
        v21 = *(JSC::ArrayBuffer **)(v13 + 32);
      else
        v21 = *(JSC::ArrayBuffer **)(v12 + 48);
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = (JSC::ArrayBuffer *)JSC::JSValue::toTypedArrayIndex(&v290, a1, (uint64_t)"newLength", 10, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v10 + 80))
    {
      v23 = *(_DWORD *)(v10 + 80);
      if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v22, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
  }
  v24 = *(JSC::VM **)(v9 + 56);
  v297 = v24;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    v15 = "Receiver is detached";
    v16 = &v297;
    a1 = (JSC::JSGlobalObject *)v9;
    v17 = 21;
    goto LABEL_7;
  }
  if (*(_BYTE *)(v25 + 64))
  {
    if (!v19)
    {
      if (*(_QWORD *)(v25 + 56) < (unint64_t)v21)
      {
        *(_QWORD *)&v293 = "ArrayBuffer transfer failed with new byte length ";
        *((_QWORD *)&v293 + 1) = 50;
        v299 = v21;
        WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v293, (unint64_t *)&v299, (int **)&v298);
        if (v298)
        {
          v196 = *(_QWORD *)(v9 + 128);
          v197 = *(JSC::Heap ***)(v9 + 56);
          if ((v196 & 1) != 0)
          {
            v283 = *(uint64_t (**)(__int128 *))(v196 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v9 & 8) != 0)
              v284 = (_QWORD *)(v9 - 16);
            else
              v284 = (_QWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 8);
            *(_QWORD *)&v293 = *v284;
            *((_QWORD *)&v293 + 1) = v9;
            v294[0] = (JSC::SharedArrayBufferContents *)(v9 + 128);
            v196 = v283(&v293);
          }
          v198 = JSC::ErrorInstance::create(v197, v196, &v298, 0, 0, 0, 2, 1);
          v205 = (JSC::Exception *)v198;
          if ((v198 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v198 & 0xFFFFFFFE) + 0x4C)))
          {
            v205 = (JSC::Exception *)JSC::Exception::create((uint64_t)v24, (JSC::VM *)v198, 0, v199, v200, v201, v202, v203);
          }
          JSC::VM::throwException(v24, (JSC::JSGlobalObject *)v9, v205, v204, v199, v200, v201, v202, v203);
          v213 = v298;
          v298 = 0;
          if (v213)
          {
            if (*(_DWORD *)v213 == 2)
            {
              WTF::StringImpl::~StringImpl(v213, v206, v207, v208, v209, v210, v211, v212);
              WTF::fastFree(v264, v265, v266, v267, v268, v269, v270, v271);
            }
            else
            {
              *(_DWORD *)v213 -= 2;
            }
          }
          return 0;
        }
      }
      else
      {
        v296 = 0;
        *(_OWORD *)v294 = 0u;
        v295 = 0u;
        v293 = 0u;
        if (!JSC::ArrayBuffer::transferTo((JSC::ArrayBuffer *)v25, v24, (unsigned int **)&v293, a4, a5, a6, a7, a8))
        {
          v214 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v214 = 0x1B00000002;
          *(_QWORD *)(v214 + 8) = "ArrayBuffer transfer failed";
          *(_DWORD *)(v214 + 16) = 4;
          v298 = (WTF::StringImpl *)v214;
          v215 = *(_QWORD *)(v9 + 128);
          v216 = *(JSC::Heap ***)(v9 + 56);
          if ((v215 & 1) != 0)
          {
            v285 = *(uint64_t (**)(JSC::ArrayBuffer **))(v215 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v9 & 8) != 0)
              v286 = (JSC::ArrayBuffer **)(v9 - 16);
            else
              v286 = (JSC::ArrayBuffer **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
            v299 = *v286;
            v300 = v9;
            v301 = v9 + 128;
            v215 = v285(&v299);
          }
          v217 = JSC::ErrorInstance::create(v216, v215, &v298, 0, 0, 0, 2, 1);
          v224 = (JSC::Exception *)v217;
          if ((v217 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v217 & 0xFFFFFFFE) + 0x4C)))
          {
            v224 = (JSC::Exception *)JSC::Exception::create((uint64_t)v24, (JSC::VM *)v217, 0, v218, v219, v220, v221, v222);
          }
          JSC::VM::throwException(v24, (JSC::JSGlobalObject *)v9, v224, v223, v218, v219, v220, v221, v222);
          v225 = v298;
          v298 = 0;
          if (!v225)
            goto LABEL_44;
          if (*(_DWORD *)v225 != 2)
          {
            *(_DWORD *)v225 -= 2;
            goto LABEL_44;
          }
          WTF::StringImpl::~StringImpl(v225, v43, v44, v45, v46, v47, v48, v49);
LABEL_174:
          WTF::fastFree(v160, v161, v162, v163, v164, v165, v166, v167);
          goto LABEL_44;
        }
        JSC::ArrayBuffer::create((uint64_t)&v293, (uint64_t *)&v292);
        v27 = v292;
        JSC::ArrayBuffer::resize(v292, v24, (unint64_t)v21, v28, v29, v30, v31, v32, (uint64_t)&v299);
        if (!(_DWORD)v300)
        {
          v128 = JSC::JSGlobalObject::arrayBufferStructure(v9, 0);
          v292 = 0;
          v299 = v27;
          v18 = JSC::JSArrayBuffer::create((uint64_t)v24, v128, &v299, v129, v130, v131, v132, v133);
          if (v27)
          {
            v83 = *(_DWORD *)v27 == 2;
            *(_DWORD *)v27 -= 2;
            if (v83)
            {
              JSC::ArrayBuffer::~ArrayBuffer(v27, v43, v44, v45, v46, v47, v48, v49);
              WTF::fastFree(v134, v135, v136, v137, v138, v139, v140, v141);
            }
          }
LABEL_112:
          if (*((_QWORD *)&v293 + 1))
          {
            v142 = v293;
            if ((_QWORD)v293 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v142 = (v293 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)&v293 + 1) + 16))(*((_QWORD *)&v293 + 1), v142, v44);
          }
          v143 = (unsigned int *)v294[1];
          v294[1] = 0;
          if (v143)
          {
            do
            {
              v144 = __ldaxr(v143);
              v145 = v144 - 1;
            }
            while (__stlxr(v145, v143));
            if (!v145)
            {
              atomic_store(1u, v143);
              v299 = (JSC::ArrayBuffer *)v143;
              WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v299);
            }
          }
          v146 = (unsigned int *)v294[0];
          v294[0] = 0;
          if (v146)
          {
            do
            {
              v147 = __ldaxr(v146);
              v148 = v147 - 1;
            }
            while (__stlxr(v148, v146));
            if (!v148)
            {
              atomic_store(1u, v146);
              JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v146, (uint64_t)v43, v44, v45, v46, v47, v48, v49);
              WTF::fastFree(v226, v227, v228, v229, v230, v231, v232, v233);
            }
          }
          v80 = (unsigned int *)*((_QWORD *)&v293 + 1);
          *((_QWORD *)&v293 + 1) = 0;
          if (v80)
          {
            v149 = v80 + 2;
            do
            {
              v150 = __ldaxr(v149);
              v83 = --v150 == 0;
            }
            while (__stlxr(v150, v149));
            goto LABEL_129;
          }
          return v18;
        }
        v299 = (JSC::ArrayBuffer *)"ArrayBuffer resize failed with new byte length ";
        v300 = 48;
        v298 = v21;
        WTF::tryMakeString<WTF::ASCIILiteral,unsigned long>((uint64_t)&v299, (unint64_t *)&v298, (int **)&v291);
        if (v291)
        {
          v33 = *(_QWORD *)(v9 + 128);
          v34 = *(JSC::Heap ***)(v9 + 56);
          if ((v33 & 1) != 0)
          {
            v254 = *(uint64_t (**)(JSC::ArrayBuffer **))(v33 & 0xFFFFFFFFFFFFFFFCLL);
            if ((v9 & 8) != 0)
              v255 = (JSC::ArrayBuffer **)(v9 - 16);
            else
              v255 = (JSC::ArrayBuffer **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
            v299 = *v255;
            v300 = v9;
            v301 = v9 + 128;
            v33 = v254(&v299);
          }
          v35 = JSC::ErrorInstance::create(v34, v33, &v291, 0, 0, 0, 2, 1);
          v42 = (JSC::Exception *)v35;
          if ((v35 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x4C)))
          {
            v42 = (JSC::Exception *)JSC::Exception::create((uint64_t)v24, (JSC::VM *)v35, 0, v36, v37, v38, v39, v40);
          }
          JSC::VM::throwException(v24, (JSC::JSGlobalObject *)v9, v42, v41, v36, v37, v38, v39, v40);
          v50 = v291;
          v291 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
            {
              WTF::StringImpl::~StringImpl(v50, v43, v44, v45, v46, v47, v48, v49);
              WTF::fastFree(v152, v153, v154, v155, v156, v157, v158, v159);
              if (!v27)
                goto LABEL_44;
LABEL_133:
              v83 = *(_DWORD *)v27 == 2;
              *(_DWORD *)v27 -= 2;
              if (!v83)
                goto LABEL_44;
              JSC::ArrayBuffer::~ArrayBuffer(v27, v43, v44, v45, v46, v47, v48, v49);
              goto LABEL_174;
            }
            *(_DWORD *)v50 -= 2;
          }
          if (!v27)
          {
LABEL_44:
            v18 = 0;
            goto LABEL_112;
          }
          goto LABEL_133;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x19898D5A0);
    }
LABEL_69:
    JSC::ArrayBuffer::tryCreate((unint64_t)v21, 1, 0, 0, 0, a6, a7, a8, &v298);
    if (!v298)
    {
      OutOfMemoryError = JSC::createOutOfMemoryError(v9, v84);
      v175 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v175 = (JSC::Exception *)JSC::Exception::create((uint64_t)v24, (JSC::VM *)OutOfMemoryError, 0, v169, v170, v171, v172, v173);
      }
      JSC::VM::throwException(v24, (JSC::JSGlobalObject *)v9, v175, v174, v169, v170, v171, v172, v173);
      return 0;
    }
    v85 = *(_QWORD *)(a2 + 16);
    if (*(_BYTE *)(v85 + 64) && (v280 = *(_QWORD *)(v85 + 32)) != 0)
      v86 = *(_QWORD *)(v280 + 32);
    else
      v86 = *(_QWORD *)(v85 + 48);
    if (v86 >= (unint64_t)v21)
      v87 = (size_t)v21;
    else
      v87 = v86;
    v88 = *((_QWORD *)v298 + 2);
    if (v88 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v88 = (v88 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v89 = *(_QWORD *)(v85 + 16);
    if (v89 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v89 = (v89 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    memcpy((void *)v88, (const void *)v89, v87);
    v296 = 0;
    *(_OWORD *)v294 = 0u;
    v295 = 0u;
    v293 = 0u;
    if (JSC::ArrayBuffer::transferTo(*(JSC::ArrayBuffer **)(a2 + 16), v24, (unsigned int **)&v293, v90, v91, v92, v93, v94))
    {
      v95 = JSC::JSGlobalObject::arrayBufferStructure(v9, 0);
      v18 = JSC::JSArrayBuffer::create((uint64_t)v24, v95, &v298, v96, v97, v98, v99, v100);
    }
    else
    {
      v176 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v176 = 0x1B00000002;
      *(_QWORD *)(v176 + 8) = "ArrayBuffer transfer failed";
      *(_DWORD *)(v176 + 16) = 4;
      v292 = (WTF::StringImpl *)v176;
      v177 = *(_QWORD *)(v9 + 128);
      v178 = *(JSC::Heap ***)(v9 + 56);
      if ((v177 & 1) != 0)
      {
        v281 = *(uint64_t (**)(JSC::ArrayBuffer **))(v177 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v9 & 8) != 0)
          v282 = (JSC::ArrayBuffer **)(v9 - 16);
        else
          v282 = (JSC::ArrayBuffer **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
        v299 = *v282;
        v300 = v9;
        v301 = v9 + 128;
        v177 = v281(&v299);
      }
      v179 = JSC::ErrorInstance::create(v178, v177, &v292, 0, 0, 0, 2, 1);
      v186 = (JSC::Exception *)v179;
      if ((v179 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v179 & 0xFFFFFFFE) + 0x4C)))
      {
        v186 = (JSC::Exception *)JSC::Exception::create((uint64_t)v24, (JSC::VM *)v179, 0, v180, v181, v182, v183, v184);
      }
      JSC::VM::throwException(v24, (JSC::JSGlobalObject *)v9, v186, v185, v180, v181, v182, v183, v184);
      v187 = v292;
      v292 = 0;
      if (v187)
      {
        if (*(_DWORD *)v187 == 2)
        {
          WTF::StringImpl::~StringImpl(v187, v101, v102, v103, v104, v105, v106, v107);
          WTF::fastFree(v256, v257, v258, v259, v260, v261, v262, v263);
        }
        else
        {
          *(_DWORD *)v187 -= 2;
        }
      }
      v18 = 0;
    }
    if (*((_QWORD *)&v293 + 1))
    {
      v108 = v293;
      if ((_QWORD)v293 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v108 = (v293 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)&v293 + 1) + 16))(*((_QWORD *)&v293 + 1), v108);
    }
    v109 = (unsigned int *)v294[1];
    v294[1] = 0;
    if (v109)
    {
      do
      {
        v110 = __ldaxr(v109);
        v111 = v110 - 1;
      }
      while (__stlxr(v111, v109));
      if (!v111)
      {
        atomic_store(1u, v109);
        v299 = (JSC::ArrayBuffer *)v109;
        WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v299);
      }
    }
    v112 = (unsigned int *)v294[0];
    v294[0] = 0;
    if (v112)
    {
      do
      {
        v113 = __ldaxr(v112);
        v114 = v113 - 1;
      }
      while (__stlxr(v114, v112));
      if (!v114)
      {
        atomic_store(1u, v112);
        JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v112, (uint64_t)v101, v102, v103, v104, v105, v106, v107);
        WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
      }
    }
    v115 = (unsigned int *)*((_QWORD *)&v293 + 1);
    *((_QWORD *)&v293 + 1) = 0;
    if (v115)
    {
      v116 = v115 + 2;
      do
      {
        v117 = __ldaxr(v116);
        v118 = v117 - 1;
      }
      while (__stlxr(v118, v116));
      if (!v118)
      {
        atomic_store(1u, v115 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v115 + 8))(v115);
      }
    }
    v119 = v298;
    if (v298)
    {
      v83 = *(_DWORD *)v298 == 2;
      *(_DWORD *)v298 -= 2;
      if (v83)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v119, v101, v102, v103, v104, v105, v106, v107);
        WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
      }
    }
    return v18;
  }
  if (*(JSC::ArrayBuffer **)(v25 + 48) != v21)
    goto LABEL_69;
  v296 = 0;
  *(_OWORD *)v294 = 0u;
  v295 = 0u;
  v293 = 0u;
  if (JSC::ArrayBuffer::transferTo((JSC::ArrayBuffer *)v25, v24, (unsigned int **)&v293, a4, a5, a6, a7, a8))
  {
    JSC::ArrayBuffer::create((uint64_t)&v293, (uint64_t *)&v299);
    v51 = JSC::JSGlobalObject::arrayBufferStructure(v9, 0);
    v52 = v299;
    v298 = v299;
    v18 = JSC::JSArrayBuffer::create((uint64_t)v24, v51, &v298, v53, v54, v55, v56, v57);
    if (v52)
    {
      v83 = *(_DWORD *)v52 == 2;
      *(_DWORD *)v52 -= 2;
      if (v83)
      {
        JSC::ArrayBuffer::~ArrayBuffer(v52, v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v65, v66, v67, v68, v69, v70, v71, v72);
      }
    }
  }
  else
  {
    v234 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v234 = 0x1B00000002;
    *(_QWORD *)(v234 + 8) = "ArrayBuffer transfer failed";
    *(_DWORD *)(v234 + 16) = 4;
    v298 = (WTF::StringImpl *)v234;
    v235 = *(_QWORD *)(v9 + 128);
    v236 = *(JSC::Heap ***)(v9 + 56);
    if ((v235 & 1) != 0)
    {
      v287 = *(uint64_t (**)(JSC::ArrayBuffer **))(v235 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v288 = (JSC::ArrayBuffer **)(v9 - 16);
      else
        v288 = (JSC::ArrayBuffer **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v299 = *v288;
      v300 = v9;
      v301 = v9 + 128;
      v235 = v287(&v299);
    }
    v237 = JSC::ErrorInstance::create(v236, v235, &v298, 0, 0, 0, 2, 1);
    v244 = (JSC::Exception *)v237;
    if ((v237 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v237 & 0xFFFFFFFE) + 0x4C)))
    {
      v244 = (JSC::Exception *)JSC::Exception::create((uint64_t)v24, (JSC::VM *)v237, 0, v238, v239, v240, v241, v242);
    }
    JSC::VM::throwException(v24, (JSC::JSGlobalObject *)v9, v244, v243, v238, v239, v240, v241, v242);
    v245 = v298;
    v298 = 0;
    if (v245)
    {
      if (*(_DWORD *)v245 == 2)
      {
        WTF::StringImpl::~StringImpl(v245, (WTF::AtomStringImpl *)v58, v59, v60, v61, v62, v63, v64);
        WTF::fastFree(v272, v273, v274, v275, v276, v277, v278, v279);
      }
      else
      {
        *(_DWORD *)v245 -= 2;
      }
    }
    v18 = 0;
  }
  if (*((_QWORD *)&v293 + 1))
  {
    v73 = v293;
    if ((_QWORD)v293 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v73 = (v293 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)&v293 + 1) + 16))(*((_QWORD *)&v293 + 1), v73);
  }
  v74 = (unsigned int *)v294[1];
  v294[1] = 0;
  if (v74)
  {
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
    {
      atomic_store(1u, v74);
      v299 = (JSC::ArrayBuffer *)v74;
      WTF::ThreadSafeRefCounted<JSC::BufferMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v299);
    }
  }
  v77 = (unsigned int *)v294[0];
  v294[0] = 0;
  if (v77)
  {
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
    {
      atomic_store(1u, v77);
      JSC::SharedArrayBufferContents::~SharedArrayBufferContents((JSC::SharedArrayBufferContents *)v77, (uint64_t)v58, v59, v60, v61, v62, v63, v64);
      WTF::fastFree(v246, v247, v248, v249, v250, v251, v252, v253);
    }
  }
  v80 = (unsigned int *)*((_QWORD *)&v293 + 1);
  *((_QWORD *)&v293 + 1) = 0;
  if (v80)
  {
    v81 = v80 + 2;
    do
    {
      v82 = __ldaxr(v81);
      v83 = --v82 == 0;
    }
    while (__stlxr(v82, v81));
LABEL_129:
    if (v83)
    {
      atomic_store(1u, v80 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v80 + 8))(v80);
    }
  }
  return v18;
}

unint64_t JSC::Butterfly::growArrayRight(JSC::Butterfly *this, JSC::VM *a2, JSC::JSObject *a3, JSC::Structure *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  _OWORD *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *i;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  if ((_DWORD)a6)
    v11 = 8;
  else
    v11 = 0;
  v12 = a8 + 8 * a5 + 8;
  if (v12 > 0x1F60 || (v13 = *((_QWORD *)a2 + ((unint64_t)(a8 + 8 * a5 + 23) >> 4) + 842)) == 0)
  {
    result = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 6648, a2, v12, 0, a5, a6, a7, a8);
    goto LABEL_8;
  }
  v14 = *(unsigned int *)(v13 + 60);
  result = *(_QWORD *)(v13 + 24);
  if (result < *(_QWORD *)(v13 + 32))
  {
    *(_QWORD *)(v13 + 24) = result + v14;
    goto LABEL_8;
  }
  result = *(_QWORD *)(v13 + 40);
  if ((result & 1) != 0)
  {
    v32 = v11;
    v30 = (char *)a2 + 192;
    JSC::sanitizeStackForVM(a2, a2, v12, (uint64_t)a4, a5, a6, a7, a8);
    v31 = v30;
    v11 = v32;
    result = JSC::LocalAllocator::allocateSlowCase(v13, v31, v14, 0, 1);
LABEL_8:
    if (!result)
      return result;
    goto LABEL_9;
  }
  v29 = *(_QWORD *)(result + 8) ^ *(_QWORD *)(v13 + 48);
  *(_QWORD *)(v13 + 32) = result + HIDWORD(v29);
  *(_QWORD *)(v13 + 40) = result + (int)v29;
  *(_QWORD *)(v13 + 24) = result + v14;
LABEL_9:
  if ((a7 & 7) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19898D6F8);
  }
  v16 = (_OWORD *)((char *)this - 8 * a5 - 8);
  v17 = v11 + 8 * a5 + a7;
  if (v17 > 0xF0)
  {
    v22 = v17 & 0xFFFFFFFFFFFFFFE0;
    v23 = (_OWORD *)(v17 + result);
    v24 = (_OWORD *)(v22 + result);
    for (i = (_OWORD *)result; i != v24; i += 2)
    {
      v26 = *v16;
      v27 = v16[1];
      v16 += 2;
      *i = v26;
      i[1] = v27;
    }
    while (i != v23)
    {
      v28 = *(_QWORD *)v16;
      v16 = (_OWORD *)((char *)v16 + 8);
      *(_QWORD *)i = v28;
      i = (_OWORD *)((char *)i + 8);
    }
  }
  else if (v17 >= 8)
  {
    v18 = 0;
    v19 = v17 >> 3;
    v20 = 1;
    do
    {
      *(_QWORD *)(result + 8 * v18) = *((_QWORD *)v16 + v18);
      v18 = v20;
    }
    while (v19 > v20++);
  }
  result += 8 * a5 + 8;
  return result;
}

void JSC::JSArrayIterator::visitChildren(JSC::JSArrayIterator *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  unint64_t v19;
  int v21;
  unint64_t v22;
  int v24;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if ((v16 & 0xFFFE000000000002) != 0 || v16 == 0)
    goto LABEL_10;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v18 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_9:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_10;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
LABEL_10:
  v19 = *((_QWORD *)this + 3);
  if ((v19 & 0xFFFE000000000002) == 0 && v19 != 0)
  {
    if ((v19 & 8) != 0)
    {
      if ((*(_BYTE *)(v19 - 79) & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v21 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000), v21, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v19 & 0xFFFFFFFFFFFFC000) + 8 * ((v19 >> 10) & 0xF) + 0x28) >> (v19 >> 4)) & 1) != 0)
      {
LABEL_18:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_19;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v19, 0, v11, v12, v13, v14, v15);
  }
LABEL_19:
  v22 = *((_QWORD *)this + 4);
  if ((v22 & 0xFFFE000000000002) == 0 && v22 != 0)
  {
    if ((v22 & 8) != 0)
    {
      if ((*(_BYTE *)(v22 - 79) & 1) == 0)
        goto LABEL_34;
    }
    else
    {
      v24 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != v24)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000), v24, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v22 & 0xFFFFFFFFFFFFC000) + 8 * ((v22 >> 10) & 0xF) + 0x28) >> (v22 >> 4)) & 1) == 0)
        goto LABEL_34;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_34:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v22, 0, v11, v12, v13, v14, v15);
  }
}

void JSC::JSArrayIterator::visitChildren(JSC::JSArrayIterator *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  char v8;
  _QWORD v9[2];
  _QWORD *v10;
  char v11;

  v6[0] = a2;
  v6[1] = this;
  v8 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v7 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    v9[0] = a2;
    v9[1] = this;
    v11 = 0;
    v10 = v6;
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 2) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 3) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v9[0] + 88) = v10;
    *(_QWORD *)(v6[0] + 88) = v7;
  }
}

JSC::VM *JSC::JSArrayIterator::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  JSC::Heap *v15;
  uint64_t SlowCase;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::VM *v26;
  JSC::VM *v27;
  JSC::VM *v28;
  JSC::VM *v29;

  v8 = *(JSC::Heap **)(a1 + 40328);
  if (!v8)
  {
    v19 = a4;
    v22 = a1;
    v14 = a3;
    v28 = a2;
    v15 = JSC::GCClient::Heap::arrayIteratorSpaceSlow((JSC::Heap **)(a1 + 37552));
    a2 = v28;
    a3 = v14;
    v8 = v15;
    a4 = v19;
    a1 = v22;
  }
  v9 = a1 + 192;
  v10 = *((_QWORD *)v8 + 3);
  if (v10 < *((_QWORD *)v8 + 4))
    goto LABEL_4;
  v10 = *((_QWORD *)v8 + 5);
  if ((v10 & 1) == 0)
  {
    v13 = *(_QWORD *)(v10 + 8) ^ *((_QWORD *)v8 + 6);
    *((_QWORD *)v8 + 4) = v10 + HIDWORD(v13);
    *((_QWORD *)v8 + 5) = v10 + (int)v13;
LABEL_4:
    *((_QWORD *)v8 + 3) = v10 + 48;
    goto LABEL_5;
  }
  v23 = a1;
  v25 = a1 + 192;
  v17 = a3;
  v20 = a4;
  v29 = a2;
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v8, v25, 48, 0, 0);
  v9 = v25;
  a2 = v29;
  a3 = v17;
  a4 = v20;
  v10 = SlowCase;
  a1 = v23;
LABEL_5:
  *(_DWORD *)v10 = 0;
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 8) = 0u;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v10 + 24) = a3;
  *(_QWORD *)(v10 + 32) = 0xFFFE000000000000;
  *(_QWORD *)(v10 + 16) = 0xFFFE000000000000;
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    v21 = a1;
    v24 = v9;
    v26 = (JSC::VM *)v10;
    v18 = a4;
    JSC::Heap::writeBarrierSlowPath(v9, v10);
    v9 = v24;
    v10 = (unint64_t)v26;
    a4 = v18;
    a1 = v21;
  }
  *(_QWORD *)(v10 + 32) = a4;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v10 + 7))
  {
    v27 = (JSC::VM *)v10;
    JSC::Heap::writeBarrierSlowPath(v9, v10);
    return v27;
  }
  return (JSC::VM *)v10;
}

unint64_t JSC::JSArrayIterator::createWithInitialValues(JSC::JSArrayIterator *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v8;
  unint64_t SlowCase;
  int v10;
  unint64_t v12;
  JSC::JSArrayIterator *v13;
  JSC::VM *v14;
  JSC::Heap *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  JSC::JSArrayIterator *v21;

  v8 = (JSC::Heap *)*((_QWORD *)this + 5041);
  if (!v8)
  {
    v13 = this;
    v14 = a2;
    v15 = JSC::GCClient::Heap::arrayIteratorSpaceSlow((JSC::Heap **)this + 4694);
    a2 = v14;
    v8 = v15;
    this = v13;
  }
  SlowCase = *((_QWORD *)v8 + 3);
  if (SlowCase < *((_QWORD *)v8 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v8 + 5);
  if ((SlowCase & 1) == 0)
  {
    v12 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v8 + 6);
    *((_QWORD *)v8 + 4) = SlowCase + HIDWORD(v12);
    *((_QWORD *)v8 + 5) = SlowCase + (int)v12;
LABEL_4:
    *((_QWORD *)v8 + 3) = SlowCase + 48;
    goto LABEL_5;
  }
  v16 = (char *)this + 192;
  v20 = a2;
  v21 = this;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v8, (uint64_t)v16, 48, 0, 0, v17, v18, v19);
  a2 = v20;
  this = v21;
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v10 = *((_DWORD *)a2 + 2);
  *(_DWORD *)SlowCase = (unint64_t)a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v10;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_1991580B0;
  *(_QWORD *)(SlowCase + 32) = 0xFFFE000000000000;
  return SlowCase;
}

JSC::JSCell *JSC::JSAsyncFunction::createImpl(uint64_t a1, JSC::VM *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t SlowCase;
  JSC::JSCell *result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = (_QWORD *)(a1 + 38288);
  SlowCase = *(_QWORD *)(a1 + 38288);
  if (SlowCase < v10[1])
    goto LABEL_2;
  SlowCase = v10[2];
  if ((SlowCase & 1) == 0)
  {
    v13 = *(_QWORD *)(SlowCase + 8) ^ v10[3];
    v10[1] = SlowCase + HIDWORD(v13);
    v10[2] = SlowCase + (int)v13;
LABEL_2:
    *v10 = SlowCase + 32;
    goto LABEL_3;
  }
  v14 = a4;
  v15 = a3;
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38264, a1 + 192, 32, 0, 0, v16, v17, v18);
  a3 = v15;
  a4 = v14;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  result = JSC::JSCallee::JSCallee((JSC::JSCell *)SlowCase, a1, a3, a4);
  *((_QWORD *)result + 3) = a2;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::JSAsyncFunction::create(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t SlowCase;

  v10 = (uint64_t *)(a1 + 38288);
  v11 = *(_DWORD *)(*(_QWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x28) + 980);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  v13 = *v10;
  if ((unint64_t)*v10 < *(_QWORD *)(a1 + 38296))
    goto LABEL_5;
  v13 = *(_QWORD *)(a1 + 38304);
  if ((v13 & 1) == 0)
  {
    v21 = *(_QWORD *)(v13 + 8) ^ *(_QWORD *)(a1 + 38312);
    *(_QWORD *)(a1 + 38296) = v13 + HIDWORD(v21);
    *(_QWORD *)(a1 + 38304) = v13 + (int)v21;
LABEL_5:
    *v10 = v13 + 32;
    goto LABEL_6;
  }
  v22 = a3;
  v23 = v12;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, (uint64_t)a3, v12, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38264, a1 + 192, 32, 0, 0);
  v12 = v23;
  a3 = v22;
  v13 = SlowCase;
LABEL_6:
  *(_DWORD *)v13 = 0;
  JSC::JSCallee::JSCallee((JSC::JSCell *)v13, a1, (uint64_t)a3, v12);
  *(_QWORD *)(v13 + 24) = a2;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v18 = a2[14];
  if ((v18 & 1) != 0)
    v19 = (v18 >> 1) & 3;
  else
    v19 = *(unsigned __int8 *)(v18 + 4);
  if (v19 != 2)
    JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow(a2 + 14, (JSC::VM *)a1, (JSC::JSCell *)a2, v13, (uint64_t)"Allocating an async function", v14, v15, v16, v17);
  return v13;
}

uint64_t *JSC::FunctionExecutable::notifyCreation(JSC::FunctionExecutable *this, JSC::VM *a2, JSC::JSFunction *a3, const char *a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v14 = *((_QWORD *)this + 14);
  result = (uint64_t *)((char *)this + 112);
  v13 = v14;
  if ((v14 & 1) != 0)
    v15 = (v13 >> 1) & 3;
  else
    v15 = *(unsigned __int8 *)(v13 + 4);
  if (v15 != 2)
    return JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow(result, a2, this, (uint64_t)a3, (uint64_t)a4, a7, a8, a9, a5);
  return result;
}

JSC::JSCell *JSC::JSAsyncFunction::create(JSC::VM *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::JSCell *Impl;
  double v14;
  uint64_t v15;
  unsigned int v16;

  Impl = JSC::JSAsyncFunction::createImpl((uint64_t)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  v15 = a2[14];
  if ((v15 & 1) != 0)
    v16 = (v15 >> 1) & 3;
  else
    v16 = *(unsigned __int8 *)(v15 + 4);
  if (v16 != 2)
    JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow(a2 + 14, a1, (JSC::JSCell *)a2, (uint64_t)Impl, (uint64_t)"Allocating an async function", v10, v11, v12, v14);
  return Impl;
}

JSC::JSCell *JSC::JSAsyncFunction::createWithInvalidatedReallocationWatchpoint(uint64_t a1, JSC::VM *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;

  v8 = *(_DWORD *)(*(_QWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x28) + 980);
  if (v8)
    v9 = 16 * (v8 & 0xFFFFFFFE);
  else
    v9 = 0;
  return JSC::JSAsyncFunction::createImpl(a1, a2, (uint64_t)a3, v9, a5, a6, a7, a8);
}

void JSC::JSAsyncGenerator::visitChildren(JSC::JSAsyncGenerator *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  int v20;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = 0;
  v17 = (char *)this + 16;
  do
  {
    v18 = *(_QWORD *)&v17[v16];
    if ((v18 & 0xFFFE000000000002) == 0 && v18 != 0)
    {
      if ((v18 & 8) != 0)
      {
        if ((*(_BYTE *)(v18 - 79) & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        v20 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v20)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v20, v10, v11, v12, v13, v14, v15);
        if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
        {
LABEL_10:
          if (!*((_QWORD *)a2 + 21))
            goto LABEL_11;
        }
      }
      JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, v11, v12, v13, v14, v15);
    }
LABEL_11:
    v16 += 8;
  }
  while (v16 != 64);
}

void JSC::JSAsyncGenerator::visitChildren(JSC::JSAsyncGenerator *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  char v8;
  _QWORD v9[2];
  _QWORD *v10;
  char v11;

  v6[0] = a2;
  v6[1] = this;
  v8 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v7 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    v9[0] = a2;
    v9[1] = this;
    v11 = 0;
    v10 = v6;
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 2) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 3) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 5) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 6) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 7) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 8) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 9) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v9[0] + 88) = v10;
    *(_QWORD *)(v6[0] + 88) = v7;
  }
}

double JSC::JSAsyncGenerator::create(JSC::JSAsyncGenerator *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v10;
  unint64_t SlowCase;
  int v12;
  double result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = (JSC::Heap *)*((_QWORD *)this + 5042);
  if (!v10)
    v10 = JSC::GCClient::Heap::asyncGeneratorSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = *((_QWORD *)v10 + 3);
  if (SlowCase < *((_QWORD *)v10 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v10 + 5);
  if ((SlowCase & 1) == 0)
  {
    v14 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = SlowCase + HIDWORD(v14);
    *((_QWORD *)v10 + 5) = SlowCase + (int)v14;
LABEL_4:
    *((_QWORD *)v10 + 3) = SlowCase + 80;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v10, (uint64_t)this + 192, 80, 0, 0, v15, v16, v17);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)SlowCase = (unint64_t)a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v12;
  *(_QWORD *)(SlowCase + 72) = 0;
  *(_OWORD *)(SlowCase + 56) = 0u;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_OWORD *)(SlowCase + 16) = xmmword_1991580C0;
  *(int64x2_t *)(SlowCase + 32) = vdupq_n_s64(0xAuLL);
  *(_QWORD *)&result = 10;
  *(_OWORD *)(SlowCase + 48) = xmmword_1991580D0;
  *(int64x2_t *)(SlowCase + 64) = vdupq_n_s64(2uLL);
  return result;
}

JSC::JSCell *JSC::JSAsyncGeneratorFunction::createImpl(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v12;
  JSC::JSCell *result;

  v12 = (JSC::JSCell *)JSC::allocateCell<JSC::JSAsyncGeneratorFunction>((_QWORD *)a1, (JSC::VM *)0x20, a3, a4, a5, a6, a7, a8);
  result = JSC::JSCallee::JSCallee(v12, a1, a3, a4);
  *((_QWORD *)result + 3) = a2;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::allocateCell<JSC::JSAsyncGeneratorFunction>(_QWORD *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v9 = a1 + 4786;
  v10 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  result = a1[4786];
  if (result >= v9[1])
  {
    result = v9[2];
    if ((result & 1) != 0)
    {
      v13 = a1 + 4783;
      v14 = a1 + 24;
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v13, v14, v10, 0, 0);
      goto LABEL_3;
    }
    v12 = *(_QWORD *)(result + 8) ^ v9[3];
    v9[1] = result + HIDWORD(v12);
    v9[2] = result + (int)v12;
  }
  *v9 = result + v10;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

JSC::JSFunction *JSC::JSAsyncGeneratorFunction::create(JSC::VM *a1, JSC::FunctionExecutable *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unint64_t v11;
  JSC::JSFunction *Impl;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;

  v10 = *(_DWORD *)(*(_QWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x28) + 984);
  if (v10)
    v11 = 16 * (v10 & 0xFFFFFFFE);
  else
    v11 = 0;
  Impl = JSC::JSAsyncGeneratorFunction::createImpl((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, v11, a5, a6, a7, a8);
  JSC::FunctionExecutable::notifyCreation(a2, a1, Impl, "Allocating an async generator", v17, v13, v14, v15, v16);
  return Impl;
}

JSC::JSCell *JSC::JSAsyncGeneratorFunction::create(JSC::VM *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::JSCell *Impl;
  double v14;
  uint64_t v15;
  unsigned int v16;

  Impl = JSC::JSAsyncGeneratorFunction::createImpl((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v15 = a2[14];
  if ((v15 & 1) != 0)
    v16 = (v15 >> 1) & 3;
  else
    v16 = *(unsigned __int8 *)(v15 + 4);
  if (v16 != 2)
    JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow(a2 + 14, a1, (JSC::JSCell *)a2, (uint64_t)Impl, (uint64_t)"Allocating an async generator", v10, v11, v12, v14);
  return Impl;
}

JSC::JSCell *JSC::JSAsyncGeneratorFunction::createWithInvalidatedReallocationWatchpoint(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;

  v8 = *(_DWORD *)(*(_QWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x28) + 984);
  if (v8)
    v9 = 16 * (v8 & 0xFFFFFFFE);
  else
    v9 = 0;
  return JSC::JSAsyncGeneratorFunction::createImpl(a1, a2, (uint64_t)a3, v9, a5, a6, a7, a8);
}

uint64_t JSC::JSBigInt::estimatedSize(uint64_t a1)
{
  uint64_t v1;

  if ((a1 & 8) != 0)
    v1 = *(_QWORD *)(a1 - 88);
  else
    v1 = 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
  return v1 + 8 * *(unsigned int *)(a1 + 8);
}

void JSC::JSBigInt::visitChildren(JSC::JSBigInt *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unint64_t v12;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    if (!qword_1ECF4C038
      || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
      || (v12 = (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038) != 0)
    {
      JSC::SlotVisitor::markAuxiliary(a2, v12, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::JSBigInt::visitChildren(JSC::JSBigInt *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];
  uint64_t v9;
  char v10;
  _QWORD v11[2];
  _QWORD *v12;
  char v13;

  v8[0] = a2;
  v8[1] = this;
  v10 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v9 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19898E78CLL);
  }
  v11[0] = a2;
  v11[1] = this;
  v13 = 0;
  v12 = v8;
  *((_QWORD *)a2 + 11) = v11;
  result = (*(uint64_t (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
  *(_QWORD *)(v11[0] + 88) = v12;
  v7 = *((_QWORD *)this + 3);
  if (v7
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 88))(a2);
  }
  *(_QWORD *)(v8[0] + 88) = v9;
  return result;
}

uint64_t JSC::JSBigInt::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 100663299;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::JSBigInt::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::JSBigInt::createZero(JSC::JSGlobalObject **this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)this, this[7], 0, a4, a5, a6, a7, a8);
}

unint64_t JSC::JSBigInt::tryCreateZero(JSC::JSBigInt *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::JSBigInt::createWithLength(0, this, 0, a4, a5, a6, a7, a8);
}

unint64_t JSC::JSBigInt::tryCreateWithLength(JSC::JSBigInt *this, JSC::VM *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::JSBigInt::createWithLength(0, this, a2, a4, a5, a6, a7, a8);
}

unint64_t JSC::JSBigInt::createWithLength(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t Slow;
  unint64_t SlowCase;
  unint64_t v16;
  int v17;
  uint64_t v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  JSC::VM *v40;

  if (a3 > 0x4000)
  {
    if (this)
    {
      v40 = a2;
      v19 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v19 = 0x2F00000002;
      *(_QWORD *)(v19 + 8) = "BigInt generated from this operation is too big";
      *(_DWORD *)(v19 + 16) = 4;
      v39 = (WTF::StringImpl *)v19;
      JSC::throwOutOfMemoryError(this, &v40, &v39);
      v27 = v39;
      v39 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::~StringImpl(v27, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v27 -= 2;
        }
      }
    }
    return 0;
  }
  v10 = a3;
  v11 = 8 * a3;
  if (v10 > 0x3EC
    || (v12 = *(_QWORD *)((char *)a2 + (((unint64_t)(v11 + 15) >> 1) & 0x7FFFFFFF8) + 2592)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a2 + 2504, a2, v11, 0, a5, a6, a7, a8);
    goto LABEL_6;
  }
  v13 = *(unsigned int *)(v12 + 60);
  Slow = *(_QWORD *)(v12 + 24);
  if (Slow < *(_QWORD *)(v12 + 32))
  {
    *(_QWORD *)(v12 + 24) = Slow + v13;
LABEL_6:
    if (Slow)
      goto LABEL_7;
    if (this)
    {
      v40 = a2;
      JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v40);
    }
    return 0;
  }
  Slow = *(_QWORD *)(v12 + 40);
  if ((Slow & 1) != 0)
  {
    JSC::sanitizeStackForVM(a2, a2, v11, a4, a5, a6, a7, a8);
    Slow = JSC::LocalAllocator::allocateSlowCase(v12, (char *)a2 + 192, v13, 0, 1);
    goto LABEL_6;
  }
  v29 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v12 + 48);
  *(_QWORD *)(v12 + 32) = Slow + HIDWORD(v29);
  *(_QWORD *)(v12 + 40) = Slow + (int)v29;
  *(_QWORD *)(v12 + 24) = Slow + v13;
LABEL_7:
  SlowCase = *((_QWORD *)a2 + 4709);
  if (SlowCase >= *((_QWORD *)a2 + 4710))
  {
    SlowCase = *((_QWORD *)a2 + 4711);
    if ((SlowCase & 1) != 0)
    {
      v38 = Slow;
      JSC::sanitizeStackForVM(a2, a2, v11, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)a2 + 37648, (char *)a2 + 192, 32, 0, 0);
      Slow = v38;
      goto LABEL_9;
    }
    v28 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)a2 + 4712);
    *((_QWORD *)a2 + 4710) = SlowCase + HIDWORD(v28);
    *((_QWORD *)a2 + 4711) = SlowCase + (int)v28;
  }
  *((_QWORD *)a2 + 4709) = SlowCase + 32;
LABEL_9:
  *(_DWORD *)SlowCase = 0;
  v16 = *((_QWORD *)a2 + 5228);
  v17 = *(_DWORD *)(v16 + 8);
  *(_DWORD *)SlowCase = v16 >> 4;
  *(_DWORD *)(SlowCase + 4) = v17;
  *(_DWORD *)(SlowCase + 8) = v10;
  *(_DWORD *)(SlowCase + 12) = 0;
  *(_BYTE *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = Slow;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, SlowCase);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  return SlowCase;
}

unint64_t JSC::JSBigInt::createWithLength(JSC::JSGlobalObject **this, JSC::JSGlobalObject *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)this, this[7], a2, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSBigInt::createFrom(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  JSC::JSGlobalObject *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v8 = a2;
  v9 = (JSC::JSGlobalObject *)*((_QWORD *)this + 7);
  if (!v8)
    return JSC::JSBigInt::createWithLength(this, v9, 0, a4, a5, a6, a7, a8);
  result = JSC::JSBigInt::createWithLength(this, v9, (JSC::VM *)1, a4, a5, a6, a7, a8);
  if (result)
  {
    if ((v8 & 0x80000000) != 0)
    {
      v12 = *(_QWORD *)(result + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v12 = (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v12 = -(uint64_t)(int)v8;
      *(_BYTE *)(result + 16) = 1;
    }
    else
    {
      v11 = *(_QWORD *)(result + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v11 = (v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v11 = v8;
    }
  }
  return result;
}

uint64_t JSC::JSBigInt::createFrom(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, JSC::VM *a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (!(_DWORD)a3)
    return JSC::JSBigInt::createWithLength(this, a2, a3, a4);
  v4 = a3;
  result = JSC::JSBigInt::createWithLength(this, a2, (JSC::VM *)1, a4);
  if (result)
  {
    if ((v4 & 0x80000000) != 0)
    {
      v7 = *(_QWORD *)(result + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v7 = (v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v7 = -(uint64_t)(int)v4;
      *(_BYTE *)(result + 16) = 1;
    }
    else
    {
      v6 = *(_QWORD *)(result + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v6 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v6 = v4;
    }
  }
  return result;
}

uint64_t JSC::JSBigInt::createFrom(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v8 = *((_QWORD *)this + 7);
  if (!a2)
    return JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), 0, a4, a5, a6, a7, a8);
  result = JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), (JSC::VM *)1, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v19 = result;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v11, v12, v13, v14, v15, v16);
      result = v19;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v17 = *(_QWORD *)(result + 24);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v17 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)v17 = a2;
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t JSC::JSBigInt::createFrom(JSC::JSBigInt *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  if (a2 >= 0)
    v8 = a2;
  else
    v8 = -a2;
  v9 = *((_QWORD *)this + 7);
  if (!a2)
    return JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), 0, a4, a5, a6, a7, a8);
  result = JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), (JSC::VM *)1, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    v19 = *(_DWORD *)(v9 + 80);
    if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
    {
      v20 = result;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v12, v13, v14, v15, v16, v17);
      result = v20;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  v18 = *(_QWORD *)(result + 24);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)v18 = v8;
  *(_BYTE *)(result + 16) = a2 < 0;
  return result;
}

uint64_t JSC::JSBigInt::createFrom(JSC::JSBigInt *this, unint64_t a2, __int128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int128 v10;
  JSC::JSGlobalObject *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v7 = *((_QWORD *)this + 7);
  if (!(a2 | (unint64_t)a3))
    return JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), 0, *((uint64_t *)&a3 + 1), a4, a5, a6, a7);
  v8 = a3;
  v9 = a2 ^ ((uint64_t)a3 >> 63);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)this + 7);
  v10 = __PAIR128__((unint64_t)a3 ^ ((uint64_t)a3 >> 63), v9) - __PAIR128__((uint64_t)a3 >> 63, (uint64_t)a3 >> 63);
  if ((__PAIR128__((unint64_t)a3 ^ ((uint64_t)a3 >> 63), v9) - __PAIR128__((uint64_t)a3 >> 63, (uint64_t)a3 >> 63)) >> 64)
  {
    result = JSC::JSBigInt::createWithLength(this, v11, (JSC::VM *)2, *((uint64_t *)&a3 + 1), a4, a5, a6, a7);
    if (!*(_DWORD *)(v7 + 80))
      goto LABEL_10;
    v28 = *(_DWORD *)(v7 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
    {
      v30 = result;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v7 + 64), 7u, v20, v21, v22, v23, v24, v25);
      result = v30;
    }
    if (!*(_QWORD *)(v7 + 16))
    {
LABEL_10:
      v26 = *(_QWORD *)(result + 24);
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022)
        {
          v26 = (v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else if (!disablePrimitiveGigacageRequested)
        {
          v26 = (v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
      }
      *(_OWORD *)v26 = v10;
      goto LABEL_14;
    }
  }
  else
  {
    result = JSC::JSBigInt::createWithLength(this, v11, (JSC::VM *)1, *((uint64_t *)&a3 + 1), a4, a5, a6, a7);
    if (!*(_DWORD *)(v7 + 80))
      goto LABEL_4;
    v27 = *(_DWORD *)(v7 + 80);
    if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
    {
      v29 = result;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v7 + 64), 7u, v13, v14, v15, v16, v17, v18);
      result = v29;
    }
    if (!*(_QWORD *)(v7 + 16))
    {
LABEL_4:
      v19 = *(_QWORD *)(result + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v19 = (v19 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v19 = v10;
LABEL_14:
      *(_BYTE *)(result + 16) = v8 < 0;
      return result;
    }
  }
  return 0;
}

JSC::JSBigInt *JSC::JSBigInt::createFrom(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  BOOL v37;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;

  v10 = *((_QWORD *)this + 7);
  if (a3 == 0.0)
    return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), 0, a5, a6, a7, a8, a9);
  v13 = ((*(_QWORD *)&a3 >> 52) & 0x7FF) - 1023;
  v14 = v13 >> 6;
  v21 = JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), (JSC::VM *)((v13 >> 6) + 1), a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v10 + 80))
  {
    v41 = *(_DWORD *)(v10 + 80);
    if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v15, v16, v17, v18, v19, v20);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v22 = *(_QWORD *)(v21 + 24);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v22 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  bzero((void *)v22, 8 * *(unsigned int *)(v21 + 8));
  *(_BYTE *)(v21 + 16) = a3 < 0.0;
  v24 = *(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  v25 = v24 << ((v13 & 0x3F) - 52);
  v26 = v24 >> (52 - (v13 & 0x3F));
  v27 = v24 << ((v13 & 0x3F) + 12);
  if ((v13 & 0x3F) <= 0x33)
    v28 = v27;
  else
    v28 = 0;
  if ((v13 & 0x3F) <= 0x33)
    v29 = 52 - (v13 & 0x3F);
  else
    v29 = 0;
  if ((v13 & 0x3F) > 0x33)
    v26 = v25;
  v30 = *(_QWORD *)(v21 + 24);
  v31 = qword_1ECF4C038;
  if (qword_1ECF4C038)
  {
    if (byte_1ECF4C022 || (v32 = *(_QWORD *)(v21 + 24), !disablePrimitiveGigacageRequested))
      v32 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  }
  else
  {
    v32 = *(_QWORD *)(v21 + 24);
  }
  *(_QWORD *)(v32 + 8 * v14) = v26;
  if (v13 >= 0x40)
  {
    v33 = (v14 - 1);
    if (v31)
    {
      v34 = (v30 & 0x3FFFFFFFFLL) + v31;
      if (byte_1ECF4C022)
      {
        v35 = (unint64_t *)(v34 + 8 * v33);
        do
        {
          if (v29 <= 0)
            v36 = 0;
          else
            v36 = v28;
          if (v29 > 0)
          {
            v28 = 0;
            v29 -= 64;
          }
          *v35-- = v36;
          v37 = __OFSUB__(v14--, 1);
        }
        while (!((v14 < 0) ^ v37 | (v14 == 0)));
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v44 = (unint64_t *)(v30 + 8 * v33);
        do
        {
          if (v29 <= 0)
            v45 = 0;
          else
            v45 = v28;
          if (v29 > 0)
          {
            v28 = 0;
            v29 -= 64;
          }
          *v44-- = v45;
          v37 = __OFSUB__(v14--, 1);
        }
        while (!((v14 < 0) ^ v37 | (v14 == 0)));
      }
      else
      {
        v42 = (unint64_t *)(v34 + 8 * v33);
        do
        {
          if (v29 <= 0)
            v43 = 0;
          else
            v43 = v28;
          if (v29 > 0)
          {
            v28 = 0;
            v29 -= 64;
          }
          *v42-- = v43;
          v37 = __OFSUB__(v14--, 1);
        }
        while (!((v14 < 0) ^ v37 | (v14 == 0)));
      }
    }
    else
    {
      v39 = (unint64_t *)(v30 + 8 * v33);
      do
      {
        if (v29 <= 0)
          v40 = 0;
        else
          v40 = v28;
        if (v29 > 0)
        {
          v28 = 0;
          v29 -= 64;
        }
        *v39-- = v40;
        v37 = __OFSUB__(v14--, 1);
      }
      while (!((v14 < 0) ^ v37 | (v14 == 0)));
    }
  }
  return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v21, this, *((JSC::VM **)this + 7), v23);
}

JSC::JSBigInt *JSC::JSBigInt::rightTrim(JSC::JSBigInt *this, JSC::VM **a2, uint64_t a3, unsigned int a4)
{
  return JSC::JSBigInt::rightTrim(this, (JSC::JSGlobalObject *)a2, a2[7], a4);
}

JSC::JSBigInt *JSC::JSBigInt::parseInt<unsigned char>(JSC::JSBigInt *a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned int a5)
{
  JSC::JSGlobalObject *v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v15;

  v8 = (JSC::JSGlobalObject *)*((_QWORD *)a1 + 7);
  if (a3)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(unsigned __int8 *)(a2 + v9);
      if ((v10 - 9) >= 5 && v10 != 32 && v10 != 160)
        break;
      if (a3 == ++v9)
      {
        if (a3 != -1)
        {
          v13 = 0;
          a5 = a3;
          goto LABEL_17;
        }
        __break(1u);
        goto LABEL_20;
      }
    }
    a5 = v9 + 1;
    if (v9 + 1 < a3 && v10 == 48)
    {
      v11 = *(unsigned __int8 *)(a2 + v9 + 1) | 0x20;
      switch(v11)
      {
        case 'x':
          a5 = v9 + 2;
          v15 = 0;
          v12 = 16;
          goto LABEL_27;
        case 'o':
          a5 = v9 + 2;
          v15 = 0;
          v12 = 8;
          goto LABEL_27;
        case 'b':
          a5 = v9 + 2;
          v15 = 0;
          v12 = 2;
LABEL_27:
          v13 = 0;
          return JSC::JSBigInt::parseInt<unsigned char>(a1, v8, a2, a3, a5, v12, a4, v13, v15);
      }
    }
    else
    {
LABEL_20:
      if (v10 == 45)
      {
        v13 = 1;
        goto LABEL_17;
      }
    }
    v13 = 0;
    if (v10 != 43)
      a5 = v9;
  }
  else
  {
    v13 = 0;
    a5 = 0;
  }
LABEL_17:
  v15 = 1;
  v12 = 10;
  return JSC::JSBigInt::parseInt<unsigned char>(a1, v8, a2, a3, a5, v12, a4, v13, v15);
}

JSC::JSBigInt *JSC::JSBigInt::parseInt<char16_t>(JSC::JSBigInt *a1, uint64_t a2, unint64_t a3, int a4)
{
  JSC::JSGlobalObject *v8;
  uint64_t i;
  unsigned int v10;
  BOOL v14;
  uint64_t v16;
  unsigned int v17;
  JSC::JSBigInt *v18;
  JSC::JSGlobalObject *v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  int v25;
  int v26;

  v8 = (JSC::JSGlobalObject *)*((_QWORD *)a1 + 7);
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v10 = *(unsigned __int16 *)(a2 + 2 * i);
      if (v10 > 0xFF)
      {
        if (u_charType(*(unsigned __int16 *)(a2 + 2 * i)) != 12 && v10 - 8232 >= 2 && v10 != 65279)
          goto LABEL_32;
      }
      else if (*(_WORD *)(a2 + 2 * i) > 0x20u || ((1 << v10) & 0x100001A00) == 0)
      {
        v14 = *(_WORD *)(a2 + 2 * i) == 160 || v10 == 13;
        if (!v14 && v10 != 10)
          goto LABEL_33;
      }
    }
    if (a3 != -1)
    {
      v16 = 0;
      v17 = a3;
      goto LABEL_29;
    }
    __break(1u);
LABEL_32:
    v10 = *(unsigned __int16 *)(a2 + 2 * i);
LABEL_33:
    v17 = i + 1;
    if (i + 1 < a3 && v10 == 48)
    {
      v25 = *(unsigned __int16 *)(a2 + 2 * i + 2) | 0x20;
      switch(v25)
      {
        case 'x':
          v17 = i + 2;
          v26 = 0;
          v18 = a1;
          v19 = v8;
          v20 = a2;
          v21 = a3;
          v22 = 16;
          goto LABEL_46;
        case 'o':
          v17 = i + 2;
          v26 = 0;
          v18 = a1;
          v19 = v8;
          v20 = a2;
          v21 = a3;
          v22 = 8;
          goto LABEL_46;
        case 'b':
          v17 = i + 2;
          v26 = 0;
          v18 = a1;
          v19 = v8;
          v20 = a2;
          v21 = a3;
          v22 = 2;
LABEL_46:
          v23 = a4;
          v16 = 0;
          return JSC::JSBigInt::parseInt<char16_t>(v18, v19, v20, v21, v17, v22, v23, v16, v26);
      }
      goto LABEL_41;
    }
    if (v10 != 45)
    {
LABEL_41:
      v16 = 0;
      if (v10 != 43)
        v17 = i;
      goto LABEL_29;
    }
    v16 = 1;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
LABEL_29:
  v26 = 1;
  v18 = a1;
  v19 = v8;
  v20 = a2;
  v21 = a3;
  v22 = 10;
  v23 = a4;
  return JSC::JSBigInt::parseInt<char16_t>(v18, v19, v20, v21, v17, v22, v23, v16, v26);
}

JSC::JSBigInt *JSC::JSBigInt::parseInt<unsigned char>(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, uint64_t a3, unint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, int a9)
{
  JSC::VM *v9;
  JSC::JSGlobalObject *v10;
  unint64_t v11;
  int v15;
  JSC::JSBigInt *result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  JSC::Exception *v24;
  JSC::VM *v25;
  JSC::JSGlobalObject *v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  unint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::VM *v58;
  unint64_t v59;
  JSC::VM *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  JSC::JSGlobalObject *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  JSC::JSGlobalObject *v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const WTF::String *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  JSC::JSGlobalObject *v93;
  JSC::JSGlobalObject *v94;
  WTF::StringImpl *v95;

  v9 = a2;
  v10 = this;
  v11 = a5;
  if (a9 != 1 && a4 == a5)
  {
    if (!(_DWORD)a7)
    {
      v17 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v17 = 0x2000000002;
      *(_QWORD *)(v17 + 8) = "Failed to parse String to BigInt";
      *(_DWORD *)(v17 + 16) = 4;
      v95 = (WTF::StringImpl *)v17;
      v18 = JSC::createSyntaxError(v10, &v95, 0);
      v24 = (JSC::Exception *)v18;
      if ((v18 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)))
      {
        v24 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)v18, 0, v19, v20, v21, v22, v23);
      }
      v25 = v9;
      v26 = v10;
      goto LABEL_17;
    }
    return 0;
  }
  else
  {
    if (a4 > a5)
    {
      while (*(_BYTE *)(a3 + v11) == 48)
      {
        if (a4 == ++v11)
        {
          v11 = a4;
          break;
        }
      }
    }
    if ((int)a4 - 1 >= (int)v11)
    {
      v35 = a4;
      while (1)
      {
        v15 = v35 - 1;
        if (a4 <= v35 - 1)
        {
LABEL_86:
          __break(1u);
          goto LABEL_87;
        }
        v36 = *(unsigned __int8 *)(a3 + v15);
        if ((v36 - 9) >= 5 && v36 != 32 && v36 != 160)
          break;
        v37 = v35 - 2;
        --v35;
        if (v37 < (int)v11)
          goto LABEL_11;
      }
      v15 = v35;
    }
    else
    {
      v15 = a4;
    }
LABEL_11:
    if (v11 == v15)
      return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(this, a2, 0, a4);
    v38 = v15;
    HIDWORD(v40) = a6;
    LODWORD(v40) = a6 - 2;
    v39 = v40 >> 1;
    if (v39 > 7)
      v41 = 1;
    else
      v41 = dword_199158110[v39];
    if (a6 >= 0xA)
      v42 = 10;
    else
      v42 = a6;
    if (v11 < v38)
    {
      v43 = 0;
      v44 = v42 | 0x30;
      v45 = a6 + 87;
      v46 = a6 + 55;
      v90 = v38 - v11;
      v47 = a6;
      v93 = a2;
      v94 = v10;
LABEL_36:
      v48 = 0;
      v49 = 0;
      if (a4 <= v11)
        v50 = v11;
      else
        v50 = a4;
      v51 = v11 - v50;
      v52 = 1;
      while (1)
      {
        if (!is_mul_ok(v49, v47))
        {
LABEL_92:
          __break(0xC471u);
          JUMPOUT(0x19898FAF8);
        }
        if (!is_mul_ok(v52, v47))
        {
          __break(0xC471u);
          JUMPOUT(0x19898FB00);
        }
        if (!(v51 + v48))
          goto LABEL_86;
        v53 = *(unsigned __int8 *)(a3 + v11 + v48);
        if (v53 < 0x30)
          goto LABEL_77;
        v54 = v49 * v47;
        if (v44 <= v53)
        {
          if (v53 < 0x61)
          {
            if (v53 < 0x41)
              goto LABEL_77;
LABEL_54:
            if (v46 <= v53)
            {
LABEL_77:
              if ((_DWORD)a7)
                return 0;
              v69 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v69 = 0x2000000002;
              *(_QWORD *)(v69 + 8) = "Failed to parse String to BigInt";
              *(_DWORD *)(v69 + 16) = 4;
              v95 = (WTF::StringImpl *)v69;
              v70 = v94;
              v71 = JSC::createSyntaxError(v94, &v95, 0);
              goto LABEL_79;
            }
            v57 = v53 - 55;
            v49 = v54 + v57;
            if (__CFADD__(v54, v57))
            {
              __break(0xC471u);
              JUMPOUT(0x19898FB10);
            }
            goto LABEL_56;
          }
          if (v45 <= v53)
            goto LABEL_54;
          v56 = v53 - 87;
          v49 = v54 + v56;
          if (__CFADD__(v54, v56))
            goto LABEL_92;
        }
        else
        {
          v55 = v53 - 48;
          v49 = v54 + v55;
          if (__CFADD__(v54, v55))
          {
            __break(0xC471u);
            JUMPOUT(0x19898FB08);
          }
        }
LABEL_56:
        v52 *= v47;
        if (++v48 >= v41 || v48 + v11 >= v38)
        {
          v91 = v46;
          v92 = v45;
          v11 += v48;
          if (v43)
            goto LABEL_71;
          if (v11 == v38)
          {
            v58 = (JSC::VM *)((_DWORD)a8 == 1 ? -(uint64_t)v49 : v49);
            if (v58 == (JSC::VM *)(int)v58)
              return (JSC::JSBigInt *)JSC::JSBigInt::createFrom(v94, v93, v58, a4);
          }
          v59 = JSC::maxBitsPerCharTable[v47] * (unint64_t)v90;
          if (v59 <= 0xFFFFFFFE0)
          {
            v60 = (JSC::VM *)((((v59 + 31) >> 5) + 63) >> 6);
            if (v60 <= 0x4000)
            {
              v88 = a7;
              v89 = a8;
              result = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(v94, v93, v60, a4);
              if (!result)
                return result;
              v61 = (uint64_t)result;
              v62 = *((_QWORD *)result + 3);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                v62 = (v62 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              v63 = v61;
              bzero((void *)v62, 8 * *(unsigned int *)(v61 + 8));
              v43 = v63;
              a7 = v88;
              a8 = v89;
LABEL_71:
              v64 = v52;
              v65 = v49;
              v66 = v43;
              v67 = a8;
              v68 = a7;
              JSC::JSBigInt::internalMultiplyAdd<JSC::HeapBigIntImpl>(v43, v64, v65, *(_DWORD *)(v43 + 8), v43);
              v43 = v66;
              a7 = v68;
              a8 = v67;
              v9 = v93;
              v10 = v94;
              v46 = v91;
              v45 = v92;
              if (v11 < v38)
                goto LABEL_36;
              goto LABEL_76;
            }
          }
LABEL_87:
          v70 = v94;
          if (v94)
          {
            v86 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v86 = 0x2F00000002;
            *(_QWORD *)(v86 + 8) = "BigInt generated from this operation is too big";
            *(_DWORD *)(v86 + 16) = 4;
            v95 = (WTF::StringImpl *)v86;
            v71 = JSC::createOutOfMemoryError((unint64_t)v94, &v95, v87);
LABEL_79:
            v24 = (JSC::Exception *)v71;
            if ((v71 & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x4C)))
            {
              v77 = v93;
              v24 = (JSC::Exception *)JSC::Exception::create((uint64_t)v93, (JSC::VM *)v71, 0, v72, v73, v74, v75, v76);
            }
            else
            {
              v77 = v93;
            }
            v25 = v77;
            v26 = v70;
LABEL_17:
            JSC::VM::throwException(v25, v26, v24);
            v34 = v95;
            v95 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
              {
                WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
                WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
              }
              else
              {
                *(_DWORD *)v34 -= 2;
              }
            }
          }
          return 0;
        }
      }
    }
    v43 = 0;
LABEL_76:
    *(_BYTE *)(v43 + 16) = (_DWORD)a8 == 1;
    return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v43, v10, v9, a4);
  }
}

JSC::JSBigInt *JSC::JSBigInt::parseInt<char16_t>(JSC::JSBigInt *a1, JSC::JSGlobalObject *a2, uint64_t a3, unint64_t a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, int a9)
{
  JSC::JSGlobalObject *v9;
  JSC::JSGlobalObject *v10;
  unint64_t v11;
  int v16;
  JSC::JSBigInt *result;
  JSC::VM *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  JSC::Exception *v26;
  WTF::AtomStringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  int v35;
  unsigned int v36;
  int v38;
  int v39;
  BOOL v42;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  JSC::VM *v62;
  unint64_t v63;
  JSC::VM *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  JSC::JSGlobalObject *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const WTF::String *v83;
  unsigned int v84;
  unsigned int v85;
  JSC::JSGlobalObject *v86;
  JSC::JSGlobalObject *v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  WTF::StringImpl *v94;

  v9 = a2;
  v10 = a1;
  v11 = a5;
  if (a9 != 1 && a4 == a5)
  {
    if (!a7)
    {
      v18 = a2;
      v19 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v19 = 0x2000000002;
      *(_QWORD *)(v19 + 8) = "Failed to parse String to BigInt";
      *(_DWORD *)(v19 + 16) = 4;
      v94 = (WTF::StringImpl *)v19;
LABEL_15:
      v20 = JSC::createSyntaxError(v10, &v94, 0);
LABEL_16:
      v26 = (JSC::Exception *)v20;
      if ((v20 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x4C)))
      {
        v26 = (JSC::Exception *)JSC::Exception::create((uint64_t)v18, (JSC::VM *)v20, 0, v21, v22, v23, v24, v25);
      }
      JSC::VM::throwException(v18, v10, v26);
      v34 = v94;
      v94 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, v27, v28, v29, v30, v31, v32, v33);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        }
        else
        {
          *(_DWORD *)v34 -= 2;
        }
      }
    }
    return 0;
  }
  else
  {
    if (a4 > a5)
    {
      while (*(_WORD *)(a3 + 2 * v11) == 48)
      {
        if (a4 == ++v11)
        {
          v11 = a4;
          break;
        }
      }
    }
    if ((int)a4 - 1 < (int)v11)
    {
      v16 = a4;
      goto LABEL_11;
    }
    v35 = a4;
    while (1)
    {
      v16 = v35 - 1;
      if (a4 <= v35 - 1)
      {
LABEL_100:
        __break(1u);
        goto LABEL_101;
      }
      v36 = *(unsigned __int16 *)(a3 + 2 * v16);
      if (v36 > 0xFF)
        break;
      if (*(_WORD *)(a3 + 2 * v16) > 0x20u || ((1 << v36) & 0x100001A00) == 0)
      {
        v42 = *(_WORD *)(a3 + 2 * v16) == 160 || v36 == 13;
        if (!v42 && v36 != 10)
          goto LABEL_45;
      }
LABEL_28:
      v38 = v35 - 2;
      --v35;
      if (v38 < (int)v11)
        goto LABEL_11;
    }
    v86 = v9;
    v84 = a8;
    v90 = a7;
    v39 = u_charType(*(unsigned __int16 *)(a3 + 2 * v16));
    a7 = v90;
    a8 = v84;
    v9 = v86;
    if (v39 == 12 || v36 - 8232 < 2 || v36 == 65279)
      goto LABEL_28;
LABEL_45:
    v16 = v35;
LABEL_11:
    if (v11 == v16)
      return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(a1, v9, 0, a4);
    HIDWORD(v45) = a6;
    LODWORD(v45) = a6 - 2;
    v44 = v45 >> 1;
    if (v44 > 7)
      v46 = 1;
    else
      v46 = dword_199158110[v44];
    if (a6 >= 0xA)
      v47 = 10;
    else
      v47 = a6;
    if (v11 < v16)
    {
      v48 = 0;
      v49 = v47 | 0x30;
      v92 = a6 + 87;
      v50 = a6 + 55;
      v88 = v16 - v11;
      v51 = a6;
LABEL_54:
      v52 = 0;
      v53 = 0;
      if (a4 <= v11)
        v54 = v11;
      else
        v54 = a4;
      v55 = v11 - v54;
      v56 = 1;
      while (1)
      {
        if (!is_mul_ok(v53, v51))
        {
LABEL_105:
          __break(0xC471u);
          JUMPOUT(0x198990040);
        }
        if (!is_mul_ok(v56, v51))
        {
          __break(0xC471u);
          JUMPOUT(0x198990048);
        }
        if (!(v55 + v52))
          goto LABEL_100;
        v57 = *(unsigned __int16 *)(a3 + 2 * v11 + 2 * v52);
        if (v57 < 0x30)
          goto LABEL_95;
        v58 = v53 * v51;
        if (v49 <= v57)
        {
          if (v57 < 0x61)
          {
            if (v57 < 0x41)
              goto LABEL_95;
LABEL_72:
            if (v50 <= v57)
            {
LABEL_95:
              if (a7)
                return 0;
              v18 = v9;
              v73 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v73 = 0x2000000002;
              *(_QWORD *)(v73 + 8) = "Failed to parse String to BigInt";
              *(_DWORD *)(v73 + 16) = 4;
              v94 = (WTF::StringImpl *)v73;
              v10 = a1;
              goto LABEL_15;
            }
            v61 = v57 - 55;
            v53 = v58 + v61;
            if (__CFADD__(v58, v61))
            {
              __break(0xC471u);
              JUMPOUT(0x198990058);
            }
            goto LABEL_74;
          }
          if (v92 <= v57)
            goto LABEL_72;
          v60 = v57 - 87;
          v53 = v58 + v60;
          if (__CFADD__(v58, v60))
            goto LABEL_105;
        }
        else
        {
          v59 = v57 - 48;
          v53 = v58 + v59;
          if (__CFADD__(v58, v59))
          {
            __break(0xC471u);
            JUMPOUT(0x198990050);
          }
        }
LABEL_74:
        v56 *= v51;
        if (++v52 >= v46 || v52 + v11 >= v16)
        {
          v89 = v50;
          v91 = a7;
          v11 += v52;
          if (v48)
            goto LABEL_89;
          if (v11 == v16)
          {
            v62 = (JSC::VM *)((_DWORD)a8 == 1 ? -(uint64_t)v53 : v53);
            if (v62 == (JSC::VM *)(int)v62)
              return (JSC::JSBigInt *)JSC::JSBigInt::createFrom(a1, v9, v62, a4);
          }
          v63 = JSC::maxBitsPerCharTable[v51] * (unint64_t)v88;
          if (v63 <= 0xFFFFFFFE0)
          {
            v64 = (JSC::VM *)((((v63 + 31) >> 5) + 63) >> 6);
            if (v64 <= 0x4000)
            {
              v85 = a8;
              v87 = v9;
              result = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(a1, v9, v64, a4);
              if (!result)
                return result;
              v65 = (uint64_t)result;
              v66 = *((_QWORD *)result + 3);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                v66 = (v66 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              v67 = v65;
              bzero((void *)v66, 8 * *(unsigned int *)(v65 + 8));
              v48 = v67;
              v9 = v87;
              a8 = v85;
LABEL_89:
              v68 = v56;
              v69 = v53;
              v70 = v48;
              v71 = v9;
              v72 = a8;
              JSC::JSBigInt::internalMultiplyAdd<JSC::HeapBigIntImpl>(v48, v68, v69, *(_DWORD *)(v48 + 8), v48);
              v48 = v70;
              v50 = v89;
              a7 = v91;
              a8 = v72;
              v9 = v71;
              if (v11 < v16)
                goto LABEL_54;
              goto LABEL_94;
            }
          }
LABEL_101:
          v10 = a1;
          if (a1)
          {
            v18 = v9;
            v82 = WTF::fastCompactMalloc((WTF *)0x20);
            *(_QWORD *)v82 = 0x2F00000002;
            *(_QWORD *)(v82 + 8) = "BigInt generated from this operation is too big";
            *(_DWORD *)(v82 + 16) = 4;
            v94 = (WTF::StringImpl *)v82;
            v20 = JSC::createOutOfMemoryError((unint64_t)a1, &v94, v83);
            goto LABEL_16;
          }
          return 0;
        }
      }
    }
    v48 = 0;
LABEL_94:
    *(_BYTE *)(v48 + 16) = (_DWORD)a8 == 1;
    return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v48, a1, v9, a4);
  }
}

JSC::JSBigInt *JSC::JSBigInt::stringToBigInt(JSC::JSBigInt *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if ((a3 & 0xFF00000000) != 0)
    return JSC::JSBigInt::parseInt<unsigned char>(a1, a2, a3, 1, a5);
  else
    return JSC::JSBigInt::parseInt<char16_t>(a1, a2, a3, 1);
}

void JSC::JSBigInt::toStringBasePowerOfTwo(JSC::JSBigInt *this@<X0>, JSC::VM *a2@<X1>, JSC::JSGlobalObject *a3@<X2>, JSC::JSBigInt *a4@<X3>, uint64_t *a5@<X8>)
{
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  unint64_t OutOfMemoryError;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  JSC::Exception *v24;
  uint64_t v25;
  _BYTE *v26;
  size_t v27;
  uint64_t v28;
  unsigned int v29;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;

  v9 = *((_DWORD *)a3 + 2);
  v10 = *((unsigned __int8 *)a3 + 16);
  v11 = __clz(__rbit32(a4));
  v12 = (v9 - 1);
  v13 = *((_QWORD *)a3 + 3);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v13 = (v13 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v14 = *(_QWORD *)(v13 + 8 * v12);
  v15 = ((v9 << 6) - __clz(v14) + (unint64_t)v11 - 1) / v11;
  if (*((_BYTE *)a3 + 16))
    v16 = v15 + 1;
  else
    v16 = v15;
  if (!(v16 >> 31))
  {
    v25 = ((_DWORD)a4 - 1);
    if (v16)
      v26 = (_BYTE *)WTF::fastMalloc((WTF *)v16);
    else
      v26 = 0;
    LODWORD(v27) = v16 - 1;
    if ((_DWORD)v12)
    {
      v28 = 0;
      v29 = 0;
      LODWORD(v30) = 0;
      while (1)
      {
        v31 = *((_QWORD *)a3 + 3);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (v16 <= (int)v27)
        {
          __break(0xC471u);
          JUMPOUT(0x198990378);
        }
        v32 = *(_QWORD *)(v31 + 8 * v28);
        v26[(int)v27] = JSC::radixDigits[(int)(v25 & ((v32 << v29) | v30))];
        v33 = v11 - v29;
        v30 = v32 >> v33;
        v29 = 64 - v33;
        LODWORD(v27) = v27 - 1;
        if (v29 >= v11)
          break;
LABEL_25:
        if (++v28 == v12)
          goto LABEL_30;
      }
      v27 = (int)v27;
      while (v16 > v27)
      {
        v26[v27] = JSC::radixDigits[v30 & v25];
        v30 >>= v11;
        v29 -= v11;
        --v27;
        if (v29 < v11)
          goto LABEL_25;
      }
LABEL_50:
      __break(0xC471u);
      JUMPOUT(0x19899035CLL);
    }
    LODWORD(v30) = 0;
    LOBYTE(v29) = 0;
LABEL_30:
    if (v16 <= (int)v27)
    {
      __break(0xC471u);
      JUMPOUT(0x198990388);
    }
    v26[(int)v27] = JSC::radixDigits[(int)(v25 & ((v14 << v29) | v30))];
    v34 = v14 >> (v11 - v29);
    LODWORD(v30) = v27 - 1;
    if (v34)
    {
      v30 = (int)v30;
      do
      {
        if (v16 <= v30)
        {
          __break(0xC471u);
          JUMPOUT(0x198990380);
        }
        v26[v30] = JSC::radixDigits[v34 & v25];
        v34 >>= v11;
        --v30;
      }
      while (v34);
    }
    if (v10)
    {
      if (v16 <= (int)v30)
        goto LABEL_50;
      v26[(int)v30] = 45;
    }
    v42 = WTF::fastCompactMalloc((WTF *)(v16 + 20));
    v43 = (_BYTE *)(v42 + 20);
    *(_DWORD *)v42 = 2;
    *(_DWORD *)(v42 + 4) = v16;
    *(_QWORD *)(v42 + 8) = v42 + 20;
    *(_DWORD *)(v42 + 16) = 4;
    if (v16 == 1)
      *v43 = *v26;
    else
      memcpy(v43, v26, v16);
    *a5 = v42;
    WTF::fastFree((unint64_t)v26, v35, v36, v37, v38, v39, v40, v41);
    return;
  }
  if (a2)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a2, a2);
    v24 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v24 = (JSC::Exception *)JSC::Exception::create((uint64_t)this, (JSC::VM *)OutOfMemoryError, 0, v18, v19, v20, v21, v22);
    }
    JSC::VM::throwException(this, a2, v24, v23, v18, v19, v20, v21, v22);
  }
  *a5 = 0;
}

void JSC::JSBigInt::toStringGeneric(JSC::JSBigInt *this@<X0>, JSC::VM *a2@<X1>, JSC::JSGlobalObject *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t OutOfMemoryError;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Exception *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  BOOL v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unsigned int v42;
  unint64_t v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  unsigned int v50;
  JSC::JSBigInt *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  char v67;
  int *v68;
  _BYTE *v69;
  int v70;
  int **v71;
  JSC::JSBigInt *v72;
  unsigned int v73;
  unsigned int v75;
  unint64_t v76;
  JSC::JSGlobalObject *v77;

  v11 = *((_DWORD *)a3 + 2);
  v12 = JSC::maxBitsPerCharTable[a4];
  v13 = v11 - 1;
  v14 = *((_QWORD *)a3 + 3);
  v15 = v14;
  if (qword_1ECF4C038)
  {
    if (byte_1ECF4C022 || (v15 = *((_QWORD *)a3 + 3), !disablePrimitiveGigacageRequested))
      v15 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  }
  v16 = (32 * ((v11 << 6) - __clz(*(_QWORD *)(v15 + 8 * v13)))
       + (unint64_t)(v12 - 1)
       - 1)
      / (v12 - 1);
  if (*((_BYTE *)a3 + 16))
    ++v16;
  if (v16 >> 31)
  {
    if (a2)
    {
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a2, a2);
      v23 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v23 = (JSC::Exception *)JSC::Exception::create((uint64_t)this, (JSC::VM *)OutOfMemoryError, 0, v18, v19, v20, v21, v22);
      }
      JSC::VM::throwException(this, a2, v23);
    }
    *a9 = 0;
    return;
  }
  v24 = a4;
  v71 = a9;
  v70 = *((unsigned __int8 *)a3 + 16);
  if (v11 == 1)
  {
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v14 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    LODWORD(v25) = 0;
    LODWORD(v26) = 0;
    v27 = 0;
LABEL_17:
    v28 = *(_QWORD *)v14;
    do
    {
      v29 = v25;
      if ((_DWORD)v25 == (_DWORD)v26)
      {
        v30 = v25 + ((unint64_t)v25 >> 2);
        if (v30 >= 0x10)
          v31 = v30 + 1;
        else
          v31 = 16;
        if (v31 <= (unint64_t)v25 + 1)
          v26 = v25 + 1;
        else
          v26 = v31;
        if (HIDWORD(v26))
        {
          __break(0xC471u);
          JUMPOUT(0x198990928);
        }
        v32 = (_BYTE *)WTF::fastMalloc((WTF *)v26);
        memcpy(v32, v27, v29);
        if (v27)
        {
          if (v32 == v27)
          {
            LODWORD(v26) = 0;
            v32 = 0;
          }
          WTF::fastFree((unint64_t)v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        v27 = v32;
      }
      v27[v29] = JSC::radixDigits[v28 % v24];
      v25 = (v29 + 1);
      v33 = v28 >= v24;
      v28 /= v24;
    }
    while (v33);
    v34 = v25 - 1;
    v35 = v29 + 2;
    while (v34 + 1 >= 2)
    {
      if (v34 >= v25)
      {
        __break(0xC471u);
        JUMPOUT(0x198990920);
      }
      v36 = v27[v34];
      --v35;
      --v34;
      if (v36 != 48)
        goto LABEL_71;
    }
    v35 = v25 != 0;
LABEL_71:
    if (v70)
    {
      v52 = v35;
      if (v35 != (_DWORD)v26)
      {
        ++v35;
        v27[v52] = 45;
        if (!v35)
        {
LABEL_91:
          if (v35)
          {
            if ((v35 & 0x80000000) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198990930);
            }
            v68 = (int *)WTF::fastCompactMalloc((WTF *)(v35 + 20));
            v69 = v68 + 5;
            *v68 = 2;
            v68[1] = v35;
            *((_QWORD *)v68 + 1) = v68 + 5;
            v68[4] = 4;
            if (v35 == 1)
              *v69 = *v27;
            else
              memcpy(v69, v27, v35);
          }
          else
          {
            v68 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
          }
          *v71 = v68;
          goto LABEL_98;
        }
LABEL_87:
        v65 = &v27[v35 - 1];
        if (v65 > v27)
        {
          v66 = v27 + 1;
          do
          {
            v67 = *(v66 - 1);
            *(v66 - 1) = *v65;
            *v65-- = v67;
            v33 = v66++ >= v65;
          }
          while (!v33);
        }
        goto LABEL_91;
      }
      v53 = ((unint64_t)v26 >> 2) + v26;
      if (v53 >= 0x10)
        v54 = v53 + 1;
      else
        v54 = 16;
      if (v54 <= (unint64_t)v35 + 1)
        v55 = v35 + 1;
      else
        v55 = v54;
      if (HIDWORD(v55))
      {
LABEL_115:
        __break(0xC471u);
        JUMPOUT(0x198990900);
      }
      v56 = (_BYTE *)WTF::fastMalloc((WTF *)v55);
      memcpy(v56, v27, v35);
      if (v56 == v27)
        v64 = 0;
      else
        v64 = v56;
      WTF::fastFree((unint64_t)v27, v57, v58, v59, v60, v61, v62, v63);
      v64[v52] = 45;
      v35 = v26 + 1;
      v27 = v56;
    }
    if (!v35)
      goto LABEL_91;
    goto LABEL_87;
  }
  v37 = 0x800 / v12;
  v38 = 1;
  v73 = 0x800 / v12;
  v39 = a4;
  do
  {
    if ((v37 & 1) != 0)
      v40 = v39;
    else
      v40 = 1;
    v38 *= v40;
    v39 *= v39;
    v41 = v37 > 1;
    v37 >>= 1;
  }
  while (v41);
  v76 = 0;
  v77 = 0;
  v27 = 0;
  if (JSC::JSBigInt::absoluteDivWithDigitDivisor<JSC::HeapBigIntImpl>(a2, this, (uint64_t)a3, v38, (uint64_t *)&v77, &v76))
  {
    v27 = 0;
    LODWORD(v26) = 0;
    LODWORD(v25) = 0;
    v72 = a2;
    while (1)
    {
      v75 = v13;
      v42 = v25;
      LODWORD(v25) = v25 + v73;
      v43 = v76;
      do
      {
        v44 = v42;
        if (v42 == (_DWORD)v26)
        {
          v45 = v42 + 1;
          v46 = ((unint64_t)v26 >> 2) + v26;
          if (v46 >= 0x10)
            v47 = v46 + 1;
          else
            v47 = 16;
          if (v47 <= v45)
            v26 = v44 + 1;
          else
            v26 = v47;
          if (HIDWORD(v26))
            goto LABEL_115;
          v48 = (_BYTE *)WTF::fastMalloc((WTF *)v26);
          memcpy(v48, v27, v44);
          if (v27)
          {
            if (v48 == v27)
            {
              LODWORD(v26) = 0;
              v48 = 0;
            }
            WTF::fastFree((unint64_t)v27, a2, v49, a4, a5, a6, a7, a8);
          }
          v27 = v48;
        }
        v27[v44] = JSC::radixDigits[v43 % v24];
        v42 = v44 + 1;
        v43 = v76 / v24;
        v76 /= v24;
      }
      while ((_DWORD)v44 + 1 != (_DWORD)v25);
      a3 = v77;
      v14 = *((_QWORD *)v77 + 3);
      if (!qword_1ECF4C038)
        break;
      v50 = v75;
      if (!byte_1ECF4C022 && disablePrimitiveGigacageRequested)
        goto LABEL_65;
      v13 = v75 - (*(_QWORD *)((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v75) == 0);
      v51 = v72;
      if (!v13)
      {
        if (byte_1ECF4C022)
        {
          v14 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else if (!disablePrimitiveGigacageRequested)
        {
          v14 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        goto LABEL_17;
      }
LABEL_62:
      v76 = 0;
      if ((JSC::JSBigInt::absoluteDivWithDigitDivisor<JSC::HeapBigIntImpl>(v51, this, (uint64_t)v77, v38, (uint64_t *)&v77, &v76) & 1) == 0)goto LABEL_69;
    }
    v50 = v75;
LABEL_65:
    v13 = v50 - (*(_QWORD *)(v14 + 8 * v50) == 0);
    if (!v13)
      goto LABEL_17;
    v51 = v72;
    goto LABEL_62;
  }
LABEL_69:
  *a9 = 0;
LABEL_98:
  if (v27)
    WTF::fastFree((unint64_t)v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

void JSC::JSBigInt::internalMultiplyAdd<JSC::HeapBigIntImpl>(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  size_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (a4)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = qword_1ECF4C038;
    v7 = *(_QWORD *)(a5 + 24);
    if (qword_1ECF4C038)
    {
      v8 = (unint64_t *)((v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      v9 = (uint64_t *)((v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      v10 = a4;
      if (byte_1ECF4C022)
      {
        v6 = 0;
        do
        {
          v12 = *v8++;
          v11 = v12;
          v13 = v12 * a2;
          v14 = v6 + v12 * a2;
          v15 = __CFADD__(v14, a3);
          v16 = v14 + a3;
          v17 = v15;
          v15 = __CFADD__(v6, v13);
          v6 = (v11 * (unsigned __int128)a2) >> 64;
          if (v15)
            a3 = v17 + 1;
          else
            a3 = v17;
          *v9++ = v16;
          --v10;
        }
        while (v10);
      }
      else
      {
        v6 = 0;
        if (!disablePrimitiveGigacageRequested)
        {
          v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v7 = (v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        do
        {
          v36 = *(_QWORD *)v5;
          v5 += 8;
          v35 = v36;
          v37 = v36 * a2;
          v38 = v6 + v36 * a2;
          v15 = __CFADD__(v38, a3);
          v39 = v38 + a3;
          v40 = v15;
          v15 = __CFADD__(v6, v37);
          v6 = (v35 * (unsigned __int128)a2) >> 64;
          if (v15)
            a3 = v40 + 1;
          else
            a3 = v40;
          *(_QWORD *)v7 = v39;
          v7 += 8;
          --v10;
        }
        while (v10);
      }
    }
    else
    {
      v28 = a4;
      do
      {
        v30 = *(_QWORD *)v5;
        v5 += 8;
        v29 = v30;
        v31 = v30 * a2;
        v32 = v6 + v30 * a2;
        v15 = __CFADD__(v32, a3);
        v33 = v32 + a3;
        v34 = v15;
        v15 = __CFADD__(v6, v31);
        v6 = (v29 * (unsigned __int128)a2) >> 64;
        if (v15)
          a3 = v34 + 1;
        else
          a3 = v34;
        *(_QWORD *)v7 = v33;
        v7 += 8;
        --v28;
      }
      while (v28);
    }
  }
  else
  {
    v6 = 0;
  }
  v18 = *(_DWORD *)(a5 + 8);
  v19 = v18 - a4;
  if (v18 > a4)
  {
    v20 = v6 + a3;
    v21 = *(_QWORD *)(a5 + 24);
    v22 = qword_1ECF4C038;
    if (qword_1ECF4C038)
    {
      if (byte_1ECF4C022 || (v23 = *(_QWORD *)(a5 + 24), !disablePrimitiveGigacageRequested))
        v23 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    }
    else
    {
      v23 = *(_QWORD *)(a5 + 24);
    }
    *(_QWORD *)(v23 + 8 * a4) = v20;
    if (a4 + 1 < v18)
    {
      if (v22)
      {
        v24 = (v21 & 0x3FFFFFFFFLL) + v22;
        v25 = 8 * (a4 + 1);
        if (!byte_1ECF4C022)
        {
          v27 = 8 * (v19 - 2) + 8;
          if (disablePrimitiveGigacageRequested)
            v26 = (void *)(v21 + v25);
          else
            v26 = (void *)(v24 + v25);
          goto LABEL_23;
        }
        v26 = (void *)(v24 + v25);
      }
      else
      {
        v26 = (void *)(v21 + 8 * (a4 + 1));
      }
      v27 = 8 * (v19 - 2) + 8;
LABEL_23:
      bzero(v26, v27);
    }
  }
}

JSC::JSBigInt *JSC::JSBigInt::exponentiateImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(unint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  JSC::Heap **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  JSC::Exception *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  JSC::JSBigInt *v29;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const WTF::String *v46;
  unint64_t OutOfMemoryError;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  JSC::Exception *v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  JSC::JSBigInt *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  BOOL v86;
  int v87;
  uint64_t (*v88)(WTF::StringImpl **);
  WTF::StringImpl **v89;
  int v90;
  int v91;
  int v92;
  int v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95[3];

  v9 = *(_QWORD *)(this + 56);
  if (*(_BYTE *)(a3 + 16))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v10 = 0x2000000002;
    *(_QWORD *)(v10 + 8) = "Negative exponent is not allowed";
    *(_DWORD *)(v10 + 16) = 4;
    v94 = (WTF::StringImpl *)v10;
    v11 = *(_QWORD *)(this + 128);
    v12 = *(JSC::Heap ***)(this + 56);
    if ((v11 & 1) != 0)
    {
      v88 = *(uint64_t (**)(WTF::StringImpl **))(v11 & 0xFFFFFFFFFFFFFFFCLL);
      v89 = (WTF::StringImpl **)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v89 = (WTF::StringImpl **)(this - 16);
      v95[0] = *v89;
      v95[1] = (WTF::StringImpl *)this;
      v95[2] = (WTF::StringImpl *)(this + 128);
      v11 = v88(v95);
    }
    v13 = JSC::ErrorInstance::create(v12, v11, &v94, 0, 0, 0, 2, 1);
    v20 = (JSC::Exception *)v13;
    if ((v13 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
    {
      v20 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v13, 0, v14, v15, v16, v17, v18);
    }
    JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)this, v20, v19, v14, v15, v16, v17, v18);
    v28 = v94;
    v94 = 0;
    if (!v28)
      return 0;
    goto LABEL_6;
  }
  v31 = *(_DWORD *)(a3 + 8);
  if (v31)
  {
    v29 = (JSC::JSBigInt *)a2;
    v32 = *(_DWORD *)(a2 + 8);
    if (!v32)
      return v29;
    if (v32 != 1)
      goto LABEL_31;
    v33 = *(_QWORD *)(a2 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    if (*(_QWORD *)v33 != 1)
    {
LABEL_31:
      if (v31 < 2)
      {
        v63 = *(_QWORD *)(a3 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v63 = (v63 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v64 = *(_QWORD *)v63;
        if (*(_QWORD *)v63 == 1)
          return v29;
        if (v64 < 0x100000)
        {
          if (v32 != 1)
            goto LABEL_120;
          v65 = *(_QWORD *)(a2 + 24);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v65 = (v65 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (*(_QWORD *)v65 != 2)
          {
LABEL_120:
            if (*(_DWORD *)(v9 + 80))
            {
              v91 = *(_DWORD *)(v9 + 80);
              if ((v91 & 0x27) != 0 && (v91 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v9 + 16))
                return 0;
            }
            if ((v64 & 1) != 0)
            {
              v74 = v29;
              if (*(_DWORD *)(v9 + 80))
              {
                v92 = *(_DWORD *)(v9 + 80);
                if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
                if (*(_QWORD *)(v9 + 16))
                  return 0;
                v74 = v29;
              }
            }
            else
            {
              v74 = 0;
            }
            if (v64 < 2)
              return v74;
            while (1)
            {
              v29 = JSC::JSBigInt::multiplyImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::VM **)this, (uint64_t)v29, (uint64_t)v29, a4);
              if (*(_DWORD *)(v9 + 80))
              {
                v87 = *(_DWORD *)(v9 + 80);
                if ((v87 & 0x27) != 0 && (v87 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v75, a4, v76, v77, v78, v79);
                if (*(_QWORD *)(v9 + 16))
                  break;
              }
              if ((v64 & 2) != 0)
              {
                if (v74)
                {
                  v74 = JSC::JSBigInt::multiplyImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>((JSC::VM **)this, (uint64_t)v74, (uint64_t)v29, a4);
                  if (*(_DWORD *)(v9 + 80))
                  {
                    v85 = *(_DWORD *)(v9 + 80);
                    if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v80, a4, v81, v82, v83, v84);
                    if (*(_QWORD *)(v9 + 16))
                      return 0;
                  }
                }
                else
                {
                  v74 = v29;
                }
              }
              v86 = v64 > 3;
              LODWORD(v64) = (int)v64 >> 1;
              if (!v86)
                return v74;
            }
            return 0;
          }
          v41 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)this, *(JSC::JSGlobalObject **)(this + 56), (JSC::VM *)((v64 >> 6) + 1), a4, a5, a6, a7, a8);
          if (*(_DWORD *)(v9 + 80))
          {
            v93 = *(_DWORD *)(v9 + 80);
            if ((v93 & 0x27) != 0 && (v93 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v66, v67, v68, v69, v70, v71);
            if (*(_QWORD *)(v9 + 16))
              return 0;
          }
          v72 = *(_QWORD *)(v41 + 24);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v72 = (v72 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          bzero((void *)v72, 8 * *(unsigned int *)(v41 + 8));
          v73 = *(_QWORD *)(v41 + 24);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v73 = (v73 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_QWORD *)(v73 + 8 * (v64 >> 6)) = 1 << v64;
          if (!*((_BYTE *)v29 + 16))
            return (JSC::JSBigInt *)v41;
          v42 = v64 & 1;
LABEL_24:
          *(_BYTE *)(v41 + 16) = v42;
          return (JSC::JSBigInt *)v41;
        }
      }
      v45 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v45 = 0x2F00000002;
      *(_QWORD *)(v45 + 8) = "BigInt generated from this operation is too big";
      *(_DWORD *)(v45 + 16) = 4;
      v95[0] = (WTF::StringImpl *)v45;
      OutOfMemoryError = JSC::createOutOfMemoryError(this, v95, v46);
      v54 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v54 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)OutOfMemoryError, 0, v48, v49, v50, v51, v52);
      }
      JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)this, v54, v53, v48, v49, v50, v51, v52);
      v28 = v95[0];
      v95[0] = 0;
      if (!v28)
        return 0;
LABEL_6:
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
        WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
      return 0;
    }
    if (*(_BYTE *)(a2 + 16))
    {
      v34 = *(_QWORD *)(a3 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v34 = (v34 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if ((*(_BYTE *)v34 & 1) == 0)
      {
        v41 = JSC::JSBigInt::copy<JSC::HeapBigIntImpl>((JSC::JSBigInt *)this, a2, a3, a4);
        if (*(_DWORD *)(v9 + 80))
        {
          v90 = *(_DWORD *)(v9 + 80);
          if ((v90 & 0x27) != 0 && (v90 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v35, v36, v37, v38, v39, v40);
          if (*(_QWORD *)(v9 + 16))
            return 0;
        }
        v42 = *((_BYTE *)v29 + 16) == 0;
        goto LABEL_24;
      }
    }
  }
  else
  {
    v43 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)this, *(JSC::JSGlobalObject **)(this + 56), (JSC::VM *)1, a4, a5, a6, a7, a8);
    v29 = (JSC::JSBigInt *)v43;
    if (v43)
    {
      v44 = *(_QWORD *)(v43 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v44 = (v44 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v44 = 1;
    }
  }
  return v29;
}

JSC::JSBigInt *JSC::JSBigInt::multiplyImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::VM **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  int v5;
  int v7;
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v75;

  v4 = a2;
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v7 = *(_DWORD *)(a3 + 8);
    if (v7)
    {
      v9 = a1[7];
      v16 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, v9, (JSC::VM *)(v7 + v5), a4);
      if (!*((_DWORD *)v9 + 20))
        goto LABEL_4;
      v75 = *((_DWORD *)v9 + 20);
      if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v9 + 64), 7u, v10, v11, v12, v13, v14, v15);
      if (*((_QWORD *)v9 + 2))
      {
        return 0;
      }
      else
      {
LABEL_4:
        v17 = *(_QWORD *)(v16 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v17 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        bzero((void *)v17, 8 * *(unsigned int *)(v16 + 8));
        v19 = *(unsigned int *)(v4 + 8);
        if ((_DWORD)v19)
        {
          v20 = 0;
          v21 = *(_QWORD *)(v4 + 24);
          v22 = qword_1ECF4C038;
          v23 = byte_1ECF4C022;
          v24 = disablePrimitiveGigacageRequested;
          if (byte_1ECF4C022)
            v25 = 1;
          else
            v25 = disablePrimitiveGigacageRequested == 0;
          v26 = v25;
          if (((qword_1ECF4C038 != 0) & v26) != 0)
            v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          do
          {
            v27 = *(_QWORD *)(v21 + 8 * v20);
            if (v27)
            {
              v28 = *(unsigned int *)(a3 + 8);
              if ((_DWORD)v28)
              {
                v29 = *(_QWORD *)(v16 + 24);
                v30 = *(_QWORD *)(a3 + 24);
                if (v22)
                {
                  v18 = (v29 & 0x3FFFFFFFFLL) + v22;
                  v31 = (v30 & 0x3FFFFFFFFLL) + v22;
                  if (v23)
                  {
                    v32 = 0;
                    v33 = 0;
                    v34 = 0;
                    do
                    {
                      v35 = *(_QWORD *)(v18 + 8 * (v20 + v32));
                      v36 = __CFADD__(v35, v34);
                      v37 = v35 + v34;
                      v38 = v36;
                      v36 = __CFADD__(v37, v33);
                      v39 = v37 + v33;
                      v40 = v36;
                      v41 = *(_QWORD *)(v31 + 8 * v32);
                      v34 = (v41 * (unsigned __int128)v27) >> 64;
                      v42 = v39 + v41 * v27;
                      v33 = (__PAIR128__(v40, v39) + __PAIR128__(v38, v41 * v27)) >> 64;
                      *(_QWORD *)(v18 + 8 * (v20 + v32++)) = v42;
                    }
                    while (v28 != v32);
                    v43 = v20 + v32;
                  }
                  else
                  {
                    v66 = 0;
                    v33 = 0;
                    v34 = 0;
                    if (!v24)
                    {
                      v29 = (v29 & 0x3FFFFFFFFLL) + v22;
                      v30 = (v30 & 0x3FFFFFFFFLL) + v22;
                    }
                    do
                    {
                      LODWORD(v18) = v20 + v66;
                      v67 = *(_QWORD *)(v29 + 8 * (v20 + v66));
                      v36 = __CFADD__(v67, v34);
                      v68 = v67 + v34;
                      v69 = v36;
                      v36 = __CFADD__(v68, v33);
                      v70 = v68 + v33;
                      v71 = v36;
                      v72 = *(_QWORD *)(v30 + 8 * v66);
                      v34 = (v72 * (unsigned __int128)v27) >> 64;
                      v73 = v70 + v72 * v27;
                      v33 = (__PAIR128__(v71, v70) + __PAIR128__(v69, v72 * v27)) >> 64;
                      *(_QWORD *)(v29 + 8 * v18) = v73;
                      ++v66;
                    }
                    while (v28 != v66);
                    v43 = v20 + v66;
                  }
                }
                else
                {
                  v18 = 0;
                  v33 = 0;
                  v34 = 0;
                  do
                  {
                    v52 = *(_QWORD *)(v29 + 8 * (v20 + v18));
                    v36 = __CFADD__(v52, v34);
                    v53 = v52 + v34;
                    v54 = v36;
                    v36 = __CFADD__(v53, v33);
                    v55 = v53 + v33;
                    v56 = v36;
                    v57 = *(_QWORD *)(v30 + 8 * v18);
                    v34 = (v57 * (unsigned __int128)v27) >> 64;
                    v58 = v55 + v57 * v27;
                    v33 = (__PAIR128__(v56, v55) + __PAIR128__(v54, v57 * v27)) >> 64;
                    *(_QWORD *)(v29 + 8 * (v20 + v18++)) = v58;
                  }
                  while (v28 != v18);
                  v43 = v20 + v18;
                }
              }
              else
              {
                v34 = 0;
                v33 = 0;
                v43 = v20;
              }
              if (v33 | v34)
              {
                v44 = *(_QWORD *)(v16 + 24);
                if (v22)
                {
                  if (v26)
                    v44 = (v44 & 0x3FFFFFFFFLL) + v22;
                  v45 = *(_QWORD *)(v44 + 8 * v43);
                  v36 = __CFADD__(v45 + v34, v33);
                  v46 = v45 + v34 + v33;
                  v47 = v36;
                  if (__CFADD__(v45, v34))
                    v48 = v47 + 1;
                  else
                    v48 = v47;
                  *(_QWORD *)(v44 + 8 * v43) = v46;
                  if (v48)
                  {
                    v49 = *(_QWORD *)(v44 + 8 * (v43 + 1));
                    *(_QWORD *)(v44 + 8 * (v43 + 1)) = v49 + v48;
                    if (__CFADD__(v49, v48))
                    {
                      v50 = v43 + 2;
                      do
                      {
                        v51 = *(_QWORD *)(v44 + 8 * v50);
                        *(_QWORD *)(v44 + 8 * v50++) = v51 + 1;
                      }
                      while (v51 == -1);
                    }
                  }
                }
                else
                {
                  v59 = *(_QWORD *)(v44 + 8 * v43);
                  v36 = __CFADD__(v59 + v34, v33);
                  v60 = v59 + v34 + v33;
                  v61 = v36;
                  if (__CFADD__(v59, v34))
                    v62 = v61 + 1;
                  else
                    v62 = v61;
                  *(_QWORD *)(v44 + 8 * v43) = v60;
                  if (v62)
                  {
                    v63 = *(_QWORD *)(v44 + 8 * (v43 + 1));
                    *(_QWORD *)(v44 + 8 * (v43 + 1)) = v63 + v62;
                    if (__CFADD__(v63, v62))
                    {
                      v64 = v43 + 2;
                      do
                      {
                        v65 = *(_QWORD *)(v44 + 8 * v64);
                        *(_QWORD *)(v44 + 8 * v64++) = v65 + 1;
                      }
                      while (v65 == -1);
                    }
                  }
                }
              }
            }
            ++v20;
          }
          while (v20 != v19);
        }
        *(_BYTE *)(v16 + 16) = (*(_BYTE *)(v4 + 16) != 0) ^ (*(_BYTE *)(a3 + 16) != 0);
        return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v16, (JSC::JSGlobalObject *)a1, a1[7], v18);
      }
    }
    else
    {
      return (JSC::JSBigInt *)a3;
    }
  }
  return (JSC::JSBigInt *)v4;
}

JSC::JSBigInt *JSC::JSBigInt::divideImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(unint64_t this, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  JSC::Heap **v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  JSC::Exception *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  BOOL v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::JSBigInt *v54;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(JSC::JSBigInt **);
  JSC::JSBigInt **v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  WTF::StringImpl *v70;
  JSC::JSBigInt *v71[3];

  v9 = *(_QWORD *)(this + 56);
  v10 = *(_DWORD *)(a3 + 8);
  if (!v10)
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v18 = 0x1E00000002;
    *(_QWORD *)(v18 + 8) = "0 is an invalid divisor value.";
    *(_DWORD *)(v18 + 16) = 4;
    v70 = (WTF::StringImpl *)v18;
    v19 = *(_QWORD *)(this + 128);
    v20 = *(JSC::Heap ***)(this + 56);
    if ((v19 & 1) != 0)
    {
      v64 = *(uint64_t (**)(JSC::JSBigInt **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
      v65 = (JSC::JSBigInt **)(this & 0xFFFFFFFFFFFFC000 | 8);
      if ((this & 8) != 0)
        v65 = (JSC::JSBigInt **)(this - 16);
      v71[0] = *v65;
      v71[1] = (JSC::JSBigInt *)this;
      v71[2] = (JSC::JSBigInt *)(this + 128);
      v19 = v64(v71);
    }
    v21 = JSC::ErrorInstance::create(v20, v19, &v70, 0, 0, 0, 2, 1);
    v28 = (JSC::Exception *)v21;
    if ((v21 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)))
    {
      v28 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v21, 0, v22, v23, v24, v25, v26);
    }
    JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)this, v28, v27, v22, v23, v24, v25, v26);
    v36 = v70;
    v70 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
    return 0;
  }
  v11 = a2;
  v12 = *(_DWORD *)(a2 + 8);
  if (v12 == v10)
  {
    if (disablePrimitiveGigacageRequested)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022)
        {
          v13 = *(_DWORD *)(a3 + 8);
          while ((--v13 & 0x80000000) == 0)
          {
            v14 = *(_QWORD *)(a2 + 24);
            v15 = *(_QWORD *)(a3 + 24);
            if (*(_QWORD *)((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v13) != *(_QWORD *)((v15 & 0x3FFFFFFFFLL)
                                                                                               + qword_1ECF4C038
                                                                                               + 8 * v13))
              goto LABEL_7;
          }
        }
        else
        {
          v13 = *(_DWORD *)(a3 + 8);
          while ((--v13 & 0x80000000) == 0)
          {
            v14 = *(_QWORD *)(a2 + 24);
            v15 = *(_QWORD *)(a3 + 24);
            if (*(_QWORD *)(v14 + 8 * v13) != *(_QWORD *)(v15 + 8 * v13))
            {
LABEL_7:
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              {
                v16 = v13;
                v17 = (_QWORD *)((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v13);
                v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                goto LABEL_10;
              }
              goto LABEL_73;
            }
          }
        }
      }
      else
      {
        v13 = *(_DWORD *)(a3 + 8);
        while ((--v13 & 0x80000000) == 0)
        {
          v14 = *(_QWORD *)(a2 + 24);
          v15 = *(_QWORD *)(a3 + 24);
          if (*(_QWORD *)(v14 + 8 * v13) != *(_QWORD *)(v15 + 8 * v13))
          {
LABEL_73:
            v16 = v13;
            v17 = (_QWORD *)(v14 + 8 * v13);
LABEL_10:
            if (*v17 > *(_QWORD *)(v15 + 8 * v16))
              break;
            return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)this, (JSC::JSGlobalObject *)v9, 0, a4, a5, a6, a7, a8);
          }
        }
      }
    }
    else
    {
      v13 = *(_DWORD *)(a3 + 8);
      if (qword_1ECF4C038)
      {
        while ((--v13 & 0x80000000) == 0)
        {
          v14 = *(_QWORD *)(a2 + 24);
          v15 = *(_QWORD *)(a3 + 24);
          if (*(_QWORD *)((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v13) != *(_QWORD *)((v15 & 0x3FFFFFFFFLL)
                                                                                             + qword_1ECF4C038
                                                                                             + 8 * v13))
            goto LABEL_7;
        }
      }
      else
      {
        while ((--v13 & 0x80000000) == 0)
        {
          v14 = *(_QWORD *)(a2 + 24);
          v15 = *(_QWORD *)(a3 + 24);
          if (*(_QWORD *)(v14 + 8 * v13) != *(_QWORD *)(v15 + 8 * v13))
            goto LABEL_73;
        }
      }
    }
  }
  else if (v12 - v10 < 0)
  {
    return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)this, (JSC::JSGlobalObject *)v9, 0, a4, a5, a6, a7, a8);
  }
  v71[0] = 0;
  v37 = *(_BYTE *)(a2 + 16) != 0;
  v38 = *(_BYTE *)(a3 + 16) != 0;
  if (v10 == 1)
  {
    v39 = *(_QWORD *)(a3 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v39 = (v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    a4 = *(_QWORD *)v39;
    if (*(_QWORD *)v39 == 1)
    {
      if (!*(_BYTE *)(a3 + 16))
        return (JSC::JSBigInt *)v11;
      if (v12)
      {
        v46 = JSC::JSBigInt::copy<JSC::HeapBigIntImpl>((JSC::JSBigInt *)this, a2, a3, 1u);
        if (!*(_DWORD *)(v9 + 80))
          goto LABEL_28;
        v68 = *(_DWORD *)(v9 + 80);
        if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v40, v41, v42, v43, v44, v45);
        if (!*(_QWORD *)(v9 + 16))
        {
LABEL_28:
          *(_BYTE *)(v46 + 16) = *(_BYTE *)(v11 + 16) == 0;
          return (JSC::JSBigInt *)v46;
        }
        return 0;
      }
      return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)this, (JSC::JSGlobalObject *)v9, 0, a4, a5, a6, a7, a8);
    }
    v70 = 0;
    JSC::JSBigInt::absoluteDivWithDigitDivisor<JSC::HeapBigIntImpl>((JSC::JSBigInt *)this, (JSC::JSGlobalObject *)v9, a2, a4, (uint64_t *)v71, (unint64_t *)&v70);
  }
  else
  {
    if (*(_DWORD *)(v9 + 80))
    {
      v67 = *(_DWORD *)(v9 + 80);
      if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
      {
        v69 = a3;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
        a3 = v69;
      }
      if (*(_QWORD *)(v9 + 16))
        return 0;
    }
    JSC::JSBigInt::absoluteDivWithBigIntDivisor<JSC::HeapBigIntImpl>((JSC::JSBigInt *)this, v11, a3, (uint64_t)v71, 0, a6, a7, a8);
  }
  if (!*(_DWORD *)(v9 + 80))
    goto LABEL_37;
  v66 = *(_DWORD *)(v9 + 80);
  if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v47, v48, v49, v50, v51, v52);
  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_37:
    v54 = v71[0];
    *((_BYTE *)v71[0] + 16) = v37 ^ v38;
    return JSC::JSBigInt::rightTrim(v54, (JSC::JSGlobalObject *)this, *(JSC::VM **)(this + 56), v48);
  }
  return 0;
}

uint64_t JSC::JSBigInt::unaryMinus(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, JSC::JSBigInt *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v4 = *((_QWORD *)this + 7);
  if (!*((_DWORD *)a2 + 2))
    return JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), 0, a4);
  result = JSC::JSBigInt::copy<JSC::HeapBigIntImpl>(this, (uint64_t)a2, (uint64_t)a3, a4);
  if (*(_DWORD *)(v4 + 80))
  {
    v13 = *(_DWORD *)(v4 + 80);
    if ((v13 & 0x27) != 0 && (v13 & 0x20) == 0)
    {
      v14 = result;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v7, v8, v9, v10, v11, v12);
      result = v14;
    }
    if (*(_QWORD *)(v4 + 16))
      return 0;
  }
  *(_BYTE *)(result + 16) = *((_BYTE *)a2 + 16) == 0;
  return result;
}

JSC::JSBigInt *JSC::JSBigInt::remainderImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::VM **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  JSC::Heap **v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  JSC::Exception *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  unint64_t v38;
  JSC::JSGlobalObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  JSC::JSBigInt *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::JSBigInt *v56;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v67)(JSC::JSBigInt **);
  JSC::JSBigInt **v68;
  int v69;
  int v70;
  int v71;
  unint64_t v72;
  JSC::JSBigInt *v73;
  WTF::StringImpl *v74;
  JSC::JSBigInt *v75[3];

  v8 = (unint64_t)a1;
  v9 = (uint64_t)a1[7];
  v10 = *(_DWORD *)(a3 + 8);
  if (v10)
  {
    v11 = a2;
    v12 = *(_DWORD *)(a2 + 8);
    if (v12 == v10)
    {
      if (disablePrimitiveGigacageRequested)
      {
        if (qword_1ECF4C038)
        {
          if (byte_1ECF4C022)
          {
            v13 = *(_DWORD *)(a3 + 8);
            while ((--v13 & 0x80000000) == 0)
            {
              v14 = *(_QWORD *)(a2 + 24);
              v15 = *(_QWORD *)(a3 + 24);
              if (*(_QWORD *)((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v13) != *(_QWORD *)((v15 & 0x3FFFFFFFFLL)
                                                                                                 + qword_1ECF4C038
                                                                                                 + 8 * v13))
                goto LABEL_7;
            }
          }
          else
          {
            v13 = *(_DWORD *)(a3 + 8);
            while ((--v13 & 0x80000000) == 0)
            {
              v14 = *(_QWORD *)(a2 + 24);
              v15 = *(_QWORD *)(a3 + 24);
              if (*(_QWORD *)(v14 + 8 * v13) != *(_QWORD *)(v15 + 8 * v13))
              {
LABEL_7:
                if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                {
                  v16 = v13;
                  v17 = (_QWORD *)((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v13);
                  v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  goto LABEL_10;
                }
                goto LABEL_83;
              }
            }
          }
        }
        else
        {
          v13 = *(_DWORD *)(a3 + 8);
          while ((--v13 & 0x80000000) == 0)
          {
            v14 = *(_QWORD *)(a2 + 24);
            v15 = *(_QWORD *)(a3 + 24);
            if (*(_QWORD *)(v14 + 8 * v13) != *(_QWORD *)(v15 + 8 * v13))
            {
LABEL_83:
              v16 = v13;
              v17 = (_QWORD *)(v14 + 8 * v13);
LABEL_10:
              if (*v17 > *(_QWORD *)(v15 + 8 * v16))
                break;
              return (JSC::JSBigInt *)v11;
            }
          }
        }
      }
      else
      {
        v13 = *(_DWORD *)(a3 + 8);
        if (qword_1ECF4C038)
        {
          while ((--v13 & 0x80000000) == 0)
          {
            v14 = *(_QWORD *)(a2 + 24);
            v15 = *(_QWORD *)(a3 + 24);
            if (*(_QWORD *)((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v13) != *(_QWORD *)((v15 & 0x3FFFFFFFFLL)
                                                                                               + qword_1ECF4C038
                                                                                               + 8 * v13))
              goto LABEL_7;
          }
        }
        else
        {
          while ((--v13 & 0x80000000) == 0)
          {
            v14 = *(_QWORD *)(a2 + 24);
            v15 = *(_QWORD *)(a3 + 24);
            if (*(_QWORD *)(v14 + 8 * v13) != *(_QWORD *)(v15 + 8 * v13))
              goto LABEL_83;
          }
        }
      }
    }
    else if (v12 - v10 < 0)
    {
      return (JSC::JSBigInt *)v11;
    }
    v75[0] = 0;
    if (v10 == 1)
    {
      v37 = *(_QWORD *)(a3 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v37 = (v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v38 = *(_QWORD *)v37;
      if (*(_QWORD *)v37 == 1)
      {
        v39 = (JSC::JSGlobalObject *)v9;
        return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, v39, 0, v38, a5, a6, a7, a8);
      }
      v74 = 0;
      JSC::JSBigInt::absoluteDivWithDigitDivisor<JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, (JSC::JSGlobalObject *)v9, a2, v38, 0, (unint64_t *)&v74);
      if (!*(_DWORD *)(v9 + 80))
        goto LABEL_90;
      v70 = *(_DWORD *)(v9 + 80);
      if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v47, v38, a5, a6, a7, a8);
      if (!*(_QWORD *)(v9 + 16))
      {
LABEL_90:
        v48 = v74;
        v39 = *(JSC::JSGlobalObject **)(v8 + 56);
        if (!v74)
        {
          a1 = (JSC::VM **)v8;
          return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, v39, 0, v38, a5, a6, a7, a8);
        }
        v49 = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)v8, v39, (JSC::VM *)1, v38, a5, a6, a7, a8);
        v75[0] = v49;
        if (!*(_DWORD *)(v9 + 80))
          goto LABEL_37;
        v73 = v49;
        v71 = *(_DWORD *)(v9 + 80);
        if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v50, v41, v51, v52, v53, v54);
        v49 = v73;
        if (!*(_QWORD *)(v9 + 16))
        {
LABEL_37:
          v55 = *((_QWORD *)v49 + 3);
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v55 = (v55 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          *(_QWORD *)v55 = v48;
LABEL_41:
          v56 = v75[0];
          *((_BYTE *)v75[0] + 16) = *(_BYTE *)(v11 + 16) != 0;
          return JSC::JSBigInt::rightTrim(v56, (JSC::JSGlobalObject *)v8, *(JSC::VM **)(v8 + 56), v41);
        }
      }
    }
    else
    {
      if (!*(_DWORD *)(v9 + 80))
        goto LABEL_91;
      v69 = *(_DWORD *)(v9 + 80);
      if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
      {
        v72 = a3;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, a3, a4, a5, a6, a7, a8);
        a3 = v72;
      }
      if (!*(_QWORD *)(v9 + 16))
      {
LABEL_91:
        JSC::JSBigInt::absoluteDivWithBigIntDivisor<JSC::HeapBigIntImpl>((JSC::JSBigInt *)v8, v11, a3, 0, (unint64_t *)v75, a6, a7, a8);
        if (!*(_DWORD *)(v9 + 80))
          goto LABEL_41;
        v46 = *(_DWORD *)(v9 + 80);
        if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v40, v41, v42, v43, v44, v45);
        if (!*(_QWORD *)(v9 + 16))
          goto LABEL_41;
      }
    }
  }
  else
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v18 = 0x1E00000002;
    *(_QWORD *)(v18 + 8) = "0 is an invalid divisor value.";
    *(_DWORD *)(v18 + 16) = 4;
    v74 = (WTF::StringImpl *)v18;
    v19 = *(_QWORD *)(v8 + 128);
    v20 = *(JSC::Heap ***)(v8 + 56);
    if ((v19 & 1) != 0)
    {
      v67 = *(uint64_t (**)(JSC::JSBigInt **))(v19 & 0xFFFFFFFFFFFFFFFCLL);
      v68 = (JSC::JSBigInt **)(v8 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v8 & 8) != 0)
        v68 = (JSC::JSBigInt **)(v8 - 16);
      v75[0] = *v68;
      v75[1] = (JSC::JSBigInt *)v8;
      v75[2] = (JSC::JSBigInt *)(v8 + 128);
      v19 = v67(v75);
    }
    v21 = JSC::ErrorInstance::create(v20, v19, &v74, 0, 0, 0, 2, 1);
    v28 = (JSC::Exception *)v21;
    if ((v21 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)))
    {
      v28 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)v21, 0, v22, v23, v24, v25, v26);
    }
    JSC::VM::throwException((JSC::VM *)v9, (JSC::JSGlobalObject *)v8, v28, v27, v22, v23, v24, v25, v26);
    v36 = v74;
    v74 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  return 0;
}

JSC::JSBigInt *JSC::JSBigInt::inc(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, JSC::JSBigInt *a3, unsigned int a4)
{
  uint64_t v4;
  JSC::JSBigInt *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  JSC::JSBigInt *v13;

  if (!*((_BYTE *)a2 + 16))
    return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>(this, (uint64_t)a2, 1, a4);
  v4 = *((_QWORD *)this + 7);
  result = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)this, (uint64_t)a2, (JSC::VM *)*((unsigned int *)a2 + 2), a4);
  if (*(_DWORD *)(v4 + 80))
  {
    v12 = *(_DWORD *)(v4 + 80);
    if ((v12 & 0x27) != 0 && (v12 & 0x20) == 0)
    {
      v13 = result;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v6, v7, v8, v9, v10, v11);
      result = v13;
    }
    if (*(_QWORD *)(v4 + 16))
      return 0;
  }
  if (*((_DWORD *)result + 2))
    *((_BYTE *)result + 16) = 1;
  return result;
}

JSC::JSBigInt *JSC::JSBigInt::dec(JSC::JSGlobalObject **this, JSC::JSGlobalObject *a2, JSC::JSBigInt *a3, unsigned int a4)
{
  JSC::VM *v4;
  JSC::JSBigInt *result;
  uint64_t v6;

  v4 = (JSC::VM *)*((unsigned int *)a2 + 2);
  if ((_DWORD)v4)
  {
    if (*((_BYTE *)a2 + 16))
      return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>((JSC::JSBigInt *)this, (uint64_t)a2, 0, a4);
    else
      return JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>(this, (uint64_t)a2, v4, a4);
  }
  else
  {
    result = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)this, this[7], (JSC::VM *)1, a4);
    if (result)
    {
      v6 = *((_QWORD *)result + 3);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v6 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)v6 = 1;
      *((_BYTE *)result + 16) = 1;
    }
  }
  return result;
}

JSC::JSBigInt *JSC::JSBigInt::addImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSBigInt *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  char v13;
  unsigned int v14;

  v3 = a2;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if ((*(_BYTE *)(a2 + 16) != 0) == (*(_BYTE *)(a3 + 16) != 0))
    return JSC::JSBigInt::absoluteAdd<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, v4 != 0);
  v5 = *(_DWORD *)(a2 + 8);
  v6 = v5 - *(_DWORD *)(a3 + 8);
  if (v6)
  {
    if (v6 >= 0)
      v13 = 2;
    else
      v13 = 3;
    if ((v13 & 1) != 0)
    {
LABEL_25:
      v14 = v4 == 0;
      a2 = a3;
      a3 = v3;
      return JSC::JSBigInt::absoluteSub<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, v14);
    }
  }
  else if (disablePrimitiveGigacageRequested)
  {
    if (qword_1ECF4C038)
    {
      if (byte_1ECF4C022)
      {
        while ((--v5 & 0x80000000) == 0)
        {
          v7 = *(_QWORD *)(a2 + 24);
          v8 = *(_QWORD *)(a3 + 24);
          if (*(_QWORD *)((v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v5) != *(_QWORD *)((v8 & 0x3FFFFFFFFLL)
                                                                                           + qword_1ECF4C038
                                                                                           + 8 * v5))
            goto LABEL_7;
        }
      }
      else
      {
        while ((--v5 & 0x80000000) == 0)
        {
          v7 = *(_QWORD *)(a2 + 24);
          v8 = *(_QWORD *)(a3 + 24);
          if (*(_QWORD *)(v7 + 8 * v5) != *(_QWORD *)(v8 + 8 * v5))
          {
LABEL_7:
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            {
              v9 = v5;
              v10 = (_QWORD *)((v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v5);
              v8 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              goto LABEL_10;
            }
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      while ((--v5 & 0x80000000) == 0)
      {
        v7 = *(_QWORD *)(a2 + 24);
        v8 = *(_QWORD *)(a3 + 24);
        if (*(_QWORD *)(v7 + 8 * v5) != *(_QWORD *)(v8 + 8 * v5))
        {
LABEL_27:
          v9 = v5;
          v10 = (_QWORD *)(v7 + 8 * v5);
LABEL_10:
          if (*v10 > *(_QWORD *)(v8 + 8 * v9))
            v11 = 2;
          else
            v11 = 3;
          if ((v11 & 1) == 0)
            break;
          goto LABEL_25;
        }
      }
    }
  }
  else if (qword_1ECF4C038)
  {
    while ((--v5 & 0x80000000) == 0)
    {
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *(_QWORD *)(a3 + 24);
      if (*(_QWORD *)((v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v5) != *(_QWORD *)((v8 & 0x3FFFFFFFFLL)
                                                                                       + qword_1ECF4C038
                                                                                       + 8 * v5))
        goto LABEL_7;
    }
  }
  else
  {
    while ((--v5 & 0x80000000) == 0)
    {
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *(_QWORD *)(a3 + 24);
      if (*(_QWORD *)(v7 + 8 * v5) != *(_QWORD *)(v8 + 8 * v5))
        goto LABEL_27;
    }
  }
  v14 = v4 != 0;
  return JSC::JSBigInt::absoluteSub<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, v14);
}

JSC::JSBigInt *JSC::JSBigInt::subImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSBigInt *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  char v13;
  unsigned int v14;

  v3 = a2;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if ((*(_BYTE *)(a2 + 16) != 0) != (*(_BYTE *)(a3 + 16) != 0))
    return JSC::JSBigInt::absoluteAdd<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, v4 != 0);
  v6 = *(_DWORD *)(a2 + 8);
  v7 = v6 - *(_DWORD *)(a3 + 8);
  if (v7)
  {
    if (v7 >= 0)
      v13 = 2;
    else
      v13 = 3;
    if ((v13 & 1) != 0)
    {
LABEL_25:
      v14 = v4 == 0;
      a2 = a3;
      a3 = v3;
      return JSC::JSBigInt::absoluteSub<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, v14);
    }
  }
  else if (disablePrimitiveGigacageRequested)
  {
    if (qword_1ECF4C038)
    {
      if (byte_1ECF4C022)
      {
        while ((--v6 & 0x80000000) == 0)
        {
          v8 = *(_QWORD *)(a2 + 24);
          v9 = *(_QWORD *)(a3 + 24);
          if (*(_QWORD *)((v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v6) != *(_QWORD *)((v9 & 0x3FFFFFFFFLL)
                                                                                           + qword_1ECF4C038
                                                                                           + 8 * v6))
            goto LABEL_8;
        }
      }
      else
      {
        while ((--v6 & 0x80000000) == 0)
        {
          v8 = *(_QWORD *)(a2 + 24);
          v9 = *(_QWORD *)(a3 + 24);
          if (*(_QWORD *)(v8 + 8 * v6) != *(_QWORD *)(v9 + 8 * v6))
          {
LABEL_8:
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            {
              v10 = v6;
              v11 = (_QWORD *)((v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v6);
              v9 = (v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              goto LABEL_11;
            }
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      while ((--v6 & 0x80000000) == 0)
      {
        v8 = *(_QWORD *)(a2 + 24);
        v9 = *(_QWORD *)(a3 + 24);
        if (*(_QWORD *)(v8 + 8 * v6) != *(_QWORD *)(v9 + 8 * v6))
        {
LABEL_27:
          v10 = v6;
          v11 = (_QWORD *)(v8 + 8 * v6);
LABEL_11:
          if (*v11 > *(_QWORD *)(v9 + 8 * v10))
            v12 = 2;
          else
            v12 = 3;
          if ((v12 & 1) == 0)
            break;
          goto LABEL_25;
        }
      }
    }
  }
  else if (qword_1ECF4C038)
  {
    while ((--v6 & 0x80000000) == 0)
    {
      v8 = *(_QWORD *)(a2 + 24);
      v9 = *(_QWORD *)(a3 + 24);
      if (*(_QWORD *)((v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v6) != *(_QWORD *)((v9 & 0x3FFFFFFFFLL)
                                                                                       + qword_1ECF4C038
                                                                                       + 8 * v6))
        goto LABEL_8;
    }
  }
  else
  {
    while ((--v6 & 0x80000000) == 0)
    {
      v8 = *(_QWORD *)(a2 + 24);
      v9 = *(_QWORD *)(a3 + 24);
      if (*(_QWORD *)(v8 + 8 * v6) != *(_QWORD *)(v9 + 8 * v6))
        goto LABEL_27;
    }
  }
  v14 = v4 != 0;
  return JSC::JSBigInt::absoluteSub<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(a1, a2, a3, v14);
}

JSC::JSBigInt *JSC::JSBigInt::bitwiseAndImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  int v12;
  JSC::VM *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::JSBigInt *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  JSC::JSBigInt *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  JSC::JSBigInt *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  JSC::JSBigInt *v43;
  JSC::VM **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  JSC::JSBigInt *v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;

  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(unsigned __int8 *)(a3 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    if (!*(_BYTE *)(a3 + 16))
      return JSC::JSBigInt::absoluteBitwiseOp<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl,JSC::JSBigInt* JSC::JSBigInt::absoluteAnd<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSGlobalObject *,JSC::HeapBigIntImpl,JSC::HeapBigIntImpl)::{lambda(unsigned long long,unsigned long long)#1} &>((JSC::JSGlobalObject **)a1, a2, a3, a4, a5, a6, a7, a8);
    v43 = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a3, (JSC::VM *)*(unsigned int *)(a3 + 8), a4);
    if (*(_DWORD *)(v11 + 80))
    {
      v52 = *(_DWORD *)(v11 + 80);
      if ((v52 & 0x27) != 0 && (v52 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v37, v38, v39, v40, v41, v42);
      if (*(_QWORD *)(v11 + 16))
        return 0;
    }
    v44 = (JSC::VM **)a1;
    v45 = a2;
    v46 = (uint64_t)v43;
    return JSC::JSBigInt::absoluteAndNot<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v44, v45, v46, v38, v39, v40, v41, v42);
  }
  v13 = (JSC::VM *)*(unsigned int *)(a2 + 8);
  if (v12)
  {
    v14 = *(_DWORD *)(a3 + 8);
    if (v13 > v14)
      v14 = *(_DWORD *)(a2 + 8);
    v21 = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a2, (JSC::VM *)(v14 + 1), a4);
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_43;
    v49 = *(_DWORD *)(v11 + 80);
    if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v15, v16, v17, v18, v19, v20);
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_43:
      v28 = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a3, (JSC::VM *)*(unsigned int *)(a3 + 8), v16);
      if (!*(_DWORD *)(v11 + 80))
        goto LABEL_44;
      v50 = *(_DWORD *)(v11 + 80);
      if ((v50 & 0x27) != 0 && (v50 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v22, v23, v24, v25, v26, v27);
      if (!*(_QWORD *)(v11 + 16))
      {
LABEL_44:
        v35 = JSC::JSBigInt::absoluteBitwiseOp<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl,JSC::JSBigInt* JSC::JSBigInt::absoluteOr<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSGlobalObject *,JSC::HeapBigIntImpl,JSC::HeapBigIntImpl)::{lambda(unsigned long long,unsigned long long)#1} &>((JSC::JSGlobalObject **)a1, (uint64_t)v21, (uint64_t)v28, v23, v24, v25, v26, v27);
        if (!*(_DWORD *)(v11 + 80))
          return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, (uint64_t)v35, 0, v30);
        v51 = *(_DWORD *)(v11 + 80);
        if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v29, v30, v31, v32, v33, v34);
        if (!*(_QWORD *)(v11 + 16))
          return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, (uint64_t)v35, 0, v30);
      }
    }
    return 0;
  }
  v48 = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a2, v13, a4);
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_13;
  v53 = *(_DWORD *)(v11 + 80);
  if ((v53 & 0x27) != 0 && (v53 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v47, v38, v39, v40, v41, v42);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_13:
    v44 = (JSC::VM **)a1;
    v45 = a3;
    v46 = (uint64_t)v48;
    return JSC::JSBigInt::absoluteAndNot<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v44, v45, v46, v38, v39, v40, v41, v42);
  }
  return 0;
}

JSC::JSBigInt *JSC::JSBigInt::bitwiseOrImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSBigInt *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  JSC::JSBigInt *v30;
  JSC::JSBigInt *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::JSBigInt *v39;
  JSC::VM **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;

  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a3 + 8);
  if (v12 <= v13)
    v14 = v13;
  else
    v14 = v12;
  v15 = *(unsigned __int8 *)(a3 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    if (!*(_BYTE *)(a3 + 16))
      return JSC::JSBigInt::absoluteBitwiseOp<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl,JSC::JSBigInt* JSC::JSBigInt::absoluteOr<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSGlobalObject *,JSC::HeapBigIntImpl,JSC::HeapBigIntImpl)::{lambda(unsigned long long,unsigned long long)#1} &>((JSC::JSGlobalObject **)a1, a2, a3, a4, a5, a6, a7, a8);
    v39 = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a3, (JSC::VM *)v14, a4);
    if (*(_DWORD *)(v11 + 80))
    {
      v48 = *(_DWORD *)(v11 + 80);
      if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v38, v17, v18, v19, v20, v21);
      if (*(_QWORD *)(v11 + 16))
        return 0;
    }
    v40 = (JSC::VM **)a1;
    v41 = (uint64_t)v39;
    v42 = a2;
LABEL_14:
    v31 = JSC::JSBigInt::absoluteAndNot<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(v40, v41, v42, v17, v18, v19, v20, v21);
    goto LABEL_15;
  }
  v22 = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a2, (JSC::VM *)v14, a4);
  v23 = *(_DWORD *)(v11 + 80);
  if (!v15)
  {
    if (v23)
    {
      v49 = *(_DWORD *)(v11 + 80);
      if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v16, v17, v18, v19, v20, v21);
      if (*(_QWORD *)(v11 + 16))
        return 0;
    }
    v40 = (JSC::VM **)a1;
    v41 = (uint64_t)v22;
    v42 = a3;
    goto LABEL_14;
  }
  if (!v23)
    goto LABEL_45;
  v46 = *(_DWORD *)(v11 + 80);
  if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v16, v17, v18, v19, v20, v21);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_45:
    v30 = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a3, (JSC::VM *)*(unsigned int *)(a3 + 8), v17);
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_8;
    v47 = *(_DWORD *)(v11 + 80);
    if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v24, v25, v26, v27, v28, v29);
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_8:
      v31 = JSC::JSBigInt::absoluteBitwiseOp<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl,JSC::JSBigInt* JSC::JSBigInt::absoluteAnd<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSGlobalObject *,JSC::HeapBigIntImpl,JSC::HeapBigIntImpl)::{lambda(unsigned long long,unsigned long long)#1} &>((JSC::JSGlobalObject **)a1, (uint64_t)v22, (uint64_t)v30, v25, v26, v27, v28, v29);
LABEL_15:
      v43 = (uint64_t)v31;
      if (!*(_DWORD *)(v11 + 80))
        return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, v43, 0, v33);
      v45 = *(_DWORD *)(v11 + 80);
      if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v32, v33, v34, v35, v36, v37);
      if (!*(_QWORD *)(v11 + 16))
        return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, v43, 0, v33);
    }
  }
  return 0;
}

JSC::JSBigInt *JSC::JSBigInt::bitwiseXorImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSBigInt *v8;
  JSC::JSBigInt *v9;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::JSBigInt *v31;
  JSC::JSGlobalObject **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  JSC::JSBigInt *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  JSC::JSBigInt *v44;
  int v45;
  int v46;
  int v47;
  int v48;

  v8 = (JSC::JSBigInt *)a3;
  v9 = (JSC::JSBigInt *)a2;
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(unsigned __int8 *)(a3 + 16);
  if (!*(_BYTE *)(a2 + 16))
  {
    if (!*(_BYTE *)(a3 + 16))
      return JSC::JSBigInt::absoluteBitwiseOp<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl,JSC::JSBigInt* JSC::JSBigInt::absoluteXor<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSGlobalObject *,JSC::HeapBigIntImpl,JSC::HeapBigIntImpl)::{lambda(unsigned long long,unsigned long long)#1} &>((JSC::JSGlobalObject **)a1, (uint64_t)v9, (uint64_t)v8, a4, a5, a6, a7, a8);
    v24 = *(_DWORD *)(a2 + 8);
    if (v24 <= *(_DWORD *)(a3 + 8))
      v24 = *(_DWORD *)(a3 + 8);
    v31 = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a3, (JSC::VM *)(v24 + 1), a4);
    if (*(_DWORD *)(v11 + 80))
    {
      v47 = *(_DWORD *)(v11 + 80);
      if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v25, v26, v27, v28, v29, v30);
      if (*(_QWORD *)(v11 + 16))
        return 0;
    }
    v32 = (JSC::JSGlobalObject **)a1;
    v33 = (uint64_t)v31;
    v34 = (uint64_t)v9;
    goto LABEL_19;
  }
  v13 = *(_DWORD *)(a2 + 8);
  v14 = *(_DWORD *)(a3 + 8);
  if (v13 <= v14)
    v15 = v14;
  else
    v15 = v13;
  if (v12)
  {
    v9 = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a2, (JSC::VM *)v15, a4);
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_45;
    v46 = *(_DWORD *)(v11 + 80);
    if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v16, v17, v18, v19, v20, v21);
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_45:
      v8 = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, (uint64_t)v8, (JSC::VM *)*((unsigned int *)v8 + 2), v17);
      if (!*(_DWORD *)(v11 + 80))
        return JSC::JSBigInt::absoluteBitwiseOp<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl,JSC::JSBigInt* JSC::JSBigInt::absoluteXor<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSGlobalObject *,JSC::HeapBigIntImpl,JSC::HeapBigIntImpl)::{lambda(unsigned long long,unsigned long long)#1} &>((JSC::JSGlobalObject **)a1, (uint64_t)v9, (uint64_t)v8, a4, a5, a6, a7, a8);
      v23 = *(_DWORD *)(v11 + 80);
      if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v22, a4, a5, a6, a7, a8);
      if (!*(_QWORD *)(v11 + 16))
        return JSC::JSBigInt::absoluteBitwiseOp<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl,JSC::JSBigInt* JSC::JSBigInt::absoluteXor<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSGlobalObject *,JSC::HeapBigIntImpl,JSC::HeapBigIntImpl)::{lambda(unsigned long long,unsigned long long)#1} &>((JSC::JSGlobalObject **)a1, (uint64_t)v9, (uint64_t)v8, a4, a5, a6, a7, a8);
    }
    return 0;
  }
  v37 = JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>((JSC::VM **)a1, a2, (JSC::VM *)(v15 + 1), a4);
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_18;
  v48 = *(_DWORD *)(v11 + 80);
  if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v36, v26, v27, v28, v29, v30);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_18:
    v32 = (JSC::JSGlobalObject **)a1;
    v33 = (uint64_t)v37;
    v34 = (uint64_t)v8;
LABEL_19:
    v44 = JSC::JSBigInt::absoluteBitwiseOp<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl,JSC::JSBigInt* JSC::JSBigInt::absoluteXor<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSGlobalObject *,JSC::HeapBigIntImpl,JSC::HeapBigIntImpl)::{lambda(unsigned long long,unsigned long long)#1} &>(v32, v33, v34, v26, v27, v28, v29, v30);
    if (!*(_DWORD *)(v11 + 80))
      return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, (uint64_t)v44, 0, v39);
    v45 = *(_DWORD *)(v11 + 80);
    if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v38, v39, v40, v41, v42, v43);
    if (!*(_QWORD *)(v11 + 16))
      return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>((JSC::JSBigInt *)a1, (uint64_t)v44, 0, v39);
  }
  return 0;
}

JSC::JSGlobalObject *JSC::JSBigInt::leftShift(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, JSC::JSBigInt *a3, JSC::JSBigInt *a4)
{
  if (!*((_DWORD *)a2 + 2) || !*((_DWORD *)a3 + 2))
    return a2;
  if (*((_BYTE *)a3 + 16))
    return JSC::JSBigInt::rightShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(this, (uint64_t)a2, (uint64_t)a3, a4);
  return JSC::JSBigInt::leftShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(this, (uint64_t)a2, (uint64_t)a3, a4);
}

JSC::JSGlobalObject *JSC::JSBigInt::signedRightShift(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, JSC::JSBigInt *a3, JSC::JSBigInt *a4)
{
  if (!*((_DWORD *)a2 + 2) || !*((_DWORD *)a3 + 2))
    return a2;
  if (*((_BYTE *)a3 + 16))
    return JSC::JSBigInt::leftShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(this, (uint64_t)a2, (uint64_t)a3, a4);
  return JSC::JSBigInt::rightShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(this, (uint64_t)a2, (uint64_t)a3, a4);
}

JSC::JSBigInt *JSC::JSBigInt::bitwiseNot(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::JSBigInt *a3, unsigned int a4)
{
  if (*((_BYTE *)a2 + 16))
    return JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>(this, (uint64_t)a2, (JSC::VM *)*((unsigned int *)a2 + 2), a4);
  else
    return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>((JSC::JSBigInt *)this, (uint64_t)a2, 0, a4);
}

BOOL JSC::JSBigInt::equals(JSC::JSBigInt *this, JSC::JSBigInt *a2, JSC::JSBigInt *a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  if ((*((_BYTE *)this + 16) != 0) != (*((_BYTE *)a2 + 16) != 0))
    return 0;
  v3 = *((unsigned int *)this + 2);
  if ((_DWORD)v3 != *((_DWORD *)a2 + 2))
    return 0;
  if (!(_DWORD)v3)
    return 1;
  v4 = *((_QWORD *)this + 3);
  if (!qword_1ECF4C038)
  {
    v14 = (_QWORD *)*((_QWORD *)a2 + 3);
    if (*(_QWORD *)v4 != *v14)
      return 0;
    v15 = 0;
    v16 = (_QWORD *)(v4 + 8);
    v17 = v14 + 1;
    while (v3 - 1 != v15)
    {
      v18 = v16[v15];
      v19 = v17[v15++];
      if (v18 != v19)
        return v15 >= v3;
    }
    goto LABEL_34;
  }
  v5 = (_QWORD *)((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
  v6 = *((_QWORD *)a2 + 3);
  v7 = (_QWORD *)((v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
  if (!byte_1ECF4C022)
  {
    if (!disablePrimitiveGigacageRequested)
    {
      if (*v5 == *v7)
      {
        v8 = 0;
        v20 = v5 + 1;
        v21 = v7 + 1;
        while (v3 - 1 != v8)
        {
          v22 = v20[v8];
          v23 = v21[v8++];
          if (v22 != v23)
            return v8 >= v3;
        }
        goto LABEL_23;
      }
      return 0;
    }
    if (*(_QWORD *)v4 != *(_QWORD *)v6)
      return 0;
    v15 = 0;
    v25 = (_QWORD *)(v4 + 8);
    while (v3 - 1 != v15)
    {
      v26 = v25[v15];
      v27 = *(_QWORD *)(v6 + 8 + 8 * v15++);
      if (v26 != v27)
        return v15 >= v3;
    }
LABEL_34:
    v15 = *((unsigned int *)this + 2);
    return v15 >= v3;
  }
  if (*v5 != *v7)
    return 0;
  v8 = 0;
  v9 = v5 + 1;
  v10 = v7 + 1;
  while (v3 - 1 != v8)
  {
    v11 = v9[v8];
    v12 = v10[v8++];
    if (v11 != v12)
      return v8 >= v3;
  }
LABEL_23:
  v8 = *((unsigned int *)this + 2);
  return v8 >= v3;
}

uint64_t JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if ((*(_BYTE *)(a1 + 16) != 0) != (*(_BYTE *)(a2 + 16) != 0))
  {
LABEL_15:
    if (*(_BYTE *)(a1 + 16))
      return 3;
    else
      return 2;
  }
  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a2 + 8);
  if (v2 != v3)
  {
    if ((int)(v2 - v3) < 0)
    {
LABEL_11:
      if (*(_BYTE *)(a1 + 16))
        return 2;
      else
        return 3;
    }
    goto LABEL_15;
  }
  if (disablePrimitiveGigacageRequested)
  {
    if (qword_1ECF4C038)
    {
      if (byte_1ECF4C022)
      {
        while ((--v2 & 0x80000000) == 0)
        {
          v4 = *(_QWORD *)(a1 + 24);
          v5 = *(_QWORD *)(a2 + 24);
          if (*(_QWORD *)((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v2) != *(_QWORD *)((v5 & 0x3FFFFFFFFLL)
                                                                                           + qword_1ECF4C038
                                                                                           + 8 * v2))
            goto LABEL_7;
        }
      }
      else
      {
        while ((--v2 & 0x80000000) == 0)
        {
          v4 = *(_QWORD *)(a1 + 24);
          v5 = *(_QWORD *)(a2 + 24);
          if (*(_QWORD *)(v4 + 8 * v2) != *(_QWORD *)(v5 + 8 * v2))
          {
LABEL_7:
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            {
              v6 = v2;
              v7 = (_QWORD *)((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v2);
              v5 = (v5 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              goto LABEL_10;
            }
            goto LABEL_22;
          }
        }
      }
    }
    else
    {
      while ((--v2 & 0x80000000) == 0)
      {
        v4 = *(_QWORD *)(a1 + 24);
        v5 = *(_QWORD *)(a2 + 24);
        if (*(_QWORD *)(v4 + 8 * v2) != *(_QWORD *)(v5 + 8 * v2))
        {
LABEL_22:
          v6 = v2;
          v7 = (_QWORD *)(v4 + 8 * v2);
LABEL_10:
          if (*v7 > *(_QWORD *)(v5 + 8 * v6))
            goto LABEL_15;
          goto LABEL_11;
        }
      }
    }
  }
  else if (qword_1ECF4C038)
  {
    while ((--v2 & 0x80000000) == 0)
    {
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(_QWORD *)(a2 + 24);
      if (*(_QWORD *)((v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v2) != *(_QWORD *)((v5 & 0x3FFFFFFFFLL)
                                                                                       + qword_1ECF4C038
                                                                                       + 8 * v2))
        goto LABEL_7;
    }
  }
  else
  {
    while ((--v2 & 0x80000000) == 0)
    {
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(_QWORD *)(a2 + 24);
      if (*(_QWORD *)(v4 + 8 * v2) != *(_QWORD *)(v5 + 8 * v2))
        goto LABEL_22;
    }
  }
  return 0;
}

uint64_t JSC::JSBigInt::compareImpl<JSC::HeapBigIntImpl,JSC::Int64BigIntImpl>(uint64_t a1, unint64_t a2, char a3)
{
  int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v8;
  uint64_t v9;

  if ((a3 != 0) != (*(_BYTE *)(a1 + 16) != 0))
    goto LABEL_12;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = a2 != 0;
  if (v3 != v4)
  {
    if (v3 - v4 < 0)
      goto LABEL_29;
    goto LABEL_12;
  }
  if (a3)
    v5 = -(uint64_t)a2;
  else
    v5 = a2;
  if (!disablePrimitiveGigacageRequested)
  {
    if (qword_1ECF4C038)
    {
      if (v3 < 1)
        return 0;
      v6 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)((v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038) == v5)
        return 0;
      goto LABEL_27;
    }
    if (v3 < 1)
      return 0;
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)v6 == v5)
      return 0;
    goto LABEL_28;
  }
  if (qword_1ECF4C038)
    v8 = byte_1ECF4C022 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (v3 < 1)
      return 0;
    v6 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)v6;
  }
  else
  {
    if (v3 < 1)
      return 0;
    v6 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)((v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
  }
  if (v9 == v5)
    return 0;
  if (qword_1ECF4C038 && byte_1ECF4C022)
LABEL_27:
    v6 = (v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
LABEL_28:
  if (*(_QWORD *)v6 <= v5)
  {
LABEL_29:
    if (*(_BYTE *)(a1 + 16))
      return 2;
    else
      return 3;
  }
LABEL_12:
  if (*(_BYTE *)(a1 + 16))
    return 3;
  else
    return 2;
}

uint64_t JSC::JSBigInt::absoluteDivWithDigitDivisor<JSC::HeapBigIntImpl>(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, uint64_t a3, unint64_t a4, uint64_t *a5, unint64_t *a6)
{
  int v10;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;

  *a6 = 0;
  if (a4 == 1)
  {
    if (a5)
    {
      if (!a3)
        return 0;
      *a5 = a3;
    }
  }
  else
  {
    v10 = *(_DWORD *)(a3 + 8);
    if (a5)
    {
      result = *a5;
      if (!*a5)
      {
        result = JSC::JSBigInt::createWithLength(this, a2, (JSC::VM *)*(unsigned int *)(a3 + 8), a4);
        if (!result)
          return result;
        *a5 = result;
      }
      v13 = (v10 - 1);
      if (v10 - 1 >= 0)
      {
        v14 = *(_QWORD *)(a3 + 24);
        v15 = qword_1ECF4C038;
        v16 = disablePrimitiveGigacageRequested;
        v17 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v18 = __clz(a4);
        v19 = a4 << v18;
        v20 = a4 << v18 >> 32;
        v21 = (a4 << v18);
        v22 = *(_QWORD *)(result + 24);
        v23 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        do
        {
          if (v16)
            v24 = byte_1ECF4C022 == 0;
          else
            v24 = 0;
          if (v24)
            v25 = v14;
          else
            v25 = v17;
          if (!v15)
            v25 = v14;
          v26 = *(_QWORD *)(v25 + 8 * v13);
          v27 = v26 >> (-(char)v18 & 0x3F);
          if (!v18)
            v27 = 0;
          v28 = v27 | (*a6 << v18);
          v29 = v26 << v18 >> 32;
          v30 = (v26 << v18);
          v31 = v28 / v20;
          v32 = v28 % v20;
          do
          {
            if (!HIDWORD(v31) && v31 * v21 <= (v29 | (v32 << 32)))
              break;
            --v31;
            v32 += v20;
          }
          while (!HIDWORD(v32));
          v33 = (v29 | (v28 << 32)) - v31 * v19;
          v34 = v33 / v20;
          v35 = v33 % v20;
          do
          {
            if (!HIDWORD(v34) && v34 * v21 <= (v30 | (v35 << 32)))
              break;
            --v34;
            v35 += v20;
          }
          while (!HIDWORD(v35));
          *a6 = ((v30 | (v33 << 32)) - v34 * v19) >> v18;
          v36 = v34 + (v31 << 32);
          if (v16)
            v37 = byte_1ECF4C022 == 0;
          else
            v37 = 0;
          if (v37)
            v38 = v22;
          else
            v38 = v23;
          if (!v15)
            v38 = v22;
          *(_QWORD *)(v38 + 8 * v13) = v36;
          v39 = v13-- <= 0;
        }
        while (!v39);
      }
    }
    else
    {
      v40 = (v10 - 1);
      if (v10 - 1 >= 0)
      {
        v41 = 0;
        v42 = *(_QWORD *)(a3 + 24);
        v43 = qword_1ECF4C038;
        v44 = disablePrimitiveGigacageRequested;
        v45 = (v42 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v46 = __clz(a4);
        v47 = a4 << v46;
        v48 = a4 << v46 >> 32;
        v49 = (a4 << v46);
        do
        {
          if (v44)
            v50 = byte_1ECF4C022 == 0;
          else
            v50 = 0;
          if (v50)
            v51 = v42;
          else
            v51 = v45;
          if (!v43)
            v51 = v42;
          v52 = *(_QWORD *)(v51 + 8 * v40);
          v53 = v41 << v46;
          v54 = v52 >> (-(char)v46 & 0x3F);
          if (!v46)
            v54 = 0;
          v55 = v54 | v53;
          v56 = v52 << v46;
          v57 = v52 << v46 >> 32;
          v58 = v55 / v48;
          v59 = v55 % v48;
          do
          {
            if (!HIDWORD(v58) && v58 * v49 <= (v57 | (v59 << 32)))
              break;
            --v58;
            v59 += v48;
          }
          while (!HIDWORD(v59));
          v60 = (v57 | (v55 << 32)) - v58 * v47;
          v61 = v60 / v48;
          v62 = v60 % v48;
          do
          {
            if (!HIDWORD(v61) && v61 * v49 <= (v56 | (v62 << 32)))
              break;
            --v61;
            v62 += v48;
          }
          while (!HIDWORD(v62));
          v41 = ((v56 | (v60 << 32)) - v61 * v47) >> v46;
          *a6 = v41;
          v39 = v40-- <= 0;
        }
        while (!v39);
      }
    }
  }
  return 1;
}

JSC::JSBigInt *JSC::JSBigInt::rightTrim(JSC::JSBigInt *this, JSC::JSGlobalObject *a2, JSC::VM *a3, unsigned int a4)
{
  int v5;
  JSC::VM *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;

  v5 = *((_DWORD *)this + 2);
  if (v5)
  {
    if (disablePrimitiveGigacageRequested)
    {
      LODWORD(v6) = v5 + 1;
      if (qword_1ECF4C038)
        v14 = byte_1ECF4C022 == 0;
      else
        v14 = 1;
      if (v14)
      {
        while (1)
        {
          v16 = (_DWORD)v6 - 2;
          if ((int)v6 - 2 < 0)
            break;
          v6 = (JSC::VM *)((_DWORD)v6 - 1);
          if (*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v16))
          {
LABEL_6:
            if ((_DWORD)v6 == v5)
              return this;
            v11 = JSC::JSBigInt::createWithLength(a2, a3, v6, a4);
            v8 = v11;
            if (v11)
            {
              v12 = *((_QWORD *)this + 3);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              {
                v12 = (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v13 = (void *)((*(_QWORD *)(v11 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038);
              }
              else
              {
                v13 = *(void **)(v11 + 24);
              }
              memmove(v13, (const void *)v12, 8 * v6);
              *(_BYTE *)(v8 + 16) = *((_BYTE *)this + 16) != 0;
            }
            return (JSC::JSBigInt *)v8;
          }
        }
      }
      else
      {
        while (1)
        {
          v15 = (_DWORD)v6 - 2;
          if ((int)v6 - 2 < 0)
            break;
          v6 = (JSC::VM *)((_DWORD)v6 - 1);
          if (*(_QWORD *)((*((_QWORD *)this + 3) & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v15))
            goto LABEL_6;
        }
      }
    }
    else
    {
      LODWORD(v6) = v5 + 1;
      if (qword_1ECF4C038)
      {
        while (1)
        {
          v7 = (_DWORD)v6 - 2;
          if ((int)v6 - 2 < 0)
            break;
          v6 = (JSC::VM *)((_DWORD)v6 - 1);
          if (*(_QWORD *)((*((_QWORD *)this + 3) & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v7))
            goto LABEL_6;
        }
      }
      else
      {
        while (1)
        {
          v9 = (_DWORD)v6 - 2;
          if ((int)v6 - 2 < 0)
            break;
          v6 = (JSC::VM *)((_DWORD)v6 - 1);
          if (*(_QWORD *)(*((_QWORD *)this + 3) + 8 * v9))
            goto LABEL_6;
        }
      }
    }
    return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(a2, a3, 0, a4);
  }
  else
  {
    return this;
  }
}

JSC::JSBigInt *JSC::JSBigInt::tryRightTrim(JSC::JSBigInt *this, JSC::VM *a2, uint64_t a3, unsigned int a4)
{
  return JSC::JSBigInt::rightTrim(this, 0, a2, a4);
}

BOOL JSC::JSBigInt::equalsToNumber(uint64_t a1, unint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 < 0xFFFE000000000000)
  {
    return JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(a1, COERCE_DOUBLE(a2 - 0x2000000000000)) == 0;
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 8);
    if ((_DWORD)a2)
    {
      if (v2 != 1 || (*(_BYTE *)(a1 + 16) != 0) != a2 >> 31)
        return 0;
      v3 = *(_QWORD *)(a1 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v3 = (v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v4 = *(_QWORD *)v3;
      if ((a2 & 0x80000000) == 0)
        v5 = a2;
      else
        v5 = -(int)a2;
      return v4 == v5;
    }
    else
    {
      return v2 == 0;
    }
  }
}

BOOL JSC::JSBigInt::equalsToInt32(JSC::JSBigInt *this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 2);
  if (a2)
  {
    if (v2 != 1 || (*((_BYTE *)this + 16) != 0) != a2 >> 31)
      return 0;
    v3 = *((_QWORD *)this + 3);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v3 = (v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v4 = *(_QWORD *)v3;
    if (a2 >= 0)
      v5 = a2;
    else
      v5 = -a2;
    return v4 == v5;
  }
  else
  {
    return v2 == 0;
  }
}

uint64_t JSC::JSBigInt::compareToDouble<JSC::HeapBigIntImpl>(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  int v6;
  signed int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  signed int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v2 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  if ((_DWORD)v2 == 2047)
  {
    if (a2 == INFINITY)
      return 3;
    else
      return 2;
  }
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (a2 >= 0.0 == (*(_BYTE *)(a1 + 16) != 0))
    goto LABEL_10;
  v6 = *(_DWORD *)(a1 + 8);
  if (a2 == 0.0)
    return 2 * (v6 != 0);
  if (!v6)
    return 3;
  v18 = v2 >= 0x3FE;
  v7 = v2 - 1022;
  if (v7 == 0 || !v18)
  {
LABEL_10:
    if (v5)
      return 3;
    else
      return 2;
  }
  v8 = *(_QWORD *)(a1 + 24);
  v9 = v8;
  if (qword_1ECF4C038)
  {
    if (byte_1ECF4C022 || (v9 = *(_QWORD *)(a1 + 24), !disablePrimitiveGigacageRequested))
      v9 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  }
  v10 = *(_QWORD *)(v9 + 8 * (v6 - 1));
  v11 = __clz(v10);
  v12 = (v6 << 6) - v11;
  if (v12 < v7)
    goto LABEL_19;
  if (v12 > v7)
    goto LABEL_10;
  v13 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  v14 = v13 << (11 - v11);
  v15 = v11 - 11;
  v16 = v13 >> (v11 - 11);
  v17 = v13 << (75 - v11);
  v18 = v11 >= 0xC;
  if (v11 >= 0xC)
  {
    v19 = v16;
  }
  else
  {
    v17 = 0;
    v19 = v14;
  }
  v20 = v18 ? v15 : 0;
  if (v10 > v19)
    goto LABEL_10;
  if (v10 < v19)
  {
LABEL_19:
    if (v5)
      return 2;
    else
      return 3;
  }
  v21 = v6 - 1;
  if (v6 > 1)
  {
    if (v5)
      result = 2;
    else
      result = 3;
    if (qword_1ECF4C038)
    {
      v22 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v23 = v6 - 2;
        while (1)
        {
          if (v20 <= 0)
            v24 = 0;
          else
            v24 = v17;
          if (v20 > 0)
          {
            v17 = 0;
            v20 -= 64;
          }
          v25 = *(_QWORD *)(v22 + 8 * v23);
          if (v25 > v24)
            break;
          if (v25 < v24)
            return result;
          v26 = __OFSUB__(v23--, 1);
          if (v23 < 0 != v26)
            goto LABEL_50;
        }
      }
      else if (disablePrimitiveGigacageRequested)
      {
        while (1)
        {
          --v21;
          if (v20 <= 0)
            v31 = 0;
          else
            v31 = v17;
          if (v20 > 0)
          {
            v17 = 0;
            v20 -= 64;
          }
          v32 = *(_QWORD *)(v8 + 8 * v21);
          if (v32 > v31)
            break;
          if (v32 < v31)
            return result;
          if (v21 < 1)
            goto LABEL_50;
        }
      }
      else
      {
        while (1)
        {
          --v21;
          if (v20 <= 0)
            v29 = 0;
          else
            v29 = v17;
          if (v20 > 0)
          {
            v17 = 0;
            v20 -= 64;
          }
          v30 = *(_QWORD *)(v22 + 8 * v21);
          if (v30 > v29)
            break;
          if (v30 < v29)
            return result;
          if (v21 < 1)
            goto LABEL_50;
        }
      }
    }
    else
    {
      while (1)
      {
        --v21;
        if (v20 <= 0)
          v27 = 0;
        else
          v27 = v17;
        if (v20 > 0)
        {
          v17 = 0;
          v20 -= 64;
        }
        v28 = *(_QWORD *)(v8 + 8 * v21);
        if (v28 > v27)
          break;
        if (v28 < v27)
          return result;
        if (v21 < 1)
          goto LABEL_50;
      }
    }
    goto LABEL_10;
  }
  if (v5)
    LODWORD(result) = 2;
  else
    LODWORD(result) = 3;
LABEL_50:
  if (v17)
    return result;
  else
    return 0;
}

unint64_t JSC::JSBigInt::toNumberHeap(JSC::JSBigInt *this, JSC::JSBigInt *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;

  v2 = *((_DWORD *)this + 2);
  if (!v2)
    return 0xFFFE000000000000;
  v3 = v2 - 1;
  v4 = *((_QWORD *)this + 3);
  v5 = v4;
  if (qword_1ECF4C038)
  {
    if (byte_1ECF4C022 || (v5 = *((_QWORD *)this + 3), !disablePrimitiveGigacageRequested))
      v5 = (v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  }
  v6 = *((unsigned __int8 *)this + 16);
  v7 = *(_QWORD *)(v5 + 8 * v3);
  v8 = __clz(v7);
  v9 = (v2 << 6) - v8;
  if (v9 >= 0x401)
    goto LABEL_6;
  v11 = v9 - 1;
  if (v8 == 63)
    v12 = 0;
  else
    v12 = v7 << (v8 + 1) >> 12;
  if (v3 < 1 || v8 < 0xC)
  {
    if (v8 > 0xB)
      goto LABEL_55;
    if (v8 == 11)
    {
      if (v2 == 1)
        goto LABEL_55;
      v3 = v2 - 2;
      v17 = v4;
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v17 = v4, !disablePrimitiveGigacageRequested))
          v17 = (v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      v7 = *(_QWORD *)(v17 + 8 * v3);
      v15 = 63;
      goto LABEL_20;
    }
    v14 = v8 - 11;
  }
  else
  {
    v3 = v2 - 2;
    v13 = v4;
    if (qword_1ECF4C038)
    {
      if (byte_1ECF4C022 || (v13 = v4, !disablePrimitiveGigacageRequested))
        v13 = (v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    }
    v7 = *(_QWORD *)(v13 + 8 * v3);
    v12 |= v7 >> (75 - v8);
    v14 = v8 - 75;
  }
  v15 = ~v14;
LABEL_20:
  v16 = 1 << v15;
  if ((v16 & v7) != 0)
  {
    if (((v16 - 1) & v7) != 0)
      goto LABEL_51;
    if (disablePrimitiveGigacageRequested)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022)
          v4 = (v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        while (v3 >= 1)
        {
          if (*(_QWORD *)(v4 + 8 * --v3))
            goto LABEL_51;
        }
      }
      else
      {
        while (v3 >= 1)
        {
          if (*(_QWORD *)(v4 + 8 * --v3))
            goto LABEL_51;
        }
      }
    }
    else
    {
      if (qword_1ECF4C038)
        v4 = (v4 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      while (v3 >= 1)
      {
        if (*(_QWORD *)(v4 + 8 * --v3))
          goto LABEL_51;
      }
    }
    if ((v12 & 1) != 0)
    {
LABEL_51:
      if (v12 >= 0xFFFFFFFFFFFFFLL)
      {
        if (v9 >= 0x400)
        {
LABEL_6:
          if (v6)
            return 0xFFF2000000000000;
          else
            return 0x7FF2000000000000;
        }
        v12 = 0;
        v11 = v9;
      }
      else
      {
        ++v12;
      }
    }
  }
LABEL_55:
  *(_QWORD *)&v18 = v12 | ((unint64_t)(v6 != 0) << 63) | ((v11 << 52) + 0x3FF0000000000000);
  if ((*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v19 = (int)v18, (double)(int)v19 == v18)
    && ((*(_QWORD *)&v18 & 0x8000000000000000) == 0 || (_DWORD)v19))
  {
    return v19 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v18 + 0x2000000000000;
  }
}

JSC::JSBigInt *JSC::JSBigInt::asIntNImpl<JSC::HeapBigIntImpl>(JSC::JSGlobalObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  int v21;

  v8 = *(unsigned int *)(a3 + 8);
  if (!(_DWORD)v8)
    return (JSC::JSBigInt *)a3;
  if (!a2)
    return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], 0, a4, a5, a6, a7, a8);
  v9 = (unint64_t)(a2 + 63) >> 6;
  if (v9 > v8)
    return (JSC::JSBigInt *)a3;
  v10 = *(_QWORD *)(a3 + 24);
  v11 = v10;
  if (qword_1ECF4C038)
  {
    if (byte_1ECF4C022 || (v11 = *(_QWORD *)(a3 + 24), !disablePrimitiveGigacageRequested))
      v11 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  }
  v12 = *(_QWORD *)(v11 + 8 * (v9 - 1));
  v13 = 1 << (a2 + 63);
  if (v9 == v8 && v12 < v13)
    return (JSC::JSBigInt *)a3;
  if ((v12 & v13) != 0)
  {
    if (!*(_BYTE *)(a3 + 16))
    {
      v14 = 1;
      return JSC::JSBigInt::truncateAndSubFromPowerOfTwo<JSC::HeapBigIntImpl>(a1, a2, a3, v14, a5, a6, a7, a8);
    }
    if ((v12 & (v13 - 1)) != 0)
    {
LABEL_12:
      v14 = 0;
      return JSC::JSBigInt::truncateAndSubFromPowerOfTwo<JSC::HeapBigIntImpl>(a1, a2, a3, v14, a5, a6, a7, a8);
    }
    v16 = v9 - 2;
    if ((int)v9 >= 2)
    {
      if (qword_1ECF4C038)
      {
        v17 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          while (!*(_QWORD *)(v17 + 8 * v16))
          {
            v18 = __OFSUB__(v16--, 1);
            if (v16 < 0 != v18)
              goto LABEL_23;
          }
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v21 = v9 - 1;
          while (!*(_QWORD *)(v10 + 8 * --v21))
          {
            if (v21 < 1)
              goto LABEL_23;
          }
        }
        else
        {
          v20 = v9 - 1;
          while (!*(_QWORD *)(v17 + 8 * --v20))
          {
            if (v20 < 1)
              goto LABEL_23;
          }
        }
      }
      else
      {
        v19 = v9 - 1;
        while (!*(_QWORD *)(v10 + 8 * --v19))
        {
          if (v19 < 1)
            goto LABEL_23;
        }
      }
      goto LABEL_12;
    }
LABEL_23:
    if (v9 == v8 && v12 == v13)
      return (JSC::JSBigInt *)a3;
  }
  return JSC::JSBigInt::truncateToNBits<JSC::HeapBigIntImpl>(a1, a2, a3, a4, a5, a6, a7, a8);
}

JSC::JSBigInt *JSC::JSBigInt::asUintNImpl<JSC::HeapBigIntImpl>(JSC::JSBigInt *this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::VM *v10;
  uint64_t v11;
  const WTF::String *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  JSC::Exception *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;

  v8 = *(_DWORD *)(a3 + 8);
  if (!v8)
    return (JSC::JSBigInt *)a3;
  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  if (!a2)
    return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), 0, a4, a5, a6, a7, a8);
  if (*(_BYTE *)(a3 + 16))
  {
    if (a2 > 0x100000)
    {
      v11 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v11 = 0x2F00000002;
      *(_QWORD *)(v11 + 8) = "BigInt generated from this operation is too big";
      *(_DWORD *)(v11 + 16) = 4;
      v41 = (WTF::StringImpl *)v11;
      v13 = JSC::createOutOfMemoryError((unint64_t)this, &v41, v12);
      v20 = (JSC::Exception *)v13;
      if ((v13 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C)))
      {
        v20 = (JSC::Exception *)JSC::Exception::create((uint64_t)v10, (JSC::VM *)v13, 0, v14, v15, v16, v17, v18);
      }
      JSC::VM::throwException(v10, this, v20, v19, v14, v15, v16, v17, v18);
      v28 = v41;
      v41 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
        {
          WTF::StringImpl::~StringImpl(v28, v21, v22, v23, v24, v25, v26, v27);
          WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
        }
        else
        {
          *(_DWORD *)v28 -= 2;
        }
      }
      return 0;
    }
    return JSC::JSBigInt::truncateAndSubFromPowerOfTwo<JSC::HeapBigIntImpl>((JSC::VM **)this, a2, a3, 0, a5, a6, a7, a8);
  }
  else
  {
    if (a2 >> 20)
      return (JSC::JSBigInt *)a3;
    v29 = (a2 + 63) >> 6;
    if (v8 < (int)v29)
      return (JSC::JSBigInt *)a3;
    if (v8 == (_DWORD)v29)
    {
      if ((a2 & 0x3F) == 0)
        return (JSC::JSBigInt *)a3;
      v31 = v29 - 1;
      v32 = *(_QWORD *)(a3 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (!(*(_QWORD *)(v32 + 8 * v31) >> (a2 & 0x3F)))
        return (JSC::JSBigInt *)a3;
    }
    return JSC::JSBigInt::truncateToNBits<JSC::HeapBigIntImpl>((JSC::VM **)this, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::JSBigInt::toBigUInt64Heap(JSC::JSBigInt *this, JSC::JSBigInt *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (!*((_DWORD *)this + 2))
    return 0;
  v2 = *((_QWORD *)this + 3);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v2 = (v2 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v3 = *(_QWORD *)v2;
  if (*((_BYTE *)this + 16))
    return -v3;
  else
    return v3;
}

uint64_t JSC::JSBigInt::concurrentHash(JSC::JSBigInt *this)
{
  return 0;
}

uint64_t JSC::JSBigInt::hashSlow(JSC::JSBigInt *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v1 = *((_QWORD *)this + 3);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v1 = (v1 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v2 = *((unsigned int *)this + 2);
  if (*((_BYTE *)this + 16))
    v3 = -1640531526;
  else
    v3 = -1640531527;
  v4 = (v3 ^ (v3 << 16)) + ((v3 ^ (v3 << 16)) >> 11);
  if ((_DWORD)v2)
  {
    do
    {
      v5 = *(_QWORD *)v1;
      v1 += 8;
      v6 = (v5 >> 5) & 0x7FFF800 ^ ((v4 + (unsigned __int16)v5) << 16) ^ (v4 + (unsigned __int16)v5);
      v7 = v6 + WORD2(v5) + (v6 >> 11);
      v8 = (v5 >> 37) & 0x7FFF800 ^ (v7 << 16);
      v4 = (v8 ^ v7) + ((v8 ^ v7) >> 11);
      --v2;
    }
    while (v2);
  }
  v9 = (v4 ^ (8 * v4)) + ((v4 ^ (8 * v4)) >> 5);
  v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
  LODWORD(v11) = v10 ^ (v10 << 10);
  if ((_DWORD)v11)
    v11 = v11;
  else
    v11 = 0x800000;
  *((_DWORD *)this + 3) = v11;
  return v11;
}

uint64_t JSC::JSBoundFunction::customHasInstance(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;

  v10 = *(unsigned int **)(a1 + 32);
  v11 = *((_QWORD *)a2 + 7);
  v13 = JSC::JSObject::get(v10, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2688), a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v11 + 80))
    return JSC::JSObject::hasInstance(v10, a2, a3, v13, v14, v15, v16, v17);
  v19 = *(_DWORD *)(v11 + 80);
  if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
  {
    v20 = v13;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
    v13 = v20;
  }
  if (*(_QWORD *)(v11 + 16))
    return 0;
  else
    return JSC::JSObject::hasInstance(v10, a2, a3, v13, v14, v15, v16, v17);
}

void JSC::JSBoundFunction::visitChildren(JSC::JSBoundFunction *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;

  JSC::JSCallee::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if ((v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)((v16 & 0xFFFFFFFFFFFFFFFELL) - 79) & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_6:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_7;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16 & 0xFFFFFFFFFFFFFFFELL, 0, v11, v12, v13, v14, v15);
  }
LABEL_7:
  v18 = *((_QWORD *)this + 4);
  if (!v18)
    goto LABEL_13;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    v19 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_12:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_13;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, v11, v12, v13, v14, v15);
LABEL_13:
  v20 = *((_QWORD *)this + 5);
  if ((v20 & 0xFFFE000000000002) == 0 && v20 != 0)
  {
    if ((v20 & 8) != 0)
    {
      if ((*(_BYTE *)(v20 - 79) & 1) == 0)
        goto LABEL_57;
    }
    else
    {
      v22 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != v22)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), v22, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) == 0)
        goto LABEL_57;
    }
    if (!*((_QWORD *)a2 + 21))
      goto LABEL_22;
LABEL_57:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, 0, v11, v12, v13, v14, v15);
  }
LABEL_22:
  v23 = *((_QWORD *)this + 6);
  if ((v23 & 0xFFFE000000000002) == 0 && v23)
  {
    if ((v23 & 8) != 0)
    {
      if ((*(_BYTE *)(v23 - 79) & 1) == 0)
        goto LABEL_59;
    }
    else
    {
      v24 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v23 & 0xFFFFFFFFFFFFC000 | 0x20) != v24)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v23 & 0xFFFFFFFFFFFFC000), v24, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v23 & 0xFFFFFFFFFFFFC000) + 8 * ((v23 >> 10) & 0xF) + 0x28) >> (v23 >> 4)) & 1) == 0)
        goto LABEL_59;
    }
    if (!*((_QWORD *)a2 + 21))
      goto LABEL_29;
LABEL_59:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v23, 0, v11, v12, v13, v14, v15);
  }
LABEL_29:
  v25 = *((_QWORD *)this + 7);
  if ((v25 & 0xFFFE000000000002) == 0 && v25)
  {
    if ((v25 & 8) != 0)
    {
      if ((*(_BYTE *)(v25 - 79) & 1) == 0)
        goto LABEL_61;
    }
    else
    {
      v26 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 0x20) != v26)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000), v26, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v25 & 0xFFFFFFFFFFFFC000) + 8 * ((v25 >> 10) & 0xF) + 0x28) >> (v25 >> 4)) & 1) == 0)
        goto LABEL_61;
    }
    if (!*((_QWORD *)a2 + 21))
      goto LABEL_36;
LABEL_61:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v25, 0, v11, v12, v13, v14, v15);
  }
LABEL_36:
  v27 = *((_QWORD *)this + 8);
  if ((v27 & 0xFFFE000000000002) == 0 && v27)
  {
    if ((v27 & 8) != 0)
    {
      if ((*(_BYTE *)(v27 - 79) & 1) != 0)
        goto LABEL_42;
    }
    else
    {
      v28 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v27 & 0xFFFFFFFFFFFFC000 | 0x20) != v28)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v27 & 0xFFFFFFFFFFFFC000), v28, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v27 & 0xFFFFFFFFFFFFC000) + 8 * ((v27 >> 10) & 0xF) + 0x28) >> (v27 >> 4)) & 1) != 0)
      {
LABEL_42:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_43;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v27, 0, v11, v12, v13, v14, v15);
  }
LABEL_43:
  v29 = *((_QWORD *)this + 9);
  if (!v29)
    return;
  if ((v29 & 8) != 0)
  {
    if ((*(_BYTE *)(v29 - 79) & 1) == 0)
      goto LABEL_55;
  }
  else
  {
    v30 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v29 & 0xFFFFFFFFFFFFC000 | 0x20) != v30)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v29 & 0xFFFFFFFFFFFFC000), v30, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v29 & 0xFFFFFFFFFFFFC000) + 8 * ((v29 >> 10) & 0xF) + 0x28) >> (v29 >> 4)) & 1) == 0)
      goto LABEL_55;
  }
  if (*((_QWORD *)a2 + 21))
LABEL_55:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v29, 0, v11, v12, v13, v14, v15);
}

uint64_t JSC::JSBoundFunction::visitChildren(JSC::JSBoundFunction *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;
  char v12;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    v10[0] = a2;
    v10[1] = this;
    v12 = 0;
    v11 = v7;
    *((_QWORD *)a2 + 11) = v10;
    JSC::JSCallee::visitChildren(this, a2, a3);
    (*(void (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL);
    *(_QWORD *)(v10[0] + 88) = v11;
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 4));
    if ((*((_QWORD *)this + 5) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 6) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 7) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 8) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 9));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::boundThisNoArgsFunctionCall(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  int v60;
  char v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD v64[4];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v10 = *((_QWORD *)a2 + 3);
  v61 = 0;
  v62 = 0x800000000;
  v63 = (_OWORD *)((char *)v64 + 8);
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v11 = *(_DWORD *)(v10 + 88);
  v12 = v11 + *((_DWORD *)a2 + 8);
  v13 = (v12 - 1);
  if (v12 == 1)
    goto LABEL_52;
  if (v13 >= 9
    && ((v13 & 0x80000000) != 0
     || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v62, v13)))
  {
    v61 = 1;
  }
  if (v11)
  {
    v14 = *(unsigned int *)(v10 + 88);
    if ((_DWORD)v14)
    {
      v15 = (uint64_t *)(v10 + 48);
      if (v14 > 3)
      {
        v16 = 0;
        v17 = 8 * v14;
        while (1)
        {
          v18 = *v15 + v16;
          if ((*(_BYTE *)(*v15 + 4) & 0xE) == 6)
            v19 = *(_QWORD *)(v18 + 16) + 0x2000000000000;
          else
            v19 = *(_QWORD *)(v18 + 16);
          v20 = v62;
          if ((_DWORD)v62 == HIDWORD(v62))
          {
            if (!(v62 >> 30)
              && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v62, 2 * (int)v62))
            {
              v20 = v62;
LABEL_22:
              *((_QWORD *)v63 + v20) = v19;
              LODWORD(v62) = v20 + 1;
              if (!*(_QWORD *)&v64[0] && (v19 & 0xFFFE000000000002) == 0 && v19 != 0)
              {
                v23 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v19 & 8) != 0)
                  v23 = (_QWORD *)(v19 - 16);
                *(_QWORD *)&v64[0] = *v23 + 560;
                v59 = &v62;
                WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v64[0], (uint64_t *)&v59, a4, a5, a6, a7, a8, (uint64_t)&v66);
              }
              goto LABEL_16;
            }
            v61 = 1;
          }
          else
          {
            if (v63 != (_OWORD *)((char *)v64 + 8) && v63 != 0)
              goto LABEL_22;
            *((_QWORD *)v63 + v62) = v19;
            LODWORD(v62) = v20 + 1;
          }
LABEL_16:
          v16 += 8;
          if (v17 == v16)
            goto LABEL_50;
        }
      }
      do
      {
        v25 = *v15++;
        v24 = v25;
        v26 = v62;
        if ((_DWORD)v62 == HIDWORD(v62))
        {
          if (!(v62 >> 30)
            && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v62, 2 * (int)v62))
          {
            v26 = v62;
LABEL_44:
            *((_QWORD *)v63 + v26) = v24;
            LODWORD(v62) = v26 + 1;
            if (!*(_QWORD *)&v64[0] && (v24 & 0xFFFE000000000002) == 0 && v24)
            {
              v28 = (_QWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v24 & 8) != 0)
                v28 = (_QWORD *)(v24 - 16);
              *(_QWORD *)&v64[0] = *v28 + 560;
              v59 = &v62;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v64[0], (uint64_t *)&v59, a4, a5, a6, a7, a8, (uint64_t)&v66);
            }
            goto LABEL_38;
          }
          v61 = 1;
        }
        else
        {
          if (v63 != (_OWORD *)((char *)v64 + 8) && v63 != 0)
            goto LABEL_44;
          *((_QWORD *)v63 + v62) = v24;
          LODWORD(v62) = v26 + 1;
        }
LABEL_38:
        --v14;
      }
      while (v14);
    }
  }
LABEL_50:
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v44 = 0;
    v45 = 1;
    do
    {
      v46 = *(_QWORD *)((char *)a2 + (((v44 << 32) + 0x600000000) >> 29));
      v47 = v62;
      if ((_DWORD)v62 == HIDWORD(v62))
      {
        if (!(v62 >> 30)
          && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v62, 2 * (int)v62))
        {
          v47 = v62;
LABEL_81:
          *((_QWORD *)v63 + v47) = v46;
          LODWORD(v62) = v47 + 1;
          if (!*(_QWORD *)&v64[0] && (v46 & 0xFFFE000000000002) == 0 && v46 != 0)
          {
            v51 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v46 & 8) != 0)
              v51 = (_QWORD *)(v46 - 16);
            *(_QWORD *)&v64[0] = *v51 + 560;
            v59 = &v62;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v64[0], (uint64_t *)&v59, a4, a5, a6, a7, a8, (uint64_t)&v66);
          }
          goto LABEL_75;
        }
        v61 = 1;
      }
      else
      {
        if (v63 != (_OWORD *)((char *)v64 + 8) && v63 != 0)
          goto LABEL_81;
        *((_QWORD *)v63 + v62) = v46;
        LODWORD(v62) = v47 + 1;
      }
LABEL_75:
      v44 = v45;
    }
    while (*((int *)a2 + 8) - 1 > (unint64_t)v45++);
  }
  if (v61)
  {
    __break(0xC471u);
    JUMPOUT(0x1989947E0);
  }
LABEL_52:
  v29 = *(_QWORD *)(v10 + 32);
  v30 = *(_QWORD *)(v29 + 24);
  if ((v30 & 1) != 0)
    v30 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v30 + 5) == 8
    || (*(_QWORD *)(v30 + 8)
      ? (v31 = WTF::RefPtr<JSC::JITCode,WTF::RawPtrTraits<JSC::JITCode>,WTF::DefaultRefDerefTraits<JSC::JITCode>>::unspecifiedBoolTypeInstance)
      : (v31 = 0),
        v31))
  {
    if (!*(_QWORD *)(v30 + 24))
    {
      v52 = *(unsigned int **)(v30 + 8);
      v53 = v52 + 2;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 + 1, v53));
      v55 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)v52 + 40))(v52, 1);
      do
      {
        v56 = __ldaxr(v53);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v53));
      if (!v57)
      {
        atomic_store(1u, v52 + 2);
        v58 = v55;
        (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 32))(v52);
        v55 = v58;
      }
      *(_QWORD *)(v30 + 24) = v55;
    }
  }
  if (*(_BYTE *)(v29 + 5) == 26)
  {
    v32 = *(_QWORD *)(v29 + 24);
    if ((v32 & 1) != 0)
      v32 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v32 + 5) == 8)
    {
      LOBYTE(v66) = 1;
      v67 = *(_QWORD *)(v32 + 40);
      LOBYTE(v68) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v29 & 0xFFFFFFFE)
                                                                               + 0x4C));
    }
    else
    {
      LOBYTE(v66) = 2;
      v33 = *(_QWORD *)(v29 + 16);
      v67 = v32;
      v68 = v33;
    }
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v29 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0x38))(&v66, v29, v13);
  }
  v34 = *(_QWORD *)(v10 + 40);
  v59 = (uint64_t *)v63;
  v60 = v62;
  v35 = JSC::call((uint64_t *)this, v29, (unsigned __int8 *)&v66, v34, (uint64_t)&v59, a6, a7, a8);
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v62, v36, v37, v38, v39, v40, v41, v42);
  return v35;
}

uint64_t JSC::boundFunctionCall(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  uint64_t v11;
  int v12;
  int v13;
  JSC::JSGlobalObject *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v50;
  unint64_t OutOfMemoryError;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  JSC::Exception *v58;
  uint64_t *v59;
  int v60;
  char v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD v64[4];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 3);
  v61 = 0;
  v62 = 0x800000000;
  v63 = (_OWORD *)((char *)v64 + 8);
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v12 = *(_DWORD *)(v11 + 88);
  v13 = v12 + *((_DWORD *)a2 + 8);
  v14 = (JSC::JSGlobalObject *)(v13 - 1);
  if (v13 == 1)
    goto LABEL_52;
  if (v14 >= 9
    && ((v14 & 0x80000000) != 0
     || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v62, v14)))
  {
    v61 = 1;
  }
  if (v12)
  {
    v15 = *(unsigned int *)(v11 + 88);
    if ((_DWORD)v15)
    {
      v16 = (uint64_t *)(v11 + 48);
      if (v15 > 3)
      {
        v17 = 0;
        v18 = 8 * v15;
        while (1)
        {
          v19 = *v16 + v17;
          if ((*(_BYTE *)(*v16 + 4) & 0xE) == 6)
            v20 = *(_QWORD *)(v19 + 16) + 0x2000000000000;
          else
            v20 = *(_QWORD *)(v19 + 16);
          v21 = v62;
          if ((_DWORD)v62 == HIDWORD(v62))
          {
            if (!(v62 >> 30)
              && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v62, 2 * (int)v62))
            {
              v21 = v62;
LABEL_22:
              *((_QWORD *)v63 + v21) = v20;
              LODWORD(v62) = v21 + 1;
              if (!*(_QWORD *)&v64[0] && (v20 & 0xFFFE000000000002) == 0 && v20 != 0)
              {
                v24 = (_QWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 8);
                if ((v20 & 8) != 0)
                  v24 = (_QWORD *)(v20 - 16);
                *(_QWORD *)&v64[0] = *v24 + 560;
                v59 = &v62;
                WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v64[0], (uint64_t *)&v59, a4, a5, a6, a7, a8, (uint64_t)&v66);
              }
              goto LABEL_16;
            }
            v61 = 1;
          }
          else
          {
            if (v63 != (_OWORD *)((char *)v64 + 8) && v63 != 0)
              goto LABEL_22;
            *((_QWORD *)v63 + v62) = v20;
            LODWORD(v62) = v21 + 1;
          }
LABEL_16:
          v17 += 8;
          if (v18 == v17)
            goto LABEL_50;
        }
      }
      do
      {
        v26 = *v16++;
        v25 = v26;
        v27 = v62;
        if ((_DWORD)v62 == HIDWORD(v62))
        {
          if (!(v62 >> 30)
            && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v62, 2 * (int)v62))
          {
            v27 = v62;
LABEL_44:
            *((_QWORD *)v63 + v27) = v25;
            LODWORD(v62) = v27 + 1;
            if (!*(_QWORD *)&v64[0] && (v25 & 0xFFFE000000000002) == 0 && v25)
            {
              v29 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v25 & 8) != 0)
                v29 = (_QWORD *)(v25 - 16);
              *(_QWORD *)&v64[0] = *v29 + 560;
              v59 = &v62;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v64[0], (uint64_t *)&v59, a4, a5, a6, a7, a8, (uint64_t)&v66);
            }
            goto LABEL_38;
          }
          v61 = 1;
        }
        else
        {
          if (v63 != (_OWORD *)((char *)v64 + 8) && v63 != 0)
            goto LABEL_44;
          *((_QWORD *)v63 + v62) = v25;
          LODWORD(v62) = v27 + 1;
        }
LABEL_38:
        --v15;
      }
      while (v15);
    }
  }
LABEL_50:
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v43 = 0;
    v44 = 1;
    do
    {
      v45 = *(_QWORD *)((char *)a2 + (((v43 << 32) + 0x600000000) >> 29));
      v46 = v62;
      if ((_DWORD)v62 == HIDWORD(v62))
      {
        if (!(v62 >> 30)
          && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v62, 2 * (int)v62))
        {
          v46 = v62;
LABEL_74:
          *((_QWORD *)v63 + v46) = v45;
          LODWORD(v62) = v46 + 1;
          if (!*(_QWORD *)&v64[0] && (v45 & 0xFFFE000000000002) == 0 && v45 != 0)
          {
            v50 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFC000 | 8);
            if ((v45 & 8) != 0)
              v50 = (_QWORD *)(v45 - 16);
            *(_QWORD *)&v64[0] = *v50 + 560;
            v59 = &v62;
            WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v64[0], (uint64_t *)&v59, a4, a5, a6, a7, a8, (uint64_t)&v66);
          }
          goto LABEL_68;
        }
        v61 = 1;
      }
      else
      {
        if (v63 != (_OWORD *)((char *)v64 + 8) && v63 != 0)
          goto LABEL_74;
        *((_QWORD *)v63 + v62) = v45;
        LODWORD(v62) = v46 + 1;
      }
LABEL_68:
      v43 = v44;
    }
    while (*((int *)a2 + 8) - 1 > (unint64_t)v44++);
  }
  if (!v61)
  {
LABEL_52:
    v30 = *(_QWORD *)(v11 + 32);
    if (*(_BYTE *)(v30 + 5) == 26)
    {
      v31 = *(_QWORD *)(v30 + 24);
      if ((v31 & 1) != 0)
        v31 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v31 + 5) == 8)
      {
        LOBYTE(v66) = 1;
        v67 = *(_QWORD *)(v31 + 40);
        LOBYTE(v68) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE)
                                                                                 + 0x4C));
      }
      else
      {
        LOBYTE(v66) = 2;
        v32 = *(_QWORD *)(v30 + 16);
        v67 = v31;
        v68 = v32;
      }
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, JSC::JSGlobalObject *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0x38))(&v66, *(_QWORD *)(v11 + 32), v14);
    }
    v33 = *(_QWORD *)(v11 + 40);
    v59 = (uint64_t *)v63;
    v60 = v62;
    v41 = JSC::call((uint64_t *)this, v30, (unsigned __int8 *)&v66, v33, (uint64_t)&v59, a6, a7, a8);
    goto LABEL_59;
  }
  OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, v14);
  v58 = (JSC::Exception *)OutOfMemoryError;
  if ((OutOfMemoryError & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16
                                          * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
  {
    v58 = (JSC::Exception *)JSC::Exception::create((uint64_t)v10, (JSC::VM *)OutOfMemoryError, 0, v52, v53, v54, v55, v56);
  }
  JSC::VM::throwException(v10, this, v58, v57, v52, v53, v54, v55, v56);
  v41 = 0;
LABEL_59:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v62, v34, v35, v36, v37, v38, v39, v40);
  return v41;
}

JSC::Exception *JSC::boundFunctionConstruct(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  JSC::JSGlobalObject *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  _QWORD *v50;
  uint64_t v51;
  int8x16_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::AtomStringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  double v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t OutOfMemoryError;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  JSC::Exception *v81;
  JSC::VM *v82;
  JSC::VM *v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD *v86;
  _OWORD v87[4];
  uint64_t v88;
  uint64_t v89[3];
  char *v90;
  int v91;
  uint64_t v92[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 3);
  v6 = *(_QWORD *)(v5 + 32);
  if ((v6 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v89[0]) = 0;
  }
  else
  {
    if (*(_BYTE *)(v6 + 5) == 26)
      JSC::JSFunction::getConstructData(v89, *(uint64_t **)(v5 + 32), a2);
    else
      (*(void (**)(uint64_t *__return_ptr, _QWORD))(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE)
                                                                              + 0x4C)
                                                            + 0x40))(v89, *(_QWORD *)(v5 + 32));
    if (LOBYTE(v89[0]))
    {
      LOBYTE(v84) = 0;
      v85 = 0x800000000;
      v13 = (char *)v87 + 8;
      v86 = (_OWORD *)((char *)v87 + 8);
      v88 = 0;
      memset(v87, 0, sizeof(v87));
      v14 = *(_DWORD *)(v5 + 88);
      v15 = v14 + *((_DWORD *)a2 + 8);
      v16 = (JSC::JSGlobalObject *)(v15 - 1);
      if (v15 == 1)
      {
        v27 = 0;
        goto LABEL_58;
      }
      v83 = v4;
      if (v16 >= 9
        && ((v16 & 0x80000000) != 0
         || JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v85, v16)))
      {
        LOBYTE(v84) = 1;
      }
      if (v14)
      {
        v17 = *(unsigned int *)(v5 + 88);
        if ((_DWORD)v17)
        {
          v18 = v5 + 48;
          if (v17 > 3)
          {
            v19 = 0;
            v20 = 8 * v17;
            while (1)
            {
              v21 = *(_QWORD *)v18 + v19;
              if ((*(_BYTE *)(*(_QWORD *)v18 + 4) & 0xE) == 6)
                v22 = *(_QWORD *)(v21 + 16) + 0x2000000000000;
              else
                v22 = *(_QWORD *)(v21 + 16);
              v23 = v85;
              if ((_DWORD)v85 == HIDWORD(v85))
              {
                if (!(v85 >> 30)
                  && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v85, 2 * (int)v85))
                {
                  v23 = v85;
LABEL_26:
                  *((_QWORD *)v86 + v23) = v22;
                  LODWORD(v85) = v23 + 1;
                  if (!*(_QWORD *)&v87[0] && (v22 & 0xFFFE000000000002) == 0 && v22 != 0)
                  {
                    v26 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 8);
                    if ((v22 & 8) != 0)
                      v26 = (_QWORD *)(v22 - 16);
                    *(_QWORD *)&v87[0] = *v26 + 560;
                    v92[0] = (uint64_t)&v85;
                    WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v87[0], v92, v8, v9, v10, v11, v12, (uint64_t)&v90);
                  }
                  goto LABEL_20;
                }
                LOBYTE(v84) = 1;
              }
              else
              {
                if (v86 != (_OWORD *)((char *)v87 + 8) && v86 != 0)
                  goto LABEL_26;
                *((_QWORD *)v86 + v85) = v22;
                LODWORD(v85) = v23 + 1;
              }
LABEL_20:
              v19 += 8;
              if (v20 == v19)
                goto LABEL_55;
            }
          }
          do
          {
            v29 = *(_QWORD *)v18;
            v18 += 8;
            v28 = v29;
            v30 = v85;
            if ((_DWORD)v85 == HIDWORD(v85))
            {
              if (!(v85 >> 30)
                && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v85, 2 * (int)v85))
              {
                v30 = v85;
LABEL_49:
                *((_QWORD *)v86 + v30) = v28;
                LODWORD(v85) = v30 + 1;
                if (!*(_QWORD *)&v87[0] && (v28 & 0xFFFE000000000002) == 0 && v28)
                {
                  v32 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFC000 | 8);
                  if ((v28 & 8) != 0)
                    v32 = (_QWORD *)(v28 - 16);
                  *(_QWORD *)&v87[0] = *v32 + 560;
                  v92[0] = (uint64_t)&v85;
                  WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v87[0], v92, v8, v9, v10, v11, v12, (uint64_t)&v90);
                }
                goto LABEL_43;
              }
              LOBYTE(v84) = 1;
            }
            else
            {
              if (v86 != (_OWORD *)((char *)v87 + 8) && v86 != 0)
                goto LABEL_49;
              *((_QWORD *)v86 + v85) = v28;
              LODWORD(v85) = v30 + 1;
            }
LABEL_43:
            --v17;
          }
          while (v17);
        }
      }
LABEL_55:
      if (*((_DWORD *)a2 + 8) == 1)
      {
LABEL_56:
        if ((_BYTE)v84)
        {
          OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, v16);
          v81 = (JSC::Exception *)OutOfMemoryError;
          if ((OutOfMemoryError & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                    + 0x4C)))
          {
            v82 = v83;
            v81 = (JSC::Exception *)JSC::Exception::create((uint64_t)v83, (JSC::VM *)OutOfMemoryError, 0, v75, v76, v77, v78, v79);
          }
          else
          {
            v82 = v83;
          }
          JSC::VM::throwException(v82, this, v81, v80, v75, v76, v77, v78, v79);
          v41 = 0;
          goto LABEL_62;
        }
        v13 = (char *)v86;
        v27 = v85;
LABEL_58:
        if (v5 == *((_QWORD *)a2 + 5))
          v33 = (WTF *)v6;
        else
          v33 = (WTF *)*((_QWORD *)a2 + 5);
        v90 = v13;
        v91 = v27;
        v41 = JSC::Interpreter::executeConstruct((JSC::VM *)(*((_QWORD *)this + 7) + 90560), (WTF::Thread *)v6, (unsigned __int8 *)v89, (uint64_t)&v90, v33, v10, v11, v12);
LABEL_62:
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v85, v34, v35, v36, v37, v38, v39, v40);
        return (JSC::Exception *)v41;
      }
      v43 = 0;
      v44 = 1;
      while (1)
      {
        v45 = *(_QWORD *)((char *)a2 + (((v43 << 32) + 0x600000000) >> 29));
        v46 = v85;
        if ((_DWORD)v85 == HIDWORD(v85))
        {
          if (!(v85 >> 30)
            && !JSC::MarkedVectorBase::expandCapacity((JSC::MarkedVectorBase *)&v85, 2 * (int)v85))
          {
            v46 = v85;
LABEL_78:
            *((_QWORD *)v86 + v46) = v45;
            LODWORD(v85) = v46 + 1;
            if (!*(_QWORD *)&v87[0] && (v45 & 0xFFFE000000000002) == 0 && v45 != 0)
            {
              v50 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFC000 | 8);
              if ((v45 & 8) != 0)
                v50 = (_QWORD *)(v45 - 16);
              *(_QWORD *)&v87[0] = *v50 + 560;
              v92[0] = (uint64_t)&v85;
              WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::add(*(uint64_t **)&v87[0], v92, v8, v9, v10, v11, v12, (uint64_t)&v90);
            }
            goto LABEL_72;
          }
          LOBYTE(v84) = 1;
        }
        else
        {
          if (v86 != (_OWORD *)((char *)v87 + 8) && v86 != 0)
            goto LABEL_78;
          *((_QWORD *)v86 + v85) = v45;
          LODWORD(v85) = v46 + 1;
        }
LABEL_72:
        v43 = v44;
        if (*((int *)a2 + 8) - 1 <= (unint64_t)v44++)
          goto LABEL_56;
      }
    }
  }
  v51 = WTF::fastCompactMalloc((WTF *)0x20);
  v52.i64[0] = 0x1400000002;
  *(_QWORD *)v51 = 0x1400000002;
  *(_QWORD *)(v51 + 8) = "is not a constructor";
  *(_DWORD *)(v51 + 16) = 4;
  v84 = v51;
  v64 = JSC::createError((unint64_t)this, v5, &v84, (uint64_t)JSC::defaultSourceAppender, v53, v54, v55, v56, v52);
  if (*(_DWORD *)v51 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v51, v57, v58, v59, v60, v61, v62, v63);
    WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
  }
  else
  {
    *(_DWORD *)v51 -= 2;
  }
  if ((v64 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v64 & 0xFFFFFFFE) + 0x4C)))
  {
    v64 = JSC::Exception::create((uint64_t)v4, (JSC::VM *)v64, 0, v59, v60, v61, v62, v63);
  }
  return JSC::VM::throwException(v4, this, (JSC::Exception *)v64, v65, v59, v60, v61, v62, v63);
}

unint64_t JSC::isBoundFunction(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  unint64_t v3;

  v3 = *((_QWORD *)a2 + 6);
  if ((v3 & 0xFFFE000000000002) != 0)
    return 0xFFFE000000000000;
  else
    return (&JSC::JSBoundFunction::s_info == (char **)(16
                                                     * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C))) | 0xFFFE000000000000;
}

uint64_t JSC::hasInstanceBoundFunction(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;

  v9 = *((_QWORD *)a2 + 7);
  v10 = *(unsigned int **)(*((_QWORD *)a2 + 6) + 32);
  v11 = *((_QWORD *)this + 7);
  v13 = JSC::JSObject::get(v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2688), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v19 = *(_DWORD *)(v11 + 80);
    if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
    {
      v20 = v13;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
      v13 = v20;
    }
    if (*(_QWORD *)(v11 + 16))
      return 6;
  }
  if (JSC::JSObject::hasInstance(v10, this, v9, v13, v14, v15, v16, v17))
    return 7;
  return 6;
}

uint64_t JSC::JSBoundFunction::create(JSC::VM *a1, unint64_t RareData, JSC::ExecutableBase *a3, uint64_t a4, char *__src, uint64_t a6, unint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  JSC::ExecutableBase *v14;
  uint64_t v15;
  unint64_t *v17;
  BOOL v18;
  unsigned __int8 v19;
  unint64_t HostFunction;
  JSC::ExecutableBase *v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  JSC::Heap *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  WTF::StringImpl *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t SlowCase;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  JSC::VM *v80;
  unsigned __int8 v81;
  WTF::StringImpl *v82;
  __int128 __dst;
  uint64_t v84;
  uint64_t v85;

  v9 = a7;
  v10 = a9.i64[0];
  v11 = a6;
  v13 = a4;
  v14 = a3;
  v15 = RareData;
  v85 = *MEMORY[0x1E0C80C00];
  v80 = a1;
  if (a7)
  {
    if ((*(_BYTE *)(a7 + 8) & 1) != 0)
      JSC::JSRopeString::resolveRope(a7, (JSC::JSGlobalObject *)RareData, (uint64_t)a3, a4, a9, (uint64_t)__src, a6, a7, a8);
    if (*((_DWORD *)a1 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(a1, RareData, (uint64_t)a3, a4, (uint64_t)__src, a6, a7, a8))
    {
      return 0;
    }
  }
  v17 = (unint64_t *)((char *)a1 + 40136);
  __dst = 0uLL;
  v84 = 0;
  if (v11)
  {
    v29 = v11;
    if (v11 <= 3uLL)
    {
      memcpy(&__dst, __src, 8 * v11);
      goto LABEL_3;
    }
    v78 = v13;
    if (v11 > 0x10000000)
      goto LABEL_108;
    v31 = *((_QWORD *)a1 + 5207);
    RareData = 8 * v11;
    a3 = (JSC::ExecutableBase *)((RareData + 31) & 0xFFFFFFFF0);
    if ((unint64_t)a3 <= 0x1F60
      && (v32 = *(_QWORD *)((char *)a1 + (((RareData + 31) >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
    {
      v75 = v9;
      v33 = *(unsigned int *)(v32 + 60);
      v34 = *(_QWORD *)(v32 + 24);
      if (v34 < *(_QWORD *)(v32 + 32))
      {
        *(_QWORD *)(v32 + 24) = v34 + v33;
        v9 = v75;
        goto LABEL_42;
      }
      v34 = *(_QWORD *)(v32 + 40);
      if ((v34 & 1) == 0)
      {
        v63 = *(_QWORD *)(v34 + 8) ^ *(_QWORD *)(v32 + 48);
        *(_QWORD *)(v32 + 32) = v34 + HIDWORD(v63);
        *(_QWORD *)(v32 + 40) = v34 + (int)v63;
        *(_QWORD *)(v32 + 24) = v34 + v33;
        v9 = v75;
        goto LABEL_43;
      }
      v68 = *((_QWORD *)a1 + 5207);
      JSC::sanitizeStackForVM(a1, (JSC::VM *)RareData, (uint64_t)a3, a4, (uint64_t)__src, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v32, (uint64_t)a1 + 192, v33, 0, 1, v69, v70, v71);
      v31 = v68;
      RareData = 8 * v11;
      v9 = v75;
    }
    else
    {
      v59 = *((_QWORD *)a1 + 5207);
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a1 + 10792, a1, (unint64_t)a3, 0, (uint64_t)__src, a6, a7, a8);
      v31 = v59;
      RareData = 8 * v11;
    }
    v34 = SlowCase;
LABEL_42:
    if (v34)
    {
LABEL_43:
      *(_DWORD *)v34 = 0;
      v35 = *(_DWORD *)(v31 + 8);
      *(_DWORD *)v34 = v31 >> 4;
      *(_DWORD *)(v34 + 4) = v35;
      *(_DWORD *)(v34 + 8) = v11;
      *(_DWORD *)(v34 + 12) = v11;
      if ((*(_BYTE *)(v34 + 4) & 0xE) == 8)
        bzero((void *)(v34 + 16), RareData);
      v36 = v9;
      if (*((_BYTE *)a1 + 755))
        __dmb(0xAu);
      v37 = 0;
      do
      {
        v38 = *(_QWORD *)&__src[v37];
        if ((*(_BYTE *)(v34 + 4) & 0xE) == 6)
        {
          *(double *)a9.i64 = (double)(int)v38;
          if (v38 <= 0xFFFDFFFFFFFFFFFFLL)
            a9.i64[0] = v38 - 0x2000000000000;
          *(_QWORD *)(v34 + v37 + 16) = a9.i64[0];
        }
        else
        {
          *(_QWORD *)(v34 + v37 + 16) = v38;
          if (v38)
            v39 = (v38 & 0xFFFE000000000002) == 0;
          else
            v39 = 0;
          if (v39 && *((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(v34 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, v34);
        }
        v37 += 8;
        --v29;
      }
      while (v29);
      *(_QWORD *)&__dst = v34;
      v9 = v36;
      v13 = v78;
      goto LABEL_3;
    }
LABEL_108:
    JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)v15, (JSC::JSGlobalObject *)&v80);
    return 0;
  }
LABEL_3:
  if (((unint64_t)v14 & 0xFFFE000000000002) != 0)
  {
    v81 = 1;
LABEL_112:
    HostFunction = JSC::VM::getBoundFunction(BOOL)::$_0::operator()((uint64_t *)a1, &v81, (unint64_t *)a1 + 5233, a4, (uint64_t)__src, a6, a7, a8);
    goto LABEL_13;
  }
  if (v14)
    v18 = *((_BYTE *)v14 + 5) == 26;
  else
    v18 = 0;
  v19 = !v18;
  v81 = v19;
  if (!v18)
    goto LABEL_112;
  HostFunction = *((_QWORD *)a1 + 5232);
  if (!HostFunction)
  {
    v82 = 0;
    HostFunction = JSC::VM::getHostFunction((uint64_t *)a1, (uint64_t)JSC::boundThisNoArgsFunctionCall, 1, 101, (unint64_t)JSC::boundFunctionConstruct, 0, &v82, a8);
    v30 = v82;
    v82 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::~StringImpl(v30, (WTF::AtomStringImpl *)RareData, (uint64_t)a3, a4, (uint64_t)__src, a6, a7, a8);
        WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    *((_QWORD *)a1 + 5232) = HostFunction;
  }
LABEL_13:
  if (*((_BYTE *)v14 + 5) == 26)
    v21 = v14;
  else
    v21 = 0;
  if (v21)
  {
    v22 = *(_QWORD *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x30);
    if (!v22)
      v22 = *((_QWORD *)v21 + 2);
    if (v22 == *(_QWORD *)(v15 + 664))
    {
      v23 = *(_DWORD *)(v15 + 968);
      if (v23)
        v24 = 16 * (v23 & 0xFFFFFFFE);
      else
        v24 = 0;
      goto LABEL_23;
    }
  }
  v79 = v13;
  if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
  {
    v48 = (*(uint64_t (**)(JSC::ExecutableBase *, uint64_t))(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                      + 0x4C)
                                                                    + 0xB0))(v14, v15);
  }
  else
  {
    v48 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
    if (!v48)
      v48 = *((_QWORD *)v14 + 2);
  }
  if (*((_DWORD *)a1 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(a1, RareData, (uint64_t)a3, a4, (uint64_t)__src, a6, a7, a8))
  {
    v24 = 0;
LABEL_106:
    v13 = v79;
    goto LABEL_23;
  }
  if (v21)
  {
    v49 = *((_QWORD *)v21 + 3);
    v50 = (v49 & 1) != 0
        ? v49 & 0xFFFFFFFFFFFFFFFELL
        : JSC::JSFunction::allocateRareData((JSC::VM **)v21, a1, a3, a4, (uint64_t)__src, a6, a7, a8);
    v51 = *(_DWORD *)(v50 + 44) & 0xFFFFFFFE;
    if ((_DWORD)v51)
    {
      v24 = 16 * v51;
      if (*(_QWORD *)(16 * v51 + 0x30) == v48 && *(_QWORD *)(16 * v51 + 0x28) == v15)
        goto LABEL_106;
    }
  }
  v52 = *(_DWORD *)(v15 + 968);
  if (v52)
    v53 = 16 * (v52 & 0xFFFFFFFE);
  else
    v53 = 0;
  if ((v48 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v48 + 5) < 0x17u
    || *(_QWORD *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE) + 0x28) != v15)
  {
    LODWORD(v82) = *(unsigned __int8 *)(v53 + 9) | (*(unsigned __int16 *)(v53 + 12) << 16) | (*(unsigned __int8 *)(v53 + 10) << 8);
    v54 = *(unsigned int *)(v53 + 76);
    v55 = 16 * v54;
    if ((v48 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v48 + 5) >= 0x17u && v48 != 0)
    {
      v57 = 16 * v54;
      JSC::JSObject::didBecomePrototype(v48, a1, *(double *)a9.i64, (uint64_t)a3, v53, (uint64_t)__src, v55, a7, a8);
      v55 = v57;
    }
    v24 = *v17;
    if (*v17 >= *((_QWORD *)a1 + 5018))
    {
      v76 = v55;
      v24 = *((_QWORD *)a1 + 5019);
      if ((v24 & 1) != 0)
      {
        JSC::sanitizeStackForVM(a1, (JSC::VM *)RareData, (uint64_t)a3, v53, (uint64_t)__src, v55, a7, a8);
        v24 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a1 + 40112, (uint64_t)a1 + 192, 128, 0, 0, v72, v73, v74);
      }
      else
      {
        v64 = *(_QWORD *)(v24 + 8) ^ *((_QWORD *)a1 + 5020);
        *((_QWORD *)a1 + 5018) = v24 + HIDWORD(v64);
        *((_QWORD *)a1 + 5019) = v24 + (int)v64;
        *v17 = v24 + 128;
      }
      v55 = v76;
    }
    else
    {
      *v17 = v24 + 128;
    }
    *(_DWORD *)v24 = 0;
    JSC::Structure::Structure(v24, (uint64_t)a1, v15, v48, (uint64_t)&v82, v55, 0, 0);
    if (*((_BYTE *)a1 + 755))
      __dmb(0xAu);
  }
  else
  {
    v24 = JSC::StructureCache::emptyStructureForPrototypeFromBaseStructure((JSC::StructureCache *)(v15 + 1968), (JSC::JSGlobalObject *)v15, (JSC::JSObject *)v48, (JSC::Structure *)v53, *(double *)a9.i64);
  }
  v13 = v79;
  if (v21)
  {
    v58 = *((_QWORD *)v21 + 3);
    if ((v58 & 1) != 0)
      RareData = v58 & 0xFFFFFFFFFFFFFFFELL;
    else
      RareData = JSC::JSFunction::allocateRareData((JSC::VM **)v21, a1, a3, a4, (uint64_t)__src, a6, a7, a8);
    if (v24)
    {
      *(_DWORD *)(RareData + 44) = v24 >> 4;
      if (*((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(RareData + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a1 + 192, RareData);
    }
    else
    {
      *(_DWORD *)(RareData + 44) = 0;
    }
  }
LABEL_23:
  if (*((_DWORD *)a1 + 20))
  {
    v61 = *((_DWORD *)a1 + 20);
    if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)a1 + 64), 7u, (uint64_t)a3, a4, (uint64_t)__src, a6, a7, a8);
    if (*((_QWORD *)a1 + 2))
      return 0;
  }
  v25 = (JSC::Heap *)*((_QWORD *)a1 + 5047);
  if (!v25)
    v25 = JSC::GCClient::Heap::boundFunctionSpaceSlow((JSC::Heap **)a1 + 4694);
  v26 = *((_QWORD *)v25 + 3);
  if (v26 < *((_QWORD *)v25 + 4))
    goto LABEL_27;
  v26 = *((_QWORD *)v25 + 5);
  if ((v26 & 1) == 0)
  {
    v62 = *(_QWORD *)(v26 + 8) ^ *((_QWORD *)v25 + 6);
    *((_QWORD *)v25 + 4) = v26 + HIDWORD(v62);
    *((_QWORD *)v25 + 5) = v26 + (int)v62;
LABEL_27:
    *((_QWORD *)v25 + 3) = v26 + 96;
    goto LABEL_28;
  }
  JSC::sanitizeStackForVM(a1, (JSC::VM *)RareData, (uint64_t)a3, a4, (uint64_t)__src, a6, a7, a8);
  v26 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v25, (uint64_t)a1 + 192, 96, 0, 0, v65, v66, v67);
LABEL_28:
  *(_DWORD *)v26 = 0;
  v77 = __dst;
  v27 = v84;
  result = JSC::JSCallee::JSCallee(v26, (uint64_t)a1, v15, v24);
  *(_QWORD *)(result + 24) = HostFunction;
  *(_QWORD *)(result + 32) = v14;
  *(_QWORD *)(result + 40) = v13;
  *(_QWORD *)(result + 80) = v10;
  *(_DWORD *)(result + 88) = v11;
  *(_BYTE *)(result + 92) = 2;
  *(_OWORD *)(result + 48) = v77;
  *(_QWORD *)(result + 64) = v27;
  *(_QWORD *)(result + 72) = v9;
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t JSC::JSBoundFunction::createRaw(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v16;
  unint64_t HostFunction;
  JSC::Heap *v18;
  unint64_t SlowCase;
  int v20;
  unint64_t v21;
  uint64_t result;
  WTF::StringImpl *v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;

  v12 = a4;
  v16 = a1 + 40376;
  HostFunction = *(_QWORD *)(a1 + 41856);
  if (!HostFunction)
  {
    v36 = 0;
    HostFunction = JSC::VM::getHostFunction((uint64_t *)a1, (uint64_t)JSC::boundThisNoArgsFunctionCall, 1, 101, (unint64_t)JSC::boundFunctionConstruct, 0, &v36, a8);
    v23 = v36;
    v36 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
      {
        WTF::StringImpl::~StringImpl(v23, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v23 -= 2;
      }
    }
    *(_QWORD *)(v16 + 1480) = HostFunction;
  }
  v18 = *(JSC::Heap **)v16;
  if (!v18)
    v18 = JSC::GCClient::Heap::boundFunctionSpaceSlow((JSC::Heap **)(a1 + 37552));
  SlowCase = *((_QWORD *)v18 + 3);
  if (SlowCase < *((_QWORD *)v18 + 4))
    goto LABEL_5;
  SlowCase = *((_QWORD *)v18 + 5);
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v18 + 6);
    *((_QWORD *)v18 + 4) = SlowCase + HIDWORD(v32);
    *((_QWORD *)v18 + 5) = SlowCase + (int)v32;
LABEL_5:
    *((_QWORD *)v18 + 3) = SlowCase + 96;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v18, a1 + 192, 96, 0, 0, v33, v34, v35);
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v20 = *((_DWORD *)a2 + 242);
  if (v20)
    v21 = 16 * (v20 & 0xFFFFFFFE);
  else
    v21 = 0;
  result = JSC::JSCallee::JSCallee(SlowCase, a1, (uint64_t)a2, v21);
  *(_QWORD *)(result + 24) = HostFunction;
  *(_QWORD *)(result + 32) = a3;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0x7FF8000000000000;
  *(_DWORD *)(result + 88) = v12;
  *(_BYTE *)(result + 92) = 2;
  *(_QWORD *)(result + 40) = a5;
  *(_QWORD *)(result + 48) = a6;
  *(_QWORD *)(result + 56) = a7;
  *(_QWORD *)(result + 64) = a8;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::JSBoundFunction::boundArgsCopy(JSC::JSBoundFunction *this, JSC::JSGlobalObject *a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  unint64_t v20;
  char *v21;
  unint64_t j;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t i;
  int v27;
  int v29;
  int v30;

  v11 = *((_QWORD *)a2 + 7);
  v18 = JSC::constructEmptyArray(*(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), 0, 0, 0, a6, a7, a8, a9, a3);
  if (*(_DWORD *)(v11 + 80))
  {
    v29 = *(_DWORD *)(v11 + 80);
    if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v20 = *((unsigned int *)this + 22);
  if ((_DWORD)v20)
  {
    v21 = (char *)this + 48;
    if (v20 <= 3)
    {
      for (i = 0; i < v20; ++i)
      {
        JSC::JSArray::push(v18, (JSC::VM **)a2, *(_QWORD *)&v21[8 * i], v13, v14, v15, v16, v17, v19);
        if (*(_DWORD *)(v11 + 80))
        {
          v27 = *(_DWORD *)(v11 + 80);
          if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
          if (*(_QWORD *)(v11 + 16))
            break;
        }
      }
    }
    else
    {
      for (j = 0; j < v20; ++j)
      {
        v23 = *(_QWORD *)v21 + 16;
        if ((*(_BYTE *)(*(_QWORD *)v21 + 4) & 0xE) == 6)
          v24 = *(_QWORD *)(v23 + 8 * j) + 0x2000000000000;
        else
          v24 = *(_QWORD *)(v23 + 8 * j);
        JSC::JSArray::push(v18, (JSC::VM **)a2, v24, v13, v14, v15, v16, v17, v19);
        if (*(_DWORD *)(v11 + 80))
        {
          v25 = *(_DWORD *)(v11 + 80);
          if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
          if (*(_QWORD *)(v11 + 16))
            break;
        }
      }
    }
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v30 = *(_DWORD *)(v11 + 80);
    if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  return v18;
}

unint64_t JSC::JSBoundFunction::nameSlow(JSC::JSBoundFunction *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v9;
  JSC::JSGlobalObject *v11;
  char *v12;
  int v13;
  uint64_t v14;
  int v15;
  JSC::JSBoundFunction *v16;
  char **v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  int v25;
  WTF::StringImpl *v26;
  const WTF::String *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  int **v32;
  int *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::AtomStringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int8x16_t *v85;
  size_t v86;
  WTF::StringImpl *v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  int v120;
  char *v122;
  uint64_t v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  JSC::Exception *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  unint64_t v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF::StringImpl *v156[3];
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  const char *v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  uint64_t v164;

  v9 = a2;
  v11 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v12 = (char *)a2 + 64;
  v13 = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v13 + 1;
  if (!v13)
  {
    v14 = *((_QWORD *)a2 + 2);
    if (v14)
    {
      if (*((_QWORD *)a2 + 3) == v14)
      {
        *((_QWORD *)a2 + 2) = 0;
        v96 = (unsigned int *)((char *)a2 + 80);
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 & 0xFFFFFFEF, v96));
        *((_BYTE *)a2 + 86) = 1;
      }
    }
  }
  v15 = 0;
  v16 = this;
  while (1)
  {
    v16 = (JSC::JSBoundFunction *)*((_QWORD *)v16 + 4);
    v17 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C));
    if (v17 != &JSC::JSBoundFunction::s_info)
      break;
    ++v15;
    v18 = *((_QWORD *)v16 + 9);
    if (v18)
      goto LABEL_41;
  }
  v19 = *((_QWORD *)v11 + 7);
  v20 = (uint64_t *)(v19 + 41952);
  if (v17 != &JSC::JSRemoteFunction::s_info)
  {
    v21 = *((_QWORD *)v16 + 3);
    if ((v21 & 1) != 0)
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFFELL) + 48);
    else
      v22 = v21;
    v23 = *v20;
    v24 = *(WTF::StringImpl **)(*(_QWORD *)(v22 + 88) + 80);
    if (v24 == *(WTF::StringImpl **)(v23 + 104))
      v24 = *(WTF::StringImpl **)(v23 + 192);
    if (v24)
      *(_DWORD *)v24 += 2;
    v158 = v24;
    if ((v21 & 1) != 0)
      v21 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v25 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 88) + 50);
    if (v25 == 3)
    {
      if (v24)
        *(_DWORD *)v24 += 2;
      v157 = v24;
      v161 = "get ";
      v162 = 5;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v161, (uint64_t *)&v157, (int **)&v160);
      v26 = v160;
      if (!v160)
      {
        v156[0] = (WTF::StringImpl *)"Getter ";
        v156[1] = (WTF::StringImpl *)8;
        v163 = (WTF::StringImpl *)"name is too long";
        v164 = 17;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(v156, (uint64_t)&v163, (int **)&v159);
        if (!v159)
          goto LABEL_155;
LABEL_140:
        v131 = JSC::createOutOfMemoryError((unint64_t)v11, &v159, v27);
        v137 = (JSC::Exception *)v131;
        if ((v131 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v131 & 0xFFFFFFFE) + 0x4C)))
        {
          v137 = (JSC::Exception *)JSC::Exception::create(v19, (JSC::VM *)v131, 0, v132, v133, v134, v135, v136);
        }
        JSC::VM::throwException((JSC::VM *)v19, v11, v137);
        v138 = v159;
        v159 = 0;
        if (v138)
        {
          if (*(_DWORD *)v138 == 2)
          {
            WTF::StringImpl::~StringImpl(v138, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
          }
          else
          {
            *(_DWORD *)v138 -= 2;
          }
        }
        v139 = v160;
        v160 = 0;
        if (v139)
        {
          if (*(_DWORD *)v139 == 2)
          {
            WTF::StringImpl::~StringImpl(v139, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v140, v141, v142, v143, v144, v145, v146, v147);
          }
          else
          {
            *(_DWORD *)v139 -= 2;
          }
        }
      }
    }
    else
    {
      if (v25 != 4)
        goto LABEL_36;
      if (v24)
        *(_DWORD *)v24 += 2;
      v157 = v24;
      v161 = "set ";
      v162 = 5;
      WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v161, (uint64_t *)&v157, (int **)&v160);
      v26 = v160;
      if (!v160)
      {
        v156[0] = (WTF::StringImpl *)"Setter ";
        v156[1] = (WTF::StringImpl *)8;
        v163 = (WTF::StringImpl *)"name is too long";
        v164 = 17;
        WTF::tryMakeString<WTF::ASCIILiteral,WTF::ASCIILiteral>(v156, (uint64_t)&v163, (int **)&v159);
        if (!v159)
        {
LABEL_155:
          __break(0xC471u);
          JUMPOUT(0x198996088);
        }
        goto LABEL_140;
      }
    }
    v158 = v26;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::~StringImpl(v24, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
    v28 = v157;
    v157 = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
      {
        WTF::StringImpl::~StringImpl(v28, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
      }
      else
      {
        *(_DWORD *)v28 -= 2;
      }
    }
    if (*(_DWORD *)(v19 + 80))
    {
      v130 = *(_DWORD *)(v19 + 80);
      if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v19 + 64), 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v19 + 16))
      {
        v18 = 0;
LABEL_37:
        v158 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
          {
            WTF::StringImpl::~StringImpl(v26, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
          }
          else
          {
            *(_DWORD *)v26 -= 2;
          }
        }
        goto LABEL_40;
      }
    }
LABEL_36:
    v18 = JSC::jsString(v19, (JSC::VM *)&v158, a3, a4, a5, a6, a7, a8);
    v26 = v158;
    goto LABEL_37;
  }
  v18 = *((_QWORD *)v16 + 5);
  if (!v18)
    v18 = v20[2];
LABEL_40:
  if (*((_QWORD *)v9 + 2))
  {
    *((_QWORD *)v9 + 2) = 0;
    v118 = (unsigned int *)((char *)v9 + 80);
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 & 0xFFFFFFEF, v118));
    v18 = *((_QWORD *)v9 + 5246);
    if (v15)
      goto LABEL_42;
LABEL_110:
    v36 = v18;
    goto LABEL_111;
  }
LABEL_41:
  if (!v15)
    goto LABEL_110;
LABEL_42:
  memset(v156, 0, 21);
  do
  {
    if (((uint64_t)v156[2] & 0x80000000) == 0)
    {
      v29 = v156[1];
      if ((v156[1] || (v29 = v156[0]) != 0) && (*((_BYTE *)v29 + 16) & 4) == 0)
      {
        v30 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v156, (WTF::AtomStringImpl *)(LODWORD(v156[2]) + 6), a3, a4, a5, a6, a7, a8);
        if (v30)
        {
          *(_QWORD *)v30 = 0x6E0075006F0062;
          *(_DWORD *)(v30 + 8) = 2097252;
        }
      }
      else
      {
        v31 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v156, (WTF::AtomStringImpl *)(LODWORD(v156[2]) + 6), a3, a4, a5, a6, a7, a8);
        if (v31)
        {
          *(_WORD *)(v31 + 4) = 8292;
          *(_DWORD *)v31 = 1853189986;
        }
      }
    }
    --v15;
  }
  while (v15);
  v32 = (int **)(v18 + 8);
  if ((*(_BYTE *)(v18 + 8) & 1) != 0)
    v32 = JSC::JSRopeString::resolveRope(v18, v11, a3, a4, a9, a5, a6, a7, a8);
  if (*((_QWORD *)v9 + 2))
  {
    *((_QWORD *)v9 + 2) = 0;
    v98 = (unsigned int *)((char *)v9 + 80);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 & 0xFFFFFFEF, v98));
    goto LABEL_98;
  }
  v33 = *v32;
  if (!LODWORD(v156[2]) && !v156[1])
  {
    if (v33)
      *v33 += 2;
    v34 = v156[0];
    v156[0] = (WTF::StringImpl *)v33;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
      {
        WTF::StringImpl::~StringImpl(v34, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
      }
      else
      {
        *(_DWORD *)v34 -= 2;
      }
    }
    if (*v32)
      a2 = (JSC::VM *)(*v32)[1];
    else
      a2 = 0;
    LODWORD(v156[2]) = (_DWORD)a2;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_65;
    goto LABEL_98;
  }
  if (!v33)
  {
    v85 = 0;
    v86 = 0;
    goto LABEL_82;
  }
  v85 = (int8x16_t *)*((_QWORD *)v33 + 1);
  v86 = v33[1];
  if ((v33[4] & 4) != 0)
  {
LABEL_82:
    WTF::StringBuilder::append((uint64_t)v156, v85, v86, a4, a5, a6, a7, a8);
    goto LABEL_83;
  }
  WTF::StringBuilder::append((uint64_t)v156, v85, v86, a4, a5, a6, a7, a8);
LABEL_83:
  a2 = (JSC::VM *)LODWORD(v156[2]);
  if (((uint64_t)v156[2] & 0x80000000) == 0)
  {
LABEL_65:
    v35 = v156[0];
    if (v156[0])
      goto LABEL_66;
    if (v156[1] && *((_DWORD *)v156[1] + 1) > a2 + (a2 >> 2))
    {
      if ((*((_BYTE *)v156[1] + 16) & 4) != 0)
        WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)v156, a2, a3, a4, a5, a6, a7, a8);
      else
        WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)v156, a2, a3, a4, a5, a6, a7, a8);
      v87 = v156[0];
      v156[0] = v156[1];
      v156[1] = 0;
      if (v87)
      {
        if (*(_DWORD *)v87 == 2)
        {
          WTF::StringImpl::~StringImpl(v87, v78, v79, v80, v81, v82, v83, v84);
          WTF::fastFree(v88, v89, v90, v91, v92, v93, v94, v95);
        }
        else
        {
          *(_DWORD *)v87 -= 2;
        }
      }
    }
    WTF::StringBuilder::reifyString((WTF::StringBuilder *)v156);
    v35 = v156[0];
    if (v156[0])
LABEL_66:
      *(_DWORD *)v35 += 2;
    v163 = v35;
    v36 = JSC::jsNontrivialString((uint64_t)v9, (JSC::VM *)&v163, a3, a4, a5, a6, a7, a8);
    v37 = v163;
    v163 = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 2)
      {
        WTF::StringImpl::~StringImpl(v37, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
      else
      {
        *(_DWORD *)v37 -= 2;
      }
    }
    goto LABEL_99;
  }
LABEL_98:
  v36 = *((_QWORD *)v9 + 5246);
LABEL_99:
  v100 = v156[1];
  v156[1] = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  v101 = v156[0];
  v156[0] = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
    {
      WTF::StringImpl::~StringImpl(v101, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v110, v111, v112, v113, v114, v115, v116, v117);
    }
    else
    {
      *(_DWORD *)v101 -= 2;
    }
  }
LABEL_111:
  if (!v36)
  {
    *((_QWORD *)this + 9) = 0;
    goto LABEL_119;
  }
  if ((*(_BYTE *)(v36 + 8) & 1) != 0)
    JSC::JSRopeString::resolveRope(v36, v11, a3, a4, a9, a5, a6, a7, a8);
  if (*((_QWORD *)v9 + 2))
  {
    *((_QWORD *)v9 + 2) = 0;
    v126 = (unsigned int *)((char *)v9 + 80);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 & 0xFFFFFFEF, v126));
    v36 = *((_QWORD *)v9 + 5246);
    *((_QWORD *)this + 9) = v36;
    if (!v36)
      goto LABEL_119;
  }
  else
  {
    *((_QWORD *)this + 9) = v36;
  }
  if (*((_DWORD *)v9 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v9 + 192, (unint64_t)this);
LABEL_119:
  v120 = *((_DWORD *)v9 + 22) - 1;
  *((_DWORD *)v9 + 22) = v120;
  if (!v120 && v12[93377])
  {
    if (*((_BYTE *)v9 + 86))
    {
      v122 = v12 - 64;
      v123 = *((_QWORD *)v12 - 5);
      *((_QWORD *)v122 + 2) = v123;
      *((_QWORD *)v122 + 4) = v123;
      if (v123)
      {
        v124 = (unsigned int *)(v12 + 16);
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 | 0x10, v124));
      }
      if (v12[93379])
        v12[93378] = 1;
      *((_BYTE *)v9 + 86) = 0;
    }
    else
    {
      v128 = (unsigned int *)((char *)v9 + 80);
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 | 2, v128));
    }
  }
  return v36;
}

void JSC::JSBoundFunction::nameStringWithoutGCSlow(JSC::JSBoundFunction *this@<X0>, JSC::VM *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  WTF::StringImpl *v17;
  WTF::AtomStringImpl *v18;
  int *v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t *v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72[3];

  v10 = 0;
  while (1)
  {
    this = (JSC::JSBoundFunction *)*((_QWORD *)this + 4);
    if (&JSC::JSBoundFunction::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
      break;
    ++v10;
    v11 = *((_QWORD *)this + 9);
    if (v11)
    {
      v12 = *(WTF::StringImpl **)(v11 + 8);
      if ((v12 & 1) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198996998);
      }
      if (v12)
        *(_DWORD *)v12 += 2;
      if (!v10)
        goto LABEL_8;
      goto LABEL_10;
    }
  }
  JSC::JSFunction::nameWithoutGC((uint64_t *)v72, this, a2);
  v12 = v72[0];
  if (!v10)
  {
LABEL_8:
    *a9 = (int *)v12;
    return;
  }
LABEL_10:
  memset(v72, 0, 21);
  do
  {
    if (((uint64_t)v72[2] & 0x80000000) == 0)
    {
      v13 = v72[1];
      if ((v72[1] || (v13 = v72[0]) != 0) && (*((_BYTE *)v13 + 16) & 4) == 0)
      {
        v14 = WTF::StringBuilder::extendBufferForAppending<char16_t>((uint64_t)v72, (WTF::AtomStringImpl *)(LODWORD(v72[2]) + 6), a3, a4, a5, a6, a7, a8);
        if (v14)
        {
          *(_QWORD *)v14 = 0x6E0075006F0062;
          *(_DWORD *)(v14 + 8) = 2097252;
        }
      }
      else
      {
        v15 = WTF::StringBuilder::extendBufferForAppending<unsigned char>((uint64_t)v72, (WTF::AtomStringImpl *)(LODWORD(v72[2]) + 6), a3, a4, a5, a6, a7, a8);
        if (v15)
        {
          *(_WORD *)(v15 + 4) = 8292;
          *(_DWORD *)v15 = 1853189986;
        }
      }
    }
    --v10;
  }
  while (v10);
  if (LODWORD(v72[2]))
    v16 = 0;
  else
    v16 = v72[1] == 0;
  if (!v16)
  {
    if (v12)
    {
      v35 = (int8x16_t *)*((_QWORD *)v12 + 1);
      v36 = *((unsigned int *)v12 + 1);
      if ((*((_BYTE *)v12 + 16) & 4) == 0)
      {
        WTF::StringBuilder::append((uint64_t)v72, v35, v36, a4, a5, a6, a7, a8);
LABEL_43:
        v18 = (WTF::AtomStringImpl *)LODWORD(v72[2]);
        if (((uint64_t)v72[2] & 0x80000000) != 0)
          goto LABEL_44;
        goto LABEL_33;
      }
    }
    else
    {
      v35 = 0;
      v36 = 0;
    }
    WTF::StringBuilder::append((uint64_t)v72, v35, v36, a4, a5, a6, a7, a8);
    goto LABEL_43;
  }
  if (v12)
    *(_DWORD *)v12 += 2;
  v17 = v72[0];
  v72[0] = v12;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      WTF::StringImpl::~StringImpl(v17, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
      if (v12)
        goto LABEL_31;
      goto LABEL_39;
    }
    *(_DWORD *)v17 -= 2;
  }
  if (v12)
  {
LABEL_31:
    v18 = (WTF::AtomStringImpl *)*((unsigned int *)v12 + 1);
    goto LABEL_32;
  }
LABEL_39:
  v18 = 0;
LABEL_32:
  LODWORD(v72[2]) = (_DWORD)v18;
  if ((v18 & 0x80000000) != 0)
  {
LABEL_44:
    v19 = &WTF::StringImpl::s_emptyAtomString;
LABEL_45:
    *v19 += 2;
    goto LABEL_46;
  }
LABEL_33:
  v19 = (int *)v72[0];
  if (v72[0])
    goto LABEL_45;
  if (v72[1] && *((_DWORD *)v72[1] + 1) > v18 + (v18 >> 2))
  {
    if ((*((_BYTE *)v72[1] + 16) & 4) != 0)
      WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)v72, v18, a3, a4, a5, a6, a7, a8);
    else
      WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)v72, v18, a3, a4, a5, a6, a7, a8);
    v63 = v72[0];
    v72[0] = v72[1];
    v72[1] = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
      {
        WTF::StringImpl::~StringImpl(v63, v20, v21, v22, v23, v24, v25, v26);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v63 -= 2;
      }
    }
  }
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)v72);
  v19 = (int *)v72[0];
  if (v72[0])
    goto LABEL_45;
LABEL_46:
  *a9 = v19;
  v37 = v72[1];
  v72[1] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v18, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  v38 = v72[0];
  v72[0] = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, v18, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
      if (!v12)
        return;
      goto LABEL_53;
    }
    *(_DWORD *)v38 -= 2;
  }
  if (!v12)
    return;
LABEL_53:
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::~StringImpl(v12, v18, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
  }
  else
  {
    *(_DWORD *)v12 -= 2;
  }
}

BOOL JSC::JSBoundFunction::canConstructSlow(unint64_t this, JSC::JSCell *a2)
{
  unint64_t v2;
  int v3;
  _BOOL8 result;
  uint64_t v5[3];

  v2 = this;
  while (1)
  {
    this = *(_QWORD *)(this + 32);
    if ((char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)) != &JSC::JSBoundFunction::s_info)
      break;
    v3 = *(unsigned __int8 *)(this + 92);
    if (v3 != 2)
    {
      *(_BYTE *)(v2 + 92) = v3;
      return v3 == 1;
    }
  }
  if ((this & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v5[0]) = 0;
  }
  else if (*(_BYTE *)(this + 5) == 26)
  {
    JSC::JSFunction::getConstructData(v5, (JSC::JSFunction *)this, a2);
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr))(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)
                                                  + 0x40))(v5);
  }
  result = LOBYTE(v5[0]) != 0;
  *(_BYTE *)(v2 + 92) = result;
  return result;
}

BOOL JSC::JSBoundFunction::canSkipNameAndLengthMaterialization(JSC::JSBoundFunction *this, JSC::JSGlobalObject *a2, JSC::Structure *a3)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  int v7;
  JSC::JSGlobalObject *v8;
  int v9;
  JSC::JSGlobalObject *v10;
  int v11;
  JSC::JSGlobalObject *v12;
  int v13;
  JSC::JSGlobalObject *v14;
  int v16;
  JSC::JSGlobalObject *v17;
  int v18;
  JSC::JSGlobalObject *v19;

  if (*((_BYTE *)a2 + 9) != 26
    || (*((_BYTE *)a2 + 18) & 0x20) != 0
    || *((_QWORD *)a2 + 6) != *((_QWORD *)this + 83)
    || *((JSC::JSBoundFunction **)a2 + 5) != this)
  {
    return 0;
  }
  v3 = *((unsigned int *)a2 + 19);
  v4 = *((_DWORD *)a2 + 19) != 0;
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    if ((char **)v5 != &JSC::JSBoundFunction::s_info)
    {
      do
      {
        v5 = *(_QWORD *)(v5 + 16);
        v4 = v5 != 0;
      }
      while ((char **)v5 != &JSC::JSBoundFunction::s_info && v5 != 0);
    }
  }
  if (v4)
    return 1;
  v7 = *((_DWORD *)this + 236);
  v8 = v7 ? (JSC::JSGlobalObject *)(16 * (v7 & 0xFFFFFFFE)) : 0;
  if (v8 == a2)
    return 1;
  v9 = *((_DWORD *)this + 239);
  v10 = v9 ? (JSC::JSGlobalObject *)(16 * (v9 & 0xFFFFFFFE)) : 0;
  if (v10 == a2)
    return 1;
  v11 = *((_DWORD *)this + 238);
  v12 = v11 ? (JSC::JSGlobalObject *)(16 * (v11 & 0xFFFFFFFE)) : 0;
  if (v12 == a2)
    return 1;
  v13 = *((_DWORD *)this + 241);
  v14 = v13 ? (JSC::JSGlobalObject *)(16 * (v13 & 0xFFFFFFFE)) : 0;
  if (v14 == a2)
    return 1;
  v16 = *((_DWORD *)this + 237);
  v17 = v16 ? (JSC::JSGlobalObject *)(16 * (v16 & 0xFFFFFFFE)) : 0;
  if (v17 == a2)
    return 1;
  v18 = *((_DWORD *)this + 240);
  if (v18)
    v19 = (JSC::JSGlobalObject *)(16 * (v18 & 0xFFFFFFFE));
  else
    v19 = 0;
  return v19 == a2;
}

uint64_t JSC::computeJSCBytecodeCacheVersion(JSC *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&qword_1ECF58EF8);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&qword_1ECF58EF8, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::computeJSCBytecodeCacheVersion(void)::$_0 &&>>);
  }
  return _MergedGlobals_44;
}

uint64_t JSC::Config::enableRestrictedOptions(JSC::Config *this)
{
  uint64_t result;

  if (byte_1ECF4C090)
  {
    result = 47;
    __break(0xC471u);
  }
  else
  {
    byte_1ECF4C1E0 = 1;
  }
  return result;
}

uint64_t *JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow(uint64_t *result, JSC::VM *a2, JSC::JSCell *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t **v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = &off_1E3583C90;
  v17[1] = a5;
  v10 = *result;
  if ((*result & 1) != 0)
  {
    v11 = (v10 >> 1) & 3;
    if (v11)
    {
      if (v11 == 1 && (v10 & 0xFFFFFFFFFFFFFFF8) != a4)
        *result = 5;
    }
    else
    {
      *result = a4 & 0xFFFFFFFFFFFFFFF8 | 3;
      if (a3 && a4 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)a3 + 7))
        return (uint64_t *)JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)a3);
    }
  }
  else if (*(_BYTE *)(v10 + 4) == 1)
  {
    if (*(_QWORD *)(v10 + 24) != a4)
    {
      *(_QWORD *)(v10 + 24) = 0;
      __dmb(0xAu);
      v13 = (uint64_t **)(v10 + 8);
      result = *(uint64_t **)(v10 + 8);
      *(_BYTE *)(v10 + 4) = 2;
      v14 = *((_DWORD *)a2 + 229);
      *((_DWORD *)a2 + 229) = v14 + 1;
      if (result != (uint64_t *)(v10 + 8))
      {
        do
        {
          v16 = *result;
          v15 = (uint64_t *)result[1];
          *v15 = *result;
          *(_QWORD *)(v16 + 8) = v15;
          *result = 0;
          result[1] = 0;
          JSC::Watchpoint::fire((unint64_t)result, a2, v17, a4, a5, a6, a7, a8, a9);
          result = *v13;
        }
        while (*v13 != (uint64_t *)v13);
        v14 = *((_DWORD *)a2 + 229) - 1;
      }
      *((_DWORD *)a2 + 229) = v14;
      __dmb(0xAu);
      *(_BYTE *)(v10 + 4) = 2;
    }
  }
  else if (!*(_BYTE *)(v10 + 4))
  {
    *(_QWORD *)(v10 + 24) = a4;
    if (!a3
      || !a4
      || *((_DWORD *)a2 + 190) < *((unsigned __int8 *)a3 + 7)
      || (result = (uint64_t *)JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)a3),
          *(_BYTE *)(v10 + 4) != 1))
    {
      __dmb(0xAu);
      *(_BYTE *)(v10 + 4) = 1;
      __dmb(0xAu);
    }
  }
  return result;
}

void JSC::JSBigInt::absoluteDivWithBigIntDivisor<JSC::HeapBigIntImpl>(JSC::JSBigInt *this, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  int v128;
  int v129;
  unint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  unsigned int v143;

  v12 = *((_QWORD *)this + 7);
  v141 = a3;
  v143 = *(_DWORD *)(a3 + 8);
  v13 = *(_DWORD *)(a2 + 8) - v143;
  if (a4)
  {
    v138 = JSC::JSBigInt::createWithLength(this, (JSC::JSGlobalObject *)v12, (JSC::VM *)(v13 + 1), a4, (uint64_t)a5, a6, a7, a8);
    if (*(_DWORD *)(v12 + 80))
    {
      v15 = *(_DWORD *)(v12 + 80);
      if ((v15 & 0x27) != 0 && (v15 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v14, a4, (uint64_t)a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
        return;
    }
  }
  else
  {
    v138 = 0;
  }
  v22 = JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), (JSC::VM *)(v143 + 1), a4, (uint64_t)a5, a6, a7, a8);
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_192;
  v127 = *(_DWORD *)(v12 + 80);
  if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v16, v17, v18, v19, v20, v21);
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_192:
    v23 = v143 - 1;
    v24 = *(_QWORD *)(v141 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v24 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v25 = __clz(*(_QWORD *)(v24 + 8 * v23));
    if (!v25)
      goto LABEL_193;
    v141 = JSC::JSBigInt::absoluteLeftShiftAlwaysCopy<JSC::HeapBigIntImpl>((JSC::JSGlobalObject **)this, v141, v25, 0, v18, v19, v20, v21);
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_193;
    v129 = *(_DWORD *)(v12 + 80);
    if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v26, v27, v18, v19, v20, v21);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_193:
      v142 = JSC::JSBigInt::absoluteLeftShiftAlwaysCopy<JSC::HeapBigIntImpl>((JSC::JSGlobalObject **)this, a2, v25, 1, v18, v19, v20, v21);
      if (!*(_DWORD *)(v12 + 80))
        goto LABEL_14;
      v128 = *(_DWORD *)(v12 + 80);
      if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v28, v29, v30, v31, v32, v33);
      if (!*(_QWORD *)(v12 + 16))
      {
LABEL_14:
        v140 = (_QWORD *)a4;
        v34 = v141;
        v35 = *(_QWORD *)(v141 + 24);
        v136 = v25;
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v35 = (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if ((v13 & 0x80000000) == 0)
        {
          v36 = *(_QWORD *)(v35 + 8 * v23);
          v37 = __clz(v36);
          v38 = v36 << v37 >> 32;
          v139 = v36 << v37;
          v39 = (v36 << v37);
          v137 = v143 - 2;
          do
          {
            v40 = v143 + v13;
            v41 = *(_QWORD *)(v142 + 24);
            if (qword_1ECF4C038)
            {
              if (byte_1ECF4C022)
              {
                v42 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v43 = *(_QWORD *)(v42 + 8 * v40);
                if (v43 == v36)
                  goto LABEL_22;
              }
              else
              {
                if (disablePrimitiveGigacageRequested)
                {
                  v43 = *(_QWORD *)(v41 + 8 * v40);
                  if (v43 == v36)
                  {
LABEL_96:
                    v44 = -1;
                    v34 = v141;
                    goto LABEL_46;
                  }
                  v42 = *(_QWORD *)(v142 + 24);
                }
                else
                {
                  v42 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                  v43 = *(_QWORD *)(v42 + 8 * v40);
                  if (v43 == v36)
                    goto LABEL_96;
                }
                v34 = v141;
              }
            }
            else
            {
              v43 = *(_QWORD *)(v41 + 8 * v40);
              if (v43 == v36)
              {
LABEL_22:
                v44 = -1;
                goto LABEL_46;
              }
              v42 = *(_QWORD *)(v142 + 24);
            }
            v45 = *(_QWORD *)(v42 + 8 * (v40 - 1));
            v46 = v43 << v37;
            v47 = v45 >> (-(char)v37 & 0x3F);
            if (!v37)
              v47 = 0;
            v48 = v47 | v46;
            v49 = v45 << v37 >> 32;
            v50 = (v45 << v37);
            v51 = v48 / v38;
            v52 = v48 % v38;
            do
            {
              if (!HIDWORD(v51) && v51 * v39 <= (v49 | (v52 << 32)))
                break;
              --v51;
              v52 += v38;
            }
            while (!HIDWORD(v52));
            v53 = (v49 | (v48 << 32)) - v51 * v139;
            v54 = v53 / v38;
            v55 = v53 % v38;
            do
            {
              if (!HIDWORD(v54) && v54 * v39 <= (v50 | (v55 << 32)))
                break;
              --v54;
              v55 += v38;
            }
            while (!HIDWORD(v55));
            v56 = *(_QWORD *)(v34 + 24);
            if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            {
              v57 = (unint64_t *)((v56 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v137);
              v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            }
            else
            {
              v57 = (unint64_t *)(v56 + 8 * v137);
            }
            v58 = ((v50 | (v53 << 32)) - v54 * v139) >> v37;
            v44 = v54 + (v51 << 32);
            v59 = *v57;
            v60 = *(_QWORD *)(v41 + 8 * (v40 - 2));
            do
            {
              v61 = (v44 * (unsigned __int128)v59) >> 64;
              if (v58 >= v61 && (v60 >= v44 * v59 || v58 != v61))
                break;
              --v44;
              v58 += v36;
            }
            while (v58 >= v58 - v36);
LABEL_46:
            JSC::JSBigInt::internalMultiplyAdd<JSC::HeapBigIntImpl>(v34, v44, 0, v143, v22);
            v63 = *(unsigned int *)(v22 + 8);
            if ((_DWORD)v63)
            {
              v34 = v141;
              v64 = *(_QWORD *)(v142 + 24);
              v65 = qword_1ECF4C038;
              v66 = (v64 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              v67 = disablePrimitiveGigacageRequested;
              if (qword_1ECF4C038)
              {
                v68 = *(_QWORD *)(v22 + 24);
                v69 = (v68 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                if (byte_1ECF4C022)
                {
                  v70 = 0;
                  v71 = 0;
                  do
                  {
                    v72 = *(_QWORD *)(v66 + 8 * (v13 + v70));
                    v73 = *(_QWORD *)(v69 + 8 * v70);
                    v74 = v72 - v73 - v71;
                    v71 = v72 - v73 < v71;
                    if (v72 < v73)
                      ++v71;
                    *(_QWORD *)(v66 + 8 * (v13 + v70++)) = v74;
                  }
                  while (v63 != v70);
                }
                else if (disablePrimitiveGigacageRequested)
                {
                  v105 = 0;
                  v71 = 0;
                  v34 = v141;
                  do
                  {
                    v106 = *(_QWORD *)(v64 + 8 * (v13 + v105));
                    v107 = *(_QWORD *)(v68 + 8 * v105);
                    v108 = v106 - v107 - v71;
                    v71 = v106 - v107 < v71;
                    if (v106 < v107)
                      ++v71;
                    *(_QWORD *)(v64 + 8 * (v13 + v105++)) = v108;
                  }
                  while (v63 != v105);
                }
                else
                {
                  v96 = 0;
                  v71 = 0;
                  v34 = v141;
                  do
                  {
                    v97 = *(_QWORD *)(v66 + 8 * (v13 + v96));
                    v98 = *(_QWORD *)(v69 + 8 * v96);
                    v99 = v97 - v98 - v71;
                    v71 = v97 - v98 < v71;
                    if (v97 < v98)
                      ++v71;
                    *(_QWORD *)(v66 + 8 * (v13 + v96++)) = v99;
                  }
                  while (v63 != v96);
                }
              }
              else
              {
                v86 = 0;
                v71 = 0;
                v87 = *(_QWORD *)(v22 + 24);
                do
                {
                  v88 = *(_QWORD *)(v64 + 8 * (v13 + v86));
                  v89 = *(_QWORD *)(v87 + 8 * v86);
                  v90 = v88 - v89 - v71;
                  v71 = v88 - v89 < v71;
                  if (v88 < v89)
                    ++v71;
                  *(_QWORD *)(v64 + 8 * (v13 + v86++)) = v90;
                }
                while (v63 != v86);
              }
              if (!v71)
                goto LABEL_72;
              v75 = *(unsigned int *)(v34 + 8);
              if ((_DWORD)v75)
              {
                if (v65)
                {
                  v76 = *(_QWORD *)(v34 + 24);
                  v77 = (v76 & 0x3FFFFFFFFLL) + v65;
                  if (byte_1ECF4C022)
                  {
                    v78 = 0;
                    v79 = 0;
                    do
                    {
                      v80 = *(_QWORD *)(v66 + 8 * (v13 + v78));
                      v81 = *(_QWORD *)(v77 + 8 * v78);
                      v82 = v81 + v80 + v79;
                      v79 = __CFADD__(v81 + v80, v79);
                      if (__CFADD__(v81, v80))
                        ++v79;
                      *(_QWORD *)(v66 + 8 * (v13 + v78++)) = v82;
                    }
                    while (v75 != v78);
                  }
                  else if (v67)
                  {
                    v109 = 0;
                    v79 = 0;
                    v34 = v141;
                    do
                    {
                      v110 = *(_QWORD *)(v64 + 8 * (v13 + v109));
                      v111 = *(_QWORD *)(v76 + 8 * v109);
                      v112 = v111 + v110 + v79;
                      v79 = __CFADD__(v111 + v110, v79);
                      if (__CFADD__(v111, v110))
                        ++v79;
                      *(_QWORD *)(v64 + 8 * (v13 + v109++)) = v112;
                    }
                    while (v75 != v109);
                  }
                  else
                  {
                    v101 = 0;
                    v79 = 0;
                    v34 = v141;
                    do
                    {
                      v102 = *(_QWORD *)(v66 + 8 * (v13 + v101));
                      v103 = *(_QWORD *)(v77 + 8 * v101);
                      v104 = v103 + v102 + v79;
                      v79 = __CFADD__(v103 + v102, v79);
                      if (__CFADD__(v103, v102))
                        ++v79;
                      *(_QWORD *)(v66 + 8 * (v13 + v101++)) = v104;
                    }
                    while (v75 != v101);
                  }
                }
                else
                {
                  v91 = 0;
                  v79 = 0;
                  v92 = *(_QWORD *)(v34 + 24);
                  do
                  {
                    v93 = *(_QWORD *)(v64 + 8 * (v13 + v91));
                    v94 = *(_QWORD *)(v92 + 8 * v91);
                    v95 = v94 + v93 + v79;
                    v79 = __CFADD__(v94 + v93, v79);
                    if (__CFADD__(v94, v93))
                      ++v79;
                    *(_QWORD *)(v64 + 8 * (v13 + v91++)) = v95;
                  }
                  while (v75 != v91);
                }
              }
              else
              {
                v79 = 0;
              }
              if (v65)
              {
                if (byte_1ECF4C022)
                {
                  v83 = *(_QWORD *)(v66 + 8 * v40) + v79;
                  goto LABEL_70;
                }
                if (v67)
                  v100 = v64;
                else
                  v100 = v66;
                v83 = *(_QWORD *)(v100 + 8 * v40) + v79;
                if (!v67)
LABEL_70:
                  v64 = v66;
              }
              else
              {
                v83 = *(_QWORD *)(v64 + 8 * v40) + v79;
              }
              *(_QWORD *)(v64 + 8 * v40) = v83;
              --v44;
              goto LABEL_72;
            }
            v34 = v141;
LABEL_72:
            if (v140)
            {
              v84 = *(_QWORD *)(v138 + 24);
              if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
                v84 = (v84 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              *(_QWORD *)(v84 + 8 * v13) = v44;
            }
          }
          while ((int)v13-- > 0);
        }
        if (v140)
          *v140 = v138;
        if (a5)
        {
          if (v136)
          {
            v113 = *(_QWORD *)(v142 + 24);
            v114 = qword_1ECF4C038;
            v115 = (_QWORD *)v113;
            if (qword_1ECF4C038)
            {
              if (byte_1ECF4C022 || (v115 = *(_QWORD **)(v142 + 24), !disablePrimitiveGigacageRequested))
                v115 = (_QWORD *)((v113 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
            }
            v116 = *(_DWORD *)(v142 + 8);
            v117 = *v115 >> v136;
            v118 = (v116 - 1);
            if (v116 != 1)
            {
              v119 = 64 - v136;
              if (qword_1ECF4C038)
              {
                v120 = (v113 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                if (byte_1ECF4C022)
                {
                  v121 = (unint64_t *)(v120 + 8);
                  v122 = v118;
                  do
                  {
                    v123 = *v121;
                    *(v121 - 1) = (*v121 << v119) | v117;
                    v117 = v123 >> v136;
                    ++v121;
                    --v122;
                  }
                  while (v122);
                }
                else if (disablePrimitiveGigacageRequested)
                {
                  v133 = (unint64_t *)(v113 + 8);
                  v134 = v118;
                  do
                  {
                    v135 = *v133;
                    *(v133 - 1) = (*v133 << v119) | v117;
                    v117 = v135 >> v136;
                    ++v133;
                    --v134;
                  }
                  while (v134);
                }
                else
                {
                  v130 = (unint64_t *)(v120 + 8);
                  v131 = v118;
                  do
                  {
                    v132 = *v130;
                    *(v130 - 1) = (*v130 << v119) | v117;
                    v117 = v132 >> v136;
                    ++v130;
                    --v131;
                  }
                  while (v131);
                }
              }
              else
              {
                v124 = (unint64_t *)(v113 + 8);
                v125 = v118;
                do
                {
                  v126 = *v124;
                  *(v124 - 1) = (*v124 << v119) | v117;
                  v117 = v126 >> v136;
                  ++v124;
                  --v125;
                }
                while (v125);
              }
            }
            if (v114 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v113 = (v113 & 0x3FFFFFFFFLL) + v114;
            *(_QWORD *)(v113 + 8 * v118) = v117;
          }
          *a5 = v142;
        }
      }
    }
  }
}

unint64_t JSC::JSBigInt::absoluteLeftShiftAlwaysCopy<JSC::HeapBigIntImpl>(JSC::JSGlobalObject **a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v8 = a4;
  v11 = a1[7];
  v12 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)a4 == 1)
    v13 = (v12 + 1);
  else
    v13 = v12;
  result = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)v13, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v11 + 20))
  {
    v42 = *((_DWORD *)v11 + 20);
    if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
    {
      v51 = result;
      JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v11 + 64), 7u, v15, v16, v17, v18, v19, v20);
      result = v51;
    }
    if (*((_QWORD *)v11 + 2))
      return 0;
  }
  if (a3)
  {
    if ((_DWORD)v12)
    {
      v21 = *(_QWORD *)(a2 + 24);
      v22 = qword_1ECF4C038;
      v23 = 64 - a3;
      if (qword_1ECF4C038)
      {
        v24 = (unint64_t *)((v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
        v25 = *(unint64_t **)(result + 24);
        v26 = (uint64_t *)(((unint64_t)v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
        if (byte_1ECF4C022)
        {
          v22 = 0;
          v27 = v12;
          do
          {
            v28 = *v24++;
            *v26++ = (v28 << a3) | v22;
            v22 = v28 >> v23;
            --v27;
          }
          while (v27);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v22 = 0;
          v47 = v12;
          do
          {
            v48 = *(_QWORD *)v21;
            v21 += 8;
            *v25++ = (v48 << a3) | v22;
            v22 = v48 >> v23;
            --v47;
          }
          while (v47);
        }
        else
        {
          v22 = 0;
          v43 = v12;
          do
          {
            v44 = *v24++;
            *v26++ = (v44 << a3) | v22;
            v22 = v44 >> v23;
            --v43;
          }
          while (v43);
        }
      }
      else
      {
        v36 = *(uint64_t **)(result + 24);
        v37 = v12;
        do
        {
          v38 = *(_QWORD *)v21;
          v21 += 8;
          *v36++ = (v38 << a3) | v22;
          v22 = v38 >> v23;
          --v37;
        }
        while (v37);
      }
    }
    else
    {
      v22 = 0;
    }
    if (v8 == 1)
    {
      v35 = *(_QWORD *)(result + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v35 = (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
LABEL_26:
      *(_QWORD *)(v35 + 8 * v12) = v22;
    }
  }
  else
  {
    if ((_DWORD)v12)
    {
      v29 = *(_QWORD *)(a2 + 24);
      if (qword_1ECF4C038)
      {
        v30 = (uint64_t *)((v29 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
        v31 = *(_QWORD *)(result + 24);
        v32 = (_QWORD *)((v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
        if (byte_1ECF4C022)
        {
          v33 = v12;
          do
          {
            v34 = *v30++;
            *v32++ = v34;
            --v33;
          }
          while (v33);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v49 = v12;
          do
          {
            v50 = *(_QWORD *)v29;
            v29 += 8;
            *(_QWORD *)v31 = v50;
            v31 += 8;
            --v49;
          }
          while (v49);
        }
        else
        {
          v45 = v12;
          do
          {
            v46 = *v30++;
            *v32++ = v46;
            --v45;
          }
          while (v45);
        }
      }
      else
      {
        v39 = *(_QWORD **)(result + 24);
        v40 = v12;
        do
        {
          v41 = *(_QWORD *)v29;
          v29 += 8;
          *v39++ = v41;
          --v40;
        }
        while (v40);
      }
    }
    if (v8 == 1)
    {
      v35 = *(_QWORD *)(result + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      {
        v22 = 0;
        v35 = (v35 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v22 = 0;
      }
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t JSC::JSBigInt::copy<JSC::HeapBigIntImpl>(JSC::JSBigInt *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *((_QWORD *)a1 + 7);
  result = JSC::JSBigInt::createWithLength(a1, (JSC::JSGlobalObject *)v5, (JSC::VM *)*(unsigned int *)(a2 + 8), a4);
  if (*(_DWORD *)(v5 + 80))
  {
    v21 = *(_DWORD *)(v5 + 80);
    if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
    {
      v24 = result;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v7, v8, v9, v10, v11, v12);
      result = v24;
    }
    if (*(_QWORD *)(v5 + 16))
      return 0;
  }
  v13 = *(unsigned int *)(result + 8);
  if ((_DWORD)v13)
  {
    v14 = *(_QWORD *)(a2 + 24);
    if (qword_1ECF4C038)
    {
      v15 = (uint64_t *)((v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      v16 = *(_QWORD *)(result + 24);
      v17 = (_QWORD *)((v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      if (byte_1ECF4C022)
      {
        do
        {
          v18 = *v15++;
          *v17++ = v18;
          --v13;
        }
        while (v13);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        do
        {
          v23 = *(_QWORD *)v14;
          v14 += 8;
          *(_QWORD *)v16 = v23;
          v16 += 8;
          --v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v22 = *v15++;
          *v17++ = v22;
          --v13;
        }
        while (v13);
      }
    }
    else
    {
      v19 = *(_QWORD **)(result + 24);
      do
      {
        v20 = *(_QWORD *)v14;
        v14 += 8;
        *v19++ = v20;
        --v13;
      }
      while (v13);
    }
  }
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 16) != 0;
  return result;
}

JSC::JSBigInt *JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>(JSC::JSBigInt *this, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v7 = *((_QWORD *)this + 7);
  v8 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(a2 + 24);
    if (qword_1ECF4C038)
    {
      v10 = (uint64_t *)((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      if (byte_1ECF4C022)
      {
        v11 = *(unsigned int *)(a2 + 8);
        while (1)
        {
          v12 = *v10++;
          if (v12 != -1)
            break;
          if (!--v11)
            goto LABEL_7;
        }
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v18 = *(unsigned int *)(a2 + 8);
        while (1)
        {
          v19 = *(_QWORD *)v9;
          v9 += 8;
          if (v19 != -1)
            break;
          v13 = 1;
          if (!--v18)
            goto LABEL_22;
        }
      }
      else
      {
        v16 = *(unsigned int *)(a2 + 8);
        while (1)
        {
          v17 = *v10++;
          if (v17 != -1)
            break;
          v13 = 1;
          if (!--v16)
            goto LABEL_22;
        }
      }
    }
    else
    {
      v14 = *(unsigned int *)(a2 + 8);
      while (1)
      {
        v15 = *(_QWORD *)v9;
        v9 += 8;
        if (v15 != -1)
          break;
        v13 = 1;
        if (!--v14)
          goto LABEL_22;
      }
    }
    v13 = 0;
  }
  else
  {
LABEL_7:
    v13 = 1;
  }
LABEL_22:
  v20 = v13 + v8;
  v21 = JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), (JSC::VM *)(v13 + v8), a4);
  if (*(_DWORD *)(v7 + 80))
  {
    v42 = *(_DWORD *)(v7 + 80);
    if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
    {
      v49 = v21;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v7 + 64), 7u, v22, v23, v24, v25, v26, v27);
      v21 = v49;
    }
    if (*(_QWORD *)(v7 + 16))
      return 0;
  }
  if ((_DWORD)v8)
  {
    v28 = *(_QWORD *)(a2 + 24);
    if (qword_1ECF4C038)
    {
      v29 = (uint64_t *)((v28 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      v30 = *(_QWORD *)(v21 + 24);
      v31 = (_QWORD *)((v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      if (byte_1ECF4C022)
      {
        v32 = 1;
        v33 = v8;
        do
        {
          v34 = *v29++;
          v35 = v34 + v32;
          v32 = __CFADD__(v34, v32);
          *v31++ = v35;
          --v33;
        }
        while (v33);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v32 = 1;
        v46 = v8;
        do
        {
          v47 = *(_QWORD *)v28;
          v28 += 8;
          v48 = v47 + v32;
          v32 = __CFADD__(v47, v32);
          *(_QWORD *)v30 = v48;
          v30 += 8;
          --v46;
        }
        while (v46);
      }
      else
      {
        v32 = 1;
        v43 = v8;
        do
        {
          v44 = *v29++;
          v45 = v44 + v32;
          v32 = __CFADD__(v44, v32);
          *v31++ = v45;
          --v43;
        }
        while (v43);
      }
    }
    else
    {
      v38 = *(_QWORD **)(v21 + 24);
      v32 = 1;
      v39 = v8;
      do
      {
        v40 = *(_QWORD *)v28;
        v28 += 8;
        v41 = v40 + v32;
        v32 = __CFADD__(v40, v32);
        *v38++ = v41;
        --v39;
      }
      while (v39);
    }
  }
  else
  {
    v32 = 1;
  }
  if (v20 > v8)
  {
    v36 = *(_QWORD *)(v21 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v36 = (v36 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(v36 + 8 * v8) = v32;
  }
  *(_BYTE *)(v21 + 16) = a3 == 0;
  return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v21, this, *((JSC::VM **)this + 7), v23);
}

JSC::JSBigInt *JSC::JSBigInt::absoluteSubOne<JSC::HeapBigIntImpl>(JSC::VM **a1, uint64_t a2, JSC::VM *a3, unsigned int a4)
{
  unsigned int v4;
  JSC::VM *v7;
  JSC::JSBigInt *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  JSC::JSBigInt *v46;

  v4 = a3;
  v7 = a1[7];
  v8 = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, v7, a3, a4);
  if (*((_DWORD *)v7 + 20))
  {
    v35 = *((_DWORD *)v7 + 20);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
    {
      v46 = v8;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v7 + 64), 7u, v9, v10, v11, v12, v13, v14);
      v8 = v46;
    }
    if (*((_QWORD *)v7 + 2))
      return 0;
  }
  v15 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v15)
  {
    v16 = *(_QWORD *)(a2 + 24);
    if (qword_1ECF4C038)
    {
      v17 = (unint64_t *)((v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      v18 = *((_QWORD *)v8 + 3);
      v19 = (_QWORD *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      if (byte_1ECF4C022)
      {
        v20 = 1;
        v21 = *(unsigned int *)(a2 + 8);
        do
        {
          v22 = *v17++;
          v23 = v22 - v20;
          v20 = v22 < v20;
          *v19++ = v23;
          --v21;
        }
        while (v21);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v20 = 1;
        v41 = *(unsigned int *)(a2 + 8);
        do
        {
          v42 = *(_QWORD *)v16;
          v16 += 8;
          v43 = v42 - v20;
          v20 = v42 < v20;
          *(_QWORD *)v18 = v43;
          v18 += 8;
          --v41;
        }
        while (v41);
      }
      else
      {
        v20 = 1;
        v36 = *(unsigned int *)(a2 + 8);
        do
        {
          v37 = *v17++;
          v38 = v37 - v20;
          v20 = v37 < v20;
          *v19++ = v38;
          --v36;
        }
        while (v36);
      }
    }
    else
    {
      v29 = (_QWORD *)*((_QWORD *)v8 + 3);
      v20 = 1;
      v30 = *(unsigned int *)(a2 + 8);
      do
      {
        v31 = *(_QWORD *)v16;
        v16 += 8;
        v32 = v31 - v20;
        v20 = v31 < v20;
        *v29++ = v32;
        --v30;
      }
      while (v30);
    }
  }
  else
  {
    v20 = 1;
  }
  if (v15 < v4)
  {
    v24 = *((_QWORD *)v8 + 3);
    if (qword_1ECF4C038)
    {
      v25 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v26 = v4 - v15;
        v27 = (unint64_t *)(v25 + 8 * v15);
        do
        {
          *v27++ = v20;
          --v26;
        }
        while (v26);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v44 = v4 - v15;
        v45 = (unint64_t *)(v24 + 8 * v15);
        do
        {
          *v45++ = v20;
          --v44;
        }
        while (v44);
      }
      else
      {
        v39 = v4 - v15;
        v40 = (unint64_t *)(v25 + 8 * v15);
        do
        {
          *v40++ = v20;
          --v39;
        }
        while (v39);
      }
    }
    else
    {
      v33 = v4 - v15;
      v34 = (unint64_t *)(v24 + 8 * v15);
      do
      {
        *v34++ = v20;
        --v33;
      }
      while (v33);
    }
  }
  return JSC::JSBigInt::rightTrim(v8, (JSC::JSGlobalObject *)a1, a1[7], v10);
}

JSC::JSBigInt *JSC::JSBigInt::absoluteAdd<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSBigInt *this, uint64_t a2, uint64_t a3, unsigned int a4)
{
  char v4;
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = a4;
  v5 = a3;
  v7 = *(_DWORD *)(a2 + 8);
  do
  {
    v8 = v5;
    v5 = a2;
    v9 = v7;
    v7 = *(_DWORD *)(v8 + 8);
    a2 = v8;
  }
  while (v9 < v7);
  if (v9)
  {
    v10 = *((_QWORD *)this + 7);
    if (v7)
    {
      v11 = JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), (JSC::VM *)(v9 + 1), a4);
      if (!*(_DWORD *)(v10 + 80))
        goto LABEL_6;
      v61 = *(_DWORD *)(v10 + 80);
      if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
      {
        v75 = v11;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v12, v13, v14, v15, v16, v17);
        v11 = v75;
      }
      if (!*(_QWORD *)(v10 + 16))
      {
LABEL_6:
        v18 = *(unsigned int *)(v8 + 8);
        v19 = qword_1ECF4C038;
        if ((_DWORD)v18)
        {
          v20 = *(_QWORD *)(v5 + 24);
          v21 = *(_QWORD *)(v11 + 24);
          if (qword_1ECF4C038)
          {
            v22 = (uint64_t *)((v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
            v23 = (uint64_t *)((v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
            v24 = *(_QWORD *)(v8 + 24);
            v25 = (uint64_t *)((v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
            if (byte_1ECF4C022)
            {
              v26 = 0;
              v27 = *(unsigned int *)(v8 + 8);
              do
              {
                v29 = *v22++;
                v28 = v29;
                v31 = *v25++;
                v30 = v31;
                v32 = v31 + v28 + v26;
                v26 = __CFADD__(v31 + v28, v26);
                if (__CFADD__(v30, v28))
                  ++v26;
                *v23++ = v32;
                --v27;
              }
              while (v27);
            }
            else
            {
              v26 = 0;
              if (disablePrimitiveGigacageRequested)
              {
                v63 = *(uint64_t **)(v8 + 24);
              }
              else
              {
                v21 = (v21 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v63 = (uint64_t *)((v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
              }
              if (!disablePrimitiveGigacageRequested)
                v20 = (v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              v64 = *(unsigned int *)(v8 + 8);
              do
              {
                v66 = *(_QWORD *)v20;
                v20 += 8;
                v65 = v66;
                v68 = *v63++;
                v67 = v68;
                v69 = v68 + v65 + v26;
                v26 = __CFADD__(v68 + v65, v26);
                if (__CFADD__(v67, v65))
                  ++v26;
                *(_QWORD *)v21 = v69;
                v21 += 8;
                --v64;
              }
              while (v64);
            }
          }
          else
          {
            v26 = 0;
            v51 = *(uint64_t **)(v8 + 24);
            v52 = *(unsigned int *)(v8 + 8);
            do
            {
              v54 = *(_QWORD *)v20;
              v20 += 8;
              v53 = v54;
              v56 = *v51++;
              v55 = v56;
              v57 = v56 + v53 + v26;
              v26 = __CFADD__(v56 + v53, v26);
              if (__CFADD__(v55, v53))
                ++v26;
              *(_QWORD *)v21 = v57;
              v21 += 8;
              --v52;
            }
            while (v52);
          }
        }
        else
        {
          v26 = 0;
        }
        v40 = *(unsigned int *)(v5 + 8);
        if (v18 >= v40)
        {
          v43 = *(_QWORD *)(v11 + 24);
          LODWORD(v40) = v18;
        }
        else
        {
          v41 = *(_QWORD *)(v5 + 24);
          if (!v19)
          {
            v43 = *(_QWORD *)(v11 + 24);
            do
            {
              v58 = *(_QWORD *)(v41 + 8 * v18);
              v59 = __CFADD__(v58, v26);
              v60 = v58 + v26;
              v26 = v59;
              *(_QWORD *)(v43 + 8 * v18++) = v60;
            }
            while (v40 != v18);
            goto LABEL_34;
          }
          v42 = (v41 & 0x3FFFFFFFFLL) + v19;
          v43 = *(_QWORD *)(v11 + 24);
          v44 = (v43 & 0x3FFFFFFFFLL) + v19;
          if (byte_1ECF4C022)
          {
            v45 = v40 - v18;
            v46 = (_QWORD *)(v44 + 8 * v18);
            v47 = (uint64_t *)(v42 + 8 * v18);
            do
            {
              v48 = *v47++;
              v49 = v48 + v26;
              v26 = __CFADD__(v48, v26);
              *v46++ = v49;
              --v45;
            }
            while (v45);
          }
          else
          {
            if (disablePrimitiveGigacageRequested)
            {
              v42 = *(_QWORD *)(v5 + 24);
              v44 = *(_QWORD *)(v11 + 24);
            }
            v70 = v40 - v18;
            v71 = (_QWORD *)(v44 + 8 * v18);
            v72 = (uint64_t *)(v42 + 8 * v18);
            do
            {
              v73 = *v72++;
              v74 = v73 + v26;
              v26 = __CFADD__(v73, v26);
              *v71++ = v74;
              --v70;
            }
            while (v70);
          }
        }
        if (v19 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v43 = (v43 & 0x3FFFFFFFFLL) + v19;
LABEL_34:
        *(_QWORD *)(v43 + 8 * v40) = v26;
        *(_BYTE *)(v11 + 16) = v4;
        return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v11, this, *((JSC::VM **)this + 7), v13);
      }
      return 0;
    }
    if ((*(_BYTE *)(v5 + 16) != 0) != a4)
    {
      v39 = JSC::JSBigInt::copy<JSC::HeapBigIntImpl>(this, v5, a3, a4);
      if (*(_DWORD *)(v10 + 80))
      {
        v62 = *(_DWORD *)(v10 + 80);
        if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v33, v34, v35, v36, v37, v38);
        if (*(_QWORD *)(v10 + 16))
          return 0;
      }
      *(_BYTE *)(v39 + 16) = *(_BYTE *)(v5 + 16) == 0;
      return (JSC::JSBigInt *)v39;
    }
  }
  return (JSC::JSBigInt *)v5;
}

JSC::JSBigInt *JSC::JSBigInt::absoluteSub<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSBigInt *this, uint64_t a2, uint64_t a3, unsigned int a4)
{
  char v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v4 = a4;
  v6 = a2;
  v8 = *((_QWORD *)this + 7);
  v9 = *(unsigned int *)(a2 + 8);
  v10 = *(_DWORD *)(a3 + 8);
  if ((_DWORD)v9 == v10)
  {
    if (disablePrimitiveGigacageRequested)
    {
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022)
        {
          v78 = v9 - 1;
          do
          {
            v12 = v78 >> 31;
            if ((v78 & 0x80000000) != 0)
              break;
            v79 = *(_QWORD *)((*(_QWORD *)(a2 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v78);
            v80 = *(_QWORD *)((*(_QWORD *)(a3 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v78--);
          }
          while (v79 == v80);
        }
        else
        {
          v84 = v9 - 1;
          do
          {
            v12 = v84 >> 31;
            if ((v84 & 0x80000000) != 0)
              break;
            v85 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v84);
            v86 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v84--);
          }
          while (v85 == v86);
        }
      }
      else
      {
        v81 = v9 - 1;
        do
        {
          v12 = v81 >> 31;
          if ((v81 & 0x80000000) != 0)
            break;
          v82 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v81);
          v83 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v81--);
        }
        while (v82 == v83);
      }
    }
    else if (qword_1ECF4C038)
    {
      v11 = v9 - 1;
      do
      {
        v12 = v11 >> 31;
        if ((v11 & 0x80000000) != 0)
          break;
        v13 = *(_QWORD *)((*(_QWORD *)(a2 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v11);
        v14 = *(_QWORD *)((*(_QWORD *)(a3 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v11--);
      }
      while (v13 == v14);
    }
    else
    {
      v51 = v9 - 1;
      do
      {
        v12 = v51 >> 31;
        if ((v51 & 0x80000000) != 0)
          break;
        v52 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * v51);
        v53 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v51--);
      }
      while (v52 == v53);
    }
  }
  else
  {
    v12 = 0;
  }
  if ((_DWORD)v9)
  {
    if (v10)
    {
      if (v12)
        return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), 0, a4);
      v23 = JSC::JSBigInt::createWithLength(this, *((JSC::JSGlobalObject **)this + 7), (JSC::VM *)v9, a4);
      if (!*(_DWORD *)(v8 + 80))
        goto LABEL_17;
      v65 = *(_DWORD *)(v8 + 80);
      if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
      {
        v87 = v23;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v24, v25, v26, v27, v28, v29);
        v23 = v87;
      }
      if (!*(_QWORD *)(v8 + 16))
      {
LABEL_17:
        v30 = *(unsigned int *)(a3 + 8);
        if ((_DWORD)v30)
        {
          v31 = *(_QWORD *)(v6 + 24);
          v32 = qword_1ECF4C038;
          v33 = *(_QWORD *)(v23 + 24);
          if (qword_1ECF4C038)
          {
            v34 = (unint64_t *)((v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
            v35 = (unint64_t *)((v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
            v36 = (unint64_t *)((*(_QWORD *)(a3 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038);
            v32 = 0;
            if (byte_1ECF4C022)
            {
              v37 = *(unsigned int *)(a3 + 8);
              do
              {
                v39 = *v34++;
                v38 = v39;
                v40 = *v36++;
                v41 = v38 - v40 - v32;
                v32 = v38 - v40 < v32;
                if (v38 < v40)
                  ++v32;
                *v35++ = v41;
                --v37;
              }
              while (v37);
            }
            else
            {
              if (disablePrimitiveGigacageRequested)
              {
                v67 = *(unint64_t **)(a3 + 24);
              }
              else
              {
                v33 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v67 = (unint64_t *)((*(_QWORD *)(a3 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038);
              }
              if (!disablePrimitiveGigacageRequested)
                v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              v68 = *(unsigned int *)(a3 + 8);
              do
              {
                v70 = *(_QWORD *)v31;
                v31 += 8;
                v69 = v70;
                v71 = *v67++;
                v72 = v69 - v71 - v32;
                v32 = v69 - v71 < v32;
                if (v69 < v71)
                  ++v32;
                *(_QWORD *)v33 = v72;
                v33 += 8;
                --v68;
              }
              while (v68);
            }
          }
          else
          {
            v54 = *(unint64_t **)(a3 + 24);
            v55 = *(unsigned int *)(a3 + 8);
            do
            {
              v57 = *(_QWORD *)v31;
              v31 += 8;
              v56 = v57;
              v58 = *v54++;
              v59 = v56 - v58 - v32;
              v32 = v56 - v58 < v32;
              if (v56 < v58)
                ++v32;
              *(_QWORD *)v33 = v59;
              v33 += 8;
              --v55;
            }
            while (v55);
          }
        }
        else
        {
          v32 = 0;
        }
        v42 = *(unsigned int *)(v6 + 8);
        if (v30 < v42)
        {
          v43 = *(_QWORD *)(v6 + 24);
          if (qword_1ECF4C038)
          {
            v44 = (*(_QWORD *)(v23 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            if (byte_1ECF4C022)
            {
              v45 = v42 - v30;
              v46 = (_QWORD *)(v44 + 8 * v30);
              v47 = (unint64_t *)((v43 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 8 * v30);
              do
              {
                v48 = *v47++;
                v49 = v48 - v32;
                v32 = v48 < v32;
                *v46++ = v49;
                --v45;
              }
              while (v45);
            }
            else
            {
              if (disablePrimitiveGigacageRequested)
                v44 = *(_QWORD *)(v23 + 24);
              else
                v43 = (v43 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
              v73 = v42 - v30;
              v74 = (_QWORD *)(v44 + 8 * v30);
              v75 = (unint64_t *)(v43 + 8 * v30);
              do
              {
                v76 = *v75++;
                v77 = v76 - v32;
                v32 = v76 < v32;
                *v74++ = v77;
                --v73;
              }
              while (v73);
            }
          }
          else
          {
            v60 = v42 - v30;
            v61 = (_QWORD *)(*(_QWORD *)(v23 + 24) + 8 * v30);
            v62 = (unint64_t *)(v43 + 8 * v30);
            do
            {
              v63 = *v62++;
              v64 = v63 - v32;
              v32 = v63 < v32;
              *v61++ = v64;
              --v60;
            }
            while (v60);
          }
        }
        *(_BYTE *)(v23 + 16) = v4;
        return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v23, this, *((JSC::VM **)this + 7), v25);
      }
      return 0;
    }
    if ((*(_BYTE *)(a2 + 16) != 0) != a4)
    {
      v22 = JSC::JSBigInt::copy<JSC::HeapBigIntImpl>(this, a2, v9, a4);
      if (*(_DWORD *)(v8 + 80))
      {
        v66 = *(_DWORD *)(v8 + 80);
        if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, v16, v17, v18, v19, v20, v21);
        if (*(_QWORD *)(v8 + 16))
          return 0;
      }
      *(_BYTE *)(v22 + 16) = *(_BYTE *)(v6 + 16) == 0;
      return (JSC::JSBigInt *)v22;
    }
  }
  return (JSC::JSBigInt *)v6;
}

JSC::JSBigInt *JSC::JSBigInt::absoluteBitwiseOp<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl,JSC::JSBigInt* JSC::JSBigInt::absoluteAnd<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSGlobalObject *,JSC::HeapBigIntImpl,JSC::HeapBigIntImpl)::{lambda(unsigned long long,unsigned long long)#1} &>(JSC::JSGlobalObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  JSC::JSBigInt *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::JSBigInt *v39;

  v11 = a1[7];
  v12 = *(_DWORD *)(a2 + 8);
  v13 = *(_DWORD *)(a3 + 8);
  if (v12 >= v13)
    v14 = v13;
  else
    v14 = v12;
  v15 = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)v14, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v11 + 20))
  {
    v35 = *((_DWORD *)v11 + 20);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
    {
      v39 = v15;
      JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v11 + 64), 7u, v16, v17, v18, v19, v20, v21);
      v15 = v39;
    }
    if (*((_QWORD *)v11 + 2))
      return 0;
  }
  if ((_DWORD)v14)
  {
    v22 = *(_QWORD *)(a2 + 24);
    if (qword_1ECF4C038)
    {
      v23 = (uint64_t *)((v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      v24 = (uint64_t *)((*((_QWORD *)v15 + 3) & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      v25 = (uint64_t *)((*(_QWORD *)(a3 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      if (byte_1ECF4C022)
      {
        do
        {
          v27 = *v23++;
          v26 = v27;
          v28 = *v25++;
          *v24++ = v28 & v26;
          --v14;
        }
        while (v14);
      }
      else
      {
        if (disablePrimitiveGigacageRequested)
        {
          v24 = (uint64_t *)*((_QWORD *)v15 + 3);
          v25 = *(uint64_t **)(a3 + 24);
        }
        else
        {
          v22 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        do
        {
          v37 = *(_QWORD *)v22;
          v22 += 8;
          v36 = v37;
          v38 = *v25++;
          *v24++ = v38 & v36;
          --v14;
        }
        while (v14);
      }
    }
    else
    {
      v30 = *(uint64_t **)(a3 + 24);
      v31 = (uint64_t *)*((_QWORD *)v15 + 3);
      do
      {
        v33 = *(_QWORD *)v22;
        v22 += 8;
        v32 = v33;
        v34 = *v30++;
        *v31++ = v34 & v32;
        --v14;
      }
      while (v14);
    }
  }
  return JSC::JSBigInt::rightTrim(v15, (JSC::JSGlobalObject *)a1, a1[7], v17);
}

JSC::JSBigInt *JSC::JSBigInt::absoluteBitwiseOp<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl,JSC::JSBigInt* JSC::JSBigInt::absoluteOr<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSGlobalObject *,JSC::HeapBigIntImpl,JSC::HeapBigIntImpl)::{lambda(unsigned long long,unsigned long long)#1} &>(JSC::JSGlobalObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSBigInt *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  size_t v51;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;

  v11 = a1[7];
  v12 = *(unsigned int *)(a2 + 8);
  v13 = *(unsigned int *)(a3 + 8);
  if (v12 >= v13)
    v14 = v13;
  else
    v14 = v12;
  if (v12 <= v13)
    v15 = v13;
  else
    v15 = v12;
  v22 = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)v15, a4, a5, a6, a7, a8);
  if (!*((_DWORD *)v11 + 20))
    goto LABEL_8;
  v67 = *((_DWORD *)v11 + 20);
  if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v11 + 64), 7u, v16, v17, v18, v19, v20, v21);
  if (!*((_QWORD *)v11 + 2))
  {
LABEL_8:
    if ((_DWORD)v14)
    {
      v23 = *(_QWORD *)(a2 + 24);
      if (qword_1ECF4C038)
      {
        v24 = (uint64_t *)((v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
        v25 = (uint64_t *)((*((_QWORD *)v22 + 3) & 0x3FFFFFFFFLL) + qword_1ECF4C038);
        v26 = (uint64_t *)((*(_QWORD *)(a3 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038);
        if (byte_1ECF4C022)
        {
          v27 = v14;
          do
          {
            v29 = *v24++;
            v28 = v29;
            v30 = *v26++;
            *v25++ = v30 | v28;
            --v27;
          }
          while (v27);
        }
        else
        {
          if (disablePrimitiveGigacageRequested)
          {
            v25 = (uint64_t *)*((_QWORD *)v22 + 3);
            v26 = *(uint64_t **)(a3 + 24);
          }
          else
          {
            v23 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          }
          v68 = v14;
          do
          {
            v70 = *(_QWORD *)v23;
            v23 += 8;
            v69 = v70;
            v71 = *v26++;
            *v25++ = v71 | v69;
            --v68;
          }
          while (v68);
        }
      }
      else
      {
        v53 = *(uint64_t **)(a3 + 24);
        v54 = (uint64_t *)*((_QWORD *)v22 + 3);
        v55 = v14;
        do
        {
          v57 = *(_QWORD *)v23;
          v23 += 8;
          v56 = v57;
          v58 = *v53++;
          *v54++ = v58 | v56;
          --v55;
        }
        while (v55);
      }
    }
    if (v12 <= v13)
    {
      if (v13 > v12)
      {
        v39 = *(_QWORD *)(a3 + 24);
        if (qword_1ECF4C038)
        {
          v40 = (v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v41 = *((_QWORD *)v22 + 3);
          v42 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            v43 = v13 - v14;
            v44 = (_QWORD *)(v42 + 8 * v14);
            v45 = (uint64_t *)(v40 + 8 * v14);
            do
            {
              v46 = *v45++;
              *v44++ = v46;
              --v43;
            }
            while (v43);
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v84 = v13 - v14;
            v85 = (_QWORD *)(v41 + 8 * v14);
            v86 = (uint64_t *)(v39 + 8 * v14);
            do
            {
              v87 = *v86++;
              *v85++ = v87;
              --v84;
            }
            while (v84);
          }
          else
          {
            v76 = v13 - v14;
            v77 = (_QWORD *)(v42 + 8 * v14);
            v78 = (uint64_t *)(v40 + 8 * v14);
            do
            {
              v79 = *v78++;
              *v77++ = v79;
              --v76;
            }
            while (v76);
          }
        }
        else
        {
          v63 = v13 - v14;
          v64 = (_QWORD *)(*((_QWORD *)v22 + 3) + 8 * v14);
          v65 = (uint64_t *)(v39 + 8 * v14);
          do
          {
            v66 = *v65++;
            *v64++ = v66;
            --v63;
          }
          while (v63);
        }
        LODWORD(v14) = v13;
      }
    }
    else
    {
      v31 = *(_QWORD *)(a2 + 24);
      if (qword_1ECF4C038)
      {
        v32 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v33 = *((_QWORD *)v22 + 3);
        v34 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v35 = v12 - v14;
          v36 = (_QWORD *)(v34 + 8 * v14);
          v37 = (uint64_t *)(v32 + 8 * v14);
          do
          {
            v38 = *v37++;
            *v36++ = v38;
            --v35;
          }
          while (v35);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v80 = v12 - v14;
          v81 = (_QWORD *)(v33 + 8 * v14);
          v82 = (uint64_t *)(v31 + 8 * v14);
          do
          {
            v83 = *v82++;
            *v81++ = v83;
            --v80;
          }
          while (v80);
        }
        else
        {
          v72 = v12 - v14;
          v73 = (_QWORD *)(v34 + 8 * v14);
          v74 = (uint64_t *)(v32 + 8 * v14);
          do
          {
            v75 = *v74++;
            *v73++ = v75;
            --v72;
          }
          while (v72);
        }
      }
      else
      {
        v59 = v12 - v14;
        v60 = (_QWORD *)(*((_QWORD *)v22 + 3) + 8 * v14);
        v61 = (uint64_t *)(v31 + 8 * v14);
        do
        {
          v62 = *v61++;
          *v60++ = v62;
          --v59;
        }
        while (v59);
      }
      LODWORD(v14) = v12;
    }
    if (v14 >= v15)
      return JSC::JSBigInt::rightTrim(v22, (JSC::JSGlobalObject *)a1, a1[7], v17);
    v47 = *((_QWORD *)v22 + 3);
    if (qword_1ECF4C038)
    {
      v48 = (v47 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v49 = 8 * v14;
      if (!byte_1ECF4C022)
      {
        v51 = 8 * (v15 + ~(_DWORD)v14) + 8;
        if (disablePrimitiveGigacageRequested)
          v50 = (void *)(v47 + v49);
        else
          v50 = (void *)(v48 + v49);
        goto LABEL_30;
      }
      v50 = (void *)(v48 + v49);
    }
    else
    {
      v50 = (void *)(v47 + 8 * v14);
    }
    v51 = 8 * (v15 + ~(_DWORD)v14) + 8;
LABEL_30:
    bzero(v50, v51);
    return JSC::JSBigInt::rightTrim(v22, (JSC::JSGlobalObject *)a1, a1[7], v17);
  }
  return 0;
}

JSC::JSBigInt *JSC::JSBigInt::absoluteAndNot<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::VM **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v11;
  JSC::VM *v12;
  unsigned int v13;
  JSC::JSBigInt *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t v67;
  JSC::JSBigInt *v68;

  v11 = a1[7];
  v12 = (JSC::VM *)*(unsigned int *)(a2 + 8);
  v13 = *(_DWORD *)(a3 + 8);
  v14 = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, v11, v12, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v11 + 20))
  {
    v51 = *((_DWORD *)v11 + 20);
    if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
    {
      v68 = v14;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, v15, v16, v17, v18, v19, v20);
      v14 = v68;
    }
    if (*((_QWORD *)v11 + 2))
      return 0;
  }
  if (v13 >= v12)
    v21 = v12;
  else
    v21 = v13;
  if ((_DWORD)v21)
  {
    v22 = *(_QWORD *)(a2 + 24);
    if (qword_1ECF4C038)
    {
      v23 = (uint64_t *)((v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      v24 = *((_QWORD *)v14 + 3);
      v25 = (uint64_t *)((v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      v26 = *(_QWORD *)(a3 + 24);
      v27 = (uint64_t *)((v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      if (byte_1ECF4C022)
      {
        v28 = v21;
        do
        {
          v30 = *v23++;
          v29 = v30;
          v31 = *v27++;
          *v25++ = v29 & ~v31;
          --v28;
        }
        while (v28);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v60 = v21;
        do
        {
          v62 = *(_QWORD *)v22;
          v22 += 8;
          v61 = v62;
          v63 = *(_QWORD *)v26;
          v26 += 8;
          *(_QWORD *)v24 = v61 & ~v63;
          v24 += 8;
          --v60;
        }
        while (v60);
      }
      else
      {
        v52 = v21;
        do
        {
          v54 = *v23++;
          v53 = v54;
          v55 = *v27++;
          *v25++ = v53 & ~v55;
          --v52;
        }
        while (v52);
      }
    }
    else
    {
      v41 = *(uint64_t **)(a3 + 24);
      v42 = (uint64_t *)*((_QWORD *)v14 + 3);
      v43 = v21;
      do
      {
        v45 = *(_QWORD *)v22;
        v22 += 8;
        v44 = v45;
        v46 = *v41++;
        *v42++ = v44 & ~v46;
        --v43;
      }
      while (v43);
    }
  }
  if (v12 > v13)
  {
    v32 = *(_QWORD *)(a2 + 24);
    if (qword_1ECF4C038)
    {
      v33 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v34 = *((_QWORD *)v14 + 3);
      v35 = (v34 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v36 = (char *)v12 - v21;
        v37 = (_QWORD *)(v35 + 8 * v21);
        v38 = (uint64_t *)(v33 + 8 * v21);
        do
        {
          v39 = *v38++;
          *v37++ = v39;
          --v36;
        }
        while (v36);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v64 = (char *)v12 - v21;
        v65 = (_QWORD *)(v34 + 8 * v21);
        v66 = (uint64_t *)(v32 + 8 * v21);
        do
        {
          v67 = *v66++;
          *v65++ = v67;
          --v64;
        }
        while (v64);
      }
      else
      {
        v56 = (char *)v12 - v21;
        v57 = (_QWORD *)(v35 + 8 * v21);
        v58 = (uint64_t *)(v33 + 8 * v21);
        do
        {
          v59 = *v58++;
          *v57++ = v59;
          --v56;
        }
        while (v56);
      }
    }
    else
    {
      v47 = (char *)v12 - v21;
      v48 = (_QWORD *)(*((_QWORD *)v14 + 3) + 8 * v21);
      v49 = (uint64_t *)(v32 + 8 * v21);
      do
      {
        v50 = *v49++;
        *v48++ = v50;
        --v47;
      }
      while (v47);
    }
  }
  return JSC::JSBigInt::rightTrim(v14, (JSC::JSGlobalObject *)a1, a1[7], v16);
}

JSC::JSBigInt *JSC::JSBigInt::absoluteBitwiseOp<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl,JSC::JSBigInt* JSC::JSBigInt::absoluteXor<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSGlobalObject *,JSC::HeapBigIntImpl,JSC::HeapBigIntImpl)::{lambda(unsigned long long,unsigned long long)#1} &>(JSC::JSGlobalObject **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSBigInt *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  size_t v51;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;

  v11 = a1[7];
  v12 = *(unsigned int *)(a2 + 8);
  v13 = *(unsigned int *)(a3 + 8);
  if (v12 >= v13)
    v14 = v13;
  else
    v14 = v12;
  if (v12 <= v13)
    v15 = v13;
  else
    v15 = v12;
  v22 = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, a1[7], (JSC::VM *)v15, a4, a5, a6, a7, a8);
  if (!*((_DWORD *)v11 + 20))
    goto LABEL_8;
  v67 = *((_DWORD *)v11 + 20);
  if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v11 + 64), 7u, v16, v17, v18, v19, v20, v21);
  if (!*((_QWORD *)v11 + 2))
  {
LABEL_8:
    if ((_DWORD)v14)
    {
      v23 = *(_QWORD *)(a2 + 24);
      if (qword_1ECF4C038)
      {
        v24 = (uint64_t *)((v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
        v25 = (uint64_t *)((*((_QWORD *)v22 + 3) & 0x3FFFFFFFFLL) + qword_1ECF4C038);
        v26 = (uint64_t *)((*(_QWORD *)(a3 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038);
        if (byte_1ECF4C022)
        {
          v27 = v14;
          do
          {
            v29 = *v24++;
            v28 = v29;
            v30 = *v26++;
            *v25++ = v30 ^ v28;
            --v27;
          }
          while (v27);
        }
        else
        {
          if (disablePrimitiveGigacageRequested)
          {
            v25 = (uint64_t *)*((_QWORD *)v22 + 3);
            v26 = *(uint64_t **)(a3 + 24);
          }
          else
          {
            v23 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          }
          v68 = v14;
          do
          {
            v70 = *(_QWORD *)v23;
            v23 += 8;
            v69 = v70;
            v71 = *v26++;
            *v25++ = v71 ^ v69;
            --v68;
          }
          while (v68);
        }
      }
      else
      {
        v53 = *(uint64_t **)(a3 + 24);
        v54 = (uint64_t *)*((_QWORD *)v22 + 3);
        v55 = v14;
        do
        {
          v57 = *(_QWORD *)v23;
          v23 += 8;
          v56 = v57;
          v58 = *v53++;
          *v54++ = v58 ^ v56;
          --v55;
        }
        while (v55);
      }
    }
    if (v12 <= v13)
    {
      if (v13 > v12)
      {
        v39 = *(_QWORD *)(a3 + 24);
        if (qword_1ECF4C038)
        {
          v40 = (v39 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v41 = *((_QWORD *)v22 + 3);
          v42 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (byte_1ECF4C022)
          {
            v43 = v13 - v14;
            v44 = (_QWORD *)(v42 + 8 * v14);
            v45 = (uint64_t *)(v40 + 8 * v14);
            do
            {
              v46 = *v45++;
              *v44++ = v46;
              --v43;
            }
            while (v43);
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v84 = v13 - v14;
            v85 = (_QWORD *)(v41 + 8 * v14);
            v86 = (uint64_t *)(v39 + 8 * v14);
            do
            {
              v87 = *v86++;
              *v85++ = v87;
              --v84;
            }
            while (v84);
          }
          else
          {
            v76 = v13 - v14;
            v77 = (_QWORD *)(v42 + 8 * v14);
            v78 = (uint64_t *)(v40 + 8 * v14);
            do
            {
              v79 = *v78++;
              *v77++ = v79;
              --v76;
            }
            while (v76);
          }
        }
        else
        {
          v63 = v13 - v14;
          v64 = (_QWORD *)(*((_QWORD *)v22 + 3) + 8 * v14);
          v65 = (uint64_t *)(v39 + 8 * v14);
          do
          {
            v66 = *v65++;
            *v64++ = v66;
            --v63;
          }
          while (v63);
        }
        LODWORD(v14) = v13;
      }
    }
    else
    {
      v31 = *(_QWORD *)(a2 + 24);
      if (qword_1ECF4C038)
      {
        v32 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v33 = *((_QWORD *)v22 + 3);
        v34 = (v33 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v35 = v12 - v14;
          v36 = (_QWORD *)(v34 + 8 * v14);
          v37 = (uint64_t *)(v32 + 8 * v14);
          do
          {
            v38 = *v37++;
            *v36++ = v38;
            --v35;
          }
          while (v35);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v80 = v12 - v14;
          v81 = (_QWORD *)(v33 + 8 * v14);
          v82 = (uint64_t *)(v31 + 8 * v14);
          do
          {
            v83 = *v82++;
            *v81++ = v83;
            --v80;
          }
          while (v80);
        }
        else
        {
          v72 = v12 - v14;
          v73 = (_QWORD *)(v34 + 8 * v14);
          v74 = (uint64_t *)(v32 + 8 * v14);
          do
          {
            v75 = *v74++;
            *v73++ = v75;
            --v72;
          }
          while (v72);
        }
      }
      else
      {
        v59 = v12 - v14;
        v60 = (_QWORD *)(*((_QWORD *)v22 + 3) + 8 * v14);
        v61 = (uint64_t *)(v31 + 8 * v14);
        do
        {
          v62 = *v61++;
          *v60++ = v62;
          --v59;
        }
        while (v59);
      }
      LODWORD(v14) = v12;
    }
    if (v14 >= v15)
      return JSC::JSBigInt::rightTrim(v22, (JSC::JSGlobalObject *)a1, a1[7], v17);
    v47 = *((_QWORD *)v22 + 3);
    if (qword_1ECF4C038)
    {
      v48 = (v47 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      v49 = 8 * v14;
      if (!byte_1ECF4C022)
      {
        v51 = 8 * (v15 + ~(_DWORD)v14) + 8;
        if (disablePrimitiveGigacageRequested)
          v50 = (void *)(v47 + v49);
        else
          v50 = (void *)(v48 + v49);
        goto LABEL_30;
      }
      v50 = (void *)(v48 + v49);
    }
    else
    {
      v50 = (void *)(v47 + 8 * v14);
    }
    v51 = 8 * (v15 + ~(_DWORD)v14) + 8;
LABEL_30:
    bzero(v50, v51);
    return JSC::JSBigInt::rightTrim(v22, (JSC::JSGlobalObject *)a1, a1[7], v17);
  }
  return 0;
}

JSC::JSBigInt *JSC::JSBigInt::rightShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSBigInt *this, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  unint64_t v9;
  JSC::JSGlobalObject *v10;
  JSC::JSBigInt *result;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  _QWORD *v21;
  unint64_t v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::JSBigInt *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  int v71;
  int v72;
  uint64_t *v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v85;
  uint64_t v86;
  int v87;

  v5 = *((_QWORD *)this + 7);
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (*(_DWORD *)(a3 + 8) > 1u)
    goto LABEL_6;
  v8 = *(_QWORD *)(a3 + 24);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v8 = (v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 > 0x100000uLL)
  {
LABEL_6:
    v10 = (JSC::JSGlobalObject *)*((_QWORD *)this + 7);
    if (v6)
    {
      result = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(this, v10, (JSC::VM *)1, a4);
      if (result)
      {
        v12 = *((_QWORD *)result + 3);
        v13 = qword_1ECF4C038;
        if (!qword_1ECF4C038)
        {
LABEL_11:
          *(_QWORD *)v12 = 1;
          *((_BYTE *)result + 16) = 1;
          return result;
        }
        if (byte_1ECF4C022)
        {
LABEL_10:
          v12 = (v12 & 0x3FFFFFFFFLL) + v13;
          goto LABEL_11;
        }
LABEL_24:
        if (disablePrimitiveGigacageRequested)
          goto LABEL_11;
        goto LABEL_10;
      }
      return result;
    }
    return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(this, v10, 0, a4);
  }
  v14 = *(_DWORD *)(a2 + 8);
  v15 = v9 >> 6;
  v16 = v14 - (v9 >> 6);
  if (v16 > 0)
  {
    v17 = v14 - (v9 >> 6);
    v86 = *(unsigned int *)(a2 + 8);
    if (*(_BYTE *)(a2 + 16))
    {
      v18 = *(_QWORD *)(a2 + 24);
      v19 = v18;
      if (qword_1ECF4C038)
      {
        if (byte_1ECF4C022 || (v19 = *(_QWORD *)(a2 + 24), !disablePrimitiveGigacageRequested))
          v19 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      if ((*(_QWORD *)(v19 + 8 * v15) & ~(-1 << v9)) != 0)
      {
LABEL_18:
        if ((v9 & 0x3F) != 0)
        {
          v20 = 0;
        }
        else
        {
          if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
            v18 = (v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          if (*(_QWORD *)(v18 + 8 * (v14 - 1)) == -1)
            v17 = (v16 + 1);
          else
            v17 = v16;
          v20 = 1;
        }
        v87 = 1;
LABEL_42:
        v24 = v17;
        v25 = JSC::JSBigInt::createWithLength(this, (JSC::JSGlobalObject *)v5, (JSC::VM *)v17, a4);
        if (!*(_DWORD *)(v5 + 80))
          goto LABEL_43;
        v71 = *(_DWORD *)(v5 + 80);
        if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
        {
          v85 = v25;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v26, v27, v28, v29, v30, v31);
          v25 = v85;
        }
        if (!*(_QWORD *)(v5 + 16))
        {
LABEL_43:
          if (v20)
          {
            v32 = *(_QWORD *)(v25 + 24);
            v33 = qword_1ECF4C038;
            v34 = v32;
            if (qword_1ECF4C038)
            {
              if (byte_1ECF4C022 || (v34 = *(_QWORD *)(v25 + 24), !disablePrimitiveGigacageRequested))
                v34 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            }
            *(_QWORD *)(v34 + 8 * (v24 - 1)) = 0;
            if (v86 > v15)
            {
              v35 = *(_QWORD *)(a2 + 24);
              if (v33)
              {
                v36 = (v35 & 0x3FFFFFFFFLL) + v33;
                v37 = (_QWORD *)((v32 & 0x3FFFFFFFFLL) + v33);
                v38 = (v9 >> 6);
                if (byte_1ECF4C022)
                {
                  v39 = v86 - v38;
                  v40 = (uint64_t *)(v36 + 8 * v38);
                  do
                  {
                    v41 = *v40++;
                    *v37++ = v41;
                    --v39;
                  }
                  while (v39);
                }
                else
                {
                  if (!disablePrimitiveGigacageRequested)
                  {
                    v32 = (uint64_t)v37;
                    v35 = v36;
                  }
                  v77 = v86 - v38;
                  v78 = (uint64_t *)(v35 + 8 * v38);
                  do
                  {
                    v79 = *v78++;
                    *(_QWORD *)v32 = v79;
                    v32 += 8;
                    --v77;
                  }
                  while (v77);
                }
              }
              else
              {
                v65 = v86 - v15;
                v66 = (uint64_t *)(v35 + 8 * v15);
                do
                {
                  v67 = *v66++;
                  *(_QWORD *)v32 = v67;
                  v32 += 8;
                  --v65;
                }
                while (v65);
              }
            }
          }
          else
          {
            v42 = *(_QWORD *)(a2 + 24);
            v43 = qword_1ECF4C038;
            v44 = v42;
            if (qword_1ECF4C038)
            {
              if (byte_1ECF4C022 || (v44 = *(_QWORD *)(a2 + 24), !disablePrimitiveGigacageRequested))
                v44 = (v42 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            }
            v45 = *(_QWORD *)(v44 + 8 * v15) >> v9;
            v46 = (v16 - 1);
            if (v16 == 1)
            {
              v50 = *(_QWORD *)(v25 + 24);
            }
            else
            {
              v47 = v9 & 0x3F;
              v48 = 64 - (v9 & 0x3F);
              if (qword_1ECF4C038)
              {
                v49 = (v42 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                v50 = *(_QWORD *)(v25 + 24);
                v51 = (uint64_t *)((v50 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
                if (byte_1ECF4C022)
                {
                  v52 = v15 + 1;
                  v53 = (v16 - 1);
                  do
                  {
                    v54 = *(_QWORD *)(v49 + 8 * v52);
                    *v51++ = (v54 << v48) | v45;
                    v45 = v54 >> v47;
                    ++v52;
                    --v53;
                  }
                  while (v53);
                }
                else
                {
                  if (disablePrimitiveGigacageRequested)
                  {
                    v73 = *(uint64_t **)(v25 + 24);
                  }
                  else
                  {
                    v42 = (v42 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
                    v73 = (uint64_t *)((v50 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
                  }
                  v74 = v15 + 1;
                  v75 = (v16 - 1);
                  do
                  {
                    v76 = *(_QWORD *)(v42 + 8 * v74);
                    *v73++ = (v76 << v48) | v45;
                    v45 = v76 >> v47;
                    ++v74;
                    --v75;
                  }
                  while (v75);
                }
              }
              else
              {
                v62 = 0;
                v50 = *(_QWORD *)(v25 + 24);
                do
                {
                  v63 = *(_QWORD *)(v42 + 8 * (v15 + 1 + v62));
                  v64 = (v63 << v48) | v45;
                  v45 = v63 >> v47;
                  *(_QWORD *)(v50 + 8 * v62++) = v64;
                }
                while (v46 != v62);
              }
            }
            if (v43 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
              v50 = (v50 & 0x3FFFFFFFFLL) + v43;
            *(_QWORD *)(v50 + 8 * v46) = v45;
          }
          if (!v6)
            return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v25, this, *((JSC::VM **)this + 7), v27);
          *(_BYTE *)(v25 + 16) = 1;
          if (!v87)
            return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v25, this, *((JSC::VM **)this + 7), v27);
          v61 = JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v25, this, *((JSC::VM **)this + 7), v27);
          if (!*(_DWORD *)(v5 + 80))
            return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>(this, (uint64_t)v61, 0, v56);
          v72 = *(_DWORD *)(v5 + 80);
          if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v55, v56, v57, v58, v59, v60);
          if (!*(_QWORD *)(v5 + 16))
            return JSC::JSBigInt::absoluteAddOne<JSC::HeapBigIntImpl>(this, (uint64_t)v61, 0, v56);
        }
        return 0;
      }
      if ((_DWORD)v15)
      {
        if (qword_1ECF4C038)
        {
          v21 = (_QWORD *)((v18 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
          if (byte_1ECF4C022)
          {
            v22 = v9 >> 6;
            while (!*v21++)
            {
              if (!--v22)
                goto LABEL_33;
            }
          }
          else if (disablePrimitiveGigacageRequested)
          {
            v82 = *(_QWORD **)(a2 + 24);
            v83 = v9 >> 6;
            while (!*v82++)
            {
              if (!--v83)
                goto LABEL_33;
            }
          }
          else
          {
            v80 = v9 >> 6;
            while (!*v21++)
            {
              if (!--v80)
                goto LABEL_33;
            }
          }
        }
        else
        {
          v68 = *(_QWORD **)(a2 + 24);
          v69 = v9 >> 6;
          while (!*v68++)
          {
            if (!--v69)
              goto LABEL_33;
          }
        }
        goto LABEL_18;
      }
    }
LABEL_33:
    v87 = 0;
    v20 = (v9 & 0x3F) == 0;
    goto LABEL_42;
  }
  v10 = (JSC::JSGlobalObject *)*((_QWORD *)this + 7);
  if (!v6)
    return (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(this, v10, 0, a4);
  result = (JSC::JSBigInt *)JSC::JSBigInt::createWithLength(this, v10, (JSC::VM *)1, a4);
  if (result)
  {
    v12 = *((_QWORD *)result + 3);
    v13 = qword_1ECF4C038;
    if (!qword_1ECF4C038)
      goto LABEL_11;
    if (byte_1ECF4C022)
      goto LABEL_10;
    goto LABEL_24;
  }
  return result;
}

JSC::JSBigInt *JSC::JSBigInt::leftShiftByAbsolute<JSC::HeapBigIntImpl,JSC::HeapBigIntImpl>(JSC::JSBigInt *this, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  const WTF::String *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  JSC::Exception *v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  char v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  WTF::StringImpl *v78;

  v5 = *((_QWORD *)this + 7);
  if (*(_DWORD *)(a3 + 8) > 1u)
    goto LABEL_13;
  v7 = *(_QWORD *)(a3 + 24);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v7 = (v7 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v8 = *(_QWORD *)v7;
  if (*(_QWORD *)v7 > 0x100000uLL)
    goto LABEL_13;
  v9 = v8 >> 6;
  v10 = *(unsigned int *)(a2 + 8);
  v11 = *(_QWORD *)v7 & 0x3FLL;
  if ((v8 & 0x3F) != 0)
  {
    v12 = *(_QWORD *)(a2 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v12 = (v12 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v13 = *(_QWORD *)(v12 + 8 * (v10 - 1)) >> -(char)v11 != 0;
  }
  else
  {
    v13 = 0;
  }
  v14 = (v10 + v9 + v13);
  if (v14 > 0x4000)
  {
LABEL_13:
    v15 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v15 = 0x2F00000002;
    *(_QWORD *)(v15 + 8) = "BigInt generated from this operation is too big";
    *(_DWORD *)(v15 + 16) = 4;
    v78 = (WTF::StringImpl *)v15;
    v17 = JSC::createOutOfMemoryError((unint64_t)this, &v78, v16);
    v23 = (JSC::Exception *)v17;
    if ((v17 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C)))
    {
      v23 = (JSC::Exception *)JSC::Exception::create(v5, (JSC::VM *)v17, 0, v18, v19, v20, v21, v22);
    }
    JSC::VM::throwException((JSC::VM *)v5, this, v23);
    v31 = v78;
    v78 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
        WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
      }
      else
      {
        *(_DWORD *)v31 -= 2;
      }
    }
    return 0;
  }
  v77 = v10 + v9;
  v41 = JSC::JSBigInt::createWithLength(this, (JSC::JSGlobalObject *)v5, (JSC::VM *)(v10 + v9 + v13), a4);
  if (*(_DWORD *)(v5 + 80))
  {
    v72 = *(_DWORD *)(v5 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
    {
      v76 = v41;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v5 + 64), 7u, v42, v43, v44, v45, v46, v47);
      v41 = v76;
    }
    if (*(_QWORD *)(v5 + 16))
      return 0;
  }
  if ((_DWORD)v11)
  {
    if ((_DWORD)v9)
    {
      v48 = v41;
      v49 = *(_QWORD *)(v41 + 24);
      if (qword_1ECF4C038)
      {
        v50 = 8 * (v8 >> 6);
        if (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          v49 = (v49 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v50 = 8 * (v8 >> 6);
      }
      bzero((void *)v49, v50);
      v41 = v48;
    }
    if ((_DWORD)v10)
    {
      v51 = *(_QWORD *)(a2 + 24);
      v52 = v8 & 0x3F;
      v53 = 64 - v11;
      v54 = 0;
      if (qword_1ECF4C038)
      {
        v55 = (*(_QWORD *)(v41 + 24) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
          v56 = 1;
        else
          v56 = disablePrimitiveGigacageRequested == 0;
        if (v56)
          v51 = (v51 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        else
          v55 = *(_QWORD *)(v41 + 24);
        do
        {
          v57 = *(_QWORD *)v51;
          v51 += 8;
          *(_QWORD *)(v55 + 8 * v9) = (v57 << v52) | v54;
          v54 = v57 >> v53;
          ++v9;
          --v10;
        }
        while (v10);
      }
      else
      {
        v68 = *(_QWORD *)(v41 + 24);
        do
        {
          v69 = *(_QWORD *)v51;
          v51 += 8;
          *(_QWORD *)(v68 + 8 * v9) = (v69 << v52) | v54;
          v54 = v69 >> v53;
          ++v9;
          --v10;
        }
        while (v10);
      }
    }
    else
    {
      v54 = 0;
    }
    if (v13)
    {
      v67 = *(_QWORD *)(v41 + 24);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v67 = (v67 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_QWORD *)(v67 + 8 * v77) = v54;
    }
  }
  else
  {
    if ((_DWORD)v9)
    {
      v58 = v41;
      v59 = *(_QWORD *)(v41 + 24);
      if (qword_1ECF4C038)
      {
        v60 = 8 * v9;
        if (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
          v59 = (v59 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v60 = 8 * v9;
      }
      bzero((void *)v59, v60);
      v41 = v58;
    }
    if (v14 > v9)
    {
      v61 = *(_QWORD *)(a2 + 24);
      if (qword_1ECF4C038)
      {
        v62 = (v61 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        v63 = *(_QWORD *)(v41 + 24);
        v64 = (v63 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        if (byte_1ECF4C022)
        {
          v65 = 0;
          v66 = v64 + 8 * v9;
          do
          {
            *(_QWORD *)(v66 + 8 * v65) = *(_QWORD *)(v62 + 8 * v65);
            ++v65;
          }
          while (v14 - v9 != v65);
        }
        else if (disablePrimitiveGigacageRequested)
        {
          v75 = 0;
          do
          {
            *(_QWORD *)(v63 + 8 * v9 + 8 * v75) = *(_QWORD *)(v61 + 8 * v75);
            ++v75;
          }
          while (v14 - v9 != v75);
        }
        else
        {
          v73 = 0;
          v74 = v64 + 8 * v9;
          do
          {
            *(_QWORD *)(v74 + 8 * v73) = *(_QWORD *)(v62 + 8 * v73);
            ++v73;
          }
          while (v14 - v9 != v73);
        }
      }
      else
      {
        v70 = 0;
        v71 = *(_QWORD *)(v41 + 24) + 8 * v9;
        do
        {
          *(_QWORD *)(v71 + 8 * v70) = *(_QWORD *)(v61 + 8 * v70);
          ++v70;
        }
        while (v14 - v9 != v70);
      }
    }
  }
  *(_BYTE *)(v41 + 16) = *(_BYTE *)(a2 + 16) != 0;
  return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v41, this, *((JSC::VM **)this + 7), v43);
}

JSC::JSBigInt *JSC::JSBigInt::truncateToNBits<JSC::HeapBigIntImpl>(JSC::VM **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  JSC::VM *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;

  v9 = a2;
  v11 = a1[7];
  v12 = a2 + 63;
  v13 = (a2 + 63) >> 6;
  v14 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, v11, (JSC::VM *)v13, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v11 + 20))
  {
    v38 = *((_DWORD *)v11 + 20);
    if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
    {
      v42 = v14;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v11 + 64), 7u, v15, v16, v17, v18, v19, v20);
      v14 = v42;
    }
    if (*((_QWORD *)v11 + 2))
      return 0;
  }
  v21 = v13 - 1;
  v22 = *(_QWORD *)(a3 + 24);
  v23 = qword_1ECF4C038;
  if (v12 >= 0x80)
  {
    if (!qword_1ECF4C038)
    {
      v35 = *(_QWORD *)(v14 + 24);
      if ((int)v21 <= 1)
        v36 = 1;
      else
        v36 = v13 - 1;
      v37 = 8 * v36;
      do
      {
        *(_QWORD *)(v35 + v23) = *(_QWORD *)(v22 + v23);
        v23 += 8;
        v29 = 1;
      }
      while (v37 != v23);
      v23 = 0;
      goto LABEL_12;
    }
    v24 = (uint64_t *)((v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
    v25 = *(_QWORD *)(v14 + 24);
    v26 = (_QWORD *)((v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
    if ((int)v21 <= 1)
      v27 = 1;
    else
      v27 = v21;
    if (byte_1ECF4C022)
    {
      do
      {
        v28 = *v24++;
        *v26++ = v28;
        --v27;
      }
      while (v27);
    }
    else if (disablePrimitiveGigacageRequested)
    {
      v40 = *(uint64_t **)(a3 + 24);
      do
      {
        v41 = *v40++;
        *(_QWORD *)v25 = v41;
        v25 += 8;
        --v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        v39 = *v24++;
        *v26++ = v39;
        --v27;
      }
      while (v27);
    }
  }
  if (v23)
  {
    if (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    {
      v29 = 0;
      v22 = (v22 & 0x3FFFFFFFFLL) + v23;
    }
    else
    {
      v29 = 0;
    }
  }
  else
  {
    v29 = 1;
  }
LABEL_12:
  v30 = *(_QWORD *)(v22 + 8 * v21);
  v31 = 0xFFFFFFFFFFFFFFFFLL >> -(v9 & 0x3F);
  if ((v9 & 0x3F) == 0)
    v31 = -1;
  v32 = v30 & v31;
  v33 = *(_QWORD *)(v14 + 24);
  if ((v29 & 1) == 0 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v33 = (v33 & 0x3FFFFFFFFLL) + v23;
  *(_QWORD *)(v33 + 8 * v21) = v32;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(a3 + 16) != 0;
  return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v14, (JSC::JSGlobalObject *)a1, a1[7], v16);
}

JSC::JSBigInt *JSC::JSBigInt::truncateAndSubFromPowerOfTwo<JSC::HeapBigIntImpl>(JSC::VM **a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  char v10;
  JSC::VM *v12;
  JSC::VM *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;

  v8 = a4;
  v10 = a2;
  v12 = a1[7];
  v13 = (JSC::VM *)((a2 + 63) >> 6);
  v14 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)a1, v12, v13, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v12 + 20))
  {
    v51 = *((_DWORD *)v12 + 20);
    if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
    {
      v64 = v14;
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v12 + 64), 7u, v15, v16, v17, v18, v19, v20);
      v14 = v64;
    }
    if (*((_QWORD *)v12 + 2))
      return 0;
  }
  v21 = ((_DWORD)v13 - 1);
  v22 = *(_DWORD *)(a3 + 8);
  if (v22 >= (int)v21)
    v23 = v21;
  else
    v23 = v22;
  if ((int)v23 < 1)
  {
    v25 = 0;
    LODWORD(v23) = 0;
  }
  else
  {
    v24 = *(_QWORD *)(a3 + 24);
    v25 = qword_1ECF4C038;
    v26 = *(_QWORD *)(v14 + 24);
    if (qword_1ECF4C038)
    {
      v27 = (uint64_t *)((v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      v28 = (unint64_t *)((v26 & 0x3FFFFFFFFLL) + qword_1ECF4C038);
      if (byte_1ECF4C022)
      {
        v25 = 0;
        v29 = v23;
        do
        {
          v30 = *v27++;
          v31 = v30 != 0;
          v32 = -v30 - v25;
          if (-v30 >= v25)
            v25 = v31;
          else
            v25 = v31 + 1;
          *v28++ = v32;
          --v29;
        }
        while (v29);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v25 = 0;
        v58 = v23;
        do
        {
          v59 = *(_QWORD *)v24;
          v24 += 8;
          v60 = v59 != 0;
          v61 = -v59 - v25;
          if (-v59 >= v25)
            v25 = v60;
          else
            v25 = v60 + 1;
          *(_QWORD *)v26 = v61;
          v26 += 8;
          --v58;
        }
        while (v58);
      }
      else
      {
        v25 = 0;
        v52 = v23;
        do
        {
          v53 = *v27++;
          v54 = v53 != 0;
          v55 = -v53 - v25;
          if (-v53 >= v25)
            v25 = v54;
          else
            v25 = v54 + 1;
          *v28++ = v55;
          --v52;
        }
        while (v52);
      }
    }
    else
    {
      v45 = v23;
      do
      {
        v46 = *(_QWORD *)v24;
        v24 += 8;
        v47 = v46 != 0;
        v48 = -v46 - v25;
        if (-v46 >= v25)
          v25 = v47;
        else
          v25 = v47 + 1;
        *(_QWORD *)v26 = v48;
        v26 += 8;
        --v45;
      }
      while (v45);
    }
  }
  v33 = -(uint64_t)v25;
  if ((int)v23 >= (int)v21)
  {
    v39 = -(uint64_t)v25;
  }
  else
  {
    v34 = *(_QWORD *)(v14 + 24);
    if (qword_1ECF4C038)
    {
      v35 = (v34 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      if (byte_1ECF4C022)
      {
        v36 = v21 - v23;
        v37 = (uint64_t *)(v35 + 8 * v23);
        do
        {
          v38 = v25 == 0;
          v25 = v25 != 0;
          if (v38)
            v39 = 0;
          else
            v39 = -1;
          *v37++ = v33;
          v33 = v39;
          --v36;
        }
        while (v36);
      }
      else if (disablePrimitiveGigacageRequested)
      {
        v62 = v21 - v23;
        v63 = (uint64_t *)(v34 + 8 * v23);
        do
        {
          v38 = v25 == 0;
          v25 = v25 != 0;
          if (v38)
            v39 = 0;
          else
            v39 = -1;
          *v63++ = v33;
          v33 = v39;
          --v62;
        }
        while (v62);
      }
      else
      {
        v56 = v21 - v23;
        v57 = (uint64_t *)(v35 + 8 * v23);
        do
        {
          v38 = v25 == 0;
          v25 = v25 != 0;
          if (v38)
            v39 = 0;
          else
            v39 = -1;
          *v57++ = v33;
          v33 = v39;
          --v56;
        }
        while (v56);
      }
    }
    else
    {
      v49 = v21 - v23;
      v50 = (uint64_t *)(v34 + 8 * v23);
      do
      {
        v38 = v25 == 0;
        v25 = v25 != 0;
        if (v38)
          v39 = 0;
        else
          v39 = -1;
        *v50++ = v33;
        v33 = v39;
        --v49;
      }
      while (v49);
    }
  }
  if ((int)v13 <= v22)
  {
    v41 = *(_QWORD *)(a3 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v40 = *(_QWORD *)(v41 + 8 * v21);
  }
  else
  {
    v40 = 0;
  }
  if ((v10 & 0x3F) != 0)
    v42 = (v39 + (1 << (v10 & 0x3F)) - (v40 & (0xFFFFFFFFFFFFFFFFLL >> -(v10 & 0x3F)))) & ((1 << (v10 & 0x3F)) - 1);
  else
    v42 = -(uint64_t)v25 - v40;
  v43 = *(_QWORD *)(v14 + 24);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v43 = (v43 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)(v43 + 8 * v21) = v42;
  *(_BYTE *)(v14 + 16) = v8;
  return JSC::JSBigInt::rightTrim((JSC::JSBigInt *)v14, (JSC::JSGlobalObject *)a1, a1[7], v16);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::computeJSCBytecodeCacheVersion(void)::$_0 &&>>()
{
  unsigned int v0;
  int v1;
  unsigned __int8 *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  _BYTE v7[37];
  unsigned __int8 uu[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (dyld_image_header_containing_address() && (*(_QWORD *)uu = 0, v9 = 0, _dyld_get_image_uuid()))
  {
    v0 = -1640531527;
    memset(v7, 0, sizeof(v7));
    uuid_unparse(uu, v7);
    v1 = v7[0];
    if (v7[0])
    {
      v2 = &v7[2];
      while (*(v2 - 1))
      {
        v0 = (((v0 + v1) << 16) ^ (*(v2 - 1) << 11) ^ (v0 + v1))
           + ((((v0 + v1) << 16) ^ (*(v2 - 1) << 11) ^ (v0 + v1)) >> 11);
        v3 = *v2;
        v2 += 2;
        v1 = v3;
        if (!v3)
          goto LABEL_10;
      }
      v0 = ((v0 + v1) ^ ((v0 + v1) << 11)) + (((v0 + v1) ^ ((v0 + v1) << 11)) >> 17);
    }
LABEL_10:
    v4 = (v0 ^ (8 * v0)) + ((v0 ^ (8 * v0)) >> 5);
    v5 = (v4 ^ (4 * v4)) + ((v4 ^ (4 * v4)) >> 15);
    v6 = v5 ^ (v5 << 10);
    if (!v6)
      v6 = 0x800000;
    _MergedGlobals_44 = v6;
  }
  else
  {
    _MergedGlobals_44 = 0;
  }
}

double JSC::JSValue::toIntegerPreserveNaN(unsigned __int8 **this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unsigned __int8 *v9;
  double v11;
  unsigned int v12;
  const char *v13;
  JSC::JSGlobalObject *v14;
  uint64_t v15;
  JSC::VM *v16;

  v9 = *this;
  if ((unint64_t)v9 < 0xFFFE000000000000)
  {
    if ((unint64_t)(v9 - 0x2000000000000) > 0xFFFBFFFFFFFFFFFFLL)
    {
      if (((unint64_t)v9 & 0xFFFE000000000002) != 0)
      {
        v11 = NAN;
        if (v9 != (unsigned __int8 *)10)
          v11 = 0.0;
        if (v9 == (unsigned __int8 *)7)
          v11 = 1.0;
      }
      else
      {
        v12 = v9[5];
        if (v9 && v12 == 2)
        {
          JSC::JSString::toNumber((JSC::JSString *)v9, a2, a3, a4, a5, a6, a7, a8, a9);
        }
        else
        {
          if (v9 && v12 == 4)
          {
            v16 = (JSC::VM *)*((_QWORD *)a2 + 7);
            v13 = "Cannot convert a symbol to a number";
            v14 = a2;
            v15 = 36;
          }
          else
          {
            if (!v9 || v12 != 3)
            {
              if (v12 <= 0x16)
              {
                __break(0xC471u);
                JUMPOUT(0x19899A280);
              }
              v11 = JSC::JSObject::toNumber((JSC::JSObject *)v9, a2, a3, a4, a5, a6, a7, a8);
              return trunc(v11);
            }
            v16 = (JSC::VM *)*((_QWORD *)a2 + 7);
            v13 = "Conversion from 'BigInt' to 'number' is not allowed.";
            v14 = a2;
            v15 = 53;
          }
          JSC::throwTypeError((unint64_t)v14, &v16, (uint64_t)v13, v15);
          v11 = 0.0;
        }
      }
    }
    else
    {
      *(_QWORD *)&v11 = v9 - 0x2000000000000;
    }
    return trunc(v11);
  }
  return (double)(int)v9;
}

unint64_t JSC::JSValue::toLength(JSC::JSObject **this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  double v10;

  if ((unint64_t)*this >= 0xFFFE000000000000)
    return *this & ~((int)*this >> 31);
  v10 = JSC::JSValue::toIntegerOrInfinity(this, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v10 <= 0.0)
    return 0;
  if (v10 > 9.00719925e15)
    return (unint64_t)9.00719925e15;
  return (unint64_t)v10;
}

void JSC::JSValue::toNumberSlowCase(JSC::JSObject **this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSObject *v9;
  unsigned int v10;
  BOOL v11;
  unint64_t v12;
  int *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *i;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  int v27;
  const char *v28;
  JSC::JSGlobalObject *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char *v42;
  char *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unint64_t v47;
  unint64_t v48;

  v9 = *this;
  if (((unint64_t)*this & 0xFFFE000000000002) != 0)
    return;
  v10 = *((unsigned __int8 *)v9 + 5);
  if (v9)
    v11 = v10 == 2;
  else
    v11 = 0;
  if (!v11)
  {
    if (v9)
      v26 = v10 == 4;
    else
      v26 = 0;
    if (v26)
    {
      v46 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
      v28 = "Cannot convert a symbol to a number";
      v29 = a2;
      v30 = 36;
    }
    else
    {
      if (!v9 || v10 != 3)
      {
        if (v10 <= 0x16)
        {
          __break(0xC471u);
          JUMPOUT(0x19899A5B8);
        }
        JSC::JSObject::toNumber(*this, a2, a3, a4, a5, a6, a7, a8);
        return;
      }
      v46 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
      v28 = "Conversion from 'BigInt' to 'number' is not allowed.";
      v29 = a2;
      v30 = 53;
    }
    JSC::throwTypeError((unint64_t)v29, (JSC::VM **)&v46, (uint64_t)v28, v30);
    return;
  }
  v12 = *((_QWORD *)a2 + 7);
  v13 = (int *)*((_QWORD *)v9 + 1);
  if ((v13 & 1) == 0)
  {
    if (v13)
    {
LABEL_9:
      v14 = (char *)*((_QWORD *)v13 + 1);
      v15 = v13[1] | ((unint64_t)((v13[4] >> 2) & 1) << 32);
      goto LABEL_10;
    }
LABEL_30:
    v14 = 0;
    v15 = 0x100000000;
    goto LABEL_10;
  }
  if ((v13 & 2) == 0)
  {
    v13 = *JSC::JSRopeString::resolveRope((unint64_t)*this, a2, a3, a4, a9, a5, a6, a7, a8);
    if (v13)
      goto LABEL_9;
    goto LABEL_30;
  }
  v19 = *(_QWORD *)((*(_QWORD *)((_BYTE *)v9 + 20) & 0xFFFFFFFFFLL) + 8);
  if (v19)
  {
    v14 = *(char **)(v19 + 8);
    v20 = *(unsigned int *)(v19 + 4) | ((unint64_t)((*(_DWORD *)(v19 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v14 = 0;
    v20 = 0x100000000;
  }
  v21 = *((_QWORD *)v9 + 3);
  v22 = v21 >> 16;
  if (v20 <= (v21 >> 16))
  {
    v15 = 0x100000000;
    v14 = &str_105_2;
  }
  else
  {
    v23 = *((_DWORD *)v9 + 4);
    if (v20 - (v21 >> 16) > v23 || (v23 = v20 - (v21 >> 16), (_DWORD)v22))
    {
      v24 = (v21 >> 16);
      v15 = v23;
      v25 = v20 - (unint64_t)v22;
      if ((v20 & 0x100000000) != 0)
      {
        if (v25 < v23)
          goto LABEL_93;
        v14 += v24;
        v15 = v23 | 0x100000000;
      }
      else
      {
        if (v25 < v23)
          goto LABEL_93;
        v14 += 2 * v24;
      }
    }
    else
    {
      v15 = v20;
    }
  }
LABEL_10:
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_11;
  v27 = *(_DWORD *)(v12 + 80);
  if ((v27 & 0x27) != 0 && (v27 & 0x20) == 0)
  {
    v43 = v14;
    v32 = v15;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    v15 = v32;
    v14 = v43;
  }
  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_11:
    v16 = v15;
    if ((v15 & 0x100000000) != 0)
    {
      switch((_DWORD)v15)
      {
        case 1:
          return;
        case 2:
          if (*v14 == 45)
            return;
          break;
        case 0:
          return;
      }
      v17 = 0;
      for (i = (unsigned __int8 *)v14; ; ++i)
      {
        v33 = v14[v17];
        if ((v33 - 9) >= 5 && v33 != 32 && v33 != 160)
          break;
        if (v16 == ++v17)
          return;
      }
      v42 = v14;
      v44 = i;
      v45 = v17;
      v12 = v16 - v17;
      v46 = i;
      v47 = v16 - v17;
      if ((unint64_t)(v16 - v17) >= 3 && v33 == 48)
      {
        v40 = v14[v17 + 1] & 0xDF;
        if (v40 == 66)
        {
          if ((v42[v17 + 2] & 0xFE) == 0x30)
          {
            JSC::jsBinaryIntegerLiteral<unsigned char>((unint64_t *)&v46);
            goto LABEL_114;
          }
        }
        else if (v40 == 88)
        {
          v41 = v42[v17 + 2];
          if ((v41 - 48) < 0xA || (v41 | 0x20u) - 97 <= 5)
          {
            JSC::jsHexIntegerLiteral<unsigned char>((unint64_t *)&v46);
            goto LABEL_114;
          }
        }
        else if (v40 == 79 && (v42[v17 + 2] & 0xF8) == 0x30)
        {
          JSC::jsOctalIntegerLiteral<unsigned char>((unint64_t *)&v46);
          goto LABEL_114;
        }
        JSC::jsStrDecimalLiteral<unsigned char>(&v46);
LABEL_114:
        v36 = v47;
LABEL_72:
        if (v36)
        {
          v37 = v46;
          do
          {
            v38 = *v37;
            if ((v38 - 9) >= 5 && v38 != 32 && v38 != 160)
              break;
            ++v37;
            --v36;
          }
          while (v36);
        }
        return;
      }
      v48 = 0;
      v34 = fast_float::from_chars_advanced<double,char>(i, &i[v16 - v17], &v48, 0x2E00000005);
      v35 = v34 - v44;
      if (v34 == v44)
      {
        v39 = v42[v45];
        if (v39 != 43)
        {
          if (v39 == 45)
          {
            v36 = v12 - 9;
            if (v12 - 9 <= 0xFFFFFFFFFFFFFFF7
              && v42[v45 + 1] == 73
              && v42[v45 + 2] == 110
              && v42[v45 + 3] == 102
              && v42[v45 + 4] == 105
              && v42[v45 + 5] == 110
              && v42[v45 + 6] == 105
              && v42[v45 + 7] == 116
              && v42[v45 + 8] == 121)
            {
              goto LABEL_113;
            }
          }
          else if (v39 == 73)
          {
            v36 = v12 - 8;
            if (v12 >= 8
              && v42[v45 + 1] == 110
              && v42[v45 + 2] == 102
              && v42[v45 + 3] == 105
              && v42[v45 + 4] == 110
              && v42[v45 + 5] == 105
              && v42[v45 + 6] == 116
              && v42[v45 + 7] == 121)
            {
              v35 = 8;
              goto LABEL_71;
            }
          }
          goto LABEL_114;
        }
        goto LABEL_94;
      }
      if (v12 >= v35)
      {
        v36 = v16 + v44 - v34 - v45;
LABEL_71:
        v46 = (unsigned __int8 *)&v42[v45 + v35];
        v47 = v36;
        goto LABEL_72;
      }
LABEL_93:
      __break(1u);
LABEL_94:
      v36 = v12 - 9;
      if (v12 - 9 <= 0xFFFFFFFFFFFFFFF7
        && v42[v45 + 1] == 73
        && v42[v45 + 2] == 110
        && v42[v45 + 3] == 102
        && v42[v45 + 4] == 105
        && v42[v45 + 5] == 110
        && v42[v45 + 6] == 105
        && v42[v45 + 7] == 116
        && v42[v45 + 8] == 121)
      {
LABEL_113:
        v35 = 9;
        goto LABEL_71;
      }
      goto LABEL_114;
    }
    if ((_DWORD)v15 == 1)
    {
      v31 = *(unsigned __int16 *)v14;
      if (v31 - 48 > 9 && v31 > 0xFF)
        u_charType(*(unsigned __int16 *)v14);
    }
    else if ((_DWORD)v15 != 2 || *(_WORD *)v14 != 45)
    {
      JSC::toDouble<char16_t>((uint64_t)v14, v15);
    }
  }
}

double JSC::JSCell::toNumber(JSC::JSCell *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unsigned int v9;
  double result;
  const char *v11;
  JSC::JSGlobalObject *v12;
  uint64_t v13;
  JSC::VM *v14;

  v9 = *((unsigned __int8 *)this + 5);
  if (this && v9 == 2)
  {
    JSC::JSString::toNumber(this, a2, a3, a4, a5, a6, a7, a8, a9);
    return result;
  }
  if (this && v9 == 4)
  {
    v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v11 = "Cannot convert a symbol to a number";
    v12 = a2;
    v13 = 36;
LABEL_13:
    JSC::throwTypeError((unint64_t)v12, &v14, (uint64_t)v11, v13);
    return 0.0;
  }
  if (this && v9 == 3)
  {
    v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v11 = "Conversion from 'BigInt' to 'number' is not allowed.";
    v12 = a2;
    v13 = 53;
    goto LABEL_13;
  }
  if (v9 <= 0x16)
  {
    __break(0xC471u);
    JUMPOUT(0x19899AB74);
  }
  return JSC::JSObject::toNumber(this, a2, a3, a4, a5, a6, a7, a8);
}

double JSC::JSValue::toNumberFromPrimitive(JSC::JSValue *this)
{
  unint64_t v1;
  double result;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return 0.0;
  if (v1 >> 49)
  {
    result = (double)(int)v1;
    if (v1 <= 0xFFFDFFFFFFFFFFFFLL)
      *(_QWORD *)&result = v1 - 0x2000000000000;
  }
  else if ((v1 & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    result = 0.0;
    if (v1 == 7)
      return 1.0;
  }
  else
  {
    result = NAN;
    if (v1 != 10)
      return 0.0;
  }
  return result;
}

void JSC::JSValue::toBigInt(JSC::Structure **this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  int *v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  const char *v35;
  int v36;
  unsigned int v37;
  unint64_t v39;
  JSC::VM *v40;

  v10 = *((_QWORD *)a2 + 7);
  v40 = (JSC::VM *)v10;
  v11 = (unint64_t)*this;
  if (((unint64_t)*this & 0xFFFE000000000002) == 0)
  {
    v37 = *(unsigned __int8 *)(v11 + 5);
    if (!v11 || v37 - 5 <= 0xFFFFFFFC)
    {
      if (v37 <= 0x16)
      {
        __break(0xC471u);
        goto LABEL_64;
      }
      v11 = JSC::JSObject::toPrimitive(*this, (JSC::VM **)a2, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    }
  }
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_3;
  v33 = *(_DWORD *)(v10 + 80);
  if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_3:
    if ((v11 & 0xFFFE000000000002) != 0)
    {
      if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 6)
        goto LABEL_20;
    }
    else
    {
      v12 = *(unsigned __int8 *)(v11 + 5);
      if (v12 == 3)
        return;
      if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        if (v12 == 2)
        {
          v13 = *((_QWORD *)a2 + 7);
          v14 = *(int **)(v11 + 8);
          if ((v14 & 1) == 0)
          {
            if (v14)
            {
LABEL_9:
              v15 = (const char *)*((_QWORD *)v14 + 1);
              v16 = v14[1] | ((unint64_t)((v14[4] >> 2) & 1) << 32);
LABEL_10:
              if (!*(_DWORD *)(v13 + 80))
                goto LABEL_11;
              v39 = v16;
              v35 = v15;
              v36 = *(_DWORD *)(v13 + 80);
              if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
              v15 = v35;
              v16 = v39;
              if (!*(_QWORD *)(v13 + 16))
              {
LABEL_11:
                if ((v16 & 0x100000000) != 0)
                  JSC::JSBigInt::parseInt<unsigned char>(a2, (uint64_t)v15, v16, 0, a5);
                else
                  JSC::JSBigInt::parseInt<char16_t>(a2, (uint64_t)v15, v16, 0);
              }
              return;
            }
LABEL_35:
            v15 = 0;
            v16 = 0x100000000;
            goto LABEL_10;
          }
          if ((v14 & 2) == 0)
          {
            v14 = *JSC::JSRopeString::resolveRope(v11, a2, a3, a4, a9, a5, a6, a7, a8);
            if (v14)
              goto LABEL_9;
            goto LABEL_35;
          }
          v26 = *(_QWORD *)((*(_QWORD *)(v11 + 20) & 0xFFFFFFFFFLL) + 8);
          if (v26)
          {
            v15 = *(const char **)(v26 + 8);
            v27 = *(unsigned int *)(v26 + 4) | ((unint64_t)((*(_DWORD *)(v26 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v15 = 0;
            v27 = 0x100000000;
          }
          v28 = *(_QWORD *)(v11 + 24);
          v29 = v28 >> 16;
          if (v27 <= (v28 >> 16))
          {
            v16 = 0x100000000;
            v15 = "";
            goto LABEL_10;
          }
          v30 = *(_DWORD *)(v11 + 16);
          if (v27 - (v28 >> 16) <= v30)
          {
            v30 = v27 - (v28 >> 16);
            if (!(_DWORD)v29)
            {
              v16 = v27;
              goto LABEL_10;
            }
          }
          v31 = (v28 >> 16);
          v16 = v30;
          v32 = v27 - (unint64_t)v29;
          if ((v27 & 0x100000000) != 0)
          {
            if (v32 >= v30)
            {
              v15 += v31;
              v16 = v30 | 0x100000000;
              goto LABEL_10;
            }
          }
          else if (v32 >= v30)
          {
            v15 += 2 * v31;
            goto LABEL_10;
          }
LABEL_64:
          __break(1u);
          return;
        }
LABEL_20:
        JSC::throwTypeError((unint64_t)a2, &v40, (uint64_t)"Invalid argument type in ToBigInt operation", 44);
        return;
      }
    }
    v17 = *((_QWORD *)a2 + 7);
    if (v11 == 7)
    {
      v24 = JSC::JSBigInt::createWithLength(a2, *((JSC::JSGlobalObject **)a2 + 7), (JSC::VM *)1, a4, a5, a6, a7, a8);
      if (!*(_DWORD *)(v17 + 80))
        goto LABEL_16;
      v34 = *(_DWORD *)(v17 + 80);
      if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v17 + 64), 7u, v18, v19, v20, v21, v22, v23);
      if (!*(_QWORD *)(v17 + 16))
      {
LABEL_16:
        v25 = *(_QWORD *)(v24 + 24);
        if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
          v25 = (v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        *(_QWORD *)v25 = 1;
      }
    }
    else
    {
      JSC::JSBigInt::createWithLength(a2, *((JSC::JSGlobalObject **)a2 + 7), 0, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::JSValue::toBigInt64(JSC::Structure **this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;

  v9 = *((_QWORD *)a2 + 7);
  JSC::JSValue::toBigInt(this, a2, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v9 + 80))
  {
    v20 = *(_DWORD *)(v9 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
    {
      v21 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v11, v12, v13, v14, v15, v16);
      v10 = v21;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if (!*(_DWORD *)(v10 + 8))
    return 0;
  v17 = *(_QWORD *)(v10 + 24);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v17 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v18 = *(_QWORD *)v17;
  if (*(_BYTE *)(v10 + 16))
    return -v18;
  else
    return v18;
}

uint64_t JSC::JSValue::toBigUInt64(JSC::Structure **this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;

  v9 = *((_QWORD *)a2 + 7);
  JSC::JSValue::toBigInt(this, a2, a3, a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v9 + 80))
  {
    v20 = *(_DWORD *)(v9 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
    {
      v21 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v11, v12, v13, v14, v15, v16);
      v10 = v21;
    }
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if (!*(_DWORD *)(v10 + 8))
    return 0;
  v17 = *(_QWORD *)(v10 + 24);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v17 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v18 = *(_QWORD *)v17;
  if (*(_BYTE *)(v10 + 16))
    return -v18;
  else
    return v18;
}

unint64_t JSC::JSValue::toObjectSlowCase(JSC::JSValue *this, JSC::JSGlobalObject *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::VM *v11;
  unint64_t NotAnObjectError;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(_QWORD *)this;
  if (*(_QWORD *)this >> 49)
    return JSC::constructNumber((uint64_t)a2, (JSC::VM *)v9, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) == 6)
    return JSC::constructBooleanFromImmediateBoolean((uint64_t)a2, v9, a3, a4, a5, a6, a7, a8);
  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  NotAnObjectError = JSC::createNotAnObjectError((unint64_t)a2, v9);
  JSC::VM::throwException(v11, a2, NotAnObjectError, v13, v14, v15, v16, v17);
  return 0;
}

uint64_t JSC::JSValue::toThisSloppySlowCase(JSC::JSValue *this, JSC::JSGlobalObject *a2, JSC::Structure *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this >> 49)
    return JSC::constructNumber((uint64_t)a2, (JSC::VM *)v8, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 6)
    return JSC::constructBooleanFromImmediateBoolean((uint64_t)a2, v8, a3, (uint64_t)a4, a5, a6, a7, a8);
  return JSC::JSValue::toObject(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSValue::synthesizePrototype(JSC::JSValue *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t (*v6)(_QWORD *);
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  JSC::VM *v11;
  unint64_t NotAnObjectError;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];

  v2 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 0xFFFE000000000002) != 0)
  {
    if (v2 >> 49)
    {
      v3 = *(_QWORD *)(a2 + 1536);
      if ((v3 & 1) == 0)
        goto LABEL_4;
      v6 = *(uint64_t (**)(_QWORD *))(v3 & 0xFFFFFFFFFFFFFFFCLL);
      v10 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v10 = (uint64_t *)(a2 - 16);
      v8 = *v10;
      v9 = (char *)(a2 + 1536);
    }
    else
    {
      if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        v11 = *(JSC::VM **)(a2 + 56);
        NotAnObjectError = JSC::createNotAnObjectError(a2, v2);
        JSC::VM::throwException(v11, (JSC::JSGlobalObject *)a2, NotAnObjectError, v14, v15, v16, v17, v18);
        return 0;
      }
      v3 = *(_QWORD *)(a2 + 1472);
      if ((v3 & 1) == 0)
        goto LABEL_4;
      v6 = *(uint64_t (**)(_QWORD *))(v3 & 0xFFFFFFFFFFFFFFFCLL);
      v7 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v7 = (uint64_t *)(a2 - 16);
      v8 = *v7;
      v9 = (char *)(a2 + 1472);
    }
    v19[0] = v8;
    v19[1] = a2;
    v19[2] = v9;
    v3 = v6(v19);
LABEL_4:
    if (*(_QWORD *)(v3 + 48) == 2)
      return 0;
    else
      return *(_QWORD *)(v3 + 48);
  }
  v5 = *(unsigned __int8 *)(v2 + 5);
  if (v5 == 2)
    return *(_QWORD *)(a2 + 1192);
  if (v5 == 3)
    return *(_QWORD *)(a2 + 1208);
  return *(_QWORD *)(a2 + 1216);
}

uint64_t JSC::JSValue::putToPrimitive(JSC::JSValue *a1, JSC::JSGlobalObject *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  int v10;
  _WORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  const WTF::StringImpl *v16;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  _DWORD *v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  JSC::VM *v29;

  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v29 = v9;
  if (!a3)
    goto LABEL_10;
  v10 = *(_DWORD *)(a3 + 16);
  if ((v10 & 0x20) != 0)
    goto LABEL_10;
  v11 = *(_WORD **)(a3 + 8);
  v12 = *(unsigned int *)(a3 + 4);
  if ((v10 & 4) == 0)
  {
    if ((_DWORD)v12)
    {
      v13 = (unsigned __int16)*v11 - 48;
      if (v13 <= 9 && (*v11 != 48 || v12 <= 1))
      {
        v19 = v11 + 1;
        v20 = v12 - 1;
        while (v20)
        {
          if (v13 > 0x19999999)
            goto LABEL_6;
          v21 = *v19 - 48;
          if (v21 > 9)
            goto LABEL_6;
          v14 = 0;
          LODWORD(v12) = 0;
          v15 = 0;
          v22 = __CFADD__(v21, 10 * v13);
          v13 = v21 + 10 * v13;
          ++v19;
          --v20;
          if (v22)
            goto LABEL_8;
        }
        v14 = 0x100000000;
        if (v13 == -1)
        {
          v14 = 0;
          LODWORD(v12) = 0;
        }
        else
        {
          LODWORD(v12) = v13;
        }
        if (v13 == -1)
          v15 = 0;
        else
          v15 = v13 & 0xFFFFFF00;
        goto LABEL_8;
      }
LABEL_6:
      v14 = 0;
      LODWORD(v12) = 0;
    }
    else
    {
      v14 = 0;
    }
    v15 = 0;
LABEL_8:
    v16 = (const WTF::StringImpl *)(v15 | v12);
    goto LABEL_9;
  }
  if ((_DWORD)v12)
  {
    v24 = *(unsigned __int8 *)v11 - 48;
    if (v24 <= 9 && (v12 < 2 || *(_BYTE *)v11 != 48))
    {
      v26 = v12 - 1;
      v27 = (unsigned __int8 *)v11 + 1;
      while (v26)
      {
        if (v24 > 0x19999999)
          goto LABEL_39;
        v28 = *v27 - 48;
        if (v28 > 9)
          goto LABEL_39;
        LODWORD(v12) = 0;
        v25 = 0;
        v14 = 0;
        v22 = __CFADD__(v28, 10 * v24);
        v24 = v28 + 10 * v24;
        --v26;
        ++v27;
        if (v22)
          goto LABEL_41;
      }
      if (v24 == -1)
        LODWORD(v12) = 0;
      else
        LODWORD(v12) = v24 & 0xFFFFFF00;
      if (v24 == -1)
        v25 = 0;
      else
        v25 = v24;
      if (v24 == -1)
        v14 = 0;
      else
        v14 = 0x100000000;
      goto LABEL_41;
    }
LABEL_39:
    LODWORD(v12) = 0;
  }
  v25 = 0;
  v14 = 0;
LABEL_41:
  v16 = (const WTF::StringImpl *)(v25 | v12);
LABEL_9:
  if ((v14 & 0x100000000) != 0)
    return JSC::JSValue::putToPrimitiveByIndex(a1, a2, v16, a4, *(_BYTE *)(a5 + 20) & 1, a6, a7, a8);
LABEL_10:
  if ((*(_QWORD *)a1 & 0xFFFE000000000002) == 0
    && *(_BYTE *)(*(_QWORD *)a1 + 5) == 2
    && *(_QWORD *)(*((_QWORD *)v9 + 5244) + 1768) == a3)
  {
    if ((*(_BYTE *)(a5 + 20) & 1) != 0)
      JSC::throwTypeError((unint64_t)a2, &v29, (uint64_t)"Attempted to assign to readonly property.", 42);
    return 0;
  }
  v23 = (_DWORD *)JSC::JSValue::synthesizePrototype(a1, (unint64_t)a2);
  if (!v23)
    return 0;
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*v23 & 0xFFFFFFFE) + 0x4C) + 0x48))();
}

BOOL JSC::JSValue::putToPrimitiveByIndex(JSC::JSValue *a1, JSC::JSGlobalObject *a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  const WTF::StringImpl *v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  WTF::StringImpl *v43;
  _QWORD v44[2];
  int v45;
  char v46;
  __int16 v47;
  char v48;
  uint64_t v49;
  JSC::VM *v50;

  v12 = *((_QWORD *)a2 + 7);
  v50 = (JSC::VM *)v12;
  if ((_DWORD)a3 != -1)
  {
    v14 = JSC::JSValue::synthesizePrototype(a1, (unint64_t)a2);
    if (v14)
    {
      LOBYTE(v44[0]) = 0;
      v22 = JSC::JSObject::attemptToInterceptPutByIndexOnHoleForPrototype(v14, (unint64_t)a2, *(const WTF::StringImpl **)a1, (unint64_t)a3, a4, a5, v44, v15);
      if (!*(_DWORD *)(v12 + 80))
        goto LABEL_4;
      v42 = *(_DWORD *)(v12 + 80);
      if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v16, v17, v18, v19, v20, v21);
      if (!*(_QWORD *)(v12 + 16))
      {
LABEL_4:
        if (v22)
          return LOBYTE(v44[0]) != 0;
        if ((_DWORD)a5)
          JSC::throwTypeError((unint64_t)a2, &v50, (uint64_t)"Attempted to assign to readonly property.", 42);
      }
    }
    return 0;
  }
  v24 = *(const WTF::StringImpl **)a1;
  v44[0] = 0;
  v44[1] = v24;
  v45 = -1;
  v46 = a5;
  v47 = 0;
  v48 = 1;
  v49 = 0;
  JSC::Identifier::from((uint64_t **)v12, 0xFFFFFFFFuLL, a3, a4, a5, a6, a7, a8, (int **)&v43);
  v23 = JSC::JSValue::putToPrimitive((int)a1, a2);
  v32 = v43;
  v43 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  return v23;
}

uint64_t JSC::JSValue::dump(JSC::JSValue *this, WTF::PrintStream *a2)
{
  BOOL v2;
  JSC::Structure *v3;

  if (*(_QWORD *)this)
    v2 = (*(_QWORD *)this & 0xFFFE000000000002) == 0;
  else
    v2 = 0;
  if (v2)
    v3 = (JSC::Structure *)(16 * (**(_DWORD **)this & 0xFFFFFFFE));
  else
    v3 = 0;
  return JSC::JSValue::dumpInContextAssumingStructure(this, a2, 0, v3);
}

uint64_t JSC::JSValue::dumpInContextAssumingStructure(JSC::JSValue *this, WTF::PrintStream *a2, JSC::DumpContext *a3, JSC::Structure *a4)
{
  unint64_t v5;
  WTF::PrintStream *v7;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t v15;
  WTF::PrintStream *v17;
  uint64_t v18;
  WTF::PrintStream *v19;
  int v20;
  WTF::PrintStream *v21;
  int v22;
  const char *v23;
  _BOOL4 v24;
  uint64_t v25;
  WTF::PrintStream *v27;
  _BOOL4 v28;
  uint64_t v29;
  WTF::PrintStream *v31;
  WTF::PrintStream *v32;
  uint64_t v33;
  const char *v34;
  WTF::PrintStream *v35;
  uint64_t v36;
  int *v37;
  int v38;
  WTF::PrintStream *v39;
  WTF::PrintStream *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  char *v47;
  size_t v48;
  _BOOL4 v49;
  uint64_t v50;
  WTF::PrintStream *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF *v60;
  WTF::PrintStream *v61;
  int v62;
  int v63;
  WTF::PrintStream *v64;
  const char *v65;
  WTF::PrintStream *v66;
  WTF::PrintStream *v68;
  WTF::PrintStream *v69;
  unsigned int *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  WTF::PrintStream *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  WTF *v93;
  WTF *v94;
  int v95;
  char v96;

  v5 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_4;
  if (v5 >= 0xFFFE000000000000)
    return WTF::PrintStream::printf(a2, "Int32: %d", a3, a4);
  if (v5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v5 & 0xFFFE000000000002) == 0)
    {
      v11 = *((unsigned int *)a4 + 19);
      v12 = *((_DWORD *)a4 + 19) != 0;
      v13 = 16 * v11;
      v14 = v12;
      if ((_DWORD)v11)
      {
        v14 = 1;
        if ((char **)v13 != &JSC::JSString::s_info)
        {
          v15 = 16 * v11;
          do
          {
            v15 = *(_QWORD *)(v15 + 16);
            v14 = v15 != 0;
          }
          while ((char **)v15 != &JSC::JSString::s_info && v15 != 0);
        }
      }
      if (v14)
      {
        v17 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v17, "%s", "String");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v18 = *(_QWORD *)(v5 + 8);
        if ((v18 & 1) != 0
          && (v19 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2),
              WTF::PrintStream::printf(v19, "%s", " (rope)"),
              (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2),
              v18 = *(_QWORD *)(v5 + 8),
              (v18 & 1) != 0))
        {
          v18 = 0;
        }
        else if (v18)
        {
          v20 = *(_DWORD *)(v18 + 16);
          if ((v20 & 0x10) != 0)
          {
            v21 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v21, "%s", " (atomic)");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
            v20 = *(_DWORD *)(v18 + 16);
          }
          v22 = 0;
          if ((v20 & 0x20) == 0)
          {
LABEL_48:
            v33 = *(_QWORD *)(v5 + 8);
            if ((v33 & 1) != 0)
            {
              if ((v33 & 4) == 0)
                goto LABEL_50;
            }
            else if ((*(_BYTE *)(v33 + 16) & 4) == 0)
            {
LABEL_50:
              v34 = ",8Bit:(0)";
              goto LABEL_53;
            }
            v34 = ",8Bit:(1)";
LABEL_53:
            v35 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v35, "%s", v34);
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
            v36 = *(_QWORD *)(v5 + 8);
            if ((v36 & 1) != 0)
              v37 = (int *)(v5 + 16);
            else
              v37 = (int *)(v36 + 4);
            v38 = *v37;
            v39 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v39, "%s", ",length:(");
            WTF::PrintStream::printf(v39, "%u", v38);
            WTF::PrintStream::printf(v39, "%s", ")");
            (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
            v40 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
            WTF::PrintStream::printf(v40, "%s", ": ");
            if (!v22)
            {
              v47 = *(char **)(v18 + 8);
              v48 = *(unsigned int *)(v18 + 4);
              if ((*(_BYTE *)(v18 + 16) & 4) != 0)
                WTF::StringImpl::utf8ForCharacters(v47, v48, (uint64_t)&v94, v46);
              else
                WTF::StringImpl::utf8ForCharacters((uint64_t)v47, v48, 0, v41, v42, v43, v44, v45, (uint64_t)&v94);
              WTF::printExpectedCStringHelper(v40, "StringImpl*", &v94);
              if (v95 != -1)
                ((void (*)(char *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v95])(&v96, &v94);
              goto LABEL_76;
            }
            goto LABEL_57;
          }
          v23 = " (symbol)";
LABEL_47:
          v32 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          WTF::PrintStream::printf(v32, "%s", v23);
          (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
          goto LABEL_48;
        }
        v23 = " (unresolved)";
        v22 = 1;
        goto LABEL_47;
      }
      v24 = *((_DWORD *)a4 + 19) != 0;
      if ((_DWORD)v11)
      {
        v24 = *((_DWORD *)a4 + 19) != 0;
        if ((char **)v13 != &JSC::RegExp::s_info)
        {
          v25 = 16 * v11;
          do
          {
            v25 = *(_QWORD *)(v25 + 16);
            v24 = v25 != 0;
          }
          while ((char **)v25 != &JSC::RegExp::s_info && v25 != 0);
        }
      }
      if (v24)
      {
        v27 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v27, "%s", "RegExp: ");
        (*(void (**)(unint64_t, WTF::PrintStream *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v5 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB8))(v5, v27);
LABEL_76:
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v61 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v61, "%s", ", StructureID: ");
        WTF::PrintStream::printf(v61, "%u");
        return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
      }
      v28 = *((_DWORD *)a4 + 19) != 0;
      if ((_DWORD)v11)
      {
        v28 = *((_DWORD *)a4 + 19) != 0;
        if ((char **)v13 != &JSC::Symbol::s_info)
        {
          v29 = 16 * v11;
          do
          {
            v29 = *(_QWORD *)(v29 + 16);
            v28 = v29 != 0;
          }
          while ((char **)v29 != &JSC::Symbol::s_info && v29 != 0);
        }
      }
      if (v28)
      {
        v31 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v31, "%s", "Symbol: ");
        WTF::PrintStream::printf(v31, "%p");
        goto LABEL_76;
      }
      v49 = *((_DWORD *)a4 + 19) != 0;
      if ((_DWORD)v11)
      {
        v49 = *((_DWORD *)a4 + 19) != 0;
        if ((char **)v13 != &JSC::Structure::s_info)
        {
          v50 = 16 * v11;
          do
          {
            v50 = *(_QWORD *)(v50 + 16);
            v49 = v50 != 0;
          }
          while ((char **)v50 != &JSC::Structure::s_info && v50 != 0);
        }
      }
      if (v49)
      {
        v52 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v52, "%s", "Structure: ");
        if (a3)
        {
          WTF::StringHashDumpContext<JSC::Structure>::getID((JSC::Structure *)v5, (uint64_t *)a3, (int8x16_t **)&v94);
          JSC::Structure::dumpBrief((JSC::Structure *)v5, v52, (const WTF::CString *)&v94);
          v60 = v94;
          v94 = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 1)
              WTF::fastFree((unint64_t)v60, v53, v54, v55, v56, v57, v58, v59);
            else
              --*(_DWORD *)v60;
          }
        }
        else
        {
          JSC::Structure::dump(v5, v52);
        }
        goto LABEL_76;
      }
      if (*(_BYTE *)(v5 + 5) == 3)
      {
        v62 = *(unsigned __int8 *)(v5 + 16);
        v63 = *(_DWORD *)(v5 + 8);
        v64 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v64, "%s", "BigInt[heap-allocated]: addr=");
        WTF::PrintStream::printf(v64, "%p", (const void *)v5);
        WTF::PrintStream::printf(v64, "%s", ", length=");
        WTF::PrintStream::printf(v64, "%u", v63);
        WTF::PrintStream::printf(v64, "%s", ", sign=");
        if (v62)
          v65 = "true";
        else
          v65 = "false";
        v66 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v64 + 32))(v64);
        WTF::PrintStream::printf(v66, "%s", v65);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v64 + 40))(v64);
        goto LABEL_76;
      }
      if ((_DWORD)v11 && (char **)v13 != &JSC::JSObject::s_info)
      {
        do
        {
          v13 = *(_QWORD *)(v13 + 16);
          v12 = v13 != 0;
        }
        while ((char **)v13 != &JSC::JSObject::s_info && v13 != 0);
      }
      v68 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v69 = v68;
      if (v12)
      {
        WTF::PrintStream::printf(v68, "%s", "Object: ");
        WTF::PrintStream::printf(v69, "%p", (const void *)v5);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v70 = *(unsigned int **)(*(_QWORD *)this + 8);
        if ((*((_BYTE *)a4 + 8) & 0xEu) >= 0xA)
          v71 = v70[2];
        else
          v71 = 0;
        v72 = *((unsigned __int16 *)a4 + 12);
        if (v72 == 65534)
          goto LABEL_96;
        if (v72 == 0xFFFF)
          v72 = *(_DWORD *)(*((_QWORD *)a4 + 8) + 84);
        if (v72 < 64)
        {
LABEL_96:
          v73 = 0;
        }
        else if ((v72 - 63) >= 5)
        {
          v82 = (v72 - 64) | ((v72 - 64) >> 1) | (((v72 - 64) | ((v72 - 64) >> 1)) >> 2);
          v83 = v82 | (v82 >> 4) | ((v82 | (v82 >> 4)) >> 8);
          v73 = (v83 | HIWORD(v83)) + 1;
        }
        else
        {
          v73 = 4;
        }
        v84 = &v70[-2 * v73 - 2 + -2 * v71];
        v85 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v85, "%s", " with butterfly ");
        WTF::PrintStream::printf(v85, "%p", v70);
        WTF::PrintStream::printf(v85, "%s", "(base=");
        WTF::PrintStream::printf(v85, "%p", v84);
        WTF::PrintStream::printf(v85, "%s", ")");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v40 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v40, "%s", " (Structure ");
        if (a3)
        {
          WTF::StringHashDumpContext<JSC::Structure>::getID(a4, (uint64_t *)a3, (int8x16_t **)&v94);
          JSC::Structure::dumpBrief(a4, v40, (const WTF::CString *)&v94);
          v93 = v94;
          v94 = 0;
          if (v93)
          {
            if (*(_DWORD *)v93 == 1)
              WTF::fastFree((unint64_t)v93, v86, v87, v88, v89, v90, v91, v92);
            else
              --*(_DWORD *)v93;
          }
          goto LABEL_57;
        }
      }
      else
      {
        WTF::PrintStream::printf(v68, "%s", "Cell: ");
        WTF::PrintStream::printf(v69, "%p", (const void *)v5);
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
        v40 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        WTF::PrintStream::printf(v40, "%s", " (");
        if (a3)
        {
          WTF::StringHashDumpContext<JSC::Structure>::getID(a4, (uint64_t *)a3, (int8x16_t **)&v94);
          JSC::Structure::dumpBrief(a4, v40, (const WTF::CString *)&v94);
          v81 = v94;
          v94 = 0;
          if (v81)
          {
            if (*(_DWORD *)v81 == 1)
              WTF::fastFree((unint64_t)v81, v74, v75, v76, v77, v78, v79, v80);
            else
              --*(_DWORD *)v81;
          }
          goto LABEL_57;
        }
      }
      JSC::Structure::dump((unint64_t)a4, v40);
LABEL_57:
      WTF::PrintStream::printf(v40, "%s");
      goto LABEL_76;
    }
LABEL_4:
    v7 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *, WTF::PrintStream *, JSC::DumpContext *, JSC::Structure *))(*(_QWORD *)a2 + 32))(a2, a2, a3, a4);
    WTF::PrintStream::printf(v7, "%s");
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  return WTF::PrintStream::printf(a2, "Double: %lld, %lf", a3, a4);
}

uint64_t JSC::JSValue::dumpForBacktrace(JSC::JSValue *this, WTF::PrintStream *a2)
{
  unint64_t v3;
  WTF::PrintStream *v5;
  const char *v6;
  const char *v7;
  int v9;
  uint64_t v10;
  WTF::PrintStream *v11;
  WTF::PrintStream *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  WTF::PrintStream *v22;
  WTF::PrintStream *v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  WTF::PrintStream *v27;
  float v28;
  unsigned int v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  int v33;
  char v34;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    v6 = "<JSValue()>";
LABEL_5:
    v31 = v6;
    v7 = "%s";
LABEL_6:
    WTF::PrintStream::printf(v5, v7, v31);
    return (*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
  }
  if (v3 >= 0xFFFE000000000000)
    return WTF::PrintStream::printf(a2, "%d");
  if (v3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v3 & 0xFFFE000000000002) != 0)
    {
      switch(v3)
      {
        case 2uLL:
          v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          v6 = "Null";
          break;
        case 6uLL:
          v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          v6 = "False";
          break;
        case 7uLL:
          v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          v6 = "True";
          break;
        case 0xAuLL:
          v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          v6 = "Undefined";
          break;
        default:
          v5 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
          v6 = "INVALID";
          break;
      }
      goto LABEL_5;
    }
    v9 = *(unsigned __int8 *)(v3 + 5);
    if (v9 == 1)
    {
      v21 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
      v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v23 = v22;
      v24 = "Structure[ ";
    }
    else
    {
      if (v9 == 2)
      {
        v10 = *(_QWORD *)(v3 + 8);
        v11 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
        v12 = v11;
        if (!v10 || (v10 & 1) != 0)
        {
          v31 = "(unresolved string)";
        }
        else
        {
          WTF::PrintStream::printf(v11, "%s", "\"");
          v19 = *(char **)(v10 + 8);
          v20 = *(unsigned int *)(v10 + 4);
          if ((*(_BYTE *)(v10 + 16) & 4) != 0)
            WTF::StringImpl::utf8ForCharacters(v19, v20, (uint64_t)&v32, v18);
          else
            WTF::StringImpl::utf8ForCharacters((uint64_t)v19, v20, 0, v13, v14, v15, v16, v17, (uint64_t)&v32);
          WTF::printExpectedCStringHelper(v12, "StringImpl*", &v32);
          if (v33 != -1)
            ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v33])(&v34, &v32);
          v31 = "\"";
        }
        v7 = "%s";
LABEL_39:
        v5 = v12;
        goto LABEL_6;
      }
      v21 = 16 * *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
      v22 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
      v23 = v22;
      v24 = "Cell[";
    }
    WTF::PrintStream::printf(v22, "%s", v24);
    v25 = *(char **)v21;
    v26 = *(_QWORD *)(v21 + 8);
    v27 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 32))(v23);
    if (v25)
    {
      v29 = v26 - 1;
      if (!v26)
        v29 = 0;
      WTF::StringImpl::utf8ForCharacters(v25, v29, (uint64_t)&v32, v28);
    }
    else
    {
      WTF::CString::CString(&v32, &str_25, 0);
      v33 = 0;
    }
    WTF::printExpectedCStringHelper(v27, "StringView", &v32);
    if (v33 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v33])(&v34, &v32);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v23 + 40))(v23);
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 40))(a2);
    v30 = *(const char **)this;
    v12 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v12, "%s", "]: ");
    v31 = v30;
    v7 = "%p";
    goto LABEL_39;
  }
  return WTF::PrintStream::printf(a2, "%lf");
}

unsigned __int8 *JSC::JSValue::toStringSlowCase(unsigned __int8 **this, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  JSC::VM *v19;
  unsigned __int8 *v20;
  _BOOL4 hasExceptionsAfterHandlingTraps;
  uint64_t (*v22)(_QWORD *);
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  JSC::JSGlobalObject *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];

  v8 = *(_QWORD *)(a2 + 56);
  v9 = *this;
  if ((unint64_t)*this >= 0xFFFE000000000000)
    return (unsigned __int8 *)JSC::int32ToString(*(_QWORD *)(a2 + 56), (JSC::VM *)v9, (const WTF::String *)0xA, a4, a5, a6, a7, a8);
  if ((unint64_t)(v9 - 0x2000000000000) > 0xFFFBFFFFFFFFFFFFLL)
  {
    v11 = (int)a3;
    v12 = v8 + 41968;
    switch((unint64_t)v9)
    {
      case 2uLL:
        return *(unsigned __int8 **)(v8 + 42016);
      case 6uLL:
        return *(unsigned __int8 **)(v8 + 41992);
      case 7uLL:
        return *(unsigned __int8 **)(v8 + 42064);
      case 0xAuLL:
        return *(unsigned __int8 **)(v8 + 42032);
      default:
        v13 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x40);
        if (v13)
        {
          if (*(_BYTE *)(v13 + 5) != 1)
          {
            v14 = *(_QWORD *)(v13 + 64);
            if (v14)
            {
              if ((*(_QWORD *)(v14 + 88) & 0xFFFFFFFFFFFFFFF7) == 2)
              {
                v15 = *(_QWORD *)(v14 + 40);
                if (v15 == 1)
                  v15 = 0;
                v16 = *(_QWORD *)(a2 + 512);
                if ((v16 & 1) != 0)
                {
                  v28 = *(_QWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x40);
                  v29 = v15;
                  v27 = v9;
                  v22 = *(uint64_t (**)(_QWORD *))(v16 & 0xFFFFFFFFFFFFFFFCLL);
                  if ((a2 & 8) != 0)
                    v23 = (_QWORD *)(a2 - 16);
                  else
                    v23 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
                  v30[0] = *v23;
                  v30[1] = a2;
                  v30[2] = a2 + 512;
                  v26 = (JSC::JSGlobalObject *)a2;
                  v16 = v22(v30);
                  a2 = (uint64_t)v26;
                  v9 = v27;
                  v13 = v28;
                  v15 = v29;
                }
                if (v16 == v15)
                {
                  v24 = *(_QWORD *)(v13 + 64);
                  if (v24)
                  {
                    v25 = *(_QWORD *)(v24 + 16);
                    if (v25 >= 2)
                    {
                      v9 = (unsigned __int8 *)v25;
LABEL_17:
                      if (*(_DWORD *)(v8 + 80))
                      {
                        v19 = (JSC::VM *)v8;
                        v20 = v9;
                        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                        if (hasExceptionsAfterHandlingTraps)
                          v9 = 0;
                        else
                          v9 = v20;
                        if (hasExceptionsAfterHandlingTraps)
                        {
                          if (v11)
                            return *(unsigned __int8 **)v12;
                        }
                      }
                      return v9;
                    }
                  }
                }
              }
            }
          }
        }
        v17 = v9[5];
        if (v17 < 0x17)
        {
          if (v17 == 2)
            goto LABEL_17;
          v18 = JSC::JSCell::toStringSlowCase((JSC::JSCell *)v9, (JSC::JSGlobalObject *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        }
        else
        {
          v18 = JSC::JSObject::toString((JSC::JSObject *)v9, (JSC::JSGlobalObject *)a2, a3, a4, a5, a6, a7, a8);
        }
        v9 = (unsigned __int8 *)v18;
        goto LABEL_17;
    }
  }
  return (unsigned __int8 *)JSC::numberToString(*(JSC **)(a2 + 56), (JSC::VM *)0xA, COERCE_DOUBLE(v9 - 0x2000000000000), (int)a3, a4, a5, a6, a7, a8);
}

void JSC::JSValue::toWTFStringSlowCase(JSC::JSValue *this@<X0>, JSC::JSGlobalObject *a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  int *v10;
  unint64_t v11;
  double v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  double *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int **v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  _BYTE *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  size_t v31;
  char *v32;
  int v33;
  size_t v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  _BYTE *v43;
  int *v44;
  WTF::StringImpl *v45;
  int **v46;
  WTF::StringImpl *v47;
  char *v48;
  int *v49;
  unsigned int v50;
  int v51;
  int v52;
  int *v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  int v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  int8x16_t v114;
  int *v115;
  uint64_t __dst[15];
  char __s[3];
  _BYTE v119[31];

  *(_QWORD *)&v119[23] = *MEMORY[0x1E0C80C00];
  v10 = (int *)*((_QWORD *)a2 + 7);
  v11 = *(_QWORD *)this;
  if (v11 >= 0xFFFE000000000000)
  {
    if (v11 <= 0xFF)
    {
      v22 = (int **)&v10[4 * v11 + 11068];
      v10 = *v22;
      if (*v22)
        goto LABEL_36;
      v23 = 0;
      do
      {
        v24 = (v11 % 0xA) | 0x30;
        *((_BYTE *)&__dst[1] + v23-- + 4) = (v11 % 0xA) | 0x30;
        v25 = v11 > 9;
        LODWORD(v11) = v11 / 0xA;
      }
      while (v25);
      if (v23 + 14 >= 15)
      {
        __break(1u);
LABEL_73:
        v74 = *(int **)(*((_QWORD *)v10 + 5244) + 344);
        if (v74)
LABEL_54:
          *v74 += 2;
LABEL_55:
        *a9 = v74;
        return;
      }
      if (v23)
      {
        if ((unint64_t)-v23 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x19899CCD0);
        }
        v10 = (int *)WTF::fastCompactMalloc((WTF *)(20 - v23));
        v26 = v10 + 5;
        *v10 = 2;
        v10[1] = -(int)v23;
        *((_QWORD *)v10 + 1) = v10 + 5;
        v10[4] = 4;
        if (v23 == -1)
          *v26 = v24;
        else
          memcpy(v26, (char *)&__dst[1] + v23 + 5, -v23);
      }
      else
      {
        v10 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      v27 = (WTF::StringImpl *)*v22;
      *v22 = v10;
      if (!v27)
        goto LABEL_36;
      if (*(_DWORD *)v27 == 2)
      {
        WTF::StringImpl::~StringImpl(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
      }
      else
      {
        *(_DWORD *)v27 -= 2;
      }
LABEL_21:
      v10 = *v22;
      if (!*v22)
        goto LABEL_37;
      goto LABEL_36;
    }
    v49 = v10 + 12092;
    v50 = 9 * ((~((_DWORD)v11 << 15) + v11) ^ ((~((_DWORD)v11 << 15) + v11) >> 10));
    v51 = (v50 ^ (v50 >> 6)) + ~((v50 ^ (v50 >> 6)) << 11);
    v52 = (v51 ^ BYTE2(v51));
    v53 = &v10[6 * (v51 ^ BYTE2(v51)) + 12092];
    if (*v53 == (_DWORD)v11)
    {
      v10 = *(int **)&v49[6 * v52 + 2];
      if (v10)
        goto LABEL_36;
    }
    *v53 = v11;
    WTF::String::number(v11, __dst);
    v61 = &v49[6 * v52];
    v62 = __dst[0];
    __dst[0] = 0;
    v64 = (WTF::StringImpl *)*((_QWORD *)v61 + 1);
    v22 = (int **)(v61 + 2);
    v63 = v64;
    *v22 = (int *)v62;
    if (v64)
    {
      v65 = *(_DWORD *)v63 - 2;
      if (*(_DWORD *)v63 == 2)
      {
        WTF::StringImpl::~StringImpl(v63, v54, v55, v56, v57, v58, v59, v60);
        WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
        v63 = (WTF::StringImpl *)__dst[0];
        __dst[0] = 0;
        if (!v63)
          goto LABEL_49;
        v65 = *(_DWORD *)v63 - 2;
        if (*(_DWORD *)v63 == 2)
        {
          WTF::StringImpl::~StringImpl(v63, v91, v92, v93, v94, v95, v96, v97);
          WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
          goto LABEL_49;
        }
      }
      *(_DWORD *)v63 = v65;
    }
LABEL_49:
    *(_QWORD *)&v49[6 * v52 + 4] = 0;
    goto LABEL_21;
  }
  *(_QWORD *)&v12 = v11 - 0x2000000000000;
  if (v11 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v13 = v10 + 13628;
    v14 = (*(_QWORD *)&v12 + ~(v11 << 32)) ^ ((*(_QWORD *)&v12 + ~(v11 << 32)) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = ((v16 >> 31) ^ v16);
    v18 = (double *)&v10[6 * ((v16 >> 31) ^ v16) + 13628];
    if (*v18 == v12)
    {
      v10 = *(int **)&v13[6 * v17 + 2];
      if (v10)
        goto LABEL_36;
    }
    *v18 = v12;
    v19 = (*(_QWORD *)&v12 >> 52) & 0x7FFLL;
    v20 = *(_QWORD *)&v12 & 0x800FFFFFFFFFFFFFLL;
    if ((_DWORD)v19 == 2047)
    {
      if ((*(_QWORD *)&v12 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v21 = v119;
      }
      else
      {
        v48 = __s;
        if ((v20 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v48 = &__s[1];
        }
        *(_QWORD *)v48 = 0x7974696E69666E49;
        v21 = v48 + 8;
      }
      goto LABEL_27;
    }
    v28 = *(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v20 & 0x8000000000000000) != 0 && v28)
    {
      __s[0] = 45;
      v29 = &__s[1];
    }
    else
    {
      v29 = __s;
      if (!v28)
      {
        v21 = &__s[1];
        __s[0] = 48;
        goto LABEL_27;
      }
    }
    v30 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v20, v19);
    v21 = WTF::dragonbox::detail::to_shortest(v30, v31, (uint64_t)v29, v32);
LABEL_27:
    *v21 = 0;
    v33 = strlen(__s);
    memcpy(__dst, __s, v33);
    *((_BYTE *)__dst + v33) = 0;
    v34 = strlen((const char *)__dst);
    if (v34)
    {
      v42 = v34;
      if (v34 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x19899CCC8);
      }
      v10 = (int *)WTF::fastCompactMalloc((WTF *)(v34 + 20));
      v43 = v10 + 5;
      *v10 = 2;
      v10[1] = v42;
      *((_QWORD *)v10 + 1) = v10 + 5;
      v10[4] = 4;
      if (v42 == 1)
        *v43 = __dst[0];
      else
        memcpy(v43, __dst, v42);
    }
    else
    {
      v10 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    v44 = &v13[6 * v17];
    v47 = (WTF::StringImpl *)*((_QWORD *)v44 + 1);
    v46 = (int **)(v44 + 2);
    v45 = v47;
    *v46 = v10;
    if (v47)
    {
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl(v45, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
        v10 = *v46;
        *(_QWORD *)&v13[6 * v17 + 4] = 0;
        if (!v10)
          goto LABEL_37;
        goto LABEL_36;
      }
      *(_DWORD *)v45 -= 2;
    }
    *(_QWORD *)&v13[6 * v17 + 4] = 0;
LABEL_36:
    *v10 += 2;
LABEL_37:
    *a9 = v10;
    return;
  }
  switch(v11)
  {
    case 2uLL:
      goto LABEL_73;
    case 6uLL:
      v74 = *(int **)(*((_QWORD *)v10 + 5244) + 248);
      if (v74)
        goto LABEL_54;
      goto LABEL_55;
    case 7uLL:
      v74 = *(int **)(*((_QWORD *)v10 + 5244) + 432);
      if (!v74)
        goto LABEL_55;
      goto LABEL_54;
    case 0xAuLL:
      v74 = *(int **)(*((_QWORD *)v10 + 5244) + 456);
      if (!v74)
        goto LABEL_55;
      goto LABEL_54;
    default:
      v113 = JSC::JSValue::toString(v11, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
      if (v10[20] && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v106, v107, v108, v109, v110, v111, v112))
      {
        *a9 = 0;
      }
      else
      {
        v115 = *(int **)(v113 + 8);
        if ((v115 & 1) != 0)
          v115 = *JSC::JSRopeString::resolveRope(v113, a2, v107, v108, v114, v109, v110, v111, v112);
        if (v115)
          *v115 += 2;
        *a9 = v115;
      }
      break;
  }
}

uint64_t JSC::JSValue::toString(unint64_t this, unint64_t a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t SlowCase;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t *v38;
  int v39;
  WTF::StringImpl *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  BOOL v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  _BYTE *v65;
  int *v66;
  WTF::StringImpl *v67;
  JSC::VM *v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl **v77;
  JSC::JSGlobalObject *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85[4];

  SlowCase = this;
  v85[3] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if ((this & 0xFFFE000000000002) == 0)
  {
    if (*(_BYTE *)(this + 5) == 2)
      return SlowCase;
    v10 = *(_QWORD *)(a2 + 56);
LABEL_11:
    v17 = v10 + 41968;
    switch(this)
    {
      case 2uLL:
        SlowCase = *(_QWORD *)(v10 + 42016);
        break;
      case 6uLL:
        SlowCase = *(_QWORD *)(v10 + 41992);
        break;
      case 7uLL:
        SlowCase = *(_QWORD *)(v10 + 42064);
        break;
      case 0xAuLL:
        SlowCase = *(_QWORD *)(v10 + 42032);
        break;
      default:
        v18 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40);
        if (!v18)
          goto LABEL_25;
        if (*(_BYTE *)(v18 + 5) == 1)
          goto LABEL_25;
        v24 = *(_QWORD *)(v18 + 64);
        if (!v24 || (*(_QWORD *)(v24 + 88) & 0xFFFFFFFFFFFFFFF7) != 2)
          goto LABEL_25;
        v25 = *(_QWORD *)(v24 + 40);
        if (v25 == 1)
          v26 = 0;
        else
          v26 = v25;
        v27 = *(_QWORD *)(a2 + 512);
        if ((v27 & 1) == 0)
          goto LABEL_24;
        v63 = (WTF::StringImpl *)(a2 + 512);
        v20 = *(WTF::StringImpl **)(v27 & 0xFFFFFFFFFFFFFFFCLL);
        v60 = a2;
        if ((a2 & 8) != 0)
          goto LABEL_78;
        v77 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
        goto LABEL_71;
    }
    return SlowCase;
  }
  v10 = *(_QWORD *)(a2 + 56);
  if (this >= 0xFFFE000000000000)
  {
    if (this > 0xFF)
    {
      v11 = v10 + 48368;
      v12 = 9 * ((~((_DWORD)this << 15) + this) ^ ((~((_DWORD)this << 15) + this) >> 10));
      v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
      v14 = (v13 ^ BYTE2(v13));
      v15 = (_DWORD *)(v10 + 48368 + 24 * (v13 ^ BYTE2(v13)));
      if (*v15 == (_DWORD)this)
      {
        v16 = *(WTF::StringImpl **)(v11 + 24 * (v13 ^ BYTE2(v13)) + 8);
        if (v16)
        {
          SlowCase = *(_QWORD *)(v11 + 24 * v14 + 16);
          if (SlowCase)
            return SlowCase;
LABEL_38:
          v38 = (uint64_t *)(v10 + 39696);
          *(_DWORD *)v16 += 2;
          v39 = *((_DWORD *)v16 + 4);
          v40 = v16;
          if ((v39 & 3) == 2)
          {
            v40 = v16;
            do
            {
              v40 = (WTF::StringImpl *)*((_QWORD *)v40 + 3);
              v39 = *((_DWORD *)v40 + 4);
            }
            while ((v39 & 3) == 2);
          }
          if ((v39 & 8) != 0)
          {
            v41 = 0;
          }
          else
          {
            *((_DWORD *)v40 + 4) = v39 | 8;
            v41 = (unint64_t)*((unsigned int *)v40 + 1) << ((v39 & 4) == 0);
          }
          v42 = v10 + 192;
          SlowCase = *v38;
          if ((unint64_t)*v38 >= *(_QWORD *)(v10 + 39704))
          {
            v82 = v41;
            v84 = v16;
            SlowCase = *(_QWORD *)(v10 + 39712);
            if ((SlowCase & 1) != 0)
            {
              JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)a2, (uint64_t)a3, v41, a5, a6, a7, a8);
              SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0);
              v42 = v10 + 192;
              v41 = v82;
              v16 = v84;
              v38 = (uint64_t *)(v10 + 39696);
            }
            else
            {
              v79 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39720);
              *(_QWORD *)(v10 + 39704) = SlowCase + HIDWORD(v79);
              *(_QWORD *)(v10 + 39712) = SlowCase + (int)v79;
              *v38 = SlowCase + 16;
              v16 = v84;
            }
          }
          else
          {
            *v38 = SlowCase + 16;
          }
          *(_DWORD *)SlowCase = (unint64_t)v38[227] >> 4;
          *(_DWORD *)(SlowCase + 4) = 17302016;
          *(_QWORD *)(SlowCase + 8) = v16;
          if (*(_BYTE *)(v10 + 755))
            __dmb(0xAu);
          if (v41 >= 0x101)
            JSC::Heap::reportExtraMemoryAllocatedSlowCase(v42, 0, SlowCase, v41, a5, a6, a7, a8);
          *(_QWORD *)(v11 + 24 * v14 + 16) = SlowCase;
          return SlowCase;
        }
      }
      *v15 = this;
      WTF::String::number(this, (uint64_t *)v85);
      v32 = v11 + 24 * v14;
      v33 = v85[0];
      v85[0] = 0;
      v36 = *(WTF::StringImpl **)(v32 + 8);
      v35 = (WTF::StringImpl **)(v32 + 8);
      v34 = v36;
      *v35 = v33;
      if (v36)
      {
        v37 = *(_DWORD *)v34 - 2;
        if (*(_DWORD *)v34 == 2)
        {
          WTF::StringImpl::~StringImpl(v34, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v31, a5, a6, a7, a8);
          WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
          v34 = v85[0];
          v85[0] = 0;
          if (!v34)
            goto LABEL_37;
          v37 = *(_DWORD *)v34 - 2;
          if (*(_DWORD *)v34 == 2)
          {
            WTF::StringImpl::~StringImpl(v34, (WTF::AtomStringImpl *)a2, (uint64_t)a3, v51, a5, a6, a7, a8);
            WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
            goto LABEL_37;
          }
        }
        *(_DWORD *)v34 = v37;
      }
LABEL_37:
      v16 = *v35;
      goto LABEL_38;
    }
    v18 = v10 + 44272;
    v19 = (JSC::VM *)(v10 + 44272 + 16 * this);
    v20 = *(WTF::StringImpl **)v19;
    if (*(_QWORD *)v19)
    {
LABEL_14:
      v21 = v18 + 16 * SlowCase;
      v23 = *(_QWORD *)(v21 + 8);
      v22 = (uint64_t *)(v21 + 8);
      SlowCase = v23;
      if (!v23)
      {
        SlowCase = JSC::jsNontrivialString((JSC *)v10, v19, a3, a4, a5, a6, a7, a8);
        *v22 = SlowCase;
      }
      return SlowCase;
    }
    v17 = 0;
    v60 = 10;
    v61 = this;
    do
    {
      v26 = (v61 % 0xA) | 0x30;
      *((_BYTE *)&v85[1] + v17-- + 4) = (v61 % 0xA) | 0x30;
      v62 = v61 > 9;
      v61 /= 0xAu;
    }
    while (v62);
    v63 = (WTF::StringImpl *)(v17 + 14);
    if (v17 + 14 < 15)
    {
      if (v17)
      {
        v83 = v10 + 44272 + 16 * this;
        if ((unint64_t)-v17 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x19899D2ACLL);
        }
        v64 = WTF::fastCompactMalloc((WTF *)(20 - v17));
        v65 = (_BYTE *)(v64 + 20);
        *(_DWORD *)v64 = 2;
        *(_DWORD *)(v64 + 4) = -(int)v17;
        *(_QWORD *)(v64 + 8) = v64 + 20;
        v66 = (int *)v64;
        *(_DWORD *)(v64 + 16) = 4;
        if (v17 == -1)
          *v65 = v26;
        else
          memcpy(v65, (char *)&v85[1] + v17 + 5, -v17);
        v19 = (JSC::VM *)v83;
      }
      else
      {
        v66 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      v67 = *(WTF::StringImpl **)v19;
      *(_QWORD *)v19 = v66;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
        {
          v68 = v19;
          WTF::StringImpl::~StringImpl(v67, v19, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
          v19 = v68;
        }
        else
        {
          *(_DWORD *)v67 -= 2;
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_78:
    v77 = (WTF::StringImpl **)(v60 - 16);
LABEL_71:
    v85[0] = *v77;
    v85[1] = (WTF::StringImpl *)v60;
    v78 = (JSC::JSGlobalObject *)v60;
    v85[2] = v63;
    v27 = ((uint64_t (*)(WTF::StringImpl **))v20)(v85);
    a2 = (unint64_t)v78;
LABEL_24:
    if (v27 == v26)
    {
      v80 = *(_QWORD *)(v18 + 64);
      if (v80)
      {
        v81 = *(_QWORD *)(v80 + 16);
        if (v81 >= 2)
        {
          SlowCase = v81;
LABEL_28:
          if (*(_DWORD *)(v10 + 80))
          {
            v30 = *(_DWORD *)(v10 + 80);
            if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v10 + 16))
              return *(_QWORD *)v17;
          }
          return SlowCase;
        }
      }
    }
LABEL_25:
    v28 = *(unsigned __int8 *)(SlowCase + 5);
    if (v28 < 0x17)
    {
      if (v28 == 2)
        goto LABEL_28;
      v29 = JSC::JSCell::toStringSlowCase((JSC::JSCell *)SlowCase, (JSC::JSGlobalObject *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v29 = JSC::JSObject::toString((JSC::JSObject *)SlowCase, (JSC::JSGlobalObject *)a2);
    }
    SlowCase = v29;
    goto LABEL_28;
  }
  if (this - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    goto LABEL_11;
  return JSC::numberToString(*(JSC **)(a2 + 56), (JSC::VM *)0xA, COERCE_DOUBLE(this - 0x2000000000000), (int)a3, a4, a5, a6, a7, a8);
}

void JSC::JSValue::toWTFStringForConsole(JSC::JSValue *this@<X0>, JSC::JSGlobalObject *a2@<X1>, const WTF::String *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int8x16_t v20;
  int **v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int **v30;
  char v31;
  int *v32;
  char v33;

  v12 = *((_QWORD *)a2 + 7);
  v19 = JSC::JSValue::toString(*(_QWORD *)this, (unint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v12 + 80))
  {
    v25 = *(_DWORD *)(v12 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v12 + 16))
    {
      *a9 = 0;
      return;
    }
  }
  v21 = (int **)(v19 + 8);
  if ((*(_BYTE *)(v19 + 8) & 1) != 0)
    v21 = JSC::JSRopeString::resolveRope(v19, a2, v13, v14, v20, v15, v16, v17, v18);
  if (*(_DWORD *)(v12 + 80))
  {
    v26 = *(_DWORD *)(v12 + 80);
    if ((v26 & 0x27) != 0 && (v26 & 0x20) == 0)
    {
      v30 = v21;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v21 = v30;
    }
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_20;
  }
  if ((*(_QWORD *)this & 0xFFFE000000000002) != 0)
  {
    v24 = (uint64_t)*v21;
  }
  else
  {
    v22 = *(unsigned __int8 *)(*(_QWORD *)this + 5);
    if (v22 == 2)
    {
      v23 = 34;
      v33 = 34;
      v32 = *v21;
LABEL_10:
      v31 = v23;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v33, (uint64_t *)&v32, &v31, a9);
      return;
    }
    if ((v22 & 0xFE) == 0x24)
    {
      v33 = 91;
      v32 = *v21;
      v23 = 93;
      goto LABEL_10;
    }
    v24 = (uint64_t)*v21;
    if (v22 == 3)
    {
      if (v24)
      {
        v27 = *(_DWORD *)(v24 + 4);
        if (v27 < 0 || (v28 = (v27 + 1), __OFADD__(v27, 1)))
        {
LABEL_20:
          *a9 = 0;
          return;
        }
        if ((*(_BYTE *)(v24 + 16) & 4) == 0)
        {
          v29 = 0;
LABEL_33:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(v28, v29, v24, 110, a9);
          return;
        }
      }
      else
      {
        v28 = 1;
      }
      v29 = 1;
      goto LABEL_33;
    }
  }
  if (v24)
    *(_DWORD *)v24 += 2;
  *a9 = (int *)v24;
}

void JSC::JSCell::getCallData(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void JSC::JSCell::getConstructData(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void JSC::JSCell::customHasInstance()
{
  __break(0xC471u);
}

uint64_t JSC::JSCell::dumpToStream(JSC::JSCell *this, const JSC::JSCell *a2, WTF::PrintStream *a3)
{
  return WTF::PrintStream::printf(a2, "<%p, %s>", this, *(const char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)));
}

void JSC::JSCallee::visitChildren(JSC::JSCallee *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::JSCallee::visitChildren(JSC::JSCallee *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::JSCallee::JSCallee(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;

  v4 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)result = a4 >> 4;
  *(_DWORD *)(result + 4) = v4;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

{
  int v4;

  v4 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)result = a4 >> 4;
  *(_DWORD *)(result + 4) = v4;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

JSC::JSCell *JSC::JSCallee::JSCallee(JSC::JSCell *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  JSC::JSCell *v4;
  int v5;

  v4 = a1;
  v5 = *(_DWORD *)(a4 + 8);
  *(_DWORD *)a1 = a4 >> 4;
  *((_DWORD *)a1 + 1) = v5;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = a3;
  if (a3 && *(_DWORD *)(a2 + 760) >= *((unsigned __int8 *)a1 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(a2 + 192, (unint64_t)a1);
    return a1;
  }
  return v4;
}

uint64_t JSC::JSCell::estimatedSize(uint64_t a1)
{
  if ((a1 & 8) != 0)
    return *(_QWORD *)(a1 - 88);
  else
    return 16 * **(unsigned int **)(a1 & 0xFFFFFFFFFFFFC000);
}

BOOL JSC::JSCell::getString(JSC::JSCell *this, JSC::JSGlobalObject *a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  int v9;
  int *v11;
  WTF::StringImpl *v12;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *((unsigned __int8 *)this + 5);
  if (v9 != 2)
    return v9 == 2;
  v11 = (int *)*((_QWORD *)this + 1);
  if ((v11 & 1) == 0)
  {
    if (!v11)
      goto LABEL_5;
    goto LABEL_4;
  }
  v11 = *JSC::JSRopeString::resolveRope((unint64_t)this, a2, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (v11)
LABEL_4:
    *v11 += 2;
LABEL_5:
  v12 = *a3;
  *a3 = (WTF::StringImpl *)v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return v9 == 2;
}

int **JSC::JSCell::getString@<X0>(int **this@<X0>, JSC::JSGlobalObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, int8x16_t a10@<Q0>)
{
  int *v11;

  if (*((_BYTE *)this + 5) == 2)
  {
    v11 = this[1];
    if ((v11 & 1) != 0)
    {
      this = JSC::JSRopeString::resolveRope((unint64_t)this, a2, a3, a4, a10, a5, a6, a7, a8);
      v11 = *this;
    }
    if (v11)
      *v11 += 2;
    *a9 = v11;
  }
  else
  {
    *a9 = 0;
  }
  return this;
}

uint64_t JSC::JSCell::getObject(uint64_t this)
{
  if (*(unsigned __int8 *)(this + 5) <= 0x16u)
    return 0;
  return this;
}

BOOL JSC::JSCell::isValidCallee(JSC::JSCell *this)
{
  return *((unsigned __int8 *)this + 5) >= 0x17u && *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28) != 0;
}

uint64_t JSC::JSCell::put(unint64_t a1, unint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  const WTF::StringImpl *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _DWORD **v37;
  _DWORD *v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  JSC::VM **v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  JSC::Symbol **v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t (*v74)(uint64_t *);
  uint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t (*v79)(uint64_t *);
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  int v87;
  uint64_t *v88;
  JSC::SymbolObject *v89;
  int v90;
  JSC::VM *v91;
  unint64_t NotAnObjectError;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  unsigned __int8 *v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v9 = (unint64_t)a4;
  v12 = (const WTF::StringImpl *)a1;
  v13 = *(unsigned __int8 *)(a1 + 5);
  if (v13 - 2 > 2)
  {
    if (v13 <= 0x16)
    {
      switch(v13)
      {
        case 2u:
          v78 = JSC::JSString::toObject(a1, (JSC::JSGlobalObject *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          break;
        case 4u:
          v89 = *(JSC::SymbolObject **)(a2 + 56);
          v90 = *(_DWORD *)(a2 + 1172);
          if (v90)
            v91 = (JSC::VM *)(16 * (v90 & 0xFFFFFFFE));
          else
            v91 = 0;
          v78 = JSC::SymbolObject::create(v89, v91, (uint64_t)v12, a4, a5, a6, a7, a8);
          break;
        case 3u:
          v78 = JSC::BigIntObject::create(*(_QWORD *)(a2 + 56), (JSC::VM *)a2, a1, (uint64_t)a4, a5, a6, a7, a8);
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x19899E058);
      }
      v12 = (const WTF::StringImpl *)v78;
    }
    return (*(uint64_t (**)(const WTF::StringImpl *, unint64_t, uint64_t, unint64_t, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) + 0x48))(v12, a2, a3, v9, a5);
  }
  v14 = *(_QWORD *)(a2 + 56);
  v105 = a1;
  v106 = v14;
  if (!a3)
    goto LABEL_11;
  v15 = *(_DWORD *)(a3 + 16);
  if ((v15 & 0x20) != 0)
    goto LABEL_11;
  v16 = *(_BYTE **)(a3 + 8);
  v17 = *(unsigned int *)(a3 + 4);
  if ((v15 & 4) != 0)
  {
    if ((_DWORD)v17)
    {
      v98 = *v16 - 48;
      if (v98 <= 9 && (v17 < 2 || *v16 != 48))
      {
        v100 = v17 - 1;
        v101 = v16 + 1;
        while (v100)
        {
          if (v98 > 0x19999999)
            goto LABEL_135;
          v102 = *v101 - 48;
          if (v102 > 9)
            goto LABEL_135;
          LODWORD(v17) = 0;
          v99 = 0;
          v19 = 0;
          v28 = __CFADD__(v102, 10 * v98);
          v98 = v102 + 10 * v98;
          --v100;
          ++v101;
          if (v28)
            goto LABEL_137;
        }
        if (v98 == -1)
          LODWORD(v17) = 0;
        else
          LODWORD(v17) = v98 & 0xFFFFFF00;
        if (v98 == -1)
          v99 = 0;
        else
          v99 = v98;
        if (v98 == -1)
          v19 = 0;
        else
          v19 = 0x100000000;
        goto LABEL_137;
      }
LABEL_135:
      LODWORD(v17) = 0;
    }
    v99 = 0;
    v19 = 0;
LABEL_137:
    v21 = v99 | v17;
    goto LABEL_10;
  }
  if ((_DWORD)v17)
  {
    v18 = *(unsigned __int16 *)v16 - 48;
    if (v18 <= 9 && (*(_WORD *)v16 != 48 || v17 <= 1))
    {
      v25 = (unsigned __int16 *)(v16 + 2);
      v26 = v17 - 1;
      while (v26)
      {
        if (v18 > 0x19999999)
          goto LABEL_7;
        v27 = *v25 - 48;
        if (v27 > 9)
          goto LABEL_7;
        v19 = 0;
        LODWORD(v17) = 0;
        v20 = 0;
        v28 = __CFADD__(v27, 10 * v18);
        v18 = v27 + 10 * v18;
        ++v25;
        --v26;
        if (v28)
          goto LABEL_9;
      }
      v19 = 0x100000000;
      if (v18 == -1)
      {
        v19 = 0;
        LODWORD(v17) = 0;
      }
      else
      {
        LODWORD(v17) = v18;
      }
      if (v18 == -1)
        v20 = 0;
      else
        v20 = v18 & 0xFFFFFF00;
      goto LABEL_9;
    }
LABEL_7:
    v19 = 0;
    LODWORD(v17) = 0;
  }
  else
  {
    v19 = 0;
  }
  v20 = 0;
LABEL_9:
  v21 = v20 | v17;
LABEL_10:
  if ((v19 & 0x100000000) == 0)
  {
LABEL_11:
    if ((a1 & 0xFFFE000000000002) == 0)
    {
      if (v13 == 2)
      {
        if (*(_QWORD *)(*(_QWORD *)(v14 + 41952) + 1768) == a3)
        {
          if ((*(_BYTE *)(a5 + 20) & 1) != 0)
          {
            v52 = (JSC::VM **)&v106;
            goto LABEL_66;
          }
          return 0;
        }
        v37 = (_DWORD **)(a2 + 1192);
      }
      else
      {
        v39 = v13 == 3;
        v37 = (_DWORD **)(a2 + 1208);
        if (!v39)
          v37 = (_DWORD **)(a2 + 1216);
      }
      v38 = *v37;
LABEL_53:
      if (v38)
        return (*(uint64_t (**)(_DWORD *, unint64_t))(16
                                                                     * *(unsigned int *)(16 * (*v38 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x48))(v38, a2);
      return 0;
    }
    if (a1 >> 49)
    {
      v51 = *(_QWORD *)(a2 + 1536);
      if ((v51 & 1) == 0)
        goto LABEL_63;
      v79 = *(uint64_t (**)(uint64_t *))(v51 & 0xFFFFFFFFFFFFFFFCLL);
      v88 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v88 = (uint64_t *)(a2 - 16);
      v81 = *v88;
      v82 = a2 + 1536;
      goto LABEL_122;
    }
    if ((a1 & 0xFFFFFFFFFFFFFFFELL) == 6)
    {
      v51 = *(_QWORD *)(a2 + 1472);
      if ((v51 & 1) == 0)
        goto LABEL_63;
      v79 = *(uint64_t (**)(uint64_t *))(v51 & 0xFFFFFFFFFFFFFFFCLL);
      v80 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v80 = (uint64_t *)(a2 - 16);
      v81 = *v80;
      v82 = a2 + 1472;
LABEL_122:
      v108 = v81;
      v109 = a2;
      v110 = v82;
      v51 = v79(&v108);
LABEL_63:
      v38 = *(_DWORD **)(v51 + 48);
      if (v38 == (_DWORD *)2)
        return 0;
      goto LABEL_53;
    }
LABEL_130:
    NotAnObjectError = JSC::createNotAnObjectError(a2, a1);
    JSC::VM::throwException((JSC::VM *)v14, (JSC::JSGlobalObject *)a2, NotAnObjectError, v93, v94, v95, v96, v97);
    return 0;
  }
  v29 = *(_BYTE *)(a5 + 20) & 1;
  v112 = v14;
  if ((_DWORD)v21 != -1)
  {
    if ((a1 & 0xFFFE000000000002) == 0)
    {
      v72 = (uint64_t *)(a2 + 1208);
      if (v13 != 3)
        v72 = (uint64_t *)(a2 + 1216);
      if (v13 == 2)
        v73 = (uint64_t *)(a2 + 1192);
      else
        v73 = v72;
      v31 = *v73;
LABEL_35:
      if (!v31)
        return 0;
      v32 = *(_QWORD *)(a2 + 56);
      v33 = ~((unint64_t)v21 << 32) + v21;
      v34 = (v33 ^ (v33 >> 22)) + ~((v33 ^ (v33 >> 22)) << 13);
      v35 = v34 ^ (v34 >> 8);
      while (1)
      {
        if ((*(_BYTE *)(v31 + 4) & 0xEu) - 10 <= 3)
        {
          v64 = *(JSC::Symbol ***)(v31 + 8);
          if (v64)
          {
            a4 = *v64;
            if (*v64)
            {
              v65 = *((_QWORD *)a4 + 1);
              if (v65)
              {
                v66 = ((9 * v35) ^ ((9 * v35) >> 15)) + ~(((9 * v35) ^ ((9 * v35) >> 15)) << 27);
                v67 = *(_DWORD *)(v65 - 8);
                v68 = v67 & ((v66 >> 31) ^ v66);
                v69 = (uint64_t *)(v65 + 24 * v68);
                v70 = *v69;
                if (*v69 != v21)
                {
                  v71 = 1;
                  while (v70 != -1)
                  {
                    v68 = (v68 + v71) & v67;
                    v69 = (uint64_t *)(v65 + 24 * v68);
                    v70 = *v69;
                    ++v71;
                    if (*v69 == v21)
                      goto LABEL_104;
                  }
                  v69 = (uint64_t *)(v65 + 24 * *(unsigned int *)(v65 - 4));
                }
LABEL_104:
                if (v69 != (uint64_t *)(v65 + 24 * *(unsigned int *)(v65 - 4)) && (v69[2] & 0x12) != 0)
                  break;
              }
            }
          }
        }
        if (*(_BYTE *)(v31 + 5) == 61)
        {
          v53 = JSC::ProxyObject::putByIndexCommon((JSC::JSCell *)v31, a2, v12, v21, v9, v29, a7, a8);
LABEL_68:
          v54 = v53;
          v55 = 1;
          goto LABEL_70;
        }
        if ((*(_WORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v83 = v35;
          v84 = (*(uint64_t (**)(uint64_t, unint64_t))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v31 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0xB0))(v31, a2);
          v35 = v83;
          v36 = v84;
        }
        else
        {
          v36 = *(_QWORD *)(16 * (*(_DWORD *)v31 & 0xFFFFFFFE) + 0x30);
          if (!v36)
            v36 = *(_QWORD *)(v31 + 16);
        }
        if (*(_DWORD *)(v32 + 80))
        {
          v85 = *(_DWORD *)(v32 + 80);
          if ((v85 & 0x27) != 0 && (v85 & 0x20) == 0)
          {
            v103 = v36;
            v104 = v35;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v32 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
            v35 = v104;
            v36 = v103;
          }
          v54 = 0;
          if (*(_QWORD *)(v32 + 16))
          {
            v55 = 0;
            goto LABEL_70;
          }
          v55 = 0;
          if (v36 == 2)
            goto LABEL_70;
        }
        else if (v36 == 2)
        {
          v54 = 0;
          v55 = 0;
LABEL_70:
          if (!*(_DWORD *)(v14 + 80))
            goto LABEL_73;
          v87 = *(_DWORD *)(v14 + 80);
          if ((v87 & 0x27) != 0 && (v87 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
          if (!*(_QWORD *)(v14 + 16))
          {
LABEL_73:
            if (v55)
              return v54 != 0;
            if ((_DWORD)v29)
            {
              v52 = (JSC::VM **)&v112;
LABEL_66:
              JSC::throwTypeError(a2, v52, (uint64_t)"Attempted to assign to readonly property.", 42);
            }
          }
          return 0;
        }
        v31 = v36;
      }
      v53 = JSC::SparseArrayEntry::put((uint64_t)(v69 + 1), a2, (uint64_t)v12, (unint64_t)a4, v9, v29);
      goto LABEL_68;
    }
    if (a1 >> 49)
    {
      v30 = *(_QWORD *)(a2 + 1536);
      if ((v30 & 1) == 0)
        goto LABEL_34;
      v74 = *(uint64_t (**)(uint64_t *))(v30 & 0xFFFFFFFFFFFFFFFCLL);
      v86 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v86 = (uint64_t *)(a2 - 16);
      v76 = *v86;
      v77 = a2 + 1536;
    }
    else
    {
      if ((a1 & 0xFFFFFFFFFFFFFFFELL) != 6)
        goto LABEL_130;
      v30 = *(_QWORD *)(a2 + 1472);
      if ((v30 & 1) == 0)
        goto LABEL_34;
      v74 = *(uint64_t (**)(uint64_t *))(v30 & 0xFFFFFFFFFFFFFFFCLL);
      v75 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v75 = (uint64_t *)(a2 - 16);
      v76 = *v75;
      v77 = a2 + 1472;
    }
    v108 = v76;
    v109 = a2;
    v110 = v77;
    v30 = v74(&v108);
LABEL_34:
    v31 = *(_QWORD *)(v30 + 48);
    if (v31 == 2)
      return 0;
    goto LABEL_35;
  }
  v108 = 0;
  v109 = a1;
  LODWORD(v110) = -1;
  BYTE4(v110) = v29;
  *(_WORD *)((char *)&v110 + 5) = 0;
  HIBYTE(v110) = 1;
  v111 = 0;
  JSC::Identifier::from((uint64_t **)v14, 0xFFFFFFFFuLL, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v107);
  v22 = JSC::JSValue::putToPrimitive((JSC::JSValue *)&v105, (JSC::JSGlobalObject *)a2, (uint64_t)v107, v9, (uint64_t)&v108, v40, v41, v42);
  v50 = v107;
  v107 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, v43, v44, v45, v46, v47, v48, v49);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v50 -= 2;
    }
  }
  return v22;
}

uint64_t JSC::JSCell::putByIndex(unint64_t a1, uint64_t a2, unint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const WTF::StringImpl *v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t result;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  JSC::SymbolObject *v37;
  int v38;
  JSC::VM *v39;
  WTF::StringImpl *v40;
  const WTF::StringImpl *v41;
  _QWORD v42[2];
  int v43;
  char v44;
  __int16 v45;
  char v46;
  uint64_t v47;

  v12 = (const WTF::StringImpl *)a1;
  v13 = *(unsigned __int8 *)(a1 + 5);
  if (v13 - 2 > 2)
  {
    if (v13 <= 0x16)
    {
      switch(v13)
      {
        case 2u:
          v36 = JSC::JSString::toObject(a1, (JSC::JSGlobalObject *)a2, a1, (uint64_t)a4, a5, a6, a7, a8);
          break;
        case 4u:
          v37 = *(JSC::SymbolObject **)(a2 + 56);
          v38 = *(_DWORD *)(a2 + 1172);
          if (v38)
            v39 = (JSC::VM *)(16 * (v38 & 0xFFFFFFFE));
          else
            v39 = 0;
          v36 = JSC::SymbolObject::create(v37, v39, (uint64_t)v12, a4, a5, a6, a7, a8);
          break;
        case 3u:
          v36 = JSC::BigIntObject::create(*(_QWORD *)(a2 + 56), (JSC::VM *)a2, a1, (uint64_t)a4, a5, a6, a7, a8);
          break;
        default:
          result = 270;
          __break(0xC471u);
          return result;
      }
      v12 = (const WTF::StringImpl *)v36;
    }
    return (*(uint64_t (**)(const WTF::StringImpl *, uint64_t, unint64_t, JSC::Symbol *, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C) + 0x50))(v12, a2, a3, a4, a5);
  }
  v14 = *(uint64_t ***)(a2 + 56);
  v42[0] = 0;
  v42[1] = v12;
  v43 = -1;
  v44 = a5;
  v45 = 0;
  v46 = 1;
  v47 = 0;
  v41 = v12;
  JSC::Identifier::from(v14, a3, v12, (uint64_t)a4, a5, a6, a7, a8, (int **)&v40);
  v25 = JSC::JSValue::putToPrimitive((JSC::JSValue *)&v41, (JSC::JSGlobalObject *)a2, (uint64_t)v40, (unint64_t)a4, (uint64_t)v42, v15, v16, v17);
  v26 = v40;
  v40 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  return v25;
}

uint64_t JSC::JSCell::deleteProperty(unint64_t a1, uint64_t a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v11;
  unsigned int v12;
  uint64_t result;
  unint64_t v14;
  JSC::SymbolObject *v15;
  int v16;
  JSC::VM *v17;

  v11 = (_DWORD *)a1;
  v12 = *(unsigned __int8 *)(a1 + 5);
  if (v12 > 0x16)
    return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, JSC::Symbol *))(16
                                                                                * *(unsigned int *)(16 * (*v11 & 0xFFFFFFFE)
                                                                                                  + 0x4C)
                                                                                + 0x58))(v11, a2, a3, a4);
  switch(v12)
  {
    case 2u:
      v14 = JSC::JSString::toObject(a1, (JSC::JSGlobalObject *)a2, a1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_5:
      v11 = (_DWORD *)v14;
      return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, JSC::Symbol *))(16
                                                                                  * *(unsigned int *)(16 * (*v11 & 0xFFFFFFFE) + 0x4C)
                                                                                  + 0x58))(v11, a2, a3, a4);
    case 4u:
      v15 = *(JSC::SymbolObject **)(a2 + 56);
      v16 = *(_DWORD *)(a2 + 1172);
      if (v16)
        v17 = (JSC::VM *)(16 * (v16 & 0xFFFFFFFE));
      else
        v17 = 0;
      v14 = JSC::SymbolObject::create(v15, v17, (uint64_t)v11, a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 3u:
      v14 = JSC::BigIntObject::create(*(_QWORD *)(a2 + 56), (JSC::VM *)a2, a1, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_5;
  }
  result = 270;
  __break(0xC471u);
  return result;
}

{
  _DWORD *v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v13;
  JSC::SymbolObject *v14;
  int v15;
  JSC::VM *v16;
  int v17;
  __int16 v18;

  v10 = (_DWORD *)a1;
  v11 = *(unsigned __int8 *)(a1 + 5);
  if (v11 > 0x16)
    goto LABEL_2;
  switch(v11)
  {
    case 2u:
      v13 = JSC::JSString::toObject(a1, (JSC::JSGlobalObject *)a2, a1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_5:
      v10 = (_DWORD *)v13;
LABEL_2:
      v17 = -1;
      v18 = 1;
      return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, int *))(16
                                                                          * *(unsigned int *)(16 * (*v10 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0x58))(v10, a2, a3, &v17);
    case 4u:
      v14 = *(JSC::SymbolObject **)(a2 + 56);
      v15 = *(_DWORD *)(a2 + 1172);
      if (v15)
        v16 = (JSC::VM *)(16 * (v15 & 0xFFFFFFFE));
      else
        v16 = 0;
      v13 = JSC::SymbolObject::create(v14, v16, (uint64_t)v10, a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 3u:
      v13 = JSC::BigIntObject::create(*(_QWORD *)(a2 + 56), (JSC::VM *)a2, a1, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_5;
  }
  result = 270;
  __break(0xC471u);
  return result;
}

uint64_t JSC::JSCell::deletePropertyByIndex(JSC::JSCell *this, JSC::SymbolObject **a2, JSC::JSGlobalObject *a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v10;
  unsigned int v11;
  uint64_t result;
  unint64_t v13;
  JSC::SymbolObject *v14;
  int v15;
  JSC::VM *v16;

  v10 = this;
  v11 = *((unsigned __int8 *)this + 5);
  if (v11 > 0x16)
    return (*(uint64_t (**)(JSC::JSCell *, JSC::SymbolObject **, JSC::JSGlobalObject *))(16
                                                                                                 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C)
                                                                                                 + 0x60))(v10, a2, a3);
  switch(v11)
  {
    case 2u:
      v13 = JSC::JSString::toObject((unint64_t)this, (JSC::JSGlobalObject *)a2, (uint64_t)this, (uint64_t)a4, a5, a6, a7, a8);
LABEL_5:
      v10 = (JSC::JSCell *)v13;
      return (*(uint64_t (**)(JSC::JSCell *, JSC::SymbolObject **, JSC::JSGlobalObject *))(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) + 0x60))(v10, a2, a3);
    case 4u:
      v14 = a2[7];
      v15 = *((_DWORD *)a2 + 293);
      if (v15)
        v16 = (JSC::VM *)(16 * (v15 & 0xFFFFFFFE));
      else
        v16 = 0;
      v13 = JSC::SymbolObject::create(v14, v16, (uint64_t)v10, a4, a5, a6, a7, a8);
      goto LABEL_5;
    case 3u:
      v13 = JSC::BigIntObject::create((uint64_t)a2[7], (JSC::VM *)a2, (uint64_t)this, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_5;
  }
  result = 270;
  __break(0xC471u);
  return result;
}

uint64_t JSC::JSCell::toPrimitive(uint64_t result, JSC::VM **a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = *(unsigned __int8 *)(result + 5);
  if ((!result || v8 != 2) && (!result || v8 != 4) && (!result || v8 != 3))
  {
    if (v8 <= 0x16)
    {
      result = 270;
      __break(0xC471u);
    }
    else
    {
      return JSC::JSObject::toPrimitive((JSC::Structure *)result, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  return result;
}

uint64_t JSC::JSCell::toObjectSlow(JSC::JSCell *this, JSC::SymbolObject **a2, uint64_t a3, JSC::Symbol *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t result;
  JSC::SymbolObject *v11;
  int v12;
  JSC::VM *v13;

  v9 = *((unsigned __int8 *)this + 5);
  switch(v9)
  {
    case 2:
      return JSC::JSString::toObject((unint64_t)this, (JSC::JSGlobalObject *)a2, (uint64_t)this, (uint64_t)a4, a5, a6, a7, a8);
    case 4:
      v11 = a2[7];
      v12 = *((_DWORD *)a2 + 293);
      if (v12)
        v13 = (JSC::VM *)(16 * (v12 & 0xFFFFFFFE));
      else
        v13 = 0;
      return JSC::SymbolObject::create(v11, v13, (uint64_t)this, a4, a5, a6, a7, a8);
    case 3:
      return JSC::BigIntObject::create((uint64_t)a2[7], (JSC::VM *)a2, (uint64_t)this, (uint64_t)a4, a5, a6, a7, a8);
    default:
      result = 270;
      __break(0xC471u);
      break;
  }
  return result;
}

void JSC::JSCell::getOwnPropertySlot()
{
  __break(0xC471u);
}

void JSC::JSCell::getOwnPropertySlotByIndex()
{
  __break(0xC471u);
}

void JSC::JSCell::getOwnPropertyNames()
{
  __break(0xC471u);
}

void JSC::JSCell::getOwnSpecialPropertyNames()
{
  __break(0xC471u);
}

void JSC::JSCell::defineOwnProperty()
{
  __break(0xC471u);
}

void JSC::JSCell::preventExtensions(JSC::JSCell *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  __break(0xC471u);
}

void JSC::JSCell::isExtensible(JSC::JSCell *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  __break(0xC471u);
}

void JSC::JSCell::setPrototype()
{
  __break(0xC471u);
}

void JSC::JSCell::getPrototype(JSC::JSCell *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3)
{
  __break(0xC471u);
}

uint64_t JSC::JSCell::toStringSlowCase(JSC::JSCell *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  JSC::JSCell *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;
  WTF::StringImpl *v44;

  v43 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v8 = v43;
  v9 = *((_QWORD *)v43 + 5246);
  if (this)
  {
    v10 = this;
    if (*((_BYTE *)this + 5) == 3)
    {
      if (*((_DWORD *)this + 2))
      {
        JSC::JSBigInt::toStringGeneric(v43, a2, this, 10, a5, a6, a7, a8, (int **)&v44);
      }
      else
      {
        if (*((_BYTE *)v43 + 44265))
        {
          v11 = *(WTF::StringImpl **)(*((_QWORD *)v43 + 5325) + 8);
          if ((v11 & 1) != 0)
            v12 = 0;
          else
            v12 = *(_DWORD **)(*((_QWORD *)v43 + 5325) + 8);
          *v12 += 2;
        }
        else
        {
          LOBYTE(v42) = 48;
          WTF::AtomStringImpl::add((uint64_t)&v42, 1uLL, a4, a5, a6, a7, a8, &v44);
          v11 = v44;
        }
        v44 = v11;
      }
      if (*((_DWORD *)v8 + 20))
      {
        v32 = *((_DWORD *)v8 + 20);
        if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v8 + 64), 7u, (uint64_t)v10, a4, a5, a6, a7, a8);
        v13 = v44;
        if (*((_QWORD *)v8 + 2))
        {
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::~StringImpl(v44, a2, (uint64_t)v10, a4, a5, a6, a7, a8);
              WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
            }
            else
            {
              *(_DWORD *)v44 -= 2;
            }
          }
          return v9;
        }
      }
      else
      {
        v13 = v44;
      }
      v44 = 0;
      v42 = v13;
      v21 = JSC::JSString::create((uint64_t)v8, (JSC::VM *)&v42, (uint64_t)v10, a4, a5, a6, a7, a8);
      v22 = v42;
      v42 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
        {
          WTF::StringImpl::~StringImpl(v22, v14, v15, v16, v17, v18, v19, v20);
          WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        else
        {
          *(_DWORD *)v22 -= 2;
        }
      }
      if (*((_DWORD *)v8 + 20))
      {
        v33 = *((_DWORD *)v8 + 20);
        if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v8 + 64), 7u, v15, v16, v17, v18, v19, v20);
        if (*((_QWORD *)v8 + 2))
          return v9;
      }
      return v21;
    }
  }
  JSC::throwTypeError((unint64_t)a2, &v43, (uint64_t)"Cannot convert a symbol to a string", 36);
  return v9;
}

uint64_t JSC::JSCellLock::lockSlow(JSC::JSCellLock *this)
{
  return WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
}

uint64_t WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(uint64_t result)
{
  unsigned __int8 *v1;
  unsigned int v2;
  unsigned __int8 v3;
  char v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;

  v1 = (unsigned __int8 *)result;
  v2 = 0;
  do
  {
    do
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v3 = atomic_load(v1);
            v4 = v3;
            if ((v3 & 0x40) != 0)
              break;
            v5 = __ldaxr(v1);
            if (v5 != v3)
              goto LABEL_16;
            if (!__stlxr(v3 | 0x40, v1))
              return result;
          }
          if ((char)v3 < 0 || v2 > 0x27)
            break;
          ++v2;
          result = MEMORY[0x19AEBBF94](0, 1, 1);
        }
        if ((char)v3 < 0)
          goto LABEL_12;
        v6 = __ldaxr(v1);
        if (v6 == v3)
          break;
LABEL_16:
        __clrex();
      }
      v4 = v3 | 0x80;
    }
    while (__stlxr(v3 | 0x80, v1));
LABEL_12:
    if ((v4 & 0x40) == 0)
    {
      WTF::dataLog<char [16]>("Lock not held!\n");
      WTFCrashWithInfoImpl(75, "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/LockAlgorithmInlines.h", "static void WTF::LockAlgorithm<unsigned char, '@', '\\x80'>::lockSlow(Atomic<LockType> &) [LockType = unsigned char, isHeldBit = '@', hasParkedBit = '\\x80', Hooks = WTF::EmptyLockHooks<unsigned char>]");
    }
    result = WTF::ParkingLot::compareAndPark<unsigned char,unsigned char>((uint64_t)v1, v4);
  }
  while ((result & 1) == 0 || v7 != 1);
  v8 = atomic_load(v1);
  if ((v8 & 0x40) == 0)
  {
    result = 90;
    __break(0xC471u);
  }
  return result;
}

void JSC::JSCellLock::unlockSlow(JSC::JSCellLock *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, a3, a4, a5, a6, a7, a8);
}

void WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  _QWORD v10[2];
  unsigned __int8 v11;
  int v12;
  _QWORD v13[3];

  v12 = a2;
  while (1)
  {
    v8 = atomic_load(a1);
    v11 = v8;
    if (v8 <= 0xBF && (v8 & 0xC0) != 0x40)
    {
      WTF::dataLog<char [25],unsigned char,char [2]>("Invalid value for lock: ", &v11, "\n");
      WTFCrashWithInfoImpl(116, "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/LockAlgorithmInlines.h", "static void WTF::LockAlgorithm<unsigned char, '@', '\\x80'>::unlockSlow(Atomic<LockType> &, Fairness) [LockType = unsigned char, isHeldBit = '@', hasParkedBit = '\\x80', Hooks = WTF::EmptyLockHooks<unsigned char>]");
    }
    if ((v8 & 0xC0) != 0x40)
      break;
    v9 = __ldaxr(a1);
    if (v9 == v8)
    {
      if (!__stlxr(v8 & 0xBF, a1))
        return;
    }
    else
    {
      __clrex();
    }
  }
  v10[0] = &v12;
  v10[1] = a1;
  v13[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::Atomic<unsigned char> &,WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::Fairness)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
  v13[1] = v13;
  v13[2] = v10;
  WTF::ParkingLot::unparkOneImpl((uint64_t)a1, (unint64_t)v13, a3, a4, a5, a6, a7, a8);
}

void JSC::JSCustomGetterFunction::destroy(JSC::JSCustomGetterFunction *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
}

void JSC::JSCustomGetterFunction::create(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  JSC::NativeExecutable *HostFunction;
  WTF::StringImpl *v23;
  unint64_t v24;
  JSC::Heap *v25;
  unint64_t SlowCase;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  WTF::AtomStringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(WTF::StringImpl **);
  WTF::StringImpl **v73;
  unint64_t v74;
  uint64_t v75;
  JSC::Heap *v76;
  JSC::Heap *v77;
  __int128 v78;
  uint64_t v79;
  WTF::StringImpl *v80[3];

  v13 = (WTF::StringImpl *)*a3;
  if (*a3)
  {
    if ((*((_BYTE *)v13 + 16) & 0x20) != 0)
      v13 = 0;
    else
      *(_DWORD *)v13 += 2;
  }
  v14 = a1 + 40416;
  v80[0] = v13;
  HostFunction = (JSC::NativeExecutable *)JSC::VM::getHostFunction((uint64_t *)a1, (uint64_t)JSC::customGetterFunctionCall, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0, v80, a8);
  v23 = v80[0];
  v80[0] = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
      WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  v24 = *(_QWORD *)(a2 + 1024);
  if ((v24 & 1) != 0)
  {
    v72 = *(uint64_t (**)(WTF::StringImpl **))(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v73 = (WTF::StringImpl **)(a2 - 16);
    else
      v73 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v80[0] = *v73;
    v80[1] = (WTF::StringImpl *)a2;
    v80[2] = (WTF::StringImpl *)(a2 + 1024);
    v24 = v72(v80);
  }
  v25 = *(JSC::Heap **)v14;
  if (!*(_QWORD *)v14)
    v25 = JSC::GCClient::Heap::customGetterFunctionSpaceSlow((JSC::Heap **)(a1 + 37552));
  SlowCase = *((_QWORD *)v25 + 3);
  if (SlowCase < *((_QWORD *)v25 + 4))
    goto LABEL_11;
  SlowCase = *((_QWORD *)v25 + 5);
  if ((SlowCase & 1) == 0)
  {
    v74 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v25 + 6);
    *((_QWORD *)v25 + 4) = SlowCase + HIDWORD(v74);
    *((_QWORD *)v25 + 5) = SlowCase + (int)v74;
LABEL_11:
    *((_QWORD *)v25 + 3) = SlowCase + 80;
    goto LABEL_12;
  }
  v75 = v14;
  v76 = v25;
  JSC::sanitizeStackForVM((JSC *)a1, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
  v77 = v76;
  v14 = v75;
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v77, a1 + 192, 80, 0, 0);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  v78 = *a5;
  v79 = *((_QWORD *)a5 + 2);
  v27 = *(_DWORD *)(v24 + 8);
  *(_DWORD *)SlowCase = v24 >> 4;
  *(_DWORD *)(SlowCase + 4) = v27;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = a2;
  *(_QWORD *)(SlowCase + 24) = HostFunction;
  v28 = (WTF::StringImpl *)*a3;
  v29 = *(_DWORD *)(*a3 + 16);
  if ((v29 & 0x20) != 0)
  {
    v30 = *(_DWORD *)v28 + 2;
LABEL_17:
    *(_DWORD *)v28 = v30;
    goto LABEL_18;
  }
  if ((v29 & 0x10) != 0)
  {
    *(_DWORD *)v28 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v14 + 1496), *a3, v16, v17, v18, v19, v20, v21, v80);
    v28 = v80[0];
  }
  v30 = *(_DWORD *)v28;
  *(_DWORD *)v28 += 2;
  if (v30)
    goto LABEL_17;
  WTF::StringImpl::~StringImpl(v28, v15, (uint64_t)v16, v17, v18, v19, v20, v21);
  WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
LABEL_18:
  *(_QWORD *)(SlowCase + 32) = v28;
  *(_QWORD *)(SlowCase + 40) = a4;
  *(_OWORD *)(SlowCase + 48) = v78;
  *(_QWORD *)(SlowCase + 64) = v79;
  v31 = *a3;
  if (!*a3)
  {
LABEL_33:
    v35 = 1;
    v34 = 4;
    goto LABEL_23;
  }
  v32 = *(_DWORD *)(v31 + 16);
  if ((v32 & 0x20) != 0)
  {
    v31 = 0;
    goto LABEL_33;
  }
  v33 = *(_DWORD *)(v31 + 4);
  if (v33 < 0)
    goto LABEL_42;
  v34 = v33 + 4;
  if (__OFADD__(v33, 4))
    goto LABEL_42;
  v35 = (v32 >> 2) & 1;
LABEL_23:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomStringImpl *,void>>(v80, v34, v35, (int8x16_t *)"get ", 4u, v31);
  if (!v80[0])
  {
LABEL_42:
    __break(0xC471u);
    return;
  }
  JSC::JSFunction::finishCreation((JSC::JSFunction *)SlowCase, (JSC::VM *)a1, HostFunction, 0, (const WTF::String *)v80, v39, v36, v37, v38);
  v47 = v80[0];
  v80[0] = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, v40, v41, v42, v43, v44, v45, v46);
      WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
}

uint64_t JSC::customGetterFunctionCall(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  unint64_t v4;
  int8x16_t **v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  JSC::VM *v12;

  v12 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 3);
  v4 = *((_QWORD *)a2 + 5);
  if (!*(_BYTE *)(v3 + 64))
    return (*(uint64_t (**)(void))(v3 + 40))();
  v5 = *(int8x16_t ***)(v3 + 48);
  if ((v4 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError((unint64_t)this, &v12, v5, *(WTF::StringImpl **)(v3 + 32));
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = 16 * v6;
  if ((_DWORD)v6)
    v9 = v5 == (int8x16_t **)v8;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = *(_QWORD *)(v8 + 16);
      v7 = v8 != 0;
    }
    while ((int8x16_t **)v8 != v5 && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeGetterTypeError((unint64_t)this, &v12, v5, *(WTF::StringImpl **)(v3 + 32));
  else
    return (*(uint64_t (**)(void))(v3 + 40))();
}

void JSC::JSCustomSetterFunction::destroy(JSC::JSCustomSetterFunction *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v10, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
}

void JSC::JSCustomSetterFunction::create(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC::NativeExecutable *HostFunction;
  WTF::StringImpl *v22;
  unint64_t v23;
  JSC::Heap *v24;
  unint64_t SlowCase;
  int v26;
  WTF::StringImpl *v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  WTF::AtomStringImpl *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(WTF::StringImpl **);
  WTF::StringImpl **v72;
  unint64_t v73;
  uint64_t v74;
  JSC::Heap *v75;
  JSC::Heap *v76;
  WTF::StringImpl *v77[3];

  v12 = (WTF::StringImpl *)*a3;
  if (*a3)
  {
    if ((*((_BYTE *)v12 + 16) & 0x20) != 0)
      v12 = 0;
    else
      *(_DWORD *)v12 += 2;
  }
  v13 = a1 + 40424;
  v77[0] = v12;
  HostFunction = (JSC::NativeExecutable *)JSC::VM::getHostFunction((uint64_t *)a1, (uint64_t)JSC::customSetterFunctionCall, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0, v77, a8);
  v22 = v77[0];
  v77[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v47, v48, v49, v50, v51, v52, v53, v54);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  v23 = *(_QWORD *)(a2 + 1032);
  if ((v23 & 1) != 0)
  {
    v71 = *(uint64_t (**)(WTF::StringImpl **))(v23 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v72 = (WTF::StringImpl **)(a2 - 16);
    else
      v72 = (WTF::StringImpl **)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v77[0] = *v72;
    v77[1] = (WTF::StringImpl *)a2;
    v77[2] = (WTF::StringImpl *)(a2 + 1032);
    v23 = v71(v77);
  }
  v24 = *(JSC::Heap **)v13;
  if (!*(_QWORD *)v13)
    v24 = JSC::GCClient::Heap::customSetterFunctionSpaceSlow((JSC::Heap **)(a1 + 37552));
  SlowCase = *((_QWORD *)v24 + 3);
  if (SlowCase < *((_QWORD *)v24 + 4))
    goto LABEL_11;
  SlowCase = *((_QWORD *)v24 + 5);
  if ((SlowCase & 1) == 0)
  {
    v73 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v24 + 6);
    *((_QWORD *)v24 + 4) = SlowCase + HIDWORD(v73);
    *((_QWORD *)v24 + 5) = SlowCase + (int)v73;
LABEL_11:
    *((_QWORD *)v24 + 3) = SlowCase + 48;
    goto LABEL_12;
  }
  v74 = v13;
  v75 = v24;
  JSC::sanitizeStackForVM((JSC *)a1, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
  v76 = v75;
  v13 = v74;
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v76, a1 + 192, 48, 0, 0);
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  v26 = *(_DWORD *)(v23 + 8);
  *(_DWORD *)SlowCase = v23 >> 4;
  *(_DWORD *)(SlowCase + 4) = v26;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = a2;
  *(_QWORD *)(SlowCase + 24) = HostFunction;
  v27 = (WTF::StringImpl *)*a3;
  v28 = *(_DWORD *)(*a3 + 16);
  if ((v28 & 0x20) != 0)
  {
    v29 = *(_DWORD *)v27 + 2;
LABEL_17:
    *(_DWORD *)v27 = v29;
    goto LABEL_18;
  }
  if ((v28 & 0x10) != 0)
  {
    *(_DWORD *)v27 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(v13 + 1488), *a3, v15, v16, v17, v18, v19, v20, v77);
    v27 = v77[0];
  }
  v29 = *(_DWORD *)v27;
  *(_DWORD *)v27 += 2;
  if (v29)
    goto LABEL_17;
  WTF::StringImpl::~StringImpl(v27, v14, (uint64_t)v15, v16, v17, v18, v19, v20);
  WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
LABEL_18:
  *(_QWORD *)(SlowCase + 32) = v27;
  *(_QWORD *)(SlowCase + 40) = a4;
  v30 = *a3;
  if (!*a3)
  {
LABEL_33:
    v34 = 1;
    v33 = 4;
    goto LABEL_23;
  }
  v31 = *(_DWORD *)(v30 + 16);
  if ((v31 & 0x20) != 0)
  {
    v30 = 0;
    goto LABEL_33;
  }
  v32 = *(_DWORD *)(v30 + 4);
  if (v32 < 0)
    goto LABEL_42;
  v33 = v32 + 4;
  if (__OFADD__(v32, 4))
    goto LABEL_42;
  v34 = (v31 >> 2) & 1;
LABEL_23:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomStringImpl *,void>>(v77, v33, v34, (int8x16_t *)"set ", 4u, v30);
  if (!v77[0])
  {
LABEL_42:
    __break(0xC471u);
    return;
  }
  JSC::JSFunction::finishCreation((JSC::JSFunction *)SlowCase, (JSC::VM *)a1, HostFunction, 1, (const WTF::String *)v77, v38, v35, v36, v37);
  v46 = v77[0];
  v77[0] = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v39, v40, v41, v42, v43, v44, v45);
      WTF::fastFree(v55, v56, v57, v58, v59, v60, v61, v62);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
}

uint64_t JSC::customSetterFunctionCall(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a2 + 5);
  if (*((_DWORD *)a2 + 8) == 1)
    v6 = 10;
  else
    v6 = *((_QWORD *)a2 + 6);
  (*(void (**)(JSC *, uint64_t, uint64_t, _QWORD))(v4 + 40))(this, v5, v6, *(_QWORD *)(v4 + 32));
  return 10;
}

unint64_t JSC::JSDataView::create(JSC::JSGlobalObject *a1, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  char v18;
  JSC::Heap *v19;
  uint64_t v20;
  unint64_t SlowCase;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  const WTF::String *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::AtomStringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t (*v51)();
  char v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  JSC::VM *v67;

  v9 = *((_QWORD *)a1 + 7);
  v67 = (JSC::VM *)v9;
  v10 = *(_QWORD *)a3;
  v11 = *(_QWORD *)(*(_QWORD *)a3 + 16);
  if (!v11
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::throwTypeError((unint64_t)a1, &v67, (uint64_t)"Underlying ArrayBuffer has been detached from the view or out-of-bounds", 72);
    return 0;
  }
  if (*(_BYTE *)(v10 + 64) && (v61 = *(_QWORD *)(v10 + 32)) != 0)
    v15 = *(_QWORD *)(v61 + 32);
  else
    v15 = *(_QWORD *)(v10 + 48);
  v16 = a6 == 0;
  if (a5 <= v15 - a4)
    v16 = 1;
  if (v15 < a4 || !v16)
  {
    v35 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v35 = 0x1D00000002;
    *(_QWORD *)(v35 + 8) = "Length out of range of buffer";
    *(_DWORD *)(v35 + 16) = 4;
    v66 = (WTF::StringImpl *)v35;
    v37 = JSC::createRangeError((unint64_t)a1, &v66, v36);
    JSC::VM::throwException((JSC::VM *)v9, a1, v37, v38, v39, v40, v41, v42);
    v50 = v66;
    v66 = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 2)
      {
        WTF::StringImpl::~StringImpl(v50, v43, v44, v45, v46, v47, v48, v49);
        WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
      }
      else
      {
        *(_DWORD *)v50 -= 2;
      }
    }
    return 0;
  }
  if ((_BYTE)a6)
    v17 = a5;
  else
    v17 = 0;
  if (*(_BYTE *)(v10 + 64))
  {
    if (*(_QWORD *)(v10 + 32))
      v51 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
    else
      v51 = 0;
    if (v51)
      v52 = -118;
    else
      v52 = -116;
    if ((_BYTE)a6)
      v18 = v52;
    else
      v18 = v52 + 1;
  }
  else
  {
    v18 = -120;
  }
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v11 = (v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if (!*(_DWORD *)v10)
  {
    JSC::ArrayBuffer::~ArrayBuffer((JSC::ArrayBuffer *)v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
  }
  v19 = *(JSC::Heap **)(v9 + 40432);
  if (!v19)
    v19 = JSC::GCClient::Heap::dataViewSpaceSlow((JSC::Heap **)(v9 + 37552));
  v20 = v9 + 192;
  SlowCase = *((_QWORD *)v19 + 3);
  if (SlowCase >= *((_QWORD *)v19 + 4))
  {
    SlowCase = *((_QWORD *)v19 + 5);
    if ((SlowCase & 1) != 0)
    {
      v62 = (uint64_t)v19;
      JSC::sanitizeStackForVM((JSC *)v9, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v62, v9 + 192, 64, 0, 0, v63, v64, v65);
      v20 = v9 + 192;
      goto LABEL_25;
    }
    v34 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v19 + 6);
    *((_QWORD *)v19 + 4) = SlowCase + HIDWORD(v34);
    *((_QWORD *)v19 + 5) = SlowCase + (int)v34;
  }
  *((_QWORD *)v19 + 3) = SlowCase + 64;
LABEL_25:
  *(_DWORD *)SlowCase = 0;
  v22 = *(_QWORD *)a3;
  v23 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v23;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = v17;
  *(_QWORD *)(SlowCase + 32) = a4;
  *(_BYTE *)(SlowCase + 40) = v18;
  if (*(_BYTE *)(v9 + 755))
  {
    __dmb(0xAu);
    *(_QWORD *)(SlowCase + 8) = 0;
    if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
      JSC::Heap::writeBarrierSlowPath(v20, SlowCase);
    __dmb(0xAu);
  }
  else if (*(_DWORD *)(v9 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v20, SlowCase);
  }
  if (v11)
  {
    v24 = v11 + a4;
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v24 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  }
  else
  {
    v24 = 0;
  }
  *(_QWORD *)(SlowCase + 16) = v24;
  *(_QWORD *)(SlowCase + 48) = v22;
  JSC::JSArrayBufferView::finishCreation(SlowCase, (JSC::VM *)v9);
  return SlowCase;
}

unint64_t JSC::JSDataViewPrototype::create(JSC::JSDataViewPrototype *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;

  v10 = JSC::allocateCell<JSC::IntlCollatorPrototype>(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v10 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v10 + 4) = v11;
  *(_QWORD *)(v10 + 8) = 0;
  JSC::JSDataViewPrototype::finishCreation((JSC::JSDataViewPrototype *)v10, this);
  return v10;
}

void JSC::JSDataViewPrototype::finishCreation(JSC::JSDataViewPrototype *this, JSC::VM *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;

  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v5 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v5 = 0x800000002;
  *(_QWORD *)(v5 + 8) = "DataView";
  *(_DWORD *)(v5 + 16) = 4;
  v33 = (WTF::StringImpl *)v5;
  v12 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v33, v6, v7, v8, v9, v10, v11);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v4, v12, 6, v13, v14, v15, v16);
  v24 = v33;
  v33 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
}

uint64_t JSC::dataViewProtoGetterBuffer(JSC::JSGlobalObject *a1, JSC::JSArrayBufferView *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;

  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || *((_BYTE *)this + 5) != 50)
    return JSC::throwTypeError((unint64_t)a1, &v9, (uint64_t)"DataView.prototype.buffer expects |this| to be a DataView object", 65);
  else
    return JSC::JSArrayBufferView::possiblySharedJSBuffer(this, a1, a3, a4, a5, a6, a7, a8);
}

unint64_t JSC::dataViewProtoGetterByteLength(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  unsigned __int8 v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  JSC::VM *v40;

  v40 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 50)
  {
    v11 = "DataView.prototype.byteLength expects |this| to be a DataView object";
    v12 = 69;
    return JSC::throwTypeError(a1, &v40, (uint64_t)v11, v12);
  }
  if ((*(_BYTE *)(a2 + 40) & 8) != 0)
  {
    v8 = *(_QWORD *)(a2 + 16);
    if (!v8
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v8 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
LABEL_34:
      v11 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
      v12 = 72;
      return JSC::throwTypeError(a1, &v40, (uint64_t)v11, v12);
    }
  }
  if ((*(_BYTE *)(a2 + 40) & 7u) > 2)
  {
    v13 = *(_QWORD *)(a2 + 48);
    if (!v13)
    {
      v9 = 0;
      return v9 | 0xFFFE000000000000;
    }
    *(_DWORD *)v13 += 2;
    if (*(_BYTE *)(v13 + 64) && (v34 = *(_QWORD *)(v13 + 32)) != 0)
    {
      v14 = atomic_load((unint64_t *)(v34 + 32));
      v15 = *(_BYTE *)(a2 + 5);
      v16 = *(_QWORD *)(a2 + 24);
      v17 = *(_QWORD *)(a2 + 32);
      v18 = 1;
      switch(v15)
      {
        case '*':
        case '+':
          break;
        case ',':
        case '-':
        case '.':
          v18 = 2;
          break;
        case '/':
        case '0':
        case '1':
          v18 = 3;
          break;
        default:
          goto LABEL_18;
      }
    }
    else
    {
      v14 = *(_QWORD *)(v13 + 48);
      v15 = 50;
      v16 = *(_QWORD *)(a2 + 24);
      v17 = *(_QWORD *)(a2 + 32);
LABEL_18:
      v18 = 0;
    }
    v19 = (v16 << v18) + v17;
    if (v19 <= v14)
    {
      if ((*(_BYTE *)(a2 + 40) & 1) != 0)
      {
        v20 = v14 - v17;
      }
      else
      {
        v23 = v15 - 42;
        if (v23 > 7u)
          LOBYTE(v24) = 0;
        else
          v24 = qword_199158270[(char)v23];
        v20 = v16 << v24;
      }
      v21 = v20 & 0xFFFFFFFFFFFFFF00;
    }
    else
    {
      LOBYTE(v20) = 0;
      v21 = 0;
    }
    v25 = *(_DWORD *)v13 == 2;
    *(_DWORD *)v13 -= 2;
    if (v25)
    {
      v38 = v14;
      v39 = a1;
      v36 = v20;
      v37 = v19;
      v35 = v21;
      JSC::ArrayBuffer::~ArrayBuffer((JSC::ArrayBuffer *)v13, (void *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      v21 = v35;
      LOBYTE(v20) = v36;
      v19 = v37;
      v14 = v38;
      a1 = v39;
    }
    if (v19 <= v14)
    {
      v9 = v21 | v20;
      goto LABEL_10;
    }
    goto LABEL_34;
  }
  v9 = *(_QWORD *)(a2 + 24);
LABEL_10:
  if (HIDWORD(v9))
  {
    v22 = (double)v9;
  }
  else
  {
    if ((v9 & 0x80000000) == 0)
      return v9 | 0xFFFE000000000000;
    v22 = (double)v9;
  }
  return *(_QWORD *)&v22 + 0x2000000000000;
}

BOOL JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;

  if ((*(_BYTE *)(a1 + 40) & 8) != 0
    && ((v9 = *(_QWORD *)(a1 + 16)) == 0
     || qword_1ECF4C038
     && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
     && !((v9 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
  {
    return 0;
  }
  else if ((*(_BYTE *)(a1 + 40) & 7u) >= 3 && (v12 = *(_QWORD *)(a1 + 48)) != 0)
  {
    *(_DWORD *)v12 += 2;
    if (*((_BYTE *)a2 + 8))
    {
      v13 = *a2;
    }
    else
    {
      if (*(_BYTE *)(v12 + 64) && (v27 = *(_QWORD *)(v12 + 32)) != 0)
        v13 = atomic_load((unint64_t *)(v27 + 32));
      else
        v13 = *(_QWORD *)(v12 + 48);
      *a2 = v13;
      *((_BYTE *)a2 + 8) = 1;
    }
    v15 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    v16 = *(_BYTE *)(a1 + 5) - 42;
    if (v16 > 7u)
      LOBYTE(v17) = 0;
    else
      v17 = qword_199158270[(char)v16];
    v10 = (v15 << v17) + v14 <= v13;
    v18 = *(_DWORD *)v12 == 2;
    *(_DWORD *)v12 -= 2;
    if (v18)
    {
      v28 = v10;
      JSC::ArrayBuffer::~ArrayBuffer((JSC::ArrayBuffer *)v12, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v19, v20, v21, v22, v23, v24, v25, v26);
      return v28;
    }
  }
  else
  {
    return 1;
  }
  return v10;
}

unint64_t JSC::dataViewProtoGetterByteOffset(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v10;
  const char *v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  char v16;
  JSC::VM *v17;

  v8 = a1;
  v17 = *(JSC::VM **)(a1 + 56);
  if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 50)
  {
    v12 = "DataView.prototype.byteOffset expects |this| to be a DataView object";
    v13 = 69;
    return JSC::throwTypeError(a1, &v17, (uint64_t)v12, v13);
  }
  LOBYTE(v15) = 0;
  v16 = 0;
  if (!JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(a2, &v15, a3, a4, a5, a6, a7, a8))
  {
    v12 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    a1 = v8;
    v13 = 72;
    return JSC::throwTypeError(a1, &v17, (uint64_t)v12, v13);
  }
  v10 = *(_QWORD *)(a2 + 32);
  if (HIDWORD(v10))
  {
    v14 = (double)v10;
    return *(_QWORD *)&v14 + 0x2000000000000;
  }
  if ((v10 & 0x80000000) != 0)
  {
    v14 = (double)v10;
    return *(_QWORD *)&v14 + 0x2000000000000;
  }
  return v10 | 0xFFFE000000000000;
}

unint64_t JSC::dataViewProtoFuncGetInt8(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  JSC::Exception *v23;
  uint64_t v24;
  unint64_t v25;
  JSC::Heap **v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  JSC::Exception *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  int v54;
  uint64_t (*v55)(JSC::JSObject **);
  JSC::JSObject **v56;
  WTF::StringImpl *v57;
  _BYTE v58[16];
  JSC::VM *v59;
  JSC::JSObject *v60[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v59 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v52 = "Receiver of DataView method must be a DataView";
    v53 = 47;
    return JSC::throwTypeError((unint64_t)this, &v59, (uint64_t)v52, v53);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v60[0] = (JSC::JSObject *)v12;
  v19 = JSC::JSValue::toIndex(v60, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v54 = *(_DWORD *)(v10 + 80);
    if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v58[0] = 0;
  v58[8] = 0;
  v20 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v58);
  if (!v21)
  {
    v52 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v53 = 72;
    return JSC::throwTypeError((unint64_t)this, &v59, (uint64_t)v52, v53);
  }
  if (v20 && v20 - 1 >= v19)
  {
    v22 = *(_QWORD *)(v11 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v22 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    return *(char *)(v22 + v19) & 0xFFFFFFFFLL | 0xFFFE000000000000;
  }
  else
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v24 = 0x1400000002;
    *(_QWORD *)(v24 + 8) = "Out of bounds access";
    *(_DWORD *)(v24 + 16) = 4;
    v57 = (WTF::StringImpl *)v24;
    v25 = *(_QWORD *)(v9 + 128);
    v26 = *(JSC::Heap ***)(v9 + 56);
    if ((v25 & 1) != 0)
    {
      v55 = *(uint64_t (**)(JSC::JSObject **))(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v56 = (JSC::JSObject **)(v9 - 16);
      else
        v56 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v60[0] = *v56;
      v60[1] = (JSC::JSObject *)v9;
      v60[2] = (JSC::JSObject *)(v9 + 128);
      v25 = v55(v60);
    }
    v27 = JSC::ErrorInstance::create(v26, v25, &v57, 0, 0, 0, 2, 1);
    v34 = (JSC::Exception *)v27;
    if ((v27 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)))
    {
      v34 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v27, 0, v28, v29, v30, v31, v32);
    }
    v23 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v34, v33, v28, v29, v30, v31, v32);
    v42 = v57;
    v57 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v42 -= 2;
      }
    }
  }
  return (unint64_t)v23;
}

unint64_t JSC::dataViewProtoFuncGetUint8(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  JSC::Exception *v23;
  uint64_t v24;
  unint64_t v25;
  JSC::Heap **v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  JSC::Exception *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  int v54;
  uint64_t (*v55)(JSC::JSObject **);
  JSC::JSObject **v56;
  WTF::StringImpl *v57;
  _BYTE v58[16];
  JSC::VM *v59;
  JSC::JSObject *v60[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v59 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v52 = "Receiver of DataView method must be a DataView";
    v53 = 47;
    return JSC::throwTypeError((unint64_t)this, &v59, (uint64_t)v52, v53);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v12 = 10;
  else
    v12 = *((_QWORD *)a2 + 6);
  v60[0] = (JSC::JSObject *)v12;
  v19 = JSC::JSValue::toIndex(v60, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v54 = *(_DWORD *)(v10 + 80);
    if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v58[0] = 0;
  v58[8] = 0;
  v20 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v58);
  if (!v21)
  {
    v52 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v53 = 72;
    return JSC::throwTypeError((unint64_t)this, &v59, (uint64_t)v52, v53);
  }
  if (v20 && v20 - 1 >= v19)
  {
    v22 = *(_QWORD *)(v11 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v22 = (v22 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    return *(unsigned __int8 *)(v22 + v19) | 0xFFFE000000000000;
  }
  else
  {
    v24 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v24 = 0x1400000002;
    *(_QWORD *)(v24 + 8) = "Out of bounds access";
    *(_DWORD *)(v24 + 16) = 4;
    v57 = (WTF::StringImpl *)v24;
    v25 = *(_QWORD *)(v9 + 128);
    v26 = *(JSC::Heap ***)(v9 + 56);
    if ((v25 & 1) != 0)
    {
      v55 = *(uint64_t (**)(JSC::JSObject **))(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v56 = (JSC::JSObject **)(v9 - 16);
      else
        v56 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v60[0] = *v56;
      v60[1] = (JSC::JSObject *)v9;
      v60[2] = (JSC::JSObject *)(v9 + 128);
      v25 = v55(v60);
    }
    v27 = JSC::ErrorInstance::create(v26, v25, &v57, 0, 0, 0, 2, 1);
    v34 = (JSC::Exception *)v27;
    if ((v27 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v27 & 0xFFFFFFFE) + 0x4C)))
    {
      v34 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v27, 0, v28, v29, v30, v31, v32);
    }
    v23 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v34, v33, v28, v29, v30, v31, v32);
    v42 = v57;
    v57 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v42 -= 2;
      }
    }
  }
  return (unint64_t)v23;
}

unint64_t JSC::dataViewProtoFuncGetInt16(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  JSC::Exception *v35;
  uint64_t v36;
  unint64_t v37;
  JSC::Heap **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  JSC::Exception *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  _BOOL4 v65;
  const char *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t (*v70)(JSC::JSObject **);
  JSC::JSObject **v71;
  WTF::StringImpl *v72;
  _BYTE v73[16];
  JSC::VM *v74;
  JSC::JSObject *v75[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v74 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v66 = "Receiver of DataView method must be a DataView";
    v67 = 47;
    return JSC::throwTypeError((unint64_t)this, &v74, (uint64_t)v66, v67);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v75[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v75, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v68 = *(_DWORD *)(v10 + 80);
    if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v23 = 0;
    goto LABEL_26;
  }
  v21 = *((_QWORD *)a2 + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v26 = (_DWORD)v21 == 0;
    goto LABEL_22;
  }
  *(_QWORD *)&v22 = v21 - 0x2000000000000;
  if (v21 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v64 = v22 <= 0.0;
    v65 = v22 < 0.0;
    v23 = !v64 || v65;
    goto LABEL_25;
  }
  if ((v21 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned __int8 *)(v21 + 5);
    if (v24 == 2)
    {
      v27 = *(_QWORD *)(v21 + 8);
      v28 = (int *)(v21 + 16);
      if ((v27 & 1) == 0)
        v28 = (int *)(v27 + 4);
      v29 = *v28;
    }
    else
    {
      if (v24 != 3)
      {
        v25 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v25 + 10) & 1) == 0)
        {
          v23 = 1;
          goto LABEL_25;
        }
        v26 = *(_QWORD *)(v25 + 40) == v9;
LABEL_22:
        v23 = !v26;
        goto LABEL_25;
      }
      v29 = *(_DWORD *)(v21 + 8);
    }
    v26 = v29 == 0;
    goto LABEL_22;
  }
  v23 = v21 == 7;
LABEL_25:
  if (*(_DWORD *)(v10 + 80))
  {
    v69 = *(_DWORD *)(v10 + 80);
    if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_26:
  v73[0] = 0;
  v73[8] = 0;
  v30 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v73);
  if (!v31)
  {
    v66 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v67 = 72;
    return JSC::throwTypeError((unint64_t)this, &v74, (uint64_t)v66, v67);
  }
  if (v30 < 2 || v30 - 2 < v20)
  {
    v36 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v36 = 0x1400000002;
    *(_QWORD *)(v36 + 8) = "Out of bounds access";
    *(_DWORD *)(v36 + 16) = 4;
    v72 = (WTF::StringImpl *)v36;
    v37 = *(_QWORD *)(v9 + 128);
    v38 = *(JSC::Heap ***)(v9 + 56);
    if ((v37 & 1) != 0)
    {
      v70 = *(uint64_t (**)(JSC::JSObject **))(v37 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v71 = (JSC::JSObject **)(v9 - 16);
      else
        v71 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v75[0] = *v71;
      v75[1] = (JSC::JSObject *)v9;
      v75[2] = (JSC::JSObject *)(v9 + 128);
      v37 = v70(v75);
    }
    v39 = JSC::ErrorInstance::create(v38, v37, &v72, 0, 0, 0, 2, 1);
    v46 = (JSC::Exception *)v39;
    if ((v39 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x4C)))
    {
      v46 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v39, 0, v40, v41, v42, v43, v44);
    }
    v35 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v46, v45, v40, v41, v42, v43, v44);
    v54 = v72;
    v72 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
  }
  else
  {
    v32 = *(_QWORD *)(v11 + 16);
    if (v32 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v33 = (unsigned __int8 *)(v32 + v20);
    if (v23)
      v34 = v33 + 1;
    else
      v34 = (unsigned __int8 *)(v32 + v20);
    if (!v23)
      ++v33;
    return (__int16)(*v34 << 8) | *v33 | 0xFFFE000000000000;
  }
  return (unint64_t)v35;
}

unint64_t JSC::dataViewProtoFuncGetUint16(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  JSC::Exception *v35;
  uint64_t v36;
  unint64_t v37;
  JSC::Heap **v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  JSC::Exception *v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  _BOOL4 v65;
  const char *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t (*v70)(JSC::JSObject **);
  JSC::JSObject **v71;
  WTF::StringImpl *v72;
  _BYTE v73[16];
  JSC::VM *v74;
  JSC::JSObject *v75[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v74 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v66 = "Receiver of DataView method must be a DataView";
    v67 = 47;
    return JSC::throwTypeError((unint64_t)this, &v74, (uint64_t)v66, v67);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v75[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v75, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v68 = *(_DWORD *)(v10 + 80);
    if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v23 = 0;
    goto LABEL_26;
  }
  v21 = *((_QWORD *)a2 + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v26 = (_DWORD)v21 == 0;
    goto LABEL_22;
  }
  *(_QWORD *)&v22 = v21 - 0x2000000000000;
  if (v21 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v64 = v22 <= 0.0;
    v65 = v22 < 0.0;
    v23 = !v64 || v65;
    goto LABEL_25;
  }
  if ((v21 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned __int8 *)(v21 + 5);
    if (v24 == 2)
    {
      v27 = *(_QWORD *)(v21 + 8);
      v28 = (int *)(v21 + 16);
      if ((v27 & 1) == 0)
        v28 = (int *)(v27 + 4);
      v29 = *v28;
    }
    else
    {
      if (v24 != 3)
      {
        v25 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v25 + 10) & 1) == 0)
        {
          v23 = 1;
          goto LABEL_25;
        }
        v26 = *(_QWORD *)(v25 + 40) == v9;
LABEL_22:
        v23 = !v26;
        goto LABEL_25;
      }
      v29 = *(_DWORD *)(v21 + 8);
    }
    v26 = v29 == 0;
    goto LABEL_22;
  }
  v23 = v21 == 7;
LABEL_25:
  if (*(_DWORD *)(v10 + 80))
  {
    v69 = *(_DWORD *)(v10 + 80);
    if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_26:
  v73[0] = 0;
  v73[8] = 0;
  v30 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v73);
  if (!v31)
  {
    v66 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v67 = 72;
    return JSC::throwTypeError((unint64_t)this, &v74, (uint64_t)v66, v67);
  }
  if (v30 < 2 || v30 - 2 < v20)
  {
    v36 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v36 = 0x1400000002;
    *(_QWORD *)(v36 + 8) = "Out of bounds access";
    *(_DWORD *)(v36 + 16) = 4;
    v72 = (WTF::StringImpl *)v36;
    v37 = *(_QWORD *)(v9 + 128);
    v38 = *(JSC::Heap ***)(v9 + 56);
    if ((v37 & 1) != 0)
    {
      v70 = *(uint64_t (**)(JSC::JSObject **))(v37 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v71 = (JSC::JSObject **)(v9 - 16);
      else
        v71 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v75[0] = *v71;
      v75[1] = (JSC::JSObject *)v9;
      v75[2] = (JSC::JSObject *)(v9 + 128);
      v37 = v70(v75);
    }
    v39 = JSC::ErrorInstance::create(v38, v37, &v72, 0, 0, 0, 2, 1);
    v46 = (JSC::Exception *)v39;
    if ((v39 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v39 & 0xFFFFFFFE) + 0x4C)))
    {
      v46 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v39, 0, v40, v41, v42, v43, v44);
    }
    v35 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v46, v45, v40, v41, v42, v43, v44);
    v54 = v72;
    v72 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl(v54, v47, v48, v49, v50, v51, v52, v53);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
  }
  else
  {
    v32 = *(_QWORD *)(v11 + 16);
    if (v32 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v33 = (unsigned __int8 *)(v32 + v20);
    if (v23)
      v34 = v33 + 1;
    else
      v34 = (unsigned __int8 *)(v32 + v20);
    if (!v23)
      ++v33;
    return *v33 | ((unint64_t)*v34 << 8) | 0xFFFE000000000000;
  }
  return (unint64_t)v35;
}

unint64_t JSC::dataViewProtoFuncGetInt32(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  JSC::Exception *v38;
  uint64_t v39;
  unint64_t v40;
  JSC::Heap **v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  JSC::Exception *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  _BOOL4 v68;
  const char *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t (*v73)(JSC::JSObject **);
  JSC::JSObject **v74;
  WTF::StringImpl *v75;
  _BYTE v76[16];
  JSC::VM *v77;
  JSC::JSObject *v78[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v77 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v69 = "Receiver of DataView method must be a DataView";
    v70 = 47;
    return JSC::throwTypeError((unint64_t)this, &v77, (uint64_t)v69, v70);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v78[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v78, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v71 = *(_DWORD *)(v10 + 80);
    if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v23 = 0;
    goto LABEL_26;
  }
  v21 = *((_QWORD *)a2 + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v26 = (_DWORD)v21 == 0;
    goto LABEL_22;
  }
  *(_QWORD *)&v22 = v21 - 0x2000000000000;
  if (v21 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v67 = v22 <= 0.0;
    v68 = v22 < 0.0;
    v23 = !v67 || v68;
    goto LABEL_25;
  }
  if ((v21 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned __int8 *)(v21 + 5);
    if (v24 == 2)
    {
      v27 = *(_QWORD *)(v21 + 8);
      v28 = (int *)(v21 + 16);
      if ((v27 & 1) == 0)
        v28 = (int *)(v27 + 4);
      v29 = *v28;
    }
    else
    {
      if (v24 != 3)
      {
        v25 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v25 + 10) & 1) == 0)
        {
          v23 = 1;
          goto LABEL_25;
        }
        v26 = *(_QWORD *)(v25 + 40) == v9;
LABEL_22:
        v23 = !v26;
        goto LABEL_25;
      }
      v29 = *(_DWORD *)(v21 + 8);
    }
    v26 = v29 == 0;
    goto LABEL_22;
  }
  v23 = v21 == 7;
LABEL_25:
  if (*(_DWORD *)(v10 + 80))
  {
    v72 = *(_DWORD *)(v10 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_26:
  v76[0] = 0;
  v76[8] = 0;
  v30 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v76);
  if (!v31)
  {
    v69 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v70 = 72;
    return JSC::throwTypeError((unint64_t)this, &v77, (uint64_t)v69, v70);
  }
  if (v30 < 4 || v30 - 4 < v20)
  {
    v39 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v39 = 0x1400000002;
    *(_QWORD *)(v39 + 8) = "Out of bounds access";
    *(_DWORD *)(v39 + 16) = 4;
    v75 = (WTF::StringImpl *)v39;
    v40 = *(_QWORD *)(v9 + 128);
    v41 = *(JSC::Heap ***)(v9 + 56);
    if ((v40 & 1) != 0)
    {
      v73 = *(uint64_t (**)(JSC::JSObject **))(v40 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v74 = (JSC::JSObject **)(v9 - 16);
      else
        v74 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v78[0] = *v74;
      v78[1] = (JSC::JSObject *)v9;
      v78[2] = (JSC::JSObject *)(v9 + 128);
      v40 = v73(v78);
    }
    v42 = JSC::ErrorInstance::create(v41, v40, &v75, 0, 0, 0, 2, 1);
    v49 = (JSC::Exception *)v42;
    if ((v42 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v42 & 0xFFFFFFFE) + 0x4C)))
    {
      v49 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v42, 0, v43, v44, v45, v46, v47);
    }
    v38 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v49, v48, v43, v44, v45, v46, v47);
    v57 = v75;
    v75 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
      {
        WTF::StringImpl::~StringImpl(v57, v50, v51, v52, v53, v54, v55, v56);
        WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
      }
      else
      {
        *(_DWORD *)v57 -= 2;
      }
    }
  }
  else
  {
    v32 = *(_QWORD *)(v11 + 16);
    if (v32 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v33 = (unsigned __int8 *)(v32 + v20);
    v34 = v33 + 3;
    if (v23)
      v35 = v33 + 3;
    else
      v35 = v33;
    v36 = 1;
    if (v23)
      v37 = 2;
    else
      v37 = 1;
    if (v23)
      v34 = v33;
    else
      v36 = 2;
    return *v34 | ((unint64_t)v33[v36] << 8) | ((unint64_t)v33[v37] << 16) | ((unint64_t)*v35 << 24) | 0xFFFE000000000000;
  }
  return (unint64_t)v38;
}

unint64_t JSC::dataViewProtoFuncGetUint32(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::Exception *v39;
  uint64_t v40;
  unint64_t v41;
  JSC::Heap **v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  JSC::Exception *v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  _BOOL4 v69;
  const char *v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t (*v74)(JSC::JSObject **);
  JSC::JSObject **v75;
  WTF::StringImpl *v76;
  _BYTE v77[16];
  JSC::VM *v78;
  JSC::JSObject *v79[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v78 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v70 = "Receiver of DataView method must be a DataView";
    v71 = 47;
    return JSC::throwTypeError((unint64_t)this, &v78, (uint64_t)v70, v71);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v79[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v79, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v72 = *(_DWORD *)(v10 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v23 = 0;
    goto LABEL_26;
  }
  v21 = *((_QWORD *)a2 + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v26 = (_DWORD)v21 == 0;
    goto LABEL_22;
  }
  *(_QWORD *)&v22 = v21 - 0x2000000000000;
  if (v21 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v68 = v22 <= 0.0;
    v69 = v22 < 0.0;
    v23 = !v68 || v69;
    goto LABEL_25;
  }
  if ((v21 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned __int8 *)(v21 + 5);
    if (v24 == 2)
    {
      v27 = *(_QWORD *)(v21 + 8);
      v28 = (int *)(v21 + 16);
      if ((v27 & 1) == 0)
        v28 = (int *)(v27 + 4);
      v29 = *v28;
    }
    else
    {
      if (v24 != 3)
      {
        v25 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v25 + 10) & 1) == 0)
        {
          v23 = 1;
          goto LABEL_25;
        }
        v26 = *(_QWORD *)(v25 + 40) == v9;
LABEL_22:
        v23 = !v26;
        goto LABEL_25;
      }
      v29 = *(_DWORD *)(v21 + 8);
    }
    v26 = v29 == 0;
    goto LABEL_22;
  }
  v23 = v21 == 7;
LABEL_25:
  if (*(_DWORD *)(v10 + 80))
  {
    v73 = *(_DWORD *)(v10 + 80);
    if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_26:
  v77[0] = 0;
  v77[8] = 0;
  v30 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v77);
  if (!v31)
  {
    v70 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v71 = 72;
    return JSC::throwTypeError((unint64_t)this, &v78, (uint64_t)v70, v71);
  }
  if (v30 < 4 || v30 - 4 < v20)
  {
    v40 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v40 = 0x1400000002;
    *(_QWORD *)(v40 + 8) = "Out of bounds access";
    *(_DWORD *)(v40 + 16) = 4;
    v76 = (WTF::StringImpl *)v40;
    v41 = *(_QWORD *)(v9 + 128);
    v42 = *(JSC::Heap ***)(v9 + 56);
    if ((v41 & 1) != 0)
    {
      v74 = *(uint64_t (**)(JSC::JSObject **))(v41 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v75 = (JSC::JSObject **)(v9 - 16);
      else
        v75 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v79[0] = *v75;
      v79[1] = (JSC::JSObject *)v9;
      v79[2] = (JSC::JSObject *)(v9 + 128);
      v41 = v74(v79);
    }
    v43 = JSC::ErrorInstance::create(v42, v41, &v76, 0, 0, 0, 2, 1);
    v50 = (JSC::Exception *)v43;
    if ((v43 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C)))
    {
      v50 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v43, 0, v44, v45, v46, v47, v48);
    }
    v39 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v50, v49, v44, v45, v46, v47, v48);
    v58 = v76;
    v76 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
      {
        WTF::StringImpl::~StringImpl(v58, v51, v52, v53, v54, v55, v56, v57);
        WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
      }
      else
      {
        *(_DWORD *)v58 -= 2;
      }
    }
  }
  else
  {
    v32 = *(_QWORD *)(v11 + 16);
    if (v32 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v33 = (unsigned __int8 *)(v32 + v20);
    v34 = v33 + 3;
    if (v23)
      v35 = v33 + 3;
    else
      v35 = v33;
    v36 = 1;
    if (v23)
      v37 = 2;
    else
      v37 = 1;
    if (v23)
      v34 = v33;
    else
      v36 = 2;
    v38 = *v34 | (v33[v36] << 8) | (v33[v37] << 16) | (*v35 << 24);
    if ((v38 & 0x80000000) != 0)
      return COERCE__INT64((double)v38) + 0x2000000000000;
    else
      return v38 | 0xFFFE000000000000;
  }
  return (unint64_t)v39;
}

JSC::Exception *JSC::dataViewProtoFuncGetFloat32(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unsigned __int8 *v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  JSC::Heap **v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  JSC::Exception *v45;
  WTF::AtomStringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  JSC::Exception *v53;
  WTF::StringImpl *v54;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  BOOL v65;
  const char *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t (*v70)(JSC::JSObject **);
  JSC::JSObject **v71;
  WTF::StringImpl *v72;
  _BYTE v73[16];
  JSC::VM *v74;
  JSC::JSObject *v75[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v74 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v66 = "Receiver of DataView method must be a DataView";
    v67 = 47;
    return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v74, (uint64_t)v66, v67);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v75[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v75, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v68 = *(_DWORD *)(v10 + 80);
    if ((v68 & 0x27) != 0 && (v68 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v23 = 0;
    goto LABEL_26;
  }
  v21 = *((_QWORD *)a2 + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v26 = (_DWORD)v21 == 0;
    goto LABEL_22;
  }
  *(_QWORD *)&v22 = v21 - 0x2000000000000;
  if (v21 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v64 = v22 <= 0.0;
    v65 = v22 < 0.0;
    v23 = !v64 || v65;
    goto LABEL_25;
  }
  if ((v21 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned __int8 *)(v21 + 5);
    if (v24 == 2)
    {
      v27 = *(_QWORD *)(v21 + 8);
      v28 = (int *)(v21 + 16);
      if ((v27 & 1) == 0)
        v28 = (int *)(v27 + 4);
      v29 = *v28;
    }
    else
    {
      if (v24 != 3)
      {
        v25 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v25 + 10) & 1) == 0)
        {
          v23 = 1;
          goto LABEL_25;
        }
        v26 = *(_QWORD *)(v25 + 40) == v9;
LABEL_22:
        v23 = !v26;
        goto LABEL_25;
      }
      v29 = *(_DWORD *)(v21 + 8);
    }
    v26 = v29 == 0;
    goto LABEL_22;
  }
  v23 = v21 == 7;
LABEL_25:
  if (*(_DWORD *)(v10 + 80))
  {
    v69 = *(_DWORD *)(v10 + 80);
    if ((v69 & 0x27) != 0 && (v69 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_26:
  v73[0] = 0;
  v73[8] = 0;
  v30 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v73);
  if (!v31)
  {
    v66 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v67 = 72;
    return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v74, (uint64_t)v66, v67);
  }
  if (v30 < 4 || v30 - 4 < v20)
  {
    v35 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v35 = 0x1400000002;
    *(_QWORD *)(v35 + 8) = "Out of bounds access";
    *(_DWORD *)(v35 + 16) = 4;
    v72 = (WTF::StringImpl *)v35;
    v36 = *(_QWORD *)(v9 + 128);
    v37 = *(JSC::Heap ***)(v9 + 56);
    if ((v36 & 1) != 0)
    {
      v70 = *(uint64_t (**)(JSC::JSObject **))(v36 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v71 = (JSC::JSObject **)(v9 - 16);
      else
        v71 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v75[0] = *v71;
      v75[1] = (JSC::JSObject *)v9;
      v75[2] = (JSC::JSObject *)(v9 + 128);
      v36 = v70(v75);
    }
    v38 = JSC::ErrorInstance::create(v37, v36, &v72, 0, 0, 0, 2, 1);
    v45 = (JSC::Exception *)v38;
    if ((v38 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C)))
    {
      v45 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v38, 0, v39, v40, v41, v42, v43);
    }
    v53 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v45, v44, v39, v40, v41, v42, v43);
    v54 = v72;
    v72 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl(v54, v46, v47, v48, v49, v50, v51, v52);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
  }
  else
  {
    v32 = *(_QWORD *)(v11 + 16);
    if (v32 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v33 = (unsigned __int8 *)(v32 + v20);
    if (v23)
      LODWORD(v34) = (v33[2] << 16) | (v33[1] << 8) | (v33[3] << 24) | *v33;
    else
      v34 = COERCE_FLOAT(_byteswap_ulong(*(_DWORD *)v33));
    return (JSC::Exception *)(COERCE__INT64(v34) + 0x2000000000000);
  }
  return v53;
}

unint64_t JSC::dataViewProtoFuncGetFloat64(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  double v23;
  BOOL v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  uint64_t v30;
  int v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  int *v36;
  int v37;
  BOOL v38;
  BOOL v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const WTF::String *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  JSC::JSObject *v67;
  char v68;
  JSC::VM *v69;

  v9 = (JSC *)this;
  v10 = this[7];
  v69 = v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v40 = "Receiver of DataView method must be a DataView";
    v41 = 47;
    return JSC::throwTypeError((unint64_t)this, &v69, (uint64_t)v40, v41);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v67 = (JSC::JSObject *)v13;
  v21 = JSC::JSValue::toIndex(&v67, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v14, v15, v16, v17, v18, v19, v20))
    return 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v22 = *((_QWORD *)a2 + 7);
  if (v22 >= 0xFFFE000000000000)
  {
    v34 = (_DWORD)v22 == 0;
    goto LABEL_28;
  }
  *(_QWORD *)&v23 = v22 - 0x2000000000000;
  if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v22 & 0xFFFE000000000002) != 0)
    {
      v24 = v22 == 7;
      goto LABEL_11;
    }
    v32 = *(unsigned __int8 *)(v22 + 5);
    if (v32 == 2)
    {
      v35 = *(_QWORD *)(v22 + 8);
      v36 = (int *)(v22 + 16);
      if ((v35 & 1) == 0)
        v36 = (int *)(v35 + 4);
      v37 = *v36;
    }
    else
    {
      if (v32 != 3)
      {
        v33 = 16 * (*(_DWORD *)v22 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v33 + 10) & 1) == 0)
        {
          v24 = 1;
          goto LABEL_11;
        }
        v34 = *(_QWORD *)(v33 + 40) == (_QWORD)v9;
        goto LABEL_28;
      }
      v37 = *(_DWORD *)(v22 + 8);
    }
    v34 = v37 == 0;
LABEL_28:
    v24 = !v34;
    goto LABEL_11;
  }
  v38 = v23 <= 0.0;
  v39 = v23 < 0.0;
  v24 = !v38 || v39;
LABEL_11:
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v14, v15, v16, v17, v18, v19, v20))
    return 0;
LABEL_12:
  LOBYTE(v67) = 0;
  v68 = 0;
  v25 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)&v67);
  if (!v26)
  {
    v40 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC::VM **)v9;
    v41 = 72;
    return JSC::throwTypeError((unint64_t)this, &v69, (uint64_t)v40, v41);
  }
  if (v25 < 8 || v25 - 8 < v21)
  {
    v42 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v42 = 0x1400000002;
    *(_QWORD *)(v42 + 8) = "Out of bounds access";
    *(_DWORD *)(v42 + 16) = 4;
    v66 = (WTF::StringImpl *)v42;
    v44 = JSC::createRangeError((unint64_t)v9, &v66, v43);
    v30 = JSC::VM::throwException(v10, v9, v44, v45, v46, v47, v48, v49);
    v57 = v66;
    v66 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
      {
        WTF::StringImpl::~StringImpl(v57, v50, v51, v52, v53, v54, v55, v56);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v57 -= 2;
      }
    }
  }
  else
  {
    v27 = *(_QWORD *)(v11 + 16);
    if (v27 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v27 = (v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v28 = (unsigned __int8 *)(v27 + v21);
    if (v24)
      v29 = ((unint64_t)v28[5] << 40) | ((unint64_t)*(unsigned int *)(v28 + 1) << 8) | ((unint64_t)v28[6] << 48) | ((unint64_t)v28[7] << 56) | *v28;
    else
      v29 = _byteswap_uint64(*(_QWORD *)v28);
    return v29 + 0x2000000000000;
  }
  return v30;
}

JSC::Exception *JSC::dataViewProtoFuncGetBigInt64(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  JSC::Exception *v55;
  uint64_t v56;
  unint64_t v57;
  JSC::Heap **v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  JSC::Exception *v66;
  WTF::AtomStringImpl *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  _BOOL4 v85;
  const char *v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t (*v90)(JSC::JSObject **);
  JSC::JSObject **v91;
  WTF::StringImpl *v92;
  _BYTE v93[16];
  JSC::VM *v94;
  JSC::JSObject *v95[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v94 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v86 = "Receiver of DataView method must be a DataView";
    v87 = 47;
    return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v94, (uint64_t)v86, v87);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v95[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v95, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v88 = *(_DWORD *)(v10 + 80);
    if ((v88 & 0x27) != 0 && (v88 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v23 = 0;
    goto LABEL_26;
  }
  v21 = *((_QWORD *)a2 + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v26 = (_DWORD)v21 == 0;
    goto LABEL_22;
  }
  *(_QWORD *)&v22 = v21 - 0x2000000000000;
  if (v21 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v84 = v22 <= 0.0;
    v85 = v22 < 0.0;
    v23 = !v84 || v85;
    goto LABEL_25;
  }
  if ((v21 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned __int8 *)(v21 + 5);
    if (v24 == 2)
    {
      v27 = *(_QWORD *)(v21 + 8);
      v28 = (int *)(v21 + 16);
      if ((v27 & 1) == 0)
        v28 = (int *)(v27 + 4);
      v29 = *v28;
    }
    else
    {
      if (v24 != 3)
      {
        v25 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v25 + 10) & 1) == 0)
        {
          v23 = 1;
          goto LABEL_25;
        }
        v26 = *(_QWORD *)(v25 + 40) == v9;
LABEL_22:
        v23 = !v26;
        goto LABEL_25;
      }
      v29 = *(_DWORD *)(v21 + 8);
    }
    v26 = v29 == 0;
    goto LABEL_22;
  }
  v23 = v21 == 7;
LABEL_25:
  if (*(_DWORD *)(v10 + 80))
  {
    v89 = *(_DWORD *)(v10 + 80);
    if ((v89 & 0x27) != 0 && (v89 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_26:
  v93[0] = 0;
  v93[8] = 0;
  v30 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v93);
  if (!v37)
  {
    v86 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v87 = 72;
    return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v94, (uint64_t)v86, v87);
  }
  if (v30 >= 8 && v30 - 8 >= v20)
  {
    v38 = *(_QWORD *)(v11 + 16);
    if (v38 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v38 = (v38 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v39 = (unsigned __int8 *)(v38 + v20);
    v40 = v39 + 7;
    if (v23)
      v41 = v39 + 7;
    else
      v41 = v39;
    v42 = 2;
    if (v23)
      v43 = 5;
    else
      v43 = 2;
    v44 = 3;
    if (v23)
      v45 = 4;
    else
      v45 = 3;
    if (v23)
    {
      v40 = v39;
    }
    else
    {
      v44 = 4;
      v42 = 5;
    }
    v46 = *v40;
    if (v23)
      v47 = v39 + 1;
    else
      v47 = v39 + 6;
    v48 = *v47;
    v49 = v39[v42];
    v50 = v39[v44];
    v51 = v39[v45];
    v52 = v39[v43];
    if (v23)
      v53 = v39 + 6;
    else
      v53 = v39 + 1;
    return (JSC::Exception *)JSC::JSBigInt::createFrom((JSC::JSBigInt *)v9, v46 | (v48 << 8) | (v49 << 16) | (v50 << 24) | (v51 << 32) | (v52 << 40) | ((unint64_t)*v53 << 48) | ((unint64_t)*v41 << 56), v31, v32, v33, v34, v35, v36);
  }
  v56 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v56 = 0x1400000002;
  *(_QWORD *)(v56 + 8) = "Out of bounds access";
  *(_DWORD *)(v56 + 16) = 4;
  v92 = (WTF::StringImpl *)v56;
  v57 = *(_QWORD *)(v9 + 128);
  v58 = *(JSC::Heap ***)(v9 + 56);
  if ((v57 & 1) != 0)
  {
    v90 = *(uint64_t (**)(JSC::JSObject **))(v57 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v9 & 8) != 0)
      v91 = (JSC::JSObject **)(v9 - 16);
    else
      v91 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
    v95[0] = *v91;
    v95[1] = (JSC::JSObject *)v9;
    v95[2] = (JSC::JSObject *)(v9 + 128);
    v57 = v90(v95);
  }
  v59 = JSC::ErrorInstance::create(v58, v57, &v92, 0, 0, 0, 2, 1);
  v66 = (JSC::Exception *)v59;
  if ((v59 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v59 & 0xFFFFFFFE) + 0x4C)))
  {
    v66 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v59, 0, v60, v61, v62, v63, v64);
  }
  v55 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v66, v65, v60, v61, v62, v63, v64);
  v74 = v92;
  v92 = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
    {
      WTF::StringImpl::~StringImpl(v74, v67, v68, v69, v70, v71, v72, v73);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v74 -= 2;
    }
  }
  return v55;
}

unint64_t JSC::dataViewProtoFuncGetBigUint64(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  JSC::JSGlobalObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  JSC::Heap **v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  JSC::Exception *v73;
  WTF::AtomStringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v92;
  _BOOL4 v93;
  const char *v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t (*v98)(JSC::JSObject **);
  JSC::JSObject **v99;
  int v100;
  WTF::StringImpl *v101;
  _BYTE v102[16];
  JSC::VM *v103;
  JSC::JSObject *v104[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v103 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v94 = "Receiver of DataView method must be a DataView";
    v95 = 47;
    return JSC::throwTypeError((unint64_t)this, &v103, (uint64_t)v94, v95);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v104[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v104, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v96 = *(_DWORD *)(v10 + 80);
    if ((v96 & 0x27) != 0 && (v96 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v23 = 0;
    goto LABEL_26;
  }
  v21 = *((_QWORD *)a2 + 7);
  if (v21 >= 0xFFFE000000000000)
  {
    v26 = (_DWORD)v21 == 0;
    goto LABEL_22;
  }
  *(_QWORD *)&v22 = v21 - 0x2000000000000;
  if (v21 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v92 = v22 <= 0.0;
    v93 = v22 < 0.0;
    v23 = !v92 || v93;
    goto LABEL_25;
  }
  if ((v21 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned __int8 *)(v21 + 5);
    if (v24 == 2)
    {
      v27 = *(_QWORD *)(v21 + 8);
      v28 = (int *)(v21 + 16);
      if ((v27 & 1) == 0)
        v28 = (int *)(v27 + 4);
      v29 = *v28;
    }
    else
    {
      if (v24 != 3)
      {
        v25 = 16 * (*(_DWORD *)v21 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v25 + 10) & 1) == 0)
        {
          v23 = 1;
          goto LABEL_25;
        }
        v26 = *(_QWORD *)(v25 + 40) == v9;
LABEL_22:
        v23 = !v26;
        goto LABEL_25;
      }
      v29 = *(_DWORD *)(v21 + 8);
    }
    v26 = v29 == 0;
    goto LABEL_22;
  }
  v23 = v21 == 7;
LABEL_25:
  if (*(_DWORD *)(v10 + 80))
  {
    v97 = *(_DWORD *)(v10 + 80);
    if ((v97 & 0x27) != 0 && (v97 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_26:
  v102[0] = 0;
  v102[8] = 0;
  v30 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v102);
  if (!v36)
  {
    v94 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v95 = 72;
    return JSC::throwTypeError((unint64_t)this, &v103, (uint64_t)v94, v95);
  }
  if (v30 < 8 || v30 - 8 < v20)
  {
    v63 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v63 = 0x1400000002;
    *(_QWORD *)(v63 + 8) = "Out of bounds access";
    *(_DWORD *)(v63 + 16) = 4;
    v101 = (WTF::StringImpl *)v63;
    v64 = *(_QWORD *)(v9 + 128);
    v65 = *(JSC::Heap ***)(v9 + 56);
    if ((v64 & 1) != 0)
    {
      v98 = *(uint64_t (**)(JSC::JSObject **))(v64 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v99 = (JSC::JSObject **)(v9 - 16);
      else
        v99 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v104[0] = *v99;
      v104[1] = (JSC::JSObject *)v9;
      v104[2] = (JSC::JSObject *)(v9 + 128);
      v64 = v98(v104);
    }
    v66 = JSC::ErrorInstance::create(v65, v64, &v101, 0, 0, 0, 2, 1);
    v73 = (JSC::Exception *)v66;
    if ((v66 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v66 & 0xFFFFFFFE) + 0x4C)))
    {
      v73 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v66, 0, v67, v68, v69, v70, v71);
    }
    v61 = (unint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v73, v72, v67, v68, v69, v70, v71);
    v81 = v101;
    v101 = 0;
    if (v81)
    {
      if (*(_DWORD *)v81 == 2)
      {
        WTF::StringImpl::~StringImpl(v81, v74, v75, v76, v77, v78, v79, v80);
        WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
      }
      else
      {
        *(_DWORD *)v81 -= 2;
      }
    }
    return v61;
  }
  v37 = *(_QWORD *)(v11 + 16);
  if (v37 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v37 = (v37 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  v38 = (unsigned __int8 *)(v37 + v20);
  v39 = v38 + 7;
  if (v23)
    v40 = v38 + 7;
  else
    v40 = v38;
  v41 = 2;
  if (v23)
    v42 = 5;
  else
    v42 = 2;
  v43 = 3;
  if (v23)
    v44 = 4;
  else
    v44 = 3;
  if (v23)
  {
    v39 = v38;
  }
  else
  {
    v43 = 4;
    v41 = 5;
  }
  v45 = *v39;
  if (v23)
    v46 = v38 + 1;
  else
    v46 = v38 + 6;
  v47 = v38[v41];
  v48 = v38[v43];
  v49 = v38[v44];
  v50 = v38[v42];
  v51 = *v46;
  if (v23)
    v52 = v38 + 6;
  else
    v52 = v38 + 1;
  v53 = v45 | (v51 << 8) | (v47 << 16) | (v48 << 24) | (v49 << 32) | (v50 << 40) | ((unint64_t)*v52 << 48) | ((unint64_t)*v40 << 56);
  v54 = *(JSC::JSGlobalObject **)(v9 + 56);
  if (!v53)
    return JSC::JSBigInt::createWithLength((JSC::JSBigInt *)v9, *(JSC::JSGlobalObject **)(v9 + 56), 0, v31, v32, v33, v34, v35);
  v61 = JSC::JSBigInt::createWithLength((JSC::JSBigInt *)v9, *(JSC::JSGlobalObject **)(v9 + 56), (JSC::VM *)1, v31, v32, v33, v34, v35);
  if (*((_DWORD *)v54 + 20))
  {
    v100 = *((_DWORD *)v54 + 20);
    if ((v100 & 0x27) != 0 && (v100 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::JSGlobalObject *)((char *)v54 + 64), 7u, v55, v56, v57, v58, v59, v60);
    if (*((_QWORD *)v54 + 2))
      return 0;
  }
  v62 = *(_QWORD *)(v61 + 24);
  if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v62 = (v62 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  *(_QWORD *)v62 = v53;
  *(_BYTE *)(v61 + 16) = 0;
  return v61;
}

uint64_t JSC::dataViewProtoFuncSetInt8(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  JSC::Exception *v33;
  uint64_t v34;
  unint64_t v35;
  JSC::Heap **v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  JSC::Exception *v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t (*v66)(JSC::JSObject **);
  JSC::JSObject **v67;
  WTF::StringImpl *v68;
  _BYTE v69[16];
  JSC::VM *v70;
  JSC::JSObject *v71[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v70 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v62 = "Receiver of DataView method must be a DataView";
    v63 = 47;
    return JSC::throwTypeError((unint64_t)this, &v70, (uint64_t)v62, v63);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v71[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v71, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v64 = *(_DWORD *)(v10 + 80);
    if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v22 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v29 = JSC::toNativeFromValue<JSC::Int8Adaptor>((JSC::JSGlobalObject *)v9, v22, v14, v15, v16, v17, v18, v19, v21);
  if (*(_DWORD *)(v10 + 80))
  {
    v65 = *(_DWORD *)(v10 + 80);
    if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v69[0] = 0;
  v69[8] = 0;
  v30 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v69);
  if (!v31)
  {
    v62 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v63 = 72;
    return JSC::throwTypeError((unint64_t)this, &v70, (uint64_t)v62, v63);
  }
  if (v30 && v30 - 1 >= v20)
  {
    v32 = *(_QWORD *)(v11 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_BYTE *)(v32 + v20) = v29;
    return 10;
  }
  else
  {
    v34 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v34 = 0x1400000002;
    *(_QWORD *)(v34 + 8) = "Out of bounds access";
    *(_DWORD *)(v34 + 16) = 4;
    v68 = (WTF::StringImpl *)v34;
    v35 = *(_QWORD *)(v9 + 128);
    v36 = *(JSC::Heap ***)(v9 + 56);
    if ((v35 & 1) != 0)
    {
      v66 = *(uint64_t (**)(JSC::JSObject **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v67 = (JSC::JSObject **)(v9 - 16);
      else
        v67 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v71[0] = *v67;
      v71[1] = (JSC::JSObject *)v9;
      v71[2] = (JSC::JSObject *)(v9 + 128);
      v35 = v66(v71);
    }
    v37 = JSC::ErrorInstance::create(v36, v35, &v68, 0, 0, 0, 2, 1);
    v44 = (JSC::Exception *)v37;
    if ((v37 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C)))
    {
      v44 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v37, 0, v38, v39, v40, v41, v42);
    }
    v33 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v44, v43, v38, v39, v40, v41, v42);
    v52 = v68;
    v68 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
  }
  return (uint64_t)v33;
}

uint64_t JSC::dataViewProtoFuncSetUint8(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  JSC::Exception *v33;
  uint64_t v34;
  unint64_t v35;
  JSC::Heap **v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  JSC::Exception *v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t (*v66)(JSC::JSObject **);
  JSC::JSObject **v67;
  WTF::StringImpl *v68;
  _BYTE v69[16];
  JSC::VM *v70;
  JSC::JSObject *v71[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v70 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v62 = "Receiver of DataView method must be a DataView";
    v63 = 47;
    return JSC::throwTypeError((unint64_t)this, &v70, (uint64_t)v62, v63);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v71[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v71, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v64 = *(_DWORD *)(v10 + 80);
    if ((v64 & 0x27) != 0 && (v64 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v22 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v29 = JSC::toNativeFromValue<JSC::Uint8Adaptor>((JSC::JSGlobalObject *)v9, v22, v14, v15, v16, v17, v18, v19, v21);
  if (*(_DWORD *)(v10 + 80))
  {
    v65 = *(_DWORD *)(v10 + 80);
    if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v69[0] = 0;
  v69[8] = 0;
  v30 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v69);
  if (!v31)
  {
    v62 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v63 = 72;
    return JSC::throwTypeError((unint64_t)this, &v70, (uint64_t)v62, v63);
  }
  if (v30 && v30 - 1 >= v20)
  {
    v32 = *(_QWORD *)(v11 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v32 = (v32 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_BYTE *)(v32 + v20) = v29;
    return 10;
  }
  else
  {
    v34 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v34 = 0x1400000002;
    *(_QWORD *)(v34 + 8) = "Out of bounds access";
    *(_DWORD *)(v34 + 16) = 4;
    v68 = (WTF::StringImpl *)v34;
    v35 = *(_QWORD *)(v9 + 128);
    v36 = *(JSC::Heap ***)(v9 + 56);
    if ((v35 & 1) != 0)
    {
      v66 = *(uint64_t (**)(JSC::JSObject **))(v35 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v67 = (JSC::JSObject **)(v9 - 16);
      else
        v67 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v71[0] = *v67;
      v71[1] = (JSC::JSObject *)v9;
      v71[2] = (JSC::JSObject *)(v9 + 128);
      v35 = v66(v71);
    }
    v37 = JSC::ErrorInstance::create(v36, v35, &v68, 0, 0, 0, 2, 1);
    v44 = (JSC::Exception *)v37;
    if ((v37 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v37 & 0xFFFFFFFE) + 0x4C)))
    {
      v44 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v37, 0, v38, v39, v40, v41, v42);
    }
    v33 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v44, v43, v38, v39, v40, v41, v42);
    v52 = v68;
    v68 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
  }
  return (uint64_t)v33;
}

uint64_t JSC::dataViewProtoFuncSetInt16(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  double v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int *v37;
  int v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  unint64_t v44;
  JSC::Heap **v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  JSC::Exception *v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::Exception *v61;
  WTF::StringImpl *v62;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  BOOL v73;
  const char *v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  uint64_t (*v79)(JSC::JSObject **);
  JSC::JSObject **v80;
  WTF::StringImpl *v81;
  _BYTE v82[16];
  JSC::VM *v83;
  JSC::JSObject *v84[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v83 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v74 = "Receiver of DataView method must be a DataView";
    v75 = 47;
    return JSC::throwTypeError((unint64_t)this, &v83, (uint64_t)v74, v75);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v84[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v84, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v76 = *(_DWORD *)(v10 + 80);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v22 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v29 = JSC::toNativeFromValue<JSC::Int16Adaptor>((JSC::JSGlobalObject *)v9, v22, v14, v15, v16, v17, v18, v19, v21);
  if (*(_DWORD *)(v10 + 80))
  {
    v77 = *(_DWORD *)(v10 + 80);
    if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
  {
    v32 = 0;
    goto LABEL_30;
  }
  v30 = *((_QWORD *)a2 + 8);
  if (v30 >= 0xFFFE000000000000)
  {
    v35 = (_DWORD)v30 == 0;
    goto LABEL_26;
  }
  *(_QWORD *)&v31 = v30 - 0x2000000000000;
  if (v30 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v72 = v31 <= 0.0;
    v73 = v31 < 0.0;
    v32 = !v72 || v73;
    goto LABEL_29;
  }
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v33 = *(unsigned __int8 *)(v30 + 5);
    if (v33 == 2)
    {
      v36 = *(_QWORD *)(v30 + 8);
      v37 = (int *)(v30 + 16);
      if ((v36 & 1) == 0)
        v37 = (int *)(v36 + 4);
      v38 = *v37;
    }
    else
    {
      if (v33 != 3)
      {
        v34 = 16 * (*(_DWORD *)v30 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v34 + 10) & 1) == 0)
        {
          v32 = 1;
          goto LABEL_29;
        }
        v35 = *(_QWORD *)(v34 + 40) == v9;
LABEL_26:
        v32 = !v35;
        goto LABEL_29;
      }
      v38 = *(_DWORD *)(v30 + 8);
    }
    v35 = v38 == 0;
    goto LABEL_26;
  }
  v32 = v30 == 7;
LABEL_29:
  if (*(_DWORD *)(v10 + 80))
  {
    v78 = *(_DWORD *)(v10 + 80);
    if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_30:
  v82[0] = 0;
  v82[8] = 0;
  v39 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v82);
  if (!v40)
  {
    v74 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v75 = 72;
    return JSC::throwTypeError((unint64_t)this, &v83, (uint64_t)v74, v75);
  }
  if (v39 < 2 || v39 - 2 < v20)
  {
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x1400000002;
    *(_QWORD *)(v43 + 8) = "Out of bounds access";
    *(_DWORD *)(v43 + 16) = 4;
    v81 = (WTF::StringImpl *)v43;
    v44 = *(_QWORD *)(v9 + 128);
    v45 = *(JSC::Heap ***)(v9 + 56);
    if ((v44 & 1) != 0)
    {
      v79 = *(uint64_t (**)(JSC::JSObject **))(v44 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v80 = (JSC::JSObject **)(v9 - 16);
      else
        v80 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v84[0] = *v80;
      v84[1] = (JSC::JSObject *)v9;
      v84[2] = (JSC::JSObject *)(v9 + 128);
      v44 = v79(v84);
    }
    v46 = JSC::ErrorInstance::create(v45, v44, &v81, 0, 0, 0, 2, 1);
    v53 = (JSC::Exception *)v46;
    if ((v46 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C)))
    {
      v53 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v46, 0, v47, v48, v49, v50, v51);
    }
    v61 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v53, v52, v47, v48, v49, v50, v51);
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v54, v55, v56, v57, v58, v59, v60);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  else
  {
    v41 = *(_QWORD *)(v11 + 16);
    if (v41 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v42 = (_WORD *)(v41 + v20);
    if (v32)
      *v42 = v29;
    else
      *v42 = bswap32(v29) >> 16;
    return 10;
  }
  return (uint64_t)v61;
}

uint64_t JSC::dataViewProtoFuncSetUint16(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  double v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int *v37;
  int v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  unint64_t v44;
  JSC::Heap **v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  JSC::Exception *v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::Exception *v61;
  WTF::StringImpl *v62;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  BOOL v73;
  const char *v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  uint64_t (*v79)(JSC::JSObject **);
  JSC::JSObject **v80;
  WTF::StringImpl *v81;
  _BYTE v82[16];
  JSC::VM *v83;
  JSC::JSObject *v84[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v83 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v74 = "Receiver of DataView method must be a DataView";
    v75 = 47;
    return JSC::throwTypeError((unint64_t)this, &v83, (uint64_t)v74, v75);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v84[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v84, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v76 = *(_DWORD *)(v10 + 80);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v22 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v29 = JSC::toNativeFromValue<JSC::Uint16Adaptor>((JSC::JSGlobalObject *)v9, v22, v14, v15, v16, v17, v18, v19, v21);
  if (*(_DWORD *)(v10 + 80))
  {
    v77 = *(_DWORD *)(v10 + 80);
    if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
  {
    v32 = 0;
    goto LABEL_30;
  }
  v30 = *((_QWORD *)a2 + 8);
  if (v30 >= 0xFFFE000000000000)
  {
    v35 = (_DWORD)v30 == 0;
    goto LABEL_26;
  }
  *(_QWORD *)&v31 = v30 - 0x2000000000000;
  if (v30 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v72 = v31 <= 0.0;
    v73 = v31 < 0.0;
    v32 = !v72 || v73;
    goto LABEL_29;
  }
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v33 = *(unsigned __int8 *)(v30 + 5);
    if (v33 == 2)
    {
      v36 = *(_QWORD *)(v30 + 8);
      v37 = (int *)(v30 + 16);
      if ((v36 & 1) == 0)
        v37 = (int *)(v36 + 4);
      v38 = *v37;
    }
    else
    {
      if (v33 != 3)
      {
        v34 = 16 * (*(_DWORD *)v30 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v34 + 10) & 1) == 0)
        {
          v32 = 1;
          goto LABEL_29;
        }
        v35 = *(_QWORD *)(v34 + 40) == v9;
LABEL_26:
        v32 = !v35;
        goto LABEL_29;
      }
      v38 = *(_DWORD *)(v30 + 8);
    }
    v35 = v38 == 0;
    goto LABEL_26;
  }
  v32 = v30 == 7;
LABEL_29:
  if (*(_DWORD *)(v10 + 80))
  {
    v78 = *(_DWORD *)(v10 + 80);
    if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_30:
  v82[0] = 0;
  v82[8] = 0;
  v39 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v82);
  if (!v40)
  {
    v74 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v75 = 72;
    return JSC::throwTypeError((unint64_t)this, &v83, (uint64_t)v74, v75);
  }
  if (v39 < 2 || v39 - 2 < v20)
  {
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x1400000002;
    *(_QWORD *)(v43 + 8) = "Out of bounds access";
    *(_DWORD *)(v43 + 16) = 4;
    v81 = (WTF::StringImpl *)v43;
    v44 = *(_QWORD *)(v9 + 128);
    v45 = *(JSC::Heap ***)(v9 + 56);
    if ((v44 & 1) != 0)
    {
      v79 = *(uint64_t (**)(JSC::JSObject **))(v44 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v80 = (JSC::JSObject **)(v9 - 16);
      else
        v80 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v84[0] = *v80;
      v84[1] = (JSC::JSObject *)v9;
      v84[2] = (JSC::JSObject *)(v9 + 128);
      v44 = v79(v84);
    }
    v46 = JSC::ErrorInstance::create(v45, v44, &v81, 0, 0, 0, 2, 1);
    v53 = (JSC::Exception *)v46;
    if ((v46 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C)))
    {
      v53 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v46, 0, v47, v48, v49, v50, v51);
    }
    v61 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v53, v52, v47, v48, v49, v50, v51);
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v54, v55, v56, v57, v58, v59, v60);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  else
  {
    v41 = *(_QWORD *)(v11 + 16);
    if (v41 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v42 = (_WORD *)(v41 + v20);
    if (v32)
      *v42 = v29;
    else
      *v42 = __rev16(v29);
    return 10;
  }
  return (uint64_t)v61;
}

uint64_t JSC::dataViewProtoFuncSetInt32(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  double v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int *v37;
  int v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  unint64_t v44;
  JSC::Heap **v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  JSC::Exception *v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  JSC::Exception *v61;
  WTF::StringImpl *v62;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  BOOL v73;
  const char *v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  uint64_t (*v79)(JSC::JSObject **);
  JSC::JSObject **v80;
  WTF::StringImpl *v81;
  _BYTE v82[16];
  JSC::VM *v83;
  JSC::JSObject *v84[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v83 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v74 = "Receiver of DataView method must be a DataView";
    v75 = 47;
    return JSC::throwTypeError((unint64_t)this, &v83, (uint64_t)v74, v75);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v84[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v84, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v76 = *(_DWORD *)(v10 + 80);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v22 = (unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7);
  v29 = JSC::toNativeFromValue<JSC::Int32Adaptor>((JSC::JSGlobalObject *)v9, v22, v14, v15, v16, v17, v18, v19, v21);
  if (*(_DWORD *)(v10 + 80))
  {
    v77 = *(_DWORD *)(v10 + 80);
    if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
  {
    v32 = 0;
    goto LABEL_30;
  }
  v30 = *((_QWORD *)a2 + 8);
  if (v30 >= 0xFFFE000000000000)
  {
    v35 = (_DWORD)v30 == 0;
    goto LABEL_26;
  }
  *(_QWORD *)&v31 = v30 - 0x2000000000000;
  if (v30 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v72 = v31 <= 0.0;
    v73 = v31 < 0.0;
    v32 = !v72 || v73;
    goto LABEL_29;
  }
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v33 = *(unsigned __int8 *)(v30 + 5);
    if (v33 == 2)
    {
      v36 = *(_QWORD *)(v30 + 8);
      v37 = (int *)(v30 + 16);
      if ((v36 & 1) == 0)
        v37 = (int *)(v36 + 4);
      v38 = *v37;
    }
    else
    {
      if (v33 != 3)
      {
        v34 = 16 * (*(_DWORD *)v30 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v34 + 10) & 1) == 0)
        {
          v32 = 1;
          goto LABEL_29;
        }
        v35 = *(_QWORD *)(v34 + 40) == v9;
LABEL_26:
        v32 = !v35;
        goto LABEL_29;
      }
      v38 = *(_DWORD *)(v30 + 8);
    }
    v35 = v38 == 0;
    goto LABEL_26;
  }
  v32 = v30 == 7;
LABEL_29:
  if (*(_DWORD *)(v10 + 80))
  {
    v78 = *(_DWORD *)(v10 + 80);
    if ((v78 & 0x27) != 0 && (v78 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v23, v24, v25, v26, v27, v28);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_30:
  v82[0] = 0;
  v82[8] = 0;
  v39 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v82);
  if (!v40)
  {
    v74 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v75 = 72;
    return JSC::throwTypeError((unint64_t)this, &v83, (uint64_t)v74, v75);
  }
  if (v39 < 4 || v39 - 4 < v20)
  {
    v43 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v43 = 0x1400000002;
    *(_QWORD *)(v43 + 8) = "Out of bounds access";
    *(_DWORD *)(v43 + 16) = 4;
    v81 = (WTF::StringImpl *)v43;
    v44 = *(_QWORD *)(v9 + 128);
    v45 = *(JSC::Heap ***)(v9 + 56);
    if ((v44 & 1) != 0)
    {
      v79 = *(uint64_t (**)(JSC::JSObject **))(v44 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v80 = (JSC::JSObject **)(v9 - 16);
      else
        v80 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v84[0] = *v80;
      v84[1] = (JSC::JSObject *)v9;
      v84[2] = (JSC::JSObject *)(v9 + 128);
      v44 = v79(v84);
    }
    v46 = JSC::ErrorInstance::create(v45, v44, &v81, 0, 0, 0, 2, 1);
    v53 = (JSC::Exception *)v46;
    if ((v46 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v46 & 0xFFFFFFFE) + 0x4C)))
    {
      v53 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v46, 0, v47, v48, v49, v50, v51);
    }
    v61 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v53, v52, v47, v48, v49, v50, v51);
    v62 = v81;
    v81 = 0;
    if (v62)
    {
      if (*(_DWORD *)v62 == 2)
      {
        WTF::StringImpl::~StringImpl(v62, v54, v55, v56, v57, v58, v59, v60);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v62 -= 2;
      }
    }
  }
  else
  {
    v41 = *(_QWORD *)(v11 + 16);
    if (v41 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v41 = (v41 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v42 = (unsigned int *)(v41 + v20);
    if (v32)
      *v42 = v29;
    else
      *v42 = bswap32(v29);
    return 10;
  }
  return (uint64_t)v61;
}

uint64_t JSC::dataViewProtoFuncSetFloat32(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  unsigned __int8 *v22;
  float v23;
  uint64_t v24;
  double v25;
  unsigned int v26;
  unint64_t v27;
  double v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  int *v34;
  int v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  float *v39;
  uint64_t v40;
  unint64_t v41;
  JSC::Heap **v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  JSC::Exception *v50;
  WTF::AtomStringImpl *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::Exception *v58;
  WTF::StringImpl *v59;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  BOOL v70;
  const char *v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t (*v76)(JSC::JSObject **);
  JSC::JSObject **v77;
  const char *v78;
  unint64_t v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  _BYTE v82[16];
  JSC::VM *v83;
  JSC::JSObject *v84[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v83 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v71 = "Receiver of DataView method must be a DataView";
    v72 = 47;
    return JSC::throwTypeError((unint64_t)this, &v83, (uint64_t)v71, v72);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v84[0] = (JSC::JSObject *)v13;
  v20 = JSC::JSValue::toIndex(v84, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v73 = *(_DWORD *)(v10 + 80);
    if ((v73 & 0x27) != 0 && (v73 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    *(double *)&v24 = NAN;
    goto LABEL_22;
  }
  v22 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
  if ((unint64_t)v22 < 0xFFFE000000000000)
  {
    if (!((unint64_t)v22 >> 49))
    {
      if (((unint64_t)v22 & 0xFFFE000000000002) != 0)
      {
        v25 = 0.0;
        if (v22 == (unsigned __int8 *)7)
          v25 = 1.0;
        if (v22 == (unsigned __int8 *)10)
          v25 = NAN;
      }
      else
      {
        v26 = v22[5];
        if (v22 && v26 == 2)
        {
          JSC::JSString::toNumber((JSC::JSString *)v22, (JSC::JSGlobalObject *)v9, v14, v15, v16, v17, v18, v19, v21);
        }
        else
        {
          if (v22 && v26 == 4)
          {
            v84[0] = *(JSC::JSObject **)(v9 + 56);
            v78 = "Cannot convert a symbol to a number";
            v79 = v9;
            v80 = 36;
          }
          else
          {
            if (!v22 || v26 != 3)
            {
              if (v26 <= 0x16)
              {
                __break(0xC471u);
                JUMPOUT(0x1989A3608);
              }
              v25 = JSC::JSObject::toNumber((JSC::JSObject *)v22, (JSC::JSGlobalObject *)v9, v14, v15, v16, v17, v18, v19);
              goto LABEL_23;
            }
            v84[0] = *(JSC::JSObject **)(v9 + 56);
            v78 = "Conversion from 'BigInt' to 'number' is not allowed.";
            v79 = v9;
            v80 = 53;
          }
          JSC::throwTypeError(v79, v84, (uint64_t)v78, v80);
          v25 = 0.0;
        }
      }
LABEL_23:
      v23 = v25;
      goto LABEL_24;
    }
    v24 = (uint64_t)(v22 - 0x2000000000000);
LABEL_22:
    v25 = *(double *)&v24;
    goto LABEL_23;
  }
  v23 = (float)(int)v22;
LABEL_24:
  if (*(_DWORD *)(v10 + 80))
  {
    v74 = *(_DWORD *)(v10 + 80);
    if ((v74 & 0x27) != 0 && (v74 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
  {
    v29 = 0;
    goto LABEL_44;
  }
  v27 = *((_QWORD *)a2 + 8);
  if (v27 >= 0xFFFE000000000000)
  {
    v32 = (_DWORD)v27 == 0;
    goto LABEL_40;
  }
  *(_QWORD *)&v28 = v27 - 0x2000000000000;
  if (v27 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v69 = v28 <= 0.0;
    v70 = v28 < 0.0;
    v29 = !v69 || v70;
    goto LABEL_43;
  }
  if ((v27 & 0xFFFE000000000002) == 0)
  {
    v30 = *(unsigned __int8 *)(v27 + 5);
    if (v30 == 2)
    {
      v33 = *(_QWORD *)(v27 + 8);
      v34 = (int *)(v27 + 16);
      if ((v33 & 1) == 0)
        v34 = (int *)(v33 + 4);
      v35 = *v34;
    }
    else
    {
      if (v30 != 3)
      {
        v31 = 16 * (*(_DWORD *)v27 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v31 + 10) & 1) == 0)
        {
          v29 = 1;
          goto LABEL_43;
        }
        v32 = *(_QWORD *)(v31 + 40) == v9;
LABEL_40:
        v29 = !v32;
        goto LABEL_43;
      }
      v35 = *(_DWORD *)(v27 + 8);
    }
    v32 = v35 == 0;
    goto LABEL_40;
  }
  v29 = v27 == 7;
LABEL_43:
  if (*(_DWORD *)(v10 + 80))
  {
    v75 = *(_DWORD *)(v10 + 80);
    if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_44:
  v82[0] = 0;
  v82[8] = 0;
  v36 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v82);
  if (!v37)
  {
    v71 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v72 = 72;
    return JSC::throwTypeError((unint64_t)this, &v83, (uint64_t)v71, v72);
  }
  if (v36 < 4 || v36 - 4 < v20)
  {
    v40 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v40 = 0x1400000002;
    *(_QWORD *)(v40 + 8) = "Out of bounds access";
    *(_DWORD *)(v40 + 16) = 4;
    v81 = (WTF::StringImpl *)v40;
    v41 = *(_QWORD *)(v9 + 128);
    v42 = *(JSC::Heap ***)(v9 + 56);
    if ((v41 & 1) != 0)
    {
      v76 = *(uint64_t (**)(JSC::JSObject **))(v41 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v77 = (JSC::JSObject **)(v9 - 16);
      else
        v77 = (JSC::JSObject **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v84[0] = *v77;
      v84[1] = (JSC::JSObject *)v9;
      v84[2] = (JSC::JSObject *)(v9 + 128);
      v41 = v76(v84);
    }
    v43 = JSC::ErrorInstance::create(v42, v41, &v81, 0, 0, 0, 2, 1);
    v50 = (JSC::Exception *)v43;
    if ((v43 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x4C)))
    {
      v50 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v43, 0, v44, v45, v46, v47, v48);
    }
    v58 = JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v50, v49, v44, v45, v46, v47, v48);
    v59 = v81;
    v81 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::~StringImpl(v59, v51, v52, v53, v54, v55, v56, v57);
        WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
      }
      else
      {
        *(_DWORD *)v59 -= 2;
      }
    }
  }
  else
  {
    v38 = *(_QWORD *)(v11 + 16);
    if (v38 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v38 = (v38 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v39 = (float *)(v38 + v20);
    if (v29)
      *v39 = v23;
    else
      *(_DWORD *)v39 = bswap32(LODWORD(v23));
    return 10;
  }
  return (uint64_t)v58;
}

uint64_t JSC::dataViewProtoFuncSetFloat64(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int8x16_t v22;
  unsigned __int8 *v23;
  double v24;
  double v25;
  unint64_t v26;
  double v27;
  BOOL v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  double *v32;
  uint64_t v33;
  unsigned int v35;
  double v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  int *v42;
  int v43;
  BOOL v44;
  BOOL v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const WTF::String *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  WTF::AtomStringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  unint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  JSC::JSObject *v76;
  char v77;
  JSC::VM *v78;

  v9 = (JSC *)this;
  v10 = this[7];
  v78 = v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v46 = "Receiver of DataView method must be a DataView";
    v47 = 47;
    return JSC::throwTypeError((unint64_t)this, &v78, (uint64_t)v46, v47);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v76 = (JSC::JSObject *)v13;
  v21 = JSC::JSValue::toIndex(&v76, (JSC::JSGlobalObject *)this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v14, v15, v16, v17, v18, v19, v20))
    return 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
  {
    v39 = 0x7FF8000000000000;
    goto LABEL_42;
  }
  v23 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
  if ((unint64_t)v23 >= 0xFFFE000000000000)
  {
    v25 = (double)(int)v23;
    goto LABEL_15;
  }
  if ((unint64_t)v23 >> 49)
  {
    v39 = (uint64_t)(v23 - 0x2000000000000);
LABEL_42:
    v25 = *(double *)&v39;
    goto LABEL_15;
  }
  if (((unint64_t)v23 & 0xFFFE000000000002) == 0)
  {
    v35 = v23[5];
    if (v23 && v35 == 2)
    {
      JSC::JSString::toNumber((JSC::JSString *)v23, v9, v15, v16, v17, v18, v19, v20, v22);
LABEL_36:
      v25 = v36;
      goto LABEL_15;
    }
    if (v23 && v35 == 4)
    {
      v76 = (JSC::JSObject *)*((_QWORD *)v9 + 7);
      v72 = "Cannot convert a symbol to a number";
      v73 = (unint64_t)v9;
      v74 = 36;
    }
    else
    {
      if (!v23 || v35 != 3)
      {
        if (v35 <= 0x16)
        {
          __break(0xC471u);
          JUMPOUT(0x1989A3A6CLL);
        }
        v36 = JSC::JSObject::toNumber((JSC::JSObject *)v23, v9, v15, v16, v17, v18, v19, v20);
        goto LABEL_36;
      }
      v76 = (JSC::JSObject *)*((_QWORD *)v9 + 7);
      v72 = "Conversion from 'BigInt' to 'number' is not allowed.";
      v73 = (unint64_t)v9;
      v74 = 53;
    }
    JSC::throwTypeError(v73, &v76, (uint64_t)v72, v74);
    v25 = 0.0;
    goto LABEL_15;
  }
  v24 = 0.0;
  if (v23 == (unsigned __int8 *)7)
    v24 = 1.0;
  if (v23 == (unsigned __int8 *)10)
    v25 = NAN;
  else
    v25 = v24;
LABEL_15:
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v14, v15, v16, v17, v18, v19, v20))
    return 0;
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
  {
    v28 = 0;
    goto LABEL_22;
  }
  v26 = *((_QWORD *)a2 + 8);
  if (v26 >= 0xFFFE000000000000)
  {
    v40 = (_DWORD)v26 == 0;
    goto LABEL_44;
  }
  *(_QWORD *)&v27 = v26 - 0x2000000000000;
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v26 & 0xFFFE000000000002) != 0)
    {
      v28 = v26 == 7;
      goto LABEL_21;
    }
    v37 = *(unsigned __int8 *)(v26 + 5);
    if (v37 == 2)
    {
      v41 = *(_QWORD *)(v26 + 8);
      v42 = (int *)(v26 + 16);
      if ((v41 & 1) == 0)
        v42 = (int *)(v41 + 4);
      v43 = *v42;
    }
    else
    {
      if (v37 != 3)
      {
        v38 = 16 * (*(_DWORD *)v26 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v38 + 10) & 1) == 0)
        {
          v28 = 1;
          goto LABEL_21;
        }
        v40 = *(_QWORD *)(v38 + 40) == (_QWORD)v9;
        goto LABEL_44;
      }
      v43 = *(_DWORD *)(v26 + 8);
    }
    v40 = v43 == 0;
LABEL_44:
    v28 = !v40;
    goto LABEL_21;
  }
  v44 = v27 <= 0.0;
  v45 = v27 < 0.0;
  v28 = !v44 || v45;
LABEL_21:
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v14, v15, v16, v17, v18, v19, v20))
    return 0;
LABEL_22:
  LOBYTE(v76) = 0;
  v77 = 0;
  v29 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)&v76);
  if (!v30)
  {
    v46 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC::VM **)v9;
    v47 = 72;
    return JSC::throwTypeError((unint64_t)this, &v78, (uint64_t)v46, v47);
  }
  if (v29 < 8 || v29 - 8 < v21)
  {
    v48 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v48 = 0x1400000002;
    *(_QWORD *)(v48 + 8) = "Out of bounds access";
    *(_DWORD *)(v48 + 16) = 4;
    v75 = (WTF::StringImpl *)v48;
    v50 = JSC::createRangeError((unint64_t)v9, &v75, v49);
    v33 = JSC::VM::throwException(v10, v9, v50, v51, v52, v53, v54, v55);
    v63 = v75;
    v75 = 0;
    if (v63)
    {
      if (*(_DWORD *)v63 == 2)
      {
        WTF::StringImpl::~StringImpl(v63, v56, v57, v58, v59, v60, v61, v62);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v63 -= 2;
      }
    }
  }
  else
  {
    v31 = *(_QWORD *)(v11 + 16);
    if (v31 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v32 = (double *)(v31 + v21);
    if (v28)
      *v32 = v25;
    else
      *(_QWORD *)v32 = bswap64(*(unint64_t *)&v25);
    return 10;
  }
  return v33;
}

uint64_t JSC::dataViewProtoFuncSetBigInt64(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  JSC::Structure *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  double v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  int *v45;
  int v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  JSC::Heap **v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  JSC::Exception *v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v80;
  BOOL v81;
  int v82;
  int v83;
  uint64_t (*v84)(JSC::Structure **);
  JSC::Structure **v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  _BYTE v88[16];
  JSC::VM *v89;
  JSC::Structure *v90[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v89 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v34 = "Receiver of DataView method must be a DataView";
    v35 = 47;
    return JSC::throwTypeError((unint64_t)this, &v89, (uint64_t)v34, v35);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v90[0] = (JSC::Structure *)v13;
  v20 = JSC::JSValue::toIndex(v90, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v36 = *(_DWORD *)(v10 + 80);
    if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v22 = (JSC::Structure *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7));
  v90[0] = v22;
  v23 = *(_QWORD *)(v9 + 56);
  JSC::JSValue::toBigInt(v90, (JSC::JSGlobalObject *)v9, v14, v15, v16, v17, v18, v19, v21);
  if (*(_DWORD *)(v23 + 80))
  {
    v37 = *(_DWORD *)(v23 + 80);
    if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    {
      v86 = v24;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, v25, v26, v27, v28, v29, v30);
      v24 = v86;
    }
    if (*(_QWORD *)(v23 + 16))
      goto LABEL_24;
  }
  if (!*(_DWORD *)(v24 + 8))
  {
LABEL_24:
    v33 = 0;
  }
  else
  {
    v31 = *(_QWORD *)(v24 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v32 = *(_QWORD *)v31;
    v33 = *(_BYTE *)(v24 + 16) ? -v32 : v32;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v82 = *(_DWORD *)(v10 + 80);
    if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
  {
    v40 = 0;
    goto LABEL_45;
  }
  v38 = *((_QWORD *)a2 + 8);
  if (v38 >= 0xFFFE000000000000)
  {
    v43 = (_DWORD)v38 == 0;
    goto LABEL_41;
  }
  *(_QWORD *)&v39 = v38 - 0x2000000000000;
  if (v38 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v80 = v39 <= 0.0;
    v81 = v39 < 0.0;
    v40 = !v80 || v81;
    goto LABEL_44;
  }
  if ((v38 & 0xFFFE000000000002) == 0)
  {
    v41 = *(unsigned __int8 *)(v38 + 5);
    if (v41 == 2)
    {
      v44 = *(_QWORD *)(v38 + 8);
      v45 = (int *)(v38 + 16);
      if ((v44 & 1) == 0)
        v45 = (int *)(v44 + 4);
      v46 = *v45;
    }
    else
    {
      if (v41 != 3)
      {
        v42 = 16 * (*(_DWORD *)v38 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v42 + 10) & 1) == 0)
        {
          v40 = 1;
          goto LABEL_44;
        }
        v43 = *(_QWORD *)(v42 + 40) == v9;
LABEL_41:
        v40 = !v43;
        goto LABEL_44;
      }
      v46 = *(_DWORD *)(v38 + 8);
    }
    v43 = v46 == 0;
    goto LABEL_41;
  }
  v40 = v38 == 7;
LABEL_44:
  if (*(_DWORD *)(v10 + 80))
  {
    v83 = *(_DWORD *)(v10 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_45:
  v88[0] = 0;
  v88[8] = 0;
  v47 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v88);
  if (!v48)
  {
    v34 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v35 = 72;
    return JSC::throwTypeError((unint64_t)this, &v89, (uint64_t)v34, v35);
  }
  if (v47 < 8 || v47 - 8 < v20)
  {
    v52 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v52 = 0x1400000002;
    *(_QWORD *)(v52 + 8) = "Out of bounds access";
    *(_DWORD *)(v52 + 16) = 4;
    v87 = (WTF::StringImpl *)v52;
    v53 = *(_QWORD *)(v9 + 128);
    v54 = *(JSC::Heap ***)(v9 + 56);
    if ((v53 & 1) != 0)
    {
      v84 = *(uint64_t (**)(JSC::Structure **))(v53 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v85 = (JSC::Structure **)(v9 - 16);
      else
        v85 = (JSC::Structure **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v90[0] = *v85;
      v90[1] = (JSC::Structure *)v9;
      v90[2] = (JSC::Structure *)(v9 + 128);
      v53 = v84(v90);
    }
    v55 = JSC::ErrorInstance::create(v54, v53, &v87, 0, 0, 0, 2, 1);
    v62 = (JSC::Exception *)v55;
    if ((v55 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v55 & 0xFFFFFFFE) + 0x4C)))
    {
      v62 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v55, 0, v56, v57, v58, v59, v60);
    }
    v51 = (uint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v62, v61, v56, v57, v58, v59, v60);
    v70 = v87;
    v87 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
        WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v70 -= 2;
      }
    }
  }
  else
  {
    v49 = *(_QWORD *)(v11 + 16);
    if (v49 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v49 = (v49 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v50 = v49 + v20;
    if (v40)
    {
      *(_QWORD *)v50 = v33;
      return 10;
    }
    else
    {
      *(_BYTE *)v50 = HIBYTE(v33);
      *(_BYTE *)(v50 + 1) = BYTE6(v33);
      *(_BYTE *)(v50 + 2) = BYTE5(v33);
      *(_BYTE *)(v50 + 3) = BYTE4(v33);
      *(_BYTE *)(v50 + 4) = BYTE3(v33);
      *(_BYTE *)(v50 + 5) = BYTE2(v33);
      *(_BYTE *)(v50 + 6) = BYTE1(v33);
      v51 = 10;
      *(_BYTE *)(v50 + 7) = v33;
    }
  }
  return v51;
}

uint64_t JSC::dataViewProtoFuncSetBigUint64(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int8x16_t v21;
  JSC::Structure *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  double v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  int *v45;
  int v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  JSC::Heap **v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  JSC::Exception *v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v80;
  BOOL v81;
  int v82;
  int v83;
  uint64_t (*v84)(JSC::Structure **);
  JSC::Structure **v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  _BYTE v88[16];
  JSC::VM *v89;
  JSC::Structure *v90[3];

  v9 = (unint64_t)this;
  v10 = *((_QWORD *)this + 7);
  v89 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v34 = "Receiver of DataView method must be a DataView";
    v35 = 47;
    return JSC::throwTypeError((unint64_t)this, &v89, (uint64_t)v34, v35);
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v90[0] = (JSC::Structure *)v13;
  v20 = JSC::JSValue::toIndex(v90, this, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a4);
  if (*(_DWORD *)(v10 + 80))
  {
    v36 = *(_DWORD *)(v10 + 80);
    if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v14, v15, v16, v17, v18, v19);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v22 = (JSC::Structure *)((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL ? 10 : *((_QWORD *)a2 + 7));
  v90[0] = v22;
  v23 = *(_QWORD *)(v9 + 56);
  JSC::JSValue::toBigInt(v90, (JSC::JSGlobalObject *)v9, v14, v15, v16, v17, v18, v19, v21);
  if (*(_DWORD *)(v23 + 80))
  {
    v37 = *(_DWORD *)(v23 + 80);
    if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    {
      v86 = v24;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v23 + 64), 7u, v25, v26, v27, v28, v29, v30);
      v24 = v86;
    }
    if (*(_QWORD *)(v23 + 16))
      goto LABEL_24;
  }
  if (!*(_DWORD *)(v24 + 8))
  {
LABEL_24:
    v33 = 0;
  }
  else
  {
    v31 = *(_QWORD *)(v24 + 24);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v31 = (v31 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v32 = *(_QWORD *)v31;
    v33 = *(_BYTE *)(v24 + 16) ? -v32 : v32;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v82 = *(_DWORD *)(v10 + 80);
    if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
  {
    v40 = 0;
    goto LABEL_45;
  }
  v38 = *((_QWORD *)a2 + 8);
  if (v38 >= 0xFFFE000000000000)
  {
    v43 = (_DWORD)v38 == 0;
    goto LABEL_41;
  }
  *(_QWORD *)&v39 = v38 - 0x2000000000000;
  if (v38 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v80 = v39 <= 0.0;
    v81 = v39 < 0.0;
    v40 = !v80 || v81;
    goto LABEL_44;
  }
  if ((v38 & 0xFFFE000000000002) == 0)
  {
    v41 = *(unsigned __int8 *)(v38 + 5);
    if (v41 == 2)
    {
      v44 = *(_QWORD *)(v38 + 8);
      v45 = (int *)(v38 + 16);
      if ((v44 & 1) == 0)
        v45 = (int *)(v44 + 4);
      v46 = *v45;
    }
    else
    {
      if (v41 != 3)
      {
        v42 = 16 * (*(_DWORD *)v38 & 0xFFFFFFFE);
        if ((*(_BYTE *)(v42 + 10) & 1) == 0)
        {
          v40 = 1;
          goto LABEL_44;
        }
        v43 = *(_QWORD *)(v42 + 40) == v9;
LABEL_41:
        v40 = !v43;
        goto LABEL_44;
      }
      v46 = *(_DWORD *)(v38 + 8);
    }
    v43 = v46 == 0;
    goto LABEL_41;
  }
  v40 = v38 == 7;
LABEL_44:
  if (*(_DWORD *)(v10 + 80))
  {
    v83 = *(_DWORD *)(v10 + 80);
    if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v25, v26, v27, v28, v29, v30);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
LABEL_45:
  v88[0] = 0;
  v88[8] = 0;
  v47 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)v88);
  if (!v48)
  {
    v34 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC *)v9;
    v35 = 72;
    return JSC::throwTypeError((unint64_t)this, &v89, (uint64_t)v34, v35);
  }
  if (v47 < 8 || v47 - 8 < v20)
  {
    v52 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v52 = 0x1400000002;
    *(_QWORD *)(v52 + 8) = "Out of bounds access";
    *(_DWORD *)(v52 + 16) = 4;
    v87 = (WTF::StringImpl *)v52;
    v53 = *(_QWORD *)(v9 + 128);
    v54 = *(JSC::Heap ***)(v9 + 56);
    if ((v53 & 1) != 0)
    {
      v84 = *(uint64_t (**)(JSC::Structure **))(v53 & 0xFFFFFFFFFFFFFFFCLL);
      if ((v9 & 8) != 0)
        v85 = (JSC::Structure **)(v9 - 16);
      else
        v85 = (JSC::Structure **)(v9 & 0xFFFFFFFFFFFFC000 | 8);
      v90[0] = *v85;
      v90[1] = (JSC::Structure *)v9;
      v90[2] = (JSC::Structure *)(v9 + 128);
      v53 = v84(v90);
    }
    v55 = JSC::ErrorInstance::create(v54, v53, &v87, 0, 0, 0, 2, 1);
    v62 = (JSC::Exception *)v55;
    if ((v55 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v55 & 0xFFFFFFFE) + 0x4C)))
    {
      v62 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v55, 0, v56, v57, v58, v59, v60);
    }
    v51 = (uint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)v9, v62, v61, v56, v57, v58, v59, v60);
    v70 = v87;
    v87 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
      {
        WTF::StringImpl::~StringImpl(v70, v63, v64, v65, v66, v67, v68, v69);
        WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
      }
      else
      {
        *(_DWORD *)v70 -= 2;
      }
    }
  }
  else
  {
    v49 = *(_QWORD *)(v11 + 16);
    if (v49 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v49 = (v49 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v50 = v49 + v20;
    if (v40)
    {
      *(_QWORD *)v50 = v33;
      return 10;
    }
    else
    {
      *(_BYTE *)v50 = HIBYTE(v33);
      *(_BYTE *)(v50 + 1) = BYTE6(v33);
      *(_BYTE *)(v50 + 2) = BYTE5(v33);
      *(_BYTE *)(v50 + 3) = BYTE4(v33);
      *(_BYTE *)(v50 + 4) = BYTE3(v33);
      *(_BYTE *)(v50 + 5) = BYTE2(v33);
      *(_BYTE *)(v50 + 6) = BYTE1(v33);
      v51 = 10;
      *(_BYTE *)(v50 + 7) = v33;
    }
  }
  return v51;
}

unint64_t JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>(JSC::JSArrayBufferView *this, uint64_t a2)
{
  JSC::JSArrayBufferView *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = this;
  if ((*((_BYTE *)this + 40) & 8) != 0
    && ((v3 = *((_QWORD *)this + 2)) == 0
     || qword_1ECF4C038
     && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
     && !((v3 & 0x3FFFFFFFFLL) + qword_1ECF4C038)))
  {
    LOBYTE(v2) = 0;
    v6 = 0;
  }
  else if ((*((_BYTE *)this + 40) & 7u) > 2)
  {
    v8 = *((_QWORD *)this + 6);
    if (v8)
    {
      *(_DWORD *)v8 += 2;
      if (*(_BYTE *)(a2 + 8))
      {
        v9 = *(_QWORD *)a2;
      }
      else
      {
        if (*(_BYTE *)(v8 + 64) && (v19 = *(_QWORD *)(v8 + 32)) != 0)
          v9 = *(_QWORD *)(v19 + 32);
        else
          v9 = *(_QWORD *)(v8 + 48);
        *(_QWORD *)a2 = v9;
        *(_BYTE *)(a2 + 8) = 1;
      }
      v10 = *((_QWORD *)this + 4);
      if (JSC::JSArrayBufferView::byteLengthRaw(this) + v10 <= v9)
      {
        if ((*((_BYTE *)v2 + 40) & 1) != 0)
        {
          LOBYTE(v2) = v9 - v10;
          v6 = (v9 - v10) & 0xFFFFFFFFFFFFFF00;
        }
        else
        {
          v18 = JSC::JSArrayBufferView::byteLengthRaw(v2);
          LOBYTE(v2) = v18;
          v6 = v18 & 0xFFFFFFFFFFFFFF00;
        }
      }
      else
      {
        LOBYTE(v2) = 0;
        v6 = 0;
      }
      WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref((JSC::ArrayBuffer *)v8, v11, v12, v13, v14, v15, v16, v17);
    }
    else
    {
      LOBYTE(v2) = 0;
      v6 = 0;
    }
  }
  else
  {
    v4 = *((_QWORD *)this + 3);
    if ((*((_BYTE *)this + 5) - 42) > 7u)
      LOBYTE(v5) = 0;
    else
      v5 = qword_199158270[(char)(*((_BYTE *)this + 5) - 42)];
    v2 = (JSC::JSArrayBufferView *)(v4 << v5);
    v6 = (v4 << v5) & 0xFFFFFFFFFFFFFF00;
  }
  return v6 & 0xFFFFFFFFFFFFFF00 | v2;
}

uint64_t JSC::setData<JSC::Uint32Adaptor>(JSC::JSGlobalObject *a1, uint64_t a2, int8x16_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int8x16_t v22;
  JSC::JSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  const WTF::String *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  JSC::JSObject *v73;
  char v74;
  JSC::VM *v75;

  v9 = a1;
  v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v75 = v10;
  v11 = *(_QWORD *)(a2 + 40);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 50)
  {
    v70 = "Receiver of DataView method must be a DataView";
    v71 = 47;
    return JSC::throwTypeError((unint64_t)a1, &v75, (uint64_t)v70, v71);
  }
  if (*(_DWORD *)(a2 + 32) == 1)
    v13 = 10;
  else
    v13 = *(_QWORD *)(a2 + 48);
  v73 = (JSC::JSObject *)v13;
  v21 = JSC::JSValue::toIndex(&v73, a1, (uint64_t)"byteOffset", 11, a6, a7, a8, a9, a3);
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v14, v15, v16, v17, v18, v19, v20))
    return 0;
  v23 = (unint64_t)(*(int *)(a2 + 32) - 3) > 0xFFFFFFFFFFFFFFFDLL
      ? (JSC::JSObject *)10
      : *(JSC::JSObject **)(a2 + 56);
  v31 = JSC::toNativeFromValue<JSC::Uint32Adaptor>(v9, v23, v15, v16, v17, v18, v19, v20, v22);
  if (*((_DWORD *)v10 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v24, v25, v26, v27, v28, v29, v30))
      return 0;
  }
  if ((unint64_t)(*(int *)(a2 + 32) - 4) > 0xFFFFFFFFFFFFFFFCLL)
  {
    v39 = 0;
  }
  else
  {
    v73 = *(JSC::JSObject **)(a2 + 64);
    v39 = JSC::JSValue::toBoolean((uint64_t *)&v73, (uint64_t)v9);
    if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v32, v33, v34, v35, v36, v37, v38))
      return 0;
  }
  LOBYTE(v73) = 0;
  v74 = 0;
  v40 = JSC::JSDataView::viewByteLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)0>>((JSC::JSArrayBufferView *)v11, (uint64_t)&v73);
  if (!v41)
  {
    v70 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    a1 = v9;
    v71 = 72;
    return JSC::throwTypeError((unint64_t)a1, &v75, (uint64_t)v70, v71);
  }
  if (v40 < 4 || v40 - 4 < v21)
  {
    v45 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v45 = 0x1400000002;
    *(_QWORD *)(v45 + 8) = "Out of bounds access";
    *(_DWORD *)(v45 + 16) = 4;
    v72 = (WTF::StringImpl *)v45;
    v47 = JSC::createRangeError((unint64_t)v9, &v72, v46);
    v44 = JSC::VM::throwException(v10, v9, v47, v48, v49, v50, v51, v52);
    v60 = v72;
    v72 = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
      {
        WTF::StringImpl::~StringImpl(v60, v53, v54, v55, v56, v57, v58, v59);
        WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
      }
      else
      {
        *(_DWORD *)v60 -= 2;
      }
    }
  }
  else
  {
    v42 = *(_QWORD *)(v11 + 16);
    if (v42 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v42 = (v42 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    v43 = (unsigned int *)(v42 + v21);
    if ((v39 & 1) != 0)
      *v43 = v31;
    else
      *v43 = bswap32(v31);
    return 10;
  }
  return v44;
}

uint64_t WTF::ParkingLot::compareAndPark<unsigned char,unsigned char>(uint64_t a1, char a2)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  char v7;
  _QWORD v8[3];
  _QWORD v9[3];

  v6 = a1;
  v7 = a2;
  v3 = 0x7FF0000000000000;
  v4 = 0;
  v9[0] = WTF::ScopedLambdaRefFunctor<BOOL ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned char,unsigned char>(WTF::Atomic<unsigned char> const*,unsigned char)::{lambda(void)#1}>::implFunction;
  v9[1] = v9;
  v9[2] = &v6;
  v8[0] = WTF::ScopedLambdaRefFunctor<void ()(void),WTF::ParkingLot::ParkResult WTF::ParkingLot::compareAndPark<unsigned char,unsigned char>(WTF::Atomic<unsigned char> const*,unsigned char)::{lambda(void)#2}>::implFunction;
  v8[1] = v8;
  v8[2] = &v5;
  return WTF::ParkingLot::parkConditionallyImpl(a1, (uint64_t)v9, (uint64_t)v8, (WTF::TimeWithDynamicClockType *)&v3);
}

uint64_t WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::Atomic<unsigned char> &,WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::Fairness)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction(uint64_t a1, int a2)
{
  return WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::Atomic<unsigned char> &,WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::Fairness)::{lambda(WTF::ParkingLot::UnparkResult)#1}::operator()(*(_QWORD *)(a1 + 16), a2 & 0xFFFFFF);
}

uint64_t WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::Atomic<unsigned char> &,WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::Fairness)::{lambda(WTF::ParkingLot::UnparkResult)#1}::operator()(uint64_t a1, int a2)
{
  unsigned __int8 *v2;
  int v3;
  int v4;
  int v5;
  int v6;

  if ((_BYTE)a2 && ((*(_QWORD *)&a2 & 0xFF0000) != 0 || **(_DWORD **)a1 == 1))
    return 1;
  v2 = *(unsigned __int8 **)(a1 + 8);
  if ((a2 & 0xFF00) != 0)
  {
    do
    {
      while (1)
      {
        v5 = *v2;
        v6 = __ldaxr(v2);
        if (v6 == v5)
          break;
        __clrex();
      }
    }
    while (__stlxr(v5 & 0x3F | 0x80, v2));
  }
  else
  {
    do
    {
      while (1)
      {
        v3 = *v2;
        v4 = __ldaxr(v2);
        if (v4 == v3)
          break;
        __clrex();
      }
    }
    while (__stlxr(v3 & 0x3F, v2));
  }
  return 0;
}

_BYTE *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::AtomStringImpl *,void>>(_BYTE *result, unsigned int a2, int a3, int8x16_t *a4, unsigned int a5, uint64_t a6)
{
  _QWORD *v10;
  _DWORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  unsigned __int128 v18;
  char v19;
  _DWORD *v20;

  v10 = result;
  if (a3)
  {
    if ((a2 & 0x80000000) == 0)
    {
      result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(a2 + 20), &v20);
      v11 = v20;
      if (v20)
      {
        v12 = v20 + 5;
        *v20 = 2;
        v11[1] = a2;
        *((_QWORD *)v11 + 1) = v11 + 5;
        v11[4] = 4;
        if (a5 == 1)
        {
          *v12 = a4->i8[0];
        }
        else if (a5)
        {
          result = memcpy(v11 + 5, a4, a5);
        }
        if (a6)
        {
          result = &v12[a5];
          v13 = *(_BYTE **)(a6 + 8);
          v14 = *(unsigned int *)(a6 + 4);
          if ((*(_BYTE *)(a6 + 16) & 4) != 0)
          {
            if ((_DWORD)v14 == 1)
            {
              *result = *v13;
            }
            else if ((_DWORD)v14)
            {
              result = memcpy(result, v13, v14);
            }
          }
          else
          {
            v16 = &result[v14];
            if (v14 >= 0x10)
            {
              v17 = &result[v14 & 0xFFFFFFF0];
              do
              {
                v18 = (unsigned __int128)vld2q_s8(v13);
                v13 += 32;
                *(_OWORD *)result = v18;
                result += 16;
              }
              while (result != v17);
              result = v17;
            }
            while (result != v16)
            {
              v19 = *v13;
              v13 += 2;
              *result++ = v19;
            }
          }
        }
      }
      goto LABEL_10;
    }
LABEL_18:
    v11 = 0;
    goto LABEL_10;
  }
  if (a2 > 0x7FFFFFEF)
    goto LABEL_18;
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20), &v20);
  v11 = v20;
  if (v20)
  {
    v15 = (char *)(v20 + 5);
    *v20 = 2;
    v11[1] = a2;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    result = WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v15, a4, a5, a6);
  }
LABEL_10:
  *v10 = v11;
  return result;
}

uint64_t JSC::JSDestructibleObjectHeapCellType::JSDestructibleObjectHeapCellType(uint64_t this)
{
  *(_WORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E359F8C0;
  return this;
}

{
  *(_WORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E359F8C0;
  return this;
}

void JSC::JSDestructibleObjectHeapCellType::finishSweep(JSC::JSDestructibleObjectHeapCellType *this, JSC::MarkedBlock::Handle *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::FreeList *v8;
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _BOOL4 v24;
  BOOL v25;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int8 *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  signed int v46;
  int v47;
  unint64_t v48;
  int v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  size_t v67;
  unsigned __int8 *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  signed int v80;
  int v81;
  int v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  _BOOL4 v92;
  int v93;
  int v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  signed int v100;
  signed int v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  _BOOL8 isEmpty;
  unint64_t v121;
  unsigned __int8 *v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  int v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  JSC::FreeList *v141;
  unint64_t v142;
  int v143;
  int v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  unsigned __int16 *v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  unsigned __int16 *v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  JSC::FreeList *v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  unsigned __int16 *v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unsigned __int16 *v200;
  unsigned int v201;
  uint64_t v202;
  unsigned __int16 *v203;
  unsigned int v204;
  uint64_t v205;
  int v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  JSC::FreeList *v217;
  char v218;
  _DWORD *v219;
  uint64_t *v220;
  uint64_t v221;
  unint64_t *v222;
  uint64_t *v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t v226;
  int *v227;
  char **v228;
  _DWORD *v229;
  int *v230;
  unsigned int *v231;
  JSC::MarkedBlock::Handle *v232;
  unint64_t *v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t *v237;
  _QWORD v238[256];
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  unint64_t v246;
  unsigned int v247;
  int v248;
  int v249;
  _DWORD v250[3];

  v8 = (JSC::FreeList *)a3;
  v10 = a3 != 0;
  v11 = *((unsigned __int8 *)a2 + 8);
  v12 = *((_QWORD *)a2 + 10);
  v13 = *((_QWORD *)a2 + 11);
  v14 = *(unsigned __int8 *)(v12 + 445);
  if (*(_BYTE *)(v12 + 445))
    v15 = 2;
  else
    v15 = 1;
  if (v11 == 1)
    v16 = v15;
  else
    v16 = 0;
  v17 = *((_QWORD *)a2 + 3);
  v18 = ~*(_DWORD *)(*(_QWORD *)(v17 + 32) + 40 * (*((_DWORD *)a2 + 3) >> 5) + 4) >> *((_DWORD *)a2 + 3);
  v19 = *(_QWORD *)(v13 + 8);
  v20 = *(_DWORD *)(v19 + 436);
  v21 = *(_DWORD *)(v12 + 432);
  v22 = *(_DWORD *)(v13 + 32);
  v23 = *(_DWORD *)(v13 + 36);
  v24 = v22 == v21;
  if (*(_BYTE *)(v12 + 445))
  {
    v90 = *(unsigned __int8 *)(v19 + 347);
    v91 = v22 + 1;
    a3 = 2;
    if (v22 == -1)
      v91 = 2;
    v92 = v91 == v21;
    if (v22)
      v93 = v92;
    else
      v93 = 1;
    if (v90 == 1)
      v94 = v93;
    else
      v94 = 0;
    if (v22 == v21)
      v24 = 1;
    else
      v24 = v94;
LABEL_114:
    v250[0] = v10;
    v249 = v16;
    v248 = byte_1ECF4C400;
    if (!v8 && v11 != 1)
    {
      __break(0xC471u);
      goto LABEL_397;
    }
    v95 = *(_DWORD *)a2;
    v247 = 16 * *(_DWORD *)a2;
    v96 = *(_QWORD *)(v12 + 168);
    v97 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
    v98 = (v96 >> 26) ^ (v97 >> 17) ^ v96 ^ v97;
    *(_QWORD *)(v12 + 160) = v96;
    *(_QWORD *)(v12 + 168) = v98;
    v246 = v98 + v96;
    v244 = &v218;
    v245 = v12;
    if (v23 != v20 && (v18 & 1) == 0 && BYTE1(qword_1ECF4C414) != 0)
    {
      if (v24)
      {
        isEmpty = WTF::BitSet<1024ul,unsigned long long>::isEmpty((_QWORD *)(v13 + 40));
        if (!isEmpty)
        {
          v133 = WTF::dataFile((WTF *)isEmpty);
          v238[0] = v13;
          v238[1] = v13;
          v238[2] = a2;
          v134 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v133 + 32))(v133);
          JSC::MarkedBlock::Handle::specializedSweep<false,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)0,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)0,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(WTF::PrintStream &)#1}::operator()((uint64_t)v238, v134);
        }
      }
      v121 = v13 + 0x4000;
      v65 = *((unsigned int *)a2 + 1);
      v66 = (_QWORD *)(v13 + 16 * v65);
      v67 = 0x4000 - 16 * v65;
      if (v67 < 0x3ED1)
      {
        v122 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
        if (__ldaxr(v122))
        {
          __clrex();
        }
        else if (!__stxr(1u, v122))
        {
LABEL_182:
          v124 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
          v125 = v124 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v125 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
          v126 = v124 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v126 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
          v127 = v124 + 40 * (*((_DWORD *)a2 + 3) >> 5);
          *(_DWORD *)(v127 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
          if (v250[0] == 1)
          {
            *((_BYTE *)a2 + 10) = 1;
          }
          else
          {
            v128 = v124 + 40 * (*((_DWORD *)a2 + 3) >> 5);
            *(_DWORD *)(v128 + 4) |= 1 << *((_DWORD *)a2 + 3);
          }
          v129 = __ldxr(v122);
          if (v129 == 1)
          {
            if (!__stlxr(0, v122))
              goto LABEL_191;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v122, 0, a3, a4, a5, a6, a7, a8);
LABEL_191:
          if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
          {
            v130 = (unsigned int *)(v13 + 24);
            while (1)
            {
              v131 = *v130;
              if ((*v130 & 3) != 1)
                break;
              v132 = __ldxr(v130);
              if (v132 == v131)
              {
                if (!__stxr(v131 & 0xFFFFFFFE, v130))
                  goto LABEL_294;
              }
              else
              {
                __clrex();
              }
            }
            WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v130, 0, a3, a4, a5, a6, a7, a8);
          }
LABEL_294:
          if (v65 <= 0x3FF && v249)
          {
            v174 = v13 + 16 * v65;
            do
            {
              if (*(_DWORD *)v174)
              {
                (*(void (**)(unint64_t))(*(_QWORD *)(v174 + 16) + 48))(v174);
                *(_DWORD *)v174 = 0;
                *(_DWORD *)(v174 + 8) = 1;
              }
              v174 += v247;
            }
            while (v174 < v121);
          }
LABEL_164:
          if (v250[0] == 1)
          {
            if (v248 == 1 && (_DWORD)v65 != 1024)
              memset_pattern16(v66, &unk_1991567C0, v67);
            v117 = v246;
            v66[1] = v246 ^ ((v67 << 32) | 1);
            *(_QWORD *)v8 = v66;
            *((_QWORD *)v8 + 1) = (char *)v66 + v67;
            *((_QWORD *)v8 + 2) = (char *)v66 + 1;
            *((_QWORD *)v8 + 3) = v117;
            *((_DWORD *)v8 + 8) = v67;
          }
          return;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v122);
        goto LABEL_182;
      }
      __break(0xC471u);
LABEL_397:
      JUMPOUT(0x1989A62A4);
    }
    v243 = 0;
    v242 = 0;
    v241 = 0;
    v240 = 0;
    v239 = 0;
    v226 = v13;
    v227 = &v249;
    v228 = &v244;
    v229 = v250;
    v230 = &v248;
    v231 = &v247;
    v232 = a2;
    v233 = &v240;
    v234 = &v241;
    v235 = &v242;
    v236 = (uint64_t *)&v246;
    v237 = &v243;
    v219 = v250;
    v220 = &v241;
    v221 = v13;
    v222 = &v240;
    v223 = &v242;
    v224 = (uint64_t *)&v246;
    v225 = &v243;
    v100 = 1024 - v95;
    v101 = *((_DWORD *)a2 + 1);
    v217 = v8;
    if (1024 - v95 >= v101)
    {
      if ((v18 & 1) != 0)
      {
        v102 = v13 + 168;
        v83 = 1;
        while (1)
        {
          if (v24)
          {
            if (v100 > 0x3FF)
              goto LABEL_394;
            if (((*(_QWORD *)(v13 + 40 + (((unint64_t)v100 >> 3) & 0x1FFFFFF8)) >> v100) & 1) != 0)
              goto LABEL_128;
          }
          if (v23 != v20)
            goto LABEL_132;
          if (v100 > 0x3FF)
            goto LABEL_394;
          if (((*(_QWORD *)(v102 + (((unint64_t)v100 >> 3) & 0x1FFFFFF8)) >> v100) & 1) != 0)
          {
LABEL_128:
            v83 = 0;
          }
          else
          {
LABEL_132:
            if (v249 == 2)
            {
              v103 = v239++;
              if (v103 > 0x3FF)
                goto LABEL_394;
              *((_WORD *)v238 + v103) = v100;
            }
            else
            {
              v216 = v102;
              JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::JSDestructibleObjectDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::JSDestructibleObjectDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v226, v100);
              v102 = v216;
              v95 = *(_DWORD *)a2;
              v101 = *((_DWORD *)a2 + 1);
            }
          }
          v100 -= v95;
          if (v100 < v101)
            goto LABEL_307;
        }
      }
      if (v16 != 2)
      {
        v83 = 1;
        do
        {
          if (v249 == 2)
          {
            v198 = v239++;
            if (v198 >= 0x400)
              goto LABEL_394;
            *((_WORD *)v238 + v198) = v100;
          }
          else
          {
            JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::JSDestructibleObjectDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::JSDestructibleObjectDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v226, v100);
            v95 = *(_DWORD *)a2;
            v101 = *((_DWORD *)a2 + 1);
          }
          v100 -= v95;
        }
        while (v100 >= v101);
LABEL_307:
        if (v249 != 2)
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v219);
        if (v23 == v20 && v250[0] == 1)
          *(_DWORD *)(v13 + 36) = 0;
        v177 = v8;
        if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
        {
          v178 = (unsigned int *)(v13 + 24);
          while (1)
          {
            v179 = *v178;
            if ((*v178 & 3) != 1)
              break;
            v180 = __ldxr(v178);
            if (v180 == v179)
            {
              if (!__stxr(v179 & 0xFFFFFFFE, v178))
                goto LABEL_320;
            }
            else
            {
              __clrex();
            }
          }
          WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v178, 0, a3, a4, a5, a6, a7, a8);
        }
LABEL_320:
        if (v249 == 2)
        {
          if (v239)
          {
            v181 = 2 * v239;
            v182 = (unsigned __int16 *)v238;
            do
            {
              v183 = *v182;
              v184 = v13 + 16 * v183;
              if (v249 && *(_DWORD *)v184)
              {
                (*(void (**)(unint64_t))(*(_QWORD *)(v184 + 16) + 48))(v13 + 16 * v183);
                *(_DWORD *)v184 = 0;
                *(_DWORD *)(v184 + 8) = 1;
              }
              v185 = v250[0];
              if (v250[0] == 1)
              {
                if (v248 == 1 && v247 >= 8)
                  memset_pattern16((void *)(v13 + 16 * v183), &unk_1991567C0, v247 & 0xFFFFFFF8);
                v186 = *(unsigned int *)a2;
                v187 = v241;
                if (v186 + v183 < v240)
                {
                  v188 = v13 + 16 * v240;
                  if (v242)
                    v189 = (int)v242 - (int)v188;
                  else
                    v189 = 1;
                  *(_QWORD *)(v188 + 8) = (v189 | (v241 << 36)) ^ v246;
                  v243 += 16 * v187;
                  v242 = v188;
                  v187 = 0;
                }
                v241 = v187 + v186;
                v240 = v183;
              }
              ++v182;
              v181 -= 2;
            }
            while (v181);
            v177 = v217;
          }
          else
          {
            v185 = v250[0];
          }
          if (v185 == 1)
          {
            v190 = v242;
            if (v241)
            {
              v191 = 16 * v241;
              v192 = v13 + 16 * v240;
              v193 = v246;
              if (v242)
                v194 = ((int)v242 - (int)v192) | (unint64_t)(v241 << 36);
              else
                v194 = (v241 << 36) | 1;
              *(_QWORD *)(v192 + 8) = v194 ^ v246;
              v195 = v243 + v191;
              v243 += v191;
              v242 = v192;
              v190 = v192;
              goto LABEL_341;
            }
LABEL_348:
            if (!v190)
            {
              v193 = 0;
              v195 = 0;
              *(_QWORD *)v177 = 0;
              *((_QWORD *)v177 + 1) = 0;
              v197 = 1;
              goto LABEL_342;
            }
            v195 = v243;
            v193 = v246;
LABEL_341:
            v196 = *(_QWORD *)(v190 + 8) ^ v193;
            *(_QWORD *)v177 = v190;
            *((_QWORD *)v177 + 1) = v190 + HIDWORD(v196);
            v197 = v190 + (int)v196;
LABEL_342:
            *((_QWORD *)v177 + 2) = v197;
            *((_QWORD *)v177 + 3) = v193;
            *((_DWORD *)v177 + 8) = v195;
          }
        }
        else if (v250[0] == 1)
        {
          v190 = v242;
          goto LABEL_348;
        }
LABEL_150:
        v53 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
        if (__ldaxr(v53))
        {
          __clrex();
        }
        else if (!__stxr(1u, v53))
        {
          goto LABEL_153;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v53);
LABEL_153:
        v55 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
        v113 = v55 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v113 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
        v114 = v55 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v114 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
        v115 = v55 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v115 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
        if (v250[0] == 1)
          goto LABEL_154;
        if ((v83 & 1) == 0)
          goto LABEL_64;
LABEL_174:
        v118 = v55 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        v119 = 1 << *((_DWORD *)a2 + 3);
        goto LABEL_175;
      }
      v175 = 0;
      do
      {
        if (v175 == 1024)
          goto LABEL_394;
        v176 = v175 + 1;
        *((_WORD *)v238 + v175) = v100;
        v100 -= v95;
        ++v175;
      }
      while (v100 >= v101);
      v239 = v176;
    }
    v83 = 1;
    goto LABEL_307;
  }
  if (byte_1ECF4C400)
    v25 = 1;
  else
    v25 = v23 == v20;
  if (v25 || v11 != 1)
    goto LABEL_114;
  if ((v18 & 1) == 0)
  {
    if (!a3)
    {
      if (v22 == v21)
      {
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::JSDestructibleObjectDestroyFunc>((int *)a2, v14, 0, a4, a5, a6, a7, a8);
        return;
      }
      v250[0] = 0;
      v249 = 1;
      v248 = 0;
      v27 = *(_DWORD *)a2;
      v247 = 16 * *(_DWORD *)a2;
      v28 = *(_QWORD *)(v12 + 168);
      v29 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
      v30 = (v28 >> 26) ^ (v29 >> 17) ^ v28 ^ v29;
      *(_QWORD *)(v12 + 160) = v28;
      *(_QWORD *)(v12 + 168) = v30;
      v246 = v30 + v28;
      v244 = &v218;
      v245 = v12;
      if (BYTE1(qword_1ECF4C414))
      {
        v31 = *((unsigned int *)a2 + 1);
        v32 = v13 + 16 * v31;
        if ((unint64_t)(16 * v31 - 16385) > 0xFFFFFFFFFFFFC12ELL)
        {
          v33 = (unsigned __int8 *)(v17 + 56);
          if (__ldaxr((unsigned __int8 *)(v17 + 56)))
          {
            __clrex();
          }
          else if (!__stxr(1u, v33))
          {
LABEL_24:
            v35 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
            v36 = v35 + 40 * (*((_DWORD *)a2 + 3) >> 5);
            *(_DWORD *)(v36 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
            v37 = v35 + 40 * (*((_DWORD *)a2 + 3) >> 5);
            *(_DWORD *)(v37 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
            v38 = v35 + 40 * (*((_DWORD *)a2 + 3) >> 5);
            *(_DWORD *)(v38 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
            if (v250[0] == 1)
            {
              *((_BYTE *)a2 + 10) = 1;
            }
            else
            {
              v39 = v35 + 40 * (*((_DWORD *)a2 + 3) >> 5);
              *(_DWORD *)(v39 + 4) |= 1 << *((_DWORD *)a2 + 3);
            }
            v40 = __ldxr(v33);
            if (v40 == 1)
            {
              if (!__stlxr(0, v33))
                goto LABEL_46;
            }
            else
            {
              __clrex();
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v33, 0, a3, a4, a5, a6, a7, a8);
LABEL_46:
            if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
            {
              v148 = (unsigned int *)(v13 + 24);
              while (1)
              {
                v149 = *v148;
                if ((*v148 & 3) != 1)
                  break;
                v150 = __ldxr(v148);
                if (v150 == v149)
                {
                  if (!__stxr(v149 & 0xFFFFFFFE, v148))
                    goto LABEL_47;
                }
                else
                {
                  __clrex();
                }
              }
              WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v148, 0, a3, a4, a5, a6, a7, a8);
            }
LABEL_47:
            if (v31 <= 0x3FF && v249)
            {
              do
              {
                if (*(_DWORD *)v32)
                {
                  (*(void (**)(unint64_t))(*(_QWORD *)(v32 + 16) + 48))(v32);
                  *(_DWORD *)v32 = 0;
                  *(_DWORD *)(v32 + 8) = 1;
                }
                v32 += v247;
              }
              while (v32 < v13 + 0x4000);
            }
            return;
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v17 + 56);
          goto LABEL_24;
        }
        __break(0xC471u);
LABEL_394:
        __break(1u);
LABEL_395:
        __break(0xC471u);
        JUMPOUT(0x1989A6500);
      }
      v135 = 0;
      v243 = 0;
      v242 = 0;
      v241 = 0;
      v240 = 0;
      v239 = 0;
      v226 = v13;
      v227 = &v249;
      v228 = &v244;
      v229 = v250;
      v230 = &v248;
      v231 = &v247;
      v232 = a2;
      v233 = &v240;
      v234 = &v241;
      v235 = &v242;
      v236 = (uint64_t *)&v246;
      v237 = &v243;
      v219 = v250;
      v220 = &v241;
      v221 = v13;
      v222 = &v240;
      v223 = &v242;
      v224 = (uint64_t *)&v246;
      v225 = &v243;
      v136 = 1024 - v27;
      v137 = *((_DWORD *)a2 + 1);
      if (1024 - v27 < v137)
        goto LABEL_210;
      v135 = 0;
      do
      {
        if (v249 == 2)
        {
          v239 = v135 + 1;
          if (v135 >= 0x400)
            goto LABEL_394;
          *((_WORD *)v238 + v135++) = v136;
        }
        else
        {
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::JSDestructibleObjectDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::JSDestructibleObjectDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v226, v136);
          v27 = *(_DWORD *)a2;
          v137 = *((_DWORD *)a2 + 1);
        }
        v136 -= v27;
      }
      while (v136 >= v137);
      if (v249 != 2)
LABEL_210:
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v219);
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v138 = (unsigned int *)(v13 + 24);
        while (1)
        {
          v139 = *v138;
          if ((*v138 & 3) != 1)
            break;
          v140 = __ldxr(v138);
          if (v140 == v139)
          {
            if (!__stxr(v139 & 0xFFFFFFFE, v138))
              goto LABEL_360;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v138, 0, a3, a4, a5, a6, a7, a8);
      }
LABEL_360:
      if (v249 == 2)
      {
        if (v135)
        {
          v199 = 2 * v135;
          v200 = (unsigned __int16 *)v238;
          do
          {
            v201 = *v200++;
            JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::JSDestructibleObjectDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::JSDestructibleObjectDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v226, v201);
            v199 -= 2;
          }
          while (v199);
        }
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v219);
      }
      if (v250[0] == 1)
      {
        MEMORY[8] = 0;
        MEMORY[0] = 0;
        MEMORY[0x10] = 1;
        MEMORY[0x18] = 0;
        MEMORY[0x20] = 0;
      }
LABEL_377:
      v53 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
      if (__ldaxr(v53))
      {
        __clrex();
      }
      else if (!__stxr(1u, v53))
      {
        goto LABEL_380;
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v53);
LABEL_380:
      v211 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
      v212 = v211 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v212 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
      v213 = v211 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v213 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
      v214 = v211 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v214 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
      if (v250[0] == 1)
        goto LABEL_154;
      v118 = v211 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      v119 = 1 << *((_DWORD *)a2 + 3);
LABEL_175:
      *(_DWORD *)(v118 + 4) |= v119;
      goto LABEL_64;
    }
    if (v22 == v21)
    {
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::JSDestructibleObjectDestroyFunc>((unsigned int *)a2, a3, a3, a4, a5, a6, a7, a8);
      return;
    }
    v250[0] = 1;
    v249 = 1;
    v248 = 0;
    v60 = *(_DWORD *)a2;
    v247 = 16 * *(_DWORD *)a2;
    v61 = *(_QWORD *)(v12 + 168);
    v62 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
    v63 = (v61 >> 26) ^ (v62 >> 17) ^ v61 ^ v62;
    *(_QWORD *)(v12 + 160) = v61;
    *(_QWORD *)(v12 + 168) = v63;
    v246 = v63 + v61;
    v244 = &v218;
    v245 = v12;
    if (!BYTE1(qword_1ECF4C414))
    {
      v141 = (JSC::FreeList *)a3;
      v142 = 0;
      v243 = 0;
      v242 = 0;
      v241 = 0;
      v240 = 0;
      v239 = 0;
      v226 = v13;
      v227 = &v249;
      v228 = &v244;
      v229 = v250;
      v230 = &v248;
      v231 = &v247;
      v232 = a2;
      v233 = &v240;
      v234 = &v241;
      v235 = &v242;
      v236 = (uint64_t *)&v246;
      v237 = &v243;
      v219 = v250;
      v220 = &v241;
      v221 = v13;
      v222 = &v240;
      v223 = &v242;
      v224 = (uint64_t *)&v246;
      v225 = &v243;
      v143 = 1024 - v60;
      v144 = *((_DWORD *)a2 + 1);
      if (1024 - v60 < v144)
        goto LABEL_219;
      v142 = 0;
      do
      {
        if (v249 == 2)
        {
          v239 = v142 + 1;
          if (v142 >= 0x400)
            goto LABEL_394;
          *((_WORD *)v238 + v142++) = v143;
        }
        else
        {
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::JSDestructibleObjectDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::JSDestructibleObjectDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v226, v143);
          v60 = *(_DWORD *)a2;
          v144 = *((_DWORD *)a2 + 1);
        }
        v143 -= v60;
      }
      while (v143 >= v144);
      if (v249 != 2)
LABEL_219:
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v219);
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v145 = (unsigned int *)(v13 + 24);
        while (1)
        {
          v146 = *v145;
          if ((*v145 & 3) != 1)
            break;
          v147 = __ldxr(v145);
          if (v147 == v146)
          {
            if (!__stxr(v146 & 0xFFFFFFFE, v145))
              goto LABEL_368;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v145, 0, a3, a4, a5, a6, a7, a8);
      }
LABEL_368:
      if (v249 == 2)
      {
        if (v142)
        {
          v202 = 2 * v142;
          v203 = (unsigned __int16 *)v238;
          do
          {
            v204 = *v203++;
            JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::JSDestructibleObjectDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::JSDestructibleObjectDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v226, v204);
            v202 -= 2;
          }
          while (v202);
        }
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v219);
      }
      if (v250[0] == 1)
      {
        v205 = v242;
        if (v242)
        {
          v206 = v243;
          v207 = v246;
          v208 = *(_QWORD *)(v242 + 8) ^ v246;
          *(_QWORD *)v141 = v242;
          *((_QWORD *)v141 + 1) = v205 + HIDWORD(v208);
          v209 = v205 + (int)v208;
        }
        else
        {
          v207 = 0;
          v206 = 0;
          *(_QWORD *)v141 = 0;
          *((_QWORD *)v141 + 1) = 0;
          v209 = 1;
        }
        *((_QWORD *)v141 + 2) = v209;
        *((_QWORD *)v141 + 3) = v207;
        *((_DWORD *)v141 + 8) = v206;
      }
      goto LABEL_377;
    }
    v64 = v13 + 0x4000;
    v65 = *((unsigned int *)a2 + 1);
    v66 = (_QWORD *)(v13 + 16 * v65);
    v67 = 0x4000 - 16 * v65;
    if (v67 >= 0x3ED1)
      goto LABEL_395;
    v68 = (unsigned __int8 *)(v17 + 56);
    if (__ldaxr((unsigned __int8 *)(v17 + 56)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v68))
    {
LABEL_73:
      v70 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
      v71 = v70 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v71 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
      v72 = v70 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v72 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
      v73 = v70 + 40 * (*((_DWORD *)a2 + 3) >> 5);
      *(_DWORD *)(v73 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
      if (v250[0] == 1)
      {
        *((_BYTE *)a2 + 10) = 1;
      }
      else
      {
        v151 = v70 + 40 * (*((_DWORD *)a2 + 3) >> 5);
        *(_DWORD *)(v151 + 4) |= 1 << *((_DWORD *)a2 + 3);
      }
      v74 = __ldxr(v68);
      if (v74 == 1)
      {
        if (!__stlxr(0, v68))
          goto LABEL_157;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v68, 0, a3, a4, a5, a6, a7, a8);
LABEL_157:
      if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
      {
        v152 = (unsigned int *)(v13 + 24);
        while (1)
        {
          v153 = *v152;
          if ((*v152 & 3) != 1)
            break;
          v154 = __ldxr(v152);
          if (v154 == v153)
          {
            if (!__stxr(v153 & 0xFFFFFFFE, v152))
              goto LABEL_158;
          }
          else
          {
            __clrex();
          }
        }
        WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v152, 0, a3, a4, a5, a6, a7, a8);
      }
LABEL_158:
      if (v65 <= 0x3FF && v249)
      {
        v116 = v13 + 16 * v65;
        do
        {
          if (*(_DWORD *)v116)
          {
            (*(void (**)(unint64_t))(*(_QWORD *)(v116 + 16) + 48))(v116);
            *(_DWORD *)v116 = 0;
            *(_DWORD *)(v116 + 8) = 1;
          }
          v116 += v247;
        }
        while (v116 < v64);
      }
      goto LABEL_164;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v17 + 56);
    goto LABEL_73;
  }
  if (a3)
  {
    if (v22 != v21)
    {
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::JSDestructibleObjectDestroyFunc>((unsigned int *)a2, a3, a3, a4, a5, a6, a7, a8);
      return;
    }
    v75 = 1;
    v250[0] = 1;
    v249 = 1;
    v248 = 0;
    v76 = *(_DWORD *)a2;
    v247 = 16 * *(_DWORD *)a2;
    v77 = *(_QWORD *)(v12 + 168);
    v78 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
    v79 = (v77 >> 26) ^ (v78 >> 17) ^ v77 ^ v78;
    *(_QWORD *)(v12 + 160) = v77;
    *(_QWORD *)(v12 + 168) = v79;
    v246 = v79 + v77;
    v244 = &v218;
    v245 = v12;
    v243 = 0;
    v242 = 0;
    v241 = 0;
    v240 = 0;
    v239 = 0;
    v226 = v13;
    v227 = &v249;
    v228 = &v244;
    v229 = v250;
    v230 = &v248;
    v231 = &v247;
    v232 = a2;
    v233 = &v240;
    v234 = &v241;
    v235 = &v242;
    v236 = (uint64_t *)&v246;
    v237 = &v243;
    v219 = v250;
    v220 = &v241;
    v221 = v13;
    v222 = &v240;
    v223 = &v242;
    v224 = (uint64_t *)&v246;
    v225 = &v243;
    v80 = 1024 - v76;
    if (1024 - v76 < *((_DWORD *)a2 + 1))
    {
      v215 = 0;
      v83 = 1;
    }
    else
    {
      v215 = 0;
      v81 = 1;
      v82 = 1;
      v83 = 1;
      do
      {
        if (v80 >= 0x400)
          goto LABEL_394;
        v84 = v80;
        if (((*(_QWORD *)(v13 + 40 + (((unint64_t)v80 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v80) & 1) != 0)
        {
          v83 = 0;
        }
        else if (v249 == 2)
        {
          v239 = v215 + 1;
          if (v215 >= 0x400)
            goto LABEL_394;
          *((_WORD *)v238 + v215++) = v80;
        }
        else
        {
          v85 = v13 + 16 * v80;
          if (v249 && *(_DWORD *)v85)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)(v85 + 16) + 48))(v13 + 16 * v80);
            *(_DWORD *)v85 = 0;
            *(_DWORD *)(v85 + 8) = 1;
            v81 = v250[0];
            v82 = v250[0];
          }
          if (v82 == 1)
          {
            if (v248 == 1 && v247 >= 8)
              memset_pattern16((void *)(v13 + 16 * v84), &unk_1991567C0, v247 & 0xFFFFFFF8);
            v86 = *(unsigned int *)a2;
            v87 = v241;
            if (v86 + v84 < v240)
            {
              v88 = v13 + 16 * v240;
              if (v242)
                v89 = (int)v242 - (int)v88;
              else
                v89 = 1;
              *(_QWORD *)(v88 + 8) = (v89 | (v241 << 36)) ^ v246;
              v243 += 16 * v87;
              v242 = v88;
              v87 = 0;
            }
            v241 = v87 + v86;
            v240 = v84;
            v82 = 1;
          }
        }
        v80 = v84 - *(_DWORD *)a2;
      }
      while (v80 >= *((_DWORD *)a2 + 1));
      v75 = v249;
      if (v249 != 2 && v81 == 1 && v241)
      {
        v104 = 16 * v241;
        v105 = v13 + 16 * v240;
        v106 = ((int)v242 - (int)v105) | (unint64_t)(v241 << 36);
        if (!v242)
          v106 = (v241 << 36) | 1;
        *(_QWORD *)(v105 + 8) = v106 ^ v246;
        v243 += v104;
        v242 = v105;
      }
    }
    if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
    {
      v155 = (unsigned int *)(v13 + 24);
      while (1)
      {
        v156 = *v155;
        if ((*v155 & 3) != 1)
          break;
        v157 = __ldxr(v155);
        if (v157 == v156)
        {
          if (!__stxr(v156 & 0xFFFFFFFE, v155))
            goto LABEL_145;
        }
        else
        {
          __clrex();
        }
      }
      WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v155, 0, a3, a4, a5, a6, a7, a8);
      v75 = v249;
    }
LABEL_145:
    if (v75 == 2)
    {
      if (v215)
      {
        v158 = 2 * v215;
        v159 = (unsigned __int16 *)v238;
        do
        {
          v160 = *v159++;
          JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)1,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::JSDestructibleObjectDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::JSDestructibleObjectDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v226, v160);
          v158 -= 2;
        }
        while (v158);
      }
      JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)0,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v219);
    }
    if (v250[0] == 1)
    {
      v107 = v242;
      if (v242)
      {
        v108 = v243;
        v109 = v246;
        v110 = *(_QWORD *)(v242 + 8) ^ v246;
        *(_QWORD *)v8 = v242;
        *((_QWORD *)v8 + 1) = v107 + HIDWORD(v110);
        v111 = v107 + (int)v110;
      }
      else
      {
        v109 = 0;
        v108 = 0;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
        v111 = 1;
      }
      *((_QWORD *)v8 + 2) = v111;
      *((_QWORD *)v8 + 3) = v109;
      *((_DWORD *)v8 + 8) = v108;
    }
    goto LABEL_150;
  }
  if (v22 != v21)
  {
    JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)0,JSC::JSDestructibleObjectDestroyFunc>((int *)a2, v14, 0, a4, a5, a6, a7, a8);
    return;
  }
  v250[0] = 0;
  v41 = 1;
  v249 = 1;
  v248 = 0;
  v42 = *(_DWORD *)a2;
  v247 = 16 * *(_DWORD *)a2;
  v43 = *(_QWORD *)(v12 + 168);
  v44 = *(_QWORD *)(v12 + 160) ^ (*(_QWORD *)(v12 + 160) << 23);
  v45 = (v43 >> 26) ^ (v44 >> 17) ^ v43 ^ v44;
  *(_QWORD *)(v12 + 160) = v43;
  *(_QWORD *)(v12 + 168) = v45;
  v246 = v45 + v43;
  v244 = &v218;
  v245 = v12;
  v243 = 0;
  v242 = 0;
  v241 = 0;
  v240 = 0;
  v239 = 0;
  v226 = v13;
  v227 = &v249;
  v228 = &v244;
  v229 = v250;
  v230 = &v248;
  v231 = &v247;
  v232 = a2;
  v233 = &v240;
  v234 = &v241;
  v235 = &v242;
  v236 = (uint64_t *)&v246;
  v237 = &v243;
  v219 = v250;
  v220 = &v241;
  v221 = v13;
  v222 = &v240;
  v223 = &v242;
  v224 = (uint64_t *)&v246;
  v225 = &v243;
  v46 = 1024 - v42;
  if (1024 - v42 < *((_DWORD *)a2 + 1))
  {
    v48 = 0;
    v50 = 1;
  }
  else
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 1;
    do
    {
      if (v46 >= 0x400)
        goto LABEL_394;
      v51 = v46;
      if (((*(_QWORD *)(v13 + 40 + (((unint64_t)v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v46) & 1) != 0)
      {
        v50 = 0;
      }
      else if (v249 == 2)
      {
        v239 = v48 + 1;
        if (v48 >= 0x400)
          goto LABEL_394;
        *((_WORD *)v238 + v48++) = v46;
      }
      else
      {
        v52 = v13 + 16 * v46;
        if (v249 && *(_DWORD *)v52)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)(v52 + 16) + 48))(v13 + 16 * v46);
          *(_DWORD *)v52 = 0;
          *(_DWORD *)(v52 + 8) = 1;
          v47 = v250[0];
          v49 = v250[0];
        }
        if (v49 == 1)
        {
          if (v248 == 1 && v247 >= 8)
            memset_pattern16((void *)(v13 + 16 * v51), &unk_1991567C0, v247 & 0xFFFFFFF8);
          v170 = *(unsigned int *)a2;
          v171 = v241;
          if (v170 + v51 < v240)
          {
            v172 = v13 + 16 * v240;
            if (v242)
              v173 = (int)v242 - (int)v172;
            else
              v173 = 1;
            *(_QWORD *)(v172 + 8) = (v173 | (v241 << 36)) ^ v246;
            v243 += 16 * v171;
            v242 = v172;
            v171 = 0;
          }
          v241 = v171 + v170;
          v240 = v51;
          v49 = 1;
        }
      }
      v46 = v51 - *(_DWORD *)a2;
    }
    while (v46 >= *((_DWORD *)a2 + 1));
    v41 = v249;
    if (v249 != 2 && v47 == 1 && v241)
    {
      v167 = 16 * v241;
      v168 = v13 + 16 * v240;
      v169 = ((int)v242 - (int)v168) | (unint64_t)(v241 << 36);
      if (!v242)
        v169 = (v241 << 36) | 1;
      *(_QWORD *)(v168 + 8) = v169 ^ v246;
      v243 += v167;
      v242 = v168;
    }
  }
  if (*(_BYTE *)(*((_QWORD *)a2 + 10) + 445))
  {
    v161 = (unsigned int *)(v13 + 24);
    while (1)
    {
      v162 = *v161;
      if ((*v161 & 3) != 1)
        break;
      v163 = __ldxr(v161);
      if (v163 == v162)
      {
        if (!__stxr(v162 & 0xFFFFFFFE, v161))
          goto LABEL_56;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned int,1u,2u,WTF::CountingLock::LockHooks>::unlockSlow(v161, 0, a3, a4, a5, a6, a7, a8);
    v41 = v249;
  }
LABEL_56:
  if (v41 == 2)
  {
    if (v48)
    {
      v164 = 2 * v48;
      v165 = (unsigned __int16 *)v238;
      do
      {
        v166 = *v165++;
        JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::JSDestructibleObjectDestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::JSDestructibleObjectDestroyFunc const&)::{lambda(unsigned long)#1}::operator()((uint64_t)&v226, v166);
        v164 -= 2;
      }
      while (v164);
    }
    JSC::MarkedBlock::Handle::specializedSweep<true,(JSC::MarkedBlock::Handle::EmptyMode)1,(JSC::MarkedBlock::Handle::SweepMode)0,(JSC::MarkedBlock::Handle::SweepDestructionMode)1,(JSC::MarkedBlock::Handle::ScribbleMode)0,(JSC::MarkedBlock::Handle::NewlyAllocatedMode)1,(JSC::MarkedBlock::Handle::MarksMode)1,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc>(JSC::FreeList *,JSC::MarkedBlock::Handle::EmptyMode,JSC::MarkedBlock::Handle::SweepMode,JSC::MarkedBlock::Handle::SweepDestructionMode,JSC::MarkedBlock::Handle::ScribbleMode,JSC::MarkedBlock::Handle::NewlyAllocatedMode,JSC::MarkedBlock::Handle::MarksMode,JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc const&)::{lambda(void)#1}::operator()((uint64_t)&v219);
  }
  if (v250[0] == 1)
  {
    MEMORY[8] = 0;
    MEMORY[0] = 0;
    MEMORY[0x10] = 1;
    MEMORY[0x18] = 0;
    MEMORY[0x20] = 0;
  }
  v53 = (unsigned __int8 *)(*((_QWORD *)a2 + 3) + 56);
  if (__ldaxr(v53))
  {
    __clrex();
LABEL_61:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v53);
    goto LABEL_62;
  }
  if (__stxr(1u, v53))
    goto LABEL_61;
LABEL_62:
  v55 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
  v56 = v55 + 40 * (*((_DWORD *)a2 + 3) >> 5);
  *(_DWORD *)(v56 + 24) &= ~(1 << *((_DWORD *)a2 + 3));
  v57 = v55 + 40 * (*((_DWORD *)a2 + 3) >> 5);
  *(_DWORD *)(v57 + 16) &= ~(1 << *((_DWORD *)a2 + 3));
  v58 = v55 + 40 * (*((_DWORD *)a2 + 3) >> 5);
  *(_DWORD *)(v58 + 4) &= ~(1 << *((_DWORD *)a2 + 3));
  if (v250[0] == 1)
  {
LABEL_154:
    *((_BYTE *)a2 + 10) = 1;
    goto LABEL_64;
  }
  if ((v50 & 1) != 0)
    goto LABEL_174;
LABEL_64:
  v59 = __ldxr(v53);
  if (v59 == 1)
  {
    if (!__stlxr(0, v53))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v53, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSDestructibleObjectHeapCellType::destroy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 16) + 48))(a3);
}

void JSC::JSFinalizationRegistry::destroy(JSC::JSFinalizationRegistry *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 5);
  if (v10)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    v12 = *(unsigned int *)(v11 - 4);
    if ((_DWORD)v12)
    {
      v13 = v11 + 8;
      do
      {
        if (*(_QWORD *)(v13 - 8) != -1)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
          {
            *(_QWORD *)v13 = 0;
            *(_DWORD *)(v13 + 8) = 0;
            WTF::fastFree(v14, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v13 += 24;
        --v12;
      }
      while (v12);
    }
    WTF::fastFree(v11 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_QWORD *)this + 3);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v16)
    {
      v17 = v15 + 8;
      do
      {
        if (*(_QWORD *)(v17 - 8) != -1)
        {
          v18 = *(_QWORD *)v17;
          if (*(_QWORD *)v17)
          {
            *(_QWORD *)v17 = 0;
            *(_DWORD *)(v17 + 8) = 0;
            WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          }
        }
        v17 += 24;
        --v16;
      }
      while (v16);
    }
    WTF::fastFree(v15 - 16, a2, a3, a4, a5, a6, a7, a8);
  }
}

void JSC::JSFinalizationRegistry::visitChildren(JSC::JSFinalizationRegistry *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSFinalizationRegistry *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  JSC::JSFinalizationRegistry *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  JSC::JSFinalizationRegistry *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  int v44;
  JSC::JSFinalizationRegistry *v45;
  JSC::JSFinalizationRegistry *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  int v58;
  JSC::JSFinalizationRegistry *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t i;
  unint64_t v66;
  int v68;
  JSC::JSFinalizationRegistry *v69;
  JSC::JSFinalizationRegistry *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  JSC::JSFinalizationRegistry *v81;
  JSC::JSFinalizationRegistry *v82;

  JSC::JSInternalFieldObjectImpl<1u>::visitChildren(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v16 = this;
  v17 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v18 = *v17;
    if ((v18 & 0x40) != 0)
      break;
    v19 = __ldaxr(v17);
    if (v19 == v18)
    {
      if (!__stxr(v18 | 0x40, v17))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  v20 = v16;
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v17);
  v16 = v20;
LABEL_8:
  v21 = *((_QWORD *)v16 + 3);
  if (v21)
  {
    v22 = *(unsigned int *)(v21 - 4);
    v23 = v21 + 24 * v22;
    if (*(_DWORD *)(v21 - 12))
    {
      v24 = *((_QWORD *)v16 + 3);
      if ((_DWORD)v22)
      {
        v25 = 24 * v22;
        v24 = *((_QWORD *)v16 + 3);
        while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
        {
          v24 += 24;
          v25 -= 24;
          if (!v25)
          {
            v24 = v23;
            goto LABEL_15;
          }
        }
      }
      goto LABEL_15;
    }
    v24 = v21 + 24 * v22;
  }
  else
  {
    v24 = 0;
    LODWORD(v22) = 0;
  }
  v23 = v21 + 24 * v22;
  if (v21)
  {
LABEL_15:
    v26 = v21 + 24 * *(unsigned int *)(v21 - 4);
    goto LABEL_20;
  }
  v26 = 0;
LABEL_20:
  if (v26 != v24)
  {
    while (1)
    {
      v27 = *(unsigned int *)(v24 + 20);
      if ((_DWORD)v27)
        break;
LABEL_36:
      v37 = v24 + 24;
      v24 = v23;
      if (v37 != v23)
      {
        v24 = v37;
        while ((unint64_t)(*(_QWORD *)v24 + 1) <= 1)
        {
          v24 += 24;
          if (v24 == v23)
          {
            v24 = v23;
            break;
          }
        }
      }
      if (v24 == v26)
        goto LABEL_42;
    }
    v28 = 16 * v27;
    v29 = (unint64_t *)(*(_QWORD *)(v24 + 8) + 8);
    while (1)
    {
      v31 = *v29;
      v29 += 2;
      v30 = v31;
      if ((v31 & 0xFFFE000000000002) != 0 || v30 == 0)
        goto LABEL_32;
      if ((v30 & 8) != 0)
      {
        if ((*(_BYTE *)(v30 - 79) & 1) == 0)
          goto LABEL_35;
      }
      else
      {
        v33 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v30 & 0xFFFFFFFFFFFFC000 | 0x20) != v33)
        {
          v79 = v26;
          v81 = v16;
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v30 & 0xFFFFFFFFFFFFC000), v33, v10, v11, v12, v13, v14, v15);
          v26 = v79;
          v16 = v81;
        }
        if (((*(_QWORD *)((v30 & 0xFFFFFFFFFFFFC000) + 8 * ((v30 >> 10) & 0xF) + 0x28) >> (v30 >> 4)) & 1) == 0)
        {
LABEL_35:
          v34 = v16;
          v35 = v30;
          v36 = v26;
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v35, 0, v11, v12, v13, v14, v15);
          v26 = v36;
          v16 = v34;
          goto LABEL_32;
        }
      }
      if (*((_QWORD *)a2 + 21))
        goto LABEL_35;
LABEL_32:
      v28 -= 16;
      if (!v28)
        goto LABEL_36;
    }
  }
LABEL_42:
  v38 = *((unsigned int *)v16 + 13);
  if ((_DWORD)v38)
  {
    v39 = 16 * v38;
    v40 = (unint64_t *)(*((_QWORD *)v16 + 5) + 8);
    do
    {
      v42 = *v40;
      v40 += 2;
      v41 = v42;
      if ((v42 & 0xFFFE000000000002) != 0 || v41 == 0)
        goto LABEL_53;
      if ((v41 & 8) != 0)
      {
        if ((*(_BYTE *)(v41 - 79) & 1) == 0)
          goto LABEL_56;
      }
      else
      {
        v44 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v41 & 0xFFFFFFFFFFFFC000 | 0x20) != v44)
        {
          v46 = v16;
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v41 & 0xFFFFFFFFFFFFC000), v44, v10, v11, v12, v13, v14, v15);
          v16 = v46;
        }
        if (((*(_QWORD *)((v41 & 0xFFFFFFFFFFFFC000) + 8 * ((v41 >> 10) & 0xF) + 0x28) >> (v41 >> 4)) & 1) == 0)
        {
LABEL_56:
          v45 = v16;
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v41, 0, v11, v12, v13, v14, v15);
          v16 = v45;
          goto LABEL_53;
        }
      }
      if (*((_QWORD *)a2 + 21))
        goto LABEL_56;
LABEL_53:
      v39 -= 16;
    }
    while (v39);
  }
  v47 = *((_QWORD *)v16 + 4);
  if (v47)
  {
    v48 = *(unsigned int *)(v47 - 4);
    v49 = v47 + 24 * v48;
    if (*(_DWORD *)(v47 - 12))
    {
      v50 = *((_QWORD *)v16 + 4);
      if ((_DWORD)v48)
      {
        v51 = 24 * v48;
        v50 = *((_QWORD *)v16 + 4);
        while ((unint64_t)(*(_QWORD *)v50 + 1) <= 1)
        {
          v50 += 24;
          v51 -= 24;
          if (!v51)
          {
            v50 = v49;
            goto LABEL_64;
          }
        }
      }
      goto LABEL_64;
    }
    v50 = v47 + 24 * v48;
  }
  else
  {
    v50 = 0;
    LODWORD(v48) = 0;
  }
  v49 = v47 + 24 * v48;
  if (v47)
  {
LABEL_64:
    v52 = v47 + 24 * *(unsigned int *)(v47 - 4);
    goto LABEL_69;
  }
  v52 = 0;
LABEL_69:
  if (v52 != v50)
  {
    while (1)
    {
      v53 = *(unsigned int *)(v50 + 20);
      if ((_DWORD)v53)
        break;
LABEL_85:
      v62 = v50 + 24;
      v50 = v49;
      if (v62 != v49)
      {
        v50 = v62;
        while ((unint64_t)(*(_QWORD *)v50 + 1) <= 1)
        {
          v50 += 24;
          if (v50 == v49)
          {
            v50 = v49;
            break;
          }
        }
      }
      if (v50 == v52)
        goto LABEL_91;
    }
    v54 = *(unint64_t **)(v50 + 8);
    v55 = 8 * v53;
    while (1)
    {
      v56 = *v54;
      if ((*v54 & 0xFFFE000000000002) != 0 || v56 == 0)
        goto LABEL_81;
      if ((v56 & 8) != 0)
      {
        if ((*(_BYTE *)(v56 - 79) & 1) == 0)
          goto LABEL_84;
      }
      else
      {
        v58 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v56 & 0xFFFFFFFFFFFFC000 | 0x20) != v58)
        {
          v80 = v52;
          v82 = v16;
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v56 & 0xFFFFFFFFFFFFC000), v58, v10, v11, v12, v13, v14, v15);
          v52 = v80;
          v16 = v82;
        }
        if (((*(_QWORD *)((v56 & 0xFFFFFFFFFFFFC000) + 8 * ((v56 >> 10) & 0xF) + 0x28) >> (v56 >> 4)) & 1) == 0)
        {
LABEL_84:
          v59 = v16;
          v60 = v56;
          v61 = v52;
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v60, 0, v11, v12, v13, v14, v15);
          v52 = v61;
          v16 = v59;
          goto LABEL_81;
        }
      }
      if (*((_QWORD *)a2 + 21))
        goto LABEL_84;
LABEL_81:
      ++v54;
      v55 -= 8;
      if (!v55)
        goto LABEL_85;
    }
  }
LABEL_91:
  v63 = *((unsigned int *)v16 + 17);
  if ((_DWORD)v63)
  {
    v64 = (unint64_t *)*((_QWORD *)v16 + 7);
    for (i = 8 * v63; i; i -= 8)
    {
      v66 = *v64;
      if ((*v64 & 0xFFFE000000000002) != 0 || v66 == 0)
        goto LABEL_102;
      if ((v66 & 8) != 0)
      {
        if ((*(_BYTE *)(v66 - 79) & 1) == 0)
          goto LABEL_105;
      }
      else
      {
        v68 = *((_DWORD *)a2 + 33);
        if (*(_DWORD *)(v66 & 0xFFFFFFFFFFFFC000 | 0x20) != v68)
        {
          v70 = v16;
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v66 & 0xFFFFFFFFFFFFC000), v68, v10, v11, v12, v13, v14, v15);
          v16 = v70;
        }
        if (((*(_QWORD *)((v66 & 0xFFFFFFFFFFFFC000) + 8 * ((v66 >> 10) & 0xF) + 0x28) >> (v66 >> 4)) & 1) == 0)
        {
LABEL_105:
          v69 = v16;
          JSC::SlotVisitor::appendSlow((uint64_t)a2, v66, 0, v11, v12, v13, v14, v15);
          v16 = v69;
          goto LABEL_102;
        }
      }
      if (*((_QWORD *)a2 + 21))
        goto LABEL_105;
LABEL_102:
      ++v64;
    }
  }
  v71 = *((_QWORD *)v16 + 4);
  if (v71)
    v71 = *(unsigned int *)(v71 - 4);
  v72 = *((_QWORD *)v16 + 3);
  if (v72)
    v72 = *(unsigned int *)(v72 - 4);
  v73 = 24 * (v72 + v71) + 16 * (*((unsigned int *)v16 + 16) + (unint64_t)*((unsigned int *)v16 + 12));
  v74 = (unint64_t *)(*((_QWORD *)a2 + 10) + 344);
  do
  {
    while (1)
    {
      v75 = *v74 + v73;
      if (__CFADD__(*v74, v73))
        v75 = -1;
      v76 = __ldxr(v74);
      if (v76 == *v74)
        break;
      __clrex();
    }
  }
  while (__stxr(v75, v74));
  while (1)
  {
    v77 = *v17;
    if ((v77 & 0xC0) != 0x40)
      break;
    v78 = __ldxr(v17);
    if (v78 == v77)
    {
      if (!__stxr(v77 & 0xBF, v17))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v17, 0, v10, v11, v12, v13, v14, v15);
}

void JSC::JSFinalizationRegistry::visitChildren(JSC::JSFinalizationRegistry *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  _QWORD v51[2];
  uint64_t v52;
  char v53;
  _QWORD v54[2];
  _QWORD *v55;
  char v56;

  v51[0] = a2;
  v51[1] = this;
  v53 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v52 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1989A6FE4);
  }
  v54[0] = a2;
  v54[1] = this;
  v56 = 0;
  v55 = v51;
  *((_QWORD *)a2 + 11) = v54;
  JSC::JSObject::visitChildren(this, a2, a3);
  if ((*((_QWORD *)this + 2) & 0xFFFE000000000002) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  *(_QWORD *)(v54[0] + 88) = v55;
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_12;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_12:
  v15 = *((_QWORD *)this + 3);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    v17 = v15 + 24 * v16;
    if (*(_DWORD *)(v15 - 12))
    {
      v18 = *((_QWORD *)this + 3);
      if ((_DWORD)v16)
      {
        v19 = 24 * v16;
        v18 = *((_QWORD *)this + 3);
        while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
        {
          v18 += 24;
          v19 -= 24;
          if (!v19)
          {
            v18 = v17;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v18 = v15 + 24 * v16;
  }
  else
  {
    v18 = 0;
    LODWORD(v16) = 0;
  }
  v17 = v15 + 24 * v16;
  if (v15)
  {
LABEL_19:
    v20 = v15 + 24 * *(unsigned int *)(v15 - 4);
    goto LABEL_24;
  }
  v20 = 0;
LABEL_24:
  while (v18 != v20)
  {
    v21 = *(unsigned int *)(v18 + 20);
    if ((_DWORD)v21)
    {
      v22 = 16 * v21;
      v23 = (uint64_t *)(*(_QWORD *)(v18 + 8) + 8);
      do
      {
        v24 = *v23;
        v23 += 2;
        if ((v24 & 0xFFFE000000000002) == 0)
          (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
        v22 -= 16;
      }
      while (v22);
    }
    v25 = v18 + 24;
    v18 = v17;
    if (v25 != v17)
    {
      v18 = v25;
      while ((unint64_t)(*(_QWORD *)v18 + 1) <= 1)
      {
        v18 += 24;
        if (v18 == v17)
        {
          v18 = v17;
          break;
        }
      }
    }
  }
  v26 = *((unsigned int *)this + 13);
  if ((_DWORD)v26)
  {
    v27 = 16 * v26;
    v28 = (uint64_t *)(*((_QWORD *)this + 5) + 8);
    do
    {
      v29 = *v28;
      v28 += 2;
      if ((v29 & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
      v27 -= 16;
    }
    while (v27);
  }
  v30 = *((_QWORD *)this + 4);
  if (v30)
  {
    v31 = *(unsigned int *)(v30 - 4);
    v32 = v30 + 24 * v31;
    if (*(_DWORD *)(v30 - 12))
    {
      v33 = *((_QWORD *)this + 4);
      if ((_DWORD)v31)
      {
        v34 = 24 * v31;
        v33 = *((_QWORD *)this + 4);
        while ((unint64_t)(*(_QWORD *)v33 + 1) <= 1)
        {
          v33 += 24;
          v34 -= 24;
          if (!v34)
          {
            v33 = v32;
            goto LABEL_48;
          }
        }
      }
      goto LABEL_48;
    }
    v33 = v30 + 24 * v31;
  }
  else
  {
    v33 = 0;
    LODWORD(v31) = 0;
  }
  v32 = v30 + 24 * v31;
  if (v30)
  {
LABEL_48:
    v35 = v30 + 24 * *(unsigned int *)(v30 - 4);
    goto LABEL_53;
  }
  v35 = 0;
LABEL_53:
  while (v33 != v35)
  {
    v36 = *(unsigned int *)(v33 + 20);
    if ((_DWORD)v36)
    {
      v37 = *(_QWORD **)(v33 + 8);
      v38 = 8 * v36;
      do
      {
        if ((*v37 & 0xFFFE000000000002) == 0)
          (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
        ++v37;
        v38 -= 8;
      }
      while (v38);
    }
    v39 = v33 + 24;
    v33 = v32;
    if (v39 != v32)
    {
      v33 = v39;
      while ((unint64_t)(*(_QWORD *)v33 + 1) <= 1)
      {
        v33 += 24;
        if (v33 == v32)
        {
          v33 = v32;
          break;
        }
      }
    }
  }
  v40 = *((unsigned int *)this + 17);
  if ((_DWORD)v40)
  {
    v41 = (_QWORD *)*((_QWORD *)this + 7);
    v42 = 8 * v40;
    do
    {
      if ((*v41 & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
      ++v41;
      v42 -= 8;
    }
    while (v42);
  }
  v43 = *((_QWORD *)this + 4);
  if (v43)
    v43 = *(unsigned int *)(v43 - 4);
  v44 = *((_QWORD *)this + 3);
  if (v44)
    v44 = *(unsigned int *)(v44 - 4);
  v45 = 24 * (v44 + v43) + 16 * (*((unsigned int *)this + 16) + (unint64_t)*((unsigned int *)this + 12));
  v46 = (unint64_t *)(*((_QWORD *)a2 + 10) + 344);
  do
  {
    while (1)
    {
      v47 = *v46 + v45;
      if (__CFADD__(*v46, v45))
        v47 = -1;
      v48 = __ldxr(v46);
      if (v48 == *v46)
        break;
      __clrex();
    }
  }
  while (__stxr(v47, v46));
  while (1)
  {
    v49 = *v12;
    if ((v49 & 0xC0) != 0x40)
      break;
    v50 = __ldxr(v12);
    if (v50 == v49)
    {
      if (!__stxr(v49 & 0xBF, v12))
        goto LABEL_89;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v6, v7, v8, v9, v10, v11);
LABEL_89:
  *(_QWORD *)(v51[0] + 88) = v52;
}

unint64_t JSC::JSFinalizationRegistry::create(JSC::JSFinalizationRegistry *this, JSC::VM *a2, JSC::Structure *a3, JSC::JSObject *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  unint64_t SlowCase;
  int v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v11 = (_QWORD *)*((_QWORD *)this + 5057);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::finalizationRegistrySpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = v11[3];
  if (SlowCase < v11[4])
    goto LABEL_4;
  SlowCase = v11[5];
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ v11[6];
    v11[4] = SlowCase + HIDWORD(v16);
    v11[5] = SlowCase + (int)v16;
LABEL_4:
    v11[3] = SlowCase + 80;
    goto LABEL_5;
  }
  v17 = (uint64_t)v11;
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v17, (uint64_t)this + 192, 80, 0, 0, v18, v19, v20);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v13 = *((_DWORD *)a2 + 2);
  *(_DWORD *)SlowCase = (unint64_t)a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v13;
  *(_BYTE *)(SlowCase + 72) = 0;
  *(_OWORD *)(SlowCase + 56) = 0u;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  v14 = *((_QWORD *)a2 + 5);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_QWORD *)(SlowCase + 16) = a3;
  (*(void (**)(void))(*(_QWORD *)(v14 + 3280) + 96))();
  return SlowCase;
}

uint64_t JSC::JSFinalizationRegistry::finishCreation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(a1 + 16) = a4;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 3280) + 96))(a3);
}

void JSC::JSFinalizationRegistry::finalizeUnconditionally(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t *v41;
  uint64_t v42;
  unsigned int *v43;
  char *v44;
  uint64_t v45;
  int v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  _OWORD *v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  __int128 v87;
  char *v88;
  BOOL v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v98;
  unsigned int v99;
  unint64_t v100;
  int v101;
  double v102;
  double v103;
  double v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  _QWORD *v125;
  int v126;
  int v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  int v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int *v135;
  uint64_t *v136;
  _DWORD *v137;
  unsigned int *v138;
  char **v139;
  char v140;
  void *v141;
  uint64_t v143[2];

  v8 = a1;
  v9 = (unsigned __int8 *)(a1 + 4);
  v141 = (void *)a2;
  while (1)
  {
    v10 = *v9;
    if ((v10 & 0x40) != 0)
      break;
    v11 = __ldaxr(v9);
    if (v11 == v10)
    {
      if (!__stxr(v10 | 0x40, v9))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
  a2 = (uint64_t)v141;
  v8 = a1;
LABEL_8:
  v12 = *(char **)(v8 + 40);
  v139 = (char **)(v8 + 40);
  v13 = *(unsigned int *)(v8 + 52);
  v138 = (unsigned int *)(v8 + 52);
  v14 = &v12[16 * v13];
  v15 = 0;
  if ((_DWORD)v13)
  {
    v16 = 0;
    v17 = (uint64_t *)(v8 + 56);
    v18 = &v12[16 * v13];
    v19 = v18;
    while (1)
    {
      v20 = *(_QWORD *)v12;
      if ((*(_QWORD *)v12 & 8) != 0)
      {
        if ((*(_BYTE *)(v20 - 79) & 1) == 0)
          goto LABEL_13;
      }
      else if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 432)
             || ((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) == 0)
      {
LABEL_13:
        a3 = v12 + 8;
        v21 = *(unsigned int *)(v8 + 68);
        if ((_DWORD)v21 == *(_DWORD *)(v8 + 64))
        {
          v22 = WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v17, v21 + 1, (unint64_t)a3);
          a2 = (uint64_t)v141;
          v8 = a1;
          a3 = (_QWORD *)v22;
          v21 = *(unsigned int *)(a1 + 68);
          v23 = *(_QWORD *)(a1 + 56);
        }
        else
        {
          v23 = *v17;
        }
        *(_QWORD *)(v23 + 8 * v21) = *a3;
        ++*(_DWORD *)(v8 + 68);
        v24 = v12;
        if (v19 != (char *)(*(_QWORD *)(v8 + 40) + 16 * *(unsigned int *)(v8 + 52)))
        {
          if (v18 == v12)
          {
            v24 = v19;
          }
          else
          {
            if (v18 <= v19)
            {
              v29 = 0;
              v28 = (v12 - v18) >> 4;
              do
              {
                *(_OWORD *)&v19[((v12 - v18) & 0xFFFFFFFFFFFFFFF0) - 16 + v29] = *(_OWORD *)&v12[v29 - 16];
                v29 -= 16;
              }
              while (&v12[v29] != v18);
            }
            else
            {
              v25 = v19;
              v26 = v18;
              do
              {
                v27 = *(_OWORD *)v26;
                v26 += 16;
                *(_OWORD *)v25 = v27;
                v25 += 16;
              }
              while (v26 != v12);
              v28 = (v12 - v18) >> 4;
            }
            v24 = &v19[16 * v28];
          }
        }
        v18 = v12 + 16;
        ++v16;
        v15 = 1;
        v19 = v24;
      }
      v12 += 16;
      if (v12 >= v14)
      {
        v12 = *v139;
        v30 = *v138;
        v14 = v19;
        goto LABEL_32;
      }
    }
  }
  v30 = 0;
  v16 = 0;
  v18 = v14;
LABEL_32:
  v31 = &v12[16 * v30];
  if (v18 != v31)
  {
    if (v18 <= v14)
    {
      v33 = &v14[((v31 - v18) & 0xFFFFFFFFFFFFFFF0) - 16];
      do
      {
        *(_OWORD *)v33 = *((_OWORD *)v31 - 1);
        v33 -= 16;
        v31 -= 16;
      }
      while (v31 != v18);
    }
    else
    {
      do
      {
        v32 = *(_OWORD *)v18;
        v18 += 16;
        *(_OWORD *)v14 = v32;
        v14 += 16;
      }
      while (v18 != v31);
    }
  }
  v34 = *(_QWORD *)(v8 + 24);
  *(_DWORD *)(v8 + 52) -= v16;
  if (!v34)
    goto LABEL_147;
  v35 = *(unsigned int *)(v34 - 4);
  if (!(_DWORD)v35)
    goto LABEL_147;
  v36 = 0;
  v135 = (unsigned int *)(v8 + 68);
  v136 = (uint64_t *)(v8 + 56);
  v128 = (uint64_t *)(v8 + 32);
  v129 = (uint64_t *)(v8 + 24);
  v130 = v34;
  do
  {
    while (1)
    {
      v37 = --v35;
      v38 = *(_QWORD *)(v34 + 24 * v35);
      if (v38 + 1 >= 2)
        break;
LABEL_119:
      if (!v37)
        goto LABEL_125;
    }
    v134 = v35;
    if ((v38 & 8) != 0)
    {
      LOBYTE(v39) = *(_BYTE *)(v38 - 79) & 1;
    }
    else if (*(_DWORD *)(v38 & 0xFFFFFFFFFFFFC000 | 0x20) == *(_DWORD *)(a2 + 432))
    {
      v39 = (*(_QWORD *)((v38 & 0xFFFFFFFFFFFFC000) + 8 * ((v38 >> 10) & 0xF) + 0x28) >> (v38 >> 4)) & 1;
    }
    else
    {
      LOBYTE(v39) = 0;
    }
    v132 = (uint64_t *)(v34 + 24 * v35);
    v133 = v35;
    v41 = (unint64_t *)(v132 + 1);
    v40 = (char *)v132[1];
    v43 = (unsigned int *)v132 + 5;
    v42 = *((unsigned int *)v132 + 5);
    v44 = &v40[16 * v42];
    v137 = (_DWORD *)v132 + 5;
    if ((_DWORD)v42)
    {
      v131 = v36;
      v45 = 0;
      v46 = 0;
      v47 = &v40[16 * v42];
      v48 = v47;
      v140 = v39;
      while (1)
      {
        v49 = *(_QWORD *)v40;
        if ((*(_QWORD *)v40 & 8) != 0)
        {
          if ((*(_BYTE *)(v49 - 79) & 1) == 0)
            goto LABEL_55;
        }
        else if (*(_DWORD *)(v49 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 432)
               || ((*(_QWORD *)((v49 & 0xFFFFFFFFFFFFC000) + 8 * ((v49 >> 10) & 0xF) + 0x28) >> (v49 >> 4)) & 1) == 0)
        {
LABEL_55:
          if ((v39 & 1) != 0)
          {
            if (v45)
              goto LABEL_57;
            v66 = *v128;
            if (*v128
              || (WTF::HashTable<JSC::B3::Variable *,WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Variable *>>::rehash(v128, 8uLL, 0, a4, a5, a6, a7, a8), LOBYTE(v39) = v140, a2 = (uint64_t)v141, v8 = a1, (v66 = *v128) != 0))
            {
              v67 = *(_DWORD *)(v66 - 8);
            }
            else
            {
              v67 = 0;
            }
            v68 = *v132;
            v69 = ~(*v132 << 32) + *v132;
            v70 = (v69 ^ (v69 >> 22)) + ~((v69 ^ (v69 >> 22)) << 13);
            v71 = (9 * (v70 ^ (v70 >> 8))) ^ ((9 * (v70 ^ (v70 >> 8))) >> 15);
            v72 = v67 & (((v71 + ~(v71 << 27)) >> 31) ^ (v71 + ~((_DWORD)v71 << 27)));
            v73 = (_QWORD *)(v66 + 24 * v72);
            v74 = *v73;
            if (*v73)
            {
              v75 = 0;
              v76 = 1;
              while (v74 != v68)
              {
                if (v74 == -1)
                  v75 = v73;
                v72 = (v72 + v76) & v67;
                v73 = (_QWORD *)(v66 + 24 * v72);
                v74 = *v73;
                ++v76;
                if (!*v73)
                {
                  if (v75)
                  {
                    *v75 = 0;
                    v75[1] = 0;
                    v75[2] = 0;
                    --*(_DWORD *)(*v128 - 16);
                    v68 = *v132;
                    v73 = v75;
                  }
                  goto LABEL_89;
                }
              }
              goto LABEL_104;
            }
LABEL_89:
            *v73 = v68;
            v77 = v73[1];
            if (v77)
            {
              v73[1] = 0;
              *((_DWORD *)v73 + 4) = 0;
              WTF::fastFree(v77, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              LOBYTE(v39) = v140;
              a2 = (uint64_t)v141;
              v8 = a1;
            }
            v73[1] = 0;
            v73[2] = 0;
            v78 = *v128;
            if (*v128)
              v79 = *(_DWORD *)(v78 - 12) + 1;
            else
              v79 = 1;
            *(_DWORD *)(v78 - 12) = v79;
            v80 = *v128;
            if (*v128)
              v81 = *(_DWORD *)(v80 - 12);
            else
              v81 = 0;
            v82 = (*(_DWORD *)(v80 - 16) + v81);
            v83 = *(unsigned int *)(v80 - 4);
            if (v83 > 0x400)
            {
              if (v83 <= 2 * v82)
              {
LABEL_100:
                v84 = ((_DWORD)v83 << (6 * *(_DWORD *)(v80 - 12) >= (2 * v83)));
                goto LABEL_103;
              }
            }
            else if (3 * v83 <= 4 * v82)
            {
              if ((_DWORD)v83)
                goto LABEL_100;
              v84 = 8;
LABEL_103:
              v73 = WTF::HashTable<JSC::B3::Variable *,WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Variable *>>::rehash(v128, v84, (uint64_t)v73, a4, a5, a6, a7, a8);
              v8 = a1;
              a2 = (uint64_t)v141;
              LOBYTE(v39) = v140;
            }
LABEL_104:
            v45 = (uint64_t)(v73 + 1);
LABEL_57:
            a3 = v40 + 8;
            v54 = (_DWORD *)(v45 + 12);
            v55 = *(unsigned int *)(v45 + 12);
            if ((_DWORD)v55 == *(_DWORD *)(v45 + 8))
            {
              v56 = WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v45, v55 + 1, (unint64_t)a3);
              LOBYTE(v39) = v140;
              a2 = (uint64_t)v141;
              v8 = a1;
              a3 = (_QWORD *)v56;
              v55 = *(unsigned int *)(v45 + 12);
            }
            v57 = *(_QWORD *)v45;
LABEL_63:
            v59 = (_QWORD *)(v57 + 8 * v55);
          }
          else
          {
            a3 = v40 + 8;
            v55 = *(unsigned int *)(v8 + 68);
            if ((_DWORD)v55 != *(_DWORD *)(v8 + 64))
            {
              v54 = v135;
              v57 = *v136;
              goto LABEL_63;
            }
            v58 = WTF::Vector<WTF::SegmentedVector<JSC::DFG::RegisteredStructureSet,16ul>::Segment *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v136, v55 + 1, (unint64_t)a3);
            LOBYTE(v39) = v140;
            a2 = (uint64_t)v141;
            v8 = a1;
            a3 = (_QWORD *)v58;
            v59 = (_QWORD *)(*v136 + 8 * *v135);
            v54 = v135;
          }
          *v59 = *a3;
          v15 = 1;
LABEL_65:
          ++*v54;
          v60 = v40;
          if (v48 != (char *)(*v41 + 16 * *v43))
          {
            if (v47 == v40)
            {
              v60 = v48;
            }
            else
            {
              if (v47 <= v48)
              {
                v65 = 0;
                v64 = (v40 - v47) >> 4;
                do
                {
                  *(_OWORD *)&v48[((v40 - v47) & 0xFFFFFFFFFFFFFFF0) - 16 + v65] = *(_OWORD *)&v40[v65 - 16];
                  v65 -= 16;
                }
                while (&v40[v65] != v47);
              }
              else
              {
                v61 = v48;
                v62 = v47;
                do
                {
                  v63 = *(_OWORD *)v62;
                  v62 += 16;
                  *(_OWORD *)v61 = v63;
                  v61 += 16;
                }
                while (v62 != v40);
                v64 = (v40 - v47) >> 4;
              }
              v60 = &v48[16 * v64];
            }
          }
          v47 = v40 + 16;
          ++v46;
          v48 = v60;
          goto LABEL_76;
        }
        if ((v39 & 1) == 0)
        {
          v50 = *(unsigned int *)(v8 + 52);
          if ((_DWORD)v50 == *(_DWORD *)(v8 + 48))
          {
            v51 = v41;
            v52 = v15;
            v53 = (_OWORD *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v139, v50 + 1, (unint64_t)v40);
            LOBYTE(v39) = v140;
            v15 = v52;
            v41 = v51;
            v43 = (unsigned int *)v132 + 5;
            a2 = (uint64_t)v141;
            v8 = a1;
            *(_OWORD *)&(*v139)[16 * *v138] = *v53;
            v54 = v138;
          }
          else
          {
            v54 = v138;
            *(_OWORD *)&(*v139)[16 * v50] = *(_OWORD *)v40;
          }
          goto LABEL_65;
        }
LABEL_76:
        v40 += 16;
        if (v40 >= v44)
        {
          v40 = (char *)*v41;
          v85 = *v43;
          v44 = v48;
          v36 = v131;
          goto LABEL_108;
        }
      }
    }
    v85 = 0;
    v46 = 0;
    v47 = v44;
LABEL_108:
    v86 = &v40[16 * v85];
    v35 = v134;
    if (v47 != v86)
    {
      if (v47 <= v44)
      {
        v88 = &v44[((v86 - v47) & 0xFFFFFFFFFFFFFFF0) - 16];
        do
        {
          *(_OWORD *)v88 = *((_OWORD *)v86 - 1);
          v88 -= 16;
          v86 -= 16;
        }
        while (v86 != v47);
      }
      else
      {
        do
        {
          v87 = *(_OWORD *)v47;
          v47 += 16;
          *(_OWORD *)v44 = v87;
          v44 += 16;
        }
        while (v47 != v86);
      }
    }
    v89 = *v137 == v46;
    *v137 -= v46;
    v34 = v130;
    if (v89)
    {
      v37 = v133;
      *v132 = -1;
      v90 = *v41;
      if (*v41)
      {
        *v41 = 0;
        *(_DWORD *)(v130 + 24 * v133 + 16) = 0;
        v91 = v15;
        WTF::fastFree(v90, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v15 = v91;
        a2 = (uint64_t)v141;
        v8 = a1;
      }
      ++v36;
      goto LABEL_119;
    }
  }
  while (v133);
LABEL_125:
  v92 = *v129;
  if (v36)
  {
    *(_DWORD *)(v92 - 16) += v36;
    v93 = *v129;
    if (*v129)
      v94 = *(_DWORD *)(v93 - 12);
    else
      v94 = 0;
    *(_DWORD *)(v93 - 12) = v94 - v36;
    v92 = *v129;
  }
  if (v92)
  {
    v95 = *(_DWORD *)(v92 - 4);
    v96 = *(unsigned int *)(v92 - 12);
    if (v95 >= 9 && 6 * (int)v96 < v95)
    {
      v98 = (v96 - 1) | ((v96 - 1) >> 1) | ((((_DWORD)v96 - 1) | ((v96 - 1) >> 1)) >> 2);
      v99 = v98 | (v98 >> 4) | ((v98 | (v98 >> 4)) >> 8);
      v100 = (v99 | HIWORD(v99)) + 1;
      if (v100 > 0x400)
      {
        if (v100 <= 2 * v96)
        {
LABEL_137:
          LODWORD(v100) = 2 * v100;
          if (v100 <= 0x400)
            goto LABEL_138;
        }
        v101 = v15;
        v102 = (double)v96;
        v103 = (double)v100;
        v104 = 0.416666667;
      }
      else
      {
        if (3 * v100 <= 4 * v96)
          goto LABEL_137;
LABEL_138:
        v101 = v15;
        v102 = (double)v96;
        v103 = (double)v100;
        v104 = 0.604166667;
      }
      if (v103 * v104 <= v102)
        LODWORD(v100) = 2 * v100;
      if (v100 <= 8)
        v105 = 8;
      else
        v105 = v100;
      WTF::HashTable<JSC::B3::Variable *,WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Variable *>>::rehash(v129, v105, 0, a4, a5, a6, a7, a8);
      v8 = a1;
      a2 = (uint64_t)v141;
      LODWORD(v15) = v101;
    }
  }
LABEL_147:
  if (*(_BYTE *)(v8 + 72))
    goto LABEL_172;
  if ((_DWORD)v15)
    goto LABEL_169;
  v106 = *(_QWORD **)(v8 + 32);
  if (!v106)
  {
    v109 = 0;
    LODWORD(v107) = 0;
LABEL_158:
    v108 = &v106[3 * v107];
    goto LABEL_159;
  }
  v107 = *((unsigned int *)v106 - 1);
  v108 = &v106[3 * v107];
  if (!*((_DWORD *)v106 - 3))
  {
    v109 = &v106[3 * v107];
    goto LABEL_158;
  }
  v109 = *(_QWORD **)(v8 + 32);
  if ((_DWORD)v107)
  {
    v110 = 24 * v107;
    v109 = *(_QWORD **)(v8 + 32);
    while ((unint64_t)(*v109 + 1) <= 1)
    {
      v109 += 3;
      v110 -= 24;
      if (!v110)
      {
        v109 = v108;
        break;
      }
    }
  }
LABEL_159:
  v111 = *(unsigned int *)(v8 + 68);
  if (v106)
    v106 += 3 * *((unsigned int *)v106 - 1);
  if (v106 != v109)
  {
    do
    {
      v112 = v108;
      if (v109 + 3 != v108)
      {
        v112 = v109 + 3;
        while ((unint64_t)(*v112 + 1) <= 1)
        {
          v112 += 3;
          if (v112 == v108)
          {
            v112 = v108;
            break;
          }
        }
      }
      v111 += *((unsigned int *)v109 + 5);
      v109 = v112;
    }
    while (v112 != v106);
  }
  if (v111)
  {
LABEL_169:
    v113 = *(_QWORD *)(a2 + 41888);
    v143[0] = 0;
    v143[1] = 0;
    v114 = a2;
    v115 = v8;
    v116 = JSC::DeferredWorkTimer::addPendingWork(v113, a2, (_DWORD *)v8, (uint64_t)v143);
    WTF::Vector<JSC::Weak<JSC::JSCell>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v143, v117, v118, v119, v120, v121, v122, v123);
    v124 = *(_BYTE **)(v114 + 41888);
    v125 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v125 = off_1E35A0748;
    v125[1] = v115;
    v143[0] = (uint64_t)v125;
    JSC::DeferredWorkTimer::scheduleWorkSoon(v124, v116, v143);
    if (v143[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v143[0] + 8))(v143[0]);
    *(_BYTE *)(a1 + 72) = 1;
LABEL_172:
    while (1)
    {
      v126 = *v9;
      if ((v126 & 0xC0) != 0x40)
        break;
      v127 = __ldxr(v9);
      if (v127 == v126)
      {
        if (!__stxr(v126 & 0xBF, v9))
          return;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  else if (v8)
  {
    goto LABEL_172;
  }
}

uint64_t JSC::JSFinalizationRegistry::deadCount(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;

  v1 = *(_QWORD **)(a1 + 32);
  if (!v1)
  {
    v4 = 0;
    LODWORD(v2) = 0;
LABEL_10:
    v3 = &v1[3 * v2];
    goto LABEL_11;
  }
  v2 = *((unsigned int *)v1 - 1);
  v3 = &v1[3 * v2];
  if (!*((_DWORD *)v1 - 3))
  {
    v4 = &v1[3 * v2];
    goto LABEL_10;
  }
  v4 = *(_QWORD **)(a1 + 32);
  if ((_DWORD)v2)
  {
    v5 = 24 * v2;
    v4 = *(_QWORD **)(a1 + 32);
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 3;
      v5 -= 24;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  result = *(unsigned int *)(a1 + 68);
  if (v1)
    v1 += 3 * *((unsigned int *)v1 - 1);
  if (v1 != v4)
  {
    do
    {
      v7 = v3;
      if (v4 + 3 != v3)
      {
        v7 = v4 + 3;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 3;
          if (v7 == v3)
          {
            v7 = v3;
            break;
          }
        }
      }
      result += *((unsigned int *)v4 + 5);
      v4 = v7;
    }
    while (v7 != v1);
  }
  return result;
}

void JSC::JSFinalizationRegistry::registerTarget(unint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  int v43;
  __int128 v44;

  v13 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v14 = *v13;
    if ((v14 & 0x40) != 0)
      break;
    v15 = __ldaxr(v13);
    if (v15 == v14)
    {
      if (!__stxr(v14 | 0x40, v13))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  *(_QWORD *)&v44 = a3;
  *((_QWORD *)&v44 + 1) = a4;
  if (a5 == 10)
  {
    v17 = (_DWORD *)(a1 + 52);
    v16 = *(unsigned int *)(a1 + 52);
    goto LABEL_38;
  }
  if ((a5 & 0xFFFE000000000002) != 0)
  {
    __break(0xC471u);
    return;
  }
  v19 = (uint64_t *)(a1 + 24);
  v18 = *(_QWORD *)(a1 + 24);
  if (v18
    || (WTF::HashTable<JSC::B3::Variable *,WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Variable *>>::rehash((uint64_t *)(a1 + 24), 8uLL, 0, a4, a5, a6, a7, a8), (v18 = *v19) != 0))
  {
    v20 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    v20 = 0;
  }
  v21 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
  v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
  v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
  v24 = v20 & ((v23 >> 31) ^ v23);
  v25 = (uint64_t *)(v18 + 24 * v24);
  v26 = *v25;
  if (*v25)
  {
    v27 = 0;
    v28 = 1;
    while (v26 != a5)
    {
      if (v26 == -1)
        v27 = v25;
      v24 = (v24 + v28) & v20;
      v25 = (uint64_t *)(v18 + 24 * v24);
      v26 = *v25;
      ++v28;
      if (!*v25)
      {
        if (v27)
        {
          *v27 = 0;
          v27[1] = 0;
          v27[2] = 0;
          --*(_DWORD *)(*v19 - 16);
          v25 = v27;
        }
        goto LABEL_22;
      }
    }
    goto LABEL_37;
  }
LABEL_22:
  *v25 = a5;
  v29 = v25[1];
  if (v29)
  {
    v25[1] = 0;
    *((_DWORD *)v25 + 4) = 0;
    WTF::fastFree(v29, a2, a3, a4, a5, a6, a7, a8);
  }
  v25[1] = 0;
  v25[2] = 0;
  v30 = *v19;
  if (*v19)
    v31 = *(_DWORD *)(v30 - 12) + 1;
  else
    v31 = 1;
  *(_DWORD *)(v30 - 12) = v31;
  v32 = *v19;
  if (*v19)
    v33 = *(_DWORD *)(v32 - 12);
  else
    v33 = 0;
  v34 = (*(_DWORD *)(v32 - 16) + v33);
  v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 > 2 * v34)
      goto LABEL_37;
    goto LABEL_33;
  }
  if (3 * v35 <= 4 * v34)
  {
    if (!(_DWORD)v35)
    {
      v36 = 8;
      goto LABEL_36;
    }
LABEL_33:
    v36 = ((_DWORD)v35 << (6 * *(_DWORD *)(v32 - 12) >= (2 * v35)));
LABEL_36:
    v25 = WTF::HashTable<JSC::B3::Variable *,WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Variable *>>::rehash((uint64_t *)(a1 + 24), v36, (uint64_t)v25, a4, a5, a6, a7, a8);
  }
LABEL_37:
  v37 = *((_DWORD *)v25 + 5);
  v17 = (_DWORD *)v25 + 5;
  v16 = v37;
LABEL_38:
  v38 = (uint64_t *)(v17 - 3);
  if ((_DWORD)v16 == *(v17 - 1))
  {
    v39 = (__int128 *)WTF::Vector<JSC::DebuggerPausePosition,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v17 - 3), v16 + 1, (unint64_t)&v44);
    v16 = *v17;
    v40 = *v38;
    v41 = *v39;
  }
  else
  {
    v40 = *v38;
    v41 = v44;
  }
  *(_OWORD *)(v40 + 16 * v16) = v41;
  ++*v17;
  if (a2[190] >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)(a2 + 48), a1);
  while (1)
  {
    v42 = *v13;
    if ((v42 & 0xC0) != 0x40)
      break;
    v43 = __ldxr(v13);
    if (v43 == v42)
    {
      if (!__stxr(v42 & 0xBF, v13))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v13, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::HashMap<JSC::JSCell *,WTF::Vector<JSC::JSFinalizationRegistry::Registration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<WTF::Vector<JSC::JSFinalizationRegistry::Registration,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;

  v8 = *a1;
  if (!*a1)
    return 0;
  v10 = *(_DWORD *)(v8 - 8);
  v11 = ~(*a2 << 32) + *a2;
  v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
  v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
  v14 = v10 & (((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~((_DWORD)v13 << 27)));
  v15 = v8 + 24 * v14;
  v16 = *(_QWORD *)v15;
  if (*(_QWORD *)v15 != *a2)
  {
    v17 = 1;
    while (v16)
    {
      v14 = (v14 + v17) & v10;
      v15 = v8 + 24 * v14;
      v16 = *(_QWORD *)v15;
      ++v17;
      if (*(_QWORD *)v15 == *a2)
        goto LABEL_8;
    }
    v15 = v8 + 24 * *(unsigned int *)(v8 - 4);
  }
LABEL_8:
  if (v8 + 24 * *(unsigned int *)(v8 - 4) == v15)
    return 0;
  *(_QWORD *)v15 = -1;
  v18 = *(_QWORD *)(v15 + 8);
  if (v18)
  {
    *(_QWORD *)(v15 + 8) = 0;
    *(_DWORD *)(v15 + 16) = 0;
    WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
  }
  ++*(_DWORD *)(*a1 - 16);
  v19 = *a1;
  if (*a1)
    v20 = *(_DWORD *)(v19 - 12) - 1;
  else
    v20 = -1;
  *(_DWORD *)(v19 - 12) = v20;
  v22 = *a1;
  if (*a1)
  {
    v23 = 6 * *(_DWORD *)(v22 - 12);
    v24 = *(_DWORD *)(v22 - 4);
    if (v23 < v24 && v24 >= 9)
      WTF::HashTable<JSC::B3::Variable *,WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashMap<JSC::B3::Variable *,WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<JSC::B3::Variable *>,WTF::HashTraits<JSC::B3::Variable *>,WTF::HashTraits<WTF::Vector<JSC::B3::Air::Tmp,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::B3::Variable *>>::rehash(a1, v24 >> 1, 0, a4, a5, a6, a7, a8);
  }
  return 1;
}

uint64_t JSC::JSFinalizationRegistry::liveCount(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;

  v1 = *(_QWORD **)(a1 + 24);
  if (!v1)
  {
    v4 = 0;
    LODWORD(v2) = 0;
LABEL_10:
    v3 = &v1[3 * v2];
    goto LABEL_11;
  }
  v2 = *((unsigned int *)v1 - 1);
  v3 = &v1[3 * v2];
  if (!*((_DWORD *)v1 - 3))
  {
    v4 = &v1[3 * v2];
    goto LABEL_10;
  }
  v4 = *(_QWORD **)(a1 + 24);
  if ((_DWORD)v2)
  {
    v5 = 24 * v2;
    v4 = *(_QWORD **)(a1 + 24);
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 3;
      v5 -= 24;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  result = *(unsigned int *)(a1 + 52);
  if (v1)
    v1 += 3 * *((unsigned int *)v1 - 1);
  if (v1 != v4)
  {
    do
    {
      v7 = v3;
      if (v4 + 3 != v3)
      {
        v7 = v4 + 3;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 3;
          if (v7 == v3)
          {
            v7 = v3;
            break;
          }
        }
      }
      result += *((unsigned int *)v4 + 5);
      v4 = v7;
    }
    while (v7 != v1);
  }
  return result;
}

uint64_t JSC::callHostFunctionAsConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::AtomStringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 3);
  v6 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v6 = 0x1400000002;
  *(_QWORD *)(v6 + 8) = "is not a constructor";
  *(_DWORD *)(v6 + 16) = 4;
  v24 = v6;
  v14 = JSC::createError(this, v5, &v24, JSC::defaultSourceAppender);
  if (*(_DWORD *)v6 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v6, v7, v8, v9, v10, v11, v12, v13);
    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  else
  {
    *(_DWORD *)v6 -= 2;
  }
  if ((v14 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C)))
  {
    v14 = JSC::Exception::create((uint64_t)v4, (JSC::VM *)v14, 0, v9, v10, v11, v12, v13);
  }
  return JSC::VM::throwException(v4, this, (JSC::Exception *)v14);
}

uint64_t JSC::JSFunction::getCallData@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(this + 24);
  if ((v3 & 1) != 0)
  {
    v3 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v3 + 5) != 8)
      goto LABEL_3;
  }
  else if (*(_BYTE *)(v3 + 5) != 8)
  {
LABEL_3:
    *(_BYTE *)a2 = 2;
    v4 = *(_QWORD *)(this + 16);
    *(_QWORD *)(a2 + 8) = v3;
    *(_QWORD *)(a2 + 16) = v4;
    return this;
  }
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(v3 + 40);
  *(_BYTE *)(a2 + 16) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                   + 0x4C));
  return this;
}

uint64_t *JSC::JSFunction::getConstructData@<X0>(uint64_t *__return_ptr a1@<X8>, uint64_t *this@<X0>, JSC::JSCell *a3@<X1>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t (*v7)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *);
  int v8;
  uint64_t *v9;
  uint64_t *v10;

  *(_BYTE *)a1 = 0;
  v3 = this[3];
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v4 + 5) != 8)
    {
LABEL_3:
      if ((*(_QWORD *)(*(_QWORD *)(v4 + 88) + 24) & 0x80000000) == 0)
      {
        *(_BYTE *)a1 = 2;
        v5 = this[2];
        a1[1] = v4;
        a1[2] = v5;
      }
      return this;
    }
    v10 = a1;
    v6 = this;
    if (&JSC::JSBoundFunction::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
    {
      v7 = *(uint64_t (**)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))(v4 + 48);
      goto LABEL_11;
    }
  }
  else
  {
    v4 = this[3];
    if (*(_BYTE *)(v3 + 5) != 8)
      goto LABEL_3;
    v10 = a1;
    v6 = this;
    if (&JSC::JSBoundFunction::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
    {
      v7 = *(uint64_t (**)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))(v3 + 48);
LABEL_11:
      if (v7 != JSC::callHostFunctionAsConstructor)
      {
        *(_BYTE *)v10 = 1;
        v10[1] = (uint64_t)v7;
      }
      return this;
    }
  }
  v8 = *((unsigned __int8 *)v6 + 92);
  if (v8 != 1)
  {
    if (v8 != 2)
      return this;
    v9 = v6;
    this = (uint64_t *)JSC::JSBoundFunction::canConstructSlow((unint64_t)v6, a3);
    if (!(_DWORD)this)
      return this;
    v3 = v9[3];
  }
  *(_BYTE *)v10 = 1;
  if ((v3 & 1) != 0)
    v3 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFFELL) + 48);
  v10[1] = *(_QWORD *)(v3 + 48);
  *((_BYTE *)v10 + 16) = 1;
  return this;
}

uint64_t JSC::JSFunction::put(JSC::JSFunction *a1, JSC::ExecutableBase *a2, const JSC::PropertyTable *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int HasModifiedLengthOr;
  __n128 v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  JSC::JSFunction *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  void (**v34)(JSC::StringFireDetail *__hidden);
  const char *v35;
  int v36;
  int v37;
  uint64_t v38;

  v14 = *((_QWORD *)a2 + 7);
  if (*(const JSC::PropertyTable **)(*(_QWORD *)(v14 + 41952) + 2160) != a3)
    goto LABEL_2;
  *(_BYTE *)(a5 + 23) = 0;
  v25 = *((_QWORD *)a1 + 3);
  if ((v25 & 1) != 0)
  {
    v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
    if ((v25 & 0xFFFFFFFFFFFFFFFELL) != 0)
    {
      *(_QWORD *)(v26 + 8) = 0;
      *(_QWORD *)(v26 + 16) = 0;
      *(_QWORD *)(v26 + 24) = 0;
      *(_DWORD *)(v26 + 40) = 0;
      if ((v25 & 8) != 0)
        v32 = (uint64_t *)(v26 - 16);
      else
        v32 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFC000 | 8);
      v33 = *v32;
      v34 = &off_1E3583C90;
      v35 = "Store to prototype property of a function";
      JSC::InlineWatchpointSet::fireAll<JSC::StringFireDetail>((uint64_t *)(v26 + 32), v33);
      v25 = *((_QWORD *)a1 + 3);
    }
  }
  if ((v25 & 1) != 0)
  {
    v31 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v31 + 5) == 8)
      goto LABEL_2;
    v27 = *(_QWORD *)(v31 + 88);
    if ((*(_QWORD *)(v27 + 16) & 0x80000000) != 0)
      goto LABEL_2;
  }
  else
  {
    if (*(_BYTE *)(v25 + 5) == 8)
      goto LABEL_2;
    v27 = *(_QWORD *)(v25 + 88);
    if ((*(_DWORD *)(v27 + 16) & 0x80000000) != 0)
      goto LABEL_2;
  }
  if (((1 << *(_BYTE *)(v27 + 50)) & 0x78007) == 0)
  {
    v28 = *(_QWORD **)(v27 + 88);
    if (!v28 || !*v28)
    {
LABEL_2:
      HasModifiedLengthOr = JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>(a1, (JSC::FunctionRareData *)v14, a2, a3, a5, a6, a7, a8, a9);
      if (*(_DWORD *)(v14 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, v15, v16, v17, v18, v19, v20, v21))
      {
        return 0;
      }
      if ((HasModifiedLengthOr - 1) <= 1)
        *(_BYTE *)(a5 + 23) = 0;
      return JSC::JSObject::put((unsigned __int8 *)a1, (unint64_t)a2, (unint64_t)a3, a4, a5, v19, v20, v21, v23);
    }
  }
  if (JSC::JSObject::getDirectOffset(a1, (JSC::VM *)v14, (unint64_t)a3, a4, a5, a6, a7, a8) != -1)
    return JSC::JSObject::put((unsigned __int8 *)a1, (unint64_t)a2, (unint64_t)a3, a4, a5, v19, v20, v21, v23);
  v30 = *(JSC::JSFunction **)(a5 + 8);
  if (v30 != a1)
    return JSC::JSObject::definePropertyOnReceiver((unint64_t)a2, (unint64_t)a3, (uint64_t)a4, a5, v29, v19, v20, v21, v23);
  v34 = 0;
  v35 = (const char *)v30;
  v36 = -1;
  v23.n128_u64[0] = 0x100000001000000;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, v14, (unint64_t)a3, (uint64_t)a4, 12, (uint64_t)&v34, v20, v21, v23);
  return 1;
}

uint64_t JSC::JSFunction::deleteProperty(JSC::JSFunction *a1, JSC::ExecutableBase *a2, const JSC::PropertyTable *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::FunctionRareData *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v13 = (JSC::FunctionRareData *)*((_QWORD *)a2 + 7);
  JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>(a1, v13, a2, a3, a5, a6, a7, a8, a9);
  if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13, v14, v15, v16, v17, v18, v19, v20))
    return 0;
  else
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, (uint64_t)a3, a4, v17, v18, v19, v20);
}

uint64_t JSC::JSFunction::getOwnPropertySlot(JSC::JSFunction *this, JSC::VM **a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  int DirectOffset;
  JSC::JSFunction *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  int v55;
  char *v56;
  int v57;
  int v58;
  _BYTE *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned __int16 *v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  __n128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char **v103;
  uint64_t v105;
  char v106;
  int v107;
  int v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __n128 v116;
  uint64_t (*v117)(JSC::JSFunction *, JSC::VM **, WTF::StringImpl *, uint64_t);
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  unsigned __int8 *v126;
  uint64_t v127;
  unsigned int v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  WTF::StringImpl *v138[2];
  int v139;
  int v140;
  uint64_t v141;

  v13 = (uint64_t)a2[7];
  v14 = v13 + 41952;
  v15 = *(_QWORD **)(v13 + 41952);
  v16 = v15[270];
  v17 = *((_QWORD *)this + 3);
  if (v16 == a3)
  {
    if ((v17 & 1) != 0)
    {
      v73 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v73 + 5) == 8)
        goto LABEL_86;
      v45 = *(_QWORD *)(v73 + 88);
      if ((*(_QWORD *)(v45 + 16) & 0x80000000) != 0)
        goto LABEL_86;
    }
    else
    {
      if (*(_BYTE *)(v17 + 5) == 8)
        goto LABEL_3;
      v45 = *(_QWORD *)(v17 + 88);
      if ((*(_DWORD *)(v45 + 16) & 0x80000000) != 0)
        goto LABEL_3;
    }
    if (((1 << *(_BYTE *)(v45 + 50)) & 0x78007) != 0 || (v46 = *(_QWORD **)(v45 + 88)) != 0 && *v46)
    {
      v137 = 0;
      DirectOffset = JSC::JSObject::getDirectOffset(this, (JSC::VM *)v13, a3, (const JSC::PropertyTable *)&v137, a5, a6, a7, a8);
      if (DirectOffset == -1)
      {
        v95 = JSC::constructPrototypeObject((JSC *)a2, this, v48, v49, v50, v51, v52, v53, v54);
        v138[0] = 0;
        v138[1] = this;
        v139 = -1;
        v96.n128_u64[0] = 0x100000001000000;
        v140 = 0x1000000;
        v141 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, v13, a3, v95, 12, (uint64_t)v138, v97, v98, v96);
        DirectOffset = JSC::JSObject::getDirectOffset(this, (JSC::VM *)v13, *(_QWORD *)(*(_QWORD *)v14 + 2160), (const JSC::PropertyTable *)&v137, v99, v100, v101, v102);
      }
      v55 = v137;
      if (DirectOffset <= 63)
      {
        v56 = (char *)this + 16;
        v57 = DirectOffset;
      }
      else
      {
        v56 = (char *)(*((_QWORD *)this + 1) - 8);
        v57 = 63 - DirectOffset;
      }
      *(_QWORD *)a4 = *(_QWORD *)&v56[8 * v57];
      *(_QWORD *)(a4 + 32) = this;
      *(_DWORD *)(a4 + 16) = v55;
      *(_DWORD *)(a4 + 20) = DirectOffset;
      *(_WORD *)(a4 + 48) = 257;
      return 1;
    }
  }
  if ((v17 & 1) == 0)
  {
LABEL_3:
    if (*(_BYTE *)(v17 + 5) != 8)
    {
      if ((*(_DWORD *)(*(_QWORD *)(v17 + 88) + 16) & 0x80000000) == 0)
        goto LABEL_5;
      v75 = 0;
      goto LABEL_107;
    }
    v75 = 0;
LABEL_110:
    v103 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
    if (v103 != &JSC::JSBoundFunction::s_info && v103 != &JSC::JSRemoteFunction::s_info)
      goto LABEL_108;
    goto LABEL_107;
  }
LABEL_86:
  v74 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v74 + 5) == 8)
  {
    v75 = 1;
    goto LABEL_110;
  }
  if ((*(_DWORD *)(*(_QWORD *)(v74 + 88) + 16) & 0x80000000) != 0)
  {
    v75 = 1;
LABEL_107:
    if (v15[221] == a3)
    {
      if (!v75)
        goto LABEL_95;
      v82 = v17 & 0xFFFFFFFFFFFFFFFELL;
      if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0)
        goto LABEL_95;
      goto LABEL_138;
    }
LABEL_108:
    JSC::JSFunction::reifyLazyBoundNameIfNeeded((unint64_t)this, a2[7], (JSC::JSGlobalObject *)a2, a3, a5, a6, a7, a8, a9);
    goto LABEL_11;
  }
LABEL_5:
  if (v16 != a3)
    goto LABEL_6;
  if (!JSC::JSFunction::mayHaveNonReifiedPrototype(this))
  {
    v15 = *(_QWORD **)v14;
LABEL_6:
    if (v15[221] != a3)
    {
      if (v15[246] == a3)
      {
        v18 = *((_QWORD *)this + 3);
        if ((v18 & 1) == 0 || (v19 = v18 & 0xFFFFFFFFFFFFFFFELL) == 0 || (*(_BYTE *)(v19 + 64) & 2) == 0)
          JSC::JSFunction::reifyName(this, (JSC::VM *)v13, (JSC::JSGlobalObject *)a2, a4, a5, a6, a7, a8);
      }
      goto LABEL_11;
    }
    v81 = *((_QWORD *)this + 3);
    if ((v81 & 1) == 0 || (v82 = v81 & 0xFFFFFFFFFFFFFFFELL) == 0)
    {
LABEL_95:
      JSC::JSFunction::reifyLength(this, (JSC::VM *)v13, (JSC::ExecutableBase *)a3, a4, a5, a6, a7, a8, (__n128)a9);
      goto LABEL_11;
    }
LABEL_138:
    if ((*(_BYTE *)(v82 + 64) & 1) != 0)
      goto LABEL_11;
    goto LABEL_95;
  }
  JSC::JSObject::getDirect(this, (JSC::VM *)v13, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
  if (!v111)
  {
    v112 = JSC::constructPrototypeObject((JSC *)a2, this, (JSC::JSFunction *)a3, a4, a5, a6, a7, a8, v110);
    JSC::JSObject::putDirect((int *)this, v13, a3, v112, 12, v116, v113, v114, v115);
  }
LABEL_11:
  if (*(_DWORD *)(v13 + 80))
  {
    v108 = *(_DWORD *)(v13 + 80);
    if ((v108 & 0x27) != 0 && (v108 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  v20 = a2[7];
  if (!(a3 >> 4))
    goto LABEL_58;
  v21 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v21 + 0x20)) != 0)
    goto LABEL_58;
  v22 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x58);
  if (!v22)
  {
    v33 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40);
    if (!v33 || *(_BYTE *)(v33 + 5) != 1 && *(_DWORD *)(v33 + 80) < 2u)
      goto LABEL_58;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), a2[7], 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v22)
      goto LABEL_58;
  }
  if (!*(_DWORD *)(v22 + 24))
    goto LABEL_58;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
  v25 = *(unsigned int *)(v22 + 8);
  v26 = *(_DWORD *)(a3 + 16);
  if ((v23 & 1) != 0)
  {
    if ((v26 & 0x20) != 0)
      v26 = *(_DWORD *)(a3 + 32);
    v27 = *(_DWORD *)(v22 + 12);
    v28 = (v26 >> 8) & *(_QWORD *)&v27;
    v29 = *(unsigned __int8 *)(v24 + v28);
    if (*(_BYTE *)(v24 + v28))
    {
      v30 = v24 + v25;
      v31 = 1;
      while (1)
      {
        v32 = *(_QWORD *)(v30 + 8 * (v29 - 1));
        if (a3 == (v32 & 0xFFFFFFFFFFFFLL))
          break;
        v28 = ((_DWORD)v28 + v31) & v27;
        v29 = *(unsigned __int8 *)(v24 + v28);
        ++v31;
        if (!*(_BYTE *)(v24 + v28))
          goto LABEL_58;
      }
      a6 = (v32 >> 16) & 0xFF00000000 | HIBYTE(v32);
      goto LABEL_29;
    }
LABEL_58:
    if ((*((_BYTE *)this + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)this, v20, a3, a4) & 1) != 0)
    {
      return 1;
    }
    if (!a3)
      return 0;
    v58 = *(_DWORD *)(a3 + 16);
    if ((v58 & 0x20) != 0)
      return 0;
    v59 = *(_BYTE **)(a3 + 8);
    v60 = *(unsigned int *)(a3 + 4);
    if ((v58 & 4) != 0)
    {
      if ((_DWORD)v60)
      {
        v61 = *v59 - 48;
        if (v61 <= 9 && (v60 < 2 || *v59 != 48))
        {
          v126 = v59 + 1;
          v127 = v60 - 1;
          while (v127)
          {
            if (v61 > 0x19999999)
              goto LABEL_64;
            v128 = *v126 - 48;
            if (v128 > 9)
              goto LABEL_64;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v70 = __CFADD__(v128, 10 * v61);
            v61 = v128 + 10 * v61;
            ++v126;
            --v127;
            if (v70)
              goto LABEL_65;
          }
          goto LABEL_159;
        }
      }
    }
    else if ((_DWORD)v60)
    {
      v61 = *(unsigned __int16 *)v59 - 48;
      if (v61 <= 9 && (*(_WORD *)v59 != 48 || v60 <= 1))
      {
        v67 = (unsigned __int16 *)(v59 + 2);
        v68 = v60 - 1;
        while (v68)
        {
          if (v61 > 0x19999999)
            goto LABEL_64;
          v69 = *v67 - 48;
          if (v69 > 9)
            goto LABEL_64;
          v62 = 0;
          v63 = 0;
          v64 = 0;
          v70 = __CFADD__(v69, 10 * v61);
          v61 = v69 + 10 * v61;
          ++v67;
          --v68;
          if (v70)
            goto LABEL_65;
        }
LABEL_159:
        v62 = 0x100000000;
        if (v61 == -1)
        {
          v62 = 0;
          v63 = 0;
        }
        else
        {
          v63 = v61;
        }
        if (v61 == -1)
          v64 = 0;
        else
          v64 = v61 & 0xFFFFFF00;
LABEL_65:
        v65 = v64 | v63;
        if ((v62 & 0x100000000) != 0)
        {
          if (v65 == -1)
          {
            v117 = *(uint64_t (**)(JSC::JSFunction *, JSC::VM **, WTF::StringImpl *, uint64_t))(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) + 0x68);
            JSC::Identifier::from((uint64_t **)a2[7], 0xFFFFFFFFuLL, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, (int **)v138);
            v38 = v117(this, a2, v138[0], a4);
            v125 = v138[0];
            v138[0] = 0;
            if (v125)
            {
              if (*(_DWORD *)v125 == 2)
              {
                WTF::StringImpl::~StringImpl(v125, v118, v119, v120, v121, v122, v123, v124);
                WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
              }
              else
              {
                *(_DWORD *)v125 -= 2;
              }
            }
            return v38;
          }
          v38 = 0;
          switch(*((_BYTE *)this + 4) & 0xF)
          {
            case 0:
            case 1:
            case 3:
              return v38;
            case 4:
            case 5:
            case 8:
            case 9:
              v71 = *((_QWORD *)this + 1);
              if (*(_DWORD *)(v71 - 4) > v65)
              {
                v72 = *(_QWORD *)(v71 + 8 * v65);
                if (v72)
                  goto LABEL_80;
              }
              return 0;
            case 6:
            case 7:
              v109 = *((_QWORD *)this + 1);
              if (*(_DWORD *)(v109 - 4) <= v65)
                return 0;
              v72 = *(_QWORD *)(v109 + 8 * v65) + 0x2000000000000;
              goto LABEL_80;
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
              v83 = (_QWORD *)*((_QWORD *)this + 1);
              if (*((_DWORD *)v83 - 2) <= v65)
                return 0;
              if (*((_DWORD *)v83 - 1) > v65)
              {
                v72 = v83[v65 + 2];
                if (v72)
                {
LABEL_80:
                  *(_QWORD *)a4 = v72;
                  *(_DWORD *)(a4 + 16) = 0;
                  *(_QWORD *)(a4 + 32) = this;
                  v38 = 1;
                  *(_BYTE *)(a4 + 49) = 1;
                  return v38;
                }
                return 0;
              }
              v84 = *v83;
              if (!v84)
                return 0;
              v85 = *(_QWORD *)(v84 + 8);
              if (!v85)
                return 0;
              v86 = v65;
              v87 = *(_DWORD *)(v85 - 8);
              v88 = (~(v86 << 32) + v86) ^ ((unint64_t)(~(v86 << 32) + v86) >> 22);
              v89 = 9 * ((v88 + ~(v88 << 13)) ^ ((v88 + ~(v88 << 13)) >> 8));
              v90 = (v89 ^ (v89 >> 15)) + ~((v89 ^ (v89 >> 15)) << 27);
              v91 = v87 & ((v90 >> 31) ^ v90);
              v92 = (uint64_t *)(v85 + 24 * v91);
              v93 = *v92;
              if (*v92 == v86)
                goto LABEL_118;
              v94 = 1;
              break;
            default:
              __break(0xC471u);
              JUMPOUT(0x1989A9000);
          }
          while (v93 != -1)
          {
            v91 = (v91 + v94) & v87;
            v92 = (uint64_t *)(v85 + 24 * v91);
            v93 = *v92;
            ++v94;
            if (*v92 == v86)
              goto LABEL_118;
          }
          v92 = (uint64_t *)(v85 + 24 * *(unsigned int *)(v85 - 4));
LABEL_118:
          if (v92 == (uint64_t *)(v85 + 24 * *(unsigned int *)(v85 - 4)))
            return 0;
          v105 = v92[1];
          if ((v105 & 0xFFFE000000000002) != 0)
          {
            v106 = 1;
          }
          else if (*(_BYTE *)(v105 + 5) == 5)
          {
            v106 = 2;
          }
          else
          {
            v106 = 1;
          }
          v107 = *((_DWORD *)v92 + 4);
          *(_QWORD *)a4 = v105;
          *(_DWORD *)(a4 + 16) = v107;
          *(_QWORD *)(a4 + 32) = this;
          *(_BYTE *)(a4 + 49) = v106;
          return 1;
        }
        return 0;
      }
    }
LABEL_64:
    v62 = 0;
    v63 = 0;
    v64 = 0;
    goto LABEL_65;
  }
  if ((v26 & 0x20) != 0)
    v26 = *(_DWORD *)(a3 + 32);
  v39 = *(_DWORD *)(v22 + 12);
  v40 = v39 & (v26 >> 8);
  v41 = *(_DWORD *)(v24 + 4 * v40);
  if (!v41)
    goto LABEL_58;
  v42 = v24 + 4 * v25;
  v43 = 1;
  while (1)
  {
    v44 = (v41 - 1);
    if (*(_QWORD *)(v42 + 16 * v44) == a3)
      break;
    v40 = (v40 + v43) & v39;
    v41 = *(_DWORD *)(v24 + 4 * v40);
    ++v43;
    if (!v41)
      goto LABEL_58;
  }
  a6 = *(unsigned int *)(v42 + 16 * v44 + 8) | ((unint64_t)*(unsigned __int8 *)(v42 + 16 * v44 + 12) << 32);
LABEL_29:
  if ((_DWORD)a6 == -1)
    goto LABEL_58;
  if ((int)a6 <= 63)
  {
    v34 = (char *)this + 16;
    v35 = a6 << 32;
  }
  else
  {
    v34 = (char *)(*((_QWORD *)this + 1) - 8);
    v35 = 0x3F00000000 - (a6 << 32);
  }
  v36 = *(_QWORD *)&v34[v35 >> 29];
  if ((v36 & 0xFFFE000000000002) != 0)
    goto LABEL_35;
  v37 = *(unsigned __int8 *)(v36 + 5);
  if (v37 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)this, (uint64_t)v20, a4, v36, SHIDWORD(a6), a6);
    return 1;
  }
  if (v37 != 6)
  {
LABEL_35:
    *(_QWORD *)a4 = v36;
    *(_QWORD *)(a4 + 32) = this;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    v38 = 1;
    *(_WORD *)(a4 + 48) = 257;
    return v38;
  }
  v76 = *(_DWORD *)(v21 + 16) & 3;
  v78 = *(_QWORD *)(v36 + 8);
  v77 = *(_QWORD *)(v36 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v36 & 0xFFFFFFFE) + 0x4C)))
  {
    v80 = *(_QWORD *)(v36 + 24);
    v79 = *(_QWORD *)(v36 + 32);
    *(_QWORD *)a4 = v78;
    *(_QWORD *)(a4 + 8) = v77;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = this;
    *(_BYTE *)(a4 + 49) = 3;
    v38 = 1;
    if (v76 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v80;
    *(_QWORD *)(a4 + 80) = v79;
  }
  else
  {
    *(_QWORD *)a4 = v78;
    *(_QWORD *)(a4 + 8) = v77;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = this;
    v38 = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v76 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return v38;
}

void JSC::JSFunction::getOwnSpecialPropertyNames(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  BOOL v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  _QWORD *v36;
  WTF::StringImpl *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF::StringImpl **v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl **v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113[2];
  char v114;
  uint64_t v115;
  WTF::StringImpl *v116[9];

  if ((_DWORD)a4)
    return;
  v116[7] = v8;
  v116[8] = v9;
  v12 = *((_QWORD *)a2 + 7);
  v13 = *(_QWORD *)(a1 + 24);
  if ((v13 & 1) == 0
    || (v14 = v13 & 0xFFFFFFFFFFFFFFFELL, (v13 & 0xFFFFFFFFFFFFFFFELL) == 0)
    || (*(_BYTE *)(v14 + 64) & 1) == 0)
  {
    v15 = *(WTF::StringImpl **)(*(_QWORD *)(v12 + 41952) + 1768);
    v116[0] = v15;
    v16 = *((_DWORD *)v15 + 4);
    if ((v16 & 0x20) != 0)
    {
      if ((a3[3] & 1) != 0 && (!*((_BYTE *)a3 + 25) || (*((_BYTE *)v15 + 36) & 4) == 0))
      {
LABEL_7:
        v17 = *a3;
        v18 = *(unsigned int *)(*a3 + 20);
        if (v18 <= 0x13)
        {
          if ((_DWORD)v18)
          {
            v52 = *(WTF::StringImpl ***)(v17 + 8);
            while (*v52 != v15)
            {
              ++v52;
              if (!--v18)
                goto LABEL_12;
            }
            goto LABEL_22;
          }
        }
        else
        {
          v19 = a3[1];
          if (!v19 || !*(_DWORD *)(v19 - 12))
          {
            v48 = *(uint64_t **)(v17 + 8);
            v49 = 8 * v18;
            do
            {
              v50 = *v48++;
              v115 = v50;
              WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, &v115, a4, a5, a6, a7, a8, (uint64_t)v113);
              v49 -= 8;
            }
            while (v49);
          }
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(a3 + 1, (uint64_t *)v116, a4, a5, a6, a7, a8, (uint64_t)v113);
          if (!v114)
            goto LABEL_22;
          v15 = v116[0];
          v17 = *a3;
          v16 = *((_DWORD *)v116[0] + 4);
        }
LABEL_12:
        if ((v16 & 0x20) != 0)
        {
          v20 = *(_DWORD *)v15 + 2;
        }
        else
        {
          if ((v16 & 0x10) != 0)
          {
            *(_DWORD *)v15 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a3[2] + 41912), (unint64_t)v15, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v113);
            v15 = v113[0];
          }
          v20 = *(_DWORD *)v15;
          *(_DWORD *)v15 += 2;
          if (!v20)
          {
            WTF::StringImpl::~StringImpl(v15, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
LABEL_17:
            v113[0] = v15;
            v21 = *(unsigned int *)(v17 + 20);
            if ((_DWORD)v21 == *(_DWORD *)(v17 + 16))
            {
              WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(v17 + 8, (unint64_t)v113);
            }
            else
            {
              v22 = *(_QWORD *)(v17 + 8);
              v113[0] = 0;
              *(_QWORD *)(v22 + 8 * v21) = v15;
              *(_DWORD *)(v17 + 20) = v21 + 1;
            }
            v23 = v113[0];
            v113[0] = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
              {
                WTF::StringImpl::~StringImpl(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
              }
              else
              {
                *(_DWORD *)v23 -= 2;
              }
            }
            goto LABEL_22;
          }
        }
        *(_DWORD *)v15 = v20;
        goto LABEL_17;
      }
    }
    else if ((a3[3] & 2) != 0)
    {
      goto LABEL_7;
    }
LABEL_22:
    v13 = *(_QWORD *)(a1 + 24);
    v24 = v13 & 1;
    v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
    goto LABEL_23;
  }
  v24 = 1;
LABEL_23:
  if (v14)
    v25 = v24 == 0;
  else
    v25 = 1;
  if (v25 || (*(_BYTE *)(v14 + 64) & 2) == 0)
  {
    v26 = *(WTF::StringImpl **)(*(_QWORD *)(v12 + 41952) + 1968);
    v116[0] = v26;
    v27 = *((_DWORD *)v26 + 4);
    if ((v27 & 0x20) != 0)
    {
      if ((a3[3] & 1) != 0 && (!*((_BYTE *)a3 + 25) || (*((_BYTE *)v26 + 36) & 4) == 0))
      {
LABEL_30:
        v28 = *a3;
        v29 = *(unsigned int *)(*a3 + 20);
        if (v29 <= 0x13)
        {
          if ((_DWORD)v29)
          {
            v80 = *(WTF::StringImpl ***)(v28 + 8);
            while (*v80 != v26)
            {
              ++v80;
              if (!--v29)
                goto LABEL_35;
            }
            goto LABEL_45;
          }
        }
        else
        {
          v30 = a3[1];
          if (!v30 || !*(_DWORD *)(v30 - 12))
          {
            v53 = *(uint64_t **)(v28 + 8);
            v54 = 8 * v29;
            do
            {
              v55 = *v53++;
              v115 = v55;
              WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, &v115, a4, a5, a6, a7, a8, (uint64_t)v113);
              v54 -= 8;
            }
            while (v54);
          }
          WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(a3 + 1, (uint64_t *)v116, a4, a5, a6, a7, a8, (uint64_t)v113);
          if (!v114)
            goto LABEL_45;
          v26 = v116[0];
          v28 = *a3;
          v27 = *((_DWORD *)v116[0] + 4);
        }
LABEL_35:
        if ((v27 & 0x20) != 0)
        {
          v31 = *(_DWORD *)v26 + 2;
        }
        else
        {
          if ((v27 & 0x10) != 0)
          {
            *(_DWORD *)v26 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a3[2] + 41912), (unint64_t)v26, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v113);
            v26 = v113[0];
          }
          v31 = *(_DWORD *)v26;
          *(_DWORD *)v26 += 2;
          if (!v31)
          {
            WTF::StringImpl::~StringImpl(v26, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
LABEL_40:
            v113[0] = v26;
            v32 = *(unsigned int *)(v28 + 20);
            if ((_DWORD)v32 == *(_DWORD *)(v28 + 16))
            {
              WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(v28 + 8, (unint64_t)v113);
            }
            else
            {
              v33 = *(_QWORD *)(v28 + 8);
              v113[0] = 0;
              *(_QWORD *)(v33 + 8 * v32) = v26;
              *(_DWORD *)(v28 + 20) = v32 + 1;
            }
            v34 = v113[0];
            v113[0] = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
              {
                WTF::StringImpl::~StringImpl(v34, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
              }
              else
              {
                *(_DWORD *)v34 -= 2;
              }
            }
            goto LABEL_45;
          }
        }
        *(_DWORD *)v26 = v31;
        goto LABEL_40;
      }
    }
    else if ((a3[3] & 2) != 0)
    {
      goto LABEL_30;
    }
LABEL_45:
    v13 = *(_QWORD *)(a1 + 24);
  }
  if ((v13 & 1) != 0)
  {
    v44 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v44 + 5) == 8)
      return;
    v35 = *(_QWORD *)(v44 + 88);
    if ((*(_QWORD *)(v35 + 16) & 0x80000000) != 0)
      return;
  }
  else
  {
    if (*(_BYTE *)(v13 + 5) == 8)
      return;
    v35 = *(_QWORD *)(v13 + 88);
    if ((*(_DWORD *)(v35 + 16) & 0x80000000) != 0)
      return;
  }
  if (((1 << *(_BYTE *)(v35 + 50)) & 0x78007) == 0)
  {
    v36 = *(_QWORD **)(v35 + 88);
    if (!v36 || !*v36)
      return;
  }
  v37 = *(WTF::StringImpl **)(*(_QWORD *)(v12 + 41952) + 2160);
  v116[0] = v37;
  v38 = *((_DWORD *)v37 + 4);
  if ((v38 & 0x20) != 0)
  {
    if ((a3[3] & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v37 + 36) & 4) != 0)
      return;
  }
  else if ((a3[3] & 2) == 0)
  {
    return;
  }
  v39 = *a3;
  v40 = *(unsigned int *)(*a3 + 20);
  if (v40 <= 0x13)
  {
    if (!(_DWORD)v40)
    {
LABEL_59:
      if ((v38 & 0x20) != 0)
      {
        v42 = *(_DWORD *)v37 + 2;
      }
      else
      {
        if ((v38 & 0x10) != 0)
        {
          *(_DWORD *)v37 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(a3[2] + 41912), (unint64_t)v37, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8, v113);
          v37 = v113[0];
        }
        v42 = *(_DWORD *)v37;
        *(_DWORD *)v37 += 2;
        if (!v42)
        {
          WTF::StringImpl::~StringImpl(v37, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
LABEL_64:
          v113[0] = v37;
          v43 = *(unsigned int *)(v39 + 20);
          if ((_DWORD)v43 == *(_DWORD *)(v39 + 16))
          {
            WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(v39 + 8, (unint64_t)v113);
            v104 = v113[0];
            v113[0] = 0;
            if (v104)
            {
              if (*(_DWORD *)v104 == 2)
              {
                WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
                WTF::fastFree(v105, v106, v107, v108, v109, v110, v111, v112);
              }
              else
              {
                *(_DWORD *)v104 -= 2;
              }
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v39 + 8) + 8 * v43) = v37;
            *(_DWORD *)(v39 + 20) = v43 + 1;
          }
          return;
        }
      }
      *(_DWORD *)v37 = v42;
      goto LABEL_64;
    }
    v51 = *(WTF::StringImpl ***)(v39 + 8);
    while (*v51 != v37)
    {
      ++v51;
      if (!--v40)
        goto LABEL_59;
    }
  }
  else
  {
    v41 = a3[1];
    if (!v41 || !*(_DWORD *)(v41 - 12))
    {
      v45 = *(uint64_t **)(v39 + 8);
      v46 = 8 * v40;
      do
      {
        v47 = *v45++;
        v115 = v47;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add(a3 + 1, &v115, a4, a5, a6, a7, a8, (uint64_t)v113);
        v46 -= 8;
      }
      while (v46);
    }
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add(a3 + 1, (uint64_t *)v116, a4, a5, a6, a7, a8, (uint64_t)v113);
    if (v114)
    {
      v37 = v116[0];
      v39 = *a3;
      v38 = *((_DWORD *)v116[0] + 4);
      goto LABEL_59;
    }
  }
}

uint64_t JSC::JSFunction::defineOwnProperty(JSC::JSFunction *a1, JSC::ExecutableBase *a2, const JSC::PropertyTable *a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v14;
  const JSC::PropertyTable *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  JSC::JSFunction *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  int v41;
  int v42;
  uint64_t v43;

  v14 = *((_QWORD *)a2 + 7);
  v15 = *(const JSC::PropertyTable **)(*(_QWORD *)(v14 + 41952) + 2160);
  if (v15 == a3)
  {
    v16 = *((_QWORD *)a1 + 3);
    if ((v16 & 1) == 0 || (v16 & 0xFFFFFFFFFFFFFFFELL) == 0)
      goto LABEL_4;
    JSC::FunctionRareData::clear(v16 & 0xFFFFFFFFFFFFFFFELL, "Store to prototype property of a function");
    v15 = *(const JSC::PropertyTable **)(*(_QWORD *)(v14 + 41952) + 2160);
  }
  if (v15 != a3)
    goto LABEL_22;
  v16 = *((_QWORD *)a1 + 3);
LABEL_4:
  if ((v16 & 1) == 0)
  {
    if (*(_BYTE *)(v16 + 5) != 8)
    {
      v17 = *(_QWORD *)(v16 + 88);
      if ((*(_DWORD *)(v17 + 16) & 0x80000000) == 0)
        goto LABEL_7;
    }
LABEL_22:
    JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>(a1, (JSC::FunctionRareData *)v14, a2, a3, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v14 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, v36, v37, v38, v39, v22, v23, v24))
    {
      return 0;
    }
    return JSC::JSObject::defineOwnProperty(a1, a2, (unint64_t)a3, (uint64_t)a4, a5, v22, v23, v24, v25);
  }
  v30 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v30 + 5) == 8)
    goto LABEL_22;
  v17 = *(_QWORD *)(v30 + 88);
  if ((*(_QWORD *)(v17 + 16) & 0x80000000) != 0)
    goto LABEL_22;
LABEL_7:
  if (((1 << *(_BYTE *)(v17 + 50)) & 0x78007) == 0)
  {
    v18 = *(_QWORD **)(v17 + 88);
    if (!v18 || !*v18)
      goto LABEL_22;
  }
  if (JSC::JSObject::getDirectOffset(a1, (JSC::VM *)v14, (unint64_t)a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8) != -1)return JSC::JSObject::defineOwnProperty(a1, a2, (unint64_t)a3, (uint64_t)a4, a5, v22, v23, v24, v25);
  v26 = *((_QWORD *)a1 + 3);
  if ((v26 & 1) != 0)
    v26 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v26 + 88) + 48) >> 14) - 1 > 1)
  {
    v31 = JSC::constructPrototypeObject(a2, a1, v19, v20, v21, v22, v23, v24, v25.n128_f64[0]);
    JSC::JSObject::putDirect((int *)a1, v14, (unint64_t)a3, v31, 12, v35, v32, v33, v34);
    return JSC::JSObject::defineOwnProperty(a1, a2, (unint64_t)a3, (uint64_t)a4, a5, v22, v23, v24, v25);
  }
  v27 = *(_QWORD *)a4;
  v28 = a4[6];
  v40[0] = 0;
  v40[1] = a1;
  v41 = -1;
  v25.n128_u64[0] = 0x100000001000000;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, v14, (unint64_t)a3, v27, v28, (uint64_t)v40, v23, v24, v25);
  return 1;
}

void JSC::JSFunction::visitChildren(JSC::JSFunction *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSCallee::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 3);
  if ((v16 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)((v16 & 0xFFFFFFFFFFFFFFFELL) - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16 & 0xFFFFFFFFFFFFFFFELL, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::JSFunction::visitChildren(JSC::JSFunction *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSCallee::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

BOOL JSC::JSFunction::isHostFunctionNonInline(JSC::JSFunction *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if ((v1 & 1) != 0)
    v1 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 48);
  return *(_BYTE *)(v1 + 5) == 8;
}

uint64_t JSC::JSFunction::selectStructureForNewFuncExp(int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int *v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 88);
  v3 = *(_QWORD *)(v2 + 16);
  if (*(_BYTE *)(v2 + 50) == 6)
  {
    if ((int)v3 < 0)
      v5 = a1 + 236;
    else
      v5 = a1 + 239;
  }
  else
  {
    v4 = a1 + 240;
    if ((int)v3 >= 0)
    {
      v5 = a1 + 241;
    }
    else
    {
      v4 = a1 + 237;
      v5 = a1 + 238;
    }
    if ((*(_BYTE *)(a2 + 68) & 1) == 0)
      v5 = v4;
  }
  v6 = *v5;
  if (v6)
    return 16 * (v6 & 0xFFFFFFFE);
  else
    return 0;
}

uint64_t JSC::JSFunction::create(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  unsigned int v26;
  int *v28;
  int *v29;
  unint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t SlowCase;

  v10 = (uint64_t *)(a1 + 38288);
  v11 = *(int **)(16 * (*a3 & 0xFFFFFFFE) + 0x28);
  v12 = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(v12 + 16);
  if (*(_BYTE *)(v12 + 50) == 6)
  {
    v28 = v11 + 239;
    v29 = v11 + 236;
    if ((int)v13 < 0)
      v17 = v29;
    else
      v17 = v28;
  }
  else
  {
    v14 = v11 + 240;
    if ((int)v13 < 0)
      v14 = v11 + 237;
    v15 = v11 + 241;
    v16 = v11 + 238;
    if ((int)v13 < 0)
      v17 = v16;
    else
      v17 = v15;
    if ((*(_BYTE *)(a2 + 68) & 1) == 0)
      v17 = v14;
  }
  v18 = *v17;
  if (v18)
    v19 = 16 * (v18 & 0xFFFFFFFE);
  else
    v19 = 0;
  v20 = *v10;
  if ((unint64_t)*v10 < *(_QWORD *)(a1 + 38296))
    goto LABEL_13;
  v20 = *(_QWORD *)(a1 + 38304);
  if ((v20 & 1) == 0)
  {
    v30 = *(_QWORD *)(v20 + 8) ^ *(_QWORD *)(a1 + 38312);
    *(_QWORD *)(a1 + 38296) = v20 + HIDWORD(v30);
    *(_QWORD *)(a1 + 38304) = v20 + (int)v30;
LABEL_13:
    *v10 = v20 + 32;
    goto LABEL_14;
  }
  v31 = a3;
  v32 = v19;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, (uint64_t)a3, v19, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38264, a1 + 192, 32, 0, 0);
  v19 = v32;
  a3 = v31;
  v20 = SlowCase;
LABEL_14:
  *(_DWORD *)v20 = 0;
  JSC::JSCallee::JSCallee((JSC::JSCell *)v20, a1, (uint64_t)a3, v19);
  *(_QWORD *)(v20 + 24) = a2;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v25 = *(_QWORD *)(a2 + 112);
  if ((v25 & 1) != 0)
    v26 = (v25 >> 1) & 3;
  else
    v26 = *(unsigned __int8 *)(v25 + 4);
  if (v26 != 2)
    JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow((uint64_t *)(a2 + 112), (JSC::VM *)a1, (JSC::JSCell *)a2, v20, (uint64_t)"Allocating a function", v21, v22, v23, v24);
  return v20;
}

unint64_t JSC::JSFunction::create(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t SlowCase;

  v10 = *(_QWORD *)(a1 + 38288);
  if (v10 < *(_QWORD *)(a1 + 38296))
    goto LABEL_2;
  v10 = *(_QWORD *)(a1 + 38304);
  if ((v10 & 1) == 0)
  {
    v18 = *(_QWORD *)(v10 + 8) ^ *(_QWORD *)(a1 + 38312);
    *(_QWORD *)(a1 + 38296) = v10 + HIDWORD(v18);
    *(_QWORD *)(a1 + 38304) = v10 + (int)v18;
LABEL_2:
    *(_QWORD *)(a1 + 38288) = v10 + 32;
    goto LABEL_3;
  }
  v19 = a4;
  v20 = a3;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38264, a1 + 192, 32, 0, 0, v21, v22, v23);
  a3 = v20;
  a4 = v19;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  JSC::JSCallee::JSCallee((JSC::JSCell *)v10, a1, a3, a4);
  *(_QWORD *)(v10 + 24) = a2;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v15 = a2[14];
  if ((v15 & 1) != 0)
    v16 = (v15 >> 1) & 3;
  else
    v16 = *(unsigned __int8 *)(v15 + 4);
  if (v16 != 2)
    JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow(a2 + 14, (JSC::VM *)a1, (JSC::JSCell *)a2, v10, (uint64_t)"Allocating a function", v11, v12, v13, v14);
  return v10;
}

uint64_t JSC::JSFunction::create(uint64_t a1, uint64_t a2, int a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, int a7, unint64_t a8, uint64_t a9)
{
  uint64_t *v13;
  uint64_t *v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t HostFunction;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  unint64_t v29;
  JSC::VM *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  int v40;
  int v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t SlowCase;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;

  v13 = (uint64_t *)(a1 + 39696);
  v14 = (uint64_t *)(a1 + 38288);
  HostFunction = JSC::VM::getHostFunction((uint64_t *)a1, a5, a6, a7, a8, a9, a4, a8);
  v22 = *(_DWORD *)(a2 + 940);
  if (v22)
    v23 = 16 * (v22 & 0xFFFFFFFE);
  else
    v23 = 0;
  v24 = *v14;
  if (*v14 < (unint64_t)v14[1])
    goto LABEL_5;
  v24 = v14[2];
  if ((v24 & 1) == 0)
  {
    v48 = *(_QWORD *)(v24 + 8) ^ v14[3];
    v14[1] = v24 + HIDWORD(v48);
    v14[2] = v24 + (int)v48;
LABEL_5:
    *v14 = v24 + 32;
    goto LABEL_6;
  }
  v50 = v23;
  JSC::sanitizeStackForVM((JSC *)a1, v15, v16, v23, v17, v18, v19, v20);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38264, a1 + 192, 32, 0, 0);
  v23 = v50;
  v24 = SlowCase;
LABEL_6:
  *(_DWORD *)v24 = 0;
  JSC::JSCallee::JSCallee(v24, a1, a2, v23);
  *(_QWORD *)(v24 + 24) = HostFunction;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v28 = *(_QWORD *)(v13[282] + 1768);
  if (a3 < 0)
    v29 = COERCE__INT64((double)a3) + 0x2000000000000;
  else
    v29 = a3 | 0xFFFE000000000000;
  v52 = 0;
  v53 = v24;
  v54 = -1;
  v27.n128_u64[0] = 0x100000001000000;
  v55 = 0x1000000;
  v56 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v24, a1, v28, v29, 6, (uint64_t)&v52, v25, v26, v27);
  v38 = *a4;
  if (*a4)
  {
    v39 = *(_QWORD *)(v13[282] + 1968);
    v40 = *((_DWORD *)v38 + 1);
    if (v40 == 1)
    {
      v41 = *((_DWORD *)v38 + 4);
      v46 = (unsigned __int8 *)*((_QWORD *)v38 + 1);
      if ((v41 & 4) != 0)
      {
        v47 = *v46;
      }
      else
      {
        v47 = *(unsigned __int16 *)v46;
        if (v47 > 0xFF)
        {
LABEL_15:
          *(_DWORD *)v38 += 2;
          v42 = v38;
          if ((v41 & 3) == 2)
          {
            v42 = v38;
            do
            {
              v42 = (WTF::StringImpl *)*((_QWORD *)v42 + 3);
              v41 = *((_DWORD *)v42 + 4);
            }
            while ((v41 & 3) == 2);
          }
          if ((v41 & 8) != 0)
          {
            v43 = 0;
          }
          else
          {
            *((_DWORD *)v42 + 4) = v41 | 8;
            v43 = (unint64_t)*((unsigned int *)v42 + 1) << ((v41 & 4) == 0);
          }
          v44 = *v13;
          if (*v13 >= (unint64_t)v13[1])
          {
            v44 = v13[2];
            if ((v44 & 1) != 0)
            {
              JSC::sanitizeStackForVM((JSC *)a1, v30, v31, v32, v33, v34, v35, v36);
              v44 = JSC::LocalAllocator::allocateSlowCase(a1 + 39672, a1 + 192, 16, 0, 0);
              goto LABEL_20;
            }
            v49 = *(_QWORD *)(v44 + 8) ^ v13[3];
            v13[1] = v44 + HIDWORD(v49);
            v13[2] = v44 + (int)v49;
          }
          *v13 = v44 + 16;
LABEL_20:
          *(_DWORD *)v44 = (unint64_t)v13[227] >> 4;
          *(_DWORD *)(v44 + 4) = 17302016;
          *(_QWORD *)(v44 + 8) = v38;
          if (*(_BYTE *)(a1 + 755))
            __dmb(0xAu);
          if (v43 >= 0x101)
            JSC::Heap::reportExtraMemoryAllocatedSlowCase(a1 + 192, 0, v44, v43, v33, v34, v35, v36);
          goto LABEL_24;
        }
      }
      v44 = *(_QWORD *)(a1 + 8 * v47 + 42216);
    }
    else
    {
      if (v40)
      {
        v41 = *((_DWORD *)v38 + 4);
        goto LABEL_15;
      }
      v44 = *(_QWORD *)(a1 + 41968);
    }
LABEL_24:
    v52 = 0;
    v53 = v24;
    v54 = -1;
    v37.n128_u64[0] = 0x100000001000000;
    v55 = 0x1000000;
    v56 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v24, a1, v39, v44, 6, (uint64_t)&v52, v35, v36, v37);
  }
  return v24;
}

uint64_t JSC::JSFunction::JSFunction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;

  result = JSC::JSCallee::JSCallee(a1, a2, a4, a5);
  *(_QWORD *)(result + 24) = a3;
  return result;
}

{
  uint64_t result;

  result = JSC::JSCallee::JSCallee(a1, a2, a4, a5);
  *(_QWORD *)(result + 24) = a3;
  return result;
}

uint64_t JSC::JSFunction::finishCreation(JSC::JSFunction *this, JSC::VM *a2, JSC::NativeExecutable *a3, int a4, const WTF::String *a5, __n128 a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t SlowCase;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  JSC::JSFunction *v38;
  int v39;
  int v40;
  uint64_t v41;

  v12 = (uint64_t *)((char *)a2 + 39696);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v13 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1768);
  if (a4 < 0)
    v14 = COERCE__INT64((double)a4) + 0x2000000000000;
  else
    v14 = a4 | 0xFFFE000000000000;
  v37 = 0;
  v38 = this;
  v39 = -1;
  a6.n128_u64[0] = 0x100000001000000;
  v40 = 0x1000000;
  v41 = 0;
  result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, (uint64_t)a2, v13, v14, 6, (uint64_t)&v37, a8, a9, a6);
  v23 = *(_QWORD *)a5;
  if (*(_QWORD *)a5)
  {
    v24 = *(_QWORD *)(v12[282] + 1968);
    v25 = *(_DWORD *)(v23 + 4);
    if (v25 == 1)
    {
      v26 = *(_DWORD *)(v23 + 16);
      v31 = *(unsigned __int8 **)(v23 + 8);
      if ((v26 & 4) != 0)
      {
        v32 = *v31;
      }
      else
      {
        v32 = *(unsigned __int16 *)v31;
        if (v32 > 0xFF)
        {
LABEL_10:
          *(_DWORD *)v23 += 2;
          v27 = v23;
          if ((v26 & 3) == 2)
          {
            v27 = v23;
            do
            {
              v27 = *(_QWORD *)(v27 + 24);
              v26 = *(_DWORD *)(v27 + 16);
            }
            while ((v26 & 3) == 2);
          }
          if ((v26 & 8) != 0)
          {
            v28 = 0;
          }
          else
          {
            *(_DWORD *)(v27 + 16) = v26 | 8;
            v28 = (unint64_t)*(unsigned int *)(v27 + 4) << ((v26 & 4) == 0);
          }
          v29 = (char *)a2 + 192;
          v30 = *v12;
          if (*v12 >= (unint64_t)v12[1])
          {
            v30 = v12[2];
            if ((v30 & 1) != 0)
            {
              v36 = v28;
              v35 = v23;
              JSC::sanitizeStackForVM(a2, v16, v17, v28, v18, v19, v20, v21);
              SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)a2 + 39672, (char *)a2 + 192, 16, 0, 0);
              v23 = v35;
              v28 = v36;
              v30 = SlowCase;
              v29 = (char *)a2 + 192;
              goto LABEL_15;
            }
            v33 = *(_QWORD *)(v30 + 8) ^ v12[3];
            v12[1] = v30 + HIDWORD(v33);
            v12[2] = v30 + (int)v33;
          }
          *v12 = v30 + 16;
LABEL_15:
          *(_DWORD *)v30 = (unint64_t)v12[227] >> 4;
          *(_DWORD *)(v30 + 4) = 17302016;
          *(_QWORD *)(v30 + 8) = v23;
          if (*((_BYTE *)a2 + 755))
            __dmb(0xAu);
          if (v28 >= 0x101)
            JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v29, 0, v30, v28, v18, v19, v20, v21);
          goto LABEL_19;
        }
      }
      v30 = *((_QWORD *)a2 + v32 + 5277);
    }
    else
    {
      if (v25)
      {
        v26 = *(_DWORD *)(v23 + 16);
        goto LABEL_10;
      }
      v30 = *((_QWORD *)a2 + 5246);
    }
LABEL_19:
    v37 = 0;
    v38 = this;
    v39 = -1;
    v22.n128_u64[0] = 0x100000001000000;
    v40 = 0x1000000;
    v41 = 0;
    return JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, (uint64_t)a2, v24, v30, 6, (uint64_t)&v37, v20, v21, v22);
  }
  return result;
}

unint64_t JSC::JSFunction::allocateRareData(JSC::VM **this, JSC::VM *a2, JSC::ExecutableBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  char *v11;
  unint64_t v12;

  result = JSC::FunctionRareData::create(a2, this[3], a3, a4, a5, a6, a7, a8);
  __dmb(0xAu);
  this[3] = (JSC::VM *)(result | 1);
  if (this && result && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
  {
    v11 = (char *)a2 + 192;
    v12 = result;
    JSC::Heap::writeBarrierSlowPath((uint64_t)v11, (unint64_t)this);
    return v12;
  }
  return result;
}

uint64_t JSC::JSFunction::prototypeForConstruction(JSC::JSFunction *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;

  v10 = (char *)a2 + 64;
  v11 = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v11 + 1;
  if (!v11)
  {
    v12 = *((_QWORD *)a2 + 2);
    if (v12)
    {
      if (*((_QWORD *)a2 + 3) == v12)
      {
        *((_QWORD *)a2 + 2) = 0;
        v21 = (unsigned int *)((char *)a2 + 80);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 & 0xFFFFFFEF, v21));
        *((_BYTE *)a2 + 86) = 1;
      }
    }
  }
  result = JSC::JSObject::get((unsigned int *)this, (uint64_t)a3, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), a4, a5, a6, a7, a8);
  if (*((_QWORD *)a2 + 2))
  {
    __break(0xC471u);
    JUMPOUT(0x1989AA4E0);
  }
  if ((result & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(result + 5) <= 0x16u)
  {
    v15 = *((_QWORD *)this + 3);
    if ((v15 & 1) != 0)
    {
      v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 48);
      v16 = *(unsigned __int8 *)(v17 + 5);
    }
    else
    {
      v16 = *(unsigned __int8 *)(v15 + 5);
      v17 = *((_QWORD *)this + 3);
    }
    if (v16 == 8 || (*(_DWORD *)(*(_QWORD *)(v17 + 88) + 16) & 0x80000000) != 0)
    {
      v18 = *(uint64_t **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
    }
    else
    {
      v18 = *(uint64_t **)(16 * (**((_DWORD **)this + 2) & 0xFFFFFFFE) + 0x28);
      if ((v15 & 1) != 0)
        v15 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 48);
      v19 = 1 << *(_BYTE *)(*(_QWORD *)(v15 + 88) + 50);
      if ((v19 & 0x40004) != 0)
      {
        v20 = v18 + 90;
LABEL_19:
        result = *v20;
        goto LABEL_6;
      }
      if ((v19 & 0x30000) != 0)
      {
        v20 = v18 + 91;
        goto LABEL_19;
      }
    }
    v20 = v18 + 82;
    goto LABEL_19;
  }
LABEL_6:
  v14 = *((_DWORD *)a2 + 22) - 1;
  *((_DWORD *)a2 + 22) = v14;
  if (!v14 && v10[93377])
  {
    v23 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 2) = v23;
    *((_QWORD *)a2 + 4) = v23;
    if (v23)
    {
      v24 = (unsigned int *)(v10 + 16);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 | 0x10, v24));
    }
    if (v10[93379])
      v10[93378] = 1;
    *((_BYTE *)a2 + 86) = 0;
  }
  return result;
}

uint64_t *JSC::JSFunction::allocateAndInitializeRareData(JSC::JSFunction *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  JSC::VM *v11;
  JSC::JSObject *v12;
  JSC::ExecutableBase *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  double v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  v10 = (JSC::VM *)*((_QWORD *)this + 3);
  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v12 = (JSC::JSObject *)JSC::JSFunction::prototypeForConstruction(this, v11, a2, a4, a5, a6, a7, a8);
  v19 = (uint64_t *)JSC::FunctionRareData::create(v11, v10, v13, v14, v15, v16, v17, v18);
  v21 = v19;
  v22 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v23 = v19[4];
  if ((v23 & 1) != 0)
  {
    if ((v19[4] & 6) != 4)
      v19[4] = 3;
  }
  else if (*(unsigned __int8 *)(v23 + 4) - 1 >= 2)
  {
    __dmb(0xAu);
    *(_BYTE *)(v23 + 4) = 1;
    __dmb(0xAu);
  }
  JSC::ObjectAllocationProfileBase<JSC::ObjectAllocationProfileWithPrototype>::initializeProfile(v19 + 1, v11, v22, (JSC::JSCell *)v19, v12, a3, (uint64_t)this, (uint64_t)v19, v20);
  __dmb(0xAu);
  *((_QWORD *)this + 3) = (unint64_t)v21 | 1;
  if (*((_DWORD *)v11 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v11 + 192, (unint64_t)this);
  return v21;
}

uint64_t *JSC::JSFunction::initializeRareData(JSC::JSFunction *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::VM *v11;
  JSC::JSObject *v12;
  double v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v10 = *((_QWORD *)this + 3);
  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v12 = (JSC::JSObject *)JSC::JSFunction::prototypeForConstruction(this, v11, a2, a4, a5, a6, a7, a8);
  v14 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  v15 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v16 = v14[4];
  if ((v16 & 1) != 0)
  {
    if ((v14[4] & 6) != 4)
      v14[4] = 3;
  }
  else if (*(unsigned __int8 *)(v16 + 4) - 1 >= 2)
  {
    __dmb(0xAu);
    *(_BYTE *)(v16 + 4) = 1;
    __dmb(0xAu);
  }
  JSC::ObjectAllocationProfileBase<JSC::ObjectAllocationProfileWithPrototype>::initializeProfile(v14 + 1, v11, v15, (JSC::JSCell *)v14, v12, a3, (uint64_t)this, (uint64_t)v14, v13);
  return v14;
}

void JSC::JSFunction::name(JSC::JSFunction *this@<X0>, JSC::VM *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>, int8x16_t a10@<Q0>)
{
  uint64_t v12;
  int *v13;
  WTF::StringImpl *v14;
  int v15;
  int v16;
  int *v17;
  uint64_t v18;
  int *v19;
  int v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) != 0)
    v12 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v12 + 5) == 8)
  {
    if (&JSC::JSBoundFunction::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
    {
      v13 = *(int **)(v12 + 64);
      if (!v13)
      {
LABEL_7:
        *a9 = v13;
        return;
      }
LABEL_6:
      *v13 += 2;
      goto LABEL_7;
    }
    v18 = *((_QWORD *)this + 9);
    if (!v18)
    {
      JSC::JSBoundFunction::name((unint64_t)this, a10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v18 = *((_QWORD *)this + 9);
    }
    v19 = *(int **)(v18 + 8);
    if ((v19 & 1) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1989AA87CLL);
    }
    if (v19)
      *v19 += 2;
    *a9 = v19;
  }
  else
  {
    v14 = *(WTF::StringImpl **)(*(_QWORD *)(v12 + 88) + 72);
    if (v14)
    {
      v15 = *(_DWORD *)v14;
      *(_DWORD *)v14 += 2;
      if (v14 == *(WTF::StringImpl **)(*((_QWORD *)a2 + 5244) + 104))
      {
        v17 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
        v16 = *(_DWORD *)v14;
      }
      else
      {
        v16 = v15 + 4;
        *(_DWORD *)v14 = v16;
        v17 = (int *)v14;
      }
      *a9 = v17;
      v20 = v16 - 2;
      if (v20)
      {
        *(_DWORD *)v14 = v20;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v14, a2, a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
      }
    }
    else
    {
      if (!*(_QWORD *)(*((_QWORD *)a2 + 5244) + 104))
      {
        v13 = &WTF::StringImpl::s_emptyAtomString;
        goto LABEL_6;
      }
      *a9 = 0;
    }
  }
}

unint64_t JSC::JSBoundFunction::nameString(unint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v12;

  v9 = (_QWORD *)this;
  v10 = *(_QWORD *)(a2 + 72);
  if (!v10)
  {
    this = JSC::JSBoundFunction::name(a2, a9, a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_QWORD *)(a2 + 72);
  }
  v12 = *(_DWORD **)(v10 + 8);
  if ((v12 & 1) != 0)
  {
    this = 893;
    __break(0xC471u);
  }
  else
  {
    if (v12)
      *v12 += 2;
    *v9 = v12;
  }
  return this;
}

void JSC::JSFunction::nameWithoutGC(int **__return_ptr a1@<X8>, JSC::JSFunction *this@<X0>, JSC::VM *a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  int *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;

  v10 = *((_QWORD *)this + 3);
  if ((v10 & 1) != 0)
    v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v10 + 5) == 8)
  {
    if (&JSC::JSBoundFunction::s_info == (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
    {
      JSC::JSBoundFunction::nameStringWithoutGC(a1, this, a3, a4, a5, a6, a7, a8);
      return;
    }
    v23 = *(int **)(v10 + 64);
    if (!v23)
    {
LABEL_14:
      *a1 = v23;
      return;
    }
LABEL_13:
    *v23 += 2;
    goto LABEL_14;
  }
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(v10 + 88) + 72);
  if (!v11)
  {
    if (*(_QWORD *)(*((_QWORD *)a3 + 5244) + 104))
    {
      *a1 = 0;
      return;
    }
    v23 = &WTF::StringImpl::s_emptyAtomString;
    goto LABEL_13;
  }
  v12 = *(_DWORD *)v11;
  *(_DWORD *)v11 += 2;
  if (v11 == *(WTF::StringImpl **)(*((_QWORD *)a3 + 5244) + 104))
  {
    v14 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    v13 = *(_DWORD *)v11;
  }
  else
  {
    v13 = v12 + 4;
    *(_DWORD *)v11 = v13;
    v14 = (int *)v11;
  }
  *a1 = v14;
  if (v13 == 2)
  {
    WTF::StringImpl::~StringImpl(v11, this, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  else
  {
    *(_DWORD *)v11 = v13 - 2;
  }
}

void JSC::JSBoundFunction::nameStringWithoutGC(int **this, JSC::VM *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int *v9;

  v8 = *((_QWORD *)a2 + 9);
  if (v8)
  {
    v9 = *(int **)(v8 + 8);
    if ((v9 & 1) != 0)
    {
      __break(0xC471u);
    }
    else
    {
      if (v9)
        *v9 += 2;
      *this = v9;
    }
  }
  else
  {
    JSC::JSBoundFunction::nameStringWithoutGCSlow(a2, a3, (uint64_t)a3, a4, a5, a6, a7, a8, this);
  }
}

void JSC::JSFunction::displayName(JSC::JSFunction *this@<X0>, JSC::VM *a2@<X1>, const JSC::PropertyTable *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  BOOL v17;
  int *v18;

  JSC::JSObject::getDirect(this, a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1192), a3, a4, a5, a6, a7);
  if (v9)
    v17 = (v9 & 0xFFFE000000000002) == 0;
  else
    v17 = 0;
  if (v17 && *(_BYTE *)(v9 + 5) == 2)
  {
    v18 = *(int **)(v9 + 8);
    if ((v18 & 1) != 0)
    {
      v18 = *JSC::JSRopeString::resolveRope(v9, 0, v10, v11, v16, v12, v13, v14, v15);
      if (!v18)
        goto LABEL_10;
    }
    else if (!v18)
    {
LABEL_10:
      *a8 = v18;
      return;
    }
    *v18 += 2;
    goto LABEL_10;
  }
  *a8 = 0;
}

void JSC::JSFunction::calculatedDisplayName(JSC::JSFunction *this@<X0>, JSC::VM *a2@<X1>, const JSC::PropertyTable *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, WTF::StringImpl **a8@<X8>)
{
  unint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  BOOL v20;
  int *v21;
  int v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  int v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;

  JSC::JSObject::getDirect(this, a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1192), a3, a4, a5, a6, a7);
  if (v11)
    v20 = (v11 & 0xFFFE000000000002) == 0;
  else
    v20 = 0;
  if (v20 && *(_BYTE *)(v11 + 5) == 2)
  {
    v21 = *(int **)(v11 + 8);
    if ((v21 & 1) != 0)
    {
      v21 = *JSC::JSRopeString::resolveRope(v11, 0, v13, v14, v19, v15, v16, v17, v18);
      if (v21)
        goto LABEL_9;
    }
    else if (v21)
    {
LABEL_9:
      *v21 += 2;
      if (v21[1])
      {
        v22 = *v21;
        *v21 += 2;
        *a8 = (WTF::StringImpl *)v21;
        if (!v22)
        {
LABEL_11:
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v21, v12, v13, v14, v15, v16, v17, v18);
          WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
          return;
        }
        goto LABEL_30;
      }
      v31 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v21 = 0;
  }
  v31 = 1;
LABEL_14:
  JSC::JSFunction::name(this, a2, v13, v14, v15, v16, v17, v18, (int **)&v45, v19);
  v32 = v45;
  if (v45 && *((_DWORD *)v45 + 1))
    goto LABEL_26;
  v33 = *((_QWORD *)this + 3);
  if ((v33 & 1) != 0)
    v33 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v33 + 5) != 8)
  {
    v34 = *(_QWORD *)(v33 + 88);
    if ((*(_DWORD *)(v34 + 16) & 0x80000000) == 0)
    {
      v35 = *(WTF::StringImpl **)(v34 + 80);
      if (v35)
        *(_DWORD *)v35 += 2;
      *a8 = v35;
      if (!v32)
      {
LABEL_28:
        if ((v31 & 1) != 0)
          return;
        goto LABEL_29;
      }
      v36 = *(_DWORD *)v32 - 2;
      if (*(_DWORD *)v32 == 2)
        goto LABEL_23;
LABEL_27:
      *(_DWORD *)v32 = v36;
      goto LABEL_28;
    }
  }
  if (v45)
  {
LABEL_26:
    v36 = *(_DWORD *)v45;
    *(_DWORD *)v45 += 2;
    *a8 = v32;
    if (!v36)
    {
LABEL_23:
      WTF::StringImpl::~StringImpl(v32, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      if ((v31 & 1) != 0)
        return;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  *a8 = 0;
  if ((v31 & 1) == 0)
  {
LABEL_29:
    v22 = *v21 - 2;
    if (*v21 == 2)
      goto LABEL_11;
LABEL_30:
    *v21 = v22;
  }
}

unint64_t JSC::JSFunction::toString(JSC::JSFunction *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  char **v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  WTF::AtomStringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::VM *v31;
  _QWORD v32[2];
  WTF::StringImpl *v33;
  const char *v34;
  uint64_t v35;

  v10 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v10 == &JSC::JSBoundFunction::s_info)
  {
    v31 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v34 = "function ";
    v35 = 10;
    JSC::JSBoundFunction::nameString((unint64_t)&v33, (unint64_t)this, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    if (v10 != &JSC::JSRemoteFunction::s_info)
    {
      v11 = *((_QWORD *)this + 3);
      if ((v11 & 1) != 0)
        v11 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v11 + 5) == 8)
      {
        result = *(_QWORD *)(v11 + 72);
        if (!result)
          return JSC::NativeExecutable::toStringSlow((JSC::NativeExecutable *)v11, a2);
      }
      else
      {
        v12 = *(_QWORD *)(v11 + 72);
        if (!v12)
          v12 = JSC::FunctionExecutable::ensureRareDataSlow((JSC::FunctionExecutable *)v11);
        result = *(_QWORD *)(v12 + 40);
        if (!result)
          return JSC::FunctionExecutable::toStringSlow((JSC::FunctionExecutable *)v11, a2);
      }
      return result;
    }
    v31 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v34 = "function ";
    v35 = 10;
    JSC::JSRemoteFunction::nameString((uint64_t)&v33, *((_QWORD *)this + 5));
  }
  v32[0] = "() {\n    [native code]\n}";
  v32[1] = 25;
  v21 = JSC::jsMakeNontrivialString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(a2, (uint64_t)&v34, (uint64_t *)&v33, (uint64_t)v32);
  v22 = v33;
  v33 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v14, v15, v16, v17, v18, v19, v20);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  if (*((_DWORD *)v31 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v31, (uint64_t)v14, v15, v16, v17, v18, v19, v20))
  {
    return 0;
  }
  else
  {
    return v21;
  }
}

uint64_t JSC::jsMakeNontrivialString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;

  v5 = *((_QWORD *)a1 + 7);
  v32 = v5;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral>(a2, a3, a4, (int **)&v31);
  if (v31)
    v12 = JSC::jsNontrivialString(v5, (JSC::VM *)&v31, v6, v7, v8, v9, v10, v11);
  else
    v12 = (uint64_t)JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v32);
  v20 = v12;
  v21 = v31;
  v31 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  return v20;
}

uint64_t JSC::JSRemoteFunction::nameString(uint64_t this, uint64_t a2)
{
  _DWORD *v2;

  if (a2)
  {
    v2 = *(_DWORD **)(a2 + 8);
    if ((v2 & 1) != 0)
    {
      this = 893;
      __break(0xC471u);
    }
    else
    {
      if (v2)
        *v2 += 2;
      *(_QWORD *)this = v2;
    }
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    *(_QWORD *)this = &WTF::StringImpl::s_emptyAtomString;
  }
  return this;
}

uint64_t JSC::JSFunction::sourceCode(JSC::JSFunction *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if ((v1 & 1) != 0)
  {
    v1 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v1 + 5) == 8 || (*(_QWORD *)(*(_QWORD *)(v1 + 88) + 16) & 0x80000000) != 0)
      return 0;
    return v1 + 40;
  }
  if (*(_BYTE *)(v1 + 5) != 8 && (*(_DWORD *)(*(_QWORD *)(v1 + 88) + 16) & 0x80000000) == 0)
    return v1 + 40;
  return 0;
}

BOOL JSC::JSFunction::mayHaveNonReifiedPrototype(JSC::JSFunction *this)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 result;
  _QWORD *v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 3);
  if ((v1 & 1) == 0)
  {
    if (*(_BYTE *)(v1 + 5) != 8)
    {
      v2 = *(_QWORD *)(v1 + 88);
      if ((*(_DWORD *)(v2 + 16) & 0x80000000) == 0)
        goto LABEL_4;
    }
    return 0;
  }
  v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v5 + 5) == 8)
    return 0;
  v2 = *(_QWORD *)(v5 + 88);
  if ((*(_QWORD *)(v2 + 16) & 0x80000000) != 0)
    return 0;
LABEL_4:
  result = 1;
  if (((1 << *(_BYTE *)(v2 + 50)) & 0x78007) == 0)
  {
    v4 = *(_QWORD **)(v2 + 88);
    if (v4)
      return *v4 != 0;
    return 0;
  }
  return result;
}

unint64_t JSC::JSObject::getDirectOffset(_DWORD *a1, JSC::VM *a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int i;
  unint64_t v21;
  unint64_t result;
  uint64_t v23;
  int v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  int j;
  uint64_t v29;

  if (!(a3 >> 4))
    return 0xFFFFFFFFLL;
  v8 = 16 * (*a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v8 + 0x20)) != 0)
    return 0xFFFFFFFFLL;
  v11 = *(_QWORD *)(16 * (*a1 & 0xFFFFFFFE) + 0x58);
  if (!v11)
  {
    v23 = *(_QWORD *)(v8 + 64);
    if (!v23 || *(_BYTE *)(v23 + 5) != 1 && *(_DWORD *)(v23 + 80) < 2u)
      return 0xFFFFFFFFLL;
    JSC::Structure::materializePropertyTable((JSC::Structure *)v8, a2, 1, a4, a5, a6, a7, a8);
    if (!v11)
      return 0xFFFFFFFFLL;
  }
  if (!*(_DWORD *)(v11 + 24))
    return 0xFFFFFFFFLL;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  v14 = *(unsigned int *)(v11 + 8);
  v15 = *(_DWORD *)(a3 + 16);
  if ((v12 & 1) != 0)
  {
    if ((v15 & 0x20) != 0)
      v15 = *(_DWORD *)(a3 + 32);
    v16 = *(_DWORD *)(v11 + 12);
    v17 = (v15 >> 8) & *(_QWORD *)&v16;
    v18 = *(unsigned __int8 *)(v13 + v17);
    if (!*(_BYTE *)(v13 + v17))
      return 0xFFFFFFFFLL;
    v19 = v13 + v14;
    for (i = 1; ; ++i)
    {
      v21 = *(_QWORD *)(v19 + 8 * (v18 - 1));
      if (a3 == (v21 & 0xFFFFFFFFFFFFLL))
        break;
      v17 = ((_DWORD)v17 + i) & v16;
      v18 = *(unsigned __int8 *)(v13 + v17);
      result = 0xFFFFFFFFLL;
      if (!*(_BYTE *)(v13 + v17))
        return result;
    }
    result = (v21 >> 16) & 0xFF00000000 | HIBYTE(v21);
  }
  else
  {
    if ((v15 & 0x20) != 0)
      v15 = *(_DWORD *)(a3 + 32);
    v24 = *(_DWORD *)(v11 + 12);
    v25 = v24 & (v15 >> 8);
    v26 = *(_DWORD *)(v13 + 4 * v25);
    if (!v26)
      return 0xFFFFFFFFLL;
    v27 = v13 + 4 * v14;
    for (j = 1; ; ++j)
    {
      v29 = (v26 - 1);
      if (*(_QWORD *)(v27 + 16 * v29) == a3)
        break;
      v25 = (v25 + j) & v24;
      v26 = *(_DWORD *)(v13 + 4 * v25);
      result = 0xFFFFFFFFLL;
      if (!v26)
        return result;
    }
    result = *(unsigned int *)(v27 + 16 * v29 + 8) | ((unint64_t)*(unsigned __int8 *)(v27 + 16 * v29 + 12) << 32);
  }
  if ((_DWORD)result != -1)
  {
    *(_DWORD *)a4 = HIDWORD(result);
    return result;
  }
  return 0xFFFFFFFFLL;
}

unint64_t JSC::constructPrototypeObject(JSC *this, JSC::JSGlobalObject *a2, JSC::JSFunction *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  JSC *v10;
  uint64_t v11;
  JSC::JSObject **v12;
  int v13;
  JSC::VM *v14;
  JSC::Structure *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  JSC::JSGlobalObject *v27;
  _QWORD v28[2];
  int v29;
  int v30;
  uint64_t v31;

  v10 = (JSC *)*((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 3);
  v12 = *(JSC::JSObject ***)(16 * (**((_DWORD **)a2 + 2) & 0xFFFFFFFE) + 0x28);
  if ((v11 & 1) != 0)
    v11 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFFELL) + 48);
  v13 = 1 << *(_BYTE *)(*(_QWORD *)(v11 + 88) + 50);
  if ((v13 & 0x40004) != 0)
  {
    v27 = v12[90];
  }
  else
  {
    if ((v13 & 0x30000) == 0)
    {
      v14 = (JSC::VM *)JSC::StructureCache::emptyObjectStructureForPrototype((JSC *)((char *)this + 1968), this, v12[82], 6, 0, 0, a7, a8, a9);
      v21 = (int *)JSC::constructEmptyObject(v10, v14, v15, v16, v17, v18, v19, v20);
      v22 = *(_QWORD *)(*((_QWORD *)v10 + 5244) + 1080);
      v28[0] = 0;
      v28[1] = v21;
      v29 = -1;
      v23.n128_u64[0] = 0x100000001000000;
      v30 = 0x1000000;
      v31 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>(v21, (uint64_t)v10, v22, (uint64_t)a2, 4, (uint64_t)v28, v24, v25, v23);
      return (unint64_t)v21;
    }
    v27 = v12[91];
  }
  return JSC::constructEmptyObject(this, v27, a3, a9, a4, a5, a6, a7, a8);
}

uint64_t JSC::JSFunction::reifyLazyPropertyIfNeeded<(JSC::JSFunction::SetHasModifiedLengthOrName)0>(JSC::JSFunction *this, JSC::FunctionRareData *a2, JSC::ExecutableBase *a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  JSC::VM *v18;
  uint64_t v19;
  uint64_t v20;
  JSC *v21;
  const JSC::PropertyTable *v22;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char **v28;
  double v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  unint64_t v37;
  unsigned int v38;
  _QWORD *v39;
  JSC *v40;
  JSC *v41;

  v12 = *((_QWORD *)this + 3);
  if ((v12 & 1) == 0)
  {
    if (*(_BYTE *)(v12 + 5) != 8)
    {
      v13 = *(_QWORD *)(v12 + 88);
      goto LABEL_4;
    }
LABEL_42:
    v28 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
    if (v28 != &JSC::JSBoundFunction::s_info && v28 != &JSC::JSRemoteFunction::s_info)
      goto LABEL_48;
    goto LABEL_47;
  }
  v24 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 48);
  if (*(_BYTE *)(v24 + 5) == 8)
    goto LABEL_42;
  v13 = *(_QWORD *)(v24 + 88);
LABEL_4:
  if ((*(_DWORD *)(v13 + 16) & 0x80000000) != 0)
  {
LABEL_47:
    if (*(const JSC::PropertyTable **)(*((_QWORD *)a2 + 5244) + 1768) == a4)
    {
LABEL_37:
      if ((v12 & 1) != 0)
      {
        v27 = v12 & 0xFFFFFFFFFFFFFFFELL;
        if (v27)
        {
          if ((*(_BYTE *)(v27 + 64) & 1) != 0)
            goto LABEL_50;
        }
      }
      JSC::JSFunction::reifyLength(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
      goto LABEL_40;
    }
LABEL_48:
    result = JSC::JSFunction::reifyLazyBoundNameIfNeeded((unint64_t)this, a2, a3, (uint64_t)a4, a5, a6, a7, a8, (int8x16_t)a9);
    goto LABEL_15;
  }
  v14 = (_QWORD *)*((_QWORD *)a2 + 5244);
  if ((const JSC::PropertyTable *)v14[270] == a4)
  {
    v39 = (_QWORD *)((char *)a2 + 41952);
    v41 = a3;
    if (JSC::JSFunction::mayHaveNonReifiedPrototype(this))
    {
      JSC::JSObject::getDirect(this, a2, (unint64_t)a4, a4, a5, a6, a7, a8);
      if (v31)
      {
LABEL_50:
        result = 1;
        goto LABEL_15;
      }
      v32 = JSC::constructPrototypeObject(v41, this, a3, (uint64_t)a4, a5, a6, a7, a8, v30);
      JSC::JSObject::putDirect((int *)this, (uint64_t)a2, (unint64_t)a4, v32, 12, v36, v33, v34, v35);
LABEL_40:
      result = 2;
      goto LABEL_15;
    }
    a3 = v41;
    v14 = (_QWORD *)*v39;
  }
  if ((const JSC::PropertyTable *)v14[221] == a4)
  {
    v12 = *((_QWORD *)this + 3);
    goto LABEL_37;
  }
  if ((const JSC::PropertyTable *)v14[246] == a4)
  {
    v15 = *((_QWORD *)this + 3);
    if ((v15 & 1) != 0 && (v16 = v15 & 0xFFFFFFFFFFFFFFFELL) != 0 && (*(_BYTE *)(v16 + 64) & 2) != 0)
      LODWORD(result) = 1;
    else
      LODWORD(result) = JSC::JSFunction::reifyName(this, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  else
  {
    LODWORD(result) = 0;
  }
  if ((result - 1) >= 2)
    result = 0;
  else
    result = result;
LABEL_15:
  v18 = (JSC::VM *)*((_QWORD *)this + 3);
  if ((v18 & 1) != 0)
    v19 = *(_QWORD *)(((unint64_t)v18 & 0xFFFFFFFFFFFFFFFELL) + 48);
  else
    v19 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v19 + 5) != 8
     || &JSC::JSBoundFunction::s_info == (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C)))
    && (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x12) & 0x20) != 0)
  {
    v20 = *((_QWORD *)a2 + 5244);
    v21 = *(JSC **)(v20 + 1768);
    v22 = *(const JSC::PropertyTable **)(v20 + 1968);
    if (v21 == a4 || v22 == a4)
    {
      if ((v18 & 1) != 0)
      {
        v25 = (unint64_t)v18 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        v40 = v21;
        v38 = result;
        v37 = JSC::FunctionRareData::create(a2, v18, a3, (uint64_t)a4, a5, a6, a7, a8);
        __dmb(0xAu);
        *((_QWORD *)this + 3) = v37 | 1;
        if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
        result = v38;
        v25 = v37;
        v21 = v40;
      }
      if (v21 == a4)
        v26 = 4;
      else
        v26 = 8;
      *(_BYTE *)(v25 + 64) |= v26;
    }
  }
  return result;
}

void JSC::getCalculatedDisplayName(JSC *this@<X0>, JSC::VM *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, int **a8@<X8>)
{
  int v12;
  uint64_t v13;
  int Concurrently;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x16_t v22;
  int v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  JSC::JSString *v44;
  BOOL v45;
  int *v46;
  WTF::StringImpl *v47;
  int **v48;
  int v49;

  v12 = *((unsigned __int8 *)a2 + 5);
  if ((!a2 || v12 != 26) && (!a2 || (v12 - 29) <= 0xFFFFFFFD))
    goto LABEL_18;
  v13 = 16 * (*(_DWORD *)a2 & 0xFFFFFFFE);
  v49 = 0;
  Concurrently = JSC::Structure::getConcurrently(v13, *(_DWORD **)(*((_QWORD *)this + 5244) + 1192), &v49, a3, a4, a5, a6, a7);
  if (Concurrently == -1
    || (v49 & 0x70) != 0
    || (Concurrently <= 63
      ? (v43 = (char *)a2 + 16)
      : (char *)(v43 = (char *)(*((_QWORD *)a2 + 1) - 8), Concurrently = 63 - Concurrently),
        (v44 = *(JSC::JSString **)&v43[8 * Concurrently]) != 0
      ? (v45 = ((unint64_t)v44 & 0xFFFE000000000002) == 0)
      : (v45 = 0),
        !v45 || *((_BYTE *)v44 + 5) != 2))
  {
    v23 = *((unsigned __int8 *)a2 + 5);
    if (v23 == 26)
    {
      JSC::JSFunction::nameWithoutGC((int **)&v47, a2, this, v17, v18, v19, v20, v21);
      v31 = v47;
      if (v47 && *((_DWORD *)v47 + 1))
        goto LABEL_21;
      v32 = *((_QWORD *)a2 + 3);
      if ((v32 & 1) != 0)
        v32 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFFFELL) + 48);
      if (*(_BYTE *)(v32 + 5) == 8 || (v33 = *(_QWORD *)(v32 + 88), (*(_DWORD *)(v33 + 16) & 0x80000000) != 0))
      {
LABEL_21:
        *a8 = (int *)v47;
      }
      else
      {
        v34 = *(int **)(v33 + 80);
        if (v34)
          *v34 += 2;
        *a8 = v34;
        v47 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
          {
            WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
            WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
          }
          else
          {
            *(_DWORD *)v31 -= 2;
          }
        }
      }
    }
    else
    {
      if ((v23 - 29) < 0xFFFFFFFE)
      {
LABEL_18:
        WTF::StringImpl::s_emptyAtomString += 2;
        *a8 = &WTF::StringImpl::s_emptyAtomString;
        return;
      }
      JSC::InternalFunction::name(a2, v16, v17, v18, v19, v20, v21, a8, v22);
    }
  }
  else
  {
    JSC::JSString::tryGetValueWithoutGC(v44, v15, v16, v17, v18, v19, v20, v21, &v47, v22);
    v46 = *v48;
    if (*v48)
      *v46 += 2;
    *a8 = v46;
  }
}

void JSC::JSFunction::setFunctionName(unint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  JSC::VM *v76;
  WTF::StringImpl *v77;
  char v78;
  WTF::StringImpl *v79;
  char v80;

  v11 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v76 = v11;
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (v13)
    {
      if ((*(_BYTE *)(v13 + 64) & 2) != 0)
        return;
    }
  }
  v75 = 0;
  if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 4)
  {
    v14 = *(WTF::StringImpl **)(a3 + 8);
    if ((v14 & 1) != 0)
      v14 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(a3, a2, a3, a4, a9, a5, a6, a7, a8);
    if (v14)
      *(_DWORD *)v14 += 2;
    v75 = v14;
    if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
      goto LABEL_16;
LABEL_11:
    v15 = v75;
    if (v75)
      *(_DWORD *)v75 += 2;
    v74 = v15;
    JSC::JSFunction::reifyName(a1, (uint64_t)v11, a2, (JSC::VM *)&v74, a5, a6, a7, a8);
    v19 = v74;
    v74 = 0;
    if (!v19)
      goto LABEL_16;
    if (*(_DWORD *)v19 != 2)
    {
      *(_DWORD *)v19 -= 2;
      goto LABEL_16;
    }
    goto LABEL_46;
  }
  v29 = *(WTF::StringImpl **)(a3 + 8);
  v30 = *(_DWORD *)v29;
  *(_DWORD *)v29 += 2;
  if ((*((_BYTE *)v29 + 36) & 1) != 0)
  {
    WTF::String::operator=((unint64_t *)&v75, (WTF::AtomStringImpl *)&WTF::emptyStringData, a3, a4, a5, a6, a7, a8);
LABEL_26:
    if (*(_DWORD *)v29 == 2)
    {
      WTF::StringImpl::~StringImpl(v29, v16, v17, v18, a5, a6, a7, a8);
      WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
    }
    else
    {
      *(_DWORD *)v29 -= 2;
    }
    goto LABEL_11;
  }
  *(_DWORD *)v29 = v30 + 4;
  v80 = 91;
  v79 = v29;
  v78 = 93;
  WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>(&v80, (uint64_t *)&v79, &v78, (int **)&v77);
  v31 = v77;
  if (!v77)
  {
    WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)"Function ", 10, (uint64_t)"name is too long", 17, (int **)&v79);
    JSC::throwOutOfMemoryError(a2, &v76, &v79);
    v48 = v79;
    v79 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v16, v17, v18, a5, a6, a7, a8);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
    v49 = v77;
    v77 = 0;
    v31 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
      {
        WTF::StringImpl::~StringImpl(v49, v16, v17, v18, a5, a6, a7, a8);
        WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
      }
      else
      {
        *(_DWORD *)v49 -= 2;
      }
      v31 = 0;
    }
  }
  v75 = v31;
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::~StringImpl(v29, v16, v17, v18, a5, a6, a7, a8);
    WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
  }
  else
  {
    *(_DWORD *)v29 -= 2;
  }
  if (!*((_DWORD *)v11 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v16, v17, v18, a5, a6, a7, a8))
    goto LABEL_26;
  if (*(_DWORD *)v29 != 2)
  {
    *(_DWORD *)v29 -= 2;
    goto LABEL_16;
  }
  v19 = v29;
LABEL_46:
  WTF::StringImpl::~StringImpl(v19, v16, v17, v18, a5, a6, a7, a8);
  WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
LABEL_16:
  v20 = v75;
  v75 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v16, v17, v18, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
}

uint64_t JSC::JSFunction::reifyName(unint64_t a1, uint64_t a2, JSC::ExecutableBase *a3, JSC::VM *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  JSC::VM *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  const char *v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;

  v92 = (JSC::VM *)a2;
  v12 = *(_QWORD *)(a1 + 24);
  if ((v12 & 1) != 0)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v13 = JSC::FunctionRareData::create((JSC::FunctionRareData *)a2, (JSC::VM *)v12, a3, (uint64_t)a4, a5, a6, a7, a8);
    v12 = v13 | 1;
    __dmb(0xAu);
    *(_QWORD *)(a1 + 24) = v13 | 1;
    if (v13 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a1 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(a2 + 192, a1);
      v12 = *(_QWORD *)(a1 + 24);
    }
  }
  v14 = *(_QWORD *)(a2 + 41952);
  if ((v12 & 1) != 0)
    v15 = *(_QWORD *)(*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFFFELL) + 48) + 88);
  else
    v15 = *(_QWORD *)(v12 + 88);
  v16 = *(unsigned __int8 *)(v15 + 50);
  if (v16 != 3)
  {
    if (v16 != 4)
      goto LABEL_7;
    v43 = *(WTF::StringImpl **)a4;
    if (*(_QWORD *)a4)
      *(_DWORD *)v43 += 2;
    v90 = v43;
    v95 = "set ";
    v96 = 5;
    WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v95, (uint64_t *)&v90, (int **)&v94);
    v44 = v94;
    if (!v94)
    {
      WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)"Setter ", 8, (uint64_t)"name is too long", 17, (int **)&v93);
      JSC::throwOutOfMemoryError(a3, &v92, &v93);
      v72 = v93;
      v93 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
        {
          WTF::StringImpl::~StringImpl(v72, (WTF::AtomStringImpl *)v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
        }
        else
        {
          *(_DWORD *)v72 -= 2;
        }
      }
      v73 = v94;
      v94 = 0;
      v44 = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
        {
          WTF::StringImpl::~StringImpl(v73, (WTF::AtomStringImpl *)v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
        }
        else
        {
          *(_DWORD *)v73 -= 2;
        }
        v44 = 0;
      }
    }
    v45 = *(WTF::StringImpl **)a4;
    *(_QWORD *)a4 = v44;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2)
      {
        WTF::StringImpl::~StringImpl(v45, (WTF::AtomStringImpl *)v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v46, v47, v48, v49, v50, v51, v52, v53);
      }
      else
      {
        *(_DWORD *)v45 -= 2;
      }
    }
    v26 = v90;
    v90 = 0;
    if (!v26)
      goto LABEL_7;
LABEL_17:
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, (WTF::AtomStringImpl *)v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
    goto LABEL_7;
  }
  v23 = *(WTF::StringImpl **)a4;
  if (*(_QWORD *)a4)
    *(_DWORD *)v23 += 2;
  v91 = v23;
  v95 = "get ";
  v96 = 5;
  WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)&v95, (uint64_t *)&v91, (int **)&v94);
  v24 = v94;
  if (!v94)
  {
    WTF::makeString<WTF::ASCIILiteral,WTF::ASCIILiteral>((uint64_t)"Getter ", 8, (uint64_t)"name is too long", 17, (int **)&v93);
    JSC::throwOutOfMemoryError(a3, &v92, &v93);
    v54 = v93;
    v93 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::~StringImpl(v54, (WTF::AtomStringImpl *)v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v54 -= 2;
      }
    }
    v55 = v94;
    v94 = 0;
    v24 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
      {
        WTF::StringImpl::~StringImpl(v55, (WTF::AtomStringImpl *)v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v55 -= 2;
      }
      v24 = 0;
    }
  }
  v25 = *(WTF::StringImpl **)a4;
  *(_QWORD *)a4 = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, (WTF::AtomStringImpl *)v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v26 = v91;
  v91 = 0;
  if (v26)
    goto LABEL_17;
LABEL_7:
  if (*(_DWORD *)(a2 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a2, v12, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 1;
  }
  *(_BYTE *)(v13 + 64) |= 2u;
  v17 = *(_QWORD *)(v14 + 1968);
  v18 = JSC::jsString(a2, a4, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v95 = 0;
  v96 = a1;
  v97 = -1;
  v19.n128_u64[0] = 0x100000001000000;
  v98 = 0x1000000;
  v99 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, a2, v17, v18, 6, (uint64_t)&v95, v20, v21, v19);
  return 2;
}

uint64_t JSC::JSFunction::reifyLength(JSC::JSFunction *this, JSC::VM *a2, JSC::ExecutableBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v11;
  unint64_t v12;
  char **v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  int v24;
  int v25;
  uint64_t v26;

  v11 = (JSC::VM *)*((_QWORD *)this + 3);
  if ((v11 & 1) != 0)
  {
    v12 = (unint64_t)v11 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v21 = JSC::FunctionRareData::create(a2, v11, a3, a4, a5, a6, a7, a8);
    __dmb(0xAu);
    *((_QWORD *)this + 3) = v21 | 1;
    if (v21)
    {
      v22 = v21;
      if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
      v12 = v22;
    }
    else
    {
      v12 = 0;
    }
  }
  v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v13 == &JSC::JSBoundFunction::s_info)
  {
    v15 = *((double *)this + 10);
  }
  else if (v13 == &JSC::JSRemoteFunction::s_info)
  {
    v15 = *((double *)this + 6);
  }
  else
  {
    v14 = *((_QWORD *)this + 3);
    if ((v14 & 1) != 0)
      v14 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v15 = (double)(*(_DWORD *)(*(_QWORD *)(v14 + 88) + 44) & 0x7FFFFFFF);
  }
  if ((*(_QWORD *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (v16 = (int)v15, v15 == (double)(int)v16)
    && ((_DWORD)v16 || (*(_QWORD *)&v15 & 0x8000000000000000) == 0))
  {
    v17 = v16 | 0xFFFE000000000000;
  }
  else
  {
    v17 = *(_QWORD *)&v15 + 0x2000000000000;
  }
  v18 = *((_QWORD *)a2 + 5244);
  *(_BYTE *)(v12 + 64) |= 1u;
  v19 = *(_QWORD *)(v18 + 1768);
  v23[0] = 0;
  v23[1] = this;
  v24 = -1;
  a9.n128_u64[0] = 0x100000001000000;
  v25 = 0x1000000;
  v26 = 0;
  return JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, (uint64_t)a2, v19, v17, 6, (uint64_t)v23, a7, a8, a9);
}

uint64_t JSC::JSFunction::ensureRareData(JSC::JSFunction *this, JSC::VM *a2, JSC::ExecutableBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t result;
  uint64_t v12;

  v9 = (JSC::VM *)*((_QWORD *)this + 3);
  if ((v9 & 1) != 0)
    return (unint64_t)v9 & 0xFFFFFFFFFFFFFFFELL;
  result = JSC::FunctionRareData::create(a2, v9, a3, a4, a5, a6, a7, a8);
  __dmb(0xAu);
  *((_QWORD *)this + 3) = result | 1;
  if (result)
  {
    v12 = result;
    if (*((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
    return v12;
  }
  return result;
}

uint64_t JSC::JSFunction::reifyName(JSC::JSFunction *this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::JSGlobalObject *v39;
  JSC::VM *v40;
  JSC::JSFunction *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 1) != 0)
    v8 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 48);
  v9 = *(_QWORD *)(v8 + 88);
  v43 = 0;
  v10 = *((_QWORD *)a2 + 5244);
  v11 = *(WTF::StringImpl **)(v9 + 80);
  if (v11 == *(WTF::StringImpl **)(v10 + 104))
  {
    v40 = a2;
    v41 = this;
    v39 = a3;
    WTF::String::operator=((unint64_t *)&v43, (WTF::AtomStringImpl *)(v10 + 192), (uint64_t)a3, a4, a5, a6, a7, a8);
    a2 = v40;
    this = v41;
    a3 = v39;
    v11 = v43;
  }
  else
  {
    if (v11)
      *(_DWORD *)v11 += 2;
    v43 = v11;
  }
  if (v11)
    *(_DWORD *)v11 += 2;
  v42 = v11;
  v19 = JSC::JSFunction::reifyName((unint64_t)this, (uint64_t)a2, a3, (JSC::VM *)&v42, a5, a6, a7, a8);
  v20 = v42;
  v42 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  v21 = v43;
  v43 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  return v19;
}

uint64_t JSC::JSFunction::reifyLazyBoundNameIfNeeded(unint64_t this, JSC::VM *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  char *v9;
  uint64_t v10;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  char **v18;
  int *v19;
  unint64_t v20;
  JSC::JSRopeString *v21;
  uint64_t v22;
  int *v23;
  int v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;
  _BOOL4 v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  JSC::VM **v38;
  unint64_t v39;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::JSGlobalObject *v41;
  JSC::JSGlobalObject *v42;
  char *v43;
  int *v44;
  char *v45;
  _QWORD v46[2];
  int v47;
  int v48;
  uint64_t v49;

  v9 = (char *)a2 + 41952;
  v10 = *((_QWORD *)a2 + 5244);
  if (*(_QWORD *)(v10 + 1968) == a4)
  {
    v14 = *(_QWORD *)(this + 24);
    v15 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if ((v14 & 1) != 0 && v15)
    {
      if ((*(_BYTE *)(v15 + 64) & 2) != 0)
        return 1;
    }
    else if ((v14 & 1) == 0)
    {
      if (*(_BYTE *)(v14 + 5) != 8)
      {
        v17 = 1;
        v16 = *(_QWORD *)(this + 24);
LABEL_9:
        if ((*(_DWORD *)(*(_QWORD *)(v16 + 88) + 16) & 0x80000000) != 0)
          return JSC::JSFunction::reifyName((JSC::JSFunction *)this, a2, a3, a4, a5, a6, a7, a8);
        v18 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
        if (v18 != &JSC::JSBoundFunction::s_info)
          goto LABEL_11;
        if (!v17)
          goto LABEL_14;
        goto LABEL_48;
      }
      v18 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
      if (v18 == &JSC::JSBoundFunction::s_info)
      {
LABEL_48:
        v42 = a3;
        v45 = v9;
        v15 = JSC::FunctionRareData::create(a2, (JSC::VM *)v14, a3, a4, a5, a6, a7, a8);
        __dmb(0xAu);
        *(_QWORD *)(this + 24) = v15 | 1;
        if (v15 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, this);
        a3 = v42;
        v9 = v45;
LABEL_14:
        v19 = *(int **)(this + 72);
        if (!v19)
        {
          v38 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
          if ((this & 8) != 0)
            v38 = (JSC::VM **)(this - 16);
          v41 = a3;
          v43 = v9;
          v39 = JSC::JSBoundFunction::nameSlow((JSC::JSBoundFunction *)this, *v38, (uint64_t)a3, 0, a5, a6, a7, a8, a9);
          a3 = v41;
          v9 = v43;
          v19 = (int *)v39;
        }
        v20 = *((_QWORD *)v9 + 28);
        v21 = (JSC::JSRopeString *)*((_QWORD *)a3 + 7);
        v46[0] = v21;
        v22 = *(_QWORD *)(v20 + 8);
        if ((v22 & 1) != 0)
          v23 = (int *)(v20 + 16);
        else
          v23 = (int *)(v22 + 4);
        v24 = *v23;
        if (v24)
        {
          v25 = *((_QWORD *)v19 + 1);
          if ((v25 & 1) != 0)
            v26 = v19 + 4;
          else
            v26 = (int *)(v25 + 4);
          v27 = *v26;
          if (v27)
          {
            v28 = v27 | v24;
            v29 = __OFADD__(v24, v27);
            if (v28 < 0 || v29)
            {
              JSC::throwOutOfMemoryError(a3, v46);
              v19 = 0;
            }
            else
            {
              v19 = (int *)JSC::JSRopeString::create(v21, v20, (JSC::JSString *)v19, (JSC::JSString *)v19, a5, a6, a7, a8);
            }
          }
          else
          {
            v19 = (int *)v20;
          }
        }
        if (!*((_DWORD *)a2 + 20)
          || (v44 = v19,
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(a2, v20, (uint64_t)a3, (uint64_t)v19, a5, a6, a7, a8), v19 = v44, !hasExceptionsAfterHandlingTraps))
        {
          *(_BYTE *)(v15 + 64) |= 2u;
          v30 = *(_QWORD *)(v10 + 1968);
          v46[0] = 0;
          v46[1] = this;
          v47 = -1;
          a9.i64[0] = 0x100000001000000;
          v48 = 0x1000000;
          v49 = 0;
          JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, (uint64_t)a2, v30, (uint64_t)v19, 6, (uint64_t)v46, a7, a8, (__n128)a9);
          return 2;
        }
        return 1;
      }
LABEL_11:
      if (v18 == &JSC::JSRemoteFunction::s_info)
      {
        v31 = v9;
        v32 = JSC::JSFunction::ensureRareData((JSC::JSFunction *)this, a2, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(this + 40))
          v37 = *(_QWORD *)(this + 40);
        else
          v37 = *((_QWORD *)v31 + 2);
        *(_BYTE *)(v32 + 64) |= 2u;
        JSC::JSObject::putDirect((int *)this, (uint64_t)a2, *(_QWORD *)(v10 + 1968), v37, 6, v36, v33, v34, v35);
      }
      return 2;
    }
    v16 = *(_QWORD *)(v15 + 48);
    if (*(_BYTE *)(v16 + 5) != 8)
    {
      v17 = 0;
      goto LABEL_9;
    }
    v18 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
    if (v18 == &JSC::JSBoundFunction::s_info)
      goto LABEL_14;
    goto LABEL_11;
  }
  return 0;
}

unint64_t JSC::JSBoundFunction::name(unint64_t this, int8x16_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::VM **v9;

  if (!*(_QWORD *)(this + 72))
  {
    v9 = (JSC::VM **)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v9 = (JSC::VM **)(this - 16);
    return JSC::JSBoundFunction::nameSlow((JSC::JSBoundFunction *)this, *v9, a4, a5, a6, a7, a8, a9, a2);
  }
  return this;
}

void JSC::JSGenerator::visitChildren(JSC::JSGenerator *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  unint64_t v19;
  int v21;
  unint64_t v22;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if ((v16 & 0xFFFE000000000002) != 0 || v16 == 0)
    goto LABEL_10;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    v18 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_9:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_10;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
LABEL_10:
  v19 = *((_QWORD *)this + 3);
  if ((v19 & 0xFFFE000000000002) == 0 && v19 != 0)
  {
    if ((v19 & 8) != 0)
    {
      if ((*(_BYTE *)(v19 - 79) & 1) != 0)
        goto LABEL_18;
    }
    else
    {
      v21 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000), v21, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v19 & 0xFFFFFFFFFFFFC000) + 8 * ((v19 >> 10) & 0xF) + 0x28) >> (v19 >> 4)) & 1) != 0)
      {
LABEL_18:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_19;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v19, 0, v11, v12, v13, v14, v15);
  }
LABEL_19:
  v22 = *((_QWORD *)this + 4);
  if ((v22 & 0xFFFE000000000002) == 0 && v22 != 0)
  {
    if ((v22 & 8) != 0)
    {
      if ((*(_BYTE *)(v22 - 79) & 1) == 0)
        goto LABEL_55;
    }
    else
    {
      v24 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != v24)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000), v24, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v22 & 0xFFFFFFFFFFFFC000) + 8 * ((v22 >> 10) & 0xF) + 0x28) >> (v22 >> 4)) & 1) == 0)
        goto LABEL_55;
    }
    if (!*((_QWORD *)a2 + 21))
      goto LABEL_28;
LABEL_55:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v22, 0, v11, v12, v13, v14, v15);
  }
LABEL_28:
  v25 = *((_QWORD *)this + 5);
  if ((v25 & 0xFFFE000000000002) == 0 && v25)
  {
    if ((v25 & 8) != 0)
    {
      if ((*(_BYTE *)(v25 - 79) & 1) == 0)
        goto LABEL_57;
    }
    else
    {
      v26 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 0x20) != v26)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000), v26, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v25 & 0xFFFFFFFFFFFFC000) + 8 * ((v25 >> 10) & 0xF) + 0x28) >> (v25 >> 4)) & 1) == 0)
        goto LABEL_57;
    }
    if (!*((_QWORD *)a2 + 21))
      goto LABEL_35;
LABEL_57:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v25, 0, v11, v12, v13, v14, v15);
  }
LABEL_35:
  v27 = *((_QWORD *)this + 6);
  if ((v27 & 0xFFFE000000000002) == 0 && v27)
  {
    if ((v27 & 8) != 0)
    {
      if ((*(_BYTE *)(v27 - 79) & 1) == 0)
        goto LABEL_59;
    }
    else
    {
      v28 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v27 & 0xFFFFFFFFFFFFC000 | 0x20) != v28)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v27 & 0xFFFFFFFFFFFFC000), v28, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v27 & 0xFFFFFFFFFFFFC000) + 8 * ((v27 >> 10) & 0xF) + 0x28) >> (v27 >> 4)) & 1) == 0)
        goto LABEL_59;
    }
    if (!*((_QWORD *)a2 + 21))
      goto LABEL_42;
LABEL_59:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v27, 0, v11, v12, v13, v14, v15);
  }
LABEL_42:
  v29 = *((_QWORD *)this + 7);
  if ((v29 & 0xFFFE000000000002) == 0 && v29)
  {
    if ((v29 & 8) != 0)
    {
      if ((*(_BYTE *)(v29 - 79) & 1) == 0)
        goto LABEL_61;
    }
    else
    {
      v30 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v29 & 0xFFFFFFFFFFFFC000 | 0x20) != v30)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v29 & 0xFFFFFFFFFFFFC000), v30, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v29 & 0xFFFFFFFFFFFFC000) + 8 * ((v29 >> 10) & 0xF) + 0x28) >> (v29 >> 4)) & 1) == 0)
        goto LABEL_61;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_61:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v29, 0, v11, v12, v13, v14, v15);
  }
}

void JSC::JSGenerator::visitChildren(JSC::JSGenerator *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  _QWORD v6[2];
  uint64_t v7;
  char v8;
  _QWORD v9[2];
  _QWORD *v10;
  char v11;

  v6[0] = a2;
  v6[1] = this;
  v8 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v7 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
  }
  else
  {
    v9[0] = a2;
    v9[1] = this;
    v11 = 0;
    v10 = v6;
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren(this, a2, a3);
    if ((*((_QWORD *)this + 2) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 3) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 4) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 5) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 6) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    if ((*((_QWORD *)this + 7) & 0xFFFE000000000002) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v9[0] + 88) = v10;
    *(_QWORD *)(v6[0] + 88) = v7;
  }
}

double JSC::JSGenerator::create(JSC::JSGenerator *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Heap *v10;
  unint64_t SlowCase;
  int v12;
  double result;
  int64x2_t v14;
  unint64_t v15;

  v10 = (JSC::Heap *)*((_QWORD *)this + 5061);
  if (!v10)
    v10 = JSC::GCClient::Heap::generatorSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = *((_QWORD *)v10 + 3);
  if (SlowCase < *((_QWORD *)v10 + 4))
    goto LABEL_4;
  SlowCase = *((_QWORD *)v10 + 5);
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v10 + 6);
    *((_QWORD *)v10 + 4) = SlowCase + HIDWORD(v15);
    *((_QWORD *)v10 + 5) = SlowCase + (int)v15;
LABEL_4:
    *((_QWORD *)v10 + 3) = SlowCase + 64;
    goto LABEL_5;
  }
  JSC::sanitizeStackForVM(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10, (char *)this + 192, 64, 0, 0);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)SlowCase = (unint64_t)a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v12;
  *(_QWORD *)(SlowCase + 56) = 0;
  *(_OWORD *)(SlowCase + 40) = 0u;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_QWORD *)&result = 2;
  v14 = vdupq_n_s64(0xAuLL);
  *(_OWORD *)(SlowCase + 16) = xmmword_1991582D0;
  *(int64x2_t *)(SlowCase + 32) = v14;
  *(int64x2_t *)(SlowCase + 48) = v14;
  return result;
}

unint64_t JSC::JSGeneratorFunction::create(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;

  v8 = *(_DWORD *)(*(_QWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x28) + 988);
  if (v8)
    v9 = 16 * (v8 & 0xFFFFFFFE);
  else
    v9 = 0;
  return JSC::JSGeneratorFunction::create(a1, a2, (uint64_t)a3, v9, a5, a6, a7, a8);
}

unint64_t JSC::JSGeneratorFunction::create(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t SlowCase;

  v10 = *(_QWORD *)(a1 + 38288);
  if (v10 < *(_QWORD *)(a1 + 38296))
    goto LABEL_2;
  v10 = *(_QWORD *)(a1 + 38304);
  if ((v10 & 1) == 0)
  {
    v18 = *(_QWORD *)(v10 + 8) ^ *(_QWORD *)(a1 + 38312);
    *(_QWORD *)(a1 + 38296) = v10 + HIDWORD(v18);
    *(_QWORD *)(a1 + 38304) = v10 + (int)v18;
LABEL_2:
    *(_QWORD *)(a1 + 38288) = v10 + 32;
    goto LABEL_3;
  }
  v19 = a4;
  v20 = a3;
  JSC::sanitizeStackForVM((JSC *)a1, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38264, a1 + 192, 32, 0, 0);
  a3 = v20;
  a4 = v19;
  v10 = SlowCase;
LABEL_3:
  *(_DWORD *)v10 = 0;
  JSC::JSCallee::JSCallee((JSC::JSCell *)v10, a1, a3, a4);
  *(_QWORD *)(v10 + 24) = a2;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v15 = a2[14];
  if ((v15 & 1) != 0)
    v16 = (v15 >> 1) & 3;
  else
    v16 = *(unsigned __int8 *)(v15 + 4);
  if (v16 != 2)
    JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow(a2 + 14, (JSC::VM *)a1, (JSC::JSCell *)a2, v10, (uint64_t)"Allocating a generator function", v11, v12, v13, v14);
  return v10;
}

JSC::JSCell *JSC::JSGeneratorFunction::createWithInvalidatedReallocationWatchpoint(uint64_t a1, JSC::VM *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v9;

  v8 = *(_DWORD *)(*(_QWORD *)(16 * (*a3 & 0xFFFFFFFE) + 0x28) + 988);
  if (v8)
    v9 = 16 * (v8 & 0xFFFFFFFE);
  else
    v9 = 0;
  return JSC::JSAsyncFunction::createImpl(a1, a2, (uint64_t)a3, v9, a5, a6, a7, a8);
}

uint64_t JSC::uint8ArrayPrototypeToBase64(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int8x16_t v20;
  unint64_t v21;
  int *v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  char *v49;
  WTF::AtomStringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  const char *v69;
  uint64_t v70;
  uint16x8_t v72;
  unint64_t v73;
  char v74;
  int v75;
  unint64_t v76;
  char v77;
  JSC::VM *v78;
  WTF::StringImpl *v79;
  char v80;

  v8 = this;
  v9 = *((_QWORD *)this + 7);
  v78 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 40)
  {
    v69 = "Uint8Array.prototype.toBase64 requires that |this| be a Uint8Array";
    v70 = 67;
    return JSC::throwTypeError((unint64_t)this, &v78, (uint64_t)v69, v70);
  }
  if (*((_DWORD *)a2 + 8) == 1 || (v11 = *((_QWORD *)a2 + 6), v11 == 10))
  {
    v12 = 0;
    goto LABEL_38;
  }
  if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
  {
    v69 = "Uint8Array.prototype.toBase64 requires that options be an object";
    v70 = 65;
    return JSC::throwTypeError((unint64_t)this, &v78, (uint64_t)v69, v70);
  }
  v19 = JSC::JSObject::get(*((unsigned int **)a2 + 6), (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 864), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80))
  {
    LODWORD(v24) = *(_DWORD *)(v9 + 80);
    if ((v24 & 0x27) != 0)
      goto LABEL_112;
    goto LABEL_106;
  }
  while (1)
  {
    if (v19 == 10)
      goto LABEL_10;
    if ((v19 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v19 + 5) != 2)
      goto LABEL_84;
    v22 = *(int **)(v19 + 8);
    if ((v22 & 1) == 0)
    {
      if (v22)
      {
LABEL_21:
        v23 = v22[4];
        v24 = (const char *)*((_QWORD *)v22 + 1);
        LODWORD(v22) = v22[1];
        v25 = (v23 >> 2) & 1;
LABEL_22:
        v26 = v22 | (unint64_t)(v25 << 32);
        goto LABEL_70;
      }
LABEL_66:
      v24 = 0;
      v25 = 1;
      goto LABEL_22;
    }
    if ((v22 & 2) == 0)
    {
      v22 = *JSC::JSRopeString::resolveRope(v19, v8, v13, v14, v20, v15, v16, v17, v18);
      if (v22)
        goto LABEL_21;
      goto LABEL_66;
    }
    v28 = *(_QWORD *)((*(_QWORD *)(v19 + 20) & 0xFFFFFFFFFLL) + 8);
    if (!v28
      || (v29 = *(unsigned int *)(v28 + 4),
          v30 = *(_QWORD *)(v19 + 24),
          v31 = v30 >> 16,
          v29 <= (v30 >> 16)))
    {
      v24 = "";
      v26 = 0x100000000;
      goto LABEL_70;
    }
    v32 = *(unsigned int *)(v28 + 16);
    v24 = *(const char **)(v28 + 8);
    v33 = *(_DWORD *)(v19 + 16);
    if ((int)v29 - (int)v31 <= v33)
    {
      v33 = v29 - v31;
      if (!(_DWORD)v31)
      {
        v26 = v29 & 0xFFFFFFFEFFFFFFFFLL | (((v32 >> 2) & 1) << 32);
        goto LABEL_70;
      }
    }
    v34 = (v32 >> 2) & 1;
    v35 = (v30 >> 16);
    v26 = v33;
    v36 = v29 - v31;
    if ((_DWORD)v34)
      break;
    if (v36 >= v33)
    {
      v24 += 2 * v35;
      goto LABEL_70;
    }
LABEL_111:
    __break(1u);
LABEL_112:
    if ((v24 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, v13, v14, v15, v16, v17, v18);
LABEL_106:
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if (v36 < v33)
    goto LABEL_111;
  v24 += v35;
  v26 = v33 | 0x100000000;
LABEL_70:
  if (v24 == "base64url" || (_DWORD)v26 != 9)
  {
    if (v24 == "base64url" && (_DWORD)v26 == 9)
      goto LABEL_79;
    if (v24 == "base64" || (_DWORD)v26 != 6)
    {
      if (v24 != "base64" || (_DWORD)v26 != 6)
        goto LABEL_84;
    }
    else if ((v26 & 0x100000000) != 0)
    {
      if (*v24 != 98 || *(_DWORD *)(v24 + 1) != 912618337 || *(_DWORD *)(v24 + 2) != 875980147)
      {
LABEL_84:
        v69 = "Uint8Array.prototype.toBase64 requires that alphabet be \"base64\" or \"base64url\"";
        this = v8;
        v70 = 80;
        return JSC::throwTypeError((unint64_t)this, &v78, (uint64_t)v69, v70);
      }
    }
    else if (*(_WORD *)v24 != 98
           || *(_QWORD *)(v24 + 2) != 0x36006500730061
           || *(_QWORD *)(v24 + 4) != 0x34003600650073)
    {
      goto LABEL_84;
    }
LABEL_10:
    v12 = 0;
    goto LABEL_11;
  }
  if ((v26 & 0x100000000) == 0)
  {
    if (*(_WORD *)v24 == 98)
    {
      v72 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v24 + 2), (int16x8_t)xmmword_1991582E0);
      v72.i16[0] = vminvq_u16(v72);
      if (v72.i32[0])
        goto LABEL_79;
    }
    goto LABEL_84;
  }
  if (*v24 != 98 || *(_DWORD *)(v24 + 1) != 912618337 || *(_DWORD *)(v24 + 5) != 1819440436)
    goto LABEL_84;
LABEL_79:
  v12 = 1;
LABEL_11:
  v21 = JSC::JSObject::get((unsigned int *)v11, (uint64_t)v8, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2064), v14, v15, v16, v17, v18);
  if (*(_DWORD *)(v9 + 80))
  {
    v75 = *(_DWORD *)(v9 + 80);
    if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 0;
  }
  if (v21 >= 0xFFFE000000000000)
  {
    if (!(_DWORD)v21)
      goto LABEL_38;
    goto LABEL_37;
  }
  if (v21 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (COERCE_DOUBLE(v21 - 0x2000000000000) == 0.0)
      goto LABEL_38;
    goto LABEL_37;
  }
  if ((v21 & 0xFFFE000000000002) != 0)
  {
    if (v21 != 7)
      goto LABEL_38;
LABEL_37:
    v12 |= 2u;
    goto LABEL_38;
  }
  v27 = *(unsigned __int8 *)(v21 + 5);
  if (v27 == 2)
  {
    v67 = *(_QWORD *)(v21 + 8);
    if ((v67 & 1) != 0)
      v68 = (_DWORD *)(v21 + 16);
    else
      v68 = (_DWORD *)(v67 + 4);
    if (*v68)
      goto LABEL_37;
  }
  else if (v27 == 3)
  {
    if (*(_DWORD *)(v21 + 8))
      goto LABEL_37;
  }
  else if ((*(_BYTE *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x28) != v8)
  {
    goto LABEL_37;
  }
LABEL_38:
  LOBYTE(v76) = 0;
  v77 = 0;
  if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, &v76, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v69 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = v8;
    v70 = 72;
    return JSC::throwTypeError((unint64_t)this, &v78, (uint64_t)v69, v70);
  }
  v43 = *(_QWORD *)(v10 + 16);
  if (v43 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v43 = (v43 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if ((*(_BYTE *)(v10 + 40) & 7u) > 2)
  {
    LOBYTE(v79) = 0;
    v80 = 0;
    v73 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v79, v37, v38, v39, v40, v41, v42);
    if (v74)
      v44 = v73;
    else
      v44 = 0;
  }
  else
  {
    v44 = *(_QWORD *)(v10 + 24);
  }
  if ((v44 + 1115575925) >= 0x427E5676)
  {
    if ((v12 & 2) != 0)
    {
      v48 = (4 * v44) | 2;
      if (v48 == 2)
        goto LABEL_46;
      v47 = v48 / 3;
    }
    else
    {
      v46 = (2863311531u * (unint64_t)(v44 + 2)) >> 32;
      v47 = (2 * v46) & 0xFFFFFFFC;
      if (((v46 & 0x40000000) != 0) != __OFSUB__(v44 + 1115575925, 1115575926))
        goto LABEL_120;
    }
    WTF::tryFastCompactMalloc((WTF *)(v47 + 20), &v79);
    v45 = v79;
    if (v79)
    {
      v49 = (char *)v79 + 20;
      *(_DWORD *)v79 = 2;
      *((_DWORD *)v45 + 1) = v47;
      *((_QWORD *)v45 + 1) = (char *)v45 + 20;
      *((_DWORD *)v45 + 4) = 4;
      WTF::base64EncodeInternal<unsigned char>(v43, v44, (uint64_t)v49, v47, v12);
      goto LABEL_55;
    }
LABEL_120:
    __break(0xC471u);
    JUMPOUT(0x1989AD144);
  }
LABEL_46:
  v45 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  WTF::StringImpl::s_emptyAtomString += 2;
LABEL_55:
  v79 = v45;
  v57 = JSC::jsString(v9, (JSC::VM *)&v79, v37, v38, v39, v40, v41, v42);
  v58 = v79;
  v79 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v50, v51, v52, v53, v54, v55, v56);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  return v57;
}

uint64_t JSC::uint8ArrayPrototypeToHex(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const WTF::String *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  JSC::Exception *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  int8x16_t *v40;
  unint64_t v41;
  int8x16_t v42;
  int8x16_t *v43;
  int8x8_t *v44;
  BOOL v45;
  int8x16_t v46;
  unsigned int v47;
  WTF::AtomStringImpl *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v77;
  char v78;
  JSC::VM *v79;
  WTF::StringImpl *v80;
  char v81;

  v8 = (JSC *)this;
  v9 = this[7];
  v79 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 40)
  {
    v72 = "Uint8Array.prototype.toHex requires that |this| be a Uint8Array";
    v73 = 64;
    return JSC::throwTypeError((unint64_t)this, &v79, (uint64_t)v72, v73);
  }
  LOBYTE(v77) = 0;
  v78 = 0;
  if (JSC::isIntegerIndexedObjectOutOfBounds<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, &v77, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v72 = "Underlying ArrayBuffer has been detached from the view or out-of-bounds";
    this = (JSC::VM **)v8;
    v73 = 72;
    return JSC::throwTypeError((unint64_t)this, &v79, (uint64_t)v72, v73);
  }
  v17 = *(_QWORD *)(v10 + 16);
  if (v17 && qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    v17 = (v17 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
  if ((*(_BYTE *)(v10 + 40) & 7u) <= 2)
  {
    v18 = *(_QWORD *)(v10 + 24);
    if (v18)
      goto LABEL_10;
    return *((_QWORD *)v9 + 5246);
  }
  LOBYTE(v80) = 0;
  v81 = 0;
  v74 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v10, (uint64_t)&v80, v11, v12, v13, v14, v15, v16);
  if (!v75)
    return *((_QWORD *)v9 + 5246);
  v18 = v74;
  if (!v74)
    return *((_QWORD *)v9 + 5246);
LABEL_10:
  if ((((unint64_t)v18 >> 30) & 0x1FFFFFFFFLL) != 0)
  {
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v19 = 0x1C00000002;
    *(_QWORD *)(v19 + 8) = "generated stirng is too long";
    *(_DWORD *)(v19 + 16) = 4;
    v80 = (WTF::StringImpl *)v19;
    v21 = JSC::createOutOfMemoryError((unint64_t)v8, &v80, v20);
    v28 = (JSC::Exception *)v21;
    if ((v21 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE) + 0x4C)))
    {
      v28 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)v21, 0, v22, v23, v24, v25, v26);
    }
    JSC::VM::throwException(v9, v8, v28, v27, v22, v23, v24, v25, v26);
    v36 = v80;
    v80 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::~StringImpl(v36, v29, v30, v31, v32, v33, v34, v35);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
    return 0;
  }
  else
  {
    v38 = 2 * v18;
    if (2 * v18)
    {
      v39 = (int *)WTF::fastCompactMalloc((WTF *)(v38 + 20));
      v40 = (int8x16_t *)(v39 + 5);
      *v39 = 2;
      v39[1] = v38;
      *((_QWORD *)v39 + 1) = v39 + 5;
      v39[4] = 4;
    }
    else
    {
      v40 = 0;
      v39 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    v41 = v17 + v18;
    if ((unint64_t)v18 <= 7)
    {
      do
      {
        v47 = *(unsigned __int8 *)v17++;
        v40->i8[0] = JSC::radixDigits[(unint64_t)v47 >> 4];
        v40->i8[1] = JSC::radixDigits[v47 & 0xF];
        v40 = (int8x16_t *)((char *)v40 + 2);
      }
      while (v17 < v41);
    }
    else
    {
      if (v18 >= 8)
      {
        v42.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v42.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v43 = v40;
        do
        {
          v44 = (int8x8_t *)(v17 + 8);
          *v43++ = vqtbl1q_s8((int8x16_t)xmmword_1991582F0, vandq_s8(vorrq_s8((int8x16_t)vshll_n_s8(*(int8x8_t *)v17, 8uLL), (int8x16_t)vshrq_n_u16(vmovl_u8(*(uint8x8_t *)v17), 4uLL)), v42));
          v45 = v17 + 15 >= v41;
          v17 += 8;
        }
        while (!v45);
        v17 = (unint64_t)v44;
      }
      if (v17 < v41)
      {
        v46.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v46.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        *(int8x16_t *)((char *)&v40[-1] + v38) = vqtbl1q_s8((int8x16_t)xmmword_1991582F0, vandq_s8(vorrq_s8((int8x16_t)vshll_n_s8(*(int8x8_t *)(v41 - 8), 8uLL), (int8x16_t)vshrq_n_u16(vmovl_u8(*(uint8x8_t *)(v41 - 8)), 4uLL)), v46));
      }
    }
    v80 = (WTF::StringImpl *)v39;
    v37 = JSC::jsNontrivialString((uint64_t)v9, (JSC::VM *)&v80, v11, v12, v13, v14, v15, v16);
    v55 = v80;
    v80 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
      {
        WTF::StringImpl::~StringImpl(v55, v48, v49, v50, v51, v52, v53, v54);
        WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
      }
      else
      {
        *(_DWORD *)v55 -= 2;
      }
    }
  }
  return v37;
}

void JSC::JSGlobalLexicalEnvironment::destroy(JSC::JSGlobalLexicalEnvironment *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v9 = *((_QWORD *)this + 4);
  v10 = *((unsigned int *)this + 13);
  if (v9)
  {
    v11 = 0;
    while (v10 > v11 >> 4)
    {
      if (v9 == ++v11)
        goto LABEL_5;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_5:
    if ((_DWORD)v10)
    {
      v12 = 0;
      do
        WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v12++), a2, a3, a4, a5, a6, a7, a8);
      while (v12 < *((unsigned int *)this + 13));
    }
    v13 = *((_QWORD *)this + 5);
    if (v13)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

uint64_t JSC::JSGlobalLexicalEnvironment::put(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  JSC::VM *v33;
  uint64_t v34;
  _QWORD v35[3];

  v12 = result;
  v13 = *(_BYTE *)(a5 + 20);
  v14 = *(_QWORD *)(a2 + 56);
  v33 = (JSC::VM *)v14;
  v15 = *(_QWORD *)(result + 24);
  v16 = (unsigned __int8 *)(v15 + 20);
  if (__ldaxr((unsigned __int8 *)(v15 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_4;
  }
  result = WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v15 + 20);
LABEL_4:
  ++*(_DWORD *)(v14 + 916);
  v18 = *(_QWORD *)(v15 + 8);
  if (!v18)
    goto LABEL_50;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *(_DWORD *)(a3 + 16);
  if ((v20 & 0x20) != 0)
    v20 = *(_DWORD *)(a3 + 32);
  v21 = v19 & (v20 >> 8);
  v22 = *(_QWORD *)(v18 + 16 * v21);
  if (v22 != a3)
  {
    v23 = 1;
    while (v22)
    {
      v21 = ((_DWORD)v21 + v23) & v19;
      v22 = *(_QWORD *)(v18 + 16 * v21);
      ++v23;
      if (v22 == a3)
        goto LABEL_15;
    }
    v21 = *(unsigned int *)(v18 - 4);
  }
LABEL_15:
  if (v21 == *(_DWORD *)(v18 - 4))
    goto LABEL_50;
  v24 = *(_QWORD **)(v18 + 16 * v21 + 8);
  v25 = (unint64_t)v24;
  if ((v24 & 1) == 0)
    v25 = *v24 | 1;
  if ((v13 & 2) == 0 && (v25 & 2) != 0)
  {
    JSC::throwTypeError(a2, &v33, (uint64_t)"Attempted to assign to readonly property.", 42);
LABEL_50:
    v29 = 0;
    v28 = 0;
    v27 = 0;
    goto LABEL_26;
  }
  v26 = (v25 >> 6);
  if (v26 == 0xFFFFFFFF || *(_QWORD *)(v12 + 32) <= v26)
    goto LABEL_50;
  if ((v24 & 1) != 0)
    v27 = 0;
  else
    v27 = v24[1];
  if (v26 >> 4 >= *(unsigned int *)(v12 + 52))
  {
    __break(0xC471u);
    return result;
  }
  v28 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v12 + 40) + 8 * (v26 >> 4)) + 8 * ((v25 >> 6) & 0xF));
  v29 = 1;
LABEL_26:
  v30 = __ldxr(v16);
  if (v30 == 1)
  {
    if (!__stlxr(0, v16))
      goto LABEL_31;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, a3, a4, a5, a6, a7, a8);
LABEL_31:
  v31 = *(_DWORD *)(v14 + 916) - 1;
  *(_DWORD *)(v14 + 916) = v31;
  if (*(unsigned __int8 *)(v14 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v32 = v31 == 0;
  else
    v32 = 0;
  if (v32)
  {
    *(_BYTE *)(v14 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v14 + 192, 0);
  }
  if ((_DWORD)v29)
  {
    v34 = a3;
    *v28 = a4;
    if ((a4 & 0xFFFE000000000002) == 0
      && v12
      && a4
      && *(_DWORD *)(v14 + 760) >= *(unsigned __int8 *)(v12 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(v14 + 192, v12);
    }
    if (v27)
    {
      v35[0] = &off_1E3583740;
      v35[1] = v12;
      v35[2] = &v34;
      if (*(_BYTE *)(v27 + 4))
      {
        if (*(_BYTE *)(v27 + 4) == 1)
          JSC::WatchpointSet::fireAllSlow(v27, (JSC::VM *)v14, v35, a4, a5, a6, a7, a8, a9);
      }
      else
      {
        __dmb(0xAu);
        *(_BYTE *)(v27 + 4) = 1;
        __dmb(0xAu);
      }
    }
  }
  return v29;
}

uint64_t JSC::JSGlobalLexicalEnvironment::getOwnPropertySlot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::symbolTableGet<JSC::JSGlobalLexicalEnvironment>(a1, a3, a4, a4, a5, a6, a7, a8);
}

uint64_t JSC::symbolTableGet<JSC::JSGlobalLexicalEnvironment>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;

  v10 = result;
  v11 = *(_QWORD *)(result + 24);
  v12 = (unsigned __int8 *)(v11 + 20);
  if (__ldaxr((unsigned __int8 *)(v11 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_4;
  }
  result = WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v11 + 20);
LABEL_4:
  v14 = *(_QWORD *)(v11 + 8);
  if (!v14)
    goto LABEL_30;
  v15 = *(_DWORD *)(v14 - 8);
  v16 = *(_DWORD *)(a2 + 16);
  if ((v16 & 0x20) != 0)
    v16 = *(_DWORD *)(a2 + 32);
  v17 = v15 & (v16 >> 8);
  v18 = *(_QWORD *)(v14 + 16 * v17);
  if (v18 != a2)
  {
    v19 = 1;
    while (v18)
    {
      v17 = ((_DWORD)v17 + v19) & v15;
      v18 = *(_QWORD *)(v14 + 16 * v17);
      ++v19;
      if (v18 == a2)
        goto LABEL_15;
    }
    v17 = *(unsigned int *)(v14 - 4);
  }
LABEL_15:
  if (v17 == *(_DWORD *)(v14 - 4))
    goto LABEL_30;
  v20 = v14 + 16 * v17;
  v23 = *(unint64_t **)(v20 + 8);
  v21 = (unint64_t *)(v20 + 8);
  v22 = v23;
  if ((v23 & 1) == 0)
    v21 = v22;
  v24 = *v21;
  v25 = (v24 >> 6);
  if (v25 == 0xFFFFFFFF || *(_QWORD *)(v10 + 32) <= v25)
  {
LABEL_30:
    v28 = 0;
LABEL_24:
    v29 = __ldxr(v12);
    if (v29 == 1)
    {
      if (!__stlxr(0, v12))
        return v28;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v11 + 20), 0, a3, a4, a5, a6, a7, a8);
    return v28;
  }
  v26 = v24 & 2;
  if ((v24 & 4) != 0)
    v26 = v24 & 2 | 4;
  v27 = v25 >> 4;
  if (v27 < *(unsigned int *)(v10 + 52))
  {
    *(_QWORD *)a3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 8 * v27) + 8 * ((v24 >> 6) & 0xF));
    *(_DWORD *)(a3 + 16) = v26 | 8;
    *(_QWORD *)(a3 + 32) = v10;
    v28 = 1;
    *(_BYTE *)(a3 + 49) = 1;
    goto LABEL_24;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::JSGlobalLexicalEnvironment::isConstVariable(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD **v20;
  uint64_t v21;
  WTF *v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t **v33;
  uint64_t *i;
  uint64_t *v35;
  uint64_t v36;
  WTF *v37;
  WTF *v38;

  v9 = *(_QWORD *)(a1 + 24);
  v10 = (unsigned __int8 *)(v9 + 20);
  if (__ldaxr((unsigned __int8 *)(v9 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v9 + 20);
LABEL_5:
  v12 = *(_QWORD *)(v9 + 8);
  if (!v12)
  {
LABEL_17:
    v19 = 1;
    goto LABEL_18;
  }
  v13 = *(_DWORD *)(v12 - 8);
  v14 = a2[4];
  if ((v14 & 0x20) != 0)
    v14 = a2[8];
  v15 = v13 & (v14 >> 8);
  v16 = *(_DWORD **)(v12 + 16 * v15);
  if (v16 != a2)
  {
    v17 = 1;
    while (v16)
    {
      v15 = ((_DWORD)v15 + v17) & v13;
      v16 = *(_DWORD **)(v12 + 16 * v15);
      ++v17;
      if (v16 == a2)
        goto LABEL_12;
    }
    goto LABEL_17;
  }
LABEL_12:
  v18 = v12 + 16 * v15;
  v21 = *(_QWORD *)(v18 + 8);
  v20 = (_QWORD **)(v18 + 8);
  v19 = v21;
  v38 = (WTF *)1;
  if ((v21 & 1) != 0)
  {
LABEL_18:
    v38 = (WTF *)v19;
    goto LABEL_19;
  }
  v22 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  v23 = (unsigned int *)(*v20)[1];
  *(_QWORD *)v22 = **v20;
  if (v23)
  {
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    v25 = (unint64_t)v38;
    *((_QWORD *)v22 + 1) = v23;
    if ((v25 & 1) == 0 && v25)
    {
      v37 = v22;
      v30 = *(_QWORD *)(v25 + 8);
      *(_QWORD *)(v25 + 8) = 0;
      if (v30)
      {
        do
        {
          v31 = __ldaxr((unsigned int *)v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, (unsigned int *)v30));
        if (!v32)
        {
          atomic_store(1u, (unsigned int *)v30);
          v33 = (uint64_t **)(v30 + 8);
          for (i = *(uint64_t **)(v30 + 8); i != (uint64_t *)v33; i = *v33)
          {
            v36 = *i;
            v35 = (uint64_t *)i[1];
            *v35 = *i;
            *(_QWORD *)(v36 + 8) = v35;
            *i = 0;
            i[1] = 0;
          }
          WTF::fastFree(v30, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
      v22 = v37;
    }
  }
  else
  {
    *((_QWORD *)v22 + 1) = 0;
  }
  v38 = v22;
LABEL_19:
  v26 = __ldxr(v10);
  if (v26 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v10))
LABEL_23:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v9 + 20), 0, a3, a4, a5, a6, a7, a8);
  v27 = (unint64_t *)&v38;
  if ((v38 & 1) == 0)
    v27 = (unint64_t *)v38;
  v28 = *v27;
  if ((v38 & 1) == 0)
    JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v38, a2, a3, a4, a5, a6, a7, a8);
  return (v28 >> 1) & 1;
}

void JSC::JSGlobalObject::createGlobalFunctionBinding<(JSC::BindingCreationContext)0>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  int v18;
  int v19;
  _BYTE v20[16];
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v10 = *(_QWORD *)(a1 + 56);
  v21 = 0xFFFFFFFF00000000;
  v23 = 0;
  v24 = 0;
  v22 = a1;
  v25 = 0x20000;
  v26 = 0;
  LOBYTE(v27) = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  JSC::JSGlobalObject::getOwnPropertySlot(a1, a1, *a2, (uint64_t)v20, a5, a6, a7, a8);
  if (v18)
  {
    if ((v21 & 8) == 0)
      JSC::JSObject::putDirect((int *)a1, v10, *a2, 10, 8, v17, v14, v15, v16);
  }
  else
  {
    JSC::JSGlobalObject::addSymbolTableEntry((JSC::JSGlobalObject *)a1, (WTF::StringImpl **)a2, v11, v12, v13, v14, v15, v16);
  }
  if (v28)
  {
    v19 = *(_DWORD *)(v27 + 4);
    if (v19)
      *(_DWORD *)(v27 + 4) = v19 - 1;
    else
      __break(0xC471u);
  }
}

void JSC::JSGlobalObject::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  JSC::VM *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned __int16 *v52;
  uint64_t v53;
  unsigned int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  unsigned int v72;

  v9 = a3;
  v12 = *(JSC::VM **)(a2 + 56);
  if (!(a3 >> 4))
    goto LABEL_36;
  v13 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v13 + 0x20)) != 0)
    goto LABEL_36;
  v14 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v14)
  {
    v25 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v25 || *(_BYTE *)(v25 + 5) != 1 && *(_DWORD *)(v25 + 80) < 2u)
      goto LABEL_36;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v14)
      goto LABEL_36;
  }
  if (!*(_DWORD *)(v14 + 24))
    goto LABEL_36;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = v15 & 0xFFFFFFFFFFFFFFFELL;
  v17 = *(unsigned int *)(v14 + 8);
  v18 = *(_DWORD *)(v9 + 16);
  if ((v15 & 1) != 0)
  {
    if ((v18 & 0x20) != 0)
      v18 = *(_DWORD *)(v9 + 32);
    v19 = *(_DWORD *)(v14 + 12);
    v20 = (v18 >> 8) & *(_QWORD *)&v19;
    v21 = *(unsigned __int8 *)(v16 + v20);
    if (!*(_BYTE *)(v16 + v20))
      goto LABEL_36;
    v22 = v16 + v17;
    v23 = 1;
    while (1)
    {
      v24 = *(_QWORD *)(v22 + 8 * (v21 - 1));
      if (v9 == (v24 & 0xFFFFFFFFFFFFLL))
        break;
      v20 = ((_DWORD)v20 + v23) & v19;
      v21 = *(unsigned __int8 *)(v16 + v20);
      ++v23;
      if (!*(_BYTE *)(v16 + v20))
        goto LABEL_36;
    }
    a6 = (v24 >> 16) & 0xFF00000000 | HIBYTE(v24);
  }
  else
  {
    if ((v18 & 0x20) != 0)
      v18 = *(_DWORD *)(v9 + 32);
    v30 = *(_DWORD *)(v14 + 12);
    v31 = v30 & (v18 >> 8);
    v32 = *(_DWORD *)(v16 + 4 * v31);
    if (!v32)
      goto LABEL_36;
    v33 = v16 + 4 * v17;
    v34 = 1;
    while (1)
    {
      v35 = (v32 - 1);
      if (*(_QWORD *)(v33 + 16 * v35) == v9)
        break;
      v31 = (v31 + v34) & v30;
      v32 = *(_DWORD *)(v16 + 4 * v31);
      ++v34;
      if (!v32)
        goto LABEL_36;
    }
    a6 = *(unsigned int *)(v33 + 16 * v35 + 8) | ((unint64_t)*(unsigned __int8 *)(v33 + 16 * v35 + 12) << 32);
  }
  if ((_DWORD)a6 != -1)
  {
    if ((int)a6 <= 63)
    {
      v26 = a1 + 16;
      v27 = a6 << 32;
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 8) - 8;
      v27 = 0x3F00000000 - (a6 << 32);
    }
    v28 = *(_QWORD *)(v26 + (v27 >> 29));
    if ((v28 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v29 = *(unsigned __int8 *)(v28 + 5);
    if (v29 == 5)
    {
      JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v12, a4, v28, SHIDWORD(a6), a6);
    }
    else
    {
      if (v29 != 6)
      {
LABEL_24:
        *(_QWORD *)a4 = v28;
        *(_QWORD *)(a4 + 32) = a1;
        *(_DWORD *)(a4 + 16) = HIDWORD(a6);
        *(_DWORD *)(a4 + 20) = a6;
        *(_WORD *)(a4 + 48) = 257;
        return;
      }
      v65 = *(_DWORD *)(v13 + 16) & 3;
      v67 = *(_QWORD *)(v28 + 8);
      v66 = *(_QWORD *)(v28 + 16);
      if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE)
                                                                               + 0x4C)))
      {
        v69 = *(_QWORD *)(v28 + 24);
        v68 = *(_QWORD *)(v28 + 32);
        *(_QWORD *)a4 = v67;
        *(_QWORD *)(a4 + 8) = v66;
        *(_DWORD *)(a4 + 16) = HIDWORD(a6);
        *(_QWORD *)(a4 + 32) = a1;
        *(_BYTE *)(a4 + 49) = 3;
        if (v65 != 2)
          *(_BYTE *)(a4 + 48) = 1;
        *(_BYTE *)(a4 + 51) = 1;
        *(_QWORD *)(a4 + 72) = v69;
        *(_QWORD *)(a4 + 80) = v68;
      }
      else
      {
        *(_QWORD *)a4 = v67;
        *(_QWORD *)(a4 + 8) = v66;
        *(_DWORD *)(a4 + 16) = HIDWORD(a6);
        *(_QWORD *)(a4 + 32) = a1;
        *(_BYTE *)(a4 + 49) = 3;
        if (v65 != 2)
          *(_BYTE *)(a4 + 48) = 1;
      }
    }
    return;
  }
LABEL_36:
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
    && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v12, v9, a4) & 1) != 0)
  {
    return;
  }
  if (v9)
  {
    v36 = *(_DWORD *)(v9 + 16);
    if ((v36 & 0x20) == 0)
    {
      v37 = *(_BYTE **)(v9 + 8);
      v38 = *(unsigned int *)(v9 + 4);
      if ((v36 & 4) != 0)
      {
        if ((_DWORD)v38)
        {
          v39 = *v37 - 48;
          if (v39 <= 9 && (v38 < 2 || *v37 != 48))
          {
            v70 = v38 - 1;
            v71 = v37 + 1;
            while (v70)
            {
              if (v39 > 0x19999999)
                goto LABEL_42;
              v72 = *v71 - 48;
              if (v72 > 9)
                goto LABEL_42;
              v40 = 0;
              LODWORD(v38) = 0;
              v41 = 0;
              v55 = __CFADD__(v72, 10 * v39);
              v39 = v72 + 10 * v39;
              --v70;
              ++v71;
              if (v55)
                goto LABEL_44;
            }
            goto LABEL_106;
          }
          goto LABEL_42;
        }
      }
      else if ((_DWORD)v38)
      {
        v39 = *(unsigned __int16 *)v37 - 48;
        if (v39 <= 9 && (*(_WORD *)v37 != 48 || v38 <= 1))
        {
          v52 = (unsigned __int16 *)(v37 + 2);
          v53 = v38 - 1;
          while (v53)
          {
            if (v39 > 0x19999999)
              goto LABEL_42;
            v54 = *v52 - 48;
            if (v54 > 9)
              goto LABEL_42;
            v40 = 0;
            LODWORD(v38) = 0;
            v41 = 0;
            v55 = __CFADD__(v54, 10 * v39);
            v39 = v54 + 10 * v39;
            ++v52;
            --v53;
            if (v55)
              goto LABEL_44;
          }
LABEL_106:
          v40 = 0x100000000;
          if (v39 == -1)
          {
            v40 = 0;
            LODWORD(v38) = 0;
          }
          else
          {
            LODWORD(v38) = v39;
          }
          if (v39 == -1)
            v41 = 0;
          else
            v41 = v39 & 0xFFFFFF00;
LABEL_44:
          a3 = v41 | v38;
          if ((v40 & 0x100000000) != 0
            && (JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, (const WTF::StringImpl *)a3, a4, a5, a6, a7, a8) & 1) != 0)
          {
            return;
          }
          goto LABEL_45;
        }
LABEL_42:
        v40 = 0;
        LODWORD(v38) = 0;
LABEL_43:
        v41 = 0;
        goto LABEL_44;
      }
      v40 = 0;
      goto LABEL_43;
    }
  }
LABEL_45:
  v42 = *(_QWORD *)(a1 + 24);
  v43 = (unsigned __int8 *)(v42 + 20);
  if (__ldaxr((unsigned __int8 *)(v42 + 20)))
  {
    __clrex();
LABEL_47:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v42 + 20);
    goto LABEL_48;
  }
  if (__stxr(1u, v43))
    goto LABEL_47;
LABEL_48:
  v45 = *(_QWORD *)(v42 + 8);
  if (v45)
  {
    v46 = *(_DWORD *)(v45 - 8);
    v47 = *(_DWORD *)(v9 + 16);
    if ((v47 & 0x20) != 0)
      v47 = *(_DWORD *)(v9 + 32);
    v48 = v46 & (v47 >> 8);
    v49 = *(_QWORD *)(v45 + 16 * v48);
    if (v49 != v9)
    {
      v50 = 1;
      while (v49)
      {
        v48 = ((_DWORD)v48 + v50) & v46;
        v49 = *(_QWORD *)(v45 + 16 * v48);
        ++v50;
        if (v49 == v9)
          goto LABEL_70;
      }
      v48 = *(unsigned int *)(v45 - 4);
    }
LABEL_70:
    if (v48 != *(_DWORD *)(v45 - 4))
    {
      v57 = v45 + 16 * v48;
      v60 = *(unint64_t **)(v57 + 8);
      v58 = (unint64_t *)(v57 + 8);
      v59 = v60;
      if ((v60 & 1) == 0)
        v58 = v59;
      v61 = *v58;
      v62 = (v61 >> 6);
      if (v62 != 0xFFFFFFFF && *(_QWORD *)(a1 + 32) > v62)
      {
        v63 = v61 & 2;
        if ((v61 & 4) != 0)
          v63 = v61 & 2 | 4;
        v64 = v62 >> 4;
        if (v64 >= *(unsigned int *)(a1 + 52))
        {
          __break(0xC471u);
          return;
        }
        *(_QWORD *)a4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v64) + 8 * ((v61 >> 6) & 0xF));
        *(_DWORD *)(a4 + 16) = v63 | 8;
        *(_QWORD *)(a4 + 32) = a1;
        *(_BYTE *)(a4 + 49) = 1;
      }
    }
  }
  v56 = __ldxr(v43);
  if (v56 == 1)
  {
    if (!__stlxr(0, v43))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v42 + 20), 0, a3, a4, a5, a6, a7, a8);
}

void JSC::JSGlobalObject::addSymbolTableEntry(JSC::JSGlobalObject *this, WTF::StringImpl **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  _BYTE v35[8];
  unsigned __int8 *v36;
  char v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v10 = (unsigned __int8 *)(*((_QWORD *)this + 3) + 20);
  v38 = 0;
  v36 = v10;
  v37 = 1;
  if (__ldaxr(v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v10);
LABEL_4:
  v38 = 1;
  v12 = *((_QWORD *)this + 3);
  v13 = *(_DWORD *)(v12 + 16);
  v14 = (v13 + 1);
  *(_DWORD *)(v12 + 16) = v14;
  v34 = (v14 << 6) | 9;
  if (v13 == -2)
  {
    __break(0xC471u);
    JUMPOUT(0x1989AE34CLL);
  }
  JSC::SymbolTableEntry::prepareToWatch((JSC::SymbolTableEntry *)&v34, a2, a3, a4, a5, a6, a7, a8);
  JSC::SymbolTable::add<JSC::SymbolTableEntry>(*((_QWORD *)this + 3), (WTF::AtomStringImpl *)v35, *a2, &v34, v15, v16, v17, v18);
  v19 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v20 = *v19;
    if ((v20 & 0x40) != 0)
      break;
    v21 = __ldaxr(v19);
    if (v21 == v20)
    {
      if (!__stxr(v20 | 0x40, v19))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v22 = *((_QWORD *)this + 4);
  WTF::SegmentedVector<JSC::WriteBarrier<JSC::Unknown,WTF::RawValueTraits<JSC::Unknown>>,16ul>::grow((uint64_t)this + 32, v22 + 1);
  if (v22 >> 4 >= *((unsigned int *)this + 13))
    goto LABEL_33;
  *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * (v22 >> 4)) + 8 * (v22 & 0xF)) = 10;
  while (1)
  {
    v30 = *v19;
    if ((v30 & 0xC0) != 0x40)
      break;
    v31 = __ldxr(v19);
    if (v31 == v30)
    {
      if (!__stxr(v30 & 0xBF, v19))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v24, v25, v26, v27, v28, v29);
LABEL_16:
  if ((_DWORD)v14 != (_DWORD)v22)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1989AE30CLL);
  }
  if ((v34 & 1) == 0)
    JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v34, v23, v24, v25, v26, v27, v28, v29);
  if (v38 && v37)
  {
    v32 = v36;
    v33 = __ldxr(v36);
    if (v33 == 1)
    {
      if (!__stlxr(0, v36))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v32, 0, v24, v25, v26, v27, v28, v29);
  }
}

void JSC::JSGlobalObject::createGlobalFunctionBinding<(JSC::BindingCreationContext)1>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  int v15;
  unint64_t v16;
  int v17;
  _BYTE v18[16];
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  int v30;
  int v31;
  uint64_t v32;

  v10 = *(_QWORD *)(a1 + 56);
  v19 = 0xFFFFFFFF00000000;
  v21 = 0;
  v22 = 0;
  v20 = a1;
  v23 = 0x20000;
  v24 = 0;
  LOBYTE(v25) = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  JSC::JSGlobalObject::getOwnPropertySlot(a1, a1, *a2, (uint64_t)v18, a5, a6, a7, a8);
  if (v15)
  {
    if ((v19 & 8) == 0)
      JSC::JSObject::putDirect((int *)a1, v10, *a2, 10, 0, v14, v11, v12, v13);
  }
  else
  {
    v16 = *a2;
    v29[0] = 0;
    v29[1] = a1;
    v30 = -1;
    v14.n128_u64[0] = 0x100000001000000;
    v31 = 0x1000000;
    v32 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)a1, v10, v16, 10, 0, (uint64_t)v29, v12, v13, v14);
  }
  if (v26)
  {
    v17 = *(_DWORD *)(v25 + 4);
    if (v17)
      *(_DWORD *)(v25 + 4) = v17 - 1;
    else
      __break(0xC471u);
  }
}

uint64_t JSC::JSGlobalObject::put(unint64_t a1, unint64_t a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  JSC::VM *v28;

  v28 = *(JSC::VM **)(a2 + 56);
  v14 = *(_QWORD *)(a5 + 8);
  if (v14 == a1 || (v14 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v14 + 5) == 32 && *(_QWORD *)(v14 + 16) == a1)
  {
    v15 = *(_BYTE *)(a5 + 20) & 1;
    LOBYTE(v27) = 0;
    if (JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSGlobalObject>(a1, a2, a3, (uint64_t)a4, v15, 0, &v27, a8, a9))return (_BYTE)v27 != 0;
    return JSC::JSObject::put((unsigned __int8 *)a1, a2, a3, a4, a5, v16, v17, v18, v19);
  }
  JSC::SymbolTable::get(*(_QWORD *)(a1 + 24), a3, a3, (uint64_t)a4, a5, a6, a7, a8, &v27);
  v25 = v27;
  if ((v27 & 1) == 0)
  {
    v26 = *(_QWORD *)v27;
    JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v27, v21, v22, v23, v24, v16, v17, v18);
    v25 = v26;
  }
  if (v25 < 2)
    return JSC::JSObject::put((unsigned __int8 *)a1, a2, a3, a4, a5, v16, v17, v18, v19);
  if ((v25 & 2) == 0)
    return JSC::JSObject::definePropertyOnReceiver(a2, a3, (uint64_t)a4, a5, v24, v16, v17, v18, v19);
  if ((*(_BYTE *)(a5 + 20) & 1) != 0)
    JSC::throwTypeError(a2, &v28, (uint64_t)"Attempted to assign to readonly property.", 42);
  return 0;
}

JSC::SymbolTableEntry *JSC::JSGlobalObject::defineOwnProperty(unint64_t a1, JSC::JSGlobalObject *a2, WTF::StringImpl *a3, JSC::PropertyDescriptor *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  JSC::VM *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  int v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::SymbolTableEntry *result;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  _BOOL4 v41;
  double v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  double v46;
  JSC::WatchpointSet *v47;
  _BOOL4 v48;
  char v49;
  _QWORD v50[4];
  uint64_t v51;

  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v51 = 1;
  memset(v50, 0, 24);
  a9.n128_u64[0] = 14;
  v50[3] = 14;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = (unsigned __int8 *)(v15 + 20);
  if (__ldaxr((unsigned __int8 *)(v15 + 20)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v15 + 20);
LABEL_4:
  v18 = *(_QWORD *)(v15 + 8);
  if (!v18)
    goto LABEL_16;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *((_DWORD *)a3 + 4);
  if ((v20 & 0x20) != 0)
    v20 = *((_DWORD *)a3 + 8);
  v21 = v19 & (v20 >> 8);
  v22 = *(WTF::StringImpl **)(v18 + 16 * v21);
  if (v22 != a3)
  {
    v23 = 1;
    while (v22)
    {
      v21 = ((_DWORD)v21 + v23) & v19;
      v22 = *(WTF::StringImpl **)(v18 + 16 * v21);
      ++v23;
      if (v22 == a3)
        goto LABEL_15;
    }
    v21 = *(unsigned int *)(v18 - 4);
  }
LABEL_15:
  if (v21 == *(_DWORD *)(v18 - 4))
    goto LABEL_16;
  result = JSC::SymbolTableEntry::operator=((JSC::SymbolTableEntry *)&v51, (uint64_t *)(v18 + 16 * v21 + 8), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v35 = (uint64_t *)v51;
  if ((v51 & 1) != 0)
    v35 = &v51;
  v36 = *v35;
  v37 = (v36 >> 6);
  if (v37 == 0xFFFFFFFF || *(_QWORD *)(a1 + 32) <= v37)
  {
LABEL_16:
    v24 = 0;
  }
  else
  {
    v38 = v37 >> 4;
    if (v38 >= *(unsigned int *)(a1 + 52))
    {
      __break(0xC471u);
      return result;
    }
    v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v38) + 8 * ((v36 >> 6) & 0xF));
    if ((v36 & 4) != 0)
      v40 = v36 & 2 | 4;
    else
      v40 = v36 & 2;
    JSC::PropertyDescriptor::setDescriptor((uint64_t)v50, v39, v40 | 8);
    v24 = 1;
  }
  v25 = __ldxr(v16);
  if (v25 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, v16))
LABEL_21:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!v24)
  {
    v33 = JSC::JSObject::defineOwnProperty((JSC::JSObject *)a1, a2, (unint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    goto LABEL_24;
  }
  v41 = JSC::validateAndApplyPropertyDescriptor((JSC::VM **)a2, 0, (unint64_t)a3, 0, (uint64_t)a4, 1, (uint64_t)v50, a5, a9);
  if (!*((_DWORD *)v14 + 20))
  {
    if (!v41)
    {
LABEL_54:
      v33 = 0;
      goto LABEL_24;
    }
LABEL_38:
    v28 = *(_QWORD *)a4;
    if (!*(_QWORD *)a4
      || (v49 = 0,
          JSC::symbolTablePut<(JSC::SymbolTablePutMode)0,JSC::JSGlobalObject>(a1, (unint64_t)a2, (uint64_t)a3, v28, a5, 1, &v49, v32, v42), !*((_DWORD *)v14 + 20))|| !JSC::VM::hasExceptionsAfterHandlingTraps(v14, (uint64_t)v26, v27, v28, v29, v30, v31, v32))
    {
      if ((*((_BYTE *)a4 + 28) & 1) != 0 && !JSC::PropertyDescriptor::writable(a4))
      {
        v43 = v51;
        v44 = &v51;
        if ((v51 & 1) == 0)
          v44 = (uint64_t *)v51;
        if ((*(_BYTE *)v44 & 2) == 0)
        {
          if ((v51 & 1) != 0)
          {
            v45 = &v51;
          }
          else
          {
            v45 = (uint64_t *)v51;
            v43 = *(_QWORD *)v51;
          }
          *v45 = v43 | 2;
          JSC::SymbolTable::set<JSC::SymbolTableEntry &>(*(_QWORD *)(a1 + 24), a3, &v51, v28, v29, v30, v31, v32);
          v47 = *(JSC::WatchpointSet **)(a1 + 2064);
          if (*((_BYTE *)v47 + 4) == 1)
            JSC::WatchpointSet::fireAllSlow(v47, v14, "GlobalVar was redefined as ReadOnly", v28, v29, v30, v31, v32, v46);
        }
      }
      v33 = 1;
      goto LABEL_24;
    }
    goto LABEL_54;
  }
  v48 = v41;
  v33 = 0;
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v14, (uint64_t)v26, v27, v28, v29, v30, v31, v32) && v48)
    goto LABEL_38;
LABEL_24:
  if ((v51 & 1) == 0)
    JSC::SymbolTableEntry::freeFatEntrySlow((JSC::SymbolTableEntry *)&v51, v26, v27, v28, v29, v30, v31, v32);
  return (JSC::SymbolTableEntry *)v33;
}

void JSC::JSGlobalObject::visitChildren(JSC::JSGlobalObject *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  int v126;
  unint64_t v127;
  int v128;
  unint64_t v129;
  int v130;
  unint64_t v131;
  int v132;
  unint64_t v133;
  int v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  int v138;
  unint64_t v139;
  int v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  int v146;
  unint64_t v147;
  int v148;
  unint64_t v149;
  int v150;
  unint64_t v151;
  int v152;
  unint64_t v153;
  int v154;
  unint64_t v155;
  int v156;
  unint64_t v157;
  int v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  int v162;
  unint64_t v163;
  int v164;
  unint64_t v165;
  int v166;
  unint64_t v167;
  int v168;
  unint64_t v169;
  int v170;
  unint64_t v171;
  int v172;
  unint64_t v173;
  int v174;
  unint64_t v175;
  int v176;
  unint64_t v177;
  int v178;
  unint64_t v179;
  int v180;
  unint64_t v181;
  int v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  int v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  int v190;
  unint64_t v191;
  int v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  int v196;
  int v197;
  unint64_t v198;
  int v199;
  int v200;
  unint64_t v201;
  int v202;
  int v203;
  unint64_t v204;
  int v205;
  _QWORD *v206;
  uint64_t i;
  int v208;
  unint64_t v209;
  int v210;
  int v211;
  unint64_t v212;
  int v213;
  unint64_t v214;
  BOOL v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  int v220;
  unint64_t v221;
  int v222;
  int v223;
  unint64_t v224;
  int v225;
  int v226;
  unint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  unint64_t v242;
  int v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  unint64_t v249;
  int v250;
  int v251;
  unint64_t v252;
  int v253;
  int v254;
  unint64_t v255;
  int v256;
  int v257;
  unint64_t v258;
  int v259;
  int v260;
  unint64_t v261;
  int v262;
  int v263;
  unint64_t v264;
  int v265;
  int v266;
  unint64_t v267;
  int v268;
  int v269;
  unint64_t v270;
  int v271;
  int v272;
  unint64_t v273;
  int v274;
  int v275;
  unint64_t v276;
  int v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  int v281;
  unint64_t v282;
  int v283;
  int v284;
  unint64_t v285;
  int v286;
  int v287;
  unint64_t v288;
  int v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unsigned int *v303;
  unint64_t *v304;
  uint64_t v305;
  unint64_t v306;
  BOOL v307;
  int v308;
  int v309;
  unint64_t v310;
  int v311;
  int v312;
  unint64_t v313;
  int v314;
  int v315;
  unint64_t v316;
  int v317;
  int v318;
  unint64_t v319;
  int v320;
  int v321;
  unint64_t v322;
  int v323;
  int v324;
  unint64_t v325;
  int v326;
  int v327;
  unint64_t v328;
  int v329;
  int v330;
  unint64_t v331;
  int v332;
  unint64_t v333;
  int v334;
  unint64_t v335;
  int v336;
  unint64_t v337;
  int v338;
  unint64_t v339;
  int v340;
  unint64_t v341;
  int v342;
  unint64_t v343;
  int v344;
  unint64_t v345;
  int v346;
  unint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t *v466;
  unint64_t *v467;
  unint64_t *v468;
  unint64_t *v469;
  unint64_t *v470;
  unint64_t *v471;
  int v472;
  unint64_t *v473;
  unint64_t *v474;
  unint64_t v475;
  BOOL v476;
  int v477;
  unint64_t v478;
  int v479;
  unint64_t v480;
  int v481;
  unint64_t v482;
  int v483;
  unint64_t v484;
  int v485;
  unint64_t v486;
  unint64_t v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  unsigned __int8 *v533;
  int v534;
  int v535;
  unsigned int v536;
  unsigned int v537;
  unsigned int v538;
  unsigned int v539;
  void *v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  void *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  unint64_t v555;
  char isCancelled;
  uint64_t *v557;
  uint64_t v558;
  unint64_t v559;
  unsigned int v560;
  uint64_t *v561;
  void *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  unsigned __int8 *v576;
  unint64_t v577;
  unsigned int v578;
  JSC::JSCell *v579;
  unsigned __int8 *v580;
  uint64_t v581;
  unint64_t *v582;
  unint64_t *v583;
  unint64_t *v584;
  unint64_t *v585;
  unint64_t *v586;
  _QWORD *v587;
  JSC::JSGlobalObject *v588;
  _QWORD v589[3];
  uint64_t v590;
  unsigned int v591;
  unint64_t v592;
  JSC::JSGlobalObject *v593;
  JSC::JSCell *v594;
  unsigned __int8 **v595[2];

  v8 = a2;
  JSC::JSSegmentedVariableObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 8);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      v17 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
      {
LABEL_6:
        if (!*((_QWORD *)v8 + 21))
          goto LABEL_7;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v16, 0, v11, v12, v13, v14, v15);
  }
LABEL_7:
  v18 = *((_QWORD *)this + 9);
  if (!v18)
    goto LABEL_13;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_12;
  }
  else
  {
    v19 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v19)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v19, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_12:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_13;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v18, 0, v11, v12, v13, v14, v15);
LABEL_13:
  v20 = *((_QWORD *)this + 10);
  if (!v20)
    goto LABEL_19;
  if ((v20 & 8) != 0)
  {
    if ((*(_BYTE *)(v20 - 79) & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v21 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != v21)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), v21, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) != 0)
    {
LABEL_18:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_19;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v20, 0, v11, v12, v13, v14, v15);
LABEL_19:
  v22 = *((_QWORD *)this + 11);
  if (!v22)
    goto LABEL_25;
  if ((v22 & 8) != 0)
  {
    if ((*(_BYTE *)(v22 - 79) & 1) != 0)
      goto LABEL_24;
  }
  else
  {
    v23 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != v23)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000), v23, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v22 & 0xFFFFFFFFFFFFC000) + 8 * ((v22 >> 10) & 0xF) + 0x28) >> (v22 >> 4)) & 1) != 0)
    {
LABEL_24:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_25;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v22, 0, v11, v12, v13, v14, v15);
LABEL_25:
  v24 = *((_QWORD *)this + 12);
  if (!v24)
    goto LABEL_31;
  if ((v24 & 8) != 0)
  {
    if ((*(_BYTE *)(v24 - 79) & 1) != 0)
      goto LABEL_30;
  }
  else
  {
    v25 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 0x20) != v25)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v24 & 0xFFFFFFFFFFFFC000), v25, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v24 & 0xFFFFFFFFFFFFC000) + 8 * ((v24 >> 10) & 0xF) + 0x28) >> (v24 >> 4)) & 1) != 0)
    {
LABEL_30:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_31;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v24, 0, v11, v12, v13, v14, v15);
LABEL_31:
  v26 = *((_QWORD *)this + 13);
  if (!v26)
    goto LABEL_37;
  if ((v26 & 8) != 0)
  {
    if ((*(_BYTE *)(v26 - 79) & 1) != 0)
      goto LABEL_36;
  }
  else
  {
    v27 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 0x20) != v27)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v26 & 0xFFFFFFFFFFFFC000), v27, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v26 & 0xFFFFFFFFFFFFC000) + 8 * ((v26 >> 10) & 0xF) + 0x28) >> (v26 >> 4)) & 1) != 0)
    {
LABEL_36:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_37;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v26, 0, v11, v12, v13, v14, v15);
LABEL_37:
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 14, (uint64_t)v8, v10, v11, v12, v13, v14, v15);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 16, (uint64_t)v8, v28, v29, v30, v31, v32, v33);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 18, (uint64_t)v8, v34, v35, v36, v37, v38, v39);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 20, (uint64_t)v8, v40, v41, v42, v43, v44, v45);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 22, (uint64_t)v8, v46, v47, v48, v49, v50, v51);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 24, (uint64_t)v8, v52, v53, v54, v55, v56, v57);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 26, (uint64_t)v8, v58, v59, v60, v61, v62, v63);
  v70 = *((_QWORD *)this + 29);
  if (!v70)
    goto LABEL_43;
  if ((v70 & 8) != 0)
  {
    if ((*(_BYTE *)(v70 - 79) & 1) != 0)
      goto LABEL_42;
  }
  else
  {
    v71 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v70 & 0xFFFFFFFFFFFFC000 | 0x20) != v71)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v70 & 0xFFFFFFFFFFFFC000), v71, v64, v65, v66, v67, v68, v69);
    if (((*(_QWORD *)((v70 & 0xFFFFFFFFFFFFC000) + 8 * ((v70 >> 10) & 0xF) + 0x28) >> (v70 >> 4)) & 1) != 0)
    {
LABEL_42:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_43;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v70, 0, v65, v66, v67, v68, v69);
LABEL_43:
  v72 = *((_QWORD *)this + 30);
  if (!v72)
    goto LABEL_49;
  if ((v72 & 8) != 0)
  {
    if ((*(_BYTE *)(v72 - 79) & 1) != 0)
      goto LABEL_48;
  }
  else
  {
    v73 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v72 & 0xFFFFFFFFFFFFC000 | 0x20) != v73)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v72 & 0xFFFFFFFFFFFFC000), v73, v64, v65, v66, v67, v68, v69);
    if (((*(_QWORD *)((v72 & 0xFFFFFFFFFFFFC000) + 8 * ((v72 >> 10) & 0xF) + 0x28) >> (v72 >> 4)) & 1) != 0)
    {
LABEL_48:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_49;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v72, 0, v65, v66, v67, v68, v69);
LABEL_49:
  v74 = *((_QWORD *)this + 31);
  if (!v74)
    goto LABEL_55;
  if ((v74 & 8) != 0)
  {
    if ((*(_BYTE *)(v74 - 79) & 1) != 0)
      goto LABEL_54;
  }
  else
  {
    v75 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v74 & 0xFFFFFFFFFFFFC000 | 0x20) != v75)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v74 & 0xFFFFFFFFFFFFC000), v75, v64, v65, v66, v67, v68, v69);
    if (((*(_QWORD *)((v74 & 0xFFFFFFFFFFFFC000) + 8 * ((v74 >> 10) & 0xF) + 0x28) >> (v74 >> 4)) & 1) != 0)
    {
LABEL_54:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_55;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v74, 0, v65, v66, v67, v68, v69);
LABEL_55:
  v76 = *((_QWORD *)this + 28);
  if (!v76)
    goto LABEL_61;
  if ((v76 & 8) != 0)
  {
    if ((*(_BYTE *)(v76 - 79) & 1) != 0)
      goto LABEL_60;
  }
  else
  {
    v77 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v76 & 0xFFFFFFFFFFFFC000 | 0x20) != v77)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v76 & 0xFFFFFFFFFFFFC000), v77, v64, v65, v66, v67, v68, v69);
    if (((*(_QWORD *)((v76 & 0xFFFFFFFFFFFFC000) + 8 * ((v76 >> 10) & 0xF) + 0x28) >> (v76 >> 4)) & 1) != 0)
    {
LABEL_60:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_61;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v76, 0, v65, v66, v67, v68, v69);
LABEL_61:
  v78 = *((_QWORD *)this + 32);
  if (!v78)
    goto LABEL_67;
  if ((v78 & 8) != 0)
  {
    if ((*(_BYTE *)(v78 - 79) & 1) != 0)
      goto LABEL_66;
  }
  else
  {
    v79 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v78 & 0xFFFFFFFFFFFFC000 | 0x20) != v79)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v78 & 0xFFFFFFFFFFFFC000), v79, v64, v65, v66, v67, v68, v69);
    if (((*(_QWORD *)((v78 & 0xFFFFFFFFFFFFC000) + 8 * ((v78 >> 10) & 0xF) + 0x28) >> (v78 >> 4)) & 1) != 0)
    {
LABEL_66:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_67;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v78, 0, v65, v66, v67, v68, v69);
LABEL_67:
  v80 = *((_QWORD *)this + 33);
  if (!v80)
    goto LABEL_73;
  if ((v80 & 8) != 0)
  {
    if ((*(_BYTE *)(v80 - 79) & 1) != 0)
      goto LABEL_72;
  }
  else
  {
    v81 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v80 & 0xFFFFFFFFFFFFC000 | 0x20) != v81)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v80 & 0xFFFFFFFFFFFFC000), v81, v64, v65, v66, v67, v68, v69);
    if (((*(_QWORD *)((v80 & 0xFFFFFFFFFFFFC000) + 8 * ((v80 >> 10) & 0xF) + 0x28) >> (v80 >> 4)) & 1) != 0)
    {
LABEL_72:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_73;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v80, 0, v65, v66, v67, v68, v69);
LABEL_73:
  v82 = *((_QWORD *)this + 34);
  if (!v82)
    goto LABEL_79;
  if ((v82 & 8) != 0)
  {
    if ((*(_BYTE *)(v82 - 79) & 1) != 0)
      goto LABEL_78;
  }
  else
  {
    v83 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v82 & 0xFFFFFFFFFFFFC000 | 0x20) != v83)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v82 & 0xFFFFFFFFFFFFC000), v83, v64, v65, v66, v67, v68, v69);
    if (((*(_QWORD *)((v82 & 0xFFFFFFFFFFFFC000) + 8 * ((v82 >> 10) & 0xF) + 0x28) >> (v82 >> 4)) & 1) != 0)
    {
LABEL_78:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_79;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v82, 0, v65, v66, v67, v68, v69);
LABEL_79:
  v84 = *((_QWORD *)this + 35);
  if (v84)
  {
    if ((v84 & 8) != 0)
    {
      if ((*(_BYTE *)(v84 - 79) & 1) == 0)
        goto LABEL_1025;
    }
    else
    {
      v85 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v84 & 0xFFFFFFFFFFFFC000 | 0x20) != v85)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v84 & 0xFFFFFFFFFFFFC000), v85, v64, v65, v66, v67, v68, v69);
      if (((*(_QWORD *)((v84 & 0xFFFFFFFFFFFFC000) + 8 * ((v84 >> 10) & 0xF) + 0x28) >> (v84 >> 4)) & 1) == 0)
        goto LABEL_1025;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_85;
LABEL_1025:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v84, 0, v65, v66, v67, v68, v69);
  }
LABEL_85:
  v86 = *((_QWORD *)this + 36);
  v588 = this;
  if (v86 && (v86 & 1) == 0)
  {
    if ((v86 & 8) != 0)
    {
      v536 = 0;
      if ((*(_BYTE *)(v86 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
        goto LABEL_87;
    }
    else
    {
      v536 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v86 & 0xFFFFFFFFFFFFC000), *((_DWORD *)v8 + 33), v64, v65, v66, v67, v68, v69);
      if (((*(_QWORD *)((v86 & 0xFFFFFFFFFFFFC000) + v536 + 8 * ((v86 >> 10) & 0xF) + 0x28) >> (v86 >> 4)) & 1) != 0
        && !*((_QWORD *)v8 + 21))
      {
        goto LABEL_87;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v86, v536, v65, v66, v67, v68, v69);
  }
LABEL_87:
  v87 = *((_QWORD *)this + 37);
  if (v87 && (v87 & 1) == 0)
  {
    if ((v87 & 8) != 0)
    {
      v538 = 0;
      if ((*(_BYTE *)(v87 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
        goto LABEL_89;
    }
    else
    {
      v538 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v87 & 0xFFFFFFFFFFFFC000), *((_DWORD *)v8 + 33), v64, v65, v66, v67, v68, v69);
      if (((*(_QWORD *)((v87 & 0xFFFFFFFFFFFFC000) + v538 + 8 * ((v87 >> 10) & 0xF) + 0x28) >> (v87 >> 4)) & 1) != 0
        && !*((_QWORD *)v8 + 21))
      {
        goto LABEL_89;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v87, v538, v65, v66, v67, v68, v69);
  }
LABEL_89:
  v88 = *((_QWORD *)this + 38);
  if (!v88 || (v88 & 1) != 0)
    goto LABEL_91;
  if ((v88 & 8) != 0)
  {
    if ((*(_BYTE *)(v88 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_91;
LABEL_699:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v88, 0, v65, v66, v67, v68, v69);
    goto LABEL_91;
  }
  v491 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v88 & 0xFFFFFFFFFFFFC000 | 0x20) != v491)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v88 & 0xFFFFFFFFFFFFC000), v491, v64, v65, v66, v67, v68, v69);
  if (((*(_QWORD *)((v88 & 0xFFFFFFFFFFFFC000) + 8 * ((v88 >> 10) & 0xF) + 0x28) >> (v88 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_699;
  }
LABEL_91:
  v89 = *((_QWORD *)this + 39);
  if (!v89 || (v89 & 1) != 0)
    goto LABEL_93;
  if ((v89 & 8) != 0)
  {
    if ((*(_BYTE *)(v89 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_93;
LABEL_705:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v89, 0, v65, v66, v67, v68, v69);
    goto LABEL_93;
  }
  v492 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v89 & 0xFFFFFFFFFFFFC000 | 0x20) != v492)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v89 & 0xFFFFFFFFFFFFC000), v492, v64, v65, v66, v67, v68, v69);
  if (((*(_QWORD *)((v89 & 0xFFFFFFFFFFFFC000) + 8 * ((v89 >> 10) & 0xF) + 0x28) >> (v89 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_705;
  }
LABEL_93:
  v90 = *((_QWORD *)this + 40);
  if (!v90 || (v90 & 1) != 0)
    goto LABEL_95;
  if ((v90 & 8) != 0)
  {
    if ((*(_BYTE *)(v90 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_95;
LABEL_711:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v90, 0, v65, v66, v67, v68, v69);
    goto LABEL_95;
  }
  v493 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v90 & 0xFFFFFFFFFFFFC000 | 0x20) != v493)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v90 & 0xFFFFFFFFFFFFC000), v493, v64, v65, v66, v67, v68, v69);
  if (((*(_QWORD *)((v90 & 0xFFFFFFFFFFFFC000) + 8 * ((v90 >> 10) & 0xF) + 0x28) >> (v90 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_711;
  }
LABEL_95:
  v91 = *((_QWORD *)this + 41);
  if (!v91 || (v91 & 1) != 0)
    goto LABEL_97;
  if ((v91 & 8) != 0)
  {
    if ((*(_BYTE *)(v91 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_97;
LABEL_717:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v91, 0, v65, v66, v67, v68, v69);
    goto LABEL_97;
  }
  v494 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v91 & 0xFFFFFFFFFFFFC000 | 0x20) != v494)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v91 & 0xFFFFFFFFFFFFC000), v494, v64, v65, v66, v67, v68, v69);
  if (((*(_QWORD *)((v91 & 0xFFFFFFFFFFFFC000) + 8 * ((v91 >> 10) & 0xF) + 0x28) >> (v91 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_717;
  }
LABEL_97:
  v92 = *((_QWORD *)this + 42);
  if (!v92 || (v92 & 1) != 0)
    goto LABEL_99;
  if ((v92 & 8) != 0)
  {
    if ((*(_BYTE *)(v92 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_99;
LABEL_723:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v92, 0, v65, v66, v67, v68, v69);
    goto LABEL_99;
  }
  v495 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v92 & 0xFFFFFFFFFFFFC000 | 0x20) != v495)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v92 & 0xFFFFFFFFFFFFC000), v495, v64, v65, v66, v67, v68, v69);
  if (((*(_QWORD *)((v92 & 0xFFFFFFFFFFFFC000) + 8 * ((v92 >> 10) & 0xF) + 0x28) >> (v92 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_723;
  }
LABEL_99:
  v93 = *((_QWORD *)this + 43);
  if (!v93 || (v93 & 1) != 0)
    goto LABEL_101;
  if ((v93 & 8) != 0)
  {
    if ((*(_BYTE *)(v93 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_101;
LABEL_729:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v93, 0, v65, v66, v67, v68, v69);
    goto LABEL_101;
  }
  v496 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v93 & 0xFFFFFFFFFFFFC000 | 0x20) != v496)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v93 & 0xFFFFFFFFFFFFC000), v496, v64, v65, v66, v67, v68, v69);
  if (((*(_QWORD *)((v93 & 0xFFFFFFFFFFFFC000) + 8 * ((v93 >> 10) & 0xF) + 0x28) >> (v93 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_729;
  }
LABEL_101:
  v94 = *((_QWORD *)this + 44);
  if (!v94 || (v94 & 1) != 0)
    goto LABEL_103;
  if ((v94 & 8) != 0)
  {
    if ((*(_BYTE *)(v94 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_103;
LABEL_735:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v94, 0, v65, v66, v67, v68, v69);
    goto LABEL_103;
  }
  v497 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v94 & 0xFFFFFFFFFFFFC000 | 0x20) != v497)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v94 & 0xFFFFFFFFFFFFC000), v497, v64, v65, v66, v67, v68, v69);
  if (((*(_QWORD *)((v94 & 0xFFFFFFFFFFFFC000) + 8 * ((v94 >> 10) & 0xF) + 0x28) >> (v94 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_735;
  }
LABEL_103:
  v95 = *((_QWORD *)this + 45);
  if (!v95 || (v95 & 1) != 0)
    goto LABEL_105;
  if ((v95 & 8) != 0)
  {
    if ((*(_BYTE *)(v95 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_105;
LABEL_741:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v95, 0, v65, v66, v67, v68, v69);
    goto LABEL_105;
  }
  v498 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v95 & 0xFFFFFFFFFFFFC000 | 0x20) != v498)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v95 & 0xFFFFFFFFFFFFC000), v498, v64, v65, v66, v67, v68, v69);
  if (((*(_QWORD *)((v95 & 0xFFFFFFFFFFFFC000) + 8 * ((v95 >> 10) & 0xF) + 0x28) >> (v95 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_741;
  }
LABEL_105:
  v96 = *((_QWORD *)this + 46);
  if (!v96 || (v96 & 1) != 0)
    goto LABEL_107;
  if ((v96 & 8) != 0)
  {
    if ((*(_BYTE *)(v96 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_107;
LABEL_747:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v96, 0, v65, v66, v67, v68, v69);
    goto LABEL_107;
  }
  v499 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v96 & 0xFFFFFFFFFFFFC000 | 0x20) != v499)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v96 & 0xFFFFFFFFFFFFC000), v499, v64, v65, v66, v67, v68, v69);
  if (((*(_QWORD *)((v96 & 0xFFFFFFFFFFFFC000) + 8 * ((v96 >> 10) & 0xF) + 0x28) >> (v96 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_747;
  }
LABEL_107:
  v97 = *((_QWORD *)this + 47);
  if (!v97 || (v97 & 1) != 0)
    goto LABEL_109;
  if ((v97 & 8) != 0)
  {
    if ((*(_BYTE *)(v97 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_109;
LABEL_753:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v97, 0, v65, v66, v67, v68, v69);
    goto LABEL_109;
  }
  v500 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v97 & 0xFFFFFFFFFFFFC000 | 0x20) != v500)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v97 & 0xFFFFFFFFFFFFC000), v500, v64, v65, v66, v67, v68, v69);
  if (((*(_QWORD *)((v97 & 0xFFFFFFFFFFFFC000) + 8 * ((v97 >> 10) & 0xF) + 0x28) >> (v97 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_753;
  }
LABEL_109:
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 48, (uint64_t)v8, v64, v65, v66, v67, v68, v69);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 50, (uint64_t)v8, v98, v99, v100, v101, v102, v103);
  v110 = *((_QWORD *)this + 52);
  if (!v110 || (v110 & 1) != 0)
    goto LABEL_111;
  if ((v110 & 8) != 0)
  {
    if ((*(_BYTE *)(v110 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_111;
LABEL_759:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v110, 0, v105, v106, v107, v108, v109);
    goto LABEL_111;
  }
  v501 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v110 & 0xFFFFFFFFFFFFC000 | 0x20) != v501)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v110 & 0xFFFFFFFFFFFFC000), v501, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v110 & 0xFFFFFFFFFFFFC000) + 8 * ((v110 >> 10) & 0xF) + 0x28) >> (v110 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_759;
  }
LABEL_111:
  v111 = *((_QWORD *)this + 53);
  if (!v111 || (v111 & 1) != 0)
    goto LABEL_113;
  if ((v111 & 8) != 0)
  {
    if ((*(_BYTE *)(v111 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_113;
LABEL_765:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v111, 0, v105, v106, v107, v108, v109);
    goto LABEL_113;
  }
  v502 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v111 & 0xFFFFFFFFFFFFC000 | 0x20) != v502)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v111 & 0xFFFFFFFFFFFFC000), v502, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v111 & 0xFFFFFFFFFFFFC000) + 8 * ((v111 >> 10) & 0xF) + 0x28) >> (v111 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_765;
  }
LABEL_113:
  v112 = *((_QWORD *)this + 54);
  if (!v112 || (v112 & 1) != 0)
    goto LABEL_115;
  if ((v112 & 8) != 0)
  {
    if ((*(_BYTE *)(v112 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_115;
LABEL_771:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v112, 0, v105, v106, v107, v108, v109);
    goto LABEL_115;
  }
  v503 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v112 & 0xFFFFFFFFFFFFC000 | 0x20) != v503)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v112 & 0xFFFFFFFFFFFFC000), v503, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v112 & 0xFFFFFFFFFFFFC000) + 8 * ((v112 >> 10) & 0xF) + 0x28) >> (v112 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_771;
  }
LABEL_115:
  v113 = *((_QWORD *)this + 55);
  if (!v113 || (v113 & 1) != 0)
    goto LABEL_117;
  if ((v113 & 8) != 0)
  {
    if ((*(_BYTE *)(v113 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_117;
LABEL_777:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v113, 0, v105, v106, v107, v108, v109);
    goto LABEL_117;
  }
  v504 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v113 & 0xFFFFFFFFFFFFC000 | 0x20) != v504)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v113 & 0xFFFFFFFFFFFFC000), v504, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v113 & 0xFFFFFFFFFFFFC000) + 8 * ((v113 >> 10) & 0xF) + 0x28) >> (v113 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_777;
  }
LABEL_117:
  v114 = *((_QWORD *)this + 56);
  if (!v114 || (v114 & 1) != 0)
    goto LABEL_119;
  if ((v114 & 8) != 0)
  {
    if ((*(_BYTE *)(v114 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_119;
LABEL_783:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v114, 0, v105, v106, v107, v108, v109);
    goto LABEL_119;
  }
  v505 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v114 & 0xFFFFFFFFFFFFC000 | 0x20) != v505)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v114 & 0xFFFFFFFFFFFFC000), v505, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v114 & 0xFFFFFFFFFFFFC000) + 8 * ((v114 >> 10) & 0xF) + 0x28) >> (v114 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_783;
  }
LABEL_119:
  v115 = *((_QWORD *)this + 57);
  if (!v115 || (v115 & 1) != 0)
    goto LABEL_121;
  if ((v115 & 8) != 0)
  {
    if ((*(_BYTE *)(v115 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_121;
LABEL_789:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v115, 0, v105, v106, v107, v108, v109);
    goto LABEL_121;
  }
  v506 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v115 & 0xFFFFFFFFFFFFC000 | 0x20) != v506)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v115 & 0xFFFFFFFFFFFFC000), v506, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v115 & 0xFFFFFFFFFFFFC000) + 8 * ((v115 >> 10) & 0xF) + 0x28) >> (v115 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_789;
  }
LABEL_121:
  v116 = *((_QWORD *)this + 58);
  if (!v116 || (v116 & 1) != 0)
    goto LABEL_123;
  if ((v116 & 8) != 0)
  {
    if ((*(_BYTE *)(v116 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_123;
LABEL_795:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v116, 0, v105, v106, v107, v108, v109);
    goto LABEL_123;
  }
  v507 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v116 & 0xFFFFFFFFFFFFC000 | 0x20) != v507)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v116 & 0xFFFFFFFFFFFFC000), v507, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v116 & 0xFFFFFFFFFFFFC000) + 8 * ((v116 >> 10) & 0xF) + 0x28) >> (v116 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_795;
  }
LABEL_123:
  v117 = *((_QWORD *)this + 59);
  if (!v117)
    goto LABEL_129;
  if ((v117 & 8) != 0)
  {
    if ((*(_BYTE *)(v117 - 79) & 1) != 0)
      goto LABEL_128;
  }
  else
  {
    v118 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v117 & 0xFFFFFFFFFFFFC000 | 0x20) != v118)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v117 & 0xFFFFFFFFFFFFC000), v118, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v117 & 0xFFFFFFFFFFFFC000) + 8 * ((v117 >> 10) & 0xF) + 0x28) >> (v117 >> 4)) & 1) != 0)
    {
LABEL_128:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_129;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v117, 0, v105, v106, v107, v108, v109);
LABEL_129:
  v119 = *((_QWORD *)this + 60);
  if (!v119)
    goto LABEL_135;
  if ((v119 & 8) != 0)
  {
    if ((*(_BYTE *)(v119 - 79) & 1) != 0)
      goto LABEL_134;
  }
  else
  {
    v120 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v119 & 0xFFFFFFFFFFFFC000 | 0x20) != v120)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v119 & 0xFFFFFFFFFFFFC000), v120, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v119 & 0xFFFFFFFFFFFFC000) + 8 * ((v119 >> 10) & 0xF) + 0x28) >> (v119 >> 4)) & 1) != 0)
    {
LABEL_134:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_135;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v119, 0, v105, v106, v107, v108, v109);
LABEL_135:
  v121 = *((_QWORD *)this + 61);
  if (v121)
  {
    if ((v121 & 8) != 0)
    {
      if ((*(_BYTE *)(v121 - 79) & 1) == 0)
        goto LABEL_1031;
    }
    else
    {
      v122 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v121 & 0xFFFFFFFFFFFFC000 | 0x20) != v122)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v121 & 0xFFFFFFFFFFFFC000), v122, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v121 & 0xFFFFFFFFFFFFC000) + 8 * ((v121 >> 10) & 0xF) + 0x28) >> (v121 >> 4)) & 1) == 0)
        goto LABEL_1031;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_141;
LABEL_1031:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v121, 0, v105, v106, v107, v108, v109);
  }
LABEL_141:
  v123 = *((_QWORD *)this + 62);
  if (v123 && (v123 & 1) == 0)
  {
    if ((v123 & 8) != 0)
    {
      if ((*(_BYTE *)(v123 - 79) & 1) == 0)
        goto LABEL_1105;
    }
    else
    {
      v124 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v123 & 0xFFFFFFFFFFFFC000 | 0x20) != v124)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v123 & 0xFFFFFFFFFFFFC000), v124, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v123 & 0xFFFFFFFFFFFFC000) + 8 * ((v123 >> 10) & 0xF) + 0x28) >> (v123 >> 4)) & 1) == 0)
        goto LABEL_1105;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_148;
LABEL_1105:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v123, 0, v105, v106, v107, v108, v109);
  }
LABEL_148:
  v125 = *((_QWORD *)this + 63);
  if (v125 && (v125 & 1) == 0)
  {
    if ((v125 & 8) != 0)
    {
      if ((*(_BYTE *)(v125 - 79) & 1) == 0)
        goto LABEL_1107;
    }
    else
    {
      v126 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v125 & 0xFFFFFFFFFFFFC000 | 0x20) != v126)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v125 & 0xFFFFFFFFFFFFC000), v126, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v125 & 0xFFFFFFFFFFFFC000) + 8 * ((v125 >> 10) & 0xF) + 0x28) >> (v125 >> 4)) & 1) == 0)
        goto LABEL_1107;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_155;
LABEL_1107:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v125, 0, v105, v106, v107, v108, v109);
  }
LABEL_155:
  v127 = *((_QWORD *)this + 64);
  if (v127 && (v127 & 1) == 0)
  {
    if ((v127 & 8) != 0)
    {
      if ((*(_BYTE *)(v127 - 79) & 1) == 0)
        goto LABEL_1109;
    }
    else
    {
      v128 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v127 & 0xFFFFFFFFFFFFC000 | 0x20) != v128)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v127 & 0xFFFFFFFFFFFFC000), v128, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v127 & 0xFFFFFFFFFFFFC000) + 8 * ((v127 >> 10) & 0xF) + 0x28) >> (v127 >> 4)) & 1) == 0)
        goto LABEL_1109;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_162;
LABEL_1109:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v127, 0, v105, v106, v107, v108, v109);
  }
LABEL_162:
  v129 = *((_QWORD *)this + 65);
  if (v129 && (v129 & 1) == 0)
  {
    if ((v129 & 8) != 0)
    {
      if ((*(_BYTE *)(v129 - 79) & 1) == 0)
        goto LABEL_1111;
    }
    else
    {
      v130 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v129 & 0xFFFFFFFFFFFFC000 | 0x20) != v130)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v129 & 0xFFFFFFFFFFFFC000), v130, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v129 & 0xFFFFFFFFFFFFC000) + 8 * ((v129 >> 10) & 0xF) + 0x28) >> (v129 >> 4)) & 1) == 0)
        goto LABEL_1111;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_169;
LABEL_1111:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v129, 0, v105, v106, v107, v108, v109);
  }
LABEL_169:
  v131 = *((_QWORD *)this + 66);
  if (v131 && (v131 & 1) == 0)
  {
    if ((v131 & 8) != 0)
    {
      if ((*(_BYTE *)(v131 - 79) & 1) == 0)
        goto LABEL_1113;
    }
    else
    {
      v132 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v131 & 0xFFFFFFFFFFFFC000 | 0x20) != v132)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v131 & 0xFFFFFFFFFFFFC000), v132, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v131 & 0xFFFFFFFFFFFFC000) + 8 * ((v131 >> 10) & 0xF) + 0x28) >> (v131 >> 4)) & 1) == 0)
        goto LABEL_1113;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_176;
LABEL_1113:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v131, 0, v105, v106, v107, v108, v109);
  }
LABEL_176:
  v133 = *((_QWORD *)this + 67);
  if (v133 && (v133 & 1) == 0)
  {
    if ((v133 & 8) != 0)
    {
      if ((*(_BYTE *)(v133 - 79) & 1) != 0)
        goto LABEL_182;
    }
    else
    {
      v134 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v133 & 0xFFFFFFFFFFFFC000 | 0x20) != v134)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v133 & 0xFFFFFFFFFFFFC000), v134, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v133 & 0xFFFFFFFFFFFFC000) + 8 * ((v133 >> 10) & 0xF) + 0x28) >> (v133 >> 4)) & 1) != 0)
      {
LABEL_182:
        if (!*((_QWORD *)v8 + 21))
          goto LABEL_183;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v133, 0, v105, v106, v107, v108, v109);
  }
LABEL_183:
  v135 = *((_QWORD *)this + 69);
  if (v135)
  {
    if ((v135 & 8) != 0)
    {
      if ((*(_BYTE *)(v135 - 79) & 1) == 0)
        goto LABEL_1033;
    }
    else
    {
      v136 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v135 & 0xFFFFFFFFFFFFC000 | 0x20) != v136)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v135 & 0xFFFFFFFFFFFFC000), v136, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v135 & 0xFFFFFFFFFFFFC000) + 8 * ((v135 >> 10) & 0xF) + 0x28) >> (v135 >> 4)) & 1) == 0)
        goto LABEL_1033;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_189;
LABEL_1033:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v135, 0, v105, v106, v107, v108, v109);
  }
LABEL_189:
  v137 = *((_QWORD *)this + 68);
  if (v137 && (v137 & 1) == 0)
  {
    if ((v137 & 8) != 0)
    {
      if ((*(_BYTE *)(v137 - 79) & 1) != 0)
        goto LABEL_195;
    }
    else
    {
      v138 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v137 & 0xFFFFFFFFFFFFC000 | 0x20) != v138)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v137 & 0xFFFFFFFFFFFFC000), v138, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v137 & 0xFFFFFFFFFFFFC000) + 8 * ((v137 >> 10) & 0xF) + 0x28) >> (v137 >> 4)) & 1) != 0)
      {
LABEL_195:
        if (!*((_QWORD *)v8 + 21))
          goto LABEL_196;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v137, 0, v105, v106, v107, v108, v109);
  }
LABEL_196:
  v139 = *((_QWORD *)this + 70);
  if (!v139)
    goto LABEL_202;
  if ((v139 & 8) != 0)
  {
    if ((*(_BYTE *)(v139 - 79) & 1) != 0)
      goto LABEL_201;
  }
  else
  {
    v140 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v139 & 0xFFFFFFFFFFFFC000 | 0x20) != v140)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v139 & 0xFFFFFFFFFFFFC000), v140, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v139 & 0xFFFFFFFFFFFFC000) + 8 * ((v139 >> 10) & 0xF) + 0x28) >> (v139 >> 4)) & 1) != 0)
    {
LABEL_201:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_202;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v139, 0, v105, v106, v107, v108, v109);
LABEL_202:
  v141 = *((_QWORD *)this + 71);
  if (!v141)
    goto LABEL_208;
  if ((v141 & 8) != 0)
  {
    if ((*(_BYTE *)(v141 - 79) & 1) != 0)
      goto LABEL_207;
  }
  else
  {
    v142 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v141 & 0xFFFFFFFFFFFFC000 | 0x20) != v142)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v141 & 0xFFFFFFFFFFFFC000), v142, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v141 & 0xFFFFFFFFFFFFC000) + 8 * ((v141 >> 10) & 0xF) + 0x28) >> (v141 >> 4)) & 1) != 0)
    {
LABEL_207:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_208;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v141, 0, v105, v106, v107, v108, v109);
LABEL_208:
  v143 = *((_QWORD *)this + 72);
  if (!v143)
    goto LABEL_214;
  if ((v143 & 8) != 0)
  {
    if ((*(_BYTE *)(v143 - 79) & 1) != 0)
      goto LABEL_213;
  }
  else
  {
    v144 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v143 & 0xFFFFFFFFFFFFC000 | 0x20) != v144)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v143 & 0xFFFFFFFFFFFFC000), v144, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v143 & 0xFFFFFFFFFFFFC000) + 8 * ((v143 >> 10) & 0xF) + 0x28) >> (v143 >> 4)) & 1) != 0)
    {
LABEL_213:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_214;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v143, 0, v105, v106, v107, v108, v109);
LABEL_214:
  v145 = *((_QWORD *)this + 73);
  if (!v145)
    goto LABEL_220;
  if ((v145 & 8) != 0)
  {
    if ((*(_BYTE *)(v145 - 79) & 1) != 0)
      goto LABEL_219;
  }
  else
  {
    v146 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v145 & 0xFFFFFFFFFFFFC000 | 0x20) != v146)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v145 & 0xFFFFFFFFFFFFC000), v146, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v145 & 0xFFFFFFFFFFFFC000) + 8 * ((v145 >> 10) & 0xF) + 0x28) >> (v145 >> 4)) & 1) != 0)
    {
LABEL_219:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_220;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v145, 0, v105, v106, v107, v108, v109);
LABEL_220:
  v147 = *((_QWORD *)this + 74);
  if (!v147)
    goto LABEL_226;
  if ((v147 & 8) != 0)
  {
    if ((*(_BYTE *)(v147 - 79) & 1) != 0)
      goto LABEL_225;
  }
  else
  {
    v148 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v147 & 0xFFFFFFFFFFFFC000 | 0x20) != v148)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v147 & 0xFFFFFFFFFFFFC000), v148, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v147 & 0xFFFFFFFFFFFFC000) + 8 * ((v147 >> 10) & 0xF) + 0x28) >> (v147 >> 4)) & 1) != 0)
    {
LABEL_225:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_226;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v147, 0, v105, v106, v107, v108, v109);
LABEL_226:
  v149 = *((_QWORD *)this + 75);
  if (!v149)
    goto LABEL_232;
  if ((v149 & 8) != 0)
  {
    if ((*(_BYTE *)(v149 - 79) & 1) != 0)
      goto LABEL_231;
  }
  else
  {
    v150 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v149 & 0xFFFFFFFFFFFFC000 | 0x20) != v150)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v149 & 0xFFFFFFFFFFFFC000), v150, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v149 & 0xFFFFFFFFFFFFC000) + 8 * ((v149 >> 10) & 0xF) + 0x28) >> (v149 >> 4)) & 1) != 0)
    {
LABEL_231:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_232;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v149, 0, v105, v106, v107, v108, v109);
LABEL_232:
  v151 = *((_QWORD *)this + 76);
  if (!v151)
    goto LABEL_238;
  if ((v151 & 8) != 0)
  {
    if ((*(_BYTE *)(v151 - 79) & 1) != 0)
      goto LABEL_237;
  }
  else
  {
    v152 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v151 & 0xFFFFFFFFFFFFC000 | 0x20) != v152)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v151 & 0xFFFFFFFFFFFFC000), v152, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v151 & 0xFFFFFFFFFFFFC000) + 8 * ((v151 >> 10) & 0xF) + 0x28) >> (v151 >> 4)) & 1) != 0)
    {
LABEL_237:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_238;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v151, 0, v105, v106, v107, v108, v109);
LABEL_238:
  v153 = *((_QWORD *)this + 77);
  if (!v153)
    goto LABEL_244;
  if ((v153 & 8) != 0)
  {
    if ((*(_BYTE *)(v153 - 79) & 1) != 0)
      goto LABEL_243;
  }
  else
  {
    v154 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v153 & 0xFFFFFFFFFFFFC000 | 0x20) != v154)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v153 & 0xFFFFFFFFFFFFC000), v154, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v153 & 0xFFFFFFFFFFFFC000) + 8 * ((v153 >> 10) & 0xF) + 0x28) >> (v153 >> 4)) & 1) != 0)
    {
LABEL_243:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_244;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v153, 0, v105, v106, v107, v108, v109);
LABEL_244:
  v155 = *((_QWORD *)this + 78);
  if (!v155)
    goto LABEL_250;
  if ((v155 & 8) != 0)
  {
    if ((*(_BYTE *)(v155 - 79) & 1) != 0)
      goto LABEL_249;
  }
  else
  {
    v156 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v155 & 0xFFFFFFFFFFFFC000 | 0x20) != v156)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v155 & 0xFFFFFFFFFFFFC000), v156, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v155 & 0xFFFFFFFFFFFFC000) + 8 * ((v155 >> 10) & 0xF) + 0x28) >> (v155 >> 4)) & 1) != 0)
    {
LABEL_249:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_250;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v155, 0, v105, v106, v107, v108, v109);
LABEL_250:
  v157 = *((_QWORD *)this + 79);
  if (v157)
  {
    if ((v157 & 8) != 0)
    {
      if ((*(_BYTE *)(v157 - 79) & 1) == 0)
        goto LABEL_1053;
    }
    else
    {
      v158 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v157 & 0xFFFFFFFFFFFFC000 | 0x20) != v158)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v157 & 0xFFFFFFFFFFFFC000), v158, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v157 & 0xFFFFFFFFFFFFC000) + 8 * ((v157 >> 10) & 0xF) + 0x28) >> (v157 >> 4)) & 1) == 0)
        goto LABEL_1053;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_256;
LABEL_1053:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v157, 0, v105, v106, v107, v108, v109);
  }
LABEL_256:
  v159 = *((_QWORD *)this + 80);
  if (v159 && (v159 & 1) == 0)
  {
    if ((v159 & 8) != 0)
    {
      v537 = 0;
      if ((*(_BYTE *)(v159 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
        goto LABEL_258;
    }
    else
    {
      v537 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v159 & 0xFFFFFFFFFFFFC000), *((_DWORD *)v8 + 33), v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v159 & 0xFFFFFFFFFFFFC000) + v537 + 8 * ((v159 >> 10) & 0xF) + 0x28) >> (v159 >> 4)) & 1) != 0
        && !*((_QWORD *)v8 + 21))
      {
        goto LABEL_258;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v159, v537, v105, v106, v107, v108, v109);
  }
LABEL_258:
  v160 = *((_QWORD *)this + 81);
  if (!v160 || (v160 & 1) != 0)
    goto LABEL_260;
  if ((v160 & 8) != 0)
  {
    if ((*(_BYTE *)(v160 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_260;
LABEL_945:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v160, 0, v105, v106, v107, v108, v109);
    goto LABEL_260;
  }
  v532 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v160 & 0xFFFFFFFFFFFFC000 | 0x20) != v532)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v160 & 0xFFFFFFFFFFFFC000), v532, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v160 & 0xFFFFFFFFFFFFC000) + 8 * ((v160 >> 10) & 0xF) + 0x28) >> (v160 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_945;
  }
LABEL_260:
  v161 = *((_QWORD *)this + 82);
  if (!v161)
    goto LABEL_266;
  if ((v161 & 8) != 0)
  {
    if ((*(_BYTE *)(v161 - 79) & 1) != 0)
      goto LABEL_265;
  }
  else
  {
    v162 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v161 & 0xFFFFFFFFFFFFC000 | 0x20) != v162)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v161 & 0xFFFFFFFFFFFFC000), v162, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v161 & 0xFFFFFFFFFFFFC000) + 8 * ((v161 >> 10) & 0xF) + 0x28) >> (v161 >> 4)) & 1) != 0)
    {
LABEL_265:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_266;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v161, 0, v105, v106, v107, v108, v109);
LABEL_266:
  v163 = *((_QWORD *)this + 83);
  if (!v163)
    goto LABEL_272;
  if ((v163 & 8) != 0)
  {
    if ((*(_BYTE *)(v163 - 79) & 1) != 0)
      goto LABEL_271;
  }
  else
  {
    v164 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v163 & 0xFFFFFFFFFFFFC000 | 0x20) != v164)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v163 & 0xFFFFFFFFFFFFC000), v164, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v163 & 0xFFFFFFFFFFFFC000) + 8 * ((v163 >> 10) & 0xF) + 0x28) >> (v163 >> 4)) & 1) != 0)
    {
LABEL_271:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_272;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v163, 0, v105, v106, v107, v108, v109);
LABEL_272:
  v165 = *((_QWORD *)this + 84);
  if (!v165)
    goto LABEL_278;
  if ((v165 & 8) != 0)
  {
    if ((*(_BYTE *)(v165 - 79) & 1) != 0)
      goto LABEL_277;
  }
  else
  {
    v166 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v165 & 0xFFFFFFFFFFFFC000 | 0x20) != v166)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v165 & 0xFFFFFFFFFFFFC000), v166, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v165 & 0xFFFFFFFFFFFFC000) + 8 * ((v165 >> 10) & 0xF) + 0x28) >> (v165 >> 4)) & 1) != 0)
    {
LABEL_277:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_278;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v165, 0, v105, v106, v107, v108, v109);
LABEL_278:
  v167 = *((_QWORD *)this + 87);
  if (!v167)
    goto LABEL_284;
  if ((v167 & 8) != 0)
  {
    if ((*(_BYTE *)(v167 - 79) & 1) != 0)
      goto LABEL_283;
  }
  else
  {
    v168 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v167 & 0xFFFFFFFFFFFFC000 | 0x20) != v168)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v167 & 0xFFFFFFFFFFFFC000), v168, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v167 & 0xFFFFFFFFFFFFC000) + 8 * ((v167 >> 10) & 0xF) + 0x28) >> (v167 >> 4)) & 1) != 0)
    {
LABEL_283:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_284;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v167, 0, v105, v106, v107, v108, v109);
LABEL_284:
  v169 = *((_QWORD *)this + 89);
  if (!v169)
    goto LABEL_290;
  if ((v169 & 8) != 0)
  {
    if ((*(_BYTE *)(v169 - 79) & 1) != 0)
      goto LABEL_289;
  }
  else
  {
    v170 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v169 & 0xFFFFFFFFFFFFC000 | 0x20) != v170)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v169 & 0xFFFFFFFFFFFFC000), v170, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v169 & 0xFFFFFFFFFFFFC000) + 8 * ((v169 >> 10) & 0xF) + 0x28) >> (v169 >> 4)) & 1) != 0)
    {
LABEL_289:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_290;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v169, 0, v105, v106, v107, v108, v109);
LABEL_290:
  v171 = *((_QWORD *)this + 90);
  if (!v171)
    goto LABEL_296;
  if ((v171 & 8) != 0)
  {
    if ((*(_BYTE *)(v171 - 79) & 1) != 0)
      goto LABEL_295;
  }
  else
  {
    v172 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v171 & 0xFFFFFFFFFFFFC000 | 0x20) != v172)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v171 & 0xFFFFFFFFFFFFC000), v172, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v171 & 0xFFFFFFFFFFFFC000) + 8 * ((v171 >> 10) & 0xF) + 0x28) >> (v171 >> 4)) & 1) != 0)
    {
LABEL_295:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_296;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v171, 0, v105, v106, v107, v108, v109);
LABEL_296:
  v173 = *((_QWORD *)this + 92);
  if (!v173)
    goto LABEL_302;
  if ((v173 & 8) != 0)
  {
    if ((*(_BYTE *)(v173 - 79) & 1) != 0)
      goto LABEL_301;
  }
  else
  {
    v174 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v173 & 0xFFFFFFFFFFFFC000 | 0x20) != v174)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v173 & 0xFFFFFFFFFFFFC000), v174, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v173 & 0xFFFFFFFFFFFFC000) + 8 * ((v173 >> 10) & 0xF) + 0x28) >> (v173 >> 4)) & 1) != 0)
    {
LABEL_301:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_302;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v173, 0, v105, v106, v107, v108, v109);
LABEL_302:
  v175 = *((_QWORD *)this + 93);
  if (!v175)
    goto LABEL_308;
  if ((v175 & 8) != 0)
  {
    if ((*(_BYTE *)(v175 - 79) & 1) != 0)
      goto LABEL_307;
  }
  else
  {
    v176 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v175 & 0xFFFFFFFFFFFFC000 | 0x20) != v176)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v175 & 0xFFFFFFFFFFFFC000), v176, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v175 & 0xFFFFFFFFFFFFC000) + 8 * ((v175 >> 10) & 0xF) + 0x28) >> (v175 >> 4)) & 1) != 0)
    {
LABEL_307:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_308;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v175, 0, v105, v106, v107, v108, v109);
LABEL_308:
  v177 = *((_QWORD *)this + 94);
  if (!v177)
    goto LABEL_314;
  if ((v177 & 8) != 0)
  {
    if ((*(_BYTE *)(v177 - 79) & 1) != 0)
      goto LABEL_313;
  }
  else
  {
    v178 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v177 & 0xFFFFFFFFFFFFC000 | 0x20) != v178)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v177 & 0xFFFFFFFFFFFFC000), v178, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v177 & 0xFFFFFFFFFFFFC000) + 8 * ((v177 >> 10) & 0xF) + 0x28) >> (v177 >> 4)) & 1) != 0)
    {
LABEL_313:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_314;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v177, 0, v105, v106, v107, v108, v109);
LABEL_314:
  v179 = *((_QWORD *)this + 132);
  if (!v179)
    goto LABEL_320;
  if ((v179 & 8) != 0)
  {
    if ((*(_BYTE *)(v179 - 79) & 1) != 0)
      goto LABEL_319;
  }
  else
  {
    v180 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v179 & 0xFFFFFFFFFFFFC000 | 0x20) != v180)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v179 & 0xFFFFFFFFFFFFC000), v180, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v179 & 0xFFFFFFFFFFFFC000) + 8 * ((v179 >> 10) & 0xF) + 0x28) >> (v179 >> 4)) & 1) != 0)
    {
LABEL_319:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_320;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v179, 0, v105, v106, v107, v108, v109);
LABEL_320:
  v181 = *((_QWORD *)this + 91);
  if (!v181)
    goto LABEL_326;
  if ((v181 & 8) != 0)
  {
    if ((*(_BYTE *)(v181 - 79) & 1) != 0)
      goto LABEL_325;
  }
  else
  {
    v182 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v181 & 0xFFFFFFFFFFFFC000 | 0x20) != v182)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v181 & 0xFFFFFFFFFFFFC000), v182, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v181 & 0xFFFFFFFFFFFFC000) + 8 * ((v181 >> 10) & 0xF) + 0x28) >> (v181 >> 4)) & 1) != 0)
    {
LABEL_325:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_326;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v181, 0, v105, v106, v107, v108, v109);
LABEL_326:
  v183 = *((_QWORD *)this + 88);
  if (!v183)
    goto LABEL_332;
  if ((v183 & 8) != 0)
  {
    if ((*(_BYTE *)(v183 - 79) & 1) != 0)
      goto LABEL_331;
  }
  else
  {
    v184 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v183 & 0xFFFFFFFFFFFFC000 | 0x20) != v184)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v183 & 0xFFFFFFFFFFFFC000), v184, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)((v183 & 0xFFFFFFFFFFFFC000) + 8 * ((v183 >> 10) & 0xF) + 0x28) >> (v183 >> 4)) & 1) != 0)
    {
LABEL_331:
      if (!*((_QWORD *)v8 + 21))
        goto LABEL_332;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v183, 0, v105, v106, v107, v108, v109);
LABEL_332:
  v185 = *((_QWORD *)this + 133);
  if (v185)
  {
    if ((v185 & 8) != 0)
    {
      if ((*(_BYTE *)(v185 - 79) & 1) == 0)
        goto LABEL_1079;
    }
    else
    {
      v186 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v185 & 0xFFFFFFFFFFFFC000 | 0x20) != v186)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v185 & 0xFFFFFFFFFFFFC000), v186, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v185 & 0xFFFFFFFFFFFFC000) + 8 * ((v185 >> 10) & 0xF) + 0x28) >> (v185 >> 4)) & 1) == 0)
        goto LABEL_1079;
    }
    if (!*((_QWORD *)v8 + 21))
      goto LABEL_338;
LABEL_1079:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v185, 0, v105, v106, v107, v108, v109);
  }
LABEL_338:
  v187 = *((_QWORD *)this + 95);
  if (!v187 || (v187 & 1) != 0)
    goto LABEL_340;
  if ((v187 & 8) != 0)
  {
    if ((*(_BYTE *)(v187 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_340;
LABEL_801:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v187, 0, v105, v106, v107, v108, v109);
    goto LABEL_340;
  }
  v508 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v187 & 0xFFFFFFFFFFFFC000 | 0x20) != v508)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v187 & 0xFFFFFFFFFFFFC000), v508, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v187 & 0xFFFFFFFFFFFFC000) + 8 * ((v187 >> 10) & 0xF) + 0x28) >> (v187 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_801;
  }
LABEL_340:
  v188 = *((_QWORD *)this + 96);
  if (!v188 || (v188 & 1) != 0)
    goto LABEL_342;
  if ((v188 & 8) != 0)
  {
    if ((*(_BYTE *)(v188 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_342;
LABEL_807:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v188, 0, v105, v106, v107, v108, v109);
    goto LABEL_342;
  }
  v509 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v188 & 0xFFFFFFFFFFFFC000 | 0x20) != v509)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v188 & 0xFFFFFFFFFFFFC000), v509, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v188 & 0xFFFFFFFFFFFFC000) + 8 * ((v188 >> 10) & 0xF) + 0x28) >> (v188 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_807;
  }
LABEL_342:
  v189 = *((_QWORD *)this + 97);
  if (!v189 || (v189 & 1) != 0)
    goto LABEL_344;
  if ((v189 & 8) != 0)
  {
    if ((*(_BYTE *)(v189 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
      goto LABEL_344;
LABEL_813:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v189, 0, v105, v106, v107, v108, v109);
    goto LABEL_344;
  }
  v510 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v189 & 0xFFFFFFFFFFFFC000 | 0x20) != v510)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v189 & 0xFFFFFFFFFFFFC000), v510, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v189 & 0xFFFFFFFFFFFFC000) + 8 * ((v189 >> 10) & 0xF) + 0x28) >> (v189 >> 4)) & 1) == 0
    || *((_QWORD *)v8 + 21))
  {
    goto LABEL_813;
  }
LABEL_344:
  v190 = *((_DWORD *)this + 208);
  v191 = v190 & 0xFFFFFFFE;
  if ((v190 & 0xFFFFFFFE) != 0)
  {
    v192 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v191) & 0xFFFFFC000 | 0x20) != v192)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v191) & 0xFFFFFC000), v192, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)(((16 * v191) & 0xFFFFFC000) + 8 * ((v191 >> 6) & 0xF) + 0x28) >> (v191 & 0x3E)) & 1) == 0
      || *((_QWORD *)v8 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v191, 0, v105, v106, v107, v108, v109);
    }
  }
  v193 = *((_QWORD *)this + 98);
  if (v193 && (v193 & 1) == 0)
  {
    if ((v193 & 8) != 0)
    {
      if ((*(_BYTE *)(v193 - 79) & 1) != 0 && !*((_QWORD *)v8 + 21))
        goto LABEL_351;
    }
    else
    {
      v511 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v193 & 0xFFFFFFFFFFFFC000 | 0x20) != v511)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v193 & 0xFFFFFFFFFFFFC000), v511, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v193 & 0xFFFFFFFFFFFFC000) + 8 * ((v193 >> 10) & 0xF) + 0x28) >> (v193 >> 4)) & 1) != 0
        && !*((_QWORD *)v8 + 21))
      {
        goto LABEL_351;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v193, 0, v105, v106, v107, v108, v109);
  }
LABEL_351:
  v194 = *((_DWORD *)this + 209);
  v195 = v194 & 0xFFFFFFFE;
  if ((v194 & 0xFFFFFFFE) != 0)
  {
    v196 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v195) & 0xFFFFFC000 | 0x20) != v196)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v195) & 0xFFFFFC000), v196, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)(((16 * v195) & 0xFFFFFC000) + 8 * ((v195 >> 6) & 0xF) + 0x28) >> (v195 & 0x3E)) & 1) == 0
      || *((_QWORD *)v8 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v195, 0, v105, v106, v107, v108, v109);
    }
  }
  v197 = *((_DWORD *)this + 210);
  v198 = v197 & 0xFFFFFFFE;
  if ((v197 & 0xFFFFFFFE) != 0)
  {
    v199 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v198) & 0xFFFFFC000 | 0x20) != v199)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v198) & 0xFFFFFC000), v199, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)(((16 * v198) & 0xFFFFFC000) + 8 * ((v198 >> 6) & 0xF) + 0x28) >> (v198 & 0x3E)) & 1) == 0
      || *((_QWORD *)v8 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v198, 0, v105, v106, v107, v108, v109);
    }
  }
  v200 = *((_DWORD *)this + 211);
  v201 = v200 & 0xFFFFFFFE;
  if ((v200 & 0xFFFFFFFE) != 0)
  {
    v202 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v201) & 0xFFFFFC000 | 0x20) != v202)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v201) & 0xFFFFFC000), v202, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)(((16 * v201) & 0xFFFFFC000) + 8 * ((v201 >> 6) & 0xF) + 0x28) >> (v201 & 0x3E)) & 1) == 0
      || *((_QWORD *)v8 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v201, 0, v105, v106, v107, v108, v109);
    }
  }
  v203 = *((_DWORD *)this + 212);
  v204 = v203 & 0xFFFFFFFE;
  if ((v203 & 0xFFFFFFFE) != 0)
  {
    v205 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v204) & 0xFFFFFC000 | 0x20) != v205)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v204) & 0xFFFFFC000), v205, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)(((16 * v204) & 0xFFFFFC000) + 8 * ((v204 >> 6) & 0xF) + 0x28) >> (v204 & 0x3E)) & 1) == 0
      || *((_QWORD *)v8 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v204, 0, v105, v106, v107, v108, v109);
    }
  }
  v206 = (_QWORD *)((char *)v8 + 168);
  for (i = 852; i != 892; i += 4)
  {
    v208 = *(_DWORD *)((char *)this + i);
    v209 = v208 & 0xFFFFFFFE;
    if ((v208 & 0xFFFFFFFE) != 0)
    {
      v210 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)((16 * v209) & 0xFFFFFC000 | 0x20) != v210)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v209) & 0xFFFFFC000), v210, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)(((16 * v209) & 0xFFFFFC000) + 8 * ((v209 >> 6) & 0xF) + 0x28) >> (v209 & 0x3E)) & 1) == 0
        || *v206)
      {
        JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v209, 0, v105, v106, v107, v108, v109);
      }
    }
  }
  do
  {
    v211 = *(_DWORD *)((char *)this + i);
    v212 = v211 & 0xFFFFFFFE;
    if ((v211 & 0xFFFFFFFE) != 0)
    {
      v213 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)((16 * v212) & 0xFFFFFC000 | 0x20) != v213)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v212) & 0xFFFFFC000), v213, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)(((16 * v212) & 0xFFFFFC000) + 8 * ((v212 >> 6) & 0xF) + 0x28) >> (v212 & 0x3E)) & 1) == 0
        || *v206)
      {
        JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v212, 0, v105, v106, v107, v108, v109);
      }
    }
    i += 4;
  }
  while (i != 932);
  v214 = *((_QWORD *)this + 99);
  if (v214)
    v215 = (*((_QWORD *)this + 99) & 1) == 0;
  else
    v215 = 0;
  if (v215)
  {
    if ((v214 & 8) != 0)
    {
      if ((*(_BYTE *)(v214 - 79) & 1) != 0 && !*v206)
        goto LABEL_388;
    }
    else
    {
      v490 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v214 & 0xFFFFFFFFFFFFC000 | 0x20) != v490)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v214 & 0xFFFFFFFFFFFFC000), v490, v104, v105, v106, v107, v108, v109);
      if (((*(_QWORD *)((v214 & 0xFFFFFFFFFFFFC000) + 8 * ((v214 >> 10) & 0xF) + 0x28) >> (v214 >> 4)) & 1) != 0
        && !*v206)
      {
        goto LABEL_388;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v214, 0, v105, v106, v107, v108, v109);
  }
LABEL_388:
  v216 = *((_QWORD *)this + 100);
  if (!v216 || (v216 & 1) != 0)
    goto LABEL_390;
  if ((v216 & 8) != 0)
  {
    if ((*(_BYTE *)(v216 - 79) & 1) != 0 && !*v206)
      goto LABEL_390;
LABEL_825:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v216, 0, v105, v106, v107, v108, v109);
    goto LABEL_390;
  }
  v512 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v216 & 0xFFFFFFFFFFFFC000 | 0x20) != v512)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v216 & 0xFFFFFFFFFFFFC000), v512, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v216 & 0xFFFFFFFFFFFFC000) + 8 * ((v216 >> 10) & 0xF) + 0x28) >> (v216 >> 4)) & 1) == 0 || *v206)
    goto LABEL_825;
LABEL_390:
  v217 = *((_QWORD *)this + 101);
  if (!v217 || (v217 & 1) != 0)
    goto LABEL_392;
  if ((v217 & 8) != 0)
  {
    if ((*(_BYTE *)(v217 - 79) & 1) != 0 && !*v206)
      goto LABEL_392;
LABEL_831:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v217, 0, v105, v106, v107, v108, v109);
    goto LABEL_392;
  }
  v513 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v217 & 0xFFFFFFFFFFFFC000 | 0x20) != v513)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v217 & 0xFFFFFFFFFFFFC000), v513, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v217 & 0xFFFFFFFFFFFFC000) + 8 * ((v217 >> 10) & 0xF) + 0x28) >> (v217 >> 4)) & 1) == 0 || *v206)
    goto LABEL_831;
LABEL_392:
  v218 = *((_QWORD *)this + 102);
  if (!v218 || (v218 & 1) != 0)
    goto LABEL_394;
  if ((v218 & 8) != 0)
  {
    if ((*(_BYTE *)(v218 - 79) & 1) != 0 && !*v206)
      goto LABEL_394;
LABEL_837:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v218, 0, v105, v106, v107, v108, v109);
    goto LABEL_394;
  }
  v514 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v218 & 0xFFFFFFFFFFFFC000 | 0x20) != v514)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v218 & 0xFFFFFFFFFFFFC000), v514, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v218 & 0xFFFFFFFFFFFFC000) + 8 * ((v218 >> 10) & 0xF) + 0x28) >> (v218 >> 4)) & 1) == 0 || *v206)
    goto LABEL_837;
LABEL_394:
  v219 = *((_QWORD *)this + 103);
  if (!v219 || (v219 & 1) != 0)
    goto LABEL_396;
  if ((v219 & 8) != 0)
  {
    if ((*(_BYTE *)(v219 - 79) & 1) != 0 && !*v206)
      goto LABEL_396;
LABEL_843:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v219, 0, v105, v106, v107, v108, v109);
    goto LABEL_396;
  }
  v515 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v219 & 0xFFFFFFFFFFFFC000 | 0x20) != v515)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v219 & 0xFFFFFFFFFFFFC000), v515, v104, v105, v106, v107, v108, v109);
  if (((*(_QWORD *)((v219 & 0xFFFFFFFFFFFFC000) + 8 * ((v219 >> 10) & 0xF) + 0x28) >> (v219 >> 4)) & 1) == 0 || *v206)
    goto LABEL_843;
LABEL_396:
  v220 = *((_DWORD *)this + 233);
  v221 = v220 & 0xFFFFFFFE;
  if ((v220 & 0xFFFFFFFE) != 0)
  {
    v222 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v221) & 0xFFFFFC000 | 0x20) != v222)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v221) & 0xFFFFFC000), v222, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)(((16 * v221) & 0xFFFFFC000) + 8 * ((v221 >> 6) & 0xF) + 0x28) >> (v221 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v221, 0, v105, v106, v107, v108, v109);
    }
  }
  v223 = *((_DWORD *)this + 234);
  v224 = v223 & 0xFFFFFFFE;
  if ((v223 & 0xFFFFFFFE) != 0)
  {
    v225 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v224) & 0xFFFFFC000 | 0x20) != v225)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v224) & 0xFFFFFC000), v225, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)(((16 * v224) & 0xFFFFFC000) + 8 * ((v224 >> 6) & 0xF) + 0x28) >> (v224 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v224, 0, v105, v106, v107, v108, v109);
    }
  }
  v226 = *((_DWORD *)this + 235);
  v227 = v226 & 0xFFFFFFFE;
  if ((v226 & 0xFFFFFFFE) != 0)
  {
    v228 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v227) & 0xFFFFFC000 | 0x20) != v228)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v227) & 0xFFFFFC000), v228, v104, v105, v106, v107, v108, v109);
    if (((*(_QWORD *)(((16 * v227) & 0xFFFFFC000) + 8 * ((v227 >> 6) & 0xF) + 0x28) >> (v227 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v227, 0, v105, v106, v107, v108, v109);
    }
  }
  v594 = v8;
  JSC::JSGlobalObject::visitChildrenImpl<JSC::SlotVisitor>(JSC::JSCell *,JSC::SlotVisitor &)::{lambda(JSC::JSGlobalObject::FunctionStructures &)#1}::operator()((uint64_t *)&v594, (_DWORD *)this + 236, v104, v105, v106, v107, v108, v109);
  JSC::JSGlobalObject::visitChildrenImpl<JSC::SlotVisitor>(JSC::JSCell *,JSC::SlotVisitor &)::{lambda(JSC::JSGlobalObject::FunctionStructures &)#1}::operator()((uint64_t *)&v594, (_DWORD *)this + 239, v229, v230, v231, v232, v233, v234);
  v241 = *((_DWORD *)this + 242);
  v242 = v241 & 0xFFFFFFFE;
  if ((v241 & 0xFFFFFFFE) != 0)
  {
    v243 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v242) & 0xFFFFFC000 | 0x20) != v243)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v242) & 0xFFFFFC000), v243, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v242) & 0xFFFFFC000) + 8 * ((v242 >> 6) & 0xF) + 0x28) >> (v242 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v242, 0, v236, v237, v238, v239, v240);
    }
  }
  v244 = *((_QWORD *)this + 128);
  if (v244 && (v244 & 1) == 0)
  {
    if ((v244 & 8) != 0)
    {
      if ((*(_BYTE *)(v244 - 79) & 1) != 0 && !*v206)
        goto LABEL_418;
    }
    else
    {
      v516 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v244 & 0xFFFFFFFFFFFFC000 | 0x20) != v516)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v244 & 0xFFFFFFFFFFFFC000), v516, v235, v236, v237, v238, v239, v240);
      if (((*(_QWORD *)((v244 & 0xFFFFFFFFFFFFC000) + 8 * ((v244 >> 10) & 0xF) + 0x28) >> (v244 >> 4)) & 1) != 0
        && !*v206)
      {
        goto LABEL_418;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v244, 0, v236, v237, v238, v239, v240);
  }
LABEL_418:
  v245 = *((_QWORD *)this + 129);
  if (!v245 || (v245 & 1) != 0)
    goto LABEL_420;
  if ((v245 & 8) != 0)
  {
    if ((*(_BYTE *)(v245 - 79) & 1) != 0 && !*v206)
      goto LABEL_420;
LABEL_855:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v245, 0, v236, v237, v238, v239, v240);
    goto LABEL_420;
  }
  v517 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v245 & 0xFFFFFFFFFFFFC000 | 0x20) != v517)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v245 & 0xFFFFFFFFFFFFC000), v517, v235, v236, v237, v238, v239, v240);
  if (((*(_QWORD *)((v245 & 0xFFFFFFFFFFFFC000) + 8 * ((v245 >> 10) & 0xF) + 0x28) >> (v245 >> 4)) & 1) == 0 || *v206)
    goto LABEL_855;
LABEL_420:
  v246 = *((_QWORD *)this + 130);
  if (!v246 || (v246 & 1) != 0)
    goto LABEL_422;
  if ((v246 & 8) != 0)
  {
    if ((*(_BYTE *)(v246 - 79) & 1) != 0 && !*v206)
      goto LABEL_422;
LABEL_861:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v246, 0, v236, v237, v238, v239, v240);
    goto LABEL_422;
  }
  v518 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v246 & 0xFFFFFFFFFFFFC000 | 0x20) != v518)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v246 & 0xFFFFFFFFFFFFC000), v518, v235, v236, v237, v238, v239, v240);
  if (((*(_QWORD *)((v246 & 0xFFFFFFFFFFFFC000) + 8 * ((v246 >> 10) & 0xF) + 0x28) >> (v246 >> 4)) & 1) == 0 || *v206)
    goto LABEL_861;
LABEL_422:
  v247 = *((_QWORD *)this + 131);
  if (!v247 || (v247 & 1) != 0)
    goto LABEL_424;
  if ((v247 & 8) != 0)
  {
    if ((*(_BYTE *)(v247 - 79) & 1) != 0 && !*v206)
      goto LABEL_424;
LABEL_867:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v247, 0, v236, v237, v238, v239, v240);
    goto LABEL_424;
  }
  v519 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v247 & 0xFFFFFFFFFFFFC000 | 0x20) != v519)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v247 & 0xFFFFFFFFFFFFC000), v519, v235, v236, v237, v238, v239, v240);
  if (((*(_QWORD *)((v247 & 0xFFFFFFFFFFFFC000) + 8 * ((v247 >> 10) & 0xF) + 0x28) >> (v247 >> 4)) & 1) == 0 || *v206)
    goto LABEL_867;
LABEL_424:
  v248 = *((_DWORD *)this + 243);
  v249 = v248 & 0xFFFFFFFE;
  if ((v248 & 0xFFFFFFFE) != 0)
  {
    v250 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v249) & 0xFFFFFC000 | 0x20) != v250)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v249) & 0xFFFFFC000), v250, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v249) & 0xFFFFFC000) + 8 * ((v249 >> 6) & 0xF) + 0x28) >> (v249 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v249, 0, v236, v237, v238, v239, v240);
    }
  }
  v251 = *((_DWORD *)this + 244);
  v252 = v251 & 0xFFFFFFFE;
  if ((v251 & 0xFFFFFFFE) != 0)
  {
    v253 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v252) & 0xFFFFFC000 | 0x20) != v253)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v252) & 0xFFFFFC000), v253, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v252) & 0xFFFFFC000) + 8 * ((v252 >> 6) & 0xF) + 0x28) >> (v252 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v252, 0, v236, v237, v238, v239, v240);
    }
  }
  v254 = *((_DWORD *)this + 247);
  v255 = v254 & 0xFFFFFFFE;
  if ((v254 & 0xFFFFFFFE) != 0)
  {
    v256 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v255) & 0xFFFFFC000 | 0x20) != v256)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v255) & 0xFFFFFC000), v256, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v255) & 0xFFFFFC000) + 8 * ((v255 >> 6) & 0xF) + 0x28) >> (v255 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v255, 0, v236, v237, v238, v239, v240);
    }
  }
  v257 = *((_DWORD *)this + 245);
  v258 = v257 & 0xFFFFFFFE;
  if ((v257 & 0xFFFFFFFE) != 0)
  {
    v259 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v258) & 0xFFFFFC000 | 0x20) != v259)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v258) & 0xFFFFFC000), v259, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v258) & 0xFFFFFC000) + 8 * ((v258 >> 6) & 0xF) + 0x28) >> (v258 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v258, 0, v236, v237, v238, v239, v240);
    }
  }
  v260 = *((_DWORD *)this + 246);
  v261 = v260 & 0xFFFFFFFE;
  if ((v260 & 0xFFFFFFFE) != 0)
  {
    v262 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v261) & 0xFFFFFC000 | 0x20) != v262)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v261) & 0xFFFFFC000), v262, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v261) & 0xFFFFFC000) + 8 * ((v261 >> 6) & 0xF) + 0x28) >> (v261 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v261, 0, v236, v237, v238, v239, v240);
    }
  }
  v263 = *((_DWORD *)this + 248);
  v264 = v263 & 0xFFFFFFFE;
  if ((v263 & 0xFFFFFFFE) != 0)
  {
    v265 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v264) & 0xFFFFFC000 | 0x20) != v265)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v264) & 0xFFFFFC000), v265, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v264) & 0xFFFFFC000) + 8 * ((v264 >> 6) & 0xF) + 0x28) >> (v264 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v264, 0, v236, v237, v238, v239, v240);
    }
  }
  v266 = *((_DWORD *)this + 249);
  v267 = v266 & 0xFFFFFFFE;
  if ((v266 & 0xFFFFFFFE) != 0)
  {
    v268 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v267) & 0xFFFFFC000 | 0x20) != v268)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v267) & 0xFFFFFC000), v268, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v267) & 0xFFFFFC000) + 8 * ((v267 >> 6) & 0xF) + 0x28) >> (v267 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v267, 0, v236, v237, v238, v239, v240);
    }
  }
  v269 = *((_DWORD *)this + 250);
  v270 = v269 & 0xFFFFFFFE;
  if ((v269 & 0xFFFFFFFE) != 0)
  {
    v271 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v270) & 0xFFFFFC000 | 0x20) != v271)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v270) & 0xFFFFFC000), v271, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v270) & 0xFFFFFC000) + 8 * ((v270 >> 6) & 0xF) + 0x28) >> (v270 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v270, 0, v236, v237, v238, v239, v240);
    }
  }
  v272 = *((_DWORD *)this + 251);
  v273 = v272 & 0xFFFFFFFE;
  if ((v272 & 0xFFFFFFFE) != 0)
  {
    v274 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v273) & 0xFFFFFC000 | 0x20) != v274)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v273) & 0xFFFFFC000), v274, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v273) & 0xFFFFFC000) + 8 * ((v273 >> 6) & 0xF) + 0x28) >> (v273 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v273, 0, v236, v237, v238, v239, v240);
    }
  }
  v275 = *((_DWORD *)this + 252);
  v276 = v275 & 0xFFFFFFFE;
  if ((v275 & 0xFFFFFFFE) != 0)
  {
    v277 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v276) & 0xFFFFFC000 | 0x20) != v277)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v276) & 0xFFFFFC000), v277, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v276) & 0xFFFFFC000) + 8 * ((v276 >> 6) & 0xF) + 0x28) >> (v276 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v276, 0, v236, v237, v238, v239, v240);
    }
  }
  v278 = *((_QWORD *)this + 134);
  if (v278 && (v278 & 1) == 0)
  {
    if ((v278 & 8) != 0)
    {
      if ((*(_BYTE *)(v278 - 79) & 1) != 0 && !*v206)
        goto LABEL_476;
    }
    else
    {
      v520 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v278 & 0xFFFFFFFFFFFFC000 | 0x20) != v520)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v278 & 0xFFFFFFFFFFFFC000), v520, v235, v236, v237, v238, v239, v240);
      if (((*(_QWORD *)((v278 & 0xFFFFFFFFFFFFC000) + 8 * ((v278 >> 10) & 0xF) + 0x28) >> (v278 >> 4)) & 1) != 0
        && !*v206)
      {
        goto LABEL_476;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v278, 0, v236, v237, v238, v239, v240);
  }
LABEL_476:
  v279 = *((_QWORD *)this + 135);
  if (!v279 || (v279 & 1) != 0)
    goto LABEL_478;
  if ((v279 & 8) != 0)
  {
    if ((*(_BYTE *)(v279 - 79) & 1) != 0 && !*v206)
      goto LABEL_478;
LABEL_879:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v279, 0, v236, v237, v238, v239, v240);
    goto LABEL_478;
  }
  v521 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v279 & 0xFFFFFFFFFFFFC000 | 0x20) != v521)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v279 & 0xFFFFFFFFFFFFC000), v521, v235, v236, v237, v238, v239, v240);
  if (((*(_QWORD *)((v279 & 0xFFFFFFFFFFFFC000) + 8 * ((v279 >> 10) & 0xF) + 0x28) >> (v279 >> 4)) & 1) == 0 || *v206)
    goto LABEL_879;
LABEL_478:
  v280 = *((_QWORD *)this + 136);
  if (!v280 || (v280 & 1) != 0)
    goto LABEL_480;
  if ((v280 & 8) != 0)
  {
    if ((*(_BYTE *)(v280 - 79) & 1) != 0 && !*v206)
      goto LABEL_480;
LABEL_885:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v280, 0, v236, v237, v238, v239, v240);
    goto LABEL_480;
  }
  v522 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v280 & 0xFFFFFFFFFFFFC000 | 0x20) != v522)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v280 & 0xFFFFFFFFFFFFC000), v522, v235, v236, v237, v238, v239, v240);
  if (((*(_QWORD *)((v280 & 0xFFFFFFFFFFFFC000) + 8 * ((v280 >> 10) & 0xF) + 0x28) >> (v280 >> 4)) & 1) == 0 || *v206)
    goto LABEL_885;
LABEL_480:
  v281 = *((_DWORD *)this + 253);
  v282 = v281 & 0xFFFFFFFE;
  if ((v281 & 0xFFFFFFFE) != 0)
  {
    v283 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v282) & 0xFFFFFC000 | 0x20) != v283)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v282) & 0xFFFFFC000), v283, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v282) & 0xFFFFFC000) + 8 * ((v282 >> 6) & 0xF) + 0x28) >> (v282 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v282, 0, v236, v237, v238, v239, v240);
    }
  }
  v284 = *((_DWORD *)this + 254);
  v285 = v284 & 0xFFFFFFFE;
  if ((v284 & 0xFFFFFFFE) != 0)
  {
    v286 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v285) & 0xFFFFFC000 | 0x20) != v286)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v285) & 0xFFFFFC000), v286, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v285) & 0xFFFFFC000) + 8 * ((v285 >> 6) & 0xF) + 0x28) >> (v285 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v285, 0, v236, v237, v238, v239, v240);
    }
  }
  v287 = *((_DWORD *)this + 255);
  v288 = v287 & 0xFFFFFFFE;
  if ((v287 & 0xFFFFFFFE) != 0)
  {
    v289 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v288) & 0xFFFFFC000 | 0x20) != v289)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v288) & 0xFFFFFC000), v289, v235, v236, v237, v238, v239, v240);
    if (((*(_QWORD *)(((16 * v288) & 0xFFFFFC000) + 8 * ((v288 >> 6) & 0xF) + 0x28) >> (v288 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v288, 0, v236, v237, v238, v239, v240);
    }
  }
  v290 = *((_QWORD *)this + 137);
  if (v290 && (v290 & 1) == 0)
  {
    if ((v290 & 8) != 0)
    {
      if ((*(_BYTE *)(v290 - 79) & 1) != 0 && !*v206)
        goto LABEL_497;
    }
    else
    {
      v523 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v290 & 0xFFFFFFFFFFFFC000 | 0x20) != v523)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v290 & 0xFFFFFFFFFFFFC000), v523, v235, v236, v237, v238, v239, v240);
      if (((*(_QWORD *)((v290 & 0xFFFFFFFFFFFFC000) + 8 * ((v290 >> 10) & 0xF) + 0x28) >> (v290 >> 4)) & 1) != 0
        && !*v206)
      {
        goto LABEL_497;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v290, 0, v236, v237, v238, v239, v240);
  }
LABEL_497:
  v291 = *((_QWORD *)this + 138);
  if (!v291 || (v291 & 1) != 0)
    goto LABEL_499;
  if ((v291 & 8) != 0)
  {
    if ((*(_BYTE *)(v291 - 79) & 1) != 0 && !*v206)
      goto LABEL_499;
LABEL_897:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v291, 0, v236, v237, v238, v239, v240);
    goto LABEL_499;
  }
  v524 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v291 & 0xFFFFFFFFFFFFC000 | 0x20) != v524)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v291 & 0xFFFFFFFFFFFFC000), v524, v235, v236, v237, v238, v239, v240);
  if (((*(_QWORD *)((v291 & 0xFFFFFFFFFFFFC000) + 8 * ((v291 >> 10) & 0xF) + 0x28) >> (v291 >> 4)) & 1) == 0 || *v206)
    goto LABEL_897;
LABEL_499:
  v292 = *((_QWORD *)this + 139);
  if (!v292 || (v292 & 1) != 0)
    goto LABEL_501;
  if ((v292 & 8) != 0)
  {
    if ((*(_BYTE *)(v292 - 79) & 1) != 0 && !*v206)
      goto LABEL_501;
LABEL_903:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v292, 0, v236, v237, v238, v239, v240);
    goto LABEL_501;
  }
  v525 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v292 & 0xFFFFFFFFFFFFC000 | 0x20) != v525)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v292 & 0xFFFFFFFFFFFFC000), v525, v235, v236, v237, v238, v239, v240);
  if (((*(_QWORD *)((v292 & 0xFFFFFFFFFFFFC000) + 8 * ((v292 >> 10) & 0xF) + 0x28) >> (v292 >> 4)) & 1) == 0 || *v206)
    goto LABEL_903;
LABEL_501:
  v293 = *((_QWORD *)this + 140);
  if (!v293 || (v293 & 1) != 0)
    goto LABEL_503;
  if ((v293 & 8) != 0)
  {
    if ((*(_BYTE *)(v293 - 79) & 1) != 0 && !*v206)
      goto LABEL_503;
LABEL_909:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v293, 0, v236, v237, v238, v239, v240);
    goto LABEL_503;
  }
  v526 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v293 & 0xFFFFFFFFFFFFC000 | 0x20) != v526)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v293 & 0xFFFFFFFFFFFFC000), v526, v235, v236, v237, v238, v239, v240);
  if (((*(_QWORD *)((v293 & 0xFFFFFFFFFFFFC000) + 8 * ((v293 >> 10) & 0xF) + 0x28) >> (v293 >> 4)) & 1) == 0 || *v206)
    goto LABEL_909;
LABEL_503:
  v294 = *((_QWORD *)this + 141);
  if (!v294 || (v294 & 1) != 0)
    goto LABEL_505;
  if ((v294 & 8) != 0)
  {
    if ((*(_BYTE *)(v294 - 79) & 1) != 0 && !*v206)
      goto LABEL_505;
LABEL_915:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v294, 0, v236, v237, v238, v239, v240);
    goto LABEL_505;
  }
  v527 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v294 & 0xFFFFFFFFFFFFC000 | 0x20) != v527)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v294 & 0xFFFFFFFFFFFFC000), v527, v235, v236, v237, v238, v239, v240);
  if (((*(_QWORD *)((v294 & 0xFFFFFFFFFFFFC000) + 8 * ((v294 >> 10) & 0xF) + 0x28) >> (v294 >> 4)) & 1) == 0 || *v206)
    goto LABEL_915;
LABEL_505:
  v295 = *((_QWORD *)this + 142);
  if (!v295 || (v295 & 1) != 0)
    goto LABEL_507;
  if ((v295 & 8) != 0)
  {
    if ((*(_BYTE *)(v295 - 79) & 1) != 0 && !*v206)
      goto LABEL_507;
LABEL_921:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v295, 0, v236, v237, v238, v239, v240);
    goto LABEL_507;
  }
  v528 = *((_DWORD *)v8 + 33);
  if (*(_DWORD *)(v295 & 0xFFFFFFFFFFFFC000 | 0x20) != v528)
    JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v295 & 0xFFFFFFFFFFFFC000), v528, v235, v236, v237, v238, v239, v240);
  if (((*(_QWORD *)((v295 & 0xFFFFFFFFFFFFC000) + 8 * ((v295 >> 10) & 0xF) + 0x28) >> (v295 >> 4)) & 1) == 0 || *v206)
    goto LABEL_921;
LABEL_507:
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 143, (uint64_t)v8, v235, v236, v237, v238, v239, v240);
  v302 = *((_QWORD *)this + 244);
  if (v302 && (v302 & 1) == 0)
  {
    if ((v302 & 8) != 0)
    {
      v539 = 0;
      if ((*(_BYTE *)(v302 - 79) & 1) != 0 && !*v206)
        goto LABEL_509;
    }
    else
    {
      v539 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v302 & 0xFFFFFFFFFFFFC000), *((_DWORD *)v8 + 33), v296, v297, v298, v299, v300, v301);
      if (((*(_QWORD *)((v302 & 0xFFFFFFFFFFFFC000) + v539 + 8 * ((v302 >> 10) & 0xF) + 0x28) >> (v302 >> 4)) & 1) != 0
        && !*((_QWORD *)v8 + 21))
      {
        goto LABEL_509;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v302, v539, v297, v298, v299, v300, v301);
  }
LABEL_509:
  v303 = (unsigned int *)*((_QWORD *)this + 245);
  if (v303)
    v304 = (unint64_t *)(v303 + 2);
  else
    v304 = 0;
  if (v303)
    v305 = (uint64_t)&v303[2 * *v303 + 2];
  else
    v305 = 0;
  while (v304 != (unint64_t *)v305)
  {
    v306 = *v304;
    if (*v304)
      v307 = (*v304 & 1) == 0;
    else
      v307 = 0;
    if (v307)
    {
      if ((v306 & 8) != 0)
      {
        if ((*(_BYTE *)(v306 - 79) & 1) != 0)
        {
LABEL_524:
          if (!*v206)
            goto LABEL_519;
        }
      }
      else
      {
        v308 = *((_DWORD *)v8 + 33);
        if (*(_DWORD *)(v306 & 0xFFFFFFFFFFFFC000 | 0x20) != v308)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v306 & 0xFFFFFFFFFFFFC000), v308, v296, v297, v298, v299, v300, v301);
        if (((*(_QWORD *)((v306 & 0xFFFFFFFFFFFFC000) + 8 * ((v306 >> 10) & 0xF) + 0x28) >> (v306 >> 4)) & 1) != 0)
          goto LABEL_524;
      }
      JSC::SlotVisitor::appendSlow((uint64_t)v8, v306, 0, v297, v298, v299, v300, v301);
    }
LABEL_519:
    ++v304;
  }
  v309 = *((_DWORD *)this + 290);
  v310 = v309 & 0xFFFFFFFE;
  if ((v309 & 0xFFFFFFFE) != 0)
  {
    v311 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v310) & 0xFFFFFC000 | 0x20) != v311)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v310) & 0xFFFFFC000), v311, v296, v297, v298, v299, v300, v301);
    if (((*(_QWORD *)(((16 * v310) & 0xFFFFFC000) + 8 * ((v310 >> 6) & 0xF) + 0x28) >> (v310 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v310, 0, v297, v298, v299, v300, v301);
    }
  }
  v312 = *((_DWORD *)this + 291);
  v313 = v312 & 0xFFFFFFFE;
  if ((v312 & 0xFFFFFFFE) != 0)
  {
    v314 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v313) & 0xFFFFFC000 | 0x20) != v314)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v313) & 0xFFFFFC000), v314, v296, v297, v298, v299, v300, v301);
    if (((*(_QWORD *)(((16 * v313) & 0xFFFFFC000) + 8 * ((v313 >> 6) & 0xF) + 0x28) >> (v313 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v313, 0, v297, v298, v299, v300, v301);
    }
  }
  v315 = *((_DWORD *)this + 292);
  v316 = v315 & 0xFFFFFFFE;
  if ((v315 & 0xFFFFFFFE) != 0)
  {
    v317 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v316) & 0xFFFFFC000 | 0x20) != v317)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v316) & 0xFFFFFC000), v317, v296, v297, v298, v299, v300, v301);
    if (((*(_QWORD *)(((16 * v316) & 0xFFFFFC000) + 8 * ((v316 >> 6) & 0xF) + 0x28) >> (v316 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v316, 0, v297, v298, v299, v300, v301);
    }
  }
  v318 = *((_DWORD *)this + 293);
  v319 = v318 & 0xFFFFFFFE;
  if ((v318 & 0xFFFFFFFE) != 0)
  {
    v320 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v319) & 0xFFFFFC000 | 0x20) != v320)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v319) & 0xFFFFFC000), v320, v296, v297, v298, v299, v300, v301);
    if (((*(_QWORD *)(((16 * v319) & 0xFFFFFC000) + 8 * ((v319 >> 6) & 0xF) + 0x28) >> (v319 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v319, 0, v297, v298, v299, v300, v301);
    }
  }
  v321 = *((_DWORD *)this + 294);
  v322 = v321 & 0xFFFFFFFE;
  if ((v321 & 0xFFFFFFFE) != 0)
  {
    v323 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v322) & 0xFFFFFC000 | 0x20) != v323)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v322) & 0xFFFFFC000), v323, v296, v297, v298, v299, v300, v301);
    if (((*(_QWORD *)(((16 * v322) & 0xFFFFFC000) + 8 * ((v322 >> 6) & 0xF) + 0x28) >> (v322 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v322, 0, v297, v298, v299, v300, v301);
    }
  }
  v324 = *((_DWORD *)this + 295);
  v325 = v324 & 0xFFFFFFFE;
  if ((v324 & 0xFFFFFFFE) != 0)
  {
    v326 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v325) & 0xFFFFFC000 | 0x20) != v326)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v325) & 0xFFFFFC000), v326, v296, v297, v298, v299, v300, v301);
    if (((*(_QWORD *)(((16 * v325) & 0xFFFFFC000) + 8 * ((v325 >> 6) & 0xF) + 0x28) >> (v325 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v325, 0, v297, v298, v299, v300, v301);
    }
  }
  v327 = *((_DWORD *)this + 296);
  v328 = v327 & 0xFFFFFFFE;
  if ((v327 & 0xFFFFFFFE) != 0)
  {
    v329 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v328) & 0xFFFFFC000 | 0x20) != v329)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v328) & 0xFFFFFC000), v329, v296, v297, v298, v299, v300, v301);
    if (((*(_QWORD *)(((16 * v328) & 0xFFFFFC000) + 8 * ((v328 >> 6) & 0xF) + 0x28) >> (v328 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v328, 0, v297, v298, v299, v300, v301);
    }
  }
  v330 = *((_DWORD *)this + 297);
  v331 = v330 & 0xFFFFFFFE;
  if ((v330 & 0xFFFFFFFE) != 0)
  {
    v332 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)((16 * v331) & 0xFFFFFC000 | 0x20) != v332)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v331) & 0xFFFFFC000), v332, v296, v297, v298, v299, v300, v301);
    if (((*(_QWORD *)(((16 * v331) & 0xFFFFFC000) + 8 * ((v331 >> 6) & 0xF) + 0x28) >> (v331 & 0x3E)) & 1) == 0
      || *v206)
    {
      JSC::SlotVisitor::appendSlow((uint64_t)v8, 16 * v331, 0, v297, v298, v299, v300, v301);
    }
  }
  v333 = *((_QWORD *)this + 149);
  if (v333)
  {
    if ((v333 & 8) != 0)
    {
      if ((*(_BYTE *)(v333 - 79) & 1) != 0)
        goto LABEL_571;
    }
    else
    {
      v334 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v333 & 0xFFFFFFFFFFFFC000 | 0x20) != v334)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v333 & 0xFFFFFFFFFFFFC000), v334, v296, v297, v298, v299, v300, v301);
      if (((*(_QWORD *)((v333 & 0xFFFFFFFFFFFFC000) + 8 * ((v333 >> 10) & 0xF) + 0x28) >> (v333 >> 4)) & 1) != 0)
      {
LABEL_571:
        if (!*v206)
          goto LABEL_572;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v333, 0, v297, v298, v299, v300, v301);
  }
LABEL_572:
  v335 = *((_QWORD *)this + 150);
  if (v335)
  {
    if ((v335 & 8) != 0)
    {
      if ((*(_BYTE *)(v335 - 79) & 1) != 0)
        goto LABEL_577;
    }
    else
    {
      v336 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v335 & 0xFFFFFFFFFFFFC000 | 0x20) != v336)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v335 & 0xFFFFFFFFFFFFC000), v336, v296, v297, v298, v299, v300, v301);
      if (((*(_QWORD *)((v335 & 0xFFFFFFFFFFFFC000) + 8 * ((v335 >> 10) & 0xF) + 0x28) >> (v335 >> 4)) & 1) != 0)
      {
LABEL_577:
        if (!*v206)
          goto LABEL_578;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v335, 0, v297, v298, v299, v300, v301);
  }
LABEL_578:
  v337 = *((_QWORD *)this + 151);
  if (v337)
  {
    if ((v337 & 8) != 0)
    {
      if ((*(_BYTE *)(v337 - 79) & 1) != 0)
        goto LABEL_583;
    }
    else
    {
      v338 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v337 & 0xFFFFFFFFFFFFC000 | 0x20) != v338)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v337 & 0xFFFFFFFFFFFFC000), v338, v296, v297, v298, v299, v300, v301);
      if (((*(_QWORD *)((v337 & 0xFFFFFFFFFFFFC000) + 8 * ((v337 >> 10) & 0xF) + 0x28) >> (v337 >> 4)) & 1) != 0)
      {
LABEL_583:
        if (!*v206)
          goto LABEL_584;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v337, 0, v297, v298, v299, v300, v301);
  }
LABEL_584:
  v339 = *((_QWORD *)this + 152);
  if (v339)
  {
    if ((v339 & 8) != 0)
    {
      if ((*(_BYTE *)(v339 - 79) & 1) != 0)
        goto LABEL_589;
    }
    else
    {
      v340 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v339 & 0xFFFFFFFFFFFFC000 | 0x20) != v340)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v339 & 0xFFFFFFFFFFFFC000), v340, v296, v297, v298, v299, v300, v301);
      if (((*(_QWORD *)((v339 & 0xFFFFFFFFFFFFC000) + 8 * ((v339 >> 10) & 0xF) + 0x28) >> (v339 >> 4)) & 1) != 0)
      {
LABEL_589:
        if (!*v206)
          goto LABEL_590;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v339, 0, v297, v298, v299, v300, v301);
  }
LABEL_590:
  v341 = *((_QWORD *)this + 153);
  if (v341)
  {
    if ((v341 & 8) != 0)
    {
      if ((*(_BYTE *)(v341 - 79) & 1) != 0)
        goto LABEL_595;
    }
    else
    {
      v342 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v341 & 0xFFFFFFFFFFFFC000 | 0x20) != v342)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v341 & 0xFFFFFFFFFFFFC000), v342, v296, v297, v298, v299, v300, v301);
      if (((*(_QWORD *)((v341 & 0xFFFFFFFFFFFFC000) + 8 * ((v341 >> 10) & 0xF) + 0x28) >> (v341 >> 4)) & 1) != 0)
      {
LABEL_595:
        if (!*v206)
          goto LABEL_596;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v341, 0, v297, v298, v299, v300, v301);
  }
LABEL_596:
  v343 = *((_QWORD *)this + 154);
  if (v343)
  {
    if ((v343 & 8) != 0)
    {
      if ((*(_BYTE *)(v343 - 79) & 1) != 0)
        goto LABEL_601;
    }
    else
    {
      v344 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v343 & 0xFFFFFFFFFFFFC000 | 0x20) != v344)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v343 & 0xFFFFFFFFFFFFC000), v344, v296, v297, v298, v299, v300, v301);
      if (((*(_QWORD *)((v343 & 0xFFFFFFFFFFFFC000) + 8 * ((v343 >> 10) & 0xF) + 0x28) >> (v343 >> 4)) & 1) != 0)
      {
LABEL_601:
        if (!*v206)
          goto LABEL_602;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v343, 0, v297, v298, v299, v300, v301);
  }
LABEL_602:
  v345 = *((_QWORD *)this + 155);
  if (v345)
  {
    if ((v345 & 8) != 0)
    {
      if ((*(_BYTE *)(v345 - 79) & 1) != 0)
        goto LABEL_607;
    }
    else
    {
      v346 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v345 & 0xFFFFFFFFFFFFC000 | 0x20) != v346)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v345 & 0xFFFFFFFFFFFFC000), v346, v296, v297, v298, v299, v300, v301);
      if (((*(_QWORD *)((v345 & 0xFFFFFFFFFFFFC000) + 8 * ((v345 >> 10) & 0xF) + 0x28) >> (v345 >> 4)) & 1) != 0)
      {
LABEL_607:
        if (!*v206)
          goto LABEL_608;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v345, 0, v297, v298, v299, v300, v301);
  }
LABEL_608:
  v347 = *((_QWORD *)this + 156);
  if (v347)
  {
    if ((v347 & 8) != 0)
    {
      if ((*(_BYTE *)(v347 - 79) & 1) != 0)
        goto LABEL_613;
    }
    else
    {
      v348 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v347 & 0xFFFFFFFFFFFFC000 | 0x20) != v348)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v347 & 0xFFFFFFFFFFFFC000), v348, v296, v297, v298, v299, v300, v301);
      if (((*(_QWORD *)((v347 & 0xFFFFFFFFFFFFC000) + 8 * ((v347 >> 10) & 0xF) + 0x28) >> (v347 >> 4)) & 1) != 0)
      {
LABEL_613:
        if (!*v206)
          goto LABEL_614;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v347, 0, v297, v298, v299, v300, v301);
  }
LABEL_614:
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 184, (uint64_t)v8, v296, v297, v298, v299, v300, v301);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 186, (uint64_t)v8, v349, v350, v351, v352, v353, v354);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 188, (uint64_t)v8, v355, v356, v357, v358, v359, v360);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 190, (uint64_t)v8, v361, v362, v363, v364, v365, v366);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 192, (uint64_t)v8, v367, v368, v369, v370, v371, v372);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 194, (uint64_t)v8, v373, v374, v375, v376, v377, v378);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 196, (uint64_t)v8, v379, v380, v381, v382, v383, v384);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 198, (uint64_t)v8, v385, v386, v387, v388, v389, v390);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 200, (uint64_t)v8, v391, v392, v393, v394, v395, v396);
  v403 = *((_QWORD *)this + 157);
  if (v403 && (v403 & 1) == 0)
  {
    if ((v403 & 8) != 0)
    {
      if ((*(_BYTE *)(v403 - 79) & 1) != 0 && !*v206)
        goto LABEL_616;
    }
    else
    {
      v529 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v403 & 0xFFFFFFFFFFFFC000 | 0x20) != v529)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v403 & 0xFFFFFFFFFFFFC000), v529, v397, v398, v399, v400, v401, v402);
      if (((*(_QWORD *)((v403 & 0xFFFFFFFFFFFFC000) + 8 * ((v403 >> 10) & 0xF) + 0x28) >> (v403 >> 4)) & 1) != 0
        && !*v206)
      {
        goto LABEL_616;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v403, 0, v398, v399, v400, v401, v402);
  }
LABEL_616:
  v404 = *((_QWORD *)this + 158);
  if (v404 && (v404 & 1) == 0)
  {
    if ((v404 & 8) != 0)
    {
      if ((*(_BYTE *)(v404 - 79) & 1) != 0 && !*v206)
        goto LABEL_618;
    }
    else
    {
      v530 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v404 & 0xFFFFFFFFFFFFC000 | 0x20) != v530)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v404 & 0xFFFFFFFFFFFFC000), v530, v397, v398, v399, v400, v401, v402);
      if (((*(_QWORD *)((v404 & 0xFFFFFFFFFFFFC000) + 8 * ((v404 >> 10) & 0xF) + 0x28) >> (v404 >> 4)) & 1) != 0
        && !*v206)
      {
        goto LABEL_618;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v404, 0, v398, v399, v400, v401, v402);
  }
LABEL_618:
  v405 = *((_QWORD *)this + 159);
  if (v405 && (v405 & 1) == 0)
  {
    if ((v405 & 8) != 0)
    {
      if ((*(_BYTE *)(v405 - 79) & 1) != 0 && !*v206)
        goto LABEL_620;
    }
    else
    {
      v531 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v405 & 0xFFFFFFFFFFFFC000 | 0x20) != v531)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v405 & 0xFFFFFFFFFFFFC000), v531, v397, v398, v399, v400, v401, v402);
      if (((*(_QWORD *)((v405 & 0xFFFFFFFFFFFFC000) + 8 * ((v405 >> 10) & 0xF) + 0x28) >> (v405 >> 4)) & 1) != 0
        && !*v206)
      {
        goto LABEL_620;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v405, 0, v398, v399, v400, v401, v402);
  }
LABEL_620:
  if (BYTE2(dword_1ECF4C7B0))
    JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 160, (uint64_t)v8, v397, v398, v399, v400, v401, v402);
  v587 = (_QWORD *)((char *)v8 + 168);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 162, (uint64_t)v8, v397, v398, v399, v400, v401, v402);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 164, (uint64_t)v8, v406, v407, v408, v409, v410, v411);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 166, (uint64_t)v8, v412, v413, v414, v415, v416, v417);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 168, (uint64_t)v8, v418, v419, v420, v421, v422, v423);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 170, (uint64_t)v8, v424, v425, v426, v427, v428, v429);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 172, (uint64_t)v8, v430, v431, v432, v433, v434, v435);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 174, (uint64_t)v8, v436, v437, v438, v439, v440, v441);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 176, (uint64_t)v8, v442, v443, v444, v445, v446, v447);
  if (BYTE2(dword_1ECF4C7B0))
    JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 178, (uint64_t)v8, v448, v449, v450, v451, v452, v453);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 180, (uint64_t)v8, v448, v449, v450, v451, v452, v453);
  JSC::LazyClassStructure::visit<JSC::SlotVisitor>((unint64_t *)this + 182, (uint64_t)v8, v454, v455, v456, v457, v458, v459);
  v466 = (unint64_t *)((char *)this + 1808);
  v467 = (unint64_t *)((char *)this + 1824);
  v582 = (unint64_t *)((char *)this + 1800);
  v583 = (unint64_t *)((char *)this + 1784);
  v468 = (unint64_t *)((char *)this + 1712);
  v469 = (unint64_t *)((char *)this + 1728);
  v584 = (unint64_t *)((char *)this + 1704);
  v585 = (unint64_t *)((char *)this + 1688);
  v470 = (unint64_t *)((char *)this + 1664);
  v471 = (unint64_t *)((char *)this + 1680);
  v472 = 11;
  v586 = v467;
  while (2)
  {
    v473 = v470;
    v474 = v471;
    switch((char)v472)
    {
      case 0:
        break;
      case 1:
        v474 = v584;
        v473 = v585;
        break;
      case 2:
        v473 = v468;
        v474 = v469;
        break;
      case 3:
        v473 = (unint64_t *)((char *)v588 + 1736);
        v474 = (unint64_t *)((char *)v588 + 1752);
        break;
      case 4:
        v473 = (unint64_t *)((char *)v588 + 1760);
        v474 = (unint64_t *)((char *)v588 + 1776);
        break;
      case 5:
        v474 = v582;
        v473 = v583;
        break;
      case 6:
        v473 = v466;
        v474 = v467;
        break;
      case 7:
        v473 = (unint64_t *)((char *)v588 + 1832);
        v474 = (unint64_t *)((char *)v588 + 1848);
        break;
      case 8:
        v473 = (unint64_t *)((char *)v588 + 1856);
        v474 = (unint64_t *)((char *)v588 + 1872);
        break;
      case 9:
        v473 = (unint64_t *)((char *)v588 + 1880);
        v474 = (unint64_t *)((char *)v588 + 1896);
        break;
      case 10:
        v473 = (unint64_t *)((char *)v588 + 1904);
        v474 = (unint64_t *)((char *)v588 + 1920);
        break;
      case 11:
        v473 = (unint64_t *)((char *)v588 + 1928);
        v474 = (unint64_t *)((char *)v588 + 1944);
        break;
      default:
        if (v472 == 255)
        {
          __break(0xC471u);
          JUMPOUT(0x1989B3230);
        }
        __break(0xC471u);
        JUMPOUT(0x1989B3250);
    }
    JSC::LazyClassStructure::visit<JSC::SlotVisitor>(v473, (uint64_t)v8, v460, v461, v462, v463, v464, v465);
    v475 = *v474;
    if (v475)
      v476 = (v475 & 1) == 0;
    else
      v476 = 0;
    if (v476)
    {
      if ((v475 & 8) != 0)
      {
        if ((*(_BYTE *)(v475 - 79) & 1) != 0 && !*v587)
          goto LABEL_631;
      }
      else
      {
        v477 = *((_DWORD *)v8 + 33);
        if (*(_DWORD *)(v475 & 0xFFFFFFFFFFFFC000 | 0x20) != v477)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v475 & 0xFFFFFFFFFFFFC000), v477, v460, v461, v462, v463, v464, v465);
        if (((*(_QWORD *)((v475 & 0xFFFFFFFFFFFFC000) + 8 * ((v475 >> 10) & 0xF) + 0x28) >> (v475 >> 4)) & 1) != 0)
        {
          v467 = v586;
          if (!*v587)
            goto LABEL_631;
        }
        else
        {
          v467 = v586;
        }
      }
      JSC::SlotVisitor::appendSlow((uint64_t)v8, v475, 0, v461, v462, v463, v464, v465);
    }
LABEL_631:
    if (--v472 != -1)
      continue;
    break;
  }
  v478 = *((_QWORD *)v588 + 202);
  if (!v478)
    goto LABEL_652;
  if ((v478 & 8) != 0)
  {
    if ((*(_BYTE *)(v478 - 79) & 1) != 0)
      goto LABEL_651;
  }
  else
  {
    v479 = *((_DWORD *)v8 + 33);
    if (*(_DWORD *)(v478 & 0xFFFFFFFFFFFFC000 | 0x20) != v479)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v478 & 0xFFFFFFFFFFFFC000), v479, v460, v461, v462, v463, v464, v465);
    if (((*(_QWORD *)((v478 & 0xFFFFFFFFFFFFC000) + 8 * ((v478 >> 10) & 0xF) + 0x28) >> (v478 >> 4)) & 1) != 0)
    {
LABEL_651:
      if (!*v587)
        goto LABEL_652;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)v8, v478, 0, v461, v462, v463, v464, v465);
LABEL_652:
  v480 = *((_QWORD *)v588 + 203);
  if (v480)
  {
    if ((v480 & 8) != 0)
    {
      if ((*(_BYTE *)(v480 - 79) & 1) != 0)
        goto LABEL_657;
    }
    else
    {
      v481 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v480 & 0xFFFFFFFFFFFFC000 | 0x20) != v481)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v480 & 0xFFFFFFFFFFFFC000), v481, v460, v461, v462, v463, v464, v465);
      if (((*(_QWORD *)((v480 & 0xFFFFFFFFFFFFC000) + 8 * ((v480 >> 10) & 0xF) + 0x28) >> (v480 >> 4)) & 1) != 0)
      {
LABEL_657:
        if (!*v587)
          goto LABEL_658;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v480, 0, v461, v462, v463, v464, v465);
  }
LABEL_658:
  v482 = *((_QWORD *)v588 + 204);
  if (v482)
  {
    if ((v482 & 8) != 0)
    {
      if ((*(_BYTE *)(v482 - 79) & 1) != 0)
        goto LABEL_663;
    }
    else
    {
      v483 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v482 & 0xFFFFFFFFFFFFC000 | 0x20) != v483)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v482 & 0xFFFFFFFFFFFFC000), v483, v460, v461, v462, v463, v464, v465);
      if (((*(_QWORD *)((v482 & 0xFFFFFFFFFFFFC000) + 8 * ((v482 >> 10) & 0xF) + 0x28) >> (v482 >> 4)) & 1) != 0)
      {
LABEL_663:
        if (!*v587)
          goto LABEL_664;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v482, 0, v461, v462, v463, v464, v465);
  }
LABEL_664:
  v484 = *((_QWORD *)v588 + 205);
  if (v484)
  {
    if ((v484 & 8) != 0)
    {
      if ((*(_BYTE *)(v484 - 79) & 1) != 0)
        goto LABEL_669;
    }
    else
    {
      v485 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v484 & 0xFFFFFFFFFFFFC000 | 0x20) != v485)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v484 & 0xFFFFFFFFFFFFC000), v485, v460, v461, v462, v463, v464, v465);
      if (((*(_QWORD *)((v484 & 0xFFFFFFFFFFFFC000) + 8 * ((v484 >> 10) & 0xF) + 0x28) >> (v484 >> 4)) & 1) != 0)
      {
LABEL_669:
        if (!*v587)
          goto LABEL_670;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v484, 0, v461, v462, v463, v464, v465);
  }
LABEL_670:
  v486 = *((_QWORD *)v588 + 206);
  if (v486 && (v486 & 1) == 0)
  {
    if ((v486 & 8) != 0)
    {
      if ((*(_BYTE *)(v486 - 79) & 1) == 0)
        goto LABEL_681;
    }
    else
    {
      v488 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v486 & 0xFFFFFFFFFFFFC000 | 0x20) != v488)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v486 & 0xFFFFFFFFFFFFC000), v488, v460, v461, v462, v463, v464, v465);
      if (((*(_QWORD *)((v486 & 0xFFFFFFFFFFFFC000) + 8 * ((v486 >> 10) & 0xF) + 0x28) >> (v486 >> 4)) & 1) == 0)
        goto LABEL_681;
    }
    if (!*v587)
      goto LABEL_672;
LABEL_681:
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v486, 0, v461, v462, v463, v464, v465);
  }
LABEL_672:
  v487 = *((_QWORD *)v588 + 207);
  if (v487 && (v487 & 1) == 0)
  {
    if ((v487 & 8) != 0)
    {
      if ((*(_BYTE *)(v487 - 79) & 1) != 0)
        goto LABEL_686;
    }
    else
    {
      v489 = *((_DWORD *)v8 + 33);
      if (*(_DWORD *)(v487 & 0xFFFFFFFFFFFFC000 | 0x20) != v489)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v487 & 0xFFFFFFFFFFFFC000), v489, v460, v461, v462, v463, v464, v465);
      if (((*(_QWORD *)((v487 & 0xFFFFFFFFFFFFC000) + 8 * ((v487 >> 10) & 0xF) + 0x28) >> (v487 >> 4)) & 1) != 0)
      {
LABEL_686:
        if (!*v587)
          goto LABEL_674;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)v8, v487, 0, v461, v462, v463, v464, v465);
  }
LABEL_674:
  JSC::RegExpCachedResult::visitAggregate((JSC::JSGlobalObject *)((char *)v588 + 2120), v8, v460, v461, v462, v463, v464, v465);
  if (*((_QWORD *)v588 + 394))
  {
    v593 = v588;
    v533 = (unsigned __int8 *)v588 + 4;
    while (1)
    {
      v534 = *v533;
      if ((v534 & 0x40) != 0)
        break;
      v535 = __ldaxr(v533);
      if (v535 == v534)
      {
        if (!__stxr(v534 | 0x40, v533))
          goto LABEL_1268;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v533);
LABEL_1268:
    WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>::begin(*((_QWORD *)v588 + 394), &v590);
    v595[0] = 0;
    memset(v589, 0, sizeof(v589));
    v595[1] = 0;
    WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v595, v540, v541, v542, v543, v544, v545, v546);
    v554 = v592;
    v555 = v591;
    while (1)
    {
      if (v554 == v555)
      {
        WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v589, v547, v548, v549, v550, v551, v552, v553);
        WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v590, v562, v563, v564, v565, v566, v567, v568);
        WTF::Locker<JSC::JSCellLock,void>::~Locker(&v593, v569, v570, v571, v572, v573, v574, v575);
        return;
      }
      if (v554 >= v555)
      {
        __break(0xC471u);
        JUMPOUT(0x1989B34ACLL);
      }
      WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>::Ref(v595, *(unsigned __int8 ***)(v590 + 8 * v554), v548, v549, v550, v551, v552, v553);
      isCancelled = JSC::DeferredWorkTimer::TicketData::isCancelled((JSC::DeferredWorkTimer::TicketData *)v595[0]);
      v557 = (uint64_t *)v595[0];
      if ((isCancelled & 1) != 0)
      {
LABEL_1272:
        v595[0] = 0;
        if (!v557)
          goto LABEL_1273;
        goto LABEL_1297;
      }
      v576 = v595[0][2];
      if (v576)
      {
        if ((v576[8] & 3) == 0)
        {
          v577 = *(_QWORD *)v576;
          if (*(_QWORD *)v576)
          {
            if ((v577 & 8) != 0)
            {
              v578 = 0;
              if ((*(_BYTE *)(v577 - 79) & 1) != 0 && !*v587)
                goto LABEL_1290;
            }
            else
            {
              v578 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v577 & 0xFFFFFFFFFFFFC000), *((_DWORD *)v8 + 33), v548, v549, v550, v551, v552, v553);
              if (((*(_QWORD *)((v577 & 0xFFFFFFFFFFFFC000) + v578 + 8 * ((v577 >> 10) & 0xF) + 0x28) >> (v577 >> 4)) & 1) != 0
                && !*((_QWORD *)v8 + 21))
              {
                goto LABEL_1290;
              }
            }
            JSC::SlotVisitor::appendSlow((uint64_t)v8, v577, v578, v549, v550, v551, v552, v553);
          }
        }
      }
LABEL_1290:
      v579 = v8;
      v557 = (uint64_t *)v595[0];
      v580 = v595[0][1];
      if (v580)
        v561 = (uint64_t *)(v580 + 8);
      else
        v561 = 0;
      if (v580)
        v581 = (uint64_t)&v580[8 * *(unsigned int *)v580 + 8];
      else
        v581 = 0;
      if (v561 != (uint64_t *)v581)
      {
        while (1)
        {
          v558 = *v561;
          if (!*v561)
            goto LABEL_1281;
          if ((*(_BYTE *)(v558 + 8) & 3) != 0)
            goto LABEL_1281;
          v559 = *(_QWORD *)v558;
          if (!*(_QWORD *)v558)
            goto LABEL_1281;
          if ((v559 & 8) == 0)
            break;
          v560 = 0;
          if ((*(_BYTE *)(v559 - 79) & 1) == 0)
          {
            v8 = v579;
LABEL_1363:
            JSC::SlotVisitor::appendSlow((uint64_t)v8, v559, v560, v549, v550, v551, v552, v553);
            goto LABEL_1281;
          }
          v8 = v579;
          if (*v587)
            goto LABEL_1363;
LABEL_1281:
          if (++v561 == (uint64_t *)v581)
          {
            v557 = (uint64_t *)v595[0];
            goto LABEL_1272;
          }
        }
        v560 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v559 & 0xFFFFFFFFFFFFC000), *((_DWORD *)v8 + 33), v548, v549, v550, v551, v552, v553);
        if (((*(_QWORD *)((v559 & 0xFFFFFFFFFFFFC000) + v560 + 8 * ((v559 >> 10) & 0xF) + 0x28) >> (v559 >> 4)) & 1) != 0
          && !*((_QWORD *)v8 + 21))
        {
          goto LABEL_1281;
        }
        goto LABEL_1363;
      }
      v595[0] = 0;
LABEL_1297:
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*v557, v547, v548, v549, v550, v551, v552, v553);
LABEL_1273:
      v555 = v591;
      if (v592 >= v591)
      {
        __break(0xC471u);
        JUMPOUT(0x1989B34CCLL);
      }
      v554 = ++v592;
    }
  }
}

void JSC::JSGlobalObject::visitChildren(JSC::JSGlobalObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int *v163;
  _QWORD *v164;
  uint64_t v165;
  BOOL v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  int i;
  char *v208;
  char *v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 *v213;
  int v214;
  int v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  void *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  int v246;
  uint64_t v247;
  unsigned __int8 *v248;
  int v250;
  void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  unsigned int *v260;
  uint64_t **v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  _QWORD v265[2];
  uint64_t v266;
  char v267;
  _QWORD v268[3];
  uint64_t v269;
  unsigned int v270;
  unint64_t v271;
  _QWORD v272[3];

  v265[0] = a2;
  v265[1] = this;
  v267 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v266 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1989B48B8);
  }
  *((_QWORD *)a2 + 11) = v265;
  JSC::JSSegmentedVariableObject::visitChildren(this, a2, a3);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 8));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 9));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 10));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 11));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 12));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 13));
  v6 = *((_QWORD *)this + 14);
  if (v6 && (v6 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 15));
  v7 = *((_QWORD *)this + 16);
  if (v7 && (v7 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 17));
  v8 = *((_QWORD *)this + 18);
  if (v8 && (v8 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 19));
  v9 = *((_QWORD *)this + 20);
  if (v9 && (v9 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 21));
  v10 = *((_QWORD *)this + 22);
  if (v10 && (v10 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 23));
  v11 = *((_QWORD *)this + 24);
  if (v11 && (v11 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 25));
  v12 = *((_QWORD *)this + 26);
  if (v12 && (v12 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 27));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 29));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 30));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 31));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 28));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 32));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 33));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 34));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 35));
  v13 = *((_QWORD *)this + 36);
  if (v13 && (v13 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v14 = *((_QWORD *)this + 37);
  if (v14 && (v14 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v15 = *((_QWORD *)this + 38);
  if (v15 && (v15 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v16 = *((_QWORD *)this + 39);
  if (v16 && (v16 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v17 = *((_QWORD *)this + 40);
  if (v17 && (v17 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v18 = *((_QWORD *)this + 41);
  if (v18 && (v18 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v19 = *((_QWORD *)this + 42);
  if (v19 && (v19 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v20 = *((_QWORD *)this + 43);
  if (v20 && (v20 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v21 = *((_QWORD *)this + 44);
  if (v21 && (v21 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v22 = *((_QWORD *)this + 45);
  if (v22 && (v22 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v23 = *((_QWORD *)this + 46);
  if (v23 && (v23 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v24 = *((_QWORD *)this + 47);
  if (v24 && (v24 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v25 = *((_QWORD *)this + 48);
  if (v25 && (v25 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 49));
  v26 = *((_QWORD *)this + 50);
  if (v26 && (v26 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 51));
  v27 = *((_QWORD *)this + 52);
  if (v27 && (v27 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v28 = *((_QWORD *)this + 53);
  if (v28 && (v28 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v29 = *((_QWORD *)this + 54);
  if (v29 && (v29 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v30 = *((_QWORD *)this + 55);
  if (v30 && (v30 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v31 = *((_QWORD *)this + 56);
  if (v31 && (v31 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v32 = *((_QWORD *)this + 57);
  if (v32 && (v32 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v33 = *((_QWORD *)this + 58);
  if (v33 && (v33 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 59));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 60));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 61));
  v34 = *((_QWORD *)this + 62);
  if (v34 && (v34 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v35 = *((_QWORD *)this + 63);
  if (v35 && (v35 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v36 = *((_QWORD *)this + 64);
  if (v36 && (v36 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v37 = *((_QWORD *)this + 65);
  if (v37 && (v37 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v38 = *((_QWORD *)this + 66);
  if (v38 && (v38 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v39 = *((_QWORD *)this + 67);
  if (v39 && (v39 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 69));
  v40 = *((_QWORD *)this + 68);
  if (v40 && (v40 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 70));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 71));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 72));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 73));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 74));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 75));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 76));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 77));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 78));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 79));
  v41 = *((_QWORD *)this + 80);
  if (v41 && (v41 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v42 = *((_QWORD *)this + 81);
  if (v42 && (v42 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 82));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 83));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 84));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 87));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 89));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 90));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 92));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 93));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 94));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 132));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 91));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 88));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 133));
  v43 = *((_QWORD *)this + 95);
  if (v43 && (v43 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v44 = *((_QWORD *)this + 96);
  if (v44 && (v44 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v45 = *((_QWORD *)this + 97);
  if (v45 && (v45 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v46 = *((_DWORD *)this + 208);
  if (v46)
    v47 = 16 * (v46 & 0xFFFFFFFE);
  else
    v47 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v47);
  v48 = *((_QWORD *)this + 98);
  if (v48 && (v48 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v49 = *((_DWORD *)this + 209);
  if (v49)
    v50 = 16 * (v49 & 0xFFFFFFFE);
  else
    v50 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v50);
  v51 = *((_DWORD *)this + 210);
  if (v51)
    v52 = 16 * (v51 & 0xFFFFFFFE);
  else
    v52 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v52);
  v53 = *((_DWORD *)this + 211);
  if (v53)
    v54 = 16 * (v53 & 0xFFFFFFFE);
  else
    v54 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v54);
  v55 = *((_DWORD *)this + 212);
  if (v55)
    v56 = 16 * (v55 & 0xFFFFFFFE);
  else
    v56 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v56);
  v57 = *((_DWORD *)this + 213);
  if (v57)
    v58 = 16 * (v57 & 0xFFFFFFFE);
  else
    v58 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v58);
  v59 = *((_DWORD *)this + 214);
  if (v59)
    v60 = 16 * (v59 & 0xFFFFFFFE);
  else
    v60 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v60);
  v61 = *((_DWORD *)this + 215);
  if (v61)
    v62 = 16 * (v61 & 0xFFFFFFFE);
  else
    v62 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v62);
  v63 = *((_DWORD *)this + 216);
  if (v63)
    v64 = 16 * (v63 & 0xFFFFFFFE);
  else
    v64 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v64);
  v65 = *((_DWORD *)this + 217);
  if (v65)
    v66 = 16 * (v65 & 0xFFFFFFFE);
  else
    v66 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v66);
  v67 = *((_DWORD *)this + 218);
  if (v67)
    v68 = 16 * (v67 & 0xFFFFFFFE);
  else
    v68 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v68);
  v69 = *((_DWORD *)this + 219);
  if (v69)
    v70 = 16 * (v69 & 0xFFFFFFFE);
  else
    v70 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v70);
  v71 = *((_DWORD *)this + 220);
  if (v71)
    v72 = 16 * (v71 & 0xFFFFFFFE);
  else
    v72 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v72);
  v73 = *((_DWORD *)this + 221);
  if (v73)
    v74 = 16 * (v73 & 0xFFFFFFFE);
  else
    v74 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v74);
  v75 = *((_DWORD *)this + 222);
  if (v75)
    v76 = 16 * (v75 & 0xFFFFFFFE);
  else
    v76 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v76);
  v77 = *((_DWORD *)this + 223);
  if (v77)
    v78 = 16 * (v77 & 0xFFFFFFFE);
  else
    v78 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v78);
  v79 = *((_DWORD *)this + 224);
  if (v79)
    v80 = 16 * (v79 & 0xFFFFFFFE);
  else
    v80 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v80);
  v81 = *((_DWORD *)this + 225);
  if (v81)
    v82 = 16 * (v81 & 0xFFFFFFFE);
  else
    v82 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v82);
  v83 = *((_DWORD *)this + 226);
  if (v83)
    v84 = 16 * (v83 & 0xFFFFFFFE);
  else
    v84 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v84);
  v85 = *((_DWORD *)this + 227);
  if (v85)
    v86 = 16 * (v85 & 0xFFFFFFFE);
  else
    v86 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v86);
  v87 = *((_DWORD *)this + 228);
  if (v87)
    v88 = 16 * (v87 & 0xFFFFFFFE);
  else
    v88 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v88);
  v89 = *((_DWORD *)this + 229);
  if (v89)
    v90 = 16 * (v89 & 0xFFFFFFFE);
  else
    v90 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v90);
  v91 = *((_DWORD *)this + 230);
  if (v91)
    v92 = 16 * (v91 & 0xFFFFFFFE);
  else
    v92 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v92);
  v93 = *((_DWORD *)this + 231);
  if (v93)
    v94 = 16 * (v93 & 0xFFFFFFFE);
  else
    v94 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v94);
  v95 = *((_DWORD *)this + 232);
  if (v95)
    v96 = 16 * (v95 & 0xFFFFFFFE);
  else
    v96 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v96);
  v97 = *((_QWORD *)this + 99);
  if (v97 && (v97 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v98 = *((_QWORD *)this + 100);
  if (v98 && (v98 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v99 = *((_QWORD *)this + 101);
  if (v99 && (v99 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v100 = *((_QWORD *)this + 102);
  if (v100 && (v100 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v101 = *((_QWORD *)this + 103);
  if (v101 && (v101 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v102 = *((_DWORD *)this + 233);
  if (v102)
    v103 = 16 * (v102 & 0xFFFFFFFE);
  else
    v103 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v103);
  v104 = *((_DWORD *)this + 234);
  if (v104)
    v105 = 16 * (v104 & 0xFFFFFFFE);
  else
    v105 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v105);
  v106 = *((_DWORD *)this + 235);
  if (v106)
    v107 = 16 * (v106 & 0xFFFFFFFE);
  else
    v107 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v107);
  v108 = *((_DWORD *)this + 236);
  if (v108)
    v109 = 16 * (v108 & 0xFFFFFFFE);
  else
    v109 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v109);
  v110 = *((_DWORD *)this + 237);
  if (v110)
    v111 = 16 * (v110 & 0xFFFFFFFE);
  else
    v111 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v111);
  v112 = *((_DWORD *)this + 238);
  if (v112)
    v113 = 16 * (v112 & 0xFFFFFFFE);
  else
    v113 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v113);
  v114 = *((_DWORD *)this + 239);
  if (v114)
    v115 = 16 * (v114 & 0xFFFFFFFE);
  else
    v115 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v115);
  v116 = *((_DWORD *)this + 240);
  if (v116)
    v117 = 16 * (v116 & 0xFFFFFFFE);
  else
    v117 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v117);
  v118 = *((_DWORD *)this + 241);
  if (v118)
    v119 = 16 * (v118 & 0xFFFFFFFE);
  else
    v119 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v119);
  v120 = *((_DWORD *)this + 242);
  if (v120)
    v121 = 16 * (v120 & 0xFFFFFFFE);
  else
    v121 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v121);
  v122 = *((_QWORD *)this + 128);
  if (v122 && (v122 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v123 = *((_QWORD *)this + 129);
  if (v123 && (v123 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v124 = *((_QWORD *)this + 130);
  if (v124 && (v124 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v125 = *((_QWORD *)this + 131);
  if (v125 && (v125 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v126 = *((_DWORD *)this + 243);
  if (v126)
    v127 = 16 * (v126 & 0xFFFFFFFE);
  else
    v127 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v127);
  v128 = *((_DWORD *)this + 244);
  if (v128)
    v129 = 16 * (v128 & 0xFFFFFFFE);
  else
    v129 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v129);
  v130 = *((_DWORD *)this + 247);
  if (v130)
    v131 = 16 * (v130 & 0xFFFFFFFE);
  else
    v131 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v131);
  v132 = *((_DWORD *)this + 245);
  if (v132)
    v133 = 16 * (v132 & 0xFFFFFFFE);
  else
    v133 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v133);
  v134 = *((_DWORD *)this + 246);
  if (v134)
    v135 = 16 * (v134 & 0xFFFFFFFE);
  else
    v135 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v135);
  v136 = *((_DWORD *)this + 248);
  if (v136)
    v137 = 16 * (v136 & 0xFFFFFFFE);
  else
    v137 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v137);
  v138 = *((_DWORD *)this + 249);
  if (v138)
    v139 = 16 * (v138 & 0xFFFFFFFE);
  else
    v139 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v139);
  v140 = *((_DWORD *)this + 250);
  if (v140)
    v141 = 16 * (v140 & 0xFFFFFFFE);
  else
    v141 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v141);
  v142 = *((_DWORD *)this + 251);
  if (v142)
    v143 = 16 * (v142 & 0xFFFFFFFE);
  else
    v143 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v143);
  v144 = *((_DWORD *)this + 252);
  if (v144)
    v145 = 16 * (v144 & 0xFFFFFFFE);
  else
    v145 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v145);
  v146 = *((_QWORD *)this + 134);
  if (v146 && (v146 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v147 = *((_QWORD *)this + 135);
  if (v147 && (v147 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v148 = *((_QWORD *)this + 136);
  if (v148 && (v148 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v149 = *((_DWORD *)this + 253);
  if (v149)
    v150 = 16 * (v149 & 0xFFFFFFFE);
  else
    v150 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v150);
  v151 = *((_DWORD *)this + 254);
  if (v151)
    v152 = 16 * (v151 & 0xFFFFFFFE);
  else
    v152 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v152);
  v153 = *((_DWORD *)this + 255);
  if (v153)
    v154 = 16 * (v153 & 0xFFFFFFFE);
  else
    v154 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v154);
  v155 = *((_QWORD *)this + 137);
  if (v155 && (v155 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v156 = *((_QWORD *)this + 138);
  if (v156 && (v156 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v157 = *((_QWORD *)this + 139);
  if (v157 && (v157 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v158 = *((_QWORD *)this + 140);
  if (v158 && (v158 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v159 = *((_QWORD *)this + 141);
  if (v159 && (v159 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v160 = *((_QWORD *)this + 142);
  if (v160 && (v160 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v161 = *((_QWORD *)this + 143);
  if (v161 && (v161 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 144));
  v162 = *((_QWORD *)this + 244);
  if (v162 && (v162 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v163 = (unsigned int *)*((_QWORD *)this + 245);
  if (v163)
    v164 = v163 + 2;
  else
    v164 = 0;
  if (v163)
    v165 = (uint64_t)&v163[2 * *v163 + 2];
  else
    v165 = 0;
  while (v164 != (_QWORD *)v165)
  {
    if (*v164)
      v166 = (*v164 & 1) == 0;
    else
      v166 = 0;
    if (v166)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    ++v164;
  }
  v167 = *((_DWORD *)this + 290);
  if (v167)
    v168 = 16 * (v167 & 0xFFFFFFFE);
  else
    v168 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v168);
  v169 = *((_DWORD *)this + 291);
  if (v169)
    v170 = 16 * (v169 & 0xFFFFFFFE);
  else
    v170 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v170);
  v171 = *((_DWORD *)this + 292);
  if (v171)
    v172 = 16 * (v171 & 0xFFFFFFFE);
  else
    v172 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v172);
  v173 = *((_DWORD *)this + 293);
  if (v173)
    v174 = 16 * (v173 & 0xFFFFFFFE);
  else
    v174 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v174);
  v175 = *((_DWORD *)this + 294);
  if (v175)
    v176 = 16 * (v175 & 0xFFFFFFFE);
  else
    v176 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v176);
  v177 = *((_DWORD *)this + 295);
  if (v177)
    v178 = 16 * (v177 & 0xFFFFFFFE);
  else
    v178 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v178);
  v179 = *((_DWORD *)this + 296);
  if (v179)
    v180 = 16 * (v179 & 0xFFFFFFFE);
  else
    v180 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v180);
  v181 = *((_DWORD *)this + 297);
  if (v181)
    v182 = 16 * (v181 & 0xFFFFFFFE);
  else
    v182 = 0;
  (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v182);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 149));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 150));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 151));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 152));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 153));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 154));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 155));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 156));
  v183 = *((_QWORD *)this + 184);
  if (v183 && (v183 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 185));
  v184 = *((_QWORD *)this + 186);
  if (v184 && (v184 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 187));
  v185 = *((_QWORD *)this + 188);
  if (v185 && (v185 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 189));
  v186 = *((_QWORD *)this + 190);
  if (v186 && (v186 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 191));
  v187 = *((_QWORD *)this + 192);
  if (v187 && (v187 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 193));
  v188 = *((_QWORD *)this + 194);
  if (v188 && (v188 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 195));
  v189 = *((_QWORD *)this + 196);
  if (v189 && (v189 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 197));
  v190 = *((_QWORD *)this + 198);
  if (v190 && (v190 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 199));
  v191 = *((_QWORD *)this + 200);
  if (v191 && (v191 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 201));
  v192 = *((_QWORD *)this + 157);
  if (v192 && (v192 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v193 = *((_QWORD *)this + 158);
  if (v193 && (v193 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v194 = *((_QWORD *)this + 159);
  if (v194 && (v194 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  if (BYTE2(dword_1ECF4C7B0))
  {
    v195 = *((_QWORD *)this + 160);
    if (v195 && (v195 & 1) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 161));
  }
  v196 = *((_QWORD *)this + 162);
  if (v196 && (v196 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 163));
  v197 = *((_QWORD *)this + 164);
  if (v197 && (v197 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 165));
  v198 = *((_QWORD *)this + 166);
  if (v198 && (v198 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 167));
  v199 = *((_QWORD *)this + 168);
  if (v199 && (v199 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 169));
  v200 = *((_QWORD *)this + 170);
  if (v200 && (v200 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 171));
  v201 = *((_QWORD *)this + 172);
  if (v201 && (v201 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 173));
  v202 = *((_QWORD *)this + 174);
  if (v202 && (v202 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 175));
  v203 = *((_QWORD *)this + 176);
  if (v203 && (v203 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 177));
  if (BYTE2(dword_1ECF4C7B0))
  {
    v204 = *((_QWORD *)this + 178);
    if (v204 && (v204 & 1) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 179));
  }
  v205 = *((_QWORD *)this + 180);
  if (v205 && (v205 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 181));
  v206 = *((_QWORD *)this + 182);
  if (v206 && (v206 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 183));
  for (i = 11; i != -1; --i)
  {
    v208 = (char *)this + 1664;
    v209 = (char *)this + 1680;
    switch((char)i)
    {
      case 0:
        break;
      case 1:
        v209 = (char *)this + 1704;
        v208 = (char *)this + 1688;
        break;
      case 2:
        v209 = (char *)this + 1728;
        v208 = (char *)this + 1712;
        break;
      case 3:
        v209 = (char *)this + 1752;
        v208 = (char *)this + 1736;
        break;
      case 4:
        v209 = (char *)this + 1776;
        v208 = (char *)this + 1760;
        break;
      case 5:
        v209 = (char *)this + 1800;
        v208 = (char *)this + 1784;
        break;
      case 6:
        v208 = (char *)this + 1808;
        v209 = (char *)this + 1824;
        break;
      case 7:
        v209 = (char *)this + 1848;
        v208 = (char *)this + 1832;
        break;
      case 8:
        v209 = (char *)this + 1872;
        v208 = (char *)this + 1856;
        break;
      case 9:
        v209 = (char *)this + 1896;
        v208 = (char *)this + 1880;
        break;
      case 10:
        v209 = (char *)this + 1920;
        v208 = (char *)this + 1904;
        break;
      case 11:
        v209 = (char *)this + 1944;
        v208 = (char *)this + 1928;
        break;
      default:
        if (i == 255)
        {
          __break(0xC471u);
          JUMPOUT(0x1989B5414);
        }
        __break(0xC471u);
        JUMPOUT(0x1989B5434);
    }
    if (*(_QWORD *)v208)
      v210 = (*(_QWORD *)v208 & 1) == 0;
    else
      v210 = 0;
    if (v210)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)v208 + 1));
    if (*(_QWORD *)v209 && (*(_QWORD *)v209 & 1) == 0)
      (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  }
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 202));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 203));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 204));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 205));
  v211 = *((_QWORD *)this + 206);
  if (v211 && (v211 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  v212 = *((_QWORD *)this + 207);
  if (v212 && (v212 & 1) == 0)
    (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 268));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 269));
  if (*((_BYTE *)this + 2136))
  {
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 271));
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 270));
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 272));
    (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 273));
  }
  if (!*((_QWORD *)this + 394))
    goto LABEL_486;
  v213 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v214 = *v213;
    if ((v214 & 0x40) != 0)
      break;
    v215 = __ldaxr(v213);
    if (v215 == v214)
    {
      if (!__stxr(v214 | 0x40, v213))
        goto LABEL_484;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_484:
  WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>::begin(*((_QWORD *)this + 394), &v269);
  v272[0] = 0;
  memset(v268, 0, sizeof(v268));
  v272[1] = 0;
  WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v272, v216, v217, v218, v219, v220, v221, v222);
  v230 = v271;
  v231 = v270;
  while (v230 != v270)
  {
    if (v230 >= v231)
    {
      __break(0xC471u);
      JUMPOUT(0x1989B53CCLL);
    }
    v247 = *(_QWORD *)(v269 + 8 * v230);
    v248 = *(unsigned __int8 **)v247;
    if (__ldaxr(*(unsigned __int8 **)v247))
    {
      __clrex();
    }
    else if (!__stxr(1u, v248))
    {
      goto LABEL_497;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v248);
LABEL_497:
    ++*((_QWORD *)v248 + 1);
    v250 = __ldxr(v248);
    if (v250 == 1)
    {
      if (!__stlxr(0, v248))
        goto LABEL_502;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v248, 0, v224, v225, v226, v227, v228, v229);
LABEL_502:
    if ((JSC::DeferredWorkTimer::TicketData::isCancelled((JSC::DeferredWorkTimer::TicketData *)v247) & 1) == 0)
    {
      v258 = *(uint64_t **)(v247 + 16);
      if (!v258 || (v258[1] & 3) != 0)
        v259 = 0;
      else
        v259 = *v258;
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v259);
      v260 = *(unsigned int **)(v247 + 8);
      if (v260)
        v261 = (uint64_t **)(v260 + 2);
      else
        v261 = 0;
      if (v260)
        v262 = (uint64_t)&v260[2 * *v260 + 2];
      else
        v262 = 0;
      while (v261 != (uint64_t **)v262)
      {
        v263 = *v261;
        if (!*v261 || (v263[1] & 3) != 0)
          v264 = 0;
        else
          v264 = *v263;
        (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 24))(a2, v264);
        ++v261;
      }
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<JSC::DeferredWorkTimer::TicketData,(WTF::DestructionThread)0>(*(_QWORD *)v247, v251, v252, v253, v254, v255, v256, v257);
    v231 = v270;
    if (v271 >= v270)
    {
      __break(0xC471u);
      JUMPOUT(0x1989B53ECLL);
    }
    v230 = v271 + 1;
    v271 = v230;
  }
  WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v268, v223, v224, v225, v226, v227, v228, v229);
  WTF::Vector<WTF::Ref<JSC::DeferredWorkTimer::TicketData,WTF::RawPtrTraits<JSC::DeferredWorkTimer::TicketData>,WTF::DefaultRefDerefTraits<JSC::DeferredWorkTimer::TicketData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v269, v232, v233, v234, v235, v236, v237, v238);
  if (this)
  {
    while (1)
    {
      v245 = *v213;
      if ((v245 & 0xC0) != 0x40)
        break;
      v246 = __ldxr(v213);
      if (v246 == v245)
      {
        if (!__stxr(v245 & 0xBF, v213))
          goto LABEL_486;
      }
      else
      {
        __clrex();
      }
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v239, v240, v241, v242, v243, v244);
  }
LABEL_486:
  *(_QWORD *)(v265[0] + 88) = v266;
}

uint64_t JSC::JSGlobalObject::reportUncaughtExceptionAtEventLoop(JSC::JSGlobalObject *this, JSC::JSGlobalObject *a2, JSC::Exception *a3)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 1);
  return WTF::dataLog<char [33],JSC::JSValue,char [2]>((JSC::JSValue *)&v4);
}

uint64_t JSC::consoleTargetFunction(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v52;
  int v53;
  unint64_t *v54;
  unint64_t v55;
  Inspector::ScriptArguments *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF *v88;
  uint64_t v89;
  uint64_t v90;

  WTFLogAlways("Target function called", (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8, (char)v87);
  v16 = *((_QWORD *)this + 401);
  if (!v16)
    return 10;
  do
    v17 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v17 + 1, (unsigned int *)v16));
  if (*(_QWORD *)(v16 + 8))
  {
    v18 = *((_QWORD *)this + 7);
    v19 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v19 = 0x1600000002;
    *(_QWORD *)(v19 + 8) = "Target function called";
    *(_DWORD *)(v19 + 16) = 4;
    v87 = (WTF::StringImpl *)v19;
    v33 = JSC::jsString(v18, (JSC::VM *)&v87, v20, v21, v22, v23, v24, v25);
    v34 = *(_QWORD *)(v18 + 712);
    if (!v34)
    {
      JSC::HandleSet::grow((JSC::HandleSet *)(v18 + 672), v26, v27, v28, v29, v30, v31, v32);
      v34 = *(_QWORD *)(v18 + 712);
    }
    *(_QWORD *)(v18 + 712) = *(_QWORD *)v34;
    *(_QWORD *)(v34 + 16) = 0;
    v35 = (uint64_t *)(v34 + 16);
    *(_QWORD *)v34 = 0;
    *(_QWORD *)(v34 + 8) = 0;
    if (v33 && (v33 & 0xFFFE000000000002) == 0)
    {
      v36 = *(unint64_t **)((v34 & 0xFFFFFFFFFFFFF000) + 0x10);
      v37 = v36[3];
      v36 += 3;
      *(_QWORD *)v34 = v37;
      *(_QWORD *)(v34 + 8) = v36;
      *v36 = v34;
      *(_QWORD *)(v37 + 8) = v34;
    }
    *v35 = v33;
    v38 = v34;
    v89 = 0;
    v46 = (WTF *)WTF::fastMalloc((WTF *)8);
    LODWORD(v89) = 1;
    v88 = v46;
    *(_QWORD *)v46 = 0;
    v47 = *(_QWORD *)(((unint64_t)(v35 - 2) & 0xFFFFFFFFFFFFF000) + 0x10);
    v48 = *(_QWORD *)(v47 + 40);
    if (!v48)
    {
      JSC::HandleSet::grow(*(JSC::HandleSet **)((v38 & 0xFFFFFFFFFFFFF000) + 0x10), v39, v40, v41, v42, v43, v44, v45);
      v48 = *(_QWORD *)(v47 + 40);
    }
    *(_QWORD *)(v47 + 40) = *(_QWORD *)v48;
    *(_QWORD *)(v48 + 16) = 0;
    v49 = (uint64_t *)(v48 + 16);
    *(_QWORD *)v48 = 0;
    *(_QWORD *)(v48 + 8) = 0;
    *(_QWORD *)v46 = v48 + 16;
    v50 = *v35;
    v52 = (*v35 & 0xFFFE000000000002) == 0 && v50 != 0;
    if (*v49)
      v53 = (*v49 & 0xFFFE000000000002) == 0;
    else
      v53 = 0;
    if (v53 != v52)
    {
      if ((v52 & 1) != 0)
      {
        v54 = *(unint64_t **)((v48 & 0xFFFFFFFFFFFFF000) + 0x10);
        v55 = v54[3];
        v54 += 3;
        *(_QWORD *)v48 = v55;
        *(_QWORD *)(v48 + 8) = v54;
        *v54 = v48;
        *(_QWORD *)(v55 + 8) = v48;
      }
      else
      {
        v86 = *(_QWORD *)v48;
        v85 = *(_QWORD **)(v48 + 8);
        *v85 = *(_QWORD *)v48;
        *(_QWORD *)(v86 + 8) = v85;
        *(_QWORD *)v48 = 0;
        *(_QWORD *)(v48 + 8) = 0;
        v49 = *(uint64_t **)v46;
      }
    }
    *v49 = v50;
    HIDWORD(v89) = 1;
    v56 = (Inspector::ScriptArguments *)WTF::fastMalloc((WTF *)0x20);
    v90 = Inspector::ScriptArguments::ScriptArguments((uint64_t)v56, (unint64_t)this, (uint64_t *)&v88, v57, v58, v59, v60, v61);
    v62 = v88;
    if (HIDWORD(v89))
    {
      v63 = 8 * HIDWORD(v89);
      v64 = v88;
      do
      {
        v65 = *(_QWORD *)v64;
        if (*(_QWORD *)v64)
        {
          v66 = (uint64_t *)(v65 - 16);
          v67 = *(_QWORD *)(((v65 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
          v68 = *(uint64_t **)(v65 - 8);
          if (v68)
          {
            v69 = *v66;
            *v68 = *v66;
            *(_QWORD *)(v69 + 8) = v68;
            *v66 = 0;
            v66[1] = 0;
          }
          *v66 = *(_QWORD *)(v67 + 40);
          *(_QWORD *)(v67 + 40) = v66;
          *(_QWORD *)v64 = 0;
        }
        v64 = (WTF *)((char *)v64 + 8);
        v63 -= 8;
      }
      while (v63);
    }
    if (v62)
    {
      v88 = 0;
      LODWORD(v89) = 0;
      WTF::fastFree((unint64_t)v62, v9, v10, v11, v12, v13, v14, v15);
    }
    v70 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF000) + 0x10);
    v71 = (_QWORD *)*(v35 - 1);
    if (v71)
    {
      v72 = *(_QWORD *)v38;
      *v71 = *(_QWORD *)v38;
      *(_QWORD *)(v72 + 8) = v71;
      *(_QWORD *)v38 = 0;
      *(v35 - 1) = 0;
    }
    *(_QWORD *)v38 = *(_QWORD *)(v70 + 40);
    *(_QWORD *)(v70 + 40) = v38;
    v73 = v87;
    v87 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
      {
        WTF::StringImpl::~StringImpl(v73, (WTF::AtomStringImpl *)v9, v10, v11, v12, v13, v14, v15);
        WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
      }
      else
      {
        *(_DWORD *)v73 -= 2;
      }
    }
    if (*((_DWORD *)v56 + 7))
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD, JSC *, uint64_t *))(**(_QWORD **)(v16 + 8) + 16))(*(_QWORD *)(v16 + 8), 0, 0, this, &v90);
      v56 = (Inspector::ScriptArguments *)v90;
      v90 = 0;
      if (!v56)
        goto LABEL_42;
    }
    else
    {
      v90 = 0;
    }
    WTF::RefCounted<Inspector::ScriptArguments>::deref(v56, v9, v10, v11, v12, v13, v14, v15);
  }
  do
  {
LABEL_42:
    v74 = __ldaxr((unsigned int *)v16);
    v75 = v74 - 1;
  }
  while (__stlxr(v75, (unsigned int *)v16));
  if (!v75)
  {
    atomic_store(1u, (unsigned int *)v16);
    WTF::fastFree(v16, v9, v10, v11, v12, v13, v14, v15);
  }
  return 10;
}

uint64_t JSC::JSGlobalObject::consoleClient@<X0>(uint64_t this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(this + 3208);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *a2 = v2;
  return this;
}

uint64_t JSC::JSGlobalObject::JSGlobalObject(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (**a4)(JSC::JSGlobalObject *__hidden this, const JSC::JSGlobalObject *))
{
  int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int64x2_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (**v41)(JSC::JSGlobalObject *__hidden, const JSC::JSGlobalObject *);
  _BYTE v43[24];
  uint64_t v44;

  v7 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)a1 = a3 >> 4;
  *(_DWORD *)(a1 + 4) = v7;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 56) = a2;
  bzero((void *)(a1 + 64), 0x768uLL);
  v8 = (_DWORD *)WTF::fastMalloc((WTF *)0x6F0);
  *v8 = 221;
  bzero(v8 + 2, 0x6E8uLL);
  *(_QWORD *)(a1 + 1960) = v8;
  *(_QWORD *)(a1 + 1968) = off_1E35A06F0;
  *(_QWORD *)(a1 + 1976) = 0;
  *(_QWORD *)(a1 + 1984) = a2;
  v44 = a1 + 1968;
  WTF::HashTable<JSC::WeakGCHashTable *,JSC::WeakGCHashTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>>::add((uint64_t *)(a2 + 920), &v44, v9, v10, v11, v12, v13, (uint64_t)v43);
  *(_BYTE *)(a1 + 1992) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  v14 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v14 = 1;
  *(_WORD *)(v14 + 4) = 1;
  *(_QWORD *)(v14 + 8) = v14 + 8;
  *(_QWORD *)(v14 + 16) = v14 + 8;
  *(_QWORD *)(a1 + 2040) = v14;
  v15 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v15 = 1;
  *(_WORD *)(v15 + 4) = 1;
  *(_QWORD *)(v15 + 8) = v15 + 8;
  *(_QWORD *)(v15 + 16) = v15 + 8;
  *(_QWORD *)(a1 + 2048) = v15;
  v16 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v16 = 1;
  *(_WORD *)(v16 + 4) = 1;
  *(_QWORD *)(v16 + 8) = v16 + 8;
  *(_QWORD *)(v16 + 16) = v16 + 8;
  *(_QWORD *)(a1 + 2056) = v16;
  v17 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v17 = 1;
  *(_WORD *)(v17 + 4) = 1;
  *(_QWORD *)(v17 + 8) = v17 + 8;
  *(_QWORD *)(v17 + 16) = v17 + 8;
  *(_QWORD *)(a1 + 2064) = v17;
  v18 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v18 = 1;
  *(_WORD *)(v18 + 4) = 1;
  *(_QWORD *)(v18 + 8) = v18 + 8;
  *(_QWORD *)(v18 + 16) = v18 + 8;
  *(_QWORD *)(a1 + 2072) = v18;
  v19 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v19 = 1;
  *(_WORD *)(v19 + 4) = 1;
  *(_QWORD *)(v19 + 8) = v19 + 8;
  *(_QWORD *)(v19 + 16) = v19 + 8;
  *(_QWORD *)(a1 + 2080) = v19;
  *(_QWORD *)(a1 + 2088) = 0;
  if (byte_1ECF4C5B8)
    v27 = dword_1ECF4C5BC;
  else
    v27 = WTF::cryptographicallyRandomNumber<unsigned int>(v19, v20, v21, v22, v23, v24, v25, v26);
  *(_DWORD *)(a1 + 2096) = v27;
  if (!v27)
    v27 = 1;
  *(_QWORD *)(a1 + 2104) = v27;
  *(_QWORD *)(a1 + 2112) = (((unint64_t)v27 >> 26) | ((unint64_t)v27 << 23)) ^ ((v27 ^ ((unint64_t)v27 << 23)) >> 17);
  *(_BYTE *)(a1 + 2136) = 0;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_BYTE *)(a1 + 2192) = 0;
  *(_QWORD *)(a1 + 2216) = 3;
  v28 = vdupq_n_s64(3uLL);
  *(int64x2_t *)(a1 + 2224) = v28;
  *(int64x2_t *)(a1 + 2240) = v28;
  *(int64x2_t *)(a1 + 2256) = v28;
  *(_OWORD *)(a1 + 2272) = xmmword_199158300;
  *(int64x2_t *)(a1 + 2288) = v28;
  *(int64x2_t *)(a1 + 2304) = v28;
  *(int64x2_t *)(a1 + 2320) = v28;
  *(_OWORD *)(a1 + 2336) = xmmword_199158300;
  *(_OWORD *)(a1 + 2352) = xmmword_199124B40;
  *(_OWORD *)(a1 + 2368) = xmmword_199158300;
  v29 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 2384) = v29;
  *(int64x2_t *)(a1 + 2400) = v29;
  *(int64x2_t *)(a1 + 2416) = v29;
  *(int64x2_t *)(a1 + 2432) = v29;
  *(int64x2_t *)(a1 + 2448) = v29;
  *(int64x2_t *)(a1 + 2464) = v29;
  *(int64x2_t *)(a1 + 2480) = v29;
  *(int64x2_t *)(a1 + 2496) = v29;
  *(int64x2_t *)(a1 + 2512) = v29;
  *(int64x2_t *)(a1 + 2528) = v29;
  *(int64x2_t *)(a1 + 2544) = v29;
  *(int64x2_t *)(a1 + 2560) = v29;
  bzero((void *)(a1 + 2576), 0x251uLL);
  *(_DWORD *)(a1 + 3169) = 65793;
  *(_DWORD *)(a1 + 3176) = 1;
  *(_QWORD *)(a1 + 3208) = 0;
  *(_OWORD *)(a1 + 3184) = 0u;
  *(_DWORD *)(a1 + 3200) = 0;
  *(_DWORD *)(a1 + 3216) = dword_1ECF4C61C;
  *(_BYTE *)(a1 + 3220) = 1;
  *(_QWORD *)(a1 + 3224) = off_1E35A0770;
  *(_QWORD *)(a1 + 3232) = 0;
  *(_QWORD *)(a1 + 3240) = a2;
  v44 = a1 + 3224;
  WTF::HashTable<JSC::WeakGCHashTable *,JSC::WeakGCHashTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>>::add((uint64_t *)(a2 + 920), &v44, v30, v31, v32, v33, v34, (uint64_t)v43);
  *(_QWORD *)(a1 + 3248) = off_1E35A0798;
  *(_QWORD *)(a1 + 3256) = 0;
  *(_QWORD *)(a1 + 3264) = a2;
  v44 = a1 + 3248;
  WTF::HashTable<JSC::WeakGCHashTable *,JSC::WeakGCHashTable *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>,WTF::HashTraits<JSC::WeakGCHashTable *>>::add((uint64_t *)(a2 + 920), &v44, v35, v36, v37, v38, v39, (uint64_t)v43);
  v40 = WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)v40 = 0u;
  *(_OWORD *)(v40 + 16) = 0u;
  *(_OWORD *)(v40 + 32) = 0u;
  *(_DWORD *)v40 = 1;
  *(_OWORD *)(v40 + 8) = 0u;
  *(_OWORD *)(v40 + 24) = 0u;
  *(_BYTE *)(v40 + 40) = 1;
  v41 = JSC::JSGlobalObject::baseGlobalObjectMethodTable(void)::table;
  *(_QWORD *)(a1 + 3272) = v40;
  if (a4)
    v41 = a4;
  *(_QWORD *)(a1 + 3280) = v41;
  *(_QWORD *)(a1 + 3288) = 0;
  return a1;
}

void JSC::JSGlobalObject::~JSGlobalObject(JSC::JSGlobalObject *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  JSC::Debugger *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t i;
  uint64_t v51;
  unint64_t v52;
  WTF::StringImpl *v53;
  unsigned int v54;
  unsigned int v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  uint64_t v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  _QWORD *v250;
  _QWORD *v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  _QWORD *v265;
  _QWORD *v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  _QWORD *v275;
  _QWORD *v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  _QWORD *v280;
  _QWORD *v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  void **v334;
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  BOOL v347;
  int v348;
  Inspector::JSGlobalObjectInspectorController *v349;
  unint64_t v350;
  void *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  WTF::StringImpl *v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  BOOL v370;
  BOOL v371;
  unsigned int v372;
  unsigned int v373;
  uint64_t **v374;
  uint64_t *i38;
  unsigned int v376;
  unsigned int v377;
  uint64_t **v378;
  uint64_t *i39;
  unsigned int v380;
  unsigned int v381;
  uint64_t **v382;
  uint64_t *i40;
  unsigned int v384;
  unsigned int v385;
  uint64_t **v386;
  uint64_t *i41;
  unsigned int v388;
  unsigned int v389;
  uint64_t **v390;
  uint64_t *i42;
  unsigned int v392;
  unsigned int v393;
  uint64_t **v394;
  uint64_t *i43;
  unsigned int v396;
  unsigned int v397;
  uint64_t **v398;
  uint64_t *k;
  unsigned int v400;
  unsigned int v401;
  uint64_t **v402;
  uint64_t *m;
  unsigned int v404;
  unsigned int v405;
  uint64_t **v406;
  uint64_t *n;
  unsigned int v408;
  unsigned int v409;
  uint64_t **v410;
  uint64_t *ii;
  unsigned int v412;
  unsigned int v413;
  uint64_t **v414;
  uint64_t *jj;
  unsigned int v416;
  unsigned int v417;
  uint64_t **v418;
  uint64_t *kk;
  unsigned int v420;
  unsigned int v421;
  uint64_t **v422;
  uint64_t *mm;
  unsigned int v424;
  unsigned int v425;
  uint64_t **v426;
  uint64_t *nn;
  unsigned int v428;
  unsigned int v429;
  uint64_t **v430;
  uint64_t *i1;
  unsigned int v432;
  unsigned int v433;
  uint64_t **v434;
  uint64_t *i2;
  unsigned int v436;
  unsigned int v437;
  uint64_t **v438;
  uint64_t *i3;
  unsigned int v440;
  unsigned int v441;
  uint64_t **v442;
  uint64_t *i4;
  unsigned int v444;
  unsigned int v445;
  uint64_t **v446;
  uint64_t *i5;
  unsigned int v448;
  unsigned int v449;
  uint64_t **v450;
  uint64_t *i6;
  unsigned int v452;
  unsigned int v453;
  uint64_t **v454;
  uint64_t *i7;
  unsigned int v456;
  unsigned int v457;
  uint64_t **v458;
  uint64_t *i8;
  unsigned int v460;
  unsigned int v461;
  uint64_t **v462;
  uint64_t *i9;
  unsigned int v464;
  unsigned int v465;
  uint64_t **v466;
  uint64_t *i10;
  unsigned int v468;
  unsigned int v469;
  uint64_t **v470;
  uint64_t *i11;
  unsigned int v472;
  unsigned int v473;
  uint64_t **v474;
  uint64_t *i12;
  unsigned int v476;
  unsigned int v477;
  uint64_t **v478;
  uint64_t *i13;
  unsigned int v480;
  unsigned int v481;
  uint64_t **v482;
  uint64_t *i14;
  unsigned int v484;
  unsigned int v485;
  uint64_t **v486;
  uint64_t *i15;
  unsigned int v488;
  unsigned int v489;
  uint64_t **v490;
  uint64_t *i16;
  unsigned int v492;
  unsigned int v493;
  uint64_t **v494;
  uint64_t *i17;
  unsigned int v496;
  unsigned int v497;
  uint64_t **v498;
  uint64_t *i18;
  unsigned int v500;
  unsigned int v501;
  uint64_t **v502;
  uint64_t *i19;
  unsigned int v504;
  unsigned int v505;
  uint64_t **v506;
  uint64_t *i20;
  unsigned int v508;
  unsigned int v509;
  uint64_t **v510;
  uint64_t *i21;
  unsigned int v512;
  unsigned int v513;
  uint64_t **v514;
  uint64_t *i22;
  unsigned int v516;
  unsigned int v517;
  uint64_t **v518;
  uint64_t *i23;
  unsigned int v520;
  unsigned int v521;
  uint64_t **v522;
  uint64_t *i24;
  unsigned int v524;
  unsigned int v525;
  uint64_t **v526;
  uint64_t *i25;
  unsigned int v528;
  unsigned int v529;
  uint64_t **v530;
  uint64_t *i26;
  unsigned int v532;
  unsigned int v533;
  uint64_t **v534;
  uint64_t *i27;
  unsigned int v536;
  unsigned int v537;
  uint64_t **v538;
  uint64_t *i28;
  unsigned int v540;
  unsigned int v541;
  uint64_t **v542;
  uint64_t *i29;
  unsigned int v544;
  unsigned int v545;
  uint64_t **v546;
  uint64_t *i30;
  unsigned int v548;
  unsigned int v549;
  uint64_t **v550;
  uint64_t *i31;
  unsigned int v552;
  unsigned int v553;
  uint64_t **v554;
  uint64_t *i32;
  unsigned int v556;
  unsigned int v557;
  uint64_t **v558;
  uint64_t *i33;
  unsigned int v560;
  unsigned int v561;
  uint64_t **v562;
  uint64_t *i34;
  unsigned int v564;
  unsigned int v565;
  uint64_t **v566;
  uint64_t *i35;
  unsigned int v568;
  unsigned int v569;
  uint64_t **v570;
  uint64_t *i36;
  unsigned int v572;
  unsigned int v573;
  uint64_t **v574;
  uint64_t *i37;
  unint64_t v576;
  uint64_t v577;
  unint64_t v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t *v582;
  uint64_t v583;
  unint64_t v584;
  uint64_t v585;
  unsigned int v586;
  unint64_t v587;
  uint64_t v588;
  unint64_t v589;
  void *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  void *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  unint64_t v605;
  void *v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t *v617;
  uint64_t **v618;
  uint64_t *j;
  uint64_t v620;
  uint64_t *v621;
  uint64_t v622;
  uint64_t *v623;
  uint64_t v624;
  uint64_t *v625;
  uint64_t v626;
  uint64_t v627;
  WTF::StringImpl **v628;
  WTF::StringImpl *v629;
  WTF::StringImpl *v630;
  unint64_t v631;
  void *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  void *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  WTF::StringImpl **v648;
  WTF::StringImpl *v649;
  WTF::StringImpl *v650;
  unint64_t v651;
  void *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  unint64_t v659;
  void *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t *v667;
  uint64_t v668;
  uint64_t *v669;
  uint64_t v670;
  uint64_t *v671;
  uint64_t v672;
  uint64_t *v673;
  uint64_t v674;
  uint64_t *v675;
  uint64_t v676;
  uint64_t *v677;
  uint64_t v678;
  uint64_t *v679;
  uint64_t v680;
  uint64_t *v681;
  uint64_t v682;
  uint64_t *v683;
  uint64_t v684;
  uint64_t *v685;
  uint64_t v686;
  uint64_t *v687;
  uint64_t v688;
  uint64_t *v689;
  uint64_t v690;
  uint64_t *v691;
  uint64_t v692;
  uint64_t *v693;
  uint64_t v694;
  uint64_t *v695;
  uint64_t v696;
  uint64_t *v697;
  uint64_t v698;
  uint64_t *v699;
  uint64_t v700;
  uint64_t *v701;
  uint64_t v702;
  uint64_t *v703;
  uint64_t v704;
  uint64_t *v705;
  uint64_t v706;
  uint64_t *v707;
  uint64_t v708;
  uint64_t *v709;
  uint64_t v710;
  uint64_t *v711;
  uint64_t v712;
  uint64_t *v713;
  uint64_t v714;
  uint64_t *v715;
  uint64_t v716;
  uint64_t *v717;
  uint64_t v718;
  uint64_t *v719;
  uint64_t v720;
  uint64_t *v721;
  uint64_t v722;
  uint64_t *v723;
  uint64_t v724;
  uint64_t *v725;
  uint64_t v726;
  uint64_t *v727;
  uint64_t v728;
  uint64_t *v729;
  uint64_t v730;
  uint64_t *v731;
  uint64_t v732;
  uint64_t *v733;
  uint64_t v734;
  uint64_t *v735;
  uint64_t v736;
  uint64_t *v737;
  uint64_t v738;
  uint64_t *v739;
  uint64_t v740;
  uint64_t *v741;
  uint64_t v742;
  uint64_t *v743;
  uint64_t v744;
  uint64_t *v745;
  uint64_t v746;
  uint64_t *v747;
  uint64_t v748;
  uint64_t *v749;
  uint64_t v750;
  uint64_t *v751;
  uint64_t v752;
  uint64_t *v753;
  uint64_t v754;
  uint64_t *v755;
  uint64_t v756;
  uint64_t *v757;
  uint64_t v758;
  uint64_t *v759;
  uint64_t v760;
  uint64_t *v761;
  uint64_t v762;
  uint64_t *v763;
  uint64_t v764;
  uint64_t *v765;
  uint64_t v766;
  uint64_t *v767;
  uint64_t v768;

  if (*((_QWORD *)this + 394))
  {
    v617 = JSC::WaiterListManager::singleton(this);
    JSC::WaiterListManager::unregister((JSC::WaiterListManager *)v617, this);
    JSC::DeferredWorkTimer::cancelPendingWorkSafe(*(JSC::DeferredWorkTimer **)(*((_QWORD *)this + 7) + 41888), this);
  }
  v2 = *((_QWORD *)this + 253);
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 24) + 24))(*(_QWORD *)(v2 + 24));
  v11 = *(unsigned int *)(v2 + 68);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)(v2 + 56);
    v13 = 8 * v11;
    do
    {
      v14 = *v12++;
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
      v13 -= 8;
    }
    while (v13);
  }
  v15 = *(JSC::Debugger **)(v2 + 48);
  *(_QWORD *)(v2 + 48) = 0;
  if (v15)
  {
    JSC::Debugger::~Debugger(v15, v3, v4, v5, v6, v7, v8, v9);
    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
  }
  *(_QWORD *)(*((_QWORD *)this + 254) + 40) = 0;
  v24 = *((_QWORD *)this + 252);
  if (v24)
    JSC::Debugger::detach(v24, (uint64_t)this, 1, v5, v6, v7, v8, v9, v10);
  v25 = (const void *)*((_QWORD *)this + 411);
  *((_QWORD *)this + 411) = 0;
  if (v25)
    CFRelease(v25);
  v26 = *((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      v585 = *(_QWORD *)(v26 + 32);
      if (v585)
      {
        v627 = *(unsigned int *)(v585 - 4);
        if ((_DWORD)v627)
        {
          v628 = *(WTF::StringImpl ***)(v26 + 32);
          do
          {
            v629 = *v628;
            if (*v628 != (WTF::StringImpl *)-1)
            {
              v630 = v628[5];
              v628[5] = 0;
              if (v630)
              {
                if (*(_DWORD *)v630 == 2)
                {
                  WTF::StringImpl::~StringImpl(v630, (WTF::AtomStringImpl *)v3, v4, v5, v6, v7, v8, v9);
                  WTF::fastFree(v631, v632, v633, v634, v635, v636, v637, v638);
                  v629 = *v628;
                }
                else
                {
                  *(_DWORD *)v630 -= 2;
                }
              }
              *v628 = 0;
              if (v629)
              {
                if (*(_DWORD *)v629 == 2)
                {
                  WTF::StringImpl::~StringImpl(v629, (WTF::AtomStringImpl *)v3, v4, v5, v6, v7, v8, v9);
                  WTF::fastFree(v639, v640, v641, v642, v643, v644, v645, v646);
                }
                else
                {
                  *(_DWORD *)v629 -= 2;
                }
              }
            }
            v628 += 6;
            --v627;
          }
          while (v627);
        }
        WTF::fastFree(v585 - 16, v3, v4, v5, v6, v7, v8, v9);
      }
      v586 = *(_DWORD *)(v26 + 28);
      if (v586)
        WTF::VectorDestructor<true,JSC::ImportMap::ScopeEntry>::destruct(*(WTF::AtomStringImpl **)(v26 + 16), (WTF::AtomStringImpl *)(*(_QWORD *)(v26 + 16) + 48 * v586), v4, v5, v6, v7, v8, v9);
      v587 = *(_QWORD *)(v26 + 16);
      if (v587)
      {
        *(_QWORD *)(v26 + 16) = 0;
        *(_DWORD *)(v26 + 24) = 0;
        WTF::fastFree(v587, v3, v4, v5, v6, v7, v8, v9);
      }
      v588 = *(_QWORD *)(v26 + 8);
      if (v588)
      {
        v647 = *(unsigned int *)(v588 - 4);
        if ((_DWORD)v647)
        {
          v648 = *(WTF::StringImpl ***)(v26 + 8);
          do
          {
            v649 = *v648;
            if (*v648 != (WTF::StringImpl *)-1)
            {
              v650 = v648[1];
              v648[1] = 0;
              if (v650)
              {
                if (*(_DWORD *)v650 == 2)
                {
                  WTF::StringImpl::~StringImpl(v650, (WTF::AtomStringImpl *)v3, v4, v5, v6, v7, v8, v9);
                  WTF::fastFree(v651, v652, v653, v654, v655, v656, v657, v658);
                  v649 = *v648;
                }
                else
                {
                  *(_DWORD *)v650 -= 2;
                }
              }
              *v648 = 0;
              if (v649)
              {
                if (*(_DWORD *)v649 == 2)
                {
                  WTF::StringImpl::~StringImpl(v649, (WTF::AtomStringImpl *)v3, v4, v5, v6, v7, v8, v9);
                  WTF::fastFree(v659, v660, v661, v662, v663, v664, v665, v666);
                }
                else
                {
                  *(_DWORD *)v649 -= 2;
                }
              }
            }
            v648 += 6;
            --v647;
          }
          while (v647);
        }
        WTF::fastFree(v588 - 16, v3, v4, v5, v6, v7, v8, v9);
      }
      WTF::fastFree(v26, v3, v4, v5, v6, v7, v8, v9);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*((_QWORD *)this + 408) + 192), (uint64_t)this + 3248, v4, v5, v6, v7, v8, v9);
  v34 = *((_QWORD *)this + 407);
  if (v34)
  {
    v615 = *(unsigned int *)(v34 - 4);
    if ((_DWORD)v615)
    {
      v616 = *((_QWORD *)this + 407);
      do
      {
        if ((unint64_t)(*(_QWORD *)v616 + 1) >= 2)
        {
          *(_QWORD *)(*(_QWORD *)v616 + 8) = 3;
          *(_QWORD *)v616 = 0;
        }
        v616 += 8;
        --v615;
      }
      while (v615);
    }
    WTF::fastFree(v34 - 16, v27, v28, v29, v30, v31, v32, v33);
  }
  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*((_QWORD *)this + 405) + 192), (uint64_t)this + 3224, v28, v29, v30, v31, v32, v33);
  v42 = *((_QWORD *)this + 404);
  if (v42)
  {
    v613 = *(unsigned int *)(v42 - 4);
    if ((_DWORD)v613)
    {
      v614 = *((_QWORD *)this + 404);
      do
      {
        if ((unint64_t)(*(_QWORD *)v614 + 1) >= 2)
        {
          *(_QWORD *)(*(_QWORD *)v614 + 8) = 3;
          *(_QWORD *)v614 = 0;
        }
        v614 += 8;
        --v613;
      }
      while (v613);
    }
    WTF::fastFree(v42 - 16, v35, v36, v37, v38, v39, v40, v41);
  }
  v43 = (unsigned int *)*((_QWORD *)this + 401);
  *((_QWORD *)this + 401) = 0;
  if (v43)
  {
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v43);
      WTF::fastFree((unint64_t)v43, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v46 = (WTF::StringImpl *)*((_QWORD *)this + 399);
  *((_QWORD *)this + 399) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, (WTF::AtomStringImpl *)v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v589, v590, v591, v592, v593, v594, v595, v596);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
  v47 = (WTF::StringImpl *)*((_QWORD *)this + 398);
  *((_QWORD *)this + 398) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
    {
      WTF::StringImpl::~StringImpl(v47, (WTF::AtomStringImpl *)v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v597, v598, v599, v600, v601, v602, v603, v604);
    }
    else
    {
      *(_DWORD *)v47 -= 2;
    }
  }
  v48 = *((_QWORD *)this + 395);
  if (v48)
  {
    v49 = *(unsigned int *)(v48 - 4);
    if ((_DWORD)v49)
    {
      for (i = 0; i != v49; ++i)
      {
        v51 = v48 + 16 * i;
        if (*(_QWORD *)v51 != -1)
        {
          v52 = *(_QWORD *)(v51 + 8);
          *(_QWORD *)(v51 + 8) = 0;
          if (v52)
          {
            do
            {
              v54 = __ldaxr((unsigned int *)v52);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, (unsigned int *)v52));
            if (!v55)
            {
              atomic_store(1u, (unsigned int *)v52);
              v618 = (uint64_t **)(v52 + 8);
              for (j = *(uint64_t **)(v52 + 8); j != (uint64_t *)v618; j = *v618)
              {
                v626 = *j;
                v625 = (uint64_t *)j[1];
                *v625 = *j;
                *(_QWORD *)(v626 + 8) = v625;
                *j = 0;
                j[1] = 0;
              }
              WTF::fastFree(v52, v35, v36, v37, v38, v39, v40, v41);
            }
          }
          v53 = *(WTF::StringImpl **)v51;
          *(_QWORD *)v51 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
            {
              WTF::StringImpl::~StringImpl(v53, (WTF::AtomStringImpl *)v35, v36, v37, v38, v39, v40, v41);
              WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
            }
            else
            {
              *(_DWORD *)v53 -= 2;
            }
          }
        }
      }
    }
    WTF::fastFree(v48 - 16, v35, v36, v37, v38, v39, v40, v41);
  }
  v64 = (uint64_t *)*((_QWORD *)this + 394);
  *((_QWORD *)this + 394) = 0;
  if (v64)
  {
    if (*v64)
      WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::deallocateTable(*v64, v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree((unint64_t)v64, v35, v36, v37, v38, v39, v40, v41);
  }
  v65 = *((unsigned int *)this + 787);
  if ((_DWORD)v65)
  {
    v582 = (unint64_t *)*((_QWORD *)this + 392);
    v583 = 8 * v65;
    do
    {
      v584 = *v582;
      *v582 = 0;
      if (v584)
        JSC::Watchpoint::operator delete(v584, v35, v36, v37, v38, v39, v40, v41);
      ++v582;
      v583 -= 8;
    }
    while (v583);
  }
  v66 = *((_QWORD *)this + 392);
  if (v66)
  {
    *((_QWORD *)this + 392) = 0;
    *((_DWORD *)this + 786) = 0;
    WTF::fastFree(v66, v35, v36, v37, v38, v39, v40, v41);
  }
  v67 = (_QWORD *)*((_QWORD *)this + 391);
  *((_QWORD *)this + 391) = 0;
  if (v67)
  {
    *v67 = off_1E3580B60;
    v68 = (_QWORD *)v67[8];
    if (v68)
    {
      v69 = v67[7];
      *v68 = v69;
      *(_QWORD *)(v69 + 8) = v68;
      v67[7] = 0;
      v67[8] = 0;
    }
    v70 = (_QWORD *)v67[5];
    if (v70)
    {
      v71 = v67[4];
      *v70 = v71;
      *(_QWORD *)(v71 + 8) = v70;
      v67[4] = 0;
      v67[5] = 0;
    }
    WTF::fastFree((unint64_t)v67, v35, v36, v37, v38, v39, v40, v41);
  }
  v72 = *((_QWORD *)this + 390);
  *((_QWORD *)this + 390) = 0;
  if (v72)
    JSC::Watchpoint::operator delete(v72, v35, v36, v37, v38, v39, v40, v41);
  v73 = *((_QWORD *)this + 389);
  *((_QWORD *)this + 389) = 0;
  if (v73)
    JSC::Watchpoint::operator delete(v73, v35, v36, v37, v38, v39, v40, v41);
  v74 = (_QWORD *)*((_QWORD *)this + 388);
  *((_QWORD *)this + 388) = 0;
  if (v74)
  {
    *v74 = off_1E3580B60;
    v75 = (_QWORD *)v74[8];
    if (v75)
    {
      v76 = v74[7];
      *v75 = v76;
      *(_QWORD *)(v76 + 8) = v75;
      v74[7] = 0;
      v74[8] = 0;
    }
    v77 = (_QWORD *)v74[5];
    if (v77)
    {
      v78 = v74[4];
      *v77 = v78;
      *(_QWORD *)(v78 + 8) = v77;
      v74[4] = 0;
      v74[5] = 0;
    }
    WTF::fastFree((unint64_t)v74, v35, v36, v37, v38, v39, v40, v41);
  }
  v79 = *((_QWORD *)this + 387);
  *((_QWORD *)this + 387) = 0;
  if (v79)
    JSC::Watchpoint::operator delete(v79, v35, v36, v37, v38, v39, v40, v41);
  v80 = *((_QWORD *)this + 386);
  *((_QWORD *)this + 386) = 0;
  if (v80)
    JSC::Watchpoint::operator delete(v80, v35, v36, v37, v38, v39, v40, v41);
  v81 = (_QWORD *)*((_QWORD *)this + 385);
  *((_QWORD *)this + 385) = 0;
  if (v81)
  {
    *v81 = off_1E3580B60;
    v82 = (_QWORD *)v81[8];
    if (v82)
    {
      v83 = v81[7];
      *v82 = v83;
      *(_QWORD *)(v83 + 8) = v82;
      v81[7] = 0;
      v81[8] = 0;
    }
    v84 = (_QWORD *)v81[5];
    if (v84)
    {
      v85 = v81[4];
      *v84 = v85;
      *(_QWORD *)(v85 + 8) = v84;
      v81[4] = 0;
      v81[5] = 0;
    }
    WTF::fastFree((unint64_t)v81, v35, v36, v37, v38, v39, v40, v41);
  }
  v86 = *((_QWORD *)this + 384);
  *((_QWORD *)this + 384) = 0;
  if (v86)
    JSC::Watchpoint::operator delete(v86, v35, v36, v37, v38, v39, v40, v41);
  v87 = *((_QWORD *)this + 383);
  *((_QWORD *)this + 383) = 0;
  if (v87)
    JSC::Watchpoint::operator delete(v87, v35, v36, v37, v38, v39, v40, v41);
  v88 = (_QWORD *)*((_QWORD *)this + 382);
  *((_QWORD *)this + 382) = 0;
  if (v88)
  {
    *v88 = off_1E3580B60;
    v89 = (_QWORD *)v88[8];
    if (v89)
    {
      v90 = v88[7];
      *v89 = v90;
      *(_QWORD *)(v90 + 8) = v89;
      v88[7] = 0;
      v88[8] = 0;
    }
    v91 = (_QWORD *)v88[5];
    if (v91)
    {
      v92 = v88[4];
      *v91 = v92;
      *(_QWORD *)(v92 + 8) = v91;
      v88[4] = 0;
      v88[5] = 0;
    }
    WTF::fastFree((unint64_t)v88, v35, v36, v37, v38, v39, v40, v41);
  }
  v93 = *((_QWORD *)this + 381);
  *((_QWORD *)this + 381) = 0;
  if (v93)
    JSC::Watchpoint::operator delete(v93, v35, v36, v37, v38, v39, v40, v41);
  v94 = *((_QWORD *)this + 380);
  *((_QWORD *)this + 380) = 0;
  if (v94)
    JSC::Watchpoint::operator delete(v94, v35, v36, v37, v38, v39, v40, v41);
  v95 = (_QWORD *)*((_QWORD *)this + 379);
  *((_QWORD *)this + 379) = 0;
  if (v95)
  {
    *v95 = off_1E3580B60;
    v96 = (_QWORD *)v95[8];
    if (v96)
    {
      v97 = v95[7];
      *v96 = v97;
      *(_QWORD *)(v97 + 8) = v96;
      v95[7] = 0;
      v95[8] = 0;
    }
    v98 = (_QWORD *)v95[5];
    if (v98)
    {
      v99 = v95[4];
      *v98 = v99;
      *(_QWORD *)(v99 + 8) = v98;
      v95[4] = 0;
      v95[5] = 0;
    }
    WTF::fastFree((unint64_t)v95, v35, v36, v37, v38, v39, v40, v41);
  }
  v100 = *((_QWORD *)this + 378);
  *((_QWORD *)this + 378) = 0;
  if (v100)
    JSC::Watchpoint::operator delete(v100, v35, v36, v37, v38, v39, v40, v41);
  v101 = *((_QWORD *)this + 377);
  *((_QWORD *)this + 377) = 0;
  if (v101)
    JSC::Watchpoint::operator delete(v101, v35, v36, v37, v38, v39, v40, v41);
  v102 = (_QWORD *)*((_QWORD *)this + 376);
  *((_QWORD *)this + 376) = 0;
  if (v102)
  {
    *v102 = off_1E3580B60;
    v103 = (_QWORD *)v102[8];
    if (v103)
    {
      v104 = v102[7];
      *v103 = v104;
      *(_QWORD *)(v104 + 8) = v103;
      v102[7] = 0;
      v102[8] = 0;
    }
    v105 = (_QWORD *)v102[5];
    if (v105)
    {
      v106 = v102[4];
      *v105 = v106;
      *(_QWORD *)(v106 + 8) = v105;
      v102[4] = 0;
      v102[5] = 0;
    }
    WTF::fastFree((unint64_t)v102, v35, v36, v37, v38, v39, v40, v41);
  }
  v107 = *((_QWORD *)this + 375);
  *((_QWORD *)this + 375) = 0;
  if (v107)
    JSC::Watchpoint::operator delete(v107, v35, v36, v37, v38, v39, v40, v41);
  v108 = *((_QWORD *)this + 374);
  *((_QWORD *)this + 374) = 0;
  if (v108)
    JSC::Watchpoint::operator delete(v108, v35, v36, v37, v38, v39, v40, v41);
  v109 = (_QWORD *)*((_QWORD *)this + 373);
  *((_QWORD *)this + 373) = 0;
  if (v109)
  {
    *v109 = off_1E3580B60;
    v110 = (_QWORD *)v109[8];
    if (v110)
    {
      v111 = v109[7];
      *v110 = v111;
      *(_QWORD *)(v111 + 8) = v110;
      v109[7] = 0;
      v109[8] = 0;
    }
    v112 = (_QWORD *)v109[5];
    if (v112)
    {
      v113 = v109[4];
      *v112 = v113;
      *(_QWORD *)(v113 + 8) = v112;
      v109[4] = 0;
      v109[5] = 0;
    }
    WTF::fastFree((unint64_t)v109, v35, v36, v37, v38, v39, v40, v41);
  }
  v114 = *((_QWORD *)this + 372);
  *((_QWORD *)this + 372) = 0;
  if (v114)
    JSC::Watchpoint::operator delete(v114, v35, v36, v37, v38, v39, v40, v41);
  v115 = *((_QWORD *)this + 371);
  *((_QWORD *)this + 371) = 0;
  if (v115)
    JSC::Watchpoint::operator delete(v115, v35, v36, v37, v38, v39, v40, v41);
  v116 = (_QWORD *)*((_QWORD *)this + 370);
  *((_QWORD *)this + 370) = 0;
  if (v116)
  {
    *v116 = off_1E3580B60;
    v117 = (_QWORD *)v116[8];
    if (v117)
    {
      v118 = v116[7];
      *v117 = v118;
      *(_QWORD *)(v118 + 8) = v117;
      v116[7] = 0;
      v116[8] = 0;
    }
    v119 = (_QWORD *)v116[5];
    if (v119)
    {
      v120 = v116[4];
      *v119 = v120;
      *(_QWORD *)(v120 + 8) = v119;
      v116[4] = 0;
      v116[5] = 0;
    }
    WTF::fastFree((unint64_t)v116, v35, v36, v37, v38, v39, v40, v41);
  }
  v121 = *((_QWORD *)this + 369);
  *((_QWORD *)this + 369) = 0;
  if (v121)
    JSC::Watchpoint::operator delete(v121, v35, v36, v37, v38, v39, v40, v41);
  v122 = *((_QWORD *)this + 368);
  *((_QWORD *)this + 368) = 0;
  if (v122)
    JSC::Watchpoint::operator delete(v122, v35, v36, v37, v38, v39, v40, v41);
  v123 = (_QWORD *)*((_QWORD *)this + 367);
  *((_QWORD *)this + 367) = 0;
  if (v123)
  {
    *v123 = off_1E3580B60;
    v124 = (_QWORD *)v123[8];
    if (v124)
    {
      v125 = v123[7];
      *v124 = v125;
      *(_QWORD *)(v125 + 8) = v124;
      v123[7] = 0;
      v123[8] = 0;
    }
    v126 = (_QWORD *)v123[5];
    if (v126)
    {
      v127 = v123[4];
      *v126 = v127;
      *(_QWORD *)(v127 + 8) = v126;
      v123[4] = 0;
      v123[5] = 0;
    }
    WTF::fastFree((unint64_t)v123, v35, v36, v37, v38, v39, v40, v41);
  }
  v128 = *((_QWORD *)this + 366);
  *((_QWORD *)this + 366) = 0;
  if (v128)
    JSC::Watchpoint::operator delete(v128, v35, v36, v37, v38, v39, v40, v41);
  v129 = *((_QWORD *)this + 365);
  *((_QWORD *)this + 365) = 0;
  if (v129)
    JSC::Watchpoint::operator delete(v129, v35, v36, v37, v38, v39, v40, v41);
  v130 = (_QWORD *)*((_QWORD *)this + 364);
  *((_QWORD *)this + 364) = 0;
  if (v130)
  {
    *v130 = off_1E3580B60;
    v131 = (_QWORD *)v130[8];
    if (v131)
    {
      v132 = v130[7];
      *v131 = v132;
      *(_QWORD *)(v132 + 8) = v131;
      v130[7] = 0;
      v130[8] = 0;
    }
    v133 = (_QWORD *)v130[5];
    if (v133)
    {
      v134 = v130[4];
      *v133 = v134;
      *(_QWORD *)(v134 + 8) = v133;
      v130[4] = 0;
      v130[5] = 0;
    }
    WTF::fastFree((unint64_t)v130, v35, v36, v37, v38, v39, v40, v41);
  }
  v135 = *((_QWORD *)this + 363);
  *((_QWORD *)this + 363) = 0;
  if (v135)
    JSC::Watchpoint::operator delete(v135, v35, v36, v37, v38, v39, v40, v41);
  v136 = *((_QWORD *)this + 362);
  *((_QWORD *)this + 362) = 0;
  if (v136)
    JSC::Watchpoint::operator delete(v136, v35, v36, v37, v38, v39, v40, v41);
  v137 = (_QWORD *)*((_QWORD *)this + 361);
  *((_QWORD *)this + 361) = 0;
  if (v137)
  {
    *v137 = off_1E3580B60;
    v138 = (_QWORD *)v137[8];
    if (v138)
    {
      v139 = v137[7];
      *v138 = v139;
      *(_QWORD *)(v139 + 8) = v138;
      v137[7] = 0;
      v137[8] = 0;
    }
    v140 = (_QWORD *)v137[5];
    if (v140)
    {
      v141 = v137[4];
      *v140 = v141;
      *(_QWORD *)(v141 + 8) = v140;
      v137[4] = 0;
      v137[5] = 0;
    }
    WTF::fastFree((unint64_t)v137, v35, v36, v37, v38, v39, v40, v41);
  }
  v142 = *((_QWORD *)this + 360);
  *((_QWORD *)this + 360) = 0;
  if (v142)
    JSC::Watchpoint::operator delete(v142, v35, v36, v37, v38, v39, v40, v41);
  v143 = *((_QWORD *)this + 359);
  *((_QWORD *)this + 359) = 0;
  if (v143)
    JSC::Watchpoint::operator delete(v143, v35, v36, v37, v38, v39, v40, v41);
  v144 = (_QWORD *)*((_QWORD *)this + 358);
  *((_QWORD *)this + 358) = 0;
  if (v144)
  {
    *v144 = off_1E3580B60;
    v145 = (_QWORD *)v144[8];
    if (v145)
    {
      v146 = v144[7];
      *v145 = v146;
      *(_QWORD *)(v146 + 8) = v145;
      v144[7] = 0;
      v144[8] = 0;
    }
    v147 = (_QWORD *)v144[5];
    if (v147)
    {
      v148 = v144[4];
      *v147 = v148;
      *(_QWORD *)(v148 + 8) = v147;
      v144[4] = 0;
      v144[5] = 0;
    }
    WTF::fastFree((unint64_t)v144, v35, v36, v37, v38, v39, v40, v41);
  }
  v149 = *((_QWORD *)this + 357);
  *((_QWORD *)this + 357) = 0;
  if (v149)
    JSC::Watchpoint::operator delete(v149, v35, v36, v37, v38, v39, v40, v41);
  v150 = *((_QWORD *)this + 356);
  *((_QWORD *)this + 356) = 0;
  if (v150)
    JSC::Watchpoint::operator delete(v150, v35, v36, v37, v38, v39, v40, v41);
  v151 = (_QWORD *)*((_QWORD *)this + 355);
  *((_QWORD *)this + 355) = 0;
  if (v151)
  {
    *v151 = off_1E3580B60;
    v152 = (_QWORD *)v151[8];
    if (v152)
    {
      v153 = v151[7];
      *v152 = v153;
      *(_QWORD *)(v153 + 8) = v152;
      v151[7] = 0;
      v151[8] = 0;
    }
    v154 = (_QWORD *)v151[5];
    if (v154)
    {
      v155 = v151[4];
      *v154 = v155;
      *(_QWORD *)(v155 + 8) = v154;
      v151[4] = 0;
      v151[5] = 0;
    }
    WTF::fastFree((unint64_t)v151, v35, v36, v37, v38, v39, v40, v41);
  }
  v156 = (_QWORD *)*((_QWORD *)this + 354);
  *((_QWORD *)this + 354) = 0;
  if (v156)
  {
    *v156 = off_1E3580B60;
    v157 = (_QWORD *)v156[8];
    if (v157)
    {
      v158 = v156[7];
      *v157 = v158;
      *(_QWORD *)(v158 + 8) = v157;
      v156[7] = 0;
      v156[8] = 0;
    }
    v159 = (_QWORD *)v156[5];
    if (v159)
    {
      v160 = v156[4];
      *v159 = v160;
      *(_QWORD *)(v160 + 8) = v159;
      v156[4] = 0;
      v156[5] = 0;
    }
    WTF::fastFree((unint64_t)v156, v35, v36, v37, v38, v39, v40, v41);
  }
  v161 = (_QWORD *)*((_QWORD *)this + 353);
  *((_QWORD *)this + 353) = 0;
  if (v161)
  {
    *v161 = off_1E3580B60;
    v162 = (_QWORD *)v161[8];
    if (v162)
    {
      v163 = v161[7];
      *v162 = v163;
      *(_QWORD *)(v163 + 8) = v162;
      v161[7] = 0;
      v161[8] = 0;
    }
    v164 = (_QWORD *)v161[5];
    if (v164)
    {
      v165 = v161[4];
      *v164 = v165;
      *(_QWORD *)(v165 + 8) = v164;
      v161[4] = 0;
      v161[5] = 0;
    }
    WTF::fastFree((unint64_t)v161, v35, v36, v37, v38, v39, v40, v41);
  }
  v166 = (_QWORD *)*((_QWORD *)this + 352);
  *((_QWORD *)this + 352) = 0;
  if (v166)
  {
    *v166 = off_1E3580B60;
    v167 = (_QWORD *)v166[8];
    if (v167)
    {
      v168 = v166[7];
      *v167 = v168;
      *(_QWORD *)(v168 + 8) = v167;
      v166[7] = 0;
      v166[8] = 0;
    }
    v169 = (_QWORD *)v166[5];
    if (v169)
    {
      v170 = v166[4];
      *v169 = v170;
      *(_QWORD *)(v170 + 8) = v169;
      v166[4] = 0;
      v166[5] = 0;
    }
    WTF::fastFree((unint64_t)v166, v35, v36, v37, v38, v39, v40, v41);
  }
  v171 = (_QWORD *)*((_QWORD *)this + 351);
  *((_QWORD *)this + 351) = 0;
  if (v171)
  {
    *v171 = off_1E3580B60;
    v172 = (_QWORD *)v171[8];
    if (v172)
    {
      v173 = v171[7];
      *v172 = v173;
      *(_QWORD *)(v173 + 8) = v172;
      v171[7] = 0;
      v171[8] = 0;
    }
    v174 = (_QWORD *)v171[5];
    if (v174)
    {
      v175 = v171[4];
      *v174 = v175;
      *(_QWORD *)(v175 + 8) = v174;
      v171[4] = 0;
      v171[5] = 0;
    }
    WTF::fastFree((unint64_t)v171, v35, v36, v37, v38, v39, v40, v41);
  }
  v176 = (_QWORD *)*((_QWORD *)this + 350);
  *((_QWORD *)this + 350) = 0;
  if (v176)
  {
    *v176 = off_1E3580B60;
    v177 = (_QWORD *)v176[8];
    if (v177)
    {
      v178 = v176[7];
      *v177 = v178;
      *(_QWORD *)(v178 + 8) = v177;
      v176[7] = 0;
      v176[8] = 0;
    }
    v179 = (_QWORD *)v176[5];
    if (v179)
    {
      v180 = v176[4];
      *v179 = v180;
      *(_QWORD *)(v180 + 8) = v179;
      v176[4] = 0;
      v176[5] = 0;
    }
    WTF::fastFree((unint64_t)v176, v35, v36, v37, v38, v39, v40, v41);
  }
  v181 = (_QWORD *)*((_QWORD *)this + 349);
  *((_QWORD *)this + 349) = 0;
  if (v181)
  {
    *v181 = off_1E3580B60;
    v182 = (_QWORD *)v181[8];
    if (v182)
    {
      v183 = v181[7];
      *v182 = v183;
      *(_QWORD *)(v183 + 8) = v182;
      v181[7] = 0;
      v181[8] = 0;
    }
    v184 = (_QWORD *)v181[5];
    if (v184)
    {
      v185 = v181[4];
      *v184 = v185;
      *(_QWORD *)(v185 + 8) = v184;
      v181[4] = 0;
      v181[5] = 0;
    }
    WTF::fastFree((unint64_t)v181, v35, v36, v37, v38, v39, v40, v41);
  }
  v186 = (_QWORD *)*((_QWORD *)this + 348);
  *((_QWORD *)this + 348) = 0;
  if (v186)
  {
    *v186 = off_1E3580B60;
    v187 = (_QWORD *)v186[8];
    if (v187)
    {
      v188 = v186[7];
      *v187 = v188;
      *(_QWORD *)(v188 + 8) = v187;
      v186[7] = 0;
      v186[8] = 0;
    }
    v189 = (_QWORD *)v186[5];
    if (v189)
    {
      v190 = v186[4];
      *v189 = v190;
      *(_QWORD *)(v190 + 8) = v189;
      v186[4] = 0;
      v186[5] = 0;
    }
    WTF::fastFree((unint64_t)v186, v35, v36, v37, v38, v39, v40, v41);
  }
  v191 = (_QWORD *)*((_QWORD *)this + 347);
  *((_QWORD *)this + 347) = 0;
  if (v191)
  {
    *v191 = off_1E3580B60;
    v192 = (_QWORD *)v191[8];
    if (v192)
    {
      v193 = v191[7];
      *v192 = v193;
      *(_QWORD *)(v193 + 8) = v192;
      v191[7] = 0;
      v191[8] = 0;
    }
    v194 = (_QWORD *)v191[5];
    if (v194)
    {
      v195 = v191[4];
      *v194 = v195;
      *(_QWORD *)(v195 + 8) = v194;
      v191[4] = 0;
      v191[5] = 0;
    }
    WTF::fastFree((unint64_t)v191, v35, v36, v37, v38, v39, v40, v41);
  }
  v196 = (_QWORD *)*((_QWORD *)this + 346);
  *((_QWORD *)this + 346) = 0;
  if (v196)
  {
    *v196 = off_1E3580B60;
    v197 = (_QWORD *)v196[8];
    if (v197)
    {
      v198 = v196[7];
      *v197 = v198;
      *(_QWORD *)(v198 + 8) = v197;
      v196[7] = 0;
      v196[8] = 0;
    }
    v199 = (_QWORD *)v196[5];
    if (v199)
    {
      v200 = v196[4];
      *v199 = v200;
      *(_QWORD *)(v200 + 8) = v199;
      v196[4] = 0;
      v196[5] = 0;
    }
    WTF::fastFree((unint64_t)v196, v35, v36, v37, v38, v39, v40, v41);
  }
  v201 = (_QWORD *)*((_QWORD *)this + 345);
  *((_QWORD *)this + 345) = 0;
  if (v201)
  {
    *v201 = off_1E3580B60;
    v202 = (_QWORD *)v201[8];
    if (v202)
    {
      v203 = v201[7];
      *v202 = v203;
      *(_QWORD *)(v203 + 8) = v202;
      v201[7] = 0;
      v201[8] = 0;
    }
    v204 = (_QWORD *)v201[5];
    if (v204)
    {
      v205 = v201[4];
      *v204 = v205;
      *(_QWORD *)(v205 + 8) = v204;
      v201[4] = 0;
      v201[5] = 0;
    }
    WTF::fastFree((unint64_t)v201, v35, v36, v37, v38, v39, v40, v41);
  }
  v206 = (_QWORD *)*((_QWORD *)this + 344);
  *((_QWORD *)this + 344) = 0;
  if (v206)
  {
    *v206 = off_1E3580B60;
    v207 = (_QWORD *)v206[8];
    if (v207)
    {
      v208 = v206[7];
      *v207 = v208;
      *(_QWORD *)(v208 + 8) = v207;
      v206[7] = 0;
      v206[8] = 0;
    }
    v209 = (_QWORD *)v206[5];
    if (v209)
    {
      v210 = v206[4];
      *v209 = v210;
      *(_QWORD *)(v210 + 8) = v209;
      v206[4] = 0;
      v206[5] = 0;
    }
    WTF::fastFree((unint64_t)v206, v35, v36, v37, v38, v39, v40, v41);
  }
  v211 = (_QWORD *)*((_QWORD *)this + 343);
  *((_QWORD *)this + 343) = 0;
  if (v211)
  {
    *v211 = off_1E3580B60;
    v212 = (_QWORD *)v211[8];
    if (v212)
    {
      v213 = v211[7];
      *v212 = v213;
      *(_QWORD *)(v213 + 8) = v212;
      v211[7] = 0;
      v211[8] = 0;
    }
    v214 = (_QWORD *)v211[5];
    if (v214)
    {
      v215 = v211[4];
      *v214 = v215;
      *(_QWORD *)(v215 + 8) = v214;
      v211[4] = 0;
      v211[5] = 0;
    }
    WTF::fastFree((unint64_t)v211, v35, v36, v37, v38, v39, v40, v41);
  }
  v216 = (_QWORD *)*((_QWORD *)this + 342);
  *((_QWORD *)this + 342) = 0;
  if (v216)
  {
    *v216 = off_1E3580B60;
    v217 = (_QWORD *)v216[8];
    if (v217)
    {
      v218 = v216[7];
      *v217 = v218;
      *(_QWORD *)(v218 + 8) = v217;
      v216[7] = 0;
      v216[8] = 0;
    }
    v219 = (_QWORD *)v216[5];
    if (v219)
    {
      v220 = v216[4];
      *v219 = v220;
      *(_QWORD *)(v220 + 8) = v219;
      v216[4] = 0;
      v216[5] = 0;
    }
    WTF::fastFree((unint64_t)v216, v35, v36, v37, v38, v39, v40, v41);
  }
  v221 = *((_QWORD *)this + 341);
  *((_QWORD *)this + 341) = 0;
  if (v221)
    JSC::Watchpoint::operator delete(v221, v35, v36, v37, v38, v39, v40, v41);
  v222 = *((_QWORD *)this + 340);
  *((_QWORD *)this + 340) = 0;
  if (v222)
    JSC::Watchpoint::operator delete(v222, v35, v36, v37, v38, v39, v40, v41);
  v223 = *((_QWORD *)this + 339);
  *((_QWORD *)this + 339) = 0;
  if (v223)
    JSC::Watchpoint::operator delete(v223, v35, v36, v37, v38, v39, v40, v41);
  v224 = *((_QWORD *)this + 338);
  *((_QWORD *)this + 338) = 0;
  if (v224)
    JSC::Watchpoint::operator delete(v224, v35, v36, v37, v38, v39, v40, v41);
  v225 = (_QWORD *)*((_QWORD *)this + 337);
  *((_QWORD *)this + 337) = 0;
  if (v225)
  {
    *v225 = off_1E3580B60;
    v226 = (_QWORD *)v225[8];
    if (v226)
    {
      v227 = v225[7];
      *v226 = v227;
      *(_QWORD *)(v227 + 8) = v226;
      v225[7] = 0;
      v225[8] = 0;
    }
    v228 = (_QWORD *)v225[5];
    if (v228)
    {
      v229 = v225[4];
      *v228 = v229;
      *(_QWORD *)(v229 + 8) = v228;
      v225[4] = 0;
      v225[5] = 0;
    }
    WTF::fastFree((unint64_t)v225, v35, v36, v37, v38, v39, v40, v41);
  }
  v230 = (_QWORD *)*((_QWORD *)this + 336);
  *((_QWORD *)this + 336) = 0;
  if (v230)
  {
    *v230 = off_1E3580B60;
    v231 = (_QWORD *)v230[8];
    if (v231)
    {
      v232 = v230[7];
      *v231 = v232;
      *(_QWORD *)(v232 + 8) = v231;
      v230[7] = 0;
      v230[8] = 0;
    }
    v233 = (_QWORD *)v230[5];
    if (v233)
    {
      v234 = v230[4];
      *v233 = v234;
      *(_QWORD *)(v234 + 8) = v233;
      v230[4] = 0;
      v230[5] = 0;
    }
    WTF::fastFree((unint64_t)v230, v35, v36, v37, v38, v39, v40, v41);
  }
  v235 = (_QWORD *)*((_QWORD *)this + 335);
  *((_QWORD *)this + 335) = 0;
  if (v235)
  {
    *v235 = off_1E3580B60;
    v236 = (_QWORD *)v235[8];
    if (v236)
    {
      v237 = v235[7];
      *v236 = v237;
      *(_QWORD *)(v237 + 8) = v236;
      v235[7] = 0;
      v235[8] = 0;
    }
    v238 = (_QWORD *)v235[5];
    if (v238)
    {
      v239 = v235[4];
      *v238 = v239;
      *(_QWORD *)(v239 + 8) = v238;
      v235[4] = 0;
      v235[5] = 0;
    }
    WTF::fastFree((unint64_t)v235, v35, v36, v37, v38, v39, v40, v41);
  }
  v240 = (_QWORD *)*((_QWORD *)this + 334);
  *((_QWORD *)this + 334) = 0;
  if (v240)
  {
    *v240 = off_1E3580B60;
    v241 = (_QWORD *)v240[8];
    if (v241)
    {
      v242 = v240[7];
      *v241 = v242;
      *(_QWORD *)(v242 + 8) = v241;
      v240[7] = 0;
      v240[8] = 0;
    }
    v243 = (_QWORD *)v240[5];
    if (v243)
    {
      v244 = v240[4];
      *v243 = v244;
      *(_QWORD *)(v244 + 8) = v243;
      v240[4] = 0;
      v240[5] = 0;
    }
    WTF::fastFree((unint64_t)v240, v35, v36, v37, v38, v39, v40, v41);
  }
  v245 = (_QWORD *)*((_QWORD *)this + 333);
  *((_QWORD *)this + 333) = 0;
  if (v245)
  {
    *v245 = off_1E3580B60;
    v246 = (_QWORD *)v245[8];
    if (v246)
    {
      v247 = v245[7];
      *v246 = v247;
      *(_QWORD *)(v247 + 8) = v246;
      v245[7] = 0;
      v245[8] = 0;
    }
    v248 = (_QWORD *)v245[5];
    if (v248)
    {
      v249 = v245[4];
      *v248 = v249;
      *(_QWORD *)(v249 + 8) = v248;
      v245[4] = 0;
      v245[5] = 0;
    }
    WTF::fastFree((unint64_t)v245, v35, v36, v37, v38, v39, v40, v41);
  }
  v250 = (_QWORD *)*((_QWORD *)this + 332);
  *((_QWORD *)this + 332) = 0;
  if (v250)
  {
    *v250 = off_1E3580B60;
    v251 = (_QWORD *)v250[8];
    if (v251)
    {
      v252 = v250[7];
      *v251 = v252;
      *(_QWORD *)(v252 + 8) = v251;
      v250[7] = 0;
      v250[8] = 0;
    }
    v253 = (_QWORD *)v250[5];
    if (v253)
    {
      v254 = v250[4];
      *v253 = v254;
      *(_QWORD *)(v254 + 8) = v253;
      v250[4] = 0;
      v250[5] = 0;
    }
    WTF::fastFree((unint64_t)v250, v35, v36, v37, v38, v39, v40, v41);
  }
  v255 = (_QWORD *)*((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v255)
  {
    *v255 = off_1E3580B60;
    v256 = (_QWORD *)v255[8];
    if (v256)
    {
      v257 = v255[7];
      *v256 = v257;
      *(_QWORD *)(v257 + 8) = v256;
      v255[7] = 0;
      v255[8] = 0;
    }
    v258 = (_QWORD *)v255[5];
    if (v258)
    {
      v259 = v255[4];
      *v258 = v259;
      *(_QWORD *)(v259 + 8) = v258;
      v255[4] = 0;
      v255[5] = 0;
    }
    WTF::fastFree((unint64_t)v255, v35, v36, v37, v38, v39, v40, v41);
  }
  v260 = *((_QWORD *)this + 330);
  *((_QWORD *)this + 330) = 0;
  if (v260)
    JSC::Watchpoint::operator delete(v260, v35, v36, v37, v38, v39, v40, v41);
  v261 = *((_QWORD *)this + 329);
  *((_QWORD *)this + 329) = 0;
  if (v261)
    JSC::Watchpoint::operator delete(v261, v35, v36, v37, v38, v39, v40, v41);
  v262 = *((_QWORD *)this + 328);
  *((_QWORD *)this + 328) = 0;
  if (v262)
    JSC::Watchpoint::operator delete(v262, v35, v36, v37, v38, v39, v40, v41);
  v263 = *((_QWORD *)this + 327);
  *((_QWORD *)this + 327) = 0;
  if (v263)
    JSC::Watchpoint::operator delete(v263, v35, v36, v37, v38, v39, v40, v41);
  v264 = *((_QWORD *)this + 326);
  *((_QWORD *)this + 326) = 0;
  if (v264)
    JSC::Watchpoint::operator delete(v264, v35, v36, v37, v38, v39, v40, v41);
  v265 = (_QWORD *)*((_QWORD *)this + 325);
  *((_QWORD *)this + 325) = 0;
  if (v265)
  {
    *v265 = off_1E3580B60;
    v266 = (_QWORD *)v265[8];
    if (v266)
    {
      v267 = v265[7];
      *v266 = v267;
      *(_QWORD *)(v267 + 8) = v266;
      v265[7] = 0;
      v265[8] = 0;
    }
    v268 = (_QWORD *)v265[5];
    if (v268)
    {
      v269 = v265[4];
      *v268 = v269;
      *(_QWORD *)(v269 + 8) = v268;
      v265[4] = 0;
      v265[5] = 0;
    }
    WTF::fastFree((unint64_t)v265, v35, v36, v37, v38, v39, v40, v41);
  }
  v270 = (_QWORD *)*((_QWORD *)this + 324);
  *((_QWORD *)this + 324) = 0;
  if (v270)
  {
    *v270 = off_1E3580B60;
    v271 = (_QWORD *)v270[8];
    if (v271)
    {
      v272 = v270[7];
      *v271 = v272;
      *(_QWORD *)(v272 + 8) = v271;
      v270[7] = 0;
      v270[8] = 0;
    }
    v273 = (_QWORD *)v270[5];
    if (v273)
    {
      v274 = v270[4];
      *v273 = v274;
      *(_QWORD *)(v274 + 8) = v273;
      v270[4] = 0;
      v270[5] = 0;
    }
    WTF::fastFree((unint64_t)v270, v35, v36, v37, v38, v39, v40, v41);
  }
  v275 = (_QWORD *)*((_QWORD *)this + 323);
  *((_QWORD *)this + 323) = 0;
  if (v275)
  {
    *v275 = off_1E3580B60;
    v276 = (_QWORD *)v275[8];
    if (v276)
    {
      v277 = v275[7];
      *v276 = v277;
      *(_QWORD *)(v277 + 8) = v276;
      v275[7] = 0;
      v275[8] = 0;
    }
    v278 = (_QWORD *)v275[5];
    if (v278)
    {
      v279 = v275[4];
      *v278 = v279;
      *(_QWORD *)(v279 + 8) = v278;
      v275[4] = 0;
      v275[5] = 0;
    }
    WTF::fastFree((unint64_t)v275, v35, v36, v37, v38, v39, v40, v41);
  }
  v280 = (_QWORD *)*((_QWORD *)this + 322);
  *((_QWORD *)this + 322) = 0;
  if (v280)
  {
    *v280 = off_1E3580B60;
    v281 = (_QWORD *)v280[8];
    if (v281)
    {
      v282 = v280[7];
      *v281 = v282;
      *(_QWORD *)(v282 + 8) = v281;
      v280[7] = 0;
      v280[8] = 0;
    }
    v283 = (_QWORD *)v280[5];
    if (v283)
    {
      v284 = v280[4];
      *v283 = v284;
      *(_QWORD *)(v284 + 8) = v283;
      v280[4] = 0;
      v280[5] = 0;
    }
    WTF::fastFree((unint64_t)v280, v35, v36, v37, v38, v39, v40, v41);
  }
  v285 = *((_QWORD *)this + 321);
  if ((v285 & 1) == 0)
  {
    do
    {
      v396 = __ldaxr((unsigned int *)v285);
      v397 = v396 - 1;
    }
    while (__stlxr(v397, (unsigned int *)v285));
    if (!v397)
    {
      atomic_store(1u, (unsigned int *)v285);
      v398 = (uint64_t **)(v285 + 8);
      for (k = *(uint64_t **)(v285 + 8); k != (uint64_t *)v398; k = *v398)
      {
        v680 = *k;
        v679 = (uint64_t *)k[1];
        *v679 = *k;
        *(_QWORD *)(v680 + 8) = v679;
        *k = 0;
        k[1] = 0;
      }
      WTF::fastFree(v285, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v286 = *((_QWORD *)this + 320);
  if ((v286 & 1) == 0)
  {
    do
    {
      v400 = __ldaxr((unsigned int *)v286);
      v401 = v400 - 1;
    }
    while (__stlxr(v401, (unsigned int *)v286));
    if (!v401)
    {
      atomic_store(1u, (unsigned int *)v286);
      v402 = (uint64_t **)(v286 + 8);
      for (m = *(uint64_t **)(v286 + 8); m != (uint64_t *)v402; m = *v402)
      {
        v682 = *m;
        v681 = (uint64_t *)m[1];
        *v681 = *m;
        *(_QWORD *)(v682 + 8) = v681;
        *m = 0;
        m[1] = 0;
      }
      WTF::fastFree(v286, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v287 = *((_QWORD *)this + 319);
  if ((v287 & 1) == 0)
  {
    do
    {
      v404 = __ldaxr((unsigned int *)v287);
      v405 = v404 - 1;
    }
    while (__stlxr(v405, (unsigned int *)v287));
    if (!v405)
    {
      atomic_store(1u, (unsigned int *)v287);
      v406 = (uint64_t **)(v287 + 8);
      for (n = *(uint64_t **)(v287 + 8); n != (uint64_t *)v406; n = *v406)
      {
        v684 = *n;
        v683 = (uint64_t *)n[1];
        *v683 = *n;
        *(_QWORD *)(v684 + 8) = v683;
        *n = 0;
        n[1] = 0;
      }
      WTF::fastFree(v287, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v288 = *((_QWORD *)this + 318);
  if ((v288 & 1) == 0)
  {
    do
    {
      v408 = __ldaxr((unsigned int *)v288);
      v409 = v408 - 1;
    }
    while (__stlxr(v409, (unsigned int *)v288));
    if (!v409)
    {
      atomic_store(1u, (unsigned int *)v288);
      v410 = (uint64_t **)(v288 + 8);
      for (ii = *(uint64_t **)(v288 + 8); ii != (uint64_t *)v410; ii = *v410)
      {
        v686 = *ii;
        v685 = (uint64_t *)ii[1];
        *v685 = *ii;
        *(_QWORD *)(v686 + 8) = v685;
        *ii = 0;
        ii[1] = 0;
      }
      WTF::fastFree(v288, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v289 = *((_QWORD *)this + 317);
  if ((v289 & 1) == 0)
  {
    do
    {
      v412 = __ldaxr((unsigned int *)v289);
      v413 = v412 - 1;
    }
    while (__stlxr(v413, (unsigned int *)v289));
    if (!v413)
    {
      atomic_store(1u, (unsigned int *)v289);
      v414 = (uint64_t **)(v289 + 8);
      for (jj = *(uint64_t **)(v289 + 8); jj != (uint64_t *)v414; jj = *v414)
      {
        v688 = *jj;
        v687 = (uint64_t *)jj[1];
        *v687 = *jj;
        *(_QWORD *)(v688 + 8) = v687;
        *jj = 0;
        jj[1] = 0;
      }
      WTF::fastFree(v289, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v290 = *((_QWORD *)this + 316);
  if ((v290 & 1) == 0)
  {
    do
    {
      v416 = __ldaxr((unsigned int *)v290);
      v417 = v416 - 1;
    }
    while (__stlxr(v417, (unsigned int *)v290));
    if (!v417)
    {
      atomic_store(1u, (unsigned int *)v290);
      v418 = (uint64_t **)(v290 + 8);
      for (kk = *(uint64_t **)(v290 + 8); kk != (uint64_t *)v418; kk = *v418)
      {
        v690 = *kk;
        v689 = (uint64_t *)kk[1];
        *v689 = *kk;
        *(_QWORD *)(v690 + 8) = v689;
        *kk = 0;
        kk[1] = 0;
      }
      WTF::fastFree(v290, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v291 = *((_QWORD *)this + 315);
  if ((v291 & 1) == 0)
  {
    do
    {
      v420 = __ldaxr((unsigned int *)v291);
      v421 = v420 - 1;
    }
    while (__stlxr(v421, (unsigned int *)v291));
    if (!v421)
    {
      atomic_store(1u, (unsigned int *)v291);
      v422 = (uint64_t **)(v291 + 8);
      for (mm = *(uint64_t **)(v291 + 8); mm != (uint64_t *)v422; mm = *v422)
      {
        v692 = *mm;
        v691 = (uint64_t *)mm[1];
        *v691 = *mm;
        *(_QWORD *)(v692 + 8) = v691;
        *mm = 0;
        mm[1] = 0;
      }
      WTF::fastFree(v291, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v292 = *((_QWORD *)this + 314);
  if ((v292 & 1) == 0)
  {
    do
    {
      v424 = __ldaxr((unsigned int *)v292);
      v425 = v424 - 1;
    }
    while (__stlxr(v425, (unsigned int *)v292));
    if (!v425)
    {
      atomic_store(1u, (unsigned int *)v292);
      v426 = (uint64_t **)(v292 + 8);
      for (nn = *(uint64_t **)(v292 + 8); nn != (uint64_t *)v426; nn = *v426)
      {
        v694 = *nn;
        v693 = (uint64_t *)nn[1];
        *v693 = *nn;
        *(_QWORD *)(v694 + 8) = v693;
        *nn = 0;
        nn[1] = 0;
      }
      WTF::fastFree(v292, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v293 = *((_QWORD *)this + 313);
  if ((v293 & 1) == 0)
  {
    do
    {
      v428 = __ldaxr((unsigned int *)v293);
      v429 = v428 - 1;
    }
    while (__stlxr(v429, (unsigned int *)v293));
    if (!v429)
    {
      atomic_store(1u, (unsigned int *)v293);
      v430 = (uint64_t **)(v293 + 8);
      for (i1 = *(uint64_t **)(v293 + 8); i1 != (uint64_t *)v430; i1 = *v430)
      {
        v696 = *i1;
        v695 = (uint64_t *)i1[1];
        *v695 = *i1;
        *(_QWORD *)(v696 + 8) = v695;
        *i1 = 0;
        i1[1] = 0;
      }
      WTF::fastFree(v293, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v294 = *((_QWORD *)this + 312);
  if ((v294 & 1) == 0)
  {
    do
    {
      v432 = __ldaxr((unsigned int *)v294);
      v433 = v432 - 1;
    }
    while (__stlxr(v433, (unsigned int *)v294));
    if (!v433)
    {
      atomic_store(1u, (unsigned int *)v294);
      v434 = (uint64_t **)(v294 + 8);
      for (i2 = *(uint64_t **)(v294 + 8); i2 != (uint64_t *)v434; i2 = *v434)
      {
        v698 = *i2;
        v697 = (uint64_t *)i2[1];
        *v697 = *i2;
        *(_QWORD *)(v698 + 8) = v697;
        *i2 = 0;
        i2[1] = 0;
      }
      WTF::fastFree(v294, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v295 = *((_QWORD *)this + 311);
  if ((v295 & 1) == 0)
  {
    do
    {
      v436 = __ldaxr((unsigned int *)v295);
      v437 = v436 - 1;
    }
    while (__stlxr(v437, (unsigned int *)v295));
    if (!v437)
    {
      atomic_store(1u, (unsigned int *)v295);
      v438 = (uint64_t **)(v295 + 8);
      for (i3 = *(uint64_t **)(v295 + 8); i3 != (uint64_t *)v438; i3 = *v438)
      {
        v700 = *i3;
        v699 = (uint64_t *)i3[1];
        *v699 = *i3;
        *(_QWORD *)(v700 + 8) = v699;
        *i3 = 0;
        i3[1] = 0;
      }
      WTF::fastFree(v295, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v296 = *((_QWORD *)this + 310);
  if ((v296 & 1) == 0)
  {
    do
    {
      v440 = __ldaxr((unsigned int *)v296);
      v441 = v440 - 1;
    }
    while (__stlxr(v441, (unsigned int *)v296));
    if (!v441)
    {
      atomic_store(1u, (unsigned int *)v296);
      v442 = (uint64_t **)(v296 + 8);
      for (i4 = *(uint64_t **)(v296 + 8); i4 != (uint64_t *)v442; i4 = *v442)
      {
        v702 = *i4;
        v701 = (uint64_t *)i4[1];
        *v701 = *i4;
        *(_QWORD *)(v702 + 8) = v701;
        *i4 = 0;
        i4[1] = 0;
      }
      WTF::fastFree(v296, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v297 = *((_QWORD *)this + 309);
  if ((v297 & 1) == 0)
  {
    do
    {
      v444 = __ldaxr((unsigned int *)v297);
      v445 = v444 - 1;
    }
    while (__stlxr(v445, (unsigned int *)v297));
    if (!v445)
    {
      atomic_store(1u, (unsigned int *)v297);
      v446 = (uint64_t **)(v297 + 8);
      for (i5 = *(uint64_t **)(v297 + 8); i5 != (uint64_t *)v446; i5 = *v446)
      {
        v704 = *i5;
        v703 = (uint64_t *)i5[1];
        *v703 = *i5;
        *(_QWORD *)(v704 + 8) = v703;
        *i5 = 0;
        i5[1] = 0;
      }
      WTF::fastFree(v297, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v298 = *((_QWORD *)this + 308);
  if ((v298 & 1) == 0)
  {
    do
    {
      v448 = __ldaxr((unsigned int *)v298);
      v449 = v448 - 1;
    }
    while (__stlxr(v449, (unsigned int *)v298));
    if (!v449)
    {
      atomic_store(1u, (unsigned int *)v298);
      v450 = (uint64_t **)(v298 + 8);
      for (i6 = *(uint64_t **)(v298 + 8); i6 != (uint64_t *)v450; i6 = *v450)
      {
        v706 = *i6;
        v705 = (uint64_t *)i6[1];
        *v705 = *i6;
        *(_QWORD *)(v706 + 8) = v705;
        *i6 = 0;
        i6[1] = 0;
      }
      WTF::fastFree(v298, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v299 = *((_QWORD *)this + 307);
  if ((v299 & 1) == 0)
  {
    do
    {
      v452 = __ldaxr((unsigned int *)v299);
      v453 = v452 - 1;
    }
    while (__stlxr(v453, (unsigned int *)v299));
    if (!v453)
    {
      atomic_store(1u, (unsigned int *)v299);
      v454 = (uint64_t **)(v299 + 8);
      for (i7 = *(uint64_t **)(v299 + 8); i7 != (uint64_t *)v454; i7 = *v454)
      {
        v708 = *i7;
        v707 = (uint64_t *)i7[1];
        *v707 = *i7;
        *(_QWORD *)(v708 + 8) = v707;
        *i7 = 0;
        i7[1] = 0;
      }
      WTF::fastFree(v299, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v300 = *((_QWORD *)this + 306);
  if ((v300 & 1) == 0)
  {
    do
    {
      v456 = __ldaxr((unsigned int *)v300);
      v457 = v456 - 1;
    }
    while (__stlxr(v457, (unsigned int *)v300));
    if (!v457)
    {
      atomic_store(1u, (unsigned int *)v300);
      v458 = (uint64_t **)(v300 + 8);
      for (i8 = *(uint64_t **)(v300 + 8); i8 != (uint64_t *)v458; i8 = *v458)
      {
        v710 = *i8;
        v709 = (uint64_t *)i8[1];
        *v709 = *i8;
        *(_QWORD *)(v710 + 8) = v709;
        *i8 = 0;
        i8[1] = 0;
      }
      WTF::fastFree(v300, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v301 = *((_QWORD *)this + 305);
  if ((v301 & 1) == 0)
  {
    do
    {
      v460 = __ldaxr((unsigned int *)v301);
      v461 = v460 - 1;
    }
    while (__stlxr(v461, (unsigned int *)v301));
    if (!v461)
    {
      atomic_store(1u, (unsigned int *)v301);
      v462 = (uint64_t **)(v301 + 8);
      for (i9 = *(uint64_t **)(v301 + 8); i9 != (uint64_t *)v462; i9 = *v462)
      {
        v712 = *i9;
        v711 = (uint64_t *)i9[1];
        *v711 = *i9;
        *(_QWORD *)(v712 + 8) = v711;
        *i9 = 0;
        i9[1] = 0;
      }
      WTF::fastFree(v301, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v302 = *((_QWORD *)this + 304);
  if ((v302 & 1) == 0)
  {
    do
    {
      v464 = __ldaxr((unsigned int *)v302);
      v465 = v464 - 1;
    }
    while (__stlxr(v465, (unsigned int *)v302));
    if (!v465)
    {
      atomic_store(1u, (unsigned int *)v302);
      v466 = (uint64_t **)(v302 + 8);
      for (i10 = *(uint64_t **)(v302 + 8); i10 != (uint64_t *)v466; i10 = *v466)
      {
        v714 = *i10;
        v713 = (uint64_t *)i10[1];
        *v713 = *i10;
        *(_QWORD *)(v714 + 8) = v713;
        *i10 = 0;
        i10[1] = 0;
      }
      WTF::fastFree(v302, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v303 = *((_QWORD *)this + 303);
  if ((v303 & 1) == 0)
  {
    do
    {
      v468 = __ldaxr((unsigned int *)v303);
      v469 = v468 - 1;
    }
    while (__stlxr(v469, (unsigned int *)v303));
    if (!v469)
    {
      atomic_store(1u, (unsigned int *)v303);
      v470 = (uint64_t **)(v303 + 8);
      for (i11 = *(uint64_t **)(v303 + 8); i11 != (uint64_t *)v470; i11 = *v470)
      {
        v716 = *i11;
        v715 = (uint64_t *)i11[1];
        *v715 = *i11;
        *(_QWORD *)(v716 + 8) = v715;
        *i11 = 0;
        i11[1] = 0;
      }
      WTF::fastFree(v303, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v304 = *((_QWORD *)this + 302);
  if ((v304 & 1) == 0)
  {
    do
    {
      v472 = __ldaxr((unsigned int *)v304);
      v473 = v472 - 1;
    }
    while (__stlxr(v473, (unsigned int *)v304));
    if (!v473)
    {
      atomic_store(1u, (unsigned int *)v304);
      v474 = (uint64_t **)(v304 + 8);
      for (i12 = *(uint64_t **)(v304 + 8); i12 != (uint64_t *)v474; i12 = *v474)
      {
        v718 = *i12;
        v717 = (uint64_t *)i12[1];
        *v717 = *i12;
        *(_QWORD *)(v718 + 8) = v717;
        *i12 = 0;
        i12[1] = 0;
      }
      WTF::fastFree(v304, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v305 = *((_QWORD *)this + 301);
  if ((v305 & 1) == 0)
  {
    do
    {
      v476 = __ldaxr((unsigned int *)v305);
      v477 = v476 - 1;
    }
    while (__stlxr(v477, (unsigned int *)v305));
    if (!v477)
    {
      atomic_store(1u, (unsigned int *)v305);
      v478 = (uint64_t **)(v305 + 8);
      for (i13 = *(uint64_t **)(v305 + 8); i13 != (uint64_t *)v478; i13 = *v478)
      {
        v720 = *i13;
        v719 = (uint64_t *)i13[1];
        *v719 = *i13;
        *(_QWORD *)(v720 + 8) = v719;
        *i13 = 0;
        i13[1] = 0;
      }
      WTF::fastFree(v305, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v306 = *((_QWORD *)this + 300);
  if ((v306 & 1) == 0)
  {
    do
    {
      v480 = __ldaxr((unsigned int *)v306);
      v481 = v480 - 1;
    }
    while (__stlxr(v481, (unsigned int *)v306));
    if (!v481)
    {
      atomic_store(1u, (unsigned int *)v306);
      v482 = (uint64_t **)(v306 + 8);
      for (i14 = *(uint64_t **)(v306 + 8); i14 != (uint64_t *)v482; i14 = *v482)
      {
        v722 = *i14;
        v721 = (uint64_t *)i14[1];
        *v721 = *i14;
        *(_QWORD *)(v722 + 8) = v721;
        *i14 = 0;
        i14[1] = 0;
      }
      WTF::fastFree(v306, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v307 = *((_QWORD *)this + 299);
  if ((v307 & 1) == 0)
  {
    do
    {
      v484 = __ldaxr((unsigned int *)v307);
      v485 = v484 - 1;
    }
    while (__stlxr(v485, (unsigned int *)v307));
    if (!v485)
    {
      atomic_store(1u, (unsigned int *)v307);
      v486 = (uint64_t **)(v307 + 8);
      for (i15 = *(uint64_t **)(v307 + 8); i15 != (uint64_t *)v486; i15 = *v486)
      {
        v724 = *i15;
        v723 = (uint64_t *)i15[1];
        *v723 = *i15;
        *(_QWORD *)(v724 + 8) = v723;
        *i15 = 0;
        i15[1] = 0;
      }
      WTF::fastFree(v307, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v308 = *((_QWORD *)this + 298);
  if ((v308 & 1) == 0)
  {
    do
    {
      v488 = __ldaxr((unsigned int *)v308);
      v489 = v488 - 1;
    }
    while (__stlxr(v489, (unsigned int *)v308));
    if (!v489)
    {
      atomic_store(1u, (unsigned int *)v308);
      v490 = (uint64_t **)(v308 + 8);
      for (i16 = *(uint64_t **)(v308 + 8); i16 != (uint64_t *)v490; i16 = *v490)
      {
        v726 = *i16;
        v725 = (uint64_t *)i16[1];
        *v725 = *i16;
        *(_QWORD *)(v726 + 8) = v725;
        *i16 = 0;
        i16[1] = 0;
      }
      WTF::fastFree(v308, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v309 = *((_QWORD *)this + 297);
  if ((v309 & 1) == 0)
  {
    do
    {
      v492 = __ldaxr((unsigned int *)v309);
      v493 = v492 - 1;
    }
    while (__stlxr(v493, (unsigned int *)v309));
    if (!v493)
    {
      atomic_store(1u, (unsigned int *)v309);
      v494 = (uint64_t **)(v309 + 8);
      for (i17 = *(uint64_t **)(v309 + 8); i17 != (uint64_t *)v494; i17 = *v494)
      {
        v728 = *i17;
        v727 = (uint64_t *)i17[1];
        *v727 = *i17;
        *(_QWORD *)(v728 + 8) = v727;
        *i17 = 0;
        i17[1] = 0;
      }
      WTF::fastFree(v309, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v310 = *((_QWORD *)this + 296);
  if ((v310 & 1) == 0)
  {
    do
    {
      v496 = __ldaxr((unsigned int *)v310);
      v497 = v496 - 1;
    }
    while (__stlxr(v497, (unsigned int *)v310));
    if (!v497)
    {
      atomic_store(1u, (unsigned int *)v310);
      v498 = (uint64_t **)(v310 + 8);
      for (i18 = *(uint64_t **)(v310 + 8); i18 != (uint64_t *)v498; i18 = *v498)
      {
        v730 = *i18;
        v729 = (uint64_t *)i18[1];
        *v729 = *i18;
        *(_QWORD *)(v730 + 8) = v729;
        *i18 = 0;
        i18[1] = 0;
      }
      WTF::fastFree(v310, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v311 = *((_QWORD *)this + 295);
  if ((v311 & 1) == 0)
  {
    do
    {
      v500 = __ldaxr((unsigned int *)v311);
      v501 = v500 - 1;
    }
    while (__stlxr(v501, (unsigned int *)v311));
    if (!v501)
    {
      atomic_store(1u, (unsigned int *)v311);
      v502 = (uint64_t **)(v311 + 8);
      for (i19 = *(uint64_t **)(v311 + 8); i19 != (uint64_t *)v502; i19 = *v502)
      {
        v732 = *i19;
        v731 = (uint64_t *)i19[1];
        *v731 = *i19;
        *(_QWORD *)(v732 + 8) = v731;
        *i19 = 0;
        i19[1] = 0;
      }
      WTF::fastFree(v311, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v312 = *((_QWORD *)this + 294);
  if ((v312 & 1) == 0)
  {
    do
    {
      v504 = __ldaxr((unsigned int *)v312);
      v505 = v504 - 1;
    }
    while (__stlxr(v505, (unsigned int *)v312));
    if (!v505)
    {
      atomic_store(1u, (unsigned int *)v312);
      v506 = (uint64_t **)(v312 + 8);
      for (i20 = *(uint64_t **)(v312 + 8); i20 != (uint64_t *)v506; i20 = *v506)
      {
        v734 = *i20;
        v733 = (uint64_t *)i20[1];
        *v733 = *i20;
        *(_QWORD *)(v734 + 8) = v733;
        *i20 = 0;
        i20[1] = 0;
      }
      WTF::fastFree(v312, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v313 = *((_QWORD *)this + 293);
  if ((v313 & 1) == 0)
  {
    do
    {
      v508 = __ldaxr((unsigned int *)v313);
      v509 = v508 - 1;
    }
    while (__stlxr(v509, (unsigned int *)v313));
    if (!v509)
    {
      atomic_store(1u, (unsigned int *)v313);
      v510 = (uint64_t **)(v313 + 8);
      for (i21 = *(uint64_t **)(v313 + 8); i21 != (uint64_t *)v510; i21 = *v510)
      {
        v736 = *i21;
        v735 = (uint64_t *)i21[1];
        *v735 = *i21;
        *(_QWORD *)(v736 + 8) = v735;
        *i21 = 0;
        i21[1] = 0;
      }
      WTF::fastFree(v313, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v314 = *((_QWORD *)this + 292);
  if ((v314 & 1) == 0)
  {
    do
    {
      v512 = __ldaxr((unsigned int *)v314);
      v513 = v512 - 1;
    }
    while (__stlxr(v513, (unsigned int *)v314));
    if (!v513)
    {
      atomic_store(1u, (unsigned int *)v314);
      v514 = (uint64_t **)(v314 + 8);
      for (i22 = *(uint64_t **)(v314 + 8); i22 != (uint64_t *)v514; i22 = *v514)
      {
        v738 = *i22;
        v737 = (uint64_t *)i22[1];
        *v737 = *i22;
        *(_QWORD *)(v738 + 8) = v737;
        *i22 = 0;
        i22[1] = 0;
      }
      WTF::fastFree(v314, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v315 = *((_QWORD *)this + 291);
  if ((v315 & 1) == 0)
  {
    do
    {
      v516 = __ldaxr((unsigned int *)v315);
      v517 = v516 - 1;
    }
    while (__stlxr(v517, (unsigned int *)v315));
    if (!v517)
    {
      atomic_store(1u, (unsigned int *)v315);
      v518 = (uint64_t **)(v315 + 8);
      for (i23 = *(uint64_t **)(v315 + 8); i23 != (uint64_t *)v518; i23 = *v518)
      {
        v740 = *i23;
        v739 = (uint64_t *)i23[1];
        *v739 = *i23;
        *(_QWORD *)(v740 + 8) = v739;
        *i23 = 0;
        i23[1] = 0;
      }
      WTF::fastFree(v315, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v316 = *((_QWORD *)this + 290);
  if ((v316 & 1) == 0)
  {
    do
    {
      v520 = __ldaxr((unsigned int *)v316);
      v521 = v520 - 1;
    }
    while (__stlxr(v521, (unsigned int *)v316));
    if (!v521)
    {
      atomic_store(1u, (unsigned int *)v316);
      v522 = (uint64_t **)(v316 + 8);
      for (i24 = *(uint64_t **)(v316 + 8); i24 != (uint64_t *)v522; i24 = *v522)
      {
        v742 = *i24;
        v741 = (uint64_t *)i24[1];
        *v741 = *i24;
        *(_QWORD *)(v742 + 8) = v741;
        *i24 = 0;
        i24[1] = 0;
      }
      WTF::fastFree(v316, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v317 = *((_QWORD *)this + 289);
  if ((v317 & 1) == 0)
  {
    do
    {
      v524 = __ldaxr((unsigned int *)v317);
      v525 = v524 - 1;
    }
    while (__stlxr(v525, (unsigned int *)v317));
    if (!v525)
    {
      atomic_store(1u, (unsigned int *)v317);
      v526 = (uint64_t **)(v317 + 8);
      for (i25 = *(uint64_t **)(v317 + 8); i25 != (uint64_t *)v526; i25 = *v526)
      {
        v744 = *i25;
        v743 = (uint64_t *)i25[1];
        *v743 = *i25;
        *(_QWORD *)(v744 + 8) = v743;
        *i25 = 0;
        i25[1] = 0;
      }
      WTF::fastFree(v317, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v318 = *((_QWORD *)this + 288);
  if ((v318 & 1) == 0)
  {
    do
    {
      v528 = __ldaxr((unsigned int *)v318);
      v529 = v528 - 1;
    }
    while (__stlxr(v529, (unsigned int *)v318));
    if (!v529)
    {
      atomic_store(1u, (unsigned int *)v318);
      v530 = (uint64_t **)(v318 + 8);
      for (i26 = *(uint64_t **)(v318 + 8); i26 != (uint64_t *)v530; i26 = *v530)
      {
        v746 = *i26;
        v745 = (uint64_t *)i26[1];
        *v745 = *i26;
        *(_QWORD *)(v746 + 8) = v745;
        *i26 = 0;
        i26[1] = 0;
      }
      WTF::fastFree(v318, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v319 = *((_QWORD *)this + 287);
  if ((v319 & 1) == 0)
  {
    do
    {
      v532 = __ldaxr((unsigned int *)v319);
      v533 = v532 - 1;
    }
    while (__stlxr(v533, (unsigned int *)v319));
    if (!v533)
    {
      atomic_store(1u, (unsigned int *)v319);
      v534 = (uint64_t **)(v319 + 8);
      for (i27 = *(uint64_t **)(v319 + 8); i27 != (uint64_t *)v534; i27 = *v534)
      {
        v748 = *i27;
        v747 = (uint64_t *)i27[1];
        *v747 = *i27;
        *(_QWORD *)(v748 + 8) = v747;
        *i27 = 0;
        i27[1] = 0;
      }
      WTF::fastFree(v319, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v320 = *((_QWORD *)this + 286);
  if ((v320 & 1) == 0)
  {
    do
    {
      v536 = __ldaxr((unsigned int *)v320);
      v537 = v536 - 1;
    }
    while (__stlxr(v537, (unsigned int *)v320));
    if (!v537)
    {
      atomic_store(1u, (unsigned int *)v320);
      v538 = (uint64_t **)(v320 + 8);
      for (i28 = *(uint64_t **)(v320 + 8); i28 != (uint64_t *)v538; i28 = *v538)
      {
        v750 = *i28;
        v749 = (uint64_t *)i28[1];
        *v749 = *i28;
        *(_QWORD *)(v750 + 8) = v749;
        *i28 = 0;
        i28[1] = 0;
      }
      WTF::fastFree(v320, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v321 = *((_QWORD *)this + 285);
  if ((v321 & 1) == 0)
  {
    do
    {
      v540 = __ldaxr((unsigned int *)v321);
      v541 = v540 - 1;
    }
    while (__stlxr(v541, (unsigned int *)v321));
    if (!v541)
    {
      atomic_store(1u, (unsigned int *)v321);
      v542 = (uint64_t **)(v321 + 8);
      for (i29 = *(uint64_t **)(v321 + 8); i29 != (uint64_t *)v542; i29 = *v542)
      {
        v752 = *i29;
        v751 = (uint64_t *)i29[1];
        *v751 = *i29;
        *(_QWORD *)(v752 + 8) = v751;
        *i29 = 0;
        i29[1] = 0;
      }
      WTF::fastFree(v321, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v322 = *((_QWORD *)this + 284);
  if ((v322 & 1) == 0)
  {
    do
    {
      v544 = __ldaxr((unsigned int *)v322);
      v545 = v544 - 1;
    }
    while (__stlxr(v545, (unsigned int *)v322));
    if (!v545)
    {
      atomic_store(1u, (unsigned int *)v322);
      v546 = (uint64_t **)(v322 + 8);
      for (i30 = *(uint64_t **)(v322 + 8); i30 != (uint64_t *)v546; i30 = *v546)
      {
        v754 = *i30;
        v753 = (uint64_t *)i30[1];
        *v753 = *i30;
        *(_QWORD *)(v754 + 8) = v753;
        *i30 = 0;
        i30[1] = 0;
      }
      WTF::fastFree(v322, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v323 = *((_QWORD *)this + 283);
  if ((v323 & 1) == 0)
  {
    do
    {
      v548 = __ldaxr((unsigned int *)v323);
      v549 = v548 - 1;
    }
    while (__stlxr(v549, (unsigned int *)v323));
    if (!v549)
    {
      atomic_store(1u, (unsigned int *)v323);
      v550 = (uint64_t **)(v323 + 8);
      for (i31 = *(uint64_t **)(v323 + 8); i31 != (uint64_t *)v550; i31 = *v550)
      {
        v756 = *i31;
        v755 = (uint64_t *)i31[1];
        *v755 = *i31;
        *(_QWORD *)(v756 + 8) = v755;
        *i31 = 0;
        i31[1] = 0;
      }
      WTF::fastFree(v323, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v324 = *((_QWORD *)this + 282);
  if ((v324 & 1) == 0)
  {
    do
    {
      v552 = __ldaxr((unsigned int *)v324);
      v553 = v552 - 1;
    }
    while (__stlxr(v553, (unsigned int *)v324));
    if (!v553)
    {
      atomic_store(1u, (unsigned int *)v324);
      v554 = (uint64_t **)(v324 + 8);
      for (i32 = *(uint64_t **)(v324 + 8); i32 != (uint64_t *)v554; i32 = *v554)
      {
        v758 = *i32;
        v757 = (uint64_t *)i32[1];
        *v757 = *i32;
        *(_QWORD *)(v758 + 8) = v757;
        *i32 = 0;
        i32[1] = 0;
      }
      WTF::fastFree(v324, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v325 = *((_QWORD *)this + 281);
  if ((v325 & 1) == 0)
  {
    do
    {
      v556 = __ldaxr((unsigned int *)v325);
      v557 = v556 - 1;
    }
    while (__stlxr(v557, (unsigned int *)v325));
    if (!v557)
    {
      atomic_store(1u, (unsigned int *)v325);
      v558 = (uint64_t **)(v325 + 8);
      for (i33 = *(uint64_t **)(v325 + 8); i33 != (uint64_t *)v558; i33 = *v558)
      {
        v760 = *i33;
        v759 = (uint64_t *)i33[1];
        *v759 = *i33;
        *(_QWORD *)(v760 + 8) = v759;
        *i33 = 0;
        i33[1] = 0;
      }
      WTF::fastFree(v325, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v326 = *((_QWORD *)this + 280);
  if ((v326 & 1) == 0)
  {
    do
    {
      v560 = __ldaxr((unsigned int *)v326);
      v561 = v560 - 1;
    }
    while (__stlxr(v561, (unsigned int *)v326));
    if (!v561)
    {
      atomic_store(1u, (unsigned int *)v326);
      v562 = (uint64_t **)(v326 + 8);
      for (i34 = *(uint64_t **)(v326 + 8); i34 != (uint64_t *)v562; i34 = *v562)
      {
        v762 = *i34;
        v761 = (uint64_t *)i34[1];
        *v761 = *i34;
        *(_QWORD *)(v762 + 8) = v761;
        *i34 = 0;
        i34[1] = 0;
      }
      WTF::fastFree(v326, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v327 = *((_QWORD *)this + 279);
  if ((v327 & 1) == 0)
  {
    do
    {
      v564 = __ldaxr((unsigned int *)v327);
      v565 = v564 - 1;
    }
    while (__stlxr(v565, (unsigned int *)v327));
    if (!v565)
    {
      atomic_store(1u, (unsigned int *)v327);
      v566 = (uint64_t **)(v327 + 8);
      for (i35 = *(uint64_t **)(v327 + 8); i35 != (uint64_t *)v566; i35 = *v566)
      {
        v764 = *i35;
        v763 = (uint64_t *)i35[1];
        *v763 = *i35;
        *(_QWORD *)(v764 + 8) = v763;
        *i35 = 0;
        i35[1] = 0;
      }
      WTF::fastFree(v327, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v328 = *((_QWORD *)this + 278);
  if ((v328 & 1) == 0)
  {
    do
    {
      v568 = __ldaxr((unsigned int *)v328);
      v569 = v568 - 1;
    }
    while (__stlxr(v569, (unsigned int *)v328));
    if (!v569)
    {
      atomic_store(1u, (unsigned int *)v328);
      v570 = (uint64_t **)(v328 + 8);
      for (i36 = *(uint64_t **)(v328 + 8); i36 != (uint64_t *)v570; i36 = *v570)
      {
        v766 = *i36;
        v765 = (uint64_t *)i36[1];
        *v765 = *i36;
        *(_QWORD *)(v766 + 8) = v765;
        *i36 = 0;
        i36[1] = 0;
      }
      WTF::fastFree(v328, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v329 = *((_QWORD *)this + 277);
  if ((v329 & 1) == 0)
  {
    do
    {
      v572 = __ldaxr((unsigned int *)v329);
      v573 = v572 - 1;
    }
    while (__stlxr(v573, (unsigned int *)v329));
    if (!v573)
    {
      atomic_store(1u, (unsigned int *)v329);
      v574 = (uint64_t **)(v329 + 8);
      for (i37 = *(uint64_t **)(v329 + 8); i37 != (uint64_t *)v574; i37 = *v574)
      {
        v768 = *i37;
        v767 = (uint64_t *)i37[1];
        *v767 = *i37;
        *(_QWORD *)(v768 + 8) = v767;
        *i37 = 0;
        i37[1] = 0;
      }
      WTF::fastFree(v329, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v330 = *((_QWORD *)this + 275);
  if (v330)
  {
    *((_QWORD *)this + 275) = 0;
    *((_DWORD *)this + 552) = 0;
    WTF::fastFree(v330, v35, v36, v37, v38, v39, v40, v41);
  }
  v331 = *((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v331)
  {
    v332 = *(_QWORD *)(v331 + 8);
    if (v332)
    {
      v333 = *(unsigned int *)(v332 - 4);
      if ((_DWORD)v333)
      {
        v334 = (void **)(v332 + 8);
        do
        {
          if (*(v334 - 1) != (void *)-1)
          {
            v35 = *v334;
            *v334 = 0;
            if (v35)
              std::default_delete<OpaqueJSClassContextData>::operator()[abi:sn180100]((uint64_t)v334, (unint64_t)v35, v36, v37, v38, v39, v40, v41);
          }
          v334 += 2;
          --v333;
        }
        while (v333);
      }
      WTF::fastFree(v332 - 16, v35, v36, v37, v38, v39, v40, v41);
    }
    WTF::fastFree(v331, v35, v36, v37, v38, v39, v40, v41);
  }
  v335 = *((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v335)
  {
    do
    {
      v372 = __ldaxr((unsigned int *)v335);
      v373 = v372 - 1;
    }
    while (__stlxr(v373, (unsigned int *)v335));
    if (!v373)
    {
      atomic_store(1u, (unsigned int *)v335);
      v374 = (uint64_t **)(v335 + 8);
      for (i38 = *(uint64_t **)(v335 + 8); i38 != (uint64_t *)v374; i38 = *v374)
      {
        v668 = *i38;
        v667 = (uint64_t *)i38[1];
        *v667 = *i38;
        *(_QWORD *)(v668 + 8) = v667;
        *i38 = 0;
        i38[1] = 0;
      }
      WTF::fastFree(v335, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v336 = *((_QWORD *)this + 259);
  *((_QWORD *)this + 259) = 0;
  if (v336)
  {
    do
    {
      v376 = __ldaxr((unsigned int *)v336);
      v377 = v376 - 1;
    }
    while (__stlxr(v377, (unsigned int *)v336));
    if (!v377)
    {
      atomic_store(1u, (unsigned int *)v336);
      v378 = (uint64_t **)(v336 + 8);
      for (i39 = *(uint64_t **)(v336 + 8); i39 != (uint64_t *)v378; i39 = *v378)
      {
        v670 = *i39;
        v669 = (uint64_t *)i39[1];
        *v669 = *i39;
        *(_QWORD *)(v670 + 8) = v669;
        *i39 = 0;
        i39[1] = 0;
      }
      WTF::fastFree(v336, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v337 = *((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = 0;
  if (v337)
  {
    do
    {
      v380 = __ldaxr((unsigned int *)v337);
      v381 = v380 - 1;
    }
    while (__stlxr(v381, (unsigned int *)v337));
    if (!v381)
    {
      atomic_store(1u, (unsigned int *)v337);
      v382 = (uint64_t **)(v337 + 8);
      for (i40 = *(uint64_t **)(v337 + 8); i40 != (uint64_t *)v382; i40 = *v382)
      {
        v672 = *i40;
        v671 = (uint64_t *)i40[1];
        *v671 = *i40;
        *(_QWORD *)(v672 + 8) = v671;
        *i40 = 0;
        i40[1] = 0;
      }
      WTF::fastFree(v337, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v338 = *((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = 0;
  if (v338)
  {
    do
    {
      v384 = __ldaxr((unsigned int *)v338);
      v385 = v384 - 1;
    }
    while (__stlxr(v385, (unsigned int *)v338));
    if (!v385)
    {
      atomic_store(1u, (unsigned int *)v338);
      v386 = (uint64_t **)(v338 + 8);
      for (i41 = *(uint64_t **)(v338 + 8); i41 != (uint64_t *)v386; i41 = *v386)
      {
        v674 = *i41;
        v673 = (uint64_t *)i41[1];
        *v673 = *i41;
        *(_QWORD *)(v674 + 8) = v673;
        *i41 = 0;
        i41[1] = 0;
      }
      WTF::fastFree(v338, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v339 = *((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v339)
  {
    do
    {
      v388 = __ldaxr((unsigned int *)v339);
      v389 = v388 - 1;
    }
    while (__stlxr(v389, (unsigned int *)v339));
    if (!v389)
    {
      atomic_store(1u, (unsigned int *)v339);
      v390 = (uint64_t **)(v339 + 8);
      for (i42 = *(uint64_t **)(v339 + 8); i42 != (uint64_t *)v390; i42 = *v390)
      {
        v676 = *i42;
        v675 = (uint64_t *)i42[1];
        *v675 = *i42;
        *(_QWORD *)(v676 + 8) = v675;
        *i42 = 0;
        i42[1] = 0;
      }
      WTF::fastFree(v339, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v340 = *((_QWORD *)this + 255);
  *((_QWORD *)this + 255) = 0;
  if (v340)
  {
    do
    {
      v392 = __ldaxr((unsigned int *)v340);
      v393 = v392 - 1;
    }
    while (__stlxr(v393, (unsigned int *)v340));
    if (!v393)
    {
      atomic_store(1u, (unsigned int *)v340);
      v394 = (uint64_t **)(v340 + 8);
      for (i43 = *(uint64_t **)(v340 + 8); i43 != (uint64_t *)v394; i43 = *v394)
      {
        v678 = *i43;
        v677 = (uint64_t *)i43[1];
        *v677 = *i43;
        *(_QWORD *)(v678 + 8) = v677;
        *i43 = 0;
        i43[1] = 0;
      }
      WTF::fastFree(v340, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v341 = *((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = 0;
  if (v341)
  {
    v342 = *(_QWORD *)(v341 + 8);
    if (__ldaxr((unsigned __int8 *)v342))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v342))
    {
LABEL_404:
      v344 = *(_QWORD *)(v342 + 8);
      v345 = v344 - 1;
      *(_QWORD *)(v342 + 8) = v344 - 1;
      if (v344 == 1)
      {
        v620 = *(_QWORD *)(v342 + 16);
        v346 = *(_QWORD *)(v342 + 24);
        *(_QWORD *)(v342 + 24) = 0;
        v347 = v620 != 0;
      }
      else
      {
        v346 = 0;
        v347 = 1;
      }
      v348 = __ldxr((unsigned __int8 *)v342);
      if (v348 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v342))
          goto LABEL_408;
      }
      else
      {
        __clrex();
      }
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v342, 0, v36, v37, v38, v39, v40, v41);
LABEL_408:
      if (!v345)
      {
        if (v346)
          (*(void (**)(uint64_t))(*(_QWORD *)v346 + 8))(v346);
        if (!v347)
          WTF::fastFree(v342, v35, v36, v37, v38, v39, v40, v41);
      }
      goto LABEL_409;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v342);
    goto LABEL_404;
  }
LABEL_409:
  v349 = (Inspector::JSGlobalObjectInspectorController *)*((_QWORD *)this + 253);
  *((_QWORD *)this + 253) = 0;
  if (v349)
  {
    Inspector::JSGlobalObjectInspectorController::~JSGlobalObjectInspectorController(v349, (WTF::AtomStringImpl *)v35, v36, v37, v38, v39, v40, v41);
    WTF::fastFree(v350, v351, v352, v353, v354, v355, v356, v357);
  }
  v358 = *((_QWORD *)this + 251);
  if (v358)
  {
    v621 = (uint64_t *)(v358 - 16);
    v622 = *(_QWORD *)(((v358 - 16) & 0xFFFFFFFFFFFFF000) + 0x10);
    v623 = *(uint64_t **)(v358 - 8);
    if (v623)
    {
      v624 = *v621;
      *v623 = *v621;
      *(_QWORD *)(v624 + 8) = v623;
      *v621 = 0;
      v621[1] = 0;
    }
    *v621 = *(_QWORD *)(v622 + 40);
    *(_QWORD *)(v622 + 40) = v621;
    *((_QWORD *)this + 251) = 0;
  }
  v359 = (WTF::StringImpl *)*((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = 0;
  if (v359)
  {
    if (*(_DWORD *)v359 == 2)
    {
      WTF::StringImpl::~StringImpl(v359, (WTF::AtomStringImpl *)v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v605, v606, v607, v608, v609, v610, v611, v612);
    }
    else
    {
      *(_DWORD *)v359 -= 2;
    }
  }
  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*((_QWORD *)this + 248) + 192), (uint64_t)this + 1968, v36, v37, v38, v39, v40, v41);
  v367 = *((_QWORD *)this + 247);
  if (v367)
  {
    v368 = *(unsigned int *)(v367 - 4);
    if ((_DWORD)v368)
    {
      v369 = v367 + 32;
      do
      {
        if (*(_QWORD *)(v369 - 32))
          v370 = 0;
        else
          v370 = *(_QWORD *)(v369 - 24) == 0;
        v371 = v370 && *(_DWORD *)(v369 - 16) == 1;
        if ((!v371 || *(_QWORD *)(v369 - 8)) && *(_QWORD *)v369)
        {
          *(_QWORD *)(*(_QWORD *)v369 + 8) = 3;
          *(_QWORD *)v369 = 0;
        }
        v369 += 40;
        --v368;
      }
      while (v368);
    }
    WTF::fastFree(v367 - 16, v360, v361, v362, v363, v364, v365, v366);
  }
  v576 = *((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = 0;
  if (v576)
    WTF::fastFree(v576, v360, v361, v362, v363, v364, v365, v366);
  v577 = *((_QWORD *)this + 4);
  v578 = *((unsigned int *)this + 13);
  if (v577)
  {
    v579 = 0;
    while (v578 > v579 >> 4)
    {
      if (v577 == ++v579)
        goto LABEL_693;
    }
    __break(0xC471u);
  }
  else
  {
LABEL_693:
    if ((_DWORD)v578)
    {
      v580 = 0;
      do
        WTF::fastFree(*(_QWORD *)(*((_QWORD *)this + 5) + 8 * v580++), v360, v361, v362, v363, v364, v365, v366);
      while (v580 < *((unsigned int *)this + 13));
    }
    v581 = *((_QWORD *)this + 5);
    if (v581)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v581, v360, v361, v362, v363, v364, v365, v366);
    }
  }
}

uint64_t JSC::WeakGCSet<JSC::JSCustomSetterFunction,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomSetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomSetterFunction>>::~WeakGCSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v18 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)(a1 + 8);
      do
      {
        if ((unint64_t)(*(_QWORD *)v19 + 1) >= 2)
        {
          *(_QWORD *)(*(_QWORD *)v19 + 8) = 3;
          *(_QWORD *)v19 = 0;
        }
        v19 += 8;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  return a1;
}

uint64_t JSC::WeakGCSet<JSC::JSCustomGetterFunction,JSC::JSGlobalObject::WeakCustomGetterOrSetterHash<JSC::JSCustomGetterFunction>,JSC::WeakGCSetHashTraits<JSC::JSCustomGetterFunction>>::~WeakGCSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  JSC::Heap::unregisterWeakGCHashTable((uint64_t *)(*(_QWORD *)(a1 + 16) + 192), a1, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 8);
  if (v16)
  {
    v18 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v18)
    {
      v19 = *(_QWORD *)(a1 + 8);
      do
      {
        if ((unint64_t)(*(_QWORD *)v19 + 1) >= 2)
        {
          *(_QWORD *)(*(_QWORD *)v19 + 8) = 3;
          *(_QWORD *)v19 = 0;
        }
        v19 += 8;
        --v18;
      }
      while (v18);
    }
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  }
  return a1;
}

uint64_t **std::unique_ptr<WTF::ThreadSafeWeakHashSet<JSC::DeferredWorkTimer::TicketData>>::~unique_ptr[abi:sn180100](uint64_t **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    if (*v9)
      WTF::HashTable<JSC::DeferredWorkTimer::TicketData const*,WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashMap<JSC::DeferredWorkTimer::TicketData const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::DeferredWorkTimer::TicketData const*>>::deallocateTable(*v9, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

_QWORD **std::unique_ptr<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>>::~unique_ptr[abi:sn180100](_QWORD **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    *v9 = off_1E3580B60;
    v10 = (_QWORD *)v9[8];
    if (v10)
    {
      v11 = v9[7];
      *v10 = v11;
      *(_QWORD *)(v11 + 8) = v10;
      v9[7] = 0;
      v9[8] = 0;
    }
    v12 = (_QWORD *)v9[5];
    if (v12)
    {
      v13 = v9[4];
      *v12 = v13;
      *(_QWORD *)(v13 + 8) = v12;
      v9[4] = 0;
      v9[5] = 0;
    }
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

void JSC::JSGlobalObject::initializeAggregateErrorConstructor(JSC::JSGlobalObject *this, JSC::LazyClassStructure::Initializer *a2)
{
  unint64_t *v4;
  JSC::LazyClassStructure *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  JSC::VM *v9;
  JSC::Structure *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  JSC::JSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  JSC::Structure *Structure;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  JSC::VM *v28;
  JSC::AggregateErrorPrototype *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  JSC::JSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  int v42;
  int v43;

  v4 = *(unint64_t **)a2;
  v5 = (JSC::JSGlobalObject *)((char *)this + 1504);
  v6 = JSC::LazyClassStructure::prototype((JSC::JSGlobalObject *)((char *)this + 1504), (unint64_t)this);
  v42 = 23;
  v9 = (JSC::VM *)JSC::Structure::create((JSC::VM *)v4, this, v6, (uint64_t)&v42, (unint64_t)&JSC::JSObject::s_info, 0, 0, v7, v8);
  v16 = (JSC::JSObject *)JSC::AggregateErrorPrototype::create((JSC::AggregateErrorPrototype *)v4, v9, v10, v11, v12, v13, v14, v15);
  JSC::LazyClassStructure::Initializer::setPrototype(a2, v16);
  Structure = (JSC::Structure *)JSC::ErrorInstance::createStructure(*(unint64_t **)a2, this, *((_QWORD *)a2 + 4), v17, v18, v19, v20, v21, v22);
  JSC::LazyClassStructure::Initializer::setStructure(a2, Structure);
  v24 = *(unint64_t **)a2;
  v25 = JSC::LazyClassStructure::constructor(v5, (unint64_t)this);
  v43 = 67099;
  v28 = (JSC::VM *)JSC::Structure::create((JSC::VM *)v24, this, v25, (uint64_t)&v43, (unint64_t)&JSC::AggregateErrorConstructor::s_info, 0, 0, v26, v27);
  v34 = JSC::AggregateErrorConstructor::create((JSC::AggregateErrorConstructor *)v24, v28, *((JSC::Structure **)a2 + 4), v29, v30, v31, v32, v33);
  JSC::LazyClassStructure::Initializer::setConstructor(a2, v34, v41, v35, v36, v37, v38, v39, v40);
}

unint64_t JSC::AggregateErrorPrototype::create(JSC::AggregateErrorPrototype *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  JSC::AggregateErrorPrototype *v11;

  v10 = JSC::allocateCell<JSC::IntlCollatorPrototype>(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v11 = (JSC::AggregateErrorPrototype *)JSC::AggregateErrorPrototype::AggregateErrorPrototype(v10, (uint64_t)this, (unint64_t)a2);
  JSC::AggregateErrorPrototype::finishCreation(v11, this);
  return v10;
}

uint64_t JSC::LazyClassStructure::prototype(JSC::LazyClassStructure *this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(_QWORD *);
  uint64_t *v6;
  uint64_t v7;
  _QWORD v8[3];

  v2 = *(_QWORD *)this;
  if ((*(_QWORD *)this & 1) != 0)
  {
    v5 = *(uint64_t (**)(_QWORD *))(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if (a2)
    {
      v6 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v6 = (uint64_t *)(a2 - 16);
      v7 = *v6;
    }
    else
    {
      v7 = -192;
    }
    v8[0] = v7;
    v8[1] = a2;
    v8[2] = this;
    v2 = v5(v8);
  }
  v3 = *(_QWORD *)(v2 + 48);
  if (v3 == 2)
    return 0;
  else
    return v3;
}

uint64_t JSC::ErrorInstance::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 75761695;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::ErrorInstance::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::AggregateErrorConstructor *JSC::AggregateErrorConstructor::create(JSC::AggregateErrorConstructor *this, JSC::VM *a2, JSC::Structure *a3, JSC::AggregateErrorPrototype *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::AggregateErrorConstructor *v11;
  JSC::JSObject *v12;

  v11 = (JSC::AggregateErrorConstructor *)JSC::allocateCell<JSC::AggregateErrorConstructor>(this, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  v12 = (JSC::JSObject *)JSC::AggregateErrorConstructor::AggregateErrorConstructor(v11, this, a2);
  JSC::AggregateErrorConstructor::finishCreation(v12, this, (uint64_t)a3);
  return v11;
}

uint64_t JSC::LazyClassStructure::constructor(JSC::LazyClassStructure *this, unint64_t a2)
{
  void (*v4)(_QWORD *);
  uint64_t *v5;
  uint64_t v6;
  _QWORD v7[3];

  if ((*(_QWORD *)this & 1) != 0)
  {
    v4 = *(void (**)(_QWORD *))(*(_QWORD *)this & 0xFFFFFFFFFFFFFFFCLL);
    if (a2)
    {
      v5 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v5 = (uint64_t *)(a2 - 16);
      v6 = *v5;
    }
    else
    {
      v6 = -192;
    }
    v7[0] = v6;
    v7[1] = a2;
    v7[2] = this;
    v4(v7);
  }
  return *((_QWORD *)this + 1);
}

void JSC::JSGlobalObject::init(uint64_t this, JSC::VM *a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  unint64_t StatusReg;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  Inspector::JSGlobalObjectInspectorController *casual;
  Inspector::JSGlobalObjectInspectorController *v28;
  WTF::AtomStringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Inspector::JSGlobalObjectInspectorController *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  unint64_t *v62;
  Inspector::RemoteControllableTarget *v63;
  Inspector::RemoteInspector *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unint64_t SlowCase;
  JSC::VM *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _DWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  WTF::AtomStringImpl *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  unint64_t v105;
  unint64_t v106;
  JSC::VM *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  JSC::VM *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  unint64_t v124;
  JSC::VM *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  uint64_t v133;
  unsigned int v134;
  unint64_t *v135;
  unint64_t v136;
  int v137;
  unint64_t v138;
  JSC::JSCell *v139;
  JSC::VM *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  int v149;
  unint64_t v150;
  JSC::JSCell *v151;
  JSC::VM *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  double v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  double v176;
  JSC::VM *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  double v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  JSC::VM *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  double v195;
  uint64_t v196;
  JSC::JSFunction *v197;
  unint64_t v198;
  unint64_t v199;
  JSC::VM *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  WTF::AtomStringImpl *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  double v219;
  WTF::StringImpl *v220;
  unint64_t v221;
  unint64_t v222;
  JSC::VM *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF::AtomStringImpl *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  WTF::AtomStringImpl *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  WTF::StringImpl *v255;
  unint64_t *v256;
  unint64_t v257;
  JSC::VM *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __n128 v265;
  unint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  double v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279;
  _BYTE *v280;
  size_t v281;
  uint64_t v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  _BYTE *v287;
  _BYTE *v288;
  size_t v289;
  JSC::VM *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  __n128 v298;
  unint64_t v299;
  unint64_t v300;
  int v301;
  uint64_t *v302;
  uint64_t v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  uint64_t v306;
  uint64_t v307;
  double v308;
  unint64_t v309;
  JSC::JSObject *v310;
  unsigned int *v311;
  int v312;
  int v313;
  unint64_t v314;
  const JSC::PropertyTable *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unsigned int v326;
  unsigned int v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  int v331;
  unint64_t v332;
  unint64_t v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  void *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  void *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  void *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  unint64_t v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  void *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  unint64_t v399;
  void *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  _QWORD *v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  WTF::AtomStringImpl *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  WTF::StringImpl *v419;
  uint64_t v420;
  JSC::VM *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  unint64_t v430;
  int v431;
  uint64_t *v432;
  uint64_t v433;
  WTF::StringImpl *v434;
  uint64_t v435;
  JSC::VM *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  unint64_t v444;
  unint64_t v445;
  int v446;
  uint64_t *v447;
  uint64_t v448;
  WTF::StringImpl *v449;
  uint64_t v450;
  JSC::VM *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  int v461;
  uint64_t *v462;
  uint64_t v463;
  WTF::StringImpl *v464;
  uint64_t v465;
  JSC::VM *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t v475;
  int v476;
  uint64_t *v477;
  uint64_t v478;
  WTF::StringImpl *v479;
  uint64_t v480;
  unsigned int v481;
  unint64_t v482;
  unint64_t v483;
  JSC::VM *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  unint64_t v492;
  JSC::VM *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  double v500;
  unint64_t v501;
  unint64_t v502;
  unint64_t v503;
  JSC::VM *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  double v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  double v519;
  unint64_t Structure;
  JSC::VM *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  double v528;
  unint64_t v529;
  unint64_t v530;
  JSC::VM *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  __n128 v538;
  unint64_t v539;
  int v540;
  JSC::VM *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  double v548;
  unint64_t v549;
  unint64_t v550;
  JSC::VM *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  double v558;
  unint64_t v559;
  unint64_t v560;
  unint64_t v561;
  JSC::VM *v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  double v569;
  unint64_t v570;
  unint64_t v571;
  JSC::VM *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  double v579;
  unint64_t v580;
  unint64_t v581;
  unint64_t v582;
  unsigned int v583;
  unint64_t v584;
  unint64_t v585;
  unint64_t v586;
  JSC::VM *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  double v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  JSC::VM *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  double v605;
  unint64_t v606;
  unint64_t v607;
  unint64_t v608;
  JSC::VM *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  double v616;
  unint64_t v617;
  unint64_t v618;
  JSC::VM *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  double v626;
  unint64_t v627;
  unint64_t v628;
  unint64_t v629;
  unsigned int v630;
  unint64_t v631;
  __int128 v632;
  __int128 v633;
  unint64_t v634;
  unint64_t v635;
  JSC::VM *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t *v643;
  unint64_t v644;
  int v645;
  unint64_t v646;
  JSC::VM *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  __n128 v654;
  unint64_t v655;
  JSC::VM *v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  double v663;
  unint64_t v664;
  unint64_t v665;
  JSC::VM *v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  double v673;
  unint64_t v674;
  unint64_t v675;
  JSC::VM *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  unint64_t v683;
  JSC::RegExpPrototype *v684;
  JSC::VM *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  double v692;
  unint64_t v693;
  unint64_t v694;
  uint64_t v695;
  double v696;
  int v697;
  uint64_t v698;
  unint64_t v699;
  unint64_t v700;
  unint64_t v701;
  unint64_t v702;
  unint64_t v703;
  unint64_t v704;
  JSC::JSGlobalObject *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  unint64_t *v710;
  unint64_t RegExpMatchesArrayWithIndicesStructure;
  uint64_t v712;
  double v713;
  int v714;
  uint64_t v715;
  unint64_t v716;
  unint64_t v717;
  JSC::VM *v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  unint64_t v724;
  unint64_t v725;
  JSC::VM *v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unint64_t v733;
  int v734;
  JSC::VM *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  double v742;
  unint64_t v743;
  unint64_t v744;
  JSC::VM *v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  unint64_t v752;
  int v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  double v757;
  float v758;
  JSC::VM *v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  _DWORD *v767;
  int *v768;
  uint64_t v769;
  uint64_t v770;
  unint64_t *v771;
  int *v772;
  int *v773;
  int *v774;
  int v775;
  unint64_t v776;
  unint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  __n128 v781;
  uint64_t v782;
  unsigned int v783;
  JSC::VM *v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  double v791;
  unint64_t v792;
  unint64_t v793;
  JSC::VM *v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  unint64_t v801;
  int v802;
  unint64_t v803;
  JSC::VM *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  unint64_t v811;
  JSC::VM *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  double v819;
  unint64_t v820;
  unint64_t v821;
  JSC::VM *v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  unint64_t v829;
  int v830;
  unint64_t v831;
  JSC::VM *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  unint64_t v839;
  JSC::VM *v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  double v847;
  unint64_t v848;
  unint64_t v849;
  JSC::VM *v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  unint64_t v857;
  int v858;
  JSC::VM *v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  double v866;
  unint64_t v867;
  unint64_t v868;
  JSC::VM *v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  double v876;
  unint64_t v877;
  unint64_t v878;
  JSC::VM *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  int v887;
  JSC::VM *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  double v895;
  unint64_t v896;
  unint64_t v897;
  JSC::VM *v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  double v905;
  unint64_t v906;
  unint64_t v907;
  JSC::VM *v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  unint64_t v915;
  int v916;
  JSC::VM *v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  double v924;
  unint64_t v925;
  unint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  double v932;
  float v933;
  JSC::VM *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  _DWORD *v942;
  int *v943;
  uint64_t v944;
  uint64_t v945;
  unint64_t *v946;
  int *v947;
  int *v948;
  int *v949;
  int v950;
  unint64_t v951;
  unint64_t v952;
  JSC::VM *v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  double v960;
  uint64_t v961;
  unsigned int v962;
  uint64_t v963;
  unint64_t v964;
  unint64_t v965;
  JSC::VM *v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  unint64_t v973;
  int v974;
  JSC::VM *v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  double v982;
  unint64_t v983;
  unint64_t v984;
  JSC::VM *v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  double v992;
  unint64_t v993;
  unint64_t v994;
  JSC::Structure *v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  __n128 v1000;
  JSC::VM *v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  unint64_t v1008;
  double v1009;
  unint64_t v1010;
  unint64_t v1011;
  JSC::VM *v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  double v1019;
  unint64_t v1020;
  unint64_t v1021;
  JSC::VM *v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  unint64_t v1029;
  int v1030;
  unint64_t v1031;
  JSC::VM *v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  unint64_t v1039;
  JSC::VM *v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  double v1047;
  unint64_t v1048;
  unint64_t v1049;
  JSC::VM *v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  uint64_t v1056;
  double v1057;
  unint64_t v1058;
  unint64_t v1059;
  JSC::VM *v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  unint64_t v1067;
  JSC::SymbolPrototype *v1068;
  JSC::VM *v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  double v1076;
  unint64_t v1077;
  unint64_t v1078;
  JSC::VM *v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  double v1086;
  unint64_t v1087;
  unint64_t v1088;
  JSC::VM *v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  unint64_t v1096;
  int v1097;
  JSC::VM *v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  double v1105;
  unint64_t v1106;
  unint64_t v1107;
  JSC::VM *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  double v1115;
  unint64_t v1116;
  unint64_t v1117;
  JSC::VM *v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  unint64_t v1125;
  int v1126;
  JSC::VM *v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  double v1134;
  unint64_t v1135;
  unint64_t v1136;
  JSC::VM *v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  double v1144;
  unint64_t v1145;
  unint64_t v1146;
  JSC::VM *v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  __n128 v1154;
  unint64_t v1155;
  int v1156;
  JSC::VM *v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  double v1164;
  unint64_t v1165;
  unint64_t v1166;
  JSC::VM *v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  double v1174;
  unint64_t v1175;
  unint64_t v1176;
  JSC::VM *v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  unint64_t v1184;
  int v1185;
  JSC::VM *v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  double v1193;
  unint64_t v1194;
  unint64_t v1195;
  JSC::VM *v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  double v1203;
  unint64_t v1204;
  unint64_t v1205;
  JSC::VM *v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  unint64_t v1214;
  JSC::JSObject *v1215;
  uint64_t v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  WTF::AtomStringImpl *v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  uint64_t v1228;
  double v1229;
  WTF::StringImpl *v1230;
  uint64_t v1231;
  unint64_t v1232;
  unint64_t v1233;
  JSC::VM *v1234;
  uint64_t v1235;
  uint64_t v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  unint64_t v1242;
  unint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  __n128 v1250;
  JSC::VM *v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  uint64_t v1257;
  double v1258;
  unint64_t v1259;
  unint64_t v1260;
  JSC::VM *v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  uint64_t v1266;
  uint64_t v1267;
  uint64_t v1268;
  unint64_t v1269;
  JSC::JSObject *v1270;
  uint64_t v1271;
  uint64_t v1272;
  uint64_t v1273;
  uint64_t v1274;
  JSC::VM *v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  uint64_t v1281;
  double v1282;
  uint64_t v1283;
  unint64_t v1284;
  unint64_t v1285;
  JSC::VM *v1286;
  uint64_t v1287;
  uint64_t v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  uint64_t v1292;
  uint64_t v1293;
  unint64_t v1294;
  unint64_t v1295;
  JSC::JSObject *v1296;
  unint64_t v1297;
  uint64_t v1298;
  uint64_t v1299;
  uint64_t v1300;
  uint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  __n128 v1304;
  JSC::VM *v1305;
  uint64_t v1306;
  uint64_t v1307;
  uint64_t v1308;
  uint64_t v1309;
  uint64_t v1310;
  uint64_t v1311;
  double v1312;
  unint64_t v1313;
  unint64_t v1314;
  JSC::VM *v1315;
  uint64_t v1316;
  uint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  uint64_t v1320;
  uint64_t v1321;
  _DWORD *v1322;
  unint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  JSC::VM *v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  JSC::JSObject *v1336;
  uint64_t v1337;
  unsigned int v1338;
  unsigned int v1339;
  uint64_t v1340;
  double v1341;
  unint64_t v1342;
  unint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  uint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  __n128 v1352;
  JSC::VM *v1353;
  uint64_t v1354;
  uint64_t v1355;
  uint64_t v1356;
  uint64_t v1357;
  uint64_t v1358;
  uint64_t v1359;
  double v1360;
  unint64_t v1361;
  unint64_t v1362;
  uint64_t v1363;
  JSC::JSGlobalObject *v1364;
  uint64_t v1365;
  uint64_t v1366;
  uint64_t v1367;
  double v1368;
  float v1369;
  JSC::VM *v1370;
  uint64_t v1371;
  uint64_t v1372;
  uint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  uint64_t v1376;
  uint64_t v1377;
  _DWORD *v1378;
  unint64_t v1379;
  unint64_t v1380;
  JSC::JSPromiseConstructor *v1381;
  JSC::JSCell *v1382;
  uint64_t v1383;
  uint64_t v1384;
  uint64_t v1385;
  uint64_t v1386;
  uint64_t v1387;
  __n128 v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  __n128 v1392;
  JSC::VM *v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  uint64_t v1397;
  uint64_t v1398;
  uint64_t v1399;
  double v1400;
  unint64_t v1401;
  unint64_t v1402;
  JSC::VM *v1403;
  uint64_t v1404;
  uint64_t v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  uint64_t v1410;
  unint64_t v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  WTF::AtomStringImpl *v1416;
  uint64_t v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  uint64_t v1422;
  __n128 v1423;
  WTF::StringImpl *v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  __n128 v1428;
  JSC::VM *v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  double v1436;
  unint64_t v1437;
  unint64_t v1438;
  JSC::VM *v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  unint64_t v1447;
  JSC::JSObject *v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  uint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  __n128 v1457;
  JSC::VM *v1458;
  uint64_t v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  uint64_t v1463;
  uint64_t v1464;
  double v1465;
  unint64_t v1466;
  unint64_t v1467;
  JSC::VM *v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  unint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  WTF::AtomStringImpl *v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  uint64_t v1487;
  __n128 v1488;
  WTF::StringImpl *v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  __n128 v1493;
  JSC::VM *v1494;
  uint64_t v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  double v1501;
  unint64_t v1502;
  unint64_t v1503;
  JSC::VM *v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  uint64_t v1508;
  uint64_t v1509;
  uint64_t v1510;
  uint64_t v1511;
  unint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  uint64_t v1516;
  WTF::AtomStringImpl *v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  uint64_t v1522;
  uint64_t v1523;
  __n128 v1524;
  WTF::StringImpl *v1525;
  uint64_t v1526;
  uint64_t v1527;
  uint64_t v1528;
  __n128 v1529;
  JSC::VM *v1530;
  uint64_t v1531;
  uint64_t v1532;
  uint64_t v1533;
  uint64_t v1534;
  uint64_t v1535;
  uint64_t v1536;
  double v1537;
  unint64_t v1538;
  unint64_t v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  uint64_t v1543;
  uint64_t v1544;
  double v1545;
  float v1546;
  JSC::VM *v1547;
  uint64_t v1548;
  uint64_t v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  uint64_t v1553;
  uint64_t v1554;
  _DWORD *v1555;
  unint64_t v1556;
  JSC::JSCell *v1557;
  uint64_t v1558;
  uint64_t v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  __n128 v1563;
  uint64_t v1564;
  uint64_t v1565;
  uint64_t v1566;
  __n128 v1567;
  JSC::VM *v1568;
  uint64_t v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  uint64_t v1573;
  uint64_t v1574;
  double v1575;
  uint64_t v1576;
  unsigned int v1577;
  unsigned int v1578;
  uint64_t v1579;
  unsigned int v1580;
  unint64_t v1581;
  unint64_t v1582;
  JSC::VM *v1583;
  uint64_t v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  uint64_t v1588;
  uint64_t v1589;
  unint64_t v1590;
  int v1591;
  unint64_t v1592;
  JSC::VM *v1593;
  uint64_t v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  uint64_t v1598;
  uint64_t v1599;
  unint64_t v1600;
  JSC::VM *v1601;
  uint64_t v1602;
  uint64_t v1603;
  uint64_t v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  double v1608;
  unint64_t v1609;
  JSC::VM *v1610;
  uint64_t v1611;
  uint64_t v1612;
  uint64_t v1613;
  uint64_t v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  unint64_t v1618;
  uint64_t v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  WTF::AtomStringImpl *v1623;
  uint64_t v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  uint64_t v1628;
  uint64_t v1629;
  __n128 v1630;
  WTF::StringImpl *v1631;
  uint64_t v1632;
  uint64_t v1633;
  uint64_t v1634;
  __n128 v1635;
  JSC::VM *v1636;
  uint64_t v1637;
  uint64_t v1638;
  uint64_t v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  double v1643;
  unint64_t v1644;
  unint64_t v1645;
  unint64_t v1646;
  uint64_t v1647;
  uint64_t v1648;
  uint64_t v1649;
  __n128 v1650;
  uint64_t v1651;
  uint64_t v1652;
  uint64_t v1653;
  __n128 v1654;
  JSC::VM *v1655;
  uint64_t v1656;
  uint64_t v1657;
  uint64_t v1658;
  uint64_t v1659;
  uint64_t v1660;
  uint64_t v1661;
  double v1662;
  unint64_t v1663;
  unint64_t v1664;
  unint64_t v1665;
  JSC::VM *v1666;
  uint64_t v1667;
  uint64_t v1668;
  uint64_t v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  double v1673;
  unint64_t v1674;
  unint64_t v1675;
  JSC::VM *v1676;
  uint64_t v1677;
  uint64_t v1678;
  uint64_t v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  unint64_t v1683;
  int v1684;
  unint64_t v1685;
  JSC::VM *v1686;
  uint64_t v1687;
  uint64_t v1688;
  uint64_t v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  unint64_t v1693;
  JSC::VM *v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  uint64_t v1698;
  uint64_t v1699;
  uint64_t v1700;
  double v1701;
  unint64_t v1702;
  JSC::VM *v1703;
  uint64_t v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  uint64_t v1708;
  uint64_t v1709;
  uint64_t v1710;
  unint64_t v1711;
  uint64_t v1712;
  uint64_t v1713;
  uint64_t v1714;
  uint64_t v1715;
  WTF::AtomStringImpl *v1716;
  uint64_t v1717;
  uint64_t v1718;
  uint64_t v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  __n128 v1723;
  WTF::StringImpl *v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  __n128 v1728;
  JSC::VM *v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  uint64_t v1733;
  uint64_t v1734;
  uint64_t v1735;
  double v1736;
  unint64_t v1737;
  unint64_t v1738;
  unint64_t v1739;
  JSC::VM *v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  double v1747;
  unint64_t v1748;
  unint64_t v1749;
  JSC::VM *v1750;
  uint64_t v1751;
  uint64_t v1752;
  uint64_t v1753;
  uint64_t v1754;
  uint64_t v1755;
  uint64_t v1756;
  unint64_t v1757;
  int v1758;
  unint64_t v1759;
  JSC::VM *v1760;
  uint64_t v1761;
  uint64_t v1762;
  uint64_t v1763;
  uint64_t v1764;
  uint64_t v1765;
  uint64_t v1766;
  unint64_t v1767;
  JSC::VM *v1768;
  uint64_t v1769;
  uint64_t v1770;
  uint64_t v1771;
  uint64_t v1772;
  uint64_t v1773;
  uint64_t v1774;
  double v1775;
  unint64_t v1776;
  JSC::VM *v1777;
  uint64_t v1778;
  uint64_t v1779;
  uint64_t v1780;
  uint64_t v1781;
  uint64_t v1782;
  uint64_t v1783;
  uint64_t v1784;
  unint64_t v1785;
  uint64_t v1786;
  uint64_t v1787;
  uint64_t v1788;
  uint64_t v1789;
  WTF::AtomStringImpl *v1790;
  uint64_t v1791;
  uint64_t v1792;
  uint64_t v1793;
  uint64_t v1794;
  uint64_t v1795;
  uint64_t v1796;
  __n128 v1797;
  WTF::StringImpl *v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  __n128 v1802;
  JSC::VM *v1803;
  uint64_t v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  double v1810;
  unint64_t v1811;
  unint64_t v1812;
  unint64_t v1813;
  uint64_t v1814;
  uint64_t v1815;
  uint64_t v1816;
  __n128 v1817;
  uint64_t v1818;
  uint64_t v1819;
  uint64_t v1820;
  __n128 v1821;
  JSC::VM *v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  uint64_t v1826;
  uint64_t v1827;
  uint64_t v1828;
  double v1829;
  unint64_t v1830;
  unint64_t v1831;
  unint64_t v1832;
  uint64_t v1833;
  uint64_t v1834;
  uint64_t v1835;
  __n128 v1836;
  uint64_t v1837;
  uint64_t v1838;
  uint64_t v1839;
  __n128 v1840;
  uint64_t v1841;
  uint64_t v1842;
  uint64_t v1843;
  __n128 v1844;
  uint64_t v1845;
  uint64_t v1846;
  uint64_t v1847;
  __n128 v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  __n128 v1852;
  uint64_t v1853;
  uint64_t v1854;
  uint64_t v1855;
  __n128 v1856;
  uint64_t v1857;
  uint64_t v1858;
  uint64_t v1859;
  __n128 v1860;
  uint64_t v1861;
  uint64_t v1862;
  uint64_t v1863;
  __n128 v1864;
  uint64_t v1865;
  uint64_t v1866;
  uint64_t v1867;
  __n128 v1868;
  uint64_t v1869;
  uint64_t v1870;
  uint64_t v1871;
  __n128 v1872;
  uint64_t v1873;
  uint64_t v1874;
  uint64_t v1875;
  __n128 v1876;
  uint64_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  __n128 v1880;
  uint64_t v1881;
  uint64_t v1882;
  uint64_t v1883;
  __n128 v1884;
  uint64_t v1885;
  uint64_t v1886;
  uint64_t v1887;
  __n128 v1888;
  uint64_t v1889;
  uint64_t v1890;
  uint64_t v1891;
  __n128 v1892;
  uint64_t v1893;
  uint64_t v1894;
  uint64_t v1895;
  uint64_t v1896;
  uint64_t v1897;
  double v1898;
  uint64_t v1899;
  JSC::Structure *v1900;
  uint64_t v1901;
  uint64_t v1902;
  uint64_t v1903;
  uint64_t v1904;
  unint64_t v1905;
  uint64_t v1906;
  uint64_t v1907;
  uint64_t v1908;
  __n128 v1909;
  JSC::JSGlobalObject *v1910;
  const JSC::Identifier *v1911;
  uint64_t v1912;
  unint64_t v1913;
  uint64_t v1914;
  uint64_t v1915;
  __n128 v1916;
  uint64_t GetterById;
  const JSC::Identifier *v1918;
  uint64_t v1919;
  unint64_t v1920;
  uint64_t v1921;
  uint64_t v1922;
  int8x16_t v1923;
  uint64_t v1924;
  uint64_t v1925;
  const JSC::Identifier *v1926;
  uint64_t v1927;
  unint64_t v1928;
  uint64_t v1929;
  uint64_t v1930;
  int8x16_t v1931;
  uint64_t v1932;
  uint64_t v1933;
  const JSC::Identifier *v1934;
  uint64_t v1935;
  unint64_t v1936;
  uint64_t v1937;
  uint64_t v1938;
  int8x16_t v1939;
  uint64_t v1940;
  uint64_t v1941;
  const JSC::Identifier *v1942;
  uint64_t v1943;
  unint64_t v1944;
  uint64_t v1945;
  uint64_t v1946;
  int8x16_t v1947;
  uint64_t v1948;
  uint64_t v1949;
  const JSC::Identifier *v1950;
  uint64_t v1951;
  unint64_t v1952;
  uint64_t v1953;
  uint64_t v1954;
  int8x16_t v1955;
  uint64_t v1956;
  uint64_t v1957;
  const JSC::Identifier *v1958;
  uint64_t v1959;
  unint64_t v1960;
  uint64_t v1961;
  uint64_t v1962;
  int8x16_t v1963;
  uint64_t v1964;
  uint64_t v1965;
  const JSC::Identifier *v1966;
  uint64_t v1967;
  unint64_t v1968;
  uint64_t v1969;
  uint64_t v1970;
  int8x16_t v1971;
  uint64_t v1972;
  uint64_t v1973;
  const JSC::Identifier *v1974;
  uint64_t v1975;
  unint64_t v1976;
  uint64_t v1977;
  uint64_t v1978;
  int8x16_t v1979;
  uint64_t v1980;
  uint64_t v1981;
  const JSC::Identifier *v1982;
  uint64_t v1983;
  unint64_t v1984;
  uint64_t v1985;
  uint64_t v1986;
  int8x16_t v1987;
  uint64_t v1988;
  uint64_t v1989;
  const JSC::PropertyTable *v1990;
  uint64_t v1991;
  unint64_t v1992;
  uint64_t v1993;
  uint64_t v1994;
  uint64_t v1995;
  unint64_t v1996;
  uint64_t v1997;
  uint64_t v1998;
  uint64_t v1999;
  unint64_t v2000;
  uint64_t v2001;
  unsigned int v2002;
  unsigned int v2003;
  uint64_t v2004;
  int v2005;
  uint64_t v2006;
  int v2007;
  unint64_t v2008;
  uint64_t v2009;
  int *v2010;
  int *v2011;
  int *v2012;
  int *v2013;
  unint64_t v2014;
  void *v2015;
  uint64_t v2016;
  uint64_t v2017;
  uint64_t v2018;
  uint64_t v2019;
  uint64_t v2020;
  uint64_t v2021;
  unint64_t v2022;
  void *v2023;
  uint64_t v2024;
  uint64_t v2025;
  uint64_t v2026;
  uint64_t v2027;
  uint64_t v2028;
  uint64_t v2029;
  unint64_t v2030;
  void *v2031;
  uint64_t v2032;
  uint64_t v2033;
  uint64_t v2034;
  uint64_t v2035;
  uint64_t v2036;
  uint64_t v2037;
  unint64_t v2038;
  void *v2039;
  uint64_t v2040;
  uint64_t v2041;
  uint64_t v2042;
  uint64_t v2043;
  uint64_t v2044;
  uint64_t v2045;
  unint64_t v2046;
  void *v2047;
  uint64_t v2048;
  uint64_t v2049;
  uint64_t v2050;
  uint64_t v2051;
  uint64_t v2052;
  uint64_t v2053;
  unint64_t v2054;
  void *v2055;
  uint64_t v2056;
  uint64_t v2057;
  uint64_t v2058;
  uint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  unint64_t v2062;
  void *v2063;
  uint64_t v2064;
  uint64_t v2065;
  uint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  uint64_t v2069;
  unint64_t v2070;
  void *v2071;
  uint64_t v2072;
  uint64_t v2073;
  uint64_t v2074;
  uint64_t v2075;
  uint64_t v2076;
  uint64_t v2077;
  unint64_t v2078;
  void *v2079;
  uint64_t v2080;
  uint64_t v2081;
  uint64_t v2082;
  uint64_t v2083;
  uint64_t v2084;
  uint64_t v2085;
  unint64_t v2086;
  void *v2087;
  uint64_t v2088;
  uint64_t v2089;
  uint64_t v2090;
  uint64_t v2091;
  uint64_t v2092;
  uint64_t v2093;
  unint64_t v2094;
  void *v2095;
  uint64_t v2096;
  uint64_t v2097;
  uint64_t v2098;
  uint64_t v2099;
  uint64_t v2100;
  uint64_t v2101;
  unint64_t v2102;
  void *v2103;
  uint64_t v2104;
  uint64_t v2105;
  uint64_t v2106;
  uint64_t v2107;
  uint64_t v2108;
  uint64_t v2109;
  unint64_t v2110;
  uint64_t v2111;
  unint64_t v2112;
  uint64_t v2113;
  uint64_t v2114;
  uint64_t v2115;
  unint64_t v2116;
  uint64_t v2117;
  unsigned int v2118;
  unsigned int v2119;
  uint64_t v2120;
  int v2121;
  uint64_t v2122;
  int v2123;
  unint64_t v2124;
  uint64_t v2125;
  unint64_t v2126;
  int v2127;
  unsigned int v2128;
  int v2129;
  unint64_t v2130;
  int v2131;
  uint64_t v2132;
  int v2133;
  unsigned int v2134;
  int v2135;
  unint64_t v2136;
  int v2137;
  uint64_t v2138;
  int v2139;
  unsigned int v2140;
  int v2141;
  unint64_t v2142;
  int v2143;
  uint64_t v2144;
  uint64_t v2145;
  uint64_t v2146;
  uint64_t v2147;
  uint64_t v2148;
  uint64_t v2149;
  unint64_t v2150;
  unint64_t v2151;
  unint64_t v2152;
  unint64_t v2153;
  unint64_t v2154;
  unint64_t v2155;
  unint64_t v2156;
  unint64_t v2157;
  unint64_t v2158;
  unint64_t v2159;
  uint64_t v2160;
  unint64_t v2161;
  unint64_t v2162;
  unint64_t v2163;
  unint64_t v2164;
  unint64_t v2165;
  unint64_t v2166;
  unint64_t v2167;
  unint64_t v2168;
  unint64_t v2169;
  unint64_t v2170;
  unint64_t v2171;
  unint64_t v2172;
  unint64_t v2173;
  unint64_t v2174;
  unint64_t v2175;
  unint64_t v2176;
  unint64_t v2177;
  unint64_t v2178;
  unint64_t v2179;
  unint64_t v2180;
  unint64_t v2181;
  unint64_t v2182;
  unint64_t v2183;
  unint64_t v2184;
  unint64_t v2185;
  unint64_t v2186;
  unint64_t v2187;
  unint64_t v2188;
  unint64_t v2189;
  unint64_t v2190;
  unint64_t v2191;
  unint64_t v2192;
  unint64_t v2193;
  unint64_t v2194;
  unint64_t v2195;
  unint64_t v2196;
  unint64_t v2197;
  unint64_t v2198;
  unint64_t v2199;
  unint64_t v2200;
  unint64_t v2201;
  unint64_t v2202;
  unint64_t v2203;
  unint64_t v2204;
  unint64_t v2205;
  unint64_t v2206;
  unint64_t v2207;
  unint64_t v2208;
  unint64_t v2209;
  unint64_t v2210;
  unint64_t v2211;
  unint64_t v2212;
  unint64_t v2213;
  unint64_t v2214;
  unint64_t v2215;
  unint64_t v2216;
  unint64_t v2217;
  unint64_t v2218;
  unint64_t v2219;
  unint64_t v2220;
  unint64_t v2221;
  unint64_t v2222;
  unint64_t v2223;
  unint64_t v2224;
  unint64_t v2225;
  unint64_t v2226;
  unint64_t v2227;
  unint64_t v2228;
  unint64_t v2229;
  unint64_t v2230;
  unint64_t v2231;
  unint64_t v2232;
  unint64_t v2233;
  unint64_t v2234;
  unint64_t v2235;
  unint64_t v2236;
  unint64_t v2237;
  unint64_t v2238;
  unint64_t v2239;
  unint64_t v2240;
  unint64_t v2241;
  unint64_t v2242;
  unint64_t v2243;
  unint64_t v2244;
  unint64_t v2245;
  unint64_t v2246;
  unint64_t v2247;
  unint64_t v2248;
  unint64_t v2249;
  unint64_t v2250;
  unint64_t v2251;
  unint64_t v2252;
  unint64_t v2253;
  unint64_t v2254;
  unint64_t v2255;
  unint64_t v2256;
  unint64_t v2257;
  unint64_t v2258;
  unint64_t v2259;
  unint64_t v2260;
  unint64_t v2261;
  unint64_t v2262;
  unint64_t v2263;
  unint64_t v2264;
  unint64_t v2265;
  unint64_t v2266;
  unint64_t v2267;
  unint64_t v2268;
  unint64_t v2269;
  unint64_t v2270;
  unint64_t v2271;
  unint64_t v2272;
  unint64_t v2273;
  unint64_t v2274;
  unint64_t v2275;
  unint64_t v2276;
  unint64_t v2277;
  unint64_t v2278;
  unint64_t v2279;
  unint64_t v2280;
  unint64_t v2281;
  unint64_t v2282;
  unsigned int *v2283;
  unsigned int v2284;
  unsigned int v2285;
  unsigned int v2286;
  unint64_t v2287;
  uint64_t v2288;
  uint64_t v2289;
  uint64_t v2290;
  uint64_t v2291;
  __n128 v2292;
  JSC::VM *v2293;
  JSC::Structure *v2294;
  uint64_t v2295;
  uint64_t v2296;
  uint64_t v2297;
  uint64_t v2298;
  uint64_t v2299;
  unint64_t v2300;
  uint64_t v2301;
  uint64_t v2302;
  uint64_t v2303;
  __n128 v2304;
  unint64_t v2305;
  uint64_t v2306;
  uint64_t v2307;
  uint64_t v2308;
  uint64_t v2309;
  __n128 v2310;
  unsigned int v2311;
  uint64_t v2312;
  unint64_t *v2313;
  uint64_t v2314;
  unint64_t v2315;
  unint64_t v2316;
  unsigned int v2317;
  uint64_t v2318;
  unint64_t *v2319;
  uint64_t v2320;
  unint64_t v2321;
  unint64_t v2322;
  unsigned int v2323;
  uint64_t v2324;
  unint64_t *v2325;
  uint64_t v2326;
  unint64_t v2327;
  unint64_t v2328;
  char *v2329;
  char *v2330;
  uint64_t v2331;
  uint64_t v2332;
  uint64_t v2333;
  uint64_t v2334;
  unint64_t v2335;
  uint64_t v2336;
  uint64_t v2337;
  uint64_t v2338;
  unint64_t v2339;
  uint64_t v2340;
  unsigned int v2341;
  unsigned int v2342;
  uint64_t v2343;
  int v2344;
  uint64_t v2345;
  int v2346;
  unint64_t v2347;
  uint64_t v2348;
  uint64_t v2349;
  uint64_t v2350;
  uint64_t v2351;
  uint64_t v2352;
  uint64_t v2353;
  uint64_t v2354;
  unint64_t v2355;
  int v2356;
  unsigned int v2357;
  int v2358;
  unint64_t v2359;
  int v2360;
  uint64_t v2361;
  uint64_t v2362;
  uint64_t v2363;
  uint64_t v2364;
  uint64_t v2365;
  uint64_t v2366;
  uint64_t v2367;
  uint64_t v2368;
  uint64_t v2369;
  uint64_t v2370;
  uint64_t v2371;
  uint64_t v2372;
  uint64_t v2373;
  uint64_t v2374;
  uint64_t v2375;
  uint64_t v2376;
  uint64_t v2377;
  uint64_t v2378;
  uint64_t v2379;
  uint64_t v2380;
  uint64_t v2381;
  uint64_t v2382;
  uint64_t v2383;
  uint64_t v2384;
  uint64_t v2385;
  uint64_t v2386;
  uint64_t v2387;
  uint64_t v2388;
  uint64_t v2389;
  uint64_t v2390;
  uint64_t v2391;
  uint64_t v2392;
  uint64_t v2393;
  uint64_t v2394;
  uint64_t v2395;
  uint64_t v2396;
  uint64_t v2397;
  uint64_t v2398;
  uint64_t v2399;
  uint64_t v2400;
  uint64_t v2401;
  uint64_t v2402;
  uint64_t v2403;
  uint64_t v2404;
  uint64_t v2405;
  uint64_t v2406;
  uint64_t v2407;
  uint64_t v2408;
  uint64_t v2409;
  uint64_t v2410;
  uint64_t v2411;
  uint64_t v2412;
  uint64_t v2413;
  uint64_t v2414;
  uint64_t v2415;
  uint64_t v2416;
  uint64_t v2417;
  uint64_t v2418;
  uint64_t v2419;
  uint64_t v2420;
  uint64_t v2421;
  uint64_t v2422;
  uint64_t v2423;
  uint64_t v2424;
  uint64_t v2425;
  uint64_t v2426;
  uint64_t v2427;
  uint64_t v2428;
  uint64_t v2429;
  uint64_t v2430;
  uint64_t v2431;
  uint64_t v2432;
  uint64_t v2433;
  uint64_t v2434;
  uint64_t v2435;
  uint64_t v2436;
  uint64_t v2437;
  uint64_t v2438;
  uint64_t v2439;
  uint64_t v2440;
  uint64_t v2441;
  uint64_t v2442;
  uint64_t v2443;
  uint64_t v2444;
  uint64_t v2445;
  uint64_t v2446;
  uint64_t v2447;
  uint64_t v2448;
  uint64_t v2449;
  uint64_t v2450;
  uint64_t v2451;
  uint64_t v2452;
  uint64_t v2453;
  uint64_t v2454;
  uint64_t v2455;
  uint64_t v2456;
  uint64_t v2457;
  uint64_t v2458;
  uint64_t v2459;
  uint64_t v2460;
  uint64_t v2461;
  uint64_t v2462;
  uint64_t v2463;
  uint64_t v2464;
  uint64_t v2465;
  uint64_t v2466;
  uint64_t v2467;
  uint64_t v2468;
  uint64_t v2469;
  uint64_t v2470;
  uint64_t v2471;
  uint64_t v2472;
  uint64_t v2473;
  uint64_t v2474;
  uint64_t v2475;
  uint64_t v2476;
  uint64_t v2477;
  uint64_t v2478;
  uint64_t v2479;
  uint64_t v2480;
  uint64_t v2481;
  uint64_t v2482;
  uint64_t v2483;
  uint64_t v2484;
  uint64_t v2485;
  uint64_t v2486;
  uint64_t v2487;
  uint64_t v2488;
  uint64_t v2489;
  uint64_t v2490;
  uint64_t v2491;
  uint64_t v2492;
  uint64_t v2493;
  uint64_t v2494;
  uint64_t v2495;
  uint64_t v2496;
  uint64_t v2497;
  uint64_t v2498;
  uint64_t v2499;
  uint64_t v2500;
  uint64_t v2501;
  uint64_t v2502;
  uint64_t v2503;
  uint64_t v2504;
  uint64_t v2505;
  uint64_t v2506;
  uint64_t v2507;
  uint64_t v2508;
  uint64_t v2509;
  uint64_t v2510;
  uint64_t v2511;
  uint64_t v2512;
  uint64_t v2513;
  uint64_t v2514;
  uint64_t v2515;
  uint64_t v2516;
  uint64_t v2517;
  uint64_t v2518;
  uint64_t v2519;
  uint64_t v2520;
  uint64_t v2521;
  uint64_t v2522;
  uint64_t v2523;
  uint64_t v2524;
  uint64_t v2525;
  uint64_t v2526;
  uint64_t v2527;
  uint64_t v2528;
  uint64_t v2529;
  uint64_t v2530;
  uint64_t v2531;
  uint64_t v2532;
  uint64_t v2533;
  uint64_t v2534;
  uint64_t v2535;
  uint64_t v2536;
  uint64_t v2537;
  uint64_t v2538;
  uint64_t v2539;
  uint64_t v2540;
  uint64_t v2541;
  uint64_t v2542;
  uint64_t v2543;
  uint64_t v2544;
  uint64_t v2545;
  uint64_t v2546;
  uint64_t v2547;
  uint64_t v2548;
  uint64_t v2549;
  uint64_t v2550;
  uint64_t v2551;
  uint64_t v2552;
  uint64_t v2553;
  uint64_t v2554;
  uint64_t v2555;
  uint64_t v2556;
  uint64_t v2557;
  uint64_t v2558;
  uint64_t v2559;
  uint64_t v2560;
  uint64_t v2561;
  uint64_t v2562;
  uint64_t v2563;
  uint64_t v2564;
  uint64_t v2565;
  uint64_t v2566;
  uint64_t v2567;
  uint64_t v2568;
  uint64_t v2569;
  uint64_t v2570;
  uint64_t v2571;
  uint64_t v2572;
  uint64_t v2573;
  uint64_t v2574;
  uint64_t v2575;
  uint64_t v2576;
  uint64_t v2577;
  uint64_t v2578;
  uint64_t v2579;
  uint64_t v2580;
  uint64_t v2581;
  uint64_t v2582;
  uint64_t v2583;
  uint64_t v2584;
  uint64_t v2585;
  uint64_t v2586;
  uint64_t v2587;
  uint64_t v2588;
  uint64_t v2589;
  uint64_t v2590;
  uint64_t v2591;
  uint64_t v2592;
  uint64_t v2593;
  uint64_t v2594;
  uint64_t v2595;
  uint64_t v2596;
  uint64_t v2597;
  uint64_t v2598;
  uint64_t v2599;
  uint64_t v2600;
  uint64_t v2601;
  uint64_t v2602;
  uint64_t v2603;
  uint64_t v2604;
  uint64_t v2605;
  uint64_t v2606;
  uint64_t v2607;
  uint64_t v2608;
  uint64_t v2609;
  uint64_t v2610;
  uint64_t v2611;
  uint64_t v2612;
  uint64_t v2613;
  uint64_t v2614;
  uint64_t v2615;
  uint64_t v2616;
  uint64_t v2617;
  uint64_t v2618;
  uint64_t v2619;
  uint64_t v2620;
  uint64_t v2621;
  uint64_t v2622;
  uint64_t v2623;
  uint64_t v2624;
  uint64_t v2625;
  uint64_t v2626;
  uint64_t v2627;
  uint64_t v2628;
  uint64_t v2629;
  uint64_t v2630;
  uint64_t v2631;
  uint64_t v2632;
  uint64_t v2633;
  uint64_t v2634;
  uint64_t v2635;
  uint64_t v2636;
  uint64_t v2637;
  uint64_t v2638;
  uint64_t v2639;
  uint64_t v2640;
  uint64_t v2641;
  uint64_t v2642;
  uint64_t v2643;
  uint64_t v2644;
  uint64_t v2645;
  uint64_t v2646;
  uint64_t v2647;
  uint64_t v2648;
  uint64_t v2649;
  uint64_t v2650;
  uint64_t v2651;
  uint64_t v2652;
  uint64_t v2653;
  uint64_t v2654;
  uint64_t v2655;
  uint64_t v2656;
  uint64_t v2657;
  uint64_t v2658;
  uint64_t v2659;
  uint64_t v2660;
  uint64_t v2661;
  uint64_t v2662;
  uint64_t v2663;
  uint64_t v2664;
  uint64_t v2665;
  uint64_t v2666;
  uint64_t v2667;
  uint64_t v2668;
  uint64_t v2669;
  uint64_t v2670;
  uint64_t v2671;
  uint64_t v2672;
  uint64_t v2673;
  uint64_t v2674;
  uint64_t v2675;
  uint64_t v2676;
  uint64_t v2677;
  uint64_t v2678;
  uint64_t v2679;
  uint64_t v2680;
  uint64_t v2681;
  uint64_t v2682;
  uint64_t v2683;
  uint64_t v2684;
  uint64_t v2685;
  uint64_t v2686;
  uint64_t v2687;
  uint64_t v2688;
  uint64_t v2689;
  uint64_t v2690;
  uint64_t v2691;
  uint64_t v2692;
  uint64_t v2693;
  uint64_t v2694;
  uint64_t v2695;
  uint64_t v2696;
  uint64_t v2697;
  uint64_t v2698;
  uint64_t v2699;
  uint64_t v2700;
  uint64_t v2701;
  uint64_t v2702;
  uint64_t v2703;
  uint64_t v2704;
  uint64_t v2705;
  uint64_t v2706;
  uint64_t v2707;
  uint64_t v2708;
  uint64_t v2709;
  uint64_t v2710;
  uint64_t v2711;
  uint64_t v2712;
  uint64_t v2713;
  uint64_t v2714;
  uint64_t v2715;
  uint64_t v2716;
  uint64_t v2717;
  uint64_t v2718;
  uint64_t v2719;
  uint64_t v2720;
  uint64_t v2721;
  uint64_t v2722;
  uint64_t v2723;
  uint64_t v2724;
  uint64_t v2725;
  uint64_t v2726;
  uint64_t v2727;
  uint64_t v2728;
  uint64_t v2729;
  uint64_t v2730;
  uint64_t v2731;
  uint64_t v2732;
  uint64_t v2733;
  uint64_t v2734;
  uint64_t v2735;
  uint64_t v2736;
  uint64_t v2737;
  uint64_t v2738;
  uint64_t v2739;
  uint64_t v2740;
  uint64_t v2741;
  uint64_t v2742;
  uint64_t v2743;
  uint64_t v2744;
  uint64_t v2745;
  uint64_t v2746;
  uint64_t v2747;
  uint64_t v2748;
  uint64_t v2749;
  uint64_t v2750;
  uint64_t v2751;
  uint64_t v2752;
  uint64_t v2753;
  uint64_t v2754;
  uint64_t v2755;
  uint64_t v2756;
  uint64_t v2757;
  _BYTE *v2758;
  _BYTE *v2759;
  unsigned __int128 v2760;
  char v2761;
  _BYTE *v2762;
  _BYTE *v2763;
  unsigned __int128 v2764;
  char v2765;
  uint64_t v2766;
  uint64_t v2767;
  uint64_t v2768;
  uint64_t v2769;
  unint64_t v2770;
  uint64_t v2771;
  uint64_t v2772;
  uint64_t v2773;
  unint64_t v2774;
  uint64_t v2775;
  unsigned int v2776;
  unsigned int v2777;
  uint64_t v2778;
  int v2779;
  uint64_t v2780;
  int v2781;
  unint64_t v2782;
  uint64_t v2783;
  unint64_t v2784;
  int v2785;
  unsigned int v2786;
  int v2787;
  unint64_t v2788;
  int v2789;
  uint64_t v2790;
  uint64_t v2791;
  uint64_t v2792;
  uint64_t v2793;
  uint64_t v2794;
  unint64_t v2795;
  uint64_t v2796;
  uint64_t v2797;
  unint64_t v2798;
  uint64_t v2799;
  unsigned int v2800;
  unsigned int v2801;
  uint64_t v2802;
  int v2803;
  uint64_t v2804;
  int v2805;
  unint64_t v2806;
  uint64_t v2807;
  unint64_t v2808;
  int v2809;
  unsigned int v2810;
  int v2811;
  unint64_t v2812;
  int v2813;
  uint64_t v2814;
  uint64_t v2815;
  uint64_t v2816;
  uint64_t v2817;
  uint64_t v2818;
  char v2819;
  char v2820;
  uint64_t v2821;
  JSC::VM *v2822;
  uint64_t v2823;
  const JSC::PropertyTable *v2824;
  uint64_t v2825;
  uint64_t v2826;
  uint64_t v2827;
  uint64_t v2828;
  double v2829;
  uint64_t v2830;
  unint64_t v2831;
  uint64_t v2832;
  uint64_t v2833;
  uint64_t v2834;
  uint64_t v2835;
  unint64_t v2836;
  uint64_t v2837;
  unsigned int v2838;
  unsigned int v2839;
  uint64_t v2840;
  int v2841;
  uint64_t v2842;
  int v2843;
  unint64_t v2844;
  int v2845;
  unsigned int v2846;
  int v2847;
  unint64_t v2848;
  int v2849;
  uint64_t v2850;
  unint64_t v2851;
  uint64_t v2852;
  uint64_t v2853;
  uint64_t v2854;
  unsigned int v2855;
  unint64_t v2856;
  unint64_t v2857;
  unint64_t v2858;
  uint64_t v2859;
  uint64_t v2860;
  uint64_t v2861;
  JSC::VM *v2862;
  uint64_t v2863;
  uint64_t v2864;
  uint64_t v2865;
  uint64_t v2866;
  uint64_t v2867;
  uint64_t v2868;
  __n128 v2869;
  unint64_t v2870;
  unint64_t v2871;
  uint64_t v2872;
  uint64_t v2873;
  uint64_t v2874;
  int v2875;
  uint64_t v2876;
  unint64_t v2877;
  uint64_t v2878;
  int *v2879;
  uint64_t (*v2880)(_BYTE *);
  _QWORD *v2881;
  unint64_t v2882;
  JSC::VM *v2883;
  uint64_t v2884;
  uint64_t v2885;
  uint64_t v2886;
  uint64_t v2887;
  uint64_t v2888;
  uint64_t v2889;
  double v2890;
  unint64_t v2891;
  unint64_t v2892;
  unint64_t v2893;
  uint64_t v2894;
  uint64_t v2895;
  uint64_t v2896;
  JSC::VM *v2897;
  uint64_t v2898;
  uint64_t v2899;
  uint64_t v2900;
  uint64_t v2901;
  uint64_t v2902;
  uint64_t v2903;
  unint64_t v2904;
  unint64_t v2905;
  uint64_t v2906;
  uint64_t v2907;
  uint64_t v2908;
  int v2909;
  uint64_t v2910;
  uint64_t v2911;
  __n128 v2912;
  uint64_t v2913;
  unint64_t v2914;
  uint64_t v2915;
  int *v2916;
  uint64_t (*v2917)(_BYTE *);
  _QWORD *v2918;
  unint64_t v2919;
  uint64_t v2920;
  uint64_t v2921;
  uint64_t v2922;
  uint64_t v2923;
  uint64_t v2924;
  uint64_t v2925;
  unsigned int v2926;
  uint64_t v2927;
  uint64_t v2928;
  uint64_t (*v2929)(_BYTE *);
  _QWORD *v2930;
  uint64_t v2931;
  uint64_t v2932;
  uint64_t v2933;
  uint64_t (*v2934)(_BYTE *);
  _QWORD *v2935;
  uint64_t v2936;
  uint64_t v2937;
  uint64_t v2938;
  uint64_t (*v2939)(_BYTE *);
  _QWORD *v2940;
  uint64_t v2941;
  uint64_t v2942;
  uint64_t v2943;
  uint64_t (*v2944)(_BYTE *);
  _QWORD *v2945;
  uint64_t v2946;
  uint64_t v2947;
  uint64_t v2948;
  uint64_t (*v2949)(_BYTE *);
  _QWORD *v2950;
  uint64_t v2951;
  uint64_t v2952;
  uint64_t v2953;
  uint64_t (*v2954)(_BYTE *);
  _QWORD *v2955;
  uint64_t v2956;
  uint64_t v2957;
  uint64_t v2958;
  uint64_t (*v2959)(_BYTE *);
  _QWORD *v2960;
  uint64_t v2961;
  uint64_t v2962;
  uint64_t v2963;
  uint64_t (*v2964)(_BYTE *);
  _QWORD *v2965;
  WTF::StringImpl *v2966;
  uint64_t v2967;
  uint64_t v2968;
  uint64_t v2969;
  uint64_t v2970;
  uint64_t v2971;
  __n128 v2972;
  WTF::AtomStringImpl *v2973;
  uint64_t v2974;
  uint64_t v2975;
  uint64_t v2976;
  uint64_t v2977;
  uint64_t v2978;
  uint64_t v2979;
  WTF::StringImpl *v2980;
  unint64_t v2981;
  void *v2982;
  uint64_t v2983;
  uint64_t v2984;
  uint64_t v2985;
  uint64_t v2986;
  uint64_t v2987;
  uint64_t v2988;
  unint64_t v2989;
  void *v2990;
  uint64_t v2991;
  uint64_t v2992;
  uint64_t v2993;
  uint64_t v2994;
  uint64_t v2995;
  uint64_t v2996;
  WTF::StringImpl *v2997;
  uint64_t v2998;
  uint64_t v2999;
  uint64_t v3000;
  uint64_t v3001;
  uint64_t v3002;
  __n128 v3003;
  WTF::AtomStringImpl *v3004;
  uint64_t v3005;
  uint64_t v3006;
  uint64_t v3007;
  uint64_t v3008;
  uint64_t v3009;
  uint64_t v3010;
  WTF::StringImpl *v3011;
  unint64_t v3012;
  void *v3013;
  uint64_t v3014;
  uint64_t v3015;
  uint64_t v3016;
  uint64_t v3017;
  uint64_t v3018;
  uint64_t v3019;
  unint64_t v3020;
  void *v3021;
  uint64_t v3022;
  uint64_t v3023;
  uint64_t v3024;
  uint64_t v3025;
  uint64_t v3026;
  uint64_t v3027;
  WTF::StringImpl *v3028;
  uint64_t v3029;
  uint64_t v3030;
  uint64_t v3031;
  uint64_t v3032;
  uint64_t v3033;
  __n128 v3034;
  WTF::AtomStringImpl *v3035;
  uint64_t v3036;
  uint64_t v3037;
  uint64_t v3038;
  uint64_t v3039;
  uint64_t v3040;
  uint64_t v3041;
  WTF::StringImpl *v3042;
  unint64_t v3043;
  void *v3044;
  uint64_t v3045;
  uint64_t v3046;
  uint64_t v3047;
  uint64_t v3048;
  uint64_t v3049;
  uint64_t v3050;
  unint64_t v3051;
  void *v3052;
  uint64_t v3053;
  uint64_t v3054;
  uint64_t v3055;
  uint64_t v3056;
  uint64_t v3057;
  uint64_t v3058;
  WTF::StringImpl *v3059;
  uint64_t v3060;
  uint64_t v3061;
  uint64_t v3062;
  uint64_t v3063;
  uint64_t v3064;
  __n128 v3065;
  WTF::AtomStringImpl *v3066;
  uint64_t v3067;
  uint64_t v3068;
  uint64_t v3069;
  uint64_t v3070;
  uint64_t v3071;
  uint64_t v3072;
  WTF::StringImpl *v3073;
  unint64_t v3074;
  void *v3075;
  uint64_t v3076;
  uint64_t v3077;
  uint64_t v3078;
  uint64_t v3079;
  uint64_t v3080;
  uint64_t v3081;
  unint64_t v3082;
  void *v3083;
  uint64_t v3084;
  uint64_t v3085;
  uint64_t v3086;
  uint64_t v3087;
  uint64_t v3088;
  uint64_t v3089;
  WTF::StringImpl *v3090;
  uint64_t v3091;
  uint64_t v3092;
  uint64_t v3093;
  uint64_t v3094;
  uint64_t v3095;
  __n128 v3096;
  WTF::AtomStringImpl *v3097;
  uint64_t v3098;
  uint64_t v3099;
  uint64_t v3100;
  uint64_t v3101;
  uint64_t v3102;
  uint64_t v3103;
  WTF::StringImpl *v3104;
  unint64_t v3105;
  void *v3106;
  uint64_t v3107;
  uint64_t v3108;
  uint64_t v3109;
  uint64_t v3110;
  uint64_t v3111;
  uint64_t v3112;
  unint64_t v3113;
  void *v3114;
  uint64_t v3115;
  uint64_t v3116;
  uint64_t v3117;
  uint64_t v3118;
  uint64_t v3119;
  uint64_t v3120;
  WTF::StringImpl *v3121;
  uint64_t v3122;
  uint64_t v3123;
  uint64_t v3124;
  uint64_t v3125;
  uint64_t v3126;
  __n128 v3127;
  WTF::AtomStringImpl *v3128;
  uint64_t v3129;
  uint64_t v3130;
  uint64_t v3131;
  uint64_t v3132;
  uint64_t v3133;
  uint64_t v3134;
  WTF::StringImpl *v3135;
  unint64_t v3136;
  void *v3137;
  uint64_t v3138;
  uint64_t v3139;
  uint64_t v3140;
  uint64_t v3141;
  uint64_t v3142;
  uint64_t v3143;
  unint64_t v3144;
  void *v3145;
  uint64_t v3146;
  uint64_t v3147;
  uint64_t v3148;
  uint64_t v3149;
  uint64_t v3150;
  uint64_t v3151;
  WTF::StringImpl *v3152;
  uint64_t v3153;
  uint64_t v3154;
  uint64_t v3155;
  uint64_t v3156;
  uint64_t v3157;
  __n128 v3158;
  WTF::AtomStringImpl *v3159;
  uint64_t v3160;
  uint64_t v3161;
  uint64_t v3162;
  uint64_t v3163;
  uint64_t v3164;
  uint64_t v3165;
  WTF::StringImpl *v3166;
  unint64_t v3167;
  void *v3168;
  uint64_t v3169;
  uint64_t v3170;
  uint64_t v3171;
  uint64_t v3172;
  uint64_t v3173;
  uint64_t v3174;
  unint64_t v3175;
  void *v3176;
  uint64_t v3177;
  uint64_t v3178;
  uint64_t v3179;
  uint64_t v3180;
  uint64_t v3181;
  uint64_t v3182;
  WTF::StringImpl *v3183;
  uint64_t v3184;
  uint64_t v3185;
  uint64_t v3186;
  uint64_t v3187;
  uint64_t v3188;
  __n128 v3189;
  WTF::AtomStringImpl *v3190;
  uint64_t v3191;
  uint64_t v3192;
  uint64_t v3193;
  uint64_t v3194;
  uint64_t v3195;
  uint64_t v3196;
  WTF::StringImpl *v3197;
  unint64_t v3198;
  void *v3199;
  uint64_t v3200;
  uint64_t v3201;
  uint64_t v3202;
  uint64_t v3203;
  uint64_t v3204;
  uint64_t v3205;
  unint64_t v3206;
  void *v3207;
  uint64_t v3208;
  uint64_t v3209;
  uint64_t v3210;
  uint64_t v3211;
  uint64_t v3212;
  uint64_t v3213;
  WTF::StringImpl *v3214;
  uint64_t v3215;
  uint64_t v3216;
  uint64_t v3217;
  uint64_t v3218;
  uint64_t v3219;
  __n128 v3220;
  WTF::AtomStringImpl *v3221;
  uint64_t v3222;
  uint64_t v3223;
  uint64_t v3224;
  uint64_t v3225;
  uint64_t v3226;
  uint64_t v3227;
  WTF::StringImpl *v3228;
  unint64_t v3229;
  void *v3230;
  uint64_t v3231;
  uint64_t v3232;
  uint64_t v3233;
  uint64_t v3234;
  uint64_t v3235;
  uint64_t v3236;
  unint64_t v3237;
  void *v3238;
  uint64_t v3239;
  uint64_t v3240;
  uint64_t v3241;
  uint64_t v3242;
  uint64_t v3243;
  uint64_t v3244;
  _QWORD *v3245;
  WTF::StringImpl *v3246;
  WTF::StringImpl *v3247;
  WTF::StringImpl *v3248;
  WTF::AtomStringImpl *v3249;
  uint64_t v3250;
  uint64_t v3251;
  uint64_t v3252;
  unint64_t v3253;
  uint64_t v3254;
  uint64_t v3255;
  double v3256;
  unint64_t v3257;
  void *v3258;
  uint64_t v3259;
  uint64_t v3260;
  uint64_t v3261;
  uint64_t v3262;
  uint64_t v3263;
  uint64_t v3264;
  unint64_t v3265;
  void *v3266;
  uint64_t v3267;
  uint64_t v3268;
  uint64_t v3269;
  uint64_t v3270;
  uint64_t v3271;
  uint64_t v3272;
  unint64_t v3273;
  void *v3274;
  uint64_t v3275;
  uint64_t v3276;
  uint64_t v3277;
  uint64_t v3278;
  uint64_t v3279;
  uint64_t v3280;
  uint64_t v3281;
  JSC::Structure *v3282;
  uint64_t v3283;
  uint64_t v3284;
  uint64_t v3285;
  uint64_t v3286;
  unint64_t v3287;
  uint64_t v3288;
  uint64_t v3289;
  uint64_t v3290;
  uint64_t v3291;
  uint64_t v3292;
  WTF::StringImpl *v3293;
  uint64_t v3294;
  uint64_t v3295;
  uint64_t v3296;
  __n128 v3297;
  WTF::AtomStringImpl *v3298;
  uint64_t v3299;
  uint64_t v3300;
  unint64_t v3301;
  void *v3302;
  uint64_t v3303;
  uint64_t v3304;
  uint64_t v3305;
  uint64_t v3306;
  uint64_t v3307;
  uint64_t v3308;
  int v3309;
  uint64_t v3310;
  void *v3311;
  uint64_t v3312;
  const JSC::PropertyTable *v3313;
  uint64_t v3314;
  uint64_t v3315;
  uint64_t v3316;
  uint64_t v3317;
  uint64_t v3318;
  uint64_t v3319;
  unsigned int v3320;
  _QWORD *v3321;
  _QWORD *v3322;
  uint64_t v3323;
  _QWORD *v3324;
  uint64_t v3325;
  uint64_t v3326;
  unint64_t v3327;
  uint64_t v3328;
  uint64_t v3329;
  uint64_t v3330;
  void *v3331;
  uint64_t v3332;
  const JSC::PropertyTable *v3333;
  uint64_t v3334;
  uint64_t v3335;
  uint64_t v3336;
  uint64_t v3337;
  uint64_t v3338;
  uint64_t v3339;
  unsigned int v3340;
  _QWORD *v3341;
  _QWORD *v3342;
  uint64_t v3343;
  _QWORD *v3344;
  uint64_t v3345;
  uint64_t v3346;
  unint64_t v3347;
  uint64_t v3348;
  uint64_t v3349;
  uint64_t v3350;
  void *v3351;
  uint64_t v3352;
  const JSC::PropertyTable *v3353;
  uint64_t v3354;
  uint64_t v3355;
  uint64_t v3356;
  uint64_t v3357;
  uint64_t v3358;
  uint64_t v3359;
  unsigned int v3360;
  _QWORD *v3361;
  _QWORD *v3362;
  uint64_t v3363;
  _QWORD *v3364;
  uint64_t v3365;
  uint64_t v3366;
  unint64_t v3367;
  uint64_t v3368;
  uint64_t v3369;
  uint64_t v3370;
  void *v3371;
  uint64_t v3372;
  const JSC::PropertyTable *v3373;
  uint64_t v3374;
  uint64_t v3375;
  uint64_t v3376;
  uint64_t v3377;
  uint64_t v3378;
  uint64_t v3379;
  unsigned int v3380;
  _QWORD *v3381;
  _QWORD *v3382;
  uint64_t v3383;
  _QWORD *v3384;
  uint64_t v3385;
  uint64_t v3386;
  unint64_t v3387;
  uint64_t v3388;
  uint64_t v3389;
  uint64_t v3390;
  void *v3391;
  uint64_t v3392;
  const JSC::PropertyTable *v3393;
  uint64_t v3394;
  uint64_t v3395;
  uint64_t v3396;
  uint64_t v3397;
  uint64_t v3398;
  uint64_t v3399;
  unsigned int v3400;
  _QWORD *v3401;
  _QWORD *v3402;
  uint64_t v3403;
  _QWORD *v3404;
  uint64_t v3405;
  uint64_t v3406;
  unint64_t v3407;
  uint64_t v3408;
  uint64_t v3409;
  uint64_t v3410;
  void *v3411;
  uint64_t v3412;
  const JSC::PropertyTable *v3413;
  uint64_t v3414;
  uint64_t v3415;
  uint64_t v3416;
  uint64_t v3417;
  uint64_t v3418;
  uint64_t v3419;
  unsigned int v3420;
  _QWORD *v3421;
  _QWORD *v3422;
  uint64_t v3423;
  _QWORD *v3424;
  uint64_t v3425;
  uint64_t v3426;
  unint64_t v3427;
  uint64_t v3428;
  uint64_t v3429;
  uint64_t v3430;
  void *v3431;
  uint64_t v3432;
  const JSC::PropertyTable *v3433;
  uint64_t v3434;
  uint64_t v3435;
  uint64_t v3436;
  uint64_t v3437;
  uint64_t v3438;
  uint64_t v3439;
  unsigned int v3440;
  _QWORD *v3441;
  _QWORD *v3442;
  uint64_t v3443;
  _QWORD *v3444;
  uint64_t v3445;
  uint64_t v3446;
  unint64_t v3447;
  uint64_t v3448;
  uint64_t v3449;
  uint64_t v3450;
  void *v3451;
  uint64_t v3452;
  const JSC::PropertyTable *v3453;
  uint64_t v3454;
  uint64_t v3455;
  uint64_t v3456;
  uint64_t v3457;
  uint64_t v3458;
  char *v3459;
  uint64_t v3460;
  unsigned int v3461;
  _QWORD *v3462;
  _QWORD *v3463;
  uint64_t v3464;
  _QWORD *v3465;
  uint64_t v3466;
  uint64_t v3467;
  unint64_t v3468;
  uint64_t v3469;
  uint64_t v3470;
  uint64_t v3471;
  void *v3472;
  uint64_t v3473;
  const JSC::PropertyTable *v3474;
  uint64_t v3475;
  uint64_t v3476;
  uint64_t v3477;
  uint64_t v3478;
  uint64_t v3479;
  uint64_t v3480;
  unsigned int v3481;
  _QWORD *v3482;
  _QWORD *v3483;
  uint64_t v3484;
  _QWORD *v3485;
  uint64_t v3486;
  uint64_t v3487;
  unint64_t v3488;
  uint64_t v3489;
  uint64_t v3490;
  uint64_t v3491;
  void *v3492;
  uint64_t v3493;
  const JSC::PropertyTable *v3494;
  uint64_t v3495;
  uint64_t v3496;
  uint64_t v3497;
  uint64_t v3498;
  uint64_t v3499;
  uint64_t v3500;
  unsigned int v3501;
  _QWORD *v3502;
  _QWORD *v3503;
  uint64_t v3504;
  _QWORD *v3505;
  uint64_t v3506;
  uint64_t v3507;
  unint64_t v3508;
  uint64_t v3509;
  uint64_t v3510;
  uint64_t v3511;
  void *v3512;
  uint64_t v3513;
  const JSC::PropertyTable *v3514;
  uint64_t v3515;
  uint64_t v3516;
  uint64_t v3517;
  uint64_t v3518;
  uint64_t v3519;
  uint64_t v3520;
  unsigned int v3521;
  _QWORD *v3522;
  _QWORD *v3523;
  uint64_t v3524;
  _QWORD *v3525;
  uint64_t v3526;
  uint64_t v3527;
  unint64_t v3528;
  uint64_t v3529;
  uint64_t v3530;
  uint64_t v3531;
  void *v3532;
  uint64_t v3533;
  const JSC::PropertyTable *v3534;
  uint64_t v3535;
  uint64_t v3536;
  uint64_t v3537;
  uint64_t v3538;
  uint64_t v3539;
  uint64_t v3540;
  unsigned int v3541;
  _QWORD *v3542;
  _QWORD *v3543;
  uint64_t v3544;
  _QWORD *v3545;
  uint64_t v3546;
  unint64_t v3547;
  uint64_t v3548;
  uint64_t v3549;
  unint64_t v3550;
  uint64_t v3551;
  uint64_t v3552;
  uint64_t *v3553;
  uint64_t v3554;
  void *v3555;
  uint64_t v3556;
  uint64_t v3557;
  uint64_t v3558;
  uint64_t v3559;
  uint64_t v3560;
  uint64_t v3561;
  uint64_t v3562;
  uint64_t v3563;
  uint64_t v3564;
  unsigned int v3565;
  unint64_t v3566;
  char v3567;
  uint64_t v3568;
  uint64_t v3569;
  unsigned int v3570;
  uint64_t *v3571;
  uint64_t v3572;
  uint64_t v3573;
  void *v3574;
  uint64_t v3575;
  uint64_t v3576;
  uint64_t v3577;
  uint64_t v3578;
  uint64_t v3579;
  uint64_t v3580;
  uint64_t v3581;
  uint64_t v3582;
  uint64_t v3583;
  unsigned int v3584;
  unint64_t v3585;
  unint64_t v3586;
  uint64_t v3587;
  uint64_t v3588;
  char v3589;
  uint64_t v3590;
  uint64_t v3591;
  unsigned int v3592;
  uint64_t *v3593;
  uint64_t v3594;
  unint64_t v3595;
  uint64_t v3596;
  uint64_t v3597;
  uint64_t *v3598;
  uint64_t v3599;
  void *v3600;
  uint64_t v3601;
  uint64_t v3602;
  uint64_t v3603;
  uint64_t v3604;
  uint64_t v3605;
  uint64_t v3606;
  uint64_t v3607;
  uint64_t v3608;
  uint64_t v3609;
  unsigned int v3610;
  unint64_t v3611;
  char v3612;
  uint64_t v3613;
  uint64_t v3614;
  unsigned int v3615;
  uint64_t *v3616;
  uint64_t v3617;
  uint64_t v3618;
  void *v3619;
  uint64_t v3620;
  uint64_t v3621;
  uint64_t v3622;
  uint64_t v3623;
  uint64_t v3624;
  uint64_t v3625;
  uint64_t v3626;
  uint64_t v3627;
  uint64_t v3628;
  unsigned int v3629;
  unint64_t v3630;
  uint64_t v3631;
  char v3632;
  uint64_t v3633;
  uint64_t v3634;
  unsigned int v3635;
  uint64_t *v3636;
  uint64_t v3637;
  uint64_t v3638;
  uint64_t v3639;
  uint64_t v3640;
  void *v3641;
  uint64_t v3642;
  uint64_t v3643;
  uint64_t v3644;
  uint64_t v3645;
  uint64_t v3646;
  uint64_t v3647;
  uint64_t v3648;
  uint64_t v3649;
  unsigned int v3650;
  unint64_t v3651;
  char v3652;
  uint64_t v3653;
  uint64_t v3654;
  unsigned int v3655;
  uint64_t *v3656;
  uint64_t v3657;
  uint64_t v3658;
  uint64_t v3659;
  uint64_t v3660;
  void *v3661;
  uint64_t v3662;
  uint64_t v3663;
  uint64_t v3664;
  uint64_t v3665;
  uint64_t v3666;
  uint64_t v3667;
  uint64_t v3668;
  uint64_t v3669;
  unsigned int v3670;
  unint64_t v3671;
  char v3672;
  uint64_t v3673;
  uint64_t v3674;
  unsigned int v3675;
  uint64_t *v3676;
  uint64_t v3677;
  uint64_t v3678;
  uint64_t v3679;
  uint64_t *v3680;
  void *v3681;
  uint64_t v3682;
  uint64_t v3683;
  uint64_t v3684;
  uint64_t v3685;
  uint64_t v3686;
  uint64_t v3687;
  uint64_t v3688;
  uint64_t v3689;
  unsigned int v3690;
  unint64_t v3691;
  char v3692;
  uint64_t v3693;
  uint64_t v3694;
  unsigned int v3695;
  uint64_t *v3696;
  uint64_t v3697;
  void *v3698;
  uint64_t v3699;
  uint64_t v3700;
  uint64_t v3701;
  uint64_t v3702;
  uint64_t v3703;
  uint64_t v3704;
  uint64_t v3705;
  uint64_t v3706;
  unsigned int v3707;
  unint64_t v3708;
  uint64_t v3709;
  unsigned int v3710;
  uint64_t *v3711;
  uint64_t v3712;
  void *v3713;
  uint64_t v3714;
  uint64_t v3715;
  uint64_t v3716;
  uint64_t v3717;
  uint64_t v3718;
  uint64_t v3719;
  uint64_t v3720;
  __n128 v3721;
  uint64_t v3722;
  unsigned int v3723;
  unint64_t v3724;
  uint64_t v3725;
  unsigned int v3726;
  uint64_t *v3727;
  uint64_t v3728;
  _QWORD *v3729;
  uint64_t v3730;
  void (*v3731)(_BYTE *);
  _QWORD *v3732;
  void (*v3733)(_BYTE *);
  _QWORD *v3734;
  JSC::JSGlobalObject *i;
  JSC::JSGlobalObject *v3736;
  JSC::JSGlobalObject *v3737;
  unint64_t v3738;
  JSC::JSObject *v3739;
  JSC::JSObject *v3740;
  JSC::JSObject *v3741;
  char *v3742;
  char *v3743;
  char *v3744;
  char *v3745;
  char *v3746;
  uint64_t v3747;
  uint64_t v3748;
  uint64_t v3749;
  uint64_t v3750;
  uint64_t v3751;
  uint64_t v3752;
  uint64_t v3753;
  unint64_t v3754;
  uint64_t v3755;
  JSC::JSObject *v3756;
  JSC::BuiltinExecutables **v3757;
  JSC::Heap *v3758;
  unint64_t *v3759;
  __n128 v3760;
  unint64_t *v3761;
  unint64_t v3762;
  unint64_t *v3763;
  unsigned int *v3764;
  unint64_t *v3765;
  __int128 v3766;
  uint64_t v3767;
  JSC::JSFunction *v3768;
  JSC::JSFunction *v3769;
  JSC::JSFunction *v3770;
  uint64_t v3771[2];
  _BYTE v3772[24];
  JSC::VM *v3773;
  uint64_t v3774;
  int v3775;
  WTF::StringImpl *v3776;
  uint64_t v3777;
  int v3778;
  uint64_t v3779;

  v3779 = *MEMORY[0x1E0C80C00];
  v11 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
  *(_DWORD *)v3772 = 1;
  *(_WORD *)&v3772[4] = 0;
  *(_QWORD *)&v3772[8] = &v3772[8];
  *(_QWORD *)&v3772[16] = &v3772[8];
  v3773 = a2;
  v3774 = v11;
  v12 = JSC::Structure::toDictionaryTransition((uint64_t)a2, v11, 1, (JSC::Structure *)v3772, a6, a7, a8, a9, a3);
  *(_DWORD *)this = v12 >> 4;
  *(_BYTE *)(this + 6) = *(_BYTE *)(this + 6) & 0x80 | *(_BYTE *)(v12 + 10);
  *(_BYTE *)(this + 5) = *(_BYTE *)(v12 + 9);
  v21 = (unsigned __int8 *)(this + 4);
  if (*(unsigned __int8 *)(this + 4) != *(unsigned __int8 *)(v12 + 8))
  {
    do
    {
      while (1)
      {
        v312 = *v21;
        v313 = __ldxr(v21);
        if (v313 == v312)
          break;
        __clrex();
      }
    }
    while (__stxr(v312 & 0xC0 | *(_BYTE *)(v12 + 8), v21));
  }
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, this);
  if (v3772[4] == 1)
    JSC::DeferredStructureTransitionWatchpointFire::fireAllSlow((uint64_t *)v3772, v20, v13, v14, v15, v16, v17, v18, v19);
  while (1)
  {
    v22 = *(_QWORD **)&v3772[8];
    if (*(_BYTE **)&v3772[8] == &v3772[8])
      break;
    v408 = **(_QWORD **)&v3772[8];
    v407 = *(_QWORD **)(*(_QWORD *)&v3772[8] + 8);
    *v407 = **(_QWORD **)&v3772[8];
    *(_QWORD *)(v408 + 8) = v407;
    *v22 = 0;
    v22[1] = 0;
  }
  *(_QWORD *)(this + 2016) = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v24 = *(_QWORD *)(StatusReg + 752);
  if (v24)
  {
    v25 = (_BYTE *)(v24 + 9776);
    *(_BYTE *)(v24 + 9776) = 1;
    v26 = *(unsigned int *)(v24 + 9792);
    if ((_DWORD)v26)
    {
      *(_DWORD *)(v24 + 9792) = v26 - *(_DWORD *)(v24 + 9796);
      casual = (Inspector::JSGlobalObjectInspectorController *)(*(_QWORD *)(v24 + 9784) - v26);
LABEL_10:
      *v25 = 0;
      goto LABEL_11;
    }
    v333 = *(_QWORD *)(v24 + 9816);
    v334 = *(_QWORD *)(v24 + 9800);
    if (v333)
    {
LABEL_232:
      v335 = __clz(v333);
      *(_QWORD *)(v24 + 9816) = v333 & ~(0x8000000000000000 >> v335);
      casual = (Inspector::JSGlobalObjectInspectorController *)(v334 + 16 * v335);
      goto LABEL_10;
    }
    if (*(_BYTE *)(v24 + 9781) == 6)
    {
      v2311 = *(_DWORD *)(v24 + 9812);
      v2312 = *(unsigned int *)(v24 + 9808);
      if (v2312 < v2311)
      {
        *(_QWORD *)&v25[8 * v2312 + 56] = 0;
        v2313 = (unint64_t *)(v24 + 8 * v2312 + 9840);
        v2314 = v2311 - 1 - v2312;
        while (v2314)
        {
          v334 += 1024;
          v2316 = *v2313++;
          v2315 = v2316;
          LODWORD(v2312) = v2312 + 1;
          --v2314;
          if (v2316)
          {
            v333 = __rbit64(v2315);
            *(_DWORD *)(v24 + 9808) = v2312;
            *(_QWORD *)(v24 + 9800) = v334;
            goto LABEL_232;
          }
        }
        *(_DWORD *)(v24 + 9808) = v2311;
      }
    }
    *v25 = 0;
  }
  casual = (Inspector::JSGlobalObjectInspectorController *)bmalloc_allocate_casual(144, 1);
LABEL_11:
  v28 = Inspector::JSGlobalObjectInspectorController::JSGlobalObjectInspectorController(casual, (JSC::JSGlobalObject *)this);
  v36 = *(Inspector::JSGlobalObjectInspectorController **)(this + 2024);
  *(_QWORD *)(this + 2024) = v28;
  if (v36)
  {
    Inspector::JSGlobalObjectInspectorController::~JSGlobalObjectInspectorController(v36, v29, v30, v31, v32, v33, v34, v35);
    WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  v45 = *(_QWORD *)(StatusReg + 752);
  if (v45)
  {
    v46 = (_BYTE *)(v45 + 8856);
    *(_BYTE *)(v45 + 8856) = 1;
    v47 = *(unsigned int *)(v45 + 8872);
    if ((_DWORD)v47)
    {
      *(_DWORD *)(v45 + 8872) = v47 - *(_DWORD *)(v45 + 8876);
      v48 = *(_QWORD *)(v45 + 8864) - v47;
LABEL_16:
      *v46 = 0;
      goto LABEL_17;
    }
    v336 = *(_QWORD *)(v45 + 8896);
    v337 = *(_QWORD *)(v45 + 8880);
    if (v336)
    {
LABEL_234:
      v338 = __clz(v336);
      *(_QWORD *)(v45 + 8896) = v336 & ~(0x8000000000000000 >> v338);
      v48 = v337 + 16 * v338;
      goto LABEL_16;
    }
    if (*(_BYTE *)(v45 + 8861) == 6)
    {
      v2317 = *(_DWORD *)(v45 + 8892);
      v2318 = *(unsigned int *)(v45 + 8888);
      if (v2318 < v2317)
      {
        *(_QWORD *)&v46[8 * v2318 + 56] = 0;
        v2319 = (unint64_t *)(v45 + 8 * v2318 + 8920);
        v2320 = v2317 - 1 - v2318;
        while (v2320)
        {
          v337 += 1024;
          v2322 = *v2319++;
          v2321 = v2322;
          LODWORD(v2318) = v2318 + 1;
          --v2320;
          if (v2322)
          {
            v336 = __rbit64(v2321);
            *(_DWORD *)(v45 + 8888) = v2318;
            *(_QWORD *)(v45 + 8880) = v337;
            goto LABEL_234;
          }
        }
        *(_DWORD *)(v45 + 8888) = v2317;
      }
    }
    *v46 = 0;
  }
  v48 = bmalloc_allocate_casual(56, 1);
LABEL_17:
  v49 = *(_QWORD *)(StatusReg + 752);
  if (v49)
  {
    v50 = (_BYTE *)(v49 + 8488);
    *(_BYTE *)(v49 + 8488) = 1;
    v51 = *(unsigned int *)(v49 + 8504);
    if ((_DWORD)v51)
    {
      *(_DWORD *)(v49 + 8504) = v51 - *(_DWORD *)(v49 + 8508);
      v52 = *(_QWORD *)(v49 + 8496) - v51;
LABEL_20:
      *v50 = 0;
      goto LABEL_21;
    }
    v339 = *(_QWORD *)(v49 + 8528);
    v340 = *(_QWORD *)(v49 + 8512);
    if (v339)
    {
LABEL_236:
      v341 = __clz(v339);
      *(_QWORD *)(v49 + 8528) = v339 & ~(0x8000000000000000 >> v341);
      v52 = v340 + 16 * v341;
      goto LABEL_20;
    }
    if (*(_BYTE *)(v49 + 8493) == 6)
    {
      v2323 = *(_DWORD *)(v49 + 8524);
      v2324 = *(unsigned int *)(v49 + 8520);
      if (v2324 < v2323)
      {
        *(_QWORD *)&v50[8 * v2324 + 56] = 0;
        v2325 = (unint64_t *)(v49 + 8 * v2324 + 8552);
        v2326 = v2323 - 1 - v2324;
        while (v2326)
        {
          v340 += 1024;
          v2328 = *v2325++;
          v2327 = v2328;
          LODWORD(v2324) = v2324 + 1;
          --v2326;
          if (v2328)
          {
            v339 = __rbit64(v2327);
            *(_DWORD *)(v49 + 8520) = v2324;
            *(_QWORD *)(v49 + 8512) = v340;
            goto LABEL_236;
          }
        }
        *(_DWORD *)(v49 + 8520) = v2323;
      }
    }
    *v50 = 0;
  }
  v52 = bmalloc_allocate_casual(32, 1);
LABEL_21:
  *(_BYTE *)v52 = 0;
  *(_OWORD *)(v52 + 8) = xmmword_199123080;
  *(_QWORD *)(v52 + 24) = v48;
  *(_DWORD *)(v48 + 16) = 0;
  if (inspectionFollowsInternalPolicies)
    v53 = 1;
  else
    v53 = 2;
  *(_BYTE *)(v48 + 20) = v53;
  *(_QWORD *)(v48 + 24) = 0;
  *(_BYTE *)(v48 + 32) = 0;
  *(_BYTE *)(v48 + 36) = 0;
  *(_QWORD *)v48 = off_1E35A1440;
  *(_QWORD *)(v48 + 8) = v52;
  *(_QWORD *)(v48 + 40) = this;
  *(_DWORD *)(v48 + 48) = 2;
  v54 = *(_QWORD *)(this + 2032);
  *(_QWORD *)(this + 2032) = v48;
  if (!v54)
    goto LABEL_33;
  v55 = *(_QWORD *)(v54 + 8);
  if (__ldaxr((unsigned __int8 *)v55))
  {
    __clrex();
LABEL_27:
    v52 = WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v55);
    goto LABEL_28;
  }
  if (__stxr(1u, (unsigned __int8 *)v55))
    goto LABEL_27;
LABEL_28:
  v57 = *(_QWORD *)(v55 + 8);
  v58 = v57 - 1;
  *(_QWORD *)(v55 + 8) = v57 - 1;
  if (v57 == 1)
  {
    v2160 = *(_QWORD *)(v55 + 16);
    v59 = *(_QWORD *)(v55 + 24);
    *(_QWORD *)(v55 + 24) = 0;
    v60 = v2160 != 0;
  }
  else
  {
    v59 = 0;
    v60 = 1;
  }
  v61 = __ldxr((unsigned __int8 *)v55);
  if (v61 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v55))
      goto LABEL_32;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)v55, 0, v30, v31, v32, v33, v34, v35);
LABEL_32:
  if (!v58)
  {
    if (v59)
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    if (!v60)
      WTF::fastFree(v55, v29, v30, v31, v32, v33, v34, v35);
  }
LABEL_33:
  v62 = (unint64_t *)((char *)a2 + 40048);
  v63 = *(Inspector::RemoteControllableTarget **)(this + 2032);
  v64 = (Inspector::RemoteInspector *)Inspector::RemoteInspector::singleton((Inspector::RemoteInspector *)v52);
  Inspector::RemoteInspector::registerTarget(v64, v63, v65, v66, v67, v68, v69, v70);
  v78 = *(_QWORD *)(*(_QWORD *)(this + 2024) + 32);
  if (v78)
  {
    v79 = *(_QWORD *)(v78 + 8);
    if (v79)
      goto LABEL_3156;
    v79 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v79 = 1;
    *(_QWORD *)(v79 + 8) = v78;
    v2283 = *(unsigned int **)(v78 + 8);
    *(_QWORD *)(v78 + 8) = v79;
    if (!v2283)
      goto LABEL_3156;
    do
    {
      v2284 = __ldaxr(v2283);
      v2285 = v2284 - 1;
    }
    while (__stlxr(v2285, v2283));
    if (!v2285)
    {
      atomic_store(1u, v2283);
      WTF::fastFree((unint64_t)v2283, v71, v72, v73, v74, v75, v76, v77);
    }
    v79 = *(_QWORD *)(v78 + 8);
    if (v79)
    {
LABEL_3156:
      do
        v2286 = __ldaxr((unsigned int *)v79);
      while (__stlxr(v2286 + 1, (unsigned int *)v79));
    }
  }
  else
  {
    v79 = 0;
  }
  v80 = *(unsigned int **)(this + 3208);
  *(_QWORD *)(this + 3208) = v79;
  if (v80)
  {
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v80);
      WTF::fastFree((unint64_t)v80, v71, v72, v73, v74, v75, v76, v77);
    }
  }
  v3765 = (unint64_t *)((char *)a2 + 38552);
  *(_DWORD *)v3772 = 67099;
  v3758 = (JSC::VM *)((char *)a2 + 192);
  SlowCase = *((_QWORD *)a2 + 5017);
  if (SlowCase < *((_QWORD *)a2 + 5018))
    goto LABEL_40;
  SlowCase = *((_QWORD *)a2 + 5019);
  if ((SlowCase & 1) == 0)
  {
    v2150 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = SlowCase + HIDWORD(v2150);
    *((_QWORD *)a2 + 5019) = SlowCase + (int)v2150;
LABEL_40:
    *((_QWORD *)a2 + 5017) = SlowCase + 128;
    goto LABEL_41;
  }
  JSC::sanitizeStackForVM(a2, (JSC::VM *)v71, v72, v73, v74, v75, v76, v77);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40112, (uint64_t)v3758, 128, 0, 0, v2362, v2363, v2364);
LABEL_41:
  *(_DWORD *)SlowCase = 0;
  JSC::Structure::Structure(SlowCase, (uint64_t)a2, this, 2, (uint64_t)v3772, (unint64_t)&JSC::FunctionPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v91 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_44;
  v91 = *((_QWORD *)a2 + 4821);
  if ((v91 & 1) == 0)
  {
    v2151 = *(_QWORD *)(v91 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v91 + HIDWORD(v2151);
    *((_QWORD *)a2 + 4821) = v91 + (int)v2151;
LABEL_44:
    *v3765 = v91 + 48;
    goto LABEL_45;
  }
  JSC::sanitizeStackForVM(a2, v84, v85, v86, v87, v88, v89, v90);
  v91 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 38528, (uint64_t)v3758, 48, 0, 0, v2365, v2366, v2367);
LABEL_45:
  v92 = (_DWORD *)((char *)a2 + 760);
  *(_DWORD *)v91 = 0;
  v93 = JSC::InternalFunction::InternalFunction(v91, (uint64_t)a2, SlowCase, (uint64_t)JSC::callFunctionPrototype, 0);
  *(_QWORD *)v3772 = 0;
  JSC::InternalFunction::finishCreation(v93, a2, 0, (JSC::VM *)v3772, 1, v94, v95, v96);
  v104 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
    {
      WTF::StringImpl::~StringImpl(v104, v97, v98, v99, v100, v101, v102, v103);
      WTF::fastFree(v343, v344, v345, v346, v347, v348, v349, v350);
    }
    else
    {
      *(_DWORD *)v104 -= 2;
    }
  }
  *(_QWORD *)(this + 664) = v91;
  if (*v92 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_DWORD *)v3772 = 66073;
  v105 = *((_QWORD *)a2 + 5017);
  if (v105 < *((_QWORD *)a2 + 5018))
    goto LABEL_51;
  v105 = *((_QWORD *)a2 + 5019);
  if ((v105 & 1) == 0)
  {
    v2152 = *(_QWORD *)(v105 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v105 + HIDWORD(v2152);
    *((_QWORD *)a2 + 5019) = v105 + (int)v2152;
LABEL_51:
    *((_QWORD *)a2 + 5017) = v105 + 128;
    goto LABEL_52;
  }
  JSC::sanitizeStackForVM(a2, v97, v98, v99, v100, v101, v102, v103);
  v105 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40112, (uint64_t)v3758, 128, 0, 0, v2368, v2369, v2370);
LABEL_52:
  *(_DWORD *)v105 = 0;
  v106 = JSC::Structure::Structure(v105, (uint64_t)a2, this, 2, (uint64_t)v3772, (unint64_t)&JSC::JSCallee::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 936) = v106 >> 4;
  if (*v92 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v3761 = (unint64_t *)((char *)a2 + 38288);
  *(_DWORD *)v3772 = 67373108;
  v114 = *((_QWORD *)a2 + 5017);
  if (v114 < *((_QWORD *)a2 + 5018))
    goto LABEL_57;
  v114 = *((_QWORD *)a2 + 5019);
  if ((v114 & 1) == 0)
  {
    v2153 = *(_QWORD *)(v114 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v114 + HIDWORD(v2153);
    *((_QWORD *)a2 + 5019) = v114 + (int)v2153;
LABEL_57:
    *((_QWORD *)a2 + 5017) = v114 + 128;
    goto LABEL_58;
  }
  JSC::sanitizeStackForVM(a2, v107, v108, v109, v110, v111, v112, v113);
  v114 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40112, (uint64_t)v3758, 128, 0, 0, v2371, v2372, v2373);
LABEL_58:
  *(_DWORD *)v114 = 0;
  JSC::Structure::Structure(v114, (uint64_t)a2, this, 2, (uint64_t)v3772, (unint64_t)&JSC::JSGlobalLexicalEnvironment::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v122 = *((_QWORD *)a2 + 4808);
  if (v122 < *((_QWORD *)a2 + 4809))
    goto LABEL_61;
  v122 = *((_QWORD *)a2 + 4810);
  if ((v122 & 1) == 0)
  {
    v2154 = *(_QWORD *)(v122 + 8) ^ *((_QWORD *)a2 + 4811);
    *((_QWORD *)a2 + 4809) = v122 + HIDWORD(v2154);
    *((_QWORD *)a2 + 4810) = v122 + (int)v2154;
LABEL_61:
    *((_QWORD *)a2 + 4808) = v122 + 64;
    goto LABEL_62;
  }
  JSC::sanitizeStackForVM(a2, v115, v116, v117, v118, v119, v120, v121);
  v122 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 38440, (uint64_t)v3758, 64, 0, 0, v2374, v2375, v2376);
LABEL_62:
  *(_DWORD *)v122 = 0;
  v123 = *(_DWORD *)(v114 + 8);
  *(_DWORD *)v122 = v114 >> 4;
  *(_DWORD *)(v122 + 4) = v123;
  *(_QWORD *)(v122 + 8) = 0;
  *(_QWORD *)(v122 + 16) = this;
  *(_OWORD *)(v122 + 24) = 0u;
  *(_OWORD *)(v122 + 40) = 0u;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v124 = *v62;
  if (*((_QWORD *)a2 + 5006) < *((_QWORD *)a2 + 5007))
    goto LABEL_65;
  v124 = *((_QWORD *)a2 + 5008);
  if ((v124 & 1) == 0)
  {
    v2155 = *(_QWORD *)(v124 + 8) ^ *((_QWORD *)a2 + 5009);
    *((_QWORD *)a2 + 5007) = v124 + HIDWORD(v2155);
    *((_QWORD *)a2 + 5008) = v124 + (int)v2155;
LABEL_65:
    *v62 = v124 + 64;
    goto LABEL_66;
  }
  JSC::sanitizeStackForVM(a2, v115, v116, v117, v118, v119, v120, v121);
  v124 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40024, (uint64_t)v3758, 64, 0, 0, v2377, v2378, v2379);
LABEL_66:
  *(_DWORD *)v124 = 0;
  JSC::SymbolTable::SymbolTable(v124, (uint64_t)a2);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v133 = *(_QWORD *)(v124 + 40);
  if ((v133 & 1) != 0)
    v134 = (v133 >> 1) & 3;
  else
    v134 = *(unsigned __int8 *)(v133 + 4);
  if (v134 != 2)
  {
    *(_QWORD *)v3772 = &off_1E3583C90;
    *(_QWORD *)&v3772[8] = "Allocated a scope";
    JSC::InferredValue<JSC::JSScope>::notifyWriteSlow((uint64_t *)(v124 + 40), a2, v124, v122, v3772, v129, v130, v131, v132);
  }
  v135 = (unint64_t *)((char *)a2 + 37584);
  *(_QWORD *)(v122 + 24) = v124;
  if (*v92 >= *(unsigned __int8 *)(v122 + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v122);
    v124 = *(_QWORD *)(v122 + 24);
  }
  *(_BYTE *)(v124 + 21) = *(_BYTE *)(v124 + 21) & 0xE3 | 4;
  *(_QWORD *)(this + 72) = v122;
  if (*v92 >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v122 = *(_QWORD *)(this + 72);
  }
  v136 = *((_QWORD *)a2 + 4720);
  if (v136 < *((_QWORD *)a2 + 4721))
    goto LABEL_77;
  v136 = *((_QWORD *)a2 + 4722);
  if ((v136 & 1) == 0)
  {
    v2156 = *(_QWORD *)(v136 + 8) ^ *((_QWORD *)a2 + 4723);
    *((_QWORD *)a2 + 4721) = v136 + HIDWORD(v2156);
    *((_QWORD *)a2 + 4722) = v136 + (int)v2156;
LABEL_77:
    *((_QWORD *)a2 + 4720) = v136 + 32;
    goto LABEL_78;
  }
  JSC::sanitizeStackForVM(a2, v125, v126, v127, v128, v129, v130, v131);
  v136 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 37736, (uint64_t)v3758, 32, 0, 0, v2380, v2381, v2382);
LABEL_78:
  *(_DWORD *)v136 = 0;
  v137 = *(_DWORD *)(this + 936);
  if (v137)
    v138 = 16 * (v137 & 0xFFFFFFFE);
  else
    v138 = 0;
  v139 = JSC::JSCallee::JSCallee((JSC::JSCell *)v136, (uint64_t)a2, v122, v138);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(this + 88) = v139;
  if (*v92 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v147 = *(_QWORD *)(this + 72);
  v148 = *((_QWORD *)a2 + 4720);
  if (v148 < *((_QWORD *)a2 + 4721))
    goto LABEL_86;
  v148 = *((_QWORD *)a2 + 4722);
  if ((v148 & 1) == 0)
  {
    v2157 = *(_QWORD *)(v148 + 8) ^ *((_QWORD *)a2 + 4723);
    *((_QWORD *)a2 + 4721) = v148 + HIDWORD(v2157);
    *((_QWORD *)a2 + 4722) = v148 + (int)v2157;
LABEL_86:
    *((_QWORD *)a2 + 4720) = v148 + 32;
    goto LABEL_87;
  }
  JSC::sanitizeStackForVM(a2, v140, v141, v142, v143, v144, v145, v146);
  v148 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 37736, (uint64_t)v3758, 32, 0, 0, v2383, v2384, v2385);
LABEL_87:
  *(_DWORD *)v148 = 0;
  v149 = *(_DWORD *)(this + 936);
  if (v149)
    v150 = 16 * (v149 & 0xFFFFFFFE);
  else
    v150 = 0;
  v151 = JSC::JSCallee::JSCallee((JSC::JSCell *)v148, (uint64_t)a2, v147, v150);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(this + 96) = v151;
  if (*v92 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v160 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 67440154;
  if ((v160 & 0xFFFE000000000002) == 0 && v160 && *(unsigned __int8 *)(v160 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v160, a2, v159, v153, v154, v155, v156, v157, v158);
  v161 = *((_QWORD *)a2 + 5017);
  if (v161 < *((_QWORD *)a2 + 5018))
    goto LABEL_99;
  v161 = *((_QWORD *)a2 + 5019);
  if ((v161 & 1) == 0)
  {
    v2158 = *(_QWORD *)(v161 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v161 + HIDWORD(v2158);
    *((_QWORD *)a2 + 5019) = v161 + (int)v2158;
LABEL_99:
    *((_QWORD *)a2 + 5017) = v161 + 128;
    goto LABEL_100;
  }
  JSC::sanitizeStackForVM(a2, v152, v153, v154, v155, v156, v157, v158);
  v161 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40112, (uint64_t)v3758, 128, 0, 0, v2386, v2387, v2388);
LABEL_100:
  *(_DWORD *)v161 = 0;
  v162 = JSC::Structure::Structure(v161, (uint64_t)a2, this, v160, (uint64_t)v3772, (unint64_t)&JSC::JSFunction::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 940) = v162 >> 4;
  if (*v92 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v3771[0] = (uint64_t)a2;
  v3771[1] = this;
  JSC::JSGlobalObject::init(JSC::VM &)::$_0::operator()(v3771, (JSC::VM *)(this + 944), v163, v164, v165, v166, v167, v168, v169);
  JSC::JSGlobalObject::init(JSC::VM &)::$_0::operator()(v3771, (JSC::VM *)(this + 956), v170, v171, v172, v173, v174, v175, v176);
  v185 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 67439642;
  if ((v185 & 0xFFFE000000000002) == 0 && v185 && *(unsigned __int8 *)(v185 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v185, a2, v184, v178, v179, v180, v181, v182, v183);
  v186 = *((_QWORD *)a2 + 5017);
  if (v186 < *((_QWORD *)a2 + 5018))
    goto LABEL_109;
  v186 = *((_QWORD *)a2 + 5019);
  if ((v186 & 1) == 0)
  {
    v2159 = *(_QWORD *)(v186 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v186 + HIDWORD(v2159);
    *((_QWORD *)a2 + 5019) = v186 + (int)v2159;
LABEL_109:
    *((_QWORD *)a2 + 5017) = v186 + 128;
    goto LABEL_110;
  }
  JSC::sanitizeStackForVM(a2, v177, v178, v179, v180, v181, v182, v183);
  v186 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40112, (uint64_t)v3758, 128, 0, 0, v2389, v2390, v2391);
LABEL_110:
  *(_DWORD *)v186 = 0;
  v187 = JSC::Structure::Structure(v186, (uint64_t)a2, this, v185, (uint64_t)v3772, (unint64_t)&JSC::JSBoundFunction::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 968) = v187 >> 4;
  if (*v92 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_QWORD *)(this + 1024) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_1>(JSC::JSGlobalObject::init(JSC::VM &)::$_1 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1032) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_2>(JSC::JSGlobalObject::init(JSC::VM &)::$_2 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1040) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_3>(JSC::JSGlobalObject::init(JSC::VM &)::$_3 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1048) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_4>(JSC::JSGlobalObject::init(JSC::VM &)::$_4 const&)::theFunc
                           + 1;
  v3769 = 0;
  v3770 = 0;
  v3768 = 0;
  JSC::FunctionPrototype::addFunctionProperties(*(JSC::FunctionPrototype **)(this + 664), a2, (JSC::JSGlobalObject *)this, &v3770, &v3769, &v3768);
  *(_QWORD *)(this + 512) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_5>(JSC::JSGlobalObject::init(JSC::VM &)::$_5 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 520) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_6>(JSC::JSGlobalObject::init(JSC::VM &)::$_6 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 528) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_7>(JSC::JSGlobalObject::init(JSC::VM &)::$_7 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 536) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_8>(JSC::JSGlobalObject::init(JSC::VM &)::$_8 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 544) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_9>(JSC::JSGlobalObject::init(JSC::VM &)::$_9 const&)::theFunc
                          + 1;
  v196 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v196 <= 0xBDu)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF1A4);
  }
  *(_QWORD *)(v196 + 1520) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_10>(JSC::JSGlobalObject::init(JSC::VM &)::$_10 const&)::theFunc
                           + 1;
  v197 = v3768;
  *(_QWORD *)(this + 560) = v3768;
  if (v197 && *v92 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v198 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 67099;
  if ((v198 & 0xFFFE000000000002) == 0 && v198 && *(unsigned __int8 *)(v198 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v198, a2, v195, v189, v190, v191, v192, v193, v194);
  v199 = *((_QWORD *)a2 + 5017);
  if (v199 < *((_QWORD *)a2 + 5018))
    goto LABEL_121;
  v199 = *((_QWORD *)a2 + 5019);
  if ((v199 & 1) == 0)
  {
    v2161 = *(_QWORD *)(v199 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v199 + HIDWORD(v2161);
    *((_QWORD *)a2 + 5019) = v199 + (int)v2161;
LABEL_121:
    *((_QWORD *)a2 + 5017) = v199 + 128;
    goto LABEL_122;
  }
  JSC::sanitizeStackForVM(a2, v188, v189, v190, v191, v192, v193, v194);
  v199 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40112, (uint64_t)v3758, 128, 0, 0, v2392, v2393, v2394);
LABEL_122:
  *(_DWORD *)v199 = 0;
  JSC::Structure::Structure(v199, (uint64_t)a2, this, v198, (uint64_t)v3772, (unint64_t)&JSC::NullGetterFunction::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v207 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_125;
  v207 = *((_QWORD *)a2 + 4821);
  if ((v207 & 1) == 0)
  {
    v2162 = *(_QWORD *)(v207 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v207 + HIDWORD(v2162);
    *((_QWORD *)a2 + 4821) = v207 + (int)v2162;
LABEL_125:
    *v3765 = v207 + 48;
    goto LABEL_126;
  }
  JSC::sanitizeStackForVM(a2, v200, v201, v202, v203, v204, v205, v206);
  v207 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 38528, (uint64_t)v3758, 48, 0, 0, v2395, v2396, v2397);
LABEL_126:
  *(_DWORD *)v207 = 0;
  v208 = JSC::InternalFunction::InternalFunction(v207, (uint64_t)a2, v199, (uint64_t)JSC::NullGetterFunctionInternal::callReturnUndefined, 0);
  *(_QWORD *)v3772 = 0;
  JSC::InternalFunction::finishCreation(v208, a2, 0, (JSC::VM *)v3772, 1, v209, v210, v211);
  v220 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v220)
  {
    if (*(_DWORD *)v220 == 2)
    {
      WTF::StringImpl::~StringImpl(v220, v212, v213, v214, v215, v216, v217, v218);
      WTF::fastFree(v351, v352, v353, v354, v355, v356, v357, v358);
    }
    else
    {
      *(_DWORD *)v220 -= 2;
    }
  }
  *(_QWORD *)(this + 472) = v207;
  if (*v92 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v221 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 67100;
  if ((v221 & 0xFFFE000000000002) == 0 && v221 && *(unsigned __int8 *)(v221 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v221, a2, v219, v213, v214, v215, v216, v217, v218);
  v222 = *((_QWORD *)a2 + 5017);
  if (v222 < *((_QWORD *)a2 + 5018))
    goto LABEL_136;
  v222 = *((_QWORD *)a2 + 5019);
  if ((v222 & 1) == 0)
  {
    v2163 = *(_QWORD *)(v222 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v222 + HIDWORD(v2163);
    *((_QWORD *)a2 + 5019) = v222 + (int)v2163;
LABEL_136:
    *((_QWORD *)a2 + 5017) = v222 + 128;
    goto LABEL_137;
  }
  JSC::sanitizeStackForVM(a2, v212, v213, v214, v215, v216, v217, v218);
  v222 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40112, (uint64_t)v3758, 128, 0, 0, v2398, v2399, v2400);
LABEL_137:
  *(_DWORD *)v222 = 0;
  JSC::Structure::Structure(v222, (uint64_t)a2, this, v221, (uint64_t)v3772, (unint64_t)&JSC::NullSetterFunction::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v230 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_140;
  v230 = *((_QWORD *)a2 + 4821);
  if ((v230 & 1) == 0)
  {
    v2164 = *(_QWORD *)(v230 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v230 + HIDWORD(v2164);
    *((_QWORD *)a2 + 4821) = v230 + (int)v2164;
LABEL_140:
    *v3765 = v230 + 48;
    goto LABEL_141;
  }
  JSC::sanitizeStackForVM(a2, v223, v224, v225, v226, v227, v228, v229);
  v230 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 38528, (uint64_t)v3758, 48, 0, 0, v2401, v2402, v2403);
LABEL_141:
  *(_DWORD *)v230 = 0;
  v231 = JSC::InternalFunction::InternalFunction(v230, (uint64_t)a2, v222, (uint64_t)JSC::NullSetterFunctionInternal::callReturnUndefined, 0);
  *(_QWORD *)v3772 = 0;
  JSC::InternalFunction::finishCreation(v231, a2, 0, (JSC::VM *)v3772, 0, v232, v233, v234);
  v242 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v242)
  {
    if (*(_DWORD *)v242 == 2)
    {
      WTF::StringImpl::~StringImpl(v242, v235, v236, v237, v238, v239, v240, v241);
      WTF::fastFree(v359, v360, v361, v362, v363, v364, v365, v366);
    }
    else
    {
      *(_DWORD *)v242 -= 2;
    }
  }
  *(_QWORD *)(this + 480) = v230;
  if (*v92 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v243 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_147;
  v243 = *((_QWORD *)a2 + 4821);
  if ((v243 & 1) == 0)
  {
    v2165 = *(_QWORD *)(v243 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v243 + HIDWORD(v2165);
    *((_QWORD *)a2 + 4821) = v243 + (int)v2165;
LABEL_147:
    *v3765 = v243 + 48;
    goto LABEL_148;
  }
  JSC::sanitizeStackForVM(a2, v235, v236, v237, v238, v239, v240, v241);
  v243 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 38528, (uint64_t)v3758, 48, 0, 0, v2404, v2405, v2406);
LABEL_148:
  *(_DWORD *)v243 = 0;
  v244 = JSC::InternalFunction::InternalFunction(v243, (uint64_t)a2, v222, (uint64_t)JSC::NullSetterFunctionInternal::callThrowError, 0);
  *(_QWORD *)v3772 = 0;
  JSC::InternalFunction::finishCreation(v244, a2, 0, (JSC::VM *)v3772, 0, v245, v246, v247);
  v255 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v255)
  {
    if (*(_DWORD *)v255 == 2)
    {
      WTF::StringImpl::~StringImpl(v255, v248, v249, v250, v251, v252, v253, v254);
      WTF::fastFree(v367, v368, v369, v370, v371, v372, v373, v374);
    }
    else
    {
      *(_DWORD *)v255 -= 2;
    }
  }
  *(_QWORD *)(this + 488) = v243;
  if (*v92 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v256 = (unint64_t *)((char *)a2 + 38904);
  *(_DWORD *)v3772 = 4194327;
  v257 = *((_QWORD *)a2 + 5017);
  if (v257 < *((_QWORD *)a2 + 5018))
    goto LABEL_154;
  v257 = *((_QWORD *)a2 + 5019);
  if ((v257 & 1) == 0)
  {
    v2166 = *(_QWORD *)(v257 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v257 + HIDWORD(v2166);
    *((_QWORD *)a2 + 5019) = v257 + (int)v2166;
LABEL_154:
    *((_QWORD *)a2 + 5017) = v257 + 128;
    goto LABEL_155;
  }
  JSC::sanitizeStackForVM(a2, v248, v249, v250, v251, v252, v253, v254);
  v257 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 40112, (uint64_t)v3758, 128, 0, 0, v2407, v2408, v2409);
LABEL_155:
  *(_DWORD *)v257 = 0;
  JSC::Structure::Structure(v257, (uint64_t)a2, this, 2, (uint64_t)v3772, (unint64_t)&JSC::ObjectPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v3745 = (char *)a2 + 38880;
  v266 = *v256;
  if (*v256 < *((_QWORD *)a2 + 4864))
    goto LABEL_158;
  v266 = *((_QWORD *)a2 + 4865);
  if ((v266 & 1) == 0)
  {
    v2167 = *(_QWORD *)(v266 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v266 + HIDWORD(v2167);
    *((_QWORD *)a2 + 4865) = v266 + (int)v2167;
LABEL_158:
    *v256 = v266 + 16;
    goto LABEL_159;
  }
  JSC::sanitizeStackForVM(a2, v258, v259, v260, v261, v262, v263, v264);
  v266 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2410, v2411, v2412);
LABEL_159:
  *(_DWORD *)v266 = 0;
  v267 = *(_DWORD *)(v257 + 8);
  *(_DWORD *)v266 = v257 >> 4;
  *(_DWORD *)(v266 + 4) = v267;
  *(_QWORD *)(v266 + 8) = 0;
  JSC::ObjectPrototype::finishCreation((JSC::ObjectPrototype *)v266, a2, this, v265, v260, v261, v262, v263, v264);
  *(_QWORD *)(this + 656) = v266;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v266 = *(_QWORD *)(this + 656);
  }
  v3763 = (unint64_t *)((char *)a2 + 38904);
  JSC::JSObject::didBecomePrototype(v266, a2, v274, v268, v269, v270, v271, v272, v273);
  v275 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 16);
  v3764 = (unsigned int *)((char *)a2 + 760);
  if (v275)
  {
    v276 = *(_DWORD *)(v275 + 4);
    *(_DWORD *)v275 += 2;
    if ((v276 & 0x80000000) == 0)
    {
      v277 = (v276 + 4);
      if (!__OFADD__(v276, 4))
      {
        if ((*(_BYTE *)(v275 + 16) & 4) != 0)
          goto LABEL_165;
        if (v277 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v277 + 20), v3772);
          v278 = *(_QWORD *)v3772;
          if (*(_QWORD *)v3772)
          {
            v2329 = (char *)(*(_QWORD *)v3772 + 20);
            **(_DWORD **)v3772 = 2;
            *(_DWORD *)(v278 + 4) = v277;
            *(_QWORD *)(v278 + 8) = v278 + 20;
            *(_DWORD *)(v278 + 16) = 0;
            WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v2329, (int8x16_t *)"get ", 4, v275);
            goto LABEL_170;
          }
        }
      }
    }
LABEL_1972:
    *(_QWORD *)&v3766 = 0;
    __break(0xC471u);
    JUMPOUT(0x1989C29BCLL);
  }
  v277 = 4;
LABEL_165:
  WTF::tryFastCompactMalloc((WTF *)(v277 + 20), v3772);
  v278 = *(_QWORD *)v3772;
  if (!*(_QWORD *)v3772)
    goto LABEL_1972;
  **(_DWORD **)v3772 = 2;
  *(_DWORD *)(v278 + 4) = v277;
  *(_QWORD *)(v278 + 8) = v278 + 20;
  *(_QWORD *)(v278 + 16) = 0x2074656700000004;
  if (v275)
  {
    v279 = (_BYTE *)(v278 + 24);
    v280 = *(_BYTE **)(v275 + 8);
    v281 = *(unsigned int *)(v275 + 4);
    if ((*(_BYTE *)(v275 + 16) & 4) != 0)
    {
      if ((_DWORD)v281 == 1)
      {
        *v279 = *v280;
      }
      else if ((_DWORD)v281)
      {
        memcpy(v279, v280, v281);
      }
    }
    else
    {
      v2758 = &v279[v281];
      if (v281 >= 0x10)
      {
        v2759 = &v279[v281 & 0xFFFFFFF0];
        do
        {
          v2760 = (unsigned __int128)vld2q_s8(v280);
          v280 += 32;
          *(_OWORD *)v279 = v2760;
          v279 += 16;
        }
        while (v279 != v2759);
        v279 = v2759;
      }
      while (v279 != v2758)
      {
        v2761 = *v280;
        v280 += 2;
        *v279++ = v2761;
      }
    }
  }
LABEL_170:
  v3744 = (char *)a2 + 38528;
  *(_QWORD *)&v3766 = v278;
  v282 = JSC::JSFunction::create((uint64_t)a2, this, 0, (WTF::StringImpl **)&v3766, (uint64_t)JSC::globalFuncProtoGetter, 0, 154, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v283 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 16);
  v3746 = (char *)a2 + 40112;
  if (v283)
  {
    v284 = *(_DWORD *)(v283 + 4);
    *(_DWORD *)v283 += 2;
    if ((v284 & 0x80000000) == 0)
    {
      v285 = (v284 + 4);
      if (!__OFADD__(v284, 4))
      {
        if ((*(_BYTE *)(v283 + 16) & 4) != 0)
          goto LABEL_174;
        if (v285 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v285 + 20), v3772);
          v286 = *(_QWORD *)v3772;
          if (*(_QWORD *)v3772)
          {
            v2330 = (char *)(*(_QWORD *)v3772 + 20);
            **(_DWORD **)v3772 = 2;
            *(_DWORD *)(v286 + 4) = v285;
            *(_QWORD *)(v286 + 8) = v286 + 20;
            *(_DWORD *)(v286 + 16) = 0;
            WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v2330, (int8x16_t *)"set ", 4, v283);
            goto LABEL_179;
          }
        }
      }
    }
LABEL_1973:
    *(_QWORD *)v3772 = 0;
    __break(0xC471u);
    JUMPOUT(0x1989C29C8);
  }
  v285 = 4;
LABEL_174:
  WTF::tryFastCompactMalloc((WTF *)(v285 + 20), v3772);
  v286 = *(_QWORD *)v3772;
  if (!*(_QWORD *)v3772)
    goto LABEL_1973;
  **(_DWORD **)v3772 = 2;
  *(_DWORD *)(v286 + 4) = v285;
  *(_QWORD *)(v286 + 8) = v286 + 20;
  *(_QWORD *)(v286 + 16) = 0x2074657300000004;
  if (v283)
  {
    v287 = (_BYTE *)(v286 + 24);
    v288 = *(_BYTE **)(v283 + 8);
    v289 = *(unsigned int *)(v283 + 4);
    if ((*(_BYTE *)(v283 + 16) & 4) != 0)
    {
      if ((_DWORD)v289 == 1)
      {
        *v287 = *v288;
      }
      else if ((_DWORD)v289)
      {
        memcpy(v287, v288, v289);
      }
    }
    else
    {
      v2762 = &v287[v289];
      if (v289 >= 0x10)
      {
        v2763 = &v287[v289 & 0xFFFFFFF0];
        do
        {
          v2764 = (unsigned __int128)vld2q_s8(v288);
          v288 += 32;
          *(_OWORD *)v287 = v2764;
          v287 += 16;
        }
        while (v287 != v2763);
        v287 = v2763;
      }
      while (v287 != v2762)
      {
        v2765 = *v288;
        v288 += 2;
        *v287++ = v2765;
      }
    }
  }
LABEL_179:
  *(_QWORD *)v3772 = v286;
  v297 = JSC::JSFunction::create((uint64_t)a2, this, 0, (WTF::StringImpl **)v3772, (uint64_t)JSC::globalFuncProtoSetter, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v299 = *((_QWORD *)a2 + 4797);
  if (v299 < *((_QWORD *)a2 + 4798))
  {
LABEL_180:
    *((_QWORD *)a2 + 4797) = v299 + 32;
    goto LABEL_181;
  }
  v299 = *((_QWORD *)a2 + 4799);
  if ((v299 & 1) == 0)
  {
    v2168 = *(_QWORD *)(v299 + 8) ^ *((_QWORD *)a2 + 4800);
    *((_QWORD *)a2 + 4798) = v299 + HIDWORD(v2168);
    *((_QWORD *)a2 + 4799) = v299 + (int)v2168;
    goto LABEL_180;
  }
  JSC::sanitizeStackForVM(a2, v290, v291, v292, v293, v294, v295, v296);
  v299 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 38352, (uint64_t)v3758, 32, 0, 0, v2413, v2414, v2415);
LABEL_181:
  *(_DWORD *)v299 = 0;
  v300 = *((_QWORD *)a2 + 5191);
  v301 = *(_DWORD *)(v300 + 8);
  *(_DWORD *)v299 = v300 >> 4;
  *(_DWORD *)(v299 + 4) = v301;
  *(_QWORD *)(v299 + 8) = 0;
  *(_QWORD *)(v299 + 16) = 0;
  v302 = (uint64_t *)(v299 + 8);
  __dmb(0xAu);
  if (v282)
  {
    *v302 = v282;
  }
  else
  {
    v2145 = *(_QWORD *)(this + 472);
    *v302 = v2145;
    if (!v2145)
      goto LABEL_185;
  }
  if (*v3764 >= *(unsigned __int8 *)(v299 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v299);
LABEL_185:
  if (v297)
  {
    *(_QWORD *)(v299 + 16) = v297;
  }
  else
  {
    v303 = *(_QWORD *)(this + 480);
    *(_QWORD *)(v299 + 16) = v303;
    if (!v303)
      goto LABEL_187;
  }
  if (*v3764 >= *(unsigned __int8 *)(v299 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v299);
LABEL_187:
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v304 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v304)
  {
    if (*(_DWORD *)v304 == 2)
    {
      WTF::StringImpl::~StringImpl(v304, v290, v291, v292, v293, v294, v295, v296);
      WTF::fastFree(v375, v376, v377, v378, v379, v380, v381, v382);
    }
    else
    {
      *(_DWORD *)v304 -= 2;
    }
  }
  if (v283)
  {
    if (*(_DWORD *)v283 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v283, v290, v291, v292, v293, v294, v295, v296);
      WTF::fastFree(v383, v384, v385, v386, v387, v388, v389, v390);
    }
    else
    {
      *(_DWORD *)v283 -= 2;
    }
  }
  v305 = (WTF::StringImpl *)v3766;
  *(_QWORD *)&v3766 = 0;
  if (v305)
  {
    if (*(_DWORD *)v305 == 2)
    {
      WTF::StringImpl::~StringImpl(v305, v290, v291, v292, v293, v294, v295, v296);
      WTF::fastFree(v391, v392, v393, v394, v395, v396, v397, v398);
    }
    else
    {
      *(_DWORD *)v305 -= 2;
    }
  }
  if (v275)
  {
    if (*(_DWORD *)v275 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v275, v290, v291, v292, v293, v294, v295, v296);
      WTF::fastFree(v399, v400, v401, v402, v403, v404, v405, v406);
    }
    else
    {
      *(_DWORD *)v275 -= 2;
    }
  }
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition(*(unsigned int **)(this + 656), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 16), v299, (const JSC::PropertyTable *)0x14, v294, v295, v296, v298);
  v309 = 16 * (**(_DWORD **)(this + 664) & 0xFFFFFFFE);
  v310 = *(JSC::JSObject **)(this + 656);
  *(_QWORD *)(v309 + 0x30) = v310;
  if (v310)
  {
    v311 = (unsigned int *)((char *)a2 + 760);
    if (((unint64_t)v310 & 0xFFFE000000000002) == 0 && *v3764 >= *(unsigned __int8 *)(v309 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v309);
      v310 = *(JSC::JSObject **)(this + 656);
    }
  }
  else
  {
    v311 = (unsigned int *)((char *)a2 + 760);
  }
  v314 = JSC::StructureCache::emptyObjectStructureForPrototype((JSC::StructureCache *)(this + 1968), (JSC::JSGlobalObject *)this, v310, 6, 0, 0, v306, v307, v308);
  if (v314)
  {
    *(_DWORD *)(this + 848) = v314 >> 4;
    if (*v311 >= *(unsigned __int8 *)(this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  }
  else
  {
    *(_DWORD *)(this + 848) = 0;
  }
  v320 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2616);
  if (!(v320 >> 4))
    goto LABEL_258;
  v321 = *(_QWORD *)(this + 656);
  if (((v320 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v321 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_258;
  v322 = *(_QWORD *)(16 * (*(_DWORD *)v321 & 0xFFFFFFFE) + 0x58);
  if (!v322)
  {
    v342 = *(_QWORD *)(16 * (*(_DWORD *)v321 & 0xFFFFFFFE) + 0x40);
    if (!v342 || *(_BYTE *)(v342 + 5) != 1 && *(_DWORD *)(v342 + 80) < 2u)
      goto LABEL_258;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v321 & 0xFFFFFFFE)), a2, 1, v315, v316, v317, v318, v319);
    if (!v322)
      goto LABEL_258;
  }
  if (!*(_DWORD *)(v322 + 24))
    goto LABEL_258;
  v323 = *(_QWORD *)(v322 + 16);
  v324 = v323 & 0xFFFFFFFFFFFFFFFELL;
  v325 = *(unsigned int *)(v322 + 8);
  v326 = *(_DWORD *)(v320 + 16);
  if ((v323 & 1) != 0)
  {
    if ((v326 & 0x20) != 0)
      v326 = *(_DWORD *)(v320 + 32);
    v327 = *(_DWORD *)(v322 + 12);
    v328 = (v326 >> 8) & *(_QWORD *)&v327;
    v329 = *(unsigned __int8 *)(v324 + v328);
    if (!*(_BYTE *)(v324 + v328))
      goto LABEL_258;
    v330 = v324 + v325;
    v331 = 1;
    while (1)
    {
      v332 = *(_QWORD *)(v330 + 8 * (v329 - 1));
      if (v320 == (v332 & 0xFFFFFFFFFFFFLL))
        break;
      v328 = ((_DWORD)v328 + v331) & v327;
      v329 = *(unsigned __int8 *)(v324 + v328);
      ++v331;
      if (!*(_BYTE *)(v324 + v328))
        goto LABEL_258;
    }
    v409 = HIBYTE(v332);
  }
  else
  {
    if ((v326 & 0x20) != 0)
      v326 = *(_DWORD *)(v320 + 32);
    v2133 = *(_DWORD *)(v322 + 12);
    v2134 = v2133 & (v326 >> 8);
    v2135 = *(_DWORD *)(v324 + 4 * v2134);
    if (!v2135)
      goto LABEL_258;
    v2136 = v324 + 4 * v325;
    v2137 = 1;
    while (1)
    {
      v2138 = (v2135 - 1);
      if (*(_QWORD *)(v2136 + 16 * v2138) == v320)
        break;
      v2134 = (v2134 + v2137) & v2133;
      v2135 = *(_DWORD *)(v324 + 4 * v2134);
      ++v2137;
      if (!v2135)
        goto LABEL_258;
    }
    v409 = *(unsigned int *)(v2136 + 16 * v2138 + 8);
  }
  if ((_DWORD)v409 == -1)
  {
LABEL_258:
    *(_QWORD *)(this + 552) = 0;
    goto LABEL_259;
  }
  if ((int)v409 <= 63)
  {
    v2348 = v321 + 16;
    v2349 = v409 << 32;
  }
  else
  {
    v2348 = *(_QWORD *)(v321 + 8) - 8;
    v2349 = 0x3F00000000 - (v409 << 32);
  }
  v2350 = *(_QWORD *)(v2348 + (v2349 >> 29));
  *(_QWORD *)(this + 552) = v2350;
  v311 = (unsigned int *)((char *)a2 + 760);
  if (v2350 && *v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
LABEL_259:
  v410 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v410 = 0xE00000002;
  *(_QWORD *)(v410 + 8) = "targetFunction";
  *(_DWORD *)(v410 + 16) = 4;
  *(_QWORD *)v3772 = v410;
  v411 = JSC::JSFunction::create((uint64_t)a2, this, 1, (WTF::StringImpl **)v3772, (uint64_t)JSC::consoleTargetFunction, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  *(_QWORD *)(this + 104) = v411;
  if (v411 && *v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v419 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v419)
  {
    if (*(_DWORD *)v419 == 2)
    {
      WTF::StringImpl::~StringImpl(v419, v412, v413, v414, v415, v416, v417, v418);
      WTF::fastFree(v2014, v2015, v2016, v2017, v2018, v2019, v2020, v2021);
    }
    else
    {
      *(_DWORD *)v419 -= 2;
    }
  }
  v420 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v420 = 0x1400000002;
  *(_QWORD *)(v420 + 8) = "get [Symbol.species]";
  *(_DWORD *)(v420 + 16) = 4;
  *(_QWORD *)v3772 = v420;
  v428 = JSC::JSFunction::create((uint64_t)a2, this, 0, (WTF::StringImpl **)v3772, (uint64_t)JSC::globalFuncSpeciesGetter, 0, 155, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v429 = *((_QWORD *)a2 + 4797);
  if (v429 < *((_QWORD *)a2 + 4798))
    goto LABEL_264;
  v429 = *((_QWORD *)a2 + 4799);
  if ((v429 & 1) == 0)
  {
    v2169 = *(_QWORD *)(v429 + 8) ^ *((_QWORD *)a2 + 4800);
    *((_QWORD *)a2 + 4798) = v429 + HIDWORD(v2169);
    *((_QWORD *)a2 + 4799) = v429 + (int)v2169;
LABEL_264:
    *((_QWORD *)a2 + 4797) = v429 + 32;
    goto LABEL_265;
  }
  JSC::sanitizeStackForVM(a2, v421, v422, v423, v424, v425, v426, v427);
  v429 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 38352, (uint64_t)v3758, 32, 0, 0, v2416, v2417, v2418);
LABEL_265:
  *(_DWORD *)v429 = 0;
  v430 = *((_QWORD *)a2 + 5191);
  v431 = *(_DWORD *)(v430 + 8);
  *(_DWORD *)v429 = v430 >> 4;
  *(_DWORD *)(v429 + 4) = v431;
  *(_QWORD *)(v429 + 8) = 0;
  *(_QWORD *)(v429 + 16) = 0;
  v432 = (uint64_t *)(v429 + 8);
  __dmb(0xAu);
  if (v428)
  {
    *v432 = v428;
  }
  else
  {
    v2146 = *(_QWORD *)(this + 472);
    *v432 = v2146;
    if (!v2146)
      goto LABEL_269;
  }
  if (*v311 >= *(unsigned __int8 *)(v429 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v429);
LABEL_269:
  v433 = *(_QWORD *)(this + 480);
  *(_QWORD *)(v429 + 16) = v433;
  if (v433 && *v311 >= *(unsigned __int8 *)(v429 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v429);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(this + 1616) = v429;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v434 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v434)
  {
    if (*(_DWORD *)v434 == 2)
    {
      WTF::StringImpl::~StringImpl(v434, v421, v422, v423, v424, v425, v426, v427);
      WTF::fastFree(v2022, v2023, v2024, v2025, v2026, v2027, v2028, v2029);
    }
    else
    {
      *(_DWORD *)v434 -= 2;
    }
  }
  v435 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v435 = 0x1400000002;
  *(_QWORD *)(v435 + 8) = "get [Symbol.species]";
  *(_DWORD *)(v435 + 16) = 4;
  *(_QWORD *)v3772 = v435;
  v443 = JSC::JSFunction::create((uint64_t)a2, this, 0, (WTF::StringImpl **)v3772, (uint64_t)JSC::globalFuncSpeciesGetter, 0, 155, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v444 = *((_QWORD *)a2 + 4797);
  if (v444 < *((_QWORD *)a2 + 4798))
    goto LABEL_278;
  v444 = *((_QWORD *)a2 + 4799);
  if ((v444 & 1) == 0)
  {
    v2170 = *(_QWORD *)(v444 + 8) ^ *((_QWORD *)a2 + 4800);
    *((_QWORD *)a2 + 4798) = v444 + HIDWORD(v2170);
    *((_QWORD *)a2 + 4799) = v444 + (int)v2170;
LABEL_278:
    *((_QWORD *)a2 + 4797) = v444 + 32;
    goto LABEL_279;
  }
  JSC::sanitizeStackForVM(a2, v436, v437, v438, v439, v440, v441, v442);
  v444 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 38352, (uint64_t)v3758, 32, 0, 0, v2419, v2420, v2421);
LABEL_279:
  *(_DWORD *)v444 = 0;
  v445 = *((_QWORD *)a2 + 5191);
  v446 = *(_DWORD *)(v445 + 8);
  *(_DWORD *)v444 = v445 >> 4;
  *(_DWORD *)(v444 + 4) = v446;
  *(_QWORD *)(v444 + 8) = 0;
  *(_QWORD *)(v444 + 16) = 0;
  v447 = (uint64_t *)(v444 + 8);
  __dmb(0xAu);
  if (v443)
  {
    *v447 = v443;
  }
  else
  {
    v2147 = *(_QWORD *)(this + 472);
    *v447 = v2147;
    if (!v2147)
      goto LABEL_283;
  }
  if (*v311 >= *(unsigned __int8 *)(v444 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v444);
LABEL_283:
  v448 = *(_QWORD *)(this + 480);
  *(_QWORD *)(v444 + 16) = v448;
  if (v448 && *v311 >= *(unsigned __int8 *)(v444 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v444);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(this + 1624) = v444;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v449 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v449)
  {
    if (*(_DWORD *)v449 == 2)
    {
      WTF::StringImpl::~StringImpl(v449, v436, v437, v438, v439, v440, v441, v442);
      WTF::fastFree(v2030, v2031, v2032, v2033, v2034, v2035, v2036, v2037);
    }
    else
    {
      *(_DWORD *)v449 -= 2;
    }
  }
  v450 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v450 = 0x1400000002;
  *(_QWORD *)(v450 + 8) = "get [Symbol.species]";
  *(_DWORD *)(v450 + 16) = 4;
  *(_QWORD *)v3772 = v450;
  v458 = JSC::JSFunction::create((uint64_t)a2, this, 0, (WTF::StringImpl **)v3772, (uint64_t)JSC::globalFuncSpeciesGetter, 0, 155, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v459 = *((_QWORD *)a2 + 4797);
  if (v459 < *((_QWORD *)a2 + 4798))
    goto LABEL_292;
  v459 = *((_QWORD *)a2 + 4799);
  if ((v459 & 1) == 0)
  {
    v2171 = *(_QWORD *)(v459 + 8) ^ *((_QWORD *)a2 + 4800);
    *((_QWORD *)a2 + 4798) = v459 + HIDWORD(v2171);
    *((_QWORD *)a2 + 4799) = v459 + (int)v2171;
LABEL_292:
    *((_QWORD *)a2 + 4797) = v459 + 32;
    goto LABEL_293;
  }
  JSC::sanitizeStackForVM(a2, v451, v452, v453, v454, v455, v456, v457);
  v459 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 38352, (uint64_t)v3758, 32, 0, 0, v2422, v2423, v2424);
LABEL_293:
  *(_DWORD *)v459 = 0;
  v460 = *((_QWORD *)a2 + 5191);
  v461 = *(_DWORD *)(v460 + 8);
  *(_DWORD *)v459 = v460 >> 4;
  *(_DWORD *)(v459 + 4) = v461;
  *(_QWORD *)(v459 + 8) = 0;
  *(_QWORD *)(v459 + 16) = 0;
  v462 = (uint64_t *)(v459 + 8);
  __dmb(0xAu);
  if (v458)
  {
    *v462 = v458;
  }
  else
  {
    v2148 = *(_QWORD *)(this + 472);
    *v462 = v2148;
    if (!v2148)
      goto LABEL_297;
  }
  if (*v311 >= *(unsigned __int8 *)(v459 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v459);
LABEL_297:
  v463 = *(_QWORD *)(this + 480);
  *(_QWORD *)(v459 + 16) = v463;
  if (v463 && *v311 >= *(unsigned __int8 *)(v459 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v459);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(this + 1632) = v459;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v464 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v464)
  {
    if (*(_DWORD *)v464 == 2)
    {
      WTF::StringImpl::~StringImpl(v464, v451, v452, v453, v454, v455, v456, v457);
      WTF::fastFree(v2038, v2039, v2040, v2041, v2042, v2043, v2044, v2045);
    }
    else
    {
      *(_DWORD *)v464 -= 2;
    }
  }
  v465 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v465 = 0x1400000002;
  *(_QWORD *)(v465 + 8) = "get [Symbol.species]";
  *(_DWORD *)(v465 + 16) = 4;
  *(_QWORD *)v3772 = v465;
  v473 = JSC::JSFunction::create((uint64_t)a2, this, 0, (WTF::StringImpl **)v3772, (uint64_t)JSC::globalFuncSpeciesGetter, 0, 155, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v474 = *((_QWORD *)a2 + 4797);
  if (v474 < *((_QWORD *)a2 + 4798))
    goto LABEL_306;
  v474 = *((_QWORD *)a2 + 4799);
  if ((v474 & 1) == 0)
  {
    v2172 = *(_QWORD *)(v474 + 8) ^ *((_QWORD *)a2 + 4800);
    *((_QWORD *)a2 + 4798) = v474 + HIDWORD(v2172);
    *((_QWORD *)a2 + 4799) = v474 + (int)v2172;
LABEL_306:
    *((_QWORD *)a2 + 4797) = v474 + 32;
    goto LABEL_307;
  }
  JSC::sanitizeStackForVM(a2, v466, v467, v468, v469, v470, v471, v472);
  v474 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 38352, (uint64_t)v3758, 32, 0, 0, v2425, v2426, v2427);
LABEL_307:
  *(_DWORD *)v474 = 0;
  v475 = *((_QWORD *)a2 + 5191);
  v476 = *(_DWORD *)(v475 + 8);
  *(_DWORD *)v474 = v475 >> 4;
  *(_DWORD *)(v474 + 4) = v476;
  *(_QWORD *)(v474 + 8) = 0;
  *(_QWORD *)(v474 + 16) = 0;
  v477 = (uint64_t *)(v474 + 8);
  __dmb(0xAu);
  if (v473)
  {
    *v477 = v473;
  }
  else
  {
    v2149 = *(_QWORD *)(this + 472);
    *v477 = v2149;
    if (!v2149)
      goto LABEL_311;
  }
  if (*v311 >= *(unsigned __int8 *)(v474 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v474);
LABEL_311:
  v478 = *(_QWORD *)(this + 480);
  *(_QWORD *)(v474 + 16) = v478;
  if (v478 && *v311 >= *(unsigned __int8 *)(v474 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, v474);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(this + 1640) = v474;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v479 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v479)
  {
    if (*(_DWORD *)v479 == 2)
    {
      WTF::StringImpl::~StringImpl(v479, v466, v467, v468, v469, v470, v471, v472);
      WTF::fastFree(v2046, v2047, v2048, v2049, v2050, v2051, v2052, v2053);
    }
    else
    {
      *(_DWORD *)v479 -= 2;
    }
  }
  *(_QWORD *)(this + 640) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::GetterSetter>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_11>(JSC::JSGlobalObject::init(JSC::VM &)::$_11 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 1648) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSTypedArrayViewPrototype>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_12>(JSC::JSGlobalObject::init(JSC::VM &)::$_12 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1656) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSTypedArrayViewConstructor>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_13>(JSC::JSGlobalObject::init(JSC::VM &)::$_13 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1664) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_14>(JSC::JSGlobalObject::init(JSC::VM &)::$_14 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_14 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1680) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_15>(JSC::JSGlobalObject::init(JSC::VM &)::$_15 const&)::theFunc
                           + 1;
  v480 = *(_QWORD *)(this + 1960);
  v481 = *(_DWORD *)v480;
  if (*(_DWORD *)v480 <= 0xD2u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF3ECLL);
  }
  *(_QWORD *)(v480 + 1688) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_16>(JSC::JSGlobalObject::init(JSC::VM &)::$_16 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1688) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_17>(JSC::JSGlobalObject::init(JSC::VM &)::$_17 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_17 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1704) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_18>(JSC::JSGlobalObject::init(JSC::VM &)::$_18 const&)::theFunc
                           + 1;
  if (v481 == 211)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF44CLL);
  }
  *(_QWORD *)(v480 + 1696) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_19>(JSC::JSGlobalObject::init(JSC::VM &)::$_19 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1712) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_20>(JSC::JSGlobalObject::init(JSC::VM &)::$_20 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_20 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1728) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_21>(JSC::JSGlobalObject::init(JSC::VM &)::$_21 const&)::theFunc
                           + 1;
  if (v481 <= 0xD4)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF46CLL);
  }
  *(_QWORD *)(v480 + 1704) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_22>(JSC::JSGlobalObject::init(JSC::VM &)::$_22 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1736) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_23>(JSC::JSGlobalObject::init(JSC::VM &)::$_23 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_23 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1752) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_24>(JSC::JSGlobalObject::init(JSC::VM &)::$_24 const&)::theFunc
                           + 1;
  if (v481 == 213)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF48CLL);
  }
  *(_QWORD *)(v480 + 1712) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_25>(JSC::JSGlobalObject::init(JSC::VM &)::$_25 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1760) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_26>(JSC::JSGlobalObject::init(JSC::VM &)::$_26 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_26 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1776) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_27>(JSC::JSGlobalObject::init(JSC::VM &)::$_27 const&)::theFunc
                           + 1;
  if (v481 <= 0xD6)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF4ACLL);
  }
  *(_QWORD *)(v480 + 1720) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_28>(JSC::JSGlobalObject::init(JSC::VM &)::$_28 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1784) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_29>(JSC::JSGlobalObject::init(JSC::VM &)::$_29 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_29 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1800) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_30>(JSC::JSGlobalObject::init(JSC::VM &)::$_30 const&)::theFunc
                           + 1;
  if (v481 == 215)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF4CCLL);
  }
  *(_QWORD *)(v480 + 1728) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_31>(JSC::JSGlobalObject::init(JSC::VM &)::$_31 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1808) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_32>(JSC::JSGlobalObject::init(JSC::VM &)::$_32 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_32 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1824) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_33>(JSC::JSGlobalObject::init(JSC::VM &)::$_33 const&)::theFunc
                           + 1;
  if (v481 <= 0xD8)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF4ECLL);
  }
  *(_QWORD *)(v480 + 1736) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_34>(JSC::JSGlobalObject::init(JSC::VM &)::$_34 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1832) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_35>(JSC::JSGlobalObject::init(JSC::VM &)::$_35 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_35 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1848) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_36>(JSC::JSGlobalObject::init(JSC::VM &)::$_36 const&)::theFunc
                           + 1;
  if (v481 == 217)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF50CLL);
  }
  *(_QWORD *)(v480 + 1744) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_37>(JSC::JSGlobalObject::init(JSC::VM &)::$_37 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1856) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_38>(JSC::JSGlobalObject::init(JSC::VM &)::$_38 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_38 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1872) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_39>(JSC::JSGlobalObject::init(JSC::VM &)::$_39 const&)::theFunc
                           + 1;
  if (v481 <= 0xDA)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF52CLL);
  }
  *(_QWORD *)(v480 + 1752) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_40>(JSC::JSGlobalObject::init(JSC::VM &)::$_40 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1880) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_41>(JSC::JSGlobalObject::init(JSC::VM &)::$_41 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_41 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1896) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_42>(JSC::JSGlobalObject::init(JSC::VM &)::$_42 const&)::theFunc
                           + 1;
  if (v481 == 219)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF54CLL);
  }
  *(_QWORD *)(v480 + 1760) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_43>(JSC::JSGlobalObject::init(JSC::VM &)::$_43 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1904) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_44>(JSC::JSGlobalObject::init(JSC::VM &)::$_44 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_44 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1920) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_45>(JSC::JSGlobalObject::init(JSC::VM &)::$_45 const&)::theFunc
                           + 1;
  if (v481 <= 0xDC)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BF56CLL);
  }
  *(_QWORD *)(v480 + 1768) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_46>(JSC::JSGlobalObject::init(JSC::VM &)::$_46 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1928) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_47>(JSC::JSGlobalObject::init(JSC::VM &)::$_47 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_47 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1944) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_48>(JSC::JSGlobalObject::init(JSC::VM &)::$_48 const&)::theFunc
                           + 1;
  *(_DWORD *)v3772 = 67373109;
  v482 = *((_QWORD *)a2 + 5017);
  if (v482 < *((_QWORD *)a2 + 5018))
    goto LABEL_331;
  v482 = *((_QWORD *)a2 + 5019);
  if ((v482 & 1) == 0)
  {
    v2173 = *(_QWORD *)(v482 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v482 + HIDWORD(v2173);
    *((_QWORD *)a2 + 5019) = v482 + (int)v2173;
LABEL_331:
    *((_QWORD *)a2 + 5017) = v482 + 128;
    goto LABEL_332;
  }
  JSC::sanitizeStackForVM(a2, v466, v467, v468, v469, v470, v471, v472);
  v482 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2428, v2429, v2430);
LABEL_332:
  *(_DWORD *)v482 = 0;
  v483 = JSC::Structure::Structure(v482, (uint64_t)a2, this, 2, (uint64_t)v3772, (unint64_t)&JSC::JSLexicalEnvironment::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 832) = v483 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_QWORD *)(this + 784) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_49>(JSC::JSGlobalObject::init(JSC::VM &)::$_49 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 776) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_50>(JSC::JSGlobalObject::init(JSC::VM &)::$_50 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 760) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_51>(JSC::JSGlobalObject::init(JSC::VM &)::$_51 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 768) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_52>(JSC::JSGlobalObject::init(JSC::VM &)::$_52 const&)::theFunc
                          + 1;
  *(_DWORD *)v3772 = 24;
  v491 = *((_QWORD *)a2 + 5017);
  if (v491 < *((_QWORD *)a2 + 5018))
    goto LABEL_337;
  v491 = *((_QWORD *)a2 + 5019);
  if ((v491 & 1) == 0)
  {
    v2174 = *(_QWORD *)(v491 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v491 + HIDWORD(v2174);
    *((_QWORD *)a2 + 5019) = v491 + (int)v2174;
LABEL_337:
    *((_QWORD *)a2 + 5017) = v491 + 128;
    goto LABEL_338;
  }
  JSC::sanitizeStackForVM(a2, v484, v485, v486, v487, v488, v489, v490);
  v491 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2431, v2432, v2433);
LABEL_338:
  *(_DWORD *)v491 = 0;
  v492 = JSC::Structure::Structure(v491, (uint64_t)a2, this, 2, (uint64_t)v3772, (unint64_t)&JSC::JSFinalObject::s_info, 0, 6);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 932) = v492 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_QWORD *)(this + 800) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_53>(JSC::JSGlobalObject::init(JSC::VM &)::$_53 const&)::theFunc
                          + 1;
  v501 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 84019233;
  if ((v501 & 0xFFFE000000000002) == 0 && v501 && *(unsigned __int8 *)(v501 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v501, a2, v500, v494, v495, v496, v497, v498, v499);
  v502 = *((_QWORD *)a2 + 5017);
  if (v502 < *((_QWORD *)a2 + 5018))
    goto LABEL_347;
  v502 = *((_QWORD *)a2 + 5019);
  if ((v502 & 1) == 0)
  {
    v2175 = *(_QWORD *)(v502 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v502 + HIDWORD(v2175);
    *((_QWORD *)a2 + 5019) = v502 + (int)v2175;
LABEL_347:
    *((_QWORD *)a2 + 5017) = v502 + 128;
    goto LABEL_348;
  }
  JSC::sanitizeStackForVM(a2, v493, v494, v495, v496, v497, v498, v499);
  v502 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2434, v2435, v2436);
LABEL_348:
  *(_DWORD *)v502 = 0;
  v503 = JSC::Structure::Structure(v502, (uint64_t)a2, this, v501, (uint64_t)v3772, (unint64_t)&JSC::DirectArguments::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 836) = v503 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v512 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 84019234;
  if ((v512 & 0xFFFE000000000002) == 0 && v512 && *(unsigned __int8 *)(v512 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v512, a2, v511, v505, v506, v507, v508, v509, v510);
  v513 = *((_QWORD *)a2 + 5017);
  if (v513 < *((_QWORD *)a2 + 5018))
    goto LABEL_357;
  v513 = *((_QWORD *)a2 + 5019);
  if ((v513 & 1) == 0)
  {
    v2176 = *(_QWORD *)(v513 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v513 + HIDWORD(v2176);
    *((_QWORD *)a2 + 5019) = v513 + (int)v2176;
LABEL_357:
    *((_QWORD *)a2 + 5017) = v513 + 128;
    goto LABEL_358;
  }
  JSC::sanitizeStackForVM(a2, v504, v505, v506, v507, v508, v509, v510);
  v513 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2437, v2438, v2439);
LABEL_358:
  *(_DWORD *)v513 = 0;
  v514 = JSC::Structure::Structure(v513, (uint64_t)a2, this, v512, (uint64_t)v3772, (unint64_t)&JSC::ScopedArguments::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 840) = v514 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  Structure = JSC::ClonedArguments::createStructure((uint64_t)a2, (JSC::VM *)this, *(_QWORD *)(this + 656), 8, v515, v516, v517, v518, v519);
  if (Structure)
  {
    *(_DWORD *)(this + 844) = Structure >> 4;
    if (*v311 >= *(unsigned __int8 *)(this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  }
  else
  {
    *(_DWORD *)(this + 844) = 0;
  }
  *(_QWORD *)(this + 792) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_54>(JSC::JSGlobalObject::init(JSC::VM &)::$_54 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 808) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_55>(JSC::JSGlobalObject::init(JSC::VM &)::$_55 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 816) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_56>(JSC::JSGlobalObject::init(JSC::VM &)::$_56 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 824) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_57>(JSC::JSGlobalObject::init(JSC::VM &)::$_57 const&)::theFunc
                          + 1;
  v529 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 67373093;
  if ((v529 & 0xFFFE000000000002) == 0 && v529 && *(unsigned __int8 *)(v529 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v529, a2, v528, v522, v523, v524, v525, v526, v527);
  v530 = *((_QWORD *)a2 + 5017);
  if (v530 < *((_QWORD *)a2 + 5018))
    goto LABEL_370;
  v530 = *((_QWORD *)a2 + 5019);
  if ((v530 & 1) == 0)
  {
    v2177 = *(_QWORD *)(v530 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v530 + HIDWORD(v2177);
    *((_QWORD *)a2 + 5019) = v530 + (int)v2177;
LABEL_370:
    *((_QWORD *)a2 + 5017) = v530 + 128;
    goto LABEL_371;
  }
  JSC::sanitizeStackForVM(a2, v521, v522, v523, v524, v525, v526, v527);
  v530 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2440, v2441, v2442);
LABEL_371:
  *(_DWORD *)v530 = 0;
  JSC::Structure::Structure(v530, (uint64_t)a2, this, v529, (uint64_t)v3772, (unint64_t)&JSC::ArrayPrototype::s_info, 1, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v539 = *v135;
  if (*v135 < *((_QWORD *)a2 + 4699))
    goto LABEL_374;
  v539 = *((_QWORD *)a2 + 4700);
  if ((v539 & 1) == 0)
  {
    v2178 = *(_QWORD *)(v539 + 8) ^ *((_QWORD *)a2 + 4701);
    *((_QWORD *)a2 + 4699) = v539 + HIDWORD(v2178);
    *((_QWORD *)a2 + 4700) = v539 + (int)v2178;
LABEL_374:
    *v135 = v539 + 16;
    goto LABEL_375;
  }
  JSC::sanitizeStackForVM(a2, v531, v532, v533, v534, v535, v536, v537);
  v539 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 37560, (uint64_t)v3758, 16, 0, 0, v2443, v2444, v2445);
LABEL_375:
  *(_DWORD *)v539 = 0;
  v540 = *(_DWORD *)(v530 + 8);
  *(_DWORD *)v539 = v530 >> 4;
  *(_DWORD *)(v539 + 4) = v540;
  *(_QWORD *)(v539 + 8) = 0;
  JSC::ArrayPrototype::finishCreation((JSC::ArrayPrototype *)v539, a2, this, v538, v533, v534, v535, v536, v537);
  *(_QWORD *)(this + 672) = v539;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v539 = *(_QWORD *)(this + 672);
  }
  *(_DWORD *)v3772 = 67373092;
  if ((v539 & 0xFFFE000000000002) == 0 && v539 && *(unsigned __int8 *)(v539 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v539, a2, v548, v542, v543, v544, v545, v546, v547);
  v549 = *((_QWORD *)a2 + 5017);
  if (v549 < *((_QWORD *)a2 + 5018))
    goto LABEL_382;
  v549 = *((_QWORD *)a2 + 5019);
  if ((v549 & 1) == 0)
  {
    v2179 = *(_QWORD *)(v549 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v549 + HIDWORD(v2179);
    *((_QWORD *)a2 + 5019) = v549 + (int)v2179;
LABEL_382:
    *((_QWORD *)a2 + 5017) = v549 + 128;
    goto LABEL_383;
  }
  JSC::sanitizeStackForVM(a2, v541, v542, v543, v544, v545, v546, v547);
  v549 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2446, v2447, v2448);
LABEL_383:
  *(_DWORD *)v549 = 0;
  v550 = JSC::Structure::Structure(v549, (uint64_t)a2, this, v539, (uint64_t)v3772, (unint64_t)&JSC::JSArray::s_info, 3, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 856) = v550 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v559 = *(_QWORD *)(this + 672);
  *(_DWORD *)v3772 = 67373092;
  if ((v559 & 0xFFFE000000000002) == 0 && v559 && *(unsigned __int8 *)(v559 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v559, a2, v558, v552, v553, v554, v555, v556, v557);
  v560 = *((_QWORD *)a2 + 5017);
  if (v560 < *((_QWORD *)a2 + 5018))
    goto LABEL_392;
  v560 = *((_QWORD *)a2 + 5019);
  if ((v560 & 1) == 0)
  {
    v2180 = *(_QWORD *)(v560 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v560 + HIDWORD(v2180);
    *((_QWORD *)a2 + 5019) = v560 + (int)v2180;
LABEL_392:
    *((_QWORD *)a2 + 5017) = v560 + 128;
    goto LABEL_393;
  }
  JSC::sanitizeStackForVM(a2, v551, v552, v553, v554, v555, v556, v557);
  v560 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2449, v2450, v2451);
LABEL_393:
  *(_DWORD *)v560 = 0;
  v561 = JSC::Structure::Structure(v560, (uint64_t)a2, this, v559, (uint64_t)v3772, (unint64_t)&JSC::JSArray::s_info, 5, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 860) = v561 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v570 = *(_QWORD *)(this + 672);
  *(_DWORD *)v3772 = 67373092;
  if ((v570 & 0xFFFE000000000002) == 0 && v570 && *(unsigned __int8 *)(v570 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v570, a2, v569, v563, v564, v565, v566, v567, v568);
  v571 = *((_QWORD *)a2 + 5017);
  if (v571 < *((_QWORD *)a2 + 5018))
    goto LABEL_402;
  v571 = *((_QWORD *)a2 + 5019);
  if ((v571 & 1) == 0)
  {
    v2181 = *(_QWORD *)(v571 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v571 + HIDWORD(v2181);
    *((_QWORD *)a2 + 5019) = v571 + (int)v2181;
LABEL_402:
    *((_QWORD *)a2 + 5017) = v571 + 128;
    goto LABEL_403;
  }
  JSC::sanitizeStackForVM(a2, v562, v563, v564, v565, v566, v567, v568);
  v571 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2452, v2453, v2454);
LABEL_403:
  *(_DWORD *)v571 = 0;
  JSC::Structure::Structure(v571, (uint64_t)a2, this, v570, (uint64_t)v3772, (unint64_t)&JSC::JSArray::s_info, 9, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v580 = v571;
  if (BYTE1(dword_1ECF4C5C0))
  {
    v581 = *(_QWORD *)(this + 672);
    *(_DWORD *)v3772 = 67373092;
    if ((v581 & 0xFFFE000000000002) == 0 && v581 && *(unsigned __int8 *)(v581 + 5) >= 0x17u)
      JSC::JSObject::didBecomePrototype(v581, a2, v579, v573, v574, v575, v576, v577, v578);
    v582 = *((_QWORD *)a2 + 5017);
    if (v582 >= *((_QWORD *)a2 + 5018))
    {
      v582 = *((_QWORD *)a2 + 5019);
      if ((v582 & 1) != 0)
      {
        JSC::sanitizeStackForVM(a2, v572, v573, v574, v575, v576, v577, v578);
        v582 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2548, v2549, v2550);
LABEL_412:
        *(_DWORD *)v582 = 0;
        v580 = JSC::Structure::Structure(v582, (uint64_t)a2, this, v581, (uint64_t)v3772, (unint64_t)&JSC::JSArray::s_info, 7, 0);
        if (*((_BYTE *)a2 + 755))
          __dmb(0xAu);
        goto LABEL_414;
      }
      v2213 = *(_QWORD *)(v582 + 8) ^ *((_QWORD *)a2 + 5020);
      *((_QWORD *)a2 + 5018) = v582 + HIDWORD(v2213);
      *((_QWORD *)a2 + 5019) = v582 + (int)v2213;
    }
    *((_QWORD *)a2 + 5017) = v582 + 128;
    goto LABEL_412;
  }
LABEL_414:
  *(_DWORD *)(this + 864) = v580 >> 4;
  v583 = *(unsigned __int8 *)(this + 7);
  if (*v311 >= v583)
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v583 = *(unsigned __int8 *)(this + 7);
  }
  *(_DWORD *)(this + 868) = v571 >> 4;
  if (*v311 >= v583)
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v584 = *(_QWORD *)(this + 672);
  *(_DWORD *)v3772 = 67373092;
  if ((v584 & 0xFFFE000000000002) == 0 && v584 && *(unsigned __int8 *)(v584 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v584, a2, v579, v573, v574, v575, v576, v577, v578);
  v585 = *((_QWORD *)a2 + 5017);
  if (v585 < *((_QWORD *)a2 + 5018))
    goto LABEL_423;
  v585 = *((_QWORD *)a2 + 5019);
  if ((v585 & 1) == 0)
  {
    v2182 = *(_QWORD *)(v585 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v585 + HIDWORD(v2182);
    *((_QWORD *)a2 + 5019) = v585 + (int)v2182;
LABEL_423:
    *((_QWORD *)a2 + 5017) = v585 + 128;
    goto LABEL_424;
  }
  JSC::sanitizeStackForVM(a2, v572, v573, v574, v575, v576, v577, v578);
  v585 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2455, v2456, v2457);
LABEL_424:
  *(_DWORD *)v585 = 0;
  v586 = JSC::Structure::Structure(v585, (uint64_t)a2, this, v584, (uint64_t)v3772, (unint64_t)&JSC::JSArray::s_info, 11, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 872) = v586 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v595 = *(_QWORD *)(this + 672);
  *(_DWORD *)v3772 = 67373092;
  if ((v595 & 0xFFFE000000000002) == 0 && v595 && *(unsigned __int8 *)(v595 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v595, a2, v594, v588, v589, v590, v591, v592, v593);
  v596 = *((_QWORD *)a2 + 5017);
  if (v596 < *((_QWORD *)a2 + 5018))
    goto LABEL_433;
  v596 = *((_QWORD *)a2 + 5019);
  if ((v596 & 1) == 0)
  {
    v2183 = *(_QWORD *)(v596 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v596 + HIDWORD(v2183);
    *((_QWORD *)a2 + 5019) = v596 + (int)v2183;
LABEL_433:
    *((_QWORD *)a2 + 5017) = v596 + 128;
    goto LABEL_434;
  }
  JSC::sanitizeStackForVM(a2, v587, v588, v589, v590, v591, v592, v593);
  v596 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2458, v2459, v2460);
LABEL_434:
  *(_DWORD *)v596 = 0;
  v597 = JSC::Structure::Structure(v596, (uint64_t)a2, this, v595, (uint64_t)v3772, (unint64_t)&JSC::JSArray::s_info, 13, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 876) = v597 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v606 = *(_QWORD *)(this + 672);
  *(_DWORD *)v3772 = 67373092;
  if ((v606 & 0xFFFE000000000002) == 0 && v606 && *(unsigned __int8 *)(v606 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v606, a2, v605, v599, v600, v601, v602, v603, v604);
  v607 = *((_QWORD *)a2 + 5017);
  if (v607 < *((_QWORD *)a2 + 5018))
    goto LABEL_443;
  v607 = *((_QWORD *)a2 + 5019);
  if ((v607 & 1) == 0)
  {
    v2184 = *(_QWORD *)(v607 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v607 + HIDWORD(v2184);
    *((_QWORD *)a2 + 5019) = v607 + (int)v2184;
LABEL_443:
    *((_QWORD *)a2 + 5017) = v607 + 128;
    goto LABEL_444;
  }
  JSC::sanitizeStackForVM(a2, v598, v599, v600, v601, v602, v603, v604);
  v607 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2461, v2462, v2463);
LABEL_444:
  *(_DWORD *)v607 = 0;
  v608 = JSC::Structure::Structure(v607, (uint64_t)a2, this, v606, (uint64_t)v3772, (unint64_t)&JSC::JSArray::s_info, 21, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 880) = v608 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v617 = *(_QWORD *)(this + 672);
  *(_DWORD *)v3772 = 67373092;
  if ((v617 & 0xFFFE000000000002) == 0 && v617 && *(unsigned __int8 *)(v617 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v617, a2, v616, v610, v611, v612, v613, v614, v615);
  v618 = *((_QWORD *)a2 + 5017);
  if (v618 < *((_QWORD *)a2 + 5018))
    goto LABEL_453;
  v618 = *((_QWORD *)a2 + 5019);
  if ((v618 & 1) == 0)
  {
    v2185 = *(_QWORD *)(v618 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v618 + HIDWORD(v2185);
    *((_QWORD *)a2 + 5019) = v618 + (int)v2185;
LABEL_453:
    *((_QWORD *)a2 + 5017) = v618 + 128;
    goto LABEL_454;
  }
  JSC::sanitizeStackForVM(a2, v609, v610, v611, v612, v613, v614, v615);
  v618 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2464, v2465, v2466);
LABEL_454:
  *(_DWORD *)v618 = 0;
  JSC::Structure::Structure(v618, (uint64_t)a2, this, v617, (uint64_t)v3772, (unint64_t)&JSC::JSArray::s_info, 25, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v627 = v618;
  if (BYTE1(dword_1ECF4C5C0))
  {
    v628 = *(_QWORD *)(this + 672);
    *(_DWORD *)v3772 = 67373092;
    if ((v628 & 0xFFFE000000000002) == 0 && v628 && *(unsigned __int8 *)(v628 + 5) >= 0x17u)
      JSC::JSObject::didBecomePrototype(v628, a2, v626, v620, v621, v622, v623, v624, v625);
    v629 = *((_QWORD *)a2 + 5017);
    if (v629 >= *((_QWORD *)a2 + 5018))
    {
      v629 = *((_QWORD *)a2 + 5019);
      if ((v629 & 1) != 0)
      {
        JSC::sanitizeStackForVM(a2, v619, v620, v621, v622, v623, v624, v625);
        v629 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2551, v2552, v2553);
LABEL_463:
        *(_DWORD *)v629 = 0;
        v627 = JSC::Structure::Structure(v629, (uint64_t)a2, this, v628, (uint64_t)v3772, (unint64_t)&JSC::JSArray::s_info, 23, 0);
        if (*((_BYTE *)a2 + 755))
          __dmb(0xAu);
        goto LABEL_465;
      }
      v2214 = *(_QWORD *)(v629 + 8) ^ *((_QWORD *)a2 + 5020);
      *((_QWORD *)a2 + 5018) = v629 + HIDWORD(v2214);
      *((_QWORD *)a2 + 5019) = v629 + (int)v2214;
    }
    *((_QWORD *)a2 + 5017) = v629 + 128;
    goto LABEL_463;
  }
LABEL_465:
  *(_DWORD *)(this + 884) = v627 >> 4;
  v630 = *(unsigned __int8 *)(this + 7);
  if (*v311 >= v630)
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v630 = *(unsigned __int8 *)(this + 7);
  }
  v631 = v618 >> 4;
  *(_DWORD *)(this + 888) = v618 >> 4;
  if (*v311 >= v630)
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    LODWORD(v631) = *(_DWORD *)(this + 888);
  }
  v632 = *(_OWORD *)(this + 852);
  v633 = *(_OWORD *)(this + 868);
  *(_OWORD *)(this + 892) = v632;
  *(_OWORD *)(this + 908) = v633;
  *(_DWORD *)(this + 924) = *(_DWORD *)(this + 884);
  *(_DWORD *)(this + 928) = v631;
  v634 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 8215;
  if ((v634 & 0xFFFE000000000002) == 0 && v634 && *(unsigned __int8 *)(v634 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v634, a2, *(double *)&v632, v620, v621, v622, v623, v624, v625);
  v635 = *((_QWORD *)a2 + 5017);
  if (v635 < *((_QWORD *)a2 + 5018))
    goto LABEL_474;
  v635 = *((_QWORD *)a2 + 5019);
  if ((v635 & 1) == 0)
  {
    v2186 = *(_QWORD *)(v635 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v635 + HIDWORD(v2186);
    *((_QWORD *)a2 + 5019) = v635 + (int)v2186;
LABEL_474:
    *((_QWORD *)a2 + 5017) = v635 + 128;
    goto LABEL_475;
  }
  JSC::sanitizeStackForVM(a2, v619, v620, v621, v622, v623, v624, v625);
  v635 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2467, v2468, v2469);
LABEL_475:
  *(_DWORD *)v635 = 0;
  JSC::Structure::Structure(v635, (uint64_t)a2, this, v634, (uint64_t)v3772, (unint64_t)&JSC::ShadowRealmPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v643 = (unint64_t *)((char *)a2 + 39696);
  v644 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_478;
  v644 = *((_QWORD *)a2 + 4865);
  if ((v644 & 1) == 0)
  {
    v2187 = *(_QWORD *)(v644 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v644 + HIDWORD(v2187);
    *((_QWORD *)a2 + 4865) = v644 + (int)v2187;
LABEL_478:
    *v3763 = v644 + 16;
    goto LABEL_479;
  }
  JSC::sanitizeStackForVM(a2, v636, v637, v638, v639, v640, v641, v642);
  v644 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2470, v2471, v2472);
LABEL_479:
  *(_DWORD *)v644 = 0;
  v645 = *(_DWORD *)(v635 + 8);
  *(_DWORD *)v644 = v635 >> 4;
  *(_DWORD *)(v644 + 4) = v645;
  *(_QWORD *)(v644 + 8) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v646 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v653 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v653 = 0xB00000002;
  *(_QWORD *)(v653 + 8) = "ShadowRealm";
  *(_DWORD *)(v653 + 16) = 12;
  v3743 = (char *)a2 + 39672;
  v655 = *v643;
  if (*v643 < *((_QWORD *)a2 + 4963))
    goto LABEL_482;
  v655 = *((_QWORD *)a2 + 4964);
  if ((v655 & 1) == 0)
  {
    v2188 = *(_QWORD *)(v655 + 8) ^ *((_QWORD *)a2 + 4965);
    *((_QWORD *)a2 + 4963) = v655 + HIDWORD(v2188);
    *((_QWORD *)a2 + 4964) = v655 + (int)v2188;
LABEL_482:
    *v643 = v655 + 16;
    goto LABEL_483;
  }
  JSC::sanitizeStackForVM(a2, v647, v648, v655, v649, v650, v651, v652);
  v655 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3743, (uint64_t)v3758, 16, 0, 0, v2473, v2474, v2475);
LABEL_483:
  *(_DWORD *)v655 = *((_QWORD *)a2 + 5189) >> 4;
  v654.n128_u64[0] = 17302016;
  v3760 = v654;
  *(_DWORD *)(v655 + 4) = 17302016;
  *(_QWORD *)(v655 + 8) = v653;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v644, (uint64_t)a2, v646, v655, 6, v650, v651, v652, v654);
  *(_QWORD *)(this + 680) = v644;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v644 = *(_QWORD *)(this + 680);
  }
  *(_DWORD *)v3772 = 58;
  if ((v644 & 0xFFFE000000000002) == 0 && v644 && *(unsigned __int8 *)(v644 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v644, a2, v663, v657, v658, v659, v660, v661, v662);
  v664 = *((_QWORD *)a2 + 5017);
  if (v664 < *((_QWORD *)a2 + 5018))
    goto LABEL_492;
  v664 = *((_QWORD *)a2 + 5019);
  if ((v664 & 1) == 0)
  {
    v2189 = *(_QWORD *)(v664 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v664 + HIDWORD(v2189);
    *((_QWORD *)a2 + 5019) = v664 + (int)v2189;
LABEL_492:
    *((_QWORD *)a2 + 5017) = v664 + 128;
    goto LABEL_493;
  }
  JSC::sanitizeStackForVM(a2, v656, v657, v658, v659, v660, v661, v662);
  v664 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2476, v2477, v2478);
LABEL_493:
  *(_DWORD *)v664 = 0;
  v665 = JSC::Structure::Structure(v664, (uint64_t)a2, this, v644, (uint64_t)v3772, (unint64_t)&JSC::ShadowRealmObject::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 972) = v665 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v674 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 23;
  if ((v674 & 0xFFFE000000000002) == 0 && v674 && *(unsigned __int8 *)(v674 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v674, a2, v673, v667, v668, v669, v670, v671, v672);
  v675 = *((_QWORD *)a2 + 5017);
  if (v675 < *((_QWORD *)a2 + 5018))
    goto LABEL_502;
  v675 = *((_QWORD *)a2 + 5019);
  if ((v675 & 1) == 0)
  {
    v2190 = *(_QWORD *)(v675 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v675 + HIDWORD(v2190);
    *((_QWORD *)a2 + 5019) = v675 + (int)v2190;
LABEL_502:
    *((_QWORD *)a2 + 5017) = v675 + 128;
    goto LABEL_503;
  }
  JSC::sanitizeStackForVM(a2, v666, v667, v668, v669, v670, v671, v672);
  v675 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2479, v2480, v2481);
LABEL_503:
  *(_DWORD *)v675 = 0;
  JSC::Structure::Structure(v675, (uint64_t)a2, this, v674, (uint64_t)v3772, (unint64_t)&JSC::RegExpPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v683 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_506;
  v683 = *((_QWORD *)a2 + 4865);
  if ((v683 & 1) == 0)
  {
    v2191 = *(_QWORD *)(v683 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v683 + HIDWORD(v2191);
    *((_QWORD *)a2 + 4865) = v683 + (int)v2191;
LABEL_506:
    *v3763 = v683 + 16;
    goto LABEL_507;
  }
  JSC::sanitizeStackForVM(a2, v676, v677, v678, v679, v680, v681, v682);
  v683 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2482, v2483, v2484);
LABEL_507:
  *(_DWORD *)v683 = 0;
  v684 = (JSC::RegExpPrototype *)JSC::AggregateErrorPrototype::AggregateErrorPrototype(v683, (uint64_t)a2, v675);
  JSC::RegExpPrototype::finishCreation(v684, a2, (JSC::JSGlobalObject *)this);
  *(_QWORD *)(this + 688) = v683;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v683 = *(_QWORD *)(this + 688);
  }
  *(_DWORD *)v3772 = 67373115;
  if ((v683 & 0xFFFE000000000002) == 0 && v683 && *(unsigned __int8 *)(v683 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v683, a2, v692, v686, v687, v688, v689, v690, v691);
  v693 = *((_QWORD *)a2 + 5017);
  if (v693 < *((_QWORD *)a2 + 5018))
    goto LABEL_514;
  v693 = *((_QWORD *)a2 + 5019);
  if ((v693 & 1) == 0)
  {
    v2192 = *(_QWORD *)(v693 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v693 + HIDWORD(v2192);
    *((_QWORD *)a2 + 5019) = v693 + (int)v2192;
LABEL_514:
    *((_QWORD *)a2 + 5017) = v693 + 128;
    goto LABEL_515;
  }
  JSC::sanitizeStackForVM(a2, v685, v686, v687, v688, v689, v690, v691);
  v693 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2485, v2486, v2487);
LABEL_515:
  *(_DWORD *)v693 = 0;
  v694 = JSC::Structure::Structure(v693, (uint64_t)a2, this, v683, (uint64_t)v3772, (unint64_t)&JSC::RegExpObject::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 976) = v694 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v697 = *(_DWORD *)(this + 908);
  if (v697)
    v698 = 16 * (v697 & 0xFFFFFFFE);
  else
    v698 = 0;
  v699 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1552);
  *(_DWORD *)v3772 = -1;
  if ((*(_BYTE *)(v698 + 19) & 8) != 0
    || (v700 = JSC::StructureTransitionTable::get((uint64_t *)(v698 + 80), v699, 0, 1)) == 0)
  {
    v700 = JSC::Structure::addNewPropertyTransition(a2, (unsigned int **)v698, v699, 0, (int *)v3772, 0, 0, v695, v696);
  }
  v701 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1576);
  *(_DWORD *)v3772 = -1;
  if ((*(_BYTE *)(v700 + 19) & 8) != 0
    || (v702 = JSC::StructureTransitionTable::get((uint64_t *)(v700 + 80), v701, 0, 1)) == 0)
  {
    v702 = JSC::Structure::addNewPropertyTransition(a2, (unsigned int **)v700, v701, 0, (int *)v3772, 0, 0, v695, v696);
  }
  v703 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1416);
  *(_DWORD *)v3772 = -1;
  if ((*(_BYTE *)(v702 + 19) & 8) != 0
    || (v704 = JSC::StructureTransitionTable::get((uint64_t *)(v702 + 80), v703, 0, 1)) == 0)
  {
    v704 = JSC::Structure::addNewPropertyTransition(a2, (unsigned int **)v702, v703, 0, (int *)v3772, 0, 0, v695, v696);
    v710 = (unint64_t *)((char *)a2 + 38904);
    if (!v704)
    {
      *(_DWORD *)(this + 1012) = 0;
      goto LABEL_531;
    }
  }
  else
  {
    v710 = (unint64_t *)((char *)a2 + 38904);
  }
  *(_DWORD *)(this + 1012) = v704 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
LABEL_531:
  RegExpMatchesArrayWithIndicesStructure = JSC::createRegExpMatchesArrayWithIndicesStructure(a2, (JSC::VM *)this, v705, v696, v706, v707, v708, v709, v695);
  if (RegExpMatchesArrayWithIndicesStructure)
  {
    *(_DWORD *)(this + 1016) = RegExpMatchesArrayWithIndicesStructure >> 4;
    if (*v311 >= *(unsigned __int8 *)(this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  }
  else
  {
    *(_DWORD *)(this + 1016) = 0;
  }
  v714 = *(_DWORD *)(this + 908);
  if (v714)
    v715 = 16 * (v714 & 0xFFFFFFFE);
  else
    v715 = 0;
  v716 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1416);
  *(_DWORD *)v3772 = -1;
  if ((*(_BYTE *)(v715 + 19) & 8) == 0
    && (v717 = JSC::StructureTransitionTable::get((uint64_t *)(v715 + 80), v716, 0, 1)) != 0
    || (v717 = JSC::Structure::addNewPropertyTransition(a2, (unsigned int **)v715, v716, 0, (int *)v3772, 0, 0, v712, v713)) != 0)
  {
    *(_DWORD *)(this + 1020) = v717 >> 4;
    if (*v311 >= *(unsigned __int8 *)(this + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  }
  else
  {
    *(_DWORD *)(this + 1020) = 0;
  }
  *(_QWORD *)(this + 1096) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_58>(JSC::JSGlobalObject::init(JSC::VM &)::$_58 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1104) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_59>(JSC::JSGlobalObject::init(JSC::VM &)::$_59 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1112) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_60>(JSC::JSGlobalObject::init(JSC::VM &)::$_60 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1120) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_61>(JSC::JSGlobalObject::init(JSC::VM &)::$_61 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1128) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_62>(JSC::JSGlobalObject::init(JSC::VM &)::$_62 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1136) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_63>(JSC::JSGlobalObject::init(JSC::VM &)::$_63 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 496) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_64>(JSC::JSGlobalObject::init(JSC::VM &)::$_64 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 504) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSFunction>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_65>(JSC::JSGlobalObject::init(JSC::VM &)::$_65 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 1144) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_66>(JSC::JSGlobalObject::init(JSC::VM &)::$_66 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_66 const&)::theFunc
                           + 1;
  v724 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 23;
  if ((v724 & 0xFFFE000000000002) == 0 && v724 && *(unsigned __int8 *)(v724 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v724, a2, v713, v719, v720, v721, v722, v723, v712);
  v725 = *((_QWORD *)a2 + 5017);
  if (v725 < *((_QWORD *)a2 + 5018))
    goto LABEL_546;
  v725 = *((_QWORD *)a2 + 5019);
  if ((v725 & 1) == 0)
  {
    v2193 = *(_QWORD *)(v725 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v725 + HIDWORD(v2193);
    *((_QWORD *)a2 + 5019) = v725 + (int)v2193;
LABEL_546:
    *((_QWORD *)a2 + 5017) = v725 + 128;
    goto LABEL_547;
  }
  JSC::sanitizeStackForVM(a2, v718, v719, v720, v721, v722, v723, v712);
  v725 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2488, v2489, v2490);
LABEL_547:
  *(_DWORD *)v725 = 0;
  JSC::Structure::Structure(v725, (uint64_t)a2, this, v724, (uint64_t)v3772, (unint64_t)&JSC::IteratorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v733 = *v710;
  if (*v710 < v710[1])
    goto LABEL_550;
  v733 = v710[2];
  if ((v733 & 1) == 0)
  {
    v2194 = *(_QWORD *)(v733 + 8) ^ v710[3];
    v710[1] = v733 + HIDWORD(v2194);
    v710[2] = v733 + (int)v2194;
LABEL_550:
    *v710 = v733 + 16;
    goto LABEL_551;
  }
  JSC::sanitizeStackForVM(a2, v726, v727, v728, v729, v730, v731, v732);
  v733 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2491, v2492, v2493);
LABEL_551:
  *(_DWORD *)v733 = 0;
  v734 = *(_DWORD *)(v725 + 8);
  *(_DWORD *)v733 = v725 >> 4;
  *(_DWORD *)(v733 + 4) = v734;
  *(_QWORD *)(v733 + 8) = 0;
  JSC::IteratorPrototype::finishCreation((JSC::IteratorPrototype *)v733, a2, (JSC::JSGlobalObject *)this, v728, v729, v730, v731, v732);
  *(_QWORD *)(this + 696) = v733;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v743 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 23;
  if ((v743 & 0xFFFE000000000002) == 0 && v743 && *(unsigned __int8 *)(v743 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v743, a2, v742, v736, v737, v738, v739, v740, v741);
  v744 = *((_QWORD *)a2 + 5017);
  if (v744 < *((_QWORD *)a2 + 5018))
    goto LABEL_558;
  v744 = *((_QWORD *)a2 + 5019);
  if ((v744 & 1) == 0)
  {
    v2195 = *(_QWORD *)(v744 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v744 + HIDWORD(v2195);
    *((_QWORD *)a2 + 5019) = v744 + (int)v2195;
LABEL_558:
    *((_QWORD *)a2 + 5017) = v744 + 128;
    goto LABEL_559;
  }
  JSC::sanitizeStackForVM(a2, v735, v736, v737, v738, v739, v740, v741);
  v744 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2494, v2495, v2496);
LABEL_559:
  *(_DWORD *)v744 = 0;
  JSC::Structure::Structure(v744, (uint64_t)a2, this, v743, (uint64_t)v3772, (unint64_t)&JSC::AsyncIteratorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v3757 = (JSC::BuiltinExecutables **)((char *)a2 + 93152);
  v752 = *v710;
  if (*v710 < v710[1])
    goto LABEL_562;
  v752 = v710[2];
  if ((v752 & 1) == 0)
  {
    v2196 = *(_QWORD *)(v752 + 8) ^ v710[3];
    v710[1] = v752 + HIDWORD(v2196);
    v710[2] = v752 + (int)v2196;
LABEL_562:
    *v710 = v752 + 16;
    goto LABEL_563;
  }
  JSC::sanitizeStackForVM(a2, v745, v746, v747, v748, v749, v750, v751);
  v752 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2497, v2498, v2499);
LABEL_563:
  *(_DWORD *)v752 = 0;
  v753 = *(_DWORD *)(v744 + 8);
  *(_DWORD *)v752 = v744 >> 4;
  *(_DWORD *)(v752 + 4) = v753;
  *(_QWORD *)(v752 + 8) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v754 = JSC::BuiltinExecutables::asyncIteratorPrototypeSymbolAsyncIteratorGetterCodeExecutable(*v3757, (uint64_t)v745, v746, v747, v748, v749, v750, v751);
  v755 = *((_QWORD *)*v3757 + 1);
  ++*(_DWORD *)(v755 + 8);
  *(_QWORD *)v3772 = v755;
  *(_OWORD *)&v3772[8] = xmmword_1991259C0;
  v766 = JSC::UnlinkedFunctionExecutable::link(v754, (uint64_t)a2, 0, (uint64_t)v3772, 0, 0, 0, v756, COERCE_DOUBLE(0x26E8700026E5ALL), v757, v758);
  v767 = *(_DWORD **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v767)
  {
    if (v767[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v767 + 8))(v767);
    else
      --v767[2];
  }
  v768 = *(int **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v769 = *(_QWORD *)(v766 + 88);
  v770 = *(_QWORD *)(v769 + 16);
  v3759 = (unint64_t *)((char *)a2 + 39696);
  if (*(_BYTE *)(v769 + 50) == 6)
  {
    v2010 = v768 + 239;
    v2011 = v768 + 236;
    if ((int)v770 < 0)
      v774 = v2011;
    else
      v774 = v2010;
    v771 = (unint64_t *)((char *)a2 + 38288);
  }
  else
  {
    v771 = (unint64_t *)((char *)a2 + 38288);
    if ((*(_BYTE *)(v766 + 68) & 1) != 0)
    {
      v772 = v768 + 241;
      v773 = v768 + 238;
    }
    else
    {
      v772 = v768 + 240;
      v773 = v768 + 237;
    }
    if ((int)v770 < 0)
      v774 = v773;
    else
      v774 = v772;
  }
  v775 = *v774;
  if (v775)
    v776 = 16 * (v775 & 0xFFFFFFFE);
  else
    v776 = 0;
  v3742 = (char *)a2 + 38264;
  v777 = *v771;
  if (*v771 < v771[1])
    goto LABEL_578;
  v777 = v771[2];
  if ((v777 & 1) == 0)
  {
    v2197 = *(_QWORD *)(v777 + 8) ^ v771[3];
    v771[1] = v777 + HIDWORD(v2197);
    v771[2] = v777 + (int)v2197;
LABEL_578:
    *v771 = v777 + 32;
    goto LABEL_579;
  }
  JSC::sanitizeStackForVM(a2, v759, v760, v761, v762, v763, v764, v765);
  v777 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3742, (uint64_t)v3758, 32, 0, 0, v2500, v2501, v2502);
LABEL_579:
  *(_DWORD *)v777 = 0;
  JSC::JSCallee::JSCallee((JSC::JSCell *)v777, (uint64_t)a2, this, v776);
  *(_QWORD *)(v777 + 24) = v766;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v782 = *(_QWORD *)(v766 + 112);
  if ((v782 & 1) != 0)
    v783 = (v782 >> 1) & 3;
  else
    v783 = *(unsigned __int8 *)(v782 + 4);
  if (v783 != 2)
    JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow((uint64_t *)(v766 + 112), a2, (JSC::JSCell *)v766, v777, (uint64_t)"Allocating a function", v778, v779, v780, v781.n128_f64[0]);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v752, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2704), v777, 4, v778, v779, v780, v781);
  *(_QWORD *)(this + 704) = v752;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v792 = *(_QWORD *)(this + 696);
  *(_DWORD *)v3772 = 8215;
  if ((v792 & 0xFFFE000000000002) == 0 && v792 && *(unsigned __int8 *)(v792 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v792, a2, v791, v785, v786, v787, v788, v789, v790);
  v793 = *((_QWORD *)a2 + 5017);
  if (v793 < *((_QWORD *)a2 + 5018))
    goto LABEL_592;
  v793 = *((_QWORD *)a2 + 5019);
  if ((v793 & 1) == 0)
  {
    v2198 = *(_QWORD *)(v793 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v793 + HIDWORD(v2198);
    *((_QWORD *)a2 + 5019) = v793 + (int)v2198;
LABEL_592:
    *((_QWORD *)a2 + 5017) = v793 + 128;
    goto LABEL_593;
  }
  JSC::sanitizeStackForVM(a2, v784, v785, v786, v787, v788, v789, v790);
  v793 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2503, v2504, v2505);
LABEL_593:
  *(_DWORD *)v793 = 0;
  JSC::Structure::Structure(v793, (uint64_t)a2, this, v792, (uint64_t)v3772, (unint64_t)&JSC::GeneratorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v801 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_596;
  v801 = *((_QWORD *)a2 + 4865);
  if ((v801 & 1) == 0)
  {
    v2199 = *(_QWORD *)(v801 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v801 + HIDWORD(v2199);
    *((_QWORD *)a2 + 4865) = v801 + (int)v2199;
LABEL_596:
    *v3763 = v801 + 16;
    goto LABEL_597;
  }
  JSC::sanitizeStackForVM(a2, v794, v795, v796, v797, v798, v799, v800);
  v801 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2506, v2507, v2508);
LABEL_597:
  *(_DWORD *)v801 = 0;
  v802 = *(_DWORD *)(v793 + 8);
  *(_DWORD *)v801 = v793 >> 4;
  *(_DWORD *)(v801 + 4) = v802;
  *(_QWORD *)(v801 + 8) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v803 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v810 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v810 = 0x900000002;
  *(_QWORD *)(v810 + 8) = "Generator";
  *(_DWORD *)(v810 + 16) = 12;
  v811 = *v3759;
  if (*((_QWORD *)a2 + 4962) < *((_QWORD *)a2 + 4963))
    goto LABEL_600;
  v811 = *((_QWORD *)a2 + 4964);
  if ((v811 & 1) == 0)
  {
    v2200 = *(_QWORD *)(v811 + 8) ^ *((_QWORD *)a2 + 4965);
    *((_QWORD *)a2 + 4963) = v811 + HIDWORD(v2200);
    *((_QWORD *)a2 + 4964) = v811 + (int)v2200;
LABEL_600:
    *v3759 = v811 + 16;
    goto LABEL_601;
  }
  JSC::sanitizeStackForVM(a2, v804, v805, v811, v806, v807, v808, v809);
  v811 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3743, (uint64_t)v3758, 16, 0, 0, v2509, v2510, v2511);
LABEL_601:
  *(_DWORD *)v811 = *((_QWORD *)a2 + 5189) >> 4;
  *(_DWORD *)(v811 + 4) = v3760.n128_u32[0];
  *(_QWORD *)(v811 + 8) = v810;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v801, (uint64_t)a2, v803, v811, 6, v807, v808, v809, v3760);
  *(_QWORD *)(this + 720) = v801;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v820 = *(_QWORD *)(this + 704);
  *(_DWORD *)v3772 = 8215;
  if ((v820 & 0xFFFE000000000002) == 0 && v820 && *(unsigned __int8 *)(v820 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v820, a2, v819, v813, v814, v815, v816, v817, v818);
  v821 = *((_QWORD *)a2 + 5017);
  if (v821 < *((_QWORD *)a2 + 5018))
    goto LABEL_610;
  v821 = *((_QWORD *)a2 + 5019);
  if ((v821 & 1) == 0)
  {
    v2201 = *(_QWORD *)(v821 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v821 + HIDWORD(v2201);
    *((_QWORD *)a2 + 5019) = v821 + (int)v2201;
LABEL_610:
    *((_QWORD *)a2 + 5017) = v821 + 128;
    goto LABEL_611;
  }
  JSC::sanitizeStackForVM(a2, v812, v813, v814, v815, v816, v817, v818);
  v821 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2512, v2513, v2514);
LABEL_611:
  *(_DWORD *)v821 = 0;
  JSC::Structure::Structure(v821, (uint64_t)a2, this, v820, (uint64_t)v3772, (unint64_t)&JSC::AsyncGeneratorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v829 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_614;
  v829 = *((_QWORD *)a2 + 4865);
  if ((v829 & 1) == 0)
  {
    v2202 = *(_QWORD *)(v829 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v829 + HIDWORD(v2202);
    *((_QWORD *)a2 + 4865) = v829 + (int)v2202;
LABEL_614:
    *v3763 = v829 + 16;
    goto LABEL_615;
  }
  JSC::sanitizeStackForVM(a2, v822, v823, v824, v825, v826, v827, v828);
  v829 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2515, v2516, v2517);
LABEL_615:
  *(_DWORD *)v829 = 0;
  v830 = *(_DWORD *)(v821 + 8);
  *(_DWORD *)v829 = v821 >> 4;
  *(_DWORD *)(v829 + 4) = v830;
  *(_QWORD *)(v829 + 8) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v831 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v838 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v838 = 0xE00000002;
  *(_QWORD *)(v838 + 8) = "AsyncGenerator";
  *(_DWORD *)(v838 + 16) = 12;
  v839 = *v3759;
  if (*((_QWORD *)a2 + 4962) < *((_QWORD *)a2 + 4963))
    goto LABEL_618;
  v839 = *((_QWORD *)a2 + 4964);
  if ((v839 & 1) == 0)
  {
    v2203 = *(_QWORD *)(v839 + 8) ^ *((_QWORD *)a2 + 4965);
    *((_QWORD *)a2 + 4963) = v839 + HIDWORD(v2203);
    *((_QWORD *)a2 + 4964) = v839 + (int)v2203;
LABEL_618:
    *v3759 = v839 + 16;
    goto LABEL_619;
  }
  JSC::sanitizeStackForVM(a2, v832, v833, v839, v834, v835, v836, v837);
  v839 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3743, (uint64_t)v3758, 16, 0, 0, v2518, v2519, v2520);
LABEL_619:
  *(_DWORD *)v839 = *((_QWORD *)a2 + 5189) >> 4;
  *(_DWORD *)(v839 + 4) = v3760.n128_u32[0];
  *(_QWORD *)(v839 + 8) = v838;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v829, (uint64_t)a2, v831, v839, 6, v835, v836, v837, v3760);
  *(_QWORD *)(this + 728) = v829;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v848 = *(_QWORD *)(this + 696);
  *(_DWORD *)v3772 = 23;
  if ((v848 & 0xFFFE000000000002) == 0 && v848 && *(unsigned __int8 *)(v848 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v848, a2, v847, v841, v842, v843, v844, v845, v846);
  v849 = *((_QWORD *)a2 + 5017);
  if (v849 < *((_QWORD *)a2 + 5018))
    goto LABEL_628;
  v849 = *((_QWORD *)a2 + 5019);
  if ((v849 & 1) == 0)
  {
    v2204 = *(_QWORD *)(v849 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v849 + HIDWORD(v2204);
    *((_QWORD *)a2 + 5019) = v849 + (int)v2204;
LABEL_628:
    *((_QWORD *)a2 + 5017) = v849 + 128;
    goto LABEL_629;
  }
  JSC::sanitizeStackForVM(a2, v840, v841, v842, v843, v844, v845, v846);
  v849 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2521, v2522, v2523);
LABEL_629:
  *(_DWORD *)v849 = 0;
  JSC::Structure::Structure(v849, (uint64_t)a2, this, v848, (uint64_t)v3772, (unint64_t)&JSC::ArrayIteratorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v857 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_632;
  v857 = *((_QWORD *)a2 + 4865);
  if ((v857 & 1) == 0)
  {
    v2205 = *(_QWORD *)(v857 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v857 + HIDWORD(v2205);
    *((_QWORD *)a2 + 4865) = v857 + (int)v2205;
LABEL_632:
    *v3763 = v857 + 16;
    goto LABEL_633;
  }
  JSC::sanitizeStackForVM(a2, v850, v851, v852, v853, v854, v855, v856);
  v857 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2524, v2525, v2526);
LABEL_633:
  *(_DWORD *)v857 = 0;
  v858 = *(_DWORD *)(v849 + 8);
  *(_DWORD *)v857 = v849 >> 4;
  *(_DWORD *)(v857 + 4) = v858;
  *(_QWORD *)(v857 + 8) = 0;
  JSC::ArrayIteratorPrototype::finishCreation((JSC::ArrayIteratorPrototype *)v857, a2, (JSC::JSGlobalObject *)this);
  *(_QWORD *)(this + 736) = v857;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_DWORD *)v3772 = 64;
  if ((v857 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v857 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v857, a2, v866, v860, v861, v862, v863, v864, v865);
  v867 = *((_QWORD *)a2 + 5017);
  if (v867 < *((_QWORD *)a2 + 5018))
    goto LABEL_639;
  v867 = *((_QWORD *)a2 + 5019);
  if ((v867 & 1) == 0)
  {
    v2206 = *(_QWORD *)(v867 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v867 + HIDWORD(v2206);
    *((_QWORD *)a2 + 5019) = v867 + (int)v2206;
LABEL_639:
    *((_QWORD *)a2 + 5017) = v867 + 128;
    goto LABEL_640;
  }
  JSC::sanitizeStackForVM(a2, v859, v860, v861, v862, v863, v864, v865);
  v867 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2527, v2528, v2529);
LABEL_640:
  *(_DWORD *)v867 = 0;
  v868 = JSC::Structure::Structure(v867, (uint64_t)a2, this, v857, (uint64_t)v3772, (unint64_t)&JSC::JSArrayIterator::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v3741 = (JSC::JSObject *)v857;
  *(_DWORD *)(this + 1000) = v868 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v877 = *(_QWORD *)(this + 696);
  *(_DWORD *)v3772 = 23;
  if ((v877 & 0xFFFE000000000002) == 0 && v877 && *(unsigned __int8 *)(v877 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v877, a2, v876, v870, v871, v872, v873, v874, v875);
  v878 = *((_QWORD *)a2 + 5017);
  if (v878 < *((_QWORD *)a2 + 5018))
    goto LABEL_649;
  v878 = *((_QWORD *)a2 + 5019);
  if ((v878 & 1) == 0)
  {
    v2207 = *(_QWORD *)(v878 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v878 + HIDWORD(v2207);
    *((_QWORD *)a2 + 5019) = v878 + (int)v2207;
LABEL_649:
    *((_QWORD *)a2 + 5017) = v878 + 128;
    goto LABEL_650;
  }
  JSC::sanitizeStackForVM(a2, v869, v870, v871, v872, v873, v874, v875);
  v878 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2530, v2531, v2532);
LABEL_650:
  *(_DWORD *)v878 = 0;
  JSC::Structure::Structure(v878, (uint64_t)a2, this, v877, (uint64_t)v3772, (unint64_t)&JSC::MapIteratorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v886 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_653;
  v886 = *((_QWORD *)a2 + 4865);
  if ((v886 & 1) == 0)
  {
    v2208 = *(_QWORD *)(v886 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v886 + HIDWORD(v2208);
    *((_QWORD *)a2 + 4865) = v886 + (int)v2208;
LABEL_653:
    *v3763 = v886 + 16;
    goto LABEL_654;
  }
  JSC::sanitizeStackForVM(a2, v879, v880, v881, v882, v883, v884, v885);
  v886 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2533, v2534, v2535);
LABEL_654:
  *(_DWORD *)v886 = 0;
  v887 = *(_DWORD *)(v878 + 8);
  *(_DWORD *)v886 = v878 >> 4;
  *(_DWORD *)(v886 + 4) = v887;
  *(_QWORD *)(v886 + 8) = 0;
  JSC::MapIteratorPrototype::finishCreation((JSC::MapIteratorPrototype *)v886, a2, (JSC::JSGlobalObject *)this);
  *(_QWORD *)(this + 744) = v886;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_DWORD *)v3772 = 65;
  if ((v886 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v886 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v886, a2, v895, v889, v890, v891, v892, v893, v894);
  v896 = *((_QWORD *)a2 + 5017);
  if (v896 < *((_QWORD *)a2 + 5018))
    goto LABEL_660;
  v896 = *((_QWORD *)a2 + 5019);
  if ((v896 & 1) == 0)
  {
    v2209 = *(_QWORD *)(v896 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v896 + HIDWORD(v2209);
    *((_QWORD *)a2 + 5019) = v896 + (int)v2209;
LABEL_660:
    *((_QWORD *)a2 + 5017) = v896 + 128;
    goto LABEL_661;
  }
  JSC::sanitizeStackForVM(a2, v888, v889, v890, v891, v892, v893, v894);
  v896 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2536, v2537, v2538);
LABEL_661:
  *(_DWORD *)v896 = 0;
  v897 = JSC::Structure::Structure(v896, (uint64_t)a2, this, v886, (uint64_t)v3772, (unint64_t)&JSC::JSMapIterator::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 1004) = v897 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v906 = *(_QWORD *)(this + 696);
  *(_DWORD *)v3772 = 23;
  if ((v906 & 0xFFFE000000000002) == 0 && v906 && *(unsigned __int8 *)(v906 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v906, a2, v905, v899, v900, v901, v902, v903, v904);
  v907 = *((_QWORD *)a2 + 5017);
  if (v907 < *((_QWORD *)a2 + 5018))
    goto LABEL_670;
  v907 = *((_QWORD *)a2 + 5019);
  if ((v907 & 1) == 0)
  {
    v2210 = *(_QWORD *)(v907 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v907 + HIDWORD(v2210);
    *((_QWORD *)a2 + 5019) = v907 + (int)v2210;
LABEL_670:
    *((_QWORD *)a2 + 5017) = v907 + 128;
    goto LABEL_671;
  }
  JSC::sanitizeStackForVM(a2, v898, v899, v900, v901, v902, v903, v904);
  v907 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2539, v2540, v2541);
LABEL_671:
  *(_DWORD *)v907 = 0;
  JSC::Structure::Structure(v907, (uint64_t)a2, this, v906, (uint64_t)v3772, (unint64_t)&JSC::SetIteratorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v915 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_674;
  v915 = *((_QWORD *)a2 + 4865);
  if ((v915 & 1) == 0)
  {
    v2211 = *(_QWORD *)(v915 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v915 + HIDWORD(v2211);
    *((_QWORD *)a2 + 4865) = v915 + (int)v2211;
LABEL_674:
    *v3763 = v915 + 16;
    goto LABEL_675;
  }
  JSC::sanitizeStackForVM(a2, v908, v909, v910, v911, v912, v913, v914);
  v915 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2542, v2543, v2544);
LABEL_675:
  *(_DWORD *)v915 = 0;
  v916 = *(_DWORD *)(v907 + 8);
  *(_DWORD *)v915 = v907 >> 4;
  *(_DWORD *)(v915 + 4) = v916;
  *(_QWORD *)(v915 + 8) = 0;
  JSC::SetIteratorPrototype::finishCreation((JSC::SetIteratorPrototype *)v915, a2, (JSC::JSGlobalObject *)this);
  *(_QWORD *)(this + 752) = v915;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_DWORD *)v3772 = 66;
  if ((v915 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v915 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v915, a2, v924, v918, v919, v920, v921, v922, v923);
  v925 = *((_QWORD *)a2 + 5017);
  if (v925 < *((_QWORD *)a2 + 5018))
    goto LABEL_681;
  v925 = *((_QWORD *)a2 + 5019);
  if ((v925 & 1) == 0)
  {
    v2212 = *(_QWORD *)(v925 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v925 + HIDWORD(v2212);
    *((_QWORD *)a2 + 5019) = v925 + (int)v2212;
LABEL_681:
    *((_QWORD *)a2 + 5017) = v925 + 128;
    goto LABEL_682;
  }
  JSC::sanitizeStackForVM(a2, v917, v918, v919, v920, v921, v922, v923);
  v925 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2545, v2546, v2547);
LABEL_682:
  *(_DWORD *)v925 = 0;
  v926 = JSC::Structure::Structure(v925, (uint64_t)a2, this, v915, (uint64_t)v3772, (unint64_t)&JSC::JSSetIterator::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 1008) = v926 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v927 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v927 <= 0xCAu)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BFC58);
  }
  v3740 = (JSC::JSObject *)v886;
  v928 = *((_QWORD *)a2 + 5276);
  if (!v928)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BFCD0);
  }
  *(_QWORD *)(v927 + 1624) = v928;
  if ((v928 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BFCF0);
  }
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v929 = JSC::BuiltinExecutables::promisePrototypeThenCodeExecutable(*v3757);
  v930 = *((_QWORD *)*v3757 + 1);
  ++*(_DWORD *)(v930 + 8);
  *(_QWORD *)v3772 = v930;
  *(_OWORD *)&v3772[8] = xmmword_199125A10;
  v941 = JSC::UnlinkedFunctionExecutable::link(v929, (uint64_t)a2, 0, (uint64_t)v3772, 0, 0, 0, v931, COERCE_DOUBLE(0x275E5000273D5), v932, v933);
  v942 = *(_DWORD **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v942)
  {
    if (v942[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v942 + 8))(v942);
    else
      --v942[2];
  }
  v943 = *(int **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v944 = *(_QWORD *)(v941 + 88);
  v945 = *(_QWORD *)(v944 + 16);
  v3739 = (JSC::JSObject *)v915;
  if (*(_BYTE *)(v944 + 50) == 6)
  {
    v2012 = v943 + 239;
    v2013 = v943 + 236;
    if ((int)v945 < 0)
      v949 = v2013;
    else
      v949 = v2012;
    v946 = (unint64_t *)((char *)a2 + 38288);
  }
  else
  {
    v946 = (unint64_t *)((char *)a2 + 38288);
    if ((*(_BYTE *)(v941 + 68) & 1) != 0)
    {
      v947 = v943 + 241;
      v948 = v943 + 238;
    }
    else
    {
      v947 = v943 + 240;
      v948 = v943 + 237;
    }
    if ((int)v945 < 0)
      v949 = v948;
    else
      v949 = v947;
  }
  v950 = *v949;
  if (v950)
    v951 = 16 * (v950 & 0xFFFFFFFE);
  else
    v951 = 0;
  v952 = *v946;
  if (*v946 < v946[1])
    goto LABEL_704;
  v952 = v946[2];
  if ((v952 & 1) == 0)
  {
    v2215 = *(_QWORD *)(v952 + 8) ^ v946[3];
    v946[1] = v952 + HIDWORD(v2215);
    v946[2] = v952 + (int)v2215;
LABEL_704:
    *v946 = v952 + 32;
    goto LABEL_705;
  }
  JSC::sanitizeStackForVM(a2, v934, v935, v936, v937, v938, v939, v940);
  v952 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3742, (uint64_t)v3758, 32, 0, 0, v2554, v2555, v2556);
LABEL_705:
  *(_DWORD *)v952 = 0;
  JSC::JSCallee::JSCallee((JSC::JSCell *)v952, (uint64_t)a2, this, v951);
  *(_QWORD *)(v952 + 24) = v941;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v961 = *(_QWORD *)(v941 + 112);
  if ((v961 & 1) != 0)
    v962 = (v961 >> 1) & 3;
  else
    v962 = *(unsigned __int8 *)(v961 + 4);
  if (v962 != 2)
    JSC::InferredValue<JSC::JSFunction>::notifyWriteSlow((uint64_t *)(v941 + 112), a2, (JSC::JSCell *)v941, v952, (uint64_t)"Allocating a function", v957, v958, v959, v960);
  v963 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v963 <= 0x97u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BFD58);
  }
  *(_QWORD *)(v963 + 1216) = v952;
  if ((v952 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989BFD78);
  }
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v964 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 67250253;
  if ((v964 & 0xFFFE000000000002) == 0 && v964 && *(unsigned __int8 *)(v964 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v964, a2, v960, v954, v955, v956, v957, v958, v959);
  v965 = *((_QWORD *)a2 + 5017);
  if (v965 < *((_QWORD *)a2 + 5018))
    goto LABEL_720;
  v965 = *((_QWORD *)a2 + 5019);
  if ((v965 & 1) == 0)
  {
    v2216 = *(_QWORD *)(v965 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v965 + HIDWORD(v2216);
    *((_QWORD *)a2 + 5019) = v965 + (int)v2216;
LABEL_720:
    *((_QWORD *)a2 + 5017) = v965 + 128;
    goto LABEL_721;
  }
  JSC::sanitizeStackForVM(a2, v953, v954, v955, v956, v957, v958, v959);
  v965 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2557, v2558, v2559);
LABEL_721:
  *(_DWORD *)v965 = 0;
  JSC::Structure::Structure(v965, (uint64_t)a2, this, v964, (uint64_t)v3772, (unint64_t)&JSC::StringPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v973 = *((_QWORD *)a2 + 4973);
  if (v973 < *((_QWORD *)a2 + 4974))
    goto LABEL_724;
  v973 = *((_QWORD *)a2 + 4975);
  if ((v973 & 1) == 0)
  {
    v2217 = *(_QWORD *)(v973 + 8) ^ *((_QWORD *)a2 + 4976);
    *((_QWORD *)a2 + 4974) = v973 + HIDWORD(v2217);
    *((_QWORD *)a2 + 4975) = v973 + (int)v2217;
LABEL_724:
    *((_QWORD *)a2 + 4973) = v973 + 32;
    goto LABEL_725;
  }
  JSC::sanitizeStackForVM(a2, v966, v967, v968, v969, v970, v971, v972);
  v973 = JSC::LocalAllocator::allocateSlowCase((uint64_t)a2 + 39760, (uint64_t)v3758, 32, 0, 0, v2560, v2561, v2562);
LABEL_725:
  *(_DWORD *)v973 = 0;
  v974 = *(_DWORD *)(v965 + 8);
  *(_DWORD *)v973 = v965 >> 4;
  *(_DWORD *)(v973 + 4) = v974;
  *(_QWORD *)(v973 + 8) = 0;
  *(_QWORD *)(v973 + 16) = 0;
  JSC::StringPrototype::finishCreation((JSC::StringPrototype *)v973, a2, this);
  *(_QWORD *)(this + 1192) = v973;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v973 = *(_QWORD *)(this + 1192);
  }
  *(_DWORD *)v3772 = 84019276;
  if ((v973 & 0xFFFE000000000002) == 0 && v973 && *(unsigned __int8 *)(v973 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v973, a2, v982, v976, v977, v978, v979, v980, v981);
  v983 = *((_QWORD *)a2 + 5017);
  if (v983 < *((_QWORD *)a2 + 5018))
    goto LABEL_732;
  v983 = *((_QWORD *)a2 + 5019);
  if ((v983 & 1) == 0)
  {
    v2218 = *(_QWORD *)(v983 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v983 + HIDWORD(v2218);
    *((_QWORD *)a2 + 5019) = v983 + (int)v2218;
LABEL_732:
    *((_QWORD *)a2 + 5017) = v983 + 128;
    goto LABEL_733;
  }
  JSC::sanitizeStackForVM(a2, v975, v976, v977, v978, v979, v980, v981);
  v983 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2563, v2564, v2565);
LABEL_733:
  *(_DWORD *)v983 = 0;
  v984 = JSC::Structure::Structure(v983, (uint64_t)a2, this, v973, (uint64_t)v3772, (unint64_t)&JSC::StringObject::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 1160) = v984 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v993 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 8215;
  if ((v993 & 0xFFFE000000000002) == 0 && v993 && *(unsigned __int8 *)(v993 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v993, a2, v992, v986, v987, v988, v989, v990, v991);
  v994 = *((_QWORD *)a2 + 5017);
  if (v994 < *((_QWORD *)a2 + 5018))
    goto LABEL_742;
  v994 = *((_QWORD *)a2 + 5019);
  if ((v994 & 1) == 0)
  {
    v2219 = *(_QWORD *)(v994 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v994 + HIDWORD(v2219);
    *((_QWORD *)a2 + 5019) = v994 + (int)v2219;
LABEL_742:
    *((_QWORD *)a2 + 5017) = v994 + 128;
    goto LABEL_743;
  }
  JSC::sanitizeStackForVM(a2, v985, v986, v987, v988, v989, v990, v991);
  v994 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2566, v2567, v2568);
LABEL_743:
  *(_DWORD *)v994 = 0;
  JSC::Structure::Structure(v994, (uint64_t)a2, this, v993, (uint64_t)v3772, (unint64_t)&JSC::JSPromisePrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1008 = JSC::JSPromisePrototype::create(a2, (JSC::VM *)this, v994, v995, v996, v997, v998, v999, v1000);
  *(_QWORD *)(this + 1200) = v1008;
  if (v1008 && *v311 >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1008 = *(_QWORD *)(this + 1200);
  }
  *(_DWORD *)v3772 = 68;
  if ((v1008 & 0xFFFE000000000002) == 0 && v1008 && *(unsigned __int8 *)(v1008 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1008, a2, v1009, v1002, v1003, v1004, v1005, v1006, v1007);
  v1010 = *((_QWORD *)a2 + 5017);
  if (v1010 < *((_QWORD *)a2 + 5018))
    goto LABEL_751;
  v1010 = *((_QWORD *)a2 + 5019);
  if ((v1010 & 1) == 0)
  {
    v2220 = *(_QWORD *)(v1010 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1010 + HIDWORD(v2220);
    *((_QWORD *)a2 + 5019) = v1010 + (int)v2220;
LABEL_751:
    *((_QWORD *)a2 + 5017) = v1010 + 128;
    goto LABEL_752;
  }
  JSC::sanitizeStackForVM(a2, v1001, v1002, v1003, v1004, v1005, v1006, v1007);
  v1010 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2569, v2570, v2571);
LABEL_752:
  *(_DWORD *)v1010 = 0;
  v1011 = JSC::Structure::Structure(v1010, (uint64_t)a2, this, v1008, (uint64_t)v3772, (unint64_t)&JSC::JSPromise::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 1164) = v1011 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1020 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 8215;
  if ((v1020 & 0xFFFE000000000002) == 0 && v1020 && *(unsigned __int8 *)(v1020 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1020, a2, v1019, v1013, v1014, v1015, v1016, v1017, v1018);
  v1021 = *((_QWORD *)a2 + 5017);
  if (v1021 < *((_QWORD *)a2 + 5018))
    goto LABEL_761;
  v1021 = *((_QWORD *)a2 + 5019);
  if ((v1021 & 1) == 0)
  {
    v2221 = *(_QWORD *)(v1021 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1021 + HIDWORD(v2221);
    *((_QWORD *)a2 + 5019) = v1021 + (int)v2221;
LABEL_761:
    *((_QWORD *)a2 + 5017) = v1021 + 128;
    goto LABEL_762;
  }
  JSC::sanitizeStackForVM(a2, v1012, v1013, v1014, v1015, v1016, v1017, v1018);
  v1021 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2572, v2573, v2574);
LABEL_762:
  *(_DWORD *)v1021 = 0;
  JSC::Structure::Structure(v1021, (uint64_t)a2, this, v1020, (uint64_t)v3772, (unint64_t)&JSC::BigIntPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1029 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_765;
  v1029 = *((_QWORD *)a2 + 4865);
  if ((v1029 & 1) == 0)
  {
    v2222 = *(_QWORD *)(v1029 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v1029 + HIDWORD(v2222);
    *((_QWORD *)a2 + 4865) = v1029 + (int)v2222;
LABEL_765:
    *v3763 = v1029 + 16;
    goto LABEL_766;
  }
  JSC::sanitizeStackForVM(a2, v1022, v1023, v1024, v1025, v1026, v1027, v1028);
  v1029 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2575, v2576, v2577);
LABEL_766:
  *(_DWORD *)v1029 = 0;
  v1030 = *(_DWORD *)(v1021 + 8);
  *(_DWORD *)v1029 = v1021 >> 4;
  *(_DWORD *)(v1029 + 4) = v1030;
  *(_QWORD *)(v1029 + 8) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1031 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v1038 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v1038 = 0x600000002;
  *(_QWORD *)(v1038 + 8) = "BigInt";
  *(_DWORD *)(v1038 + 16) = 12;
  v1039 = *v3759;
  if (*((_QWORD *)a2 + 4962) < *((_QWORD *)a2 + 4963))
    goto LABEL_769;
  v1039 = *((_QWORD *)a2 + 4964);
  if ((v1039 & 1) == 0)
  {
    v2223 = *(_QWORD *)(v1039 + 8) ^ *((_QWORD *)a2 + 4965);
    *((_QWORD *)a2 + 4963) = v1039 + HIDWORD(v2223);
    *((_QWORD *)a2 + 4964) = v1039 + (int)v2223;
LABEL_769:
    *v3759 = v1039 + 16;
    goto LABEL_770;
  }
  JSC::sanitizeStackForVM(a2, v1032, v1033, v1039, v1034, v1035, v1036, v1037);
  v1039 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3743, (uint64_t)v3758, 16, 0, 0, v2578, v2579, v2580);
LABEL_770:
  *(_DWORD *)v1039 = *((_QWORD *)a2 + 5189) >> 4;
  *(_DWORD *)(v1039 + 4) = v3760.n128_u32[0];
  *(_QWORD *)(v1039 + 8) = v1038;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v1029, (uint64_t)a2, v1031, v1039, 6, v1035, v1036, v1037, v3760);
  *(_QWORD *)(this + 1208) = v1029;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1029 = *(_QWORD *)(this + 1208);
  }
  *(_DWORD *)v3772 = 23;
  if ((v1029 & 0xFFFE000000000002) == 0 && v1029 && *(unsigned __int8 *)(v1029 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1029, a2, v1047, v1041, v1042, v1043, v1044, v1045, v1046);
  v1048 = *((_QWORD *)a2 + 5017);
  if (v1048 < *((_QWORD *)a2 + 5018))
    goto LABEL_779;
  v1048 = *((_QWORD *)a2 + 5019);
  if ((v1048 & 1) == 0)
  {
    v2224 = *(_QWORD *)(v1048 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1048 + HIDWORD(v2224);
    *((_QWORD *)a2 + 5019) = v1048 + (int)v2224;
LABEL_779:
    *((_QWORD *)a2 + 5017) = v1048 + 128;
    goto LABEL_780;
  }
  JSC::sanitizeStackForVM(a2, v1040, v1041, v1042, v1043, v1044, v1045, v1046);
  v1048 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2581, v2582, v2583);
LABEL_780:
  *(_DWORD *)v1048 = 0;
  v1049 = JSC::Structure::Structure(v1048, (uint64_t)a2, this, v1029, (uint64_t)v3772, (unint64_t)&JSC::BigIntObject::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 1168) = v1049 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1058 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 8215;
  if ((v1058 & 0xFFFE000000000002) == 0 && v1058 && *(unsigned __int8 *)(v1058 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1058, a2, v1057, v1051, v1052, v1053, v1054, v1055, v1056);
  v1059 = *((_QWORD *)a2 + 5017);
  if (v1059 < *((_QWORD *)a2 + 5018))
    goto LABEL_789;
  v1059 = *((_QWORD *)a2 + 5019);
  if ((v1059 & 1) == 0)
  {
    v2225 = *(_QWORD *)(v1059 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1059 + HIDWORD(v2225);
    *((_QWORD *)a2 + 5019) = v1059 + (int)v2225;
LABEL_789:
    *((_QWORD *)a2 + 5017) = v1059 + 128;
    goto LABEL_790;
  }
  JSC::sanitizeStackForVM(a2, v1050, v1051, v1052, v1053, v1054, v1055, v1056);
  v1059 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2584, v2585, v2586);
LABEL_790:
  *(_DWORD *)v1059 = 0;
  JSC::Structure::Structure(v1059, (uint64_t)a2, this, v1058, (uint64_t)v3772, (unint64_t)&JSC::SymbolPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1067 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_793;
  v1067 = *((_QWORD *)a2 + 4865);
  if ((v1067 & 1) == 0)
  {
    v2226 = *(_QWORD *)(v1067 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v1067 + HIDWORD(v2226);
    *((_QWORD *)a2 + 4865) = v1067 + (int)v2226;
LABEL_793:
    *v3763 = v1067 + 16;
    goto LABEL_794;
  }
  JSC::sanitizeStackForVM(a2, v1060, v1061, v1062, v1063, v1064, v1065, v1066);
  v1067 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2587, v2588, v2589);
LABEL_794:
  *(_DWORD *)v1067 = 0;
  v1068 = (JSC::SymbolPrototype *)JSC::AggregateErrorPrototype::AggregateErrorPrototype(v1067, (uint64_t)a2, v1059);
  JSC::SymbolPrototype::finishCreation(v1068, a2, (JSC::JSGlobalObject *)this);
  *(_QWORD *)(this + 1216) = v1067;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1067 = *(_QWORD *)(this + 1216);
  }
  *(_DWORD *)v3772 = 23;
  if ((v1067 & 0xFFFE000000000002) == 0 && v1067 && *(unsigned __int8 *)(v1067 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1067, a2, v1076, v1070, v1071, v1072, v1073, v1074, v1075);
  v1077 = *((_QWORD *)a2 + 5017);
  if (v1077 < *((_QWORD *)a2 + 5018))
    goto LABEL_801;
  v1077 = *((_QWORD *)a2 + 5019);
  if ((v1077 & 1) == 0)
  {
    v2227 = *(_QWORD *)(v1077 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1077 + HIDWORD(v2227);
    *((_QWORD *)a2 + 5019) = v1077 + (int)v2227;
LABEL_801:
    *((_QWORD *)a2 + 5017) = v1077 + 128;
    goto LABEL_802;
  }
  JSC::sanitizeStackForVM(a2, v1069, v1070, v1071, v1072, v1073, v1074, v1075);
  v1077 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2590, v2591, v2592);
LABEL_802:
  *(_DWORD *)v1077 = 0;
  v1078 = JSC::Structure::Structure(v1077, (uint64_t)a2, this, v1067, (uint64_t)v3772, (unint64_t)&JSC::SymbolObject::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 1172) = v1078 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1087 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 23;
  if ((v1087 & 0xFFFE000000000002) == 0 && v1087 && *(unsigned __int8 *)(v1087 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1087, a2, v1086, v1080, v1081, v1082, v1083, v1084, v1085);
  v1088 = *((_QWORD *)a2 + 5017);
  if (v1088 < *((_QWORD *)a2 + 5018))
    goto LABEL_811;
  v1088 = *((_QWORD *)a2 + 5019);
  if ((v1088 & 1) == 0)
  {
    v2228 = *(_QWORD *)(v1088 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1088 + HIDWORD(v2228);
    *((_QWORD *)a2 + 5019) = v1088 + (int)v2228;
LABEL_811:
    *((_QWORD *)a2 + 5017) = v1088 + 128;
    goto LABEL_812;
  }
  JSC::sanitizeStackForVM(a2, v1079, v1080, v1081, v1082, v1083, v1084, v1085);
  v1088 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2593, v2594, v2595);
LABEL_812:
  *(_DWORD *)v1088 = 0;
  JSC::Structure::Structure(v1088, (uint64_t)a2, this, v1087, (uint64_t)v3772, (unint64_t)&JSC::WeakObjectRefPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1096 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_815;
  v1096 = *((_QWORD *)a2 + 4865);
  if ((v1096 & 1) == 0)
  {
    v2229 = *(_QWORD *)(v1096 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v1096 + HIDWORD(v2229);
    *((_QWORD *)a2 + 4865) = v1096 + (int)v2229;
LABEL_815:
    *v3763 = v1096 + 16;
    goto LABEL_816;
  }
  JSC::sanitizeStackForVM(a2, v1089, v1090, v1091, v1092, v1093, v1094, v1095);
  v1096 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2596, v2597, v2598);
LABEL_816:
  *(_DWORD *)v1096 = 0;
  v1097 = *(_DWORD *)(v1088 + 8);
  *(_DWORD *)v1096 = v1088 >> 4;
  *(_DWORD *)(v1096 + 4) = v1097;
  *(_QWORD *)(v1096 + 8) = 0;
  JSC::WeakObjectRefPrototype::finishCreation((JSC::WeakObjectRefPrototype *)v1096, a2, (JSC::JSGlobalObject *)this);
  *(_QWORD *)(this + 1224) = v1096;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1096 = *(_QWORD *)(this + 1224);
  }
  *(_DWORD *)v3772 = 23;
  if ((v1096 & 0xFFFE000000000002) == 0 && v1096 && *(unsigned __int8 *)(v1096 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1096, a2, v1105, v1099, v1100, v1101, v1102, v1103, v1104);
  v1106 = *((_QWORD *)a2 + 5017);
  if (v1106 < *((_QWORD *)a2 + 5018))
    goto LABEL_823;
  v1106 = *((_QWORD *)a2 + 5019);
  if ((v1106 & 1) == 0)
  {
    v2230 = *(_QWORD *)(v1106 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1106 + HIDWORD(v2230);
    *((_QWORD *)a2 + 5019) = v1106 + (int)v2230;
LABEL_823:
    *((_QWORD *)a2 + 5017) = v1106 + 128;
    goto LABEL_824;
  }
  JSC::sanitizeStackForVM(a2, v1098, v1099, v1100, v1101, v1102, v1103, v1104);
  v1106 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2599, v2600, v2601);
LABEL_824:
  *(_DWORD *)v1106 = 0;
  v1107 = JSC::Structure::Structure(v1106, (uint64_t)a2, this, v1096, (uint64_t)v3772, (unint64_t)&JSC::JSWeakObjectRef::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 1176) = v1107 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1116 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 23;
  if ((v1116 & 0xFFFE000000000002) == 0 && v1116 && *(unsigned __int8 *)(v1116 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1116, a2, v1115, v1109, v1110, v1111, v1112, v1113, v1114);
  v1117 = *((_QWORD *)a2 + 5017);
  if (v1117 < *((_QWORD *)a2 + 5018))
    goto LABEL_833;
  v1117 = *((_QWORD *)a2 + 5019);
  if ((v1117 & 1) == 0)
  {
    v2231 = *(_QWORD *)(v1117 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1117 + HIDWORD(v2231);
    *((_QWORD *)a2 + 5019) = v1117 + (int)v2231;
LABEL_833:
    *((_QWORD *)a2 + 5017) = v1117 + 128;
    goto LABEL_834;
  }
  JSC::sanitizeStackForVM(a2, v1108, v1109, v1110, v1111, v1112, v1113, v1114);
  v1117 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2602, v2603, v2604);
LABEL_834:
  *(_DWORD *)v1117 = 0;
  JSC::Structure::Structure(v1117, (uint64_t)a2, this, v1116, (uint64_t)v3772, (unint64_t)&JSC::FinalizationRegistryPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1125 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_837;
  v1125 = *((_QWORD *)a2 + 4865);
  if ((v1125 & 1) == 0)
  {
    v2232 = *(_QWORD *)(v1125 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v1125 + HIDWORD(v2232);
    *((_QWORD *)a2 + 4865) = v1125 + (int)v2232;
LABEL_837:
    *v3763 = v1125 + 16;
    goto LABEL_838;
  }
  JSC::sanitizeStackForVM(a2, v1118, v1119, v1120, v1121, v1122, v1123, v1124);
  v1125 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2605, v2606, v2607);
LABEL_838:
  *(_DWORD *)v1125 = 0;
  v1126 = *(_DWORD *)(v1117 + 8);
  *(_DWORD *)v1125 = v1117 >> 4;
  *(_DWORD *)(v1125 + 4) = v1126;
  *(_QWORD *)(v1125 + 8) = 0;
  JSC::FinalizationRegistryPrototype::finishCreation((JSC::FinalizationRegistryPrototype *)v1125, a2, (JSC::JSGlobalObject *)this, v1120, v1121, v1122, v1123, v1124);
  *(_QWORD *)(this + 1232) = v1125;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1125 = *(_QWORD *)(this + 1232);
  }
  *(_DWORD *)v3772 = 23;
  if ((v1125 & 0xFFFE000000000002) == 0 && v1125 && *(unsigned __int8 *)(v1125 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1125, a2, v1134, v1128, v1129, v1130, v1131, v1132, v1133);
  v1135 = *((_QWORD *)a2 + 5017);
  if (v1135 < *((_QWORD *)a2 + 5018))
    goto LABEL_845;
  v1135 = *((_QWORD *)a2 + 5019);
  if ((v1135 & 1) == 0)
  {
    v2233 = *(_QWORD *)(v1135 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1135 + HIDWORD(v2233);
    *((_QWORD *)a2 + 5019) = v1135 + (int)v2233;
LABEL_845:
    *((_QWORD *)a2 + 5017) = v1135 + 128;
    goto LABEL_846;
  }
  JSC::sanitizeStackForVM(a2, v1127, v1128, v1129, v1130, v1131, v1132, v1133);
  v1135 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2608, v2609, v2610);
LABEL_846:
  *(_DWORD *)v1135 = 0;
  v1136 = JSC::Structure::Structure(v1135, (uint64_t)a2, this, v1125, (uint64_t)v3772, (unint64_t)&JSC::JSFinalizationRegistry::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 1180) = v1136 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1145 = *(_QWORD *)(this + 656);
  *(_DWORD *)v3772 = 8215;
  if ((v1145 & 0xFFFE000000000002) == 0 && v1145 && *(unsigned __int8 *)(v1145 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1145, a2, v1144, v1138, v1139, v1140, v1141, v1142, v1143);
  v1146 = *((_QWORD *)a2 + 5017);
  if (v1146 < *((_QWORD *)a2 + 5018))
    goto LABEL_855;
  v1146 = *((_QWORD *)a2 + 5019);
  if ((v1146 & 1) == 0)
  {
    v2234 = *(_QWORD *)(v1146 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1146 + HIDWORD(v2234);
    *((_QWORD *)a2 + 5019) = v1146 + (int)v2234;
LABEL_855:
    *((_QWORD *)a2 + 5017) = v1146 + 128;
    goto LABEL_856;
  }
  JSC::sanitizeStackForVM(a2, v1137, v1138, v1139, v1140, v1141, v1142, v1143);
  v1146 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2611, v2612, v2613);
LABEL_856:
  *(_DWORD *)v1146 = 0;
  JSC::Structure::Structure(v1146, (uint64_t)a2, this, v1145, (uint64_t)v3772, (unint64_t)&JSC::JSInternalPromisePrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1155 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_859;
  v1155 = *((_QWORD *)a2 + 4865);
  if ((v1155 & 1) == 0)
  {
    v2235 = *(_QWORD *)(v1155 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v1155 + HIDWORD(v2235);
    *((_QWORD *)a2 + 4865) = v1155 + (int)v2235;
LABEL_859:
    *v3763 = v1155 + 16;
    goto LABEL_860;
  }
  JSC::sanitizeStackForVM(a2, v1147, v1148, v1149, v1150, v1151, v1152, v1153);
  v1155 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2614, v2615, v2616);
LABEL_860:
  *(_DWORD *)v1155 = 0;
  v1156 = *(_DWORD *)(v1146 + 8);
  *(_DWORD *)v1155 = v1146 >> 4;
  *(_DWORD *)(v1155 + 4) = v1156;
  *(_QWORD *)(v1155 + 8) = 0;
  JSC::JSPromisePrototype::finishCreation((JSC::JSPromisePrototype *)v1155, a2, this, v1154, v1149, v1150, v1151, v1152, v1153);
  *(_QWORD *)(this + 1240) = v1155;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1155 = *(_QWORD *)(this + 1240);
  }
  *(_DWORD *)v3772 = 68;
  if ((v1155 & 0xFFFE000000000002) == 0 && v1155 && *(unsigned __int8 *)(v1155 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1155, a2, v1164, v1158, v1159, v1160, v1161, v1162, v1163);
  v1165 = *((_QWORD *)a2 + 5017);
  if (v1165 < *((_QWORD *)a2 + 5018))
    goto LABEL_867;
  v1165 = *((_QWORD *)a2 + 5019);
  if ((v1165 & 1) == 0)
  {
    v2236 = *(_QWORD *)(v1165 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1165 + HIDWORD(v2236);
    *((_QWORD *)a2 + 5019) = v1165 + (int)v2236;
LABEL_867:
    *((_QWORD *)a2 + 5017) = v1165 + 128;
    goto LABEL_868;
  }
  JSC::sanitizeStackForVM(a2, v1157, v1158, v1159, v1160, v1161, v1162, v1163);
  v1165 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2617, v2618, v2619);
LABEL_868:
  *(_DWORD *)v1165 = 0;
  v1166 = JSC::Structure::Structure(v1165, (uint64_t)a2, this, v1155, (uint64_t)v3772, (unint64_t)&JSC::JSInternalPromise::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 1184) = v1166 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1175 = *(_QWORD *)(this + 696);
  *(_DWORD *)v3772 = 23;
  if ((v1175 & 0xFFFE000000000002) == 0 && v1175 && *(unsigned __int8 *)(v1175 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1175, a2, v1174, v1168, v1169, v1170, v1171, v1172, v1173);
  v1176 = *((_QWORD *)a2 + 5017);
  if (v1176 < *((_QWORD *)a2 + 5018))
    goto LABEL_877;
  v1176 = *((_QWORD *)a2 + 5019);
  if ((v1176 & 1) == 0)
  {
    v2237 = *(_QWORD *)(v1176 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1176 + HIDWORD(v2237);
    *((_QWORD *)a2 + 5019) = v1176 + (int)v2237;
LABEL_877:
    *((_QWORD *)a2 + 5017) = v1176 + 128;
    goto LABEL_878;
  }
  JSC::sanitizeStackForVM(a2, v1167, v1168, v1169, v1170, v1171, v1172, v1173);
  v1176 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2620, v2621, v2622);
LABEL_878:
  *(_DWORD *)v1176 = 0;
  JSC::Structure::Structure(v1176, (uint64_t)a2, this, v1175, (uint64_t)v3772, (unint64_t)&JSC::StringIteratorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1184 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_881;
  v1184 = *((_QWORD *)a2 + 4865);
  if ((v1184 & 1) == 0)
  {
    v2238 = *(_QWORD *)(v1184 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v1184 + HIDWORD(v2238);
    *((_QWORD *)a2 + 4865) = v1184 + (int)v2238;
LABEL_881:
    *v3763 = v1184 + 16;
    goto LABEL_882;
  }
  JSC::sanitizeStackForVM(a2, v1177, v1178, v1179, v1180, v1181, v1182, v1183);
  v1184 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2623, v2624, v2625);
LABEL_882:
  *(_DWORD *)v1184 = 0;
  v1185 = *(_DWORD *)(v1176 + 8);
  *(_DWORD *)v1184 = v1176 >> 4;
  *(_DWORD *)(v1184 + 4) = v1185;
  *(_QWORD *)(v1184 + 8) = 0;
  JSC::StringIteratorPrototype::finishCreation((JSC::StringIteratorPrototype *)v1184, a2, (JSC::JSGlobalObject *)this);
  *(_QWORD *)(this + 1248) = v1184;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1184 = *(_QWORD *)(this + 1248);
  }
  *(_DWORD *)v3772 = 67;
  if ((v1184 & 0xFFFE000000000002) == 0 && v1184 && *(unsigned __int8 *)(v1184 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1184, a2, v1193, v1187, v1188, v1189, v1190, v1191, v1192);
  v1194 = *((_QWORD *)a2 + 5017);
  if (v1194 < *((_QWORD *)a2 + 5018))
    goto LABEL_889;
  v1194 = *((_QWORD *)a2 + 5019);
  if ((v1194 & 1) == 0)
  {
    v2239 = *(_QWORD *)(v1194 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1194 + HIDWORD(v2239);
    *((_QWORD *)a2 + 5019) = v1194 + (int)v2239;
LABEL_889:
    *((_QWORD *)a2 + 5017) = v1194 + 128;
    goto LABEL_890;
  }
  JSC::sanitizeStackForVM(a2, v1186, v1187, v1188, v1189, v1190, v1191, v1192);
  v1194 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2626, v2627, v2628);
LABEL_890:
  *(_DWORD *)v1194 = 0;
  v1195 = JSC::Structure::Structure(v1194, (uint64_t)a2, this, v1184, (uint64_t)v3772, (unint64_t)&JSC::JSStringIterator::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 1188) = v1195 >> 4;
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_QWORD *)(this + 1472) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_67>(JSC::JSGlobalObject::init(JSC::VM &)::$_67 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_67 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1488) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_68>(JSC::JSGlobalObject::init(JSC::VM &)::$_68 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_68 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1504) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_69>(JSC::JSGlobalObject::init(JSC::VM &)::$_69 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_69 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1520) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_70>(JSC::JSGlobalObject::init(JSC::VM &)::$_70 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_70 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1536) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_71>(JSC::JSGlobalObject::init(JSC::VM &)::$_71 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_71 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1552) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_72>(JSC::JSGlobalObject::init(JSC::VM &)::$_72 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_72 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1568) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_73>(JSC::JSGlobalObject::init(JSC::VM &)::$_73 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_73 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1584) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_74>(JSC::JSGlobalObject::init(JSC::VM &)::$_74 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_74 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1600) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_75>(JSC::JSGlobalObject::init(JSC::VM &)::$_75 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_75 const&)::theFunc
                           + 1;
  v1204 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 75291;
  if ((v1204 & 0xFFFE000000000002) == 0 && v1204 && *(unsigned __int8 *)(v1204 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1204, a2, v1203, v1197, v1198, v1199, v1200, v1201, v1202);
  v1205 = *((_QWORD *)a2 + 5017);
  if (v1205 < *((_QWORD *)a2 + 5018))
    goto LABEL_899;
  v1205 = *((_QWORD *)a2 + 5019);
  if ((v1205 & 1) == 0)
  {
    v2240 = *(_QWORD *)(v1205 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1205 + HIDWORD(v2240);
    *((_QWORD *)a2 + 5019) = v1205 + (int)v2240;
LABEL_899:
    *((_QWORD *)a2 + 5017) = v1205 + 128;
    goto LABEL_900;
  }
  JSC::sanitizeStackForVM(a2, v1196, v1197, v1198, v1199, v1200, v1201, v1202);
  v1205 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2629, v2630, v2631);
LABEL_900:
  *(_DWORD *)v1205 = 0;
  JSC::Structure::Structure(v1205, (uint64_t)a2, this, v1204, (uint64_t)v3772, (unint64_t)&JSC::ObjectConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1213 = *(_QWORD *)(this + 656);
  v1214 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_903;
  v1214 = *((_QWORD *)a2 + 4821);
  if ((v1214 & 1) == 0)
  {
    v2241 = *(_QWORD *)(v1214 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1214 + HIDWORD(v2241);
    *((_QWORD *)a2 + 4821) = v1214 + (int)v2241;
LABEL_903:
    *v3765 = v1214 + 48;
    goto LABEL_904;
  }
  JSC::sanitizeStackForVM(a2, v1206, v1207, v1208, v1209, v1210, v1211, v1212);
  v1214 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2632, v2633, v2634);
LABEL_904:
  *(_DWORD *)v1214 = 0;
  v1215 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v1214, (uint64_t)a2, v1205, (uint64_t)JSC::callObjectConstructor, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructWithObjectConstructor);
  JSC::ObjectConstructor::finishCreation(v1215, (uint64_t)a2, (_DWORD *)this, v1213, v1216, v1217, v1218, v1219);
  *(_QWORD *)(this + 224) = v1214;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1220 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1220 <= 0xC3u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C01D8);
  }
  *(_QWORD *)(v1220 + 1568) = v1214;
  if ((v1214 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C021CLL);
  }
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_QWORD *)v3772 = 0;
  v1228 = JSC::JSFunction::create((uint64_t)a2, this, 0, (WTF::StringImpl **)v3772, (uint64_t)JSC::globalFuncThrowTypeError, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v1230 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v1230)
  {
    if (*(_DWORD *)v1230 == 2)
    {
      WTF::StringImpl::~StringImpl(v1230, v1221, v1222, v1223, v1224, v1225, v1226, v1227);
      WTF::fastFree(v2054, v2055, v2056, v2057, v2058, v2059, v2060, v2061);
    }
    else
    {
      *(_DWORD *)v1230 -= 2;
    }
  }
  v1231 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1231 <= 0x6Cu)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C023CLL);
  }
  if (!v1228)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C025CLL);
  }
  *(_QWORD *)(v1231 + 872) = v1228;
  if ((v1228 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C027CLL);
  }
  if (*v311 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1232 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 67099;
  if ((v1232 & 0xFFFE000000000002) == 0 && v1232 && *(unsigned __int8 *)(v1232 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1232, a2, v1229, v1222, v1223, v1224, v1225, v1226, v1227);
  v1233 = *((_QWORD *)a2 + 5017);
  if (v1233 < *((_QWORD *)a2 + 5018))
    goto LABEL_923;
  v1233 = *((_QWORD *)a2 + 5019);
  if ((v1233 & 1) == 0)
  {
    v2242 = *(_QWORD *)(v1233 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1233 + HIDWORD(v2242);
    *((_QWORD *)a2 + 5019) = v1233 + (int)v2242;
LABEL_923:
    *((_QWORD *)a2 + 5017) = v1233 + 128;
    goto LABEL_924;
  }
  JSC::sanitizeStackForVM(a2, v1221, v1222, v1223, v1224, v1225, v1226, v1227);
  v1233 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2635, v2636, v2637);
LABEL_924:
  *(_DWORD *)v1233 = 0;
  JSC::Structure::Structure(v1233, (uint64_t)a2, this, v1232, (uint64_t)v3772, (unint64_t)&JSC::FunctionConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1241 = *(_QWORD *)(this + 664);
  v1242 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_927;
  v1242 = *((_QWORD *)a2 + 4821);
  if ((v1242 & 1) == 0)
  {
    v2243 = *(_QWORD *)(v1242 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1242 + HIDWORD(v2243);
    *((_QWORD *)a2 + 4821) = v1242 + (int)v2243;
LABEL_927:
    *v3765 = v1242 + 48;
    goto LABEL_928;
  }
  JSC::sanitizeStackForVM(a2, v1234, v1235, v1236, v1237, v1238, v1239, v1240);
  v1242 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2638, v2639, v2640);
LABEL_928:
  *(_DWORD *)v1242 = 0;
  v1243 = JSC::InternalFunction::InternalFunction(v1242, (uint64_t)a2, v1233, (uint64_t)JSC::callFunctionConstructor, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructWithFunctionConstructor);
  JSC::InternalFunction::finishCreation(v1243, a2, (const WTF::String *)1, (JSC::VM *)(*((_QWORD *)a2 + 5244) + 616), 1, v1244, v1245, v1246);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v1242, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), v1241, 14, v1247, v1248, v1249, v1250);
  *(_QWORD *)(this + 256) = v1242;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1259 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 75291;
  if ((v1259 & 0xFFFE000000000002) == 0 && v1259 && *(unsigned __int8 *)(v1259 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1259, a2, v1258, v1252, v1253, v1254, v1255, v1256, v1257);
  v1260 = *((_QWORD *)a2 + 5017);
  if (v1260 < *((_QWORD *)a2 + 5018))
    goto LABEL_935;
  v1260 = *((_QWORD *)a2 + 5019);
  if ((v1260 & 1) == 0)
  {
    v2244 = *(_QWORD *)(v1260 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1260 + HIDWORD(v2244);
    *((_QWORD *)a2 + 5019) = v1260 + (int)v2244;
LABEL_935:
    *((_QWORD *)a2 + 5017) = v1260 + 128;
    goto LABEL_936;
  }
  JSC::sanitizeStackForVM(a2, v1251, v1252, v1253, v1254, v1255, v1256, v1257);
  v1260 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2641, v2642, v2643);
LABEL_936:
  v3753 = v1214;
  *(_DWORD *)v1260 = 0;
  JSC::Structure::Structure(v1260, (uint64_t)a2, this, v1259, (uint64_t)v3772, (unint64_t)&JSC::ArrayConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1268 = *(_QWORD *)(this + 672);
  v1269 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_939;
  v1269 = *((_QWORD *)a2 + 4821);
  if ((v1269 & 1) == 0)
  {
    v2245 = *(_QWORD *)(v1269 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1269 + HIDWORD(v2245);
    *((_QWORD *)a2 + 4821) = v1269 + (int)v2245;
LABEL_939:
    *v3765 = v1269 + 48;
    goto LABEL_940;
  }
  JSC::sanitizeStackForVM(a2, v1261, v1262, v1263, v1264, v1265, v1266, v1267);
  v1269 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2644, v2645, v2646);
LABEL_940:
  *(_DWORD *)v1269 = 0;
  v1270 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v1269, (uint64_t)a2, v1260, (uint64_t)JSC::callArrayConstructor, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructWithArrayConstructor);
  JSC::ArrayConstructor::finishCreation(v1270, (JSC::BuiltinExecutables **)a2, this, v1268, v1271, v1272, v1273, v1274);
  *(_QWORD *)(this + 232) = v1269;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1283 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1283 <= 0xC4u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C033CLL);
  }
  *(_QWORD *)(v1283 + 1576) = v1269;
  if ((v1269 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C035CLL);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1284 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 67099;
  if ((v1284 & 0xFFFE000000000002) == 0 && v1284 && *(unsigned __int8 *)(v1284 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1284, a2, v1282, v1276, v1277, v1278, v1279, v1280, v1281);
  v1285 = *((_QWORD *)a2 + 5017);
  if (v1285 < *((_QWORD *)a2 + 5018))
    goto LABEL_951;
  v1285 = *((_QWORD *)a2 + 5019);
  if ((v1285 & 1) == 0)
  {
    v2246 = *(_QWORD *)(v1285 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1285 + HIDWORD(v2246);
    *((_QWORD *)a2 + 5019) = v1285 + (int)v2246;
LABEL_951:
    *((_QWORD *)a2 + 5017) = v1285 + 128;
    goto LABEL_952;
  }
  JSC::sanitizeStackForVM(a2, v1275, v1276, v1277, v1278, v1279, v1280, v1281);
  v1285 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2647, v2648, v2649);
LABEL_952:
  *(_DWORD *)v1285 = 0;
  JSC::Structure::Structure(v1285, (uint64_t)a2, this, v1284, (uint64_t)v3772, (unint64_t)&JSC::ShadowRealmConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1293 = *(_QWORD *)(this + 680);
  v1294 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_955;
  v1294 = *((_QWORD *)a2 + 4821);
  if ((v1294 & 1) == 0)
  {
    v2247 = *(_QWORD *)(v1294 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1294 + HIDWORD(v2247);
    *((_QWORD *)a2 + 4821) = v1294 + (int)v2247;
LABEL_955:
    *v3765 = v1294 + 48;
    goto LABEL_956;
  }
  JSC::sanitizeStackForVM(a2, v1286, v1287, v1288, v1289, v1290, v1291, v1292);
  v1294 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2650, v2651, v2652);
LABEL_956:
  *(_DWORD *)v1294 = 0;
  v1295 = v1285;
  v1296 = (JSC::JSObject *)v1294;
  v1297 = JSC::InternalFunction::InternalFunction(v1294, (uint64_t)a2, v1295, (uint64_t)JSC::callShadowRealm, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructWithShadowRealmConstructor);
  JSC::InternalFunction::finishCreation(v1297, a2, 0, (JSC::VM *)(*((_QWORD *)a2 + 5244) + 720), 1, v1298, v1299, v1300);
  JSC::JSObject::putDirectWithoutTransition(v1296, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), v1293, 14, v1301, v1302, v1303, v1304);
  v3752 = (uint64_t)v1296;
  *(_QWORD *)(this + 240) = v1296;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1313 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 75291;
  if ((v1313 & 0xFFFE000000000002) == 0 && v1313 && *(unsigned __int8 *)(v1313 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1313, a2, v1312, v1306, v1307, v1308, v1309, v1310, v1311);
  v1314 = *((_QWORD *)a2 + 5017);
  if (v1314 < *((_QWORD *)a2 + 5018))
    goto LABEL_963;
  v1314 = *((_QWORD *)a2 + 5019);
  if ((v1314 & 1) == 0)
  {
    v2248 = *(_QWORD *)(v1314 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1314 + HIDWORD(v2248);
    *((_QWORD *)a2 + 5019) = v1314 + (int)v2248;
LABEL_963:
    *((_QWORD *)a2 + 5017) = v1314 + 128;
    goto LABEL_964;
  }
  JSC::sanitizeStackForVM(a2, v1305, v1306, v1307, v1308, v1309, v1310, v1311);
  v1314 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2653, v2654, v2655);
LABEL_964:
  *(_DWORD *)v1314 = 0;
  JSC::Structure::Structure(v1314, (uint64_t)a2, this, v1313, (uint64_t)v3772, (unint64_t)&JSC::RegExpConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1322 = *(_DWORD **)(this + 688);
  v1323 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_967;
  v1323 = *((_QWORD *)a2 + 4821);
  if ((v1323 & 1) == 0)
  {
    v2249 = *(_QWORD *)(v1323 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1323 + HIDWORD(v2249);
    *((_QWORD *)a2 + 4821) = v1323 + (int)v2249;
LABEL_967:
    *v3765 = v1323 + 48;
    goto LABEL_968;
  }
  JSC::sanitizeStackForVM(a2, v1315, v1316, v1317, v1318, v1319, v1320, v1321);
  v1323 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2656, v2657, v2658);
LABEL_968:
  v3756 = (JSC::JSObject *)v1323;
  *(_DWORD *)v1323 = 0;
  JSC::InternalFunction::InternalFunction(v1323, (uint64_t)a2, v1314, (uint64_t)JSC::callRegExpConstructor, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructWithRegExpConstructor);
  JSC::RegExpConstructor::finishCreation(v3756, a2, v1322, v1324, v1325, v1326, v1327, v1328);
  v1336 = v3756;
  *(_QWORD *)(this + 248) = v3756;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1336 = v3756;
  }
  v1337 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1337 <= 0x93u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C041CLL);
  }
  *(_QWORD *)(v1337 + 1184) = v1336;
  if ((v1336 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C043CLL);
  }
  v1338 = *(unsigned __int8 *)(this + 7);
  v1339 = *v3764;
  if (*v3764 >= v1338)
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1338 = *(unsigned __int8 *)(this + 7);
    v1339 = *v3764;
  }
  v1340 = *((_QWORD *)a2 + 5246);
  *(_QWORD *)(this + 2152) = 0;
  *(_QWORD *)(this + 2144) = v1340;
  v1341 = 0.0;
  *(_OWORD *)(this + 2120) = 0u;
  *(_BYTE *)(this + 2136) = 0;
  if (v1339 >= v1338)
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1342 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 67448346;
  if ((v1342 & 0xFFFE000000000002) == 0 && v1342 && *(unsigned __int8 *)(v1342 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1342, a2, v1341, v1330, v1331, v1332, v1333, v1334, v1335);
  v1343 = *((_QWORD *)a2 + 5017);
  if (v1343 < *((_QWORD *)a2 + 5018))
    goto LABEL_981;
  v1343 = *((_QWORD *)a2 + 5019);
  if ((v1343 & 1) == 0)
  {
    v2250 = *(_QWORD *)(v1343 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1343 + HIDWORD(v2250);
    *((_QWORD *)a2 + 5019) = v1343 + (int)v2250;
LABEL_981:
    *((_QWORD *)a2 + 5017) = v1343 + 128;
    goto LABEL_982;
  }
  JSC::sanitizeStackForVM(a2, v1329, v1330, v1331, v1332, v1333, v1334, v1335);
  v1343 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2659, v2660, v2661);
LABEL_982:
  *(_DWORD *)v1343 = 0;
  JSC::Structure::Structure(v1343, (uint64_t)a2, this, v1342, (uint64_t)v3772, (unint64_t)&JSC::StringConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v3754 = JSC::StringConstructor::create((uint64_t)a2, v1343, *(_QWORD *)(this + 1192), v1344, v1345, v1346, v1347, v1348);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 1192), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v3754, 4, v1349, v1350, v1351, v1352);
  v1361 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 67448346;
  if ((v1361 & 0xFFFE000000000002) == 0 && v1361 && *(unsigned __int8 *)(v1361 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1361, a2, v1360, v1354, v1355, v1356, v1357, v1358, v1359);
  v1362 = *((_QWORD *)a2 + 5017);
  if (v1362 < *((_QWORD *)a2 + 5018))
    goto LABEL_989;
  v1362 = *((_QWORD *)a2 + 5019);
  if ((v1362 & 1) == 0)
  {
    v2251 = *(_QWORD *)(v1362 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1362 + HIDWORD(v2251);
    *((_QWORD *)a2 + 5019) = v1362 + (int)v2251;
LABEL_989:
    *((_QWORD *)a2 + 5017) = v1362 + 128;
    goto LABEL_990;
  }
  JSC::sanitizeStackForVM(a2, v1353, v1354, v1355, v1356, v1357, v1358, v1359);
  v1362 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2662, v2663, v2664);
LABEL_990:
  v3751 = v1269;
  *(_DWORD *)v1362 = 0;
  JSC::Structure::Structure(v1362, (uint64_t)a2, this, v1361, (uint64_t)v3772, (unint64_t)&JSC::JSPromiseConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1363 = *(_QWORD *)(this + 1200);
  v1364 = *(JSC::JSGlobalObject **)(v1362 + 40);
  v1365 = JSC::BuiltinExecutables::promiseConstructorPromiseConstructorCodeExecutable(*v3757);
  v1366 = *((_QWORD *)*v3757 + 1);
  ++*(_DWORD *)(v1366 + 8);
  *(_QWORD *)v3772 = v1366;
  *(_OWORD *)&v3772[8] = xmmword_199124DD0;
  v1377 = JSC::UnlinkedFunctionExecutable::link(v1365, (uint64_t)a2, 0, (uint64_t)v3772, 0, 0, 0, v1367, COERCE_DOUBLE(0x4E5000002CBLL), v1368, v1369);
  v1378 = *(_DWORD **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v1378)
  {
    if (v1378[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1378 + 8))(v1378);
    else
      --v1378[2];
  }
  v1379 = *v3761;
  if (*((_QWORD *)a2 + 4786) >= *((_QWORD *)a2 + 4787))
  {
    v1379 = *((_QWORD *)a2 + 4788);
    if ((v1379 & 1) != 0)
    {
      JSC::sanitizeStackForVM(a2, v1370, v1371, v1372, v1373, v1374, v1375, v1376);
      v1379 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3742, (uint64_t)v3758, 32, 0, 0, v2665, v2666, v2667);
      goto LABEL_997;
    }
    v2252 = *(_QWORD *)(v1379 + 8) ^ *((_QWORD *)a2 + 4789);
    *((_QWORD *)a2 + 4787) = v1379 + HIDWORD(v2252);
    *((_QWORD *)a2 + 4788) = v1379 + (int)v2252;
  }
  *v3761 = v1379 + 32;
LABEL_997:
  *(_DWORD *)v1379 = 0;
  v1380 = v1362;
  v1381 = (JSC::JSPromiseConstructor *)v1379;
  v1382 = JSC::JSCallee::JSCallee((JSC::JSCell *)v1379, (uint64_t)a2, (uint64_t)v1364, v1380);
  *((_QWORD *)v1382 + 3) = v1377;
  JSC::JSPromiseConstructor::finishCreation(v1382, (uint64_t)a2, v1363, v1388, v1383, v1384, v1385, v1386, v1387);
  JSC::JSPromiseConstructor::addOwnInternalSlots(v1381, (JSC::BuiltinExecutables **)a2, v1364);
  v3755 = (uint64_t)v1381;
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 1200), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)v1381, 4, v1389, v1390, v1391, v1392);
  v1401 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 75291;
  if ((v1401 & 0xFFFE000000000002) == 0 && v1401 && *(unsigned __int8 *)(v1401 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1401, a2, v1400, v1394, v1395, v1396, v1397, v1398, v1399);
  v1402 = *((_QWORD *)a2 + 5017);
  if (v1402 < *((_QWORD *)a2 + 5018))
    goto LABEL_1002;
  v1402 = *((_QWORD *)a2 + 5019);
  if ((v1402 & 1) == 0)
  {
    v2253 = *(_QWORD *)(v1402 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1402 + HIDWORD(v2253);
    *((_QWORD *)a2 + 5019) = v1402 + (int)v2253;
LABEL_1002:
    *((_QWORD *)a2 + 5017) = v1402 + 128;
    goto LABEL_1003;
  }
  JSC::sanitizeStackForVM(a2, v1393, v1394, v1395, v1396, v1397, v1398, v1399);
  v1402 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2668, v2669, v2670);
LABEL_1003:
  *(_DWORD *)v1402 = 0;
  JSC::Structure::Structure(v1402, (uint64_t)a2, this, v1401, (uint64_t)v3772, (unint64_t)&JSC::BigIntConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1410 = *(_QWORD *)(this + 1208);
  v1411 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_1006;
  v1411 = *((_QWORD *)a2 + 4821);
  if ((v1411 & 1) == 0)
  {
    v2254 = *(_QWORD *)(v1411 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1411 + HIDWORD(v2254);
    *((_QWORD *)a2 + 4821) = v1411 + (int)v2254;
LABEL_1006:
    *v3765 = v1411 + 48;
    goto LABEL_1007;
  }
  JSC::sanitizeStackForVM(a2, v1403, v1404, v1405, v1406, v1407, v1408, v1409);
  v1411 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2671, v2672, v2673);
LABEL_1007:
  *(_DWORD *)v1411 = 0;
  JSC::InternalFunction::InternalFunction(v1411, (uint64_t)a2, v1402, (uint64_t)JSC::callBigIntConstructor, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructBigIntConstructor);
  v1412 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v1412 = 0x600000002;
  *(_QWORD *)(v1412 + 8) = "BigInt";
  *(_DWORD *)(v1412 + 16) = 4;
  *(_QWORD *)v3772 = v1412;
  JSC::InternalFunction::finishCreation(v1411, a2, (const WTF::String *)1, (JSC::VM *)v3772, 1, v1413, v1414, v1415);
  v1424 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v1424)
  {
    if (*(_DWORD *)v1424 == 2)
    {
      WTF::StringImpl::~StringImpl(v1424, v1416, v1417, v1418, v1419, v1420, v1421, v1422);
      WTF::fastFree(v2062, v2063, v2064, v2065, v2066, v2067, v2068, v2069);
    }
    else
    {
      *(_DWORD *)v1424 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v1411, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), v1410, 14, v1420, v1421, v1422, v1423);
  v3750 = v1411;
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 1208), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v1411, 4, v1425, v1426, v1427, v1428);
  v1437 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 75291;
  if ((v1437 & 0xFFFE000000000002) == 0 && v1437 && *(unsigned __int8 *)(v1437 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1437, a2, v1436, v1430, v1431, v1432, v1433, v1434, v1435);
  v1438 = *((_QWORD *)a2 + 5017);
  if (v1438 < *((_QWORD *)a2 + 5018))
    goto LABEL_1015;
  v1438 = *((_QWORD *)a2 + 5019);
  if ((v1438 & 1) == 0)
  {
    v2255 = *(_QWORD *)(v1438 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1438 + HIDWORD(v2255);
    *((_QWORD *)a2 + 5019) = v1438 + (int)v2255;
LABEL_1015:
    *((_QWORD *)a2 + 5017) = v1438 + 128;
    goto LABEL_1016;
  }
  JSC::sanitizeStackForVM(a2, v1429, v1430, v1431, v1432, v1433, v1434, v1435);
  v1438 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2674, v2675, v2676);
LABEL_1016:
  *(_DWORD *)v1438 = 0;
  JSC::Structure::Structure(v1438, (uint64_t)a2, this, v1437, (uint64_t)v3772, (unint64_t)&JSC::SymbolConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1446 = *(_QWORD *)(this + 1216);
  v1447 = *v3765;
  if (*((_QWORD *)a2 + 4819) >= *((_QWORD *)a2 + 4820))
  {
    v1447 = *((_QWORD *)a2 + 4821);
    if ((v1447 & 1) != 0)
    {
      JSC::sanitizeStackForVM(a2, v1439, v1440, v1441, v1442, v1443, v1444, v1445);
      v1447 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2677, v2678, v2679);
      goto LABEL_1020;
    }
    v2256 = *(_QWORD *)(v1447 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1447 + HIDWORD(v2256);
    *((_QWORD *)a2 + 4821) = v1447 + (int)v2256;
  }
  *v3765 = v1447 + 48;
LABEL_1020:
  *(_DWORD *)v1447 = 0;
  v1448 = (JSC::JSObject *)JSC::InternalFunction::InternalFunction(v1447, (uint64_t)a2, v1438, (uint64_t)JSC::callSymbol, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructSymbol);
  JSC::SymbolConstructor::finishCreation(v1448, a2, v1446, v1449, v1450, v1451, v1452, v1453);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 1216), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v1447, 4, v1454, v1455, v1456, v1457);
  v1466 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 67099;
  if ((v1466 & 0xFFFE000000000002) == 0 && v1466 && *(unsigned __int8 *)(v1466 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1466, a2, v1465, v1459, v1460, v1461, v1462, v1463, v1464);
  v1467 = *((_QWORD *)a2 + 5017);
  if (v1467 < *((_QWORD *)a2 + 5018))
    goto LABEL_1025;
  v1467 = *((_QWORD *)a2 + 5019);
  if ((v1467 & 1) == 0)
  {
    v2257 = *(_QWORD *)(v1467 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1467 + HIDWORD(v2257);
    *((_QWORD *)a2 + 5019) = v1467 + (int)v2257;
LABEL_1025:
    *((_QWORD *)a2 + 5017) = v1467 + 128;
    goto LABEL_1026;
  }
  JSC::sanitizeStackForVM(a2, v1458, v1459, v1460, v1461, v1462, v1463, v1464);
  v1467 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2680, v2681, v2682);
LABEL_1026:
  v3749 = v1447;
  *(_DWORD *)v1467 = 0;
  JSC::Structure::Structure(v1467, (uint64_t)a2, this, v1466, (uint64_t)v3772, (unint64_t)&JSC::WeakObjectRefConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1475 = *(_QWORD *)(this + 1224);
  v1476 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_1029;
  v1476 = *((_QWORD *)a2 + 4821);
  if ((v1476 & 1) == 0)
  {
    v2258 = *(_QWORD *)(v1476 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1476 + HIDWORD(v2258);
    *((_QWORD *)a2 + 4821) = v1476 + (int)v2258;
LABEL_1029:
    *v3765 = v1476 + 48;
    goto LABEL_1030;
  }
  JSC::sanitizeStackForVM(a2, v1468, v1469, v1470, v1471, v1472, v1473, v1474);
  v1476 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2683, v2684, v2685);
LABEL_1030:
  *(_DWORD *)v1476 = 0;
  JSC::InternalFunction::InternalFunction(v1476, (uint64_t)a2, v1467, (uint64_t)JSC::callWeakRef, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructWeakRef);
  v1477 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v1477 = 0x700000002;
  *(_QWORD *)(v1477 + 8) = "WeakRef";
  *(_DWORD *)(v1477 + 16) = 4;
  *(_QWORD *)v3772 = v1477;
  JSC::InternalFunction::finishCreation(v1476, a2, (const WTF::String *)1, (JSC::VM *)v3772, 1, v1478, v1479, v1480);
  v1489 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v1489)
  {
    if (*(_DWORD *)v1489 == 2)
    {
      WTF::StringImpl::~StringImpl(v1489, v1481, v1482, v1483, v1484, v1485, v1486, v1487);
      WTF::fastFree(v2070, v2071, v2072, v2073, v2074, v2075, v2076, v2077);
    }
    else
    {
      *(_DWORD *)v1489 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v1476, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), v1475, 14, v1485, v1486, v1487, v1488);
  v3748 = v1476;
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 1224), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v1476, 4, v1490, v1491, v1492, v1493);
  v1502 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 67099;
  if ((v1502 & 0xFFFE000000000002) == 0 && v1502 && *(unsigned __int8 *)(v1502 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1502, a2, v1501, v1495, v1496, v1497, v1498, v1499, v1500);
  v1503 = *((_QWORD *)a2 + 5017);
  if (v1503 < *((_QWORD *)a2 + 5018))
    goto LABEL_1038;
  v1503 = *((_QWORD *)a2 + 5019);
  if ((v1503 & 1) == 0)
  {
    v2259 = *(_QWORD *)(v1503 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1503 + HIDWORD(v2259);
    *((_QWORD *)a2 + 5019) = v1503 + (int)v2259;
LABEL_1038:
    *((_QWORD *)a2 + 5017) = v1503 + 128;
    goto LABEL_1039;
  }
  JSC::sanitizeStackForVM(a2, v1494, v1495, v1496, v1497, v1498, v1499, v1500);
  v1503 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2686, v2687, v2688);
LABEL_1039:
  *(_DWORD *)v1503 = 0;
  JSC::Structure::Structure(v1503, (uint64_t)a2, this, v1502, (uint64_t)v3772, (unint64_t)&JSC::FinalizationRegistryConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1511 = *(_QWORD *)(this + 1232);
  v1512 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_1042;
  v1512 = *((_QWORD *)a2 + 4821);
  if ((v1512 & 1) == 0)
  {
    v2260 = *(_QWORD *)(v1512 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1512 + HIDWORD(v2260);
    *((_QWORD *)a2 + 4821) = v1512 + (int)v2260;
LABEL_1042:
    *v3765 = v1512 + 48;
    goto LABEL_1043;
  }
  JSC::sanitizeStackForVM(a2, v1504, v1505, v1506, v1507, v1508, v1509, v1510);
  v1512 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2689, v2690, v2691);
LABEL_1043:
  *(_DWORD *)v1512 = 0;
  JSC::InternalFunction::InternalFunction(v1512, (uint64_t)a2, v1503, (uint64_t)JSC::callFinalizationRegistry, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructFinalizationRegistry);
  v1513 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v1513 = 0x1400000002;
  *(_QWORD *)(v1513 + 8) = "FinalizationRegistry";
  *(_DWORD *)(v1513 + 16) = 4;
  *(_QWORD *)v3772 = v1513;
  JSC::InternalFunction::finishCreation(v1512, a2, (const WTF::String *)1, (JSC::VM *)v3772, 1, v1514, v1515, v1516);
  v1525 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v1525)
  {
    if (*(_DWORD *)v1525 == 2)
    {
      WTF::StringImpl::~StringImpl(v1525, v1517, v1518, v1519, v1520, v1521, v1522, v1523);
      WTF::fastFree(v2078, v2079, v2080, v2081, v2082, v2083, v2084, v2085);
    }
    else
    {
      *(_DWORD *)v1525 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v1512, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), v1511, 14, v1521, v1522, v1523, v1524);
  v3747 = v1512;
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 1232), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v1512, 4, v1526, v1527, v1528, v1529);
  v1538 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 67448346;
  if ((v1538 & 0xFFFE000000000002) == 0 && v1538 && *(unsigned __int8 *)(v1538 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1538, a2, v1537, v1531, v1532, v1533, v1534, v1535, v1536);
  v1539 = *((_QWORD *)a2 + 5017);
  if (v1539 < *((_QWORD *)a2 + 5018))
    goto LABEL_1051;
  v1539 = *((_QWORD *)a2 + 5019);
  if ((v1539 & 1) == 0)
  {
    v2261 = *(_QWORD *)(v1539 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1539 + HIDWORD(v2261);
    *((_QWORD *)a2 + 5019) = v1539 + (int)v2261;
LABEL_1051:
    *((_QWORD *)a2 + 5017) = v1539 + 128;
    goto LABEL_1052;
  }
  JSC::sanitizeStackForVM(a2, v1530, v1531, v1532, v1533, v1534, v1535, v1536);
  v1539 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2692, v2693, v2694);
LABEL_1052:
  *(_DWORD *)v1539 = 0;
  JSC::Structure::Structure(v1539, (uint64_t)a2, this, v1538, (uint64_t)v3772, (unint64_t)&JSC::JSInternalPromiseConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1540 = *(_QWORD *)(this + 1240);
  v1541 = *(_QWORD *)(v1539 + 40);
  v1542 = JSC::BuiltinExecutables::promiseConstructorInternalPromiseConstructorCodeExecutable(*v3757);
  v1543 = *((_QWORD *)*v3757 + 1);
  ++*(_DWORD *)(v1543 + 8);
  *(_QWORD *)v3772 = v1543;
  *(_OWORD *)&v3772[8] = xmmword_199124DC0;
  v1554 = JSC::UnlinkedFunctionExecutable::link(v1542, (uint64_t)a2, 0, (uint64_t)v3772, 0, 0, 0, v1544, COERCE_DOUBLE(0x2CB000000AALL), v1545, v1546);
  v1555 = *(_DWORD **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v1555)
  {
    if (v1555[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1555 + 8))(v1555);
    else
      --v1555[2];
  }
  v1556 = *v3761;
  if (*((_QWORD *)a2 + 4786) < *((_QWORD *)a2 + 4787))
    goto LABEL_1058;
  v1556 = *((_QWORD *)a2 + 4788);
  if ((v1556 & 1) == 0)
  {
    v2262 = *(_QWORD *)(v1556 + 8) ^ *((_QWORD *)a2 + 4789);
    *((_QWORD *)a2 + 4787) = v1556 + HIDWORD(v2262);
    *((_QWORD *)a2 + 4788) = v1556 + (int)v2262;
LABEL_1058:
    *v3761 = v1556 + 32;
    goto LABEL_1059;
  }
  JSC::sanitizeStackForVM(a2, v1547, v1548, v1549, v1550, v1551, v1552, v1553);
  v1556 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3742, (uint64_t)v3758, 32, 0, 0, v2695, v2696, v2697);
LABEL_1059:
  *(_DWORD *)v1556 = 0;
  v1557 = JSC::JSCallee::JSCallee((JSC::JSCell *)v1556, (uint64_t)a2, v1541, v1539);
  *(_QWORD *)(v1556 + 24) = v1554;
  JSC::JSPromiseConstructor::finishCreation(v1557, (uint64_t)a2, v1540, v1563, v1558, v1559, v1560, v1561, v1562);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 1240), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v1556, 4, v1564, v1565, v1566, v1567);
  v1576 = v3755;
  *(_QWORD *)(this + 264) = v3755;
  v1577 = *(unsigned __int8 *)(this + 7);
  v1578 = *((_DWORD *)a2 + 190);
  if (v1578 >= v1577)
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1576 = v3755;
    v1577 = *(unsigned __int8 *)(this + 7);
    v1578 = *v3764;
  }
  *(_QWORD *)(this + 272) = v1556;
  if (v1578 >= v1577)
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1576 = v3755;
  }
  *(_QWORD *)(this + 280) = v3754;
  if (v3754 && *v3764 >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1576 = v3755;
  }
  v1579 = *(_QWORD *)(this + 1960);
  v1580 = *(_DWORD *)v1579;
  if (*(_DWORD *)v1579 <= 0x95u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0678);
  }
  *(_QWORD *)(v1579 + 1200) = v1576;
  if ((v1576 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C06C0);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1579 = *(_QWORD *)(this + 1960);
    v1580 = *(_DWORD *)v1579;
  }
  if (v1580 <= 0x96)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C06E0);
  }
  *(_QWORD *)(v1579 + 1208) = v1556;
  if ((v1556 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0700);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v1579 = *(_QWORD *)(this + 1960);
    v1580 = *(_DWORD *)v1579;
  }
  if (v1580 <= 0xD1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0720);
  }
  if (!v3754)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0740);
  }
  *(_QWORD *)(v1579 + 1680) = v3754;
  if ((v3754 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0760);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_QWORD *)(this + 112) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_76>(JSC::JSGlobalObject::init(JSC::VM &)::$_76 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_76 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 128) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_77>(JSC::JSGlobalObject::init(JSC::VM &)::$_77 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_77 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 144) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_78>(JSC::JSGlobalObject::init(JSC::VM &)::$_78 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_78 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 160) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_79>(JSC::JSGlobalObject::init(JSC::VM &)::$_79 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_79 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 176) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_80>(JSC::JSGlobalObject::init(JSC::VM &)::$_80 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_80 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 192) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_81>(JSC::JSGlobalObject::init(JSC::VM &)::$_81 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_81 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 208) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_82>(JSC::JSGlobalObject::init(JSC::VM &)::$_82 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_82 const&)::theFunc
                          + 1;
  v1581 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 23;
  if ((v1581 & 0xFFFE000000000002) == 0 && v1581 && *(unsigned __int8 *)(v1581 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1581, a2, v1575, v1569, v1570, v1571, v1572, v1573, v1574);
  v1582 = *((_QWORD *)a2 + 5017);
  if (v1582 < *((_QWORD *)a2 + 5018))
    goto LABEL_1082;
  v1582 = *((_QWORD *)a2 + 5019);
  if ((v1582 & 1) == 0)
  {
    v2263 = *(_QWORD *)(v1582 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1582 + HIDWORD(v2263);
    *((_QWORD *)a2 + 5019) = v1582 + (int)v2263;
LABEL_1082:
    *((_QWORD *)a2 + 5017) = v1582 + 128;
    goto LABEL_1083;
  }
  JSC::sanitizeStackForVM(a2, v1568, v1569, v1570, v1571, v1572, v1573, v1574);
  v1582 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2698, v2699, v2700);
LABEL_1083:
  *(_DWORD *)v1582 = 0;
  JSC::Structure::Structure(v1582, (uint64_t)a2, this, v1581, (uint64_t)v3772, (unint64_t)&JSC::GeneratorFunctionPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1590 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_1086;
  v1590 = *((_QWORD *)a2 + 4865);
  if ((v1590 & 1) == 0)
  {
    v2264 = *(_QWORD *)(v1590 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v1590 + HIDWORD(v2264);
    *((_QWORD *)a2 + 4865) = v1590 + (int)v2264;
LABEL_1086:
    *v3763 = v1590 + 16;
    goto LABEL_1087;
  }
  JSC::sanitizeStackForVM(a2, v1583, v1584, v1585, v1586, v1587, v1588, v1589);
  v1590 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2701, v2702, v2703);
LABEL_1087:
  *(_DWORD *)v1590 = 0;
  v1591 = *(_DWORD *)(v1582 + 8);
  *(_DWORD *)v1590 = v1582 >> 4;
  *(_DWORD *)(v1590 + 4) = v1591;
  *(_QWORD *)(v1590 + 8) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1592 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v1599 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v1599 = 0x1100000002;
  *(_QWORD *)(v1599 + 8) = "GeneratorFunction";
  *(_DWORD *)(v1599 + 16) = 12;
  v1600 = *v3759;
  if (*((_QWORD *)a2 + 4962) < *((_QWORD *)a2 + 4963))
    goto LABEL_1090;
  v1600 = *((_QWORD *)a2 + 4964);
  if ((v1600 & 1) == 0)
  {
    v2265 = *(_QWORD *)(v1600 + 8) ^ *((_QWORD *)a2 + 4965);
    *((_QWORD *)a2 + 4963) = v1600 + HIDWORD(v2265);
    *((_QWORD *)a2 + 4964) = v1600 + (int)v2265;
LABEL_1090:
    *v3759 = v1600 + 16;
    goto LABEL_1091;
  }
  JSC::sanitizeStackForVM(a2, v1593, v1594, v1600, v1595, v1596, v1597, v1598);
  v1600 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3743, (uint64_t)v3758, 16, 0, 0, v2704, v2705, v2706);
LABEL_1091:
  *(_DWORD *)v1600 = *((_QWORD *)a2 + 5189) >> 4;
  *(_DWORD *)(v1600 + 4) = v3760.n128_u32[0];
  *(_QWORD *)(v1600 + 8) = v1599;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v1590, (uint64_t)a2, v1592, v1600, 6, v1596, v1597, v1598, v3760);
  *(_QWORD *)(this + 712) = v1590;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_DWORD *)v3772 = 67099;
  v3762 = v1242 & 0xFFFE000000000002;
  if ((v1242 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v1242 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1242, a2, v1608, v1602, v1603, v1604, v1605, v1606, v1607);
  v1609 = *((_QWORD *)a2 + 5017);
  if (v1609 < *((_QWORD *)a2 + 5018))
    goto LABEL_1099;
  v1609 = *((_QWORD *)a2 + 5019);
  if ((v1609 & 1) == 0)
  {
    v2266 = *(_QWORD *)(v1609 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1609 + HIDWORD(v2266);
    *((_QWORD *)a2 + 5019) = v1609 + (int)v2266;
LABEL_1099:
    *((_QWORD *)a2 + 5017) = v1609 + 128;
    goto LABEL_1100;
  }
  JSC::sanitizeStackForVM(a2, v1601, v1602, v1603, v1604, v1605, v1606, v1607);
  v1609 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2707, v2708, v2709);
LABEL_1100:
  *(_DWORD *)v1609 = 0;
  JSC::Structure::Structure(v1609, (uint64_t)a2, this, v1242, (uint64_t)v3772, (unint64_t)&JSC::GeneratorFunctionConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1617 = *(_QWORD *)(this + 712);
  v1618 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_1103;
  v1618 = *((_QWORD *)a2 + 4821);
  if ((v1618 & 1) == 0)
  {
    v2267 = *(_QWORD *)(v1618 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1618 + HIDWORD(v2267);
    *((_QWORD *)a2 + 4821) = v1618 + (int)v2267;
LABEL_1103:
    *v3765 = v1618 + 48;
    goto LABEL_1104;
  }
  JSC::sanitizeStackForVM(a2, v1610, v1611, v1612, v1613, v1614, v1615, v1616);
  v1618 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2710, v2711, v2712);
LABEL_1104:
  *(_DWORD *)v1618 = 0;
  JSC::InternalFunction::InternalFunction(v1618, (uint64_t)a2, v1609, (uint64_t)JSC::callGeneratorFunctionConstructor, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructGeneratorFunctionConstructor);
  v1619 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v1619 = 0x1100000002;
  *(_QWORD *)(v1619 + 8) = "GeneratorFunction";
  *(_DWORD *)(v1619 + 16) = 4;
  *(_QWORD *)v3772 = v1619;
  JSC::InternalFunction::finishCreation(v1618, a2, (const WTF::String *)1, (JSC::VM *)v3772, 1, v1620, v1621, v1622);
  v1631 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v1631)
  {
    if (*(_DWORD *)v1631 == 2)
    {
      WTF::StringImpl::~StringImpl(v1631, v1623, v1624, v1625, v1626, v1627, v1628, v1629);
      WTF::fastFree(v2086, v2087, v2088, v2089, v2090, v2091, v2092, v2093);
    }
    else
    {
      *(_DWORD *)v1631 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v1618, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), v1617, 14, v1627, v1628, v1629, v1630);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 712), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v1618, 6, v1632, v1633, v1634, v1635);
  v1644 = *(_QWORD *)(this + 712);
  *(_DWORD *)v3772 = 67440154;
  if ((v1644 & 0xFFFE000000000002) == 0 && v1644 && *(unsigned __int8 *)(v1644 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1644, a2, v1643, v1637, v1638, v1639, v1640, v1641, v1642);
  v1645 = *((_QWORD *)a2 + 5017);
  if (v1645 < *((_QWORD *)a2 + 5018))
    goto LABEL_1112;
  v1645 = *((_QWORD *)a2 + 5019);
  if ((v1645 & 1) == 0)
  {
    v2268 = *(_QWORD *)(v1645 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1645 + HIDWORD(v2268);
    *((_QWORD *)a2 + 5019) = v1645 + (int)v2268;
LABEL_1112:
    *((_QWORD *)a2 + 5017) = v1645 + 128;
    goto LABEL_1113;
  }
  JSC::sanitizeStackForVM(a2, v1636, v1637, v1638, v1639, v1640, v1641, v1642);
  v1645 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2713, v2714, v2715);
LABEL_1113:
  *(_DWORD *)v1645 = 0;
  v1646 = JSC::Structure::Structure(v1645, (uint64_t)a2, this, v1644, (uint64_t)v3772, (unint64_t)&JSC::JSGeneratorFunction::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 988) = v1646 >> 4;
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 720), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), *(_QWORD *)(this + 712), 6, v1647, v1648, v1649, v1650);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 712), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), *(_QWORD *)(this + 720), 6, v1651, v1652, v1653, v1654);
  v1663 = *(_QWORD *)(this + 720);
  *(_DWORD *)v3772 = 62;
  if ((v1663 & 0xFFFE000000000002) == 0 && v1663 && *(unsigned __int8 *)(v1663 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1663, a2, v1662, v1656, v1657, v1658, v1659, v1660, v1661);
  v1664 = *((_QWORD *)a2 + 5017);
  if (v1664 < *((_QWORD *)a2 + 5018))
    goto LABEL_1122;
  v1664 = *((_QWORD *)a2 + 5019);
  if ((v1664 & 1) == 0)
  {
    v2269 = *(_QWORD *)(v1664 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1664 + HIDWORD(v2269);
    *((_QWORD *)a2 + 5019) = v1664 + (int)v2269;
LABEL_1122:
    *((_QWORD *)a2 + 5017) = v1664 + 128;
    goto LABEL_1123;
  }
  JSC::sanitizeStackForVM(a2, v1655, v1656, v1657, v1658, v1659, v1660, v1661);
  v1664 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2716, v2717, v2718);
LABEL_1123:
  *(_DWORD *)v1664 = 0;
  v1665 = JSC::Structure::Structure(v1664, (uint64_t)a2, this, v1663, (uint64_t)v3772, (unint64_t)&JSC::JSGenerator::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 992) = v1665 >> 4;
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1674 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 23;
  if ((v1674 & 0xFFFE000000000002) == 0 && v1674 && *(unsigned __int8 *)(v1674 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1674, a2, v1673, v1667, v1668, v1669, v1670, v1671, v1672);
  v1675 = *((_QWORD *)a2 + 5017);
  if (v1675 < *((_QWORD *)a2 + 5018))
    goto LABEL_1132;
  v1675 = *((_QWORD *)a2 + 5019);
  if ((v1675 & 1) == 0)
  {
    v2270 = *(_QWORD *)(v1675 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1675 + HIDWORD(v2270);
    *((_QWORD *)a2 + 5019) = v1675 + (int)v2270;
LABEL_1132:
    *((_QWORD *)a2 + 5017) = v1675 + 128;
    goto LABEL_1133;
  }
  JSC::sanitizeStackForVM(a2, v1666, v1667, v1668, v1669, v1670, v1671, v1672);
  v1675 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2719, v2720, v2721);
LABEL_1133:
  *(_DWORD *)v1675 = 0;
  JSC::Structure::Structure(v1675, (uint64_t)a2, this, v1674, (uint64_t)v3772, (unint64_t)&JSC::AsyncFunctionPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1683 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_1136;
  v1683 = *((_QWORD *)a2 + 4865);
  if ((v1683 & 1) == 0)
  {
    v2271 = *(_QWORD *)(v1683 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v1683 + HIDWORD(v2271);
    *((_QWORD *)a2 + 4865) = v1683 + (int)v2271;
LABEL_1136:
    *v3763 = v1683 + 16;
    goto LABEL_1137;
  }
  JSC::sanitizeStackForVM(a2, v1676, v1677, v1678, v1679, v1680, v1681, v1682);
  v1683 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2722, v2723, v2724);
LABEL_1137:
  *(_DWORD *)v1683 = 0;
  v1684 = *(_DWORD *)(v1675 + 8);
  *(_DWORD *)v1683 = v1675 >> 4;
  *(_DWORD *)(v1683 + 4) = v1684;
  *(_QWORD *)(v1683 + 8) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1685 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v1692 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v1692 = 0xD00000002;
  *(_QWORD *)(v1692 + 8) = "AsyncFunction";
  *(_DWORD *)(v1692 + 16) = 12;
  v1693 = *v3759;
  if (*((_QWORD *)a2 + 4962) < *((_QWORD *)a2 + 4963))
    goto LABEL_1140;
  v1693 = *((_QWORD *)a2 + 4964);
  if ((v1693 & 1) == 0)
  {
    v2272 = *(_QWORD *)(v1693 + 8) ^ *((_QWORD *)a2 + 4965);
    *((_QWORD *)a2 + 4963) = v1693 + HIDWORD(v2272);
    *((_QWORD *)a2 + 4964) = v1693 + (int)v2272;
LABEL_1140:
    *v3759 = v1693 + 16;
    goto LABEL_1141;
  }
  JSC::sanitizeStackForVM(a2, v1686, v1687, v1693, v1688, v1689, v1690, v1691);
  v1693 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3743, (uint64_t)v3758, 16, 0, 0, v2725, v2726, v2727);
LABEL_1141:
  *(_DWORD *)v1693 = *((_QWORD *)a2 + 5189) >> 4;
  *(_DWORD *)(v1693 + 4) = v3760.n128_u32[0];
  *(_QWORD *)(v1693 + 8) = v1692;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v1683, (uint64_t)a2, v1685, v1693, 6, v1689, v1690, v1691, v3760);
  *(_QWORD *)(this + 1056) = v1683;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_DWORD *)v3772 = 67099;
  if (!v3762 && *(unsigned __int8 *)(v1242 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1242, a2, v1701, v1695, v1696, v1697, v1698, v1699, v1700);
  v1702 = *((_QWORD *)a2 + 5017);
  if (v1702 < *((_QWORD *)a2 + 5018))
    goto LABEL_1149;
  v1702 = *((_QWORD *)a2 + 5019);
  if ((v1702 & 1) == 0)
  {
    v2273 = *(_QWORD *)(v1702 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1702 + HIDWORD(v2273);
    *((_QWORD *)a2 + 5019) = v1702 + (int)v2273;
LABEL_1149:
    *((_QWORD *)a2 + 5017) = v1702 + 128;
    goto LABEL_1150;
  }
  JSC::sanitizeStackForVM(a2, v1694, v1695, v1696, v1697, v1698, v1699, v1700);
  v1702 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2728, v2729, v2730);
LABEL_1150:
  *(_DWORD *)v1702 = 0;
  JSC::Structure::Structure(v1702, (uint64_t)a2, this, v1242, (uint64_t)v3772, (unint64_t)&JSC::AsyncFunctionConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1710 = *(_QWORD *)(this + 1056);
  v1711 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_1153;
  v1711 = *((_QWORD *)a2 + 4821);
  if ((v1711 & 1) == 0)
  {
    v2274 = *(_QWORD *)(v1711 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1711 + HIDWORD(v2274);
    *((_QWORD *)a2 + 4821) = v1711 + (int)v2274;
LABEL_1153:
    *v3765 = v1711 + 48;
    goto LABEL_1154;
  }
  JSC::sanitizeStackForVM(a2, v1703, v1704, v1705, v1706, v1707, v1708, v1709);
  v1711 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2731, v2732, v2733);
LABEL_1154:
  *(_DWORD *)v1711 = 0;
  JSC::InternalFunction::InternalFunction(v1711, (uint64_t)a2, v1702, (uint64_t)JSC::callAsyncFunctionConstructor, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructAsyncFunctionConstructor);
  v1712 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v1712 = 0xD00000002;
  *(_QWORD *)(v1712 + 8) = "AsyncFunction";
  *(_DWORD *)(v1712 + 16) = 4;
  *(_QWORD *)v3772 = v1712;
  JSC::InternalFunction::finishCreation(v1711, a2, (const WTF::String *)1, (JSC::VM *)v3772, 1, v1713, v1714, v1715);
  v1724 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v1724)
  {
    if (*(_DWORD *)v1724 == 2)
    {
      WTF::StringImpl::~StringImpl(v1724, v1716, v1717, v1718, v1719, v1720, v1721, v1722);
      WTF::fastFree(v2094, v2095, v2096, v2097, v2098, v2099, v2100, v2101);
    }
    else
    {
      *(_DWORD *)v1724 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v1711, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), v1710, 14, v1720, v1721, v1722, v1723);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 1056), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v1711, 6, v1725, v1726, v1727, v1728);
  v1737 = *(_QWORD *)(this + 1056);
  *(_DWORD *)v3772 = 67440154;
  if ((v1737 & 0xFFFE000000000002) == 0 && v1737 && *(unsigned __int8 *)(v1737 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1737, a2, v1736, v1730, v1731, v1732, v1733, v1734, v1735);
  v1738 = *((_QWORD *)a2 + 5017);
  if (v1738 < *((_QWORD *)a2 + 5018))
    goto LABEL_1162;
  v1738 = *((_QWORD *)a2 + 5019);
  if ((v1738 & 1) == 0)
  {
    v2275 = *(_QWORD *)(v1738 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1738 + HIDWORD(v2275);
    *((_QWORD *)a2 + 5019) = v1738 + (int)v2275;
LABEL_1162:
    *((_QWORD *)a2 + 5017) = v1738 + 128;
    goto LABEL_1163;
  }
  JSC::sanitizeStackForVM(a2, v1729, v1730, v1731, v1732, v1733, v1734, v1735);
  v1738 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2734, v2735, v2736);
LABEL_1163:
  *(_DWORD *)v1738 = 0;
  v1739 = JSC::Structure::Structure(v1738, (uint64_t)a2, this, v1737, (uint64_t)v3772, (unint64_t)&JSC::JSAsyncFunction::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 980) = v1739 >> 4;
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1748 = *(_QWORD *)(this + 664);
  *(_DWORD *)v3772 = 23;
  if ((v1748 & 0xFFFE000000000002) == 0 && v1748 && *(unsigned __int8 *)(v1748 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1748, a2, v1747, v1741, v1742, v1743, v1744, v1745, v1746);
  v1749 = *((_QWORD *)a2 + 5017);
  if (v1749 < *((_QWORD *)a2 + 5018))
    goto LABEL_1172;
  v1749 = *((_QWORD *)a2 + 5019);
  if ((v1749 & 1) == 0)
  {
    v2276 = *(_QWORD *)(v1749 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1749 + HIDWORD(v2276);
    *((_QWORD *)a2 + 5019) = v1749 + (int)v2276;
LABEL_1172:
    *((_QWORD *)a2 + 5017) = v1749 + 128;
    goto LABEL_1173;
  }
  JSC::sanitizeStackForVM(a2, v1740, v1741, v1742, v1743, v1744, v1745, v1746);
  v1749 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2737, v2738, v2739);
LABEL_1173:
  *(_DWORD *)v1749 = 0;
  JSC::Structure::Structure(v1749, (uint64_t)a2, this, v1748, (uint64_t)v3772, (unint64_t)&JSC::AsyncGeneratorFunctionPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1757 = *v3763;
  if (*((_QWORD *)a2 + 4863) < *((_QWORD *)a2 + 4864))
    goto LABEL_1176;
  v1757 = *((_QWORD *)a2 + 4865);
  if ((v1757 & 1) == 0)
  {
    v2277 = *(_QWORD *)(v1757 + 8) ^ *((_QWORD *)a2 + 4866);
    *((_QWORD *)a2 + 4864) = v1757 + HIDWORD(v2277);
    *((_QWORD *)a2 + 4865) = v1757 + (int)v2277;
LABEL_1176:
    *v3763 = v1757 + 16;
    goto LABEL_1177;
  }
  JSC::sanitizeStackForVM(a2, v1750, v1751, v1752, v1753, v1754, v1755, v1756);
  v1757 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2740, v2741, v2742);
LABEL_1177:
  *(_DWORD *)v1757 = 0;
  v1758 = *(_DWORD *)(v1749 + 8);
  *(_DWORD *)v1757 = v1749 >> 4;
  *(_DWORD *)(v1757 + 4) = v1758;
  *(_QWORD *)(v1757 + 8) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1759 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2776);
  v1766 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v1766 = 0x1600000002;
  *(_QWORD *)(v1766 + 8) = "AsyncGeneratorFunction";
  *(_DWORD *)(v1766 + 16) = 12;
  v1767 = *v3759;
  if (*((_QWORD *)a2 + 4962) < *((_QWORD *)a2 + 4963))
    goto LABEL_1180;
  v1767 = *((_QWORD *)a2 + 4964);
  if ((v1767 & 1) == 0)
  {
    v2278 = *(_QWORD *)(v1767 + 8) ^ *((_QWORD *)a2 + 4965);
    *((_QWORD *)a2 + 4963) = v1767 + HIDWORD(v2278);
    *((_QWORD *)a2 + 4964) = v1767 + (int)v2278;
LABEL_1180:
    *v3759 = v1767 + 16;
    goto LABEL_1181;
  }
  JSC::sanitizeStackForVM(a2, v1760, v1761, v1767, v1762, v1763, v1764, v1765);
  v1767 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3743, (uint64_t)v3758, 16, 0, 0, v2743, v2744, v2745);
LABEL_1181:
  *(_DWORD *)v1767 = *((_QWORD *)a2 + 5189) >> 4;
  *(_DWORD *)(v1767 + 4) = v3760.n128_u32[0];
  *(_QWORD *)(v1767 + 8) = v1766;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v1757, (uint64_t)a2, v1759, v1767, 6, v1763, v1764, v1765, v3760);
  *(_QWORD *)(this + 1064) = v1757;
  if (*((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  *(_DWORD *)v3772 = 67099;
  if (!v3762 && *(unsigned __int8 *)(v1242 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1242, a2, v1775, v1769, v1770, v1771, v1772, v1773, v1774);
  v1776 = *((_QWORD *)a2 + 5017);
  if (v1776 < *((_QWORD *)a2 + 5018))
    goto LABEL_1189;
  v1776 = *((_QWORD *)a2 + 5019);
  if ((v1776 & 1) == 0)
  {
    v2279 = *(_QWORD *)(v1776 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1776 + HIDWORD(v2279);
    *((_QWORD *)a2 + 5019) = v1776 + (int)v2279;
LABEL_1189:
    *((_QWORD *)a2 + 5017) = v1776 + 128;
    goto LABEL_1190;
  }
  JSC::sanitizeStackForVM(a2, v1768, v1769, v1770, v1771, v1772, v1773, v1774);
  v1776 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2746, v2747, v2748);
LABEL_1190:
  *(_DWORD *)v1776 = 0;
  JSC::Structure::Structure(v1776, (uint64_t)a2, this, v1242, (uint64_t)v3772, (unint64_t)&JSC::AsyncGeneratorFunctionConstructor::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v1784 = *(_QWORD *)(this + 1064);
  v1785 = *v3765;
  if (*((_QWORD *)a2 + 4819) < *((_QWORD *)a2 + 4820))
    goto LABEL_1193;
  v1785 = *((_QWORD *)a2 + 4821);
  if ((v1785 & 1) == 0)
  {
    v2280 = *(_QWORD *)(v1785 + 8) ^ *((_QWORD *)a2 + 4822);
    *((_QWORD *)a2 + 4820) = v1785 + HIDWORD(v2280);
    *((_QWORD *)a2 + 4821) = v1785 + (int)v2280;
LABEL_1193:
    *v3765 = v1785 + 48;
    goto LABEL_1194;
  }
  JSC::sanitizeStackForVM(a2, v1777, v1778, v1779, v1780, v1781, v1782, v1783);
  v1785 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3744, (uint64_t)v3758, 48, 0, 0, v2749, v2750, v2751);
LABEL_1194:
  *(_DWORD *)v1785 = 0;
  JSC::InternalFunction::InternalFunction(v1785, (uint64_t)a2, v1776, (uint64_t)JSC::callAsyncGeneratorFunctionConstructor, (uint64_t (*)(JSC *, JSC::JSGlobalObject *, JSC::CallFrame *))JSC::constructAsyncGeneratorFunctionConstructor);
  v1786 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v1786 = 0x1600000002;
  *(_QWORD *)(v1786 + 8) = "AsyncGeneratorFunction";
  *(_DWORD *)(v1786 + 16) = 4;
  *(_QWORD *)v3772 = v1786;
  JSC::InternalFunction::finishCreation(v1785, a2, (const WTF::String *)1, (JSC::VM *)v3772, 1, v1787, v1788, v1789);
  v1798 = *(WTF::StringImpl **)v3772;
  *(_QWORD *)v3772 = 0;
  if (v1798)
  {
    if (*(_DWORD *)v1798 == 2)
    {
      WTF::StringImpl::~StringImpl(v1798, v1790, v1791, v1792, v1793, v1794, v1795, v1796);
      WTF::fastFree(v2102, v2103, v2104, v2105, v2106, v2107, v2108, v2109);
    }
    else
    {
      *(_DWORD *)v1798 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)v1785, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), v1784, 14, v1794, v1795, v1796, v1797);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 1064), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v1785, 6, v1799, v1800, v1801, v1802);
  v1811 = *(_QWORD *)(this + 1064);
  *(_DWORD *)v3772 = 67440154;
  if ((v1811 & 0xFFFE000000000002) == 0 && v1811 && *(unsigned __int8 *)(v1811 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1811, a2, v1810, v1804, v1805, v1806, v1807, v1808, v1809);
  v1812 = *((_QWORD *)a2 + 5017);
  if (v1812 < *((_QWORD *)a2 + 5018))
    goto LABEL_1202;
  v1812 = *((_QWORD *)a2 + 5019);
  if ((v1812 & 1) == 0)
  {
    v2281 = *(_QWORD *)(v1812 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1812 + HIDWORD(v2281);
    *((_QWORD *)a2 + 5019) = v1812 + (int)v2281;
LABEL_1202:
    *((_QWORD *)a2 + 5017) = v1812 + 128;
    goto LABEL_1203;
  }
  JSC::sanitizeStackForVM(a2, v1803, v1804, v1805, v1806, v1807, v1808, v1809);
  v1812 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2752, v2753, v2754);
LABEL_1203:
  *(_DWORD *)v1812 = 0;
  v1813 = JSC::Structure::Structure(v1812, (uint64_t)a2, this, v1811, (uint64_t)v3772, (unint64_t)&JSC::JSAsyncGeneratorFunction::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 984) = v1813 >> 4;
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 728), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), *(_QWORD *)(this + 1064), 6, v1814, v1815, v1816, v1817);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 1064), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160), *(_QWORD *)(this + 728), 6, v1818, v1819, v1820, v1821);
  v1830 = *(_QWORD *)(this + 728);
  *(_DWORD *)v3772 = 63;
  if ((v1830 & 0xFFFE000000000002) == 0 && v1830 && *(unsigned __int8 *)(v1830 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v1830, a2, v1829, v1823, v1824, v1825, v1826, v1827, v1828);
  v1831 = *((_QWORD *)a2 + 5017);
  if (v1831 < *((_QWORD *)a2 + 5018))
    goto LABEL_1212;
  v1831 = *((_QWORD *)a2 + 5019);
  if ((v1831 & 1) == 0)
  {
    v2282 = *(_QWORD *)(v1831 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v1831 + HIDWORD(v2282);
    *((_QWORD *)a2 + 5019) = v1831 + (int)v2282;
LABEL_1212:
    *((_QWORD *)a2 + 5017) = v1831 + 128;
    goto LABEL_1213;
  }
  JSC::sanitizeStackForVM(a2, v1822, v1823, v1824, v1825, v1826, v1827, v1828);
  v1831 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2755, v2756, v2757);
LABEL_1213:
  *(_DWORD *)v1831 = 0;
  v1832 = JSC::Structure::Structure(v1831, (uint64_t)a2, this, v1830, (uint64_t)v3772, (unint64_t)&JSC::JSAsyncGenerator::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_DWORD *)(this + 996) = v1832 >> 4;
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 656), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v3753, 4, v1833, v1834, v1835, v1836);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 664), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v1242, 4, v1837, v1838, v1839, v1840);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 672), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v3751, 4, v1841, v1842, v1843, v1844);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 688), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), (uint64_t)v3756, 4, v1845, v1846, v1847, v1848);
  JSC::JSObject::putDirectWithoutTransition(*(JSC::JSObject **)(this + 680), (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1080), v3752, 4, v1849, v1850, v1851, v1852);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 696), v3753, 4, v1853, v1854, v1855, v1856);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 616), v1242, 4, v1857, v1858, v1859, v1860);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 504), v3751, 4, v1861, v1862, v1863, v1864);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 736), (uint64_t)v3756, 4, v1865, v1866, v1867, v1868);
  if (BYTE3(qword_1ECF4C7A8))
  {
    v2287 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 776);
    v2288 = JSC::LazyClassStructure::constructor((JSC::LazyClassStructure *)(this + 1144), this);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, v2287, v2288, 4, v2289, v2290, v2291, v2292);
  }
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 784), v3754, 4, v1869, v1870, v1871, v1872);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 712), v3755, 4, v1873, v1874, v1875, v1876);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 536), v3750, 4, v1877, v1878, v1879, v1880);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 792), v3749, 4, v1881, v1882, v1883, v1884);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 808), v3748, 4, v1885, v1886, v1887, v1888);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 608), v3747, 4, v1889, v1890, v1891, v1892);
  *(_QWORD *)(this + 1072) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_83>(JSC::JSGlobalObject::init(JSC::VM &)::$_83 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1080) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_84>(JSC::JSGlobalObject::init(JSC::VM &)::$_84 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 1088) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_85>(JSC::JSGlobalObject::init(JSC::VM &)::$_85 const&)::theFunc
                           + 1;
  *(_QWORD *)(this + 304) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_86>(JSC::JSGlobalObject::init(JSC::VM &)::$_86 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 312) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_87>(JSC::JSGlobalObject::init(JSC::VM &)::$_87 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 320) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_88>(JSC::JSGlobalObject::init(JSC::VM &)::$_88 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 328) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_89>(JSC::JSGlobalObject::init(JSC::VM &)::$_89 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 336) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_90>(JSC::JSGlobalObject::init(JSC::VM &)::$_90 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 344) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_91>(JSC::JSGlobalObject::init(JSC::VM &)::$_91 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 352) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_92>(JSC::JSGlobalObject::init(JSC::VM &)::$_92 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 360) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_93>(JSC::JSGlobalObject::init(JSC::VM &)::$_93 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 368) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_94>(JSC::JSGlobalObject::init(JSC::VM &)::$_94 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 376) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_95>(JSC::JSGlobalObject::init(JSC::VM &)::$_95 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 384) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_96>(JSC::JSGlobalObject::init(JSC::VM &)::$_96 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_96 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 400) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_97>(JSC::JSGlobalObject::init(JSC::VM &)::$_97 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_97 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 288) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::IntlCollator>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_98>(JSC::JSGlobalObject::init(JSC::VM &)::$_98 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 296) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::IntlNumberFormat>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_99>(JSC::JSGlobalObject::init(JSC::VM &)::$_99 const&)::theFunc
                          + 1;
  v1899 = JSC::IntlObject::createStructure((unint64_t *)a2, (JSC::VM *)this, *(_QWORD *)(this + 656), v1893, v1894, v1895, v1896, v1897, v1898);
  v1905 = JSC::IntlObject::create(a2, (JSC::VM *)this, v1899, v1900, v1901, v1902, v1903, v1904);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 632), v1905, 4, v1906, v1907, v1908, v1909);
  if (BYTE6(qword_1ECF4C7A8))
  {
    *(_QWORD *)(this + 416) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_100>(JSC::JSGlobalObject::init(JSC::VM &)::$_100 const&)::theFunc
                            + 1;
    *(_QWORD *)(this + 424) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_101>(JSC::JSGlobalObject::init(JSC::VM &)::$_101 const&)::theFunc
                            + 1;
    *(_QWORD *)(this + 432) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_102>(JSC::JSGlobalObject::init(JSC::VM &)::$_102 const&)::theFunc
                            + 1;
    *(_QWORD *)(this + 440) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_103>(JSC::JSGlobalObject::init(JSC::VM &)::$_103 const&)::theFunc
                            + 1;
    *(_QWORD *)(this + 448) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_104>(JSC::JSGlobalObject::init(JSC::VM &)::$_104 const&)::theFunc
                            + 1;
    *(_QWORD *)(this + 456) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_105>(JSC::JSGlobalObject::init(JSC::VM &)::$_105 const&)::theFunc
                            + 1;
    *(_QWORD *)(this + 464) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_106>(JSC::JSGlobalObject::init(JSC::VM &)::$_106 const&)::theFunc
                            + 1;
    v2293 = (JSC::VM *)JSC::TemporalObject::createStructure(a2, (JSC::VM *)this, v1910, (uint64_t)v1911, v1912, v1913, v1914, v1915, v1916.n128_f64[0]);
    v2300 = JSC::TemporalObject::create(a2, v2293, v2294, v2295, v2296, v2297, v2298, v2299);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 800), v2300, 4, v2301, v2302, v2303, v2304);
  }
  if (BYTE4(qword_1ECF4C7A8))
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 720), v3752, 4, v1913, v1914, v1915, v1916);
  *(_QWORD *)(this + 648) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSModuleLoader>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_107>(JSC::JSGlobalObject::init(JSC::VM &)::$_107 const&)::theFunc
                          + 1;
  *(_QWORD *)(this + 1952) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSInternalPromise>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_108>(JSC::JSGlobalObject::init(JSC::VM &)::$_108 const&)::theFunc
                           + 1;
  if (byte_1ECF4C6C0)
  {
    v2305 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 648);
    v2306 = JSC::JSGlobalObject::moduleLoader(this);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, v2305, v2306, 4, v2307, v2308, v2309, v2310);
  }
  GetterById = JSC::getGetterById((JSC *)this, *(_QWORD *)(this + 688), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1304), v1911, v1912, v1913, v1914, v1915, (int8x16_t)v1916);
  v1924 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1924 <= 0xA7u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0AD8);
  }
  if (!GetterById)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0AF8);
  }
  *(_QWORD *)(v1924 + 1344) = GetterById;
  if ((GetterById & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0B18);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1925 = JSC::getGetterById((JSC *)this, *(_QWORD *)(this + 688), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1448), v1918, v1919, v1920, v1921, v1922, v1923);
  v1932 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1932 <= 0xA9u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0B38);
  }
  if (!v1925)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0B58);
  }
  *(_QWORD *)(v1932 + 1360) = v1925;
  if ((v1925 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0B78);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1933 = JSC::getGetterById((JSC *)this, *(_QWORD *)(this + 688), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1392), v1926, v1927, v1928, v1929, v1930, v1931);
  v1940 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1940 <= 0xA8u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0B98);
  }
  if (!v1933)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0BB8);
  }
  *(_QWORD *)(v1940 + 1352) = v1933;
  if ((v1933 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0BD8);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1941 = JSC::getGetterById((JSC *)this, *(_QWORD *)(this + 688), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1536), v1934, v1935, v1936, v1937, v1938, v1939);
  v1948 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1948 <= 0xAAu)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0BF8);
  }
  if (!v1941)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0C18);
  }
  *(_QWORD *)(v1948 + 1368) = v1941;
  if ((v1941 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0C38);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1949 = JSC::getGetterById((JSC *)this, *(_QWORD *)(this + 688), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1960), v1942, v1943, v1944, v1945, v1946, v1947);
  v1956 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1956 <= 0xABu)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0C58);
  }
  if (!v1949)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0C78);
  }
  *(_QWORD *)(v1956 + 1376) = v1949;
  if ((v1949 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0C98);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1957 = JSC::getGetterById((JSC *)this, *(_QWORD *)(this + 688), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2336), v1950, v1951, v1952, v1953, v1954, v1955);
  v1964 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1964 <= 0xACu)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0CB8);
  }
  if (!v1957)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0CD8);
  }
  *(_QWORD *)(v1964 + 1384) = v1957;
  if ((v1957 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0CF8);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1965 = JSC::getGetterById((JSC *)this, *(_QWORD *)(this + 688), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2376), v1958, v1959, v1960, v1961, v1962, v1963);
  v1972 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1972 <= 0xADu)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0D18);
  }
  if (!v1965)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0D38);
  }
  *(_QWORD *)(v1972 + 1392) = v1965;
  if ((v1965 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0D58);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1973 = JSC::getGetterById((JSC *)this, *(_QWORD *)(this + 688), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2576), v1966, v1967, v1968, v1969, v1970, v1971);
  v1980 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1980 <= 0xAFu)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0D78);
  }
  if (!v1973)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0D98);
  }
  *(_QWORD *)(v1980 + 1408) = v1973;
  if ((v1973 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0DB8);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1981 = JSC::getGetterById((JSC *)this, *(_QWORD *)(this + 688), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1208), v1974, v1975, v1976, v1977, v1978, v1979);
  v1988 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1988 <= 0xAEu)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0DD8);
  }
  if (!v1981)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0DF8);
  }
  *(_QWORD *)(v1988 + 1400) = v1981;
  if ((v1981 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0E18);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1989 = JSC::getGetterById((JSC *)this, *(_QWORD *)(this + 688), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2584), v1982, v1983, v1984, v1985, v1986, v1987);
  v1995 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v1995 <= 0xB0u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0E38);
  }
  if (!v1989)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0E58);
  }
  *(_QWORD *)(v1995 + 1416) = v1989;
  if ((v1989 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0E78);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v1996 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2736);
  if (!(v1996 >> 4))
    goto LABEL_1322;
  v1997 = *(_QWORD *)(this + 688);
  if (((v1996 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v1997 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_1322;
  v1998 = *(_QWORD *)(16 * (*(_DWORD *)v1997 & 0xFFFFFFFE) + 0x58);
  if (!v1998)
  {
    v2009 = *(_QWORD *)(16 * (*(_DWORD *)v1997 & 0xFFFFFFFE) + 0x40);
    if (!v2009 || *(_BYTE *)(v2009 + 5) != 1 && *(_DWORD *)(v2009 + 80) < 2u)
      goto LABEL_1322;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v1997 & 0xFFFFFFFE)), a2, 1, v1990, v1991, v1992, v1993, v1994);
    if (!v1998)
      goto LABEL_1322;
  }
  if (!*(_DWORD *)(v1998 + 24))
    goto LABEL_1322;
  v1999 = *(_QWORD *)(v1998 + 16);
  v2000 = v1999 & 0xFFFFFFFFFFFFFFFELL;
  v2001 = *(unsigned int *)(v1998 + 8);
  v2002 = *(_DWORD *)(v1996 + 16);
  if ((v1999 & 1) != 0)
  {
    if ((v2002 & 0x20) != 0)
      v2002 = *(_DWORD *)(v1996 + 32);
    v2003 = *(_DWORD *)(v1998 + 12);
    v2004 = (v2002 >> 8) & *(_QWORD *)&v2003;
    v2005 = *(unsigned __int8 *)(v2000 + v2004);
    if (!*(_BYTE *)(v2000 + v2004))
      goto LABEL_1322;
    v2006 = v2000 + v2001;
    v2007 = 1;
    while (1)
    {
      v2008 = *(_QWORD *)(v2006 + 8 * (v2005 - 1));
      if (v1996 == (v2008 & 0xFFFFFFFFFFFFLL))
        break;
      v2004 = ((_DWORD)v2004 + v2007) & v2003;
      v2005 = *(unsigned __int8 *)(v2000 + v2004);
      ++v2007;
      if (!*(_BYTE *)(v2000 + v2004))
        goto LABEL_1322;
    }
    v2110 = HIBYTE(v2008);
  }
  else
  {
    if ((v2002 & 0x20) != 0)
      v2002 = *(_DWORD *)(v1996 + 32);
    v2139 = *(_DWORD *)(v1998 + 12);
    v2140 = v2139 & (v2002 >> 8);
    v2141 = *(_DWORD *)(v2000 + 4 * v2140);
    if (!v2141)
      goto LABEL_1322;
    v2142 = v2000 + 4 * v2001;
    v2143 = 1;
    while (1)
    {
      v2144 = (v2141 - 1);
      if (*(_QWORD *)(v2142 + 16 * v2144) == v1996)
        break;
      v2140 = (v2140 + v2143) & v2139;
      v2141 = *(_DWORD *)(v2000 + 4 * v2140);
      ++v2143;
      if (!v2141)
        goto LABEL_1322;
    }
    v2110 = *(unsigned int *)(v2142 + 16 * v2144 + 8);
  }
  if ((_DWORD)v2110 == -1)
  {
LABEL_1322:
    *(_QWORD *)(this + 632) = 0;
    goto LABEL_1323;
  }
  if ((int)v2110 <= 63)
  {
    v2351 = v1997 + 16;
    v2352 = v2110 << 32;
  }
  else
  {
    v2351 = *(_QWORD *)(v1997 + 8) - 8;
    v2352 = 0x3F00000000 - (v2110 << 32);
  }
  v2353 = *(_QWORD *)(v2351 + (v2352 >> 29));
  *(_QWORD *)(this + 632) = v2353;
  if (v2353 && *v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
LABEL_1323:
  v2111 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2111 <= 0xB1u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C0E98);
  }
  v2112 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1264);
  if (!(v2112 >> 4))
    goto LABEL_1342;
  v2113 = *(_QWORD *)(this + 688);
  if (((v2112 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v2113 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_1342;
  v2114 = *(_QWORD *)(16 * (*(_DWORD *)v2113 & 0xFFFFFFFE) + 0x58);
  if (!v2114)
  {
    v2125 = *(_QWORD *)(16 * (*(_DWORD *)v2113 & 0xFFFFFFFE) + 0x40);
    if (!v2125 || *(_BYTE *)(v2125 + 5) != 1 && *(_DWORD *)(v2125 + 80) < 2u)
      goto LABEL_1342;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v2113 & 0xFFFFFFFE)), a2, 1, v1990, v1991, v1992, v1993, v1994);
    if (!v2114)
      goto LABEL_1342;
  }
  if (!*(_DWORD *)(v2114 + 24))
    goto LABEL_1342;
  v2115 = *(_QWORD *)(v2114 + 16);
  v2116 = v2115 & 0xFFFFFFFFFFFFFFFELL;
  v2117 = *(unsigned int *)(v2114 + 8);
  v2118 = *(_DWORD *)(v2112 + 16);
  if ((v2115 & 1) != 0)
  {
    if ((v2118 & 0x20) != 0)
      v2118 = *(_DWORD *)(v2112 + 32);
    v2119 = *(_DWORD *)(v2114 + 12);
    v2120 = (v2118 >> 8) & *(_QWORD *)&v2119;
    v2121 = *(unsigned __int8 *)(v2116 + v2120);
    if (*(_BYTE *)(v2116 + v2120))
    {
      v2122 = v2116 + v2117;
      v2123 = 1;
      while (1)
      {
        v2124 = *(_QWORD *)(v2122 + 8 * (v2121 - 1));
        if (v2112 == (v2124 & 0xFFFFFFFFFFFFLL))
          break;
        v2120 = ((_DWORD)v2120 + v2123) & v2119;
        v2121 = *(unsigned __int8 *)(v2116 + v2120);
        ++v2123;
        if (!*(_BYTE *)(v2116 + v2120))
          goto LABEL_1342;
      }
      v2126 = HIBYTE(v2124);
      goto LABEL_1341;
    }
LABEL_1342:
    __break(0xC471u);
    JUMPOUT(0x1989BE608);
  }
  if ((v2118 & 0x20) != 0)
    v2118 = *(_DWORD *)(v2112 + 32);
  v2127 = *(_DWORD *)(v2114 + 12);
  v2128 = v2127 & (v2118 >> 8);
  v2129 = *(_DWORD *)(v2116 + 4 * v2128);
  if (!v2129)
    goto LABEL_1342;
  v2130 = v2116 + 4 * v2117;
  v2131 = 1;
  while (1)
  {
    v2132 = (v2129 - 1);
    if (*(_QWORD *)(v2130 + 16 * v2132) == v2112)
      break;
    v2128 = (v2128 + v2131) & v2127;
    v2129 = *(_DWORD *)(v2116 + 4 * v2128);
    ++v2131;
    if (!v2129)
      goto LABEL_1342;
  }
  v2126 = *(unsigned int *)(v2130 + 16 * v2132 + 8);
LABEL_1341:
  if ((_DWORD)v2126 == -1)
    goto LABEL_1342;
  if ((int)v2126 <= 63)
  {
    v2331 = v2113 + 16;
    v2332 = v2126 << 32;
  }
  else
  {
    v2331 = *(_QWORD *)(v2113 + 8) - 8;
    v2332 = 0x3F00000000 - (v2126 << 32);
  }
  v2333 = *(_QWORD *)(v2331 + (v2332 >> 29));
  if (!v2333)
    goto LABEL_1342;
  *(_QWORD *)(v2111 + 1424) = v2333;
  if ((v2333 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C2990);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2334 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2334 <= 0xB7u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C29B0);
  }
  v2335 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2720);
  if (!(v2335 >> 4))
    goto LABEL_1813;
  v2336 = *(_QWORD *)(this + 688);
  if (((v2335 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v2336 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_1813;
  v2337 = *(_QWORD *)(16 * (*(_DWORD *)v2336 & 0xFFFFFFFE) + 0x58);
  if (!v2337)
  {
    v2354 = *(_QWORD *)(16 * (*(_DWORD *)v2336 & 0xFFFFFFFE) + 0x40);
    if (!v2354 || *(_BYTE *)(v2354 + 5) != 1 && *(_DWORD *)(v2354 + 80) < 2u)
      goto LABEL_1813;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v2336 & 0xFFFFFFFE)), a2, 1, v1990, v1991, v1992, v1993, v1994);
    if (!v2337)
      goto LABEL_1813;
  }
  if (!*(_DWORD *)(v2337 + 24))
    goto LABEL_1813;
  v2338 = *(_QWORD *)(v2337 + 16);
  v2339 = v2338 & 0xFFFFFFFFFFFFFFFELL;
  v2340 = *(unsigned int *)(v2337 + 8);
  v2341 = *(_DWORD *)(v2335 + 16);
  if ((v2338 & 1) != 0)
  {
    if ((v2341 & 0x20) != 0)
      v2341 = *(_DWORD *)(v2335 + 32);
    v2342 = *(_DWORD *)(v2337 + 12);
    v2343 = (v2341 >> 8) & *(_QWORD *)&v2342;
    v2344 = *(unsigned __int8 *)(v2339 + v2343);
    if (*(_BYTE *)(v2339 + v2343))
    {
      v2345 = v2339 + v2340;
      v2346 = 1;
      while (1)
      {
        v2347 = *(_QWORD *)(v2345 + 8 * (v2344 - 1));
        if (v2335 == (v2347 & 0xFFFFFFFFFFFFLL))
          break;
        v2343 = ((_DWORD)v2343 + v2346) & v2342;
        v2344 = *(unsigned __int8 *)(v2339 + v2343);
        ++v2346;
        if (!*(_BYTE *)(v2339 + v2343))
          goto LABEL_1813;
      }
      v2355 = HIBYTE(v2347);
      goto LABEL_1812;
    }
LABEL_1813:
    __break(0xC471u);
    JUMPOUT(0x1989C142CLL);
  }
  if ((v2341 & 0x20) != 0)
    v2341 = *(_DWORD *)(v2335 + 32);
  v2356 = *(_DWORD *)(v2337 + 12);
  v2357 = v2356 & (v2341 >> 8);
  v2358 = *(_DWORD *)(v2339 + 4 * v2357);
  if (!v2358)
    goto LABEL_1813;
  v2359 = v2339 + 4 * v2340;
  v2360 = 1;
  while (1)
  {
    v2361 = (v2358 - 1);
    if (*(_QWORD *)(v2359 + 16 * v2361) == v2335)
      break;
    v2357 = (v2357 + v2360) & v2356;
    v2358 = *(_DWORD *)(v2339 + 4 * v2357);
    ++v2360;
    if (!v2358)
      goto LABEL_1813;
  }
  v2355 = *(unsigned int *)(v2359 + 16 * v2361 + 8);
LABEL_1812:
  if ((_DWORD)v2355 == -1)
    goto LABEL_1813;
  if ((int)v2355 <= 63)
  {
    v2766 = v2336 + 16;
    v2767 = v2355 << 32;
  }
  else
  {
    v2766 = *(_QWORD *)(v2336 + 8) - 8;
    v2767 = 0x3F00000000 - (v2355 << 32);
  }
  v2768 = *(_QWORD *)(v2766 + (v2767 >> 29));
  if (!v2768)
    goto LABEL_1813;
  *(_QWORD *)(v2334 + 1472) = v2768;
  if ((v2768 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C2C3CLL);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2769 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2769 <= 0xB8u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C2C5CLL);
  }
  v2770 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2736);
  if (!(v2770 >> 4))
    goto LABEL_2008;
  v2771 = *(_QWORD *)(this + 688);
  if (((v2770 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v2771 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_2008;
  v2772 = *(_QWORD *)(16 * (*(_DWORD *)v2771 & 0xFFFFFFFE) + 0x58);
  if (!v2772)
  {
    v2783 = *(_QWORD *)(16 * (*(_DWORD *)v2771 & 0xFFFFFFFE) + 0x40);
    if (!v2783 || *(_BYTE *)(v2783 + 5) != 1 && *(_DWORD *)(v2783 + 80) < 2u)
      goto LABEL_2008;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v2771 & 0xFFFFFFFE)), a2, 1, v1990, v1991, v1992, v1993, v1994);
    if (!v2772)
      goto LABEL_2008;
  }
  if (!*(_DWORD *)(v2772 + 24))
    goto LABEL_2008;
  v2773 = *(_QWORD *)(v2772 + 16);
  v2774 = v2773 & 0xFFFFFFFFFFFFFFFELL;
  v2775 = *(unsigned int *)(v2772 + 8);
  v2776 = *(_DWORD *)(v2770 + 16);
  if ((v2773 & 1) != 0)
  {
    if ((v2776 & 0x20) != 0)
      v2776 = *(_DWORD *)(v2770 + 32);
    v2777 = *(_DWORD *)(v2772 + 12);
    v2778 = (v2776 >> 8) & *(_QWORD *)&v2777;
    v2779 = *(unsigned __int8 *)(v2774 + v2778);
    if (*(_BYTE *)(v2774 + v2778))
    {
      v2780 = v2774 + v2775;
      v2781 = 1;
      while (1)
      {
        v2782 = *(_QWORD *)(v2780 + 8 * (v2779 - 1));
        if (v2770 == (v2782 & 0xFFFFFFFFFFFFLL))
          break;
        v2778 = ((_DWORD)v2778 + v2781) & v2777;
        v2779 = *(unsigned __int8 *)(v2774 + v2778);
        ++v2781;
        if (!*(_BYTE *)(v2774 + v2778))
          goto LABEL_2008;
      }
      v2784 = HIBYTE(v2782);
      goto LABEL_2007;
    }
LABEL_2008:
    __break(0xC471u);
    JUMPOUT(0x1989C2B98);
  }
  if ((v2776 & 0x20) != 0)
    v2776 = *(_DWORD *)(v2770 + 32);
  v2785 = *(_DWORD *)(v2772 + 12);
  v2786 = v2785 & (v2776 >> 8);
  v2787 = *(_DWORD *)(v2774 + 4 * v2786);
  if (!v2787)
    goto LABEL_2008;
  v2788 = v2774 + 4 * v2775;
  v2789 = 1;
  while (1)
  {
    v2790 = (v2787 - 1);
    if (*(_QWORD *)(v2788 + 16 * v2790) == v2770)
      break;
    v2786 = (v2786 + v2789) & v2785;
    v2787 = *(_DWORD *)(v2774 + 4 * v2786);
    ++v2789;
    if (!v2787)
      goto LABEL_2008;
  }
  v2784 = *(unsigned int *)(v2788 + 16 * v2790 + 8);
LABEL_2007:
  if ((_DWORD)v2784 == -1)
    goto LABEL_2008;
  if ((int)v2784 <= 63)
  {
    v2791 = v2771 + 16;
    v2792 = v2784 << 32;
  }
  else
  {
    v2791 = *(_QWORD *)(v2771 + 8) - 8;
    v2792 = 0x3F00000000 - (v2784 << 32);
  }
  v2793 = *(_QWORD *)(v2791 + (v2792 >> 29));
  if (!v2793)
    goto LABEL_2008;
  *(_QWORD *)(v2769 + 1480) = v2793;
  if ((v2793 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C2E48);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2794 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2794 <= 0x99u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C2E68);
  }
  v2795 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1664);
  if (!(v2795 >> 4)
    || ((v2795 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v3751 & 0xFFFFFFFE) + 0x20)) != 0)
  {
    goto LABEL_2047;
  }
  v2796 = *(_QWORD *)(16 * (*(_DWORD *)v3751 & 0xFFFFFFFE) + 0x58);
  if (!v2796)
  {
    v2807 = *(_QWORD *)(16 * (*(_DWORD *)v3751 & 0xFFFFFFFE) + 0x40);
    if (!v2807 || *(_BYTE *)(v2807 + 5) != 1 && *(_DWORD *)(v2807 + 80) < 2u)
      goto LABEL_2047;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v3751 & 0xFFFFFFFE)), a2, 1, v1990, v1991, v1992, v1993, v1994);
    if (!v2796)
      goto LABEL_2047;
  }
  if (!*(_DWORD *)(v2796 + 24))
    goto LABEL_2047;
  v2797 = *(_QWORD *)(v2796 + 16);
  v2798 = v2797 & 0xFFFFFFFFFFFFFFFELL;
  v2799 = *(unsigned int *)(v2796 + 8);
  v2800 = *(_DWORD *)(v2795 + 16);
  if ((v2797 & 1) != 0)
  {
    if ((v2800 & 0x20) != 0)
      v2800 = *(_DWORD *)(v2795 + 32);
    v2801 = *(_DWORD *)(v2796 + 12);
    v2802 = (v2800 >> 8) & *(_QWORD *)&v2801;
    v2803 = *(unsigned __int8 *)(v2798 + v2802);
    if (*(_BYTE *)(v2798 + v2802))
    {
      v2804 = v2798 + v2799;
      v2805 = 1;
      while (1)
      {
        v2806 = *(_QWORD *)(v2804 + 8 * (v2803 - 1));
        if (v2795 == (v2806 & 0xFFFFFFFFFFFFLL))
          break;
        v2802 = ((_DWORD)v2802 + v2805) & v2801;
        v2803 = *(unsigned __int8 *)(v2798 + v2802);
        ++v2805;
        if (!*(_BYTE *)(v2798 + v2802))
          goto LABEL_2047;
      }
      v2808 = HIBYTE(v2806);
      goto LABEL_2046;
    }
LABEL_2047:
    __break(0xC471u);
    JUMPOUT(0x1989C2DACLL);
  }
  if ((v2800 & 0x20) != 0)
    v2800 = *(_DWORD *)(v2795 + 32);
  v2809 = *(_DWORD *)(v2796 + 12);
  v2810 = v2809 & (v2800 >> 8);
  v2811 = *(_DWORD *)(v2798 + 4 * v2810);
  if (!v2811)
    goto LABEL_2047;
  v2812 = v2798 + 4 * v2799;
  v2813 = 1;
  while (1)
  {
    v2814 = (v2811 - 1);
    if (*(_QWORD *)(v2812 + 16 * v2814) == v2795)
      break;
    v2810 = (v2810 + v2813) & v2809;
    v2811 = *(_DWORD *)(v2798 + 4 * v2810);
    ++v2813;
    if (!v2811)
      goto LABEL_2047;
  }
  v2808 = *(unsigned int *)(v2812 + 16 * v2814 + 8);
LABEL_2046:
  if ((_DWORD)v2808 == -1)
    goto LABEL_2047;
  if ((int)v2808 <= 63)
  {
    v2815 = v3751 + 16;
    v2816 = v2808 << 32;
  }
  else
  {
    v2815 = *(_QWORD *)(v3751 + 8) - 8;
    v2816 = 0x3F00000000 - (v2808 << 32);
  }
  v2817 = *(_QWORD *)(v2815 + (v2816 >> 29));
  if (!v2817)
    goto LABEL_2047;
  *(_QWORD *)(v2794 + 1232) = v2817;
  if ((v2817 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C30A8);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2818 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2818 <= 0xC6u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C30C8);
  }
  v2819 = (char)v3770;
  if (!v3770)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C30E8);
  }
  *(_QWORD *)(v2818 + 1592) = v3770;
  if ((v2819 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C3108);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v2818 = *(_QWORD *)(this + 1960);
    if (*(_DWORD *)v2818 <= 0xC5u)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C3128);
    }
  }
  v2820 = (char)v3769;
  if (!v3769)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C3148);
  }
  *(_QWORD *)(v2818 + 1584) = v3769;
  if ((v2820 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C3168);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2821 = JSC::JSObject::get(*(unsigned int **)(this + 656), this, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1464), (uint64_t)v1990, v1991, v1992, v1993, v1994);
  if ((v2821 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v2821 + 5) != 26)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C3188);
  }
  v2830 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2830 <= 0xC7u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C31A8);
  }
  if (!v2821)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C31C8);
  }
  *(_QWORD *)(v2830 + 1600) = v2821;
  if ((v2821 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C31E8);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2831 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2328);
  if (!(v2831 >> 4))
    goto LABEL_2120;
  v2832 = *(_QWORD *)(this + 672);
  if (((v2831 >> 4) & ~*(_DWORD *)(16 * (*(_DWORD *)v2832 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_2120;
  v2833 = *(_QWORD *)(16 * (*(_DWORD *)v2832 & 0xFFFFFFFE) + 0x58);
  if (!v2833)
  {
    v2834 = *(_QWORD *)(16 * (*(_DWORD *)v2832 & 0xFFFFFFFE) + 0x40);
    if (!v2834)
      goto LABEL_2125;
    if (*(_BYTE *)(v2834 + 5) != 1 && *(_DWORD *)(v2834 + 80) < 2u)
      goto LABEL_2120;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v2832 & 0xFFFFFFFE)), a2, 1, v2824, v2825, v2826, v2827, v2828);
    if (!v2833)
      goto LABEL_2120;
  }
  if (!*(_DWORD *)(v2833 + 24))
    goto LABEL_2120;
  v2835 = *(_QWORD *)(v2833 + 16);
  v2836 = v2835 & 0xFFFFFFFFFFFFFFFELL;
  v2837 = *(unsigned int *)(v2833 + 8);
  v2838 = *(_DWORD *)(v2831 + 16);
  if ((v2835 & 1) != 0)
  {
    if ((v2838 & 0x20) != 0)
      v2838 = *(_DWORD *)(v2831 + 32);
    v2839 = *(_DWORD *)(v2833 + 12);
    v2840 = (v2838 >> 8) & *(_QWORD *)&v2839;
    v2841 = *(unsigned __int8 *)(v2836 + v2840);
    if (!*(_BYTE *)(v2836 + v2840))
      goto LABEL_2120;
    v2842 = v2836 + v2837;
    v2843 = 1;
    while (1)
    {
      v2844 = *(_QWORD *)(v2842 + 8 * (v2841 - 1));
      if (v2831 == (v2844 & 0xFFFFFFFFFFFFLL))
        break;
      v2840 = ((_DWORD)v2840 + v2843) & v2839;
      v2841 = *(unsigned __int8 *)(v2836 + v2840);
      ++v2843;
      if (!*(_BYTE *)(v2836 + v2840))
        goto LABEL_2120;
    }
    v2851 = HIBYTE(v2844);
  }
  else
  {
    if ((v2838 & 0x20) != 0)
      v2838 = *(_DWORD *)(v2831 + 32);
    v2845 = *(_DWORD *)(v2833 + 12);
    v2846 = v2845 & (v2838 >> 8);
    v2847 = *(_DWORD *)(v2836 + 4 * v2846);
    if (!v2847)
      goto LABEL_2120;
    v2848 = v2836 + 4 * v2837;
    v2849 = 1;
    while (1)
    {
      v2850 = (v2847 - 1);
      if (*(_QWORD *)(v2848 + 16 * v2850) == v2831)
        break;
      v2846 = (v2846 + v2849) & v2845;
      v2847 = *(_DWORD *)(v2836 + 4 * v2846);
      ++v2849;
      if (!v2847)
        goto LABEL_2120;
    }
    v2851 = *(unsigned int *)(v2848 + 16 * v2850 + 8);
  }
  if ((_DWORD)v2851 == -1)
  {
LABEL_2120:
    v2834 = 0;
    goto LABEL_2125;
  }
  if ((int)v2851 <= 63)
  {
    v2852 = v2832 + 16;
    v2853 = v2851 << 32;
  }
  else
  {
    v2852 = *(_QWORD *)(v2832 + 8) - 8;
    v2853 = 0x3F00000000 - (v2851 << 32);
  }
  v2834 = *(_QWORD *)(v2852 + (v2853 >> 29));
LABEL_2125:
  v2854 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2854 <= 0xCEu)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C3904);
  }
  if (!v2834)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C3924);
  }
  *(_QWORD *)(v2854 + 1656) = v2834;
  if ((v2834 & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C3944);
  }
  if (*v3764 >= *(unsigned __int8 *)(this + 7))
  {
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
    v2854 = *(_QWORD *)(this + 1960);
    v2855 = *(_DWORD *)v2854;
    if (!*(_DWORD *)v2854)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C411CLL);
    }
    *(_QWORD *)(v2854 + 8) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_109>(JSC::JSGlobalObject::init(JSC::VM &)::$_109 const&)::theFunc
                           + 1;
    if (v2855 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C413CLL);
    }
    *(_QWORD *)(v2854 + 16) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_110>(JSC::JSGlobalObject::init(JSC::VM &)::$_110 const&)::theFunc
                            + 1;
    if (v2855 <= 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C415CLL);
    }
    *(_QWORD *)(v2854 + 24) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_111>(JSC::JSGlobalObject::init(JSC::VM &)::$_111 const&)::theFunc
                            + 1;
    if (v2855 == 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C417CLL);
    }
    *(_QWORD *)(v2854 + 32) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_112>(JSC::JSGlobalObject::init(JSC::VM &)::$_112 const&)::theFunc
                            + 1;
    if (v2855 <= 4)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C419CLL);
    }
    *(_QWORD *)(v2854 + 40) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_113>(JSC::JSGlobalObject::init(JSC::VM &)::$_113 const&)::theFunc
                            + 1;
    if (v2855 == 5)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C41BCLL);
    }
    *(_QWORD *)(v2854 + 48) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_114>(JSC::JSGlobalObject::init(JSC::VM &)::$_114 const&)::theFunc
                            + 1;
    if (v2855 <= 6)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C41DCLL);
    }
    *(_QWORD *)(v2854 + 56) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_115>(JSC::JSGlobalObject::init(JSC::VM &)::$_115 const&)::theFunc
                            + 1;
    if (v2855 == 7)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C41FCLL);
    }
    *(_QWORD *)(v2854 + 64) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_116>(JSC::JSGlobalObject::init(JSC::VM &)::$_116 const&)::theFunc
                            + 1;
    if (v2855 <= 8)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C421CLL);
    }
    *(_QWORD *)(v2854 + 72) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_117>(JSC::JSGlobalObject::init(JSC::VM &)::$_117 const&)::theFunc
                            + 1;
    if (v2855 == 9)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C423CLL);
    }
    *(_QWORD *)(v2854 + 80) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_118>(JSC::JSGlobalObject::init(JSC::VM &)::$_118 const&)::theFunc
                            + 1;
    if (v2855 <= 0xA)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C425CLL);
    }
    *(_QWORD *)(v2854 + 88) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_119>(JSC::JSGlobalObject::init(JSC::VM &)::$_119 const&)::theFunc
                            + 1;
    if (v2855 == 11)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C427CLL);
    }
    *(_QWORD *)(v2854 + 96) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_120>(JSC::JSGlobalObject::init(JSC::VM &)::$_120 const&)::theFunc
                            + 1;
    if (v2855 <= 0xC)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C429CLL);
    }
    *(_QWORD *)(v2854 + 104) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_121>(JSC::JSGlobalObject::init(JSC::VM &)::$_121 const&)::theFunc
                             + 1;
    if (v2855 == 13)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C42BCLL);
    }
    *(_QWORD *)(v2854 + 112) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_122>(JSC::JSGlobalObject::init(JSC::VM &)::$_122 const&)::theFunc
                             + 1;
    if (v2855 <= 0xE)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C42DCLL);
    }
    *(_QWORD *)(v2854 + 120) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_123>(JSC::JSGlobalObject::init(JSC::VM &)::$_123 const&)::theFunc
                             + 1;
    if (v2855 == 15)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C42FCLL);
    }
    *(_QWORD *)(v2854 + 128) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_124>(JSC::JSGlobalObject::init(JSC::VM &)::$_124 const&)::theFunc
                             + 1;
    if (v2855 <= 0x10)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C431CLL);
    }
    *(_QWORD *)(v2854 + 136) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_125>(JSC::JSGlobalObject::init(JSC::VM &)::$_125 const&)::theFunc
                             + 1;
    if (v2855 == 17)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C433CLL);
    }
    *(_QWORD *)(v2854 + 144) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_126>(JSC::JSGlobalObject::init(JSC::VM &)::$_126 const&)::theFunc
                             + 1;
    if (v2855 <= 0x12)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C435CLL);
    }
    *(_QWORD *)(v2854 + 152) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_127>(JSC::JSGlobalObject::init(JSC::VM &)::$_127 const&)::theFunc
                             + 1;
    if (v2855 == 19)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C437CLL);
    }
    *(_QWORD *)(v2854 + 160) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_128>(JSC::JSGlobalObject::init(JSC::VM &)::$_128 const&)::theFunc
                             + 1;
    if (v2855 <= 0x14)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C439CLL);
    }
    *(_QWORD *)(v2854 + 168) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_129>(JSC::JSGlobalObject::init(JSC::VM &)::$_129 const&)::theFunc
                             + 1;
    if (v2855 == 21)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C43BCLL);
    }
    *(_QWORD *)(v2854 + 176) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_130>(JSC::JSGlobalObject::init(JSC::VM &)::$_130 const&)::theFunc
                             + 1;
    if (v2855 <= 0x16)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C43DCLL);
    }
    *(_QWORD *)(v2854 + 184) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_131>(JSC::JSGlobalObject::init(JSC::VM &)::$_131 const&)::theFunc
                             + 1;
    if (v2855 == 23)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C43FCLL);
    }
    *(_QWORD *)(v2854 + 192) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_132>(JSC::JSGlobalObject::init(JSC::VM &)::$_132 const&)::theFunc
                             + 1;
    if (v2855 <= 0x18)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C441CLL);
    }
    *(_QWORD *)(v2854 + 200) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_133>(JSC::JSGlobalObject::init(JSC::VM &)::$_133 const&)::theFunc
                             + 1;
    if (v2855 == 25)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C443CLL);
    }
    *(_QWORD *)(v2854 + 208) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_134>(JSC::JSGlobalObject::init(JSC::VM &)::$_134 const&)::theFunc
                             + 1;
    if (v2855 <= 0x1A)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C445CLL);
    }
    *(_QWORD *)(v2854 + 216) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_135>(JSC::JSGlobalObject::init(JSC::VM &)::$_135 const&)::theFunc
                             + 1;
    if (v2855 == 27)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C447CLL);
    }
    *(_QWORD *)(v2854 + 224) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_136>(JSC::JSGlobalObject::init(JSC::VM &)::$_136 const&)::theFunc
                             + 1;
    if (v2855 <= 0x1C)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C449CLL);
    }
    *(_QWORD *)(v2854 + 232) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_137>(JSC::JSGlobalObject::init(JSC::VM &)::$_137 const&)::theFunc
                             + 1;
    if (v2855 == 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C44BCLL);
    }
    *(_QWORD *)(v2854 + 240) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_138>(JSC::JSGlobalObject::init(JSC::VM &)::$_138 const&)::theFunc
                             + 1;
    if (v2855 <= 0x1E)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C44DCLL);
    }
    *(_QWORD *)(v2854 + 248) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_139>(JSC::JSGlobalObject::init(JSC::VM &)::$_139 const&)::theFunc
                             + 1;
    if (v2855 == 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C44FCLL);
    }
    *(_QWORD *)(v2854 + 256) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_140>(JSC::JSGlobalObject::init(JSC::VM &)::$_140 const&)::theFunc
                             + 1;
    if (v2855 <= 0x20)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C451CLL);
    }
    *(_QWORD *)(v2854 + 264) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_141>(JSC::JSGlobalObject::init(JSC::VM &)::$_141 const&)::theFunc
                             + 1;
    if (v2855 == 33)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C453CLL);
    }
    *(_QWORD *)(v2854 + 272) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_142>(JSC::JSGlobalObject::init(JSC::VM &)::$_142 const&)::theFunc
                             + 1;
    if (v2855 <= 0x22)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C455CLL);
    }
    *(_QWORD *)(v2854 + 280) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_143>(JSC::JSGlobalObject::init(JSC::VM &)::$_143 const&)::theFunc
                             + 1;
    if (v2855 == 35)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C457CLL);
    }
    *(_QWORD *)(v2854 + 288) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_144>(JSC::JSGlobalObject::init(JSC::VM &)::$_144 const&)::theFunc
                             + 1;
    if (v2855 <= 0x24)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C459CLL);
    }
    *(_QWORD *)(v2854 + 296) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_145>(JSC::JSGlobalObject::init(JSC::VM &)::$_145 const&)::theFunc
                             + 1;
    if (v2855 == 37)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C45BCLL);
    }
    *(_QWORD *)(v2854 + 304) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_146>(JSC::JSGlobalObject::init(JSC::VM &)::$_146 const&)::theFunc
                             + 1;
    if (v2855 <= 0x26)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C45DCLL);
    }
    *(_QWORD *)(v2854 + 312) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_147>(JSC::JSGlobalObject::init(JSC::VM &)::$_147 const&)::theFunc
                             + 1;
    if (v2855 == 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C45FCLL);
    }
    *(_QWORD *)(v2854 + 320) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_148>(JSC::JSGlobalObject::init(JSC::VM &)::$_148 const&)::theFunc
                             + 1;
    if (v2855 <= 0x28)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C461CLL);
    }
    *(_QWORD *)(v2854 + 328) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_149>(JSC::JSGlobalObject::init(JSC::VM &)::$_149 const&)::theFunc
                             + 1;
    if (v2855 == 41)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C463CLL);
    }
    *(_QWORD *)(v2854 + 336) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_150>(JSC::JSGlobalObject::init(JSC::VM &)::$_150 const&)::theFunc
                             + 1;
    if (v2855 <= 0x2A)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C465CLL);
    }
    *(_QWORD *)(v2854 + 344) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_151>(JSC::JSGlobalObject::init(JSC::VM &)::$_151 const&)::theFunc
                             + 1;
    if (v2855 == 43)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C467CLL);
    }
    *(_QWORD *)(v2854 + 352) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_152>(JSC::JSGlobalObject::init(JSC::VM &)::$_152 const&)::theFunc
                             + 1;
    if (v2855 <= 0x2C)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C469CLL);
    }
    *(_QWORD *)(v2854 + 360) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_153>(JSC::JSGlobalObject::init(JSC::VM &)::$_153 const&)::theFunc
                             + 1;
    if (v2855 == 45)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C46BCLL);
    }
    *(_QWORD *)(v2854 + 368) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_154>(JSC::JSGlobalObject::init(JSC::VM &)::$_154 const&)::theFunc
                             + 1;
    if (v2855 <= 0x2E)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C46DCLL);
    }
    *(_QWORD *)(v2854 + 376) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_155>(JSC::JSGlobalObject::init(JSC::VM &)::$_155 const&)::theFunc
                             + 1;
    if (v2855 == 47)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C46FCLL);
    }
    *(_QWORD *)(v2854 + 384) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_156>(JSC::JSGlobalObject::init(JSC::VM &)::$_156 const&)::theFunc
                             + 1;
    if (v2855 <= 0x30)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C471CLL);
    }
    *(_QWORD *)(v2854 + 392) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_157>(JSC::JSGlobalObject::init(JSC::VM &)::$_157 const&)::theFunc
                             + 1;
    if (v2855 == 49)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C473CLL);
    }
    *(_QWORD *)(v2854 + 400) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_158>(JSC::JSGlobalObject::init(JSC::VM &)::$_158 const&)::theFunc
                             + 1;
    if (v2855 <= 0x32)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C475CLL);
    }
    *(_QWORD *)(v2854 + 408) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_159>(JSC::JSGlobalObject::init(JSC::VM &)::$_159 const&)::theFunc
                             + 1;
    if (v2855 == 51)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C477CLL);
    }
    *(_QWORD *)(v2854 + 416) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_160>(JSC::JSGlobalObject::init(JSC::VM &)::$_160 const&)::theFunc
                             + 1;
    if (v2855 <= 0x34)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C479CLL);
    }
    *(_QWORD *)(v2854 + 424) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_161>(JSC::JSGlobalObject::init(JSC::VM &)::$_161 const&)::theFunc
                             + 1;
    if (v2855 == 53)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C47BCLL);
    }
    *(_QWORD *)(v2854 + 432) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_162>(JSC::JSGlobalObject::init(JSC::VM &)::$_162 const&)::theFunc
                             + 1;
    if (v2855 <= 0x36)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C47DCLL);
    }
    *(_QWORD *)(v2854 + 440) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_163>(JSC::JSGlobalObject::init(JSC::VM &)::$_163 const&)::theFunc
                             + 1;
    if (v2855 == 55)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C47FCLL);
    }
    *(_QWORD *)(v2854 + 448) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_164>(JSC::JSGlobalObject::init(JSC::VM &)::$_164 const&)::theFunc
                             + 1;
    if (v2855 <= 0x38)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C481CLL);
    }
    *(_QWORD *)(v2854 + 456) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_165>(JSC::JSGlobalObject::init(JSC::VM &)::$_165 const&)::theFunc
                             + 1;
    if (v2855 == 57)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C483CLL);
    }
    *(_QWORD *)(v2854 + 464) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_166>(JSC::JSGlobalObject::init(JSC::VM &)::$_166 const&)::theFunc
                             + 1;
    if (v2855 <= 0x3A)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C485CLL);
    }
    *(_QWORD *)(v2854 + 472) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_167>(JSC::JSGlobalObject::init(JSC::VM &)::$_167 const&)::theFunc
                             + 1;
    if (v2855 == 59)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C487CLL);
    }
    *(_QWORD *)(v2854 + 480) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_168>(JSC::JSGlobalObject::init(JSC::VM &)::$_168 const&)::theFunc
                             + 1;
    if (v2855 <= 0x3C)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C489CLL);
    }
    *(_QWORD *)(v2854 + 488) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_169>(JSC::JSGlobalObject::init(JSC::VM &)::$_169 const&)::theFunc
                             + 1;
    if (v2855 == 61)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C48BCLL);
    }
    *(_QWORD *)(v2854 + 496) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_170>(JSC::JSGlobalObject::init(JSC::VM &)::$_170 const&)::theFunc
                             + 1;
    if (v2855 <= 0x3E)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C48DCLL);
    }
    *(_QWORD *)(v2854 + 504) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_171>(JSC::JSGlobalObject::init(JSC::VM &)::$_171 const&)::theFunc
                             + 1;
    if (v2855 == 63)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C48FCLL);
    }
    *(_QWORD *)(v2854 + 512) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_172>(JSC::JSGlobalObject::init(JSC::VM &)::$_172 const&)::theFunc
                             + 1;
    if (v2855 <= 0x40)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C491CLL);
    }
    *(_QWORD *)(v2854 + 520) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_173>(JSC::JSGlobalObject::init(JSC::VM &)::$_173 const&)::theFunc
                             + 1;
    if (v2855 == 65)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C493CLL);
    }
    *(_QWORD *)(v2854 + 528) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_174>(JSC::JSGlobalObject::init(JSC::VM &)::$_174 const&)::theFunc
                             + 1;
    if (v2855 <= 0x42)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C495CLL);
    }
    *(_QWORD *)(v2854 + 536) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_175>(JSC::JSGlobalObject::init(JSC::VM &)::$_175 const&)::theFunc
                             + 1;
    if (v2855 == 67)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C497CLL);
    }
    *(_QWORD *)(v2854 + 544) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_176>(JSC::JSGlobalObject::init(JSC::VM &)::$_176 const&)::theFunc
                             + 1;
    if (v2855 <= 0x44)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C499CLL);
    }
    *(_QWORD *)(v2854 + 552) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_177>(JSC::JSGlobalObject::init(JSC::VM &)::$_177 const&)::theFunc
                             + 1;
    if (v2855 == 69)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C49BCLL);
    }
    *(_QWORD *)(v2854 + 560) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_178>(JSC::JSGlobalObject::init(JSC::VM &)::$_178 const&)::theFunc
                             + 1;
    if (v2855 <= 0x46)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C49DCLL);
    }
    *(_QWORD *)(v2854 + 568) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_179>(JSC::JSGlobalObject::init(JSC::VM &)::$_179 const&)::theFunc
                             + 1;
    if (v2855 == 71)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C49FCLL);
    }
    *(_QWORD *)(v2854 + 576) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_180>(JSC::JSGlobalObject::init(JSC::VM &)::$_180 const&)::theFunc
                             + 1;
    if (v2855 <= 0x48)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4A1CLL);
    }
    *(_QWORD *)(v2854 + 584) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_181>(JSC::JSGlobalObject::init(JSC::VM &)::$_181 const&)::theFunc
                             + 1;
    if (v2855 == 73)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4A3CLL);
    }
    *(_QWORD *)(v2854 + 592) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_182>(JSC::JSGlobalObject::init(JSC::VM &)::$_182 const&)::theFunc
                             + 1;
    if (v2855 <= 0x4A)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4A5CLL);
    }
    *(_QWORD *)(v2854 + 600) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_183>(JSC::JSGlobalObject::init(JSC::VM &)::$_183 const&)::theFunc
                             + 1;
    if (v2855 == 75)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4A7CLL);
    }
    *(_QWORD *)(v2854 + 608) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_184>(JSC::JSGlobalObject::init(JSC::VM &)::$_184 const&)::theFunc
                             + 1;
    if (v2855 <= 0x4C)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4A9CLL);
    }
    *(_QWORD *)(v2854 + 616) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_185>(JSC::JSGlobalObject::init(JSC::VM &)::$_185 const&)::theFunc
                             + 1;
    if (v2855 == 77)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4ABCLL);
    }
    *(_QWORD *)(v2854 + 624) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_186>(JSC::JSGlobalObject::init(JSC::VM &)::$_186 const&)::theFunc
                             + 1;
    if (v2855 <= 0x4E)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4ADCLL);
    }
    *(_QWORD *)(v2854 + 632) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_187>(JSC::JSGlobalObject::init(JSC::VM &)::$_187 const&)::theFunc
                             + 1;
    if (v2855 == 79)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4AFCLL);
    }
    *(_QWORD *)(v2854 + 640) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_188>(JSC::JSGlobalObject::init(JSC::VM &)::$_188 const&)::theFunc
                             + 1;
    if (v2855 <= 0x50)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4B1CLL);
    }
    *(_QWORD *)(v2854 + 648) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_189>(JSC::JSGlobalObject::init(JSC::VM &)::$_189 const&)::theFunc
                             + 1;
    if (v2855 == 81)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4B3CLL);
    }
    *(_QWORD *)(v2854 + 656) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_190>(JSC::JSGlobalObject::init(JSC::VM &)::$_190 const&)::theFunc
                             + 1;
    if (v2855 <= 0x52)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C40FCLL);
    }
    *(_QWORD *)(v2854 + 664) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_191>(JSC::JSGlobalObject::init(JSC::VM &)::$_191 const&)::theFunc
                             + 1;
    if (v2855 == 83)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4B74);
    }
    *(_QWORD *)(v2854 + 672) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_192>(JSC::JSGlobalObject::init(JSC::VM &)::$_192 const&)::theFunc
                             + 1;
    if (v2855 <= 0x54)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4BACLL);
    }
    *(_QWORD *)(v2854 + 680) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_193>(JSC::JSGlobalObject::init(JSC::VM &)::$_193 const&)::theFunc
                             + 1;
    if (v2855 == 85)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4BE4);
    }
    *(_QWORD *)(v2854 + 688) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_194>(JSC::JSGlobalObject::init(JSC::VM &)::$_194 const&)::theFunc
                             + 1;
    if (v2855 <= 0x56)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4C1CLL);
    }
    *(_QWORD *)(v2854 + 696) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_195>(JSC::JSGlobalObject::init(JSC::VM &)::$_195 const&)::theFunc
                             + 1;
    if (v2855 == 87)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4C54);
    }
    *(_QWORD *)(v2854 + 704) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_196>(JSC::JSGlobalObject::init(JSC::VM &)::$_196 const&)::theFunc
                             + 1;
    if (v2855 <= 0x58)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4C8CLL);
    }
    *(_QWORD *)(v2854 + 712) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_197>(JSC::JSGlobalObject::init(JSC::VM &)::$_197 const&)::theFunc
                             + 1;
    if (v2855 == 89)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4CC4);
    }
    *(_QWORD *)(v2854 + 720) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_198>(JSC::JSGlobalObject::init(JSC::VM &)::$_198 const&)::theFunc
                             + 1;
    if (v2855 <= 0x5A)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4CFCLL);
    }
    *(_QWORD *)(v2854 + 728) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_199>(JSC::JSGlobalObject::init(JSC::VM &)::$_199 const&)::theFunc
                             + 1;
    if (v2855 == 91)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4D34);
    }
    *(_QWORD *)(v2854 + 736) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_200>(JSC::JSGlobalObject::init(JSC::VM &)::$_200 const&)::theFunc
                             + 1;
    if (v2855 <= 0x5C)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4D6CLL);
    }
    *(_QWORD *)(v2854 + 744) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_201>(JSC::JSGlobalObject::init(JSC::VM &)::$_201 const&)::theFunc
                             + 1;
    if (v2855 == 93)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4DA4);
    }
    *(_QWORD *)(v2854 + 752) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_202>(JSC::JSGlobalObject::init(JSC::VM &)::$_202 const&)::theFunc
                             + 1;
    if (v2855 <= 0x5E)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4DDCLL);
    }
    *(_QWORD *)(v2854 + 760) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_203>(JSC::JSGlobalObject::init(JSC::VM &)::$_203 const&)::theFunc
                             + 1;
    if (v2855 == 95)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4E14);
    }
    *(_QWORD *)(v2854 + 768) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_204>(JSC::JSGlobalObject::init(JSC::VM &)::$_204 const&)::theFunc
                             + 1;
    if (v2855 <= 0x60)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4E4CLL);
    }
    *(_QWORD *)(v2854 + 776) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_205>(JSC::JSGlobalObject::init(JSC::VM &)::$_205 const&)::theFunc
                             + 1;
    if (v2855 == 97)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4E84);
    }
    *(_QWORD *)(v2854 + 784) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_206>(JSC::JSGlobalObject::init(JSC::VM &)::$_206 const&)::theFunc
                             + 1;
    if (v2855 <= 0x62)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4EBCLL);
    }
    *(_QWORD *)(v2854 + 792) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_207>(JSC::JSGlobalObject::init(JSC::VM &)::$_207 const&)::theFunc
                             + 1;
    if (v2855 == 99)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4EF4);
    }
    *(_QWORD *)(v2854 + 800) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_208>(JSC::JSGlobalObject::init(JSC::VM &)::$_208 const&)::theFunc
                             + 1;
    if (v2855 <= 0x64)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4F2CLL);
    }
    *(_QWORD *)(v2854 + 808) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_209>(JSC::JSGlobalObject::init(JSC::VM &)::$_209 const&)::theFunc
                             + 1;
    if (v2855 == 101)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4F64);
    }
    *(_QWORD *)(v2854 + 816) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_210>(JSC::JSGlobalObject::init(JSC::VM &)::$_210 const&)::theFunc
                             + 1;
    if (v2855 <= 0x66)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4F9CLL);
    }
    *(_QWORD *)(v2854 + 824) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_211>(JSC::JSGlobalObject::init(JSC::VM &)::$_211 const&)::theFunc
                             + 1;
    if (v2855 == 103)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C4FD4);
    }
    *(_QWORD *)(v2854 + 832) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_212>(JSC::JSGlobalObject::init(JSC::VM &)::$_212 const&)::theFunc
                             + 1;
    if (v2855 <= 0x68)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C500CLL);
    }
    *(_QWORD *)(v2854 + 840) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_213>(JSC::JSGlobalObject::init(JSC::VM &)::$_213 const&)::theFunc
                             + 1;
    if (v2855 == 105)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C5044);
    }
    *(_QWORD *)(v2854 + 848) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_214>(JSC::JSGlobalObject::init(JSC::VM &)::$_214 const&)::theFunc
                             + 1;
    if (v2855 <= 0x6A)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C507CLL);
    }
    *(_QWORD *)(v2854 + 856) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_215>(JSC::JSGlobalObject::init(JSC::VM &)::$_215 const&)::theFunc
                             + 1;
    if (v2855 == 107)
    {
      __break(0xC471u);
      JUMPOUT(0x1989C50B4);
    }
  }
  else
  {
    *(_QWORD *)(v2854 + 8) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_109>(JSC::JSGlobalObject::init(JSC::VM &)::$_109 const&)::theFunc
                           + 1;
    *(_QWORD *)(v2854 + 16) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_110>(JSC::JSGlobalObject::init(JSC::VM &)::$_110 const&)::theFunc
                            + 1;
    *(_QWORD *)(v2854 + 24) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_111>(JSC::JSGlobalObject::init(JSC::VM &)::$_111 const&)::theFunc
                            + 1;
    *(_QWORD *)(v2854 + 32) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_112>(JSC::JSGlobalObject::init(JSC::VM &)::$_112 const&)::theFunc
                            + 1;
    *(_QWORD *)(v2854 + 40) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_113>(JSC::JSGlobalObject::init(JSC::VM &)::$_113 const&)::theFunc
                            + 1;
    *(_QWORD *)(v2854 + 48) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_114>(JSC::JSGlobalObject::init(JSC::VM &)::$_114 const&)::theFunc
                            + 1;
    *(_QWORD *)(v2854 + 56) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_115>(JSC::JSGlobalObject::init(JSC::VM &)::$_115 const&)::theFunc
                            + 1;
    *(_QWORD *)(v2854 + 64) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_116>(JSC::JSGlobalObject::init(JSC::VM &)::$_116 const&)::theFunc
                            + 1;
    *(_QWORD *)(v2854 + 72) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_117>(JSC::JSGlobalObject::init(JSC::VM &)::$_117 const&)::theFunc
                            + 1;
    *(_QWORD *)(v2854 + 80) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_118>(JSC::JSGlobalObject::init(JSC::VM &)::$_118 const&)::theFunc
                            + 1;
    *(_QWORD *)(v2854 + 88) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_119>(JSC::JSGlobalObject::init(JSC::VM &)::$_119 const&)::theFunc
                            + 1;
    *(_QWORD *)(v2854 + 96) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_120>(JSC::JSGlobalObject::init(JSC::VM &)::$_120 const&)::theFunc
                            + 1;
    *(_QWORD *)(v2854 + 104) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_121>(JSC::JSGlobalObject::init(JSC::VM &)::$_121 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 112) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_122>(JSC::JSGlobalObject::init(JSC::VM &)::$_122 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 120) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_123>(JSC::JSGlobalObject::init(JSC::VM &)::$_123 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 128) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_124>(JSC::JSGlobalObject::init(JSC::VM &)::$_124 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 136) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_125>(JSC::JSGlobalObject::init(JSC::VM &)::$_125 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 144) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_126>(JSC::JSGlobalObject::init(JSC::VM &)::$_126 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 152) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_127>(JSC::JSGlobalObject::init(JSC::VM &)::$_127 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 160) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_128>(JSC::JSGlobalObject::init(JSC::VM &)::$_128 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 168) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_129>(JSC::JSGlobalObject::init(JSC::VM &)::$_129 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 176) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_130>(JSC::JSGlobalObject::init(JSC::VM &)::$_130 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 184) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_131>(JSC::JSGlobalObject::init(JSC::VM &)::$_131 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 192) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_132>(JSC::JSGlobalObject::init(JSC::VM &)::$_132 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 200) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_133>(JSC::JSGlobalObject::init(JSC::VM &)::$_133 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 208) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_134>(JSC::JSGlobalObject::init(JSC::VM &)::$_134 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 216) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_135>(JSC::JSGlobalObject::init(JSC::VM &)::$_135 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 224) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_136>(JSC::JSGlobalObject::init(JSC::VM &)::$_136 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 232) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_137>(JSC::JSGlobalObject::init(JSC::VM &)::$_137 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 240) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_138>(JSC::JSGlobalObject::init(JSC::VM &)::$_138 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 248) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_139>(JSC::JSGlobalObject::init(JSC::VM &)::$_139 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 256) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_140>(JSC::JSGlobalObject::init(JSC::VM &)::$_140 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 264) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_141>(JSC::JSGlobalObject::init(JSC::VM &)::$_141 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 272) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_142>(JSC::JSGlobalObject::init(JSC::VM &)::$_142 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 280) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_143>(JSC::JSGlobalObject::init(JSC::VM &)::$_143 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 288) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_144>(JSC::JSGlobalObject::init(JSC::VM &)::$_144 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 296) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_145>(JSC::JSGlobalObject::init(JSC::VM &)::$_145 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 304) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_146>(JSC::JSGlobalObject::init(JSC::VM &)::$_146 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 312) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_147>(JSC::JSGlobalObject::init(JSC::VM &)::$_147 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 320) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_148>(JSC::JSGlobalObject::init(JSC::VM &)::$_148 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 328) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_149>(JSC::JSGlobalObject::init(JSC::VM &)::$_149 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 336) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_150>(JSC::JSGlobalObject::init(JSC::VM &)::$_150 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 344) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_151>(JSC::JSGlobalObject::init(JSC::VM &)::$_151 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 352) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_152>(JSC::JSGlobalObject::init(JSC::VM &)::$_152 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 360) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_153>(JSC::JSGlobalObject::init(JSC::VM &)::$_153 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 368) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_154>(JSC::JSGlobalObject::init(JSC::VM &)::$_154 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 376) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_155>(JSC::JSGlobalObject::init(JSC::VM &)::$_155 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 384) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_156>(JSC::JSGlobalObject::init(JSC::VM &)::$_156 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 392) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_157>(JSC::JSGlobalObject::init(JSC::VM &)::$_157 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 400) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_158>(JSC::JSGlobalObject::init(JSC::VM &)::$_158 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 408) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_159>(JSC::JSGlobalObject::init(JSC::VM &)::$_159 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 416) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_160>(JSC::JSGlobalObject::init(JSC::VM &)::$_160 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 424) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_161>(JSC::JSGlobalObject::init(JSC::VM &)::$_161 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 432) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_162>(JSC::JSGlobalObject::init(JSC::VM &)::$_162 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 440) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_163>(JSC::JSGlobalObject::init(JSC::VM &)::$_163 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 448) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_164>(JSC::JSGlobalObject::init(JSC::VM &)::$_164 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 456) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_165>(JSC::JSGlobalObject::init(JSC::VM &)::$_165 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 464) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_166>(JSC::JSGlobalObject::init(JSC::VM &)::$_166 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 472) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_167>(JSC::JSGlobalObject::init(JSC::VM &)::$_167 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 480) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_168>(JSC::JSGlobalObject::init(JSC::VM &)::$_168 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 488) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_169>(JSC::JSGlobalObject::init(JSC::VM &)::$_169 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 496) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_170>(JSC::JSGlobalObject::init(JSC::VM &)::$_170 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 504) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_171>(JSC::JSGlobalObject::init(JSC::VM &)::$_171 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 512) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_172>(JSC::JSGlobalObject::init(JSC::VM &)::$_172 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 520) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_173>(JSC::JSGlobalObject::init(JSC::VM &)::$_173 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 528) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_174>(JSC::JSGlobalObject::init(JSC::VM &)::$_174 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 536) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_175>(JSC::JSGlobalObject::init(JSC::VM &)::$_175 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 544) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_176>(JSC::JSGlobalObject::init(JSC::VM &)::$_176 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 552) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_177>(JSC::JSGlobalObject::init(JSC::VM &)::$_177 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 560) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_178>(JSC::JSGlobalObject::init(JSC::VM &)::$_178 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 568) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_179>(JSC::JSGlobalObject::init(JSC::VM &)::$_179 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 576) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_180>(JSC::JSGlobalObject::init(JSC::VM &)::$_180 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 584) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_181>(JSC::JSGlobalObject::init(JSC::VM &)::$_181 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 592) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_182>(JSC::JSGlobalObject::init(JSC::VM &)::$_182 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 600) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_183>(JSC::JSGlobalObject::init(JSC::VM &)::$_183 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 608) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_184>(JSC::JSGlobalObject::init(JSC::VM &)::$_184 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 616) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_185>(JSC::JSGlobalObject::init(JSC::VM &)::$_185 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 624) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_186>(JSC::JSGlobalObject::init(JSC::VM &)::$_186 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 632) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_187>(JSC::JSGlobalObject::init(JSC::VM &)::$_187 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 640) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_188>(JSC::JSGlobalObject::init(JSC::VM &)::$_188 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 648) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_189>(JSC::JSGlobalObject::init(JSC::VM &)::$_189 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 656) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_190>(JSC::JSGlobalObject::init(JSC::VM &)::$_190 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 664) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_191>(JSC::JSGlobalObject::init(JSC::VM &)::$_191 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 672) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_192>(JSC::JSGlobalObject::init(JSC::VM &)::$_192 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 680) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_193>(JSC::JSGlobalObject::init(JSC::VM &)::$_193 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 688) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_194>(JSC::JSGlobalObject::init(JSC::VM &)::$_194 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 696) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_195>(JSC::JSGlobalObject::init(JSC::VM &)::$_195 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 704) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_196>(JSC::JSGlobalObject::init(JSC::VM &)::$_196 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 712) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_197>(JSC::JSGlobalObject::init(JSC::VM &)::$_197 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 720) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_198>(JSC::JSGlobalObject::init(JSC::VM &)::$_198 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 728) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_199>(JSC::JSGlobalObject::init(JSC::VM &)::$_199 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 736) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_200>(JSC::JSGlobalObject::init(JSC::VM &)::$_200 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 744) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_201>(JSC::JSGlobalObject::init(JSC::VM &)::$_201 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 752) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_202>(JSC::JSGlobalObject::init(JSC::VM &)::$_202 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 760) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_203>(JSC::JSGlobalObject::init(JSC::VM &)::$_203 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 768) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_204>(JSC::JSGlobalObject::init(JSC::VM &)::$_204 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 776) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_205>(JSC::JSGlobalObject::init(JSC::VM &)::$_205 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 784) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_206>(JSC::JSGlobalObject::init(JSC::VM &)::$_206 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 792) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_207>(JSC::JSGlobalObject::init(JSC::VM &)::$_207 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 800) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_208>(JSC::JSGlobalObject::init(JSC::VM &)::$_208 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 808) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_209>(JSC::JSGlobalObject::init(JSC::VM &)::$_209 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 816) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_210>(JSC::JSGlobalObject::init(JSC::VM &)::$_210 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 824) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_211>(JSC::JSGlobalObject::init(JSC::VM &)::$_211 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 832) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_212>(JSC::JSGlobalObject::init(JSC::VM &)::$_212 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 840) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_213>(JSC::JSGlobalObject::init(JSC::VM &)::$_213 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 848) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_214>(JSC::JSGlobalObject::init(JSC::VM &)::$_214 const&)::theFunc
                             + 1;
    *(_QWORD *)(v2854 + 856) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_215>(JSC::JSGlobalObject::init(JSC::VM &)::$_215 const&)::theFunc
                             + 1;
  }
  *(_QWORD *)(v2854 + 864) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_216>(JSC::JSGlobalObject::init(JSC::VM &)::$_216 const&)::theFunc
                           + 1;
  v2856 = *(_QWORD *)(this + 696);
  *(_DWORD *)v3772 = 8215;
  if ((v2856 & 0xFFFE000000000002) == 0 && v2856 && *(unsigned __int8 *)(v2856 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v2856, a2, v2829, v2823, (uint64_t)v2824, v2825, v2826, v2827, v2828);
  v2857 = *((_QWORD *)a2 + 5017);
  if (v2857 < *((_QWORD *)a2 + 5018))
    goto LABEL_2356;
  v2857 = *((_QWORD *)a2 + 5019);
  if ((v2857 & 1) == 0)
  {
    v2858 = *(_QWORD *)(v2857 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v2857 + HIDWORD(v2858);
    *((_QWORD *)a2 + 5019) = v2857 + (int)v2858;
LABEL_2356:
    *((_QWORD *)a2 + 5017) = v2857 + 128;
    goto LABEL_2358;
  }
  JSC::sanitizeStackForVM(a2, v2822, v2823, (uint64_t)v2824, v2825, v2826, v2827, v2828);
  v2857 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2859, v2860, v2861);
LABEL_2358:
  *(_DWORD *)v2857 = 0;
  JSC::Structure::Structure(v2857, (uint64_t)a2, this, v2856, (uint64_t)v3772, (unint64_t)&JSC::AsyncFromSyncIteratorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v2870 = *v3763;
  if (*((_QWORD *)a2 + 4863) >= *((_QWORD *)a2 + 4864))
  {
    v2870 = *((_QWORD *)a2 + 4865);
    if ((v2870 & 1) != 0)
    {
      JSC::sanitizeStackForVM(a2, v2862, v2863, v2864, v2865, v2866, v2867, v2868);
      v2870 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2872, v2873, v2874);
    }
    else
    {
      v2871 = *(_QWORD *)(v2870 + 8) ^ *((_QWORD *)a2 + 4866);
      *((_QWORD *)a2 + 4864) = v2870 + HIDWORD(v2871);
      *((_QWORD *)a2 + 4865) = v2870 + (int)v2871;
      *v3763 = v2870 + 16;
    }
  }
  else
  {
    *v3763 = v2870 + 16;
  }
  *(_DWORD *)v2870 = 0;
  v2875 = *(_DWORD *)(v2857 + 8);
  *(_DWORD *)v2870 = v2857 >> 4;
  *(_DWORD *)(v2870 + 4) = v2875;
  *(_QWORD *)(v2870 + 8) = 0;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v2876 = *(_QWORD *)(this + 1960);
  if (!*(_DWORD *)v2876)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5290);
  }
  v2879 = *(int **)(v2876 + 8);
  v2878 = v2876 + 8;
  v2877 = (unint64_t)v2879;
  if ((v2879 & 1) != 0)
  {
    v2880 = *(uint64_t (**)(_BYTE *))(v2877 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v2881 = (_QWORD *)(this - 16);
    else
      v2881 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)v3772 = *v2881;
    *(_QWORD *)&v3772[8] = this;
    *(_QWORD *)&v3772[16] = v2878;
    v2877 = v2880(v3772);
  }
  v2882 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160);
  *(_QWORD *)v3772 = 0;
  *(_QWORD *)&v3772[8] = v2877;
  *(_QWORD *)&v3772[16] = 0x1000000FFFFFFFFLL;
  v2869.n128_u64[0] = 0x100000001000000;
  v3773 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v2877, (uint64_t)a2, v2882, v2870, 0, (uint64_t)v3772, v2867, v2868, v2869);
  v2891 = *(_QWORD *)(this + 696);
  *(_DWORD *)v3772 = 23;
  if ((v2891 & 0xFFFE000000000002) == 0 && v2891 && *(unsigned __int8 *)(v2891 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(v2891, a2, v2890, v2884, v2885, v2886, v2887, v2888, v2889);
  v2892 = *((_QWORD *)a2 + 5017);
  if (v2892 < *((_QWORD *)a2 + 5018))
    goto LABEL_2381;
  v2892 = *((_QWORD *)a2 + 5019);
  if ((v2892 & 1) == 0)
  {
    v2893 = *(_QWORD *)(v2892 + 8) ^ *((_QWORD *)a2 + 5020);
    *((_QWORD *)a2 + 5018) = v2892 + HIDWORD(v2893);
    *((_QWORD *)a2 + 5019) = v2892 + (int)v2893;
LABEL_2381:
    *((_QWORD *)a2 + 5017) = v2892 + 128;
    goto LABEL_2383;
  }
  JSC::sanitizeStackForVM(a2, v2883, v2884, v2885, v2886, v2887, v2888, v2889);
  v2892 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3746, (uint64_t)v3758, 128, 0, 0, v2894, v2895, v2896);
LABEL_2383:
  *(_DWORD *)v2892 = 0;
  JSC::Structure::Structure(v2892, (uint64_t)a2, this, v2891, (uint64_t)v3772, (unint64_t)&JSC::RegExpStringIteratorPrototype::s_info, 0, 0);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v2904 = *v3763;
  if (*((_QWORD *)a2 + 4863) >= *((_QWORD *)a2 + 4864))
  {
    v2904 = *((_QWORD *)a2 + 4865);
    if ((v2904 & 1) != 0)
    {
      JSC::sanitizeStackForVM(a2, v2897, v2898, v2899, v2900, v2901, v2902, v2903);
      v2904 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v3745, (uint64_t)v3758, 16, 0, 0, v2906, v2907, v2908);
    }
    else
    {
      v2905 = *(_QWORD *)(v2904 + 8) ^ *((_QWORD *)a2 + 4866);
      *((_QWORD *)a2 + 4864) = v2904 + HIDWORD(v2905);
      *((_QWORD *)a2 + 4865) = v2904 + (int)v2905;
      *v3763 = v2904 + 16;
    }
  }
  else
  {
    *v3763 = v2904 + 16;
  }
  *(_DWORD *)v2904 = 0;
  v2909 = *(_DWORD *)(v2892 + 8);
  *(_DWORD *)v2904 = v2892 >> 4;
  *(_DWORD *)(v2904 + 4) = v2909;
  *(_QWORD *)(v2904 + 8) = 0;
  JSC::RegExpStringIteratorPrototype::finishCreation((JSC::RegExpStringIteratorPrototype *)v2904, a2, (JSC::JSGlobalObject *)this);
  v2913 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2913 <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C54B0);
  }
  v2916 = *(int **)(v2913 + 16);
  v2915 = v2913 + 16;
  v2914 = (unint64_t)v2916;
  if ((v2916 & 1) != 0)
  {
    v2917 = *(uint64_t (**)(_BYTE *))(v2914 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v2918 = (_QWORD *)(this - 16);
    else
      v2918 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)v3772 = *v2918;
    *(_QWORD *)&v3772[8] = this;
    *(_QWORD *)&v3772[16] = v2915;
    v2914 = v2917(v3772);
  }
  v2919 = *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2160);
  *(_QWORD *)v3772 = 0;
  *(_QWORD *)&v3772[8] = v2914;
  *(_QWORD *)&v3772[16] = 0x1000000FFFFFFFFLL;
  v2912.n128_u64[0] = 0x100000001000000;
  v3773 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)v2914, (uint64_t)a2, v2919, v2904, 0, (uint64_t)v3772, v2910, v2911, v2912);
  v2925 = *(_QWORD *)(this + 1960);
  v2926 = *(_DWORD *)v2925;
  if (*(_DWORD *)v2925 <= 0x9Eu)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5A00);
  }
  *(_QWORD *)(v2925 + 1272) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_217>(JSC::JSGlobalObject::init(JSC::VM &)::$_217 const&)::theFunc
                            + 1;
  if (v2926 == 159)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5A20);
  }
  *(_QWORD *)(v2925 + 1280) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_218>(JSC::JSGlobalObject::init(JSC::VM &)::$_218 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 896) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_219>(JSC::JSGlobalObject::init(JSC::VM &)::$_219 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 904) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_220>(JSC::JSGlobalObject::init(JSC::VM &)::$_220 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 888) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_221>(JSC::JSGlobalObject::init(JSC::VM &)::$_221 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 928) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_222>(JSC::JSGlobalObject::init(JSC::VM &)::$_222 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 936) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_223>(JSC::JSGlobalObject::init(JSC::VM &)::$_223 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 944) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_224>(JSC::JSGlobalObject::init(JSC::VM &)::$_224 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 912) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_225>(JSC::JSGlobalObject::init(JSC::VM &)::$_225 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 920) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_226>(JSC::JSGlobalObject::init(JSC::VM &)::$_226 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 960) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_227>(JSC::JSGlobalObject::init(JSC::VM &)::$_227 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 968) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_228>(JSC::JSGlobalObject::init(JSC::VM &)::$_228 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 976) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_229>(JSC::JSGlobalObject::init(JSC::VM &)::$_229 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 984) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_230>(JSC::JSGlobalObject::init(JSC::VM &)::$_230 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 992) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_231>(JSC::JSGlobalObject::init(JSC::VM &)::$_231 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 952) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_232>(JSC::JSGlobalObject::init(JSC::VM &)::$_232 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 1000) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_233>(JSC::JSGlobalObject::init(JSC::VM &)::$_233 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 880) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_234>(JSC::JSGlobalObject::init(JSC::VM &)::$_234 const&)::theFunc
                           + 1;
  *(_QWORD *)(v2925 + 1024) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_235>(JSC::JSGlobalObject::init(JSC::VM &)::$_235 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1032) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_236>(JSC::JSGlobalObject::init(JSC::VM &)::$_236 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1040) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_237>(JSC::JSGlobalObject::init(JSC::VM &)::$_237 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1048) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_238>(JSC::JSGlobalObject::init(JSC::VM &)::$_238 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1056) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_239>(JSC::JSGlobalObject::init(JSC::VM &)::$_239 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1064) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_240>(JSC::JSGlobalObject::init(JSC::VM &)::$_240 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1080) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_241>(JSC::JSGlobalObject::init(JSC::VM &)::$_241 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1072) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_242>(JSC::JSGlobalObject::init(JSC::VM &)::$_242 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1104) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_243>(JSC::JSGlobalObject::init(JSC::VM &)::$_243 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1112) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_244>(JSC::JSGlobalObject::init(JSC::VM &)::$_244 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1120) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_245>(JSC::JSGlobalObject::init(JSC::VM &)::$_245 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1128) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_246>(JSC::JSGlobalObject::init(JSC::VM &)::$_246 const&)::theFunc
                            + 1;
  if (v2926 <= 0xCD)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5A40);
  }
  *(_QWORD *)(v2925 + 1648) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_247>(JSC::JSGlobalObject::init(JSC::VM &)::$_247 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1136) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_248>(JSC::JSGlobalObject::init(JSC::VM &)::$_248 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1144) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_249>(JSC::JSGlobalObject::init(JSC::VM &)::$_249 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1152) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_250>(JSC::JSGlobalObject::init(JSC::VM &)::$_250 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1160) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_251>(JSC::JSGlobalObject::init(JSC::VM &)::$_251 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1168) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_252>(JSC::JSGlobalObject::init(JSC::VM &)::$_252 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1176) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_253>(JSC::JSGlobalObject::init(JSC::VM &)::$_253 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1192) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_254>(JSC::JSGlobalObject::init(JSC::VM &)::$_254 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1224) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_255>(JSC::JSGlobalObject::init(JSC::VM &)::$_255 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1240) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_256>(JSC::JSGlobalObject::init(JSC::VM &)::$_256 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1248) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_257>(JSC::JSGlobalObject::init(JSC::VM &)::$_257 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1256) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_258>(JSC::JSGlobalObject::init(JSC::VM &)::$_258 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1264) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_259>(JSC::JSGlobalObject::init(JSC::VM &)::$_259 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1288) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_260>(JSC::JSGlobalObject::init(JSC::VM &)::$_260 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1296) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_261>(JSC::JSGlobalObject::init(JSC::VM &)::$_261 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1304) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_262>(JSC::JSGlobalObject::init(JSC::VM &)::$_262 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1312) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_263>(JSC::JSGlobalObject::init(JSC::VM &)::$_263 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1320) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_264>(JSC::JSGlobalObject::init(JSC::VM &)::$_264 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1336) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_265>(JSC::JSGlobalObject::init(JSC::VM &)::$_265 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1008) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_266>(JSC::JSGlobalObject::init(JSC::VM &)::$_266 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1016) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_267>(JSC::JSGlobalObject::init(JSC::VM &)::$_267 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1088) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_268>(JSC::JSGlobalObject::init(JSC::VM &)::$_268 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1096) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_269>(JSC::JSGlobalObject::init(JSC::VM &)::$_269 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1432) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_270>(JSC::JSGlobalObject::init(JSC::VM &)::$_270 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1440) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_271>(JSC::JSGlobalObject::init(JSC::VM &)::$_271 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1448) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_272>(JSC::JSGlobalObject::init(JSC::VM &)::$_272 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1456) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_273>(JSC::JSGlobalObject::init(JSC::VM &)::$_273 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1464) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_274>(JSC::JSGlobalObject::init(JSC::VM &)::$_274 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1488) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_275>(JSC::JSGlobalObject::init(JSC::VM &)::$_275 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1496) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_276>(JSC::JSGlobalObject::init(JSC::VM &)::$_276 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1504) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_277>(JSC::JSGlobalObject::init(JSC::VM &)::$_277 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1512) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_278>(JSC::JSGlobalObject::init(JSC::VM &)::$_278 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1528) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_279>(JSC::JSGlobalObject::init(JSC::VM &)::$_279 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1544) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_280>(JSC::JSGlobalObject::init(JSC::VM &)::$_280 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1536) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_281>(JSC::JSGlobalObject::init(JSC::VM &)::$_281 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1608) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_282>(JSC::JSGlobalObject::init(JSC::VM &)::$_282 const&)::theFunc
                            + 1;
  if (v2926 <= 0xCF)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5A60);
  }
  *(_QWORD *)(v2925 + 1664) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_283>(JSC::JSGlobalObject::init(JSC::VM &)::$_283 const&)::theFunc
                            + 1;
  if (v2926 == 208)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5A80);
  }
  *(_QWORD *)(v2925 + 1672) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_284>(JSC::JSGlobalObject::init(JSC::VM &)::$_284 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1632) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_285>(JSC::JSGlobalObject::init(JSC::VM &)::$_285 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1640) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_286>(JSC::JSGlobalObject::init(JSC::VM &)::$_286 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1552) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_287>(JSC::JSGlobalObject::init(JSC::VM &)::$_287 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1560) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_288>(JSC::JSGlobalObject::init(JSC::VM &)::$_288 const&)::theFunc
                            + 1;
  *(_QWORD *)(v2925 + 1616) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::JSCell>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_289>(JSC::JSGlobalObject::init(JSC::VM &)::$_289 const&)::theFunc
                            + 1;
  v2927 = *(_QWORD *)(v2925 + 552);
  if ((v2927 & 1) != 0)
  {
    v2928 = v2925 + 552;
    v2929 = *(uint64_t (**)(_BYTE *))(v2927 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v2930 = (_QWORD *)(this - 16);
    else
      v2930 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)v3772 = *v2930;
    *(_QWORD *)&v3772[8] = this;
    *(_QWORD *)&v3772[16] = v2928;
    v2927 = v2929(v3772);
  }
  *(_QWORD *)(this + 568) = v2927;
  if (v2927 && *v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2931 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2931 <= 0x45u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5B14);
  }
  v2932 = *(_QWORD *)(v2931 + 560);
  if ((v2932 & 1) != 0)
  {
    v2933 = v2931 + 560;
    v2934 = *(uint64_t (**)(_BYTE *))(v2932 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v2935 = (_QWORD *)(this - 16);
    else
      v2935 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)v3772 = *v2935;
    *(_QWORD *)&v3772[8] = this;
    *(_QWORD *)&v3772[16] = v2933;
    v2932 = v2934(v3772);
  }
  *(_QWORD *)(this + 576) = v2932;
  if (v2932 && *v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2936 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2936 <= 0x42u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5BA8);
  }
  v2937 = *(_QWORD *)(v2936 + 536);
  if ((v2937 & 1) != 0)
  {
    v2938 = v2936 + 536;
    v2939 = *(uint64_t (**)(_BYTE *))(v2937 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v2940 = (_QWORD *)(this - 16);
    else
      v2940 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)v3772 = *v2940;
    *(_QWORD *)&v3772[8] = this;
    *(_QWORD *)&v3772[16] = v2938;
    v2937 = v2939(v3772);
  }
  *(_QWORD *)(this + 584) = v2937;
  if (v2937 && *v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2941 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2941 <= 0x43u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5C3CLL);
  }
  v2942 = *(_QWORD *)(v2941 + 544);
  if ((v2942 & 1) != 0)
  {
    v2943 = v2941 + 544;
    v2944 = *(uint64_t (**)(_BYTE *))(v2942 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v2945 = (_QWORD *)(this - 16);
    else
      v2945 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)v3772 = *v2945;
    *(_QWORD *)&v3772[8] = this;
    *(_QWORD *)&v3772[16] = v2943;
    v2942 = v2944(v3772);
  }
  *(_QWORD *)(this + 592) = v2942;
  if (v2942 && *v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2946 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2946 <= 0x49u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5CD0);
  }
  v2947 = *(_QWORD *)(v2946 + 592);
  if ((v2947 & 1) != 0)
  {
    v2948 = v2946 + 592;
    v2949 = *(uint64_t (**)(_BYTE *))(v2947 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v2950 = (_QWORD *)(this - 16);
    else
      v2950 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)v3772 = *v2950;
    *(_QWORD *)&v3772[8] = this;
    *(_QWORD *)&v3772[16] = v2948;
    v2947 = v2949(v3772);
  }
  *(_QWORD *)(this + 600) = v2947;
  if (v2947 && *v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2951 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2951 <= 0x48u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5D64);
  }
  v2952 = *(_QWORD *)(v2951 + 584);
  if ((v2952 & 1) != 0)
  {
    v2953 = v2951 + 584;
    v2954 = *(uint64_t (**)(_BYTE *))(v2952 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v2955 = (_QWORD *)(this - 16);
    else
      v2955 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)v3772 = *v2955;
    *(_QWORD *)&v3772[8] = this;
    *(_QWORD *)&v3772[16] = v2953;
    v2952 = v2954(v3772);
  }
  *(_QWORD *)(this + 608) = v2952;
  if (v2952 && *v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2956 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2956 <= 0x47u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5DF8);
  }
  v2957 = *(_QWORD *)(v2956 + 576);
  if ((v2957 & 1) != 0)
  {
    v2958 = v2956 + 576;
    v2959 = *(uint64_t (**)(_BYTE *))(v2957 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v2960 = (_QWORD *)(this - 16);
    else
      v2960 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)v3772 = *v2960;
    *(_QWORD *)&v3772[8] = this;
    *(_QWORD *)&v3772[16] = v2958;
    v2957 = v2959(v3772);
  }
  *(_QWORD *)(this + 616) = v2957;
  if (v2957 && *v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  v2961 = *(_QWORD *)(this + 1960);
  if (*(_DWORD *)v2961 <= 0x46u)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C5E8CLL);
  }
  v2962 = *(_QWORD *)(v2961 + 568);
  if ((v2962 & 1) != 0)
  {
    v2963 = v2961 + 568;
    v2964 = *(uint64_t (**)(_BYTE *))(v2962 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v2965 = (_QWORD *)(this - 16);
    else
      v2965 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    *(_QWORD *)v3772 = *v2965;
    *(_QWORD *)&v3772[8] = this;
    *(_QWORD *)&v3772[16] = v2963;
    v2962 = v2964(v3772);
  }
  *(_QWORD *)(this + 624) = v2962;
  if (v2962 && *v3764 >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v3758, this);
  if (BYTE5(qword_1ECF4C75C))
  {
    JSC::Identifier::add((uint64_t)a2, "__enableSamplingProfiler", 25, v2920, v2921, v2922, v2923, v2924, v3772);
    v2966 = *(WTF::StringImpl **)v3772;
    v2967 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v2967 = 0x1600000002;
    *(_QWORD *)(v2967 + 8) = "enableSamplingProfiler";
    *(_DWORD *)(v2967 + 16) = 4;
    *(_QWORD *)v3772 = v2967;
    v2968 = JSC::JSFunction::create((uint64_t)a2, this, 1, (WTF::StringImpl **)v3772, (uint64_t)JSC::enableSamplingProfiler, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, (unint64_t)v2966, v2968, 14, v2969, v2970, v2971, v2972);
    v2980 = *(WTF::StringImpl **)v3772;
    *(_QWORD *)v3772 = 0;
    if (v2980)
    {
      if (*(_DWORD *)v2980 == 2)
      {
        WTF::StringImpl::~StringImpl(v2980, v2973, v2974, v2975, v2976, v2977, v2978, v2979);
        WTF::fastFree(v2981, v2982, v2983, v2984, v2985, v2986, v2987, v2988);
      }
      else
      {
        *(_DWORD *)v2980 -= 2;
      }
    }
    if (v2966)
    {
      if (*(_DWORD *)v2966 == 2)
      {
        WTF::StringImpl::~StringImpl(v2966, v2973, v2974, v2975, v2976, v2977, v2978, v2979);
        WTF::fastFree(v2989, v2990, v2991, v2992, v2993, v2994, v2995, v2996);
      }
      else
      {
        *(_DWORD *)v2966 -= 2;
      }
    }
    JSC::Identifier::add((uint64_t)a2, "__disableSamplingProfiler", 26, v2975, v2976, v2977, v2978, v2979, v3772);
    v2997 = *(WTF::StringImpl **)v3772;
    v2998 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v2998 = 0x1700000002;
    *(_QWORD *)(v2998 + 8) = "disableSamplingProfiler";
    *(_DWORD *)(v2998 + 16) = 4;
    *(_QWORD *)v3772 = v2998;
    v2999 = JSC::JSFunction::create((uint64_t)a2, this, 1, (WTF::StringImpl **)v3772, (uint64_t)JSC::disableSamplingProfiler, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, (unint64_t)v2997, v2999, 14, v3000, v3001, v3002, v3003);
    v3011 = *(WTF::StringImpl **)v3772;
    *(_QWORD *)v3772 = 0;
    if (v3011)
    {
      if (*(_DWORD *)v3011 == 2)
      {
        WTF::StringImpl::~StringImpl(v3011, v3004, v3005, v3006, v3007, v3008, v3009, v3010);
        WTF::fastFree(v3012, v3013, v3014, v3015, v3016, v3017, v3018, v3019);
      }
      else
      {
        *(_DWORD *)v3011 -= 2;
      }
    }
    if (v2997)
    {
      if (*(_DWORD *)v2997 == 2)
      {
        WTF::StringImpl::~StringImpl(v2997, v3004, v3005, v3006, v3007, v3008, v3009, v3010);
        WTF::fastFree(v3020, v3021, v3022, v3023, v3024, v3025, v3026, v3027);
      }
      else
      {
        *(_DWORD *)v2997 -= 2;
      }
    }
    JSC::Identifier::add((uint64_t)a2, "__dumpAndClearSamplingProfilerSamples", 38, v3006, v3007, v3008, v3009, v3010, v3772);
    v3028 = *(WTF::StringImpl **)v3772;
    v3029 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v3029 = 0x2300000002;
    *(_QWORD *)(v3029 + 8) = "dumpAndClearSamplingProfilerSamples";
    *(_DWORD *)(v3029 + 16) = 4;
    *(_QWORD *)v3772 = v3029;
    v3030 = JSC::JSFunction::create((uint64_t)a2, this, 1, (WTF::StringImpl **)v3772, (uint64_t)JSC::dumpAndClearSamplingProfilerSamples, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, (unint64_t)v3028, v3030, 14, v3031, v3032, v3033, v3034);
    v3042 = *(WTF::StringImpl **)v3772;
    *(_QWORD *)v3772 = 0;
    if (v3042)
    {
      if (*(_DWORD *)v3042 == 2)
      {
        WTF::StringImpl::~StringImpl(v3042, v3035, v3036, v3037, v3038, v3039, v3040, v3041);
        WTF::fastFree(v3043, v3044, v3045, v3046, v3047, v3048, v3049, v3050);
      }
      else
      {
        *(_DWORD *)v3042 -= 2;
      }
    }
    if (v3028)
    {
      if (*(_DWORD *)v3028 == 2)
      {
        WTF::StringImpl::~StringImpl(v3028, v3035, v3036, v3037, v3038, v3039, v3040, v3041);
        WTF::fastFree(v3051, v3052, v3053, v3054, v3055, v3056, v3057, v3058);
      }
      else
      {
        *(_DWORD *)v3028 -= 2;
      }
    }
    JSC::Identifier::add((uint64_t)a2, "__enableSuperSampler", 21, v3037, v3038, v3039, v3040, v3041, v3772);
    v3059 = *(WTF::StringImpl **)v3772;
    v3060 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v3060 = 0x1200000002;
    *(_QWORD *)(v3060 + 8) = "enableSuperSampler";
    *(_DWORD *)(v3060 + 16) = 4;
    *(_QWORD *)v3772 = v3060;
    v3061 = JSC::JSFunction::create((uint64_t)a2, this, 1, (WTF::StringImpl **)v3772, (uint64_t)JSC::enableSuperSampler, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, (unint64_t)v3059, v3061, 14, v3062, v3063, v3064, v3065);
    v3073 = *(WTF::StringImpl **)v3772;
    *(_QWORD *)v3772 = 0;
    if (v3073)
    {
      if (*(_DWORD *)v3073 == 2)
      {
        WTF::StringImpl::~StringImpl(v3073, v3066, v3067, v3068, v3069, v3070, v3071, v3072);
        WTF::fastFree(v3074, v3075, v3076, v3077, v3078, v3079, v3080, v3081);
      }
      else
      {
        *(_DWORD *)v3073 -= 2;
      }
    }
    if (v3059)
    {
      if (*(_DWORD *)v3059 == 2)
      {
        WTF::StringImpl::~StringImpl(v3059, v3066, v3067, v3068, v3069, v3070, v3071, v3072);
        WTF::fastFree(v3082, v3083, v3084, v3085, v3086, v3087, v3088, v3089);
      }
      else
      {
        *(_DWORD *)v3059 -= 2;
      }
    }
    JSC::Identifier::add((uint64_t)a2, "__disableSuperSampler", 22, v3068, v3069, v3070, v3071, v3072, v3772);
    v3090 = *(WTF::StringImpl **)v3772;
    v3091 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v3091 = 0x1300000002;
    *(_QWORD *)(v3091 + 8) = "disableSuperSampler";
    *(_DWORD *)(v3091 + 16) = 4;
    *(_QWORD *)v3772 = v3091;
    v3092 = JSC::JSFunction::create((uint64_t)a2, this, 1, (WTF::StringImpl **)v3772, (uint64_t)JSC::disableSuperSampler, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, (unint64_t)v3090, v3092, 14, v3093, v3094, v3095, v3096);
    v3104 = *(WTF::StringImpl **)v3772;
    *(_QWORD *)v3772 = 0;
    if (v3104)
    {
      if (*(_DWORD *)v3104 == 2)
      {
        WTF::StringImpl::~StringImpl(v3104, v3097, v3098, v3099, v3100, v3101, v3102, v3103);
        WTF::fastFree(v3105, v3106, v3107, v3108, v3109, v3110, v3111, v3112);
      }
      else
      {
        *(_DWORD *)v3104 -= 2;
      }
    }
    if (v3090)
    {
      if (*(_DWORD *)v3090 == 2)
      {
        WTF::StringImpl::~StringImpl(v3090, v3097, v3098, v3099, v3100, v3101, v3102, v3103);
        WTF::fastFree(v3113, v3114, v3115, v3116, v3117, v3118, v3119, v3120);
      }
      else
      {
        *(_DWORD *)v3090 -= 2;
      }
    }
    JSC::Identifier::add((uint64_t)a2, "__tracePointStart", 18, v3099, v3100, v3101, v3102, v3103, v3772);
    v3121 = *(WTF::StringImpl **)v3772;
    v3122 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v3122 = 0xF00000002;
    *(_QWORD *)(v3122 + 8) = "tracePointStart";
    *(_DWORD *)(v3122 + 16) = 4;
    *(_QWORD *)v3772 = v3122;
    v3123 = JSC::JSFunction::create((uint64_t)a2, this, 4, (WTF::StringImpl **)v3772, (uint64_t)JSC::tracePointStart, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, (unint64_t)v3121, v3123, 14, v3124, v3125, v3126, v3127);
    v3135 = *(WTF::StringImpl **)v3772;
    *(_QWORD *)v3772 = 0;
    if (v3135)
    {
      if (*(_DWORD *)v3135 == 2)
      {
        WTF::StringImpl::~StringImpl(v3135, v3128, v3129, v3130, v3131, v3132, v3133, v3134);
        WTF::fastFree(v3136, v3137, v3138, v3139, v3140, v3141, v3142, v3143);
      }
      else
      {
        *(_DWORD *)v3135 -= 2;
      }
    }
    if (v3121)
    {
      if (*(_DWORD *)v3121 == 2)
      {
        WTF::StringImpl::~StringImpl(v3121, v3128, v3129, v3130, v3131, v3132, v3133, v3134);
        WTF::fastFree(v3144, v3145, v3146, v3147, v3148, v3149, v3150, v3151);
      }
      else
      {
        *(_DWORD *)v3121 -= 2;
      }
    }
    JSC::Identifier::add((uint64_t)a2, "__tracePointStop", 17, v3130, v3131, v3132, v3133, v3134, v3772);
    v3152 = *(WTF::StringImpl **)v3772;
    v3153 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v3153 = 0xE00000002;
    *(_QWORD *)(v3153 + 8) = "tracePointStop";
    *(_DWORD *)(v3153 + 16) = 4;
    *(_QWORD *)v3772 = v3153;
    v3154 = JSC::JSFunction::create((uint64_t)a2, this, 4, (WTF::StringImpl **)v3772, (uint64_t)JSC::tracePointStop, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, (unint64_t)v3152, v3154, 14, v3155, v3156, v3157, v3158);
    v3166 = *(WTF::StringImpl **)v3772;
    *(_QWORD *)v3772 = 0;
    if (v3166)
    {
      if (*(_DWORD *)v3166 == 2)
      {
        WTF::StringImpl::~StringImpl(v3166, v3159, v3160, v3161, v3162, v3163, v3164, v3165);
        WTF::fastFree(v3167, v3168, v3169, v3170, v3171, v3172, v3173, v3174);
      }
      else
      {
        *(_DWORD *)v3166 -= 2;
      }
    }
    if (v3152)
    {
      if (*(_DWORD *)v3152 == 2)
      {
        WTF::StringImpl::~StringImpl(v3152, v3159, v3160, v3161, v3162, v3163, v3164, v3165);
        WTF::fastFree(v3175, v3176, v3177, v3178, v3179, v3180, v3181, v3182);
      }
      else
      {
        *(_DWORD *)v3152 -= 2;
      }
    }
    JSC::Identifier::add((uint64_t)a2, "__signpostStart", 16, v3161, v3162, v3163, v3164, v3165, v3772);
    v3183 = *(WTF::StringImpl **)v3772;
    v3184 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v3184 = 0xD00000002;
    *(_QWORD *)(v3184 + 8) = "signpostStart";
    *(_DWORD *)(v3184 + 16) = 4;
    *(_QWORD *)v3772 = v3184;
    v3185 = JSC::JSFunction::create((uint64_t)a2, this, 1, (WTF::StringImpl **)v3772, (uint64_t)JSC::signpostStart, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, (unint64_t)v3183, v3185, 14, v3186, v3187, v3188, v3189);
    v3197 = *(WTF::StringImpl **)v3772;
    *(_QWORD *)v3772 = 0;
    if (v3197)
    {
      if (*(_DWORD *)v3197 == 2)
      {
        WTF::StringImpl::~StringImpl(v3197, v3190, v3191, v3192, v3193, v3194, v3195, v3196);
        WTF::fastFree(v3198, v3199, v3200, v3201, v3202, v3203, v3204, v3205);
      }
      else
      {
        *(_DWORD *)v3197 -= 2;
      }
    }
    if (v3183)
    {
      if (*(_DWORD *)v3183 == 2)
      {
        WTF::StringImpl::~StringImpl(v3183, v3190, v3191, v3192, v3193, v3194, v3195, v3196);
        WTF::fastFree(v3206, v3207, v3208, v3209, v3210, v3211, v3212, v3213);
      }
      else
      {
        *(_DWORD *)v3183 -= 2;
      }
    }
    JSC::Identifier::add((uint64_t)a2, "__signpostStop", 15, v3192, v3193, v3194, v3195, v3196, v3772);
    v3214 = *(WTF::StringImpl **)v3772;
    v3215 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v3215 = 0xC00000002;
    *(_QWORD *)(v3215 + 8) = "signpostStop";
    *(_DWORD *)(v3215 + 16) = 4;
    *(_QWORD *)v3772 = v3215;
    v3216 = JSC::JSFunction::create((uint64_t)a2, this, 1, (WTF::StringImpl **)v3772, (uint64_t)JSC::signpostStop, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, (unint64_t)v3214, v3216, 14, v3217, v3218, v3219, v3220);
    v3228 = *(WTF::StringImpl **)v3772;
    *(_QWORD *)v3772 = 0;
    if (v3228)
    {
      if (*(_DWORD *)v3228 == 2)
      {
        WTF::StringImpl::~StringImpl(v3228, v3221, v3222, v3223, v3224, v3225, v3226, v3227);
        WTF::fastFree(v3229, v3230, v3231, v3232, v3233, v3234, v3235, v3236);
      }
      else
      {
        *(_DWORD *)v3228 -= 2;
      }
    }
    if (v3214)
    {
      if (*(_DWORD *)v3214 == 2)
      {
        WTF::StringImpl::~StringImpl(v3214, v3221, v3222, v3223, v3224, v3225, v3226, v3227);
        WTF::fastFree(v3237, v3238, v3239, v3240, v3241, v3242, v3243, v3244);
      }
      else
      {
        *(_DWORD *)v3214 -= 2;
      }
    }
  }
  v3245 = (_QWORD *)*((_QWORD *)a2 + 5244);
  v3246 = (WTF::StringImpl *)v3245[84];
  if (v3246)
    *(_DWORD *)v3246 += 2;
  *(_QWORD *)v3772 = v3246;
  *(_QWORD *)&v3772[8] = 0x7FFA000000000000;
  *(_DWORD *)&v3772[16] = 14;
  v3247 = (WTF::StringImpl *)v3245[78];
  if (v3247)
    *(_DWORD *)v3247 += 2;
  v3773 = v3247;
  v3774 = 0x7FF2000000000000;
  v3775 = 14;
  v3248 = (WTF::StringImpl *)v3245[57];
  if (v3248)
  {
    *(_DWORD *)v3248 += 2;
    v3776 = v3248;
    v3777 = 10;
    v3778 = 14;
    JSC::JSGlobalObject::addStaticGlobals(this, (uint64_t)v3772, 3u);
    if (*(_DWORD *)v3248 == 2)
    {
      WTF::StringImpl::~StringImpl(v3248, v3249, v3250, v3251, v3252, v3253, v3254, v3255);
      WTF::fastFree(v3257, v3258, v3259, v3260, v3261, v3262, v3263, v3264);
    }
    else
    {
      *(_DWORD *)v3248 -= 2;
    }
  }
  else
  {
    v3776 = 0;
    v3777 = 10;
    v3778 = 14;
    JSC::JSGlobalObject::addStaticGlobals(this, (uint64_t)v3772, 3u);
  }
  if (v3247)
  {
    if (*(_DWORD *)v3247 == 2)
    {
      WTF::StringImpl::~StringImpl(v3247, v3249, v3250, v3251, v3252, v3253, v3254, v3255);
      WTF::fastFree(v3265, v3266, v3267, v3268, v3269, v3270, v3271, v3272);
    }
    else
    {
      *(_DWORD *)v3247 -= 2;
    }
  }
  if (v3246)
  {
    if (*(_DWORD *)v3246 == 2)
    {
      WTF::StringImpl::~StringImpl(v3246, v3249, v3250, v3251, v3252, v3253, v3254, v3255);
      WTF::fastFree(v3273, v3274, v3275, v3276, v3277, v3278, v3279, v3280);
    }
    else
    {
      *(_DWORD *)v3246 -= 2;
    }
  }
  if ((_BYTE)qword_1ECF4C6A7)
    JSC::JSGlobalObject::exposeDollarVM((JSC::JSGlobalObject *)this, a2, v3250, v3251, v3252, v3253, v3254, v3255);
  if (BYTE2(dword_1ECF4C6C3))
  {
    *(_QWORD *)(this + 1256) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_290>(JSC::JSGlobalObject::init(JSC::VM &)::$_290 const&)::theFunc
                             + 1;
    *(_QWORD *)(this + 1264) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_291>(JSC::JSGlobalObject::init(JSC::VM &)::$_291 const&)::theFunc
                             + 1;
    *(_QWORD *)(this + 1272) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_292>(JSC::JSGlobalObject::init(JSC::VM &)::$_292 const&)::theFunc
                             + 1;
    v3281 = JSC::JSWebAssembly::createStructure((unint64_t *)a2, (JSC::VM *)this, *(_QWORD *)(this + 656), v3251, v3252, v3253, v3254, v3255, v3256);
    v3287 = JSC::JSWebAssembly::create(a2, (JSC::VM *)this, v3281, v3282, v3283, v3284, v3285, v3286);
    WTF::AtomStringImpl::addLiteral((uint64_t)"WebAssembly", 0xBuLL, v3288, v3289, v3290, v3291, v3292, v3772);
    v3293 = *(WTF::StringImpl **)v3772;
    JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)this, (uint64_t)a2, *(unint64_t *)v3772, v3287, 4, v3294, v3295, v3296, v3297);
    if (v3293)
    {
      if (*(_DWORD *)v3293 == 2)
      {
        WTF::StringImpl::~StringImpl(v3293, v3298, v3299, v3300, v3252, v3253, v3254, v3255);
        WTF::fastFree(v3301, v3302, v3303, v3304, v3305, v3306, v3307, v3308);
      }
      else
      {
        *(_DWORD *)v3293 -= 2;
      }
    }
    v3309 = BYTE2(dword_1ECF4C7B0);
    if (BYTE2(dword_1ECF4C7B0))
      *(_QWORD *)(this + 1280) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_293>(JSC::JSGlobalObject::init(JSC::VM &)::$_293 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_293 const&)::theFunc
                               + 1;
    *(_QWORD *)(this + 1296) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_294>(JSC::JSGlobalObject::init(JSC::VM &)::$_294 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_294 const&)::theFunc
                             + 1;
    *(_QWORD *)(this + 1312) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_295>(JSC::JSGlobalObject::init(JSC::VM &)::$_295 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_295 const&)::theFunc
                             + 1;
    *(_QWORD *)(this + 1328) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_296>(JSC::JSGlobalObject::init(JSC::VM &)::$_296 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_296 const&)::theFunc
                             + 1;
    *(_QWORD *)(this + 1344) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_297>(JSC::JSGlobalObject::init(JSC::VM &)::$_297 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_297 const&)::theFunc
                             + 1;
    *(_QWORD *)(this + 1360) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_298>(JSC::JSGlobalObject::init(JSC::VM &)::$_298 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_298 const&)::theFunc
                             + 1;
    *(_QWORD *)(this + 1376) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_299>(JSC::JSGlobalObject::init(JSC::VM &)::$_299 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_299 const&)::theFunc
                             + 1;
    *(_QWORD *)(this + 1392) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_300>(JSC::JSGlobalObject::init(JSC::VM &)::$_300 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_300 const&)::theFunc
                             + 1;
    *(_QWORD *)(this + 1408) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_301>(JSC::JSGlobalObject::init(JSC::VM &)::$_301 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_301 const&)::theFunc
                             + 1;
    if (v3309)
      *(_QWORD *)(this + 1424) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_302>(JSC::JSGlobalObject::init(JSC::VM &)::$_302 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_302 const&)::theFunc
                               + 1;
    *(_QWORD *)(this + 1440) = (char *)JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_303>(JSC::JSGlobalObject::init(JSC::VM &)::$_303 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_303 const&)::theFunc
                             + 1;
    *(_QWORD *)(this + 1456) = (char *)&JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::initLater<void JSC::LazyClassStructure::initLater<JSC::JSGlobalObject::init(JSC::VM &)::$_304>(JSC::JSGlobalObject::init(JSC::VM &)::$_304 const&)::{lambda(JSC::LazyProperty<JSC::JSGlobalObject,JSC::Structure>::Initializer const&)#1}>(JSC::JSGlobalObject::init(JSC::VM &)::$_304 const&)::theFunc
                             + 1;
  }
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, v3741, (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 2000), v3252, v3253, v3254, v3255);
  v3310 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3310 = off_1E3580B60;
  v3318 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3310 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3310 + 32) = 0;
  *(_QWORD *)(v3310 + 40) = 0;
  *(_QWORD *)(v3310 + 24) = v3318;
  *(_BYTE *)(v3310 + 48) = 0;
  *(_QWORD *)(v3310 + 56) = 0;
  *(_QWORD *)(v3310 + 64) = 0;
  *(_BYTE *)(v3310 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C69D8);
  }
  *(_QWORD *)v3310 = off_1E35A0718;
  *(_QWORD *)(v3310 + 80) = this;
  *(_QWORD *)(v3310 + 88) = this + 2216;
  v3319 = *(_QWORD *)(this + 2216);
  if ((v3319 & 1) != 0)
    v3320 = (v3319 >> 1) & 3;
  else
    v3320 = *(unsigned __int8 *)(v3319 + 4);
  if (v3320 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C6ACCLL);
  }
  v3321 = *(_QWORD **)(this + 2648);
  *(_QWORD *)(this + 2648) = v3310;
  if (v3321)
  {
    *v3321 = off_1E3580B60;
    v3322 = (_QWORD *)v3321[8];
    if (v3322)
    {
      v3323 = v3321[7];
      *v3322 = v3323;
      *(_QWORD *)(v3323 + 8) = v3322;
      v3321[7] = 0;
      v3321[8] = 0;
    }
    v3324 = (_QWORD *)v3321[5];
    if (v3324)
    {
      v3325 = v3321[4];
      *v3324 = v3325;
      *(_QWORD *)(v3325 + 8) = v3324;
      v3321[4] = 0;
      v3321[5] = 0;
    }
    WTF::fastFree((unint64_t)v3321, v3311, v3312, (uint64_t)v3313, v3314, v3315, v3316, v3317);
    v3310 = *(_QWORD *)(this + 2648);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3310, a2, v3312, v3313, v3314, v3315, v3316, v3317);
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, *(JSC::JSObject **)(this + 672), (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 2712), v3326, v3327, v3328, v3329);
  v3330 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3330 = off_1E3580B60;
  v3338 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3330 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3330 + 32) = 0;
  *(_QWORD *)(v3330 + 40) = 0;
  *(_QWORD *)(v3330 + 24) = v3338;
  *(_BYTE *)(v3330 + 48) = 0;
  *(_QWORD *)(v3330 + 56) = 0;
  *(_QWORD *)(v3330 + 64) = 0;
  *(_BYTE *)(v3330 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C6AECLL);
  }
  *(_QWORD *)v3330 = off_1E35A0718;
  *(_QWORD *)(v3330 + 80) = this;
  *(_QWORD *)(v3330 + 88) = this + 2216;
  v3339 = *(_QWORD *)(this + 2216);
  if ((v3339 & 1) != 0)
    v3340 = (v3339 >> 1) & 3;
  else
    v3340 = *(unsigned __int8 *)(v3339 + 4);
  if (v3340 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C6BE4);
  }
  v3341 = *(_QWORD **)(this + 2592);
  *(_QWORD *)(this + 2592) = v3330;
  if (v3341)
  {
    *v3341 = off_1E3580B60;
    v3342 = (_QWORD *)v3341[8];
    if (v3342)
    {
      v3343 = v3341[7];
      *v3342 = v3343;
      *(_QWORD *)(v3343 + 8) = v3342;
      v3341[7] = 0;
      v3341[8] = 0;
    }
    v3344 = (_QWORD *)v3341[5];
    if (v3344)
    {
      v3345 = v3341[4];
      *v3344 = v3345;
      *(_QWORD *)(v3345 + 8) = v3344;
      v3341[4] = 0;
      v3341[5] = 0;
    }
    WTF::fastFree((unint64_t)v3341, v3331, v3332, (uint64_t)v3333, v3334, v3335, v3336, v3337);
    v3330 = *(_QWORD *)(this + 2592);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3330, a2, v3332, v3333, v3334, v3335, v3336, v3337);
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, *(JSC::JSObject **)(this + 672), (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 1728), v3346, v3347, v3348, v3349);
  v3350 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3350 = off_1E3580B60;
  v3358 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3350 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3350 + 32) = 0;
  *(_QWORD *)(v3350 + 40) = 0;
  *(_QWORD *)(v3350 + 24) = v3358;
  *(_BYTE *)(v3350 + 48) = 0;
  *(_QWORD *)(v3350 + 56) = 0;
  *(_QWORD *)(v3350 + 64) = 0;
  *(_BYTE *)(v3350 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C6C04);
  }
  *(_QWORD *)v3350 = off_1E35A0718;
  *(_QWORD *)(v3350 + 80) = this;
  *(_QWORD *)(v3350 + 88) = this + 2288;
  v3359 = *(_QWORD *)(this + 2288);
  if ((v3359 & 1) != 0)
    v3360 = (v3359 >> 1) & 3;
  else
    v3360 = *(unsigned __int8 *)(v3359 + 4);
  if (v3360 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C6CFCLL);
  }
  v3361 = *(_QWORD **)(this + 2600);
  *(_QWORD *)(this + 2600) = v3350;
  if (v3361)
  {
    *v3361 = off_1E3580B60;
    v3362 = (_QWORD *)v3361[8];
    if (v3362)
    {
      v3363 = v3361[7];
      *v3362 = v3363;
      *(_QWORD *)(v3363 + 8) = v3362;
      v3361[7] = 0;
      v3361[8] = 0;
    }
    v3364 = (_QWORD *)v3361[5];
    if (v3364)
    {
      v3365 = v3361[4];
      *v3364 = v3365;
      *(_QWORD *)(v3365 + 8) = v3364;
      v3361[4] = 0;
      v3361[5] = 0;
    }
    WTF::fastFree((unint64_t)v3361, v3351, v3352, (uint64_t)v3353, v3354, v3355, v3356, v3357);
    v3350 = *(_QWORD *)(this + 2600);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3350, a2, v3352, v3353, v3354, v3355, v3356, v3357);
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, v3740, (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 2000), v3366, v3367, v3368, v3369);
  v3370 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3370 = off_1E3580B60;
  v3378 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3370 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3370 + 32) = 0;
  *(_QWORD *)(v3370 + 40) = 0;
  *(_QWORD *)(v3370 + 24) = v3378;
  *(_BYTE *)(v3370 + 48) = 0;
  *(_QWORD *)(v3370 + 56) = 0;
  *(_QWORD *)(v3370 + 64) = 0;
  *(_BYTE *)(v3370 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C6D1CLL);
  }
  *(_QWORD *)v3370 = off_1E35A0718;
  *(_QWORD *)(v3370 + 80) = this;
  *(_QWORD *)(v3370 + 88) = this + 2224;
  v3379 = *(_QWORD *)(this + 2224);
  if ((v3379 & 1) != 0)
    v3380 = (v3379 >> 1) & 3;
  else
    v3380 = *(unsigned __int8 *)(v3379 + 4);
  if (v3380 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C6E14);
  }
  v3381 = *(_QWORD **)(this + 2664);
  *(_QWORD *)(this + 2664) = v3370;
  if (v3381)
  {
    *v3381 = off_1E3580B60;
    v3382 = (_QWORD *)v3381[8];
    if (v3382)
    {
      v3383 = v3381[7];
      *v3382 = v3383;
      *(_QWORD *)(v3383 + 8) = v3382;
      v3381[7] = 0;
      v3381[8] = 0;
    }
    v3384 = (_QWORD *)v3381[5];
    if (v3384)
    {
      v3385 = v3381[4];
      *v3384 = v3385;
      *(_QWORD *)(v3385 + 8) = v3384;
      v3381[4] = 0;
      v3381[5] = 0;
    }
    WTF::fastFree((unint64_t)v3381, v3371, v3372, (uint64_t)v3373, v3374, v3375, v3376, v3377);
    v3370 = *(_QWORD *)(this + 2664);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3370, a2, v3372, v3373, v3374, v3375, v3376, v3377);
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, v3739, (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 2000), v3386, v3387, v3388, v3389);
  v3390 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3390 = off_1E3580B60;
  v3398 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3390 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3390 + 32) = 0;
  *(_QWORD *)(v3390 + 40) = 0;
  *(_QWORD *)(v3390 + 24) = v3398;
  *(_BYTE *)(v3390 + 48) = 0;
  *(_QWORD *)(v3390 + 56) = 0;
  *(_QWORD *)(v3390 + 64) = 0;
  *(_BYTE *)(v3390 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C6E34);
  }
  *(_QWORD *)v3390 = off_1E35A0718;
  *(_QWORD *)(v3390 + 80) = this;
  *(_QWORD *)(v3390 + 88) = this + 2232;
  v3399 = *(_QWORD *)(this + 2232);
  if ((v3399 & 1) != 0)
    v3400 = (v3399 >> 1) & 3;
  else
    v3400 = *(unsigned __int8 *)(v3399 + 4);
  if (v3400 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C6F2CLL);
  }
  v3401 = *(_QWORD **)(this + 2680);
  *(_QWORD *)(this + 2680) = v3390;
  if (v3401)
  {
    *v3401 = off_1E3580B60;
    v3402 = (_QWORD *)v3401[8];
    if (v3402)
    {
      v3403 = v3401[7];
      *v3402 = v3403;
      *(_QWORD *)(v3403 + 8) = v3402;
      v3401[7] = 0;
      v3401[8] = 0;
    }
    v3404 = (_QWORD *)v3401[5];
    if (v3404)
    {
      v3405 = v3401[4];
      *v3404 = v3405;
      *(_QWORD *)(v3405 + 8) = v3404;
      v3401[4] = 0;
      v3401[5] = 0;
    }
    WTF::fastFree((unint64_t)v3401, v3391, v3392, (uint64_t)v3393, v3394, v3395, v3396, v3397);
    v3390 = *(_QWORD *)(this + 2680);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3390, a2, v3392, v3393, v3394, v3395, v3396, v3397);
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, *(JSC::JSObject **)(this + 1248), (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 2000), v3406, v3407, v3408, v3409);
  v3410 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3410 = off_1E3580B60;
  v3418 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3410 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3410 + 32) = 0;
  *(_QWORD *)(v3410 + 40) = 0;
  *(_QWORD *)(v3410 + 24) = v3418;
  *(_BYTE *)(v3410 + 48) = 0;
  *(_QWORD *)(v3410 + 56) = 0;
  *(_QWORD *)(v3410 + 64) = 0;
  *(_BYTE *)(v3410 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C6F4CLL);
  }
  *(_QWORD *)v3410 = off_1E35A0718;
  *(_QWORD *)(v3410 + 80) = this;
  *(_QWORD *)(v3410 + 88) = this + 2240;
  v3419 = *(_QWORD *)(this + 2240);
  if ((v3419 & 1) != 0)
    v3420 = (v3419 >> 1) & 3;
  else
    v3420 = *(unsigned __int8 *)(v3419 + 4);
  if (v3420 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7040);
  }
  v3421 = *(_QWORD **)(this + 2696);
  *(_QWORD *)(this + 2696) = v3410;
  if (v3421)
  {
    *v3421 = off_1E3580B60;
    v3422 = (_QWORD *)v3421[8];
    if (v3422)
    {
      v3423 = v3421[7];
      *v3422 = v3423;
      *(_QWORD *)(v3423 + 8) = v3422;
      v3421[7] = 0;
      v3421[8] = 0;
    }
    v3424 = (_QWORD *)v3421[5];
    if (v3424)
    {
      v3425 = v3421[4];
      *v3424 = v3425;
      *(_QWORD *)(v3425 + 8) = v3424;
      v3421[4] = 0;
      v3421[5] = 0;
    }
    WTF::fastFree((unint64_t)v3421, v3411, v3412, (uint64_t)v3413, v3414, v3415, v3416, v3417);
    v3410 = *(_QWORD *)(this + 2696);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3410, a2, v3412, v3413, v3414, v3415, v3416, v3417);
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, *(JSC::JSObject **)(this + 1192), (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 2712), v3426, v3427, v3428, v3429);
  v3430 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3430 = off_1E3580B60;
  v3438 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3430 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3430 + 32) = 0;
  *(_QWORD *)(v3430 + 40) = 0;
  *(_QWORD *)(v3430 + 24) = v3438;
  *(_BYTE *)(v3430 + 48) = 0;
  *(_QWORD *)(v3430 + 56) = 0;
  *(_QWORD *)(v3430 + 64) = 0;
  *(_BYTE *)(v3430 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7060);
  }
  *(_QWORD *)v3430 = off_1E35A0718;
  *(_QWORD *)(v3430 + 80) = this;
  *(_QWORD *)(v3430 + 88) = this + 2240;
  v3439 = *(_QWORD *)(this + 2240);
  if ((v3439 & 1) != 0)
    v3440 = (v3439 >> 1) & 3;
  else
    v3440 = *(unsigned __int8 *)(v3439 + 4);
  if (v3440 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7158);
  }
  v3441 = *(_QWORD **)(this + 2688);
  *(_QWORD *)(this + 2688) = v3430;
  if (v3441)
  {
    *v3441 = off_1E3580B60;
    v3442 = (_QWORD *)v3441[8];
    if (v3442)
    {
      v3443 = v3441[7];
      *v3442 = v3443;
      *(_QWORD *)(v3443 + 8) = v3442;
      v3441[7] = 0;
      v3441[8] = 0;
    }
    v3444 = (_QWORD *)v3441[5];
    if (v3444)
    {
      v3445 = v3441[4];
      *v3444 = v3445;
      *(_QWORD *)(v3445 + 8) = v3444;
      v3441[4] = 0;
      v3441[5] = 0;
    }
    WTF::fastFree((unint64_t)v3441, v3431, v3432, (uint64_t)v3433, v3434, v3435, v3436, v3437);
    v3430 = *(_QWORD *)(this + 2688);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3430, a2, v3432, v3433, v3434, v3435, v3436, v3437);
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, *(JSC::JSObject **)(this + 688), (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 1264), v3446, v3447, v3448, v3449);
  v3450 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3450 = off_1E3580B60;
  v3458 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3450 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3450 + 32) = 0;
  *(_QWORD *)(v3450 + 40) = 0;
  *(_QWORD *)(v3450 + 24) = v3458;
  *(_BYTE *)(v3450 + 48) = 0;
  *(_QWORD *)(v3450 + 56) = 0;
  *(_QWORD *)(v3450 + 64) = 0;
  *(_BYTE *)(v3450 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7178);
  }
  v3459 = (char *)(this + 2256);
  *(_QWORD *)v3450 = off_1E35A0718;
  *(_QWORD *)(v3450 + 80) = this;
  *(_QWORD *)(v3450 + 88) = this + 2256;
  v3460 = *(_QWORD *)(this + 2256);
  if ((v3460 & 1) != 0)
    v3461 = (v3460 >> 1) & 3;
  else
    v3461 = *(unsigned __int8 *)(v3460 + 4);
  if (v3461 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C726CLL);
  }
  v3462 = *(_QWORD **)(this + 2736);
  *(_QWORD *)(this + 2736) = v3450;
  if (v3462)
  {
    *v3462 = off_1E3580B60;
    v3463 = (_QWORD *)v3462[8];
    if (v3463)
    {
      v3464 = v3462[7];
      *v3463 = v3464;
      *(_QWORD *)(v3464 + 8) = v3463;
      v3462[7] = 0;
      v3462[8] = 0;
    }
    v3465 = (_QWORD *)v3462[5];
    if (v3465)
    {
      v3466 = v3462[4];
      *v3465 = v3466;
      *(_QWORD *)(v3466 + 8) = v3465;
      v3462[4] = 0;
      v3462[5] = 0;
    }
    WTF::fastFree((unint64_t)v3462, v3451, v3452, (uint64_t)v3453, v3454, v3455, v3456, v3457);
    v3450 = *(_QWORD *)(this + 2736);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3450, a2, v3452, v3453, v3454, v3455, v3456, v3457);
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, *(JSC::JSObject **)(this + 688), (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 1392), v3467, v3468, v3469, v3470);
  v3471 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3471 = off_1E3580B60;
  v3479 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3471 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3471 + 32) = 0;
  *(_QWORD *)(v3471 + 40) = 0;
  *(_QWORD *)(v3471 + 24) = v3479;
  *(_BYTE *)(v3471 + 48) = 0;
  *(_QWORD *)(v3471 + 56) = 0;
  *(_QWORD *)(v3471 + 64) = 0;
  *(_BYTE *)(v3471 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C728CLL);
  }
  *(_QWORD *)v3471 = off_1E35A0718;
  *(_QWORD *)(v3471 + 80) = this;
  *(_QWORD *)(v3471 + 88) = v3459;
  v3480 = *(_QWORD *)(this + 2256);
  if ((v3480 & 1) != 0)
    v3481 = (v3480 >> 1) & 3;
  else
    v3481 = *(unsigned __int8 *)(v3480 + 4);
  if (v3481 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7380);
  }
  v3482 = *(_QWORD **)(this + 2744);
  *(_QWORD *)(this + 2744) = v3471;
  if (v3482)
  {
    *v3482 = off_1E3580B60;
    v3483 = (_QWORD *)v3482[8];
    if (v3483)
    {
      v3484 = v3482[7];
      *v3483 = v3484;
      *(_QWORD *)(v3484 + 8) = v3483;
      v3482[7] = 0;
      v3482[8] = 0;
    }
    v3485 = (_QWORD *)v3482[5];
    if (v3485)
    {
      v3486 = v3482[4];
      *v3485 = v3486;
      *(_QWORD *)(v3486 + 8) = v3485;
      v3482[4] = 0;
      v3482[5] = 0;
    }
    WTF::fastFree((unint64_t)v3482, v3472, v3473, (uint64_t)v3474, v3475, v3476, v3477, v3478);
    v3471 = *(_QWORD *)(this + 2744);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3471, a2, v3473, v3474, v3475, v3476, v3477, v3478);
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, *(JSC::JSObject **)(this + 688), (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 2576), v3487, v3488, v3489, v3490);
  v3491 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3491 = off_1E3580B60;
  v3499 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3491 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3491 + 32) = 0;
  *(_QWORD *)(v3491 + 40) = 0;
  *(_QWORD *)(v3491 + 24) = v3499;
  *(_BYTE *)(v3491 + 48) = 0;
  *(_QWORD *)(v3491 + 56) = 0;
  *(_QWORD *)(v3491 + 64) = 0;
  *(_BYTE *)(v3491 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C73A0);
  }
  *(_QWORD *)v3491 = off_1E35A0718;
  *(_QWORD *)(v3491 + 80) = this;
  *(_QWORD *)(v3491 + 88) = v3459;
  v3500 = *(_QWORD *)(this + 2256);
  if ((v3500 & 1) != 0)
    v3501 = (v3500 >> 1) & 3;
  else
    v3501 = *(unsigned __int8 *)(v3500 + 4);
  if (v3501 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7494);
  }
  v3502 = *(_QWORD **)(this + 2752);
  *(_QWORD *)(this + 2752) = v3491;
  if (v3502)
  {
    *v3502 = off_1E3580B60;
    v3503 = (_QWORD *)v3502[8];
    if (v3503)
    {
      v3504 = v3502[7];
      *v3503 = v3504;
      *(_QWORD *)(v3504 + 8) = v3503;
      v3502[7] = 0;
      v3502[8] = 0;
    }
    v3505 = (_QWORD *)v3502[5];
    if (v3505)
    {
      v3506 = v3502[4];
      *v3505 = v3506;
      *(_QWORD *)(v3506 + 8) = v3505;
      v3502[4] = 0;
      v3502[5] = 0;
    }
    WTF::fastFree((unint64_t)v3502, v3492, v3493, (uint64_t)v3494, v3495, v3496, v3497, v3498);
    v3491 = *(_QWORD *)(this + 2752);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3491, a2, v3493, v3494, v3495, v3496, v3497, v3498);
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, *(JSC::JSObject **)(this + 688), (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 2584), v3507, v3508, v3509, v3510);
  v3511 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3511 = off_1E3580B60;
  v3519 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3511 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3511 + 32) = 0;
  *(_QWORD *)(v3511 + 40) = 0;
  *(_QWORD *)(v3511 + 24) = v3519;
  *(_BYTE *)(v3511 + 48) = 0;
  *(_QWORD *)(v3511 + 56) = 0;
  *(_QWORD *)(v3511 + 64) = 0;
  *(_BYTE *)(v3511 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C74B4);
  }
  *(_QWORD *)v3511 = off_1E35A0718;
  *(_QWORD *)(v3511 + 80) = this;
  *(_QWORD *)(v3511 + 88) = v3459;
  v3520 = *(_QWORD *)(this + 2256);
  if ((v3520 & 1) != 0)
    v3521 = (v3520 >> 1) & 3;
  else
    v3521 = *(unsigned __int8 *)(v3520 + 4);
  if (v3521 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C75A8);
  }
  v3522 = *(_QWORD **)(this + 2760);
  *(_QWORD *)(this + 2760) = v3511;
  if (v3522)
  {
    *v3522 = off_1E3580B60;
    v3523 = (_QWORD *)v3522[8];
    if (v3523)
    {
      v3524 = v3522[7];
      *v3523 = v3524;
      *(_QWORD *)(v3524 + 8) = v3523;
      v3522[7] = 0;
      v3522[8] = 0;
    }
    v3525 = (_QWORD *)v3522[5];
    if (v3525)
    {
      v3526 = v3522[4];
      *v3525 = v3526;
      *(_QWORD *)(v3526 + 8) = v3525;
      v3522[4] = 0;
      v3522[5] = 0;
    }
    WTF::fastFree((unint64_t)v3522, v3512, v3513, (uint64_t)v3514, v3515, v3516, v3517, v3518);
    v3511 = *(_QWORD *)(this + 2760);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3511, a2, v3513, v3514, v3515, v3516, v3517, v3518);
  JSC::setupAdaptiveWatchpoint((JSC *)v3772, (JSC::JSGlobalObject *)this, *(JSC::JSObject **)(this + 688), (const JSC::Identifier *)(*((_QWORD *)a2 + 5244) + 2736), v3527, v3528, v3529, v3530);
  v3531 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v3531 = off_1E3580B60;
  v3539 = *(_QWORD *)&v3772[16];
  *(_OWORD *)(v3531 + 8) = *(_OWORD *)v3772;
  *(_QWORD *)(v3531 + 32) = 0;
  *(_QWORD *)(v3531 + 40) = 0;
  *(_QWORD *)(v3531 + 24) = v3539;
  *(_BYTE *)(v3531 + 48) = 0;
  *(_QWORD *)(v3531 + 56) = 0;
  *(_QWORD *)(v3531 + 64) = 0;
  *(_BYTE *)(v3531 + 72) = 1;
  if ((unint64_t)v3772[14] << 48 != 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C75C8);
  }
  *(_QWORD *)v3531 = off_1E35A0718;
  *(_QWORD *)(v3531 + 80) = this;
  *(_QWORD *)(v3531 + 88) = v3459;
  v3540 = *(_QWORD *)(this + 2256);
  if ((v3540 & 1) != 0)
    v3541 = (v3540 >> 1) & 3;
  else
    v3541 = *(unsigned __int8 *)(v3540 + 4);
  if (v3541 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C76E4);
  }
  v3542 = *(_QWORD **)(this + 2768);
  *(_QWORD *)(this + 2768) = v3531;
  if (v3542)
  {
    *v3542 = off_1E3580B60;
    v3543 = (_QWORD *)v3542[8];
    if (v3543)
    {
      v3544 = v3542[7];
      *v3543 = v3544;
      *(_QWORD *)(v3544 + 8) = v3543;
      v3542[7] = 0;
      v3542[8] = 0;
    }
    v3545 = (_QWORD *)v3542[5];
    if (v3545)
    {
      v3546 = v3542[4];
      *v3545 = v3546;
      *(_QWORD *)(v3546 + 8) = v3545;
      v3542[4] = 0;
      v3542[5] = 0;
    }
    WTF::fastFree((unint64_t)v3542, v3532, v3533, (uint64_t)v3534, v3535, v3536, v3537, v3538);
    v3531 = *(_QWORD *)(this + 2768);
  }
  JSC::AdaptiveInferredPropertyValueWatchpointBase::install((JSC::AdaptiveInferredPropertyValueWatchpointBase *)v3531, a2, v3533, v3534, v3535, v3536, v3537, v3538);
  JSC::setupAbsenceAdaptiveWatchpoint((uint64_t *)v3772, (JSC::JSCell *)this, *(const WTF::StringImpl **)(this + 1192), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2736), *(_QWORD *)(this + 656), v3547, v3548, v3549);
  JSC::setupAbsenceAdaptiveWatchpoint((uint64_t *)&v3766, (JSC::JSCell *)this, *(const WTF::StringImpl **)(this + 656), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 2736), 0, v3550, v3551, v3552);
  v3553 = (uint64_t *)(this + 2248);
  v3554 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v3554 = 0;
  *(_QWORD *)(v3554 + 8) = 0;
  *(_BYTE *)(v3554 + 16) = 7;
  *(_BYTE *)(v3554 + 21) = BYTE4(this);
  *(_DWORD *)(v3554 + 17) = this;
  *(_OWORD *)(v3554 + 24) = *(_OWORD *)v3772;
  v3562 = *(_QWORD *)&v3772[8];
  *(_QWORD *)(v3554 + 40) = *(_QWORD *)&v3772[16];
  *(_QWORD *)(v3554 + 48) = this + 2248;
  if ((v3562 & 0xFF000000000000) == 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7704);
  }
  if ((v3562 & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7724);
  }
  v3563 = v3554;
  v3564 = *v3553;
  if ((*v3553 & 1) != 0)
    v3565 = (v3564 >> 1) & 3;
  else
    v3565 = *(unsigned __int8 *)(v3564 + 4);
  if (v3565 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7830);
  }
  v3566 = *(_QWORD *)(this + 2704);
  *(_QWORD *)(this + 2704) = v3563;
  if (v3566)
  {
    JSC::Watchpoint::operator delete(v3566, v3555, v3556, v3557, v3558, v3559, v3560, v3561);
    v3563 = *(_QWORD *)(this + 2704);
  }
  JSC::ObjectPropertyCondition::isWatchable(v3563 + 24, 0, v3556, v3557, v3558, v3559, v3560, v3561);
  if ((v3567 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7850);
  }
  v3568 = 16 * (**(_DWORD **)(v3563 + 24) & 0xFFFFFFFE);
  v3569 = *(_QWORD *)(v3568 + 0x60);
  if ((v3569 & 1) != 0)
  {
    v3570 = (v3569 >> 1) & 3;
    v3569 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v3569 = 1;
    *(_BYTE *)(v3569 + 4) = v3570;
    *(_BYTE *)(v3569 + 5) = 0;
    *(_QWORD *)(v3569 + 8) = v3569 + 8;
    *(_QWORD *)(v3569 + 16) = v3569 + 8;
    __dmb(0xAu);
    *(_QWORD *)(v3568 + 96) = v3569;
  }
  v3572 = *(_QWORD *)(v3569 + 8);
  v3571 = (uint64_t *)(v3569 + 8);
  *(_QWORD *)v3563 = v3572;
  *(_QWORD *)(v3563 + 8) = v3571;
  *v3571 = v3563;
  *(_QWORD *)(v3572 + 8) = v3563;
  *((_WORD *)v3571 - 2) = 257;
  v3573 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v3573 = 0;
  *(_QWORD *)(v3573 + 8) = 0;
  *(_BYTE *)(v3573 + 16) = 7;
  *(_BYTE *)(v3573 + 21) = BYTE4(this);
  *(_DWORD *)(v3573 + 17) = this;
  *(_OWORD *)(v3573 + 24) = v3766;
  v3581 = *((_QWORD *)&v3766 + 1);
  *(_QWORD *)(v3573 + 40) = v3767;
  *(_QWORD *)(v3573 + 48) = v3553;
  if ((v3581 & 0xFF000000000000) == 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7870);
  }
  if ((v3581 & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7890);
  }
  v3582 = v3573;
  v3583 = *v3553;
  if ((*v3553 & 1) != 0)
    v3584 = (v3583 >> 1) & 3;
  else
    v3584 = *(unsigned __int8 *)(v3583 + 4);
  if (v3584 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C79D8);
  }
  v3585 = *(_QWORD *)(this + 2712);
  *(_QWORD *)(this + 2712) = v3582;
  if (v3585)
  {
    JSC::Watchpoint::operator delete(v3585, v3574, v3575, v3576, v3577, v3578, v3579, v3580);
    v3582 = *(_QWORD *)(this + 2712);
  }
  JSC::ObjectPropertyCondition::isWatchable(v3582 + 24, 0, v3575, v3576, v3577, v3578, v3579, v3580);
  if ((v3589 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C79F8);
  }
  v3590 = 16 * (**(_DWORD **)(v3582 + 24) & 0xFFFFFFFE);
  v3591 = *(_QWORD *)(v3590 + 0x60);
  if ((v3591 & 1) != 0)
  {
    v3592 = (v3591 >> 1) & 3;
    v3591 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v3591 = 1;
    *(_BYTE *)(v3591 + 4) = v3592;
    *(_BYTE *)(v3591 + 5) = 0;
    *(_QWORD *)(v3591 + 8) = v3591 + 8;
    *(_QWORD *)(v3591 + 16) = v3591 + 8;
    __dmb(0xAu);
    *(_QWORD *)(v3590 + 96) = v3591;
  }
  v3594 = *(_QWORD *)(v3591 + 8);
  v3593 = (uint64_t *)(v3591 + 8);
  *(_QWORD *)v3582 = v3594;
  *(_QWORD *)(v3582 + 8) = v3593;
  *v3593 = v3582;
  *(_QWORD *)(v3594 + 8) = v3582;
  *((_WORD *)v3593 - 2) = 257;
  JSC::setupAbsenceAdaptiveWatchpoint((uint64_t *)v3772, (JSC::JSCell *)this, *(const WTF::StringImpl **)(this + 672), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 40), *(_QWORD *)(this + 656), v3586, v3587, v3588);
  JSC::setupAbsenceAdaptiveWatchpoint((uint64_t *)&v3766, (JSC::JSCell *)this, *(const WTF::StringImpl **)(this + 656), *(_QWORD *)(*((_QWORD *)a2 + 5244) + 40), 0, v3595, v3596, v3597);
  v3598 = (uint64_t *)(this + 2296);
  v3599 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v3599 = 0;
  *(_QWORD *)(v3599 + 8) = 0;
  *(_BYTE *)(v3599 + 16) = 7;
  *(_BYTE *)(v3599 + 21) = BYTE4(this);
  *(_DWORD *)(v3599 + 17) = this;
  *(_OWORD *)(v3599 + 24) = *(_OWORD *)v3772;
  v3607 = *(_QWORD *)&v3772[8];
  *(_QWORD *)(v3599 + 40) = *(_QWORD *)&v3772[16];
  *(_QWORD *)(v3599 + 48) = this + 2296;
  if ((v3607 & 0xFF000000000000) == 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7A18);
  }
  if ((v3607 & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7A38);
  }
  v3608 = v3599;
  v3609 = *v3598;
  if ((*v3598 & 1) != 0)
    v3610 = (v3609 >> 1) & 3;
  else
    v3610 = *(unsigned __int8 *)(v3609 + 4);
  if (v3610 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7B44);
  }
  v3611 = *(_QWORD *)(this + 2720);
  *(_QWORD *)(this + 2720) = v3608;
  if (v3611)
  {
    JSC::Watchpoint::operator delete(v3611, v3600, v3601, v3602, v3603, v3604, v3605, v3606);
    v3608 = *(_QWORD *)(this + 2720);
  }
  JSC::ObjectPropertyCondition::isWatchable(v3608 + 24, 0, v3601, v3602, v3603, v3604, v3605, v3606);
  if ((v3612 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7B64);
  }
  v3613 = 16 * (**(_DWORD **)(v3608 + 24) & 0xFFFFFFFE);
  v3614 = *(_QWORD *)(v3613 + 0x60);
  if ((v3614 & 1) != 0)
  {
    v3615 = (v3614 >> 1) & 3;
    v3614 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v3614 = 1;
    *(_BYTE *)(v3614 + 4) = v3615;
    *(_BYTE *)(v3614 + 5) = 0;
    *(_QWORD *)(v3614 + 8) = v3614 + 8;
    *(_QWORD *)(v3614 + 16) = v3614 + 8;
    __dmb(0xAu);
    *(_QWORD *)(v3613 + 96) = v3614;
  }
  v3617 = *(_QWORD *)(v3614 + 8);
  v3616 = (uint64_t *)(v3614 + 8);
  *(_QWORD *)v3608 = v3617;
  *(_QWORD *)(v3608 + 8) = v3616;
  *v3616 = v3608;
  *(_QWORD *)(v3617 + 8) = v3608;
  *((_WORD *)v3616 - 2) = 257;
  v3618 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v3618 = 0;
  *(_QWORD *)(v3618 + 8) = 0;
  *(_BYTE *)(v3618 + 16) = 7;
  *(_BYTE *)(v3618 + 21) = BYTE4(this);
  *(_DWORD *)(v3618 + 17) = this;
  *(_OWORD *)(v3618 + 24) = v3766;
  v3626 = *((_QWORD *)&v3766 + 1);
  *(_QWORD *)(v3618 + 40) = v3767;
  *(_QWORD *)(v3618 + 48) = v3598;
  if ((v3626 & 0xFF000000000000) == 0x5000000000000)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7B84);
  }
  if ((v3626 & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7BA4);
  }
  v3627 = v3618;
  v3628 = *v3598;
  if ((*v3598 & 1) != 0)
    v3629 = (v3628 >> 1) & 3;
  else
    v3629 = *(unsigned __int8 *)(v3628 + 4);
  if (v3629 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7CECLL);
  }
  v3630 = *(_QWORD *)(this + 2728);
  *(_QWORD *)(this + 2728) = v3627;
  if (v3630)
  {
    JSC::Watchpoint::operator delete(v3630, v3619, v3620, v3621, v3622, v3623, v3624, v3625);
    v3627 = *(_QWORD *)(this + 2728);
  }
  JSC::ObjectPropertyCondition::isWatchable(v3627 + 24, 0, v3620, v3621, v3622, v3623, v3624, v3625);
  if ((v3632 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7D0CLL);
  }
  v3633 = 16 * (**(_DWORD **)(v3627 + 24) & 0xFFFFFFFE);
  v3634 = *(_QWORD *)(v3633 + 0x60);
  if ((v3634 & 1) != 0)
  {
    v3635 = (v3634 >> 1) & 3;
    v3634 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v3634 = 1;
    *(_BYTE *)(v3634 + 4) = v3635;
    *(_BYTE *)(v3634 + 5) = 0;
    *(_QWORD *)(v3634 + 8) = v3634 + 8;
    *(_QWORD *)(v3634 + 16) = v3634 + 8;
    __dmb(0xAu);
    *(_QWORD *)(v3633 + 96) = v3634;
  }
  v3637 = *(_QWORD *)(v3634 + 8);
  v3636 = (uint64_t *)(v3634 + 8);
  *(_QWORD *)v3627 = v3637;
  *(_QWORD *)(v3627 + 8) = v3636;
  *v3636 = v3627;
  *(_QWORD *)(v3637 + 8) = v3627;
  *((_WORD *)v3636 - 2) = 257;
  if (*(_QWORD *)(this + 2584))
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7D2CLL);
  }
  if (*(_QWORD *)(this + 2576))
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7D4CLL);
  }
  JSC::JSGlobalObject::tryInstallSpeciesWatchpoint<JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>>(this, *(_QWORD *)(this + 672), *(_QWORD *)(this + 232), this + 2584, (uint64_t *)(this + 2576), this + 2280, *(_QWORD *)(this + 1616), v3631);
  v3638 = *(_QWORD *)(this + 56);
  v3639 = *(_QWORD *)(this + 672);
  v3640 = *(_QWORD *)(this + 656);
  if (*(_DWORD *)(v3638 + 760) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath(v3638 + 192, this);
  v3648 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v3648 = 0;
  *(_QWORD *)(v3648 + 8) = 0;
  *(_BYTE *)(v3648 + 16) = 7;
  *(_BYTE *)(v3648 + 21) = BYTE4(this);
  *(_DWORD *)(v3648 + 17) = this;
  *(_QWORD *)(v3648 + 24) = v3639;
  *(_QWORD *)(v3648 + 32) = 0x4000000000000;
  *(_QWORD *)(v3648 + 40) = v3640;
  *(_QWORD *)(v3648 + 48) = this + 2304;
  v3649 = *(_QWORD *)(this + 2304);
  if ((v3649 & 1) != 0)
    v3650 = (v3649 >> 1) & 3;
  else
    v3650 = *(unsigned __int8 *)(v3649 + 4);
  if (v3650 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7E64);
  }
  v3651 = *(_QWORD *)(this + 2608);
  *(_QWORD *)(this + 2608) = v3648;
  if (v3651)
  {
    JSC::Watchpoint::operator delete(v3651, v3641, v3642, v3643, v3644, v3645, v3646, v3647);
    v3648 = *(_QWORD *)(this + 2608);
  }
  JSC::ObjectPropertyCondition::isWatchable(v3648 + 24, 0, v3642, v3643, v3644, v3645, v3646, v3647);
  if ((v3652 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7E84);
  }
  v3653 = 16 * (**(_DWORD **)(v3648 + 24) & 0xFFFFFFFE);
  v3654 = *(_QWORD *)(v3653 + 0x60);
  if ((v3654 & 1) != 0)
  {
    v3655 = (v3654 >> 1) & 3;
    v3654 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v3654 = 1;
    *(_BYTE *)(v3654 + 4) = v3655;
    *(_BYTE *)(v3654 + 5) = 0;
    *(_QWORD *)(v3654 + 8) = v3654 + 8;
    *(_QWORD *)(v3654 + 16) = v3654 + 8;
    __dmb(0xAu);
    *(_QWORD *)(v3653 + 96) = v3654;
  }
  v3657 = *(_QWORD *)(v3654 + 8);
  v3656 = (uint64_t *)(v3654 + 8);
  *(_QWORD *)v3648 = v3657;
  *(_QWORD *)(v3648 + 8) = v3656;
  *v3656 = v3648;
  *(_QWORD *)(v3657 + 8) = v3648;
  *((_WORD *)v3656 - 2) = 257;
  v3658 = *(_QWORD *)(this + 56);
  v3659 = *(_QWORD *)(this + 1192);
  v3660 = *(_QWORD *)(this + 656);
  if (*(_DWORD *)(v3658 + 760) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath(v3658 + 192, this);
  v3668 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v3668 = 0;
  *(_QWORD *)(v3668 + 8) = 0;
  *(_BYTE *)(v3668 + 16) = 7;
  *(_BYTE *)(v3668 + 21) = BYTE4(this);
  *(_DWORD *)(v3668 + 17) = this;
  *(_QWORD *)(v3668 + 24) = v3659;
  *(_QWORD *)(v3668 + 32) = 0x4000000000000;
  *(_QWORD *)(v3668 + 40) = v3660;
  *(_QWORD *)(v3668 + 48) = this + 2320;
  v3669 = *(_QWORD *)(this + 2320);
  if ((v3669 & 1) != 0)
    v3670 = (v3669 >> 1) & 3;
  else
    v3670 = *(unsigned __int8 *)(v3669 + 4);
  if (v3670 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7FA0);
  }
  v3671 = *(_QWORD *)(this + 2616);
  *(_QWORD *)(this + 2616) = v3668;
  if (v3671)
  {
    JSC::Watchpoint::operator delete(v3671, v3661, v3662, v3663, v3664, v3665, v3666, v3667);
    v3668 = *(_QWORD *)(this + 2616);
  }
  JSC::ObjectPropertyCondition::isWatchable(v3668 + 24, 0, v3662, v3663, v3664, v3665, v3666, v3667);
  if ((v3672 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C7FC0);
  }
  v3673 = 16 * (**(_DWORD **)(v3668 + 24) & 0xFFFFFFFE);
  v3674 = *(_QWORD *)(v3673 + 0x60);
  if ((v3674 & 1) != 0)
  {
    v3675 = (v3674 >> 1) & 3;
    v3674 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v3674 = 1;
    *(_BYTE *)(v3674 + 4) = v3675;
    *(_BYTE *)(v3674 + 5) = 0;
    *(_QWORD *)(v3674 + 8) = v3674 + 8;
    *(_QWORD *)(v3674 + 16) = v3674 + 8;
    __dmb(0xAu);
    *(_QWORD *)(v3673 + 96) = v3674;
  }
  v3677 = *(_QWORD *)(v3674 + 8);
  v3676 = (uint64_t *)(v3674 + 8);
  *(_QWORD *)v3668 = v3677;
  *(_QWORD *)(v3668 + 8) = v3676;
  *v3676 = v3668;
  *(_QWORD *)(v3677 + 8) = v3668;
  *((_WORD *)v3676 - 2) = 257;
  v3678 = *(_QWORD *)(this + 56);
  v3679 = *(_QWORD *)(this + 656);
  if (*(_DWORD *)(v3678 + 760) >= *(unsigned __int8 *)(this + 7))
    JSC::Heap::writeBarrierSlowPath(v3678 + 192, this);
  v3680 = (uint64_t *)(this + 2312);
  v3688 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v3688 = 0;
  *(_QWORD *)(v3688 + 8) = 0;
  *(_BYTE *)(v3688 + 16) = 7;
  *(_BYTE *)(v3688 + 21) = BYTE4(this);
  *(_DWORD *)(v3688 + 17) = this;
  *(_QWORD *)(v3688 + 24) = v3679;
  *(_OWORD *)(v3688 + 32) = xmmword_199158310;
  *(_QWORD *)(v3688 + 48) = this + 2312;
  v3689 = *(_QWORD *)(this + 2312);
  if ((v3689 & 1) != 0)
    v3690 = (v3689 >> 1) & 3;
  else
    v3690 = *(unsigned __int8 *)(v3689 + 4);
  if (v3690 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C80A4);
  }
  v3691 = *(_QWORD *)(this + 2624);
  *(_QWORD *)(this + 2624) = v3688;
  if (v3691)
  {
    JSC::Watchpoint::operator delete(v3691, v3681, v3682, v3683, v3684, v3685, v3686, v3687);
    v3688 = *(_QWORD *)(this + 2624);
  }
  JSC::ObjectPropertyCondition::isWatchable(v3688 + 24, 0, v3682, v3683, v3684, v3685, v3686, v3687);
  if ((v3692 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C80C4);
  }
  v3693 = 16 * (**(_DWORD **)(v3688 + 24) & 0xFFFFFFFE);
  v3694 = *(_QWORD *)(v3693 + 0x60);
  if ((v3694 & 1) != 0)
  {
    v3695 = (v3694 >> 1) & 3;
    v3694 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v3694 = 1;
    *(_BYTE *)(v3694 + 4) = v3695;
    *(_BYTE *)(v3694 + 5) = 0;
    *(_QWORD *)(v3694 + 8) = v3694 + 8;
    *(_QWORD *)(v3694 + 16) = v3694 + 8;
    __dmb(0xAu);
    *(_QWORD *)(v3693 + 96) = v3694;
  }
  v3697 = *(_QWORD *)(v3694 + 8);
  v3696 = (uint64_t *)(v3694 + 8);
  *(_QWORD *)v3688 = v3697;
  *(_QWORD *)(v3688 + 8) = v3696;
  *v3696 = v3688;
  *(_QWORD *)(v3697 + 8) = v3688;
  *((_WORD *)v3696 - 2) = 257;
  v3705 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v3705 = 0;
  *(_QWORD *)(v3705 + 8) = 0;
  *(_BYTE *)(v3705 + 16) = 8;
  *(_BYTE *)(v3705 + 21) = BYTE4(this);
  *(_DWORD *)(v3705 + 17) = this;
  *(_QWORD *)(v3705 + 24) = this + 2304;
  v3706 = *(_QWORD *)(this + 2304);
  if ((v3706 & 1) != 0)
    v3707 = (v3706 >> 1) & 3;
  else
    v3707 = *(unsigned __int8 *)(v3706 + 4);
  if (v3707 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C8188);
  }
  v3708 = *(_QWORD *)(this + 2632);
  *(_QWORD *)(this + 2632) = v3705;
  if (v3708)
  {
    JSC::Watchpoint::operator delete(v3708, v3698, v3699, v3700, v3701, v3702, v3703, v3704);
    v3705 = *(_QWORD *)(this + 2632);
  }
  v3709 = *v3680;
  if ((*v3680 & 1) != 0)
  {
    v3710 = (v3709 >> 1) & 3;
    v3709 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v3709 = 1;
    *(_BYTE *)(v3709 + 4) = v3710;
    *(_BYTE *)(v3709 + 5) = 0;
    *(_QWORD *)(v3709 + 8) = v3709 + 8;
    *(_QWORD *)(v3709 + 16) = v3709 + 8;
    __dmb(0xAu);
    *v3680 = v3709;
  }
  if (v3705)
  {
    v3712 = *(_QWORD *)(v3709 + 8);
    v3711 = (uint64_t *)(v3709 + 8);
    *(_QWORD *)v3705 = v3712;
    *(_QWORD *)(v3705 + 8) = v3711;
    *v3711 = v3705;
    *(_QWORD *)(v3712 + 8) = v3705;
    *((_WORD *)v3711 - 2) = 257;
  }
  v3720 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v3720 = 0;
  *(_QWORD *)(v3720 + 8) = 0;
  *(_BYTE *)(v3720 + 16) = 8;
  *(_BYTE *)(v3720 + 21) = BYTE4(this);
  *(_DWORD *)(v3720 + 17) = this;
  *(_QWORD *)(v3720 + 24) = this + 2320;
  v3722 = *(_QWORD *)(this + 2320);
  if ((v3722 & 1) != 0)
    v3723 = (v3722 >> 1) & 3;
  else
    v3723 = *(unsigned __int8 *)(v3722 + 4);
  if (v3723 != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1989C8250);
  }
  v3724 = *(_QWORD *)(this + 2640);
  *(_QWORD *)(this + 2640) = v3720;
  if (v3724)
  {
    JSC::Watchpoint::operator delete(v3724, v3713, v3714, v3715, v3716, v3717, v3718, v3719);
    v3720 = *(_QWORD *)(this + 2640);
  }
  v3725 = *v3680;
  if ((*v3680 & 1) != 0)
  {
    v3726 = (v3725 >> 1) & 3;
    v3725 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v3725 = 1;
    *(_BYTE *)(v3725 + 4) = v3726;
    *(_BYTE *)(v3725 + 5) = 0;
    *(_QWORD *)(v3725 + 8) = v3725 + 8;
    *(_QWORD *)(v3725 + 16) = v3725 + 8;
    __dmb(0xAu);
    *v3680 = v3725;
  }
  if (v3720)
  {
    v3728 = *(_QWORD *)(v3725 + 8);
    v3727 = (uint64_t *)(v3725 + 8);
    *(_QWORD *)v3720 = v3728;
    *(_QWORD *)(v3720 + 8) = v3727;
    *v3727 = v3720;
    *(_QWORD *)(v3728 + 8) = v3720;
    *((_WORD *)v3727 - 2) = 257;
  }
  if (BYTE1(dword_1ECF4C240))
  {
    v3729 = (_QWORD *)(this + 1536);
    v3730 = *(_QWORD *)(this + 1472);
    if ((v3730 & 1) != 0)
    {
      v3731 = *(void (**)(_BYTE *))(v3730 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v3732 = (_QWORD *)(this - 16);
      else
        v3732 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
      *(_QWORD *)v3772 = *v3732;
      *(_QWORD *)&v3772[8] = this;
      *(_QWORD *)&v3772[16] = this + 1472;
      v3731(v3772);
    }
    if ((*v3729 & 1) != 0)
    {
      v3733 = *(void (**)(_BYTE *))(*v3729 & 0xFFFFFFFFFFFFFFFCLL);
      if ((this & 8) != 0)
        v3734 = (_QWORD *)(this - 16);
      else
        v3734 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
      *(_QWORD *)v3772 = *v3734;
      *(_QWORD *)&v3772[8] = this;
      *(_QWORD *)&v3772[16] = this + 1536;
      v3733(v3772);
    }
  }
  for (i = (JSC::JSGlobalObject *)this; ; i = v3736)
  {
    v3736 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x30);
    v3737 = v3736;
    if (!v3736)
      v3737 = (JSC::JSGlobalObject *)*((_QWORD *)i + 2);
    if (((unint64_t)v3737 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)v3737 + 5) < 0x17u)
      break;
    if (!v3736)
      v3736 = (JSC::JSGlobalObject *)*((_QWORD *)i + 2);
  }
  v3738 = *(_QWORD *)(this + 656);
  if (i != (JSC::JSGlobalObject *)v3738)
    JSC::JSObject::setPrototypeDirect((unint64_t)i, a2, v3738, v3715, v3716, v3717, v3718, v3719, v3721);
  if ((_BYTE)dword_1ECF4C5C0)
    JSC::JSGlobalObject::haveABadTime((JSC::JSGlobalObject *)this, a2, v3738, v3715, v3716, v3717, v3718, v3719);
}

