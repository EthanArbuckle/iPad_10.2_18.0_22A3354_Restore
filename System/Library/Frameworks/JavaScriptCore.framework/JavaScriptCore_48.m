JSC::JSObject *JSC::getRegExpStructure(uint64_t a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10[3];
  uint64_t v11;
  uint64_t v12;

  v11 = a1;
  v12 = a2;
  if (!a2 || *(_QWORD *)(a1 + 248) == a2)
  {
    v8 = *(_DWORD *)(a1 + 976);
    if (v8)
      return (JSC::JSObject *)(16 * (v8 & 0xFFFFFFFE));
    else
      return 0;
  }
  else
  {
    v10[0] = *(_QWORD *)(a1 + 56);
    v10[1] = (uint64_t)&v11;
    v10[2] = (uint64_t)&v12;
    return JSC::getRegExpStructure(JSC::JSGlobalObject *,JSC::JSValue)::{lambda(void)#1}::operator()(v10, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t JSC::toFlags(JSC::JSGlobalObject *a1, unint64_t a2, const WTF::String *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v9;
  uint64_t v10;
  unsigned __int16 **v13;
  unsigned __int16 *v14;
  unint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::AtomStringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  JSC::VM *v49;
  unint64_t v50;

  v9 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v49 = v9;
  v50 = a2;
  if (a2 != 10)
  {
    if ((a2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a2 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v50, a1, a3, a4, a5, a6, a7, a8, (int **)&v48);
      v13 = (unsigned __int16 **)v48;
    }
    else
    {
      v13 = *(unsigned __int16 ***)(a2 + 8);
      if ((v13 & 1) != 0)
        v13 = (unsigned __int16 **)*JSC::JSRopeString::resolveRope(a2, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (v13)
        *(_DWORD *)v13 += 2;
      v48 = (WTF::StringImpl *)v13;
    }
    if (v13)
    {
      v14 = v13[1];
      v15 = *((unsigned int *)v13 + 1) | ((unint64_t)((*((_DWORD *)v13 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v14 = 0;
      v15 = 0x100000000;
    }
    v10 = JSC::Yarr::parseFlags(v14, v15);
    v48 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, v16, v17, v18, v19, v20, v21, v22);
        WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
    if (!*((_DWORD *)v9 + 20)
      || !JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)v16, v17, v18, v19, v20, v21, v22))
    {
      if ((v10 & 0xFF0000) != 0)
        return v10;
      v23 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v23 = 0x2D00000002;
      *(_QWORD *)(v23 + 8) = "Invalid flags supplied to RegExp constructor.";
      *(_DWORD *)(v23 + 16) = 4;
      v48 = (WTF::StringImpl *)v23;
      JSC::throwSyntaxError(a1, &v49, &v48);
      v31 = v48;
      v48 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
        {
          WTF::StringImpl::~StringImpl(v31, v24, v25, v26, v27, v28, v29, v30);
          WTF::fastFree(v40, v41, v42, v43, v44, v45, v46, v47);
        }
        else
        {
          *(_DWORD *)v31 -= 2;
        }
      }
    }
  }
  return 0;
}

unint64_t JSC::regExpCreate(uint64_t a1, uint64_t a2, unint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  JSC::JSObject *v22;
  unint64_t *v23;
  _BOOL4 v24;
  unint64_t SlowCase;
  WTF::StringImpl *v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  uint64_t v48[3];
  uint64_t v49;
  uint64_t v50;

  v47 = a3;
  v12 = *(_QWORD *)(a1 + 56);
  if (a3 == 10)
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v46 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
  else if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v47, (JSC::JSGlobalObject *)a1, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v46);
  }
  else
  {
    v13 = *(WTF::StringImpl **)(a3 + 8);
    if ((v13 & 1) != 0)
      v13 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(a3, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a9, a5, a6, a7, a8);
    if (v13)
      *(_DWORD *)v13 += 2;
    v46 = v13;
  }
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, a2, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    goto LABEL_37;
  }
  v17 = JSC::toFlags((JSC::JSGlobalObject *)a1, (unint64_t)a4, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v12 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v14, v15, v16, a5, a6, a7, a8))
      goto LABEL_37;
  }
  v18 = JSC::RegExpCache::lookupOrCreate(*(_QWORD *)(v12 + 93032), v12, (const WTF::StringImpl *)&v46, v17, a5, a6, a7, a8);
  v19 = *(unsigned __int8 *)(v18 + 20);
  if (*(_BYTE *)(v18 + 20))
  {
    v36 = JSC::Yarr::errorToThrow((JSC::JSGlobalObject *)a1, v19);
    JSC::VM::throwException((JSC::VM *)v12, (JSC::JSGlobalObject *)a1, v36, v37, v38, v39, v40, v41);
LABEL_37:
    SlowCase = 0;
    goto LABEL_23;
  }
  v20 = v18;
  v49 = a1;
  v50 = a2;
  if (!a2 || *(_QWORD *)(a1 + 248) == a2)
  {
    v21 = *(_DWORD *)(a1 + 976);
    if (v21)
      v22 = (JSC::JSObject *)(16 * (v21 & 0xFFFFFFFE));
    else
      v22 = 0;
  }
  else
  {
    v48[0] = *(_QWORD *)(a1 + 56);
    v48[1] = (uint64_t)&v49;
    v48[2] = (uint64_t)&v50;
    v22 = JSC::getRegExpStructure(JSC::JSGlobalObject *,JSC::JSValue)::{lambda(void)#1}::operator()(v48, v19, a3, a4, a5, a6, a7, a8);
  }
  if (*(_DWORD *)(v12 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v19, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    goto LABEL_37;
  }
  v23 = (unint64_t *)(v12 + 39344);
  if (a2)
    v24 = *(_QWORD *)(a1 + 248) == a2;
  else
    v24 = 1;
  SlowCase = *v23;
  if (*v23 < *(_QWORD *)(v12 + 39352))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v12 + 39360);
  if ((SlowCase & 1) == 0)
  {
    v42 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v12 + 39368);
    *(_QWORD *)(v12 + 39352) = SlowCase + HIDWORD(v42);
    *(_QWORD *)(v12 + 39360) = SlowCase + (int)v42;
LABEL_20:
    *v23 = SlowCase + 32;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM((JSC *)v12, (JSC::VM *)v19, a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v12 + 39320, v12 + 192, 32, 0, 0, v43, v44, v45);
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  JSC::RegExpObject::RegExpObject(SlowCase, v12, (unint64_t)v22, v20, v24);
  if (*(_BYTE *)(v12 + 755))
    __dmb(0xAu);
LABEL_23:
  v26 = v46;
  v46 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
    {
      WTF::StringImpl::~StringImpl(v26, (WTF::AtomStringImpl *)v19, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v26 -= 2;
    }
  }
  return SlowCase;
}

unint64_t JSC::esSpecRegExpCreate(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v9;
  uint64_t v10;

  if (*((_DWORD *)a2 + 8) == 1)
  {
    v9 = 10;
    goto LABEL_6;
  }
  v9 = *((_QWORD *)a2 + 6);
  if (*((_DWORD *)a2 + 8) == 2)
  {
LABEL_6:
    v10 = 10;
    return JSC::regExpCreate((uint64_t)this, 0, v9, (JSC::Structure *)v10, a6, a7, a8, a9, a4);
  }
  v10 = *((_QWORD *)a2 + 7);
  return JSC::regExpCreate((uint64_t)this, 0, v9, (JSC::Structure *)v10, a6, a7, a8, a9, a4);
}

uint64_t JSC::esSpecIsRegExp(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSC *v21;
  uint64_t v22;

  if (*((_DWORD *)a2 + 8) == 1)
    return 6;
  v9 = *((_QWORD *)a2 + 6);
  if ((v9 & 0xFFFE000000000002) != 0)
    return 6;
  if (*(unsigned __int8 *)(v9 + 5) < 0x17u)
    return 6;
  v11 = *((_QWORD *)this + 7);
  v20 = *((_QWORD *)a2 + 6);
  v21 = this;
  v19 = JSC::JSObject::get((unsigned int *)v9, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 2720), a4, a5, a6, a7, a8);
  v22 = v19;
  if (*(_DWORD *)(v11 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v12, v13, v14, v15, v16, v17, v18))
      return 6;
  }
  if (v19 == 10)
  {
    if (*(_BYTE *)(v20 + 5) == 59)
      return 7;
    return 6;
  }
  if (!JSC::JSValue::toBoolean(&v22, (uint64_t)v21))
    return 6;
  return 7;
}

void JSC::RegExpCache::~RegExpCache(JSC::RegExpCache *this, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    v9 = *((unsigned int *)this + 4);
    if ((_DWORD)v9)
    {
      v10 = v8 + 8;
      do
      {
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)(*(_QWORD *)v10 + 8) = 3;
          *(_QWORD *)v10 = 0;
        }
        v11 = v10 - 6;
        v12 = (WTF::StringImpl *)(*(unsigned int *)(v10 - 6) | ((unint64_t)*(unsigned __int8 *)(v10 - 2) << 32));
        *(_DWORD *)v11 = 0;
        *(_BYTE *)(v11 + 4) = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
          {
            WTF::StringImpl::~StringImpl(v12, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
          }
          else
          {
            *(_DWORD *)v12 -= 2;
          }
        }
        v10 += 16;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree(v8, a2, a3, a4, a5, a6, a7, a8);
  }
}

{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    v10 = *((unsigned int *)this + 4);
    if ((_DWORD)v10)
    {
      v11 = v9 + 8;
      do
      {
        if (*(_QWORD *)v11)
        {
          *(_QWORD *)(*(_QWORD *)v11 + 8) = 3;
          *(_QWORD *)v11 = 0;
        }
        v12 = v11 - 6;
        v13 = (WTF::StringImpl *)(*(unsigned int *)(v11 - 6) | ((unint64_t)*(unsigned __int8 *)(v11 - 2) << 32));
        *(_DWORD *)v12 = 0;
        *(_BYTE *)(v12 + 4) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
          {
            WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v14, v15, v16, v17, v18, v19, v20, v21);
          }
          else
          {
            *(_DWORD *)v13 -= 2;
          }
        }
        v11 += 16;
        --v10;
      }
      while (v10);
    }
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t WTF::makeString<char,WTF::String,WTF::ASCIILiteral>(uint64_t result, uint64_t a2)
{
  int **v3;
  int v4;
  BOOL v5;
  int v6;
  _BOOL4 v7;

  v3 = (int **)result;
  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4 < 0)
    {
LABEL_12:
      *v3 = 0;
LABEL_13:
      __break(0xC471u);
      return result;
    }
  }
  else
  {
    v4 = 0;
  }
  v5 = __OFADD__(v4, 50);
  v6 = v4 + 50;
  if (v5)
    goto LABEL_12;
  result = (v6 + 1);
  if (__OFADD__(v6, 1))
    goto LABEL_12;
  v7 = !a2 || (*(_BYTE *)(a2 + 16) & 4) != 0;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, v7, 39, a2, (int8x16_t *)"' property of a Proxy's handler should be callable", 0x32u, v3);
  if (!*v3)
    goto LABEL_13;
  return result;
}

unint64_t JSC::constructArray(unint64_t a1, unsigned __int16 *a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  int v20;
  unint64_t v21;

  v11 = *(_QWORD *)(a1 + 56);
  v12 = JSC::JSGlobalObject::arrayStructureForProfileDuringAllocation(a1, a1, (JSC::ExecutableBase *)a2, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v20 = *(_DWORD *)(v11 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
    {
      v21 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v13, v14, v15, v16, v17, v18);
      v12 = v21;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  result = JSC::constructArray(a1, v12, a3, v14, v15, v16, v17, v18);
  if (a2)
    *(_QWORD *)a2 = result | ((unint64_t)a2[3] << 48);
  return result;
}

uint64_t JSC::JSGlobalObject::arrayStructureForProfileDuringAllocation(uint64_t a1, unint64_t a2, JSC::ExecutableBase *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Structure *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v17;
  JSC::Structure *i;
  char **v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  JSC::Structure *v44;
  unint64_t v45;
  unint64_t v46;
  JSC::VM *v47;
  JSC::Structure *v48;
  uint64_t v49;
  JSC::Structure *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int v61;
  unint64_t v62;
  unsigned int v63;
  int v64;
  uint64_t v65;
  int v66;
  unint64_t v67;
  JSC::JSCell *v68;
  JSC::VM *v69;
  int v70;

  v8 = a4;
  if (a3)
  {
    v9 = *(_QWORD *)a3;
    v10 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      v11 = *(_BYTE *)((*(_QWORD *)a3 & 0xFFFFFFFFFFFFLL) + 4);
      v12 = HIBYTE(v9);
      if ((v11 & 0xF) != HIBYTE(v9))
      {
        *(_QWORD *)a3 = v9 & 0xFFFF000000000000;
        if (byte_1ECF4C722)
        {
          v38 = HIWORD(v9);
          v39 = HIBYTE(v9) & 0xF;
          if (v39 <= (v11 & 0xFu))
            LODWORD(v39) = v11 & 0xF;
          if (v39 >= 0xA)
            v40 = 9;
          else
            v40 = v39;
          v41 = v40 | 0x10;
          if ((v12 & 0x10) != 0)
            LODWORD(v39) = v41;
          if ((v11 & 0xE) != 0)
            v42 = *(_DWORD *)(*(_QWORD *)(v10 + 8) - 4);
          else
            v42 = 0;
          if (v38 > v42)
            v42 = v38;
          if (v42 >= 0x19)
            v42 = 25;
          v9 = (unint64_t)(v42 | ((_DWORD)v39 << 8)) << 48;
          *(_QWORD *)a3 = v9;
        }
        else
        {
          v9 &= 0xFFFF000000000000;
        }
      }
    }
    v13 = HIBYTE(v9);
    if (!a4)
      goto LABEL_7;
  }
  else
  {
    LODWORD(v13) = 3;
    if (!a4)
    {
LABEL_7:
      v14 = (v13 >> 1) & 7;
      if ((v13 & 0x10) != 0)
        v14 = ((v13 & 0xE) + 10) >> 1;
      v15 = *(_DWORD *)(a2 + 4 * v14 + 892);
      if (v15)
        return 16 * (v15 & 0xFFFFFFFE);
      else
        return 0;
    }
  }
  if (*(JSC::Structure **)(a2 + 232) == a4)
    goto LABEL_7;
  v17 = *(_QWORD *)(a2 + 56);
  v69 = (JSC::VM *)v17;
  for (i = a4; ; i = (JSC::Structure *)*((_QWORD *)i + 2))
  {
    while (1)
    {
      v19 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
      if (v19 != &JSC::JSBoundFunction::s_info && v19 != &JSC::JSRemoteFunction::s_info)
        break;
      i = (JSC::Structure *)*((_QWORD *)i + 4);
    }
    if (*((_BYTE *)i + 5) != 61)
    {
      v20 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
      goto LABEL_19;
    }
    v44 = a4;
    v45 = a2;
    if (*((_QWORD *)i + 3) == 2)
      break;
  }
  JSC::throwTypeError(a2, &v69, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  a2 = v45;
  v20 = 0;
  v8 = v44;
LABEL_19:
  if (*(_DWORD *)(v17 + 80))
  {
    v43 = *(_DWORD *)(v17 + 80);
    if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
    {
      v50 = v8;
      v51 = a2;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v17 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      v8 = v50;
      a2 = v51;
    }
    if (*(_QWORD *)(v17 + 16))
      return 0;
  }
  v21 = (v13 >> 1) & 7;
  if ((v13 & 0x10) != 0)
    v21 = ((v13 & 0xE) + 10) >> 1;
  v22 = *(_DWORD *)(v20 + 4 * v21 + 892);
  v23 = 16 * (v22 & 0xFFFFFFFE);
  if (v22)
    v24 = 16 * (v22 & 0xFFFFFFFE);
  else
    v24 = 0;
  v25 = *(_QWORD *)(a2 + 56);
  v26 = *(_QWORD **)(v24 + 40);
  if (*((_BYTE *)v8 + 5) != 26)
    goto LABEL_82;
  v27 = *((_QWORD *)v8 + 3);
  if ((v27 & 1) != 0)
  {
    v37 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 48);
    if (*(_BYTE *)(v37 + 5) == 8)
      goto LABEL_82;
    v28 = *(_QWORD *)(v37 + 88);
  }
  else
  {
    if (*(_BYTE *)(v27 + 5) == 8)
      goto LABEL_82;
    v28 = *(_QWORD *)(v27 + 88);
  }
  if ((*(_DWORD *)(v28 + 16) & 0x80000000) != 0)
  {
    v46 = a2;
    v47 = *(JSC::VM **)(*(_QWORD *)(16 * (*(_DWORD *)v8 & 0xFFFFFFFE) + 0x28) + 56);
    v70 = 0;
    v48 = v8;
    JSC::JSObject::getDirect(v8, v47, *(_QWORD *)(*((_QWORD *)v47 + 5244) + 2160), (const JSC::PropertyTable *)&v70, a5, a6, a7, a8);
    if (!v49 || (v70 & 0x70) != 0)
    {
      a2 = v46;
      v8 = v48;
      goto LABEL_82;
    }
    v8 = v48;
    v27 = *((_QWORD *)v48 + 3);
    a2 = v46;
  }
  if ((v27 & 1) != 0)
    v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFFFFELL) + 48);
  else
    v29 = v27;
  v30 = *(_QWORD *)(v29 + 88);
  if (((1 << *(_BYTE *)(v30 + 50)) & 0x78007) != 0 || (v31 = *(_QWORD **)(v30 + 88)) != 0 && *v31)
  {
    if ((v27 & 1) != 0)
    {
      v32 = v27 & 0xFFFFFFFFFFFFFFFELL;
    }
    else
    {
      v67 = a2;
      v68 = v8;
      v32 = JSC::FunctionRareData::create((JSC::FunctionRareData *)v25, (JSC::VM *)v27, a3, (uint64_t)a4, a5, a6, a7, a8);
      v8 = v68;
      __dmb(0xAu);
      *((_QWORD *)v8 + 3) = v32 | 1;
      if (v32)
      {
        if (*(_DWORD *)(v25 + 760) < *((unsigned __int8 *)v68 + 7))
        {
          a2 = v67;
          v8 = v68;
          goto LABEL_37;
        }
        JSC::Heap::writeBarrierSlowPath(v25 + 192, (unint64_t)v68);
        v8 = v68;
      }
      a2 = v67;
    }
LABEL_37:
    v33 = *(_DWORD *)(v32 + 40) & 0xFFFFFFFE;
    if (!(_DWORD)v33
      || (a4 = (JSC::Structure *)(16 * v33),
          16 * *(unsigned int *)(16 * v33 + 0x4C) != 16 * *(unsigned int *)(v24 + 76))
      || *(_QWORD **)(16 * v33 + 0x28) != v26)
    {
      v34 = JSC::JSObject::get((unsigned int *)v8, a2, *(_QWORD *)(*(_QWORD *)(v25 + 41952) + 2160), (uint64_t)a4, a5, a6, a7, a8);
      if ((v34 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v34 + 5) < 0x17u)
        return v23;
      return JSC::FunctionRareData::createInternalFunctionAllocationStructureFromBase((JSC::FunctionRareData *)v32, (JSC::VM *)v25, (JSC::JSGlobalObject *)v26, (JSC::JSObject *)v34, (JSC::Structure *)v24, v35);
    }
    return (uint64_t)a4;
  }
LABEL_82:
  v52 = JSC::JSObject::get((unsigned int *)v8, a2, *(_QWORD *)(*(_QWORD *)(v25 + 41952) + 2160), (uint64_t)a4, a5, a6, a7, a8);
  v59 = v52;
  if (*(_DWORD *)(v25 + 80))
  {
    v60 = (unsigned __int8 *)v52;
    v61 = *(_DWORD *)(v25 + 80);
    if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v25 + 64), 7u, v52, v53, v54, v55, v56, v57);
    v59 = (uint64_t)v60;
    if (*(_QWORD *)(v25 + 16))
      return 0;
  }
  a4 = (JSC::Structure *)v23;
  if (*(_BYTE *)(v26[256] + 4) == 2)
  {
    v62 = *(unsigned __int8 *)(v24 + 8);
    v63 = (v62 >> 1) & 7;
    if ((v62 & 0x10) != 0)
      v63 = ((v62 & 0xE) + 10) >> 1;
    v64 = *((_DWORD *)v26 + v63 + 213);
    if (v64)
      v65 = 16 * (v64 & 0xFFFFFFFE);
    else
      v65 = 0;
    a4 = (JSC::Structure *)v23;
    if (v65 == v24)
    {
      v66 = *((_DWORD *)v26 + ((v62 >> 1) & 7) + 223);
      if (v66)
        a4 = (JSC::Structure *)(16 * (v66 & 0xFFFFFFFE));
      else
        a4 = 0;
    }
  }
  if ((v59 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v59 + 5) >= 0x17u)
    return JSC::StructureCache::emptyStructureForPrototypeFromBaseStructure((JSC::StructureCache *)(v26 + 246), (JSC::JSGlobalObject *)v26, (JSC::JSObject *)v59, a4, v58);
  return (uint64_t)a4;
}

uint64_t *JSC::getConstructData(uint64_t *result, uint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    *(_BYTE *)result = 0;
  }
  else if (*(_BYTE *)(a2 + 5) == 26)
  {
    return JSC::JSFunction::getConstructData(result, (uint64_t *)a2, (JSC::JSCell *)a2);
  }
  else
  {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)
                                                         + 0x40))(a2);
  }
  return result;
}

uint64_t JSC::reflectObjectConstruct(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  JSC::ScopedArguments *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v28;
  JSC *v29;
  uint64_t v30;
  char *v31;
  int v32;
  _BYTE v33[8];
  uint64_t v34;
  char *v35;
  _OWORD v36[4];
  uint64_t v37;
  WTF *v38;
  uint64_t v39[3];
  JSC::VM *v40;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v40 = v4;
  if (*((_DWORD *)a2 + 8) == 1
    || (v6 = (WTF *)*((_QWORD *)a2 + 6), ((unint64_t)v6 & 0xFFFE000000000002) != 0)
    || *((unsigned __int8 *)v6 + 5) <= 0x16u
    || (JSC::getConstructData(v39, *((_QWORD *)a2 + 6)), !LOBYTE(v39[0])))
  {
    v28 = "Reflect.construct requires the first argument be a constructor";
    v29 = this;
    v30 = 63;
    return JSC::throwTypeError((unint64_t)v29, &v40, (uint64_t)v28, v30);
  }
  v38 = v6;
  v12 = *((int *)a2 + 8);
  if ((unint64_t)(v12 - 4) <= 0xFFFFFFFFFFFFFFFCLL)
  {
    v38 = (WTF *)*((_QWORD *)a2 + 8);
    if (JSC::JSValue::isConstructor((JSC::JSValue *)&v38))
    {
      v12 = *((int *)a2 + 8);
      goto LABEL_8;
    }
    v28 = "Reflect.construct requires the third argument be a constructor if present";
    v29 = this;
    v30 = 74;
    return JSC::throwTypeError((unint64_t)v29, &v40, (uint64_t)v28, v30);
  }
LABEL_8:
  v33[0] = 0;
  v34 = 0x800000000;
  v35 = (char *)v36 + 8;
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  if ((unint64_t)(v12 - 3) > 0xFFFFFFFFFFFFFFFDLL
    || (v13 = (JSC::ScopedArguments *)*((_QWORD *)a2 + 7), ((unint64_t)v13 & 0xFFFE000000000002) != 0)
    || *((unsigned __int8 *)v13 + 5) <= 0x16u)
  {
    v21 = JSC::throwTypeError((unint64_t)this, &v40, (uint64_t)"Reflect.construct requires the second argument be an object", 60);
  }
  else
  {
    JSC::forEachInArrayLike<JSC::reflectObjectConstruct(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0>(this, v13, (uint64_t)v33, v7, v8, v9, v10, v11, (int8x16_t)0);
    if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4, v14, v15, v16, v17, v18, v19, v20))
      goto LABEL_24;
    if (v33[0])
    {
      JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v40);
LABEL_24:
      v26 = 0;
      goto LABEL_15;
    }
    v31 = v35;
    v32 = v34;
    v21 = JSC::Interpreter::executeConstruct((JSC::VM *)(*((_QWORD *)this + 7) + 90560), v6, (unsigned __int8 *)v39, (uint64_t)&v31, v38, v18, v19, v20);
  }
  v26 = v21;
LABEL_15:
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v34, v22, v23, v24, v25, v18, v19, v20);
  return v26;
}

uint64_t JSC::reflectObjectDefineProperty(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  _QWORD *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  int v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  _QWORD *v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  JSC::VM *v61;
  unint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110[4];
  JSC::VM *v111;
  unsigned __int8 *v112;

  v9 = *((_QWORD *)this + 7);
  v111 = (JSC::VM *)v9;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v111, (uint64_t)"Reflect.defineProperty requires the first argument be an object", 64);
  v11 = *((_QWORD *)a2 + 6);
  if ((v11 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v11 + 5) <= 0x16u)
    return JSC::throwTypeError((unint64_t)this, &v111, (uint64_t)"Reflect.defineProperty requires the first argument be an object", 64);
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 2)
  {
    v12 = 10;
    goto LABEL_25;
  }
  v12 = *((_QWORD *)a2 + 7);
  if ((v12 & 0xFFFE000000000002) != 0)
  {
LABEL_25:
    v112 = (unsigned __int8 *)v12;
    if (*(_DWORD *)(v9 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v13 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 41952) + 8);
      if (!v13)
        goto LABEL_11;
      goto LABEL_9;
    }
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      v29 = *(unsigned __int8 *)(v12 + 5);
      if (v29 == 2)
        goto LABEL_28;
      if (v29 == 4)
      {
        v13 = *(WTF::StringImpl **)(v12 + 8);
        v42 = *(_DWORD *)v13;
        *(_DWORD *)v13 += 4;
        v14 = v42 + 2;
        if (v14)
          goto LABEL_10;
        v41 = v13;
LABEL_53:
        WTF::StringImpl::~StringImpl(v41, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
        goto LABEL_11;
      }
    }
    v12 = (uint64_t)JSC::JSValue::toStringSlowCase(&v112, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_28:
    if (*(_DWORD *)(v9 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v13 = 0;
      goto LABEL_11;
    }
    v13 = *(WTF::StringImpl **)(v12 + 8);
    v30 = *((_QWORD *)this + 7);
    if ((v13 & 1) == 0)
    {
      if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
      {
        v31 = *(WTF::StringImpl **)(v30 + 64768);
        if (v31 != v13)
        {
          *(_DWORD *)v13 += 2;
          *(_QWORD *)(v30 + 64768) = v13;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
            {
              WTF::StringImpl::~StringImpl(v31, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
            }
            else
            {
              *(_DWORD *)v31 -= 2;
            }
          }
          v32 = *(WTF::StringImpl **)(v12 + 8);
          if (v32)
          {
            if ((*((_BYTE *)v32 + 16) & 0x10) != 0)
            {
              *(_DWORD *)v32 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase((unint64_t)v32, a3, a4, a5, a6, a7, a8, (WTF *)v110);
              v32 = v110[0];
            }
          }
          v33 = *(WTF::StringImpl **)(v30 + 64776);
          *(_QWORD *)(v30 + 64776) = v32;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
            {
              WTF::StringImpl::~StringImpl(v33, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
            }
            else
            {
              *(_DWORD *)v33 -= 2;
            }
          }
        }
        if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
        {
          v34 = *(_DWORD **)(v30 + 64776);
          *v34 += 2;
          __dmb(0xAu);
          v35 = *(WTF::StringImpl **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v34;
          v110[0] = v35;
          v36 = (_QWORD *)(v30 + 808);
          v37 = *(unsigned int *)(v30 + 820);
          if ((_DWORD)v37 == *(_DWORD *)(v30 + 816))
          {
            v39 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v36, v37 + 1, (unint64_t)v110);
            v37 = *(unsigned int *)(v30 + 820);
            v38 = (WTF::StringImpl **)(*(_QWORD *)(v30 + 808) + 8 * v37);
            v35 = *v39;
          }
          else
          {
            v38 = (WTF::StringImpl **)(*v36 + 8 * v37);
            v39 = v110;
          }
          *v39 = 0;
          *v38 = v35;
          *(_DWORD *)(v30 + 820) = v37 + 1;
          v40 = v110[0];
          v110[0] = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
            {
              WTF::StringImpl::~StringImpl(v40, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
            }
            else
            {
              *(_DWORD *)v40 -= 2;
            }
          }
        }
        v13 = *(WTF::StringImpl **)(v30 + 64776);
      }
      goto LABEL_9;
    }
    JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, this);
    if (!*(_DWORD *)(v30 + 80))
      goto LABEL_46;
    v61 = (JSC::VM *)v30;
    goto LABEL_88;
  }
  if (*(_BYTE *)(v12 + 5) != 2)
  {
    v12 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 7), (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    goto LABEL_25;
  }
  v13 = *(WTF::StringImpl **)(v12 + 8);
  if ((v13 & 1) != 0)
  {
    JSC::JSRopeString::resolveRopeToAtomString(*((JSC::JSRopeString **)a2 + 7), this);
    if (!*(_DWORD *)(v9 + 80))
      goto LABEL_46;
    v61 = (JSC::VM *)v9;
LABEL_88:
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v61, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      v13 = 0;
      v41 = v110[0];
      v110[0] = 0;
      if (!v41)
        goto LABEL_11;
LABEL_48:
      if (*(_DWORD *)v41 != 2)
      {
        *(_DWORD *)v41 -= 2;
        goto LABEL_11;
      }
      goto LABEL_53;
    }
LABEL_46:
    v13 = v110[0];
    if (!v110[0])
      goto LABEL_11;
    *(_DWORD *)v110[0] += 2;
    v110[0] = 0;
    v41 = v13;
    goto LABEL_48;
  }
  if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
  {
    v51 = *(WTF::StringImpl **)(v9 + 64768);
    if (v51 != v13)
    {
      *(_DWORD *)v13 += 2;
      *(_QWORD *)(v9 + 64768) = v13;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
        {
          WTF::StringImpl::~StringImpl(v51, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
        }
        else
        {
          *(_DWORD *)v51 -= 2;
        }
      }
      v52 = *(WTF::StringImpl **)(v12 + 8);
      if (v52)
      {
        if ((*((_BYTE *)v52 + 16) & 0x10) != 0)
        {
          *(_DWORD *)v52 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase((unint64_t)v52, a3, a4, a5, a6, a7, a8, (WTF *)v110);
          v52 = v110[0];
        }
      }
      v53 = *(WTF::StringImpl **)(v9 + 64776);
      *(_QWORD *)(v9 + 64776) = v52;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2)
        {
          WTF::StringImpl::~StringImpl(v53, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v78, v79, v80, v81, v82, v83, v84, v85);
        }
        else
        {
          *(_DWORD *)v53 -= 2;
        }
      }
    }
    if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
    {
      v54 = *(_DWORD **)(v9 + 64776);
      *v54 += 2;
      __dmb(0xAu);
      v55 = *(WTF::StringImpl **)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v54;
      v110[0] = v55;
      v56 = (_QWORD *)(v9 + 808);
      v57 = *(unsigned int *)(v9 + 820);
      if ((_DWORD)v57 == *(_DWORD *)(v9 + 816))
      {
        v59 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v56, v57 + 1, (unint64_t)v110);
        v57 = *(unsigned int *)(v9 + 820);
        v58 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 808) + 8 * v57);
        v55 = *v59;
      }
      else
      {
        v58 = (WTF::StringImpl **)(*v56 + 8 * v57);
        v59 = v110;
      }
      *v59 = 0;
      *v58 = v55;
      *(_DWORD *)(v9 + 820) = v57 + 1;
      v60 = v110[0];
      v110[0] = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
        {
          WTF::StringImpl::~StringImpl(v60, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v62, v63, v64, v65, v66, v67, v68, v69);
        }
        else
        {
          *(_DWORD *)v60 -= 2;
        }
      }
    }
    v13 = *(WTF::StringImpl **)(v9 + 64776);
  }
LABEL_9:
  v14 = *(_DWORD *)v13 + 2;
LABEL_10:
  *(_DWORD *)v13 = v14;
LABEL_11:
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8)
    || ((memset(v110, 0, 24),
         v110[3] = (WTF::StringImpl *)14,
         (unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
      ? (v15 = 10)
      : (v15 = *((_QWORD *)a2 + 8)),
        LOBYTE(v112) = 0,
        !JSC::toPropertyDescriptor(this, v15, (uint64_t)v110, (const JSC::PropertyTable *)&v112, a5, a6, a7, a8, COERCE_DOUBLE(14))))
  {
    v19 = 0;
  }
  else if ((*(unsigned int (**)(uint64_t, JSC *, WTF::StringImpl *, WTF::StringImpl **, _QWORD))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x90))(v11, this, v13, v110, 0))
  {
    v19 = 7;
  }
  else
  {
    v19 = 6;
  }
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v16, v17, v18, a5, a6, a7, a8);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  return v19;
}

unint64_t JSC::reflectObjectGetOwnPropertyDescriptor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, const JSC::Identifier *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t OwnPropertyDescriptor;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  WTF::StringImpl *v43;
  _QWORD *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  JSC::VM *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  JSC::VM *v99;
  unsigned __int8 *v100;
  WTF::StringImpl *v101;

  v9 = *((_QWORD *)this + 7);
  v99 = (JSC::VM *)v9;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v99, (uint64_t)"Reflect.getOwnPropertyDescriptor requires the first argument be an object", 74);
  v10 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 6);
  if (((unint64_t)v10 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)v10 + 5) <= 0x16u)
    return JSC::throwTypeError((unint64_t)this, &v99, (uint64_t)"Reflect.getOwnPropertyDescriptor requires the first argument be an object", 74);
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 2)
  {
    v11 = 10;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 7);
    if ((v11 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v11 + 5) == 2)
      {
        v12 = *(WTF::StringImpl **)(v11 + 8);
        if ((v12 & 1) == 0)
        {
          if ((*((_BYTE *)v12 + 16) & 0x10) == 0)
          {
            v39 = *(WTF::StringImpl **)(v9 + 64768);
            if (v39 != v12)
            {
              *(_DWORD *)v12 += 2;
              *(_QWORD *)(v9 + 64768) = v12;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                {
                  WTF::StringImpl::~StringImpl(v39, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
                }
                else
                {
                  *(_DWORD *)v39 -= 2;
                }
              }
              v40 = *(WTF::StringImpl **)(v11 + 8);
              if (v40)
              {
                if ((*((_BYTE *)v40 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v40 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v40, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v101);
                  v40 = v101;
                }
              }
              v41 = *(WTF::StringImpl **)(v9 + 64776);
              *(_QWORD *)(v9 + 64776) = v40;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                {
                  WTF::StringImpl::~StringImpl(v41, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v74, v75, v76, v77, v78, v79, v80, v81);
                }
                else
                {
                  *(_DWORD *)v41 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
            {
              v42 = *(_DWORD **)(v9 + 64776);
              *v42 += 2;
              __dmb(0xAu);
              v43 = *(WTF::StringImpl **)(v11 + 8);
              *(_QWORD *)(v11 + 8) = v42;
              v101 = v43;
              v44 = (_QWORD *)(v9 + 808);
              v45 = *(unsigned int *)(v9 + 820);
              if ((_DWORD)v45 == *(_DWORD *)(v9 + 816))
              {
                v47 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)&v101);
                v45 = *(unsigned int *)(v9 + 820);
                v46 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 808) + 8 * v45);
                v43 = *v47;
              }
              else
              {
                v46 = (WTF::StringImpl **)(*v44 + 8 * v45);
                v47 = &v101;
              }
              *v47 = 0;
              *v46 = v43;
              *(_DWORD *)(v9 + 820) = v45 + 1;
              v48 = v101;
              v101 = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                {
                  WTF::StringImpl::~StringImpl(v48, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
                }
                else
                {
                  *(_DWORD *)v48 -= 2;
                }
              }
            }
            v12 = *(WTF::StringImpl **)(v9 + 64776);
          }
LABEL_9:
          *(_DWORD *)v12 += 2;
LABEL_10:
          v98 = v12;
          goto LABEL_11;
        }
        JSC::JSRopeString::resolveRopeToAtomString(*((JSC::JSRopeString **)a2 + 7), this);
        if (!*(_DWORD *)(v9 + 80))
          goto LABEL_37;
        v49 = (JSC::VM *)v9;
        goto LABEL_81;
      }
      v11 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 7), (JSC::VM **)this, (JSC::Structure *)2, (uint64_t)a4, a5, a6, a7, a8);
    }
  }
  v100 = (unsigned __int8 *)v11;
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v12 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 41952) + 8);
    if (!v12)
      goto LABEL_10;
    goto LABEL_9;
  }
  if ((v11 & 0xFFFE000000000002) == 0)
  {
    v29 = *(unsigned __int8 *)(v11 + 5);
    if (v29 == 2)
      goto LABEL_23;
    if (v29 == 4)
    {
      v12 = *(WTF::StringImpl **)(v11 + 8);
      v37 = *(_DWORD *)v12;
      *(_DWORD *)v12 += 4;
      v98 = v12;
      v38 = v37 + 2;
      if (v38)
      {
        *(_DWORD *)v12 = v38;
        goto LABEL_11;
      }
      v36 = v12;
      goto LABEL_61;
    }
  }
  v11 = (uint64_t)JSC::JSValue::toStringSlowCase(&v100, (uint64_t)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_23:
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v12 = 0;
LABEL_76:
    v98 = 0;
    goto LABEL_11;
  }
  v12 = *(WTF::StringImpl **)(v11 + 8);
  v30 = *((_QWORD *)this + 7);
  if ((v12 & 1) == 0)
  {
    if ((*((_BYTE *)v12 + 16) & 0x10) == 0)
    {
      if (*(WTF::StringImpl **)(v30 + 64768) != v12)
      {
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v30 + 64768), *(WTF::AtomStringImpl **)(v11 + 8), (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        v31 = *(WTF::StringImpl **)(v11 + 8);
        if (v31)
        {
          if ((*((_BYTE *)v31 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v31 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v31, a3, (uint64_t)a4, a5, a6, a7, a8, (WTF *)&v101);
            v31 = v101;
          }
        }
        v32 = *(WTF::StringImpl **)(v30 + 64776);
        *(_QWORD *)(v30 + 64776) = v31;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
          {
            WTF::StringImpl::~StringImpl(v32, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
          }
          else
          {
            *(_DWORD *)v32 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 16) & 0x10) == 0)
      {
        v33 = *(_DWORD **)(v30 + 64776);
        *v33 += 2;
        __dmb(0xAu);
        v34 = *(WTF::StringImpl **)(v11 + 8);
        *(_QWORD *)(v11 + 8) = v33;
        v101 = v34;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v30 + 192, (unint64_t)&v101);
        v35 = v101;
        v101 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
          {
            WTF::StringImpl::~StringImpl(v35, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v66, v67, v68, v69, v70, v71, v72, v73);
          }
          else
          {
            *(_DWORD *)v35 -= 2;
          }
        }
      }
      v12 = *(WTF::StringImpl **)(v30 + 64776);
    }
    goto LABEL_9;
  }
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v11, this);
  if (!*(_DWORD *)(v30 + 80))
  {
LABEL_37:
    v12 = v101;
    if (v101)
    {
      *(_DWORD *)v101 += 2;
      v98 = v12;
      v101 = 0;
      v36 = v12;
      goto LABEL_39;
    }
    goto LABEL_76;
  }
  v49 = (JSC::VM *)v30;
LABEL_81:
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v49, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    goto LABEL_37;
  v12 = 0;
  v36 = v101;
  v98 = 0;
  v101 = 0;
  if (v36)
  {
LABEL_39:
    if (*(_DWORD *)v36 != 2)
    {
      *(_DWORD *)v36 -= 2;
      goto LABEL_11;
    }
LABEL_61:
    WTF::StringImpl::~StringImpl(v36, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
  }
LABEL_11:
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    OwnPropertyDescriptor = 0;
  }
  else
  {
    OwnPropertyDescriptor = JSC::objectConstructorGetOwnPropertyDescriptor(this, v10, &v98, a4);
  }
  v98 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::~StringImpl(v12, v13, v14, (uint64_t)a4, v15, v16, v17, v18);
      WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
    }
    else
    {
      *(_DWORD *)v12 -= 2;
    }
  }
  return OwnPropertyDescriptor;
}

uint64_t JSC::reflectObjectGetPrototypeOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  JSC::VM *v7;

  v7 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v7, (uint64_t)"Reflect.getPrototypeOf requires the first argument be an object", 64);
  v4 = *((_QWORD *)a2 + 6);
  if ((v4 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v4 + 5) <= 0x16u)
    return JSC::throwTypeError((unint64_t)this, &v7, (uint64_t)"Reflect.getPrototypeOf requires the first argument be an object", 64);
  if ((*(_WORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0xC) & 0x800) == 0)
  {
    v5 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x30);
    if (!v5)
      return *(_QWORD *)(v4 + 16);
    return v5;
  }
  return (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) + 0xB0))();
}

uint64_t JSC::reflectObjectIsExtensible(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  JSC::VM *v16;

  v4 = *((_QWORD *)this + 7);
  v16 = (JSC::VM *)v4;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v16, (uint64_t)"Reflect.isExtensible requires the first argument be an object", 62);
  v5 = *((_QWORD *)a2 + 6);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) <= 0x16u)
    return JSC::throwTypeError((unint64_t)this, &v16, (uint64_t)"Reflect.isExtensible requires the first argument be an object", 62);
  v6 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) + 0xA0))();
  if (*(_DWORD *)(v4 + 80))
  {
    v14 = *(_DWORD *)(v4 + 80);
    if ((v14 & 0x27) != 0 && (v14 & 0x20) == 0)
    {
      v15 = v6;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v7, v8, v9, v10, v11, v12);
      v6 = v15;
    }
    if (*(_QWORD *)(v4 + 16))
      return 0;
  }
  if (v6)
    return 7;
  return 6;
}

unint64_t JSC::reflectObjectOwnKeys(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  JSC::VM *v10;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v10, (uint64_t)"Reflect.ownKeys requires the first argument be an object", 57);
  v8 = *((_QWORD *)a2 + 6);
  if ((v8 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v8 + 5) <= 0x16u)
    return JSC::throwTypeError((unint64_t)this, &v10, (uint64_t)"Reflect.ownKeys requires the first argument be an object", 57);
  else
    return JSC::ownPropertyKeys((unint64_t)this, v8, 3, 0, a5, a6, a7, a8);
}

uint64_t JSC::reflectObjectPreventExtensions(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  int v15;
  JSC::VM *v16;

  v4 = *((_QWORD *)this + 7);
  v16 = (JSC::VM *)v4;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v16, (uint64_t)"Reflect.preventExtensions requires the first argument be an object", 67);
  v5 = *((_QWORD *)a2 + 6);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) <= 0x16u)
    return JSC::throwTypeError((unint64_t)this, &v16, (uint64_t)"Reflect.preventExtensions requires the first argument be an object", 67);
  v6 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) + 0x98))();
  if (*(_DWORD *)(v4 + 80))
  {
    v14 = *(_DWORD *)(v4 + 80);
    if ((v14 & 0x27) != 0 && (v14 & 0x20) == 0)
    {
      v15 = v6;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v7, v8, v9, v10, v11, v12);
      v6 = v15;
    }
    if (*(_QWORD *)(v4 + 16))
      return 0;
  }
  if (v6)
    return 7;
  return 6;
}

uint64_t JSC::reflectObjectSet(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  _QWORD *v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  WTF::StringImpl **v60;
  WTF::StringImpl *v61;
  JSC::VM *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  WTF::StringImpl *v103[2];
  int v104;
  int v105;
  uint64_t v106;
  JSC::VM *v107;
  unsigned __int8 *v108;

  v9 = *((_QWORD *)this + 7);
  v107 = (JSC::VM *)v9;
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::throwTypeError((unint64_t)this, &v107, (uint64_t)"Reflect.set requires the first argument be an object", 53);
  v11 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0 || *((unsigned __int8 *)v11 + 5) <= 0x16u)
    return JSC::throwTypeError((unint64_t)this, &v107, (uint64_t)"Reflect.set requires the first argument be an object", 53);
  if ((unint64_t)(*((int *)a2 + 8) - 1) < 2)
  {
    v12 = 10;
  }
  else
  {
    v12 = *((_QWORD *)a2 + 7);
    if ((v12 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v12 + 5) == 2)
      {
        v13 = *(WTF::StringImpl **)(v12 + 8);
        if ((v13 & 1) == 0)
        {
          if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
          {
            v52 = *(WTF::StringImpl **)(v9 + 64768);
            if (v52 != v13)
            {
              *(_DWORD *)v13 += 2;
              *(_QWORD *)(v9 + 64768) = v13;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                {
                  WTF::StringImpl::~StringImpl(v52, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v87, v88, v89, v90, v91, v92, v93, v94);
                }
                else
                {
                  *(_DWORD *)v52 -= 2;
                }
              }
              v53 = *(WTF::StringImpl **)(v12 + 8);
              if (v53)
              {
                if ((*((_BYTE *)v53 + 16) & 0x10) != 0)
                {
                  *(_DWORD *)v53 += 2;
                }
                else
                {
                  WTF::AtomStringImpl::addSlowCase((unint64_t)v53, a3, a4, a5, a6, a7, a8, (WTF *)v103);
                  v53 = v103[0];
                }
              }
              v54 = *(WTF::StringImpl **)(v9 + 64776);
              *(_QWORD *)(v9 + 64776) = v53;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                {
                  WTF::StringImpl::~StringImpl(v54, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
                }
                else
                {
                  *(_DWORD *)v54 -= 2;
                }
              }
            }
            if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
            {
              v55 = *(_DWORD **)(v9 + 64776);
              *v55 += 2;
              __dmb(0xAu);
              v56 = *(WTF::StringImpl **)(v12 + 8);
              *(_QWORD *)(v12 + 8) = v55;
              v103[0] = v56;
              v57 = (_QWORD *)(v9 + 808);
              v58 = *(unsigned int *)(v9 + 820);
              if ((_DWORD)v58 == *(_DWORD *)(v9 + 816))
              {
                v60 = (WTF::StringImpl **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v57, v58 + 1, (unint64_t)v103);
                v58 = *(unsigned int *)(v9 + 820);
                v59 = (WTF::StringImpl **)(*(_QWORD *)(v9 + 808) + 8 * v58);
                v56 = *v60;
              }
              else
              {
                v59 = (WTF::StringImpl **)(*v57 + 8 * v58);
                v60 = v103;
              }
              *v60 = 0;
              *v59 = v56;
              *(_DWORD *)(v9 + 820) = v58 + 1;
              v61 = v103[0];
              v103[0] = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                {
                  WTF::StringImpl::~StringImpl(v61, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
                }
                else
                {
                  *(_DWORD *)v61 -= 2;
                }
              }
            }
            v13 = *(WTF::StringImpl **)(v9 + 64776);
          }
          goto LABEL_9;
        }
        JSC::JSRopeString::resolveRopeToAtomString(*((JSC::JSRopeString **)a2 + 7), this);
        if (!*(_DWORD *)(v9 + 80))
          goto LABEL_44;
        v62 = (JSC::VM *)v9;
        goto LABEL_86;
      }
      v12 = JSC::JSCell::toPrimitive(*((_QWORD *)a2 + 7), (JSC::VM **)this, (JSC::Structure *)2, a4, a5, a6, a7, a8);
    }
  }
  v108 = (unsigned __int8 *)v12;
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v13 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 41952) + 8);
    if (v13)
    {
LABEL_9:
      v14 = *(_DWORD *)v13 + 2;
LABEL_10:
      *(_DWORD *)v13 = v14;
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  if ((v12 & 0xFFFE000000000002) == 0)
  {
    v35 = *(unsigned __int8 *)(v12 + 5);
    if (v35 == 2)
      goto LABEL_29;
    if (v35 == 4)
    {
      v13 = *(WTF::StringImpl **)(v12 + 8);
      v43 = *(_DWORD *)v13;
      *(_DWORD *)v13 += 4;
      v14 = v43 + 2;
      if (v14)
        goto LABEL_10;
      v42 = v13;
LABEL_51:
      WTF::StringImpl::~StringImpl(v42, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      goto LABEL_11;
    }
  }
  v12 = (uint64_t)JSC::JSValue::toStringSlowCase(&v108, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_29:
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v13 = 0;
    goto LABEL_11;
  }
  v13 = *(WTF::StringImpl **)(v12 + 8);
  v36 = *((_QWORD *)this + 7);
  if ((v13 & 1) == 0)
  {
    if ((*((_BYTE *)v13 + 16) & 0x10) == 0)
    {
      if (*(WTF::StringImpl **)(v36 + 64768) != v13)
      {
        WTF::Ref<WTF::StringImpl,WTF::RawPtrTraits<WTF::StringImpl>,WTF::DefaultRefDerefTraits<WTF::StringImpl>>::operator=((WTF::StringImpl **)(v36 + 64768), *(WTF::AtomStringImpl **)(v12 + 8), (uint64_t)a3, a4, a5, a6, a7, a8);
        v37 = *(WTF::StringImpl **)(v12 + 8);
        if (v37)
        {
          if ((*((_BYTE *)v37 + 16) & 0x10) != 0)
          {
            *(_DWORD *)v37 += 2;
          }
          else
          {
            WTF::AtomStringImpl::addSlowCase((unint64_t)v37, a3, a4, a5, a6, a7, a8, (WTF *)v103);
            v37 = v103[0];
          }
        }
        v38 = *(WTF::StringImpl **)(v36 + 64776);
        *(_QWORD *)(v36 + 64776) = v37;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
          {
            WTF::StringImpl::~StringImpl(v38, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v95, v96, v97, v98, v99, v100, v101, v102);
          }
          else
          {
            *(_DWORD *)v38 -= 2;
          }
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(v12 + 8) + 16) & 0x10) == 0)
      {
        v39 = *(_DWORD **)(v36 + 64776);
        *v39 += 2;
        __dmb(0xAu);
        v40 = *(WTF::StringImpl **)(v12 + 8);
        *(_QWORD *)(v12 + 8) = v39;
        v103[0] = v40;
        JSC::Heap::appendPossiblyAccessedStringFromConcurrentThreads(v36 + 192, (unint64_t)v103);
        v41 = v103[0];
        v103[0] = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
          {
            WTF::StringImpl::~StringImpl(v41, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
          }
          else
          {
            *(_DWORD *)v41 -= 2;
          }
        }
      }
      v13 = *(WTF::StringImpl **)(v36 + 64776);
    }
    goto LABEL_9;
  }
  JSC::JSRopeString::resolveRopeToAtomString((JSC::JSRopeString *)v12, this);
  if (!*(_DWORD *)(v36 + 80))
  {
LABEL_44:
    v13 = v103[0];
    if (!v103[0])
      goto LABEL_11;
    *(_DWORD *)v103[0] += 2;
    v103[0] = 0;
    v42 = v13;
LABEL_46:
    if (*(_DWORD *)v42 != 2)
    {
      *(_DWORD *)v42 -= 2;
      goto LABEL_11;
    }
    goto LABEL_51;
  }
  v62 = (JSC::VM *)v36;
LABEL_86:
  if (!JSC::VM::hasExceptionsAfterHandlingTraps(v62, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    goto LABEL_44;
  v13 = 0;
  v42 = v103[0];
  v103[0] = 0;
  if (v42)
    goto LABEL_46;
LABEL_11:
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v25 = 0;
  }
  else
  {
    v15 = *((int *)a2 + 8) - 1;
    v16 = v11;
    if (v15 >= 4)
      v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 9);
    v103[0] = 0;
    v103[1] = v16;
    v104 = -1;
    v105 = 0x1000000;
    v106 = 0;
    if (v15 < 3)
      v17 = 10;
    else
      v17 = *((_QWORD *)a2 + 8);
    if ((*(unsigned int (**)(WTF::StringImpl *, JSC *, WTF::StringImpl *, uint64_t, WTF::StringImpl **))(16 * *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) + 0x48))(v11, this, v13, v17, v103))
    {
      v25 = 7;
    }
    else
    {
      v25 = 6;
    }
  }
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  return v25;
}

uint64_t JSC::reflectObjectSetPrototypeOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  JSC *v9;
  uint64_t v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  JSC::VM *v21;

  v4 = *((_QWORD *)this + 7);
  v21 = (JSC::VM *)v4;
  v5 = *((int *)a2 + 8);
  if (v5 == 1 || (v6 = *((_QWORD *)a2 + 6), (v6 & 0xFFFE000000000002) != 0) || *(unsigned __int8 *)(v6 + 5) <= 0x16u)
  {
    v8 = "Reflect.setPrototypeOf requires the first argument be an object";
    v9 = this;
    v10 = 64;
    return JSC::throwTypeError((unint64_t)v9, &v21, (uint64_t)v8, v10);
  }
  if ((unint64_t)(v5 - 1) < 2)
    goto LABEL_8;
  v7 = *((_QWORD *)a2 + 7);
  if ((v7 & 0xFFFE000000000002) != 0)
  {
    if (v7 == 2)
      goto LABEL_12;
LABEL_8:
    v8 = "Reflect.setPrototypeOf requires the second argument be either an object or null";
    v9 = this;
    v10 = 80;
    return JSC::throwTypeError((unint64_t)v9, &v21, (uint64_t)v8, v10);
  }
  if (v7 != 2 && *(unsigned __int8 *)(v7 + 5) <= 0x16u)
    goto LABEL_8;
LABEL_12:
  v12 = (*(uint64_t (**)(void))(16 * *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) + 0xA8))();
  if (!*(_DWORD *)(v4 + 80))
    goto LABEL_13;
  v19 = *(_DWORD *)(v4 + 80);
  if ((v19 & 0x27) != 0 && (v19 & 0x20) == 0)
  {
    v20 = v12;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v4 + 64), 7u, v13, v14, v15, v16, v17, v18);
    v12 = v20;
  }
  if (*(_QWORD *)(v4 + 16))
    return 0;
LABEL_13:
  if (v12)
    return 7;
  return 6;
}

void JSC::forEachInArrayLike<JSC::reflectObjectConstruct(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0>(JSC::JSGlobalObject *a1, JSC::ScopedArguments *this, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t Index;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  JSC::JSObject *v22;
  int8x16_t v23;
  int v24;
  BOOL v25;
  JSC::JSObject *v26;
  uint64_t v27;
  JSC::JSObject *v28;
  int v29;
  double v30;
  double v31;
  double v32;
  int v33;
  int v34;
  int8x16_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  JSC::JSObject *v43;

  v12 = *((_QWORD *)a1 + 7);
  v13 = *((unsigned __int8 *)this + 5);
  if (v13 != 36)
  {
    if (v13 == 35)
    {
      if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x12) & 0x20) != 0)
      {
        v22 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), a4, a5, a6, a7, a8);
        v43 = v22;
        if (*(_DWORD *)(v12 + 80))
        {
          v34 = *(_DWORD *)(v12 + 80);
          if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v12 + 16))
            goto LABEL_66;
        }
        if ((unint64_t)v22 >= 0xFFFE000000000000)
          goto LABEL_29;
      }
      else
      {
        v26 = *(JSC::JSObject **)(*((_QWORD *)this + 1) - 16);
        v43 = v26;
        if ((unint64_t)v26 >= 0xFFFE000000000000)
        {
          v14 = v26 & ~((int)v26 >> 31);
          goto LABEL_4;
        }
      }
      v30 = JSC::JSValue::toIntegerOrInfinity(&v43, a1, a3, a4, a5, a6, a7, a8, a9);
      v31 = 9.00719925e15;
      if (v30 <= 9.00719925e15)
        v31 = v30;
      if (v30 > 0.0)
        v14 = (unint64_t)v31;
      else
        v14 = 0;
      goto LABEL_4;
    }
    if (v13 != 33)
    {
      if (v13 == 34)
      {
        v14 = JSC::ScopedArguments::length(this, a1, a3, a4, a5, a6, a7, a8);
        goto LABEL_4;
      }
      v22 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), a4, a5, a6, a7, a8);
      v43 = v22;
      if (*(_DWORD *)(v12 + 80))
      {
        v33 = *(_DWORD *)(v12 + 80);
        if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v12 + 16))
          goto LABEL_66;
      }
      if ((unint64_t)v22 >= 0xFFFE000000000000)
      {
LABEL_29:
        v14 = v22 & ~((int)v22 >> 31);
        goto LABEL_4;
      }
      v32 = JSC::JSValue::toIntegerOrInfinity(&v43, a1, a3, a4, a5, a6, a7, a8, v23);
      if (v32 > 0.0)
      {
        if (v32 > 9.00719925e15)
          v32 = 9.00719925e15;
        v14 = (unint64_t)v32;
        goto LABEL_4;
      }
LABEL_66:
      v14 = 0;
      goto LABEL_4;
    }
    v27 = *((_QWORD *)this + 5);
    if (!v27
      || qword_1ECF4C038
      && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
      && !((v27 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
    {
      LODWORD(v28) = *((_DWORD *)this + 8);
LABEL_47:
      v14 = v28;
      goto LABEL_4;
    }
    v28 = (JSC::JSObject *)JSC::JSObject::get((unsigned int *)this, (uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v12 + 41952) + 1768), a4, a5, a6, a7, a8);
    v43 = v28;
    if (!*(_DWORD *)(v12 + 80))
      goto LABEL_75;
    v41 = *(_DWORD *)(v12 + 80);
    if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v12 + 16))
    {
LABEL_75:
      if ((unint64_t)v28 >= 0xFFFE000000000000)
        goto LABEL_47;
      v36 = (unint64_t)v28 - 0x2000000000000;
      if ((unint64_t)v28 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase(&v43, a1, a3, a4, a5, a6, a7, a8, v35);
        v36 = v40;
      }
      v37 = (v36 >> 52) & 0x7FF;
      if ((v37 - 1023) <= 0x53)
      {
        v38 = v36 >> (51 - (v36 >> 52));
        if (v37 > 0x433)
          LODWORD(v38) = v36 << ((v36 >> 52) - 51);
        if (v37 >= 0x41F)
          v39 = v38;
        else
          v39 = (((1 << ((v36 >> 52) + 1)) - 1) & v38) + (1 << ((v36 >> 52) + 1));
        if ((v36 & 0x8000000000000000) == 0)
          LODWORD(v28) = v39;
        else
          LODWORD(v28) = -v39;
        goto LABEL_47;
      }
    }
    LODWORD(v28) = 0;
    goto LABEL_47;
  }
  if ((*((_BYTE *)this + 4) & 0xE) == 0)
  {
    if (*(_DWORD *)(v12 + 80))
    {
      v29 = *(_DWORD *)(v12 + 80);
      if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
    }
    return;
  }
  v14 = *(unsigned int *)(*((_QWORD *)this + 1) - 8);
LABEL_4:
  if (!*(_DWORD *)(v12 + 80))
  {
    if (!v14)
      return;
    goto LABEL_6;
  }
  v24 = *(_DWORD *)(v12 + 80);
  if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
    v25 = 1;
  else
    v25 = v14 == 0;
  if (!v25)
  {
LABEL_6:
    v15 = 0;
    do
    {
      Index = JSC::JSObject::getIndex(this, a1, v15, a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v12 + 80))
      {
        v21 = *(_DWORD *)(v12 + 80);
        if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
        {
          v42 = Index;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v17, a4, a5, a6, a7, a8);
          Index = v42;
        }
        if (*(_QWORD *)(v12 + 16))
          break;
      }
      v18 = *(unsigned int *)(a3 + 8);
      if ((_DWORD)v18 != *(_DWORD *)(a3 + 12)
        && ((v19 = *(_QWORD *)(a3 + 16), v19 != a3 + 32) ? (v20 = v19 == 0) : (v20 = 1), v20))
      {
        *(_QWORD *)(v19 + 8 * v18) = Index;
        *(_DWORD *)(a3 + 8) = v18 + 1;
      }
      else if (JSC::MarkedVectorBase::slowAppend(a3 + 8, Index, v17, a4, a5, a6, a7, a8) == 1)
      {
        *(_BYTE *)a3 = 1;
      }
      ++v15;
    }
    while (v14 != v15);
  }
}

void JSC::Yarr::YarrCodeBlock::~YarrCodeBlock(JSC::Yarr::YarrCodeBlock *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v9 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  v12 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v12, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
    }
  }
  v15 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
    }
  }
  v18 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      JSC::ExecutableMemoryHandle::~ExecutableMemoryHandle((JSC::ExecutableMemoryHandle *)v18, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
  }
  v21 = *((unsigned int *)this + 3);
  if ((_DWORD)v21)
  {
    v23 = *(unint64_t **)this;
    v24 = 8 * v21;
    do
    {
      v25 = *v23;
      *v23 = 0;
      if (v25)
        WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
      ++v23;
      v24 -= 8;
    }
    while (v24);
  }
  v22 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 <= v2)
    return 1;
  v6 = result;
  v7 = *(const void **)result;
  v8 = *(unsigned int *)(result + 12);
  if (v5 < 0x21)
  {
    v9 = (void *)(result + 16);
    *(_QWORD *)v6 = v6 + 16;
    *(_DWORD *)(v6 + 8) = 32;
    goto LABEL_11;
  }
  if (!(v5 >> 30))
  {
    v9 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(v6 + 8) = v5;
    *(_QWORD *)v6 = v9;
LABEL_11:
    memcpy(v9, v7, 4 * v8);
    if ((const void *)(v6 + 16) != v7 && v7)
    {
      if (*(const void **)v6 == v7)
      {
        *(_QWORD *)v6 = 0;
        *(_DWORD *)(v6 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v10, v11, v12, v13, v14, v15, v16);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

__int8 *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<WTF::String>,void>>(uint64_t a1, __int8 *a2, char *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int8 *result;
  __int16 v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  __int16 v27;
  _WORD *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  int8x16_t *v38;
  uint64_t v39;
  size_t v40;
  __int8 *v41;
  __int8 *v42;
  __int128 v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  char *v47;
  char *v48;
  char *v49;
  __int16 v50;
  __int8 *v51;
  __int8 *v52;
  unsigned __int128 v53;
  __int8 v54;
  int8x16x2_t v55;
  int8x16x2_t v56;
  int8x16x2_t v57;

  v11 = *(_DWORD *)(a1 + 16);
  v12 = a4[1];
  if (v12)
    v13 = *(_DWORD *)(v12 + 4);
  else
    v13 = 0;
  v14 = *(_DWORD *)(*a4 + 4);
  if (v14 <= v13)
    v14 = v13;
  if (v14 >= 0xFFFFFFFE)
    v15 = -1;
  else
    v15 = v14 + 2;
  v16 = __CFADD__(v15, v11);
  v17 = v15 + v11;
  if (v16)
    v18 = 0xFFFFFFFFLL;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a1 + 8);
  if ((v19 || (v19 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v19 + 16) & 4) == 0 || v12 && (*(_BYTE *)(v12 + 16) & 4) == 0)
  {
    result = (__int8 *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)a1, (WTF::AtomStringImpl *)v18, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
    {
      v21 = *a3;
      v23 = (unsigned __int8 *)*a4;
      v22 = a4[1];
      *(_WORD *)result = *a2;
      *((_WORD *)result + 1) = v21;
      v24 = v22 ? *(_DWORD *)(v22 + 4) : 0;
      v25 = *((_DWORD *)v23 + 1);
      v16 = v25 >= v24;
      v26 = v25 - v24;
      if ((_DWORD)v26 != 0 && v16)
      {
        v27 = *v23;
        v28 = result + 4;
        v29 = v26;
        do
        {
          *v28++ = v27;
          --v29;
        }
        while (v29);
      }
      else
      {
        v26 = 0;
      }
      if (v22)
      {
        result += 2 * v26 + 4;
        v38 = *(int8x16_t **)(v22 + 8);
        v39 = *(unsigned int *)(v22 + 4);
        if ((*(_BYTE *)(v22 + 16) & 4) != 0)
        {
          v41 = &result[2 * v39];
          if (v39 >= 0x40)
          {
            v42 = &result[2 * (v39 & 0xFFFFFFC0)];
            v43 = 0uLL;
            do
            {
              v55.val[0] = *v38;
              v44 = v38[1];
              v56.val[0] = v38[2];
              v45 = v38[3];
              v38 += 4;
              v46 = v45;
              v56.val[1] = 0uLL;
              v57.val[0] = v44;
              v55.val[1] = 0uLL;
              v47 = result;
              vst2q_s8(v47, v55);
              v47 += 32;
              v57.val[1] = 0uLL;
              vst2q_s8(v47, v57);
              v48 = result + 64;
              vst2q_s8(v48, v56);
              v49 = result + 96;
              vst2q_s8(v49, *(int8x16x2_t *)(&v43 - 1));
              result += 128;
            }
            while (result != v42);
            result = v42;
          }
          while (result != v41)
          {
            v50 = v38->u8[0];
            v38 = (int8x16_t *)((char *)v38 + 1);
            *(_WORD *)result = v50;
            result += 2;
          }
        }
        else if ((_DWORD)v39 == 1)
        {
          *(_WORD *)result = v38->i16[0];
        }
        else if ((_DWORD)v39)
        {
          v40 = 2 * v39;
          return (__int8 *)memcpy(result, v38, v40);
        }
      }
    }
  }
  else
  {
    result = (__int8 *)WTF::StringBuilder::extendBufferForAppending<unsigned char>(a1, (WTF::AtomStringImpl *)v18, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (result)
    {
      v30 = *a3;
      v32 = *a4;
      v31 = a4[1];
      *result = *a2;
      result[1] = v30;
      v33 = v31 ? *(_DWORD *)(v31 + 4) : 0;
      v34 = *(_DWORD *)(v32 + 4);
      v16 = v34 >= v33;
      v35 = v34 - v33;
      if ((_DWORD)v35 != 0 && v16)
      {
        v36 = result + 2;
        v37 = v35;
        do
        {
          *v36++ = *(_BYTE *)v32;
          --v37;
        }
        while (v37);
      }
      else
      {
        v35 = 0;
      }
      if (v31)
      {
        result += v35 + 2;
        v38 = *(int8x16_t **)(v31 + 8);
        v40 = *(unsigned int *)(v31 + 4);
        if ((*(_BYTE *)(v31 + 16) & 4) != 0)
        {
          if ((_DWORD)v40 == 1)
          {
            *result = v38->i8[0];
          }
          else if ((_DWORD)v40)
          {
            return (__int8 *)memcpy(result, v38, v40);
          }
        }
        else
        {
          v51 = &result[v40];
          if (v40 >= 0x10)
          {
            v52 = &result[v40 & 0xFFFFFFF0];
            do
            {
              v53 = (unsigned __int128)vld2q_s8(v38->i8);
              v38 += 2;
              *(_OWORD *)result = v53;
              result += 16;
            }
            while (result != v52);
            result = v52;
          }
          while (result != v51)
          {
            v54 = v38->i8[0];
            v38 = (int8x16_t *)((char *)v38 + 2);
            *result++ = v54;
          }
        }
      }
    }
  }
  return result;
}

JSC::JSObject *JSC::getRegExpStructure(JSC::JSGlobalObject *,JSC::JSValue)::{lambda(void)#1}::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSGlobalObject **v13;
  JSC::InternalFunction *v14;
  int v15;
  JSC::JSObject *v16;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  JSC::VM *v24;

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v24 = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v12 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v20 = a1;
    v22 = v8;
    if (*(_QWORD *)(v10 + 24) == 2)
      break;
    v10 = *(_QWORD *)(v10 + 16);
  }
  JSC::throwTypeError(v9, &v24, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v12 = 0;
  a1 = v20;
  v8 = v22;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v19 = v12;
      v21 = a1;
      v23 = v8;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v12 = v19;
      a1 = v21;
      v8 = v23;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v13 = (JSC::JSGlobalObject **)a1[2];
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(_DWORD *)(v12 + 976);
  if (v15)
    v16 = (JSC::JSObject *)(16 * (v15 & 0xFFFFFFFE));
  else
    v16 = 0;
  return JSC::InternalFunction::createSubclassStructure(v14, *v13, v16, a4, a5, a6, a7, a8);
}

uint64_t WTF::dataLog<char [21],WTF::CString,char [2],WTF::CString,char [18],JSC::BytecodeIndex,char [13],JSC::SpeculationDump,char [14],JSC::SpeculationDump,char [2],char [2]>(_QWORD *a1, _QWORD *a2, JSC::BytecodeIndex *a3, WTF::PrintStream **a4, WTF::PrintStream **a5)
{
  unint64_t v10;
  uint64_t v11;
  WTF::PrintStream *v12;
  const char *v13;
  const char *v14;
  char v16;
  char **v17;
  char *v18;

  v10 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v10 != -1)
  {
    v18 = &v16;
    v17 = &v18;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v11 = WTF::s_file;
  v12 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v12, "%s", "getPrediction name:(");
  if (*a1)
    v13 = (const char *)(*a1 + 16);
  else
    v13 = 0;
  WTF::PrintStream::printf(v12, "%s", v13);
  WTF::PrintStream::printf(v12, "%s", "#");
  if (*a2)
    v14 = (const char *)(*a2 + 16);
  else
    v14 = 0;
  WTF::PrintStream::printf(v12, "%s", v14);
  WTF::PrintStream::printf(v12, "%s", "),bytecodeIndex:(");
  JSC::BytecodeIndex::dump(a3, v12);
  WTF::PrintStream::printf(v12, "%s", "),original:(");
  JSC::dumpSpeculation(v12, *a4);
  WTF::PrintStream::printf(v12, "%s", "),generated:(");
  JSC::dumpSpeculation(v12, *a5);
  WTF::PrintStream::printf(v12, "%s", ")");
  WTF::PrintStream::printf(v12, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
}

uint64_t WTF::dataLog<char [38],WTF::String,char [3],char [2]>(WTF::PrintStream *a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  float v12;
  char v14;
  char **v15;
  char *v16;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Can't JIT this regular expression: \"/");
  WTF::printInternal(v4, a1, v5, v6, v7, v8, v9, v10, v11, v12);
  WTF::PrintStream::printf(v4, "%s", "/\"");
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

JSC::JSGlobalObject ***JSC::RegExp::matchInline<WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::{lambda(void)#1}::operator()(JSC::JSGlobalObject ***result)
{
  JSC::JSGlobalObject **v1;
  JSC::JSGlobalObject *v2;
  JSC::VM *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  JSC::Exception *v11;
  int v12;

  v1 = result[2];
  v2 = **result;
  if (v2)
  {
    v3 = (JSC::VM *)result[1];
    v4 = JSC::Yarr::errorToThrow(**result, *((unsigned __int8 *)v1 + 20));
    v11 = (JSC::Exception *)v4;
    if ((v4 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
    {
      v11 = (JSC::Exception *)JSC::Exception::create((uint64_t)v3, (JSC::VM *)v4, 0, v5, v6, v7, v8, v9);
    }
    result = (JSC::JSGlobalObject ***)JSC::VM::throwException(v3, v2, v11, v10, v5, v6, v7, v8, v9);
  }
  v12 = *((unsigned __int8 *)v1 + 20);
  if (v12 == 26 || v12 == 0)
  {
    *((_BYTE *)v1 + 16) = 3;
    *((_BYTE *)v1 + 20) = 0;
  }
  return result;
}

void WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  const void *v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  if (*(unsigned int *)(a1 + 12) >= a2 || (v3 = *(unsigned int *)(a1 + 8), v3 >= a2))
  {
LABEL_2:
    *(_DWORD *)(a1 + 12) = a2;
    return;
  }
  v15 = *(unsigned int *)(a1 + 12);
  v16 = (void *)a2;
  v4 = v3 + (v3 >> 2);
  if (v4 >= 0x10)
    v5 = v4 + 1;
  else
    v5 = 16;
  if (v5 <= a2)
    v5 = a2;
  if (!(v5 >> 30))
  {
    v6 = *(const void **)a1;
    v7 = v5;
    v8 = (void *)WTF::fastMalloc((WTF *)(4 * v5));
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)a1 = v8;
    memcpy(v8, v6, 4 * v15);
    LODWORD(a2) = (_DWORD)v16;
    if (v6)
    {
      if (*(const void **)a1 == v6)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v6, v16, v9, v10, v11, v12, v13, v14);
      LODWORD(a2) = (_DWORD)v16;
    }
    goto LABEL_2;
  }
  __break(0xC471u);
}

uint64_t JSC::RegExp::matchInline<(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int)::{lambda(void)#1}::operator()(JSC::JSGlobalObject ***a1)
{
  JSC::JSGlobalObject **v1;
  JSC::JSGlobalObject *v2;
  JSC::VM *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  JSC::Exception *v11;
  int v12;

  v1 = a1[2];
  v2 = **a1;
  if (v2)
  {
    v3 = (JSC::VM *)a1[1];
    v4 = JSC::Yarr::errorToThrow(**a1, *((unsigned __int8 *)v1 + 20));
    v11 = (JSC::Exception *)v4;
    if ((v4 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C)))
    {
      v11 = (JSC::Exception *)JSC::Exception::create((uint64_t)v3, (JSC::VM *)v4, 0, v5, v6, v7, v8, v9);
    }
    JSC::VM::throwException(v3, v2, v11, v10, v5, v6, v7, v8, v9);
  }
  v12 = *((unsigned __int8 *)v1 + 20);
  if (v12 == 26 || v12 == 0)
  {
    *((_BYTE *)v1 + 16) = 3;
    *((_BYTE *)v1 + 20) = 0;
  }
  return -1;
}

void WTF::RobinHoodHashTable<JSC::RegExpKey,WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>>,WTF::DefaultHash<JSC::RegExpKey>,WTF::HashMap<JSC::RegExpKey,JSC::Weak<JSC::RegExp>,WTF::DefaultHash<JSC::RegExpKey>,WTF::HashTraits<JSC::RegExpKey>,WTF::HashTraits<JSC::Weak<JSC::RegExp>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::RegExpKey>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::rehash(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unint64_t v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  unsigned int *v38;
  WTF::StringImpl *v39;
  BOOL v40;
  int v41;
  char v42;
  uint64_t v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unsigned __int16 *v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  unint64_t v61;
  uint64_t *v62;
  WTF::AtomStringImpl *v63;
  char v64;
  int v65;
  WTF::StringImpl *v66;
  char *v67;
  WTF::AtomStringImpl **v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::AtomStringImpl *v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  WTF::AtomStringImpl *v101;
  unint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  WTF::AtomStringImpl *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  WTF *v121;

  v8 = a2;
  v10 = *(unsigned int *)(a1 + 8);
  v121 = *(WTF **)a1;
  v11 = WTF::fastZeroedMalloc(16 * a2, a2, a3, a4, a5, a6, a7, a8);
  v19 = v10;
  *(_QWORD *)a1 = v11;
  *(_DWORD *)(a1 + 8) = v8;
  v20 = (~(v11 << 32) + v11) ^ ((~(v11 << 32) + v11) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  *(_DWORD *)(a1 + 16) = (v22 >> 31) ^ v22;
  *(_BYTE *)(a1 + 20) = 0;
  if ((_DWORD)v10)
  {
    v23 = 0;
    v24 = (unint64_t)v121;
    v120 = v10;
    do
    {
      v25 = (unsigned __int16 *)(v24 + 16 * v23);
      v26 = v25;
      v27 = *(unsigned int *)(v25 + 1) | ((unint64_t)*((unsigned __int8 *)v25 + 6) << 32);
      v28 = (WTF::StringImpl *)(v27 & 0xFFFFFFFFFFLL);
      if (*v25)
        v29 = 0;
      else
        v29 = v28 == 0;
      if (!v29)
      {
        v30 = *(_DWORD *)(a1 + 8);
        v31 = *(unsigned int *)(a1 + 16);
        v32 = *(_DWORD *)((v27 & 0xFFFFFFFFFFLL) + 0x10);
        if (v32 < 0x100)
        {
          v81 = *(_DWORD *)(a1 + 8);
          v82 = *(unsigned int *)(a1 + 16);
          v33 = WTF::StringImpl::hashSlowCase(v28);
          v31 = v82;
          v30 = v81;
          v19 = v120;
          v24 = (unint64_t)v121;
        }
        else
        {
          v33 = v32 >> 8;
        }
        v34 = v30 - 1;
        v35 = (v33 ^ v31) & (v30 - 1);
        v36 = *(WTF **)a1;
        v37 = *(_QWORD *)a1 + 16 * v35;
        v38 = (unsigned int *)(v37 + 2);
        v39 = (WTF::StringImpl *)(*(unsigned int *)(v37 + 2) | ((unint64_t)*(unsigned __int8 *)(v37 + 6) << 32));
        if (*(_WORD *)v37)
          v40 = 0;
        else
          v40 = v39 == 0;
        if (!v40)
        {
          v56 = 0;
          do
          {
            v57 = *((_DWORD *)v39 + 4);
            if (v57 < 0x100)
            {
              v115 = v31;
              v117 = v30;
              v58 = WTF::StringImpl::hashSlowCase(v39);
              v31 = v115;
              v30 = v117;
              v19 = v120;
              v24 = (unint64_t)v121;
            }
            else
            {
              v58 = v57 >> 8;
            }
            v59 = (v35 + v30 - ((v58 ^ v31) & v34)) & v34;
            if (v56 > v59)
            {
              v61 = v24 + 16 * v23;
              v63 = *(WTF::AtomStringImpl **)(v61 + 8);
              v62 = (uint64_t *)(v61 + 8);
              v12 = v63;
              v13 = *v25;
              v14 = *(unsigned int *)(v25 + 1);
              v15 = *((unsigned __int8 *)v25 + 6);
              *(_DWORD *)(v25 + 1) = 0;
              *((_BYTE *)v25 + 6) = 0;
              *v62 = 0;
              *v25 = *(_WORD *)v37;
              v64 = *((_BYTE *)v38 + 4);
              v65 = *v38;
              *v38 = 0;
              *((_BYTE *)v38 + 4) = 0;
              v66 = (WTF::StringImpl *)(*(unsigned int *)(v25 + 1) | ((unint64_t)*((unsigned __int8 *)v25 + 6) << 32));
              *(_DWORD *)(v25 + 1) = v65;
              *((_BYTE *)v25 + 6) = v64;
              if (v66)
              {
                if (*(_DWORD *)v66 == 2)
                {
                  v116 = v31;
                  v118 = v30;
                  v114 = v59;
                  v113 = v12;
                  v112 = v13;
                  v110 = v15;
                  v111 = v14;
                  WTF::StringImpl::~StringImpl(v66, v12, v13, v14, v15, v16, v17, v18);
                  WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
                  v15 = v110;
                  v14 = v111;
                  v13 = v112;
                  v12 = v113;
                  v59 = v114;
                  v31 = v116;
                  v30 = v118;
                  v19 = v120;
                  v24 = (unint64_t)v121;
                }
                else
                {
                  *(_DWORD *)v66 -= 2;
                }
              }
              v67 = (char *)v36 + 16 * v35;
              v69 = *((_QWORD *)v67 + 1);
              v68 = (WTF::AtomStringImpl **)(v67 + 8);
              *v68 = 0;
              v70 = *v62;
              *v62 = v69;
              if (v70)
                *(_QWORD *)(v70 + 8) = 3;
              *(_WORD *)v37 = v13;
              v71 = (WTF::StringImpl *)(*v38 | ((unint64_t)*((unsigned __int8 *)v38 + 4) << 32));
              *v38 = v14;
              *((_BYTE *)v38 + 4) = (v14 | (unint64_t)(v15 << 32)) >> 32;
              if (v71)
              {
                if (*(_DWORD *)v71 == 2)
                {
                  v119 = v30;
                  v99 = v31;
                  v100 = v59;
                  v101 = v12;
                  WTF::StringImpl::~StringImpl(v71, v12, v13, v14, v15, v16, v17, v18);
                  WTF::fastFree(v102, v103, v104, v105, v106, v107, v108, v109);
                  v12 = v101;
                  v59 = v100;
                  v31 = v99;
                  v30 = v119;
                  v19 = v120;
                  v24 = (unint64_t)v121;
                }
                else
                {
                  *(_DWORD *)v71 -= 2;
                }
              }
              v72 = *v68;
              *v68 = v12;
              if (v72)
                *((_QWORD *)v72 + 1) = 3;
              v56 = v59;
            }
            v35 = ((_DWORD)v35 + 1) & v34;
            ++v56;
            v36 = *(WTF **)a1;
            v37 = *(_QWORD *)a1 + 16 * v35;
            v38 = (unsigned int *)(v37 + 2);
            v39 = (WTF::StringImpl *)(*(unsigned int *)(v37 + 2) | ((unint64_t)*(unsigned __int8 *)(v37 + 6) << 32));
            if (*(_WORD *)v37)
              v60 = 0;
            else
              v60 = v39 == 0;
          }
          while (!v60);
        }
        *(_WORD *)v37 = *v25;
        v41 = *(_DWORD *)(v25 + 1);
        v42 = *((_BYTE *)v25 + 6);
        *(_DWORD *)(v25 + 1) = 0;
        *((_BYTE *)v25 + 6) = 0;
        v44 = *(_DWORD *)(v37 + 2);
        v43 = v37 + 2;
        v45 = (WTF::StringImpl *)(v44 | ((unint64_t)*(unsigned __int8 *)(v43 + 4) << 32));
        *(_DWORD *)v43 = v41;
        *(_BYTE *)(v43 + 4) = v42;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
          {
            WTF::StringImpl::~StringImpl(v45, v12, v13, v14, v15, v16, v17, v18);
            WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
            v19 = v120;
            v24 = (unint64_t)v121;
          }
          else
          {
            *(_DWORD *)v45 -= 2;
          }
        }
        v46 = (char *)v36 + 16 * v35;
        v47 = v24 + 16 * v23;
        v48 = *(_QWORD *)(v47 + 8);
        *(_QWORD *)(v47 + 8) = 0;
        v49 = *((_QWORD *)v46 + 1);
        *((_QWORD *)v46 + 1) = v48;
        if (v49)
          *(_QWORD *)(v49 + 8) = 3;
      }
      v52 = *((_QWORD *)v25 + 1);
      v51 = v25 + 4;
      v50 = v52;
      if (v52)
      {
        *(_QWORD *)(v50 + 8) = 3;
        *v51 = 0;
      }
      v54 = *(_DWORD *)(v26 + 1);
      v53 = v26 + 1;
      v55 = (WTF::StringImpl *)(v54 | ((unint64_t)*((unsigned __int8 *)v53 + 4) << 32));
      *(_DWORD *)v53 = 0;
      *((_BYTE *)v53 + 4) = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
        {
          WTF::StringImpl::~StringImpl(v55, v12, v13, v14, v15, v16, v17, v18);
          WTF::fastFree(v73, v74, v75, v76, v77, v78, v79, v80);
          v19 = v120;
          v24 = (unint64_t)v121;
        }
        else
        {
          *(_DWORD *)v55 -= 2;
        }
      }
      ++v23;
    }
    while (v23 != v19);
  }
  else
  {
    v24 = (unint64_t)v121;
    if (!v121)
      return;
  }
  WTF::fastFree(v24, v12, v13, v14, v15, v16, v17, v18);
}

void WTF::GenericHashTraits<WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>>::assignToEmpty<WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>,WTF::KeyValuePair<JSC::RegExpKey,JSC::Weak<JSC::RegExp>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  char v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_WORD *)a1 = *(_WORD *)a2;
  v10 = *(_DWORD *)(a2 + 2);
  v11 = *(_BYTE *)(a2 + 6);
  *(_DWORD *)(a2 + 2) = 0;
  *(_BYTE *)(a2 + 6) = 0;
  v12 = a1 + 2;
  v13 = (WTF::StringImpl *)(*(unsigned int *)(a1 + 2) | ((unint64_t)*(unsigned __int8 *)(a1 + 6) << 32));
  *(_DWORD *)v12 = v10;
  *(_BYTE *)(v12 + 4) = v11;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl(v13, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
  }
  v14 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v15 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v14;
  if (v15)
    *(_QWORD *)(v15 + 8) = 3;
}

uint64_t JSC::RegExpGlobalData::getBackref(JSC::RegExpGlobalData *this, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t Index;
  uint64_t v24;
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v31;
  int v32;
  int v33;
  uint64_t **v34;
  WTF::AtomStringImpl *v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  BOOL hasExceptionsAfterHandlingTraps;
  char v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;

  v10 = *((_QWORD *)a2 + 7);
  v18 = JSC::RegExpCachedResult::lastResult(this, a2, a2, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v32 = *(_DWORD *)(v10 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((*(_BYTE *)(v18 + 4) & 0xE) == 0)
    return *(_QWORD *)(v10 + 41968);
  v20 = *(_QWORD *)(v18 + 8);
  if (*(_DWORD *)(v20 - 8) <= a3)
    return *(_QWORD *)(v10 + 41968);
  v50 = v18;
  v19.i64[0] = 0xFFFFFFFF00000000;
  v52 = 0xFFFFFFFF00000000;
  LOBYTE(v56) = 0;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v54 = 0;
  memset(v55, 0, 13);
  v53 = v18;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_74;
  v21 = *((_QWORD *)a2 + 7);
  v22 = *(unsigned __int8 *)(v18 + 5);
  if (v22 > 0x16)
  {
LABEL_6:
    Index = 10;
    while (1)
    {
      v24 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
      v25 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, _QWORD *))(16 * *(unsigned int *)(v24 + 0x4C)
                                                                                                  + 0x70))(v18, a2, a3, v51);
      if (*(_DWORD *)(v21 + 80))
      {
        v31 = *(_DWORD *)(v21 + 80);
        if ((v31 & 0x27) != 0 && (v31 & 0x20) == 0)
        {
          v48 = v25;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, (uint64_t)v12, v13, v14, v15, v16, v17);
          v25 = v48;
        }
        if (*(_QWORD *)(v21 + 16))
        {
LABEL_28:
          Index = 10;
          goto LABEL_20;
        }
      }
      if ((v25 & 1) != 0)
      {
        if (BYTE1(v55[1]) == 1)
        {
          Index = v51[0];
        }
        else if (BYTE1(v55[1]) == 2)
        {
          Index = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v51, a2, (uint64_t)v12, v13, v14, v15, v16, v17);
        }
        else
        {
          v34 = (uint64_t **)*((_QWORD *)a2 + 7);
          JSC::Identifier::from(v34, a3, v12, v13, v14, v15, v16, v17, (int **)&v60);
          Index = JSC::PropertySlot::customGetter((uint64_t)v51, (JSC::VM *)v34, v60);
          v36 = v60;
          v60 = 0;
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
            {
              WTF::StringImpl::~StringImpl(v36, v35, (uint64_t)v12, v13, v14, v15, v16, v17);
              WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
            }
            else
            {
              *(_DWORD *)v36 -= 2;
            }
          }
        }
        goto LABEL_20;
      }
      if (BYTE2(v55[1]) == 3)
      {
        if (BYTE4(v55[1]))
          goto LABEL_28;
        v27 = *(unsigned __int8 *)(v18 + 5);
        if (v27 == 61)
          goto LABEL_12;
      }
      else
      {
        v27 = *(unsigned __int8 *)(v18 + 5);
        if (v27 == 61)
        {
          if (BYTE2(v55[1]) == 1)
            goto LABEL_28;
          goto LABEL_12;
        }
      }
      if ((v27 - 39) <= 0xA
        && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v18, v26, (uint64_t)v12, v13, v14, v15, v16, v17) <= a3)
      {
        goto LABEL_28;
      }
LABEL_12:
      if ((*(_WORD *)(v24 + 12) & 0x800) == 0 || BYTE2(v55[1]) == 3)
      {
        v28 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x30);
        if (!v28)
          v28 = *(_QWORD *)(v18 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v49 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v18 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v18, a2);
        }
        else
        {
          v49 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x30);
          if (!v49)
            v49 = *(_QWORD *)(v18 + 16);
        }
        if (*(_DWORD *)(v21 + 80))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v21, v26, (uint64_t)v12, v13, v14, v15, v16, v17);
          v28 = v49;
          if (hasExceptionsAfterHandlingTraps)
            goto LABEL_28;
        }
        else
        {
          v28 = v49;
        }
      }
      if ((v28 & 0xFFFE000000000002) == 0)
      {
        v18 = v28;
        if (*(unsigned __int8 *)(v28 + 5) > 0x16u)
          continue;
      }
      goto LABEL_20;
    }
  }
  if (v22 != 2)
  {
LABEL_74:
    v46 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v50, (unint64_t)a2);
    if (v46)
    {
      v18 = v46;
      v21 = *((_QWORD *)a2 + 7);
      goto LABEL_6;
    }
LABEL_80:
    Index = 0;
    goto LABEL_20;
  }
  if ((v20 & 1) != 0)
    v45 = (_DWORD *)(v18 + 16);
  else
    v45 = (_DWORD *)(v20 + 4);
  if (*v45 <= a3
    || (Index = JSC::JSString::getIndex((JSC::JSString *)v18, a2, a3, v13, v14, v15, v16, v17, v19),
        *(_DWORD *)(v21 + 80))
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v21, v11, (uint64_t)v12, v13, v14, v15, v16, v17))
  {
    if (*(_DWORD *)(v21 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v21, v11, (uint64_t)v12, v13, v14, v15, v16, v17))
    {
      goto LABEL_80;
    }
    goto LABEL_74;
  }
  v51[0] = Index;
  LODWORD(v52) = 10;
  v54 = 0;
  BYTE1(v55[1]) = 1;
  if (*(_DWORD *)(v21 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v21, v11, (uint64_t)v12, v13, v14, v15, v16, v17))
  {
    Index = 0;
  }
LABEL_20:
  if (v57)
  {
    v29 = *(_DWORD *)(v56 + 4);
    if (!v29)
    {
      __break(0xC471u);
      JUMPOUT(0x198B96918);
    }
    *(_DWORD *)(v56 + 4) = v29 - 1;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v33 = *(_DWORD *)(v10 + 80);
    if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v12, v13, v14, v15, v16, v17);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (Index == 10)
    return *(_QWORD *)(v10 + 41968);
  return Index;
}

uint64_t JSC::RegExpGlobalData::getLastParen(JSC::RegExpGlobalData *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t Index;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  int v32;
  int v33;
  int v35;
  int v36;
  uint64_t **v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v45;
  WTF::AtomStringImpl *v46;
  WTF::StringImpl *v47;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  char v57;
  int v58;
  uint64_t v59;
  BOOL v60;
  char v61;
  int v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  unint64_t v68;
  _DWORD *v69;
  _DWORD *v70;
  _QWORD v71[2];
  uint64_t v72;
  char v73;
  int8x16_t **v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  uint64_t **v77;
  char v78;

  v10 = *((_QWORD *)a2 + 7);
  v17 = JSC::RegExpCachedResult::lastResult(this, a2, a2, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v35 = *(_DWORD *)(v10 + 80);
    if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v11, v12, v13, v14, v15, v16);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if ((*(_BYTE *)(v17 + 4) & 0xE) == 0)
    return *(_QWORD *)(v10 + 41968);
  v19 = *(_QWORD *)(v17 + 8);
  v20 = *(_DWORD *)(v19 - 8);
  if (v20 < 2)
    return *(_QWORD *)(v10 + 41968);
  v66 = v17;
  v21 = v20 - 1;
  v18.i64[0] = 0xFFFFFFFF00000000;
  v68 = 0xFFFFFFFF00000000;
  LOBYTE(v72) = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v70 = 0;
  memset(v71, 0, 13);
  v69 = (_DWORD *)v17;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_106;
  v22 = *((_QWORD *)a2 + 7);
  v23 = *(unsigned __int8 *)(v17 + 5);
  if (v23 > 0x16)
  {
LABEL_6:
    Index = 10;
    while (1)
    {
      v24 = 16 * (*(_DWORD *)v17 & 0xFFFFFFFE);
      v25 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, _QWORD *))(16 * *(unsigned int *)(v24 + 0x4C)
                                                                                                  + 0x70))(v17, a2, v21, v67);
      if (*(_DWORD *)(v22 + 80))
      {
        v28 = *(_DWORD *)(v22 + 80);
        if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
        {
          v64 = v25;
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, (uint64_t)v11, v12, v13, v14, v15, v16);
          v25 = v64;
        }
        if (*(_QWORD *)(v22 + 16))
          goto LABEL_49;
      }
      if ((v25 & 1) != 0)
      {
        if (BYTE1(v71[1]) == 1)
        {
          Index = v67[0];
        }
        else if (BYTE1(v71[1]) == 2)
        {
          Index = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)v67, a2, (uint64_t)v11, v12, v13, v14, v15, v16);
        }
        else
        {
          v37 = (uint64_t **)*((_QWORD *)a2 + 7);
          JSC::Identifier::from(v37, v21, v11, v12, v13, v14, v15, v16, (int **)&v76);
          v38 = (unint64_t)v70;
          v39 = *(_QWORD *)(16 * (*v70 & 0xFFFFFFFE) + 0x28);
          if ((v68 & 0x20) != 0)
            v38 = (unint64_t)v69;
          if (BYTE3(v71[1]) != 1)
            goto LABEL_83;
          if ((v38 & 0xFFFE000000000002) != 0)
            goto LABEL_109;
          v40 = *(unsigned int *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C);
          v41 = *(_DWORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x4C) != 0;
          v42 = 16 * v40;
          if ((_DWORD)v40)
            v43 = v74 == (int8x16_t **)v42;
          else
            v43 = 1;
          if (!v43)
          {
            do
            {
              v42 = *(_QWORD *)(v42 + 16);
              v41 = v42 != 0;
            }
            while ((int8x16_t **)v42 != v74 && v42 != 0);
          }
          if (!v41)
          {
LABEL_109:
            v77 = v37;
            v45 = JSC::throwDOMAttributeGetterTypeError(v39, (JSC::VM **)&v77, v74, v76);
          }
          else
          {
LABEL_83:
            v45 = ((uint64_t (*)(unint64_t))v67[0])(v39);
          }
          Index = v45;
          v47 = v76;
          v76 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
            {
              WTF::StringImpl::~StringImpl(v47, v46, (uint64_t)v11, v12, v13, v14, v15, v16);
              WTF::fastFree(v48, v49, v50, v51, v52, v53, v54, v55);
            }
            else
            {
              *(_DWORD *)v47 -= 2;
            }
          }
        }
        goto LABEL_49;
      }
      if (BYTE2(v71[1]) == 3)
      {
        if (BYTE4(v71[1]))
          goto LABEL_49;
        v26 = *(unsigned __int8 *)(v17 + 5);
        if (v26 == 61)
          goto LABEL_12;
      }
      else
      {
        v26 = *(unsigned __int8 *)(v17 + 5);
        if (v26 == 61)
        {
          if (BYTE2(v71[1]) == 1)
            goto LABEL_49;
          goto LABEL_12;
        }
      }
      if ((v26 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v17 + 40) & 7u) > 2)
        {
          LOBYTE(v77) = 0;
          v78 = 0;
          v30 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v17, (uint64_t)&v77, (uint64_t)v11, v12, v13, v14, v15, v16);
          v29 = v31 ? v30 : 0;
        }
        else
        {
          v29 = *(_QWORD *)(v17 + 24);
        }
        if (v29 <= v21)
          goto LABEL_49;
      }
LABEL_12:
      if ((*(_WORD *)(v24 + 12) & 0x800) == 0 || BYTE2(v71[1]) == 3)
      {
        v27 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x30);
        if (!v27)
          v27 = *(_QWORD *)(v17 + 16);
      }
      else
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v65 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)v17 & 0xFFFFFFFE)
                                                                                            + 0x4C)
                                                                          + 0xB0))(v17, a2);
        }
        else
        {
          v65 = *(_QWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x30);
          if (!v65)
            v65 = *(_QWORD *)(v17 + 16);
        }
        if (*(_DWORD *)(v22 + 80))
        {
          v32 = *(_DWORD *)(v22 + 80);
          if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, (uint64_t)v11, v12, v13, v14, v15, v16);
          v27 = v65;
          if (*(_QWORD *)(v22 + 16))
            goto LABEL_49;
        }
        else
        {
          v27 = v65;
        }
      }
      if ((v27 & 0xFFFE000000000002) == 0)
      {
        v17 = v27;
        if (*(unsigned __int8 *)(v27 + 5) > 0x16u)
          continue;
      }
      goto LABEL_49;
    }
  }
  if (v23 != 2)
    goto LABEL_106;
  if ((v19 & 1) != 0)
    v56 = (_DWORD *)(v17 + 16);
  else
    v56 = (_DWORD *)(v19 + 4);
  if (*v56 > v21)
  {
    Index = JSC::JSString::getIndex((JSC::JSString *)v17, a2, v21, v12, v13, v14, v15, v16, v18);
    if (!*(_DWORD *)(v22 + 80))
      goto LABEL_94;
    v62 = *(_DWORD *)(v22 + 80);
    if ((v62 & 0x27) != 0 && (v62 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, (uint64_t)v11, v12, v13, v14, v15, v16);
    if (!*(_QWORD *)(v22 + 16))
    {
LABEL_94:
      v67[0] = Index;
      LODWORD(v68) = 10;
      v70 = 0;
      v57 = 1;
      BYTE1(v71[1]) = 1;
      if (!*(_DWORD *)(v22 + 80))
        goto LABEL_49;
LABEL_95:
      v58 = *(_DWORD *)(v22 + 80);
      if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v22 + 64), 7u, (uint64_t)v11, v12, v13, v14, v15, v16);
      v59 = *(_QWORD *)(v22 + 16);
      v60 = v59 == 0;
      if (v59)
        v61 = 1;
      else
        v61 = v57;
      if (!v60)
        Index = 0;
      if ((v61 & 1) != 0)
        goto LABEL_49;
      goto LABEL_106;
    }
  }
  if (*(_DWORD *)(v22 + 80))
  {
    v57 = 0;
    goto LABEL_95;
  }
LABEL_106:
  v63 = JSC::JSValue::synthesizePrototype((JSC::JSValue *)&v66, (unint64_t)a2);
  if (v63)
  {
    v17 = v63;
    v22 = *((_QWORD *)a2 + 7);
    goto LABEL_6;
  }
  Index = 0;
LABEL_49:
  if (v73)
  {
    v33 = *(_DWORD *)(v72 + 4);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x198B96E78);
    }
    *(_DWORD *)(v72 + 4) = v33 - 1;
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v36 = *(_DWORD *)(v10 + 80);
    if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)v11, v12, v13, v14, v15, v16);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (Index == 10)
    return *(_QWORD *)(v10 + 41968);
  return Index;
}

unint64_t JSC::createEmptyRegExpMatchesArray(JSC *this, JSC::JSGlobalObject *a2, JSC::JSString *a3, JSC::RegExp *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t Slow;
  int32x2_t *v25;
  unint64_t *v26;
  unint64_t SlowCase;
  int v28;
  int v29;
  void *v30;
  int v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  v10 = *((_QWORD *)this + 7);
  v11 = (unint64_t *)(v10 + 41968);
  v44 = v10;
  v45 = v10;
  v46 = 0;
  v12 = 1016;
  if ((*((_WORD *)a3 + 9) & 1) == 0)
    v12 = 1012;
  v13 = *(_DWORD *)((char *)this + v12);
  if (v13)
    v14 = 16 * (v13 & 0xFFFFFFFE);
  else
    v14 = 0;
  v15 = (*((_DWORD *)a3 + 6) + 1);
  if (*(_BYTE *)(*((_QWORD *)this + 256) + 4) == 2)
  {
    v33 = JSC::JSArray::tryCreateUninitializedRestricted(&v44, (JSC::VM *)&v45, v14, v15, a5, a6, a7, a8);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x198B97418);
    }
    SlowCase = v33;
    JSC::JSObject::initializeIndexWithoutBarrier(v33, (uint64_t)&v44, 0, *v11);
    v29 = *((_DWORD *)a3 + 6);
    if (!v29)
    {
      v26 = *(unint64_t **)(SlowCase + 8);
      goto LABEL_31;
    }
    v26 = *(unint64_t **)(SlowCase + 8);
    if ((*(_BYTE *)(SlowCase + 4) & 0xFu) - 8 >= 2)
    {
      switch(*(_BYTE *)(SlowCase + 4) & 0xF)
      {
        case 3:
          __break(0xC471u);
          JUMPOUT(0x198B974E8);
        case 4:
        case 5:
          __break(0xC471u);
          JUMPOUT(0x198B974A8);
        case 6:
        case 7:
          __break(0xC471u);
          JUMPOUT(0x198B974C8);
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
          v30 = v26 + 3;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198B97508);
      }
      goto LABEL_27;
    }
LABEL_26:
    v30 = v26 + 1;
LABEL_27:
    if ((v29 + 1) > 2)
      v31 = v29 + 1;
    else
      v31 = 2;
    memset_pattern16(v30, &unk_199157480, 8 * (v31 - 1));
    goto LABEL_31;
  }
  if (v15 > 0x10000000)
    goto LABEL_44;
  v16 = *(unsigned __int16 *)(v14 + 24);
  if (v16 == 65534)
    goto LABEL_12;
  if (v16 == 0xFFFF)
    v16 = *(_DWORD *)(*(_QWORD *)(v14 + 64) + 84);
  if (v16 < 64)
  {
LABEL_12:
    v17 = 0;
  }
  else if ((v16 - 63) >= 5)
  {
    v18 = (v16 - 64) | ((v16 - 64) >> 1) | (((v16 - 64) | ((v16 - 64) >> 1)) >> 2);
    v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
    v17 = (v19 | HIWORD(v19)) + 1;
  }
  else
  {
    v17 = 4;
  }
  v20 = v17 + v15;
  v21 = 8 * v20;
  if (v20 > 0x3EB || (v22 = *(_QWORD *)(v10 + (((unint64_t)(v21 + 23) >> 1) & 0xFFFFFFFF8) + 6736)) == 0)
  {
    Slow = JSC::CompleteSubspace::tryAllocateSlow(v10 + 6648, (JSC *)v10, v21 + 8, (uint64_t)&v45, a5, a6, a7, a8);
    goto LABEL_20;
  }
  v23 = *(unsigned int *)(v22 + 60);
  Slow = *(_QWORD *)(v22 + 24);
  if (Slow < *(_QWORD *)(v22 + 32))
  {
    *(_QWORD *)(v22 + 24) = Slow + v23;
    goto LABEL_20;
  }
  Slow = *(_QWORD *)(v22 + 40);
  if ((Slow & 1) != 0)
  {
    v39 = *(_QWORD *)(v10 + (((unint64_t)(v21 + 23) >> 1) & 0xFFFFFFFF8) + 6736);
    JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    v40 = v39;
    v11 = (unint64_t *)(v10 + 41968);
    Slow = JSC::LocalAllocator::allocateSlowCase(v40, v10 + 192, v23, (uint64_t)&v45, 1, v41, v42, v43);
LABEL_20:
    if (Slow)
      goto LABEL_21;
LABEL_44:
    __break(0xC471u);
    JUMPOUT(0x198B9736CLL);
  }
  v35 = *(_QWORD *)(Slow + 8) ^ *(_QWORD *)(v22 + 48);
  *(_QWORD *)(v22 + 32) = Slow + HIDWORD(v35);
  *(_QWORD *)(v22 + 40) = Slow + (int)v35;
  *(_QWORD *)(v22 + 24) = Slow + v23;
LABEL_21:
  v25 = (int32x2_t *)(Slow + 8 * v17);
  *v25 = vdup_n_s32(v15);
  v26 = (unint64_t *)&v25[1];
  SlowCase = *(_QWORD *)(v10 + 37584);
  if (SlowCase < *(_QWORD *)(v10 + 37592))
  {
LABEL_22:
    *(_QWORD *)(v10 + 37584) = SlowCase + 16;
    goto LABEL_23;
  }
  SlowCase = *(_QWORD *)(v10 + 37600);
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 37608);
    *(_QWORD *)(v10 + 37592) = SlowCase + HIDWORD(v34);
    *(_QWORD *)(v10 + 37600) = SlowCase + (int)v34;
    goto LABEL_22;
  }
  JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 37560, v10 + 192, 16, (uint64_t)&v45, 0, v36, v37, v38);
LABEL_23:
  *(_DWORD *)SlowCase = 0;
  v28 = *(_DWORD *)(v14 + 8);
  *(_DWORD *)SlowCase = v14 >> 4;
  *(_DWORD *)(SlowCase + 4) = v28;
  *(_QWORD *)(SlowCase + 8) = v26;
  if (*(_BYTE *)(v10 + 755))
  {
    __dmb(0xAu);
    v26 = *(unint64_t **)(SlowCase + 8);
  }
  *v26 = *v11;
  v29 = *((_DWORD *)a3 + 6);
  if (v29)
    goto LABEL_26;
LABEL_31:
  *(v26 - 3) = (unint64_t)a2;
  *(v26 - 2) = 0xFFFE0000FFFFFFFFLL;
  *(v26 - 4) = 10;
  if ((*((_BYTE *)a3 + 18) & 1) != 0)
    *(v26 - 5) = 10;
  if (*(_BYTE *)(v44 + 755))
    __dmb(0xAu);
  if (v46)
    JSC::Heap::collectIfNecessaryOrDefer(v45 + 192, 0);
  return SlowCase;
}

unint64_t JSC::createStructureImpl(JSC *this, JSC::VM *a2, JSC::JSGlobalObject *a3, unsigned __int8 a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  int v24;

  v10 = (a3 >> 1) & 7;
  if ((a3 & 0x10) != 0)
    v10 = ((a3 & 0xEu) + 10) >> 1;
  v11 = *((_DWORD *)a2 + v10 + 223);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  v13 = JSC::Structure::addPropertyTransition(this, v12, *(_QWORD *)(*((_QWORD *)this + 5244) + 1552), 0, &v24, a5, a7, a8, a9);
  v18 = JSC::Structure::addPropertyTransition(this, v13, *(_QWORD *)(*((_QWORD *)this + 5244) + 1576), 0, &v24, v17, v14, v15, v16);
  return JSC::Structure::addPropertyTransition(this, v18, *(_QWORD *)(*((_QWORD *)this + 5244) + 1416), 0, &v24, v22, v19, v20, v21);
}

uint64_t JSC::createRegExpMatchesArrayWithIndicesStructure(JSC *this, JSC::VM *a2, JSC::JSGlobalObject *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  int v21;

  v10 = *((_DWORD *)a2 + 227);
  if (v10)
    v11 = 16 * (v10 & 0xFFFFFFFE);
  else
    v11 = 0;
  v12 = (char *)this + 41952;
  v13 = *(_QWORD *)(*((_QWORD *)this + 5244) + 1552);
  v21 = -1;
  if ((*(_BYTE *)(v11 + 19) & 8) != 0
    || (v14 = JSC::StructureTransitionTable::get((uint64_t *)(v11 + 80), v13, 0, 1)) == 0)
  {
    v14 = JSC::Structure::addNewPropertyTransition(this, (unsigned int **)v11, v13, 0, &v21, 0, 0, a9, a4);
  }
  v15 = *(_QWORD *)(*(_QWORD *)v12 + 1576);
  v21 = -1;
  if ((*(_BYTE *)(v14 + 19) & 8) != 0
    || (v16 = JSC::StructureTransitionTable::get((uint64_t *)(v14 + 80), v15, 0, 1)) == 0)
  {
    v16 = JSC::Structure::addNewPropertyTransition(this, (unsigned int **)v14, v15, 0, &v21, 0, 0, a9, a4);
  }
  v17 = *(_QWORD *)(*(_QWORD *)v12 + 1416);
  v21 = -1;
  if ((*(_BYTE *)(v16 + 19) & 8) != 0
    || (v18 = JSC::StructureTransitionTable::get((uint64_t *)(v16 + 80), v17, 0, 1)) == 0)
  {
    v18 = JSC::Structure::addNewPropertyTransition(this, (unsigned int **)v16, v17, 0, &v21, 0, 0, a9, a4);
  }
  v19 = *(_QWORD *)(*(_QWORD *)v12 + 1560);
  v21 = -1;
  if ((*(_BYTE *)(v18 + 19) & 8) != 0)
    return JSC::Structure::addNewPropertyTransition(this, (unsigned int **)v18, v19, 0, &v21, 0, 0, a9, a4);
  result = JSC::StructureTransitionTable::get((uint64_t *)(v18 + 80), v19, 0, 1);
  if (!result)
    return JSC::Structure::addNewPropertyTransition(this, (unsigned int **)v18, v19, 0, &v21, 0, 0, a9, a4);
  return result;
}

unint64_t JSC::createStructureWithIndicesImpl(JSC *this, JSC::VM *a2, JSC::JSGlobalObject *a3, unsigned __int8 a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  int v29;

  v10 = (a3 >> 1) & 7;
  if ((a3 & 0x10) != 0)
    v10 = ((a3 & 0xEu) + 10) >> 1;
  v11 = *((_DWORD *)a2 + v10 + 223);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  v13 = JSC::Structure::addPropertyTransition(this, v12, *(_QWORD *)(*((_QWORD *)this + 5244) + 1552), 0, &v29, a5, a7, a8, a9);
  v18 = JSC::Structure::addPropertyTransition(this, v13, *(_QWORD *)(*((_QWORD *)this + 5244) + 1576), 0, &v29, v17, v14, v15, v16);
  v23 = JSC::Structure::addPropertyTransition(this, v18, *(_QWORD *)(*((_QWORD *)this + 5244) + 1416), 0, &v29, v22, v19, v20, v21);
  return JSC::Structure::addPropertyTransition(this, v23, *(_QWORD *)(*((_QWORD *)this + 5244) + 1560), 0, &v29, v27, v24, v25, v26);
}

unint64_t JSC::createIndicesStructureImpl(JSC *this, JSC::VM *a2, JSC::JSGlobalObject *a3, unsigned __int8 a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v13;

  v9 = (a3 >> 1) & 7;
  if ((a3 & 0x10) != 0)
    v9 = ((a3 & 0xEu) + 10) >> 1;
  v10 = *((_DWORD *)a2 + v9 + 223);
  if (v10)
    v11 = 16 * (v10 & 0xFFFFFFFE);
  else
    v11 = 0;
  return JSC::Structure::addPropertyTransition(this, v11, *(_QWORD *)(*((_QWORD *)this + 5244) + 1416), 0, &v13, a5, a7, a8, a9);
}

uint64_t JSC::RegExpObject::put(JSC::JSCell *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v11;
  BOOL v12;
  void *v13;
  uint64_t v15;
  JSC::VM *v16;

  v11 = *(_QWORD *)(a2 + 56);
  v16 = (JSC::VM *)v11;
  if (*(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1760) != a3)
    return JSC::JSObject::put((unsigned __int8 *)a1, a2, a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8, a9);
  if ((*((_BYTE *)a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a5 + 20) & 1) != 0)
      JSC::throwTypeError(a2, &v16, (uint64_t)"Attempted to assign to readonly property.", 42);
    return 0;
  }
  if (*(JSC::JSCell **)(a5 + 8) != a1)
    return JSC::JSObject::definePropertyOnReceiver(a2, a3, a4, a5, a5, a6, a7, a8, a9);
  *((_QWORD *)a1 + 3) = a4;
  if (a4 && (a4 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v11 + 760) >= *((unsigned __int8 *)a1 + 7))
  {
    v15 = v11;
    JSC::Heap::writeBarrierSlowPath(v11 + 192, (unint64_t)a1);
    v11 = v15;
  }
  if (*(_DWORD *)(v11 + 80) && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  v12 = (*(_BYTE *)(a5 + 20) & 1) == 0;
  *(_BYTE *)(a5 + 21) = 4;
  if (v12)
    v13 = JSC::regExpObjectSetLastIndexSloppy;
  else
    v13 = JSC::regExpObjectSetLastIndexStrict;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 24) = v13;
  return 1;
}

uint64_t JSC::RegExpObject::deleteProperty(unsigned int *a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41952) + 1760) == a3)
    return 0;
  else
    return JSC::JSObject::deleteProperty(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::RegExpObject::getOwnPropertySlot(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v10;
  int v11;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  unsigned int v56;

  v10 = *(JSC::VM **)(a2 + 56);
  if (*(_QWORD *)(*((_QWORD *)v10 + 5244) + 1760) == a3)
  {
    if ((*(_QWORD *)(a1 + 16) & 1) != 0)
      v11 = 14;
    else
      v11 = 12;
    *(_QWORD *)a4 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a4 + 16) = v11;
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 1;
    return result;
  }
  if (!(a3 >> 4))
    goto LABEL_42;
  v15 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v15 + 0x20)) != 0)
    goto LABEL_42;
  v16 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v16)
  {
    v27 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v27 || *(_BYTE *)(v27 + 5) != 1 && *(_DWORD *)(v27 + 80) < 2u)
      goto LABEL_42;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v16)
      goto LABEL_42;
  }
  if (!*(_DWORD *)(v16 + 24))
    goto LABEL_42;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = v17 & 0xFFFFFFFFFFFFFFFELL;
  v19 = *(unsigned int *)(v16 + 8);
  v20 = *(_DWORD *)(a3 + 16);
  if ((v17 & 1) != 0)
  {
    if ((v20 & 0x20) != 0)
      v20 = *(_DWORD *)(a3 + 32);
    v21 = *(_DWORD *)(v16 + 12);
    v22 = (v20 >> 8) & *(_QWORD *)&v21;
    v23 = *(unsigned __int8 *)(v18 + v22);
    if (*(_BYTE *)(v18 + v22))
    {
      v24 = v18 + v19;
      v25 = 1;
      while (1)
      {
        v26 = *(_QWORD *)(v24 + 8 * (v23 - 1));
        if (a3 == (v26 & 0xFFFFFFFFFFFFLL))
          break;
        v22 = ((_DWORD)v22 + v25) & v21;
        v23 = *(unsigned __int8 *)(v18 + v22);
        ++v25;
        if (!*(_BYTE *)(v18 + v22))
          goto LABEL_42;
      }
      a6 = (v26 >> 16) & 0xFF00000000 | HIBYTE(v26);
      goto LABEL_24;
    }
LABEL_42:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v10, a3, a4) & 1) != 0)
    {
      return 1;
    }
    if (!a3)
      return 0;
    v38 = *(_DWORD *)(a3 + 16);
    if ((v38 & 0x20) != 0)
      return 0;
    v39 = *(_BYTE **)(a3 + 8);
    v40 = *(unsigned int *)(a3 + 4);
    if ((v38 & 4) != 0)
    {
      if ((_DWORD)v40)
      {
        v41 = *v39 - 48;
        if (v41 <= 9 && (v40 < 2 || *v39 != 48))
        {
          v54 = v39 + 1;
          v55 = v40 - 1;
          while (v55)
          {
            if (v41 > 0x19999999)
              goto LABEL_48;
            v56 = *v54 - 48;
            if (v56 > 9)
              goto LABEL_48;
            v42 = 0;
            v43 = 0;
            v44 = 0;
            v48 = __CFADD__(v56, 10 * v41);
            v41 = v56 + 10 * v41;
            ++v54;
            --v55;
            if (v48)
              goto LABEL_49;
          }
          goto LABEL_81;
        }
      }
    }
    else if ((_DWORD)v40)
    {
      v41 = *(unsigned __int16 *)v39 - 48;
      if (v41 <= 9 && (*(_WORD *)v39 != 48 || v40 <= 1))
      {
        v45 = (unsigned __int16 *)(v39 + 2);
        v46 = v40 - 1;
        while (v46)
        {
          if (v41 > 0x19999999)
            goto LABEL_48;
          v47 = *v45 - 48;
          if (v47 > 9)
            goto LABEL_48;
          v42 = 0;
          v43 = 0;
          v44 = 0;
          v48 = __CFADD__(v47, 10 * v41);
          v41 = v47 + 10 * v41;
          ++v45;
          --v46;
          if (v48)
            goto LABEL_49;
        }
LABEL_81:
        v42 = 0x100000000;
        if (v41 == -1)
        {
          v42 = 0;
          v43 = 0;
        }
        else
        {
          v43 = v41;
        }
        if (v41 == -1)
          v44 = 0;
        else
          v44 = v41 & 0xFFFFFF00;
LABEL_49:
        if ((v42 & 0x100000000) != 0)
          return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, (const WTF::StringImpl *)(v44 | v43), a4, a5, a6, a7, a8);
        return 0;
      }
    }
LABEL_48:
    v42 = 0;
    v43 = 0;
    v44 = 0;
    goto LABEL_49;
  }
  if ((v20 & 0x20) != 0)
    v20 = *(_DWORD *)(a3 + 32);
  v32 = *(_DWORD *)(v16 + 12);
  v33 = v32 & (v20 >> 8);
  v34 = *(_DWORD *)(v18 + 4 * v33);
  if (!v34)
    goto LABEL_42;
  v35 = v18 + 4 * v19;
  v36 = 1;
  while (1)
  {
    v37 = (v34 - 1);
    if (*(_QWORD *)(v35 + 16 * v37) == a3)
      break;
    v33 = (v33 + v36) & v32;
    v34 = *(_DWORD *)(v18 + 4 * v33);
    ++v36;
    if (!v34)
      goto LABEL_42;
  }
  a6 = *(unsigned int *)(v35 + 16 * v37 + 8) | ((unint64_t)*(unsigned __int8 *)(v35 + 16 * v37 + 12) << 32);
LABEL_24:
  if ((_DWORD)a6 == -1)
    goto LABEL_42;
  if ((int)a6 <= 63)
  {
    v28 = a1 + 16;
    v29 = a6 << 32;
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 8) - 8;
    v29 = 0x3F00000000 - (a6 << 32);
  }
  v30 = *(_QWORD *)(v28 + (v29 >> 29));
  if ((v30 & 0xFFFE000000000002) != 0)
    goto LABEL_30;
  v31 = *(unsigned __int8 *)(v30 + 5);
  if (v31 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v10, a4, v30, SHIDWORD(a6), a6);
    return 1;
  }
  if (v31 != 6)
  {
LABEL_30:
    *(_QWORD *)a4 = v30;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v49 = *(_DWORD *)(v15 + 16) & 3;
  v51 = *(_QWORD *)(v30 + 8);
  v50 = *(_QWORD *)(v30 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x4C)))
  {
    v53 = *(_QWORD *)(v30 + 24);
    v52 = *(_QWORD *)(v30 + 32);
    *(_QWORD *)a4 = v51;
    *(_QWORD *)(a4 + 8) = v50;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v49 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v53;
    *(_QWORD *)(a4 + 80) = v52;
  }
  else
  {
    *(_QWORD *)a4 = v51;
    *(_QWORD *)(a4 + 8) = v50;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v49 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

void JSC::RegExpObject::getOwnSpecialPropertyNames(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38[2];
  char v39;
  uint64_t v40;
  WTF::StringImpl *v41[7];

  if ((_DWORD)a4)
    return;
  v41[5] = v8;
  v41[6] = v9;
  v11 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 41952) + 1760);
  v41[0] = v11;
  if ((*((_BYTE *)v11 + 16) & 0x20) != 0)
  {
    if ((*((_BYTE *)a3 + 24) & 1) == 0 || *((_BYTE *)a3 + 25) && (*((_BYTE *)v11 + 36) & 4) != 0)
      return;
  }
  else if ((*((_BYTE *)a3 + 24) & 2) == 0)
  {
    return;
  }
  v12 = *(_QWORD *)a3;
  v13 = *(unsigned int *)(*(_QWORD *)a3 + 20);
  if (v13 <= 0x13)
  {
    if (!(_DWORD)v13)
      goto LABEL_9;
    v29 = *(WTF::StringImpl ***)(v12 + 8);
    while (*v29 != v11)
    {
      ++v29;
      if (!--v13)
        goto LABEL_9;
    }
  }
  else
  {
    v14 = *((_QWORD *)a3 + 1);
    if (!v14 || !*(_DWORD *)(v14 - 12))
    {
      v26 = *(uint64_t **)(v12 + 8);
      v27 = 8 * v13;
      do
      {
        v28 = *v26++;
        v40 = v28;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)a3 + 1, &v40, a4, a5, a6, a7, a8, (uint64_t)v38);
        v27 -= 8;
      }
      while (v27);
    }
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)a3 + 1, (uint64_t *)v41, a4, a5, a6, a7, a8, (uint64_t)v38);
    if (v39)
    {
      v11 = v41[0];
      v12 = *(_QWORD *)a3;
LABEL_9:
      JSC::Identifier::fromUid(v11, *((_QWORD *)a3 + 2), a3, a4, a5, a6, a7, a8, v38);
      v22 = *(unsigned int *)(v12 + 20);
      if ((_DWORD)v22 == *(_DWORD *)(v12 + 16))
      {
        WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(v12 + 8, (unint64_t)v38);
      }
      else
      {
        v23 = *(_QWORD *)(v12 + 8);
        v24 = v38[0];
        v38[0] = 0;
        *(_QWORD *)(v23 + 8 * v22) = v24;
        *(_DWORD *)(v12 + 20) = v22 + 1;
      }
      v25 = v38[0];
      v38[0] = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::~StringImpl(v25, v15, v16, v17, v18, v19, v20, v21);
          WTF::fastFree(v30, v31, v32, v33, v34, v35, v36, v37);
        }
        else
        {
          *(_DWORD *)v25 -= 2;
        }
      }
    }
  }
}

uint64_t JSC::RegExpObject::defineOwnProperty(JSC::JSObject *a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  uint64_t v13;
  int v15;
  const char *v16;
  JSC::JSGlobalObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  char v29;
  const WTF::StringImpl *v30;
  BOOL v31;
  double v32;
  double v33;
  int v34;
  int v35;
  uint64_t v36;
  char v37;
  int v38;
  JSC::VM *v39;

  v9 = a5;
  v13 = *((_QWORD *)a2 + 7);
  v39 = (JSC::VM *)v13;
  if (*(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1760) != a3)
    return JSC::JSObject::defineOwnProperty(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v15 = *(_DWORD *)(a4 + 28);
  if ((v15 & 4) != 0 && (*(_BYTE *)(a4 + 24) & 8) == 0)
  {
    if ((_DWORD)a5)
    {
      v16 = "Attempting to change configurable attribute of unconfigurable property.";
      v17 = a2;
      v18 = 72;
LABEL_15:
      JSC::throwTypeError((unint64_t)v17, &v39, (uint64_t)v16, v18);
    }
    return 0;
  }
  if ((v15 & 2) != 0 && (*(_BYTE *)(a4 + 24) & 4) == 0)
  {
    if (!(_DWORD)a5)
      return 0;
    v16 = "Attempting to change enumerable attribute of unconfigurable property.";
LABEL_14:
    v17 = a2;
    v18 = 70;
    goto LABEL_15;
  }
  if (*(_OWORD *)(a4 + 8) != 0)
  {
    if (!(_DWORD)a5)
      return 0;
    v16 = "Attempting to change access mechanism for an unconfigurable property.";
    goto LABEL_14;
  }
  if ((*((_BYTE *)a1 + 16) & 1) == 0)
  {
    if (*(_QWORD *)a4)
    {
      JSC::RegExpObject::setLastIndex((unint64_t)a1, (unint64_t)a2, *(_QWORD *)a4, 0);
      if (*(_DWORD *)(v13 + 80))
      {
        v34 = *(_DWORD *)(v13 + 80);
        if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v19, v20, v21, v22, v23, v24);
        if (*(_QWORD *)(v13 + 16))
          return 0;
      }
    }
    if ((*(_BYTE *)(a4 + 28) & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
      *((_QWORD *)a1 + 2) |= 1uLL;
    return 1;
  }
  if ((v15 & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) == 0)
  {
    if (!(_DWORD)a5)
      return 0;
    v16 = "Attempting to change writable attribute of unconfigurable property.";
    v17 = a2;
    v18 = 68;
    goto LABEL_15;
  }
  v25 = *(_QWORD *)a4;
  if (*(_QWORD *)a4)
  {
    v26 = *((_QWORD *)a1 + 3);
    if (v26 == v25)
    {
      if (!*(_DWORD *)(v13 + 80))
        return 1;
      v38 = *(_DWORD *)(v13 + 80);
      if ((v38 & 0x27) != 0 && (v38 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v25, a4, a5, a6, a7, a8);
      v36 = *(_QWORD *)(v13 + 16);
      return !v36;
    }
    if (v26 >> 49)
    {
      if (v25 >> 49)
      {
        v32 = (double)(int)v26;
        if (v26 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v32 = v26 - 0x2000000000000;
        v33 = (double)(int)v25;
        if (v25 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v33 = v25 - 0x2000000000000;
        v28 = *(_QWORD *)&v32 == *(_QWORD *)&v33;
        goto LABEL_34;
      }
    }
    else if (((v26 | v25) & 0xFFFE000000000002) == 0)
    {
      v27 = *(unsigned __int8 *)(v26 + 5);
      if (v27 == 2)
      {
        if (*(_BYTE *)(v25 + 5) == 2)
        {
          if ((*(_QWORD *)(v26 + 8) & 1) != 0
            || (v30 = *(const WTF::StringImpl **)(v25 + 8), (v30 & 1) != 0))
          {
            v31 = JSC::JSString::equalSlowCase((JSC::JSString *)v26, a2, (JSC::JSString *)v25, a4, a5, a6, a7, a8, (int8x16_t)a9);
          }
          else
          {
            v31 = WTF::equal(*(WTF **)(v26 + 8), v30, (const WTF::StringImpl *)v25);
          }
          goto LABEL_41;
        }
      }
      else if (v27 == 3 && *(_BYTE *)(v25 + 5) == 3)
      {
        v31 = JSC::JSBigInt::equals((JSC::JSBigInt *)v26, *(JSC::JSBigInt **)a4, (JSC::JSBigInt *)v25);
LABEL_41:
        v29 = v31;
LABEL_42:
        if (!*(_DWORD *)(v13 + 80))
        {
          if ((v29 & 1) != 0)
            return 1;
LABEL_44:
          if (!v9)
            return 0;
          v16 = "Attempting to change value of a readonly property.";
          v17 = a2;
          v18 = 51;
          goto LABEL_15;
        }
        v35 = *(_DWORD *)(v13 + 80);
        if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v25, a4, a5, a6, a7, a8);
        v36 = *(_QWORD *)(v13 + 16);
        if (v36)
          v37 = 1;
        else
          v37 = v29;
        if ((v37 & 1) == 0)
          goto LABEL_44;
        return !v36;
      }
      v28 = v26 == v25;
LABEL_34:
      v29 = v28;
      goto LABEL_42;
    }
    v29 = 0;
    goto LABEL_42;
  }
  return 1;
}

void JSC::RegExpObject::visitChildren(JSC::RegExpObject *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v20;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if ((v16 & 0xFFFFFFFFFFFFFFFCLL) == 0)
    goto LABEL_7;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)((v16 & 0xFFFFFFFFFFFFFFFCLL) - 79) & 1) != 0)
      goto LABEL_6;
  }
  else
  {
    v17 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_6:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_7;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v16 & 0xFFFFFFFFFFFFFFFCLL, 0, v11, v12, v13, v14, v15);
LABEL_7:
  v18 = *((_QWORD *)this + 3);
  if ((v18 & 0xFFFE000000000002) == 0 && v18 != 0)
  {
    if ((v18 & 8) != 0)
    {
      if ((*(_BYTE *)(v18 - 79) & 1) == 0)
        goto LABEL_20;
    }
    else
    {
      v20 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != v20)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000), v20, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v18 & 0xFFFFFFFFFFFFC000) + 8 * ((v18 >> 10) & 0xF) + 0x28) >> (v18 >> 4)) & 1) == 0)
        goto LABEL_20;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_20:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v18, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::RegExpObject::visitChildren(JSC::RegExpObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, unint64_t))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFFCLL);
    if ((*((_QWORD *)this + 3) & 0xFFFE000000000002) == 0)
      result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t JSC::RegExpObject::RegExpObject(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;

  v5 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v5;
  v6 = 2;
  if (a5)
    v6 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v6 | a4;
  *(_QWORD *)(result + 24) = 0xFFFE000000000000;
  return result;
}

{
  int v5;
  uint64_t v6;

  v5 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v5;
  v6 = 2;
  if (a5)
    v6 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = v6 | a4;
  *(_QWORD *)(result + 24) = 0xFFFE000000000000;
  return result;
}

BOOL JSC::regExpObjectSetLastIndexStrict(unint64_t a1, unint64_t a2, uint64_t a3)
{
  JSC::VM *v3;
  uint64_t v4;
  JSC::VM *v6;

  v3 = *(JSC::VM **)(a1 + 56);
  v6 = v3;
  v4 = *(_QWORD *)(a2 + 16);
  if ((v4 & 1) != 0)
  {
    JSC::throwTypeError(a1, &v6, (uint64_t)"Attempted to assign to readonly property.", 42);
  }
  else
  {
    *(_QWORD *)(a2 + 24) = a3;
    if (a3 && (a3 & 0xFFFE000000000002) == 0 && *((_DWORD *)v3 + 190) >= *(unsigned __int8 *)(a2 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v3 + 192, a2);
  }
  return (v4 & 1) == 0;
}

BOOL JSC::regExpObjectSetLastIndexSloppy(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  v3 = *(_QWORD *)(a2 + 16);
  if ((v3 & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 24) = a3;
    if (a3)
    {
      if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v4 + 760) >= *(unsigned __int8 *)(a2 + 7))
      {
        v6 = v3;
        JSC::Heap::writeBarrierSlowPath(v4 + 192, a2);
        LOBYTE(v3) = v6;
      }
    }
  }
  return (v3 & 1) == 0;
}

uint64_t JSC::RegExpObject::match(JSC::RegExpObject *this, JSC::JSGlobalObject *a2, JSC::JSString *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10)
{
  JSC::VM *v13;
  uint64_t v14;
  int **v15;
  JSC::VM *v16;
  JSC::JSObject *v17;
  int *v19;
  JSC::RegExp *v20;
  __int16 v21;
  JSC::VM *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v34;
  double v35;
  double v36;
  double v37;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::VM *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  JSC::JSObject *v49;

  v13 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v14 = *((_QWORD *)this + 2);
  v15 = (int **)((char *)a3 + 8);
  if ((*((_BYTE *)a3 + 8) & 1) != 0)
    v15 = JSC::JSRopeString::resolveRope((unint64_t)a3, a2, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*((_DWORD *)v13 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v13, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return -1;
  }
  v16 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v17 = (JSC::JSObject *)*((_QWORD *)this + 3);
  v49 = v17;
  if ((unint64_t)v17 >= 0xFFFE000000000000 && (int)v17 >= 0)
  {
    v19 = *v15;
    if (*v15)
      LODWORD(v19) = v19[1];
    if (v19 < v17)
      goto LABEL_36;
  }
  else
  {
    if ((unint64_t)v17 < 0xFFFE000000000000)
    {
      if ((unint64_t)v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v49, a2, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      else
        *(_QWORD *)&v37 = (char *)v17 - 0x2000000000000;
      HIDWORD(a10) = 0;
      v34 = trunc(v37 + 0.0);
    }
    else
    {
      v34 = (double)(int)v17;
    }
    if (*((_DWORD *)v16 + 20)
      && (v48 = v34,
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8), v34 = v48, hasExceptionsAfterHandlingTraps)|| (!*v15 ? (v35 = 0.0) : (LODWORD(a10) = (*v15)[1], v35 = (double)*(unint64_t *)&a10), v34 > v35))
    {
LABEL_36:
      LODWORD(v17) = -1;
      goto LABEL_12;
    }
    if (v34 <= 0.0)
      v34 = 0.0;
    LODWORD(v17) = v34;
  }
LABEL_12:
  if (*((_DWORD *)v13 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v13, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return -1;
  }
  v20 = (JSC::RegExp *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
  v21 = *(_WORD *)((v14 & 0xFFFFFFFFFFFFFFFCLL) + 18);
  if ((v21 & 2) != 0 || (v21 & 0x80) != 0)
  {
    if ((_DWORD)v17 == -1)
    {
      v49 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
      if ((*((_BYTE *)this + 16) & 1) != 0)
        JSC::throwTypeError((unint64_t)a2, &v49, (uint64_t)"Attempted to assign to readonly property.", 42);
      else
        *((_QWORD *)this + 3) = 0xFFFE000000000000;
      return -1;
    }
    v22 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v30 = JSC::RegExp::match(v20, a2, (const WTF::String *)v15, v17, a5, a6, a7, a8);
    v31 = v23;
    if (*((_DWORD *)v22 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v22, v23, v24, v25, v26, v27, v28, v29))
    {
      v31 = 0;
      v30 = -1;
    }
    else if (v30 != -1)
    {
      *((_QWORD *)a2 + 269) = v20;
      *((_QWORD *)a2 + 268) = a3;
      *((_QWORD *)a2 + 265) = v30;
      *((_QWORD *)a2 + 266) = v31;
      *((_BYTE *)a2 + 2136) = 0;
      if (*((_DWORD *)v22 + 190) >= *((unsigned __int8 *)a2 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v22 + 192, (unint64_t)a2);
    }
    if (*((_DWORD *)v13 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v13, v23, v24, v25, v26, v27, v28, v29))
      return -1;
    v49 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
    if ((*((_BYTE *)this + 16) & 1) != 0)
    {
      JSC::throwTypeError((unint64_t)a2, &v49, (uint64_t)"Attempted to assign to readonly property.", 42);
      return v30;
    }
    if (HIDWORD(v31))
    {
      v36 = (double)v31;
    }
    else
    {
      if ((v31 & 0x80000000) == 0)
      {
        v32 = v31 | 0xFFFE000000000000;
LABEL_24:
        *((_QWORD *)this + 3) = v32;
        return v30;
      }
      v36 = (double)v31;
    }
    v32 = *(_QWORD *)&v36 + 0x2000000000000;
    goto LABEL_24;
  }
  v39 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v30 = JSC::RegExp::match((JSC::RegExp *)(v14 & 0xFFFFFFFFFFFFFFFCLL), a2, (const WTF::String *)v15, 0, a5, a6, a7, a8);
  v47 = v40;
  if (*((_DWORD *)v39 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v39, v40, v41, v42, v43, v44, v45, v46))
    return -1;
  if (v30 != -1)
  {
    *((_QWORD *)a2 + 269) = v20;
    *((_QWORD *)a2 + 268) = a3;
    *((_QWORD *)a2 + 265) = v30;
    *((_QWORD *)a2 + 266) = v47;
    *((_BYTE *)a2 + 2136) = 0;
    if (*((_DWORD *)v39 + 190) >= *((unsigned __int8 *)a2 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v39 + 192, (unint64_t)a2);
  }
  return v30;
}

uint64_t JSC::RegExpObject::matchGlobal(JSC::RegExpObject *this, JSC::JSGlobalObject *a2, JSC::JSString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  int **v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int32x4_t v33;
  uint64_t v34;
  int v35;
  WTF::StringImpl *v36;
  unsigned __int8 v37;
  unint64_t SlowCase;
  uint64_t v39;
  char v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  JSC::VM *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  _BOOL8 v50;
  uint64_t v51;
  int v52;
  unint64_t *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  unsigned int v77;
  int v78;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  int v83;
  double v84;
  int v85;
  int *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  void *v92;
  unsigned __int8 *v93;
  int v94;
  int v95;
  unint64_t v97;
  void **v98;
  _DWORD *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  JSC::VM *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int v134;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::VM *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int32x4_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  JSC::VM *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t StatusReg;
  uint64_t v154;
  unint64_t *v155;
  int32x4_t v156;
  unint64_t *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  WTF::String *v162;
  _QWORD v163[2];
  uint64_t v164;
  __int128 v165;
  void *v166;
  uint64_t v167;
  JSC::JSGlobalObject **v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD v171[2];

  v10 = *((_QWORD *)a2 + 7);
  v11 = *((_QWORD *)this + 2);
  *(_QWORD *)&v165 = v10;
  if ((v11 & 1) != 0)
    JSC::throwTypeError((unint64_t)a2, (JSC::VM **)&v165, (uint64_t)"Attempted to assign to readonly property.", 42);
  else
    *((_QWORD *)this + 3) = 0xFFFE000000000000;
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v12 = (int **)((char *)a3 + 8);
  v158 = (char *)a3 + 8;
  if ((*((_BYTE *)a3 + 8) & 1) != 0)
    v12 = JSC::JSRopeString::resolveRope((unint64_t)a3, a2, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  v163[0] = a3;
  v163[1] = v12;
  v162 = (WTF::String *)v12;
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v13 = v11 & 0xFFFFFFFFFFFFFFFCLL;
  if ((*(_WORD *)((v11 & 0xFFFFFFFFFFFFFFFCLL) + 18) & 0x60) != 0)
  {
    v120 = *(_QWORD *)v162;
    if (*(_QWORD *)v162)
      LODWORD(v120) = *(_DWORD *)(v120 + 4);
    LODWORD(v168) = v120;
    *(_QWORD *)&v165 = v163;
    *((_QWORD *)&v165 + 1) = &v168;
    return JSC::collectMatches<operationRegExpMatchFastGlobalString::$_0>(v10, (unint64_t)a2, a3, v162, (JSC::RegExp *)(v11 & 0xFFFFFFFFFFFFFFFCLL), (_DWORD **)&v165, a7, a8);
  }
  v164 = v10;
  v14 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v22 = JSC::RegExp::match((JSC::RegExp *)v13, a2, v162, 0, a5, a6, a7, a8);
  v24 = v15;
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14, v15, v16, v17, v18, v19, v20, v21))
  {
    v24 = 0;
    v22 = -1;
  }
  else if (v22 != -1)
  {
    *((_QWORD *)a2 + 269) = v13;
    *((_QWORD *)a2 + 268) = a3;
    *((_QWORD *)a2 + 265) = v22;
    *((_QWORD *)a2 + 266) = v24;
    *((_BYTE *)a2 + 2136) = 0;
    if (*((_DWORD *)v14 + 190) >= *((unsigned __int8 *)a2 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v14 + 192, (unint64_t)a2);
  }
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v15, v16, v17, v18, v19, v20, v21))
  {
    return 0;
  }
  if (v22 == -1)
    return 2;
  v32 = JSC::constructEmptyArray((unint64_t)a2, 0, 0, 0, v18, v19, v20, v21, v23);
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v25, v26, v27, v28, v29, v30, v31))
  {
    return 0;
  }
  v34 = 0;
  v157 = (unint64_t *)(v10 + 39696);
  v155 = (unint64_t *)(v10 + 39432);
  v154 = v10 + 81168;
  v33.i64[0] = 17302016;
  v156 = v33;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while ((*(_BYTE *)(v32 + 4) & 0xE) == 0 || *(_DWORD *)(*(_QWORD *)(v32 + 8) - 8) >> 5 < 0xC35u)
  {
    v35 = v24 - v22;
    if ((_DWORD)v24 == (_DWORD)v22)
    {
      SlowCase = *(_QWORD *)(v10 + 41968);
      goto LABEL_39;
    }
    if ((_DWORD)v22)
      goto LABEL_20;
    v64 = *(_QWORD *)v158;
    if (*(_QWORD *)v158)
      LODWORD(v64) = *(_DWORD *)(v64 + 4);
    SlowCase = (unint64_t)a3;
    if ((_DWORD)v64 != v35)
    {
LABEL_20:
      if (v35 == 1)
      {
        v36 = *(WTF::StringImpl **)v158;
        if (!*(_QWORD *)v158 || *((_DWORD *)v36 + 1) <= v22)
        {
          v37 = 0;
          goto LABEL_24;
        }
        v134 = WTF::StringImpl::at(v36, v22);
        if (v134 <= 0xFF)
        {
          v37 = v134;
LABEL_24:
          SlowCase = *(_QWORD *)(v10 + 8 * v37 + 42216);
          v39 = (v34 + 1);
          v40 = *(_BYTE *)(v32 + 4);
          v41 = v40 & 0x1F;
          if (v41 - 4 >= 0xA)
            goto LABEL_25;
          goto LABEL_40;
        }
LABEL_31:
        if (*(_QWORD *)v158)
        {
          if ((*(_BYTE *)(*(_QWORD *)v158 + 16) & 4) != 0)
            v43 = 7;
          else
            v43 = 3;
        }
        else
        {
          v43 = 7;
        }
        SlowCase = *v155;
        if (*(_QWORD *)(v10 + 39432) >= *(_QWORD *)(v10 + 39440))
        {
          SlowCase = *(_QWORD *)(v10 + 39448);
          if ((SlowCase & 1) == 0)
          {
            v97 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39456);
            *(_QWORD *)(v10 + 39440) = SlowCase + HIDWORD(v97);
            *(_QWORD *)(v10 + 39448) = SlowCase + (int)v97;
            goto LABEL_36;
          }
          JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)v25, v26, v27, v28, v29, v30, v31);
          SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39408, v10 + 192, 32, 0, 0, v108, v109, v110);
        }
        else
        {
LABEL_36:
          *v155 = SlowCase + 32;
        }
        *(_DWORD *)SlowCase = *(_QWORD *)(v10 + 41512) >> 4;
        v33 = v156;
        *(_DWORD *)(SlowCase + 4) = v156.i32[0];
        *(_QWORD *)(SlowCase + 8) = v43;
        *(_DWORD *)(SlowCase + 16) = v35;
        *(_DWORD *)(SlowCase + 20) = (_DWORD)a3;
        *(_WORD *)(SlowCase + 24) = WORD2(a3);
        *(_WORD *)(SlowCase + 26) = v22;
        *(_DWORD *)(SlowCase + 28) = WORD1(v22);
        if (*(_BYTE *)(v10 + 755))
          __dmb(0xAu);
        goto LABEL_39;
      }
      if (v35 != 2)
        goto LABEL_31;
      v65 = *(WTF::StringImpl **)v158;
      if (*(_QWORD *)v158)
      {
        v66 = *((_DWORD *)v65 + 1);
        if (v66 > v22)
        {
          v67 = WTF::StringImpl::at(v65, v22);
          v65 = *(WTF::StringImpl **)v158;
          if (*(_QWORD *)v158)
          {
            v66 = *((_DWORD *)v65 + 1);
            goto LABEL_80;
          }
        }
        else
        {
          v67 = 0;
LABEL_80:
          v25 = (v22 + 1);
          if (v66 > v25)
            LODWORD(v65) = WTF::StringImpl::at(v65, v25);
          else
            LODWORD(v65) = 0;
        }
      }
      else
      {
        v67 = 0;
      }
      if ((v65 | v67) > 0x7F)
        goto LABEL_31;
      LOBYTE(v171[0]) = v67;
      BYTE1(v171[0]) = (_BYTE)v65;
      v168 = (JSC::JSGlobalObject **)v171;
      v169 = 2;
      v68 = ((v67 - 1640531527) << 16) ^ ((_DWORD)v65 << 11) ^ (v67 - 1640531527);
      v69 = (v68 + (v68 >> 11)) ^ (8 * (v68 + (v68 >> 11)));
      v70 = (v69 + (v69 >> 5)) ^ (4 * (v69 + (v69 >> 5)));
      v71 = ((v70 + (v70 >> 15)) ^ ((v70 + (v70 >> 15)) << 10)) & 0xFFFFFF;
      if (v71)
        v72 = v71;
      else
        v72 = 0x800000;
      LODWORD(v170) = v72;
      v73 = v72 & 0x1FF;
      v74 = *(_QWORD *)(v154 + 8 * v73);
      if (v74)
      {
        v75 = *(_QWORD *)(v74 + 8);
        v76 = (v75 & 1) != 0 ? 0 : (WTF::StringImpl *)v75;
        v77 = *((_DWORD *)v76 + 4);
        v78 = v77 < 0x100 ? WTF::StringImpl::hashSlowCase(v76) : v77 >> 8;
        if (v78 == v72 && WTF::equalInternal<unsigned char>((uint64_t)v76, (unint64_t)v171, 2))
        {
          SlowCase = *(_QWORD *)(v154 + 8 * v73);
          goto LABEL_39;
        }
      }
      if (v168)
      {
        if (v169)
        {
          if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
          {
            __clrex();
            goto LABEL_99;
          }
          if (__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
LABEL_99:
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
          v80 = *(_QWORD *)(StatusReg + 736);
          if (!v80)
            v80 = WTF::Thread::initializeCurrentTLS(0);
          WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v80 + 56), (uint64_t)&v168, v27, v28, v29, v30, v31, (uint64_t)&v165);
          v82 = (int *)(16 * *(unsigned int *)v165);
          if (!(_BYTE)v166)
            *v82 += 2;
          v83 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
          if (v83 == 1)
          {
            if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
              goto LABEL_115;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v26, v81, v28, v29, v30, v31);
        }
        else
        {
          v82 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
      }
      else
      {
        v82 = 0;
      }
LABEL_115:
      v85 = v82[4];
      v86 = v82;
      if ((v85 & 3) == 2)
      {
        v86 = v82;
        do
        {
          v86 = (int *)*((_QWORD *)v86 + 3);
          v85 = v86[4];
        }
        while ((v85 & 3) == 2);
      }
      if ((v85 & 8) != 0)
      {
        v87 = 0;
      }
      else
      {
        v86[4] = v85 | 8;
        v87 = (unint64_t)v86[1] << ((v85 & 4) == 0);
      }
      v88 = v10 + 39696;
      SlowCase = *v157;
      if (*(_QWORD *)(v10 + 39696) >= *(_QWORD *)(v10 + 39704))
      {
        SlowCase = *(_QWORD *)(v10 + 39712);
        if ((SlowCase & 1) != 0)
        {
          v152 = v87;
          JSC::sanitizeStackForVM((JSC *)v10, (JSC::VM *)v25, v26, v87, v28, v29, v30, v31);
          v133 = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v130, v131, v132);
          v87 = v152;
          v88 = v10 + 39696;
          SlowCase = v133;
        }
        else
        {
          v107 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39720);
          *(_QWORD *)(v10 + 39712) = SlowCase + (int)v107;
          *(_QWORD *)(v10 + 39704) = SlowCase + HIDWORD(v107);
          *v157 = SlowCase + 16;
          v88 = v10 + 39696;
        }
      }
      else
      {
        *v157 = SlowCase + 16;
      }
      *(_DWORD *)SlowCase = *(_QWORD *)(v88 + 1816) >> 4;
      v33 = v156;
      *(_DWORD *)(SlowCase + 4) = v156.i32[0];
      *(_QWORD *)(SlowCase + 8) = v82;
      if (*(_BYTE *)(v10 + 755))
        __dmb(0xAu);
      if (v87 >= 0x101)
        JSC::Heap::reportExtraMemoryAllocatedSlowCase(v10 + 192, 0, SlowCase, v87, v28, v29, v30, v31);
      *(_QWORD *)(v154 + 8 * v73) = SlowCase;
    }
LABEL_39:
    v39 = (v34 + 1);
    v40 = *(_BYTE *)(v32 + 4);
    v41 = v40 & 0x1F;
    if (v41 - 4 >= 0xA)
    {
LABEL_25:
      v42 = v41 > 3 || v41 == 2;
      if (v42 && (v40 & 0x10) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198B9971CLL);
      }
LABEL_29:
      JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength((JSC::JSObject *)v32, (unint64_t)a2, (JSC::VM *)v34, SlowCase, 0, 0, v30, v31, v33);
      goto LABEL_46;
    }
LABEL_40:
    v44 = *(_QWORD *)(v32 + 8);
    if (*(_DWORD *)(v44 - 4) <= v34)
      goto LABEL_29;
    v45 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v46 = v40 & 0xF;
    if ((v46 - 8) >= 2)
    {
      switch(v46)
      {
        case 0:
        case 1:
          JSC::JSObject::setIndexQuicklyForTypedArray(v32, v34, SlowCase);
          break;
        case 4:
        case 5:
          if (SlowCase > 0xFFFDFFFFFFFFFFFFLL)
            goto LABEL_42;
          JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)v32, v45, v34, SlowCase, v28, v29, v30, v31);
          break;
        case 6:
        case 7:
          if (SlowCase >> 49)
          {
            v84 = (double)(int)SlowCase;
            if (SlowCase <= 0xFFFDFFFFFFFFFFFFLL)
              *(_QWORD *)&v84 = SlowCase - 0x2000000000000;
            *(double *)(v44 + 8 * v34) = v84;
LABEL_112:
            if (*(_DWORD *)(v44 - 8) <= v34)
              *(_DWORD *)(v44 - 8) = v39;
          }
          else
          {
            JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)v32, v45, v34, SlowCase, v28, v29, v30, v31, *(double *)v33.i64);
          }
          break;
        case 10:
        case 11:
        case 12:
        case 13:
          v111 = v44 + 8 * v34;
          v151 = *(_QWORD *)(v111 + 16);
          *(_QWORD *)(v111 + 16) = SlowCase;
          if (SlowCase
            && (SlowCase & 0xFFFE000000000002) == 0
            && *((_DWORD *)v45 + 190) >= *(unsigned __int8 *)(v32 + 7))
          {
            JSC::Heap::writeBarrierSlowPath((uint64_t)v45 + 192, v32);
          }
          if (v151)
            break;
          ++*(_DWORD *)(v44 + 12);
          goto LABEL_112;
        default:
          __break(0xC471u);
          JUMPOUT(0x198B996E4);
      }
    }
    else
    {
LABEL_42:
      *(_QWORD *)(v44 + 8 * v34) = SlowCase;
      if (*(_DWORD *)(v44 - 8) <= v34)
        *(_DWORD *)(v44 - 8) = v39;
      if (SlowCase
        && (SlowCase & 0xFFFE000000000002) == 0
        && *((_DWORD *)v45 + 190) >= *(unsigned __int8 *)(v32 + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)v45 + 192, v32);
      }
    }
LABEL_46:
    if (*(_QWORD *)(v10 + 16))
      return 0;
    if (v24 == v22)
      LODWORD(v24) = v22 + 1;
    v47 = *((_QWORD *)a2 + 7);
    v171[0] = a2;
    v48 = *(_QWORD *)v162;
    if (*(_QWORD *)v162)
    {
      v49 = *(_DWORD *)(v48 + 16);
      v50 = (v49 & 4) == 0;
      v51 = *(_QWORD *)(v48 + 8);
      LODWORD(v48) = *(_DWORD *)(v48 + 4);
      v52 = (v49 >> 2) & 1;
    }
    else
    {
      v50 = 0;
      v51 = 0;
      LOBYTE(v52) = 1;
    }
    v53 = (unint64_t *)(v47 + 90552);
    v54 = *(unsigned __int8 *)(v13 + 16);
    if (v54 == 1)
    {
      v55 = *(_QWORD *)(v13 + 40);
      if (v50)
      {
        v89 = *(_QWORD *)(v55 + 72);
        if (v89 && *(_DWORD *)(v89 + 4))
        {
LABEL_55:
          v168 = (JSC::JSGlobalObject **)v171;
          v169 = v47;
          v170 = v13;
          goto LABEL_56;
        }
      }
      else
      {
        v56 = *(_QWORD *)(v55 + 56);
        if (v56 && *(_DWORD *)(v56 + 4))
          goto LABEL_55;
      }
    }
    else if (v54 == 2 || !*(_BYTE *)(v13 + 16))
    {
      goto LABEL_160;
    }
    *(_QWORD *)&v165 = v51;
    DWORD2(v165) = v48;
    BYTE12(v165) = v52;
    LOBYTE(v166) = 1;
    JSC::RegExp::compileMatchOnly(v13, v47, v50, &v165);
    v54 = *(unsigned __int8 *)(v13 + 16);
LABEL_160:
    v168 = (JSC::JSGlobalObject **)v171;
    v169 = v47;
    v170 = v13;
    if (v54 != 1)
    {
      if (v54)
        goto LABEL_170;
      goto LABEL_234;
    }
    v55 = *(_QWORD *)(v13 + 40);
LABEL_56:
    v57 = *(unsigned __int8 *)(v55 + 104);
    v166 = 0;
    v167 = 0;
    v58 = *(_QWORD *)(v47 + 8);
    *(_QWORD *)&v165 = v47;
    *((_QWORD *)&v165 + 1) = v58;
    *v53 = v13;
    if (!v57)
      goto LABEL_57;
    v90 = (unsigned __int8 *)(v47 + 93049);
    if (__ldaxr((unsigned __int8 *)(v47 + 93049)))
    {
      __clrex();
LABEL_136:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v90);
      goto LABEL_137;
    }
    if (__stxr(1u, v90))
      goto LABEL_136;
LABEL_137:
    v92 = *(void **)(v47 + 93056);
    if (!v92)
    {
      v92 = (void *)WTF::fastMalloc((WTF *)0x2000);
      bzero(v92, 0x2000uLL);
      v119 = *(_QWORD *)(v47 + 93056);
      *(_QWORD *)(v47 + 93056) = v92;
      if (v119)
      {
        WTF::fastFree(v119, v112, v113, v114, v115, v116, v117, v118);
        v92 = *(void **)(v47 + 93056);
      }
    }
    v166 = v92;
    LODWORD(v167) = 0x2000;
LABEL_57:
    v59 = *(_QWORD *)v162;
    if (!*(_QWORD *)v162)
    {
      v60 = 0;
      v61 = 0;
      goto LABEL_60;
    }
    if ((*(_BYTE *)(v59 + 16) & 4) != 0)
    {
      v60 = *(_QWORD *)(v59 + 8);
      v61 = *(unsigned int *)(v59 + 4);
LABEL_60:
      v62 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, __int128 *))(*(_QWORD *)(v13 + 40) + 48))(v60, v24, v61, 0, &v165);
      goto LABEL_61;
    }
    v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, __int128 *))(*(_QWORD *)(v13 + 40) + 64))(*(_QWORD *)(v59 + 8), v24, *(unsigned int *)(v59 + 4), 0, &v165);
LABEL_61:
    v22 = v62;
    v63 = v25;
    if (!v166)
      goto LABEL_62;
    v93 = (unsigned __int8 *)(v165 + 93049);
    v94 = __ldxr((unsigned __int8 *)(v165 + 93049));
    if (v94 != 1)
    {
      __clrex();
LABEL_148:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v93, 0, v26, v27, v28, v29, v30, v31);
      goto LABEL_62;
    }
    if (__stlxr(0, v93))
      goto LABEL_148;
LABEL_62:
    if (!HIDWORD(v167))
      *(_QWORD *)(v165 + 90552) = 0;
    if (v22 != -2)
      goto LABEL_65;
    JSC::RegExp::byteCodeCompileIfNecessary((JSC::RegExp *)v13, (JSC::VM *)v47);
    if (*(_BYTE *)(v13 + 16))
    {
LABEL_170:
      v98 = &v166;
      *(_QWORD *)&v165 = &v166;
      *((_QWORD *)&v165 + 1) = 32;
      v99 = *(_DWORD **)(v13 + 48);
      if (v99 && v99[5])
        v100 = *v99 + 2 * *(_DWORD *)(v13 + 24);
      else
        v100 = 2 * *(_DWORD *)(v13 + 24);
      v101 = v100 + 2;
      if ((v100 + 2) >= 0x21)
      {
        WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v165, v101);
        v98 = (void **)v165;
      }
      HIDWORD(v165) = v101;
      *v53 = v13;
      v102 = *(_QWORD *)v162;
      if (*(_QWORD *)v162)
      {
        v103 = *(_QWORD *)(v102 + 8);
        v104 = *(unsigned int *)(v102 + 4) | ((unint64_t)((*(_DWORD *)(v102 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v103 = 0;
        v104 = 0x100000000;
      }
      v105 = JSC::Yarr::interpret(*(_QWORD *)(v13 + 32), v103, v104, v24, (uint64_t)v98, v29, v30, v31);
      *v53 = 0;
      if ((v105 & 0x80000000) != 0)
      {
        v63 = 0;
        v22 = -1;
      }
      else
      {
        v22 = v105;
        v63 = *((unsigned int *)v98 + 1);
      }
      v106 = v165;
      if (&v166 != (void **)v165 && (_QWORD)v165)
      {
        *(_QWORD *)&v165 = 0;
        DWORD2(v165) = 0;
        WTF::fastFree(v106, (void *)v25, v26, v27, v28, v29, v30, v31);
      }
      goto LABEL_65;
    }
LABEL_234:
    v22 = JSC::RegExp::matchInline<(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int)::{lambda(void)#1}::operator()(&v168);
    v63 = v25;
    if (!*(_DWORD *)(v47 + 80))
      goto LABEL_268;
LABEL_65:
    v95 = *(_DWORD *)(v47 + 80);
    if ((v95 & 0x27) != 0 && (v95 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v47 + 64), 7u, v26, v27, v28, v29, v30, v31);
    if (*(_QWORD *)(v47 + 16))
    {
      v24 = 0;
      v22 = -1;
    }
    else
    {
LABEL_268:
      if (v22 != -1)
      {
        *((_QWORD *)a2 + 269) = v13;
        *((_QWORD *)a2 + 268) = a3;
        *((_QWORD *)a2 + 265) = v22;
        *((_QWORD *)a2 + 266) = v63;
        *((_BYTE *)a2 + 2136) = 0;
        if (*(_DWORD *)(v47 + 760) >= *((unsigned __int8 *)a2 + 7))
          JSC::Heap::writeBarrierSlowPath(v47 + 192, (unint64_t)a2);
      }
      v24 = v63;
    }
    if (*(_QWORD *)(v10 + 16))
      return 0;
    v34 = v39;
    if (v22 == -1)
      return v32;
  }
  v121 = -1;
  v159 = v22;
  v122 = v24;
  do
  {
    if ((*(_BYTE *)(v32 + 4) & 0xE) != 0)
      v123 = *(_DWORD *)(*(_QWORD *)(v32 + 8) - 8);
    else
      v123 = 0;
    ++v121;
    if ((v123 + v121) >= 0x10000001)
    {
      JSC::throwOutOfMemoryError(a2, (JSC::JSGlobalObject *)&v164);
      return 10;
    }
    if (v159 == v122)
      v124 = v122 + 1;
    else
      v124 = v122;
    v125 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v129 = JSC::RegExp::match((JSC::RegExp *)v13, a2, v162, v124, v28, v29, v30, v31);
    v122 = v126;
    if (*((_DWORD *)v125 + 20))
    {
      v160 = v129;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v125, v126, v127, v128, v28, v29, v30, v31);
      v129 = v160;
      if (hasExceptionsAfterHandlingTraps)
      {
        v122 = 0;
LABEL_229:
        v159 = -1;
        goto LABEL_226;
      }
    }
    if (v129 == -1)
      goto LABEL_229;
    *((_QWORD *)a2 + 269) = v13;
    *((_QWORD *)a2 + 268) = a3;
    v159 = v129;
    *((_QWORD *)a2 + 265) = v129;
    *((_QWORD *)a2 + 266) = v122;
    *((_BYTE *)a2 + 2136) = 0;
    if (*((_DWORD *)v125 + 190) >= *((unsigned __int8 *)a2 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v125 + 192, (unint64_t)a2);
LABEL_226:
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v126, v127, v128, v28, v29, v30, v31))
    {
      return 0;
    }
  }
  while (v159 != -1);
  while (1)
  {
    v136 = JSC::jsSubstringOfResolved((JSC *)v10, a3, (JSC::JSString *)v22, (v24 - v22), v28, v29, v30, v31);
    JSC::JSObject::putDirectIndex(v32, (unint64_t)a2, (JSC::VM *)v34, (unint64_t)v136, v137, v138, v139, v140, v141);
    if (*(_QWORD *)(v10 + 16))
      break;
    v146 = v24 == v22 ? v22 + 1 : v24;
    v147 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v22 = JSC::RegExp::match((JSC::RegExp *)v13, a2, v162, v146, v142, v143, v144, v145);
    v24 = v148;
    if (*((_DWORD *)v147 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v147, v148, v149, v150, v28, v29, v30, v31))
    {
      v24 = 0;
      v22 = -1;
    }
    else if (v22 != -1)
    {
      *((_QWORD *)a2 + 269) = v13;
      *((_QWORD *)a2 + 268) = a3;
      *((_QWORD *)a2 + 265) = v22;
      *((_QWORD *)a2 + 266) = v24;
      *((_BYTE *)a2 + 2136) = 0;
      if (*((_DWORD *)v147 + 190) >= *((unsigned __int8 *)a2 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v147 + 192, (unint64_t)a2);
    }
    if (*(_QWORD *)(v10 + 16))
      break;
    v34 = (v34 + 1);
    if (v22 == -1)
      return v32;
  }
  return 0;
}

void JSC::RegExpPrototype::finishCreation(JSC::RegExpPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  char *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::AtomStringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  WTF::StringImpl *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  WTF::StringImpl *v41;
  WTF::AtomStringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  WTF::StringImpl *v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::AtomStringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::AtomStringImpl *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::AtomStringImpl *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::AtomStringImpl *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  WTF::AtomStringImpl *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  WTF::AtomStringImpl *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  WTF::StringImpl *v126;
  WTF::AtomStringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::AtomStringImpl *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  JSC::BuiltinExecutables **v142;
  WTF::StringImpl *v143;
  WTF::AtomStringImpl *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  uint64_t matched;
  WTF::StringImpl *v153;
  uint64_t v154;
  double v155;
  float v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __n128 v168;
  WTF::AtomStringImpl *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  uint64_t v179;
  double v180;
  float v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __n128 v193;
  WTF::AtomStringImpl *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  WTF::StringImpl *v201;
  uint64_t v202;
  WTF::StringImpl *v203;
  uint64_t v204;
  double v205;
  float v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  WTF::StringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __n128 v218;
  WTF::AtomStringImpl *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  WTF::StringImpl *v226;
  uint64_t v227;
  WTF::StringImpl *v228;
  uint64_t v229;
  double v230;
  float v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  WTF::StringImpl *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __n128 v243;
  WTF::AtomStringImpl *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  WTF::StringImpl *v251;
  uint64_t v252;
  WTF::StringImpl *v253;
  uint64_t v254;
  double v255;
  float v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  __n128 v268;
  WTF::AtomStringImpl *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  WTF::StringImpl *v276;
  uint64_t v277;
  WTF::StringImpl *v278;
  uint64_t v279;
  double v280;
  float v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  WTF::StringImpl *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  __n128 v293;
  WTF::AtomStringImpl *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  void *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  void *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  void *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  void *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unint64_t v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  void *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  void *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unint64_t v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  void *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  void *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  void *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  unint64_t v405;
  void *v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  void *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  void *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  void *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  unint64_t v437;
  void *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  void *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  void *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  void *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  void *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  __n128 v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  __n128 v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  __n128 v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  __n128 v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  __n128 v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  __n128 v542;
  WTF::StringImpl *v543;
  WTF::StringImpl *v544;
  WTF::StringImpl *v545;
  WTF::StringImpl *v546;
  WTF::StringImpl *v547;
  WTF::StringImpl *v548;
  WTF::StringImpl *v549;
  WTF::StringImpl *v550;
  WTF::StringImpl *v551;
  WTF::StringImpl *v552;
  WTF::StringImpl *v553;
  WTF::StringImpl *v554;
  __int128 v555;

  v6 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v7 = *(_QWORD *)v6;
  v8 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1064);
  if (!v8)
  {
    v553 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v553, 2, (uint64_t)JSC::regExpProtoFuncCompile, 0, 0, 4u);
    goto LABEL_12;
  }
  v9 = *(_DWORD *)v8 + 2;
  *(_DWORD *)v8 = v9;
  v553 = v8;
  if ((*((_BYTE *)v8 + 16) & 0x20) != 0)
  {
    v10 = *(WTF::StringImpl **)(v7 + 872);
    if (!v10)
      goto LABEL_7;
    v9 = *(_DWORD *)v10;
  }
  else
  {
    v10 = v8;
  }
  *(_DWORD *)v10 = v9 + 2;
LABEL_7:
  v554 = v10;
  v18 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 2, &v554, (uint64_t)JSC::regExpProtoFuncCompile, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v20 = v554;
  v554 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
    {
      WTF::StringImpl::~StringImpl(v20, v11, v12, v13, v14, v15, v16, v17);
      WTF::fastFree(v453, v454, v455, v456, v457, v458, v459, v460);
    }
    else
    {
      *(_DWORD *)v20 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v8, v18, 4, v15, v16, v17, v19);
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::~StringImpl(v8, v21, v22, v23, v24, v25, v26, v27);
    WTF::fastFree(v301, v302, v303, v304, v305, v306, v307, v308);
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
LABEL_12:
  v28 = *(_QWORD *)v6;
  v29 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1264);
  if (!v29)
  {
    v553 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v553, 1, (uint64_t)JSC::regExpProtoFuncExec, 0, 62, 4u);
    goto LABEL_21;
  }
  v30 = *(_DWORD *)v29 + 2;
  *(_DWORD *)v29 = v30;
  v553 = v29;
  if ((*((_BYTE *)v29 + 16) & 0x20) != 0)
  {
    v31 = *(WTF::StringImpl **)(v28 + 872);
    if (!v31)
      goto LABEL_16;
    v30 = *(_DWORD *)v31;
  }
  else
  {
    v31 = v29;
  }
  *(_DWORD *)v31 = v30 + 2;
LABEL_16:
  v554 = v31;
  v39 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, &v554, (uint64_t)JSC::regExpProtoFuncExec, 0, 62, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v41 = v554;
  v554 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
    {
      WTF::StringImpl::~StringImpl(v41, v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v461, v462, v463, v464, v465, v466, v467, v468);
    }
    else
    {
      *(_DWORD *)v41 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v29, v39, 4, v36, v37, v38, v40);
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::~StringImpl(v29, v42, v43, v44, v45, v46, v47, v48);
    WTF::fastFree(v309, v310, v311, v312, v313, v314, v315, v316);
  }
  else
  {
    *(_DWORD *)v29 -= 2;
  }
LABEL_21:
  v49 = *(_QWORD *)v6;
  v50 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2512);
  if (!v50)
  {
    v553 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, (uint64_t)a3, (unint64_t *)&v553, 0, (uint64_t)JSC::regExpProtoFuncToString, 0, 0, 4u);
    goto LABEL_30;
  }
  v51 = *(_DWORD *)v50 + 2;
  *(_DWORD *)v50 = v51;
  v553 = v50;
  if ((*((_BYTE *)v50 + 16) & 0x20) != 0)
  {
    v52 = *(WTF::StringImpl **)(v49 + 872);
    if (!v52)
      goto LABEL_25;
    v51 = *(_DWORD *)v52;
  }
  else
  {
    v52 = v50;
  }
  *(_DWORD *)v52 = v51 + 2;
LABEL_25:
  v554 = v52;
  v60 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v554, (uint64_t)JSC::regExpProtoFuncToString, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v62 = v554;
  v554 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v469, v470, v471, v472, v473, v474, v475, v476);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v50, v60, 4, v57, v58, v59, v61);
  if (*(_DWORD *)v50 == 2)
  {
    WTF::StringImpl::~StringImpl(v50, v63, v64, v65, v66, v67, v68, v69);
    WTF::fastFree(v317, v318, v319, v320, v321, v322, v323, v324);
  }
  else
  {
    *(_DWORD *)v50 -= 2;
  }
LABEL_30:
  v70 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1392);
  if (v70)
  {
    *(_DWORD *)v70 += 2;
    v552 = v70;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v552, (uint64_t)JSC::regExpProtoGetterGlobal, 0, (const JSC::PropertyTable *)0x14);
    v552 = 0;
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v325, v326, v327, v328, v329, v330, v331, v332);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  else
  {
    v552 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v552, (uint64_t)JSC::regExpProtoGetterGlobal, 0, (const JSC::PropertyTable *)0x14);
    v552 = 0;
  }
  v78 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1208);
  if (v78)
  {
    *(_DWORD *)v78 += 2;
    v551 = v78;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v551, (uint64_t)JSC::regExpProtoGetterDotAll, 0, (const JSC::PropertyTable *)0x14);
    v551 = 0;
    if (*(_DWORD *)v78 == 2)
    {
      WTF::StringImpl::~StringImpl(v78, v79, v80, v81, v82, v83, v84, v85);
      WTF::fastFree(v333, v334, v335, v336, v337, v338, v339, v340);
    }
    else
    {
      *(_DWORD *)v78 -= 2;
    }
  }
  else
  {
    v551 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v551, (uint64_t)JSC::regExpProtoGetterDotAll, 0, (const JSC::PropertyTable *)0x14);
    v551 = 0;
  }
  v86 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1448);
  if (v86)
  {
    *(_DWORD *)v86 += 2;
    v550 = v86;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v550, (uint64_t)JSC::regExpProtoGetterHasIndices, 0, (const JSC::PropertyTable *)0x14);
    v550 = 0;
    if (*(_DWORD *)v86 == 2)
    {
      WTF::StringImpl::~StringImpl(v86, v87, v88, v89, v90, v91, v92, v93);
      WTF::fastFree(v341, v342, v343, v344, v345, v346, v347, v348);
    }
    else
    {
      *(_DWORD *)v86 -= 2;
    }
  }
  else
  {
    v550 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v550, (uint64_t)JSC::regExpProtoGetterHasIndices, 0, (const JSC::PropertyTable *)0x14);
    v550 = 0;
  }
  v94 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1536);
  if (v94)
  {
    *(_DWORD *)v94 += 2;
    v549 = v94;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v549, (uint64_t)JSC::regExpProtoGetterIgnoreCase, 0, (const JSC::PropertyTable *)0x14);
    v549 = 0;
    if (*(_DWORD *)v94 == 2)
    {
      WTF::StringImpl::~StringImpl(v94, v95, v96, v97, v98, v99, v100, v101);
      WTF::fastFree(v349, v350, v351, v352, v353, v354, v355, v356);
    }
    else
    {
      *(_DWORD *)v94 -= 2;
    }
  }
  else
  {
    v549 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v549, (uint64_t)JSC::regExpProtoGetterIgnoreCase, 0, (const JSC::PropertyTable *)0x14);
    v549 = 0;
  }
  v102 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1960);
  if (v102)
  {
    *(_DWORD *)v102 += 2;
    v548 = v102;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v548, (uint64_t)JSC::regExpProtoGetterMultiline, 0, (const JSC::PropertyTable *)0x14);
    v548 = 0;
    if (*(_DWORD *)v102 == 2)
    {
      WTF::StringImpl::~StringImpl(v102, v103, v104, v105, v106, v107, v108, v109);
      WTF::fastFree(v357, v358, v359, v360, v361, v362, v363, v364);
    }
    else
    {
      *(_DWORD *)v102 -= 2;
    }
  }
  else
  {
    v548 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v548, (uint64_t)JSC::regExpProtoGetterMultiline, 0, (const JSC::PropertyTable *)0x14);
    v548 = 0;
  }
  v110 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2376);
  if (v110)
  {
    *(_DWORD *)v110 += 2;
    v547 = v110;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v547, (uint64_t)JSC::regExpProtoGetterSticky, 0, (const JSC::PropertyTable *)0x14);
    v547 = 0;
    if (*(_DWORD *)v110 == 2)
    {
      WTF::StringImpl::~StringImpl(v110, v111, v112, v113, v114, v115, v116, v117);
      WTF::fastFree(v365, v366, v367, v368, v369, v370, v371, v372);
    }
    else
    {
      *(_DWORD *)v110 -= 2;
    }
  }
  else
  {
    v547 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v547, (uint64_t)JSC::regExpProtoGetterSticky, 0, (const JSC::PropertyTable *)0x14);
    v547 = 0;
  }
  v118 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2576);
  if (v118)
  {
    *(_DWORD *)v118 += 2;
    v546 = v118;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v546, (uint64_t)JSC::regExpProtoGetterUnicode, 0, (const JSC::PropertyTable *)0x14);
    v546 = 0;
    if (*(_DWORD *)v118 == 2)
    {
      WTF::StringImpl::~StringImpl(v118, v119, v120, v121, v122, v123, v124, v125);
      WTF::fastFree(v373, v374, v375, v376, v377, v378, v379, v380);
    }
    else
    {
      *(_DWORD *)v118 -= 2;
    }
  }
  else
  {
    v546 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v546, (uint64_t)JSC::regExpProtoGetterUnicode, 0, (const JSC::PropertyTable *)0x14);
    v546 = 0;
  }
  v126 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2584);
  if (v126)
  {
    *(_DWORD *)v126 += 2;
    v545 = v126;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v545, (uint64_t)JSC::regExpProtoGetterUnicodeSets, 0, (const JSC::PropertyTable *)0x14);
    v545 = 0;
    if (*(_DWORD *)v126 == 2)
    {
      WTF::StringImpl::~StringImpl(v126, v127, v128, v129, v130, v131, v132, v133);
      WTF::fastFree(v381, v382, v383, v384, v385, v386, v387, v388);
    }
    else
    {
      *(_DWORD *)v126 -= 2;
    }
  }
  else
  {
    v545 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v545, (uint64_t)JSC::regExpProtoGetterUnicodeSets, 0, (const JSC::PropertyTable *)0x14);
    v545 = 0;
  }
  v134 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2336);
  if (v134)
  {
    *(_DWORD *)v134 += 2;
    v544 = v134;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v544, (uint64_t)JSC::regExpProtoGetterSource, 0, (const JSC::PropertyTable *)0x14);
    v544 = 0;
    if (*(_DWORD *)v134 == 2)
    {
      WTF::StringImpl::~StringImpl(v134, v135, v136, v137, v138, v139, v140, v141);
      WTF::fastFree(v389, v390, v391, v392, v393, v394, v395, v396);
    }
    else
    {
      *(_DWORD *)v134 -= 2;
    }
  }
  else
  {
    v544 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v544, (uint64_t)JSC::regExpProtoGetterSource, 0, (const JSC::PropertyTable *)0x14);
    v544 = 0;
  }
  v142 = (JSC::BuiltinExecutables **)((char *)a2 + 93152);
  v143 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1304);
  if (v143)
  {
    *(_DWORD *)v143 += 2;
    v543 = v143;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v543, (uint64_t)JSC::regExpProtoGetterFlags, 0, (const JSC::PropertyTable *)0x14);
    v543 = 0;
    if (*(_DWORD *)v143 == 2)
    {
      WTF::StringImpl::~StringImpl(v143, v144, v145, v146, v147, v148, v149, v150);
      WTF::fastFree(v397, v398, v399, v400, v401, v402, v403, v404);
    }
    else
    {
      *(_DWORD *)v143 -= 2;
    }
  }
  else
  {
    v543 = 0;
    JSC::JSObject::putDirectNativeIntrinsicGetterWithoutTransition((unsigned int *)this, a2, a3, (unint64_t *)&v543, (uint64_t)JSC::regExpProtoGetterFlags, 0, (const JSC::PropertyTable *)0x14);
    v543 = 0;
  }
  v151 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2720);
  if (v151)
  {
    *(_DWORD *)v151 += 2;
    matched = JSC::BuiltinExecutables::regExpPrototypeMatchCodeExecutable(*v142, (uint64_t)v144, v145, v146, v147, v148, v149, v150);
    v153 = (WTF::StringImpl *)*((_QWORD *)*v142 + 1);
    ++*((_DWORD *)v153 + 2);
    v554 = v153;
    v555 = xmmword_199125460;
    v162 = JSC::UnlinkedFunctionExecutable::link(matched, (uint64_t)a2, 0, (uint64_t)&v554, 0, 0, 0, v154, COERCE_DOUBLE(0x1A5D30001A4AFLL), v155, v156);
    v163 = v554;
    v554 = 0;
    if (v163)
    {
      if (*((_DWORD *)v163 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v163 + 8))(v163);
      else
        --*((_DWORD *)v163 + 2);
    }
    v164 = JSC::JSFunction::create((uint64_t)a2, v162, a3, v157, v158, v159, v160, v161);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v151, v164, 4, v165, v166, v167, v168);
    if (*(_DWORD *)v151 == 2)
    {
      WTF::StringImpl::~StringImpl(v151, v169, v170, v171, v172, v173, v174, v175);
      WTF::fastFree(v405, v406, v407, v408, v409, v410, v411, v412);
    }
    else
    {
      *(_DWORD *)v151 -= 2;
    }
  }
  else
  {
    v477 = JSC::regExpPrototypeMatchCodeGenerator((JSC::BuiltinExecutables **)a2, v144, v145, v146, v147, v148, v149, v150);
    v483 = JSC::JSFunction::create((uint64_t)a2, v477, a3, v478, v479, v480, v481, v482);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v483, 4, v484, v485, v486, v487);
  }
  v176 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2728);
  if (v176)
  {
    *(_DWORD *)v176 += 2;
    v177 = JSC::BuiltinExecutables::regExpPrototypeMatchAllCodeExecutable(*v142, (uint64_t)v169, v170, v171, v172, v173, v174, v175);
    v178 = (WTF::StringImpl *)*((_QWORD *)*v142 + 1);
    ++*((_DWORD *)v178 + 2);
    v554 = v178;
    v555 = xmmword_199125480;
    v187 = JSC::UnlinkedFunctionExecutable::link(v177, (uint64_t)a2, 0, (uint64_t)&v554, 0, 0, 0, v179, COERCE_DOUBLE(0x1A9DB0001A77CLL), v180, v181);
    v188 = v554;
    v554 = 0;
    if (v188)
    {
      if (*((_DWORD *)v188 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v188 + 8))(v188);
      else
        --*((_DWORD *)v188 + 2);
    }
    v189 = JSC::JSFunction::create((uint64_t)a2, v187, a3, v182, v183, v184, v185, v186);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v176, v189, 4, v190, v191, v192, v193);
    if (*(_DWORD *)v176 == 2)
    {
      WTF::StringImpl::~StringImpl(v176, v194, v195, v196, v197, v198, v199, v200);
      WTF::fastFree(v413, v414, v415, v416, v417, v418, v419, v420);
    }
    else
    {
      *(_DWORD *)v176 -= 2;
    }
  }
  else
  {
    v488 = JSC::regExpPrototypeMatchAllCodeGenerator((JSC::BuiltinExecutables **)a2, v169, v170, v171, v172, v173, v174, v175);
    v494 = JSC::JSFunction::create((uint64_t)a2, v488, a3, v489, v490, v491, v492, v493);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v494, 4, v495, v496, v497, v498);
  }
  v201 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2736);
  if (v201)
  {
    *(_DWORD *)v201 += 2;
    v202 = JSC::BuiltinExecutables::regExpPrototypeReplaceCodeExecutable(*v142, (uint64_t)v194, v195, v196, v197, v198, v199, v200);
    v203 = (WTF::StringImpl *)*((_QWORD *)*v142 + 1);
    ++*((_DWORD *)v203 + 2);
    v554 = v203;
    v555 = xmmword_199125810;
    v212 = JSC::UnlinkedFunctionExecutable::link(v202, (uint64_t)a2, 0, (uint64_t)&v554, 0, 0, 0, v204, COERCE_DOUBLE(0x2374D00022D9ALL), v205, v206);
    v213 = v554;
    v554 = 0;
    if (v213)
    {
      if (*((_DWORD *)v213 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v213 + 8))(v213);
      else
        --*((_DWORD *)v213 + 2);
    }
    v214 = JSC::JSFunction::create((uint64_t)a2, v212, a3, v207, v208, v209, v210, v211);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v201, v214, 4, v215, v216, v217, v218);
    if (*(_DWORD *)v201 == 2)
    {
      WTF::StringImpl::~StringImpl(v201, v219, v220, v221, v222, v223, v224, v225);
      WTF::fastFree(v421, v422, v423, v424, v425, v426, v427, v428);
    }
    else
    {
      *(_DWORD *)v201 -= 2;
    }
  }
  else
  {
    v499 = JSC::regExpPrototypeReplaceCodeGenerator((JSC::BuiltinExecutables **)a2, v194, v195, v196, v197, v198, v199, v200);
    v505 = JSC::JSFunction::create((uint64_t)a2, v499, a3, v500, v501, v502, v503, v504);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v505, 4, v506, v507, v508, v509);
  }
  v226 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2744);
  if (v226)
  {
    *(_DWORD *)v226 += 2;
    v227 = JSC::BuiltinExecutables::regExpPrototypeSearchCodeExecutable(*v142, (uint64_t)v219, v220, v221, v222, v223, v224, v225);
    v228 = (WTF::StringImpl *)*((_QWORD *)*v142 + 1);
    ++*((_DWORD *)v228 + 2);
    v554 = v228;
    v555 = xmmword_199125900;
    v237 = JSC::UnlinkedFunctionExecutable::link(v227, (uint64_t)a2, 0, (uint64_t)&v554, 0, 0, 0, v229, COERCE_DOUBLE(0x25BBB00025936), v230, v231);
    v238 = v554;
    v554 = 0;
    if (v238)
    {
      if (*((_DWORD *)v238 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v238 + 8))(v238);
      else
        --*((_DWORD *)v238 + 2);
    }
    v239 = JSC::JSFunction::create((uint64_t)a2, v237, a3, v232, v233, v234, v235, v236);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v226, v239, 4, v240, v241, v242, v243);
    if (*(_DWORD *)v226 == 2)
    {
      WTF::StringImpl::~StringImpl(v226, v244, v245, v246, v247, v248, v249, v250);
      WTF::fastFree(v429, v430, v431, v432, v433, v434, v435, v436);
    }
    else
    {
      *(_DWORD *)v226 -= 2;
    }
  }
  else
  {
    v510 = JSC::regExpPrototypeSearchCodeGenerator((JSC::BuiltinExecutables **)a2, v219, v220, v221, v222, v223, v224, v225);
    v516 = JSC::JSFunction::create((uint64_t)a2, v510, a3, v511, v512, v513, v514, v515);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v516, 4, v517, v518, v519, v520);
  }
  v251 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2760);
  if (v251)
  {
    *(_DWORD *)v251 += 2;
    v252 = JSC::BuiltinExecutables::regExpPrototypeSplitCodeExecutable(*v142, (uint64_t)v244, v245, v246, v247, v248, v249, v250);
    v253 = (WTF::StringImpl *)*((_QWORD *)*v142 + 1);
    ++*((_DWORD *)v253 + 2);
    v554 = v253;
    v555 = xmmword_199125960;
    v262 = JSC::UnlinkedFunctionExecutable::link(v252, (uint64_t)a2, 0, (uint64_t)&v554, 0, 0, 0, v254, COERCE_DOUBLE(0x26B0B0002630CLL), v255, v256);
    v263 = v554;
    v554 = 0;
    if (v263)
    {
      if (*((_DWORD *)v263 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v263 + 8))(v263);
      else
        --*((_DWORD *)v263 + 2);
    }
    v264 = JSC::JSFunction::create((uint64_t)a2, v262, a3, v257, v258, v259, v260, v261);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v251, v264, 4, v265, v266, v267, v268);
    if (*(_DWORD *)v251 == 2)
    {
      WTF::StringImpl::~StringImpl(v251, v269, v270, v271, v272, v273, v274, v275);
      WTF::fastFree(v437, v438, v439, v440, v441, v442, v443, v444);
    }
    else
    {
      *(_DWORD *)v251 -= 2;
    }
  }
  else
  {
    v521 = JSC::regExpPrototypeSplitCodeGenerator((JSC::BuiltinExecutables **)a2, v244, v245, v246, v247, v248, v249, v250);
    v527 = JSC::JSFunction::create((uint64_t)a2, v521, a3, v522, v523, v524, v525, v526);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v527, 4, v528, v529, v530, v531);
  }
  v276 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2416);
  if (v276)
  {
    *(_DWORD *)v276 += 2;
    v277 = JSC::BuiltinExecutables::regExpPrototypeTestCodeExecutable(*v142);
    v278 = (WTF::StringImpl *)*((_QWORD *)*v142 + 1);
    ++*((_DWORD *)v278 + 2);
    v554 = v278;
    v555 = xmmword_199125A00;
    v287 = JSC::UnlinkedFunctionExecutable::link(v277, (uint64_t)a2, 0, (uint64_t)&v554, 0, 63, 0, v279, COERCE_DOUBLE(0x273D50002721DLL), v280, v281);
    v288 = v554;
    v554 = 0;
    if (v288)
    {
      if (*((_DWORD *)v288 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v288 + 8))(v288);
      else
        --*((_DWORD *)v288 + 2);
    }
    v289 = JSC::JSFunction::create((uint64_t)a2, v287, a3, v282, v283, v284, v285, v286);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v276, v289, 4, v290, v291, v292, v293);
    if (*(_DWORD *)v276 == 2)
    {
      WTF::StringImpl::~StringImpl(v276, v294, v295, v296, v297, v298, v299, v300);
      WTF::fastFree(v445, v446, v447, v448, v449, v450, v451, v452);
    }
    else
    {
      *(_DWORD *)v276 -= 2;
    }
  }
  else
  {
    v532 = JSC::regExpPrototypeTestCodeGenerator((JSC::BuiltinExecutables **)a2, v269);
    v538 = JSC::JSFunction::create((uint64_t)a2, v532, a3, v533, v534, v535, v536, v537);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v538, 4, v539, v540, v541, v542);
  }
}

JSC::Exception *JSC::regExpProtoFuncCompile(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  JSC::Exception *v26;
  JSC::Exception *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int16 **v34;
  unsigned __int16 *v35;
  unint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  JSC::Exception *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  int v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  int v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  JSC::VM *v87;
  WTF::StringImpl *v88[2];

  v10 = *((_QWORD *)this + 7);
  v87 = (JSC::VM *)v10;
  v11 = *((_QWORD *)a2 + 5);
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 59)
    return (JSC::Exception *)JSC::throwTypeError(this, &v87);
  if (*(JSC **)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x28) != this)
  {
    v12 = "RegExp.prototype.compile function's Realm must be the same to |this| RegExp object";
    v13 = 83;
    return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v87, (uint64_t)v12, v13);
  }
  if ((*(_BYTE *)(v11 + 16) & 2) != 0)
  {
    v12 = "|this| RegExp object's legacy features are not enabled";
    v13 = 55;
    return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v87, (uint64_t)v12, v13);
  }
  v14 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16 = 10;
    v85 = 10;
    v86 = 10;
  }
  else
  {
    v15 = *((_QWORD *)a2 + 6);
    v86 = v15;
    if (v14 == 1)
      v16 = 10;
    else
      v16 = *((_QWORD *)a2 + 7);
    v85 = v16;
    if ((v15 & 0xFFFE000000000002) != 0)
    {
      if (v15 != 10)
        goto LABEL_94;
    }
    else
    {
      v17 = *(unsigned __int8 *)(v15 + 5);
      if (v17 == 59)
      {
        if (v16 != 10)
        {
          v12 = "Cannot supply flags when constructing one RegExp from another.";
          v13 = 63;
          return (JSC::Exception *)JSC::throwTypeError((unint64_t)this, &v87, (uint64_t)v12, v13);
        }
        v18 = *(_QWORD *)(v15 + 16) & 0xFFFFFFFFFFFFFFFCLL;
        goto LABEL_13;
      }
      if (v15 != 10)
      {
        if (v17 == 2)
        {
          v75 = *(int **)(v15 + 8);
          if ((v75 & 1) != 0)
          {
            v75 = *JSC::JSRopeString::resolveRope(v15, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
            if (!v75)
              goto LABEL_72;
          }
          else if (!v75)
          {
LABEL_72:
            v88[0] = (WTF::StringImpl *)v75;
            goto LABEL_30;
          }
          *v75 += 2;
          goto LABEL_72;
        }
LABEL_94:
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v86, this, a3, a4, a5, a6, a7, a8, (int **)v88);
        goto LABEL_30;
      }
    }
  }
  WTF::StringImpl::s_emptyAtomString += 2;
  v88[0] = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
LABEL_30:
  if (*(_DWORD *)(v10 + 80))
  {
    v82 = *(_DWORD *)(v10 + 80);
    if ((v82 & 0x27) != 0 && (v82 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      goto LABEL_84;
  }
  if (v16 == 10)
  {
    v32 = 0;
    v33 = 1;
    goto LABEL_44;
  }
  if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v85, this, a3, a4, a5, a6, a7, a8, (int **)&v84);
    v34 = (unsigned __int16 **)v84;
    if (v84)
      goto LABEL_39;
LABEL_63:
    v35 = 0;
    v36 = 0x100000000;
    goto LABEL_40;
  }
  v34 = *(unsigned __int16 ***)(v16 + 8);
  if ((v34 & 1) == 0)
  {
    if (!v34)
      goto LABEL_38;
    goto LABEL_37;
  }
  v34 = (unsigned __int16 **)*JSC::JSRopeString::resolveRope(v16, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (v34)
LABEL_37:
    *(_DWORD *)v34 += 2;
LABEL_38:
  v84 = (WTF::StringImpl *)v34;
  if (!v34)
    goto LABEL_63;
LABEL_39:
  v35 = v34[1];
  v36 = *((unsigned int *)v34 + 1) | ((unint64_t)((*((_DWORD *)v34 + 4) >> 2) & 1) << 32);
LABEL_40:
  v37 = JSC::Yarr::parseFlags(v35, v36);
  LOWORD(v32) = v37;
  v33 = BYTE2(v37);
  v38 = v84;
  v84 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::~StringImpl(v38, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
    }
    else
    {
      *(_DWORD *)v38 -= 2;
    }
  }
  v32 = (unsigned __int16)v32;
LABEL_44:
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_45;
  v83 = *(_DWORD *)(v10 + 80);
  if ((v83 & 0x27) != 0 && (v83 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_45:
    if (v33)
    {
      v18 = JSC::RegExpCache::lookupOrCreate(*(_QWORD *)(v10 + 93032), v10, (const WTF::StringImpl *)v88, v32, a5, a6, a7, a8);
      v28 = 0;
      v39 = 1;
    }
    else
    {
      v40 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v40 = 0x2D00000002;
      *(_QWORD *)(v40 + 8) = "Invalid flags supplied to RegExp constructor.";
      *(_DWORD *)(v40 + 16) = 4;
      v84 = (WTF::StringImpl *)v40;
      v41 = JSC::createSyntaxError(this, &v84, 0);
      v48 = (JSC::Exception *)v41;
      if ((v41 & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x4C)))
      {
        v48 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v41, 0, v42, v43, v44, v45, v46);
      }
      v28 = JSC::VM::throwException((JSC::VM *)v10, this, v48, v47, v42, v43, v44, v45, v46);
      v49 = v84;
      v84 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
        {
          WTF::StringImpl::~StringImpl(v49, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v67, v68, v69, v70, v71, v72, v73, v74);
        }
        else
        {
          *(_DWORD *)v49 -= 2;
        }
      }
      v18 = 0;
      v39 = 0;
    }
    goto LABEL_53;
  }
LABEL_84:
  v18 = 0;
  v39 = 0;
  v28 = 0;
LABEL_53:
  v50 = v88[0];
  v88[0] = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
    {
      WTF::StringImpl::~StringImpl(v50, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
      if (!v39)
        return v28;
      goto LABEL_13;
    }
    *(_DWORD *)v50 -= 2;
  }
  if (!v39)
    return v28;
LABEL_13:
  if (*(_BYTE *)(v18 + 20))
  {
    v19 = JSC::Yarr::errorToThrow(this, *(unsigned __int8 *)(v18 + 20));
    v26 = (JSC::Exception *)v19;
    if ((v19 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C)))
    {
      v26 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v19, 0, v20, v21, v22, v23, v24);
    }
    return JSC::VM::throwException((JSC::VM *)v10, this, v26, v25, v20, v21, v22, v23, v24);
  }
  v30 = *((_QWORD *)this + 259);
  if (*(_BYTE *)(v30 + 4) == 1)
  {
    v88[0] = (WTF::StringImpl *)&off_1E3583C90;
    v88[1] = (WTF::StringImpl *)"RegExp is recompiled";
    __dmb(0xAu);
    v78 = *(uint64_t **)(v30 + 8);
    v77 = (uint64_t *)(v30 + 8);
    v76 = v78;
    *((_BYTE *)v77 - 4) = 2;
    v79 = *(_DWORD *)(v10 + 916);
    *(_DWORD *)(v10 + 916) = v79 + 1;
    if (v78 != v77)
    {
      do
      {
        v81 = *v76;
        v80 = (uint64_t *)v76[1];
        *v80 = *v76;
        *(_QWORD *)(v81 + 8) = v80;
        *v76 = 0;
        v76[1] = 0;
        JSC::Watchpoint::fire((unint64_t)v76, (JSC::VM *)v10, v88, a4, a5, a6, a7, a8, *(double *)a9.i64);
        v76 = (uint64_t *)*v77;
      }
      while ((uint64_t *)*v77 != v77);
      v79 = *(_DWORD *)(v10 + 916) - 1;
    }
    *(_DWORD *)(v10 + 916) = v79;
    __dmb(0xAu);
  }
  v31 = *(_QWORD *)(v11 + 16) & 3 | v18;
  *(_QWORD *)(v11 + 16) = v31;
  if (*(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(v11 + 7))
  {
    JSC::Heap::writeBarrierSlowPath(v10 + 192, v11);
    v31 = *(_QWORD *)(v11 + 16);
  }
  v88[0] = *((WTF::StringImpl **)this + 7);
  if ((v31 & 1) != 0)
    JSC::throwTypeError((unint64_t)this, v88, (uint64_t)"Attempted to assign to readonly property.", 42);
  else
    *(_QWORD *)(v11 + 24) = 0xFFFE000000000000;
  return (JSC::Exception *)v11;
}

uint64_t JSC::regExpProtoFuncExec(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  JSC::VM *v14;

  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v10 + 5) != 59)
    return JSC::throwTypeError((unint64_t)this, &v14, (uint64_t)"Builtin RegExp exec can only be called on a RegExp object", 58);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = 10;
    goto LABEL_9;
  }
  v11 = *((_QWORD *)a2 + 6);
  v13 = v11;
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
  {
LABEL_9:
    v11 = (uint64_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v13, (uint64_t)this, 0, a4, a5, a6, a7, a8);
    if (!v11)
      return 10;
  }
  return JSC::RegExpObject::execInline((JSC::RegExpObject *)v10, this, (JSC::JSString *)v11, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::regExpProtoFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  WTF::AtomStringImpl *v14;
  const WTF::String *v15;
  unint64_t v16;
  int8x16_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  int8x16_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _WORD *v77;
  unsigned __int128 *v78;
  unsigned __int128 *v79;
  unsigned __int128 v80;
  _BYTE *v81;
  _BYTE *v82;
  unsigned __int128 v83;
  char v84;
  char v85;
  _QWORD v86[3];
  WTF::StringImpl *v87;
  unint64_t v88;
  WTF::StringImpl *v89;
  unint64_t v90;
  JSC *v91;
  uint64_t v92;
  uint64_t v93;
  JSC::VM *v94;
  WTF::StringImpl *v95[2];
  char v96;
  uint64_t v97;

  v9 = *((_QWORD *)this + 7);
  v94 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError(this, &v94);
  v11 = *(unsigned __int8 *)(v10 + 5);
  if (v11 < 0x17 || v11 - 57 >= 0xFFFFFFFA)
    return JSC::throwTypeError(this, &v94);
  v91 = this;
  v92 = v10;
  if ((unint64_t)v86 < *(_QWORD *)(v9 + 8))
  {
    v76 = JSC::StringRecursionChecker::throwStackOverflowError((JSC::StringRecursionChecker *)&v91, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v13 = *(_QWORD *)(v9 + 90576);
    if (!v13)
    {
      *(_QWORD *)(v9 + 90576) = v10;
LABEL_9:
      v93 = 0;
LABEL_10:
      v16 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 2336), a4, a5, a6, a7, a8);
      v90 = v16;
      if (*(_DWORD *)(v9 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v14, (uint64_t)v15, a4, a5, a6, a7, a8))
      {
        v47 = 0;
        goto LABEL_65;
      }
      if ((v16 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v16 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v90, this, v15, a4, a5, a6, a7, a8, (int **)&v89);
      }
      else
      {
        v18 = *(WTF::StringImpl **)(v16 + 8);
        if ((v18 & 1) != 0)
          v18 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v16, this, (uint64_t)v15, a4, v17, a5, a6, a7, a8);
        if (v18)
          *(_DWORD *)v18 += 2;
        v89 = v18;
        v86[2] = v16;
      }
      if (*(_DWORD *)(v9 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v14, (uint64_t)v15, a4, a5, a6, a7, a8))
      {
        goto LABEL_85;
      }
      v19 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1304), a4, a5, a6, a7, a8);
      v88 = v19;
      if (*(_DWORD *)(v9 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v14, (uint64_t)v15, a4, a5, a6, a7, a8))
        {
LABEL_85:
          v47 = 0;
LABEL_62:
          v50 = v89;
          v89 = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
            {
              WTF::StringImpl::~StringImpl(v50, v14, (uint64_t)v15, a4, a5, a6, a7, a8);
              WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
            }
            else
            {
              *(_DWORD *)v50 -= 2;
            }
          }
          goto LABEL_65;
        }
        v19 = v88;
      }
      if ((v19 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v19 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v88, this, v15, a4, a5, a6, a7, a8, (int **)&v87);
      }
      else
      {
        v21 = *(WTF::StringImpl **)(v19 + 8);
        if ((v21 & 1) != 0)
          v21 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v19, this, (uint64_t)v15, a4, v20, a5, a6, a7, a8);
        if (v21)
          *(_DWORD *)v21 += 2;
        v87 = v21;
        v86[1] = v19;
      }
      if (*(_DWORD *)(v9 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, (uint64_t)v14, (uint64_t)v15, a4, a5, a6, a7, a8))
      {
        v47 = 0;
        goto LABEL_59;
      }
      v22 = v89;
      v23 = v87;
      v24 = *((_QWORD *)this + 7);
      v97 = v24;
      if (v89)
        v25 = *((_DWORD *)v89 + 1);
      else
        v25 = 0;
      if (v87)
      {
        v26 = *((_DWORD *)v87 + 1);
        if (v26 < 0)
          goto LABEL_99;
      }
      else
      {
        v26 = 0;
      }
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      v29 = v27;
      if (v25 < 0)
        goto LABEL_99;
      if ((v29 & 1) != 0)
        goto LABEL_99;
      v27 = __OFADD__(v25, v28);
      v30 = v25 + v28;
      if (v27)
        goto LABEL_99;
      v31 = (v30 + 1);
      if (__OFADD__(v30, 1))
        goto LABEL_99;
      if (v89)
      {
        v32 = *((_DWORD *)v89 + 4);
        if (!v87 || (v32 & 4) == 0)
        {
          if ((v32 & 4) != 0)
          {
            v33 = 1;
            goto LABEL_44;
          }
LABEL_96:
          if (v31 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * v31 + 20), v95);
            v41 = v95[0];
            if (v95[0])
            {
              v77 = (_WORD *)((char *)v95[0] + 20);
              *(_DWORD *)v95[0] = 2;
              *((_DWORD *)v41 + 1) = v31;
              *((_QWORD *)v41 + 1) = (char *)v41 + 20;
              *((_DWORD *)v41 + 4) = 0;
              WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v77, 47, (uint64_t)v22, 47, (uint64_t)v23);
LABEL_56:
              v95[0] = v41;
              v47 = JSC::jsNontrivialString(v24, (JSC::VM *)v95, v35, v36, v37, v38, v39, v40);
              v48 = v95[0];
              v95[0] = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                {
                  WTF::StringImpl::~StringImpl(v48, v14, (uint64_t)v15, a4, a5, a6, a7, a8);
                  WTF::fastFree(v68, v69, v70, v71, v72, v73, v74, v75);
                }
                else
                {
                  *(_DWORD *)v48 -= 2;
                }
              }
              goto LABEL_59;
            }
          }
LABEL_99:
          v47 = (uint64_t)JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v97);
LABEL_59:
          v49 = v87;
          v87 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
            {
              WTF::StringImpl::~StringImpl(v49, v14, (uint64_t)v15, a4, a5, a6, a7, a8);
              WTF::fastFree(v60, v61, v62, v63, v64, v65, v66, v67);
            }
            else
            {
              *(_DWORD *)v49 -= 2;
            }
          }
          goto LABEL_62;
        }
      }
      else if (!v87)
      {
        v33 = 0;
        v34 = 0;
        goto LABEL_45;
      }
      if ((*((_BYTE *)v87 + 16) & 4) != 0)
      {
        v33 = (uint64_t)v89;
LABEL_44:
        v34 = v87;
LABEL_45:
        if ((v31 & 0x80000000) == 0)
        {
          WTF::tryFastCompactMalloc((WTF *)(v31 + 20), v95);
          v41 = v95[0];
          if (v95[0])
          {
            *(_DWORD *)v95[0] = 2;
            *((_DWORD *)v41 + 1) = v31;
            *((_BYTE *)v41 + 20) = 47;
            *((_QWORD *)v41 + 1) = (char *)v41 + 20;
            *((_DWORD *)v41 + 4) = 4;
            v42 = (char *)v41 + 21;
            if (v33)
            {
              v43 = (_BYTE *)*((_QWORD *)v22 + 1);
              v35 = *((unsigned int *)v22 + 1);
              if ((*((_BYTE *)v22 + 16) & 4) != 0)
              {
                if ((_DWORD)v35 == 1)
                {
                  *v42 = *v43;
                }
                else if ((_DWORD)v35)
                {
                  memcpy((char *)v41 + 21, v43, v35);
                }
              }
              else
              {
                if (v35 < 0x10)
                {
                  v78 = (unsigned __int128 *)((char *)v41 + 21);
                }
                else
                {
                  v78 = (unsigned __int128 *)&v42[v35 & 0xFFFFFFF0];
                  v79 = (unsigned __int128 *)((char *)v41 + 21);
                  do
                  {
                    v80 = (unsigned __int128)vld2q_s8(v43);
                    v43 += 32;
                    *v79++ = v80;
                  }
                  while (v79 != v78);
                }
                while (v78 != (unsigned __int128 *)&v42[v35])
                {
                  v85 = *v43;
                  v43 += 2;
                  *(_BYTE *)v78 = v85;
                  v78 = (unsigned __int128 *)((char *)v78 + 1);
                }
              }
              v44 = *((unsigned int *)v22 + 1);
            }
            else
            {
              v44 = 0;
            }
            v42[v44] = 47;
            v45 = &v42[v44 + 1];
            if (v34)
            {
              v46 = (_BYTE *)*((_QWORD *)v23 + 1);
              v35 = *((unsigned int *)v23 + 1);
              if ((*((_BYTE *)v23 + 16) & 4) != 0)
              {
                if ((_DWORD)v35 == 1)
                {
                  *v45 = *v46;
                }
                else if ((_DWORD)v35)
                {
                  memcpy(v45, v46, v35);
                }
              }
              else
              {
                v81 = &v45[v35];
                if (v35 >= 0x10)
                {
                  v82 = &v45[v35 & 0xFFFFFFF0];
                  do
                  {
                    v83 = (unsigned __int128)vld2q_s8(v46);
                    v46 += 32;
                    *(_OWORD *)v45 = v83;
                    v45 += 16;
                  }
                  while (v45 != v82);
                  v45 = v82;
                }
                while (v45 != v81)
                {
                  v84 = *v46;
                  v46 += 2;
                  *v45++ = v84;
                }
              }
            }
            goto LABEL_56;
          }
        }
        goto LABEL_99;
      }
      goto LABEL_96;
    }
    if (v13 != v10)
    {
      WTF::HashTable<JSC::JSObject *,JSC::JSObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>>::add((uint64_t *)(v9 + 90584), &v92, (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)v95);
      if (v96)
        goto LABEL_9;
    }
    v76 = JSC::StringRecursionChecker::emptyString((JSC::StringRecursionChecker *)&v91);
  }
  v47 = v76;
  v93 = v76;
  if (!v76)
    goto LABEL_10;
LABEL_65:
  JSC::StringRecursionChecker::~StringRecursionChecker((JSC::StringRecursionChecker *)&v91, (uint64_t)v14, (uint64_t)v15, a4, a5, a6, a7, a8);
  return v47;
}

uint64_t JSC::regExpProtoGetterGlobal(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 59)
  {
    if (v3 == *((_QWORD *)this + 86))
      return 10;
    else
      return JSC::throwTypeError((unint64_t)this, &v5, (uint64_t)"The RegExp.prototype.global getter can only be called on a RegExp object", 73);
  }
  else if ((*(_WORD *)((*(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFFCLL) + 18) & 2) != 0)
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t JSC::regExpProtoGetterDotAll(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 59)
  {
    if (v3 == *((_QWORD *)this + 86))
      return 10;
    else
      return JSC::throwTypeError((unint64_t)this, &v5, (uint64_t)"The RegExp.prototype.dotAll getter can only be called on a RegExp object", 73);
  }
  else if ((*(_WORD *)((*(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFFCLL) + 18) & 0x10) != 0)
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t JSC::regExpProtoGetterHasIndices(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 59)
  {
    if (v3 == *((_QWORD *)this + 86))
      return 10;
    else
      return JSC::throwTypeError((unint64_t)this, &v5, (uint64_t)"The RegExp.prototype.hasIndices getter can only be called on a RegExp object", 77);
  }
  else if ((*(_WORD *)((*(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFFCLL) + 18) & 1) != 0)
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t JSC::regExpProtoGetterIgnoreCase(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 59)
  {
    if (v3 == *((_QWORD *)this + 86))
      return 10;
    else
      return JSC::throwTypeError((unint64_t)this, &v5, (uint64_t)"The RegExp.prototype.ignoreCase getter can only be called on a RegExp object", 77);
  }
  else if ((*(_WORD *)((*(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFFCLL) + 18) & 4) != 0)
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t JSC::regExpProtoGetterMultiline(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 59)
  {
    if (v3 == *((_QWORD *)this + 86))
      return 10;
    else
      return JSC::throwTypeError((unint64_t)this, &v5, (uint64_t)"The RegExp.prototype.multiline getter can only be called on a RegExp object", 76);
  }
  else if ((*(_WORD *)((*(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFFCLL) + 18) & 8) != 0)
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t JSC::regExpProtoGetterSticky(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 59)
  {
    if (v3 == *((_QWORD *)this + 86))
      return 10;
    else
      return JSC::throwTypeError((unint64_t)this, &v5, (uint64_t)"The RegExp.prototype.sticky getter can only be called on a RegExp object", 73);
  }
  else if ((*(_WORD *)((*(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFFCLL) + 18) & 0x80) != 0)
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t JSC::regExpProtoGetterUnicode(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 59)
  {
    if (v3 == *((_QWORD *)this + 86))
      return 10;
    else
      return JSC::throwTypeError((unint64_t)this, &v5, (uint64_t)"The RegExp.prototype.unicode getter can only be called on a RegExp object", 74);
  }
  else if ((*(_WORD *)((*(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFFCLL) + 18) & 0x20) != 0)
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t JSC::regExpProtoGetterUnicodeSets(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  JSC::VM *v5;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v3 = *((_QWORD *)a2 + 5);
  if ((v3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v3 + 5) != 59)
  {
    if (v3 == *((_QWORD *)this + 86))
      return 10;
    else
      return JSC::throwTypeError((unint64_t)this, &v5, (uint64_t)"The RegExp.prototype.unicodeSets getter can only be called on a RegExp object", 78);
  }
  else if ((*(_WORD *)((*(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFFCLL) + 18) & 0x40) != 0)
  {
    return 7;
  }
  else
  {
    return 6;
  }
}

uint64_t JSC::regExpProtoGetterSource(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;

  v8 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v8;
  v9 = *((_QWORD *)a2 + 5);
  if ((v9 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v9 + 5) != 59)
  {
    if (v9 != *((_QWORD *)this + 86))
      return JSC::throwTypeError((unint64_t)this, &v43, (uint64_t)"The RegExp.prototype.source getter can only be called on a RegExp object", 73);
    v35 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v35 = 0x400000002;
    *(_QWORD *)(v35 + 8) = "(?:)";
    *(_DWORD *)(v35 + 16) = 4;
    v42 = (WTF::StringImpl *)v35;
    v16 = JSC::jsNontrivialString((uint64_t)v8, (JSC::VM *)&v42, v36, v37, v38, v39, v40, v41);
  }
  else
  {
    JSC::RegExp::escapedPattern((JSC::RegExp *)(*(_QWORD *)(v9 + 16) & 0xFFFFFFFFFFFFFFFCLL), (uint64_t)a3, a4, a5, a6, a7, a8, &v42);
    v16 = JSC::jsString((uint64_t)v8, (JSC::VM *)&v42, v10, v11, v12, v13, v14, v15);
  }
  v24 = v16;
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return v24;
}

size_t JSC::regExpProtoGetterFlags(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  char v47;
  size_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  int *v56;
  _BYTE *v57;
  uint64_t v58;
  WTF::AtomStringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  _DWORD *v90;
  uint64_t v91;
  _DWORD *v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  _DWORD *v98;
  JSC::VM *v99;
  char __s[8];
  char v101;
  WTF::StringImpl *v102;
  char v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v9 = *((_QWORD *)this + 7);
  v99 = (JSC::VM *)v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v10 + 5) <= 0x16u)
    return JSC::throwTypeError((unint64_t)this, &v99, (uint64_t)"The RegExp.prototype.flags getter can only be called on an object", 66);
  v101 = 0;
  *(_QWORD *)__s = 0;
  v11 = v9 + 41952;
  v19 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v9 + 41952) + 1448), a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v12, v13, v14, v15, v16, v17, v18))
  {
    goto LABEL_198;
  }
  if (v19 >= 0xFFFE000000000000)
  {
    if (!(_DWORD)v19)
      goto LABEL_8;
LABEL_18:
    v20 = 1;
    goto LABEL_9;
  }
  if (v19 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    v20 = 0;
    if (COERCE_DOUBLE(v19 - 0x2000000000000) == 0.0)
      goto LABEL_9;
    goto LABEL_18;
  }
  if ((v19 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned __int8 *)(v19 + 5);
    if (v24 == 2)
    {
      v83 = *(_QWORD *)(v19 + 8);
      if ((v83 & 1) != 0)
        v84 = (_DWORD *)(v19 + 16);
      else
        v84 = (_DWORD *)(v83 + 4);
      if (!*v84)
        goto LABEL_8;
    }
    else if (v24 == 3)
    {
      if (!*(_DWORD *)(v19 + 8))
        goto LABEL_8;
    }
    else if ((*(_BYTE *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0xA) & 1) != 0
           && *(JSC **)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x28) == this)
    {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
  if (v19 == 7)
    goto LABEL_18;
LABEL_8:
  v20 = 0;
LABEL_9:
  v23 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)v11 + 1392), v14, v15, v16, v17, v18);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v21, v22, v14, v15, v16, v17, v18))
  {
    goto LABEL_198;
  }
  if (v23 >= 0xFFFE000000000000)
  {
    if (!(_DWORD)v23)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (v23 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (COERCE_DOUBLE(v23 - 0x2000000000000) == 0.0)
      goto LABEL_23;
    goto LABEL_22;
  }
  if ((v23 & 0xFFFE000000000002) != 0)
  {
    if (v23 == 7)
      goto LABEL_22;
  }
  else
  {
    v25 = *(unsigned __int8 *)(v23 + 5);
    if (v25 == 2)
    {
      v85 = *(_QWORD *)(v23 + 8);
      if ((v85 & 1) != 0)
        v86 = (_DWORD *)(v23 + 16);
      else
        v86 = (_DWORD *)(v85 + 4);
      if (*v86)
        goto LABEL_22;
    }
    else
    {
      if (v25 == 3)
      {
        if (!*(_DWORD *)(v23 + 8))
          goto LABEL_23;
        goto LABEL_22;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0xA) & 1) == 0
        || *(JSC **)(16 * (*(_DWORD *)v23 & 0xFFFFFFFE) + 0x28) != this)
      {
LABEL_22:
        v20 |= 2u;
      }
    }
  }
LABEL_23:
  v28 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)v11 + 1536), v14, v15, v16, v17, v18);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v26, v27, v14, v15, v16, v17, v18))
  {
    goto LABEL_198;
  }
  if (v28 >= 0xFFFE000000000000)
  {
    if (!(_DWORD)v28)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (v28 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (COERCE_DOUBLE(v28 - 0x2000000000000) == 0.0)
      goto LABEL_33;
    goto LABEL_32;
  }
  if ((v28 & 0xFFFE000000000002) != 0)
  {
    if (v28 == 7)
      goto LABEL_32;
  }
  else
  {
    v29 = *(unsigned __int8 *)(v28 + 5);
    if (v29 == 2)
    {
      v87 = *(_QWORD *)(v28 + 8);
      if ((v87 & 1) != 0)
        v88 = (_DWORD *)(v28 + 16);
      else
        v88 = (_DWORD *)(v87 + 4);
      if (*v88)
        goto LABEL_32;
    }
    else
    {
      if (v29 == 3)
      {
        if (!*(_DWORD *)(v28 + 8))
          goto LABEL_33;
        goto LABEL_32;
      }
      if ((*(_BYTE *)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0xA) & 1) == 0
        || *(JSC **)(16 * (*(_DWORD *)v28 & 0xFFFFFFFE) + 0x28) != this)
      {
LABEL_32:
        v20 |= 4u;
      }
    }
  }
LABEL_33:
  v32 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)v11 + 1960), v14, v15, v16, v17, v18);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v30, v31, v14, v15, v16, v17, v18))
  {
    goto LABEL_198;
  }
  if (v32 >= 0xFFFE000000000000)
  {
    if (!(_DWORD)v32)
      goto LABEL_38;
    goto LABEL_89;
  }
  if (v32 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (COERCE_DOUBLE(v32 - 0x2000000000000) == 0.0)
      goto LABEL_38;
    goto LABEL_89;
  }
  if ((v32 & 0xFFFE000000000002) != 0)
  {
    if (v32 != 7)
      goto LABEL_38;
    goto LABEL_89;
  }
  v69 = *(unsigned __int8 *)(v32 + 5);
  if (v69 == 2)
  {
    v89 = *(_QWORD *)(v32 + 8);
    if ((v89 & 1) != 0)
      v90 = (_DWORD *)(v32 + 16);
    else
      v90 = (_DWORD *)(v89 + 4);
    if (*v90)
      goto LABEL_89;
  }
  else
  {
    if (v69 == 3)
    {
      if (!*(_DWORD *)(v32 + 8))
        goto LABEL_38;
      goto LABEL_89;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0xA) & 1) == 0
      || *(JSC **)(16 * (*(_DWORD *)v32 & 0xFFFFFFFE) + 0x28) != this)
    {
LABEL_89:
      v20 |= 8u;
    }
  }
LABEL_38:
  v35 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)v11 + 1208), v14, v15, v16, v17, v18);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v33, v34, v14, v15, v16, v17, v18))
  {
    goto LABEL_198;
  }
  if (v35 >= 0xFFFE000000000000)
  {
    if (!(_DWORD)v35)
      goto LABEL_43;
    goto LABEL_93;
  }
  if (v35 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (COERCE_DOUBLE(v35 - 0x2000000000000) == 0.0)
      goto LABEL_43;
    goto LABEL_93;
  }
  if ((v35 & 0xFFFE000000000002) != 0)
  {
    if (v35 != 7)
      goto LABEL_43;
    goto LABEL_93;
  }
  v70 = *(unsigned __int8 *)(v35 + 5);
  if (v70 == 2)
  {
    v91 = *(_QWORD *)(v35 + 8);
    if ((v91 & 1) != 0)
      v92 = (_DWORD *)(v35 + 16);
    else
      v92 = (_DWORD *)(v91 + 4);
    if (*v92)
      goto LABEL_93;
  }
  else
  {
    if (v70 == 3)
    {
      if (!*(_DWORD *)(v35 + 8))
        goto LABEL_43;
      goto LABEL_93;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0xA) & 1) == 0
      || *(JSC **)(16 * (*(_DWORD *)v35 & 0xFFFFFFFE) + 0x28) != this)
    {
LABEL_93:
      v20 |= 0x10u;
    }
  }
LABEL_43:
  v38 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)v11 + 2576), v14, v15, v16, v17, v18);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v36, v37, v14, v15, v16, v17, v18))
  {
    goto LABEL_198;
  }
  if (v38 >= 0xFFFE000000000000)
  {
    if (!(_DWORD)v38)
      goto LABEL_48;
    goto LABEL_97;
  }
  if (v38 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (COERCE_DOUBLE(v38 - 0x2000000000000) == 0.0)
      goto LABEL_48;
    goto LABEL_97;
  }
  if ((v38 & 0xFFFE000000000002) != 0)
  {
    if (v38 != 7)
      goto LABEL_48;
    goto LABEL_97;
  }
  v71 = *(unsigned __int8 *)(v38 + 5);
  if (v71 == 2)
  {
    v93 = *(_QWORD *)(v38 + 8);
    if ((v93 & 1) != 0)
      v94 = (_DWORD *)(v38 + 16);
    else
      v94 = (_DWORD *)(v93 + 4);
    if (*v94)
      goto LABEL_97;
  }
  else
  {
    if (v71 == 3)
    {
      if (!*(_DWORD *)(v38 + 8))
        goto LABEL_48;
      goto LABEL_97;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0xA) & 1) == 0
      || *(JSC **)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x28) != this)
    {
LABEL_97:
      v20 |= 0x20u;
    }
  }
LABEL_48:
  v41 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)v11 + 2584), v14, v15, v16, v17, v18);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v39, v40, v14, v15, v16, v17, v18))
  {
    goto LABEL_198;
  }
  if (v41 >= 0xFFFE000000000000)
  {
    if (!(_DWORD)v41)
      goto LABEL_53;
    goto LABEL_101;
  }
  if (v41 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (COERCE_DOUBLE(v41 - 0x2000000000000) == 0.0)
      goto LABEL_53;
    goto LABEL_101;
  }
  if ((v41 & 0xFFFE000000000002) != 0)
  {
    if (v41 != 7)
      goto LABEL_53;
    goto LABEL_101;
  }
  v72 = *(unsigned __int8 *)(v41 + 5);
  if (v72 == 2)
  {
    v95 = *(_QWORD *)(v41 + 8);
    if ((v95 & 1) != 0)
      v96 = (_DWORD *)(v41 + 16);
    else
      v96 = (_DWORD *)(v95 + 4);
    if (*v96)
      goto LABEL_101;
  }
  else
  {
    if (v72 == 3)
    {
      if (!*(_DWORD *)(v41 + 8))
        goto LABEL_53;
      goto LABEL_101;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0xA) & 1) == 0
      || *(JSC **)(16 * (*(_DWORD *)v41 & 0xFFFFFFFE) + 0x28) != this)
    {
LABEL_101:
      v20 |= 0x40u;
    }
  }
LABEL_53:
  v44 = JSC::JSObject::get((unsigned int *)v10, (uint64_t)this, *(_QWORD *)(*(_QWORD *)v11 + 2376), v14, v15, v16, v17, v18);
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v42, v43, v14, v15, v16, v17, v18))
  {
LABEL_198:
    v47 = 0;
    v46 = 0;
    goto LABEL_75;
  }
  if (v44 >= 0xFFFE000000000000)
  {
    if (!(_DWORD)v44)
      goto LABEL_58;
    goto LABEL_105;
  }
  if (v44 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (COERCE_DOUBLE(v44 - 0x2000000000000) == 0.0)
      goto LABEL_58;
    goto LABEL_105;
  }
  if ((v44 & 0xFFFE000000000002) != 0)
  {
    if (v44 != 7)
      goto LABEL_58;
    goto LABEL_105;
  }
  v73 = *(unsigned __int8 *)(v44 + 5);
  if (v73 == 2)
  {
    v97 = *(_QWORD *)(v44 + 8);
    if ((v97 & 1) != 0)
      v98 = (_DWORD *)(v44 + 16);
    else
      v98 = (_DWORD *)(v97 + 4);
    if (!*v98)
      goto LABEL_58;
    goto LABEL_105;
  }
  if (v73 == 3)
  {
    if (!*(_DWORD *)(v44 + 8))
      goto LABEL_58;
    goto LABEL_105;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0xA) & 1) == 0
    || *(JSC **)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x28) != this)
  {
LABEL_105:
    v20 |= 0x80u;
  }
LABEL_58:
  if ((v20 & 1) != 0)
  {
    LOBYTE(v102) = 100;
    v45 = 1;
  }
  else
  {
    v45 = 0;
  }
  if ((v20 & 2) != 0)
  {
    v58 = v45++;
    *(_BYTE *)((unint64_t)&v102 | v58) = 103;
  }
  if ((v20 & 4) != 0)
  {
    v68 = v45++;
    *(_BYTE *)((unint64_t)&v102 | v68) = 105;
  }
  if ((v20 & 8) != 0)
  {
    v74 = v45++;
    *(_BYTE *)((unint64_t)&v102 | v74) = 109;
  }
  if ((v20 & 0x10) != 0)
    *((_BYTE *)&v102 + v45++) = 115;
  if ((v20 & 0x20) != 0)
    *((_BYTE *)&v102 + v45++) = 117;
  if ((v20 & 0x40) != 0)
    *((_BYTE *)&v102 + v45++) = 118;
  if (v20 < 0)
    *((_BYTE *)&v102 + v45++) = 121;
  *((_BYTE *)&v102 + v45) = 0;
  v46 = v102;
  v47 = v103;
LABEL_75:
  *(_QWORD *)__s = v46;
  v101 = v47;
  if (*(_DWORD *)(v9 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9, v42, v43, v14, v15, v16, v17, v18))
  {
    return 0;
  }
  result = strlen(__s);
  if (!result)
  {
    v56 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_81;
  }
  v55 = result;
  if (!(result >> 31))
  {
    v56 = (int *)WTF::fastCompactMalloc((WTF *)(result + 20));
    v57 = v56 + 5;
    *v56 = 2;
    v56[1] = v55;
    *((_QWORD *)v56 + 1) = v56 + 5;
    v56[4] = 4;
    if (v55 == 1)
      *v57 = (_BYTE)v46;
    else
      memcpy(v57, __s, v55);
LABEL_81:
    v102 = (WTF::StringImpl *)v56;
    v66 = JSC::jsString(v9, (JSC::VM *)&v102, v49, v50, v51, v52, v53, v54);
    v67 = v102;
    v102 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
      {
        WTF::StringImpl::~StringImpl(v67, v59, v60, v61, v62, v63, v64, v65);
        WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
      }
      else
      {
        *(_DWORD *)v67 -= 2;
      }
    }
    return v66;
  }
  __break(0xC471u);
  return result;
}

uint64_t JSC::regExpProtoFuncTestFast(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int **v15;
  JSC::VM *v16;
  unint64_t v17;
  int *v18;
  unint64_t v19;
  __int16 v20;
  uint64_t v21;
  int *v22;
  unsigned int v23;
  _BOOL8 v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  void *v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  int v54;
  double v55;
  double v56;
  int v57;
  int v58;
  double v59;
  _DWORD *v60;
  int v61;
  int v62;
  void **v63;
  int *v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  void *v68;
  unint64_t v69;
  double v70;
  uint64_t v71;
  BOOL hasExceptionsAfterHandlingTraps;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  JSC::VM *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  double v93;
  JSC::VM *v94;
  __int128 v95;
  void *v96;
  uint64_t v97;
  JSC::JSGlobalObject **v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD v101[2];

  v11 = *((_QWORD *)this + 7);
  v94 = (JSC::VM *)v11;
  v12 = *((_QWORD *)a2 + 5);
  if ((v12 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v12 + 5) != 59)
    return JSC::throwTypeError(this, &v94);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    *(_QWORD *)&v95 = 10;
  }
  else
  {
    v13 = *((_QWORD *)a2 + 6);
    *(_QWORD *)&v95 = v13;
    if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 2)
    {
LABEL_6:
      v14 = *(_QWORD *)(v12 + 16);
      v15 = (int **)(v13 + 8);
      if ((*(_BYTE *)(v13 + 8) & 1) != 0)
        v15 = JSC::JSRopeString::resolveRope(v13, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (*(_DWORD *)(v11 + 80))
      {
        v53 = *(_DWORD *)(v11 + 80);
        if ((v53 & 0x27) != 0 && (v53 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v11 + 16))
          return 6;
      }
      v16 = (JSC::VM *)*((_QWORD *)this + 7);
      v17 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)&v95 = v17;
      if (v17 < 0xFFFE000000000000 || (v17 & 0x80000000) != 0)
      {
        if (v17 < 0xFFFE000000000000)
        {
          if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
            JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v95, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
          else
            *(_QWORD *)&v70 = v17 - 0x2000000000000;
          HIDWORD(a10) = 0;
          v55 = trunc(v70 + 0.0);
        }
        else
        {
          v55 = (double)(int)v17;
        }
        if (!*((_DWORD *)v16 + 20)
          || (v93 = v55,
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8), v55 = v93, !hasExceptionsAfterHandlingTraps))
        {
          if (*v15)
          {
            LODWORD(a10) = (*v15)[1];
            v56 = (double)*(unint64_t *)&a10;
          }
          else
          {
            v56 = 0.0;
          }
          if (v55 <= v56)
          {
            if (v55 <= 0.0)
              v55 = 0.0;
            LODWORD(v17) = v55;
LABEL_14:
            if (*(_DWORD *)(v11 + 80))
            {
              v54 = *(_DWORD *)(v11 + 80);
              if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v11 + 16))
                return 6;
            }
            v19 = v14 & 0xFFFFFFFFFFFFFFFCLL;
            v20 = *(_WORD *)((v14 & 0xFFFFFFFFFFFFFFFCLL) + 18);
            if ((v20 & 2) == 0 && (v20 & 0x80) == 0)
            {
              v82 = (JSC::VM *)*((_QWORD *)this + 7);
              v90 = JSC::RegExp::match((JSC::RegExp *)v19, this, (const WTF::String *)v15, 0, a5, a6, a7, a8);
              v91 = v83;
              if ((!*((_DWORD *)v82 + 20)
                 || !JSC::VM::hasExceptionsAfterHandlingTraps(v82, v83, v84, v85, v86, v87, v88, v89))
                && v90 != -1)
              {
                *((_QWORD *)this + 269) = v19;
                *((_QWORD *)this + 268) = v13;
                *((_QWORD *)this + 265) = v90;
                *((_QWORD *)this + 266) = v91;
                *((_BYTE *)this + 2136) = 0;
                if (*((_DWORD *)v82 + 190) >= *((unsigned __int8 *)this + 7))
                  JSC::Heap::writeBarrierSlowPath((uint64_t)v82 + 192, (unint64_t)this);
                return 7;
              }
              return 6;
            }
            if ((_DWORD)v17 == -1)
            {
              *(_QWORD *)&v95 = *((_QWORD *)this + 7);
              if ((*(_BYTE *)(v12 + 16) & 1) != 0)
                JSC::throwTypeError((unint64_t)this, (JSC::VM **)&v95, (uint64_t)"Attempted to assign to readonly property.", 42);
              else
                *(_QWORD *)(v12 + 24) = 0xFFFE000000000000;
              return 6;
            }
            v21 = *((_QWORD *)this + 7);
            v101[0] = this;
            v22 = *v15;
            if (*v15)
            {
              v23 = v22[4];
              v24 = (v23 & 4) == 0;
              v25 = *((_QWORD *)v22 + 1);
              LODWORD(v22) = v22[1];
              v26 = (v23 >> 2) & 1;
            }
            else
            {
              v24 = 0;
              v25 = 0;
              LOBYTE(v26) = 1;
            }
            v27 = *(unsigned __int8 *)(v19 + 16);
            v92 = (unint64_t *)(v21 + 90552);
            if (v27 == 1)
            {
              v28 = *(_QWORD *)(v19 + 40);
              if (v24)
              {
                v71 = *(_QWORD *)(v28 + 72);
                if (v71 && *(_DWORD *)(v71 + 4))
                  goto LABEL_23;
              }
              else
              {
                v29 = *(_QWORD *)(v28 + 56);
                if (v29 && *(_DWORD *)(v29 + 4))
                {
LABEL_23:
                  v98 = (JSC::JSGlobalObject **)v101;
                  v99 = v21;
                  v100 = v19;
                  goto LABEL_24;
                }
              }
            }
            else if (v27 == 2 || !*(_BYTE *)(v19 + 16))
            {
              goto LABEL_88;
            }
            *(_QWORD *)&v95 = v25;
            DWORD2(v95) = (_DWORD)v22;
            BYTE12(v95) = v26;
            LOBYTE(v96) = 1;
            JSC::RegExp::compileMatchOnly(v19, v21, v24, &v95);
            v27 = *(unsigned __int8 *)(v19 + 16);
LABEL_88:
            v98 = (JSC::JSGlobalObject **)v101;
            v99 = v21;
            v100 = v19;
            if (v27 != 1)
            {
              if (!v27)
                goto LABEL_132;
              goto LABEL_93;
            }
            v28 = *(_QWORD *)(v19 + 40);
LABEL_24:
            v30 = *(unsigned __int8 *)(v28 + 104);
            v96 = 0;
            v97 = 0;
            v31 = *(_QWORD *)(v21 + 8);
            *(_QWORD *)&v95 = v21;
            *((_QWORD *)&v95 + 1) = v31;
            *(_QWORD *)(v21 + 90552) = v19;
            if (!v30)
              goto LABEL_25;
            v48 = (unsigned __int8 *)(v21 + 93049);
            if (__ldaxr((unsigned __int8 *)(v21 + 93049)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v48))
            {
LABEL_52:
              v50 = *(void **)(v21 + 93056);
              if (!v50)
              {
                v50 = (void *)WTF::fastMalloc((WTF *)0x2000);
                bzero(v50, 0x2000uLL);
                v80 = *(_QWORD *)(v21 + 93056);
                *(_QWORD *)(v21 + 93056) = v50;
                if (v80)
                {
                  WTF::fastFree(v80, v73, v74, v75, v76, v77, v78, v79);
                  v50 = *(void **)(v21 + 93056);
                }
              }
              v96 = v50;
              LODWORD(v97) = 0x2000;
LABEL_25:
              v32 = *v15;
              if (*v15)
              {
                if ((v32[4] & 4) == 0)
                {
                  v35 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, __int128 *))(*(_QWORD *)(v19 + 40)
                                                                                              + 64))(*((_QWORD *)v32 + 1), v17, v32[1], 0, &v95);
LABEL_29:
                  v43 = v35;
                  v44 = v36;
                  if (!v96)
                    goto LABEL_30;
                  v51 = (unsigned __int8 *)(v95 + 93049);
                  v52 = __ldxr((unsigned __int8 *)(v95 + 93049));
                  if (v52 == 1)
                  {
                    if (!__stlxr(0, v51))
                    {
LABEL_30:
                      if (!HIDWORD(v97))
                        *(_QWORD *)(v95 + 90552) = 0;
                      if (v43 != -2)
                      {
                        if (!*(_DWORD *)(v21 + 80))
                          goto LABEL_148;
LABEL_33:
                        v57 = *(_DWORD *)(v21 + 80);
                        if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
                          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, v37, v38, v39, v40, v41, v42);
                        if (*(_QWORD *)(v21 + 16))
                        {
                          v44 = 0;
                          v43 = -1;
                        }
                        else
                        {
LABEL_148:
                          if (v43 != -1)
                          {
                            *((_QWORD *)this + 269) = v19;
                            *((_QWORD *)this + 268) = v13;
                            *((_QWORD *)this + 265) = v43;
                            *((_QWORD *)this + 266) = v44;
                            *((_BYTE *)this + 2136) = 0;
                            if (*(_DWORD *)(v21 + 760) >= *((unsigned __int8 *)this + 7))
                              JSC::Heap::writeBarrierSlowPath(v21 + 192, (unint64_t)this);
                          }
                        }
                        if (*(_DWORD *)(v11 + 80))
                        {
                          v58 = *(_DWORD *)(v11 + 80);
                          if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
                            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v37, v38, v39, v40, v41, v42);
                          if (*(_QWORD *)(v11 + 16))
                            return 6;
                        }
                        *(_QWORD *)&v95 = *((_QWORD *)this + 7);
                        if ((*(_BYTE *)(v12 + 16) & 1) != 0)
                        {
                          JSC::throwTypeError((unint64_t)this, (JSC::VM **)&v95, (uint64_t)"Attempted to assign to readonly property.", 42);
LABEL_43:
                          if (v43 != -1)
                            return 7;
                          return 6;
                        }
                        if (HIDWORD(v44))
                        {
                          v59 = (double)v44;
                        }
                        else
                        {
                          if ((v44 & 0x80000000) == 0)
                          {
                            v45 = v44 | 0xFFFE000000000000;
LABEL_42:
                            *(_QWORD *)(v12 + 24) = v45;
                            goto LABEL_43;
                          }
                          v59 = (double)v44;
                        }
                        v45 = *(_QWORD *)&v59 + 0x2000000000000;
                        goto LABEL_42;
                      }
                      JSC::RegExp::byteCodeCompileIfNecessary((JSC::RegExp *)v19, (JSC::VM *)v21);
                      if (!*(_BYTE *)(v19 + 16))
                      {
LABEL_132:
                        v43 = JSC::RegExp::matchInline<(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int)::{lambda(void)#1}::operator()(&v98);
                        v44 = v81;
                        goto LABEL_33;
                      }
LABEL_93:
                      *(_QWORD *)&v95 = &v96;
                      *((_QWORD *)&v95 + 1) = 32;
                      v60 = *(_DWORD **)(v19 + 48);
                      if (v60 && v60[5])
                        v61 = *v60 + 2 * *(_DWORD *)(v19 + 24);
                      else
                        v61 = 2 * *(_DWORD *)(v19 + 24);
                      v62 = v61 + 2;
                      v63 = &v96;
                      if ((v61 + 2) >= 0x21)
                      {
                        WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v95, v62);
                        v63 = (void **)v95;
                      }
                      HIDWORD(v95) = v62;
                      *v92 = v19;
                      v64 = *v15;
                      if (*v15)
                      {
                        v65 = *((_QWORD *)v64 + 1);
                        v66 = v64[1] | ((unint64_t)((v64[4] >> 2) & 1) << 32);
                      }
                      else
                      {
                        v65 = 0;
                        v66 = 0x100000000;
                      }
                      v67 = JSC::Yarr::interpret(*(_QWORD *)(v19 + 32), v65, v66, v17, (uint64_t)v63, a6, a7, a8);
                      *v92 = 0;
                      if ((v67 & 0x80000000) != 0)
                      {
                        v44 = 0;
                        v43 = -1;
                      }
                      else
                      {
                        v43 = v67;
                        v44 = *((unsigned int *)v63 + 1);
                      }
                      v69 = v95;
                      if (&v96 != (void **)v95 && (_QWORD)v95)
                      {
                        *(_QWORD *)&v95 = 0;
                        DWORD2(v95) = 0;
                        WTF::fastFree(v69, v68, v37, v38, v39, v40, v41, v42);
                      }
                      goto LABEL_33;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v51, 0, v37, v38, v39, v40, v41, v42);
                  goto LABEL_30;
                }
                v33 = *((_QWORD *)v32 + 1);
                v34 = v32[1];
              }
              else
              {
                v33 = 0;
                v34 = 0;
              }
              v35 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, __int128 *))(*(_QWORD *)(v19 + 40)
                                                                                            + 48))(v33, v17, v34, 0, &v95);
              goto LABEL_29;
            }
            WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v48);
            goto LABEL_52;
          }
        }
      }
      else
      {
        v18 = *v15;
        if (*v15)
          LODWORD(v18) = v18[1];
        if (v18 >= v17)
          goto LABEL_14;
      }
      LODWORD(v17) = -1;
      goto LABEL_14;
    }
  }
  v47 = JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v95, (uint64_t)this, 0, a4, a5, a6, a7, a8);
  if (v47)
  {
    v13 = (unint64_t)v47;
    v11 = *((_QWORD *)this + 7);
    goto LABEL_6;
  }
  return 10;
}

uint64_t JSC::regExpProtoFuncMatchFast(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::RegExpObject *v11;
  JSC::JSString *v12;

  v11 = (JSC::RegExpObject *)*((_QWORD *)a2 + 5);
  v12 = (JSC::JSString *)*((_QWORD *)a2 + 6);
  if ((*(_WORD *)((*((_QWORD *)v11 + 2) & 0xFFFFFFFFFFFFFFFCLL) + 18) & 2) != 0)
    return JSC::RegExpObject::matchGlobal(v11, this, v12, a4, a5, a6, a7, a8, a9);
  else
    return JSC::RegExpObject::execInline(v11, this, v12, a4, a5, a6, a7, a8, a9);
}

unint64_t JSC::regExpProtoFuncSearchFast(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int **v13;
  JSC::RegExp *v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v28;
  unsigned __int8 *v29;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v11 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  v12 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 16);
  v29 = v11;
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0 || v11[5] != 2)
    v11 = JSC::JSValue::toStringSlowCase(&v29, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v13 = (int **)(v11 + 8);
  if ((v11[8] & 1) != 0)
    v13 = JSC::JSRopeString::resolveRope((unint64_t)v11, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v14 = (JSC::RegExp *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = JSC::RegExp::match(v14, this, (const WTF::String *)v13, 0, a5, a6, a7, a8);
  v24 = v16;
  v25 = v17;
  if (*((_DWORD *)v15 + 20))
  {
    v26 = -1;
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v15, v17, v18, v19, v20, v21, v22, v23) || v24 == -1)
      goto LABEL_11;
  }
  else if (v16 == -1)
  {
    v26 = -1;
    goto LABEL_11;
  }
  *((_QWORD *)this + 269) = v14;
  *((_QWORD *)this + 268) = v11;
  *((_QWORD *)this + 265) = v24;
  *((_QWORD *)this + 266) = v25;
  *((_BYTE *)this + 2136) = 0;
  if (*((_DWORD *)v15 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v15 + 192, (unint64_t)this);
  v26 = v24;
LABEL_11:
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v17, v18, v19, v20, v21, v22, v23))
    return 0;
  if (v26 == -1)
    return 0xFFFE0000FFFFFFFFLL;
  if (HIDWORD(v26))
  {
    v28 = (double)v26;
  }
  else
  {
    if ((v26 & 0x80000000) == 0)
      return v26 | 0xFFFE000000000000;
    v28 = (double)v26;
  }
  return *(_QWORD *)&v28 + 0x2000000000000;
}

unint64_t JSC::regExpProtoFuncSplitFast(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  uint64_t v11;
  uint64_t v12;
  rlim_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  JSC::JSGlobalObject *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t v24;
  uint64_t v25;
  JSC::VM *v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int32x4_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  JSC::JSGlobalObject *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  WTF::StringImpl *v54;
  unsigned __int8 v55;
  unint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  JSC::VM *v60;
  int v61;
  JSC::VM *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unint64_t v66;
  int v67;
  WTF::StringImpl *v68;
  unsigned __int8 v69;
  unint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  WTF::StringImpl *v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  JSC::JSGlobalObject *v96;
  JSC *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  BOOL v101;
  int v102;
  int *v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  BOOL v120;
  JSC::JSObject *v121;
  JSC::VM *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  JSC::JSGlobalObject *v126;
  unint64_t v127;
  JSC *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  WTF::StringImpl *v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  JSC::JSGlobalObject *v148;
  unint64_t v149;
  unint64_t v150;
  BOOL v151;
  uint64_t v152;
  int *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  JSC::JSGlobalObject *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int *v166;
  int v167;
  _opaque_pthread_t *v168;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int32x4_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *stackaddr_np;
  _opaque_pthread_t *v199;
  unint64_t v200;
  _opaque_pthread_t *v201;
  rlim_t rlim_cur;
  uint64_t v203;
  JSC::JSGlobalObject *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  JSC::JSGlobalObject *v209;
  unint64_t v210;
  unint64_t v211;
  int v212;
  int *v213;
  unint64_t v214;
  unint64_t *v215;
  int v216;
  int v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  JSC::JSGlobalObject *v222;
  JSC *v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  JSC::JSGlobalObject *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  BOOL v236;
  int v237;
  int v238;
  JSC::VM *v239;
  JSC::JSGlobalObject *v240;
  JSC::VM *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int32x4_t v246;
  unint64_t v248;
  int v249;
  int v250;
  int v251;
  int v252;
  uint64_t v253;
  unint64_t OutOfMemoryError;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  double v260;
  JSC::Exception *v261;
  int v262;
  unint64_t v263;
  unsigned int v264;
  uint64_t v265;
  unsigned int v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  void *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  JSC::JSGlobalObject *v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  JSC::JSGlobalObject *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  JSC::JSGlobalObject *v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unsigned int v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  JSC::VM *v321;
  JSC::JSGlobalObject *v322;
  JSC::VM *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int32x4_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  unsigned int v336;
  unint64_t v337;
  unint64_t v338;
  JSC *v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  JSC::JSGlobalObject *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  uint64_t v348;
  JSC::JSGlobalObject *v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t SlowCase;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  JSC::JSGlobalObject *v372;
  unint64_t v373;
  unint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned int v380;
  uint64_t v381;
  JSC::JSGlobalObject *v382;
  unint64_t v383;
  unsigned int v384;
  unint64_t v385;
  uint64_t v386;
  unint64_t v387;
  uint64_t v388;
  JSC::JSGlobalObject *v389;
  uint64_t v390;
  unsigned int v391;
  uint64_t v392;
  int v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  JSC::JSGlobalObject *v404;
  JSC::JSGlobalObject *v405;
  JSC::JSGlobalObject *v406;
  JSC::JSGlobalObject *v407;
  JSC::JSGlobalObject *v408;
  JSC::JSGlobalObject *v409;
  JSC::JSGlobalObject *v410;
  JSC::JSGlobalObject *v411;
  JSC::JSGlobalObject *v412;
  JSC::JSGlobalObject *v413;
  JSC::JSGlobalObject *v414;
  JSC::JSGlobalObject *v415;
  unsigned int v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unint64_t v432;
  unint64_t v433;
  unint64_t v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  uint64_t v449;
  uint64_t v450;
  JSC *v451;
  JSC *v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  unint64_t v468;
  unint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t *v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t v475;
  char *v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  unint64_t v481;
  unint64_t v482;
  unint64_t StatusReg;
  uint64_t v484;
  unsigned int v485;
  rlim_t v486;
  uint64_t *v487;
  int32x4_t v488;
  unint64_t *v489;
  int v490;
  JSC *v491;
  unint64_t *v492;
  JSC::VM *v493;
  unsigned int v494;
  int **v495;
  unint64_t v496;
  rlimit v497;
  unsigned int *v498;
  JSC *v499;
  unint64_t *v500;
  JSC::VM **v501;
  unsigned int *v502;
  unint64_t v503;
  unsigned int v504;
  unsigned int v505;
  unsigned int v506;
  uint64_t v507;
  unsigned int v508;
  unint64_t v509;
  JSC::VM *v510;
  JSC::JSGlobalObject *v511;
  _BYTE v512[2];
  unsigned int *v513;
  uint64_t v514;
  int v515;
  char v516;
  _QWORD v517[2];

  v10 = this;
  v11 = *((_QWORD *)this + 7);
  v510 = (JSC::VM *)v11;
  v511 = this;
  v12 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 16);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v497.rlim_cur = 10;
LABEL_193:
    v13 = (rlim_t)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v497, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_4;
  }
  v13 = *((_QWORD *)a2 + 6);
  v497.rlim_cur = v13;
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
    goto LABEL_193;
LABEL_4:
  v509 = v13;
  v495 = (int **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    v495 = JSC::JSRopeString::resolveRope(v13, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v251 = *(_DWORD *)(v11 + 80);
    if ((v251 & 0x27) != 0 && (v251 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v508 = 0;
  if ((unint64_t)(*((int *)a2 + 8) - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v507 = 10;
  }
  else
  {
    v507 = *((_QWORD *)a2 + 7);
    if (v507 != 10)
    {
      v14 = JSC::JSValue::toUInt32((JSC::JSObject **)&v507, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_10;
    }
  }
  v14 = -1;
LABEL_10:
  v506 = v14;
  if (*(_DWORD *)(v11 + 80))
  {
    v252 = *(_DWORD *)(v11 + 80);
    if ((v252 & 0x27) != 0 && (v252 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v496 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  if (!*v495)
  {
    v505 = 0;
    if (v14)
    {
LABEL_227:
      v181 = JSC::constructEmptyArray((unint64_t)v10, 0, 0, 0, a5, a6, a7, a8, (__n128)a9);
      if (!*(_DWORD *)(v11 + 80)
        || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v174, v175, v176, v177, v178, v179, v180))
      {
        v189 = JSC::RegExp::match((JSC::RegExp *)v496, v10, (const WTF::String *)v495, 0, v177, v178, v179, v180);
        if (!*(_DWORD *)(v11 + 80)
          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v182, v183, v184, v185, v186, v187, v188))
        {
          if (v189 != -1)
            return v181;
          JSC::JSObject::putDirectIndex(v181, (unint64_t)v10, 0, v13, v185, v186, v187, v188, v190);
          if (!*(_DWORD *)(v11 + 80)
            || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v191, v192, v193, v194, v195, v196, v197))
          {
            return v181;
          }
        }
      }
      return 0;
    }
    return JSC::constructEmptyArray((unint64_t)v10, 0, 0, 0, a5, a6, a7, a8, (__n128)a9);
  }
  v15 = (*v495)[1];
  v505 = 0;
  if (!v14)
    return JSC::constructEmptyArray((unint64_t)v10, 0, 0, 0, a5, a6, a7, a8, (__n128)a9);
  if (!v15)
    goto LABEL_227;
  v494 = v15;
  v504 = 0;
  v16 = *(unsigned __int16 *)(v496 + 18);
  v17 = *((_DWORD *)v10 + 227);
  if (v17)
    v18 = 16 * (v17 & 0xFFFFFFFE);
  else
    v18 = 0;
  v503 = JSC::JSArray::tryCreate((JSC::JSArray *)v11, v18, (JSC::Structure *)1, a4, a5, a6, a7, a8, (__n128)a9);
  if (!v503)
  {
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v10, v19);
    v261 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v261 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)OutOfMemoryError, 0, v255, v256, v257, v258, v259);
    }
    JSC::VM::throwException((JSC::VM *)v11, v10, v261, v260, v255, v256, v257, v258, v259);
    return 0;
  }
  v25 = 0;
  v472 = (unint64_t *)(v11 + 41968);
  v489 = (unint64_t *)(v11 + 39696);
  v492 = (unint64_t *)(v11 + 39432);
  v485 = v16;
  v490 = v16 & 0x60;
  v26 = (JSC::VM *)*((_QWORD *)v10 + 7);
  v27 = (uint64_t *)((char *)v10 + 2200);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v24.i64[0] = 17302016;
  v488 = v24;
  v484 = v11 + 81168;
  v473 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v486 = v13;
  v487 = (uint64_t *)((char *)v10 + 2200);
  v491 = (JSC *)v11;
  v28 = v494;
  v493 = v26;
  while (1)
  {
    v29 = v508;
    if (*((_DWORD *)v26 + 20))
    {
      v235 = *((_DWORD *)v26 + 20);
      if ((v235 & 0x27) != 0 && (v235 & 0x20) == 0)
      {
        v313 = v25;
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v26 + 64), 7u, v20, v25, v28, v21, v22, v23);
        v25 = v313;
        v26 = v493;
        v28 = v494;
      }
      if (*((_QWORD *)v26 + 2))
        v236 = 1;
      else
        v236 = v29 > 0x1869F;
      if (v236)
      {
LABEL_308:
        v62 = v510;
        goto LABEL_309;
      }
    }
    else if (v508 > 0x1869F)
    {
      goto LABEL_308;
    }
    v30 = *((_QWORD *)v10 + 7);
    JSC::RegExp::match(v496, (uint64_t)v10, (uint64_t *)v495, v25, (uint64_t)v27, v21, v22, v23);
    v35 = v34;
    if (*(_DWORD *)(v30 + 80))
    {
      v237 = *(_DWORD *)(v30 + 80);
      if ((v237 & 0x27) != 0 && (v237 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v30 + 64), 7u, v20, v25, v32, v21, v22, v23);
      if (*(_QWORD *)(v30 + 16))
      {
        v36 = 0;
LABEL_147:
        v35 = -1;
        v28 = v494;
        v37 = v492;
        v26 = v493;
        goto LABEL_26;
      }
    }
    v36 = *v27;
    if (v35 == -1)
      goto LABEL_147;
    v37 = v492;
    if (*((_DWORD *)v10 + 553) <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x198B9EC14);
    }
    v38 = *(int *)(v36 + 4);
    *((_QWORD *)v10 + 269) = v496;
    *((_QWORD *)v10 + 268) = v13;
    *((_QWORD *)v10 + 265) = (int)v35;
    *((_QWORD *)v10 + 266) = v38;
    *((_BYTE *)v10 + 2136) = 0;
    v28 = v494;
    v26 = v493;
    if (*(_DWORD *)(v30 + 760) >= *((unsigned __int8 *)v10 + 7))
    {
      JSC::Heap::writeBarrierSlowPath(v30 + 192, (unint64_t)v10);
      v37 = v492;
      v26 = v493;
      v28 = v494;
    }
LABEL_26:
    if (*((_DWORD *)v26 + 20))
    {
      v238 = *((_DWORD *)v26 + 20);
      if ((v238 & 0x27) != 0 && (v238 & 0x20) == 0)
      {
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v26 + 64), 7u, v20, v25, v28, v21, v22, v23);
        v37 = v492;
        v26 = v493;
        v28 = v494;
      }
      if (*((_QWORD *)v26 + 2))
        goto LABEL_308;
    }
    if ((v35 & 0x80000000) == 0)
      break;
    if ((v485 & 0x80) == 0)
      goto LABEL_308;
    v40 = (unint64_t)*v495;
    if (!*v495)
    {
      v25 = ++v504;
      goto LABEL_39;
    }
    v43 = *(_DWORD *)v40;
    v42 = *(_DWORD *)v40 + 2;
    *(_DWORD *)v40 = v42;
    v44 = v504;
    if (v490)
    {
      *(_DWORD *)v40 = v43 + 4;
      v25 = (v44 + 1);
      if (v25 < v28)
      {
        v264 = *(_DWORD *)(v40 + 4);
        if (v264 > v44)
        {
          if ((*(_BYTE *)(v40 + 16) & 4) == 0 && v264 > v25)
          {
            v390 = *(_QWORD *)(v40 + 8);
            if ((*(_WORD *)(v390 + 2 * v44) & 0xFC00) == 0xD800)
            {
              v391 = v44 + 2;
              if (*(_WORD *)(v390 + 2 * v25) >> 10 == 55)
                v25 = v391;
              else
                v25 = v25;
            }
          }
          v13 = v486;
          v27 = v487;
          v11 = (uint64_t)v491;
          v28 = v494;
          v26 = v493;
        }
      }
      if (v42)
      {
        *(_DWORD *)v40 = v42;
      }
      else
      {
        v268 = v25;
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v40, (WTF::AtomStringImpl *)v31, v20, v25, v28, v21, v22, v23);
        WTF::fastFree(v269, v270, v271, v272, v273, v274, v275, v276);
        v25 = v268;
        v26 = v493;
        v28 = v494;
        v42 = *(_DWORD *)v40;
      }
    }
    else
    {
      v25 = v504 + 1;
    }
LABEL_37:
    v504 = v25;
    v45 = v42 - 2;
    if (!v45)
    {
      v106 = v25;
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v40, (WTF::AtomStringImpl *)v31, v20, v25, v28, v21, v22, v23);
      v109 = *(_QWORD *)(StatusReg + 752);
      if (v109)
      {
        if (!(v40 >> 43)
          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v40 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v40)) & 1) != 0)
        {
          goto LABEL_135;
        }
        if (v40 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v40 >> 24)
        {
          v107 = 0;
        }
        else
        {
          v107 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v40 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                    + 24) >> (2 * ((BYTE3(v40) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v107 == 1)
          {
LABEL_135:
            v110 = *(unsigned int *)(v109 + 8000);
            if (v110 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v109, v40, (os_unfair_lock_s *)5, v107, v108, v21, v22, v23);
            }
            else
            {
              *(_QWORD *)(v109 + 8 * v110) = v40 | 0x5000000000000;
              *(_DWORD *)(v109 + 8000) = v110 + 1;
            }
            goto LABEL_137;
          }
        }
        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v109, v40, 1, v107, v108, v21, v22, v23);
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v40, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_137:
      v28 = v494;
      v26 = v493;
      v25 = v106;
      goto LABEL_39;
    }
    *(_DWORD *)v40 = v45;
LABEL_39:
    if (v25 >= v28)
      goto LABEL_308;
  }
  if (v35 >= v28)
    goto LABEL_308;
  v504 = v35;
  v25 = *(unsigned int *)(v36 + 4);
  v39 = v505;
  if ((_DWORD)v25 == v505)
  {
    v40 = (unint64_t)*v495;
    if (*v495)
    {
      v41 = *(_DWORD *)v40;
      v42 = *(_DWORD *)v40 + 2;
      *(_DWORD *)v40 = v42;
      v27 = v487;
      if (v490)
      {
        *(_DWORD *)v40 = v41 + 4;
        v265 = v35 + 1;
        if (v265 < v28)
        {
          v266 = *(_DWORD *)(v40 + 4);
          if (v266 > v35)
          {
            if ((*(_BYTE *)(v40 + 16) & 4) == 0 && v266 > v265)
            {
              v392 = *(_QWORD *)(v40 + 8);
              if ((*(_WORD *)(v392 + 2 * v35) & 0xFC00) == 0xD800)
              {
                if (*(_WORD *)(v392 + 2 * v265) >> 10 == 55)
                  v265 = v35 + 2;
                else
                  v265 = v265;
              }
            }
            v13 = v486;
            v27 = v487;
            v11 = (uint64_t)v491;
          }
        }
        if (v42)
        {
          *(_DWORD *)v40 = v42;
        }
        else
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v40, (WTF::AtomStringImpl *)v31, v20, v25, v28, v21, v22, v23);
          WTF::fastFree(v277, v278, v279, v280, v281, v282, v283, v284);
          v42 = *(_DWORD *)v40;
        }
        v28 = v494;
        v26 = v493;
        v25 = v265;
      }
      else
      {
        v25 = v35 + 1;
      }
      goto LABEL_37;
    }
    v25 = v35 + 1;
    v504 = v35 + 1;
LABEL_131:
    v27 = v487;
    goto LABEL_39;
  }
  v46 = *(unsigned int *)(v496 + 24);
  v47 = v503;
  v48 = v511;
  v49 = v508;
  v50 = ++v508;
  v51 = v509;
  v52 = HIDWORD(v509);
  v53 = v35 - v505;
  if (v35 == v505)
  {
    v56 = *v472;
    goto LABEL_48;
  }
  if (v505)
    goto LABEL_43;
  v113 = *(_QWORD *)(v509 + 8);
  if (v113)
    LODWORD(v113) = *(_DWORD *)(v113 + 4);
  v56 = v509;
  if ((_DWORD)v113 != v53)
  {
LABEL_43:
    if (v53 == 1)
    {
      v54 = *(WTF::StringImpl **)(v509 + 8);
      if (!v54 || *((_DWORD *)v54 + 1) <= v505)
      {
        v55 = 0;
LABEL_47:
        v56 = *((_QWORD *)v491 + v55 + 5277);
        goto LABEL_48;
      }
      v381 = v25;
      v427 = v46;
      v382 = v511;
      v446 = v509;
      v383 = HIDWORD(v509);
      v384 = WTF::StringImpl::at(v54, v505);
      v52 = v383;
      v51 = v446;
      v48 = v382;
      v46 = v427;
      v25 = v381;
      v37 = v492;
      v26 = v493;
      v28 = v494;
      if (v384 <= 0xFF)
      {
        v55 = v384;
        goto LABEL_47;
      }
LABEL_139:
      v111 = *(_QWORD *)(v51 + 8);
      if (v111)
      {
        if ((*(_BYTE *)(v111 + 16) & 4) != 0)
          v112 = 7;
        else
          v112 = 3;
      }
      else
      {
        v112 = 7;
      }
      v56 = *v37;
      if (*v37 >= v37[1])
      {
        v56 = v37[2];
        if ((v56 & 1) != 0)
        {
          v399 = v25;
          v423 = v46;
          v409 = v48;
          v442 = v51;
          v358 = v52;
          JSC::sanitizeStackForVM(v491, (JSC::VM *)v31, v20, v25, v28, v21, v22, v23);
          SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v491 + 39408, (uint64_t)v491 + 192, 32, 0, 0, v359, v360, v361);
          v52 = v358;
          v51 = v442;
          v48 = v409;
          v46 = v423;
          v25 = v399;
          v37 = v492;
          v26 = v493;
          v28 = v494;
          v56 = SlowCase;
LABEL_145:
          *(_DWORD *)v56 = v489[227] >> 4;
          v33 = v488;
          *(_DWORD *)(v56 + 4) = v488.i32[0];
          *(_QWORD *)(v56 + 8) = v112;
          *(_DWORD *)(v56 + 16) = v53;
          *(_DWORD *)(v56 + 20) = v51;
          *(_WORD *)(v56 + 24) = v52;
          *(_WORD *)(v56 + 26) = v39;
          *(_DWORD *)(v56 + 28) = HIWORD(v39);
          if (*((_BYTE *)v491 + 755))
            __dmb(0xAu);
          goto LABEL_48;
        }
        v263 = *(_QWORD *)(v56 + 8) ^ v37[3];
        v37[1] = v56 + HIDWORD(v263);
        v37[2] = v56 + (int)v263;
      }
      *v37 = v56 + 32;
      goto LABEL_145;
    }
    if (v53 != 2)
      goto LABEL_139;
    v132 = *(WTF::StringImpl **)(v509 + 8);
    if (!v132)
    {
      v134 = 0;
      goto LABEL_178;
    }
    v133 = *((_DWORD *)v132 + 1);
    if (v133 > v505)
    {
      v470 = HIDWORD(v509);
      v415 = v511;
      v430 = v46;
      v386 = v25;
      v387 = v509;
      v134 = WTF::StringImpl::at(v132, v505);
      v51 = v387;
      v132 = *(WTF::StringImpl **)(v387 + 8);
      if (!v132)
      {
        v28 = v494;
        v37 = v492;
        v26 = v493;
        v25 = v386;
        v46 = v430;
        v48 = v415;
        v52 = v470;
        goto LABEL_178;
      }
      v133 = *((_DWORD *)v132 + 1);
      v28 = v494;
      v37 = v492;
      v26 = v493;
      v25 = v386;
      v46 = v430;
      v48 = v415;
      v52 = v470;
    }
    else
    {
      v134 = 0;
    }
    v31 = v39 + 1;
    if (v133 > v31)
    {
      v388 = v25;
      v431 = v46;
      v389 = v48;
      v448 = v51;
      v471 = v52;
      LODWORD(v132) = WTF::StringImpl::at(v132, v31);
      v52 = v471;
      v51 = v448;
      v48 = v389;
      v46 = v431;
      v25 = v388;
      v37 = v492;
      v26 = v493;
      v28 = v494;
    }
    else
    {
      LODWORD(v132) = 0;
    }
LABEL_178:
    if ((v132 | v134) > 0x7F)
      goto LABEL_139;
    LOBYTE(v517[0]) = v134;
    BYTE1(v517[0]) = (_BYTE)v132;
    v513 = (unsigned int *)v517;
    v514 = 2;
    v135 = ((_DWORD)v132 << 11) ^ ((v134 - 1640531527) << 16) ^ (v134 - 1640531527);
    v136 = (v135 + (v135 >> 11)) ^ (8 * (v135 + (v135 >> 11)));
    v137 = (v136 + (v136 >> 5)) ^ (4 * (v136 + (v136 >> 5)));
    v138 = ((v137 + (v137 >> 15)) ^ ((v137 + (v137 >> 15)) << 10)) & 0xFFFFFF;
    if (v138)
      v139 = v138;
    else
      v139 = 0x800000;
    v515 = v139;
    v476 = (char *)v491 + 81168;
    v450 = v139 & 0x1FF;
    v140 = *((_QWORD *)v491 + v450 + 10146);
    if (v140)
    {
      v141 = *(_QWORD *)(v140 + 8);
      v142 = (v141 & 1) != 0 ? 0 : (WTF::StringImpl *)v141;
      v143 = *((_DWORD *)v142 + 4);
      if (v143 < 0x100)
      {
        v203 = v25;
        v418 = v46;
        v204 = v48;
        v435 = v51;
        v205 = v52;
        v144 = WTF::StringImpl::hashSlowCase(v142);
        v52 = v205;
        v51 = v435;
        v48 = v204;
        v46 = v418;
        v25 = v203;
        v37 = v492;
        v26 = v493;
        v28 = v494;
      }
      else
      {
        v144 = v143 >> 8;
      }
      if (v144 == v139)
      {
        v145 = (uint64_t)v142;
        v146 = v25;
        v147 = v46;
        v148 = v48;
        v149 = v51;
        v150 = v52;
        v151 = WTF::equalInternal<unsigned char>(v145, (unint64_t)v517, 2);
        v52 = v150;
        v51 = v149;
        v48 = v148;
        v46 = v147;
        v25 = v146;
        v37 = v492;
        v26 = v493;
        v28 = v494;
        if (v151)
        {
          v56 = *(_QWORD *)&v476[8 * v450];
          goto LABEL_48;
        }
      }
    }
    if (v513)
    {
      if (v514)
      {
        v457 = v52;
        v158 = v51;
        v159 = v48;
        v160 = v46;
        v161 = v25;
        if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
        {
          __clrex();
        }
        else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
        {
LABEL_207:
          v163 = *(_QWORD *)(v473 + 736);
          if (!v163)
            v163 = WTF::Thread::initializeCurrentTLS(0);
          WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v163 + 56), (uint64_t)&v513, v25, v28, v21, v22, v23, (uint64_t)&v497);
          v166 = (int *)(16 * *(unsigned int *)v497.rlim_cur);
          if (!(_BYTE)v498)
            *v166 += 2;
          v167 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
          if (v167 == 1)
          {
            if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
              goto LABEL_266;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v20, v164, v165, v21, v22, v23);
LABEL_266:
          v28 = v494;
          v37 = v492;
          v26 = v493;
          v25 = v161;
          v46 = v160;
          v48 = v159;
          v51 = v158;
          v52 = v457;
          goto LABEL_267;
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
        goto LABEL_207;
      }
      v166 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    else
    {
      v166 = 0;
    }
LABEL_267:
    v212 = v166[4];
    v213 = v166;
    if ((v212 & 3) == 2)
    {
      v213 = v166;
      do
      {
        v213 = (int *)*((_QWORD *)v213 + 3);
        v212 = v213[4];
      }
      while ((v212 & 3) == 2);
    }
    if ((v212 & 8) != 0)
    {
      v214 = 0;
    }
    else
    {
      v213[4] = v212 | 8;
      v214 = (unint64_t)v213[1] << ((v212 & 4) == 0);
    }
    v215 = v489;
    v56 = *v489;
    if (*v489 >= v489[1])
    {
      v460 = v52;
      v285 = v51;
      v286 = v48;
      v419 = v46;
      v395 = v25;
      v56 = v489[2];
      if ((v56 & 1) != 0)
      {
        JSC::sanitizeStackForVM(v491, (JSC::VM *)v31, v20, v25, v28, v21, v22, v23);
        v56 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v491 + 39672, (uint64_t)v491 + 192, 16, 0, 0, v376, v377, v378);
        v28 = v494;
        v26 = v493;
        v215 = v489;
      }
      else
      {
        v287 = *(_QWORD *)(v56 + 8) ^ v489[3];
        v489[1] = v56 + HIDWORD(v287);
        v489[2] = v56 + (int)v287;
        *v489 = v56 + 16;
        v215 = v489;
        v28 = v494;
        v26 = v493;
      }
      v37 = v492;
      v25 = v395;
      v46 = v419;
      v48 = v286;
      v51 = v285;
      v52 = v460;
    }
    else
    {
      *v489 = v56 + 16;
    }
    *(_DWORD *)v56 = v215[227] >> 4;
    v33 = v488;
    *(_DWORD *)(v56 + 4) = v488.i32[0];
    *(_QWORD *)(v56 + 8) = v166;
    if (*((_BYTE *)v491 + 755))
      __dmb(0xAu);
    if (v214 >= 0x101)
    {
      v401 = v25;
      v370 = v214;
      v371 = v46;
      v372 = v48;
      v373 = v51;
      v374 = v52;
      JSC::Heap::reportExtraMemoryAllocatedSlowCase((uint64_t)v491 + 192, 0, v56, v370, v28, v21, v22, v23);
      v52 = v374;
      v51 = v373;
      v48 = v372;
      v46 = v371;
      v25 = v401;
      v37 = v492;
      v26 = v493;
      v28 = v494;
    }
    *(_QWORD *)&v476[8 * v450] = v56;
  }
LABEL_48:
  v57 = *(_BYTE *)(v47 + 4);
  v58 = v57 & 0x1F;
  if (v58 - 4 >= 0xA)
  {
    if ((v58 > 3 || v58 == 2) && (*(_BYTE *)(v47 + 4) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198B9EB78);
    }
    goto LABEL_261;
  }
  v59 = *(_QWORD *)(v47 + 8);
  if (*(_DWORD *)(v59 - 4) <= v49)
  {
LABEL_261:
    v206 = v25;
    v207 = v56;
    v208 = v46;
    v209 = v48;
    v210 = v51;
    v211 = v52;
    JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength((JSC::JSObject *)v47, (unint64_t)v48, (JSC::VM *)v49, v207, 0, 0, v22, v23, v33);
    goto LABEL_262;
  }
  v60 = (JSC::VM *)*((_QWORD *)v48 + 7);
  v61 = v57 & 0xF;
  if ((v61 - 8) >= 2)
  {
    switch(v61)
    {
      case 0:
      case 1:
        v375 = v56;
        v206 = v25;
        v208 = v46;
        v209 = v48;
        v210 = v51;
        v211 = v52;
        JSC::JSObject::setIndexQuicklyForTypedArray(v47, v49, v375);
        goto LABEL_262;
      case 4:
      case 5:
        if (v56 > 0xFFFDFFFFFFFFFFFFLL)
          goto LABEL_51;
        v459 = v52;
        v437 = v51;
        v228 = v48;
        v229 = v46;
        v230 = v25;
        if (v56 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL
          && (v33.i64[0] = v56 - 0x2000000000000, BYTE1(dword_1ECF4C5C0)))
        {
          JSC::JSObject::convertInt32ToDouble((JSC::JSObject *)v47, v60, v20, v25, v28, v21, v22, v23, *(double *)v33.i64);
        }
        else
        {
          JSC::JSObject::convertInt32ToContiguous((JSC::JSObject *)v47, v60, v20, v25, v28, v21, v22, v23, *(double *)v33.i64);
        }
        JSC::JSObject::setIndexQuickly(v47, v60, v49, v56, v231, v232, v233, v234);
        v28 = v494;
        v37 = v492;
        v26 = v493;
        v25 = v230;
        v46 = v229;
        v48 = v228;
        v51 = v437;
        v52 = v459;
        break;
      case 6:
      case 7:
        if (!(v56 >> 49))
        {
          v206 = v25;
          v357 = v56;
          v208 = v46;
          v209 = v48;
          v210 = v51;
          v211 = v52;
          JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)v47, *((JSC::VM **)v48 + 7), v49, v357, v28, v21, v22, v23, *(double *)v33.i64);
          goto LABEL_262;
        }
        *(double *)v33.i64 = (double)(int)v56;
        if (v56 <= 0xFFFDFFFFFFFFFFFFLL)
          v33.i64[0] = v56 - 0x2000000000000;
        *(_QWORD *)(v59 + 8 * v49) = v33.i64[0];
LABEL_238:
        if (*(_DWORD *)(v59 - 8) <= v49)
          *(_DWORD *)(v59 - 8) = v50;
        break;
      case 10:
      case 11:
      case 12:
      case 13:
        v465 = v52;
        v443 = v51;
        v410 = v48;
        v424 = v46;
        v363 = v25;
        v364 = v59 + 8 * v49;
        v365 = *(_QWORD *)(v364 + 16);
        *(_QWORD *)(v364 + 16) = v56;
        if (v56
          && (v56 & 0xFFFE000000000002) == 0
          && *((_DWORD *)v60 + 190) >= *(unsigned __int8 *)(v47 + 7))
        {
          JSC::Heap::writeBarrierSlowPath((uint64_t)v60 + 192, v47);
        }
        v28 = v494;
        v37 = v492;
        v26 = v493;
        v25 = v363;
        v46 = v424;
        v48 = v410;
        v51 = v443;
        v52 = v465;
        if (v365)
          break;
        ++*(_DWORD *)(v59 + 12);
        goto LABEL_238;
      default:
        __break(0xC471u);
        JUMPOUT(0x198B9EB54);
    }
  }
  else
  {
LABEL_51:
    *(_QWORD *)(v59 + 8 * v49) = v56;
    if (*(_DWORD *)(v59 - 8) <= v49)
      *(_DWORD *)(v59 - 8) = v50;
    if (v56
      && (v56 & 0xFFFE000000000002) == 0
      && *((_DWORD *)v60 + 190) >= *(unsigned __int8 *)(v47 + 7))
    {
      v253 = (uint64_t)v60 + 192;
      v206 = v25;
      v208 = v46;
      v209 = v48;
      v210 = v51;
      v211 = v52;
      JSC::Heap::writeBarrierSlowPath(v253, v47);
LABEL_262:
      v52 = v211;
      v51 = v210;
      v48 = v209;
      v46 = v208;
      v25 = v206;
      v37 = v492;
      v26 = v493;
      v28 = v494;
    }
  }
  v62 = v510;
  v11 = (uint64_t)v491;
  if (!*((_DWORD *)v510 + 20))
    goto LABEL_56;
  v249 = *((_DWORD *)v510 + 20);
  if ((v249 & 0x27) != 0 && (v249 & 0x20) == 0)
  {
    v343 = v25;
    v422 = v46;
    v344 = v48;
    v345 = v51;
    v346 = v52;
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v510 + 64), 7u, v20, v25, v28, v21, v22, v23);
    v52 = v346;
    v51 = v345;
    v48 = v344;
    v46 = v422;
    v25 = v343;
    v37 = v492;
    v26 = v493;
    v28 = v494;
  }
  if (!*((_QWORD *)v62 + 2))
  {
LABEL_56:
    v20 = v506;
    if (*((_DWORD *)v26 + 20))
    {
      v250 = *((_DWORD *)v26 + 20);
      if ((v250 & 0x27) != 0 && (v250 & 0x20) == 0)
      {
        v347 = v25;
        v348 = v46;
        v349 = v48;
        v350 = v51;
        v351 = v52;
        v481 = v506;
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v26 + 64), 7u, v506, v25, v28, v21, v22, v23);
        v20 = v481;
        v52 = v351;
        v51 = v350;
        v48 = v349;
        v46 = v348;
        v25 = v347;
        v37 = v492;
        v26 = v493;
        v28 = v494;
      }
      if (*((_QWORD *)v26 + 2))
        goto LABEL_308;
    }
    if (v50 >= v20)
      goto LABEL_308;
    v505 = v25;
    if (!(_DWORD)v46)
    {
LABEL_130:
      v504 = v25;
      v13 = v486;
      goto LABEL_131;
    }
    v63 = 1;
    while (1)
    {
      v64 = *(_DWORD *)(v36 + 8 * v63);
      v65 = *(_DWORD *)(v36 + 4 * ((2 * v63) | 1));
      v66 = v50 + 1;
      v508 = v50 + 1;
      if ((v64 & 0x80000000) != 0)
      {
        v70 = 10;
        goto LABEL_68;
      }
      v67 = v65 - v64;
      if (v65 == v64)
      {
        v70 = *v472;
        goto LABEL_68;
      }
      if (v64)
        break;
      v77 = *(_QWORD *)(v51 + 8);
      if (v77)
        LODWORD(v77) = *(_DWORD *)(v77 + 4);
      v70 = v51;
      if ((_DWORD)v77 != v67)
        break;
LABEL_68:
      v71 = *(_BYTE *)(v47 + 4);
      v72 = v71 & 0x1F;
      if (v72 - 4 >= 0xA)
      {
        v120 = v72 > 3 || v72 == 2;
        if (v120 && (*(_BYTE *)(v47 + 4) & 0x10) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x198B9E984);
        }
LABEL_171:
        v121 = (JSC::JSObject *)v47;
        v475 = v20;
        v122 = (JSC::VM *)v50;
        v123 = v25;
        v124 = v70;
        v125 = v46;
        v126 = v48;
        v455 = v36;
        v127 = v47;
        v128 = v10;
        v129 = v11;
        v130 = v51;
        v131 = v52;
        JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength(v121, (unint64_t)v48, v122, v124, 0, 0, v22, v23, v33);
        v20 = v475;
        v52 = v131;
        v51 = v130;
        v11 = v129;
        v10 = v128;
        v47 = v127;
        v36 = v455;
LABEL_128:
        v48 = v126;
        v46 = v125;
        v25 = v123;
LABEL_129:
        v37 = v492;
        v26 = v493;
        v28 = v494;
        goto LABEL_75;
      }
      v73 = *(_QWORD *)(v47 + 8);
      if (v50 >= *(unsigned int *)(v73 - 4))
        goto LABEL_171;
      v31 = *((_QWORD *)v48 + 7);
      v74 = v71 & 0xF;
      if ((v74 - 8) >= 2)
      {
        switch(v74)
        {
          case 0:
          case 1:
            v335 = v47;
            v336 = v50;
            v480 = v20;
            v337 = v70;
            v220 = v25;
            v221 = v46;
            v222 = v48;
            v458 = v36;
            v338 = v47;
            v339 = v10;
            v340 = v11;
            v341 = v51;
            v342 = v52;
            JSC::JSObject::setIndexQuicklyForTypedArray(v335, v336, v337);
            v20 = v480;
            v52 = v342;
            v51 = v341;
            v11 = v340;
            v10 = v339;
            v47 = v338;
            goto LABEL_291;
          case 4:
          case 5:
            if (v70 > 0xFFFDFFFFFFFFFFFFLL)
              goto LABEL_71;
            v477 = v20;
            v154 = v50;
            v123 = v25;
            v155 = v70;
            v125 = v46;
            v126 = v48;
            v156 = v51;
            v157 = v52;
            JSC::JSObject::convertInt32ToDoubleOrContiguousWhilePerformingSetIndex((JSC::JSObject *)v47, (JSC::VM *)v31, v154, v155, v28, v21, v22, v23);
            goto LABEL_201;
          case 6:
          case 7:
            if (v70 >> 49)
            {
              *(double *)v33.i64 = (double)(int)v70;
              if (v70 <= 0xFFFDFFFFFFFFFFFFLL)
                v33.i64[0] = v70 - 0x2000000000000;
              *(_QWORD *)(v73 + 8 * v50) = v33.i64[0];
LABEL_156:
              if (v50 >= *(unsigned int *)(v73 - 8))
                *(_DWORD *)(v73 - 8) = v66;
              goto LABEL_75;
            }
            v477 = v20;
            v311 = v50;
            v123 = v25;
            v312 = v70;
            v125 = v46;
            v126 = v48;
            v156 = v51;
            v157 = v52;
            JSC::JSObject::convertDoubleToContiguousWhilePerformingSetIndex((JSC::JSObject *)v47, (JSC::VM *)v31, v311, v312, v28, v21, v22, v23, *(double *)v33.i64);
LABEL_201:
            v20 = v477;
            v52 = v157;
            v51 = v156;
            v11 = (uint64_t)v491;
            break;
          case 10:
          case 11:
          case 12:
          case 13:
            v478 = v20;
            v463 = v52;
            v440 = v51;
            v406 = v48;
            v420 = v46;
            v396 = v25;
            v329 = v73 + 8 * v50;
            v330 = *(_QWORD *)(v329 + 16);
            *(_QWORD *)(v329 + 16) = v70;
            if (v70
              && (v70 & 0xFFFE000000000002) == 0
              && *(_DWORD *)(v31 + 760) >= *(unsigned __int8 *)(v47 + 7))
            {
              JSC::Heap::writeBarrierSlowPath(v31 + 192, v47);
            }
            v11 = (uint64_t)v491;
            v37 = v492;
            v28 = v494;
            v26 = v493;
            v25 = v396;
            v46 = v420;
            v48 = v406;
            v51 = v440;
            v52 = v463;
            v20 = v478;
            if (v330)
              goto LABEL_75;
            ++*(_DWORD *)(v73 + 12);
            goto LABEL_156;
          default:
            __break(0xC471u);
            JUMPOUT(0x198B9E960);
        }
        goto LABEL_128;
      }
LABEL_71:
      *(_QWORD *)(v73 + 8 * v50) = v70;
      if (v50 >= *(unsigned int *)(v73 - 8))
        *(_DWORD *)(v73 - 8) = v66;
      if (v70
        && (v70 & 0xFFFE000000000002) == 0
        && *(_DWORD *)(v31 + 760) >= *(unsigned __int8 *)(v47 + 7))
      {
        v218 = v31 + 192;
        v219 = v47;
        v220 = v25;
        v221 = v46;
        v222 = v48;
        v458 = v36;
        v436 = v47;
        v223 = v10;
        v224 = v11;
        v225 = v51;
        v226 = v52;
        v227 = v20;
        JSC::Heap::writeBarrierSlowPath(v218, v219);
        v20 = v227;
        v52 = v226;
        v51 = v225;
        v11 = v224;
        v10 = v223;
        v47 = v436;
LABEL_291:
        v36 = v458;
        v48 = v222;
        v46 = v221;
        v25 = v220;
        goto LABEL_129;
      }
LABEL_75:
      v62 = v510;
      if (*((_DWORD *)v510 + 20))
      {
        v216 = *((_DWORD *)v510 + 20);
        if ((v216 & 0x27) != 0 && (v216 & 0x20) == 0)
        {
          v288 = v25;
          v289 = v46;
          v290 = v48;
          v451 = v10;
          v461 = v36;
          v438 = v47;
          v291 = v11;
          v292 = v51;
          v293 = v52;
          v294 = v20;
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v510 + 64), 7u, v20, v25, v28, v21, v22, v23);
          v20 = v294;
          v52 = v293;
          v51 = v292;
          v11 = v291;
          v47 = v438;
          v10 = v451;
          v36 = v461;
          v48 = v290;
          v46 = v289;
          v25 = v288;
          v37 = v492;
          v26 = v493;
          v28 = v494;
        }
        if (*((_QWORD *)v62 + 2))
          goto LABEL_279;
      }
      if (*((_DWORD *)v26 + 20))
      {
        v217 = *((_DWORD *)v26 + 20);
        if ((v217 & 0x27) != 0 && (v217 & 0x20) == 0)
        {
          v295 = v25;
          v296 = v46;
          v297 = v48;
          v452 = v10;
          v462 = v36;
          v439 = v47;
          v298 = v11;
          v299 = v51;
          v300 = v52;
          v301 = v20;
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v26 + 64), 7u, v20, v25, v28, v21, v22, v23);
          v20 = v301;
          v52 = v300;
          v51 = v299;
          v11 = v298;
          v47 = v439;
          v10 = v452;
          v36 = v462;
          v48 = v297;
          v46 = v296;
          v25 = v295;
          v37 = v492;
          v26 = v493;
          v28 = v494;
        }
        if (*((_QWORD *)v26 + 2))
          goto LABEL_309;
      }
      if (v66 >= v20)
        goto LABEL_309;
      ++v63;
      v50 = v66;
      if (v63 > v46)
        goto LABEL_130;
    }
    if (v67 == 1)
    {
      v68 = *(WTF::StringImpl **)(v51 + 8);
      if (!v68 || *((_DWORD *)v68 + 1) <= v64)
      {
        v69 = 0;
LABEL_67:
        v70 = *(_QWORD *)(v11 + 8 * v69 + 42216);
        goto LABEL_68;
      }
      v379 = v25;
      v426 = v46;
      v412 = v48;
      v445 = v51;
      v467 = v52;
      v482 = v20;
      v380 = WTF::StringImpl::at(v68, v64);
      v20 = v482;
      v52 = v467;
      v51 = v445;
      v48 = v412;
      v46 = v426;
      v25 = v379;
      v37 = v492;
      v26 = v493;
      v28 = v494;
      if (v380 <= 0xFF)
      {
        v69 = v380;
        goto LABEL_67;
      }
LABEL_82:
      v75 = *(_QWORD *)(v51 + 8);
      if (v75)
      {
        if ((*(_BYTE *)(v75 + 16) & 4) != 0)
          v76 = 7;
        else
          v76 = 3;
      }
      else
      {
        v76 = 7;
      }
      v70 = *v37;
      if (*v37 >= v37[1])
      {
        v70 = v37[2];
        if ((v70 & 1) == 0)
        {
          v248 = *(_QWORD *)(v70 + 8) ^ v37[3];
          v37[1] = v70 + HIDWORD(v248);
          v37[2] = v70 + (int)v248;
          goto LABEL_87;
        }
        v441 = v51;
        v397 = v25;
        v421 = v46;
        v407 = v48;
        v464 = v52;
        v479 = v20;
        JSC::sanitizeStackForVM(v491, (JSC::VM *)v31, v20, v25, v28, v21, v22, v23);
        v334 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v491 + 39408, (uint64_t)v491 + 192, 32, 0, 0, v331, v332, v333);
        v20 = v479;
        v52 = v464;
        v51 = v441;
        v48 = v407;
        v46 = v421;
        v25 = v397;
        v37 = v492;
        v26 = v493;
        v28 = v494;
        v70 = v334;
      }
      else
      {
LABEL_87:
        *v37 = v70 + 32;
      }
      *(_DWORD *)v70 = v489[227] >> 4;
      v33 = v488;
      *(_DWORD *)(v70 + 4) = v488.i32[0];
      *(_QWORD *)(v70 + 8) = v76;
      *(_DWORD *)(v70 + 16) = v67;
      *(_DWORD *)(v70 + 20) = v51;
      *(_WORD *)(v70 + 24) = v52;
      *(_WORD *)(v70 + 26) = v64;
      *(_DWORD *)(v70 + 28) = HIWORD(v64);
      v11 = (uint64_t)v491;
      if (*((_BYTE *)v491 + 755))
        __dmb(0xAu);
      goto LABEL_68;
    }
    if (v67 != 2)
      goto LABEL_82;
    v80 = *(WTF::StringImpl **)(v51 + 8);
    v474 = v20;
    if (!v80)
    {
      v82 = 0;
      goto LABEL_101;
    }
    v81 = *((_DWORD *)v80 + 1);
    if (v81 > v64)
    {
      v468 = v52;
      v413 = v48;
      v428 = v46;
      v402 = v25;
      v385 = v51;
      v82 = WTF::StringImpl::at(v80, v64);
      v51 = v385;
      v80 = *(WTF::StringImpl **)(v385 + 8);
      if (!v80)
      {
        v11 = (uint64_t)v491;
        v37 = v492;
        v28 = v494;
        v26 = v493;
        v25 = v402;
        v46 = v428;
        v48 = v413;
        v52 = v468;
        v20 = v474;
        goto LABEL_101;
      }
      v81 = *((_DWORD *)v80 + 1);
      v11 = (uint64_t)v491;
      v37 = v492;
      v28 = v494;
      v26 = v493;
      v25 = v402;
      v46 = v428;
      v48 = v413;
      v52 = v468;
      v20 = v474;
    }
    else
    {
      v82 = 0;
    }
    v31 = v64 + 1;
    if (v81 > v31)
    {
      v403 = v25;
      v429 = v46;
      v414 = v48;
      v447 = v51;
      v469 = v52;
      LODWORD(v80) = WTF::StringImpl::at(v80, v31);
      v20 = v474;
      v52 = v469;
      v51 = v447;
      v48 = v414;
      v46 = v429;
      v25 = v403;
      v37 = v492;
      v26 = v493;
      v28 = v494;
    }
    else
    {
      LODWORD(v80) = 0;
    }
LABEL_101:
    if ((v80 | v82) > 0x7F)
      goto LABEL_82;
    v512[0] = v82;
    v512[1] = (_BYTE)v80;
    v513 = (unsigned int *)v512;
    v514 = 2;
    v83 = ((_DWORD)v80 << 11) ^ ((v82 - 1640531527) << 16) ^ (v82 - 1640531527);
    v84 = (v83 + (v83 >> 11)) ^ (8 * (v83 + (v83 >> 11)));
    v85 = (v84 + (v84 >> 5)) ^ (4 * (v84 + (v84 >> 5)));
    v86 = ((v85 + (v85 >> 15)) ^ ((v85 + (v85 >> 15)) << 10)) & 0xFFFFFF;
    if (v86)
      v87 = v86;
    else
      v87 = 0x800000;
    v515 = v87;
    v449 = v87 & 0x1FF;
    v88 = *(_QWORD *)(v484 + 8 * v449);
    if (v88)
    {
      v89 = *(_QWORD *)(v88 + 8);
      v90 = (v89 & 1) != 0 ? 0 : (WTF::StringImpl *)v89;
      v91 = *((_DWORD *)v90 + 4);
      if (v91 < 0x100)
      {
        v152 = v25;
        v417 = v46;
        v405 = v48;
        v434 = v51;
        v456 = v52;
        v92 = WTF::StringImpl::hashSlowCase(v90);
        v20 = v474;
        v52 = v456;
        v51 = v434;
        v48 = v405;
        v46 = v417;
        v25 = v152;
        v37 = v492;
        v26 = v493;
        v28 = v494;
      }
      else
      {
        v92 = v91 >> 8;
      }
      if (v92 == v87)
      {
        v93 = (uint64_t)v90;
        v94 = v25;
        v95 = v46;
        v96 = v48;
        v453 = v36;
        v432 = v47;
        v97 = v10;
        v98 = v11;
        v99 = v51;
        v100 = v52;
        v101 = WTF::equalInternal<unsigned char>(v93, (unint64_t)v512, 2);
        v20 = v474;
        v52 = v100;
        v51 = v99;
        v11 = v98;
        v10 = v97;
        v47 = v432;
        v36 = v453;
        v48 = v96;
        v46 = v95;
        v25 = v94;
        v37 = v492;
        v26 = v493;
        v28 = v494;
        if (v101)
        {
          v70 = *(_QWORD *)(v484 + 8 * v449);
          goto LABEL_68;
        }
      }
    }
    if (!v513)
    {
      v153 = 0;
      goto LABEL_114;
    }
    if (!v514)
    {
      v153 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
LABEL_114:
      v102 = v153[4];
      v103 = v153;
      if ((v102 & 3) == 2)
      {
        v103 = v153;
        do
        {
          v103 = (int *)*((_QWORD *)v103 + 3);
          v102 = v103[4];
        }
        while ((v102 & 3) == 2);
      }
      if ((v102 & 8) != 0)
      {
        v104 = 0;
      }
      else
      {
        v103[4] = v102 | 8;
        v104 = (unint64_t)v103[1] << ((v102 & 4) == 0);
      }
      v105 = v489;
      v70 = *v489;
      if (*v489 >= v489[1])
      {
        v70 = v489[2];
        if ((v70 & 1) != 0)
        {
          v400 = v25;
          v425 = v46;
          v411 = v48;
          v444 = v51;
          v466 = v52;
          JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)v31, v20, v25, v28, v21, v22, v23);
          v369 = JSC::LocalAllocator::allocateSlowCase(v11 + 39672, v11 + 192, 16, 0, 0, v366, v367, v368);
          v20 = v474;
          v52 = v466;
          v51 = v444;
          v48 = v411;
          v46 = v425;
          v25 = v400;
          v37 = v492;
          v26 = v493;
          v105 = v489;
          v28 = v494;
          v70 = v369;
        }
        else
        {
          v267 = *(_QWORD *)(v70 + 8) ^ v489[3];
          v489[2] = v70 + (int)v267;
          v489[1] = v70 + HIDWORD(v267);
          *v489 = v70 + 16;
          v105 = v489;
        }
      }
      else
      {
        *v489 = v70 + 16;
      }
      *(_DWORD *)v70 = v105[227] >> 4;
      v33 = v488;
      *(_DWORD *)(v70 + 4) = v488.i32[0];
      *(_QWORD *)(v70 + 8) = v153;
      if (*(_BYTE *)(v11 + 755))
        __dmb(0xAu);
      if (v104 >= 0x101)
      {
        v352 = v11 + 192;
        v398 = v25;
        v353 = v104;
        v354 = v46;
        v408 = v48;
        v355 = v51;
        v356 = v52;
        JSC::Heap::reportExtraMemoryAllocatedSlowCase(v352, 0, v70, v353, v28, v21, v22, v23);
        v20 = v474;
        v52 = v356;
        v51 = v355;
        v11 = (uint64_t)v491;
        v37 = v492;
        v48 = v408;
        v46 = v354;
        v25 = v398;
        v26 = v493;
        v28 = v494;
      }
      *(_QWORD *)(v484 + 8 * v449) = v70;
      goto LABEL_68;
    }
    v454 = v52;
    v433 = v51;
    v404 = v48;
    v416 = v46;
    v394 = v25;
    if (__ldaxr(WTF::AtomStringTableLocker::s_stringTableLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WTF::AtomStringTableLocker::s_stringTableLock))
    {
LABEL_161:
      v115 = *(_QWORD *)(v473 + 736);
      if (v115)
        goto LABEL_162;
      v171 = atomic_load(&WTF::initialize(void)::onceKey);
      if (v171 != -1)
      {
        v497.rlim_cur = (rlim_t)&v516;
        v517[0] = &v497;
        std::__call_once(&WTF::initialize(void)::onceKey, v517, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
      }
      v172 = WTF::fastMalloc((WTF *)0x68);
      v115 = v172;
      *(_OWORD *)v172 = 0u;
      *(_OWORD *)(v172 + 16) = 0u;
      *(_OWORD *)(v172 + 32) = 0u;
      *(_OWORD *)(v172 + 48) = 0u;
      *(_OWORD *)(v172 + 64) = 0u;
      *(_OWORD *)(v172 + 80) = 0u;
      *(_QWORD *)(v172 + 96) = 0;
      *(_DWORD *)v172 = 1;
      *(_OWORD *)(v172 + 8) = 0u;
      v173 = (unint64_t *)(v172 + 8);
      *(_OWORD *)(v172 + 24) = 0u;
      do
      {
        v78 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
        v79 = v78 + 1;
      }
      while (__stlxr(v79, (unsigned int *)&WTF::ThreadLike::s_uid));
      *(_DWORD *)(v172 + 48) = v79;
      *(_QWORD *)(v172 + 52) = 0;
      *(_QWORD *)(v172 + 68) = 0;
      *(_QWORD *)(v172 + 60) = 0;
      *(_DWORD *)(v172 + 76) = 0;
      *(_QWORD *)(v172 + 88) = 0;
      *(_QWORD *)(v172 + 96) = 0;
      v168 = pthread_self();
      if (__ldaxr(v173))
      {
        __clrex();
      }
      else if (!__stxr(1uLL, v173))
      {
LABEL_219:
        *(_QWORD *)(v115 + 40) = v168;
        *(_DWORD *)(v115 + 52) = pthread_mach_thread_np(v168);
        v170 = __ldxr(v173);
        if (v170 == 1)
        {
          if (!__stlxr(0, v173))
            goto LABEL_242;
        }
        else
        {
          __clrex();
        }
        WTF::WordLock::unlockSlow((WTF::WordLock *)v173);
LABEL_242:
        stackaddr_np = *(char **)(v115 + 16);
        if (!stackaddr_np)
        {
          v393 = pthread_main_np();
          v201 = pthread_self();
          stackaddr_np = (char *)pthread_get_stackaddr_np(v201);
          if (v393)
          {
            getrlimit(3, &v497);
            if (v497.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
              rlim_cur = 0x800000;
            else
              rlim_cur = v497.rlim_cur;
          }
          else
          {
            rlim_cur = pthread_get_stacksize_np(v201);
          }
          *(_QWORD *)(v115 + 16) = stackaddr_np;
          *(_QWORD *)(v115 + 24) = &stackaddr_np[-rlim_cur];
        }
        *(_QWORD *)(v115 + 80) = stackaddr_np;
        *(_QWORD *)(v115 + 56) = v115 + 64;
        v199 = pthread_self();
        if (pthread_equal(v199, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
        {
          v200 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
          if (v200 != -1)
          {
            v497.rlim_cur = (rlim_t)&v516;
            v517[0] = &v497;
            std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, v517, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
          }
          *(_QWORD *)(v115 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
        }
        *(_QWORD *)(v473 + 736) = v115;
        pthread_key_init_np();
LABEL_162:
        WTF::HashTable<WTF::CompactPtr<WTF::StringImpl>,WTF::CompactPtr<WTF::StringImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>,WTF::HashTraits<WTF::CompactPtr<WTF::StringImpl>>>::addPassingHashCode<WTF::HashSetTranslatorAdapter<WTF::LCharBufferTranslator>,WTF::HashTranslatorCharBuffer<unsigned char> const&,WTF::HashTranslatorCharBuffer<unsigned char> const&>(*(_QWORD *)(v115 + 56), (uint64_t)&v513, v25, v28, v21, v22, v23, (uint64_t)&v497);
        v153 = (int *)(16 * *(unsigned int *)v497.rlim_cur);
        if (!(_BYTE)v498)
          *v153 += 2;
        v119 = __ldxr(WTF::AtomStringTableLocker::s_stringTableLock);
        if (v119 == 1)
        {
          if (!__stlxr(0, WTF::AtomStringTableLocker::s_stringTableLock))
            goto LABEL_197;
        }
        else
        {
          __clrex();
        }
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(WTF::AtomStringTableLocker::s_stringTableLock, 0, v116, v117, v118, v21, v22, v23);
LABEL_197:
        v28 = v494;
        v37 = v492;
        v26 = v493;
        v25 = v394;
        v46 = v416;
        v48 = v404;
        v51 = v433;
        v52 = v454;
        v20 = v474;
        goto LABEL_114;
      }
      WTF::WordLock::lockSlow((WTF::WordLock *)v173);
      goto LABEL_219;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)WTF::AtomStringTableLocker::s_stringTableLock);
    goto LABEL_161;
  }
LABEL_279:
  if (*((_DWORD *)v26 + 20))
  {
    JSC::VM::hasExceptionsAfterHandlingTraps(v26, v31, v20, v25, v28, v21, v22, v23);
    v28 = v494;
  }
LABEL_309:
  if (*((_DWORD *)v62 + 20))
  {
    v262 = *((_DWORD *)v62 + 20);
    if ((v262 & 0x27) != 0 && (v262 & 0x20) == 0)
    {
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v62 + 64), 7u, v20, v25, v28, v21, v22, v23);
      v28 = v494;
    }
    if (*((_QWORD *)v62 + 2))
      return 0;
  }
  v239 = (JSC::VM *)v508;
  if (v508 >= v506)
    return v503;
  if (v508 < 0x186A0)
  {
    v181 = v503;
    v240 = v511;
    v241 = JSC::jsSubstringOfResolved((JSC *)v11, (JSC::VM *)v509, (JSC::JSString *)v505, v28 - v505, v28, v21, v22, v23);
    JSC::JSObject::putDirectIndex(v181, (unint64_t)v240, v239, (unint64_t)v241, v242, v243, v244, v245, v246);
    return v181;
  }
  v303 = v504;
  v302 = v505;
  LODWORD(v517[0]) = 0;
  v513 = &v508;
  v514 = (uint64_t)v517;
  v497.rlim_cur = (rlim_t)v517;
  v497.rlim_max = (rlim_t)&v508;
  v498 = &v506;
  JSC::genericSplit<JSC::regExpProtoFuncSplitFast(JSC::JSGlobalObject *,JSC::CallFrame *)::$_2,JSC::regExpProtoFuncSplitFast(JSC::JSGlobalObject *,JSC::CallFrame *)::$_3>((unint64_t)v511, v496, v509, (uint64_t *)v495, v28, &v505, &v504, (v485 >> 7) & 1, v490 != 0, &v513, (uint64_t)&v497);
  if (*((_DWORD *)v510 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v510, v304, v305, v306, v307, v308, v309, v310))
  {
    return 0;
  }
  if (LODWORD(v517[0]) + v508 >= 0x10000001)
  {
    JSC::throwOutOfMemoryError(v511, (JSC::JSGlobalObject *)&v510);
    return 0;
  }
  v504 = v303;
  v505 = v302;
  v497.rlim_cur = (rlim_t)&v503;
  v497.rlim_max = (rlim_t)&v511;
  v498 = &v508;
  v499 = v491;
  v500 = &v509;
  v501 = &v510;
  v502 = &v506;
  JSC::genericSplit<JSC::regExpProtoFuncSplitFast(JSC::JSGlobalObject *,JSC::CallFrame *)::$_4,JSC::regExpProtoFuncSplitFast(JSC::JSGlobalObject *,JSC::CallFrame *)::$_5>((unint64_t)v511, v496, v509, (uint64_t *)v495, v494, &v505, &v504, (v485 >> 7) & 1, v490 != 0, (uint64_t)&v497);
  if (*((_DWORD *)v510 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v510, v314, v315, v316, v317, v318, v319, v320))
  {
    return 0;
  }
  v321 = (JSC::VM *)v508;
  v181 = v503;
  if (v508 < v506)
  {
    v322 = v511;
    v323 = JSC::jsSubstringOfResolved(v491, (JSC::VM *)v509, (JSC::JSString *)v505, v494 - v505, v317, v318, v319, v320);
    JSC::JSObject::putDirectIndex(v181, (unint64_t)v322, v321, (unint64_t)v323, v324, v325, v326, v327, v328);
    return v503;
  }
  return v181;
}

void JSC::genericSplit<JSC::regExpProtoFuncSplitFast(JSC::JSGlobalObject *,JSC::CallFrame *)::$_2,JSC::regExpProtoFuncSplitFast(JSC::JSGlobalObject *,JSC::CallFrame *)::$_3>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int *a6, unsigned int *a7, uint64_t a8, char a9, _DWORD **a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  unsigned int v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  _DWORD *v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int v68;

  v64 = a8;
  v65 = a3;
  v11 = *a7;
  v68 = a5;
  if (v11 >= a5)
    return;
  v15 = (uint64_t *)(a1 + 2200);
  v16 = *(_QWORD *)(a1 + 56);
  while (1)
  {
    v17 = *a10[1] + **a10;
    if (*(_DWORD *)(v16 + 80))
    {
      v44 = *(_DWORD *)(v16 + 80);
      if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, v11, a5, (uint64_t)a6, (uint64_t)a7, a8);
      if (*(_QWORD *)(v16 + 16))
        v45 = 1;
      else
        v45 = v17 > 0x10000000;
      if (v45)
        return;
      LODWORD(v11) = *a7;
    }
    else if (v17 > 0x10000000)
    {
      return;
    }
    v18 = *(_QWORD *)(a1 + 56);
    JSC::RegExp::match(a2, a1, a4, v11, (uint64_t)v15, (uint64_t)a6, (uint64_t)a7, a8);
    v22 = v21;
    if (*(_DWORD *)(v18 + 80))
    {
      v46 = *(_DWORD *)(v18 + 80);
      if ((v46 & 0x27) != 0 && (v46 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, a3, v20, a5, (uint64_t)a6, (uint64_t)a7, a8);
      if (*(_QWORD *)(v18 + 16))
      {
        v23 = 0;
LABEL_22:
        v22 = -1;
        goto LABEL_10;
      }
    }
    v23 = *v15;
    if (v22 == -1)
      goto LABEL_22;
    if (*(_DWORD *)(a1 + 2212) <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x198B9F2E4);
    }
    v24 = *(int *)(v23 + 4);
    *(_QWORD *)(a1 + 2152) = a2;
    *(_QWORD *)(a1 + 2144) = v65;
    *(_QWORD *)(a1 + 2120) = (int)v22;
    *(_QWORD *)(a1 + 2128) = v24;
    *(_BYTE *)(a1 + 2136) = 0;
    if (*(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(v18 + 192, a1);
LABEL_10:
    if (*(_DWORD *)(v16 + 80))
    {
      v47 = *(_DWORD *)(v16 + 80);
      if ((v47 & 0x27) != 0 && (v47 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, v20, a5, (uint64_t)a6, (uint64_t)a7, a8);
      if (*(_QWORD *)(v16 + 16))
        return;
    }
    if ((v22 & 0x80000000) != 0)
    {
      if (!v64)
        return;
      v55 = (WTF::StringImpl *)*a4;
      if (*a4)
      {
        *(_DWORD *)v55 += 2;
        *a7 = JSC::advanceStringIndex(v55, v68, *a7, a9);
        if (*(_DWORD *)v55 != 2)
        {
          *(_DWORD *)v55 -= 2;
          goto LABEL_18;
        }
        v35 = v55;
        goto LABEL_29;
      }
      v49 = *a7 + 1;
LABEL_48:
      *a7 = v49;
      goto LABEL_18;
    }
    if (v22 >= v68)
      return;
    *a7 = v22;
    v25 = *(_DWORD *)(v23 + 4);
    if (v25 != *a6)
      break;
    v31 = (WTF::StringImpl *)*a4;
    if (!*a4)
    {
      if ((a9 & 1) != 0)
      {
        *a7 = JSC::advanceStringUnicode(0, v68, v22);
        goto LABEL_18;
      }
      v49 = v22 + 1;
      goto LABEL_48;
    }
    v32 = *(_DWORD *)v31;
    v33 = *(_DWORD *)v31 + 2;
    *(_DWORD *)v31 = v33;
    a3 = *a7;
    if (a9)
    {
      *(_DWORD *)v31 = v32 + 4;
      v34 = JSC::advanceStringUnicode((uint64_t)v31, v68, a3);
      if (v33)
      {
        *(_DWORD *)v31 = v33;
      }
      else
      {
        WTF::StringImpl::~StringImpl(v31, v19, a3, v20, a5, (uint64_t)a6, (uint64_t)a7, a8);
        WTF::fastFree(v56, v57, v58, v59, v60, v61, v62, v63);
      }
    }
    else
    {
      v34 = a3 + 1;
    }
    *a7 = v34;
    if (*(_DWORD *)v31 == 2)
    {
      v35 = v31;
LABEL_29:
      WTF::StringImpl::~StringImpl(v35, v19, a3, v20, a5, (uint64_t)a6, (uint64_t)a7, a8);
      WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
      goto LABEL_18;
    }
    *(_DWORD *)v31 -= 2;
LABEL_18:
    v11 = *a7;
    if (v11 >= v68)
      return;
  }
  v26 = *(_DWORD *)(a2 + 24);
  v27 = *(_DWORD **)(a11 + 8);
  v28 = **(_DWORD **)a11 + 1;
  **(_DWORD **)a11 = v28;
  v29 = *v27 + v28;
  v30 = **(_DWORD **)(a11 + 16);
  if (*(_DWORD *)(v16 + 80))
  {
    v48 = *(_DWORD *)(v16 + 80);
    if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v16 + 64), 7u, a3, v20, a5, (uint64_t)a6, (uint64_t)a7, a8);
    if (*(_QWORD *)(v16 + 16))
      return;
  }
  if (v29 >= v30)
    return;
  *a6 = v25;
  if (!v26)
  {
LABEL_17:
    *a7 = v25;
    goto LABEL_18;
  }
  v50 = 1;
  while (1)
  {
    v51 = *(_DWORD **)(a11 + 8);
    v52 = **(_DWORD **)a11 + 1;
    **(_DWORD **)a11 = v52;
    v53 = *v51 + v52;
    v54 = **(_DWORD **)(a11 + 16);
    if (*(_DWORD *)(v16 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v16, (uint64_t)v19, a3, v20, a5, (uint64_t)a6, (uint64_t)a7, a8))
      {
        break;
      }
    }
    if (v53 >= v54)
      break;
    if (++v50 > v26)
    {
      v25 = *a6;
      goto LABEL_17;
    }
  }
}

void JSC::genericSplit<JSC::regExpProtoFuncSplitFast(JSC::JSGlobalObject *,JSC::CallFrame *)::$_4,JSC::regExpProtoFuncSplitFast(JSC::JSGlobalObject *,JSC::CallFrame *)::$_5>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int *a6, unsigned int *a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  JSC *v28;
  _DWORD *v29;
  JSC::VM *v30;
  JSC::VM *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int32x4_t v36;
  uint64_t v37;
  int32x4_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  JSC::JSString *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  JSC::VM *v49;
  JSC::VM *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  _DWORD *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  JSC::VMTraps *v73;
  int v74;
  uint64_t *v75;
  uint64_t v76;
  unsigned int v79;

  v74 = a8;
  v76 = a3;
  v10 = *a7;
  v79 = a5;
  if (v10 >= a5)
    return;
  v12 = *(_QWORD *)(a1 + 56);
  v75 = (uint64_t *)(a1 + 2200);
  v73 = (JSC::VMTraps *)(v12 + 64);
  while (1)
  {
    if (*(_DWORD *)(v12 + 80))
    {
      v65 = *(_DWORD *)(v12 + 80);
      if ((v65 & 0x27) != 0 && (v65 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v73, 7u, a3, v10, a5, (uint64_t)a6, (uint64_t)a7, a8);
      if (*(_QWORD *)(v12 + 16))
        return;
      LODWORD(v10) = *a7;
    }
    v13 = *(_QWORD *)(a1 + 56);
    JSC::RegExp::match(a2, a1, a4, v10, (uint64_t)v75, (uint64_t)a6, (uint64_t)a7, a8);
    v16 = v15;
    if (*(_DWORD *)(v13 + 80))
    {
      v66 = *(_DWORD *)(v13 + 80);
      if ((v66 & 0x27) != 0 && (v66 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, a3, v14, a5, (uint64_t)a6, (uint64_t)a7, a8);
      if (*(_QWORD *)(v13 + 16))
      {
        v17 = 0;
LABEL_55:
        v16 = -1;
        goto LABEL_9;
      }
    }
    v17 = *v75;
    if (v16 == -1)
      goto LABEL_55;
    if (*(_DWORD *)(a1 + 2212) <= 1u)
    {
      __break(0xC471u);
      return;
    }
    v18 = *(int *)(v17 + 4);
    *(_QWORD *)(a1 + 2152) = a2;
    *(_QWORD *)(a1 + 2144) = v76;
    *(_QWORD *)(a1 + 2120) = v16;
    *(_QWORD *)(a1 + 2128) = v18;
    *(_BYTE *)(a1 + 2136) = 0;
    if (*(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath(v13 + 192, a1);
LABEL_9:
    if (*(_DWORD *)(v12 + 80))
    {
      v67 = *(_DWORD *)(v12 + 80);
      if ((v67 & 0x27) != 0 && (v67 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v73, 7u, a3, v14, a5, (uint64_t)a6, (uint64_t)a7, a8);
      if (*(_QWORD *)(v12 + 16))
        return;
    }
    if ((v16 & 0x80000000) == 0)
      break;
    if (!v74)
      return;
    v23 = (WTF::StringImpl *)*a4;
    if (!*a4)
    {
      v68 = a7;
      v69 = *a7 + 1;
LABEL_61:
      *v68 = v69;
      goto LABEL_47;
    }
    *(_DWORD *)v23 += 2;
    *a7 = JSC::advanceStringIndex(v23, v79, *a7, a9);
    if (*(_DWORD *)v23 == 2)
    {
      v56 = v23;
LABEL_46:
      WTF::StringImpl::~StringImpl(v56, v21, a3, v22, a5, (uint64_t)a6, (uint64_t)a7, a8);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
      goto LABEL_47;
    }
    *(_DWORD *)v23 -= 2;
LABEL_47:
    v10 = *a7;
    if (v10 >= v79)
      return;
  }
  if (v16 >= v79)
    return;
  *a7 = v16;
  v19 = *(_DWORD *)(v17 + 4);
  a3 = *a6;
  if (v19 == (_DWORD)a3)
  {
    v20 = (WTF::StringImpl *)*a4;
    if (!*a4)
    {
      v69 = v16 + 1;
      v68 = a7;
      goto LABEL_61;
    }
    *(_DWORD *)v20 += 2;
    *a7 = JSC::advanceStringIndex(v20, v79, *a7, a9);
    if (*(_DWORD *)v20 == 2)
    {
      v56 = v20;
      goto LABEL_46;
    }
    *(_DWORD *)v20 -= 2;
    goto LABEL_47;
  }
  v24 = *(_DWORD *)(a2 + 24);
  v25 = (v16 - a3);
  v26 = **(_QWORD **)a10;
  v27 = **(_QWORD **)(a10 + 8);
  v29 = *(_DWORD **)(a10 + 16);
  v28 = *(JSC **)(a10 + 24);
  v30 = (JSC::VM *)*v29;
  *v29 = (_DWORD)v30 + 1;
  v31 = JSC::jsSubstringOfResolved(v28, **(JSC::VM ***)(a10 + 32), (JSC::JSString *)a3, v25, a5, (uint64_t)a6, (uint64_t)a7, a8);
  JSC::JSObject::putDirectIndex(v26, v27, v30, (unint64_t)v31, v32, v33, v34, v35, v36);
  v39 = **(_QWORD **)(a10 + 40);
  if (*(_DWORD *)(v39 + 80))
  {
    v70 = *(_DWORD *)(v39 + 80);
    if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v39 + 64), 7u, a3, v37, a5, (uint64_t)a6, (uint64_t)a7, a8);
    if (*(_QWORD *)(v39 + 16))
      goto LABEL_78;
  }
  v40 = **(_DWORD **)(a10 + 16);
  v41 = **(_DWORD **)(a10 + 48);
  if (*(_DWORD *)(v12 + 80))
  {
    v71 = *(_DWORD *)(v12 + 80);
    if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
      JSC::VMTraps::handleTraps(v73, 7u, a3, v37, a5, (uint64_t)a6, (uint64_t)a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return;
  }
  if (v40 >= v41)
    return;
  *a6 = v19;
  if (!v24)
  {
LABEL_43:
    *a7 = v19;
    goto LABEL_47;
  }
  v42 = 1;
  v43 = 3;
  while (1)
  {
    v44 = (JSC::JSString *)*(unsigned int *)(v17 + 4 * (v43 - 1));
    v45 = *(_DWORD *)(v17 + 4 * v43);
    v46 = **(_QWORD **)a10;
    v47 = **(_QWORD **)(a10 + 8);
    v48 = *(_DWORD **)(a10 + 16);
    v49 = (JSC::VM *)*v48;
    *v48 = (_DWORD)v49 + 1;
    v50 = (v44 & 0x80000000) != 0
        ? (JSC::VM *)10
        : JSC::jsSubstringOfResolved(*(JSC **)(a10 + 24), **(JSC::VM ***)(a10 + 32), v44, (v45 - (_DWORD)v44), a5, (uint64_t)a6, (uint64_t)a7, a8);
    JSC::JSObject::putDirectIndex(v46, v47, v49, (unint64_t)v50, a5, (uint64_t)a6, (uint64_t)a7, a8, v38);
    v51 = **(_QWORD **)(a10 + 40);
    if (*(_DWORD *)(v51 + 80))
    {
      v54 = *(_DWORD *)(v51 + 80);
      if ((v54 & 0x27) != 0 && (v54 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v51 + 64), 7u, a3, v37, a5, (uint64_t)a6, (uint64_t)a7, a8);
      if (*(_QWORD *)(v51 + 16))
        break;
    }
    v52 = **(_DWORD **)(a10 + 16);
    v53 = **(_DWORD **)(a10 + 48);
    if (*(_DWORD *)(v12 + 80))
    {
      v55 = *(_DWORD *)(v12 + 80);
      if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v73, 7u, a3, v37, a5, (uint64_t)a6, (uint64_t)a7, a8);
      if (*(_QWORD *)(v12 + 16))
        return;
    }
    if (v52 >= v53)
      return;
    ++v42;
    v43 += 2;
    if (v42 > v24)
    {
      v19 = *a6;
      goto LABEL_43;
    }
  }
LABEL_78:
  if (*(_DWORD *)(v12 + 80))
  {
    v72 = *(_DWORD *)(v12 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
      JSC::VMTraps::handleTraps(v73, 7u, a3, v37, a5, (uint64_t)a6, (uint64_t)a7, a8);
  }
}

void JSC::RegExpStringIteratorPrototype::finishCreation(JSC::RegExpStringIteratorPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  char *v6;
  WTF::StringImpl *v7;
  uint64_t CodeExecutable;
  WTF::StringImpl *v9;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t CodeGenerator;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  WTF::StringImpl *v80;
  __int128 v81;

  v6 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v7 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2000);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    CodeExecutable = JSC::BuiltinExecutables::regExpStringIteratorPrototypeNextCodeExecutable(*((JSC::BuiltinExecutables **)a2
                                                                                              + 11644));
    v9 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 11644) + 8);
    ++*((_DWORD *)v9 + 2);
    v80 = v9;
    v81 = xmmword_199125550;
    v18 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)a2, 0, (uint64_t)&v80, 0, 0, 0, v10, COERCE_DOUBLE(0x1C5D30001C145), v11, v12);
    v19 = v80;
    v80 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
      else
        --*((_DWORD *)v19 + 2);
    }
    v20 = JSC::JSFunction::create((uint64_t)a2, v18, a3, v13, v14, v15, v16, v17);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v7, v20, 4, v21, v22, v23, v24);
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::~StringImpl(v7, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v7 -= 2;
    }
  }
  else
  {
    CodeGenerator = JSC::regExpStringIteratorPrototypeNextCodeGenerator((JSC::BuiltinExecutables **)a2, a2);
    v75 = JSC::JSFunction::create((uint64_t)a2, CodeGenerator, a3, v70, v71, v72, v73, v74);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v75, 4, v76, v77, v78, v79);
  }
  v32 = *(_QWORD *)(*(_QWORD *)v6 + 2776);
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0x1600000002;
  *(_QWORD *)(v33 + 8) = "RegExp String Iterator";
  *(_DWORD *)(v33 + 16) = 4;
  v80 = (WTF::StringImpl *)v33;
  v40 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v80, v34, v35, v36, v37, v38, v39);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v32, v40, 6, v41, v42, v43, v44);
  v52 = v80;
  v80 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
}

void JSC::handleResourceExhaustion(const char *a1, int a2, const char *a3, const char *a4, WTF *a5, const char *a6, const char *a7)
{
  WTFReportAssertionFailureWithMessage(a1, a2, a3, a4, "%s: %s", a6, a7);
  if ((_BYTE)word_1ECF4C620)
    WTF::exitProcess(a5);
  __break(0xC471u);
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(_WORD *a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  _WORD *v7;
  int8x16_t *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int16 v21;
  uint64_t v22;
  _WORD *v23;
  char *result;
  int8x16_t *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;
  int8x16x2_t v41;
  int8x16x2_t v42;

  *a1 = a2;
  v7 = a1 + 1;
  if (a3)
  {
    v9 = *(int8x16_t **)(a3 + 8);
    v10 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      v11 = (char *)&v7[v10];
      if (v10 >= 0x40)
      {
        v12 = (char *)&v7[v10 & 0xFFFFFFC0];
        v13 = 0uLL;
        v14 = (char *)(a1 + 1);
        do
        {
          v37.val[0] = *v9;
          v15 = v9[1];
          v39.val[0] = v9[2];
          v16 = v9[3];
          v9 += 4;
          v17 = v16;
          v39.val[1] = 0uLL;
          v41.val[0] = v15;
          v37.val[1] = 0uLL;
          v18 = v14;
          vst2q_s8(v18, v37);
          v18 += 32;
          v41.val[1] = 0uLL;
          vst2q_s8(v18, v41);
          v19 = v14 + 64;
          vst2q_s8(v19, v39);
          v20 = v14 + 96;
          vst2q_s8(v20, *(int8x16x2_t *)(&v13 - 1));
          v14 += 128;
        }
        while (v14 != v12);
      }
      else
      {
        v12 = (char *)(a1 + 1);
      }
      while (v12 != v11)
      {
        v21 = v9->u8[0];
        v9 = (int8x16_t *)((char *)v9 + 1);
        *(_WORD *)v12 = v21;
        v12 += 2;
      }
    }
    else if ((_DWORD)v10 == 1)
    {
      *v7 = v9->i16[0];
    }
    else if ((_DWORD)v10)
    {
      memcpy(a1 + 1, v9, 2 * v10);
    }
    v22 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v22 = 0;
  }
  v23 = &v7[v22];
  *v23 = a4;
  result = (char *)(v23 + 1);
  if (a5)
  {
    v25 = *(int8x16_t **)(a5 + 8);
    v26 = *(unsigned int *)(a5 + 4);
    if ((*(_BYTE *)(a5 + 16) & 4) != 0)
    {
      v27 = &result[2 * v26];
      if (v26 >= 0x40)
      {
        v28 = &result[2 * (v26 & 0xFFFFFFC0)];
        v29 = 0uLL;
        do
        {
          v38.val[0] = *v25;
          v30 = v25[1];
          v40.val[0] = v25[2];
          v31 = v25[3];
          v25 += 4;
          v32 = v31;
          v40.val[1] = 0uLL;
          v42.val[0] = v30;
          v38.val[1] = 0uLL;
          v33 = result;
          vst2q_s8(v33, v38);
          v33 += 32;
          v42.val[1] = 0uLL;
          vst2q_s8(v33, v42);
          v34 = result + 64;
          vst2q_s8(v34, v40);
          v35 = result + 96;
          vst2q_s8(v35, *(int8x16x2_t *)(&v29 - 1));
          result += 128;
        }
        while (result != v28);
        result = v28;
      }
      while (result != v27)
      {
        v36 = v25->u8[0];
        v25 = (int8x16_t *)((char *)v25 + 1);
        *(_WORD *)result = v36;
        result += 2;
      }
    }
    else if ((_DWORD)v26 == 1)
    {
      *(_WORD *)result = v25->i16[0];
    }
    else if ((_DWORD)v26)
    {
      return (char *)memcpy(result, v25, 2 * v26);
    }
  }
  return result;
}

uint64_t JSC::advanceStringUnicode(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  unsigned int v6;
  uint64_t v7;

  result = a3 + 1;
  if (result < a2 && a1 != 0)
  {
    v6 = *(_DWORD *)(a1 + 4);
    if (v6 > a3 && (*(_BYTE *)(a1 + 16) & 4) == 0)
    {
      v7 = *(_QWORD *)(a1 + 8);
      if (v6 > result && (*(_WORD *)(v7 + 2 * a3) & 0xFC00) == 55296)
      {
        if (*(_WORD *)(v7 + 2 * result) >> 10 == 55)
          return a3 + 2;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t JSC::advanceStringIndex(WTF::StringImpl *a1, unsigned int a2, unsigned int a3, char a4)
{
  uint64_t result;
  int v5;
  WTF::AtomStringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  if ((a4 & 1) == 0)
    return a3 + 1;
  if (!a1)
    return JSC::advanceStringUnicode(0, a2, a3);
  v5 = *(_DWORD *)a1;
  *(_DWORD *)a1 += 2;
  result = JSC::advanceStringUnicode((uint64_t)a1, a2, a3);
  if (v5)
  {
    *(_DWORD *)a1 = v5;
  }
  else
  {
    v21 = result;
    WTF::StringImpl::~StringImpl(a1, v6, v7, v8, v9, v10, v11, v12);
    WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    return v21;
  }
  return result;
}

uint64_t JSC::runtimeTypeForValue(uint64_t result)
{
  unsigned int v1;
  int v2;
  unint64_t v3;

  v3 = result;
  if (result == 10)
    return 2;
  if (result == 2)
    return 4;
  if (result)
  {
    if (JSC::JSValue::isAnyInt((JSC::JSValue *)&v3))
      return 16;
    if (v3 >> 49)
      return 32;
    if ((v3 & 0xFFFE000000000002) != 0)
    {
      if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
LABEL_18:
        if (JSC::JSValue::isCallable((JSC::JSValue *)&v3))
          return 1;
        if ((v3 & 0xFFFE000000000002) != 0)
          return 0;
        v2 = *(unsigned __int8 *)(v3 + 5);
        if (v2 == 4)
          return 256;
        else
          return (v2 == 3) << 9;
      }
    }
    else
    {
      v1 = *(unsigned __int8 *)(v3 + 5);
      if (v1 == 2)
        return 64;
      if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 6)
      {
        if (v1 > 0x16)
          return 128;
        goto LABEL_18;
      }
    }
    return 8;
  }
  return result;
}

void JSC::SamplingProfiler::visit<JSC::SlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;

  v8 = atomic_load((unsigned __int8 *)(a1 + 4));
  if ((v8 & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198B9FF88);
  }
  v10 = *(_QWORD *)(a1 + 104);
  if (v10)
  {
    v11 = *(unsigned int *)(v10 - 4);
    v12 = (unint64_t *)(v10 + 8 * v11);
    if (*(_DWORD *)(v10 - 12))
    {
      v13 = *(unint64_t **)(a1 + 104);
      if ((_DWORD)v11)
      {
        v14 = 8 * v11;
        v13 = *(unint64_t **)(a1 + 104);
        while (*v13 + 1 <= 1)
        {
          ++v13;
          v14 -= 8;
          if (!v14)
          {
            v13 = v12;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v13 = (unint64_t *)(v10 + 8 * v11);
  }
  else
  {
    v13 = 0;
    v11 = 0;
  }
  v12 = (unint64_t *)(v10 + 8 * v11);
  if (v10)
  {
LABEL_9:
    v15 = (unint64_t *)(v10 + 8 * *(unsigned int *)(v10 - 4));
    goto LABEL_10;
  }
  v15 = 0;
LABEL_10:
  while (v13 != v15)
  {
    v16 = *v13;
    if (*v13)
    {
      if ((v16 & 8) != 0)
      {
        if ((*(_BYTE *)(v16 - 79) & 1) == 0)
          goto LABEL_25;
      }
      else
      {
        v17 = *(_DWORD *)(a2 + 132);
        if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
          JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, a3, a4, a5, a6, a7, a8);
        if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        {
LABEL_25:
          JSC::SlotVisitor::appendSlow(a2, v16, 0, a4, a5, a6, a7, a8);
          goto LABEL_17;
        }
      }
      if (*(_QWORD *)(a2 + 168))
        goto LABEL_25;
    }
LABEL_17:
    v18 = v13 + 1;
    v13 = v12;
    if (v18 != v12)
    {
      v13 = v18;
      while (*v13 + 1 <= 1)
      {
        if (++v13 == v12)
        {
          v13 = v12;
          break;
        }
      }
    }
  }
}

uint64_t JSC::SamplingProfiler::SamplingProfiler(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a2;
  v11 = WTF::cryptographicallyRandomNumber<unsigned int>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  *(_DWORD *)(a1 + 16) = v11;
  if (!v11)
    v11 = 1;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = (((unint64_t)v11 >> 26) | ((unint64_t)v11 << 23)) ^ ((v11 ^ ((unint64_t)v11 << 23)) >> 17);
  v13 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  LODWORD(v12) = dword_1ECF4C5E4;
  *(double *)(a1 + 80) = (double)v12 / 1000.0 / 1000.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(a1 + 112, 0x100uLL);
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v14 = 0;
  v22 = *(_QWORD **)(a2 + 368);
  *(_QWORD *)(a2 + 368) = v14;
  if (v22)
  {
    if (*v22)
      WTF::fastFree(*v22 - 16, v15, v16, v17, v18, v19, v20, v21);
    WTF::fastFree((unint64_t)v22, v15, v16, v17, v18, v19, v20, v21);
  }
  v23 = *(unsigned int *)(a2 + 388);
  if ((_DWORD)v23)
  {
    v24 = *(uint64_t **)(a2 + 376);
    v25 = 8 * v23;
    do
    {
      v26 = *v24++;
      v27 = *(uint64_t **)(a2 + 368);
      v30 = v26 + 112;
      WTF::HashTable<JSC::JSGlobalObject *,JSC::JSGlobalObject *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>,WTF::HashTraits<JSC::JSGlobalObject *>>::add(v27, &v30, v17, v18, v19, v20, v21, (uint64_t)&v29);
      v25 -= 8;
    }
    while (v25);
  }
  return a1;
}

void JSC::SamplingProfiler::~SamplingProfiler(JSC::SamplingProfiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count **v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count **v65;
  JSC::Wasm::NameSection *v66;

  WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 112, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 13);
  if (v16)
    WTF::fastFree(v16 - 16, v9, v10, v11, v12, v13, v14, v15);
  v17 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v17));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v17);
      v38 = *(unsigned int **)(v17 + 96);
      *(_QWORD *)(v17 + 96) = 0;
      if (v38)
      {
        v39 = v38 + 2;
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
        {
          atomic_store(1u, v38 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v17 + 64), v9, v10, v11, v12, v13, v14, v15);
      v49 = *(_QWORD *)(v17 + 32);
      if (v49)
      {
        v50 = *(unsigned int *)(v49 - 4);
        if ((_DWORD)v50)
        {
          v51 = (std::__shared_weak_count **)(v49 + 16);
          do
          {
            if (*(v51 - 2) != (std::__shared_weak_count *)-1 && *v51)
              std::__shared_weak_count::__release_weak(*v51);
            v51 += 3;
            --v50;
          }
          while (v50);
        }
        WTF::fastFree(v49 - 16, v42, v43, v44, v45, v46, v47, v48);
      }
      WTF::fastFree(v17, v42, v43, v44, v45, v46, v47, v48);
    }
  }
  v20 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v52 = *(unsigned int **)(v20 + 96);
      *(_QWORD *)(v20 + 96) = 0;
      if (v52)
      {
        v53 = v52 + 2;
        do
        {
          v54 = __ldaxr(v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v53));
        if (!v55)
        {
          atomic_store(1u, v52 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v20 + 64), v9, v10, v11, v12, v13, v14, v15);
      v63 = *(_QWORD *)(v20 + 32);
      if (v63)
      {
        v64 = *(unsigned int *)(v63 - 4);
        if ((_DWORD)v64)
        {
          v65 = (std::__shared_weak_count **)(v63 + 16);
          do
          {
            if (*(v65 - 2) != (std::__shared_weak_count *)-1 && *v65)
              std::__shared_weak_count::__release_weak(*v65);
            v65 += 3;
            --v64;
          }
          while (v64);
        }
        WTF::fastFree(v63 - 16, v56, v57, v58, v59, v60, v61, v62);
      }
      WTF::fastFree(v20, v56, v57, v58, v59, v60, v61, v62);
    }
  }
  v23 = *((unsigned int *)this + 19);
  if ((_DWORD)v23)
  {
    v24 = v23 << 6;
    v25 = *((_QWORD *)this + 8) + 48;
    do
    {
      v25 = WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v25, v9, v10, v11, v12, v13, v14, v15)+ 64;
      v24 -= 64;
    }
    while (v24);
  }
  v26 = *((_QWORD *)this + 8);
  if (v26)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v26, v9, v10, v11, v12, v13, v14, v15);
  }
  v27 = *((unsigned int *)this + 15);
  v28 = *((_QWORD *)this + 6);
  if ((_DWORD)v27)
  {
    v29 = v28 + 32 * v27;
    do
    {
      v30 = *(_DWORD *)(v28 + 28);
      v31 = *(_QWORD *)(v28 + 16);
      if (v30)
      {
        v32 = v31 + 136 * v30;
        do
        {
          if (*(_BYTE *)(v31 + 56))
          {
            v33 = *(unsigned int **)(v31 + 48);
            *(_QWORD *)(v31 + 48) = 0;
            if (v33)
            {
              do
              {
                v34 = __ldaxr(v33);
                v35 = v34 - 1;
              }
              while (__stlxr(v35, v33));
              if (!v35)
              {
                atomic_store(1u, v33);
                v66 = (JSC::Wasm::NameSection *)v33;
                WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v66, v9, v10, v11, v12, v13, v14, v15);
              }
            }
          }
          v31 += 136;
        }
        while (v31 != v32);
        v31 = *(_QWORD *)(v28 + 16);
      }
      if (v31)
      {
        *(_QWORD *)(v28 + 16) = 0;
        *(_DWORD *)(v28 + 24) = 0;
        WTF::fastFree(v31, v9, v10, v11, v12, v13, v14, v15);
      }
      v28 += 32;
    }
    while (v28 != v29);
    v28 = *((_QWORD *)this + 6);
  }
  if (v28)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v28, v9, v10, v11, v12, v13, v14, v15);
  }
  v36 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
    {
      v37 = *(_QWORD *)(v36 + 24);
      if (v37)
      {
        *(_QWORD *)(v36 + 24) = 0;
        *(_DWORD *)(v36 + 32) = 0;
        WTF::fastFree(v37, v9, v10, v11, v12, v13, v14, v15);
      }
      WTF::fastFree(v36, v9, v10, v11, v12, v13, v14, v15);
    }
    else
    {
      --*(_DWORD *)v36;
    }
  }
}

void JSC::SamplingProfiler::createThreadIfNecessary(JSC::SamplingProfiler *this)
{
  unsigned int v2;
  unsigned int v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count **v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count **v57;
  _QWORD *v58;
  unint64_t v59;

  if (!*((_QWORD *)this + 11))
  {
    do
      v2 = __ldaxr((unsigned int *)this);
    while (__stlxr(v2 + 1, (unsigned int *)this));
    do
      v3 = __ldaxr((unsigned int *)this);
    while (__stlxr(v3 + 1, (unsigned int *)this));
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E35ADBC0;
    v4[1] = this;
    v58 = v4;
    WTF::Thread::create((uint64_t)"jsc.sampling-profiler.thread", 29, (uint64_t *)&v58, 1, 0, (uint64_t *)&v59);
    v12 = v59;
    v59 = 0;
    v13 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v12;
    if (v13)
    {
      do
      {
        v14 = __ldaxr((unsigned int *)v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)v13));
      if (!v15)
      {
        atomic_store(1u, (unsigned int *)v13);
        v30 = *(unsigned int **)(v13 + 96);
        *(_QWORD *)(v13 + 96) = 0;
        if (v30)
        {
          v31 = v30 + 2;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            atomic_store(1u, v30 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
          }
        }
        WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v13 + 64), v5, v6, v7, v8, v9, v10, v11);
        v41 = *(_QWORD *)(v13 + 32);
        if (v41)
        {
          v42 = *(unsigned int *)(v41 - 4);
          if ((_DWORD)v42)
          {
            v43 = (std::__shared_weak_count **)(v41 + 16);
            do
            {
              if (*(v43 - 2) != (std::__shared_weak_count *)-1 && *v43)
                std::__shared_weak_count::__release_weak(*v43);
              v43 += 3;
              --v42;
            }
            while (v42);
          }
          WTF::fastFree(v41 - 16, v34, v35, v36, v37, v38, v39, v40);
        }
        WTF::fastFree(v13, v34, v35, v36, v37, v38, v39, v40);
      }
      v16 = v59;
      v59 = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr((unsigned int *)v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, (unsigned int *)v16));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)v16);
          v44 = *(unsigned int **)(v16 + 96);
          *(_QWORD *)(v16 + 96) = 0;
          if (v44)
          {
            v45 = v44 + 2;
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
            {
              atomic_store(1u, v44 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
            }
          }
          WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v16 + 64), v5, v6, v7, v8, v9, v10, v11);
          v55 = *(_QWORD *)(v16 + 32);
          if (v55)
          {
            v56 = *(unsigned int *)(v55 - 4);
            if ((_DWORD)v56)
            {
              v57 = (std::__shared_weak_count **)(v55 + 16);
              do
              {
                if (*(v57 - 2) != (std::__shared_weak_count *)-1 && *v57)
                  std::__shared_weak_count::__release_weak(*v57);
                v57 += 3;
                --v56;
              }
              while (v56);
            }
            WTF::fastFree(v55 - 16, v48, v49, v50, v51, v52, v53, v54);
          }
          WTF::fastFree(v16, v48, v49, v50, v51, v52, v53, v54);
        }
      }
    }
    v19 = (uint64_t)v58;
    v58 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    do
    {
      v20 = __ldaxr((unsigned int *)this);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, (unsigned int *)this));
    if (!v21)
    {
      atomic_store(1u, (unsigned int *)this);
      JSC::SamplingProfiler::~SamplingProfiler(this, v5, v6, v7, v8, v9, v10, v11);
      WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
    }
  }
}

void JSC::SamplingProfiler::processUnverifiedStackTraces(JSC::SamplingProfiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  JSC::SamplingProfiler *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  JSC::Wasm::NameSection *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  JSC::CodeBlock *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  _DWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _BYTE *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  _QWORD *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  _QWORD *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  uint64_t *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v170[3];
  JSC::Wasm::NameSection *v171[4];
  uint64_t v172;
  uint64_t v173[3];
  char v174;
  uint64_t v175;
  _BYTE v176[40];
  char v177;
  unsigned int *v178;
  unsigned __int8 v179;
  _BYTE v180[32];
  __int128 v181;
  __int128 v182;
  char v183;
  JSC::Wasm::NameSection *v184[2];

  v8 = atomic_load((unsigned __int8 *)this + 4);
  if ((v8 & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_162;
  }
  v9 = this;
  v175 = *(_QWORD *)(*((_QWORD *)this + 1) + 448);
  v10 = *((unsigned int *)this + 19);
  if ((_DWORD)v10)
  {
    v166 = (uint64_t *)((char *)this + 104);
    v11 = *((_QWORD *)this + 8);
    v12 = 0uLL;
    v167 = v11 + (v10 << 6);
    v168 = (_QWORD *)((char *)this + 48);
    while (1)
    {
      *(_OWORD *)v176 = v12;
      *(_OWORD *)&v176[16] = v12;
      v13 = *((unsigned int *)v9 + 15);
      if ((_DWORD)v13 == *((_DWORD *)v9 + 14))
      {
        v14 = WTF::Vector<JSC::SamplingProfiler::StackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v168, v13 + 1, (unint64_t)v176);
        v12 = 0uLL;
        v15 = *((_QWORD *)v9 + 6) + 32 * *((unsigned int *)v9 + 15);
        v16 = *(_QWORD *)v14;
        *(_QWORD *)(v15 + 16) = 0;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)v15 = v16;
        *(_QWORD *)(v15 + 8) = 0;
        v17 = *(_QWORD *)(v14 + 16);
        *(_QWORD *)(v14 + 16) = 0;
        *(_QWORD *)(v15 + 16) = v17;
        LODWORD(v17) = *(_DWORD *)(v14 + 24);
        *(_DWORD *)(v14 + 24) = 0;
        *(_DWORD *)(v15 + 24) = v17;
        v18 = *(_DWORD *)(v14 + 28);
        *(_DWORD *)(v14 + 28) = 0;
      }
      else
      {
        v15 = *v168 + 32 * v13;
        *(_OWORD *)v15 = v12;
        *(_OWORD *)(v15 + 16) = v12;
        v19 = *(_QWORD *)&v176[16];
        *(_QWORD *)&v176[16] = 0;
        *(_QWORD *)(v15 + 16) = v19;
        LODWORD(v19) = *(_DWORD *)&v176[24];
        *(_DWORD *)&v176[24] = 0;
        *(_DWORD *)(v15 + 24) = v19;
        v18 = *(_DWORD *)&v176[28];
        *(_DWORD *)&v176[28] = 0;
      }
      *(_DWORD *)(v15 + 28) = v18;
      ++*((_DWORD *)v9 + 15);
      v20 = *(_QWORD *)&v176[16];
      if (*(_DWORD *)&v176[28])
      {
        v21 = *(_QWORD *)&v176[16] + 136 * *(unsigned int *)&v176[28];
        do
        {
          if (*(_BYTE *)(v20 + 56))
          {
            v22 = *(unsigned int **)(v20 + 48);
            *(_QWORD *)(v20 + 48) = 0;
            if (v22)
            {
              do
              {
                v23 = __ldaxr(v22);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, v22));
              if (!v24)
              {
                atomic_store(1u, v22);
                v171[0] = (JSC::Wasm::NameSection *)v22;
                WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v171, a2, a3, a4, a5, a6, a7, a8);
                v12 = 0uLL;
              }
            }
          }
          v20 += 136;
        }
        while (v20 != v21);
        v20 = *(_QWORD *)&v176[16];
      }
      if (v20)
      {
        *(_QWORD *)&v176[16] = 0;
        *(_DWORD *)&v176[24] = 0;
        WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
        v12 = 0uLL;
      }
      v25 = *((unsigned int *)v9 + 15);
      if (!(_DWORD)v25)
      {
        __break(0xC471u);
        JUMPOUT(0x198BA111CLL);
      }
      v26 = v25 - 1;
      v27 = *((_QWORD *)v9 + 6);
      v28 = v27 + 32 * (v25 - 1);
      *(_QWORD *)v28 = *(_QWORD *)v11;
      *(_QWORD *)(v28 + 8) = *(_QWORD *)(v11 + 8);
      v174 = 0;
      v173[0] = (uint64_t)v9;
      v173[1] = v28;
      v173[2] = (uint64_t)&v174;
      v171[0] = v9;
      v171[1] = (JSC::Wasm::NameSection *)v28;
      v171[2] = (JSC::Wasm::NameSection *)&v172;
      v171[3] = (JSC::Wasm::NameSection *)&v175;
      v172 = v28;
      v170[0] = (uint64_t)v9;
      v170[1] = v28;
      v170[2] = (uint64_t)v173;
      if (*(_QWORD *)(v11 + 40))
      {
        JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_2::operator()(v28);
        v34 = *(_DWORD *)(v28 + 28);
        if (!v34)
        {
          __break(0xC471u);
          JUMPOUT(0x198BA1124);
        }
        v35 = *(JSC::Wasm::NameSection **)(v11 + 40);
        v36 = *(_QWORD *)(v28 + 16) + 136 * v34;
        *(_QWORD *)(v36 - 104) = v35;
        *(_DWORD *)(v36 - 136) = 3;
        *(_BYTE *)(v36 - 47) = 1;
        v184[0] = v35;
        WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::add(v176, v166, (uint64_t *)v184, v29, v30, v31, v32, v33);
LABEL_22:
        v37 = 0;
        goto LABEL_23;
      }
      if (!*(_DWORD *)(v11 + 60))
        goto LABEL_46;
      v38 = *(_QWORD *)(v11 + 48);
      v39 = *(JSC::CodeBlock **)(v38 + 16);
      if (!v39)
        break;
      if (*(_BYTE *)(v11 + 24))
      {
        v40 = *((_QWORD *)v39 + 15);
        if (v40)
        {
          a3 = *(unsigned __int8 *)(v40 + 12);
          if ((a3 & 0xFE) == 2)
          {
            v41 = *(_DWORD *)(v11 + 32);
            if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v39 + 7) + 80) + 12) <= v41)
              v42 = 0xFFFFFFFFLL;
            else
              v42 = 4 * v41;
            JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_0::operator()(v173, (uint64_t)v39, a3, v42, a5, a6, a7, a8);
            if (!*(_DWORD *)(v11 + 60))
            {
              __break(0xC471u);
              JUMPOUT(0x198BA112CLL);
            }
            JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_4::operator()((uint64_t *)v171, *(_QWORD *)(v11 + 48), v43, v44, v45, v46, v47, v48);
LABEL_112:
            v37 = 1;
LABEL_23:
            v12 = 0uLL;
            goto LABEL_47;
          }
        }
LABEL_46:
        v37 = 0;
        goto LABEL_47;
      }
      JSC::CodeBlock::findPC(v39, *(void **)(v11 + 16), (unsigned int *)v176);
      if (!v176[8])
        goto LABEL_22;
      if ((v176[0] & 1) != 0)
      {
        v154 = *(_QWORD *)(*(_QWORD *)v176 & 0xFFFFFFFF8);
        if ((v176[0] & 2) != 0
          || (v155 = *(unsigned int *)((*(_QWORD *)v176 & 0xFFFFFFFF8) + 8), (_DWORD)v155 == 0x3FFFFFFF)
          || (_DWORD)v155 == -1)
        {
          v156 = 2;
        }
        else if (v155 >> 28)
        {
          v159 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v159 = v154;
          *(_DWORD *)(v159 + 8) = v155;
          v156 = 1;
          v154 = v159;
        }
        else
        {
          v156 = *(_QWORD *)(*(_QWORD *)v176 & 0xFFFFFFFF8);
          v154 = v155 << 36;
        }
        v157 = v154 | v156;
        JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_5::operator()(v170, v39, v154 | v156, a4, a5, a6, a7, a8);
        if ((v157 & 1) != 0 && (v157 & 0xFFFFFFFF8) != 0)
          WTF::fastFree(v157 & 0xFFFFFFFF8, v158, v140, v141, v142, v143, v144, v145);
      }
      else
      {
        JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_5::operator()(v170, v39, *(uint64_t *)v176, a4, a5, a6, a7, a8);
      }
      if (!*(_DWORD *)(v11 + 60))
      {
        __break(0xC471u);
LABEL_162:
        JUMPOUT(0x198BA110CLL);
      }
      JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_4::operator()((uint64_t *)v171, *(_QWORD *)(v11 + 48), v140, v141, v142, v143, v144, v145);
      if (!v176[8])
        goto LABEL_112;
      v12 = 0uLL;
      if ((v176[0] & 1) != 0 && (*(_QWORD *)v176 & 0xFFFFFFFF8) != 0)
      {
        WTF::fastFree(*(_QWORD *)v176 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
        v12 = 0uLL;
      }
      v37 = 1;
LABEL_47:
      if (v37 < *(unsigned int *)(v11 + 60))
      {
        v62 = v27 + 32 * v26;
        v63 = v62 + 16;
        v64 = (unsigned int *)(v62 + 28);
        v65 = (_DWORD *)(v62 + 24);
        while (1)
        {
          v66 = *(_QWORD *)(v11 + 48);
          v67 = (_QWORD *)(v66 + 72 * v37);
          v68 = (_QWORD *)v67[2];
          if (v68)
            break;
          if (*v67)
          {
            *(_DWORD *)v176 = 5;
            v179 = 0;
            *(_WORD *)v180 = 0;
            *(_OWORD *)&v176[8] = v12;
            *(_OWORD *)&v176[24] = v12;
            v177 = 0;
            *(_QWORD *)&v180[4] = -1;
            *(_QWORD *)&v180[12] = -1;
            *(_DWORD *)&v180[20] = 0;
            *(_WORD *)&v180[24] = 0;
            LOBYTE(v181) = 0;
            v183 = 0;
            v82 = *v64;
            if ((_DWORD)v82 == *v65)
            {
              v83 = WTF::Vector<JSC::SamplingProfiler::StackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v63, v82 + 1, (unint64_t)v176);
              v84 = *v64;
              v85 = *(_QWORD *)v63;
              v86 = *(_QWORD *)v63 + 136 * *v64;
              v87 = *(_QWORD *)(v83 + 32);
              v88 = *(_OWORD *)(v83 + 16);
              *(_OWORD *)v86 = *(_OWORD *)v83;
              *(_OWORD *)(v86 + 16) = v88;
              *(_QWORD *)(v86 + 32) = v87;
              *(_BYTE *)(v86 + 40) = 0;
              v89 = (_QWORD *)(v86 + 40);
              *(_BYTE *)(v86 + 56) = 0;
              v90 = (_BYTE *)(v86 + 56);
              if (*(_BYTE *)(v83 + 56))
              {
                *v89 = *(_QWORD *)(v83 + 40);
                v91 = *(_QWORD *)(v83 + 48);
                *(_QWORD *)(v83 + 48) = 0;
                *(_QWORD *)(v85 + 136 * v84 + 48) = v91;
                *v90 = 1;
              }
              v92 = v85 + 136 * v84;
              *(_OWORD *)(v92 + 64) = *(_OWORD *)(v83 + 64);
              v93 = *(_OWORD *)(v83 + 80);
              v94 = *(_OWORD *)(v83 + 96);
              v95 = *(_OWORD *)(v83 + 112);
              *(_BYTE *)(v92 + 128) = *(_BYTE *)(v83 + 128);
              *(_OWORD *)(v92 + 96) = v94;
              *(_OWORD *)(v92 + 112) = v95;
              *(_OWORD *)(v92 + 80) = v93;
              LODWORD(v92) = v179;
              ++*v64;
              v12 = 0uLL;
              if ((_DWORD)v92)
              {
                v96 = v178;
                v178 = 0;
                if (v96)
                {
                  do
                  {
                    v97 = __ldaxr(v96);
                    v98 = v97 - 1;
                  }
                  while (__stlxr(v98, v96));
                  if (!v98)
                  {
                    atomic_store(1u, v96);
                    v184[0] = (JSC::Wasm::NameSection *)v96;
                    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v184, a2, a3, a4, a5, a6, a7, a8);
                    v12 = 0uLL;
                  }
                }
              }
            }
            else
            {
              v118 = *(_QWORD *)v63 + 136 * v82;
              v119 = *(_OWORD *)v176;
              v120 = *(_OWORD *)&v176[16];
              *(_QWORD *)(v118 + 32) = *(_QWORD *)&v176[32];
              *(_OWORD *)v118 = v119;
              *(_OWORD *)(v118 + 16) = v120;
              *(_BYTE *)(v118 + 40) = 0;
              *(_BYTE *)(v118 + 56) = 0;
              *(_OWORD *)(v118 + 64) = *(_OWORD *)v180;
              v121 = *(_OWORD *)&v180[16];
              v122 = v181;
              v123 = v182;
              *(_BYTE *)(v118 + 128) = v183;
              *(_OWORD *)(v118 + 96) = v122;
              *(_OWORD *)(v118 + 112) = v123;
              *(_OWORD *)(v118 + 80) = v121;
              ++*v64;
            }
            v124 = *(_DWORD *)(v63 + 12);
            if (!v124)
            {
              __break(0xC471u);
              JUMPOUT(0x198BA1114);
            }
            v125 = *(_QWORD *)v63 + 136 * v124;
            *(_QWORD *)(v125 - 128) = *v67;
            *(_DWORD *)(v125 - 136) = 4;
            goto LABEL_85;
          }
          *(_DWORD *)v176 = 5;
          v179 = 0;
          *(_WORD *)v180 = 0;
          *(_OWORD *)&v176[8] = v12;
          *(_OWORD *)&v176[24] = v12;
          v177 = 0;
          *(_QWORD *)&v180[4] = -1;
          *(_QWORD *)&v180[12] = -1;
          *(_DWORD *)&v180[20] = 0;
          *(_WORD *)&v180[24] = 0;
          LOBYTE(v181) = 0;
          v183 = 0;
          v101 = *v64;
          if ((_DWORD)v101 == *v65)
          {
            v102 = WTF::Vector<JSC::SamplingProfiler::StackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v63, v101 + 1, (unint64_t)v176);
            v103 = *v64;
            v104 = *(_QWORD *)v63;
            v105 = *(_QWORD *)v63 + 136 * *v64;
            v106 = *(_QWORD *)(v102 + 32);
            v107 = *(_OWORD *)(v102 + 16);
            *(_OWORD *)v105 = *(_OWORD *)v102;
            *(_OWORD *)(v105 + 16) = v107;
            *(_QWORD *)(v105 + 32) = v106;
            *(_BYTE *)(v105 + 40) = 0;
            v108 = (_QWORD *)(v105 + 40);
            *(_BYTE *)(v105 + 56) = 0;
            v109 = (_BYTE *)(v105 + 56);
            if (*(_BYTE *)(v102 + 56))
            {
              *v108 = *(_QWORD *)(v102 + 40);
              v110 = *(_QWORD *)(v102 + 48);
              *(_QWORD *)(v102 + 48) = 0;
              *(_QWORD *)(v104 + 136 * v103 + 48) = v110;
              *v109 = 1;
            }
            v111 = v104 + 136 * v103;
            *(_OWORD *)(v111 + 64) = *(_OWORD *)(v102 + 64);
            v112 = *(_OWORD *)(v102 + 80);
            v113 = *(_OWORD *)(v102 + 96);
            v114 = *(_OWORD *)(v102 + 112);
            *(_BYTE *)(v111 + 128) = *(_BYTE *)(v102 + 128);
            *(_OWORD *)(v111 + 96) = v113;
            *(_OWORD *)(v111 + 112) = v114;
            *(_OWORD *)(v111 + 80) = v112;
            LODWORD(v111) = v179;
            ++*v64;
            v12 = 0uLL;
            if (!(_DWORD)v111)
              goto LABEL_85;
            v115 = v178;
            v178 = 0;
            if (!v115)
              goto LABEL_85;
            do
            {
              v116 = __ldaxr(v115);
              v117 = v116 - 1;
            }
            while (__stlxr(v117, v115));
            if (v117)
              goto LABEL_85;
            atomic_store(1u, v115);
            v184[0] = (JSC::Wasm::NameSection *)v115;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v184, a2, a3, a4, a5, a6, a7, a8);
            goto LABEL_84;
          }
          v126 = *(_QWORD *)v63 + 136 * v101;
          v127 = *(_OWORD *)v176;
          v128 = *(_OWORD *)&v176[16];
          *(_QWORD *)(v126 + 32) = *(_QWORD *)&v176[32];
          *(_OWORD *)v126 = v127;
          *(_OWORD *)(v126 + 16) = v128;
          *(_BYTE *)(v126 + 40) = 0;
          *(_BYTE *)(v126 + 56) = 0;
          *(_OWORD *)(v126 + 64) = *(_OWORD *)v180;
          v129 = *(_OWORD *)&v180[16];
          v130 = v181;
          v131 = v182;
          *(_BYTE *)(v126 + 128) = v183;
          *(_OWORD *)(v126 + 96) = v130;
          *(_OWORD *)(v126 + 112) = v131;
          *(_OWORD *)(v126 + 80) = v129;
          ++*v64;
LABEL_85:
          if (!*v67)
          {
            JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_4::operator()((uint64_t *)v171, (uint64_t)v67, a3, a4, a5, a6, a7, a8);
            v12 = 0uLL;
          }
          if (++v37 >= *(unsigned int *)(v11 + 60))
            goto LABEL_103;
        }
        v69 = *(unsigned int *)(v66 + 72 * v37 + 24);
        v70 = (_BYTE *)v68[15];
        if (v70)
        {
          v71 = v70[12];
          if ((v71 & 0xFE) == 4)
          {
            if (*(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v70 + 72))(v70) + 40) + 20) <= v69)
            {
              v99 = v68[15];
              if (v99)
                v100 = *(_BYTE *)(v99 + 12);
              else
                v100 = 0;
              JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_0::operator()(v173, (uint64_t)v68, v100, 0xFFFFFFFFLL, v72, v73, v74, v75);
            }
            else
            {
              v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)v68[15] + 72))(v68[15])
                                                      + 40)
                                          + 8)
                              + 8 * v69);
              if ((v76 & 1) != 0)
              {
                v133 = *(_QWORD *)(v76 & 0xFFFFFFFF8);
                if ((v76 & 2) != 0
                  || ((v134 = *(unsigned int *)((v76 & 0xFFFFFFFF8) + 8), (_DWORD)v134 != 0x3FFFFFFF)
                    ? (v135 = (_DWORD)v134 == -1)
                    : (v135 = 1),
                      v135))
                {
                  v136 = 2;
                }
                else if (v134 >> 28)
                {
                  v164 = *(_QWORD *)(v76 & 0xFFFFFFFF8);
                  v139 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v139 = v164;
                  *(_DWORD *)(v139 + 8) = v134;
                  v136 = 1;
                  v133 = v139;
                }
                else
                {
                  v136 = *(_QWORD *)(v76 & 0xFFFFFFFF8);
                  v133 = v134 << 36;
                }
                v137 = v68;
                v138 = v133 | v136;
                JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_5::operator()(v170, v137, v133 | v136, v77, v78, v79, v80, v81);
                v12 = 0uLL;
                if ((v138 & 1) == 0 || (v138 & 0xFFFFFFFF8) == 0)
                  goto LABEL_85;
                WTF::fastFree(v138 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
              }
              else
              {
                JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_5::operator()(v170, v68, v76, v77, v78, v79, v80, v81);
              }
            }
            goto LABEL_84;
          }
        }
        else
        {
          v71 = 0;
        }
        if (*(_DWORD *)(*(_QWORD *)(v68[7] + 80) + 12) <= v69)
          v132 = 0xFFFFFFFFLL;
        else
          v132 = (4 * v69);
        JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_0::operator()(v173, v67[2], v71, v132, a5, a6, a7, a8);
LABEL_84:
        v12 = 0uLL;
        goto LABEL_85;
      }
LABEL_103:
      v11 += 64;
      v9 = this;
      if (v11 == v167)
        goto LABEL_146;
    }
    if ((*(_QWORD *)(v38 + 8) & 0xFFFE000000000007) != 3 || *(_BYTE *)(v38 + 28) != 1)
      goto LABEL_46;
    JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_2::operator()(v28);
    if (!*(_DWORD *)(v11 + 60))
    {
      __break(0xC471u);
      JUMPOUT(0x198BA1134);
    }
    v49 = *(unsigned int *)(v172 + 28);
    if (!(_DWORD)v49)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA113CLL);
    }
    v50 = *(_QWORD *)(v11 + 48);
    a2 = *(void **)(v11 + 16);
    v51 = v49 - 1;
    v52 = *(_QWORD *)(v172 + 16);
    v53 = v52 + 136 * (v49 - 1);
    *(_DWORD *)v53 = 1;
    v54 = v53 + 40;
    v55 = *(unsigned __int8 *)(v53 + 56);
    v12 = 0uLL;
    if (v55 == *(unsigned __int8 *)(v50 + 48))
    {
      if (v55)
      {
        *(_QWORD *)v54 = *(_QWORD *)(v50 + 32);
        v56 = *(unsigned int **)(v50 + 40);
        if (v56)
        {
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 + 1, v56));
        }
        v58 = *(unsigned int **)(v54 + 8);
        *(_QWORD *)(v54 + 8) = v56;
        if (v58)
        {
          do
          {
            v59 = __ldaxr(v58);
            v60 = v59 - 1;
          }
          while (__stlxr(v60, v58));
          if (!v60)
          {
            atomic_store(1u, v58);
            *(_QWORD *)v176 = v58;
            v61 = a2;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)v176, a2, a3, a4, a5, a6, a7, a8);
            a2 = v61;
            v12 = 0uLL;
          }
        }
      }
    }
    else if (v55)
    {
      v146 = *(unsigned int **)(v54 + 8);
      *(_QWORD *)(v54 + 8) = 0;
      if (v146)
      {
        do
        {
          v147 = __ldaxr(v146);
          v148 = v147 - 1;
        }
        while (__stlxr(v148, v146));
        if (!v148)
        {
          atomic_store(1u, v146);
          *(_QWORD *)v176 = v146;
          v165 = a2;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)v176, a2, a3, a4, a5, a6, a7, a8);
          a2 = v165;
          v12 = 0uLL;
        }
      }
      *(_BYTE *)(v54 + 16) = 0;
    }
    else
    {
      *(_QWORD *)v54 = *(_QWORD *)(v50 + 32);
      v149 = *(unsigned int **)(v50 + 40);
      if (v149)
      {
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 + 1, v149));
      }
      *(_QWORD *)(v54 + 8) = v149;
      *(_BYTE *)(v54 + 16) = 1;
    }
    *(_WORD *)(v52 + 136 * v51 + 64) = *(_WORD *)(v50 + 56);
    if (a2)
    {
      v151 = *(_QWORD *)(v50 + 64);
      if (v151)
      {
        JSC::PCToCodeOriginMap::findPC((JSC::PCToCodeOriginMap *)(v151 + 8), a2, a3, a4, a5, a6, a7, a8, v176);
        v12 = 0uLL;
        if (v176[8])
        {
          v152 = *(_QWORD *)v176;
          if ((v176[0] & 2) != 0)
          {
            *(_DWORD *)(v52 + 136 * v51 + 68) = -1;
            if ((v152 & 1) == 0)
              goto LABEL_128;
            v153 = v152 & 0xFFFFFFFF8;
          }
          else
          {
            if ((v176[0] & 1) == 0)
            {
              *(_DWORD *)(v52 + 136 * v51 + 68) = *(_QWORD *)v176 >> 36;
              goto LABEL_128;
            }
            v153 = *(_QWORD *)v176 & 0xFFFFFFFF8;
            *(_DWORD *)(v52 + 136 * v51 + 68) = *(_DWORD *)((*(_QWORD *)v176 & 0xFFFFFFFF8) + 8);
          }
          if (v153)
          {
            WTF::fastFree(v153, a2, a3, a4, a5, a6, a7, a8);
            v12 = 0uLL;
          }
        }
      }
    }
LABEL_128:
    v37 = 1;
    goto LABEL_47;
  }
LABEL_146:
  if (*((_DWORD *)v9 + 18))
  {
    v160 = *((unsigned int *)v9 + 19);
    v161 = *((_QWORD *)v9 + 8);
    if ((_DWORD)v160)
    {
      v162 = v160 << 6;
      v163 = v161 + 48;
      do
      {
        v163 = WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v163, a2, a3, a4, a5, a6, a7, a8)+ 64;
        v162 -= 64;
      }
      while (v162);
      *((_DWORD *)v9 + 19) = 0;
      v161 = *((_QWORD *)v9 + 8);
    }
    if (v161)
    {
      *((_QWORD *)v9 + 8) = 0;
      *((_DWORD *)v9 + 18) = 0;
      WTF::fastFree(v161, a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

__n128 JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_2::operator()(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[40];
  char v32;
  unsigned int *v33;
  unsigned __int8 v34;
  _BYTE v35[32];
  __int128 v36;
  __int128 v37;
  char v38;
  JSC::Wasm::NameSection *v39;

  *(_DWORD *)v31 = 5;
  v34 = 0;
  *(_WORD *)v35 = 0;
  memset(&v31[8], 0, 32);
  v32 = 0;
  *(_QWORD *)&v35[4] = -1;
  *(_QWORD *)&v35[12] = -1;
  *(_DWORD *)&v35[20] = 0;
  *(_WORD *)&v35[24] = 0;
  LOBYTE(v36) = 0;
  v38 = 0;
  v2 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v2 == *(_DWORD *)(a1 + 24))
  {
    v3 = WTF::Vector<JSC::SamplingProfiler::StackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 16, v2 + 1, (unint64_t)v31);
    v11 = *(_DWORD *)(a1 + 28);
    v12 = *(_QWORD *)(a1 + 16);
    v13 = v12 + 136 * v11;
    v14 = *(_QWORD *)(v3 + 32);
    v15 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v3;
    *(_OWORD *)(v13 + 16) = v15;
    *(_QWORD *)(v13 + 32) = v14;
    *(_BYTE *)(v13 + 40) = 0;
    v16 = (_QWORD *)(v13 + 40);
    *(_BYTE *)(v13 + 56) = 0;
    v17 = (_BYTE *)(v13 + 56);
    if (*(_BYTE *)(v3 + 56))
    {
      *v16 = *(_QWORD *)(v3 + 40);
      v18 = *(_QWORD *)(v3 + 48);
      *(_QWORD *)(v3 + 48) = 0;
      *(_QWORD *)(v12 + 136 * v11 + 48) = v18;
      *v17 = 1;
    }
    v19 = v12 + 136 * v11;
    *(_OWORD *)(v19 + 64) = *(_OWORD *)(v3 + 64);
    result = *(__n128 *)(v3 + 80);
    v21 = *(_OWORD *)(v3 + 96);
    v22 = *(_OWORD *)(v3 + 112);
    *(_BYTE *)(v19 + 128) = *(_BYTE *)(v3 + 128);
    *(_OWORD *)(v19 + 96) = v21;
    *(_OWORD *)(v19 + 112) = v22;
    *(__n128 *)(v19 + 80) = result;
    LODWORD(v19) = v34;
    ++*(_DWORD *)(a1 + 28);
    if ((_DWORD)v19)
    {
      v23 = v33;
      v33 = 0;
      if (v23)
      {
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          atomic_store(1u, v23);
          v39 = (JSC::Wasm::NameSection *)v23;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v39, v4, v5, v6, v7, v8, v9, v10);
        }
      }
    }
  }
  else
  {
    v26 = *(_QWORD *)(a1 + 16) + 136 * v2;
    v27 = *(_OWORD *)v31;
    v28 = *(_OWORD *)&v31[16];
    *(_QWORD *)(v26 + 32) = *(_QWORD *)&v31[32];
    *(_OWORD *)v26 = v27;
    *(_OWORD *)(v26 + 16) = v28;
    *(_BYTE *)(v26 + 40) = 0;
    *(_BYTE *)(v26 + 56) = 0;
    *(_OWORD *)(v26 + 64) = *(_OWORD *)v35;
    result = *(__n128 *)&v35[16];
    v29 = v36;
    v30 = v37;
    *(_BYTE *)(v26 + 128) = v38;
    *(_OWORD *)(v26 + 96) = v29;
    *(_OWORD *)(v26 + 112) = v30;
    *(__n128 *)(v26 + 80) = result;
    ++*(_DWORD *)(a1 + 28);
  }
  return result;
}

_QWORD *JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_0::operator()(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  unsigned int *v55;
  unsigned __int8 v56;
  _BYTE v57[32];
  __int128 v58;
  __int128 v59;
  char v60;
  JSC::Wasm::NameSection *v61;

  v8 = a4;
  v12 = *a1;
  v13 = a1[1];
  v14 = *(_QWORD *)(a2 + 64);
  LODWORD(v51) = 0;
  *((_QWORD *)&v51 + 1) = 0;
  v52 = v14;
  v56 = 0;
  *(_WORD *)v57 = 0;
  v53 = 0;
  v54 = 0;
  *(_QWORD *)&v57[12] = -1;
  *(_QWORD *)&v57[4] = -1;
  *(_DWORD *)&v57[20] = 0;
  *(_WORD *)&v57[24] = 0;
  LOBYTE(v58) = 0;
  v60 = 0;
  v15 = *(unsigned int *)(v13 + 28);
  if ((_DWORD)v15 == *(_DWORD *)(v13 + 24))
  {
    v16 = WTF::Vector<JSC::SamplingProfiler::StackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13 + 16, v15 + 1, (unint64_t)&v51);
    v19 = *(_DWORD *)(v13 + 28);
    v20 = *(_QWORD *)(v13 + 16);
    v21 = v20 + 136 * v19;
    v22 = *(_QWORD *)(v16 + 32);
    v23 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)v21 = *(_OWORD *)v16;
    *(_OWORD *)(v21 + 16) = v23;
    *(_QWORD *)(v21 + 32) = v22;
    *(_BYTE *)(v21 + 40) = 0;
    v24 = (_QWORD *)(v21 + 40);
    *(_BYTE *)(v21 + 56) = 0;
    v25 = (_BYTE *)(v21 + 56);
    if (*(_BYTE *)(v16 + 56))
    {
      *v24 = *(_QWORD *)(v16 + 40);
      v26 = *(_QWORD *)(v16 + 48);
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v20 + 136 * v19 + 48) = v26;
      *v25 = 1;
    }
    v27 = v20 + 136 * v19;
    *(_OWORD *)(v27 + 64) = *(_OWORD *)(v16 + 64);
    v28 = *(_OWORD *)(v16 + 80);
    v29 = *(_OWORD *)(v16 + 96);
    v30 = *(_OWORD *)(v16 + 112);
    *(_BYTE *)(v27 + 128) = *(_BYTE *)(v16 + 128);
    *(_OWORD *)(v27 + 96) = v29;
    *(_OWORD *)(v27 + 112) = v30;
    *(_OWORD *)(v27 + 80) = v28;
    LODWORD(v27) = v56;
    ++*(_DWORD *)(v13 + 28);
    if ((_DWORD)v27)
    {
      v31 = v55;
      v55 = 0;
      if (v31)
      {
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          v61 = (JSC::Wasm::NameSection *)v31;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v61, v17, v18, a4, a5, a6, a7, a8);
        }
      }
    }
  }
  else
  {
    v34 = *(_QWORD *)(v13 + 16) + 136 * v15;
    v35 = v51;
    v36 = v52;
    *(_QWORD *)(v34 + 32) = v53;
    *(_OWORD *)v34 = v35;
    *(_OWORD *)(v34 + 16) = v36;
    *(_BYTE *)(v34 + 40) = 0;
    *(_BYTE *)(v34 + 56) = 0;
    *(_OWORD *)(v34 + 64) = *(_OWORD *)v57;
    v37 = *(_OWORD *)&v57[16];
    v38 = v58;
    v39 = v59;
    *(_BYTE *)(v34 + 128) = v60;
    *(_OWORD *)(v34 + 96) = v38;
    *(_OWORD *)(v34 + 112) = v39;
    *(_OWORD *)(v34 + 80) = v37;
    ++*(_DWORD *)(v13 + 28);
  }
  v61 = *(JSC::Wasm::NameSection **)(a2 + 64);
  result = WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::add(&v51, (uint64_t *)(v12 + 104), (uint64_t *)&v61, a4, a5, a6, a7, a8);
  v41 = a1[1];
  v42 = *(unsigned int *)(v41 + 28);
  if (!(_DWORD)v42)
    goto LABEL_20;
  v43 = v42 - 1;
  v44 = *(_QWORD *)(v41 + 16);
  v45 = v8 >> 2;
  v46 = *(_QWORD *)(a2 + 56);
  v47 = *(unsigned int *)(*(_QWORD *)(v46 + 80) + 12);
  if (v45 < v47)
  {
    if (v45 < v47)
    {
      result = (_QWORD *)JSC::ExpressionInfo::lineColumnForInstPC(*(JSC::ExpressionInfo **)(v46 + 160), v45);
      v48 = *(_QWORD *)(a2 + 64);
      if ((_DWORD)result)
        v49 = 1;
      else
        v49 = *(_DWORD *)(v48 + 60) + 1;
      *(_QWORD *)(v44 + 136 * v43 + 72) = ((_DWORD)result + *(_DWORD *)(v48 + 56) + 1) | ((unint64_t)(v49 + HIDWORD(result)) << 32);
      *(_DWORD *)(v44 + 136 * v43 + 80) = v8;
      goto LABEL_16;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x198BA1578);
  }
LABEL_16:
  v50 = *(_DWORD *)(a2 + 52);
  if (v50)
    *(_DWORD *)(v44 + 136 * v43 + 84) = v50;
  *(_BYTE *)(v44 + 136 * v43 + 88) = a3;
  return result;
}

void JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_4::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  JSC::Wasm::NameSection *v56[3];

  v8 = a1[1];
  v9 = *(unsigned int *)(v8 + 28);
  if (!(_DWORD)v9)
  {
    __break(0xC471u);
    JUMPOUT(0x198BA18D4);
  }
  v11 = *(_QWORD *)(a2 + 8);
  v12 = v9 - 1;
  v13 = *(_QWORD *)(v8 + 16);
  v14 = v13 + 136 * (v9 - 1);
  if ((v11 & 0xFFFE000000000007) == 3)
  {
    if (*(_BYTE *)(a2 + 28))
    {
      if (*(_BYTE *)(a2 + 28) != 1)
        return;
      v15 = *(_QWORD *)a1[2];
      v16 = *(unsigned int *)(v15 + 28);
      if ((_DWORD)v16)
      {
        v17 = v16 - 1;
        v18 = *(_QWORD *)(v15 + 16);
        v19 = v18 + 136 * (v16 - 1);
        *(_DWORD *)v19 = 1;
        v20 = v19 + 40;
        v21 = *(unsigned __int8 *)(v19 + 56);
        if (v21 == *(unsigned __int8 *)(a2 + 48))
        {
          if (v21)
          {
            *(_QWORD *)v20 = *(_QWORD *)(a2 + 32);
            v22 = *(unsigned int **)(a2 + 40);
            if (v22)
            {
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 + 1, v22));
            }
            v24 = *(unsigned int **)(v20 + 8);
            *(_QWORD *)(v20 + 8) = v22;
            if (v24)
            {
              do
              {
                v25 = __ldaxr(v24);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, v24));
              if (!v26)
              {
                atomic_store(1u, v24);
                v56[0] = (JSC::Wasm::NameSection *)v24;
                v27 = a2;
                WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v56, (void *)a2, a3, a4, a5, a6, a7, a8);
                a2 = v27;
              }
            }
          }
        }
        else if (v21)
        {
          v43 = *(unsigned int **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = 0;
          if (v43)
          {
            do
            {
              v44 = __ldaxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
            {
              atomic_store(1u, v43);
              v56[0] = (JSC::Wasm::NameSection *)v43;
              v54 = a2;
              WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v56, (void *)a2, a3, a4, a5, a6, a7, a8);
              a2 = v54;
            }
          }
          *(_BYTE *)(v20 + 16) = 0;
        }
        else
        {
          *(_QWORD *)v20 = *(_QWORD *)(a2 + 32);
          v47 = *(unsigned int **)(a2 + 40);
          if (v47)
          {
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 + 1, v47));
          }
          *(_QWORD *)(v20 + 8) = v47;
          *(_BYTE *)(v20 + 16) = 1;
        }
        *(_WORD *)(v18 + 136 * v17 + 64) = *(_WORD *)(a2 + 56);
        return;
      }
      __break(0xC471u);
LABEL_58:
      JUMPOUT(0x198BA18CCLL);
    }
    goto LABEL_21;
  }
  v28 = *(_QWORD *)(v14 + 16);
  if ((v11 & 0xFFFE000000000002) != 0
    || (v29 = *a1,
        (JSC::HeapUtil::isPointerGCObjectJSCell(*(uint64_t **)(*(_QWORD *)(*a1 + 8) + 368), *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 456), *(_QWORD *)a1[3], (char *)v11, a5, a6, a7, a8) & 1) == 0))
  {
    if (v28)
      return;
    goto LABEL_21;
  }
  v35 = *(unsigned __int8 *)(v11 + 5);
  if (v35 == 26)
  {
    *(_QWORD *)(v13 + 136 * v12 + 24) = v11;
    v55 = v11;
    WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::add(v56, (uint64_t *)(v29 + 104), &v55, v30, v31, v32, v33, v34);
    if (v28)
      return;
    v40 = *(_QWORD *)(v11 + 24);
    if ((v40 & 1) != 0)
      v41 = *(char **)((v40 & 0xFFFFFFFFFFFFFFFELL) + 48);
    else
      v41 = *(char **)(v11 + 24);
    if (v41)
    {
      if ((JSC::HeapUtil::isPointerGCObjectJSCell(*(uint64_t **)(*(_QWORD *)(v29 + 8) + 368), *(_QWORD *)(*(_QWORD *)(v29 + 8) + 456), *(_QWORD *)a1[3], v41, v36, v37, v38, v39) & 1) != 0)
      {
        *(_DWORD *)v14 = 0;
        *(_QWORD *)(v14 + 16) = v41;
        v55 = (uint64_t)v41;
        WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::add(v56, (uint64_t *)(v29 + 104), &v55, v49, v50, v51, v52, v53);
        return;
      }
      __break(0xC471u);
      goto LABEL_58;
    }
    if (*(_BYTE *)(v11 + 5) == 26)
    {
      if ((v40 & 1) == 0)
      {
LABEL_38:
        if (*(_BYTE *)(v40 + 5) == 8)
        {
          v42 = 2;
          goto LABEL_22;
        }
LABEL_21:
        v42 = 5;
LABEL_22:
        *(_DWORD *)v14 = v42;
        return;
      }
LABEL_37:
      v40 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFFFELL) + 48);
      goto LABEL_38;
    }
    goto LABEL_52;
  }
  if (v35 >= 0x17 && v11 != 0)
  {
    *(_QWORD *)(v13 + 136 * v12 + 24) = v11;
    v55 = v11;
    WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::add(v56, (uint64_t *)(v29 + 104), &v55, v30, v31, v32, v33, v34);
  }
  if (!v28)
  {
    if (*(_BYTE *)(v11 + 5) == 26)
    {
      v40 = *(_QWORD *)(v11 + 24);
      if ((v40 & 1) == 0)
        goto LABEL_38;
      goto LABEL_37;
    }
LABEL_52:
    (*(void (**)(JSC::Wasm::NameSection **__return_ptr, uint64_t))(16
                                                                           * *(unsigned int *)(16
                                                                                             * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                             + 0x4C)
                                                                           + 0x38))(v56, v11);
    if (LOBYTE(v56[0]) == 1)
      v42 = 2;
    else
      v42 = 5;
    goto LABEL_22;
  }
}

void JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_5::operator()(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  __int128 v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v8 = a3;
  v49 = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  v12 = *(unsigned int *)(a1[1] + 28);
  v13 = (uint64_t *)a1[2];
  if ((a3 & 1) != 0)
  {
    v39 = *(_QWORD *)(a3 & 0xFFFFFFFF8);
    if ((a3 & 2) != 0
      || ((v40 = *(unsigned int *)((a3 & 0xFFFFFFFF8) + 8), (_DWORD)v40 != 0x3FFFFFFF)
        ? (v41 = (_DWORD)v40 == -1)
        : (v41 = 1),
          v41))
    {
      v42 = 2;
    }
    else if (v40 >> 28)
    {
      v43 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v43 = v39;
      *(_DWORD *)(v43 + 8) = v40;
      v42 = 1;
      v39 = v43;
    }
    else
    {
      v42 = *(_QWORD *)(a3 & 0xFFFFFFFF8);
      v39 = v40 << 36;
    }
    v8 = v39 | v42;
  }
  v14 = 2;
  while (1)
  {
    if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
      WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
    v15 = (uint64_t *)(v8 & 0xFFFFFFFF8);
    v14 = v8;
    v16 = v8 & 0xFFFFFFFF8;
    if ((v8 & 1) != 0)
    {
      v16 = *v15;
      if ((v8 & 2) != 0
        || ((v24 = *(_DWORD *)((v8 & 0xFFFFFFFF8) + 8), v24 != 0x3FFFFFFF) ? (v25 = v24 == -1) : (v25 = 1), v25))
      {
        v26 = 2;
        v27 = *v15;
      }
      else if (v24 >> 28)
      {
        v28 = *v15;
        v27 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v27 = v28;
        *(_DWORD *)(v27 + 8) = v24;
        v16 = *v15;
        v26 = 1;
      }
      else
      {
        v27 = 0;
        v26 = *v15;
      }
      v14 = v27 | v26;
    }
    v17 = (uint64_t)a2;
    if (v16)
      v17 = *(_QWORD *)(v16 + 8);
    v18 = a2[15];
    if (!v18)
      break;
    v19 = *(_BYTE *)(v18 + 12);
    if ((v8 & 2) == 0)
      goto LABEL_9;
LABEL_18:
    JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_0::operator()(v13, v17, v19, 0xFFFFFFFFLL, a5, a6, a7, a8);
    if ((v8 & 1) != 0)
      goto LABEL_30;
LABEL_11:
    v20 = v8 & 0xFFFFFFFF8;
    if (!v15)
      goto LABEL_43;
LABEL_12:
    v8 = *(_QWORD *)(v20 + 16);
    if ((v8 & 1) != 0)
    {
      v21 = *(_QWORD *)(v8 & 0xFFFFFFFF8);
      if ((v8 & 2) != 0
        || (v22 = *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), (_DWORD)v22 == 0x3FFFFFFF)
        || (_DWORD)v22 == -1)
      {
        v23 = 2;
      }
      else if (v22 >> 28)
      {
        v29 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v29 = v21;
        *(_DWORD *)(v29 + 8) = v22;
        v23 = 1;
        v21 = v29;
      }
      else
      {
        v23 = v21;
        v21 = v22 << 36;
      }
      v8 = v21 | v23;
    }
  }
  v19 = 0;
  if ((v8 & 2) != 0)
    goto LABEL_18;
LABEL_9:
  if ((v8 & 1) == 0)
  {
    JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_0::operator()(v13, v17, v19, v8 >> 36, a5, a6, a7, a8);
    goto LABEL_11;
  }
  JSC::SamplingProfiler::processUnverifiedStackTraces(void)::$_0::operator()(v13, v17, v19, *(unsigned int *)((v8 & 0xFFFFFFFF8) + 8), a5, a6, a7, a8);
LABEL_30:
  v20 = *v15;
  if (*v15)
  {
    if (v15)
      WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
    goto LABEL_12;
  }
  if (v15)
    WTF::fastFree((unint64_t)v15, a2, a3, a4, a5, a6, a7, a8);
LABEL_43:
  if (byte_1ECF4C5E8)
  {
    if ((v14 & 2) != 0)
      goto LABEL_74;
    v30 = (_QWORD *)(v14 & 0xFFFFFFFF8);
    if ((v14 & 1) == 0)
    {
      if (!v30)
        goto LABEL_47;
LABEL_68:
      __break(0xC471u);
      JUMPOUT(0x198BA1C78);
    }
    if (*v30)
      goto LABEL_68;
LABEL_47:
    v31 = a1[1];
    v32 = *(_DWORD *)(v31 + 28);
    if (!v32)
    {
LABEL_74:
      __break(0xC471u);
      JUMPOUT(0x198BA1C50);
    }
    v33 = *(_QWORD *)(v31 + 16) + 136 * v32;
    v45 = *(_OWORD *)(v33 - 64);
    v46 = *(_DWORD *)(v33 - 48);
    v44 = a2;
    WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::add(&v47, (uint64_t *)(v11 + 104), (uint64_t *)&v44, a4, a5, a6, a7, a8);
    v34 = a1[1];
    v35 = *(unsigned int *)(v34 + 28);
    if (v35 - 1 > v12)
    {
      v36 = 136 * v12;
      do
      {
        v47 = v45;
        LODWORD(v48) = v46;
        if (v12 >= v35)
        {
          __break(0xC471u);
          JUMPOUT(0x198BA1CB8);
        }
        v37 = *(_QWORD *)(v34 + 16) + v36;
        v38 = (_OWORD *)(v37 + 96);
        if (*(_BYTE *)(v37 + 128))
        {
          *v38 = v45;
          *(_WORD *)(v37 + 112) = v46;
          *(_QWORD *)(v37 + 120) = a2;
        }
        else
        {
          *v38 = v47;
          *(_QWORD *)(v37 + 112) = v48;
          *(_QWORD *)(v37 + 120) = a2;
          *(_BYTE *)(v37 + 128) = 1;
        }
        ++v12;
        v34 = a1[1];
        v35 = *(unsigned int *)(v34 + 28);
        v36 += 136;
      }
      while (v12 < v35 - 1);
    }
  }
  if ((v14 & 1) != 0 && (v14 & 0xFFFFFFFF8) != 0)
    WTF::fastFree(v14 & 0xFFFFFFFF8, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::SamplingProfiler::shutdown(JSC::SamplingProfiler *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  int v11;

  v9 = (unsigned __int8 *)this + 4;
  if (__ldaxr((unsigned __int8 *)this + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_5:
  *((_BYTE *)this + 6) = 1;
  v11 = __ldxr(v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v9))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::SamplingProfiler::start(JSC::SamplingProfiler *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v2 = (unsigned __int8 *)this + 4;
  if (__ldaxr((unsigned __int8 *)this + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_5:
  *((_BYTE *)this + 5) = 0;
  JSC::SamplingProfiler::createThreadIfNecessary(this);
  v10 = __ldxr(v2);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v2))
LABEL_9:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v2, 0, v4, v5, v6, v7, v8, v9);
}

void JSC::SamplingProfiler::noticeCurrentThreadAsJSCExecutionThreadWithLock(JSC::SamplingProfiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count **v27;

  v9 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9)
    v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v9;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v14 = *(unsigned int **)(v11 + 96);
      *(_QWORD *)(v11 + 96) = 0;
      if (v14)
      {
        v15 = v14 + 2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v14 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v11 + 64), a2, a3, a4, a5, a6, a7, a8);
      v25 = *(_QWORD *)(v11 + 32);
      if (v25)
      {
        v26 = *(unsigned int *)(v25 - 4);
        if ((_DWORD)v26)
        {
          v27 = (std::__shared_weak_count **)(v25 + 16);
          do
          {
            if (*(v27 - 2) != (std::__shared_weak_count *)-1)
            {
              if (*v27)
                std::__shared_weak_count::__release_weak(*v27);
            }
            v27 += 3;
            --v26;
          }
          while (v26);
        }
        WTF::fastFree(v25 - 16, v18, v19, v20, v21, v22, v23, v24);
      }
      WTF::fastFree(v11, v18, v19, v20, v21, v22, v23, v24);
    }
  }
}

void JSC::SamplingProfiler::noticeCurrentThreadAsJSCExecutionThread(JSC::SamplingProfiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count **v30;

  v9 = (unsigned __int8 *)this + 4;
  if (__ldaxr((unsigned __int8 *)this + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_5:
  v11 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v11;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 96);
      *(_QWORD *)(v13 + 96) = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v13 + 64), a2, a3, a4, a5, a6, a7, a8);
      v28 = *(_QWORD *)(v13 + 32);
      if (v28)
      {
        v29 = *(unsigned int *)(v28 - 4);
        if ((_DWORD)v29)
        {
          v30 = (std::__shared_weak_count **)(v28 + 16);
          do
          {
            if (*(v30 - 2) != (std::__shared_weak_count *)-1)
            {
              if (*v30)
                std::__shared_weak_count::__release_weak(*v30);
            }
            v30 += 3;
            --v29;
          }
          while (v29);
        }
        WTF::fastFree(v28 - 16, v21, v22, v23, v24, v25, v26, v27);
      }
      WTF::fastFree(v13, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  v16 = __ldxr(v9);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v9))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::SamplingProfiler::noticeJSLockAcquisition(JSC::SamplingProfiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count **v30;

  v9 = (unsigned __int8 *)this + 4;
  if (__ldaxr((unsigned __int8 *)this + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_5:
  v11 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v11;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v17 = *(unsigned int **)(v13 + 96);
      *(_QWORD *)(v13 + 96) = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v13 + 64), a2, a3, a4, a5, a6, a7, a8);
      v28 = *(_QWORD *)(v13 + 32);
      if (v28)
      {
        v29 = *(unsigned int *)(v28 - 4);
        if ((_DWORD)v29)
        {
          v30 = (std::__shared_weak_count **)(v28 + 16);
          do
          {
            if (*(v30 - 2) != (std::__shared_weak_count *)-1)
            {
              if (*v30)
                std::__shared_weak_count::__release_weak(*v30);
            }
            v30 += 3;
            --v29;
          }
          while (v29);
        }
        WTF::fastFree(v28 - 16, v21, v22, v23, v24, v25, v26, v27);
      }
      WTF::fastFree(v13, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  v16 = __ldxr(v9);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v9))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::SamplingProfiler::noticeVMEntry(JSC::SamplingProfiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count **v36;

  v9 = (unsigned __int8 *)this + 4;
  if (__ldaxr((unsigned __int8 *)this + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_5:
  v11 = *(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v11)
    v11 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v11;
  if (v13)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)v13);
      v23 = *(unsigned int **)(v13 + 96);
      *(_QWORD *)(v13 + 96) = 0;
      if (v23)
      {
        v24 = v23 + 2;
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v23 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
        }
      }
      WTF::AtomStringTable::~AtomStringTable((WTF::AtomStringTable *)(v13 + 64), a2, a3, a4, a5, a6, a7, a8);
      v34 = *(_QWORD *)(v13 + 32);
      if (v34)
      {
        v35 = *(unsigned int *)(v34 - 4);
        if ((_DWORD)v35)
        {
          v36 = (std::__shared_weak_count **)(v34 + 16);
          do
          {
            if (*(v36 - 2) != (std::__shared_weak_count *)-1)
            {
              if (*v36)
                std::__shared_weak_count::__release_weak(*v36);
            }
            v36 += 3;
            --v35;
          }
          while (v35);
        }
        WTF::fastFree(v34 - 16, v27, v28, v29, v30, v31, v32, v33);
      }
      WTF::fastFree(v13, v27, v28, v29, v30, v31, v32, v33);
    }
  }
  JSC::SamplingProfiler::createThreadIfNecessary(this);
  v22 = __ldxr(v9);
  if (v22 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v9))
LABEL_15:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v9, 0, v16, v17, v18, v19, v20, v21);
}

void JSC::SamplingProfiler::StackFrame::nameFromCallee(JSC::VM &)::$_0::operator()(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int *v52;
  uint64_t v53;
  int *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  _BYTE *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  unint64_t v76;
  int v77;
  unsigned int v78;
  int v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  size_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  int v104;
  int v105;
  unsigned __int8 *v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int16 *v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  unsigned __int8 *v118;
  uint64_t v119;
  unsigned int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  unsigned __int8 *v132;
  uint64_t v133;
  unsigned int v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  char v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  char v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  char v148;
  int v149;
  unint64_t v150;
  char v151;
  char *v152;
  int v153;
  JSC::VMTraps *v154;
  JSC::JSRopeString *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  char v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE __dst[8];
  char v168;
  char __s[3];
  _BYTE v170[39];

  *(_QWORD *)&v170[23] = *MEMORY[0x1E0C80C00];
  v11 = *a2;
  v12 = a2[1];
  v13 = *(_QWORD *)(*a2 + 24);
  a9.i64[0] = 0xFFFFFFFF00000000;
  v157 = 0xFFFFFFFF00000000;
  v159 = 0;
  v160 = 0;
  v158 = v13;
  v161 = 196608;
  v162 = 0;
  v165 = 0;
  v166 = 0;
  v163 = v12;
  ++*(_DWORD *)(v12 + 4);
  v164 = 1;
  v14 = *(_QWORD *)(v11 + 24);
  v15 = *(_QWORD *)a2[2];
  v16 = (_BYTE *)(v14 + 6);
  v17 = a3 >> 4;
  v18 = v14;
  if ((*(_BYTE *)(v14 + 6) & 8) == 0)
  {
    v19 = *(JSC::VM **)(v15 + 56);
    v20 = *(_QWORD *)(v11 + 24);
    do
    {
      v21 = *(_DWORD *)v20 & 0xFFFFFFFE;
      v22 = 16 * v21;
      if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * v21 + 0x20)) != 0)
        goto LABEL_30;
      v23 = *(_QWORD *)(16 * v21 + 0x58);
      if (!v23)
      {
        v24 = *(_QWORD *)(16 * v21 + 0x40);
        if (!v24 || *(_BYTE *)(v24 + 5) != 1 && *(_DWORD *)(v24 + 80) < 2u)
          goto LABEL_30;
        JSC::Structure::materializePropertyTable((JSC::Structure *)v22, v19, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
        if (!v23)
          goto LABEL_30;
      }
      if (!*(_DWORD *)(v23 + 24))
        goto LABEL_30;
      v25 = *(_QWORD *)(v23 + 16);
      v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
      v27 = *(unsigned int *)(v23 + 8);
      v28 = *(_DWORD *)(a3 + 16);
      if ((v25 & 1) != 0)
      {
        if ((v28 & 0x20) != 0)
          v28 = *(_DWORD *)(a3 + 32);
        v29 = *(_DWORD *)(v23 + 12);
        v30 = (v28 >> 8) & *(_QWORD *)&v29;
        v31 = *(unsigned __int8 *)(v26 + v30);
        if (!*(_BYTE *)(v26 + v30))
          goto LABEL_30;
        v32 = v26 + v27;
        v33 = 1;
        while (1)
        {
          v34 = *(_QWORD *)(v32 + 8 * (v31 - 1));
          if ((v34 & 0xFFFFFFFFFFFFLL) == a3)
            break;
          v30 = ((_DWORD)v30 + v33) & v29;
          v31 = *(unsigned __int8 *)(v26 + v30);
          ++v33;
          if (!*(_BYTE *)(v26 + v30))
            goto LABEL_30;
        }
        a6 = (v34 >> 16) & 0xFF00000000 | HIBYTE(v34);
      }
      else
      {
        if ((v28 & 0x20) != 0)
          v28 = *(_DWORD *)(a3 + 32);
        v35 = *(_DWORD *)(v23 + 12);
        v36 = v35 & (v28 >> 8);
        v37 = *(_DWORD *)(v26 + 4 * v36);
        if (!v37)
          goto LABEL_30;
        v38 = v26 + 4 * v27;
        v39 = 1;
        while (1)
        {
          v40 = (v37 - 1);
          if (*(_QWORD *)(v38 + 16 * v40) == a3)
            break;
          v36 = (v36 + v39) & v35;
          v37 = *(_DWORD *)(v26 + 4 * v36);
          ++v39;
          if (!v37)
            goto LABEL_30;
        }
        a6 = *(unsigned int *)(v38 + 16 * v40 + 8) | ((unint64_t)*(unsigned __int8 *)(v38 + 16 * v40 + 12) << 32);
      }
      if ((_DWORD)a6 != -1)
      {
        a5 = HIDWORD(a6);
        if ((int)a6 <= 63)
        {
          v49 = v20 + 16;
          v50 = a6 << 32;
        }
        else
        {
          v49 = *(_QWORD *)(v20 + 8) - 8;
          v50 = 0x3F00000000 - (a6 << 32);
        }
        a4 = *(_QWORD *)(v49 + (v50 >> 29));
        if ((a4 & 0xFFFE000000000002) == 0)
        {
          v51 = *(unsigned __int8 *)(a4 + 5);
          if (v51 != 5)
          {
            if (v51 != 6)
              goto LABEL_58;
            v55 = *(_DWORD *)(v22 + 16) & 3;
            v56 = *(_QWORD *)(a4 + 16);
            if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a4 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
            {
              v58 = *(_QWORD *)(a4 + 24);
              v57 = *(_QWORD *)(a4 + 32);
              v155 = *(JSC::JSRopeString **)(a4 + 8);
              v156 = v56;
              LODWORD(v157) = HIDWORD(a6);
              v159 = v20;
              goto LABEL_71;
            }
            v155 = *(JSC::JSRopeString **)(a4 + 8);
            v156 = v56;
            LODWORD(v157) = HIDWORD(a6);
            v159 = v20;
LABEL_209:
            BYTE1(v161) = 3;
            if (v55 != 2)
              LOBYTE(v161) = 1;
            goto LABEL_62;
          }
          v52 = (unsigned int *)v20;
          v53 = (uint64_t)v19;
LABEL_61:
          JSC::JSObject::fillGetterPropertySlot(v52, v53, (uint64_t)&v155, a4, a5, a6);
          goto LABEL_62;
        }
LABEL_58:
        v155 = (JSC::JSRopeString *)a4;
        v159 = v20;
LABEL_59:
        v157 = __PAIR64__(a6, a5);
        LOWORD(v161) = 257;
        goto LABEL_62;
      }
LABEL_30:
      if ((*v16 & 0x20) != 0
        && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v20, v19, a3, (uint64_t)&v155) & 1) != 0)
      {
        goto LABEL_62;
      }
      v18 = *(_QWORD *)(v22 + 48);
      if (!v18)
        v18 = *(_QWORD *)(v20 + 16);
      if ((v18 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v18 + 5) < 0x17u)
      {
        if (!a3)
          goto LABEL_335;
        v41 = *(_DWORD *)(a3 + 16);
        if ((v41 & 0x20) != 0)
          goto LABEL_335;
        v42 = *(_BYTE **)(a3 + 8);
        v43 = *(unsigned int *)(a3 + 4);
        if ((v41 & 4) != 0)
        {
          if (!(_DWORD)v43)
            goto LABEL_335;
          v44 = *v42 - 48;
          if (v44 > 9 || v43 >= 2 && *v42 == 48)
            goto LABEL_335;
          v118 = v42 + 1;
          v119 = v43 - 1;
          while (v119)
          {
            if (v44 <= 0x19999999)
            {
              v120 = *v118 - 48;
              if (v120 <= 9)
              {
                v48 = __CFADD__(v120, 10 * v44);
                v44 = v120 + 10 * v44;
                ++v118;
                --v119;
                if (!v48)
                  continue;
              }
            }
            goto LABEL_335;
          }
        }
        else
        {
          if (!(_DWORD)v43)
            goto LABEL_335;
          v44 = *(unsigned __int16 *)v42 - 48;
          if (v44 > 9 || *(_WORD *)v42 == 48 && v43 > 1)
            goto LABEL_335;
          v45 = (unsigned __int16 *)(v42 + 2);
          v46 = v43 - 1;
          while (v46)
          {
            if (v44 <= 0x19999999)
            {
              v47 = *v45 - 48;
              if (v47 <= 9)
              {
                v48 = __CFADD__(v47, 10 * v44);
                v44 = v47 + 10 * v44;
                ++v45;
                --v46;
                if (!v48)
                  continue;
              }
            }
            goto LABEL_335;
          }
        }
        if (v44 == -1)
        {
LABEL_335:
          *a1 = 0;
          goto LABEL_336;
        }
        v121 = v44;
        v122 = *(_QWORD *)(v15 + 56);
        while (2)
        {
          v123 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
          v124 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, JSC::JSRopeString **))(16 * *(unsigned int *)(v123 + 0x4C) + 0x70))(v14, v15, v121, &v155);
          if (*(_DWORD *)(v122 + 80))
          {
            v127 = *(_DWORD *)(v122 + 80);
            if ((v127 & 0x27) != 0 && (v127 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v122 + 64), 7u, a3, a4, a5, a6, a7, a8);
            if (*(_QWORD *)(v122 + 16))
              goto LABEL_335;
          }
          if ((v124 & 1) != 0)
            goto LABEL_62;
          if (BYTE2(v161) == 3)
          {
            if (v162)
              goto LABEL_335;
            v125 = *(unsigned __int8 *)(v14 + 5);
            if (v125 != 61)
              goto LABEL_244;
          }
          else
          {
            v125 = *(unsigned __int8 *)(v14 + 5);
            if (v125 == 61)
            {
              if (BYTE2(v161) == 1)
                goto LABEL_335;
            }
            else
            {
LABEL_244:
              if ((v125 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v14 + 40) & 7u) > 2)
                {
                  __dst[0] = 0;
                  v168 = 0;
                  v130 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v14, (uint64_t)__dst, a3, a4, a5, a6, a7, a8);
                  v129 = v131 ? v130 : 0;
                }
                else
                {
                  v129 = *(_QWORD *)(v14 + 24);
                }
                if (v129 <= v121)
                  goto LABEL_335;
              }
            }
          }
          if ((*(_WORD *)(v123 + 12) & 0x800) == 0 || BYTE2(v161) == 3)
          {
            v126 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
            if (!v126)
              v126 = *(_QWORD *)(v14 + 16);
          }
          else
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v126 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0xB0))(v14, v15);
            }
            else
            {
              v126 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
              if (!v126)
                v126 = *(_QWORD *)(v14 + 16);
            }
            if (*(_DWORD *)(v122 + 80))
            {
              v128 = *(_DWORD *)(v122 + 80);
              if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v122 + 64), 7u, a3, a4, a5, a6, a7, a8);
              if (*(_QWORD *)(v122 + 16))
                goto LABEL_335;
            }
          }
          if ((v126 & 0xFFFE000000000002) != 0)
            goto LABEL_335;
          v14 = v126;
          if (*(unsigned __int8 *)(v126 + 5) <= 0x16u)
            goto LABEL_335;
          continue;
        }
      }
      v16 = (_BYTE *)(v18 + 6);
      v20 = v18;
    }
    while ((*(_BYTE *)(v18 + 6) & 8) == 0);
  }
  if (a3)
  {
    v59 = *(_DWORD *)(a3 + 16);
    if ((v59 & 0x20) == 0)
    {
      v60 = *(_BYTE **)(a3 + 8);
      v61 = *(unsigned int *)(a3 + 4);
      if ((v59 & 4) != 0)
      {
        if ((_DWORD)v61)
        {
          v62 = *v60 - 48;
          if (v62 <= 9 && (v61 < 2 || *v60 != 48))
          {
            v132 = v60 + 1;
            v133 = v61 - 1;
            while (v133)
            {
              if (v62 <= 0x19999999)
              {
                v134 = *v132 - 48;
                if (v134 <= 9)
                {
                  v48 = __CFADD__(v134, 10 * v62);
                  v62 = v134 + 10 * v62;
                  ++v132;
                  --v133;
                  if (!v48)
                    continue;
                }
              }
              goto LABEL_79;
            }
LABEL_290:
            if (v62 != -1)
            {
              v135 = v62;
              v136 = *(_QWORD *)(v15 + 56);
              while (1)
              {
                v137 = 16 * (*(_DWORD *)v14 & 0xFFFFFFFE);
                v138 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, JSC::JSRopeString **))(16 * *(unsigned int *)(v137 + 0x4C) + 0x70))(v14, v15, v135, &v155);
                v139 = v138;
                if (*(_DWORD *)(v136 + 80))
                {
                  v142 = *(_DWORD *)(v136 + 80);
                  if ((v142 & 0x27) != 0 && (v142 & 0x20) == 0)
                    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v136 + 64), 7u, a3, a4, a5, a6, a7, a8);
                  v143 = *(_QWORD *)(v136 + 16);
                  if (v143)
                    v144 = 1;
                  else
                    v144 = v139;
                  if ((v144 & 1) != 0)
                  {
                    if (!v143)
                      goto LABEL_62;
                    goto LABEL_335;
                  }
                }
                else if ((v138 & 1) != 0)
                {
                  goto LABEL_62;
                }
                if (BYTE2(v161) == 3)
                {
                  if (v162)
                    goto LABEL_335;
                  v140 = *(unsigned __int8 *)(v14 + 5);
                  if (v140 == 61)
                    goto LABEL_297;
                }
                else
                {
                  v140 = *(unsigned __int8 *)(v14 + 5);
                  if (v140 == 61)
                  {
                    if (BYTE2(v161) == 1)
                      goto LABEL_335;
                    goto LABEL_297;
                  }
                }
                if ((v140 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v14 + 40) & 7u) > 2)
                  {
                    __dst[0] = 0;
                    v168 = 0;
                    v147 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v14, (uint64_t)__dst, a3, a4, a5, a6, a7, a8);
                    v146 = v148 ? v147 : 0;
                  }
                  else
                  {
                    v146 = *(_QWORD *)(v14 + 24);
                  }
                  if (v146 <= v135)
                    goto LABEL_335;
                }
LABEL_297:
                if ((*(_WORD *)(v137 + 12) & 0x800) == 0 || BYTE2(v161) == 3)
                {
                  v141 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
                  if (!v141)
                    v141 = *(_QWORD *)(v14 + 16);
                }
                else
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v141 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0xB0))(v14, v15);
                  }
                  else
                  {
                    v141 = *(_QWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x30);
                    if (!v141)
                      v141 = *(_QWORD *)(v14 + 16);
                  }
                  if (*(_DWORD *)(v136 + 80))
                  {
                    v145 = *(_DWORD *)(v136 + 80);
                    if ((v145 & 0x27) != 0 && (v145 & 0x20) == 0)
                      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v136 + 64), 7u, a3, a4, a5, a6, a7, a8);
                    if (*(_QWORD *)(v136 + 16))
                      goto LABEL_335;
                  }
                }
                if ((v141 & 0xFFFE000000000002) == 0)
                {
                  v14 = v141;
                  if (*(unsigned __int8 *)(v141 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_335;
              }
            }
          }
        }
      }
      else if ((_DWORD)v61)
      {
        v62 = *(unsigned __int16 *)v60 - 48;
        if (v62 <= 9 && (*(_WORD *)v60 != 48 || v61 <= 1))
        {
          v113 = (unsigned __int16 *)(v60 + 2);
          v114 = v61 - 1;
          while (v114)
          {
            if (v62 <= 0x19999999)
            {
              v115 = *v113 - 48;
              if (v115 <= 9)
              {
                v48 = __CFADD__(v115, 10 * v62);
                v62 = v115 + 10 * v62;
                ++v113;
                --v114;
                if (!v48)
                  continue;
              }
            }
            goto LABEL_79;
          }
          goto LABEL_290;
        }
      }
    }
  }
LABEL_79:
  v63 = *(_QWORD *)(v15 + 56);
  v154 = (JSC::VMTraps *)(v63 + 64);
  while (1)
  {
    v64 = 16 * (*(_DWORD *)v18 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v18 + 6) & 8) == 0)
      break;
    v151 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, JSC::JSRopeString **))(16
                                                                                               * *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C)
                                                                                               + 0x68))(v18, v15, a3, &v155);
    if (*(_DWORD *)(v63 + 80))
    {
      v110 = *(_DWORD *)(v63 + 80);
      if ((v110 & 0x27) != 0 && (v110 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v154, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v63 + 16))
        goto LABEL_335;
    }
    if ((v151 & 1) != 0)
      goto LABEL_62;
    if (BYTE2(v161) == 3)
    {
      if (v162)
        goto LABEL_335;
      v87 = *(unsigned __int8 *)(v18 + 5);
      if (v87 == 61)
        goto LABEL_109;
    }
    else
    {
      v87 = *(unsigned __int8 *)(v18 + 5);
      if (v87 == 61)
      {
        if (BYTE2(v161) == 1)
          goto LABEL_335;
        goto LABEL_109;
      }
    }
    if (!a3)
      goto LABEL_109;
    if ((v87 - 50) < 0xFFFFFFF5)
      goto LABEL_109;
    v88 = *(_DWORD *)(a3 + 16);
    if ((v88 & 0x20) != 0)
      goto LABEL_109;
    v89 = *(unsigned int *)(a3 + 4);
    if (!(_DWORD)v89)
      goto LABEL_109;
    v90 = *(unsigned __int8 **)(a3 + 8);
    if ((v88 & 4) != 0)
    {
      v91 = *v90;
      if ((_DWORD)v89 == 1)
      {
LABEL_136:
        if ((v91 - 48) < 0xA)
          goto LABEL_335;
        goto LABEL_109;
      }
      if (v91 == 45)
      {
        v91 = v90[1];
        goto LABEL_140;
      }
      if ((v91 - 48) < 0xA)
        goto LABEL_151;
      if ((_DWORD)v89 == 8)
        goto LABEL_150;
    }
    else
    {
      v91 = *(unsigned __int16 *)v90;
      if ((_DWORD)v89 == 1)
        goto LABEL_136;
      if (v91 == 45)
      {
        v91 = *((unsigned __int16 *)v90 + 1);
LABEL_140:
        if ((v91 - 48) < 0xA)
        {
          if ((_DWORD)v89 == 2)
            goto LABEL_335;
          goto LABEL_151;
        }
        if ((_DWORD)v89 != 9)
          goto LABEL_109;
LABEL_150:
        if (v91 != 73)
          goto LABEL_109;
        goto LABEL_151;
      }
      if ((v91 - 48) < 0xA || (_DWORD)v89 == 8 && v91 == 73)
        goto LABEL_151;
    }
    if ((_DWORD)v89 != 3 || v91 != 78)
      goto LABEL_109;
LABEL_151:
    v150 = v150 & 0xFFFFFF0000000000 | v89 | ((unint64_t)((v88 >> 2) & 1) << 32);
    JSC::jsToNumber(v90, v150);
    v93 = (v92 >> 52) & 0x7FF;
    if ((_DWORD)v93 == 2047)
    {
      if ((v92 & 0xFFFFFFFFFFFFFLL) != 0)
      {
        qmemcpy(__s, "NaN", sizeof(__s));
        v94 = v170;
      }
      else
      {
        if ((v92 & 0x8000000000000000) != 0)
        {
          __s[0] = 45;
          v99 = &__s[1];
        }
        else
        {
          v99 = __s;
        }
        *(_QWORD *)v99 = 0x7974696E69666E49;
        v94 = v99 + 8;
      }
      goto LABEL_165;
    }
    v95 = v92 & 0x7FFFFFFFFFFFFFFFLL;
    if ((v92 & 0x8000000000000000) != 0 && v95)
    {
      __s[0] = 45;
      v152 = &__s[1];
    }
    else
    {
      if (!v95)
      {
        __s[0] = 48;
        v94 = &__s[1];
        goto LABEL_165;
      }
      v152 = __s;
    }
    v96 = WTF::dragonbox::detail::to_decimal_impl<double,WTF::dragonbox::default_float_traits<double>,WTF::dragonbox::detail::policy_impl::policy_holder<WTF::dragonbox::detail::policy_impl::sign::ignore,WTF::dragonbox::detail::policy_impl::trailing_zero::ignore,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even,WTF::dragonbox::detail::policy_impl::binary_to_decimal_rounding::to_even,WTF::dragonbox::detail::policy_impl::cache::full>,WTF::dragonbox::detail::policy_impl::decimal_to_binary_rounding::nearest_to_even>(v92 & 0x800FFFFFFFFFFFFFLL, v93);
    v94 = WTF::dragonbox::detail::to_shortest(v96, v97, (uint64_t)v152, v98);
LABEL_165:
    *v94 = 0;
    v153 = strlen(__s);
    memcpy(__dst, __s, v153);
    __dst[v153] = 0;
    v100 = *(unsigned int *)(a3 + 4);
    v101 = *(unsigned __int8 **)(a3 + 8);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v100)
      {
        v106 = __dst;
        v107 = *(unsigned int *)(a3 + 4);
        do
        {
          v109 = *v106++;
          v108 = v109;
          if (!v109 || *v101 != v108)
            goto LABEL_109;
          ++v101;
        }
        while (--v107);
      }
    }
    else if ((_DWORD)v100)
    {
      v102 = __dst;
      v103 = *(unsigned int *)(a3 + 4);
      do
      {
        v105 = *v102++;
        v104 = v105;
        if (!v105 || *(unsigned __int16 *)v101 != v104)
          goto LABEL_109;
        v101 += 2;
      }
      while (--v103);
    }
    if (!__dst[v100])
      goto LABEL_335;
LABEL_109:
    if ((*(_WORD *)(v64 + 12) & 0x800) == 0)
    {
      v83 = *(_DWORD *)v18;
LABEL_111:
      v84 = *(_QWORD *)(16 * (v83 & 0xFFFFFFFE) + 0x30);
      if (!v84)
        v84 = *(_QWORD *)(v18 + 16);
      goto LABEL_113;
    }
    v83 = *(_DWORD *)v18;
    if (BYTE2(v161) == 3)
      goto LABEL_111;
    v85 = 16 * (v83 & 0xFFFFFFFE);
    if ((*(_WORD *)(v85 + 12) & 0x800) != 0)
    {
      v84 = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v85 + 76) + 0xB0))(v18, v15);
    }
    else
    {
      v84 = *(_QWORD *)(v85 + 48);
      if (!v84)
        v84 = *(_QWORD *)(v18 + 16);
    }
    if (*(_DWORD *)(v63 + 80))
    {
      v86 = *(_DWORD *)(v63 + 80);
      if ((v86 & 0x27) != 0 && (v86 & 0x20) == 0)
        JSC::VMTraps::handleTraps(v154, 7u, a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v63 + 16))
        goto LABEL_335;
    }
LABEL_113:
    if ((v84 & 0xFFFE000000000002) == 0)
    {
      v18 = v84;
      if (*(unsigned __int8 *)(v84 + 5) > 0x16u)
        continue;
    }
    goto LABEL_335;
  }
  if (!(_DWORD)v17 || (v17 & ~*(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x20)) != 0)
    goto LABEL_108;
  v65 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x58);
  if (!v65)
  {
    v66 = *(_QWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x40);
    if (!v66 || *(_BYTE *)(v66 + 5) != 1 && *(_DWORD *)(v66 + 80) < 2u)
      goto LABEL_108;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE)), (JSC::VM *)v63, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v65)
      goto LABEL_108;
  }
  if (!*(_DWORD *)(v65 + 24))
    goto LABEL_108;
  v67 = *(_QWORD *)(v65 + 16);
  v68 = v67 & 0xFFFFFFFFFFFFFFFELL;
  v69 = *(unsigned int *)(v65 + 8);
  v70 = *(_DWORD *)(a3 + 16);
  if ((v67 & 1) != 0)
  {
    if ((v70 & 0x20) != 0)
      v70 = *(_DWORD *)(a3 + 32);
    v71 = *(_DWORD *)(v65 + 12);
    v72 = (v70 >> 8) & *(_QWORD *)&v71;
    v73 = *(unsigned __int8 *)(v68 + v72);
    if (*(_BYTE *)(v68 + v72))
    {
      v74 = v68 + v69;
      v75 = 1;
      while (1)
      {
        v76 = *(_QWORD *)(v74 + 8 * (v73 - 1));
        if ((v76 & 0xFFFFFFFFFFFFLL) == a3)
          break;
        v72 = ((_DWORD)v72 + v75) & v71;
        v73 = *(unsigned __int8 *)(v68 + v72);
        ++v75;
        if (!*(_BYTE *)(v68 + v72))
          goto LABEL_108;
      }
      a6 = (v76 >> 16) & 0xFF00000000 | HIBYTE(v76);
      goto LABEL_105;
    }
    goto LABEL_108;
  }
  if ((v70 & 0x20) != 0)
    v70 = *(_DWORD *)(a3 + 32);
  v77 = *(_DWORD *)(v65 + 12);
  v78 = v77 & (v70 >> 8);
  v79 = *(_DWORD *)(v68 + 4 * v78);
  if (!v79)
    goto LABEL_108;
  v80 = v68 + 4 * v69;
  v81 = 1;
  while (1)
  {
    v82 = (v79 - 1);
    if (*(_QWORD *)(v80 + 16 * v82) == a3)
      break;
    v78 = (v78 + v81) & v77;
    v79 = *(_DWORD *)(v68 + 4 * v78);
    ++v81;
    if (!v79)
      goto LABEL_108;
  }
  a6 = *(unsigned int *)(v80 + 16 * v82 + 8) | ((unint64_t)*(unsigned __int8 *)(v80 + 16 * v82 + 12) << 32);
LABEL_105:
  if ((_DWORD)a6 == -1)
  {
LABEL_108:
    if ((*(_BYTE *)(v18 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)v18, (JSC::VM *)v63, a3, (uint64_t)&v155) & 1) != 0)
    {
      goto LABEL_62;
    }
    goto LABEL_109;
  }
  a5 = HIDWORD(a6);
  if ((int)a6 <= 63)
  {
    v111 = v18 + 16;
    v112 = a6 << 32;
  }
  else
  {
    v111 = *(_QWORD *)(v18 + 8) - 8;
    v112 = 0x3F00000000 - (a6 << 32);
  }
  a4 = *(_QWORD *)(v111 + (v112 >> 29));
  if ((a4 & 0xFFFE000000000002) != 0)
  {
LABEL_215:
    v155 = (JSC::JSRopeString *)a4;
    v159 = v18;
    goto LABEL_59;
  }
  v116 = *(unsigned __int8 *)(a4 + 5);
  if (v116 == 5)
  {
    v52 = (unsigned int *)v18;
    v53 = v63;
    goto LABEL_61;
  }
  if (v116 != 6)
    goto LABEL_215;
  v55 = *(_DWORD *)(v64 + 16) & 3;
  v117 = *(_QWORD *)(a4 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info != (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x4C)))
  {
    v155 = *(JSC::JSRopeString **)(a4 + 8);
    v156 = v117;
    LODWORD(v157) = HIDWORD(a6);
    v159 = v18;
    goto LABEL_209;
  }
  v58 = *(_QWORD *)(a4 + 24);
  v57 = *(_QWORD *)(a4 + 32);
  v155 = *(JSC::JSRopeString **)(a4 + 8);
  v156 = v117;
  LODWORD(v157) = HIDWORD(a6);
  v159 = v18;
LABEL_71:
  BYTE1(v161) = 3;
  if (v55 != 2)
    LOBYTE(v161) = 1;
  HIBYTE(v161) = 1;
  v165 = v58;
  v166 = v57;
LABEL_62:
  if (BYTE1(v161) != 1 || ((unint64_t)v155 & 0xFFFE000000000002) != 0 || *((_BYTE *)v155 + 5) != 2)
    goto LABEL_335;
  v54 = (int *)*((_QWORD *)v155 + 1);
  if ((v54 & 1) != 0)
  {
    v54 = *JSC::JSRopeString::resolveRope((unint64_t)v155, 0, a3, a4, a9, a5, a6, a7, a8);
    if (v54)
LABEL_67:
      *v54 += 2;
  }
  else if (v54)
  {
    goto LABEL_67;
  }
  *a1 = v54;
LABEL_336:
  if (v164)
  {
    v149 = *(_DWORD *)(v163 + 4);
    if (!v149)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA327CLL);
    }
    *(_DWORD *)(v163 + 4) = v149 - 1;
  }
}

void JSC::SamplingProfiler::StackFrame::displayName(JSC::SamplingProfiler::StackFrame *this@<X0>, JSC::VM *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, int8x16_t a10@<Q0>)
{
  _DWORD *v12;
  char *v14;
  int v15;
  uint64_t v16;
  char *v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int8x16_t v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  JSC::RegExp *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *dli_sname;
  char *v37;
  char *v38;
  size_t v39;
  size_t v40;
  int *v41;
  char *v42;
  _DWORD *v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  int status[2];
  Dl_info v65;

  v12 = (_DWORD *)*((_QWORD *)this + 3);
  if (v12)
  {
    v14 = (char *)a2 + 64;
    v15 = *((_DWORD *)a2 + 22);
    *((_DWORD *)a2 + 22) = v15 + 1;
    if (!v15)
    {
      v16 = *((_QWORD *)a2 + 2);
      if (v16)
      {
        if (*((_QWORD *)a2 + 3) == v16)
        {
          *((_QWORD *)a2 + 2) = 0;
          v60 = (unsigned int *)((char *)a2 + 80);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 & 0xFFFFFFEF, v60));
          *((_BYTE *)a2 + 86) = 1;
          v12 = (_DWORD *)*((_QWORD *)this + 3);
        }
      }
    }
    *(_QWORD *)status = a2;
    v63 = *(_QWORD *)(16 * (*v12 & 0xFFFFFFFE) + 0x28);
    v65.dli_fname = (const char *)this;
    v65.dli_fbase = a2;
    v65.dli_sname = (const char *)&v63;
    v65.dli_saddr = status;
    v17 = (char *)a2 + 41952;
    JSC::SamplingProfiler::StackFrame::nameFromCallee(JSC::VM &)::$_0::operator()(&v62, (uint64_t *)&v65, *(_QWORD *)(*((_QWORD *)a2 + 5244) + 1192), a4, a5, a6, a7, a8, a10);
    v26 = v62;
    if (v62)
    {
      if (*((_DWORD *)v62 + 1))
      {
        *a9 = (uint64_t)v62;
      }
      else
      {
        JSC::SamplingProfiler::StackFrame::nameFromCallee(JSC::VM &)::$_0::operator()(a9, (uint64_t *)&v65, *(_QWORD *)(*(_QWORD *)v17 + 1968), v20, v21, v22, v23, v24, v25);
        if (*(_DWORD *)v26 == 2)
        {
          WTF::StringImpl::~StringImpl(v26, v18, v19, v20, v21, v22, v23, v24);
          WTF::fastFree(v52, v53, v54, v55, v56, v57, v58, v59);
        }
        else
        {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    else
    {
      JSC::SamplingProfiler::StackFrame::nameFromCallee(JSC::VM &)::$_0::operator()(a9, (uint64_t *)&v65, *(_QWORD *)(*(_QWORD *)v17 + 1968), v20, v21, v22, v23, v24, v25);
    }
    v27 = *((_DWORD *)a2 + 22) - 1;
    *((_DWORD *)a2 + 22) = v27;
    if (!v27 && v14[93377])
    {
      v28 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 2) = v28;
      *((_QWORD *)a2 + 4) = v28;
      if (v28)
      {
        v29 = (unsigned int *)(v14 + 16);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 | 0x10, v29));
      }
      if (v14[93379])
        v14[93378] = 1;
      *((_BYTE *)a2 + 86) = 0;
    }
  }
  else
  {
    v31 = (JSC::RegExp *)*((_QWORD *)this + 4);
    if (!v31)
    {
LABEL_17:
      *a9 = 0;
      goto LABEL_18;
    }
    JSC::RegExp::toSourceString(v31, a3, a4, a5, a6, a7, a8, a9);
  }
  v32 = (WTF::StringImpl *)*a9;
  if (!*a9)
    goto LABEL_17;
  if (*((_DWORD *)v32 + 1))
    return;
  *a9 = 0;
  if (*(_DWORD *)v32 == 2)
  {
    WTF::StringImpl::~StringImpl(v32, v18, v19, v20, v21, v22, v23, v24);
    WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
  }
  else
  {
    *(_DWORD *)v32 -= 2;
  }
LABEL_18:
  switch(*(_DWORD *)this)
  {
    case 0:
      v33 = *((_QWORD *)this + 2);
      switch(*(_BYTE *)(v33 + 5))
      {
        case 8:
          v43 = *(_DWORD **)(v33 + 64);
          if (!v43)
            goto LABEL_43;
          goto LABEL_42;
        case 9:
        case 0xB:
          v34 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v34 = 0x900000002;
          v35 = "(program)";
          goto LABEL_47;
        case 0xA:
          v34 = WTF::fastCompactMalloc((WTF *)0x20);
          *(_QWORD *)v34 = 0x800000002;
          v35 = "(module)";
          goto LABEL_47;
        case 0xC:
          v43 = *(_DWORD **)(*(_QWORD *)(v33 + 88) + 80);
          if (v43)
LABEL_42:
            *v43 += 2;
LABEL_43:
          *a9 = (uint64_t)v43;
          break;
        default:
          __break(0xC471u);
          JUMPOUT(0x198BA370CLL);
      }
      return;
    case 1:
      if (*((_BYTE *)this + 56))
      {
        JSC::Wasm::makeString((uint64_t *)this + 5, a9);
        return;
      }
      v34 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v34 = 0x600000002;
      v35 = "(wasm)";
      goto LABEL_47;
    case 2:
      v34 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v34 = 0x600000002;
      v35 = "(host)";
      goto LABEL_47;
    case 3:
      v34 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v34 = 0x800000002;
      v35 = "(regexp)";
      goto LABEL_47;
    case 4:
      if (dladdr(*((const void **)this + 1), &v65) && (dli_sname = v65.dli_sname) != 0)
      {
        status[0] = 0;
        v37 = __cxa_demangle(v65.dli_sname, 0, 0, status);
        v38 = v37;
        if (v37)
          dli_sname = v37;
        v39 = strlen(dli_sname);
        if (v39)
        {
          v40 = v39;
          if (v39 >> 31)
          {
            __break(0xC471u);
            JUMPOUT(0x198BA3714);
          }
          v41 = (int *)WTF::fastCompactMalloc((WTF *)(v39 + 20));
          v42 = (char *)(v41 + 5);
          *v41 = 2;
          v41[1] = v40;
          *((_QWORD *)v41 + 1) = v41 + 5;
          v41[4] = 4;
          if (v40 == 1)
            *v42 = *dli_sname;
          else
            memcpy(v42, dli_sname, v40);
        }
        else
        {
          v41 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
        *a9 = (uint64_t)v41;
        if (v38)
          free(v38);
      }
      else
      {
        v34 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v34 = 0xE00000002;
        v35 = "(unknown C PC)";
LABEL_47:
        *(_QWORD *)(v34 + 8) = v35;
        *(_DWORD *)(v34 + 16) = 4;
        *a9 = v34;
      }
      break;
    case 5:
      v34 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v34 = 0x900000002;
      v35 = "(unknown)";
      goto LABEL_47;
    default:
      __break(0xC471u);
      JUMPOUT(0x198BA36ECLL);
  }
}

void JSC::SamplingProfiler::releaseStackTraces(JSC::SamplingProfiler *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  JSC::MarkedSpace *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v11 = (JSC::MarkedSpace *)(*((_QWORD *)this + 1) + 352);
  JSC::MarkedSpace::willStartIterating(v11, a2, a3, a4, a5, a6, a7, a8);
  JSC::SamplingProfiler::processUnverifiedStackTraces(this, v12, v13, v14, v15, v16, v17, v18);
  JSC::MarkedSpace::didFinishIterating(v11, v19, v20, v21, v22, v23, v24, v25);
  *a9 = *((_QWORD *)this + 6);
  v26 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  a9[1] = v26;
  WTF::Vector<JSC::SamplingProfiler::StackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 48, 0, v27, v28, v29, v30, v31, v32);
  v40 = *((_QWORD *)this + 13);
  if (v40)
  {
    *((_QWORD *)this + 13) = 0;
    WTF::fastFree(v40 - 16, v33, v34, v35, v36, v37, v38, v39);
  }
  if (*((_DWORD *)this + 18))
  {
    v41 = *((unsigned int *)this + 19);
    if ((_DWORD)v41)
    {
      v42 = v41 << 6;
      v43 = *((_QWORD *)this + 8) + 48;
      do
      {
        v43 = WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v43, v33, v34, v35, v36, v37, v38, v39)+ 64;
        v42 -= 64;
      }
      while (v42);
      *((_DWORD *)this + 19) = 0;
    }
    v44 = *((_QWORD *)this + 8);
    if (v44)
    {
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v44, v33, v34, v35, v36, v37, v38, v39);
    }
  }
}

void JSC::SamplingProfiler::stackTracesAsJSON(JSC::SamplingProfiler *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v10;
  unsigned __int8 *v11;
  JSC::MarkedSpace *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF::AtomStringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v47;
  WTF *v48;
  WTF::StringImpl *v49;
  _QWORD *v50;
  WTF *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  WTF *v73;
  WTF *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unsigned int v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  WTF *v100;
  WTF *v101;
  WTF *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int8x16_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF *v117;
  WTF::AtomStringImpl *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  WTF *v129;
  WTF *v130;
  WTF *v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  WTF::AtomStringImpl *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  WTF *v150;
  WTF *v151;
  unint64_t v152;
  WTF *v153;
  uint64_t v154;
  int v155;
  const char *v156;
  unint64_t v157;
  char **v158;
  uint64_t v159;
  uint64_t v160;
  unsigned int v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  WTF::AtomStringImpl *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  WTF *v205;
  WTF *v206;
  WTF::StringImpl *v207;
  unsigned int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  WTF::AtomStringImpl *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  WTF *v226;
  WTF *v227;
  WTF::StringImpl *v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _DWORD **v244;
  uint64_t v245;
  _DWORD *v246;
  _DWORD **v247;
  uint64_t v248;
  _DWORD *v249;
  _DWORD **v250;
  uint64_t v251;
  _DWORD *v252;
  _DWORD **v253;
  uint64_t v254;
  _DWORD *v255;
  _DWORD **v256;
  uint64_t v257;
  _DWORD *v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t *v261;
  WTF *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  WTF::AtomStringImpl *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  WTF *v281;
  WTF::StringImpl *v282;
  uint64_t v283;
  WTF **v284;
  uint64_t *v285;
  WTF *v286;
  unint64_t v287;
  void *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  _DWORD **v303;
  uint64_t v304;
  _DWORD *v305;
  _DWORD **v306;
  uint64_t v307;
  _DWORD *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  WTF::AtomStringImpl *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  WTF *v326;
  WTF::StringImpl *v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  int v340;
  int v341;
  BOOL v342;
  unint64_t v343;
  void *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  void *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _DWORD **v359;
  uint64_t v360;
  _DWORD *v361;
  _DWORD **v362;
  uint64_t v363;
  _DWORD *v364;
  uint64_t *v365;
  uint64_t v366;
  unsigned __int8 *v368;
  uint64_t v369;
  uint64_t *v370;
  WTF *v371;
  _QWORD *v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  _QWORD *v377;
  unint64_t StatusReg;
  WTF *v379[2];
  WTF *v380[2];
  int v381;
  _DWORD *v382;
  WTF *v383;
  char v384;
  __int128 v385;
  uint64_t v386;
  uint64_t v387;

  v387 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v10 + 916);
  v11 = (unsigned __int8 *)this + 4;
  if (__ldaxr((unsigned __int8 *)this + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_5:
  v13 = (JSC::MarkedSpace *)(*((_QWORD *)this + 1) + 352);
  JSC::MarkedSpace::willStartIterating(v13, a2, a3, a4, a5, a6, a7, a8);
  JSC::SamplingProfiler::processUnverifiedStackTraces(this, v14, v15, v16, v17, v18, v19, v20);
  JSC::MarkedSpace::didFinishIterating(v13, v21, v22, v23, v24, v25, v26, v27);
  v28 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v28 = 0x500000001;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  *(_QWORD *)(v28 + 32) = 0;
  v29 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v29 = 0x800000002;
  *(_QWORD *)(v29 + 8) = "interval";
  *(_DWORD *)(v29 + 16) = 4;
  v380[0] = (WTF *)v29;
  v30 = *((_QWORD *)this + 10);
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v31 = 0x200000001;
  v31[1] = v30;
  *(_QWORD *)&v385 = v31;
  v365 = (uint64_t *)(v28 + 16);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v28 + 16), (WTF::AtomStringImpl *)v380, (const WTF::StringImpl *)&v385, v32, v33, v34, v35, v36, (uint64_t)&v383);
  if (v384)
  {
    v44 = (uint64_t *)(v28 + 24);
    v45 = *(unsigned int *)(v28 + 36);
    if ((_DWORD)v45 == *(_DWORD *)(v28 + 32))
    {
      v359 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v44, v45 + 1, (unint64_t)v380);
      v45 = *(unsigned int *)(v28 + 36);
      v360 = *(_QWORD *)(v28 + 24);
      v361 = *v359;
      if (*v359)
        *v361 += 2;
      *(_QWORD *)(v360 + 8 * v45) = v361;
    }
    else
    {
      v46 = *v44;
      v47 = v380[0];
      if (v380[0])
        *(_DWORD *)v380[0] += 2;
      *(_QWORD *)(v46 + 8 * v45) = v47;
    }
    *(_DWORD *)(v28 + 36) = v45 + 1;
  }
  v48 = (WTF *)v385;
  *(_QWORD *)&v385 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
      WTF::JSONImpl::Value::operator delete(v48, v37, v38, v39, v40, v41, v42, v43);
    else
      --*(_DWORD *)v48;
  }
  v366 = v28;
  v49 = v380[0];
  v380[0] = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl(v49, v37, v38, v39, v40, v41, v42, v43);
      WTF::fastFree(v343, v344, v345, v346, v347, v348, v349, v350);
    }
    else
    {
      *(_DWORD *)v49 -= 2;
    }
  }
  v368 = v11;
  v369 = v10;
  v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v51 = (WTF *)v50;
  v50[2] = 0;
  v372 = v50 + 2;
  *v50 = 0x600000001;
  v50[3] = 0;
  v52 = (uint64_t *)*((_QWORD *)this + 6);
  v53 = *((unsigned int *)this + 15);
  if ((_DWORD)v53)
  {
    v370 = &v52[4 * v53];
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v371 = (WTF *)v50;
    while (1)
    {
      v54 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v54 = 0x500000001;
      *(_QWORD *)(v54 + 16) = 0;
      *(_QWORD *)(v54 + 24) = 0;
      *(_QWORD *)(v54 + 32) = 0;
      v55 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v55 = 0x900000002;
      *(_QWORD *)(v55 + 8) = "timestamp";
      *(_DWORD *)(v55 + 16) = 4;
      v380[0] = (WTF *)v55;
      v56 = *v52;
      v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v57 = 0x200000001;
      v57[1] = v56;
      *(_QWORD *)&v385 = v57;
      v373 = (uint64_t *)(v54 + 16);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v54 + 16), (WTF::AtomStringImpl *)v380, (const WTF::StringImpl *)&v385, v58, v59, v60, v61, v62, (uint64_t)&v383);
      if (v384)
      {
        v70 = (uint64_t *)(v54 + 24);
        v71 = *(unsigned int *)(v54 + 36);
        if ((_DWORD)v71 == *(_DWORD *)(v54 + 32))
        {
          v303 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v70, v71 + 1, (unint64_t)v380);
          v71 = *(unsigned int *)(v54 + 36);
          v304 = *(_QWORD *)(v54 + 24);
          v305 = *v303;
          if (*v303)
            *v305 += 2;
          *(_QWORD *)(v304 + 8 * v71) = v305;
        }
        else
        {
          v72 = *v70;
          v73 = v380[0];
          if (v380[0])
            *(_DWORD *)v380[0] += 2;
          *(_QWORD *)(v72 + 8 * v71) = v73;
        }
        *(_DWORD *)(v54 + 36) = v71 + 1;
      }
      v74 = (WTF *)v385;
      *(_QWORD *)&v385 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 1)
          WTF::JSONImpl::Value::operator delete(v74, v63, v64, v65, v66, v67, v68, v69);
        else
          --*(_DWORD *)v74;
      }
      v75 = v380[0];
      v380[0] = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
        {
          WTF::StringImpl::~StringImpl(v75, v63, v64, v65, v66, v67, v68, v69);
          WTF::fastFree(v287, v288, v289, v290, v291, v292, v293, v294);
        }
        else
        {
          *(_DWORD *)v75 -= 2;
        }
      }
      v374 = v54;
      v76 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v76 = 0x600000001;
      *(_QWORD *)(v76 + 16) = 0;
      v377 = (_QWORD *)(v76 + 16);
      *(_QWORD *)(v76 + 24) = 0;
      v375 = v52;
      v77 = *((_DWORD *)v52 + 7);
      if (v77)
        break;
LABEL_260:
      v263 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v263 = 0x600000002;
      *(_QWORD *)(v263 + 8) = "frames";
      *(_DWORD *)(v263 + 16) = 4;
      *(_QWORD *)&v385 = v263;
      v380[0] = (WTF *)v76;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v373, (WTF::AtomStringImpl *)&v385, (const WTF::StringImpl *)v380, v264, v265, v266, v267, v268, (uint64_t)&v383);
      v51 = v371;
      v276 = v374;
      if (v384)
      {
        v277 = (uint64_t *)(v374 + 24);
        v278 = *(unsigned int *)(v374 + 36);
        if ((_DWORD)v278 == *(_DWORD *)(v374 + 32))
        {
          v306 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v277, v278 + 1, (unint64_t)&v385);
          v278 = *(unsigned int *)(v374 + 36);
          v307 = *(_QWORD *)(v374 + 24);
          v308 = *v306;
          if (*v306)
            *v308 += 2;
          *(_QWORD *)(v307 + 8 * v278) = v308;
        }
        else
        {
          v279 = *v277;
          v280 = v385;
          if ((_QWORD)v385)
            *(_DWORD *)v385 += 2;
          *(_QWORD *)(v279 + 8 * v278) = v280;
        }
        *(_DWORD *)(v374 + 36) = v278 + 1;
      }
      v281 = v380[0];
      v380[0] = 0;
      if (v281)
      {
        if (*(_DWORD *)v281 == 1)
          WTF::JSONImpl::Value::operator delete(v281, v269, v270, v271, v272, v273, v274, v275);
        else
          --*(_DWORD *)v281;
      }
      v282 = (WTF::StringImpl *)v385;
      *(_QWORD *)&v385 = 0;
      if (v282)
      {
        if (*(_DWORD *)v282 == 2)
        {
          WTF::StringImpl::~StringImpl(v282, v269, v270, v271, v272, v273, v274, v275);
          WTF::fastFree(v295, v296, v297, v298, v299, v300, v301, v302);
        }
        else
        {
          *(_DWORD *)v282 -= 2;
        }
      }
      v383 = (WTF *)v374;
      v283 = *((unsigned int *)v371 + 7);
      if ((_DWORD)v283 == *((_DWORD *)v371 + 6))
      {
        v284 = (WTF **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v372, v283 + 1, (unint64_t)&v383);
        v283 = *((unsigned int *)v371 + 7);
        v285 = (uint64_t *)(*((_QWORD *)v371 + 2) + 8 * v283);
        v276 = (uint64_t)*v284;
      }
      else
      {
        v285 = (uint64_t *)(*v372 + 8 * v283);
        v284 = &v383;
      }
      *v284 = 0;
      *v285 = v276;
      *((_DWORD *)v371 + 7) = v283 + 1;
      v286 = v383;
      v383 = 0;
      if (v286)
      {
        if (*(_DWORD *)v286 == 1)
          WTF::JSONImpl::Value::operator delete(v286, v269, v270, v271, v272, v273, v274, v275);
        else
          --*(_DWORD *)v286;
      }
      v52 = v375 + 4;
      if (v375 + 4 == v370)
        goto LABEL_291;
    }
    v78 = v52[2];
    v376 = v78 + 136 * v77;
    while (1)
    {
      v79 = WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v79 = 0x500000001;
      *(_QWORD *)(v79 + 16) = 0;
      v80 = (uint64_t *)(v79 + 16);
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0;
      v81 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v81 = 0x800000002;
      *(_QWORD *)(v81 + 8) = "sourceID";
      *(_DWORD *)(v81 + 16) = 4;
      v380[0] = (WTF *)v81;
      if ((*(_DWORD *)v78 - 1) < 5)
        goto LABEL_34;
      if (*(_DWORD *)v78)
      {
        __break(0xC471u);
        JUMPOUT(0x198BA5684);
      }
      v159 = *(_QWORD *)(v78 + 16);
      if (*(_BYTE *)(v159 + 5) == 8)
      {
LABEL_34:
        v82 = -1;
      }
      else
      {
        v160 = *(_QWORD *)(v159 + 40);
        if (v160)
        {
          v82 = *(_DWORD *)(v160 + 112);
          if (!v82)
          {
            do
              v161 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
            while (__stlxr(v161 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
            v162 = __CFADD__(v161, 1);
            v82 = v161 + 1;
            *(_DWORD *)(v160 + 112) = v82;
            if (v162)
            {
              __break(0xC471u);
              JUMPOUT(0x198BA5650);
            }
          }
        }
        else
        {
          v82 = 1;
        }
      }
      v83 = (double)v82;
      v84 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v84 = 0x200000001;
      *(double *)(v84 + 8) = v83;
      *(_QWORD *)&v385 = v84;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v80, (WTF::AtomStringImpl *)v380, (const WTF::StringImpl *)&v385, v85, v86, v87, v88, v89, (uint64_t)&v383);
      if (v384)
      {
        v97 = (uint64_t *)(v79 + 24);
        v98 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v98 == *(_DWORD *)(v79 + 32))
        {
          v244 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v97, v98 + 1, (unint64_t)v380);
          v98 = *(unsigned int *)(v79 + 36);
          v245 = *(_QWORD *)(v79 + 24);
          v246 = *v244;
          if (*v244)
            *v246 += 2;
          *(_QWORD *)(v245 + 8 * v98) = v246;
        }
        else
        {
          v99 = *v97;
          v100 = v380[0];
          if (v380[0])
            *(_DWORD *)v380[0] += 2;
          *(_QWORD *)(v99 + 8 * v98) = v100;
        }
        *(_DWORD *)(v79 + 36) = v98 + 1;
      }
      v101 = (WTF *)v385;
      *(_QWORD *)&v385 = 0;
      if (v101)
      {
        if (*(_DWORD *)v101 == 1)
          WTF::JSONImpl::Value::operator delete(v101, v90, v91, v92, v93, v94, v95, v96);
        else
          --*(_DWORD *)v101;
      }
      v102 = v380[0];
      v380[0] = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 != 2)
        {
          *(_DWORD *)v102 -= 2;
          goto LABEL_47;
        }
        WTF::StringImpl::~StringImpl(v102, v90, v91, v92, v93, v94, v95, v96);
        v168 = *(_QWORD *)(StatusReg + 752);
        if (v168)
        {
          if ((unint64_t)v102 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v102 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v102)) & 1) == 0)
          {
            if ((unint64_t)v102 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v102 >> 24)
            {
              v163 = 0;
LABEL_211:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v168, (unint64_t)v102, 1, v163, v164, v165, v166, v167);
              goto LABEL_47;
            }
            v163 = (*(_DWORD *)((char *)off_1ECF425F8
                              + (((((unint64_t)v102 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v102) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v163 != 1)
              goto LABEL_211;
          }
          v169 = *(unsigned int *)(v168 + 8000);
          if (v169 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v168, (uint64_t)v102, (os_unfair_lock_s *)5, v163, v164, v165, v166, v167);
          }
          else
          {
            *(_QWORD *)(v168 + 8 * v169) = (unint64_t)v102 | 0x5000000000000;
            *(_DWORD *)(v168 + 8000) = v169 + 1;
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache((unint64_t)v102, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_47:
      v103 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v103 = 0x400000002;
      *(_QWORD *)(v103 + 8) = "name";
      *(_DWORD *)(v103 + 16) = 4;
      v380[0] = (WTF *)v103;
      JSC::SamplingProfiler::StackFrame::displayName((JSC::SamplingProfiler::StackFrame *)v78, *((JSC::VM **)this + 1), v104, v105, v106, v107, v108, v109, (uint64_t *)v379, v110);
      v111 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v111 = 0x400000001;
      v117 = v379[0];
      *(WTF **)(v111 + 8) = v379[0];
      if (v117)
        *(_DWORD *)v117 += 2;
      *(_QWORD *)&v385 = v111;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v80, (WTF::AtomStringImpl *)v380, (const WTF::StringImpl *)&v385, v112, v113, v114, v115, v116, (uint64_t)&v383);
      if (v384)
      {
        v125 = (uint64_t *)(v79 + 24);
        v126 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v126 == *(_DWORD *)(v79 + 32))
        {
          v247 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v125, v126 + 1, (unint64_t)v380);
          v126 = *(unsigned int *)(v79 + 36);
          v248 = *(_QWORD *)(v79 + 24);
          v249 = *v247;
          if (*v247)
            *v249 += 2;
          *(_QWORD *)(v248 + 8 * v126) = v249;
        }
        else
        {
          v127 = *v125;
          v128 = v380[0];
          if (v380[0])
            *(_DWORD *)v380[0] += 2;
          *(_QWORD *)(v127 + 8 * v126) = v128;
        }
        *(_DWORD *)(v79 + 36) = v126 + 1;
      }
      v129 = (WTF *)v385;
      *(_QWORD *)&v385 = 0;
      if (v129)
      {
        if (*(_DWORD *)v129 == 1)
          WTF::JSONImpl::Value::operator delete(v129, v118, v119, v120, v121, v122, v123, v124);
        else
          --*(_DWORD *)v129;
      }
      v130 = v379[0];
      v379[0] = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 != 2)
        {
          *(_DWORD *)v130 -= 2;
          goto LABEL_61;
        }
        WTF::StringImpl::~StringImpl(v130, v118, v119, v120, v121, v122, v123, v124);
        v170 = *(_QWORD *)(StatusReg + 752);
        if (v170)
        {
          if ((unint64_t)v130 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v130 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v130)) & 1) == 0)
          {
            if ((unint64_t)v130 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v130 >> 24)
            {
              v120 = 0;
LABEL_215:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v170, (unint64_t)v130, 1, v120, v121, v122, v123, v124);
              goto LABEL_61;
            }
            v120 = (*(_DWORD *)((char *)off_1ECF425F8
                              + (((((unint64_t)v130 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v130) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v120 != 1)
              goto LABEL_215;
          }
          v171 = *(unsigned int *)(v170 + 8000);
          if (v171 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v170, (uint64_t)v130, (os_unfair_lock_s *)5, v120, v121, v122, v123, v124);
          }
          else
          {
            *(_QWORD *)(v170 + 8 * v171) = (unint64_t)v130 | 0x5000000000000;
            *(_DWORD *)(v170 + 8000) = v171 + 1;
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache((unint64_t)v130, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_61:
      v131 = v380[0];
      v380[0] = 0;
      if (!v131)
        goto LABEL_64;
      if (*(_DWORD *)v131 != 2)
      {
        *(_DWORD *)v131 -= 2;
        goto LABEL_64;
      }
      WTF::StringImpl::~StringImpl(v131, v118, v119, v120, v121, v122, v123, v124);
      v177 = *(_QWORD *)(StatusReg + 752);
      if (v177)
      {
        if ((unint64_t)v131 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v131 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v131)) & 1) == 0)
        {
          if ((unint64_t)v131 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v131 >> 24)
          {
            v172 = 0;
LABEL_219:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v177, (unint64_t)v131, 1, v172, v173, v174, v175, v176);
            goto LABEL_64;
          }
          v172 = (*(_DWORD *)((char *)off_1ECF425F8
                            + (((((unint64_t)v131 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * ((BYTE3(v131) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v172 != 1)
            goto LABEL_219;
        }
        v178 = *(unsigned int *)(v177 + 8000);
        if (v178 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v177, (uint64_t)v131, (os_unfair_lock_s *)5, v172, v173, v174, v175, v176);
        }
        else
        {
          *(_QWORD *)(v177 + 8 * v178) = (unint64_t)v131 | 0x5000000000000;
          *(_DWORD *)(v177 + 8000) = v178 + 1;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache((unint64_t)v131, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_64:
      v132 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v132 = 0x800000002;
      *(_QWORD *)(v132 + 8) = "location";
      *(_DWORD *)(v132 + 16) = 4;
      v379[0] = (WTF *)v132;
      *(_OWORD *)v380 = *(_OWORD *)(v78 + 72);
      v381 = *(_DWORD *)(v78 + 88);
      JSC::descriptionForLocation((uint64_t *)&v382, (uint64_t)v380, *(_WORD *)(v78 + 64), *(_DWORD *)(v78 + 68));
      v133 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v133 = 0x400000001;
      v139 = v382;
      v133[1] = v382;
      if (v139)
        *v139 += 2;
      *(_QWORD *)&v385 = v133;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v80, (WTF::AtomStringImpl *)v379, (const WTF::StringImpl *)&v385, v134, v135, v136, v137, v138, (uint64_t)&v383);
      if (v384)
      {
        v147 = (uint64_t *)(v79 + 24);
        v148 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v148 == *(_DWORD *)(v79 + 32))
        {
          v250 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v147, v148 + 1, (unint64_t)v379);
          v148 = *(unsigned int *)(v79 + 36);
          v251 = *(_QWORD *)(v79 + 24);
          v252 = *v250;
          if (*v250)
            *v252 += 2;
          *(_QWORD *)(v251 + 8 * v148) = v252;
        }
        else
        {
          v149 = *v147;
          v150 = v379[0];
          if (v379[0])
            *(_DWORD *)v379[0] += 2;
          *(_QWORD *)(v149 + 8 * v148) = v150;
        }
        *(_DWORD *)(v79 + 36) = v148 + 1;
      }
      v151 = (WTF *)v385;
      *(_QWORD *)&v385 = 0;
      if (v151)
      {
        if (*(_DWORD *)v151 == 1)
          WTF::JSONImpl::Value::operator delete(v151, v140, v141, v142, v143, v144, v145, v146);
        else
          --*(_DWORD *)v151;
      }
      v152 = (unint64_t)v382;
      v382 = 0;
      if (v152)
      {
        if (*(_DWORD *)v152 != 2)
        {
          *(_DWORD *)v152 -= 2;
          goto LABEL_78;
        }
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v152, v140, v141, v142, v143, v144, v145, v146);
        v179 = *(_QWORD *)(StatusReg + 752);
        if (v179)
        {
          if (v152 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v152 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v152)) & 1) == 0)
          {
            if (v152 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v152 >> 24)
            {
              v142 = 0;
LABEL_223:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v179, v152, 1, v142, v143, v144, v145, v146);
              goto LABEL_78;
            }
            v142 = (*(_DWORD *)((char *)off_1ECF425F8
                              + ((((v152 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v152) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v142 != 1)
              goto LABEL_223;
          }
          v180 = *(unsigned int *)(v179 + 8000);
          if (v180 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v179, v152, (os_unfair_lock_s *)5, v142, v143, v144, v145, v146);
          }
          else
          {
            *(_QWORD *)(v179 + 8 * v180) = v152 | 0x5000000000000;
            *(_DWORD *)(v179 + 8000) = v180 + 1;
          }
        }
        else
        {
          pas_try_deallocate_slow_no_cache(v152, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
LABEL_78:
      v153 = v379[0];
      v379[0] = 0;
      if (!v153)
        goto LABEL_81;
      if (*(_DWORD *)v153 != 2)
      {
        *(_DWORD *)v153 -= 2;
        goto LABEL_81;
      }
      WTF::StringImpl::~StringImpl(v153, v140, v141, v142, v143, v144, v145, v146);
      v186 = *(_QWORD *)(StatusReg + 752);
      if (v186)
      {
        if ((unint64_t)v153 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v153 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v153)) & 1) == 0)
        {
          if ((unint64_t)v153 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v153 >> 24)
          {
            v181 = 0;
LABEL_227:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v186, (unint64_t)v153, 1, v181, v182, v183, v184, v185);
            goto LABEL_81;
          }
          v181 = (*(_DWORD *)((char *)off_1ECF425F8
                            + (((((unint64_t)v153 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * ((BYTE3(v153) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v181 != 1)
            goto LABEL_227;
        }
        v187 = *(unsigned int *)(v186 + 8000);
        if (v187 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v186, (uint64_t)v153, (os_unfair_lock_s *)5, v181, v182, v183, v184, v185);
        }
        else
        {
          *(_QWORD *)(v186 + 8 * v187) = (unint64_t)v153 | 0x5000000000000;
          *(_DWORD *)(v186 + 8000) = v187 + 1;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache((unint64_t)v153, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_81:
      v154 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v154 = 0x800000002;
      *(_QWORD *)(v154 + 8) = "category";
      v155 = 4;
      *(_DWORD *)(v154 + 16) = 4;
      v379[0] = (WTF *)v154;
      v156 = "Host";
      switch(*(_DWORD *)v78)
      {
        case 0:
          LODWORD(v157) = *(unsigned __int8 *)(v78 + 88) - 1;
          if (v157 < 5)
          {
            v157 = (char)v157;
            v155 = dword_199159370[(char)v157];
            v158 = off_1E35ADDE0;
            goto LABEL_122;
          }
          v155 = 18;
          v156 = "Unknown Executable";
          break;
        case 1:
          if (*(_BYTE *)(v78 + 65) && (v157 = *(char *)(v78 + 64), v157 < 6))
          {
            v155 = dword_199159384[v157];
            v158 = off_1E35ADE08;
LABEL_122:
            v156 = v158[v157];
          }
          else
          {
            v156 = "Wasm";
          }
          break;
        case 2:
          break;
        case 3:
          v155 = 6;
          v156 = "RegExp";
          break;
        case 4:
          v155 = 5;
          v156 = "C/C++";
          break;
        default:
          v155 = 13;
          v156 = "Unknown Frame";
          break;
      }
      v188 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v188 = 2;
      *(_DWORD *)(v188 + 4) = v155;
      *(_QWORD *)(v188 + 8) = v156;
      *(_DWORD *)(v188 + 16) = 4;
      v189 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v189 = 0x400000001;
      v189[1] = v188;
      *(_DWORD *)v188 += 2;
      *(_QWORD *)&v385 = v189;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v80, (WTF::AtomStringImpl *)v379, (const WTF::StringImpl *)&v385, v190, v191, v192, v193, v194, (uint64_t)&v383);
      if (v384)
      {
        v202 = (uint64_t *)(v79 + 24);
        v203 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v203 == *(_DWORD *)(v79 + 32))
        {
          v253 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v202, v203 + 1, (unint64_t)v379);
          v203 = *(unsigned int *)(v79 + 36);
          v254 = *(_QWORD *)(v79 + 24);
          v255 = *v253;
          if (*v253)
            *v255 += 2;
          *(_QWORD *)(v254 + 8 * v203) = v255;
        }
        else
        {
          v204 = *v202;
          v205 = v379[0];
          if (v379[0])
            *(_DWORD *)v379[0] += 2;
          *(_QWORD *)(v204 + 8 * v203) = v205;
        }
        *(_DWORD *)(v79 + 36) = v203 + 1;
      }
      v206 = (WTF *)v385;
      *(_QWORD *)&v385 = 0;
      if (v206)
      {
        if (*(_DWORD *)v206 == 1)
          WTF::JSONImpl::Value::operator delete(v206, v195, v196, v197, v198, v199, v200, v201);
        else
          --*(_DWORD *)v206;
      }
      if (*(_DWORD *)v188 != 2)
      {
        *(_DWORD *)v188 -= 2;
        goto LABEL_140;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v188, v195, v196, v197, v198, v199, v200, v201);
      v233 = *(_QWORD *)(StatusReg + 752);
      if (v233)
      {
        if (v188 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v188 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v188)) & 1) == 0)
        {
          if (v188 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v188 >> 24)
          {
            v197 = 0;
LABEL_207:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v233, v188, 1, v197, v198, v199, v200, v201);
            goto LABEL_140;
          }
          v197 = (*(_DWORD *)((char *)off_1ECF425F8
                            + ((((v188 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                            + 24) >> (2 * ((BYTE3(v188) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v197 != 1)
            goto LABEL_207;
        }
        v234 = *(unsigned int *)(v233 + 8000);
        if (v234 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v233, v188, (os_unfair_lock_s *)5, v197, v198, v199, v200, v201);
        }
        else
        {
          *(_QWORD *)(v233 + 8 * v234) = v188 | 0x5000000000000;
          *(_DWORD *)(v233 + 8000) = v234 + 1;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v188, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_140:
      v207 = v379[0];
      v379[0] = 0;
      if (v207)
      {
        if (*(_DWORD *)v207 == 2)
        {
          WTF::StringImpl::~StringImpl(v207, v195, v196, v197, v198, v199, v200, v201);
          v240 = *(_QWORD *)(StatusReg + 752);
          if (!v240)
          {
            pas_try_deallocate_slow_no_cache((unint64_t)v207, (uint64_t)&bmalloc_heap_config, 1);
            goto LABEL_143;
          }
          if ((unint64_t)v207 >> 43
            || ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v207 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v207)) & 1) == 0)
          {
            if ((unint64_t)v207 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v207 >> 24)
            {
              v235 = 0;
LABEL_231:
              bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v240, (unint64_t)v207, 1, v235, v236, v237, v238, v239);
              goto LABEL_143;
            }
            v235 = (*(_DWORD *)((char *)off_1ECF425F8
                              + (((((unint64_t)v207 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v207) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v235 != 1)
              goto LABEL_231;
          }
          v241 = *(unsigned int *)(v240 + 8000);
          if (v241 >= 0x3E7)
          {
            pas_thread_local_cache_append_deallocation_slow(v240, (uint64_t)v207, (os_unfair_lock_s *)5, v235, v236, v237, v238, v239);
          }
          else
          {
            *(_QWORD *)(v240 + 8 * v241) = (unint64_t)v207 | 0x5000000000000;
            *(_DWORD *)(v240 + 8000) = v241 + 1;
          }
        }
        else
        {
          *(_DWORD *)v207 -= 2;
        }
      }
LABEL_143:
      if (!*(_DWORD *)v78 && (v232 = *(_QWORD *)(v78 + 16)) != 0 && *(_BYTE *)(v232 + 5) == 12)
        v208 = *(_DWORD *)(*(_QWORD *)(v232 + 88) + 16) >> 31;
      else
        v208 = 0;
      v209 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v209 = 0x500000002;
      *(_QWORD *)(v209 + 8) = "flags";
      *(_DWORD *)(v209 + 16) = 4;
      v379[0] = (WTF *)v209;
      v210 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v210 = 0x200000001;
      *(double *)(v210 + 8) = (double)v208;
      *(_QWORD *)&v385 = v210;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v80, (WTF::AtomStringImpl *)v379, (const WTF::StringImpl *)&v385, v211, v212, v213, v214, v215, (uint64_t)&v383);
      if (v384)
      {
        v223 = (uint64_t *)(v79 + 24);
        v224 = *(unsigned int *)(v79 + 36);
        if ((_DWORD)v224 == *(_DWORD *)(v79 + 32))
        {
          v256 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v223, v224 + 1, (unint64_t)v379);
          v224 = *(unsigned int *)(v79 + 36);
          v257 = *(_QWORD *)(v79 + 24);
          v258 = *v256;
          if (*v256)
            *v258 += 2;
          *(_QWORD *)(v257 + 8 * v224) = v258;
        }
        else
        {
          v225 = *v223;
          v226 = v379[0];
          if (v379[0])
            *(_DWORD *)v379[0] += 2;
          *(_QWORD *)(v225 + 8 * v224) = v226;
        }
        *(_DWORD *)(v79 + 36) = v224 + 1;
      }
      v227 = (WTF *)v385;
      *(_QWORD *)&v385 = 0;
      if (v227)
      {
        if (*(_DWORD *)v227 == 1)
          WTF::JSONImpl::Value::operator delete(v227, v216, v217, v218, v219, v220, v221, v222);
        else
          --*(_DWORD *)v227;
      }
      v228 = v379[0];
      v379[0] = 0;
      if (!v228)
        goto LABEL_157;
      if (*(_DWORD *)v228 == 2)
      {
        WTF::StringImpl::~StringImpl(v228, v216, v217, v218, v219, v220, v221, v222);
        v242 = *(_QWORD *)(StatusReg + 752);
        if (v242)
        {
          if (!((unint64_t)v228 >> 43)
            && ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v228 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v228)) & 1) != 0)
          {
LABEL_175:
            v243 = *(unsigned int *)(v242 + 8000);
            if (v243 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v242, (uint64_t)v228, (os_unfair_lock_s *)5, v218, v219, v220, v221, v222);
            }
            else
            {
              *(_QWORD *)(v242 + 8 * v243) = (unint64_t)v228 | 0x5000000000000;
              *(_DWORD *)(v242 + 8000) = v243 + 1;
            }
            goto LABEL_157;
          }
          if ((unint64_t)v228 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v228 >> 24)
          {
            v218 = 0;
          }
          else
          {
            v218 = (*(_DWORD *)((char *)off_1ECF425F8
                              + (((((unint64_t)v228 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                              + 24) >> (2 * ((BYTE3(v228) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
            if ((_DWORD)v218 == 1)
              goto LABEL_175;
          }
          bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v242, (unint64_t)v228, 1, v218, v219, v220, v221, v222);
        }
        else
        {
          pas_try_deallocate_slow_no_cache((unint64_t)v228, (uint64_t)&bmalloc_heap_config, 1);
        }
      }
      else
      {
        *(_DWORD *)v228 -= 2;
      }
LABEL_157:
      v385 = *(_OWORD *)(v78 + 96);
      v386 = *(_QWORD *)(v78 + 112);
      if (*(_BYTE *)(v78 + 128))
      {
        v229 = *(_QWORD *)(v78 + 120);
        v230 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        *v230 = 0x500000001;
        v230[2] = 0;
        v230[3] = 0;
        v230[4] = 0;
        v231 = WTF::fastCompactMalloc((WTF *)0x20);
        *(_QWORD *)v231 = 0x400000002;
        *(_QWORD *)(v231 + 8) = "name";
        *(_DWORD *)(v231 + 16) = 4;
        v382 = (_DWORD *)v231;
        __asm { BR              X9 }
      }
      v383 = (WTF *)v79;
      v259 = *(unsigned int *)(v76 + 28);
      if ((_DWORD)v259 == *(_DWORD *)(v76 + 24))
      {
        v260 = (uint64_t *)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v377, v259 + 1, (unint64_t)&v383);
        v259 = *(unsigned int *)(v76 + 28);
        v261 = (uint64_t *)(*(_QWORD *)(v76 + 16) + 8 * v259);
        v79 = *v260;
      }
      else
      {
        v261 = (uint64_t *)(*v377 + 8 * v259);
        v260 = (uint64_t *)&v383;
      }
      *v260 = 0;
      *v261 = v79;
      *(_DWORD *)(v76 + 28) = v259 + 1;
      v262 = v383;
      v383 = 0;
      if (v262)
      {
        if (*(_DWORD *)v262 == 1)
          WTF::JSONImpl::Value::operator delete(v262, v216, v217, v218, v219, v220, v221, v222);
        else
          --*(_DWORD *)v262;
      }
      v78 += 136;
      if (v78 == v376)
        goto LABEL_260;
    }
  }
LABEL_291:
  v309 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v309 = 0x600000002;
  *(_QWORD *)(v309 + 8) = "traces";
  *(_DWORD *)(v309 + 16) = 4;
  *(_QWORD *)&v385 = v309;
  ++*(_DWORD *)v51;
  v380[0] = v51;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>(v365, (WTF::AtomStringImpl *)&v385, (const WTF::StringImpl *)v380, v310, v311, v312, v313, v314, (uint64_t)&v383);
  if (v384)
  {
    v322 = (uint64_t *)(v366 + 24);
    v323 = *(unsigned int *)(v366 + 36);
    if ((_DWORD)v323 == *(_DWORD *)(v366 + 32))
    {
      v362 = (_DWORD **)WTF::Vector<WTF::AutomaticThread *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v322, v323 + 1, (unint64_t)&v385);
      v323 = *(unsigned int *)(v366 + 36);
      v363 = *(_QWORD *)(v366 + 24);
      v364 = *v362;
      if (*v362)
        *v364 += 2;
      *(_QWORD *)(v363 + 8 * v323) = v364;
    }
    else
    {
      v324 = *v322;
      v325 = v385;
      if ((_QWORD)v385)
        *(_DWORD *)v385 += 2;
      *(_QWORD *)(v324 + 8 * v323) = v325;
    }
    *(_DWORD *)(v366 + 36) = v323 + 1;
  }
  v326 = v380[0];
  v380[0] = 0;
  if (v326)
  {
    if (*(_DWORD *)v326 == 1)
      WTF::JSONImpl::Value::operator delete(v326, v315, v316, v317, v318, v319, v320, v321);
    else
      --*(_DWORD *)v326;
  }
  v327 = (WTF::StringImpl *)v385;
  *(_QWORD *)&v385 = 0;
  if (v327)
  {
    if (*(_DWORD *)v327 == 2)
    {
      WTF::StringImpl::~StringImpl(v327, v315, v316, v317, v318, v319, v320, v321);
      WTF::fastFree(v351, v352, v353, v354, v355, v356, v357, v358);
    }
    else
    {
      *(_DWORD *)v327 -= 2;
    }
  }
  WTF::Vector<JSC::SamplingProfiler::StackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 48, 0, v316, v317, v318, v319, v320, v321);
  v335 = *((_QWORD *)this + 13);
  if (v335)
  {
    *((_QWORD *)this + 13) = 0;
    WTF::fastFree(v335 - 16, v328, v329, v330, v331, v332, v333, v334);
  }
  if (*((_DWORD *)this + 18))
  {
    v336 = *((unsigned int *)this + 19);
    if ((_DWORD)v336)
    {
      v337 = v336 << 6;
      v338 = *((_QWORD *)this + 8) + 48;
      do
      {
        v338 = WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v338, v328, v329, v330, v331, v332, v333, v334)+ 64;
        v337 -= 64;
      }
      while (v337);
      *((_DWORD *)this + 19) = 0;
    }
    v339 = *((_QWORD *)this + 8);
    if (v339)
    {
      *((_QWORD *)this + 8) = 0;
      *((_DWORD *)this + 18) = 0;
      WTF::fastFree(v339, v328, v329, v330, v331, v332, v333, v334);
    }
  }
  *a9 = v366;
  if (*(_DWORD *)v51 == 1)
    WTF::JSONImpl::Value::operator delete(v51, (WTF::AtomStringImpl *)v328, v329, v330, v331, v332, v333, v334);
  else
    --*(_DWORD *)v51;
  v340 = __ldxr(v368);
  if (v340 != 1)
  {
    __clrex();
    goto LABEL_318;
  }
  if (__stlxr(0, v368))
LABEL_318:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v368, 0, v329, v330, v331, v332, v333, v334);
  v341 = *(_DWORD *)(v369 + 916) - 1;
  *(_DWORD *)(v369 + 916) = v341;
  if (*(unsigned __int8 *)(v369 + 1198) | HIBYTE(dword_1ECF4C5CE))
    v342 = v341 == 0;
  else
    v342 = 0;
  if (v342)
  {
    *(_BYTE *)(v369 + 1198) = 0;
    JSC::Heap::collectIfNecessaryOrDefer(v369 + 192, 0);
  }
}

void JSC::SamplingProfiler::registerForReportAtExit(JSC::SamplingProfiler *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  JSC::SamplingProfiler **v18;
  JSC::SamplingProfiler *v19;
  JSC::SamplingProfiler **v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;

  if (__ldaxr(_MergedGlobals_48))
  {
    __clrex();
  }
  else if (!__stxr(1u, _MergedGlobals_48))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)_MergedGlobals_48);
LABEL_5:
  v10 = (uint64_t *)qword_1ECF58F70;
  if (!qword_1ECF58F70)
  {
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v11 = 0;
    qword_1ECF58F70 = (uint64_t)v11;
    atexit((void (*)(void))JSC::SamplingProfiler::registerForReportAtExit(void)::$_0::__invoke);
    v10 = (uint64_t *)qword_1ECF58F70;
  }
  v12 = *v10;
  if (*v10
    || (WTF::HashTable<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>,WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>>,WTF::HashTraits<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>>,WTF::HashTraits<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>>>::rehash(v10, 8uLL, 0, a4, a5, a6, a7, a8), (v12 = *v10) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = (JSC::SamplingProfiler **)(v12 + 8 * v17);
  v19 = *v18;
  if (!*v18)
  {
LABEL_18:
    *v18 = this;
    v22 = *v10;
    if (*v10)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v34 = *v10;
    if (*v10)
      v35 = *(_DWORD *)(v34 - 12);
    else
      v35 = 0;
    v36 = (*(_DWORD *)(v34 - 16) + v35);
    v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 > 2 * v36)
        goto LABEL_35;
    }
    else
    {
      if (3 * v37 > 4 * v36)
        goto LABEL_35;
      if (!(_DWORD)v37)
      {
        v38 = 8;
        goto LABEL_34;
      }
    }
    v38 = ((_DWORD)v37 << (6 * *(_DWORD *)(v34 - 12) >= (2 * v37)));
LABEL_34:
    WTF::HashTable<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>,WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>>,WTF::HashTraits<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>>,WTF::HashTraits<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>>>::rehash(v10, v38, (uint64_t)v18, a4, a5, a6, a7, a8);
    goto LABEL_35;
  }
  v20 = 0;
  v21 = 1;
  while (v19 != this)
  {
    if (v19 == (JSC::SamplingProfiler *)-1)
      v20 = v18;
    v17 = (v17 + v21) & v13;
    v18 = (JSC::SamplingProfiler **)(v12 + 8 * v17);
    v19 = *v18;
    ++v21;
    if (!*v18)
    {
      if (v20)
      {
        *v20 = 0;
        --*(_DWORD *)(*v10 - 16);
        v18 = v20;
      }
      goto LABEL_18;
    }
  }
  if (this)
  {
    do
    {
      v24 = __ldaxr((unsigned int *)this);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)this));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)this);
      JSC::SamplingProfiler::~SamplingProfiler(this, a2, (uint64_t)v18, a4, a5, a6, a7, a8);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
  }
LABEL_35:
  *((_BYTE *)this + 7) = 1;
  v39 = __ldxr(_MergedGlobals_48);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, _MergedGlobals_48))
LABEL_39:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(_MergedGlobals_48, 0, (uint64_t)v18, a4, a5, a6, a7, a8);
}

void JSC::SamplingProfiler::reportDataToOptionFile(JSC::SamplingProfiler *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  WTF::PrintStream *v10;
  WTF *v11;
  size_t v12;
  unint64_t v13;
  const char *v14;
  FILE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  FILE *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[8];
  void (**v46)(WTF::StringPrintStream *__hidden);
  WTF *v47;
  __int128 v48;
  _BYTE v49[128];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 7))
    return;
  *((_BYTE *)this + 7) = 0;
  JSC::JSLockHolder::JSLockHolder((JSC::JSLockHolder *)v45, *((JSC::VM **)this + 1), a4, a5, a6, a7, a8, a9, a2);
  v46 = off_1E3572250;
  v47 = (WTF *)v49;
  v48 = xmmword_199122F80;
  v49[0] = 0;
  WTF::PrintStream::printf((WTF::PrintStream *)&v46, "%s", (const char *)qword_1ECF4C5F8);
  WTF::PrintStream::printf((WTF::PrintStream *)&v46, "%s", "/");
  v46[5]((WTF::StringPrintStream *)&v46);
  v10 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v46[4])(&v46);
  WTF::PrintStream::printf(v10, "%s", "JSCSampilingProfile-");
  WTF::PrintStream::printf(v10, "%lu", this);
  WTF::PrintStream::printf(v10, "%s", ".txt");
  v46[5]((WTF::StringPrintStream *)&v46);
  v11 = v47;
  if (v47)
  {
    v12 = v48;
    if ((unint64_t)v48 > 0xFFFFFFFFFFFFFFEELL)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA5B5CLL);
    }
    v13 = WTF::fastMalloc((WTF *)(v48 + 17));
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = v12;
    memcpy((void *)(v13 + 16), v11, v12);
    *(_BYTE *)(v13 + 16 + v12) = 0;
  }
  else
  {
    v13 = 0;
  }
  if (v13)
    v14 = (const char *)(v13 + 16);
  else
    v14 = 0;
  v15 = fopen(v14, "w");
  if (v15)
  {
    v23 = v15;
    v24 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v24 = off_1E3571C18;
    *(_QWORD *)(v24 + 8) = v23;
    *(_DWORD *)(v24 + 16) = 0;
    if (!v13)
      goto LABEL_15;
LABEL_13:
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree(v13, v16, v17, v18, v19, v20, v21, v22);
    else
      --*(_DWORD *)v13;
    goto LABEL_15;
  }
  v24 = 0;
  if (v13)
    goto LABEL_13;
LABEL_15:
  JSC::SamplingProfiler::reportTopFunctions(this, (WTF::PrintStream *)v24, v17, v18, v19, v20, v21, v22);
  JSC::SamplingProfiler::reportTopBytecodes(this, (WTF::PrintStream *)v24, v25, v26, v27, v28, v29, v30);
  if (*(_DWORD *)(v24 + 16) != 1)
    fclose(*(FILE **)(v24 + 8));
  WTF::fastFree(v24, v31, v32, v33, v34, v35, v36, v37);
  if (v47 != (WTF *)v49)
    WTF::fastFree((unint64_t)v47, v38, v39, v40, v41, v42, v43, v44);
  JSC::JSLockHolder::~JSLockHolder((JSC::JSLockHolder *)v45);
}

void JSC::SamplingProfiler::reportTopFunctions(JSC::SamplingProfiler *this, WTF::PrintStream *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v11;
  JSC::MarkedSpace *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::AtomStringImpl *v27;
  const WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  uint64_t v52;
  WTF::AtomStringImpl *v53;
  WTF *v54;
  _BOOL4 v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  int v60;
  int v61;
  unsigned int v62;
  BOOL v63;
  BOOL v64;
  int v65;
  BOOL v66;
  int v67;
  int v68;
  char v69;
  unsigned int v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  BOOL v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  WTF::PrintStream *v134;
  WTF::PrintStream *v135;
  WTF::PrintStream *v136;
  unint64_t i;
  uint64_t v138;
  WTF::StringImpl **v139;
  WTF::StringImpl **v140;
  uint64_t v141;
  WTF::StringImpl **v142;
  WTF *v143;
  WTF::StringImpl *v144;
  WTF *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl **v147;
  unint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  WTF::PrintStream *v157;
  WTF::PrintStream *v158;
  const WTF::String *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  float v166;
  WTF::StringImpl *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  WTF::StringImpl **v186;
  WTF::StringImpl *v187;
  unint64_t v188;
  void *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  unint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v206;
  unsigned __int8 *v207;
  JSC::SamplingProfiler *v208;
  int v209;
  WTF::StringImpl *v210;
  WTF::StringImpl **v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF *v214;
  __int128 v215;
  _BYTE v216[128];
  uint64_t v217;

  v217 = *MEMORY[0x1E0C80C00];
  v9 = (unsigned __int8 *)this + 4;
  if (__ldaxr((unsigned __int8 *)this + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_5:
  v11 = *((_QWORD *)this + 1);
  ++*(_DWORD *)(v11 + 916);
  v206 = v11;
  v207 = v9;
  v12 = (JSC::MarkedSpace *)(v11 + 352);
  JSC::MarkedSpace::willStartIterating((JSC::MarkedSpace *)(v11 + 352), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  JSC::SamplingProfiler::processUnverifiedStackTraces(this, v13, v14, v15, v16, v17, v18, v19);
  JSC::MarkedSpace::didFinishIterating(v12, v20, v21, v22, v23, v24, v25, v26);
  v211 = 0;
  v34 = *((unsigned int *)this + 15);
  v208 = this;
  v35 = 0;
  if ((_DWORD)v34)
  {
    v36 = *((_QWORD *)this + 6);
    v37 = v36 + 32 * v34;
    while (!*(_DWORD *)(v36 + 28))
    {
LABEL_62:
      v36 += 32;
      if (v36 == v37)
        goto LABEL_86;
    }
    v38 = *(_QWORD *)(v36 + 16);
    WTF::StringImpl::s_emptyAtomString += 2;
    v39 = *(_DWORD *)(v38 + 84);
    if (v39)
    {
      v213 = (WTF::StringImpl *)off_1E3572250;
      v214 = (WTF *)v216;
      v215 = xmmword_199122F80;
      v216[0] = 0;
      v40 = WTF::integerToSixCharacterHashString::table[(v39 / 0xF04 - 62 * ((69273667 * (unint64_t)(v39 / 0xF04)) >> 32))];
      v41 = WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v39 / 0x3A2F8 - 62 * ((unsigned __int16)((16913 * (v39 / 0x3A2F8)) >> 16) >> 4))];
      v42 = WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v39 / 0xE17810 - 62 * ((1058 * (v39 / 0xE17810)) >> 16))];
      v43 = WTF::integerToSixCharacterHashString::table[v39 / 0x369B13E0uLL];
      WORD2(v212) = (((unint64_t)WTF::integerToSixCharacterHashString::table[v39 % 0x3E] << 40) | ((unint64_t)WTF::integerToSixCharacterHashString::table[v39 / 0x3E - 62 * (((138547333 * (unint64_t)(v39 / 0x3E)) >> 32) >> 1)] << 32)) >> 32;
      LODWORD(v212) = (v41 << 16) | (v40 << 24) | (v42 << 8) | v43;
      WTF::PrintStream::printf((WTF::PrintStream *)&v213, "%.*s", 6, (const char *)&v212);
      (*((void (**)(WTF::StringImpl **))v213 + 5))(&v213);
      if (v214)
      {
        WTF::fromUTF8Impl<false>((unint64_t)v214, v215, (uint64_t *)&v212);
        v52 = (uint64_t)v212;
      }
      else
      {
        v52 = 0;
      }
      v212 = 0;
      if (WTF::StringImpl::s_emptyAtomString == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, v44, v45, v46, v47, v48, v49, v50);
        WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
        v124 = v212;
        v212 = 0;
        if (v124)
        {
          if (*(_DWORD *)v124 == 2)
          {
            WTF::StringImpl::~StringImpl(v124, v44, v45, v46, v47, v48, v49, v50);
            WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
          }
          else
          {
            *(_DWORD *)v124 -= 2;
          }
        }
      }
      else
      {
        WTF::StringImpl::s_emptyAtomString -= 2;
      }
      v54 = v214;
      if (v214 != (WTF *)v216)
        goto LABEL_17;
    }
    else
    {
      v52 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v52 = 0x500000002;
      *(_QWORD *)(v52 + 8) = "<nil>";
      *(_DWORD *)(v52 + 16) = 4;
      if (WTF::StringImpl::s_emptyAtomString == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, v53, v45, v46, v47, v48, v49, v50);
LABEL_17:
        WTF::fastFree((unint64_t)v54, v44, v45, v46, v47, v48, v49, v50);
        goto LABEL_18;
      }
      WTF::StringImpl::s_emptyAtomString -= 2;
    }
LABEL_18:
    if ((*(_DWORD *)v38 - 1) < 5)
      goto LABEL_19;
    if (*(_DWORD *)v38)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA65ACLL);
    }
    v80 = *(_QWORD *)(v38 + 16);
    if (*(_BYTE *)(v80 + 5) == 8)
    {
LABEL_19:
      v55 = byte_1ECF4C5F4 == 0;
    }
    else
    {
      v81 = *(_QWORD *)(v80 + 40);
      if (!v81)
      {
        v55 = byte_1ECF4C5F4 == 0;
        v57 = -2;
        v56 = 1;
LABEL_21:
        if (v55)
          v58 = v56;
        else
          v58 = v57;
        JSC::SamplingProfiler::StackFrame::displayName((JSC::SamplingProfiler::StackFrame *)v38, *((JSC::VM **)v208 + 1), v45, v46, v47, v48, v49, v50, (uint64_t *)&v210, v51);
        if (v52)
          *(_DWORD *)v52 += 2;
        if (v210)
        {
          v59 = *((_DWORD *)v210 + 1);
          if (v52)
          {
LABEL_28:
            v60 = *(_DWORD *)(v52 + 4);
            goto LABEL_29;
          }
        }
        else
        {
          v59 = 0;
          if (v52)
            goto LABEL_28;
        }
        v60 = 0;
LABEL_29:
        v61 = 0;
        v62 = v58;
        do
        {
          ++v61;
          v63 = v62 > 9;
          v62 /= 0xAu;
        }
        while (v63);
        if (v61 < 0)
          goto LABEL_85;
        v64 = __OFADD__(v61, 1);
        v65 = v61 + 1;
        v66 = v64;
        if (v60 < 0
          || v66
          || (v64 = __OFADD__(v60, v65), v67 = v60 + v65, v64)
          || ((v64 = __OFADD__(v67, 1), v68 = v67 + 1, !v64) ? (v69 = 0) : (v69 = 1),
              v59 < 0 || (v69 & 1) != 0 || (v70 = v59 + v68, __OFADD__(v59, v68))))
        {
LABEL_85:
          __break(0xC471u);
          JUMPOUT(0x198BA611CLL);
        }
        if (!v210 || (*((_BYTE *)v210 + 16) & 4) != 0)
        {
          if (!v52)
          {
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v212, v70, 1, (uint64_t)v210, 0, v58);
            if (!v212)
              goto LABEL_85;
            goto LABEL_53;
          }
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v212, v70, (*(_BYTE *)(v52 + 16) & 4) != 0, (uint64_t)v210, v52, v58);
          if (!v212)
            goto LABEL_85;
        }
        else
        {
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>((uint64_t)&v212, v70, 0, (uint64_t)v210, v52, v58);
          if (!v212)
            goto LABEL_85;
          if (!v52)
            goto LABEL_53;
        }
        if (*(_DWORD *)v52 == 2)
        {
          WTF::StringImpl::~StringImpl((WTF::StringImpl *)v52, v71, v72, v73, v74, v75, v76, v77);
          WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
        }
        else
        {
          *(_DWORD *)v52 -= 2;
        }
LABEL_53:
        v78 = v210;
        v210 = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2)
          {
            WTF::StringImpl::~StringImpl(v78, v71, v72, v73, v74, v75, v76, v77);
            WTF::fastFree(v92, v93, v94, v95, v96, v97, v98, v99);
          }
          else
          {
            *(_DWORD *)v78 -= 2;
          }
        }
        v209 = 0;
        WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<int>((uint64_t)&v213, (uint64_t *)&v211, &v212, &v209, v74, v75, v76, v77);
        v79 = v212;
        ++*((_QWORD *)v213 + 1);
        if (v79)
        {
          if (*(_DWORD *)v79 == 2)
          {
            WTF::StringImpl::~StringImpl(v79, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
            WTF::fastFree(v100, v101, v102, v103, v104, v105, v106, v107);
          }
          else
          {
            *(_DWORD *)v79 -= 2;
          }
        }
        ++v35;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
          {
            WTF::StringImpl::~StringImpl((WTF::StringImpl *)v52, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
            WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
          }
          else
          {
            *(_DWORD *)v52 -= 2;
          }
        }
        goto LABEL_62;
      }
      v56 = *(_DWORD *)(v81 + 112);
      if (!v56)
      {
        do
          v82 = __ldaxr((unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID);
        while (__stlxr(v82 + 1, (unsigned int *)&JSC::SourceProvider::getID(void)::nextProviderID));
        v83 = __CFADD__(v82, 1);
        v56 = v82 + 1;
        *(_DWORD *)(v81 + 112) = v56;
        if (v83)
        {
          __break(0xC471u);
          JUMPOUT(0x198BA658CLL);
        }
      }
      v55 = byte_1ECF4C5F4 == 0;
      if (v56 != -1)
      {
        v57 = -2;
        goto LABEL_21;
      }
    }
    v56 = -1;
    v57 = -1;
    goto LABEL_21;
  }
LABEL_86:
  if ((_DWORD)qword_1ECF4C5EC)
  {
    v133 = *((double *)v208 + 10) * 1000.0 * 1000.0;
    v134 = a2;
    v135 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v135, "%s", "\n\nSampling rate: ");
    WTF::PrintStream::printf(v135, "%lf", v133);
    WTF::PrintStream::printf(v135, "%s", " microseconds. Total samples: ");
    WTF::PrintStream::printf(v135, "%lu", v35);
    WTF::PrintStream::printf(v135, "%s", "\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v134 + 40))(v134);
    v136 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v134 + 32))(v134);
    WTF::PrintStream::printf(v136, "%s", "Top functions as <numSamples  'functionName#hash:sourceID'>");
    WTF::PrintStream::printf(v136, "%s", "\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v134 + 40))(v134);
    if ((_DWORD)qword_1ECF4C5EC)
    {
      for (i = 0; i < qword_1ECF4C5EC; ++i)
      {
        v212 = 0;
        if (v211)
        {
          v138 = *((unsigned int *)v211 - 1);
          v139 = &v211[2 * v138];
          if (*((_DWORD *)v211 - 3))
          {
            v140 = v211;
            if ((_DWORD)v138)
            {
              v141 = 16 * v138;
              v140 = v211;
              while ((unint64_t)*v140 + 1 <= 1)
              {
                v140 += 2;
                v141 -= 16;
                if (!v141)
                {
                  v140 = v139;
                  goto LABEL_96;
                }
              }
            }
            goto LABEL_96;
          }
          v140 = &v211[2 * v138];
        }
        else
        {
          v140 = 0;
          v138 = 0;
        }
        v139 = &v211[2 * v138];
        if (!v211)
        {
          v142 = 0;
          goto LABEL_101;
        }
LABEL_96:
        v142 = &v211[2 * *((unsigned int *)v211 - 1)];
LABEL_101:
        if (v142 == v140)
          break;
        v143 = 0;
        v144 = 0;
        do
        {
          v145 = v140[1];
          if (v145 > v143)
          {
            v146 = *v140;
            if (*v140)
              *(_DWORD *)v146 += 2;
            v212 = v146;
            if (v144)
            {
              if (*(_DWORD *)v144 == 2)
              {
                WTF::StringImpl::~StringImpl(v144, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
                WTF::fastFree(v148, v149, v150, v151, v152, v153, v154, v155);
              }
              else
              {
                *(_DWORD *)v144 -= 2;
              }
            }
            v144 = v146;
            v143 = v145;
          }
          v147 = v140 + 2;
          v140 = v139;
          if (v147 != v139)
          {
            v140 = v147;
            while ((unint64_t)*v140 + 1 <= 1)
            {
              v140 += 2;
              if (v140 == v139)
              {
                v140 = v139;
                break;
              }
            }
          }
        }
        while (v140 != v142);
        if (!v144)
          break;
        if (*((_DWORD *)v144 + 1))
        {
          WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::remove((uint64_t *)&v211, &v212, v28, v29, v30, v31, v32, v33);
          v144 = v212;
          if (!v212)
            break;
        }
        v156 = *(_DWORD *)v144;
        *(_DWORD *)v144 += 2;
        v213 = v144;
        v214 = v143;
        v212 = 0;
        if (v156)
        {
          *(_DWORD *)v144 = v156;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v144, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
          WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
          v144 = v213;
          if (!v213)
            break;
        }
        if (!*((_DWORD *)v144 + 1))
        {
          v213 = 0;
          if (*(_DWORD *)v144 == 2)
          {
            WTF::StringImpl::~StringImpl(v144, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
            WTF::fastFree(v197, v198, v199, v200, v201, v202, v203, v204);
          }
          else
          {
            *(_DWORD *)v144 -= 2;
          }
          break;
        }
        v157 = a2;
        WTF::PrintStream::printf(a2, "%6zu ", (size_t)v214);
        v158 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v157 + 32))(v157);
        WTF::PrintStream::printf(v158, "%s", "   '");
        WTF::printInternal(v158, (WTF::PrintStream *)&v213, v159, v160, v161, v162, v163, v164, v165, v166);
        WTF::PrintStream::printf(v158, "%s", "'");
        WTF::PrintStream::printf(v158, "%s", "\n");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v157 + 40))(v157);
        v167 = v213;
        v213 = 0;
        if (v167)
        {
          if (*(_DWORD *)v167 == 2)
          {
            WTF::StringImpl::~StringImpl(v167, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
            WTF::fastFree(v176, v177, v178, v179, v180, v181, v182, v183);
          }
          else
          {
            *(_DWORD *)v167 -= 2;
          }
        }
      }
    }
  }
  v184 = (uint64_t)v211;
  if (v211)
  {
    v185 = *((unsigned int *)v211 - 1);
    if ((_DWORD)v185)
    {
      v186 = v211;
      do
      {
        v187 = *v186;
        if (*v186 != (WTF::StringImpl *)-1)
        {
          *v186 = 0;
          if (v187)
          {
            if (*(_DWORD *)v187 == 2)
            {
              WTF::StringImpl::~StringImpl(v187, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
              WTF::fastFree(v188, v189, v190, v191, v192, v193, v194, v195);
            }
            else
            {
              *(_DWORD *)v187 -= 2;
            }
          }
        }
        v186 += 2;
        --v185;
      }
      while (v185);
    }
    WTF::fastFree(v184 - 16, v27, (uint64_t)v28, v29, v30, v31, v32, v33);
  }
  --*(_DWORD *)(v206 + 916);
  v196 = __ldxr(v207);
  if (v196 != 1)
  {
    __clrex();
    goto LABEL_149;
  }
  if (__stlxr(0, v207))
LABEL_149:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v207, 0, (uint64_t)v28, v29, v30, v31, v32, v33);
}

void JSC::SamplingProfiler::reportTopBytecodes(JSC::SamplingProfiler *this, WTF::PrintStream *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::SamplingProfiler *v9;
  unsigned __int8 *v10;
  uint64_t v12;
  JSC::MarkedSpace *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::AtomStringImpl *v28;
  const WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int8x16_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  JSC::CodeBlock *v54;
  int *v55;
  _OWORD *v56;
  size_t v57;
  _BYTE *v58;
  size_t v59;
  uint64_t v60;
  int v61;
  WTF::StringImpl *v62;
  int v63;
  BOOL v64;
  int v65;
  int v66;
  char v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  _BOOL4 v71;
  uint64_t v72;
  int *v73;
  _WORD *v74;
  int8x16_t *v75;
  uint64_t v76;
  uint64_t v77;
  _WORD *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  __int16 v82;
  int *v83;
  WTF::StringImpl *v84;
  _BYTE *v85;
  unint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  _BYTE *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  int v109;
  const char *v110;
  unint64_t v111;
  char **v112;
  char *v113;
  char *v114;
  __int16 v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  WTF::StringImpl *v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  int8x16_t v171;
  int8x16_t v172;
  char *v173;
  char *v174;
  char *v175;
  unint64_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  int8x16_t v185;
  int8x16_t v186;
  char *v187;
  char *v188;
  char *v189;
  unsigned __int128 *v190;
  unsigned __int128 *v191;
  unsigned __int128 v192;
  unsigned __int128 *v193;
  unsigned __int128 *v194;
  unsigned __int128 v195;
  char v196;
  char v197;
  double v198;
  WTF::PrintStream *v199;
  WTF::PrintStream *v200;
  WTF::PrintStream *v201;
  WTF::PrintStream *v202;
  uint64_t v203;
  WTF::AtomStringImpl *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  WTF::AtomStringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  WTF::AtomStringImpl *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  WTF::AtomStringImpl *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  WTF::AtomStringImpl *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  WTF::AtomStringImpl *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  WTF::AtomStringImpl *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  WTF::AtomStringImpl *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  WTF::AtomStringImpl *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  uint64_t v284;
  WTF::AtomStringImpl *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  WTF::AtomStringImpl *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  WTF::AtomStringImpl *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  WTF::AtomStringImpl *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  WTF::AtomStringImpl *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  WTF::AtomStringImpl *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  const WTF::StringImpl *v339;
  WTF::AtomStringImpl *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  WTF::StringImpl *v347;
  uint64_t v348;
  const WTF::StringImpl *v349;
  WTF::AtomStringImpl *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  WTF::StringImpl *v357;
  uint64_t v358;
  const WTF::StringImpl *v359;
  WTF::AtomStringImpl *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  WTF::StringImpl *v367;
  uint64_t v368;
  const WTF::StringImpl *v369;
  WTF::AtomStringImpl *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  WTF::StringImpl *v377;
  uint64_t v378;
  const WTF::StringImpl *v379;
  WTF::AtomStringImpl *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  WTF::StringImpl *v387;
  uint64_t v388;
  const WTF::StringImpl *v389;
  WTF::AtomStringImpl *v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  WTF::StringImpl *v397;
  uint64_t v398;
  const WTF::StringImpl *v399;
  WTF::AtomStringImpl *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  WTF::StringImpl *v407;
  uint64_t v408;
  const WTF::StringImpl *v409;
  WTF::AtomStringImpl *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  WTF::StringImpl *v417;
  uint64_t v418;
  const WTF::StringImpl *v419;
  WTF::AtomStringImpl *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  WTF::StringImpl *v427;
  uint64_t v428;
  const WTF::StringImpl *v429;
  WTF::AtomStringImpl *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  WTF::StringImpl *v437;
  uint64_t v438;
  const WTF::StringImpl *v439;
  WTF::AtomStringImpl *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  WTF::StringImpl *v447;
  uint64_t v448;
  const WTF::StringImpl *v449;
  WTF::AtomStringImpl *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  WTF::StringImpl *v457;
  uint64_t v458;
  const WTF::StringImpl *v459;
  WTF::AtomStringImpl *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  WTF::StringImpl *v467;
  uint64_t v468;
  const WTF::StringImpl *v469;
  WTF::AtomStringImpl *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  WTF::StringImpl *v477;
  uint64_t v478;
  const WTF::StringImpl *v479;
  WTF::AtomStringImpl *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  WTF::StringImpl *v487;
  WTF::PrintStream *v488;
  WTF::PrintStream *v489;
  WTF::PrintStream *v490;
  unint64_t i;
  uint64_t v492;
  WTF::StringImpl **v493;
  WTF::StringImpl **v494;
  uint64_t v495;
  WTF::StringImpl **v496;
  WTF::StringImpl *v497;
  WTF::StringImpl *v498;
  WTF::StringImpl *v499;
  WTF::StringImpl *v500;
  WTF::StringImpl **v501;
  unint64_t v502;
  void *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  int v510;
  WTF::PrintStream *v511;
  WTF::PrintStream *v512;
  const WTF::String *v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  double v519;
  float v520;
  WTF::StringImpl *v521;
  unint64_t v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  void *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  void *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unint64_t v546;
  void *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  void *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  void *v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  void *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unint64_t v578;
  void *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  unint64_t v586;
  void *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  unint64_t v594;
  void *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  void *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unint64_t v610;
  void *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  unint64_t v618;
  void *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  void *v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  unint64_t v634;
  void *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  unint64_t v642;
  void *v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  void *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  unint64_t v658;
  void *v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  unint64_t v666;
  void *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  void *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  void *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unint64_t v690;
  void *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  void *v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t v706;
  void *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  void *v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  unint64_t v722;
  void *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  unint64_t v730;
  void *v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  unint64_t v738;
  void *v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  unint64_t v746;
  void *v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  unint64_t v754;
  void *v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t v762;
  void *v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  void *v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  WTF::StringImpl **v780;
  WTF::StringImpl *v781;
  unint64_t v782;
  void *v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  WTF::StringImpl **v792;
  WTF::StringImpl *v793;
  unint64_t v794;
  void *v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  int v802;
  unint64_t v803;
  void *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  unsigned __int8 *v812;
  WTF::StringImpl *v814;
  uint64_t v815;
  JSC::SamplingProfiler *v816;
  unint64_t v817;
  uint64_t v818;
  uint64_t *v819[4];
  unsigned int v820;
  __int128 v821;
  int v822;
  WTF::StringImpl *v823;
  __int128 v824;
  int v825;
  WTF::StringImpl *v826;
  WTF::StringImpl *v827;
  WTF::StringImpl **v828;
  WTF::StringImpl **v829;
  uint64_t v830;
  WTF::StringImpl *v831;
  WTF::StringImpl *v832;
  WTF::StringImpl *v833;
  WTF::StringImpl *v834;
  WTF::StringImpl *v835;
  WTF::StringImpl *v836;
  WTF::StringImpl *v837;
  WTF::StringImpl *v838;
  WTF::StringImpl *v839;
  WTF::StringImpl *v840;
  WTF::StringImpl *v841;
  WTF::StringImpl *v842;
  int *v843;
  WTF::StringImpl *v844;
  __int128 v845;
  uint64_t v846;
  uint64_t v847;
  int8x16x2_t v848;
  int8x16x2_t v849;
  int8x16x2_t v850;
  int8x16x2_t v851;
  int8x16x2_t v852;
  int8x16x2_t v853;
  int8x16x2_t v854;
  int8x16x2_t v855;

  v9 = this;
  v847 = *MEMORY[0x1E0C80C00];
  v10 = (unsigned __int8 *)this + 4;
  if (__ldaxr((unsigned __int8 *)this + 4))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_5:
  v12 = *((_QWORD *)v9 + 1);
  ++*(_DWORD *)(v12 + 916);
  v811 = v12;
  v812 = v10;
  v13 = (JSC::MarkedSpace *)(v12 + 352);
  JSC::MarkedSpace::willStartIterating((JSC::MarkedSpace *)(v12 + 352), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  JSC::SamplingProfiler::processUnverifiedStackTraces(v9, v14, v15, v16, v17, v18, v19, v20);
  JSC::MarkedSpace::didFinishIterating(v13, v21, v22, v23, v24, v25, v26, v27);
  v829 = 0;
  v830 = 0;
  v828 = 0;
  v36 = *((unsigned int *)v9 + 15);
  if ((_DWORD)v36)
  {
    v37 = *((_QWORD *)v9 + 6);
    v38 = v37 + 32 * v36;
    v815 = v38;
    v816 = v9;
    while (!*(_DWORD *)(v37 + 28))
    {
LABEL_133:
      v37 += 32;
      if (v37 == v38)
        goto LABEL_177;
    }
    v39 = *(_QWORD *)(v37 + 16);
    JSC::SamplingProfiler::StackFrame::displayName((JSC::SamplingProfiler::StackFrame *)v39, *((JSC::VM **)v9 + 1), (uint64_t)v29, v30, v31, v32, v33, v34, (uint64_t *)&v827, v35);
    v824 = *(_OWORD *)(v39 + 72);
    v825 = *(_DWORD *)(v39 + 88);
    v8 = v8 & 0xFFFFFFFFFFFF0000 | *(unsigned __int16 *)(v39 + 64);
    JSC::descriptionForLocation((uint64_t *)&v826, (uint64_t)&v824, v8, *(_DWORD *)(v39 + 68));
    if (v827)
      v40 = *((_DWORD *)v827 + 1);
    else
      v40 = 0;
    if (v826)
      v41 = *((_DWORD *)v826 + 1);
    else
      v41 = 0;
    if ((v41 | v40) < 0 || (v42 = (v40 + v41), __OFADD__(v40, v41)))
    {
      v843 = 0;
LABEL_393:
      __break(0xC471u);
      JUMPOUT(0x198BA7EB4);
    }
    if (v827)
    {
      v43 = *((_DWORD *)v827 + 4);
      v44 = (v43 >> 2) & 1;
      if (v826 && (v43 & 4) != 0)
        goto LABEL_17;
    }
    else
    {
      if (v826)
      {
LABEL_17:
        v44 = (*((unsigned __int8 *)v826 + 16) >> 2) & 1;
        goto LABEL_18;
      }
      v44 = 1;
    }
LABEL_18:
    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v42, v44, (uint64_t)v827, (uint64_t)v826, &v843);
    if (!v843)
      goto LABEL_393;
    v52 = v826;
    v826 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 2)
      {
        WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v86, v87, v88, v89, v90, v91, v92, v93);
      }
      else
      {
        *(_DWORD *)v52 -= 2;
      }
    }
    v53 = v827;
    v827 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
      {
        WTF::StringImpl::~StringImpl(v53, v45, v46, v47, v48, v49, v50, v51);
        WTF::fastFree(v94, v95, v96, v97, v98, v99, v100, v101);
      }
      else
      {
        *(_DWORD *)v53 -= 2;
      }
    }
    v845 = *(_OWORD *)(v39 + 96);
    v846 = *(_QWORD *)(v39 + 112);
    if (!*(_BYTE *)(v39 + 128))
      goto LABEL_104;
    v54 = *(JSC::CodeBlock **)(v39 + 120);
    v55 = v843;
    if (v843)
      *v843 += 2;
    JSC::CodeBlock::inferredName(v54);
    if (v842)
      v56 = (_OWORD *)((char *)v842 + 16);
    else
      v56 = 0;
    if (v842)
      v57 = strlen((const char *)v842 + 16);
    else
      v57 = 0;
    v821 = v845;
    v822 = v846;
    JSC::descriptionForLocation((uint64_t *)&v823, (uint64_t)&v821, 0, -1);
    if (v57 >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x198BA7D48);
    }
    v817 = v8;
    if (v55)
      v61 = v55[1];
    else
      v61 = 0;
    v62 = v823;
    v818 &= 0xFFFFFFFFFFFF0000;
    if (v823)
      v63 = *((_DWORD *)v823 + 1);
    else
      v63 = 0;
    if (((v63 | v57) & 0x80000000) != 0
      || (v64 = __OFADD__((_DWORD)v57, v63), v65 = v57 + v63, v64)
      || ((v64 = __OFADD__(v65, 5), v66 = v65 + 5, !v64) ? (v67 = 0) : (v67 = 1),
          v61 < 0 || (v67 & 1) != 0 || (v68 = v61 + v66, __OFADD__(v61, v66))))
    {
LABEL_391:
      __break(0xC471u);
      JUMPOUT(0x198BA7EA8);
    }
    if (v55)
    {
      v69 = v55[4];
      if (!v823 || (v69 & 4) == 0)
      {
        v70 = v68;
        v71 = v68 == 0;
        if ((v69 & 4) != 0)
          goto LABEL_68;
        v72 = 1;
        goto LABEL_54;
      }
    }
    else if (!v823)
    {
      if (v68)
      {
        v83 = 0;
        v84 = 0;
        v70 = v68;
        goto LABEL_69;
      }
LABEL_160:
      v73 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_76;
    }
    v70 = v68;
    v71 = v68 == 0;
    v72 = (uint64_t)v55;
    if ((*((_BYTE *)v823 + 16) & 4) != 0)
    {
LABEL_68:
      v83 = v55;
      v84 = v823;
      if (!v71)
      {
LABEL_69:
        v814 = v84;
        if ((v68 & 0x80000000) != 0)
          goto LABEL_391;
        WTF::tryFastCompactMalloc((WTF *)(v70 + 20), &v844);
        v73 = (int *)v844;
        if (!v844)
          goto LABEL_391;
        v85 = (char *)v844 + 20;
        *(_DWORD *)v844 = 2;
        v73[1] = v68;
        *((_QWORD *)v73 + 1) = v73 + 5;
        v73[4] = 4;
        if (v83)
        {
          v58 = (_BYTE *)*((_QWORD *)v55 + 1);
          v59 = v55[1];
          if ((v55[4] & 4) != 0)
          {
            if ((_DWORD)v59 == 1)
            {
              *v85 = *v58;
            }
            else if ((_DWORD)v59)
            {
              memcpy(v73 + 5, v58, v59);
            }
          }
          else
          {
            if (v59 < 0x10)
            {
              v190 = (unsigned __int128 *)(v73 + 5);
            }
            else
            {
              v190 = (unsigned __int128 *)&v85[v59 & 0xFFFFFFF0];
              v191 = (unsigned __int128 *)(v73 + 5);
              do
              {
                v192 = (unsigned __int128)vld2q_s8(v58);
                v58 += 32;
                *v191++ = v192;
              }
              while (v191 != v190);
            }
            while (v190 != (unsigned __int128 *)&v85[v59])
            {
              v196 = *v58;
              v58 += 2;
              *(_BYTE *)v190 = v196;
              v190 = (unsigned __int128 *)((char *)v190 + 1);
            }
          }
          v102 = v55[1];
        }
        else
        {
          v102 = 0;
        }
        v103 = &v85[v102];
        v103[4] = 32;
        *(_DWORD *)v103 = 757939232;
        v104 = v103 + 5;
        if ((_DWORD)v57 == 1)
        {
          *v104 = *(_BYTE *)v56;
        }
        else if ((_DWORD)v57)
        {
          memcpy(v103 + 5, v56, v57);
        }
        if (v814)
        {
          v105 = &v104[v57];
          v58 = (_BYTE *)*((_QWORD *)v62 + 1);
          v59 = *((unsigned int *)v62 + 1);
          if ((*((_BYTE *)v62 + 16) & 4) != 0)
          {
            v38 = v815;
            v9 = v816;
            v8 = v817;
            if ((_DWORD)v59 == 1)
            {
              *v105 = *v58;
            }
            else if ((_DWORD)v59)
            {
              memcpy(v105, v58, v59);
            }
LABEL_92:
            v106 = (WTF::StringImpl *)v843;
            v843 = v73;
            if (v106)
            {
              if (*(_DWORD *)v106 == 2)
              {
                WTF::StringImpl::~StringImpl(v106, (WTF::AtomStringImpl *)v58, v59, v60, v48, v49, v50, v51);
                WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
              }
              else
              {
                *(_DWORD *)v106 -= 2;
              }
            }
            v107 = v823;
            v823 = 0;
            if (v107)
            {
              if (*(_DWORD *)v107 == 2)
              {
                WTF::StringImpl::~StringImpl(v107, (WTF::AtomStringImpl *)v58, v59, v60, v48, v49, v50, v51);
                WTF::fastFree(v124, v125, v126, v127, v128, v129, v130, v131);
              }
              else
              {
                *(_DWORD *)v107 -= 2;
              }
            }
            v108 = v842;
            v842 = 0;
            if (v108)
            {
              if (*(_DWORD *)v108 == 1)
              {
                WTF::fastFree((unint64_t)v108, v58, v59, v60, v48, v49, v50, v51);
                if (v55)
                {
LABEL_102:
                  if (*v55 == 2)
                  {
                    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v55, (WTF::AtomStringImpl *)v58, v59, v60, v48, v49, v50, v51);
                    WTF::fastFree(v132, v133, v134, v135, v136, v137, v138, v139);
                  }
                  else
                  {
                    *v55 -= 2;
                  }
                }
LABEL_104:
                LODWORD(v844) = 0;
                WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<int>((uint64_t)&v845, (uint64_t *)&v829, (WTF::StringImpl **)&v843, (int *)&v844, v48, v49, v50, v51);
                ++*(_QWORD *)(v845 + 8);
                v109 = 4;
                v110 = "Host";
                switch(*(_DWORD *)v39)
                {
                  case 0:
                    LODWORD(v111) = *(unsigned __int8 *)(v39 + 88) - 1;
                    if (v111 < 5)
                    {
                      v111 = (char)v111;
                      v109 = dword_199159370[(char)v111];
                      v112 = off_1E35ADDE0;
                      goto LABEL_112;
                    }
                    v109 = 18;
                    v110 = "Unknown Executable";
                    break;
                  case 1:
                    if (*(_BYTE *)(v39 + 65) && (v111 = *(char *)(v39 + 64), v111 < 6))
                    {
                      v109 = dword_199159384[v111];
                      v112 = off_1E35ADE08;
LABEL_112:
                      v110 = v112[v111];
                    }
                    else
                    {
                      v110 = "Wasm";
                    }
                    break;
                  case 2:
                    break;
                  case 3:
                    v109 = 6;
                    v110 = "RegExp";
                    break;
                  case 4:
                    v109 = 5;
                    v110 = "C/C++";
                    break;
                  default:
                    v109 = 13;
                    v110 = "Unknown Frame";
                    break;
                }
                v140 = WTF::fastCompactMalloc((WTF *)0x20);
                *(_DWORD *)v140 = 2;
                *(_DWORD *)(v140 + 4) = v109;
                *(_QWORD *)(v140 + 8) = v110;
                *(_DWORD *)(v140 + 16) = 4;
                v844 = (WTF::StringImpl *)v140;
                LODWORD(v842) = 0;
                WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<int>((uint64_t)&v845, (uint64_t *)&v828, &v844, (int *)&v842, v141, v142, v143, v144);
                v145 = v844;
                ++*(_QWORD *)(v845 + 8);
                if (v145)
                {
                  if (*(_DWORD *)v145 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v145, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
                    WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
                  }
                  else
                  {
                    *(_DWORD *)v145 -= 2;
                  }
                }
                if (!*(_DWORD *)v39)
                {
                  v147 = *(_QWORD *)(v39 + 16);
                  if (v147)
                  {
                    if (*(_BYTE *)(v147 + 5) == 12 && (*(_DWORD *)(*(_QWORD *)(v147 + 88) + 16) & 0x80000000) != 0)
                    {
                      v148 = WTF::fastCompactMalloc((WTF *)0x20);
                      *(_QWORD *)v148 = 0xA00000002;
                      *(_QWORD *)(v148 + 8) = "js builtin";
                      *(_DWORD *)(v148 + 16) = 4;
                      v844 = (WTF::StringImpl *)v148;
                      LODWORD(v842) = 0;
                      WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<int>((uint64_t)&v845, (uint64_t *)&v828, &v844, (int *)&v842, v149, v150, v151, v152);
                      v153 = v844;
                      ++*(_QWORD *)(v845 + 8);
                      if (v153)
                      {
                        if (*(_DWORD *)v153 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v153, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
                          WTF::fastFree(v176, v177, v178, v179, v180, v181, v182, v183);
                        }
                        else
                        {
                          *(_DWORD *)v153 -= 2;
                        }
                      }
                    }
                  }
                }
                ++v830;
                v146 = (WTF::StringImpl *)v843;
                v843 = 0;
                if (v146)
                {
                  if (*(_DWORD *)v146 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v146, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
                    WTF::fastFree(v162, v163, v164, v165, v166, v167, v168, v169);
                  }
                  else
                  {
                    *(_DWORD *)v146 -= 2;
                  }
                }
                goto LABEL_133;
              }
              --*(_DWORD *)v108;
            }
            if (v55)
              goto LABEL_102;
            goto LABEL_104;
          }
          if (v59 < 0x10)
          {
            v193 = (unsigned __int128 *)&v104[v57];
          }
          else
          {
            v193 = (unsigned __int128 *)&v105[v59 & 0xFFFFFFF0];
            v194 = (unsigned __int128 *)&v104[v57];
            do
            {
              v195 = (unsigned __int128)vld2q_s8(v58);
              v58 += 32;
              *v194++ = v195;
            }
            while (v194 != v193);
          }
          while (v193 != (unsigned __int128 *)&v105[v59])
          {
            v197 = *v58;
            v58 += 2;
            *(_BYTE *)v193 = v197;
            v193 = (unsigned __int128 *)((char *)v193 + 1);
          }
        }
LABEL_76:
        v38 = v815;
        v9 = v816;
        v8 = v817;
        goto LABEL_92;
      }
      goto LABEL_160;
    }
LABEL_54:
    if (!v71)
    {
      if (v68 > 0x7FFFFFEF)
        goto LABEL_391;
      WTF::tryFastCompactMalloc((WTF *)(2 * v70 + 20), &v844);
      v73 = (int *)v844;
      if (!v844)
        goto LABEL_391;
      v74 = (_WORD *)((char *)v844 + 20);
      *(_DWORD *)v844 = 2;
      v73[1] = v68;
      *((_QWORD *)v73 + 1) = v73 + 5;
      v73[4] = 0;
      if (v72)
      {
        v75 = (int8x16_t *)*((_QWORD *)v55 + 1);
        v76 = v55[1];
        if ((v55[4] & 4) != 0)
        {
          if (v76 >= 0x40)
          {
            v113 = (char *)&v74[v76 & 0xFFFFFFC0];
            v184 = (char *)(v73 + 5);
            do
            {
              v849.val[0] = *v75;
              v185 = v75[1];
              v851.val[0] = v75[2];
              v186 = v75[3];
              v75 += 4;
              v855.val[1] = 0u;
              v855.val[0] = v186;
              v851.val[1] = 0u;
              v853.val[0] = v185;
              v849.val[1] = 0u;
              v187 = v184;
              vst2q_s8(v187, v849);
              v187 += 32;
              v853.val[1] = 0u;
              vst2q_s8(v187, v853);
              v188 = v184 + 64;
              vst2q_s8(v188, v851);
              v189 = v184 + 96;
              vst2q_s8(v189, v855);
              v184 += 128;
            }
            while (v184 != v113);
          }
          else
          {
            v113 = (char *)(v73 + 5);
          }
          v114 = (char *)&v74[v76];
          while (v113 != v114)
          {
            v115 = v75->u8[0];
            v75 = (int8x16_t *)((char *)v75 + 1);
            *(_WORD *)v113 = v115;
            v113 += 2;
          }
        }
        else if ((_DWORD)v76 == 1)
        {
          *v74 = v75->i16[0];
        }
        else if ((_DWORD)v76)
        {
          memcpy(v73 + 5, v75, 2 * v76);
        }
        v77 = v55[1];
      }
      else
      {
        v77 = 0;
      }
      v78 = &v74[v77];
      *(_QWORD *)v78 = 0x2D002D003C0020;
      v78[4] = 32;
      v79 = (char *)(v78 + 5);
      if ((v57 & 0xFFFFFFC0) != 0)
      {
        v80 = (uint64_t)&v79[2 * (v57 & 0xFFFFFFC0)];
        v170 = v79;
        do
        {
          v848.val[0] = (int8x16_t)*v56;
          v171 = *((int8x16_t *)v56 + 1);
          v850.val[0] = (int8x16_t)v56[2];
          v172 = *((int8x16_t *)v56 + 3);
          v56 += 4;
          v852.val[0] = v172;
          v850.val[1] = 0u;
          v854.val[0] = v171;
          v848.val[1] = 0u;
          v173 = v170;
          vst2q_s8(v173, v848);
          v173 += 32;
          v852.val[1] = 0u;
          v854.val[1] = 0u;
          vst2q_s8(v173, v854);
          v174 = v170 + 64;
          vst2q_s8(v174, v850);
          v175 = v170 + 96;
          v170 += 128;
          vst2q_s8(v175, v852);
        }
        while (v170 != (char *)v80);
      }
      else
      {
        v80 = 10;
      }
      v81 = &v79[2 * v57];
      while ((char *)v80 != v81)
      {
        v82 = *(unsigned __int8 *)v56;
        v56 = (_OWORD *)((char *)v56 + 1);
        *(_WORD *)v80 = v82;
        v80 += 2;
      }
      WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>>(v81, (uint64_t)v62);
      goto LABEL_76;
    }
    goto LABEL_160;
  }
LABEL_177:
  if (HIDWORD(qword_1ECF4C5EC))
  {
    v198 = *((double *)v9 + 10) * 1000.0 * 1000.0;
    v199 = a2;
    v200 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v200, "%s", "\n\nSampling rate: ");
    WTF::PrintStream::printf(v200, "%lf", v198);
    WTF::PrintStream::printf(v200, "%s", " microseconds. Total samples: ");
    WTF::PrintStream::printf(v200, "%lu", v830);
    WTF::PrintStream::printf(v200, "%s", "\n");
    WTF::PrintStream::printf(v200, "%s", "\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v199 + 40))(v199);
    v201 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v199 + 32))(v199);
    WTF::PrintStream::printf(v201, "%s", "Tier breakdown:");
    WTF::PrintStream::printf(v201, "%s", "\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v199 + 40))(v199);
    v202 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v199 + 32))(v199);
    WTF::PrintStream::printf(v202, "%s", "-----------------------------------");
    WTF::PrintStream::printf(v202, "%s", "\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v199 + 40))(v199);
    v820 = 0;
    v203 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v203 = 0x500000002;
    *(_QWORD *)(v203 + 8) = "LLInt";
    *(_DWORD *)(v203 + 16) = 4;
    v211 = v820;
    if (v820 <= 5)
      v211 = 5;
    v820 = v211;
    if (*(_DWORD *)v203 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v203, v204, v205, v206, v207, v208, v209, v210);
      WTF::fastFree(v538, v539, v540, v541, v542, v543, v544, v545);
    }
    else
    {
      *(_DWORD *)v203 -= 2;
    }
    v212 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v212 = 0x800000002;
    *(_QWORD *)(v212 + 8) = "Baseline";
    *(_DWORD *)(v212 + 16) = 4;
    v220 = v820;
    if (v820 <= 8)
      v220 = 8;
    v820 = v220;
    if (*(_DWORD *)v212 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v212, v213, v214, v215, v216, v217, v218, v219);
      WTF::fastFree(v546, v547, v548, v549, v550, v551, v552, v553);
    }
    else
    {
      *(_DWORD *)v212 -= 2;
    }
    v221 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v221 = 0x300000002;
    *(_QWORD *)(v221 + 8) = "DFG";
    *(_DWORD *)(v221 + 16) = 4;
    v229 = v820;
    if (v820 <= 3)
      v229 = 3;
    v820 = v229;
    if (*(_DWORD *)v221 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v221, v222, v223, v224, v225, v226, v227, v228);
      WTF::fastFree(v554, v555, v556, v557, v558, v559, v560, v561);
    }
    else
    {
      *(_DWORD *)v221 -= 2;
    }
    v230 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v230 = 0x300000002;
    *(_QWORD *)(v230 + 8) = "FTL";
    *(_DWORD *)(v230 + 16) = 4;
    v238 = v820;
    if (v820 <= 3)
      v238 = 3;
    v820 = v238;
    if (*(_DWORD *)v230 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v230, v231, v232, v233, v234, v235, v236, v237);
      WTF::fastFree(v562, v563, v564, v565, v566, v567, v568, v569);
    }
    else
    {
      *(_DWORD *)v230 -= 2;
    }
    v239 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v239 = 0xA00000002;
    *(_QWORD *)(v239 + 8) = "js builtin";
    *(_DWORD *)(v239 + 16) = 4;
    v247 = v820;
    if (v820 <= 0xA)
      v247 = 10;
    v820 = v247;
    if (*(_DWORD *)v239 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v239, v240, v241, v242, v243, v244, v245, v246);
      WTF::fastFree(v570, v571, v572, v573, v574, v575, v576, v577);
    }
    else
    {
      *(_DWORD *)v239 -= 2;
    }
    v248 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v248 = 0x500000002;
    *(_QWORD *)(v248 + 8) = "IPInt";
    *(_DWORD *)(v248 + 16) = 4;
    v256 = v820;
    if (v820 <= 5)
      v256 = 5;
    v820 = v256;
    if (*(_DWORD *)v248 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v248, v249, v250, v251, v252, v253, v254, v255);
      WTF::fastFree(v578, v579, v580, v581, v582, v583, v584, v585);
    }
    else
    {
      *(_DWORD *)v248 -= 2;
    }
    v257 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v257 = 0x900000002;
    *(_QWORD *)(v257 + 8) = "WasmLLInt";
    *(_DWORD *)(v257 + 16) = 4;
    v265 = v820;
    if (v820 <= 9)
      v265 = 9;
    v820 = v265;
    if (*(_DWORD *)v257 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v257, v258, v259, v260, v261, v262, v263, v264);
      WTF::fastFree(v586, v587, v588, v589, v590, v591, v592, v593);
    }
    else
    {
      *(_DWORD *)v257 -= 2;
    }
    v266 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v266 = 0x300000002;
    *(_QWORD *)(v266 + 8) = "BBQ";
    *(_DWORD *)(v266 + 16) = 4;
    v274 = v820;
    if (v820 <= 3)
      v274 = 3;
    v820 = v274;
    if (*(_DWORD *)v266 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v266, v267, v268, v269, v270, v271, v272, v273);
      WTF::fastFree(v594, v595, v596, v597, v598, v599, v600, v601);
    }
    else
    {
      *(_DWORD *)v266 -= 2;
    }
    v275 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v275 = 0x300000002;
    *(_QWORD *)(v275 + 8) = "OMG";
    *(_DWORD *)(v275 + 16) = 4;
    v283 = v820;
    if (v820 <= 3)
      v283 = 3;
    v820 = v283;
    if (*(_DWORD *)v275 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v275, v276, v277, v278, v279, v280, v281, v282);
      WTF::fastFree(v602, v603, v604, v605, v606, v607, v608, v609);
    }
    else
    {
      *(_DWORD *)v275 -= 2;
    }
    v284 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v284 = 0x400000002;
    *(_QWORD *)(v284 + 8) = "Wasm";
    *(_DWORD *)(v284 + 16) = 4;
    if (v820 <= 4)
      v292 = 4;
    else
      v292 = v820;
    v820 = v292;
    if (*(_DWORD *)v284 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v284, v285, v286, v287, v288, v289, v290, v291);
      WTF::fastFree(v610, v611, v612, v613, v614, v615, v616, v617);
    }
    else
    {
      *(_DWORD *)v284 -= 2;
    }
    v293 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v293 = 0x400000002;
    *(_QWORD *)(v293 + 8) = "Host";
    *(_DWORD *)(v293 + 16) = 4;
    if (v820 <= 4)
      v301 = 4;
    else
      v301 = v820;
    v820 = v301;
    if (*(_DWORD *)v293 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v293, v294, v295, v296, v297, v298, v299, v300);
      WTF::fastFree(v618, v619, v620, v621, v622, v623, v624, v625);
    }
    else
    {
      *(_DWORD *)v293 -= 2;
    }
    v302 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v302 = 0x600000002;
    *(_QWORD *)(v302 + 8) = "RegExp";
    *(_DWORD *)(v302 + 16) = 4;
    v310 = v820;
    if (v820 <= 6)
      v310 = 6;
    v820 = v310;
    if (*(_DWORD *)v302 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v302, v303, v304, v305, v306, v307, v308, v309);
      WTF::fastFree(v626, v627, v628, v629, v630, v631, v632, v633);
    }
    else
    {
      *(_DWORD *)v302 -= 2;
    }
    v311 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v311 = 0x500000002;
    *(_QWORD *)(v311 + 8) = "C/C++";
    *(_DWORD *)(v311 + 16) = 4;
    v319 = v820;
    if (v820 <= 5)
      v319 = 5;
    v820 = v319;
    if (*(_DWORD *)v311 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v311, v312, v313, v314, v315, v316, v317, v318);
      WTF::fastFree(v634, v635, v636, v637, v638, v639, v640, v641);
    }
    else
    {
      *(_DWORD *)v311 -= 2;
    }
    v320 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v320 = 0xD00000002;
    *(_QWORD *)(v320 + 8) = "Unknown Frame";
    *(_DWORD *)(v320 + 16) = 4;
    v328 = v820;
    if (v820 <= 0xD)
      v328 = 13;
    v820 = v328;
    if (*(_DWORD *)v320 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v320, v321, v322, v323, v324, v325, v326, v327);
      WTF::fastFree(v642, v643, v644, v645, v646, v647, v648, v649);
    }
    else
    {
      *(_DWORD *)v320 -= 2;
    }
    v329 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v329 = 0x1200000002;
    *(_QWORD *)(v329 + 8) = "Unknown Executable";
    *(_DWORD *)(v329 + 16) = 4;
    v337 = v820;
    if (v820 <= 0x12)
      v337 = 18;
    v820 = v337;
    if (*(_DWORD *)v329 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v329, v330, v331, v332, v333, v334, v335, v336);
      WTF::fastFree(v650, v651, v652, v653, v654, v655, v656, v657);
    }
    else
    {
      *(_DWORD *)v329 -= 2;
    }
    v819[0] = (uint64_t *)&v828;
    v819[1] = (uint64_t *)a2;
    v819[2] = (uint64_t *)&v820;
    v819[3] = &v830;
    v338 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v338 = 0x500000002;
    *(_QWORD *)(v338 + 8) = "LLInt";
    *(_DWORD *)(v338 + 16) = 4;
    *(_QWORD *)&v845 = v338;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, (WTF::StringImpl **)&v845, v339);
    v347 = (WTF::StringImpl *)v845;
    *(_QWORD *)&v845 = 0;
    if (v347)
    {
      if (*(_DWORD *)v347 == 2)
      {
        WTF::StringImpl::~StringImpl(v347, v340, v341, v342, v343, v344, v345, v346);
        WTF::fastFree(v658, v659, v660, v661, v662, v663, v664, v665);
      }
      else
      {
        *(_DWORD *)v347 -= 2;
      }
    }
    v348 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v348 = 0x800000002;
    *(_QWORD *)(v348 + 8) = "Baseline";
    *(_DWORD *)(v348 + 16) = 4;
    v844 = (WTF::StringImpl *)v348;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v844, v349);
    v357 = v844;
    v844 = 0;
    if (v357)
    {
      if (*(_DWORD *)v357 == 2)
      {
        WTF::StringImpl::~StringImpl(v357, v350, v351, v352, v353, v354, v355, v356);
        WTF::fastFree(v666, v667, v668, v669, v670, v671, v672, v673);
      }
      else
      {
        *(_DWORD *)v357 -= 2;
      }
    }
    v358 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v358 = 0x300000002;
    *(_QWORD *)(v358 + 8) = "DFG";
    *(_DWORD *)(v358 + 16) = 4;
    v843 = (int *)v358;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, (WTF::StringImpl **)&v843, v359);
    v367 = (WTF::StringImpl *)v843;
    v843 = 0;
    if (v367)
    {
      if (*(_DWORD *)v367 == 2)
      {
        WTF::StringImpl::~StringImpl(v367, v360, v361, v362, v363, v364, v365, v366);
        WTF::fastFree(v674, v675, v676, v677, v678, v679, v680, v681);
      }
      else
      {
        *(_DWORD *)v367 -= 2;
      }
    }
    v368 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v368 = 0x300000002;
    *(_QWORD *)(v368 + 8) = "FTL";
    *(_DWORD *)(v368 + 16) = 4;
    v842 = (WTF::StringImpl *)v368;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v842, v369);
    v377 = v842;
    v842 = 0;
    if (v377)
    {
      if (*(_DWORD *)v377 == 2)
      {
        WTF::StringImpl::~StringImpl(v377, v370, v371, v372, v373, v374, v375, v376);
        WTF::fastFree(v682, v683, v684, v685, v686, v687, v688, v689);
      }
      else
      {
        *(_DWORD *)v377 -= 2;
      }
    }
    v378 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v378 = 0xA00000002;
    *(_QWORD *)(v378 + 8) = "js builtin";
    *(_DWORD *)(v378 + 16) = 4;
    v841 = (WTF::StringImpl *)v378;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v841, v379);
    v387 = v841;
    v841 = 0;
    if (v387)
    {
      if (*(_DWORD *)v387 == 2)
      {
        WTF::StringImpl::~StringImpl(v387, v380, v381, v382, v383, v384, v385, v386);
        WTF::fastFree(v690, v691, v692, v693, v694, v695, v696, v697);
      }
      else
      {
        *(_DWORD *)v387 -= 2;
      }
    }
    v388 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v388 = 0x500000002;
    *(_QWORD *)(v388 + 8) = "IPInt";
    *(_DWORD *)(v388 + 16) = 4;
    v840 = (WTF::StringImpl *)v388;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v840, v389);
    v397 = v840;
    v840 = 0;
    if (v397)
    {
      if (*(_DWORD *)v397 == 2)
      {
        WTF::StringImpl::~StringImpl(v397, v390, v391, v392, v393, v394, v395, v396);
        WTF::fastFree(v698, v699, v700, v701, v702, v703, v704, v705);
      }
      else
      {
        *(_DWORD *)v397 -= 2;
      }
    }
    v398 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v398 = 0x900000002;
    *(_QWORD *)(v398 + 8) = "WasmLLInt";
    *(_DWORD *)(v398 + 16) = 4;
    v839 = (WTF::StringImpl *)v398;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v839, v399);
    v407 = v839;
    v839 = 0;
    if (v407)
    {
      if (*(_DWORD *)v407 == 2)
      {
        WTF::StringImpl::~StringImpl(v407, v400, v401, v402, v403, v404, v405, v406);
        WTF::fastFree(v706, v707, v708, v709, v710, v711, v712, v713);
      }
      else
      {
        *(_DWORD *)v407 -= 2;
      }
    }
    v408 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v408 = 0x300000002;
    *(_QWORD *)(v408 + 8) = "BBQ";
    *(_DWORD *)(v408 + 16) = 4;
    v838 = (WTF::StringImpl *)v408;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v838, v409);
    v417 = v838;
    v838 = 0;
    if (v417)
    {
      if (*(_DWORD *)v417 == 2)
      {
        WTF::StringImpl::~StringImpl(v417, v410, v411, v412, v413, v414, v415, v416);
        WTF::fastFree(v714, v715, v716, v717, v718, v719, v720, v721);
      }
      else
      {
        *(_DWORD *)v417 -= 2;
      }
    }
    v418 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v418 = 0x300000002;
    *(_QWORD *)(v418 + 8) = "OMG";
    *(_DWORD *)(v418 + 16) = 4;
    v837 = (WTF::StringImpl *)v418;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v837, v419);
    v427 = v837;
    v837 = 0;
    if (v427)
    {
      if (*(_DWORD *)v427 == 2)
      {
        WTF::StringImpl::~StringImpl(v427, v420, v421, v422, v423, v424, v425, v426);
        WTF::fastFree(v722, v723, v724, v725, v726, v727, v728, v729);
      }
      else
      {
        *(_DWORD *)v427 -= 2;
      }
    }
    v428 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v428 = 0x400000002;
    *(_QWORD *)(v428 + 8) = "Wasm";
    *(_DWORD *)(v428 + 16) = 4;
    v836 = (WTF::StringImpl *)v428;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v836, v429);
    v437 = v836;
    v836 = 0;
    if (v437)
    {
      if (*(_DWORD *)v437 == 2)
      {
        WTF::StringImpl::~StringImpl(v437, v430, v431, v432, v433, v434, v435, v436);
        WTF::fastFree(v730, v731, v732, v733, v734, v735, v736, v737);
      }
      else
      {
        *(_DWORD *)v437 -= 2;
      }
    }
    v438 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v438 = 0x400000002;
    *(_QWORD *)(v438 + 8) = "Host";
    *(_DWORD *)(v438 + 16) = 4;
    v835 = (WTF::StringImpl *)v438;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v835, v439);
    v447 = v835;
    v835 = 0;
    if (v447)
    {
      if (*(_DWORD *)v447 == 2)
      {
        WTF::StringImpl::~StringImpl(v447, v440, v441, v442, v443, v444, v445, v446);
        WTF::fastFree(v738, v739, v740, v741, v742, v743, v744, v745);
      }
      else
      {
        *(_DWORD *)v447 -= 2;
      }
    }
    v448 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v448 = 0x600000002;
    *(_QWORD *)(v448 + 8) = "RegExp";
    *(_DWORD *)(v448 + 16) = 4;
    v834 = (WTF::StringImpl *)v448;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v834, v449);
    v457 = v834;
    v834 = 0;
    if (v457)
    {
      if (*(_DWORD *)v457 == 2)
      {
        WTF::StringImpl::~StringImpl(v457, v450, v451, v452, v453, v454, v455, v456);
        WTF::fastFree(v746, v747, v748, v749, v750, v751, v752, v753);
      }
      else
      {
        *(_DWORD *)v457 -= 2;
      }
    }
    v458 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v458 = 0x500000002;
    *(_QWORD *)(v458 + 8) = "C/C++";
    *(_DWORD *)(v458 + 16) = 4;
    v833 = (WTF::StringImpl *)v458;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v833, v459);
    v467 = v833;
    v833 = 0;
    if (v467)
    {
      if (*(_DWORD *)v467 == 2)
      {
        WTF::StringImpl::~StringImpl(v467, v460, v461, v462, v463, v464, v465, v466);
        WTF::fastFree(v754, v755, v756, v757, v758, v759, v760, v761);
      }
      else
      {
        *(_DWORD *)v467 -= 2;
      }
    }
    v468 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v468 = 0xD00000002;
    *(_QWORD *)(v468 + 8) = "Unknown Frame";
    *(_DWORD *)(v468 + 16) = 4;
    v832 = (WTF::StringImpl *)v468;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v832, v469);
    v477 = v832;
    v832 = 0;
    if (v477)
    {
      if (*(_DWORD *)v477 == 2)
      {
        WTF::StringImpl::~StringImpl(v477, v470, v471, v472, v473, v474, v475, v476);
        WTF::fastFree(v762, v763, v764, v765, v766, v767, v768, v769);
      }
      else
      {
        *(_DWORD *)v477 -= 2;
      }
    }
    v478 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v478 = 0x1200000002;
    *(_QWORD *)(v478 + 8) = "Unknown Executable";
    *(_DWORD *)(v478 + 16) = 4;
    v831 = (WTF::StringImpl *)v478;
    JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(v819, &v831, v479);
    v487 = v831;
    v831 = 0;
    if (v487)
    {
      if (*(_DWORD *)v487 == 2)
      {
        WTF::StringImpl::~StringImpl(v487, v480, v481, v482, v483, v484, v485, v486);
        WTF::fastFree(v770, v771, v772, v773, v774, v775, v776, v777);
      }
      else
      {
        *(_DWORD *)v487 -= 2;
      }
    }
    v488 = a2;
    v489 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)a2 + 32))(a2);
    WTF::PrintStream::printf(v489, "%s", "\n");
    WTF::PrintStream::printf(v489, "%s", "\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v488 + 40))(v488);
    v490 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v488 + 32))(v488);
    WTF::PrintStream::printf(v490, "%s", "Hottest bytecodes as <numSamples   'functionName#hash:JITType:bytecodeIndex'>");
    WTF::PrintStream::printf(v490, "%s", "\n");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v488 + 40))(v488);
    if (HIDWORD(qword_1ECF4C5EC))
    {
      for (i = 0; i < HIDWORD(qword_1ECF4C5EC); ++i)
      {
        v844 = 0;
        if (v829)
        {
          v492 = *((unsigned int *)v829 - 1);
          v493 = &v829[2 * v492];
          if (*((_DWORD *)v829 - 3))
          {
            v494 = v829;
            if ((_DWORD)v492)
            {
              v495 = 16 * v492;
              v494 = v829;
              while ((unint64_t)*v494 + 1 <= 1)
              {
                v494 += 2;
                v495 -= 16;
                if (!v495)
                {
                  v494 = v493;
                  goto LABEL_294;
                }
              }
            }
            goto LABEL_294;
          }
          v494 = &v829[2 * v492];
        }
        else
        {
          v494 = 0;
          v492 = 0;
        }
        v493 = &v829[2 * v492];
        if (!v829)
        {
          v496 = 0;
          goto LABEL_299;
        }
LABEL_294:
        v496 = &v829[2 * *((unsigned int *)v829 - 1)];
LABEL_299:
        if (v496 == v494)
          break;
        v497 = 0;
        v498 = 0;
        do
        {
          v499 = v494[1];
          if (v499 > v497)
          {
            v500 = *v494;
            if (*v494)
              *(_DWORD *)v500 += 2;
            v844 = v500;
            if (v498)
            {
              if (*(_DWORD *)v498 == 2)
              {
                WTF::StringImpl::~StringImpl(v498, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
                WTF::fastFree(v502, v503, v504, v505, v506, v507, v508, v509);
              }
              else
              {
                *(_DWORD *)v498 -= 2;
              }
            }
            v498 = v500;
            v497 = v499;
          }
          v501 = v494 + 2;
          v494 = v493;
          if (v501 != v493)
          {
            v494 = v501;
            while ((unint64_t)*v494 + 1 <= 1)
            {
              v494 += 2;
              if (v494 == v493)
              {
                v494 = v493;
                break;
              }
            }
          }
        }
        while (v494 != v496);
        if (!v498)
          break;
        if (*((_DWORD *)v498 + 1))
        {
          WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::remove((uint64_t *)&v829, &v844, v29, v30, v31, v32, v33, v34);
          v498 = v844;
          if (!v844)
            break;
        }
        v510 = *(_DWORD *)v498;
        *(_DWORD *)v498 += 2;
        *(_QWORD *)&v845 = v498;
        *((_QWORD *)&v845 + 1) = v497;
        v844 = 0;
        if (v510)
        {
          *(_DWORD *)v498 = v510;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v498, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
          WTF::fastFree(v522, v523, v524, v525, v526, v527, v528, v529);
          v498 = (WTF::StringImpl *)v845;
          if (!(_QWORD)v845)
            break;
        }
        if (!*((_DWORD *)v498 + 1))
        {
          *(_QWORD *)&v845 = 0;
          if (*(_DWORD *)v498 == 2)
          {
            WTF::StringImpl::~StringImpl(v498, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
            WTF::fastFree(v803, v804, v805, v806, v807, v808, v809, v810);
          }
          else
          {
            *(_DWORD *)v498 -= 2;
          }
          break;
        }
        v511 = a2;
        WTF::PrintStream::printf(a2, "%6zu ", *((size_t *)&v845 + 1));
        v512 = (WTF::PrintStream *)(*(uint64_t (**)(WTF::PrintStream *))(*(_QWORD *)v511 + 32))(v511);
        WTF::PrintStream::printf(v512, "%s", "   '");
        WTF::printInternal(v512, (WTF::PrintStream *)&v845, v513, v514, v515, v516, v517, v518, v519, v520);
        WTF::PrintStream::printf(v512, "%s", "'");
        WTF::PrintStream::printf(v512, "%s", "\n");
        (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v511 + 40))(v511);
        v521 = (WTF::StringImpl *)v845;
        *(_QWORD *)&v845 = 0;
        if (v521)
        {
          if (*(_DWORD *)v521 == 2)
          {
            WTF::StringImpl::~StringImpl(v521, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
            WTF::fastFree(v530, v531, v532, v533, v534, v535, v536, v537);
          }
          else
          {
            *(_DWORD *)v521 -= 2;
          }
        }
      }
    }
  }
  v778 = (uint64_t)v828;
  if (v828)
  {
    v779 = *((unsigned int *)v828 - 1);
    if ((_DWORD)v779)
    {
      v780 = v828;
      do
      {
        v781 = *v780;
        if (*v780 != (WTF::StringImpl *)-1)
        {
          *v780 = 0;
          if (v781)
          {
            if (*(_DWORD *)v781 == 2)
            {
              WTF::StringImpl::~StringImpl(v781, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
              WTF::fastFree(v782, v783, v784, v785, v786, v787, v788, v789);
            }
            else
            {
              *(_DWORD *)v781 -= 2;
            }
          }
        }
        v780 += 2;
        --v779;
      }
      while (v779);
    }
    WTF::fastFree(v778 - 16, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
  }
  v790 = (uint64_t)v829;
  if (v829)
  {
    v791 = *((unsigned int *)v829 - 1);
    if ((_DWORD)v791)
    {
      v792 = v829;
      do
      {
        v793 = *v792;
        if (*v792 != (WTF::StringImpl *)-1)
        {
          *v792 = 0;
          if (v793)
          {
            if (*(_DWORD *)v793 == 2)
            {
              WTF::StringImpl::~StringImpl(v793, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
              WTF::fastFree(v794, v795, v796, v797, v798, v799, v800, v801);
            }
            else
            {
              *(_DWORD *)v793 -= 2;
            }
          }
        }
        v792 += 2;
        --v791;
      }
      while (v791);
    }
    WTF::fastFree(v790 - 16, v28, (uint64_t)v29, v30, v31, v32, v33, v34);
  }
  --*(_DWORD *)(v811 + 916);
  v802 = __ldxr(v812);
  if (v802 != 1)
  {
    __clrex();
    goto LABEL_389;
  }
  if (__stlxr(0, v812))
LABEL_389:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v812, 0, (uint64_t)v29, v30, v31, v32, v33, v34);
}

void JSC::SamplingProfiler::reportTopFunctions(JSC::SamplingProfiler *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char v10;
  char **v11;
  char *v12;

  v9 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v9 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  JSC::SamplingProfiler::reportTopFunctions(this, (WTF::PrintStream *)WTF::s_file, a3, a4, a5, a6, a7, a8);
}

void WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::add<int>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl **v16;
  int i;
  unsigned int v18;
  WTF::StringImpl **v19;
  WTF *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)*a3 + 4);
  if (v14 < 0x100)
    v15 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v15 = v14 >> 8;
  v16 = 0;
  for (i = 1; ; ++i)
  {
    v18 = v15 & v13;
    v19 = (WTF::StringImpl **)(v12 + 16 * (v15 & v13));
    v20 = *v19;
    if (*v19 != (WTF::StringImpl *)-1)
      break;
    v16 = (WTF::StringImpl **)(v12 + 16 * v18);
LABEL_12:
    v15 = i + v18;
  }
  if (!v20)
  {
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v19 = v16;
    }
    v21 = *a3;
    if (*a3)
      *(_DWORD *)v21 += 2;
    *v19 = v21;
    v19[1] = (WTF::StringImpl *)*a4;
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v26 = *a2;
    if (*a2)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
        goto LABEL_28;
    }
    else if (3 * v29 <= 4 * v28)
    {
      if (!(_DWORD)v29)
      {
        v30 = 8;
LABEL_34:
        v19 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v30, (uint64_t)v19, (uint64_t)a4, a5, a6, a7, a8);
        v26 = *a2;
        if (*a2)
          v29 = *(unsigned int *)(v26 - 4);
        else
          v29 = 0;
        goto LABEL_37;
      }
LABEL_28:
      v30 = ((_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29)));
      goto LABEL_34;
    }
LABEL_37:
    v32 = v26 + 16 * v29;
    v31 = 1;
    goto LABEL_38;
  }
  if (!WTF::equal(v20, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_12;
  v24 = *a2;
  if (*a2)
    v25 = *(unsigned int *)(v24 - 4);
  else
    v25 = 0;
  v31 = 0;
  v32 = v24 + 16 * v25;
LABEL_38:
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
}

{
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  WTF::StringImpl **v16;
  int i;
  unsigned int v18;
  WTF::StringImpl **v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v12 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v12 = *a2) != 0))
  {
    v13 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)*a3 + 4);
  if (v14 < 0x100)
    v15 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v15 = v14 >> 8;
  v16 = 0;
  for (i = 1; ; ++i)
  {
    v18 = v15 & v13;
    v19 = (WTF::StringImpl **)(v12 + 16 * (v15 & v13));
    v20 = *v19;
    if (*v19 != (WTF::StringImpl *)-1)
      break;
    v16 = (WTF::StringImpl **)(v12 + 16 * v18);
LABEL_12:
    v15 = i + v18;
  }
  if (!v20)
  {
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v19 = v16;
    }
    v21 = *a3;
    *a3 = 0;
    v22 = *v19;
    *v19 = v21;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, (WTF::AtomStringImpl *)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
    v19[1] = (WTF::StringImpl *)*a4;
    v23 = *a2;
    if (*a2)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v27 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
        goto LABEL_29;
    }
    else if (3 * v30 <= 4 * v29)
    {
      if (!(_DWORD)v30)
      {
        v31 = 8;
LABEL_35:
        v19 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v31, (uint64_t)v19, (uint64_t)a4, a5, a6, a7, a8);
        v27 = *a2;
        if (*a2)
          v30 = *(unsigned int *)(v27 - 4);
        else
          v30 = 0;
        goto LABEL_38;
      }
LABEL_29:
      v31 = ((_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30)));
      goto LABEL_35;
    }
LABEL_38:
    v33 = v27 + 16 * v30;
    v32 = 1;
    goto LABEL_39;
  }
  if (!WTF::equal(v20, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_12;
  v25 = *a2;
  if (*a2)
    v26 = *(unsigned int *)(v25 - 4);
  else
    v26 = 0;
  v32 = 0;
  v33 = v25 + 16 * v26;
LABEL_39:
  *(_QWORD *)a1 = v19;
  *(_QWORD *)(a1 + 8) = v33;
  *(_BYTE *)(a1 + 16) = v32;
}

void JSC::SamplingProfiler::reportTopBytecodes(JSC::SamplingProfiler *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  char v10;
  char **v11;
  char *v12;

  v9 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v9 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  JSC::SamplingProfiler::reportTopBytecodes(this, (WTF::PrintStream *)WTF::s_file, a3, a4, a5, a6, a7, a8);
}

void JSC::descriptionForLocation(uint64_t *a1, uint64_t a2, __int16 a3, int a4)
{
  char *v6;
  int v7;
  int v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF::PrintStream *v21;
  float v22;
  uint64_t v23;
  WTF::PrintStream *v24;
  WTF::PrintStream *v25;
  WTF::PrintStream *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  const char *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  BOOL v65;
  int v66;
  char v67;
  int v68;
  int v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  _BYTE *v116;
  uint64_t v117;
  unsigned __int128 *v118;
  unsigned __int128 *v119;
  unsigned __int128 v120;
  char v121;
  uint64_t v122;
  int v123;
  char v124;
  void (**v125)(WTF::StringPrintStream *__hidden);
  WTF *v126;
  __int128 v127;
  _BYTE v128[128];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0xFF00) != 0)
  {
    v125 = off_1E3572250;
    v126 = (WTF *)v128;
    v127 = xmmword_199122F80;
    v128[0] = 0;
    WTF::PrintStream::printf((WTF::PrintStream *)&v125, "%s", ":");
    v125[5]((WTF::StringPrintStream *)&v125);
    v6 = "IPInt";
    v7 = 6;
    switch("IPInt")
    {
      case 0u:
        v6 = "LLInt";
        v7 = 6;
        break;
      case 1u:
        break;
      case 2u:
        v6 = "BBQ";
        goto LABEL_16;
      case 3u:
        v6 = "BBQForOSREntry";
        goto LABEL_20;
      case 4u:
        v6 = "OMG";
LABEL_16:
        v7 = 4;
        break;
      case 5u:
        v6 = "OMGForOSREntry";
LABEL_20:
        v7 = 15;
        break;
      case 6u:
        v6 = "JSEntrypoint";
        v7 = 13;
        break;
      case 7u:
        v6 = "JSEntrypointInterpreter";
        v7 = 24;
        break;
      case 8u:
        v6 = "JSToWasmIC";
        v7 = 11;
        break;
      case 9u:
        v6 = "WasmToJS";
        v7 = 9;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198BA8A60);
    }
    v20 = ((uint64_t (*)(_QWORD))v125[4])(&v125);
    v21 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
    if (v6)
    {
      WTF::StringImpl::utf8ForCharacters(v6, (v7 - 1), (uint64_t)&v122, v22);
    }
    else
    {
      v23 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = 0;
      *(_BYTE *)(v23 + 16) = 0;
      v122 = v23;
      v123 = 0;
    }
    WTF::printExpectedCStringHelper(v21, "StringView", &v122);
    if (v123 != -1)
      ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF7CStringENS6_19UTF8ConversionErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix[v123])(&v124, &v122);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    v125[5]((WTF::StringPrintStream *)&v125);
    v24 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v125[4])(&v125);
    WTF::PrintStream::printf(v24, "%s", ":");
    v125[5]((WTF::StringPrintStream *)&v125);
    if (a4 == -1 || a4 == 0x3FFFFFFF)
    {
      v25 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v125[4])(&v125);
      WTF::PrintStream::printf(v25, "%s");
    }
    else
    {
      v26 = (WTF::PrintStream *)((uint64_t (*)(_QWORD))v125[4])(&v125);
      WTF::PrintStream::printf(v26, "%p");
    }
    v125[5]((WTF::StringPrintStream *)&v125);
    v34 = v126;
    if (v126)
    {
      WTF::fromUTF8Impl<false>((unint64_t)v126, v127, a1);
      v34 = v126;
      if (v126 == (WTF *)v128)
        return;
    }
    else
    {
      *a1 = 0;
    }
LABEL_36:
    WTF::fastFree((unint64_t)v34, v27, v28, v29, v30, v31, v32, v33);
    return;
  }
  v9 = *(_DWORD *)(a2 + 8);
  if (v9 == -1 || v9 == 0x3FFFFFFF)
  {
    v11 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v11 = 0x500000002;
    *(_QWORD *)(v11 + 8) = "<nil>";
    *(_DWORD *)(v11 + 16) = 4;
    goto LABEL_40;
  }
  v125 = off_1E3572250;
  v126 = (WTF *)v128;
  v127 = xmmword_199122F80;
  v128[0] = 0;
  JSC::BytecodeIndex::dump((JSC::BytecodeIndex *)(a2 + 8), (WTF::PrintStream *)&v125);
  v125[5]((WTF::StringPrintStream *)&v125);
  v19 = v126;
  if (v126)
  {
    WTF::fromUTF8Impl<false>((unint64_t)v126, v127, &v122);
    v19 = v126;
    if (v126 == (WTF *)v128)
      goto LABEL_39;
  }
  else
  {
    v122 = 0;
  }
  WTF::fastFree((unint64_t)v19, v12, v13, v14, v15, v16, v17, v18);
LABEL_39:
  v11 = v122;
LABEL_40:
  v35 = *(_DWORD *)(a2 + 12);
  if (!v35)
  {
    v49 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v49 = 0x500000002;
    *(_QWORD *)(v49 + 8) = "<nil>";
    *(_DWORD *)(v49 + 16) = 4;
    goto LABEL_47;
  }
  v125 = off_1E3572250;
  v126 = (WTF *)v128;
  v127 = xmmword_199122F80;
  v36 = WTF::integerToSixCharacterHashString::table[v35 / 0x3E
                                                                                 - 62
                                                                                 * (((138547333
                                                                                                  * (unint64_t)(v35 / 0x3E)) >> 32) >> 1)];
  v37 = WTF::integerToSixCharacterHashString::table[(v35 / 0xF04
                                                                                                - 62
                                                                                                * ((69273667
                                                                                                  * (unint64_t)(v35 / 0xF04)) >> 32))];
  v38 = WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v35 / 0x3A2F8 - 62 * ((unsigned __int16)((16913 * (v35 / 0x3A2F8)) >> 16) >> 4))];
  v39 = WTF::integerToSixCharacterHashString::table[(unsigned __int16)(v35 / 0xE17810 - 62 * ((1058 * (v35 / 0xE17810)) >> 16))];
  v128[0] = 0;
  v40 = WTF::integerToSixCharacterHashString::table[v35 / 0x369B13E0uLL];
  WORD2(v122) = (((unint64_t)WTF::integerToSixCharacterHashString::table[v35 % 0x3E] << 40) | (v36 << 32)) >> 32;
  LODWORD(v122) = (v38 << 16) | (v37 << 24) | (v39 << 8) | v40;
  WTF::PrintStream::printf((WTF::PrintStream *)&v125, "%.*s", 6, (const char *)&v122);
  v125[5]((WTF::StringPrintStream *)&v125);
  v48 = v126;
  if (!v126)
  {
    v49 = 0;
    goto LABEL_46;
  }
  WTF::fromUTF8Impl<false>((unint64_t)v126, v127, &v122);
  v49 = v122;
  v48 = v126;
  if (v126 != (WTF *)v128)
LABEL_46:
    WTF::fastFree((unint64_t)v48, v41, v42, v43, v44, v45, v46, v47);
LABEL_47:
  if (*(_BYTE *)(a2 + 17))
  {
    v50 = WTF::fastCompactMalloc((WTF *)0x20);
    v58 = (WTF::StringImpl *)v50;
    *(_QWORD *)v50 = 0x600000002;
    *(_QWORD *)(v50 + 8) = "RegExp";
  }
  else
  {
    v59 = "None";
    v60 = 5;
    switch(*(_BYTE *)(a2 + 16))
    {
      case 0:
        goto LABEL_56;
      case 1:
        v59 = "Host";
        v60 = 5;
        goto LABEL_56;
      case 2:
        v59 = "LLInt";
        v60 = 6;
        goto LABEL_56;
      case 3:
        v59 = "Baseline";
        v60 = 9;
        goto LABEL_56;
      case 4:
        v59 = "DFG";
        goto LABEL_55;
      case 5:
        v59 = "FTL";
LABEL_55:
        v60 = 4;
LABEL_56:
        v61 = v60 - 1;
        v50 = WTF::fastCompactMalloc((WTF *)0x20);
        v58 = (WTF::StringImpl *)v50;
        *(_DWORD *)v50 = 2;
        *(_DWORD *)(v50 + 4) = v61;
        *(_QWORD *)(v50 + 8) = v59;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x198BA8A94);
    }
  }
  *(_DWORD *)(v50 + 16) = 4;
  if (v49)
    *(_DWORD *)v49 += 2;
  if (v58)
    *(_DWORD *)v58 += 2;
  if (v11)
    *(_DWORD *)v11 += 2;
  if (v49)
  {
    v62 = *(_DWORD *)(v49 + 4);
    if (v58)
      goto LABEL_65;
  }
  else
  {
    v62 = 0;
    if (v58)
    {
LABEL_65:
      v63 = *((_DWORD *)v58 + 1);
      if (v11)
        goto LABEL_66;
LABEL_118:
      v64 = 0;
      goto LABEL_67;
    }
  }
  v63 = 0;
  if (!v11)
    goto LABEL_118;
LABEL_66:
  v64 = *(_DWORD *)(v11 + 4);
  if (v64 < 0)
    goto LABEL_128;
LABEL_67:
  v65 = __OFADD__(v64, 1);
  v66 = v64 + 1;
  v67 = v65;
  if (v63 < 0)
    goto LABEL_128;
  if ((v67 & 1) != 0)
    goto LABEL_128;
  v65 = __OFADD__(v63, v66);
  v68 = v63 + v66;
  if (v65)
    goto LABEL_128;
  v65 = __OFADD__(v68, 1);
  v69 = v68 + 1;
  v70 = v65;
  if (v62 < 0)
    goto LABEL_128;
  if (v70)
    goto LABEL_128;
  v65 = __OFADD__(v62, v69);
  v71 = v62 + v69;
  if (v65)
    goto LABEL_128;
  v72 = (v71 + 1);
  if (__OFADD__(v71, 1))
    goto LABEL_128;
  if (v49 && (*(_BYTE *)(v49 + 16) & 4) == 0)
  {
    v73 = 0;
    goto LABEL_87;
  }
  if (!v58)
  {
    if (v11)
    {
LABEL_86:
      v73 = (*(unsigned __int8 *)(v11 + 16) >> 2) & 1;
      goto LABEL_87;
    }
    if (v71 == -1)
    {
      v115 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
LABEL_134:
      *a1 = (uint64_t)v115;
      goto LABEL_94;
    }
    if ((v72 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v72 + 20), &v125);
      v115 = (int *)v125;
      if (v125)
      {
        *(_DWORD *)v125 = 2;
        v115[1] = v72;
        *((_BYTE *)v115 + 20) = 35;
        *((_QWORD *)v115 + 1) = v115 + 5;
        v115[4] = 4;
        v116 = (char *)v115 + 21;
        if (v49)
        {
          v51 = *(_BYTE **)(v49 + 8);
          v52 = *(unsigned int *)(v49 + 4);
          if ((*(_BYTE *)(v49 + 16) & 4) != 0)
          {
            if ((_DWORD)v52 == 1)
            {
              *v116 = *v51;
            }
            else if ((_DWORD)v52)
            {
              memcpy((char *)v115 + 21, v51, v52);
            }
          }
          else
          {
            if (v52 < 0x10)
            {
              v118 = (unsigned __int128 *)((char *)v115 + 21);
            }
            else
            {
              v118 = (unsigned __int128 *)&v116[v52 & 0xFFFFFFF0];
              v119 = (unsigned __int128 *)((char *)v115 + 21);
              do
              {
                v120 = (unsigned __int128)vld2q_s8(v51);
                v51 += 32;
                *v119++ = v120;
              }
              while (v119 != v118);
            }
            while (v118 != (unsigned __int128 *)&v116[v52])
            {
              v121 = *v51;
              v51 += 2;
              *(_BYTE *)v118 = v121;
              v118 = (unsigned __int128 *)((char *)v118 + 1);
            }
          }
          v117 = *(unsigned int *)(v49 + 4);
        }
        else
        {
          v117 = 0;
        }
        *(_WORD *)&v116[v117] = 14906;
        goto LABEL_134;
      }
    }
LABEL_128:
    *a1 = 0;
    goto LABEL_129;
  }
  v74 = *((_DWORD *)v58 + 4);
  v73 = (v74 >> 2) & 1;
  if (v11 && (v74 & 4) != 0)
    goto LABEL_86;
LABEL_87:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(a1, v72, v73, v49, (uint64_t)v58, v11);
  if (!*a1)
  {
LABEL_129:
    __break(0xC471u);
    JUMPOUT(0x198BA8A6CLL);
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, (WTF::AtomStringImpl *)v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v75, v76, v77, v78, v79, v80, v81, v82);
      if (!v58)
        goto LABEL_94;
      goto LABEL_92;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v58)
    goto LABEL_94;
LABEL_92:
  if (*(_DWORD *)v58 == 2)
  {
    WTF::StringImpl::~StringImpl(v58, (WTF::AtomStringImpl *)v51, v52, v53, v54, v55, v56, v57);
    WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
  }
  else
  {
    *(_DWORD *)v58 -= 2;
  }
LABEL_94:
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v49, (WTF::AtomStringImpl *)v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
      if (!v58)
        goto LABEL_100;
      goto LABEL_98;
    }
    *(_DWORD *)v49 -= 2;
  }
  if (!v58)
    goto LABEL_100;
LABEL_98:
  if (*(_DWORD *)v58 == 2)
  {
    WTF::StringImpl::~StringImpl(v58, (WTF::AtomStringImpl *)v51, v52, v53, v54, v55, v56, v57);
    WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
  }
  else
  {
    *(_DWORD *)v58 -= 2;
  }
LABEL_100:
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v49, (WTF::AtomStringImpl *)v51, v52, v53, v54, v55, v56, v57);
      WTF::fastFree(v107, v108, v109, v110, v111, v112, v113, v114);
      if (!v11)
        return;
      goto LABEL_104;
    }
    *(_DWORD *)v49 -= 2;
  }
  if (!v11)
    return;
LABEL_104:
  if (*(_DWORD *)v11 == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)v11, (WTF::AtomStringImpl *)v51, v52, v53, v54, v55, v56, v57);
    goto LABEL_36;
  }
  *(_DWORD *)v11 -= 2;
}

uint64_t JSC::SamplingProfiler::thread(JSC::SamplingProfiler *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t JSC::GenericArguments<JSC::ScopedArguments>::put(JSC::ScopedArguments *this, unint64_t a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unsigned __int16 *v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned int v43;
  __n128 v44[2];

  v14 = *(_QWORD *)(a2 + 56);
  if (*((_BYTE *)this + 24) || (v21 = *(_QWORD **)(v14 + 41952), v21[221] != a3) && v21[122] != a3 && v21[339] != a3)
  {
    if (*(JSC::ScopedArguments **)(a5 + 8) != this)
      return JSC::JSObject::put((unsigned __int8 *)this, a2, a3, a4, a5, a6, a7, a8, a9);
    if (!a3)
      return JSC::JSObject::put((unsigned __int8 *)this, a2, a3, a4, a5, a6, a7, a8, a9);
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) != 0)
      return JSC::JSObject::put((unsigned __int8 *)this, a2, a3, a4, a5, a6, a7, a8, a9);
    v16 = *(_WORD **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((v15 & 4) == 0)
    {
      if ((_DWORD)v17)
      {
        v18 = (unsigned __int16)*v16 - 48;
        if (v18 <= 9 && (*v16 != 48 || v17 <= 1))
        {
          v31 = v16 + 1;
          v32 = v17 - 1;
          while (v32)
          {
            if (v18 > 0x19999999)
              goto LABEL_8;
            v33 = *v31 - 48;
            if (v33 > 9)
              goto LABEL_8;
            v19 = 0;
            LODWORD(v17) = 0;
            v20 = 0;
            v34 = __CFADD__(v33, 10 * v18);
            v18 = v33 + 10 * v18;
            ++v31;
            --v32;
            if (v34)
              goto LABEL_32;
          }
          v19 = 0x100000000;
          if (v18 == -1)
          {
            v19 = 0;
            LODWORD(v17) = 0;
          }
          else
          {
            LODWORD(v17) = v18;
          }
          if (v18 == -1)
            v20 = 0;
          else
            v20 = v18 & 0xFFFFFF00;
LABEL_32:
          v35 = v20 | v17;
          if ((v19 & 0x100000000) == 0)
            return JSC::JSObject::put((unsigned __int8 *)this, a2, a3, a4, a5, a6, a7, a8, a9);
          goto LABEL_33;
        }
LABEL_8:
        v19 = 0;
        LODWORD(v17) = 0;
      }
      else
      {
        v19 = 0;
      }
      v20 = 0;
      goto LABEL_32;
    }
    if ((_DWORD)v17)
    {
      v38 = *(unsigned __int8 *)v16 - 48;
      if (v38 <= 9 && (v17 < 2 || *(_BYTE *)v16 != 48))
      {
        v41 = v17 - 1;
        v42 = (unsigned __int8 *)v16 + 1;
        while (v41)
        {
          if (v38 > 0x19999999)
            goto LABEL_44;
          v43 = *v42 - 48;
          if (v43 > 9)
            goto LABEL_44;
          LODWORD(v17) = 0;
          v39 = 0;
          v40 = 0;
          v34 = __CFADD__(v43, 10 * v38);
          v38 = v43 + 10 * v38;
          --v41;
          ++v42;
          if (v34)
            goto LABEL_46;
        }
        if (v38 == -1)
          LODWORD(v17) = 0;
        else
          LODWORD(v17) = v38 & 0xFFFFFF00;
        if (v38 == -1)
          v39 = 0;
        else
          v39 = v38;
        if (v38 == -1)
          v40 = 0;
        else
          v40 = 0x100000000;
LABEL_46:
        v35 = v39 | v17;
        if ((v40 & 0x100000000) == 0)
          return JSC::JSObject::put((unsigned __int8 *)this, a2, a3, a4, a5, a6, a7, a8, a9);
LABEL_33:
        if (JSC::ScopedArguments::isMappedArgument(this, v35))
        {
          JSC::ScopedArguments::setIndexQuickly((unint64_t)this, (JSC::VM *)v14, v35, (uint64_t)a4, v36, a6, a7, a8, a9.n128_f64[0]);
          return 1;
        }
        return JSC::JSObject::put((unsigned __int8 *)this, a2, a3, a4, a5, a6, a7, a8, a9);
      }
LABEL_44:
      LODWORD(v17) = 0;
    }
    v39 = 0;
    v40 = 0;
    goto LABEL_46;
  }
  JSC::ScopedArguments::overrideThings(this, a2, a9, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(v14 + 80))
    goto LABEL_14;
  v37 = *(_DWORD *)(v14 + 80);
  if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v22, v23, v24, v25, v26, v27);
  if (*(_QWORD *)(v14 + 16))
    return 0;
LABEL_14:
  v28 = *(__n128 *)(a5 + 16);
  v44[0] = *(__n128 *)a5;
  v44[1] = v28;
  return JSC::JSObject::put((unsigned __int8 *)this, a2, a3, a4, (uint64_t)v44, v25, v26, v27, v44[0]);
}

uint64_t JSC::GenericArguments<JSC::ScopedArguments>::putByIndex(JSC::ScopedArguments *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5)
{
  JSC::VM *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;

  v10 = a2[7];
  if (!JSC::ScopedArguments::isMappedArgument(a1, a3))
    return JSC::JSObject::putByIndex((unint64_t)a1, a2, a3, a4, a5, v12, v13, v14, v15);
  JSC::ScopedArguments::setIndexQuickly((unint64_t)a1, v10, a3, a4, v11, v12, v13, v14, v15.n128_f64[0]);
  return 1;
}

uint64_t JSC::GenericArguments<JSC::ScopedArguments>::deleteProperty(JSC::ScopedArguments *a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  JSC::JSGlobalObject *v28;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;

  if (!*((_BYTE *)a1 + 24))
  {
    v13 = *((_QWORD *)a2 + 7);
    v14 = *(_QWORD **)(v13 + 41952);
    if (v14[221] == a3 || v14[122] == a3 || v14[339] == a3)
    {
      JSC::ScopedArguments::overrideThings(a1, (unint64_t)a2, a9, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*(_DWORD *)(v13 + 80))
      {
        v30 = *(_DWORD *)(v13 + 80);
        if ((v30 & 0x27) != 0 && (v30 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, v15, v16, a5, a6, a7, a8);
        if (*(_QWORD *)(v13 + 16))
          return 0;
      }
    }
  }
  if (!a3)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_DWORD *)(a3 + 16);
  if ((v17 & 0x20) != 0)
    return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
  v18 = *(_BYTE **)(a3 + 8);
  v19 = *(unsigned int *)(a3 + 4);
  if ((v17 & 4) != 0)
  {
    if ((_DWORD)v19)
    {
      v31 = *v18 - 48;
      if (v31 <= 9 && (v19 < 2 || *v18 != 48))
      {
        v34 = v19 - 1;
        v35 = v18 + 1;
        while (v34)
        {
          if (v31 > 0x19999999)
            goto LABEL_40;
          v36 = *v35 - 48;
          if (v36 > 9)
            goto LABEL_40;
          LODWORD(v19) = 0;
          v32 = 0;
          v33 = 0;
          v27 = __CFADD__(v36, 10 * v31);
          v31 = v36 + 10 * v31;
          --v34;
          ++v35;
          if (v27)
            goto LABEL_42;
        }
        if (v31 == -1)
          LODWORD(v19) = 0;
        else
          LODWORD(v19) = v31 & 0xFFFFFF00;
        if (v31 == -1)
          v32 = 0;
        else
          v32 = v31;
        if (v31 == -1)
          v33 = 0;
        else
          v33 = 0x100000000;
LABEL_42:
        v28 = (JSC::JSGlobalObject *)(v32 | v19);
        if ((v33 & 0x100000000) != 0)
          return JSC::GenericArguments<JSC::ScopedArguments>::deletePropertyByIndex((uint64_t *)a1, a2, v28);
        return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
      }
LABEL_40:
      LODWORD(v19) = 0;
    }
    v32 = 0;
    v33 = 0;
    goto LABEL_42;
  }
  if (!(_DWORD)v19)
  {
    v21 = 0;
    goto LABEL_12;
  }
  v20 = *(unsigned __int16 *)v18 - 48;
  if (v20 > 9 || (*(_WORD *)v18 == 48 ? (v23 = v19 > 1) : (v23 = 0), v23))
  {
LABEL_11:
    v21 = 0;
    LODWORD(v19) = 0;
LABEL_12:
    v22 = 0;
    goto LABEL_30;
  }
  v24 = (unsigned __int16 *)(v18 + 2);
  v25 = v19 - 1;
  while (v25)
  {
    if (v20 > 0x19999999)
      goto LABEL_11;
    v26 = *v24 - 48;
    if (v26 > 9)
      goto LABEL_11;
    v21 = 0;
    LODWORD(v19) = 0;
    v22 = 0;
    v27 = __CFADD__(v26, 10 * v20);
    v20 = v26 + 10 * v20;
    ++v24;
    --v25;
    if (v27)
      goto LABEL_30;
  }
  v21 = 0x100000000;
  if (v20 == -1)
  {
    v21 = 0;
    LODWORD(v19) = 0;
  }
  else
  {
    LODWORD(v19) = v20;
  }
  if (v20 == -1)
    v22 = 0;
  else
    v22 = v20 & 0xFFFFFF00;
LABEL_30:
  v28 = (JSC::JSGlobalObject *)(v22 | v19);
  if ((v21 & 0x100000000) != 0)
    return JSC::GenericArguments<JSC::ScopedArguments>::deletePropertyByIndex((uint64_t *)a1, a2, v28);
  return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL JSC::GenericArguments<JSC::ScopedArguments>::deletePropertyByIndex(uint64_t *a1, JSC::JSCell *a2, JSC::JSGlobalObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 result;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;

  v6 = *((_QWORD *)a2 + 7);
  if (!JSC::GenericArguments<JSC::ScopedArguments>::isModifiedArgumentDescriptor(a1[2], a3, *(_DWORD *)(a1[5] + 8))&& JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)a1, a3))
  {
    goto LABEL_5;
  }
  v13 = JSC::JSObject::deletePropertyByIndex((JSC::JSObject *)a1, a2, a3, v7, v8, v9, v10, v11, v12);
  v20 = v13;
  if (*(_DWORD *)(v6 + 80))
  {
    v32 = *(_DWORD *)(v6 + 80);
    if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v6 + 64), 7u, v14, v15, v16, v17, v18, v19);
    v33 = *(_QWORD *)(v6 + 16);
    result = v33 != 0;
    if (!v33 && ((v20 ^ 1) & 1) == 0)
    {
LABEL_5:
      if (JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)a1, a3))
      {
        JSC::ScopedArguments::unmapArgument((JSC::ScopedArguments *)a1, a2, (uint64_t)a3, v22, v23, v24, v25, v26);
        if (*(_DWORD *)(v6 + 80))
        {
          v36 = *(_DWORD *)(v6 + 80);
          if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v6 + 64), 7u, v21, v22, v23, v24, v25, v26);
          if (*(_QWORD *)(v6 + 16))
            return 1;
        }
      }
      v27 = *(_DWORD *)(a1[5] + 8);
      v28 = *((_QWORD *)a2 + 7);
      v29 = a1[2];
      if (!v29
        || qword_1ECF4C038
        && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
        && !((v29 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
      {
        JSC::GenericArguments<JSC::ScopedArguments>::initModifiedArgumentsDescriptor((JSC::JSCell *)a1, a2, *(_DWORD *)(a1[5] + 8), v22, v23, v24, v25, v26);
      }
      if (*(_DWORD *)(v28 + 80))
      {
        v34 = *(_DWORD *)(v28 + 80);
        if ((v34 & 0x27) != 0 && (v34 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v28 + 64), 7u, v21, v22, v23, v24, v25, v26);
        if (v27 <= a3 || *(_QWORD *)(v28 + 16))
          goto LABEL_18;
      }
      else if (v27 <= a3)
      {
LABEL_18:
        if (*(_DWORD *)(v6 + 80))
        {
          v35 = *(_DWORD *)(v6 + 80);
          if ((v35 & 0x27) != 0 && (v35 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v6 + 64), 7u, v21, v22, v23, v24, v25, v26);
        }
        return 1;
      }
      v30 = a1[2];
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v30 = (v30 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_BYTE *)(v30 + a3) = 1;
      goto LABEL_18;
    }
  }
  else
  {
    if (v13)
      goto LABEL_5;
    return 0;
  }
  return result;
}

uint64_t JSC::GenericArguments<JSC::ScopedArguments>::getOwnPropertySlot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  _QWORD *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v33;
  unsigned __int16 *v34;
  unsigned int v35;
  BOOL v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;

  v9 = a3;
  if (!*(_BYTE *)(a1 + 24))
  {
    v12 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 41952);
    if (v12[221] == a3)
    {
      v40 = *(unsigned int *)(a1 + 28);
      if ((v40 & 0x80000000) != 0)
        v41 = COERCE__INT64((double)v40) + 0x2000000000000;
      else
        v41 = v40 | 0xFFFE000000000000;
    }
    else
    {
      if (v12[122] != a3)
      {
        if (v12[339] != a3)
          goto LABEL_5;
        *(_QWORD *)a4 = JSC::JSGlobalObject::arrayProtoValuesFunction(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                + 0x28));
LABEL_51:
        *(_DWORD *)(a4 + 16) = 4;
        *(_QWORD *)(a4 + 32) = a1;
        result = 1;
        *(_BYTE *)(a4 + 49) = 1;
        return result;
      }
      v41 = *(_QWORD *)(a1 + 32);
    }
    *(_QWORD *)a4 = v41;
    goto LABEL_51;
  }
LABEL_5:
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *(JSC::VM **)(a2 + 56), 0, a4);
    return 0;
  }
  v13 = *(_DWORD *)(a3 + 16);
  if ((v13 & 0x20) == 0)
  {
    v14 = *(_BYTE **)(a3 + 8);
    v15 = *(unsigned int *)(a3 + 4);
    if ((v13 & 4) != 0)
    {
      if (!(_DWORD)v15)
        goto LABEL_10;
      a3 = *v14 - 48;
      if (a3 > 9 || v15 >= 2 && *v14 == 48)
        goto LABEL_10;
      v47 = v15 - 1;
      v48 = v14 + 1;
      while (v47)
      {
        if (a3 <= 0x19999999)
        {
          v49 = *v48 - 48;
          if (v49 <= 9)
          {
            v36 = __CFADD__(v49, 10 * a3);
            a3 = v49 + 10 * (_DWORD)a3;
            --v47;
            ++v48;
            if (!v36)
              continue;
          }
        }
        goto LABEL_10;
      }
    }
    else
    {
      if (!(_DWORD)v15)
        goto LABEL_10;
      a3 = *(unsigned __int16 *)v14 - 48;
      if (a3 > 9)
        goto LABEL_10;
      if (*(_WORD *)v14 == 48 && v15 > 1)
        goto LABEL_10;
      v33 = v15 - 1;
      v34 = (unsigned __int16 *)(v14 + 2);
      while (v33)
      {
        if (a3 <= 0x19999999)
        {
          v35 = *v34 - 48;
          if (v35 <= 9)
          {
            v36 = __CFADD__(v35, 10 * a3);
            a3 = v35 + 10 * (_DWORD)a3;
            --v33;
            ++v34;
            if (!v36)
              continue;
          }
        }
        goto LABEL_10;
      }
    }
    if ((_DWORD)a3 != -1)
      return JSC::GenericArguments<JSC::ScopedArguments>::getOwnPropertySlotByIndex((uint64_t *)a1, a2, (const WTF::StringImpl *)a3, a4);
  }
LABEL_10:
  v16 = *(JSC::VM **)(a2 + 56);
  if (!(v9 >> 4)
    || (v17 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), ((v9 >> 4) & ~*(_DWORD *)(v17 + 0x20)) != 0)
    || (JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), *(JSC::VM **)(a2 + 56), a3, (const JSC::PropertyTable *)a4, a5, a6, a7, a8), !v18)|| (v53 = v9, v19 = JSC::PropertyTable::get(v18, (uint64_t *)&v53), a6 = v19, (_DWORD)v19 == -1))
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, v16, v9, a4) & 1) != 0)
    {
      return 1;
    }
    v25 = *(_DWORD *)(v9 + 16);
    if ((v25 & 0x20) != 0)
      return 0;
    v26 = *(_BYTE **)(v9 + 8);
    v27 = *(unsigned int *)(v9 + 4);
    if ((v25 & 4) != 0)
    {
      if ((_DWORD)v27)
      {
        v28 = *v26 - 48;
        if (v28 <= 9 && (v27 < 2 || *v26 != 48))
        {
          v50 = v26 + 1;
          v51 = v27 - 1;
          while (v51)
          {
            if (v28 > 0x19999999)
              goto LABEL_25;
            v52 = *v50 - 48;
            if (v52 > 9)
              goto LABEL_25;
            v29 = 0;
            v30 = 0;
            v31 = 0;
            v36 = __CFADD__(v52, 10 * v28);
            v28 = v52 + 10 * v28;
            ++v50;
            --v51;
            if (v36)
              goto LABEL_26;
          }
          goto LABEL_95;
        }
      }
    }
    else if ((_DWORD)v27)
    {
      v28 = *(unsigned __int16 *)v26 - 48;
      if (v28 <= 9 && (*(_WORD *)v26 != 48 || v27 <= 1))
      {
        v37 = (unsigned __int16 *)(v26 + 2);
        v38 = v27 - 1;
        while (v38)
        {
          if (v28 > 0x19999999)
            goto LABEL_25;
          v39 = *v37 - 48;
          if (v39 > 9)
            goto LABEL_25;
          v29 = 0;
          v30 = 0;
          v31 = 0;
          v36 = __CFADD__(v39, 10 * v28);
          v28 = v39 + 10 * v28;
          ++v37;
          --v38;
          if (v36)
            goto LABEL_26;
        }
LABEL_95:
        v29 = 0x100000000;
        if (v28 == -1)
        {
          v29 = 0;
          v30 = 0;
        }
        else
        {
          v30 = v28;
        }
        if (v28 == -1)
          v31 = 0;
        else
          v31 = v28 & 0xFFFFFF00;
LABEL_26:
        if ((v29 & 0x100000000) != 0)
          return JSC::JSObject::getOwnPropertySlotByIndex(a1, a2, (const WTF::StringImpl *)(v31 | v30), a4, a5, a6, a7, a8);
        return 0;
      }
    }
LABEL_25:
    v29 = 0;
    v30 = 0;
    v31 = 0;
    goto LABEL_26;
  }
  if ((int)v19 <= 63)
  {
    v20 = a1 + 16;
    v21 = v19 << 32;
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 8) - 8;
    v21 = 0x3F00000000 - (v19 << 32);
  }
  v22 = *(_QWORD *)(v20 + (v21 >> 29));
  if ((v22 & 0xFFFE000000000002) != 0)
    goto LABEL_19;
  v23 = *(unsigned __int8 *)(v22 + 5);
  if (v23 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, (uint64_t)v16, a4, v22, SHIDWORD(v19), v19);
    return 1;
  }
  if (v23 != 6)
  {
LABEL_19:
    *(_QWORD *)a4 = v22;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(v19);
    *(_DWORD *)(a4 + 20) = v19;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v42 = *(_DWORD *)(v17 + 16) & 3;
  v44 = *(_QWORD *)(v22 + 8);
  v43 = *(_QWORD *)(v22 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v22 & 0xFFFFFFFE) + 0x4C)))
  {
    v46 = *(_QWORD *)(v22 + 24);
    v45 = *(_QWORD *)(v22 + 32);
    *(_QWORD *)a4 = v44;
    *(_QWORD *)(a4 + 8) = v43;
    *(_DWORD *)(a4 + 16) = HIDWORD(v19);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v42 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v46;
    *(_QWORD *)(a4 + 80) = v45;
  }
  else
  {
    *(_QWORD *)a4 = v44;
    *(_QWORD *)(a4 + 8) = v43;
    *(_DWORD *)(a4 + 16) = HIDWORD(v19);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v42 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::GenericArguments<JSC::ScopedArguments>::getOwnPropertySlotByIndex(uint64_t *a1, uint64_t a2, const WTF::StringImpl *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t OwnPropertySlotByIndex;
  int v14;

  if (JSC::GenericArguments<JSC::ScopedArguments>::isModifiedArgumentDescriptor(a1[2], a3, *(_DWORD *)(a1[5] + 8))|| !JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)a1, a3))
  {
    OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex((uint64_t)a1, a2, a3, a4, v8, v9, v10, v11);
    if (!JSC::ScopedArguments::isMappedArgument((JSC::ScopedArguments *)a1, a3))
      return OwnPropertySlotByIndex;
    v14 = *(_DWORD *)(a4 + 16);
    *(_QWORD *)a4 = JSC::ScopedArguments::getIndexQuickly((JSC::ScopedArguments *)a1, a3);
    *(_DWORD *)(a4 + 16) = v14;
  }
  else
  {
    *(_QWORD *)a4 = JSC::ScopedArguments::getIndexQuickly((JSC::ScopedArguments *)a1, a3);
    *(_DWORD *)(a4 + 16) = 0;
  }
  *(_QWORD *)(a4 + 32) = a1;
  OwnPropertySlotByIndex = 1;
  *(_BYTE *)(a4 + 49) = 1;
  return OwnPropertySlotByIndex;
}

void JSC::GenericArguments<JSC::ScopedArguments>::getOwnPropertyNames(JSC::ScopedArguments *this, WTF::AtomStringImpl *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  WTF::AtomStringImpl *v17;
  const WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl **v70;
  int v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl **v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl **v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  WTF::AtomStringImpl *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168[2];
  char v169;
  uint64_t v170;
  WTF::StringImpl *v171;

  v12 = *((_QWORD *)a2 + 7);
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    if (*((_DWORD *)this + 7))
    {
      v13 = 0;
      v14 = (_QWORD *)(a3 + 8);
      while (!JSC::ScopedArguments::isMappedArgument(this, v13))
      {
LABEL_32:
        v13 = (v13 + 1);
        if (v13 >= *((_DWORD *)this + 7))
          goto LABEL_43;
      }
      JSC::Identifier::from((uint64_t **)v12, v13, v15, v16, a5, a6, a7, a8, (int **)&v167);
      v20 = v167;
      v171 = v167;
      v21 = *((_DWORD *)v167 + 4);
      if ((v21 & 0x20) != 0)
      {
        if ((*(_BYTE *)(a3 + 24) & 1) != 0 && (!*(_BYTE *)(a3 + 25) || (*((_BYTE *)v167 + 36) & 4) == 0))
        {
LABEL_7:
          v22 = *(_QWORD *)a3;
          v23 = *(unsigned int *)(*(_QWORD *)a3 + 20);
          if (v23 <= 0x13)
          {
            if ((_DWORD)v23)
            {
              v27 = *(WTF::StringImpl ***)(v22 + 8);
              while (*v27 != v167)
              {
                ++v27;
                if (!--v23)
                  goto LABEL_18;
              }
              goto LABEL_29;
            }
          }
          else
          {
            if (!*v14 || !*(_DWORD *)(*v14 - 12))
            {
              v24 = *(uint64_t **)(v22 + 8);
              v25 = 8 * v23;
              do
              {
                v26 = *v24++;
                v170 = v26;
                WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v170, v19, a5, a6, a7, a8, (uint64_t)v168);
                v25 -= 8;
              }
              while (v25);
            }
            WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v171, v19, a5, a6, a7, a8, (uint64_t)v168);
            if (!v169)
              goto LABEL_29;
            v20 = v171;
            v22 = *(_QWORD *)a3;
            v21 = *((_DWORD *)v171 + 4);
          }
LABEL_18:
          if ((v21 & 0x20) != 0)
          {
            v28 = *(_DWORD *)v20 + 2;
          }
          else
          {
            if ((v21 & 0x10) != 0)
            {
              *(_DWORD *)v20 += 2;
            }
            else
            {
              WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v20, v18, v19, a5, a6, a7, a8, v168);
              v20 = v168[0];
            }
            v28 = *(_DWORD *)v20;
            *(_DWORD *)v20 += 2;
            if (!v28)
            {
              WTF::StringImpl::~StringImpl(v20, v17, (uint64_t)v18, v19, a5, a6, a7, a8);
              WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
LABEL_24:
              v29 = (uint64_t *)(v22 + 8);
              v168[0] = v20;
              v30 = *(unsigned int *)(v22 + 20);
              if ((_DWORD)v30 == *(_DWORD *)(v22 + 16))
              {
                v58 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)v168);
                v30 = *(unsigned int *)(v22 + 20);
                v59 = *(_QWORD *)(v22 + 8);
                v60 = *v58;
                *v58 = 0;
                *(_QWORD *)(v59 + 8 * v30) = v60;
              }
              else
              {
                v31 = *v29;
                v168[0] = 0;
                *(_QWORD *)(v31 + 8 * v30) = v20;
              }
              *(_DWORD *)(v22 + 20) = v30 + 1;
              v32 = v168[0];
              v168[0] = 0;
              if (v32)
              {
                if (*(_DWORD *)v32 == 2)
                {
                  WTF::StringImpl::~StringImpl(v32, v17, (uint64_t)v18, v19, a5, a6, a7, a8);
                  WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
                }
                else
                {
                  *(_DWORD *)v32 -= 2;
                }
              }
              goto LABEL_29;
            }
          }
          *(_DWORD *)v20 = v28;
          goto LABEL_24;
        }
      }
      else if ((*(_BYTE *)(a3 + 24) & 2) != 0)
      {
        goto LABEL_7;
      }
LABEL_29:
      v33 = v167;
      v167 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::~StringImpl(v33, v17, (uint64_t)v18, v19, a5, a6, a7, a8);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      goto LABEL_32;
    }
LABEL_43:
    JSC::JSObject::getOwnIndexedPropertyNames((uint64_t)this, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  if ((_DWORD)a4 || *((_BYTE *)this + 24))
    goto LABEL_115;
  v61 = v12 + 41952;
  v62 = *(WTF::StringImpl **)(*(_QWORD *)(v12 + 41952) + 1768);
  v171 = v62;
  v63 = *((_DWORD *)v62 + 4);
  if ((v63 & 0x20) != 0)
  {
    if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v62 + 36) & 4) != 0)
      goto LABEL_70;
  }
  else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
  {
    goto LABEL_70;
  }
  v64 = *(_QWORD *)a3;
  v65 = *(unsigned int *)(*(_QWORD *)a3 + 20);
  if (v65 <= 0x13)
  {
    if (!(_DWORD)v65)
    {
LABEL_59:
      if ((v63 & 0x20) != 0)
      {
        v71 = *(_DWORD *)v62 + 2;
      }
      else
      {
        if ((v63 & 0x10) != 0)
        {
          *(_DWORD *)v62 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v62, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, v168);
          v62 = v168[0];
        }
        v71 = *(_DWORD *)v62;
        *(_DWORD *)v62 += 2;
        if (!v71)
        {
          WTF::StringImpl::~StringImpl(v62, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v117, v118, v119, v120, v121, v122, v123, v124);
LABEL_65:
          v72 = (uint64_t *)(v64 + 8);
          v168[0] = v62;
          v73 = *(unsigned int *)(v64 + 20);
          if ((_DWORD)v73 == *(_DWORD *)(v64 + 16))
          {
            v141 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v72, v73 + 1, (unint64_t)v168);
            v73 = *(unsigned int *)(v64 + 20);
            v142 = *(_QWORD *)(v64 + 8);
            v143 = *v141;
            *v141 = 0;
            *(_QWORD *)(v142 + 8 * v73) = v143;
          }
          else
          {
            v74 = *v72;
            v168[0] = 0;
            *(_QWORD *)(v74 + 8 * v73) = v62;
          }
          *(_DWORD *)(v64 + 20) = v73 + 1;
          v75 = v168[0];
          v168[0] = 0;
          if (v75)
          {
            if (*(_DWORD *)v75 == 2)
            {
              WTF::StringImpl::~StringImpl(v75, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v101, v102, v103, v104, v105, v106, v107, v108);
            }
            else
            {
              *(_DWORD *)v75 -= 2;
            }
          }
          goto LABEL_70;
        }
      }
      *(_DWORD *)v62 = v71;
      goto LABEL_65;
    }
    v70 = *(WTF::StringImpl ***)(v64 + 8);
    while (*v70 != v62)
    {
      ++v70;
      if (!--v65)
        goto LABEL_59;
    }
  }
  else
  {
    v66 = *(_QWORD *)(a3 + 8);
    if (!v66 || !*(_DWORD *)(v66 - 12))
    {
      v67 = *(uint64_t **)(v64 + 8);
      v68 = 8 * v65;
      do
      {
        v69 = *v67++;
        v170 = v69;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v170, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v168);
        v68 -= 8;
      }
      while (v68);
    }
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v171, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v168);
    if (v169)
    {
      v62 = v171;
      v64 = *(_QWORD *)a3;
      v63 = *((_DWORD *)v171 + 4);
      goto LABEL_59;
    }
  }
LABEL_70:
  v76 = *(WTF::StringImpl **)(*(_QWORD *)v61 + 976);
  v171 = v76;
  v77 = *((_DWORD *)v76 + 4);
  if ((v77 & 0x20) != 0)
  {
    if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v76 + 36) & 4) != 0)
      goto LABEL_94;
  }
  else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
  {
    goto LABEL_94;
  }
  v78 = *(_QWORD *)a3;
  v79 = *(unsigned int *)(*(_QWORD *)a3 + 20);
  if (v79 <= 0x13)
  {
    if (!(_DWORD)v79)
    {
LABEL_83:
      if ((v77 & 0x20) != 0)
      {
        v85 = *(_DWORD *)v76 + 2;
      }
      else
      {
        if ((v77 & 0x10) != 0)
        {
          *(_DWORD *)v76 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v76, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, v168);
          v76 = v168[0];
        }
        v85 = *(_DWORD *)v76;
        *(_DWORD *)v76 += 2;
        if (!v85)
        {
          WTF::StringImpl::~StringImpl(v76, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v125, v126, v127, v128, v129, v130, v131, v132);
LABEL_89:
          v86 = (uint64_t *)(v78 + 8);
          v168[0] = v76;
          v87 = *(unsigned int *)(v78 + 20);
          if ((_DWORD)v87 == *(_DWORD *)(v78 + 16))
          {
            v144 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v86, v87 + 1, (unint64_t)v168);
            v87 = *(unsigned int *)(v78 + 20);
            v145 = *(_QWORD *)(v78 + 8);
            v146 = *v144;
            *v144 = 0;
            *(_QWORD *)(v145 + 8 * v87) = v146;
          }
          else
          {
            v88 = *v86;
            v168[0] = 0;
            *(_QWORD *)(v88 + 8 * v87) = v76;
          }
          *(_DWORD *)(v78 + 20) = v87 + 1;
          v89 = v168[0];
          v168[0] = 0;
          if (v89)
          {
            if (*(_DWORD *)v89 == 2)
            {
              WTF::StringImpl::~StringImpl(v89, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v109, v110, v111, v112, v113, v114, v115, v116);
            }
            else
            {
              *(_DWORD *)v89 -= 2;
            }
          }
          goto LABEL_94;
        }
      }
      *(_DWORD *)v76 = v85;
      goto LABEL_89;
    }
    v84 = *(WTF::StringImpl ***)(v78 + 8);
    while (*v84 != v76)
    {
      ++v84;
      if (!--v79)
        goto LABEL_83;
    }
  }
  else
  {
    v80 = *(_QWORD *)(a3 + 8);
    if (!v80 || !*(_DWORD *)(v80 - 12))
    {
      v81 = *(uint64_t **)(v78 + 8);
      v82 = 8 * v79;
      do
      {
        v83 = *v81++;
        v170 = v83;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v170, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v168);
        v82 -= 8;
      }
      while (v82);
    }
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v171, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v168);
    if (v169)
    {
      v76 = v171;
      v78 = *(_QWORD *)a3;
      v77 = *((_DWORD *)v171 + 4);
      goto LABEL_83;
    }
  }
LABEL_94:
  v90 = *(WTF::StringImpl **)(*(_QWORD *)v61 + 2712);
  v171 = v90;
  v91 = *((_DWORD *)v90 + 4);
  if ((v91 & 0x20) != 0)
  {
    if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v90 + 36) & 4) != 0)
      goto LABEL_115;
  }
  else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
  {
    goto LABEL_115;
  }
  v92 = *(_QWORD *)a3;
  v93 = *(unsigned int *)(*(_QWORD *)a3 + 20);
  if (v93 <= 0x13)
  {
    if (!(_DWORD)v93)
    {
LABEL_107:
      if ((v91 & 0x20) != 0)
      {
        v99 = *(_DWORD *)v90 + 2;
      }
      else
      {
        if ((v91 & 0x10) != 0)
        {
          *(_DWORD *)v90 += 2;
        }
        else
        {
          WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v90, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, v168);
          v90 = v168[0];
        }
        v99 = *(_DWORD *)v90;
        *(_DWORD *)v90 += 2;
        if (!v99)
        {
          WTF::StringImpl::~StringImpl(v90, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v133, v134, v135, v136, v137, v138, v139, v140);
LABEL_113:
          v168[0] = v90;
          v100 = *(unsigned int *)(v92 + 20);
          if ((_DWORD)v100 == *(_DWORD *)(v92 + 16))
          {
            v147 = (uint64_t *)WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v92 + 8, v100 + 1, (unint64_t)v168);
            v155 = *(unsigned int *)(v92 + 20);
            v156 = *(_QWORD *)(v92 + 8);
            v157 = *v147;
            *v147 = 0;
            *(_QWORD *)(v156 + 8 * v155) = v157;
            v158 = v168[0];
            *(_DWORD *)(v92 + 20) = v155 + 1;
            v168[0] = 0;
            if (v158)
            {
              if (*(_DWORD *)v158 == 2)
              {
                WTF::StringImpl::~StringImpl(v158, v148, v149, v150, v151, v152, v153, v154);
                WTF::fastFree(v159, v160, v161, v162, v163, v164, v165, v166);
              }
              else
              {
                *(_DWORD *)v158 -= 2;
              }
            }
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(v92 + 8) + 8 * v100) = v90;
            *(_DWORD *)(v92 + 20) = v100 + 1;
          }
          goto LABEL_115;
        }
      }
      *(_DWORD *)v90 = v99;
      goto LABEL_113;
    }
    v98 = *(WTF::StringImpl ***)(v92 + 8);
    while (*v98 != v90)
    {
      ++v98;
      if (!--v93)
        goto LABEL_107;
    }
  }
  else
  {
    v94 = *(_QWORD *)(a3 + 8);
    if (!v94 || !*(_DWORD *)(v94 - 12))
    {
      v95 = *(uint64_t **)(v92 + 8);
      v96 = 8 * v93;
      do
      {
        v97 = *v95++;
        v170 = v97;
        WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v170, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v168);
        v96 -= 8;
      }
      while (v96);
    }
    WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v171, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v168);
    if (v169)
    {
      v90 = v171;
      v92 = *(_QWORD *)a3;
      v91 = *((_DWORD *)v171 + 4);
      goto LABEL_107;
    }
  }
LABEL_115:
  JSC::JSObject::getOwnNonIndexPropertyNames(this, (uint64_t)a2, a3, a4);
}

uint64_t JSC::GenericArguments<JSC::ScopedArguments>::defineOwnProperty(JSC::ScopedArguments *this, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v14;
  _QWORD *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 isMappedArgument;
  __n128 v34;
  __int128 v35;
  unint64_t IndexQuickly;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  int v57;
  int v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  _OWORD v62[2];

  v14 = *((_QWORD *)a2 + 7);
  v15 = *(_QWORD **)(v14 + 41952);
  if (v15[221] == a3 || v15[122] == a3 || v15[339] == a3)
  {
    if (!*((_BYTE *)this + 24))
      JSC::ScopedArguments::overrideThings(this, (unint64_t)a2, a9, a3, a4, a5, a6, a7, a8);
    if (!*(_DWORD *)(v14 + 80))
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v25 = *(_DWORD *)(v14 + 80);
    if ((v25 & 0x27) != 0 && (v25 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, a4, a5, a6, a7, a8);
    if (!*(_QWORD *)(v14 + 16))
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    return 0;
  }
  if (!a3)
    return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
  v17 = *(_BYTE **)(a3 + 8);
  v18 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) != 0)
  {
    if (!(_DWORD)v18)
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v19 = *v17 - 48;
    if (v19 > 9 || v18 >= 2 && *v17 == 48)
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v26 = v18 - 1;
    v27 = v17 + 1;
    while (v26)
    {
      if (v19 <= 0x19999999)
      {
        v28 = *v27 - 48;
        if (v28 <= 9)
        {
          v23 = __CFADD__(v28, 10 * v19);
          v19 = v28 + 10 * v19;
          --v26;
          ++v27;
          if (!v23)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    }
  }
  else
  {
    if (!(_DWORD)v18)
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v19 = *(unsigned __int16 *)v17 - 48;
    if (v19 > 9 || *(_WORD *)v17 == 48 && v18 > 1)
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    v20 = (unsigned __int16 *)(v17 + 2);
    v21 = v18 - 1;
    while (v21)
    {
      if (v19 <= 0x19999999)
      {
        v22 = *v20 - 48;
        if (v22 <= 9)
        {
          v23 = __CFADD__(v22, 10 * v19);
          v19 = v22 + 10 * v19;
          ++v20;
          --v21;
          if (!v23)
            continue;
        }
      }
      return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
    }
  }
  if (v19 == -1)
    return JSC::JSObject::defineOwnProperty(this, a2, a3, a4, a5, a6, a7, a8, a9);
  v29 = v19;
  isMappedArgument = JSC::ScopedArguments::isMappedArgument(this, v19);
  v34 = *(__n128 *)a4;
  v35 = *(_OWORD *)(a4 + 16);
  v62[0] = *(_OWORD *)a4;
  v62[1] = v35;
  if (isMappedArgument)
  {
    if (JSC::GenericArguments<JSC::ScopedArguments>::isModifiedArgumentDescriptor(*((_QWORD *)this + 2), v29, *(_DWORD *)(*((_QWORD *)this + 5) + 8)))
    {
      if (!*(_QWORD *)a4 && (*(_BYTE *)(a4 + 28) & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
        *(_QWORD *)&v62[0] = JSC::ScopedArguments::getIndexQuickly(this, v29);
    }
    else
    {
      IndexQuickly = JSC::ScopedArguments::getIndexQuickly(this, v29);
      JSC::JSObject::putDirectIndex((unint64_t)this, (unint64_t)a2, (JSC::VM *)v29, IndexQuickly, v37, v38, v39, v40, v41);
    }
  }
  v42 = JSC::JSObject::defineOwnIndexedProperty(this, a2, (JSC::VM *)v29, (const JSC::PropertyDescriptor *)v62, a5, v30, v31, v32, v34);
  v50 = v42;
  if (*(_DWORD *)(v14 + 80))
  {
    v55 = *(_DWORD *)(v14 + 80);
    if ((v55 & 0x27) != 0 && (v55 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v43, v44, v45, v46, v47, v48);
    if (*(_QWORD *)(v14 + 16))
      v56 = 0;
    else
      v56 = v50;
    if ((v56 & 1) == 0)
      return 0;
  }
  else if (!v42)
  {
    return 0;
  }
  v51 = *(_DWORD *)(*((_QWORD *)this + 5) + 8);
  v52 = *((_QWORD *)a2 + 7);
  v53 = *((_QWORD *)this + 2);
  if (!v53
    || qword_1ECF4C038
    && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested)
    && !((v53 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    JSC::GenericArguments<JSC::ScopedArguments>::initModifiedArgumentsDescriptor(this, a2, *(_DWORD *)(*((_QWORD *)this + 5) + 8), v44, v45, v46, v47, v48);
  }
  if (!*(_DWORD *)(v52 + 80))
  {
    if (v51 <= v29)
      goto LABEL_60;
    goto LABEL_56;
  }
  v57 = *(_DWORD *)(v52 + 80);
  if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v52 + 64), 7u, v43, v44, v45, v46, v47, v48);
  if (v51 > v29 && !*(_QWORD *)(v52 + 16))
  {
LABEL_56:
    v54 = *((_QWORD *)this + 2);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v54 = (v54 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_BYTE *)(v54 + v29) = 1;
  }
LABEL_60:
  if (!*(_DWORD *)(v14 + 80))
  {
    if (!isMappedArgument)
      return 1;
    goto LABEL_62;
  }
  v58 = *(_DWORD *)(v14 + 80);
  if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v43, v44, v45, v46, v47, v48);
  v59 = *(_QWORD *)(v14 + 16);
  result = v59 == 0;
  if (v59)
    v60 = 0;
  else
    v60 = isMappedArgument;
  if (v60)
  {
LABEL_62:
    if (*(_OWORD *)(a4 + 8) != 0)
      goto LABEL_63;
    v44 = *(_QWORD *)a4;
    if (*(_QWORD *)a4)
      JSC::ScopedArguments::setIndexQuickly((unint64_t)this, (JSC::VM *)v14, v29, v44, v45, v46, v47, v48, v49);
    if ((*(_BYTE *)(a4 + 28) & 1) != 0 && (*(_BYTE *)(a4 + 24) & 2) != 0)
LABEL_63:
      JSC::ScopedArguments::unmapArgument(this, a2, v29, v44, v45, v46, v47, v48);
    if (*(_DWORD *)(v14 + 80))
    {
      v61 = *(_DWORD *)(v14 + 80);
      if ((v61 & 0x27) != 0 && (v61 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, v43, v44, v45, v46, v47, v48);
      if (*(_QWORD *)(v14 + 16))
        return 0;
    }
    return 1;
  }
  return result;
}

void JSC::ScopedArguments::visitChildren(JSC::ScopedArguments *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v38;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
    {
      if (!((v16 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
        goto LABEL_5;
      v16 = qword_1ECF4C038 + (v16 & 0x3FFFFFFFFLL);
    }
    JSC::SlotVisitor::markAuxiliary(a2, v16, v10, v11, v12, v13, v14, v15);
  }
LABEL_5:
  v17 = *((_QWORD *)this + 4);
  if (!v17)
    goto LABEL_11;
  if ((v17 & 8) != 0)
  {
    if ((*(_BYTE *)(v17 - 79) & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    v18 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v17 & 0xFFFFFFFFFFFFC000), v18, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v17 & 0xFFFFFFFFFFFFC000) + 8 * ((v17 >> 10) & 0xF) + 0x28) >> (v17 >> 4)) & 1) != 0)
    {
LABEL_10:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_11;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v17, 0, v11, v12, v13, v14, v15);
LABEL_11:
  v19 = *((_QWORD *)this + 5);
  if (!v19)
    goto LABEL_17;
  if ((v19 & 8) != 0)
  {
    if ((*(_BYTE *)(v19 - 79) & 1) != 0)
      goto LABEL_16;
  }
  else
  {
    v20 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != v20)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000), v20, v10, v11, v12, v13, v14, v15);
    if (((*(_QWORD *)((v19 & 0xFFFFFFFFFFFFC000) + 8 * ((v19 >> 10) & 0xF) + 0x28) >> (v19 >> 4)) & 1) != 0)
    {
LABEL_16:
      if (!*((_QWORD *)a2 + 21))
        goto LABEL_17;
    }
  }
  JSC::SlotVisitor::appendSlow((uint64_t)a2, v19, 0, v11, v12, v13, v14, v15);
LABEL_17:
  v21 = *((_QWORD *)this + 6);
  if (v21)
  {
    if ((v21 & 8) != 0)
    {
      if ((*(_BYTE *)(v21 - 79) & 1) == 0)
        goto LABEL_43;
    }
    else
    {
      v22 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 0x20) != v22)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v21 & 0xFFFFFFFFFFFFC000), v22, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v21 & 0xFFFFFFFFFFFFC000) + 8 * ((v21 >> 10) & 0xF) + 0x28) >> (v21 >> 4)) & 1) == 0)
        goto LABEL_43;
    }
    if (!*((_QWORD *)a2 + 21))
      goto LABEL_23;
LABEL_43:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v21, 0, v11, v12, v13, v14, v15);
  }
LABEL_23:
  v23 = (unint64_t *)*((_QWORD *)this + 7);
  if (v23)
  {
    JSC::SlotVisitor::markAuxiliary(a2, *((_QWORD *)this + 7), v10, v11, v12, v13, v14, v15);
    v30 = *((_DWORD *)this + 7);
    v31 = *(_DWORD *)(*((_QWORD *)this + 5) + 8);
    v32 = v30 >= v31;
    v33 = v30 - v31;
    if (v33 != 0 && v32)
    {
      if (v33 <= 1)
        v34 = 1;
      else
        v34 = v33;
      do
      {
        v36 = *v23++;
        v35 = v36;
        if ((v36 & 0xFFFE000000000002) != 0 || v35 == 0)
          goto LABEL_36;
        if ((v35 & 8) != 0)
        {
          v38 = 0;
          if ((*(_BYTE *)(v35 - 79) & 1) == 0)
          {
LABEL_45:
            JSC::SlotVisitor::appendSlow((uint64_t)a2, v35, v38, v25, v26, v27, v28, v29);
            goto LABEL_36;
          }
        }
        else
        {
          v38 = JSC::MarkedBlock::aboutToMark((JSC::MarkedBlock *)(v35 & 0xFFFFFFFFFFFFC000), *((_DWORD *)a2 + 33), v24, v25, v26, v27, v28, v29);
          if (((*(_QWORD *)((v35 & 0xFFFFFFFFFFFFC000) + v38 + 8 * ((v35 >> 10) & 0xF) + 0x28) >> (v35 >> 4)) & 1) == 0)
            goto LABEL_45;
        }
        if (*((_QWORD *)a2 + 21))
          goto LABEL_45;
LABEL_36:
        --v34;
      }
      while (v34);
    }
  }
}

uint64_t JSC::ScopedArguments::visitChildren(JSC::ScopedArguments *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  _QWORD *v19;
  char v20;

  v15[0] = a2;
  v15[1] = this;
  v17 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v16 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198BAAAD0);
  }
  v18[0] = a2;
  v18[1] = this;
  v20 = 0;
  v19 = v15;
  *((_QWORD *)a2 + 11) = v18;
  JSC::JSObject::visitChildren(this, a2, a3);
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    if (!qword_1ECF4C038 || !byte_1ECF4C022 && disablePrimitiveGigacageRequested)
      goto LABEL_8;
    if ((v6 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
    {
      v6 = qword_1ECF4C038 + (v6 & 0x3FFFFFFFFLL);
LABEL_8:
      (*(void (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v6);
    }
  }
  *(_QWORD *)(v18[0] + 88) = v19;
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 4));
  (*(void (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 5));
  result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 6));
  v8 = (uint64_t *)*((_QWORD *)this + 7);
  if (v8)
  {
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 88))(a2, *((_QWORD *)this + 7));
    v9 = *((_DWORD *)this + 7);
    v10 = *(_DWORD *)(*((_QWORD *)this + 5) + 8);
    v11 = v9 >= v10;
    v12 = v9 - v10;
    if (v12 != 0 && v11)
    {
      if (v12 <= 1)
        v13 = 1;
      else
        v13 = v12;
      do
      {
        v14 = *v8++;
        if ((v14 & 0xFFFE000000000002) == 0)
          result = (*(uint64_t (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
        --v13;
      }
      while (v13);
    }
  }
  *(_QWORD *)(v15[0] + 88) = v16;
  return result;
}

unint64_t JSC::ScopedArguments::createByCopyingFrom(JSC *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t SlowCase;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v18;
  JSC::VM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  JSC *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  char *v37;
  uint64_t v38;
  JSC *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::VM *v45;
  uint64_t v46;
  uint64_t v48;
  unint64_t v49;
  char *v51;

  v8 = a1;
  v9 = *(_DWORD *)(a6 + 8);
  v10 = a4 >= v9;
  v11 = a4 - v9;
  if (v11 == 0 || !v10)
  {
    SlowCase = 0;
    goto LABEL_3;
  }
  v19 = (JSC::VM *)a2;
  v20 = a5;
  v21 = a7;
  v22 = a6;
  v23 = a4;
  v24 = a3;
  v25 = 8 * v11;
  if (v11 <= 0x3EC)
  {
    v26 = *(_QWORD *)((char *)a1 + (((unint64_t)(v25 + 15) >> 1) & 0x7FFFFFFF8) + 6736);
    if (v26)
    {
      v27 = *(unsigned int *)(v26 + 60);
      v28 = *(_QWORD *)(v26 + 24);
      if (v28 >= *(_QWORD *)(v26 + 32))
      {
        v48 = *(_QWORD *)(v26 + 40);
        if ((v48 & 1) != 0)
        {
          v51 = (char *)a1 + 192;
          JSC::sanitizeStackForVM(a1, (JSC::VM *)a2, v25, a4, a5, a6, a7, a8);
          SlowCase = JSC::LocalAllocator::allocateSlowCase(v26, v51, v27, 0, 0);
          v8 = a1;
          goto LABEL_16;
        }
        SlowCase = *(_QWORD *)(v26 + 40);
        v49 = *(_QWORD *)(v48 + 8) ^ *(_QWORD *)(v26 + 48);
        *(_QWORD *)(v26 + 32) = SlowCase + HIDWORD(v49);
        *(_QWORD *)(v26 + 40) = SlowCase + (int)v49;
        v29 = SlowCase + v27;
      }
      else
      {
        SlowCase = *(_QWORD *)(v26 + 24);
        v29 = v28 + v27;
      }
      *(_QWORD *)(v26 + 24) = v29;
LABEL_16:
      a3 = v24;
      a4 = v23;
      a6 = v22;
      a7 = v21;
      a5 = v20;
      a2 = (unint64_t)v19;
      goto LABEL_3;
    }
  }
  SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)a1 + 6648, a1, v25, 0, a5, a6, a7, a8);
  v8 = a1;
  a3 = v24;
  a4 = v23;
  a6 = v22;
  a7 = v21;
  a5 = v20;
  a2 = (unint64_t)v19;
  if (!SlowCase)
  {
    __break(0xC471u);
    JUMPOUT(0x198BAAD70);
  }
LABEL_3:
  v13 = (uint64_t)v8 + 192;
  v14 = *((_QWORD *)v8 + 4940);
  if (v14 < *((_QWORD *)v8 + 4941))
  {
LABEL_4:
    *((_QWORD *)v8 + 4940) = v14 + 64;
    goto LABEL_5;
  }
  v14 = *((_QWORD *)v8 + 4942);
  if ((v14 & 1) == 0)
  {
    v18 = *(_QWORD *)(v14 + 8) ^ *((_QWORD *)v8 + 4943);
    *((_QWORD *)v8 + 4941) = v14 + HIDWORD(v18);
    *((_QWORD *)v8 + 4942) = v14 + (int)v18;
    goto LABEL_4;
  }
  v37 = (char *)v8 + 39496;
  v38 = SlowCase;
  v39 = v8;
  v40 = a3;
  v41 = a4;
  v42 = a6;
  v43 = a7;
  v44 = a5;
  v45 = (JSC::VM *)a2;
  JSC::sanitizeStackForVM(v8, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
  v46 = JSC::LocalAllocator::allocateSlowCase(v37, v13, 64, 0, 0);
  a2 = (unint64_t)v45;
  a5 = v44;
  a7 = v43;
  a6 = v42;
  LODWORD(a4) = v41;
  a3 = v40;
  v8 = v39;
  v14 = v46;
  SlowCase = v38;
LABEL_5:
  *(_DWORD *)v14 = 0;
  v15 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v14 = a2 >> 4;
  *(_DWORD *)(v14 + 4) = v15;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(_WORD *)(v14 + 24) = 0;
  *(_DWORD *)(v14 + 28) = a4;
  *(_QWORD *)(v14 + 32) = a5;
  *(_QWORD *)(v14 + 40) = a6;
  *(_QWORD *)(v14 + 48) = a7;
  *(_QWORD *)(v14 + 56) = SlowCase;
  if (*((_BYTE *)v8 + 755))
    __dmb(0xAu);
  v16 = *(unsigned int *)(a6 + 8);
  if (a4 > v16)
  {
    v30 = 0;
    v31 = a4 - v16;
    v32 = a3 + 8 * v16;
    do
    {
      v33 = v8;
      v34 = *(_QWORD *)(v32 + 8 * v30);
      v35 = v14;
      *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v30) = v34;
      if (v34)
        v36 = (v34 & 0xFFFE000000000002) == 0;
      else
        v36 = 0;
      if (v36 && *((_DWORD *)v33 + 190) >= *(unsigned __int8 *)(v14 + 7))
        JSC::Heap::writeBarrierSlowPath(v13, v14);
      ++v30;
      v8 = v33;
      v14 = v35;
    }
    while (v31 != (_DWORD)v30);
  }
  return v14;
}

uint64_t JSC::ScopedArguments::overrideThings(JSC::ScopedArguments *this, unint64_t a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t (*v27)(uint64_t *, __n128);
  uint64_t *v28;
  uint64_t v29;
  JSC::ScopedArguments *v30;
  uint64_t v31;
  uint64_t v32;

  if (*((_BYTE *)this + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198BAAF24);
  }
  v11 = *(_QWORD *)(a2 + 56);
  v12 = v11 + 41952;
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 41952) + 1768);
  v14 = *(unsigned int *)(*((_QWORD *)this + 5) + 8);
  if ((int)v14 < 0)
    v15 = COERCE__INT64((double)v14) + 0x2000000000000;
  else
    v15 = v14 | 0xFFFE000000000000;
  v29 = 0;
  v30 = this;
  v31 = 0x1000000FFFFFFFFLL;
  a3.n128_u64[0] = 0x100000001000000;
  v32 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, v11, v13, v15, 4, (uint64_t)&v29, a8, a9, a3);
  v16 = *(_QWORD *)(*(_QWORD *)v12 + 976);
  v17 = *((_QWORD *)this + 4);
  v29 = 0;
  v30 = this;
  v31 = 0x1000000FFFFFFFFLL;
  v18.n128_u64[0] = 0x100000001000000;
  v32 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, v11, v16, v17, 4, (uint64_t)&v29, v19, v20, v18);
  v23.n128_u64[0] = 0x100000001000000;
  v24 = *(_QWORD *)(*(_QWORD *)v12 + 2712);
  v25 = *(_QWORD *)(a2 + 528);
  if ((v25 & 1) != 0)
  {
    v27 = *(uint64_t (**)(uint64_t *, __n128))(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a2 & 8) != 0)
      v28 = (uint64_t *)(a2 - 16);
    else
      v28 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
    v29 = *v28;
    v30 = (JSC::ScopedArguments *)a2;
    v31 = a2 + 528;
    v25 = v27(&v29, v23);
    v23.n128_u64[0] = 0x100000001000000;
  }
  v29 = 0;
  v30 = this;
  v31 = 0x1000000FFFFFFFFLL;
  v32 = 0;
  result = JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((int *)this, v11, v24, v25, 4, (uint64_t)&v29, v21, v22, v23);
  *((_BYTE *)this + 24) = 1;
  return result;
}

JSC::Exception *JSC::ScopedArguments::unmapArgument(JSC::ScopedArguments *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  JSC::Exception *result;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  JSC::JSGlobalObject *v16;
  unint64_t OutOfMemoryError;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  JSC::Exception *v24;

  v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
  *((_BYTE *)this + 25) = 1;
  result = (JSC::Exception *)*((_QWORD *)this + 5);
  v11 = *((_DWORD *)result + 2);
  v12 = a3 >= v11;
  v13 = a3 - v11;
  if (v12)
  {
    *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v13) = 0;
  }
  else
  {
    v14 = a3;
    if (!*((_BYTE *)result + 12)
      || (result = (JSC::Exception *)JSC::ScopedArgumentsTable::tryClone(result, v9, a3, a4, a5, a6, a7, a8)) != 0)
    {
      v15 = *((_QWORD *)result + 2);
      if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
        v15 = (v15 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      *(_DWORD *)(v15 + 4 * v14) = -1;
      *((_QWORD *)this + 5) = result;
      if (*((_DWORD *)v9 + 190) >= *((unsigned __int8 *)this + 7))
      {
        JSC::Heap::writeBarrierSlowPath((uint64_t)v9 + 192, (unint64_t)this);
        result = (JSC::Exception *)*((_QWORD *)this + 5);
      }
      if (*((_DWORD *)result + 9) <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x198BAB0B4);
      }
      *(_QWORD *)(*((_QWORD *)result + 3) + 8 * v14) = 0;
    }
    else
    {
      OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a2, v16);
      v24 = (JSC::Exception *)OutOfMemoryError;
      if ((OutOfMemoryError & 0xFFFE000000000002) != 0
        || &JSC::Exception::s_info != (char **)(16
                                              * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                + 0x4C)))
      {
        v24 = (JSC::Exception *)JSC::Exception::create((uint64_t)v9, (JSC::VM *)OutOfMemoryError, 0, v18, v19, v20, v21, v22);
      }
      return JSC::VM::throwException(v9, a2, v24, v23, v18, v19, v20, v21, v22);
    }
  }
  return result;
}

uint64_t JSC::ScopedArgumentsTable::trySet(uint64_t result, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unsigned int v9;
  uint64_t v10;

  v8 = a4;
  v9 = a3;
  if (!*(_BYTE *)(result + 12)
    || (result = JSC::ScopedArgumentsTable::tryClone((JSC::ScopedArgumentsTable *)result, a2, a3, a4, a5, a6, a7, a8)) != 0)
  {
    v10 = *(_QWORD *)(result + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v10 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_DWORD *)(v10 + 4 * v9) = v8;
  }
  return result;
}

void JSC::ScopedArguments::copyToArguments(JSC::ScopedArguments *this, JSC::JSGlobalObject *a2, JSC::JSValue *a3, int a4, unsigned int a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  if (a5)
  {
    v10 = 0;
    v11 = *((_QWORD *)a2 + 7);
    do
    {
      if (JSC::ScopedArguments::isMappedArgument(this, v10 + a4))
      {
        *((_QWORD *)a3 + v10) = JSC::ScopedArguments::getIndexQuickly(this, v10 + a4);
      }
      else
      {
        *((_QWORD *)a3 + v10) = JSC::JSObject::get(this, a2, v10 + a4);
        if (*(_DWORD *)(v11 + 80))
        {
          v18 = *(_DWORD *)(v11 + 80);
          if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v12, v13, v14, v15, v16, v17);
          if (*(_QWORD *)(v11 + 16))
            return;
        }
      }
      ++v10;
    }
    while (v10 < a5);
  }
}

BOOL JSC::ScopedArguments::isIteratorProtocolFastAndNonObservable(JSC::ScopedArguments *this)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  v1 = *(_QWORD **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28);
  v2 = v1[277];
  if ((v2 & 1) != 0)
    v3 = (v2 >> 1) & 3;
  else
    v3 = *(unsigned __int8 *)(v2 + 4);
  if (v3 == 2 || *(_BYTE *)(v1[256] + 4) == 2)
    return 0;
  v4 = v1[289];
  v5 = (v4 & 1) != 0 ? (v4 >> 1) & 3 : *(unsigned __int8 *)(v4 + 4);
  return v5 != 2
      && !*((_BYTE *)this + 24)
      && !*((_BYTE *)this + 25)
      && (*(_BYTE *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x12) & 0x20) == 0;
}

void JSC::ScopedArgumentsTable::destroy(JSC::ScopedArgumentsTable *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  unint64_t v10;

  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    if (!qword_1ECF4C038
      || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
      || (v10 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038) != 0)
    {
      Gigacage::free(0, v10, a3, a4, a5, a6, a7, a8);
    }
  }
}

void JSC::ScopedArgumentsTable::tryCreate(JSC::ScopedArgumentsTable *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  char *v10;
  _QWORD *v11;
  unint64_t SlowCase;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  const void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;

  v8 = a2;
  v10 = (char *)this + 40712;
  v11 = (_QWORD *)*((_QWORD *)this + 5089);
  if (!v11)
    v11 = (_QWORD *)JSC::GCClient::Heap::scopedArgumentsTableSpaceSlow((JSC::Heap **)this + 4694);
  SlowCase = v11[3];
  if (SlowCase < v11[4])
  {
    v11[3] = SlowCase + 48;
    goto LABEL_5;
  }
  SlowCase = v11[5];
  if ((SlowCase & 1) != 0)
  {
    v42 = v10;
    v43 = v11;
    JSC::sanitizeStackForVM(this, a2, a3, a4, a5, a6, a7, a8);
    v44 = v43;
    v10 = v42;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v44, (char *)this + 192, 48, 0, 1);
LABEL_5:
    if (!SlowCase)
      return;
    goto LABEL_6;
  }
  v41 = *(_QWORD *)(SlowCase + 8) ^ v11[6];
  v11[4] = SlowCase + HIDWORD(v41);
  v11[5] = SlowCase + (int)v41;
  v11[3] = SlowCase + 48;
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  v13 = *((_QWORD *)v10 + 105);
  v14 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)SlowCase = v13 >> 4;
  *(_DWORD *)(SlowCase + 4) = v14;
  *(_QWORD *)(SlowCase + 16) = 0;
  v15 = (unint64_t *)(SlowCase + 16);
  *(_DWORD *)(SlowCase + 8) = 0;
  *(_BYTE *)(SlowCase + 12) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  *(_QWORD *)(SlowCase + 32) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 8) = v8;
  v16 = (void *)Gigacage::tryMalloc(0, 4 * v8);
  v23 = (unint64_t)v16;
  if (v8 && v16)
    memset(v16, 255, 4 * v8);
  v24 = *v15;
  if (*v15)
  {
    if (!qword_1ECF4C038
      || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
      || (v24 = (v24 & 0x3FFFFFFFFLL) + qword_1ECF4C038) != 0)
    {
      Gigacage::free(0, v24, v17, v18, v19, v20, v21, v22);
    }
  }
  *v15 = v23;
  if (v23
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    v25 = v8;
    v26 = *(_DWORD *)(SlowCase + 36);
    v27 = v8;
    if (v26 <= v8)
    {
      v28 = *(_DWORD *)(SlowCase + 32);
      if (v28 < v8)
      {
        if (v28)
        {
          if (v26)
            *(_DWORD *)(SlowCase + 36) = 0;
          v40 = *(_QWORD *)(SlowCase + 24);
          if (v40)
          {
            *(_QWORD *)(SlowCase + 24) = 0;
            *(_DWORD *)(SlowCase + 32) = 0;
            WTF::fastFree(v40, (void *)v24, v17, v18, v19, v20, v21, v22);
            v28 = *(_DWORD *)(SlowCase + 32);
          }
        }
        if (v28 < v8)
        {
          if (v8 >> 29)
          {
            __break(0xC471u);
            return;
          }
          v29 = *(const void **)(SlowCase + 24);
          v30 = *(unsigned int *)(SlowCase + 36);
          v31 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
          *(_DWORD *)(SlowCase + 32) = v8;
          *(_QWORD *)(SlowCase + 24) = v31;
          memcpy(v31, v29, 8 * v30);
          if (v29)
          {
            if (*(const void **)(SlowCase + 24) == v29)
            {
              *(_QWORD *)(SlowCase + 24) = 0;
              *(_DWORD *)(SlowCase + 32) = 0;
            }
            WTF::fastFree((unint64_t)v29, v32, v33, v34, v35, v36, v37, v38);
          }
        }
      }
      v25 = *(unsigned int *)(SlowCase + 36);
      v27 = *(_DWORD *)(SlowCase + 36);
    }
    v39 = *(char **)(SlowCase + 24);
    if (v27)
    {
      bzero(v39, 8 * v25);
      v39 = *(char **)(SlowCase + 24);
    }
    if (v27 != v8)
      bzero(&v39[8 * v25], 8 * v8 - 8 * v25);
    *(_DWORD *)(SlowCase + 36) = v8;
  }
}

unint64_t *WTF::CagedUniquePtr<(Gigacage::Kind)0,JSC::ScopeOffset>::operator=(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;

  v10 = *a1;
  if (*a1)
  {
    if (!qword_1ECF4C038
      || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
      || (v10 = (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038) != 0)
    {
      Gigacage::free(0, v10, a3, a4, a5, a6, a7, a8);
    }
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

uint64_t JSC::ScopedArgumentsTable::tryClone(JSC::ScopedArgumentsTable *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;

  JSC::ScopedArgumentsTable::tryCreate(a2, (JSC::VM *)*((unsigned int *)this + 2), a3, a4, a5, a6, a7, a8);
  v17 = v9;
  if (v9)
  {
    v18 = *((_DWORD *)this + 2);
    if (v18)
    {
      if (disablePrimitiveGigacageRequested)
      {
        v24 = v18 - 1;
        do
        {
          v25 = *((_QWORD *)this + 2);
          if (qword_1ECF4C038 && byte_1ECF4C022)
          {
            v26 = v24;
            v27 = (_DWORD *)((v25 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 4 * v24);
            v28 = (*(_QWORD *)(v9 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          }
          else
          {
            v26 = v24;
            v27 = (_DWORD *)(v25 + 4 * v24);
            v28 = *(_QWORD *)(v9 + 16);
          }
          *(_DWORD *)(v28 + 4 * v26) = *v27;
          --v24;
        }
        while (v26);
      }
      else
      {
        v19 = v18 - 1;
        do
        {
          v20 = *((_QWORD *)this + 2);
          v21 = v19;
          if (qword_1ECF4C038)
          {
            v22 = (_DWORD *)((v20 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 4 * v19);
            v23 = (*(_QWORD *)(v9 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          }
          else
          {
            v22 = (_DWORD *)(v20 + 4 * v19);
            v23 = *(_QWORD *)(v9 + 16);
          }
          *(_DWORD *)(v23 + 4 * v19--) = *v22;
        }
        while (v21);
      }
    }
    if ((JSC::ScopedArgumentsTable *)v9 != this)
    {
      v29 = *(_DWORD *)(v9 + 36);
      v30 = *((_DWORD *)this + 9);
      if (v29 <= v30)
      {
        if (v30 > *(_DWORD *)(v9 + 32))
        {
          WTF::Vector<JSC::B3::Air::BasicBlock *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v17 + 24, *((unsigned int *)this + 9));
          v29 = *(_DWORD *)(v17 + 36);
        }
      }
      else
      {
        *(_DWORD *)(v9 + 36) = v30;
        v29 = v30;
      }
      if (v29)
      {
        memmove(*(void **)(v17 + 24), *((const void **)this + 3), 8 * v29);
        v31 = *(unsigned int *)(v17 + 36);
      }
      else
      {
        v31 = 0;
      }
      memcpy((void *)(*(_QWORD *)(v17 + 24) + 8 * v31), (const void *)(*((_QWORD *)this + 3) + 8 * v31), 8 * *((unsigned int *)this + 9) - 8 * v31);
      *(_DWORD *)(v17 + 36) = *((_DWORD *)this + 9);
    }
  }
  return v17;
}

void JSC::ScopedArgumentsTable::trySetLength(JSC::ScopedArgumentsTable *this, JSC::VM *a2, JSC::VM *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t i;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;

  v8 = a3;
  if (*((_BYTE *)this + 12))
  {
    JSC::ScopedArgumentsTable::tryCreate(a2, a3, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (!v29)
      return;
    v30 = (_QWORD *)((char *)this + 24);
    if (*((_DWORD *)this + 9) < v8)
    {
      v31 = *((unsigned int *)this + 8);
      if (v31 < v8)
      {
        v32 = v31 + (v31 >> 2);
        if (v32 >= 0x10)
          v33 = v32 + 1;
        else
          v33 = 16;
        if (v33 <= v8)
          v34 = v8;
        else
          v34 = v33;
        v35 = v29;
        WTF::Vector<JSC::B3::Air::BasicBlock *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v34);
        v30 = (_QWORD *)((char *)this + 24);
        v29 = v35;
      }
    }
    *((_DWORD *)this + 9) = v8;
    v36 = *((_DWORD *)this + 2);
    LODWORD(v37) = v36 >= v8 ? v8 : *((_DWORD *)this + 2);
    if (!(_DWORD)v37)
      return;
    if (!disablePrimitiveGigacageRequested)
    {
      if (v36 >= v8)
        v38 = v8;
      else
        v38 = v36;
      v39 = v38 - 1;
      while (1)
      {
        v40 = *((_QWORD *)this + 2);
        if (qword_1ECF4C038)
        {
          v40 = (v40 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
          v41 = (*(_QWORD *)(v29 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
        }
        else
        {
          v41 = *(_QWORD *)(v29 + 16);
        }
        *(_DWORD *)(v41 + 4 * v39) = *(_DWORD *)(v40 + 4 * v39);
        if (v39 >= *((unsigned int *)this + 9) || v39 >= *(unsigned int *)(v29 + 36))
          break;
        *(_QWORD *)(*(_QWORD *)(v29 + 24) + 8 * v39) = *(_QWORD *)(*v30 + 8 * v39);
        if (--v39 == -1)
          return;
      }
LABEL_88:
      __break(0xC471u);
      JUMPOUT(0x198BABBD4);
    }
    v49 = (v37 - 1);
    for (i = 4 * v49; ; i -= 4)
    {
      v37 = (v37 - 1);
      v51 = *((_QWORD *)this + 2);
      if (qword_1ECF4C038)
      {
        if (!byte_1ECF4C022)
        {
          v52 = (_DWORD *)(v51 + i);
          v53 = *(_QWORD *)(v29 + 16);
          v54 = v49;
          goto LABEL_82;
        }
        v52 = (_DWORD *)((v51 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 4 * v37);
        v53 = (*(_QWORD *)(v29 + 16) & 0x3FFFFFFFFLL) + qword_1ECF4C038;
      }
      else
      {
        v52 = (_DWORD *)(v51 + 4 * v37);
        v53 = *(_QWORD *)(v29 + 16);
      }
      v54 = v37;
LABEL_82:
      *(_DWORD *)(v53 + 4 * v54) = *v52;
      if (v54 >= *((unsigned int *)this + 9) || v54 >= *(unsigned int *)(v29 + 36))
        goto LABEL_88;
      *(_QWORD *)(*(_QWORD *)(v29 + 24) + 8 * v54) = *(_QWORD *)(*v30 + 8 * v54);
      --v49;
      if (!(_DWORD)v37)
        return;
    }
  }
  v10 = Gigacage::tryMalloc(0, 4 * a3);
  v17 = v10;
  if (v8 && v10)
  {
    v18 = v8 - 1;
    do
      *(_DWORD *)(v10 + 4 * v18--) = v8;
    while (v18 != -1);
    v55 = v10;
  }
  else
  {
    v55 = v10;
    if (!v10)
      return;
  }
  v19 = qword_1ECF4C038;
  if (!qword_1ECF4C038
    || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
    || (v10 & 0x3FFFFFFFFLL) + qword_1ECF4C038)
  {
    LODWORD(v20) = *((_DWORD *)this + 2);
    if (v20 >= v8)
      LODWORD(v20) = v8;
    if ((_DWORD)v20)
    {
      v21 = v10 & 0x3FFFFFFFFLL;
      if (disablePrimitiveGigacageRequested)
      {
        v42 = (v20 - 1);
        v43 = 4 * v42;
        do
        {
          v20 = (v20 - 1);
          v44 = *((_QWORD *)this + 2);
          if (qword_1ECF4C038)
          {
            v45 = (v44 & 0x3FFFFFFFFLL) + qword_1ECF4C038 + 4 * v20;
            v46 = (_DWORD *)(v44 + v43);
            if (byte_1ECF4C022)
            {
              v46 = (_DWORD *)v45;
              v47 = v20;
            }
            else
            {
              v47 = v42;
            }
            if (byte_1ECF4C022)
              v48 = v21 + qword_1ECF4C038;
            else
              v48 = v10;
          }
          else
          {
            v46 = (_DWORD *)(v44 + 4 * v20);
            v47 = v20;
            v48 = v10;
          }
          *(_DWORD *)(v48 + 4 * v47) = *v46;
          --v42;
          v43 -= 4;
        }
        while ((_DWORD)v20);
      }
      else
      {
        v22 = 4 * (v20 - 1);
        do
        {
          v23 = *((_QWORD *)this + 2);
          if (qword_1ECF4C038)
          {
            v23 = (v23 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
            v24 = v21 + qword_1ECF4C038;
          }
          else
          {
            v24 = v10;
          }
          *(_DWORD *)(v24 + v22) = *(_DWORD *)(v23 + v22);
          v22 -= 4;
          LODWORD(v20) = v20 - 1;
        }
        while ((_DWORD)v20);
      }
    }
    *((_DWORD *)this + 2) = v8;
    WTF::CagedUniquePtr<(Gigacage::Kind)0,JSC::ScopeOffset>::operator=((unint64_t *)this + 2, &v55, v11, v12, v13, v14, v15, v16);
    if (*((_DWORD *)this + 9) < v8)
    {
      v25 = *((unsigned int *)this + 8);
      if (v25 < v8)
      {
        v26 = v25 + (v25 >> 2);
        if (v26 >= 0x10)
          v27 = v26 + 1;
        else
          v27 = 16;
        if (v27 <= v8)
          v28 = v8;
        else
          v28 = v27;
        WTF::Vector<JSC::B3::Air::BasicBlock *,0ul,WTF::UnsafeVectorOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 24, v28);
      }
    }
    *((_DWORD *)this + 9) = v8;
    v17 = v55;
    if (!v55)
      return;
    v19 = qword_1ECF4C038;
    if (!qword_1ECF4C038)
    {
LABEL_32:
      Gigacage::free(0, v17, v11, v12, v13, v14, v15, v16);
      return;
    }
  }
  if (!byte_1ECF4C022 && disablePrimitiveGigacageRequested)
    goto LABEL_32;
  v17 = (v17 & 0x3FFFFFFFFLL) + v19;
  if (v17)
    goto LABEL_32;
}

uint64_t JSC::ScopedArgumentsTable::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 0x2000000;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::ScopedArgumentsTable::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::ScriptExecutable::runConstraint<JSC::SlotVisitor>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::CodeBlock::propagateTransitions<JSC::SlotVisitor>(a3, a1, a2, a4, a5, a6, a7, a8);
  JSC::CodeBlock::determineLiveness<JSC::SlotVisitor>((unint64_t)a3, a1, a2);
}

void JSC::ScriptExecutable::visitCodeBlockEdge<JSC::AbstractSlotVisitor>(_BYTE *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  _DWORD *v19;
  BOOL v20;
  unsigned __int8 *v21;
  int v22;
  _BYTE v23[8];
  unsigned __int8 *v24;
  char v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)(a2 + 16);
  v26 = 0;
  v24 = (unsigned __int8 *)(a2 + 16);
  v25 = 1;
  if (__ldaxr((unsigned __int8 *)(a2 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v4);
LABEL_5:
  v26 = 1;
  if (JSC::CodeBlock::shouldVisitStrongly<JSC::AbstractSlotVisitor>(a2, (uint64_t)v23, (uint64_t)a1))
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
  v6 = *(_QWORD *)(a2 + 120);
  if (v6 && (*(_BYTE *)(v6 + 12) & 0xFE) == 4)
    (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 24))(a1, *(_QWORD *)(a2 + 192));
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 24))(a1, *(_QWORD *)(a2 + 8));
  JSC::CodeBlock::propagateTransitions<JSC::AbstractSlotVisitor>((_QWORD *)a2, (uint64_t)v23, a1);
  if (((*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2) & 1) == 0)
  {
    v13 = *(_BYTE **)(a2 + 120);
    if (v13)
    {
      if ((v13[12] & 0xFE) == 4)
      {
        v14 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v13 + 72))(v13);
        v15 = *(unsigned int **)(v14 + 64);
        if (v15)
        {
          v16 = 0;
          do
          {
            if (v16 >= *v15)
              break;
            if (((*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 40))(a1, *(_QWORD *)&v15[2 * v16 + 2]) & 1) == 0)
              goto LABEL_27;
            ++v16;
            v15 = *(unsigned int **)(v14 + 64);
          }
          while (v15);
        }
        v17 = 0;
        v18 = *(unsigned int **)(v14 + 72);
        if (v18)
          v19 = v18 + 1;
        else
          v19 = 0;
        if (v18)
          v17 = (uint64_t)&v18[*v18 + 1];
        while (v19 != (_DWORD *)v17)
        {
          if (((*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 40))(a1, 16 * (*v19 & 0xFFFFFFFE)) & 1) == 0)
            goto LABEL_27;
          ++v19;
        }
        (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 24))(a1, a2);
      }
    }
  }
LABEL_27:
  if (v26)
    v20 = v25 == 0;
  else
    v20 = 1;
  if (!v20)
  {
    v21 = v24;
    v22 = __ldxr(v24);
    if (v22 == 1)
    {
      if (!__stlxr(0, v24))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v21, 0, v7, v8, v9, v10, v11, v12);
  }
}

void JSC::ScriptExecutable::visitCodeBlockEdge<JSC::SlotVisitor>(uint64_t a1, unint64_t a2)
{
  unsigned __int8 *v4;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE v28[8];
  unsigned __int8 *v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)(a2 + 16);
  v31 = 0;
  v29 = (unsigned __int8 *)(a2 + 16);
  v30 = 1;
  if (__ldaxr((unsigned __int8 *)(a2 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_4;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v4);
LABEL_4:
  v31 = 1;
  v6 = JSC::CodeBlock::shouldVisitStrongly<JSC::SlotVisitor>(a2, (uint64_t)v28, a1);
  if (a2 && v6)
  {
    if ((a2 & 8) != 0)
    {
      if ((*(_BYTE *)(a2 - 79) & 1) == 0)
        goto LABEL_39;
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 132);
      if (*(_DWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 0x20) != v13)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(a2 & 0xFFFFFFFFFFFFC000), v13, v7, v8, v9, v10, v11, v12);
      if (((*(_QWORD *)((a2 & 0xFFFFFFFFFFFFC000) + 8 * ((a2 >> 10) & 0xF) + 0x28) >> (a2 >> 4)) & 1) == 0)
        goto LABEL_39;
    }
    if (!*(_QWORD *)(a1 + 168))
      goto LABEL_11;
LABEL_39:
    JSC::SlotVisitor::appendSlow(a1, a2, 0, v8, v9, v10, v11, v12);
  }
LABEL_11:
  v14 = *(_QWORD *)(a2 + 120);
  if (v14)
  {
    if ((*(_BYTE *)(v14 + 12) & 0xFE) == 4)
    {
      v25 = *(_QWORD *)(a2 + 192);
      if (v25)
      {
        if ((v25 & 8) != 0)
        {
          if ((*(_BYTE *)(v25 - 79) & 1) != 0)
            goto LABEL_31;
        }
        else
        {
          v26 = v25 & 0xFFFFFFFFFFFFC000;
          if (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a1 + 132))
          {
            v27 = *(_QWORD *)(a2 + 192);
            JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000), *(_DWORD *)(a1 + 132), v7, v8, v9, v10, v11, v12);
            v25 = v27;
          }
          if (((*(_QWORD *)(v26 + 8 * ((v25 >> 10) & 0xF) + 40) >> (v25 >> 4)) & 1) != 0)
          {
LABEL_31:
            if (!*(_QWORD *)(a1 + 168))
              goto LABEL_13;
          }
        }
        JSC::SlotVisitor::appendSlow(a1, v25, 0, v8, v9, v10, v11, v12);
      }
    }
  }
LABEL_13:
  v15 = *(_QWORD *)(a2 + 8);
  if (v15)
  {
    if ((v15 & 8) != 0)
    {
      if ((*(_BYTE *)(v15 - 79) & 1) == 0)
        goto LABEL_37;
    }
    else
    {
      v16 = *(_DWORD *)(a1 + 132);
      if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) != v16)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v15 & 0xFFFFFFFFFFFFC000), v16, v7, v8, v9, v10, v11, v12);
      if (((*(_QWORD *)((v15 & 0xFFFFFFFFFFFFC000) + 8 * ((v15 >> 10) & 0xF) + 0x28) >> (v15 >> 4)) & 1) == 0)
        goto LABEL_37;
    }
    if (!*(_QWORD *)(a1 + 168))
      goto LABEL_19;
LABEL_37:
    JSC::SlotVisitor::appendSlow(a1, v15, 0, v8, v9, v10, v11, v12);
  }
LABEL_19:
  JSC::CodeBlock::propagateTransitions<JSC::SlotVisitor>((_QWORD *)a2, (uint64_t)v28, a1, v8, v9, v10, v11, v12);
  JSC::CodeBlock::determineLiveness<JSC::SlotVisitor>(a2, (uint64_t)v28, a1);
  if (v31 && v30)
  {
    v23 = v29;
    v24 = __ldxr(v29);
    if (v24 == 1)
    {
      if (!__stlxr(0, v29))
        return;
    }
    else
    {
      __clrex();
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v23, 0, v17, v18, v19, v20, v21, v22);
  }
}

unsigned int *JSC::ScriptExecutable::destroy(JSC::ScriptExecutable *this, JSC::JSCell *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *, JSC::JSCell *))(*(_QWORD *)v3 + 8))(v3, a2);
    else
      --v3[2];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *, JSC::JSCell *))(*(_QWORD *)v4 + 32))(v4, a2);
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    v9 = result + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 32))(result);
    }
  }
  return result;
}

uint64_t JSC::ScriptExecutable::ScriptExecutable(uint64_t result, unint64_t a2, uint64_t a3, uint64_t *a4, char a5, char a6, int a7, int a8, char a9, char a10)
{
  int v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;

  v10 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)result = a2 >> 4;
  *(_DWORD *)(result + 4) = v10;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  v11 = *a4;
  if (*a4)
    ++*(_DWORD *)(v11 + 8);
  *(_QWORD *)(result + 40) = v11;
  *(_QWORD *)(result + 48) = a4[1];
  *(_QWORD *)(result + 56) = a4[2];
  *(_BYTE *)(result + 64) = a10;
  *(_BYTE *)(result + 65) = 0;
  *(_WORD *)(result + 66) = 0;
  *(_BYTE *)(result + 68) = *(_BYTE *)(result + 68) & 0xFC | a5 & 3;
  *(_BYTE *)(result + 69) = 0;
  if (a8)
    v12 = 128;
  else
    v12 = 0;
  if (a7)
    v13 = 48;
  else
    v13 = 32;
  *(_WORD *)(result + 70) = *(_WORD *)(result + 70) & 0xF000 | (v13 | v12) & 0xF0FF | ((a6 & 3) << 8) & 0xF3FF | ((a9 & 3) << 10);
  return result;
}

unsigned int *JSC::ScriptExecutable::clearCode(unint64_t this, JSC::IsoCellSet *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  v4 = *(unsigned int **)(this + 8);
  *(_QWORD *)(this + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 32))(v4);
    }
  }
  result = *(unsigned int **)(this + 16);
  *(_QWORD *)(this + 16) = 0;
  if (result)
  {
    v9 = result + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 32))(result);
    }
  }
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  switch(*(_BYTE *)(this + 5))
  {
    case 9:
    case 0xB:
      v12 = (char *)(this + 72);
      break;
    case 0xA:
      v12 = (char *)(this + 72);
      *(_QWORD *)(this + 96) = 0;
      break;
    case 0xC:
      v12 = (char *)(this + 96);
      break;
    default:
      __break(0xC471u);
      JUMPOUT(0x198BAC564);
  }
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  if ((this & 8) != 0)
  {
    v18 = *(unsigned __int8 *)(this - 76);
    v19 = (char *)a2 + ((v18 >> 3) & 0x1C);
    v20 = 1 << v18;
    v21 = (unsigned int *)(v19 + 16);
    while (1)
    {
      v22 = *v21;
      if ((*v21 & v20) == 0)
        break;
      v23 = __ldxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 & ~v20, v21))
          return result;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7)
                                + (*(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12) & 0xFFFFFFF8)
                                + 8)
                    + 8 * (*(_DWORD *)(*(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 12) & 7));
    if (v13)
    {
      v14 = 1 << (this >> 4);
      v15 = (unint64_t *)(v13 + 8 * ((this >> 10) & 0xF));
      while (1)
      {
        v16 = *v15;
        if ((*v15 & v14) == 0)
          break;
        v17 = __ldxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 & ~v14, v15))
            return result;
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  return result;
}

void JSC::ScriptExecutable::installCode(unint64_t a1, JSC::VM *a2, JSC::CodeBlock *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8x8_t a9)
{
  int v9;
  unsigned int v10;
  unint64_t v11;
  JSC::VM *v12;
  int v14;
  JSC::Profiler::Database *v15;
  JSC::CallLinkInfo *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  unsigned __int8 *v62;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  WTF *v75[2];
  WTF *v76;
  __int128 v77;
  _BYTE v78[128];
  uint64_t v79;

  v9 = a5;
  v10 = a4;
  v11 = (unint64_t)a3;
  v12 = a2;
  v79 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v14 = a6;
    v15 = *(JSC::Profiler::Database **)(*((_QWORD *)a3 + 9) + 93016);
    if (v15)
    {
      v75[1] = (WTF *)off_1E3572250;
      v76 = (WTF *)v78;
      v77 = xmmword_199122F80;
      v78[0] = 0;
      v53 = WTF::fastMalloc((WTF *)0x11);
      *(_DWORD *)v53 = 1;
      *(_QWORD *)(v53 + 8) = 0;
      v75[0] = (WTF *)v53;
      *(_BYTE *)(v53 + 16) = 0;
      if (v76 != (WTF *)v78)
        WTF::fastFree((unint64_t)v76, v54, v55, v56, v57, v58, v59, v60);
      JSC::Profiler::Database::logEvent(v15, v11, "installCode", v75, v57, v58, v59, v60);
      v61 = v75[0];
      v75[0] = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 1)
          WTF::fastFree((unint64_t)v61, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        else
          --*(_DWORD *)v61;
      }
    }
    if ((v14 | 8) == 9)
    {
      if ((v11 & 8) != 0)
      {
        if ((*(_BYTE *)(v11 - 79) & 1) != 0)
          goto LABEL_4;
      }
      else if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) == *((_DWORD *)v12 + 108)
             && ((*(_QWORD *)((v11 & 0xFFFFFFFFFFFFC000) + 8 * ((v11 >> 10) & 0xF) + 0x28) >> (v11 >> 4)) & 1) != 0)
      {
        goto LABEL_4;
      }
      v11 = 0;
    }
  }
LABEL_4:
  if (v10 == 2)
  {
    if (!v9)
    {
      v16 = *(JSC::CallLinkInfo **)(a1 + 96);
      if (v11)
      {
        *(_QWORD *)(a1 + 96) = v11;
        if (*((_DWORD *)v12 + 190) >= *(unsigned __int8 *)(a1 + 7))
          JSC::Heap::writeBarrierSlowPath((uint64_t)v12 + 192, a1);
        goto LABEL_9;
      }
      v17 = 0;
      *(_QWORD *)(a1 + 96) = 0;
      goto LABEL_12;
    }
    v16 = *(JSC::CallLinkInfo **)(a1 + 104);
    if (!v11)
    {
      *(_QWORD *)(a1 + 104) = 0;
      goto LABEL_62;
    }
    *(_QWORD *)(a1 + 104) = v11;
  }
  else
  {
    if (v10 > 1 && v10 != 3)
    {
      v16 = 0;
      goto LABEL_62;
    }
    v16 = *(JSC::CallLinkInfo **)(a1 + 72);
    if (!v11)
    {
      *(_QWORD *)(a1 + 72) = 0;
      goto LABEL_62;
    }
    *(_QWORD *)(a1 + 72) = v11;
  }
  if (*((_DWORD *)v12 + 190) >= *(unsigned __int8 *)(a1 + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)v12 + 192, a1);
LABEL_62:
  if (v9 == 1)
  {
    if (v11)
    {
      v42 = *(_QWORD *)(v11 + 120);
      if (v42)
      {
        v73 = (unsigned int *)(v42 + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 + 1, v73));
      }
    }
    else
    {
      v42 = 0;
    }
    v43 = *(unsigned int **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42;
    if (v43)
    {
      v44 = v43 + 2;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        atomic_store(1u, v43 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 32))(v43);
      }
    }
    v24 = (char *)(a1 + 32);
    goto LABEL_18;
  }
  if (!v9)
  {
    if (v11)
    {
LABEL_9:
      v17 = *(_QWORD *)(v11 + 120);
      if (v17)
      {
        v18 = (unsigned int *)(v17 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
      goto LABEL_12;
    }
    v17 = 0;
LABEL_12:
    v20 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v17;
    if (v20)
    {
      v21 = v20 + 2;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v20 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 32))(v20);
      }
    }
    v24 = (char *)(a1 + 24);
LABEL_18:
    *(_QWORD *)v24 = 0;
  }
  v25 = (uint64_t *)(a1 & 0xFFFFFFFFFFFFC000 | 0x10);
  if ((a1 & 8) != 0)
    v25 = (uint64_t *)(a1 - 72);
  v26 = *v25;
  if (!*(_QWORD *)(a1 + 8) && !*(_QWORD *)(a1 + 16) && !*(_QWORD *)(a1 + 24) && !*(_QWORD *)(a1 + 32))
  {
    v36 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C));
    if (v36 != &JSC::FunctionExecutable::s_info)
    {
      if (v36 == &JSC::EvalExecutable::s_info || v36 == &JSC::ProgramExecutable::s_info)
      {
        if (*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 80))
          goto LABEL_22;
      }
      else if (v36 == &JSC::ModuleProgramExecutable::s_info
             && (*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 80) || *(_QWORD *)(a1 + 96)))
      {
        goto LABEL_22;
      }
LABEL_51:
      if ((a1 & 8) != 0)
      {
        v67 = *(unsigned __int8 *)(a1 - 76);
        v68 = v26 + ((v67 >> 3) & 0x1C);
        v69 = 1 << v67;
        v70 = (unsigned int *)(v68 + 264);
        while (1)
        {
          v71 = *v70;
          if ((*v70 & v69) == 0)
            break;
          v72 = __ldxr(v70);
          if (v72 == v71)
          {
            if (!__stxr(v71 & ~v69, v70))
              goto LABEL_30;
          }
          else
          {
            __clrex();
          }
        }
      }
      else
      {
        v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 304)
                                    + (*(_DWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFC000) + 12) & 0xFFFFFFF8)
                                    + 8)
                        + 8 * (*(_DWORD *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFC000) + 12) & 7));
        if (v37)
        {
          v38 = 1 << (a1 >> 4);
          v39 = (unint64_t *)(v37 + 8 * ((a1 >> 10) & 0xF));
          while (1)
          {
            v40 = *v39;
            if ((*v39 & v38) == 0)
              break;
            v41 = __ldxr(v39);
            if (v41 == v40)
            {
              if (!__stxr(v40 & ~v38, v39))
                goto LABEL_30;
            }
            else
            {
              __clrex();
            }
          }
        }
      }
      goto LABEL_30;
    }
    if (!*(_QWORD *)(a1 + 96) && !*(_QWORD *)(a1 + 104))
      goto LABEL_51;
  }
LABEL_22:
  if ((a1 & 8) != 0)
  {
    v47 = *(unsigned __int8 *)(a1 - 76);
    v48 = v26 + ((v47 >> 3) & 0x1C);
    v49 = 1 << v47;
    v50 = (unsigned int *)(v48 + 264);
    while (1)
    {
      v51 = *v50;
      if ((*v50 & v49) != 0)
        break;
      v52 = __ldxr(v50);
      if (v52 == v51)
      {
        if (!__stxr(v51 | v49, v50))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
  else
  {
    a2 = (JSC::VM *)*(unsigned int *)(*(_QWORD *)(a1 & 0xFFFFFFFFFFFFC000) + 12);
    v27 = *(_OWORD **)(*(_QWORD *)(*(_QWORD *)(v26 + 304) + (a2 & 0xFFFFFFF8) + 8)
                     + 8 * (a2 & 7));
    if (!v27)
      v27 = JSC::IsoCellSet::addSlow((JSC::IsoCellSet *)(v26 + 248), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v28 = 1 << (a1 >> 4);
    v29 = (unint64_t *)v27 + ((a1 >> 10) & 0xF);
    while (1)
    {
      v30 = *v29;
      if ((*v29 & v28) != 0)
        break;
      v31 = __ldxr(v29);
      if (v31 == v30)
      {
        if (!__stxr(v30 | v28, v29))
          break;
      }
      else
      {
        __clrex();
      }
    }
  }
LABEL_30:
  if (!v11)
    goto LABEL_38;
  if (*(_QWORD *)(v11 + 64) != a1)
  {
    __break(0xC471u);
    JUMPOUT(0x198BACA74);
  }
  v32 = *(_QWORD *)(v11 + 120);
  if (!v32 || *(unsigned __int8 *)(v32 + 12) <= 1u)
  {
    __break(0xC471u);
    JUMPOUT(0x198BAC7BCLL);
  }
  *(_BYTE *)(v11 + 18) &= ~0x20u;
  if (BYTE1(qword_1ECF4C332))
    WTF::dataLog<char [12],JSC::CodeBlock,char [2]>(v11);
  v33 = *((_QWORD *)v12 + 11627);
  if (!v33)
    goto LABEL_37;
  v62 = (unsigned __int8 *)(v33 + 112);
  if (__ldaxr((unsigned __int8 *)(v33 + 112)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v62))
  {
    goto LABEL_99;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v33 + 112);
LABEL_99:
  JSC::Profiler::Database::ensureBytecodesFor(v33, (uint64_t)a2, v11, a4, a5, a6, a7, a8);
  v65 = __ldxr(v62);
  if (v65 == 1)
  {
    if (!__stlxr(0, v62))
      goto LABEL_37;
  }
  else
  {
    __clrex();
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v33 + 112), 0, v64, a4, a5, a6, a7, a8);
LABEL_37:
  v34 = *(_QWORD *)(v11 + 8);
  v35 = *(_QWORD *)(v34 + 2016);
  if (v35)
  {
    JSC::Debugger::applyBreakpoints(*(JSC::Debugger **)(v34 + 2016), (JSC::CodeBlock *)v11);
    if ((*(_WORD *)(v35 + 48) & 0x200) != 0)
    {
      *(_DWORD *)(v11 + 40) |= 2u;
      v66 = *(_QWORD *)(v11 + 120);
      if (v66)
      {
        if ((*(_BYTE *)(v66 + 12) & 0xFE) == 4)
          JSC::CodeBlock::jettison(v11, 3, 0, 0);
      }
    }
  }
LABEL_38:
  if (v16)
    JSC::CodeBlock::unlinkOrUpgradeIncomingCalls(v16, v12, (JSC::CodeBlock *)v11, a9, a4, a5, a6, a7, a8);
  if (a1)
  {
    if (*((_DWORD *)v12 + 190) >= *(unsigned __int8 *)(a1 + 7))
      JSC::Heap::writeBarrierSlowPath((uint64_t)v12 + 192, a1);
  }
}

uint64_t JSC::ScriptExecutable::newCodeBlockFor(JSC::ModuleProgramExecutable *this, JSC::VM *a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC **v10;
  JSC *v11;
  uint64_t *v12;
  char **v13;
  JSC::JSGlobalObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  double v45;
  float v46;
  WTF::AtomStringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t UnlinkedCodeBlock;
  uint64_t SlowCase;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  double v73;
  float v74;
  __int16 v75;
  JSC::VM *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  SourceProvider *var0;
  unint64_t v94;
  unint64_t v95;
  SourceCode v96;
  WTF::StringImpl *v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  int v105;
  __int16 v106;

  v10 = (JSC **)((unint64_t)a4 & 0xFFFFFFFFFFFFC000 | 8);
  if ((a4 & 8) != 0)
    v10 = (JSC **)((char *)a4 - 16);
  v11 = *v10;
  v12 = (uint64_t *)((char *)*v10 + 41096);
  v13 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C));
  if (v13 == &JSC::EvalExecutable::s_info)
  {
    if ((_DWORD)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD1E0);
    }
    if (*((_QWORD *)this + 9))
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD200);
    }
    if (a3)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD220);
    }
    UnlinkedCodeBlock = *((_QWORD *)this + 10);
    SlowCase = *v12;
    if (*v12 >= (unint64_t)v12[1])
    {
      SlowCase = v12[2];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM(v11, a2, 0, (uint64_t)a2, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)v11 + 41072, (char *)v11 + 192, 240, 0, 0);
        goto LABEL_57;
      }
      v94 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
      v12[1] = SlowCase + HIDWORD(v94);
      v12[2] = SlowCase + (int)v94;
    }
    *v12 = SlowCase + 240;
LABEL_57:
    *(_DWORD *)SlowCase = 0;
    v67 = v12[87];
    goto LABEL_47;
  }
  if (v13 == &JSC::ProgramExecutable::s_info)
  {
    if ((_DWORD)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD0C8);
    }
    if (*((_QWORD *)this + 9))
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD0E8);
    }
    if (a3)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD108);
    }
    UnlinkedCodeBlock = *((_QWORD *)this + 10);
    SlowCase = *v12;
    if (*v12 >= (unint64_t)v12[1])
    {
      SlowCase = v12[2];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM(v11, a2, 0, (uint64_t)a2, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)v11 + 41072, (char *)v11 + 192, 240, 0, 0);
        goto LABEL_46;
      }
      v85 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
      v12[1] = SlowCase + HIDWORD(v85);
      v12[2] = SlowCase + (int)v85;
    }
    *v12 = SlowCase + 240;
LABEL_46:
    *(_DWORD *)SlowCase = 0;
    v67 = v12[85];
    goto LABEL_47;
  }
  v14 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28);
  if (v13 == &JSC::ModuleProgramExecutable::s_info)
  {
    if ((_DWORD)a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD264);
    }
    if (*((_QWORD *)this + 9))
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD284);
    }
    if (a3)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD2A4);
    }
    UnlinkedCodeBlock = JSC::ModuleProgramExecutable::getUnlinkedCodeBlock(this, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28));
    if (*((_DWORD *)v11 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)v76, v77, v78, v79, v80, v81, v82))
    {
      return 0;
    }
    SlowCase = *v12;
    if (*v12 >= (unint64_t)v12[1])
    {
      SlowCase = v12[2];
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM(v11, v76, v77, v78, v79, v80, v81, v82);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((char *)v11 + 41072, (char *)v11 + 192, 240, 0, 0);
        goto LABEL_64;
      }
      v95 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
      v12[1] = SlowCase + HIDWORD(v95);
      v12[2] = SlowCase + (int)v95;
    }
    *v12 = SlowCase + 240;
LABEL_64:
    *(_DWORD *)SlowCase = 0;
    v67 = v12[86];
LABEL_47:
    v68 = JSC::CodeBlock::CodeBlock(SlowCase, (uint64_t)v11, v67, (uint64_t)this, UnlinkedCodeBlock, a4);
    if (JSC::CodeBlock::finishCreation(v68, v11, (uint64_t)this, UnlinkedCodeBlock, a4, v69, v70, v71, v72, v73, v74))return SlowCase;
    else
      return 0;
  }
  if (v13 != &JSC::FunctionExecutable::s_info)
  {
    __break(0xC471u);
    JUMPOUT(0x198BAD02CLL);
  }
  if (!a3)
  {
    __break(0xC471u);
    JUMPOUT(0x198BAD04CLL);
  }
  v15 = 104;
  if (!(_DWORD)a2)
    v15 = 96;
  v16 = *(_QWORD *)((char *)this + v15);
  if (v16)
  {
    __break(0xC471u);
    JUMPOUT(0x198BAD06CLL);
  }
  LODWORD(v97) = 0x100000;
  v98 = 0u;
  v99 = 0u;
  v100 = 0;
  v101 = -1;
  v102 = -1;
  v103 = -1;
  v104 = 0;
  v105 = -1;
  v106 = 0;
  v17 = *((_QWORD *)v14 + 252);
  if (v17)
    LODWORD(v16) = (*(unsigned __int16 *)(v17 + 48) >> 6) & 1;
  if (byte_1ECF4C274)
    LOBYTE(v16) = 1;
  if (byte_1ECF4C275)
    LOBYTE(v16) = 1;
  if (*(_QWORD *)(*((_QWORD *)v14 + 7) + 93168))
    LOBYTE(v16) = v16 | 2;
  if (*(_QWORD *)(*((_QWORD *)v14 + 7) + 93280))
    LOBYTE(v16) = v16 | 4;
  v18 = *((_QWORD *)this + 11);
  if (((1 << *(_BYTE *)(v18 + 50)) & 0x8182) != 0)
  {
    v75 = *((_WORD *)this + 35);
    if ((v75 & 0x40) == 0)
    {
      *((_BYTE *)this + 69) = v16;
      *((_WORD *)this + 35) = v75 | 0x40;
    }
  }
  v19 = (uint64_t *)((char *)this + 40);
  v20 = JSC::UnlinkedFunctionExecutable::unlinkedCodeBlockFor(v18, (uint64_t)v11);
  v28 = v20;
  v29 = *((_QWORD *)this + 11);
  v30 = *(_QWORD *)(v29 + 8);
  v31 = *(_WORD *)(v29 + 48) & 0x3FFF;
  v32 = (*(unsigned __int8 *)(v29 + 51) >> 2) & 3;
  v33 = *((unsigned __int8 *)this + 5);
  if (v33 == 12)
  {
    v34 = *((_DWORD *)this + 14);
    v35 = *((_QWORD *)this + 9);
    if (v35)
    {
      v83 = *(_DWORD *)(v35 + 8);
      LODWORD(v35) = *(_DWORD *)(v35 + 12);
      LODWORD(v29) = v34 + v83 + 1;
    }
    else
    {
      v36 = *(_QWORD *)(v29 + 24);
      LODWORD(v29) = (HIDWORD(v30) & 0x7FFFFFFF) + v34 + 1;
      v37 = v36 & 0x7FFFFFFF;
      if ((v30 & 0x7FFFFFFF00000000) != 0)
        v38 = 1;
      else
        v38 = *((_DWORD *)this + 15) + 1;
      LODWORD(v35) = v38 + v37;
    }
  }
  else
  {
    v35 = HIDWORD(v29);
  }
  *((_WORD *)this + 33) = v31;
  *((_BYTE *)this + 68) = *((_BYTE *)this + 68) & 0xFC | v32;
  *((_WORD *)this + 35) = *((_WORD *)this + 35) & 0xFFFE | (v30 >> 63);
  if (v33 != 12)
  {
    *((_DWORD *)this + 22) = v29;
    *((_DWORD *)this + 23) = v35;
  }
  if (v20)
  {
    v39 = *v12;
    if (*v12 >= (unint64_t)v12[1])
    {
      v39 = v12[2];
      if ((v39 & 1) != 0)
      {
        JSC::sanitizeStackForVM(v11, v21, v22, v23, v24, v25, v26, v27);
        v39 = JSC::LocalAllocator::allocateSlowCase((char *)v11 + 41072, (char *)v11 + 192, 240, 0, 0);
LABEL_33:
        *(_DWORD *)v39 = 0;
        v40 = JSC::CodeBlock::CodeBlock(v39, (uint64_t)v11, v12[88], (uint64_t)this, v28, a4);
        if (JSC::CodeBlock::finishCreation(v40, v11, (uint64_t)this, v28, a4, v41, v42, v43, v44, v45, v46))v54 = v39;
        else
          v54 = 0;
        goto LABEL_36;
      }
      v84 = *(_QWORD *)(v39 + 8) ^ v12[3];
      v12[1] = v39 + HIDWORD(v84);
      v12[2] = v39 + (int)v84;
    }
    *v12 = v39 + 240;
    goto LABEL_33;
  }
  v86 = *v19;
  if (*v19)
    ++*(_DWORD *)(v86 + 8);
  v96.var0.var0 = (SourceProvider *)v86;
  *(_OWORD *)&v96.var1 = *((_OWORD *)this + 3);
  v87 = JSC::ParserError::toErrorObject(&v97, v14, &v96, 0xFFFFFFFFLL, v24, v25, v26, v27);
  JSC::VM::throwException(v11, v14, v87, v88, v89, v90, v91, v92);
  var0 = v96.var0.var0;
  v96.var0.var0 = 0;
  if (var0)
  {
    if (*((_DWORD *)var0 + 2) != 1)
    {
      v54 = 0;
      --*((_DWORD *)var0 + 2);
      goto LABEL_36;
    }
    (*(void (**)(SourceProvider *))(*(_QWORD *)var0 + 8))(var0);
  }
  v54 = 0;
LABEL_36:
  v55 = v104;
  v104 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
    {
      WTF::StringImpl::~StringImpl(v55, v47, v48, v49, v50, v51, v52, v53);
      WTF::fastFree(v57, v58, v59, v60, v61, v62, v63, v64);
    }
    else
    {
      *(_DWORD *)v55 -= 2;
    }
  }
  return v54;
}

uint64_t JSC::ScriptExecutable::lastLine(JSC::ScriptExecutable *this)
{
  uint64_t v1;
  int v2;

  if (*((_BYTE *)this + 5) != 12)
    return *((unsigned int *)this + 22);
  v1 = *((_QWORD *)this + 9);
  if (v1)
    v2 = *(_DWORD *)(v1 + 8);
  else
    v2 = *(_DWORD *)(*((_QWORD *)this + 11) + 12) & 0x7FFFFFFF;
  return (*((_DWORD *)this + 14) + v2 + 1);
}

uint64_t JSC::ScriptExecutable::endColumn(JSC::ScriptExecutable *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;

  if (*((_BYTE *)this + 5) != 12)
    return *((unsigned int *)this + 23);
  v1 = *((_QWORD *)this + 9);
  if (v1)
    return *(unsigned int *)(v1 + 12);
  v2 = *((_QWORD *)this + 11);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_DWORD *)(v2 + 24) & 0x7FFFFFFF;
  if ((v3 & 0x7FFFFFFF00000000) != 0)
    v5 = 1;
  else
    v5 = *((_DWORD *)this + 15) + 1;
  return (v4 + v5);
}

unint64_t JSC::ScriptExecutable::newReplacementCodeBlockFor(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM **v8;
  JSC::VM *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  char **v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  char **v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  char **v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  JSC::CodeBlock *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v8 = (JSC::VM **)(a1 & 0xFFFFFFFFFFFFC000 | 8);
  if ((a1 & 8) != 0)
    v8 = (JSC::VM **)(a1 - 16);
  v9 = *v8;
  v10 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x4C));
  if (v10 == &JSC::EvalExecutable::s_info)
  {
    if (a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD9C0);
    }
    v12 = *(_QWORD *)(a1 + 72);
    v35 = *(_QWORD *)(v12 + 120);
    if (v35)
    {
      LODWORD(v35) = *(unsigned __int8 *)(v35 + 12);
      v36 = v35 & 0xFE;
      if (v36 == 2)
        goto LABEL_48;
    }
    else
    {
      v36 = 0;
    }
    v48 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C));
    if (v48 == &JSC::FunctionCodeBlock::s_info)
    {
      v49 = *(_QWORD *)(v12 + 64);
      v50 = (uint64_t *)(v49 + 96);
      v51 = (uint64_t *)(v49 + 104);
      if (*(int *)(*(_QWORD *)(v12 + 56) + 20) >= 0)
        v51 = v50;
    }
    else
    {
      if (v48 != &JSC::EvalCodeBlock::s_info
        && v48 != &JSC::ProgramCodeBlock::s_info
        && v48 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x198BADA40);
      }
      v51 = (uint64_t *)(*(_QWORD *)(v12 + 64) + 72);
    }
    v52 = *v51;
    if (!v52)
    {
      if (v36 != 4)
      {
        if ((_DWORD)v35)
          goto LABEL_113;
LABEL_48:
        v15 = JSC::EvalCodeBlock::create((uint64_t)v9, 0, v12, a4, a5, a6, a7, a8);
        v16 = *(unsigned int **)(v12 + 120);
        if (!v16)
        {
          __break(0xC471u);
          JUMPOUT(0x198BAD9E0);
        }
        v37 = v16 + 2;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 + 1, v37));
        do
        {
          v39 = __ldaxr(v37);
          v20 = --v39 == 0;
        }
        while (__stlxr(v39, v37));
        goto LABEL_15;
      }
      v52 = *(_QWORD *)(a1 + 72);
    }
    if (*(_QWORD *)(v52 + 192))
      v12 = *(_QWORD *)(v52 + 192);
    else
      v12 = v52;
    v53 = *(_QWORD *)(v12 + 120);
    if (v53)
    {
      v54 = *(unsigned __int8 *)(v53 + 12);
      if ((v54 & 0xFE) != 2 && v54 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198BAD8A0);
      }
    }
    goto LABEL_48;
  }
  if (v10 == &JSC::ProgramExecutable::s_info)
  {
    if (a2)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD95CLL);
    }
    v12 = *(_QWORD *)(a1 + 72);
    v30 = *(_QWORD *)(v12 + 120);
    if (v30)
    {
      LODWORD(v30) = *(unsigned __int8 *)(v30 + 12);
      v31 = v30 & 0xFE;
      if (v31 == 2)
        goto LABEL_40;
    }
    else
    {
      v31 = 0;
    }
    v40 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C));
    if (v40 == &JSC::FunctionCodeBlock::s_info)
    {
      v41 = *(_QWORD *)(v12 + 64);
      v42 = (uint64_t *)(v41 + 96);
      v43 = (uint64_t *)(v41 + 104);
      if (*(int *)(*(_QWORD *)(v12 + 56) + 20) >= 0)
        v43 = v42;
    }
    else
    {
      if (v40 != &JSC::EvalCodeBlock::s_info
        && v40 != &JSC::ProgramCodeBlock::s_info
        && v40 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x198BADA10);
      }
      v43 = (uint64_t *)(*(_QWORD *)(v12 + 64) + 72);
    }
    v44 = *v43;
    if (!v44)
    {
      if (v31 != 4)
      {
        if ((_DWORD)v30)
        {
          __break(0xC471u);
          JUMPOUT(0x198BADAA4);
        }
        goto LABEL_40;
      }
      v44 = *(_QWORD *)(a1 + 72);
    }
    if (*(_QWORD *)(v44 + 192))
      v12 = *(_QWORD *)(v44 + 192);
    else
      v12 = v44;
    v45 = *(_QWORD *)(v12 + 120);
    if (v45)
    {
      v46 = *(unsigned __int8 *)(v45 + 12);
      if ((v46 & 0xFE) != 2 && v46 != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x198BAD810);
      }
    }
LABEL_40:
    v15 = JSC::ProgramCodeBlock::create((uint64_t)v9, 0, v12, a4, a5, a6, a7, a8);
    v16 = *(unsigned int **)(v12 + 120);
    if (!v16)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD97CLL);
    }
    v32 = v16 + 2;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 + 1, v32));
    do
    {
      v34 = __ldaxr(v32);
      v20 = --v34 == 0;
    }
    while (__stlxr(v34, v32));
    goto LABEL_15;
  }
  if (v10 != &JSC::ModuleProgramExecutable::s_info)
  {
    if (v10 != &JSC::FunctionExecutable::s_info)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAD730);
    }
    v11 = 104;
    if (!a2)
      v11 = 96;
    v12 = *(_QWORD *)(a1 + v11);
    v13 = *(_QWORD *)(v12 + 120);
    if (v13)
    {
      LODWORD(v13) = *(unsigned __int8 *)(v13 + 12);
      v14 = v13 & 0xFE;
      if (v14 == 2)
        goto LABEL_11;
    }
    else
    {
      v14 = 0;
    }
    v22 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C));
    if (v22 == &JSC::FunctionCodeBlock::s_info)
    {
      v23 = *(_QWORD *)(v12 + 64);
      v24 = (uint64_t *)(v23 + 96);
      v25 = (uint64_t *)(v23 + 104);
      if (*(int *)(*(_QWORD *)(v12 + 56) + 20) >= 0)
        v25 = v24;
    }
    else
    {
      if (v22 != &JSC::EvalCodeBlock::s_info
        && v22 != &JSC::ProgramCodeBlock::s_info
        && v22 != &JSC::ModuleProgramCodeBlock::s_info)
      {
        __break(0xC471u);
        JUMPOUT(0x198BAD780);
      }
      v25 = (uint64_t *)(*(_QWORD *)(v12 + 64) + 72);
    }
    v26 = *v25;
    if (!v26)
    {
      if (v14 != 4)
      {
        if ((_DWORD)v13)
        {
          __break(0xC471u);
          JUMPOUT(0x198BAD9A0);
        }
        goto LABEL_11;
      }
      v26 = v12;
    }
    if (*(_QWORD *)(v26 + 192))
      v12 = *(_QWORD *)(v26 + 192);
    else
      v12 = v26;
    v27 = *(_QWORD *)(v12 + 120);
    if (!v27 || ((v28 = *(unsigned __int8 *)(v27 + 12), (v28 & 0xFE) != 2) ? (v29 = v28 == 0) : (v29 = 1), v29))
    {
LABEL_11:
      v15 = JSC::FunctionCodeBlock::create((uint64_t)v9, 0, v12, a4, a5, a6, a7, a8);
      v16 = *(unsigned int **)(v12 + 120);
      if (!v16)
      {
        __break(0xC471u);
        JUMPOUT(0x198BAD750);
      }
      v17 = v16 + 2;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 + 1, v17));
      do
      {
        v19 = __ldaxr(v17);
        v20 = --v19 == 0;
      }
      while (__stlxr(v19, v17));
LABEL_15:
      if (v20)
      {
        atomic_store(1u, v16 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 32))(v16);
      }
      *(_QWORD *)(v15 + 192) = v12;
      if (*((_DWORD *)v9 + 190) >= *(unsigned __int8 *)(v15 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v9 + 192, v15);
      return v15;
    }
LABEL_113:
    __break(0xC471u);
    JUMPOUT(0x198BAD5F0);
  }
  if (a2)
  {
    __break(0xC471u);
    JUMPOUT(0x198BADA60);
  }
  v56 = (JSC::CodeBlock *)JSC::CodeBlock::baselineVersion(*(_QWORD *)(a1 + 72));
  v15 = JSC::ModuleProgramCodeBlock::create((uint64_t)v9, 0, (uint64_t)v56, v57, v58, v59, v60, v61);
  JSC::CodeBlock::setAlternative((JSC::CodeBlock *)v15, v9, v56);
  return v15;
}

unint64_t JSC::EvalCodeBlock::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  uint64_t *v21;
  unint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t SlowCase;

  v10 = (_QWORD *)(a1 + 41096);
  v11 = *(_QWORD *)(a1 + 41096);
  if (v11 < *(_QWORD *)(a1 + 41104))
    goto LABEL_2;
  v11 = *(_QWORD *)(a1 + 41112);
  if ((v11 & 1) == 0)
  {
    v22 = *(_QWORD *)(v11 + 8) ^ *(_QWORD *)(a1 + 41120);
    *(_QWORD *)(a1 + 41104) = v11 + HIDWORD(v22);
    *(_QWORD *)(a1 + 41112) = v11 + (int)v22;
LABEL_2:
    *v10 = v11 + 240;
    goto LABEL_3;
  }
  v30 = (_QWORD *)(a1 + 41096);
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 41072, a1 + 192, 240, 0, 0);
  v10 = v30;
  v11 = SlowCase;
LABEL_3:
  *(_DWORD *)v11 = 0;
  JSC::CodeBlock::CodeBlock(v11, a1, v10[87], 0, a3);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  JSC::CodeBlock::optimizeAfterWarmUp(v11, v12);
  v19 = *(const void ***)(a3 + 224);
  if (v19)
  {
    v21 = *(uint64_t **)(v11 + 224);
    if (!v21)
    {
      v23 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      __dmb(0xAu);
      std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100]((unint64_t *)(v11 + 224), v23, v24, v25, v26, v27, v28, v29);
      v19 = *(const void ***)(a3 + 224);
      v21 = *(uint64_t **)(v11 + 224);
    }
    WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v21, v19, v13, v14, v15, v16, v17, v18);
  }
  return v11;
}

unint64_t JSC::ProgramCodeBlock::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  uint64_t *v21;
  unint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t SlowCase;

  v10 = (_QWORD *)(a1 + 41096);
  v11 = *(_QWORD *)(a1 + 41096);
  if (v11 < *(_QWORD *)(a1 + 41104))
    goto LABEL_2;
  v11 = *(_QWORD *)(a1 + 41112);
  if ((v11 & 1) == 0)
  {
    v22 = *(_QWORD *)(v11 + 8) ^ *(_QWORD *)(a1 + 41120);
    *(_QWORD *)(a1 + 41104) = v11 + HIDWORD(v22);
    *(_QWORD *)(a1 + 41112) = v11 + (int)v22;
LABEL_2:
    *v10 = v11 + 240;
    goto LABEL_3;
  }
  v30 = (_QWORD *)(a1 + 41096);
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 41072, a1 + 192, 240, 0, 0);
  v10 = v30;
  v11 = SlowCase;
LABEL_3:
  *(_DWORD *)v11 = 0;
  JSC::CodeBlock::CodeBlock(v11, a1, v10[85], 0, a3);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  JSC::CodeBlock::optimizeAfterWarmUp(v11, v12);
  v19 = *(const void ***)(a3 + 224);
  if (v19)
  {
    v21 = *(uint64_t **)(v11 + 224);
    if (!v21)
    {
      v23 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      __dmb(0xAu);
      std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100]((unint64_t *)(v11 + 224), v23, v24, v25, v26, v27, v28, v29);
      v19 = *(const void ***)(a3 + 224);
      v21 = *(uint64_t **)(v11 + 224);
    }
    WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v21, v19, v13, v14, v15, v16, v17, v18);
  }
  return v11;
}

unint64_t JSC::ModuleProgramCodeBlock::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t *v20;
  WTF::AtomStringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v10 = JSC::allocateCell<JSC::ModuleProgramCodeBlock>((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  JSC::CodeBlock::CodeBlock(v10, a1, *(_QWORD *)(a1 + 41784), 0, a3);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  JSC::CodeBlock::optimizeAfterWarmUp(v10, v11);
  v18 = *(const void ***)(a3 + 224);
  if (v18)
  {
    v20 = *(uint64_t **)(v10 + 224);
    if (!v20)
    {
      v21 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v21 = 0u;
      *((_OWORD *)v21 + 1) = 0u;
      __dmb(0xAu);
      std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100]((unint64_t *)(v10 + 224), v21, v22, v23, v24, v25, v26, v27);
      v18 = *(const void ***)(a3 + 224);
      v20 = *(uint64_t **)(v10 + 224);
    }
    WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v20, v18, v12, v13, v14, v15, v16, v17);
  }
  return v10;
}

unint64_t JSC::FunctionCodeBlock::create(uint64_t a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void **v19;
  uint64_t *v21;
  unint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t SlowCase;

  v10 = (_QWORD *)(a1 + 41096);
  v11 = *(_QWORD *)(a1 + 41096);
  if (v11 < *(_QWORD *)(a1 + 41104))
    goto LABEL_2;
  v11 = *(_QWORD *)(a1 + 41112);
  if ((v11 & 1) == 0)
  {
    v22 = *(_QWORD *)(v11 + 8) ^ *(_QWORD *)(a1 + 41120);
    *(_QWORD *)(a1 + 41104) = v11 + HIDWORD(v22);
    *(_QWORD *)(a1 + 41112) = v11 + (int)v22;
LABEL_2:
    *v10 = v11 + 240;
    goto LABEL_3;
  }
  v30 = (_QWORD *)(a1 + 41096);
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 41072, a1 + 192, 240, 0, 0);
  v10 = v30;
  v11 = SlowCase;
LABEL_3:
  *(_DWORD *)v11 = 0;
  JSC::CodeBlock::CodeBlock(v11, a1, v10[88], 0, a3);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  JSC::CodeBlock::optimizeAfterWarmUp(v11, v12);
  v19 = *(const void ***)(a3 + 224);
  if (v19)
  {
    v21 = *(uint64_t **)(v11 + 224);
    if (!v21)
    {
      v23 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(_OWORD *)v23 = 0u;
      *((_OWORD *)v23 + 1) = 0u;
      __dmb(0xAu);
      std::unique_ptr<JSC::CodeBlock::RareData>::reset[abi:sn180100]((unint64_t *)(v11 + 224), v23, v24, v25, v26, v27, v28, v29);
      v19 = *(const void ***)(a3 + 224);
      v21 = *(uint64_t **)(v11 + 224);
    }
    WTF::Vector<JSC::HandlerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v21, v19, v13, v14, v15, v16, v17, v18);
  }
  return v11;
}

void JSC::ScriptExecutable::prepareForExecutionImpl(JSC::ModuleProgramExecutable *a1, uint64_t a2, uint64_t a3, const WTF::StringImpl *a4, JSC::VM *a5, JSC::CodeBlock **a6, uint64_t a7, uint64_t a8)
{
  int v9;
  JSC::CodeBlock *v12;
  JSC::CodeBlock *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  JSC::CodeBlock *v19;
  uint64_t (*v20)(JSC::JSString *);
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint8x8_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  JSC::Heap **v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  JSC::Exception *v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  int v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(_QWORD *);
  _QWORD *v59;
  uint64_t (*v60)(JSC::JSString *);
  WTF::StringImpl *v61;
  _QWORD v62[3];

  ++*(_DWORD *)(a2 + 916);
  v9 = *(unsigned __int8 *)(a2 + 93121);
  *(_BYTE *)(a2 + 93121) = 0;
  if (v9)
  {
    v30 = *(_QWORD *)(16 * (*(_DWORD *)a4 & 0xFFFFFFFE) + 0x28);
    v31 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v31 = 0xE00000002;
    *(_QWORD *)(v31 + 8) = "Forced Failure";
    *(_DWORD *)(v31 + 16) = 4;
    v61 = (WTF::StringImpl *)v31;
    v32 = *(JSC::Heap ***)(v30 + 56);
    v33 = *(_QWORD *)(v30 + 1504);
    if ((v33 & 1) != 0)
    {
      v58 = *(uint64_t (**)(_QWORD *))(v33 & 0xFFFFFFFFFFFFFFFCLL);
      v59 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v30 & 8) != 0)
        v59 = (_QWORD *)(v30 - 16);
      v62[0] = *v59;
      v62[1] = v30;
      v62[2] = v30 + 1504;
      v33 = v58(v62);
    }
    v34 = JSC::ErrorInstance::create(v32, v33, &v61, 0, 0, 0, 0, 1);
    v40 = (JSC::Exception *)v34;
    if ((v34 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C)))
    {
      v40 = (JSC::Exception *)JSC::Exception::create(a2, (JSC::VM *)v34, 0, v35, v36, v37, v38, v39);
    }
    JSC::VM::throwException((JSC::VM *)a2, (JSC::JSGlobalObject *)v30, v40);
    v48 = v61;
    v61 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::~StringImpl(v48, v41, v42, v43, v44, v45, v46, v47);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
      }
      else
      {
        *(_DWORD *)v48 -= 2;
      }
    }
  }
  else
  {
    v19 = (JSC::CodeBlock *)JSC::ScriptExecutable::newCodeBlockFor(a1, a5, a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
    if (!*(_DWORD *)(a2 + 80))
      goto LABEL_3;
    v49 = *(_DWORD *)(a2 + 80);
    if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(a2 + 64), 7u, (uint64_t)v13, v14, v15, v16, v17, v18);
    if (!*(_QWORD *)(a2 + 16))
    {
LABEL_3:
      *a6 = v19;
      if (HIBYTE(dword_1ECF4C270))
        JSC::CodeBlock::validate(v19);
      v20 = *(uint64_t (**)(JSC::JSString *))(*((_QWORD *)v19 + 7) + 32);
      if (v20)
      {
        v21 = (unsigned int *)((char *)v20 + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 + 1, v21));
        v60 = v20;
        JSC::CodeBlock::setupWithUnlinkedBaselineCode((uint64_t)v19, &v60, (uint64_t)v13, v14, v15, v16, v17, v18);
        v26 = (unsigned int *)v60;
        v60 = 0;
        if (v26)
        {
          v27 = v26 + 2;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            atomic_store(1u, v26 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 32))(v26);
          }
        }
      }
      else if ((_BYTE)dword_1ECF4C240)
      {
        JSC::LLInt::setEntrypoint(v19, v12, (uint64_t)v13, v14, v15, v16, v17, v18);
      }
      else
      {
        JSC::setupJIT((JSC *)a2, v19, v13);
      }
      JSC::ScriptExecutable::installCode((unint64_t)a1, (JSC::VM *)a2, v19, (*(unsigned __int16 *)(*((_QWORD *)v19 + 7) + 28) >> 12) & 3, *(_DWORD *)(*((_QWORD *)v19 + 7) + 20) >> 31, 0, v23, v24, v25);
    }
  }
  --*(_DWORD *)(a2 + 916);
}

uint64_t JSC::setupJIT(JSC *this, JSC::VM *a2, JSC::CodeBlock *a3)
{
  uint64_t result;

  result = JSC::JIT::compileSync((uint64_t)this, a2, (void *)1);
  if ((_DWORD)result != 2)
  {
    result = 381;
    __break(0xC471u);
  }
  return result;
}

JSC::JSObject *JSC::ScriptExecutable::createTemplateObject(JSC::ScriptExecutable *this, JSC::JSGlobalObject *a2, JSC::JSTemplateObjectDescriptor *a3)
{
  JSC::VM *v6;
  int v7;
  uint64_t *v8;
  uint64_t **v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  _QWORD *v36;
  int v37;
  int v38;
  uint64_t *v39;
  JSC::JSObject *TemplateObject;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51[3];

  v6 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v7 = *((unsigned __int8 *)this + 5);
  switch(v7)
  {
    case 9:
      v39 = JSC::ProgramExecutable::ensureTemplateObjectMap(this, *((JSC::VM **)a2 + 7));
      break;
    case 11:
      v39 = JSC::EvalExecutable::ensureTemplateObjectMap(this, *((JSC::VM **)a2 + 7));
      break;
    case 12:
      v39 = JSC::FunctionExecutable::ensureTemplateObjectMap(this, *((JSC::VM **)a2 + 7));
      break;
    default:
      v9 = (uint64_t **)((char *)this + 104);
      v8 = (uint64_t *)*((_QWORD *)this + 13);
      if (!v8)
      {
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)8);
        *v13 = 0;
        v51[0] = v13;
        __dmb(0xAu);
        std::unique_ptr<WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>>::operator=[abi:sn180100]((_QWORD **)this + 13, v51, v14, v15, v16, v17, v18, v19);
        v8 = *v9;
        std::unique_ptr<WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](v51, v20, v21, v22, v23, v24, v25, v26);
      }
      goto LABEL_6;
  }
  v8 = v39;
LABEL_6:
  v10 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v11 = *v10;
    if ((v11 & 0x40) != 0)
      break;
    v12 = __ldaxr(v10);
    if (v12 == v11)
    {
      if (!__stxr(v11 | 0x40, v10))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::lockSlow(this);
LABEL_13:
  v27 = *((int *)a3 + 4);
  v49 = 0;
  v50 = v27;
  WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::add<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>(v8, &v50, &v49, (uint64_t)v51);
  v36 = v51[0];
  while (1)
  {
    v37 = *v10;
    if ((v37 & 0xC0) != 0x40)
      break;
    v38 = __ldxr(v10);
    if (v38 == v37)
    {
      if (!__stxr(v37 & 0xBF, v10))
        goto LABEL_24;
    }
    else
    {
      __clrex();
    }
  }
  JSC::JSCellLock::unlockSlow(this, v28, v29, v30, v31, v32, v33, v34);
LABEL_24:
  TemplateObject = (JSC::JSObject *)v36[1];
  if (!TemplateObject)
  {
    TemplateObject = JSC::JSTemplateObjectDescriptor::createTemplateObject(a3, a2, v35, v29, v30, v31, v32, v33, v34);
    if (*((_DWORD *)v6 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v6, v42, v43, v44, v45, v46, v47, v48))
    {
      return 0;
    }
    else
    {
      v36[1] = TemplateObject;
      if (TemplateObject && *((_DWORD *)v6 + 190) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v6 + 192, (unint64_t)this);
    }
  }
  return TemplateObject;
}

uint64_t *WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::add<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16 != -1)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v8 - 4);
        v25 = 0;
        v24 = v8 + 16 * v28;
        goto LABEL_11;
      }
      if (v17 == -2)
        v26 = v16;
      v15 = (v15 + v27) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v27;
    }
    while (*v16 != -1);
    if (v26)
    {
      *v26 = -1;
      v26[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v26;
    }
  }
  *v16 = v11;
  v16[1] = *a3;
  v18 = *v6;
  if (*v6)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_10;
LABEL_22:
    result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::expand(v6, v16);
    v16 = result;
    v20 = *v6;
    if (*v6)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
    goto LABEL_10;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_22;
LABEL_10:
  v24 = v20 + 16 * v23;
  v25 = 1;
LABEL_11:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v25;
  return result;
}

_QWORD **std::unique_ptr<WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>>::operator=[abi:sn180100](_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;

  v9 = (_QWORD *)*a2;
  *a2 = 0;
  v10 = *a1;
  *a1 = v9;
  if (v10)
  {
    if (*v10)
      WTF::fastFree(*v10 - 16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

_QWORD **std::unique_ptr<WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>>::~unique_ptr[abi:sn180100](_QWORD **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;

  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    if (*v9)
      WTF::fastFree(*v9 - 16, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree((unint64_t)v9, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t JSC::ScriptExecutable::overrideLineNumber(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  if (*(_BYTE *)(a1 + 5) != 12)
    return 0;
  v1 = *(_QWORD *)(a1 + 72);
  if (!v1)
    return 0;
  LODWORD(v1) = *(_DWORD *)(v1 + 16);
  v3 = (_DWORD)v1 != -1;
  if ((_DWORD)v1 == -1)
    v1 = 0;
  else
    v1 = v1;
  return v1 | (v3 << 32);
}

uint64_t JSC::ScriptExecutable::typeProfilingStartOffset(JSC::ScriptExecutable *this)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  char **v5;
  BOOL v6;

  if (*((_BYTE *)this + 5) == 12)
  {
    v1 = *((_QWORD *)this + 9);
    if (v1)
      return *(unsigned int *)(v1 + 48);
    else
      return *(_DWORD *)(*((_QWORD *)this + 11) + 16) & 0x7FFFFFFF;
  }
  else
  {
    v3 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
    v4 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
    v5 = (char **)(16 * v3);
    if ((_DWORD)v3)
      v6 = v5 == &JSC::EvalExecutable::s_info;
    else
      v6 = 1;
    if (!v6)
    {
      do
      {
        v5 = (char **)v5[2];
        v4 = v5 != 0;
      }
      while (v5 != &JSC::EvalExecutable::s_info && v5 != 0);
    }
    return (v4 << 31 >> 31);
  }
}

uint64_t JSC::ScriptExecutable::typeProfilingEndOffset(JSC::ScriptExecutable *this)
{
  uint64_t v1;
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;

  if (*((_BYTE *)this + 5) == 12)
  {
    v1 = *((_QWORD *)this + 9);
    if (v1)
      return *(unsigned int *)(v1 + 52);
    else
      return *(_DWORD *)(*((_QWORD *)this + 11) + 40) & 0x7FFFFFFF;
  }
  else
  {
    v3 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
    v4 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
    v5 = (char **)(16 * v3);
    if ((_DWORD)v3)
      v6 = v5 == &JSC::EvalExecutable::s_info;
    else
      v6 = 1;
    if (!v6)
    {
      do
      {
        v5 = (char **)v5[2];
        v4 = v5 != 0;
      }
      while (v5 != &JSC::EvalExecutable::s_info && v5 != 0);
    }
    if (v4)
      return 0xFFFFFFFFLL;
    else
      return (*((_DWORD *)this + 13) + ~*((_DWORD *)this + 12));
  }
}

void JSC::SetConstructor::finishCreation(JSC::JSObject *a1, JSC *a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  JSC::VM *v16;
  uint64_t v17;
  JSC::JSGlobalObject *v18;
  JSC::JSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  __n128 v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;

  v11 = (_QWORD *)((char *)a2 + 41952);
  JSC::InternalFunction::finishCreation((unint64_t)a1, a2, 0, (JSC::VM *)(*((_QWORD *)a2 + 5244) + 768), 1, a6, a7, a8);
  JSC::JSObject::putDirectWithoutTransition(a1, (uint64_t)a2, *(_QWORD *)(*v11 + 2160), (uint64_t)a3, 14, v12, v13, v14, v15);
  v16 = *(JSC::VM **)(16 * (*a3 & 0xFFFFFFFE) + 0x28);
  v17 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v17 = 0x1400000002;
  *(_QWORD *)(v17 + 8) = "get [Symbol.species]";
  *(_DWORD *)(v17 + 16) = 4;
  v41 = (WTF::StringImpl *)v17;
  v18 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a2, (uint64_t)v16, 0, &v41, (uint64_t)JSC::globalFuncSpeciesGetter, 0, 155, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v30 = JSC::GetterSetter::create(a2, v16, v18, 0, v19, v20, v21, v22);
  v32 = v41;
  v41 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
    {
      WTF::StringImpl::~StringImpl(v32, v23, v24, v25, v26, v27, v28, v29);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v32 -= 2;
    }
  }
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)a1, (uint64_t)a2, *(_QWORD *)(*v11 + 2752), v30, (const JSC::PropertyTable *)0x16, v27, v28, v29, v31);
}

JSC::Exception *JSC::callSet(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"Set", 4);
}

unint64_t JSC::constructSet(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  JSC::Structure *v11;
  JSC::Heap **v12;
  uint64_t v13;
  JSC::Structure *v14;
  JSC::Heap *v15;
  unint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  JSC::JSSet *v25;
  JSC::Structure *v26;
  JSC::Heap *v27;
  unint64_t SlowCase;
  int v29;
  JSC::JSGlobalObject *v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t IndexQuicklyForTypedArray;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  JSC::VM *v55;
  JSC::VM *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  JSC::JSGlobalObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int8x16_t v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  JSC::JSRopeString *v99;
  int8x16_t v100;
  int v101;
  uint64_t v102;
  BOOL v103;
  char v104;
  int v105;
  char v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t (*v115)(int8x16_t *);
  uint64_t *v116;
  JSC::JSObject *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t (*v122)(int8x16_t *);
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t **v141;
  WTF::AtomStringImpl *v142;
  WTF::StringImpl *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v163;
  char v164;
  uint64_t v165;
  _QWORD v166[5];
  int8x16_t v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  BOOL v171;
  JSC::Structure *v172;
  uint64_t v173;
  JSC::VM *v174;
  JSC::JSGlobalObject *v175;
  char *v176;
  int v177;
  int8x16_t v178;
  char *v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  uint64_t v187;
  JSC::VM *v188[2];

  v10 = *(_QWORD *)(this + 56);
  v174 = (JSC::VM *)v10;
  v175 = (JSC::JSGlobalObject *)this;
  v173 = *((_QWORD *)a2 + 5);
  if (v173 != *((_QWORD *)a2 + 3))
  {
    v178.i64[0] = v10;
    v178.i64[1] = (uint64_t)&v175;
    v179 = (char *)&v173;
    v117 = JSC::constructSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1::operator()(v178.i64, (uint64_t)a2, (uint64_t)a3, a4, a5, (unint64_t)a6, a7, a8);
LABEL_169:
    v11 = v117;
    goto LABEL_3;
  }
  v11 = *(JSC::Structure **)(this + 1552);
  if ((v11 & 1) != 0)
  {
    v115 = *(uint64_t (**)(int8x16_t *))((unint64_t)v11 & 0xFFFFFFFFFFFFFFFCLL);
    v116 = (uint64_t *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v116 = (uint64_t *)(this - 16);
    v178.i64[0] = *v116;
    v178.i64[1] = this;
    v179 = (char *)(this + 1552);
    v117 = (JSC::JSObject *)v115(&v178);
    goto LABEL_169;
  }
LABEL_3:
  v172 = v11;
  if (*(_DWORD *)(v10 + 80))
  {
    v114 = *(_DWORD *)(v10 + 80);
    if ((v114 & 0x27) != 0 && (v114 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v12 = (JSC::Heap **)(v10 + 40744);
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v13 = *((_QWORD *)a2 + 6);
    v14 = v172;
    if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
      goto LABEL_6;
    v18 = *((_QWORD *)v172 + 5);
    v19 = *(_QWORD *)(v18 + 2272);
    if ((v19 & 1) != 0)
      v20 = (v19 >> 1) & 3;
    else
      v20 = *(unsigned __int8 *)(v19 + 4);
    if (v20 == 2 || (v21 = *((_QWORD *)v172 + 6)) == 0)
    {
      v24 = 0;
    }
    else
    {
      v22 = *(_QWORD *)(v18 + 1552);
      if ((v22 & 1) != 0)
      {
        v122 = *(uint64_t (**)(int8x16_t *))(v22 & 0xFFFFFFFFFFFFFFFCLL);
        v123 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFC000 | 8);
        if ((v18 & 8) != 0)
          v123 = (uint64_t *)(v18 - 16);
        v178.i64[0] = *v123;
        v178.i64[1] = v18;
        v179 = (char *)(v18 + 1552);
        v22 = v122(&v178);
      }
      v23 = *(_QWORD *)(v22 + 48);
      if (v23 == 2)
        v23 = 0;
      v24 = v23 == v21;
    }
    v171 = v24;
    if ((v13 & 0xFFFE000000000002) == 0)
    {
      if (*(_BYTE *)(v13 + 5) == 70)
        v25 = (JSC::JSSet *)v13;
      else
        v25 = 0;
      if (!v25)
        v24 = 0;
      if (v24 && JSC::JSSet::isIteratorProtocolFastAndNonObservable(v25))
        return JSC::JSSet::clone(v25, v175, (JSC::VM *)v10, (uint64_t)v172, a5, (uint64_t)a6, a7, a8, a9);
    }
    v170 = 0;
    v26 = v172;
    v27 = *v12;
    if (!*v12)
      v27 = JSC::GCClient::Heap::setSpaceSlow((JSC::Heap **)(v10 + 37552));
    SlowCase = *((_QWORD *)v27 + 3);
    if (SlowCase >= *((_QWORD *)v27 + 4))
    {
      SlowCase = *((_QWORD *)v27 + 5);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v27, v10 + 192, 32, 0, 0, v147, v148, v149);
        goto LABEL_31;
      }
      v124 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v27 + 6);
      *((_QWORD *)v27 + 4) = SlowCase + HIDWORD(v124);
      *((_QWORD *)v27 + 5) = SlowCase + (int)v124;
    }
    *((_QWORD *)v27 + 3) = SlowCase + 32;
LABEL_31:
    *(_DWORD *)SlowCase = 0;
    v29 = *((_DWORD *)v26 + 2);
    *(_DWORD *)SlowCase = (unint64_t)v26 >> 4;
    *(_DWORD *)(SlowCase + 4) = v29;
    *(_QWORD *)(SlowCase + 8) = 0;
    *(_QWORD *)(SlowCase + 16) = 0;
    if (*(_BYTE *)(v10 + 755))
      __dmb(0xAu);
    v169 = 0;
    v170 = SlowCase;
    v167.i8[0] = 0;
    if (!v171)
    {
      v133 = JSC::JSObject::get((unsigned int *)SlowCase, (uint64_t)v175, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 848), (uint64_t)a4, a5, (unint64_t)a6, a7, a8);
      v169 = v133;
      if (*(_DWORD *)(v10 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, v134, v135, v136, v137, v138, v139, v140))
          return 0;
        v133 = v169;
      }
      JSC::getCallData(v133, (uint64_t)&v178);
      a9 = v178;
      v167 = v178;
      v168 = v179;
      if (!v178.i8[0])
        return JSC::throwTypeError((unint64_t)v175, &v174, (uint64_t)"'add' property of a Set should be callable.", 44);
    }
    v30 = v175;
    v166[0] = &v171;
    v166[1] = &v170;
    v166[2] = &v172;
    v166[3] = &v169;
    v166[4] = &v167;
    v31 = *((_QWORD *)v175 + 7);
    if ((v13 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v13 + 5) == 36)
    {
      v32 = *(unsigned __int8 *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 8);
      v33 = (v32 & 0x10) != 0 ? ((v32 & 0xE) + 10) >> 1 : (v32 >> 1) & 7;
      v34 = *((_DWORD *)v175 + v33 + 213);
      v35 = v34 ? 16 * (v34 & 0xFFFFFFFE) : 0;
      if (v35 == 16 * (*(_DWORD *)v13 & 0xFFFFFFFE))
      {
        v36 = *((_QWORD *)v175 + 277);
        v37 = (v36 & 1) != 0 ? (v36 >> 1) & 3 : *(unsigned __int8 *)(v36 + 4);
        if (v37 != 2)
        {
          v38 = 0;
          while (1)
          {
            if ((*(_BYTE *)(v13 + 4) & 0xE) != 0)
              v39 = *(unsigned int *)(*(_QWORD *)(v13 + 8) - 8);
            else
              v39 = 0;
            if (v38 >= v39)
              return v170;
            v40 = v38;
            v41 = *(_QWORD *)(v13 + 8);
            if ((*(_BYTE *)(v13 + 4) & 0xFu) - 8 >= 2)
            {
              switch(*(_BYTE *)(v13 + 4) & 0xF)
              {
                case 0:
                case 1:
                  switch(*(_BYTE *)(v13 + 5))
                  {
                    case '\'':
                    case '(':
                      if ((*(_BYTE *)(v13 + 40) & 7u) <= 2)
                        goto LABEL_89;
                      v118 = *(_QWORD *)(v41 - 8);
                      if (*(_BYTE *)(v118 + 64) && (v161 = *(_QWORD *)(v118 + 32)) != 0)
                        v119 = *(_QWORD *)(v161 + 32);
                      else
                        v119 = *(_QWORD *)(v118 + 48);
                      v110 = *(_QWORD *)(v13 + 24);
                      v120 = *(_QWORD *)(v13 + 32);
                      if (v110 + v120 > v119)
                        goto LABEL_57;
                      if ((*(_BYTE *)(v13 + 40) & 1) == 0)
                        goto LABEL_192;
                      v52 = v119 - v120;
                      goto LABEL_90;
                    case ')':
                      if (!JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::inBounds(v13, v38))
                        goto LABEL_57;
                      goto LABEL_91;
                    case '*':
                    case '+':
                      if ((*(_BYTE *)(v13 + 40) & 7u) <= 2)
                        goto LABEL_89;
                      v107 = *(_QWORD *)(v41 - 8);
                      if (*(_BYTE *)(v107 + 64) && (v159 = *(_QWORD *)(v107 + 32)) != 0)
                        v108 = *(_QWORD *)(v159 + 32);
                      else
                        v108 = *(_QWORD *)(v107 + 48);
                      v110 = *(_QWORD *)(v13 + 24);
                      v109 = *(_QWORD *)(v13 + 32);
                      if (v109 + 2 * v110 > v108)
                        goto LABEL_57;
                      if ((*(_BYTE *)(v13 + 40) & 1) == 0)
                        goto LABEL_192;
                      if (v38 >= (v108 - v109) >> 1)
                        goto LABEL_57;
                      goto LABEL_91;
                    case ',':
                    case '-':
                    case '.':
                      if ((*(_BYTE *)(v13 + 40) & 7u) <= 2)
                        goto LABEL_89;
                      v125 = *(_QWORD *)(v41 - 8);
                      if (*(_BYTE *)(v125 + 64) && (v158 = *(_QWORD *)(v125 + 32)) != 0)
                        v126 = *(_QWORD *)(v158 + 32);
                      else
                        v126 = *(_QWORD *)(v125 + 48);
                      v110 = *(_QWORD *)(v13 + 24);
                      v127 = *(_QWORD *)(v13 + 32);
                      if (v127 + 4 * v110 > v126)
                        goto LABEL_57;
                      if ((*(_BYTE *)(v13 + 40) & 1) == 0)
                        goto LABEL_192;
                      if (v38 >= (v126 - v127) >> 2)
                        goto LABEL_57;
                      goto LABEL_91;
                    case '/':
                      if ((*(_BYTE *)(v13 + 40) & 7u) <= 2)
                      {
LABEL_89:
                        v52 = *(_QWORD *)(v13 + 24);
LABEL_90:
                        if (v52 <= v38)
                          goto LABEL_57;
                      }
                      else
                      {
                        v111 = *(_QWORD *)(v41 - 8);
                        if (*(_BYTE *)(v111 + 64) && (v160 = *(_QWORD *)(v111 + 32)) != 0)
                          v112 = *(_QWORD *)(v160 + 32);
                        else
                          v112 = *(_QWORD *)(v111 + 48);
                        v110 = *(_QWORD *)(v13 + 24);
                        v113 = *(_QWORD *)(v13 + 32);
                        if (v113 + 8 * v110 > v112)
                          goto LABEL_57;
                        if ((*(_BYTE *)(v13 + 40) & 1) != 0)
                        {
                          if (v38 >= (v112 - v113) >> 3)
                            goto LABEL_57;
                        }
                        else
                        {
LABEL_192:
                          if (v110 <= v38)
                            goto LABEL_57;
                        }
                      }
LABEL_91:
                      IndexQuicklyForTypedArray = JSC::JSObject::getIndexQuicklyForTypedArray(v13, v38, 0);
                      if (IndexQuicklyForTypedArray)
                        goto LABEL_53;
                      break;
                    default:
                      goto LABEL_57;
                  }
                  goto LABEL_57;
                case 3:
                  goto LABEL_57;
                case 4:
                case 5:
                  break;
                case 6:
                case 7:
                  if (*(_DWORD *)(v41 - 8) <= v38)
                    goto LABEL_57;
                  a9.i64[0] = *(_QWORD *)(v41 + 8 * v38);
                  IndexQuicklyForTypedArray = a9.i64[0] + 0x2000000000000;
                  if (a9.i64[0] == 0xFFFE000000000000)
                    goto LABEL_57;
                  goto LABEL_53;
                case 0xA:
                case 0xB:
                case 0xC:
                case 0xD:
                  if (*(_DWORD *)(v41 - 4) <= v38)
                    goto LABEL_57;
                  IndexQuicklyForTypedArray = *(_QWORD *)(v41 + 8 * v38 + 16);
                  if (!IndexQuicklyForTypedArray)
                    goto LABEL_57;
                  goto LABEL_53;
                default:
                  __break(0xC471u);
                  JUMPOUT(0x198BAF4B0);
              }
            }
            if (*(_DWORD *)(v41 - 8) > v38)
            {
              IndexQuicklyForTypedArray = *(_QWORD *)(v41 + 8 * v38);
              if (IndexQuicklyForTypedArray)
                goto LABEL_53;
            }
LABEL_57:
            v43 = *((_QWORD *)v30 + 7);
            v179 = (char *)0xFFFFFFFF00000000;
            v180 = (unint64_t)v13;
            LOBYTE(v182) = 0;
            BYTE8(v182) = 0;
            v183 = 0uLL;
            *(_QWORD *)&v181 = 0;
            *(_QWORD *)((char *)&v181 + 5) = 0;
            v44 = v13;
            while (1)
            {
              v45 = 16 * (*(_DWORD *)v44 & 0xFFFFFFFE);
              v46 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *, unint64_t, int8x16_t *))(16 * *(unsigned int *)(v45 + 0x4C) + 0x70))(v44, v30, v38, &v178);
              if (*(_DWORD *)(v43 + 80))
                break;
              if ((v46 & 1) != 0)
              {
                if (!*(_DWORD *)(v43 + 80))
                  goto LABEL_76;
                LOBYTE(v50) = 1;
LABEL_142:
                v105 = *(_DWORD *)(v43 + 80);
                if ((v105 & 0x27) != 0 && (v105 & 0x20) == 0)
                  JSC::VMTraps::handleTraps((JSC::VMTraps *)(v43 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
                if (*(_QWORD *)(v43 + 16))
                  v106 = 0;
                else
                  v106 = v50;
                if ((v106 & 1) == 0)
                  goto LABEL_71;
                goto LABEL_76;
              }
LABEL_60:
              if (BYTE10(v181) == 3)
              {
                if (BYTE12(v181))
                  goto LABEL_68;
                v48 = *(unsigned __int8 *)(v44 + 5);
                if (v48 != 61)
                {
LABEL_62:
                  if ((v48 - 39) <= 0xA
                    && JSC::JSArrayBufferView::length((JSC::JSArrayBufferView *)v44, v47, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8) <= v38)
                  {
                    goto LABEL_68;
                  }
                }
              }
              else
              {
                v48 = *(unsigned __int8 *)(v44 + 5);
                if (v48 != 61)
                  goto LABEL_62;
                if (BYTE10(v181) == 1)
                  goto LABEL_68;
              }
              if ((*(_WORD *)(v45 + 12) & 0x800) == 0 || BYTE10(v181) == 3)
              {
                v49 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x30);
                if (!v49)
                  v49 = *(_QWORD *)(v44 + 16);
              }
              else
              {
                if ((*(_WORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                {
                  v163 = (*(uint64_t (**)(uint64_t, JSC::JSGlobalObject *))(16
                                                                                   * *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C)
                                                                                   + 0xB0))(v44, v30);
                }
                else
                {
                  v163 = *(_QWORD *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x30);
                  if (!v163)
                    v163 = *(_QWORD *)(v44 + 16);
                }
                if (*(_DWORD *)(v43 + 80))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v43, v47, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
                  v49 = v163;
                  if (hasExceptionsAfterHandlingTraps)
                    goto LABEL_68;
                }
                else
                {
                  v49 = v163;
                }
              }
              if ((v49 & 0xFFFE000000000002) == 0)
              {
                v44 = v49;
                if (*(unsigned __int8 *)(v49 + 5) > 0x16u)
                  continue;
              }
LABEL_68:
              v50 = 0;
              goto LABEL_69;
            }
            v101 = *(_DWORD *)(v43 + 80);
            if ((v101 & 0x27) != 0 && (v101 & 0x20) == 0)
            {
              v164 = v46;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v43 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
              v46 = v164;
            }
            v102 = *(_QWORD *)(v43 + 16);
            v103 = v102 == 0;
            if (v102)
              v104 = 1;
            else
              v104 = v46;
            if ((v104 & 1) == 0)
              goto LABEL_60;
            v50 = v103;
LABEL_69:
            if (*(_DWORD *)(v43 + 80))
              goto LABEL_142;
            if (!v50)
            {
LABEL_71:
              IndexQuicklyForTypedArray = 10;
              goto LABEL_72;
            }
LABEL_76:
            if (BYTE9(v181) == 1)
            {
              IndexQuicklyForTypedArray = v178.i64[0];
            }
            else if (BYTE9(v181) == 2)
            {
              IndexQuicklyForTypedArray = JSC::PropertySlot::functionGetter((JSC::PropertySlot *)&v178, v30, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
            }
            else
            {
              v141 = (uint64_t **)*((_QWORD *)v30 + 7);
              JSC::Identifier::from(v141, v38, a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8, (int **)&v185);
              IndexQuicklyForTypedArray = JSC::PropertySlot::customGetter((uint64_t)&v178, (JSC::VM *)v141, v185);
              v143 = v185;
              v185 = 0;
              if (v143)
              {
                if (*(_DWORD *)v143 == 2)
                {
                  WTF::StringImpl::~StringImpl(v143, v142, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
                  WTF::fastFree(v150, v151, v152, v153, v154, v155, v156, v157);
                }
                else
                {
                  *(_DWORD *)v143 -= 2;
                }
              }
            }
LABEL_72:
            if (BYTE8(v182))
            {
              v51 = *(_DWORD *)(v182 + 4);
              if (!v51)
              {
                __break(0xC471u);
                JUMPOUT(0x198BAF0BCLL);
              }
              *(_DWORD *)(v182 + 4) = v51 - 1;
            }
LABEL_53:
            if (*(_DWORD *)(v31 + 80))
            {
              v53 = *(_DWORD *)(v31 + 80);
              if ((v53 & 0x27) != 0 && (v53 & 0x20) == 0)
                JSC::VMTraps::handleTraps((JSC::VMTraps *)(v31 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
              if (*(_QWORD *)(v31 + 16))
                return v170;
            }
            JSC::constructSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t)v166, (uint64_t *)v30, (JSC::JSRopeString *)IndexQuicklyForTypedArray, (uint64_t)a4, a5, a6, a7, a8, a9);
            ++v38;
            if (*(_QWORD *)(v31 + 16))
            {
              v54 = *((_DWORD *)v30 + 250);
              if (v54)
                v55 = (JSC::VM *)(16 * (v54 & 0xFFFFFFFE));
              else
                v55 = 0;
              v56 = JSC::JSArrayIterator::create(v31, v55, v13, 0xFFFE000000000001, a5, (uint64_t)a6, a7, a8);
              v63 = (uint64_t)v56;
              v64 = (v40 + 1);
              *(double *)v65.i64 = (double)v64;
              v66 = v64 | 0xFFFE000000000000;
              if (v40 + 1 < 0)
                v66 = v65.i64[0] + 0x2000000000000;
              *((_QWORD *)v56 + 2) = v66;
              v67 = v30;
              goto LABEL_104;
            }
          }
        }
      }
    }
    v165 = JSC::iteratorForIterable((JSC::VM **)v175, v13, (uint64_t)a3, (uint64_t)a4, a5, (unint64_t)a6, a7, a8, a9);
    v72 = v71;
    if (*(_DWORD *)(v31 + 80))
    {
      v131 = *(_DWORD *)(v31 + 80);
      if ((v131 & 0x27) != 0 && (v131 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v31 + 64), 7u, v68, v69, v70, v60, v61, v62);
      if (*(_QWORD *)(v31 + 16))
        return v170;
    }
    while (1)
    {
      v73 = *((_QWORD *)v30 + 7);
      v188[0] = (JSC::VM *)v73;
      if ((v72 & 0xFFFE000000000002) != 0)
      {
        LOBYTE(v185) = 0;
      }
      else
      {
        if (*(_BYTE *)(v72 + 5) == 26)
        {
          v74 = *(_QWORD *)(v72 + 24);
          if ((v74 & 1) != 0)
            v74 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFFFFELL) + 48);
          if (*(_BYTE *)(v74 + 5) == 8)
          {
            LOBYTE(v185) = 1;
            v186 = *(_QWORD *)(v74 + 40);
            LOBYTE(v187) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)v72 & 0xFFFFFFFE)
                                                                                      + 0x4C));
          }
          else
          {
            LOBYTE(v185) = 2;
            v75 = *(_QWORD *)(v72 + 16);
            v186 = v74;
            v187 = v75;
          }
LABEL_115:
          v178.i8[0] = 0;
          v178.i64[1] = 0x800000000;
          v179 = (char *)&v180 + 8;
          v180 = 0u;
          v181 = 0u;
          v182 = 0u;
          v183 = 0u;
          v184 = 0;
          v176 = (char *)&v180 + 8;
          v177 = 0;
          v83 = JSC::call((uint64_t *)v30, v72, (unsigned __int8 *)&v185, v165, (uint64_t)&v176, v60, v61, v62);
          if (!*(_DWORD *)(v73 + 80))
            goto LABEL_117;
          v130 = *(_DWORD *)(v73 + 80);
          if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, v77, v78, v79, v80, v81, v82);
          if (*(_QWORD *)(v73 + 16))
          {
            v83 = 0;
          }
          else
          {
LABEL_117:
            if ((v83 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v83 + 5) <= 0x16u)
              v83 = JSC::throwTypeError((unint64_t)v30, v188, (uint64_t)"Iterator result interface is not an object.", 44);
          }
          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v178.u64[1], v76, v77, v78, v79, v80, v81, v82);
          goto LABEL_119;
        }
        (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(16
                                                                        * *(unsigned int *)(16
                                                                                          * (*(_DWORD *)v72 & 0xFFFFFFFE)
                                                                                          + 0x4C)
                                                                        + 0x38))(&v185, v72);
        if ((_BYTE)v185)
          goto LABEL_115;
      }
      v83 = JSC::throwTypeError(v30, v188);
LABEL_119:
      if (*(_DWORD *)(v73 + 80))
      {
        v128 = *(_DWORD *)(v73 + 80);
        if ((v128 & 0x27) != 0 && (v128 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, v84, v85, v86, v87, v88, v89);
        if (*(_QWORD *)(v73 + 16))
          goto LABEL_203;
      }
      v91 = JSC::iteratorComplete(v30, v83, v84, v85, v86, v87, v88, v89, v90);
      if (!*(_DWORD *)(v73 + 80))
        goto LABEL_121;
      v129 = *(_DWORD *)(v73 + 80);
      if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v73 + 64), 7u, v84, v85, v86, v87, v88, v89);
      if (*(_QWORD *)(v73 + 16))
      {
LABEL_203:
        v92 = 0;
      }
      else
      {
LABEL_121:
        if (v91)
          v92 = 6;
        else
          v92 = v83;
      }
      if (*(_QWORD *)(v31 + 16) || v92 == 6)
        return v170;
      v99 = (JSC::JSRopeString *)JSC::iteratorValue(v30, v92, v84, v85, v86, v87, v88, v89, v90);
      if (*(_DWORD *)(v31 + 80))
      {
        v132 = *(_DWORD *)(v31 + 80);
        if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v31 + 64), 7u, v93, v94, v95, (uint64_t)v96, v97, v98);
        if (*(_QWORD *)(v31 + 16))
          return v170;
      }
      JSC::constructSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t)v166, (uint64_t *)v30, v99, v94, v95, v96, v97, v98, v100);
      if (*(_QWORD *)(v31 + 16))
      {
        v67 = v30;
        v63 = v165;
LABEL_104:
        JSC::iteratorClose(v67, v63, v57, v58, v59, v60, v61, v62, v65);
        return v170;
      }
    }
  }
  v14 = v172;
LABEL_6:
  v15 = *v12;
  if (!*v12)
    v15 = JSC::GCClient::Heap::setSpaceSlow((JSC::Heap **)(v10 + 37552));
  result = *((_QWORD *)v15 + 3);
  if (result < *((_QWORD *)v15 + 4))
    goto LABEL_9;
  result = *((_QWORD *)v15 + 5);
  if ((result & 1) == 0)
  {
    v121 = *(_QWORD *)(result + 8) ^ *((_QWORD *)v15 + 6);
    *((_QWORD *)v15 + 4) = result + HIDWORD(v121);
    *((_QWORD *)v15 + 5) = result + (int)v121;
LABEL_9:
    *((_QWORD *)v15 + 3) = result + 32;
    goto LABEL_10;
  }
  JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)a6, a7, a8);
  result = JSC::LocalAllocator::allocateSlowCase((uint64_t)v15, v10 + 192, 32, 0, 0, v144, v145, v146);
LABEL_10:
  *(_DWORD *)result = 0;
  v17 = *((_DWORD *)v14 + 2);
  *(_DWORD *)result = (unint64_t)v14 >> 4;
  *(_DWORD *)(result + 4) = v17;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t JSC::setPrivateFuncSetStorage(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t result;
  JSC::VM *v10;

  result = *(_QWORD *)(*((_QWORD *)a2 + 6) + 16);
  if (!result)
  {
    v10 = (JSC::VM *)*((_QWORD *)this + 7);
    result = *((_QWORD *)v10 + 5231);
    if (!result)
      return JSC::VM::orderedHashTableSentinelSlow(v10, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  return result;
}

unint64_t JSC::setPrivateFuncSetIterationNext(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  BOOL v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;

  v9 = (unint64_t *)*((_QWORD *)this + 7);
  v10 = v9 + 5230;
  v11 = *((_QWORD *)a2 + 6);
  v12 = v9[5231];
  if (!v12)
    v12 = JSC::VM::orderedHashTableSentinelSlow((JSC::VM *)v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (v12 == v11)
    goto LABEL_16;
  v13 = *((_DWORD *)a2 + 14);
  v14 = *(_QWORD *)(v11 + 16);
  if (v14)
    v15 = (v14 & 0xFFFE000000000002) == 0;
  else
    v15 = 0;
  if (v15)
  {
    do
    {
      if (v13)
      {
        v23 = *(_DWORD *)(v11 + 24);
        if (v23)
        {
          if (v23 == -1)
          {
            v13 = 0;
          }
          else
          {
            v28 = v23 + 2;
            if ((v23 + 2) >= 3)
            {
              v27 = 0;
              v29 = v13 - v23;
              v25 = (unsigned int *)(v11 + 32);
              v30 = 2 - v28;
              while (1)
              {
                v26 = *v25;
                v25 += 2;
                if (v13 <= v26)
                  break;
                if (v30 == --v27)
                {
                  v13 = v29;
                  goto LABEL_21;
                }
              }
              v13 += v27;
            }
          }
        }
      }
LABEL_21:
      v11 = v14;
      v14 = *(_QWORD *)(v14 + 16);
      if (v14)
        v24 = (v14 & 0xFFFE000000000002) == 0;
      else
        v24 = 0;
    }
    while (v24);
  }
  v16 = *(_DWORD *)(v11 + 24);
  if (v13 >= v16 + (int)v14)
  {
LABEL_16:
    v11 = v9[5231];
    if (!v11)
      return JSC::VM::orderedHashTableSentinelSlow((JSC::VM *)v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v17 = *(_DWORD *)(v11 + 32) + 2 * v13 + 4;
    v18 = v13 | 0xFFFE000000000000;
    v19 = v14 + v16 - v13;
    while (1)
    {
      v20 = *(_QWORD *)(v11 + 16 + 8 * v17);
      if ((v20 & 0xFFFE000000000002) != 0)
        break;
      v21 = *v10;
      if (!*v10)
      {
        v21 = JSC::Symbol::create((JSC::Symbol *)v9, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        *v10 = v21;
      }
      if (v21 != v20)
        break;
      v17 += 2;
      ++v18;
      if (!--v19)
        goto LABEL_16;
    }
    *(_QWORD *)(v11 + 40) = v18;
  }
  return v11;
}

unint64_t JSC::setPrivateFuncSetIterationEntry(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return *(unsigned int *)(*((_QWORD *)a2 + 6) + 40) | 0xFFFE000000000000;
}

uint64_t JSC::setPrivateFuncSetIterationEntryKey(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  return *(_QWORD *)(*((_QWORD *)a2 + 6)
                   + 8
                   * (*(_DWORD *)(*((_QWORD *)a2 + 6) + 32)
                                  + 2 * *(_DWORD *)(*((_QWORD *)a2 + 6) + 40)
                                  + 4)
                   + 16);
}

unint64_t JSC::setPrivateFuncClone(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  JSC::VM *v10;
  JSC::JSSet *v11;
  uint64_t v12;
  uint64_t (*v14)(_QWORD *);
  _QWORD *v15;
  _QWORD v16[3];

  v10 = *(JSC::VM **)(this + 56);
  v11 = (JSC::JSSet *)*((_QWORD *)a2 + 6);
  v12 = *(_QWORD *)(this + 1552);
  if ((v12 & 1) != 0)
  {
    v14 = *(uint64_t (**)(_QWORD *))(v12 & 0xFFFFFFFFFFFFFFFCLL);
    v15 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
    if ((this & 8) != 0)
      v15 = (_QWORD *)(this - 16);
    v16[0] = *v15;
    v16[1] = this;
    v16[2] = this + 1552;
    v12 = v14(v16);
  }
  return JSC::JSSet::clone(v11, (JSC::JSGlobalObject *)this, v10, v12, a6, a7, a8, a9, a4);
}

void JSC::FrameWalker::recordJITFrame(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  JSC::Wasm::NameSection *v67;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if ((v12 & 0xFFFE000000000007) == 3 || v11 == 0)
  {
    v11 = 0;
    v14 = -1;
  }
  else
  {
    v14 = *(_DWORD *)(v10 + 36);
  }
  v15 = *(_QWORD *)(a1 + 48);
  if (v15 >= a2[3])
  {
    __break(0xC471u);
    goto LABEL_72;
  }
  v16 = *(_QWORD *)a2;
  v17 = *(_QWORD *)a2 + 72 * v15;
  *(_QWORD *)v17 = 0;
  *(_QWORD *)(v17 + 8) = v12;
  *(_QWORD *)(v17 + 16) = v11;
  *(_DWORD *)(v17 + 24) = v14;
  *(_BYTE *)(v17 + 28) = 0;
  v19 = *(unsigned __int8 *)(v17 + 48);
  v18 = (_BYTE *)(v17 + 48);
  if (v19)
  {
    v20 = v16 + 72 * v15;
    v21 = *(unsigned int **)(v20 + 40);
    *(_QWORD *)(v20 + 40) = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        v67 = (JSC::Wasm::NameSection *)v21;
        WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v67, a2, a3, a4, a5, a6, a7, a8);
      }
    }
    *v18 = 0;
  }
  v24 = v16 + 72 * v15;
  *(_WORD *)(v24 + 56) = 0;
  v25 = *(_QWORD *)(v24 + 64);
  *(_QWORD *)(v24 + 64) = 0;
  if (v25)
  {
    do
    {
      v26 = __ldaxr((unsigned int *)v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, (unsigned int *)v25));
    if (!v27)
    {
      atomic_store(1u, (unsigned int *)v25);
      v57 = *(_QWORD *)(v25 + 24);
      if (v57)
        WTF::fastFree(v57, a2, a3, a4, a5, a6, a7, a8);
      v58 = *(_QWORD *)(v25 + 32);
      if (v58)
        WTF::fastFree(v58, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v25, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  if ((v12 & 0xFFFE000000000007) != 3)
    goto LABEL_19;
  v28 = qword_1ECF4C080 + (v12 & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)(v28 + 1) < 2 || !qword_1ECF53D80)
    goto LABEL_19;
  v29 = *(_DWORD *)(qword_1ECF53D80 - 8);
  v30 = (v28 + ~(v28 << 32)) ^ ((unint64_t)(v28 + ~(v28 << 32)) >> 22);
  v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
  v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
  v33 = v29 & ((v32 >> 31) ^ v32);
  v34 = *(_QWORD *)(qword_1ECF53D80 + 8 * v33);
  if (v34 == v28)
  {
LABEL_25:
    v36 = *(_QWORD *)(a1 + 48);
    v37 = a2[3];
    if (v36 >= v37)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAFDC8);
    }
    v38 = *(unsigned __int8 *)(v28 + 4);
    *(_BYTE *)(*(_QWORD *)a2 + 72 * v36 + 28) = v38;
    if (v38 != 1)
      goto LABEL_19;
    v40 = *(_QWORD *)(v28 + 8);
    v39 = *(unsigned int **)(v28 + 16);
    if (v39)
    {
      do
        v41 = __ldaxr(v39);
      while (__stlxr(v41 + 1, v39));
      v36 = *(_QWORD *)(a1 + 48);
      v37 = a2[3];
    }
    if (v36 >= v37)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAFDD0);
    }
    v42 = *(_QWORD *)a2 + 72 * v36;
    *(_QWORD *)(v42 + 32) = v40;
    v43 = v42 + 32;
    if (*(_BYTE *)(v43 + 16))
    {
      v44 = *(unsigned int **)(v43 + 8);
      *(_QWORD *)(v43 + 8) = v39;
      if (v44)
      {
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46)
        {
          atomic_store(1u, v44);
          v67 = (JSC::Wasm::NameSection *)v44;
          WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v67, a2, a3, a4, a5, a6, a7, a8);
        }
      }
    }
    else
    {
      *(_QWORD *)(v43 + 8) = v39;
      *(_BYTE *)(v43 + 16) = 1;
    }
    v47 = *(_QWORD *)(a1 + 48);
    if (v47 >= a2[3])
    {
      __break(0xC471u);
      JUMPOUT(0x198BAFDD8);
    }
    *(_WORD *)(*(_QWORD *)a2 + 72 * v47 + 56) = *(unsigned __int8 *)(v28 + 6) | 0x100;
    v48 = qword_1ECF53D88;
    if (!qword_1ECF53D88)
      goto LABEL_39;
    v59 = *(_DWORD *)(qword_1ECF53D88 - 8);
    v60 = WTF::PtrHashBase<JSC::InlineCallFrame *,false>::hash(v28) & v59;
    v61 = *(_QWORD *)(v48 + 16 * v60);
    if (v61 == v28)
    {
LABEL_58:
      v63 = v48 + 16 * v60;
      v64 = qword_1ECF53D88;
      if (!qword_1ECF53D88)
        goto LABEL_61;
      v65 = *(unsigned int *)(qword_1ECF53D88 - 4);
    }
    else
    {
      v62 = 1;
      while (v61)
      {
        v60 = ((_DWORD)v60 + v62) & v59;
        v61 = *(_QWORD *)(v48 + 16 * v60);
        ++v62;
        if (v61 == v28)
          goto LABEL_58;
      }
      v64 = qword_1ECF53D88;
      if (!qword_1ECF53D88)
        goto LABEL_39;
      v65 = *(unsigned int *)(qword_1ECF53D88 - 4);
      v63 = qword_1ECF53D88 + 16 * v65;
    }
    v64 += 16 * v65;
LABEL_61:
    if (v63 != v64)
    {
      v49 = *(unsigned int **)(v63 + 8);
      if (v49)
      {
        do
          v66 = __ldaxr(v49);
        while (__stlxr(v66 + 1, v49));
      }
      goto LABEL_40;
    }
LABEL_39:
    v49 = 0;
LABEL_40:
    v50 = *(_QWORD *)(a1 + 48);
    if (v50 < a2[3])
    {
      v51 = *(_QWORD *)a2 + 72 * v50;
      v52 = *(_QWORD *)(v51 + 64);
      *(_QWORD *)(v51 + 64) = v49;
      if (v52)
      {
        do
        {
          v53 = __ldaxr((unsigned int *)v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, (unsigned int *)v52));
        if (!v54)
        {
          atomic_store(1u, (unsigned int *)v52);
          v55 = *(_QWORD *)(v52 + 24);
          if (v55)
            WTF::fastFree(v55, a2, a3, a4, a5, a6, a7, a8);
          v56 = *(_QWORD *)(v52 + 32);
          if (v56)
            WTF::fastFree(v56, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v52, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      goto LABEL_19;
    }
    __break(0xC471u);
LABEL_72:
    JUMPOUT(0x198BAFDC0);
  }
  v35 = 1;
  while (v34)
  {
    v33 = (v33 + v35) & v29;
    v34 = *(_QWORD *)(qword_1ECF53D80 + 8 * v33);
    ++v35;
    if (v34 == v28)
      goto LABEL_25;
  }
LABEL_19:
  ++*(_QWORD *)(a1 + 48);
}

uint64_t JSC::FrameWalker::resetAtMachineFrame(uint64_t this)
{
  unint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v1 = *(_QWORD *)(this + 8);
  if (!v1)
    return this;
  v2 = *(_QWORD **)(**(_QWORD **)(*(_QWORD *)this + 584) + 32);
  if (!v2)
  {
LABEL_12:
    *(_BYTE *)(this + 40) = 1;
    return this;
  }
  while (1)
  {
    v3 = *(_QWORD *)(*v2 + 16);
    if (!v3)
      goto LABEL_27;
    v4 = *(_QWORD *)(*v2 + 24);
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAFF24);
    }
    if (v4 > v3)
    {
      __break(0xC471u);
      JUMPOUT(0x198BAFF44);
    }
    if (v3 > v1 && v4 <= v1)
      break;
    v2 = (_QWORD *)v2[2];
    if (!v2)
      goto LABEL_12;
  }
  v6 = *(_QWORD *)(v1 + 16);
  if (v6 && (*(_QWORD *)(v1 + 24) & 0xFFFE000000000007) != 3)
  {
    v7 = *(unsigned __int8 **)(*(_QWORD *)this + 720);
    v8 = atomic_load(v7 + 16);
    if ((v8 & 1) == 0)
    {
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x198BAFF04);
    }
    if ((unint64_t)(v6 + 1) >= 2)
    {
      v9 = *(_QWORD *)v7;
      if (v9)
      {
        v10 = *(_DWORD *)(v9 - 8);
        v11 = (~(v6 << 32) + v6) ^ ((unint64_t)(~(v6 << 32) + v6) >> 22);
        v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
        v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
        v14 = v10 & ((v13 >> 31) ^ v13);
        v15 = *(_QWORD *)(v9 + 8 * v14);
        if (v15 == v6)
          return this;
        v16 = 1;
        while (v15)
        {
          v14 = (v14 + v16) & v10;
          v15 = *(_QWORD *)(v9 + 8 * v14);
          ++v16;
          if (v15 == v6)
            return this;
        }
      }
    }
    goto LABEL_12;
  }
  return this;
}

unint64_t WTF::Vector<JSC::SamplingProfiler::StackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 136 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::SamplingProfiler::StackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::SamplingProfiler::StackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::SamplingProfiler::StackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  JSC::Wasm::NameSection *v25;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x1E1E1E2)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 136 * a2;
      v6 = WTF::fastMalloc((WTF *)(136 * a2));
      *(_DWORD *)(a1 + 8) = (v5 & 0xFFFFFFF8) / 0x88;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v14 = v6;
        v15 = v3;
        do
        {
          v16 = *(_OWORD *)v15;
          v17 = *(_OWORD *)(v15 + 16);
          *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
          *(_OWORD *)v14 = v16;
          *(_OWORD *)(v14 + 16) = v17;
          *(_BYTE *)(v14 + 40) = 0;
          *(_BYTE *)(v14 + 56) = 0;
          if (*(_BYTE *)(v15 + 56))
          {
            *(_QWORD *)(v14 + 40) = *(_QWORD *)(v15 + 40);
            v18 = *(_QWORD *)(v15 + 48);
            *(_QWORD *)(v15 + 48) = 0;
            *(_QWORD *)(v14 + 48) = v18;
            *(_BYTE *)(v14 + 56) = 1;
          }
          *(_OWORD *)(v14 + 64) = *(_OWORD *)(v15 + 64);
          v19 = *(_OWORD *)(v15 + 80);
          v20 = *(_OWORD *)(v15 + 96);
          v21 = *(_OWORD *)(v15 + 112);
          *(_BYTE *)(v14 + 128) = *(_BYTE *)(v15 + 128);
          *(_OWORD *)(v14 + 96) = v20;
          *(_OWORD *)(v14 + 112) = v21;
          *(_OWORD *)(v14 + 80) = v19;
          if (*(_BYTE *)(v15 + 56))
          {
            v22 = *(unsigned int **)(v15 + 48);
            *(_QWORD *)(v15 + 48) = 0;
            if (v22)
            {
              do
              {
                v23 = __ldaxr(v22);
                v24 = v23 - 1;
              }
              while (__stlxr(v24, v22));
              if (!v24)
              {
                atomic_store(1u, v22);
                v25 = (JSC::Wasm::NameSection *)v22;
                WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v25, v7, v8, v9, v10, v11, v12, v13);
              }
            }
          }
          v14 += 136;
          v15 += 136;
        }
        while (v15 != v3 + 136 * v4);
      }
      if (v3)
      {
        if (*(_QWORD *)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

uint64_t JSC::HeapUtil::isPointerGCObjectJSCell(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  char *v20;
  int v21;

  if ((a4 & 8) != 0)
  {
    v14 = *a1;
    if (!*a1 || !*(_DWORD *)(v14 - 12))
      return 0;
    v15 = *(_DWORD *)(v14 - 8);
    v16 = (unint64_t)&a4[~((_QWORD)a4 << 32)] ^ ((unint64_t)&a4[~((_QWORD)a4 << 32)] >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char **)(v14 + 8 * v19);
    if (v20 == a4)
    {
      return 1;
    }
    else
    {
      v21 = 1;
      do
      {
        result = v20 != 0;
        if (!v20)
          break;
        v19 = (v19 + v21) & v15;
        v20 = *(char **)(v14 + 8 * v19);
        ++v21;
      }
      while (v20 != a4);
    }
  }
  else
  {
    result = 0;
    if ((a4 & 0xF) == 0)
    {
      v9 = (unint64_t)a4 & 0xFFFFFFFFFFFFC000;
      if (((unint64_t)a4 & 0xFFFFFFFFFFFFC000) != 0 && (v9 & a3) == v9 && a2)
      {
        v10 = *(_DWORD *)(a2 - 8);
        v11 = v10 & ((unint64_t)a4 >> 14);
        v12 = *(_QWORD *)(a2 + 8 * v11);
        if (v12 == v9)
        {
LABEL_10:
          if (!*(_BYTE *)(*(_QWORD *)v9 + 9))
            return JSC::MarkedBlock::Handle::isLiveCell(*(JSC::MarkedBlock::Handle **)v9, *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v9 + 80) + 432), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)v9 + 80) + 436), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v9 + 80) + 445), a4, a6, a7, a8);
        }
        else
        {
          v13 = 1;
          while (v12)
          {
            v11 = (v11 + v13) & v10;
            v12 = *(_QWORD *)(a2 + 8 * v11);
            ++v13;
            if (v12 == v9)
              goto LABEL_10;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

void JSC::SamplingProfiler::registerForReportAtExit(void)::$_0::__invoke(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  JSC::SamplingProfiler **v11;
  JSC::SamplingProfiler **v12;
  uint64_t v13;
  JSC::SamplingProfiler **v14;
  JSC::SamplingProfiler **v15;

  v9 = *(_QWORD *)qword_1ECF58F70;
  if (*(_QWORD *)qword_1ECF58F70)
  {
    v10 = *(unsigned int *)(v9 - 4);
    v11 = (JSC::SamplingProfiler **)(v9 + 8 * v10);
    if (*(_DWORD *)(v9 - 12))
    {
      v12 = *(JSC::SamplingProfiler ***)qword_1ECF58F70;
      if ((_DWORD)v10)
      {
        v13 = 8 * v10;
        v12 = *(JSC::SamplingProfiler ***)qword_1ECF58F70;
        while ((unint64_t)*v12 + 1 <= 1)
        {
          ++v12;
          v13 -= 8;
          if (!v13)
          {
            v12 = v11;
            break;
          }
        }
      }
      if (v9)
        goto LABEL_9;
      goto LABEL_13;
    }
    v12 = (JSC::SamplingProfiler **)(v9 + 8 * v10);
  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
  v11 = (JSC::SamplingProfiler **)(v9 + 8 * v10);
  if (v9)
  {
LABEL_9:
    v14 = (JSC::SamplingProfiler **)(v9 + 8 * *(unsigned int *)(v9 - 4));
    goto LABEL_14;
  }
LABEL_13:
  v14 = 0;
LABEL_14:
  while (v12 != v14)
  {
    v15 = v12 + 1;
    JSC::SamplingProfiler::reportDataToOptionFile(*v12, a1, a3, a4, a5, a6, a7, a8, a9);
    v12 = v11;
    if (v15 != v11)
    {
      v12 = v15;
      while ((unint64_t)*v12 + 1 <= 1)
      {
        if (++v12 == v11)
        {
          v12 = v11;
          break;
        }
      }
    }
  }
}

void WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int i;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl **v17;
  uint64_t v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v8 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v8 - 8);
    v12 = *((_DWORD *)*a2 + 4);
    if (v12 < 0x100)
      v13 = WTF::StringImpl::hashSlowCase(*a2);
    else
      v13 = v12 >> 8;
    for (i = 0; ; v13 = i + v15)
    {
      v15 = v13 & v11;
      v16 = *(WTF **)(v8 + 16 * v15);
      if (v16 != (WTF *)-1)
      {
        if (!v16)
        {
          v17 = (WTF::StringImpl **)*a1;
          if (!*a1)
            return;
          v18 = *((unsigned int *)v17 - 1);
          v19 = &v17[2 * v18];
          goto LABEL_13;
        }
        if (WTF::equal(v16, *a2, a3))
          break;
      }
      ++i;
    }
    v19 = (WTF::StringImpl **)(v8 + 16 * v15);
    v17 = (WTF::StringImpl **)*a1;
    if (!*a1)
      goto LABEL_14;
    v18 = *((unsigned int *)v17 - 1);
LABEL_13:
    v17 += 2 * v18;
    if (v17 == v19)
      return;
LABEL_14:
    if (v17 != v19)
    {
      v20 = *v19;
      *v19 = (WTF::StringImpl *)-1;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
      }
      ++*(_DWORD *)(*a1 - 16);
      v21 = *a1;
      if (*a1)
        v22 = *(_DWORD *)(v21 - 12) - 1;
      else
        v22 = -1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *a1;
      if (*a1)
      {
        v24 = 6 * *(_DWORD *)(v23 - 12);
        v25 = *(_DWORD *)(v23 - 4);
        if (v24 < v25 && v25 >= 9)
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v25 >> 1, 0, a4, a5, a6, a7, a8);
      }
    }
  }
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned long>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned long,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl **result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (WTF::StringImpl **)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24 != (WTF::StringImpl *)-1)
      {
        if (v25)
        {
          v26 = *a1;
          if (*a1)
            v27 = *(_DWORD *)(v26 - 8);
          else
            v27 = 0;
          v28 = *((_DWORD *)v25 + 4);
          if (v28 < 0x100)
            v29 = WTF::StringImpl::hashSlowCase(v25);
          else
            v29 = v28 >> 8;
          v30 = 0;
          do
          {
            v31 = v29 & v27;
            v29 = ++v30 + v31;
          }
          while (*(_QWORD *)(v26 + 16 * v31));
          v32 = (WTF::StringImpl **)(v26 + 16 * v31);
          v33 = *(WTF::StringImpl **)(v11 + 16 * v22 + 8);
          *v32 = 0;
          v34 = *v24;
          *v24 = 0;
          *v32 = v34;
          v32[1] = v33;
          v35 = *v24;
          *v24 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::~StringImpl(v35, v15, v16, v17, v18, v19, v20, v21);
              WTF::fastFree(v36, v37, v38, v39, v40, v41, v42, v43);
            }
            else
            {
              *(_DWORD *)v35 -= 2;
            }
          }
          if (v24 == (WTF::StringImpl **)a3)
            v23 = v32;
        }
        else
        {
          *v24 = 0;
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

_BYTE *WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(_BYTE *result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int **v10;
  int *v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  _WORD *v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  size_t v21;
  uint64_t v22;
  _OWORD *v23;
  size_t v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int16 v35;
  uint64_t v36;
  _WORD *v37;
  char *v38;
  int8x16_t *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  char *v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int16 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  __int128 v57;
  int8x16_t v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  __int16 v64;
  unsigned __int128 *v65;
  unsigned __int128 *v66;
  unsigned __int128 v67;
  unsigned __int128 *v68;
  unsigned __int128 *v69;
  unsigned __int128 v70;
  _BYTE *v71;
  _BYTE *v72;
  unsigned __int128 v73;
  char v74;
  char v75;
  char v76;
  int *v77;
  int8x16x2_t v78;
  int8x16x2_t v79;
  int8x16x2_t v80;
  int8x16x2_t v81;
  int8x16x2_t v82;
  int8x16x2_t v83;
  int8x16x2_t v84;
  int8x16x2_t v85;
  int8x16x2_t v86;

  v10 = (int **)result;
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(a2 + 20), &v77);
        v11 = v77;
        if (v77)
        {
          *v77 = 2;
          v11[1] = a2;
          *((_BYTE *)v11 + 20) = 35;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          v12 = (char *)v11 + 21;
          if (a4)
          {
            v13 = *(_BYTE **)(a4 + 8);
            v14 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v14 == 1)
              {
                *v12 = *v13;
              }
              else if ((_DWORD)v14)
              {
                memcpy((char *)v11 + 21, v13, v14);
              }
            }
            else
            {
              if (v14 < 0x10)
              {
                v65 = (unsigned __int128 *)((char *)v11 + 21);
              }
              else
              {
                v65 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
                v66 = (unsigned __int128 *)((char *)v11 + 21);
                do
                {
                  v67 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *v66++ = v67;
                }
                while (v66 != v65);
              }
              while (v65 != (unsigned __int128 *)&v12[v14])
              {
                v75 = *v13;
                v13 += 2;
                *(_BYTE *)v65 = v75;
                v65 = (unsigned __int128 *)((char *)v65 + 1);
              }
            }
            v18 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v18 = 0;
          }
          v12[v18] = 58;
          v19 = &v12[v18 + 1];
          if (a5)
          {
            v20 = *(_BYTE **)(a5 + 8);
            v21 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v21 == 1)
              {
                *v19 = *v20;
              }
              else if ((_DWORD)v21)
              {
                memcpy(v19, v20, v21);
              }
            }
            else
            {
              if (v21 < 0x10)
              {
                v68 = (unsigned __int128 *)&v12[v18 + 1];
              }
              else
              {
                v68 = (unsigned __int128 *)&v19[v21 & 0xFFFFFFF0];
                v69 = (unsigned __int128 *)&v12[v18 + 1];
                do
                {
                  v70 = (unsigned __int128)vld2q_s8(v20);
                  v20 += 32;
                  *v69++ = v70;
                }
                while (v69 != v68);
              }
              while (v68 != (unsigned __int128 *)&v19[v21])
              {
                v76 = *v20;
                v20 += 2;
                *(_BYTE *)v68 = v76;
                v68 = (unsigned __int128 *)((char *)v68 + 1);
              }
            }
            v22 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v22 = 0;
          }
          v19[v22] = 58;
          result = &v19[v22 + 1];
          if (a6)
          {
            v23 = *(_OWORD **)(a6 + 8);
            v24 = *(unsigned int *)(a6 + 4);
            if ((*(_BYTE *)(a6 + 16) & 4) != 0)
            {
              if ((_DWORD)v24 == 1)
              {
                *result = *(_BYTE *)v23;
                goto LABEL_66;
              }
              if (!(_DWORD)v24)
                goto LABEL_66;
LABEL_59:
              result = memcpy(result, v23, v24);
              goto LABEL_66;
            }
            v71 = &result[v24];
            if (v24 >= 0x10)
            {
              v72 = &result[v24 & 0xFFFFFFF0];
              do
              {
                v73 = (unsigned __int128)vld2q_s8((const char *)v23);
                v23 += 2;
                *(_OWORD *)result = v73;
                result += 16;
              }
              while (result != v72);
              result = v72;
            }
            while (result != v71)
            {
              v74 = *(_BYTE *)v23;
              v23 = (_OWORD *)((char *)v23 + 2);
              *result++ = v74;
            }
          }
        }
        goto LABEL_66;
      }
LABEL_71:
      v11 = 0;
      goto LABEL_66;
    }
LABEL_70:
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_66;
  }
  if (!a2)
    goto LABEL_70;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_71;
  result = (_BYTE *)WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20), &v77);
  v11 = v77;
  if (v77)
  {
    *v77 = 2;
    v11[1] = a2;
    *((_WORD *)v11 + 10) = 35;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    v15 = (_WORD *)v11 + 11;
    if (a4)
    {
      v16 = *(int8x16_t **)(a4 + 8);
      v17 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        v25 = (char *)&v15[v17];
        if (v17 >= 0x40)
        {
          v26 = (char *)&v15[v17 & 0xFFFFFFC0];
          v27 = 0uLL;
          v28 = (char *)v11 + 22;
          do
          {
            v78.val[0] = *v16;
            v29 = v16[1];
            v81.val[0] = v16[2];
            v30 = v16[3];
            v16 += 4;
            v31 = v30;
            v81.val[1] = 0uLL;
            v84.val[0] = v29;
            v78.val[1] = 0uLL;
            v32 = v28;
            vst2q_s8(v32, v78);
            v32 += 32;
            v84.val[1] = 0uLL;
            vst2q_s8(v32, v84);
            v33 = v28 + 64;
            vst2q_s8(v33, v81);
            v34 = v28 + 96;
            vst2q_s8(v34, *(int8x16x2_t *)(&v27 - 1));
            v28 += 128;
          }
          while (v28 != v26);
        }
        else
        {
          v26 = (char *)v11 + 22;
        }
        while (v26 != v25)
        {
          v35 = v16->u8[0];
          v16 = (int8x16_t *)((char *)v16 + 1);
          *(_WORD *)v26 = v35;
          v26 += 2;
        }
      }
      else if ((_DWORD)v17 == 1)
      {
        *v15 = v16->i16[0];
      }
      else if ((_DWORD)v17)
      {
        memcpy((char *)v11 + 22, v16, 2 * v17);
      }
      v36 = *(unsigned int *)(a4 + 4);
    }
    else
    {
      v36 = 0;
    }
    v37 = &v15[v36];
    *v37 = 58;
    v38 = (char *)(v37 + 1);
    if (a5)
    {
      v39 = *(int8x16_t **)(a5 + 8);
      v40 = *(unsigned int *)(a5 + 4);
      if ((*(_BYTE *)(a5 + 16) & 4) != 0)
      {
        v41 = &v38[2 * v40];
        if (v40 >= 0x40)
        {
          v42 = &v38[2 * (v40 & 0xFFFFFFC0)];
          v43 = 0uLL;
          v44 = v38;
          do
          {
            v79.val[0] = *v39;
            v45 = v39[1];
            v82.val[0] = v39[2];
            v46 = v39[3];
            v39 += 4;
            v47 = v46;
            v82.val[1] = 0uLL;
            v85.val[0] = v45;
            v79.val[1] = 0uLL;
            v48 = v44;
            vst2q_s8(v48, v79);
            v48 += 32;
            v85.val[1] = 0uLL;
            vst2q_s8(v48, v85);
            v49 = v44 + 64;
            vst2q_s8(v49, v82);
            v50 = v44 + 96;
            vst2q_s8(v50, *(int8x16x2_t *)(&v43 - 1));
            v44 += 128;
          }
          while (v44 != v42);
        }
        else
        {
          v42 = v38;
        }
        while (v42 != v41)
        {
          v51 = v39->u8[0];
          v39 = (int8x16_t *)((char *)v39 + 1);
          *(_WORD *)v42 = v51;
          v42 += 2;
        }
      }
      else if ((_DWORD)v40 == 1)
      {
        *(_WORD *)v38 = v39->i16[0];
      }
      else if ((_DWORD)v40)
      {
        memcpy(v38, v39, 2 * v40);
      }
      v52 = *(unsigned int *)(a5 + 4);
    }
    else
    {
      v52 = 0;
    }
    v53 = &v38[2 * v52];
    *(_WORD *)v53 = 58;
    result = v53 + 2;
    if (a6)
    {
      v23 = *(_OWORD **)(a6 + 8);
      v54 = *(unsigned int *)(a6 + 4);
      if ((*(_BYTE *)(a6 + 16) & 4) != 0)
      {
        v55 = &result[2 * v54];
        if (v54 >= 0x40)
        {
          v56 = &result[2 * (v54 & 0xFFFFFFC0)];
          v57 = 0uLL;
          do
          {
            v80.val[0] = (int8x16_t)*v23;
            v58 = *((int8x16_t *)v23 + 1);
            v83.val[0] = (int8x16_t)v23[2];
            v59 = v23[3];
            v23 += 4;
            v60 = v59;
            v83.val[1] = 0uLL;
            v86.val[0] = v58;
            v80.val[1] = 0uLL;
            v61 = result;
            vst2q_s8(v61, v80);
            v61 += 32;
            v86.val[1] = 0uLL;
            vst2q_s8(v61, v86);
            v62 = result + 64;
            vst2q_s8(v62, v83);
            v63 = result + 96;
            vst2q_s8(v63, *(int8x16x2_t *)(&v57 - 1));
            result += 128;
          }
          while (result != v56);
          result = v56;
        }
        while (result != v55)
        {
          v64 = *(unsigned __int8 *)v23;
          v23 = (_OWORD *)((char *)v23 + 1);
          *(_WORD *)result = v64;
          result += 2;
        }
      }
      else
      {
        if ((_DWORD)v54 == 1)
        {
          *(_WORD *)result = *(_WORD *)v23;
          goto LABEL_66;
        }
        if ((_DWORD)v54)
        {
          v24 = 2 * v54;
          goto LABEL_59;
        }
      }
    }
  }
LABEL_66:
  *v10 = v11;
  return result;
}

uint64_t JSC::SamplingProfiler::reportTopBytecodes(WTF::PrintStream &)::$_2::operator()(uint64_t **a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int i;
  uint64_t v10;
  WTF *v11;
  unint64_t v12;
  uint64_t result;
  uint64_t *v14;
  WTF *v15;
  const WTF::String *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  float v23;
  unsigned int j;
  WTF::StringImpl *v25;
  WTF::PrintStream *v26;
  WTF::PrintStream *v27;
  uint64_t *v28;
  double v29;
  WTF::PrintStream *v30;

  v5 = **a1;
  if (!v5)
    goto LABEL_10;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = *((_DWORD *)*a2 + 4);
  v8 = v7 < 0x100 ? WTF::StringImpl::hashSlowCase(*a2) : v7 >> 8;
  for (i = 0; ; v8 = ++i + v10)
  {
    v10 = v8 & v6;
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 != (WTF *)-1)
    {
      if (!v11)
        goto LABEL_10;
      if (WTF::equal(v11, *a2, a3))
        break;
    }
  }
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_10:
    result = WTF::equalInternal<unsigned char>((uint64_t)*a2, (unint64_t)"Unknown Frame", 13);
    if ((result & 1) != 0)
      return result;
    result = WTF::equalInternal<unsigned char>((uint64_t)*a2, (unint64_t)"Unknown Executable", 18);
    if ((result & 1) != 0)
      return result;
    v12 = 0;
  }
  v14 = a1[1];
  v15 = (WTF *)(*(uint64_t (**)(uint64_t *))(*v14 + 32))(v14);
  WTF::printInternal(v15, (WTF::PrintStream *)a2, v16, v17, v18, v19, v20, v21, v22, v23);
  WTF::PrintStream::printf(v15, "%s", ": ");
  (*(void (**)(uint64_t *))(*v14 + 40))(v14);
  for (j = 0; ; ++j)
  {
    v25 = *a2;
    if (*a2)
      LODWORD(v25) = *((_DWORD *)v25 + 1);
    v26 = (WTF::PrintStream *)a1[1];
    if (j >= *(_DWORD *)a1[2] + 2 - (int)v25)
      break;
    v27 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t *))(*(_QWORD *)v26 + 32))(a1[1]);
    WTF::PrintStream::printf(v27, "%s", " ");
    (*(void (**)(WTF::PrintStream *))(*(_QWORD *)v26 + 40))(v26);
  }
  WTF::PrintStream::printf(v26, "%6zu ", v12);
  v28 = a1[1];
  v29 = (double)v12 / (double)(unint64_t)*a1[3] * 100.0;
  v30 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t *))(*v28 + 32))(v28);
  WTF::PrintStream::printf(v30, "%s", " (");
  WTF::PrintStream::printf(v30, "%lf", v29);
  WTF::PrintStream::printf(v30, "%s", "%)");
  WTF::PrintStream::printf(v30, "%s", "\n");
  return (*(uint64_t (**)(uint64_t *))(*v28 + 40))(v28);
}

unint64_t JSC::allocateCell<JSC::ModuleProgramCodeBlock>(_QWORD *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t result;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v9 = a1 + 5137;
  result = a1[5137];
  if (result >= v9[1])
  {
    result = v9[2];
    if ((result & 1) != 0)
    {
      v12 = a1 + 5134;
      v13 = a1 + 24;
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v12, v13, 240, 0, 0);
      goto LABEL_3;
    }
    v11 = *(_QWORD *)(result + 8) ^ v9[3];
    v9[1] = result + HIDWORD(v11);
    v9[2] = result + (int)v11;
  }
  *v9 = result + 240;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

JSC::JSObject *JSC::constructSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_1::operator()(uint64_t *a1, uint64_t a2, uint64_t a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  unint64_t *v13;
  JSC::InternalFunction *v14;
  JSC::JSGlobalObject *v15;
  unint64_t v16;
  int v18;
  uint64_t (*v19)(JSC::VM **);
  JSC::VM **v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  JSC::VM *v25[3];

  v8 = *a1;
  v9 = *(_QWORD *)a1[1];
  v10 = *(_QWORD *)a1[2];
  v25[0] = *(JSC::VM **)(v9 + 56);
  while (1)
  {
    while (1)
    {
      v11 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C));
      if (v11 != &JSC::JSBoundFunction::s_info && v11 != &JSC::JSRemoteFunction::s_info)
        break;
      v10 = *(_QWORD *)(v10 + 32);
    }
    if (*(_BYTE *)(v10 + 5) != 61)
    {
      v13 = *(unint64_t **)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      goto LABEL_9;
    }
    v22 = v9;
    v23 = a1;
    v12 = v10;
    if (JSC::ProxyObject::isRevoked((JSC::ProxyObject *)v10))
      break;
    v10 = *(_QWORD *)(v12 + 16);
    v9 = v22;
    a1 = v23;
  }
  JSC::throwTypeError(v22, v25, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
  v13 = 0;
  a1 = v23;
LABEL_9:
  if (*(_DWORD *)(v8 + 80))
  {
    v18 = *(_DWORD *)(v8 + 80);
    if ((v18 & 0x27) != 0 && (v18 & 0x20) == 0)
    {
      v24 = v13;
      v21 = a1;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      v13 = v24;
      a1 = v21;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  v14 = *(JSC::InternalFunction **)a1[1];
  v15 = *(JSC::JSGlobalObject **)a1[2];
  v16 = v13[194];
  if ((v16 & 1) != 0)
  {
    v19 = *(uint64_t (**)(JSC::VM **))(v16 & 0xFFFFFFFFFFFFFFFCLL);
    v20 = (JSC::VM **)((unint64_t)v13 & 0xFFFFFFFFFFFFC000 | 8);
    if ((v13 & 8) != 0)
      v20 = (JSC::VM **)(v13 - 2);
    v25[0] = *v20;
    v25[1] = (JSC::VM *)v13;
    v25[2] = (JSC::VM *)(v13 + 194);
    v16 = v19(v25);
  }
  return JSC::InternalFunction::createSubclassStructure(v14, v15, (JSC::JSObject *)v16, a4, a5, a6, a7, a8);
}

void JSC::constructSet(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t a1, uint64_t *a2, JSC::JSRopeString *this, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  JSC **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  JSC *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int **v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  JSC::Symbol *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  JSC *v64;
  unint64_t v65;
  WTF *v66;
  const WTF::StringImpl *v67;
  JSC **v68;
  BOOL v69;
  JSC::JSString *v70;
  unint64_t v71;
  JSC *v72;
  JSC::JSBigInt *v73;
  unint64_t v74;
  JSC *v75;
  JSC::Symbol *v76;
  BOOL v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  unint64_t v81;
  JSC *v82;
  unint64_t v83;
  JSC **v84;
  JSC *v85;
  uint64_t v86;
  unint64_t v87;
  JSC **v88;
  JSC *v89;
  int **v90;
  char v91;
  char v92;
  uint64_t v93;
  JSC::VM *v94;
  unint64_t *v95;
  unsigned int v96;
  unint64_t v97;
  JSC::JSGlobalObject *v98;
  uint64_t v99;
  int v100;
  JSC *v101;
  uint64_t v102;
  unint64_t v103;
  unsigned int v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  int **v108;
  WTF::StringImpl *v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  unint64_t v116;
  int **v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  double v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int **v136;
  WTF::StringImpl *v137;
  unsigned int v138;
  JSC *v139;
  JSC::VMTraps *v140;
  int v141;
  int v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  JSC **v146;
  int v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  JSC *v151;
  uint64_t Slow;
  unint64_t v153;
  JSC *v154;
  int v155;
  unint64_t v156;
  JSC *v157;
  int **v158;
  unint64_t v159;
  JSC::JSGlobalObject *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  JSC::Exception *v168;
  JSC **v169;
  unint64_t v170;
  int v171;
  unint64_t v172;
  int v173;
  JSC *v174;
  JSC **v175;
  unint64_t v176;
  int v177;
  JSC *v178;
  JSC **v179;
  unint64_t v180;
  int v181;
  uint64_t v182;
  unint64_t v183;
  JSC **v184;
  unint64_t v185;
  JSC **v186;
  JSC *v187;
  int v188;
  unint64_t v189;
  JSC **v190;
  JSC *v191;
  int v192;
  int v193;
  unint64_t v194;
  JSC *v195;
  int v196;
  unint64_t v197;
  JSC *v198;
  int v199;
  unint64_t v200;
  JSC **v201;
  JSC *v202;
  uint64_t v203;
  JSC::JSRopeString *v204;
  JSC **v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t SlowCase;
  unint64_t v210;
  JSC::JSGlobalObject *v211;
  unint64_t OutOfMemoryError;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  JSC::Exception *v219;
  unint64_t v220;
  JSC **v221;
  unint64_t v222;
  JSC **v223;
  JSC *v224;
  JSC *v225;
  JSC **v226;
  unint64_t v227;
  JSC *v228;
  JSC::JSGlobalObject *v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  double v236;
  JSC::Exception *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  JSC *v242;
  unint64_t v243;
  int v244;
  JSC::VMTraps *v245;
  JSC::Heap *v246;
  unint64_t v247;
  unint64_t v248;
  unsigned int v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  JSC *v253;
  JSC *v254;
  JSC *v255;
  JSC *v256;
  JSC *v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  uint64_t v265;
  JSC::VM *v266;
  JSC::VM *v267;
  JSC::VM *v268;
  JSC::VM *v269;
  JSC::VM *v270;
  JSC::VM *v271;
  JSC::VM *v272;
  unint64_t *v273;
  JSC::VM *v274;
  JSC **v275;
  JSC **v276;
  JSC **v277;
  JSC **v278;
  JSC **v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  unint64_t v285;
  JSC::Symbol *v286;
  JSC::Symbol *v287;
  JSC::Symbol *v288;
  unint64_t v289;
  JSC::Symbol *v290;
  _QWORD v291[4];
  JSC::JSRopeString **v292;
  int v293;
  char v294;
  _QWORD v295[3];
  JSC::JSRopeString *v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  uint64_t v300;

  v9 = (unint64_t)this;
  if (!**(_BYTE **)a1)
  {
    v294 = 0;
    v295[1] = &v296;
    v295[2] = 0;
    v297 = 0u;
    v300 = 0;
    v298 = 0u;
    v299 = 0u;
    v296 = this;
    v295[0] = 0x800000001;
    v25 = *(unsigned __int8 **)(a1 + 32);
    v26 = **(_QWORD **)(a1 + 24);
    v27 = **(_QWORD **)(a1 + 8);
    v292 = &v296;
    v293 = 1;
    JSC::call(a2, v26, v25, v27, (uint64_t)&v292, (uint64_t)a6, a7, a8);
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)v295, v28, v29, v30, v31, v32, v33, v34);
    return;
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = **(_QWORD **)(a1 + 8);
  v12 = *(JSC ***)(*(_QWORD *)v10 + 40);
  v13 = (uint64_t)v12[7];
  if (!*(_QWORD *)(v11 + 16))
  {
    v14 = *(_QWORD *)(v13 + 41656);
    v15 = *(_QWORD *)(v13 + 11000);
    if (v15)
    {
      v16 = *(unsigned int *)(v15 + 60);
      v17 = *(_QWORD *)(v15 + 24);
      if (v17 < *(_QWORD *)(v15 + 32))
      {
        *(_QWORD *)(v15 + 24) = v17 + v16;
        if (v17)
        {
LABEL_6:
          *(_DWORD *)v17 = 0;
          v18 = *(_DWORD *)(v14 + 8);
          *(_DWORD *)v17 = v14 >> 4;
          *(_DWORD *)(v17 + 4) = v18;
          v291[3] = v14;
          *(_QWORD *)(v17 + 8) = 0x1C0000001CLL;
          if ((*(_BYTE *)(v17 + 4) & 0xE) == 8)
          {
            *(_OWORD *)(v17 + 208) = 0u;
            *(_OWORD *)(v17 + 224) = 0u;
            *(_OWORD *)(v17 + 176) = 0u;
            *(_OWORD *)(v17 + 192) = 0u;
            *(_OWORD *)(v17 + 144) = 0u;
            *(_OWORD *)(v17 + 160) = 0u;
            *(_OWORD *)(v17 + 112) = 0u;
            *(_OWORD *)(v17 + 128) = 0u;
            *(_OWORD *)(v17 + 80) = 0u;
            *(_OWORD *)(v17 + 96) = 0u;
            *(_OWORD *)(v17 + 48) = 0u;
            *(_OWORD *)(v17 + 64) = 0u;
            *(_OWORD *)(v17 + 16) = 0u;
            *(_OWORD *)(v17 + 32) = 0u;
          }
          if (*(_BYTE *)(v13 + 755))
            __dmb(0xAu);
          a9 = (int8x16_t)vdupq_n_s64(0xFFFE000000000000);
          *(int8x16_t *)(v17 + 16) = a9;
          *(_QWORD *)(v17 + 32) = 0xFFFE000000000008;
LABEL_11:
          if (!*(_DWORD *)(v13 + 80))
            goto LABEL_12;
          v144 = *(_DWORD *)(v13 + 80);
          if ((v144 & 0x27) != 0 && (v144 & 0x20) == 0)
          {
            v220 = v9;
            v221 = v12;
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
            v12 = v221;
            v9 = v220;
          }
          if (!*(_QWORD *)(v13 + 16))
          {
LABEL_12:
            *(_QWORD *)(v11 + 16) = v17;
            if (v17 && *(_DWORD *)(v13 + 760) >= *(unsigned __int8 *)(v11 + 7))
            {
              v145 = v9;
              v146 = v12;
              JSC::Heap::writeBarrierSlowPath(v13 + 192, v11);
              v12 = v146;
              v9 = v145;
            }
          }
          goto LABEL_13;
        }
LABEL_240:
        v210 = v9;
        v211 = (JSC::JSGlobalObject *)v12;
        OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)v12, (JSC::JSGlobalObject *)a2);
        v219 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v219 = (JSC::Exception *)JSC::Exception::create(v13, (JSC::VM *)OutOfMemoryError, 0, v213, v214, v215, v216, v217);
        }
        JSC::VM::throwException((JSC::VM *)v13, v211, v219, v218, v213, v214, v215, v216, v217);
        v12 = (JSC **)v211;
        v17 = 0;
        v9 = v210;
        goto LABEL_11;
      }
      v17 = *(_QWORD *)(v15 + 40);
      if ((v17 & 1) == 0)
      {
        v143 = *(_QWORD *)(v17 + 8) ^ *(_QWORD *)(v15 + 48);
        *(_QWORD *)(v15 + 32) = v17 + HIDWORD(v143);
        *(_QWORD *)(v15 + 40) = v17 + (int)v143;
        *(_QWORD *)(v15 + 24) = v17 + v16;
        goto LABEL_6;
      }
      v204 = this;
      v205 = *(JSC ***)(*(_QWORD *)v10 + 40);
      JSC::sanitizeStackForVM(v12[7], (JSC::VM *)a2, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v15, v13 + 192, v16, 0, 1, v206, v207, v208);
    }
    else
    {
      v204 = this;
      v205 = *(JSC ***)(*(_QWORD *)v10 + 40);
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow(v13 + 10792, v12[7], 0xF0uLL, 0, a5, (uint64_t)a6, a7, a8);
    }
    v12 = v205;
    v9 = (unint64_t)v204;
    v17 = SlowCase;
    if (SlowCase)
      goto LABEL_6;
    goto LABEL_240;
  }
LABEL_13:
  if (*(_DWORD *)(v13 + 80))
  {
    v132 = *(_DWORD *)(v13 + 80);
    if ((v132 & 0x27) != 0 && (v132 & 0x20) == 0)
    {
      v183 = v9;
      v184 = v12;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
      v12 = v184;
      v9 = v183;
    }
    if (*(_QWORD *)(v13 + 16))
      return;
  }
  v19 = *(_QWORD *)(v11 + 16);
  v20 = v12[7];
  v21 = (unint64_t *)(v19 + 16);
  if (!*(_DWORD *)(v19 + 16))
  {
    v22 = 0;
    LODWORD(v23) = 0;
    v24 = -1;
LABEL_34:
    v44 = -1;
    goto LABEL_35;
  }
  v22 = v9;
  if ((v9 + 0x2000000000000) >> 50)
  {
    a9.i64[0] = v9 - 0x2000000000000;
    v130 = (int)COERCE_DOUBLE(v9 - 0x2000000000000);
    v80 = COERCE_DOUBLE(v9 - 0x2000000000000) == (double)(int)v130;
    v131 = v130 | 0xFFFE000000000000;
    if (v80)
      v22 = v131;
    else
      v22 = v9;
  }
  if ((v22 & 0xFFFE000000000002) != 0)
  {
    v39 = 0;
LABEL_29:
    v40 = (v22 + ~(v22 << 32)) ^ ((v22 + ~(v22 << 32)) >> 22);
    v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
    v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
    v23 = (v42 >> 31) ^ v42;
    goto LABEL_30;
  }
  v35 = *(unsigned __int8 *)(v22 + 5);
  if (v35 != 2)
  {
    if (v35 == 3)
    {
      v225 = v12[7];
      v226 = v12;
      v227 = v9;
      if (*(_DWORD *)(v22 + 12))
        v23 = *(unsigned int *)(v22 + 12);
      else
        v23 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v22);
      v39 = 1;
      v9 = v227;
      v12 = v226;
      v20 = v225;
      goto LABEL_30;
    }
    v39 = 1;
    goto LABEL_29;
  }
  v36 = (int **)(v22 + 8);
  if ((*(_BYTE *)(v22 + 8) & 1) != 0)
  {
    v87 = v9;
    v88 = v12;
    v89 = v12[7];
    v90 = JSC::JSRopeString::resolveRope(v22, (JSC::JSGlobalObject *)v12, (uint64_t)this, a4, a9, a5, (uint64_t)a6, a7, a8);
    v20 = v89;
    v12 = v88;
    v9 = v87;
    v36 = v90;
  }
  if (!*((_DWORD *)v20 + 20))
    goto LABEL_23;
  v147 = *((_DWORD *)v20 + 20);
  if ((v147 & 0x27) != 0 && (v147 & 0x20) == 0)
  {
    v222 = v9;
    v223 = v12;
    v224 = v20;
    JSC::VMTraps::handleTraps((JSC *)((char *)v20 + 64), 7u, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
    v20 = v224;
    v12 = v223;
    v9 = v222;
  }
  if (*((_QWORD *)v20 + 2))
  {
    v23 = 0xFFFFFFFFLL;
  }
  else
  {
LABEL_23:
    v37 = (WTF::StringImpl *)*v36;
    v38 = (*v36)[4];
    if (v38 < 0x100)
    {
      v83 = v9;
      v84 = v12;
      v85 = v20;
      v86 = WTF::StringImpl::hashSlowCase(v37);
      v20 = v85;
      v12 = v84;
      v9 = v83;
      v23 = v86;
    }
    else
    {
      v23 = v38 >> 8;
    }
  }
  v291[2] = v22;
  v39 = 1;
LABEL_30:
  if (*((_DWORD *)v20 + 20))
  {
    v140 = (JSC *)((char *)v20 + 64);
    v141 = *((_DWORD *)v20 + 20);
    if ((v141 & 0x27) != 0 && (v141 & 0x20) == 0)
    {
      v200 = v9;
      v201 = v12;
      v202 = v20;
      v203 = v23;
      JSC::VMTraps::handleTraps((JSC *)((char *)v20 + 64), 7u, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
      v23 = v203;
      v20 = v202;
      v12 = v201;
      v9 = v200;
    }
    if (*((_QWORD *)v20 + 2))
    {
      if (*((_DWORD *)v20 + 20))
      {
        v142 = *((_DWORD *)v20 + 20);
        if ((v142 & 0x27) != 0 && (v142 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v140, 7u, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
      }
      return;
    }
  }
  v24 = ((*(_DWORD *)(v19 + 32) - 1) & v23) + 4;
  *(double *)a9.i64 = (double)(int)v22;
  if (v22 <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = v22 - 0x2000000000000;
  v43 = v21[v24];
  if (!v43)
    goto LABEL_34;
  v59 = v12[7];
  v60 = (unint64_t *)((char *)v59 + 41840);
  if (!(v22 >> 49))
  {
    if ((v39 & 1) == 0)
    {
      while (1)
      {
        v78 = v21[v43];
        if ((v78 & 0xFFFE000000000002) != 0)
        {
          if (v22 == v78)
            goto LABEL_154;
        }
        else
        {
          v79 = *v60;
          if (!*v60)
          {
            v81 = v9;
            v277 = v12;
            v82 = v20;
            v283 = v23;
            v288 = v59;
            v79 = JSC::Symbol::create(v59, (JSC::VM *)a2, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
            v59 = v288;
            LODWORD(v23) = v283;
            v20 = v82;
            v12 = v277;
            v9 = v81;
            *v60 = v79;
          }
          v80 = v22 != v78 || v79 == v78;
          if (!v80)
            goto LABEL_154;
        }
        v43 = v21[(v43 + 1)];
        v44 = -1;
        if (!v43)
          goto LABEL_35;
      }
    }
    while (1)
    {
      v61 = v21[v43];
      if ((v61 & 0xFFFE000000000002) != 0)
        break;
      v62 = *v60;
      if (!*v60)
      {
        v71 = v9;
        v275 = v12;
        v72 = v20;
        v281 = v23;
        v287 = v59;
        v62 = JSC::Symbol::create(v59, (JSC::VM *)a2, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
        v59 = v287;
        LODWORD(v23) = v281;
        v20 = v72;
        v12 = v275;
        v9 = v71;
        *v60 = v62;
      }
      if (v62 != v61)
      {
        if (v22 == v61)
          goto LABEL_154;
        v63 = *(unsigned __int8 *)(v22 + 5);
        if (v63 == 2)
        {
          if (*(_BYTE *)(v61 + 5) != 2)
            break;
          v286 = v59;
          v280 = v23;
          v64 = v20;
          v65 = v9;
          v66 = *(WTF **)(v22 + 8);
          if ((v66 & 1) != 0
            || (v67 = *(const WTF::StringImpl **)(v61 + 8), (v67 & 1) != 0))
          {
            v70 = (JSC::JSString *)v61;
            v68 = v12;
            v69 = JSC::JSString::equalSlowCase((JSC::JSString *)v22, (JSC::JSGlobalObject *)v12, v70, a4, a5, (uint64_t)a6, a7, a8, a9);
          }
          else
          {
            v68 = v12;
            v69 = WTF::equal(v66, v67, this);
          }
          v12 = v68;
          v9 = v65;
          v20 = v64;
          LODWORD(v23) = v280;
          v59 = v286;
          if (v69)
            goto LABEL_154;
        }
        else
        {
          if (v63 != 3 || *(_BYTE *)(v61 + 5) != 3)
            break;
          v73 = (JSC::JSBigInt *)v61;
          v74 = v9;
          v276 = v12;
          v75 = v20;
          v282 = v23;
          v76 = v59;
          v77 = JSC::JSBigInt::equals((JSC::JSBigInt *)v22, v73, this);
          v59 = v76;
          LODWORD(v23) = v282;
          v20 = v75;
          v12 = v276;
          v9 = v74;
          if (v77)
            goto LABEL_154;
        }
      }
LABEL_65:
      v43 = v21[(v43 + 1)];
      v44 = -1;
      if (!v43)
        goto LABEL_35;
    }
    if (v22 == v61)
      goto LABEL_154;
    goto LABEL_65;
  }
  v125 = a9.i64[0];
  while (1)
  {
    v126 = v21[v43];
    if ((v126 & 0xFFFE000000000002) != 0)
      goto LABEL_151;
    v127 = *v60;
    if (!*v60)
    {
      v285 = a9.i64[0];
      v248 = v9;
      v279 = v12;
      v254 = v20;
      v129 = v23;
      v290 = v59;
      v127 = JSC::Symbol::create(v59, (JSC::VM *)a2, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
      v59 = v290;
      v23 = v129;
      v20 = v254;
      v12 = v279;
      v9 = v248;
      a9.i64[0] = v285;
      *v60 = v127;
    }
    if (v127 != v126)
    {
LABEL_151:
      if (v22 == v126)
        break;
      if (v126 >> 49)
      {
        v128 = (double)(int)v126;
        if (v126 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v128 = v126 - 0x2000000000000;
        if (v125 == *(_QWORD *)&v128)
          break;
      }
    }
    v43 = v21[(v43 + 1)];
    v44 = -1;
    if (!v43)
      goto LABEL_35;
  }
LABEL_154:
  v44 = v43;
LABEL_35:
  if (*((_DWORD *)v20 + 20))
  {
    v133 = *((_DWORD *)v20 + 20);
    if ((v133 & 0x27) != 0 && (v133 & 0x20) == 0)
    {
      v185 = v9;
      v186 = v12;
      v187 = v20;
      v188 = v23;
      JSC::VMTraps::handleTraps((JSC *)((char *)v20 + 64), 7u, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
      LODWORD(v23) = v188;
      v20 = v187;
      v12 = v186;
      v9 = v185;
    }
    if (v44 != -1 || *((_QWORD *)v20 + 2))
      return;
  }
  else if (v44 != -1)
  {
    return;
  }
  v45 = *(_DWORD *)(v19 + 32);
  v46 = *(_DWORD *)(v19 + 24);
  v47 = *(_QWORD *)(v19 + 16);
  v48 = v47 + v46;
  v49 = 0.75;
  if (v45 < 0x10000)
    v49 = 0.5;
  *(float *)a9.i32 = v49 * (float)v45;
  if (*(float *)a9.i32 > (float)v48)
  {
    v50 = v19;
    goto LABEL_41;
  }
  v289 = v11;
  if (v45 >= 0x10000)
    v91 = 1;
  else
    v91 = 2;
  if (v46 >= v45 >> 1)
    v92 = 0;
  else
    v92 = v91;
  v93 = v45 << v92;
  v94 = v12[7];
  v95 = (unint64_t *)((char *)v94 + 41656);
  v96 = 3 * v93 + 4;
  v273 = (unint64_t *)((char *)v94 + 41656);
  v274 = v94;
  v247 = v9;
  v278 = v12;
  v284 = v23;
  v265 = v93;
  if (v96 >= 0x10000001)
  {
    v255 = v20;
    v159 = v9;
    v160 = (JSC::JSGlobalObject *)v12;
    v161 = JSC::createOutOfMemoryError((unint64_t)v12, (JSC::JSGlobalObject *)a2);
    v168 = (JSC::Exception *)v161;
    if ((v161 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v161 & 0xFFFFFFFE) + 0x4C)))
    {
      v168 = (JSC::Exception *)JSC::Exception::create((uint64_t)v274, (JSC::VM *)v161, 0, v162, v163, v164, v165, v166);
    }
    JSC::VM::throwException(v274, v160, v168, v167, v162, v163, v164, v165, v166);
    v94 = v274;
    v12 = (JSC **)v160;
    v50 = 0;
    v9 = v159;
    v20 = v255;
    goto LABEL_206;
  }
  v97 = *v95;
  v98 = (JSC::JSGlobalObject *)(8 * (3 * v93 + 4));
  this = (JSC::JSRopeString *)(((unint64_t)v98 + 31) & 0xFFFFFFFF0);
  if ((unint64_t)this > 0x1F60
    || (v99 = *(_QWORD *)((char *)v94 + ((((unint64_t)v98 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) == 0)
  {
    v151 = v20;
    v251 = *v95;
    Slow = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v94 + 10792, v94, (unint64_t)this, 0, a5, (uint64_t)a6, a7, a8);
    v97 = v251;
    v98 = (JSC::JSGlobalObject *)(8 * v96);
    v93 = v265;
    v95 = v273;
    v94 = v274;
    v20 = v151;
    v12 = v278;
    v50 = Slow;
    goto LABEL_95;
  }
  v50 = *(_QWORD *)(v99 + 24);
  if (v50 < *(_QWORD *)(v99 + 32))
  {
    *(_QWORD *)(v99 + 24) = v50 + *(unsigned int *)(v99 + 60);
LABEL_95:
    v11 = v289;
    if (v50)
      goto LABEL_96;
    v228 = v20;
    v229 = (JSC::JSGlobalObject *)v12;
    v230 = JSC::createOutOfMemoryError((unint64_t)v12, v98);
    v237 = (JSC::Exception *)v230;
    if ((v230 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v230 & 0xFFFFFFFE) + 0x4C)))
    {
      v237 = (JSC::Exception *)JSC::Exception::create((uint64_t)v274, (JSC::VM *)v230, 0, v231, v232, v233, v234, v235);
    }
    JSC::VM::throwException(v274, v229, v237, v236, v231, v232, v233, v234, v235);
    v94 = v274;
    v12 = (JSC **)v229;
    v50 = 0;
    v11 = v289;
    v9 = v247;
    v20 = v228;
LABEL_206:
    LODWORD(v23) = v284;
    LODWORD(v93) = v265;
    v95 = v273;
    goto LABEL_102;
  }
  v250 = *(unsigned int *)(v99 + 60);
  v252 = *v95;
  v257 = v20;
  v50 = *(_QWORD *)(v99 + 40);
  if ((v50 & 1) != 0)
  {
    JSC::sanitizeStackForVM(v94, v98, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
    v241 = JSC::LocalAllocator::allocateSlowCase(v99, (uint64_t)v274 + 192, v250, 0, 1, v238, v239, v240);
    v94 = v274;
    v50 = v241;
    v12 = v278;
    v20 = v257;
    v98 = (JSC::JSGlobalObject *)(8 * v96);
    v93 = v265;
    v95 = v273;
    v97 = v252;
    goto LABEL_95;
  }
  v172 = *(_QWORD *)(v50 + 8) ^ *(_QWORD *)(v99 + 48);
  *(_QWORD *)(v99 + 32) = v50 + HIDWORD(v172);
  *(_QWORD *)(v99 + 40) = v50 + (int)v172;
  *(_QWORD *)(v99 + 24) = v50 + v250;
  v11 = v289;
  v98 = (JSC::JSGlobalObject *)(8 * (3 * v93 + 4));
  v95 = (unint64_t *)((char *)v94 + 41656);
LABEL_96:
  *(_DWORD *)v50 = 0;
  v100 = *(_DWORD *)(v97 + 8);
  *(_DWORD *)v50 = v97 >> 4;
  *(_DWORD *)(v50 + 4) = v100;
  v291[1] = v97;
  *(_DWORD *)(v50 + 8) = v96;
  *(_DWORD *)(v50 + 12) = v96;
  if (v96 && (*(_BYTE *)(v50 + 4) & 0xE) == 8)
  {
    v101 = v20;
    bzero((void *)(v50 + 16), (size_t)v98);
    v93 = v265;
    v95 = v273;
    v94 = v274;
    v12 = v278;
    v20 = v101;
  }
  if (*((_BYTE *)v94 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v50 + 16) = v47 | 0xFFFE000000000000;
  *(_QWORD *)(v50 + 24) = 0xFFFE000000000000;
  *(_QWORD *)(v50 + 32) = v93 | 0xFFFE000000000000;
  v9 = v247;
  LODWORD(v23) = v284;
LABEL_102:
  if (!*((_DWORD *)v94 + 20))
    goto LABEL_103;
  v256 = v20;
  v169 = v12;
  v170 = v9;
  v171 = *((_DWORD *)v94 + 20);
  if ((v171 & 0x27) != 0 && (v171 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v274 + 64), 7u, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
  v95 = v273;
  v94 = v274;
  v11 = v289;
  v9 = v170;
  v12 = v169;
  v20 = v256;
  LODWORD(v23) = v284;
  LODWORD(v93) = v265;
  if (!*((_QWORD *)v274 + 2))
  {
LABEL_103:
    if (!(_DWORD)v48)
      goto LABEL_212;
    v102 = 0;
    v103 = (v93 + 2);
    this = (JSC::JSRopeString *)(v50 + 16);
    a4 = (v93 - 1);
    v245 = (JSC::VM *)((char *)v94 + 64);
    v246 = (JSC::VM *)((char *)v94 + 192);
    v104 = v45 + 4;
    a5 = 2;
    a6 = v291;
    v253 = v20;
    v249 = v93 - 1;
    while (1)
    {
      v105 = v21[v104];
      if ((v105 & 0xFFFE000000000002) != 0)
      {
        v103 = (v103 + 2);
        *((_QWORD *)this + v103) = v105;
      }
      else
      {
        v106 = v95[23];
        if (!v106)
        {
          v269 = (JSC::VM *)v103;
          v261 = a5;
          v106 = JSC::Symbol::create(v94, (JSC::VM *)v103, (uint64_t)this, a4, a5, (uint64_t)v291, a7, a8);
          a6 = v291;
          a5 = v261;
          a4 = v249;
          this = (JSC::JSRopeString *)(v50 + 16);
          v20 = v253;
          v103 = (unint64_t)v269;
          v95 = v273;
          v94 = v274;
          v12 = v278;
          LODWORD(v23) = v284;
          v9 = v247;
          v273[23] = v106;
        }
        if (v106 == v105)
        {
          v21[a5] = v102 | 0xFFFE000000000000;
          a5 = (a5 + 1);
          goto LABEL_121;
        }
        v103 = (v103 + 2);
        *((_QWORD *)this + v103) = v105;
        if (v50 && v105 && *((_DWORD *)v94 + 190) >= *(unsigned __int8 *)(v50 + 7))
        {
          v271 = (JSC::VM *)v103;
          v123 = v9;
          v263 = a5;
          JSC::Heap::writeBarrierSlowPath((uint64_t)v246, v50);
          a6 = v291;
          a5 = v263;
          a4 = v249;
          this = (JSC::JSRopeString *)(v50 + 16);
          v20 = v253;
          v103 = (unint64_t)v271;
          v95 = v273;
          v94 = v274;
          v12 = v278;
          LODWORD(v23) = v284;
          v9 = v123;
        }
        v107 = *(unsigned __int8 *)(v105 + 5);
        if (v107 == 2)
        {
          v108 = (int **)(v105 + 8);
          if ((*(_BYTE *)(v105 + 8) & 1) != 0)
          {
            v267 = (JSC::VM *)v103;
            v116 = v9;
            v259 = a5;
            v117 = JSC::JSRopeString::resolveRope(v105, (JSC::JSGlobalObject *)v12, (uint64_t)this, a4, a9, a5, (uint64_t)v291, a7, a8);
            a6 = v291;
            a5 = v259;
            a4 = v249;
            this = (JSC::JSRopeString *)(v50 + 16);
            v20 = v253;
            v103 = (unint64_t)v267;
            v95 = v273;
            v94 = v274;
            v12 = v278;
            LODWORD(v23) = v284;
            v9 = v116;
            v108 = v117;
          }
          if (!*((_DWORD *)v94 + 20))
            goto LABEL_115;
          v264 = a5;
          v272 = (JSC::VM *)v103;
          v124 = *((_DWORD *)v94 + 20);
          if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
            JSC::VMTraps::handleTraps(v245, 7u, (uint64_t)this, a4, a5, (uint64_t)v291, a7, a8);
          v94 = v274;
          v12 = v278;
          v9 = v247;
          this = (JSC::JSRopeString *)(v50 + 16);
          v20 = v253;
          LODWORD(v23) = v284;
          v103 = (unint64_t)v272;
          v95 = v273;
          a4 = v249;
          a5 = v264;
          a6 = v291;
          if (*((_QWORD *)v274 + 2))
          {
            v111 = -1;
          }
          else
          {
LABEL_115:
            v109 = (WTF::StringImpl *)*v108;
            v110 = (*v108)[4];
            if (v110 < 0x100)
            {
              v114 = v9;
              v266 = (JSC::VM *)v103;
              v258 = a5;
              v115 = WTF::StringImpl::hashSlowCase(v109);
              a6 = v291;
              a5 = v258;
              a4 = v249;
              this = (JSC::JSRopeString *)(v50 + 16);
              v20 = v253;
              v103 = (unint64_t)v266;
              v95 = v273;
              v94 = v274;
              v12 = v278;
              LODWORD(v23) = v284;
              v9 = v114;
              v111 = v115;
            }
            else
            {
              v111 = v110 >> 8;
            }
          }
          v291[0] = v105;
          goto LABEL_118;
        }
        if (v107 == 3)
        {
          v260 = a5;
          v268 = (JSC::VM *)v103;
          v111 = *(_DWORD *)(v105 + 12);
          if (!v111)
            v111 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v105);
          v9 = v247;
          v94 = v274;
          v12 = v278;
          this = (JSC::JSRopeString *)(v50 + 16);
          v20 = v253;
          LODWORD(v23) = v284;
          v103 = (unint64_t)v268;
          v95 = v273;
          a4 = v249;
          a5 = v260;
          a6 = v291;
          goto LABEL_118;
        }
      }
      v118 = (v105 + ~(v105 << 32)) ^ ((v105 + ~(v105 << 32)) >> 22);
      v119 = 9 * ((v118 + ~(v118 << 13)) ^ ((v118 + ~(v118 << 13)) >> 8));
      v120 = (v119 ^ (v119 >> 15)) + ~((v119 ^ (v119 >> 15)) << 27);
      v111 = (v120 >> 31) ^ v120;
LABEL_118:
      if (*((_DWORD *)v94 + 20))
      {
        v262 = a5;
        v270 = (JSC::VM *)v103;
        v121 = v9;
        v122 = *((_DWORD *)v94 + 20);
        if ((v122 & 0x27) != 0 && (v122 & 0x20) == 0)
          JSC::VMTraps::handleTraps(v245, 7u, (uint64_t)this, a4, a5, (uint64_t)v291, a7, a8);
        v94 = v274;
        v12 = v278;
        v9 = v121;
        this = (JSC::JSRopeString *)(v50 + 16);
        v20 = v253;
        LODWORD(v23) = v284;
        v103 = (unint64_t)v270;
        v95 = v273;
        a4 = v249;
        a5 = v262;
        a6 = v291;
        if (*((_QWORD *)v274 + 2))
        {
          v50 = 0;
          v11 = v289;
          goto LABEL_212;
        }
      }
      v112 = (v111 & a4) + 4;
      v113 = *((_QWORD *)this + v112);
      *((_QWORD *)this + v112) = v103 | 0xFFFE000000000000;
      *((_QWORD *)this + (v103 + 1)) = v113;
      v11 = v289;
LABEL_121:
      ++v102;
      v104 += 2;
      if (v48 == v102)
        goto LABEL_212;
    }
  }
  v50 = 0;
  if (!*((_DWORD *)v94 + 20))
    goto LABEL_213;
LABEL_212:
  v177 = v23;
  v178 = v20;
  v179 = v12;
  v180 = v9;
  v181 = *((_DWORD *)v94 + 20);
  if ((v181 & 0x27) != 0 && (v181 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VM *)((char *)v274 + 64), 7u, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
  v94 = v274;
  v11 = v289;
  v9 = v180;
  v12 = v179;
  v20 = v178;
  LODWORD(v23) = v177;
  if (*((_QWORD *)v274 + 2))
  {
    v50 = 0;
  }
  else
  {
LABEL_213:
    *v21 = v50;
    if (v50 && (v50 & 0xFFFE000000000002) == 0)
    {
      v173 = v23;
      v174 = v20;
      v175 = v12;
      v176 = v9;
      if (*((_DWORD *)v94 + 190) >= *(unsigned __int8 *)(v19 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v274 + 192, v19);
      v11 = v289;
      v9 = v176;
      v12 = v175;
      v20 = v174;
      LODWORD(v23) = v173;
    }
  }
LABEL_41:
  if (*((_DWORD *)v20 + 20))
  {
    v134 = *((_DWORD *)v20 + 20);
    if ((v134 & 0x27) != 0 && (v134 & 0x20) == 0)
    {
      v189 = v9;
      v190 = v12;
      v191 = v20;
      v192 = v23;
      JSC::VMTraps::handleTraps((JSC *)((char *)v20 + 64), 7u, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
      LODWORD(v23) = v192;
      v20 = v191;
      v12 = v190;
      v9 = v189;
    }
    if (*((_QWORD *)v20 + 2))
      return;
  }
  v51 = v50 + 16;
  v52 = *(_QWORD *)(v50 + 16);
  v53 = *(_DWORD *)(v50 + 32);
  v54 = *(_DWORD *)(v50 + 24);
  *(_QWORD *)(v50 + 16) = v52 + 1;
  if (v22)
  {
    if (v50 == v19)
    {
      v55 = 0;
      goto LABEL_45;
    }
    v55 = 1;
LABEL_200:
    v24 = (v23 & (v53 - 1)) + 4;
LABEL_45:
    v56 = (v53 + 2 * (v54 + v52) + 4);
    v57 = *(_QWORD *)(v51 + 8 * v24);
    *(_QWORD *)(v51 + 8 * v24) = v56 | 0xFFFE000000000000;
    *(_QWORD *)(v51 + 8 * (v53 + 2 * (v54 + v52) + 5)) = v57;
    *(_QWORD *)(v51 + 8 * v56) = v22;
    v58 = (uint64_t)v20 + 192;
    if (v22
      && (v22 & 0xFFFE000000000002) == 0
      && *((_DWORD *)v20 + 190) >= *(unsigned __int8 *)(v50 + 7))
    {
      v139 = v20;
      JSC::Heap::writeBarrierSlowPath((uint64_t)v20 + 192, v50);
      v20 = v139;
    }
    if (v55)
    {
      *(_QWORD *)(v11 + 16) = v50;
      if (*((_DWORD *)v20 + 190) >= *(unsigned __int8 *)(v11 + 7))
        JSC::Heap::writeBarrierSlowPath(v58, v11);
    }
    return;
  }
  if ((v9 + 0x2000000000000) >> 50)
  {
    a9.i64[0] = v9 - 0x2000000000000;
    v182 = (int)COERCE_DOUBLE(v9 - 0x2000000000000);
    if (COERCE_DOUBLE(v9 - 0x2000000000000) == (double)(int)v182)
      v9 = v182 | 0xFFFE000000000000;
  }
  if ((v9 & 0xFFFE000000000002) != 0)
  {
LABEL_197:
    v148 = (v9 + ~(v9 << 32)) ^ ((v9 + ~(v9 << 32)) >> 22);
    v149 = 9 * ((v148 + ~(v148 << 13)) ^ ((v148 + ~(v148 << 13)) >> 8));
    v150 = (v149 ^ (v149 >> 15)) + ~((v149 ^ (v149 >> 15)) << 27);
    LODWORD(v23) = (v150 >> 31) ^ v150;
    goto LABEL_198;
  }
  v135 = *(unsigned __int8 *)(v9 + 5);
  if (v135 != 2)
  {
    if (v135 == 3)
    {
      v242 = v20;
      v243 = v9;
      if (*(_DWORD *)(v9 + 12))
      {
        LODWORD(v23) = *(_DWORD *)(v9 + 12);
      }
      else
      {
        v244 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v9);
        v9 = v243;
        LODWORD(v23) = v244;
      }
      v20 = v242;
      goto LABEL_198;
    }
    goto LABEL_197;
  }
  v136 = (int **)(v9 + 8);
  if ((*(_BYTE *)(v9 + 8) & 1) != 0)
  {
    v156 = v9;
    v157 = v20;
    v158 = JSC::JSRopeString::resolveRope(v9, (JSC::JSGlobalObject *)v12, (uint64_t)this, a4, a9, a5, (uint64_t)a6, a7, a8);
    v20 = v157;
    v9 = v156;
    v136 = v158;
  }
  if (!*((_DWORD *)v20 + 20))
    goto LABEL_174;
  v197 = v9;
  v198 = v20;
  v199 = *((_DWORD *)v20 + 20);
  if ((v199 & 0x27) != 0 && (v199 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC *)((char *)v20 + 64), 7u, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
  v20 = v198;
  v9 = v197;
  if (*((_QWORD *)v198 + 2))
  {
    LODWORD(v23) = -1;
  }
  else
  {
LABEL_174:
    v137 = (WTF::StringImpl *)*v136;
    v138 = (*v136)[4];
    if (v138 < 0x100)
    {
      v153 = v9;
      v154 = v20;
      v155 = WTF::StringImpl::hashSlowCase(v137);
      v20 = v154;
      v9 = v153;
      LODWORD(v23) = v155;
    }
    else
    {
      LODWORD(v23) = v138 >> 8;
    }
  }
LABEL_198:
  if (!*((_DWORD *)v20 + 20))
    goto LABEL_199;
  v193 = v23;
  v194 = v9;
  v195 = v20;
  v196 = *((_DWORD *)v20 + 20);
  if ((v196 & 0x27) != 0 && (v196 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC *)((char *)v20 + 64), 7u, (uint64_t)this, a4, a5, (uint64_t)a6, a7, a8);
  v20 = v195;
  v9 = v194;
  LODWORD(v23) = v193;
  if (!*((_QWORD *)v195 + 2))
  {
LABEL_199:
    v55 = v50 != v19;
    v22 = v9;
    goto LABEL_200;
  }
}

uint64_t WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  JSC::Wasm::NameSection *v22;

  v9 = *(_DWORD *)(a1 + 12);
  if (v9)
  {
    v10 = *(_QWORD *)a1;
    v11 = *(_QWORD *)a1 + 72 * v9;
    do
    {
      v12 = *(_QWORD *)(v10 + 64);
      *(_QWORD *)(v10 + 64) = 0;
      if (v12)
      {
        do
        {
          v13 = __ldaxr((unsigned int *)v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, (unsigned int *)v12));
        if (!v14)
        {
          atomic_store(1u, (unsigned int *)v12);
          v18 = *(_QWORD *)(v12 + 24);
          if (v18)
            WTF::fastFree(v18, a2, a3, a4, a5, a6, a7, a8);
          v19 = *(_QWORD *)(v12 + 32);
          if (v19)
            WTF::fastFree(v19, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v12, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if (*(_BYTE *)(v10 + 48))
      {
        v15 = *(unsigned int **)(v10 + 40);
        *(_QWORD *)(v10 + 40) = 0;
        if (v15)
        {
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            v22 = (JSC::Wasm::NameSection *)v15;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v22, a2, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      v10 += 72;
    }
    while (v10 != v11);
  }
  v20 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v20, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 < a2)
  {
    v5 = v4 + (v4 >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 <= a2)
      v6 = a2;
    if (v6 >= 0x38E38E4)
    {
      __break(0xC471u);
      JUMPOUT(0x198BB26D8);
    }
    v7 = *(char **)a1;
    v8 = (char *)(*(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 12));
    v9 = 72 * v6;
    v10 = WTF::fastMalloc((WTF *)(72 * v6));
    *(_DWORD *)(a1 + 8) = (v9 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)a1 = v10;
    WTF::VectorMover<false,JSC::SamplingProfiler::UnprocessedStackFrame>::move(v7, v8, v10, v11, v12, v13, v14, v15);
    if (v7)
    {
      if (*(char **)a1 == v7)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v7, v16, v17, v18, v19, v20, v21, v22);
    }
  }
  v23 = *(char **)a1;
  if (*(_QWORD *)a1)
  {
    v24 = *(unsigned int *)(a1 + 12);
    if (v24 != a2)
    {
      v25 = &v23[72 * a2];
      v26 = &v23[72 * v24];
      do
      {
        *((_OWORD *)v26 + 2) = 0uLL;
        *((_OWORD *)v26 + 3) = 0uLL;
        *(_OWORD *)v26 = 0uLL;
        *((_OWORD *)v26 + 1) = 0uLL;
        *((_DWORD *)v26 + 6) = -1;
        *((_QWORD *)v26 + 8) = 0;
        v26 += 72;
      }
      while (v26 != v25);
    }
  }
  *(_DWORD *)(a1 + 12) = a2;
  return 1;
}

void WTF::VectorMover<false,JSC::SamplingProfiler::UnprocessedStackFrame>::move(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::Wasm::NameSection *v8;
  JSC::Wasm::NameSection *v9;
  uint64_t v10;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  JSC::Wasm::NameSection *v24[9];

  if (a1 != a2)
  {
    v24[7] = v8;
    v24[8] = v9;
    v10 = a3;
    v12 = a1;
    do
    {
      v13 = *(_OWORD *)v12;
      *(_OWORD *)(v10 + 13) = *(_OWORD *)(v12 + 13);
      *(_OWORD *)v10 = v13;
      *(_BYTE *)(v10 + 32) = 0;
      *(_BYTE *)(v10 + 48) = 0;
      if (v12[48])
      {
        *(_QWORD *)(v10 + 32) = *((_QWORD *)v12 + 4);
        v14 = *((_QWORD *)v12 + 5);
        *((_QWORD *)v12 + 5) = 0;
        *(_QWORD *)(v10 + 40) = v14;
        *(_BYTE *)(v10 + 48) = 1;
      }
      *(_WORD *)(v10 + 56) = *((_WORD *)v12 + 28);
      v15 = *((_QWORD *)v12 + 8);
      *((_QWORD *)v12 + 8) = 0;
      *(_QWORD *)(v10 + 64) = v15;
      v16 = *((_QWORD *)v12 + 8);
      *((_QWORD *)v12 + 8) = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr((unsigned int *)v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, (unsigned int *)v16));
        if (!v18)
        {
          atomic_store(1u, (unsigned int *)v16);
          v22 = *(_QWORD *)(v16 + 24);
          if (v22)
            WTF::fastFree(v22, a2, a3, a4, a5, a6, a7, a8);
          v23 = *(_QWORD *)(v16 + 32);
          if (v23)
            WTF::fastFree(v23, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v16, a2, a3, a4, a5, a6, a7, a8);
        }
      }
      if (v12[48])
      {
        v19 = (unsigned int *)*((_QWORD *)v12 + 5);
        *((_QWORD *)v12 + 5) = 0;
        if (v19)
        {
          do
          {
            v20 = __ldaxr(v19);
            v21 = v20 - 1;
          }
          while (__stlxr(v21, v19));
          if (!v21)
          {
            atomic_store(1u, v19);
            v24[0] = (JSC::Wasm::NameSection *)v19;
            WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v24, a2, a3, a4, a5, a6, a7, a8);
          }
        }
      }
      v10 += 72;
      v12 += 72;
    }
    while (v12 != a2);
  }
}

_QWORD *WTF::Detail::CallableWrapper<JSC::SamplingProfiler::createThreadIfNecessary(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = (unsigned int *)a1[1];
  *a1 = &off_1E35ADBC0;
  a1[1] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      JSC::SamplingProfiler::~SamplingProfiler((JSC::SamplingProfiler *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v13, v14, v15, v16, v17, v18, v19, v20);
    }
  }
  return a1;
}

void WTF::Detail::CallableWrapper<JSC::SamplingProfiler::createThreadIfNecessary(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E35ADBC0;
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      JSC::SamplingProfiler::~SamplingProfiler((JSC::SamplingProfiler *)v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v12, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  WTF::fastFree((unint64_t)this, a2, a3, a4, a5, a6, a7, a8);
}

void WTF::Detail::CallableWrapper<JSC::SamplingProfiler::createThreadIfNecessary(void)::$_0,void>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned __int8 *v9;
  double v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  double v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  double v24;
  unsigned __int8 *v25;
  unint64_t *v26;
  double v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v40;
  unsigned int v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unsigned int v50;
  unsigned int v51;
  _opaque_pthread_t *v52;
  unint64_t v54;
  char *stackaddr_np;
  int v56;
  _opaque_pthread_t *v57;
  size_t stacksize_np;
  _opaque_pthread_t *v59;
  unint64_t v60;
  uint64_t v61;
  kern_return_t state;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v81;
  int v82;
  _BOOL4 v83;
  _QWORD *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  BOOL v95;
  int v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v103;
  unsigned __int8 *v104;
  unsigned __int8 v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  WTF *v120;
  unint64_t v121;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t *v136;
  unint64_t *v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v144;
  unint64_t v145;
  uint64_t v147;
  unsigned __int8 *v148;
  unsigned __int8 v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unsigned int v155;
  uint64_t v156;
  int v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  int v161;
  int v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  int v172;
  double v173;
  __int128 v174;
  uint64_t v175;
  unsigned int v176;
  WTF **v177;
  WTF **v178;
  unsigned int v179;
  char *v180;
  WTF *v181;
  uint64_t v182;
  __int128 v183;
  _QWORD *v184;
  _BYTE *v185;
  uint64_t v186;
  char *v187;
  WTF *v188;
  WTF *v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int *v192;
  unsigned int v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  int v198;
  double v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  WTF *v206;
  uint64_t v207;
  __int128 v208;
  _QWORD *v209;
  _BYTE *v210;
  unsigned int *v211;
  unsigned int v212;
  unsigned int *v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  unint64_t v217;
  unint64_t v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  int v222;
  __int128 v223;
  WTF *v224;
  WTF *v225;
  WTF *v226;
  unint64_t v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int v232;
  unint64_t v233;
  unint64_t v234;
  WTF *v235;
  uint64_t v236;
  unint64_t v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int *v240;
  unsigned int v241;
  unsigned int v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  double v248;
  int v249;
  unsigned int v250;
  int v251;
  int v252;
  unsigned __int8 *v253;
  int v254;
  WTF::WordLock *v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  int v259;
  char *v260;
  _QWORD *v261;
  int v262;
  char v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  WTF *v269;
  unsigned __int8 *v270;
  unsigned __int8 *v271;
  unsigned __int8 *v272;
  unsigned int *v273;
  int v274;
  int v275;
  unint64_t StatusReg;
  _BYTE v277[32];
  __int128 v278;
  WTF *v279;
  unint64_t *v280;
  WTF *v281;
  unint64_t *v282;
  unint64_t v283;
  __int16 v284;
  mach_msg_type_number_t old_stateCnt[2];
  uint64_t v286;
  unint64_t *v287;
  JSC::Wasm::NameSection *v288;
  unsigned __int8 *v289;
  unsigned __int8 **v290;
  unint64_t **v291;

  v8 = *(_QWORD *)(a1 + 8);
  v9 = (unsigned __int8 *)(v8 + 4);
  v273 = (unsigned int *)(v8 + 112);
  v261 = (_QWORD *)(v8 + 64);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  while (1)
  {
    if (__ldaxr(v9))
    {
      __clrex();
    }
    else if (!__stxr(1u, v9))
    {
      goto LABEL_6;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v8 + 4);
LABEL_6:
    if (*(_BYTE *)(v8 + 6))
      break;
    v11 = 0.0;
    if (!*(_BYTE *)(v8 + 5) && *(_QWORD *)(v8 + 96) && *(_QWORD *)(*(_QWORD *)(v8 + 8) + 90568))
    {
      v19 = *(_QWORD *)(v8 + 40);
      v20 = mach_absolute_time();
      v22 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v22 != -1)
      {
        *(_QWORD *)v277 = old_stateCnt;
        v289 = v277;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v289, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v21) = dword_1ECF4400C;
      v23 = (double)(v20 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v21 * 1000000000.0);
      v24 = v23 - *(double *)(v19 + 16) + *(double *)(v19 + 8);
      v25 = (unsigned __int8 *)&JSC::calleeRegistry;
      v26 = (unint64_t *)(**(_QWORD **)(*(_QWORD *)(v8 + 8) + 584) + 16);
      v287 = v26;
      if (__ldaxr(v26))
      {
        __clrex();
        goto LABEL_50;
      }
      if (__stxr(1uLL, v26))
LABEL_50:
        WTF::WordLock::lockSlow((WTF::WordLock *)v26);
      v38 = (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 720) + 16);
      v289 = v38;
      LOBYTE(v290) = 1;
      if (__ldaxr(v38))
      {
        __clrex();
        goto LABEL_54;
      }
      if (__stxr(1u, v38))
LABEL_54:
        WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v38);
      v275 = BYTE1(dword_1ECF4C240);
      if (BYTE1(dword_1ECF4C240))
      {
        if (qword_1ECF4C1F0)
          v40 = (unsigned __int8 *)qword_1ECF4C1F0;
        else
          v40 = (unsigned __int8 *)qword_1ECF4C1E8;
        if (__ldaxr(v40))
        {
          __clrex();
          goto LABEL_63;
        }
        if (__stxr(1u, v40))
LABEL_63:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v40);
      }
      else
      {
        v40 = 0;
      }
      v274 = BYTE2(dword_1ECF4C6C3);
      if (BYTE2(dword_1ECF4C6C3))
      {
        if (__ldaxr((unsigned __int8 *)&JSC::calleeRegistry))
        {
          __clrex();
          goto LABEL_69;
        }
        if (__stxr(1u, (unsigned __int8 *)&JSC::calleeRegistry))
LABEL_69:
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&JSC::calleeRegistry);
      }
      else
      {
        v25 = 0;
      }
      v43 = *(_DWORD *)(StatusReg + 24);
      while (!__ldaxr((unsigned int *)&pas_thread_suspend_lock))
      {
        if (!__stxr(v43, (unsigned int *)&pas_thread_suspend_lock))
          goto LABEL_75;
      }
      __clrex();
      os_unfair_lock_lock((os_unfair_lock_t)&pas_thread_suspend_lock);
LABEL_75:
      v272 = v40;
      v45 = *(_QWORD *)(v8 + 96);
      v46 = *(_QWORD *)(StatusReg + 736);
      if (!v46)
      {
        v47 = atomic_load(&WTF::initialize(void)::onceKey);
        if (v47 != -1)
        {
          *(_QWORD *)v277 = &v288;
          *(double *)old_stateCnt = COERCE_DOUBLE(v277);
          std::__call_once(&WTF::initialize(void)::onceKey, old_stateCnt, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initialize(void)::$_0 &&>>);
        }
        v270 = v25;
        v48 = WTF::fastMalloc((WTF *)0x68);
        v46 = v48;
        *(_OWORD *)v48 = 0u;
        *(_OWORD *)(v48 + 16) = 0u;
        *(_OWORD *)(v48 + 32) = 0u;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 64) = 0u;
        *(_OWORD *)(v48 + 80) = 0u;
        *(_QWORD *)(v48 + 96) = 0;
        *(_DWORD *)v48 = 1;
        *(_OWORD *)(v48 + 8) = 0u;
        v49 = (unint64_t *)(v48 + 8);
        *(_OWORD *)(v48 + 24) = 0u;
        do
        {
          v50 = __ldaxr((unsigned int *)&WTF::ThreadLike::s_uid);
          v51 = v50 + 1;
        }
        while (__stlxr(v51, (unsigned int *)&WTF::ThreadLike::s_uid));
        *(_DWORD *)(v48 + 48) = v51;
        *(_QWORD *)(v48 + 52) = 0;
        *(_QWORD *)(v48 + 68) = 0;
        *(_QWORD *)(v48 + 60) = 0;
        *(_DWORD *)(v48 + 76) = 0;
        *(_QWORD *)(v48 + 88) = 0;
        *(_QWORD *)(v48 + 96) = 0;
        v52 = pthread_self();
        if (__ldaxr(v49))
        {
          __clrex();
          goto LABEL_83;
        }
        if (__stxr(1uLL, v49))
LABEL_83:
          WTF::WordLock::lockSlow((WTF::WordLock *)v49);
        *(_QWORD *)(v46 + 40) = v52;
        *(_DWORD *)(v46 + 52) = pthread_mach_thread_np(v52);
        v54 = __ldxr(v49);
        if (v54 == 1)
        {
          if (!__stlxr(0, v49))
          {
LABEL_89:
            stackaddr_np = *(char **)(v46 + 16);
            if (!stackaddr_np)
            {
              v56 = pthread_main_np();
              v57 = pthread_self();
              stackaddr_np = (char *)pthread_get_stackaddr_np(v57);
              if (v56)
              {
                getrlimit(3, (rlimit *)v277);
                if (*(_QWORD *)v277 == 0x7FFFFFFFFFFFFFFFLL)
                  stacksize_np = 0x800000;
                else
                  stacksize_np = *(_QWORD *)v277;
              }
              else
              {
                stacksize_np = pthread_get_stacksize_np(v57);
              }
              *(_QWORD *)(v46 + 16) = stackaddr_np;
              *(_QWORD *)(v46 + 24) = &stackaddr_np[-stacksize_np];
            }
            *(_QWORD *)(v46 + 80) = stackaddr_np;
            *(_QWORD *)(v46 + 56) = v46 + 64;
            v59 = pthread_self();
            v25 = v270;
            if (pthread_equal(v59, (pthread_t)WTF::s_webThreadPthread) || pthread_main_np())
            {
              v60 = atomic_load(&WTF::Thread::initializeInThread(void)::onceKey);
              if (v60 != -1)
              {
                *(_QWORD *)v277 = &v288;
                *(double *)old_stateCnt = COERCE_DOUBLE(v277);
                std::__call_once(&WTF::Thread::initializeInThread(void)::onceKey, old_stateCnt, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::Thread::initializeInThread(void)::$_0 &&>>);
              }
              *(_QWORD *)(v46 + 56) = &WTF::Thread::initializeInThread(void)::sharedStringTable;
            }
            *(_QWORD *)(StatusReg + 736) = v46;
            pthread_key_init_np();
            goto LABEL_102;
          }
        }
        else
        {
          __clrex();
        }
        WTF::WordLock::unlockSlow((WTF::WordLock *)v49);
        goto LABEL_89;
      }
LABEL_102:
      if (v46 == v45)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB40ECLL);
      }
      v11 = 0.0;
      if (thread_suspend(*(_DWORD *)(v45 + 52)))
        goto LABEL_364;
      v61 = *(_QWORD *)(v8 + 96);
      *(_QWORD *)old_stateCnt = 0x600000044;
      state = thread_get_state(*(_DWORD *)(v61 + 52), 6, (thread_state_t)v277, old_stateCnt);
      if (state)
      {
        WTFReportFatalError("/Library/Caches/com.apple.xbs/Sources/WTF/Source/WTF/wtf/posix/ThreadingPOSIX.cpp", 540, "size_t WTF::Thread::getRegisters(const ThreadSuspendLocker &, PlatformRegisters &)", "JavaScript garbage collection failed because thread_get_state returned an error (%d). This is probably the result of running inside Rosetta, which is not supported.", state);
        __break(0xC471u);
LABEL_427:
        __break(1u);
        goto LABEL_428;
      }
      v271 = v25;
      if (BYTE1(dword_1ECF4C240))
      {
        if (!v275)
          goto LABEL_427;
        if (qword_1ECF4C1F0)
        {
          v70 = *(unsigned int **)(qword_1ECF4C1F0 + 56);
          if (v70)
            v71 = v70 + 2;
          else
            v71 = 0;
          if (v70)
            v72 = (unint64_t)&v70[16 * (unint64_t)*v70 + 2];
          else
            v72 = 0;
          while (v71 != (_QWORD *)v72)
          {
            v73 = v71[5];
            if (v71[3] <= v283 && v73 > v283)
            {
              if (v71[1] > v283 || v71[2] <= v283)
              {
                if (v71[4] > v283)
                  break;
                v75 = ((v73 - v283) >> 2) - 1;
                if (v75 >= v71[7] || ((*(_DWORD *)(v71[6] + ((v75 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v75) & 1) == 0)
                  break;
              }
              v76 = *(_QWORD *)(v8 + 8);
              v77 = *(_QWORD *)(v76 + 90552);
              if (v77)
              {
                v78 = 0;
                v79 = *(_QWORD *)(v76 + 40);
                goto LABEL_137;
              }
              v78 = 0;
              goto LABEL_135;
            }
            v71 += 8;
          }
        }
      }
      if ((unint64_t)llintPCRangeStart >= (unint64_t)llintPCRangeEnd)
      {
        __break(0xC471u);
        JUMPOUT(0x198BB41ACLL);
      }
      if (v283 < (unint64_t)llintPCRangeStart || v283 > (unint64_t)llintPCRangeEnd)
      {
        v81 = *(_QWORD *)(v8 + 8);
        v77 = *(_QWORD *)(v81 + 90552);
        v79 = *(_QWORD *)(v81 + 40);
        if (!byte_1ECF4C5E8)
        {
          v78 = 0;
          goto LABEL_137;
        }
        v78 = 0;
        v82 = word_1ECF4C600;
        v83 = (_BYTE)word_1ECF4C600 == 0;
      }
      else
      {
        v77 = 0;
        v78 = 1;
LABEL_135:
        v79 = (unint64_t)v282;
LABEL_137:
        v83 = 0;
        v82 = word_1ECF4C600;
      }
      v265 = v278;
      v266 = v283;
      v264 = v77;
      v263 = v78;
      if (v82)
      {
        *(_QWORD *)v277 = *(_QWORD *)(v8 + 8);
        *(_QWORD *)&v277[8] = v79;
        *(_QWORD *)&v277[16] = *(_QWORD *)(*(_QWORD *)v277 + 48);
        *(_QWORD *)&v277[24] = &v289;
        *(_QWORD *)&v278 = &v287;
        BYTE8(v278) = 0;
        v279 = 0;
        v280 = v282;
        v84 = *(_QWORD **)(**(_QWORD **)(*(_QWORD *)v277 + 584) + 32);
        if (v84)
        {
          while (1)
          {
            v85 = *(_QWORD *)(*v84 + 16);
            if (!v85)
            {
              __break(0xC471u);
              JUMPOUT(0x198BB408CLL);
            }
            v86 = *(_QWORD *)(*v84 + 24);
            if (!v86)
            {
              __break(0xC471u);
              JUMPOUT(0x198BB40ACLL);
            }
            if (v86 > v85)
            {
              __break(0xC471u);
              JUMPOUT(0x198BB40CCLL);
            }
            if (v85 > (unint64_t)v282 && v86 <= (unint64_t)v282)
              break;
            v84 = (_QWORD *)v84[2];
            if (!v84)
              goto LABEL_149;
          }
          JSC::FrameWalker::resetAtMachineFrame((uint64_t)v277);
          v79 = *(_QWORD *)&v277[8];
        }
        else
        {
LABEL_149:
          BYTE8(v278) = 1;
        }
        v114 = *(unsigned int *)(v8 + 124);
        if (v79)
        {
          if (!BYTE8(v278) && v280 == (unint64_t *)v79)
          {
            JSC::FrameWalker::recordJITFrame((uint64_t)v277, v273, v64, v65, v66, v67, v68, v69);
            v79 = **(_QWORD **)&v277[8];
            if (**(_QWORD **)&v277[8] == *(_QWORD *)&v277[16])
            {
              v115 = vmEntryRecord(v79);
              *(_QWORD *)&v277[16] = *(_QWORD *)(v115 + 16);
              v79 = *(_QWORD *)(v115 + 8);
            }
            *(_QWORD *)&v277[8] = v79;
            v116 = *(_QWORD **)(**(_QWORD **)(*(_QWORD *)v277 + 584) + 32);
            if (v116)
            {
              while (1)
              {
                v117 = *(_QWORD *)(*v116 + 16);
                if (!v117)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198BB410CLL);
                }
                v118 = *(_QWORD *)(*v116 + 24);
                if (!v118)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198BB412CLL);
                }
                if (v118 > v117)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198BB414CLL);
                }
                if (v117 > (unint64_t)v280 && v118 <= (unint64_t)v280)
                  break;
                v116 = (_QWORD *)v116[2];
                if (!v116)
                  goto LABEL_199;
              }
              JSC::FrameWalker::resetAtMachineFrame((uint64_t)v277);
              v79 = *(_QWORD *)&v277[8];
              if (*(_QWORD *)&v277[8])
                goto LABEL_200;
            }
            else
            {
LABEL_199:
              BYTE8(v278) = 1;
              if (v79)
                goto LABEL_200;
            }
            goto LABEL_275;
          }
          while (1)
          {
LABEL_200:
            if (BYTE8(v278))
            {
              v162 = 1;
              goto LABEL_276;
            }
            v120 = v279;
            if ((unint64_t)v279 >= v114)
            {
              v162 = 1;
              goto LABEL_276;
            }
            if ((unint64_t)v280 >= v79)
              break;
            v121 = *v280;
            if (*v280 == v79)
            {
              JSC::FrameWalker::recordJITFrame((uint64_t)v277, v273, v64, v65, v66, v67, v68, v69);
            }
            else
            {
              if ((unint64_t)llintPCRangeStart >= (unint64_t)llintPCRangeEnd)
              {
                __break(0xC471u);
                JUMPOUT(0x198BB416CLL);
              }
              if (v121 >= (unint64_t)llintPCRangeStart && v121 <= (unint64_t)llintPCRangeEnd)
              {
                __break(0xC471u);
                JUMPOUT(0x198BB418CLL);
              }
              if ((unint64_t)v279 >= *(unsigned int *)(v8 + 124))
              {
                __break(0xC471u);
                JUMPOUT(0x198BB41F4);
              }
              v123 = v280[1];
              v124 = *(_QWORD *)v273;
              v125 = *(_QWORD *)v273 + 72 * (_QWORD)v279;
              *(_QWORD *)(v125 + 8) = 0;
              *(_QWORD *)(v125 + 16) = 0;
              *(_QWORD *)v125 = v123;
              *(_DWORD *)(v125 + 24) = -1;
              *(_BYTE *)(v125 + 28) = 0;
              v127 = *(unsigned __int8 *)(v125 + 48);
              v126 = (_BYTE *)(v125 + 48);
              if (v127)
              {
                v128 = v124 + 72 * (_QWORD)v120;
                v129 = *(unsigned int **)(v128 + 40);
                *(_QWORD *)(v128 + 40) = 0;
                if (*(double *)&v129 != 0.0)
                {
                  do
                  {
                    v130 = __ldaxr(v129);
                    v131 = v130 - 1;
                  }
                  while (__stlxr(v131, v129));
                  if (!v131)
                  {
                    atomic_store(1u, v129);
                    *(double *)old_stateCnt = *(double *)&v129;
                    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)old_stateCnt, v63, v64, v65, v66, v67, v68, v69);
                  }
                }
                *v126 = 0;
              }
              v132 = v124 + 72 * (_QWORD)v120;
              *(_WORD *)(v132 + 56) = 0;
              v133 = *(_QWORD *)(v132 + 64);
              *(_QWORD *)(v132 + 64) = 0;
              if (v133)
              {
                do
                {
                  v134 = __ldaxr((unsigned int *)v133);
                  v135 = v134 - 1;
                }
                while (__stlxr(v135, (unsigned int *)v133));
                if (!v135)
                {
                  atomic_store(1u, (unsigned int *)v133);
                  v158 = *(_QWORD *)(v133 + 24);
                  if (v158)
                    WTF::fastFree(v158, v63, v64, v65, v66, v67, v68, v69);
                  v159 = *(_QWORD *)(v133 + 32);
                  if (v159)
                    WTF::fastFree(v159, v63, v64, v65, v66, v67, v68, v69);
                  WTF::fastFree(v133, v63, v64, v65, v66, v67, v68, v69);
                }
              }
              v279 = (WTF *)((char *)v279 + 1);
            }
            v136 = v280;
            v79 = *(_QWORD *)&v277[8];
            v137 = (unint64_t *)*v280;
            if (*v280 == *(_QWORD *)&v277[8])
            {
              v79 = *v137;
              if (*v137 == *(_QWORD *)&v277[16])
              {
                v138 = vmEntryRecord(v79);
                *(_QWORD *)&v277[16] = *(_QWORD *)(v138 + 16);
                v79 = *(_QWORD *)(v138 + 8);
                v137 = (unint64_t *)*v136;
              }
              *(_QWORD *)&v277[8] = v79;
            }
            v280 = v137;
            v139 = *(_QWORD **)(**(_QWORD **)(*(_QWORD *)v277 + 584) + 32);
            v140 = v139;
            if (v139)
            {
              while (1)
              {
                v141 = *(_QWORD *)(*v140 + 16);
                if (!v141)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198BB3F2CLL);
                }
                v142 = *(_QWORD *)(*v140 + 24);
                if (!v142)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198BB3F4CLL);
                }
                if (v142 > v141)
                {
                  __break(0xC471u);
                  JUMPOUT(0x198BB3F6CLL);
                }
                if (v141 > (unint64_t)v137 && v142 <= (unint64_t)v137)
                  break;
                v140 = (_QWORD *)v140[2];
                if (!v140)
                  goto LABEL_236;
              }
              if (v79)
              {
                while (1)
                {
                  v144 = *(_QWORD *)(*v139 + 16);
                  if (!v144)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198BB402CLL);
                  }
                  v145 = *(_QWORD *)(*v139 + 24);
                  if (!v145)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198BB404CLL);
                  }
                  if (v145 > v144)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198BB406CLL);
                  }
                  if (v144 > v79 && v145 <= v79)
                    break;
                  v139 = (_QWORD *)v139[2];
                  if (!v139)
                    goto LABEL_248;
                }
                v147 = *(_QWORD *)(v79 + 16);
                if (v147)
                {
                  if ((*(_QWORD *)(v79 + 24) & 0xFFFE000000000007) != 3)
                  {
                    v148 = *(unsigned __int8 **)(*(_QWORD *)v277 + 720);
                    v149 = atomic_load(v148 + 16);
                    if ((v149 & 1) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x198BB41ECLL);
                    }
                    if ((unint64_t)(v147 + 1) < 2)
                      goto LABEL_248;
                    v150 = *(_QWORD *)v148;
                    if (!v150)
                      goto LABEL_248;
                    v151 = *(_DWORD *)(v150 - 8);
                    v152 = (~(v147 << 32) + v147) ^ ((unint64_t)(~(v147 << 32) + v147) >> 22);
                    v153 = 9 * ((v152 + ~(v152 << 13)) ^ ((v152 + ~(v152 << 13)) >> 8));
                    v154 = (v153 ^ (v153 >> 15)) + ~((v153 ^ (v153 >> 15)) << 27);
                    v155 = v151 & ((v154 >> 31) ^ v154);
                    v156 = *(_QWORD *)(v150 + 8 * v155);
                    if (v156 != v147)
                    {
                      v157 = 1;
                      while (v156)
                      {
                        v155 = (v155 + v157) & v151;
                        v156 = *(_QWORD *)(v150 + 8 * v155);
                        ++v157;
                        if (v156 == v147)
                          goto LABEL_251;
                      }
LABEL_248:
                      BYTE8(v278) = 1;
                    }
                  }
                }
              }
LABEL_251:
              v79 = *(_QWORD *)&v277[8];
              if (!*(_QWORD *)&v277[8])
                goto LABEL_275;
            }
            else
            {
LABEL_236:
              BYTE8(v278) = 1;
              if (!v79)
                goto LABEL_275;
            }
          }
          v162 = 1;
          BYTE8(v278) = 1;
        }
        else
        {
LABEL_275:
          v162 = 0;
        }
LABEL_276:
        v269 = v279;
        if ((unint64_t)v279 < v114)
          v162 = 0;
        v262 = v162;
        v161 = BYTE8(v278);
LABEL_279:
        thread_resume(*(_DWORD *)(*(_QWORD *)(v8 + 96) + 52));
        v268 = mach_absolute_time();
        v170 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
        if (v170 != -1)
        {
          *(_QWORD *)v277 = &v288;
          *(double *)old_stateCnt = COERCE_DOUBLE(v277);
          std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, old_stateCnt, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
        }
        v267 = WTF::machTimebaseInfo(void)::timebaseInfo;
        LODWORD(v11) = dword_1ECF4400C;
        if (!v161 && v269)
        {
          *(double *)old_stateCnt = 0.0;
          v286 = 0;
          v171 = (unint64_t)v269 + v83;
          if (v171)
          {
            if (v171 < 0x38E38E4)
            {
              v172 = 72 * v171;
              v173 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)(72 * v171)));
              v171 = ((v172 & 0xFFFFFFF8) * (unsigned __int128)0x38E38E38E38E38FuLL) >> 64;
              LODWORD(v286) = v171;
              *(double *)old_stateCnt = v173;
              if (v83)
                goto LABEL_286;
LABEL_291:
              v179 = 0;
              goto LABEL_304;
            }
LABEL_428:
            __break(0xC471u);
            JUMPOUT(0x198BB4228);
          }
          v173 = 0.0;
          if (!v83)
            goto LABEL_291;
LABEL_286:
          *(_QWORD *)v277 = v266;
          *(_QWORD *)&v277[8] = 0;
          *(_QWORD *)&v277[16] = 0;
          *(_DWORD *)&v277[24] = -1;
          v277[28] = 0;
          LOBYTE(v278) = 0;
          LOBYTE(v279) = 0;
          LOWORD(v280) = 0;
          v281 = 0;
          if (v171)
          {
            v174 = *(_OWORD *)v277;
            *(_OWORD *)(*(_QWORD *)&v173 + 13) = *(_OWORD *)&v277[13];
            **(_OWORD **)&v173 = v174;
            *(_BYTE *)(*(_QWORD *)&v173 + 32) = 0;
            *(_BYTE *)(*(_QWORD *)&v173 + 48) = 0;
            if ((_BYTE)v279)
            {
              *(_QWORD *)(*(_QWORD *)&v173 + 32) = v278;
              v175 = *((_QWORD *)&v278 + 1);
              *((_QWORD *)&v278 + 1) = 0;
              *(_QWORD *)(*(_QWORD *)&v173 + 40) = v175;
              *(_BYTE *)(*(_QWORD *)&v173 + 48) = 1;
            }
            v176 = 0;
            *(_WORD *)(*(_QWORD *)&v173 + 56) = (_WORD)v280;
            v177 = (WTF **)(*(_QWORD *)&v173 + 64);
            v178 = &v281;
          }
          else
          {
            v180 = WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)old_stateCnt, 1uLL, (unint64_t)v277);
            v176 = HIDWORD(v286);
            v181 = *(WTF **)old_stateCnt;
            v182 = *(_QWORD *)old_stateCnt + 72 * HIDWORD(v286);
            v183 = *(_OWORD *)(v180 + 13);
            *(_OWORD *)v182 = *(_OWORD *)v180;
            *(_OWORD *)(v182 + 13) = v183;
            *(_BYTE *)(v182 + 32) = 0;
            v184 = (_QWORD *)(v182 + 32);
            *(_BYTE *)(v182 + 48) = 0;
            v185 = (_BYTE *)(v182 + 48);
            if (v180[48])
            {
              *v184 = *((_QWORD *)v180 + 4);
              v186 = *((_QWORD *)v180 + 5);
              *((_QWORD *)v180 + 5) = 0;
              *((_QWORD *)v181 + 9 * v176 + 5) = v186;
              *v185 = 1;
            }
            v187 = (char *)v181 + 72 * v176;
            *((_WORD *)v187 + 28) = *((_WORD *)v180 + 28);
            v177 = (WTF **)(v187 + 64);
            v178 = (WTF **)(v180 + 64);
          }
          v188 = *v178;
          *v178 = 0;
          *v177 = v188;
          HIDWORD(v286) = v176 + 1;
          v189 = v281;
          v281 = 0;
          if (v189)
          {
            do
            {
              v190 = __ldaxr((unsigned int *)v189);
              v191 = v190 - 1;
            }
            while (__stlxr(v191, (unsigned int *)v189));
            if (!v191)
            {
              atomic_store(1u, (unsigned int *)v189);
              v257 = *((_QWORD *)v189 + 3);
              if (v257)
                WTF::fastFree(v257, v163, v164, v165, v166, v167, v168, v169);
              v258 = *((_QWORD *)v189 + 4);
              if (v258)
                WTF::fastFree(v258, v163, v164, v165, v166, v167, v168, v169);
              WTF::fastFree((unint64_t)v189, v163, v164, v165, v166, v167, v168, v169);
            }
          }
          if ((_BYTE)v279)
          {
            v192 = (unsigned int *)*((_QWORD *)&v278 + 1);
            *((_QWORD *)&v278 + 1) = 0;
            if (v192)
            {
              do
              {
                v193 = __ldaxr(v192);
                v194 = v193 - 1;
              }
              while (__stlxr(v194, v192));
              if (!v194)
              {
                atomic_store(1u, v192);
                v288 = (JSC::Wasm::NameSection *)v192;
                WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v288, v163, v164, v165, v166, v167, v168, v169);
              }
            }
          }
          v171 = v286;
          v179 = HIDWORD(v286);
LABEL_304:
          v195 = *(_QWORD *)v273;
          v196 = (unint64_t)v269 + v179;
          if (v196 > v171)
          {
            if (v196 >= 0x38E38E4)
            {
LABEL_429:
              __break(0xC471u);
              JUMPOUT(0x198BB3ECCLL);
            }
            v197 = *(char **)old_stateCnt;
            v260 = (char *)(*(_QWORD *)old_stateCnt + 72 * v179);
            v198 = 72 * v196;
            v199 = COERCE_DOUBLE(WTF::fastMalloc((WTF *)(72 * v196)));
            LODWORD(v286) = (v198 & 0xFFFFFFF8) / 0x48;
            *(double *)old_stateCnt = v199;
            WTF::VectorMover<false,JSC::SamplingProfiler::UnprocessedStackFrame>::move(v197, v260, *(uint64_t *)&v199, v200, v201, v202, v203, v204);
            if (v197)
            {
              if (*(char **)&v199 == v197)
              {
                *(double *)old_stateCnt = 0.0;
                LODWORD(v286) = 0;
              }
              WTF::fastFree((unint64_t)v197, v163, v164, v165, v166, v167, v168, v169);
            }
          }
          v205 = v195 + 72 * (_QWORD)v269;
          do
          {
            v206 = *(WTF **)old_stateCnt;
            v207 = *(_QWORD *)old_stateCnt + 72 * v179;
            v208 = *(_OWORD *)(v195 + 13);
            *(_OWORD *)v207 = *(_OWORD *)v195;
            *(_OWORD *)(v207 + 13) = v208;
            *(_BYTE *)(v207 + 32) = 0;
            v209 = (_QWORD *)(v207 + 32);
            *(_BYTE *)(v207 + 48) = 0;
            v210 = (_BYTE *)(v207 + 48);
            if (*(_BYTE *)(v195 + 48))
            {
              *v209 = *(_QWORD *)(v195 + 32);
              v211 = *(unsigned int **)(v195 + 40);
              if (v211)
              {
                do
                  v212 = __ldaxr(v211);
                while (__stlxr(v212 + 1, v211));
              }
              *((_QWORD *)v206 + 9 * v179 + 5) = v211;
              *v210 = 1;
            }
            *((_WORD *)v206 + 36 * v179 + 28) = *(_WORD *)(v195 + 56);
            v213 = *(unsigned int **)(v195 + 64);
            if (v213)
            {
              do
                v214 = __ldaxr(v213);
              while (__stlxr(v214 + 1, v213));
            }
            *((_QWORD *)v206 + 9 * v179 + 8) = v213;
            v179 = ++HIDWORD(v286);
            v195 += 72;
          }
          while (v195 != v205);
          *(double *)v277 = v23;
          *(double *)&v277[8] = v24;
          *(_QWORD *)&v277[16] = v266;
          v277[24] = v263;
          *(_QWORD *)&v278 = v265;
          *((_QWORD *)&v278 + 1) = v264;
          v279 = *(WTF **)old_stateCnt;
          v215 = v286;
          *(double *)old_stateCnt = 0.0;
          v286 = 0;
          v280 = (unint64_t *)__PAIR64__(v179, v215);
          v216 = *(unsigned int *)(v8 + 76);
          if ((_DWORD)v216 == *(_DWORD *)(v8 + 72))
          {
            v217 = WTF::Vector<JSC::SamplingProfiler::UnprocessedStackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v261, v216 + 1, (unint64_t)v277);
            v218 = *(_QWORD *)(v8 + 64) + ((unint64_t)*(unsigned int *)(v8 + 76) << 6);
            v220 = *(_OWORD *)(v217 + 16);
            v219 = *(_OWORD *)(v217 + 32);
            *(_OWORD *)v218 = *(_OWORD *)v217;
            *(_OWORD *)(v218 + 16) = v220;
            *(_OWORD *)(v218 + 32) = v219;
            *(_QWORD *)(v218 + 48) = 0;
            *(_QWORD *)(v218 + 56) = 0;
            v221 = *(_QWORD *)(v217 + 48);
            *(_QWORD *)(v217 + 48) = 0;
            *(_QWORD *)(v218 + 48) = v221;
            LODWORD(v221) = *(_DWORD *)(v217 + 56);
            *(_DWORD *)(v217 + 56) = 0;
            *(_DWORD *)(v218 + 56) = v221;
            v222 = *(_DWORD *)(v217 + 60);
            *(_DWORD *)(v217 + 60) = 0;
          }
          else
          {
            v218 = *v261 + (v216 << 6);
            v219 = *(_OWORD *)v277;
            v223 = v278;
            *(_OWORD *)(v218 + 16) = *(_OWORD *)&v277[16];
            *(_OWORD *)(v218 + 32) = v223;
            *(_OWORD *)v218 = v219;
            *(_QWORD *)(v218 + 56) = 0;
            v224 = v279;
            v279 = 0;
            *(_QWORD *)(v218 + 48) = v224;
            LODWORD(v224) = (_DWORD)v280;
            LODWORD(v280) = 0;
            *(_DWORD *)(v218 + 56) = (_DWORD)v224;
            v222 = HIDWORD(v280);
            HIDWORD(v280) = 0;
          }
          *(_DWORD *)(v218 + 60) = v222;
          ++*(_DWORD *)(v8 + 76);
          v225 = v279;
          if (HIDWORD(v280))
          {
            v226 = (WTF *)((char *)v279 + 72 * HIDWORD(v280));
            do
            {
              v227 = *((_QWORD *)v225 + 8);
              *((_QWORD *)v225 + 8) = 0;
              if (v227)
              {
                do
                {
                  v228 = __ldaxr((unsigned int *)v227);
                  v229 = v228 - 1;
                }
                while (__stlxr(v229, (unsigned int *)v227));
                if (!v229)
                {
                  atomic_store(1u, (unsigned int *)v227);
                  v233 = *(_QWORD *)(v227 + 24);
                  if (v233)
                    WTF::fastFree(v233, v163, v164, v165, v166, v167, v168, v169);
                  v234 = *(_QWORD *)(v227 + 32);
                  if (v234)
                    WTF::fastFree(v234, v163, v164, v165, v166, v167, v168, v169);
                  WTF::fastFree(v227, v163, v164, v165, v166, v167, v168, v169);
                }
              }
              if (*((_BYTE *)v225 + 48))
              {
                v230 = (unsigned int *)*((_QWORD *)v225 + 5);
                *((_QWORD *)v225 + 5) = 0;
                if (v230)
                {
                  do
                  {
                    v231 = __ldaxr(v230);
                    v232 = v231 - 1;
                  }
                  while (__stlxr(v232, v230));
                  if (!v232)
                  {
                    atomic_store(1u, v230);
                    v288 = (JSC::Wasm::NameSection *)v230;
                    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v288, v163, v164, v165, v166, v167, v168, v169);
                  }
                }
              }
              v225 = (WTF *)((char *)v225 + 72);
            }
            while (v225 != v226);
            v225 = v279;
          }
          if (v225)
          {
            v279 = 0;
            LODWORD(v280) = 0;
            WTF::fastFree((unint64_t)v225, v163, v164, v165, v166, v167, v168, v169);
          }
          if (v262)
          {
            LODWORD(v219) = *(_DWORD *)(v8 + 124);
            WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)v273, (unint64_t)((double)(unint64_t)v219 * 1.25));
          }
          v235 = *(WTF **)old_stateCnt;
          if (HIDWORD(v286))
          {
            v236 = *(_QWORD *)old_stateCnt + 72 * HIDWORD(v286);
            do
            {
              v237 = *((_QWORD *)v235 + 8);
              *((_QWORD *)v235 + 8) = 0;
              if (v237)
              {
                do
                {
                  v238 = __ldaxr((unsigned int *)v237);
                  v239 = v238 - 1;
                }
                while (__stlxr(v239, (unsigned int *)v237));
                if (!v239)
                {
                  atomic_store(1u, (unsigned int *)v237);
                  v243 = *(_QWORD *)(v237 + 24);
                  if (v243)
                    WTF::fastFree(v243, v163, v164, v165, v166, v167, v168, v169);
                  v244 = *(_QWORD *)(v237 + 32);
                  if (v244)
                    WTF::fastFree(v244, v163, v164, v165, v166, v167, v168, v169);
                  WTF::fastFree(v237, v163, v164, v165, v166, v167, v168, v169);
                }
              }
              if (*((_BYTE *)v235 + 48))
              {
                v240 = (unsigned int *)*((_QWORD *)v235 + 5);
                *((_QWORD *)v235 + 5) = 0;
                if (v240)
                {
                  do
                  {
                    v241 = __ldaxr(v240);
                    v242 = v241 - 1;
                  }
                  while (__stlxr(v242, v240));
                  if (!v242)
                  {
                    atomic_store(1u, v240);
                    *(_QWORD *)v277 = v240;
                    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((JSC::Wasm::NameSection **)v277, v163, v164, v165, v166, v167, v168, v169);
                  }
                }
              }
              v235 = (WTF *)((char *)v235 + 72);
            }
            while (v235 != (WTF *)v236);
            v235 = *(WTF **)old_stateCnt;
          }
          if (v235)
            WTF::fastFree((unint64_t)v235, v163, v164, v165, v166, v167, v168, v169);
        }
        v245 = mach_absolute_time();
        v246 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
        if (v246 != -1)
        {
          *(_QWORD *)v277 = &v288;
          *(double *)old_stateCnt = COERCE_DOUBLE(v277);
          std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, old_stateCnt, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
        }
        *(double *)&v247 = (double)*(unint64_t *)&v11 * 1000000000.0;
        v248 = (double)(v268 * v267) / *(double *)&v247;
        LODWORD(v247) = dword_1ECF4400C;
        v11 = (double)(v245 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v247 * 1000000000.0)
            - v248;
        v25 = v271;
LABEL_364:
        v249 = *(_DWORD *)(StatusReg + 24);
        while (1)
        {
          v250 = __ldxr((unsigned int *)&pas_thread_suspend_lock);
          if (v250 != v249)
            break;
          if (!__stlxr(0, (unsigned int *)&pas_thread_suspend_lock))
            goto LABEL_369;
        }
        __clrex();
        os_unfair_lock_unlock((os_unfair_lock_t)&pas_thread_suspend_lock);
LABEL_369:
        if (v274)
        {
          v251 = __ldxr(v25);
          if (v251 == 1)
          {
            if (!__stlxr(0, v25))
              goto LABEL_375;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v25, 0, a3, a4, a5, a6, a7, a8);
        }
LABEL_375:
        if (v275)
        {
          v252 = __ldxr(v272);
          if (v252 == 1)
          {
            if (!__stlxr(0, v272))
              goto LABEL_381;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v272, 0, a3, a4, a5, a6, a7, a8);
        }
LABEL_381:
        if ((_BYTE)v290)
        {
          v253 = v289;
          v254 = __ldxr(v289);
          if (v254 == 1)
          {
            if (!__stlxr(0, v289))
              goto LABEL_387;
          }
          else
          {
            __clrex();
          }
          WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v253, 0, a3, a4, a5, a6, a7, a8);
        }
LABEL_387:
        v255 = (WTF::WordLock *)v287;
        if (!v287)
          goto LABEL_8;
        v256 = __ldxr(v287);
        if (v256 == 1)
        {
          if (!__stlxr(0, v287))
            goto LABEL_8;
        }
        else
        {
          __clrex();
        }
        WTF::WordLock::unlockSlow(v255);
        goto LABEL_8;
      }
      *(_QWORD *)v277 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)&v277[8] = v79;
      *(_QWORD *)&v277[16] = *(_QWORD *)(*(_QWORD *)v277 + 48);
      *(_QWORD *)&v277[24] = &v289;
      *(_QWORD *)&v278 = &v287;
      BYTE8(v278) = 0;
      v279 = 0;
      JSC::FrameWalker::resetAtMachineFrame((uint64_t)v277);
      v94 = *(unsigned int *)(v8 + 124);
      if (!*(_QWORD *)&v277[8])
      {
        v96 = 0;
LABEL_267:
        v269 = v279;
        if ((unint64_t)v279 >= v94)
          v160 = v96;
        else
          v160 = 0;
        v262 = v160;
        v161 = BYTE8(v278);
        goto LABEL_279;
      }
      while (2)
      {
        if (BYTE8(v278))
          v95 = 1;
        else
          v95 = (unint64_t)v279 >= v94;
        v96 = v95;
        if (v95)
          goto LABEL_267;
        JSC::FrameWalker::recordJITFrame((uint64_t)v277, v273, v88, v89, v90, v91, v92, v93);
        v97 = **(_QWORD **)&v277[8];
        if (**(_QWORD **)&v277[8] == *(_QWORD *)&v277[16])
        {
          v98 = vmEntryRecord(v97);
          *(_QWORD *)&v277[16] = *(_QWORD *)(v98 + 16);
          v97 = *(_QWORD *)(v98 + 8);
        }
        *(_QWORD *)&v277[8] = v97;
        if (!v97)
          goto LABEL_267;
        v99 = *(_QWORD **)(**(_QWORD **)(*(_QWORD *)v277 + 584) + 32);
        if (v99)
        {
          while (1)
          {
            v100 = *(_QWORD *)(*v99 + 16);
            if (!v100)
              goto LABEL_429;
            v101 = *(_QWORD *)(*v99 + 24);
            if (!v101)
            {
              __break(0xC471u);
              JUMPOUT(0x198BB3EECLL);
            }
            if (v101 > v100)
            {
              __break(0xC471u);
              JUMPOUT(0x198BB3F0CLL);
            }
            if (v100 > v97 && v101 <= v97)
              break;
            v99 = (_QWORD *)v99[2];
            if (!v99)
              goto LABEL_171;
          }
          v103 = *(_QWORD *)(v97 + 16);
          if (v103 && (*(_QWORD *)(v97 + 24) & 0xFFFE000000000007) != 3)
          {
            v104 = *(unsigned __int8 **)(*(_QWORD *)v277 + 720);
            v105 = atomic_load(v104 + 16);
            if ((v105 & 1) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x198BB41CCLL);
            }
            if ((unint64_t)(v103 + 1) < 2)
              goto LABEL_171;
            v106 = *(_QWORD *)v104;
            if (!v106)
              goto LABEL_171;
            v107 = *(_DWORD *)(v106 - 8);
            v108 = (~(v103 << 32) + v103) ^ ((unint64_t)(~(v103 << 32) + v103) >> 22);
            v109 = 9 * ((v108 + ~(v108 << 13)) ^ ((v108 + ~(v108 << 13)) >> 8));
            v110 = (v109 ^ (v109 >> 15)) + ~((v109 ^ (v109 >> 15)) << 27);
            v111 = v107 & ((v110 >> 31) ^ v110);
            v112 = *(_QWORD *)(v106 + 8 * v111);
            if (v112 != v103)
            {
              v113 = 1;
              while (v112)
              {
                v111 = (v111 + v113) & v107;
                v112 = *(_QWORD *)(v106 + 8 * v111);
                ++v113;
                if (v112 == v103)
                  goto LABEL_172;
              }
              goto LABEL_171;
            }
          }
        }
        else
        {
LABEL_171:
          BYTE8(v278) = 1;
        }
LABEL_172:
        if (!*(_QWORD *)&v277[8])
          goto LABEL_267;
        continue;
      }
    }
LABEL_8:
    v12 = __ldxr(v9);
    if (v12 != 1)
    {
      __clrex();
LABEL_12:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 4), 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_13;
    }
    if (__stlxr(0, v9))
      goto LABEL_12;
LABEL_13:
    v13 = *(_QWORD *)(v8 + 32);
    v14 = *(_QWORD *)(v8 + 24) ^ (*(_QWORD *)(v8 + 24) << 23);
    v15 = (v13 >> 26) ^ (v14 >> 17) ^ v13 ^ v14;
    *(_QWORD *)(v8 + 24) = v13;
    *(_QWORD *)(v8 + 32) = v15;
    v16 = *(double *)(v8 + 80);
    if (v11 >= v16)
      v17 = *(double *)(v8 + 80);
    else
      v17 = v11;
    v284 = 0;
    if (__ldaxr((unsigned __int8 *)&v284 + 1))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&v284 + 1))
    {
      goto LABEL_26;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&v284 + 1);
LABEL_26:
    v28 = v16 - v17 + v16 * 0.2 * ((double)((v15 + v13) & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16 * 2.0 + -1.0);
    if (fabs(v28) != INFINITY)
    {
      v29 = mach_absolute_time();
      v31 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
      if (v31 != -1)
      {
        *(_QWORD *)v277 = old_stateCnt;
        v289 = v277;
        std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v289, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
      }
      LODWORD(v30) = dword_1ECF4400C;
      v28 = v28 + (double)(v29 * WTF::machTimebaseInfo(void)::timebaseInfo) / ((double)v30 * 1000000000.0);
    }
    *(double *)old_stateCnt = v28;
    LODWORD(v286) = 1;
    v32 = mach_absolute_time();
    v34 = atomic_load(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag);
    if (v34 != -1)
    {
      *(_QWORD *)v277 = &v288;
      v289 = v277;
      std::__call_once(&WTF::machTimebaseInfo(void)::initializeTimerOnceFlag, &v289, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::machTimebaseInfo(void)::$_0 &&>>);
    }
    if ((_DWORD)v286 != 1)
    {
      __break(0xC471u);
      JUMPOUT(0x198BB3FD0);
    }
    LODWORD(v33) = dword_1ECF4400C;
    if (*(double *)old_stateCnt >= (double)(v32 * WTF::machTimebaseInfo(void)::timebaseInfo)
                                  / ((double)v33
                                   * 1000000000.0))
    {
      v287 = (unint64_t *)((char *)&v284 + 1);
      v288 = (JSC::Wasm::NameSection *)&v284;
      *(_QWORD *)v277 = WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
      *(_QWORD *)&v277[8] = v277;
      *(_QWORD *)&v277[16] = &v288;
      v289 = (unsigned __int8 *)WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
      v290 = &v289;
      v291 = &v287;
      WTF::ParkingLot::parkConditionallyImpl((uint64_t)&v284, (uint64_t)v277, (uint64_t)&v289, (WTF::TimeWithDynamicClockType *)old_stateCnt);
      goto LABEL_40;
    }
    v35 = __ldxr((unsigned __int8 *)&v284 + 1);
    if (v35 != 1)
    {
      __clrex();
LABEL_39:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&v284 + 1, 0, a3, a4, a5, a6, a7, a8);
      goto LABEL_40;
    }
    if (__stlxr(0, (unsigned __int8 *)&v284 + 1))
      goto LABEL_39;
LABEL_40:
    if (__ldaxr((unsigned __int8 *)&v284 + 1))
    {
      __clrex();
LABEL_43:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)&v284 + 1);
      goto LABEL_44;
    }
    if (__stxr(1u, (unsigned __int8 *)&v284 + 1))
      goto LABEL_43;
LABEL_44:
    v37 = __ldxr((unsigned __int8 *)&v284 + 1);
    if (v37 == 1)
    {
      if (__stlxr(0, (unsigned __int8 *)&v284 + 1))
        goto LABEL_48;
    }
    else
    {
      __clrex();
LABEL_48:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)&v284 + 1, 0, a3, a4, a5, a6, a7, a8);
    }
  }
  v259 = __ldxr(v9);
  if (v259 != 1)
  {
    __clrex();
    goto LABEL_410;
  }
  if (__stlxr(0, v9))
LABEL_410:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)(v8 + 4), 0, a3, a4, a5, a6, a7, a8);
}

char *WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = a3;
  v5 = *(char **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = &v5[72 * *(unsigned int *)(a1 + 12)];
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v9 = a2;
      if (v9 <= v7)
      {
        v24 = *(char **)a1;
        return &v24[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v9 < 0x38E38E4)
      {
        v10 = 72 * v9;
        v11 = WTF::fastMalloc((WTF *)(72 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x48;
        *(_QWORD *)a1 = v11;
        WTF::VectorMover<false,JSC::SamplingProfiler::UnprocessedStackFrame>::move(v5, v6, v11, v12, v13, v14, v15, v16);
        v24 = *(char **)a1;
        if (v5)
        {
          if (v24 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree((unint64_t)v5, v17, v18, v19, v20, v21, v22, v23);
          v24 = *(char **)a1;
        }
        return &v24[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_28:
      __break(0xC471u);
      JUMPOUT(0x198BB43ECLL);
    }
  }
  v25 = *(unsigned int *)(a1 + 8);
  v26 = v25 + (v25 >> 2);
  if (v26 >= 0x10)
    v27 = v26 + 1;
  else
    v27 = 16;
  if (v27 <= a2)
    v27 = a2;
  if (v27 > v25)
  {
    if (v27 >= 0x38E38E4)
      goto LABEL_28;
    v28 = &v5[72 * *(unsigned int *)(a1 + 12)];
    v29 = 72 * v27;
    v30 = WTF::fastMalloc((WTF *)(72 * v27));
    *(_DWORD *)(a1 + 8) = (v29 & 0xFFFFFFF8) / 0x48;
    *(_QWORD *)a1 = v30;
    WTF::VectorMover<false,JSC::SamplingProfiler::UnprocessedStackFrame>::move(v5, v28, v30, v31, v32, v33, v34, v35);
    if (v5)
    {
      if (*(char **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v5, v36, v37, v38, v39, v40, v41, v42);
    }
  }
  return (char *)v3;
}

unint64_t WTF::Vector<JSC::SamplingProfiler::UnprocessedStackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + ((unint64_t)*(unsigned int *)(a1 + 12) << 6) <= a3)
  {
    WTF::Vector<JSC::SamplingProfiler::UnprocessedStackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<JSC::SamplingProfiler::UnprocessedStackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::SamplingProfiler::UnprocessedStackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 26)
    {
      __break(0xC471u);
    }
    else
    {
      v7 = *(_QWORD *)a1;
      v8 = *(unsigned int *)(a1 + 12);
      v9 = WTF::fastMalloc((WTF *)(v5 << 6));
      *(_DWORD *)(a1 + 8) = v5;
      *(_QWORD *)a1 = v9;
      if ((_DWORD)v8)
      {
        v17 = v9;
        v18 = v7 + 48;
        do
        {
          v19 = *(_OWORD *)(v18 - 48);
          v20 = *(_OWORD *)(v18 - 16);
          *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 - 32);
          *(_OWORD *)(v17 + 32) = v20;
          *(_OWORD *)v17 = v19;
          *(_QWORD *)(v17 + 48) = 0;
          *(_QWORD *)(v17 + 56) = 0;
          v21 = *(_QWORD *)v18;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)(v17 + 48) = v21;
          LODWORD(v21) = *(_DWORD *)(v18 + 8);
          *(_DWORD *)(v18 + 8) = 0;
          *(_DWORD *)(v17 + 56) = v21;
          LODWORD(v21) = *(_DWORD *)(v18 + 12);
          *(_DWORD *)(v18 + 12) = 0;
          *(_DWORD *)(v17 + 60) = v21;
          v22 = WTF::Vector<JSC::SamplingProfiler::UnprocessedStackFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v18, v10, v11, v12, v13, v14, v15, v16);
          v23 = v22 + 16;
          v18 = v22 + 64;
          v17 += 64;
        }
        while (v23 != v7 + (v8 << 6));
      }
      if (v7)
      {
        if (*(_QWORD *)a1 == v7)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v7, v10, v11, v12, v13, v14, v15, v16);
      }
    }
  }
}

unint64_t WTF::Vector<JSC::SamplingProfiler::StackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<JSC::SamplingProfiler::StackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<JSC::SamplingProfiler::StackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<JSC::SamplingProfiler::StackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  JSC::Wasm::NameSection *v24;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 12);
      v6 = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(a1 + 8) = v2;
      *(_QWORD *)a1 = v6;
      if ((_DWORD)v5)
      {
        v14 = v6;
        v15 = v4;
        v16 = v4 + 32 * v5;
        do
        {
          *(_QWORD *)v14 = *(_QWORD *)v15;
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)(v14 + 24) = 0;
          v17 = *(_QWORD *)(v15 + 16);
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)(v14 + 16) = v17;
          LODWORD(v17) = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v15 + 24) = 0;
          *(_DWORD *)(v14 + 24) = v17;
          LODWORD(v17) = *(_DWORD *)(v15 + 28);
          *(_DWORD *)(v15 + 28) = 0;
          *(_DWORD *)(v14 + 28) = v17;
          v18 = *(_DWORD *)(v15 + 28);
          v19 = *(_QWORD *)(v15 + 16);
          if (v18)
          {
            v20 = v19 + 136 * v18;
            do
            {
              if (*(_BYTE *)(v19 + 56))
              {
                v21 = *(unsigned int **)(v19 + 48);
                *(_QWORD *)(v19 + 48) = 0;
                if (v21)
                {
                  do
                  {
                    v22 = __ldaxr(v21);
                    v23 = v22 - 1;
                  }
                  while (__stlxr(v23, v21));
                  if (!v23)
                  {
                    atomic_store(1u, v21);
                    v24 = (JSC::Wasm::NameSection *)v21;
                    WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v24, v7, v8, v9, v10, v11, v12, v13);
                  }
                }
              }
              v19 += 136;
            }
            while (v19 != v20);
            v19 = *(_QWORD *)(v15 + 16);
          }
          if (v19)
          {
            *(_QWORD *)(v15 + 16) = 0;
            *(_DWORD *)(v15 + 24) = 0;
            WTF::fastFree(v19, v7, v8, v9, v10, v11, v12, v13);
          }
          v14 += 32;
          v15 += 32;
        }
        while (v15 != v16);
      }
      if (v4)
      {
        if (*(_QWORD *)a1 == v4)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v4, v7, v8, v9, v10, v11, v12, v13);
      }
    }
  }
}

_QWORD *WTF::HashTable<JSC::JSCell *,JSC::JSCell *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>,WTF::HashTraits<JSC::JSCell *>>::add(_QWORD *result, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;

  v10 = result;
  v11 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a2, 8uLL, 0, a4, a5, a6, a7, a8), (v11 = *a2) != 0))
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 - 8);
  }
  else
  {
    v13 = 0;
    v12 = 1;
  }
  v14 = *a3;
  v15 = ~(*a3 << 32) + *a3;
  v16 = 9
      * (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) ^ (((v15 ^ (v15 >> 22)) + ~((v15 ^ (v15 >> 22)) << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v13 & ((v17 >> 31) ^ v17);
  v19 = (_QWORD *)(v11 + 8 * v18);
  v20 = *v19;
  if (*v19)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v20 == v14)
      {
        if ((v12 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v11 - 4);
        v31 = 0;
        v30 = v11 + 8 * v32;
        goto LABEL_26;
      }
      if (v20 == -1)
        v21 = v19;
      v18 = (v18 + v22) & v13;
      v19 = (_QWORD *)(v11 + 8 * v18);
      v20 = *v19;
      ++v22;
    }
    while (*v19);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a2 - 16);
      v14 = *a3;
      v19 = v21;
    }
  }
  *v19 = v14;
  v23 = *a2;
  if (*a2)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *a2;
  if (*a2)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
      goto LABEL_31;
  }
  else if (3 * v28 <= 4 * v27)
  {
    if (!(_DWORD)v28)
    {
      v29 = 8;
      goto LABEL_20;
    }
LABEL_31:
    v29 = ((_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28)));
LABEL_20:
    result = WTF::HashTable<JSC::DFG::Node *,JSC::DFG::Node *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>,WTF::HashTraits<JSC::DFG::Node *>>::rehash(a2, v29, (uint64_t)v19, a4, a5, a6, a7, a8);
    v19 = result;
    v25 = *a2;
    if (*a2)
      v28 = *(unsigned int *)(v25 - 4);
    else
      v28 = 0;
  }
  v30 = v25 + 8 * v28;
  v31 = 1;
LABEL_26:
  *v10 = v19;
  v10[1] = v30;
  *((_BYTE *)v10 + 16) = v31;
  return result;
}

void WTF::Vector<JSC::SamplingProfiler::StackTrace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  JSC::Wasm::NameSection *v31;

  if (*(unsigned int *)(a1 + 8) > a2)
  {
    v10 = *(unsigned int *)(a1 + 12);
    v11 = *(_QWORD *)a1;
    if (v10 > a2)
    {
      v12 = v11 + 32 * v10;
      v13 = v11 + 32 * a2;
      do
      {
        v14 = *(_DWORD *)(v13 + 28);
        v15 = *(_QWORD *)(v13 + 16);
        if (v14)
        {
          v16 = v15 + 136 * v14;
          do
          {
            if (*(_BYTE *)(v15 + 56))
            {
              v17 = *(unsigned int **)(v15 + 48);
              *(_QWORD *)(v15 + 48) = 0;
              if (v17)
              {
                do
                {
                  v18 = __ldaxr(v17);
                  v19 = v18 - 1;
                }
                while (__stlxr(v19, v17));
                if (!v19)
                {
                  atomic_store(1u, v17);
                  v31 = (JSC::Wasm::NameSection *)v17;
                  WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v31, (void *)a2, a3, a4, a5, a6, a7, a8);
                }
              }
            }
            v15 += 136;
          }
          while (v15 != v16);
          v15 = *(_QWORD *)(v13 + 16);
        }
        if (v15)
        {
          *(_QWORD *)(v13 + 16) = 0;
          *(_DWORD *)(v13 + 24) = 0;
          WTF::fastFree(v15, (void *)a2, a3, a4, a5, a6, a7, a8);
        }
        v13 += 32;
      }
      while (v13 != v12);
      *(_DWORD *)(a1 + 12) = a2;
      v11 = *(_QWORD *)a1;
      LODWORD(v10) = a2;
    }
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        return;
      }
      v20 = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(a1 + 8) = a2;
      *(_QWORD *)a1 = v20;
      if ((_DWORD)v10)
      {
        v21 = v20;
        if (v20 != v11)
        {
          v22 = v11 + 32 * v10;
          v23 = v11;
          do
          {
            *(_QWORD *)v21 = *(_QWORD *)v23;
            *(_QWORD *)(v21 + 8) = 0;
            *(_QWORD *)(v21 + 16) = 0;
            *(_QWORD *)(v21 + 24) = 0;
            v24 = *(_QWORD *)(v23 + 16);
            *(_QWORD *)(v23 + 16) = 0;
            *(_QWORD *)(v21 + 16) = v24;
            LODWORD(v24) = *(_DWORD *)(v23 + 24);
            *(_DWORD *)(v23 + 24) = 0;
            *(_DWORD *)(v21 + 24) = v24;
            LODWORD(v24) = *(_DWORD *)(v23 + 28);
            *(_DWORD *)(v23 + 28) = 0;
            *(_DWORD *)(v21 + 28) = v24;
            v25 = *(_DWORD *)(v23 + 28);
            v26 = *(_QWORD *)(v23 + 16);
            if (v25)
            {
              v27 = v26 + 136 * v25;
              do
              {
                if (*(_BYTE *)(v26 + 56))
                {
                  v28 = *(unsigned int **)(v26 + 48);
                  *(_QWORD *)(v26 + 48) = 0;
                  if (v28)
                  {
                    do
                    {
                      v29 = __ldaxr(v28);
                      v30 = v29 - 1;
                    }
                    while (__stlxr(v30, v28));
                    if (!v30)
                    {
                      atomic_store(1u, v28);
                      v31 = (JSC::Wasm::NameSection *)v28;
                      WTF::ThreadSafeRefCounted<JSC::Wasm::NameSection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v31, (void *)a2, a3, a4, a5, a6, a7, a8);
                    }
                  }
                }
                v26 += 136;
              }
              while (v26 != v27);
              v26 = *(_QWORD *)(v23 + 16);
            }
            if (v26)
            {
              *(_QWORD *)(v23 + 16) = 0;
              *(_DWORD *)(v23 + 24) = 0;
              WTF::fastFree(v26, (void *)a2, a3, a4, a5, a6, a7, a8);
            }
            v21 += 32;
            v23 += 32;
          }
          while (v23 != v22);
        }
      }
    }
    if (v11)
    {
      if (*(_QWORD *)a1 == v11)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v11, (void *)a2, a3, a4, a5, a6, a7, a8);
    }
  }
}

void WTF::HashTable<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>,WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>>,WTF::HashTraits<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>>,WTF::HashTraits<WTF::RefPtr<JSC::SamplingProfiler,WTF::RawPtrTraits<JSC::SamplingProfiler>,WTF::DefaultRefDerefTraits<JSC::SamplingProfiler>>>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  unsigned int **v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int **v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v8 = a2;
  v10 = *a1;
  if (*a1)
  {
    v11 = *(_DWORD *)(v10 - 4);
    v12 = *(_DWORD *)(v10 - 12);
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = WTF::fastZeroedMalloc(8 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v13 + 16;
  *(_DWORD *)(v13 + 12) = v8;
  *(_DWORD *)(*a1 - 8) = v8 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v12;
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v22 = (unsigned int **)(v10 + 8 * i);
      v23 = *v22;
      if (*v22 != (unsigned int *)-1)
      {
        if (v23)
        {
          v24 = *a1;
          if (*a1)
            v25 = *(_DWORD *)(v24 - 8);
          else
            v25 = 0;
          v26 = ((unint64_t)v23 + ~((_QWORD)v23 << 32)) ^ (((unint64_t)v23 + ~((_QWORD)v23 << 32)) >> 22);
          v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
          v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
          v29 = v25 & ((v28 >> 31) ^ v28);
          v30 = 1;
          do
          {
            v31 = v29;
            v32 = *(_QWORD *)(v24 + 8 * v29);
            v29 = (v29 + v30++) & v25;
          }
          while (v32);
          v33 = (unsigned int **)(v24 + 8 * v31);
          *v33 = 0;
          v34 = *v22;
          *v22 = 0;
          *v33 = v34;
          v35 = *v22;
          *v22 = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              atomic_store(1u, v35);
              JSC::SamplingProfiler::~SamplingProfiler((JSC::SamplingProfiler *)v35, v14, v15, v16, v17, v18, v19, v20);
              WTF::fastFree(v38, v39, v40, v41, v42, v43, v44, v45);
            }
          }
        }
        else
        {
          *v22 = 0;
        }
      }
    }
  }
  else if (!v10)
  {
    return;
  }
  WTF::fastFree(v10 - 16, v14, v15, v16, v17, v18, v19, v20);
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<unsigned int,void>>(uint64_t result, unsigned int a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  _QWORD *v10;
  int *v11;
  _BYTE *v12;
  _BYTE *v13;
  size_t v14;
  _WORD *v15;
  int8x16_t *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  BOOL v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  uint64_t v37;
  _WORD *v38;
  char *v39;
  int8x16_t *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __int128 v44;
  char *v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  char *v49;
  char *v50;
  char *v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  _WORD *v55;
  unsigned __int128 *v57;
  unsigned __int128 *v58;
  unsigned __int128 v59;
  unsigned __int128 *v60;
  unsigned __int128 *v61;
  unsigned __int128 v62;
  char v63;
  char v64;
  _QWORD v65[3];
  int8x16x2_t v66;
  int8x16x2_t v67;
  int8x16x2_t v68;
  int8x16x2_t v69;
  int8x16x2_t v70;
  int8x16x2_t v71;

  v10 = (_QWORD *)result;
  v65[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a2)
    {
      if ((a2 & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(a2 + 20), v65);
        v11 = (int *)v65[0];
        if (v65[0])
        {
          v12 = (_BYTE *)(v65[0] + 20);
          *(_DWORD *)v65[0] = 2;
          v11[1] = a2;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          if (a4)
          {
            v13 = *(_BYTE **)(a4 + 8);
            v14 = *(unsigned int *)(a4 + 4);
            if ((*(_BYTE *)(a4 + 16) & 4) != 0)
            {
              if ((_DWORD)v14 == 1)
              {
                *v12 = *v13;
              }
              else if ((_DWORD)v14)
              {
                result = (uint64_t)memcpy(v11 + 5, v13, v14);
              }
            }
            else
            {
              if (v14 < 0x10)
              {
                v57 = (unsigned __int128 *)(v11 + 5);
              }
              else
              {
                v57 = (unsigned __int128 *)&v12[v14 & 0xFFFFFFF0];
                v58 = (unsigned __int128 *)(v11 + 5);
                do
                {
                  v59 = (unsigned __int128)vld2q_s8(v13);
                  v13 += 32;
                  *v58++ = v59;
                }
                while (v58 != v57);
              }
              while (v57 != (unsigned __int128 *)&v12[v14])
              {
                v63 = *v13;
                v13 += 2;
                *(_BYTE *)v57 = v63;
                v57 = (unsigned __int128 *)((char *)v57 + 1);
              }
            }
            v18 = *(unsigned int *)(a4 + 4);
          }
          else
          {
            v18 = 0;
          }
          v12[v18] = 35;
          v19 = &v12[v18 + 1];
          if (a5)
          {
            v20 = *(_BYTE **)(a5 + 8);
            v21 = *(unsigned int *)(a5 + 4);
            if ((*(_BYTE *)(a5 + 16) & 4) != 0)
            {
              if ((_DWORD)v21 == 1)
              {
                *v19 = *v20;
              }
              else if ((_DWORD)v21)
              {
                result = (uint64_t)memcpy(v19, v20, v21);
              }
            }
            else
            {
              if (v21 < 0x10)
              {
                v60 = (unsigned __int128 *)&v12[v18 + 1];
              }
              else
              {
                v60 = (unsigned __int128 *)&v19[v21 & 0xFFFFFFF0];
                v61 = (unsigned __int128 *)&v12[v18 + 1];
                do
                {
                  v62 = (unsigned __int128)vld2q_s8(v20);
                  v20 += 32;
                  *v61++ = v62;
                }
                while (v61 != v60);
              }
              while (v60 != (unsigned __int128 *)&v19[v21])
              {
                v64 = *v20;
                v20 += 2;
                *(_BYTE *)v60 = v64;
                v60 = (unsigned __int128 *)((char *)v60 + 1);
              }
            }
            v22 = *(unsigned int *)(a5 + 4);
          }
          else
          {
            v22 = 0;
          }
          v23 = 0;
          v24 = &v19[v22];
          *v24 = 58;
          do
          {
            *((_BYTE *)&v65[1] + v23-- + 4) = (a6 % 0xA) | 0x30;
            v25 = a6 > 9;
            a6 /= 0xAu;
          }
          while (v25);
          if (v23 + 14 <= 13)
            result = (uint64_t)memcpy(v24 + 1, (char *)&v65[1] + v23 + 5, -v23);
        }
        goto LABEL_58;
      }
LABEL_62:
      v11 = 0;
      goto LABEL_58;
    }
LABEL_61:
    v11 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_58;
  }
  if (!a2)
    goto LABEL_61;
  if (a2 > 0x7FFFFFEF)
    goto LABEL_62;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * a2 + 20), v65);
  v11 = (int *)v65[0];
  if (v65[0])
  {
    v15 = (_WORD *)(v65[0] + 20);
    *(_DWORD *)v65[0] = 2;
    v11[1] = a2;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    if (a4)
    {
      v16 = *(int8x16_t **)(a4 + 8);
      v17 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        v26 = (char *)&v15[v17];
        if (v17 >= 0x40)
        {
          v27 = (char *)&v15[v17 & 0xFFFFFFC0];
          v28 = 0uLL;
          v29 = (char *)(v11 + 5);
          do
          {
            v66.val[0] = *v16;
            v30 = v16[1];
            v68.val[0] = v16[2];
            v31 = v16[3];
            v16 += 4;
            v32 = v31;
            v68.val[1] = 0uLL;
            v70.val[0] = v30;
            v66.val[1] = 0uLL;
            v33 = v29;
            vst2q_s8(v33, v66);
            v33 += 32;
            v70.val[1] = 0uLL;
            vst2q_s8(v33, v70);
            v34 = v29 + 64;
            vst2q_s8(v34, v68);
            v35 = v29 + 96;
            vst2q_s8(v35, *(int8x16x2_t *)(&v28 - 1));
            v29 += 128;
          }
          while (v29 != v27);
        }
        else
        {
          v27 = (char *)(v11 + 5);
        }
        while (v27 != v26)
        {
          v36 = v16->u8[0];
          v16 = (int8x16_t *)((char *)v16 + 1);
          *(_WORD *)v27 = v36;
          v27 += 2;
        }
      }
      else if ((_DWORD)v17 == 1)
      {
        *v15 = v16->i16[0];
      }
      else if ((_DWORD)v17)
      {
        result = (uint64_t)memcpy(v11 + 5, v16, 2 * v17);
      }
      v37 = *(unsigned int *)(a4 + 4);
    }
    else
    {
      v37 = 0;
    }
    v38 = &v15[v37];
    *v38 = 35;
    v39 = (char *)(v38 + 1);
    if (a5)
    {
      v40 = *(int8x16_t **)(a5 + 8);
      v41 = *(unsigned int *)(a5 + 4);
      if ((*(_BYTE *)(a5 + 16) & 4) != 0)
      {
        v42 = &v39[2 * v41];
        if (v41 >= 0x40)
        {
          v43 = &v39[2 * (v41 & 0xFFFFFFC0)];
          v44 = 0uLL;
          v45 = v39;
          do
          {
            v67.val[0] = *v40;
            v46 = v40[1];
            v69.val[0] = v40[2];
            v47 = v40[3];
            v40 += 4;
            v48 = v47;
            v69.val[1] = 0uLL;
            v71.val[0] = v46;
            v67.val[1] = 0uLL;
            v49 = v45;
            vst2q_s8(v49, v67);
            v49 += 32;
            v71.val[1] = 0uLL;
            vst2q_s8(v49, v71);
            v50 = v45 + 64;
            vst2q_s8(v50, v69);
            v51 = v45 + 96;
            vst2q_s8(v51, *(int8x16x2_t *)(&v44 - 1));
            v45 += 128;
          }
          while (v45 != v43);
        }
        else
        {
          v43 = v39;
        }
        while (v43 != v42)
        {
          v52 = v40->u8[0];
          v40 = (int8x16_t *)((char *)v40 + 1);
          *(_WORD *)v43 = v52;
          v43 += 2;
        }
      }
      else if ((_DWORD)v41 == 1)
      {
        *(_WORD *)v39 = v40->i16[0];
      }
      else if ((_DWORD)v41)
      {
        result = (uint64_t)memcpy(v39, v40, 2 * v41);
      }
      v53 = *(unsigned int *)(a5 + 4);
    }
    else
    {
      v53 = 0;
    }
    v54 = 0;
    *(_WORD *)&v39[2 * v53] = 58;
    do
    {
      *((_BYTE *)&v65[1] + v54-- + 4) = (a6 % 0xA) | 0x30;
      v25 = a6 > 9;
      a6 /= 0xAu;
    }
    while (v25);
    if (v54 + 14 <= 13)
    {
      v55 = (_WORD *)v11 + v53 + v37 + 12;
      do
        *v55++ = *((unsigned __int8 *)&v65[1] + v54 + 5);
      while (!__CFADD__(v54++, 1));
    }
  }
LABEL_58:
  *v10 = v11;
  return result;
}

unint64_t JSC::ScopedArguments::setIndexQuickly(unint64_t result, JSC::VM *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unsigned int v23;
  JSC::VM *v24;
  JSC::VM *v25;
  _QWORD v26[2];

  v9 = *(_QWORD *)(result + 40);
  v10 = *(_DWORD *)(v9 + 8);
  v11 = a3 >= v10;
  v12 = a3 - v10;
  if (v11)
  {
    *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v12) = a4;
    if (a4
      && (a4 & 0xFFFE000000000002) == 0
      && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(result + 7))
    {
      return JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, result);
    }
  }
  else
  {
    v13 = *(_QWORD *)(result + 48);
    v14 = *(_QWORD *)(v9 + 16);
    if (qword_1ECF4C038 && (byte_1ECF4C022 || !disablePrimitiveGigacageRequested))
      v14 = (v14 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    *(_QWORD *)(v13 + 8 * *(unsigned int *)(v14 + 4 * a3) + 32) = a4;
    if (a4 && (a4 & 0xFFFE000000000002) == 0 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(v13 + 7))
    {
      v25 = a2;
      v21 = result;
      v23 = a3;
      result = JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, v13);
      a3 = v23;
      a2 = v25;
      v9 = *(_QWORD *)(v21 + 40);
    }
    if (*(_DWORD *)(v9 + 36) <= a3)
    {
      __break(0xC471u);
    }
    else
    {
      v15 = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8 * a3);
      if (v15)
      {
        v26[0] = &off_1E3583C90;
        v26[1] = "Write to ScopedArgument.";
        if (*(_BYTE *)(v15 + 4))
        {
          if (*(_BYTE *)(v15 + 4) == 1)
          {
            __dmb(0xAu);
            v17 = *(_QWORD *)(v15 + 8);
            v16 = (unint64_t *)(v15 + 8);
            result = v17;
            *((_BYTE *)v16 - 4) = 2;
            v18 = *((_DWORD *)a2 + 229);
            v22 = v16;
            v24 = a2;
            *((_DWORD *)a2 + 229) = v18 + 1;
            if ((unint64_t *)v17 != v16)
            {
              do
              {
                v20 = *(_QWORD *)result;
                v19 = *(_QWORD **)(result + 8);
                *v19 = *(_QWORD *)result;
                *(_QWORD *)(v20 + 8) = v19;
                *(_QWORD *)result = 0;
                *(_QWORD *)(result + 8) = 0;
                JSC::Watchpoint::fire(result, v24, v26, a4, a5, a6, a7, a8, a9);
                result = *v22;
              }
              while ((unint64_t *)*v22 != v22);
              v18 = *((_DWORD *)v24 + 229) - 1;
            }
            *((_DWORD *)v24 + 229) = v18;
            __dmb(0xAu);
          }
        }
        else
        {
          __dmb(0xAu);
          *(_BYTE *)(v15 + 4) = 1;
          __dmb(0xAu);
        }
      }
    }
  }
  return result;
}

BOOL JSC::GenericArguments<JSC::ScopedArguments>::isModifiedArgumentDescriptor(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (!a1)
    return 0;
  if (!qword_1ECF4C038)
  {
LABEL_11:
    if (a2 < a3)
      return *(_BYTE *)(a1 + a2) != 0;
    return 0;
  }
  if (!byte_1ECF4C022)
  {
    v3 = disablePrimitiveGigacageRequested;
    if (!disablePrimitiveGigacageRequested)
      goto LABEL_5;
    goto LABEL_11;
  }
  v3 = 0;
LABEL_5:
  if (a2 < a3 && (a1 & 0x3FFFFFFFFLL) != -qword_1ECF4C038)
  {
    a1 = (a1 & 0x3FFFFFFFFLL) + qword_1ECF4C038;
    return *(_BYTE *)(a1 + a2) != 0;
  }
  return v3;
}

void JSC::GenericArguments<JSC::ScopedArguments>::initModifiedArgumentsDescriptor(JSC::JSCell *a1, JSC *this, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC *v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t SlowCase;
  unint64_t OutOfMemoryError;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  JSC::Exception *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = (JSC *)*((_QWORD *)this + 7);
  v11 = *((_QWORD *)a1 + 2);
  if (v11
    && (!qword_1ECF4C038
     || !byte_1ECF4C022 && disablePrimitiveGigacageRequested
     || (v11 & 0x3FFFFFFFFLL) + qword_1ECF4C038))
  {
    __break(0xC471u);
    return;
  }
  if (a3)
  {
    v12 = a3;
    v13 = (a3 + 7) & 0x1FFFFFFF8;
    if (v13 <= 0x1F60 && (v14 = *(_QWORD *)((char *)v10 + (((v13 + 15) >> 1) & 0x1FFFFFFF8) + 2592)) != 0)
    {
      v15 = *(unsigned int *)(v14 + 60);
      v16 = *(_QWORD **)(v14 + 24);
      if ((unint64_t)v16 < *(_QWORD *)(v14 + 32))
      {
        *(_QWORD *)(v14 + 24) = (char *)v16 + v15;
        if (v16)
        {
LABEL_10:
          *((_QWORD *)a1 + 2) = v16;
          if (*((_DWORD *)v10 + 190) >= *((unsigned __int8 *)a1 + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)v10 + 192, (unint64_t)a1);
          bzero(v16, v12);
          return;
        }
        goto LABEL_16;
      }
      v16 = *(_QWORD **)(v14 + 40);
      if ((v16 & 1) == 0)
      {
        v26 = v16[1] ^ *(_QWORD *)(v14 + 48);
        *(_QWORD *)(v14 + 32) = (char *)v16 + HIDWORD(v26);
        *(_QWORD *)(v14 + 40) = (char *)v16 + (int)v26;
        *(_QWORD *)(v14 + 24) = (char *)v16 + v15;
        goto LABEL_10;
      }
      v27 = *(_QWORD *)((char *)v10 + (((v13 + 15) >> 1) & 0x1FFFFFFF8) + 2592);
      JSC::sanitizeStackForVM(v10, this, v13, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v27, (uint64_t)v10 + 192, v15, 0, 1, v28, v29, v30);
    }
    else
    {
      SlowCase = JSC::CompleteSubspace::tryAllocateSlow((uint64_t)v10 + 2504, *((JSC **)this + 7), v13, 0, a5, a6, a7, a8);
    }
    v16 = (_QWORD *)SlowCase;
    if (SlowCase)
      goto LABEL_10;
LABEL_16:
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, this);
    v25 = (JSC::Exception *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      v25 = (JSC::Exception *)JSC::Exception::create((uint64_t)v10, (JSC::VM *)OutOfMemoryError, 0, v19, v20, v21, v22, v23);
    }
    JSC::VM::throwException(v10, this, v25, v24, v19, v20, v21, v22, v23);
  }
}

uint64_t WTF::dataLog<char [12],JSC::CodeBlock,char [2]>(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  WTF::PrintStream *v4;
  char v6;
  char **v7;
  char *v8;

  v2 = atomic_load(&WTF::initializeLogFile(void)::once);
  if (v2 != -1)
  {
    v8 = &v6;
    v7 = &v8;
    std::__call_once(&WTF::initializeLogFile(void)::once, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WTF::initializeLogFile(void)::$_0 &&>>);
  }
  v3 = WTF::s_file;
  v4 = (WTF::PrintStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)WTF::s_file + 32))(WTF::s_file);
  WTF::PrintStream::printf(v4, "%s", "Installing ");
  JSC::CodeBlock::dumpAssumingJITType(a1);
  WTF::PrintStream::printf(v4, "%s", "\n");
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
}

_OWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::WriteBarrier<JSC::JSArray,WTF::RawPtrTraits<JSC::JSArray>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastMalloc((WTF *)(16 * v7 + 16));
  if (v7)
  {
    v16 = v7;
    v17 = (_QWORD *)(v8 + 24);
    do
    {
      *(v17 - 1) = -1;
      *v17 = 0;
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = (_QWORD *)(v4 + 16 * v18);
      if (*v20 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v21 = *a1;
        if (*a1)
          v22 = *(_DWORD *)(v21 - 8);
        else
          v22 = 0;
        v23 = (*v20 + ~(*v20 << 32)) ^ ((*v20 + ~(*v20 << 32)) >> 22);
        v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((unint64_t)(v23 + ~(v23 << 13)) >> 8));
        v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
        v26 = v22 & ((v25 >> 31) ^ v25);
        v27 = 1;
        do
        {
          v28 = v26;
          v29 = *(_QWORD *)(v21 + 16 * v26);
          v26 = (v26 + v27++) & v22;
        }
        while (v29 != -1);
        v30 = (_OWORD *)(v21 + 16 * v28);
        *v30 = *(_OWORD *)v20;
        if (v20 == a2)
          v19 = v30;
      }
      ++v18;
    }
    while (v18 != v5);
    goto LABEL_19;
  }
  v19 = 0;
  result = 0;
  if (v4)
  {
LABEL_19:
    WTF::fastFree(v4 - 16, v9, v10, v11, v12, v13, v14, v15);
    return v19;
  }
  return result;
}

void JSC::SetIteratorPrototype::finishCreation(JSC::SetIteratorPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  char *v6;
  WTF::StringImpl *v7;
  uint64_t CodeExecutable;
  WTF::StringImpl *v9;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t CodeGenerator;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  WTF::StringImpl *v80;
  __int128 v81;

  v6 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v7 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2000);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    CodeExecutable = JSC::BuiltinExecutables::setIteratorPrototypeNextCodeExecutable(*((JSC::BuiltinExecutables **)a2
                                                                                     + 11644));
    v9 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 11644) + 8);
    ++*((_DWORD *)v9 + 2);
    v80 = v9;
    v81 = xmmword_199125560;
    v18 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)a2, 0, (uint64_t)&v80, 0, 0, 0, v10, COERCE_DOUBLE(0x1C7680001C5D3), v11, v12);
    v19 = v80;
    v80 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
      else
        --*((_DWORD *)v19 + 2);
    }
    v20 = JSC::JSFunction::create((uint64_t)a2, v18, a3, v13, v14, v15, v16, v17);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v7, v20, 4, v21, v22, v23, v24);
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::~StringImpl(v7, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v7 -= 2;
    }
  }
  else
  {
    CodeGenerator = JSC::setIteratorPrototypeNextCodeGenerator((JSC::BuiltinExecutables **)a2, a2);
    v75 = JSC::JSFunction::create((uint64_t)a2, CodeGenerator, a3, v70, v71, v72, v73, v74);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v75, 4, v76, v77, v78, v79);
  }
  v32 = *(_QWORD *)(*(_QWORD *)v6 + 2776);
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0xC00000002;
  *(_QWORD *)(v33 + 8) = "Set Iterator";
  *(_DWORD *)(v33 + 16) = 4;
  v80 = (WTF::StringImpl *)v33;
  v40 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v80, v34, v35, v36, v37, v38, v39);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v32, v40, 6, v41, v42, v43, v44);
  v52 = v80;
  v80 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
}

void JSC::SetPrototype::finishCreation(JSC::SetPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  WTF::AtomStringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  WTF::AtomStringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  JSC::BuiltinExecutables **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  WTF::AtomStringImpl *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  double v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  WTF::AtomStringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 v108;
  WTF::AtomStringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  WTF::AtomStringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  WTF::AtomStringImpl *v133;
  uint64_t v134;
  uint64_t v135;
  JSC::JSObject *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  JSC::JSGlobalObject *v140;
  WTF::StringImpl *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __n128 v150;
  WTF::AtomStringImpl *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __n128 v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __n128 v162;
  WTF::AtomStringImpl *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __n128 v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __n128 v183;
  WTF::AtomStringImpl *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  uint64_t v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  double v196;
  float v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  __n128 v209;
  WTF::AtomStringImpl *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  WTF::StringImpl *v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  uint64_t v220;
  double v221;
  float v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  WTF::StringImpl *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  __n128 v234;
  WTF::AtomStringImpl *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  uint64_t v243;
  WTF::StringImpl *v244;
  uint64_t v245;
  double v246;
  float v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  WTF::StringImpl *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __n128 v259;
  WTF::AtomStringImpl *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  WTF::StringImpl *v267;
  uint64_t v268;
  WTF::StringImpl *v269;
  uint64_t v270;
  double v271;
  float v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  WTF::StringImpl *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  __n128 v284;
  WTF::AtomStringImpl *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  WTF::StringImpl *v292;
  uint64_t IsSubsetOfCodeExecutable;
  WTF::StringImpl *v294;
  uint64_t v295;
  double v296;
  float v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  WTF::StringImpl *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  __n128 v309;
  WTF::AtomStringImpl *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  WTF::StringImpl *v317;
  uint64_t IsSupersetOfCodeExecutable;
  WTF::StringImpl *v319;
  uint64_t v320;
  double v321;
  float v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  WTF::StringImpl *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  __n128 v334;
  WTF::AtomStringImpl *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  WTF::StringImpl *v342;
  uint64_t IsDisjointFromCodeExecutable;
  WTF::StringImpl *v344;
  uint64_t v345;
  double v346;
  float v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  WTF::StringImpl *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  __n128 v359;
  WTF::AtomStringImpl *v360;
  unint64_t v361;
  void *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  void *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  void *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  void *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  void *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t v409;
  void *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  unint64_t v417;
  void *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  void *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  void *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  void *v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  void *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  void *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  unint64_t v465;
  void *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  void *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  void *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  unint64_t v489;
  void *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  void *v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  __n128 v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  __n128 v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  __n128 v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  __n128 v548;
  uint64_t IsSubsetOfCodeGenerator;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  __n128 v559;
  uint64_t IsSupersetOfCodeGenerator;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  __n128 v570;
  uint64_t IsDisjointFromCodeGenerator;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  __n128 v581;
  WTF::StringImpl *v582;
  __int128 v583;

  v6 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v7 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, (WTF::StringImpl **)(*(_QWORD *)v6 + 848), (uint64_t)JSC::setProtoFuncAdd, 0, 125, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 848), v7, 4, v8, v9, v10, v11);
  JSC::Symbols::addPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::addPrivateName, v7, 4, v12, v13, v14, v15);
  if (JSC::Symbols::addPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::addPrivateName, v16, v17, v18, v19, v20, v21, v22);
    WTF::fastFree(v361, v362, v363, v364, v365, v366, v367, v368);
  }
  else
  {
    JSC::Symbols::addPrivateName[0] -= 2;
  }
  v23 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, (WTF::StringImpl **)(*(_QWORD *)v6 + 1016), (uint64_t)JSC::setProtoFuncClear, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 1016), v23, 4, v24, v25, v26, v27);
  JSC::Symbols::clearPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::clearPrivateName, v23, 4, v28, v29, v30, v31);
  if (JSC::Symbols::clearPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::clearPrivateName, v32, v33, v34, v35, v36, v37, v38);
    WTF::fastFree(v369, v370, v371, v372, v373, v374, v375, v376);
  }
  else
  {
    JSC::Symbols::clearPrivateName[0] -= 2;
  }
  v39 = (JSC::BuiltinExecutables **)((char *)a2 + 93152);
  v40 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, (WTF::StringImpl **)(*(_QWORD *)v6 + 200), (uint64_t)JSC::setProtoFuncDelete, 0, 126, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 200), v40, 4, v41, v42, v43, v44);
  JSC::Symbols::deletePrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::deletePrivateName, v40, 4, v45, v46, v47, v48);
  if (JSC::Symbols::deletePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::deletePrivateName, v49, v50, v51, v52, v53, v54, v55);
    WTF::fastFree(v377, v378, v379, v380, v381, v382, v383, v384);
  }
  else
  {
    JSC::Symbols::deletePrivateName[0] -= 2;
  }
  v56 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 3952), (uint64_t)JSC::setProtoFuncEntries, 0, 128, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 3952), v56, 4, v57, v58, v59, v60);
  JSC::Symbols::entriesPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::entriesPrivateName, v56, 4, v61, v62, v63, v64);
  if (JSC::Symbols::entriesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::entriesPrivateName, v65, v66, v67, v68, v69, v70, v71);
    WTF::fastFree(v385, v386, v387, v388, v389, v390, v391, v392);
  }
  else
  {
    JSC::Symbols::entriesPrivateName[0] -= 2;
  }
  v72 = JSC::BuiltinExecutables::setPrototypeForEachCodeExecutable(*v39);
  v73 = (WTF::StringImpl *)*((_QWORD *)*v39 + 1);
  ++*((_DWORD *)v73 + 2);
  v582 = v73;
  v583 = xmmword_199125220;
  v82 = JSC::UnlinkedFunctionExecutable::link(v72, (uint64_t)a2, 0, (uint64_t)&v582, 0, 0, 0, v74, COERCE_DOUBLE(0x1420D00013FF9), v75, v76);
  v83 = v582;
  v582 = 0;
  if (v83)
  {
    if (*((_DWORD *)v83 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v83 + 8))(v83);
    else
      --*((_DWORD *)v83 + 2);
  }
  v84 = JSC::JSFunction::create((uint64_t)a2, v82, a3, v77, v78, v79, v80, v81);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 1312), v84, 4, v85, v86, v87, v88);
  JSC::Symbols::forEachPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::forEachPrivateName, v84, 4, v89, v90, v91, v92);
  if (JSC::Symbols::forEachPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::forEachPrivateName, v93, v94, v95, v96, v97, v98, v99);
    WTF::fastFree(v393, v394, v395, v396, v397, v398, v399, v400);
  }
  else
  {
    JSC::Symbols::forEachPrivateName[0] -= 2;
  }
  v100 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 1, (WTF::StringImpl **)(*(_QWORD *)v6 + 1440), (uint64_t)JSC::setProtoFuncHas, 0, 124, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 1440), v100, 4, v101, v102, v103, v104);
  JSC::Symbols::hasPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::hasPrivateName, v100, 4, v105, v106, v107, v108);
  if (JSC::Symbols::hasPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::hasPrivateName, v109, v110, v111, v112, v113, v114, v115);
    WTF::fastFree(v401, v402, v403, v404, v405, v406, v407, v408);
  }
  else
  {
    JSC::Symbols::hasPrivateName[0] -= 2;
  }
  v116 = JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, (WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 3024), (uint64_t)JSC::setProtoFuncValues, 0, 127, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 3016), v116, 4, v117, v118, v119, v120);
  JSC::Symbols::keysPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::keysPrivateName, v116, 4, v121, v122, v123, v124);
  if (JSC::Symbols::keysPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::keysPrivateName, v125, v126, v127, v128, v129, v130, v131);
    WTF::fastFree(v409, v410, v411, v412, v413, v414, v415, v416);
  }
  else
  {
    JSC::Symbols::keysPrivateName[0] -= 2;
  }
  v132 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v132 = 0x800000002;
  *(_QWORD *)(v132 + 8) = "get size";
  *(_DWORD *)(v132 + 16) = 4;
  v582 = (WTF::StringImpl *)v132;
  v140 = (JSC::JSGlobalObject *)JSC::JSFunction::create((uint64_t)a2, (uint64_t)a3, 0, &v582, (uint64_t)JSC::setProtoFuncSize, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v141 = v582;
  v582 = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
    {
      WTF::StringImpl::~StringImpl(v141, v133, v134, v135, (uint64_t)v136, v137, v138, v139);
      WTF::fastFree(v433, v434, v435, v436, v437, v438, v439, v440);
    }
    else
    {
      *(_DWORD *)v141 -= 2;
    }
  }
  v142 = JSC::GetterSetter::create(a2, a3, v140, 0, v136, v137, v138, v139);
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 2304), v142, (const JSC::PropertyTable *)0x14, v143, v144, v145, v146);
  JSC::Symbols::sizePrivateName[0] += 2;
  JSC::JSObject::putDirectNonIndexAccessorWithoutTransition((unsigned int *)this, (uint64_t)a2, (unint64_t)JSC::Symbols::sizePrivateName, v142, (const JSC::PropertyTable *)0x14, v147, v148, v149, v150);
  if (JSC::Symbols::sizePrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::sizePrivateName, v151, v152, v153, v154, v155, v156, v157);
    WTF::fastFree(v417, v418, v419, v420, v421, v422, v423, v424);
  }
  else
  {
    JSC::Symbols::sizePrivateName[0] -= 2;
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 3024), v116, 4, v155, v156, v157, v158);
  JSC::Symbols::valuesPrivateName[0] += 2;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::valuesPrivateName, v116, 4, v159, v160, v161, v162);
  if (JSC::Symbols::valuesPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::valuesPrivateName, v163, v164, v165, v166, v167, v168, v169);
    WTF::fastFree(v425, v426, v427, v428, v429, v430, v431, v432);
  }
  else
  {
    JSC::Symbols::valuesPrivateName[0] -= 2;
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 2712), v116, 4, v167, v168, v169, v170);
  v171 = *(_QWORD *)(*(_QWORD *)v6 + 2776);
  v172 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v172 = 0x300000002;
  *(_QWORD *)(v172 + 8) = "Set";
  *(_DWORD *)(v172 + 16) = 4;
  v582 = (WTF::StringImpl *)v172;
  v179 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v582, v173, v174, v175, v176, v177, v178);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v171, v179, 6, v180, v181, v182, v183);
  v191 = v582;
  v582 = 0;
  if (v191)
  {
    if (*(_DWORD *)v191 == 2)
    {
      WTF::StringImpl::~StringImpl(v191, v184, v185, v186, v187, v188, v189, v190);
      WTF::fastFree(v441, v442, v443, v444, v445, v446, v447, v448);
    }
    else
    {
      *(_DWORD *)v191 -= 2;
    }
  }
  if (BYTE4(qword_1ECF4C7A0))
  {
    v192 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 1648);
    if (v192)
    {
      *(_DWORD *)v192 += 2;
      v193 = JSC::BuiltinExecutables::setPrototypeUnionCodeExecutable(*v39);
      v194 = (WTF::StringImpl *)*((_QWORD *)*v39 + 1);
      ++*((_DWORD *)v194 + 2);
      v582 = v194;
      v583 = xmmword_199125AB0;
      v203 = JSC::UnlinkedFunctionExecutable::link(v193, (uint64_t)a2, 0, (uint64_t)&v582, 0, 0, 0, v195, COERCE_DOUBLE(0x28F0E00028CC9), v196, v197);
      v204 = v582;
      v582 = 0;
      if (v204)
      {
        if (*((_DWORD *)v204 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v204 + 8))(v204);
        else
          --*((_DWORD *)v204 + 2);
      }
      v205 = JSC::JSFunction::create((uint64_t)a2, v203, a3, v198, v199, v200, v201, v202);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v192, v205, 4, v206, v207, v208, v209);
      if (*(_DWORD *)v192 == 2)
      {
        WTF::StringImpl::~StringImpl(v192, v210, v211, v212, v213, v214, v215, v216);
        WTF::fastFree(v449, v450, v451, v452, v453, v454, v455, v456);
      }
      else
      {
        *(_DWORD *)v192 -= 2;
      }
    }
    else
    {
      v505 = JSC::setPrototypeUnionCodeGenerator((JSC::BuiltinExecutables **)a2, v184);
      v511 = JSC::JSFunction::create((uint64_t)a2, v505, a3, v506, v507, v508, v509, v510);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v511, 4, v512, v513, v514, v515);
    }
    v217 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 808);
    if (v217)
    {
      *(_DWORD *)v217 += 2;
      v218 = JSC::BuiltinExecutables::setPrototypeIntersectionCodeExecutable(*v39);
      v219 = (WTF::StringImpl *)*((_QWORD *)*v39 + 1);
      ++*((_DWORD *)v219 + 2);
      v582 = v219;
      v583 = xmmword_199125380;
      v228 = JSC::UnlinkedFunctionExecutable::link(v218, (uint64_t)a2, 0, (uint64_t)&v582, 0, 0, 0, v220, COERCE_DOUBLE(0x18BD400018826), v221, v222);
      v229 = v582;
      v582 = 0;
      if (v229)
      {
        if (*((_DWORD *)v229 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v229 + 8))(v229);
        else
          --*((_DWORD *)v229 + 2);
      }
      v230 = JSC::JSFunction::create((uint64_t)a2, v228, a3, v223, v224, v225, v226, v227);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v217, v230, 4, v231, v232, v233, v234);
      if (*(_DWORD *)v217 == 2)
      {
        WTF::StringImpl::~StringImpl(v217, v235, v236, v237, v238, v239, v240, v241);
        WTF::fastFree(v457, v458, v459, v460, v461, v462, v463, v464);
      }
      else
      {
        *(_DWORD *)v217 -= 2;
      }
    }
    else
    {
      v516 = JSC::setPrototypeIntersectionCodeGenerator((JSC::BuiltinExecutables **)a2, v210);
      v522 = JSC::JSFunction::create((uint64_t)a2, v516, a3, v517, v518, v519, v520, v521);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v522, 4, v523, v524, v525, v526);
    }
    v242 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 464);
    if (v242)
    {
      *(_DWORD *)v242 += 2;
      v243 = JSC::BuiltinExecutables::setPrototypeDifferenceCodeExecutable(*v39);
      v244 = (WTF::StringImpl *)*((_QWORD *)*v39 + 1);
      ++*((_DWORD *)v244 + 2);
      v582 = v244;
      v583 = xmmword_199125090;
      v253 = JSC::UnlinkedFunctionExecutable::link(v243, (uint64_t)a2, 0, (uint64_t)&v582, 0, 0, 0, v245, COERCE_DOUBLE(0x10D5A000109A9), v246, v247);
      v254 = v582;
      v582 = 0;
      if (v254)
      {
        if (*((_DWORD *)v254 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v254 + 8))(v254);
        else
          --*((_DWORD *)v254 + 2);
      }
      v255 = JSC::JSFunction::create((uint64_t)a2, v253, a3, v248, v249, v250, v251, v252);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v242, v255, 4, v256, v257, v258, v259);
      if (*(_DWORD *)v242 == 2)
      {
        WTF::StringImpl::~StringImpl(v242, v260, v261, v262, v263, v264, v265, v266);
        WTF::fastFree(v465, v466, v467, v468, v469, v470, v471, v472);
      }
      else
      {
        *(_DWORD *)v242 -= 2;
      }
    }
    else
    {
      v527 = JSC::setPrototypeDifferenceCodeGenerator((JSC::BuiltinExecutables **)a2, v235);
      v533 = JSC::JSFunction::create((uint64_t)a2, v527, a3, v528, v529, v530, v531, v532);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v533, 4, v534, v535, v536, v537);
    }
    v267 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 1560);
    if (v267)
    {
      *(_DWORD *)v267 += 2;
      v268 = JSC::BuiltinExecutables::setPrototypeSymmetricDifferenceCodeExecutable(*v39);
      v269 = (WTF::StringImpl *)*((_QWORD *)*v39 + 1);
      ++*((_DWORD *)v269 + 2);
      v582 = v269;
      v583 = xmmword_1991259F0;
      v278 = JSC::UnlinkedFunctionExecutable::link(v268, (uint64_t)a2, 0, (uint64_t)&v582, 0, 0, 0, v270, COERCE_DOUBLE(0x2721D00026F8ALL), v271, v272);
      v279 = v582;
      v582 = 0;
      if (v279)
      {
        if (*((_DWORD *)v279 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v279 + 8))(v279);
        else
          --*((_DWORD *)v279 + 2);
      }
      v280 = JSC::JSFunction::create((uint64_t)a2, v278, a3, v273, v274, v275, v276, v277);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v267, v280, 4, v281, v282, v283, v284);
      if (*(_DWORD *)v267 == 2)
      {
        WTF::StringImpl::~StringImpl(v267, v285, v286, v287, v288, v289, v290, v291);
        WTF::fastFree(v473, v474, v475, v476, v477, v478, v479, v480);
      }
      else
      {
        *(_DWORD *)v267 -= 2;
      }
    }
    else
    {
      v538 = JSC::setPrototypeSymmetricDifferenceCodeGenerator((JSC::BuiltinExecutables **)a2, v260);
      v544 = JSC::JSFunction::create((uint64_t)a2, v538, a3, v539, v540, v541, v542, v543);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v544, 4, v545, v546, v547, v548);
    }
    v292 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 848);
    if (v292)
    {
      *(_DWORD *)v292 += 2;
      IsSubsetOfCodeExecutable = JSC::BuiltinExecutables::setPrototypeIsSubsetOfCodeExecutable(*v39);
      v294 = (WTF::StringImpl *)*((_QWORD *)*v39 + 1);
      ++*((_DWORD *)v294 + 2);
      v582 = v294;
      v583 = xmmword_1991253C0;
      v303 = JSC::UnlinkedFunctionExecutable::link(IsSubsetOfCodeExecutable, (uint64_t)a2, 0, (uint64_t)&v582, 0, 0, 0, v295, COERCE_DOUBLE(0x195BF000192DELL), v296, v297);
      v304 = v582;
      v582 = 0;
      if (v304)
      {
        if (*((_DWORD *)v304 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v304 + 8))(v304);
        else
          --*((_DWORD *)v304 + 2);
      }
      v305 = JSC::JSFunction::create((uint64_t)a2, v303, a3, v298, v299, v300, v301, v302);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v292, v305, 4, v306, v307, v308, v309);
      if (*(_DWORD *)v292 == 2)
      {
        WTF::StringImpl::~StringImpl(v292, v310, v311, v312, v313, v314, v315, v316);
        WTF::fastFree(v481, v482, v483, v484, v485, v486, v487, v488);
      }
      else
      {
        *(_DWORD *)v292 -= 2;
      }
    }
    else
    {
      IsSubsetOfCodeGenerator = JSC::setPrototypeIsSubsetOfCodeGenerator((JSC::BuiltinExecutables **)a2, v285);
      v555 = JSC::JSFunction::create((uint64_t)a2, IsSubsetOfCodeGenerator, a3, v550, v551, v552, v553, v554);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v555, 4, v556, v557, v558, v559);
    }
    v317 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 856);
    if (v317)
    {
      *(_DWORD *)v317 += 2;
      IsSupersetOfCodeExecutable = JSC::BuiltinExecutables::setPrototypeIsSupersetOfCodeExecutable(*v39);
      v319 = (WTF::StringImpl *)*((_QWORD *)*v39 + 1);
      ++*((_DWORD *)v319 + 2);
      v582 = v319;
      v583 = xmmword_1991253D0;
      v328 = JSC::UnlinkedFunctionExecutable::link(IsSupersetOfCodeExecutable, (uint64_t)a2, 0, (uint64_t)&v582, 0, 0, 0, v320, COERCE_DOUBLE(0x1982C000195BFLL), v321, v322);
      v329 = v582;
      v582 = 0;
      if (v329)
      {
        if (*((_DWORD *)v329 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v329 + 8))(v329);
        else
          --*((_DWORD *)v329 + 2);
      }
      v330 = JSC::JSFunction::create((uint64_t)a2, v328, a3, v323, v324, v325, v326, v327);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v317, v330, 4, v331, v332, v333, v334);
      if (*(_DWORD *)v317 == 2)
      {
        WTF::StringImpl::~StringImpl(v317, v335, v336, v337, v338, v339, v340, v341);
        WTF::fastFree(v489, v490, v491, v492, v493, v494, v495, v496);
      }
      else
      {
        *(_DWORD *)v317 -= 2;
      }
    }
    else
    {
      IsSupersetOfCodeGenerator = JSC::setPrototypeIsSupersetOfCodeGenerator((JSC::BuiltinExecutables **)a2, v310);
      v566 = JSC::JSFunction::create((uint64_t)a2, IsSupersetOfCodeGenerator, a3, v561, v562, v563, v564, v565);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v566, 4, v567, v568, v569, v570);
    }
    v342 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 824);
    if (v342)
    {
      *(_DWORD *)v342 += 2;
      IsDisjointFromCodeExecutable = JSC::BuiltinExecutables::setPrototypeIsDisjointFromCodeExecutable(*v39);
      v344 = (WTF::StringImpl *)*((_QWORD *)*v39 + 1);
      ++*((_DWORD *)v344 + 2);
      v582 = v344;
      v583 = xmmword_1991253A0;
      v353 = JSC::UnlinkedFunctionExecutable::link(IsDisjointFromCodeExecutable, (uint64_t)a2, 0, (uint64_t)&v582, 0, 0, 0, v345, COERCE_DOUBLE(0x1900C00018C7DLL), v346, v347);
      v354 = v582;
      v582 = 0;
      if (v354)
      {
        if (*((_DWORD *)v354 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v354 + 8))(v354);
        else
          --*((_DWORD *)v354 + 2);
      }
      v355 = JSC::JSFunction::create((uint64_t)a2, v353, a3, v348, v349, v350, v351, v352);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v342, v355, 4, v356, v357, v358, v359);
      if (*(_DWORD *)v342 == 2)
      {
        WTF::StringImpl::~StringImpl(v342, v360, v185, v186, v187, v188, v189, v190);
        WTF::fastFree(v497, v498, v499, v500, v501, v502, v503, v504);
      }
      else
      {
        *(_DWORD *)v342 -= 2;
      }
    }
    else
    {
      IsDisjointFromCodeGenerator = JSC::setPrototypeIsDisjointFromCodeGenerator((JSC::BuiltinExecutables **)a2, v335);
      v577 = JSC::JSFunction::create((uint64_t)a2, IsDisjointFromCodeGenerator, a3, v572, v573, v574, v575, v576);
      JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v577, 4, v578, v579, v580, v581);
    }
  }
  JSC::JSGlobalObject::installSetPrototypeWatchpoint(a3, this, v185, v186, v187, v188, v189, v190);
}

unint64_t JSC::setProtoFuncAdd(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, int8x16_t a9)
{
  JSC *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  int **v39;
  WTF::StringImpl *v40;
  unsigned int v41;
  char v42;
  unint64_t v43;
  JSC::VM *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  WTF *v51;
  const WTF::StringImpl *v52;
  JSC *v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  JSC *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  JSC *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  JSC *v76;
  uint64_t v77;
  int **v78;
  char v79;
  char v80;
  uint64_t v81;
  JSC *v82;
  unsigned int v83;
  unint64_t v84;
  size_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  int **v94;
  WTF::StringImpl *v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int **v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  JSC::JSString *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t NotAnObjectError;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  JSC::Exception *v122;
  JSC::VM *v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v129;
  int v130;
  int v131;
  int **v132;
  WTF::StringImpl *v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  JSC *v146;
  uint64_t Slow;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  int **v161;
  uint64_t v162;
  unint64_t v163;
  JSC *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v169;
  JSC *v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  JSC *v176;
  uint64_t v177;
  BOOL v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  int v184;
  BOOL v185;
  uint64_t v186;
  unint64_t v187;
  BOOL v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  JSC *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  JSC *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t SlowCase;
  uint64_t v201;
  JSC *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  JSC *v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  JSC::JSBigInt *v213;
  uint64_t v214;
  JSC *v215;
  uint64_t v216;
  BOOL v217;
  unint64_t v218;
  JSC *v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  int v223;
  unint64_t v224;
  uint64_t v225;
  JSC *v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  JSC *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  JSC *v234;
  int v235;
  uint64_t v236;
  unint64_t v237;
  JSC *v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  unint64_t v242;
  JSC *v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  uint64_t v247;
  unint64_t v248;
  JSC *v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  JSC *v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  unint64_t v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  JSC::CallFrame *v273;
  JSC::CallFrame *v274;
  JSC::CallFrame *v275;
  JSC::CallFrame *v276;
  JSC::CallFrame *v277;
  JSC::CallFrame *v278;
  JSC::CallFrame *v279;
  unint64_t *v280;
  JSC *v281;
  JSC *v282;
  JSC *v283;
  JSC *v284;
  JSC *v285;
  JSC *v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  int v309;
  unsigned int v310;
  int v311;
  int v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  JSC::VM *v317;
  unint64_t v318;
  JSC::VM *v319;
  JSC::VM *v320;
  JSC::VM *v321;
  JSC::VM *v322;
  _QWORD v323[4];
  JSC::VM *v324[2];

  v10 = this;
  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  v324[0] = (JSC::VM *)v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    v113 = v11;
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v12);
    v122 = (JSC::Exception *)NotAnObjectError;
    if ((NotAnObjectError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)NotAnObjectError & 0xFFFFFFFE) + 0x4C)))
    {
      v123 = (JSC::VM *)v113;
      v122 = (JSC::Exception *)JSC::Exception::create(v113, (JSC::VM *)NotAnObjectError, 0, v116, v117, v118, v119, v120);
    }
    else
    {
      v123 = (JSC::VM *)v113;
    }
    JSC::VM::throwException(v123, this, v122, v121, v116, v117, v118, v119, v120);
    v10 = this;
    v11 = v113;
    v13 = 0;
  }
  else if (!v12 || (v13 = v12, *(_BYTE *)(v12 + 5) != 70))
  {
    v127 = v11;
    JSC::throwTypeError((unint64_t)this, v324, (uint64_t)"Set operation called on non-Set object", 39);
    v10 = this;
    v11 = v127;
    v13 = 0;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v124 = *(_DWORD *)(v11 + 80);
    if ((v124 & 0x27) != 0 && (v124 & 0x20) == 0)
    {
      v224 = v13;
      v225 = v11;
      v226 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      v10 = v226;
      v13 = v224;
      v11 = v225;
    }
    if (*(_QWORD *)(v11 + 16))
      return 10;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v14 = 10;
  else
    v14 = *((_QWORD *)a2 + 6);
  v15 = *((_QWORD *)v10 + 7);
  if (!*(_QWORD *)(v13 + 16))
  {
    v324[0] = *((JSC::VM **)v10 + 7);
    v55 = *(_QWORD *)(v15 + 41656);
    v56 = *(_QWORD *)(v15 + 11000);
    if (v56)
    {
      v57 = *(unsigned int *)(v56 + 60);
      v58 = *(_QWORD *)(v56 + 24);
      if (v58 < *(_QWORD *)(v56 + 32))
      {
        *(_QWORD *)(v56 + 24) = v58 + v57;
        goto LABEL_61;
      }
      v58 = *(_QWORD *)(v56 + 40);
      if ((v58 & 1) == 0)
      {
        v141 = *(_QWORD *)(v58 + 8) ^ *(_QWORD *)(v56 + 48);
        *(_QWORD *)(v56 + 32) = v58 + HIDWORD(v141);
        *(_QWORD *)(v56 + 40) = v58 + (int)v141;
        *(_QWORD *)(v56 + 24) = v58 + v57;
        goto LABEL_62;
      }
      v193 = v11;
      v194 = v13;
      v195 = v14;
      v196 = v10;
      JSC::sanitizeStackForVM((JSC *)v15, (JSC::VM *)v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v56, v15 + 192, v57, 0, 1, v197, v198, v199);
      v10 = v196;
      v14 = v195;
    }
    else
    {
      v194 = v13;
      v193 = v11;
      v218 = v14;
      v219 = v10;
      SlowCase = JSC::CompleteSubspace::allocateSlow(v15 + 10792, (JSC *)v15, 0xF0uLL, 0, 1, a6, a7, (uint64_t)a8);
      v10 = v219;
      v14 = v218;
    }
    v13 = v194;
    v11 = v193;
    v58 = SlowCase;
LABEL_61:
    if (!v58)
    {
      v189 = v13;
      v190 = v11;
      v191 = v14;
      v192 = v10;
      JSC::throwOutOfMemoryError(v10, (JSC::JSGlobalObject *)v324);
      v10 = v192;
      v14 = v191;
      v13 = v189;
      v11 = v190;
      v58 = 0;
LABEL_67:
      if (!*(_DWORD *)(v15 + 80))
        goto LABEL_68;
      v140 = *(_DWORD *)(v15 + 80);
      if ((v140 & 0x27) != 0 && (v140 & 0x20) == 0)
      {
        v246 = v13;
        v247 = v11;
        v248 = v14;
        v249 = v10;
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
        v10 = v249;
        v14 = v248;
        v13 = v246;
        v11 = v247;
      }
      if (!*(_QWORD *)(v15 + 16))
      {
LABEL_68:
        *(_QWORD *)(v13 + 16) = v58;
        if (v58 && *(_DWORD *)(v15 + 760) >= *(unsigned __int8 *)(v13 + 7))
        {
          v60 = v13;
          v61 = v11;
          v62 = v14;
          v63 = v10;
          JSC::Heap::writeBarrierSlowPath(v15 + 192, v13);
          v10 = v63;
          v14 = v62;
          v13 = v60;
          v11 = v61;
        }
      }
      goto LABEL_8;
    }
LABEL_62:
    *(_DWORD *)v58 = 0;
    v59 = *(_DWORD *)(v55 + 8);
    *(_DWORD *)v58 = v55 >> 4;
    *(_DWORD *)(v58 + 4) = v59;
    v323[3] = v55;
    *(_QWORD *)(v58 + 8) = 0x1C0000001CLL;
    if ((*(_BYTE *)(v58 + 4) & 0xE) == 8)
    {
      *(_OWORD *)(v58 + 208) = 0u;
      *(_OWORD *)(v58 + 224) = 0u;
      *(_OWORD *)(v58 + 176) = 0u;
      *(_OWORD *)(v58 + 192) = 0u;
      *(_OWORD *)(v58 + 144) = 0u;
      *(_OWORD *)(v58 + 160) = 0u;
      *(_OWORD *)(v58 + 112) = 0u;
      *(_OWORD *)(v58 + 128) = 0u;
      *(_OWORD *)(v58 + 80) = 0u;
      *(_OWORD *)(v58 + 96) = 0u;
      *(_OWORD *)(v58 + 48) = 0u;
      *(_OWORD *)(v58 + 64) = 0u;
      *(_OWORD *)(v58 + 16) = 0u;
      *(_OWORD *)(v58 + 32) = 0u;
    }
    if (*(_BYTE *)(v15 + 755))
      __dmb(0xAu);
    a9 = (int8x16_t)vdupq_n_s64(0xFFFE000000000000);
    *(int8x16_t *)(v58 + 16) = a9;
    *(_QWORD *)(v58 + 32) = 0xFFFE000000000008;
    goto LABEL_67;
  }
LABEL_8:
  if (*(_DWORD *)(v15 + 80))
  {
    v125 = *(_DWORD *)(v15 + 80);
    if ((v125 & 0x27) != 0 && (v125 & 0x20) == 0)
    {
      v227 = v13;
      v228 = v11;
      v229 = v14;
      v230 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v15 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      v10 = v230;
      v14 = v229;
      v13 = v227;
      v11 = v228;
    }
    if (*(_QWORD *)(v15 + 16))
      goto LABEL_25;
  }
  v16 = *(_QWORD *)(v13 + 16);
  v17 = *((_QWORD *)v10 + 7);
  v18 = (unint64_t *)(v16 + 16);
  if (!*(_DWORD *)(v16 + 16))
  {
    v19 = 0;
    LODWORD(v20) = 0;
    v21 = -1;
LABEL_11:
    v22 = -1;
    goto LABEL_12;
  }
  v19 = v14;
  if ((v14 + 0x2000000000000) >> 50)
  {
    a9.i64[0] = v14 - 0x2000000000000;
    v112 = (int)COERCE_DOUBLE(v14 - 0x2000000000000);
    v19 = v14;
    if (COERCE_DOUBLE(v14 - 0x2000000000000) == (double)(int)v112)
      v19 = v112 | 0xFFFE000000000000;
  }
  if ((v19 & 0xFFFE000000000002) != 0)
  {
    v42 = 0;
LABEL_73:
    v64 = (v19 + ~(v19 << 32)) ^ ((v19 + ~(v19 << 32)) >> 22);
    v65 = 9 * ((v64 + ~(v64 << 13)) ^ ((v64 + ~(v64 << 13)) >> 8));
    v66 = (v65 ^ (v65 >> 15)) + ~((v65 ^ (v65 >> 15)) << 27);
    v20 = (v66 >> 31) ^ v66;
    goto LABEL_36;
  }
  v38 = *(unsigned __int8 *)(v19 + 5);
  if (v38 != 2)
  {
    if (v38 == 3)
    {
      v201 = *((_QWORD *)v10 + 7);
      v202 = v10;
      v203 = v14;
      v204 = v13;
      v205 = v11;
      if (*(_DWORD *)(v19 + 12))
      {
        v20 = *(unsigned int *)(v19 + 12);
        v42 = 1;
      }
      else
      {
        v20 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v19);
        v42 = 1;
        v11 = v205;
      }
      v13 = v204;
      v14 = v203;
      v10 = v202;
      v17 = v201;
      goto LABEL_36;
    }
    v42 = 1;
    goto LABEL_73;
  }
  v39 = (int **)(v19 + 8);
  if ((*(_BYTE *)(v19 + 8) & 1) != 0)
  {
    v73 = v13;
    v74 = v11;
    v75 = v14;
    v76 = v10;
    v77 = *((_QWORD *)v10 + 7);
    v78 = JSC::JSRopeString::resolveRope(v19, v10, a3, (uint64_t)a4, a9, a5, a6, a7, (uint64_t)a8);
    v17 = v77;
    v10 = v76;
    v14 = v75;
    v13 = v73;
    v11 = v74;
    v39 = v78;
  }
  if (!*(_DWORD *)(v17 + 80))
    goto LABEL_33;
  v142 = *(_DWORD *)(v17 + 80);
  if ((v142 & 0x27) != 0 && (v142 & 0x20) == 0)
  {
    v250 = v13;
    v251 = v11;
    v252 = v14;
    v253 = v10;
    v254 = v17;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v17 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
    v17 = v254;
    v10 = v253;
    v14 = v252;
    v13 = v250;
    v11 = v251;
  }
  if (*(_QWORD *)(v17 + 16))
  {
    v20 = 0xFFFFFFFFLL;
  }
  else
  {
LABEL_33:
    v40 = (WTF::StringImpl *)*v39;
    v41 = (*v39)[4];
    if (v41 < 0x100)
    {
      v67 = v11;
      v68 = v13;
      v69 = v14;
      v70 = v10;
      v71 = v17;
      v72 = WTF::StringImpl::hashSlowCase(v40);
      v17 = v71;
      v10 = v70;
      v14 = v69;
      v13 = v68;
      v11 = v67;
      v20 = v72;
    }
    else
    {
      v20 = v41 >> 8;
    }
  }
  v323[2] = v19;
  v42 = 1;
LABEL_36:
  if (*(_DWORD *)(v17 + 80))
  {
    v139 = *(_DWORD *)(v17 + 80);
    if ((v139 & 0x27) != 0 && (v139 & 0x20) == 0)
    {
      v295 = v13;
      v241 = v11;
      v242 = v14;
      v243 = v10;
      v244 = v17;
      v245 = v20;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v17 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      v20 = v245;
      v17 = v244;
      v10 = v243;
      v14 = v242;
      v13 = v295;
      v11 = v241;
    }
    if (*(_QWORD *)(v17 + 16))
    {
      if (!*(_DWORD *)(v17 + 80))
        goto LABEL_25;
      v135 = v11;
      JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17, v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      goto LABEL_170;
    }
  }
  v21 = ((*(_DWORD *)(v16 + 32) - 1) & v20) + 4;
  *(double *)a9.i64 = (double)(int)v19;
  if (v19 <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = v19 - 0x2000000000000;
  v43 = v18[v21];
  if (!v43)
    goto LABEL_11;
  v44 = (JSC::VM *)*((_QWORD *)v10 + 7);
  v45 = (unint64_t *)((char *)v44 + 41840);
  if (!(v19 >> 49))
  {
    if ((v42 & 1) == 0)
    {
      while (1)
      {
        v255 = v18[v43];
        if ((v255 & 0xFFFE000000000002) != 0)
        {
          if (v19 == v255)
            goto LABEL_57;
        }
        else
        {
          v256 = *v45;
          if (!*v45)
          {
            v258 = v11;
            v286 = v10;
            v296 = v13;
            v259 = v14;
            v307 = v17;
            v312 = v20;
            v322 = v44;
            v256 = JSC::VM::orderedHashTableDeletedValueSlow(v44, (JSC::VM *)v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
            v44 = v322;
            LODWORD(v20) = v312;
            v13 = v296;
            v17 = v307;
            v10 = v286;
            v14 = v259;
            v11 = v258;
          }
          if (v19 == v255 && v256 != v255)
            goto LABEL_57;
        }
        v43 = v18[(v43 + 1)];
        v22 = -1;
        if (!v43)
          goto LABEL_12;
      }
    }
    while (1)
    {
      v46 = v18[v43];
      if ((v46 & 0xFFFE000000000002) != 0)
        break;
      v47 = *v45;
      if (!*v45)
      {
        v148 = v11;
        v284 = v10;
        v288 = v13;
        v149 = v14;
        v299 = v17;
        v310 = v20;
        v319 = v44;
        v47 = JSC::VM::orderedHashTableDeletedValueSlow(v44, (JSC::VM *)v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
        v44 = v319;
        v20 = v310;
        v13 = v288;
        v17 = v299;
        v10 = v284;
        v14 = v149;
        v11 = v148;
      }
      if (v47 != v46)
      {
        if (v19 == v46)
          goto LABEL_57;
        v48 = *(unsigned __int8 *)(v19 + 5);
        if (v48 == 2)
        {
          if (*(_BYTE *)(v46 + 5) != 2)
            break;
          v313 = v14;
          v317 = v44;
          v308 = v20;
          v297 = v17;
          v49 = v13;
          v50 = v11;
          v51 = *(WTF **)(v19 + 8);
          if ((v51 & 1) != 0
            || (v52 = *(const WTF::StringImpl **)(v46 + 8), (v52 & 1) != 0))
          {
            v107 = (JSC::JSString *)v46;
            v53 = v10;
            v54 = JSC::JSString::equalSlowCase((JSC::JSString *)v19, v10, v107, (uint64_t)a4, a5, a6, a7, (uint64_t)a8, a9);
          }
          else
          {
            v53 = v10;
            v54 = WTF::equal(v51, v52, (const WTF::StringImpl *)a3);
          }
          v10 = v53;
          v11 = v50;
          v13 = v49;
          v14 = v313;
          v44 = v317;
          v17 = v297;
          v20 = v308;
          if (v54)
            goto LABEL_57;
        }
        else
        {
          if (v48 != 3 || *(_BYTE *)(v46 + 5) != 3)
            break;
          v292 = v13;
          v304 = v17;
          v213 = (JSC::JSBigInt *)v46;
          v214 = v11;
          v316 = v14;
          v321 = v44;
          v215 = v10;
          v216 = v20;
          v217 = JSC::JSBigInt::equals((JSC::JSBigInt *)v19, v213, (JSC::JSBigInt *)a3);
          v14 = v316;
          v44 = v321;
          v20 = v216;
          v13 = v292;
          v17 = v304;
          v10 = v215;
          v11 = v214;
          if (v217)
            goto LABEL_57;
        }
      }
LABEL_50:
      v43 = v18[(v43 + 1)];
      v22 = -1;
      if (!v43)
        goto LABEL_12;
    }
    if (v19 == v46)
      goto LABEL_57;
    goto LABEL_50;
  }
  v108 = a9.i64[0];
  while (1)
  {
    v109 = v18[v43];
    if ((v109 & 0xFFFE000000000002) != 0)
      goto LABEL_131;
    v110 = *v45;
    if (!*v45)
    {
      v282 = (JSC *)a9.i64[0];
      v261 = v11;
      v181 = v13;
      v315 = v14;
      v320 = v44;
      v285 = v10;
      v301 = v17;
      v311 = v20;
      v110 = JSC::VM::orderedHashTableDeletedValueSlow(v44, (JSC::VM *)v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      v14 = v315;
      v44 = v320;
      LODWORD(v20) = v311;
      v17 = v301;
      v10 = v285;
      v13 = v181;
      v11 = v261;
      a9.i64[0] = (uint64_t)v282;
    }
    if (v110 != v109)
    {
LABEL_131:
      if (v19 == v109)
        break;
      if (v109 >> 49)
      {
        v111 = (double)(int)v109;
        if (v109 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v111 = v109 - 0x2000000000000;
        if (v108 == *(_QWORD *)&v111)
          break;
      }
    }
    v43 = v18[(v43 + 1)];
    v22 = -1;
    if (!v43)
      goto LABEL_12;
  }
LABEL_57:
  v22 = v43;
LABEL_12:
  if (*(_DWORD *)(v17 + 80))
  {
    v129 = *(_DWORD *)(v17 + 80);
    if ((v129 & 0x27) != 0 && (v129 & 0x20) == 0)
    {
      v293 = v13;
      v306 = v17;
      v232 = v11;
      v233 = v14;
      v234 = v10;
      v235 = v20;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v17 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      LODWORD(v20) = v235;
      v13 = v293;
      v17 = v306;
      v10 = v234;
      v14 = v233;
      v11 = v232;
    }
    if (v22 != -1 || *(_QWORD *)(v17 + 16))
      goto LABEL_25;
  }
  else if (v22 != -1)
  {
    goto LABEL_25;
  }
  v23 = *(_DWORD *)(v16 + 32);
  v24 = *(_DWORD *)(v16 + 24);
  v25 = *(_QWORD *)(v16 + 16);
  v26 = v25 + v24;
  v27 = 0.75;
  if (v23 < 0x10000)
    v27 = 0.5;
  *(float *)a9.i32 = v27 * (float)v23;
  if (*(float *)a9.i32 > (float)v26)
  {
    v28 = v16;
    goto LABEL_18;
  }
  v314 = v14;
  v318 = v12;
  if (v23 >= 0x10000)
    v79 = 1;
  else
    v79 = 2;
  if (v24 >= v23 >> 1)
    v80 = 0;
  else
    v80 = v79;
  v81 = v23 << v80;
  v82 = (JSC *)*((_QWORD *)v10 + 7);
  a4 = (unint64_t *)((char *)v82 + 41656);
  v324[0] = v82;
  v83 = 3 * v81 + 4;
  v280 = (unint64_t *)((char *)v82 + 41656);
  v281 = v82;
  v260 = v11;
  v283 = v10;
  v287 = v13;
  v298 = v17;
  v309 = v20;
  v272 = v81;
  if (v83 >= 0x10000001)
  {
    v162 = v11;
    v163 = v14;
    v164 = v10;
    v165 = v17;
    JSC::throwOutOfMemoryError(v10, (JSC::JSGlobalObject *)v324);
    LODWORD(v81) = v272;
    a4 = v280;
    v82 = v281;
    LODWORD(v20) = v309;
    v17 = v165;
    v10 = v164;
    v14 = v163;
    v13 = v287;
    v11 = v162;
    v28 = 0;
    v12 = v318;
    goto LABEL_96;
  }
  v84 = *a4;
  v85 = 8 * (3 * v81 + 4);
  a3 = (v85 + 31) & 0xFFFFFFFF0;
  if ((unint64_t)a3 <= 0x1F60
    && (v86 = *(_QWORD *)((char *)v82 + (((v85 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
  {
    v28 = *(_QWORD *)(v86 + 24);
    if (v28 < *(_QWORD *)(v86 + 32))
    {
      *(_QWORD *)(v86 + 24) = v28 + *(unsigned int *)(v86 + 60);
      goto LABEL_88;
    }
    v263 = *(unsigned int *)(v86 + 60);
    v264 = *a4;
    v28 = *(_QWORD *)(v86 + 40);
    if ((v28 & 1) == 0)
    {
      v179 = *(_QWORD *)(v28 + 8) ^ *(_QWORD *)(v86 + 48);
      *(_QWORD *)(v86 + 32) = v28 + HIDWORD(v179);
      *(_QWORD *)(v86 + 40) = v28 + (int)v179;
      *(_QWORD *)(v86 + 24) = v28 + v263;
      v12 = v318;
      a4 = (unint64_t *)((char *)v82 + 41656);
      v85 = 8 * (3 * v81 + 4);
LABEL_89:
      *(_DWORD *)v28 = 0;
      v87 = *(_DWORD *)(v84 + 8);
      *(_DWORD *)v28 = v84 >> 4;
      *(_DWORD *)(v28 + 4) = v87;
      v323[1] = v84;
      *(_DWORD *)(v28 + 8) = v83;
      *(_DWORD *)(v28 + 12) = v83;
      if (v83 && (*(_BYTE *)(v28 + 4) & 0xE) == 8)
      {
        v88 = v17;
        bzero((void *)(v28 + 16), v85);
        v81 = v272;
        a4 = v280;
        v82 = v281;
        v10 = v283;
        LODWORD(v20) = v309;
        v17 = v88;
      }
      if (*((_BYTE *)v82 + 755))
        __dmb(0xAu);
      *(_QWORD *)(v28 + 16) = v25 | 0xFFFE000000000000;
      *(_QWORD *)(v28 + 24) = 0xFFFE000000000000;
      *(_QWORD *)(v28 + 32) = v81 | 0xFFFE000000000000;
      goto LABEL_95;
    }
    JSC::sanitizeStackForVM(v82, (JSC::VM *)v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
    v212 = JSC::LocalAllocator::allocateSlowCase(v86, (uint64_t)v281 + 192, v263, 0, 1, v209, v210, v211);
    v82 = v281;
    v28 = v212;
    v10 = v283;
    v17 = v298;
    LODWORD(v20) = v309;
    v81 = v272;
    a4 = v280;
    v85 = 8 * v83;
  }
  else
  {
    v264 = *a4;
    v146 = v10;
    Slow = JSC::CompleteSubspace::allocateSlow((uint64_t)v82 + 10792, v82, a3, 0, 1, a6, a7, (uint64_t)a8);
    v85 = 8 * v83;
    v81 = v272;
    a4 = v280;
    v82 = v281;
    LODWORD(v20) = v309;
    v17 = v298;
    v10 = v146;
    v28 = Slow;
  }
  v84 = v264;
LABEL_88:
  v12 = v318;
  if (v28)
    goto LABEL_89;
  v206 = v10;
  v207 = v17;
  v208 = v20;
  JSC::throwOutOfMemoryError(v10, (JSC::JSGlobalObject *)v324);
  LODWORD(v81) = v272;
  a4 = v280;
  v82 = v281;
  LODWORD(v20) = v208;
  v17 = v207;
  v10 = v206;
  v28 = 0;
LABEL_95:
  v11 = v260;
  v13 = v287;
  v14 = v314;
LABEL_96:
  if (!*((_DWORD *)v82 + 20))
    goto LABEL_97;
  v166 = v11;
  v167 = v14;
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v82, v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
  LODWORD(v81) = v272;
  a4 = v280;
  v82 = v281;
  v10 = v283;
  LODWORD(v20) = v309;
  v13 = v287;
  v17 = v298;
  v14 = v167;
  v11 = v166;
  if (!hasExceptionsAfterHandlingTraps)
  {
LABEL_97:
    if (!(_DWORD)v26)
      goto LABEL_199;
    v89 = 0;
    a3 = (v81 + 2);
    a5 = v28 + 16;
    a6 = (v81 - 1);
    v90 = v23 + 4;
    a7 = 2;
    a8 = v323;
    v262 = v81 - 1;
    while (1)
    {
      v91 = v18[v90];
      if ((v91 & 0xFFFE000000000002) != 0)
      {
        a3 = (a3 + 2);
        *(_QWORD *)(a5 + 8 * a3) = v91;
      }
      else
      {
        v92 = a4[23];
        if (!v92)
        {
          v275 = (JSC::CallFrame *)a3;
          v267 = a7;
          v92 = JSC::VM::orderedHashTableDeletedValueSlow(v82, (JSC::VM *)v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)v323);
          a8 = v323;
          a7 = v267;
          a6 = v262;
          a5 = v28 + 16;
          a3 = (uint64_t)v275;
          a4 = v280;
          v82 = v281;
          v10 = v283;
          LODWORD(v20) = v309;
          v13 = v287;
          v17 = v298;
          v14 = v314;
          v11 = v260;
        }
        if (v92 == v91)
        {
          v18[a7] = v89 | 0xFFFE000000000000;
          a7 = (a7 + 1);
          goto LABEL_114;
        }
        a3 = (a3 + 2);
        *(_QWORD *)(a5 + 8 * a3) = v91;
        if (v28 && v91 && *((_DWORD *)v82 + 190) >= *(unsigned __int8 *)(v28 + 7))
        {
          v152 = v11;
          v277 = (JSC::CallFrame *)a3;
          v269 = a7;
          JSC::Heap::writeBarrierSlowPath((uint64_t)v82 + 192, v28);
          a8 = v323;
          a7 = v269;
          a6 = v262;
          a5 = v28 + 16;
          a3 = (uint64_t)v277;
          a4 = v280;
          v82 = v281;
          v10 = v283;
          LODWORD(v20) = v309;
          v13 = v287;
          v17 = v298;
          v14 = v314;
          v11 = v152;
        }
        v93 = *(unsigned __int8 *)(v91 + 5);
        if (v93 == 2)
        {
          v94 = (int **)(v91 + 8);
          if ((*(_BYTE *)(v91 + 8) & 1) != 0)
          {
            v102 = v11;
            v274 = (JSC::CallFrame *)a3;
            v266 = a7;
            v103 = JSC::JSRopeString::resolveRope(v91, v10, a3, (uint64_t)a4, a9, a5, a6, a7, (uint64_t)v323);
            a8 = v323;
            a7 = v266;
            a6 = v262;
            a5 = v28 + 16;
            a3 = (uint64_t)v274;
            a4 = v280;
            v82 = v281;
            v10 = v283;
            LODWORD(v20) = v309;
            v13 = v287;
            v17 = v298;
            v14 = v314;
            v11 = v102;
            v94 = v103;
          }
          if (!*((_DWORD *)v82 + 20))
            goto LABEL_109;
          v278 = (JSC::CallFrame *)a3;
          v270 = a7;
          v153 = JSC::VM::hasExceptionsAfterHandlingTraps(v82, v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)v323);
          a8 = v323;
          a7 = v270;
          a6 = v262;
          a5 = v28 + 16;
          a3 = (uint64_t)v278;
          a4 = v280;
          v82 = v281;
          v10 = v283;
          LODWORD(v20) = v309;
          v13 = v287;
          v17 = v298;
          v14 = v314;
          v11 = v260;
          if (v153)
          {
            v97 = -1;
          }
          else
          {
LABEL_109:
            v95 = (WTF::StringImpl *)*v94;
            v96 = (*v94)[4];
            if (v96 < 0x100)
            {
              v100 = v11;
              v273 = (JSC::CallFrame *)a3;
              v265 = a7;
              v101 = WTF::StringImpl::hashSlowCase(v95);
              a8 = v323;
              a7 = v265;
              a6 = v262;
              a5 = v28 + 16;
              a3 = (uint64_t)v273;
              a4 = v280;
              v82 = v281;
              v10 = v283;
              LODWORD(v20) = v309;
              v13 = v287;
              v17 = v298;
              v14 = v314;
              v11 = v100;
              v97 = v101;
            }
            else
            {
              v97 = v96 >> 8;
            }
          }
          v323[0] = v91;
          goto LABEL_112;
        }
        if (v93 == 3)
        {
          v271 = a7;
          v279 = (JSC::CallFrame *)a3;
          v97 = *(_DWORD *)(v91 + 12);
          if (!v97)
            v97 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v91);
          v11 = v260;
          v10 = v283;
          v13 = v287;
          v14 = v314;
          v17 = v298;
          LODWORD(v20) = v309;
          a4 = v280;
          v82 = v281;
          a3 = (uint64_t)v279;
          a5 = v28 + 16;
          a6 = v262;
          a7 = v271;
          a8 = v323;
          goto LABEL_112;
        }
      }
      v104 = (v91 + ~(v91 << 32)) ^ ((v91 + ~(v91 << 32)) >> 22);
      v105 = 9 * ((v104 + ~(v104 << 13)) ^ ((v104 + ~(v104 << 13)) >> 8));
      v106 = (v105 ^ (v105 >> 15)) + ~((v105 ^ (v105 >> 15)) << 27);
      v97 = (v106 >> 31) ^ v106;
LABEL_112:
      if (*((_DWORD *)v82 + 20))
      {
        v150 = v11;
        v276 = (JSC::CallFrame *)a3;
        v268 = a7;
        v151 = JSC::VM::hasExceptionsAfterHandlingTraps(v82, v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)v323);
        a8 = v323;
        a7 = v268;
        a6 = v262;
        a5 = v28 + 16;
        a3 = (uint64_t)v276;
        a4 = v280;
        v82 = v281;
        v10 = v283;
        LODWORD(v20) = v309;
        v13 = v287;
        v17 = v298;
        v14 = v314;
        v11 = v150;
        if (v151)
        {
          v28 = 0;
          v12 = v318;
          goto LABEL_199;
        }
      }
      v98 = (v97 & a6) + 4;
      v99 = *(_QWORD *)(a5 + 8 * v98);
      *(_QWORD *)(a5 + 8 * v98) = a3 | 0xFFFE000000000000;
      *(_QWORD *)(a5 + 8 * (a3 + 1)) = v99;
      v12 = v318;
LABEL_114:
      ++v89;
      v90 += 2;
      if (v26 == v89)
        goto LABEL_199;
    }
  }
  v28 = 0;
  if (!*((_DWORD *)v82 + 20))
    goto LABEL_200;
LABEL_199:
  v174 = v11;
  v175 = v14;
  v176 = v10;
  v177 = v17;
  v178 = JSC::VM::hasExceptionsAfterHandlingTraps(v82, v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
  v82 = v281;
  LODWORD(v20) = v309;
  v17 = v177;
  v10 = v176;
  v14 = v175;
  v13 = v287;
  v11 = v174;
  if (v178)
  {
    v28 = 0;
  }
  else
  {
LABEL_200:
    *v18 = v28;
    if (v28 && (v28 & 0xFFFE000000000002) == 0)
    {
      v169 = v17;
      v170 = v10;
      v171 = v14;
      v172 = v13;
      v173 = v11;
      if (*((_DWORD *)v82 + 190) >= *(unsigned __int8 *)(v16 + 7))
        JSC::Heap::writeBarrierSlowPath((uint64_t)v281 + 192, v16);
      v12 = v318;
      v11 = v173;
      v13 = v172;
      v14 = v171;
      v10 = v170;
      v17 = v169;
      LODWORD(v20) = v309;
    }
  }
LABEL_18:
  if (*(_DWORD *)(v17 + 80))
  {
    v130 = *(_DWORD *)(v17 + 80);
    if ((v130 & 0x27) != 0 && (v130 & 0x20) == 0)
    {
      v294 = v13;
      v236 = v11;
      v237 = v14;
      v238 = v10;
      v239 = v17;
      v240 = v20;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v17 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      LODWORD(v20) = v240;
      v17 = v239;
      v10 = v238;
      v14 = v237;
      v13 = v294;
      v11 = v236;
    }
    if (*(_QWORD *)(v17 + 16))
      goto LABEL_25;
  }
  v29 = v28 + 16;
  v30 = *(_QWORD *)(v28 + 16);
  v31 = *(_DWORD *)(v28 + 32);
  v32 = *(_DWORD *)(v28 + 24);
  *(_QWORD *)(v28 + 16) = v30 + 1;
  if (!v19)
  {
    if ((v14 + 0x2000000000000) >> 50)
    {
      a9.i64[0] = v14 - 0x2000000000000;
      v180 = (int)COERCE_DOUBLE(v14 - 0x2000000000000);
      if (COERCE_DOUBLE(v14 - 0x2000000000000) == (double)(int)v180)
        v14 = v180 | 0xFFFE000000000000;
    }
    if ((v14 & 0xFFFE000000000002) != 0)
      goto LABEL_186;
    v131 = *(unsigned __int8 *)(v14 + 5);
    if (v131 == 2)
    {
      v132 = (int **)(v14 + 8);
      if ((*(_BYTE *)(v14 + 8) & 1) != 0)
      {
        v289 = v13;
        v158 = v11;
        v159 = v14;
        v160 = v17;
        v161 = JSC::JSRopeString::resolveRope(v14, v10, a3, (uint64_t)a4, a9, a5, a6, a7, (uint64_t)a8);
        v17 = v160;
        v14 = v159;
        v13 = v289;
        v11 = v158;
        v132 = v161;
      }
      if (!*(_DWORD *)(v17 + 80))
        goto LABEL_163;
      v186 = v11;
      v291 = v13;
      v303 = v17;
      v187 = v14;
      v188 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17, v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      v13 = v291;
      v17 = v303;
      v14 = v187;
      v11 = v186;
      if (v188)
      {
        LODWORD(v20) = -1;
      }
      else
      {
LABEL_163:
        v133 = (WTF::StringImpl *)*v132;
        v134 = (*v132)[4];
        if (v134 < 0x100)
        {
          v154 = v11;
          v155 = v13;
          v156 = v14;
          v300 = v17;
          v157 = WTF::StringImpl::hashSlowCase(v133);
          v17 = v300;
          v14 = v156;
          v13 = v155;
          v11 = v154;
          LODWORD(v20) = v157;
        }
        else
        {
          LODWORD(v20) = v134 >> 8;
        }
      }
      goto LABEL_165;
    }
    if (v131 == 3)
    {
      v305 = v17;
      v220 = v13;
      v221 = v11;
      v222 = v14;
      if (*(_DWORD *)(v14 + 12))
      {
        LODWORD(v20) = *(_DWORD *)(v14 + 12);
      }
      else
      {
        v223 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v14);
        v14 = v222;
        LODWORD(v20) = v223;
        v11 = v221;
        v13 = v220;
      }
      v17 = v305;
    }
    else
    {
LABEL_186:
      v143 = (v14 + ~(v14 << 32)) ^ ((v14 + ~(v14 << 32)) >> 22);
      v144 = 9 * ((v143 + ~(v143 << 13)) ^ ((v143 + ~(v143 << 13)) >> 8));
      v145 = (v144 ^ (v144 >> 15)) + ~((v144 ^ (v144 >> 15)) << 27);
      LODWORD(v20) = (v145 >> 31) ^ v145;
    }
LABEL_165:
    if (*(_DWORD *)(v17 + 80))
    {
      v182 = v11;
      v290 = v13;
      v302 = v17;
      v183 = v14;
      v184 = v20;
      v185 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v17, v13, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      LODWORD(v20) = v184;
      v13 = v290;
      v17 = v302;
      v14 = v183;
      v11 = v182;
      if (v185)
        goto LABEL_25;
    }
    v33 = v28 != v16;
    v19 = v14;
    goto LABEL_167;
  }
  if (v28 != v16)
  {
    v33 = 1;
LABEL_167:
    v21 = (v20 & (v31 - 1)) + 4;
    goto LABEL_22;
  }
  v33 = 0;
LABEL_22:
  v34 = (v31 + 2 * (v32 + v30) + 4);
  v35 = *(_QWORD *)(v29 + 8 * v21);
  *(_QWORD *)(v29 + 8 * v21) = v34 | 0xFFFE000000000000;
  *(_QWORD *)(v29 + 8 * (v31 + 2 * (v32 + v30) + 5)) = v35;
  *(_QWORD *)(v29 + 8 * v34) = v19;
  v36 = v17 + 192;
  if (v19 && (v19 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v17 + 760) >= *(unsigned __int8 *)(v28 + 7))
  {
    v136 = v13;
    v137 = v11;
    v138 = v17;
    JSC::Heap::writeBarrierSlowPath(v17 + 192, v28);
    v17 = v138;
    v13 = v136;
    v11 = v137;
  }
  if (v33)
  {
    *(_QWORD *)(v13 + 16) = v28;
    if (*(_DWORD *)(v17 + 760) >= *(unsigned __int8 *)(v13 + 7))
    {
      v135 = v11;
      JSC::Heap::writeBarrierSlowPath(v36, v13);
LABEL_170:
      v11 = v135;
    }
  }
LABEL_25:
  if (*(_DWORD *)(v11 + 80))
  {
    v126 = *(_DWORD *)(v11 + 80);
    if ((v126 & 0x27) != 0 && (v126 & 0x20) == 0)
    {
      v231 = v11;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, (uint64_t)a8);
      v11 = v231;
    }
    if (*(_QWORD *)(v11 + 16))
      return 10;
  }
  return v12;
}

uint64_t JSC::setProtoFuncClear(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t NotAnObjectError;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t SlowCase;
  JSC::VM *v34;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  v34 = v9;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v10);
    JSC::VM::throwException(v9, this, NotAnObjectError, v20, v21, v22, v23, v24);
  }
  else
  {
    if (v10 && *(_BYTE *)(v10 + 5) == 70)
      goto LABEL_4;
    JSC::throwTypeError((unint64_t)this, &v34, (uint64_t)"Set operation called on non-Set object", 39);
  }
  v10 = 0;
LABEL_4:
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 10;
  }
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
    return 10;
  v12 = *((_QWORD *)this + 7);
  v34 = (JSC::VM *)v12;
  v13 = *(_QWORD *)(v12 + 41656);
  v14 = *(_QWORD *)(v12 + 11000);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 + 60);
    v16 = *(_QWORD *)(v14 + 24);
    if (v16 < *(_QWORD *)(v14 + 32))
    {
      *(_QWORD *)(v14 + 24) = v16 + v15;
      goto LABEL_9;
    }
    v16 = *(_QWORD *)(v14 + 40);
    if ((v16 & 1) == 0)
    {
      v25 = *(_QWORD *)(v16 + 8) ^ *(_QWORD *)(v14 + 48);
      *(_QWORD *)(v14 + 32) = v16 + HIDWORD(v25);
      *(_QWORD *)(v14 + 40) = v16 + (int)v25;
      *(_QWORD *)(v14 + 24) = v16 + v15;
      goto LABEL_10;
    }
    v26 = *(_QWORD *)(v12 + 11000);
    v27 = *(_QWORD *)(v12 + 41656);
    v28 = *(unsigned int *)(v14 + 60);
    JSC::sanitizeStackForVM((JSC *)v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v29 = v28;
    v13 = v27;
    SlowCase = JSC::LocalAllocator::allocateSlowCase(v26, v12 + 192, v29, 0, 1, v30, v31, v32);
  }
  else
  {
    SlowCase = JSC::CompleteSubspace::allocateSlow(v12 + 10792, (JSC *)v12, 0xF0uLL, 0, 1, a6, a7, a8);
  }
  v16 = SlowCase;
LABEL_9:
  if (!v16)
  {
    JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v34);
    goto LABEL_15;
  }
LABEL_10:
  *(_DWORD *)v16 = 0;
  v17 = *(_DWORD *)(v13 + 8);
  *(_DWORD *)v16 = v13 >> 4;
  *(_DWORD *)(v16 + 4) = v17;
  *(_QWORD *)(v16 + 8) = 0x1C0000001CLL;
  if ((*(_BYTE *)(v16 + 4) & 0xE) == 8)
  {
    *(_OWORD *)(v16 + 208) = 0u;
    *(_OWORD *)(v16 + 224) = 0u;
    *(_OWORD *)(v16 + 176) = 0u;
    *(_OWORD *)(v16 + 192) = 0u;
    *(_OWORD *)(v16 + 144) = 0u;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
  }
  if (*(_BYTE *)(v12 + 755))
    __dmb(0xAu);
  *(int64x2_t *)(v16 + 16) = vdupq_n_s64(0xFFFE000000000000);
  *(_QWORD *)(v16 + 32) = 0xFFFE000000000008;
LABEL_15:
  if (!*(_DWORD *)(v12 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    *(_QWORD *)(v11 + 16) = v16;
    *(_QWORD *)(v11 + 24) = 0xFFFE0000FFFFFFFFLL;
    if (v16 && (v16 & 0xFFFE000000000002) == 0)
    {
      if (*(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v11 + 7))
        JSC::Heap::writeBarrierSlowPath(v12 + 192, v11);
      *(_QWORD *)(v10 + 16) = v16;
    }
    else
    {
      *(_QWORD *)(v10 + 16) = v16;
      if (!v16)
        return 10;
    }
    if (*(_DWORD *)(v12 + 760) >= *(unsigned __int8 *)(v10 + 7))
      JSC::Heap::writeBarrierSlowPath(v12 + 192, v10);
  }
  return 10;
}

uint64_t JSC::setProtoFuncDelete(JSC::VM **this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  JSC::VM *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t result;
  int v23;
  WTF::StringImpl **v24;
  unsigned int v25;
  int v26;
  char v27;
  unint64_t v28;
  JSC::VM *v29;
  unint64_t *v30;
  JSC::CallFrame *v31;
  int v32;
  WTF *v33;
  const WTF::StringImpl *v34;
  JSC *v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  JSC *v40;
  unint64_t *v41;
  unsigned int v42;
  unint64_t v43;
  JSC::VM *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  JSC *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  int **v61;
  WTF::StringImpl *v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  JSC *v67;
  unint64_t v68;
  uint64_t v69;
  int v70;
  JSC *v71;
  uint64_t v72;
  int **v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  JSC *v77;
  int v78;
  JSC *v79;
  int **v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  double v84;
  uint64_t v85;
  unint64_t v86;
  JSC::JSGlobalObject *v87;
  unint64_t NotAnObjectError;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  JSC *v94;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::VM *v96;
  JSC *v97;
  JSC *v98;
  JSC *v99;
  uint64_t Slow;
  JSC *v101;
  unint64_t v102;
  uint64_t v103;
  BOOL v104;
  JSC *v105;
  uint64_t v106;
  BOOL v107;
  JSC *v108;
  BOOL v109;
  JSC *v110;
  BOOL v111;
  JSC *v112;
  BOOL v113;
  JSC::CallFrame *v114;
  JSC *v115;
  JSC *v116;
  JSC *v117;
  BOOL v118;
  uint64_t v119;
  BOOL v120;
  unint64_t v121;
  JSC *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t SlowCase;
  unint64_t v127;
  unint64_t v128;
  JSC *v130;
  JSC *v131;
  JSC *v132;
  JSC *v133;
  JSC *v134;
  unint64_t v135;
  unsigned int v136;
  unint64_t v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  JSC *v144;
  JSC *v145;
  _QWORD v146[3];
  JSC::VM *v147;

  v10 = (JSC *)this;
  v11 = this[7];
  v12 = *((_QWORD *)a2 + 5);
  v147 = v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    v86 = v12;
    v87 = (JSC::JSGlobalObject *)this;
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v86);
    JSC::VM::throwException(v11, v87, NotAnObjectError, v89, v90, v91, v92, v93);
LABEL_111:
    v10 = v87;
    v12 = 0;
    goto LABEL_4;
  }
  if (!v12 || *(_BYTE *)(v12 + 5) != 70)
  {
    v87 = (JSC::JSGlobalObject *)this;
    JSC::throwTypeError((unint64_t)this, &v147, (uint64_t)"Set operation called on non-Set object", 39);
    goto LABEL_111;
  }
LABEL_4:
  if (*((_DWORD *)v11 + 20))
  {
    v94 = v10;
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v10 = v94;
    if (hasExceptionsAfterHandlingTraps)
      return 10;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v14 = *(_QWORD *)(v12 + 16);
  if (!v14)
    return 6;
  v15 = *((_QWORD *)v10 + 7);
  v16 = (unint64_t *)(v14 + 16);
  if (!*(_DWORD *)(v14 + 16))
  {
LABEL_9:
    v17 = -1;
    goto LABEL_10;
  }
  if ((v13 + 0x2000000000000) >> 50)
  {
    a9.i64[0] = v13 - 0x2000000000000;
    v85 = (int)COERCE_DOUBLE(v13 - 0x2000000000000);
    if (COERCE_DOUBLE(v13 - 0x2000000000000) == (double)(int)v85)
      v13 = v85 | 0xFFFE000000000000;
  }
  if ((v13 & 0xFFFE000000000002) != 0)
  {
    v27 = 0;
    goto LABEL_50;
  }
  v23 = *(unsigned __int8 *)(v13 + 5);
  if (v23 == 2)
  {
    v24 = (WTF::StringImpl **)(v13 + 8);
    if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    {
      v79 = v10;
      v80 = JSC::JSRopeString::resolveRope(v13, v10, a3, a4, a9, a5, a6, a7, a8);
      v10 = v79;
      v24 = (WTF::StringImpl **)v80;
    }
    if (*(_DWORD *)(v15 + 80)
      && (v112 = v10,
          v113 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8),
          v10 = v112,
          v113))
    {
      v26 = -1;
    }
    else
    {
      v25 = *((_DWORD *)*v24 + 4);
      if (v25 < 0x100)
      {
        v77 = v10;
        v78 = WTF::StringImpl::hashSlowCase(*v24);
        v10 = v77;
        v26 = v78;
      }
      else
      {
        v26 = v25 >> 8;
      }
    }
    v146[2] = v13;
    v27 = 1;
    goto LABEL_26;
  }
  if (v23 != 3)
  {
    v27 = 1;
LABEL_50:
    v37 = (v13 + ~(v13 << 32)) ^ ((v13 + ~(v13 << 32)) >> 22);
    v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
    v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
    v26 = (v39 >> 31) ^ v39;
    goto LABEL_26;
  }
  v122 = v10;
  v26 = *(_DWORD *)(v13 + 12);
  if (!v26)
    v26 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v13);
  v27 = 1;
  v10 = v122;
LABEL_26:
  if (*(_DWORD *)(v15 + 80))
  {
    v108 = v10;
    v109 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v10 = v108;
    if (v109)
    {
      v17 = 0;
      if (!*(_DWORD *)(v15 + 80))
        goto LABEL_12;
      goto LABEL_121;
    }
  }
  *(double *)a9.i64 = (double)(int)v13;
  if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
    a9.i64[0] = v13 - 0x2000000000000;
  v28 = v16[((*(_DWORD *)(v14 + 32) - 1) & v26) + 4];
  if (!v28)
    goto LABEL_9;
  v29 = (JSC::VM *)*((_QWORD *)v10 + 7);
  v30 = (unint64_t *)((char *)v29 + 41840);
  if (!(v13 >> 49))
  {
    if ((v27 & 1) == 0)
    {
      while (1)
      {
        v127 = v16[v28];
        if ((v127 & 0xFFFE000000000002) != 0)
        {
          if (v13 == v127)
            goto LABEL_47;
        }
        else
        {
          v128 = *v30;
          if (!*v30)
          {
            v130 = v10;
            v128 = JSC::VM::orderedHashTableDeletedValueSlow(v29, a2, a3, a4, a5, a6, a7, a8);
            v10 = v130;
          }
          if (v13 == v127 && v128 != v127)
            goto LABEL_47;
        }
        v28 = v16[(v28 + 1)];
        v17 = -1;
        if (!v28)
          goto LABEL_10;
      }
    }
    while (1)
    {
      a3 = v16[v28];
      if ((a3 & 0xFFFE000000000002) != 0)
        break;
      v31 = (JSC::CallFrame *)*v30;
      if (!*v30)
      {
        v114 = (JSC::CallFrame *)v16[v28];
        v115 = v10;
        v31 = (JSC::CallFrame *)JSC::VM::orderedHashTableDeletedValueSlow(v29, a2, a3, a4, a5, a6, a7, a8);
        v10 = v115;
        a3 = (uint64_t)v114;
      }
      if (v31 != (JSC::CallFrame *)a3)
      {
        if (v13 == a3)
          goto LABEL_47;
        v32 = *(unsigned __int8 *)(v13 + 5);
        if (v32 == 2)
        {
          if (*(_BYTE *)(a3 + 5) != 2)
            break;
          v33 = *(WTF **)(v13 + 8);
          if ((v33 & 1) != 0
            || (v34 = *(const WTF::StringImpl **)(a3 + 8), (v34 & 1) != 0))
          {
            v35 = v10;
            v36 = JSC::JSString::equalSlowCase((JSC::JSString *)v13, v10, (JSC::JSString *)a3, a4, a5, a6, a7, a8, a9);
          }
          else
          {
            v35 = v10;
            v36 = WTF::equal(v33, v34, (const WTF::StringImpl *)a3);
          }
        }
        else
        {
          if (v32 != 3 || *(_BYTE *)(a3 + 5) != 3)
            break;
          v35 = v10;
          v36 = JSC::JSBigInt::equals((JSC::JSBigInt *)v13, (JSC::JSBigInt *)a3, (JSC::JSBigInt *)a3);
        }
        v10 = v35;
        if (v36)
          goto LABEL_47;
      }
LABEL_40:
      v28 = v16[(v28 + 1)];
      v17 = -1;
      if (!v28)
        goto LABEL_10;
    }
    if (v13 == a3)
      goto LABEL_47;
    goto LABEL_40;
  }
  v81 = a9.i64[0];
  while (1)
  {
    v82 = v16[v28];
    if ((v82 & 0xFFFE000000000002) != 0)
      goto LABEL_102;
    v83 = *v30;
    if (!*v30)
    {
      v145 = (JSC *)a9.i64[0];
      v133 = v10;
      v83 = JSC::VM::orderedHashTableDeletedValueSlow(v29, a2, a3, a4, a5, a6, a7, a8);
      v10 = v133;
      a9.i64[0] = (uint64_t)v145;
    }
    if (v83 != v82)
    {
LABEL_102:
      if (v13 == v82)
        break;
      if (v82 >> 49)
      {
        v84 = (double)(int)v82;
        if (v82 <= 0xFFFDFFFFFFFFFFFFLL)
          *(_QWORD *)&v84 = v82 - 0x2000000000000;
        if (v81 == *(_QWORD *)&v84)
          break;
      }
    }
    v28 = v16[(v28 + 1)];
    v17 = -1;
    if (!v28)
      goto LABEL_10;
  }
LABEL_47:
  v17 = v28;
LABEL_10:
  if (!*(_DWORD *)(v15 + 80))
  {
    if (v17 != -1)
      goto LABEL_12;
    return 6;
  }
LABEL_121:
  v110 = v10;
  v111 = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v15, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  result = 6;
  if (v17 == -1)
    return result;
  v10 = v110;
  if (v111)
    return result;
LABEL_12:
  v18 = *(_QWORD *)(v15 + 41840);
  if (!v18)
  {
    v96 = (JSC::VM *)v15;
    v97 = v10;
    v18 = JSC::VM::orderedHashTableDeletedValueSlow(v96, a2, a3, a4, a5, a6, a7, a8);
    v10 = v97;
  }
  v16[v17] = v18;
  v19 = *(_QWORD *)(v14 + 24) + 1;
  v20 = *(_QWORD *)(v14 + 16) - 1;
  *(_QWORD *)(v14 + 16) = v20;
  *(_QWORD *)(v14 + 24) = v19;
  v21 = *(_DWORD *)(v14 + 32);
  result = 7;
  if (v21 != 8 && v21 >> 2 > v20)
  {
    v40 = (JSC *)*((_QWORD *)v10 + 7);
    v41 = (unint64_t *)((char *)v40 + 41656);
    v147 = v40;
    v42 = (v21 & 0xFFFFFFFE) + (v21 >> 1) + 4;
    v143 = (unint64_t *)((char *)v40 + 41656);
    v144 = v40;
    if (v42 < 0x10000001)
    {
      v43 = *v41;
      v44 = (JSC::VM *)(8 * ((v21 & 0xFFFFFFFE) + (v21 >> 1) + 4));
      v45 = ((unint64_t)v44 + 31) & 0xFFFFFFFF0;
      if (v45 <= 0x1F60
        && (v46 = *(_QWORD *)((char *)v40 + ((((unint64_t)v44 + 31) >> 1) & 0x7FFFFFFF8) + 10880)) != 0)
      {
        v47 = *(_QWORD *)(v46 + 24);
        if (v47 >= *(_QWORD *)(v46 + 32))
        {
          v132 = v10;
          v141 = *(unsigned int *)(v46 + 60);
          v47 = *(_QWORD *)(v46 + 40);
          if ((v47 & 1) == 0)
          {
            v121 = *(_QWORD *)(v47 + 8) ^ *(_QWORD *)(v46 + 48);
            *(_QWORD *)(v46 + 32) = v47 + HIDWORD(v121);
            *(_QWORD *)(v46 + 40) = v47 + (int)v121;
            *(_QWORD *)(v46 + 24) = v47 + v141;
            v44 = (JSC::VM *)(8 * ((v21 & 0xFFFFFFFE) + (v21 >> 1) + 4));
            v41 = (unint64_t *)((char *)v40 + 41656);
LABEL_57:
            *(_DWORD *)v47 = 0;
            v48 = *(_DWORD *)(v43 + 8);
            *(_DWORD *)v47 = v43 >> 4;
            *(_DWORD *)(v47 + 4) = v48;
            v146[1] = v43;
            *(_DWORD *)(v47 + 8) = v42;
            *(_DWORD *)(v47 + 12) = v42;
            v49 = v21 >> 1;
            if ((v21 & 0xFFFFFFFE) + (v21 >> 1) != -4 && (*(_BYTE *)(v47 + 4) & 0xE) == 8)
            {
              v50 = v10;
              bzero((void *)(v47 + 16), (size_t)v44);
              v41 = v143;
              v40 = v144;
              v10 = v50;
            }
            if (*((_BYTE *)v40 + 755))
              __dmb(0xAu);
            *(_QWORD *)(v47 + 16) = v20 | 0xFFFE000000000000;
            *(_QWORD *)(v47 + 24) = 0xFFFE000000000000;
            *(_QWORD *)(v47 + 32) = v49 | 0xFFFE000000000000;
            goto LABEL_63;
          }
          JSC::sanitizeStackForVM(v40, v44, v45, a4, a5, a6, a7, a8);
          SlowCase = JSC::LocalAllocator::allocateSlowCase(v46, (uint64_t)v144 + 192, v141, 0, 1, v123, v124, v125);
          v40 = v144;
          v47 = SlowCase;
          v10 = v132;
          v44 = (JSC::VM *)(8 * ((v21 & 0xFFFFFFFE) + (v21 >> 1) + 4));
          v41 = v143;
        }
        else
        {
          *(_QWORD *)(v46 + 24) = v47 + *(unsigned int *)(v46 + 60);
        }
      }
      else
      {
        v99 = v10;
        Slow = JSC::CompleteSubspace::allocateSlow((uint64_t)v40 + 10792, v40, v45, 0, 1, a6, a7, a8);
        v44 = (JSC::VM *)(8 * ((v21 & 0xFFFFFFFE) + (v21 >> 1) + 4));
        v41 = v143;
        v40 = v144;
        v10 = v99;
        v47 = Slow;
      }
      if (v47)
        goto LABEL_57;
    }
    v116 = v10;
    JSC::throwOutOfMemoryError(v10, (JSC::JSGlobalObject *)&v147);
    v41 = v143;
    v40 = v144;
    v10 = v116;
    v47 = 0;
    LODWORD(v49) = v21 >> 1;
LABEL_63:
    if (*((_DWORD *)v40 + 20))
    {
      v117 = v10;
      v118 = JSC::VM::hasExceptionsAfterHandlingTraps(v40, (uint64_t)v44, v45, a4, a5, a6, a7, a8);
      v41 = v143;
      v40 = v144;
      v10 = v117;
      if (v118)
      {
LABEL_128:
        v47 = 0;
        goto LABEL_129;
      }
    }
    v51 = (v20 + v19);
    if (!(_DWORD)v51)
    {
LABEL_129:
      if (!*((_DWORD *)v40 + 20)
        || (v120 = JSC::VM::hasExceptionsAfterHandlingTraps(v40, (uint64_t)v44, v45, a4, a5, a6, a7, a8),
            v40 = v144,
            !v120))
      {
        *v16 = v47;
        v119 = (uint64_t)v40 + 192;
        if (v47
          && (v47 & 0xFFFE000000000002) == 0
          && *((_DWORD *)v40 + 190) >= *(unsigned __int8 *)(v14 + 7))
        {
          JSC::Heap::writeBarrierSlowPath((uint64_t)v40 + 192, v14);
          v40 = v144;
        }
        *(_QWORD *)(v12 + 16) = v47;
        result = 7;
        if (!v12 || !v47)
          return result;
        if (*((_DWORD *)v40 + 190) >= *(unsigned __int8 *)(v12 + 7))
          JSC::Heap::writeBarrierSlowPath(v119, v12);
      }
      return 7;
    }
    v52 = 0;
    LODWORD(v53) = v49 + 2;
    v54 = v47 + 16;
    v55 = v49 - 1;
    v56 = v21 + 4;
    v57 = 2;
    v44 = (JSC::VM *)v146;
    v142 = v51;
    v140 = v49 - 1;
    while (1)
    {
      v58 = v16[v56];
      if ((v58 & 0xFFFE000000000002) != 0)
      {
        v53 = (v53 + 2);
        *(_QWORD *)(v54 + 8 * v53) = v58;
      }
      else
      {
        v59 = v41[23];
        if (!v59)
        {
          v98 = v10;
          v136 = v57;
          v59 = JSC::VM::orderedHashTableDeletedValueSlow(v40, (JSC::VM *)v146, v45, a4, a5, a6, a7, a8);
          v44 = (JSC::VM *)v146;
          v57 = v136;
          v55 = v140;
          v51 = v142;
          v41 = v143;
          v40 = v144;
          v10 = v98;
        }
        if (v59 == v58)
        {
          v16[v57] = v52 | 0xFFFE000000000000;
          v57 = (v57 + 1);
          goto LABEL_81;
        }
        v53 = (v53 + 2);
        *(_QWORD *)(v54 + 8 * v53) = v58;
        if (v47 && v58 && *((_DWORD *)v40 + 190) >= *(unsigned __int8 *)(v47 + 7))
        {
          v105 = v10;
          v137 = v12;
          v106 = v57;
          JSC::Heap::writeBarrierSlowPath((uint64_t)v40 + 192, v47);
          v44 = (JSC::VM *)v146;
          v57 = v106;
          v12 = v137;
          v55 = v140;
          v51 = v142;
          v41 = v143;
          v40 = v144;
          v10 = v105;
        }
        v60 = *(unsigned __int8 *)(v58 + 5);
        if (v60 == 2)
        {
          v61 = (int **)(v58 + 8);
          if ((*(_BYTE *)(v58 + 8) & 1) != 0)
          {
            v71 = v10;
            v135 = v12;
            v72 = v57;
            v73 = JSC::JSRopeString::resolveRope(v58, v10, v45, a4, a9, a5, a6, a7, a8);
            v44 = (JSC::VM *)v146;
            v57 = v72;
            v12 = v135;
            v55 = v140;
            v51 = v142;
            v41 = v143;
            v40 = v144;
            v10 = v71;
            v61 = v73;
          }
          if (!*((_DWORD *)v40 + 20))
            goto LABEL_76;
          v131 = v10;
          v138 = v57;
          v107 = JSC::VM::hasExceptionsAfterHandlingTraps(v40, (uint64_t)v146, v45, a4, a5, a6, a7, a8);
          v44 = (JSC::VM *)v146;
          v57 = v138;
          v55 = v140;
          v51 = v142;
          v41 = v143;
          v40 = v144;
          v10 = v131;
          if (v107)
          {
            v64 = -1;
          }
          else
          {
LABEL_76:
            v62 = (WTF::StringImpl *)*v61;
            v63 = (*v61)[4];
            if (v63 < 0x100)
            {
              v67 = v10;
              v68 = v12;
              v69 = v57;
              v70 = WTF::StringImpl::hashSlowCase(v62);
              v44 = (JSC::VM *)v146;
              v57 = v69;
              v12 = v68;
              v16 = (unint64_t *)(v14 + 16);
              v55 = v140;
              v51 = v142;
              v41 = v143;
              v40 = v144;
              v10 = v67;
              v64 = v70;
            }
            else
            {
              v64 = v63 >> 8;
            }
          }
          v146[0] = v58;
          goto LABEL_79;
        }
        if (v60 == 3)
        {
          v139 = v57;
          v134 = v10;
          v64 = *(_DWORD *)(v58 + 12);
          if (!v64)
            v64 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v58);
          v10 = v134;
          v41 = v143;
          v40 = v144;
          v51 = v142;
          v55 = v140;
          v57 = v139;
          v44 = (JSC::VM *)v146;
          goto LABEL_79;
        }
      }
      v74 = (v58 + ~(v58 << 32)) ^ ((v58 + ~(v58 << 32)) >> 22);
      v75 = 9 * ((v74 + ~(v74 << 13)) ^ ((v74 + ~(v74 << 13)) >> 8));
      v76 = (v75 ^ (v75 >> 15)) + ~((v75 ^ (v75 >> 15)) << 27);
      v64 = (v76 >> 31) ^ v76;
LABEL_79:
      if (*((_DWORD *)v40 + 20))
      {
        v101 = v10;
        v102 = v12;
        v103 = v57;
        v104 = JSC::VM::hasExceptionsAfterHandlingTraps(v40, (uint64_t)v146, v45, a4, a5, a6, a7, a8);
        v44 = (JSC::VM *)v146;
        v57 = v103;
        v12 = v102;
        v16 = (unint64_t *)(v14 + 16);
        v55 = v140;
        v51 = v142;
        v41 = v143;
        v40 = v144;
        v10 = v101;
        if (v104)
          goto LABEL_128;
      }
      v65 = (v64 & v55) + 4;
      v66 = *(_QWORD *)(v54 + 8 * v65);
      *(_QWORD *)(v54 + 8 * v65) = v53 | 0xFFFE000000000000;
      *(_QWORD *)(v54 + 8 * (v53 + 1)) = v66;
LABEL_81:
      ++v52;
      v56 += 2;
      if (v51 == v52)
        goto LABEL_129;
    }
  }
  return result;
}

unint64_t JSC::setProtoFuncEntries(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return JSC::createSetIteratorObject((unint64_t)this, *((_QWORD *)a2 + 5), (uint64_t)a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::setProtoFuncHas(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSC::VM *v18;
  int v19;
  int **v20;
  unsigned int v21;
  int v22;
  char v23;
  uint64_t v24;
  JSC::VM *v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  WTF *v31;
  const WTF::StringImpl *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  double v39;
  uint64_t v40;
  unint64_t NotAnObjectError;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  JSC::VM *v51;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  v51 = v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v12);
    JSC::VM::throwException(v11, this, NotAnObjectError, v42, v43, v44, v45, v46);
LABEL_68:
    v12 = 0;
    goto LABEL_4;
  }
  if (!v12 || *(_BYTE *)(v12 + 5) != 70)
  {
    JSC::throwTypeError((unint64_t)this, &v51, (uint64_t)"Set operation called on non-Set object", 39);
    goto LABEL_68;
  }
LABEL_4:
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 10;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v14 = *(_QWORD *)(v12 + 16);
  if (!v14)
    return 6;
  v15 = v14 + 16;
  if (!*(_DWORD *)(v14 + 16))
    return 6;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((v13 + 0x2000000000000) >> 50)
  {
    a9.i64[0] = v13 - 0x2000000000000;
    v40 = (int)COERCE_DOUBLE(v13 - 0x2000000000000);
    if (COERCE_DOUBLE(v13 - 0x2000000000000) == (double)(int)v40)
      v13 = v40 | 0xFFFE000000000000;
  }
  if ((v13 & 0xFFFE000000000002) != 0)
  {
    v23 = 0;
    goto LABEL_44;
  }
  v19 = *(unsigned __int8 *)(v13 + 5);
  if (v19 != 2)
  {
    if (v19 == 3)
    {
      v22 = *(_DWORD *)(v13 + 12);
      if (!v22)
        v22 = JSC::JSBigInt::hashSlow((JSC::JSBigInt *)v13);
      goto LABEL_19;
    }
    v23 = 1;
LABEL_44:
    v33 = (v13 + ~(v13 << 32)) ^ ((v13 + ~(v13 << 32)) >> 22);
    v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
    v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
    v22 = (v35 >> 31) ^ v35;
    goto LABEL_20;
  }
  v20 = (int **)(v13 + 8);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
    v20 = JSC::JSRopeString::resolveRope(v13, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*((_DWORD *)v18 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v18, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v22 = -1;
  }
  else
  {
    v21 = (*v20)[4];
    if (v21 < 0x100)
      v22 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)*v20);
    else
      v22 = v21 >> 8;
  }
LABEL_19:
  v23 = 1;
LABEL_20:
  if (*((_DWORD *)v18 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v18, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 7;
  }
  v24 = *(_QWORD *)(v15 + 8 * (((*(_DWORD *)(v14 + 32) - 1) & v22) + 4));
  if (v24)
  {
    v25 = (JSC::VM *)*((_QWORD *)this + 7);
    v26 = (unint64_t *)((char *)v25 + 41840);
    *(double *)a9.i64 = (double)(int)v13;
    if (v13 <= 0xFFFDFFFFFFFFFFFFLL)
      a9.i64[0] = v13 - 0x2000000000000;
    if (!(v13 >> 49))
    {
      v16 = 6;
      if ((v23 & 1) == 0)
      {
        while (1)
        {
          v27 = v24;
          v48 = *(_QWORD *)(v15 + 8 * v24);
          if ((v48 & 0xFFFE000000000002) != 0)
          {
            if (v13 == v48)
              goto LABEL_40;
          }
          else
          {
            v49 = *v26;
            if (!*v26)
              v49 = JSC::VM::orderedHashTableDeletedValueSlow(v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (v13 == v48 && v49 != v48)
              goto LABEL_40;
          }
          v24 = *(_QWORD *)(v15 + 8 * (v24 + 1));
          if (!v24)
            return v16;
        }
      }
      while (1)
      {
        v27 = v24;
        v28 = *(_QWORD *)(v15 + 8 * v24);
        if ((v28 & 0xFFFE000000000002) != 0)
          break;
        v29 = *v26;
        if (!*v26)
        {
          v47 = *(_QWORD *)(v15 + 8 * v24);
          v29 = JSC::VM::orderedHashTableDeletedValueSlow(v25, a2, v28, a4, a5, a6, a7, a8);
          v28 = v47;
        }
        if (v29 != v28)
        {
          if (v13 == v28)
            goto LABEL_40;
          v30 = *(unsigned __int8 *)(v13 + 5);
          if (v30 == 2)
          {
            if (*(_BYTE *)(v28 + 5) != 2)
              break;
            v31 = *(WTF **)(v13 + 8);
            if ((v31 & 1) != 0
              || (v32 = *(const WTF::StringImpl **)(v28 + 8), (v32 & 1) != 0))
            {
              if (JSC::JSString::equalSlowCase((JSC::JSString *)v13, this, (JSC::JSString *)v28, a4, a5, a6, a7, a8, a9))
              {
                goto LABEL_40;
              }
            }
            else if (WTF::equal(v31, v32, (const WTF::StringImpl *)v28))
            {
              goto LABEL_40;
            }
          }
          else
          {
            if (v30 != 3 || *(_BYTE *)(v28 + 5) != 3)
              break;
            if (JSC::JSBigInt::equals((JSC::JSBigInt *)v13, (JSC::JSBigInt *)v28, (JSC::JSBigInt *)v28))
              goto LABEL_40;
          }
        }
LABEL_34:
        v24 = *(_QWORD *)(v15 + 8 * (v24 + 1));
        if (!v24)
          return v16;
      }
      if (v13 == v28)
        goto LABEL_40;
      goto LABEL_34;
    }
    v36 = a9.i64[0];
    v16 = 6;
    while (1)
    {
      v37 = *(_QWORD *)(v15 + 8 * v24);
      if ((v37 & 0xFFFE000000000002) != 0)
        goto LABEL_59;
      v38 = *v26;
      if (!*v26)
        v38 = JSC::VM::orderedHashTableDeletedValueSlow(v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (v38 != v37)
      {
LABEL_59:
        v27 = v24;
        if (v13 == v37)
          break;
        if (v37 >> 49)
        {
          v39 = (double)(int)v37;
          if (v37 <= 0xFFFDFFFFFFFFFFFFLL)
            *(_QWORD *)&v39 = v37 - 0x2000000000000;
          if (v36 == *(_QWORD *)&v39)
            break;
        }
      }
      v24 = *(_QWORD *)(v15 + 8 * (v24 + 1));
      if (!v24)
        return v16;
    }
LABEL_40:
    if (v27 != 0xFFFFFFFFLL)
      return 7;
  }
  return 6;
}

unint64_t JSC::setProtoFuncValues(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  JSC::Heap **v13;
  JSC::Heap *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t NotAnObjectError;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  JSC::Exception *v36;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  JSC::Heap *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t SlowCase;
  JSC::JSGlobalObject *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t Slow;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  JSC::Heap **v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  JSC::VM *v87;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  v87 = (JSC::VM *)v9;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    NotAnObjectError = JSC::createNotAnObjectError((unint64_t)this, v10);
    v36 = (JSC::Exception *)NotAnObjectError;
    if ((NotAnObjectError & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)NotAnObjectError & 0xFFFFFFFE) + 0x4C)))
    {
      v36 = (JSC::Exception *)JSC::Exception::create(v9, (JSC::VM *)NotAnObjectError, 0, v30, v31, v32, v33, v34);
    }
    JSC::VM::throwException((JSC::VM *)v9, this, v36, v35, v30, v31, v32, v33, v34);
  }
  else
  {
    if (v10 && *(_BYTE *)(v10 + 5) == 70)
      goto LABEL_4;
    JSC::throwTypeError((unint64_t)this, &v87, (uint64_t)"Set operation called on non-Set object", 39);
  }
  v10 = 0;
LABEL_4:
  if (*(_DWORD *)(v9 + 80))
  {
    v37 = *(_DWORD *)(v9 + 80);
    if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    {
      v62 = v10;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v10 = v62;
    }
    if (*(_QWORD *)(v9 + 16))
      return 10;
  }
  v11 = *((_DWORD *)this + 252);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  v13 = (JSC::Heap **)*((_QWORD *)this + 7);
  v14 = v13[5092];
  if (!v14)
  {
    v82 = (JSC::Heap **)*((_QWORD *)this + 7);
    v43 = v10;
    v44 = JSC::GCClient::Heap::setIteratorSpaceSlow(v13 + 4694);
    v10 = v43;
    v14 = v44;
    v13 = v82;
  }
  v15 = *((_QWORD *)v14 + 3);
  if (v15 < *((_QWORD *)v14 + 4))
    goto LABEL_11;
  v15 = *((_QWORD *)v14 + 5);
  if ((v15 & 1) == 0)
  {
    v38 = *(_QWORD *)(v15 + 8) ^ *((_QWORD *)v14 + 6);
    *((_QWORD *)v14 + 4) = v15 + HIDWORD(v38);
    *((_QWORD *)v14 + 5) = v15 + (int)v38;
LABEL_11:
    *((_QWORD *)v14 + 3) = v15 + 48;
    goto LABEL_12;
  }
  v78 = v12;
  v83 = v10;
  v45 = (uint64_t)(v13 + 24);
  JSC::sanitizeStackForVM((JSC *)v13, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
  v46 = v45;
  v12 = v78;
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v14, v46, 48, 0, 0, v47, v48, v49);
  v10 = v83;
  v15 = SlowCase;
LABEL_12:
  *(_DWORD *)v15 = 0;
  v16 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)v15 = v12 >> 4;
  *(_DWORD *)(v15 + 4) = v16;
  *(_QWORD *)(v15 + 40) = 0;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 8) = 0u;
  v17 = *((_QWORD *)this + 7);
  if (*(_BYTE *)(v17 + 755))
    __dmb(0xAu);
  *(_QWORD *)(v15 + 16) = 0xFFFE000000000000;
  *(_QWORD *)(v15 + 24) = v10;
  v18 = v17 + 192;
  if (v10 && (v10 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v17 + 760) >= *(unsigned __int8 *)(v15 + 7))
  {
    v77 = v15;
    v81 = v10;
    JSC::Heap::writeBarrierSlowPath(v18, v15);
    v18 = v17 + 192;
    v15 = v77;
    v10 = v81;
  }
  if (*(_QWORD *)(v10 + 16))
    goto LABEL_17;
  v21 = *((_QWORD *)this + 7);
  v87 = (JSC::VM *)v21;
  v22 = *(_QWORD *)(v21 + 41656);
  v23 = *(_QWORD *)(v21 + 11000);
  if (v23)
  {
    v24 = *(unsigned int *)(v23 + 60);
    v25 = *(_QWORD *)(v23 + 24);
    if (v25 < *(_QWORD *)(v23 + 32))
    {
      *(_QWORD *)(v23 + 24) = v25 + v24;
      goto LABEL_25;
    }
    v25 = *(_QWORD *)(v23 + 40);
    if ((v25 & 1) == 0)
    {
      v42 = *(_QWORD *)(v25 + 8) ^ *(_QWORD *)(v23 + 48);
      *(_QWORD *)(v23 + 32) = v25 + HIDWORD(v42);
      *(_QWORD *)(v23 + 40) = v25 + (int)v42;
      *(_QWORD *)(v23 + 24) = v25 + v24;
      goto LABEL_26;
    }
    v67 = v17;
    v68 = *(_QWORD *)(v21 + 41656);
    v54 = v21 + 192;
    v74 = v18;
    v79 = v15;
    v85 = v10;
    v70 = v21;
    v55 = *(unsigned int *)(v23 + 60);
    JSC::sanitizeStackForVM((JSC *)v21, (JSC::VM *)v10, (uint64_t)a3, a4, a5, a6, a7, a8);
    v56 = v54;
    v17 = v67;
    Slow = JSC::LocalAllocator::allocateSlowCase(v23, v56, v55, 0, 1, v57, v58, v59);
    v22 = v68;
    v21 = v70;
    v15 = v79;
  }
  else
  {
    v71 = v21;
    v74 = v18;
    v85 = v10;
    v61 = v15;
    v69 = *(_QWORD *)(v21 + 41656);
    Slow = JSC::CompleteSubspace::allocateSlow(v21 + 10792, (JSC *)v21, 0xF0uLL, 0, 1, a6, a7, a8);
    v22 = v69;
    v21 = v71;
    v15 = v61;
  }
  v10 = v85;
  v25 = Slow;
  v18 = v74;
LABEL_25:
  if (v25)
  {
LABEL_26:
    *(_DWORD *)v25 = 0;
    v26 = *(_DWORD *)(v22 + 8);
    *(_DWORD *)v25 = v22 >> 4;
    *(_DWORD *)(v25 + 4) = v26;
    *(_QWORD *)(v25 + 8) = 0x1C0000001CLL;
    if ((*(_BYTE *)(v25 + 4) & 0xE) == 8)
    {
      *(_OWORD *)(v25 + 208) = 0u;
      *(_OWORD *)(v25 + 224) = 0u;
      *(_OWORD *)(v25 + 176) = 0u;
      *(_OWORD *)(v25 + 192) = 0u;
      *(_OWORD *)(v25 + 144) = 0u;
      *(_OWORD *)(v25 + 160) = 0u;
      *(_OWORD *)(v25 + 112) = 0u;
      *(_OWORD *)(v25 + 128) = 0u;
      *(_OWORD *)(v25 + 80) = 0u;
      *(_OWORD *)(v25 + 96) = 0u;
      *(_OWORD *)(v25 + 48) = 0u;
      *(_OWORD *)(v25 + 64) = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_OWORD *)(v25 + 32) = 0u;
    }
    if (*(_BYTE *)(v21 + 755))
      __dmb(0xAu);
    *(int64x2_t *)(v25 + 16) = vdupq_n_s64(0xFFFE000000000000);
    *(_QWORD *)(v25 + 32) = 0xFFFE000000000008;
    goto LABEL_31;
  }
  v84 = v10;
  v73 = v18;
  v51 = this;
  v52 = v15;
  v53 = v21;
  JSC::throwOutOfMemoryError(v51, (JSC::JSGlobalObject *)&v87);
  v21 = v53;
  v18 = v73;
  v15 = v52;
  v10 = v84;
  v25 = 0;
LABEL_31:
  if (!*(_DWORD *)(v21 + 80))
    goto LABEL_32;
  v41 = *(_DWORD *)(v21 + 80);
  if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
  {
    v76 = v18;
    v80 = v25;
    v86 = v10;
    v65 = v15;
    v66 = v21;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v21 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v18 = v76;
    v25 = v80;
    v21 = v66;
    v15 = v65;
    v10 = v86;
  }
  if (!*(_QWORD *)(v21 + 16))
  {
LABEL_32:
    *(_QWORD *)(v10 + 16) = v25;
    if (v10 && v25 && *(_DWORD *)(v21 + 760) >= *(unsigned __int8 *)(v10 + 7))
    {
      v72 = v18;
      v27 = v10;
      v28 = v15;
      JSC::Heap::writeBarrierSlowPath(v21 + 192, v10);
      v18 = v72;
      v15 = v28;
      v10 = v27;
    }
  }
LABEL_17:
  if (!*(_DWORD *)(v17 + 80))
    goto LABEL_18;
  v39 = *(_DWORD *)(v17 + 80);
  if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
  {
    v75 = v18;
    v63 = v10;
    v64 = v15;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v17 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v18 = v75;
    v15 = v64;
    v10 = v63;
  }
  if (!*(_QWORD *)(v17 + 16))
  {
LABEL_18:
    v19 = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v15 + 32) = v19;
    if (v19
      && (v19 & 0xFFFE000000000002) == 0
      && *(_DWORD *)(v17 + 760) >= *(unsigned __int8 *)(v15 + 7))
    {
      v40 = v15;
      JSC::Heap::writeBarrierSlowPath(v18, v15);
      v15 = v40;
    }
    *(_QWORD *)(v15 + 40) = 0xFFFE000000000001;
  }
  return v15;
}

unint64_t JSC::setProtoFuncSize(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::AtomStringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double v27;
  int v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  JSC::VM *v37;
  uint64_t v38;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  v37 = (JSC::VM *)v9;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    v13 = WTF::fastCompactMalloc((WTF *)0x20);
    v14.i64[0] = 0x1000000002;
    *(_QWORD *)v13 = 0x1000000002;
    *(_QWORD *)(v13 + 8) = "is not an object";
    *(_DWORD *)(v13 + 16) = 4;
    v38 = v13;
    v26 = JSC::createError((unint64_t)this, v10, &v38, (uint64_t)JSC::defaultSourceAppender, v15, v16, v17, v18, v14);
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v13, v19, v20, v21, v22, v23, v24, v25);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v13 -= 2;
    }
    if ((v26 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x4C)))
    {
      v26 = JSC::Exception::create(v9, (JSC::VM *)v26, 0, v21, v22, v23, v24, v25);
    }
    JSC::VM::throwException((JSC::VM *)v9, this, (JSC::Exception *)v26, v27, v21, v22, v23, v24, v25);
  }
  else
  {
    if (v10 && *(_BYTE *)(v10 + 5) == 70)
      goto LABEL_4;
    JSC::throwTypeError((unint64_t)this, &v37, (uint64_t)"Set operation called on non-Set object", 39);
  }
  v10 = 0;
LABEL_4:
  if (*(_DWORD *)(v9 + 80))
  {
    v28 = *(_DWORD *)(v9 + 80);
    if ((v28 & 0x27) != 0 && (v28 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v9 + 16))
      return 10;
  }
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v11 = *(_QWORD *)(v11 + 16);
    if ((v11 & 0x80000000) != 0)
      return COERCE__INT64((double)v11) + 0x2000000000000;
    v11 = v11;
  }
  return v11 | 0xFFFE000000000000;
}

JSC::Exception *JSC::callShadowRealm(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  return JSC::throwConstructorCannotBeCalledAsFunctionTypeError((unint64_t)this, &v4, (uint64_t)"ShadowRealm", 12);
}

unint64_t JSC::constructWithShadowRealmConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v10;
  JSC::VM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t Structure;
  _QWORD *v19;
  unint64_t SlowCase;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;

  v10 = *((_QWORD *)this + 7);
  Structure = JSC::ShadowRealmObject::createStructure((unint64_t *)v10, this, *((_QWORD *)this + 85), a4, a5, a6, a7, a8, a9);
  v19 = *(_QWORD **)(v10 + 40752);
  if (!v19)
    v19 = (_QWORD *)JSC::GCClient::Heap::shadowRealmSpaceSlow((JSC::Heap **)(v10 + 37552));
  SlowCase = v19[3];
  if (SlowCase < v19[4])
    goto LABEL_4;
  SlowCase = v19[5];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v19[6];
    v19[4] = SlowCase + HIDWORD(v53);
    v19[5] = SlowCase + (int)v53;
LABEL_4:
    v19[3] = SlowCase + 32;
    goto LABEL_5;
  }
  v54 = (uint64_t)v19;
  JSC::sanitizeStackForVM((JSC *)v10, v11, v12, v13, v14, v15, v16, v17);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v54, v10 + 192, 32, 0, 0, v55, v56, v57);
LABEL_5:
  *(_DWORD *)SlowCase = 0;
  v21 = *(_DWORD *)(Structure + 8);
  *(_DWORD *)SlowCase = Structure >> 4;
  *(_DWORD *)(SlowCase + 4) = v21;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  v22 = *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2776);
  v23 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v23 = 0xB00000002;
  *(_QWORD *)(v23 + 8) = "ShadowRealm";
  *(_DWORD *)(v23 + 16) = 4;
  v58 = (WTF::StringImpl *)v23;
  v30 = JSC::jsNontrivialString(v10, (JSC::VM *)&v58, v24, v25, v26, v27, v28, v29);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, v10, v22, v30, 6, v31, v32, v33, v34);
  v42 = v58;
  v58 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
    {
      WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
      WTF::fastFree(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    else
    {
      *(_DWORD *)v42 -= 2;
    }
  }
  v43 = (*(uint64_t (**)(JSC *))(*((_QWORD *)this + 410) + 144))(this);
  *(_QWORD *)(SlowCase + 16) = v43;
  if (v43 && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
    JSC::Heap::writeBarrierSlowPath(v10 + 192, SlowCase);
  return SlowCase;
}

void JSC::ShadowRealmObject::visitChildren(JSC::ShadowRealmObject *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  JSC::JSObject::visitChildren(this, a2, a3, a4, a5, a6, a7, a8);
  v16 = *((_QWORD *)this + 2);
  if (v16)
  {
    if ((v16 & 8) != 0)
    {
      if ((*(_BYTE *)(v16 - 79) & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v17 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != v17)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000), v17, v10, v11, v12, v13, v14, v15);
      if (((*(_QWORD *)((v16 & 0xFFFFFFFFFFFFC000) + 8 * ((v16 >> 10) & 0xF) + 0x28) >> (v16 >> 4)) & 1) == 0)
        goto LABEL_9;
    }
    if (!*((_QWORD *)a2 + 21))
      return;
LABEL_9:
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v16, 0, v11, v12, v13, v14, v15);
  }
}

uint64_t JSC::ShadowRealmObject::visitChildren(JSC::ShadowRealmObject *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren(this, a2, a3);
    result = (*(uint64_t (**)(JSC::JSCell *, _QWORD))(*(_QWORD *)a2 + 24))(a2, *((_QWORD *)this + 2));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

unint64_t JSC::importInRealm(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t (*v43)(unsigned __int8 **);
  unsigned __int8 **v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t SlowCase;
  WTF::StringImpl *v53[5];
  _DWORD *v54;
  unsigned __int8 *v55[3];

  v10 = *((_QWORD *)this + 7);
  v11 = (unint64_t *)(v10 + 38992);
  v12 = *((_QWORD *)a2 + 6);
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    v13 = 0;
  }
  else if (*(_BYTE *)(v12 + 5) == 58)
  {
    v13 = *((_QWORD *)a2 + 6);
  }
  else
  {
    v13 = 0;
  }
  v14 = *((_DWORD *)this + 291);
  if (v14)
    v15 = 16 * (v14 & 0xFFFFFFFE);
  else
    v15 = 0;
  v16 = *v11;
  if (*v11 < *(_QWORD *)(v10 + 39000))
    goto LABEL_9;
  v16 = *(_QWORD *)(v10 + 39008);
  if ((v16 & 1) == 0)
  {
    v41 = *(_QWORD *)(v16 + 8) ^ *(_QWORD *)(v10 + 39016);
    *(_QWORD *)(v10 + 39000) = v16 + HIDWORD(v41);
    *(_QWORD *)(v10 + 39008) = v16 + (int)v41;
LABEL_9:
    *v11 = v16 + 32;
    goto LABEL_10;
  }
  v48 = v15;
  JSC::sanitizeStackForVM(*((JSC **)this + 7), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 38968, v10 + 192, 32, 0, 0, v49, v50, v51);
  v15 = v48;
  v16 = SlowCase;
LABEL_10:
  *(_DWORD *)v16 = 0;
  v17 = *(_DWORD *)(v15 + 8);
  *(_DWORD *)v16 = v15 >> 4;
  *(_DWORD *)(v16 + 4) = v17;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  *(_OWORD *)(v16 + 16) = xmmword_19914EFB0;
  JSC::CallFrame::callerSourceOrigin(a2, (JSC::VM *)v10, a5, a6, a7, a8, (uint64_t)v53);
  v25 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
  v55[0] = v25;
  if (((unint64_t)v25 & 0xFFFE000000000002) != 0 || v25[5] != 2)
    v25 = JSC::JSValue::toStringSlowCase(v55, (uint64_t)this, (JSC::Structure *)1, v20, v21, v22, v23, v24);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_15;
  v42 = *(_DWORD *)(v10 + 80);
  if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v19, v20, v21, v22, v23, v24);
  if (*(_QWORD *)(v10 + 16))
  {
    v16 = 0;
  }
  else
  {
LABEL_15:
    v26 = (unsigned int *)(v10 + 80);
    v27 = *(_QWORD *)(v13 + 16);
    v28 = *(_QWORD *)(v27 + 648);
    if ((v28 & 1) != 0)
    {
      v43 = *(uint64_t (**)(unsigned __int8 **))(v28 & 0xFFFFFFFFFFFFFFFCLL);
      v44 = (unsigned __int8 **)(v27 & 0xFFFFFFFFFFFFC000 | 8);
      if ((v27 & 8) != 0)
        v44 = (unsigned __int8 **)(v27 - 16);
      v55[0] = *v44;
      v55[1] = (unsigned __int8 *)v27;
      v55[2] = (unsigned __int8 *)(v27 + 648);
      v28 = v43(v55);
    }
    v29 = JSC::JSModuleLoader::importModule(v28, v27, (unint64_t)v25, 10, (uint64_t)v53, v22, v23, v24);
    if (!*v26)
      goto LABEL_17;
    v45 = *(_DWORD *)(v10 + 80);
    if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v19, v20, v21, v22, v23, v24);
    v46 = *(_QWORD *)(v10 + 16);
    if (v46)
    {
      if (*(_QWORD *)(*(_QWORD *)(v27 + 56) + 24) != v46)
      {
        *(_QWORD *)(v10 + 16) = 0;
        do
          v47 = __ldaxr(v26);
        while (__stlxr(v47 & 0xFFFFFFEF, v26));
        JSC::JSPromise::reject(v16, (uint64_t *)v27, *(_QWORD *)(v46 + 8), v20, v21, v22, v23, v24);
      }
    }
    else
    {
LABEL_17:
      JSC::JSPromise::resolve(v16, (uint64_t *)this, v29, v20, v21, v22, v23, v24);
    }
  }
  v30 = v54;
  v54 = 0;
  if (v30)
  {
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
    else
      --v30[2];
  }
  v31 = v53[0];
  v53[0] = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
    {
      WTF::StringImpl::~StringImpl(v31, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v31 -= 2;
    }
  }
  return v16;
}

JSC::Exception *JSC::evalInRealm(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int **v15;
  char v16;
  WTF::AtomStringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  __int128 v26;
  _DWORD *v27;
  int *v28;
  int v29;
  unsigned int *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int8x16_t v38;
  JSC::ErrorInstance *v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t v42;
  unsigned int v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  JSC::Exception *v59;
  JSC::Exception *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t TypeErrorCopy;
  double v73;
  _DWORD *v74;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  WTF::StringImpl *v96;
  __int128 v97;
  __int128 v98;
  _DWORD *v99;
  _DWORD *v100;
  int v101;
  int v102;
  uint64_t v103;
  unint64_t v104;

  v11 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v13 = MEMORY[0x10];
  }
  else
  {
    v12 = *((_QWORD *)a2 + 6);
    if (*(_BYTE *)(v12 + 5) != 58)
      v12 = 0;
    v13 = *(_QWORD *)(v12 + 16);
    if (*((_DWORD *)a2 + 8) != 2)
    {
      v14 = *((_QWORD *)a2 + 7);
      goto LABEL_6;
    }
  }
  v14 = 10;
LABEL_6:
  v15 = (int **)(v14 + 8);
  if ((*(_BYTE *)(v14 + 8) & 1) != 0)
    v15 = JSC::JSRopeString::resolveRope(v14, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v92 = *(_DWORD *)(v11 + 80);
    if ((v92 & 0x27) != 0 && (v92 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v104 = 0;
  if (*(_BYTE *)(v11 + 41452))
  {
    LOBYTE(v100) = 1;
    v96 = (WTF::StringImpl *)&v100;
    JSC::StackVisitor::visit<(JSC::StackVisitor::EmptyEntryFrameAction)0,JSC::computeNewSourceTaintedOriginFromStack(JSC::VM &,JSC::CallFrame *)::$_0>(a2, (JSC::VM *)v11, (_BYTE **)&v96, a4, a5, a6, a7, a8);
    v16 = (char)v100;
  }
  else
  {
    v16 = 0;
  }
  JSC::CallFrame::callerSourceOrigin(a2, (JSC::VM *)v11, a5, a6, a7, a8, (uint64_t)&v96);
  v24 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)(v24 + 8) = 1;
  *(_QWORD *)v24 = off_1E35964B0;
  *(_BYTE *)(v24 + 12) = 0;
  v25 = v96;
  if (v96)
    *(_DWORD *)v96 += 2;
  *(_QWORD *)(v24 + 16) = v25;
  v26 = v98;
  *(_OWORD *)(v24 + 24) = v97;
  *(_OWORD *)(v24 + 40) = v26;
  v27 = v99;
  if (v99)
    ++v99[2];
  *(_QWORD *)(v24 + 56) = v27;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_BYTE *)(v24 + 116) = v16;
  *(_DWORD *)(v24 + 112) = 0;
  *(_QWORD *)v24 = off_1E357C4B0;
  v28 = *v15;
  if (!*v15)
    v28 = &WTF::StringImpl::s_emptyAtomString;
  *v28 += 2;
  *(_QWORD *)(v24 + 120) = v28;
  v100 = (_DWORD *)v24;
  v101 = 0;
  v29 = v28[1];
  v103 = 0;
  v102 = v29;
  v99 = 0;
  if (v27)
  {
    if (v27[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
      v25 = v96;
    }
    else
    {
      --v27[2];
    }
  }
  v96 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, v17, v18, v19, v20, v21, v22, v23);
      WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  v30 = (unsigned int *)(v11 + 80);
  v31 = JSC::IndirectEvalExecutable::create(v13, (JSC::VM *)&v100, 0, 0, 0, &v104, v22, v23);
  v39 = (JSC::ErrorInstance *)v104;
  if (v104)
  {
    if ((v104 & 0xFFFE000000000002) == 0)
    {
      v40 = *(unsigned int *)(16 * (*(_DWORD *)v104 & 0xFFFFFFFE) + 0x4C);
      v41 = *(_DWORD *)(16 * (*(_DWORD *)v104 & 0xFFFFFFFE) + 0x4C) != 0;
      if ((_DWORD)v40)
      {
        v42 = 16 * v40;
        if ((char **)v42 != &JSC::ErrorInstance::s_info)
        {
          do
          {
            v42 = *(_QWORD *)(v42 + 16);
            v41 = v42 != 0;
          }
          while ((char **)v42 != &JSC::ErrorInstance::s_info && v42 != 0);
        }
      }
      if (v41 && *(_BYTE *)(v104 + 58) == 4)
      {
        *(_QWORD *)(v11 + 16) = 0;
        do
          v44 = __ldaxr(v30);
        while (__stlxr(v44 & 0xFFFFFFEF, v30));
        JSC::ErrorInstance::sanitizedMessageString(v39, this, v32, v33, v34, v35, v36, v37, (int **)&v96, v38);
        if (!*v30)
          goto LABEL_37;
        v95 = *(_DWORD *)(v11 + 80);
        if ((v95 & 0x27) != 0 && (v95 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v46, v47, v48, v49, v50, v51);
        if (*(_QWORD *)(v11 + 16))
        {
          v60 = 0;
        }
        else
        {
LABEL_37:
          v52 = JSC::createSyntaxError(this, &v96, 0);
          v59 = (JSC::Exception *)v52;
          if ((v52 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v52 & 0xFFFFFFFE) + 0x4C)))
          {
            v59 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v52, 0, v53, v54, v55, v56, v57);
          }
          v60 = JSC::VM::throwException((JSC::VM *)v11, this, v59, v58, v53, v54, v55, v56, v57);
        }
        v61 = v96;
        v96 = 0;
        if (v61)
        {
          if (*(_DWORD *)v61 == 2)
          {
            WTF::StringImpl::~StringImpl(v61, v45, v46, v47, v48, v49, v50, v51);
            WTF::fastFree(v84, v85, v86, v87, v88, v89, v90, v91);
          }
          else
          {
            *(_DWORD *)v61 -= 2;
          }
        }
        goto LABEL_52;
      }
    }
  }
  else
  {
    v62 = v31;
    if (*v30)
    {
      v94 = *(_DWORD *)(v11 + 80);
      if ((v94 & 0x27) != 0 && (v94 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v32, v33, v34, v35, v36, v37);
      if (*(_QWORD *)(v11 + 16))
        goto LABEL_71;
    }
    v63 = JSC::Interpreter::executeEval((WTF::Thread *)(v11 + 90560), v62, *(JSC::JSGlobalObject **)(v13 + 64), *(const JSC::Identifier **)(v13 + 72), v34, v35, v36, v37, *(double *)v38.i64);
    v64 = *(_QWORD *)(v11 + 16);
    if (!v64)
    {
LABEL_51:
      v60 = (JSC::Exception *)v63;
      goto LABEL_52;
    }
    v39 = *(JSC::ErrorInstance **)(v64 + 8);
    *(_QWORD *)(v11 + 16) = 0;
    do
      v65 = __ldaxr(v30);
    while (__stlxr(v65 & 0xFFFFFFEF, v30));
  }
  TypeErrorCopy = JSC::createTypeErrorCopy((uint64_t)this, (unint64_t)v39);
  if (!*v30)
    goto LABEL_49;
  v93 = *(_DWORD *)(v11 + 80);
  if ((v93 & 0x27) != 0 && (v93 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v66, v67, v68, v69, v70, v71);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_49:
    if ((TypeErrorCopy & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)TypeErrorCopy & 0xFFFFFFFE) + 0x4C)))
    {
      TypeErrorCopy = JSC::Exception::create(v11, (JSC::VM *)TypeErrorCopy, 0, v67, v68, v69, v70, v71);
    }
    v63 = (uint64_t)JSC::VM::throwException((JSC::VM *)v11, this, (JSC::Exception *)TypeErrorCopy, v73, v67, v68, v69, v70, v71);
    goto LABEL_51;
  }
LABEL_71:
  v60 = 0;
LABEL_52:
  v74 = v100;
  v100 = 0;
  if (v74)
  {
    if (v74[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 8))(v74);
    else
      --v74[2];
  }
  return v60;
}

uint64_t JSC::moveFunctionToRealm(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v13;
  _DWORD *v14;
  uint64_t v15;

  v8 = *((_QWORD *)this + 7);
  v9 = *((int *)a2 + 8);
  if (v9 == 1)
  {
    v11 = 0;
  }
  else
  {
    v10 = *((_QWORD *)a2 + 6);
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      v11 = 0;
    }
    else if (*(_BYTE *)(v10 + 5) == 26)
    {
      v11 = (_DWORD *)*((_QWORD *)a2 + 6);
    }
    else
    {
      v11 = 0;
    }
  }
  if (*(_DWORD *)(v8 + 80))
  {
    v13 = *(_DWORD *)(v8 + 80);
    if ((v13 & 0x27) != 0 && (v13 & 0x20) == 0)
    {
      v15 = v8;
      v14 = v11;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v8 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v11 = v14;
      v8 = v15;
    }
    if (*(_QWORD *)(v8 + 16))
      return 0;
  }
  (*(void (**)(void))(16 * *(unsigned int *)(16 * (*v11 & 0xFFFFFFFE) + 0x4C) + 0xA8))();
  return 10;
}

void JSC::SideDataRepository::add(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;

  v14 = *a1;
  if (*a1
    || (WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a1, 8u, 0), (v14 = *a1) != 0))
  {
    v15 = *(_DWORD *)(v14 - 8);
  }
  else
  {
    v15 = 0;
  }
  v16 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  v19 = v15 & ((v18 >> 31) ^ v18);
  v20 = (uint64_t *)(v14 + 16 * v19);
  v21 = *v20;
  if (!*v20)
  {
LABEL_12:
    v24 = v20[1];
    *v20 = a2;
    v20[1] = 0;
    if (v24)
    {
      v25 = *(unsigned int *)(v24 - 4);
      if ((_DWORD)v25)
      {
        v26 = (uint64_t *)(v24 + 8);
        do
        {
          if (*(v26 - 1) != -1)
          {
            v27 = *v26;
            *v26 = 0;
            if (v27)
              (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          }
          v26 += 2;
          --v25;
        }
        while (v25);
      }
      WTF::fastFree(v24 - 16, (void *)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    }
    v28 = *a1;
    if (*a1)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = *a1;
    if (*a1)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_33;
    }
    else
    {
      if (3 * v33 > 4 * v32)
        goto LABEL_33;
      if (!(_DWORD)v33)
      {
        v34 = 8;
        goto LABEL_32;
      }
    }
    v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
LABEL_32:
    v20 = WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(a1, v34, v20);
    goto LABEL_33;
  }
  v22 = 0;
  v23 = 1;
  while (v21 != a2)
  {
    if (v21 == -1)
      v22 = v20;
    v19 = (v19 + v23) & v15;
    v20 = (uint64_t *)(v14 + 16 * v19);
    v21 = *v20;
    ++v23;
    if (!*v20)
    {
      if (v22)
      {
        *v22 = 0;
        v22[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        v20 = v22;
      }
      goto LABEL_12;
    }
  }
LABEL_33:
  v37 = v20[1];
  v36 = v20 + 1;
  v35 = v37;
  if (v37
    || (WTF::HashTable<void *,WTF::KeyValuePair<void *,std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::unique_ptr<JSC::SideDataRepository::SideData>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v36, 8uLL, 0, (uint64_t)a4, a5, a6, a7, a8), (v35 = *v36) != 0))
  {
    v38 = 0;
    v39 = *(_DWORD *)(v35 - 8);
  }
  else
  {
    v39 = 0;
    v38 = 1;
  }
  v40 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  v41 = 9 * ((v40 + ~(v40 << 13)) ^ ((v40 + ~(v40 << 13)) >> 8));
  v42 = (v41 ^ (v41 >> 15)) + ~((v41 ^ (v41 >> 15)) << 27);
  v43 = v39 & ((v42 >> 31) ^ v42);
  v44 = (uint64_t *)(v35 + 16 * v43);
  v45 = *v44;
  if (*v44)
  {
    v46 = 0;
    v47 = 1;
    do
    {
      if (v45 == a3)
      {
        if ((v38 & 1) != 0)
          v52 = 0;
        else
          v52 = *(unsigned int *)(v35 - 4);
        v58 = 0;
        v59 = v35 + 16 * v52;
        goto LABEL_66;
      }
      if (v45 == -1)
        v46 = v44;
      v43 = (v43 + v47) & v39;
      v44 = (uint64_t *)(v35 + 16 * v43);
      v45 = *v44;
      ++v47;
    }
    while (*v44);
    if (v46)
    {
      *v46 = 0;
      v46[1] = 0;
      --*(_DWORD *)(*v36 - 16);
      v44 = v46;
    }
  }
  *v44 = a3;
  v48 = *a4;
  *a4 = 0;
  v49 = v44[1];
  v44[1] = v48;
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  v50 = *v36;
  if (*v36)
    v51 = *(_DWORD *)(v50 - 12) + 1;
  else
    v51 = 1;
  *(_DWORD *)(v50 - 12) = v51;
  v53 = *v36;
  if (*v36)
    v54 = *(_DWORD *)(v53 - 12);
  else
    v54 = 0;
  v55 = (*(_DWORD *)(v53 - 16) + v54);
  v56 = *(unsigned int *)(v53 - 4);
  if (v56 > 0x400)
  {
    if (v56 <= 2 * v55)
      goto LABEL_57;
  }
  else if (3 * v56 <= 4 * v55)
  {
    if (!(_DWORD)v56)
    {
      v57 = 8;
LABEL_62:
      v44 = WTF::HashTable<void *,WTF::KeyValuePair<void *,std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::unique_ptr<JSC::SideDataRepository::SideData>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v36, v57, (uint64_t)v44, (uint64_t)a4, a5, a6, a7, a8);
      v53 = *v36;
      if (*v36)
        v56 = *(unsigned int *)(v53 - 4);
      else
        v56 = 0;
      goto LABEL_65;
    }
LABEL_57:
    v57 = ((_DWORD)v56 << (6 * *(_DWORD *)(v53 - 12) >= (2 * v56)));
    goto LABEL_62;
  }
LABEL_65:
  v59 = v53 + 16 * v56;
  v58 = 1;
LABEL_66:
  *(_QWORD *)a9 = v44;
  *(_QWORD *)(a9 + 8) = v59;
  *(_BYTE *)(a9 + 16) = v58;
}

void JSC::SideDataRepository::deleteAll(JSC::SideDataRepository *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v31;

  v10 = (unsigned __int8 *)this + 8;
  if (__ldaxr((unsigned __int8 *)this + 8))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 8);
LABEL_5:
  v12 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v13 = *(_DWORD *)(v12 - 8);
    v14 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = *(void **)(v12 + 16 * v17);
    if (v18 != a2)
    {
      v19 = 1;
      while (v18)
      {
        v17 = ((_DWORD)v17 + v19) & v13;
        v18 = *(void **)(v12 + 16 * v17);
        ++v19;
        if (v18 == a2)
          goto LABEL_12;
      }
      v17 = *(unsigned int *)(v12 - 4);
    }
LABEL_12:
    if (v17 != *(_DWORD *)(v12 - 4))
    {
      v20 = (_QWORD *)(v12 + 16 * v17);
      *v20 = -1;
      v21 = v20[1];
      if (v21)
      {
        v22 = *(unsigned int *)(v21 - 4);
        if ((_DWORD)v22)
        {
          v23 = (uint64_t *)(v21 + 8);
          do
          {
            if (*(v23 - 1) != -1)
            {
              v24 = *v23;
              *v23 = 0;
              if (v24)
                (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            }
            v23 += 2;
            --v22;
          }
          while (v22);
        }
        WTF::fastFree(v21 - 16, a2, a3, a4, a5, a6, a7, a8);
      }
      ++*(_DWORD *)(*(_QWORD *)this - 16);
      v25 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v26 = *(_DWORD *)(v25 - 12) - 1;
      else
        v26 = -1;
      *(_DWORD *)(v25 - 12) = v26;
      v27 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v28 = 6 * *(_DWORD *)(v27 - 12);
        v29 = *(_DWORD *)(v27 - 4);
        if (v28 < v29 && v29 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash((uint64_t *)this, v29 >> 1, 0);
      }
    }
  }
  v31 = __ldxr(v10);
  if (v31 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, v10))
LABEL_35:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t *JSC::sideDataRepository(JSC *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&_MergedGlobals_49);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&_MergedGlobals_49, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::sideDataRepository(void)::$_0 &&>>);
  }
  return &qword_1ECF58F80;
}

uint64_t JSC::SimpleTypedArrayController::SimpleTypedArrayController(uint64_t this, char a2)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E35AE380;
  *(_QWORD *)(this + 16) = &off_1E35AE3B8;
  *(_BYTE *)(this + 24) = a2;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = off_1E35AE380;
  *(_QWORD *)(this + 16) = &off_1E35AE3B8;
  *(_BYTE *)(this + 24) = a2;
  return this;
}

unint64_t JSC::SimpleTypedArrayController::toJS(JSC::SimpleTypedArrayController *this, JSC::JSGlobalObject *a2, unint64_t a3, JSC::ArrayBuffer *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v31)(JSC::ArrayBuffer **);
  JSC::ArrayBuffer **v32;
  JSC::ArrayBuffer *v33;
  JSC::ArrayBuffer *v34;
  JSC::ArrayBuffer **v35;
  JSC::ArrayBuffer *v36[3];

  v9 = *((_QWORD *)a4 + 10);
  if (v9)
  {
    if ((*(_BYTE *)(v9 + 8) & 3) == 0)
    {
      v20 = *(_QWORD *)v9;
      if (*(_QWORD *)v9)
        return v20;
    }
  }
  v10 = *(_QWORD *)(a3 + 56);
  if (*((_QWORD *)a4 + 4))
    v11 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  else
    v11 = 0;
  if (!v11)
  {
    v12 = *(_QWORD *)(a3 + 1600);
    if ((v12 & 1) == 0)
      goto LABEL_8;
    v31 = *(uint64_t (**)(JSC::ArrayBuffer **))(v12 & 0xFFFFFFFFFFFFFFFCLL);
    v32 = (JSC::ArrayBuffer **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a3 & 8) != 0)
      v32 = (JSC::ArrayBuffer **)(a3 - 16);
    v33 = *v32;
    v34 = (JSC::ArrayBuffer *)(a3 + 1600);
    goto LABEL_16;
  }
  v12 = *(_QWORD *)(a3 + 1144);
  if ((v12 & 1) != 0)
  {
    v31 = *(uint64_t (**)(JSC::ArrayBuffer **))(v12 & 0xFFFFFFFFFFFFFFFCLL);
    v35 = (JSC::ArrayBuffer **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    if ((a3 & 8) != 0)
      v35 = (JSC::ArrayBuffer **)(a3 - 16);
    v33 = *v35;
    v34 = (JSC::ArrayBuffer *)(a3 + 1144);
LABEL_16:
    v36[0] = v33;
    v36[1] = (JSC::ArrayBuffer *)a3;
    v36[2] = v34;
    v12 = v31(v36);
  }
LABEL_8:
  *(_DWORD *)a4 += 2;
  v36[0] = a4;
  v20 = JSC::JSArrayBuffer::create(v10, v12, v36, (uint64_t)a4, a5, a6, a7, a8);
  v21 = *(_DWORD *)a4 == 2;
  *(_DWORD *)a4 -= 2;
  if (v21)
  {
    JSC::ArrayBuffer::~ArrayBuffer(a4, v13, v14, v15, v16, v17, v18, v19);
    WTF::fastFree(v22, v23, v24, v25, v26, v27, v28, v29);
  }
  return v20;
}

void JSC::SimpleTypedArrayController::registerWrapper(JSC::SimpleTypedArrayController *this, JSC::JSGlobalObject *a2, JSC::ArrayBuffer *a3, unint64_t a4)
{
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  if (a4)
  {
    v6 = (char *)this + 16;
    if ((a4 & 8) != 0)
      v7 = (a4 - 112) | 1;
    else
      v7 = a4 & 0xFFFFFFFFFFFFC000;
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v7 + 47);
    else
      v8 = (_QWORD *)(*(_QWORD *)v7 + 32);
    v9 = (unint64_t *)v8[2];
    if (!v9)
    {
      while (1)
      {
        v11 = (_QWORD *)v8[3];
        if (!v11)
          break;
        v8[3] = v11[2];
        v9 = (unint64_t *)v11[4];
        v11[3] = 257;
        v11[4] = 0;
        if (v9)
          goto LABEL_8;
      }
      v12 = v8[6];
      if (!v8[1])
      {
        v13 = *(_QWORD **)(v12 + 488);
        *v8 = v12 + 480;
        v8[1] = v13;
        *v13 = v8;
        *(_QWORD *)(v12 + 488) = v8;
      }
      *(_QWORD *)(v12 + 1072) += 1024;
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x400);
      JSC::WeakBlock::WeakBlock((uint64_t)v14, v7);
      JSC::Heap::didAllocate((JSC::Heap *)(v8[6] + 192), 0x400uLL, v15, v16, v17, v18, v19, v20);
      v21 = v8 + 4;
      v22 = v8[5];
      if (v22)
        v21 = (_QWORD *)(v22 + 16);
      *v21 = v14;
      v8[5] = v14;
      v14[1] = v22;
      v14[2] = 0;
      v9 = (unint64_t *)v14[4];
      v14[3] = 257;
      v14[4] = 0;
    }
LABEL_8:
    v8[2] = *v9;
    *v9 = a4;
    v9[1] = (unint64_t)v6;
    v9[2] = 0;
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_QWORD *)a3 + 10);
  *((_QWORD *)a3 + 10) = v9;
  if (v10)
    *(_QWORD *)(v10 + 8) = 3;
}

uint64_t JSC::SimpleTypedArrayController::isAtomicsWaitAllowedOnCurrentThread(JSC::SimpleTypedArrayController *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t JSC::SimpleTypedArrayController::JSArrayBufferOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  unsigned __int8 *v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;

  if (a5)
  {
    *a5 = "JSArrayBuffer is opaque root";
    a5[1] = 29;
  }
  v6 = *(void **)(*(_QWORD *)a2 + 16);
  v7 = *(_QWORD *)(a4 + 120);
  v8 = *(_QWORD *)(v7 + 48);
  if (v7 + 56 != v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    v10 = ((unint64_t)v6 + ~((_QWORD)v6 << 32)) ^ (((unint64_t)v6 + ~((_QWORD)v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(void **)(v8 + 8 * v14 + 16);
      if (!v15)
        return 0;
      if (v6 == v15)
        goto LABEL_16;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x198BBAECCLL);
      }
    }
  }
  v16 = (unsigned __int8 *)(v7 + 80);
  if (__ldaxr((unsigned __int8 *)(v7 + 80)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v16))
  {
    goto LABEL_13;
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow(v7 + 80);
LABEL_13:
  v18 = WTF::ConcurrentPtrHashSet::containsImpl((WTF::ConcurrentPtrHashSet *)v7, v6);
  v25 = v18;
  v26 = __ldxr(v16);
  if (v26 != 1)
  {
    __clrex();
LABEL_20:
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v16, 0, v19, v20, v21, v22, v23, v24);
    if (v25)
      goto LABEL_16;
    return 0;
  }
  if (__stlxr(0, v16))
    goto LABEL_20;
  if (!v18)
    return 0;
LABEL_16:
  if (*(_BYTE *)(a4 + 131))
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v6);
  return 1;
}

uint64_t JSC::SmallStrings::visitStrongReferences<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  *(_BYTE *)(a1 + 2296) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)a1);
  for (i = 0; i != 2048; i += 8)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 248 + i));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 16));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 24));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 32));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 40));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 48));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 56));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 64));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 72));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 80));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 88));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 96));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 104));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 112));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 120));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 128));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 136));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 144));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 152));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 160));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 168));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 176));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 184));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 192));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 200));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 208));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 216));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 224));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 232));
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 240));
}

void JSC::SmallStrings::visitStrongReferences<JSC::SlotVisitor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  uint64_t i;
  unint64_t v13;
  int v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  int v74;

  *(_BYTE *)(a1 + 2296) = 0;
  v10 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_7;
  if ((v10 & 8) != 0)
  {
    if ((*(_BYTE *)(v10 - 79) & 1) == 0)
      goto LABEL_201;
  }
  else
  {
    v11 = *(_DWORD *)(a2 + 132);
    if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000), v11, a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v10 & 0xFFFFFFFFFFFFC000) + 8 * ((v10 >> 10) & 0xF) + 0x28) >> (v10 >> 4)) & 1) == 0)
      goto LABEL_201;
  }
  if (*(_QWORD *)(a2 + 168))
LABEL_201:
    JSC::SlotVisitor::appendSlow(a2, v10, 0, a4, a5, a6, a7, a8);
LABEL_7:
  for (i = 0; i != 2048; i += 8)
  {
    v13 = *(_QWORD *)(a1 + 248 + i);
    if (!v13)
      continue;
    if ((v13 & 8) != 0)
    {
      if ((*(_BYTE *)(v13 - 79) & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      v14 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v13 & 0xFFFFFFFFFFFFC000 | 0x20) != v14)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v13 & 0xFFFFFFFFFFFFC000), v14, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v13 & 0xFFFFFFFFFFFFC000) + 8 * ((v13 >> 10) & 0xF) + 0x28) >> (v13 >> 4)) & 1) != 0)
      {
LABEL_13:
        if (!*(_QWORD *)(a2 + 168))
          continue;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v13, 0, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a1 + 8);
  if (!v15)
    goto LABEL_23;
  if ((v15 & 8) != 0)
  {
    if ((*(_BYTE *)(v15 - 79) & 1) != 0)
      goto LABEL_22;
  }
  else
  {
    v16 = *(_DWORD *)(a2 + 132);
    if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) != v16)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v15 & 0xFFFFFFFFFFFFC000), v16, a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)((v15 & 0xFFFFFFFFFFFFC000) + 8 * ((v15 >> 10) & 0xF) + 0x28) >> (v15 >> 4)) & 1) != 0)
    {
LABEL_22:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_23;
    }
  }
  JSC::SlotVisitor::appendSlow(a2, v15, 0, a4, a5, a6, a7, a8);
LABEL_23:
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    if ((v17 & 8) != 0)
    {
      if ((*(_BYTE *)(v17 - 79) & 1) != 0)
        goto LABEL_28;
    }
    else
    {
      v18 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != v18)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v17 & 0xFFFFFFFFFFFFC000), v18, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v17 & 0xFFFFFFFFFFFFC000) + 8 * ((v17 >> 10) & 0xF) + 0x28) >> (v17 >> 4)) & 1) != 0)
      {
LABEL_28:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_29;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v17, 0, a4, a5, a6, a7, a8);
  }
LABEL_29:
  v19 = *(_QWORD *)(a1 + 24);
  if (v19)
  {
    if ((v19 & 8) != 0)
    {
      if ((*(_BYTE *)(v19 - 79) & 1) != 0)
        goto LABEL_34;
    }
    else
    {
      v20 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != v20)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000), v20, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v19 & 0xFFFFFFFFFFFFC000) + 8 * ((v19 >> 10) & 0xF) + 0x28) >> (v19 >> 4)) & 1) != 0)
      {
LABEL_34:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_35;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v19, 0, a4, a5, a6, a7, a8);
  }
LABEL_35:
  v21 = *(_QWORD *)(a1 + 32);
  if (v21)
  {
    if ((v21 & 8) != 0)
    {
      if ((*(_BYTE *)(v21 - 79) & 1) != 0)
        goto LABEL_40;
    }
    else
    {
      v22 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 0x20) != v22)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v21 & 0xFFFFFFFFFFFFC000), v22, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v21 & 0xFFFFFFFFFFFFC000) + 8 * ((v21 >> 10) & 0xF) + 0x28) >> (v21 >> 4)) & 1) != 0)
      {
LABEL_40:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_41;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v21, 0, a4, a5, a6, a7, a8);
  }
LABEL_41:
  v23 = *(_QWORD *)(a1 + 40);
  if (v23)
  {
    if ((v23 & 8) != 0)
    {
      if ((*(_BYTE *)(v23 - 79) & 1) != 0)
        goto LABEL_46;
    }
    else
    {
      v24 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v23 & 0xFFFFFFFFFFFFC000 | 0x20) != v24)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v23 & 0xFFFFFFFFFFFFC000), v24, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v23 & 0xFFFFFFFFFFFFC000) + 8 * ((v23 >> 10) & 0xF) + 0x28) >> (v23 >> 4)) & 1) != 0)
      {
LABEL_46:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_47;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v23, 0, a4, a5, a6, a7, a8);
  }
LABEL_47:
  v25 = *(_QWORD *)(a1 + 48);
  if (v25)
  {
    if ((v25 & 8) != 0)
    {
      if ((*(_BYTE *)(v25 - 79) & 1) != 0)
        goto LABEL_52;
    }
    else
    {
      v26 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 0x20) != v26)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000), v26, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v25 & 0xFFFFFFFFFFFFC000) + 8 * ((v25 >> 10) & 0xF) + 0x28) >> (v25 >> 4)) & 1) != 0)
      {
LABEL_52:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_53;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v25, 0, a4, a5, a6, a7, a8);
  }
LABEL_53:
  v27 = *(_QWORD *)(a1 + 56);
  if (v27)
  {
    if ((v27 & 8) != 0)
    {
      if ((*(_BYTE *)(v27 - 79) & 1) != 0)
        goto LABEL_58;
    }
    else
    {
      v28 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v27 & 0xFFFFFFFFFFFFC000 | 0x20) != v28)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v27 & 0xFFFFFFFFFFFFC000), v28, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v27 & 0xFFFFFFFFFFFFC000) + 8 * ((v27 >> 10) & 0xF) + 0x28) >> (v27 >> 4)) & 1) != 0)
      {
LABEL_58:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_59;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v27, 0, a4, a5, a6, a7, a8);
  }
LABEL_59:
  v29 = *(_QWORD *)(a1 + 64);
  if (v29)
  {
    if ((v29 & 8) != 0)
    {
      if ((*(_BYTE *)(v29 - 79) & 1) != 0)
        goto LABEL_64;
    }
    else
    {
      v30 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v29 & 0xFFFFFFFFFFFFC000 | 0x20) != v30)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v29 & 0xFFFFFFFFFFFFC000), v30, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v29 & 0xFFFFFFFFFFFFC000) + 8 * ((v29 >> 10) & 0xF) + 0x28) >> (v29 >> 4)) & 1) != 0)
      {
LABEL_64:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_65;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v29, 0, a4, a5, a6, a7, a8);
  }
LABEL_65:
  v31 = *(_QWORD *)(a1 + 72);
  if (v31)
  {
    if ((v31 & 8) != 0)
    {
      if ((*(_BYTE *)(v31 - 79) & 1) != 0)
        goto LABEL_70;
    }
    else
    {
      v32 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v31 & 0xFFFFFFFFFFFFC000 | 0x20) != v32)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v31 & 0xFFFFFFFFFFFFC000), v32, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v31 & 0xFFFFFFFFFFFFC000) + 8 * ((v31 >> 10) & 0xF) + 0x28) >> (v31 >> 4)) & 1) != 0)
      {
LABEL_70:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_71;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v31, 0, a4, a5, a6, a7, a8);
  }
LABEL_71:
  v33 = *(_QWORD *)(a1 + 80);
  if (v33)
  {
    if ((v33 & 8) != 0)
    {
      if ((*(_BYTE *)(v33 - 79) & 1) != 0)
        goto LABEL_76;
    }
    else
    {
      v34 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v33 & 0xFFFFFFFFFFFFC000 | 0x20) != v34)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v33 & 0xFFFFFFFFFFFFC000), v34, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v33 & 0xFFFFFFFFFFFFC000) + 8 * ((v33 >> 10) & 0xF) + 0x28) >> (v33 >> 4)) & 1) != 0)
      {
LABEL_76:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_77;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v33, 0, a4, a5, a6, a7, a8);
  }
LABEL_77:
  v35 = *(_QWORD *)(a1 + 88);
  if (v35)
  {
    if ((v35 & 8) != 0)
    {
      if ((*(_BYTE *)(v35 - 79) & 1) != 0)
        goto LABEL_82;
    }
    else
    {
      v36 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v35 & 0xFFFFFFFFFFFFC000 | 0x20) != v36)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v35 & 0xFFFFFFFFFFFFC000), v36, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v35 & 0xFFFFFFFFFFFFC000) + 8 * ((v35 >> 10) & 0xF) + 0x28) >> (v35 >> 4)) & 1) != 0)
      {
LABEL_82:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_83;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v35, 0, a4, a5, a6, a7, a8);
  }
LABEL_83:
  v37 = *(_QWORD *)(a1 + 96);
  if (v37)
  {
    if ((v37 & 8) != 0)
    {
      if ((*(_BYTE *)(v37 - 79) & 1) != 0)
        goto LABEL_88;
    }
    else
    {
      v38 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v37 & 0xFFFFFFFFFFFFC000 | 0x20) != v38)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v37 & 0xFFFFFFFFFFFFC000), v38, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v37 & 0xFFFFFFFFFFFFC000) + 8 * ((v37 >> 10) & 0xF) + 0x28) >> (v37 >> 4)) & 1) != 0)
      {
LABEL_88:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_89;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v37, 0, a4, a5, a6, a7, a8);
  }
LABEL_89:
  v39 = *(_QWORD *)(a1 + 104);
  if (v39)
  {
    if ((v39 & 8) != 0)
    {
      if ((*(_BYTE *)(v39 - 79) & 1) != 0)
        goto LABEL_94;
    }
    else
    {
      v40 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v39 & 0xFFFFFFFFFFFFC000 | 0x20) != v40)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v39 & 0xFFFFFFFFFFFFC000), v40, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v39 & 0xFFFFFFFFFFFFC000) + 8 * ((v39 >> 10) & 0xF) + 0x28) >> (v39 >> 4)) & 1) != 0)
      {
LABEL_94:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_95;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v39, 0, a4, a5, a6, a7, a8);
  }
LABEL_95:
  v41 = *(_QWORD *)(a1 + 112);
  if (v41)
  {
    if ((v41 & 8) != 0)
    {
      if ((*(_BYTE *)(v41 - 79) & 1) != 0)
        goto LABEL_100;
    }
    else
    {
      v42 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v41 & 0xFFFFFFFFFFFFC000 | 0x20) != v42)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v41 & 0xFFFFFFFFFFFFC000), v42, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v41 & 0xFFFFFFFFFFFFC000) + 8 * ((v41 >> 10) & 0xF) + 0x28) >> (v41 >> 4)) & 1) != 0)
      {
LABEL_100:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_101;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v41, 0, a4, a5, a6, a7, a8);
  }
LABEL_101:
  v43 = *(_QWORD *)(a1 + 120);
  if (v43)
  {
    if ((v43 & 8) != 0)
    {
      if ((*(_BYTE *)(v43 - 79) & 1) != 0)
        goto LABEL_106;
    }
    else
    {
      v44 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v43 & 0xFFFFFFFFFFFFC000 | 0x20) != v44)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v43 & 0xFFFFFFFFFFFFC000), v44, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v43 & 0xFFFFFFFFFFFFC000) + 8 * ((v43 >> 10) & 0xF) + 0x28) >> (v43 >> 4)) & 1) != 0)
      {
LABEL_106:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_107;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v43, 0, a4, a5, a6, a7, a8);
  }
LABEL_107:
  v45 = *(_QWORD *)(a1 + 128);
  if (v45)
  {
    if ((v45 & 8) != 0)
    {
      if ((*(_BYTE *)(v45 - 79) & 1) != 0)
        goto LABEL_112;
    }
    else
    {
      v46 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v45 & 0xFFFFFFFFFFFFC000 | 0x20) != v46)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v45 & 0xFFFFFFFFFFFFC000), v46, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v45 & 0xFFFFFFFFFFFFC000) + 8 * ((v45 >> 10) & 0xF) + 0x28) >> (v45 >> 4)) & 1) != 0)
      {
LABEL_112:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_113;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v45, 0, a4, a5, a6, a7, a8);
  }
LABEL_113:
  v47 = *(_QWORD *)(a1 + 136);
  if (v47)
  {
    if ((v47 & 8) != 0)
    {
      if ((*(_BYTE *)(v47 - 79) & 1) != 0)
        goto LABEL_118;
    }
    else
    {
      v48 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v47 & 0xFFFFFFFFFFFFC000 | 0x20) != v48)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v47 & 0xFFFFFFFFFFFFC000), v48, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v47 & 0xFFFFFFFFFFFFC000) + 8 * ((v47 >> 10) & 0xF) + 0x28) >> (v47 >> 4)) & 1) != 0)
      {
LABEL_118:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_119;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v47, 0, a4, a5, a6, a7, a8);
  }
LABEL_119:
  v49 = *(_QWORD *)(a1 + 144);
  if (v49)
  {
    if ((v49 & 8) != 0)
    {
      if ((*(_BYTE *)(v49 - 79) & 1) != 0)
        goto LABEL_124;
    }
    else
    {
      v50 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v49 & 0xFFFFFFFFFFFFC000 | 0x20) != v50)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v49 & 0xFFFFFFFFFFFFC000), v50, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v49 & 0xFFFFFFFFFFFFC000) + 8 * ((v49 >> 10) & 0xF) + 0x28) >> (v49 >> 4)) & 1) != 0)
      {
LABEL_124:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_125;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v49, 0, a4, a5, a6, a7, a8);
  }
LABEL_125:
  v51 = *(_QWORD *)(a1 + 152);
  if (v51)
  {
    if ((v51 & 8) != 0)
    {
      if ((*(_BYTE *)(v51 - 79) & 1) != 0)
        goto LABEL_130;
    }
    else
    {
      v52 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v51 & 0xFFFFFFFFFFFFC000 | 0x20) != v52)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v51 & 0xFFFFFFFFFFFFC000), v52, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v51 & 0xFFFFFFFFFFFFC000) + 8 * ((v51 >> 10) & 0xF) + 0x28) >> (v51 >> 4)) & 1) != 0)
      {
LABEL_130:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_131;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v51, 0, a4, a5, a6, a7, a8);
  }
LABEL_131:
  v53 = *(_QWORD *)(a1 + 160);
  if (v53)
  {
    if ((v53 & 8) != 0)
    {
      if ((*(_BYTE *)(v53 - 79) & 1) != 0)
        goto LABEL_136;
    }
    else
    {
      v54 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v53 & 0xFFFFFFFFFFFFC000 | 0x20) != v54)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v53 & 0xFFFFFFFFFFFFC000), v54, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v53 & 0xFFFFFFFFFFFFC000) + 8 * ((v53 >> 10) & 0xF) + 0x28) >> (v53 >> 4)) & 1) != 0)
      {
LABEL_136:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_137;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v53, 0, a4, a5, a6, a7, a8);
  }
LABEL_137:
  v55 = *(_QWORD *)(a1 + 168);
  if (v55)
  {
    if ((v55 & 8) != 0)
    {
      if ((*(_BYTE *)(v55 - 79) & 1) != 0)
        goto LABEL_142;
    }
    else
    {
      v56 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v55 & 0xFFFFFFFFFFFFC000 | 0x20) != v56)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v55 & 0xFFFFFFFFFFFFC000), v56, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v55 & 0xFFFFFFFFFFFFC000) + 8 * ((v55 >> 10) & 0xF) + 0x28) >> (v55 >> 4)) & 1) != 0)
      {
LABEL_142:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_143;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v55, 0, a4, a5, a6, a7, a8);
  }
LABEL_143:
  v57 = *(_QWORD *)(a1 + 176);
  if (v57)
  {
    if ((v57 & 8) != 0)
    {
      if ((*(_BYTE *)(v57 - 79) & 1) != 0)
        goto LABEL_148;
    }
    else
    {
      v58 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v57 & 0xFFFFFFFFFFFFC000 | 0x20) != v58)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v57 & 0xFFFFFFFFFFFFC000), v58, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v57 & 0xFFFFFFFFFFFFC000) + 8 * ((v57 >> 10) & 0xF) + 0x28) >> (v57 >> 4)) & 1) != 0)
      {
LABEL_148:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_149;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v57, 0, a4, a5, a6, a7, a8);
  }
LABEL_149:
  v59 = *(_QWORD *)(a1 + 184);
  if (v59)
  {
    if ((v59 & 8) != 0)
    {
      if ((*(_BYTE *)(v59 - 79) & 1) != 0)
        goto LABEL_154;
    }
    else
    {
      v60 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v59 & 0xFFFFFFFFFFFFC000 | 0x20) != v60)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v59 & 0xFFFFFFFFFFFFC000), v60, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v59 & 0xFFFFFFFFFFFFC000) + 8 * ((v59 >> 10) & 0xF) + 0x28) >> (v59 >> 4)) & 1) != 0)
      {
LABEL_154:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_155;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v59, 0, a4, a5, a6, a7, a8);
  }
LABEL_155:
  v61 = *(_QWORD *)(a1 + 192);
  if (v61)
  {
    if ((v61 & 8) != 0)
    {
      if ((*(_BYTE *)(v61 - 79) & 1) != 0)
        goto LABEL_160;
    }
    else
    {
      v62 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v61 & 0xFFFFFFFFFFFFC000 | 0x20) != v62)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v61 & 0xFFFFFFFFFFFFC000), v62, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v61 & 0xFFFFFFFFFFFFC000) + 8 * ((v61 >> 10) & 0xF) + 0x28) >> (v61 >> 4)) & 1) != 0)
      {
LABEL_160:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_161;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v61, 0, a4, a5, a6, a7, a8);
  }
LABEL_161:
  v63 = *(_QWORD *)(a1 + 200);
  if (v63)
  {
    if ((v63 & 8) != 0)
    {
      if ((*(_BYTE *)(v63 - 79) & 1) != 0)
        goto LABEL_166;
    }
    else
    {
      v64 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v63 & 0xFFFFFFFFFFFFC000 | 0x20) != v64)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v63 & 0xFFFFFFFFFFFFC000), v64, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v63 & 0xFFFFFFFFFFFFC000) + 8 * ((v63 >> 10) & 0xF) + 0x28) >> (v63 >> 4)) & 1) != 0)
      {
LABEL_166:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_167;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v63, 0, a4, a5, a6, a7, a8);
  }
LABEL_167:
  v65 = *(_QWORD *)(a1 + 208);
  if (v65)
  {
    if ((v65 & 8) != 0)
    {
      if ((*(_BYTE *)(v65 - 79) & 1) != 0)
        goto LABEL_172;
    }
    else
    {
      v66 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v65 & 0xFFFFFFFFFFFFC000 | 0x20) != v66)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v65 & 0xFFFFFFFFFFFFC000), v66, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v65 & 0xFFFFFFFFFFFFC000) + 8 * ((v65 >> 10) & 0xF) + 0x28) >> (v65 >> 4)) & 1) != 0)
      {
LABEL_172:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_173;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v65, 0, a4, a5, a6, a7, a8);
  }
LABEL_173:
  v67 = *(_QWORD *)(a1 + 216);
  if (v67)
  {
    if ((v67 & 8) != 0)
    {
      if ((*(_BYTE *)(v67 - 79) & 1) != 0)
        goto LABEL_178;
    }
    else
    {
      v68 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v67 & 0xFFFFFFFFFFFFC000 | 0x20) != v68)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v67 & 0xFFFFFFFFFFFFC000), v68, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v67 & 0xFFFFFFFFFFFFC000) + 8 * ((v67 >> 10) & 0xF) + 0x28) >> (v67 >> 4)) & 1) != 0)
      {
LABEL_178:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_179;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v67, 0, a4, a5, a6, a7, a8);
  }
LABEL_179:
  v69 = *(_QWORD *)(a1 + 224);
  if (v69)
  {
    if ((v69 & 8) != 0)
    {
      if ((*(_BYTE *)(v69 - 79) & 1) != 0)
        goto LABEL_184;
    }
    else
    {
      v70 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v69 & 0xFFFFFFFFFFFFC000 | 0x20) != v70)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v69 & 0xFFFFFFFFFFFFC000), v70, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v69 & 0xFFFFFFFFFFFFC000) + 8 * ((v69 >> 10) & 0xF) + 0x28) >> (v69 >> 4)) & 1) != 0)
      {
LABEL_184:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_185;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v69, 0, a4, a5, a6, a7, a8);
  }
LABEL_185:
  v71 = *(_QWORD *)(a1 + 232);
  if (v71)
  {
    if ((v71 & 8) != 0)
    {
      if ((*(_BYTE *)(v71 - 79) & 1) != 0)
        goto LABEL_190;
    }
    else
    {
      v72 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v71 & 0xFFFFFFFFFFFFC000 | 0x20) != v72)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v71 & 0xFFFFFFFFFFFFC000), v72, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v71 & 0xFFFFFFFFFFFFC000) + 8 * ((v71 >> 10) & 0xF) + 0x28) >> (v71 >> 4)) & 1) != 0)
      {
LABEL_190:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_191;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v71, 0, a4, a5, a6, a7, a8);
  }
LABEL_191:
  v73 = *(_QWORD *)(a1 + 240);
  if (v73)
  {
    if ((v73 & 8) != 0)
    {
      if ((*(_BYTE *)(v73 - 79) & 1) != 0)
        goto LABEL_196;
    }
    else
    {
      v74 = *(_DWORD *)(a2 + 132);
      if (*(_DWORD *)(v73 & 0xFFFFFFFFFFFFC000 | 0x20) != v74)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v73 & 0xFFFFFFFFFFFFC000), v74, a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v73 & 0xFFFFFFFFFFFFC000) + 8 * ((v73 >> 10) & 0xF) + 0x28) >> (v73 >> 4)) & 1) != 0)
      {
LABEL_196:
        if (!*(_QWORD *)(a2 + 168))
          return;
      }
    }
    JSC::SlotVisitor::appendSlow(a2, v73, 0, a4, a5, a6, a7, a8);
  }
}

void JSC::SmallStrings::initializeCommonStrings(JSC::SmallStrings *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v10;
  char *v11;
  char *v12;
  unint64_t SlowCase;
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::AtomStringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::AtomStringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::AtomStringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::AtomStringImpl *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::AtomStringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  WTF::AtomStringImpl *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  WTF::AtomStringImpl *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  WTF::AtomStringImpl *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::AtomStringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  WTF::AtomStringImpl *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  WTF::AtomStringImpl *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  WTF::AtomStringImpl *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  WTF::AtomStringImpl *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  WTF::AtomStringImpl *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  WTF::AtomStringImpl *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  WTF::AtomStringImpl *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  WTF::AtomStringImpl *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  WTF::StringImpl *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  WTF::AtomStringImpl *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  WTF::AtomStringImpl *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  WTF::StringImpl *v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  WTF::AtomStringImpl *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  WTF::StringImpl *v347;
  WTF::StringImpl *v348;
  WTF::StringImpl *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  WTF::AtomStringImpl *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  WTF::StringImpl *v363;
  WTF::StringImpl *v364;
  WTF::StringImpl *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  WTF::AtomStringImpl *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  WTF::StringImpl *v379;
  WTF::StringImpl *v380;
  WTF::StringImpl *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  WTF::AtomStringImpl *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  WTF::StringImpl *v395;
  WTF::StringImpl *v396;
  WTF::StringImpl *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  WTF::AtomStringImpl *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  WTF::StringImpl *v411;
  WTF::StringImpl *v412;
  WTF::StringImpl *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  WTF::AtomStringImpl *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  WTF::StringImpl *v427;
  WTF::StringImpl *v428;
  WTF::StringImpl *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  WTF::AtomStringImpl *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  WTF::StringImpl *v443;
  WTF::StringImpl *v444;
  WTF::StringImpl *v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  WTF::AtomStringImpl *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  WTF::StringImpl *v459;
  WTF::StringImpl *v460;
  WTF::StringImpl *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  WTF::AtomStringImpl *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  WTF::StringImpl *v475;
  WTF::StringImpl *v476;
  WTF::StringImpl *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  WTF::AtomStringImpl *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  WTF::StringImpl *v491;
  WTF::StringImpl *v492;
  WTF::StringImpl *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  WTF::AtomStringImpl *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  WTF::StringImpl *v507;
  WTF::StringImpl *v508;
  unint64_t v509;
  unint64_t v510;
  void *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  void *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  unint64_t v526;
  void *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  unint64_t v534;
  void *v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  unint64_t v542;
  void *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  unint64_t v550;
  void *v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  void *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  unint64_t v566;
  void *v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  unint64_t v574;
  void *v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  void *v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  unint64_t v590;
  void *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  void *v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  void *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  unint64_t v614;
  void *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  unint64_t v622;
  void *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  void *v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  unint64_t v638;
  void *v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  unint64_t v646;
  void *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  void *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  void *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  void *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t v678;
  void *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  void *v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  unint64_t v694;
  void *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unint64_t v702;
  void *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  unint64_t v710;
  void *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  unint64_t v718;
  void *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  void *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  unint64_t v734;
  void *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  void *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  unint64_t v750;
  void *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  unint64_t v758;
  void *v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  void *v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  unint64_t v774;
  void *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  unint64_t v782;
  void *v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  void *v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  void *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  void *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  void *v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  void *v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  void *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  unint64_t v838;
  void *v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  void *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  unint64_t v854;
  void *v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  unint64_t v862;
  void *v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  unint64_t v870;
  void *v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  unint64_t v878;
  void *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  void *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  unint64_t v894;
  void *v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unint64_t v902;
  void *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unint64_t v910;
  void *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  void *v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  unint64_t v926;
  void *v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  unint64_t v934;
  void *v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  void *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  unint64_t v950;
  void *v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  unint64_t v958;
  void *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  unint64_t v966;
  void *v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  unint64_t v974;
  void *v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  unint64_t v982;
  void *v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  unint64_t v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  WTF::StringImpl *v997;
  WTF::StringImpl *v998;
  WTF::StringImpl *v999;

  v10 = (unint64_t *)((char *)a2 + 39696);
  v11 = (char *)a2 + 39672;
  v12 = (char *)a2 + 192;
  SlowCase = *((_QWORD *)a2 + 4962);
  if (SlowCase >= *((_QWORD *)a2 + 4963))
  {
    SlowCase = *((_QWORD *)a2 + 4964);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM(a2, a2, a3, a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, (uint64_t)v12, 16, 0, 0, v994, v995, v996);
      goto LABEL_3;
    }
    v990 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)a2 + 4965);
    *((_QWORD *)a2 + 4963) = SlowCase + HIDWORD(v990);
    *((_QWORD *)a2 + 4964) = SlowCase + (int)v990;
  }
  *v10 = SlowCase + 16;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  WTF::StringImpl::s_emptyAtomString += 2;
  *(_DWORD *)SlowCase = v10[227] >> 4;
  *(_DWORD *)(SlowCase + 4) = 17302016;
  *(_QWORD *)(SlowCase + 8) = &WTF::StringImpl::s_emptyAtomString;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v14 = 0;
  *(_QWORD *)this = SlowCase;
  do
  {
    LOBYTE(v998) = v14;
    WTF::AtomStringImpl::add((uint64_t)&v998, 1uLL, a4, a5, a6, a7, a8, &v999);
    v17 = v999;
    v999 = 0;
    v18 = *v10;
    if (*v10 < v10[1])
      goto LABEL_7;
    v18 = v10[2];
    if ((v18 & 1) == 0)
    {
      v509 = *(_QWORD *)(v18 + 8) ^ v10[3];
      v10[1] = v18 + HIDWORD(v509);
      v10[2] = v18 + (int)v509;
LABEL_7:
      *v10 = v18 + 16;
      goto LABEL_8;
    }
    v997 = v17;
    JSC::sanitizeStackForVM(a2, v15, v16, a4, a5, a6, a7, a8);
    v18 = JSC::LocalAllocator::allocateSlowCase((uint64_t)v11, (uint64_t)v12, 16, 0, 0, v991, v992, v993);
    v17 = v997;
LABEL_8:
    *(_DWORD *)v18 = v10[227] >> 4;
    *(_DWORD *)(v18 + 4) = 17302016;
    *(_QWORD *)(v18 + 8) = v17;
    if (*((_BYTE *)a2 + 755))
      __dmb(0xAu);
    *((_QWORD *)this + v14 + 31) = v18;
    v19 = v999;
    v999 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, v15, v16, a4, a5, a6, a7, a8);
        WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
    ++v14;
  }
  while (v14 != 256);
  WTF::AtomStringImpl::addLiteral((uint64_t)"default", 7uLL, a4, a5, a6, a7, a8, &v998);
  v28 = v998;
  v998 = 0;
  v999 = v28;
  v35 = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v29, v30, v31, v32, v33, v34);
  *((_QWORD *)this + 1) = v35;
  v43 = v999;
  v999 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v750, v751, v752, v753, v754, v755, v756, v757);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  v44 = v998;
  v998 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
    {
      WTF::StringImpl::~StringImpl(v44, v36, v37, v38, v39, v40, v41, v42);
      WTF::fastFree(v510, v511, v512, v513, v514, v515, v516, v517);
    }
    else
    {
      *(_DWORD *)v44 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"BOOLean", 7uLL, v38, v39, v40, v41, v42, &v998);
  v45 = v998;
  v998 = 0;
  v999 = v45;
  *((_QWORD *)this + 2) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v46, v47, v48, v49, v50, v51);
  v59 = v999;
  v999 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v758, v759, v760, v761, v762, v763, v764, v765);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  v60 = v998;
  v998 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
    {
      WTF::StringImpl::~StringImpl(v60, v52, v53, v54, v55, v56, v57, v58);
      WTF::fastFree(v518, v519, v520, v521, v522, v523, v524, v525);
    }
    else
    {
      *(_DWORD *)v60 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"false", 5uLL, v54, v55, v56, v57, v58, &v998);
  v61 = v998;
  v998 = 0;
  v999 = v61;
  *((_QWORD *)this + 3) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v62, v63, v64, v65, v66, v67);
  v75 = v999;
  v999 = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
    {
      WTF::StringImpl::~StringImpl(v75, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v766, v767, v768, v769, v770, v771, v772, v773);
    }
    else
    {
      *(_DWORD *)v75 -= 2;
    }
  }
  v76 = v998;
  v998 = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
    {
      WTF::StringImpl::~StringImpl(v76, v68, v69, v70, v71, v72, v73, v74);
      WTF::fastFree(v526, v527, v528, v529, v530, v531, v532, v533);
    }
    else
    {
      *(_DWORD *)v76 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"function", 8uLL, v70, v71, v72, v73, v74, &v998);
  v77 = v998;
  v998 = 0;
  v999 = v77;
  *((_QWORD *)this + 4) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v78, v79, v80, v81, v82, v83);
  v91 = v999;
  v999 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
    {
      WTF::StringImpl::~StringImpl(v91, v84, v85, v86, v87, v88, v89, v90);
      WTF::fastFree(v774, v775, v776, v777, v778, v779, v780, v781);
    }
    else
    {
      *(_DWORD *)v91 -= 2;
    }
  }
  v92 = v998;
  v998 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, v84, v85, v86, v87, v88, v89, v90);
      WTF::fastFree(v534, v535, v536, v537, v538, v539, v540, v541);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"number", 6uLL, v86, v87, v88, v89, v90, &v998);
  v93 = v998;
  v998 = 0;
  v999 = v93;
  *((_QWORD *)this + 5) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v94, v95, v96, v97, v98, v99);
  v107 = v999;
  v999 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v100, v101, v102, v103, v104, v105, v106);
      WTF::fastFree(v782, v783, v784, v785, v786, v787, v788, v789);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  v108 = v998;
  v998 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v100, v101, v102, v103, v104, v105, v106);
      WTF::fastFree(v542, v543, v544, v545, v546, v547, v548, v549);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"null", 4uLL, v102, v103, v104, v105, v106, &v998);
  v109 = v998;
  v998 = 0;
  v999 = v109;
  *((_QWORD *)this + 6) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v110, v111, v112, v113, v114, v115);
  v123 = v999;
  v999 = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
    {
      WTF::StringImpl::~StringImpl(v123, v116, v117, v118, v119, v120, v121, v122);
      WTF::fastFree(v790, v791, v792, v793, v794, v795, v796, v797);
    }
    else
    {
      *(_DWORD *)v123 -= 2;
    }
  }
  v124 = v998;
  v998 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
    {
      WTF::StringImpl::~StringImpl(v124, v116, v117, v118, v119, v120, v121, v122);
      WTF::fastFree(v550, v551, v552, v553, v554, v555, v556, v557);
    }
    else
    {
      *(_DWORD *)v124 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"object", 6uLL, v118, v119, v120, v121, v122, &v998);
  v125 = v998;
  v998 = 0;
  v999 = v125;
  *((_QWORD *)this + 7) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v126, v127, v128, v129, v130, v131);
  v139 = v999;
  v999 = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
    {
      WTF::StringImpl::~StringImpl(v139, v132, v133, v134, v135, v136, v137, v138);
      WTF::fastFree(v798, v799, v800, v801, v802, v803, v804, v805);
    }
    else
    {
      *(_DWORD *)v139 -= 2;
    }
  }
  v140 = v998;
  v998 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
    {
      WTF::StringImpl::~StringImpl(v140, v132, v133, v134, v135, v136, v137, v138);
      WTF::fastFree(v558, v559, v560, v561, v562, v563, v564, v565);
    }
    else
    {
      *(_DWORD *)v140 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"undefined", 9uLL, v134, v135, v136, v137, v138, &v998);
  v141 = v998;
  v998 = 0;
  v999 = v141;
  *((_QWORD *)this + 8) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v142, v143, v144, v145, v146, v147);
  v155 = v999;
  v999 = 0;
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
    {
      WTF::StringImpl::~StringImpl(v155, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree(v806, v807, v808, v809, v810, v811, v812, v813);
    }
    else
    {
      *(_DWORD *)v155 -= 2;
    }
  }
  v156 = v998;
  v998 = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
    {
      WTF::StringImpl::~StringImpl(v156, v148, v149, v150, v151, v152, v153, v154);
      WTF::fastFree(v566, v567, v568, v569, v570, v571, v572, v573);
    }
    else
    {
      *(_DWORD *)v156 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"string", 6uLL, v150, v151, v152, v153, v154, &v998);
  v157 = v998;
  v998 = 0;
  v999 = v157;
  *((_QWORD *)this + 9) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v158, v159, v160, v161, v162, v163);
  v171 = v999;
  v999 = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
    {
      WTF::StringImpl::~StringImpl(v171, v164, v165, v166, v167, v168, v169, v170);
      WTF::fastFree(v814, v815, v816, v817, v818, v819, v820, v821);
    }
    else
    {
      *(_DWORD *)v171 -= 2;
    }
  }
  v172 = v998;
  v998 = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
    {
      WTF::StringImpl::~StringImpl(v172, v164, v165, v166, v167, v168, v169, v170);
      WTF::fastFree(v574, v575, v576, v577, v578, v579, v580, v581);
    }
    else
    {
      *(_DWORD *)v172 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"symbol", 6uLL, v166, v167, v168, v169, v170, &v998);
  v173 = v998;
  v998 = 0;
  v999 = v173;
  *((_QWORD *)this + 10) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v174, v175, v176, v177, v178, v179);
  v187 = v999;
  v999 = 0;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
    {
      WTF::StringImpl::~StringImpl(v187, v180, v181, v182, v183, v184, v185, v186);
      WTF::fastFree(v822, v823, v824, v825, v826, v827, v828, v829);
    }
    else
    {
      *(_DWORD *)v187 -= 2;
    }
  }
  v188 = v998;
  v998 = 0;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
    {
      WTF::StringImpl::~StringImpl(v188, v180, v181, v182, v183, v184, v185, v186);
      WTF::fastFree(v582, v583, v584, v585, v586, v587, v588, v589);
    }
    else
    {
      *(_DWORD *)v188 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"bigint", 6uLL, v182, v183, v184, v185, v186, &v998);
  v189 = v998;
  v998 = 0;
  v999 = v189;
  *((_QWORD *)this + 11) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v190, v191, v192, v193, v194, v195);
  v203 = v999;
  v999 = 0;
  if (v203)
  {
    if (*(_DWORD *)v203 == 2)
    {
      WTF::StringImpl::~StringImpl(v203, v196, v197, v198, v199, v200, v201, v202);
      WTF::fastFree(v830, v831, v832, v833, v834, v835, v836, v837);
    }
    else
    {
      *(_DWORD *)v203 -= 2;
    }
  }
  v204 = v998;
  v998 = 0;
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
    {
      WTF::StringImpl::~StringImpl(v204, v196, v197, v198, v199, v200, v201, v202);
      WTF::fastFree(v590, v591, v592, v593, v594, v595, v596, v597);
    }
    else
    {
      *(_DWORD *)v204 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"true", 4uLL, v198, v199, v200, v201, v202, &v998);
  v205 = v998;
  v998 = 0;
  v999 = v205;
  *((_QWORD *)this + 12) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v206, v207, v208, v209, v210, v211);
  v219 = v999;
  v999 = 0;
  if (v219)
  {
    if (*(_DWORD *)v219 == 2)
    {
      WTF::StringImpl::~StringImpl(v219, v212, v213, v214, v215, v216, v217, v218);
      WTF::fastFree(v838, v839, v840, v841, v842, v843, v844, v845);
    }
    else
    {
      *(_DWORD *)v219 -= 2;
    }
  }
  v220 = v998;
  v998 = 0;
  if (v220)
  {
    if (*(_DWORD *)v220 == 2)
    {
      WTF::StringImpl::~StringImpl(v220, v212, v213, v214, v215, v216, v217, v218);
      WTF::fastFree(v598, v599, v600, v601, v602, v603, v604, v605);
    }
    else
    {
      *(_DWORD *)v220 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object ", 8uLL, v214, v215, v216, v217, v218, &v998);
  v221 = v998;
  v998 = 0;
  v999 = v221;
  *((_QWORD *)this + 13) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v222, v223, v224, v225, v226, v227);
  v235 = v999;
  v999 = 0;
  if (v235)
  {
    if (*(_DWORD *)v235 == 2)
    {
      WTF::StringImpl::~StringImpl(v235, v228, v229, v230, v231, v232, v233, v234);
      WTF::fastFree(v846, v847, v848, v849, v850, v851, v852, v853);
    }
    else
    {
      *(_DWORD *)v235 -= 2;
    }
  }
  v236 = v998;
  v998 = 0;
  if (v236)
  {
    if (*(_DWORD *)v236 == 2)
    {
      WTF::StringImpl::~StringImpl(v236, v228, v229, v230, v231, v232, v233, v234);
      WTF::fastFree(v606, v607, v608, v609, v610, v611, v612, v613);
    }
    else
    {
      *(_DWORD *)v236 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object Null]", 0xDuLL, v230, v231, v232, v233, v234, &v998);
  v237 = v998;
  v998 = 0;
  v999 = v237;
  *((_QWORD *)this + 14) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v238, v239, v240, v241, v242, v243);
  v251 = v999;
  v999 = 0;
  if (v251)
  {
    if (*(_DWORD *)v251 == 2)
    {
      WTF::StringImpl::~StringImpl(v251, v244, v245, v246, v247, v248, v249, v250);
      WTF::fastFree(v854, v855, v856, v857, v858, v859, v860, v861);
    }
    else
    {
      *(_DWORD *)v251 -= 2;
    }
  }
  v252 = v998;
  v998 = 0;
  if (v252)
  {
    if (*(_DWORD *)v252 == 2)
    {
      WTF::StringImpl::~StringImpl(v252, v244, v245, v246, v247, v248, v249, v250);
      WTF::fastFree(v614, v615, v616, v617, v618, v619, v620, v621);
    }
    else
    {
      *(_DWORD *)v252 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object Undefined]", 0x12uLL, v246, v247, v248, v249, v250, &v998);
  v253 = v998;
  v998 = 0;
  v999 = v253;
  *((_QWORD *)this + 15) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v254, v255, v256, v257, v258, v259);
  v267 = v999;
  v999 = 0;
  if (v267)
  {
    if (*(_DWORD *)v267 == 2)
    {
      WTF::StringImpl::~StringImpl(v267, v260, v261, v262, v263, v264, v265, v266);
      WTF::fastFree(v862, v863, v864, v865, v866, v867, v868, v869);
    }
    else
    {
      *(_DWORD *)v267 -= 2;
    }
  }
  v268 = v998;
  v998 = 0;
  if (v268)
  {
    if (*(_DWORD *)v268 == 2)
    {
      WTF::StringImpl::~StringImpl(v268, v260, v261, v262, v263, v264, v265, v266);
      WTF::fastFree(v622, v623, v624, v625, v626, v627, v628, v629);
    }
    else
    {
      *(_DWORD *)v268 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object Object]", 0xFuLL, v262, v263, v264, v265, v266, &v998);
  v269 = v998;
  v998 = 0;
  v999 = v269;
  *((_QWORD *)this + 16) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v270, v271, v272, v273, v274, v275);
  v283 = v999;
  v999 = 0;
  if (v283)
  {
    if (*(_DWORD *)v283 == 2)
    {
      WTF::StringImpl::~StringImpl(v283, v276, v277, v278, v279, v280, v281, v282);
      WTF::fastFree(v870, v871, v872, v873, v874, v875, v876, v877);
    }
    else
    {
      *(_DWORD *)v283 -= 2;
    }
  }
  v284 = v998;
  v998 = 0;
  if (v284)
  {
    if (*(_DWORD *)v284 == 2)
    {
      WTF::StringImpl::~StringImpl(v284, v276, v277, v278, v279, v280, v281, v282);
      WTF::fastFree(v630, v631, v632, v633, v634, v635, v636, v637);
    }
    else
    {
      *(_DWORD *)v284 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object Array]", 0xEuLL, v278, v279, v280, v281, v282, &v998);
  v285 = v998;
  v998 = 0;
  v999 = v285;
  *((_QWORD *)this + 17) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v286, v287, v288, v289, v290, v291);
  v299 = v999;
  v999 = 0;
  if (v299)
  {
    if (*(_DWORD *)v299 == 2)
    {
      WTF::StringImpl::~StringImpl(v299, v292, v293, v294, v295, v296, v297, v298);
      WTF::fastFree(v878, v879, v880, v881, v882, v883, v884, v885);
    }
    else
    {
      *(_DWORD *)v299 -= 2;
    }
  }
  v300 = v998;
  v998 = 0;
  if (v300)
  {
    if (*(_DWORD *)v300 == 2)
    {
      WTF::StringImpl::~StringImpl(v300, v292, v293, v294, v295, v296, v297, v298);
      WTF::fastFree(v638, v639, v640, v641, v642, v643, v644, v645);
    }
    else
    {
      *(_DWORD *)v300 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object Function]", 0x11uLL, v294, v295, v296, v297, v298, &v998);
  v301 = v998;
  v998 = 0;
  v999 = v301;
  *((_QWORD *)this + 18) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v302, v303, v304, v305, v306, v307);
  v315 = v999;
  v999 = 0;
  if (v315)
  {
    if (*(_DWORD *)v315 == 2)
    {
      WTF::StringImpl::~StringImpl(v315, v308, v309, v310, v311, v312, v313, v314);
      WTF::fastFree(v886, v887, v888, v889, v890, v891, v892, v893);
    }
    else
    {
      *(_DWORD *)v315 -= 2;
    }
  }
  v316 = v998;
  v998 = 0;
  if (v316)
  {
    if (*(_DWORD *)v316 == 2)
    {
      WTF::StringImpl::~StringImpl(v316, v308, v309, v310, v311, v312, v313, v314);
      WTF::fastFree(v646, v647, v648, v649, v650, v651, v652, v653);
    }
    else
    {
      *(_DWORD *)v316 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object Arguments]", 0x12uLL, v310, v311, v312, v313, v314, &v998);
  v317 = v998;
  v998 = 0;
  v999 = v317;
  *((_QWORD *)this + 19) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v318, v319, v320, v321, v322, v323);
  v331 = v999;
  v999 = 0;
  if (v331)
  {
    if (*(_DWORD *)v331 == 2)
    {
      WTF::StringImpl::~StringImpl(v331, v324, v325, v326, v327, v328, v329, v330);
      WTF::fastFree(v894, v895, v896, v897, v898, v899, v900, v901);
    }
    else
    {
      *(_DWORD *)v331 -= 2;
    }
  }
  v332 = v998;
  v998 = 0;
  if (v332)
  {
    if (*(_DWORD *)v332 == 2)
    {
      WTF::StringImpl::~StringImpl(v332, v324, v325, v326, v327, v328, v329, v330);
      WTF::fastFree(v654, v655, v656, v657, v658, v659, v660, v661);
    }
    else
    {
      *(_DWORD *)v332 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object Date]", 0xDuLL, v326, v327, v328, v329, v330, &v998);
  v333 = v998;
  v998 = 0;
  v999 = v333;
  *((_QWORD *)this + 20) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v334, v335, v336, v337, v338, v339);
  v347 = v999;
  v999 = 0;
  if (v347)
  {
    if (*(_DWORD *)v347 == 2)
    {
      WTF::StringImpl::~StringImpl(v347, v340, v341, v342, v343, v344, v345, v346);
      WTF::fastFree(v902, v903, v904, v905, v906, v907, v908, v909);
    }
    else
    {
      *(_DWORD *)v347 -= 2;
    }
  }
  v348 = v998;
  v998 = 0;
  if (v348)
  {
    if (*(_DWORD *)v348 == 2)
    {
      WTF::StringImpl::~StringImpl(v348, v340, v341, v342, v343, v344, v345, v346);
      WTF::fastFree(v662, v663, v664, v665, v666, v667, v668, v669);
    }
    else
    {
      *(_DWORD *)v348 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object RegExp]", 0xFuLL, v342, v343, v344, v345, v346, &v998);
  v349 = v998;
  v998 = 0;
  v999 = v349;
  *((_QWORD *)this + 21) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v350, v351, v352, v353, v354, v355);
  v363 = v999;
  v999 = 0;
  if (v363)
  {
    if (*(_DWORD *)v363 == 2)
    {
      WTF::StringImpl::~StringImpl(v363, v356, v357, v358, v359, v360, v361, v362);
      WTF::fastFree(v910, v911, v912, v913, v914, v915, v916, v917);
    }
    else
    {
      *(_DWORD *)v363 -= 2;
    }
  }
  v364 = v998;
  v998 = 0;
  if (v364)
  {
    if (*(_DWORD *)v364 == 2)
    {
      WTF::StringImpl::~StringImpl(v364, v356, v357, v358, v359, v360, v361, v362);
      WTF::fastFree(v670, v671, v672, v673, v674, v675, v676, v677);
    }
    else
    {
      *(_DWORD *)v364 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object Error]", 0xEuLL, v358, v359, v360, v361, v362, &v998);
  v365 = v998;
  v998 = 0;
  v999 = v365;
  *((_QWORD *)this + 22) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v366, v367, v368, v369, v370, v371);
  v379 = v999;
  v999 = 0;
  if (v379)
  {
    if (*(_DWORD *)v379 == 2)
    {
      WTF::StringImpl::~StringImpl(v379, v372, v373, v374, v375, v376, v377, v378);
      WTF::fastFree(v918, v919, v920, v921, v922, v923, v924, v925);
    }
    else
    {
      *(_DWORD *)v379 -= 2;
    }
  }
  v380 = v998;
  v998 = 0;
  if (v380)
  {
    if (*(_DWORD *)v380 == 2)
    {
      WTF::StringImpl::~StringImpl(v380, v372, v373, v374, v375, v376, v377, v378);
      WTF::fastFree(v678, v679, v680, v681, v682, v683, v684, v685);
    }
    else
    {
      *(_DWORD *)v380 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object Boolean]", 0x10uLL, v374, v375, v376, v377, v378, &v998);
  v381 = v998;
  v998 = 0;
  v999 = v381;
  *((_QWORD *)this + 23) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v382, v383, v384, v385, v386, v387);
  v395 = v999;
  v999 = 0;
  if (v395)
  {
    if (*(_DWORD *)v395 == 2)
    {
      WTF::StringImpl::~StringImpl(v395, v388, v389, v390, v391, v392, v393, v394);
      WTF::fastFree(v926, v927, v928, v929, v930, v931, v932, v933);
    }
    else
    {
      *(_DWORD *)v395 -= 2;
    }
  }
  v396 = v998;
  v998 = 0;
  if (v396)
  {
    if (*(_DWORD *)v396 == 2)
    {
      WTF::StringImpl::~StringImpl(v396, v388, v389, v390, v391, v392, v393, v394);
      WTF::fastFree(v686, v687, v688, v689, v690, v691, v692, v693);
    }
    else
    {
      *(_DWORD *)v396 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object Number]", 0xFuLL, v390, v391, v392, v393, v394, &v998);
  v397 = v998;
  v998 = 0;
  v999 = v397;
  *((_QWORD *)this + 24) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v398, v399, v400, v401, v402, v403);
  v411 = v999;
  v999 = 0;
  if (v411)
  {
    if (*(_DWORD *)v411 == 2)
    {
      WTF::StringImpl::~StringImpl(v411, v404, v405, v406, v407, v408, v409, v410);
      WTF::fastFree(v934, v935, v936, v937, v938, v939, v940, v941);
    }
    else
    {
      *(_DWORD *)v411 -= 2;
    }
  }
  v412 = v998;
  v998 = 0;
  if (v412)
  {
    if (*(_DWORD *)v412 == 2)
    {
      WTF::StringImpl::~StringImpl(v412, v404, v405, v406, v407, v408, v409, v410);
      WTF::fastFree(v694, v695, v696, v697, v698, v699, v700, v701);
    }
    else
    {
      *(_DWORD *)v412 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"[object String]", 0xFuLL, v406, v407, v408, v409, v410, &v998);
  v413 = v998;
  v998 = 0;
  v999 = v413;
  *((_QWORD *)this + 25) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v414, v415, v416, v417, v418, v419);
  v427 = v999;
  v999 = 0;
  if (v427)
  {
    if (*(_DWORD *)v427 == 2)
    {
      WTF::StringImpl::~StringImpl(v427, v420, v421, v422, v423, v424, v425, v426);
      WTF::fastFree(v942, v943, v944, v945, v946, v947, v948, v949);
    }
    else
    {
      *(_DWORD *)v427 -= 2;
    }
  }
  v428 = v998;
  v998 = 0;
  if (v428)
  {
    if (*(_DWORD *)v428 == 2)
    {
      WTF::StringImpl::~StringImpl(v428, v420, v421, v422, v423, v424, v425, v426);
      WTF::fastFree(v702, v703, v704, v705, v706, v707, v708, v709);
    }
    else
    {
      *(_DWORD *)v428 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"bound ", 6uLL, v422, v423, v424, v425, v426, &v998);
  v429 = v998;
  v998 = 0;
  v999 = v429;
  *((_QWORD *)this + 26) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v430, v431, v432, v433, v434, v435);
  v443 = v999;
  v999 = 0;
  if (v443)
  {
    if (*(_DWORD *)v443 == 2)
    {
      WTF::StringImpl::~StringImpl(v443, v436, v437, v438, v439, v440, v441, v442);
      WTF::fastFree(v950, v951, v952, v953, v954, v955, v956, v957);
    }
    else
    {
      *(_DWORD *)v443 -= 2;
    }
  }
  v444 = v998;
  v998 = 0;
  if (v444)
  {
    if (*(_DWORD *)v444 == 2)
    {
      WTF::StringImpl::~StringImpl(v444, v436, v437, v438, v439, v440, v441, v442);
      WTF::fastFree(v710, v711, v712, v713, v714, v715, v716, v717);
    }
    else
    {
      *(_DWORD *)v444 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"not-equal", 9uLL, v438, v439, v440, v441, v442, &v998);
  v445 = v998;
  v998 = 0;
  v999 = v445;
  *((_QWORD *)this + 27) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v446, v447, v448, v449, v450, v451);
  v459 = v999;
  v999 = 0;
  if (v459)
  {
    if (*(_DWORD *)v459 == 2)
    {
      WTF::StringImpl::~StringImpl(v459, v452, v453, v454, v455, v456, v457, v458);
      WTF::fastFree(v958, v959, v960, v961, v962, v963, v964, v965);
    }
    else
    {
      *(_DWORD *)v459 -= 2;
    }
  }
  v460 = v998;
  v998 = 0;
  if (v460)
  {
    if (*(_DWORD *)v460 == 2)
    {
      WTF::StringImpl::~StringImpl(v460, v452, v453, v454, v455, v456, v457, v458);
      WTF::fastFree(v718, v719, v720, v721, v722, v723, v724, v725);
    }
    else
    {
      *(_DWORD *)v460 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"timed-out", 9uLL, v454, v455, v456, v457, v458, &v998);
  v461 = v998;
  v998 = 0;
  v999 = v461;
  *((_QWORD *)this + 28) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v462, v463, v464, v465, v466, v467);
  v475 = v999;
  v999 = 0;
  if (v475)
  {
    if (*(_DWORD *)v475 == 2)
    {
      WTF::StringImpl::~StringImpl(v475, v468, v469, v470, v471, v472, v473, v474);
      WTF::fastFree(v966, v967, v968, v969, v970, v971, v972, v973);
    }
    else
    {
      *(_DWORD *)v475 -= 2;
    }
  }
  v476 = v998;
  v998 = 0;
  if (v476)
  {
    if (*(_DWORD *)v476 == 2)
    {
      WTF::StringImpl::~StringImpl(v476, v468, v469, v470, v471, v472, v473, v474);
      WTF::fastFree(v726, v727, v728, v729, v730, v731, v732, v733);
    }
    else
    {
      *(_DWORD *)v476 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"ok", 2uLL, v470, v471, v472, v473, v474, &v998);
  v477 = v998;
  v998 = 0;
  v999 = v477;
  *((_QWORD *)this + 29) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v478, v479, v480, v481, v482, v483);
  v491 = v999;
  v999 = 0;
  if (v491)
  {
    if (*(_DWORD *)v491 == 2)
    {
      WTF::StringImpl::~StringImpl(v491, v484, v485, v486, v487, v488, v489, v490);
      WTF::fastFree(v974, v975, v976, v977, v978, v979, v980, v981);
    }
    else
    {
      *(_DWORD *)v491 -= 2;
    }
  }
  v492 = v998;
  v998 = 0;
  if (v492)
  {
    if (*(_DWORD *)v492 == 2)
    {
      WTF::StringImpl::~StringImpl(v492, v484, v485, v486, v487, v488, v489, v490);
      WTF::fastFree(v734, v735, v736, v737, v738, v739, v740, v741);
    }
    else
    {
      *(_DWORD *)v492 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"$", 1uLL, v486, v487, v488, v489, v490, &v998);
  v493 = v998;
  v998 = 0;
  v999 = v493;
  *((_QWORD *)this + 30) = JSC::JSString::create((uint64_t)a2, (JSC::VM *)&v999, v494, v495, v496, v497, v498, v499);
  v507 = v999;
  v999 = 0;
  if (v507)
  {
    if (*(_DWORD *)v507 == 2)
    {
      WTF::StringImpl::~StringImpl(v507, v500, v501, v502, v503, v504, v505, v506);
      WTF::fastFree(v982, v983, v984, v985, v986, v987, v988, v989);
    }
    else
    {
      *(_DWORD *)v507 -= 2;
    }
  }
  v508 = v998;
  v998 = 0;
  if (v508)
  {
    if (*(_DWORD *)v508 == 2)
    {
      WTF::StringImpl::~StringImpl(v508, v500, v501, v502, v503, v504, v505, v506);
      WTF::fastFree(v742, v743, v744, v745, v746, v747, v748, v749);
    }
    else
    {
      *(_DWORD *)v508 -= 2;
    }
  }
  *((_BYTE *)this + 2297) = 1;
}

void JSC::SmallStrings::singleCharacterStringRep(JSC::SmallStrings *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  char v12;

  if (*((_BYTE *)this + 2297))
  {
    v9 = *(_QWORD *)(*((_QWORD *)this + a2 + 31) + 8);
    if ((v9 & 1) != 0)
      v10 = 0;
    else
      v10 = *(_DWORD **)(*((_QWORD *)this + a2 + 31) + 8);
    *v10 += 2;
  }
  else
  {
    v12 = a2;
    WTF::AtomStringImpl::add((uint64_t)&v12, 1uLL, a3, a4, a5, a6, a7, &v11);
    v9 = v11;
  }
  *a8 = v9;
}

void JSC::SimpleTypedArrayController::JSArrayBufferOwner::~JSArrayBufferOwner(JSC::SimpleTypedArrayController::JSArrayBufferOwner *this)
{
  JUMPOUT(0x19AEBAEF0);
}

unint64_t JSC::createSetIteratorObject(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSCell *v8;
  JSC::VM *v10;
  int v11;
  unint64_t v12;
  JSC::Heap **v13;
  JSC::Heap *v14;
  unint64_t SlowCase;
  int v16;
  unint64_t NotAnObjectError;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  JSC::Heap **v25;
  uint64_t v26;
  unint64_t v27;
  JSC::Heap *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  JSC::VM *v33;

  v8 = (JSC::JSCell *)a2;
  v10 = *(JSC::VM **)(a1 + 56);
  v33 = v10;
  if ((a2 & 0xFFFE000000000002) != 0)
  {
    NotAnObjectError = JSC::createNotAnObjectError(a1, a2);
    JSC::VM::throwException(v10, (JSC::JSGlobalObject *)a1, NotAnObjectError, v19, v20, v21, v22, v23);
LABEL_20:
    v8 = 0;
    goto LABEL_4;
  }
  if (!a2 || *(_BYTE *)(a2 + 5) != 70)
  {
    JSC::throwTypeError(a1, &v33, (uint64_t)"Set operation called on non-Set object", 39);
    goto LABEL_20;
  }
LABEL_4:
  if (*((_DWORD *)v10 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v10, a2, a3, a4, a5, a6, a7, a8))
    return 10;
  v11 = *(_DWORD *)(a1 + 1008);
  if (v11)
    v12 = 16 * (v11 & 0xFFFFFFFE);
  else
    v12 = 0;
  v13 = *(JSC::Heap ***)(a1 + 56);
  v14 = v13[5092];
  if (!v14)
  {
    v25 = *(JSC::Heap ***)(a1 + 56);
    v14 = JSC::GCClient::Heap::setIteratorSpaceSlow(v13 + 4694);
    v13 = v25;
  }
  SlowCase = *((_QWORD *)v14 + 3);
  if (SlowCase >= *((_QWORD *)v14 + 4))
  {
    SlowCase = *((_QWORD *)v14 + 5);
    if ((SlowCase & 1) != 0)
    {
      v26 = (uint64_t)(v13 + 24);
      v27 = v12;
      v28 = v14;
      JSC::sanitizeStackForVM((JSC *)v13, (JSC::VM *)a2, a3, a4, a5, a6, a7, a8);
      v29 = (uint64_t)v28;
      v12 = v27;
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v29, v26, 48, 0, 0, v30, v31, v32);
      goto LABEL_12;
    }
    v24 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)v14 + 6);
    *((_QWORD *)v14 + 4) = SlowCase + HIDWORD(v24);
    *((_QWORD *)v14 + 5) = SlowCase + (int)v24;
  }
  *((_QWORD *)v14 + 3) = SlowCase + 48;
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  v16 = *(_DWORD *)(v12 + 8);
  *(_DWORD *)SlowCase = v12 >> 4;
  *(_DWORD *)(SlowCase + 4) = v16;
  *(_QWORD *)(SlowCase + 40) = 0;
  *(_OWORD *)(SlowCase + 24) = 0u;
  *(_OWORD *)(SlowCase + 8) = 0u;
  JSC::JSSetIterator::finishCreation((JSC::JSCell *)SlowCase, (JSC::JSGlobalObject *)a1, (uint64_t)v8, 2, a5, a6, a7, a8);
  return SlowCase;
}

_QWORD *WTF::HashTable<void *,WTF::KeyValuePair<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v15 = v7;
  v16 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 16 * a2);
  *a1 = v16;
  *(_DWORD *)(v15 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (!v5)
  {
    v18 = 0;
    if (!v4)
      return v18;
    goto LABEL_43;
  }
  v17 = 0;
  v18 = 0;
  v19 = v5;
  do
  {
    v20 = (uint64_t *)(v4 + 16 * v17);
    v21 = *v20;
    if (*v20 != -1)
    {
      if (v21)
      {
        v26 = *a1;
        if (*a1)
          v27 = *(_DWORD *)(v26 - 8);
        else
          v27 = 0;
        v28 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
        v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
        v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
        v31 = v27 & ((v30 >> 31) ^ v30);
        v32 = 1;
        do
        {
          v33 = v31;
          v34 = *(_QWORD *)(v26 + 16 * v31);
          v31 = (v31 + v32++) & v27;
        }
        while (v34);
        v35 = (_QWORD *)(v26 + 16 * v33);
        v37 = v35 + 1;
        v36 = v35[1];
        if (v36)
        {
          v38 = *(unsigned int *)(v36 - 4);
          if ((_DWORD)v38)
          {
            v39 = (uint64_t *)(v36 + 8);
            do
            {
              if (*(v39 - 1) != -1)
              {
                v40 = *v39;
                *v39 = 0;
                if (v40)
                  (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
              }
              v39 += 2;
              --v38;
            }
            while (v38);
          }
          WTF::fastFree(v36 - 16, v8, v9, v10, v11, v12, v13, v14);
          v21 = *v20;
        }
        *v35 = v21;
        v41 = v4 + 16 * v17;
        *v37 = 0;
        v42 = *(_QWORD *)(v41 + 8);
        *(_QWORD *)(v41 + 8) = 0;
        *v37 = v42;
        v43 = *(_QWORD *)(v41 + 8);
        if (v43)
        {
          v44 = *(unsigned int *)(v43 - 4);
          if ((_DWORD)v44)
          {
            v45 = (uint64_t *)(v43 + 8);
            do
            {
              if (*(v45 - 1) != -1)
              {
                v46 = *v45;
                *v45 = 0;
                if (v46)
                  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
              }
              v45 += 2;
              --v44;
            }
            while (v44);
          }
          WTF::fastFree(v43 - 16, v8, v9, v10, v11, v12, v13, v14);
        }
        if (v20 == a3)
          v18 = v35;
      }
      else
      {
        v22 = *(_QWORD *)(v4 + 16 * v17 + 8);
        if (v22)
        {
          v23 = *(unsigned int *)(v22 - 4);
          if ((_DWORD)v23)
          {
            v24 = (uint64_t *)(v22 + 8);
            do
            {
              if (*(v24 - 1) != -1)
              {
                v25 = *v24;
                *v24 = 0;
                if (v25)
                  (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
              }
              v24 += 2;
              --v23;
            }
            while (v23);
          }
          WTF::fastFree(v22 - 16, v8, v9, v10, v11, v12, v13, v14);
        }
      }
    }
    ++v17;
  }
  while (v17 != v19);
  if (v4)
LABEL_43:
    WTF::fastFree(v4 - 16, v8, v9, v10, v11, v12, v13, v14);
  return v18;
}

uint64_t *WTF::HashTable<void *,WTF::KeyValuePair<void *,std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,std::unique_ptr<JSC::SideDataRepository::SideData>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,std::unique_ptr<JSC::SideDataRepository::SideData>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<std::unique_ptr<JSC::SideDataRepository::SideData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *result;

  v9 = a2;
  v11 = *a1;
  if (*a1)
  {
    v12 = *(_DWORD *)(v11 - 4);
    v13 = *(_DWORD *)(v11 - 12);
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v14 = WTF::fastZeroedMalloc(16 * a2 + 16, a2, a3, a4, a5, a6, a7, a8);
  *a1 = v14 + 16;
  *(_DWORD *)(v14 + 12) = v9;
  *(_DWORD *)(*a1 - 8) = v9 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v13;
  if (v12)
  {
    v22 = 0;
    v23 = 0;
    do
    {
      v24 = (uint64_t *)(v11 + 16 * v22);
      v25 = *v24;
      if (*v24 != -1)
      {
        if (v25)
        {
          v28 = *a1;
          if (*a1)
            v29 = *(_DWORD *)(v28 - 8);
          else
            v29 = 0;
          v30 = (~(v25 << 32) + v25) ^ ((unint64_t)(~(v25 << 32) + v25) >> 22);
          v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
          v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
          v33 = v29 & ((v32 >> 31) ^ v32);
          v34 = 1;
          do
          {
            v35 = v33;
            v36 = *(_QWORD *)(v28 + 16 * v33);
            v33 = (v33 + v34++) & v29;
          }
          while (v36);
          v37 = (uint64_t *)(v28 + 16 * v35);
          v38 = v37[1];
          v37[1] = 0;
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          *v37 = *v24;
          v39 = v11 + 16 * v22;
          v40 = *(_QWORD *)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          v37[1] = v40;
          v41 = *(_QWORD *)(v39 + 8);
          *(_QWORD *)(v39 + 8) = 0;
          if (v41)
            (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
          if (v24 == (uint64_t *)a3)
            v23 = v37;
        }
        else
        {
          v26 = v11 + 16 * v22;
          v27 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
      }
      ++v22;
    }
    while (v22 != v12);
  }
  else
  {
    v23 = 0;
    result = 0;
    if (!v11)
      return result;
  }
  WTF::fastFree(v11 - 16, v15, v16, v17, v18, v19, v20, v21);
  return v23;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<JSC::sideDataRepository(void)::$_0 &&>>()
{
  qword_1ECF58F80 = 0;
  *(_QWORD *)algn_1ECF58F88 = 0;
}

void JSC::SparseArrayValueMap::destroy(JSC::SparseArrayValueMap *this, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *((_QWORD *)this + 1);
  if (v8)
    WTF::fastFree(v8 - 16, a2, a3, a4, a5, a6, a7, a8);
}

void JSC::SparseArrayValueMap::visitChildren(JSC::SparseArrayValueMap *this, JSC::JSCell *a2, JSC::SlotVisitor *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  int v22;
  _QWORD *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v10 = *(_DWORD *)this & 0xFFFFFFFE;
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 0)
  {
    v11 = *((_DWORD *)a2 + 33);
    if (*(_DWORD *)((16 * v10) & 0xFFFFFC000 | 0x20) != v11)
      JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)((16 * v10) & 0xFFFFFC000), v11, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (((*(_QWORD *)(((16 * v10) & 0xFFFFFC000) + 8 * ((v10 >> 6) & 0xF) + 0x28) >> (v10 & 0x3E)) & 1) == 0
      || *((_QWORD *)a2 + 21))
    {
      JSC::SlotVisitor::appendSlow((uint64_t)a2, 16 * v10, 0, a4, a5, a6, a7, a8);
    }
  }
  v12 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v13 = *v12;
    if ((v13 & 0x40) != 0)
      break;
    v14 = __ldaxr(v12);
    if (v14 == v13)
    {
      if (!__stxr(v13 | 0x40, v12))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_13:
  v15 = *((_QWORD *)this + 1);
  if (!v15)
  {
    v16 = 0;
    LODWORD(v17) = 0;
LABEL_15:
    v18 = (_QWORD *)(v15 + 24 * v17);
    goto LABEL_16;
  }
  v17 = *(unsigned int *)(v15 - 4);
  v18 = (_QWORD *)(v15 + 24 * v17);
  if (!*(_DWORD *)(v15 - 12))
  {
    v16 = (_QWORD *)(v15 + 24 * v17);
    goto LABEL_15;
  }
  v16 = (_QWORD *)*((_QWORD *)this + 1);
  if ((_DWORD)v17)
  {
    v26 = 24 * v17;
    v16 = (_QWORD *)*((_QWORD *)this + 1);
    while (*v16 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v16 += 3;
      v26 -= 24;
      if (!v26)
      {
        v16 = v18;
        break;
      }
    }
  }
LABEL_16:
  if (v15)
    v19 = (_QWORD *)(v15 + 24 * *(unsigned int *)(v15 - 4));
  else
    v19 = 0;
  if (v19 != v16)
  {
    while (1)
    {
      v20 = v16[1];
      if ((v20 & 0xFFFE000000000002) == 0 && v20 != 0)
        break;
LABEL_28:
      v23 = v16 + 3;
      v16 = v18;
      if (v23 != v18)
      {
        v16 = v23;
        do
        {
          if (*v16 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_33;
          v16 += 3;
        }
        while (v16 != v18);
        v16 = v18;
      }
LABEL_33:
      if (v16 == v19)
        goto LABEL_34;
    }
    if ((v20 & 8) != 0)
    {
      if ((*(_BYTE *)(v20 - 79) & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v22 = *((_DWORD *)a2 + 33);
      if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != v22)
        JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000), v22, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (((*(_QWORD *)((v20 & 0xFFFFFFFFFFFFC000) + 8 * ((v20 >> 10) & 0xF) + 0x28) >> (v20 >> 4)) & 1) != 0)
      {
LABEL_27:
        if (!*((_QWORD *)a2 + 21))
          goto LABEL_28;
      }
    }
    JSC::SlotVisitor::appendSlow((uint64_t)a2, v20, 0, a4, a5, a6, a7, a8);
    goto LABEL_28;
  }
LABEL_34:
  while (1)
  {
    v24 = *v12;
    if ((v24 & 0xC0) != 0x40)
      break;
    v25 = __ldxr(v12);
    if (v25 == v24)
    {
      if (!__stxr(v24 & 0xBF, v12))
        goto LABEL_50;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_50:
  if (*((_BYTE *)a2 + 184))
  {
    v27 = 3 * *((_QWORD *)this + 3);
    *((_QWORD *)a2 + 18) += 24 * *((_QWORD *)this + 3);
    v28 = *((_QWORD *)a2 + 20);
    v29 = __CFADD__(v28, 8 * v27);
    v30 = v28 + 8 * v27;
    if (v29)
      *((_BYTE *)a2 + 152) = 1;
    else
      *((_QWORD *)a2 + 20) = v30;
  }
}

uint64_t JSC::SparseArrayValueMap::visitChildren(JSC::SparseArrayValueMap *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  int v21;
  uint64_t result;
  _QWORD v23[2];
  uint64_t v24;
  char v25;
  _QWORD v26[2];
  _QWORD *v27;
  char v28;

  v23[0] = a2;
  v23[1] = this;
  v25 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v24 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x198BBDE08);
  }
  v26[0] = a2;
  v26[1] = this;
  v28 = 0;
  v27 = v23;
  *((_QWORD *)a2 + 11) = v26;
  v6 = (unsigned __int8 *)this + 4;
  (*(void (**)(JSC::JSCell *, uint64_t, JSC::AbstractSlotVisitor *))(*(_QWORD *)a2 + 24))(a2, 16 * (*(_DWORD *)this & 0xFFFFFFFE), a3);
  *(_QWORD *)(v26[0] + 88) = v27;
  while (1)
  {
    v7 = *v6;
    if ((v7 & 0x40) != 0)
      break;
    v8 = __ldaxr(v6);
    if (v8 == v7)
    {
      if (!__stxr(v7 | 0x40, v6))
        goto LABEL_10;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_10:
  v9 = (_QWORD *)*((_QWORD *)this + 1);
  v10 = WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::begin(v9);
  v17 = v10;
  v19 = v18;
  if (v9)
    v9 += 3 * *((unsigned int *)v9 - 1);
  if (v9 != v10)
  {
    do
    {
      if ((v17[1] & 0xFFFE000000000002) == 0)
        (*(void (**)(JSC::JSCell *))(*(_QWORD *)a2 + 24))(a2);
      while (1)
      {
        v17 += 3;
        if (v17 == v19)
          break;
        if (*v17 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_17;
      }
      v17 = v19;
LABEL_17:
      ;
    }
    while (v17 != v9);
  }
  while (1)
  {
    v20 = *v6;
    if ((v20 & 0xC0) != 0x40)
      break;
    v21 = __ldxr(v6);
    if (v21 == v20)
    {
      if (!__stxr(v20 & 0xBF, v6))
        goto LABEL_27;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow((unsigned __int8 *)this + 4, 0, v11, v12, v13, v14, v15, v16);
LABEL_27:
  result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 24 * *((_QWORD *)this + 3));
  *(_QWORD *)(v23[0] + 88) = v24;
  return result;
}

unint64_t JSC::SparseArrayValueMap::create(JSC::SparseArrayValueMap *this, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  unint64_t SlowCase;
  unint64_t v10;
  int v11;
  unint64_t v13;
  char *v14;
  char *v15;
  JSC::SparseArrayValueMap *v16;

  v8 = (_QWORD *)((char *)this + 39608);
  SlowCase = *((_QWORD *)this + 4951);
  if (SlowCase < *((_QWORD *)this + 4952))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4953);
  if ((SlowCase & 1) == 0)
  {
    v13 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4954);
    *((_QWORD *)this + 4952) = SlowCase + HIDWORD(v13);
    *((_QWORD *)this + 4953) = SlowCase + (int)v13;
LABEL_2:
    *v8 = SlowCase + 32;
    goto LABEL_3;
  }
  v14 = (char *)this + 39584;
  v15 = (char *)this + 192;
  v16 = this;
  JSC::sanitizeStackForVM(this, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v14, v15, 32, 0, 0);
  this = v16;
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v10 = v8[261];
  v11 = *(_DWORD *)(v10 + 8);
  *(_DWORD *)SlowCase = v10 >> 4;
  *(_DWORD *)(SlowCase + 4) = v11;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_DWORD *)(SlowCase + 16) = 0;
  *(_QWORD *)(SlowCase + 24) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  return SlowCase;
}

uint64_t JSC::SparseArrayValueMap::createStructure(unint64_t *a1, JSC::VM *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unint64_t *v12;
  unint64_t SlowCase;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = a1 + 5017;
  v19 = 0x2000000;
  if ((a3 & 0xFFFE000000000002) == 0 && a3 && *(unsigned __int8 *)(a3 + 5) >= 0x17u)
    JSC::JSObject::didBecomePrototype(a3, (JSC::VM *)a1, a9, a3, a4, a5, a6, a7, a8);
  SlowCase = *v12;
  if (*v12 < v12[1])
    goto LABEL_6;
  SlowCase = v12[2];
  if ((SlowCase & 1) == 0)
  {
    v15 = *(_QWORD *)(SlowCase + 8) ^ v12[3];
    v12[1] = SlowCase + HIDWORD(v15);
    v12[2] = SlowCase + (int)v15;
LABEL_6:
    *v12 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
  SlowCase = JSC::LocalAllocator::allocateSlowCase((uint64_t)(a1 + 5014), (uint64_t)(a1 + 24), 128, 0, 0, v16, v17, v18);
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  result = JSC::Structure::Structure(SlowCase, (uint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v19, (unint64_t)&JSC::SparseArrayValueMap::s_info, 0, 0);
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

void JSC::SparseArrayValueMap::add(JSC::SparseArrayValueMap *this@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  char v29;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  v8 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v9 = *v8;
    if ((v9 & 0x40) != 0)
      break;
    v10 = __ldaxr(v8);
    if (v10 == v9)
    {
      if (!__stxr(v9 | 0x40, v8))
        goto LABEL_6;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_6:
  v27 = a3;
  v26 = 0;
  v25 = 10;
  WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::add<JSC::SparseArrayEntry>((uint64_t *)this + 1, &v27, (uint64_t)&v25, (uint64_t)&v28);
  *(_OWORD *)a4 = v28;
  *(_BYTE *)(a4 + 16) = v29;
  v17 = *((_QWORD *)this + 1);
  if (v17 && (v18 = *(unsigned int *)(v17 - 4), v19 = *((_QWORD *)this + 3), v20 = v18 - v19, v18 > v19))
    *((_QWORD *)this + 3) = v18;
  else
    v20 = 0;
  while (1)
  {
    v21 = *v8;
    if ((v21 & 0xC0) != 0x40)
      break;
    v22 = __ldxr(v8);
    if (v22 == v21)
    {
      if (!__stxr(v21 & 0xBF, v8))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v8, 0, v11, v12, v13, v14, v15, v16);
LABEL_13:
  if (v20)
  {
    if (a2)
    {
      v23 = (_QWORD *)(a2 & 0xFFFFFFFFFFFFC000 | 8);
      if ((a2 & 8) != 0)
        v23 = (_QWORD *)(a2 - 16);
      v24 = *v23 + 192;
    }
    else
    {
      v24 = 0;
    }
    if (24 * v20 >= 0x101)
      JSC::Heap::reportExtraMemoryAllocatedSlowCase(v24, 0, a2, 24 * v20, v13, v14, v15, v16);
  }
}

uint64_t *WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::add<JSC::SparseArrayEntry>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  unsigned int v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16 != -1)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v29 = 0;
        else
          v29 = *(_DWORD *)(v8 - 4);
        v28 = 0;
        v27 = v8 + 24 * v29;
        goto LABEL_18;
      }
      if (v17 == -2)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16 != -1);
    if (v18)
    {
      *(_OWORD *)v18 = xmmword_1991593B0;
      v18[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *(_QWORD *)a3;
  *((_DWORD *)v16 + 4) = *(_DWORD *)(a3 + 8);
  v16[1] = v20;
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_17;
    goto LABEL_25;
  }
  if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v30 = 8;
LABEL_30:
      result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v6, v30, v16);
      v16 = result;
      v23 = *v6;
      if (*v6)
        LODWORD(v26) = *(_DWORD *)(v23 - 4);
      else
        LODWORD(v26) = 0;
      goto LABEL_17;
    }
LABEL_25:
    v30 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_30;
  }
LABEL_17:
  v27 = v23 + 24 * v26;
  v28 = 1;
LABEL_18:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

void JSC::SparseArrayValueMap::remove(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  int v24;

  v10 = (unsigned __int8 *)(a1 + 4);
  while (1)
  {
    v11 = *v10;
    if ((v11 & 0x40) != 0)
      break;
    v12 = __ldaxr(v10);
    if (v12 == v11)
    {
      if (!__stxr(v11 | 0x40, v10))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow(a1 + 4);
LABEL_8:
  v15 = *(_QWORD *)(a1 + 8);
  v14 = (uint64_t *)(a1 + 8);
  v13 = v15;
  if (v15)
  {
    v16 = (_QWORD *)(v13 + 24 * *(unsigned int *)(v13 - 4));
    if (v16 == a2)
      goto LABEL_21;
  }
  else
  {
    if (!a2)
      goto LABEL_21;
    v16 = 0;
  }
  if (v16 != a2)
  {
    *a2 = -2;
    ++*(_DWORD *)(*v14 - 16);
    v17 = *v14;
    v18 = *v14 ? *(_DWORD *)(v17 - 12) - 1 : -1;
    *(_DWORD *)(v17 - 12) = v18;
    v19 = *v14;
    if (*v14)
    {
      v20 = 6 * *(_DWORD *)(v19 - 12);
      v21 = *(_DWORD *)(v19 - 4);
      if (v20 < v21 && v21 >= 9)
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v14, v21 >> 1, 0);
    }
  }
LABEL_21:
  while (1)
  {
    v23 = *v10;
    if ((v23 & 0xC0) != 0x40)
      break;
    v24 = __ldxr(v10);
    if (v24 == v23)
    {
      if (!__stxr(v23 & 0xBF, v10))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

void JSC::SparseArrayValueMap::remove(JSC::SparseArrayValueMap *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  int v30;
  int v31;

  v10 = (unsigned __int8 *)this + 4;
  while (1)
  {
    v11 = *v10;
    if ((v11 & 0x40) != 0)
      break;
    v12 = __ldaxr(v10);
    if (v12 == v11)
    {
      if (!__stxr(v11 | 0x40, v10))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)this + 4);
LABEL_8:
  v15 = *((_QWORD *)this + 1);
  v14 = (uint64_t *)((char *)this + 8);
  v13 = v15;
  if (!v15)
    goto LABEL_26;
  v16 = *(_DWORD *)(v13 - 8);
  v17 = ~((unint64_t)a2 << 32) + a2;
  v18 = (v17 ^ (v17 >> 22)) + ~((v17 ^ (v17 >> 22)) << 13);
  v19 = (9 * (v18 ^ (v18 >> 8))) ^ ((9 * (v18 ^ (v18 >> 8))) >> 15);
  v20 = v16 & (((v19 + ~(v19 << 27)) >> 31) ^ (v19 + ~((_DWORD)v19 << 27)));
  v21 = (uint64_t *)(v13 + 24 * v20);
  v22 = *v21;
  if (*v21 != a2)
  {
    v23 = 1;
    while (v22 != -1)
    {
      v20 = (v20 + v23) & v16;
      v21 = (uint64_t *)(v13 + 24 * v20);
      v22 = *v21;
      ++v23;
      if (*v21 == a2)
        goto LABEL_15;
    }
    v21 = (uint64_t *)(v13 + 24 * *(unsigned int *)(v13 - 4));
  }
LABEL_15:
  if ((uint64_t *)(v13 + 24 * *(unsigned int *)(v13 - 4)) != v21)
  {
    *v21 = -2;
    ++*(_DWORD *)(*v14 - 16);
    v24 = *v14;
    v25 = *v14 ? *(_DWORD *)(v24 - 12) - 1 : -1;
    *(_DWORD *)(v24 - 12) = v25;
    v26 = *v14;
    if (*v14)
    {
      v27 = 6 * *(_DWORD *)(v26 - 12);
      v28 = *(_DWORD *)(v26 - 4);
      if (v27 < v28 && v28 >= 9)
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,JSC::SparseArrayEntry>>,WTF::IntHash<unsigned long long>,WTF::HashMap<unsigned long long,JSC::SparseArrayEntry,WTF::IntHash<unsigned long long>,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>,WTF::HashTraits<JSC::SparseArrayEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned long long>>::rehash(v14, v28 >> 1, 0);
    }
  }
LABEL_26:
  while (1)
  {
    v30 = *v10;
    if ((v30 & 0xC0) != 0x40)
      break;
    v31 = __ldxr(v10);
    if (v31 == v30)
    {
      if (!__stxr(v30 & 0xBF, v10))
        return;
    }
    else
    {
      __clrex();
    }
  }
  WTF::LockAlgorithm<unsigned char,(unsigned char)64,(unsigned char)128,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v10, 0, a3, a4, a5, a6, a7, a8);
}

BOOL JSC::SparseArrayValueMap::putEntry(unsigned __int8 *a1, unint64_t a2, unsigned int *a3, unsigned int a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BOOL8 result;
  JSC::VM **v19;
  _QWORD *v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;

  v22 = *(_QWORD *)(a2 + 56);
  JSC::SparseArrayValueMap::add((JSC::SparseArrayValueMap *)a1, (uint64_t)a3, a4, (uint64_t)v20);
  if (v21 && (*(_BYTE *)((16 * *a3) | 0x12) & 0x10) != 0)
  {
    JSC::SparseArrayValueMap::remove((uint64_t)a1, v20[0], (uint64_t)v20[1], v11, v12, v13, v14, v15);
    if (!a6)
      return 0;
    v19 = (JSC::VM **)&v22;
LABEL_18:
    JSC::throwTypeError(a2, v19, (uint64_t)"Attempted to assign to readonly property.", 42);
    return 0;
  }
  v16 = *(_QWORD *)(a2 + 56);
  v23 = v16;
  v17 = *((_DWORD *)v20[0] + 4);
  if ((v17 & 0x10) != 0)
    return JSC::GetterSetter::callSetter(v20[0][1], a2, (uint64_t)a3, a5, a6);
  if ((v17 & 2) != 0)
  {
    if (!a6)
      return 0;
    v19 = (JSC::VM **)&v23;
    goto LABEL_18;
  }
  v20[0][1] = a5;
  if ((a5 & 0xFFFE000000000002) != 0)
    return 1;
  result = 1;
  if (a1 && a5 && *(_DWORD *)(v16 + 760) >= a1[7])
  {
    JSC::Heap::writeBarrierSlowPath(v16 + 192, (unint64_t)a1);
    return 1;
  }
  return result;
}

BOOL JSC::SparseArrayEntry::put(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  JSC::VM *v6;
  int v7;
  _BOOL8 result;
  JSC::VM *v9;

  v6 = *(JSC::VM **)(a2 + 56);
  v9 = v6;
  v7 = *(_DWORD *)(a1 + 8);
  if ((v7 & 0x10) != 0)
    return JSC::GetterSetter::callSetter(*(_QWORD *)a1, a2, a3, a5, a6);
  if ((v7 & 2) != 0)
  {
    if (a6)
      JSC::throwTypeError(a2, &v9, (uint64_t)"Attempted to assign to readonly property.", 42);
    return 0;
  }
  else
  {
    *(_QWORD *)a1 = a5;
    if ((a5 & 0xFFFE000000000002) != 0)
      return 1;
    result = 1;
    if (a4 && a5 && *((_DWORD *)v6 + 190) >= *(unsigned __int8 *)(a4 + 7))
    {
      JSC::Heap::writeBarrierSlowPath((uint64_t)v6 + 192, a4);
      return 1;
    }
  }
  return result;
}

uint64_t JSC::SparseArrayValueMap::putDirect(unint64_t a1, unint64_t a2, JSC::JSObject *a3, unsigned int a4, uint64_t a5, int a6, int a7)
{
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  const char *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25[2];
  char v26;
  JSC::VM *v27;

  v13 = *(JSC::VM **)(a2 + 56);
  v27 = v13;
  JSC::SparseArrayValueMap::add((JSC::SparseArrayValueMap *)a1, (uint64_t)a3, a4, (uint64_t)v25);
  v19 = v25[0];
  if (a7 && v26 && (*(_BYTE *)((16 * *(unsigned int *)a3) | 0x12) & 0x10) != 0)
  {
    JSC::SparseArrayValueMap::remove(a1, v25[0], (uint64_t)v25[1], v14, v15, v16, v17, v18);
    if (a7 != 2)
      return 0;
    v22 = "Attempting to define property on object that is not extensible.";
    v23 = a2;
    v24 = 64;
LABEL_19:
    JSC::throwTypeError(v23, &v27, (uint64_t)v22, v24);
    return 0;
  }
  if ((v25[0][2] & 2) != 0)
  {
    if (a7 != 2)
      return 0;
    v22 = "Attempted to assign to readonly property.";
    v23 = a2;
    v24 = 42;
    goto LABEL_19;
  }
  v25[0][1] = a5;
  if ((a5 & 0xFFFE000000000002) == 0
    && a1
    && a5
    && *((_DWORD *)v13 + 190) >= *(unsigned __int8 *)(a1 + 7))
  {
    v21 = v19;
    JSC::Heap::writeBarrierSlowPath((uint64_t)v13 + 192, a1);
    v19 = v21;
  }
  if ((a6 & 0x10) != 0)
    *(_DWORD *)(a1 + 16) |= 4u;
  *((_DWORD *)v19 + 4) = a6;
  return 1;
}

uint64_t JSC::SparseArrayEntry::getNonSparseMode(JSC::SparseArrayEntry *this)
{
  return *(_QWORD *)this;
}

uint64_t JSC::StackFrame::StackFrame(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = a4;
  if (a3 && a4 && *(_DWORD *)(a2 + 760) >= *(unsigned __int8 *)(a3 + 7))
  {
    v5 = a5;
    v6 = result;
    JSC::Heap::writeBarrierSlowPath(a2 + 192, a3);
    a5 = v5;
    result = v6;
  }
  *(_QWORD *)(result + 16) = 0x4000000000000000;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = a5;
  *(_BYTE *)(result + 36) = 0;
  return result;
}

uint64_t JSC::StackFrame::StackFrame(uint64_t result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = *a2;
  v2 = (unsigned int *)a2[1];
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  *(_QWORD *)(result + 24) = v2;
  *(_DWORD *)(result + 32) = -1;
  *(_BYTE *)(result + 36) = 1;
  return result;
}

uint64_t JSC::processSourceURL(int **a1, uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t result;
  int *v6;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  int v11;
  char v12;
  const char *v13;
  unsigned int v14;
  unsigned int v15;
  char v17;
  const char *v18;
  unsigned int v19;
  int v21;

  result = *(_QWORD *)(a2 + 41456);
  v6 = *a4;
  if (!result)
  {
LABEL_45:
    if (!v6)
      v6 = &WTF::StringImpl::s_emptyAtomString;
    goto LABEL_47;
  }
  if (!v6)
    goto LABEL_42;
  v8 = (unsigned __int16 *)*((_QWORD *)v6 + 1);
  v9 = v6[1];
  if (v9 < 5)
  {
    if (!(_DWORD)v9)
      goto LABEL_42;
    goto LABEL_14;
  }
  if ((v6[4] & 4) != 0)
  {
    if ((*(_BYTE *)v8 & 0xDF) != 0x48
      || (*((_BYTE *)v8 + 1) & 0xDF) != 0x54
      || (v8[1] & 0xDF) != 0x54
      || (*((_BYTE *)v8 + 3) & 0xDF) != 0x50)
    {
      goto LABEL_14;
    }
    v21 = *((unsigned __int8 *)v8 + 4);
    if (v21 != 58)
    {
      if (v9 < 6 || (v21 & 0xFFFFFFDF) != 0x53)
        goto LABEL_14;
      v11 = *((unsigned __int8 *)v8 + 5);
      goto LABEL_57;
    }
LABEL_47:
    *v6 += 2;
    *a1 = v6;
    return result;
  }
  if ((*v8 & 0xFFDF) != 0x48 || (v8[1] & 0xFFDF) != 0x54 || (v8[2] & 0xFFDF) != 0x54 || (v8[3] & 0xFFDF) != 0x50)
    goto LABEL_14;
  v10 = v8[4];
  if (v10 == 58)
    goto LABEL_47;
  if (v9 < 6 || (v10 & 0xFFFFFFDF) != 0x53)
    goto LABEL_14;
  v11 = v8[5];
LABEL_57:
  if (v11 == 58)
    goto LABEL_47;
LABEL_14:
  if ((v6[4] & 4) == 0)
  {
    v12 = 1;
    v13 = "blob";
    while (1)
    {
      v15 = *v8++;
      v14 = v15;
      if ((v12 & 1) != 0)
      {
        if (v14 < 0x21)
        {
          v12 = 1;
          goto LABEL_27;
        }
      }
      else if (v14 <= 0xD && ((1 << v14) & 0x2600) != 0)
      {
        v12 = 0;
        goto LABEL_27;
      }
      if (!*v13)
        goto LABEL_44;
      if ((v14 | 0x20) != (unsigned __int16)*v13)
        goto LABEL_42;
      v12 = 0;
      ++v13;
LABEL_27:
      if (!--v9)
        goto LABEL_42;
    }
  }
  v17 = 1;
  v18 = "blob";
  while (1)
  {
    v19 = *(unsigned __int8 *)v8;
    v8 = (unsigned __int16 *)((char *)v8 + 1);
    v14 = v19;
    if ((v17 & 1) == 0)
      break;
    if (v14 >= 0x21)
      goto LABEL_38;
    v17 = 1;
LABEL_41:
    if (!--v9)
      goto LABEL_42;
  }
  if (v14 <= 0xD && ((1 << v14) & 0x2600) != 0)
  {
    v17 = 0;
    goto LABEL_41;
  }
LABEL_38:
  if (*v18)
  {
    if ((v14 | 0x20) != *v18)
      goto LABEL_42;
    v17 = 0;
    ++v18;
    goto LABEL_41;
  }
LABEL_44:
  if (v14 == 58)
    goto LABEL_45;
LABEL_42:
  result = (*(uint64_t (**)(uint64_t, uint64_t, int **))(*(_QWORD *)result + 16))(result, a3, a4);
  if (!*a1)
  {
    v6 = *a4;
    goto LABEL_45;
  }
  return result;
}

void JSC::StackFrame::functionName(JSC::StackFrame *this@<X0>, JSC::VM *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  WTF::StringImpl *v37;

  if (*((_BYTE *)this + 36))
  {
    JSC::Wasm::makeString((uint64_t *)this + 2, a9);
    return;
  }
  v10 = *((_QWORD *)this + 1);
  if (!v10)
  {
    v12 = *(unsigned __int8 **)this;
    if (!*(_QWORD *)this)
      goto LABEL_27;
    goto LABEL_7;
  }
  v11 = (*(unsigned __int16 *)(*(_QWORD *)(v10 + 56) + 28) >> 12) & 3;
  switch(v11)
  {
    case 0:
      v32 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v32 = 0xB00000002;
      v33 = "global code";
LABEL_19:
      *(_QWORD *)(v32 + 8) = v33;
      *(_DWORD *)(v32 + 16) = 4;
      *a9 = v32;
      return;
    case 3:
      v32 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v32 = 0xB00000002;
      v33 = "module code";
      goto LABEL_19;
    case 1:
      v32 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v32 = 0x900000002;
      v33 = "eval code";
      goto LABEL_19;
  }
  v12 = *(unsigned __int8 **)this;
  if (*(_QWORD *)this)
  {
LABEL_7:
    if (v12[5] >= 0x17u)
    {
      JSC::getCalculatedDisplayName(a2, (JSC::VM *)v12, a4, a5, a6, a7, a8, (int **)&v37);
      v13 = v37;
      if (v37)
      {
        v14 = *(_DWORD *)v37;
        *(_DWORD *)v37 += 2;
        v37 = 0;
        if (v14)
        {
          *(_DWORD *)v13 = v14;
        }
        else
        {
          WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        v15 = *(_DWORD *)v13;
        *(_DWORD *)v13 += 2;
        goto LABEL_12;
      }
    }
LABEL_27:
    WTF::StringImpl::s_emptyAtomString += 2;
    *a9 = (uint64_t)&WTF::StringImpl::s_emptyAtomString;
    return;
  }
  v34 = *(_QWORD *)(v10 + 64);
  if (v34)
    v35 = *(_BYTE *)(v34 + 5) == 12;
  else
    v35 = 0;
  if (!v35)
    goto LABEL_27;
  v13 = *(WTF::StringImpl **)(*(_QWORD *)(v34 + 88) + 80);
  if (!v13)
    goto LABEL_27;
  v36 = *(_DWORD *)v13;
  *(_DWORD *)v13 += 4;
  v15 = v36 + 2;
LABEL_12:
  *a9 = (uint64_t)v13;
  if (v15)
  {
    *(_DWORD *)v13 = v15;
  }
  else
  {
    WTF::StringImpl::~StringImpl(v13, a2, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
  }
}

unint64_t JSC::StackFrame::computeLineAndColumn(JSC::StackFrame *this)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v3 = *((_DWORD *)this + 8) >> 2;
    v4 = *(_QWORD *)(v1 + 56);
    if (v3 >= *(_DWORD *)(*(_QWORD *)(v4 + 80) + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x198BBEF70);
    }
    v5 = JSC::ExpressionInfo::lineColumnForInstPC(*(JSC::ExpressionInfo **)(v4 + 160), v3);
    v6 = *(_QWORD *)(v1 + 64);
    if ((_DWORD)v5)
      v7 = 1;
    else
      v7 = *(_DWORD *)(v6 + 60) + 1;
    v8 = (v5 + *(_DWORD *)(v6 + 56) + 1);
    v9 = (unint64_t)(v7 + HIDWORD(v5)) << 32;
    v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 64);
    if (*(_BYTE *)(v10 + 5) == 12)
    {
      v11 = *(_QWORD *)(v10 + 72);
      if (v11)
      {
        LODWORD(v11) = *(_DWORD *)(v11 + 16);
        v13 = (_DWORD)v11 == -1;
        if ((_DWORD)v11 == -1)
          v11 = 0;
        else
          v11 = v11;
        if (!v13)
          v8 = v11;
      }
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  return v9 | v8;
}

void JSC::StackFrame::toString(JSC::StackFrame *this@<X0>, JSC::VM *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, int **a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int **v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  char v28;
  unint64_t v29;
  char v30;
  unsigned int v31;
  _OWORD *v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  const char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  BOOL v58;
  int v59;
  unsigned int v60;
  int v61;
  BOOL v62;
  int v63;
  int v64;
  BOOL v65;
  int v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  int *v70;
  _BYTE *v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  unsigned int v78;
  char *v79;
  int v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  unsigned __int128 *v125;
  unsigned __int128 *v126;
  unsigned __int128 v127;
  unsigned __int128 *v128;
  unsigned __int128 *v129;
  unsigned __int128 v130;
  char v131;
  char v132;
  _WORD *v133;
  uint64_t v134;
  uint64_t v135;
  _WORD *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unsigned int v142;
  _WORD *v143;
  _WORD *v144;
  BOOL v145;
  unsigned int v146;
  uint64_t v147;
  _WORD *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  __int128 v153;
  char *v154;
  int8x16_t v155;
  __int128 v156;
  __int128 v157;
  char *v158;
  char *v159;
  char *v160;
  __int16 v161;
  __int128 v162;
  char *v163;
  int8x16_t v164;
  __int128 v165;
  __int128 v166;
  char *v167;
  char *v168;
  char *v169;
  __int16 v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  _QWORD v173[3];
  int8x16x2_t v174;
  int8x16x2_t v175;
  int8x16x2_t v176;
  int8x16x2_t v177;
  int8x16x2_t v178;
  int8x16x2_t v179;

  v173[2] = *MEMORY[0x1E0C80C00];
  JSC::StackFrame::functionName(this, a2, a3, a4, a5, a6, a7, a8, (uint64_t *)&v172);
  if (*((_BYTE *)this + 36))
  {
    v41 = WTF::fastCompactMalloc((WTF *)0x20);
    v21 = (WTF::StringImpl *)v41;
    *(_QWORD *)v41 = 0xB00000002;
    v42 = "[wasm code]";
    goto LABEL_40;
  }
  v19 = *((_QWORD *)this + 1);
  if (!v19)
  {
    v41 = WTF::fastCompactMalloc((WTF *)0x20);
    v21 = (WTF::StringImpl *)v41;
    *(_QWORD *)v41 = 0xD00000002;
    v42 = "[native code]";
LABEL_40:
    *(_QWORD *)(v41 + 8) = v42;
    *(_DWORD *)(v41 + 16) = 4;
    v171 = (WTF::StringImpl *)v41;
    goto LABEL_41;
  }
  v20 = (int **)JSC::SourceProvider::sourceURLStripped(*(WTF::StringImpl ***)(*(_QWORD *)(v19 + 64) + 40), v12, v13, v14, v15, v16, v17, v18);
  JSC::processSourceURL((int **)&v171, (uint64_t)a2, (uint64_t)this, v20);
  v21 = v171;
  if (!v171)
  {
    LOBYTE(v22) = 1;
    goto LABEL_5;
  }
  if (!*((_DWORD *)v171 + 1))
  {
    LOBYTE(v22) = 0;
LABEL_5:
    v23 = v172;
    if (v172)
      *(_DWORD *)v172 += 2;
    if ((v22 & 1) == 0)
      *(_DWORD *)v21 += 2;
    if (v23)
      v24 = *((_DWORD *)v23 + 1);
    else
      v24 = 0;
    if ((v22 & 1) != 0)
    {
      v25 = 0;
    }
    else
    {
      v25 = *((_DWORD *)v21 + 1);
      if (v25 < 0)
        goto LABEL_137;
    }
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    v28 = v26;
    if ((v24 & 0x80000000) == 0 && (v28 & 1) == 0)
    {
      v29 = (v24 + v27);
      if (!__OFADD__(v24, v27))
      {
        if (v23)
        {
          if ((*((_DWORD *)v23 + 4) & 4) != 0)
            v30 = v22;
          else
            v30 = 1;
          if ((v30 & 1) != 0)
          {
            v31 = (*((_DWORD *)v23 + 4) & 4u) >> 2;
LABEL_25:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v29, v31 & 1, (uint64_t)v23, 64, (uint64_t)v21, a9);
            if (*a9)
            {
              if ((v22 & 1) == 0)
              {
                if (*(_DWORD *)v21 == 2)
                {
                  WTF::StringImpl::~StringImpl(v21, (WTF::AtomStringImpl *)v32, v33, v34, v35, v36, v37, v38);
                  WTF::fastFree(v99, v100, v101, v102, v103, v104, v105, v106);
                }
                else
                {
                  *(_DWORD *)v21 -= 2;
                }
              }
              if (v23)
              {
                if (*(_DWORD *)v23 != 2)
                {
                  *(_DWORD *)v23 -= 2;
                  goto LABEL_32;
                }
                v107 = v23;
LABEL_115:
                WTF::StringImpl::~StringImpl(v107, (WTF::AtomStringImpl *)v32, v33, v34, v35, v36, v37, v38);
                WTF::fastFree(v108, v109, v110, v111, v112, v113, v114, v115);
                goto LABEL_32;
              }
              goto LABEL_32;
            }
LABEL_138:
            __break(0xC471u);
            JUMPOUT(0x198BBF5B4);
          }
        }
        else if ((v22 & 1) != 0)
        {
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::String,void>>(v29, 1, 0, 64, 0, a9);
          if (*a9)
            goto LABEL_32;
          goto LABEL_138;
        }
        v31 = (*((unsigned __int8 *)v21 + 16) >> 2) & 1;
        goto LABEL_25;
      }
    }
LABEL_137:
    *a9 = 0;
    goto LABEL_138;
  }
LABEL_41:
  v22 = *((_QWORD *)this + 1);
  if (!v22)
    goto LABEL_5;
  v43 = *((_DWORD *)this + 8) >> 2;
  v44 = *(_QWORD *)(v22 + 56);
  if (v43 >= *(_DWORD *)(*(_QWORD *)(v44 + 80) + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x198BBF534);
  }
  v45 = JSC::ExpressionInfo::lineColumnForInstPC(*(JSC::ExpressionInfo **)(v44 + 160), v43);
  v46 = *(_QWORD *)(v22 + 64);
  if ((_DWORD)v45)
    v47 = 1;
  else
    v47 = *(_DWORD *)(v46 + 60) + 1;
  v48 = v45 + *(_DWORD *)(v46 + 56) + 1;
  v49 = *(_QWORD *)(*((_QWORD *)this + 1) + 64);
  if (*(_BYTE *)(v49 + 5) == 12)
  {
    v50 = *(_QWORD *)(v49 + 72);
    if (v50)
    {
      v124 = *(_DWORD *)(v50 + 16);
      if (v124 != -1)
        v48 = v124;
    }
  }
  v51 = v172;
  if (v172)
    *(_DWORD *)v172 += 2;
  v52 = v171;
  if (v171)
    *(_DWORD *)v171 += 2;
  if (v51)
    v53 = *((_DWORD *)v51 + 1);
  else
    v53 = 0;
  v54 = v47 + HIDWORD(v45);
  if (v52)
    v55 = *((_DWORD *)v52 + 1);
  else
    v55 = 0;
  v56 = 0;
  v57 = v48;
  do
  {
    ++v56;
    v58 = v57 > 9;
    v57 /= 0xAu;
  }
  while (v58);
  v59 = 0;
  v60 = v54;
  do
  {
    ++v59;
    v58 = v60 > 9;
    v60 /= 0xAu;
  }
  while (v58);
  if (v59 < 0)
    goto LABEL_188;
  v26 = __OFADD__(v59, 1);
  v61 = v59 + 1;
  v62 = v26;
  if (v56 < 0)
    goto LABEL_188;
  if (v62)
    goto LABEL_188;
  v26 = __OFADD__(v56, v61);
  v63 = v56 + v61;
  if (v26)
    goto LABEL_188;
  v26 = __OFADD__(v63, 1);
  v64 = v63 + 1;
  v65 = v26;
  if (v55 < 0)
    goto LABEL_188;
  if (v65)
    goto LABEL_188;
  v26 = __OFADD__(v55, v64);
  v66 = v55 + v64;
  if (v26)
    goto LABEL_188;
  v26 = __OFADD__(v66, 1);
  v67 = v66 + 1;
  v68 = v26;
  if (v53 < 0)
    goto LABEL_188;
  if (v68)
    goto LABEL_188;
  v69 = (v53 + v67);
  if (__OFADD__(v53, v67))
    goto LABEL_188;
  if ((!v51 || (*((_BYTE *)v51 + 16) & 4) != 0) && (!v52 || (*((_BYTE *)v52 + 16) & 4) != 0))
  {
    if ((_DWORD)v69)
    {
      if ((v69 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v69 + 20), v173);
        v70 = (int *)v173[0];
        if (v173[0])
        {
          v71 = (_BYTE *)(v173[0] + 20);
          *(_DWORD *)v173[0] = 2;
          v70[1] = v69;
          *((_QWORD *)v70 + 1) = v70 + 5;
          v70[4] = 4;
          if (v51)
          {
            v32 = (_OWORD *)*((_QWORD *)v51 + 1);
            v33 = *((unsigned int *)v51 + 1);
            if ((*((_BYTE *)v51 + 16) & 4) != 0)
            {
              if ((_DWORD)v33 == 1)
              {
                *v71 = *(_BYTE *)v32;
              }
              else if ((_DWORD)v33)
              {
                memcpy(v70 + 5, v32, v33);
              }
            }
            else
            {
              if (v33 < 0x10)
              {
                v125 = (unsigned __int128 *)(v70 + 5);
              }
              else
              {
                v125 = (unsigned __int128 *)&v71[v33 & 0xFFFFFFF0];
                v126 = (unsigned __int128 *)(v70 + 5);
                do
                {
                  v127 = (unsigned __int128)vld2q_s8((const char *)v32);
                  v32 += 2;
                  *v126++ = v127;
                }
                while (v126 != v125);
              }
              while (v125 != (unsigned __int128 *)&v71[v33])
              {
                v131 = *(_BYTE *)v32;
                v32 = (_OWORD *)((char *)v32 + 2);
                *(_BYTE *)v125 = v131;
                v125 = (unsigned __int128 *)((char *)v125 + 1);
              }
            }
            v72 = *((unsigned int *)v51 + 1);
          }
          else
          {
            v72 = 0;
          }
          v73 = &v71[v72];
          *v73 = 64;
          v74 = v73 + 1;
          if (v52)
          {
            v32 = (_OWORD *)*((_QWORD *)v52 + 1);
            v33 = *((unsigned int *)v52 + 1);
            if ((*((_BYTE *)v52 + 16) & 4) != 0)
            {
              if ((_DWORD)v33 == 1)
              {
                *v74 = *(_BYTE *)v32;
              }
              else if ((_DWORD)v33)
              {
                memcpy(v74, v32, v33);
              }
            }
            else
            {
              if (v33 < 0x10)
              {
                v128 = (unsigned __int128 *)v74;
              }
              else
              {
                v128 = (unsigned __int128 *)&v74[v33 & 0xFFFFFFF0];
                v129 = (unsigned __int128 *)v74;
                do
                {
                  v130 = (unsigned __int128)vld2q_s8((const char *)v32);
                  v32 += 2;
                  *v129++ = v130;
                }
                while (v129 != v128);
              }
              while (v128 != (unsigned __int128 *)&v74[v33])
              {
                v132 = *(_BYTE *)v32;
                v32 = (_OWORD *)((char *)v32 + 2);
                *(_BYTE *)v128 = v132;
                v128 = (unsigned __int128 *)((char *)v128 + 1);
              }
            }
            v75 = *((unsigned int *)v52 + 1);
          }
          else
          {
            v75 = 0;
          }
          v76 = 0;
          v77 = &v74[v75];
          *v77 = 58;
          v78 = v48;
          do
          {
            *((_BYTE *)&v173[1] + v76-- + 4) = (v78 % 0xA) | 0x30;
            v58 = v78 > 9;
            v78 /= 0xAu;
          }
          while (v58);
          v79 = v77 + 1;
          if (v76 + 14 <= 13)
            memcpy(v79, (char *)&v173[1] + v76 + 5, -v76);
          v80 = 0;
          do
          {
            ++v80;
            v58 = v48 > 9;
            v48 /= 0xAu;
          }
          while (v58);
          v81 = 0;
          v82 = &v79[v80];
          *v82 = 58;
          do
          {
            *((_BYTE *)&v173[1] + v81-- + 4) = (v54 % 0xA) | 0x30;
            v58 = v54 > 9;
            v54 /= 0xAu;
          }
          while (v58);
          if (v81 + 14 <= 13)
            memcpy(v82 + 1, (char *)&v173[1] + v81 + 5, -v81);
          goto LABEL_105;
        }
      }
LABEL_188:
      *a9 = 0;
      __break(0xC471u);
      JUMPOUT(0x198BBF840);
    }
LABEL_187:
    v70 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_105;
  }
  if (!(_DWORD)v69)
    goto LABEL_187;
  if (v69 > 0x7FFFFFEF)
    goto LABEL_188;
  WTF::tryFastCompactMalloc((WTF *)(2 * v69 + 20), v173);
  v70 = (int *)v173[0];
  if (!v173[0])
    goto LABEL_188;
  v133 = (_WORD *)(v173[0] + 20);
  *(_DWORD *)v173[0] = 2;
  v70[1] = v69;
  *((_QWORD *)v70 + 1) = v70 + 5;
  v70[4] = 0;
  if (v51)
  {
    v32 = (_OWORD *)*((_QWORD *)v51 + 1);
    v134 = *((unsigned int *)v51 + 1);
    if ((*((_BYTE *)v51 + 16) & 4) != 0)
    {
      v149 = (char *)&v133[v134];
      if (v134 >= 0x40)
      {
        v150 = (char *)&v133[v134 & 0xFFFFFFC0];
        v153 = 0uLL;
        v154 = (char *)(v70 + 5);
        do
        {
          v174.val[0] = (int8x16_t)*v32;
          v155 = *((int8x16_t *)v32 + 1);
          v176.val[0] = (int8x16_t)v32[2];
          v156 = v32[3];
          v32 += 4;
          v157 = v156;
          v176.val[1] = 0uLL;
          v178.val[0] = v155;
          v174.val[1] = 0uLL;
          v158 = v154;
          vst2q_s8(v158, v174);
          v158 += 32;
          v178.val[1] = 0uLL;
          vst2q_s8(v158, v178);
          v159 = v154 + 64;
          vst2q_s8(v159, v176);
          v160 = v154 + 96;
          vst2q_s8(v160, *(int8x16x2_t *)(&v153 - 1));
          v154 += 128;
        }
        while (v154 != v150);
      }
      else
      {
        v150 = (char *)(v70 + 5);
      }
      while (v150 != v149)
      {
        v161 = *(unsigned __int8 *)v32;
        v32 = (_OWORD *)((char *)v32 + 1);
        *(_WORD *)v150 = v161;
        v150 += 2;
      }
    }
    else if ((_DWORD)v134 == 1)
    {
      *v133 = *(_WORD *)v32;
    }
    else if ((_DWORD)v134)
    {
      memcpy(v70 + 5, v32, 2 * v134);
    }
    v135 = *((unsigned int *)v51 + 1);
  }
  else
  {
    v135 = 0;
  }
  v136 = &v133[v135];
  *v136 = 64;
  v137 = (char *)(v136 + 1);
  if (v52)
  {
    v32 = (_OWORD *)*((_QWORD *)v52 + 1);
    v138 = *((unsigned int *)v52 + 1);
    if ((*((_BYTE *)v52 + 16) & 4) != 0)
    {
      v151 = &v137[2 * v138];
      if (v138 >= 0x40)
      {
        v152 = &v137[2 * (v138 & 0xFFFFFFC0)];
        v162 = 0uLL;
        v163 = v137;
        do
        {
          v175.val[0] = (int8x16_t)*v32;
          v164 = *((int8x16_t *)v32 + 1);
          v177.val[0] = (int8x16_t)v32[2];
          v165 = v32[3];
          v32 += 4;
          v166 = v165;
          v177.val[1] = 0uLL;
          v179.val[0] = v164;
          v175.val[1] = 0uLL;
          v167 = v163;
          vst2q_s8(v167, v175);
          v167 += 32;
          v179.val[1] = 0uLL;
          vst2q_s8(v167, v179);
          v168 = v163 + 64;
          vst2q_s8(v168, v177);
          v169 = v163 + 96;
          vst2q_s8(v169, *(int8x16x2_t *)(&v162 - 1));
          v163 += 128;
        }
        while (v163 != v152);
      }
      else
      {
        v152 = v137;
      }
      while (v152 != v151)
      {
        v170 = *(unsigned __int8 *)v32;
        v32 = (_OWORD *)((char *)v32 + 1);
        *(_WORD *)v152 = v170;
        v152 += 2;
      }
    }
    else if ((_DWORD)v138 == 1)
    {
      *(_WORD *)v137 = *(_WORD *)v32;
    }
    else if ((_DWORD)v138)
    {
      memcpy(v137, v32, 2 * v138);
    }
    v139 = *((unsigned int *)v52 + 1);
  }
  else
  {
    v139 = 0;
  }
  v140 = 0;
  v141 = &v137[2 * v139];
  *(_WORD *)v141 = 58;
  v142 = v48;
  do
  {
    *((_BYTE *)&v173[1] + v140-- + 4) = (v142 % 0xA) | 0x30;
    v58 = v142 > 9;
    v142 /= 0xAu;
  }
  while (v58);
  v143 = v141 + 2;
  if (v140 + 14 <= 13)
  {
    v144 = v141 + 2;
    do
    {
      *v144++ = *((unsigned __int8 *)&v173[1] + v140 + 5);
      v145 = __CFADD__(v140++, 1);
    }
    while (!v145);
  }
  v146 = 0;
  do
  {
    ++v146;
    v58 = v48 > 9;
    v48 /= 0xAu;
  }
  while (v58);
  v147 = 0;
  v143[v146] = 58;
  do
  {
    *((_BYTE *)&v173[1] + v147-- + 4) = (v54 % 0xA) | 0x30;
    v58 = v54 > 9;
    v54 /= 0xAu;
  }
  while (v58);
  if (v147 + 14 <= 13)
  {
    v148 = (_WORD *)v70 + v139 + v135 + v146 + 13;
    do
    {
      *v148++ = *((unsigned __int8 *)&v173[1] + v147 + 5);
      v145 = __CFADD__(v147++, 1);
    }
    while (!v145);
  }
LABEL_105:
  *a9 = v70;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, (WTF::AtomStringImpl *)v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v116, v117, v118, v119, v120, v121, v122, v123);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
  if (v51)
  {
    if (*(_DWORD *)v51 != 2)
    {
      *(_DWORD *)v51 -= 2;
      goto LABEL_32;
    }
    v107 = v51;
    goto LABEL_115;
  }
LABEL_32:
  v39 = v171;
  v171 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
    {
      WTF::StringImpl::~StringImpl(v39, (WTF::AtomStringImpl *)v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v83, v84, v85, v86, v87, v88, v89, v90);
    }
    else
    {
      *(_DWORD *)v39 -= 2;
    }
  }
  v40 = v172;
  v172 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
    {
      WTF::StringImpl::~StringImpl(v40, (WTF::AtomStringImpl *)v32, v33, v34, v35, v36, v37, v38);
      WTF::fastFree(v91, v92, v93, v94, v95, v96, v97, v98);
    }
    else
    {
      *(_DWORD *)v40 -= 2;
    }
  }
}

uint64_t JSC::StrictEvalActivation::deleteProperty()
{
  return 0;
}

unint64_t JSC::StringConstructor::create(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t *v11;
  uint64_t v12;
  JSC::VM *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t HostFunction;
  unint64_t SlowCase;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  unint64_t v31;
  const WTF::String *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v11 = (unint64_t *)(a1 + 38288);
  v12 = *(_QWORD *)(a2 + 40);
  HostFunction = JSC::VM::getHostFunction((uint64_t *)a1, (uint64_t)JSC::callStringConstructor, 0, 76, (unint64_t)JSC::constructWithStringConstructor, 0, (WTF::StringImpl **)(*(_QWORD *)(a1 + 41952) + 784), a8);
  SlowCase = *v11;
  if (*v11 < v11[1])
    goto LABEL_2;
  SlowCase = v11[2];
  if ((SlowCase & 1) == 0)
  {
    v44 = *(_QWORD *)(SlowCase + 8) ^ v11[3];
    v11[1] = SlowCase + HIDWORD(v44);
    v11[2] = SlowCase + (int)v44;
LABEL_2:
    *v11 = SlowCase + 32;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM((JSC *)a1, v13, v14, v15, v16, v17, v18, v19);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(a1 + 38264, a1 + 192, 32, 0, 0, v45, v46, v47);
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  JSC::JSCallee::JSCallee(SlowCase, a1, v12, a2);
  *(_QWORD *)(SlowCase + 24) = HostFunction;
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, a1, *(_QWORD *)(v11[458] + 2160), a3, 14, v22, v23, v24, v25);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, a1, *(_QWORD *)(v11[458] + 1768), 0xFFFE000000000001, 6, v26, v27, v28, v29);
  v30 = v11[458];
  v31 = *(_QWORD *)(v30 + 1968);
  v38 = JSC::jsString((JSC *)a1, (JSC::VM *)(v30 + 784), v32, v33, v34, v35, v36, v37);
  JSC::JSObject::putDirectWithoutTransition((JSC::JSObject *)SlowCase, a1, v31, v38, 6, v39, v40, v41, v42);
  return SlowCase;
}

uint64_t JSC::callStringConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::AtomStringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  WTF::StringImpl *v35;
  unsigned __int8 *v36;

  v8 = *((_QWORD *)this + 7);
  if (*((_DWORD *)a2 + 8) == 1)
    return *(_QWORD *)(v8 + 41968);
  result = *((_QWORD *)a2 + 6);
  v36 = (unsigned __int8 *)result;
  if ((result & 0xFFFE000000000002) != 0)
    return (uint64_t)JSC::JSValue::toStringSlowCase(&v36, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v11 = *(unsigned __int8 *)(result + 5);
  if (v11 == 2)
    return result;
  if (v11 != 4)
    return (uint64_t)JSC::JSValue::toStringSlowCase(&v36, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  JSC::Symbol::descriptiveString(result, (int **)&v35);
  result = JSC::jsNontrivialString(v8, (JSC::VM *)&v35, v12, v13, v14, v15, v16, v17);
  v25 = v35;
  v35 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      v34 = (unsigned __int8 *)result;
      WTF::StringImpl::~StringImpl(v25, v18, v19, v20, v21, v22, v23, v24);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
      return (uint64_t)v34;
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return result;
}

unint64_t JSC::constructWithStringConstructor(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Structure *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  JSC::JSGlobalObject *v11;
  int v12;
  JSC::JSObject *SubclassStructure;
  unsigned __int8 *v14;
  unint64_t SlowCase;
  int v16;
  JSC::JSGlobalObject *i;
  char **v19;
  uint64_t v20;
  int v21;
  JSC::JSObject *v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  JSC::JSGlobalObject *v31;
  unsigned __int8 *v32;

  v10 = *((_QWORD *)this + 7);
  v11 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (v11 == *((JSC::JSGlobalObject **)a2 + 3))
  {
    v12 = *((_DWORD *)this + 290);
    if (v12)
      SubclassStructure = (JSC::JSObject *)(16 * (v12 & 0xFFFFFFFE));
    else
      SubclassStructure = 0;
  }
  else
  {
    v32 = (unsigned __int8 *)*((_QWORD *)this + 7);
    for (i = v11; ; i = (JSC::JSGlobalObject *)*((_QWORD *)v31 + 2))
    {
      while (1)
      {
        v19 = (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x4C));
        if (v19 != &JSC::JSBoundFunction::s_info && v19 != &JSC::JSRemoteFunction::s_info)
          break;
        i = (JSC::JSGlobalObject *)*((_QWORD *)i + 4);
      }
      if (*((_BYTE *)i + 5) != 61)
      {
        v20 = *(_QWORD *)(16 * (*(_DWORD *)i & 0xFFFFFFFE) + 0x28);
        goto LABEL_23;
      }
      v31 = i;
      if (JSC::ProxyObject::isRevoked(i))
        break;
    }
    JSC::throwTypeError((unint64_t)this, (JSC::VM **)&v32, (uint64_t)"Cannot get function realm from revoked Proxy", 45);
    v20 = 0;
LABEL_23:
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      SubclassStructure = 0;
    }
    else
    {
      v21 = *(_DWORD *)(v20 + 1160);
      if (v21)
        v22 = (JSC::JSObject *)(16 * (v21 & 0xFFFFFFFE));
      else
        v22 = 0;
      SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v11, v22, a4, a5, a6, a7, a8);
    }
  }
  if (*(_DWORD *)(v10 + 80))
  {
    v23 = *(_DWORD *)(v10 + 80);
    if ((v23 & 0x27) != 0 && (v23 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return JSC::StringObject::create((JSC::StringObject *)v10, SubclassStructure, a3, (uint64_t)a4, a5, a6, a7, a8);
  v14 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  v32 = v14;
  if (((unint64_t)v14 & 0xFFFE000000000002) != 0 || v14[5] != 2)
    v14 = JSC::JSValue::toStringSlowCase(&v32, (uint64_t)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v24 = *(_DWORD *)(v10 + 80);
    if ((v24 & 0x27) != 0 && (v24 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  SlowCase = *(_QWORD *)(v10 + 39784);
  if (SlowCase >= *(_QWORD *)(v10 + 39792))
  {
    SlowCase = *(_QWORD *)(v10 + 39800);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v10, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39760, v10 + 192, 32, 0, 0, v28, v29, v30);
      goto LABEL_12;
    }
    v25 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v10 + 39808);
    *(_QWORD *)(v10 + 39792) = SlowCase + HIDWORD(v25);
    *(_QWORD *)(v10 + 39800) = SlowCase + (int)v25;
  }
  *(_QWORD *)(v10 + 39784) = SlowCase + 32;
LABEL_12:
  *(_DWORD *)SlowCase = 0;
  v16 = *((_DWORD *)SubclassStructure + 2);
  *(_DWORD *)SlowCase = (unint64_t)SubclassStructure >> 4;
  *(_DWORD *)(SlowCase + 4) = v16;
  *(_QWORD *)(SlowCase + 8) = 0;
  *(_QWORD *)(SlowCase + 16) = 0;
  if (*(_BYTE *)(v10 + 755))
    __dmb(0xAu);
  *(_QWORD *)(SlowCase + 16) = v14;
  if (v14
    && ((unint64_t)v14 & 0xFFFE000000000002) == 0
    && *(_DWORD *)(v10 + 760) >= *(unsigned __int8 *)(SlowCase + 7))
  {
    v26 = v10 + 192;
    v27 = SlowCase;
    JSC::Heap::writeBarrierSlowPath(v26, SlowCase);
    return v27;
  }
  return SlowCase;
}

unsigned __int8 *JSC::stringConstructor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unsigned __int8 *v34;

  v34 = (unsigned __int8 *)a2;
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::JSValue::toStringSlowCase(&v34, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v8 = *(unsigned __int8 *)(a2 + 5);
  if (v8 == 2)
    return (unsigned __int8 *)a2;
  if (v8 != 4)
    return JSC::JSValue::toStringSlowCase(&v34, a1, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 56);
  JSC::Symbol::descriptiveString(a2, (int **)&v33);
  a2 = JSC::jsNontrivialString(v10, (JSC::VM *)&v33, v11, v12, v13, v14, v15, v16);
  v23 = v33;
  v33 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      v24 = a2;
      WTF::StringImpl::~StringImpl(v23, (WTF::AtomStringImpl *)a2, v17, v18, v19, v20, v21, v22);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
      return (unsigned __int8 *)v24;
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return (unsigned __int8 *)a2;
}

void JSC::StringIteratorPrototype::finishCreation(JSC::StringIteratorPrototype *this, JSC::VM *a2, JSC::JSGlobalObject *a3)
{
  char *v6;
  WTF::StringImpl *v7;
  uint64_t CodeExecutable;
  WTF::StringImpl *v9;
  uint64_t v10;
  double v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  WTF::AtomStringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t CodeGenerator;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  WTF::StringImpl *v80;
  __int128 v81;

  v6 = (char *)a2 + 41952;
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  v7 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2000);
  if (v7)
  {
    *(_DWORD *)v7 += 2;
    CodeExecutable = JSC::BuiltinExecutables::stringIteratorPrototypeNextCodeExecutable(*((JSC::BuiltinExecutables **)a2
                                                                                        + 11644));
    v9 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 11644) + 8);
    ++*((_DWORD *)v9 + 2);
    v80 = v9;
    v81 = xmmword_199125570;
    v18 = JSC::UnlinkedFunctionExecutable::link(CodeExecutable, (uint64_t)a2, 0, (uint64_t)&v80, 0, 0, 0, v10, COERCE_DOUBLE(0x1CB360001C768), v11, v12);
    v19 = v80;
    v80 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
      else
        --*((_DWORD *)v19 + 2);
    }
    v20 = JSC::JSFunction::create((uint64_t)a2, v18, a3, v13, v14, v15, v16, v17);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v7, v20, 4, v21, v22, v23, v24);
    if (*(_DWORD *)v7 == 2)
    {
      WTF::StringImpl::~StringImpl(v7, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v53, v54, v55, v56, v57, v58, v59, v60);
    }
    else
    {
      *(_DWORD *)v7 -= 2;
    }
  }
  else
  {
    CodeGenerator = JSC::stringIteratorPrototypeNextCodeGenerator((JSC::BuiltinExecutables **)a2, a2);
    v75 = JSC::JSFunction::create((uint64_t)a2, CodeGenerator, a3, v70, v71, v72, v73, v74);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v75, 4, v76, v77, v78, v79);
  }
  v32 = *(_QWORD *)(*(_QWORD *)v6 + 2776);
  v33 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v33 = 0xF00000002;
  *(_QWORD *)(v33 + 8) = "String Iterator";
  *(_DWORD *)(v33 + 16) = 4;
  v80 = (WTF::StringImpl *)v33;
  v40 = JSC::jsNontrivialString((uint64_t)a2, (JSC::VM *)&v80, v34, v35, v36, v37, v38, v39);
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, v32, v40, 6, v41, v42, v43, v44);
  v52 = v80;
  v80 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      WTF::StringImpl::~StringImpl(v52, v45, v46, v47, v48, v49, v50, v51);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v52 -= 2;
    }
  }
}

uint64_t JSC::StringObject::put(unsigned __int8 *a1, unint64_t a2, unint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  JSC::VM *v24;

  v24 = *(JSC::VM **)(a2 + 56);
  if (*(_QWORD *)(*((_QWORD *)v24 + 5244) + 1768) == a3)
  {
    if ((*(_BYTE *)(a5 + 20) & 1) != 0)
      JSC::throwTypeError(a2, &v24, (uint64_t)"Attempted to assign to readonly property.", 42);
    return 0;
  }
  if (*(unsigned __int8 **)(a5 + 8) != a1)
    return JSC::JSObject::put(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  if (!a3)
    return JSC::JSObject::put(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v9 = *(_DWORD *)(a3 + 16);
  if ((v9 & 0x20) != 0)
    return JSC::JSObject::put(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  v10 = *(_BYTE **)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 4);
  if ((v9 & 4) != 0)
  {
    if ((_DWORD)v11)
    {
      v12 = *v10 - 48;
      if (v12 <= 9 && (v11 < 2 || *v10 != 48))
      {
        v21 = v11 - 1;
        v22 = v10 + 1;
        while (v21)
        {
          if (v12 > 0x19999999)
            goto LABEL_8;
          v23 = *v22 - 48;
          if (v23 > 9)
            goto LABEL_8;
          v13 = 0;
          LODWORD(v11) = 0;
          v14 = 0;
          v20 = __CFADD__(v23, 10 * v12);
          v12 = v23 + 10 * v12;
          --v21;
          ++v22;
          if (v20)
            goto LABEL_10;
        }
        goto LABEL_38;
      }
      goto LABEL_8;
    }
LABEL_44:
    v13 = 0;
    goto LABEL_9;
  }
  if (!(_DWORD)v11)
    goto LABEL_44;
  v12 = *(unsigned __int16 *)v10 - 48;
  if (v12 <= 9 && (*(_WORD *)v10 != 48 || v11 <= 1))
  {
    v17 = (unsigned __int16 *)(v10 + 2);
    v18 = v11 - 1;
    while (v18)
    {
      if (v12 > 0x19999999)
        goto LABEL_8;
      v19 = *v17 - 48;
      if (v19 > 9)
        goto LABEL_8;
      v13 = 0;
      LODWORD(v11) = 0;
      v14 = 0;
      v20 = __CFADD__(v19, 10 * v12);
      v12 = v19 + 10 * v12;
      ++v17;
      --v18;
      if (v20)
        goto LABEL_10;
    }
LABEL_38:
    v13 = 0x100000000;
    if (v12 == -1)
    {
      v13 = 0;
      LODWORD(v11) = 0;
    }
    else
    {
      LODWORD(v11) = v12;
    }
    if (v12 == -1)
      v14 = 0;
    else
      v14 = v12 & 0xFFFFFF00;
    goto LABEL_10;
  }
LABEL_8:
  v13 = 0;
  LODWORD(v11) = 0;
LABEL_9:
  v14 = 0;
LABEL_10:
  if ((v13 & 0x100000000) == 0)
    return JSC::JSObject::put(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return JSC::StringObject::putByIndex((unint64_t)a1, a2, (const WTF::StringImpl *)(v14 | v11), (unint64_t)a4, *(_BYTE *)(a5 + 20) & 1, a6, a7, a8, a9);
}

uint64_t JSC::StringObject::putByIndex(unint64_t a1, unint64_t a2, const WTF::StringImpl *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  JSC::VM *v13;

  v13 = *(JSC::VM **)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = (_DWORD *)(v9 + 16);
  if ((v10 & 1) == 0)
    v11 = (_DWORD *)(v10 + 4);
  if (*v11 <= a3)
    return JSC::JSObject::putByIndex(a1, (WTF::StringImpl **)a2, a3, a4, a5, a6, a7, a8, a9);
  if ((_DWORD)a5)
    JSC::throwTypeError(a2, &v13, (uint64_t)"Attempted to assign to readonly property.", 42);
  return 0;
}

uint64_t JSC::StringObject::deleteProperty(uint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BYTE *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;

  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 7) + 41952) + 1768) == a3)
    return 0;
  if (a3)
  {
    v8 = *(_DWORD *)(a3 + 16);
    if ((v8 & 0x20) == 0)
    {
      v9 = *(_BYTE **)(a3 + 8);
      v10 = *(unsigned int *)(a3 + 4);
      if ((v8 & 4) != 0)
      {
        if ((_DWORD)v10)
        {
          v11 = *v9 - 48;
          if (v11 <= 9 && (v10 < 2 || *v9 != 48))
          {
            v19 = v10 - 1;
            v20 = v9 + 1;
            while (v19)
            {
              if (v11 > 0x19999999)
                goto LABEL_7;
              v21 = *v20 - 48;
              if (v21 > 9)
                goto LABEL_7;
              v12 = 0;
              LODWORD(v10) = 0;
              v13 = 0;
              v18 = __CFADD__(v21, 10 * v11);
              v11 = v21 + 10 * v11;
              --v19;
              ++v20;
              if (v18)
                goto LABEL_37;
            }
            goto LABEL_31;
          }
          goto LABEL_7;
        }
      }
      else if ((_DWORD)v10)
      {
        v11 = *(unsigned __int16 *)v9 - 48;
        if (v11 <= 9 && (*(_WORD *)v9 != 48 || v10 <= 1))
        {
          v15 = (unsigned __int16 *)(v9 + 2);
          v16 = v10 - 1;
          while (v16)
          {
            if (v11 > 0x19999999)
              goto LABEL_7;
            v17 = *v15 - 48;
            if (v17 > 9)
              goto LABEL_7;
            v12 = 0;
            LODWORD(v10) = 0;
            v13 = 0;
            v18 = __CFADD__(v17, 10 * v11);
            v11 = v17 + 10 * v11;
            ++v15;
            --v16;
            if (v18)
              goto LABEL_37;
          }
LABEL_31:
          v12 = 0x100000000;
          if (v11 == -1)
          {
            v12 = 0;
            LODWORD(v10) = 0;
          }
          else
          {
            LODWORD(v10) = v11;
          }
          if (v11 == -1)
            v13 = 0;
          else
            v13 = v11 & 0xFFFFFF00;
LABEL_37:
          v22 = v13 | v10;
          if ((v12 & 0x100000000) != 0)
          {
            v23 = *(_QWORD *)(a1 + 16);
            v24 = *(_QWORD *)(v23 + 8);
            v25 = (unsigned int *)(v23 + 16);
            if ((v24 & 1) == 0)
              v25 = (unsigned int *)(v24 + 4);
            if (*v25 > v22)
              return 0;
          }
          return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
        }
LABEL_7:
        v12 = 0;
        LODWORD(v10) = 0;
LABEL_8:
        v13 = 0;
        goto LABEL_37;
      }
      v12 = 0;
      goto LABEL_8;
    }
  }
  return JSC::JSObject::deleteProperty((unsigned int *)a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::StringObject::deletePropertyByIndex(JSC::StringObject *this, JSC::JSCell *a2, JSC::JSGlobalObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;

  v9 = *((_QWORD *)this + 2);
  v10 = *(_QWORD *)(v9 + 8);
  v11 = (_DWORD *)(v9 + 16);
  if ((v10 & 1) == 0)
    v11 = (_DWORD *)(v10 + 4);
  if (*v11 <= a3)
    return JSC::JSObject::deletePropertyByIndex(this, a2, a3, a4, a5, a6, a7, a8, a9);
  else
    return 0;
}

uint64_t JSC::StringObject::getOwnPropertySlot(uint64_t a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t result;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unsigned __int16 *v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  _BYTE *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t Index;
  unsigned __int8 *v81;
  uint64_t v82;
  unsigned int v83;

  v12 = a1 + 16;
  v11 = *(unsigned int **)(a1 + 16);
  v13 = *((_QWORD *)a2 + 7);
  if (*(_QWORD *)(*(_QWORD *)(v13 + 41952) + 1768) == a3)
  {
    v14 = *((_QWORD *)v11 + 1);
    if ((v14 & 1) != 0)
      v15 = v11 + 4;
    else
      v15 = (unsigned int *)(v14 + 4);
    v16 = *v15;
    if ((v16 & 0x80000000) != 0)
      v17 = COERCE__INT64((double)v16) + 0x2000000000000;
    else
      v17 = v16 | 0xFFFE000000000000;
    *(_QWORD *)a4 = v17;
    v18 = 14;
    goto LABEL_8;
  }
  if (!a3)
  {
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0)
      return JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, *((JSC::VM **)a2 + 7), 0, a4);
    return 0;
  }
  v22 = *(_DWORD *)(a3 + 16);
  if ((v22 & 0x20) == 0)
  {
    v23 = *(_BYTE **)(a3 + 8);
    v24 = *(unsigned int *)(a3 + 4);
    if ((v22 & 4) != 0)
    {
      if (!(_DWORD)v24)
        goto LABEL_15;
      v25 = *v23 - 48;
      if (v25 > 9 || v24 >= 2 && *v23 == 48)
        goto LABEL_15;
      v68 = v23 + 1;
      v69 = v24 - 1;
      while (v69)
      {
        if (v25 <= 0x19999999)
        {
          v70 = *v68 - 48;
          if (v70 <= 9)
          {
            v42 = __CFADD__(v70, 10 * v25);
            v25 = v70 + 10 * (_DWORD)v25;
            ++v68;
            --v69;
            if (!v42)
              continue;
          }
        }
        goto LABEL_15;
      }
    }
    else
    {
      if (!(_DWORD)v24)
        goto LABEL_15;
      v25 = *(unsigned __int16 *)v23 - 48;
      if (v25 > 9)
        goto LABEL_15;
      if (*(_WORD *)v23 == 48 && v24 > 1)
        goto LABEL_15;
      v39 = (unsigned __int16 *)(v23 + 2);
      v40 = v24 - 1;
      while (v40)
      {
        if (v25 <= 0x19999999)
        {
          v41 = *v39 - 48;
          if (v41 <= 9)
          {
            v42 = __CFADD__(v41, 10 * v25);
            v25 = v41 + 10 * (_DWORD)v25;
            ++v39;
            --v40;
            if (!v42)
              continue;
          }
        }
        goto LABEL_15;
      }
    }
    if ((_DWORD)v25 != -1)
    {
      v71 = *((_QWORD *)v11 + 1);
      v72 = (v71 & 1) != 0 ? v11 + 4 : (unsigned int *)(v71 + 4);
      if (*v72 > v25)
      {
        Index = JSC::JSString::getIndex((JSC::JSString *)v11, a2, v25, a4, a5, a6, a7, a8, a9);
        if (!*(_DWORD *)(v13 + 80)
          || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, v73, v74, v75, v76, v77, v78, v79))
        {
          *(_QWORD *)a4 = Index;
          v18 = 10;
LABEL_8:
          *(_DWORD *)(a4 + 16) = v18;
          *(_QWORD *)(a4 + 32) = 0;
          result = 1;
          *(_BYTE *)(a4 + 49) = 1;
          return result;
        }
        v13 = *((_QWORD *)a2 + 7);
      }
    }
  }
LABEL_15:
  if (!(a3 >> 4))
    goto LABEL_61;
  v26 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
  if (((a3 >> 4) & ~*(_DWORD *)(v26 + 0x20)) != 0)
    goto LABEL_61;
  v27 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
  if (!v27)
  {
    v43 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
    if (!v43 || *(_BYTE *)(v43 + 5) != 1 && *(_DWORD *)(v43 + 80) < 2u)
      goto LABEL_61;
    JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), (JSC::VM *)v13, 1, (const JSC::PropertyTable *)a4, a5, a6, a7, a8);
    if (!v27)
      goto LABEL_61;
  }
  if (!*(_DWORD *)(v27 + 24))
    goto LABEL_61;
  v28 = *(_QWORD *)(v27 + 16);
  v29 = v28 & 0xFFFFFFFFFFFFFFFELL;
  v30 = *(unsigned int *)(v27 + 8);
  v31 = *(_DWORD *)(a3 + 16);
  if ((v28 & 1) != 0)
  {
    if ((v31 & 0x20) != 0)
      v31 = *(_DWORD *)(a3 + 32);
    v32 = *(_DWORD *)(v27 + 12);
    v33 = (v31 >> 8) & *(_QWORD *)&v32;
    v34 = *(unsigned __int8 *)(v29 + v33);
    if (*(_BYTE *)(v29 + v33))
    {
      v35 = v29 + v30;
      v36 = 1;
      while (1)
      {
        v37 = *(_QWORD *)(v35 + 8 * (v34 - 1));
        if (a3 == (v37 & 0xFFFFFFFFFFFFLL))
          break;
        v33 = ((_DWORD)v33 + v36) & v32;
        v34 = *(unsigned __int8 *)(v29 + v33);
        ++v36;
        if (!*(_BYTE *)(v29 + v33))
          goto LABEL_61;
      }
      a6 = (v37 >> 16) & 0xFF00000000 | HIBYTE(v37);
      goto LABEL_43;
    }
LABEL_61:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0
      && (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)a1, (JSC::VM *)v13, a3, a4) & 1) != 0)
    {
      return 1;
    }
    v53 = *(_DWORD *)(a3 + 16);
    if ((v53 & 0x20) == 0)
    {
      v54 = *(_BYTE **)(a3 + 8);
      v55 = *(unsigned int *)(a3 + 4);
      if ((v53 & 4) != 0)
      {
        if ((_DWORD)v55)
        {
          v56 = *v54 - 48;
          if (v56 <= 9 && (v55 < 2 || *v54 != 48))
          {
            v81 = v54 + 1;
            v82 = v55 - 1;
            while (v82)
            {
              if (v56 > 0x19999999)
                goto LABEL_66;
              v83 = *v81 - 48;
              if (v83 > 9)
                goto LABEL_66;
              v57 = 0;
              v58 = 0;
              v59 = 0;
              v42 = __CFADD__(v83, 10 * v56);
              v56 = v83 + 10 * v56;
              ++v81;
              --v82;
              if (v42)
                goto LABEL_67;
            }
            goto LABEL_122;
          }
        }
      }
      else if ((_DWORD)v55)
      {
        v56 = *(unsigned __int16 *)v54 - 48;
        if (v56 <= 9 && (*(_WORD *)v54 != 48 || v55 <= 1))
        {
          v60 = (unsigned __int16 *)(v54 + 2);
          v61 = v55 - 1;
          while (v61)
          {
            if (v56 > 0x19999999)
              goto LABEL_66;
            v62 = *v60 - 48;
            if (v62 > 9)
              goto LABEL_66;
            v57 = 0;
            v58 = 0;
            v59 = 0;
            v42 = __CFADD__(v62, 10 * v56);
            v56 = v62 + 10 * v56;
            ++v60;
            --v61;
            if (v42)
              goto LABEL_67;
          }
LABEL_122:
          v57 = 0x100000000;
          if (v56 == -1)
          {
            v57 = 0;
            v58 = 0;
          }
          else
          {
            v58 = v56;
          }
          if (v56 == -1)
            v59 = 0;
          else
            v59 = v56 & 0xFFFFFF00;
LABEL_67:
          if ((v57 & 0x100000000) != 0)
            return JSC::JSObject::getOwnPropertySlotByIndex(a1, (uint64_t)a2, (const WTF::StringImpl *)(v59 | v58), a4, a5, a6, a7, a8);
          return 0;
        }
      }
LABEL_66:
      v57 = 0;
      v58 = 0;
      v59 = 0;
      goto LABEL_67;
    }
    return 0;
  }
  if ((v31 & 0x20) != 0)
    v31 = *(_DWORD *)(a3 + 32);
  v47 = *(_DWORD *)(v27 + 12);
  v48 = v47 & (v31 >> 8);
  v49 = *(_DWORD *)(v29 + 4 * v48);
  if (!v49)
    goto LABEL_61;
  v50 = v29 + 4 * v30;
  v51 = 1;
  while (1)
  {
    v52 = (v49 - 1);
    if (*(_QWORD *)(v50 + 16 * v52) == a3)
      break;
    v48 = (v48 + v51) & v47;
    v49 = *(_DWORD *)(v29 + 4 * v48);
    ++v51;
    if (!v49)
      goto LABEL_61;
  }
  a6 = *(unsigned int *)(v50 + 16 * v52 + 8) | ((unint64_t)*(unsigned __int8 *)(v50 + 16 * v52 + 12) << 32);
LABEL_43:
  if ((_DWORD)a6 == -1)
    goto LABEL_61;
  if ((int)a6 <= 63)
  {
    v44 = a6 << 32;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 8) - 8;
    v44 = 0x3F00000000 - (a6 << 32);
  }
  v45 = *(_QWORD *)(v12 + (v44 >> 29));
  if ((v45 & 0xFFFE000000000002) != 0)
    goto LABEL_49;
  v46 = *(unsigned __int8 *)(v45 + 5);
  if (v46 == 5)
  {
    JSC::JSObject::fillGetterPropertySlot((unsigned int *)a1, v13, a4, v45, SHIDWORD(a6), a6);
    return 1;
  }
  if (v46 != 6)
  {
LABEL_49:
    *(_QWORD *)a4 = v45;
    *(_QWORD *)(a4 + 32) = a1;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_DWORD *)(a4 + 20) = a6;
    result = 1;
    *(_WORD *)(a4 + 48) = 257;
    return result;
  }
  v63 = *(_DWORD *)(v26 + 16) & 3;
  v65 = *(_QWORD *)(v45 + 8);
  v64 = *(_QWORD *)(v45 + 16);
  if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                         * *(unsigned int *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C)))
  {
    v67 = *(_QWORD *)(v45 + 24);
    v66 = *(_QWORD *)(v45 + 32);
    *(_QWORD *)a4 = v65;
    *(_QWORD *)(a4 + 8) = v64;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    *(_BYTE *)(a4 + 49) = 3;
    result = 1;
    if (v63 != 2)
      *(_BYTE *)(a4 + 48) = 1;
    *(_BYTE *)(a4 + 51) = 1;
    *(_QWORD *)(a4 + 72) = v67;
    *(_QWORD *)(a4 + 80) = v66;
  }
  else
  {
    *(_QWORD *)a4 = v65;
    *(_QWORD *)(a4 + 8) = v64;
    *(_DWORD *)(a4 + 16) = HIDWORD(a6);
    *(_QWORD *)(a4 + 32) = a1;
    result = 1;
    *(_BYTE *)(a4 + 49) = 3;
    if (v63 != 2)
      *(_BYTE *)(a4 + 48) = 1;
  }
  return result;
}

uint64_t JSC::StringObject::getOwnPropertySlotByIndex(JSC::StringObject *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  _QWORD *v13;
  char *v14;
  JSC::VM *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Index;
  uint64_t OwnPropertySlotByIndex;
  WTF::AtomStringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  _BYTE *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  WTF::StringImpl *v65;
  unsigned __int16 *v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  WTF::StringImpl *v86;

  v14 = (char *)this + 16;
  v13 = (_QWORD *)*((_QWORD *)this + 2);
  v15 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v16 = v13[1];
  if ((v16 & 1) != 0)
    v17 = v13 + 2;
  else
    v17 = (_DWORD *)(v16 + 4);
  if (*v17 > a3)
  {
    Index = JSC::JSString::getIndex((JSC::JSString *)v13, a2, (uint64_t)a3, a4, (uint64_t)a5, a6, a7, a8, a9);
    if (!*((_DWORD *)v15 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v15, v18, v19, v20, v21, v22, v23, v24))
    {
      *(_QWORD *)a4 = Index;
      *(_DWORD *)(a4 + 16) = 10;
      *(_QWORD *)(a4 + 32) = 0;
      OwnPropertySlotByIndex = 1;
      *(_BYTE *)(a4 + 49) = 1;
      return OwnPropertySlotByIndex;
    }
    v15 = (JSC::VM *)*((_QWORD *)a2 + 7);
  }
  JSC::Identifier::from((uint64_t **)v15, (unint64_t)a3, a3, a4, (uint64_t)a5, a6, a7, a8, (int **)&v86);
  v35 = v86;
  v36 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)v86 >> 4))
  {
    v37 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
    if ((((unint64_t)v86 >> 4) & ~*(_DWORD *)(v37 + 0x20)) == 0)
    {
      v38 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x58);
      if (v38
        || (v49 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40)) != 0
        && (*(_BYTE *)(v49 + 5) == 1 || *(_DWORD *)(v49 + 80) >= 2u)
        && (JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), *((JSC::VM **)a2 + 7), 1, (const JSC::PropertyTable *)v30, v31, v32, v33, v34), v38))
      {
        if (*(_DWORD *)(v38 + 24))
        {
          v39 = *(_QWORD *)(v38 + 16);
          v40 = v39 & 0xFFFFFFFFFFFFFFFELL;
          v41 = *(unsigned int *)(v38 + 8);
          v42 = *((_DWORD *)v35 + 4);
          if ((v39 & 1) != 0)
          {
            if ((v42 & 0x20) != 0)
              v42 = *((_DWORD *)v35 + 8);
            v43 = *(_DWORD *)(v38 + 12);
            v44 = (v42 >> 8) & *(_QWORD *)&v43;
            v45 = *(unsigned __int8 *)(v40 + v44);
            if (!*(_BYTE *)(v40 + v44))
              goto LABEL_45;
            v46 = v40 + v41;
            v47 = 1;
            while (1)
            {
              v48 = *(_QWORD *)(v46 + 8 * (v45 - 1));
              if (v35 == (WTF::StringImpl *)(v48 & 0xFFFFFFFFFFFFLL))
                break;
              v44 = ((_DWORD)v44 + v47) & v43;
              v45 = *(unsigned __int8 *)(v40 + v44);
              ++v47;
              if (!*(_BYTE *)(v40 + v44))
                goto LABEL_45;
            }
            v32 = (v48 >> 16) & 0xFF00000000 | HIBYTE(v48);
          }
          else
          {
            if ((v42 & 0x20) != 0)
              v42 = *((_DWORD *)v35 + 8);
            v52 = *(_DWORD *)(v38 + 12);
            v53 = v52 & (v42 >> 8);
            v54 = *(_DWORD *)(v40 + 4 * v53);
            if (!v54)
              goto LABEL_45;
            v55 = v40 + 4 * v41;
            v56 = 1;
            while (1)
            {
              v57 = (v54 - 1);
              if (v35 == *(WTF::StringImpl **)(v55 + 16 * v57))
                break;
              v53 = (v53 + v56) & v52;
              v54 = *(_DWORD *)(v40 + 4 * v53);
              ++v56;
              if (!v54)
                goto LABEL_45;
            }
            v32 = *(unsigned int *)(v55 + 16 * v57 + 8) | ((unint64_t)*(unsigned __int8 *)(v55 + 16 * v57 + 12) << 32);
          }
          if ((_DWORD)v32 != -1)
          {
            v31 = HIDWORD(v32);
            if ((int)v32 <= 63)
            {
              v50 = v32 << 32;
            }
            else
            {
              v14 = (char *)(*((_QWORD *)this + 1) - 8);
              v50 = 0x3F00000000 - (v32 << 32);
            }
            v30 = *(_QWORD *)&v14[v50 >> 29];
            if ((v30 & 0xFFFE000000000002) != 0)
            {
LABEL_33:
              *(_QWORD *)a4 = v30;
              *(_QWORD *)(a4 + 32) = this;
              *(_DWORD *)(a4 + 16) = HIDWORD(v32);
              *(_DWORD *)(a4 + 20) = v32;
              OwnPropertySlotByIndex = 1;
              *(_WORD *)(a4 + 48) = 257;
              goto LABEL_54;
            }
            v51 = *(unsigned __int8 *)(v30 + 5);
            if (v51 != 5)
            {
              if (v51 == 6)
              {
                v78 = *(_DWORD *)(v37 + 16) & 3;
                v80 = *(_QWORD *)(v30 + 8);
                v79 = *(_QWORD *)(v30 + 16);
                if (&JSC::DOMAttributeGetterSetter::s_info == (char **)(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v30 & 0xFFFFFFFE)
                                                                                         + 0x4C)))
                {
                  v82 = *(_QWORD *)(v30 + 24);
                  v81 = *(_QWORD *)(v30 + 32);
                  *(_QWORD *)a4 = v80;
                  *(_QWORD *)(a4 + 8) = v79;
                  *(_DWORD *)(a4 + 16) = HIDWORD(v32);
                  *(_QWORD *)(a4 + 32) = this;
                  *(_BYTE *)(a4 + 49) = 3;
                  OwnPropertySlotByIndex = 1;
                  if (v78 != 2)
                    *(_BYTE *)(a4 + 48) = 1;
                  *(_BYTE *)(a4 + 51) = 1;
                  *(_QWORD *)(a4 + 72) = v82;
                  *(_QWORD *)(a4 + 80) = v81;
                }
                else
                {
                  *(_QWORD *)a4 = v80;
                  *(_QWORD *)(a4 + 8) = v79;
                  *(_DWORD *)(a4 + 16) = HIDWORD(v32);
                  *(_QWORD *)(a4 + 32) = this;
                  OwnPropertySlotByIndex = 1;
                  *(_BYTE *)(a4 + 49) = 3;
                  if (v78 != 2)
                    *(_BYTE *)(a4 + 48) = 1;
                }
                goto LABEL_54;
              }
              goto LABEL_33;
            }
            JSC::JSObject::fillGetterPropertySlot((unsigned int *)this, (uint64_t)v36, a4, v30, SHIDWORD(v32), v32);
            goto LABEL_68;
          }
        }
      }
    }
  }
LABEL_45:
  if ((*((_BYTE *)this + 6) & 0x20) == 0
    || (JSC::JSObject::getOwnStaticPropertySlot((unsigned int *)this, v36, (unint64_t)v35, a4) & 1) == 0)
  {
    if (!v35)
      goto LABEL_53;
    v58 = *((_DWORD *)v35 + 4);
    if ((v58 & 0x20) != 0)
      goto LABEL_53;
    v59 = (_BYTE *)*((_QWORD *)v35 + 1);
    v60 = *((unsigned int *)v35 + 1);
    if ((v58 & 4) != 0)
    {
      if ((_DWORD)v60)
      {
        v61 = *v59 - 48;
        if (v61 <= 9 && (v60 < 2 || *v59 != 48))
        {
          v83 = v59 + 1;
          v84 = v60 - 1;
          while (v84)
          {
            if (v61 > 0x19999999)
              goto LABEL_51;
            v85 = *v83 - 48;
            if (v85 > 9)
              goto LABEL_51;
            v62 = 0;
            v63 = 0;
            v64 = 0;
            v69 = __CFADD__(v85, 10 * v61);
            v61 = v85 + 10 * v61;
            ++v83;
            --v84;
            if (v69)
              goto LABEL_52;
          }
          goto LABEL_88;
        }
      }
    }
    else if ((_DWORD)v60)
    {
      v61 = *(unsigned __int16 *)v59 - 48;
      if (v61 <= 9 && (*(_WORD *)v59 != 48 || v60 <= 1))
      {
        v66 = (unsigned __int16 *)(v59 + 2);
        v67 = v60 - 1;
        while (v67)
        {
          if (v61 > 0x19999999)
            goto LABEL_51;
          v68 = *v66 - 48;
          if (v68 > 9)
            goto LABEL_51;
          v62 = 0;
          v63 = 0;
          v64 = 0;
          v69 = __CFADD__(v68, 10 * v61);
          v61 = v68 + 10 * v61;
          ++v66;
          --v67;
          if (v69)
            goto LABEL_52;
        }
LABEL_88:
        v62 = 0x100000000;
        if (v61 == -1)
        {
          v62 = 0;
          v63 = 0;
        }
        else
        {
          v63 = v61;
        }
        if (v61 == -1)
          v64 = 0;
        else
          v64 = v61 & 0xFFFFFF00;
LABEL_52:
        v29 = v64 | v63;
        if ((v62 & 0x100000000) != 0)
        {
          OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex((uint64_t)this, (uint64_t)a2, (const WTF::StringImpl *)v29, a4, v31, v32, v33, v34);
          goto LABEL_54;
        }
LABEL_53:
        OwnPropertySlotByIndex = 0;
        goto LABEL_54;
      }
    }
LABEL_51:
    v62 = 0;
    v63 = 0;
    v64 = 0;
    goto LABEL_52;
  }
LABEL_68:
  OwnPropertySlotByIndex = 1;
LABEL_54:
  v65 = v86;
  v86 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
    {
      WTF::StringImpl::~StringImpl(v65, v28, v29, v30, v31, v32, v33, v34);
      WTF::fastFree(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    else
    {
      *(_DWORD *)v65 -= 2;
    }
  }
  return OwnPropertySlotByIndex;
}

void JSC::StringObject::getOwnPropertyNames(uint64_t a1, uint64_t a2, uint64_t a3, const JSC::PropertyTable *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;
  _QWORD *v18;
  WTF::AtomStringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl **v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::AtomStringImpl *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl **v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85[2];
  char v86;
  uint64_t v87;
  WTF::StringImpl *v88;

  v12 = *(_QWORD *)(a2 + 56);
  if ((*(_BYTE *)(a3 + 24) & 2) != 0)
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_QWORD *)(v13 + 8);
    v15 = (int *)(v13 + 16);
    if ((v14 & 1) == 0)
      v15 = (int *)(v14 + 4);
    v16 = *v15;
    if (*v15 >= 1)
    {
      v17 = 0;
      v18 = (_QWORD *)(a3 + 8);
      do
      {
        JSC::Identifier::from((uint64_t **)v12, v17, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v84);
        v20 = v84;
        v88 = v84;
        v21 = *((_DWORD *)v84 + 4);
        if ((v21 & 0x20) != 0)
        {
          if ((*(_BYTE *)(a3 + 24) & 1) != 0 && (!*(_BYTE *)(a3 + 25) || (*((_BYTE *)v84 + 36) & 4) == 0))
          {
LABEL_8:
            v22 = *(_QWORD *)a3;
            v23 = *(unsigned int *)(*(_QWORD *)a3 + 20);
            if (v23 <= 0x13)
            {
              if ((_DWORD)v23)
              {
                v32 = *(WTF::StringImpl ***)(v22 + 8);
                while (*v32 != v84)
                {
                  ++v32;
                  if (!--v23)
                    goto LABEL_13;
                }
                goto LABEL_23;
              }
            }
            else
            {
              if (!*v18 || !*(_DWORD *)(*v18 - 12))
              {
                v29 = *(uint64_t **)(v22 + 8);
                v30 = 8 * v23;
                do
                {
                  v31 = *v29++;
                  v87 = v31;
                  WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v87, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v85);
                  v30 -= 8;
                }
                while (v30);
              }
              WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v88, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v85);
              if (!v86)
                goto LABEL_23;
              v20 = v88;
              v22 = *(_QWORD *)a3;
              v21 = *((_DWORD *)v88 + 4);
            }
LABEL_13:
            if ((v21 & 0x20) == 0)
            {
              if ((v21 & 0x10) != 0)
              {
                *(_DWORD *)v20 += 2;
              }
              else
              {
                WTF::AtomStringImpl::addSlowCase(*(uint64_t **)(*(_QWORD *)(a3 + 16) + 41912), (unint64_t)v20, (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, v85);
                v20 = v85[0];
              }
              v24 = *(_DWORD *)v20;
              *(_DWORD *)v20 += 2;
              if (v24)
              {
LABEL_17:
                *(_DWORD *)v20 = v24;
              }
              else
              {
                WTF::StringImpl::~StringImpl(v20, v19, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
              }
              v85[0] = v20;
              v25 = *(unsigned int *)(v22 + 20);
              if ((_DWORD)v25 == *(_DWORD *)(v22 + 16))
              {
                WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(v22 + 8, (unint64_t)v85);
              }
              else
              {
                v26 = *(_QWORD *)(v22 + 8);
                v85[0] = 0;
                *(_QWORD *)(v26 + 8 * v25) = v20;
                *(_DWORD *)(v22 + 20) = v25 + 1;
              }
              v27 = v85[0];
              v85[0] = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                {
                  WTF::StringImpl::~StringImpl(v27, v19, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
                }
                else
                {
                  *(_DWORD *)v27 -= 2;
                }
              }
              goto LABEL_23;
            }
            v24 = *(_DWORD *)v20 + 2;
            goto LABEL_17;
          }
        }
        else if ((*(_BYTE *)(a3 + 24) & 2) != 0)
        {
          goto LABEL_8;
        }
LABEL_23:
        v28 = v84;
        v84 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
          {
            WTF::StringImpl::~StringImpl(v28, v19, a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
          }
          else
          {
            *(_DWORD *)v28 -= 2;
          }
        }
        v17 = (v17 + 1);
      }
      while ((_DWORD)v17 != v16);
    }
    JSC::JSObject::getOwnIndexedPropertyNames(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  if (!(_DWORD)a4)
  {
    v57 = *(WTF::StringImpl **)(*(_QWORD *)(v12 + 41952) + 1768);
    v88 = v57;
    if ((*((_BYTE *)v57 + 16) & 0x20) != 0)
    {
      if ((*(_BYTE *)(a3 + 24) & 1) == 0 || *(_BYTE *)(a3 + 25) && (*((_BYTE *)v57 + 36) & 4) != 0)
        goto LABEL_54;
    }
    else if ((*(_BYTE *)(a3 + 24) & 2) == 0)
    {
      goto LABEL_54;
    }
    v58 = *(_QWORD *)a3;
    v59 = *(unsigned int *)(*(_QWORD *)a3 + 20);
    if (v59 <= 0x13)
    {
      if (!(_DWORD)v59)
        goto LABEL_49;
      v75 = *(WTF::StringImpl ***)(v58 + 8);
      while (*v75 != v57)
      {
        ++v75;
        if (!--v59)
          goto LABEL_49;
      }
    }
    else
    {
      v60 = *(_QWORD *)(a3 + 8);
      if (!v60 || !*(_DWORD *)(v60 - 12))
      {
        v72 = *(uint64_t **)(v58 + 8);
        v73 = 8 * v59;
        do
        {
          v74 = *v72++;
          v87 = v74;
          WTF::HashTable<WTF::UniquedStringImpl *,WTF::UniquedStringImpl *,WTF::IdentityExtractor,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>>::add((uint64_t *)(a3 + 8), &v87, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v85);
          v73 -= 8;
        }
        while (v73);
      }
      WTF::HashSet<WTF::UniquedStringImpl *,WTF::DefaultHash<WTF::UniquedStringImpl *>,WTF::HashTraits<WTF::UniquedStringImpl *>,WTF::HashTableTraits>::add((uint64_t *)(a3 + 8), (uint64_t *)&v88, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)v85);
      if (v86)
      {
        v57 = v88;
        v58 = *(_QWORD *)a3;
LABEL_49:
        JSC::Identifier::fromUid(v57, *(_QWORD *)(a3 + 16), (const WTF::StringImpl *)a3, (uint64_t)a4, a5, a6, a7, a8, v85);
        v68 = *(unsigned int *)(v58 + 20);
        if ((_DWORD)v68 == *(_DWORD *)(v58 + 16))
        {
          WTF::Vector<JSC::Identifier,20ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Identifier>(v58 + 8, (unint64_t)v85);
        }
        else
        {
          v69 = *(_QWORD *)(v58 + 8);
          v70 = v85[0];
          v85[0] = 0;
          *(_QWORD *)(v69 + 8 * v68) = v70;
          *(_DWORD *)(v58 + 20) = v68 + 1;
        }
        v71 = v85[0];
        v85[0] = 0;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2)
          {
            WTF::StringImpl::~StringImpl(v71, v61, v62, v63, v64, v65, v66, v67);
            WTF::fastFree(v76, v77, v78, v79, v80, v81, v82, v83);
          }
          else
          {
            *(_DWORD *)v71 -= 2;
          }
        }
      }
    }
  }
LABEL_54:
  JSC::JSObject::getOwnNonIndexPropertyNames((_DWORD *)a1, a2, a3, a4);
}

uint64_t JSC::StringObject::defineOwnProperty(JSC::JSObject *a1, JSC::JSGlobalObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v14;
  int v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int16 *v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t OwnPropertyDescriptor;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t isExtensible;
  __n128 v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  _QWORD v51[4];

  v14 = *((_QWORD *)a2 + 7);
  if (*(_QWORD *)(*(_QWORD *)(v14 + 41952) + 1768) != a3)
  {
    if (!a3)
      return JSC::JSObject::defineOwnProperty(a1, a2, a3, a4, a5, a6, a7, a8, a9);
    v15 = *(_DWORD *)(a3 + 16);
    if ((v15 & 0x20) != 0)
      return JSC::JSObject::defineOwnProperty(a1, a2, a3, a4, a5, a6, a7, a8, a9);
    v16 = *(_BYTE **)(a3 + 8);
    v17 = *(unsigned int *)(a3 + 4);
    if ((v15 & 4) != 0)
    {
      if ((_DWORD)v17)
      {
        v18 = *v16 - 48;
        if (v18 <= 9 && (v17 < 2 || *v16 != 48))
        {
          v48 = v17 - 1;
          v49 = v16 + 1;
          while (v48)
          {
            if (v18 > 0x19999999)
              goto LABEL_7;
            v50 = *v49 - 48;
            if (v50 > 9)
              goto LABEL_7;
            v19 = 0;
            LODWORD(v17) = 0;
            v20 = 0;
            v27 = __CFADD__(v50, 10 * v18);
            v18 = v50 + 10 * v18;
            --v48;
            ++v49;
            if (v27)
              goto LABEL_9;
          }
          goto LABEL_44;
        }
        goto LABEL_7;
      }
    }
    else if ((_DWORD)v17)
    {
      v18 = *(unsigned __int16 *)v16 - 48;
      if (v18 <= 9 && (*(_WORD *)v16 != 48 || v17 <= 1))
      {
        v24 = (unsigned __int16 *)(v16 + 2);
        v25 = v17 - 1;
        while (v25)
        {
          if (v18 > 0x19999999)
            goto LABEL_7;
          v26 = *v24 - 48;
          if (v26 > 9)
            goto LABEL_7;
          v19 = 0;
          LODWORD(v17) = 0;
          v20 = 0;
          v27 = __CFADD__(v26, 10 * v18);
          v18 = v26 + 10 * v18;
          ++v24;
          --v25;
          if (v27)
            goto LABEL_9;
        }
LABEL_44:
        v19 = 0x100000000;
        if (v18 == -1)
        {
          v19 = 0;
          LODWORD(v17) = 0;
        }
        else
        {
          LODWORD(v17) = v18;
        }
        if (v18 == -1)
          v20 = 0;
        else
          v20 = v18 & 0xFFFFFF00;
        goto LABEL_9;
      }
LABEL_7:
      v19 = 0;
      LODWORD(v17) = 0;
LABEL_8:
      v20 = 0;
LABEL_9:
      v21 = v20 | v17;
      if ((v19 & 0x100000000) != 0)
      {
        v28 = *((_QWORD *)a1 + 2);
        v29 = *(_QWORD *)(v28 + 8);
        v30 = (unsigned int *)(v28 + 16);
        if ((v29 & 1) == 0)
          v30 = (unsigned int *)(v29 + 4);
        if (*v30 > v21)
          goto LABEL_25;
      }
      return JSC::JSObject::defineOwnProperty(a1, a2, a3, a4, a5, a6, a7, a8, a9);
    }
    v19 = 0;
    goto LABEL_8;
  }
LABEL_25:
  memset(v51, 0, 24);
  v51[3] = 14;
  OwnPropertyDescriptor = JSC::JSObject::getOwnPropertyDescriptor(a1, (uint64_t)a2, (WTF::StringImpl *)a3, (uint64_t)v51);
  if (*(_DWORD *)(v14 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, v31, v32, v33, v34, v35, v36, v37))
  {
    return 0;
  }
  isExtensible = JSC::JSObject::isExtensible(a1, a2);
  return (!*(_DWORD *)(v14 + 80)
       || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, v39, v40, v41, v42, v43, v44, v45))
      && JSC::validateAndApplyPropertyDescriptor((JSC::VM **)a2, 0, a3, isExtensible, a4, OwnPropertyDescriptor, (uint64_t)v51, a5, v47);
}

uint64_t JSC::StringObject::StringObject(uint64_t result, uint64_t a2, unint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

{
  int v3;

  v3 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)result = a3 >> 4;
  *(_DWORD *)(result + 4) = v3;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

unint64_t JSC::StringObject::finishCreation(unint64_t this, JSC::VM *a2, unint64_t a3)
{
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *(_QWORD *)(this + 16) = a3;
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *((_DWORD *)a2 + 190) >= *(unsigned __int8 *)(this + 7))
    return JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, this);
  return this;
}

unint64_t JSC::constructString(JSC::StringObject *a1, uint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  JSC::VM *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;

  v10 = *(_DWORD *)(a2 + 1160);
  if (v10)
    v11 = (JSC::VM *)(16 * (v10 & 0xFFFFFFFE));
  else
    v11 = 0;
  v12 = JSC::StringObject::create(a1, v11, a3, a4, a5, a6, a7, a8);
  v13 = v12;
  *(_QWORD *)(v12 + 16) = a3;
  if (a3
    && ((unint64_t)a3 & 0xFFFE000000000002) == 0
    && *((_DWORD *)a1 + 190) >= *(unsigned __int8 *)(v12 + 7))
  {
    v15 = (uint64_t)a1 + 192;
    v16 = v13;
    JSC::Heap::writeBarrierSlowPath(v15, v13);
    return v16;
  }
  return v13;
}

unint64_t JSC::StringObject::create(JSC::StringObject *this, JSC::VM *a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  unint64_t v11;
  int v12;

  v10 = *((_QWORD *)this + 5246);
  v11 = JSC::allocateCell<JSC::StringObject>(this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v12 = *((_DWORD *)a2 + 2);
  *(_DWORD *)v11 = (unint64_t)a2 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  JSC::StringObject::finishCreation(v11, this, v10);
  return v11;
}

void JSC::StringPrototype::finishCreation(JSC::StringPrototype *this, JSC::VM *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::AtomStringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  WTF::StringImpl *v22;
  WTF::AtomStringImpl *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::AtomStringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  WTF::StringImpl *v43;
  WTF::AtomStringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::AtomStringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  WTF::StringImpl *v62;
  WTF::AtomStringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::AtomStringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  WTF::StringImpl *v81;
  WTF::AtomStringImpl *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::AtomStringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  WTF::StringImpl *v100;
  WTF::AtomStringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  int v110;
  WTF::StringImpl *v111;
  WTF::AtomStringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __n128 v120;
  WTF::StringImpl *v121;
  WTF::AtomStringImpl *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::AtomStringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  __n128 v139;
  WTF::StringImpl *v140;
  WTF::AtomStringImpl *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  WTF::StringImpl *v149;
  WTF::AtomStringImpl *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __n128 v158;
  WTF::StringImpl *v159;
  WTF::AtomStringImpl *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  WTF::StringImpl *v170;
  WTF::AtomStringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __n128 v179;
  WTF::StringImpl *v180;
  WTF::AtomStringImpl *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  int v190;
  WTF::StringImpl *v191;
  WTF::AtomStringImpl *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __n128 v200;
  WTF::StringImpl *v201;
  WTF::AtomStringImpl *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::AtomStringImpl *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __n128 v221;
  WTF::StringImpl *v222;
  WTF::AtomStringImpl *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::AtomStringImpl *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __n128 v240;
  WTF::StringImpl *v241;
  WTF::AtomStringImpl *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __n128 v252;
  uint64_t v253;
  WTF::StringImpl *v254;
  uint64_t v255;
  WTF::AtomStringImpl *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::AtomStringImpl *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  __n128 v273;
  WTF::StringImpl *v274;
  WTF::AtomStringImpl *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WTF::AtomStringImpl *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  __n128 v292;
  WTF::StringImpl *v293;
  WTF::AtomStringImpl *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  WTF::AtomStringImpl *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  __n128 v311;
  WTF::StringImpl *v312;
  WTF::AtomStringImpl *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  WTF::AtomStringImpl *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  __n128 v330;
  WTF::StringImpl *v331;
  WTF::AtomStringImpl *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  WTF::StringImpl *v339;
  WTF::StringImpl *v340;
  WTF::AtomStringImpl *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  __n128 v349;
  WTF::StringImpl *v350;
  WTF::AtomStringImpl *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  WTF::StringImpl *v358;
  WTF::StringImpl *v359;
  WTF::AtomStringImpl *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  __n128 v368;
  WTF::StringImpl *v369;
  WTF::AtomStringImpl *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  WTF::StringImpl *v377;
  WTF::StringImpl *v378;
  WTF::AtomStringImpl *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  __n128 v387;
  WTF::StringImpl *v388;
  WTF::AtomStringImpl *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  WTF::StringImpl *v396;
  WTF::StringImpl *v397;
  WTF::AtomStringImpl *v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  __n128 v406;
  WTF::StringImpl *v407;
  WTF::AtomStringImpl *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  WTF::StringImpl *v415;
  WTF::StringImpl *v416;
  WTF::AtomStringImpl *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  __n128 v425;
  WTF::StringImpl *v426;
  WTF::AtomStringImpl *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  WTF::StringImpl *v434;
  WTF::StringImpl *v435;
  WTF::AtomStringImpl *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  __n128 v444;
  WTF::StringImpl *v445;
  WTF::AtomStringImpl *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  WTF::StringImpl *v454;
  WTF::AtomStringImpl *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  __n128 v463;
  WTF::StringImpl *v464;
  WTF::AtomStringImpl *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  int v472;
  int v473;
  WTF::StringImpl *v474;
  uint64_t v475;
  WTF::StringImpl *v476;
  uint64_t v477;
  double v478;
  float v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  WTF::StringImpl *v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  __n128 v491;
  WTF::AtomStringImpl *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  WTF::AtomStringImpl *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  WTF::StringImpl *v508;
  uint64_t v509;
  WTF::AtomStringImpl *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  WTF::StringImpl *v518;
  WTF::StringImpl *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  __n128 v523;
  WTF::AtomStringImpl *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  WTF::StringImpl *v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  __n128 v535;
  WTF::AtomStringImpl *v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  WTF::StringImpl *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  __n128 v547;
  WTF::AtomStringImpl *v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  WTF::StringImpl *v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  __n128 v559;
  WTF::AtomStringImpl *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  WTF::AtomStringImpl *v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  __n128 v576;
  WTF::StringImpl *v577;
  int v578;
  WTF::StringImpl *v579;
  WTF::AtomStringImpl *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  __n128 v588;
  WTF::StringImpl *v589;
  WTF::AtomStringImpl *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  int v597;
  int v598;
  int v599;
  WTF::StringImpl *v600;
  WTF::AtomStringImpl *v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  __n128 v609;
  WTF::StringImpl *v610;
  WTF::AtomStringImpl *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  int v618;
  int v619;
  uint64_t v620;
  WTF::StringImpl *v621;
  int v622;
  WTF::StringImpl *v623;
  WTF::AtomStringImpl *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  __n128 v632;
  WTF::StringImpl *v633;
  WTF::AtomStringImpl *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  WTF::StringImpl *v642;
  int v643;
  WTF::StringImpl *v644;
  WTF::AtomStringImpl *v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  __n128 v653;
  WTF::StringImpl *v654;
  WTF::AtomStringImpl *v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  void *v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  void *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t v678;
  void *v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  void *v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  unint64_t v694;
  void *v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unint64_t v702;
  void *v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  unint64_t v710;
  void *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  unint64_t v718;
  void *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unint64_t v726;
  void *v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  unint64_t v734;
  void *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  unint64_t v742;
  void *v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  unint64_t v750;
  void *v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  unint64_t v758;
  void *v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  unint64_t v766;
  void *v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  unint64_t v774;
  void *v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  unint64_t v782;
  void *v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  void *v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  unint64_t v798;
  void *v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  void *v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  void *v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  void *v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  unint64_t v830;
  void *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  unint64_t v838;
  void *v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  unint64_t v846;
  void *v847;
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  unint64_t v854;
  void *v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  unint64_t v862;
  void *v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  unint64_t v870;
  void *v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  unint64_t v878;
  void *v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  void *v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  unint64_t v894;
  void *v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unint64_t v902;
  void *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  unint64_t v910;
  void *v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  void *v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  unint64_t v926;
  void *v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  unint64_t v934;
  void *v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  void *v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  unint64_t v950;
  void *v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  unint64_t v958;
  void *v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  unint64_t v966;
  void *v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  unint64_t v974;
  void *v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  unint64_t v982;
  void *v983;
  uint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  unint64_t v990;
  void *v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  unint64_t v998;
  void *v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  unint64_t v1006;
  void *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  void *v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  unint64_t v1022;
  void *v1023;
  uint64_t v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  unint64_t v1030;
  void *v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  unint64_t v1038;
  void *v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  unint64_t v1046;
  void *v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  unint64_t v1054;
  void *v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  unint64_t v1062;
  void *v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  unint64_t v1070;
  void *v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  void *v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  unint64_t v1086;
  void *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  unint64_t v1094;
  void *v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  unint64_t v1102;
  void *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  unint64_t v1110;
  void *v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  void *v1119;
  uint64_t v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  void *v1127;
  uint64_t v1128;
  uint64_t v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  unint64_t v1134;
  void *v1135;
  uint64_t v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  unint64_t v1142;
  void *v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  unint64_t v1150;
  void *v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  unint64_t v1158;
  void *v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  uint64_t v1165;
  unint64_t v1166;
  void *v1167;
  uint64_t v1168;
  uint64_t v1169;
  uint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  unint64_t v1174;
  void *v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  uint64_t v1181;
  unint64_t v1182;
  void *v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  void *v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  unint64_t v1198;
  void *v1199;
  uint64_t v1200;
  uint64_t v1201;
  uint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  unint64_t v1206;
  void *v1207;
  uint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t (*v1215)(WTF::StringImpl **);
  WTF::StringImpl **v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  __n128 v1227;
  WTF::StringImpl *v1228;
  WTF::StringImpl *v1229;
  __int128 v1230;

  v6 = (char *)a2 + 41952;
  v7 = *((_QWORD *)a2 + 5246);
  if (*((_BYTE *)a2 + 755))
    __dmb(0xAu);
  *((_QWORD *)this + 2) = v7;
  if (v7)
    v8 = (v7 & 0xFFFE000000000002) == 0;
  else
    v8 = 0;
  if (v8 && *((_DWORD *)a2 + 190) >= *((unsigned __int8 *)this + 7))
    JSC::Heap::writeBarrierSlowPath((uint64_t)a2 + 192, (unint64_t)this);
  v9 = *(_QWORD *)v6;
  v10 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2512);
  if (!v10)
  {
    v1228 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1228, 0, (uint64_t)JSC::stringProtoFuncToString, 0, 80, 4u);
    goto LABEL_16;
  }
  v11 = *(_DWORD *)v10 + 2;
  *(_DWORD *)v10 = v11;
  v1228 = v10;
  if ((*((_BYTE *)v10 + 16) & 0x20) != 0)
  {
    v12 = *(WTF::StringImpl **)(v9 + 872);
    if (!v12)
      goto LABEL_11;
    v11 = *(_DWORD *)v12;
  }
  else
  {
    v12 = v10;
  }
  *(_DWORD *)v12 = v11 + 2;
LABEL_11:
  v1229 = v12;
  v20 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncToString, 0, 80, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v22 = v1229;
  v1229 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, v13, v14, v15, v16, v17, v18, v19);
      WTF::fastFree(v902, v903, v904, v905, v906, v907, v908, v909);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v10, v20, 4, v17, v18, v19, v21);
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::~StringImpl(v10, v23, v24, v25, v26, v27, v28, v29);
    WTF::fastFree(v710, v711, v712, v713, v714, v715, v716, v717);
  }
  else
  {
    *(_DWORD *)v10 -= 2;
  }
LABEL_16:
  v30 = *(_QWORD *)v6;
  v31 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2616);
  if (!v31)
  {
    v1228 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1228, 0, (uint64_t)JSC::stringProtoFuncToString, 0, 80, 4u);
    goto LABEL_25;
  }
  v32 = *(_DWORD *)v31 + 2;
  *(_DWORD *)v31 = v32;
  v1228 = v31;
  if ((*((_BYTE *)v31 + 16) & 0x20) != 0)
  {
    v33 = *(WTF::StringImpl **)(v30 + 872);
    if (!v33)
      goto LABEL_20;
    v32 = *(_DWORD *)v33;
  }
  else
  {
    v33 = v31;
  }
  *(_DWORD *)v33 = v32 + 2;
LABEL_20:
  v1229 = v33;
  v41 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncToString, 0, 80, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v43 = v1229;
  v1229 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
    {
      WTF::StringImpl::~StringImpl(v43, v34, v35, v36, v37, v38, v39, v40);
      WTF::fastFree(v910, v911, v912, v913, v914, v915, v916, v917);
    }
    else
    {
      *(_DWORD *)v43 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v31, v41, 4, v38, v39, v40, v42);
  if (*(_DWORD *)v31 == 2)
  {
    WTF::StringImpl::~StringImpl(v31, v44, v45, v46, v47, v48, v49, v50);
    WTF::fastFree(v718, v719, v720, v721, v722, v723, v724, v725);
  }
  else
  {
    *(_DWORD *)v31 -= 2;
  }
LABEL_25:
  WTF::AtomStringImpl::addLiteral((uint64_t)"charAt", 6uLL, v46, v47, v48, v49, v50, &v1229);
  v51 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v52 = v1229;
LABEL_28:
    *(_DWORD *)v52 += 2;
    goto LABEL_29;
  }
  v52 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v52)
    goto LABEL_28;
LABEL_29:
  v1229 = v52;
  v60 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1229, (uint64_t)JSC::stringProtoFuncCharAt, 0, 29, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v62 = v1229;
  v1229 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
    {
      WTF::StringImpl::~StringImpl(v62, v53, v54, v55, v56, v57, v58, v59);
      WTF::fastFree(v726, v727, v728, v729, v730, v731, v732, v733);
    }
    else
    {
      *(_DWORD *)v62 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v51, v60, 4, v57, v58, v59, v61);
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
    {
      WTF::StringImpl::~StringImpl(v51, v63, v64, v65, v66, v67, v68, v69);
      WTF::fastFree(v734, v735, v736, v737, v738, v739, v740, v741);
    }
    else
    {
      *(_DWORD *)v51 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"charCodeAt", 0xAuLL, v65, v66, v67, v68, v69, &v1229);
  v70 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v71 = v1229;
LABEL_38:
    *(_DWORD *)v71 += 2;
    goto LABEL_39;
  }
  v71 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v71)
    goto LABEL_38;
LABEL_39:
  v1229 = v71;
  v79 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1229, (uint64_t)JSC::stringProtoFuncCharCodeAt, 0, 28, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v81 = v1229;
  v1229 = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
    {
      WTF::StringImpl::~StringImpl(v81, v72, v73, v74, v75, v76, v77, v78);
      WTF::fastFree(v742, v743, v744, v745, v746, v747, v748, v749);
    }
    else
    {
      *(_DWORD *)v81 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v70, v79, 4, v76, v77, v78, v80);
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
    {
      WTF::StringImpl::~StringImpl(v70, v82, v83, v84, v85, v86, v87, v88);
      WTF::fastFree(v750, v751, v752, v753, v754, v755, v756, v757);
    }
    else
    {
      *(_DWORD *)v70 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"codePointAt", 0xBuLL, v84, v85, v86, v87, v88, &v1229);
  v89 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v90 = v1229;
LABEL_48:
    *(_DWORD *)v90 += 2;
    goto LABEL_49;
  }
  v90 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v90)
    goto LABEL_48;
LABEL_49:
  v1229 = v90;
  v98 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1229, (uint64_t)JSC::stringProtoFuncCodePointAt, 0, 77, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v100 = v1229;
  v1229 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
    {
      WTF::StringImpl::~StringImpl(v100, v91, v92, v93, v94, v95, v96, v97);
      WTF::fastFree(v758, v759, v760, v761, v762, v763, v764, v765);
    }
    else
    {
      *(_DWORD *)v100 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v89, v98, 4, v95, v96, v97, v99);
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
    {
      WTF::StringImpl::~StringImpl(v89, v101, v102, v103, v104, v105, v106, v107);
      WTF::fastFree(v766, v767, v768, v769, v770, v771, v772, v773);
    }
    else
    {
      *(_DWORD *)v89 -= 2;
    }
  }
  v108 = *(_QWORD *)v6;
  v109 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 4088);
  if (!v109)
  {
    v1228 = 0;
    JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1228, 1, (uint64_t)JSC::stringProtoFuncIndexOf, 0, 78, 4u);
    goto LABEL_64;
  }
  v110 = *(_DWORD *)v109 + 2;
  *(_DWORD *)v109 = v110;
  v1228 = v109;
  if ((*((_BYTE *)v109 + 16) & 0x20) != 0)
  {
    v111 = *(WTF::StringImpl **)(v108 + 872);
    if (!v111)
      goto LABEL_59;
    v110 = *(_DWORD *)v111;
  }
  else
  {
    v111 = v109;
  }
  *(_DWORD *)v111 = v110 + 2;
LABEL_59:
  v1229 = v111;
  v119 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1229, (uint64_t)JSC::stringProtoFuncIndexOf, 0, 78, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v121 = v1229;
  v1229 = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
    {
      WTF::StringImpl::~StringImpl(v121, v112, v113, v114, v115, v116, v117, v118);
      WTF::fastFree(v918, v919, v920, v921, v922, v923, v924, v925);
    }
    else
    {
      *(_DWORD *)v121 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v109, v119, 4, v116, v117, v118, v120);
  if (*(_DWORD *)v109 == 2)
  {
    WTF::StringImpl::~StringImpl(v109, v122, v123, v124, v125, v126, v127, v128);
    WTF::fastFree(v774, v775, v776, v777, v778, v779, v780, v781);
  }
  else
  {
    *(_DWORD *)v109 -= 2;
  }
LABEL_64:
  WTF::AtomStringImpl::addLiteral((uint64_t)"lastIndexOf", 0xBuLL, v124, v125, v126, v127, v128, &v1229);
  v129 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v130 = v1229;
LABEL_67:
    *(_DWORD *)v130 += 2;
    goto LABEL_68;
  }
  v130 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v130)
    goto LABEL_67;
LABEL_68:
  v1229 = v130;
  v138 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1229, (uint64_t)JSC::stringProtoFuncLastIndexOf, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v140 = v1229;
  v1229 = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
    {
      WTF::StringImpl::~StringImpl(v140, v131, v132, v133, v134, v135, v136, v137);
      WTF::fastFree(v782, v783, v784, v785, v786, v787, v788, v789);
    }
    else
    {
      *(_DWORD *)v140 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v129, v138, 4, v135, v136, v137, v139);
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
    {
      WTF::StringImpl::~StringImpl(v129, v141, v142, v143, v144, v145, v146, v147);
      WTF::fastFree(v790, v791, v792, v793, v794, v795, v796, v797);
    }
    else
    {
      *(_DWORD *)v129 -= 2;
    }
  }
  v148 = JSC::Symbols::replaceUsingRegExpPrivateName[0] + 4;
  JSC::Symbols::replaceUsingRegExpPrivateName[0] += 4;
  if ((byte_1ECF31480 & 0x20) == 0)
  {
    v149 = (WTF::StringImpl *)JSC::Symbols::replaceUsingRegExpPrivateName;
LABEL_76:
    *(_DWORD *)v149 = v148 + 2;
    goto LABEL_77;
  }
  v149 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v149)
  {
    v148 = *(_DWORD *)v149;
    goto LABEL_76;
  }
LABEL_77:
  v1229 = v149;
  v157 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1229, (uint64_t)JSC::stringProtoFuncReplaceUsingRegExp, 0, 82, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v159 = v1229;
  v1229 = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 2)
    {
      WTF::StringImpl::~StringImpl(v159, v150, v151, v152, v153, v154, v155, v156);
      WTF::fastFree(v798, v799, v800, v801, v802, v803, v804, v805);
    }
    else
    {
      *(_DWORD *)v159 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::replaceUsingRegExpPrivateName, v157, 4, v154, v155, v156, v158);
  v167 = JSC::Symbols::replaceUsingRegExpPrivateName[0] - 2;
  if (JSC::Symbols::replaceUsingRegExpPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::replaceUsingRegExpPrivateName, v160, v161, v162, v163, v164, v165, v166);
    WTF::fastFree(v662, v663, v664, v665, v666, v667, v668, v669);
    v167 = JSC::Symbols::replaceUsingRegExpPrivateName[0];
  }
  else
  {
    JSC::Symbols::replaceUsingRegExpPrivateName[0] -= 2;
  }
  v168 = v167 - 2;
  if (v168)
  {
    JSC::Symbols::replaceUsingRegExpPrivateName[0] = v168;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::replaceUsingRegExpPrivateName, v160, v161, v162, v163, v164, v165, v166);
    WTF::fastFree(v670, v671, v672, v673, v674, v675, v676, v677);
  }
  v169 = JSC::Symbols::replaceUsingStringSearchPrivateName[0] + 4;
  JSC::Symbols::replaceUsingStringSearchPrivateName[0] += 4;
  if ((byte_1ECF314B0 & 0x20) == 0)
  {
    v170 = (WTF::StringImpl *)JSC::Symbols::replaceUsingStringSearchPrivateName;
LABEL_86:
    *(_DWORD *)v170 = v169 + 2;
    goto LABEL_87;
  }
  v170 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v170)
  {
    v169 = *(_DWORD *)v170;
    goto LABEL_86;
  }
LABEL_87:
  v1229 = v170;
  v178 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1229, (uint64_t)JSC::stringProtoFuncReplaceUsingStringSearch, 0, 83, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v180 = v1229;
  v1229 = 0;
  if (v180)
  {
    if (*(_DWORD *)v180 == 2)
    {
      WTF::StringImpl::~StringImpl(v180, v171, v172, v173, v174, v175, v176, v177);
      WTF::fastFree(v806, v807, v808, v809, v810, v811, v812, v813);
    }
    else
    {
      *(_DWORD *)v180 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::replaceUsingStringSearchPrivateName, v178, 4, v175, v176, v177, v179);
  v188 = JSC::Symbols::replaceUsingStringSearchPrivateName[0] - 2;
  if (JSC::Symbols::replaceUsingStringSearchPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::replaceUsingStringSearchPrivateName, v181, v182, v183, v184, v185, v186, v187);
    WTF::fastFree(v678, v679, v680, v681, v682, v683, v684, v685);
    v188 = JSC::Symbols::replaceUsingStringSearchPrivateName[0];
  }
  else
  {
    JSC::Symbols::replaceUsingStringSearchPrivateName[0] -= 2;
  }
  v189 = v188 - 2;
  if (v189)
  {
    JSC::Symbols::replaceUsingStringSearchPrivateName[0] = v189;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::replaceUsingStringSearchPrivateName, v181, v182, v183, v184, v185, v186, v187);
    WTF::fastFree(v686, v687, v688, v689, v690, v691, v692, v693);
  }
  v190 = JSC::Symbols::replaceAllUsingStringSearchPrivateName[0] + 4;
  JSC::Symbols::replaceAllUsingStringSearchPrivateName[0] += 4;
  if ((byte_1ECF314E0 & 0x20) == 0)
  {
    v191 = (WTF::StringImpl *)JSC::Symbols::replaceAllUsingStringSearchPrivateName;
LABEL_96:
    *(_DWORD *)v191 = v190 + 2;
    goto LABEL_97;
  }
  v191 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v191)
  {
    v190 = *(_DWORD *)v191;
    goto LABEL_96;
  }
LABEL_97:
  v1229 = v191;
  v199 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1229, (uint64_t)JSC::stringProtoFuncReplaceAllUsingStringSearch, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v201 = v1229;
  v1229 = 0;
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
    {
      WTF::StringImpl::~StringImpl(v201, v192, v193, v194, v195, v196, v197, v198);
      WTF::fastFree(v814, v815, v816, v817, v818, v819, v820, v821);
    }
    else
    {
      *(_DWORD *)v201 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::replaceAllUsingStringSearchPrivateName, v199, 4, v196, v197, v198, v200);
  v209 = JSC::Symbols::replaceAllUsingStringSearchPrivateName[0] - 2;
  if (JSC::Symbols::replaceAllUsingStringSearchPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::replaceAllUsingStringSearchPrivateName, v202, v203, v204, v205, v206, v207, v208);
    WTF::fastFree(v694, v695, v696, v697, v698, v699, v700, v701);
    v209 = JSC::Symbols::replaceAllUsingStringSearchPrivateName[0];
  }
  else
  {
    JSC::Symbols::replaceAllUsingStringSearchPrivateName[0] -= 2;
  }
  v210 = v209 - 2;
  if (v210)
  {
    JSC::Symbols::replaceAllUsingStringSearchPrivateName[0] = v210;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::replaceAllUsingStringSearchPrivateName, v202, v203, v204, v205, v206, v207, v208);
    WTF::fastFree(v702, v703, v704, v705, v706, v707, v708, v709);
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"slice", 5uLL, v204, v205, v206, v207, v208, &v1229);
  v211 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v212 = v1229;
LABEL_107:
    *(_DWORD *)v212 += 2;
    goto LABEL_108;
  }
  v212 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v212)
    goto LABEL_107;
LABEL_108:
  v1229 = v212;
  v220 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1229, (uint64_t)JSC::stringProtoFuncSlice, 0, 84, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v222 = v1229;
  v1229 = 0;
  if (v222)
  {
    if (*(_DWORD *)v222 == 2)
    {
      WTF::StringImpl::~StringImpl(v222, v213, v214, v215, v216, v217, v218, v219);
      WTF::fastFree(v822, v823, v824, v825, v826, v827, v828, v829);
    }
    else
    {
      *(_DWORD *)v222 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v211, v220, 4, v217, v218, v219, v221);
  if (v211)
  {
    if (*(_DWORD *)v211 == 2)
    {
      WTF::StringImpl::~StringImpl(v211, v223, v224, v225, v226, v227, v228, v229);
      WTF::fastFree(v830, v831, v832, v833, v834, v835, v836, v837);
    }
    else
    {
      *(_DWORD *)v211 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"substr", 6uLL, v225, v226, v227, v228, v229, &v1229);
  v230 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v231 = v1229;
LABEL_117:
    *(_DWORD *)v231 += 2;
    goto LABEL_118;
  }
  v231 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v231)
    goto LABEL_117;
LABEL_118:
  v1229 = v231;
  v239 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1229, (uint64_t)JSC::stringProtoFuncSubstr, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v241 = v1229;
  v1229 = 0;
  if (v241)
  {
    if (*(_DWORD *)v241 == 2)
    {
      WTF::StringImpl::~StringImpl(v241, v232, v233, v234, v235, v236, v237, v238);
      WTF::fastFree(v838, v839, v840, v841, v842, v843, v844, v845);
    }
    else
    {
      *(_DWORD *)v241 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v230, v239, 4, v236, v237, v238, v240);
  if (v230)
  {
    if (*(_DWORD *)v230 == 2)
    {
      WTF::StringImpl::~StringImpl(v230, v242, v243, v244, v245, v246, v247, v248);
      WTF::fastFree(v846, v847, v848, v849, v850, v851, v852, v853);
    }
    else
    {
      *(_DWORD *)v230 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"substring", 9uLL, v244, v245, v246, v247, v248, &v1229);
  v253 = *(_QWORD *)(a3 + 1960);
  if (*(_DWORD *)v253 <= 0xBDu)
  {
    __break(0xC471u);
    JUMPOUT(0x198BC35B8);
  }
  v254 = v1229;
  v255 = *(_QWORD *)(v253 + 1520);
  if ((v255 & 1) != 0)
  {
    v1214 = v253 + 1520;
    v1215 = *(uint64_t (**)(WTF::StringImpl **))(v255 & 0xFFFFFFFFFFFFFFFCLL);
    if ((a3 & 8) != 0)
      v1216 = (WTF::StringImpl **)(a3 - 16);
    else
      v1216 = (WTF::StringImpl **)(a3 & 0xFFFFFFFFFFFFC000 | 8);
    v1229 = *v1216;
    *(_QWORD *)&v1230 = a3;
    *((_QWORD *)&v1230 + 1) = v1214;
    v255 = v1215(&v1229);
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v254, v255, 4, v249, v250, v251, v252);
  if (v254)
  {
    if (*(_DWORD *)v254 == 2)
    {
      WTF::StringImpl::~StringImpl(v254, v256, v257, v258, v259, v260, v261, v262);
      WTF::fastFree(v926, v927, v928, v929, v930, v931, v932, v933);
    }
    else
    {
      *(_DWORD *)v254 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"toLowerCase", 0xBuLL, v258, v259, v260, v261, v262, &v1229);
  v263 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v264 = v1229;
LABEL_132:
    *(_DWORD *)v264 += 2;
    goto LABEL_133;
  }
  v264 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v264)
    goto LABEL_132;
LABEL_133:
  v1229 = v264;
  v272 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncToLowerCase, 0, 86, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v274 = v1229;
  v1229 = 0;
  if (v274)
  {
    if (*(_DWORD *)v274 == 2)
    {
      WTF::StringImpl::~StringImpl(v274, v265, v266, v267, v268, v269, v270, v271);
      WTF::fastFree(v934, v935, v936, v937, v938, v939, v940, v941);
    }
    else
    {
      *(_DWORD *)v274 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v263, v272, 4, v269, v270, v271, v273);
  if (v263)
  {
    if (*(_DWORD *)v263 == 2)
    {
      WTF::StringImpl::~StringImpl(v263, v275, v276, v277, v278, v279, v280, v281);
      WTF::fastFree(v942, v943, v944, v945, v946, v947, v948, v949);
    }
    else
    {
      *(_DWORD *)v263 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"toUpperCase", 0xBuLL, v277, v278, v279, v280, v281, &v1229);
  v282 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v283 = v1229;
LABEL_142:
    *(_DWORD *)v283 += 2;
    goto LABEL_143;
  }
  v283 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v283)
    goto LABEL_142;
LABEL_143:
  v1229 = v283;
  v291 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncToUpperCase, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v293 = v1229;
  v1229 = 0;
  if (v293)
  {
    if (*(_DWORD *)v293 == 2)
    {
      WTF::StringImpl::~StringImpl(v293, v284, v285, v286, v287, v288, v289, v290);
      WTF::fastFree(v950, v951, v952, v953, v954, v955, v956, v957);
    }
    else
    {
      *(_DWORD *)v293 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v282, v291, 4, v288, v289, v290, v292);
  if (v282)
  {
    if (*(_DWORD *)v282 == 2)
    {
      WTF::StringImpl::~StringImpl(v282, v294, v295, v296, v297, v298, v299, v300);
      WTF::fastFree(v958, v959, v960, v961, v962, v963, v964, v965);
    }
    else
    {
      *(_DWORD *)v282 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"localeCompare", 0xDuLL, v296, v297, v298, v299, v300, &v1229);
  v301 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v302 = v1229;
LABEL_152:
    *(_DWORD *)v302 += 2;
    goto LABEL_153;
  }
  v302 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v302)
    goto LABEL_152;
LABEL_153:
  v1229 = v302;
  v310 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1229, (uint64_t)JSC::stringProtoFuncLocaleCompare, 0, 79, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v312 = v1229;
  v1229 = 0;
  if (v312)
  {
    if (*(_DWORD *)v312 == 2)
    {
      WTF::StringImpl::~StringImpl(v312, v303, v304, v305, v306, v307, v308, v309);
      WTF::fastFree(v966, v967, v968, v969, v970, v971, v972, v973);
    }
    else
    {
      *(_DWORD *)v312 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v301, v310, 4, v307, v308, v309, v311);
  if (v301)
  {
    if (*(_DWORD *)v301 == 2)
    {
      WTF::StringImpl::~StringImpl(v301, v313, v314, v315, v316, v317, v318, v319);
      WTF::fastFree(v974, v975, v976, v977, v978, v979, v980, v981);
    }
    else
    {
      *(_DWORD *)v301 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"toLocaleLowerCase", 0x11uLL, v315, v316, v317, v318, v319, &v1229);
  v320 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v321 = v1229;
LABEL_162:
    *(_DWORD *)v321 += 2;
    goto LABEL_163;
  }
  v321 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v321)
    goto LABEL_162;
LABEL_163:
  v1229 = v321;
  v329 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncToLocaleLowerCase, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v331 = v1229;
  v1229 = 0;
  if (v331)
  {
    if (*(_DWORD *)v331 == 2)
    {
      WTF::StringImpl::~StringImpl(v331, v322, v323, v324, v325, v326, v327, v328);
      WTF::fastFree(v982, v983, v984, v985, v986, v987, v988, v989);
    }
    else
    {
      *(_DWORD *)v331 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v320, v329, 4, v326, v327, v328, v330);
  if (v320)
  {
    if (*(_DWORD *)v320 == 2)
    {
      WTF::StringImpl::~StringImpl(v320, v332, v333, v334, v335, v336, v337, v338);
      WTF::fastFree(v990, v991, v992, v993, v994, v995, v996, v997);
    }
    else
    {
      *(_DWORD *)v320 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"toLocaleUpperCase", 0x11uLL, v334, v335, v336, v337, v338, &v1229);
  v339 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v340 = v1229;
LABEL_172:
    *(_DWORD *)v340 += 2;
    goto LABEL_173;
  }
  v340 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v340)
    goto LABEL_172;
LABEL_173:
  v1229 = v340;
  v348 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncToLocaleUpperCase, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v350 = v1229;
  v1229 = 0;
  if (v350)
  {
    if (*(_DWORD *)v350 == 2)
    {
      WTF::StringImpl::~StringImpl(v350, v341, v342, v343, v344, v345, v346, v347);
      WTF::fastFree(v998, v999, v1000, v1001, v1002, v1003, v1004, v1005);
    }
    else
    {
      *(_DWORD *)v350 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v339, v348, 4, v345, v346, v347, v349);
  if (v339)
  {
    if (*(_DWORD *)v339 == 2)
    {
      WTF::StringImpl::~StringImpl(v339, v351, v352, v353, v354, v355, v356, v357);
      WTF::fastFree(v1006, v1007, v1008, v1009, v1010, v1011, v1012, v1013);
    }
    else
    {
      *(_DWORD *)v339 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"trim", 4uLL, v353, v354, v355, v356, v357, &v1229);
  v358 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v359 = v1229;
LABEL_182:
    *(_DWORD *)v359 += 2;
    goto LABEL_183;
  }
  v359 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v359)
    goto LABEL_182;
LABEL_183:
  v1229 = v359;
  v367 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncTrim, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v369 = v1229;
  v1229 = 0;
  if (v369)
  {
    if (*(_DWORD *)v369 == 2)
    {
      WTF::StringImpl::~StringImpl(v369, v360, v361, v362, v363, v364, v365, v366);
      WTF::fastFree(v1014, v1015, v1016, v1017, v1018, v1019, v1020, v1021);
    }
    else
    {
      *(_DWORD *)v369 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v358, v367, 4, v364, v365, v366, v368);
  if (v358)
  {
    if (*(_DWORD *)v358 == 2)
    {
      WTF::StringImpl::~StringImpl(v358, v370, v371, v372, v373, v374, v375, v376);
      WTF::fastFree(v1022, v1023, v1024, v1025, v1026, v1027, v1028, v1029);
    }
    else
    {
      *(_DWORD *)v358 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"startsWith", 0xAuLL, v372, v373, v374, v375, v376, &v1229);
  v377 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v378 = v1229;
LABEL_192:
    *(_DWORD *)v378 += 2;
    goto LABEL_193;
  }
  v378 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v378)
    goto LABEL_192;
LABEL_193:
  v1229 = v378;
  v386 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1229, (uint64_t)JSC::stringProtoFuncStartsWith, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v388 = v1229;
  v1229 = 0;
  if (v388)
  {
    if (*(_DWORD *)v388 == 2)
    {
      WTF::StringImpl::~StringImpl(v388, v379, v380, v381, v382, v383, v384, v385);
      WTF::fastFree(v1030, v1031, v1032, v1033, v1034, v1035, v1036, v1037);
    }
    else
    {
      *(_DWORD *)v388 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v377, v386, 4, v383, v384, v385, v387);
  if (v377)
  {
    if (*(_DWORD *)v377 == 2)
    {
      WTF::StringImpl::~StringImpl(v377, v389, v390, v391, v392, v393, v394, v395);
      WTF::fastFree(v1038, v1039, v1040, v1041, v1042, v1043, v1044, v1045);
    }
    else
    {
      *(_DWORD *)v377 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"endsWith", 8uLL, v391, v392, v393, v394, v395, &v1229);
  v396 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v397 = v1229;
LABEL_202:
    *(_DWORD *)v397 += 2;
    goto LABEL_203;
  }
  v397 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v397)
    goto LABEL_202;
LABEL_203:
  v1229 = v397;
  v405 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1229, (uint64_t)JSC::stringProtoFuncEndsWith, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v407 = v1229;
  v1229 = 0;
  if (v407)
  {
    if (*(_DWORD *)v407 == 2)
    {
      WTF::StringImpl::~StringImpl(v407, v398, v399, v400, v401, v402, v403, v404);
      WTF::fastFree(v1046, v1047, v1048, v1049, v1050, v1051, v1052, v1053);
    }
    else
    {
      *(_DWORD *)v407 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v396, v405, 4, v402, v403, v404, v406);
  if (v396)
  {
    if (*(_DWORD *)v396 == 2)
    {
      WTF::StringImpl::~StringImpl(v396, v408, v409, v410, v411, v412, v413, v414);
      WTF::fastFree(v1054, v1055, v1056, v1057, v1058, v1059, v1060, v1061);
    }
    else
    {
      *(_DWORD *)v396 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"includes", 8uLL, v410, v411, v412, v413, v414, &v1229);
  v415 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v416 = v1229;
LABEL_212:
    *(_DWORD *)v416 += 2;
    goto LABEL_213;
  }
  v416 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v416)
    goto LABEL_212;
LABEL_213:
  v1229 = v416;
  v424 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1229, (uint64_t)JSC::stringProtoFuncIncludes, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v426 = v1229;
  v1229 = 0;
  if (v426)
  {
    if (*(_DWORD *)v426 == 2)
    {
      WTF::StringImpl::~StringImpl(v426, v417, v418, v419, v420, v421, v422, v423);
      WTF::fastFree(v1062, v1063, v1064, v1065, v1066, v1067, v1068, v1069);
    }
    else
    {
      *(_DWORD *)v426 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v415, v424, 4, v421, v422, v423, v425);
  if (v415)
  {
    if (*(_DWORD *)v415 == 2)
    {
      WTF::StringImpl::~StringImpl(v415, v427, v428, v429, v430, v431, v432, v433);
      WTF::fastFree(v1070, v1071, v1072, v1073, v1074, v1075, v1076, v1077);
    }
    else
    {
      *(_DWORD *)v415 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"normalize", 9uLL, v429, v430, v431, v432, v433, &v1229);
  v434 = v1229;
  if (v1229 && (*((_BYTE *)v1229 + 16) & 0x20) == 0)
  {
    v435 = v1229;
LABEL_222:
    *(_DWORD *)v435 += 2;
    goto LABEL_223;
  }
  v435 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v435)
    goto LABEL_222;
LABEL_223:
  v1229 = v435;
  v443 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncNormalize, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v445 = v1229;
  v1229 = 0;
  if (v445)
  {
    if (*(_DWORD *)v445 == 2)
    {
      WTF::StringImpl::~StringImpl(v445, v436, v437, v438, v439, v440, v441, v442);
      WTF::fastFree(v1078, v1079, v1080, v1081, v1082, v1083, v1084, v1085);
    }
    else
    {
      *(_DWORD *)v445 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v434, v443, 4, v440, v441, v442, v444);
  if (v434)
  {
    if (*(_DWORD *)v434 == 2)
    {
      WTF::StringImpl::~StringImpl(v434, v446, v447, v448, v449, v450, v451, v452);
      WTF::fastFree(v1086, v1087, v1088, v1089, v1090, v1091, v1092, v1093);
    }
    else
    {
      *(_DWORD *)v434 -= 2;
    }
  }
  v453 = JSC::Symbols::charCodeAtPrivateName[0] + 4;
  JSC::Symbols::charCodeAtPrivateName[0] += 4;
  if ((byte_1ECF30550 & 0x20) == 0)
  {
    v454 = (WTF::StringImpl *)JSC::Symbols::charCodeAtPrivateName;
LABEL_231:
    *(_DWORD *)v454 = v453 + 2;
    goto LABEL_232;
  }
  v454 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v454)
  {
    v453 = *(_DWORD *)v454;
    goto LABEL_231;
  }
LABEL_232:
  v1229 = v454;
  v462 = JSC::JSFunction::create((uint64_t)a2, a3, 1, &v1229, (uint64_t)JSC::stringProtoFuncCharCodeAt, 0, 28, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v464 = v1229;
  v1229 = 0;
  if (v464)
  {
    if (*(_DWORD *)v464 == 2)
    {
      WTF::StringImpl::~StringImpl(v464, v455, v456, v457, v458, v459, v460, v461);
      WTF::fastFree(v1094, v1095, v1096, v1097, v1098, v1099, v1100, v1101);
    }
    else
    {
      *(_DWORD *)v464 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::charCodeAtPrivateName, v462, 4, v459, v460, v461, v463);
  v472 = JSC::Symbols::charCodeAtPrivateName[0] - 2;
  if (JSC::Symbols::charCodeAtPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::charCodeAtPrivateName, v465, v466, v467, v468, v469, v470, v471);
    WTF::fastFree(v854, v855, v856, v857, v858, v859, v860, v861);
    v472 = JSC::Symbols::charCodeAtPrivateName[0];
  }
  else
  {
    JSC::Symbols::charCodeAtPrivateName[0] -= 2;
  }
  v473 = v472 - 2;
  if (v473)
  {
    JSC::Symbols::charCodeAtPrivateName[0] = v473;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::charCodeAtPrivateName, v465, v466, v467, v468, v469, v470, v471);
    WTF::fastFree(v862, v863, v864, v865, v866, v867, v868, v869);
  }
  v474 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 248);
  if (v474)
  {
    *(_DWORD *)v474 += 2;
    v475 = JSC::BuiltinExecutables::stringPrototypeAtCodeExecutable(*((JSC::BuiltinExecutables **)a2 + 11644));
    v476 = *(WTF::StringImpl **)(*((_QWORD *)a2 + 11644) + 8);
    ++*((_DWORD *)v476 + 2);
    v1229 = v476;
    v1230 = xmmword_199124EE0;
    v485 = JSC::UnlinkedFunctionExecutable::link(v475, (uint64_t)a2, 0, (uint64_t)&v1229, 0, 0, 0, v477, COERCE_DOUBLE(0x3B0D000039AALL), v478, v479);
    v486 = v1229;
    v1229 = 0;
    if (v486)
    {
      if (*((_DWORD *)v486 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v486 + 8))(v486);
      else
        --*((_DWORD *)v486 + 2);
    }
    v487 = JSC::JSFunction::create((uint64_t)a2, v485, (_DWORD *)a3, v480, v481, v482, v483, v484);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v474, v487, 4, v488, v489, v490, v491);
    if (*(_DWORD *)v474 == 2)
    {
      WTF::StringImpl::~StringImpl(v474, v492, v493, v494, v495, v496, v497, v498);
      WTF::fastFree(v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109);
    }
    else
    {
      *(_DWORD *)v474 -= 2;
    }
  }
  else
  {
    v1217 = JSC::stringPrototypeAtCodeGenerator((JSC::BuiltinExecutables **)a2, v465);
    v1223 = JSC::JSFunction::create((uint64_t)a2, v1217, (_DWORD *)a3, v1218, v1219, v1220, v1221, v1222);
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, 0, v1223, 4, v1224, v1225, v1226, v1227);
  }
  v499 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v499 = 0x900000002;
  *(_QWORD *)(v499 + 8) = "trimStart";
  *(_DWORD *)(v499 + 16) = 4;
  v1229 = (WTF::StringImpl *)v499;
  v507 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncTrimStart, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v508 = v1229;
  v1229 = 0;
  if (v508)
  {
    if (*(_DWORD *)v508 == 2)
    {
      WTF::StringImpl::~StringImpl(v508, v500, v501, v502, v503, v504, v505, v506);
      WTF::fastFree(v1110, v1111, v1112, v1113, v1114, v1115, v1116, v1117);
    }
    else
    {
      *(_DWORD *)v508 -= 2;
    }
  }
  v509 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v509 = 0x700000002;
  *(_QWORD *)(v509 + 8) = "trimEnd";
  *(_DWORD *)(v509 + 16) = 4;
  v1229 = (WTF::StringImpl *)v509;
  v517 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncTrimEnd, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v518 = v1229;
  v1229 = 0;
  if (v518)
  {
    if (*(_DWORD *)v518 == 2)
    {
      WTF::StringImpl::~StringImpl(v518, v510, v511, v512, v513, v514, v515, v516);
      WTF::fastFree(v1118, v1119, v1120, v1121, v1122, v1123, v1124, v1125);
    }
    else
    {
      *(_DWORD *)v518 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"trimStart", 9uLL, v512, v513, v514, v515, v516, &v1229);
  v519 = v1229;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v1229, v507, 4, v520, v521, v522, v523);
  if (v519)
  {
    if (*(_DWORD *)v519 == 2)
    {
      WTF::StringImpl::~StringImpl(v519, v524, v525, v526, v527, v528, v529, v530);
      WTF::fastFree(v1126, v1127, v1128, v1129, v1130, v1131, v1132, v1133);
    }
    else
    {
      *(_DWORD *)v519 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"trimLeft", 8uLL, v526, v527, v528, v529, v530, &v1229);
  v531 = v1229;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v1229, v507, 4, v532, v533, v534, v535);
  if (v531)
  {
    if (*(_DWORD *)v531 == 2)
    {
      WTF::StringImpl::~StringImpl(v531, v536, v537, v538, v539, v540, v541, v542);
      WTF::fastFree(v1134, v1135, v1136, v1137, v1138, v1139, v1140, v1141);
    }
    else
    {
      *(_DWORD *)v531 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"trimEnd", 7uLL, v538, v539, v540, v541, v542, &v1229);
  v543 = v1229;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v1229, v517, 4, v544, v545, v546, v547);
  if (v543)
  {
    if (*(_DWORD *)v543 == 2)
    {
      WTF::StringImpl::~StringImpl(v543, v548, v549, v550, v551, v552, v553, v554);
      WTF::fastFree(v1142, v1143, v1144, v1145, v1146, v1147, v1148, v1149);
    }
    else
    {
      *(_DWORD *)v543 -= 2;
    }
  }
  WTF::AtomStringImpl::addLiteral((uint64_t)"trimRight", 9uLL, v550, v551, v552, v553, v554, &v1229);
  v555 = v1229;
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v1229, v517, 4, v556, v557, v558, v559);
  if (v555)
  {
    if (*(_DWORD *)v555 == 2)
    {
      WTF::StringImpl::~StringImpl(v555, v560, v561, v562, v563, v564, v565, v566);
      WTF::fastFree(v1150, v1151, v1152, v1153, v1154, v1155, v1156, v1157);
    }
    else
    {
      *(_DWORD *)v555 -= 2;
    }
  }
  v567 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v567 = 0x1100000002;
  *(_QWORD *)(v567 + 8) = "[Symbol.iterator]";
  *(_DWORD *)(v567 + 16) = 4;
  v1229 = (WTF::StringImpl *)v567;
  v575 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncIterator, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v577 = v1229;
  v1229 = 0;
  if (v577)
  {
    if (*(_DWORD *)v577 == 2)
    {
      WTF::StringImpl::~StringImpl(v577, v568, v569, v570, v571, v572, v573, v574);
      WTF::fastFree(v1158, v1159, v1160, v1161, v1162, v1163, v1164, v1165);
    }
    else
    {
      *(_DWORD *)v577 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, *(_QWORD *)(*(_QWORD *)v6 + 2712), v575, 4, v572, v573, v574, v576);
  v578 = JSC::Symbols::substrPrivateName[0] + 4;
  JSC::Symbols::substrPrivateName[0] += 4;
  if ((byte_1ECF31F30 & 0x20) == 0)
  {
    v579 = (WTF::StringImpl *)JSC::Symbols::substrPrivateName;
LABEL_268:
    *(_DWORD *)v579 = v578 + 2;
    goto LABEL_269;
  }
  v579 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v579)
  {
    v578 = *(_DWORD *)v579;
    goto LABEL_268;
  }
LABEL_269:
  v1229 = v579;
  v587 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1229, (uint64_t)JSC::stringProtoFuncSubstr, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v589 = v1229;
  v1229 = 0;
  if (v589)
  {
    if (*(_DWORD *)v589 == 2)
    {
      WTF::StringImpl::~StringImpl(v589, v580, v581, v582, v583, v584, v585, v586);
      WTF::fastFree(v1166, v1167, v1168, v1169, v1170, v1171, v1172, v1173);
    }
    else
    {
      *(_DWORD *)v589 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::substrPrivateName, v587, 4, v584, v585, v586, v588);
  v597 = JSC::Symbols::substrPrivateName[0] - 2;
  if (JSC::Symbols::substrPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::substrPrivateName, v590, v591, v592, v593, v594, v595, v596);
    WTF::fastFree(v870, v871, v872, v873, v874, v875, v876, v877);
    v597 = JSC::Symbols::substrPrivateName[0];
  }
  else
  {
    JSC::Symbols::substrPrivateName[0] -= 2;
  }
  v598 = v597 - 2;
  if (v598)
  {
    JSC::Symbols::substrPrivateName[0] = v598;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::substrPrivateName, v590, v591, v592, v593, v594, v595, v596);
    WTF::fastFree(v878, v879, v880, v881, v882, v883, v884, v885);
  }
  v599 = JSC::Symbols::endsWithPrivateName[0] + 4;
  JSC::Symbols::endsWithPrivateName[0] += 4;
  if ((byte_1ECF31F60 & 0x20) == 0)
  {
    v600 = (WTF::StringImpl *)JSC::Symbols::endsWithPrivateName;
LABEL_278:
    *(_DWORD *)v600 = v599 + 2;
    goto LABEL_279;
  }
  v600 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 872);
  if (v600)
  {
    v599 = *(_DWORD *)v600;
    goto LABEL_278;
  }
LABEL_279:
  v1229 = v600;
  v608 = JSC::JSFunction::create((uint64_t)a2, a3, 2, &v1229, (uint64_t)JSC::stringProtoFuncEndsWith, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
  v610 = v1229;
  v1229 = 0;
  if (v610)
  {
    if (*(_DWORD *)v610 == 2)
    {
      WTF::StringImpl::~StringImpl(v610, v601, v602, v603, v604, v605, v606, v607);
      WTF::fastFree(v1174, v1175, v1176, v1177, v1178, v1179, v1180, v1181);
    }
    else
    {
      *(_DWORD *)v610 -= 2;
    }
  }
  JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)JSC::Symbols::endsWithPrivateName, v608, 4, v605, v606, v607, v609);
  v618 = JSC::Symbols::endsWithPrivateName[0] - 2;
  if (JSC::Symbols::endsWithPrivateName[0] == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::endsWithPrivateName, v611, v612, v613, v614, v615, v616, v617);
    WTF::fastFree(v886, v887, v888, v889, v890, v891, v892, v893);
    v618 = JSC::Symbols::endsWithPrivateName[0];
  }
  else
  {
    JSC::Symbols::endsWithPrivateName[0] -= 2;
  }
  v619 = v618 - 2;
  if (v619)
  {
    JSC::Symbols::endsWithPrivateName[0] = v619;
  }
  else
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)JSC::Symbols::endsWithPrivateName, v611, v612, v613, v614, v615, v616, v617);
    WTF::fastFree(v894, v895, v896, v897, v898, v899, v900, v901);
  }
  if (BYTE5(qword_1ECF4C7A8))
  {
    v620 = *(_QWORD *)v6;
    v621 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 1704);
    if (!v621)
    {
      v1229 = 0;
      JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1229, 0, (uint64_t)JSC::stringProtoFuncIsWellFormed, 0, 0, 4u);
      goto LABEL_296;
    }
    v622 = *(_DWORD *)v621 + 2;
    *(_DWORD *)v621 = v622;
    if ((*((_BYTE *)v621 + 16) & 0x20) != 0)
    {
      v623 = *(WTF::StringImpl **)(v620 + 872);
      if (!v623)
        goto LABEL_291;
      v622 = *(_DWORD *)v623;
    }
    else
    {
      v623 = v621;
    }
    *(_DWORD *)v623 = v622 + 2;
LABEL_291:
    v1229 = v623;
    v631 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncIsWellFormed, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v633 = v1229;
    v1229 = 0;
    if (v633)
    {
      if (*(_DWORD *)v633 == 2)
      {
        WTF::StringImpl::~StringImpl(v633, v624, v625, v626, v627, v628, v629, v630);
        WTF::fastFree(v1198, v1199, v1200, v1201, v1202, v1203, v1204, v1205);
      }
      else
      {
        *(_DWORD *)v633 -= 2;
      }
    }
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v621, v631, 4, v628, v629, v630, v632);
    if (*(_DWORD *)v621 == 2)
    {
      WTF::StringImpl::~StringImpl(v621, v634, v635, v636, v637, v638, v639, v640);
      WTF::fastFree(v1182, v1183, v1184, v1185, v1186, v1187, v1188, v1189);
    }
    else
    {
      *(_DWORD *)v621 -= 2;
    }
LABEL_296:
    v641 = *(_QWORD *)v6;
    v642 = *(WTF::StringImpl **)(*(_QWORD *)v6 + 2528);
    if (!v642)
    {
      v1229 = 0;
      JSC::JSObject::putDirectNativeFunctionWithoutTransition(this, (uint64_t)a2, a3, (unint64_t *)&v1229, 0, (uint64_t)JSC::stringProtoFuncToWellFormed, 0, 0, 4u);
      return;
    }
    v643 = *(_DWORD *)v642 + 2;
    *(_DWORD *)v642 = v643;
    if ((*((_BYTE *)v642 + 16) & 0x20) != 0)
    {
      v644 = *(WTF::StringImpl **)(v641 + 872);
      if (!v644)
        goto LABEL_300;
      v643 = *(_DWORD *)v644;
    }
    else
    {
      v644 = v642;
    }
    *(_DWORD *)v644 = v643 + 2;
LABEL_300:
    v1229 = v644;
    v652 = JSC::JSFunction::create((uint64_t)a2, a3, 0, &v1229, (uint64_t)JSC::stringProtoFuncToWellFormed, 0, 0, (unint64_t)JSC::callHostFunctionAsConstructor, 0);
    v654 = v1229;
    v1229 = 0;
    if (v654)
    {
      if (*(_DWORD *)v654 == 2)
      {
        WTF::StringImpl::~StringImpl(v654, v645, v646, v647, v648, v649, v650, v651);
        WTF::fastFree(v1206, v1207, v1208, v1209, v1210, v1211, v1212, v1213);
      }
      else
      {
        *(_DWORD *)v654 -= 2;
      }
    }
    JSC::JSObject::putDirectWithoutTransition(this, (uint64_t)a2, (unint64_t)v642, v652, 4, v649, v650, v651, v653);
    if (*(_DWORD *)v642 == 2)
    {
      WTF::StringImpl::~StringImpl(v642, v655, v656, v657, v658, v659, v660, v661);
      WTF::fastFree(v1190, v1191, v1192, v1193, v1194, v1195, v1196, v1197);
    }
    else
    {
      *(_DWORD *)v642 -= 2;
    }
  }
}

uint64_t JSC::stringProtoFuncToString(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t result;
  int v5;
  JSC::VM *v6;

  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  result = *((_QWORD *)a2 + 5);
  if ((result & 0xFFFE000000000002) != 0)
    return JSC::throwTypeError(this, &v6);
  v5 = *(unsigned __int8 *)(result + 5);
  if (v5 == 2)
    return result;
  if ((v5 & 0xFE) != 0x4C)
    return JSC::throwTypeError(this, &v6);
  return *(_QWORD *)(result + 16);
}

uint64_t JSC::stringProtoFuncCharAt(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  double v30;
  double v31;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v54;
  double v55;
  uint64_t v56;
  unsigned __int8 *v57;
  JSC::VM *v58;
  WTF::StringImpl *v59;

  v10 = (JSC::JSGlobalObject *)this;
  v11 = *(_QWORD *)(this + 56);
  v12 = *((_QWORD *)a2 + 5);
  v57 = (unsigned __int8 *)v12;
  v58 = (JSC::VM *)v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError((JSC::JSGlobalObject *)this, &v58);
LABEL_26:
    this = (uint64_t)JSC::JSValue::toStringSlowCase(&v57, this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    v12 = this;
    goto LABEL_3;
  }
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 != 2)
  {
    v52 = v13 - 51;
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2 || v52 < 5)
      return JSC::throwTypeError((JSC::JSGlobalObject *)this, &v58);
    goto LABEL_26;
  }
LABEL_3:
  if (*(_DWORD *)(v11 + 80))
  {
    v42 = *(_DWORD *)(v11 + 80);
    if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v14 = *(_QWORD *)(v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (v14)
    {
LABEL_6:
      v15 = *(unsigned int *)(v14 + 16);
      v16 = *(const char **)(v14 + 8);
      LODWORD(v14) = *(_DWORD *)(v14 + 4);
      v17 = (v15 >> 2) & 1;
LABEL_7:
      v18 = v14 | (unint64_t)(v17 << 32);
      goto LABEL_8;
    }
LABEL_38:
    v16 = 0;
    v17 = 1;
    goto LABEL_7;
  }
  if ((v14 & 2) == 0)
  {
    this = (uint64_t)JSC::JSRopeString::resolveRope(v12, v10, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    v14 = *(_QWORD *)this;
    if (*(_QWORD *)this)
      goto LABEL_6;
    goto LABEL_38;
  }
  v22 = *(_QWORD *)((*(_QWORD *)(v12 + 20) & 0xFFFFFFFFFLL) + 8);
  if (v22
    && (v23 = *(unsigned int *)(v22 + 4),
        v24 = *(_QWORD *)(v12 + 24),
        v25 = v24 >> 16,
        v23 > (v24 >> 16)))
  {
    v26 = *(unsigned int *)(v22 + 16);
    v16 = *(const char **)(v22 + 8);
    v27 = *(_DWORD *)(v12 + 16);
    if ((int)v23 - (int)v25 > v27 || (v27 = v23 - v25, (_DWORD)v25))
    {
      v28 = (v24 >> 16);
      v18 = v27;
      v29 = v23 - v25;
      if (((v26 >> 2) & 1) != 0)
      {
        if (v29 < v27)
          goto LABEL_58;
        v16 += v28;
        v18 = v27 | 0x100000000;
      }
      else
      {
        if (v29 < v27)
          goto LABEL_58;
        v16 += 2 * v28;
      }
    }
    else
    {
      v18 = v23 & 0xFFFFFFFEFFFFFFFFLL | (((v26 >> 2) & 1) << 32);
    }
  }
  else
  {
    v16 = "";
    v18 = 0x100000000;
  }
LABEL_8:
  if (*(_DWORD *)(v11 + 80))
  {
    v43 = *(_DWORD *)(v11 + 80);
    if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v56 = 10;
    goto LABEL_29;
  }
  v19 = *((_QWORD *)a2 + 6);
  v56 = v19;
  if (v19 < 0xFFFE000000000000 || (v19 & 0x80000000) != 0)
  {
    if (v19 >= 0xFFFE000000000000)
    {
      v31 = (double)(int)v19;
LABEL_31:
      if (*(_DWORD *)(v11 + 80))
      {
        v55 = v31;
        this = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v31 = v55;
        if ((this & 1) != 0)
          return 0;
      }
      if (v31 < 0.0 || v31 >= (double)v18)
        return *(_QWORD *)(v11 + 41968);
      v33 = v31;
      if ((v18 & 0x100000000) != 0)
      {
        if (v18 > v33)
        {
          v20 = v16[v33];
          return *(_QWORD *)(v11 + 8 * v20 + 42216);
        }
      }
      else if (v18 > v33)
      {
        v34 = *(unsigned __int16 *)&v16[2 * v33];
        goto LABEL_46;
      }
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    v54 = v19 - 0x2000000000000;
    if (v54 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v30 = *(double *)&v54;
      goto LABEL_30;
    }
LABEL_29:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v56, v10, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_30:
    v31 = trunc(v30 + 0.0);
    goto LABEL_31;
  }
  if (v19 >= v18)
    return *(_QWORD *)(v11 + 41968);
  if ((v18 & 0x100000000) == 0)
  {
    v34 = *(unsigned __int16 *)&v16[2 * v19];
LABEL_46:
    if (v34 <= 0xFF)
    {
      v20 = v34;
      return *(_QWORD *)(v11 + 8 * v20 + 42216);
    }
    v35 = WTF::fastCompactMalloc((WTF *)0x16);
    *(_QWORD *)v35 = 0x100000002;
    *(_WORD *)(v35 + 20) = v34;
    *(_QWORD *)(v35 + 8) = v35 + 20;
    *(_DWORD *)(v35 + 16) = 0;
    v59 = (WTF::StringImpl *)v35;
    v11 = JSC::JSString::create(v11, (JSC::VM *)&v59, v36, v37, v38, v39, v40, v41);
    this = (uint64_t)v59;
    v59 = 0;
    if (!this)
      return v11;
    if (*(_DWORD *)this != 2)
    {
      *(_DWORD *)this -= 2;
      return v11;
    }
LABEL_59:
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)this, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
    return v11;
  }
  v20 = v16[v19];
  return *(_QWORD *)(v11 + 8 * v20 + 42216);
}

uint64_t JSC::stringProtoFuncCharCodeAt(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  unint64_t v12;
  int v13;
  int *v14;
  const char *v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  double v28;
  unsigned int v29;
  BOOL hasExceptionsAfterHandlingTraps;
  unsigned int v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  JSC::VM *v37;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  v36 = (unsigned __int8 *)v12;
  v37 = v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v37);
LABEL_24:
    v12 = (unint64_t)JSC::JSValue::toStringSlowCase(&v36, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_3;
  }
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 != 2)
  {
    v31 = v13 - 51;
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2 || v31 < 5)
      return JSC::throwTypeError(this, &v37);
    goto LABEL_24;
  }
LABEL_3:
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v14 = *(int **)(v12 + 8);
  if ((v14 & 1) == 0)
  {
    if (v14)
    {
LABEL_6:
      v15 = (const char *)*((_QWORD *)v14 + 1);
      v16 = v14[1] | ((unint64_t)((v14[4] >> 2) & 1) << 32);
      goto LABEL_7;
    }
LABEL_36:
    v15 = 0;
    v16 = 0x100000000;
    goto LABEL_7;
  }
  if ((v14 & 2) == 0)
  {
    v14 = *JSC::JSRopeString::resolveRope(v12, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v14)
      goto LABEL_6;
    goto LABEL_36;
  }
  v20 = *(_QWORD *)((*(_QWORD *)(v12 + 20) & 0xFFFFFFFFFLL) + 8);
  if (v20
    && (v21 = *(unsigned int *)(v20 + 4),
        v22 = *(_QWORD *)(v12 + 24),
        v23 = v22 >> 16,
        v21 > (v22 >> 16)))
  {
    v24 = *(unsigned int *)(v20 + 16);
    v15 = *(const char **)(v20 + 8);
    v25 = *(_DWORD *)(v12 + 16);
    if ((int)v21 - (int)v23 > v25 || (v25 = v21 - v23, (_DWORD)v23))
    {
      v26 = (v22 >> 16);
      v16 = v25;
      v27 = v21 - v23;
      if (((v24 >> 2) & 1) != 0)
      {
        if (v27 < v25)
          goto LABEL_48;
        v15 += v26;
        v16 = v25 | 0x100000000;
      }
      else
      {
        if (v27 < v25)
          goto LABEL_48;
        v15 += 2 * v26;
      }
    }
    else
    {
      v16 = v21 & 0xFFFFFFFEFFFFFFFFLL | (((v24 >> 2) & 1) << 32);
    }
  }
  else
  {
    v15 = "";
    v16 = 0x100000000;
  }
LABEL_7:
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v35 = 10;
    goto LABEL_27;
  }
  v17 = *((_QWORD *)a2 + 6);
  v35 = v17;
  if (v17 < 0xFFFE000000000000 || (v17 & 0x80000000) != 0)
  {
    if (v17 >= 0xFFFE000000000000)
    {
      *(double *)a9.i64 = (double)(int)v17;
      goto LABEL_29;
    }
    v33 = v17 - 0x2000000000000;
    if (v33 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v28 = *(double *)&v33;
      goto LABEL_28;
    }
LABEL_27:
    JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v35, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_28:
    *(double *)a9.i64 = trunc(v28 + 0.0);
LABEL_29:
    if (*((_DWORD *)v11 + 20))
      goto LABEL_49;
    while (*(double *)a9.i64 >= 0.0 && *(double *)a9.i64 < (double)v16)
    {
      v29 = (int)*(double *)a9.i64;
      if ((v16 & 0x100000000) != 0)
      {
        if (v16 > v29)
        {
          v18 = v15[v29];
          return v18 | 0xFFFE000000000000;
        }
      }
      else if (v16 > v29)
      {
        v18 = *(unsigned __int16 *)&v15[2 * v29];
        return v18 | 0xFFFE000000000000;
      }
LABEL_48:
      __break(1u);
LABEL_49:
      v34 = a9.i64[0];
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      a9.i64[0] = v34;
      if (hasExceptionsAfterHandlingTraps)
        return 0;
    }
    return 0x7FFA000000000000;
  }
  if (v17 >= v16)
    return 0x7FFA000000000000;
  if ((v16 & 0x100000000) != 0)
    v18 = v15[v17];
  else
    v18 = *(unsigned __int16 *)&v15[2 * v17];
  return v18 | 0xFFFE000000000000;
}

unint64_t JSC::stringProtoFuncCodePointAt(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  unint64_t v12;
  int v13;
  JSC *v14;
  unsigned int v15;
  JSC::JSObject *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  unint64_t v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  unsigned int v36;
  BOOL hasExceptionsAfterHandlingTraps;
  unsigned int v38;
  double v40;
  uint64_t v41;
  JSC *v42;
  unint64_t v43;
  JSC::VM *v44;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  v43 = v12;
  v44 = v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v44);
LABEL_32:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v43, this, a3, a4, a5, a6, a7, a8, (int **)&v42);
    goto LABEL_8;
  }
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 != 2)
  {
    v38 = v13 - 51;
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2 || v38 < 5)
      return JSC::throwTypeError(this, &v44);
    goto LABEL_32;
  }
  v14 = *(JSC **)(v12 + 8);
  if ((v14 & 1) != 0)
    v14 = (JSC *)*JSC::JSRopeString::resolveRope(v12, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (v14)
    *(_DWORD *)v14 += 2;
  v42 = v14;
LABEL_8:
  if (*((_DWORD *)v11 + 20))
    goto LABEL_45;
  while (1)
  {
    if (v42)
      v15 = *((_DWORD *)v42 + 1);
    else
      v15 = 0;
    if (*((_DWORD *)a2 + 8) == 1)
    {
      v41 = 10;
LABEL_34:
      if (*((_DWORD *)v11 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8)
        || (v35 = JSC::JSValue::toIntegerOrInfinity((JSC::JSObject **)&v41, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9),
            *((_DWORD *)v11 + 20))
        && (v40 = v35,
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8), v35 = v40, hasExceptionsAfterHandlingTraps))
      {
LABEL_46:
        v24 = 0;
        goto LABEL_26;
      }
      v24 = 10;
      if (v35 < 0.0 || v35 >= (double)v15)
        goto LABEL_26;
      v36 = JSC::codePointAt((uint64_t)v42, (const WTF::String *)v35, v15);
      if ((v36 & 0x80000000) != 0)
      {
        v24 = COERCE__INT64((double)v36) + 0x2000000000000;
        goto LABEL_26;
      }
      v20 = v36;
LABEL_25:
      v24 = v20 | 0xFFFE000000000000;
      goto LABEL_26;
    }
    v16 = (JSC::JSObject *)*((_QWORD *)a2 + 6);
    v41 = (uint64_t)v16;
    if ((unint64_t)v16 < 0xFFFE000000000000 || (v16 & 0x80000000) != 0)
      goto LABEL_34;
    if (v15 <= v16)
      break;
    if (v42)
    {
      if ((*((_BYTE *)v42 + 16) & 4) != 0)
      {
        if (*((_DWORD *)v42 + 1) > v16)
        {
          LODWORD(v20) = *(unsigned __int8 *)(*((_QWORD *)v42 + 1) + v16);
LABEL_24:
          v20 = v20;
          goto LABEL_25;
        }
      }
      else
      {
        v17 = *((_DWORD *)v42 + 1);
        if (v17 > v16)
        {
          v18 = *((_QWORD *)v42 + 1);
          v19 = (_DWORD)v16 + 1;
          LODWORD(v20) = *(unsigned __int16 *)(v18 + 2 * v16);
          if ((_DWORD)v16 + 1 == v15 || (v20 & 0xFC00) != 0xD800)
            goto LABEL_24;
          if (v17 > v19)
          {
            v21 = *(unsigned __int16 *)(v18 + 2 * v19);
            v22 = (v21 & 0xFC00) == 56320;
            v23 = v21 + ((_DWORD)v20 << 10) - 56613888;
            if (v22)
              LODWORD(v20) = v23;
            goto LABEL_24;
          }
        }
      }
    }
    __break(1u);
LABEL_45:
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      goto LABEL_46;
  }
  v24 = 10;
LABEL_26:
  v25 = v42;
  v42 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return v24;
}

unint64_t JSC::stringProtoFuncLastIndexOf(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  StringView v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  double v27;
  unsigned int v28;
  uint64_t v29;
  int **v30;
  unsigned int *v31;
  int *v32;
  StringView v33;
  unint64_t v34;
  double v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned __int8 *v42;
  unint64_t v43;
  unsigned __int8 *v44;
  JSC::VM *v45;

  v10 = (JSC::VM *)*((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 5);
  v44 = (unsigned __int8 *)v11;
  v45 = v10;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v45);
  }
  else
  {
    v12 = *(unsigned __int8 *)(v11 + 5);
    if (v12 != 2)
    {
      v40 = v12 - 51;
      if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2 || v40 < 5)
        return JSC::throwTypeError(this, &v45);
    }
  }
  v13 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14 = 10;
    v43 = 10;
  }
  else
  {
    v43 = *((_QWORD *)a2 + 6);
    if (v13 == 1)
      v14 = 10;
    else
      v14 = *((_QWORD *)a2 + 7);
  }
  v42 = (unsigned __int8 *)v14;
  if ((v11 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v11 + 5) != 2)
    v11 = (unint64_t)JSC::JSValue::toStringSlowCase(&v44, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v16 = (unint64_t *)(v11 + 8);
  v15 = *(_QWORD *)(v11 + 8);
  if ((v15 & 1) != 0)
    v17 = (unsigned int *)(v11 + 16);
  else
    v17 = (unsigned int *)(v15 + 4);
  v18 = *v17;
  v19 = (unsigned __int8 *)v43;
  if ((v43 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v43 + 5) != 2)
    v19 = JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v43, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  *(double *)v26.i64 = JSC::JSValue::toIntegerPreserveNaN(&v42, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
  v27 = *(double *)v26.i64;
  if (*((_DWORD *)v10 + 20))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v10, v20, v21, (uint64_t)v22.m_characters, *(uint64_t *)&v22.m_length, v23, v24, v25))
    {
      return 0;
    }
  }
  if (v27 < 0.0)
  {
    v28 = 0;
  }
  else
  {
    *(double *)v26.i64 = (double)v18;
    v28 = v18;
    if (v27 <= (double)v18)
      v28 = v27;
  }
  v30 = (int **)(v19 + 8);
  v29 = *((_QWORD *)v19 + 1);
  if ((v29 & 1) != 0)
    v31 = (unsigned int *)(v19 + 16);
  else
    v31 = (unsigned int *)(v29 + 4);
  if (v18 < *v31)
    return 0xFFFE0000FFFFFFFFLL;
  if ((*(_BYTE *)v16 & 1) != 0)
    v16 = (unint64_t *)JSC::JSRopeString::resolveRope(v11, this, v21, (uint64_t)v22.m_characters, v26, *(uint64_t *)&v22.m_length, v23, v24, v25);
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v20, v21, (uint64_t)v22.m_characters, *(uint64_t *)&v22.m_length, v23, v24, v25))
  {
    return 0;
  }
  if ((*(_BYTE *)v30 & 1) != 0)
    v30 = JSC::JSRopeString::resolveRope((unint64_t)v19, this, v21, (uint64_t)v22.m_characters, v26, *(uint64_t *)&v22.m_length, v23, v24, v25);
  if (*((_DWORD *)v10 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v20, v21, (uint64_t)v22.m_characters, *(uint64_t *)&v22.m_length, v23, v24, v25))
  {
    return 0;
  }
  v32 = *v30;
  if (v28)
  {
    if (v32)
    {
      v33.m_characters = (void *)*((_QWORD *)v32 + 1);
      v33.m_length = v32[1];
      *(_DWORD *)&v33.m_is8Bit = (v32[4] >> 2) & 1;
    }
    else
    {
      v33.m_characters = 0;
      *(_QWORD *)&v33.m_length = 0x100000000;
    }
    if (!*v16)
      return 0xFFFE0000FFFFFFFFLL;
    v34 = WTF::StringImpl::reverseFind(*v16, v33, v28);
  }
  else
  {
    if (v32)
    {
      v37 = *((_QWORD *)v32 + 1);
      v38 = v32[1] | ((unint64_t)((v32[4] >> 2) & 1) << 32);
    }
    else
    {
      v37 = 0;
      v38 = 0x100000000;
    }
    if (*v16)
      v39 = WTF::StringImpl::startsWith(*v16, v37, (void *)v38, v22);
    else
      v39 = v38 == 0;
    v34 = v39 - 1;
  }
  if (v34 == -1)
    return 0xFFFE0000FFFFFFFFLL;
  if (HIDWORD(v34))
  {
    v36 = (double)v34;
  }
  else
  {
    if ((v34 & 0x80000000) == 0)
      return v34 | 0xFFFE000000000000;
    v36 = (double)v34;
  }
  return *(_QWORD *)&v36 + 0x2000000000000;
}

uint64_t JSC::stringProtoFuncReplaceUsingRegExp(JSC *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  JSC::JSFunction *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  JSC::VM *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  _DWORD *v31;
  WTF *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint16x8_t v38;
  double v39;
  float v40;
  int v41;
  int v42;
  uint64_t v43;
  int *v44;
  unint64_t v45;
  JSC::VM *v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  int *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  int v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  WTF *v90;
  WTF *v91;
  uint64_t v92;
  WTF *v93;
  uint64_t v94;
  int v95;
  int v96;
  _BOOL4 v97;
  char v98;
  WTF *v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t *v112;
  JSC::VM *v113;
  void *v114;
  JSC::Structure *v115;
  uint64_t v116;
  uint64_t v117;
  int8x16_t v118;
  int v119;
  int v120;
  uint64_t v121;
  JSC::MarkedVectorBase *v122;
  unint64_t v123;
  JSC::VM *v124;
  uint64_t v125;
  int v126;
  _DWORD *v127;
  int v128;
  _DWORD *v129;
  unint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  BOOL v136;
  int v137;
  WTF *v138;
  uint64_t v139;
  WTF *v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  int *v147;
  int8x16_t v148;
  JSC::VM *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  int *v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  uint64_t v156;
  WTF *v157;
  int v159;
  unsigned int v160;
  WTF *v161;
  WTF *v162;
  uint64_t v163;
  int v164;
  int v165;
  size_t v166;
  uint64_t v167;
  _BYTE *v168;
  int *v169;
  _BYTE *v170;
  WTF::AtomStringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  WTF *v178;
  _DWORD *v179;
  uint64_t *v180;
  WTF *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _DWORD *v185;
  uint64_t v186;
  uint64_t v187;
  int *v188;
  unint64_t v189;
  WTF *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  BOOL v194;
  _BYTE *v195;
  _BYTE *v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  WTF *v200;
  int v201;
  WTF *v202;
  WTF *v203;
  unint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  _DWORD *v230;
  unint64_t v231;
  int8x16_t v232;
  unint64_t v233;
  uint64_t v234;
  int v235;
  int v236;
  uint64_t v237;
  int v238;
  WTF::AtomStringImpl *v239;
  unint64_t v240;
  int8x16_t v241;
  uint64_t *v242;
  uint64_t v243;
  WTF *v244;
  int *v245;
  char v246;
  WTF::StringImpl *v247;
  unsigned int v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  int v251;
  int v252;
  unint64_t OutOfMemoryError;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  double v259;
  JSC::Exception *v260;
  uint64_t *v261;
  unint64_t v262;
  unint64_t v263;
  unint64_t v264;
  WTF *v265;
  uint64_t v266;
  unint64_t v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  BOOL v272;
  int v273;
  unsigned int v274;
  const WTF::String *v275;
  unsigned int v276;
  int v277;
  JSC::RegExp **v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  JSC::RegExp **v282;
  JSC::RegExp *v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  WTF *v292;
  uint64_t *v293;
  WTF *v294;
  uint64_t v295;
  unint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _DWORD *v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  void *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int8x16_t v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  unint64_t v319;
  JSC::VM *v320;
  int v321;
  unint64_t v322;
  unsigned int v323;
  uint64_t v324;
  int v325;
  BOOL v326;
  int v327;
  int v328;
  int v329;
  uint64_t v330;
  JSC::MarkedVectorBase *v331;
  uint64_t v332;
  BOOL hasExceptionsAfterHandlingTraps;
  JSC::MarkedVectorBase *v334;
  uint64_t v335;
  uint64_t v336;
  int *v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  unint64_t v341;
  _WORD *v342;
  _WORD *v343;
  WTF *v344;
  unint64_t v345;
  void *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unsigned int *v353;
  int v354;
  unsigned int v355;
  int v356;
  unsigned int v357;
  BOOL v358;
  WTF **v359;
  unsigned int v360;
  int v361;
  WTF *v362;
  unsigned int v366;
  WTF *v367;
  uint64_t v368;
  WTF *v369;
  uint64_t v370;
  unsigned int v371;
  char v372;
  _DWORD *v373;
  int v374;
  BOOL v375;
  unsigned int v376;
  uint64_t v377;
  int v378;
  WTF *v379;
  uint64_t v380;
  uint64_t v381;
  unint64_t v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  WTF::StringImpl *v391;
  unint64_t v392;
  void *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  int v400;
  _DWORD *v401;
  int v402;
  WTF *v403;
  char *v404;
  uint64_t v405;
  uint64_t v406;
  WTF *v407;
  int v408;
  _DWORD *v409;
  uint64_t v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  char *v414;
  unsigned int v415;
  uint64_t v416;
  unint64_t v417;
  char *v418;
  uint64_t v419;
  char *v420;
  int v421;
  char *v422;
  WTF *v423;
  uint64_t v424;
  WTF *v425;
  int v426;
  uint64_t v427;
  size_t v428;
  uint64_t v429;
  _BYTE *v430;
  int *v431;
  _BYTE *v432;
  uint64_t v433;
  int v434;
  int v435;
  size_t v436;
  uint64_t v437;
  int *v438;
  _BYTE *v439;
  int *v440;
  _BYTE *v441;
  unint64_t v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  size_t v452;
  uint64_t v453;
  _BYTE *v454;
  int *v455;
  _BYTE *v456;
  WTF::StringImpl *v457;
  const WTF::String *v458;
  unsigned int v459;
  uint64_t v460;
  unsigned int v461;
  unsigned int v462;
  BOOL v463;
  int v464;
  int v465;
  int v466;
  int v467;
  char v468;
  uint64_t v469;
  unsigned int v470;
  int v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int *v478;
  WTF::StringImpl *v479;
  WTF *v480;
  WTF::StringImpl *v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  _BOOL4 v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  int *v493;
  WTF::StringImpl *v494;
  unint64_t v495;
  void *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  void *v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  _BOOL4 v513;
  WTF *v514;
  char *v515;
  uint64_t v516;
  uint64_t v517;
  int v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  unint64_t v522;
  int8x16_t *v523;
  unsigned int v524;
  uint64_t v525;
  unint64_t v526;
  unint64_t v527;
  char *v528;
  uint64_t v529;
  int8x16_t *v530;
  uint64_t v531;
  char *v532;
  char *v533;
  __int16 v534;
  char *v535;
  int8x16_t v536;
  int8x16_t v537;
  char *v538;
  char *v539;
  char *v540;
  unint64_t v541;
  const WTF::String *v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  JSC::JSString *v548;
  const WTF::String *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  JSC::JSString *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  _DWORD *v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  _DWORD *v565;
  uint64_t v566;
  int v567;
  uint64_t v568;
  _DWORD *v569;
  uint64_t v570;
  int v571;
  uint64_t v572;
  JSC::VM *v573;
  JSC *v574;
  JSC::VM *v575;
  JSC *v576;
  const WTF::String *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  unint64_t v583;
  JSC::VM *v584;
  JSC *v585;
  JSC::JSString *v586;
  JSC::JSString *v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  WTF **v592;
  JSC::VM **v593;
  unint64_t v594;
  void *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  void *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  int v610;
  JSC::VM *v611;
  uint64_t v612;
  uint64_t v613;
  _BOOL4 v614;
  unsigned int v615;
  WTF::StringImpl *v616;
  WTF::StringImpl *v617;
  unint64_t v618;
  uint64_t v619;
  void *v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  JSC *v627;
  unint64_t v628;
  WTF *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  void *v634;
  unint64_t v635;
  unsigned int v636;
  char *v637;
  _BYTE *v638;
  unsigned int v639;
  JSC *v640;
  unsigned int v641;
  int v642;
  BOOL v643;
  int v644;
  BOOL v645;
  uint64_t v646;
  int v647;
  uint64_t v648;
  int *v649;
  int v650;
  int v651;
  int v652;
  _DWORD *v653;
  JSC::RegExp *v654;
  _BYTE *v655;
  uint64_t v656;
  uint64_t v657;
  int8x16_t v658;
  unint64_t v659;
  JSC::VM *v660;
  uint64_t *v661;
  int *v662;
  WTF::StringImpl *v663;
  char v664;
  WTF::StringImpl *v665;
  unint64_t v666;
  void *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  unint64_t v674;
  void *v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  unsigned int v682;
  unsigned int v683;
  int v684;
  JSC::VM **v685;
  WTF::AtomStringImpl *v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  WTF *v693;
  unsigned int v694;
  unsigned int *v695;
  unsigned int v696;
  uint64_t v697;
  _DWORD *v698;
  uint64_t *v699;
  uint64_t v700;
  uint64_t v702;
  unsigned int v703;
  char v704;
  _DWORD *v705;
  uint64_t v706;
  int v707;
  BOOL v708;
  unsigned int v709;
  int v710;
  WTF *v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  int v715;
  int *v716;
  uint64_t v717;
  uint64_t v718;
  int v719;
  _DWORD *v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  unint64_t v724;
  _BYTE *v725;
  unsigned int v726;
  uint64_t v727;
  unint64_t v728;
  _BYTE *v729;
  uint64_t v730;
  _BYTE *v731;
  int v732;
  _BYTE *v733;
  WTF::StringImpl *v734;
  int v735;
  uint64_t v736;
  size_t v737;
  uint64_t v738;
  int v739;
  uint64_t v740;
  size_t v741;
  uint64_t v742;
  int *v743;
  JSC *v744;
  unsigned int v745;
  uint64_t v746;
  unsigned int v747;
  unsigned int v748;
  BOOL v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  int *v756;
  WTF::StringImpl *v757;
  int *v758;
  WTF::StringImpl *v759;
  WTF::AtomStringImpl *v760;
  uint64_t v761;
  unsigned int v762;
  uint64_t v763;
  int8x16_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  __n128 v768;
  WTF::StringImpl *v769;
  int *v770;
  uint64_t v771;
  uint64_t v772;
  WTF::StringImpl *v773;
  WTF::StringImpl *v774;
  int v775;
  JSC::VM *v776;
  uint64_t v777;
  unint64_t v778;
  WTF::AtomStringImpl *v779;
  WTF::StringImpl *v780;
  WTF::StringImpl *v781;
  uint64_t v782;
  int v783;
  int v784;
  BOOL v785;
  size_t v786;
  uint64_t v787;
  unint64_t v788;
  void *v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  _BOOL4 v798;
  int **v799;
  uint64_t *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  WTF::StringImpl *v807;
  WTF::StringImpl *v808;
  unint64_t v809;
  void *v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  unint64_t v817;
  void *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  _BOOL4 v827;
  int *v828;
  int *v829;
  uint64_t v830;
  uint64_t v831;
  int v832;
  _DWORD *v833;
  int v834;
  uint64_t v835;
  unsigned int v836;
  int *v837;
  int *v838;
  int v839;
  uint64_t v840;
  unsigned int v841;
  int *v842;
  unint64_t v843;
  const WTF::String *v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  JSC::JSString *v850;
  const WTF::String *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  JSC::JSString *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  unint64_t v862;
  _DWORD *v863;
  uint64_t v864;
  int v865;
  uint64_t v866;
  _DWORD *v867;
  int v868;
  uint64_t v869;
  uint64_t v870;
  unsigned int v871;
  int8x16_t v872;
  uint64_t v873;
  uint64_t v874;
  uint64_t v875;
  __n128 v876;
  int *v877;
  int *v878;
  uint64_t v879;
  uint64_t v880;
  WTF::StringImpl *v881;
  WTF::StringImpl *v882;
  _DWORD *v883;
  uint64_t v884;
  int v885;
  uint64_t v886;
  uint64_t v887;
  WTF::StringImpl *v888;
  uint64_t v889;
  WTF::StringImpl *v890;
  JSC::VM *v891;
  JSC *v892;
  unint64_t v893;
  void *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  JSC::VM *v901;
  JSC *v902;
  const WTF::String *v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  unint64_t v909;
  JSC::VM *v910;
  JSC *v911;
  JSC::JSString *v912;
  JSC::JSString *v913;
  uint64_t v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  unint64_t v918;
  void *v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  unint64_t v926;
  void *v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  unint64_t v934;
  void *v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  JSC::JSGlobalObject *v942;
  unint64_t v943;
  void *v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  uint64_t v950;
  unint64_t v951;
  void *v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  uint64_t v958;
  char *v959;
  char *v960;
  int8x16_t v961;
  int8x16_t v962;
  char *v963;
  char *v964;
  char *v965;
  __int16 v966;
  unint64_t v967;
  void *v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  unint64_t v975;
  void *v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  _BOOL4 v985;
  unint64_t v986;
  int *v987;
  unint64_t v988;
  uint64_t v989;
  int v990;
  uint64_t v991;
  uint64_t v992;
  JSC::JSFunction *v993;
  WTF *v994;
  JSC::JSFunction *v995;
  JSC::MarkedVectorBase *v996;
  JSC *v997;
  JSC *v998;
  JSC *v999;
  JSC *v1000;
  JSC::MarkedVectorBase *v1001;
  unsigned int v1002;
  JSC::JSGlobalObject *v1003;
  uint64_t *v1004;
  JSC::RegExp *v1005;
  JSC::RegExp *v1006;
  WTF *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  WTF *v1011;
  JSC::JSFunction *v1012;
  unsigned int v1013;
  JSC::VM *v1014;
  WTF *v1015;
  __int128 v1016;
  __int128 v1017;
  __int128 v1018;
  __int128 v1019;
  __int128 v1020;
  uint64_t v1021;
  char v1022;
  int v1023;
  int v1024;
  _BYTE *v1025;
  _BYTE v1026[80];
  uint64_t v1027;
  WTF *v1028;
  uint64_t v1029;
  _BYTE v1030[128];
  WTF *v1031;
  uint64_t v1032;
  _BYTE v1033[128];
  uint64_t v1034;
  unsigned int v1035;
  JSC::VM *v1036;
  uint64_t *v1037;
  int v1038;
  char v1039;
  unint64_t v1040;
  int *v1041;
  unint64_t v1042;
  int *v1043;
  const WTF::String *v1044;
  void *v1045;
  WTF::StringImpl *v1046[2];
  int8x16x2_t v1047;
  int8x16x2_t v1048;
  int8x16x2_t v1049;
  int8x16x2_t v1050;
  int8x16x2_t v1051;
  int8x16x2_t v1052;
  int8x16x2_t v1053;
  int8x16x2_t v1054;

  v11 = *((_QWORD *)this + 7);
  v12 = (unsigned __int8 *)*((_QWORD *)a2 + 5);
  v1015 = (WTF *)v12;
  if (((unint64_t)v12 & 0xFFFE000000000002) != 0 || v12[5] != 2)
    v12 = JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v1015, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  v1003 = (JSC::JSGlobalObject *)v12;
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    return 10;
  v13 = *((_QWORD *)a2 + 6);
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 59)
    return 10;
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v14 = 10;
    v1011 = 0;
    v1012 = (JSC::JSFunction *)10;
    goto LABEL_222;
  }
  v14 = *((_QWORD *)a2 + 7);
  v1011 = 0;
  v1012 = (JSC::JSFunction *)v14;
  if ((v14 & 0xFFFE000000000002) != 0)
  {
LABEL_222:
    LOBYTE(v1008) = 0;
LABEL_223:
    if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1012, this, (const WTF::String *)a3, a4, a5, a6, a7, a8, (int **)&v1015);
    }
    else
    {
      v178 = *(WTF **)(v14 + 8);
      if ((v178 & 1) != 0)
        v178 = (WTF *)*JSC::JSRopeString::resolveRope(v14, this, a3, a4, a9, a5, a6, a7, a8);
      if (v178)
        *(_DWORD *)v178 += 2;
      v1015 = v178;
    }
    v16 = v1015;
    v1011 = v1015;
    if (*(_DWORD *)(v11 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    {
      v156 = 0;
      goto LABEL_535;
    }
    goto LABEL_14;
  }
  if (*(_BYTE *)(v14 + 5) == 26)
  {
    v15 = *(_QWORD *)(v14 + 24);
    if ((v15 & 1) != 0)
      v15 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 48);
    v16 = 0;
    if (*(_BYTE *)(v15 + 5) == 8)
    {
      LOBYTE(v1008) = 1;
      v1009 = *(_QWORD *)(v15 + 40);
      LOBYTE(v1010) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                 + 0x4C));
    }
    else
    {
      LOBYTE(v1008) = 2;
      v17 = *(_QWORD *)(v14 + 16);
      v1009 = v15;
      v1010 = v17;
    }
    goto LABEL_14;
  }
  (*(void (**)(uint64_t *__return_ptr, unint64_t))(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v14 & 0xFFFFFFFE)
                                                                                    + 0x4C)
                                                                  + 0x38))(&v1008, v14);
  if (!(_BYTE)v1008)
  {
    v14 = (unint64_t)v1012;
    goto LABEL_223;
  }
  v16 = 0;
LABEL_14:
  v18 = v1012;
  v1014 = (JSC::VM *)v11;
  v1004 = (uint64_t *)((char *)v1003 + 8);
  if ((*((_BYTE *)v1003 + 8) & 1) != 0)
    v1004 = (uint64_t *)JSC::JSRopeString::resolveRope((unint64_t)v1003, this, a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    v156 = 0;
    goto LABEL_535;
  }
  if (*v1004)
    v19 = *(_DWORD *)(*v1004 + 4);
  else
    v19 = 0;
  v1013 = v19;
  v20 = *(_QWORD *)(v13 + 16);
  v21 = *(unsigned __int16 *)((v20 & 0xFFFFFFFFFFFFFFFCLL) + 18);
  v1005 = (JSC::RegExp *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
  v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFFFCLL) + 48);
  if (v22)
    v23 = *(_DWORD *)(v22 + 20) != 0;
  else
    v23 = 0;
  if ((v21 & 2) == 0)
  {
    v1042 = 0;
    v1031 = (WTF *)v1033;
    v1032 = 16;
    v1028 = (WTF *)v1030;
    v1029 = 16;
LABEL_52:
    v993 = v18;
    LODWORD(v1001) = v23;
    v36 = 0;
    v997 = (JSC *)v11;
    while (1)
    {
      v37 = *((_QWORD *)this + 7);
      JSC::RegExp::match((uint64_t)v1005, (uint64_t)this, v1004, v36, (uint64_t)this + 2200, a6, a7, a8);
      v42 = v41;
      if (*(_DWORD *)(v37 + 80))
      {
        v251 = *(_DWORD *)(v37 + 80);
        if ((v251 & 0x27) != 0 && (v251 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v37 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v37 + 16))
          break;
      }
      v43 = *((_QWORD *)this + 275);
      if (v42 == -1)
      {
        v44 = 0;
LABEL_93:
        v45 = -1;
        goto LABEL_58;
      }
      if (*((_DWORD *)this + 553) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x198BC80E0);
      }
      v44 = (int *)*(int *)(v43 + 4);
      v45 = v42;
      *((_QWORD *)this + 269) = v1005;
      *((_QWORD *)this + 268) = v1003;
      *((_QWORD *)this + 265) = v42;
      *((_QWORD *)this + 266) = v44;
      *((_BYTE *)this + 2136) = 0;
      if (*(_DWORD *)(v37 + 760) >= *((unsigned __int8 *)this + 7))
        JSC::Heap::writeBarrierSlowPath(v37 + 192, (unint64_t)this);
LABEL_58:
      v1040 = v45;
      v1041 = v44;
      v46 = v1014;
      if (*((_DWORD *)v1014 + 20))
      {
        v252 = *((_DWORD *)v1014 + 20);
        if ((v252 & 0x27) != 0 && (v252 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1014 + 64), 7u, a3, a4, a5, a6, a7, a8);
        if (*((_QWORD *)v46 + 2))
          goto LABEL_817;
        v45 = v1040;
      }
      if (v45 == -1)
        goto LABEL_521;
      if (!(_BYTE)v1008)
      {
        if (v1011)
          v47 = *((_DWORD *)v1011 + 1);
        else
          v47 = 0;
        v48 = v1042;
        if (v1042 >= v45 && !v47)
          goto LABEL_85;
        v49 = HIDWORD(v1032);
        v50 = HIDWORD(v1032);
        if (HIDWORD(v1032) == (_DWORD)v1032)
        {
          LODWORD(v991) = v21;
          v87 = HIDWORD(v1032) + ((unint64_t)HIDWORD(v1032) >> 2);
          if (v87 >= 0x10)
            v88 = v87 + 1;
          else
            v88 = 16;
          if (v88 <= (unint64_t)HIDWORD(v1032) + 1)
            v89 = HIDWORD(v1032) + 1;
          else
            v89 = v88;
          v90 = v1031;
          if (v89 < 0x11)
          {
            v1031 = (WTF *)v1033;
            LODWORD(v1032) = 16;
            v91 = (WTF *)v1033;
          }
          else
          {
            if (v89 >> 29)
              goto LABEL_815;
            WTF::tryFastMalloc((WTF *)(8 * v89), &v1015);
            v91 = v1015;
            if (!v1015)
              goto LABEL_815;
            LODWORD(v1032) = v89;
            v1031 = v1015;
          }
          if (v50)
          {
            v92 = 8 * v49;
            v93 = v90;
            do
            {
              v94 = *(_QWORD *)v93;
              v93 = (WTF *)((char *)v93 + 8);
              *(_QWORD *)v91 = v94;
              v91 = (WTF *)((char *)v91 + 8);
              v92 -= 8;
            }
            while (v92);
            v91 = v1031;
          }
          if (v1033 != (_BYTE *)v90 && v90)
          {
            if (v91 == v90)
            {
              v1031 = 0;
              LODWORD(v1032) = 0;
            }
            WTF::fastFree((unint64_t)v90, a2, a3, a4, a5, a6, a7, a8);
            v91 = v1031;
          }
          v50 = HIDWORD(v1032);
          v51 = (_DWORD *)((char *)v91 + 8 * HIDWORD(v1032));
          v95 = v1042;
          v96 = v1040;
          *v51 = v1042;
          v51[1] = v96;
          v52 = v51 + 1;
          if (v95 != v96)
            goto LABEL_67;
        }
        else
        {
          v51 = (_DWORD *)((char *)v1031 + 8 * HIDWORD(v1032));
          *v51 = v1042;
          v51[1] = v45;
          v52 = v51 + 1;
          if (v48 != (_DWORD)v45)
            goto LABEL_67;
        }
        *v51 = 0;
        *v52 = 0;
LABEL_67:
        HIDWORD(v1032) = v50 + 1;
        if (v47)
        {
          v1015 = 0;
          *(_QWORD *)&v1016 = 0;
          *(_QWORD *)((char *)&v1016 + 5) = 0;
          v53 = *v1004;
          if (*v1004)
          {
            v54 = *(_QWORD *)(v53 + 8);
            v55 = *(unsigned int *)(v53 + 4) | ((unint64_t)((*(_DWORD *)(v53 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v54 = 0;
            v55 = 0x100000000;
          }
          JSC::substituteBackreferences((uint64_t)&v1015, (WTF::AtomStringImpl *)&v1011, v54, v55, (unsigned int *)v43, (uint64_t)v1005, a7, a8, v38, v39, v40);
          v56 = DWORD2(v1016);
          if ((DWORD2(v1016) & 0x80000000) != 0)
          {
            OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, a2);
            v260 = (JSC::Exception *)OutOfMemoryError;
            if ((OutOfMemoryError & 0xFFFE000000000002) != 0
              || &JSC::Exception::s_info != (char **)(16
                                                    * *(unsigned int *)(16
                                                                      * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                      + 0x4C)))
            {
              v260 = (JSC::Exception *)JSC::Exception::create((uint64_t)v46, (JSC::VM *)OutOfMemoryError, 0, v254, v255, v256, v257, v258);
            }
            JSC::VM::throwException(v46, this, v260, v259, v254, v255, v256, v257, v258);
          }
          else
          {
            v57 = (int *)v1015;
            if (v1015)
              goto LABEL_72;
            if ((_QWORD)v1016 && *(_DWORD *)(v1016 + 4) > (DWORD2(v1016) + (DWORD2(v1016) >> 2)))
            {
              if ((*(_BYTE *)(v1016 + 16) & 4) != 0)
                WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&v1015, (WTF::AtomStringImpl *)DWORD2(v1016), a3, a4, a5, a6, a7, a8);
              else
                WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&v1015, (WTF::AtomStringImpl *)DWORD2(v1016), a3, a4, a5, a6, a7, a8);
              v203 = v1015;
              v1015 = (WTF *)v1016;
              *(_QWORD *)&v1016 = 0;
              if (v203)
              {
                if (*(_DWORD *)v203 == 2)
                {
                  WTF::StringImpl::~StringImpl(v203, v171, v172, v173, v174, v175, v176, v177);
                  WTF::fastFree(v204, v205, v206, v207, v208, v209, v210, v211);
                }
                else
                {
                  *(_DWORD *)v203 -= 2;
                }
              }
            }
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v1015);
            v57 = (int *)v1015;
            if (v1015)
LABEL_72:
              *v57 += 2;
            v1037 = (uint64_t *)v57;
            LODWORD(v58) = HIDWORD(v1029);
            if (HIDWORD(v1029) == (_DWORD)v1029)
            {
              v180 = (uint64_t *)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1028, HIDWORD(v1029) + 1, (unint64_t)&v1037);
              v58 = HIDWORD(v1029);
              v181 = v1028;
              v182 = *v180;
              *v180 = 0;
              *((_QWORD *)v181 + v58) = v182;
            }
            else
            {
              v1037 = 0;
              *((_QWORD *)v1028 + HIDWORD(v1029)) = v57;
            }
            HIDWORD(v1029) = v58 + 1;
            v59 = (WTF::StringImpl *)v1037;
            v1037 = 0;
            if (v59)
            {
              if (*(_DWORD *)v59 == 2)
              {
                WTF::StringImpl::~StringImpl(v59, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v79, v80, v81, v82, v83, v84, v85, v86);
              }
              else
              {
                *(_DWORD *)v59 -= 2;
              }
            }
          }
          v60 = (WTF::StringImpl *)v1016;
          *(_QWORD *)&v1016 = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
            {
              WTF::StringImpl::~StringImpl(v60, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
            }
            else
            {
              *(_DWORD *)v60 -= 2;
            }
          }
          v61 = v1015;
          v1015 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2)
            {
              WTF::StringImpl::~StringImpl(v61, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v71, v72, v73, v74, v75, v76, v77, v78);
            }
            else
            {
              *(_DWORD *)v61 -= 2;
            }
          }
          if (v56 < 0)
            goto LABEL_817;
        }
        else
        {
          v1015 = 0;
          v201 = HIDWORD(v1029);
          if (HIDWORD(v1029) == (_DWORD)v1029)
          {
            WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v1028, (unint64_t)&v1015);
          }
          else
          {
            *((_QWORD *)v1028 + HIDWORD(v1029)) = 0;
            HIDWORD(v1029) = v201 + 1;
          }
          v202 = v1015;
          v1015 = 0;
          if (v202)
          {
            if (*(_DWORD *)v202 == 2)
            {
              WTF::StringImpl::~StringImpl(v202, a2, a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v220, v221, v222, v223, v224, v225, v226, v227);
            }
            else
            {
              *(_DWORD *)v202 -= 2;
            }
          }
        }
        goto LABEL_85;
      }
      v228 = HIDWORD(v1032);
      if (HIDWORD(v1032) == (_DWORD)v1032)
      {
        if ((WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1031, (int *)&v1042, (int *)&v1040, a4, a5, a6, a7, a8) & 1) == 0)goto LABEL_815;
      }
      else
      {
        v229 = v1042;
        v230 = (_DWORD *)((char *)v1031 + 8 * HIDWORD(v1032));
        *v230 = v1042;
        v230[1] = v45;
        if (v229 == (_DWORD)v45)
          *(_QWORD *)v230 = 0;
        HIDWORD(v1032) = v228 + 1;
      }
      v231 = 0;
      LOBYTE(v1015) = 0;
      *(_QWORD *)&v1016 = 0x800000000;
      *((_QWORD *)&v1016 + 1) = (char *)&v1017 + 8;
      v232 = 0uLL;
      v1017 = 0u;
      v1018 = 0u;
      v1019 = 0u;
      v1020 = 0u;
      v1021 = 0;
      if ((_DWORD)v1001)
      {
        v610 = *((_DWORD *)this + 233);
        if (v610)
          v611 = (JSC::VM *)(16 * (v610 & 0xFFFFFFFE));
        else
          v611 = 0;
        v231 = JSC::constructEmptyObject(v997, v611, (JSC::Structure *)a3, a4, a5, a6, a7, a8);
      }
      if (*((_DWORD *)v1005 + 6) != -1)
      {
        v267 = 0;
        v268 = 1;
        do
        {
          a4 = *(unsigned int *)(v43 + 4 * (v268 - 1));
          if ((a4 & 0x80000000) != 0)
          {
            v270 = 10;
          }
          else
          {
            v270 = (uint64_t)JSC::jsSubstring(v997, (uint64_t)this, v1003, (JSC::JSString *)a4, (*(_DWORD *)(v43 + 4 * v268) - a4), a6, a7, a8, v232);
            if (*((_DWORD *)v46 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v46, v269, a3, a4, a5, a6, a7, a8))
              goto LABEL_830;
          }
          v271 = v1016;
          if ((_DWORD)v1016 != DWORD1(v1016)
            && (*((__int128 **)&v1016 + 1) != (__int128 *)((char *)&v1017 + 8)
              ? (v272 = *((_QWORD *)&v1016 + 1) == 0)
              : (v272 = 1),
                v272))
          {
            *(_QWORD *)(*((_QWORD *)&v1016 + 1) + 8 * v1016) = v270;
            LODWORD(v1016) = v271 + 1;
          }
          else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1016, v270, a3, a4, a5, a6, a7, a8) == 1)
          {
            LOBYTE(v1015) = 1;
          }
          v273 = (int)v1001;
          if (!v267)
            v273 = 0;
          if (v273 == 1)
          {
            JSC::RegExp::getCaptureGroupNameForSubpatternId((uint64_t)v1005, v267, &v1037);
            if (v1037)
            {
              v761 = *((unsigned int *)v1037 + 1);
              if ((_DWORD)v761)
              {
                v988 = v988 & 0xFFFFFF0000000000 | v761 | ((unint64_t)((*((_DWORD *)v1037 + 4) >> 2) & 1) << 32);
                v762 = JSC::RegExp::subpatternIdForGroupName<int const*>((uint64_t)v1005, v1037[1], v988, v43);
                if (v267 == v762)
                {
                  JSC::Identifier::fromString((uint64_t **)v997, (WTF::StringImpl **)&v1037, (const WTF::String *)a3, v763, a5, a6, a7, a8, v1046);
                  v769 = v1046[0];
                  v770 = (int *)v231;
                  v771 = (uint64_t)v997;
                  v772 = v270;
                }
                else if (v762)
                {
                  a4 = *(unsigned int *)(v43 + 8 * v762);
                  if ((a4 & 0x80000000) != 0)
                  {
                    v991 = 10;
                  }
                  else
                  {
                    v991 = (uint64_t)JSC::jsSubstring(v997, (uint64_t)this, v1003, (JSC::JSString *)a4, (*(_DWORD *)(v43 + 4 * ((2 * v762) | 1)) - a4), a6, a7, a8, v764);
                    if (*((_DWORD *)v46 + 20)
                      && JSC::VM::hasExceptionsAfterHandlingTraps(v46, v887, a3, a4, a5, a6, a7, a8))
                    {
                      v888 = (WTF::StringImpl *)v1037;
                      v1037 = 0;
                      if (v888)
                      {
                        if (*(_DWORD *)v888 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v888, v239, a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v967, v968, v969, v970, v971, v972, v973, v974);
                        }
                        else
                        {
                          *(_DWORD *)v888 -= 2;
                        }
                      }
LABEL_830:
                      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1016, v239, a3, a4, a5, a6, a7, a8);
                      goto LABEL_817;
                    }
                  }
                  JSC::Identifier::fromString((uint64_t **)v997, (WTF::StringImpl **)&v1037, (const WTF::String *)a3, a4, a5, a6, a7, a8, v1046);
                  v769 = v1046[0];
                  v770 = (int *)v231;
                  v771 = (uint64_t)v997;
                  v772 = v991;
                }
                else
                {
                  JSC::Identifier::fromString((uint64_t **)v997, (WTF::StringImpl **)&v1037, (const WTF::String *)a3, v763, a5, a6, a7, a8, v1046);
                  v769 = v1046[0];
                  v770 = (int *)v231;
                  v771 = (uint64_t)v997;
                  v772 = 10;
                }
                JSC::JSObject::putDirect(v770, v771, (unint64_t)v769, v772, 0, v768, v765, v766, v767);
                v773 = v1046[0];
                v1046[0] = 0;
                if (v773)
                {
                  if (*(_DWORD *)v773 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v773, v760, a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v926, v927, v928, v929, v930, v931, v932, v933);
                  }
                  else
                  {
                    *(_DWORD *)v773 -= 2;
                  }
                }
              }
              v774 = (WTF::StringImpl *)v1037;
              v1037 = 0;
              if (v774)
              {
                if (*(_DWORD *)v774 == 2)
                {
                  WTF::StringImpl::~StringImpl(v774, v760, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v893, v894, v895, v896, v897, v898, v899, v900);
                }
                else
                {
                  *(_DWORD *)v774 -= 2;
                }
              }
            }
          }
          ++v267;
          v268 += 2;
        }
        while (v267 < (*((_DWORD *)v1005 + 6) + 1));
      }
      v233 = v1040 | 0xFFFE000000000000;
      if ((v1040 & 0x80000000) != 0)
        v233 = COERCE__INT64((double)v1040) + 0x2000000000000;
      if (HIDWORD(v1040))
        v234 = COERCE__INT64((double)v1040) + 0x2000000000000;
      else
        v234 = v233;
      v235 = v1016;
      if ((_DWORD)v1016 == DWORD1(v1016)
        || *((__int128 **)&v1016 + 1) != (__int128 *)((char *)&v1017 + 8) && *((_QWORD *)&v1016 + 1))
      {
        v236 = (int)v1001;
        v237 = (uint64_t)v993;
        if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1016, v234, a3, a4, a5, a6, a7, a8) == 1)
          LOBYTE(v1015) = 1;
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)&v1016 + 1) + 8 * v1016) = v234;
        LODWORD(v1016) = v235 + 1;
        v236 = (int)v1001;
        v237 = (uint64_t)v993;
      }
      v238 = v1016;
      if ((_DWORD)v1016 == DWORD1(v1016)
        || *((__int128 **)&v1016 + 1) != (__int128 *)((char *)&v1017 + 8) && *((_QWORD *)&v1016 + 1))
      {
        if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1016, (uint64_t)v1003, a3, a4, a5, a6, a7, a8) == 1)
          LOBYTE(v1015) = 1;
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)&v1016 + 1) + 8 * v1016) = v1003;
        LODWORD(v1016) = v238 + 1;
      }
      if (v236)
        JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&v1015, v231, a3, a4, a5, a6, a7, a8);
      if ((_BYTE)v1015)
      {
        JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v1014);
        goto LABEL_830;
      }
      v1037 = (uint64_t *)*((_QWORD *)&v1016 + 1);
      v1038 = v1016;
      v240 = JSC::call((uint64_t *)this, v237, (unsigned __int8 *)&v1008, 10, (uint64_t)&v1037, a6, a7, a8);
      v1046[0] = (WTF::StringImpl *)v240;
      if (*((_DWORD *)v46 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v46, (uint64_t)v239, a3, a4, a5, a6, a7, a8))
          goto LABEL_830;
        v240 = (unint64_t)v1046[0];
      }
      if ((v240 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v240 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v1046, this, (const WTF::String *)a3, a4, a5, a6, a7, a8, (int **)&v1037);
      }
      else
      {
        v242 = *(uint64_t **)(v240 + 8);
        if ((v242 & 1) != 0)
          v242 = (uint64_t *)*JSC::JSRopeString::resolveRope(v240, this, a3, a4, v241, a5, a6, a7, a8);
        if (v242)
          *(_DWORD *)v242 += 2;
        v1037 = v242;
      }
      if (*((_DWORD *)v46 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v46, (uint64_t)v239, a3, a4, a5, a6, a7, a8))
        goto LABEL_838;
      v243 = HIDWORD(v1029);
      if (HIDWORD(v1029) == (_DWORD)v1029)
      {
        WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>((uint64_t)&v1028, (unint64_t)&v1037);
      }
      else
      {
        v244 = v1028;
        v245 = (int *)v1037;
        if (v1037)
          *(_DWORD *)v1037 += 2;
        *((_QWORD *)v244 + v243) = v245;
        HIDWORD(v1029) = v243 + 1;
      }
      if (*((_DWORD *)v46 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v46, (uint64_t)v239, a3, a4, a5, a6, a7, a8))
LABEL_838:
        v246 = 0;
      else
        v246 = 1;
      v247 = (WTF::StringImpl *)v1037;
      v1037 = 0;
      if (v247)
      {
        if (*(_DWORD *)v247 == 2)
        {
          WTF::StringImpl::~StringImpl(v247, v239, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v296, v297, v298, v299, v300, v301, v302, v303);
        }
        else
        {
          *(_DWORD *)v247 -= 2;
        }
      }
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1016, v239, a3, a4, a5, a6, a7, a8);
      if ((v246 & 1) == 0)
      {
LABEL_817:
        v156 = 0;
        goto LABEL_523;
      }
LABEL_85:
      v62 = (int)v1041;
      v1042 = (unint64_t)v1041;
      if ((int *)v1040 == v1041)
      {
        v36 = (_DWORD)v1041 + 1;
        v248 = v1013;
        if ((int)v1041 + 1 > v1013)
          goto LABEL_521;
        v249 = (WTF::StringImpl *)*v1004;
        if (*v1004)
        {
          if (*((_DWORD *)v249 + 1) > v1041
            && (WTF::StringImpl::at(v249, v1041) & 0xFC00) == 0xD800)
          {
            v250 = (WTF::StringImpl *)*v1004;
            if (*v1004)
            {
              if (*((_DWORD *)v250 + 1) > v36 && (WTF::StringImpl::at(v250, v62 + 1) & 0xFC00) == 0xDC00)
              {
                v36 = v62 + 2;
                if (v62 + 2 > v248)
                  goto LABEL_521;
              }
            }
          }
        }
      }
      else
      {
        v36 = v1041;
      }
      if ((v21 & 2) == 0)
        goto LABEL_521;
    }
    v44 = 0;
    v43 = 0;
    goto LABEL_93;
  }
  v1015 = (WTF *)*((_QWORD *)this + 7);
  if ((v20 & 1) != 0)
    JSC::throwTypeError((unint64_t)this, &v1015, (uint64_t)"Attempted to assign to readonly property.", 42);
  else
    *(_QWORD *)(v13 + 24) = 0xFFFE000000000000;
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    v156 = 0;
    goto LABEL_534;
  }
  if (!(_BYTE)v1008)
  {
    if (!v16 || !*((_DWORD *)v16 + 1))
    {
      v1037 = (uint64_t *)v11;
      v1046[0] = 0;
      v1015 = (WTF *)((char *)&v1016 + 8);
      *(_QWORD *)&v1016 = 16;
      v24 = *v1004;
      if (*v1004)
        LODWORD(v24) = *(_DWORD *)(v24 + 4);
      v25 = 0;
      LODWORD(v26) = 0;
      LODWORD(v1045) = v24;
      while (1)
      {
        v27 = (JSC::VM *)*((_QWORD *)this + 7);
        v28 = JSC::RegExp::match(v1005, this, (const WTF::String *)v1004, v26, a5, a6, a7, a8);
        v26 = a2;
        if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          v26 = 0;
          v28 = -1;
        }
        else if (v28 != -1)
        {
          *((_QWORD *)this + 269) = v1005;
          *((_QWORD *)this + 268) = v1003;
          *((_QWORD *)this + 265) = v28;
          *((_QWORD *)this + 266) = v26;
          *((_BYTE *)this + 2136) = 0;
          if (*((_DWORD *)v27 + 190) >= *((unsigned __int8 *)this + 7))
            JSC::Heap::writeBarrierSlowPath((uint64_t)v27 + 192, (unint64_t)this);
        }
        if (*(_DWORD *)(v11 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_516;
        }
        if (v28 == -1)
          break;
        if ((unint64_t)v25 < v28)
        {
          v29 = DWORD1(v1016);
          if (DWORD1(v1016) == (_DWORD)v1016)
          {
            v197 = DWORD1(v1016) + ((unint64_t)DWORD1(v1016) >> 2);
            if (v197 >= 0x10)
              v198 = v197 + 1;
            else
              v198 = 16;
            if (v198 <= (unint64_t)DWORD1(v1016) + 1)
              v199 = DWORD1(v1016) + 1;
            else
              v199 = v198;
            v200 = v1015;
            if (v199 < 0x11)
            {
              v1015 = (WTF *)((char *)&v1016 + 8);
              LODWORD(v1016) = 16;
              v34 = (WTF *)((char *)&v1016 + 8);
            }
            else
            {
              if (v199 >> 29)
                goto LABEL_514;
              WTF::tryFastMalloc((WTF *)(8 * v199), &v1031);
              v34 = v1031;
              if (!v1031)
                goto LABEL_514;
              LODWORD(v1016) = v199;
              v1015 = v1031;
            }
            if ((_DWORD)v29)
            {
              v35 = 8 * v29;
              v32 = v200;
              do
              {
                v33 = *(_QWORD *)v32;
                v32 = (WTF *)((char *)v32 + 8);
                *(_QWORD *)v34 = v33;
                v34 = (WTF *)((char *)v34 + 8);
                v35 -= 8;
              }
              while (v35);
              v34 = v1015;
            }
            if ((WTF *)((char *)&v1016 + 8) != v200 && v200)
            {
              if (v34 == v200)
              {
                v1015 = 0;
                LODWORD(v1016) = 0;
              }
              WTF::fastFree((unint64_t)v200, a2, a3, a4, a5, a6, a7, a8);
              v34 = v1015;
            }
            v30 = DWORD1(v1016) + 1;
            v31 = (_DWORD *)((char *)v34 + 8 * DWORD1(v1016));
          }
          else
          {
            v30 = DWORD1(v1016) + 1;
            v31 = (_DWORD *)((char *)v1015 + 8 * DWORD1(v1016));
          }
          *v31 = (_DWORD)v25;
          v31[1] = v28;
          if ((_DWORD)v25 == (_DWORD)v28)
          {
            *v31 = 0;
            v31[1] = 0;
          }
          DWORD1(v1016) = v30;
        }
        v1046[0] = v26;
        v25 = v26;
        if ((WTF::StringImpl *)v28 == v26)
        {
          v25 = v26;
          LODWORD(v26) = (_DWORD)v26 + 1;
          if (v26 > v1045)
            goto LABEL_189;
        }
      }
      v28 = (unint64_t)v25;
LABEL_189:
      v156 = (uint64_t)v1003;
      if (!v28)
        goto LABEL_190;
      v159 = (int)v1045;
      v160 = DWORD1(v1016);
      if (v1045 > v28)
      {
        if (DWORD1(v1016) == (_DWORD)v1016)
        {
          if (!WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int &>((uint64_t)&v1015, (int *)v1046, (int *)&v1045, a4, a5, a6, a7, a8))
          {
LABEL_514:
            v359 = (WTF **)&v1037;
LABEL_515:
            JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)v359);
LABEL_516:
            v156 = 0;
            goto LABEL_190;
          }
          v160 = DWORD1(v1016);
        }
        else
        {
          v179 = (_DWORD *)((char *)v1015 + 8 * DWORD1(v1016));
          v160 = DWORD1(v1016) + 1;
          *v179 = v28;
          v179[1] = v159;
          DWORD1(v1016) = v160;
        }
      }
      v161 = v1015;
      v162 = (WTF *)*((_QWORD *)this + 7);
      v1028 = v162;
      if (v160 == 1)
      {
        v163 = *v1004;
        if (*v1004)
          v164 = *(_DWORD *)(v163 + 4);
        else
          v164 = 0;
        v165 = *((_DWORD *)v1015 + 1) - *(_DWORD *)v1015;
        if (*(int *)v1015 <= 0)
        {
          v156 = (uint64_t)v1003;
          if (v165 >= v164)
            goto LABEL_190;
        }
        if (v165 >= v164)
          v166 = v164;
        else
          v166 = v165;
        if ((_DWORD)v166)
        {
          v167 = *(_DWORD *)v1015 & ~(*(int *)v1015 >> 31);
          if ((*(_DWORD *)(v163 + 16) & 4) != 0)
          {
            if (v166 <= 0xC)
            {
              v168 = (_BYTE *)(*(_QWORD *)(v163 + 8) + v167);
              v169 = (int *)WTF::fastCompactMalloc((WTF *)(v166 + 20));
              v170 = v169 + 5;
              *v169 = 2;
              v169[1] = v166;
              *((_QWORD *)v169 + 1) = v169 + 5;
              v169[4] = 4;
              v1040 = (unint64_t)v169;
              if ((_DWORD)v166 == 1)
                *v170 = *v168;
              else
                memcpy(v170, v168, v166);
LABEL_297:
              v1031 = (WTF *)v169;
LABEL_494:
              v156 = JSC::jsString((uint64_t)v162, (JSC::VM *)&v1031, a3, a4, a5, a6, a7, a8);
              v344 = v1031;
              v1031 = 0;
              if (v344)
              {
                if (*(_DWORD *)v344 == 2)
                {
                  WTF::StringImpl::~StringImpl(v344, a2, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v345, v346, v347, v348, v349, v350, v351, v352);
                }
                else
                {
                  *(_DWORD *)v344 -= 2;
                }
              }
LABEL_190:
              v157 = v1015;
              if ((WTF *)((char *)&v1016 + 8) != v1015 && v1015 != 0)
              {
                v1015 = 0;
                LODWORD(v1016) = 0;
                goto LABEL_575;
              }
              goto LABEL_534;
            }
          }
          else if (v166 <= 6)
          {
            WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v163 + 8) + 2 * v167), v166, (uint64_t *)&v1040);
            v169 = (int *)v1040;
            goto LABEL_297;
          }
          v304 = (_DWORD *)*v1004;
          if ((*(_DWORD *)(v163 + 16) & 3) == 2)
            v304 = *(_DWORD **)(v163 + 24);
          v305 = WTF::fastCompactMalloc((WTF *)0x20);
          v169 = (int *)v305;
          v306 = *(_DWORD *)(v163 + 16);
          v307 = *(_QWORD *)(v163 + 8);
          *v304 += 2;
          *(_DWORD *)v305 = 2;
          *(_DWORD *)(v305 + 4) = v166;
          if ((v306 & 4) != 0)
          {
            *(_QWORD *)(v305 + 8) = v307 + v167;
            *(_DWORD *)(v305 + 16) = 6;
          }
          else
          {
            *(_QWORD *)(v305 + 8) = v307 + 2 * v167;
            *(_DWORD *)(v305 + 16) = 2;
          }
          *(_QWORD *)(v305 + 24) = v304;
        }
        else
        {
          v169 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
        }
        v1040 = (unint64_t)v169;
        goto LABEL_297;
      }
      if (!v160)
        goto LABEL_356;
      LODWORD(v183) = 0;
      v184 = 8 * v160;
      v185 = (_DWORD *)((char *)v1015 + 4);
      v186 = v184;
      do
      {
        v183 = (*v185 + v183 - *(v185 - 1));
        v185 += 2;
        v186 -= 8;
      }
      while (v186);
      if (!(_DWORD)v183)
      {
LABEL_356:
        v156 = *((_QWORD *)v162 + 5246);
        goto LABEL_190;
      }
      v187 = *v1004;
      if (*v1004)
      {
        v188 = *(int **)(v187 + 8);
        v189 = *(unsigned int *)(v187 + 4);
        if ((*(_BYTE *)(v187 + 16) & 4) == 0)
        {
          if (v183 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * v183 + 20), &v1031);
            v190 = v1031;
            if (v1031)
            {
              v336 = 0;
              *(_DWORD *)v1031 = 2;
              *((_DWORD *)v190 + 1) = v183;
              *((_QWORD *)v190 + 1) = (char *)v190 + 20;
              *((_DWORD *)v190 + 4) = 0;
              v337 = (int *)((char *)v161 + 4);
              while (1)
              {
                v338 = *(v337 - 1);
                v339 = v189 - v338;
                if (v189 < v338)
                  goto LABEL_1046;
                v340 = *v337;
                v341 = v340 - v338;
                if ((_DWORD)v340 - (_DWORD)v338 != -1)
                {
                  v194 = v339 >= v341;
                  v339 = v340 - v338;
                  if (!v194)
                    goto LABEL_1046;
                }
                v342 = (_WORD *)((char *)v190 + 2 * v336 + 20);
                v343 = (_WORD *)v188 + v338;
                if (v339 == 1)
                {
                  *v342 = *v343;
                }
                else if (v339)
                {
                  memcpy(v342, v343, 2 * v339);
                }
                v336 += v341;
                v337 += 2;
                v184 -= 8;
                if (!v184)
                {
LABEL_493:
                  v1031 = v190;
                  goto LABEL_494;
                }
              }
            }
          }
          goto LABEL_1243;
        }
      }
      else
      {
        v188 = 0;
        v189 = 0;
      }
      if ((v183 & 0x80000000) == 0)
      {
        WTF::tryFastCompactMalloc((WTF *)(v183 + 20), &v1031);
        v190 = v1031;
        if (v1031)
        {
          v191 = 0;
          *(_DWORD *)v1031 = 2;
          *((_DWORD *)v190 + 1) = v183;
          *((_QWORD *)v190 + 1) = (char *)v190 + 20;
          *((_DWORD *)v190 + 4) = 4;
          while (1)
          {
            v192 = *(_QWORD *)v161;
            if (v189 < (int)*(_QWORD *)v161)
              goto LABEL_1046;
            v193 = (uint64_t)(0xFFFFFFFF00000001 * v192) >> 32;
            a3 = v189 - (int)v192;
            if (v193 != -1)
            {
              v194 = a3 >= v193;
              a3 = (uint64_t)(0xFFFFFFFF00000001 * v192) >> 32;
              if (!v194)
                goto LABEL_1046;
            }
            v195 = (char *)v190 + v191 + 20;
            v196 = (char *)v188 + (int)v192;
            if (a3 == 1)
            {
              *v195 = *v196;
            }
            else if (a3)
            {
              memcpy(v195, v196, a3);
            }
            v191 += v193;
            v161 = (WTF *)((char *)v161 + 8);
            v184 -= 8;
            if (!v184)
              goto LABEL_493;
          }
        }
      }
LABEL_1243:
      v359 = &v1028;
      goto LABEL_515;
    }
    v97 = 0;
LABEL_117:
    v1042 = 0;
    v99 = (WTF *)v1033;
    v1031 = (WTF *)v1033;
    v1032 = 16;
    v1028 = (WTF *)v1030;
    v1029 = 16;
    if (v97)
    {
      v100 = *((_DWORD *)v1005 + 6);
      v101 = v100 + 3;
      v102 = v100 + 4;
      LODWORD(v1001) = v23;
      if (v23)
        v103 = v102;
      else
        v103 = v101;
      JSC::CachedCall::CachedCall((JSC::CachedCall *)&v1015, this, v18, v103, a5, a6, a7, a8);
      v998 = (JSC *)v11;
      if (*(_DWORD *)(v11 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, v104, v105, v106, v107, v108, v109, v110))
      {
        goto LABEL_481;
      }
      v111 = 0;
      v112 = (uint64_t *)((char *)this + 2200);
      while (1)
      {
        v113 = (JSC::VM *)*((_QWORD *)this + 7);
        JSC::RegExp::match((uint64_t)v1005, (uint64_t)this, v1004, v111, (uint64_t)v112, v108, v109, v110);
        v120 = v119;
        if (*((_DWORD *)v113 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v113, (uint64_t)v114, (uint64_t)v115, v116, v117, v108, v109, v110))
          {
            break;
          }
        }
        v121 = *v112;
        if (v120 == -1)
        {
          v122 = 0;
LABEL_276:
          v123 = -1;
          goto LABEL_128;
        }
        if (*((_DWORD *)this + 553) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x198BC82B0);
        }
        v122 = (JSC::MarkedVectorBase *)*(int *)(v121 + 4);
        v123 = v120;
        *((_QWORD *)this + 269) = v1005;
        *((_QWORD *)this + 268) = v1003;
        *((_QWORD *)this + 265) = v120;
        *((_QWORD *)this + 266) = v122;
        *((_BYTE *)this + 2136) = 0;
        if (*((_DWORD *)v113 + 190) >= *((unsigned __int8 *)this + 7))
        {
          v334 = v122;
          v335 = v121;
          JSC::Heap::writeBarrierSlowPath((uint64_t)v113 + 192, (unint64_t)this);
          v121 = v335;
          v122 = v334;
        }
LABEL_128:
        v124 = v1014;
        if (*((_DWORD *)v1014 + 20))
        {
          v331 = v122;
          v332 = v121;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v1014, (uint64_t)v114, (uint64_t)v115, v116, v117, v108, v109, v110);
          v121 = v332;
          v122 = v331;
          if (hasExceptionsAfterHandlingTraps)
            goto LABEL_481;
        }
        if (v123 == -1)
        {
LABEL_520:
          JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v1015, v114, (uint64_t)v115, v116, v117, v108, v109, v110);
LABEL_521:
          v361 = HIDWORD(v1029);
          if (!v1042)
          {
            v156 = (uint64_t)v1003;
            if (!HIDWORD(v1029))
              goto LABEL_523;
          }
          v366 = v1013;
          if (v1013 > v1042)
          {
            if (HIDWORD(v1032) != (_DWORD)v1032)
            {
              v400 = HIDWORD(v1032) + 1;
              v401 = (_DWORD *)((char *)v1031 + 8 * HIDWORD(v1032));
              *v401 = v1042;
              v401[1] = v366;
              HIDWORD(v1032) = v400;
              goto LABEL_540;
            }
            if (WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int &>((uint64_t)&v1031, (int *)&v1042, (int *)&v1013, a4, a5, a6, a7, a8))
            {
              v361 = HIDWORD(v1029);
              goto LABEL_540;
            }
LABEL_815:
            v593 = &v1014;
            goto LABEL_816;
          }
LABEL_540:
          v367 = v1031;
          v368 = HIDWORD(v1032);
          v369 = v1028;
          v188 = (int *)*((_QWORD *)this + 7);
          v1045 = v188;
          if (HIDWORD(v1032) != 1 || v361)
          {
            v370 = SHIDWORD(v1032);
            if (HIDWORD(v1032) != 2 || v361 != 1)
            {
              if (SHIDWORD(v1032) < 1)
              {
                v372 = 0;
                v371 = 0;
              }
              else
              {
                v371 = 0;
                v372 = 0;
                v373 = (_DWORD *)((char *)v1031 + 4);
                do
                {
                  v374 = *v373 - *(v373 - 1);
                  v375 = __OFADD__(v371, v374);
                  v376 = v371 + v374;
                  if (v375)
                    v372 = 1;
                  if (!v375)
                    v371 = v376;
                  v373 += 2;
                  --v368;
                }
                while (v368);
              }
              if (v361 < 1)
              {
                v378 = 1;
              }
              else
              {
                v377 = v361;
                v378 = 1;
                v379 = v1028;
                do
                {
                  v380 = *(_QWORD *)v379;
                  if (*(_QWORD *)v379)
                  {
                    v381 = *(unsigned int *)(v380 + 4);
                    if ((_DWORD)v381 + v371 == v381 + (int)v371)
                      v371 += v381;
                    else
                      v372 = 1;
                    if ((_DWORD)v381 && (*(_BYTE *)(v380 + 16) & 4) == 0)
                      v378 = 0;
                  }
                  v379 = (WTF *)((char *)v379 + 8);
                  --v377;
                }
                while (v377);
              }
              if (v372)
                goto LABEL_862;
              if (!v371)
              {
                v156 = *((_QWORD *)v188 + 5246);
                goto LABEL_523;
              }
              if (*v1004)
                v402 = (*(unsigned __int8 *)(*v1004 + 16) >> 2) & 1;
              else
                v402 = 1;
              if ((v402 & v378) == 1)
              {
                if ((v371 & 0x80000000) == 0)
                {
                  WTF::tryFastCompactMalloc((WTF *)(v371 + 20), &v1015);
                  v403 = v1015;
                  if (v1015)
                  {
                    v404 = (char *)v1015 + 20;
                    *(_DWORD *)v1015 = 2;
                    *((_DWORD *)v403 + 1) = v371;
                    *((_QWORD *)v403 + 1) = (char *)v403 + 20;
                    v1006 = v403;
                    *((_DWORD *)v403 + 4) = 4;
                    if ((int)v370 <= v361)
                      v405 = v361;
                    else
                      v405 = v370;
                    if ((int)v405 >= 1)
                    {
                      v406 = 0;
                      v407 = v367;
                      v408 = 0;
                      v409 = (_DWORD *)((char *)v407 + 4);
                      do
                      {
                        if (v406 < v370)
                        {
                          v410 = *v1004;
                          if (*v1004
                            && (v411 = *(unsigned int *)(v410 + 4),
                                v412 = *(v409 - 1),
                                v411 > v412))
                          {
                            v413 = *(unsigned int *)(v410 + 16);
                            v414 = *(char **)(v410 + 8);
                            v415 = *v409 - v412;
                            if ((int)v411 - (int)v412 > v415 || (v415 = v411 - v412, (_DWORD)v412))
                            {
                              v416 = (v413 >> 2) & 1;
                              v417 = v411 - v412;
                              LODWORD(v411) = v415;
                              if ((_DWORD)v416)
                              {
                                if (v417 < v415)
                                  goto LABEL_1046;
                                v414 += v412;
                                LODWORD(v411) = v415;
                              }
                              else
                              {
                                if (v417 < v415)
                                  goto LABEL_1046;
                                v414 += 2 * v412;
                              }
                            }
                            else
                            {
                              v411 = v411 & 0xFFFFFFFEFFFFFFFFLL | (((v413 >> 2) & 1) << 32);
                            }
                            v418 = &v404[v408];
                            if ((_DWORD)v411 == 1)
                            {
                              *v418 = *v414;
                              LODWORD(v411) = 1;
                            }
                            else if ((_DWORD)v411)
                            {
                              memcpy(v418, v414, v411);
                            }
                          }
                          else
                          {
                            LODWORD(v411) = 0;
                          }
                          v408 += v411;
                        }
                        if (v406 < v361)
                        {
                          v419 = *((_QWORD *)v369 + v406);
                          if (v419)
                          {
                            v420 = *(char **)(v419 + 8);
                            v421 = *(_DWORD *)(v419 + 4);
                            v422 = &v404[v408];
                            if (v421 == 1)
                            {
                              *v422 = *v420;
                              v421 = 1;
                            }
                            else if (v421)
                            {
                              memcpy(v422, v420, *(unsigned int *)(v419 + 4));
                            }
                          }
                          else
                          {
                            v421 = 0;
                          }
                          v408 += v421;
                        }
                        ++v406;
                        v409 += 2;
                      }
                      while (v405 != v406);
                    }
                    v423 = v1006;
                    goto LABEL_614;
                  }
                }
LABEL_862:
                v593 = (JSC::VM **)&v1045;
LABEL_816:
                JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)v593);
                goto LABEL_817;
              }
              if (v371 > 0x7FFFFFEF)
                goto LABEL_862;
              WTF::tryFastCompactMalloc((WTF *)(2 * v371 + 20), &v1015);
              v514 = v1015;
              if (!v1015)
                goto LABEL_862;
              v515 = (char *)v1015 + 20;
              *(_DWORD *)v1015 = 2;
              *((_DWORD *)v514 + 1) = v371;
              *((_QWORD *)v514 + 1) = (char *)v514 + 20;
              v1001 = v514;
              *((_DWORD *)v514 + 4) = 0;
              if ((int)v370 <= v361)
                v516 = v361;
              else
                v516 = v370;
              if ((int)v516 >= 1)
              {
                v517 = 0;
                v518 = 0;
                do
                {
                  if (v517 < v370)
                  {
                    v519 = *v1004;
                    if (*v1004
                      && (v520 = *(unsigned int *)(v519 + 4),
                          v521 = *((unsigned int *)v367 + 2 * v517),
                          v520 > v521))
                    {
                      v522 = *(unsigned int *)(v519 + 16);
                      v523 = *(int8x16_t **)(v519 + 8);
                      v524 = *((_DWORD *)v367 + 2 * v517 + 1) - v521;
                      if ((int)v520 - (int)v521 > v524 || (v524 = v520 - v521, (_DWORD)v521))
                      {
                        v525 = (v522 >> 2) & 1;
                        v526 = v520 - v521;
                        v527 = v524;
                        if ((_DWORD)v525)
                        {
                          if (v526 < v524)
                            goto LABEL_1046;
                          v523 = (int8x16_t *)((char *)v523 + v521);
                          v527 = v524 | 0x100000000;
                        }
                        else
                        {
                          if (v526 < v524)
                            goto LABEL_1046;
                          v523 = (int8x16_t *)((char *)v523 + 2 * v521);
                        }
                      }
                      else
                      {
                        v527 = v520 & 0xFFFFFFFEFFFFFFFFLL | (((v522 >> 2) & 1) << 32);
                      }
                      v528 = &v515[2 * v518];
                      if ((v527 & 0x100000000) != 0)
                      {
                        if (v527 < 0x40)
                        {
                          v959 = &v515[2 * v518];
                        }
                        else
                        {
                          v959 = &v528[2 * (v527 & 0xFFFFFFC0)];
                          v960 = &v515[2 * v518];
                          do
                          {
                            v1048.val[0] = *v523;
                            v961 = v523[1];
                            v1050.val[0] = v523[2];
                            v962 = v523[3];
                            v523 += 4;
                            v1052.val[1] = 0uLL;
                            v1052.val[0] = v962;
                            v1050.val[1] = 0u;
                            v1054.val[0] = v961;
                            v1048.val[1] = 0u;
                            v963 = v960;
                            vst2q_s8(v963, v1048);
                            v963 += 32;
                            v1054.val[1] = 0u;
                            vst2q_s8(v963, v1054);
                            v964 = v960 + 64;
                            vst2q_s8(v964, v1050);
                            v965 = v960 + 96;
                            vst2q_s8(v965, v1052);
                            v960 += 128;
                          }
                          while (v960 != v959);
                        }
                        while (v959 != &v528[2 * v527])
                        {
                          v966 = v523->u8[0];
                          v523 = (int8x16_t *)((char *)v523 + 1);
                          *(_WORD *)v959 = v966;
                          v959 += 2;
                        }
                      }
                      else if ((_DWORD)v527 == 1)
                      {
                        *(_WORD *)v528 = v523->i16[0];
                        LODWORD(v527) = 1;
                      }
                      else if ((_DWORD)v527)
                      {
                        memcpy(v528, v523, 2 * v527);
                      }
                    }
                    else
                    {
                      LODWORD(v527) = 0;
                    }
                    v518 += v527;
                  }
                  if (v517 < v361)
                  {
                    v529 = *((_QWORD *)v369 + v517);
                    if (v529)
                    {
                      v530 = *(int8x16_t **)(v529 + 8);
                      v531 = *(unsigned int *)(v529 + 4);
                      v532 = &v515[2 * v518];
                      if ((*(_BYTE *)(v529 + 16) & 4) != 0)
                      {
                        if (v531 >= 0x40)
                        {
                          v533 = &v532[2 * (v531 & 0xFFFFFFC0)];
                          v535 = &v515[2 * v518];
                          do
                          {
                            v1047.val[0] = *v530;
                            v536 = v530[1];
                            v1049.val[0] = v530[2];
                            v537 = v530[3];
                            v530 += 4;
                            v1053.val[1] = 0u;
                            v1053.val[0] = v537;
                            v1049.val[1] = 0u;
                            v1051.val[0] = v536;
                            v1047.val[1] = 0u;
                            v538 = v535;
                            vst2q_s8(v538, v1047);
                            v538 += 32;
                            v1051.val[1] = 0u;
                            vst2q_s8(v538, v1051);
                            v539 = v535 + 64;
                            vst2q_s8(v539, v1049);
                            v540 = v535 + 96;
                            vst2q_s8(v540, v1053);
                            v535 += 128;
                          }
                          while (v535 != v533);
                        }
                        else
                        {
                          v533 = &v515[2 * v518];
                        }
                        while (v533 != &v532[2 * v531])
                        {
                          v534 = v530->u8[0];
                          v530 = (int8x16_t *)((char *)v530 + 1);
                          *(_WORD *)v533 = v534;
                          v533 += 2;
                        }
                      }
                      else if ((_DWORD)v531 == 1)
                      {
                        *(_WORD *)v532 = v530->i16[0];
                        LODWORD(v531) = 1;
                      }
                      else if ((_DWORD)v531)
                      {
                        memcpy(v532, v530, 2 * v531);
                      }
                    }
                    else
                    {
                      LODWORD(v531) = 0;
                    }
                    v518 += v531;
                  }
                  ++v517;
                }
                while (v517 != v516);
              }
              v423 = v1001;
LABEL_614:
              v1015 = v423;
              v424 = (uint64_t)v188;
LABEL_615:
              v156 = JSC::jsString(v424, (JSC::VM *)&v1015, a3, a4, a5, a6, a7, a8);
              v425 = v1015;
              v1015 = 0;
              if (!v425)
              {
LABEL_523:
                v362 = v1028;
                if (HIDWORD(v1029))
                {
                  v390 = 8 * HIDWORD(v1029);
                  do
                  {
                    v391 = *(WTF::StringImpl **)v362;
                    *(_QWORD *)v362 = 0;
                    if (v391)
                    {
                      if (*(_DWORD *)v391 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v391, a2, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v392, v393, v394, v395, v396, v397, v398, v399);
                      }
                      else
                      {
                        *(_DWORD *)v391 -= 2;
                      }
                    }
                    v362 = (WTF *)((char *)v362 + 8);
                    v390 -= 8;
                  }
                  while (v390);
                  v362 = v1028;
                }
                if (v1030 != (_BYTE *)v362 && v362 != 0)
                {
                  v1028 = 0;
                  LODWORD(v1029) = 0;
                  WTF::fastFree((unint64_t)v362, a2, a3, a4, a5, a6, a7, a8);
                }
                v157 = v1031;
                if (v1033 != (_BYTE *)v1031 && v1031 != 0)
                {
                  v1031 = 0;
                  LODWORD(v1032) = 0;
LABEL_575:
                  WTF::fastFree((unint64_t)v157, a2, a3, a4, a5, a6, a7, a8);
                }
                goto LABEL_534;
              }
LABEL_616:
              if (*(_DWORD *)v425 == 2)
              {
                WTF::StringImpl::~StringImpl(v425, a2, a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v442, v443, v444, v445, v446, v447, v448, v449);
              }
              else
              {
                *(_DWORD *)v425 -= 2;
              }
              goto LABEL_523;
            }
            v427 = *(unsigned int *)v1031;
            v426 = *((_DWORD *)v1031 + 1);
            v428 = (v426 - v427);
            if (v426 == (_DWORD)v427)
            {
              v431 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
              goto LABEL_636;
            }
            v429 = *v1004;
            if ((*(_DWORD *)(*v1004 + 16) & 4) != 0)
            {
              if (v428 <= 0xC)
              {
                v430 = (_BYTE *)(*(_QWORD *)(v429 + 8) + v427);
                v431 = (int *)WTF::fastCompactMalloc((WTF *)(v428 + 20));
                v432 = v431 + 5;
                *v431 = 2;
                v431[1] = v428;
                *((_QWORD *)v431 + 1) = v431 + 5;
                v431[4] = 4;
                if ((_DWORD)v428 == 1)
                  *v432 = *v430;
                else
                  memcpy(v432, v430, v428);
                goto LABEL_636;
              }
            }
            else if (v428 <= 6)
            {
              WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v429 + 8) + 2 * v427), v428, (uint64_t *)&v1015);
              v431 = (int *)v1015;
              goto LABEL_636;
            }
            v561 = (_DWORD *)*v1004;
            if ((*(_DWORD *)(*v1004 + 16) & 3) == 2)
              v561 = *(_DWORD **)(v429 + 24);
            v562 = WTF::fastCompactMalloc((WTF *)0x20);
            v431 = (int *)v562;
            v563 = *(_DWORD *)(v429 + 16);
            v564 = *(_QWORD *)(v429 + 8);
            *v561 += 2;
            *(_DWORD *)v562 = 2;
            *(_DWORD *)(v562 + 4) = v428;
            if ((v563 & 4) != 0)
            {
              *(_QWORD *)(v562 + 8) = v564 + v427;
              *(_DWORD *)(v562 + 16) = 6;
            }
            else
            {
              *(_QWORD *)(v562 + 8) = v564 + 2 * v427;
              *(_DWORD *)(v562 + 16) = 2;
            }
            *(_QWORD *)(v562 + 24) = v561;
LABEL_636:
            v1044 = (const WTF::String *)v431;
            v451 = *((unsigned int *)v367 + 2);
            v450 = *((_DWORD *)v367 + 3);
            v452 = (v450 - v451);
            if (v450 == (_DWORD)v451)
            {
              v455 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
            }
            else
            {
              v453 = *v1004;
              if ((*(_DWORD *)(*v1004 + 16) & 4) != 0)
              {
                if (v452 <= 0xC)
                {
                  v454 = (_BYTE *)(*(_QWORD *)(v453 + 8) + v451);
                  v455 = (int *)WTF::fastCompactMalloc((WTF *)(v452 + 20));
                  v456 = v455 + 5;
                  *v455 = 2;
                  v455[1] = v452;
                  *((_QWORD *)v455 + 1) = v455 + 5;
                  v455[4] = 4;
                  v1015 = (WTF *)v455;
                  if ((_DWORD)v452 == 1)
                    *v456 = *v454;
                  else
                    memcpy(v456, v454, v452);
                  goto LABEL_642;
                }
LABEL_777:
                v565 = (_DWORD *)*v1004;
                if ((*(_DWORD *)(*v1004 + 16) & 3) == 2)
                  v565 = *(_DWORD **)(v453 + 24);
                v566 = WTF::fastCompactMalloc((WTF *)0x20);
                v455 = (int *)v566;
                v567 = *(_DWORD *)(v453 + 16);
                v568 = *(_QWORD *)(v453 + 8);
                *v565 += 2;
                *(_DWORD *)v566 = 2;
                *(_DWORD *)(v566 + 4) = v452;
                if ((v567 & 4) != 0)
                {
                  *(_QWORD *)(v566 + 8) = v568 + v451;
                  *(_DWORD *)(v566 + 16) = 6;
                }
                else
                {
                  *(_QWORD *)(v566 + 8) = v568 + 2 * v451;
                  *(_DWORD *)(v566 + 16) = 2;
                }
                *(_QWORD *)(v566 + 24) = v565;
              }
              else
              {
                if (v452 > 6)
                  goto LABEL_777;
                WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v453 + 8) + 2 * v451), v452, (uint64_t *)&v1015);
                v455 = (int *)v1015;
              }
            }
LABEL_642:
            v1043 = v455;
            v457 = (WTF::StringImpl *)*((_QWORD *)this + 7);
            v1046[0] = v457;
            v458 = v1044;
            if (v1044)
              v459 = *((_DWORD *)v1044 + 1);
            else
              v459 = 0;
            v460 = *(_QWORD *)v369;
            if (*(_QWORD *)v369)
              v461 = *(_DWORD *)(v460 + 4);
            else
              v461 = 0;
            if (v455)
              v462 = v455[1];
            else
              v462 = 0;
            if (v459)
            {
              if (v461)
              {
                if (v462)
                {
                  if (((v462 | v461) & 0x80000000) == 0)
                  {
                    v463 = __OFADD__(v461, v462);
                    if ((v459 & 0x80000000) == 0 && !v463 && !__OFADD__(v459, v461 + v462))
                    {
                      if (v459 + (unint64_t)v461 + v462 + 20 < 0x40)
                      {
                        if (v1044)
                          v464 = *((_DWORD *)v1044 + 1);
                        else
                          v464 = 0;
                        if (v460)
                          v465 = *(_DWORD *)(v460 + 4);
                        else
                          v465 = 0;
                        if (v455)
                          v466 = v455[1];
                        else
                          v466 = 0;
                        if ((v466 | v465) < 0
                          || ((v375 = __OFADD__(v465, v466), v467 = v465 + v466, !v375) ? (v468 = 0) : (v468 = 1),
                              v464 < 0 || (v468 & 1) != 0 || (v469 = (v464 + v467), __OFADD__(v464, v467))))
                        {
                          v1015 = 0;
                        }
                        else
                        {
                          if (v1044 && (*((_BYTE *)v1044 + 16) & 4) == 0)
                          {
                            v471 = 0;
                          }
                          else if (v460)
                          {
                            v470 = *(_DWORD *)(v460 + 16);
                            v471 = (v470 >> 2) & 1;
                            if (v455 && (v470 & 4) != 0)
LABEL_677:
                              v471 = (*((unsigned __int8 *)v455 + 16) >> 2) & 1;
                          }
                          else
                          {
                            if (v455)
                              goto LABEL_677;
                            v471 = 1;
                          }
                          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v469, v471, (uint64_t)v1044, v460, (uint64_t)v455, (int **)&v1015);
                          v478 = (int *)v1015;
                          if (v1015)
                          {
                            v1015 = 0;
                            v1040 = (unint64_t)v478;
                            v156 = JSC::JSString::create((uint64_t)v457, (JSC::VM *)&v1040, v472, v473, v474, v475, v476, v477);
                            v479 = (WTF::StringImpl *)v1040;
                            v1040 = 0;
                            if (v479)
                            {
                              if (*(_DWORD *)v479 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v479, a2, a3, a4, a5, a6, a7, a8);
                                WTF::fastFree(v594, v595, v596, v597, v598, v599, v600, v601);
                              }
                              else
                              {
                                *(_DWORD *)v479 -= 2;
                              }
                            }
LABEL_680:
                            v480 = v1015;
                            v1015 = 0;
                            if (v480)
                            {
LABEL_681:
                              if (*(_DWORD *)v480 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v480, a2, a3, a4, a5, a6, a7, a8);
                                WTF::fastFree(v503, v504, v505, v506, v507, v508, v509, v510);
                              }
                              else
                              {
                                *(_DWORD *)v480 -= 2;
                              }
                            }
LABEL_683:
                            v481 = (WTF::StringImpl *)v1043;
                            v1043 = 0;
                            if (v481)
                            {
                              if (*(_DWORD *)v481 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v481, a2, a3, a4, a5, a6, a7, a8);
                                WTF::fastFree(v495, v496, v497, v498, v499, v500, v501, v502);
                              }
                              else
                              {
                                *(_DWORD *)v481 -= 2;
                              }
                            }
                            v425 = v1044;
                            v1044 = 0;
                            if (!v425)
                              goto LABEL_523;
                            goto LABEL_616;
                          }
                        }
                        JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)v1046);
                        v156 = 0;
                        goto LABEL_680;
                      }
                      v541 = JSC::jsString(v457, (JSC::VM *)&v1044, v1044, v460, a5, a6, a7, a8);
                      v548 = (JSC::JSString *)JSC::jsString(v457, v369, v542, v543, v544, v545, v546, v547);
                      v555 = JSC::jsString(v457, (JSC::VM *)&v1043, v549, v550, v551, v552, v553, v554);
                      v560 = JSC::JSRopeString::create(v457, v541, v548, v555, v556, v557, v558, v559);
LABEL_769:
                      v156 = v560;
                      goto LABEL_683;
                    }
                  }
                  v592 = v1046;
LABEL_813:
                  JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)v592);
                  v156 = 0;
                  goto LABEL_683;
                }
                v1015 = v457;
                if (v1044)
                {
                  v612 = *((unsigned int *)v1044 + 1);
                  if ((_DWORD)v612)
                  {
                    if (v460)
                    {
                      v613 = *(unsigned int *)(v460 + 4);
                      if ((_DWORD)v613)
                      {
                        v614 = __OFADD__((_DWORD)v612, (_DWORD)v613);
                        if (((v613 | v612) & 0x80000000) == 0 && !v614)
                        {
                          if ((unint64_t)(v612 + v613 + 20) < 0x30)
                          {
                            WTF::tryMakeString<WTF::String,WTF::String>((uint64_t)&v1044, (uint64_t *)v369, (int **)&v1040);
LABEL_701:
                            v493 = (int *)v1040;
                            if (v1040)
                            {
                              v1040 = 0;
                              v1037 = (uint64_t *)v493;
                              v156 = JSC::JSString::create((uint64_t)v457, (JSC::VM *)&v1037, v487, v488, v489, v490, v491, v492);
                              v494 = (WTF::StringImpl *)v1037;
                              v1037 = 0;
                              if (v494)
                              {
                                if (*(_DWORD *)v494 == 2)
                                {
                                  WTF::StringImpl::~StringImpl(v494, a2, a3, a4, a5, a6, a7, a8);
                                  WTF::fastFree(v602, v603, v604, v605, v606, v607, v608, v609);
                                }
                                else
                                {
                                  *(_DWORD *)v494 -= 2;
                                }
                              }
                            }
                            else
                            {
                              JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v1015);
                              v156 = 0;
                            }
                            v480 = (WTF *)v1040;
                            v1040 = 0;
                            if (v480)
                              goto LABEL_681;
                            goto LABEL_683;
                          }
                          v583 = JSC::jsString(v457, (JSC::VM *)&v1044, v1044, v460, a5, a6, a7, a8);
                          v585 = v457;
                          v584 = v369;
LABEL_804:
                          v586 = (JSC::JSString *)JSC::jsString(v585, v584, v577, v578, v579, v580, v581, v582);
                          v560 = JSC::JSRopeString::create(v457, v583, v586, v587, v588, v589, v590, v591);
                          goto LABEL_769;
                        }
LABEL_878:
                        v592 = &v1015;
                        goto LABEL_813;
                      }
                    }
LABEL_876:
                    v573 = (JSC::VM *)&v1044;
LABEL_800:
                    v574 = v457;
LABEL_801:
                    v560 = JSC::jsString(v574, v573, v1044, v460, a5, a6, a7, a8);
                    goto LABEL_769;
                  }
                }
LABEL_877:
                v574 = v457;
                v573 = v369;
                goto LABEL_801;
              }
              v1015 = v457;
              if (v1044)
              {
                v482 = *((unsigned int *)v1044 + 1);
                if ((_DWORD)v482)
                {
                  if (!v455)
                    goto LABEL_876;
                  v483 = v455[1];
                  if (!(_DWORD)v483)
                    goto LABEL_876;
                  v484 = (v482 + v483);
                  v485 = __OFADD__((_DWORD)v482, (_DWORD)v483);
                  if (((v483 | v482) & 0x80000000) != 0 || v485)
                    goto LABEL_878;
                  if ((unint64_t)(v482 + v483 + 20) < 0x30)
                  {
                    if ((*((_BYTE *)v1044 + 16) & 4) != 0)
                      v486 = (*((unsigned __int8 *)v455 + 16) >> 2) & 1;
                    else
                      v486 = 0;
LABEL_700:
                    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v484, v486, (uint64_t)v458, (uint64_t)v455, (int **)&v1040);
                    goto LABEL_701;
                  }
                  v575 = (JSC::VM *)&v1044;
                  v576 = v457;
                  goto LABEL_803;
                }
              }
            }
            else
            {
              v1015 = v457;
              if (v460)
              {
                v511 = *(unsigned int *)(v460 + 4);
                if ((_DWORD)v511)
                {
                  if (!v455)
                    goto LABEL_877;
                  v512 = v455[1];
                  if (!(_DWORD)v512)
                    goto LABEL_877;
                  v484 = (v511 + v512);
                  v513 = __OFADD__((_DWORD)v511, (_DWORD)v512);
                  if (((v512 | v511) & 0x80000000) != 0 || v513)
                    goto LABEL_878;
                  if ((unint64_t)(v511 + v512 + 20) < 0x30)
                  {
                    if ((*(_BYTE *)(v460 + 16) & 4) != 0)
                      v486 = (*((unsigned __int8 *)v455 + 16) >> 2) & 1;
                    else
                      v486 = 0;
                    v458 = (const WTF::String *)v460;
                    goto LABEL_700;
                  }
                  v576 = v457;
                  v575 = v369;
LABEL_803:
                  v583 = JSC::jsString(v576, v575, v1044, v460, a5, a6, a7, a8);
                  v584 = (JSC::VM *)&v1043;
                  v585 = v457;
                  goto LABEL_804;
                }
              }
            }
            v573 = (JSC::VM *)&v1043;
            goto LABEL_800;
          }
          v433 = *v1004;
          if (*v1004)
            v434 = *(_DWORD *)(v433 + 4);
          else
            v434 = 0;
          v435 = *((_DWORD *)v1031 + 1) - *(_DWORD *)v1031;
          if (*(int *)v1031 <= 0)
          {
            v156 = (uint64_t)v1003;
            if (v435 >= v434)
              goto LABEL_523;
          }
          if (v435 >= v434)
            v436 = v434;
          else
            v436 = v435;
          if ((_DWORD)v436)
          {
            v437 = *(_DWORD *)v1031 & ~(*(int *)v1031 >> 31);
            if ((*(_DWORD *)(v433 + 16) & 4) != 0)
            {
              if (v436 <= 0xC)
              {
                v438 = v188;
                v439 = (_BYTE *)(*(_QWORD *)(v433 + 8) + v437);
                v440 = (int *)WTF::fastCompactMalloc((WTF *)(v436 + 20));
                v441 = v440 + 5;
                *v440 = 2;
                v440[1] = v436;
                *((_QWORD *)v440 + 1) = v440 + 5;
                v440[4] = 4;
                v1040 = (unint64_t)v440;
                if ((_DWORD)v436 == 1)
                  *v441 = *v439;
                else
                  memcpy(v441, v439, v436);
                goto LABEL_706;
              }
LABEL_790:
              v438 = v188;
              v569 = (_DWORD *)*v1004;
              if ((*(_DWORD *)(v433 + 16) & 3) == 2)
                v569 = *(_DWORD **)(v433 + 24);
              v570 = WTF::fastCompactMalloc((WTF *)0x20);
              v440 = (int *)v570;
              v571 = *(_DWORD *)(v433 + 16);
              v572 = *(_QWORD *)(v433 + 8);
              *v569 += 2;
              *(_DWORD *)v570 = 2;
              *(_DWORD *)(v570 + 4) = v436;
              if ((v571 & 4) != 0)
              {
                *(_QWORD *)(v570 + 8) = v572 + v437;
                *(_DWORD *)(v570 + 16) = 6;
              }
              else
              {
                *(_QWORD *)(v570 + 8) = v572 + 2 * v437;
                *(_DWORD *)(v570 + 16) = 2;
              }
              *(_QWORD *)(v570 + 24) = v569;
LABEL_795:
              v1040 = (unint64_t)v440;
            }
            else
            {
              if (v436 > 6)
                goto LABEL_790;
              v438 = v188;
              WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v433 + 8) + 2 * v437), v436, (uint64_t *)&v1040);
              v440 = (int *)v1040;
            }
LABEL_706:
            v1015 = (WTF *)v440;
            v424 = (uint64_t)v438;
            goto LABEL_615;
          }
          v438 = v188;
          v440 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          goto LABEL_795;
        }
        v994 = v99;
        v996 = v122;
        v125 = HIDWORD(v1032);
        v126 = HIDWORD(v1032);
        if (HIDWORD(v1032) == (_DWORD)v1032)
        {
          v261 = v112;
          v262 = HIDWORD(v1032) + ((unint64_t)HIDWORD(v1032) >> 2);
          if (v262 >= 0x10)
            v263 = v262 + 1;
          else
            v263 = 16;
          if (v263 <= (unint64_t)HIDWORD(v1032) + 1)
            v264 = HIDWORD(v1032) + 1;
          else
            v264 = v263;
          v265 = v1031;
          if (v264 < 0x11)
          {
            v1031 = v994;
            LODWORD(v1032) = 16;
            v140 = v994;
          }
          else
          {
            if (v264 >> 29)
              goto LABEL_500;
            v266 = v121;
            WTF::tryFastMalloc((WTF *)(8 * v264), &v1040);
            v140 = (WTF *)v1040;
            if (!v1040)
              goto LABEL_500;
            LODWORD(v1032) = v264;
            v1031 = (WTF *)v1040;
            v121 = v266;
          }
          v112 = v261;
          if (v126)
          {
            v141 = 8 * v125;
            v138 = v265;
            do
            {
              v139 = *(_QWORD *)v138;
              v138 = (WTF *)((char *)v138 + 8);
              *(_QWORD *)v140 = v139;
              v140 = (WTF *)((char *)v140 + 8);
              v141 -= 8;
            }
            while (v141);
            v140 = v1031;
          }
          if (v994 != v265 && v265)
          {
            v330 = v121;
            if (v140 == v265)
            {
              v1031 = 0;
              LODWORD(v1032) = 0;
            }
            WTF::fastFree((unint64_t)v265, v114, (uint64_t)v115, v116, v117, v108, v109, v110);
            v140 = v1031;
            v121 = v330;
          }
          v126 = HIDWORD(v1032);
          v127 = (_DWORD *)((char *)v140 + 8 * HIDWORD(v1032));
          v128 = v1042;
          *v127 = v1042;
          v127[1] = v123;
          v129 = v127 + 1;
        }
        else
        {
          v127 = (_DWORD *)((char *)v1031 + 8 * HIDWORD(v1032));
          v128 = v1042;
          *v127 = v1042;
          v127[1] = v123;
          v129 = v127 + 1;
        }
        if (v128 == (_DWORD)v123)
        {
          *v127 = 0;
          *v129 = 0;
        }
        HIDWORD(v1032) = v126 + 1;
        v1022 = 0;
        v1023 = 0;
        if ((_DWORD)v1001)
        {
          v775 = *((_DWORD *)this + 233);
          if (v775)
            v776 = (JSC::VM *)(16 * (v775 & 0xFFFFFFFE));
          else
            v776 = 0;
          v777 = v121;
          v778 = JSC::constructEmptyObject(v998, v776, v115, v116, v117, v108, v109, v110);
          v121 = v777;
          v989 = v778;
        }
        else
        {
          v989 = 0;
        }
        v991 = (uint64_t)&v1023;
        if (*((_DWORD *)v1005 + 6) != -1)
        {
          v130 = 0;
          v131 = 1;
          while (1)
          {
            v116 = *(unsigned int *)(v121 + 4 * (v131 - 1));
            if ((v116 & 0x80000000) != 0)
            {
              v132 = v121;
              v134 = 10;
            }
            else
            {
              v132 = v121;
              v134 = (uint64_t)JSC::jsSubstring(v998, (uint64_t)this, v1003, (JSC::JSString *)v116, (*(_DWORD *)(v121 + 4 * v131) - v116), v108, v109, v110, v118);
              if (*((_DWORD *)v124 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v124, v133, (uint64_t)v115, v116, v117, v108, v109, v110))
              {
                goto LABEL_481;
              }
            }
            v135 = v1023;
            if (v1023 != v1024 && (v1025 != v1026 ? (v136 = v1025 == 0) : (v136 = 1), v136))
            {
              *(_QWORD *)&v1025[8 * v1023] = v134;
              v1023 = v135 + 1;
            }
            else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1023, v134, (uint64_t)v115, v116, v117, v108, v109, v110) == 1)
            {
              v1022 = 1;
            }
            v137 = (int)v1001;
            if (!v130)
              v137 = 0;
            v121 = v132;
            if (v137 == 1)
              break;
LABEL_150:
            ++v130;
            v131 += 2;
            if (v130 >= (*((_DWORD *)v1005 + 6) + 1))
              goto LABEL_156;
          }
          JSC::RegExp::getCaptureGroupNameForSubpatternId((uint64_t)v1005, v130, &v1040);
          if (!v1040)
          {
LABEL_1105:
            v121 = v132;
            goto LABEL_150;
          }
          v870 = *(unsigned int *)(v1040 + 4);
          if ((_DWORD)v870)
          {
            v986 = v986 & 0xFFFFFF0000000000 | v870 | ((unint64_t)((*(_DWORD *)(v1040 + 16) >> 2) & 1) << 32);
            v871 = JSC::RegExp::subpatternIdForGroupName<int const*>((uint64_t)v1005, *(_QWORD *)(v1040 + 8), v986, v132);
            if (v130 == v871)
              goto LABEL_1198;
            if (v871)
            {
              v116 = *(unsigned int *)(v132 + 8 * v871);
              if ((v116 & 0x80000000) != 0)
              {
                v134 = 10;
              }
              else
              {
                v134 = (uint64_t)JSC::jsSubstring(v998, (uint64_t)this, v1003, (JSC::JSString *)v116, (*(_DWORD *)(v132 + 4 * ((2 * v871) | 1)) - v116), v108, v109, v110, v872);
                if (*((_DWORD *)v124 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v124, v889, (uint64_t)v115, v116, v117, v108, v109, v110))
                {
                  v890 = (WTF::StringImpl *)v1040;
                  v1040 = 0;
                  if (v890)
                  {
                    if (*(_DWORD *)v890 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v890, (WTF::AtomStringImpl *)v114, (uint64_t)v115, v116, v117, v108, v109, v110);
                      WTF::fastFree(v975, v976, v977, v978, v979, v980, v981, v982);
                    }
                    else
                    {
                      *(_DWORD *)v890 -= 2;
                    }
                  }
                  goto LABEL_481;
                }
              }
LABEL_1198:
              JSC::Identifier::fromString((uint64_t **)v998, (WTF::StringImpl **)&v1040, v115, v116, v117, v108, v109, v110, (WTF::StringImpl **)&v1037);
              v877 = (int *)v1037;
              v878 = (int *)v989;
              v879 = (uint64_t)v998;
              v880 = v134;
            }
            else
            {
              JSC::Identifier::fromString((uint64_t **)v998, (WTF::StringImpl **)&v1040, v115, v116, v117, v108, v109, v110, (WTF::StringImpl **)&v1037);
              v877 = (int *)v1037;
              v878 = (int *)v989;
              v879 = (uint64_t)v998;
              v880 = 10;
            }
            JSC::JSObject::putDirect(v878, v879, (unint64_t)v877, v880, 0, v876, v873, v874, v875);
            v881 = (WTF::StringImpl *)v1037;
            v1037 = 0;
            if (v881)
            {
              if (*(_DWORD *)v881 == 2)
              {
                WTF::StringImpl::~StringImpl(v881, v779, (uint64_t)v115, v116, v117, v108, v109, v110);
                WTF::fastFree(v934, v935, v936, v937, v938, v939, v940, v941);
              }
              else
              {
                *(_DWORD *)v881 -= 2;
              }
            }
          }
          v882 = (WTF::StringImpl *)v1040;
          v1040 = 0;
          if (v882)
          {
            if (*(_DWORD *)v882 == 2)
            {
              WTF::StringImpl::~StringImpl(v882, v779, (uint64_t)v115, v116, v117, v108, v109, v110);
              WTF::fastFree(v918, v919, v920, v921, v922, v923, v924, v925);
            }
            else
            {
              *(_DWORD *)v882 -= 2;
            }
          }
          goto LABEL_1105;
        }
LABEL_156:
        if (HIDWORD(v123))
          v142 = COERCE__INT64((double)v123) + 0x2000000000000;
        else
          v142 = v123 | 0xFFFE000000000000;
        v143 = v1023;
        if (v1023 == v1024 || v1025 != v1026 && v1025)
        {
          if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1023, v142, (uint64_t)v115, v116, v117, v108, v109, v110) == 1)v1022 = 1;
        }
        else
        {
          *(_QWORD *)&v1025[8 * v1023] = v142;
          v1023 = v143 + 1;
        }
        v144 = v1023;
        if (v1023 == v1024 || v1025 != v1026 && v1025)
        {
          if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1023, (uint64_t)v1003, (uint64_t)v115, v116, v117, v108, v109, v110) == 1)v1022 = 1;
        }
        else
        {
          *(_QWORD *)&v1025[8 * v1023] = v1003;
          v1023 = v144 + 1;
        }
        if ((_DWORD)v1001)
          JSC::CachedCall::appendArgument((uint64_t *)&v1015, v989, (uint64_t)v115, v116, v117, v108, v109, v110);
        *(_QWORD *)&v1020 = 10;
        if (v1022)
        {
LABEL_500:
          JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v1014);
          goto LABEL_481;
        }
        v145 = v1017;
        v146 = v1027;
        if (v1027)
          goto LABEL_170;
        v353 = (unsigned int *)(v1017 + 80);
        v354 = *(_DWORD *)(v1017 + 80);
        if ((v354 & 0x20) == 0)
        {
          do
            v355 = __ldaxr(v353);
          while (__stlxr(v355 | 0x20, v353));
        }
        JSC::CachedCall::relink((JSC::CachedCall *)&v1015, v142, (uint64_t)v115, v116, v117, v108, v109, v110);
        if (*v353
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v145, (uint64_t)v114, (uint64_t)v115, v116, v117, v108, v109, v110))
        {
          v356 = 0;
          v146 = 0;
          v987 = *(int **)(v145 + 16);
        }
        else
        {
          v356 = 1;
          v146 = v1027;
        }
        if ((v354 & 0x20) == 0)
        {
          do
            v357 = __ldaxr(v353);
          while (__stlxr(v357 & 0xFFFFFFDF, v353));
        }
        v147 = v987;
        if (v356)
LABEL_170:
          v147 = (int *)vmEntryToJavaScript(v146, (JSC::VM *)v145, (uint64_t)&v1018 + 8, v116, v117, v108, v109, v110);
        v987 = v147;
        *(_BYTE *)(v145 + 93120) = 1;
        v1040 = (unint64_t)v147;
        v149 = v1014;
        v150 = (unint64_t)v147;
        if (*((_DWORD *)v1014 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v1014, (uint64_t)v114, (uint64_t)v115, v116, v117, v108, v109, v110))
          {
            goto LABEL_481;
          }
          v150 = v1040;
        }
        if ((v150 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v150 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1040, this, v115, v116, v117, v108, v109, v110, (int **)&v1037);
        }
        else
        {
          v151 = *(uint64_t **)(v150 + 8);
          if ((v151 & 1) != 0)
            v151 = (uint64_t *)*JSC::JSRopeString::resolveRope(v150, this, (uint64_t)v115, v116, v148, v117, v108, v109, v110);
          if (v151)
            *(_DWORD *)v151 += 2;
          v1037 = v151;
        }
        LODWORD(v152) = HIDWORD(v1029);
        if (HIDWORD(v1029) == (_DWORD)v1029)
        {
          v293 = (uint64_t *)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1028, HIDWORD(v1029) + 1, (unint64_t)&v1037);
          v152 = HIDWORD(v1029);
          v294 = v1028;
          v295 = *v293;
          *v293 = 0;
          *((_QWORD *)v294 + v152) = v295;
        }
        else
        {
          v153 = (int *)v1037;
          v1037 = 0;
          *((_QWORD *)v1028 + HIDWORD(v1029)) = v153;
        }
        HIDWORD(v1029) = v152 + 1;
        v154 = (WTF::StringImpl *)v1037;
        v1037 = 0;
        v155 = (uint64_t)v996;
        if (v154)
        {
          if (*(_DWORD *)v154 == 2)
          {
            WTF::StringImpl::~StringImpl(v154, (WTF::AtomStringImpl *)v114, (uint64_t)v115, v116, v117, v108, v109, v110);
            WTF::fastFree(v212, v213, v214, v215, v216, v217, v218, v219);
            v155 = (uint64_t)v996;
          }
          else
          {
            *(_DWORD *)v154 -= 2;
          }
        }
        if (*((_DWORD *)v149 + 20))
        {
          v358 = JSC::VM::hasExceptionsAfterHandlingTraps(v149, (uint64_t)v114, (uint64_t)v115, v116, v117, v108, v109, v110);
          v155 = (uint64_t)v996;
          if (v358)
          {
LABEL_481:
            JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v1015, v114, (uint64_t)v115, v116, v117, v108, v109, v110);
            goto LABEL_817;
          }
        }
        v1042 = v155;
        if (v123 == v155)
        {
          v111 = v155 + 1;
          v360 = v1013;
          if ((int)v155 + 1 > v1013)
            goto LABEL_520;
          v780 = (WTF::StringImpl *)*v1004;
          if (*v1004)
          {
            if (*((_DWORD *)v780 + 1) > v996
              && (WTF::StringImpl::at(v780, v996) & 0xFC00) == 0xD800)
            {
              v781 = (WTF::StringImpl *)*v1004;
              if (*v1004)
              {
                if (*((_DWORD *)v781 + 1) > v111 && (WTF::StringImpl::at(v781, v111) & 0xFC00) == 0xDC00)
                {
                  v111 = (_DWORD)v996 + 2;
                  if ((int)v996 + 2 > v360)
                    goto LABEL_520;
                }
              }
            }
          }
        }
        else
        {
          v111 = v155;
        }
        v99 = v994;
      }
      v122 = 0;
      v121 = 0;
      goto LABEL_276;
    }
    goto LABEL_52;
  }
  v97 = v1008 == 2;
  v98 = v1008 != 2 || v23;
  if ((v98 & 1) != 0 || v19 < dword_1ECF4C794)
    goto LABEL_117;
  v1036 = (JSC::VM *)v11;
  do
    v274 = __ldaxr((unsigned int *)&g_superSamplerCount);
  while (__stlxr(v274 + 1, (unsigned int *)&g_superSamplerCount));
  v275 = (const WTF::String *)*v1004;
  if (*v1004)
    v276 = *((_DWORD *)v275 + 1);
  else
    v276 = 0;
  v1035 = v276;
  v277 = *((_DWORD *)v1005 + 6);
  v278 = JSC::StringReplaceCache::get((JSC::RegExp **)(v11 + 86816), v275, v1005);
  if (v278)
  {
    v282 = v278;
    v283 = v278[2];
    WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v1015, (uint64_t)(v278 + 5));
    JSC::RegExpGlobalData::resetResultFromCache((uint64_t)this + 2120, this, (uint64_t)v1005, (uint64_t)v1003, (uint64_t)v282[3], (uint64_t)v282[4], (uint64_t)&v1015, v284);
    v292 = v1015;
    if (v1015)
    {
      v1015 = 0;
      LODWORD(v1016) = 0;
      WTF::fastFree((unint64_t)v292, v285, v286, v287, v288, v289, v290, v291);
    }
LABEL_891:
    v627 = (JSC *)(v277 + 2);
    v1002 = *((_DWORD *)v283 + 2);
    v628 = v1002 / v627;
    v1034 = 0;
    v629 = (WTF *)v1033;
    v1031 = (WTF *)v1033;
    v1032 = 16;
    v1028 = (WTF *)v1030;
    v1029 = 16;
    if ((WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>((uint64_t)&v1031, (v628 + 1), v286, v287, v288, v289, v290, v291) & 1) == 0|| (WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>((uint64_t)&v1028, v628) & 1) == 0)
    {
      JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v1036);
      v156 = 0;
      goto LABEL_965;
    }
    v991 = (uint64_t)v1033;
    WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)&v1028, v628);
    JSC::CachedCall::CachedCall((JSC::CachedCall *)&v1015, this, v18, (v277 + 3), v630, v631, v632, v633);
    if (*((_DWORD *)v1036 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v1036, (uint64_t)v634, a3, a4, a5, a6, a7, a8))
    {
LABEL_963:
      v156 = 0;
LABEL_964:
      JSC::CachedCall::~CachedCall((JSC::CachedCall *)&v1015, v634, a3, a4, a5, a6, a7, a8);
      v629 = (WTF *)v991;
LABEL_965:
      WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v1028, v686, v687, v688, v689, v690, v691, v692);
      v693 = v1031;
      if (v629 != v1031 && v1031)
      {
        v1031 = 0;
        LODWORD(v1032) = 0;
        WTF::fastFree((unint64_t)v693, a2, a3, a4, a5, a6, a7, a8);
      }
      goto LABEL_968;
    }
    v635 = 0;
    v636 = 0;
    v637 = (char *)v283 + 16;
    v638 = v1026;
    v1000 = v627;
    while (v636 < v1002)
    {
      v1022 = 0;
      v1023 = 0;
      v639 = v636;
      v640 = v627;
      if ((_DWORD)v627)
      {
        do
        {
          v641 = v639;
          if ((*((_BYTE *)v283 + 4) & 0xE) == 6)
            v634 = (void *)(*(_QWORD *)&v637[8 * v639] + 0x2000000000000);
          else
            v634 = *(void **)&v637[8 * v639];
          v642 = v1023;
          if (v1023 != v1024 && (v1025 != v638 ? (v643 = v1025 == 0) : (v643 = 1), v643))
          {
            *(_QWORD *)&v1025[8 * v1023] = v634;
            v1023 = v642 + 1;
          }
          else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1023, (uint64_t)v634, a3, a4, a5, a6, a7, a8) == 1)
          {
            v1022 = 1;
          }
          v639 = v641 + 1;
          v640 = (JSC *)((char *)v640 - 1);
        }
        while (v640);
        v644 = v1023;
      }
      else
      {
        v644 = 0;
      }
      if (v644 != v1024 && (v1025 != v638 ? (v645 = v1025 == 0) : (v645 = 1), v645))
      {
        *(_QWORD *)&v1025[8 * v644] = v1003;
        v1023 = v644 + 1;
      }
      else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1023, (uint64_t)v1003, a3, a4, a5, a6, a7, a8) == 1)
      {
        v1022 = 1;
      }
      if ((*((_BYTE *)v283 + 4) & 0xE) == 6)
        v646 = *(_QWORD *)&v637[8 * v636] + 0x2000000000000;
      else
        v646 = *(_QWORD *)&v637[8 * v636];
      v636 += v627;
      v647 = *(_DWORD *)&v637[8 * v636 - 8];
      LODWORD(v1046[0]) = v647;
      v648 = *(_QWORD *)(v646 + 8);
      v649 = (int *)(v646 + 16);
      if ((v648 & 1) == 0)
        v649 = (int *)(v648 + 4);
      v650 = *v649;
      v651 = HIDWORD(v1032);
      if (HIDWORD(v1032) == (_DWORD)v1032)
      {
        WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned long &,int &>((uint64_t)&v1031, (int *)&v1034, (int *)v1046, a4, a5, a6, a7, a8);
      }
      else
      {
        v652 = v1034;
        v653 = (_DWORD *)((char *)v1031 + 8 * HIDWORD(v1032));
        *v653 = v1034;
        v653[1] = v647;
        if (v647 == v652)
          *(_QWORD *)v653 = 0;
        HIDWORD(v1032) = v651 + 1;
      }
      *(_QWORD *)&v1020 = 10;
      if (v1022)
      {
        v685 = &v1036;
LABEL_962:
        JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)v685);
        goto LABEL_963;
      }
      v654 = v283;
      v655 = v638;
      v656 = v1017;
      v657 = v1027;
      if (v1027)
        goto LABEL_927;
      v695 = (unsigned int *)(v1017 + 80);
      v990 = *(_DWORD *)(v1017 + 80);
      if ((v990 & 0x20) == 0)
      {
        do
          v683 = __ldaxr(v695);
        while (__stlxr(v683 | 0x20, v695));
      }
      JSC::CachedCall::relink((JSC::CachedCall *)&v1015, (uint64_t)v634, a3, a4, a5, a6, a7, a8);
      if (*v695 && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v656, (uint64_t)v634, a3, a4, a5, a6, a7, a8))
      {
        v684 = 0;
        v657 = 0;
        v1005 = *(JSC::RegExp **)(v656 + 16);
      }
      else
      {
        v684 = 1;
        v657 = v1027;
      }
      if ((v990 & 0x20) == 0)
      {
        do
          v682 = __ldaxr(v695);
        while (__stlxr(v682 & 0xFFFFFFDF, v695));
      }
      if (v684)
LABEL_927:
        v1005 = (JSC::RegExp *)vmEntryToJavaScript(v657, (JSC::VM *)v656, (uint64_t)&v1018 + 8, a4, a5, a6, a7, a8);
      *(_BYTE *)(v656 + 93120) = 1;
      v659 = (unint64_t)v1005;
      v1040 = (unint64_t)v1005;
      v660 = v1036;
      if (*((_DWORD *)v1036 + 20))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps(v1036, (uint64_t)v634, a3, a4, a5, a6, a7, a8))
          goto LABEL_963;
        v659 = v1040;
      }
      if ((v659 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v659 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1040, this, (const WTF::String *)a3, a4, a5, a6, a7, a8, (int **)&v1037);
      }
      else
      {
        v661 = *(uint64_t **)(v659 + 8);
        if ((v661 & 1) != 0)
          v661 = (uint64_t *)*JSC::JSRopeString::resolveRope(v659, this, a3, a4, v658, a5, a6, a7, a8);
        if (v661)
          *(_DWORD *)v661 += 2;
        v1037 = v661;
      }
      v638 = v655;
      if (*((_DWORD *)v660 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v660, (uint64_t)v634, a3, a4, a5, a6, a7, a8))
      {
        v664 = 0;
        v283 = v654;
      }
      else
      {
        if (v635 >= HIDWORD(v1029))
        {
          __break(0xC471u);
          JUMPOUT(0x198BC82C8);
        }
        v662 = (int *)v1037;
        v1037 = 0;
        v663 = (WTF::StringImpl *)*((_QWORD *)v1028 + v635);
        *((_QWORD *)v1028 + v635) = v662;
        v283 = v654;
        if (v663)
        {
          if (*(_DWORD *)v663 == 2)
          {
            WTF::StringImpl::~StringImpl(v663, (WTF::AtomStringImpl *)v634, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v674, v675, v676, v677, v678, v679, v680, v681);
          }
          else
          {
            *(_DWORD *)v663 -= 2;
          }
        }
        ++v635;
        v1034 = v650 + v647;
        v664 = 1;
      }
      v665 = (WTF::StringImpl *)v1037;
      v1037 = 0;
      v627 = v1000;
      if (v665)
      {
        if (*(_DWORD *)v665 == 2)
        {
          WTF::StringImpl::~StringImpl(v665, (WTF::AtomStringImpl *)v634, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v666, v667, v668, v669, v670, v671, v672, v673);
        }
        else
        {
          *(_DWORD *)v665 -= 2;
        }
      }
      if ((v664 & 1) == 0)
        goto LABEL_963;
    }
    v696 = v1035;
    LODWORD(v697) = HIDWORD(v1032);
    if (v1035 > v1034)
    {
      if (HIDWORD(v1032) == (_DWORD)v1032)
      {
        WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned long &,int &>((uint64_t)&v1031, (int *)&v1034, (int *)&v1035, a4, a5, a6, a7, a8);
        LODWORD(v697) = HIDWORD(v1032);
      }
      else
      {
        v698 = (_DWORD *)((char *)v1031 + 8 * HIDWORD(v1032));
        *v698 = v1034;
        v698[1] = v696;
        HIDWORD(v1032) = v697 + 1;
        LODWORD(v697) = v697 + 1;
      }
    }
    v1007 = v1031;
    v699 = (uint64_t *)v1028;
    LODWORD(v700) = HIDWORD(v1029);
    v1001 = (JSC::MarkedVectorBase *)*((_QWORD *)this + 7);
    v1044 = v1001;
    if ((_DWORD)v697 != 1 || HIDWORD(v1029) != 0)
    {
      v702 = SHIDWORD(v1029);
      if ((_DWORD)v697 != 2 || HIDWORD(v1029) != 1)
      {
        if ((int)v697 < 1)
        {
          v704 = 0;
          v703 = 0;
        }
        else
        {
          v703 = 0;
          v704 = 0;
          v705 = (_DWORD *)((char *)v1031 + 4);
          v706 = v697;
          do
          {
            v707 = *v705 - *(v705 - 1);
            v708 = __OFADD__(v703, v707);
            v709 = v703 + v707;
            if (v708)
              v704 = 1;
            if (!v708)
              v703 = v709;
            v705 += 2;
            --v706;
          }
          while (v706);
        }
        v710 = 1;
        if (SHIDWORD(v1029) >= 1)
        {
          v711 = v1028;
          v712 = HIDWORD(v1029);
          do
          {
            v713 = *(_QWORD *)v711;
            if (*(_QWORD *)v711)
            {
              v714 = *(unsigned int *)(v713 + 4);
              if ((_DWORD)v714 + v703 == v714 + (int)v703)
                v703 += v714;
              else
                v704 = 1;
              if ((_DWORD)v714 && (*(_BYTE *)(v713 + 16) & 4) == 0)
                v710 = 0;
            }
            v711 = (WTF *)((char *)v711 + 8);
            --v712;
          }
          while (v712);
        }
        if (!v704)
        {
          if (!v703)
          {
            v156 = *((_QWORD *)v1001 + 5246);
            goto LABEL_964;
          }
          if (*v1004)
            v715 = (*(unsigned __int8 *)(*v1004 + 16) >> 2) & 1;
          else
            v715 = 1;
          if ((v715 & v710) == 1)
          {
            if ((v703 & 0x80000000) == 0)
            {
              WTF::tryFastCompactMalloc((WTF *)(v703 + 20), &v1040);
              v188 = (int *)v1040;
              if (v1040)
              {
                v716 = (int *)(v1040 + 20);
                *(_DWORD *)v1040 = 2;
                v188[1] = v703;
                *((_QWORD *)v188 + 1) = v188 + 5;
                v188[4] = 4;
                if ((int)v697 <= (int)v702)
                  v717 = v702;
                else
                  v717 = v697;
                if ((int)v717 >= 1)
                {
                  v718 = 0;
                  v719 = 0;
                  v697 = (int)v697;
                  v720 = (_DWORD *)((char *)v1007 + 4);
                  do
                  {
                    if (v718 < v697)
                    {
                      v721 = *v1004;
                      if (*v1004
                        && (v722 = *(unsigned int *)(v721 + 4),
                            v723 = *(v720 - 1),
                            v722 > v723))
                      {
                        v724 = *(unsigned int *)(v721 + 16);
                        v725 = *(_BYTE **)(v721 + 8);
                        v726 = *v720 - v723;
                        if ((int)v722 - (int)v723 > v726 || (v726 = v722 - v723, (_DWORD)v723))
                        {
                          v727 = (v724 >> 2) & 1;
                          v728 = v722 - v723;
                          LODWORD(v722) = v726;
                          if ((_DWORD)v727)
                          {
                            if (v728 < v726)
                              goto LABEL_1046;
                            v725 += v723;
                            LODWORD(v722) = v726;
                          }
                          else
                          {
                            if (v728 < v726)
                            {
LABEL_1046:
                              __break(1u);
                              break;
                            }
                            v725 += 2 * v723;
                          }
                        }
                        else
                        {
                          v722 = v722 & 0xFFFFFFFEFFFFFFFFLL | (((v724 >> 2) & 1) << 32);
                        }
                        v729 = (char *)v716 + v719;
                        if ((_DWORD)v722 == 1)
                        {
                          *v729 = *v725;
                          LODWORD(v722) = 1;
                        }
                        else if ((_DWORD)v722)
                        {
                          memcpy(v729, v725, v722);
                        }
                      }
                      else
                      {
                        LODWORD(v722) = 0;
                      }
                      v719 += v722;
                    }
                    if (v718 < v702)
                    {
                      v730 = v699[v718];
                      if (v730)
                      {
                        v731 = *(_BYTE **)(v730 + 8);
                        v732 = *(_DWORD *)(v730 + 4);
                        v733 = (char *)v716 + v719;
                        if (v732 == 1)
                        {
                          *v733 = *v731;
                          v732 = 1;
                        }
                        else if (v732)
                        {
                          memcpy(v733, v731, *(unsigned int *)(v730 + 4));
                        }
                      }
                      else
                      {
                        v732 = 0;
                      }
                      v719 += v732;
                    }
                    ++v718;
                    v720 += 2;
                  }
                  while (v717 != v718);
                }
                v1040 = (unint64_t)v188;
LABEL_1048:
                v156 = JSC::jsString((uint64_t)v1001, (JSC::VM *)&v1040, a3, a4, a5, a6, a7, a8);
                v734 = (WTF::StringImpl *)v1040;
                v1040 = 0;
                if (!v734)
                  goto LABEL_964;
LABEL_1049:
                if (*(_DWORD *)v734 == 2)
                {
                  WTF::StringImpl::~StringImpl(v734, (WTF::AtomStringImpl *)v634, a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v788, v789, v790, v791, v792, v793, v794, v795);
                }
                else
                {
                  *(_DWORD *)v734 -= 2;
                }
                goto LABEL_964;
              }
            }
          }
          else if (v703 <= 0x7FFFFFEF)
          {
            WTF::tryFastCompactMalloc((WTF *)(2 * v703 + 20), &v1040);
            v828 = (int *)v1040;
            if (v1040)
            {
              v829 = (int *)(v1040 + 20);
              *(_DWORD *)v1040 = 2;
              v828[1] = v703;
              *((_QWORD *)v828 + 1) = v828 + 5;
              v828[4] = 0;
              if ((int)v697 <= (int)v702)
                v830 = v702;
              else
                v830 = v697;
              if ((int)v830 >= 1)
              {
                v831 = 0;
                v832 = 0;
                v700 = (int)v700;
                v697 = (int)v697;
                v833 = (_DWORD *)((char *)v1007 + 4);
                do
                {
                  if (v831 < v697)
                  {
                    v1037 = 0;
                    v1038 = 0;
                    LOBYTE(v834) = 1;
                    v1039 = 1;
                    v835 = *v1004;
                    if (*v1004)
                    {
                      v836 = *(unsigned __int8 *)(v835 + 16);
                      v837 = *(int **)(v835 + 8);
                      LODWORD(v835) = *(_DWORD *)(v835 + 4);
                      v1037 = (uint64_t *)v837;
                      v834 = (v836 >> 2) & 1;
                    }
                    v1038 = v835;
                    v1039 = v834;
                    v1040 = (unint64_t)WTF::StringView::substring((const char *)&v1037, *(v833 - 1), *v833 - *(v833 - 1));
                    v1041 = v838;
                    WTF::StringView::getCharacters<char16_t>(&v1040, (char *)v829 + 2 * v832);
                    v832 += (int)v1041;
                  }
                  if (v831 < v700)
                  {
                    v1040 = 0;
                    LODWORD(v1041) = 0;
                    LOBYTE(v839) = 1;
                    BYTE4(v1041) = 1;
                    v840 = v699[v831];
                    if (v840)
                    {
                      v841 = *(unsigned __int8 *)(v840 + 16);
                      v842 = *(int **)(v840 + 8);
                      LODWORD(v840) = *(_DWORD *)(v840 + 4);
                      v1040 = (unint64_t)v842;
                      v839 = (v841 >> 2) & 1;
                    }
                    LODWORD(v1041) = v840;
                    BYTE4(v1041) = v839;
                    WTF::StringView::getCharacters<char16_t>(&v1040, (char *)v829 + 2 * v832);
                    v832 += (int)v1041;
                  }
                  ++v831;
                  v833 += 2;
                }
                while (v830 != v831);
              }
              v1040 = (unint64_t)v828;
              goto LABEL_1048;
            }
          }
        }
        v685 = &v1044;
        goto LABEL_962;
      }
      v736 = *(unsigned int *)v1031;
      v735 = *((_DWORD *)v1031 + 1);
      v737 = (v735 - v736);
      if (v735 == (_DWORD)v736)
      {
        WTF::StringImpl::s_emptyAtomString += 2;
        v1040 = (unint64_t)&WTF::StringImpl::s_emptyAtomString;
        goto LABEL_1055;
      }
      v738 = *v1004;
      if ((*(_DWORD *)(*v1004 + 16) & 4) != 0)
      {
        if (v737 <= 0xC)
        {
          WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v738 + 8) + v736), v737, (uint64_t *)&v1040);
          goto LABEL_1055;
        }
      }
      else if (v737 <= 6)
      {
        WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v738 + 8) + 2 * v736), v737, (uint64_t *)&v1040);
        goto LABEL_1055;
      }
      v863 = (_DWORD *)*v1004;
      if ((*(_DWORD *)(*v1004 + 16) & 3) == 2)
        v863 = *(_DWORD **)(v738 + 24);
      v864 = WTF::fastCompactMalloc((WTF *)0x20);
      v865 = *(_DWORD *)(v738 + 16);
      v866 = *(_QWORD *)(v738 + 8);
      *v863 += 2;
      *(_DWORD *)v864 = 2;
      *(_DWORD *)(v864 + 4) = v737;
      if ((v865 & 4) != 0)
      {
        *(_QWORD *)(v864 + 8) = v866 + v736;
        *(_DWORD *)(v864 + 16) = 6;
      }
      else
      {
        *(_QWORD *)(v864 + 8) = v866 + 2 * v736;
        *(_DWORD *)(v864 + 16) = 2;
      }
      *(_QWORD *)(v864 + 24) = v863;
      v1040 = v864;
LABEL_1055:
      v1043 = (int *)v1040;
      v740 = *((unsigned int *)v1007 + 2);
      v739 = *((_DWORD *)v1007 + 3);
      v741 = (v739 - v740);
      if (v739 == (_DWORD)v740)
      {
        v743 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
      else
      {
        v742 = *v1004;
        if ((*(_DWORD *)(*v1004 + 16) & 4) != 0)
        {
          if (v741 <= 0xC)
          {
            WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v742 + 8) + v740), v741, (uint64_t *)&v1040);
LABEL_1059:
            v743 = (int *)v1040;
            goto LABEL_1060;
          }
        }
        else if (v741 <= 6)
        {
          WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v742 + 8) + 2 * v740), v741, (uint64_t *)&v1040);
          goto LABEL_1059;
        }
        v867 = (_DWORD *)*v1004;
        if ((*(_DWORD *)(*v1004 + 16) & 3) == 2)
          v867 = *(_DWORD **)(v742 + 24);
        v743 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
        v868 = *(_DWORD *)(v742 + 16);
        v869 = *(_QWORD *)(v742 + 8);
        *v867 += 2;
        *v743 = 2;
        v743[1] = v741;
        if ((v868 & 4) != 0)
        {
          *((_QWORD *)v743 + 1) = v869 + v740;
          v743[4] = 6;
        }
        else
        {
          *((_QWORD *)v743 + 1) = v869 + 2 * v740;
          v743[4] = 2;
        }
        *((_QWORD *)v743 + 3) = v867;
      }
LABEL_1060:
      v1042 = (unint64_t)v743;
      v744 = (JSC *)*((_QWORD *)this + 7);
      v1045 = v744;
      if (v1043)
        v745 = v1043[1];
      else
        v745 = 0;
      v746 = *v699;
      if (*v699)
        v747 = *(_DWORD *)(v746 + 4);
      else
        v747 = 0;
      if (v743)
        v748 = v743[1];
      else
        v748 = 0;
      if (v745)
      {
        if (v747)
        {
          if (v748)
          {
            if (((v748 | v747) & 0x80000000) == 0)
            {
              v749 = __OFADD__(v747, v748);
              if ((v745 & 0x80000000) == 0 && !v749 && !__OFADD__(v745, v747 + v748))
              {
                if (v745 + (unint64_t)v747 + v748 + 20 < 0x40)
                {
                  WTF::tryMakeString<WTF::String,WTF::String,WTF::String>((uint64_t)&v1043, v699, (uint64_t *)&v1042, (int **)&v1040);
                  v756 = (int *)v1040;
                  if (v1040)
                  {
                    v1040 = 0;
                    v1037 = (uint64_t *)v756;
                    v156 = JSC::JSString::create((uint64_t)v744, (JSC::VM *)&v1037, v750, v751, v752, v753, v754, v755);
                    v757 = (WTF::StringImpl *)v1037;
                    v1037 = 0;
                    if (v757)
                    {
                      if (*(_DWORD *)v757 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v757, (WTF::AtomStringImpl *)v634, a3, a4, a5, a6, a7, a8);
                        WTF::fastFree(v943, v944, v945, v946, v947, v948, v949, v950);
                      }
                      else
                      {
                        *(_DWORD *)v757 -= 2;
                      }
                    }
                  }
                  else
                  {
                    JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v1045);
                    v156 = 0;
                  }
                  v758 = (int *)v1040;
                  v1040 = 0;
                  if (v758)
                  {
LABEL_1080:
                    if (*v758 == 2)
                    {
                      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v758, (WTF::AtomStringImpl *)v634, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v817, v818, v819, v820, v821, v822, v823, v824);
                    }
                    else
                    {
                      *v758 -= 2;
                    }
                  }
LABEL_1082:
                  v759 = (WTF::StringImpl *)v1042;
                  v1042 = 0;
                  if (v759)
                  {
                    if (*(_DWORD *)v759 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v759, (WTF::AtomStringImpl *)v634, a3, a4, a5, a6, a7, a8);
                      WTF::fastFree(v809, v810, v811, v812, v813, v814, v815, v816);
                    }
                    else
                    {
                      *(_DWORD *)v759 -= 2;
                    }
                  }
                  v734 = (WTF::StringImpl *)v1043;
                  v1043 = 0;
                  if (!v734)
                    goto LABEL_964;
                  goto LABEL_1049;
                }
                v843 = JSC::jsString(v744, (JSC::VM *)&v1043, (const WTF::String *)a3, a4, a5, a6, a7, a8);
                v850 = (JSC::JSString *)JSC::jsString(v744, (JSC::VM *)v699, v844, v845, v846, v847, v848, v849);
                v857 = JSC::jsString(v744, (JSC::VM *)&v1042, v851, v852, v853, v854, v855, v856);
                v862 = JSC::JSRopeString::create(v744, v843, v850, v857, v858, v859, v860, v861);
LABEL_1183:
                v156 = v862;
                goto LABEL_1082;
              }
            }
            v942 = (JSC::JSGlobalObject *)&v1045;
LABEL_1268:
            JSC::throwOutOfMemoryError(this, v942);
            v156 = 0;
            goto LABEL_1082;
          }
          v1040 = (unint64_t)v744;
          if (v1043)
          {
            v983 = v1043[1];
            if ((_DWORD)v983)
            {
              if (v746)
              {
                v984 = *(unsigned int *)(v746 + 4);
                if ((_DWORD)v984)
                {
                  v985 = __OFADD__((_DWORD)v983, (_DWORD)v984);
                  if (((v984 | v983) & 0x80000000) == 0 && !v985)
                  {
                    if ((unint64_t)(v983 + v984 + 20) < 0x30)
                    {
                      v799 = &v1043;
                      v800 = v699;
LABEL_1142:
                      WTF::tryMakeString<WTF::String,WTF::String>((uint64_t)v799, v800, (int **)&v1037);
                      v807 = (WTF::StringImpl *)v1037;
                      if (v1037)
                      {
                        v1037 = 0;
                        v1046[0] = v807;
                        v156 = JSC::JSString::create((uint64_t)v744, (JSC::VM *)v1046, v801, v802, v803, v804, v805, v806);
                        v808 = v1046[0];
                        v1046[0] = 0;
                        if (v808)
                        {
                          if (*(_DWORD *)v808 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v808, (WTF::AtomStringImpl *)v634, a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v951, v952, v953, v954, v955, v956, v957, v958);
                          }
                          else
                          {
                            *(_DWORD *)v808 -= 2;
                          }
                        }
                      }
                      else
                      {
                        JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v1040);
                        v156 = 0;
                      }
                      v758 = (int *)v1037;
                      v1037 = 0;
                      if (v758)
                        goto LABEL_1080;
                      goto LABEL_1082;
                    }
                    v909 = JSC::jsString(v744, (JSC::VM *)&v1043, (const WTF::String *)a3, a4, a5, a6, a7, a8);
                    v911 = v744;
                    v910 = (JSC::VM *)v699;
LABEL_1248:
                    v912 = (JSC::JSString *)JSC::jsString(v911, v910, v903, v904, v905, v906, v907, v908);
                    v862 = JSC::JSRopeString::create(v744, v909, v912, v913, v914, v915, v916, v917);
                    goto LABEL_1183;
                  }
LABEL_1302:
                  v942 = (JSC::JSGlobalObject *)&v1040;
                  goto LABEL_1268;
                }
              }
              goto LABEL_1299;
            }
          }
LABEL_1300:
          v892 = v744;
          v891 = (JSC::VM *)v699;
          goto LABEL_1242;
        }
        v1040 = (unint64_t)v744;
        if (v1043)
        {
          v796 = v1043[1];
          if ((_DWORD)v796)
          {
            if (!v743 || (v797 = v743[1], !(_DWORD)v797))
            {
LABEL_1299:
              v891 = (JSC::VM *)&v1043;
              goto LABEL_1241;
            }
            v798 = __OFADD__((_DWORD)v796, (_DWORD)v797);
            if (((v797 | v796) & 0x80000000) != 0 || v798)
              goto LABEL_1302;
            if ((unint64_t)(v796 + v797 + 20) < 0x30)
            {
              v799 = &v1043;
              v800 = (uint64_t *)&v1042;
              goto LABEL_1142;
            }
            v901 = (JSC::VM *)&v1043;
            v902 = v744;
            goto LABEL_1247;
          }
        }
      }
      else
      {
        v1040 = (unint64_t)v744;
        if (v746)
        {
          v825 = *(unsigned int *)(v746 + 4);
          if ((_DWORD)v825)
          {
            if (!v743)
              goto LABEL_1300;
            v826 = v743[1];
            if (!(_DWORD)v826)
              goto LABEL_1300;
            v827 = __OFADD__((_DWORD)v825, (_DWORD)v826);
            if (((v826 | v825) & 0x80000000) != 0 || v827)
              goto LABEL_1302;
            if ((unint64_t)(v825 + v826 + 20) < 0x30)
            {
              v800 = (uint64_t *)&v1042;
              v799 = (int **)v699;
              goto LABEL_1142;
            }
            v902 = v744;
            v901 = (JSC::VM *)v699;
LABEL_1247:
            v909 = JSC::jsString(v902, v901, (const WTF::String *)a3, a4, a5, a6, a7, a8);
            v910 = (JSC::VM *)&v1042;
            v911 = v744;
            goto LABEL_1248;
          }
        }
      }
      v891 = (JSC::VM *)&v1042;
LABEL_1241:
      v892 = v744;
LABEL_1242:
      v862 = JSC::jsString(v892, v891, (const WTF::String *)a3, a4, a5, a6, a7, a8);
      goto LABEL_1183;
    }
    v782 = *v1004;
    if (*v1004)
      v783 = *(_DWORD *)(v782 + 4);
    else
      v783 = 0;
    v784 = *((_DWORD *)v1031 + 1) - *(_DWORD *)v1031;
    v785 = *(int *)v1031 > 0 || v784 < v783;
    v156 = (uint64_t)v1003;
    if (!v785)
      goto LABEL_964;
    if (v784 >= v783)
      v786 = v783;
    else
      v786 = v784;
    if ((_DWORD)v786)
    {
      v787 = *(_DWORD *)v1031 & ~(*(int *)v1031 >> 31);
      if ((*(_DWORD *)(v782 + 16) & 4) != 0)
      {
        if (v786 <= 0xC)
        {
          WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v782 + 8) + v787), v786, (uint64_t *)&v1037);
LABEL_1128:
          v1040 = (unint64_t)v1037;
          goto LABEL_1048;
        }
      }
      else if (v786 <= 6)
      {
        WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v782 + 8) + 2 * v787), v786, (uint64_t *)&v1037);
        goto LABEL_1128;
      }
      v883 = (_DWORD *)*v1004;
      if ((*(_DWORD *)(v782 + 16) & 3) == 2)
        v883 = *(_DWORD **)(v782 + 24);
      v884 = WTF::fastCompactMalloc((WTF *)0x20);
      v885 = *(_DWORD *)(v782 + 16);
      v886 = *(_QWORD *)(v782 + 8);
      *v883 += 2;
      *(_DWORD *)v884 = 2;
      *(_DWORD *)(v884 + 4) = v786;
      if ((v885 & 4) != 0)
      {
        *(_QWORD *)(v884 + 8) = v886 + v787;
        *(_DWORD *)(v884 + 16) = 6;
      }
      else
      {
        *(_QWORD *)(v884 + 8) = v886 + 2 * v787;
        *(_DWORD *)(v884 + 16) = 2;
      }
      *(_QWORD *)(v884 + 24) = v883;
      v1037 = (uint64_t *)v884;
      goto LABEL_1128;
    }
    WTF::StringImpl::s_emptyAtomString += 2;
    v1037 = (uint64_t *)&WTF::StringImpl::s_emptyAtomString;
    goto LABEL_1128;
  }
  v992 = v11 + 86816;
  v995 = v18;
  v999 = (JSC *)v11;
  v308 = 0;
  LOBYTE(v1015) = 0;
  *(_QWORD *)&v1016 = 0x800000000;
  *((_QWORD *)&v1016 + 1) = (char *)&v1017 + 8;
  v1017 = 0u;
  v1018 = 0u;
  v1019 = 0u;
  v1020 = 0u;
  v1021 = 0;
  while (1)
  {
    v309 = *((_QWORD *)this + 7);
    JSC::RegExp::match((uint64_t)v1005, (uint64_t)this, v1004, v308, (uint64_t)this + 2200, v279, v280, v281);
    v316 = v315;
    if (*(_DWORD *)(v309 + 80))
    {
      v327 = *(_DWORD *)(v309 + 80);
      if ((v327 & 0x27) != 0 && (v327 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v309 + 64), 7u, v311, v312, v313, v279, v280, v281);
      if (*(_QWORD *)(v309 + 16))
      {
        v317 = 0;
LABEL_463:
        v318 = 0;
        v319 = -1;
        goto LABEL_433;
      }
    }
    v317 = *((_QWORD *)this + 275);
    if (v316 == -1)
      goto LABEL_463;
    if (*((_DWORD *)this + 553) <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x198BC8180);
    }
    v318 = *(int *)(v317 + 4);
    v319 = v316;
    *((_QWORD *)this + 269) = v1005;
    *((_QWORD *)this + 268) = v1003;
    *((_QWORD *)this + 265) = v316;
    *((_QWORD *)this + 266) = v318;
    *((_BYTE *)this + 2136) = 0;
    if (*(_DWORD *)(v309 + 760) >= *((unsigned __int8 *)this + 7))
      JSC::Heap::writeBarrierSlowPath(v309 + 192, (unint64_t)this);
LABEL_433:
    v320 = v1036;
    if (*((_DWORD *)v1036 + 20))
    {
      v328 = *((_DWORD *)v1036 + 20);
      if ((v328 & 0x27) != 0 && (v328 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1036 + 64), 7u, v311, v312, v313, v279, v280, v281);
      if (*((_QWORD *)v320 + 2))
        goto LABEL_1147;
    }
    if (v319 == -1)
      break;
    if (*((_DWORD *)v1005 + 6) != -1)
    {
      v322 = 0;
      v323 = 1;
      do
      {
        v311 = *(unsigned int *)(v317 + 4 * (v323 - 1));
        if ((v311 & 0x80000000) != 0)
        {
          v324 = 10;
        }
        else
        {
          v324 = (uint64_t)JSC::jsSubstring(this, v1003, (JSC::JSString *)v311, (*(_DWORD *)(v317 + 4 * v323) - v311), v313, v279, v280, v281, v314);
          if (*((_DWORD *)v320 + 20))
          {
            v329 = *((_DWORD *)v320 + 20);
            if ((v329 & 0x27) != 0 && (v329 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v320 + 64), 7u, v311, v312, v313, v279, v280, v281);
            if (*((_QWORD *)v320 + 2))
              goto LABEL_1147;
          }
        }
        v325 = v1016;
        if ((_DWORD)v1016 != DWORD1(v1016)
          && (*((__int128 **)&v1016 + 1) != (__int128 *)((char *)&v1017 + 8)
            ? (v326 = *((_QWORD *)&v1016 + 1) == 0)
            : (v326 = 1),
              v326))
        {
          *(_QWORD *)(*((_QWORD *)&v1016 + 1) + 8 * v1016) = v324;
          LODWORD(v1016) = v325 + 1;
        }
        else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1016, v324, v311, v312, v313, v279, v280, v281) == 1)
        {
          LOBYTE(v1015) = 1;
        }
        ++v322;
        v323 += 2;
      }
      while (v322 < (*((_DWORD *)v1005 + 6) + 1));
    }
    v310 = (void *)(HIDWORD(v319) ? COERCE__INT64((double)v319) + 0x2000000000000 : v319 | 0xFFFE000000000000);
    v321 = v1016;
    if ((_DWORD)v1016 == DWORD1(v1016)
      || *((__int128 **)&v1016 + 1) != (__int128 *)((char *)&v1017 + 8) && *((_QWORD *)&v1016 + 1))
    {
      if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1016, (uint64_t)v310, v311, v312, v313, v279, v280, v281) == 1)LOBYTE(v1015) = 1;
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)&v1016 + 1) + 8 * v1016) = v310;
      LODWORD(v1016) = v321 + 1;
    }
    v308 = v318;
    if (v319 == v318)
    {
      v308 = v318 + 1;
      v615 = v1035;
      if ((int)v318 + 1 > v1035)
        break;
      v616 = (WTF::StringImpl *)*v1004;
      if (*v1004)
      {
        if (*((_DWORD *)v616 + 1) > v318 && (WTF::StringImpl::at(v616, v318) & 0xFC00) == 0xD800)
        {
          v617 = (WTF::StringImpl *)*v1004;
          if (*v1004)
          {
            if (*((_DWORD *)v617 + 1) > v308 && (WTF::StringImpl::at(v617, (int)v318 + 1) & 0xFC00) == 0xDC00)
            {
              v308 = v318 + 2;
              if ((int)v318 + 2 > v615)
                break;
            }
          }
        }
      }
    }
  }
  v311 = v1016;
  v156 = (uint64_t)v1003;
  v18 = v995;
  if ((_DWORD)v1016)
  {
    v618 = JSC::JSImmutableButterfly::tryCreateFromArgList((uint64_t)v999, *((JSC::VM **)&v1016 + 1), v1016, v312, v313, v279, v280, v281);
    if (v618)
    {
      v283 = (JSC::RegExp *)v618;
      JSC::StringReplaceCache::set(v992, (WTF::StringImpl *)*v1004, (uint64_t)v1005, v618, *((_QWORD *)this + 265), *((_QWORD *)this + 266), (const void **)this + 275, v619);
      JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1016, v620, v621, v622, v623, v624, v625, v626);
      goto LABEL_891;
    }
    JSC::throwOutOfMemoryError(this, (JSC::JSGlobalObject *)&v1036);
LABEL_1147:
    v156 = 0;
  }
  JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1016, v310, v311, v312, v313, v279, v280, v281);
  do
LABEL_968:
    v694 = __ldaxr((unsigned int *)&g_superSamplerCount);
  while (__stlxr(v694 - 1, (unsigned int *)&g_superSamplerCount));
LABEL_534:
  v16 = v1011;
LABEL_535:
  v1011 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v382, v383, v384, v385, v386, v387, v388, v389);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  return v156;
}

uint64_t JSC::stringProtoFuncReplaceUsingStringSearch(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  uint64_t v13;
  int **v14;
  int **v15;
  uint64_t v16;
  int **v17;
  char v18;
  int v20;
  int v21;
  int **v22;

  v13 = *((_QWORD *)this + 7);
  v14 = (int **)*((_QWORD *)a2 + 5);
  v15 = v14 + 1;
  if (((_BYTE)v14[1] & 1) != 0)
    v15 = JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 5), this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v13 + 80))
  {
    v20 = *(_DWORD *)(v13 + 80);
    if ((v20 & 0x27) != 0 && (v20 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
      return 0;
  }
  v16 = *((_QWORD *)a2 + 6);
  v18 = *(_BYTE *)(v16 + 8);
  v17 = (int **)(v16 + 8);
  if ((v18 & 1) != 0)
    v17 = JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 6), this, (uint64_t)a3, a4, a9, (uint64_t)v17, a6, a7, a8);
  if (!*(_DWORD *)(v13 + 80))
    return JSC::replaceUsingStringSearch((JSC::VM *)v13, this, (const WTF::String *)v14, (JSC::JSString *)v15, (uint64_t)v17, *((_QWORD *)a2 + 7), 0, a8, a9, a10, a11);
  v21 = *(_DWORD *)(v13 + 80);
  if ((v21 & 0x27) != 0 && (v21 & 0x20) == 0)
  {
    v22 = v17;
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, (uint64_t)v17, a6, a7, a8);
    v17 = v22;
  }
  if (*(_QWORD *)(v13 + 16))
    return 0;
  else
    return JSC::replaceUsingStringSearch((JSC::VM *)v13, this, (const WTF::String *)v14, (JSC::JSString *)v15, (uint64_t)v17, *((_QWORD *)a2 + 7), 0, a8, a9, a10, a11);
}

uint64_t JSC::stringProtoFuncReplaceAllUsingStringSearch(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  JSC::VM *v13;
  int **v14;
  int **v15;
  uint64_t v16;
  int **v17;
  char v18;

  v13 = (JSC::VM *)*((_QWORD *)this + 7);
  v14 = (int **)*((_QWORD *)a2 + 5);
  v15 = v14 + 1;
  if (((_BYTE)v14[1] & 1) != 0)
    v15 = JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 5), this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*((_DWORD *)v13 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v13, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v16 = *((_QWORD *)a2 + 6);
  v18 = *(_BYTE *)(v16 + 8);
  v17 = (int **)(v16 + 8);
  if ((v18 & 1) != 0)
    v17 = JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 6), this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*((_DWORD *)v13 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v13, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    return 0;
  }
  else
  {
    return JSC::replaceUsingStringSearch(v13, this, (const WTF::String *)v14, (JSC::JSString *)v15, (uint64_t)v17, *((_QWORD *)a2 + 7), 1, a8, a9, a10, a11);
  }
}

uint64_t JSC::stringProtoFuncSlice(JSC *this, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  double v21;
  unint64_t *v22;
  double v23;
  unint64_t *v24;
  double v25;
  double v26;
  double v27;
  _BOOL4 v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unsigned __int8 v33;
  unint64_t SlowCase;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  JSC::VM *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int v78;
  int v79;
  int v80;
  int v81;
  WTF::StringImpl *v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  unsigned int v93;
  int v94;
  JSC::VM *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  JSC::JSObject *v120;
  uint64_t v121;
  unsigned __int8 *v122;
  JSC::VM *v123;
  char *v124;
  uint64_t v125;
  int v126;
  char v127;
  char v128;
  uint64_t v129;

  v9 = a2;
  v11 = *((_QWORD *)this + 7);
  v12 = *(_QWORD *)(a2 + 40);
  v122 = (unsigned __int8 *)v12;
  v123 = (JSC::VM *)v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v123);
LABEL_56:
    v12 = (unint64_t)JSC::JSValue::toStringSlowCase(&v122, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_3;
  }
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 != 2)
  {
    v114 = v13 - 51;
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2 || v114 < 5)
      return JSC::throwTypeError(this, &v123);
    goto LABEL_56;
  }
LABEL_3:
  if (*(_DWORD *)(v11 + 80))
  {
    v79 = *(_DWORD *)(v11 + 80);
    if ((v79 & 0x27) != 0 && (v79 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v14 = *(int *)(v9 + 32);
  v15 = v14 - 1;
  if (v14 == 1)
  {
    v16 = 10;
    v121 = 10;
  }
  else
  {
    v16 = *(_QWORD *)(v9 + 48);
    v121 = v16;
    if (v15 != 1)
    {
      v17 = *(_QWORD *)(v9 + 56);
      goto LABEL_7;
    }
  }
  v17 = 10;
LABEL_7:
  v120 = (JSC::JSObject *)v17;
  v18 = *(_QWORD *)(v12 + 8);
  if ((v18 & 1) != 0)
    v19 = (int *)(v12 + 16);
  else
    v19 = (int *)(v18 + 4);
  v20 = *v19;
  if (*v19 < 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198BC8BF4);
  }
  if (v16 < 0xFFFE000000000000)
  {
    v56 = v16 - 0x2000000000000;
    if (v56 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v121, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    else
      a9.i64[0] = v56;
    *(double *)a9.i64 = *(double *)a9.i64 + 0.0;
    v21 = trunc(*(double *)a9.i64);
  }
  else
  {
    v21 = (double)(int)v16;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v80 = *(_DWORD *)(v11 + 80);
    if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (v17 == 10)
  {
    *(double *)a9.i64 = (double)v20;
  }
  else if (v17 < 0xFFFE000000000000)
  {
    if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(&v120, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    else
      a9.i64[0] = v17 - 0x2000000000000;
    *(double *)a9.i64 = trunc(*(double *)a9.i64 + 0.0);
  }
  else
  {
    *(double *)a9.i64 = (double)(int)v17;
  }
  if (*(_DWORD *)(v11 + 80))
  {
    v81 = *(_DWORD *)(v11 + 80);
    if ((v81 & 0x27) != 0 && (v81 & 0x20) == 0)
    {
      v119 = a9.i64[0];
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      a9.i64[0] = v119;
    }
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v22 = (unint64_t *)(v11 + 39696);
  v23 = (double)v20;
  v24 = (unint64_t *)(v11 + 39432);
  v25 = -0.0;
  if (v21 >= 0.0)
    v26 = -0.0;
  else
    v26 = (double)v20;
  v27 = v21 + v26;
  if (*(double *)a9.i64 < 0.0)
    v25 = (double)v20;
  *(double *)a9.i64 = *(double *)a9.i64 + v25;
  v28 = *(double *)a9.i64 > v27;
  if (*(double *)a9.i64 <= 0.0)
    v28 = 0;
  if (v27 >= v23)
    v28 = 0;
  if (v27 < 0.0 || *(double *)a9.i64 > v23)
  {
    if (!v28)
      return *(_QWORD *)(v11 + 41968);
    if (v27 < 0.0)
      v27 = 0.0;
    if (*(double *)a9.i64 > v23)
      *(double *)a9.i64 = (double)v20;
    v69 = v27;
    v70 = *(double *)a9.i64 - v27;
    if (*(double *)a9.i64 == v27)
      return *(_QWORD *)(v11 + 41968);
    v71 = *(_QWORD *)(v12 + 8);
    if (!v69)
    {
      v77 = (_DWORD *)(v71 + 4);
      if ((v71 & 1) != 0)
        v77 = (_DWORD *)(v12 + 16);
      if (*v77 == v70)
        return v12;
    }
    if ((v71 & 2) != 0)
    {
      v78 = *(_DWORD *)(v12 + 26);
      v12 = *(_QWORD *)(v12 + 20) & 0xFFFFFFFFFLL;
      v69 += v78;
    }
    else if ((v71 & 1) != 0)
    {
      JSC::JSRopeString::resolveRope(v12, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (*(_DWORD *)(v11 + 80))
      {
        if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
          return 0;
      }
    }
    if (!v69)
    {
      v76 = *(_QWORD *)(v12 + 8);
      if (v76)
        LODWORD(v76) = *(_DWORD *)(v76 + 4);
      if ((_DWORD)v76 == v70)
        return v12;
    }
    if (v70 == 1)
    {
      v72 = *(WTF::StringImpl **)(v12 + 8);
      if (!v72 || *((_DWORD *)v72 + 1) <= v69)
        goto LABEL_38;
      v73 = WTF::StringImpl::at(v72, v69);
      if (v73 <= 0xFF)
        goto LABEL_205;
LABEL_119:
      v74 = *(_QWORD *)(v12 + 8);
      if (v74)
      {
        if ((*(_BYTE *)(v74 + 16) & 4) != 0)
          v75 = 7;
        else
          v75 = 3;
      }
      else
      {
        v75 = 7;
      }
      SlowCase = *v24;
      if (*v24 >= *(_QWORD *)(v11 + 39440))
      {
        SlowCase = *(_QWORD *)(v11 + 39448);
        if ((SlowCase & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 39408, v11 + 192, 32, 0, 0, v111, v112, v113);
LABEL_125:
          *(_DWORD *)SlowCase = *(_QWORD *)(v11 + 41512) >> 4;
          *(_DWORD *)(SlowCase + 4) = 17302016;
          *(_QWORD *)(SlowCase + 8) = v75;
          *(_DWORD *)(SlowCase + 16) = v70;
          *(_DWORD *)(SlowCase + 20) = v12;
          *(_WORD *)(SlowCase + 24) = WORD2(v12);
          *(_WORD *)(SlowCase + 26) = v69;
          *(_DWORD *)(SlowCase + 28) = HIWORD(v69);
          if (!*(_BYTE *)(v11 + 755))
            return SlowCase;
          goto LABEL_49;
        }
        v103 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 39456);
        *(_QWORD *)(v11 + 39440) = SlowCase + HIDWORD(v103);
        *(_QWORD *)(v11 + 39448) = SlowCase + (int)v103;
      }
      *v24 = SlowCase + 32;
      goto LABEL_125;
    }
    if (v70 != 2)
      goto LABEL_119;
    v82 = *(WTF::StringImpl **)(v12 + 8);
    if (!v82)
    {
      v84 = 0;
      goto LABEL_154;
    }
    v83 = *((_DWORD *)v82 + 1);
    if (v83 > v69)
    {
      v84 = WTF::StringImpl::at(v82, v69);
      v82 = *(WTF::StringImpl **)(v12 + 8);
      if (!v82)
        goto LABEL_154;
      v83 = *((_DWORD *)v82 + 1);
    }
    else
    {
      v84 = 0;
    }
    a2 = v69 + 1;
    if (v83 > a2)
      LODWORD(v82) = WTF::StringImpl::at(v82, a2);
    else
      LODWORD(v82) = 0;
LABEL_154:
    if ((v82 | v84) > 0x7F)
      goto LABEL_119;
    v127 = v84;
    v128 = (char)v82;
    v124 = &v127;
    v125 = 2;
    v85 = ((_DWORD)v82 << 11) ^ ((v84 - 1640531527) << 16) ^ (v84 - 1640531527);
    v86 = (v85 + (v85 >> 11)) ^ (8 * (v85 + (v85 >> 11)));
    v87 = (v86 + (v86 >> 5)) ^ (4 * (v86 + (v86 >> 5)));
    v88 = ((v87 + (v87 >> 15)) ^ ((v87 + (v87 >> 15)) << 10)) & 0xFFFFFF;
    if (v88)
      v89 = v88;
    else
      v89 = 0x800000;
    v126 = v89;
    v49 = v11 + 81168;
    v50 = v89 & 0x1FF;
    v90 = *(_QWORD *)(v11 + 81168 + 8 * v50);
    if (v90)
    {
      v91 = *(_QWORD *)(v90 + 8);
      v92 = (v91 & 1) != 0 ? 0 : (WTF::StringImpl *)v91;
      v93 = *((_DWORD *)v92 + 4);
      v94 = v93 < 0x100 ? WTF::StringImpl::hashSlowCase(v92) : v93 >> 8;
      if (v94 == v89 && WTF::equalInternal<unsigned char>((uint64_t)v92, (unint64_t)&v127, 2))
        return *(_QWORD *)(v49 + 8 * v50);
    }
    WTF::AtomStringImpl::add(&v124, a4, a5, a6, a7, a8, &v129);
    v98 = v129;
    v99 = *(_DWORD *)(v129 + 16);
    v100 = v129;
    if ((v99 & 3) == 2)
    {
      v100 = v129;
      do
      {
        v100 = *(_QWORD *)(v100 + 24);
        v99 = *(_DWORD *)(v100 + 16);
      }
      while ((v99 & 3) == 2);
    }
    if ((v99 & 8) != 0)
    {
      v67 = 0;
    }
    else
    {
      *(_DWORD *)(v100 + 16) = v99 | 8;
      v67 = (unint64_t)*(unsigned int *)(v100 + 4) << ((v99 & 4) == 0);
    }
    v68 = v11 + 192;
    SlowCase = *v22;
    if (*v22 >= *(_QWORD *)(v11 + 39704))
    {
      SlowCase = *(_QWORD *)(v11 + 39712);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, v95, v96, v97, v60, v61, v62, v63);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 39672, v11 + 192, 16, 0, 0, v116, v117, v118);
        v22 = (unint64_t *)(v11 + 39696);
LABEL_171:
        *(_DWORD *)SlowCase = v22[227] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v98;
        if (!*(_BYTE *)(v11 + 755))
          goto LABEL_95;
        goto LABEL_94;
      }
      v22 = (unint64_t *)(v11 + 39696);
      v104 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 39720);
      *(_QWORD *)(v11 + 39704) = SlowCase + HIDWORD(v104);
      *(_QWORD *)(v11 + 39712) = SlowCase + (int)v104;
    }
    *v22 = SlowCase + 16;
    goto LABEL_171;
  }
  if (!v28)
    return *(_QWORD *)(v11 + 41968);
  v29 = v27;
  v30 = *(double *)a9.i64 - v27;
  if (*(double *)a9.i64 == v27)
    return *(_QWORD *)(v11 + 41968);
  v31 = *(_QWORD *)(v12 + 8);
  if (!v29)
  {
    v39 = (_DWORD *)(v31 + 4);
    if ((v31 & 1) != 0)
      v39 = (_DWORD *)(v12 + 16);
    if (*v39 == v30)
      return v12;
  }
  if ((v31 & 2) != 0)
  {
    v40 = *(_DWORD *)(v12 + 26);
    v12 = *(_QWORD *)(v12 + 20) & 0xFFFFFFFFFLL;
    v29 += v40;
  }
  else if ((v31 & 1) != 0)
  {
    JSC::JSRopeString::resolveRope(v12, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*(_DWORD *)(v11 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        return 0;
    }
  }
  if (!v29)
  {
    v38 = *(_QWORD *)(v12 + 8);
    if (v38)
      LODWORD(v38) = *(_DWORD *)(v38 + 4);
    if ((_DWORD)v38 == v30)
      return v12;
  }
  if (v30 == 1)
  {
    v32 = *(WTF::StringImpl **)(v12 + 8);
    if (!v32 || *((_DWORD *)v32 + 1) <= v29)
    {
LABEL_38:
      v33 = 0;
      return *(_QWORD *)(v11 + 8 * v33 + 42216);
    }
    v73 = WTF::StringImpl::at(v32, v29);
    if (v73 <= 0xFF)
    {
LABEL_205:
      v33 = v73;
      return *(_QWORD *)(v11 + 8 * v33 + 42216);
    }
LABEL_42:
    v36 = *(_QWORD *)(v12 + 8);
    if (v36)
    {
      if ((*(_BYTE *)(v36 + 16) & 4) != 0)
        v37 = 7;
      else
        v37 = 3;
    }
    else
    {
      v37 = 7;
    }
    SlowCase = *v24;
    if (*v24 >= *(_QWORD *)(v11 + 39440))
    {
      SlowCase = *(_QWORD *)(v11 + 39448);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v11, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 39408, v11 + 192, 32, 0, 0, v105, v106, v107);
LABEL_48:
        *(_DWORD *)SlowCase = *(_QWORD *)(v11 + 41512) >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v37;
        *(_DWORD *)(SlowCase + 16) = v30;
        *(_DWORD *)(SlowCase + 20) = v12;
        *(_WORD *)(SlowCase + 24) = WORD2(v12);
        *(_WORD *)(SlowCase + 26) = v29;
        *(_DWORD *)(SlowCase + 28) = HIWORD(v29);
        if (!*(_BYTE *)(v11 + 755))
          return SlowCase;
LABEL_49:
        __dmb(0xAu);
        return SlowCase;
      }
      v101 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 39456);
      *(_QWORD *)(v11 + 39440) = SlowCase + HIDWORD(v101);
      *(_QWORD *)(v11 + 39448) = SlowCase + (int)v101;
    }
    *v24 = SlowCase + 32;
    goto LABEL_48;
  }
  if (v30 != 2)
    goto LABEL_42;
  v41 = *(WTF::StringImpl **)(v12 + 8);
  if (!v41)
  {
    v43 = 0;
    goto LABEL_69;
  }
  v42 = *((_DWORD *)v41 + 1);
  if (v42 > v29)
  {
    v43 = WTF::StringImpl::at(v41, v29);
    v41 = *(WTF::StringImpl **)(v12 + 8);
    if (!v41)
      goto LABEL_69;
    v42 = *((_DWORD *)v41 + 1);
  }
  else
  {
    v43 = 0;
  }
  a2 = v29 + 1;
  if (v42 > a2)
    LODWORD(v41) = WTF::StringImpl::at(v41, a2);
  else
    LODWORD(v41) = 0;
LABEL_69:
  if ((v41 | v43) > 0x7F)
    goto LABEL_42;
  v127 = v43;
  v128 = (char)v41;
  v124 = &v127;
  v125 = 2;
  v44 = ((_DWORD)v41 << 11) ^ ((v43 - 1640531527) << 16) ^ (v43 - 1640531527);
  v45 = (v44 + (v44 >> 11)) ^ (8 * (v44 + (v44 >> 11)));
  v46 = (v45 + (v45 >> 5)) ^ (4 * (v45 + (v45 >> 5)));
  v47 = ((v46 + (v46 >> 15)) ^ ((v46 + (v46 >> 15)) << 10)) & 0xFFFFFF;
  if (v47)
    v48 = v47;
  else
    v48 = 0x800000;
  v126 = v48;
  v49 = v11 + 81168;
  v50 = v48 & 0x1FF;
  v51 = *(_QWORD *)(v11 + 81168 + 8 * v50);
  if (v51)
  {
    v52 = *(_QWORD *)(v51 + 8);
    v53 = (v52 & 1) != 0 ? 0 : (WTF::StringImpl *)v52;
    v54 = *((_DWORD *)v53 + 4);
    v55 = v54 < 0x100 ? WTF::StringImpl::hashSlowCase(v53) : v54 >> 8;
    if (v55 == v48 && WTF::equalInternal<unsigned char>((uint64_t)v53, (unint64_t)&v127, 2))
      return *(_QWORD *)(v49 + 8 * v50);
  }
  WTF::AtomStringImpl::add(&v124, a4, a5, a6, a7, a8, &v129);
  v64 = v129;
  v65 = *(_DWORD *)(v129 + 16);
  v66 = v129;
  if ((v65 & 3) == 2)
  {
    v66 = v129;
    do
    {
      v66 = *(_QWORD *)(v66 + 24);
      v65 = *(_DWORD *)(v66 + 16);
    }
    while ((v65 & 3) == 2);
  }
  if ((v65 & 8) != 0)
  {
    v67 = 0;
  }
  else
  {
    *(_DWORD *)(v66 + 16) = v65 | 8;
    v67 = (unint64_t)*(unsigned int *)(v66 + 4) << ((v65 & 4) == 0);
  }
  v68 = v11 + 192;
  SlowCase = *v22;
  if (*v22 < *(_QWORD *)(v11 + 39704))
    goto LABEL_92;
  SlowCase = *(_QWORD *)(v11 + 39712);
  if ((SlowCase & 1) == 0)
  {
    v22 = (unint64_t *)(v11 + 39696);
    v102 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v11 + 39720);
    *(_QWORD *)(v11 + 39704) = SlowCase + HIDWORD(v102);
    *(_QWORD *)(v11 + 39712) = SlowCase + (int)v102;
LABEL_92:
    *v22 = SlowCase + 16;
    goto LABEL_93;
  }
  JSC::sanitizeStackForVM((JSC *)v11, v57, v58, v59, v60, v61, v62, v63);
  SlowCase = JSC::LocalAllocator::allocateSlowCase(v11 + 39672, v11 + 192, 16, 0, 0, v108, v109, v110);
  v22 = (unint64_t *)(v11 + 39696);
LABEL_93:
  *(_DWORD *)SlowCase = v22[227] >> 4;
  *(_DWORD *)(SlowCase + 4) = 17302016;
  *(_QWORD *)(SlowCase + 8) = v64;
  if (*(_BYTE *)(v11 + 755))
LABEL_94:
    __dmb(0xAu);
LABEL_95:
  if (v67 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v68, 0, SlowCase, v67, v60, v61, v62, v63);
  *(_QWORD *)(v49 + 8 * v50) = SlowCase;
  return SlowCase;
}

unint64_t JSC::stringProtoFuncSubstr(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int *v15;
  WTF::StringImpl *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  double v22;
  double v23;
  JSC::JSString *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  JSC::VM *v46;

  v11 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)a2 + 5);
  v45 = v12;
  v46 = (JSC::VM *)v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v46);
  }
  else
  {
    v13 = *(unsigned __int8 *)(v12 + 5);
    if (v13 == 2)
    {
      v44 = 0;
      v14 = *(_QWORD *)(v12 + 8);
      if ((v14 & 1) != 0)
        v15 = (unsigned int *)(v12 + 16);
      else
        v15 = (unsigned int *)(v14 + 4);
      v16 = 0;
      goto LABEL_7;
    }
    v38 = v13 - 51;
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2 || v38 < 5)
      return JSC::throwTypeError(this, &v46);
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v45, this, a3, a4, a5, a6, a7, a8, (int **)&v43);
  v16 = (WTF::StringImpl *)v43;
  v44 = (int *)v43;
  if (*(_DWORD *)(v11 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_51;
  }
  v12 = 0;
  if (v16)
  {
    v15 = (unsigned int *)((char *)v16 + 4);
LABEL_7:
    v17 = *v15;
    goto LABEL_8;
  }
  v17 = 0;
LABEL_8:
  v18 = *((int *)a2 + 8);
  v19 = v18 - 1;
  if (v18 == 1)
  {
    v21 = 10;
    v42 = 10;
    v43 = 10;
  }
  else
  {
    v20 = (int *)*((_QWORD *)a2 + 6);
    v43 = (uint64_t)v20;
    if (v19 == 1)
      v21 = 10;
    else
      v21 = *((_QWORD *)a2 + 7);
    v42 = v21;
    if ((unint64_t)v20 >= 0xFFFE000000000000)
    {
      v22 = (double)(int)v20;
      goto LABEL_13;
    }
    v40 = (unint64_t)(v20 - 0x800000000000);
    if (v40 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      a9.i64[0] = v40;
      goto LABEL_38;
    }
  }
  JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v43, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
LABEL_38:
  *(double *)a9.i64 = *(double *)a9.i64 + 0.0;
  v22 = trunc(*(double *)a9.i64);
LABEL_13:
  if (!*(_DWORD *)(v11 + 80))
    goto LABEL_69;
  v36 = *(_DWORD *)(v11 + 80);
  if ((v36 & 0x27) != 0 && (v36 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_69:
    v23 = (double)v17;
    if (v21 == 10)
    {
      *(double *)a9.i64 = (double)v17;
    }
    else if (v21 < 0xFFFE000000000000)
    {
      if (v21 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v42, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
      else
        a9.i64[0] = v21 - 0x2000000000000;
      *(double *)a9.i64 = trunc(*(double *)a9.i64 + 0.0);
    }
    else
    {
      *(double *)a9.i64 = (double)(int)v21;
    }
    if (!*(_DWORD *)(v11 + 80))
      goto LABEL_18;
    v37 = *(_DWORD *)(v11 + 80);
    if ((v37 & 0x27) != 0 && (v37 & 0x20) == 0)
    {
      v41 = a9.i64[0];
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      a9.i64[0] = v41;
    }
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_18:
      if (v22 >= v23 || *(double *)a9.i64 <= 0.0)
      {
        v26 = *(_QWORD *)(v11 + 41968);
      }
      else
      {
        if (v22 < 0.0)
        {
          v22 = v22 + v23;
          if (v22 < 0.0)
            v22 = 0.0;
        }
        if (*(double *)a9.i64 + v22 > v23)
          *(double *)a9.i64 = v23 - v22;
        v24 = (JSC::JSString *)v22;
        v25 = *(double *)a9.i64;
        if (v12)
        {
          v26 = (unint64_t)JSC::jsSubstring(this, (JSC::JSGlobalObject *)v12, v24, v25, a5, a6, a7, a8, a9);
        }
        else
        {
          v26 = JSC::jsSubstring((JSC *)v11, (JSC::VM *)&v44, v24, v25);
          v16 = (WTF::StringImpl *)v44;
        }
      }
      goto LABEL_24;
    }
  }
LABEL_51:
  v26 = 0;
LABEL_24:
  v44 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
    {
      WTF::StringImpl::~StringImpl(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
    }
    else
    {
      *(_DWORD *)v16 -= 2;
    }
  }
  return v26;
}

uint64_t JSC::stringProtoFuncToLowerCase(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int **v13;
  uint64_t v14;
  WTF::AtomStringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned __int8 *v36;
  JSC::VM *v37;
  WTF::StringImpl *v38;

  v10 = *((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 5);
  v36 = (unsigned __int8 *)v11;
  v37 = (JSC::VM *)v10;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v37);
LABEL_15:
    v11 = (uint64_t)JSC::JSValue::toStringSlowCase(&v36, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_3;
  }
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 != 2)
  {
    v34 = v12 - 51;
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2 || v34 < 5)
      return JSC::throwTypeError(this, &v37);
    goto LABEL_15;
  }
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_4;
LABEL_3:
  v32 = *(_DWORD *)(v10 + 80);
  if ((v32 & 0x27) != 0 && (v32 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_4:
  v13 = (int **)(v11 + 8);
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    v13 = JSC::JSRopeString::resolveRope(v11, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (!*(_DWORD *)(v10 + 80))
    goto LABEL_7;
  v33 = *(_DWORD *)(v10 + 80);
  if ((v33 & 0x27) != 0 && (v33 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v10 + 16))
    return 0;
LABEL_7:
  v14 = v11;
  if (*v13)
  {
    WTF::StringImpl::convertToLowercaseWithoutLocale((WTF::StringImpl *)*v13, (uint64_t *)&v38);
    v22 = (WTF::StringImpl *)*v13;
    if (v38 == (WTF::StringImpl *)*v13)
    {
      v14 = v11;
    }
    else
    {
      v14 = JSC::jsString(v10, (JSC::VM *)&v38, v16, v17, v18, v19, v20, v21);
      v22 = v38;
    }
    v38 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::~StringImpl(v22, v15, v16, v17, v18, v19, v20, v21);
        WTF::fastFree(v24, v25, v26, v27, v28, v29, v30, v31);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  return v14;
}

uint64_t JSC::stringProtoFuncToUpperCase(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int **v13;
  uint64_t v14;
  JSC::VM *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  int v24;
  uint64_t *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v30;
  unsigned int v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t SlowCase;
  unsigned int v47;
  unint64_t v49;
  unsigned __int8 *v50;
  JSC::VM *v51;
  WTF::StringImpl *v52;

  v10 = *((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 5);
  v50 = (unsigned __int8 *)v11;
  v51 = (JSC::VM *)v10;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v51);
LABEL_24:
    v11 = (uint64_t)JSC::JSValue::toStringSlowCase(&v50, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_3;
  }
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 != 2)
  {
    v47 = v12 - 51;
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2 || v47 < 5)
      return JSC::throwTypeError(this, &v51);
    goto LABEL_24;
  }
LABEL_3:
  if (*(_DWORD *)(v10 + 80))
  {
    v40 = *(_DWORD *)(v10 + 80);
    if ((v40 & 0x27) != 0 && (v40 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v13 = (int **)(v11 + 8);
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    v13 = JSC::JSRopeString::resolveRope(v11, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v10 + 80))
  {
    v41 = *(_DWORD *)(v10 + 80);
    if ((v41 & 0x27) != 0 && (v41 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v10 + 16))
      return 0;
  }
  v14 = v11;
  if (*v13)
  {
    WTF::StringImpl::convertToUppercaseWithoutLocale((WTF::StringImpl *)*v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8, &v52);
    v22 = v52;
    v14 = v11;
    if (v52 != (WTF::StringImpl *)*v13)
    {
      if (v52)
      {
        v23 = *((_DWORD *)v52 + 1);
        if (v23 == 1)
        {
          v24 = *((_DWORD *)v52 + 4);
          v30 = (unsigned __int8 *)*((_QWORD *)v52 + 1);
          if ((v24 & 4) != 0)
          {
            v31 = *v30;
          }
          else
          {
            v31 = *(unsigned __int16 *)v30;
            if (v31 > 0xFF)
            {
LABEL_13:
              v25 = (uint64_t *)(v10 + 39696);
              v26 = v52;
              if ((v24 & 3) == 2)
              {
                v26 = v52;
                do
                {
                  v26 = (WTF::StringImpl *)*((_QWORD *)v26 + 3);
                  v24 = *((_DWORD *)v26 + 4);
                }
                while ((v24 & 3) == 2);
              }
              if ((v24 & 8) != 0)
              {
                v27 = 0;
              }
              else
              {
                *((_DWORD *)v26 + 4) = v24 | 8;
                v27 = (unint64_t)*((unsigned int *)v26 + 1) << ((v24 & 4) == 0);
              }
              v28 = v10 + 192;
              v14 = *v25;
              if ((unint64_t)*v25 >= *(_QWORD *)(v10 + 39704))
              {
                v14 = *(_QWORD *)(v10 + 39712);
                if ((v14 & 1) != 0)
                {
                  v49 = v27;
                  JSC::sanitizeStackForVM((JSC *)v10, v15, v16, v27, v18, v19, v20, v21);
                  SlowCase = JSC::LocalAllocator::allocateSlowCase(v10 + 39672, v10 + 192, 16, 0, 0, v43, v44, v45);
                  v25 = (uint64_t *)(v10 + 39696);
                  v27 = v49;
                  v14 = SlowCase;
                  v28 = v10 + 192;
                  goto LABEL_18;
                }
                v42 = *(_QWORD *)(v14 + 8) ^ *(_QWORD *)(v10 + 39720);
                *(_QWORD *)(v10 + 39704) = v14 + HIDWORD(v42);
                *(_QWORD *)(v10 + 39712) = v14 + (int)v42;
              }
              *v25 = v14 + 16;
LABEL_18:
              *(_DWORD *)v14 = (unint64_t)v25[227] >> 4;
              *(_DWORD *)(v14 + 4) = 17302016;
              *(_QWORD *)(v14 + 8) = v22;
              if (*(_BYTE *)(v10 + 755))
                __dmb(0xAu);
              if (v27 >= 0x101)
                JSC::Heap::reportExtraMemoryAllocatedSlowCase(v28, 0, v14, v27, v18, v19, v20, v21);
              return v14;
            }
          }
          v14 = *(_QWORD *)(v10 + 8 * v31 + 42216);
LABEL_29:
          if (*(_DWORD *)v52 == 2)
          {
            WTF::StringImpl::~StringImpl(v52, v15, v16, v17, v18, v19, v20, v21);
            WTF::fastFree(v32, v33, v34, v35, v36, v37, v38, v39);
          }
          else
          {
            *(_DWORD *)v52 -= 2;
          }
          return v14;
        }
        if (v23)
        {
          v24 = *((_DWORD *)v52 + 4);
          goto LABEL_13;
        }
      }
      v14 = *(_QWORD *)(v10 + 41968);
    }
    if (!v52)
      return v14;
    goto LABEL_29;
  }
  return v14;
}

unint64_t JSC::stringProtoFuncLocaleCompare(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  unint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int16x8_t *v21;
  unint64_t v22;
  uint8x8_t *v23;
  unint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  JSC::VM *v45;
  JSC::Structure *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t (*v57)(_QWORD *);
  _QWORD *v58;
  unsigned int v59;
  WTF::StringImpl *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  JSC::VM *v65;
  _QWORD v66[3];

  v11 = *(JSC::VM **)(this + 56);
  v12 = *((_QWORD *)a2 + 5);
  v64 = v12;
  v65 = v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v65, (uint64_t)"String.prototype.localeCompare requires that |this| not be null or undefined", 77);
LABEL_40:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v64, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, (int **)&v63);
    goto LABEL_8;
  }
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 != 2)
  {
    v59 = v13 - 51;
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2 || v59 < 5)
      return JSC::throwTypeError(this, &v65, (uint64_t)"String.prototype.localeCompare requires that |this| not be null or undefined", 77);
    goto LABEL_40;
  }
  v14 = *(WTF::StringImpl **)(v12 + 8);
  if ((v14 & 1) != 0)
    v14 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v12, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (v14)
    *(_DWORD *)v14 += 2;
  v63 = v14;
LABEL_8:
  if (!*((_DWORD *)v11 + 20)
    || !JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    if (*((_DWORD *)a2 + 8) == 1)
    {
      v62 = 10;
    }
    else
    {
      v15 = *((_QWORD *)a2 + 6);
      v62 = v15;
      if ((v15 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v15 + 5) == 2)
      {
        v16 = *(WTF::StringImpl **)(v15 + 8);
        if ((v16 & 1) != 0)
          v16 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v15, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (v16)
          *(_DWORD *)v16 += 2;
        v61 = v16;
        goto LABEL_17;
      }
    }
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v62, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, (int **)&v61);
LABEL_17:
    if (*((_DWORD *)v11 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      goto LABEL_51;
    }
    if ((unint64_t)(*((int *)a2 + 8) - 1) < 2
      || ((v17 = *((_QWORD *)a2 + 7), *((_DWORD *)a2 + 8) == 3) ? (v18 = 10) : (v18 = *((_QWORD *)a2 + 8)),
          v17 == 10 && v18 == 10))
    {
      v19 = *(_QWORD *)(this + 288);
      if ((v19 & 1) != 0)
      {
        v57 = *(uint64_t (**)(_QWORD *))(v19 & 0xFFFFFFFFFFFFFFFCLL);
        if ((this & 8) != 0)
          v58 = (_QWORD *)(this - 16);
        else
          v58 = (_QWORD *)(this & 0xFFFFFFFFFFFFC000 | 8);
        v66[0] = *v58;
        v66[1] = this;
        v66[2] = this + 288;
        v19 = v57(v66);
      }
    }
    else
    {
      v45 = (JSC::VM *)JSC::LazyClassStructure::get((JSC::LazyClassStructure *)(this + 304), this);
      v19 = JSC::IntlCollator::create((JSC::Heap **)v11, v45, v46, v47, v48, v49, v50, v51);
      JSC::IntlCollator::initializeCollator(v19, (JSC::JSGlobalObject *)this, v17, (JSC::Symbol *)v18, v52, v53, v54, v55, v56);
    }
    if (*((_DWORD *)v11 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_51:
      v25 = 0;
    }
    else
    {
      v20 = (unint64_t)v63;
      if (v63)
      {
        v21 = (int16x8_t *)*((_QWORD *)v63 + 1);
        v20 = *((unsigned int *)v63 + 1);
        v22 = (unint64_t)((*((_DWORD *)v63 + 4) >> 2) & 1) << 32;
      }
      else
      {
        v21 = 0;
        v22 = 0x100000000;
      }
      if (v61)
      {
        v23 = (uint8x8_t *)*((_QWORD *)v61 + 1);
        v24 = *((unsigned int *)v61 + 1) | ((unint64_t)((*((_DWORD *)v61 + 4) >> 2) & 1) << 32);
      }
      else
      {
        v23 = 0;
        v24 = 0x100000000;
      }
      v25 = JSC::IntlCollator::compareStrings(v19, (JSC::VM **)this, v21, (unsigned __int8 *)(v22 | v20), v23, (unsigned __int8 *)v24) | 0xFFFE000000000000;
    }
    v26 = v61;
    v61 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v37, v38, v39, v40, v41, v42, v43, v44);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    goto LABEL_33;
  }
  v25 = 0;
LABEL_33:
  v27 = v63;
  v63 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
    {
      WTF::StringImpl::~StringImpl(v27, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v29, v30, v31, v32, v33, v34, v35, v36);
    }
    else
    {
      *(_DWORD *)v27 -= 2;
    }
  }
  return v25;
}

unsigned __int8 *JSC::stringProtoFuncToLocaleLowerCase(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  unint64_t v9;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int **v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  BOOL v19;
  WTF::AtomStringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::AtomStringImpl *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int32_t v38;
  uint64_t v39;
  UErrorCode v40;
  unint64_t v41;
  int v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  WTF *v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int *v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  WTF *v78;
  WTF *v79;
  __int16 v80;
  WTF *v81;
  const char *v82;
  const char *v83;
  size_t v84;
  size_t v85;
  int *v86;
  char *v87;
  int *v88;
  _WORD *v89;
  uint64_t v90;
  WTF *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF *v94;
  unint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  WTF *v128;
  uint64_t v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  int8x16_t v149;
  __int128 v150;
  __int128 v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  void *v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  JSC *v169;
  WTF *v170;
  WTF *v171;
  unint64_t v172;
  _BYTE v173[64];
  uint64_t v174;
  uint64_t v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF *v178;
  int v179;
  unsigned int v180;
  unsigned __int8 *v181;
  JSC::VM *v182;
  WTF::StringImpl *v183;
  UErrorCode pErrorCode[3];
  int8x16x2_t v185;
  int8x16x2_t v186;
  int8x16x2_t v187;

  v12 = *((_QWORD *)this + 7);
  v13 = (unsigned __int8 *)*((_QWORD *)a2 + 5);
  v181 = v13;
  v182 = (JSC::VM *)v12;
  if (((unint64_t)v13 & 0xFFFE000000000002) != 0)
  {
    if (((unint64_t)v13 & 0xFFFFFFFFFFFFFFF7) == 2)
      return (unsigned __int8 *)JSC::throwTypeError(this, &v182);
LABEL_12:
    v13 = JSC::JSValue::toStringSlowCase(&v181, (uint64_t)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_3;
  }
  v14 = v13[5];
  if (v14 != 2)
  {
    v167 = v14 - 51;
    if (((unint64_t)v13 & 0xFFFFFFFFFFFFFFF7) == 2 || v167 < 5)
      return (unsigned __int8 *)JSC::throwTypeError(this, &v182);
    goto LABEL_12;
  }
LABEL_3:
  if (*(_DWORD *)(v12 + 80))
  {
    v70 = *(_DWORD *)(v12 + 80);
    if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  v15 = (int **)(v13 + 8);
  if ((v13[8] & 1) != 0)
    v15 = JSC::JSRopeString::resolveRope((unint64_t)v13, this, (uint64_t)a3, (uint64_t)a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v12 + 80))
  {
    v71 = *(_DWORD *)(v12 + 80);
    if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v17 = *v15;
    if (!*v15)
      return v13;
    v16 = 10;
  }
  else
  {
    v16 = *((_QWORD *)a2 + 6);
    v17 = *v15;
    if (!*v15)
    {
      if (v16 == 10)
        return v13;
      goto LABEL_19;
    }
  }
  if (v17[1])
    v19 = 0;
  else
    v19 = v16 == 10;
  if (v19)
    return v13;
LABEL_19:
  JSC::canonicalizeLocaleList((unint64_t)this, v16, (uint64_t)a3, a4, a5, a6, a7, a8, &v178, (__n128)a9);
  if (*(_DWORD *)(v12 + 80))
  {
    v72 = *(_DWORD *)(v12 + 80);
    if ((v72 & 0x27) != 0 && (v72 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, v21, v22, v23, v24, v25, v26);
    if (*(_QWORD *)(v12 + 16))
    {
      v18 = 0;
      goto LABEL_150;
    }
  }
  v169 = this;
  if (v180)
  {
    v27 = *(WTF::StringImpl **)v178;
    if (*(_QWORD *)v178)
      *(_DWORD *)v27 += 2;
    v177 = v27;
  }
  else
  {
    JSC::defaultLocale(this, (uint64_t *)&v177);
  }
  JSC::removeUnicodeLocaleExtension((JSC *)&v177, &v176);
  v35 = (unint64_t)v176;
  if (!v176)
    goto LABEL_91;
  v36 = 7602283;
  v37 = 7077989;
  *(_DWORD *)v176 += 2;
  v171 = (WTF *)v35;
  v38 = 7995489;
  v39 = 7602284;
  v40 = 0x7FFFFFFF;
  while (1)
  {
    v41 = *(unsigned int *)(v35 + 4);
    if ((_DWORD)v41 == 2)
    {
      v42 = JSC::computeTwoCharacters16Code<WTF::String>(&v171);
      if (v42 > 7602283)
      {
        if (v42 == 7995489 || v42 == 7602284)
        {
LABEL_77:
          v69 = v171;
          v183 = v171;
          goto LABEL_167;
        }
      }
      else if (v42 == 7077989 || v42 == 7471220)
      {
        goto LABEL_77;
      }
      v41 = *(unsigned int *)(v35 + 4);
    }
    else if (!*(_DWORD *)(v35 + 4))
    {
      v183 = 0;
      v171 = 0;
LABEL_89:
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v139, v140, v141, v142, v143, v144, v145, v146);
        v69 = v183;
LABEL_167:
        if (v69)
          goto LABEL_92;
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
LABEL_91:
      v73 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_QWORD *)v73 = 0x300000002;
      *(_QWORD *)(v73 + 8) = "und";
      *(_DWORD *)(v73 + 16) = 4;
      v183 = (WTF::StringImpl *)v73;
LABEL_92:
      v74 = *v15;
      if (!*v15)
      {
        v35 = 0;
        LODWORD(v9) = 0;
        goto LABEL_170;
      }
      v9 = v74[1];
      if (!(_DWORD)v9)
      {
        v75 = 0;
        v35 = 0;
        goto LABEL_97;
      }
      if ((v9 & 0x80000000) == 0)
      {
        v35 = WTF::fastMalloc((WTF *)(2 * v9));
        v74 = *v15;
        if (*v15)
        {
          v75 = v74[1];
LABEL_97:
          v37 = *((_QWORD *)v74 + 1);
          v76 = v75 | ((unint64_t)((v74[4] >> 2) & 1) << 32);
          goto LABEL_98;
        }
LABEL_170:
        v37 = 0;
        v76 = 0x100000000;
LABEL_98:
        v36 = (uint64_t)v173;
        v171 = (WTF *)v173;
        v172 = 32;
        v174 = 0;
        v175 = 0;
        v77 = v76;
        if ((v76 & 0x100000000) != 0)
        {
          if (v76 > 0x20uLL)
          {
            if (v76 <= 0x29uLL)
              v147 = 41;
            else
              v147 = v76;
            if (v147 >> 31)
            {
              __break(0xC471u);
              JUMPOUT(0x198BCA534);
            }
            v78 = (WTF *)WTF::fastMalloc((WTF *)(2 * v147));
            v171 = v78;
            v172 = __PAIR64__(v76, v147);
            if (v76 < 0x40uLL)
            {
              v79 = v78;
            }
            else
            {
              v79 = (WTF *)((char *)v78 + 2 * (v76 & 0xFFFFFFC0));
              v43 = 0uLL;
              v148 = (char *)v78;
              do
              {
                v185.val[0] = *(int8x16_t *)v37;
                v149 = *(int8x16_t *)(v37 + 16);
                v186.val[0] = *(int8x16_t *)(v37 + 32);
                v150 = *(_OWORD *)(v37 + 48);
                v37 += 64;
                v151 = v150;
                v186.val[1] = 0uLL;
                v187.val[0] = v149;
                v185.val[1] = 0uLL;
                v152 = v148;
                vst2q_s8(v152, v185);
                v152 += 32;
                v187.val[1] = 0uLL;
                vst2q_s8(v152, v187);
                v153 = v148 + 64;
                vst2q_s8(v153, v186);
                v154 = v148 + 96;
                vst2q_s8(v154, *(int8x16x2_t *)(&v43 - 1));
                v148 += 128;
              }
              while (v148 != (char *)v79);
            }
          }
          else
          {
            HIDWORD(v172) = v76;
            v78 = (WTF *)v173;
            v79 = (WTF *)v173;
          }
          while (v79 != (WTF *)((char *)v78 + 2 * v76))
          {
            v80 = *(unsigned __int8 *)v37++;
            *(_WORD *)v79 = v80;
            v79 = (WTF *)((char *)v79 + 2);
          }
          v37 = (uint64_t)v171;
          v77 = HIDWORD(v172);
        }
        v174 = v37;
        v175 = v77;
        if (*v15)
          v38 = (*v15)[1];
        else
          v38 = 0;
        WTF::String::utf8((uint64_t *)&v183, 0, v30, v31, v32, v33, v34, &v170, *(float *)&v43);
        if (v170)
          v39 = (uint64_t)v170 + 16;
        else
          v39 = 0;
        pErrorCode[0] = U_ZERO_ERROR;
        LODWORD(v15) = u_strToLower((UChar *)v35, v9, (const UChar *)v37, v38, (const char *)v39, pErrorCode);
        v40 = pErrorCode[0];
        if (pErrorCode[0] >= U_ILLEGAL_ARGUMENT_ERROR)
          goto LABEL_181;
        goto LABEL_110;
      }
      __break(0xC471u);
LABEL_214:
      JUMPOUT(0x198BCA51CLL);
    }
    v44 = *(_DWORD *)(v35 + 16);
    v45 = *(_QWORD *)(v35 + 8);
    if ((v44 & 4) != 0)
      break;
    if (!v41)
      goto LABEL_88;
    v46 = v41 - 1;
    if ((v41 & 0x80000000) != 0)
      v46 = 0x7FFFFFFFLL;
    if (v46 >= v41)
      goto LABEL_180;
    v47 = *(unsigned __int16 *)(v45 + 2 * v46);
    if (v46 - 1 >= v41)
      goto LABEL_69;
    if (v47 != 45)
    {
      while (v46)
      {
        v29 = v46 - 1;
        v48 = *(unsigned __int16 *)(v45 - 2 + 2 * v46--);
        if (v48 == 45)
          goto LABEL_54;
      }
      goto LABEL_88;
    }
LABEL_53:
    v29 = v46;
LABEL_54:
    if (v29 >= 2 && v35 && v41 > (v29 - 2))
    {
      v67 = (v29 - 2);
      v68 = (v44 & 4) != 0 ? *(unsigned __int8 *)(v45 + v67) : *(unsigned __int16 *)(v45 + 2 * v67);
      if (v68 == 45)
        LODWORD(v29) = v29 - 2;
    }
    WTF::String::left((uint64_t *)&v183, (WTF::StringImpl *)v35, v29);
    v9 = (unint64_t)v183;
    v183 = 0;
    v171 = (WTF *)v9;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
      {
        WTF::StringImpl::~StringImpl((WTF::StringImpl *)v35, v28, v29, v30, v31, v32, v33, v34);
        WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
        v58 = v183;
        v183 = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
          {
            WTF::StringImpl::~StringImpl(v58, v28, v29, v30, v31, v32, v33, v34);
            WTF::fastFree(v59, v60, v61, v62, v63, v64, v65, v66);
          }
          else
          {
            *(_DWORD *)v58 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)v35 -= 2;
      }
    }
    v35 = v9;
    if (!v9)
      goto LABEL_91;
  }
  if (!v41)
    goto LABEL_88;
  v46 = v41 - 1;
  if ((v41 & 0x80000000) != 0)
    v46 = 0x7FFFFFFFLL;
  if (v46 >= v41)
    goto LABEL_180;
  v47 = *(unsigned __int8 *)(v45 + v46);
  if (v46 - 1 < v41)
  {
    if (v47 != 45)
    {
      while (v46)
      {
        v29 = v46 - 1;
        v49 = *(unsigned __int8 *)(v45 - 1 + v46--);
        if (v49 == 45)
          goto LABEL_54;
      }
LABEL_88:
      v35 = (unint64_t)v171;
      v183 = 0;
      v171 = 0;
      if (!v35)
        goto LABEL_91;
      goto LABEL_89;
    }
    goto LABEL_53;
  }
LABEL_69:
  if (v47 == 45)
    goto LABEL_53;
  if (!v46)
    goto LABEL_88;
LABEL_180:
  __break(1u);
LABEL_181:
  if (v40 != U_BUFFER_OVERFLOW_ERROR)
  {
    LODWORD(v15) = v9;
    goto LABEL_110;
  }
  pErrorCode[0] = U_ZERO_ERROR;
  v155 = v9;
  if (v9 >= (unint64_t)(int)v15)
  {
    v156 = (void *)v35;
    goto LABEL_184;
  }
  v157 = (int)v15;
  v158 = v9 + ((unint64_t)v9 >> 2);
  if (v158 >= 0x10)
    v159 = v158 + 1;
  else
    v159 = 16;
  if (v159 > (int)v15)
    v157 = v159;
  if (v157 >> 31)
  {
    __break(0xC471u);
    goto LABEL_214;
  }
  v156 = (void *)WTF::fastMalloc((WTF *)(2 * v157));
  memcpy(v156, (const void *)v35, 2 * v155);
  if (v35)
  {
    if (v156 == (void *)v35)
      v156 = 0;
    WTF::fastFree(v35, v160, v161, v162, v163, v164, v165, v166);
  }
LABEL_184:
  u_strToLower((UChar *)v156, (int32_t)v15, (const UChar *)v37, v38, (const char *)v39, pErrorCode);
  v40 = pErrorCode[0];
  v35 = (unint64_t)v156;
LABEL_110:
  if (v170)
  {
    if (*(_DWORD *)v170 == 1)
      WTF::fastFree((unint64_t)v170, v28, v29, v30, v31, v32, v33, v34);
    else
      --*(_DWORD *)v170;
  }
  v81 = v171;
  if ((WTF *)v36 != v171 && v171)
  {
    v171 = 0;
    LODWORD(v172) = 0;
    WTF::fastFree((unint64_t)v81, v28, v29, v30, v31, v32, v33, v34);
  }
  if (v40 < U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (v35)
    {
      if ((_DWORD)v15)
      {
        if (v15 >= 0x7FFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x198BCA52CLL);
        }
        v88 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v15 + 20));
        v89 = v88 + 5;
        *v88 = 2;
        v88[1] = (int)v15;
        *((_QWORD *)v88 + 1) = v88 + 5;
        v88[4] = 0;
        if ((_DWORD)v15 == 1)
          *v89 = *(_WORD *)v35;
        else
          memcpy(v89, (const void *)v35, 2 * v15);
      }
      else
      {
        v88 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v88 = 0;
    }
    v171 = (WTF *)v88;
    v90 = JSC::jsString(v12, (JSC::VM *)&v171, v29, v30, v31, v32, v33, v34);
  }
  else
  {
    v82 = u_errorName(v40);
    if (v82)
    {
      v83 = v82;
      v84 = strlen(v82);
      if (v84)
      {
        v85 = v84;
        if (v84 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198BCA524);
        }
        v86 = (int *)WTF::fastCompactMalloc((WTF *)(v84 + 20));
        v87 = (char *)(v86 + 5);
        *v86 = 2;
        v86[1] = v85;
        *((_QWORD *)v86 + 1) = v86 + 5;
        v86[4] = 4;
        if (v85 == 1)
          *v87 = *v83;
        else
          memcpy(v87, v83, v85);
      }
      else
      {
        v86 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v86 = 0;
    }
    v171 = (WTF *)v86;
    v90 = JSC::throwTypeError((unint64_t)v169, &v182, &v171);
  }
  v18 = v90;
  v91 = v171;
  v171 = 0;
  if (!v91)
  {
LABEL_139:
    if (!v35)
      goto LABEL_141;
    goto LABEL_140;
  }
  if (*(_DWORD *)v91 != 2)
  {
    *(_DWORD *)v91 -= 2;
    goto LABEL_139;
  }
  WTF::StringImpl::~StringImpl(v91, v20, v21, v22, v23, v24, v25, v26);
  WTF::fastFree(v96, v97, v98, v99, v100, v101, v102, v103);
  if (v35)
LABEL_140:
    WTF::fastFree(v35, v20, v21, v22, v23, v24, v25, v26);
LABEL_141:
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
    {
      WTF::StringImpl::~StringImpl(v183, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v104, v105, v106, v107, v108, v109, v110, v111);
    }
    else
    {
      *(_DWORD *)v183 -= 2;
    }
  }
  v92 = v176;
  v176 = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
    {
      WTF::StringImpl::~StringImpl(v92, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v112, v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      *(_DWORD *)v92 -= 2;
    }
  }
  v93 = v177;
  v177 = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
    {
      WTF::StringImpl::~StringImpl(v93, v20, v21, v22, v23, v24, v25, v26);
      WTF::fastFree(v120, v121, v122, v123, v124, v125, v126, v127);
    }
    else
    {
      *(_DWORD *)v93 -= 2;
    }
  }
LABEL_150:
  if (v180)
  {
    v128 = v178;
    v129 = 8 * v180;
    do
    {
      v130 = *(WTF::StringImpl **)v128;
      *(_QWORD *)v128 = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 == 2)
        {
          WTF::StringImpl::~StringImpl(v130, v20, v21, v22, v23, v24, v25, v26);
          WTF::fastFree(v131, v132, v133, v134, v135, v136, v137, v138);
        }
        else
        {
          *(_DWORD *)v130 -= 2;
        }
      }
      v128 = (WTF *)((char *)v128 + 8);
      v129 -= 8;
    }
    while (v129);
  }
  v94 = v178;
  if (v178)
  {
    v178 = 0;
    v179 = 0;
    WTF::fastFree((unint64_t)v94, v20, v21, v22, v23, v24, v25, v26);
  }
  return (unsigned __int8 *)v18;
}

unsigned __int8 *JSC::stringProtoFuncToLocaleUpperCase(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::Symbol *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::VM *v11;
  unsigned __int8 *v12;
  int v13;
  int **v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::AtomStringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  int v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  unsigned __int8 *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  WTF *v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::AtomStringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  UChar *v82;
  unsigned int v83;
  WTF *v84;
  unint64_t v85;
  uint64_t v86;
  WTF *v87;
  WTF *v88;
  __int16 v89;
  int32_t v90;
  _DWORD *v91;
  const char *v92;
  UChar *v93;
  int32_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  UErrorCode v102;
  WTF *v103;
  int *v104;
  UChar *v105;
  uint64_t v106;
  WTF *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF *v110;
  unint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  WTF::StringImpl **v143;
  uint64_t v144;
  WTF::StringImpl *v145;
  unint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  char *v163;
  int8x16_t v164;
  __int128 v165;
  __int128 v166;
  char *v167;
  char *v168;
  char *v169;
  const char *v170;
  unsigned int v171;
  JSC *v173;
  uint64_t v174;
  WTF *v175;
  unint64_t v176;
  _BYTE v177[64];
  WTF *v178;
  uint64_t v179;
  UChar *dest;
  int32_t destCapacity[2];
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl **v185;
  int v186;
  unsigned int v187;
  unsigned __int8 *v188;
  JSC::VM *v189;
  UErrorCode pErrorCode[3];
  int8x16x2_t v191;
  int8x16x2_t v192;
  int8x16x2_t v193;

  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = (unsigned __int8 *)*((_QWORD *)a2 + 5);
  v188 = v12;
  v189 = v11;
  if (((unint64_t)v12 & 0xFFFE000000000002) != 0)
  {
    if (((unint64_t)v12 & 0xFFFFFFFFFFFFFFF7) == 2)
      return (unsigned __int8 *)JSC::throwTypeError(this, &v189);
  }
  else
  {
    v13 = v12[5];
    if (v13 == 2)
      goto LABEL_3;
    v171 = v13 - 51;
    if (((unint64_t)v12 & 0xFFFFFFFFFFFFFFF7) == 2 || v171 < 5)
      return (unsigned __int8 *)JSC::throwTypeError(this, &v189);
  }
  v12 = JSC::JSValue::toStringSlowCase(&v188, (uint64_t)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
LABEL_3:
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v14 = (int **)(v12 + 8);
  if ((v12[8] & 1) != 0)
    v14 = JSC::JSRopeString::resolveRope((unint64_t)v12, this, (uint64_t)a3, (uint64_t)a4, a9, a5, a6, a7, a8);
  if (*((_DWORD *)v11 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v11, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  if (*((_DWORD *)a2 + 8) == 1)
    v15 = 10;
  else
    v15 = *((_QWORD *)a2 + 6);
  if ((!*v14 || !(*v14)[1]) && v15 == 10)
    return v12;
  JSC::canonicalizeLocaleList((unint64_t)this, v15, (uint64_t)a3, a4, a5, a6, a7, a8, (WTF **)&v185, (__n128)a9);
  if (*((_DWORD *)v11 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v11, v18, v19, v20, v21, v22, v23, v24))
  {
    v16 = 0;
    goto LABEL_139;
  }
  v173 = this;
  if (v187)
  {
    v78 = *v185;
    if (*v185)
      *(_DWORD *)v78 += 2;
    v184 = v78;
  }
  else
  {
    JSC::defaultLocale(this, (uint64_t *)&v184);
  }
  JSC::removeUnicodeLocaleExtension((JSC *)&v184, &v183);
  v34 = v183;
  if (!v183)
    goto LABEL_91;
  *(_DWORD *)v183 += 2;
  while (1)
  {
    v35 = v34;
    v36 = *((unsigned int *)v34 + 1);
    if ((_DWORD)v36 != 2)
      break;
    v37 = *((_DWORD *)v34 + 4);
    v38 = (unsigned __int8 *)*((_QWORD *)v34 + 1);
    if ((v37 & 4) != 0)
    {
      v39 = *v38;
      v40 = v38[1];
    }
    else
    {
      v39 = *(unsigned __int16 *)v38;
      v40 = *((unsigned __int16 *)v38 + 1);
    }
    v41 = v39 | (v40 << 16);
    if (v41 > 7602283)
    {
      if (v41 == 7995489 || v41 == 7602284)
      {
LABEL_80:
        v182 = v34;
        goto LABEL_92;
      }
    }
    else if (v41 == 7077989 || v41 == 7471220)
    {
      goto LABEL_80;
    }
    v43 = 1;
    v47 = 2;
    v44 = 1;
    v45 = 2;
    if ((v37 & 4) != 0)
      goto LABEL_49;
LABEL_43:
    v32 = v44 - 1;
    v43 = *(unsigned __int16 *)&v38[2 * v44];
    if (v44 - 1 >= v45)
    {
      if ((_DWORD)v43 != 45)
      {
        if (v44)
          goto LABEL_86;
        goto LABEL_89;
      }
    }
    else if ((_DWORD)v43 != 45)
    {
      v51 = v38 - 2;
      while (v44)
      {
        v48 = v44 - 1;
        v52 = *(unsigned __int16 *)&v51[2 * v44--];
        if (v52 == 45)
          goto LABEL_52;
      }
      goto LABEL_89;
    }
    v48 = v44;
LABEL_52:
    if (v48 >= 2 && v36 > (int)v48 - 2)
    {
      if (WTF::StringImpl::at(v34, (int)v48 - 2) == 45)
        LODWORD(v48) = v48 - 2;
      LODWORD(v36) = *((_DWORD *)v34 + 1);
    }
    if (v36 <= v48)
    {
      v49 = *(_DWORD *)v34 + 2;
      *(_DWORD *)v34 = v49;
    }
    else
    {
      WTF::StringImpl::substring(v34, 0, v48, (uint64_t *)&v175);
      v34 = v175;
      v49 = *(_DWORD *)v35;
    }
    v175 = 0;
    v50 = v49 - 2;
    if (v50)
    {
      *(_DWORD *)v35 = v50;
    }
    else
    {
      WTF::StringImpl::~StringImpl(v35, v25, v26, v27, v28, v29, v30, v31);
      WTF::fastFree(v54, v55, v56, v57, v58, v59, v60, v61);
      v62 = v175;
      v175 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2)
        {
          WTF::StringImpl::~StringImpl(v62, v25, v26, v27, v28, v29, v30, v31);
          WTF::fastFree(v63, v64, v65, v66, v67, v68, v69, v70);
        }
        else
        {
          *(_DWORD *)v62 -= 2;
        }
      }
    }
    if (!v34)
      goto LABEL_91;
  }
  if (!(_DWORD)v36)
    goto LABEL_89;
  v38 = (unsigned __int8 *)*((_QWORD *)v34 + 1);
  if ((*((_BYTE *)v34 + 16) & 4) == 0)
  {
    v43 = v36 - 1;
    if ((v36 & 0x80000000) == 0)
      v44 = v36 - 1;
    else
      v44 = 0x7FFFFFFFLL;
    v45 = *((unsigned int *)v34 + 1);
    if (v44 >= v36)
      goto LABEL_86;
    goto LABEL_43;
  }
  v43 = v36 - 1;
  if ((v36 & 0x80000000) != 0)
    v43 = 0x7FFFFFFFLL;
  v47 = *((unsigned int *)v34 + 1);
  if (v43 >= v36)
    goto LABEL_86;
LABEL_49:
  v32 = v38[v43];
  if (v43 - 1 >= v47)
  {
    while (v32 != 45)
    {
      if (!v43)
        goto LABEL_89;
LABEL_86:
      __break(1u);
    }
LABEL_51:
    v48 = v43;
    goto LABEL_52;
  }
  if (v32 == 45)
    goto LABEL_51;
  v53 = v38 - 1;
  while (v43)
  {
    v48 = v43 - 1;
    v32 = v53[v43--];
    if (v32 == 45)
      goto LABEL_52;
  }
LABEL_89:
  v182 = 0;
  if (*(_DWORD *)v34 != 2)
  {
    *(_DWORD *)v34 -= 2;
    goto LABEL_91;
  }
  WTF::StringImpl::~StringImpl(v34, v25, v26, v27, v28, v29, v30, v31);
  WTF::fastFree(v154, v155, v156, v157, v158, v159, v160, v161);
  if (!v182)
  {
LABEL_91:
    v79 = WTF::fastCompactMalloc((WTF *)0x20);
    *(_QWORD *)v79 = 0x300000002;
    *(_QWORD *)(v79 + 8) = "und";
    *(_DWORD *)(v79 + 16) = 4;
    v182 = (WTF::StringImpl *)v79;
  }
LABEL_92:
  dest = 0;
  *(_QWORD *)destCapacity = 0;
  v80 = *v14;
  if (!*v14)
  {
    LODWORD(v81) = 0;
    goto LABEL_159;
  }
  v81 = v80[1];
  if ((_DWORD)v81)
  {
    if ((v81 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x198BCADA0);
    }
    v82 = (UChar *)WTF::fastMalloc((WTF *)(2 * v81));
    destCapacity[0] = v81;
    dest = v82;
    v80 = *v14;
    if (*v14)
    {
      v83 = v80[1];
      goto LABEL_97;
    }
LABEL_159:
    v84 = 0;
    v85 = 0x100000000;
  }
  else
  {
    v83 = 0;
LABEL_97:
    v84 = (WTF *)*((_QWORD *)v80 + 1);
    v85 = v83 | ((unint64_t)((v80[4] >> 2) & 1) << 32);
  }
  v175 = (WTF *)v177;
  v176 = 32;
  v178 = 0;
  v179 = 0;
  v86 = v85;
  if ((v85 & 0x100000000) != 0)
  {
    if (v85 > 0x20uLL)
    {
      if (v85 <= 0x29uLL)
        v162 = 41;
      else
        v162 = v85;
      if (v162 >> 31)
      {
        __break(0xC471u);
        JUMPOUT(0x198BCADCCLL);
      }
      v87 = (WTF *)WTF::fastMalloc((WTF *)(2 * v162));
      v175 = v87;
      v176 = __PAIR64__(v85, v162);
      if (v85 < 0x40uLL)
      {
        v88 = v87;
      }
      else
      {
        v88 = (WTF *)((char *)v87 + 2 * (v85 & 0xFFFFFFC0));
        v33 = 0uLL;
        v163 = (char *)v87;
        do
        {
          v191.val[0] = *(int8x16_t *)v84;
          v164 = *((int8x16_t *)v84 + 1);
          v192.val[0] = (int8x16_t)*((_OWORD *)v84 + 2);
          v165 = *((_OWORD *)v84 + 3);
          v84 = (WTF *)((char *)v84 + 64);
          v166 = v165;
          v192.val[1] = 0uLL;
          v193.val[0] = v164;
          v191.val[1] = 0uLL;
          v167 = v163;
          vst2q_s8(v167, v191);
          v167 += 32;
          v193.val[1] = 0uLL;
          vst2q_s8(v167, v193);
          v168 = v163 + 64;
          vst2q_s8(v168, v192);
          v169 = v163 + 96;
          vst2q_s8(v169, *(int8x16x2_t *)(&v33 - 1));
          v163 += 128;
        }
        while (v163 != (char *)v88);
      }
    }
    else
    {
      HIDWORD(v176) = v85;
      v87 = (WTF *)v177;
      v88 = (WTF *)v177;
    }
    while (v88 != (WTF *)((char *)v87 + 2 * v85))
    {
      v89 = *(unsigned __int8 *)v84;
      v84 = (WTF *)((char *)v84 + 1);
      *(_WORD *)v88 = v89;
      v88 = (WTF *)((char *)v88 + 2);
    }
    v84 = v175;
    v86 = HIDWORD(v176);
  }
  v178 = v84;
  v179 = v86;
  if (*v14)
    v90 = (*v14)[1];
  else
    v90 = 0;
  WTF::String::utf8((uint64_t *)&v182, 0, v27, v28, v29, v30, v31, &v174, *(float *)&v33);
  v91 = (_DWORD *)v174;
  if (v174)
    v92 = (const char *)(v174 + 16);
  else
    v92 = 0;
  destCapacity[1] = v81;
  pErrorCode[0] = U_ZERO_ERROR;
  v93 = dest;
  v94 = u_strToUpper(dest, v81, (const UChar *)v84, v90, v92, pErrorCode);
  v102 = pErrorCode[0];
  if (pErrorCode[0] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR)
    {
      pErrorCode[0] = U_ZERO_ERROR;
      WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>((uint64_t)&dest, v94);
      v93 = dest;
      LODWORD(v81) = destCapacity[1];
      u_strToUpper(dest, destCapacity[1], (const UChar *)v84, v90, v92, pErrorCode);
      v102 = pErrorCode[0];
    }
  }
  else
  {
    LODWORD(v81) = v94;
  }
  if (v91)
  {
    if (*v91 == 1)
      WTF::fastFree((unint64_t)v91, v95, v96, v97, v98, v99, v100, v101);
    else
      --*v91;
  }
  v103 = v175;
  if (v177 != (_BYTE *)v175 && v175)
  {
    v175 = 0;
    LODWORD(v176) = 0;
    WTF::fastFree((unint64_t)v103, v95, v96, v97, v98, v99, v100, v101);
  }
  if (v102 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v170 = u_errorName(v102);
    WTF::String::String((size_t)&v175, v170);
    v106 = JSC::throwTypeError((unint64_t)v173, &v189, &v175);
  }
  else
  {
    if (v93)
    {
      if ((_DWORD)v81)
      {
        if (v81 >= 0x7FFFFFF0)
        {
          __break(0xC471u);
          JUMPOUT(0x198BCADC4);
        }
        v104 = (int *)WTF::fastCompactMalloc((WTF *)(2 * v81 + 20));
        v105 = (UChar *)(v104 + 5);
        *v104 = 2;
        v104[1] = v81;
        *((_QWORD *)v104 + 1) = v104 + 5;
        v104[4] = 0;
        if ((_DWORD)v81 == 1)
          *v105 = *v93;
        else
          memcpy(v105, v93, 2 * v81);
      }
      else
      {
        v104 = &WTF::StringImpl::s_emptyAtomString;
        WTF::StringImpl::s_emptyAtomString += 2;
      }
    }
    else
    {
      v104 = 0;
    }
    v175 = (WTF *)v104;
    v106 = JSC::jsString((uint64_t)v11, (JSC::VM *)&v175, v96, v97, v98, v99, v100, v101);
  }
  v16 = v106;
  v107 = v175;
  v175 = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
    {
      WTF::StringImpl::~StringImpl(v107, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v111, v112, v113, v114, v115, v116, v117, v118);
    }
    else
    {
      *(_DWORD *)v107 -= 2;
    }
  }
  if (v93)
    WTF::fastFree((unint64_t)v93, v71, v72, v73, v74, v75, v76, v77);
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
    {
      WTF::StringImpl::~StringImpl(v182, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v119, v120, v121, v122, v123, v124, v125, v126);
    }
    else
    {
      *(_DWORD *)v182 -= 2;
    }
  }
  v108 = v183;
  v183 = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
    {
      WTF::StringImpl::~StringImpl(v108, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v127, v128, v129, v130, v131, v132, v133, v134);
    }
    else
    {
      *(_DWORD *)v108 -= 2;
    }
  }
  v109 = v184;
  v184 = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
    {
      WTF::StringImpl::~StringImpl(v109, v71, v72, v73, v74, v75, v76, v77);
      WTF::fastFree(v135, v136, v137, v138, v139, v140, v141, v142);
    }
    else
    {
      *(_DWORD *)v109 -= 2;
    }
  }
LABEL_139:
  if (v187)
  {
    v143 = v185;
    v144 = 8 * v187;
    do
    {
      v145 = *v143;
      *v143 = 0;
      if (v145)
      {
        if (*(_DWORD *)v145 == 2)
        {
          WTF::StringImpl::~StringImpl(v145, v71, v72, v73, v74, v75, v76, v77);
          WTF::fastFree(v146, v147, v148, v149, v150, v151, v152, v153);
        }
        else
        {
          *(_DWORD *)v145 -= 2;
        }
      }
      ++v143;
      v144 -= 8;
    }
    while (v144);
  }
  v110 = (WTF *)v185;
  if (v185)
  {
    v185 = 0;
    v186 = 0;
    WTF::fastFree((unint64_t)v110, v71, v72, v73, v74, v75, v76, v77);
  }
  return (unsigned __int8 *)v16;
}

uint64_t JSC::stringProtoFuncTrim(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  return JSC::trimString(this, *((_QWORD *)a2 + 5), (const WTF::String *)3, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::stringProtoFuncStartsWith(JSC *this, StringView a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int8x16_t a8)
{
  int *m_characters;
  uint64_t v10;
  unint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  JSC::JSRopeString *v14;
  int v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  JSC::JSRopeString *v47;
  WTF::StringImpl *v48;
  int v49;
  int v50;
  unsigned int v51;
  JSC::JSObject *v53;
  JSC::JSRopeString *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  JSC::VM *v57;
  WTF::StringImpl *v58;

  m_characters = (int *)a2.m_characters;
  v10 = *((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2.m_characters + 5);
  v56 = v11;
  v57 = (JSC::VM *)v10;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v57);
LABEL_50:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v56, this, *(const WTF::String **)&a2.m_length, a3, a4, a5, a6, a7, (int **)&v55);
    goto LABEL_8;
  }
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 != 2)
  {
    v51 = v12 - 51;
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2 || v51 < 5)
      return JSC::throwTypeError(this, &v57);
    goto LABEL_50;
  }
  v13 = *(WTF::StringImpl **)(v11 + 8);
  if ((v13 & 1) != 0)
    v13 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v11, this, *(uint64_t *)&a2.m_length, a3, a8, a4, a5, a6, a7);
  if (v13)
    *(_DWORD *)v13 += 2;
  v55 = v13;
LABEL_8:
  if (*(_DWORD *)(v10 + 80))
  {
    v42 = *(_DWORD *)(v10 + 80);
    if ((v42 & 0x27) != 0 && (v42 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7);
    if (*(_QWORD *)(v10 + 16))
      goto LABEL_62;
  }
  if (m_characters[8] == 1)
  {
    v15 = 0;
    v54 = (JSC::JSRopeString *)10;
    goto LABEL_13;
  }
  v14 = (JSC::JSRopeString *)*((_QWORD *)m_characters + 6);
  v54 = v14;
  if (((unint64_t)v14 & 0xFFFE000000000002) == 0 && *((unsigned __int8 *)v14 + 5) >= 0x17u)
  {
    v47 = v14;
    v48 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v14, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2720), a3, a4, a5, a6, a7);
    v58 = v48;
    if (*(_DWORD *)(v10 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2.m_characters, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7))
      {
        v49 = 0;
LABEL_77:
        v15 = v49;
        goto LABEL_13;
      }
      v48 = v58;
    }
    if (v48 == (WTF::StringImpl *)10)
      v49 = *((unsigned __int8 *)v47 + 5) == 59;
    else
      v49 = JSC::JSValue::toBoolean((uint64_t *)&v58, (uint64_t)this);
    goto LABEL_77;
  }
  v15 = 0;
LABEL_13:
  if (*(_DWORD *)(v10 + 80))
  {
    v43 = *(_DWORD *)(v10 + 80);
    if ((v43 & 0x27) != 0 && (v43 & 0x20) == 0)
    {
      v50 = v15;
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7);
      v15 = v50;
    }
    if (*(_QWORD *)(v10 + 16))
    {
LABEL_62:
      v22 = 0;
      goto LABEL_43;
    }
  }
  if (!v15)
  {
    if (((unint64_t)v54 & 0xFFFE000000000002) != 0 || *((_BYTE *)v54 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v54, this, *(const WTF::String **)&a2.m_length, a3, a4, a5, a6, a7, (int **)&v58);
    }
    else
    {
      v16 = (WTF::StringImpl *)*((_QWORD *)v54 + 1);
      if ((v16 & 1) != 0)
        v16 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope((unint64_t)v54, this, *(uint64_t *)&a2.m_length, a3, a8, a4, a5, a6, a7);
      if (v16)
        *(_DWORD *)v16 += 2;
      v58 = v16;
    }
    if (*(_DWORD *)(v10 + 80))
    {
      v44 = *(_DWORD *)(v10 + 80);
      if ((v44 & 0x27) != 0 && (v44 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7);
      if (*(_QWORD *)(v10 + 16))
        goto LABEL_68;
    }
    if ((unint64_t)(m_characters[8] - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v17 = 10;
    else
      v17 = *((_QWORD *)m_characters + 7);
    v53 = (JSC::JSObject *)v17;
    if (v55)
      v18 = *((_DWORD *)v55 + 1);
    else
      v18 = 0;
    if (v17 >= 0xFFFE000000000000)
    {
      v46 = v17 & ~((int)v17 >> 31);
      if (v18 >= v46)
        v18 = v46;
    }
    else
    {
      v19 = v17 - 0x2000000000000;
      if (v19 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(&v53, this, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7, a8);
      else
        v20 = *(double *)&v19;
      v21 = trunc(v20 + 0.0);
      if (v21 < 0.0)
      {
        v18 = 0;
      }
      else if (v21 <= (double)v18)
      {
        v18 = v21;
      }
      if (*(_DWORD *)(v10 + 80))
      {
        v45 = *(_DWORD *)(v10 + 80);
        if ((v45 & 0x27) != 0 && (v45 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7);
        if (*(_QWORD *)(v10 + 16))
        {
LABEL_68:
          v22 = 0;
LABEL_40:
          v23 = v58;
          v58 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
            {
              WTF::StringImpl::~StringImpl(v23, (WTF::AtomStringImpl *)a2.m_characters, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7);
              WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
            }
            else
            {
              *(_DWORD *)v23 -= 2;
            }
          }
          goto LABEL_43;
        }
      }
    }
    if (v58)
    {
      v22 = 6;
      if (v55)
      {
        a2.m_characters = (void *)*((_QWORD *)v58 + 1);
        if (a2.m_characters)
        {
          a2.m_length = *((_DWORD *)v58 + 1);
          *(_DWORD *)&a2.m_is8Bit = (*((_DWORD *)v58 + 4) >> 2) & 1;
          if (WTF::StringImpl::hasInfixStartingAt(v55, a2, v18))
            v22 = 7;
          else
            v22 = 6;
        }
      }
    }
    else
    {
      v22 = 6;
    }
    goto LABEL_40;
  }
  v22 = JSC::throwTypeError((unint64_t)this, &v57, (uint64_t)"Argument to String.prototype.startsWith cannot be a RegExp", 59);
LABEL_43:
  v24 = v55;
  v55 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
    {
      WTF::StringImpl::~StringImpl(v24, (WTF::AtomStringImpl *)a2.m_characters, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7);
      WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)v24 -= 2;
    }
  }
  return v22;
}

uint64_t JSC::stringProtoFuncEndsWith(JSC *this, StringView a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, int8x16_t a8)
{
  int *m_characters;
  uint64_t v10;
  unint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  double v40;
  WTF::StringImpl *v41;
  unsigned int v42;
  JSC::JSObject *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  unint64_t v47;
  JSC::VM *v48;
  WTF::StringImpl *v49;

  m_characters = (int *)a2.m_characters;
  v10 = *((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2.m_characters + 5);
  v47 = v11;
  v48 = (JSC::VM *)v10;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v48);
LABEL_44:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v47, this, *(const WTF::String **)&a2.m_length, a3, a4, a5, a6, a7, (int **)&v46);
    goto LABEL_8;
  }
  v12 = *(unsigned __int8 *)(v11 + 5);
  if (v12 != 2)
  {
    v42 = v12 - 51;
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2 || v42 < 5)
      return JSC::throwTypeError(this, &v48);
    goto LABEL_44;
  }
  v13 = *(WTF::StringImpl **)(v11 + 8);
  if ((v13 & 1) != 0)
    v13 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v11, this, *(uint64_t *)&a2.m_length, a3, a8, a4, a5, a6, a7);
  if (v13)
    *(_DWORD *)v13 += 2;
  v46 = v13;
LABEL_8:
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2.m_characters, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7))
  {
    goto LABEL_53;
  }
  if (m_characters[8] == 1)
  {
    v15 = 0;
    v14 = 10;
    v45 = 10;
    goto LABEL_13;
  }
  v14 = *((_QWORD *)m_characters + 6);
  v45 = v14;
  if ((v14 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v14 + 5) < 0x17u)
    goto LABEL_12;
  v41 = (WTF::StringImpl *)JSC::JSObject::get((unsigned int *)v14, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v10 + 41952) + 2720), a3, a4, a5, a6, a7);
  v49 = v41;
  if (*(_DWORD *)(v10 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2.m_characters, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7))
    {
LABEL_12:
      v15 = 0;
      goto LABEL_13;
    }
    v41 = v49;
  }
  if (v41 == (WTF::StringImpl *)10)
    v15 = *(unsigned __int8 *)(v14 + 5) == 59;
  else
    v15 = JSC::JSValue::toBoolean((uint64_t *)&v49, (uint64_t)this);
LABEL_13:
  if (*(_DWORD *)(v10 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2.m_characters, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7))
  {
LABEL_53:
    v19 = 0;
    goto LABEL_37;
  }
  if (!v15)
  {
    if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v45, this, *(const WTF::String **)&a2.m_length, a3, a4, a5, a6, a7, (int **)&v49);
    }
    else
    {
      v16 = *(WTF::StringImpl **)(v14 + 8);
      if ((v16 & 1) != 0)
        v16 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v14, this, *(uint64_t *)&a2.m_length, a3, a8, a4, a5, a6, a7);
      if (v16)
        *(_DWORD *)v16 += 2;
      v49 = v16;
    }
    if (*(_DWORD *)(v10 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2.m_characters, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7))
    {
      goto LABEL_55;
    }
    if ((unint64_t)(m_characters[8] - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v17 = 10;
    else
      v17 = *((_QWORD *)m_characters + 7);
    v44 = (JSC::JSObject *)v17;
    if (v46)
      v18 = *((_DWORD *)v46 + 1);
    else
      v18 = 0;
    if (v17 != 10)
    {
      if (v17 < 0xFFFE000000000000)
      {
        v40 = JSC::JSValue::toIntegerOrInfinity(&v44, this, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7, a8);
        if (v40 < 0.0)
        {
          v18 = 0;
        }
        else if (v40 <= (double)v18)
        {
          v18 = v40;
        }
        if (*(_DWORD *)(v10 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10, (uint64_t)a2.m_characters, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7))
        {
LABEL_55:
          v19 = 0;
LABEL_34:
          v20 = v49;
          v49 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
            {
              WTF::StringImpl::~StringImpl(v20, (WTF::AtomStringImpl *)a2.m_characters, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7);
              WTF::fastFree(v31, v32, v33, v34, v35, v36, v37, v38);
            }
            else
            {
              *(_DWORD *)v20 -= 2;
            }
          }
          goto LABEL_37;
        }
      }
      else
      {
        v39 = v17 & ~((int)v17 >> 31);
        if (v18 >= v39)
          v18 = v39;
      }
    }
    if (v49)
    {
      v19 = 6;
      if (v46)
      {
        a2.m_characters = (void *)*((_QWORD *)v49 + 1);
        if (a2.m_characters)
        {
          a2.m_length = *((_DWORD *)v49 + 1);
          *(_DWORD *)&a2.m_is8Bit = (*((_DWORD *)v49 + 4) >> 2) & 1;
          if (WTF::StringImpl::hasInfixEndingAt(v46, a2, v18))
            v19 = 7;
          else
            v19 = 6;
        }
      }
    }
    else
    {
      v19 = 6;
    }
    goto LABEL_34;
  }
  v19 = JSC::throwTypeError((unint64_t)this, &v48, (uint64_t)"Argument to String.prototype.endsWith cannot be a RegExp", 57);
LABEL_37:
  v21 = v46;
  v46 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
    {
      WTF::StringImpl::~StringImpl(v21, (WTF::AtomStringImpl *)a2.m_characters, *(uint64_t *)&a2.m_length, a3, a4, a5, a6, a7);
      WTF::fastFree(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      *(_DWORD *)v21 -= 2;
    }
  }
  return v19;
}

uint64_t JSC::stringProtoFuncIncludes(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, double a11)
{
  uint64_t v13;
  unint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  int v18;
  int *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  unsigned int v60;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  unint64_t v66;
  JSC::VM *v67;
  int *v68;

  v13 = *((_QWORD *)this + 7);
  v14 = *((_QWORD *)a2 + 5);
  v66 = v14;
  v67 = (JSC::VM *)v13;
  if ((v14 & 0xFFFE000000000002) != 0)
  {
    if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v67);
LABEL_45:
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v66, this, a3, a4, a5, a6, a7, a8, (int **)&v65);
    goto LABEL_8;
  }
  v15 = *(unsigned __int8 *)(v14 + 5);
  if (v15 != 2)
  {
    v60 = v15 - 51;
    if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2 || v60 < 5)
      return JSC::throwTypeError(this, &v67);
    goto LABEL_45;
  }
  v16 = *(WTF::StringImpl **)(v14 + 8);
  if ((v16 & 1) != 0)
    v16 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v14, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (v16)
    *(_DWORD *)v16 += 2;
  v65 = v16;
LABEL_8:
  if (*(_DWORD *)(v13 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    goto LABEL_52;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18 = 0;
    v17 = 10;
    v64 = 10;
    goto LABEL_13;
  }
  v17 = *((_QWORD *)a2 + 6);
  v64 = v17;
  if ((v17 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v17 + 5) < 0x17u)
    goto LABEL_12;
  v59 = (int *)JSC::JSObject::get((unsigned int *)v17, (uint64_t)this, *(_QWORD *)(*(_QWORD *)(v13 + 41952) + 2720), a4, a5, a6, a7, a8);
  v68 = v59;
  if (*(_DWORD *)(v13 + 80))
  {
    if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
LABEL_12:
      v18 = 0;
      goto LABEL_13;
    }
    v59 = v68;
  }
  if (v59 == (int *)10)
    v18 = *(unsigned __int8 *)(v17 + 5) == 59;
  else
    v18 = JSC::JSValue::toBoolean((uint64_t *)&v68, (uint64_t)this);
LABEL_13:
  if (!*(_DWORD *)(v13 + 80)
    || !JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    if (v18)
    {
      v23 = JSC::throwTypeError((unint64_t)this, &v67, (uint64_t)"Argument to String.prototype.includes cannot be a RegExp", 57);
    }
    else
    {
      if ((v17 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v17 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v64, this, a3, a4, a5, a6, a7, a8, &v68);
      }
      else
      {
        v19 = *(int **)(v17 + 8);
        if ((v19 & 1) != 0)
          v19 = *JSC::JSRopeString::resolveRope(v17, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (v19)
          *v19 += 2;
        v68 = v19;
      }
      if (*(_DWORD *)(v13 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v13, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        v23 = 0;
      }
      else
      {
        if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
          v20 = 10;
        else
          v20 = *((_QWORD *)a2 + 7);
        v21 = v65;
        if (v65)
          *(_DWORD *)v65 += 2;
        v63 = v21;
        v22 = (WTF::StringImpl *)v68;
        if (v68)
        {
          *v68 += 2;
          v62 = v22;
          v23 = JSC::stringIncludesImpl(this, v13, (uint64_t)&v63, (uint64_t *)&v62, v20, a6, a7, a8, a9, a10, a11);
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::~StringImpl(v22, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v43, v44, v45, v46, v47, v48, v49, v50);
          }
          else
          {
            *(_DWORD *)v22 -= 2;
          }
        }
        else
        {
          v62 = 0;
          v23 = JSC::stringIncludesImpl(this, v13, (uint64_t)&v63, (uint64_t *)&v62, v20, a6, a7, a8, a9, a10, a11);
        }
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::~StringImpl(v21, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v51, v52, v53, v54, v55, v56, v57, v58);
          }
          else
          {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
      v24 = (WTF::StringImpl *)v68;
      v68 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
        {
          WTF::StringImpl::~StringImpl(v24, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v35, v36, v37, v38, v39, v40, v41, v42);
        }
        else
        {
          *(_DWORD *)v24 -= 2;
        }
      }
    }
    goto LABEL_36;
  }
LABEL_52:
  v23 = 0;
LABEL_36:
  v25 = v65;
  v65 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::~StringImpl(v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v27, v28, v29, v30, v31, v32, v33, v34);
    }
    else
    {
      *(_DWORD *)v25 -= 2;
    }
  }
  return v23;
}

JSC::Exception *JSC::stringProtoFuncNormalize(uint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  int *v16;
  JSC::Exception *v17;
  int v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  unint64_t v29;
  int8x16_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  __int16 v53;
  WTF::AtomStringImpl *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  JSC::JSGlobalObject *v62;
  unsigned int v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF *v72;
  uint64_t v75;
  unint64_t v76;
  JSC::Heap **v77;
  unint64_t v78;
  double v79;
  WTF::StringImpl *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  char *v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  char *v103;
  char *v104;
  char *v105;
  int v106;
  int v107;
  int v108;
  uint64_t (*v109)(WTF **);
  WTF **v110;
  unint64_t OutOfMemoryError;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  double v117;
  JSC::Exception *v118;
  unsigned int v119;
  unsigned int v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  unsigned __int8 *v124;
  JSC::VM *v125;
  WTF *v126;
  unint64_t v127;
  _QWORD v128[8];
  int8x16_t *v129;
  uint64_t v130;
  int *v131[2];
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x2_t v134;

  v11 = *(_QWORD *)(this + 56);
  v12 = *((_QWORD *)a2 + 5);
  v124 = (unsigned __int8 *)v12;
  v125 = (JSC::VM *)v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
      return (JSC::Exception *)JSC::throwTypeError((JSC::JSGlobalObject *)this, &v125);
  }
  else
  {
    v13 = *(unsigned __int8 *)(v12 + 5);
    if (v13 == 2)
      goto LABEL_3;
    v119 = v13 - 51;
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2 || v119 < 5)
      return (JSC::Exception *)JSC::throwTypeError((JSC::JSGlobalObject *)this, &v125);
  }
  v12 = (unint64_t)JSC::JSValue::toStringSlowCase(&v124, this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_3:
  if (*(_DWORD *)(v11 + 80))
  {
    v106 = *(_DWORD *)(v11 + 80);
    if ((v106 & 0x27) != 0 && (v106 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v14 = *((_QWORD *)a2 + 6);
    v123 = v14;
    if (v14 == 10)
    {
      v15 = 0;
      goto LABEL_31;
    }
    if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v123, (JSC::JSGlobalObject *)this, a3, a4, a5, a6, a7, a8, v131);
      goto LABEL_13;
    }
    v16 = *(int **)(v14 + 8);
    if ((v16 & 1) != 0)
    {
      v16 = *JSC::JSRopeString::resolveRope(v14, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (!v16)
        goto LABEL_12;
    }
    else if (!v16)
    {
LABEL_12:
      v131[0] = v16;
LABEL_13:
      if (*(_DWORD *)(v11 + 80))
      {
        v108 = *(_DWORD *)(v11 + 80);
        if ((v108 & 0x27) != 0 && (v108 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v11 + 16))
        {
          v15 = 0;
          v18 = 0;
          v17 = 0;
          goto LABEL_19;
        }
      }
      if (WTF::equalInternal<unsigned char>((uint64_t)v131[0], (unint64_t)"NFC", 3))
      {
        v15 = 0;
        v17 = 0;
      }
      else
      {
        if (!WTF::equalInternal<unsigned char>((uint64_t)v131[0], (unint64_t)"NFD", 3))
        {
          if (WTF::equalInternal<unsigned char>((uint64_t)v131[0], (unint64_t)"NFKC", 4))
          {
            v17 = 0;
            v18 = 1;
            v15 = 2;
          }
          else
          {
            if (!WTF::equalInternal<unsigned char>((uint64_t)v131[0], (unint64_t)"NFKD", 4))
            {
              v75 = WTF::fastCompactMalloc((WTF *)0x20);
              *(_QWORD *)v75 = 0x2E00000002;
              *(_QWORD *)(v75 + 8) = "argument does not match any normalization form";
              *(_DWORD *)(v75 + 16) = 4;
              v122 = (WTF::StringImpl *)v75;
              v76 = *(_QWORD *)(this + 128);
              v77 = *(JSC::Heap ***)(this + 56);
              if ((v76 & 1) != 0)
              {
                v109 = *(uint64_t (**)(WTF **))(v76 & 0xFFFFFFFFFFFFFFFCLL);
                if ((this & 8) != 0)
                  v110 = (WTF **)(this - 16);
                else
                  v110 = (WTF **)(this & 0xFFFFFFFFFFFFC000 | 8);
                v126 = *v110;
                v127 = this;
                v128[0] = this + 128;
                v76 = v109(&v126);
              }
              v78 = JSC::ErrorInstance::create(v77, v76, &v122, 0, 0, 0, 2, 1);
              a3 = (JSC::CallFrame *)v78;
              if ((v78 & 0xFFFE000000000002) == 0
                && &JSC::Exception::s_info == (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v78 & 0xFFFFFFFE) + 0x4C)))
              {
                goto LABEL_98;
              }
              goto LABEL_125;
            }
            v17 = 0;
            v18 = 1;
            v15 = 3;
          }
          goto LABEL_19;
        }
        v17 = 0;
        v15 = 1;
      }
      v18 = 1;
      goto LABEL_19;
    }
    *v16 += 2;
    goto LABEL_12;
  }
  v15 = 0;
  v123 = 10;
  while (1)
  {
LABEL_31:
    v11 = *(_QWORD *)(this + 56);
    v28 = *(int **)(v12 + 8);
    if ((v28 & 1) == 0)
    {
      if (v28)
      {
LABEL_33:
        v29 = v28[4];
        v30 = (int8x16_t *)*((_QWORD *)v28 + 1);
        LODWORD(v28) = v28[1];
        v31 = (v29 >> 2) & 1;
LABEL_34:
        v32 = v28 | (unint64_t)(v31 << 32);
        goto LABEL_35;
      }
LABEL_94:
      v30 = 0;
      v31 = 1;
      goto LABEL_34;
    }
    if ((v28 & 2) == 0)
    {
      v28 = *JSC::JSRopeString::resolveRope(v12, (JSC::JSGlobalObject *)this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (v28)
        goto LABEL_33;
      goto LABEL_94;
    }
    v42 = *(_QWORD *)((*(_QWORD *)(v12 + 20) & 0xFFFFFFFFFLL) + 8);
    if (!v42
      || (v43 = *(unsigned int *)(v42 + 4),
          v44 = *(_QWORD *)(v12 + 24),
          v45 = v44 >> 16,
          v43 <= (v44 >> 16)))
    {
      v30 = (int8x16_t *)"";
      v32 = 0x100000000;
      goto LABEL_35;
    }
    v46 = *(unsigned int *)(v42 + 16);
    v30 = *(int8x16_t **)(v42 + 8);
    v47 = *(_DWORD *)(v12 + 16);
    if ((int)v43 - (int)v45 <= v47)
    {
      v47 = v43 - v45;
      if (!(_DWORD)v45)
      {
        v32 = v43 & 0xFFFFFFFEFFFFFFFFLL | (((v46 >> 2) & 1) << 32);
        goto LABEL_35;
      }
    }
    v48 = (v44 >> 16);
    v32 = v47;
    v49 = v43 - v45;
    if (((v46 >> 2) & 1) != 0)
      break;
    if (v49 >= v47)
    {
      v30 = (int8x16_t *)((char *)v30 + 2 * v48);
      goto LABEL_35;
    }
LABEL_124:
    __break(1u);
LABEL_125:
    a3 = (JSC::CallFrame *)JSC::Exception::create(v11, a3, 0, a4, a5, a6, a7, a8);
LABEL_98:
    v17 = JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, a3, v79, a4, a5, a6, a7, a8);
    v80 = v122;
    v122 = 0;
    if (v80)
    {
      if (*(_DWORD *)v80 == 2)
      {
        WTF::StringImpl::~StringImpl(v80, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v89, v90, v91, v92, v93, v94, v95, v96);
      }
      else
      {
        *(_DWORD *)v80 -= 2;
      }
    }
    v15 = 0;
    v18 = 0;
LABEL_19:
    v19 = (WTF::StringImpl *)v131[0];
    v131[0] = 0;
    if (!v19)
      goto LABEL_22;
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::~StringImpl(v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v20, v21, v22, v23, v24, v25, v26, v27);
      if (!v18)
        return v17;
    }
    else
    {
      *(_DWORD *)v19 -= 2;
LABEL_22:
      if (!v18)
        return v17;
    }
  }
  if (v49 < v47)
    goto LABEL_124;
  v30 = (int8x16_t *)((char *)v30 + v48);
  v32 = v47 | 0x100000000;
LABEL_35:
  if (*(_DWORD *)(v11 + 80))
  {
    v107 = *(_DWORD *)(v11 + 80);
    if ((v107 & 0x27) != 0 && (v107 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  if ((v32 & 0x100000000) == 0)
  {
    LODWORD(v126) = 0;
    switch(v15)
    {
      case 0:
        unorm2_getNFCInstance();
        break;
      case 1:
        unorm2_getNFDInstance();
        break;
      case 2:
        unorm2_getNFKCInstance();
        break;
      case 3:
        unorm2_getNFKDInstance();
        break;
      default:
        break;
    }
    v50 = v32;
    v126 = (WTF *)v128;
    v127 = 32;
LABEL_76:
    v129 = v30;
    v130 = v50;
    LODWORD(v122) = 0;
    if (unorm2_isNormalized())
      goto LABEL_84;
    v61 = unorm2_normalize();
    v63 = v61;
    if (v61)
    {
      if (v61 > 0x7FFFFFEF || (WTF::tryFastCompactMalloc((WTF *)(2 * (int)v61 + 20), v131), (v64 = v131[0]) == 0))
      {
        OutOfMemoryError = JSC::createOutOfMemoryError(this, v62);
        v118 = (JSC::Exception *)OutOfMemoryError;
        if ((OutOfMemoryError & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16
                                                * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                  + 0x4C)))
        {
          v118 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)OutOfMemoryError, 0, v112, v113, v114, v115, v116);
        }
        v12 = (unint64_t)JSC::VM::throwException((JSC::VM *)v11, (JSC::JSGlobalObject *)this, v118, v117, v112, v113, v114, v115, v116);
        goto LABEL_84;
      }
      *v131[0] = 2;
      v64[1] = v63;
      *((_QWORD *)v64 + 1) = v64 + 5;
      v64[4] = 0;
    }
    else
    {
      v64 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    LODWORD(v122) = 0;
    unorm2_normalize();
    v131[0] = v64;
    v12 = JSC::jsString(v11, (JSC::VM *)v131, v65, v66, v67, v68, v69, v70);
    v71 = (WTF::StringImpl *)v131[0];
    v131[0] = 0;
    if (v71)
    {
      if (*(_DWORD *)v71 == 2)
      {
        WTF::StringImpl::~StringImpl(v71, v54, v55, v56, v57, v58, v59, v60);
        WTF::fastFree(v81, v82, v83, v84, v85, v86, v87, v88);
      }
      else
      {
        *(_DWORD *)v71 -= 2;
      }
    }
LABEL_84:
    v72 = v126;
    if (v128 != (_QWORD *)v126 && v126 != 0)
    {
      v126 = 0;
      LODWORD(v127) = 0;
      WTF::fastFree((unint64_t)v72, v54, v55, v56, v57, v58, v59, v60);
    }
    return (JSC::Exception *)v12;
  }
  if (v15)
  {
    v33 = 0;
    v34 = &v30->u8[v32];
    v35 = (unsigned __int8 *)v30;
    if ((v30 & 7) != 0 && (_DWORD)v32)
    {
      v33 = 0;
      v36 = v32 - 1;
      v37 = (_BYTE)v30 + 1;
      v35 = (unsigned __int8 *)v30;
      do
      {
        v38 = *v35++;
        v33 |= v38;
        if ((v37 & 7) == 0)
          break;
        v39 = v36--;
        ++v37;
      }
      while (v39);
    }
    while ((unint64_t)v35 < ((unint64_t)v34 & 0xFFFFFFFFFFFFFFF8))
    {
      v40 = *(_QWORD *)v35;
      v35 += 8;
      v33 |= v40;
    }
    while (v35 != v34)
    {
      v41 = *v35++;
      v33 |= v41;
    }
    if ((v33 & 0x8080808080808080) != 0)
    {
      LODWORD(v126) = 0;
      if (v15 == 3)
      {
        unorm2_getNFKDInstance();
      }
      else if (v15 == 2)
      {
        unorm2_getNFKCInstance();
      }
      else
      {
        unorm2_getNFDInstance();
      }
      v126 = (WTF *)v128;
      v127 = 32;
      v129 = 0;
      v130 = 0;
      if (v32 > 0x20uLL)
      {
        if (v32 <= 0x29uLL)
          v97 = 41;
        else
          v97 = v32;
        if (v97 >> 31)
        {
          __break(0xC471u);
          JUMPOUT(0x198BCC1B4);
        }
        v121 = v97;
        v51 = (WTF *)WTF::fastMalloc((WTF *)(2 * v97));
        v126 = v51;
        v127 = __PAIR64__(v32, v121);
        if (v32 < 0x40uLL)
        {
          v52 = v51;
        }
        else
        {
          v52 = (WTF *)((char *)v51 + 2 * (v32 & 0xFFFFFFC0));
          v98 = 0uLL;
          v99 = (char *)v51;
          do
          {
            v132.val[0] = *v30;
            v100 = v30[1];
            v133.val[0] = v30[2];
            v101 = v30[3];
            v30 += 4;
            v102 = v101;
            v133.val[1] = 0uLL;
            v134.val[0] = v100;
            v132.val[1] = 0uLL;
            v103 = v99;
            vst2q_s8(v103, v132);
            v103 += 32;
            v134.val[1] = 0uLL;
            vst2q_s8(v103, v134);
            v104 = v99 + 64;
            vst2q_s8(v104, v133);
            v105 = v99 + 96;
            vst2q_s8(v105, *(int8x16x2_t *)(&v98 - 1));
            v99 += 128;
          }
          while (v99 != (char *)v52);
        }
      }
      else
      {
        HIDWORD(v127) = v32;
        v51 = (WTF *)v128;
        v52 = (WTF *)v128;
      }
      while (v52 != (WTF *)((char *)v51 + 2 * v32))
      {
        v53 = v30->u8[0];
        v30 = (int8x16_t *)((char *)v30 + 1);
        *(_WORD *)v52 = v53;
        v52 = (WTF *)((char *)v52 + 2);
      }
      v30 = (int8x16_t *)v126;
      v50 = HIDWORD(v127);
      goto LABEL_76;
    }
  }
  return (JSC::Exception *)v12;
}

uint64_t JSC::stringProtoFuncTrimStart(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  return JSC::trimString(this, *((_QWORD *)a2 + 5), (const WTF::String *)1, a4, a5, a6, a7, a8, a9);
}

uint64_t JSC::stringProtoFuncTrimEnd(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  return JSC::trimString(this, *((_QWORD *)a2 + 5), (const WTF::String *)2, a4, a5, a6, a7, a8, a9);
}

unint64_t JSC::stringProtoFuncIterator(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, JSC::JSString *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  int v11;
  int v12;
  JSC::VM *v13;
  unsigned int v15;
  unsigned __int8 *v17;
  JSC::VM *v18;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  v17 = (unsigned __int8 *)v10;
  v18 = v9;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    if ((v10 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v18);
LABEL_9:
    v10 = (uint64_t)JSC::JSValue::toStringSlowCase(&v17, (uint64_t)this, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_3;
  }
  v11 = *(unsigned __int8 *)(v10 + 5);
  if (v11 != 2)
  {
    v15 = v11 - 51;
    if ((v10 & 0xFFFFFFFFFFFFFFF7) == 2 || v15 < 5)
      return JSC::throwTypeError(this, &v18);
    goto LABEL_9;
  }
LABEL_3:
  if (*((_DWORD *)v9 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    return 0;
  }
  v12 = *((_DWORD *)this + 297);
  if (v12)
    v13 = (JSC::VM *)(16 * (v12 & 0xFFFFFFFE));
  else
    v13 = 0;
  return JSC::JSStringIterator::create(v9, v13, v10, a4, a5, a6, a7, a8);
}

uint64_t JSC::stringProtoFuncIsWellFormed(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  int *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  WTF::StringImpl *v32;
  unint64_t v33;
  JSC::VM *v34;

  v9 = *((_QWORD *)this + 7);
  v10 = *((_QWORD *)a2 + 5);
  v33 = v10;
  v34 = (JSC::VM *)v9;
  if ((v10 & 0xFFFE000000000002) != 0)
  {
    if ((v10 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v34);
  }
  else
  {
    v11 = *(unsigned __int8 *)(v10 + 5);
    if (v11 == 2)
    {
      v12 = *(int **)(v10 + 8);
      if ((v12 & 1) != 0)
      {
        if ((v12 & 4) != 0)
          return 7;
        v12 = *JSC::JSRopeString::resolveRope(v10, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
        if (!v12)
          goto LABEL_9;
      }
      else if ((v12[4] & 4) != 0)
      {
        return 7;
      }
      *v12 += 2;
LABEL_9:
      v32 = (WTF::StringImpl *)v12;
      goto LABEL_12;
    }
    v30 = v11 - 51;
    if ((v10 & 0xFFFFFFFFFFFFFFF7) == 2 || v30 < 5)
      return JSC::throwTypeError(this, &v34);
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v33, this, a3, a4, a5, a6, a7, a8, (int **)&v32);
LABEL_12:
  if (*(_DWORD *)(v9 + 80))
  {
LABEL_34:
    v29 = *(_DWORD *)(v9 + 80);
    if ((v29 & 0x27) != 0 && (v29 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v9 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    v13 = v32;
    if (*(_QWORD *)(v9 + 16))
    {
      v18 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    v13 = v32;
  }
  if (!v13)
    return 7;
  if ((*((_BYTE *)v13 + 16) & 4) == 0)
  {
    v14 = *((_DWORD *)v13 + 1);
    if (v14)
    {
      v15 = 0;
      LODWORD(v16) = 0;
      v17 = *((_QWORD *)v13 + 1);
      v18 = 6;
      do
      {
        v19 = *(_WORD *)(v17 + 2 * v15);
        if ((v19 & 0xF800) == 0xD800)
        {
          if ((v19 & 0x400) != 0)
            goto LABEL_26;
          v16 = (v16 + 1);
          if (v14 == (_DWORD)v16)
            goto LABEL_26;
          if (v14 <= v16)
          {
            __break(1u);
            goto LABEL_34;
          }
          if ((*(_WORD *)(v17 + 2 * v16) & 0xFC00) != 0xDC00)
            goto LABEL_26;
        }
        v15 = (v16 + 1);
        LODWORD(v16) = v15;
      }
      while (v14 > v15);
      v18 = 7;
LABEL_26:
      v32 = 0;
      if (!v13)
        return v18;
      goto LABEL_30;
    }
  }
  v32 = 0;
  v18 = 7;
LABEL_30:
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::~StringImpl(v13, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v21, v22, v23, v24, v25, v26, v27, v28);
  }
  else
  {
    *(_DWORD *)v13 -= 2;
  }
  return v18;
}

unsigned __int8 *JSC::stringProtoFuncToWellFormed(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int **v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  __int16 v21;
  uint64_t v22;
  WTF *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  WTF::StringImpl **v32;
  _WORD *v33;
  WTF *v34;
  uint64_t v35;
  _WORD *v36;
  _WORD *v37;
  WTF *v38;
  uint64_t v39;
  _WORD *v40;
  WTF::AtomStringImpl *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  WTF *v61;
  WTF *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  WTF::StringImpl *v74;
  __int16 v75;
  WTF *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  JSC::VM *v79;

  v9 = this;
  v10 = *((_QWORD *)this + 7);
  v11 = *((_QWORD *)a2 + 5);
  v78 = (unsigned __int8 *)v11;
  v79 = (JSC::VM *)v10;
  if ((v11 & 0xFFFE000000000002) != 0)
  {
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2)
      return (unsigned __int8 *)JSC::throwTypeError(this, &v79);
  }
  else
  {
    v12 = *(unsigned __int8 *)(v11 + 5);
    if (v12 == 2)
    {
      v13 = *(_QWORD *)(v11 + 8);
      if ((v13 & 1) == 0)
        LOBYTE(v13) = *(_BYTE *)(v13 + 16);
      v14 = (unsigned __int8 *)v11;
      if ((v13 & 4) != 0)
        return (unsigned __int8 *)v11;
      goto LABEL_9;
    }
    v72 = v12 - 51;
    if ((v11 & 0xFFFFFFFFFFFFFFF7) == 2 || v72 < 5)
      return (unsigned __int8 *)JSC::throwTypeError(this, &v79);
  }
  v14 = JSC::JSValue::toStringSlowCase(&v78, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
LABEL_9:
  if (*(_DWORD *)(v10 + 80))
    goto LABEL_88;
  while (2)
  {
    v16 = (int **)(v14 + 8);
    v15 = *((_QWORD *)v14 + 1);
    if ((v15 & 1) != 0)
    {
      if ((v15 & 4) != 0)
        return v14;
      v16 = JSC::JSRopeString::resolveRope((unint64_t)v14, v9, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    }
    else if ((*(_BYTE *)(v15 + 16) & 4) != 0)
    {
      return v14;
    }
    if (*(_DWORD *)(v10 + 80))
    {
      v71 = *(_DWORD *)(v10 + 80);
      if ((v71 & 0x27) != 0 && (v71 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        return 0;
    }
    v17 = *v16;
    if (!*v16)
      return v14;
    if ((v17[4] & 4) != 0)
      return v14;
    v18 = v17[1];
    if (!(_DWORD)v18)
      return v14;
    v19 = 0;
    v20 = 0;
    v9 = (JSC::JSGlobalObject *)*((_QWORD *)v17 + 1);
    while (1)
    {
      v21 = *((_WORD *)v9 + v19);
      if ((v21 & 0xF800) == 0xD800)
        break;
      LODWORD(v22) = v20;
LABEL_27:
      v19 = (v22 + 1);
      v20 = v19;
      if (v18 <= v19)
        return v14;
    }
    if ((v21 & 0x400) == 0)
    {
      v22 = v20 + 1;
      if ((_DWORD)v18 != (_DWORD)v22)
      {
        if (v18 <= v22)
          goto LABEL_87;
        if ((*((_WORD *)v9 + v22) & 0xFC00) == 0xDC00)
          goto LABEL_27;
      }
    }
    v77 = 0;
    if ((v18 & 0x80000000) != 0)
      goto LABEL_105;
    v24 = (WTF *)WTF::fastMalloc((WTF *)(2 * v18));
    LODWORD(v77) = v18;
    v76 = v24;
    if (v18 < v20)
      goto LABEL_87;
    if (!v20)
      goto LABEL_37;
    v25 = HIDWORD(v77);
    v26 = HIDWORD(v77) + (unint64_t)v20;
    if (v26 <= v18)
      break;
    v58 = v18 + (v18 >> 2);
    if (v58 >= 0x10)
      v59 = v58 + 1;
    else
      v59 = 16;
    if (v59 <= v26)
      v60 = HIDWORD(v77) + (unint64_t)v20;
    else
      v60 = v59;
    if (v60 >> 31)
    {
LABEL_105:
      __break(0xC471u);
      JUMPOUT(0x198BCC9B0);
    }
    v61 = v24;
    v62 = (WTF *)WTF::fastMalloc((WTF *)(2 * v60));
    LODWORD(v77) = v60;
    v76 = v62;
    memcpy(v62, v61, 2 * v25);
    if (v76 == v61)
    {
      v76 = 0;
      LODWORD(v77) = 0;
    }
    WTF::fastFree((unint64_t)v61, v63, v64, v65, v66, v67, v68, v69);
    v25 = HIDWORD(v77);
    if (v26 < HIDWORD(v77))
    {
      __break(0xC471u);
LABEL_87:
      __break(1u);
LABEL_88:
      v70 = *(_DWORD *)(v10 + 80);
      if ((v70 & 0x27) != 0 && (v70 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v10 + 16))
        return 0;
      continue;
    }
    break;
  }
  memcpy((char *)v76 + 2 * v25, v9, 2 * v20);
  HIDWORD(v77) = v26;
LABEL_37:
  if (v18 > v20)
  {
    while (2)
    {
      LOWORD(v74) = *((_WORD *)v9 + v20);
      if (((unsigned __int16)v74 & 0xF800) == 0xD800)
      {
        if (((unsigned __int16)v74 & 0x400) == 0)
        {
          v27 = v20 + 1;
          if ((_DWORD)v18 != (_DWORD)v27)
          {
            v75 = 0;
            if (v18 <= v27)
              goto LABEL_87;
            v75 = *((_WORD *)v9 + v27);
            if ((v75 & 0xF800) == 0xD800)
            {
              v29 = v77;
              v28 = HIDWORD(v77);
              if ((v75 & 0x400) != 0)
              {
                if (HIDWORD(v77) == (_DWORD)v77)
                {
                  v36 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, HIDWORD(v77) + 1, (unint64_t)&v74);
                  LODWORD(v27) = v20 + 1;
                  v28 = HIDWORD(v77);
                  v34 = v76;
                  *((_WORD *)v76 + HIDWORD(v77)) = *v36;
                  v29 = v77;
                }
                else
                {
                  v34 = v76;
                  *((_WORD *)v76 + HIDWORD(v77)) = (_WORD)v74;
                }
                v35 = (v28 + 1);
                HIDWORD(v77) = v35;
                if ((_DWORD)v35 == v29)
                {
                  v20 = v27;
                  v37 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, v35 + 1, (unint64_t)&v75);
                  v31 = HIDWORD(v77) + 1;
                  *((_WORD *)v76 + HIDWORD(v77)) = *v37;
                }
                else
                {
                  v31 = v28 + 2;
                  *((_WORD *)v34 + v35) = v75;
                  v20 = v27;
                }
              }
              else
              {
                if (HIDWORD(v77) == (_DWORD)v77)
                {
                  v30 = HIDWORD(v77) + 1;
                  goto LABEL_50;
                }
                v31 = HIDWORD(v77) + 1;
                *((_WORD *)v76 + HIDWORD(v77)) = -3;
              }
LABEL_53:
              HIDWORD(v77) = v31;
              if (v18 <= ++v20)
                goto LABEL_64;
              continue;
            }
          }
        }
        if (HIDWORD(v77) != (_DWORD)v77)
        {
          v31 = HIDWORD(v77) + 1;
          *((_WORD *)v76 + HIDWORD(v77)) = -3;
          goto LABEL_53;
        }
        v30 = HIDWORD(v77) + 1;
LABEL_50:
        v32 = (WTF::StringImpl **)&WTF::Unicode::replacementCharacter;
      }
      else
      {
        if (HIDWORD(v77) != (_DWORD)v77)
        {
          v31 = HIDWORD(v77) + 1;
          *((_WORD *)v76 + HIDWORD(v77)) = (_WORD)v74;
          goto LABEL_53;
        }
        v30 = HIDWORD(v77) + 1;
        v32 = &v74;
      }
      break;
    }
    v33 = (_WORD *)WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v76, v30, (unint64_t)v32);
    v31 = HIDWORD(v77) + 1;
    *((_WORD *)v76 + HIDWORD(v77)) = *v33;
    goto LABEL_53;
  }
  v31 = HIDWORD(v77);
LABEL_64:
  if (v31)
  {
    if (v31 >= 0x7FFFFFF0)
    {
      __break(0xC471u);
      JUMPOUT(0x198BCC9B8);
    }
    v38 = v76;
    v39 = WTF::fastCompactMalloc((WTF *)(2 * v31 + 20));
    v40 = (_WORD *)(v39 + 20);
    *(_DWORD *)v39 = 2;
    *(_DWORD *)(v39 + 4) = v31;
    *(_QWORD *)(v39 + 8) = v39 + 20;
    *(_DWORD *)(v39 + 16) = 0;
    v74 = (WTF::StringImpl *)v39;
    if (v31 == 1)
      *v40 = *(_WORD *)v38;
    else
      memcpy(v40, v38, 2 * v31);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString += 2;
    v74 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
  }
  v11 = JSC::jsString(v10, (JSC::VM *)&v74, (uint64_t)a3, a4, a5, a6, a7, a8);
  v48 = v74;
  v74 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
    {
      WTF::StringImpl::~StringImpl(v48, v41, v42, v43, v44, v45, v46, v47);
      WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
    }
    else
    {
      *(_DWORD *)v48 -= 2;
    }
  }
  v49 = v76;
  if (v76)
  {
    v76 = 0;
    LODWORD(v77) = 0;
    WTF::fastFree((unint64_t)v49, v41, v42, v43, v44, v45, v46, v47);
  }
  return (unsigned __int8 *)v11;
}

uint64_t JSC::substituteBackreferencesSlow(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7, uint64_t a8, double a9, double a10, float a11)
{
  uint64_t v11;
  int8x16_t *v15;
  uint64_t v16;
  unsigned int v17;
  const char *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  int8x16_t *v31;
  size_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  int8x16_t *v41;
  size_t v42;
  const char *v43;
  unint64_t v44;
  unint64_t v45;
  int8x16_t *v46;
  size_t v47;
  const char *v48;
  int8x16_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  const char *v56;
  uint64_t v57;
  _BOOL4 v58;
  uint64_t v59;
  int8x16_t *v60;
  uint64_t v61;

  v11 = a8;
  v15 = (int8x16_t *)a4;
  v59 = result;
  v60 = (int8x16_t *)a2;
  v61 = a3;
  v58 = a7 && (v16 = *(_QWORD *)(a7 + 48)) != 0 && *(_DWORD *)(v16 + 20) != 0;
  v17 = 0;
  v18 = "";
LABEL_5:
  v19 = v11 + 1;
  if (v11 + 1 != v61)
  {
    if (BYTE4(v61))
    {
      if (v61 <= v19)
        goto LABEL_92;
      v20 = (uint64_t)v60;
      v21 = v60->u8[v19];
    }
    else
    {
      if (v61 <= v19)
        goto LABEL_92;
      v20 = (uint64_t)v60;
      v21 = v60->u16[v19];
    }
    if (v21 > 38)
    {
      if (v21 == 39)
      {
        v25 = 0;
        v26 = a6[1];
        v28 = a5 - v26;
        goto LABEL_25;
      }
      if (v21 == 96)
      {
        v25 = 0;
        v26 = 0;
        v28 = *a6;
        goto LABEL_25;
      }
    }
    else
    {
      if (v21 == 38)
      {
        v25 = 0;
        v26 = *a6;
        v27 = a6[1];
LABEL_24:
        v28 = v27 - v26;
        goto LABEL_25;
      }
      if (v21 == 36)
      {
        v48 = v18;
        v49 = (int8x16_t *)WTF::StringView::substring((const char *)&v60, v17, v19 - v17);
        result = WTF::StringBuilder::append(v59, v49, v50, v50, v51, v52, v53, v54);
        v17 = v11 + 2;
        goto LABEL_37;
      }
    }
    if (!a7 || v21 != 60)
    {
      if (!a7)
        goto LABEL_93;
      v22 = v21 - 48;
      if (v22 > 9)
        goto LABEL_93;
      v23 = *(_DWORD *)(a7 + 24);
      if (v22 > v23)
        goto LABEL_93;
      v24 = v11 + 2;
      if (v11 + 2 >= (unint64_t)v61)
        goto LABEL_21;
      if (BYTE4(v61))
      {
        if (v61 <= v24)
          goto LABEL_92;
        v38 = *(unsigned __int8 *)(v20 + v24);
      }
      else
      {
        if (v61 <= v24)
          goto LABEL_92;
        v38 = *(unsigned __int16 *)(v20 + 2 * v24);
      }
      if ((v38 - 48) > 9)
      {
LABEL_21:
        v25 = 0;
      }
      else
      {
        v22 = v38 + 10 * v22 - 48;
        if (v22 <= v23)
        {
          v25 = 1;
        }
        else
        {
          v25 = 0;
          v22 /= 0xAu;
        }
      }
      if (!v22)
        goto LABEL_93;
      v26 = a6[2 * v22];
      v27 = a6[(2 * v22) | 1];
      goto LABEL_24;
    }
    v48 = v18;
    if (!v58)
      goto LABEL_94;
    result = WTF::StringView::find((WTF::StringView *)&v60, 0x3Eu, (int)v11 + 2, a9, a10, a11);
    if (result == -1)
      goto LABEL_94;
    v55 = result - v11;
    v56 = WTF::StringView::substring((const char *)&v60, (int)v11 + 2, (int)result - (int)v11 - 2);
    result = (uint64_t)JSC::RegExp::subpatternIdForGroupName<int const*>(a7, (uint64_t)v56, v57, (uint64_t)a6);
    if ((_DWORD)result && result <= *(_DWORD *)(a7 + 24))
    {
      v26 = a6[(2 * result)];
      v28 = a6[(2 * (_DWORD)result) | 1] - v26;
    }
    else
    {
      v28 = 0;
      v26 = 0;
    }
    v25 = v55 - 1;
    v18 = v48;
LABEL_25:
    if (v11 == v17)
    {
LABEL_26:
      v19 = v11 + v25 + 1;
      v17 = v19 + 1;
      if ((v26 & 0x80000000) == 0)
      {
        if (a5 <= v26)
        {
          v32 = 0;
          v48 = v18;
          v31 = (int8x16_t *)v18;
        }
        else
        {
          if (a5 - v26 > v28 || (v28 = a5 - v26, v26))
          {
            v29 = v28;
            v30 = a5 - (unint64_t)v26;
            if ((a5 & 0xFF00000000) != 0)
            {
              if (v30 < v28)
                goto LABEL_92;
              v31 = (int8x16_t *)((char *)v15 + v26);
              v29 = v28 | 0x100000000;
            }
            else
            {
              if (v30 < v28)
                goto LABEL_92;
              v31 = (int8x16_t *)((char *)v15 + 2 * v26);
            }
          }
          else
          {
            v31 = v15;
            v29 = a5;
          }
          v32 = v29;
          v48 = v18;
          if ((v29 & 0xFF00000000) == 0)
          {
            result = WTF::StringBuilder::append(v59, v31, v29, a4, a5, (uint64_t)a6, a7, a8);
            goto LABEL_37;
          }
        }
        result = WTF::StringBuilder::append(v59, v31, v32, a4, a5, (uint64_t)a6, a7, a8);
        goto LABEL_37;
      }
      v48 = v18;
      goto LABEL_37;
    }
    if (v61 <= v17)
    {
      v43 = v18;
      v42 = 0;
      v41 = (int8x16_t *)"";
    }
    else
    {
      LODWORD(v39) = v11 - v17;
      if (v61 - v17 > v11 - v17 || (LODWORD(v39) = v61 - v17, v17))
      {
        v39 = v39;
        v40 = v61 - (unint64_t)v17;
        if (BYTE4(v61))
        {
          if (v40 < v39)
            goto LABEL_92;
          v41 = (int8x16_t *)((char *)v60 + v17);
          v39 = v39 | 0x100000000;
        }
        else
        {
          if (v40 < v39)
            goto LABEL_92;
          v41 = (int8x16_t *)((char *)v60 + 2 * v17);
        }
      }
      else
      {
        v41 = v60;
        v39 = v61;
      }
      v42 = v39;
      v43 = v18;
      if ((v39 & 0xFF00000000) == 0)
      {
        result = WTF::StringBuilder::append(v59, v41, v39, a4, a5, (uint64_t)a6, a7, a8);
LABEL_75:
        v18 = v43;
        goto LABEL_26;
      }
    }
    result = WTF::StringBuilder::append(v59, v41, v42, a4, a5, (uint64_t)a6, a7, a8);
    goto LABEL_75;
  }
  v34 = v61;
  while (1)
  {
    if (v34 == v17)
      return result;
    v44 = v34 - v17;
    if (v34 <= v17)
    {
      v47 = 0;
      v46 = (int8x16_t *)"";
      return WTF::StringBuilder::append(v59, v46, v47, a4, a5, (uint64_t)a6, a7, a8);
    }
    if (!v17)
    {
      v46 = v60;
      v44 = v61;
      goto LABEL_86;
    }
    v45 = v34 - (unint64_t)v17;
    if (BYTE4(v61))
    {
      if (v45 >= v44)
      {
        v46 = (int8x16_t *)((char *)v60 + v17);
        v44 |= 0x100000000uLL;
        goto LABEL_86;
      }
      goto LABEL_92;
    }
    if (v45 >= v44)
      break;
LABEL_92:
    __break(1u);
LABEL_93:
    v48 = v18;
LABEL_94:
    v19 = v11;
LABEL_37:
    a4 = v19 + 1;
    v33 = (uint64_t)v60;
    v34 = v61;
    if (BYTE4(v61))
    {
      if (v61 > a4)
      {
        v35 = v61 - (unint64_t)a4;
        v36 = 16;
        if (v35 < 0x10)
          v36 = v61 - (unint64_t)a4;
        if (v36)
        {
          v37 = v36;
          result = (uint64_t)v60->i64 + a4;
          while (*(_BYTE *)result != 36)
          {
            ++result;
            if (!--v37)
              goto LABEL_45;
          }
LABEL_61:
          v11 = result - v33;
          goto LABEL_62;
        }
LABEL_45:
        if (v35 >= 0x11)
        {
          result = (uint64_t)memchr(&v60->i8[a4 + v36], 36, v35 - v36);
          if (result)
            goto LABEL_61;
        }
      }
    }
    else
    {
      result = WTF::find<char16_t,(void *)0>((uint64_t)v60, v61, 0x24u, a4, a9, a10, a11);
      v11 = result;
LABEL_62:
      v18 = v48;
      if (v11 != -1)
        goto LABEL_5;
      v34 = v61;
    }
  }
  v46 = (int8x16_t *)((char *)v60 + 2 * v17);
LABEL_86:
  v47 = v44;
  if ((v44 & 0xFF00000000) != 0)
    return WTF::StringBuilder::append(v59, v46, v47, a4, a5, (uint64_t)a6, a7, a8);
  return WTF::StringBuilder::append(v59, v46, v44, a4, a5, (uint64_t)a6, a7, a8);
}

uint64_t *JSC::RegExp::subpatternIdForGroupName<int const*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t *v10;
  int v11;
  unsigned int *v12;
  _QWORD v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4)
    return 0;
  v8 = *(_QWORD *)(v4 + 24);
  v7 = (uint64_t *)(v4 + 24);
  if (!v8)
    goto LABEL_6;
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StringViewHashTranslator>,WTF::StringView>(v7, (uint64_t)v13);
  if (result)
    goto LABEL_7;
  if (*v7)
    result = (uint64_t *)(*v7 + 24 * *(unsigned int *)(*v7 - 4));
  else
LABEL_6:
    result = 0;
LABEL_7:
  v10 = *(uint64_t **)(*(_QWORD *)(a1 + 48) + 24);
  if (v10)
    v10 += 3 * *((unsigned int *)v10 - 1);
  if (v10 == result)
    return 0;
  v11 = *((_DWORD *)result + 5);
  if (v11 == 1)
  {
    v12 = (unsigned int *)result[1];
  }
  else
  {
    if (!v11)
    {
      __break(0xC471u);
      return result;
    }
    v12 = (unsigned int *)(a4 + 4 * (*(_DWORD *)result[1] + 2 * *(_DWORD *)(a1 + 24) + 1));
  }
  return (uint64_t *)*v12;
}

void JSC::substituteBackreferences(uint64_t a1, WTF::AtomStringImpl *a2, unint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint16x8_t a9, double a10, float a11)
{
  uint64_t v13;
  unsigned int v18;
  int8x16_t *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _DWORD *v24;
  BOOL v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int16x8_t *v36;
  uint64_t v37;
  char *v38;
  int16x8_t v39;
  int16x8_t *v40;
  int8x16_t v41;
  int16x8_t *v42;
  char *v43;
  int16x8_t v44;
  BOOL v45;

  v13 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
    v24 = (_DWORD *)(a1 + 16);
    if (*(_DWORD *)(a1 + 16))
      v45 = 0;
    else
      v45 = *(_QWORD *)(a1 + 8) == 0;
    if (!v45)
    {
      v19 = 0;
      v20 = 0;
      goto LABEL_34;
    }
    goto LABEL_16;
  }
  v18 = *(_DWORD *)(v13 + 16);
  v19 = *(int8x16_t **)(v13 + 8);
  v20 = *(unsigned int *)(v13 + 4);
  if ((v18 & 4) != 0)
  {
    if ((_DWORD)v20)
    {
      v21 = 16;
      if (v20 < 0x10)
        v21 = *(unsigned int *)(v13 + 4);
      v22 = v21;
      v23 = *(_BYTE **)(v13 + 8);
      do
      {
        if (*v23 == 36)
          goto LABEL_30;
        ++v23;
        --v22;
      }
      while (v22);
      if (v20 >= 0x11)
      {
        v23 = memchr(&v19->i8[v21], 36, v20 - v21);
        if (v23)
        {
LABEL_30:
          a8 = v23 - (_BYTE *)v19;
          goto LABEL_31;
        }
      }
    }
  }
  else if ((_DWORD)v20)
  {
    v36 = (int16x8_t *)((char *)v19 + 2 * v20);
    if (v20 > 0x1F)
    {
      v39.i64[0] = 0x24002400240024;
      v39.i64[1] = 0x24002400240024;
      v40 = *(int16x8_t **)(v13 + 8);
      do
      {
        v41 = (int8x16_t)vceqq_s16(*v40, v39);
        LOWORD(a11) = vmaxvq_u16((uint16x8_t)v41);
        if (a11 != 0.0)
          goto LABEL_41;
        v42 = v40 + 1;
        v43 = &v40[1].i8[14];
        ++v40;
      }
      while (v43 < (char *)v36);
      if (v42 < v36)
      {
        v44.i64[0] = 0x24002400240024;
        v44.i64[1] = 0x24002400240024;
        v41 = (int8x16_t)vceqq_s16(v36[-1], v44);
        v44.i16[0] = vmaxvq_u16((uint16x8_t)v41);
        if (v44.i32[0])
        {
          v40 = v36 - 1;
LABEL_41:
          *(_QWORD *)&a10 = 0x3000200010000;
          a9 = (uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v41);
          a9.i16[0] = vminvq_u16(a9);
          v38 = &v40->i8[2 * a9.u8[0]];
          goto LABEL_42;
        }
      }
    }
    else
    {
      v37 = 2 * v20;
      v38 = *(char **)(v13 + 8);
      while (*(_WORD *)v38 != 36)
      {
        v38 += 2;
        v37 -= 2;
        if (!v37)
          goto LABEL_10;
      }
LABEL_42:
      if (v38 != (char *)v36)
      {
        a8 = (v38 - (char *)v19) >> 1;
LABEL_31:
        if (a8 != -1)
        {
          JSC::substituteBackreferencesSlow(a1, (uint64_t)v19, v20 | ((unint64_t)((v18 >> 2) & 1) << 32), a3, a4, a5, a6, a8, *(double *)a9.i64, a10, a11);
          return;
        }
      }
    }
  }
LABEL_10:
  v24 = (_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 16))
    v25 = 0;
  else
    v25 = *(_QWORD *)(a1 + 8) == 0;
  if (v25)
  {
    *(_DWORD *)v13 += 2;
LABEL_16:
    v26 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = v13;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
      {
        WTF::StringImpl::~StringImpl(v26, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
        WTF::fastFree(v28, v29, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)v26 -= 2;
      }
    }
    v27 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      LODWORD(v27) = *(_DWORD *)(v27 + 4);
    *v24 = v27;
    return;
  }
  if ((v18 & 4) != 0)
  {
LABEL_34:
    WTF::StringBuilder::append(a1, v19, v20, a4, (uint64_t)a5, a6, a7, a8);
    return;
  }
  WTF::StringBuilder::append(a1, v19, v20, a4, (uint64_t)a5, a6, a7, a8);
}

unint64_t operationStringProtoFuncReplaceRegExpEmptyStr(JSC::JSGlobalObject *a1, unint64_t a2, JSC::Structure *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int **v14;
  int *v15;
  unsigned int v16;
  uint64_t v17;
  int *v18;
  unsigned int v19;
  _BOOL8 v20;
  void *v21;
  int v22;
  unint64_t *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  WTF::StringImpl *v38;
  int v39;
  int v40;
  _DWORD *v41;
  unint64_t v42;
  WTF *v43;
  int v46;
  unsigned int v47;
  uint64_t v48;
  WTF *v49;
  int *v50;
  int v51;
  int v52;
  size_t v53;
  uint64_t v54;
  _BYTE *v55;
  int *v56;
  _BYTE *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  int v68;
  _DWORD *v69;
  _DWORD *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  WTF *v74;
  WTF *v75;
  int v76;
  int v77;
  int *v78;
  uint64_t v79;
  unint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  BOOL v86;
  _BYTE *v87;
  _BYTE *v88;
  unsigned int v89;
  JSC::VM *v90;
  uint64_t v91;
  uint16x8_t v92;
  uint64_t v93;
  float v94;
  int v95;
  int v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  int v100;
  int v101;
  int v102;
  _DWORD *v103;
  WTF::StringImpl *v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  int v118;
  __int16 *v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  double v151;
  JSC::Exception *v152;
  unint64_t v153;
  uint64_t v154;
  const float *v155;
  int32x4_t v156;
  uint64_t v157;
  int32x4_t v158;
  const float *v159;
  _BOOL4 v160;
  char v161;
  int v162;
  unsigned int v163;
  unsigned int v164;
  _BOOL4 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  JSC::VM *v174;
  unsigned int v175;
  JSC::VM *v176;
  WTF::AtomStringImpl *v177;
  JSC::Structure *v178;
  uint64_t v179;
  uint64_t v180;
  int8x16_t v181;
  int v182;
  int v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  uint64_t v186;
  int v187;
  int v188;
  _DWORD *v189;
  _BOOL4 v190;
  unint64_t v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  BOOL v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  uint64_t v202;
  uint64_t v203;
  WTF::StringImpl *v204;
  int8x16_t v205;
  unint64_t v206;
  int *v207;
  uint64_t v208;
  int *v209;
  WTF::StringImpl *v210;
  int v211;
  void *v212;
  unsigned __int8 *v214;
  void *v216;
  unsigned __int8 *v217;
  int v218;
  unsigned int v219;
  _QWORD *v220;
  WTF *v221;
  uint64_t v222;
  int v223;
  int v224;
  size_t v225;
  uint64_t v226;
  _BYTE *v227;
  int *v228;
  _BYTE *v229;
  unint64_t v230;
  WTF::AtomStringImpl *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _DWORD *v238;
  uint64_t *v239;
  WTF *v240;
  uint64_t v241;
  uint64_t v242;
  _DWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  WTF *v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  _BYTE *v252;
  _BYTE *v253;
  uint64_t v254;
  WTF *v255;
  uint64_t v256;
  WTF::StringImpl *v257;
  int v258;
  int v259;
  WTF::StringImpl *v260;
  int v261;
  int v262;
  int *v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  unint64_t v267;
  void *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  void *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  void *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int16x8_t *v291;
  int16x8_t v292;
  int8x16_t v293;
  int16x8_t *v294;
  __int8 *v295;
  int16x8_t v296;
  unint64_t v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  _BOOL4 v307;
  int v308;
  _DWORD *v309;
  uint64_t v310;
  int8x16_t v311;
  unint64_t v312;
  uint64_t v313;
  int v314;
  int v315;
  WTF::AtomStringImpl *v316;
  unint64_t v317;
  int8x16_t v318;
  WTF::StringImpl *v319;
  uint64_t v320;
  WTF *v321;
  WTF::StringImpl *v322;
  char v323;
  WTF::StringImpl *v324;
  int v325;
  int v326;
  unsigned int v327;
  WTF::StringImpl *v328;
  WTF::StringImpl *v329;
  int v330;
  int v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  double v338;
  JSC::Exception *v339;
  char v340;
  unint64_t v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  BOOL v346;
  int v348;
  char *v349;
  _DWORD *v350;
  int v351;
  int v352;
  int *v353;
  uint64_t v354;
  unint64_t v355;
  unsigned int v356;
  void *v357;
  unsigned int v358;
  WTF::StringImpl *v359;
  int v360;
  unsigned int v361;
  unsigned int v362;
  uint64_t v363;
  BOOL v364;
  JSC::RegExp *v365;
  uint64_t v366;
  void *v367;
  unint64_t v368;
  uint64_t v369;
  JSC::RegExp *v370;
  unint64_t v371;
  uint64_t v372;
  unsigned int v373;
  WTF *v374;
  uint64_t v375;
  _QWORD *v376;
  void *v377;
  uint64_t v378;
  uint64_t v379;
  WTF::AtomStringImpl *v380;
  unint64_t v381;
  unsigned int v382;
  JSC::RegExp *v383;
  char *v384;
  unsigned int v385;
  uint64_t v386;
  unsigned int v387;
  uint64_t v388;
  int v389;
  BOOL v390;
  int v391;
  BOOL v392;
  uint64_t v393;
  int v394;
  uint64_t v395;
  int *v396;
  int v397;
  int v398;
  int v399;
  _DWORD *v400;
  uint64_t v401;
  uint64_t v402;
  int8x16_t v403;
  JSC::VM *v404;
  unint64_t v405;
  WTF::StringImpl *v406;
  WTF::StringImpl *v407;
  WTF::StringImpl *v408;
  char v409;
  WTF::StringImpl *v410;
  unint64_t v411;
  void *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  void *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  unsigned int v427;
  unsigned int v428;
  int v429;
  uint64_t *v430;
  WTF *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  unint64_t v436;
  uint64_t v437;
  unint64_t v438;
  _WORD *v439;
  _WORD *v440;
  WTF::StringImpl *v441;
  unint64_t v442;
  void *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  int v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  double v458;
  JSC::Exception *v459;
  int v460;
  int v461;
  int v462;
  unint64_t OutOfMemoryError;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  double v469;
  JSC::Exception *v470;
  unint64_t v471;
  void *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  _DWORD *v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  uint64_t *v483;
  WTF *v484;
  uint64_t v485;
  _BOOL4 v486;
  _BOOL4 v487;
  int v488;
  unsigned int v489;
  uint64_t *v490;
  uint64_t v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  int8x16_t v497;
  int v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  JSC::VM *v503;
  int v504;
  uint64_t v505;
  int v506;
  uint64_t v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  unint64_t *v511;
  WTF::StringImpl *v512;
  unsigned __int8 v513;
  unint64_t SlowCase;
  int v515;
  BOOL v516;
  uint64_t v517;
  uint64_t v518;
  _QWORD *v519;
  uint64_t v520;
  uint64_t v521;
  JSC::VM *v522;
  int v523;
  uint64_t v524;
  _DWORD *v525;
  uint64_t v526;
  int v527;
  WTF::StringImpl *v528;
  unsigned int v529;
  int v530;
  unsigned int v531;
  unsigned int v532;
  unsigned int v533;
  int v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  WTF::StringImpl *v540;
  unsigned int v541;
  unsigned int v542;
  uint64_t v543;
  uint64_t v544;
  JSC::VM *v545;
  BOOL v546;
  unint64_t *v547;
  int v548;
  WTF *v549;
  uint64_t v550;
  unint64_t *v551;
  JSC::VM *v552;
  int v553;
  int v554;
  int v555;
  uint64_t v556;
  JSC::VM *v557;
  uint64_t v558;
  unint64_t v559;
  char v560;
  unint64_t v561;
  WTF *v562;
  uint64_t v563;
  int *v564;
  unint64_t v565;
  unint64_t v566;
  uint64_t v567;
  unint64_t v568;
  _WORD *v569;
  _WORD *v570;
  WTF *v571;
  unsigned int *v572;
  int v573;
  unsigned int v574;
  int v575;
  unsigned int v576;
  int v577;
  uint64_t v578;
  unsigned int v579;
  int v580;
  WTF *v581;
  unsigned int v584;
  WTF *v585;
  uint64_t v586;
  WTF *v587;
  unint64_t *v588;
  uint64_t v589;
  uint64_t v590;
  char v591;
  _DWORD *v592;
  int v593;
  BOOL v594;
  unsigned int v595;
  int v596;
  WTF *v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  unint64_t v602;
  BOOL v603;
  unint64_t v604;
  void *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  unint64_t StatusReg;
  int v614;
  _DWORD *v615;
  int v616;
  _DWORD *v617;
  char *v618;
  uint64_t v619;
  uint64_t v620;
  int v621;
  _DWORD *v622;
  WTF::StringImpl *v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  char *v627;
  unsigned int v628;
  uint64_t v629;
  unint64_t v630;
  char *v631;
  uint64_t v632;
  char *v633;
  int v634;
  char *v635;
  WTF::StringImpl *v636;
  int v637;
  uint64_t v638;
  size_t v639;
  WTF::StringImpl *v640;
  _BYTE *v641;
  int *v642;
  _BYTE *v643;
  WTF::StringImpl *v644;
  int v645;
  int v646;
  size_t v647;
  uint64_t v648;
  uint64_t v649;
  _BYTE *v650;
  int *v651;
  _BYTE *v652;
  unint64_t v653;
  void *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  int v661;
  uint64_t v662;
  size_t v663;
  WTF::StringImpl *v664;
  _BYTE *v665;
  int *v666;
  _BYTE *v667;
  int *v668;
  const WTF::String *v669;
  unsigned int v670;
  uint64_t v671;
  unsigned int v672;
  unsigned int v673;
  BOOL v674;
  int v675;
  int v676;
  int v677;
  int v678;
  char v679;
  uint64_t v680;
  unsigned int v681;
  int v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  WTF::StringImpl *v689;
  WTF::StringImpl *v690;
  WTF::StringImpl *v691;
  WTF::StringImpl *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  _BOOL4 v696;
  int v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  WTF::StringImpl *v704;
  WTF::StringImpl *v705;
  unint64_t v706;
  void *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  unint64_t v714;
  void *v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  _BOOL4 v724;
  char *v725;
  uint64_t v726;
  uint64_t v727;
  int v728;
  WTF::StringImpl *v729;
  uint64_t v730;
  uint64_t v731;
  unint64_t v732;
  int8x16_t *v733;
  unsigned int v734;
  uint64_t v735;
  unint64_t v736;
  unint64_t v737;
  char *v738;
  uint64_t v739;
  int8x16_t *v740;
  uint64_t v741;
  char *v742;
  char *v743;
  __int16 v744;
  char *v745;
  int8x16_t v746;
  int8x16_t v747;
  char *v748;
  char *v749;
  char *v750;
  unint64_t v751;
  const WTF::String *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  JSC::JSString *v758;
  const WTF::String *v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  JSC::JSString *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  WTF::StringImpl *v770;
  uint64_t v771;
  int v772;
  uint64_t v773;
  WTF::StringImpl *v774;
  uint64_t v775;
  int v776;
  uint64_t v777;
  WTF::StringImpl *v778;
  uint64_t v779;
  int v780;
  uint64_t v781;
  WTF::StringImpl **v782;
  JSC *v783;
  JSC::VM *v784;
  JSC *v785;
  const WTF::String *v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  unint64_t v792;
  JSC::VM *v793;
  JSC *v794;
  JSC::JSString *v795;
  JSC::JSString *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  void **p_dst;
  JSC::VM **v802;
  unint64_t v803;
  void *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  unint64_t v811;
  void *v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  JSC::VM **v819;
  WTF *v820;
  WTF *v822;
  unsigned int v824;
  WTF *v825;
  uint64_t v826;
  WTF::StringImpl *v827;
  unint64_t v828;
  void *v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unsigned int *v836;
  unint64_t v837;
  void *v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t v844;
  unsigned int v845;
  int v846;
  _DWORD *v847;
  WTF *v848;
  WTF *v849;
  int v850;
  uint64_t v852;
  uint64_t v853;
  char v854;
  _DWORD *v855;
  uint64_t v856;
  int v857;
  BOOL v858;
  unsigned int v859;
  int v860;
  WTF *v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  unint64_t v866;
  BOOL v867;
  void *v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  unint64_t v875;
  int v876;
  WTF::StringImpl *v877;
  char *v878;
  uint64_t v879;
  uint64_t v880;
  int v881;
  _DWORD *v882;
  WTF::StringImpl *v883;
  uint64_t v884;
  uint64_t v885;
  unint64_t v886;
  char *v887;
  unsigned int v888;
  uint64_t v889;
  unint64_t v890;
  char *v891;
  uint64_t v892;
  char *v893;
  int v894;
  char *v895;
  int v896;
  JSC::VM *v897;
  unint64_t v898;
  WTF::StringImpl *v899;
  BOOL hasExceptionsAfterHandlingTraps;
  int v901;
  uint64_t v902;
  size_t v903;
  WTF::StringImpl *v904;
  int v905;
  uint64_t v906;
  size_t v907;
  WTF::StringImpl *v908;
  int *v909;
  JSC *v910;
  unsigned int v911;
  uint64_t v912;
  unsigned int v913;
  unsigned int v914;
  BOOL v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  WTF::StringImpl *v922;
  WTF::StringImpl *v923;
  WTF::StringImpl *v924;
  WTF::StringImpl *v925;
  uint64_t v926;
  uint64_t v927;
  _BOOL4 v928;
  WTF::StringImpl *v929;
  int v930;
  WTF::StringImpl *v931;
  unint64_t v932;
  uint64_t v933;
  void *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  WTF::AtomStringImpl *v941;
  int v942;
  JSC::VM *v943;
  int8x16_t v944;
  unint64_t v945;
  unsigned int v946;
  uint64_t v947;
  uint64_t v948;
  int v949;
  BOOL v950;
  WTF::StringImpl *v951;
  WTF::StringImpl *v952;
  WTF::StringImpl *v953;
  int v954;
  int v955;
  BOOL v956;
  size_t v957;
  uint64_t v958;
  unint64_t v959;
  void *v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  _BOOL4 v972;
  WTF::StringImpl **v973;
  uint64_t *v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  int *v981;
  WTF::StringImpl *v982;
  unint64_t v983;
  void *v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  unint64_t v991;
  void *v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  uint64_t v1000;
  _BOOL4 v1001;
  char *v1002;
  uint64_t v1003;
  int v1004;
  WTF::StringImpl *v1005;
  uint64_t v1006;
  uint64_t v1007;
  unint64_t v1008;
  int8x16_t *v1009;
  unsigned int v1010;
  uint64_t v1011;
  unint64_t v1012;
  unint64_t v1013;
  char *v1014;
  uint64_t v1015;
  int8x16_t *v1016;
  uint64_t v1017;
  char *v1018;
  char *v1019;
  __int16 v1020;
  char *v1021;
  int8x16_t v1022;
  int8x16_t v1023;
  char *v1024;
  char *v1025;
  char *v1026;
  unint64_t v1027;
  const WTF::String *v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  JSC::JSString *v1034;
  const WTF::String *v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  JSC::JSString *v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  unsigned int v1047;
  int8x16_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  __n128 v1052;
  int *v1053;
  int *v1054;
  uint64_t v1055;
  uint64_t v1056;
  WTF::StringImpl *v1057;
  WTF::StringImpl *v1058;
  WTF::StringImpl *v1059;
  uint64_t v1060;
  int v1061;
  uint64_t v1062;
  WTF::StringImpl *v1063;
  int v1064;
  uint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  WTF::StringImpl *v1069;
  uint64_t v1070;
  int v1071;
  uint64_t v1072;
  uint64_t v1073;
  WTF::StringImpl *v1074;
  JSC::VM *v1075;
  JSC *v1076;
  unint64_t v1077;
  void *v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  uint64_t v1084;
  JSC::VM *v1085;
  JSC *v1086;
  const WTF::String *v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  unint64_t v1093;
  JSC::VM *v1094;
  JSC *v1095;
  JSC::JSString *v1096;
  JSC::JSString *v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  unint64_t v1102;
  void *v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  JSC::VM *v1111;
  unsigned int v1112;
  WTF::StringImpl **v1113;
  unint64_t v1114;
  void *v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  uint64_t v1121;
  unint64_t v1122;
  void *v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  char *v1130;
  char *v1131;
  int8x16_t v1132;
  int8x16_t v1133;
  char *v1134;
  char *v1135;
  char *v1136;
  __int16 v1137;
  unint64_t v1138;
  void *v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  uint64_t v1145;
  uint64_t v1146;
  JSC::VM *v1147;
  uint64_t v1148;
  uint64_t v1149;
  _BOOL4 v1150;
  WTF::AtomStringImpl *v1151;
  uint64_t v1152;
  unsigned int v1153;
  uint64_t v1154;
  int8x16_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  __n128 v1159;
  int *v1160;
  int *v1161;
  uint64_t v1162;
  uint64_t v1163;
  WTF::StringImpl *v1164;
  WTF::StringImpl *v1165;
  uint64_t v1166;
  JSC::VM *v1167;
  uint64_t v1168;
  uint64_t v1169;
  WTF::StringImpl *v1170;
  unint64_t v1171;
  void *v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  uint64_t v1177;
  uint64_t v1178;
  unint64_t v1179;
  void *v1180;
  uint64_t v1181;
  uint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  unint64_t v1187;
  void *v1188;
  uint64_t v1189;
  uint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  uint64_t v1193;
  uint64_t v1194;
  char *v1195;
  char *v1196;
  int8x16_t v1197;
  int8x16_t v1198;
  char *v1199;
  char *v1200;
  char *v1201;
  __int16 v1202;
  unint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  unint64_t v1206;
  unsigned int v1207;
  unsigned int v1208;
  uint64_t v1209;
  unint64_t *v1210;
  unint64_t *v1211;
  unint64_t *v1212;
  unsigned int v1213;
  JSC::VM *v1214;
  JSC::VM *v1215;
  JSC::VM *v1216;
  uint64_t v1217;
  uint64_t v1218;
  uint64_t v1219;
  uint64_t v1220;
  int v1221;
  WTF *v1222;
  uint64_t v1223;
  unint64_t v1224;
  JSC::MarkedVectorBase *v1225;
  JSC::MarkedVectorBase *v1226;
  _BOOL4 v1227;
  WTF::StringImpl *v1228;
  _DWORD *v1229;
  __int128 v1230;
  unsigned int v1231;
  JSC::RegExp *v1232;
  JSC::RegExp *v1233;
  WTF::String *v1234;
  JSC *v1235;
  int *v1237;
  WTF::StringImpl *v1238;
  WTF::StringImpl *v1239;
  int v1240;
  WTF::StringImpl *v1241;
  WTF::StringImpl *v1242;
  unsigned int v1243;
  JSC::VM *v1244;
  void *__dst;
  __int128 v1246;
  __int128 v1247;
  __int128 v1248;
  __int128 v1249;
  __int128 v1250;
  uint64_t v1251;
  char v1252;
  int v1253;
  int v1254;
  _BYTE *v1255;
  _BYTE v1256[80];
  uint64_t v1257;
  WTF *v1258;
  uint64_t v1259;
  _QWORD v1260[16];
  WTF *v1261;
  uint64_t v1262;
  _DWORD v1263[32];
  uint64_t v1264;
  unsigned int v1265;
  JSC::VM *v1266;
  unint64_t v1267;
  WTF::StringImpl *v1268;
  const WTF::String *v1269;
  JSC *v1270;
  int *var60[13];
  int8x16x2_t v1272;
  int8x16x2_t v1273;
  int8x16x2_t v1274;
  int8x16x2_t v1275;
  float32x4x2_t v1276;
  int8x16x2_t v1277;
  int8x16x2_t v1278;
  int8x16x2_t v1279;
  int8x16x2_t v1280;
  float32x4x2_t v1281;
  int8x16x2_t v1282;
  int8x16x2_t v1283;
  int8x16x2_t v1284;
  int8x16x2_t v1285;
  int8x16x2_t v1286;
  int8x16x2_t v1287;
  int8x16x2_t v1288;
  int8x16x2_t v1289;

  v11 = *((_QWORD *)a1 + 7);
  *(int **)(v11 + 40) = var60[12];
  v12 = *((_QWORD *)a3 + 2);
  v13 = v12 & 0xFFFFFFFFFFFFFFFCLL;
  v1235 = (JSC *)v11;
  if ((*(_BYTE *)((v12 & 0xFFFFFFFFFFFFFFFCLL) + 18) & 2) == 0)
  {
    LOBYTE(v1237) = 0;
    WTF::StringImpl::s_emptyAtomString += 2;
    v1244 = (JSC::VM *)v11;
    v1225 = (JSC::MarkedVectorBase *)(a2 + 8);
    v1234 = (WTF::String *)(a2 + 8);
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      v1234 = (WTF::String *)JSC::JSRopeString::resolveRope(a2, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*(_DWORD *)(v11 + 80))
    {
      v460 = *(_DWORD *)(v11 + 80);
      if ((v460 & 0x27) != 0 && (v460 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
        goto LABEL_624;
    }
    if (*(_QWORD *)v1234)
      v58 = *(_DWORD *)(*(_QWORD *)v1234 + 4);
    else
      v58 = 0;
    v1243 = v58;
    v59 = *((_QWORD *)a3 + 2);
    v60 = v59 & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v1228) = *(unsigned __int16 *)((v59 & 0xFFFFFFFFFFFFFFFCLL) + 18);
    v61 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFFFFCLL) + 48);
    if (v61)
      v62 = *(_DWORD *)(v61 + 20) != 0;
    else
      v62 = 0;
    v1232 = (JSC::RegExp *)(v59 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v1228 & 2) == 0)
    {
      v1267 = 0;
      v1261 = (WTF *)v1263;
      v1262 = 16;
      v1258 = (WTF *)v1260;
      v1259 = 16;
      goto LABEL_118;
    }
    __dst = (void *)*((_QWORD *)a1 + 7);
    if ((v59 & 1) != 0)
    {
      v486 = v62;
      JSC::throwTypeError((unint64_t)a1, (JSC::VM **)&__dst, (uint64_t)"Attempted to assign to readonly property.", 42);
      v62 = v486;
    }
    else
    {
      *((_QWORD *)a3 + 3) = 0xFFFE000000000000;
    }
    if (*((_DWORD *)v1235 + 20))
    {
      v487 = v62;
      v488 = *((_DWORD *)v1235 + 20);
      if ((v488 & 0x27) != 0 && (v488 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC *)((char *)v1235 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      v60 = (uint64_t)v1232;
      v62 = v487;
      if (*((_QWORD *)v1235 + 2))
      {
LABEL_624:
        v42 = 0;
        goto LABEL_834;
      }
    }
    if (!(_BYTE)v1237)
    {
      if (!dword_1ECF2C424)
      {
        v1239 = v1235;
        var60[0] = 0;
        __dst = (char *)&v1246 + 8;
        *(_QWORD *)&v1246 = 16;
        if (*(_QWORD *)v1234)
          v63 = *(_DWORD *)(*(_QWORD *)v1234 + 4);
        else
          v63 = 0;
        LODWORD(a4) = 0;
        LODWORD(v1270) = v63;
        while (1)
        {
          v64 = *((_QWORD *)a1 + 7);
          v65 = JSC::RegExp::match((JSC::RegExp *)v60, a1, v1234, a4, a5, a6, a7, a8);
          v66 = a2;
          if (!*(_DWORD *)(v64 + 80))
            goto LABEL_1671;
          v450 = *(_DWORD *)(v64 + 80);
          if ((v450 & 0x27) != 0 && (v450 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v64 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*(_QWORD *)(v64 + 16))
          {
            v66 = 0;
            v65 = -1;
          }
          else
          {
LABEL_1671:
            if (v65 != -1)
            {
              *((_QWORD *)a1 + 269) = v60;
              *((_QWORD *)a1 + 268) = a2;
              *((_QWORD *)a1 + 265) = v65;
              *((_QWORD *)a1 + 266) = v66;
              *((_BYTE *)a1 + 2136) = 0;
              if (*(_DWORD *)(v64 + 760) >= *((unsigned __int8 *)a1 + 7))
                JSC::Heap::writeBarrierSlowPath(v64 + 192, (unint64_t)a1);
            }
          }
          v1261 = (WTF *)v65;
          v1262 = v66;
          if (*((_DWORD *)v1235 + 20))
          {
            v451 = *((_DWORD *)v1235 + 20);
            if ((v451 & 0x27) != 0 && (v451 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC *)((char *)v1235 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
            if (*((_QWORD *)v1235 + 2))
              goto LABEL_632;
            v65 = (unint64_t)v1261;
            v60 = (uint64_t)v1232;
          }
          v67 = (int)var60[0];
          if (v65 == -1)
            break;
          if (var60[0] < (int *)v65)
          {
            v68 = DWORD1(v1246);
            if (DWORD1(v1246) == (_DWORD)v1246)
            {
              if (!WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&__dst, (int *)var60, (int *)&v1261, a4, a5, a6, a7, a8))
              {
                OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)a2);
                v470 = (JSC::Exception *)OutOfMemoryError;
                if ((OutOfMemoryError & 0xFFFE000000000002) != 0
                  || &JSC::Exception::s_info != (char **)(16
                                                        * *(unsigned int *)(16
                                                                          * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                          + 0x4C)))
                {
                  v470 = (JSC::Exception *)JSC::Exception::create((uint64_t)v1235, (JSC::VM *)OutOfMemoryError, 0, v464, v465, v466, v467, v468);
                }
                JSC::VM::throwException(v1235, a1, v470, v469, v464, v465, v466, v467, v468);
LABEL_632:
                v42 = 0;
LABEL_259:
                v212 = __dst;
                if ((char *)&v1246 + 8 == __dst || __dst == 0)
                  goto LABEL_834;
                __dst = 0;
                LODWORD(v1246) = 0;
LABEL_870:
                WTF::fastFree((unint64_t)v212, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                goto LABEL_834;
              }
              v65 = (unint64_t)v1261;
            }
            else
            {
              v69 = (char *)__dst + 8 * DWORD1(v1246);
              *v69 = var60[0];
              v69[1] = v65;
              if (v67 == (_DWORD)v65)
                *(_QWORD *)v69 = 0;
              DWORD1(v1246) = v68 + 1;
            }
          }
          LODWORD(a4) = v1262;
          var60[0] = (int *)v1262;
          if (v65 == v1262)
          {
            a4 = (v1262 + 1);
            if (a4 > v63)
              goto LABEL_258;
          }
        }
        v65 = (unint64_t)var60[0];
LABEL_258:
        v42 = a2;
        if (!v65)
          goto LABEL_259;
        v219 = DWORD1(v1246);
        if (v63 > v65)
        {
          if (DWORD1(v1246) == (_DWORD)v1246)
          {
            if (!WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int &>((uint64_t)&__dst, (int *)var60, (int *)&v1270, a4, a5, a6, a7, a8))
            {
              JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v1239);
              goto LABEL_632;
            }
            v219 = DWORD1(v1246);
          }
          else
          {
            v238 = (char *)__dst + 8 * DWORD1(v1246);
            v219 = DWORD1(v1246) + 1;
            *v238 = v65;
            v238[1] = v63;
            DWORD1(v1246) = v219;
          }
        }
        v220 = __dst;
        v221 = (WTF *)*((_QWORD *)a1 + 7);
        v1258 = v221;
        if (v219 == 1)
        {
          v222 = *(_QWORD *)v1234;
          if (*(_QWORD *)v1234)
            v223 = *(_DWORD *)(v222 + 4);
          else
            v223 = 0;
          v224 = *((_DWORD *)__dst + 1) - *(_DWORD *)__dst;
          if (*(int *)__dst <= 0)
          {
            v42 = a2;
            if (v224 >= v223)
              goto LABEL_259;
          }
          if (v224 >= v223)
            v225 = v223;
          else
            v225 = v224;
          if (!(_DWORD)v225)
          {
            WTF::StringImpl::s_emptyAtomString += 2;
            v228 = &WTF::StringImpl::s_emptyAtomString;
            goto LABEL_387;
          }
          v226 = *(_DWORD *)__dst & ~(*(int *)__dst >> 31);
          if ((*(_DWORD *)(v222 + 16) & 4) != 0)
          {
            if (v225 <= 0xC)
            {
              v227 = (_BYTE *)(*(_QWORD *)(v222 + 8) + v226);
              v228 = (int *)WTF::fastCompactMalloc((WTF *)(v225 + 20));
              v229 = v228 + 5;
              *v228 = 2;
              v228[1] = v225;
              *((_QWORD *)v228 + 1) = v228 + 5;
              v228[4] = 4;
              if ((_DWORD)v225 == 1)
                *v229 = *v227;
              else
                memcpy(v229, v227, v225);
              goto LABEL_387;
            }
          }
          else if (v225 <= 6)
          {
            WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v222 + 8) + 2 * v226), v225, (uint64_t *)&v1241);
            v228 = (int *)v1241;
            goto LABEL_387;
          }
          v479 = *(_DWORD **)v1234;
          if ((*(_DWORD *)(v222 + 16) & 3) == 2)
            v479 = *(_DWORD **)(v222 + 24);
          v480 = WTF::fastCompactMalloc((WTF *)0x20);
          v228 = (int *)v480;
          v481 = *(_DWORD *)(v222 + 16);
          v482 = *(_QWORD *)(v222 + 8);
          *v479 += 2;
          *(_DWORD *)v480 = 2;
          *(_DWORD *)(v480 + 4) = v225;
          if ((v481 & 4) != 0)
          {
            *(_QWORD *)(v480 + 8) = v482 + v226;
            *(_DWORD *)(v480 + 16) = 6;
          }
          else
          {
            *(_QWORD *)(v480 + 8) = v482 + 2 * v226;
            *(_DWORD *)(v480 + 16) = 2;
          }
          *(_QWORD *)(v480 + 24) = v479;
LABEL_387:
          v1261 = (WTF *)v228;
          v42 = JSC::jsString((uint64_t)v221, (JSC::VM *)&v1261, (uint64_t)a3, a4, a5, a6, a7, a8);
          v255 = v1261;
          v1261 = 0;
          if (!v255)
            goto LABEL_259;
          goto LABEL_327;
        }
        if (!v219)
          goto LABEL_459;
        LODWORD(v242) = 0;
        v48 = 8 * v219;
        v243 = (char *)__dst + 4;
        v244 = v48;
        do
        {
          v242 = (*v243 + v242 - *(v243 - 1));
          v243 += 2;
          v244 -= 8;
        }
        while (v244);
        if (!(_DWORD)v242)
        {
LABEL_459:
          v42 = *((_QWORD *)v221 + 5246);
          goto LABEL_259;
        }
        v245 = *(_QWORD *)v1234;
        if (*(_QWORD *)v1234)
        {
          v246 = *(_QWORD *)(v245 + 8);
          v247 = *(unsigned int *)(v245 + 4);
          if ((*(_BYTE *)(v245 + 16) & 4) == 0)
          {
            if (v242 <= 0x7FFFFFEF)
            {
              WTF::tryFastCompactMalloc((WTF *)(2 * v242 + 20), &v1261);
              v562 = v1261;
              if (v1261)
              {
                v563 = 0;
                *(_DWORD *)v1261 = 2;
                *((_DWORD *)v562 + 1) = v242;
                *((_QWORD *)v562 + 1) = (char *)v562 + 20;
                *((_DWORD *)v562 + 4) = 0;
                v564 = (int *)v220 + 1;
                do
                {
                  v565 = *(v564 - 1);
                  v566 = v247 - v565;
                  if (v247 < v565)
                    goto LABEL_1458;
                  v567 = *v564;
                  v568 = v567 - v565;
                  if ((_DWORD)v567 - (_DWORD)v565 != -1)
                  {
                    v86 = v566 >= v568;
                    v566 = v567 - v565;
                    if (!v86)
                      goto LABEL_1458;
                  }
                  v569 = (_WORD *)((char *)v562 + 2 * v563 + 20);
                  v570 = (_WORD *)(v246 + 2 * v565);
                  if (v566 == 1)
                  {
                    *v569 = *v570;
                  }
                  else if (v566)
                  {
                    memcpy(v569, v570, 2 * v566);
                  }
                  v563 += v568;
                  v564 += 2;
                  v48 -= 8;
                }
                while (v48);
                v1261 = v562;
                v42 = JSC::jsString((uint64_t)v221, (JSC::VM *)&v1261, v34, v35, v36, a6, a7, a8);
                v571 = v1261;
                v1261 = 0;
                if (v571)
                {
                  if (*(_DWORD *)v571 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v571, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v837, v838, v839, v840, v841, v842, v843, v844);
                  }
                  else
                  {
                    *(_DWORD *)v571 -= 2;
                  }
                }
                goto LABEL_259;
              }
            }
            goto LABEL_1523;
          }
        }
        else
        {
          v246 = 0;
          v247 = 0;
        }
        if ((v242 & 0x80000000) == 0)
        {
          WTF::tryFastCompactMalloc((WTF *)(v242 + 20), &v1261);
          v248 = v1261;
          if (v1261)
          {
            v249 = 0;
            *(_DWORD *)v1261 = 2;
            *((_DWORD *)v248 + 1) = v242;
            *((_QWORD *)v248 + 1) = (char *)v248 + 20;
            *((_DWORD *)v248 + 4) = 4;
            do
            {
              v250 = *v220;
              if (v247 < (int)*v220)
                goto LABEL_1458;
              v251 = (uint64_t)(0xFFFFFFFF00000001 * v250) >> 32;
              v34 = v247 - (int)v250;
              if (v251 != -1)
              {
                v86 = v34 >= v251;
                v34 = (uint64_t)(0xFFFFFFFF00000001 * v250) >> 32;
                if (!v86)
                  goto LABEL_1458;
              }
              v252 = (char *)v248 + v249 + 20;
              v253 = (_BYTE *)(v246 + (int)v250);
              if (v34 == 1)
              {
                *v252 = *v253;
              }
              else if (v34)
              {
                memcpy(v252, v253, v34);
              }
              v249 += v251;
              ++v220;
              v48 -= 8;
            }
            while (v48);
            v1261 = v248;
            v254 = JSC::jsString((uint64_t)v221, (JSC::VM *)&v1261, v34, v35, v36, a6, a7, a8);
            v42 = v254;
            v255 = v1261;
            v1261 = 0;
            if (!v255)
              goto LABEL_259;
LABEL_327:
            if (*(_DWORD *)v255 == 2)
            {
              WTF::StringImpl::~StringImpl(v255, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v283, v284, v285, v286, v287, v288, v289, v290);
            }
            else
            {
              *(_DWORD *)v255 -= 2;
            }
            goto LABEL_259;
          }
        }
LABEL_1523:
        JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v1258);
        v42 = 0;
        goto LABEL_259;
      }
      v160 = 0;
LABEL_189:
      v1267 = 0;
      v1261 = (WTF *)v1263;
      v1262 = 16;
      v1258 = (WTF *)v1260;
      v1259 = 16;
      if (v160)
      {
        v162 = *(_DWORD *)(v60 + 24);
        v163 = v162 + 3;
        v164 = v162 + 4;
        v165 = v62;
        if (v62)
          v166 = v164;
        else
          v166 = v163;
        JSC::CachedCall::CachedCall((JSC::CachedCall *)&__dst, a1, 0, v166, a5, a6, a7, a8);
        v174 = v1235;
        if (*((_DWORD *)v1235 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v1235, v167, v168, v169, v170, v171, v172, v173))
        {
          goto LABEL_462;
        }
        v175 = 0;
        while (1)
        {
          v176 = (JSC::VM *)*((_QWORD *)a1 + 7);
          JSC::RegExp::match((uint64_t)v1232, (uint64_t)a1, (uint64_t *)v1234, v175, (uint64_t)a1 + 2200, v171, v172, v173);
          v183 = v182;
          if (*((_DWORD *)v176 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v176, (uint64_t)v177, (uint64_t)v178, v179, v180, v171, v172, v173))
          {
            v185 = 0;
            v184 = 0;
            v186 = -1;
          }
          else
          {
            v184 = *((_QWORD *)a1 + 275);
            if (v183 == -1)
            {
              v185 = 0;
              v186 = -1;
            }
            else
            {
              if (*((_DWORD *)a1 + 553) <= 1u)
              {
                __break(0xC471u);
                JUMPOUT(0x198BD2240);
              }
              v185 = (WTF::StringImpl *)*(int *)(v184 + 4);
              v186 = v183;
              *((_QWORD *)a1 + 269) = v1232;
              *((_QWORD *)a1 + 268) = a2;
              *((_QWORD *)a1 + 265) = v183;
              *((_QWORD *)a1 + 266) = v185;
              *((_BYTE *)a1 + 2136) = 0;
              if (*((_DWORD *)v176 + 190) >= *((unsigned __int8 *)a1 + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v176 + 192, (unint64_t)a1);
            }
          }
          v1241 = (WTF::StringImpl *)v186;
          v1242 = v185;
          if (*((_DWORD *)v174 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v174, (uint64_t)v177, (uint64_t)v178, v179, v180, v171, v172, v173))
            {
              goto LABEL_462;
            }
            v186 = (uint64_t)v1241;
          }
          if (v186 == -1)
            break;
          v187 = HIDWORD(v1262);
          if (HIDWORD(v1262) == (_DWORD)v1262)
          {
            v340 = WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1261, (int *)&v1267, (int *)&v1241, v179, v180, v171, v172, v173);
            v190 = v165;
            if ((v340 & 1) == 0)
              goto LABEL_461;
          }
          else
          {
            v188 = v1267;
            v189 = (_DWORD *)((char *)v1261 + 8 * HIDWORD(v1262));
            *v189 = v1267;
            v189[1] = v186;
            if (v188 == (_DWORD)v186)
              *(_QWORD *)v189 = 0;
            HIDWORD(v1262) = v187 + 1;
            v190 = v165;
          }
          v1252 = 0;
          v1253 = 0;
          if (v190)
          {
            v942 = *((_DWORD *)a1 + 233);
            if (v942)
              v943 = (JSC::VM *)(16 * (v942 & 0xFFFFFFFE));
            else
              v943 = 0;
            v1226 = (JSC::MarkedVectorBase *)JSC::constructEmptyObject(v1235, v943, v178, v179, v180, v171, v172, v173);
            if (*((_DWORD *)v1232 + 6) != -1)
            {
              v945 = 0;
              v946 = 1;
              do
              {
                v179 = *(unsigned int *)(v184 + 4 * (v946 - 1));
                if ((v179 & 0x80000000) != 0)
                {
                  v948 = 10;
                }
                else
                {
                  v948 = (uint64_t)JSC::jsSubstring(v1235, (uint64_t)a1, (JSC::JSGlobalObject *)a2, (JSC::JSString *)v179, (*(_DWORD *)(v184 + 4 * v946) - v179), v171, v172, v173, v944);
                  if (*((_DWORD *)v174 + 20)
                    && JSC::VM::hasExceptionsAfterHandlingTraps(v174, v947, (uint64_t)v178, v179, v180, v171, v172, v173))
                  {
                    goto LABEL_462;
                  }
                }
                v949 = v1253;
                if (v1253 != v1254 && (v1255 != v1256 ? (v950 = v1255 == 0) : (v950 = 1), v950))
                {
                  *(_QWORD *)&v1255[8 * v1253] = v948;
                  v1253 = v949 + 1;
                }
                else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1253, v948, (uint64_t)v178, v179, v180, v171, v172, v173) == 1)
                {
                  v1252 = 1;
                }
                if (v945)
                {
                  JSC::RegExp::getCaptureGroupNameForSubpatternId((uint64_t)v1232, v945, &v1239);
                  if (v1239)
                  {
                    v1152 = *((unsigned int *)v1239 + 1);
                    if ((_DWORD)v1152)
                    {
                      v1224 = v1224 & 0xFFFFFF0000000000 | v1152 | ((unint64_t)((*((_DWORD *)v1239 + 4) >> 2) & 1) << 32);
                      v1153 = JSC::RegExp::subpatternIdForGroupName<int const*>((uint64_t)v1232, *((_QWORD *)v1239 + 1), v1224, v184);
                      if (v945 == v1153)
                      {
                        JSC::Identifier::fromString((uint64_t **)v1235, &v1239, v178, v1154, v180, v171, v172, v173, (WTF::StringImpl **)var60);
                        v1160 = var60[0];
                        v1161 = (int *)v1226;
                        v1162 = (uint64_t)v1235;
                        v1163 = v948;
                      }
                      else if (v1153)
                      {
                        v179 = *(unsigned int *)(v184 + 8 * v1153);
                        if ((v179 & 0x80000000) != 0)
                        {
                          v1223 = 10;
                        }
                        else
                        {
                          v1223 = (uint64_t)JSC::jsSubstring(v1235, (uint64_t)a1, (JSC::JSGlobalObject *)a2, (JSC::JSString *)v179, (*(_DWORD *)(v184 + 4 * ((2 * v1153) | 1)) - v179), v171, v172, v173, v1155);
                          if (*((_DWORD *)v174 + 20)
                            && JSC::VM::hasExceptionsAfterHandlingTraps(v174, v1169, (uint64_t)v178, v179, v180, v171, v172, v173))
                          {
                            v1170 = v1239;
                            v1239 = 0;
                            if (v1170)
                            {
                              if (*(_DWORD *)v1170 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v1170, v177, (uint64_t)v178, v179, v180, v171, v172, v173);
                                WTF::fastFree(v1171, v1172, v1173, v1174, v1175, v1176, v1177, v1178);
                              }
                              else
                              {
                                *(_DWORD *)v1170 -= 2;
                              }
                            }
                            goto LABEL_462;
                          }
                        }
                        JSC::Identifier::fromString((uint64_t **)v1235, &v1239, v178, v179, v180, v171, v172, v173, (WTF::StringImpl **)var60);
                        v1160 = var60[0];
                        v1161 = (int *)v1226;
                        v1162 = (uint64_t)v1235;
                        v1163 = v1223;
                      }
                      else
                      {
                        JSC::Identifier::fromString((uint64_t **)v1235, &v1239, v178, v1154, v180, v171, v172, v173, (WTF::StringImpl **)var60);
                        v1160 = var60[0];
                        v1161 = (int *)v1226;
                        v1162 = (uint64_t)v1235;
                        v1163 = 10;
                      }
                      JSC::JSObject::putDirect(v1161, v1162, (unint64_t)v1160, v1163, 0, v1159, v1156, v1157, v1158);
                      v1164 = (WTF::StringImpl *)var60[0];
                      var60[0] = 0;
                      if (v1164)
                      {
                        if (*(_DWORD *)v1164 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v1164, v1151, (uint64_t)v178, v179, v180, v171, v172, v173);
                          WTF::fastFree(v1187, v1188, v1189, v1190, v1191, v1192, v1193, v1194);
                        }
                        else
                        {
                          *(_DWORD *)v1164 -= 2;
                        }
                      }
                    }
                    v1165 = v1239;
                    v1239 = 0;
                    if (v1165)
                    {
                      if (*(_DWORD *)v1165 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v1165, v1151, (uint64_t)v178, v179, v180, v171, v172, v173);
                        WTF::fastFree(v1179, v1180, v1181, v1182, v1183, v1184, v1185, v1186);
                      }
                      else
                      {
                        *(_DWORD *)v1165 -= 2;
                      }
                    }
                  }
                }
                v946 += 2;
                ++v945;
              }
              while (v945 < (*((_DWORD *)v1232 + 6) + 1));
            }
            v190 = v165;
            v197 = (uint64_t)v1226;
          }
          else if (*((_DWORD *)v1232 + 6) == -1)
          {
            v197 = 0;
          }
          else
          {
            v191 = 0;
            v192 = 1;
            do
            {
              v179 = *(unsigned int *)(v184 + 4 * (v192 - 1));
              if ((v179 & 0x80000000) != 0)
              {
                v194 = 10;
              }
              else
              {
                v194 = (uint64_t)JSC::jsSubstring(v1235, (uint64_t)a1, (JSC::JSGlobalObject *)a2, (JSC::JSString *)v179, (*(_DWORD *)(v184 + 4 * v192) - v179), v171, v172, v173, v181);
                if (*((_DWORD *)v174 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v174, v193, (uint64_t)v178, v179, v180, v171, v172, v173))
                {
                  goto LABEL_462;
                }
              }
              v195 = v1253;
              if (v1253 != v1254 && (v1255 != v1256 ? (v196 = v1255 == 0) : (v196 = 1), v196))
              {
                *(_QWORD *)&v1255[8 * v1253] = v194;
                v1253 = v195 + 1;
              }
              else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1253, v194, (uint64_t)v178, v179, v180, v171, v172, v173) == 1)
              {
                v1252 = 1;
              }
              ++v191;
              v192 += 2;
            }
            while (v191 < (*((_DWORD *)v1232 + 6) + 1));
            v197 = 0;
            v190 = v165;
          }
          v198 = (unint64_t)v1241 | 0xFFFE000000000000;
          if ((int)v1241 < 0)
            v198 = COERCE__INT64((double)v1241) + 0x2000000000000;
          if ((unint64_t)v1241 >> 32)
            v199 = COERCE__INT64((double)(unint64_t)v1241) + 0x2000000000000;
          else
            v199 = v198;
          v200 = v1253;
          if (v1253 == v1254 || v1255 != v1256 && v1255)
          {
            v261 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v1253, v199, (uint64_t)v178, v179, v180, v171, v172, v173);
            v190 = v165;
            if (v261 == 1)
              v1252 = 1;
          }
          else
          {
            *(_QWORD *)&v1255[8 * v1253] = v199;
            v1253 = v200 + 1;
          }
          v201 = v1253;
          if (v1253 == v1254 || v1255 != v1256 && v1255)
          {
            v262 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v1253, a2, (uint64_t)v178, v179, v180, v171, v172, v173);
            v190 = v165;
            if (v262 == 1)
              v1252 = 1;
          }
          else
          {
            *(_QWORD *)&v1255[8 * v1253] = a2;
            v1253 = v201 + 1;
          }
          if (v190)
            JSC::CachedCall::appendArgument((uint64_t *)&__dst, v197, (uint64_t)v178, v179, v180, v171, v172, v173);
          *(_QWORD *)&v1250 = 10;
          if (v1252)
          {
LABEL_461:
            JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v1244);
            goto LABEL_462;
          }
          v202 = v1247;
          v203 = v1257;
          if (v1257)
            goto LABEL_239;
          v572 = (unsigned int *)(v1247 + 80);
          v573 = *(_DWORD *)(v1247 + 80);
          if ((v573 & 0x20) == 0)
          {
            do
              v574 = __ldaxr(v572);
            while (__stlxr(v574 | 0x20, v572));
          }
          JSC::CachedCall::relink((JSC::CachedCall *)&__dst, v199, (uint64_t)v178, v179, v180, v171, v172, v173);
          if (*v572
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v202, (uint64_t)v177, (uint64_t)v178, v179, v180, v171, v172, v173))
          {
            v575 = 0;
            v203 = 0;
            v1228 = *(WTF::StringImpl **)(v202 + 16);
          }
          else
          {
            v575 = 1;
            v203 = v1257;
          }
          if ((v573 & 0x20) == 0)
          {
            do
              v576 = __ldaxr(v572);
            while (__stlxr(v576 & 0xFFFFFFDF, v572));
          }
          v204 = v1228;
          if (v575)
LABEL_239:
            v204 = (WTF::StringImpl *)vmEntryToJavaScript(v203, (JSC::VM *)v202, (uint64_t)&v1248 + 8, v179, v180, v171, v172, v173);
          *(_BYTE *)(v202 + 93120) = 1;
          v1239 = v204;
          v174 = v1244;
          v206 = (unint64_t)v204;
          if (*((_DWORD *)v1244 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v1244, (uint64_t)v177, (uint64_t)v178, v179, v180, v171, v172, v173))
            {
              goto LABEL_462;
            }
            v206 = (unint64_t)v1239;
          }
          if ((v206 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v206 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1239, a1, v178, v179, v180, v171, v172, v173, var60);
          }
          else
          {
            v207 = *(int **)(v206 + 8);
            if ((v207 & 1) != 0)
              v207 = *JSC::JSRopeString::resolveRope(v206, a1, (uint64_t)v178, v179, v205, v180, v171, v172, v173);
            if (v207)
              *v207 += 2;
            var60[0] = v207;
          }
          LODWORD(v208) = HIDWORD(v1259);
          if (HIDWORD(v1259) == (_DWORD)v1259)
          {
            v430 = (uint64_t *)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1258, HIDWORD(v1259) + 1, (unint64_t)var60);
            v208 = HIDWORD(v1259);
            v431 = v1258;
            v432 = *v430;
            *v430 = 0;
            *((_QWORD *)v431 + v208) = v432;
          }
          else
          {
            v209 = var60[0];
            var60[0] = 0;
            *((_QWORD *)v1258 + HIDWORD(v1259)) = v209;
          }
          HIDWORD(v1259) = v208 + 1;
          v210 = (WTF::StringImpl *)var60[0];
          var60[0] = 0;
          if (v210)
          {
            if (*(_DWORD *)v210 == 2)
            {
              WTF::StringImpl::~StringImpl(v210, v177, (uint64_t)v178, v179, v180, v171, v172, v173);
              WTF::fastFree(v275, v276, v277, v278, v279, v280, v281, v282);
            }
            else
            {
              *(_DWORD *)v210 -= 2;
            }
          }
          if (*((_DWORD *)v174 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v174, (uint64_t)v177, (uint64_t)v178, v179, v180, v171, v172, v173))
          {
LABEL_462:
            JSC::CachedCall::~CachedCall((JSC::CachedCall *)&__dst, v177, (uint64_t)v178, v179, v180, v171, v172, v173);
            goto LABEL_179;
          }
          v1228 = v204;
          v211 = (int)v1242;
          v1267 = (unint64_t)v1242;
          if (v1241 == v1242)
          {
            v175 = (_DWORD)v1242 + 1;
            v579 = v1243;
            if ((int)v1242 + 1 > v1243)
              break;
            v951 = *(WTF::StringImpl **)v1234;
            if (*(_QWORD *)v1234)
            {
              if (*((_DWORD *)v951 + 1) > v1242
                && (WTF::StringImpl::at(v951, v1242) & 0xFC00) == 0xD800)
              {
                v952 = *(WTF::StringImpl **)v1234;
                if (*(_QWORD *)v1234)
                {
                  if (*((_DWORD *)v952 + 1) > v175 && (WTF::StringImpl::at(v952, v211 + 1) & 0xFC00) == 0xDC00)
                  {
                    v175 = v211 + 2;
                    if (v211 + 2 > v579)
                      break;
                  }
                }
              }
            }
          }
          else
          {
            v175 = v1242;
          }
        }
        JSC::CachedCall::~CachedCall((JSC::CachedCall *)&__dst, v177, (uint64_t)v178, v179, v180, v171, v172, v173);
LABEL_821:
        v580 = HIDWORD(v1259);
        if (!v1267)
        {
          v42 = a2;
          if (!HIDWORD(v1259))
            goto LABEL_823;
        }
        v584 = v1243;
        if (v1243 > v1267)
        {
          if (HIDWORD(v1262) == (_DWORD)v1262)
          {
            if (!WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int &>((uint64_t)&v1261, (int *)&v1267, (int *)&v1243, a4, a5, a6, a7, a8))
            {
LABEL_1107:
              v802 = &v1244;
              goto LABEL_1108;
            }
            v580 = HIDWORD(v1259);
          }
          else
          {
            v614 = HIDWORD(v1262) + 1;
            v615 = (_DWORD *)((char *)v1261 + 8 * HIDWORD(v1262));
            *v615 = v1267;
            v615[1] = v584;
            HIDWORD(v1262) = v614;
          }
        }
        v585 = v1261;
        v586 = HIDWORD(v1262);
        v587 = v1258;
        v588 = (unint64_t *)*((_QWORD *)a1 + 7);
        v1270 = (JSC *)v588;
        if (HIDWORD(v1262) != 1 || v580)
        {
          v589 = SHIDWORD(v1262);
          if (HIDWORD(v1262) != 2 || v580 != 1)
          {
            if (SHIDWORD(v1262) < 1)
            {
              v591 = 0;
              v590 = 0;
            }
            else
            {
              LODWORD(v590) = 0;
              v591 = 0;
              v592 = (_DWORD *)((char *)v1261 + 4);
              do
              {
                v593 = *v592 - *(v592 - 1);
                v594 = __OFADD__((_DWORD)v590, v593);
                v595 = v590 + v593;
                if (v594)
                  v591 = 1;
                if (v594)
                  v590 = v590;
                else
                  v590 = v595;
                v592 += 2;
                --v586;
              }
              while (v586);
            }
            v596 = 1;
            if (v580 >= 1)
            {
              v597 = v1258;
              v598 = v590;
              v599 = v580;
              do
              {
                v600 = *(_QWORD *)v597;
                if (*(_QWORD *)v597)
                {
                  v601 = *(unsigned int *)(v600 + 4);
                  v590 = v601 + (int)v598;
                  v602 = (unint64_t)(v590 + 0x80000000) >> 32;
                  if ((_DWORD)v601)
                    v603 = v602 == 0;
                  else
                    v603 = 0;
                  if (v603
                    || (!v602 ? (v590 = v590) : (v591 = 1, v590 = v598), (_DWORD)v601))
                  {
                    if ((*(_BYTE *)(v600 + 16) & 4) == 0)
                      v596 = 0;
                  }
                }
                else
                {
                  v590 = v598;
                }
                v597 = (WTF *)((char *)v597 + 8);
                v598 = v590;
                --v599;
              }
              while (v599);
            }
            if (!v591)
            {
              if (!(_DWORD)v590)
              {
                v42 = v588[5246];
                goto LABEL_823;
              }
              if (*(_QWORD *)v1234)
                v616 = (*(unsigned __int8 *)(*(_QWORD *)v1234 + 16) >> 2) & 1;
              else
                v616 = 1;
              v1232 = (JSC::RegExp *)v588;
              if ((v616 & v596) == 1)
              {
                if ((v590 & 0x80000000) == 0)
                {
                  WTF::tryFastCompactMalloc((WTF *)(v590 + 20), &__dst);
                  v617 = __dst;
                  if (__dst)
                  {
                    v618 = (char *)__dst + 20;
                    *(_DWORD *)__dst = 2;
                    v617[1] = v590;
                    *((_QWORD *)v617 + 1) = v617 + 5;
                    v617[4] = 4;
                    if ((int)v589 <= v580)
                      v619 = v580;
                    else
                      v619 = v589;
                    if ((int)v619 >= 1)
                    {
                      v620 = 0;
                      v621 = 0;
                      v622 = (_DWORD *)((char *)v585 + 4);
                      do
                      {
                        if (v620 < v589)
                        {
                          v623 = *(WTF::StringImpl **)v1234;
                          if (*(_QWORD *)v1234
                            && (v624 = *((unsigned int *)v623 + 1),
                                v625 = *(v622 - 1),
                                v624 > v625))
                          {
                            v626 = *((unsigned int *)v623 + 4);
                            v627 = (char *)*((_QWORD *)v623 + 1);
                            v628 = *v622 - v625;
                            if ((int)v624 - (int)v625 > v628 || (v628 = v624 - v625, (_DWORD)v625))
                            {
                              v629 = (v626 >> 2) & 1;
                              v630 = v624 - v625;
                              v48 = v628;
                              if ((_DWORD)v629)
                              {
                                if (v630 < v628)
                                  goto LABEL_1458;
                                v627 += v625;
                                LODWORD(v48) = v628;
                              }
                              else
                              {
                                if (v630 < v628)
                                  goto LABEL_1458;
                                v627 += 2 * v625;
                              }
                            }
                            else
                            {
                              v48 = v624 & 0xFFFFFFFEFFFFFFFFLL | (((v626 >> 2) & 1) << 32);
                            }
                            v631 = &v618[v621];
                            if ((_DWORD)v48 == 1)
                            {
                              *v631 = *v627;
                              LODWORD(v48) = 1;
                            }
                            else if ((_DWORD)v48)
                            {
                              memcpy(v631, v627, v48);
                            }
                          }
                          else
                          {
                            LODWORD(v48) = 0;
                          }
                          v621 += v48;
                        }
                        if (v620 < v580)
                        {
                          v632 = *((_QWORD *)v587 + v620);
                          if (v632)
                          {
                            v633 = *(char **)(v632 + 8);
                            v634 = *(_DWORD *)(v632 + 4);
                            v635 = &v618[v621];
                            if (v634 == 1)
                            {
                              *v635 = *v633;
                              v634 = 1;
                            }
                            else if (v634)
                            {
                              memcpy(v635, v633, *(unsigned int *)(v632 + 4));
                            }
                          }
                          else
                          {
                            v634 = 0;
                          }
                          v621 += v634;
                        }
                        ++v620;
                        v622 += 2;
                      }
                      while (v619 != v620);
                    }
                    __dst = v617;
                    goto LABEL_909;
                  }
                }
              }
              else if (v590 <= 0x7FFFFFEF)
              {
                WTF::tryFastCompactMalloc((WTF *)(2 * v590 + 20), &__dst);
                v48 = (uint64_t)__dst;
                if (__dst)
                {
                  v725 = (char *)__dst + 20;
                  *(_DWORD *)__dst = 2;
                  *(_DWORD *)(v48 + 4) = v590;
                  *(_QWORD *)(v48 + 8) = v48 + 20;
                  *(_DWORD *)(v48 + 16) = 0;
                  if ((int)v589 <= v580)
                    v726 = v580;
                  else
                    v726 = v589;
                  if ((int)v726 >= 1)
                  {
                    v727 = 0;
                    v728 = 0;
                    do
                    {
                      if (v727 < v589)
                      {
                        v729 = *(WTF::StringImpl **)v1234;
                        if (*(_QWORD *)v1234
                          && (v730 = *((unsigned int *)v729 + 1),
                              v731 = *((unsigned int *)v585 + 2 * v727),
                              v730 > v731))
                        {
                          v732 = *((unsigned int *)v729 + 4);
                          v733 = (int8x16_t *)*((_QWORD *)v729 + 1);
                          v734 = *((_DWORD *)v585 + 2 * v727 + 1) - v731;
                          if ((int)v730 - (int)v731 > v734 || (v734 = v730 - v731, (_DWORD)v731))
                          {
                            v735 = (v732 >> 2) & 1;
                            v736 = v730 - v731;
                            v737 = v734;
                            if ((_DWORD)v735)
                            {
                              if (v736 < v734)
                                goto LABEL_1458;
                              v733 = (int8x16_t *)((char *)v733 + v731);
                              v737 = v734 | 0x100000000;
                            }
                            else
                            {
                              if (v736 < v734)
                                goto LABEL_1458;
                              v733 = (int8x16_t *)((char *)v733 + 2 * v731);
                            }
                          }
                          else
                          {
                            v737 = v730 & 0xFFFFFFFEFFFFFFFFLL | (((v732 >> 2) & 1) << 32);
                          }
                          v738 = &v725[2 * v728];
                          if ((v737 & 0x100000000) != 0)
                          {
                            if (v737 < 0x40)
                            {
                              v1130 = &v725[2 * v728];
                            }
                            else
                            {
                              v1130 = &v738[2 * (v737 & 0xFFFFFFC0)];
                              v1131 = &v725[2 * v728];
                              do
                              {
                                v1274.val[0] = *v733;
                                v1132 = v733[1];
                                v1279.val[0] = v733[2];
                                v1133 = v733[3];
                                v733 += 4;
                                v1284.val[1] = 0uLL;
                                v1284.val[0] = v1133;
                                v1279.val[1] = 0u;
                                v1288.val[0] = v1132;
                                v1274.val[1] = 0u;
                                v1134 = v1131;
                                vst2q_s8(v1134, v1274);
                                v1134 += 32;
                                v1288.val[1] = 0u;
                                vst2q_s8(v1134, v1288);
                                v1135 = v1131 + 64;
                                vst2q_s8(v1135, v1279);
                                v1136 = v1131 + 96;
                                vst2q_s8(v1136, v1284);
                                v1131 += 128;
                              }
                              while (v1131 != v1130);
                            }
                            while (v1130 != &v738[2 * v737])
                            {
                              v1137 = v733->u8[0];
                              v733 = (int8x16_t *)((char *)v733 + 1);
                              *(_WORD *)v1130 = v1137;
                              v1130 += 2;
                            }
                          }
                          else if ((_DWORD)v737 == 1)
                          {
                            *(_WORD *)v738 = v733->i16[0];
                            LODWORD(v737) = 1;
                          }
                          else if ((_DWORD)v737)
                          {
                            memcpy(v738, v733, 2 * v737);
                          }
                        }
                        else
                        {
                          LODWORD(v737) = 0;
                        }
                        v728 += v737;
                      }
                      if (v727 < v580)
                      {
                        v739 = *((_QWORD *)v587 + v727);
                        if (v739)
                        {
                          v740 = *(int8x16_t **)(v739 + 8);
                          v741 = *(unsigned int *)(v739 + 4);
                          v742 = &v725[2 * v728];
                          if ((*(_BYTE *)(v739 + 16) & 4) != 0)
                          {
                            if (v741 >= 0x40)
                            {
                              v743 = &v742[2 * (v741 & 0xFFFFFFC0)];
                              v745 = &v725[2 * v728];
                              do
                              {
                                v1272.val[0] = *v740;
                                v746 = v740[1];
                                v1277.val[0] = v740[2];
                                v747 = v740[3];
                                v740 += 4;
                                v1286.val[1] = 0u;
                                v1286.val[0] = v747;
                                v1277.val[1] = 0u;
                                v1282.val[0] = v746;
                                v1272.val[1] = 0u;
                                v748 = v745;
                                vst2q_s8(v748, v1272);
                                v748 += 32;
                                v1282.val[1] = 0u;
                                vst2q_s8(v748, v1282);
                                v749 = v745 + 64;
                                vst2q_s8(v749, v1277);
                                v750 = v745 + 96;
                                vst2q_s8(v750, v1286);
                                v745 += 128;
                              }
                              while (v745 != v743);
                            }
                            else
                            {
                              v743 = &v725[2 * v728];
                            }
                            while (v743 != &v742[2 * v741])
                            {
                              v744 = v740->u8[0];
                              v740 = (int8x16_t *)((char *)v740 + 1);
                              *(_WORD *)v743 = v744;
                              v743 += 2;
                            }
                          }
                          else if ((_DWORD)v741 == 1)
                          {
                            *(_WORD *)v742 = v740->i16[0];
                            LODWORD(v741) = 1;
                          }
                          else if ((_DWORD)v741)
                          {
                            memcpy(v742, v740, 2 * v741);
                          }
                        }
                        else
                        {
                          LODWORD(v741) = 0;
                        }
                        v728 += v741;
                      }
                      ++v727;
                    }
                    while (v727 != v726);
                  }
                  __dst = (void *)v48;
LABEL_909:
                  v42 = JSC::jsString((uint64_t)v1232, (JSC::VM *)&__dst, v34, v35, v36, a6, a7, a8);
                  v636 = (WTF::StringImpl *)__dst;
                  __dst = 0;
                  if (!v636)
                    goto LABEL_823;
LABEL_910:
                  if (*(_DWORD *)v636 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v636, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                    WTF::fastFree(v653, v654, v655, v656, v657, v658, v659, v660);
                  }
                  else
                  {
                    *(_DWORD *)v636 -= 2;
                  }
                  goto LABEL_823;
                }
              }
              JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v1270);
              v42 = 0;
              goto LABEL_823;
            }
            v802 = &v1270;
LABEL_1108:
            JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)v802);
            goto LABEL_179;
          }
          v638 = *(unsigned int *)v1261;
          v637 = *((_DWORD *)v1261 + 1);
          v639 = (v637 - v638);
          if (v637 == (_DWORD)v638)
          {
            WTF::StringImpl::s_emptyAtomString += 2;
            v642 = &WTF::StringImpl::s_emptyAtomString;
            goto LABEL_930;
          }
          v640 = *(WTF::StringImpl **)v1234;
          if ((*(_DWORD *)(*(_QWORD *)v1234 + 16) & 4) != 0)
          {
            if (v639 <= 0xC)
            {
              v641 = (_BYTE *)(*((_QWORD *)v640 + 1) + v638);
              v642 = (int *)WTF::fastCompactMalloc((WTF *)(v639 + 20));
              v643 = v642 + 5;
              *v642 = 2;
              v642[1] = v639;
              *((_QWORD *)v642 + 1) = v642 + 5;
              v642[4] = 4;
              if ((_DWORD)v639 == 1)
                *v643 = *v641;
              else
                memcpy(v643, v641, v639);
              goto LABEL_930;
            }
          }
          else if (v639 <= 6)
          {
            WTF::StringImpl::create((_WORD *)(*((_QWORD *)v640 + 1) + 2 * v638), v639, (uint64_t *)&__dst);
            v642 = (int *)__dst;
            goto LABEL_930;
          }
          v770 = *(WTF::StringImpl **)v1234;
          if ((*(_DWORD *)(*(_QWORD *)v1234 + 16) & 3) == 2)
            v770 = (WTF::StringImpl *)*((_QWORD *)v640 + 3);
          v771 = WTF::fastCompactMalloc((WTF *)0x20);
          v642 = (int *)v771;
          v772 = *((_DWORD *)v640 + 4);
          v773 = *((_QWORD *)v640 + 1);
          *(_DWORD *)v770 += 2;
          *(_DWORD *)v771 = 2;
          *(_DWORD *)(v771 + 4) = v639;
          if ((v772 & 4) != 0)
          {
            *(_QWORD *)(v771 + 8) = v773 + v638;
            *(_DWORD *)(v771 + 16) = 6;
          }
          else
          {
            *(_QWORD *)(v771 + 8) = v773 + 2 * v638;
            *(_DWORD *)(v771 + 16) = 2;
          }
          *(_QWORD *)(v771 + 24) = v770;
LABEL_930:
          v1269 = (const WTF::String *)v642;
          v662 = *((unsigned int *)v585 + 2);
          v661 = *((_DWORD *)v585 + 3);
          v663 = (v661 - v662);
          if (v661 == (_DWORD)v662)
          {
            WTF::StringImpl::s_emptyAtomString += 2;
            v666 = &WTF::StringImpl::s_emptyAtomString;
            goto LABEL_936;
          }
          v664 = *(WTF::StringImpl **)v1234;
          if ((*(_DWORD *)(*(_QWORD *)v1234 + 16) & 4) != 0)
          {
            if (v663 <= 0xC)
            {
              v665 = (_BYTE *)(*((_QWORD *)v664 + 1) + v662);
              v666 = (int *)WTF::fastCompactMalloc((WTF *)(v663 + 20));
              v667 = v666 + 5;
              *v666 = 2;
              v666[1] = v663;
              *((_QWORD *)v666 + 1) = v666 + 5;
              v666[4] = 4;
              __dst = v666;
              if ((_DWORD)v663 == 1)
                *v667 = *v665;
              else
                memcpy(v667, v665, v663);
              goto LABEL_936;
            }
          }
          else if (v663 <= 6)
          {
            WTF::StringImpl::create((_WORD *)(*((_QWORD *)v664 + 1) + 2 * v662), v663, (uint64_t *)&__dst);
            v666 = (int *)__dst;
            goto LABEL_936;
          }
          v774 = *(WTF::StringImpl **)v1234;
          if ((*(_DWORD *)(*(_QWORD *)v1234 + 16) & 3) == 2)
            v774 = (WTF::StringImpl *)*((_QWORD *)v664 + 3);
          v775 = WTF::fastCompactMalloc((WTF *)0x20);
          v666 = (int *)v775;
          v776 = *((_DWORD *)v664 + 4);
          v777 = *((_QWORD *)v664 + 1);
          *(_DWORD *)v774 += 2;
          *(_DWORD *)v775 = 2;
          *(_DWORD *)(v775 + 4) = v663;
          if ((v776 & 4) != 0)
          {
            *(_QWORD *)(v775 + 8) = v777 + v662;
            *(_DWORD *)(v775 + 16) = 6;
          }
          else
          {
            *(_QWORD *)(v775 + 8) = v777 + 2 * v662;
            *(_DWORD *)(v775 + 16) = 2;
          }
          *(_QWORD *)(v775 + 24) = v774;
LABEL_936:
          v1268 = (WTF::StringImpl *)v666;
          v668 = (int *)*((_QWORD *)a1 + 7);
          var60[0] = v668;
          v669 = v1269;
          if (v1269)
            v670 = *((_DWORD *)v1269 + 1);
          else
            v670 = 0;
          v671 = *(_QWORD *)v587;
          if (*(_QWORD *)v587)
            v672 = *(_DWORD *)(v671 + 4);
          else
            v672 = 0;
          if (v666)
            v673 = v666[1];
          else
            v673 = 0;
          if (v670)
          {
            if (v672)
            {
              if (v673)
              {
                if (((v673 | v672) & 0x80000000) == 0)
                {
                  v674 = __OFADD__(v672, v673);
                  if ((v670 & 0x80000000) == 0 && !v674 && !__OFADD__(v670, v672 + v673))
                  {
                    if (v670 + (unint64_t)v672 + v673 + 20 >= 0x40)
                    {
                      v751 = JSC::jsString((JSC *)v668, (JSC::VM *)&v1269, v1269, v671, a5, a6, a7, a8);
                      v758 = (JSC::JSString *)JSC::jsString((JSC *)v668, v587, v752, v753, v754, v755, v756, v757);
                      v765 = JSC::jsString((JSC *)v668, (JSC::VM *)&v1268, v759, v760, v761, v762, v763, v764);
                      v42 = JSC::JSRopeString::create((JSC::JSRopeString *)v668, v751, v758, v765, v766, v767, v768, v769);
                      goto LABEL_977;
                    }
                    if (v1269)
                      v675 = *((_DWORD *)v1269 + 1);
                    else
                      v675 = 0;
                    if (v671)
                      v676 = *(_DWORD *)(v671 + 4);
                    else
                      v676 = 0;
                    if (v666)
                      v677 = v666[1];
                    else
                      v677 = 0;
                    if ((v677 | v676) < 0
                      || ((v594 = __OFADD__(v676, v677), v678 = v676 + v677, !v594) ? (v679 = 0) : (v679 = 1),
                          v675 < 0 || (v679 & 1) != 0 || (v680 = (v675 + v678), __OFADD__(v675, v678))))
                    {
                      __dst = 0;
                      goto LABEL_1103;
                    }
                    if (v1269 && (*((_BYTE *)v1269 + 16) & 4) == 0)
                    {
                      v682 = 0;
                    }
                    else if (v671)
                    {
                      v681 = *(_DWORD *)(v671 + 16);
                      v682 = (v681 >> 2) & 1;
                      if (v666 && (v681 & 4) != 0)
                        goto LABEL_971;
                    }
                    else
                    {
                      if (v666)
                      {
LABEL_971:
                        v682 = (*((unsigned __int8 *)v666 + 16) >> 2) & 1;
                        goto LABEL_972;
                      }
                      v682 = 1;
                    }
LABEL_972:
                    WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v680, v682, (uint64_t)v1269, v671, (uint64_t)v666, (int **)&__dst);
                    v689 = (WTF::StringImpl *)__dst;
                    if (__dst)
                    {
                      __dst = 0;
                      v1241 = v689;
                      v42 = JSC::JSString::create((uint64_t)v668, (JSC::VM *)&v1241, v683, v684, v685, v686, v687, v688);
                      v690 = v1241;
                      v1241 = 0;
                      if (v690)
                      {
                        if (*(_DWORD *)v690 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v690, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                          WTF::fastFree(v803, v804, v805, v806, v807, v808, v809, v810);
                        }
                        else
                        {
                          *(_DWORD *)v690 -= 2;
                        }
                      }
LABEL_974:
                      v691 = (WTF::StringImpl *)__dst;
                      __dst = 0;
                      if (!v691)
                        goto LABEL_977;
                      goto LABEL_975;
                    }
LABEL_1103:
                    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)var60);
                    v42 = 0;
                    goto LABEL_974;
                  }
                }
                p_dst = (void **)var60;
LABEL_1105:
                JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)p_dst);
                v42 = 0;
                goto LABEL_977;
              }
              __dst = v668;
              if (v1269)
              {
                v926 = *((unsigned int *)v1269 + 1);
                if ((_DWORD)v926)
                {
                  if (v671)
                  {
                    v927 = *(unsigned int *)(v671 + 4);
                    if ((_DWORD)v927)
                    {
                      v928 = __OFADD__((_DWORD)v926, (_DWORD)v927);
                      if (((v927 | v926) & 0x80000000) == 0 && !v928)
                      {
                        if ((unint64_t)(v926 + v927 + 20) < 0x30)
                        {
                          WTF::tryMakeString<WTF::String,WTF::String>((uint64_t)&v1269, (uint64_t *)v587, (int **)&v1241);
LABEL_995:
                          v704 = v1241;
                          if (v1241)
                          {
                            v1241 = 0;
                            v1239 = v704;
                            v42 = JSC::JSString::create((uint64_t)v668, (JSC::VM *)&v1239, v698, v699, v700, v701, v702, v703);
                            v705 = v1239;
                            v1239 = 0;
                            if (v705)
                            {
                              if (*(_DWORD *)v705 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v705, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                                WTF::fastFree(v811, v812, v813, v814, v815, v816, v817, v818);
                              }
                              else
                              {
                                *(_DWORD *)v705 -= 2;
                              }
                            }
                          }
                          else
                          {
                            JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&__dst);
                            v42 = 0;
                          }
                          v691 = v1241;
                          v1241 = 0;
                          if (!v691)
                          {
LABEL_977:
                            v692 = v1268;
                            v1268 = 0;
                            if (v692)
                            {
                              if (*(_DWORD *)v692 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v692, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                                WTF::fastFree(v706, v707, v708, v709, v710, v711, v712, v713);
                              }
                              else
                              {
                                *(_DWORD *)v692 -= 2;
                              }
                            }
                            v636 = v1269;
                            v1269 = 0;
                            if (!v636)
                              goto LABEL_823;
                            goto LABEL_910;
                          }
LABEL_975:
                          if (*(_DWORD *)v691 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v691, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                            WTF::fastFree(v714, v715, v716, v717, v718, v719, v720, v721);
                          }
                          else
                          {
                            *(_DWORD *)v691 -= 2;
                          }
                          goto LABEL_977;
                        }
                        v792 = JSC::jsString((JSC *)v668, (JSC::VM *)&v1269, v1269, v671, a5, a6, a7, a8);
                        v794 = (JSC *)v668;
                        v793 = v587;
LABEL_1096:
                        v795 = (JSC::JSString *)JSC::jsString(v794, v793, v786, v787, v788, v789, v790, v791);
                        v42 = JSC::JSRopeString::create((JSC::JSRopeString *)v668, v792, v795, v796, v797, v798, v799, v800);
                        goto LABEL_977;
                      }
LABEL_1316:
                      p_dst = &__dst;
                      goto LABEL_1105;
                    }
                  }
                  goto LABEL_1314;
                }
              }
LABEL_1315:
              v783 = (JSC *)v668;
              v782 = (WTF::StringImpl **)v587;
              goto LABEL_1093;
            }
            __dst = v668;
            if (v1269)
            {
              v693 = *((unsigned int *)v1269 + 1);
              if ((_DWORD)v693)
              {
                if (!v666 || (v694 = v666[1], !(_DWORD)v694))
                {
LABEL_1314:
                  v782 = &v1269;
                  goto LABEL_1092;
                }
                v695 = (v693 + v694);
                v696 = __OFADD__((_DWORD)v693, (_DWORD)v694);
                if (((v694 | v693) & 0x80000000) != 0 || v696)
                  goto LABEL_1316;
                if ((unint64_t)(v693 + v694 + 20) < 0x30)
                {
                  if ((*((_BYTE *)v1269 + 16) & 4) != 0)
                    v697 = (*((unsigned __int8 *)v666 + 16) >> 2) & 1;
                  else
                    v697 = 0;
LABEL_994:
                  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v695, v697, (uint64_t)v669, (uint64_t)v666, (int **)&v1241);
                  goto LABEL_995;
                }
                v784 = (JSC::VM *)&v1269;
                v785 = (JSC *)v668;
                goto LABEL_1095;
              }
            }
          }
          else
          {
            __dst = v668;
            if (v671)
            {
              v722 = *(unsigned int *)(v671 + 4);
              if ((_DWORD)v722)
              {
                if (!v666)
                  goto LABEL_1315;
                v723 = v666[1];
                if (!(_DWORD)v723)
                  goto LABEL_1315;
                v695 = (v722 + v723);
                v724 = __OFADD__((_DWORD)v722, (_DWORD)v723);
                if (((v723 | v722) & 0x80000000) != 0 || v724)
                  goto LABEL_1316;
                if ((unint64_t)(v722 + v723 + 20) < 0x30)
                {
                  if ((*(_BYTE *)(v671 + 16) & 4) != 0)
                    v697 = (*((unsigned __int8 *)v666 + 16) >> 2) & 1;
                  else
                    v697 = 0;
                  v669 = (const WTF::String *)v671;
                  goto LABEL_994;
                }
                v785 = (JSC *)v668;
                v784 = v587;
LABEL_1095:
                v792 = JSC::jsString(v785, v784, v1269, v671, a5, a6, a7, a8);
                v793 = (JSC::VM *)&v1268;
                v794 = (JSC *)v668;
                goto LABEL_1096;
              }
            }
          }
          v782 = &v1268;
LABEL_1092:
          v783 = (JSC *)v668;
LABEL_1093:
          v42 = JSC::jsString(v783, (JSC::VM *)v782, v1269, v671, a5, a6, a7, a8);
          goto LABEL_977;
        }
        v644 = *(WTF::StringImpl **)v1234;
        if (*(_QWORD *)v1234)
          v645 = *((_DWORD *)v644 + 1);
        else
          v645 = 0;
        v646 = *((_DWORD *)v1261 + 1) - *(_DWORD *)v1261;
        if (*(int *)v1261 <= 0)
        {
          v42 = a2;
          if (v646 >= v645)
            goto LABEL_823;
        }
        if (v646 >= v645)
          v647 = v645;
        else
          v647 = v646;
        if (!(_DWORD)v647)
        {
          v649 = (uint64_t)v588;
          WTF::StringImpl::s_emptyAtomString += 2;
          v651 = &WTF::StringImpl::s_emptyAtomString;
          goto LABEL_1000;
        }
        v648 = *(_DWORD *)v1261 & ~(*(int *)v1261 >> 31);
        if ((*((_DWORD *)v644 + 4) & 4) != 0)
        {
          if (v647 <= 0xC)
          {
            v649 = (uint64_t)v588;
            v650 = (_BYTE *)(*((_QWORD *)v644 + 1) + v648);
            v651 = (int *)WTF::fastCompactMalloc((WTF *)(v647 + 20));
            v652 = v651 + 5;
            *v651 = 2;
            v651[1] = v647;
            *((_QWORD *)v651 + 1) = v651 + 5;
            v651[4] = 4;
            if ((_DWORD)v647 == 1)
              *v652 = *v650;
            else
              memcpy(v652, v650, v647);
            goto LABEL_1000;
          }
        }
        else if (v647 <= 6)
        {
          v649 = (uint64_t)v588;
          WTF::StringImpl::create((_WORD *)(*((_QWORD *)v644 + 1) + 2 * v648), v647, (uint64_t *)&v1241);
          v651 = (int *)v1241;
          goto LABEL_1000;
        }
        v649 = (uint64_t)v588;
        v778 = *(WTF::StringImpl **)v1234;
        if ((*((_DWORD *)v644 + 4) & 3) == 2)
          v778 = (WTF::StringImpl *)*((_QWORD *)v644 + 3);
        v779 = WTF::fastCompactMalloc((WTF *)0x20);
        v651 = (int *)v779;
        v780 = *((_DWORD *)v644 + 4);
        v781 = *((_QWORD *)v644 + 1);
        *(_DWORD *)v778 += 2;
        *(_DWORD *)v779 = 2;
        *(_DWORD *)(v779 + 4) = v647;
        if ((v780 & 4) != 0)
        {
          *(_QWORD *)(v779 + 8) = v781 + v648;
          *(_DWORD *)(v779 + 16) = 6;
        }
        else
        {
          *(_QWORD *)(v779 + 8) = v781 + 2 * v648;
          *(_DWORD *)(v779 + 16) = 2;
        }
        *(_QWORD *)(v779 + 24) = v778;
LABEL_1000:
        __dst = v651;
        v42 = JSC::jsString(v649, (JSC::VM *)&__dst, (uint64_t)a3, a4, a5, a6, a7, a8);
        v636 = (WTF::StringImpl *)__dst;
        __dst = 0;
        if (!v636)
          goto LABEL_823;
        goto LABEL_910;
      }
LABEL_118:
      v1227 = v62;
      v89 = 0;
      v90 = v1235;
      while (1)
      {
        v91 = *((_QWORD *)a1 + 7);
        JSC::RegExp::match(v60, (uint64_t)a1, (uint64_t *)v1234, v89, (uint64_t)a1 + 2200, a6, a7, a8);
        v96 = v95;
        if (!*(_DWORD *)(v91 + 80))
          goto LABEL_120;
        v330 = *(_DWORD *)(v91 + 80);
        if ((v330 & 0x27) != 0 && (v330 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v91 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v91 + 16))
        {
          v98 = 0;
          v97 = 0;
          v99 = -1;
        }
        else
        {
LABEL_120:
          v97 = *((_QWORD *)a1 + 275);
          if (v96 == -1)
          {
            v98 = 0;
            v99 = -1;
          }
          else
          {
            if (*((_DWORD *)a1 + 553) <= 1u)
            {
              __break(0xC471u);
              JUMPOUT(0x198BD2028);
            }
            v98 = (WTF::StringImpl *)*(int *)(v97 + 4);
            v99 = v96;
            *((_QWORD *)a1 + 269) = v60;
            *((_QWORD *)a1 + 268) = a2;
            *((_QWORD *)a1 + 265) = v96;
            *((_QWORD *)a1 + 266) = v98;
            *((_BYTE *)a1 + 2136) = 0;
            if (*(_DWORD *)(v91 + 760) >= *((unsigned __int8 *)a1 + 7))
              JSC::Heap::writeBarrierSlowPath(v91 + 192, (unint64_t)a1);
          }
        }
        v1241 = (WTF::StringImpl *)v99;
        v1242 = v98;
        if (*((_DWORD *)v90 + 20))
        {
          v331 = *((_DWORD *)v90 + 20);
          if ((v331 & 0x27) != 0 && (v331 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v90 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
          if (*((_QWORD *)v90 + 2))
            goto LABEL_179;
          v99 = (unint64_t)v1241;
          v60 = (uint64_t)v1232;
        }
        if (v99 == -1)
          goto LABEL_821;
        if (!(_BYTE)v1237)
        {
          v100 = dword_1ECF2C424;
          v101 = v1267;
          if (v1267 >= v99 && !dword_1ECF2C424)
            goto LABEL_160;
          v102 = HIDWORD(v1262);
          if (HIDWORD(v1262) == (_DWORD)v1262)
          {
            if ((WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1261, (int *)&v1267, (int *)&v1241, a4, a5, a6, a7, a8) & 1) == 0)
            {
              v145 = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)a2);
              v152 = (JSC::Exception *)v145;
              if ((v145 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v145 & 0xFFFFFFFE) + 0x4C)))
              {
                v152 = (JSC::Exception *)JSC::Exception::create((uint64_t)v90, (JSC::VM *)v145, 0, v146, v147, v148, v149, v150);
              }
              JSC::VM::throwException(v90, a1, v152, v151, v146, v147, v148, v149, v150);
              goto LABEL_179;
            }
          }
          else
          {
            v103 = (_DWORD *)((char *)v1261 + 8 * HIDWORD(v1262));
            *v103 = v1267;
            v103[1] = v99;
            if (v101 == (_DWORD)v99)
              *(_QWORD *)v103 = 0;
            HIDWORD(v1262) = v102 + 1;
          }
          if (!v100)
          {
            __dst = 0;
            LODWORD(v256) = HIDWORD(v1259);
            if (HIDWORD(v1259) == (_DWORD)v1259)
            {
              v483 = (uint64_t *)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1258, HIDWORD(v1259) + 1, (unint64_t)&__dst);
              v256 = HIDWORD(v1259);
              v484 = v1258;
              v485 = *v483;
              *v483 = 0;
              *((_QWORD *)v484 + v256) = v485;
            }
            else
            {
              *((_QWORD *)v1258 + HIDWORD(v1259)) = 0;
            }
            HIDWORD(v1259) = v256 + 1;
            v257 = (WTF::StringImpl *)__dst;
            __dst = 0;
            if (v257)
            {
              if (*(_DWORD *)v257 == 2)
              {
                WTF::StringImpl::~StringImpl(v257, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v298, v299, v300, v301, v302, v303, v304, v305);
              }
              else
              {
                *(_DWORD *)v257 -= 2;
              }
            }
            goto LABEL_160;
          }
          __dst = 0;
          *(_QWORD *)&v1246 = 0;
          *(_QWORD *)((char *)&v1246 + 5) = 0;
          v104 = *(WTF::StringImpl **)v1234;
          if (*(_QWORD *)v1234)
          {
            v105 = *((_QWORD *)v104 + 1);
            v106 = *((unsigned int *)v104 + 1) | ((unint64_t)((*((_DWORD *)v104 + 4) >> 2) & 1) << 32);
          }
          else
          {
            v105 = 0;
            v106 = 0x100000000;
          }
          v107 = dword_1ECF2C430;
          v108 = off_1ECF2C428;
          v109 = dword_1ECF2C424;
          if ((dword_1ECF2C430 & 4) != 0)
          {
            if (!dword_1ECF2C424)
              goto LABEL_144;
            v110 = 16;
            if (dword_1ECF2C424 < 0x10uLL)
              v110 = dword_1ECF2C424;
            v111 = v110;
            v112 = (_BYTE *)off_1ECF2C428;
            do
            {
              if (*v112 == 36)
                goto LABEL_165;
              ++v112;
              --v111;
            }
            while (v111);
            if (dword_1ECF2C424 < 0x11)
              goto LABEL_144;
            v112 = memchr((void *)(off_1ECF2C428 + v110), 36, dword_1ECF2C424 - v110);
            if (!v112)
              goto LABEL_144;
LABEL_165:
            a8 = (uint64_t)&v112[-v108];
          }
          else
          {
            if (!dword_1ECF2C424)
              goto LABEL_144;
            v230 = off_1ECF2C428 + 2 * dword_1ECF2C424;
            if (dword_1ECF2C424 > 0x1F)
            {
              v291 = (int16x8_t *)off_1ECF2C428;
              do
              {
                v292.i64[0] = 0x24002400240024;
                v292.i64[1] = 0x24002400240024;
                v293 = (int8x16_t)vceqq_s16(*v291, v292);
                v292.i16[0] = vmaxvq_u16((uint16x8_t)v293);
                if (v292.i32[0])
                  goto LABEL_373;
                v294 = v291 + 1;
                v295 = &v291[1].i8[14];
                ++v291;
              }
              while ((unint64_t)v295 < v230);
              if ((unint64_t)v294 >= v230)
                goto LABEL_144;
              v296.i64[0] = 0x24002400240024;
              v296.i64[1] = 0x24002400240024;
              v293 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v230 + 0xFFFFFFFFFFFFFFF0), v296);
              v296.i16[0] = vmaxvq_u16((uint16x8_t)v293);
              if (!v296.i32[0])
                goto LABEL_144;
              v291 = (int16x8_t *)(v230 + 0xFFFFFFFFFFFFFFF0);
LABEL_373:
              v93 = 0x3000200010000;
              v92 = (uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v293);
              v92.i16[0] = vminvq_u16(v92);
              v119 = &v291->i16[v92.u8[0]];
            }
            else
            {
              v120 = 2 * dword_1ECF2C424;
              v119 = (__int16 *)off_1ECF2C428;
              while (*v119 != 36)
              {
                ++v119;
                v120 -= 2;
                if (!v120)
                  goto LABEL_144;
              }
            }
            if (v119 == (__int16 *)v230)
            {
LABEL_144:
              WTF::StringImpl::s_emptyAtomString += 2;
              __dst = &WTF::StringImpl::s_emptyAtomString;
              DWORD2(v1246) = v109;
              goto LABEL_145;
            }
            a8 = ((uint64_t)v119 - off_1ECF2C428) >> 1;
          }
          if (a8 != -1)
          {
            JSC::substituteBackreferencesSlow((uint64_t)&__dst, v108, v109 | ((unint64_t)((v107 >> 2) & 1) << 32), v105, v106, (unsigned int *)v97, (uint64_t)v1232, a8, *(double *)v92.i64, *(double *)&v93, v94);
            v109 = DWORD2(v1246);
LABEL_145:
            if ((v109 & 0x80000000) != 0)
            {
              v332 = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)a2);
              v339 = (JSC::Exception *)v332;
              if ((v332 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v332 & 0xFFFFFFFE) + 0x4C)))
              {
                v339 = (JSC::Exception *)JSC::Exception::create((uint64_t)v90, (JSC::VM *)v332, 0, v333, v334, v335, v336, v337);
              }
              JSC::VM::throwException(v90, a1, v339, v338, v333, v334, v335, v336, v337);
            }
            else
            {
              v113 = (WTF::StringImpl *)__dst;
              if (__dst)
                goto LABEL_147;
              if ((_QWORD)v1246 && *(_DWORD *)(v1246 + 4) > v109 + (v109 >> 2))
              {
                if ((*(_BYTE *)(v1246 + 16) & 4) != 0)
                  WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&__dst, (WTF::AtomStringImpl *)v109, (uint64_t)a3, a4, a5, a6, a7, a8);
                else
                  WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&__dst, (WTF::AtomStringImpl *)v109, (uint64_t)a3, a4, a5, a6, a7, a8);
                v260 = (WTF::StringImpl *)__dst;
                __dst = (void *)v1246;
                *(_QWORD *)&v1246 = 0;
                if (v260)
                {
                  if (*(_DWORD *)v260 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v260, v231, v232, v233, v234, v235, v236, v237);
                    WTF::fastFree(v267, v268, v269, v270, v271, v272, v273, v274);
                  }
                  else
                  {
                    *(_DWORD *)v260 -= 2;
                  }
                }
              }
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&__dst);
              v113 = (WTF::StringImpl *)__dst;
              if (__dst)
LABEL_147:
                *(_DWORD *)v113 += 2;
              v1239 = v113;
              LODWORD(v114) = HIDWORD(v1259);
              if (HIDWORD(v1259) == (_DWORD)v1259)
              {
                v239 = (uint64_t *)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1258, HIDWORD(v1259) + 1, (unint64_t)&v1239);
                v114 = HIDWORD(v1259);
                v240 = v1258;
                v241 = *v239;
                *v239 = 0;
                *((_QWORD *)v240 + v114) = v241;
              }
              else
              {
                v1239 = 0;
                *((_QWORD *)v1258 + HIDWORD(v1259)) = v113;
              }
              HIDWORD(v1259) = v114 + 1;
              v115 = v1239;
              v1239 = 0;
              if (v115)
              {
                if (*(_DWORD *)v115 == 2)
                {
                  WTF::StringImpl::~StringImpl(v115, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                  WTF::fastFree(v137, v138, v139, v140, v141, v142, v143, v144);
                }
                else
                {
                  *(_DWORD *)v115 -= 2;
                }
              }
            }
            v116 = (WTF::StringImpl *)v1246;
            *(_QWORD *)&v1246 = 0;
            if (v116)
            {
              if (*(_DWORD *)v116 == 2)
              {
                WTF::StringImpl::~StringImpl(v116, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v121, v122, v123, v124, v125, v126, v127, v128);
              }
              else
              {
                *(_DWORD *)v116 -= 2;
              }
            }
            v117 = (WTF::StringImpl *)__dst;
            __dst = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 2)
              {
                WTF::StringImpl::~StringImpl(v117, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v129, v130, v131, v132, v133, v134, v135, v136);
              }
              else
              {
                *(_DWORD *)v117 -= 2;
              }
            }
            if ((v109 & 0x80000000) != 0)
              goto LABEL_179;
            goto LABEL_160;
          }
          goto LABEL_144;
        }
        v306 = HIDWORD(v1262);
        v307 = v1227;
        if (HIDWORD(v1262) == (_DWORD)v1262)
        {
          v560 = WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1261, (int *)&v1267, (int *)&v1241, a4, a5, a6, a7, a8);
          v307 = v1227;
          if ((v560 & 1) == 0)
            goto LABEL_1107;
        }
        else
        {
          v308 = v1267;
          v309 = (_DWORD *)((char *)v1261 + 8 * HIDWORD(v1262));
          *v309 = v1267;
          v309[1] = v99;
          if (v308 == (_DWORD)v99)
            *(_QWORD *)v309 = 0;
          HIDWORD(v1262) = v306 + 1;
        }
        v310 = 0;
        LOBYTE(__dst) = 0;
        *(_QWORD *)&v1246 = 0x800000000;
        v311 = 0uLL;
        v1247 = 0u;
        v1248 = 0u;
        v1249 = 0u;
        v1250 = 0u;
        *((_QWORD *)&v1246 + 1) = (char *)&v1247 + 8;
        v1251 = 0;
        if (v307)
        {
          v896 = *((_DWORD *)a1 + 233);
          if (v896)
            v897 = (JSC::VM *)(16 * (v896 & 0xFFFFFFFE));
          else
            v897 = 0;
          v898 = JSC::constructEmptyObject(v1235, v897, a3, a4, a5, a6, a7, a8);
          v307 = v1227;
          v310 = v898;
        }
        if (*(_DWORD *)(v60 + 24) != -1)
          break;
LABEL_395:
        v312 = (unint64_t)v1241 | 0xFFFE000000000000;
        if ((int)v1241 < 0)
          v312 = COERCE__INT64((double)v1241) + 0x2000000000000;
        if ((unint64_t)v1241 >> 32)
          v313 = COERCE__INT64((double)(unint64_t)v1241) + 0x2000000000000;
        else
          v313 = v312;
        v314 = v1246;
        if ((_DWORD)v1246 == DWORD1(v1246)
          || *((__int128 **)&v1246 + 1) != (__int128 *)((char *)&v1247 + 8) && *((_QWORD *)&v1246 + 1))
        {
          v461 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v1246, v313, (uint64_t)a3, a4, a5, a6, a7, a8);
          v307 = v1227;
          if (v461 == 1)
            LOBYTE(__dst) = 1;
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)&v1246 + 1) + 8 * v1246) = v313;
          LODWORD(v1246) = v314 + 1;
        }
        v315 = v1246;
        if ((_DWORD)v1246 == DWORD1(v1246)
          || *((__int128 **)&v1246 + 1) != (__int128 *)((char *)&v1247 + 8) && *((_QWORD *)&v1246 + 1))
        {
          v462 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v1246, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          v307 = v1227;
          if (v462 == 1)
            LOBYTE(__dst) = 1;
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)&v1246 + 1) + 8 * v1246) = a2;
          LODWORD(v1246) = v315 + 1;
        }
        if (v307)
          JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&__dst, v310, (uint64_t)a3, a4, a5, a6, a7, a8);
        if ((_BYTE)__dst)
        {
          JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v1244);
          goto LABEL_1191;
        }
        v1239 = (WTF::StringImpl *)*((_QWORD *)&v1246 + 1);
        v1240 = v1246;
        v317 = JSC::call((uint64_t *)a1, 0, (unsigned __int8 *)&v1237, 10, (uint64_t)&v1239, a6, a7, a8);
        var60[0] = (int *)v317;
        v90 = v1244;
        if (*((_DWORD *)v1244 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v1244, (uint64_t)v316, (uint64_t)a3, a4, a5, a6, a7, a8))
            goto LABEL_1191;
          v317 = (unint64_t)var60[0];
        }
        if ((v317 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v317 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)var60, a1, a3, a4, a5, a6, a7, a8, (int **)&v1239);
        }
        else
        {
          v319 = *(WTF::StringImpl **)(v317 + 8);
          if ((v319 & 1) != 0)
            v319 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v317, a1, (uint64_t)a3, a4, v318, a5, a6, a7, a8);
          if (v319)
            *(_DWORD *)v319 += 2;
          v1239 = v319;
        }
        if (*((_DWORD *)v90 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v90, (uint64_t)v316, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
          goto LABEL_1199;
        }
        v320 = HIDWORD(v1259);
        if (HIDWORD(v1259) == (_DWORD)v1259)
        {
          WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>((uint64_t)&v1258, (unint64_t)&v1239);
        }
        else
        {
          v321 = v1258;
          v322 = v1239;
          if (v1239)
            *(_DWORD *)v1239 += 2;
          *((_QWORD *)v321 + v320) = v322;
          HIDWORD(v1259) = v320 + 1;
        }
        if (*((_DWORD *)v90 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v90, (uint64_t)v316, (uint64_t)a3, a4, a5, a6, a7, a8))
        {
LABEL_1199:
          v323 = 0;
        }
        else
        {
          v323 = 1;
        }
        v324 = v1239;
        v1239 = 0;
        if (v324)
        {
          if (*(_DWORD *)v324 == 2)
          {
            WTF::StringImpl::~StringImpl(v324, v316, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v471, v472, v473, v474, v475, v476, v477, v478);
          }
          else
          {
            *(_DWORD *)v324 -= 2;
          }
        }
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1246, v316, (uint64_t)a3, a4, a5, a6, a7, a8);
        if ((v323 & 1) == 0)
        {
LABEL_179:
          v42 = 0;
LABEL_823:
          v581 = v1258;
          if (!HIDWORD(v1259))
          {
LABEL_824:
            if (v1260 != (_QWORD *)v581 && v581 != 0)
            {
              v1258 = 0;
              LODWORD(v1259) = 0;
              WTF::fastFree((unint64_t)v581, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
            }
            v212 = v1261;
            if (v1263 == (_DWORD *)v1261 || v1261 == 0)
              goto LABEL_834;
            v1261 = 0;
            LODWORD(v1262) = 0;
            goto LABEL_870;
          }
          v612 = 8 * HIDWORD(v1259);
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          while (1)
          {
            v1203 = *(_QWORD *)v581;
            *(_QWORD *)v581 = 0;
            if (v1203)
            {
              if (*(_DWORD *)v1203 == 2)
              {
                WTF::StringImpl::~StringImpl((WTF::StringImpl *)v1203, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
                v1204 = *(_QWORD *)(StatusReg + 752);
                if (v1204)
                {
                  if (!(v1203 >> 43)
                    && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v1203 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v1203)) & 1) != 0)
                  {
LABEL_1654:
                    v1205 = *(unsigned int *)(v1204 + 8000);
                    if (v1205 >= 0x3E7)
                    {
                      pas_thread_local_cache_append_deallocation_slow(v1204, v1203, (os_unfair_lock_s *)5, a4, a5, a6, a7, a8);
                    }
                    else
                    {
                      *(_QWORD *)(v1204 + 8 * v1205) = v1203 | 0x5000000000000;
                      *(_DWORD *)(v1204 + 8000) = v1205 + 1;
                    }
                    goto LABEL_1648;
                  }
                  if (v1203 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v1203 >> 24)
                  {
                    a4 = 0;
                  }
                  else
                  {
                    a4 = (*(_DWORD *)((char *)off_1ECF425F8
                                    + ((((v1203 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                    + 24) >> (2 * ((BYTE3(v1203) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                    if ((_DWORD)a4 == 1)
                      goto LABEL_1654;
                  }
                  bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v1204, v1203, 1, a4, a5, a6, a7, a8);
                }
                else
                {
                  pas_try_deallocate_slow_no_cache(v1203, (uint64_t)&bmalloc_heap_config, 1);
                }
              }
              else
              {
                *(_DWORD *)v1203 -= 2;
              }
            }
LABEL_1648:
            v581 = (WTF *)((char *)v581 + 8);
            v612 -= 8;
            if (!v612)
            {
              v581 = v1258;
              goto LABEL_824;
            }
          }
        }
LABEL_160:
        v118 = (int)v1242;
        v1267 = (unint64_t)v1242;
        if (v1241 != v1242)
        {
          v89 = v1242;
LABEL_162:
          v60 = (uint64_t)v1232;
          goto LABEL_163;
        }
        v89 = (_DWORD)v1242 + 1;
        v327 = v1243;
        if ((int)v1242 + 1 > v1243)
          goto LABEL_821;
        v328 = *(WTF::StringImpl **)v1234;
        if (!*(_QWORD *)v1234)
          goto LABEL_162;
        if (*((_DWORD *)v328 + 1) <= v1242)
          goto LABEL_162;
        if ((WTF::StringImpl::at(v328, v1242) & 0xFC00) != 0xD800)
          goto LABEL_162;
        v329 = *(WTF::StringImpl **)v1234;
        if (!*(_QWORD *)v1234 || *((_DWORD *)v329 + 1) <= v89)
          goto LABEL_162;
        v60 = (uint64_t)v1232;
        if ((WTF::StringImpl::at(v329, v118 + 1) & 0xFC00) == 0xDC00)
        {
          v89 = v118 + 2;
          if (v118 + 2 > v327)
            goto LABEL_821;
        }
LABEL_163:
        if ((v1228 & 2) == 0)
          goto LABEL_821;
      }
      v341 = 0;
      v342 = 1;
      while (1)
      {
        a4 = *(unsigned int *)(v97 + 4 * (v342 - 1));
        if ((a4 & 0x80000000) != 0)
        {
          v344 = 10;
        }
        else
        {
          v344 = (uint64_t)JSC::jsSubstring(v1235, (uint64_t)a1, (JSC::JSGlobalObject *)a2, (JSC::JSString *)a4, (*(_DWORD *)(v97 + 4 * v342) - a4), a6, a7, a8, v311);
          if (*((_DWORD *)v1244 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v1244, v343, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            goto LABEL_1191;
          }
        }
        v345 = v1246;
        v307 = v1227;
        if ((_DWORD)v1246 != DWORD1(v1246)
          && (*((__int128 **)&v1246 + 1) != (__int128 *)((char *)&v1247 + 8)
            ? (v346 = *((_QWORD *)&v1246 + 1) == 0)
            : (v346 = 1),
              v346))
        {
          *(_QWORD *)(*((_QWORD *)&v1246 + 1) + 8 * v1246) = v344;
          LODWORD(v1246) = v345 + 1;
        }
        else
        {
          v348 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v1246, v344, (uint64_t)a3, a4, a5, a6, a7, a8);
          v307 = v1227;
          if (v348 == 1)
            LOBYTE(__dst) = 1;
        }
        if (v341 && v307)
          break;
LABEL_478:
        ++v341;
        v342 += 2;
        if (v341 >= (*((_DWORD *)v1232 + 6) + 1))
          goto LABEL_395;
      }
      JSC::RegExp::getCaptureGroupNameForSubpatternId((uint64_t)v1232, v341, &v1239);
      if (!v1239)
      {
LABEL_1334:
        v307 = v1227;
        goto LABEL_478;
      }
      v1046 = *((unsigned int *)v1239 + 1);
      if (!(_DWORD)v1046)
      {
LABEL_1467:
        v1058 = v1239;
        v1239 = 0;
        if (v1058)
        {
          if (*(_DWORD *)v1058 == 2)
          {
            WTF::StringImpl::~StringImpl(v1058, v941, (uint64_t)a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v1077, v1078, v1079, v1080, v1081, v1082, v1083, v1084);
          }
          else
          {
            *(_DWORD *)v1058 -= 2;
          }
        }
        goto LABEL_1334;
      }
      v1224 = v1224 & 0xFFFFFF0000000000 | v1046 | ((unint64_t)((*((_DWORD *)v1239 + 4) >> 2) & 1) << 32);
      v1047 = JSC::RegExp::subpatternIdForGroupName<int const*>((uint64_t)v1232, *((_QWORD *)v1239 + 1), v1224, v97);
      if (v341 != v1047)
      {
        if (!v1047)
        {
          JSC::Identifier::fromString((uint64_t **)v1235, &v1239, a3, a4, a5, a6, a7, a8, (WTF::StringImpl **)var60);
          v1053 = var60[0];
          v1054 = (int *)v310;
          v1055 = (uint64_t)v1235;
          v1056 = 10;
LABEL_1464:
          JSC::JSObject::putDirect(v1054, v1055, (unint64_t)v1053, v1056, 0, v1052, v1049, v1050, v1051);
          v1057 = (WTF::StringImpl *)var60[0];
          var60[0] = 0;
          if (v1057)
          {
            if (*(_DWORD *)v1057 == 2)
            {
              WTF::StringImpl::~StringImpl(v1057, v941, (uint64_t)a3, a4, a5, a6, a7, a8);
              WTF::fastFree(v1102, v1103, v1104, v1105, v1106, v1107, v1108, v1109);
            }
            else
            {
              *(_DWORD *)v1057 -= 2;
            }
          }
          goto LABEL_1467;
        }
        a4 = *(unsigned int *)(v97 + 8 * v1047);
        if ((a4 & 0x80000000) != 0)
        {
          v344 = 10;
        }
        else
        {
          v344 = (uint64_t)JSC::jsSubstring(v1235, (uint64_t)a1, (JSC::JSGlobalObject *)a2, (JSC::JSString *)a4, (*(_DWORD *)(v97 + 4 * ((2 * v1047) | 1)) - a4), a6, a7, a8, v1048);
          if (*((_DWORD *)v1244 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v1244, v1073, (uint64_t)a3, a4, a5, a6, a7, a8))
          {
            v1074 = v1239;
            v1239 = 0;
            if (v1074)
            {
              if (*(_DWORD *)v1074 == 2)
              {
                WTF::StringImpl::~StringImpl(v1074, v316, (uint64_t)a3, a4, a5, a6, a7, a8);
                WTF::fastFree(v1138, v1139, v1140, v1141, v1142, v1143, v1144, v1145);
              }
              else
              {
                *(_DWORD *)v1074 -= 2;
              }
            }
LABEL_1191:
            JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1246, v316, (uint64_t)a3, a4, a5, a6, a7, a8);
            goto LABEL_179;
          }
        }
      }
      JSC::Identifier::fromString((uint64_t **)v1235, &v1239, a3, a4, a5, a6, a7, a8, (WTF::StringImpl **)var60);
      v1053 = var60[0];
      v1054 = (int *)v310;
      v1055 = (uint64_t)v1235;
      v1056 = v344;
      goto LABEL_1464;
    }
    v160 = v1237 == 2;
    v161 = v1237 != 2 || v62;
    if ((v161 & 1) != 0 || v58 < dword_1ECF4C794)
      goto LABEL_189;
    v1266 = v1235;
    do
      v358 = __ldaxr((unsigned int *)&g_superSamplerCount);
    while (__stlxr(v358 + 1, (unsigned int *)&g_superSamplerCount));
    v359 = *(WTF::StringImpl **)v1234;
    if (*(_QWORD *)v1234)
    {
      v360 = *((_DWORD *)v1232 + 6);
      v1229 = (_DWORD *)((char *)v1232 + 24);
      v1207 = *((_DWORD *)v359 + 1);
      v1265 = v1207;
      v1213 = v360 + 2;
      v1208 = v360 + 3;
      v1209 = (uint64_t)v1235 + 86816;
      v361 = *((_DWORD *)v359 + 4);
      if ((v361 & 0x10) != 0)
      {
        if (v361 < 0x100)
          LOBYTE(v362) = WTF::StringImpl::hashSlowCase(v359);
        else
          v362 = v361 >> 8;
        v363 = v1209 + 56 * (v362 & 0x3F);
        v364 = *(WTF::StringImpl **)v363 == v359 && *(_QWORD *)(v363 + 8) == (_QWORD)v1232;
        if (v364
          || (v363 = v1209 + 56 * (((_BYTE)v362 + 1) & 0x3F), *(WTF::StringImpl **)v363 == v359)
          && *(JSC::RegExp **)(v1209 + 56 * (((_BYTE)v362 + 1) & 0x3F) + 8) == v1232)
        {
          v365 = *(JSC::RegExp **)(v363 + 16);
          v366 = *(unsigned int *)(v363 + 52);
          if ((_DWORD)v366)
          {
            if (v366 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x198BD2548);
            }
            v367 = (void *)WTF::fastMalloc((WTF *)(4 * v366));
            memcpy(v367, *(const void **)(v363 + 40), 4 * *(unsigned int *)(v363 + 52));
          }
          else
          {
            v367 = 0;
          }
          v1230 = *(_OWORD *)(v363 + 24);
          v368 = *((_QWORD *)a1 + 275);
          if (v368)
          {
            *((_QWORD *)a1 + 275) = 0;
            *((_DWORD *)a1 + 552) = 0;
            WTF::fastFree(v368, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          }
          *((_QWORD *)a1 + 275) = v367;
          *((_DWORD *)a1 + 552) = v366;
          *((_DWORD *)a1 + 553) = v366;
          v369 = *((_QWORD *)a1 + 7);
          *((_QWORD *)a1 + 269) = v1232;
          *((_QWORD *)a1 + 268) = a2;
          *(_OWORD *)((char *)a1 + 2120) = v1230;
          *((_BYTE *)a1 + 2136) = 0;
          if (*(_DWORD *)(v369 + 760) >= *((unsigned __int8 *)a1 + 7))
            JSC::Heap::writeBarrierSlowPath(v369 + 192, (unint64_t)a1);
          v370 = v365;
LABEL_512:
          v1233 = v370;
          v1231 = *((_DWORD *)v370 + 2);
          v371 = v1231 / v1213;
          v1264 = 0;
          v1222 = (WTF *)v1263;
          v1261 = (WTF *)v1263;
          v1262 = 16;
          v1223 = (uint64_t)v1260;
          v1258 = (WTF *)v1260;
          v1259 = 16;
          v372 = (v371 + 1);
          if (v372 < 0x11)
          {
            v373 = 16;
          }
          else
          {
            if (v372 >> 29)
              goto LABEL_1202;
            WTF::tryFastMalloc((WTF *)(8 * v372), &__dst);
            if (!__dst)
              goto LABEL_1202;
            LODWORD(v1262) = v371 + 1;
            v1261 = (WTF *)__dst;
            v373 = v1259;
          }
          if (v373 >= v371)
            goto LABEL_523;
          v374 = v1258;
          v375 = HIDWORD(v1259);
          if (v371 < 0x11)
          {
            v376 = v1260;
            v1258 = (WTF *)v1260;
            LODWORD(v1259) = 16;
            goto LABEL_521;
          }
          if (!(v371 >> 29))
          {
            WTF::tryFastMalloc((WTF *)(8 * v371), &__dst);
            v376 = __dst;
            if (__dst)
            {
              LODWORD(v1259) = v1231 / v1213;
              v1258 = (WTF *)__dst;
LABEL_521:
              memcpy(v376, v374, 8 * v375);
              if (v1260 != (_QWORD *)v374 && v374)
              {
                if (v1258 == v374)
                {
                  v1258 = 0;
                  LODWORD(v1259) = 0;
                }
                WTF::fastFree((unint64_t)v374, v377, v378, v379, a5, a6, a7, a8);
              }
LABEL_523:
              if (v1259 < v371)
                WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1258, v371);
              if (v1258)
                bzero((char *)v1258 + 8 * HIDWORD(v1259), 8 * v371 - 8 * HIDWORD(v1259));
              HIDWORD(v1259) = v1231 / v1213;
              JSC::CachedCall::CachedCall((JSC::CachedCall *)&__dst, a1, 0, v1208, a5, a6, a7, a8);
              if (*((_DWORD *)v1266 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v1266, (uint64_t)v380, v34, v35, v36, a6, a7, a8))
              {
                goto LABEL_1118;
              }
              v381 = 0;
              v382 = 0;
              v383 = v1233;
              v384 = (char *)v1233 + 16;
              while (v382 < v1231)
              {
                v1252 = 0;
                v1253 = 0;
                v385 = v382;
                v386 = v1213;
                do
                {
                  v387 = v385;
                  if ((*((_BYTE *)v383 + 4) & 0xE) == 6)
                    v388 = *(_QWORD *)&v384[8 * v385] + 0x2000000000000;
                  else
                    v388 = *(_QWORD *)&v384[8 * v385];
                  v389 = v1253;
                  if (v1253 != v1254 && (v1255 != v1256 ? (v390 = v1255 == 0) : (v390 = 1), v390))
                  {
                    *(_QWORD *)&v1255[8 * v1253] = v388;
                    v1253 = v389 + 1;
                  }
                  else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1253, v388, v34, v35, v36, a6, a7, a8) == 1)
                  {
                    v1252 = 1;
                  }
                  v385 = v387 + 1;
                  --v386;
                }
                while (v386);
                v391 = v1253;
                if (v1253 != v1254 && (v1255 != v1256 ? (v392 = v1255 == 0) : (v392 = 1), v392))
                {
                  *(_QWORD *)&v1255[8 * v1253] = a2;
                  v1253 = v391 + 1;
                }
                else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1253, a2, v34, v35, v36, a6, a7, a8) == 1)
                {
                  v1252 = 1;
                }
                if ((*((_BYTE *)v383 + 4) & 0xE) == 6)
                  v393 = *(_QWORD *)&v384[8 * v382] + 0x2000000000000;
                else
                  v393 = *(_QWORD *)&v384[8 * v382];
                v382 += v1213;
                v394 = *(_DWORD *)&v384[8 * v382 - 8];
                LODWORD(var60[0]) = v394;
                v395 = *(_QWORD *)(v393 + 8);
                v396 = (int *)(v393 + 16);
                if ((v395 & 1) == 0)
                  v396 = (int *)(v395 + 4);
                v397 = *v396;
                v398 = HIDWORD(v1262);
                if (HIDWORD(v1262) == (_DWORD)v1262)
                {
                  WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned long &,int &>((uint64_t)&v1261, (int *)&v1264, (int *)var60, v35, v36, a6, a7, a8);
                }
                else
                {
                  v399 = v1264;
                  v400 = (_DWORD *)((char *)v1261 + 8 * HIDWORD(v1262));
                  *v400 = v1264;
                  v400[1] = v394;
                  if (v394 == v399)
                    *(_QWORD *)v400 = 0;
                  HIDWORD(v1262) = v398 + 1;
                }
                *(_QWORD *)&v1250 = 10;
                if (v1252)
                {
                  v819 = &v1266;
                  goto LABEL_1117;
                }
                v401 = v1247;
                v402 = v1257;
                if (v1257)
                  goto LABEL_561;
                v836 = (unsigned int *)(v1247 + 80);
                v1221 = *(_DWORD *)(v1247 + 80);
                if ((v1221 & 0x20) == 0)
                {
                  do
                    v428 = __ldaxr(v836);
                  while (__stlxr(v428 | 0x20, v836));
                }
                JSC::CachedCall::relink((JSC::CachedCall *)&__dst, v388, v34, v35, v36, a6, a7, a8);
                if (*v836
                  && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v401, (uint64_t)v380, v34, v35, v36, a6, a7, a8))
                {
                  v429 = 0;
                  v402 = 0;
                  v60 = *(_QWORD *)(v401 + 16);
                }
                else
                {
                  v429 = 1;
                  v402 = v1257;
                }
                if ((v1221 & 0x20) == 0)
                {
                  do
                    v427 = __ldaxr(v836);
                  while (__stlxr(v427 & 0xFFFFFFDF, v836));
                }
                if (v429)
LABEL_561:
                  v60 = vmEntryToJavaScript(v402, (JSC::VM *)v401, (uint64_t)&v1248 + 8, v35, v36, a6, a7, a8);
                *(_BYTE *)(v401 + 93120) = 1;
                v1241 = (WTF::StringImpl *)v60;
                v404 = v1266;
                v405 = v60;
                if (*((_DWORD *)v1266 + 20))
                {
                  if (JSC::VM::hasExceptionsAfterHandlingTraps(v1266, (uint64_t)v380, v34, v35, v36, a6, a7, a8))
                    goto LABEL_1118;
                  v405 = (unint64_t)v1241;
                }
                if ((v405 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v405 + 5) != 2)
                {
                  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1241, a1, (const WTF::String *)v34, v35, v36, a6, a7, a8, (int **)&v1239);
                }
                else
                {
                  v406 = *(WTF::StringImpl **)(v405 + 8);
                  if ((v406 & 1) != 0)
                    v406 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v405, a1, v34, v35, v403, v36, a6, a7, a8);
                  if (v406)
                    *(_DWORD *)v406 += 2;
                  v1239 = v406;
                }
                if (*((_DWORD *)v404 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v404, (uint64_t)v380, v34, v35, v36, a6, a7, a8))
                {
                  v409 = 0;
                }
                else
                {
                  if (v381 >= HIDWORD(v1259))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x198BD226CLL);
                  }
                  v407 = v1239;
                  v1239 = 0;
                  v408 = (WTF::StringImpl *)*((_QWORD *)v1258 + v381);
                  *((_QWORD *)v1258 + v381) = v407;
                  if (v408)
                  {
                    if (*(_DWORD *)v408 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v408, v380, v34, v35, v36, a6, a7, a8);
                      WTF::fastFree(v419, v420, v421, v422, v423, v424, v425, v426);
                    }
                    else
                    {
                      *(_DWORD *)v408 -= 2;
                    }
                  }
                  ++v381;
                  v1264 = v397 + v394;
                  v409 = 1;
                }
                v410 = v1239;
                v1239 = 0;
                v383 = v1233;
                if (v410)
                {
                  if (*(_DWORD *)v410 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v410, v380, v34, v35, v36, a6, a7, a8);
                    WTF::fastFree(v411, v412, v413, v414, v415, v416, v417, v418);
                  }
                  else
                  {
                    *(_DWORD *)v410 -= 2;
                  }
                }
                if ((v409 & 1) == 0)
                  goto LABEL_1118;
              }
              v845 = v1265;
              v846 = HIDWORD(v1262);
              if (v1265 > v1264)
              {
                if (HIDWORD(v1262) == (_DWORD)v1262)
                {
                  WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned long &,int &>((uint64_t)&v1261, (int *)&v1264, (int *)&v1265, v35, v36, a6, a7, a8);
                  v846 = HIDWORD(v1262);
                }
                else
                {
                  v847 = (_DWORD *)((char *)v1261 + 8 * HIDWORD(v1262));
                  *v847 = v1264;
                  v847[1] = v845;
                  HIDWORD(v1262) = ++v846;
                }
              }
              v848 = v1261;
              v849 = v1258;
              v850 = HIDWORD(v1259);
              v1232 = (JSC::RegExp *)*((_QWORD *)a1 + 7);
              v1269 = v1232;
              if (v846 != 1 || HIDWORD(v1259) != 0)
              {
                v852 = SHIDWORD(v1259);
                if (v846 != 2 || HIDWORD(v1259) != 1)
                {
                  if (v846 < 1)
                  {
                    v854 = 0;
                    v853 = 0;
                  }
                  else
                  {
                    LODWORD(v853) = 0;
                    v854 = 0;
                    v855 = (_DWORD *)((char *)v1261 + 4);
                    v856 = v846;
                    do
                    {
                      v857 = *v855 - *(v855 - 1);
                      v858 = __OFADD__((_DWORD)v853, v857);
                      v859 = v853 + v857;
                      if (v858)
                        v854 = 1;
                      if (v858)
                        v853 = v853;
                      else
                        v853 = v859;
                      v855 += 2;
                      --v856;
                    }
                    while (v856);
                  }
                  v860 = 1;
                  if (SHIDWORD(v1259) >= 1)
                  {
                    v861 = v1258;
                    v862 = HIDWORD(v1259);
                    v863 = v853;
                    do
                    {
                      v864 = *(_QWORD *)v861;
                      if (*(_QWORD *)v861)
                      {
                        v865 = *(unsigned int *)(v864 + 4);
                        v853 = v865 + (int)v863;
                        v866 = (unint64_t)(v853 + 0x80000000) >> 32;
                        if ((_DWORD)v865)
                          v867 = v866 == 0;
                        else
                          v867 = 0;
                        if (v867
                          || (!v866 ? (v853 = v853) : (v854 = 1, v853 = v863), (_DWORD)v865))
                        {
                          if ((*(_BYTE *)(v864 + 16) & 4) == 0)
                            v860 = 0;
                        }
                      }
                      else
                      {
                        v853 = v863;
                      }
                      v861 = (WTF *)((char *)v861 + 8);
                      v863 = v853;
                      --v862;
                    }
                    while (v862);
                  }
                  if (!v854)
                  {
                    if (!(_DWORD)v853)
                    {
                      v42 = *((_QWORD *)v1232 + 5246);
                      goto LABEL_1119;
                    }
                    if (*(_QWORD *)v1234)
                      v876 = (*(unsigned __int8 *)(*(_QWORD *)v1234 + 16) >> 2) & 1;
                    else
                      v876 = 1;
                    if ((v876 & v860) == 1)
                    {
                      if ((v853 & 0x80000000) == 0)
                      {
                        WTF::tryFastCompactMalloc((WTF *)(v853 + 20), &v1241);
                        v877 = v1241;
                        if (v1241)
                        {
                          v878 = (char *)v1241 + 20;
                          *(_DWORD *)v1241 = 2;
                          *((_DWORD *)v877 + 1) = v853;
                          *((_QWORD *)v877 + 1) = (char *)v877 + 20;
                          *((_DWORD *)v877 + 4) = 4;
                          if (v846 <= (int)v852)
                            v879 = v852;
                          else
                            v879 = v846;
                          if ((int)v879 >= 1)
                          {
                            v880 = 0;
                            v881 = 0;
                            v882 = (_DWORD *)((char *)v848 + 4);
                            do
                            {
                              if (v880 < v846)
                              {
                                v883 = *(WTF::StringImpl **)v1234;
                                if (*(_QWORD *)v1234
                                  && (v884 = *((unsigned int *)v883 + 1),
                                      v885 = *(v882 - 1),
                                      v884 > v885))
                                {
                                  v886 = *((unsigned int *)v883 + 4);
                                  v887 = (char *)*((_QWORD *)v883 + 1);
                                  v888 = *v882 - v885;
                                  if ((int)v884 - (int)v885 > v888 || (v888 = v884 - v885, (_DWORD)v885))
                                  {
                                    v889 = (v886 >> 2) & 1;
                                    v890 = v884 - v885;
                                    v48 = v888;
                                    if ((_DWORD)v889)
                                    {
                                      if (v890 < v888)
                                        goto LABEL_1458;
                                      v887 += v885;
                                      LODWORD(v48) = v888;
                                    }
                                    else
                                    {
                                      if (v890 < v888)
                                        goto LABEL_1458;
                                      v887 += 2 * v885;
                                    }
                                  }
                                  else
                                  {
                                    v48 = v884 & 0xFFFFFFFEFFFFFFFFLL | (((v886 >> 2) & 1) << 32);
                                  }
                                  v891 = &v878[v881];
                                  if ((_DWORD)v48 == 1)
                                  {
                                    *v891 = *v887;
                                    LODWORD(v48) = 1;
                                  }
                                  else if ((_DWORD)v48)
                                  {
                                    memcpy(v891, v887, v48);
                                  }
                                }
                                else
                                {
                                  LODWORD(v48) = 0;
                                }
                                v881 += v48;
                              }
                              if (v880 < v852)
                              {
                                v892 = *((_QWORD *)v849 + v880);
                                if (v892)
                                {
                                  v893 = *(char **)(v892 + 8);
                                  v894 = *(_DWORD *)(v892 + 4);
                                  v895 = &v878[v881];
                                  if (v894 == 1)
                                  {
                                    *v895 = *v893;
                                    v894 = 1;
                                  }
                                  else if (v894)
                                  {
                                    memcpy(v895, v893, *(unsigned int *)(v892 + 4));
                                  }
                                }
                                else
                                {
                                  v894 = 0;
                                }
                                v881 += v894;
                              }
                              ++v880;
                              v882 += 2;
                            }
                            while (v879 != v880);
                          }
                          v1241 = v877;
                          goto LABEL_1255;
                        }
                      }
                    }
                    else if (v853 <= 0x7FFFFFEF)
                    {
                      WTF::tryFastCompactMalloc((WTF *)(2 * v853 + 20), &v1241);
                      v48 = (uint64_t)v1241;
                      if (v1241)
                      {
                        v1002 = (char *)v1241 + 20;
                        *(_DWORD *)v1241 = 2;
                        *(_DWORD *)(v48 + 4) = v853;
                        *(_QWORD *)(v48 + 8) = v48 + 20;
                        *(_DWORD *)(v48 + 16) = 0;
                        if (v846 <= (int)v852)
                          v852 = v852;
                        else
                          v852 = v846;
                        if ((int)v852 >= 1)
                        {
                          v1003 = 0;
                          v1004 = 0;
                          do
                          {
                            if (v1003 < v846)
                            {
                              v1005 = *(WTF::StringImpl **)v1234;
                              if (*(_QWORD *)v1234
                                && (v1006 = *((unsigned int *)v1005 + 1),
                                    v1007 = *((unsigned int *)v848 + 2 * v1003),
                                    v1006 > v1007))
                              {
                                v1008 = *((unsigned int *)v1005 + 4);
                                v1009 = (int8x16_t *)*((_QWORD *)v1005 + 1);
                                v1010 = *((_DWORD *)v848 + 2 * v1003 + 1) - v1007;
                                if ((int)v1006 - (int)v1007 > v1010 || (v1010 = v1006 - v1007, (_DWORD)v1007))
                                {
                                  v1011 = (v1008 >> 2) & 1;
                                  v1012 = v1006 - v1007;
                                  v1013 = v1010;
                                  if ((_DWORD)v1011)
                                  {
                                    if (v1012 < v1010)
                                      goto LABEL_1458;
                                    v1009 = (int8x16_t *)((char *)v1009 + v1007);
                                    v1013 = v1010 | 0x100000000;
                                  }
                                  else
                                  {
                                    if (v1012 < v1010)
                                      goto LABEL_1458;
                                    v1009 = (int8x16_t *)((char *)v1009 + 2 * v1007);
                                  }
                                }
                                else
                                {
                                  v1013 = v1006 & 0xFFFFFFFEFFFFFFFFLL | (((v1008 >> 2) & 1) << 32);
                                }
                                v1014 = &v1002[2 * v1004];
                                if ((v1013 & 0x100000000) != 0)
                                {
                                  if (v1013 < 0x40)
                                  {
                                    v1195 = &v1002[2 * v1004];
                                  }
                                  else
                                  {
                                    v1195 = &v1014[2 * (v1013 & 0xFFFFFFC0)];
                                    v1196 = &v1002[2 * v1004];
                                    do
                                    {
                                      v1275.val[0] = *v1009;
                                      v1197 = v1009[1];
                                      v1280.val[0] = v1009[2];
                                      v1198 = v1009[3];
                                      v1009 += 4;
                                      v1285.val[1] = 0uLL;
                                      v1285.val[0] = v1198;
                                      v1280.val[1] = 0u;
                                      v1289.val[0] = v1197;
                                      v1275.val[1] = 0u;
                                      v1199 = v1196;
                                      vst2q_s8(v1199, v1275);
                                      v1199 += 32;
                                      v1289.val[1] = 0u;
                                      vst2q_s8(v1199, v1289);
                                      v1200 = v1196 + 64;
                                      vst2q_s8(v1200, v1280);
                                      v1201 = v1196 + 96;
                                      vst2q_s8(v1201, v1285);
                                      v1196 += 128;
                                    }
                                    while (v1196 != v1195);
                                  }
                                  while (v1195 != &v1014[2 * v1013])
                                  {
                                    v1202 = v1009->u8[0];
                                    v1009 = (int8x16_t *)((char *)v1009 + 1);
                                    *(_WORD *)v1195 = v1202;
                                    v1195 += 2;
                                  }
                                }
                                else if ((_DWORD)v1013 == 1)
                                {
                                  *(_WORD *)v1014 = v1009->i16[0];
                                  LODWORD(v1013) = 1;
                                }
                                else if ((_DWORD)v1013)
                                {
                                  memcpy(v1014, v1009, 2 * v1013);
                                }
                              }
                              else
                              {
                                LODWORD(v1013) = 0;
                              }
                              v1004 += v1013;
                            }
                            if (v1003 < v850)
                            {
                              v1015 = *((_QWORD *)v849 + v1003);
                              if (v1015)
                              {
                                v1016 = *(int8x16_t **)(v1015 + 8);
                                v1017 = *(unsigned int *)(v1015 + 4);
                                v1018 = &v1002[2 * v1004];
                                if ((*(_BYTE *)(v1015 + 16) & 4) != 0)
                                {
                                  if (v1017 >= 0x40)
                                  {
                                    v1019 = &v1018[2 * (v1017 & 0xFFFFFFC0)];
                                    v1021 = &v1002[2 * v1004];
                                    do
                                    {
                                      v1273.val[0] = *v1016;
                                      v1022 = v1016[1];
                                      v1278.val[0] = v1016[2];
                                      v1023 = v1016[3];
                                      v1016 += 4;
                                      v1287.val[1] = 0u;
                                      v1287.val[0] = v1023;
                                      v1278.val[1] = 0u;
                                      v1283.val[0] = v1022;
                                      v1273.val[1] = 0u;
                                      v1024 = v1021;
                                      vst2q_s8(v1024, v1273);
                                      v1024 += 32;
                                      v1283.val[1] = 0u;
                                      vst2q_s8(v1024, v1283);
                                      v1025 = v1021 + 64;
                                      vst2q_s8(v1025, v1278);
                                      v1026 = v1021 + 96;
                                      vst2q_s8(v1026, v1287);
                                      v1021 += 128;
                                    }
                                    while (v1021 != v1019);
                                  }
                                  else
                                  {
                                    v1019 = &v1002[2 * v1004];
                                  }
                                  while (v1019 != &v1018[2 * v1017])
                                  {
                                    v1020 = v1016->u8[0];
                                    v1016 = (int8x16_t *)((char *)v1016 + 1);
                                    *(_WORD *)v1019 = v1020;
                                    v1019 += 2;
                                  }
                                }
                                else if ((_DWORD)v1017 == 1)
                                {
                                  *(_WORD *)v1018 = v1016->i16[0];
                                  LODWORD(v1017) = 1;
                                }
                                else if ((_DWORD)v1017)
                                {
                                  memcpy(v1018, v1016, 2 * v1017);
                                }
                              }
                              else
                              {
                                LODWORD(v1017) = 0;
                              }
                              v1004 += v1017;
                            }
                            ++v1003;
                          }
                          while (v1003 != v852);
                        }
                        goto LABEL_1459;
                      }
                    }
                  }
                  v819 = &v1269;
LABEL_1117:
                  JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)v819);
LABEL_1118:
                  v42 = 0;
                  goto LABEL_1119;
                }
                v902 = *(unsigned int *)v1261;
                v901 = *((_DWORD *)v1261 + 1);
                v903 = (v901 - v902);
                if (v901 == (_DWORD)v902)
                {
                  WTF::StringImpl::s_emptyAtomString += 2;
                  v1241 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
                  goto LABEL_1268;
                }
                v904 = *(WTF::StringImpl **)v1234;
                if ((*(_DWORD *)(*(_QWORD *)v1234 + 16) & 4) != 0)
                {
                  if (v903 <= 0xC)
                  {
                    WTF::StringImpl::create((_BYTE *)(*((_QWORD *)v904 + 1) + v902), v903, (uint64_t *)&v1241);
                    goto LABEL_1268;
                  }
                }
                else if (v903 <= 6)
                {
                  WTF::StringImpl::create((_WORD *)(*((_QWORD *)v904 + 1) + 2 * v902), v903, (uint64_t *)&v1241);
                  goto LABEL_1268;
                }
                v1059 = *(WTF::StringImpl **)v1234;
                if ((*(_DWORD *)(*(_QWORD *)v1234 + 16) & 3) == 2)
                  v1059 = (WTF::StringImpl *)*((_QWORD *)v904 + 3);
                v1060 = WTF::fastCompactMalloc((WTF *)0x20);
                v1061 = *((_DWORD *)v904 + 4);
                v1062 = *((_QWORD *)v904 + 1);
                *(_DWORD *)v1059 += 2;
                *(_DWORD *)v1060 = 2;
                *(_DWORD *)(v1060 + 4) = v903;
                if ((v1061 & 4) != 0)
                {
                  *(_QWORD *)(v1060 + 8) = v1062 + v902;
                  *(_DWORD *)(v1060 + 16) = 6;
                }
                else
                {
                  *(_QWORD *)(v1060 + 8) = v1062 + 2 * v902;
                  *(_DWORD *)(v1060 + 16) = 2;
                }
                *(_QWORD *)(v1060 + 24) = v1059;
                v1241 = (WTF::StringImpl *)v1060;
LABEL_1268:
                v1268 = v1241;
                v906 = *((unsigned int *)v848 + 2);
                v905 = *((_DWORD *)v848 + 3);
                v907 = (v905 - v906);
                if (v905 == (_DWORD)v906)
                {
                  v909 = &WTF::StringImpl::s_emptyAtomString;
                  WTF::StringImpl::s_emptyAtomString += 2;
                }
                else
                {
                  v908 = *(WTF::StringImpl **)v1234;
                  if ((*(_DWORD *)(*(_QWORD *)v1234 + 16) & 4) != 0)
                  {
                    if (v907 <= 0xC)
                    {
                      WTF::StringImpl::create((_BYTE *)(*((_QWORD *)v908 + 1) + v906), v907, (uint64_t *)&v1241);
LABEL_1272:
                      v909 = (int *)v1241;
                      goto LABEL_1273;
                    }
                  }
                  else if (v907 <= 6)
                  {
                    WTF::StringImpl::create((_WORD *)(*((_QWORD *)v908 + 1) + 2 * v906), v907, (uint64_t *)&v1241);
                    goto LABEL_1272;
                  }
                  v1063 = *(WTF::StringImpl **)v1234;
                  if ((*(_DWORD *)(*(_QWORD *)v1234 + 16) & 3) == 2)
                    v1063 = (WTF::StringImpl *)*((_QWORD *)v908 + 3);
                  v909 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
                  v1064 = *((_DWORD *)v908 + 4);
                  v1065 = *((_QWORD *)v908 + 1);
                  *(_DWORD *)v1063 += 2;
                  *v909 = 2;
                  v909[1] = v907;
                  if ((v1064 & 4) != 0)
                  {
                    *((_QWORD *)v909 + 1) = v1065 + v906;
                    v909[4] = 6;
                  }
                  else
                  {
                    *((_QWORD *)v909 + 1) = v1065 + 2 * v906;
                    v909[4] = 2;
                  }
                  *((_QWORD *)v909 + 3) = v1063;
                }
LABEL_1273:
                v1267 = (unint64_t)v909;
                v910 = (JSC *)*((_QWORD *)a1 + 7);
                v1270 = v910;
                if (v1268)
                  v911 = *((_DWORD *)v1268 + 1);
                else
                  v911 = 0;
                v912 = *(_QWORD *)v849;
                if (*(_QWORD *)v849)
                  v913 = *(_DWORD *)(v912 + 4);
                else
                  v913 = 0;
                if (v909)
                  v914 = v909[1];
                else
                  v914 = 0;
                if (v911)
                {
                  if (v913)
                  {
                    if (v914)
                    {
                      if (((v914 | v913) & 0x80000000) == 0)
                      {
                        v915 = __OFADD__(v913, v914);
                        if ((v911 & 0x80000000) == 0 && !v915 && !__OFADD__(v911, v913 + v914))
                        {
                          if (v911 + (unint64_t)v913 + v914 + 20 >= 0x40)
                          {
                            v1027 = JSC::jsString(v910, (JSC::VM *)&v1268, (const WTF::String *)v34, v35, v36, a6, a7, a8);
                            v1034 = (JSC::JSString *)JSC::jsString(v910, v849, v1028, v1029, v1030, v1031, v1032, v1033);
                            v1041 = JSC::jsString(v910, (JSC::VM *)&v1267, v1035, v1036, v1037, v1038, v1039, v1040);
                            v42 = JSC::JSRopeString::create(v910, v1027, v1034, v1041, v1042, v1043, v1044, v1045);
                            goto LABEL_1295;
                          }
                          WTF::tryMakeString<WTF::String,WTF::String,WTF::String>((uint64_t)&v1268, (uint64_t *)v849, (uint64_t *)&v1267, (int **)&v1241);
                          v922 = v1241;
                          if (v1241)
                          {
                            v1241 = 0;
                            v1239 = v922;
                            v42 = JSC::JSString::create((uint64_t)v910, (JSC::VM *)&v1239, v916, v917, v918, v919, v920, v921);
                            v923 = v1239;
                            v1239 = 0;
                            if (v923)
                            {
                              if (*(_DWORD *)v923 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v923, v380, v34, v35, v36, a6, a7, a8);
                                WTF::fastFree(v1114, v1115, v1116, v1117, v1118, v1119, v1120, v1121);
                              }
                              else
                              {
                                *(_DWORD *)v923 -= 2;
                              }
                            }
                          }
                          else
                          {
                            JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v1270);
                            v42 = 0;
                          }
                          v924 = v1241;
                          v1241 = 0;
                          if (v924)
                            goto LABEL_1293;
                          goto LABEL_1295;
                        }
                      }
                      v1113 = &v1270;
LABEL_1544:
                      JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)v1113);
                      v42 = 0;
                      goto LABEL_1295;
                    }
                    v1241 = v910;
                    if (v1268)
                    {
                      v1148 = *((unsigned int *)v1268 + 1);
                      if ((_DWORD)v1148)
                      {
                        if (v912)
                        {
                          v1149 = *(unsigned int *)(v912 + 4);
                          if ((_DWORD)v1149)
                          {
                            v1150 = __OFADD__((_DWORD)v1148, (_DWORD)v1149);
                            if (((v1149 | v1148) & 0x80000000) == 0 && !v1150)
                            {
                              if ((unint64_t)(v1148 + v1149 + 20) < 0x30)
                              {
                                v973 = &v1268;
                                v974 = (uint64_t *)v849;
LABEL_1392:
                                WTF::tryMakeString<WTF::String,WTF::String>((uint64_t)v973, v974, (int **)&v1239);
                                v981 = (int *)v1239;
                                if (v1239)
                                {
                                  v1239 = 0;
                                  var60[0] = v981;
                                  v42 = JSC::JSString::create((uint64_t)v910, (JSC::VM *)var60, v975, v976, v977, v978, v979, v980);
                                  v982 = (WTF::StringImpl *)var60[0];
                                  var60[0] = 0;
                                  if (v982)
                                  {
                                    if (*(_DWORD *)v982 == 2)
                                    {
                                      WTF::StringImpl::~StringImpl(v982, v380, v34, v35, v36, a6, a7, a8);
                                      WTF::fastFree(v1122, v1123, v1124, v1125, v1126, v1127, v1128, v1129);
                                    }
                                    else
                                    {
                                      *(_DWORD *)v982 -= 2;
                                    }
                                  }
                                }
                                else
                                {
                                  JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v1241);
                                  v42 = 0;
                                }
                                v924 = v1239;
                                v1239 = 0;
                                if (v924)
                                {
LABEL_1293:
                                  if (*(_DWORD *)v924 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v924, v380, v34, v35, v36, a6, a7, a8);
                                    WTF::fastFree(v991, v992, v993, v994, v995, v996, v997, v998);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v924 -= 2;
                                  }
                                }
LABEL_1295:
                                v925 = (WTF::StringImpl *)v1267;
                                v1267 = 0;
                                if (v925)
                                {
                                  if (*(_DWORD *)v925 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v925, v380, v34, v35, v36, a6, a7, a8);
                                    WTF::fastFree(v983, v984, v985, v986, v987, v988, v989, v990);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v925 -= 2;
                                  }
                                }
                                v899 = v1268;
                                v1268 = 0;
                                if (v899)
                                  goto LABEL_1256;
                                goto LABEL_1119;
                              }
                              v1093 = JSC::jsString(v910, (JSC::VM *)&v1268, (const WTF::String *)v34, v35, v36, a6, a7, a8);
                              v1095 = v910;
                              v1094 = v849;
LABEL_1527:
                              v1096 = (JSC::JSString *)JSC::jsString(v1095, v1094, v1087, v1088, v1089, v1090, v1091, v1092);
                              v42 = JSC::JSRopeString::create(v910, v1093, v1096, v1097, v1098, v1099, v1100, v1101);
                              goto LABEL_1295;
                            }
LABEL_1586:
                            v1113 = &v1241;
                            goto LABEL_1544;
                          }
                        }
                        goto LABEL_1583;
                      }
                    }
LABEL_1584:
                    v1076 = v910;
                    v1075 = v849;
                    goto LABEL_1522;
                  }
                  v1241 = v910;
                  if (v1268)
                  {
                    v970 = *((unsigned int *)v1268 + 1);
                    if ((_DWORD)v970)
                    {
                      if (!v909 || (v971 = v909[1], !(_DWORD)v971))
                      {
LABEL_1583:
                        v1075 = (JSC::VM *)&v1268;
                        goto LABEL_1521;
                      }
                      v972 = __OFADD__((_DWORD)v970, (_DWORD)v971);
                      if (((v971 | v970) & 0x80000000) != 0 || v972)
                        goto LABEL_1586;
                      if ((unint64_t)(v970 + v971 + 20) < 0x30)
                      {
                        v973 = &v1268;
                        v974 = (uint64_t *)&v1267;
                        goto LABEL_1392;
                      }
                      v1085 = (JSC::VM *)&v1268;
                      v1086 = v910;
                      goto LABEL_1526;
                    }
                  }
                }
                else
                {
                  v1241 = v910;
                  if (v912)
                  {
                    v999 = *(unsigned int *)(v912 + 4);
                    if ((_DWORD)v999)
                    {
                      if (!v909)
                        goto LABEL_1584;
                      v1000 = v909[1];
                      if (!(_DWORD)v1000)
                        goto LABEL_1584;
                      v1001 = __OFADD__((_DWORD)v999, (_DWORD)v1000);
                      if (((v1000 | v999) & 0x80000000) != 0 || v1001)
                        goto LABEL_1586;
                      if ((unint64_t)(v999 + v1000 + 20) < 0x30)
                      {
                        v974 = (uint64_t *)&v1267;
                        v973 = (WTF::StringImpl **)v849;
                        goto LABEL_1392;
                      }
                      v1086 = v910;
                      v1085 = v849;
LABEL_1526:
                      v1093 = JSC::jsString(v1086, v1085, (const WTF::String *)v34, v35, v36, a6, a7, a8);
                      v1094 = (JSC::VM *)&v1267;
                      v1095 = v910;
                      goto LABEL_1527;
                    }
                  }
                }
                v1075 = (JSC::VM *)&v1267;
LABEL_1521:
                v1076 = v910;
LABEL_1522:
                v42 = JSC::jsString(v1076, v1075, (const WTF::String *)v34, v35, v36, a6, a7, a8);
                goto LABEL_1295;
              }
              v953 = *(WTF::StringImpl **)v1234;
              if (*(_QWORD *)v1234)
                v954 = *((_DWORD *)v953 + 1);
              else
                v954 = 0;
              v955 = *((_DWORD *)v1261 + 1) - *(_DWORD *)v1261;
              v956 = *(int *)v1261 > 0 || v955 < v954;
              v42 = a2;
              if (!v956)
                goto LABEL_1119;
              if (v955 >= v954)
                v957 = v954;
              else
                v957 = v955;
              if ((_DWORD)v957)
              {
                v958 = *(_DWORD *)v1261 & ~(*(int *)v1261 >> 31);
                if ((*((_DWORD *)v953 + 4) & 4) != 0)
                {
                  if (v957 <= 0xC)
                  {
                    WTF::StringImpl::create((_BYTE *)(*((_QWORD *)v953 + 1) + v958), v957, (uint64_t *)&v1239);
LABEL_1377:
                    v1241 = v1239;
                    goto LABEL_1255;
                  }
                }
                else if (v957 <= 6)
                {
                  WTF::StringImpl::create((_WORD *)(*((_QWORD *)v953 + 1) + 2 * v958), v957, (uint64_t *)&v1239);
                  goto LABEL_1377;
                }
                v1069 = *(WTF::StringImpl **)v1234;
                if ((*((_DWORD *)v953 + 4) & 3) == 2)
                  v1069 = (WTF::StringImpl *)*((_QWORD *)v953 + 3);
                v1070 = WTF::fastCompactMalloc((WTF *)0x20);
                v1071 = *((_DWORD *)v953 + 4);
                v1072 = *((_QWORD *)v953 + 1);
                *(_DWORD *)v1069 += 2;
                *(_DWORD *)v1070 = 2;
                *(_DWORD *)(v1070 + 4) = v957;
                if ((v1071 & 4) != 0)
                {
                  *(_QWORD *)(v1070 + 8) = v1072 + v958;
                  *(_DWORD *)(v1070 + 16) = 6;
                }
                else
                {
                  *(_QWORD *)(v1070 + 8) = v1072 + 2 * v958;
                  *(_DWORD *)(v1070 + 16) = 2;
                }
                *(_QWORD *)(v1070 + 24) = v1069;
                v1239 = (WTF::StringImpl *)v1070;
                goto LABEL_1377;
              }
              WTF::StringImpl::s_emptyAtomString += 2;
              v1239 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
              goto LABEL_1377;
            }
          }
LABEL_1202:
          JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v1266);
          v42 = 0;
          goto LABEL_1120;
        }
      }
    }
    else
    {
      v1265 = 0;
      v577 = *((_DWORD *)v1232 + 6);
      v1229 = (_DWORD *)((char *)v1232 + 24);
      v1213 = v577 + 2;
      v1207 = 0;
      v1208 = v577 + 3;
      v1209 = (uint64_t)v1235 + 86816;
    }
    v489 = 0;
    LOBYTE(__dst) = 0;
    *(_QWORD *)&v1246 = 0x800000000;
    v1247 = 0u;
    v1248 = 0u;
    v1249 = 0u;
    v1250 = 0u;
    *((_QWORD *)&v1246 + 1) = (char *)&v1247 + 8;
    v1251 = 0;
    v490 = (uint64_t *)((char *)a1 + 2200);
    v491 = (uint64_t)v1232;
    while (1)
    {
      v492 = *((_QWORD *)a1 + 7);
      JSC::RegExp::match(v491, (uint64_t)a1, (uint64_t *)v1234, v489, (uint64_t)v490, a6, a7, a8);
      v499 = v498;
      if (*(_DWORD *)(v492 + 80))
      {
        v553 = *(_DWORD *)(v492 + 80);
        if ((v553 & 0x27) != 0 && (v553 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v492 + 64), 7u, v494, v495, v496, a6, a7, a8);
        if (*(_QWORD *)(v492 + 16))
          break;
      }
      v500 = *v490;
      if (v499 == -1)
        goto LABEL_744;
      if (*((_DWORD *)a1 + 553) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x198BD2080);
      }
      v501 = *(int *)(v500 + 4);
      v502 = v499;
      *((_QWORD *)a1 + 269) = v491;
      *((_QWORD *)a1 + 268) = a2;
      *((_QWORD *)a1 + 265) = v499;
      *((_QWORD *)a1 + 266) = v501;
      *((_BYTE *)a1 + 2136) = 0;
      if (*(_DWORD *)(v492 + 760) >= *((unsigned __int8 *)a1 + 7))
      {
        v556 = v501;
        JSC::Heap::writeBarrierSlowPath(v492 + 192, (unint64_t)a1);
        v501 = v556;
      }
LABEL_654:
      v503 = v1266;
      if (*((_DWORD *)v1266 + 20))
      {
        v554 = *((_DWORD *)v1266 + 20);
        if ((v554 & 0x27) != 0 && (v554 & 0x20) == 0)
        {
          v1166 = v501;
          v1167 = v1266;
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1266 + 64), 7u, v494, v495, v496, a6, a7, a8);
          v503 = v1167;
          v501 = v1166;
        }
        if (*((_QWORD *)v503 + 2))
          goto LABEL_1397;
      }
      if (v502 == -1)
        goto LABEL_1326;
      if (*v1229 != -1)
      {
        v505 = 0;
        while (2)
        {
          v60 = *(unsigned int *)(v500 + 4 * (2 * v505));
          if ((v60 & 0x80000000) != 0)
          {
            SlowCase = 10;
            v491 = (uint64_t)v1232;
            v490 = (uint64_t *)((char *)a1 + 2200);
            goto LABEL_679;
          }
          v506 = *(_DWORD *)(v500 + 4 * ((2 * (_DWORD)v505) | 1u));
          v507 = *((_QWORD *)a1 + 7);
          v508 = v506 - v60;
          if (v506 == (_DWORD)v60)
          {
            SlowCase = *(_QWORD *)(v507 + 41968);
            goto LABEL_678;
          }
          v509 = *(_QWORD *)v1225;
          if (!(_DWORD)v60)
          {
            v525 = (_DWORD *)(v509 + 4);
            if ((v509 & 1) != 0)
              v525 = (_DWORD *)(a2 + 16);
            SlowCase = a2;
            if (*v525 == v508)
              goto LABEL_678;
          }
          if ((v509 & 2) != 0)
          {
            v510 = *(_QWORD *)(a2 + 20) & 0xFFFFFFFFFLL;
            v60 = (v60 + *(_DWORD *)(a2 + 26));
          }
          else if ((v509 & 1) != 0)
          {
            v557 = v503;
            v558 = v501;
            v510 = a2;
            JSC::JSRopeString::resolveRope(a2, a1, v494, v495, v497, v496, a6, a7, a8);
            if (*(_DWORD *)(v507 + 80))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v507, v493, v494, v495, v496, a6, a7, a8);
              v501 = v558;
              v503 = v557;
              if (hasExceptionsAfterHandlingTraps)
              {
                SlowCase = 0;
                goto LABEL_678;
              }
            }
            else
            {
              v501 = v558;
              v503 = v557;
            }
          }
          else
          {
            v510 = a2;
          }
          if (!(_DWORD)v60)
          {
            v524 = *(_QWORD *)(v510 + 8);
            if (v524)
              LODWORD(v524) = *(_DWORD *)(v524 + 4);
            if ((_DWORD)v524 == v508)
            {
              SlowCase = v510;
              goto LABEL_678;
            }
          }
          v511 = (unint64_t *)(v507 + 39696);
          if (v508 == 1)
          {
            v512 = *(WTF::StringImpl **)(v510 + 8);
            if (!v512 || *((_DWORD *)v512 + 1) <= v60)
            {
              v513 = 0;
LABEL_677:
              SlowCase = *(_QWORD *)(v507 + 8 * v513 + 42216);
              goto LABEL_678;
            }
            v1110 = v501;
            v1111 = v503;
            v1112 = WTF::StringImpl::at(v512, v60);
            v511 = (unint64_t *)(v507 + 39696);
            v503 = v1111;
            v501 = v1110;
            if (v1112 <= 0xFF)
            {
              v513 = v1112;
              goto LABEL_677;
            }
LABEL_689:
            v517 = *(_QWORD *)(v510 + 8);
            if (v517)
            {
              if ((*(_BYTE *)(v517 + 16) & 4) != 0)
                v518 = 7;
              else
                v518 = 3;
            }
            else
            {
              v518 = 7;
            }
            v519 = (_QWORD *)(v507 + 39432);
            SlowCase = *(_QWORD *)(v507 + 39432);
            if (SlowCase >= *(_QWORD *)(v507 + 39440))
            {
              v1211 = v511;
              v1215 = v503;
              v1219 = v501;
              SlowCase = *(_QWORD *)(v507 + 39448);
              if ((SlowCase & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v507, (JSC::VM *)v493, v494, v495, v496, a6, a7, a8);
                SlowCase = JSC::LocalAllocator::allocateSlowCase(v507 + 39408, v507 + 192, 32, 0, 0, v967, v968, v969);
              }
              else
              {
                v559 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v507 + 39456);
                *(_QWORD *)(v507 + 39440) = SlowCase + HIDWORD(v559);
                *(_QWORD *)(v507 + 39448) = SlowCase + (int)v559;
                *v519 = SlowCase + 32;
              }
              v503 = v1215;
              v501 = v1219;
              v511 = v1211;
            }
            else
            {
              *v519 = SlowCase + 32;
            }
            *(_DWORD *)SlowCase = v511[227] >> 4;
            v497 = (int8x16_t)0x1080200uLL;
            *(_DWORD *)(SlowCase + 4) = 17302016;
            *(_QWORD *)(SlowCase + 8) = v518;
            *(_DWORD *)(SlowCase + 16) = v508;
            *(_DWORD *)(SlowCase + 20) = v510;
            *(_WORD *)(SlowCase + 24) = WORD2(v510);
            *(_WORD *)(SlowCase + 26) = v60;
            *(_DWORD *)(SlowCase + 28) = WORD1(v60);
            if (*(_BYTE *)(v507 + 755))
              __dmb(0xAu);
            goto LABEL_678;
          }
          if (v508 != 2)
            goto LABEL_689;
          v528 = *(WTF::StringImpl **)(v510 + 8);
          if (v528)
          {
            v529 = *((_DWORD *)v528 + 1);
            if (v529 > v60)
            {
              v1216 = v503;
              v1146 = v501;
              v530 = WTF::StringImpl::at(v528, v60);
              v528 = *(WTF::StringImpl **)(v510 + 8);
              if (v528)
              {
                v529 = *((_DWORD *)v528 + 1);
                v501 = v1146;
                v503 = v1216;
                v511 = (unint64_t *)(v507 + 39696);
                goto LABEL_713;
              }
              v501 = v1146;
              v503 = v1216;
              v511 = (unint64_t *)(v507 + 39696);
            }
            else
            {
              v530 = 0;
LABEL_713:
              v493 = (v60 + 1);
              if (v529 > v493)
              {
                v1220 = v501;
                v1147 = v503;
                v1212 = v511;
                LODWORD(v528) = WTF::StringImpl::at(v528, v493);
                v511 = v1212;
                v503 = v1147;
                v501 = v1220;
              }
              else
              {
                LODWORD(v528) = 0;
              }
            }
          }
          else
          {
            v530 = 0;
          }
          if ((v528 | v530) > 0x7F)
            goto LABEL_689;
          LOBYTE(v1241) = v530;
          BYTE1(v1241) = (_BYTE)v528;
          v1261 = (WTF *)&v1241;
          v1262 = 2;
          v531 = ((v530 - 1640531527) << 16) ^ ((_DWORD)v528 << 11) ^ (v530 - 1640531527);
          v532 = (v531 + (v531 >> 11)) ^ (8 * (v531 + (v531 >> 11)));
          v533 = (v532 + (v532 >> 5)) ^ (4 * (v532 + (v532 >> 5)));
          v534 = ((v533 + (v533 >> 15)) ^ ((v533 + (v533 >> 15)) << 10)) & 0xFFFFFF;
          if (v534)
            v535 = v534;
          else
            v535 = 0x800000;
          v1263[0] = v535;
          v536 = v507 + 81168;
          v537 = v535 & 0x1FF;
          v538 = *(_QWORD *)(v507 + 81168 + 8 * v537);
          if (!v538)
            goto LABEL_728;
          v539 = *(_QWORD *)(v538 + 8);
          v540 = (v539 & 1) != 0 ? 0 : (WTF::StringImpl *)v539;
          v541 = *((_DWORD *)v540 + 4);
          if (v541 < 0x100)
          {
            v1218 = v501;
            v552 = v503;
            v1210 = v511;
            v542 = WTF::StringImpl::hashSlowCase(v540);
            v511 = v1210;
            v503 = v552;
            v501 = v1218;
          }
          else
          {
            v542 = v541 >> 8;
          }
          if (v542 != v535)
            goto LABEL_728;
          v543 = (uint64_t)v540;
          v544 = v501;
          v545 = v503;
          v60 = (uint64_t)v511;
          v546 = WTF::equalInternal<unsigned char>(v543, (unint64_t)&v1241, 2);
          v511 = (unint64_t *)v60;
          v503 = v545;
          v501 = v544;
          if (v546)
          {
            SlowCase = *(_QWORD *)(v536 + 8 * v537);
          }
          else
          {
LABEL_728:
            v1214 = v503;
            v1217 = v501;
            v547 = v511;
            WTF::AtomStringImpl::add(&v1261, v495, v496, a6, a7, a8, &v1258);
            v60 = (uint64_t)v1258;
            v548 = *((_DWORD *)v1258 + 4);
            v549 = v1258;
            if ((v548 & 3) == 2)
            {
              v549 = v1258;
              do
              {
                v549 = (WTF *)*((_QWORD *)v549 + 3);
                v548 = *((_DWORD *)v549 + 4);
              }
              while ((v548 & 3) == 2);
            }
            if ((v548 & 8) != 0)
            {
              v495 = 0;
            }
            else
            {
              *((_DWORD *)v549 + 4) = v548 | 8;
              v495 = (unint64_t)*((unsigned int *)v549 + 1) << ((v548 & 4) == 0);
            }
            v503 = v1214;
            v501 = v1217;
            v550 = v507 + 192;
            v551 = v547;
            SlowCase = *v547;
            if (*v547 >= v547[1])
            {
              v1206 = v495;
              SlowCase = v547[2];
              if ((SlowCase & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v507, (JSC::VM *)v493, v494, v495, v496, a6, a7, a8);
                SlowCase = JSC::LocalAllocator::allocateSlowCase(v507 + 39672, v507 + 192, 16, 0, 0, v1066, v1067, v1068);
                v550 = v507 + 192;
                v503 = v1214;
                v501 = v1217;
                v551 = v547;
                v495 = v1206;
              }
              else
              {
                v551 = v547;
                v561 = *(_QWORD *)(SlowCase + 8) ^ v547[3];
                v547[1] = SlowCase + HIDWORD(v561);
                v547[2] = SlowCase + (int)v561;
                *v547 = SlowCase + 16;
                v503 = v1214;
                v501 = v1217;
                v550 = v507 + 192;
              }
            }
            else
            {
              *v547 = SlowCase + 16;
            }
            *(_DWORD *)SlowCase = v551[227] >> 4;
            v497 = (int8x16_t)0x1080200uLL;
            *(_DWORD *)(SlowCase + 4) = 17302016;
            *(_QWORD *)(SlowCase + 8) = v60;
            if (*(_BYTE *)(v507 + 755))
              __dmb(0xAu);
            if (v495 >= 0x101)
            {
              JSC::Heap::reportExtraMemoryAllocatedSlowCase(v550, 0, SlowCase, v495, v496, a6, a7, a8);
              v503 = v1214;
              v501 = v1217;
            }
            *(_QWORD *)(v536 + 8 * v537) = SlowCase;
          }
LABEL_678:
          v491 = (uint64_t)v1232;
          v490 = (uint64_t *)((char *)a1 + 2200);
          if (*((_DWORD *)v503 + 20))
          {
            v555 = *((_DWORD *)v503 + 20);
            if ((v555 & 0x27) != 0 && (v555 & 0x20) == 0)
            {
              v1168 = v501;
              v60 = (uint64_t)v503;
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v503 + 64), 7u, v494, v495, v496, a6, a7, a8);
              v503 = (JSC::VM *)v60;
              v501 = v1168;
            }
            if (*((_QWORD *)v503 + 2))
              goto LABEL_1397;
          }
LABEL_679:
          v515 = v1246;
          if ((_DWORD)v1246 != DWORD1(v1246)
            && (*((__int128 **)&v1246 + 1) != (__int128 *)((char *)&v1247 + 8)
              ? (v516 = *((_QWORD *)&v1246 + 1) == 0)
              : (v516 = 1),
                v516))
          {
            *(_QWORD *)(*((_QWORD *)&v1246 + 1) + 8 * v1246) = SlowCase;
            LODWORD(v1246) = v515 + 1;
          }
          else
          {
            v520 = SlowCase;
            v521 = v501;
            v522 = v503;
            v523 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v1246, v520, v494, v495, v496, a6, a7, a8);
            v503 = v522;
            v501 = v521;
            if (v523 == 1)
              LOBYTE(__dst) = 1;
          }
          if (++v505 >= (unint64_t)(*v1229 + 1))
            break;
          continue;
        }
      }
      if (HIDWORD(v502))
        v493 = COERCE__INT64((double)v502) + 0x2000000000000;
      else
        v493 = v502 | 0xFFFE000000000000;
      v504 = v1246;
      if ((_DWORD)v1246 == DWORD1(v1246)
        || *((__int128 **)&v1246 + 1) != (__int128 *)((char *)&v1247 + 8) && *((_QWORD *)&v1246 + 1))
      {
        v526 = v501;
        v527 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v1246, v493, v494, v495, v496, a6, a7, a8);
        v501 = v526;
        if (v527 == 1)
          LOBYTE(__dst) = 1;
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)&v1246 + 1) + 8 * v1246) = v493;
        LODWORD(v1246) = v504 + 1;
      }
      v489 = v501;
      if (v502 == v501)
      {
        v489 = v501 + 1;
        if ((int)v501 + 1 > v1207
          || (v929 = *(WTF::StringImpl **)v1234) != 0
          && *((_DWORD *)v929 + 1) > v501
          && (v930 = v501, (WTF::StringImpl::at(v929, v501) & 0xFC00) == 0xD800)
          && (v931 = *(WTF::StringImpl **)v1234) != 0
          && *((_DWORD *)v931 + 1) > v489
          && (WTF::StringImpl::at(v931, v489) & 0xFC00) == 0xDC00
          && (v489 = v930 + 2, v930 + 2 > v1207))
        {
LABEL_1326:
          v494 = v1246;
          v42 = a2;
          if ((_DWORD)v1246)
          {
            v932 = JSC::JSImmutableButterfly::tryCreateFromArgList((uint64_t)v1235, *((JSC::VM **)&v1246 + 1), v1246, v495, v496, a6, a7, a8);
            if (v932)
            {
              v370 = (JSC::RegExp *)v932;
              JSC::StringReplaceCache::set(v1209, *(WTF::StringImpl **)v1234, (uint64_t)v1232, v932, *((_QWORD *)a1 + 265), *((_QWORD *)a1 + 266), (const void **)a1 + 275, v933);
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1246, v934, v935, v936, v937, v938, v939, v940);
              goto LABEL_512;
            }
            JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v1266);
LABEL_1397:
            v42 = 0;
          }
          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1246, (void *)v493, v494, v495, v496, a6, a7, a8);
          goto LABEL_1131;
        }
      }
    }
    v500 = 0;
LABEL_744:
    v501 = 0;
    v502 = -1;
    goto LABEL_654;
  }
  __dst = (void *)v11;
  if ((v12 & 1) != 0)
    JSC::throwTypeError((unint64_t)a1, (JSC::VM **)&__dst, (uint64_t)"Attempted to assign to readonly property.", 42);
  else
    *((_QWORD *)a3 + 3) = 0xFFFE000000000000;
  if (*(_DWORD *)(v11 + 80))
  {
    v325 = *(_DWORD *)(v11 + 80);
    if ((v325 & 0x27) != 0 && (v325 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v14 = (int **)(a2 + 8);
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    v14 = JSC::JSRopeString::resolveRope(a2, a1, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v11 + 80))
  {
    v326 = *(_DWORD *)(v11 + 80);
    if ((v326 & 0x27) != 0 && (v326 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v1239 = 0;
  v1261 = (WTF *)v1263;
  v1262 = 16;
  v15 = *v14;
  if (*v14)
    LODWORD(v15) = v15[1];
  v16 = 0;
  LODWORD(var60[0]) = (_DWORD)v15;
  while (1)
  {
    v17 = *((_QWORD *)a1 + 7);
    v1241 = a1;
    v18 = *v14;
    if (*v14)
    {
      v19 = v18[4];
      v20 = (v19 & 4) == 0;
      v21 = (void *)*((_QWORD *)v18 + 1);
      LODWORD(v18) = v18[1];
      v22 = (v19 >> 2) & 1;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      LOBYTE(v22) = 1;
    }
    v23 = (unint64_t *)(v17 + 90552);
    v24 = *(unsigned __int8 *)(v13 + 16);
    if (v24 == 1)
    {
      v25 = *(_QWORD *)(v13 + 40);
      if (v20)
      {
        v578 = *(_QWORD *)(v25 + 72);
        if (v578 && *(_DWORD *)(v578 + 4))
        {
LABEL_17:
          v1258 = (WTF *)&v1241;
          v1259 = v17;
          v1260[0] = v13;
          goto LABEL_18;
        }
      }
      else
      {
        v26 = *(_QWORD *)(v25 + 56);
        if (v26 && *(_DWORD *)(v26 + 4))
          goto LABEL_17;
      }
    }
    else if (v24 == 2 || v24 == 0)
    {
      goto LABEL_382;
    }
    __dst = v21;
    LODWORD(v1246) = (_DWORD)v18;
    BYTE4(v1246) = v22;
    BYTE8(v1246) = 1;
    JSC::RegExp::compileMatchOnly(v13, v17, v20, (__int128 *)&__dst);
    v24 = *(unsigned __int8 *)(v13 + 16);
LABEL_382:
    v1258 = (WTF *)&v1241;
    v1259 = v17;
    v1260[0] = v13;
    if (v24 != 1)
    {
      if (!v24)
        goto LABEL_1332;
LABEL_483:
      v349 = (char *)&v1246 + 8;
      __dst = (char *)&v1246 + 8;
      *(_QWORD *)&v1246 = 32;
      v350 = *(_DWORD **)(v13 + 48);
      if (v350 && v350[5])
        v351 = *v350 + 2 * *(_DWORD *)(v13 + 24);
      else
        v351 = 2 * *(_DWORD *)(v13 + 24);
      v352 = v351 + 2;
      v1232 = (JSC::RegExp *)((char *)&v1246 + 8);
      if ((v351 + 2) >= 0x21)
      {
        WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, v352);
        v349 = (char *)__dst;
      }
      DWORD1(v1246) = v352;
      *v23 = v13;
      v353 = *v14;
      if (*v14)
      {
        v354 = *((_QWORD *)v353 + 1);
        v355 = v353[1] | ((unint64_t)((v353[4] >> 2) & 1) << 32);
      }
      else
      {
        v354 = 0;
        v355 = 0x100000000;
      }
      v356 = JSC::Yarr::interpret(*(_QWORD *)(v13 + 32), v354, v355, v16, (uint64_t)v349, a6, a7, a8);
      *v23 = 0;
      if ((v356 & 0x80000000) != 0)
      {
        v38 = 0;
        v37 = -1;
      }
      else
      {
        v37 = v356;
        v38 = (WTF::StringImpl *)*((unsigned int *)v349 + 1);
      }
      v357 = __dst;
      if ((char *)&v1246 + 8 != __dst && __dst)
      {
        __dst = 0;
        LODWORD(v1246) = 0;
        WTF::fastFree((unint64_t)v357, v33, v34, v35, v36, a6, a7, a8);
      }
      goto LABEL_27;
    }
    v25 = *(_QWORD *)(v13 + 40);
LABEL_18:
    v27 = *(unsigned __int8 *)(v25 + 104);
    *(_QWORD *)&v1247 = 0;
    v28 = *(_QWORD *)(v17 + 8);
    __dst = (void *)v17;
    v1246 = v28;
    *v23 = v13;
    if (!v27)
      goto LABEL_19;
    v214 = (unsigned __int8 *)(v17 + 93049);
    if (__ldaxr((unsigned __int8 *)(v17 + 93049)))
    {
      __clrex();
LABEL_267:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v214);
      goto LABEL_268;
    }
    if (__stxr(1u, v214))
      goto LABEL_267;
LABEL_268:
    v216 = *(void **)(v17 + 93056);
    if (!v216)
    {
      v216 = (void *)WTF::fastMalloc((WTF *)0x2000);
      bzero(v216, 0x2000uLL);
      v875 = *(_QWORD *)(v17 + 93056);
      *(_QWORD *)(v17 + 93056) = v216;
      if (v875)
      {
        WTF::fastFree(v875, v868, v869, v870, v871, v872, v873, v874);
        v216 = *(void **)(v17 + 93056);
      }
    }
    *((_QWORD *)&v1246 + 1) = v216;
    LODWORD(v1247) = 0x2000;
LABEL_19:
    v29 = *v14;
    if (!*v14)
    {
      v30 = 0;
      v31 = 0;
      goto LABEL_22;
    }
    if ((v29[4] & 4) != 0)
    {
      v30 = *((_QWORD *)v29 + 1);
      v31 = v29[1];
LABEL_22:
      v32 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, void **))(*(_QWORD *)(v13 + 40) + 48))(v30, v16, v31, 0, &__dst);
      goto LABEL_23;
    }
    v32 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void **))(*(_QWORD *)(v13 + 40) + 64))(*((_QWORD *)v29 + 1), v16, v29[1], 0, &__dst);
LABEL_23:
    v37 = v32;
    v38 = (WTF::StringImpl *)v33;
    if (!*((_QWORD *)&v1246 + 1))
      goto LABEL_24;
    v217 = (unsigned __int8 *)__dst + 93049;
    v218 = __ldxr((unsigned __int8 *)__dst + 93049);
    if (v218 != 1)
    {
      __clrex();
LABEL_300:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v217, 0, v34, v35, v36, a6, a7, a8);
      goto LABEL_24;
    }
    if (__stlxr(0, v217))
      goto LABEL_300;
LABEL_24:
    if (!DWORD1(v1247))
      *((_QWORD *)__dst + 11319) = 0;
    if (v37 == -2)
    {
      JSC::RegExp::byteCodeCompileIfNecessary((JSC::RegExp *)v13, (JSC::VM *)v17);
      if (!*(_BYTE *)(v13 + 16))
      {
LABEL_1332:
        v37 = JSC::RegExp::matchInline<(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int)::{lambda(void)#1}::operator()((JSC::JSGlobalObject ***)&v1258);
        v38 = (WTF::StringImpl *)v33;
        goto LABEL_27;
      }
      goto LABEL_483;
    }
    if (!*(_DWORD *)(v17 + 80))
      goto LABEL_1672;
LABEL_27:
    v258 = *(_DWORD *)(v17 + 80);
    if ((v258 & 0x27) != 0 && (v258 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v17 + 64), 7u, v34, v35, v36, a6, a7, a8);
    if (*(_QWORD *)(v17 + 16))
    {
      v38 = 0;
      v37 = -1;
    }
    else
    {
LABEL_1672:
      if (v37 != -1)
      {
        *((_QWORD *)a1 + 269) = v13;
        *((_QWORD *)a1 + 268) = a2;
        *((_QWORD *)a1 + 265) = v37;
        *((_QWORD *)a1 + 266) = v38;
        *((_BYTE *)a1 + 2136) = 0;
        if (*(_DWORD *)(v17 + 760) >= *((unsigned __int8 *)a1 + 7))
          JSC::Heap::writeBarrierSlowPath(v17 + 192, (unint64_t)a1);
      }
    }
    v1237 = (int *)v37;
    v1238 = v38;
    if (*(_DWORD *)(v11 + 80))
    {
      v259 = *(_DWORD *)(v11 + 80);
      if ((v259 & 0x27) != 0 && (v259 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, v34, v35, v36, a6, a7, a8);
      if (*(_QWORD *)(v11 + 16))
        goto LABEL_621;
      v37 = (unint64_t)v1237;
    }
    v39 = (int)v1239;
    if (v37 == -1)
      break;
    if ((unint64_t)v1239 < v37)
    {
      v40 = HIDWORD(v1262);
      if (HIDWORD(v1262) == (_DWORD)v1262)
      {
        if (!WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1261, (int *)&v1239, (int *)&v1237, v35, v36, a6, a7, a8))goto LABEL_618;
        v37 = (unint64_t)v1237;
      }
      else
      {
        v41 = (_DWORD *)((char *)v1261 + 8 * HIDWORD(v1262));
        *v41 = (_DWORD)v1239;
        v41[1] = v37;
        if (v39 == (_DWORD)v37)
          *(_QWORD *)v41 = 0;
        HIDWORD(v1262) = v40 + 1;
      }
    }
    v16 = v1238;
    v1239 = v1238;
    if ((WTF::StringImpl *)v37 == v1238)
    {
      v16 = (_DWORD)v1238 + 1;
      if (((_DWORD)v1238 + 1) > LODWORD(var60[0]))
        goto LABEL_42;
    }
  }
  v37 = (unint64_t)v1239;
LABEL_42:
  v42 = a2;
  if (!v37)
  {
LABEL_43:
    v43 = v1261;
    if (v1263 != (_DWORD *)v1261 && v1261 != 0)
    {
      v1261 = 0;
      LODWORD(v1262) = 0;
      WTF::fastFree((unint64_t)v43, v33, v34, v35, v36, a6, a7, a8);
    }
    return v42;
  }
  v46 = (int)var60[0];
  v47 = HIDWORD(v1262);
  if (LODWORD(var60[0]) > v37)
  {
    if (HIDWORD(v1262) != (_DWORD)v1262)
    {
      v70 = (_DWORD *)((char *)v1261 + 8 * HIDWORD(v1262));
      v47 = HIDWORD(v1262) + 1;
      *v70 = v37;
      v70[1] = v46;
      HIDWORD(v1262) = v47;
      goto LABEL_50;
    }
    if (WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int &>((uint64_t)&v1261, (int *)&v1239, (int *)var60, v35, v36, a6, a7, a8))
    {
      v47 = HIDWORD(v1262);
      goto LABEL_50;
    }
LABEL_618:
    v452 = JSC::createOutOfMemoryError((unint64_t)a1, (JSC::JSGlobalObject *)v33);
    v459 = (JSC::Exception *)v452;
    if ((v452 & 0xFFFE000000000002) != 0
      || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v452 & 0xFFFFFFFE) + 0x4C)))
    {
      v459 = (JSC::Exception *)JSC::Exception::create(v11, (JSC::VM *)v452, 0, v453, v454, v455, v456, v457);
    }
    JSC::VM::throwException((JSC::VM *)v11, a1, v459, v458, v453, v454, v455, v456, v457);
    goto LABEL_621;
  }
LABEL_50:
  v48 = (uint64_t)v1261;
  v49 = (WTF *)*((_QWORD *)a1 + 7);
  v1258 = v49;
  if (v47 == 1)
  {
    v50 = *v14;
    if (*v14)
      v51 = v50[1];
    else
      v51 = 0;
    v52 = *((_DWORD *)v1261 + 1) - *(_DWORD *)v1261;
    if (*(int *)v1261 <= 0)
    {
      v42 = a2;
      if (v52 >= v51)
        goto LABEL_43;
    }
    if (v52 >= v51)
      v53 = v51;
    else
      v53 = v52;
    if (!(_DWORD)v53)
    {
      v56 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_289;
    }
    v54 = *(_DWORD *)v1261 & ~(*(int *)v1261 >> 31);
    if ((v50[4] & 4) != 0)
    {
      if (v53 <= 0xC)
      {
        v55 = (_BYTE *)(*((_QWORD *)v50 + 1) + v54);
        v56 = (int *)WTF::fastCompactMalloc((WTF *)(v53 + 20));
        v57 = v56 + 5;
        *v56 = 2;
        v56[1] = v53;
        *((_QWORD *)v56 + 1) = v56 + 5;
        v56[4] = 4;
        if ((_DWORD)v53 == 1)
          *v57 = *v55;
        else
          memcpy(v57, v55, v53);
        goto LABEL_289;
      }
    }
    else if (v53 <= 6)
    {
      WTF::StringImpl::create((_WORD *)(*((_QWORD *)v50 + 1) + 2 * v54), v53, (uint64_t *)&v1237);
      v56 = v1237;
      goto LABEL_289;
    }
    v263 = v50;
    if ((v50[4] & 3) == 2)
      v263 = (int *)*((_QWORD *)v50 + 3);
    v264 = WTF::fastCompactMalloc((WTF *)0x20);
    v56 = (int *)v264;
    v265 = v50[4];
    v266 = *((_QWORD *)v50 + 1);
    *v263 += 2;
    *(_DWORD *)v264 = 2;
    *(_DWORD *)(v264 + 4) = v53;
    if ((v265 & 4) != 0)
    {
      *(_QWORD *)(v264 + 8) = v266 + v54;
      *(_DWORD *)(v264 + 16) = 6;
    }
    else
    {
      *(_QWORD *)(v264 + 8) = v266 + 2 * v54;
      *(_DWORD *)(v264 + 16) = 2;
    }
    *(_QWORD *)(v264 + 24) = v263;
LABEL_289:
    __dst = v56;
LABEL_607:
    v42 = JSC::jsString((uint64_t)v49, (JSC::VM *)&__dst, v34, v35, v36, a6, a7, a8);
    v441 = (WTF::StringImpl *)__dst;
    __dst = 0;
    if (v441)
    {
      if (*(_DWORD *)v441 == 2)
      {
        WTF::StringImpl::~StringImpl(v441, (WTF::AtomStringImpl *)v33, v34, v35, v36, a6, a7, a8);
        WTF::fastFree(v442, v443, v444, v445, v446, v447, v448, v449);
      }
      else
      {
        *(_DWORD *)v441 -= 2;
      }
    }
    goto LABEL_43;
  }
  if (!v47)
    goto LABEL_329;
  v71 = v47;
  v72 = (v47 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v72 < 7)
  {
    v73 = 0;
    v74 = v1261;
    goto LABEL_98;
  }
  v153 = v72 + 1;
  v154 = (v72 + 1) & 0x3FFFFFFFFFFFFFF8;
  v74 = (WTF *)((char *)v1261 + 8 * v154);
  v155 = (const float *)((char *)v1261 + 32);
  v156 = 0uLL;
  v157 = v154;
  v158 = 0uLL;
  do
  {
    v159 = v155 - 8;
    v1276 = vld2q_f32(v159);
    v1281 = vld2q_f32(v155);
    v156 = vsubq_s32(vaddq_s32((int32x4_t)v1276.val[1], v156), (int32x4_t)v1276.val[0]);
    v158 = vsubq_s32(vaddq_s32((int32x4_t)v1281.val[1], v158), (int32x4_t)v1281.val[0]);
    v155 += 16;
    v157 -= 8;
  }
  while (v157);
  v73 = vaddvq_s32(vaddq_s32(v158, v156));
  if (v153 != v154)
  {
LABEL_98:
    v75 = (WTF *)((char *)v1261 + 8 * v47);
    do
    {
      v77 = *(_DWORD *)v74;
      v76 = *((_DWORD *)v74 + 1);
      v74 = (WTF *)((char *)v74 + 8);
      v73 = v76 + v73 - v77;
    }
    while (v74 != v75);
  }
  if (!v73)
  {
LABEL_329:
    v42 = *((_QWORD *)v49 + 5246);
    goto LABEL_43;
  }
  v78 = *v14;
  if (!*v14)
  {
    v79 = 0;
    v80 = 0;
    goto LABEL_103;
  }
  v79 = *((_QWORD *)v78 + 1);
  v80 = v78[1];
  if ((v78[4] & 4) != 0)
  {
LABEL_103:
    if ((v73 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v73 + 20), &__dst);
      v81 = __dst;
      if (__dst)
      {
        v82 = 0;
        *(_DWORD *)__dst = 2;
        v81[1] = v73;
        *((_QWORD *)v81 + 1) = v81 + 5;
        v81[4] = 4;
        v83 = 8 * v71;
        while (1)
        {
          v84 = (int)*(_QWORD *)v48;
          v34 = v80 - v84;
          if (v80 < v84)
            goto LABEL_1458;
          v85 = (uint64_t)(0xFFFFFFFF00000001 * *(_QWORD *)v48) >> 32;
          if (v85 != -1)
          {
            v86 = v34 >= v85;
            v34 = (uint64_t)(0xFFFFFFFF00000001 * *(_QWORD *)v48) >> 32;
            if (!v86)
              goto LABEL_1458;
          }
          v87 = (char *)v81 + v82 + 20;
          v88 = (_BYTE *)(v79 + v84);
          if (v34 == 1)
          {
            *v87 = *v88;
          }
          else if (v34)
          {
            memcpy(v87, v88, v34);
          }
          v82 += v85;
          v48 += 8;
          v83 -= 8;
          if (!v83)
            goto LABEL_606;
        }
      }
    }
LABEL_1400:
    JSC::throwOutOfMemoryError(a1, (JSC::JSGlobalObject *)&v1258);
LABEL_621:
    v42 = 0;
    goto LABEL_43;
  }
  if (v73 > 0x7FFFFFEF)
    goto LABEL_1400;
  WTF::tryFastCompactMalloc((WTF *)(2 * v73 + 20), &__dst);
  v81 = __dst;
  if (!__dst)
    goto LABEL_1400;
  v433 = 0;
  *(_DWORD *)__dst = 2;
  v81[1] = v73;
  *((_QWORD *)v81 + 1) = v81 + 5;
  v81[4] = 0;
  v434 = 8 * v71;
  v48 += 4;
  while (1)
  {
    v435 = *(int *)(v48 - 4);
    v436 = v80 - v435;
    if (v80 < v435)
      break;
    v437 = *(int *)v48;
    v438 = v437 - v435;
    if ((_DWORD)v437 - (_DWORD)v435 != -1)
    {
      v86 = v436 >= v438;
      v436 = v437 - v435;
      if (!v86)
        break;
    }
    v439 = (_WORD *)v81 + v433 + 10;
    v440 = (_WORD *)(v79 + 2 * v435);
    if (v436 == 1)
    {
      *v439 = *v440;
    }
    else if (v436)
    {
      memcpy(v439, v440, 2 * v436);
    }
    v433 += v438;
    v48 += 8;
    v434 -= 8;
    if (!v434)
    {
LABEL_606:
      __dst = v81;
      goto LABEL_607;
    }
  }
LABEL_1458:
  __break(1u);
LABEL_1459:
  v1241 = (WTF::StringImpl *)v48;
LABEL_1255:
  v42 = JSC::jsString((uint64_t)v1232, (JSC::VM *)&v1241, v34, v35, v36, a6, a7, a8);
  v899 = v1241;
  v1241 = 0;
  if (v899)
  {
LABEL_1256:
    if (*(_DWORD *)v899 == 2)
    {
      WTF::StringImpl::~StringImpl(v899, v380, v34, v35, v36, a6, a7, a8);
      WTF::fastFree(v959, v960, v961, v962, v963, v964, v965, v966);
    }
    else
    {
      *(_DWORD *)v899 -= 2;
    }
  }
LABEL_1119:
  JSC::CachedCall::~CachedCall((JSC::CachedCall *)&__dst, v380, v34, v35, v36, a6, a7, a8);
LABEL_1120:
  if (HIDWORD(v1259))
  {
    v825 = v1258;
    v826 = 8 * HIDWORD(v1259);
    do
    {
      v827 = *(WTF::StringImpl **)v825;
      *(_QWORD *)v825 = 0;
      if (v827)
      {
        if (*(_DWORD *)v827 == 2)
        {
          WTF::StringImpl::~StringImpl(v827, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v828, v829, v830, v831, v832, v833, v834, v835);
        }
        else
        {
          *(_DWORD *)v827 -= 2;
        }
      }
      v825 = (WTF *)((char *)v825 + 8);
      v826 -= 8;
    }
    while (v826);
  }
  v820 = v1258;
  if ((WTF *)v1223 != v1258 && v1258 != 0)
  {
    v1258 = 0;
    LODWORD(v1259) = 0;
    WTF::fastFree((unint64_t)v820, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v822 = v1261;
  if (v1222 != v1261 && v1261 != 0)
  {
    v1261 = 0;
    LODWORD(v1262) = 0;
    WTF::fastFree((unint64_t)v822, (void *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  do
LABEL_1131:
    v824 = __ldaxr((unsigned int *)&g_superSamplerCount);
  while (__stlxr(v824 - 1, (unsigned int *)&g_superSamplerCount));
LABEL_834:
  if (WTF::StringImpl::s_emptyAtomString == 2)
  {
    WTF::StringImpl::~StringImpl((WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString, (WTF::AtomStringImpl *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v604, v605, v606, v607, v608, v609, v610, v611);
  }
  else
  {
    WTF::StringImpl::s_emptyAtomString -= 2;
  }
  return v42;
}

unint64_t operationStringProtoFuncReplaceRegExpString(unint64_t a1, JSC::JSGlobalObject *a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _BOOL8 v21;
  void *v22;
  int v23;
  JSC::RegExp **v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  JSC::RegExp *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  WTF::StringImpl *v40;
  int *v41;
  int v42;
  int v43;
  _DWORD *v44;
  unsigned int v45;
  uint64_t *v46;
  JSC::VM *v47;
  uint64_t v48;
  void *v49;
  JSC::Structure *v50;
  uint64_t v51;
  uint64_t v52;
  uint16x8_t v53;
  uint64_t v54;
  float v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  int v61;
  int v62;
  _DWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  WTF::AtomStringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  __int16 *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t OutOfMemoryError;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  double v95;
  JSC::Exception *v96;
  unint64_t v97;
  _BOOL4 v98;
  char v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t *v113;
  JSC::VM *v114;
  uint64_t v115;
  WTF::AtomStringImpl *v116;
  const WTF::String *v117;
  uint64_t v118;
  uint64_t v119;
  int8x16_t v120;
  int v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  int v124;
  int v125;
  _DWORD *v126;
  unint64_t v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  BOOL v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  int8x16_t v140;
  unint64_t v141;
  int *v142;
  uint64_t v143;
  int *v144;
  WTF::StringImpl *v145;
  int v146;
  WTF *v147;
  int v149;
  unsigned int v150;
  WTF *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  size_t v156;
  uint64_t v157;
  _BYTE *v158;
  int *v159;
  _BYTE *v160;
  int16x8_t *v161;
  WTF::AtomStringImpl *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _DWORD *v169;
  uint64_t *v170;
  WTF *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _DWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  _DWORD *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  BOOL v184;
  _BYTE *v185;
  _BYTE *v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  unint64_t v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int16x8_t *v206;
  int16x8_t v207;
  int8x16_t v208;
  int16x8_t *v209;
  char *v210;
  int16x8_t v211;
  unsigned __int8 *v212;
  void *v214;
  unsigned __int8 *v215;
  int v216;
  unint64_t v217;
  void *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  _DWORD *v227;
  unint64_t v228;
  int8x16_t v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  WTF::AtomStringImpl *v234;
  unint64_t v235;
  int8x16_t v236;
  WTF::StringImpl *v237;
  uint64_t v238;
  WTF *v239;
  WTF::StringImpl *v240;
  char v241;
  WTF::StringImpl *v242;
  unsigned int v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  int v246;
  int v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  double v254;
  JSC::Exception *v255;
  unint64_t v256;
  unsigned int v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  BOOL v261;
  _BOOL4 v262;
  unsigned int v263;
  WTF::StringImpl *v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  unsigned int v269;
  uint64_t v270;
  JSC::RegExp *v272;
  uint64_t v273;
  void *v274;
  __int128 v275;
  unint64_t v276;
  uint64_t v277;
  JSC::RegExp *v278;
  unint64_t v279;
  WTF *v280;
  WTF *v281;
  uint64_t v282;
  unsigned int v283;
  WTF *v284;
  uint64_t v285;
  _QWORD *v286;
  void *v287;
  uint64_t v288;
  uint64_t v289;
  WTF::AtomStringImpl *v290;
  unint64_t v291;
  unsigned int v292;
  JSC::RegExp *v293;
  char *v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  int v299;
  BOOL v300;
  int v301;
  BOOL v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  int *v307;
  int v308;
  int v309;
  int v310;
  _DWORD *v311;
  uint64_t v312;
  uint64_t v313;
  int8x16_t v314;
  JSC::VM *v315;
  unint64_t v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  char v320;
  WTF::StringImpl *v321;
  unint64_t v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  void *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unsigned int v338;
  unsigned int v339;
  int v340;
  uint64_t *v341;
  WTF *v342;
  uint64_t v343;
  int v344;
  int v345;
  int v346;
  int v347;
  unint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  double v354;
  JSC::Exception *v355;
  unint64_t v356;
  void *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  _DWORD *v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t *v368;
  WTF *v369;
  uint64_t v370;
  int v371;
  unsigned int v372;
  const void **v373;
  JSC::MarkedVectorBase *v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  uint64_t v379;
  int8x16_t v380;
  int v381;
  int v382;
  int *v383;
  uint64_t v384;
  unint64_t v385;
  JSC::VM *v386;
  int v387;
  unint64_t v388;
  unsigned int v389;
  int v390;
  uint64_t v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t v394;
  unint64_t *v395;
  WTF::StringImpl *v396;
  unsigned __int8 v397;
  unint64_t v398;
  int v399;
  BOOL v400;
  uint64_t v401;
  uint64_t v402;
  JSC::VM *v403;
  int v404;
  uint64_t v405;
  _DWORD *v406;
  WTF::StringImpl *v407;
  unsigned int v408;
  int v409;
  unsigned int v410;
  unsigned int v411;
  unsigned int v412;
  int v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  WTF::StringImpl *v419;
  unsigned int v420;
  unsigned int v421;
  uint64_t v422;
  JSC::VM *v423;
  unint64_t *v424;
  BOOL v425;
  unint64_t *v426;
  WTF *v427;
  int v428;
  WTF *v429;
  unint64_t *v430;
  uint64_t v431;
  unint64_t *v432;
  int v433;
  int v434;
  int v435;
  JSC::VM *v436;
  unint64_t v437;
  int v439;
  int v440;
  _DWORD *v441;
  int v442;
  int v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  unsigned int v448;
  void *v449;
  unint64_t v450;
  uint64_t v451;
  int *v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  _WORD *v457;
  _WORD *v458;
  WTF::StringImpl *v459;
  unint64_t v460;
  void *v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  unsigned int *v468;
  int v469;
  unsigned int v470;
  int v471;
  unsigned int v472;
  WTF **v473;
  int v474;
  unsigned int v475;
  int v476;
  WTF *v477;
  WTF *v479;
  unsigned int v482;
  WTF *v483;
  uint64_t v484;
  WTF *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  char v489;
  _DWORD *v490;
  int v491;
  BOOL v492;
  unsigned int v493;
  int v494;
  WTF *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  BOOL v501;
  uint64_t v502;
  unint64_t v503;
  int v504;
  _DWORD *v505;
  int v506;
  _DWORD *v507;
  char *v508;
  uint64_t v509;
  uint64_t v510;
  int v511;
  _DWORD *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v516;
  char *v517;
  unsigned int v518;
  uint64_t v519;
  unint64_t v520;
  char *v521;
  uint64_t v522;
  char *v523;
  int v524;
  char *v525;
  WTF::StringImpl *v526;
  int v527;
  uint64_t v528;
  size_t v529;
  uint64_t v530;
  _BYTE *v531;
  int *v532;
  _BYTE *v533;
  uint64_t v534;
  int v535;
  int v536;
  size_t v537;
  uint64_t v538;
  _BYTE *v539;
  int *v540;
  _BYTE *v541;
  unint64_t v542;
  void *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  size_t v552;
  uint64_t v553;
  _BYTE *v554;
  int *v555;
  _BYTE *v556;
  int *v557;
  unsigned int v558;
  uint64_t v559;
  unsigned int v560;
  unsigned int v561;
  BOOL v562;
  int v563;
  int v564;
  int v565;
  int v566;
  char v567;
  uint64_t v568;
  unsigned int v569;
  int v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  WTF::StringImpl *v577;
  WTF::StringImpl *v578;
  WTF::StringImpl *v579;
  WTF::StringImpl *v580;
  uint64_t v581;
  uint64_t v582;
  _BOOL4 v583;
  int v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  WTF::StringImpl *v591;
  WTF::StringImpl *v592;
  unint64_t v593;
  void *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unint64_t v601;
  void *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  _BOOL4 v611;
  int v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  WTF::StringImpl *v619;
  char *v620;
  uint64_t v621;
  uint64_t v622;
  int v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  unint64_t v627;
  int8x16_t *v628;
  unsigned int v629;
  uint64_t v630;
  unint64_t v631;
  unint64_t v632;
  char *v633;
  uint64_t v634;
  int8x16_t *v635;
  uint64_t v636;
  char *v637;
  char *v638;
  __int16 v639;
  char *v640;
  int8x16_t v641;
  int8x16_t v642;
  char *v643;
  char *v644;
  char *v645;
  unint64_t v646;
  const WTF::String *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  JSC::JSString *v653;
  const WTF::String *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  JSC::JSString *v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  _DWORD *v665;
  uint64_t v666;
  int v667;
  uint64_t v668;
  _DWORD *v669;
  uint64_t v670;
  int v671;
  uint64_t v672;
  _DWORD *v673;
  uint64_t v674;
  int v675;
  uint64_t v676;
  WTF::StringImpl **v677;
  JSC *v678;
  JSC::VM *v679;
  JSC *v680;
  unint64_t v681;
  const WTF::String *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  JSC::JSString *v688;
  JSC::JSString *v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  void **p_dst;
  JSC::VM **v695;
  unint64_t v696;
  void *v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  unint64_t v704;
  void *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  WTF::AtomStringImpl *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  WTF *v719;
  WTF *v721;
  unsigned int v723;
  WTF *v724;
  uint64_t v725;
  WTF::StringImpl *v726;
  unint64_t v727;
  void *v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  unsigned int *v735;
  unsigned int v736;
  int v737;
  _DWORD *v738;
  WTF *v739;
  WTF *v740;
  int v741;
  uint64_t v743;
  uint64_t v744;
  char v745;
  _DWORD *v746;
  uint64_t v747;
  int v748;
  BOOL v749;
  unsigned int v750;
  int v751;
  WTF *v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  unint64_t v757;
  BOOL v758;
  uint64_t v759;
  int v760;
  WTF::StringImpl *v761;
  char *v762;
  uint64_t v763;
  uint64_t v764;
  int v765;
  _DWORD *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  char *v771;
  unsigned int v772;
  uint64_t v773;
  unint64_t v774;
  char *v775;
  uint64_t v776;
  char *v777;
  int v778;
  char *v779;
  int v780;
  JSC::VM *v781;
  WTF::StringImpl *v782;
  BOOL hasExceptionsAfterHandlingTraps;
  int v784;
  uint64_t v785;
  size_t v786;
  uint64_t v787;
  int v788;
  uint64_t v789;
  size_t v790;
  uint64_t v791;
  int *v792;
  JSC *v793;
  unsigned int v794;
  uint64_t v795;
  unsigned int v796;
  unsigned int v797;
  BOOL v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  WTF::StringImpl *v805;
  WTF::StringImpl *v806;
  WTF::StringImpl *v807;
  WTF::StringImpl *v808;
  uint64_t v809;
  uint64_t v810;
  _BOOL4 v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  WTF::StringImpl *v818;
  WTF::StringImpl *v819;
  WTF::StringImpl *v820;
  WTF::StringImpl *v821;
  unint64_t v822;
  uint64_t v823;
  void *v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  WTF::AtomStringImpl *v831;
  int v832;
  JSC::VM *v833;
  int8x16_t v834;
  unint64_t v835;
  unsigned int v836;
  uint64_t v837;
  int v838;
  BOOL v839;
  WTF::StringImpl *v840;
  uint64_t v841;
  int v842;
  int v843;
  BOOL v844;
  size_t v845;
  uint64_t v846;
  unint64_t v847;
  void *v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  unint64_t *v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  unint64_t SlowCase;
  uint64_t v860;
  uint64_t v861;
  _BOOL4 v862;
  WTF::StringImpl **v863;
  uint64_t *v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  int *v871;
  WTF::StringImpl *v872;
  unint64_t v873;
  void *v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  unint64_t v881;
  void *v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  void *v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  unint64_t v896;
  uint64_t v897;
  uint64_t v898;
  _BOOL4 v899;
  char *v900;
  uint64_t v901;
  int v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  unint64_t v906;
  int8x16_t *v907;
  unsigned int v908;
  uint64_t v909;
  unint64_t v910;
  unint64_t v911;
  char *v912;
  uint64_t v913;
  int8x16_t *v914;
  uint64_t v915;
  char *v916;
  char *v917;
  __int16 v918;
  char *v919;
  int8x16_t v920;
  int8x16_t v921;
  char *v922;
  char *v923;
  char *v924;
  unint64_t v925;
  const WTF::String *v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  JSC::JSString *v932;
  const WTF::String *v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  JSC::JSString *v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  unsigned int v945;
  int8x16_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  __n128 v950;
  int *v951;
  int *v952;
  uint64_t v953;
  uint64_t v954;
  WTF::StringImpl *v955;
  WTF::StringImpl *v956;
  _DWORD *v957;
  uint64_t v958;
  int v959;
  uint64_t v960;
  _DWORD *v961;
  int v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  JSC *v967;
  JSC::VM *v968;
  uint64_t v969;
  unint64_t v970;
  const WTF::String *v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  JSC::JSString *v977;
  JSC::JSString *v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  _DWORD *v983;
  uint64_t v984;
  int v985;
  uint64_t v986;
  uint64_t v987;
  WTF::StringImpl *v988;
  JSC::VM *v989;
  JSC *v990;
  unint64_t v991;
  void *v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  JSC::VM *v999;
  JSC *v1000;
  uint64_t v1001;
  const WTF::String *v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  JSC::JSString *v1008;
  JSC::JSString *v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  JSC::JSRopeString *v1014;
  unint64_t v1015;
  unint64_t v1016;
  void *v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  JSC::VM *v1024;
  unsigned int v1025;
  unint64_t v1026;
  void *v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  WTF::StringImpl **v1034;
  unint64_t v1035;
  void *v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  unint64_t v1043;
  void *v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  char *v1051;
  char *v1052;
  int8x16_t v1053;
  int8x16_t v1054;
  char *v1055;
  char *v1056;
  char *v1057;
  __int16 v1058;
  unint64_t v1059;
  void *v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  uint64_t v1066;
  JSC::VM *v1067;
  unint64_t *v1068;
  uint64_t v1069;
  uint64_t v1070;
  _BOOL4 v1071;
  WTF::AtomStringImpl *v1072;
  uint64_t v1073;
  unsigned int v1074;
  int8x16_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  __n128 v1079;
  int *v1080;
  int *v1081;
  uint64_t v1082;
  uint64_t v1083;
  WTF::StringImpl *v1084;
  WTF::StringImpl *v1085;
  JSC::VM *v1086;
  JSC::VM *v1087;
  uint64_t v1088;
  const WTF::String *v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  WTF::StringImpl *v1096;
  unint64_t v1097;
  void *v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  uint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  unint64_t v1105;
  void *v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  unint64_t v1113;
  void *v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  char *v1121;
  char *v1122;
  int8x16_t v1123;
  int8x16_t v1124;
  char *v1125;
  char *v1126;
  char *v1127;
  __int16 v1128;
  WTF::StringImpl *v1129;
  unint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  unint64_t v1133;
  unsigned int v1134;
  unsigned int v1135;
  unsigned int v1136;
  uint64_t v1137;
  JSC::VM *v1138;
  JSC::VM *v1139;
  JSC::VM *v1140;
  JSC::VM *v1141;
  int v1142;
  WTF *v1143;
  unint64_t v1144;
  JSC::MarkedVectorBase *v1146;
  _BOOL4 v1147;
  unint64_t v1148;
  unint64_t StatusReg;
  uint64_t v1150;
  JSC *v1151;
  __int16 v1152;
  __int128 v1153;
  unsigned int v1154;
  uint64_t v1155;
  JSC::JSGlobalObject *v1156;
  JSC::RegExp *v1157;
  JSC::RegExp *v1158;
  uint64_t *v1160;
  unsigned __int8 v1161[24];
  WTF::StringImpl *v1162;
  int v1163;
  unsigned int v1164;
  JSC::VM *v1165;
  WTF::StringImpl *v1166;
  WTF::StringImpl *v1167;
  void *__dst;
  __int128 v1169;
  __int128 v1170;
  __int128 v1171;
  __int128 v1172;
  __int128 v1173;
  uint64_t v1174;
  char v1175;
  int v1176;
  int v1177;
  _BYTE *v1178;
  _BYTE v1179[80];
  uint64_t v1180;
  WTF *v1181;
  uint64_t v1182;
  _QWORD v1183[16];
  WTF *v1184;
  uint64_t v1185;
  _DWORD v1186[32];
  uint64_t v1187;
  unsigned int v1188;
  JSC::VM *v1189;
  unint64_t v1190;
  WTF::StringImpl *v1191;
  const WTF::String *v1192;
  unint64_t v1193;
  int *var60[13];
  int8x16x2_t v1195;
  int8x16x2_t v1196;
  int8x16x2_t v1197;
  int8x16x2_t v1198;
  int8x16x2_t v1199;
  int8x16x2_t v1200;
  int8x16x2_t v1201;
  int8x16x2_t v1202;
  int8x16x2_t v1203;
  int8x16x2_t v1204;
  int8x16x2_t v1205;
  int8x16x2_t v1206;
  int8x16x2_t v1207;
  int8x16x2_t v1208;
  int8x16x2_t v1209;
  int8x16x2_t v1210;

  v1156 = a2;
  v10 = *(JSC **)(a1 + 56);
  *((int **)v10 + 5) = var60[12];
  v1161[0] = 0;
  v11 = (WTF::StringImpl *)(a4 + 8);
  if ((a4[8] & 1) != 0)
    v11 = (WTF::StringImpl *)JSC::JSRopeString::resolveRope((unint64_t)a4, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a9, a5, a6, a7, a8);
  if (*((_DWORD *)v10 + 20))
  {
    v346 = *((_DWORD *)v10 + 20);
    if ((v346 & 0x27) != 0 && (v346 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC *)((char *)v10 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    a2 = (JSC::JSGlobalObject *)*((_QWORD *)v10 + 2);
    if (a2)
      return 0;
  }
  v1165 = v10;
  v1148 = (unint64_t)v1156 + 8;
  v1160 = (uint64_t *)((char *)v1156 + 8);
  if ((*((_BYTE *)v1156 + 8) & 1) != 0)
    v1160 = (uint64_t *)JSC::JSRopeString::resolveRope((unint64_t)v1156, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a9, a5, a6, a7, a8);
  if (*((_DWORD *)v10 + 20))
  {
    v347 = *((_DWORD *)v10 + 20);
    if ((v347 & 0x27) != 0 && (v347 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC *)((char *)v10 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_QWORD *)v10 + 2))
      return 0;
  }
  if (*v1160)
    v12 = *(_DWORD *)(*v1160 + 4);
  else
    v12 = 0;
  v1164 = v12;
  v13 = *(_QWORD *)(a3 + 16);
  v1152 = *(_WORD *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + 18);
  v1157 = (JSC::RegExp *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
  v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + 48);
  if (v14)
    v15 = *(_DWORD *)(v14 + 20) != 0;
  else
    v15 = 0;
  v1151 = v10;
  if ((v1152 & 2) == 0)
  {
    v1190 = 0;
    v1184 = (WTF *)v1186;
    v1185 = 16;
    v1181 = (WTF *)v1183;
    v1182 = 16;
LABEL_52:
    v1147 = v15;
    v45 = 0;
    v46 = (uint64_t *)(a1 + 2200);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v47 = v10;
    while (1)
    {
      v48 = *(_QWORD *)(a1 + 56);
      JSC::RegExp::match((uint64_t)v1157, a1, v1160, v45, (uint64_t)v46, a6, a7, a8);
      LODWORD(v57) = v56;
      if (!*(_DWORD *)(v48 + 80))
        goto LABEL_54;
      v246 = *(_DWORD *)(v48 + 80);
      if ((v246 & 0x27) != 0 && (v246 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v48 + 64), 7u, (uint64_t)v50, v51, v52, a6, a7, a8);
      if (*(_QWORD *)(v48 + 16))
      {
        v59 = 0;
        v58 = 0;
        v57 = -1;
      }
      else
      {
LABEL_54:
        v58 = *v46;
        if ((_DWORD)v57 == -1)
        {
          v59 = 0;
          v57 = -1;
        }
        else
        {
          if (*(_DWORD *)(a1 + 2212) <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x198BD71C4);
          }
          v59 = (WTF::StringImpl *)*(int *)(v58 + 4);
          v57 = (int)v57;
          *(_QWORD *)(a1 + 2152) = v1157;
          *(_QWORD *)(a1 + 2144) = v1156;
          *(_QWORD *)(a1 + 2120) = (int)v57;
          *(_QWORD *)(a1 + 2128) = v59;
          *(_BYTE *)(a1 + 2136) = 0;
          if (*(_DWORD *)(v48 + 760) >= *(unsigned __int8 *)(a1 + 7))
            JSC::Heap::writeBarrierSlowPath(v48 + 192, a1);
        }
      }
      v1166 = (WTF::StringImpl *)v57;
      v1167 = v59;
      if (*((_DWORD *)v47 + 20))
      {
        v247 = *((_DWORD *)v47 + 20);
        if ((v247 & 0x27) != 0 && (v247 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v47 + 64), 7u, (uint64_t)v50, v51, v52, a6, a7, a8);
        if (*((_QWORD *)v47 + 2))
          goto LABEL_131;
        v57 = (unint64_t)v1166;
      }
      if (v57 == -1)
        goto LABEL_738;
      if (v1161[0])
      {
        v225 = HIDWORD(v1185);
        if (HIDWORD(v1185) == (_DWORD)v1185)
        {
          if ((WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1184, (int *)&v1190, (int *)&v1166, v51, v52, a6, a7, a8) & 1) == 0)
          {
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1165);
            goto LABEL_131;
          }
        }
        else
        {
          v226 = v1190;
          v227 = (_DWORD *)((char *)v1184 + 8 * HIDWORD(v1185));
          *v227 = v1190;
          v227[1] = v57;
          if (v226 == (_DWORD)v57)
            *(_QWORD *)v227 = 0;
          HIDWORD(v1185) = v225 + 1;
        }
        v228 = 0;
        LOBYTE(__dst) = 0;
        *(_QWORD *)&v1169 = 0x800000000;
        v229 = 0uLL;
        v1170 = 0u;
        v1171 = 0u;
        v1172 = 0u;
        v1173 = 0u;
        *((_QWORD *)&v1169 + 1) = (char *)&v1170 + 8;
        v1174 = 0;
        if (v1147)
        {
          v780 = *(_DWORD *)(a1 + 932);
          if (v780)
            v781 = (JSC::VM *)(16 * (v780 & 0xFFFFFFFE));
          else
            v781 = 0;
          v228 = JSC::constructEmptyObject(v10, v781, v50, v51, v52, a6, a7, a8);
        }
        if (*((_DWORD *)v1157 + 6) == -1)
        {
LABEL_315:
          v230 = (unint64_t)v1166 | 0xFFFE000000000000;
          if ((int)v1166 < 0)
            v230 = COERCE__INT64((double)v1166) + 0x2000000000000;
          if ((unint64_t)v1166 >> 32)
            v231 = COERCE__INT64((double)(unint64_t)v1166) + 0x2000000000000;
          else
            v231 = v230;
          v232 = v1169;
          if ((_DWORD)v1169 == DWORD1(v1169)
            || *((__int128 **)&v1169 + 1) != (__int128 *)((char *)&v1170 + 8) && *((_QWORD *)&v1169 + 1))
          {
            if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1169, v231, (uint64_t)v50, v51, v52, a6, a7, a8) == 1)LOBYTE(__dst) = 1;
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)&v1169 + 1) + 8 * v1169) = v231;
            LODWORD(v1169) = v232 + 1;
          }
          v233 = v1169;
          if ((_DWORD)v1169 == DWORD1(v1169)
            || *((__int128 **)&v1169 + 1) != (__int128 *)((char *)&v1170 + 8) && *((_QWORD *)&v1169 + 1))
          {
            if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1169, (uint64_t)v1156, (uint64_t)v50, v51, v52, a6, a7, a8) == 1)LOBYTE(__dst) = 1;
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)&v1169 + 1) + 8 * v1169) = v1156;
            LODWORD(v1169) = v233 + 1;
          }
          if (v1147)
            JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&__dst, v228, (uint64_t)v50, v51, v52, a6, a7, a8);
          if ((_BYTE)__dst)
          {
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1165);
            goto LABEL_1105;
          }
          v1162 = (WTF::StringImpl *)*((_QWORD *)&v1169 + 1);
          v1163 = v1169;
          v235 = JSC::call((uint64_t *)a1, (uint64_t)a4, v1161, 10, (uint64_t)&v1162, a6, a7, a8);
          var60[0] = (int *)v235;
          v47 = v1165;
          if (*((_DWORD *)v1165 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v1165, (uint64_t)v234, (uint64_t)v50, v51, v52, a6, a7, a8))
              goto LABEL_1105;
            v235 = (unint64_t)var60[0];
            v10 = v1151;
          }
          if ((v235 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v235 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)var60, (JSC::JSGlobalObject *)a1, v50, v51, v52, a6, a7, a8, (int **)&v1162);
          }
          else
          {
            v237 = *(WTF::StringImpl **)(v235 + 8);
            if ((v237 & 1) != 0)
              v237 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v235, (JSC::JSGlobalObject *)a1, (uint64_t)v50, v51, v236, v52, a6, a7, a8);
            if (v237)
              *(_DWORD *)v237 += 2;
            v1162 = v237;
          }
          if (*((_DWORD *)v47 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v47, (uint64_t)v234, (uint64_t)v50, v51, v52, a6, a7, a8))
          {
            goto LABEL_1113;
          }
          v238 = HIDWORD(v1182);
          if (HIDWORD(v1182) == (_DWORD)v1182)
          {
            WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>((uint64_t)&v1181, (unint64_t)&v1162);
          }
          else
          {
            v239 = v1181;
            v240 = v1162;
            if (v1162)
              *(_DWORD *)v1162 += 2;
            *((_QWORD *)v239 + v238) = v240;
            HIDWORD(v1182) = v238 + 1;
          }
          if (*((_DWORD *)v47 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v47, (uint64_t)v234, (uint64_t)v50, v51, v52, a6, a7, a8))
          {
LABEL_1113:
            v241 = 0;
          }
          else
          {
            v241 = 1;
          }
          v242 = v1162;
          v1162 = 0;
          if (v242)
          {
            if (*(_DWORD *)v242 == 2)
            {
              WTF::StringImpl::~StringImpl(v242, v234, (uint64_t)v50, v51, v52, a6, a7, a8);
              WTF::fastFree(v356, v357, v358, v359, v360, v361, v362, v363);
            }
            else
            {
              *(_DWORD *)v242 -= 2;
            }
          }
          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1169, v234, (uint64_t)v50, v51, v52, a6, a7, a8);
          if ((v241 & 1) == 0)
          {
LABEL_131:
            v97 = 0;
LABEL_740:
            v477 = v1181;
            if (!HIDWORD(v1182))
            {
LABEL_741:
              if (v1183 != (_QWORD *)v477 && v477 != 0)
              {
                v1181 = 0;
                LODWORD(v1182) = 0;
                WTF::fastFree((unint64_t)v477, v49, (uint64_t)v50, v51, v52, a6, a7, a8);
              }
              v479 = v1184;
              if (v1186 != (_DWORD *)v1184 && v1184 != 0)
              {
                v1184 = 0;
                LODWORD(v1185) = 0;
                WTF::fastFree((unint64_t)v479, v49, (uint64_t)v50, v51, v52, a6, a7, a8);
              }
              return v97;
            }
            v502 = 8 * HIDWORD(v1182);
            v503 = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
            while (1)
            {
              v1130 = *(_QWORD *)v477;
              *(_QWORD *)v477 = 0;
              if (v1130)
              {
                if (*(_DWORD *)v1130 == 2)
                {
                  WTF::StringImpl::~StringImpl((WTF::StringImpl *)v1130, (WTF::AtomStringImpl *)v49, (uint64_t)v50, v51, v52, a6, a7, a8);
                  v1131 = *(_QWORD *)(v503 + 752);
                  if (v1131)
                  {
                    if (!(v1130 >> 43)
                      && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v1130 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v1130)) & 1) != 0)
                    {
LABEL_1594:
                      v1132 = *(unsigned int *)(v1131 + 8000);
                      if (v1132 >= 0x3E7)
                      {
                        pas_thread_local_cache_append_deallocation_slow(v1131, v1130, (os_unfair_lock_s *)5, v51, v52, a6, a7, a8);
                      }
                      else
                      {
                        *(_QWORD *)(v1131 + 8 * v1132) = v1130 | 0x5000000000000;
                        *(_DWORD *)(v1131 + 8000) = v1132 + 1;
                      }
                      goto LABEL_1588;
                    }
                    if (v1130 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v1130 >> 24)
                    {
                      v51 = 0;
                    }
                    else
                    {
                      v51 = (*(_DWORD *)((char *)off_1ECF425F8
                                       + ((((v1130 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                       + 24) >> (2 * ((BYTE3(v1130) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
                      if ((_DWORD)v51 == 1)
                        goto LABEL_1594;
                    }
                    bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v1131, v1130, 1, v51, v52, a6, a7, a8);
                  }
                  else
                  {
                    pas_try_deallocate_slow_no_cache(v1130, (uint64_t)&bmalloc_heap_config, 1);
                  }
                }
                else
                {
                  *(_DWORD *)v1130 -= 2;
                }
              }
LABEL_1588:
              v477 = (WTF *)((char *)v477 + 8);
              v502 -= 8;
              if (!v502)
              {
                v477 = v1181;
                goto LABEL_741;
              }
            }
          }
          goto LABEL_100;
        }
        v256 = 0;
        v257 = 1;
        while (2)
        {
          v51 = *(unsigned int *)(v58 + 4 * (v257 - 1));
          if ((v51 & 0x80000000) != 0)
          {
            v259 = 10;
          }
          else
          {
            v259 = (uint64_t)JSC::jsSubstring(v10, a1, v1156, (JSC::JSString *)v51, (*(_DWORD *)(v58 + 4 * v257) - v51), a6, a7, a8, v229);
            if (*((_DWORD *)v1165 + 20))
            {
              if (JSC::VM::hasExceptionsAfterHandlingTraps(v1165, v258, (uint64_t)v50, v51, v52, a6, a7, a8))
                goto LABEL_1105;
              v10 = v1151;
            }
          }
          v260 = v1169;
          if ((_DWORD)v1169 != DWORD1(v1169)
            && (*((__int128 **)&v1169 + 1) != (__int128 *)((char *)&v1170 + 8)
              ? (v261 = *((_QWORD *)&v1169 + 1) == 0)
              : (v261 = 1),
                v261))
          {
            *(_QWORD *)(*((_QWORD *)&v1169 + 1) + 8 * v1169) = v259;
            LODWORD(v1169) = v260 + 1;
          }
          else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1169, v259, (uint64_t)v50, v51, v52, a6, a7, a8) == 1)
          {
            LOBYTE(__dst) = 1;
          }
          v262 = v1147;
          if (!v256)
            v262 = 0;
          if (!v262)
          {
LABEL_388:
            ++v256;
            v257 += 2;
            if (v256 >= (*((_DWORD *)v1157 + 6) + 1))
              goto LABEL_315;
            continue;
          }
          break;
        }
        JSC::RegExp::getCaptureGroupNameForSubpatternId((uint64_t)v1157, v256, &v1162);
        if (!v1162)
        {
LABEL_1257:
          v10 = v1151;
          goto LABEL_388;
        }
        v944 = *((unsigned int *)v1162 + 1);
        if ((_DWORD)v944)
        {
          v1144 = v1144 & 0xFFFFFF0000000000 | v944 | ((unint64_t)((*((_DWORD *)v1162 + 4) >> 2) & 1) << 32);
          v945 = JSC::RegExp::subpatternIdForGroupName<int const*>((uint64_t)v1157, *((_QWORD *)v1162 + 1), v1144, v58);
          if (v256 == v945)
            goto LABEL_1384;
          if (v945)
          {
            v51 = *(unsigned int *)(v58 + 8 * v945);
            if ((v51 & 0x80000000) != 0)
            {
              v259 = 10;
            }
            else
            {
              v259 = (uint64_t)JSC::jsSubstring(v1151, a1, v1156, (JSC::JSString *)v51, (*(_DWORD *)(v58 + 4 * ((2 * v945) | 1)) - v51), a6, a7, a8, v946);
              if (*((_DWORD *)v1165 + 20)
                && JSC::VM::hasExceptionsAfterHandlingTraps(v1165, v987, (uint64_t)v50, v51, v52, a6, a7, a8))
              {
                v988 = v1162;
                v1162 = 0;
                if (v988)
                {
                  if (*(_DWORD *)v988 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v988, v234, (uint64_t)v50, v51, v52, a6, a7, a8);
                    WTF::fastFree(v1059, v1060, v1061, v1062, v1063, v1064, v1065, v1066);
                  }
                  else
                  {
                    *(_DWORD *)v988 -= 2;
                  }
                }
LABEL_1105:
                JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1169, v234, (uint64_t)v50, v51, v52, a6, a7, a8);
                goto LABEL_131;
              }
            }
LABEL_1384:
            JSC::Identifier::fromString((uint64_t **)v1151, &v1162, v50, v51, v52, a6, a7, a8, (WTF::StringImpl **)var60);
            v951 = var60[0];
            v952 = (int *)v228;
            v953 = (uint64_t)v1151;
            v954 = v259;
          }
          else
          {
            JSC::Identifier::fromString((uint64_t **)v1151, &v1162, v50, v51, v52, a6, a7, a8, (WTF::StringImpl **)var60);
            v951 = var60[0];
            v952 = (int *)v228;
            v953 = (uint64_t)v1151;
            v954 = 10;
          }
          JSC::JSObject::putDirect(v952, v953, (unint64_t)v951, v954, 0, v950, v947, v948, v949);
          v955 = (WTF::StringImpl *)var60[0];
          var60[0] = 0;
          if (v955)
          {
            if (*(_DWORD *)v955 == 2)
            {
              WTF::StringImpl::~StringImpl(v955, v831, (uint64_t)v50, v51, v52, a6, a7, a8);
              WTF::fastFree(v1016, v1017, v1018, v1019, v1020, v1021, v1022, v1023);
            }
            else
            {
              *(_DWORD *)v955 -= 2;
            }
          }
        }
        v956 = v1162;
        v1162 = 0;
        if (v956)
        {
          if (*(_DWORD *)v956 == 2)
          {
            WTF::StringImpl::~StringImpl(v956, v831, (uint64_t)v50, v51, v52, a6, a7, a8);
            WTF::fastFree(v991, v992, v993, v994, v995, v996, v997, v998);
          }
          else
          {
            *(_DWORD *)v956 -= 2;
          }
        }
        goto LABEL_1257;
      }
      if (*(_QWORD *)v11)
        v60 = *(_DWORD *)(*(_QWORD *)v11 + 4);
      else
        v60 = 0;
      v61 = v1190;
      if (v1190 >= v57 && !v60)
        goto LABEL_100;
      v62 = HIDWORD(v1185);
      if (HIDWORD(v1185) == (_DWORD)v1185)
      {
        if ((WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1184, (int *)&v1190, (int *)&v1166, v51, v52, a6, a7, a8) & 1) == 0)
        {
          OutOfMemoryError = JSC::createOutOfMemoryError(a1, (JSC::JSGlobalObject *)v49);
          v96 = (JSC::Exception *)OutOfMemoryError;
          if ((OutOfMemoryError & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                    + 0x4C)))
          {
            v96 = (JSC::Exception *)JSC::Exception::create((uint64_t)v47, (JSC::VM *)OutOfMemoryError, 0, v90, v91, v92, v93, v94);
          }
          JSC::VM::throwException(v47, (JSC::JSGlobalObject *)a1, v96, v95, v90, v91, v92, v93, v94);
          goto LABEL_131;
        }
      }
      else
      {
        v63 = (_DWORD *)((char *)v1184 + 8 * HIDWORD(v1185));
        *v63 = v1190;
        v63[1] = v57;
        if (v61 == (_DWORD)v57)
          *(_QWORD *)v63 = 0;
        HIDWORD(v1185) = v62 + 1;
      }
      if (!v60)
      {
        __dst = 0;
        LODWORD(v187) = HIDWORD(v1182);
        if (HIDWORD(v1182) == (_DWORD)v1182)
        {
          v368 = (uint64_t *)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1181, HIDWORD(v1182) + 1, (unint64_t)&__dst);
          v187 = HIDWORD(v1182);
          v369 = v1181;
          v370 = *v368;
          *v368 = 0;
          *((_QWORD *)v369 + v187) = v370;
        }
        else
        {
          *((_QWORD *)v1181 + HIDWORD(v1182)) = 0;
        }
        HIDWORD(v1182) = v187 + 1;
        v188 = (WTF::StringImpl *)__dst;
        __dst = 0;
        if (v188)
        {
          if (*(_DWORD *)v188 == 2)
          {
            WTF::StringImpl::~StringImpl(v188, (WTF::AtomStringImpl *)v49, (uint64_t)v50, v51, v52, a6, a7, a8);
            WTF::fastFree(v217, v218, v219, v220, v221, v222, v223, v224);
          }
          else
          {
            *(_DWORD *)v188 -= 2;
          }
        }
        goto LABEL_100;
      }
      __dst = 0;
      *(_QWORD *)&v1169 = 0;
      *(_QWORD *)((char *)&v1169 + 5) = 0;
      v64 = *v1160;
      if (*v1160)
      {
        v65 = *(_QWORD *)(v64 + 8);
        v66 = *(unsigned int *)(v64 + 4) | ((unint64_t)((*(_DWORD *)(v64 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v65 = 0;
        v66 = 0x100000000;
      }
      v67 = *(unsigned int **)v11;
      if (!*(_QWORD *)v11)
        goto LABEL_82;
      v68 = v67[4];
      v69 = *((_QWORD *)v67 + 1);
      v70 = v67[1];
      if ((v68 & 4) != 0)
      {
        if ((_DWORD)v70)
        {
          v71 = 16;
          if (v70 < 0x10)
            v71 = v67[1];
          v72 = v71;
          v73 = (_BYTE *)*((_QWORD *)v67 + 1);
          do
          {
            if (*v73 == 36)
              goto LABEL_104;
            ++v73;
            --v72;
          }
          while (v72);
          if (v70 >= 0x11)
          {
            v73 = memchr((void *)(v69 + v71), 36, v70 - v71);
            if (v73)
            {
LABEL_104:
              a8 = (uint64_t)&v73[-v69];
              goto LABEL_105;
            }
          }
        }
      }
      else if ((_DWORD)v70)
      {
        v161 = (int16x8_t *)(v69 + 2 * v70);
        if (v70 > 0x1F)
        {
          v206 = (int16x8_t *)*((_QWORD *)v67 + 1);
          do
          {
            v207.i64[0] = 0x24002400240024;
            v207.i64[1] = 0x24002400240024;
            v208 = (int8x16_t)vceqq_s16(*v206, v207);
            v207.i16[0] = vmaxvq_u16((uint16x8_t)v208);
            if (v207.i32[0])
              goto LABEL_292;
            v209 = v206 + 1;
            v210 = &v206[1].i8[14];
            ++v206;
          }
          while (v210 < (char *)v161);
          if (v209 >= v161)
            goto LABEL_81;
          v211.i64[0] = 0x24002400240024;
          v211.i64[1] = 0x24002400240024;
          v208 = (int8x16_t)vceqq_s16(v161[-1], v211);
          v211.i16[0] = vmaxvq_u16((uint16x8_t)v208);
          if (!v211.i32[0])
            goto LABEL_81;
          v206 = v161 - 1;
LABEL_292:
          v54 = 0x3000200010000;
          v53 = (uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v208);
          v53.i16[0] = vminvq_u16(v53);
          v81 = &v206->i16[v53.u8[0]];
        }
        else
        {
          v82 = 2 * v70;
          v81 = (__int16 *)*((_QWORD *)v67 + 1);
          while (*v81 != 36)
          {
            ++v81;
            v82 -= 2;
            if (!v82)
              goto LABEL_81;
          }
        }
        if (v81 != (__int16 *)v161)
        {
          a8 = ((uint64_t)v81 - v69) >> 1;
LABEL_105:
          if (a8 != -1)
          {
            JSC::substituteBackreferencesSlow((uint64_t)&__dst, v69, v70 | ((unint64_t)((v68 >> 2) & 1) << 32), v65, v66, (unsigned int *)v58, (uint64_t)v1157, a8, *(double *)v53.i64, *(double *)&v54, v55);
            v74 = (WTF::AtomStringImpl *)DWORD2(v1169);
            v10 = v1151;
            goto LABEL_85;
          }
        }
      }
LABEL_81:
      *v67 += 2;
      v10 = v1151;
LABEL_82:
      __dst = v67;
      if (*(_QWORD *)v11)
        v74 = (WTF::AtomStringImpl *)*(unsigned int *)(*(_QWORD *)v11 + 4);
      else
        v74 = 0;
      DWORD2(v1169) = (_DWORD)v74;
LABEL_85:
      if ((v74 & 0x80000000) != 0)
      {
        v248 = JSC::createOutOfMemoryError(a1, (JSC::JSGlobalObject *)v49);
        v255 = (JSC::Exception *)v248;
        if ((v248 & 0xFFFE000000000002) != 0
          || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v248 & 0xFFFFFFFE) + 0x4C)))
        {
          v255 = (JSC::Exception *)JSC::Exception::create((uint64_t)v47, (JSC::VM *)v248, 0, v249, v250, v251, v252, v253);
        }
        JSC::VM::throwException(v47, (JSC::JSGlobalObject *)a1, v255, v254, v249, v250, v251, v252, v253);
      }
      else
      {
        v75 = (WTF::StringImpl *)__dst;
        if (__dst)
          goto LABEL_87;
        if ((_QWORD)v1169 && *(_DWORD *)(v1169 + 4) > v74 + (v74 >> 2))
        {
          if ((*(_BYTE *)(v1169 + 16) & 4) != 0)
            WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&__dst, v74, (uint64_t)v50, v51, v52, a6, a7, a8);
          else
            WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&__dst, v74, (uint64_t)v50, v51, v52, a6, a7, a8);
          v189 = (WTF::StringImpl *)__dst;
          __dst = (void *)v1169;
          *(_QWORD *)&v1169 = 0;
          if (v189)
          {
            if (*(_DWORD *)v189 == 2)
            {
              WTF::StringImpl::~StringImpl(v189, v162, v163, v164, v165, v166, v167, v168);
              WTF::fastFree(v190, v191, v192, v193, v194, v195, v196, v197);
            }
            else
            {
              *(_DWORD *)v189 -= 2;
            }
          }
        }
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&__dst);
        v75 = (WTF::StringImpl *)__dst;
        if (__dst)
LABEL_87:
          *(_DWORD *)v75 += 2;
        v1162 = v75;
        LODWORD(v76) = HIDWORD(v1182);
        if (HIDWORD(v1182) == (_DWORD)v1182)
        {
          v170 = (uint64_t *)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1181, HIDWORD(v1182) + 1, (unint64_t)&v1162);
          v76 = HIDWORD(v1182);
          v171 = v1181;
          v172 = *v170;
          *v170 = 0;
          *((_QWORD *)v171 + v76) = v172;
        }
        else
        {
          v1162 = 0;
          *((_QWORD *)v1181 + HIDWORD(v1182)) = v75;
        }
        HIDWORD(v1182) = v76 + 1;
        v77 = v1162;
        v1162 = 0;
        if (v77)
        {
          if (*(_DWORD *)v77 != 2)
          {
            *(_DWORD *)v77 -= 2;
            goto LABEL_93;
          }
          WTF::StringImpl::~StringImpl(v77, (WTF::AtomStringImpl *)v49, (uint64_t)v50, v51, v52, a6, a7, a8);
          v87 = *(_QWORD *)(StatusReg + 752);
          if (v87)
          {
            if ((unint64_t)v77 >> 43
              || ((*(unsigned int *)((char *)&bmalloc_megapage_table + (((unint64_t)v77 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v77)) & 1) == 0)
            {
              if ((unint64_t)v77 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= (unint64_t)v77 >> 24)
              {
                v51 = 0;
LABEL_511:
                bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v87, (unint64_t)v77, 1, v51, v52, a6, a7, a8);
                goto LABEL_93;
              }
              v51 = (*(_DWORD *)((char *)off_1ECF425F8
                               + (((((unint64_t)v77 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                               + 24) >> (2 * ((BYTE3(v77) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
              if ((_DWORD)v51 != 1)
                goto LABEL_511;
            }
            v88 = *(unsigned int *)(v87 + 8000);
            if (v88 >= 0x3E7)
            {
              pas_thread_local_cache_append_deallocation_slow(v87, (uint64_t)v77, (os_unfair_lock_s *)5, v51, v52, a6, a7, a8);
            }
            else
            {
              *(_QWORD *)(v87 + 8 * v88) = (unint64_t)v77 | 0x5000000000000;
              *(_DWORD *)(v87 + 8000) = v88 + 1;
            }
          }
          else
          {
            pas_try_deallocate_slow_no_cache((unint64_t)v77, (uint64_t)&bmalloc_heap_config, 1);
          }
        }
      }
LABEL_93:
      v78 = v1169;
      *(_QWORD *)&v1169 = 0;
      if (!v78)
        goto LABEL_96;
      if (*(_DWORD *)v78 != 2)
      {
        *(_DWORD *)v78 -= 2;
        goto LABEL_96;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v78, (WTF::AtomStringImpl *)v49, (uint64_t)v50, v51, v52, a6, a7, a8);
      v83 = *(_QWORD *)(StatusReg + 752);
      if (v83)
      {
        if (v78 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v78 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v78)) & 1) == 0)
        {
          if (v78 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v78 >> 24)
          {
            v51 = 0;
LABEL_502:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v83, v78, 1, v51, v52, a6, a7, a8);
            goto LABEL_96;
          }
          v51 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v78 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v78) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v51 != 1)
            goto LABEL_502;
        }
        v84 = *(unsigned int *)(v83 + 8000);
        if (v84 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v83, v78, (os_unfair_lock_s *)5, v51, v52, a6, a7, a8);
        }
        else
        {
          *(_QWORD *)(v83 + 8 * v84) = v78 | 0x5000000000000;
          *(_DWORD *)(v83 + 8000) = v84 + 1;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v78, (uint64_t)&bmalloc_heap_config, 1);
      }
LABEL_96:
      v79 = (unint64_t)__dst;
      __dst = 0;
      if (!v79)
        goto LABEL_99;
      if (*(_DWORD *)v79 != 2)
      {
        *(_DWORD *)v79 -= 2;
LABEL_99:
        if ((v74 & 0x80000000) != 0)
          goto LABEL_131;
        goto LABEL_100;
      }
      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v79, (WTF::AtomStringImpl *)v49, (uint64_t)v50, v51, v52, a6, a7, a8);
      v85 = *(_QWORD *)(StatusReg + 752);
      if (v85)
      {
        if (v79 >> 43
          || ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v79 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v79)) & 1) == 0)
        {
          if (v79 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v79 >> 24)
          {
            v51 = 0;
LABEL_506:
            bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v85, v79, 1, v51, v52, a6, a7, a8);
            if ((v74 & 0x80000000) != 0)
              goto LABEL_131;
            goto LABEL_100;
          }
          v51 = (*(_DWORD *)((char *)off_1ECF425F8 + ((((v79 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL) + 24) >> (2 * ((BYTE3(v79) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3;
          if ((_DWORD)v51 != 1)
            goto LABEL_506;
        }
        v86 = *(unsigned int *)(v85 + 8000);
        if (v86 >= 0x3E7)
        {
          pas_thread_local_cache_append_deallocation_slow(v85, v79, (os_unfair_lock_s *)5, v51, v52, a6, a7, a8);
          if ((v74 & 0x80000000) != 0)
            goto LABEL_131;
        }
        else
        {
          *(_QWORD *)(v85 + 8 * v86) = v79 | 0x5000000000000;
          *(_DWORD *)(v85 + 8000) = v86 + 1;
          if ((v74 & 0x80000000) != 0)
            goto LABEL_131;
        }
      }
      else
      {
        pas_try_deallocate_slow_no_cache(v79, (uint64_t)&bmalloc_heap_config, 1);
        if ((v74 & 0x80000000) != 0)
          goto LABEL_131;
      }
LABEL_100:
      v80 = (int)v1167;
      v1190 = (unint64_t)v1167;
      if (v1166 == v1167)
      {
        v45 = (_DWORD)v1167 + 1;
        v243 = v1164;
        if ((int)v1167 + 1 > v1164)
          goto LABEL_738;
        v244 = (WTF::StringImpl *)*v1160;
        if (*v1160 && *((_DWORD *)v244 + 1) > v1167)
        {
          if ((WTF::StringImpl::at(v244, v1167) & 0xFC00) == 0xD800
            && (v245 = (WTF::StringImpl *)*v1160) != 0
            && *((_DWORD *)v245 + 1) > v45)
          {
            v10 = v1151;
            if ((WTF::StringImpl::at(v245, v80 + 1) & 0xFC00) == 0xDC00)
            {
              v45 = v80 + 2;
              if (v80 + 2 > v243)
                goto LABEL_738;
            }
          }
          else
          {
            v10 = v1151;
          }
        }
      }
      else
      {
        v45 = v1167;
      }
      if ((v1152 & 2) == 0)
        goto LABEL_738;
    }
  }
  __dst = *(void **)(a1 + 56);
  if ((v13 & 1) != 0)
    JSC::throwTypeError(a1, (JSC::VM **)&__dst, (uint64_t)"Attempted to assign to readonly property.", 42);
  else
    *(_QWORD *)(a3 + 24) = 0xFFFE000000000000;
  if (*((_DWORD *)v10 + 20))
  {
    v371 = *((_DWORD *)v10 + 20);
    if ((v371 & 0x27) != 0 && (v371 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC *)((char *)v10 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*((_QWORD *)v10 + 2))
      return 0;
  }
  if (v1161[0])
  {
    v98 = v1161[0] == 2;
    v99 = v1161[0] != 2 || v15;
    if ((v99 & 1) != 0 || v12 < dword_1ECF4C794)
    {
LABEL_137:
      v1190 = 0;
      v1184 = (WTF *)v1186;
      v1185 = 16;
      v1181 = (WTF *)v1183;
      v1182 = 16;
      if (v98)
      {
        v100 = a1;
        v101 = *((_DWORD *)v1157 + 6);
        v102 = v101 + 3;
        v103 = v101 + 4;
        if (v15)
          v104 = v103;
        else
          v104 = v102;
        JSC::CachedCall::CachedCall((JSC::CachedCall *)&__dst, (JSC::JSGlobalObject *)a1, (JSC::JSFunction *)a4, v104, a5, a6, a7, a8);
        if (*((_DWORD *)v10 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v10, v105, v106, v107, v108, v109, v110, v111))
        {
          goto LABEL_373;
        }
        v112 = 0;
        v113 = (uint64_t *)(a1 + 2200);
        v114 = v10;
        while (1)
        {
          v115 = *(_QWORD *)(v100 + 56);
          JSC::RegExp::match((uint64_t)v1157, v100, v1160, v112, (uint64_t)v113, v109, v110, v111);
          LODWORD(v100) = v121;
          if (!*(_DWORD *)(v115 + 80))
            goto LABEL_144;
          v439 = *(_DWORD *)(v115 + 80);
          if ((v439 & 0x27) != 0 && (v439 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VMTraps *)(v115 + 64), 7u, (uint64_t)v117, v118, v119, v109, v110, v111);
          if (*(_QWORD *)(v115 + 16))
          {
            v123 = 0;
            v122 = 0;
            v100 = -1;
          }
          else
          {
LABEL_144:
            v122 = *v113;
            if ((_DWORD)v100 == -1)
            {
              v123 = 0;
              v100 = -1;
            }
            else
            {
              if (*(_DWORD *)(a1 + 2212) <= 1u)
              {
                __break(0xC471u);
                JUMPOUT(0x198BD73E8);
              }
              v123 = (WTF::StringImpl *)*(int *)(v122 + 4);
              v100 = (int)v100;
              *(_QWORD *)(a1 + 2152) = v1157;
              *(_QWORD *)(a1 + 2144) = v1156;
              *(_QWORD *)(a1 + 2120) = (int)v100;
              *(_QWORD *)(a1 + 2128) = v123;
              *(_BYTE *)(a1 + 2136) = 0;
              if (*(_DWORD *)(v115 + 760) >= *(unsigned __int8 *)(a1 + 7))
                JSC::Heap::writeBarrierSlowPath(v115 + 192, a1);
            }
          }
          v1166 = (WTF::StringImpl *)v100;
          v1167 = v123;
          if (*((_DWORD *)v114 + 20))
          {
            v440 = *((_DWORD *)v114 + 20);
            if ((v440 & 0x27) != 0 && (v440 & 0x20) == 0)
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v114 + 64), 7u, (uint64_t)v117, v118, v119, v109, v110, v111);
            if (*((_QWORD *)v114 + 2))
              goto LABEL_373;
            v100 = (uint64_t)v1166;
            v10 = v1151;
          }
          if (v100 == -1)
            goto LABEL_737;
          v124 = HIDWORD(v1185);
          if (HIDWORD(v1185) == (_DWORD)v1185)
          {
            if ((WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1184, (int *)&v1190, (int *)&v1166, v118, v119, v109, v110, v111) & 1) == 0)goto LABEL_372;
          }
          else
          {
            v125 = v1190;
            v126 = (_DWORD *)((char *)v1184 + 8 * HIDWORD(v1185));
            *v126 = v1190;
            v126[1] = v100;
            if (v125 == (_DWORD)v100)
              *(_QWORD *)v126 = 0;
            HIDWORD(v1185) = v124 + 1;
          }
          v1175 = 0;
          v1176 = 0;
          if (v15)
            break;
          if (*((_DWORD *)v1157 + 6) != -1)
          {
            v127 = 0;
            v128 = 1;
            do
            {
              v118 = *(unsigned int *)(v122 + 4 * (v128 - 1));
              if ((v118 & 0x80000000) != 0)
              {
                v130 = 10;
              }
              else
              {
                v130 = (uint64_t)JSC::jsSubstring(v1151, a1, v1156, (JSC::JSString *)v118, (*(_DWORD *)(v122 + 4 * v128) - v118), v109, v110, v111, v120);
                if (*((_DWORD *)v114 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v114, v129, (uint64_t)v117, v118, v119, v109, v110, v111))
                {
                  goto LABEL_373;
                }
              }
              v131 = v1176;
              if (v1176 != v1177 && (v1178 != v1179 ? (v132 = v1178 == 0) : (v132 = 1), v132))
              {
                *(_QWORD *)&v1178[8 * v1176] = v130;
                v1176 = v131 + 1;
              }
              else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1176, v130, (uint64_t)v117, v118, v119, v109, v110, v111) == 1)
              {
                v1175 = 1;
              }
              ++v127;
              v128 += 2;
            }
            while (v127 < (*((_DWORD *)v1157 + 6) + 1));
            v133 = 0;
            goto LABEL_170;
          }
          v133 = 0;
LABEL_171:
          v134 = (unint64_t)v1166 | 0xFFFE000000000000;
          if ((int)v1166 < 0)
            v134 = COERCE__INT64((double)v1166) + 0x2000000000000;
          if ((unint64_t)v1166 >> 32)
            v135 = COERCE__INT64((double)(unint64_t)v1166) + 0x2000000000000;
          else
            v135 = v134;
          v136 = v1176;
          if (v1176 == v1177 || v1178 != v1179 && v1178)
          {
            if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1176, v135, (uint64_t)v117, v118, v119, v109, v110, v111) == 1)v1175 = 1;
          }
          else
          {
            *(_QWORD *)&v1178[8 * v1176] = v135;
            v1176 = v136 + 1;
          }
          v137 = v1176;
          if (v1176 == v1177 || v1178 != v1179 && v1178)
          {
            if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1176, (uint64_t)v1156, (uint64_t)v117, v118, v119, v109, v110, v111) == 1)v1175 = 1;
          }
          else
          {
            *(_QWORD *)&v1178[8 * v1176] = v1156;
            v1176 = v137 + 1;
          }
          if (v15)
            JSC::CachedCall::appendArgument((uint64_t *)&__dst, v133, (uint64_t)v117, v118, v119, v109, v110, v111);
          *(_QWORD *)&v1173 = 10;
          if (v1175)
          {
LABEL_372:
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1165);
            goto LABEL_373;
          }
          v138 = v1170;
          v139 = v1180;
          if (v1180)
            goto LABEL_188;
          v468 = (unsigned int *)(v1170 + 80);
          v469 = *(_DWORD *)(v1170 + 80);
          if ((v469 & 0x20) == 0)
          {
            do
              v470 = __ldaxr(v468);
            while (__stlxr(v470 | 0x20, v468));
          }
          JSC::CachedCall::relink((JSC::CachedCall *)&__dst, v135, (uint64_t)v117, v118, v119, v109, v110, v111);
          if (*v468
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v138, (uint64_t)v116, (uint64_t)v117, v118, v119, v109, v110, v111))
          {
            v471 = 0;
            v139 = 0;
            v11 = *(WTF::StringImpl **)(v138 + 16);
          }
          else
          {
            v471 = 1;
            v139 = v1180;
          }
          if ((v469 & 0x20) == 0)
          {
            do
              v472 = __ldaxr(v468);
            while (__stlxr(v472 & 0xFFFFFFDF, v468));
          }
          v10 = v1151;
          if (v471)
LABEL_188:
            v11 = (WTF::StringImpl *)vmEntryToJavaScript(v139, (JSC::VM *)v138, (uint64_t)&v1171 + 8, v118, v119, v109, v110, v111);
          *(_BYTE *)(v138 + 93120) = 1;
          v1162 = v11;
          v114 = v1165;
          v141 = (unint64_t)v11;
          if (*((_DWORD *)v1165 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v1165, (uint64_t)v116, (uint64_t)v117, v118, v119, v109, v110, v111))
            {
              goto LABEL_373;
            }
            v141 = (unint64_t)v1162;
          }
          if ((v141 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v141 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1162, (JSC::JSGlobalObject *)a1, v117, v118, v119, v109, v110, v111, var60);
          }
          else
          {
            v142 = *(int **)(v141 + 8);
            if ((v142 & 1) != 0)
              v142 = *JSC::JSRopeString::resolveRope(v141, (JSC::JSGlobalObject *)a1, (uint64_t)v117, v118, v140, v119, v109, v110, v111);
            if (v142)
              *v142 += 2;
            var60[0] = v142;
          }
          LODWORD(v143) = HIDWORD(v1182);
          if (HIDWORD(v1182) == (_DWORD)v1182)
          {
            v341 = (uint64_t *)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1181, HIDWORD(v1182) + 1, (unint64_t)var60);
            v143 = HIDWORD(v1182);
            v342 = v1181;
            v343 = *v341;
            *v341 = 0;
            *((_QWORD *)v342 + v143) = v343;
          }
          else
          {
            v144 = var60[0];
            var60[0] = 0;
            *((_QWORD *)v1181 + HIDWORD(v1182)) = v144;
          }
          HIDWORD(v1182) = v143 + 1;
          v145 = (WTF::StringImpl *)var60[0];
          var60[0] = 0;
          if (v145)
          {
            if (*(_DWORD *)v145 == 2)
            {
              WTF::StringImpl::~StringImpl(v145, v116, (uint64_t)v117, v118, v119, v109, v110, v111);
              WTF::fastFree(v198, v199, v200, v201, v202, v203, v204, v205);
            }
            else
            {
              *(_DWORD *)v145 -= 2;
            }
          }
          if (*((_DWORD *)v114 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v114, (uint64_t)v116, (uint64_t)v117, v118, v119, v109, v110, v111))
          {
LABEL_373:
            JSC::CachedCall::~CachedCall((JSC::CachedCall *)&__dst, v116, (uint64_t)v117, v118, v119, v109, v110, v111);
            goto LABEL_131;
          }
          v146 = (int)v1167;
          v1190 = (unint64_t)v1167;
          if (v1166 != v1167)
          {
            v112 = v1167;
            goto LABEL_205;
          }
          v112 = (_DWORD)v1167 + 1;
          v475 = v1164;
          if ((int)v1167 + 1 > v1164)
            goto LABEL_737;
          v840 = (WTF::StringImpl *)*v1160;
          if (*v1160
            && *((_DWORD *)v840 + 1) > v1167
            && (WTF::StringImpl::at(v840, v1167) & 0xFC00) == 0xD800
            && (v1129 = (WTF::StringImpl *)*v1160) != 0
            && *((_DWORD *)v1129 + 1) > v112)
          {
            v10 = v1151;
            if ((WTF::StringImpl::at(v1129, v146 + 1) & 0xFC00) == 0xDC00)
            {
              v112 = v146 + 2;
              if (v146 + 2 > v475)
              {
LABEL_737:
                JSC::CachedCall::~CachedCall((JSC::CachedCall *)&__dst, v116, (uint64_t)v117, v118, v119, v109, v110, v111);
LABEL_738:
                v476 = HIDWORD(v1182);
                if (!v1190)
                {
                  v97 = (unint64_t)v1156;
                  if (!HIDWORD(v1182))
                    goto LABEL_740;
                }
                v482 = v1164;
                if (v1164 > v1190)
                {
                  if (HIDWORD(v1185) == (_DWORD)v1185)
                  {
                    if (!WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int &>((uint64_t)&v1184, (int *)&v1190, (int *)&v1164, v51, v52, a6, a7, a8))
                    {
                      v695 = &v1165;
                      goto LABEL_1025;
                    }
                    v476 = HIDWORD(v1182);
                  }
                  else
                  {
                    v504 = HIDWORD(v1185) + 1;
                    v505 = (_DWORD *)((char *)v1184 + 8 * HIDWORD(v1185));
                    *v505 = v1190;
                    v505[1] = v482;
                    HIDWORD(v1185) = v504;
                  }
                }
                v483 = v1184;
                v484 = HIDWORD(v1185);
                v485 = v1181;
                v486 = *(_QWORD *)(a1 + 56);
                v1193 = v486;
                if (HIDWORD(v1185) != 1 || v476)
                {
                  v487 = SHIDWORD(v1185);
                  if (HIDWORD(v1185) != 2 || v476 != 1)
                  {
                    if (SHIDWORD(v1185) < 1)
                    {
                      v489 = 0;
                      v488 = 0;
                    }
                    else
                    {
                      LODWORD(v488) = 0;
                      v489 = 0;
                      v490 = (_DWORD *)((char *)v1184 + 4);
                      do
                      {
                        v491 = *v490 - *(v490 - 1);
                        v492 = __OFADD__((_DWORD)v488, v491);
                        v493 = v488 + v491;
                        if (v492)
                          v489 = 1;
                        if (v492)
                          v488 = v488;
                        else
                          v488 = v493;
                        v490 += 2;
                        --v484;
                      }
                      while (v484);
                    }
                    v494 = 1;
                    if (v476 >= 1)
                    {
                      v495 = v1181;
                      v496 = v488;
                      v497 = v476;
                      do
                      {
                        v498 = *(_QWORD *)v495;
                        if (*(_QWORD *)v495)
                        {
                          v499 = *(unsigned int *)(v498 + 4);
                          v488 = v499 + (int)v496;
                          v500 = (unint64_t)(v488 + 0x80000000) >> 32;
                          if ((_DWORD)v499)
                            v501 = v500 == 0;
                          else
                            v501 = 0;
                          if (v501
                            || (!v500 ? (v488 = v488) : (v489 = 1, v488 = v496), (_DWORD)v499))
                          {
                            if ((*(_BYTE *)(v498 + 16) & 4) == 0)
                              v494 = 0;
                          }
                        }
                        else
                        {
                          v488 = v496;
                        }
                        v495 = (WTF *)((char *)v495 + 8);
                        v496 = v488;
                        --v497;
                      }
                      while (v497);
                    }
                    if (!v489)
                    {
                      if (!(_DWORD)v488)
                      {
                        v97 = *(_QWORD *)(v486 + 41968);
                        goto LABEL_740;
                      }
                      if (*v1160)
                        v506 = (*(unsigned __int8 *)(*v1160 + 16) >> 2) & 1;
                      else
                        v506 = 1;
                      v1157 = (JSC::RegExp *)v486;
                      if ((v506 & v494) == 1)
                      {
                        if ((v488 & 0x80000000) == 0)
                        {
                          WTF::tryFastCompactMalloc((WTF *)(v488 + 20), &__dst);
                          v507 = __dst;
                          if (__dst)
                          {
                            v508 = (char *)__dst + 20;
                            *(_DWORD *)__dst = 2;
                            v507[1] = v488;
                            *((_QWORD *)v507 + 1) = v507 + 5;
                            v507[4] = 4;
                            if ((int)v487 <= v476)
                              v509 = v476;
                            else
                              v509 = v487;
                            if ((int)v509 >= 1)
                            {
                              v510 = 0;
                              v511 = 0;
                              v512 = (_DWORD *)((char *)v483 + 4);
                              while (v510 >= v487)
                              {
LABEL_807:
                                if (v510 < v476)
                                {
                                  v522 = *((_QWORD *)v485 + v510);
                                  if (v522)
                                  {
                                    v523 = *(char **)(v522 + 8);
                                    v524 = *(_DWORD *)(v522 + 4);
                                    v525 = &v508[v511];
                                    if (v524 == 1)
                                    {
                                      *v525 = *v523;
                                      v524 = 1;
                                    }
                                    else if (v524)
                                    {
                                      memcpy(v525, v523, *(unsigned int *)(v522 + 4));
                                    }
                                  }
                                  else
                                  {
                                    v524 = 0;
                                  }
                                  v511 += v524;
                                }
                                ++v510;
                                v512 += 2;
                                if (v509 == v510)
                                  goto LABEL_822;
                              }
                              v513 = *v1160;
                              if (!*v1160
                                || (v514 = *(unsigned int *)(v513 + 4),
                                    v515 = *(v512 - 1),
                                    v514 <= v515))
                              {
                                LODWORD(v152) = 0;
                                goto LABEL_806;
                              }
                              v516 = *(unsigned int *)(v513 + 16);
                              v517 = *(char **)(v513 + 8);
                              v518 = *v512 - v515;
                              if ((int)v514 - (int)v515 > v518 || (v518 = v514 - v515, (_DWORD)v515))
                              {
                                v519 = (v516 >> 2) & 1;
                                v520 = v514 - v515;
                                v152 = v518;
                                if (!(_DWORD)v519)
                                {
                                  if (v520 < v518)
                                    goto LABEL_1379;
                                  v517 += 2 * v515;
                                  v521 = &v508[v511];
                                  if (v518 == 1)
                                    goto LABEL_804;
                                  goto LABEL_818;
                                }
                                if (v520 < v518)
                                  goto LABEL_1379;
                                v517 += v515;
                                LODWORD(v152) = v518;
                              }
                              else
                              {
                                v152 = v514 & 0xFFFFFFFEFFFFFFFFLL | (((v516 >> 2) & 1) << 32);
                              }
                              v521 = &v508[v511];
                              if ((_DWORD)v152 == 1)
                              {
LABEL_804:
                                *v521 = *v517;
                                LODWORD(v152) = 1;
LABEL_806:
                                v511 += v152;
                                goto LABEL_807;
                              }
LABEL_818:
                              if ((_DWORD)v152)
                                memcpy(v521, v517, v152);
                              goto LABEL_806;
                            }
LABEL_822:
                            __dst = v507;
                            goto LABEL_823;
                          }
                        }
                      }
                      else if (v488 <= 0x7FFFFFEF)
                      {
                        WTF::tryFastCompactMalloc((WTF *)(2 * v488 + 20), &__dst);
                        v152 = (uint64_t)__dst;
                        if (__dst)
                        {
                          v620 = (char *)__dst + 20;
                          *(_DWORD *)__dst = 2;
                          *(_DWORD *)(v152 + 4) = v488;
                          *(_QWORD *)(v152 + 8) = v152 + 20;
                          *(_DWORD *)(v152 + 16) = 0;
                          if ((int)v487 <= v476)
                            v621 = v476;
                          else
                            v621 = v487;
                          if ((int)v621 >= 1)
                          {
                            v622 = 0;
                            v623 = 0;
                            do
                            {
                              if (v622 < v487)
                              {
                                v624 = *v1160;
                                if (*v1160
                                  && (v625 = *(unsigned int *)(v624 + 4),
                                      v626 = *((unsigned int *)v483 + 2 * v622),
                                      v625 > v626))
                                {
                                  v627 = *(unsigned int *)(v624 + 16);
                                  v628 = *(int8x16_t **)(v624 + 8);
                                  v629 = *((_DWORD *)v483 + 2 * v622 + 1) - v626;
                                  if ((int)v625 - (int)v626 > v629 || (v629 = v625 - v626, (_DWORD)v626))
                                  {
                                    v630 = (v627 >> 2) & 1;
                                    v631 = v625 - v626;
                                    v632 = v629;
                                    if ((_DWORD)v630)
                                    {
                                      if (v631 < v629)
                                        goto LABEL_1379;
                                      v628 = (int8x16_t *)((char *)v628 + v626);
                                      v632 = v629 | 0x100000000;
                                    }
                                    else
                                    {
                                      if (v631 < v629)
                                        goto LABEL_1379;
                                      v628 = (int8x16_t *)((char *)v628 + 2 * v626);
                                    }
                                  }
                                  else
                                  {
                                    v632 = v625 & 0xFFFFFFFEFFFFFFFFLL | (((v627 >> 2) & 1) << 32);
                                  }
                                  v633 = &v620[2 * v623];
                                  if ((v632 & 0x100000000) != 0)
                                  {
                                    if (v632 < 0x40)
                                    {
                                      v1051 = &v620[2 * v623];
                                    }
                                    else
                                    {
                                      v1051 = &v633[2 * (v632 & 0xFFFFFFC0)];
                                      v1052 = &v620[2 * v623];
                                      do
                                      {
                                        v1197.val[0] = *v628;
                                        v1053 = v628[1];
                                        v1201.val[0] = v628[2];
                                        v1054 = v628[3];
                                        v628 += 4;
                                        v1205.val[1] = 0uLL;
                                        v1205.val[0] = v1054;
                                        v1201.val[1] = 0u;
                                        v1209.val[0] = v1053;
                                        v1197.val[1] = 0u;
                                        v1055 = v1052;
                                        vst2q_s8(v1055, v1197);
                                        v1055 += 32;
                                        v1209.val[1] = 0u;
                                        vst2q_s8(v1055, v1209);
                                        v1056 = v1052 + 64;
                                        vst2q_s8(v1056, v1201);
                                        v1057 = v1052 + 96;
                                        vst2q_s8(v1057, v1205);
                                        v1052 += 128;
                                      }
                                      while (v1052 != v1051);
                                    }
                                    while (v1051 != &v633[2 * v632])
                                    {
                                      v1058 = v628->u8[0];
                                      v628 = (int8x16_t *)((char *)v628 + 1);
                                      *(_WORD *)v1051 = v1058;
                                      v1051 += 2;
                                    }
                                  }
                                  else if ((_DWORD)v632 == 1)
                                  {
                                    *(_WORD *)v633 = v628->i16[0];
                                    LODWORD(v632) = 1;
                                  }
                                  else if ((_DWORD)v632)
                                  {
                                    memcpy(v633, v628, 2 * v632);
                                  }
                                }
                                else
                                {
                                  LODWORD(v632) = 0;
                                }
                                v623 += v632;
                              }
                              if (v622 < v476)
                              {
                                v634 = *((_QWORD *)v485 + v622);
                                if (v634)
                                {
                                  v635 = *(int8x16_t **)(v634 + 8);
                                  v636 = *(unsigned int *)(v634 + 4);
                                  v637 = &v620[2 * v623];
                                  if ((*(_BYTE *)(v634 + 16) & 4) != 0)
                                  {
                                    if (v636 >= 0x40)
                                    {
                                      v638 = &v637[2 * (v636 & 0xFFFFFFC0)];
                                      v640 = &v620[2 * v623];
                                      do
                                      {
                                        v1195.val[0] = *v635;
                                        v641 = v635[1];
                                        v1199.val[0] = v635[2];
                                        v642 = v635[3];
                                        v635 += 4;
                                        v1207.val[1] = 0u;
                                        v1207.val[0] = v642;
                                        v1199.val[1] = 0u;
                                        v1203.val[0] = v641;
                                        v1195.val[1] = 0u;
                                        v643 = v640;
                                        vst2q_s8(v643, v1195);
                                        v643 += 32;
                                        v1203.val[1] = 0u;
                                        vst2q_s8(v643, v1203);
                                        v644 = v640 + 64;
                                        vst2q_s8(v644, v1199);
                                        v645 = v640 + 96;
                                        vst2q_s8(v645, v1207);
                                        v640 += 128;
                                      }
                                      while (v640 != v638);
                                    }
                                    else
                                    {
                                      v638 = &v620[2 * v623];
                                    }
                                    while (v638 != &v637[2 * v636])
                                    {
                                      v639 = v635->u8[0];
                                      v635 = (int8x16_t *)((char *)v635 + 1);
                                      *(_WORD *)v638 = v639;
                                      v638 += 2;
                                    }
                                  }
                                  else if ((_DWORD)v636 == 1)
                                  {
                                    *(_WORD *)v637 = v635->i16[0];
                                    LODWORD(v636) = 1;
                                  }
                                  else if ((_DWORD)v636)
                                  {
                                    memcpy(v637, v635, 2 * v636);
                                  }
                                }
                                else
                                {
                                  LODWORD(v636) = 0;
                                }
                                v623 += v636;
                              }
                              ++v622;
                            }
                            while (v622 != v621);
                          }
                          __dst = (void *)v152;
LABEL_823:
                          v97 = JSC::jsString((uint64_t)v1157, (JSC::VM *)&__dst, v36, v37, v38, a6, a7, a8);
                          v526 = (WTF::StringImpl *)__dst;
                          __dst = 0;
                          if (!v526)
                            goto LABEL_740;
LABEL_824:
                          if (*(_DWORD *)v526 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v526, (WTF::AtomStringImpl *)v49, (uint64_t)v50, v51, v52, a6, a7, a8);
                            WTF::fastFree(v542, v543, v544, v545, v546, v547, v548, v549);
                          }
                          else
                          {
                            *(_DWORD *)v526 -= 2;
                          }
                          goto LABEL_740;
                        }
                      }
                    }
                    v695 = (JSC::VM **)&v1193;
LABEL_1025:
                    JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)v695);
                    v97 = 0;
                    goto LABEL_740;
                  }
                  v528 = *(unsigned int *)v1184;
                  v527 = *((_DWORD *)v1184 + 1);
                  v529 = (v527 - v528);
                  if (v527 == (_DWORD)v528)
                  {
                    v532 = &WTF::StringImpl::s_emptyAtomString;
                    WTF::StringImpl::s_emptyAtomString += 2;
                    goto LABEL_844;
                  }
                  v530 = *v1160;
                  if ((*(_DWORD *)(*v1160 + 16) & 4) != 0)
                  {
                    if (v529 <= 0xC)
                    {
                      v531 = (_BYTE *)(*(_QWORD *)(v530 + 8) + v528);
                      v532 = (int *)WTF::fastCompactMalloc((WTF *)(v529 + 20));
                      v533 = v532 + 5;
                      *v532 = 2;
                      v532[1] = v529;
                      *((_QWORD *)v532 + 1) = v532 + 5;
                      v532[4] = 4;
                      if ((_DWORD)v529 == 1)
                        *v533 = *v531;
                      else
                        memcpy(v533, v531, v529);
                      goto LABEL_844;
                    }
                  }
                  else if (v529 <= 6)
                  {
                    WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v530 + 8) + 2 * v528), v529, (uint64_t *)&__dst);
                    v532 = (int *)__dst;
                    goto LABEL_844;
                  }
                  v665 = (_DWORD *)*v1160;
                  if ((*(_DWORD *)(*v1160 + 16) & 3) == 2)
                    v665 = *(_DWORD **)(v530 + 24);
                  v666 = WTF::fastCompactMalloc((WTF *)0x20);
                  v532 = (int *)v666;
                  v667 = *(_DWORD *)(v530 + 16);
                  v668 = *(_QWORD *)(v530 + 8);
                  *v665 += 2;
                  *(_DWORD *)v666 = 2;
                  *(_DWORD *)(v666 + 4) = v529;
                  if ((v667 & 4) != 0)
                  {
                    *(_QWORD *)(v666 + 8) = v668 + v528;
                    *(_DWORD *)(v666 + 16) = 6;
                  }
                  else
                  {
                    *(_QWORD *)(v666 + 8) = v668 + 2 * v528;
                    *(_DWORD *)(v666 + 16) = 2;
                  }
                  *(_QWORD *)(v666 + 24) = v665;
LABEL_844:
                  v1192 = (const WTF::String *)v532;
                  v551 = *((unsigned int *)v483 + 2);
                  v550 = *((_DWORD *)v483 + 3);
                  v552 = (v550 - v551);
                  if (v550 == (_DWORD)v551)
                  {
                    v555 = &WTF::StringImpl::s_emptyAtomString;
                    WTF::StringImpl::s_emptyAtomString += 2;
                    goto LABEL_850;
                  }
                  v553 = *v1160;
                  if ((*(_DWORD *)(*v1160 + 16) & 4) != 0)
                  {
                    if (v552 <= 0xC)
                    {
                      v554 = (_BYTE *)(*(_QWORD *)(v553 + 8) + v551);
                      v555 = (int *)WTF::fastCompactMalloc((WTF *)(v552 + 20));
                      v556 = v555 + 5;
                      *v555 = 2;
                      v555[1] = v552;
                      *((_QWORD *)v555 + 1) = v555 + 5;
                      v555[4] = 4;
                      __dst = v555;
                      if ((_DWORD)v552 == 1)
                        *v556 = *v554;
                      else
                        memcpy(v556, v554, v552);
                      goto LABEL_850;
                    }
                  }
                  else if (v552 <= 6)
                  {
                    WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v553 + 8) + 2 * v551), v552, (uint64_t *)&__dst);
                    v555 = (int *)__dst;
                    goto LABEL_850;
                  }
                  v669 = (_DWORD *)*v1160;
                  if ((*(_DWORD *)(*v1160 + 16) & 3) == 2)
                    v669 = *(_DWORD **)(v553 + 24);
                  v670 = WTF::fastCompactMalloc((WTF *)0x20);
                  v555 = (int *)v670;
                  v671 = *(_DWORD *)(v553 + 16);
                  v672 = *(_QWORD *)(v553 + 8);
                  *v669 += 2;
                  *(_DWORD *)v670 = 2;
                  *(_DWORD *)(v670 + 4) = v552;
                  if ((v671 & 4) != 0)
                  {
                    *(_QWORD *)(v670 + 8) = v672 + v551;
                    *(_DWORD *)(v670 + 16) = 6;
                  }
                  else
                  {
                    *(_QWORD *)(v670 + 8) = v672 + 2 * v551;
                    *(_DWORD *)(v670 + 16) = 2;
                  }
                  *(_QWORD *)(v670 + 24) = v669;
LABEL_850:
                  v1191 = (WTF::StringImpl *)v555;
                  v557 = *(int **)(a1 + 56);
                  var60[0] = v557;
                  if (v1192)
                    v558 = *((_DWORD *)v1192 + 1);
                  else
                    v558 = 0;
                  v559 = *(_QWORD *)v485;
                  if (*(_QWORD *)v485)
                    v560 = *(_DWORD *)(v559 + 4);
                  else
                    v560 = 0;
                  if (v555)
                    v561 = v555[1];
                  else
                    v561 = 0;
                  if (v558)
                  {
                    if (v560)
                    {
                      if (v561)
                      {
                        if (((v561 | v560) & 0x80000000) == 0)
                        {
                          v562 = __OFADD__(v560, v561);
                          if ((v558 & 0x80000000) == 0 && !v562 && !__OFADD__(v558, v560 + v561))
                          {
                            if (v558 + (unint64_t)v560 + v561 + 20 < 0x40)
                            {
                              if (v1192)
                                v563 = *((_DWORD *)v1192 + 1);
                              else
                                v563 = 0;
                              if (v559)
                                v564 = *(_DWORD *)(v559 + 4);
                              else
                                v564 = 0;
                              if (v555)
                                v565 = v555[1];
                              else
                                v565 = 0;
                              if ((v565 | v564) < 0
                                || ((v492 = __OFADD__(v564, v565), v566 = v564 + v565, !v492) ? (v567 = 0) : (v567 = 1),
                                    v563 < 0
                                 || (v567 & 1) != 0
                                 || (v568 = (v563 + v566), __OFADD__(v563, v566))))
                              {
                                __dst = 0;
                                goto LABEL_1020;
                              }
                              if (v1192 && (*((_BYTE *)v1192 + 16) & 4) == 0)
                              {
                                v570 = 0;
                              }
                              else if (v559)
                              {
                                v569 = *(_DWORD *)(v559 + 16);
                                v570 = (v569 >> 2) & 1;
                                if (v555 && (v569 & 4) != 0)
                                  goto LABEL_885;
                              }
                              else
                              {
                                if (v555)
                                {
LABEL_885:
                                  v570 = (*((unsigned __int8 *)v555 + 16) >> 2) & 1;
                                  goto LABEL_886;
                                }
                                v570 = 1;
                              }
LABEL_886:
                              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v568, v570, (uint64_t)v1192, v559, (uint64_t)v555, (int **)&__dst);
                              v577 = (WTF::StringImpl *)__dst;
                              if (__dst)
                              {
                                __dst = 0;
                                v1166 = v577;
                                v97 = JSC::JSString::create((uint64_t)v557, (JSC::VM *)&v1166, v571, v572, v573, v574, v575, v576);
                                v578 = v1166;
                                v1166 = 0;
                                if (v578)
                                {
                                  if (*(_DWORD *)v578 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v578, (WTF::AtomStringImpl *)v49, (uint64_t)v50, v51, v52, a6, a7, a8);
                                    WTF::fastFree(v696, v697, v698, v699, v700, v701, v702, v703);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v578 -= 2;
                                  }
                                }
LABEL_888:
                                v579 = (WTF::StringImpl *)__dst;
                                __dst = 0;
                                if (!v579)
                                  goto LABEL_891;
LABEL_889:
                                if (*(_DWORD *)v579 != 2)
                                {
                                  *(_DWORD *)v579 -= 2;
                                  goto LABEL_891;
                                }
                                goto LABEL_916;
                              }
LABEL_1020:
                              JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)var60);
                              v97 = 0;
                              goto LABEL_888;
                            }
                            v646 = JSC::jsString((JSC *)v557, (JSC::VM *)&v1192, v1192, v559, v52, a6, a7, a8);
                            v653 = (JSC::JSString *)JSC::jsString((JSC *)v557, v485, v647, v648, v649, v650, v651, v652);
                            v660 = JSC::jsString((JSC *)v557, (JSC::VM *)&v1191, v654, v655, v656, v657, v658, v659);
                            v97 = JSC::JSRopeString::create((JSC::JSRopeString *)v557, v646, v653, v660, v661, v662, v663, v664);
LABEL_891:
                            v580 = v1191;
                            v1191 = 0;
                            if (v580)
                            {
                              if (*(_DWORD *)v580 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v580, (WTF::AtomStringImpl *)v49, (uint64_t)v50, v51, v52, a6, a7, a8);
                                WTF::fastFree(v593, v594, v595, v596, v597, v598, v599, v600);
                              }
                              else
                              {
                                *(_DWORD *)v580 -= 2;
                              }
                            }
                            v526 = v1192;
                            v1192 = 0;
                            if (!v526)
                              goto LABEL_740;
                            goto LABEL_824;
                          }
                        }
                        p_dst = (void **)var60;
LABEL_1022:
                        JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)p_dst);
                        v97 = 0;
                        goto LABEL_891;
                      }
                      __dst = v557;
                      if (v1192 && (v809 = *((unsigned int *)v1192 + 1), (_DWORD)v809))
                      {
                        if (v559)
                        {
                          v810 = *(unsigned int *)(v559 + 4);
                          if ((_DWORD)v810)
                          {
                            v811 = __OFADD__((_DWORD)v809, (_DWORD)v810);
                            if (((v810 | v809) & 0x80000000) != 0 || v811)
                            {
                              JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&__dst);
                              v97 = 0;
                              goto LABEL_891;
                            }
                            if ((unint64_t)(v809 + v810 + 20) < 0x30)
                            {
                              WTF::tryMakeString<WTF::String,WTF::String>((uint64_t)&v1192, (uint64_t *)v485, (int **)&v1166);
                              v818 = v1166;
                              if (v1166)
                              {
                                v1166 = 0;
                                v1162 = v818;
                                v97 = JSC::JSString::create((uint64_t)v557, (JSC::VM *)&v1162, v812, v813, v814, v815, v816, v817);
                                v819 = v1162;
                                v1162 = 0;
                                if (v819)
                                {
                                  if (*(_DWORD *)v819 == 2)
                                  {
                                    WTF::StringImpl::~StringImpl(v819, (WTF::AtomStringImpl *)v49, (uint64_t)v50, v51, v52, a6, a7, a8);
                                    WTF::fastFree(v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1033);
                                  }
                                  else
                                  {
                                    *(_DWORD *)v819 -= 2;
                                  }
                                }
                              }
                              else
                              {
                                JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&__dst);
                                v97 = 0;
                              }
                              v579 = v1166;
                              v1166 = 0;
                              if (v579)
                              {
                                if (*(_DWORD *)v579 == 2)
                                {
LABEL_916:
                                  WTF::StringImpl::~StringImpl(v579, (WTF::AtomStringImpl *)v49, (uint64_t)v50, v51, v52, a6, a7, a8);
                                  WTF::fastFree(v601, v602, v603, v604, v605, v606, v607, v608);
                                  goto LABEL_891;
                                }
                                *(_DWORD *)v579 -= 2;
                              }
                              goto LABEL_891;
                            }
                            v970 = JSC::jsString((JSC *)v557, (JSC::VM *)&v1192, v1192, v559, v52, a6, a7, a8);
                            v977 = (JSC::JSString *)JSC::jsString((JSC *)v557, v485, v971, v972, v973, v974, v975, v976);
                            v969 = JSC::JSRopeString::create((JSC::JSRopeString *)v557, v970, v977, v978, v979, v980, v981, v982);
LABEL_1418:
                            v97 = v969;
                            goto LABEL_891;
                          }
                        }
                        v968 = (JSC::VM *)&v1192;
                        v967 = (JSC *)v557;
                      }
                      else
                      {
                        v967 = (JSC *)v557;
                        v968 = v485;
                      }
                      v969 = JSC::jsString(v967, v968, v1192, v559, v52, a6, a7, a8);
                      goto LABEL_1418;
                    }
                    __dst = v557;
                    if (v1192)
                    {
                      v581 = *((unsigned int *)v1192 + 1);
                      if ((_DWORD)v581)
                      {
                        if (v555)
                        {
                          v582 = v555[1];
                          if ((_DWORD)v582)
                          {
                            v583 = __OFADD__((_DWORD)v581, (_DWORD)v582);
                            if (((v582 | v581) & 0x80000000) == 0 && !v583)
                            {
                              if ((unint64_t)(v581 + v582 + 20) < 0x30)
                              {
                                if ((*((_BYTE *)v1192 + 16) & 4) != 0)
                                  v584 = (*((unsigned __int8 *)v555 + 16) >> 2) & 1;
                                else
                                  v584 = 0;
                                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v581 + v582), v584, (uint64_t)v1192, (uint64_t)v555, (int **)&v1166);
                                v591 = v1166;
                                if (v1166)
                                {
                                  v1166 = 0;
                                  v1162 = v591;
                                  v97 = JSC::JSString::create((uint64_t)v557, (JSC::VM *)&v1162, v585, v586, v587, v588, v589, v590);
                                  v592 = v1162;
                                  v1162 = 0;
                                  if (!v592)
                                    goto LABEL_910;
                                  if (*(_DWORD *)v592 != 2)
                                  {
                                    *(_DWORD *)v592 -= 2;
                                    goto LABEL_910;
                                  }
                                  goto LABEL_1029;
                                }
                                goto LABEL_1497;
                              }
                              v679 = (JSC::VM *)&v1192;
                              v680 = (JSC *)v557;
                              goto LABEL_1012;
                            }
                            goto LABEL_1241;
                          }
                        }
                        v677 = &v1192;
                        goto LABEL_1008;
                      }
                    }
                  }
                  else
                  {
                    __dst = v557;
                    if (v559)
                    {
                      v609 = *(unsigned int *)(v559 + 4);
                      if ((_DWORD)v609)
                      {
                        if (v555)
                        {
                          v610 = v555[1];
                          if ((_DWORD)v610)
                          {
                            v611 = __OFADD__((_DWORD)v609, (_DWORD)v610);
                            if (((v610 | v609) & 0x80000000) == 0 && !v611)
                            {
                              if ((unint64_t)(v609 + v610 + 20) < 0x30)
                              {
                                if ((*(_BYTE *)(v559 + 16) & 4) != 0)
                                  v612 = (*((unsigned __int8 *)v555 + 16) >> 2) & 1;
                                else
                                  v612 = 0;
                                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v609 + v610), v612, v559, (uint64_t)v555, (int **)&v1166);
                                v619 = v1166;
                                if (v1166)
                                {
                                  v1166 = 0;
                                  v1162 = v619;
                                  v97 = JSC::JSString::create((uint64_t)v557, (JSC::VM *)&v1162, v613, v614, v615, v616, v617, v618);
                                  v592 = v1162;
                                  v1162 = 0;
                                  if (!v592)
                                    goto LABEL_910;
                                  if (*(_DWORD *)v592 != 2)
                                  {
                                    *(_DWORD *)v592 -= 2;
                                    goto LABEL_910;
                                  }
LABEL_1029:
                                  WTF::StringImpl::~StringImpl(v592, (WTF::AtomStringImpl *)v49, (uint64_t)v50, v51, v52, a6, a7, a8);
                                  WTF::fastFree(v704, v705, v706, v707, v708, v709, v710, v711);
                                  goto LABEL_910;
                                }
LABEL_1497:
                                JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&__dst);
                                v97 = 0;
LABEL_910:
                                v579 = v1166;
                                v1166 = 0;
                                if (v579)
                                  goto LABEL_889;
                                goto LABEL_891;
                              }
                              v680 = (JSC *)v557;
                              v679 = v485;
LABEL_1012:
                              v681 = JSC::jsString(v680, v679, v1192, v559, v52, a6, a7, a8);
                              v688 = (JSC::JSString *)JSC::jsString((JSC *)v557, (JSC::VM *)&v1191, v682, v683, v684, v685, v686, v687);
                              v97 = JSC::JSRopeString::create((JSC::JSRopeString *)v557, v681, v688, v689, v690, v691, v692, v693);
                              goto LABEL_891;
                            }
LABEL_1241:
                            p_dst = &__dst;
                            goto LABEL_1022;
                          }
                        }
                        v678 = (JSC *)v557;
                        v677 = (WTF::StringImpl **)v485;
LABEL_1009:
                        v97 = JSC::jsString(v678, (JSC::VM *)v677, v1192, v559, v52, a6, a7, a8);
                        goto LABEL_891;
                      }
                    }
                  }
                  v677 = &v1191;
LABEL_1008:
                  v678 = (JSC *)v557;
                  goto LABEL_1009;
                }
                v534 = *v1160;
                if (*v1160)
                  v535 = *(_DWORD *)(v534 + 4);
                else
                  v535 = 0;
                v536 = *((_DWORD *)v1184 + 1) - *(_DWORD *)v1184;
                if (*(int *)v1184 <= 0)
                {
                  v97 = (unint64_t)v1156;
                  if (v536 >= v535)
                    goto LABEL_740;
                }
                if (v536 >= v535)
                  v537 = v535;
                else
                  v537 = v536;
                if (!(_DWORD)v537)
                {
                  v540 = &WTF::StringImpl::s_emptyAtomString;
                  WTF::StringImpl::s_emptyAtomString += 2;
                  goto LABEL_913;
                }
                v538 = *(_DWORD *)v1184 & ~(*(int *)v1184 >> 31);
                if ((*(_DWORD *)(v534 + 16) & 4) != 0)
                {
                  if (v537 <= 0xC)
                  {
                    v539 = (_BYTE *)(*(_QWORD *)(v534 + 8) + v538);
                    v540 = (int *)WTF::fastCompactMalloc((WTF *)(v537 + 20));
                    v541 = v540 + 5;
                    *v540 = 2;
                    v540[1] = v537;
                    *((_QWORD *)v540 + 1) = v540 + 5;
                    v540[4] = 4;
                    if ((_DWORD)v537 == 1)
                      *v541 = *v539;
                    else
                      memcpy(v541, v539, v537);
                    goto LABEL_913;
                  }
                }
                else if (v537 <= 6)
                {
                  WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v534 + 8) + 2 * v538), v537, (uint64_t *)&v1166);
                  v540 = (int *)v1166;
                  goto LABEL_913;
                }
                v673 = (_DWORD *)*v1160;
                if ((*(_DWORD *)(v534 + 16) & 3) == 2)
                  v673 = *(_DWORD **)(v534 + 24);
                v674 = WTF::fastCompactMalloc((WTF *)0x20);
                v540 = (int *)v674;
                v675 = *(_DWORD *)(v534 + 16);
                v676 = *(_QWORD *)(v534 + 8);
                *v673 += 2;
                *(_DWORD *)v674 = 2;
                *(_DWORD *)(v674 + 4) = v537;
                if ((v675 & 4) != 0)
                {
                  *(_QWORD *)(v674 + 8) = v676 + v538;
                  *(_DWORD *)(v674 + 16) = 6;
                }
                else
                {
                  *(_QWORD *)(v674 + 8) = v676 + 2 * v538;
                  *(_DWORD *)(v674 + 16) = 2;
                }
                *(_QWORD *)(v674 + 24) = v673;
LABEL_913:
                __dst = v540;
                v97 = JSC::jsString(v486, (JSC::VM *)&__dst, (uint64_t)v50, v51, v52, a6, a7, a8);
                v526 = (WTF::StringImpl *)__dst;
                __dst = 0;
                if (!v526)
                  goto LABEL_740;
                goto LABEL_824;
              }
            }
          }
          else
          {
            v10 = v1151;
          }
LABEL_205:
          v100 = a1;
        }
        v832 = *(_DWORD *)(a1 + 932);
        if (v832)
          v833 = (JSC::VM *)(16 * (v832 & 0xFFFFFFFE));
        else
          v833 = 0;
        v133 = JSC::constructEmptyObject(v10, v833, v117, v118, v119, v109, v110, v111);
        if (*((_DWORD *)v1157 + 6) == -1)
        {
LABEL_170:
          v10 = v1151;
          goto LABEL_171;
        }
        v835 = 0;
        v836 = 1;
        while (1)
        {
          v118 = *(unsigned int *)(v122 + 4 * (v836 - 1));
          if ((v118 & 0x80000000) != 0)
          {
            v1155 = 10;
          }
          else
          {
            v1155 = (uint64_t)JSC::jsSubstring(v1151, a1, v1156, (JSC::JSString *)v118, (*(_DWORD *)(v122 + 4 * v836) - v118), v109, v110, v111, v834);
            if (*((_DWORD *)v1165 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v1165, v837, (uint64_t)v117, v118, v119, v109, v110, v111))
            {
              goto LABEL_373;
            }
          }
          v838 = v1176;
          if (v1176 != v1177 && (v1178 != v1179 ? (v839 = v1178 == 0) : (v839 = 1), v839))
          {
            *(_QWORD *)&v1178[8 * v1176] = v1155;
            v1176 = v838 + 1;
          }
          else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1176, v1155, (uint64_t)v117, v118, v119, v109, v110, v111) == 1)
          {
            v1175 = 1;
          }
          if (v835)
          {
            JSC::RegExp::getCaptureGroupNameForSubpatternId((uint64_t)v1157, v835, &v1162);
            if (v1162)
              break;
          }
LABEL_1273:
          ++v835;
          v836 += 2;
          if (v835 >= (*((_DWORD *)v1157 + 6) + 1))
            goto LABEL_170;
        }
        v1073 = *((unsigned int *)v1162 + 1);
        if (!(_DWORD)v1073)
        {
LABEL_1529:
          v1085 = v1162;
          v1162 = 0;
          if (v1085)
          {
            if (*(_DWORD *)v1085 == 2)
            {
              WTF::StringImpl::~StringImpl(v1085, v1072, (uint64_t)v117, v118, v119, v109, v110, v111);
              WTF::fastFree(v1105, v1106, v1107, v1108, v1109, v1110, v1111, v1112);
            }
            else
            {
              *(_DWORD *)v1085 -= 2;
            }
          }
          goto LABEL_1273;
        }
        v1148 = v1148 & 0xFFFFFF0000000000 | v1073 | ((unint64_t)((*((_DWORD *)v1162 + 4) >> 2) & 1) << 32);
        v1074 = JSC::RegExp::subpatternIdForGroupName<int const*>((uint64_t)v1157, *((_QWORD *)v1162 + 1), v1148, v122);
        if (v835 != v1074)
        {
          if (!v1074)
          {
            JSC::Identifier::fromString((uint64_t **)v1151, &v1162, v117, v118, v119, v109, v110, v111, (WTF::StringImpl **)var60);
            v1080 = var60[0];
            v1081 = (int *)v133;
            v1082 = (uint64_t)v1151;
            v1083 = 10;
LABEL_1526:
            JSC::JSObject::putDirect(v1081, v1082, (unint64_t)v1080, v1083, 0, v1079, v1076, v1077, v1078);
            v1084 = (WTF::StringImpl *)var60[0];
            var60[0] = 0;
            if (v1084)
            {
              if (*(_DWORD *)v1084 == 2)
              {
                WTF::StringImpl::~StringImpl(v1084, v1072, (uint64_t)v117, v118, v119, v109, v110, v111);
                WTF::fastFree(v1113, v1114, v1115, v1116, v1117, v1118, v1119, v1120);
              }
              else
              {
                *(_DWORD *)v1084 -= 2;
              }
            }
            goto LABEL_1529;
          }
          v118 = *(unsigned int *)(v122 + 8 * v1074);
          if ((v118 & 0x80000000) != 0)
          {
            v1155 = 10;
          }
          else
          {
            v1155 = (uint64_t)JSC::jsSubstring(v1151, a1, v1156, (JSC::JSString *)v118, (*(_DWORD *)(v122 + 4 * ((2 * v1074) | 1)) - v118), v109, v110, v111, v1075);
            if (*((_DWORD *)v1165 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v1165, v1095, (uint64_t)v117, v118, v119, v109, v110, v111))
            {
              v1096 = v1162;
              v1162 = 0;
              if (v1096)
              {
                if (*(_DWORD *)v1096 == 2)
                {
                  WTF::StringImpl::~StringImpl(v1096, v116, (uint64_t)v117, v118, v119, v109, v110, v111);
                  WTF::fastFree(v1097, v1098, v1099, v1100, v1101, v1102, v1103, v1104);
                }
                else
                {
                  *(_DWORD *)v1096 -= 2;
                }
              }
              goto LABEL_373;
            }
          }
        }
        JSC::Identifier::fromString((uint64_t **)v1151, &v1162, v117, v118, v119, v109, v110, v111, (WTF::StringImpl **)var60);
        v1080 = var60[0];
        v1081 = (int *)v133;
        v1082 = (uint64_t)v1151;
        v1083 = v1155;
        goto LABEL_1526;
      }
      goto LABEL_52;
    }
    v1189 = v10;
    do
      v263 = __ldaxr((unsigned int *)&g_superSamplerCount);
    while (__stlxr(v263 + 1, (unsigned int *)&g_superSamplerCount));
    v264 = (WTF::StringImpl *)*v1160;
    if (*v1160)
    {
      v265 = *((_DWORD *)v1157 + 6);
      v1146 = (JSC::RegExp *)((char *)v1157 + 24);
      v1136 = *((_DWORD *)v264 + 1);
      v1188 = v1136;
      v266 = (v265 + 2);
      v267 = (v265 + 3);
      v1137 = (uint64_t)v10 + 86816;
      v268 = *((_DWORD *)v264 + 4);
      if ((v268 & 0x10) != 0)
      {
        if (v268 < 0x100)
          LOBYTE(v269) = WTF::StringImpl::hashSlowCase(v264);
        else
          v269 = v268 >> 8;
        v270 = v1137 + 56 * (v269 & 0x3F);
        if (*(WTF::StringImpl **)v270 != v264 || *(_QWORD *)(v270 + 8) != (_QWORD)v1157)
        {
          v270 = v1137 + 56 * (((_BYTE)v269 + 1) & 0x3F);
          v1134 = v267;
          v1135 = v266;
          if (*(WTF::StringImpl **)v270 != v264
            || *(JSC::RegExp **)(v1137 + 56 * (((_BYTE)v269 + 1) & 0x3F) + 8) != v1157)
          {
            goto LABEL_541;
          }
          v267 = v267;
          v266 = v266;
        }
        v272 = *(JSC::RegExp **)(v270 + 16);
        v273 = *(unsigned int *)(v270 + 52);
        if ((_DWORD)v273)
        {
          if (v273 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198BD76DCLL);
          }
          v274 = (void *)WTF::fastMalloc((WTF *)(4 * v273));
          memcpy(v274, *(const void **)(v270 + 40), 4 * *(unsigned int *)(v270 + 52));
        }
        else
        {
          v274 = 0;
        }
        v275 = *(_OWORD *)(v270 + 24);
        v276 = *(_QWORD *)(a1 + 2200);
        if (v276)
        {
          *(_QWORD *)(a1 + 2200) = 0;
          *(_DWORD *)(a1 + 2208) = 0;
          v1153 = v275;
          WTF::fastFree(v276, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          v275 = v1153;
        }
        *(_QWORD *)(a1 + 2200) = v274;
        *(_DWORD *)(a1 + 2208) = v273;
        *(_DWORD *)(a1 + 2212) = v273;
        v277 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 2152) = v1157;
        *(_QWORD *)(a1 + 2144) = v1156;
        *(_OWORD *)(a1 + 2120) = v275;
        *(_BYTE *)(a1 + 2136) = 0;
        if (*(_DWORD *)(v277 + 760) >= *(unsigned __int8 *)(a1 + 7))
          JSC::Heap::writeBarrierSlowPath(v277 + 192, a1);
        v278 = v272;
LABEL_410:
        v1158 = v278;
        v1154 = *((_DWORD *)v278 + 2);
        v279 = v1154 / v266;
        v1187 = 0;
        v280 = (WTF *)v1186;
        v1184 = (WTF *)v1186;
        v1185 = 16;
        v281 = (WTF *)v1183;
        v1181 = (WTF *)v1183;
        v1182 = 16;
        v282 = (v279 + 1);
        if (v282 < 0x11)
        {
          v283 = 16;
        }
        else
        {
          if (v282 >> 29)
            goto LABEL_1116;
          WTF::tryFastMalloc((WTF *)(8 * v282), &__dst);
          if (!__dst)
            goto LABEL_1116;
          LODWORD(v1185) = v279 + 1;
          v1184 = (WTF *)__dst;
          v283 = v1182;
        }
        if (v283 >= v279)
        {
LABEL_421:
          if (v1182 < v279)
            WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1181, v279);
          if (v1181)
            bzero((char *)v1181 + 8 * HIDWORD(v1182), 8 * v279 - 8 * HIDWORD(v1182));
          v1144 = (unint64_t)v1186;
          v1143 = (WTF *)v1183;
          HIDWORD(v1182) = v1154 / v266;
          JSC::CachedCall::CachedCall((JSC::CachedCall *)&__dst, (JSC::JSGlobalObject *)a1, (JSC::JSFunction *)a4, v267, a5, a6, a7, a8);
          if (*((_DWORD *)v1189 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v1189, (uint64_t)v290, v36, v37, v38, a6, a7, a8))
          {
            goto LABEL_1032;
          }
          v291 = 0;
          v292 = 0;
          v293 = v1158;
          v294 = (char *)v1158 + 16;
          v1150 = v266;
          while (v292 < v1154)
          {
            v1175 = 0;
            v1176 = 0;
            v295 = v292;
            v296 = v1150;
            do
            {
              v297 = v295;
              if ((*((_BYTE *)v293 + 4) & 0xE) == 6)
                v298 = *(_QWORD *)&v294[8 * v295] + 0x2000000000000;
              else
                v298 = *(_QWORD *)&v294[8 * v295];
              v299 = v1176;
              if (v1176 != v1177 && (v1178 != v1179 ? (v300 = v1178 == 0) : (v300 = 1), v300))
              {
                *(_QWORD *)&v1178[8 * v1176] = v298;
                v1176 = v299 + 1;
              }
              else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1176, v298, v36, v37, v38, a6, a7, a8) == 1)
              {
                v1175 = 1;
              }
              v295 = v297 + 1;
              --v296;
            }
            while (v296);
            v301 = v1176;
            if (v1176 != v1177 && (v1178 != v1179 ? (v302 = v1178 == 0) : (v302 = 1), v302))
            {
              *(_QWORD *)&v1178[8 * v1176] = v1156;
              v1176 = v301 + 1;
            }
            else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1176, (uint64_t)v1156, v36, v37, v38, a6, a7, a8) == 1)
            {
              v1175 = 1;
            }
            if ((*((_BYTE *)v293 + 4) & 0xE) == 6)
              v303 = *(_QWORD *)&v294[8 * v292] + 0x2000000000000;
            else
              v303 = *(_QWORD *)&v294[8 * v292];
            v304 = v266;
            v292 += v266;
            v305 = *(_DWORD *)&v294[8 * v292 - 8];
            LODWORD(var60[0]) = v305;
            v306 = *(_QWORD *)(v303 + 8);
            v307 = (int *)(v303 + 16);
            if ((v306 & 1) == 0)
              v307 = (int *)(v306 + 4);
            v308 = *v307;
            v309 = HIDWORD(v1185);
            if (HIDWORD(v1185) == (_DWORD)v1185)
            {
              WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned long &,int &>((uint64_t)&v1184, (int *)&v1187, (int *)var60, v37, v38, a6, a7, a8);
            }
            else
            {
              v310 = v1187;
              v311 = (_DWORD *)((char *)v1184 + 8 * HIDWORD(v1185));
              *v311 = v1187;
              v311[1] = v305;
              if (v305 == v310)
                *(_QWORD *)v311 = 0;
              HIDWORD(v1185) = v309 + 1;
            }
            *(_QWORD *)&v1173 = 10;
            if (v1175)
            {
              JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1189);
LABEL_1032:
              v97 = 0;
              goto LABEL_1033;
            }
            v312 = v1170;
            v313 = v1180;
            if (v1180)
              goto LABEL_459;
            v735 = (unsigned int *)(v1170 + 80);
            v1142 = *(_DWORD *)(v1170 + 80);
            if ((v1142 & 0x20) == 0)
            {
              do
                v339 = __ldaxr(v735);
              while (__stlxr(v339 | 0x20, v735));
            }
            JSC::CachedCall::relink((JSC::CachedCall *)&__dst, v298, v36, v37, v38, a6, a7, a8);
            if (*v735
              && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v312, (uint64_t)v290, v36, v37, v38, a6, a7, a8))
            {
              v340 = 0;
              v313 = 0;
              v267 = *(_QWORD *)(v312 + 16);
            }
            else
            {
              v340 = 1;
              v313 = v1180;
            }
            if ((v1142 & 0x20) == 0)
            {
              do
                v338 = __ldaxr(v735);
              while (__stlxr(v338 & 0xFFFFFFDF, v735));
            }
            if (v340)
LABEL_459:
              v267 = vmEntryToJavaScript(v313, (JSC::VM *)v312, (uint64_t)&v1171 + 8, v37, v38, a6, a7, a8);
            *(_BYTE *)(v312 + 93120) = 1;
            v1166 = (WTF::StringImpl *)v267;
            v315 = v1189;
            v316 = v267;
            if (*((_DWORD *)v1189 + 20))
            {
              if (JSC::VM::hasExceptionsAfterHandlingTraps(v1189, (uint64_t)v290, v36, v37, v38, a6, a7, a8))
                goto LABEL_1501;
              v316 = (unint64_t)v1166;
            }
            if ((v316 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v316 + 5) != 2)
            {
              JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1166, (JSC::JSGlobalObject *)a1, (const WTF::String *)v36, v37, v38, a6, a7, a8, (int **)&v1162);
            }
            else
            {
              v317 = *(WTF::StringImpl **)(v316 + 8);
              if ((v317 & 1) != 0)
                v317 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v316, (JSC::JSGlobalObject *)a1, v36, v37, v314, v38, a6, a7, a8);
              if (v317)
                *(_DWORD *)v317 += 2;
              v1162 = v317;
            }
            if (*((_DWORD *)v315 + 20)
              && JSC::VM::hasExceptionsAfterHandlingTraps(v315, (uint64_t)v290, v36, v37, v38, a6, a7, a8))
            {
              v320 = 0;
            }
            else
            {
              if (v291 >= HIDWORD(v1182))
              {
                __break(0xC471u);
                JUMPOUT(0x198BD7410);
              }
              v318 = v1162;
              v1162 = 0;
              v319 = (WTF::StringImpl *)*((_QWORD *)v1181 + v291);
              *((_QWORD *)v1181 + v291) = v318;
              if (v319)
              {
                if (*(_DWORD *)v319 == 2)
                {
                  WTF::StringImpl::~StringImpl(v319, v290, v36, v37, v38, a6, a7, a8);
                  WTF::fastFree(v330, v331, v332, v333, v334, v335, v336, v337);
                }
                else
                {
                  *(_DWORD *)v319 -= 2;
                }
              }
              ++v291;
              v1187 = v308 + v305;
              v320 = 1;
            }
            v321 = v1162;
            v1162 = 0;
            v266 = v304;
            v293 = v1158;
            if (v321)
            {
              if (*(_DWORD *)v321 == 2)
              {
                WTF::StringImpl::~StringImpl(v321, v290, v36, v37, v38, a6, a7, a8);
                WTF::fastFree(v322, v323, v324, v325, v326, v327, v328, v329);
              }
              else
              {
                *(_DWORD *)v321 -= 2;
              }
            }
            if ((v320 & 1) == 0)
              goto LABEL_1032;
          }
          v736 = v1188;
          v737 = HIDWORD(v1185);
          if (v1188 > v1187)
          {
            if (HIDWORD(v1185) == (_DWORD)v1185)
            {
              WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned long &,int &>((uint64_t)&v1184, (int *)&v1187, (int *)&v1188, v37, v38, a6, a7, a8);
              v737 = HIDWORD(v1185);
            }
            else
            {
              v738 = (_DWORD *)((char *)v1184 + 8 * HIDWORD(v1185));
              *v738 = v1187;
              v738[1] = v736;
              HIDWORD(v1185) = ++v737;
            }
          }
          v739 = v1184;
          v740 = v1181;
          v741 = HIDWORD(v1182);
          v1157 = *(JSC::RegExp **)(a1 + 56);
          v1192 = v1157;
          if (v737 != 1 || HIDWORD(v1182) != 0)
          {
            v743 = SHIDWORD(v1182);
            if (v737 != 2 || HIDWORD(v1182) != 1)
            {
              if (v737 < 1)
              {
                v745 = 0;
                v744 = 0;
              }
              else
              {
                LODWORD(v744) = 0;
                v745 = 0;
                v746 = (_DWORD *)((char *)v1184 + 4);
                v747 = v737;
                do
                {
                  v748 = *v746 - *(v746 - 1);
                  v749 = __OFADD__((_DWORD)v744, v748);
                  v750 = v744 + v748;
                  if (v749)
                    v745 = 1;
                  if (v749)
                    v744 = v744;
                  else
                    v744 = v750;
                  v746 += 2;
                  --v747;
                }
                while (v747);
              }
              v751 = 1;
              if (SHIDWORD(v1182) >= 1)
              {
                v752 = v1181;
                v753 = HIDWORD(v1182);
                v754 = v744;
                do
                {
                  v755 = *(_QWORD *)v752;
                  if (*(_QWORD *)v752)
                  {
                    v756 = *(unsigned int *)(v755 + 4);
                    v744 = v756 + (int)v754;
                    v757 = (unint64_t)(v744 + 0x80000000) >> 32;
                    if ((_DWORD)v756)
                      v758 = v757 == 0;
                    else
                      v758 = 0;
                    if (v758
                      || (!v757 ? (v744 = v744) : (v745 = 1, v744 = v754), (_DWORD)v756))
                    {
                      if ((*(_BYTE *)(v755 + 16) & 4) == 0)
                        v751 = 0;
                    }
                  }
                  else
                  {
                    v744 = v754;
                  }
                  v752 = (WTF *)((char *)v752 + 8);
                  v754 = v744;
                  --v753;
                }
                while (v753);
              }
              if (!v745)
              {
                if (!(_DWORD)v744)
                {
                  v97 = *((_QWORD *)v1157 + 5246);
                  goto LABEL_1033;
                }
                if (*v1160)
                  v760 = (*(unsigned __int8 *)(*v1160 + 16) >> 2) & 1;
                else
                  v760 = 1;
                if ((v760 & v751) == 1)
                {
                  if ((v744 & 0x80000000) == 0)
                  {
                    WTF::tryFastCompactMalloc((WTF *)(v744 + 20), &v1166);
                    v761 = v1166;
                    if (v1166)
                    {
                      v762 = (char *)v1166 + 20;
                      *(_DWORD *)v1166 = 2;
                      *((_DWORD *)v761 + 1) = v744;
                      *((_QWORD *)v761 + 1) = (char *)v761 + 20;
                      *((_DWORD *)v761 + 4) = 4;
                      if (v737 <= (int)v743)
                        v763 = v743;
                      else
                        v763 = v737;
                      if ((int)v763 >= 1)
                      {
                        v764 = 0;
                        v765 = 0;
                        v766 = (_DWORD *)((char *)v739 + 4);
                        do
                        {
                          if (v764 < v737)
                          {
                            v767 = *v1160;
                            if (*v1160
                              && (v768 = *(unsigned int *)(v767 + 4),
                                  v769 = *(v766 - 1),
                                  v768 > v769))
                            {
                              v770 = *(unsigned int *)(v767 + 16);
                              v771 = *(char **)(v767 + 8);
                              v772 = *v766 - v769;
                              if ((int)v768 - (int)v769 > v772 || (v772 = v768 - v769, (_DWORD)v769))
                              {
                                v773 = (v770 >> 2) & 1;
                                v774 = v768 - v769;
                                v152 = v772;
                                if ((_DWORD)v773)
                                {
                                  if (v774 < v772)
                                    goto LABEL_1379;
                                  v771 += v769;
                                  LODWORD(v152) = v772;
                                }
                                else
                                {
                                  if (v774 < v772)
                                    goto LABEL_1379;
                                  v771 += 2 * v769;
                                }
                              }
                              else
                              {
                                v152 = v768 & 0xFFFFFFFEFFFFFFFFLL | (((v770 >> 2) & 1) << 32);
                              }
                              v775 = &v762[v765];
                              if ((_DWORD)v152 == 1)
                              {
                                *v775 = *v771;
                                LODWORD(v152) = 1;
                              }
                              else if ((_DWORD)v152)
                              {
                                memcpy(v775, v771, v152);
                              }
                            }
                            else
                            {
                              LODWORD(v152) = 0;
                            }
                            v765 += v152;
                          }
                          if (v764 < v743)
                          {
                            v776 = *((_QWORD *)v740 + v764);
                            if (v776)
                            {
                              v777 = *(char **)(v776 + 8);
                              v778 = *(_DWORD *)(v776 + 4);
                              v779 = &v762[v765];
                              if (v778 == 1)
                              {
                                *v779 = *v777;
                                v778 = 1;
                              }
                              else if (v778)
                              {
                                memcpy(v779, v777, *(unsigned int *)(v776 + 4));
                              }
                            }
                            else
                            {
                              v778 = 0;
                            }
                            v765 += v778;
                          }
                          ++v764;
                          v766 += 2;
                        }
                        while (v763 != v764);
                      }
                      v1166 = v761;
                      goto LABEL_1175;
                    }
                  }
                }
                else if (v744 <= 0x7FFFFFEF)
                {
                  WTF::tryFastCompactMalloc((WTF *)(2 * v744 + 20), &v1166);
                  v152 = (uint64_t)v1166;
                  if (v1166)
                  {
                    v900 = (char *)v1166 + 20;
                    *(_DWORD *)v1166 = 2;
                    *(_DWORD *)(v152 + 4) = v744;
                    *(_QWORD *)(v152 + 8) = v152 + 20;
                    *(_DWORD *)(v152 + 16) = 0;
                    if (v737 <= (int)v743)
                      v743 = v743;
                    else
                      v743 = v737;
                    if ((int)v743 >= 1)
                    {
                      v901 = 0;
                      v902 = 0;
                      do
                      {
                        if (v901 < v737)
                        {
                          v903 = *v1160;
                          if (*v1160
                            && (v904 = *(unsigned int *)(v903 + 4),
                                v905 = *((unsigned int *)v739 + 2 * v901),
                                v904 > v905))
                          {
                            v906 = *(unsigned int *)(v903 + 16);
                            v907 = *(int8x16_t **)(v903 + 8);
                            v908 = *((_DWORD *)v739 + 2 * v901 + 1) - v905;
                            if ((int)v904 - (int)v905 > v908 || (v908 = v904 - v905, (_DWORD)v905))
                            {
                              v909 = (v906 >> 2) & 1;
                              v910 = v904 - v905;
                              v911 = v908;
                              if ((_DWORD)v909)
                              {
                                if (v910 < v908)
                                  goto LABEL_1379;
                                v907 = (int8x16_t *)((char *)v907 + v905);
                                v911 = v908 | 0x100000000;
                              }
                              else
                              {
                                if (v910 < v908)
                                  goto LABEL_1379;
                                v907 = (int8x16_t *)((char *)v907 + 2 * v905);
                              }
                            }
                            else
                            {
                              v911 = v904 & 0xFFFFFFFEFFFFFFFFLL | (((v906 >> 2) & 1) << 32);
                            }
                            v912 = &v900[2 * v902];
                            if ((v911 & 0x100000000) != 0)
                            {
                              if (v911 < 0x40)
                              {
                                v1121 = &v900[2 * v902];
                              }
                              else
                              {
                                v1121 = &v912[2 * (v911 & 0xFFFFFFC0)];
                                v1122 = &v900[2 * v902];
                                do
                                {
                                  v1198.val[0] = *v907;
                                  v1123 = v907[1];
                                  v1202.val[0] = v907[2];
                                  v1124 = v907[3];
                                  v907 += 4;
                                  v1206.val[1] = 0uLL;
                                  v1206.val[0] = v1124;
                                  v1202.val[1] = 0u;
                                  v1210.val[0] = v1123;
                                  v1198.val[1] = 0u;
                                  v1125 = v1122;
                                  vst2q_s8(v1125, v1198);
                                  v1125 += 32;
                                  v1210.val[1] = 0u;
                                  vst2q_s8(v1125, v1210);
                                  v1126 = v1122 + 64;
                                  vst2q_s8(v1126, v1202);
                                  v1127 = v1122 + 96;
                                  vst2q_s8(v1127, v1206);
                                  v1122 += 128;
                                }
                                while (v1122 != v1121);
                              }
                              while (v1121 != &v912[2 * v911])
                              {
                                v1128 = v907->u8[0];
                                v907 = (int8x16_t *)((char *)v907 + 1);
                                *(_WORD *)v1121 = v1128;
                                v1121 += 2;
                              }
                            }
                            else if ((_DWORD)v911 == 1)
                            {
                              *(_WORD *)v912 = v907->i16[0];
                              LODWORD(v911) = 1;
                            }
                            else if ((_DWORD)v911)
                            {
                              memcpy(v912, v907, 2 * v911);
                            }
                          }
                          else
                          {
                            LODWORD(v911) = 0;
                          }
                          v902 += v911;
                        }
                        if (v901 < v741)
                        {
                          v913 = *((_QWORD *)v740 + v901);
                          if (v913)
                          {
                            v914 = *(int8x16_t **)(v913 + 8);
                            v915 = *(unsigned int *)(v913 + 4);
                            v916 = &v900[2 * v902];
                            if ((*(_BYTE *)(v913 + 16) & 4) != 0)
                            {
                              if (v915 >= 0x40)
                              {
                                v917 = &v916[2 * (v915 & 0xFFFFFFC0)];
                                v919 = &v900[2 * v902];
                                do
                                {
                                  v1196.val[0] = *v914;
                                  v920 = v914[1];
                                  v1200.val[0] = v914[2];
                                  v921 = v914[3];
                                  v914 += 4;
                                  v1208.val[1] = 0u;
                                  v1208.val[0] = v921;
                                  v1200.val[1] = 0u;
                                  v1204.val[0] = v920;
                                  v1196.val[1] = 0u;
                                  v922 = v919;
                                  vst2q_s8(v922, v1196);
                                  v922 += 32;
                                  v1204.val[1] = 0u;
                                  vst2q_s8(v922, v1204);
                                  v923 = v919 + 64;
                                  vst2q_s8(v923, v1200);
                                  v924 = v919 + 96;
                                  vst2q_s8(v924, v1208);
                                  v919 += 128;
                                }
                                while (v919 != v917);
                              }
                              else
                              {
                                v917 = &v900[2 * v902];
                              }
                              while (v917 != &v916[2 * v915])
                              {
                                v918 = v914->u8[0];
                                v914 = (int8x16_t *)((char *)v914 + 1);
                                *(_WORD *)v917 = v918;
                                v917 += 2;
                              }
                            }
                            else if ((_DWORD)v915 == 1)
                            {
                              *(_WORD *)v916 = v914->i16[0];
                              LODWORD(v915) = 1;
                            }
                            else if ((_DWORD)v915)
                            {
                              memcpy(v916, v914, 2 * v915);
                            }
                          }
                          else
                          {
                            LODWORD(v915) = 0;
                          }
                          v902 += v915;
                        }
                        ++v901;
                      }
                      while (v901 != v743);
                    }
                    goto LABEL_1380;
                  }
                }
              }
              JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1192);
LABEL_1501:
              v97 = 0;
              goto LABEL_1033;
            }
            v785 = *(unsigned int *)v1184;
            v784 = *((_DWORD *)v1184 + 1);
            v786 = (v784 - v785);
            if (v784 == (_DWORD)v785)
            {
              WTF::StringImpl::s_emptyAtomString += 2;
              v1166 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
              goto LABEL_1190;
            }
            v787 = *v1160;
            if ((*(_DWORD *)(*v1160 + 16) & 4) != 0)
            {
              if (v786 <= 0xC)
              {
                WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v787 + 8) + v785), v786, (uint64_t *)&v1166);
                goto LABEL_1190;
              }
            }
            else if (v786 <= 6)
            {
              WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v787 + 8) + 2 * v785), v786, (uint64_t *)&v1166);
              goto LABEL_1190;
            }
            v957 = (_DWORD *)*v1160;
            if ((*(_DWORD *)(*v1160 + 16) & 3) == 2)
              v957 = *(_DWORD **)(v787 + 24);
            v958 = WTF::fastCompactMalloc((WTF *)0x20);
            v959 = *(_DWORD *)(v787 + 16);
            v960 = *(_QWORD *)(v787 + 8);
            *v957 += 2;
            *(_DWORD *)v958 = 2;
            *(_DWORD *)(v958 + 4) = v786;
            if ((v959 & 4) != 0)
            {
              *(_QWORD *)(v958 + 8) = v960 + v785;
              *(_DWORD *)(v958 + 16) = 6;
            }
            else
            {
              *(_QWORD *)(v958 + 8) = v960 + 2 * v785;
              *(_DWORD *)(v958 + 16) = 2;
            }
            *(_QWORD *)(v958 + 24) = v957;
            v1166 = (WTF::StringImpl *)v958;
LABEL_1190:
            v1191 = v1166;
            v789 = *((unsigned int *)v739 + 2);
            v788 = *((_DWORD *)v739 + 3);
            v790 = (v788 - v789);
            if (v788 == (_DWORD)v789)
            {
              v792 = &WTF::StringImpl::s_emptyAtomString;
              WTF::StringImpl::s_emptyAtomString += 2;
            }
            else
            {
              v791 = *v1160;
              if ((*(_DWORD *)(*v1160 + 16) & 4) != 0)
              {
                if (v790 <= 0xC)
                {
                  WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v791 + 8) + v789), v790, (uint64_t *)&v1166);
LABEL_1194:
                  v792 = (int *)v1166;
                  goto LABEL_1195;
                }
              }
              else if (v790 <= 6)
              {
                WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v791 + 8) + 2 * v789), v790, (uint64_t *)&v1166);
                goto LABEL_1194;
              }
              v961 = (_DWORD *)*v1160;
              if ((*(_DWORD *)(*v1160 + 16) & 3) == 2)
                v961 = *(_DWORD **)(v791 + 24);
              v792 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
              v962 = *(_DWORD *)(v791 + 16);
              v963 = *(_QWORD *)(v791 + 8);
              *v961 += 2;
              *v792 = 2;
              v792[1] = v790;
              if ((v962 & 4) != 0)
              {
                *((_QWORD *)v792 + 1) = v963 + v789;
                v792[4] = 6;
              }
              else
              {
                *((_QWORD *)v792 + 1) = v963 + 2 * v789;
                v792[4] = 2;
              }
              *((_QWORD *)v792 + 3) = v961;
            }
LABEL_1195:
            v1190 = (unint64_t)v792;
            v793 = *(JSC **)(a1 + 56);
            v1193 = (unint64_t)v793;
            if (v1191)
              v794 = *((_DWORD *)v1191 + 1);
            else
              v794 = 0;
            v795 = *(_QWORD *)v740;
            if (*(_QWORD *)v740)
              v796 = *(_DWORD *)(v795 + 4);
            else
              v796 = 0;
            if (v792)
              v797 = v792[1];
            else
              v797 = 0;
            if (v794)
            {
              if (v796)
              {
                if (v797)
                {
                  if (((v797 | v796) & 0x80000000) == 0)
                  {
                    v798 = __OFADD__(v796, v797);
                    if ((v794 & 0x80000000) == 0 && !v798 && !__OFADD__(v794, v796 + v797))
                    {
                      if (v794 + (unint64_t)v796 + v797 + 20 >= 0x40)
                      {
                        v925 = JSC::jsString(v793, (JSC::VM *)&v1191, (const WTF::String *)v36, v37, v38, a6, a7, a8);
                        v932 = (JSC::JSString *)JSC::jsString(v793, v740, v926, v927, v928, v929, v930, v931);
                        v939 = JSC::jsString(v793, (JSC::VM *)&v1190, v933, v934, v935, v936, v937, v938);
                        v97 = JSC::JSRopeString::create(v793, v925, v932, v939, v940, v941, v942, v943);
                        goto LABEL_1217;
                      }
                      WTF::tryMakeString<WTF::String,WTF::String,WTF::String>((uint64_t)&v1191, (uint64_t *)v740, (uint64_t *)&v1190, (int **)&v1166);
                      v805 = v1166;
                      if (v1166)
                      {
                        v1166 = 0;
                        v1162 = v805;
                        v97 = JSC::JSString::create((uint64_t)v793, (JSC::VM *)&v1162, v799, v800, v801, v802, v803, v804);
                        v806 = v1162;
                        v1162 = 0;
                        if (v806)
                        {
                          if (*(_DWORD *)v806 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v806, v290, v36, v37, v38, a6, a7, a8);
                            WTF::fastFree(v1035, v1036, v1037, v1038, v1039, v1040, v1041, v1042);
                          }
                          else
                          {
                            *(_DWORD *)v806 -= 2;
                          }
                        }
                      }
                      else
                      {
                        JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1193);
                        v97 = 0;
                      }
                      v807 = v1166;
                      v1166 = 0;
                      if (v807)
                        goto LABEL_1215;
                      goto LABEL_1217;
                    }
                  }
                  v1034 = (WTF::StringImpl **)&v1193;
LABEL_1475:
                  JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)v1034);
                  v97 = 0;
                  goto LABEL_1217;
                }
                v1166 = v793;
                if (v1191)
                {
                  v1069 = *((unsigned int *)v1191 + 1);
                  if ((_DWORD)v1069)
                  {
                    if (v795)
                    {
                      v1070 = *(unsigned int *)(v795 + 4);
                      if ((_DWORD)v1070)
                      {
                        v1071 = __OFADD__((_DWORD)v1069, (_DWORD)v1070);
                        if (((v1070 | v1069) & 0x80000000) == 0 && !v1071)
                        {
                          if ((unint64_t)(v1069 + v1070 + 20) < 0x30)
                          {
                            v863 = &v1191;
                            v864 = (uint64_t *)v740;
LABEL_1310:
                            WTF::tryMakeString<WTF::String,WTF::String>((uint64_t)v863, v864, (int **)&v1162);
                            v871 = (int *)v1162;
                            if (v1162)
                            {
                              v1162 = 0;
                              var60[0] = v871;
                              v97 = JSC::JSString::create((uint64_t)v793, (JSC::VM *)var60, v865, v866, v867, v868, v869, v870);
                              v872 = (WTF::StringImpl *)var60[0];
                              var60[0] = 0;
                              if (v872)
                              {
                                if (*(_DWORD *)v872 == 2)
                                {
                                  WTF::StringImpl::~StringImpl(v872, v290, v36, v37, v38, a6, a7, a8);
                                  WTF::fastFree(v1043, v1044, v1045, v1046, v1047, v1048, v1049, v1050);
                                }
                                else
                                {
                                  *(_DWORD *)v872 -= 2;
                                }
                              }
                            }
                            else
                            {
                              JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1166);
                              v97 = 0;
                            }
                            v807 = v1162;
                            v1162 = 0;
                            if (v807)
                            {
LABEL_1215:
                              if (*(_DWORD *)v807 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v807, v290, v36, v37, v38, a6, a7, a8);
                                WTF::fastFree(v881, v882, v883, v884, v885, v886, v887, v888);
                              }
                              else
                              {
                                *(_DWORD *)v807 -= 2;
                              }
                            }
LABEL_1217:
                            v808 = (WTF::StringImpl *)v1190;
                            v1190 = 0;
                            if (v808)
                            {
                              if (*(_DWORD *)v808 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v808, v290, v36, v37, v38, a6, a7, a8);
                                WTF::fastFree(v873, v874, v875, v876, v877, v878, v879, v880);
                              }
                              else
                              {
                                *(_DWORD *)v808 -= 2;
                              }
                            }
                            v782 = v1191;
                            v1191 = 0;
                            if (v782)
                              goto LABEL_1176;
                            goto LABEL_1033;
                          }
                          v1088 = JSC::jsString(v793, (JSC::VM *)&v1191, (const WTF::String *)v36, v37, v38, a6, a7, a8);
                          v1008 = (JSC::JSString *)JSC::jsString(v793, v740, v1089, v1090, v1091, v1092, v1093, v1094);
                          v1014 = v793;
                          v1015 = v1088;
LABEL_1455:
                          v97 = JSC::JSRopeString::create(v1014, v1015, v1008, v1009, v1010, v1011, v1012, v1013);
                          goto LABEL_1217;
                        }
LABEL_1516:
                        v1034 = &v1166;
                        goto LABEL_1475;
                      }
                    }
                    goto LABEL_1513;
                  }
                }
LABEL_1514:
                v990 = v793;
                v989 = v740;
                goto LABEL_1448;
              }
              v1166 = v793;
              if (v1191)
              {
                v860 = *((unsigned int *)v1191 + 1);
                if ((_DWORD)v860)
                {
                  if (!v792 || (v861 = v792[1], !(_DWORD)v861))
                  {
LABEL_1513:
                    v989 = (JSC::VM *)&v1191;
                    goto LABEL_1447;
                  }
                  v862 = __OFADD__((_DWORD)v860, (_DWORD)v861);
                  if (((v861 | v860) & 0x80000000) != 0 || v862)
                    goto LABEL_1516;
                  if ((unint64_t)(v860 + v861 + 20) < 0x30)
                  {
                    v863 = &v1191;
                    v864 = (uint64_t *)&v1190;
                    goto LABEL_1310;
                  }
                  v999 = (JSC::VM *)&v1191;
                  v1000 = v793;
                  goto LABEL_1454;
                }
              }
            }
            else
            {
              v1166 = v793;
              if (v795)
              {
                v897 = *(unsigned int *)(v795 + 4);
                if ((_DWORD)v897)
                {
                  if (!v792)
                    goto LABEL_1514;
                  v898 = v792[1];
                  if (!(_DWORD)v898)
                    goto LABEL_1514;
                  v899 = __OFADD__((_DWORD)v897, (_DWORD)v898);
                  if (((v898 | v897) & 0x80000000) != 0 || v899)
                    goto LABEL_1516;
                  if ((unint64_t)(v897 + v898 + 20) < 0x30)
                  {
                    v864 = (uint64_t *)&v1190;
                    v863 = (WTF::StringImpl **)v740;
                    goto LABEL_1310;
                  }
                  v1000 = v793;
                  v999 = v740;
LABEL_1454:
                  v1001 = JSC::jsString(v1000, v999, (const WTF::String *)v36, v37, v38, a6, a7, a8);
                  v1008 = (JSC::JSString *)JSC::jsString(v793, (JSC::VM *)&v1190, v1002, v1003, v1004, v1005, v1006, v1007);
                  v1014 = v793;
                  v1015 = v1001;
                  goto LABEL_1455;
                }
              }
            }
            v989 = (JSC::VM *)&v1190;
LABEL_1447:
            v990 = v793;
LABEL_1448:
            v97 = JSC::jsString(v990, v989, (const WTF::String *)v36, v37, v38, a6, a7, a8);
            goto LABEL_1217;
          }
          v841 = *v1160;
          if (*v1160)
            v842 = *(_DWORD *)(v841 + 4);
          else
            v842 = 0;
          v843 = *((_DWORD *)v1184 + 1) - *(_DWORD *)v1184;
          v844 = *(int *)v1184 > 0 || v843 < v842;
          v97 = (unint64_t)v1156;
          if (!v844)
            goto LABEL_1033;
          if (v843 >= v842)
            v845 = v842;
          else
            v845 = v843;
          if ((_DWORD)v845)
          {
            v846 = *(_DWORD *)v1184 & ~(*(int *)v1184 >> 31);
            if ((*(_DWORD *)(v841 + 16) & 4) != 0)
            {
              if (v845 <= 0xC)
              {
                WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v841 + 8) + v846), v845, (uint64_t *)&v1162);
LABEL_1294:
                v1166 = v1162;
                goto LABEL_1175;
              }
            }
            else if (v845 <= 6)
            {
              WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v841 + 8) + 2 * v846), v845, (uint64_t *)&v1162);
              goto LABEL_1294;
            }
            v983 = (_DWORD *)*v1160;
            if ((*(_DWORD *)(v841 + 16) & 3) == 2)
              v983 = *(_DWORD **)(v841 + 24);
            v984 = WTF::fastCompactMalloc((WTF *)0x20);
            v985 = *(_DWORD *)(v841 + 16);
            v986 = *(_QWORD *)(v841 + 8);
            *v983 += 2;
            *(_DWORD *)v984 = 2;
            *(_DWORD *)(v984 + 4) = v845;
            if ((v985 & 4) != 0)
            {
              *(_QWORD *)(v984 + 8) = v986 + v846;
              *(_DWORD *)(v984 + 16) = 6;
            }
            else
            {
              *(_QWORD *)(v984 + 8) = v986 + 2 * v846;
              *(_DWORD *)(v984 + 16) = 2;
            }
            *(_QWORD *)(v984 + 24) = v983;
            v1162 = (WTF::StringImpl *)v984;
            goto LABEL_1294;
          }
          WTF::StringImpl::s_emptyAtomString += 2;
          v1162 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
          goto LABEL_1294;
        }
        v284 = v1181;
        v285 = HIDWORD(v1182);
        if (v279 < 0x11)
        {
          v1181 = (WTF *)v1183;
          LODWORD(v1182) = 16;
          v286 = v1183;
          goto LABEL_419;
        }
        if (!(v279 >> 29))
        {
          WTF::tryFastMalloc((WTF *)(8 * v279), &__dst);
          v286 = __dst;
          if (__dst)
          {
            LODWORD(v1182) = v1154 / v266;
            v1181 = (WTF *)__dst;
LABEL_419:
            memcpy(v286, v284, 8 * v285);
            if (v1183 != (_QWORD *)v284 && v284)
            {
              if (v1181 == v284)
              {
                v1181 = 0;
                LODWORD(v1182) = 0;
              }
              WTF::fastFree((unint64_t)v284, v287, v288, v289, a5, a6, a7, a8);
            }
            goto LABEL_421;
          }
        }
LABEL_1116:
        JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1189);
        v97 = 0;
        goto LABEL_1034;
      }
      v1134 = v267;
      v1135 = v266;
    }
    else
    {
      v1188 = 0;
      v474 = *((_DWORD *)v1157 + 6);
      v1146 = (JSC::RegExp *)((char *)v1157 + 24);
      v1135 = v474 + 2;
      v1136 = 0;
      v1134 = v474 + 3;
      v1137 = (uint64_t)v10 + 86816;
    }
LABEL_541:
    v372 = 0;
    LOBYTE(__dst) = 0;
    *(_QWORD *)&v1169 = 0x800000000;
    v1170 = 0u;
    v1171 = 0u;
    v1172 = 0u;
    v1173 = 0u;
    *((_QWORD *)&v1169 + 1) = (char *)&v1170 + 8;
    v1174 = 0;
    v373 = (const void **)(a1 + 2200);
    v374 = v1146;
    while (1)
    {
      v375 = *(_QWORD *)(a1 + 56);
      JSC::RegExp::match((uint64_t)v1157, a1, v1160, v372, (uint64_t)v373, a6, a7, a8);
      v382 = v381;
      if (*(_DWORD *)(v375 + 80))
      {
        v433 = *(_DWORD *)(v375 + 80);
        if ((v433 & 0x27) != 0 && (v433 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v375 + 64), 7u, v377, v378, v379, a6, a7, a8);
        if (*(_QWORD *)(v375 + 16))
          break;
      }
      v383 = (int *)*v373;
      if (v382 == -1)
        goto LABEL_638;
      if (*(_DWORD *)(a1 + 2212) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x198BD721CLL);
      }
      v384 = v383[1];
      v385 = v382;
      *(_QWORD *)(a1 + 2152) = v1157;
      *(_QWORD *)(a1 + 2144) = v1156;
      *(_QWORD *)(a1 + 2120) = v382;
      *(_QWORD *)(a1 + 2128) = v384;
      *(_BYTE *)(a1 + 2136) = 0;
      if (*(_DWORD *)(v375 + 760) >= *(unsigned __int8 *)(a1 + 7))
        JSC::Heap::writeBarrierSlowPath(v375 + 192, a1);
LABEL_547:
      v386 = v1189;
      if (*((_DWORD *)v1189 + 20))
      {
        v434 = *((_DWORD *)v1189 + 20);
        if ((v434 & 0x27) != 0 && (v434 & 0x20) == 0)
        {
          v1086 = v1189;
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1189 + 64), 7u, v377, v378, v379, a6, a7, a8);
          v386 = v1086;
        }
        if (*((_QWORD *)v386 + 2))
          goto LABEL_1315;
      }
      if (v385 == -1)
        goto LABEL_1251;
      if (*(_DWORD *)v374 != -1)
      {
        v388 = 0;
        while (1)
        {
          v389 = v383[(2 * v388)];
          if ((v389 & 0x80000000) != 0)
          {
            v398 = 10;
            goto LABEL_573;
          }
          v390 = v383[(2 * (_DWORD)v388) | 1];
          v391 = *(_QWORD *)(a1 + 56);
          v392 = v390 - v389;
          if (v390 == v389)
          {
            v398 = *(_QWORD *)(v391 + 41968);
            goto LABEL_572;
          }
          v393 = *(_QWORD *)v1148;
          if (v389)
            break;
          v406 = (_DWORD *)(v393 + 4);
          if ((v393 & 1) != 0)
            v406 = (_DWORD *)((char *)v1156 + 16);
          v398 = (unint64_t)v1156;
          if (*v406 != v392)
            break;
LABEL_572:
          if (*((_DWORD *)v386 + 20))
          {
            v435 = *((_DWORD *)v386 + 20);
            if ((v435 & 0x27) != 0 && (v435 & 0x20) == 0)
            {
              v1087 = v386;
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v386 + 64), 7u, v377, v378, v379, a6, a7, a8);
              v386 = v1087;
            }
            if (*((_QWORD *)v386 + 2))
              goto LABEL_1315;
          }
LABEL_573:
          v399 = v1169;
          if ((_DWORD)v1169 != DWORD1(v1169)
            && (*((__int128 **)&v1169 + 1) != (__int128 *)((char *)&v1170 + 8)
              ? (v400 = *((_QWORD *)&v1169 + 1) == 0)
              : (v400 = 1),
                v400))
          {
            *(_QWORD *)(*((_QWORD *)&v1169 + 1) + 8 * v1169) = v398;
            LODWORD(v1169) = v399 + 1;
          }
          else
          {
            v403 = v386;
            v404 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v1169, v398, v377, v378, v379, a6, a7, a8);
            v386 = v403;
            if (v404 == 1)
              LOBYTE(__dst) = 1;
          }
          ++v388;
          v373 = (const void **)(a1 + 2200);
          if (v388 >= (*(_DWORD *)v374 + 1))
            goto LABEL_550;
        }
        if ((v393 & 2) != 0)
        {
          v394 = *(_QWORD *)((_BYTE *)v1156 + 20) & 0xFFFFFFFFFLL;
          v389 += *(_DWORD *)((char *)v1156 + 26);
          goto LABEL_565;
        }
        if ((v393 & 1) != 0)
        {
          v436 = v386;
          v394 = (uint64_t)v1156;
          JSC::JSRopeString::resolveRope((unint64_t)v1156, (JSC::JSGlobalObject *)a1, v377, v378, v380, v379, a6, a7, a8);
          if (!*(_DWORD *)(v391 + 80))
          {
            v386 = v436;
            goto LABEL_565;
          }
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v391, v376, v377, v378, v379, a6, a7, a8);
          v386 = v436;
          if (!hasExceptionsAfterHandlingTraps)
            goto LABEL_565;
          v398 = 0;
          goto LABEL_571;
        }
        v394 = (uint64_t)v1156;
LABEL_565:
        if (!v389)
        {
          v405 = *(_QWORD *)(v394 + 8);
          if (v405)
            LODWORD(v405) = *(_DWORD *)(v405 + 4);
          if ((_DWORD)v405 == v392)
          {
            v398 = v394;
            goto LABEL_571;
          }
        }
        v395 = (unint64_t *)(v391 + 39696);
        if (v392 == 1)
        {
          v396 = *(WTF::StringImpl **)(v394 + 8);
          if (!v396 || *((_DWORD *)v396 + 1) <= v389)
          {
            v397 = 0;
            goto LABEL_570;
          }
          v1024 = v386;
          v1025 = WTF::StringImpl::at(v396, v389);
          v395 = (unint64_t *)(v391 + 39696);
          v386 = v1024;
          if (v1025 <= 0xFF)
          {
            v397 = v1025;
LABEL_570:
            v398 = *(_QWORD *)(v391 + 8 * v397 + 42216);
LABEL_571:
            v374 = v1146;
            goto LABEL_572;
          }
LABEL_583:
          v401 = *(_QWORD *)(v394 + 8);
          if (v401)
          {
            if ((*(_BYTE *)(v401 + 16) & 4) != 0)
              v402 = 7;
            else
              v402 = 3;
          }
          else
          {
            v402 = 7;
          }
          v398 = *(_QWORD *)(v391 + 39432);
          if (v398 >= *(_QWORD *)(v391 + 39440))
          {
            v398 = *(_QWORD *)(v391 + 39448);
            if ((v398 & 1) == 0)
            {
              v437 = *(_QWORD *)(v398 + 8) ^ *(_QWORD *)(v391 + 39456);
              *(_QWORD *)(v391 + 39440) = v398 + HIDWORD(v437);
              *(_QWORD *)(v391 + 39448) = v398 + (int)v437;
              goto LABEL_588;
            }
            v1140 = v386;
            v855 = v395;
            JSC::sanitizeStackForVM((JSC *)v391, (JSC::VM *)v376, v377, v378, v379, a6, a7, a8);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v391 + 39408, v391 + 192, 32, 0, 0, v856, v857, v858);
            v395 = v855;
            v386 = v1140;
            v398 = SlowCase;
          }
          else
          {
LABEL_588:
            *(_QWORD *)(v391 + 39432) = v398 + 32;
          }
          *(_DWORD *)v398 = v395[227] >> 4;
          v380 = (int8x16_t)0x1080200uLL;
          *(_DWORD *)(v398 + 4) = 17302016;
          *(_QWORD *)(v398 + 8) = v402;
          *(_DWORD *)(v398 + 16) = v392;
          *(_DWORD *)(v398 + 20) = v394;
          *(_WORD *)(v398 + 24) = WORD2(v394);
          *(_WORD *)(v398 + 26) = v389;
          *(_DWORD *)(v398 + 28) = HIWORD(v389);
          if (*(_BYTE *)(v391 + 755))
            __dmb(0xAu);
          goto LABEL_571;
        }
        if (v392 != 2)
          goto LABEL_583;
        v407 = *(WTF::StringImpl **)(v394 + 8);
        if (v407)
        {
          v408 = *((_DWORD *)v407 + 1);
          if (v408 > v389)
          {
            v1067 = v386;
            v409 = WTF::StringImpl::at(v407, v389);
            v407 = *(WTF::StringImpl **)(v394 + 8);
            if (v407)
            {
              v408 = *((_DWORD *)v407 + 1);
              v386 = v1067;
              v395 = (unint64_t *)(v391 + 39696);
              goto LABEL_607;
            }
            v386 = v1067;
            v395 = (unint64_t *)(v391 + 39696);
          }
          else
          {
            v409 = 0;
LABEL_607:
            v376 = v389 + 1;
            if (v408 > v376)
            {
              v1141 = v386;
              v1068 = v395;
              LODWORD(v407) = WTF::StringImpl::at(v407, v376);
              v395 = v1068;
              v386 = v1141;
            }
            else
            {
              LODWORD(v407) = 0;
            }
          }
        }
        else
        {
          v409 = 0;
        }
        if ((v407 | v409) <= 0x7F)
        {
          LOBYTE(v1166) = v409;
          BYTE1(v1166) = (_BYTE)v407;
          v1184 = (WTF *)&v1166;
          v1185 = 2;
          v410 = ((v409 - 1640531527) << 16) ^ ((_DWORD)v407 << 11) ^ (v409 - 1640531527);
          v411 = (v410 + (v410 >> 11)) ^ (8 * (v410 + (v410 >> 11)));
          v412 = (v411 + (v411 >> 5)) ^ (4 * (v411 + (v411 >> 5)));
          v413 = ((v412 + (v412 >> 15)) ^ ((v412 + (v412 >> 15)) << 10)) & 0xFFFFFF;
          if (v413)
            v414 = v413;
          else
            v414 = 0x800000;
          v1186[0] = v414;
          v415 = v391 + 81168;
          v416 = v414 & 0x1FF;
          v417 = *(_QWORD *)(v391 + 81168 + 8 * v416);
          if (!v417)
            goto LABEL_622;
          v418 = *(_QWORD *)(v417 + 8);
          v419 = (v418 & 1) != 0 ? 0 : (WTF::StringImpl *)v418;
          v420 = *((_DWORD *)v419 + 4);
          if (v420 < 0x100)
          {
            v1139 = v386;
            v432 = v395;
            v421 = WTF::StringImpl::hashSlowCase(v419);
            v395 = v432;
            v386 = v1139;
          }
          else
          {
            v421 = v420 >> 8;
          }
          if (v421 == v414
            && (v422 = (uint64_t)v419,
                v423 = v386,
                v424 = v395,
                v425 = WTF::equalInternal<unsigned char>(v422, (unint64_t)&v1166, 2),
                v395 = v424,
                v386 = v423,
                v425))
          {
            v398 = *(_QWORD *)(v415 + 8 * v416);
          }
          else
          {
LABEL_622:
            v1138 = v386;
            v426 = v395;
            WTF::AtomStringImpl::add(&v1184, v378, v379, a6, a7, a8, &v1181);
            v427 = v1181;
            v428 = *((_DWORD *)v1181 + 4);
            v429 = v1181;
            if ((v428 & 3) == 2)
            {
              v429 = v1181;
              do
              {
                v429 = (WTF *)*((_QWORD *)v429 + 3);
                v428 = *((_DWORD *)v429 + 4);
              }
              while ((v428 & 3) == 2);
            }
            v430 = v426;
            if ((v428 & 8) != 0)
            {
              v378 = 0;
            }
            else
            {
              *((_DWORD *)v429 + 4) = v428 | 8;
              v378 = (unint64_t)*((unsigned int *)v429 + 1) << ((v428 & 4) == 0);
            }
            v386 = v1138;
            v431 = v391 + 192;
            v398 = *v426;
            if (*v426 >= v426[1])
            {
              v1133 = v378;
              v398 = v426[2];
              if ((v398 & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v391, (JSC::VM *)v376, v377, v378, v379, a6, a7, a8);
                v398 = JSC::LocalAllocator::allocateSlowCase(v391 + 39672, v391 + 192, 16, 0, 0, v964, v965, v966);
                v378 = v1133;
                v431 = v391 + 192;
                v386 = v1138;
                v430 = v426;
              }
              else
              {
                v430 = v426;
                v450 = *(_QWORD *)(v398 + 8) ^ v426[3];
                v426[1] = v398 + HIDWORD(v450);
                v426[2] = v398 + (int)v450;
                *v426 = v398 + 16;
                v386 = v1138;
                v431 = v391 + 192;
              }
            }
            else
            {
              *v426 = v398 + 16;
            }
            *(_DWORD *)v398 = v430[227] >> 4;
            v380 = (int8x16_t)0x1080200uLL;
            *(_DWORD *)(v398 + 4) = 17302016;
            *(_QWORD *)(v398 + 8) = v427;
            if (*(_BYTE *)(v391 + 755))
              __dmb(0xAu);
            if (v378 >= 0x101)
            {
              JSC::Heap::reportExtraMemoryAllocatedSlowCase(v431, 0, v398, v378, v379, a6, a7, a8);
              v386 = v1138;
            }
            *(_QWORD *)(v415 + 8 * v416) = v398;
          }
          goto LABEL_571;
        }
        goto LABEL_583;
      }
LABEL_550:
      if (HIDWORD(v385))
        v376 = COERCE__INT64((double)v385) + 0x2000000000000;
      else
        v376 = v385 | 0xFFFE000000000000;
      v387 = v1169;
      if ((_DWORD)v1169 == DWORD1(v1169)
        || *((__int128 **)&v1169 + 1) != (__int128 *)((char *)&v1170 + 8) && *((_QWORD *)&v1169 + 1))
      {
        if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1169, v376, v377, v378, v379, a6, a7, a8) == 1)
          LOBYTE(__dst) = 1;
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)&v1169 + 1) + 8 * v1169) = v376;
        LODWORD(v1169) = v387 + 1;
      }
      v372 = v384;
      if (v385 == v384)
      {
        v372 = v384 + 1;
        if ((int)v384 + 1 > v1136
          || (v820 = (WTF::StringImpl *)*v1160) != 0
          && *((_DWORD *)v820 + 1) > v384
          && (WTF::StringImpl::at(v820, v384) & 0xFC00) == 0xD800
          && (v821 = (WTF::StringImpl *)*v1160) != 0
          && *((_DWORD *)v821 + 1) > v372
          && (WTF::StringImpl::at(v821, (int)v384 + 1) & 0xFC00) == 0xDC00
          && (v372 = v384 + 2, (int)v384 + 2 > v1136))
        {
LABEL_1251:
          v377 = v1169;
          v97 = (unint64_t)v1156;
          if ((_DWORD)v1169)
          {
            v822 = JSC::JSImmutableButterfly::tryCreateFromArgList((uint64_t)v1151, *((JSC::VM **)&v1169 + 1), v1169, v378, v379, a6, a7, a8);
            v266 = v1135;
            if (v822)
            {
              v278 = (JSC::RegExp *)v822;
              JSC::StringReplaceCache::set(v1137, (WTF::StringImpl *)*v1160, (uint64_t)v1157, v822, *(_QWORD *)(a1 + 2120), *(_QWORD *)(a1 + 2128), v373, v823);
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1169, v824, v825, v826, v827, v828, v829, v830);
              v267 = v1134;
              goto LABEL_410;
            }
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1189);
LABEL_1315:
            v97 = 0;
          }
          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1169, (void *)v376, v377, v378, v379, a6, a7, a8);
          goto LABEL_1045;
        }
      }
    }
    v383 = 0;
LABEL_638:
    v384 = 0;
    v385 = -1;
    goto LABEL_547;
  }
  if (*(_QWORD *)v11 && *(_DWORD *)(*(_QWORD *)v11 + 4))
  {
    v98 = 0;
    goto LABEL_137;
  }
  v1193 = 0;
  var60[0] = (int *)v10;
  v1184 = (WTF *)v1186;
  v1185 = 16;
  v16 = *v1160;
  if (*v1160)
    LODWORD(v16) = *(_DWORD *)(v16 + 4);
  v17 = 0;
  LODWORD(v1192) = v16;
  while (1)
  {
    v18 = *(_QWORD *)(a1 + 56);
    v1162 = (WTF::StringImpl *)a1;
    v19 = *v1160;
    if (*v1160)
    {
      v20 = *(_DWORD *)(v19 + 16);
      v21 = (v20 & 4) == 0;
      v22 = *(void **)(v19 + 8);
      LODWORD(v19) = *(_DWORD *)(v19 + 4);
      v23 = (v20 >> 2) & 1;
    }
    else
    {
      v21 = 0;
      v22 = 0;
      LOBYTE(v23) = 1;
    }
    v24 = (JSC::RegExp **)(v18 + 90552);
    v25 = *((unsigned __int8 *)v1157 + 16);
    if (v25 == 1)
    {
      v26 = *((_QWORD *)v1157 + 5);
      if (v21)
      {
        v759 = *(_QWORD *)(v26 + 72);
        if (v759 && *(_DWORD *)(v759 + 4))
        {
LABEL_27:
          v1181 = (WTF *)&v1162;
          v1182 = v18;
          v28 = v1157;
          v1183[0] = v1157;
          goto LABEL_28;
        }
      }
      else
      {
        v27 = *(_QWORD *)(v26 + 56);
        if (v27 && *(_DWORD *)(v27 + 4))
          goto LABEL_27;
      }
    }
    else if (v25 == 2 || v25 == 0)
    {
      goto LABEL_666;
    }
    __dst = v22;
    LODWORD(v1169) = v19;
    BYTE4(v1169) = v23;
    BYTE8(v1169) = 1;
    JSC::RegExp::compileMatchOnly((uint64_t)v1157, v18, v21, (__int128 *)&__dst);
    v25 = *((unsigned __int8 *)v1157 + 16);
LABEL_666:
    v1181 = (WTF *)&v1162;
    v1182 = v18;
    v28 = v1157;
    v1183[0] = v1157;
    if (v25 != 1)
    {
      if (!v25)
        goto LABEL_1407;
LABEL_685:
      __dst = (char *)&v1169 + 8;
      *(_QWORD *)&v1169 = 32;
      v441 = (_DWORD *)*((_QWORD *)v1157 + 6);
      if (v441 && v441[5])
        v442 = *v441 + 2 * *((_DWORD *)v1157 + 6);
      else
        v442 = 2 * *((_DWORD *)v1157 + 6);
      v443 = v442 + 2;
      v444 = (char *)&v1169 + 8;
      if ((v442 + 2) >= 0x21)
      {
        WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, v443);
        v444 = (char *)__dst;
      }
      DWORD1(v1169) = v443;
      *v24 = v1157;
      v445 = *v1160;
      if (*v1160)
      {
        v446 = *(_QWORD *)(v445 + 8);
        v447 = *(unsigned int *)(v445 + 4) | ((unint64_t)((*(_DWORD *)(v445 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v446 = 0;
        v447 = 0x100000000;
      }
      v448 = JSC::Yarr::interpret(*((_QWORD *)v1157 + 4), v446, v447, v17, (uint64_t)v444, a6, a7, a8);
      *v24 = 0;
      if ((v448 & 0x80000000) != 0)
      {
        v40 = 0;
        v39 = -1;
      }
      else
      {
        v39 = v448;
        v40 = (WTF::StringImpl *)*((unsigned int *)v444 + 1);
      }
      v449 = __dst;
      if ((char *)&v1169 + 8 != __dst && __dst)
      {
        __dst = 0;
        LODWORD(v1169) = 0;
        WTF::fastFree((unint64_t)v449, v35, v36, v37, v38, a6, a7, a8);
      }
      goto LABEL_37;
    }
    v26 = *((_QWORD *)v1157 + 5);
LABEL_28:
    v29 = *(unsigned __int8 *)(v26 + 104);
    *(_QWORD *)&v1170 = 0;
    v30 = *(_QWORD *)(v18 + 8);
    __dst = (void *)v18;
    v1169 = v30;
    *v24 = v28;
    if (!v29)
      goto LABEL_29;
    v212 = (unsigned __int8 *)(v18 + 93049);
    if (__ldaxr((unsigned __int8 *)(v18 + 93049)))
    {
      __clrex();
LABEL_298:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v212);
      goto LABEL_299;
    }
    if (__stxr(1u, v212))
      goto LABEL_298;
LABEL_299:
    v214 = *(void **)(v18 + 93056);
    if (!v214)
    {
      v214 = (void *)WTF::fastMalloc((WTF *)0x2000);
      bzero(v214, 0x2000uLL);
      v896 = *(_QWORD *)(v18 + 93056);
      *(_QWORD *)(v18 + 93056) = v214;
      if (v896)
      {
        WTF::fastFree(v896, v889, v890, v891, v892, v893, v894, v895);
        v214 = *(void **)(v18 + 93056);
      }
    }
    *((_QWORD *)&v1169 + 1) = v214;
    LODWORD(v1170) = 0x2000;
LABEL_29:
    v31 = *v1160;
    if (!*v1160)
    {
      v32 = 0;
      v33 = 0;
      goto LABEL_32;
    }
    if ((*(_BYTE *)(v31 + 16) & 4) != 0)
    {
      v32 = *(_QWORD *)(v31 + 8);
      v33 = *(unsigned int *)(v31 + 4);
LABEL_32:
      v34 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, void **))(*((_QWORD *)v1157 + 5) + 48))(v32, v17, v33, 0, &__dst);
      goto LABEL_33;
    }
    v34 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void **))(*((_QWORD *)v1157 + 5) + 64))(*(_QWORD *)(v31 + 8), v17, *(unsigned int *)(v31 + 4), 0, &__dst);
LABEL_33:
    v39 = v34;
    v40 = (WTF::StringImpl *)v35;
    if (!*((_QWORD *)&v1169 + 1))
      goto LABEL_34;
    v215 = (unsigned __int8 *)__dst + 93049;
    v216 = __ldxr((unsigned __int8 *)__dst + 93049);
    if (v216 != 1)
    {
      __clrex();
LABEL_308:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v215, 0, v36, v37, v38, a6, a7, a8);
      goto LABEL_34;
    }
    if (__stlxr(0, v215))
      goto LABEL_308;
LABEL_34:
    if (!DWORD1(v1170))
      *((_QWORD *)__dst + 11319) = 0;
    if (v39 == -2)
    {
      JSC::RegExp::byteCodeCompileIfNecessary(v1157, (JSC::VM *)v18);
      if (!*((_BYTE *)v1157 + 16))
      {
LABEL_1407:
        v39 = JSC::RegExp::matchInline<(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int)::{lambda(void)#1}::operator()((JSC::JSGlobalObject ***)&v1181);
        v40 = (WTF::StringImpl *)v35;
        goto LABEL_37;
      }
      goto LABEL_685;
    }
    if (!*(_DWORD *)(v18 + 80))
      goto LABEL_1611;
LABEL_37:
    v344 = *(_DWORD *)(v18 + 80);
    if ((v344 & 0x27) != 0 && (v344 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v18 + 64), 7u, v36, v37, v38, a6, a7, a8);
    if (*(_QWORD *)(v18 + 16))
    {
      v40 = 0;
      v39 = -1;
    }
    else
    {
LABEL_1611:
      if (v39 != -1)
      {
        *(_QWORD *)(a1 + 2152) = v1157;
        *(_QWORD *)(a1 + 2144) = v1156;
        *(_QWORD *)(a1 + 2120) = v39;
        *(_QWORD *)(a1 + 2128) = v40;
        *(_BYTE *)(a1 + 2136) = 0;
        if (*(_DWORD *)(v18 + 760) >= *(unsigned __int8 *)(a1 + 7))
          JSC::Heap::writeBarrierSlowPath(v18 + 192, a1);
      }
    }
    v1166 = (WTF::StringImpl *)v39;
    v1167 = v40;
    v41 = var60[0];
    if (var60[0][20])
    {
      v345 = var60[0][20];
      if ((v345 & 0x27) != 0 && (v345 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(var60[0] + 16), 7u, v36, v37, v38, a6, a7, a8);
      if (*((_QWORD *)v41 + 2))
        goto LABEL_525;
      v39 = (unint64_t)v1166;
    }
    v42 = v1193;
    if (v39 == -1)
      break;
    if (v1193 < v39)
    {
      v43 = HIDWORD(v1185);
      if (HIDWORD(v1185) == (_DWORD)v1185)
      {
        if (!WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1184, (int *)&v1193, (int *)&v1166, v37, v38, a6, a7, a8))
        {
          v348 = JSC::createOutOfMemoryError(a1, (JSC::JSGlobalObject *)v35);
          v355 = (JSC::Exception *)v348;
          if ((v348 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v348 & 0xFFFFFFFE) + 0x4C)))
          {
            v355 = (JSC::Exception *)JSC::Exception::create((uint64_t)v41, (JSC::VM *)v348, 0, v349, v350, v351, v352, v353);
          }
          JSC::VM::throwException((JSC::VM *)v41, (JSC::JSGlobalObject *)a1, v355, v354, v349, v350, v351, v352, v353);
          goto LABEL_525;
        }
        v39 = (unint64_t)v1166;
      }
      else
      {
        v44 = (_DWORD *)((char *)v1184 + 8 * HIDWORD(v1185));
        *v44 = v1193;
        v44[1] = v39;
        if (v42 == (_DWORD)v39)
          *(_QWORD *)v44 = 0;
        HIDWORD(v1185) = v43 + 1;
      }
    }
    v17 = v1167;
    v1193 = (unint64_t)v1167;
    if ((WTF::StringImpl *)v39 == v1167)
    {
      v17 = (_DWORD)v1167 + 1;
      if ((int)v1167 + 1 > v1192)
        goto LABEL_208;
    }
  }
  v39 = v1193;
LABEL_208:
  v97 = (unint64_t)v1156;
  if (!v39)
  {
LABEL_209:
    v147 = v1184;
    if (v1186 != (_DWORD *)v1184 && v1184 != 0)
    {
      v1184 = 0;
      LODWORD(v1185) = 0;
      WTF::fastFree((unint64_t)v147, v35, v36, v37, v38, a6, a7, a8);
    }
    return v97;
  }
  v149 = (int)v1192;
  v150 = HIDWORD(v1185);
  if (v1192 > v39)
  {
    if (HIDWORD(v1185) != (_DWORD)v1185)
    {
      v169 = (_DWORD *)((char *)v1184 + 8 * HIDWORD(v1185));
      v150 = HIDWORD(v1185) + 1;
      *v169 = v39;
      v169[1] = v149;
      HIDWORD(v1185) = v150;
      goto LABEL_216;
    }
    if (WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int &>((uint64_t)&v1184, (int *)&v1193, (int *)&v1192, v37, v38, a6, a7, a8))
    {
      v150 = HIDWORD(v1185);
      goto LABEL_216;
    }
    v473 = (WTF **)var60;
    goto LABEL_729;
  }
LABEL_216:
  v151 = v1184;
  v152 = *(_QWORD *)(a1 + 56);
  v1181 = (WTF *)v152;
  if (v150 == 1)
  {
    v153 = *v1160;
    if (*v1160)
      v154 = *(_DWORD *)(v153 + 4);
    else
      v154 = 0;
    v155 = *((_DWORD *)v1184 + 1) - *(_DWORD *)v1184;
    if (*(int *)v1184 <= 0)
    {
      v97 = (unint64_t)v1156;
      if (v155 >= v154)
        goto LABEL_209;
    }
    if (v155 >= v154)
      v156 = v154;
    else
      v156 = v155;
    if (!(_DWORD)v156)
    {
      v159 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      goto LABEL_306;
    }
    v157 = *(_DWORD *)v1184 & ~(*(int *)v1184 >> 31);
    if ((*(_DWORD *)(v153 + 16) & 4) != 0)
    {
      if (v156 <= 0xC)
      {
        v158 = (_BYTE *)(*(_QWORD *)(v153 + 8) + v157);
        v159 = (int *)WTF::fastCompactMalloc((WTF *)(v156 + 20));
        v160 = v159 + 5;
        *v159 = 2;
        v159[1] = v156;
        *((_QWORD *)v159 + 1) = v159 + 5;
        v159[4] = 4;
        if ((_DWORD)v156 == 1)
          *v160 = *v158;
        else
          memcpy(v160, v158, v156);
        goto LABEL_306;
      }
    }
    else if (v156 <= 6)
    {
      WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v153 + 8) + 2 * v157), v156, (uint64_t *)&v1166);
      v159 = (int *)v1166;
      goto LABEL_306;
    }
    v364 = (_DWORD *)*v1160;
    if ((*(_DWORD *)(v153 + 16) & 3) == 2)
      v364 = *(_DWORD **)(v153 + 24);
    v365 = WTF::fastCompactMalloc((WTF *)0x20);
    v159 = (int *)v365;
    v366 = *(_DWORD *)(v153 + 16);
    v367 = *(_QWORD *)(v153 + 8);
    *v364 += 2;
    *(_DWORD *)v365 = 2;
    *(_DWORD *)(v365 + 4) = v156;
    if ((v366 & 4) != 0)
    {
      *(_QWORD *)(v365 + 8) = v367 + v157;
      *(_DWORD *)(v365 + 16) = 6;
    }
    else
    {
      *(_QWORD *)(v365 + 8) = v367 + 2 * v157;
      *(_DWORD *)(v365 + 16) = 2;
    }
    *(_QWORD *)(v365 + 24) = v364;
LABEL_306:
    __dst = v159;
LABEL_709:
    v97 = JSC::jsString(v152, (JSC::VM *)&__dst, v36, v37, v38, a6, a7, a8);
    v459 = (WTF::StringImpl *)__dst;
    __dst = 0;
    if (v459)
    {
      if (*(_DWORD *)v459 == 2)
      {
        WTF::StringImpl::~StringImpl(v459, (WTF::AtomStringImpl *)v35, v36, v37, v38, a6, a7, a8);
        WTF::fastFree(v460, v461, v462, v463, v464, v465, v466, v467);
      }
      else
      {
        *(_DWORD *)v459 -= 2;
      }
    }
    goto LABEL_209;
  }
  if (!v150)
    goto LABEL_367;
  LODWORD(v173) = 0;
  v174 = 8 * v150;
  v175 = (_DWORD *)((char *)v1184 + 4);
  v176 = v174;
  do
  {
    v173 = (*v175 + v173 - *(v175 - 1));
    v175 += 2;
    v176 -= 8;
  }
  while (v176);
  if (!(_DWORD)v173)
  {
LABEL_367:
    v97 = *(_QWORD *)(v152 + 41968);
    goto LABEL_209;
  }
  v177 = *v1160;
  if (!*v1160)
  {
    v178 = 0;
    v179 = 0;
    goto LABEL_250;
  }
  v178 = *(_QWORD *)(v177 + 8);
  v179 = *(unsigned int *)(v177 + 4);
  if ((*(_BYTE *)(v177 + 16) & 4) != 0)
  {
LABEL_250:
    if ((v173 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v173 + 20), &__dst);
      v180 = __dst;
      if (__dst)
      {
        v181 = 0;
        *(_DWORD *)__dst = 2;
        v180[1] = v173;
        *((_QWORD *)v180 + 1) = v180 + 5;
        v180[4] = 4;
        while (1)
        {
          v182 = *(_QWORD *)v151;
          if (v179 < (int)*(_QWORD *)v151)
            goto LABEL_1379;
          v183 = (uint64_t)(0xFFFFFFFF00000001 * v182) >> 32;
          v36 = v179 - (int)v182;
          if (v183 != -1)
          {
            v184 = v36 >= v183;
            v36 = (uint64_t)(0xFFFFFFFF00000001 * v182) >> 32;
            if (!v184)
              goto LABEL_1379;
          }
          v185 = (char *)v180 + v181 + 20;
          v186 = (_BYTE *)(v178 + (int)v182);
          if (v36 == 1)
          {
            *v185 = *v186;
          }
          else if (v36)
          {
            memcpy(v185, v186, v36);
          }
          v181 += v183;
          v151 = (WTF *)((char *)v151 + 8);
          v174 -= 8;
          if (!v174)
            goto LABEL_708;
        }
      }
    }
LABEL_1451:
    v473 = &v1181;
LABEL_729:
    JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)v473);
LABEL_525:
    v97 = 0;
    goto LABEL_209;
  }
  if (v173 > 0x7FFFFFEF)
    goto LABEL_1451;
  WTF::tryFastCompactMalloc((WTF *)(2 * v173 + 20), &__dst);
  v180 = __dst;
  if (!__dst)
    goto LABEL_1451;
  v451 = 0;
  *(_DWORD *)__dst = 2;
  v180[1] = v173;
  *((_QWORD *)v180 + 1) = v180 + 5;
  v180[4] = 0;
  v452 = (int *)((char *)v151 + 4);
  while (1)
  {
    v453 = *(v452 - 1);
    v454 = v179 - v453;
    if (v179 < v453)
      break;
    v455 = *v452;
    v456 = v455 - v453;
    if ((_DWORD)v455 - (_DWORD)v453 != -1)
    {
      v184 = v454 >= v456;
      v454 = v455 - v453;
      if (!v184)
        break;
    }
    v457 = (_WORD *)v180 + v451 + 10;
    v458 = (_WORD *)(v178 + 2 * v453);
    if (v454 == 1)
    {
      *v457 = *v458;
    }
    else if (v454)
    {
      memcpy(v457, v458, 2 * v454);
    }
    v451 += v456;
    v452 += 2;
    v174 -= 8;
    if (!v174)
    {
LABEL_708:
      __dst = v180;
      goto LABEL_709;
    }
  }
LABEL_1379:
  __break(1u);
LABEL_1380:
  v1166 = (WTF::StringImpl *)v152;
LABEL_1175:
  v97 = JSC::jsString((uint64_t)v1157, (JSC::VM *)&v1166, v36, v37, v38, a6, a7, a8);
  v782 = v1166;
  v1166 = 0;
  if (v782)
  {
LABEL_1176:
    if (*(_DWORD *)v782 == 2)
    {
      WTF::StringImpl::~StringImpl(v782, v290, v36, v37, v38, a6, a7, a8);
      WTF::fastFree(v847, v848, v849, v850, v851, v852, v853, v854);
    }
    else
    {
      *(_DWORD *)v782 -= 2;
    }
  }
LABEL_1033:
  JSC::CachedCall::~CachedCall((JSC::CachedCall *)&__dst, v290, v36, v37, v38, a6, a7, a8);
  v281 = v1143;
  v280 = (WTF *)v1144;
LABEL_1034:
  if (HIDWORD(v1182))
  {
    v724 = v1181;
    v725 = 8 * HIDWORD(v1182);
    do
    {
      v726 = *(WTF::StringImpl **)v724;
      *(_QWORD *)v724 = 0;
      if (v726)
      {
        if (*(_DWORD *)v726 == 2)
        {
          WTF::StringImpl::~StringImpl(v726, v712, v713, v714, v715, v716, v717, v718);
          WTF::fastFree(v727, v728, v729, v730, v731, v732, v733, v734);
        }
        else
        {
          *(_DWORD *)v726 -= 2;
        }
      }
      v724 = (WTF *)((char *)v724 + 8);
      v725 -= 8;
    }
    while (v725);
  }
  v719 = v1181;
  if (v281 != v1181 && v1181 != 0)
  {
    v1181 = 0;
    LODWORD(v1182) = 0;
    WTF::fastFree((unint64_t)v719, v712, v713, v714, v715, v716, v717, v718);
  }
  v721 = v1184;
  if (v280 != v1184 && v1184 != 0)
  {
    v1184 = 0;
    LODWORD(v1185) = 0;
    WTF::fastFree((unint64_t)v721, v712, v713, v714, v715, v716, v717, v718);
  }
  do
LABEL_1045:
    v723 = __ldaxr((unsigned int *)&g_superSamplerCount);
  while (__stlxr(v723 - 1, (unsigned int *)&g_superSamplerCount));
  return v97;
}

JSC::Exception *JSC::stringProtoFuncRepeatCharacter(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  JSC *v10;
  unint64_t v11;
  double v12;
  unint64_t OutOfMemoryError;
  double v14;
  uint64_t v15;
  int *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  JSC::VM *v32;
  WTF::StringImpl *v33;
  char *v34;
  WTF::AtomStringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  JSC::Exception *v61;
  WTF::StringImpl *v62;

  v11 = *((_QWORD *)a2 + 7);
  if (!(v11 >> 49))
  {
    a3 = (JSC::CallFrame *)"JSC::EncodedJSValue JSC::stringProtoFuncRepeatCharacter(JSGlobalObject *, CallFrame *)";
    a4 = 341;
    __break(0xC471u);
    goto LABEL_49;
  }
  v10 = this;
  if (v11 <= 0xFFFDFFFFFFFFFFFFLL)
    *(_QWORD *)&v12 = v11 - 0x2000000000000;
  else
    v12 = (double)(int)v11;
  a9.i64[0] = 0x41DFFFFFFFC00000;
  if (v12 > 2147483650.0)
  {
    v9 = *((_QWORD *)this + 7);
    OutOfMemoryError = JSC::createOutOfMemoryError((unint64_t)this, a2);
    a3 = (JSC::CallFrame *)OutOfMemoryError;
    if ((OutOfMemoryError & 0xFFFE000000000002) == 0
      && &JSC::Exception::s_info == (char **)(16
                                            * *(unsigned int *)(16 * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE) + 0x4C)))
    {
      return JSC::VM::throwException((JSC::VM *)v9, v10, a3, v14, a4, a5, a6, a7, a8);
    }
    goto LABEL_50;
  }
  v9 = *((_QWORD *)a2 + 6);
  v16 = *(int **)(v9 + 8);
  if ((v16 & 1) != 0)
  {
    if ((v16 & 2) != 0)
    {
      v21 = *(_QWORD *)((*(_QWORD *)(v9 + 20) & 0xFFFFFFFFFLL) + 8);
      if (!v21)
        goto LABEL_49;
      v22 = *(unsigned int *)(v21 + 4);
      v23 = *(_QWORD *)(v9 + 24);
      v24 = v23 >> 16;
      if (v22 <= (v23 >> 16))
        goto LABEL_49;
      v25 = *(unsigned int *)(v21 + 16);
      v18 = *(unsigned __int8 **)(v21 + 8);
      v26 = *(_DWORD *)(v9 + 16);
      if ((int)v22 - (int)v24 > v26 || (v26 = v22 - v24, (_DWORD)v24))
      {
        v27 = (v25 >> 2) & 1;
        v28 = (v23 >> 16);
        v20 = v26;
        v29 = v22 - v24;
        if ((_DWORD)v27)
        {
          if (v29 < v26)
            goto LABEL_49;
          v18 += v28;
          v20 = v26 | 0x100000000;
        }
        else
        {
          if (v29 < v26)
            goto LABEL_49;
          v18 += 2 * v28;
        }
      }
      else
      {
        v20 = v22 & 0xFFFFFFFEFFFFFFFFLL | (((v25 >> 2) & 1) << 32);
      }
      v9 = *(_QWORD *)(v9 + 20) & 0xFFFFFFFFFLL;
      goto LABEL_27;
    }
    v16 = *JSC::JSRopeString::resolveRope(*((_QWORD *)a2 + 6), this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (v16)
      goto LABEL_11;
LABEL_24:
    v18 = 0;
    v19 = 1;
    goto LABEL_12;
  }
  if (!v16)
    goto LABEL_24;
LABEL_11:
  v17 = v16[4];
  v18 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
  LODWORD(v16) = v16[1];
  v19 = (v17 >> 2) & 1;
LABEL_12:
  v20 = v16 | (unint64_t)(v19 << 32);
LABEL_27:
  v30 = (int)v12;
  if ((v20 & 0x100000000) != 0)
  {
    if ((_DWORD)v20)
    {
      v31 = *v18;
      v32 = (JSC::VM *)*((_QWORD *)v10 + 7);
      goto LABEL_30;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    a3 = (JSC::CallFrame *)JSC::Exception::create(v9, a3, 0, a4, a5, a6, a7, a8);
    return JSC::VM::throwException((JSC::VM *)v9, v10, a3, v14, a4, a5, a6, a7, a8);
  }
  if (!(_DWORD)v20)
    goto LABEL_49;
  v31 = *(unsigned __int16 *)v18;
  v32 = (JSC::VM *)*((_QWORD *)v10 + 7);
  if (v31 > 0xFF)
  {
    if ((_DWORD)v30)
    {
      if (v30 > 0x7FFFFFEF)
        goto LABEL_51;
      WTF::tryFastCompactMalloc((WTF *)(2 * v30 + 20), &v62);
      v52 = v62;
      if (!v62)
        goto LABEL_51;
      v53 = 0;
      *(_DWORD *)v62 = 2;
      *((_DWORD *)v52 + 1) = v30;
      *((_QWORD *)v52 + 1) = (char *)v52 + 20;
      *((_DWORD *)v52 + 4) = 0;
      do
        *((_WORD *)v52 + v53++ + 10) = v31;
      while ((_DWORD)v30 != (_DWORD)v53);
    }
    else
    {
      v52 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
    }
    v62 = v52;
LABEL_35:
    v15 = JSC::jsString((uint64_t)v32, (JSC::VM *)&v62, (uint64_t)a3, a4, a5, a6, a7, a8);
    v42 = v62;
    v62 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::~StringImpl(v42, v35, v36, v37, v38, v39, v40, v41);
        WTF::fastFree(v44, v45, v46, v47, v48, v49, v50, v51);
      }
      else
      {
        *(_DWORD *)v42 -= 2;
      }
    }
    return (JSC::Exception *)v15;
  }
LABEL_30:
  if (!(_DWORD)v30)
  {
    v33 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_34;
  }
  if ((v30 & 0x80000000) == 0)
  {
    WTF::tryFastCompactMalloc((WTF *)(v30 + 20), &v62);
    v33 = v62;
    if (v62)
    {
      v34 = (char *)v62 + 20;
      *(_DWORD *)v62 = 2;
      *((_DWORD *)v33 + 1) = v30;
      *((_QWORD *)v33 + 1) = (char *)v33 + 20;
      *((_DWORD *)v33 + 4) = 4;
      memset(v34, v31, (int)v12);
LABEL_34:
      v62 = v33;
      goto LABEL_35;
    }
  }
LABEL_51:
  v54 = JSC::createOutOfMemoryError((unint64_t)v10, a2);
  v61 = (JSC::Exception *)v54;
  if ((v54 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v54 & 0xFFFFFFFE) + 0x4C)))
  {
    v61 = (JSC::Exception *)JSC::Exception::create((uint64_t)v32, (JSC::VM *)v54, 0, v55, v56, v57, v58, v59);
  }
  JSC::VM::throwException(v32, v10, v61, v60, v55, v56, v57, v58, v59);
  return 0;
}

uint64_t operationStringProtoFuncReplaceGeneric(unint64_t a1, uint64_t this, uint64_t a3, JSC::JSRopeString *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  JSC::JSFunction *v11;
  JSC::JSRopeString *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  JSC::JSFunction *v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _BOOL8 v29;
  void *v30;
  int v31;
  JSC::RegExp **v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  JSC::RegExp *v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  int v47;
  _DWORD *v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  uint16x8_t v52;
  uint64_t v53;
  float v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  JSC::VM *v59;
  int v60;
  int v61;
  int v62;
  _DWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  WTF::StringImpl *v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  int v79;
  __int16 *v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t OutOfMemoryError;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  JSC::Exception *v113;
  unint64_t v114;
  _BOOL4 v115;
  char v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t *v128;
  JSC::VM *v129;
  WTF::AtomStringImpl *v130;
  JSC::Structure *v131;
  uint64_t v132;
  uint64_t v133;
  int8x16_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  JSC::VM *v139;
  int v140;
  int v141;
  _DWORD *v142;
  unint64_t v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  BOOL v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  int8x16_t v157;
  JSC::VM *v158;
  int *v159;
  uint64_t v160;
  int *v161;
  WTF::StringImpl *v162;
  int v163;
  WTF *v164;
  int *v166;
  int v167;
  unsigned int v168;
  WTF *v169;
  WTF *v170;
  uint64_t v171;
  int v172;
  int v173;
  size_t v174;
  uint64_t v175;
  _BYTE *v176;
  int *v177;
  _BYTE *v178;
  int16x8_t *v179;
  WTF::AtomStringImpl *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _DWORD *v187;
  uint64_t *v188;
  WTF *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _DWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _DWORD *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  BOOL v208;
  _BYTE *v209;
  _BYTE *v210;
  uint64_t v211;
  WTF::StringImpl *v212;
  int v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  unint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int16x8_t *v240;
  int16x8_t v241;
  int8x16_t v242;
  int16x8_t *v243;
  char *v244;
  int16x8_t v245;
  unsigned __int8 *v246;
  void *v248;
  unsigned __int8 *v249;
  int v250;
  unint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  int v260;
  _DWORD *v261;
  unint64_t v262;
  int8x16_t v263;
  unint64_t v264;
  uint64_t v265;
  int v266;
  int v267;
  WTF::AtomStringImpl *v268;
  unint64_t v269;
  int8x16_t v270;
  WTF::StringImpl *v271;
  uint64_t v272;
  WTF *v273;
  WTF::StringImpl *v274;
  char v275;
  WTF::StringImpl *v276;
  unsigned int v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  int v280;
  int v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  double v288;
  JSC::Exception *v289;
  unint64_t v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  BOOL v295;
  _BOOL4 v296;
  unsigned int v297;
  WTF::StringImpl *v298;
  int v299;
  _DWORD *v300;
  uint64_t v301;
  unsigned int v302;
  unsigned int v303;
  uint64_t v304;
  unint64_t v306;
  uint64_t v307;
  void *v308;
  __int128 v309;
  unint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  WTF *v313;
  uint64_t v314;
  int v315;
  int v316;
  int v317;
  int v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  double v325;
  JSC::Exception *v326;
  unint64_t v327;
  void *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _DWORD *v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  int v339;
  unsigned int v340;
  const void **v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  int8x16_t v347;
  int v348;
  int v349;
  int *v350;
  uint64_t v351;
  unint64_t v352;
  JSC::VM *v353;
  int v354;
  uint64_t v355;
  unsigned int v356;
  int v357;
  uint64_t v358;
  unsigned int v359;
  uint64_t v360;
  unint64_t *v361;
  WTF::StringImpl *v362;
  unsigned __int8 v363;
  unint64_t v364;
  int v365;
  BOOL v366;
  uint64_t v367;
  uint64_t v368;
  JSC::VM *v369;
  int v370;
  uint64_t v371;
  _DWORD *v372;
  JSC::JSRopeString *v373;
  WTF::StringImpl *v374;
  unsigned int v375;
  int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  int v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  WTF::StringImpl *v386;
  unsigned int v387;
  unsigned int v388;
  uint64_t v389;
  JSC::VM *v390;
  unint64_t *v391;
  BOOL v392;
  WTF *v393;
  int v394;
  WTF *v395;
  unint64_t *v396;
  uint64_t v397;
  int v398;
  int v399;
  int v400;
  JSC::VM *v401;
  unint64_t v402;
  _DWORD *v404;
  int v405;
  int v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  unsigned int v411;
  void *v412;
  unint64_t v413;
  _DWORD *v414;
  uint64_t v415;
  int *v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t v419;
  unint64_t v420;
  _WORD *v421;
  _WORD *v422;
  unsigned int *v423;
  int v424;
  unsigned int v425;
  int v426;
  unsigned int v427;
  WTF **v428;
  int v429;
  unsigned int v430;
  int v431;
  WTF *v432;
  WTF *v434;
  unsigned int v437;
  WTF *v438;
  uint64_t v439;
  WTF *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  char v444;
  _DWORD *v445;
  int v446;
  BOOL v447;
  unsigned int v448;
  int v449;
  WTF *v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  unint64_t v455;
  BOOL v456;
  unint64_t v457;
  void *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t StatusReg;
  int v467;
  _DWORD *v468;
  int v469;
  _DWORD *v470;
  char *v471;
  uint64_t v472;
  uint64_t v473;
  int v474;
  _DWORD *v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  unint64_t v479;
  char *v480;
  unsigned int v481;
  uint64_t v482;
  unint64_t v483;
  char *v484;
  uint64_t v485;
  char *v486;
  int v487;
  char *v488;
  WTF::StringImpl *v489;
  int v490;
  uint64_t v491;
  size_t v492;
  uint64_t v493;
  _BYTE *v494;
  int *v495;
  _BYTE *v496;
  uint64_t v497;
  int v498;
  int v499;
  size_t v500;
  uint64_t v501;
  _BYTE *v502;
  int *v503;
  _BYTE *v504;
  unint64_t v505;
  void *v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  int v513;
  uint64_t v514;
  size_t v515;
  uint64_t v516;
  _BYTE *v517;
  int *v518;
  _BYTE *v519;
  int *v520;
  unsigned int v521;
  uint64_t v522;
  unsigned int v523;
  unsigned int v524;
  BOOL v525;
  int v526;
  int v527;
  int v528;
  int v529;
  char v530;
  uint64_t v531;
  unsigned int v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  WTF::StringImpl *v540;
  WTF::StringImpl *v541;
  WTF::StringImpl *v542;
  WTF::StringImpl *v543;
  uint64_t v544;
  uint64_t v545;
  _BOOL4 v546;
  int v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  WTF::StringImpl *v554;
  WTF::StringImpl *v555;
  unint64_t v556;
  void *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  void *v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  _BOOL4 v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  WTF::StringImpl *v582;
  _DWORD *v583;
  char *v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  int8x16_t *v592;
  unsigned int v593;
  uint64_t v594;
  unint64_t v595;
  unint64_t v596;
  char *v597;
  uint64_t v598;
  int8x16_t *v599;
  uint64_t v600;
  char *v601;
  char *v602;
  __int16 v603;
  char *v604;
  int8x16_t v605;
  int8x16_t v606;
  char *v607;
  char *v608;
  char *v609;
  unint64_t v610;
  const WTF::String *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  JSC::JSString *v617;
  const WTF::String *v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  JSC::JSString *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  _DWORD *v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  _DWORD *v634;
  uint64_t v635;
  int v636;
  uint64_t v637;
  uint64_t v638;
  _DWORD *v639;
  uint64_t v640;
  int v641;
  uint64_t v642;
  WTF::StringImpl **v643;
  JSC *v644;
  unint64_t v645;
  const WTF::String *v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  JSC::JSString *v652;
  JSC::JSString *v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  const WTF::String *v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  unint64_t v664;
  JSC::VM *v665;
  JSC *v666;
  JSC::JSString *v667;
  JSC::JSString *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  void **p_dst;
  JSC::VM **v674;
  unint64_t v675;
  void *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  unint64_t v683;
  void *v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  int **v691;
  char v692;
  int **v693;
  uint64_t v694;
  int v695;
  JSC::VM *v696;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v698;
  uint64_t v699;
  _BOOL4 v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  WTF::StringImpl *v707;
  WTF::StringImpl *v708;
  unsigned int v709;
  WTF::StringImpl *v710;
  WTF::StringImpl *v711;
  uint64_t v712;
  unint64_t v713;
  void *v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  unint64_t v721;
  WTF *v722;
  WTF *v723;
  uint64_t v724;
  unsigned int v725;
  WTF *v726;
  uint64_t v727;
  _QWORD *v728;
  void *v729;
  uint64_t v730;
  uint64_t v731;
  WTF::AtomStringImpl *v732;
  unint64_t v733;
  unsigned int v734;
  unint64_t v735;
  unsigned int v736;
  uint64_t v737;
  unsigned int v738;
  uint64_t v739;
  int v740;
  BOOL v741;
  int v742;
  BOOL v743;
  unint64_t v744;
  uint64_t v745;
  int v746;
  uint64_t v747;
  int *v748;
  int v749;
  int v750;
  int v751;
  _DWORD *v752;
  uint64_t v753;
  uint64_t v754;
  int8x16_t v755;
  JSC::VM *v756;
  unint64_t v757;
  WTF::StringImpl *v758;
  WTF::StringImpl *v759;
  WTF::StringImpl *v760;
  char v761;
  WTF::StringImpl *v762;
  unint64_t v763;
  void *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  unint64_t v771;
  void *v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unsigned int v779;
  unsigned int v780;
  int v781;
  JSC::VM **v782;
  WTF *v783;
  WTF *v785;
  unsigned int v787;
  WTF *v788;
  uint64_t v789;
  WTF::StringImpl *v790;
  unint64_t v791;
  void *v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  unsigned int *v799;
  unsigned int v800;
  int v801;
  _DWORD *v802;
  WTF *v803;
  WTF *v804;
  uint64_t v805;
  uint64_t v807;
  uint64_t v808;
  char v809;
  _DWORD *v810;
  uint64_t v811;
  int v812;
  BOOL v813;
  unsigned int v814;
  int v815;
  WTF *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  unint64_t v821;
  BOOL v822;
  int v823;
  WTF::StringImpl *v824;
  WTF::StringImpl *v825;
  char *v826;
  uint64_t v827;
  uint64_t v828;
  int v829;
  _DWORD *v830;
  uint64_t v831;
  unint64_t v832;
  uint64_t v833;
  unint64_t v834;
  char *v835;
  unsigned int v836;
  uint64_t v837;
  unint64_t v838;
  char *v839;
  uint64_t v840;
  char *v841;
  int v842;
  char *v843;
  WTF::StringImpl *v844;
  int v845;
  uint64_t v846;
  size_t v847;
  uint64_t v848;
  int v849;
  uint64_t v850;
  size_t v851;
  uint64_t v852;
  int *v853;
  JSC *v854;
  unsigned int v855;
  uint64_t v856;
  unsigned int v857;
  unsigned int v858;
  BOOL v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  uint64_t v865;
  WTF::StringImpl *v866;
  WTF::StringImpl *v867;
  WTF::StringImpl *v868;
  WTF::StringImpl *v869;
  WTF::AtomStringImpl *v870;
  int v871;
  JSC::VM *v872;
  int8x16_t v873;
  unint64_t v874;
  unsigned int v875;
  uint64_t v876;
  uint64_t v877;
  int v878;
  BOOL v879;
  WTF::StringImpl *v880;
  uint64_t v881;
  int v882;
  int v883;
  BOOL v884;
  size_t v885;
  uint64_t v886;
  WTF::StringImpl *v887;
  unint64_t v888;
  void *v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  unint64_t *v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  unint64_t SlowCase;
  uint64_t v901;
  uint64_t v902;
  _BOOL4 v903;
  WTF::StringImpl **v904;
  uint64_t *v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  int *v912;
  WTF::StringImpl *v913;
  unint64_t v914;
  void *v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  unint64_t v922;
  void *v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  void *v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t v936;
  unint64_t v937;
  uint64_t v938;
  uint64_t v939;
  _BOOL4 v940;
  char *v941;
  uint64_t v942;
  int v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  unint64_t v947;
  int8x16_t *v948;
  unsigned int v949;
  uint64_t v950;
  unint64_t v951;
  unint64_t v952;
  char *v953;
  uint64_t v954;
  int8x16_t *v955;
  uint64_t v956;
  char *v957;
  char *v958;
  __int16 v959;
  char *v960;
  int8x16_t v961;
  int8x16_t v962;
  char *v963;
  char *v964;
  char *v965;
  unint64_t v966;
  const WTF::String *v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  JSC::JSString *v973;
  const WTF::String *v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  JSC::JSString *v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  unsigned int v986;
  int8x16_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  __n128 v991;
  int *v992;
  int *v993;
  uint64_t v994;
  uint64_t v995;
  WTF::StringImpl *v996;
  WTF::StringImpl *v997;
  _DWORD *v998;
  uint64_t v999;
  int v1000;
  uint64_t v1001;
  _DWORD *v1002;
  int v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  _DWORD *v1008;
  uint64_t v1009;
  int v1010;
  uint64_t v1011;
  uint64_t v1012;
  WTF::StringImpl *v1013;
  JSC::VM *v1014;
  JSC *v1015;
  unint64_t v1016;
  void *v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  JSC::VM *v1024;
  JSC *v1025;
  const WTF::String *v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  unint64_t v1032;
  JSC::VM *v1033;
  JSC *v1034;
  JSC::JSString *v1035;
  JSC::JSString *v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  unint64_t v1041;
  void *v1042;
  uint64_t v1043;
  uint64_t v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  int8x16_t v1056;
  double v1057;
  float v1058;
  WTF::AtomStringImpl *v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  WTF::StringImpl *v1065;
  unsigned int v1066;
  unint64_t v1067;
  void *v1068;
  uint64_t v1069;
  uint64_t v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  WTF::StringImpl **v1075;
  unint64_t v1076;
  void *v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  uint64_t v1081;
  uint64_t v1082;
  uint64_t v1083;
  unint64_t v1084;
  void *v1085;
  uint64_t v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  unint64_t v1092;
  void *v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  char *v1100;
  char *v1101;
  int8x16_t v1102;
  int8x16_t v1103;
  char *v1104;
  char *v1105;
  char *v1106;
  __int16 v1107;
  unint64_t v1108;
  void *v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  _BOOL4 v1118;
  WTF::AtomStringImpl *v1119;
  uint64_t v1120;
  unsigned int v1121;
  int8x16_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  __n128 v1126;
  int *v1127;
  int *v1128;
  uint64_t v1129;
  uint64_t v1130;
  WTF::StringImpl *v1131;
  WTF::StringImpl *v1132;
  JSC::VM *v1133;
  JSC::VM *v1134;
  uint64_t v1135;
  WTF::StringImpl *v1136;
  unint64_t v1137;
  void *v1138;
  uint64_t v1139;
  uint64_t v1140;
  uint64_t v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  unint64_t v1145;
  void *v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  uint64_t v1150;
  uint64_t v1151;
  uint64_t v1152;
  unint64_t v1153;
  void *v1154;
  uint64_t v1155;
  uint64_t v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  char *v1161;
  char *v1162;
  int8x16_t v1163;
  int8x16_t v1164;
  char *v1165;
  char *v1166;
  char *v1167;
  __int16 v1168;
  WTF::StringImpl *v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  unint64_t v1173;
  unsigned int v1174;
  uint64_t v1175;
  unsigned int v1176;
  unint64_t *v1177;
  unint64_t *v1178;
  unint64_t *v1179;
  JSC::VM *v1180;
  JSC::VM *v1181;
  JSC::VM *v1182;
  JSC::VM *v1183;
  JSC::VM *v1184;
  _DWORD *v1185;
  uint64_t *v1186;
  uint64_t v1187;
  JSC::JSFunction *v1188;
  int v1189;
  WTF *v1190;
  unint64_t v1191;
  JSC *v1192;
  JSC::MarkedVectorBase *v1193;
  _BOOL4 v1194;
  _DWORD *v1195;
  JSC::JSGlobalObject *v1196;
  unint64_t v1197;
  __int128 v1198;
  WTF::StringImpl *v1199;
  JSC::RegExp *v1200;
  unsigned int v1201;
  uint64_t *v1203;
  JSC::VM *v1204;
  uint64_t v1205;
  unsigned __int8 *v1206;
  uint64_t v1207;
  uint64_t v1208;
  uint64_t v1209;
  JSC::JSFunction *v1210;
  WTF::StringImpl *v1211;
  int v1212;
  unsigned int v1213;
  JSC::VM *v1214;
  WTF::StringImpl *v1215;
  WTF::StringImpl *v1216;
  void *__dst;
  __int128 v1218;
  __int128 v1219;
  __int128 v1220;
  __int128 v1221;
  __int128 v1222;
  uint64_t v1223;
  char v1224;
  int v1225;
  int v1226;
  _BYTE *v1227;
  _BYTE v1228[80];
  uint64_t v1229;
  WTF *v1230;
  uint64_t v1231;
  _QWORD v1232[16];
  WTF *v1233;
  uint64_t v1234;
  _DWORD v1235[32];
  uint64_t v1236;
  unsigned int v1237;
  JSC::VM *v1238;
  unint64_t v1239;
  WTF::StringImpl *v1240;
  const WTF::String *v1241;
  unint64_t v1242;
  int *var60[13];
  int8x16x2_t v1244;
  int8x16x2_t v1245;
  int8x16x2_t v1246;
  int8x16x2_t v1247;
  int8x16x2_t v1248;
  int8x16x2_t v1249;
  int8x16x2_t v1250;
  int8x16x2_t v1251;
  int8x16x2_t v1252;
  int8x16x2_t v1253;
  int8x16x2_t v1254;
  int8x16x2_t v1255;
  int8x16x2_t v1256;
  int8x16x2_t v1257;
  int8x16x2_t v1258;
  int8x16x2_t v1259;

  v11 = a4;
  v13 = (JSC::JSRopeString *)this;
  v14 = *(_QWORD *)(a1 + 56);
  *(int **)(v14 + 40) = var60[12];
  v1205 = a3;
  v1206 = (unsigned __int8 *)this;
  v1204 = (JSC::VM *)v14;
  if ((this & 0xFFFE000000000002) != 0)
  {
    if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
    {
LABEL_1489:
      JSC::throwTypeError((JSC::JSGlobalObject *)a1, &v1204);
      return 0;
    }
LABEL_219:
    v13 = (JSC::JSRopeString *)JSC::JSValue::toStringSlowCase(&v1206, a1, (JSC::Structure *)1, (uint64_t)a4, a5, a6, a7, a8);
    goto LABEL_3;
  }
  v15 = *(unsigned __int8 *)(this + 5);
  if (v15 != 2)
  {
    if ((this & 0xFFFFFFFFFFFFFFF7) == 2 || (v15 - 51) < 5)
      goto LABEL_1489;
    goto LABEL_219;
  }
LABEL_3:
  if (*(_DWORD *)(v14 + 80))
  {
    v317 = *(_DWORD *)(v14 + 80);
    if ((v317 & 0x27) != 0 && (v317 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      return 0;
  }
  v1196 = v13;
  if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 59)
  {
    v692 = *((_BYTE *)v13 + 8);
    v691 = (int **)((char *)v13 + 8);
    if ((v692 & 1) != 0)
      v691 = JSC::JSRopeString::resolveRope((unint64_t)v1196, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a9, a5, a6, a7, a8);
    if (*(_DWORD *)(v14 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, this, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      return 0;
    }
    if ((a3 & 0xFFFE000000000002) != 0 || *(_BYTE *)(a3 + 5) != 2)
    {
      JSC::JSValue::toWTFString((JSC::JSValue *)&v1205, (JSC::JSGlobalObject *)a1, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&__dst, a9);
      if (*(_DWORD *)(v14 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, v1049, v1050, v1051, v1052, v1053, v1054, v1055))
      {
        v114 = 0;
      }
      else
      {
        v114 = JSC::replaceUsingStringSearch((JSC::VM *)v14, (JSC::JSGlobalObject *)a1, v1196, (JSC::JSString *)v691, (uint64_t)&__dst, (unint64_t)v11, 0, v1055, v1056, v1057, v1058);
      }
      v1065 = (WTF::StringImpl *)__dst;
      __dst = 0;
      if (v1065)
      {
        if (*(_DWORD *)v1065 == 2)
        {
          WTF::StringImpl::~StringImpl(v1065, v1059, v1060, v1061, v1062, v1063, v1064, v1055);
          WTF::fastFree(v1084, v1085, v1086, v1087, v1088, v1089, v1090, v1091);
        }
        else
        {
          *(_DWORD *)v1065 -= 2;
        }
      }
    }
    else
    {
      v693 = (int **)(a3 + 8);
      if ((*(_BYTE *)(a3 + 8) & 1) != 0)
        v693 = JSC::JSRopeString::resolveRope(a3, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a9, a5, a6, a7, a8);
      if (*(_DWORD *)(v14 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, this, a3, (uint64_t)a4, a5, a6, a7, a8))
      {
        return 0;
      }
      else
      {
        return JSC::replaceUsingStringSearch((JSC::VM *)v14, (JSC::JSGlobalObject *)a1, v1196, (JSC::JSString *)v691, (uint64_t)v693, (unint64_t)v11, 0, a8, a9, a10, a11);
      }
    }
    return v114;
  }
  v1210 = v11;
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0)
  {
    LOBYTE(v1207) = 0;
  }
  else
  {
    if (*((_BYTE *)v11 + 5) == 26)
    {
      v16 = *((_QWORD *)v11 + 3);
      if ((v16 & 1) != 0)
        v16 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFFFELL) + 48);
      v1199 = 0;
      if (*(_BYTE *)(v16 + 5) == 8)
      {
        LOBYTE(v1207) = 1;
        v1208 = *(_QWORD *)(v16 + 40);
        LOBYTE(v1209) = &JSC::JSBoundFunction::s_info == (char **)(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                   + 0x4C));
      }
      else
      {
        LOBYTE(v1207) = 2;
        v17 = *((_QWORD *)v11 + 2);
        v1208 = v16;
        v1209 = v17;
      }
      goto LABEL_12;
    }
    (*(void (**)(uint64_t *__return_ptr, JSC::JSFunction *))(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)v11 & 0xFFFFFFFE)
                                                                                       + 0x4C)
                                                                     + 0x38))(&v1207, v11);
    if ((_BYTE)v1207)
    {
      v1199 = 0;
      goto LABEL_12;
    }
    v11 = v1210;
  }
  if (((unint64_t)v11 & 0xFFFE000000000002) != 0 || *((_BYTE *)v11 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1210, (JSC::JSGlobalObject *)a1, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&__dst);
  }
  else
  {
    v166 = (int *)*((_QWORD *)v11 + 1);
    if ((v166 & 1) != 0)
      v166 = *JSC::JSRopeString::resolveRope((unint64_t)v11, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a9, a5, a6, a7, a8);
    if (v166)
      *v166 += 2;
    __dst = v166;
  }
  v1199 = (WTF::StringImpl *)__dst;
  if (*(_DWORD *)(v14 + 80)
    && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, this, a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    v114 = 0;
    goto LABEL_653;
  }
LABEL_12:
  v18 = v1210;
  v1214 = (JSC::VM *)v14;
  v19 = (uint64_t *)((char *)v13 + 8);
  v1203 = (uint64_t *)((char *)v13 + 8);
  if ((*((_BYTE *)v13 + 8) & 1) != 0)
    v1203 = (uint64_t *)JSC::JSRopeString::resolveRope((unint64_t)v13, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, a9, a5, a6, a7, a8);
  if (*(_DWORD *)(v14 + 80))
  {
    v318 = *(_DWORD *)(v14 + 80);
    if ((v318 & 0x27) != 0 && (v318 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_433;
  }
  if (*v1203)
    v20 = *(_DWORD *)(*v1203 + 4);
  else
    v20 = 0;
  v1213 = v20;
  v21 = *(_QWORD *)(a3 + 16);
  LODWORD(v1197) = *(unsigned __int16 *)((v21 & 0xFFFFFFFFFFFFFFFCLL) + 18);
  v1200 = (JSC::RegExp *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
  v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFFFCLL) + 48);
  if (v22)
    v23 = *(_DWORD *)(v22 + 20) != 0;
  else
    v23 = 0;
  v1192 = (JSC *)v14;
  if ((v1197 & 2) == 0)
  {
    v1239 = 0;
    v1233 = (WTF *)v1235;
    v1234 = 16;
    v1230 = (WTF *)v1232;
    v1231 = 16;
    goto LABEL_60;
  }
  __dst = *(void **)(a1 + 56);
  if ((v21 & 1) != 0)
    JSC::throwTypeError(a1, (JSC::VM **)&__dst, (uint64_t)"Attempted to assign to readonly property.", 42);
  else
    *(_QWORD *)(a3 + 24) = 0xFFFE000000000000;
  if (*(_DWORD *)(v14 + 80))
  {
    v339 = *(_DWORD *)(v14 + 80);
    if ((v339 & 0x27) != 0 && (v339 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v14 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v14 + 16))
    {
LABEL_433:
      v114 = 0;
      goto LABEL_653;
    }
  }
  if ((_BYTE)v1207)
  {
    v115 = v1207 == 2;
    v116 = v1207 != 2 || v23;
    if ((v116 & 1) != 0 || v20 < dword_1ECF4C794)
    {
LABEL_131:
      v1239 = 0;
      v1233 = (WTF *)v1235;
      v1234 = 16;
      v1230 = (WTF *)v1232;
      v1231 = 16;
      if (v115)
      {
        v117 = *((_DWORD *)v1200 + 6);
        if (v23)
          v118 = (v117 + 4);
        else
          v118 = (v117 + 3);
        v119 = a1;
        JSC::CachedCall::CachedCall((JSC::CachedCall *)&__dst, (JSC::JSGlobalObject *)a1, v18, v118, a5, a6, a7, a8);
        if (*(_DWORD *)(v14 + 80)
          && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v14, v120, v121, v122, v123, v124, v125, v126))
        {
          goto LABEL_385;
        }
        v127 = 0;
        v128 = (uint64_t *)(a1 + 2200);
        while (1)
        {
          v129 = *(JSC::VM **)(v119 + 56);
          JSC::RegExp::match((uint64_t)v1200, v119, v1203, v127, (uint64_t)v128, v124, v125, v126);
          LODWORD(v136) = v135;
          if (*((_DWORD *)v129 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v129, (uint64_t)v130, (uint64_t)v131, v132, v133, v124, v125, v126))
          {
            v138 = 0;
            v137 = 0;
            v136 = -1;
          }
          else
          {
            v137 = *v128;
            if ((_DWORD)v136 == -1)
            {
              v138 = 0;
              v136 = -1;
            }
            else
            {
              if (*(_DWORD *)(a1 + 2212) <= 1u)
              {
                __break(0xC471u);
                JUMPOUT(0x198BDCA28);
              }
              v138 = (WTF::StringImpl *)*(int *)(v137 + 4);
              v136 = (int)v136;
              *(_QWORD *)(a1 + 2152) = v1200;
              *(_QWORD *)(a1 + 2144) = v13;
              *(_QWORD *)(a1 + 2120) = (int)v136;
              *(_QWORD *)(a1 + 2128) = v138;
              *(_BYTE *)(a1 + 2136) = 0;
              if (*((_DWORD *)v129 + 190) >= *(unsigned __int8 *)(a1 + 7))
                JSC::Heap::writeBarrierSlowPath((uint64_t)v129 + 192, a1);
            }
          }
          v1215 = (WTF::StringImpl *)v136;
          v1216 = v138;
          v139 = v1214;
          if (*((_DWORD *)v1214 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v1214, (uint64_t)v130, (uint64_t)v131, v132, v133, v124, v125, v126))
            {
              goto LABEL_385;
            }
            v136 = (uint64_t)v1215;
            v13 = v1196;
          }
          if (v136 == -1)
            break;
          v140 = HIDWORD(v1234);
          if (HIDWORD(v1234) == (_DWORD)v1234)
          {
            if ((WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1233, (int *)&v1239, (int *)&v1215, v132, v133, v124, v125, v126) & 1) == 0)goto LABEL_384;
          }
          else
          {
            v141 = v1239;
            v142 = (_DWORD *)((char *)v1233 + 8 * HIDWORD(v1234));
            *v142 = v1239;
            v142[1] = v136;
            if (v141 == (_DWORD)v136)
              *(_QWORD *)v142 = 0;
            HIDWORD(v1234) = v140 + 1;
          }
          v1224 = 0;
          v1225 = 0;
          if (v23)
          {
            v871 = *(_DWORD *)(a1 + 932);
            if (v871)
              v872 = (JSC::VM *)(16 * (v871 & 0xFFFFFFFE));
            else
              v872 = 0;
            v1193 = (JSC::MarkedVectorBase *)JSC::constructEmptyObject(v1192, v872, v131, v132, v133, v124, v125, v126);
            if (*((_DWORD *)v1200 + 6) == -1)
            {
LABEL_1281:
              v149 = (uint64_t)v1193;
              goto LABEL_164;
            }
            v874 = 0;
            v875 = 1;
            while (2)
            {
              v132 = *(unsigned int *)(v137 + 4 * (v875 - 1));
              if ((v132 & 0x80000000) != 0)
              {
                v877 = 10;
              }
              else
              {
                v877 = (uint64_t)JSC::jsSubstring(v1192, a1, v1196, (JSC::JSString *)v132, (*(_DWORD *)(v137 + 4 * v875) - v132), v124, v125, v126, v873);
                if (*((_DWORD *)v139 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v139, v876, (uint64_t)v131, v132, v133, v124, v125, v126))
                {
                  goto LABEL_385;
                }
              }
              v878 = v1225;
              if (v1225 != v1226 && (v1227 != v1228 ? (v879 = v1227 == 0) : (v879 = 1), v879))
              {
                *(_QWORD *)&v1227[8 * v1225] = v877;
                v1225 = v878 + 1;
              }
              else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1225, v877, (uint64_t)v131, v132, v133, v124, v125, v126) == 1)
              {
                v1224 = 1;
              }
              if (v874)
              {
                JSC::RegExp::getCaptureGroupNameForSubpatternId((uint64_t)v1200, v874, &v1211);
                if (v1211)
                {
                  v1120 = *((unsigned int *)v1211 + 1);
                  if ((_DWORD)v1120)
                  {
                    v1191 = v1191 & 0xFFFFFF0000000000 | v1120 | ((unint64_t)((*((_DWORD *)v1211 + 4) >> 2) & 1) << 32);
                    v1121 = JSC::RegExp::subpatternIdForGroupName<int const*>((uint64_t)v1200, *((_QWORD *)v1211 + 1), v1191, v137);
                    if (v874 == v1121)
                      goto LABEL_1543;
                    if (v1121)
                    {
                      v132 = *(unsigned int *)(v137 + 8 * v1121);
                      if ((v132 & 0x80000000) != 0)
                      {
                        v877 = 10;
                      }
                      else
                      {
                        v877 = (uint64_t)JSC::jsSubstring(v1192, a1, v1196, (JSC::JSString *)v132, (*(_DWORD *)(v137 + 4 * ((2 * v1121) | 1)) - v132), v124, v125, v126, v1122);
                        if (*((_DWORD *)v139 + 20)
                          && JSC::VM::hasExceptionsAfterHandlingTraps(v139, v1135, (uint64_t)v131, v132, v133, v124, v125, v126))
                        {
                          v1136 = v1211;
                          v1211 = 0;
                          if (v1136)
                          {
                            if (*(_DWORD *)v1136 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v1136, v130, (uint64_t)v131, v132, v133, v124, v125, v126);
                              WTF::fastFree(v1137, v1138, v1139, v1140, v1141, v1142, v1143, v1144);
                            }
                            else
                            {
                              *(_DWORD *)v1136 -= 2;
                            }
                          }
                          goto LABEL_385;
                        }
                      }
LABEL_1543:
                      JSC::Identifier::fromString((uint64_t **)v1192, &v1211, v131, v132, v133, v124, v125, v126, (WTF::StringImpl **)var60);
                      v1127 = var60[0];
                      v1128 = (int *)v1193;
                      v1129 = (uint64_t)v1192;
                      v1130 = v877;
                    }
                    else
                    {
                      JSC::Identifier::fromString((uint64_t **)v1192, &v1211, v131, v132, v133, v124, v125, v126, (WTF::StringImpl **)var60);
                      v1127 = var60[0];
                      v1128 = (int *)v1193;
                      v1129 = (uint64_t)v1192;
                      v1130 = 10;
                    }
                    JSC::JSObject::putDirect(v1128, v1129, (unint64_t)v1127, v1130, 0, v1126, v1123, v1124, v1125);
                    v1131 = (WTF::StringImpl *)var60[0];
                    var60[0] = 0;
                    if (v1131)
                    {
                      if (*(_DWORD *)v1131 == 2)
                      {
                        WTF::StringImpl::~StringImpl(v1131, v1119, (uint64_t)v131, v132, v133, v124, v125, v126);
                        WTF::fastFree(v1153, v1154, v1155, v1156, v1157, v1158, v1159, v1160);
                      }
                      else
                      {
                        *(_DWORD *)v1131 -= 2;
                      }
                    }
                  }
                  v1132 = v1211;
                  v1211 = 0;
                  if (v1132)
                  {
                    if (*(_DWORD *)v1132 == 2)
                    {
                      WTF::StringImpl::~StringImpl(v1132, v1119, (uint64_t)v131, v132, v133, v124, v125, v126);
                      WTF::fastFree(v1145, v1146, v1147, v1148, v1149, v1150, v1151, v1152);
                    }
                    else
                    {
                      *(_DWORD *)v1132 -= 2;
                    }
                  }
                }
              }
              ++v874;
              v875 += 2;
              if (v874 >= (*((_DWORD *)v1200 + 6) + 1))
                goto LABEL_1281;
              continue;
            }
          }
          if (*((_DWORD *)v1200 + 6) != -1)
          {
            v143 = 0;
            v144 = 1;
            do
            {
              v132 = *(unsigned int *)(v137 + 4 * (v144 - 1));
              if ((v132 & 0x80000000) != 0)
              {
                v146 = 10;
              }
              else
              {
                v146 = (uint64_t)JSC::jsSubstring(v1192, a1, v1196, (JSC::JSString *)v132, (*(_DWORD *)(v137 + 4 * v144) - v132), v124, v125, v126, v134);
                if (*((_DWORD *)v139 + 20)
                  && JSC::VM::hasExceptionsAfterHandlingTraps(v139, v145, (uint64_t)v131, v132, v133, v124, v125, v126))
                {
                  goto LABEL_385;
                }
              }
              v147 = v1225;
              if (v1225 != v1226 && (v1227 != v1228 ? (v148 = v1227 == 0) : (v148 = 1), v148))
              {
                *(_QWORD *)&v1227[8 * v1225] = v146;
                v1225 = v147 + 1;
              }
              else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1225, v146, (uint64_t)v131, v132, v133, v124, v125, v126) == 1)
              {
                v1224 = 1;
              }
              ++v143;
              v144 += 2;
            }
            while (v143 < (*((_DWORD *)v1200 + 6) + 1));
          }
          v149 = 0;
LABEL_164:
          v150 = (unint64_t)v1215 | 0xFFFE000000000000;
          if ((int)v1215 < 0)
            v150 = COERCE__INT64((double)v1215) + 0x2000000000000;
          if ((unint64_t)v1215 >> 32)
            v151 = COERCE__INT64((double)(unint64_t)v1215) + 0x2000000000000;
          else
            v151 = v150;
          v152 = v1225;
          v13 = v1196;
          if (v1225 == v1226 || v1227 != v1228 && v1227)
          {
            if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1225, v151, (uint64_t)v131, v132, v133, v124, v125, v126) == 1)v1224 = 1;
          }
          else
          {
            *(_QWORD *)&v1227[8 * v1225] = v151;
            v1225 = v152 + 1;
          }
          v153 = v1225;
          if (v1225 == v1226 || v1227 != v1228 && v1227)
          {
            if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1225, (uint64_t)v1196, (uint64_t)v131, v132, v133, v124, v125, v126) == 1)v1224 = 1;
          }
          else
          {
            *(_QWORD *)&v1227[8 * v1225] = v1196;
            v1225 = v153 + 1;
          }
          if (v23)
            JSC::CachedCall::appendArgument((uint64_t *)&__dst, v149, (uint64_t)v131, v132, v133, v124, v125, v126);
          *(_QWORD *)&v1222 = 10;
          if (v1224)
          {
LABEL_384:
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1214);
            goto LABEL_385;
          }
          v154 = v1219;
          v155 = v1229;
          if (v1229)
            goto LABEL_181;
          v423 = (unsigned int *)(v1219 + 80);
          v424 = *(_DWORD *)(v1219 + 80);
          if ((v424 & 0x20) == 0)
          {
            do
              v425 = __ldaxr(v423);
            while (__stlxr(v425 | 0x20, v423));
          }
          JSC::CachedCall::relink((JSC::CachedCall *)&__dst, v151, (uint64_t)v131, v132, v133, v124, v125, v126);
          if (*v423
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v154, (uint64_t)v130, (uint64_t)v131, v132, v133, v124, v125, v126))
          {
            v426 = 0;
            v155 = 0;
            v1197 = *(_QWORD *)(v154 + 16);
          }
          else
          {
            v426 = 1;
            v155 = v1229;
          }
          if ((v424 & 0x20) == 0)
          {
            do
              v427 = __ldaxr(v423);
            while (__stlxr(v427 & 0xFFFFFFDF, v423));
          }
          v13 = v1196;
          v156 = v1197;
          if (v426)
LABEL_181:
            v156 = vmEntryToJavaScript(v155, (JSC::VM *)v154, (uint64_t)&v1220 + 8, v132, v133, v124, v125, v126);
          *(_BYTE *)(v154 + 93120) = 1;
          v1211 = (WTF::StringImpl *)v156;
          v158 = v1214;
          v1197 = v156;
          if (*((_DWORD *)v1214 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v1214, (uint64_t)v130, (uint64_t)v131, v132, v133, v124, v125, v126))
            {
              goto LABEL_385;
            }
            v156 = (unint64_t)v1211;
          }
          if ((v156 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v156 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1211, (JSC::JSGlobalObject *)a1, v131, v132, v133, v124, v125, v126, var60);
          }
          else
          {
            v159 = *(int **)(v156 + 8);
            if ((v159 & 1) != 0)
              v159 = *JSC::JSRopeString::resolveRope(v156, (JSC::JSGlobalObject *)a1, (uint64_t)v131, v132, v157, v133, v124, v125, v126);
            if (v159)
              *v159 += 2;
            var60[0] = v159;
          }
          LODWORD(v160) = HIDWORD(v1231);
          if (HIDWORD(v1231) == (_DWORD)v1231)
          {
            v312 = (uint64_t *)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1230, HIDWORD(v1231) + 1, (unint64_t)var60);
            v160 = HIDWORD(v1231);
            v313 = v1230;
            v314 = *v312;
            *v312 = 0;
            *((_QWORD *)v313 + v160) = v314;
          }
          else
          {
            v161 = var60[0];
            var60[0] = 0;
            *((_QWORD *)v1230 + HIDWORD(v1231)) = v161;
          }
          HIDWORD(v1231) = v160 + 1;
          v162 = (WTF::StringImpl *)var60[0];
          var60[0] = 0;
          if (v162)
          {
            if (*(_DWORD *)v162 == 2)
            {
              WTF::StringImpl::~StringImpl(v162, v130, (uint64_t)v131, v132, v133, v124, v125, v126);
              WTF::fastFree(v224, v225, v226, v227, v228, v229, v230, v231);
            }
            else
            {
              *(_DWORD *)v162 -= 2;
            }
          }
          if (*((_DWORD *)v158 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v158, (uint64_t)v130, (uint64_t)v131, v132, v133, v124, v125, v126))
          {
LABEL_385:
            JSC::CachedCall::~CachedCall((JSC::CachedCall *)&__dst, v130, (uint64_t)v131, v132, v133, v124, v125, v126);
            v114 = 0;
            goto LABEL_642;
          }
          v163 = (int)v1216;
          v1239 = (unint64_t)v1216;
          if (v1215 == v1216)
          {
            v127 = (_DWORD)v1216 + 1;
            v430 = v1213;
            if ((int)v1216 + 1 > v1213)
              break;
            v880 = (WTF::StringImpl *)*v1203;
            if (*v1203
              && *((_DWORD *)v880 + 1) > v1216
              && (WTF::StringImpl::at(v880, v1216) & 0xFC00) == 0xD800
              && (v1169 = (WTF::StringImpl *)*v1203) != 0
              && *((_DWORD *)v1169 + 1) > v127)
            {
              v13 = v1196;
              if ((WTF::StringImpl::at(v1169, v163 + 1) & 0xFC00) == 0xDC00)
              {
                v127 = v163 + 2;
                if (v163 + 2 > v430)
                  break;
              }
            }
            else
            {
              v13 = v1196;
            }
          }
          else
          {
            v127 = v1216;
          }
          v119 = a1;
        }
        JSC::CachedCall::~CachedCall((JSC::CachedCall *)&__dst, v130, (uint64_t)v131, v132, v133, v124, v125, v126);
LABEL_640:
        v431 = HIDWORD(v1231);
        if (!v1239)
        {
          v114 = (unint64_t)v13;
          if (!HIDWORD(v1231))
            goto LABEL_642;
        }
        v437 = v1213;
        if (v1213 > v1239)
        {
          if (HIDWORD(v1234) == (_DWORD)v1234)
          {
            if (!WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int &>((uint64_t)&v1233, (int *)&v1239, (int *)&v1213, (uint64_t)a4, a5, a6, a7, a8))
            {
              v674 = &v1214;
              goto LABEL_933;
            }
            v431 = HIDWORD(v1231);
          }
          else
          {
            v467 = HIDWORD(v1234) + 1;
            v468 = (_DWORD *)((char *)v1233 + 8 * HIDWORD(v1234));
            *v468 = v1239;
            v468[1] = v437;
            HIDWORD(v1234) = v467;
          }
        }
        v438 = v1233;
        v439 = HIDWORD(v1234);
        v440 = v1230;
        v441 = *(_QWORD *)(a1 + 56);
        v1242 = v441;
        if (HIDWORD(v1234) != 1 || v431)
        {
          v442 = SHIDWORD(v1234);
          if (HIDWORD(v1234) != 2 || v431 != 1)
          {
            if (SHIDWORD(v1234) < 1)
            {
              v444 = 0;
              v443 = 0;
            }
            else
            {
              LODWORD(v443) = 0;
              v444 = 0;
              v445 = (_DWORD *)((char *)v1233 + 4);
              do
              {
                v446 = *v445 - *(v445 - 1);
                v447 = __OFADD__((_DWORD)v443, v446);
                v448 = v443 + v446;
                if (v447)
                  v444 = 1;
                if (v447)
                  v443 = v443;
                else
                  v443 = v448;
                v445 += 2;
                --v439;
              }
              while (v439);
            }
            v449 = 1;
            if (v431 >= 1)
            {
              v450 = v1230;
              v451 = v443;
              v452 = v431;
              do
              {
                v453 = *(_QWORD *)v450;
                if (*(_QWORD *)v450)
                {
                  v454 = *(unsigned int *)(v453 + 4);
                  v443 = v454 + (int)v451;
                  v455 = (unint64_t)(v443 + 0x80000000) >> 32;
                  if ((_DWORD)v454)
                    v456 = v455 == 0;
                  else
                    v456 = 0;
                  if (v456
                    || (!v455 ? (v443 = v443) : (v444 = 1, v443 = v451), (_DWORD)v454))
                  {
                    if ((*(_BYTE *)(v453 + 16) & 4) == 0)
                      v449 = 0;
                  }
                }
                else
                {
                  v443 = v451;
                }
                v450 = (WTF *)((char *)v450 + 8);
                v451 = v443;
                --v452;
              }
              while (v452);
            }
            if (!v444)
            {
              if (!(_DWORD)v443)
              {
                v114 = *(_QWORD *)(v441 + 41968);
LABEL_642:
                v432 = v1230;
                if (!HIDWORD(v1231))
                {
LABEL_643:
                  if (v1232 != (_QWORD *)v432 && v432 != 0)
                  {
                    v1230 = 0;
                    LODWORD(v1231) = 0;
                    WTF::fastFree((unint64_t)v432, (void *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                  }
                  v434 = v1233;
                  if (v1235 != (_DWORD *)v1233 && v1233 != 0)
                  {
                    v1233 = 0;
                    LODWORD(v1234) = 0;
                    WTF::fastFree((unint64_t)v434, (void *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                  }
                  goto LABEL_653;
                }
                v465 = 8 * HIDWORD(v1231);
                StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                while (1)
                {
                  v1170 = *(_QWORD *)v432;
                  *(_QWORD *)v432 = 0;
                  if (v1170)
                  {
                    if (*(_DWORD *)v1170 == 2)
                    {
                      WTF::StringImpl::~StringImpl((WTF::StringImpl *)v1170, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                      v1171 = *(_QWORD *)(StatusReg + 752);
                      if (v1171)
                      {
                        if (!(v1170 >> 43)
                          && ((*(unsigned int *)((char *)&bmalloc_megapage_table + ((v1170 >> 27) & 0x1FFFFFFFFCLL)) >> SBYTE3(v1170)) & 1) != 0)
                        {
LABEL_1608:
                          v1172 = *(unsigned int *)(v1171 + 8000);
                          if (v1172 >= 0x3E7)
                          {
                            pas_thread_local_cache_append_deallocation_slow(v1171, v1170, (os_unfair_lock_s *)5, (uint64_t)a4, a5, a6, a7, a8);
                          }
                          else
                          {
                            *(_QWORD *)(v1171 + 8 * v1172) = v1170 | 0x5000000000000;
                            *(_DWORD *)(v1171 + 8000) = v1172 + 1;
                          }
                          goto LABEL_1602;
                        }
                        if (v1170 >> 24 < *off_1ECF425F8 || off_1ECF425F8[1] <= v1170 >> 24)
                        {
                          a4 = 0;
                        }
                        else
                        {
                          a4 = (JSC::JSRopeString *)((*(_DWORD *)((char *)off_1ECF425F8
                                                                + ((((v1170 >> 24) - *off_1ECF425F8) >> 2) & 0x1FFFFFFFFFFFFFFCLL)
                                                                + 24) >> (2
                                                                        * ((BYTE3(v1170) - *(_BYTE *)off_1ECF425F8) & 0xF))) & 3);
                          if ((_DWORD)a4 == 1)
                            goto LABEL_1608;
                        }
                        bmalloc_heap_config_specialized_try_deallocate_not_small_exclusive_segregated(v1171, v1170, 1, (uint64_t)a4, a5, a6, a7, a8);
                      }
                      else
                      {
                        pas_try_deallocate_slow_no_cache(v1170, (uint64_t)&bmalloc_heap_config, 1);
                      }
                    }
                    else
                    {
                      *(_DWORD *)v1170 -= 2;
                    }
                  }
LABEL_1602:
                  v432 = (WTF *)((char *)v432 + 8);
                  v465 -= 8;
                  if (!v465)
                  {
                    v432 = v1230;
                    goto LABEL_643;
                  }
                }
              }
              if (*v1203)
                v469 = (*(unsigned __int8 *)(*v1203 + 16) >> 2) & 1;
              else
                v469 = 1;
              v1200 = (JSC::RegExp *)v441;
              if ((v469 & v449) == 1)
              {
                if ((v443 & 0x80000000) == 0)
                {
                  WTF::tryFastCompactMalloc((WTF *)(v443 + 20), &__dst);
                  v470 = __dst;
                  if (__dst)
                  {
                    v471 = (char *)__dst + 20;
                    *(_DWORD *)__dst = 2;
                    v470[1] = v443;
                    *((_QWORD *)v470 + 1) = v470 + 5;
                    v470[4] = 4;
                    if ((int)v442 <= v431)
                      v472 = v431;
                    else
                      v472 = v442;
                    if ((int)v472 >= 1)
                    {
                      v473 = 0;
                      v474 = 0;
                      v475 = (_DWORD *)((char *)v438 + 4);
                      do
                      {
                        if (v473 < v442)
                        {
                          v476 = *v1203;
                          if (*v1203
                            && (v477 = *(unsigned int *)(v476 + 4),
                                v478 = *(v475 - 1),
                                v477 > v478))
                          {
                            v479 = *(unsigned int *)(v476 + 16);
                            v480 = *(char **)(v476 + 8);
                            v481 = *v475 - v478;
                            if ((int)v477 - (int)v478 > v481 || (v481 = v477 - v478, (_DWORD)v478))
                            {
                              v482 = (v479 >> 2) & 1;
                              v483 = v477 - v478;
                              LODWORD(v477) = v481;
                              if ((_DWORD)v482)
                              {
                                if (v483 < v481)
                                  goto LABEL_1386;
                                v480 += v478;
                                LODWORD(v477) = v481;
                              }
                              else
                              {
                                if (v483 < v481)
                                  goto LABEL_1386;
                                v480 += 2 * v478;
                              }
                            }
                            else
                            {
                              v477 = v477 & 0xFFFFFFFEFFFFFFFFLL | (((v479 >> 2) & 1) << 32);
                            }
                            v484 = &v471[v474];
                            if ((_DWORD)v477 == 1)
                            {
                              *v484 = *v480;
                              LODWORD(v477) = 1;
                            }
                            else if ((_DWORD)v477)
                            {
                              memcpy(v484, v480, v477);
                            }
                          }
                          else
                          {
                            LODWORD(v477) = 0;
                          }
                          v474 += v477;
                        }
                        if (v473 < v431)
                        {
                          v485 = *((_QWORD *)v440 + v473);
                          if (v485)
                          {
                            v486 = *(char **)(v485 + 8);
                            v487 = *(_DWORD *)(v485 + 4);
                            v488 = &v471[v474];
                            if (v487 == 1)
                            {
                              *v488 = *v486;
                              v487 = 1;
                            }
                            else if (v487)
                            {
                              memcpy(v488, v486, *(unsigned int *)(v485 + 4));
                            }
                          }
                          else
                          {
                            v487 = 0;
                          }
                          v474 += v487;
                        }
                        ++v473;
                        v475 += 2;
                      }
                      while (v472 != v473);
                    }
                    __dst = v470;
                    goto LABEL_729;
                  }
                }
              }
              else if (v443 <= 0x7FFFFFEF)
              {
                WTF::tryFastCompactMalloc((WTF *)(2 * v443 + 20), &__dst);
                v583 = __dst;
                if (__dst)
                {
                  v584 = (char *)__dst + 20;
                  *(_DWORD *)__dst = 2;
                  v583[1] = v443;
                  *((_QWORD *)v583 + 1) = v583 + 5;
                  v583[4] = 0;
                  if ((int)v442 <= v431)
                    v585 = v431;
                  else
                    v585 = v442;
                  if ((int)v585 >= 1)
                  {
                    v586 = 0;
                    v587 = 0;
                    do
                    {
                      if (v586 < v442)
                      {
                        v588 = *v1203;
                        if (*v1203
                          && (v589 = *(unsigned int *)(v588 + 4),
                              v590 = *((unsigned int *)v438 + 2 * v586),
                              v589 > v590))
                        {
                          v591 = *(unsigned int *)(v588 + 16);
                          v592 = *(int8x16_t **)(v588 + 8);
                          v593 = *((_DWORD *)v438 + 2 * v586 + 1) - v590;
                          if ((int)v589 - (int)v590 > v593 || (v593 = v589 - v590, (_DWORD)v590))
                          {
                            v594 = (v591 >> 2) & 1;
                            v595 = v589 - v590;
                            v596 = v593;
                            if ((_DWORD)v594)
                            {
                              if (v595 < v593)
                                goto LABEL_1386;
                              v592 = (int8x16_t *)((char *)v592 + v590);
                              v596 = v593 | 0x100000000;
                            }
                            else
                            {
                              if (v595 < v593)
                                goto LABEL_1386;
                              v592 = (int8x16_t *)((char *)v592 + 2 * v590);
                            }
                          }
                          else
                          {
                            v596 = v589 & 0xFFFFFFFEFFFFFFFFLL | (((v591 >> 2) & 1) << 32);
                          }
                          v597 = &v584[2 * v587];
                          if ((v596 & 0x100000000) != 0)
                          {
                            if (v596 < 0x40)
                            {
                              v1100 = &v584[2 * v587];
                            }
                            else
                            {
                              v1100 = &v597[2 * (v596 & 0xFFFFFFC0)];
                              v1101 = &v584[2 * v587];
                              do
                              {
                                v1246.val[0] = *v592;
                                v1102 = v592[1];
                                v1250.val[0] = v592[2];
                                v1103 = v592[3];
                                v592 += 4;
                                v1254.val[1] = 0uLL;
                                v1254.val[0] = v1103;
                                v1250.val[1] = 0u;
                                v1258.val[0] = v1102;
                                v1246.val[1] = 0u;
                                v1104 = v1101;
                                vst2q_s8(v1104, v1246);
                                v1104 += 32;
                                v1258.val[1] = 0u;
                                vst2q_s8(v1104, v1258);
                                v1105 = v1101 + 64;
                                vst2q_s8(v1105, v1250);
                                v1106 = v1101 + 96;
                                vst2q_s8(v1106, v1254);
                                v1101 += 128;
                              }
                              while (v1101 != v1100);
                            }
                            while (v1100 != &v597[2 * v596])
                            {
                              v1107 = v592->u8[0];
                              v592 = (int8x16_t *)((char *)v592 + 1);
                              *(_WORD *)v1100 = v1107;
                              v1100 += 2;
                            }
                          }
                          else if ((_DWORD)v596 == 1)
                          {
                            *(_WORD *)v597 = v592->i16[0];
                            LODWORD(v596) = 1;
                          }
                          else if ((_DWORD)v596)
                          {
                            memcpy(v597, v592, 2 * v596);
                          }
                        }
                        else
                        {
                          LODWORD(v596) = 0;
                        }
                        v587 += v596;
                      }
                      if (v586 < v431)
                      {
                        v598 = *((_QWORD *)v440 + v586);
                        if (v598)
                        {
                          v599 = *(int8x16_t **)(v598 + 8);
                          v600 = *(unsigned int *)(v598 + 4);
                          v601 = &v584[2 * v587];
                          if ((*(_BYTE *)(v598 + 16) & 4) != 0)
                          {
                            if (v600 >= 0x40)
                            {
                              v602 = &v601[2 * (v600 & 0xFFFFFFC0)];
                              v604 = &v584[2 * v587];
                              do
                              {
                                v1244.val[0] = *v599;
                                v605 = v599[1];
                                v1248.val[0] = v599[2];
                                v606 = v599[3];
                                v599 += 4;
                                v1256.val[1] = 0u;
                                v1256.val[0] = v606;
                                v1248.val[1] = 0u;
                                v1252.val[0] = v605;
                                v1244.val[1] = 0u;
                                v607 = v604;
                                vst2q_s8(v607, v1244);
                                v607 += 32;
                                v1252.val[1] = 0u;
                                vst2q_s8(v607, v1252);
                                v608 = v604 + 64;
                                vst2q_s8(v608, v1248);
                                v609 = v604 + 96;
                                vst2q_s8(v609, v1256);
                                v604 += 128;
                              }
                              while (v604 != v602);
                            }
                            else
                            {
                              v602 = &v584[2 * v587];
                            }
                            while (v602 != &v601[2 * v600])
                            {
                              v603 = v599->u8[0];
                              v599 = (int8x16_t *)((char *)v599 + 1);
                              *(_WORD *)v602 = v603;
                              v602 += 2;
                            }
                          }
                          else if ((_DWORD)v600 == 1)
                          {
                            *(_WORD *)v601 = v599->i16[0];
                            LODWORD(v600) = 1;
                          }
                          else if ((_DWORD)v600)
                          {
                            memcpy(v601, v599, 2 * v600);
                          }
                        }
                        else
                        {
                          LODWORD(v600) = 0;
                        }
                        v587 += v600;
                      }
                      ++v586;
                    }
                    while (v586 != v585);
                  }
                  __dst = v583;
LABEL_729:
                  v114 = JSC::jsString((uint64_t)v1200, (JSC::VM *)&__dst, v198, v199, v200, v201, v202, v203);
                  v489 = (WTF::StringImpl *)__dst;
                  __dst = 0;
                  if (!v489)
                    goto LABEL_642;
LABEL_730:
                  if (*(_DWORD *)v489 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v489, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                    WTF::fastFree(v505, v506, v507, v508, v509, v510, v511, v512);
                  }
                  else
                  {
                    *(_DWORD *)v489 -= 2;
                  }
                  goto LABEL_642;
                }
              }
            }
            v674 = (JSC::VM **)&v1242;
LABEL_933:
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)v674);
            v114 = 0;
            goto LABEL_642;
          }
          v491 = *(unsigned int *)v1233;
          v490 = *((_DWORD *)v1233 + 1);
          v492 = (v490 - v491);
          if (v490 == (_DWORD)v491)
          {
            v495 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
            goto LABEL_751;
          }
          v493 = *v1203;
          if ((*(_DWORD *)(*v1203 + 16) & 4) != 0)
          {
            if (v492 <= 0xC)
            {
              v494 = (_BYTE *)(*(_QWORD *)(v493 + 8) + v491);
              v495 = (int *)WTF::fastCompactMalloc((WTF *)(v492 + 20));
              v496 = v495 + 5;
              *v495 = 2;
              v495[1] = v492;
              *((_QWORD *)v495 + 1) = v495 + 5;
              v495[4] = 4;
              if ((_DWORD)v492 == 1)
                *v496 = *v494;
              else
                memcpy(v496, v494, v492);
              goto LABEL_751;
            }
          }
          else if (v492 <= 6)
          {
            WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v493 + 8) + 2 * v491), v492, (uint64_t *)&__dst);
            v495 = (int *)__dst;
            goto LABEL_751;
          }
          v630 = (_DWORD *)*v1203;
          if ((*(_DWORD *)(*v1203 + 16) & 3) == 2)
            v630 = *(_DWORD **)(v493 + 24);
          v631 = WTF::fastCompactMalloc((WTF *)0x20);
          v495 = (int *)v631;
          v632 = *(_DWORD *)(v493 + 16);
          v633 = *(_QWORD *)(v493 + 8);
          *v630 += 2;
          *(_DWORD *)v631 = 2;
          *(_DWORD *)(v631 + 4) = v492;
          if ((v632 & 4) != 0)
          {
            *(_QWORD *)(v631 + 8) = v633 + v491;
            *(_DWORD *)(v631 + 16) = 6;
          }
          else
          {
            *(_QWORD *)(v631 + 8) = v633 + 2 * v491;
            *(_DWORD *)(v631 + 16) = 2;
          }
          *(_QWORD *)(v631 + 24) = v630;
LABEL_751:
          v1241 = (const WTF::String *)v495;
          v514 = *((unsigned int *)v438 + 2);
          v513 = *((_DWORD *)v438 + 3);
          v515 = (v513 - v514);
          if (v513 == (_DWORD)v514)
          {
            v518 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
            goto LABEL_757;
          }
          v516 = *v1203;
          if ((*(_DWORD *)(*v1203 + 16) & 4) != 0)
          {
            if (v515 <= 0xC)
            {
              v517 = (_BYTE *)(*(_QWORD *)(v516 + 8) + v514);
              v518 = (int *)WTF::fastCompactMalloc((WTF *)(v515 + 20));
              v519 = v518 + 5;
              *v518 = 2;
              v518[1] = v515;
              *((_QWORD *)v518 + 1) = v518 + 5;
              v518[4] = 4;
              __dst = v518;
              if ((_DWORD)v515 == 1)
                *v519 = *v517;
              else
                memcpy(v519, v517, v515);
              goto LABEL_757;
            }
          }
          else if (v515 <= 6)
          {
            WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v516 + 8) + 2 * v514), v515, (uint64_t *)&__dst);
            v518 = (int *)__dst;
            goto LABEL_757;
          }
          v634 = (_DWORD *)*v1203;
          if ((*(_DWORD *)(*v1203 + 16) & 3) == 2)
            v634 = *(_DWORD **)(v516 + 24);
          v635 = WTF::fastCompactMalloc((WTF *)0x20);
          v518 = (int *)v635;
          v636 = *(_DWORD *)(v516 + 16);
          v637 = *(_QWORD *)(v516 + 8);
          *v634 += 2;
          *(_DWORD *)v635 = 2;
          *(_DWORD *)(v635 + 4) = v515;
          if ((v636 & 4) != 0)
          {
            *(_QWORD *)(v635 + 8) = v637 + v514;
            *(_DWORD *)(v635 + 16) = 6;
          }
          else
          {
            *(_QWORD *)(v635 + 8) = v637 + 2 * v514;
            *(_DWORD *)(v635 + 16) = 2;
          }
          *(_QWORD *)(v635 + 24) = v634;
LABEL_757:
          v1240 = (WTF::StringImpl *)v518;
          v520 = *(int **)(a1 + 56);
          var60[0] = v520;
          if (v1241)
            v521 = *((_DWORD *)v1241 + 1);
          else
            v521 = 0;
          v522 = *(_QWORD *)v440;
          if (*(_QWORD *)v440)
            v523 = *(_DWORD *)(v522 + 4);
          else
            v523 = 0;
          if (v518)
            v524 = v518[1];
          else
            v524 = 0;
          if (v521)
          {
            if (v523)
            {
              if (v524)
              {
                if (((v524 | v523) & 0x80000000) == 0)
                {
                  v525 = __OFADD__(v523, v524);
                  if ((v521 & 0x80000000) == 0 && !v525 && !__OFADD__(v521, v523 + v524))
                  {
                    if (v521 + (unint64_t)v523 + v524 + 20 < 0x40)
                    {
                      if (v1241)
                        v526 = *((_DWORD *)v1241 + 1);
                      else
                        v526 = 0;
                      if (v522)
                        v527 = *(_DWORD *)(v522 + 4);
                      else
                        v527 = 0;
                      if (v518)
                        v528 = v518[1];
                      else
                        v528 = 0;
                      if ((v528 | v527) < 0
                        || ((v447 = __OFADD__(v527, v528), v529 = v527 + v528, !v447) ? (v530 = 0) : (v530 = 1),
                            v526 < 0 || (v530 & 1) != 0 || (v531 = (v526 + v529), __OFADD__(v526, v529))))
                      {
                        __dst = 0;
                        goto LABEL_928;
                      }
                      if (v1241 && (*((_BYTE *)v1241 + 16) & 4) == 0)
                      {
                        v533 = 0;
                      }
                      else if (v522)
                      {
                        v532 = *(_DWORD *)(v522 + 16);
                        v533 = (v532 >> 2) & 1;
                        if (v518 && (v532 & 4) != 0)
                          goto LABEL_792;
                      }
                      else
                      {
                        if (v518)
                        {
LABEL_792:
                          v533 = (*((unsigned __int8 *)v518 + 16) >> 2) & 1;
                          goto LABEL_793;
                        }
                        v533 = 1;
                      }
LABEL_793:
                      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v531, v533, (uint64_t)v1241, v522, (uint64_t)v518, (int **)&__dst);
                      v540 = (WTF::StringImpl *)__dst;
                      if (__dst)
                      {
                        __dst = 0;
                        v1215 = v540;
                        v114 = JSC::JSString::create((uint64_t)v520, (JSC::VM *)&v1215, v534, v535, v536, v537, v538, v539);
                        v541 = v1215;
                        v1215 = 0;
                        if (v541)
                        {
                          if (*(_DWORD *)v541 == 2)
                          {
                            WTF::StringImpl::~StringImpl(v541, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                            WTF::fastFree(v675, v676, v677, v678, v679, v680, v681, v682);
                          }
                          else
                          {
                            *(_DWORD *)v541 -= 2;
                          }
                        }
LABEL_795:
                        v542 = (WTF::StringImpl *)__dst;
                        __dst = 0;
                        if (!v542)
                          goto LABEL_798;
LABEL_796:
                        if (*(_DWORD *)v542 != 2)
                        {
                          *(_DWORD *)v542 -= 2;
                          goto LABEL_798;
                        }
                        goto LABEL_823;
                      }
LABEL_928:
                      JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)var60);
                      v114 = 0;
                      goto LABEL_795;
                    }
                    v610 = JSC::jsString((JSC *)v520, (JSC::VM *)&v1241, v1241, v522, a5, a6, a7, a8);
                    v617 = (JSC::JSString *)JSC::jsString((JSC *)v520, v440, v611, v612, v613, v614, v615, v616);
                    v624 = JSC::jsString((JSC *)v520, (JSC::VM *)&v1240, v618, v619, v620, v621, v622, v623);
                    v629 = JSC::JSRopeString::create((JSC::JSRopeString *)v520, v610, v617, v624, v625, v626, v627, v628);
                    goto LABEL_886;
                  }
                }
                p_dst = (void **)var60;
LABEL_930:
                JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)p_dst);
                v114 = 0;
                goto LABEL_798;
              }
              __dst = v520;
              if (v1241)
              {
                v698 = *((unsigned int *)v1241 + 1);
                if ((_DWORD)v698)
                {
                  if (v522)
                  {
                    v699 = *(unsigned int *)(v522 + 4);
                    if ((_DWORD)v699)
                    {
                      v700 = __OFADD__((_DWORD)v698, (_DWORD)v699);
                      if (((v699 | v698) & 0x80000000) == 0 && !v700)
                      {
                        if ((unint64_t)(v698 + v699 + 20) < 0x30)
                        {
                          WTF::tryMakeString<WTF::String,WTF::String>((uint64_t)&v1241, (uint64_t *)v440, (int **)&v1215);
                          v707 = v1215;
                          if (v1215)
                          {
                            v1215 = 0;
                            v1211 = v707;
                            v114 = JSC::JSString::create((uint64_t)v520, (JSC::VM *)&v1211, v701, v702, v703, v704, v705, v706);
                            v708 = v1211;
                            v1211 = 0;
                            if (v708)
                            {
                              if (*(_DWORD *)v708 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v708, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                                WTF::fastFree(v1067, v1068, v1069, v1070, v1071, v1072, v1073, v1074);
                              }
                              else
                              {
                                *(_DWORD *)v708 -= 2;
                              }
                            }
                          }
                          else
                          {
                            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&__dst);
                            v114 = 0;
                          }
                          v542 = v1215;
                          v1215 = 0;
                          if (v542)
                          {
                            if (*(_DWORD *)v542 == 2)
                            {
LABEL_823:
                              WTF::StringImpl::~StringImpl(v542, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                              WTF::fastFree(v564, v565, v566, v567, v568, v569, v570, v571);
                              goto LABEL_798;
                            }
                            *(_DWORD *)v542 -= 2;
                          }
                          goto LABEL_798;
                        }
                        v664 = JSC::jsString((JSC *)v520, (JSC::VM *)&v1241, v1241, v522, a5, a6, a7, a8);
                        v666 = (JSC *)v520;
                        v665 = v440;
                        goto LABEL_926;
                      }
LABEL_1323:
                      p_dst = &__dst;
                      goto LABEL_930;
                    }
                  }
                  v643 = &v1241;
                  goto LABEL_917;
                }
              }
LABEL_1012:
              v644 = (JSC *)v520;
              v643 = (WTF::StringImpl **)v440;
              goto LABEL_918;
            }
            __dst = v520;
            if (v1241)
            {
              v544 = *((unsigned int *)v1241 + 1);
              if ((_DWORD)v544)
              {
                if (!v518 || (v545 = v518[1], !(_DWORD)v545))
                {
                  v114 = JSC::jsString((JSC *)v520, (JSC::VM *)&v1241, v1241, v522, a5, a6, a7, a8);
                  goto LABEL_798;
                }
                v546 = __OFADD__((_DWORD)v544, (_DWORD)v545);
                if (((v545 | v544) & 0x80000000) != 0 || v546)
                {
                  JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&__dst);
                  v114 = 0;
                  goto LABEL_798;
                }
                if ((unint64_t)(v544 + v545 + 20) >= 0x30)
                {
                  v645 = JSC::jsString((JSC *)v520, (JSC::VM *)&v1241, v1241, v522, a5, a6, a7, a8);
                  v652 = (JSC::JSString *)JSC::jsString((JSC *)v520, (JSC::VM *)&v1240, v646, v647, v648, v649, v650, v651);
                  v114 = JSC::JSRopeString::create((JSC::JSRopeString *)v520, v645, v652, v653, v654, v655, v656, v657);
                  goto LABEL_798;
                }
                if ((*((_BYTE *)v1241 + 16) & 4) != 0)
                  v547 = (*((unsigned __int8 *)v518 + 16) >> 2) & 1;
                else
                  v547 = 0;
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v544 + v545), v547, (uint64_t)v1241, (uint64_t)v518, (int **)&v1215);
                v554 = v1215;
                if (v1215)
                {
                  v1215 = 0;
                  v1211 = v554;
                  v114 = JSC::JSString::create((uint64_t)v520, (JSC::VM *)&v1211, v548, v549, v550, v551, v552, v553);
                  v555 = v1211;
                  v1211 = 0;
                  if (!v555)
                    goto LABEL_817;
                  if (*(_DWORD *)v555 != 2)
                  {
                    *(_DWORD *)v555 -= 2;
                    goto LABEL_817;
                  }
                  goto LABEL_937;
                }
                goto LABEL_1514;
              }
            }
          }
          else
          {
            __dst = v520;
            if (v522)
            {
              v572 = *(unsigned int *)(v522 + 4);
              if ((_DWORD)v572)
              {
                if (!v518)
                  goto LABEL_1012;
                v573 = v518[1];
                if (!(_DWORD)v573)
                  goto LABEL_1012;
                v574 = __OFADD__((_DWORD)v572, (_DWORD)v573);
                if (((v573 | v572) & 0x80000000) != 0 || v574)
                  goto LABEL_1323;
                if ((unint64_t)(v572 + v573 + 20) >= 0x30)
                {
                  v664 = JSC::jsString((JSC *)v520, v440, v1241, v522, a5, a6, a7, a8);
                  v665 = (JSC::VM *)&v1240;
                  v666 = (JSC *)v520;
LABEL_926:
                  v667 = (JSC::JSString *)JSC::jsString(v666, v665, v658, v659, v660, v661, v662, v663);
                  v629 = JSC::JSRopeString::create((JSC::JSRopeString *)v520, v664, v667, v668, v669, v670, v671, v672);
                  goto LABEL_886;
                }
                if ((*(_BYTE *)(v522 + 16) & 4) != 0)
                  v575 = (*((unsigned __int8 *)v518 + 16) >> 2) & 1;
                else
                  v575 = 0;
                WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((v572 + v573), v575, v522, (uint64_t)v518, (int **)&v1215);
                v582 = v1215;
                if (v1215)
                {
                  v1215 = 0;
                  v1211 = v582;
                  v114 = JSC::JSString::create((uint64_t)v520, (JSC::VM *)&v1211, v576, v577, v578, v579, v580, v581);
                  v555 = v1211;
                  v1211 = 0;
                  if (!v555)
                    goto LABEL_817;
                  if (*(_DWORD *)v555 != 2)
                  {
                    *(_DWORD *)v555 -= 2;
                    goto LABEL_817;
                  }
LABEL_937:
                  WTF::StringImpl::~StringImpl(v555, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v683, v684, v685, v686, v687, v688, v689, v690);
                  goto LABEL_817;
                }
LABEL_1514:
                JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&__dst);
                v114 = 0;
LABEL_817:
                v542 = v1215;
                v1215 = 0;
                if (v542)
                  goto LABEL_796;
LABEL_798:
                v543 = v1240;
                v1240 = 0;
                if (v543)
                {
                  if (*(_DWORD *)v543 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v543, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                    WTF::fastFree(v556, v557, v558, v559, v560, v561, v562, v563);
                  }
                  else
                  {
                    *(_DWORD *)v543 -= 2;
                  }
                }
                v489 = v1241;
                v1241 = 0;
                if (!v489)
                  goto LABEL_642;
                goto LABEL_730;
              }
            }
          }
          v643 = &v1240;
LABEL_917:
          v644 = (JSC *)v520;
LABEL_918:
          v629 = JSC::jsString(v644, (JSC::VM *)v643, v1241, v522, a5, a6, a7, a8);
LABEL_886:
          v114 = v629;
          goto LABEL_798;
        }
        v497 = *v1203;
        if (*v1203)
          v498 = *(_DWORD *)(v497 + 4);
        else
          v498 = 0;
        v499 = *((_DWORD *)v1233 + 1) - *(_DWORD *)v1233;
        if (*(int *)v1233 <= 0)
        {
          v114 = (unint64_t)v1196;
          if (v499 >= v498)
            goto LABEL_642;
        }
        if (v499 >= v498)
          v500 = v498;
        else
          v500 = v499;
        if (!(_DWORD)v500)
        {
          v503 = &WTF::StringImpl::s_emptyAtomString;
          WTF::StringImpl::s_emptyAtomString += 2;
          v1215 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
          goto LABEL_820;
        }
        v501 = *(_DWORD *)v1233 & ~(*(int *)v1233 >> 31);
        if ((*(_DWORD *)(v497 + 16) & 4) != 0)
        {
          if (v500 <= 0xC)
          {
            v502 = (_BYTE *)(*(_QWORD *)(v497 + 8) + v501);
            v503 = (int *)WTF::fastCompactMalloc((WTF *)(v500 + 20));
            v504 = v503 + 5;
            *v503 = 2;
            v503[1] = v500;
            *((_QWORD *)v503 + 1) = v503 + 5;
            v503[4] = 4;
            v1215 = (WTF::StringImpl *)v503;
            if ((_DWORD)v500 == 1)
              *v504 = *v502;
            else
              memcpy(v504, v502, v500);
            goto LABEL_820;
          }
        }
        else if (v500 <= 6)
        {
          WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v497 + 8) + 2 * v501), v500, (uint64_t *)&v1215);
          v503 = (int *)v1215;
          goto LABEL_820;
        }
        v638 = v441;
        v639 = (_DWORD *)*v1203;
        if ((*(_DWORD *)(v497 + 16) & 3) == 2)
          v639 = *(_DWORD **)(v497 + 24);
        v640 = WTF::fastCompactMalloc((WTF *)0x20);
        v503 = (int *)v640;
        v641 = *(_DWORD *)(v497 + 16);
        v642 = *(_QWORD *)(v497 + 8);
        *v639 += 2;
        *(_DWORD *)v640 = 2;
        *(_DWORD *)(v640 + 4) = v500;
        if ((v641 & 4) != 0)
        {
          *(_QWORD *)(v640 + 8) = v642 + v501;
          *(_DWORD *)(v640 + 16) = 6;
        }
        else
        {
          *(_QWORD *)(v640 + 8) = v642 + 2 * v501;
          *(_DWORD *)(v640 + 16) = 2;
        }
        *(_QWORD *)(v640 + 24) = v639;
        v1215 = (WTF::StringImpl *)v640;
        v441 = v638;
LABEL_820:
        __dst = v503;
        v114 = JSC::jsString(v441, (JSC::VM *)&__dst, a3, (uint64_t)a4, a5, a6, a7, a8);
        v489 = (WTF::StringImpl *)__dst;
        __dst = 0;
        if (!v489)
          goto LABEL_642;
        goto LABEL_730;
      }
LABEL_60:
      v1194 = v23;
      v1187 = (uint64_t)v18;
      v49 = 0;
      v50 = (uint64_t *)(a1 + 2200);
      while (1)
      {
        v51 = *(_QWORD *)(a1 + 56);
        JSC::RegExp::match((uint64_t)v1200, a1, v1203, v49, (uint64_t)v50, a6, a7, a8);
        LODWORD(v56) = v55;
        if (!*(_DWORD *)(v51 + 80))
          goto LABEL_62;
        v280 = *(_DWORD *)(v51 + 80);
        if ((v280 & 0x27) != 0 && (v280 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v51 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
        if (*(_QWORD *)(v51 + 16))
        {
          v58 = 0;
          v57 = 0;
          v56 = -1;
        }
        else
        {
LABEL_62:
          v57 = *v50;
          if ((_DWORD)v56 == -1)
          {
            v58 = 0;
            v56 = -1;
          }
          else
          {
            if (*(_DWORD *)(a1 + 2212) <= 1u)
            {
              __break(0xC471u);
              JUMPOUT(0x198BDC754);
            }
            v58 = (WTF::StringImpl *)*(int *)(v57 + 4);
            v56 = (int)v56;
            *(_QWORD *)(a1 + 2152) = v1200;
            *(_QWORD *)(a1 + 2144) = v13;
            *(_QWORD *)(a1 + 2120) = (int)v56;
            *(_QWORD *)(a1 + 2128) = v58;
            *(_BYTE *)(a1 + 2136) = 0;
            if (*(_DWORD *)(v51 + 760) >= *(unsigned __int8 *)(a1 + 7))
              JSC::Heap::writeBarrierSlowPath(v51 + 192, a1);
          }
        }
        v1215 = (WTF::StringImpl *)v56;
        v1216 = v58;
        v59 = v1214;
        if (*((_DWORD *)v1214 + 20))
        {
          v281 = *((_DWORD *)v1214 + 20);
          if ((v281 & 0x27) != 0 && (v281 & 0x20) == 0)
            JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1214 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
          if (*((_QWORD *)v59 + 2))
            goto LABEL_124;
          v56 = (unint64_t)v1215;
        }
        if (v56 == -1)
          goto LABEL_640;
        if (!(_BYTE)v1207)
        {
          if (v1199)
            v60 = *((_DWORD *)v1199 + 1);
          else
            v60 = 0;
          v61 = v1239;
          if (v1239 >= v56 && !v60)
            goto LABEL_106;
          v62 = HIDWORD(v1234);
          if (HIDWORD(v1234) == (_DWORD)v1234)
          {
            if ((WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1233, (int *)&v1239, (int *)&v1215, (uint64_t)a4, a5, a6, a7, a8) & 1) == 0)
            {
              OutOfMemoryError = JSC::createOutOfMemoryError(a1, (JSC::JSGlobalObject *)this);
              v113 = (JSC::Exception *)OutOfMemoryError;
              if ((OutOfMemoryError & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16
                                                                        * (*(_DWORD *)OutOfMemoryError & 0xFFFFFFFE)
                                                                        + 0x4C)))
              {
                v113 = (JSC::Exception *)JSC::Exception::create((uint64_t)v59, (JSC::VM *)OutOfMemoryError, 0, v107, v108, v109, v110, v111);
              }
              JSC::VM::throwException(v59, (JSC::JSGlobalObject *)a1, v113, v112, v107, v108, v109, v110, v111);
              goto LABEL_124;
            }
          }
          else
          {
            v63 = (_DWORD *)((char *)v1233 + 8 * HIDWORD(v1234));
            *v63 = v1239;
            v63[1] = v56;
            if (v61 == (_DWORD)v56)
              *(_QWORD *)v63 = 0;
            HIDWORD(v1234) = v62 + 1;
          }
          if (!v60)
          {
            __dst = 0;
            v213 = HIDWORD(v1231);
            if (HIDWORD(v1231) == (_DWORD)v1231)
            {
              WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String>((uint64_t)&v1230, (unint64_t)&__dst);
            }
            else
            {
              *((_QWORD *)v1230 + HIDWORD(v1231)) = 0;
              HIDWORD(v1231) = v213 + 1;
            }
            v214 = (WTF::StringImpl *)__dst;
            __dst = 0;
            if (v214)
            {
              if (*(_DWORD *)v214 == 2)
              {
                WTF::StringImpl::~StringImpl(v214, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v251, v252, v253, v254, v255, v256, v257, v258);
              }
              else
              {
                *(_DWORD *)v214 -= 2;
              }
            }
            goto LABEL_106;
          }
          __dst = 0;
          *(_QWORD *)&v1218 = 0;
          *(_QWORD *)((char *)&v1218 + 5) = 0;
          v64 = *v1203;
          if (*v1203)
          {
            v65 = *(_QWORD *)(v64 + 8);
            v66 = *(unsigned int *)(v64 + 4) | ((unint64_t)((*(_DWORD *)(v64 + 16) >> 2) & 1) << 32);
          }
          else
          {
            v65 = 0;
            v66 = 0x100000000;
          }
          v67 = v1199;
          if (!v1199)
          {
            v70 = 0;
            goto LABEL_90;
          }
          v68 = *((_DWORD *)v1199 + 4);
          v69 = *((_QWORD *)v1199 + 1);
          v70 = *((unsigned int *)v1199 + 1);
          if ((v68 & 4) != 0)
          {
            if (!(_DWORD)v70)
              goto LABEL_89;
            v71 = 16;
            if (v70 < 0x10)
              v71 = *((unsigned int *)v1199 + 1);
            v72 = v71;
            v73 = (_BYTE *)*((_QWORD *)v1199 + 1);
            do
            {
              if (*v73 == 36)
                goto LABEL_110;
              ++v73;
              --v72;
            }
            while (v72);
            if (v70 < 0x11)
              goto LABEL_89;
            v73 = memchr((void *)(v69 + v71), 36, v70 - v71);
            if (!v73)
              goto LABEL_89;
LABEL_110:
            a8 = (uint64_t)&v73[-v69];
          }
          else
          {
            if (!(_DWORD)v70)
              goto LABEL_89;
            v179 = (int16x8_t *)(v69 + 2 * v70);
            if (v70 > 0x1F)
            {
              v240 = (int16x8_t *)*((_QWORD *)v1199 + 1);
              do
              {
                v241.i64[0] = 0x24002400240024;
                v241.i64[1] = 0x24002400240024;
                v242 = (int8x16_t)vceqq_s16(*v240, v241);
                v241.i16[0] = vmaxvq_u16((uint16x8_t)v242);
                if (v241.i32[0])
                  goto LABEL_303;
                v243 = v240 + 1;
                v244 = &v240[1].i8[14];
                ++v240;
              }
              while (v244 < (char *)v179);
              if (v243 >= v179)
                goto LABEL_89;
              v245.i64[0] = 0x24002400240024;
              v245.i64[1] = 0x24002400240024;
              v242 = (int8x16_t)vceqq_s16(v179[-1], v245);
              v245.i16[0] = vmaxvq_u16((uint16x8_t)v242);
              if (!v245.i32[0])
                goto LABEL_89;
              v240 = v179 - 1;
LABEL_303:
              v53 = 0x3000200010000;
              v52 = (uint16x8_t)vornq_s8((int8x16_t)xmmword_199123280, v242);
              v52.i16[0] = vminvq_u16(v52);
              v80 = &v240->i16[v52.u8[0]];
            }
            else
            {
              v81 = 2 * v70;
              v80 = (__int16 *)*((_QWORD *)v1199 + 1);
              while (*v80 != 36)
              {
                ++v80;
                v81 -= 2;
                if (!v81)
                  goto LABEL_89;
              }
            }
            if (v80 == (__int16 *)v179)
            {
LABEL_89:
              v67 = v1199;
              *(_DWORD *)v1199 += 2;
LABEL_90:
              __dst = v67;
              DWORD2(v1218) = v70;
              goto LABEL_91;
            }
            a8 = ((uint64_t)v80 - v69) >> 1;
          }
          if (a8 != -1)
          {
            JSC::substituteBackreferencesSlow((uint64_t)&__dst, v69, v70 | ((unint64_t)((v68 >> 2) & 1) << 32), v65, v66, (unsigned int *)v57, (uint64_t)v1200, a8, *(double *)v52.i64, *(double *)&v53, v54);
            v70 = DWORD2(v1218);
LABEL_91:
            if ((v70 & 0x80000000) != 0)
            {
              v282 = JSC::createOutOfMemoryError(a1, (JSC::JSGlobalObject *)this);
              v289 = (JSC::Exception *)v282;
              if ((v282 & 0xFFFE000000000002) != 0
                || &JSC::Exception::s_info != (char **)(16
                                                      * *(unsigned int *)(16 * (*(_DWORD *)v282 & 0xFFFFFFFE) + 0x4C)))
              {
                v289 = (JSC::Exception *)JSC::Exception::create((uint64_t)v59, (JSC::VM *)v282, 0, v283, v284, v285, v286, v287);
              }
              JSC::VM::throwException(v59, (JSC::JSGlobalObject *)a1, v289, v288, v283, v284, v285, v286, v287);
            }
            else
            {
              v74 = (WTF::StringImpl *)__dst;
              if (__dst)
                goto LABEL_93;
              if ((_QWORD)v1218 && *(_DWORD *)(v1218 + 4) > v70 + (v70 >> 2))
              {
                if ((*(_BYTE *)(v1218 + 16) & 4) != 0)
                  WTF::StringBuilder::reallocateBuffer<unsigned char>((uint64_t)&__dst, (WTF::AtomStringImpl *)v70, a3, (uint64_t)a4, a5, a6, a7, a8);
                else
                  WTF::StringBuilder::reallocateBuffer<char16_t>((uint64_t)&__dst, (WTF::AtomStringImpl *)v70, a3, (uint64_t)a4, a5, a6, a7, a8);
                v215 = (WTF::StringImpl *)__dst;
                __dst = (void *)v1218;
                *(_QWORD *)&v1218 = 0;
                if (v215)
                {
                  if (*(_DWORD *)v215 == 2)
                  {
                    WTF::StringImpl::~StringImpl(v215, v180, v181, v182, v183, v184, v185, v186);
                    WTF::fastFree(v216, v217, v218, v219, v220, v221, v222, v223);
                  }
                  else
                  {
                    *(_DWORD *)v215 -= 2;
                  }
                }
              }
              WTF::StringBuilder::reifyString((WTF::StringBuilder *)&__dst);
              v74 = (WTF::StringImpl *)__dst;
              if (__dst)
LABEL_93:
                *(_DWORD *)v74 += 2;
              v1211 = v74;
              LODWORD(v75) = HIDWORD(v1231);
              if (HIDWORD(v1231) == (_DWORD)v1231)
              {
                v188 = (uint64_t *)WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1230, HIDWORD(v1231) + 1, (unint64_t)&v1211);
                v75 = HIDWORD(v1231);
                v189 = v1230;
                v190 = *v188;
                *v188 = 0;
                *((_QWORD *)v189 + v75) = v190;
              }
              else
              {
                v1211 = 0;
                *((_QWORD *)v1230 + HIDWORD(v1231)) = v74;
              }
              HIDWORD(v1231) = v75 + 1;
              v76 = v1211;
              v1211 = 0;
              if (v76)
              {
                if (*(_DWORD *)v76 == 2)
                {
                  WTF::StringImpl::~StringImpl(v76, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                  WTF::fastFree(v98, v99, v100, v101, v102, v103, v104, v105);
                }
                else
                {
                  *(_DWORD *)v76 -= 2;
                }
              }
            }
            v77 = (WTF::StringImpl *)v1218;
            *(_QWORD *)&v1218 = 0;
            if (v77)
            {
              if (*(_DWORD *)v77 == 2)
              {
                WTF::StringImpl::~StringImpl(v77, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v82, v83, v84, v85, v86, v87, v88, v89);
              }
              else
              {
                *(_DWORD *)v77 -= 2;
              }
            }
            v78 = (WTF::StringImpl *)__dst;
            __dst = 0;
            if (v78)
            {
              if (*(_DWORD *)v78 == 2)
              {
                WTF::StringImpl::~StringImpl(v78, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v90, v91, v92, v93, v94, v95, v96, v97);
              }
              else
              {
                *(_DWORD *)v78 -= 2;
              }
            }
            if ((v70 & 0x80000000) != 0)
              goto LABEL_124;
            goto LABEL_106;
          }
          goto LABEL_89;
        }
        v259 = HIDWORD(v1234);
        if (HIDWORD(v1234) == (_DWORD)v1234)
        {
          if ((WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1233, (int *)&v1239, (int *)&v1215, (uint64_t)a4, a5, a6, a7, a8) & 1) == 0)
          {
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1214);
            goto LABEL_124;
          }
        }
        else
        {
          v260 = v1239;
          v261 = (_DWORD *)((char *)v1233 + 8 * HIDWORD(v1234));
          *v261 = v1239;
          v261[1] = v56;
          if (v260 == (_DWORD)v56)
            *(_QWORD *)v261 = 0;
          HIDWORD(v1234) = v259 + 1;
        }
        v262 = 0;
        LOBYTE(__dst) = 0;
        *(_QWORD *)&v1218 = 0x800000000;
        v263 = 0uLL;
        v1219 = 0u;
        v1220 = 0u;
        v1221 = 0u;
        v1222 = 0u;
        *((_QWORD *)&v1218 + 1) = (char *)&v1219 + 8;
        v1223 = 0;
        if (v1194)
        {
          v695 = *(_DWORD *)(a1 + 932);
          if (v695)
            v696 = (JSC::VM *)(16 * (v695 & 0xFFFFFFFE));
          else
            v696 = 0;
          v262 = JSC::constructEmptyObject(v1192, v696, (JSC::Structure *)a3, (uint64_t)a4, a5, a6, a7, a8);
        }
        if (*((_DWORD *)v1200 + 6) != -1)
          break;
LABEL_327:
        v264 = (unint64_t)v1215 | 0xFFFE000000000000;
        if ((int)v1215 < 0)
          v264 = COERCE__INT64((double)v1215) + 0x2000000000000;
        if ((unint64_t)v1215 >> 32)
          v265 = COERCE__INT64((double)(unint64_t)v1215) + 0x2000000000000;
        else
          v265 = v264;
        v266 = v1218;
        if ((_DWORD)v1218 == DWORD1(v1218)
          || *((__int128 **)&v1218 + 1) != (__int128 *)((char *)&v1219 + 8) && *((_QWORD *)&v1218 + 1))
        {
          if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1218, v265, a3, (uint64_t)a4, a5, a6, a7, a8) == 1)
            LOBYTE(__dst) = 1;
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)&v1218 + 1) + 8 * v1218) = v265;
          LODWORD(v1218) = v266 + 1;
        }
        v267 = v1218;
        if ((_DWORD)v1218 == DWORD1(v1218)
          || *((__int128 **)&v1218 + 1) != (__int128 *)((char *)&v1219 + 8) && *((_QWORD *)&v1218 + 1))
        {
          if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1218, (uint64_t)v13, a3, (uint64_t)a4, a5, a6, a7, a8) == 1)LOBYTE(__dst) = 1;
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)&v1218 + 1) + 8 * v1218) = v13;
          LODWORD(v1218) = v267 + 1;
        }
        if (v1194)
          JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::append((uint64_t *)&__dst, v262, a3, (uint64_t)a4, a5, a6, a7, a8);
        if ((_BYTE)__dst)
        {
          JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1214);
          goto LABEL_960;
        }
        v1211 = (WTF::StringImpl *)*((_QWORD *)&v1218 + 1);
        v1212 = v1218;
        v269 = JSC::call((uint64_t *)a1, v1187, (unsigned __int8 *)&v1207, 10, (uint64_t)&v1211, a6, a7, a8);
        var60[0] = (int *)v269;
        if (*((_DWORD *)v59 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v59, (uint64_t)v268, a3, (uint64_t)a4, a5, a6, a7, a8))
            goto LABEL_960;
          v269 = (unint64_t)var60[0];
          v13 = v1196;
        }
        if ((v269 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v269 + 5) != 2)
        {
          JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)var60, (JSC::JSGlobalObject *)a1, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (int **)&v1211);
        }
        else
        {
          v271 = *(WTF::StringImpl **)(v269 + 8);
          if ((v271 & 1) != 0)
            v271 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v269, (JSC::JSGlobalObject *)a1, a3, (uint64_t)a4, v270, a5, a6, a7, a8);
          if (v271)
            *(_DWORD *)v271 += 2;
          v1211 = v271;
        }
        if (*((_DWORD *)v59 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v59, (uint64_t)v268, a3, (uint64_t)a4, a5, a6, a7, a8))
        {
          goto LABEL_969;
        }
        v272 = HIDWORD(v1231);
        if (HIDWORD(v1231) == (_DWORD)v1231)
        {
          WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String&>((uint64_t)&v1230, (unint64_t)&v1211);
        }
        else
        {
          v273 = v1230;
          v274 = v1211;
          if (v1211)
            *(_DWORD *)v1211 += 2;
          *((_QWORD *)v273 + v272) = v274;
          HIDWORD(v1231) = v272 + 1;
        }
        if (*((_DWORD *)v59 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v59, (uint64_t)v268, a3, (uint64_t)a4, a5, a6, a7, a8))
        {
LABEL_969:
          v275 = 0;
        }
        else
        {
          v275 = 1;
        }
        v276 = v1211;
        v1211 = 0;
        if (v276)
        {
          if (*(_DWORD *)v276 == 2)
          {
            WTF::StringImpl::~StringImpl(v276, v268, a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v327, v328, v329, v330, v331, v332, v333, v334);
          }
          else
          {
            *(_DWORD *)v276 -= 2;
          }
        }
        JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1218, v268, a3, (uint64_t)a4, a5, a6, a7, a8);
        if ((v275 & 1) == 0)
        {
LABEL_124:
          v114 = 0;
          goto LABEL_642;
        }
LABEL_106:
        v79 = (int)v1216;
        v1239 = (unint64_t)v1216;
        if (v1215 == v1216)
        {
          v49 = (_DWORD)v1216 + 1;
          v277 = v1213;
          if ((int)v1216 + 1 > v1213)
            goto LABEL_640;
          v278 = (WTF::StringImpl *)*v1203;
          if (*v1203 && *((_DWORD *)v278 + 1) > v1216)
          {
            if ((WTF::StringImpl::at(v278, v1216) & 0xFC00) == 0xD800
              && (v279 = (WTF::StringImpl *)*v1203) != 0
              && *((_DWORD *)v279 + 1) > v49)
            {
              v13 = v1196;
              if ((WTF::StringImpl::at(v279, v79 + 1) & 0xFC00) == 0xDC00)
              {
                v49 = v79 + 2;
                if (v79 + 2 > v277)
                  goto LABEL_640;
              }
            }
            else
            {
              v13 = v1196;
            }
          }
        }
        else
        {
          v49 = v1216;
        }
        if ((v1197 & 2) == 0)
          goto LABEL_640;
      }
      v290 = 0;
      v291 = 1;
      while (1)
      {
        a4 = (JSC::JSRopeString *)*(unsigned int *)(v57 + 4 * (v291 - 1));
        if ((a4 & 0x80000000) != 0)
        {
          v293 = 10;
        }
        else
        {
          v293 = (uint64_t)JSC::jsSubstring(v1192, a1, v13, a4, (*(_DWORD *)(v57 + 4 * v291) - (_DWORD)a4), a6, a7, a8, v263);
          if (*((_DWORD *)v59 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v59, v292, a3, (uint64_t)a4, a5, a6, a7, a8))
              goto LABEL_960;
            v13 = v1196;
          }
        }
        v294 = v1218;
        if ((_DWORD)v1218 != DWORD1(v1218)
          && (*((__int128 **)&v1218 + 1) != (__int128 *)((char *)&v1219 + 8)
            ? (v295 = *((_QWORD *)&v1218 + 1) == 0)
            : (v295 = 1),
              v295))
        {
          *(_QWORD *)(*((_QWORD *)&v1218 + 1) + 8 * v1218) = v293;
          LODWORD(v1218) = v294 + 1;
        }
        else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1218, v293, a3, (uint64_t)a4, a5, a6, a7, a8) == 1)
        {
          LOBYTE(__dst) = 1;
        }
        v296 = v1194;
        if (!v290)
          v296 = 0;
        if (v296)
          break;
LABEL_400:
        ++v290;
        v291 += 2;
        if (v290 >= (*((_DWORD *)v1200 + 6) + 1))
          goto LABEL_327;
      }
      JSC::RegExp::getCaptureGroupNameForSubpatternId((uint64_t)v1200, v290, &v1211);
      if (!v1211)
      {
LABEL_1260:
        v13 = v1196;
        goto LABEL_400;
      }
      v985 = *((unsigned int *)v1211 + 1);
      if (!(_DWORD)v985)
      {
LABEL_1395:
        v997 = v1211;
        v1211 = 0;
        if (v997)
        {
          if (*(_DWORD *)v997 == 2)
          {
            WTF::StringImpl::~StringImpl(v997, v870, a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v1016, v1017, v1018, v1019, v1020, v1021, v1022, v1023);
          }
          else
          {
            *(_DWORD *)v997 -= 2;
          }
        }
        goto LABEL_1260;
      }
      v1191 = v1191 & 0xFFFFFF0000000000 | v985 | ((unint64_t)((*((_DWORD *)v1211 + 4) >> 2) & 1) << 32);
      v986 = JSC::RegExp::subpatternIdForGroupName<int const*>((uint64_t)v1200, *((_QWORD *)v1211 + 1), v1191, v57);
      if (v290 != v986)
      {
        if (!v986)
        {
          JSC::Identifier::fromString((uint64_t **)v1192, &v1211, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF::StringImpl **)var60);
          v992 = var60[0];
          v993 = (int *)v262;
          v994 = (uint64_t)v1192;
          v995 = 10;
LABEL_1392:
          JSC::JSObject::putDirect(v993, v994, (unint64_t)v992, v995, 0, v991, v988, v989, v990);
          v996 = (WTF::StringImpl *)var60[0];
          var60[0] = 0;
          if (v996)
          {
            if (*(_DWORD *)v996 == 2)
            {
              WTF::StringImpl::~StringImpl(v996, v870, a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v1041, v1042, v1043, v1044, v1045, v1046, v1047, v1048);
            }
            else
            {
              *(_DWORD *)v996 -= 2;
            }
          }
          goto LABEL_1395;
        }
        a4 = (JSC::JSRopeString *)*(unsigned int *)(v57 + 8 * v986);
        if ((a4 & 0x80000000) != 0)
        {
          v293 = 10;
        }
        else
        {
          v293 = (uint64_t)JSC::jsSubstring(v1192, a1, v1196, a4, (*(_DWORD *)(v57 + 4 * ((2 * v986) | 1)) - (_DWORD)a4), a6, a7, a8, v987);
          if (*((_DWORD *)v59 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v59, v1012, a3, (uint64_t)a4, a5, a6, a7, a8))
          {
            v1013 = v1211;
            v1211 = 0;
            if (v1013)
            {
              if (*(_DWORD *)v1013 == 2)
              {
                WTF::StringImpl::~StringImpl(v1013, v268, a3, (uint64_t)a4, a5, a6, a7, a8);
                WTF::fastFree(v1108, v1109, v1110, v1111, v1112, v1113, v1114, v1115);
              }
              else
              {
                *(_DWORD *)v1013 -= 2;
              }
            }
LABEL_960:
            JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1218, v268, a3, (uint64_t)a4, a5, a6, a7, a8);
            goto LABEL_124;
          }
        }
      }
      JSC::Identifier::fromString((uint64_t **)v1192, &v1211, (const WTF::String *)a3, (uint64_t)a4, a5, a6, a7, a8, (WTF::StringImpl **)var60);
      v992 = var60[0];
      v993 = (int *)v262;
      v994 = (uint64_t)v1192;
      v995 = v293;
      goto LABEL_1392;
    }
    v1238 = (JSC::VM *)v14;
    do
      v297 = __ldaxr((unsigned int *)&g_superSamplerCount);
    while (__stlxr(v297 + 1, (unsigned int *)&g_superSamplerCount));
    v298 = (WTF::StringImpl *)*v1203;
    if (*v1203)
    {
      v300 = (_DWORD *)((char *)v1200 + 24);
      v299 = *((_DWORD *)v1200 + 6);
      v1237 = *((_DWORD *)v298 + 1);
      v1176 = v299 + 2;
      v301 = (v299 + 3);
      v302 = *((_DWORD *)v298 + 4);
      if ((v302 & 0x10) != 0)
      {
        if (v302 < 0x100)
          LOBYTE(v303) = WTF::StringImpl::hashSlowCase(v298);
        else
          v303 = v302 >> 8;
        v304 = v14 + 86816 + 56 * (v303 & 0x3F);
        if (*(WTF::StringImpl **)v304 != v298 || *(_QWORD *)(v304 + 8) != (_QWORD)v1200)
        {
          v1175 = v14 + 86816;
          v304 = v14 + 86816 + 56 * (((_BYTE)v303 + 1) & 0x3F);
          v1188 = v18;
          v1174 = v301;
          if (*(WTF::StringImpl **)v304 != v298
            || *(JSC::RegExp **)(v1175 + 56 * (((_BYTE)v303 + 1) & 0x3F) + 8) != v1200)
          {
            goto LABEL_457;
          }
          v301 = v301;
        }
        v306 = *(_QWORD *)(v304 + 16);
        v307 = *(unsigned int *)(v304 + 52);
        if ((_DWORD)v307)
        {
          if (v307 >> 30)
          {
            __break(0xC471u);
            JUMPOUT(0x198BDCCF8);
          }
          v308 = (void *)WTF::fastMalloc((WTF *)(4 * v307));
          memcpy(v308, *(const void **)(v304 + 40), 4 * *(unsigned int *)(v304 + 52));
        }
        else
        {
          v308 = 0;
        }
        v309 = *(_OWORD *)(v304 + 24);
        v310 = *(_QWORD *)(a1 + 2200);
        if (v310)
        {
          *(_QWORD *)(a1 + 2200) = 0;
          *(_DWORD *)(a1 + 2208) = 0;
          v1198 = v309;
          WTF::fastFree(v310, (void *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
          v309 = v1198;
        }
        *(_QWORD *)(a1 + 2200) = v308;
        *(_DWORD *)(a1 + 2208) = v307;
        *(_DWORD *)(a1 + 2212) = v307;
        v311 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 2152) = v1200;
        *(_QWORD *)(a1 + 2144) = v13;
        *(_OWORD *)(a1 + 2120) = v309;
        *(_BYTE *)(a1 + 2136) = 0;
        if (*(_DWORD *)(v311 + 760) >= *(unsigned __int8 *)(a1 + 7))
          JSC::Heap::writeBarrierSlowPath(v311 + 192, a1);
LABEL_1025:
        v1201 = *(_DWORD *)(v306 + 8);
        v721 = v1201 / v1176;
        v1236 = 0;
        v722 = (WTF *)v1235;
        v1233 = (WTF *)v1235;
        v1234 = 16;
        v723 = (WTF *)v1232;
        v1230 = (WTF *)v1232;
        v1231 = 16;
        v724 = (v721 + 1);
        if (v724 < 0x11)
        {
          v725 = 16;
        }
        else
        {
          if (v724 >> 29 || (WTF::tryFastMalloc((WTF *)(8 * v724), &__dst), !__dst))
          {
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1238);
            v114 = 0;
            goto LABEL_1114;
          }
          LODWORD(v1234) = v721 + 1;
          v1233 = (WTF *)__dst;
          v725 = v1231;
        }
        v1191 = (unint64_t)v1235;
        if (v725 < v721)
        {
          v726 = v1230;
          v727 = HIDWORD(v1231);
          if (v721 < 0x11)
          {
            v1230 = (WTF *)v1232;
            LODWORD(v1231) = 16;
            v728 = v1232;
          }
          else
          {
            if (v721 >> 29 || (WTF::tryFastMalloc((WTF *)(8 * v721), &__dst), (v728 = __dst) == 0))
            {
              JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1238);
              v114 = 0;
              v722 = (WTF *)v1235;
              goto LABEL_1114;
            }
            LODWORD(v1231) = v1201 / v1176;
            v1230 = (WTF *)__dst;
          }
          memcpy(v728, v726, 8 * v727);
          if (v1232 != (_QWORD *)v726 && v726)
          {
            if (v1230 == v726)
            {
              v1230 = 0;
              LODWORD(v1231) = 0;
            }
            WTF::fastFree((unint64_t)v726, v729, v730, v731, a5, a6, a7, a8);
          }
        }
        if (v1231 < v721)
          WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v1230, v721);
        if (v1230)
          bzero((char *)v1230 + 8 * HIDWORD(v1231), 8 * v721 - 8 * HIDWORD(v1231));
        v1190 = (WTF *)v1232;
        HIDWORD(v1231) = v1201 / v1176;
        JSC::CachedCall::CachedCall((JSC::CachedCall *)&__dst, (JSC::JSGlobalObject *)a1, v18, v301, a5, a6, a7, a8);
        if (*((_DWORD *)v1238 + 20)
          && JSC::VM::hasExceptionsAfterHandlingTraps(v1238, (uint64_t)v732, v198, v199, v200, v201, v202, v203))
        {
          goto LABEL_1112;
        }
        v733 = 0;
        v734 = 0;
        v735 = v306 + 16;
        v1197 = v1176;
        while (v734 < v1201)
        {
          v1224 = 0;
          v1225 = 0;
          v736 = v734;
          v737 = v1176;
          do
          {
            v738 = v736;
            if ((*(_BYTE *)(v306 + 4) & 0xE) == 6)
              v739 = *(_QWORD *)(v735 + 8 * v736) + 0x2000000000000;
            else
              v739 = *(_QWORD *)(v735 + 8 * v736);
            v740 = v1225;
            if (v1225 != v1226 && (v1227 != v1228 ? (v741 = v1227 == 0) : (v741 = 1), v741))
            {
              *(_QWORD *)&v1227[8 * v1225] = v739;
              v1225 = v740 + 1;
            }
            else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1225, v739, v198, v199, v200, v201, v202, v203) == 1)
            {
              v1224 = 1;
            }
            v736 = v738 + 1;
            --v737;
          }
          while (v737);
          v742 = v1225;
          if (v1225 != v1226 && (v1227 != v1228 ? (v743 = v1227 == 0) : (v743 = 1), v743))
          {
            *(_QWORD *)&v1227[8 * v1225] = v1196;
            v1225 = v742 + 1;
          }
          else if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1225, (uint64_t)v1196, v198, v199, v200, v201, v202, v203) == 1)
          {
            v1224 = 1;
          }
          v744 = v306;
          if ((*(_BYTE *)(v306 + 4) & 0xE) == 6)
            v745 = *(_QWORD *)(v735 + 8 * v734) + 0x2000000000000;
          else
            v745 = *(_QWORD *)(v735 + 8 * v734);
          v734 += v1176;
          v746 = *(_DWORD *)(v735 + 8 * (v734 - 1));
          LODWORD(var60[0]) = v746;
          v747 = *(_QWORD *)(v745 + 8);
          v748 = (int *)(v745 + 16);
          if ((v747 & 1) == 0)
            v748 = (int *)(v747 + 4);
          v749 = *v748;
          v750 = HIDWORD(v1234);
          if (HIDWORD(v1234) == (_DWORD)v1234)
          {
            WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned long &,int &>((uint64_t)&v1233, (int *)&v1236, (int *)var60, v199, v200, v201, v202, v203);
          }
          else
          {
            v751 = v1236;
            v752 = (_DWORD *)((char *)v1233 + 8 * HIDWORD(v1234));
            *v752 = v1236;
            v752[1] = v746;
            if (v746 == v751)
              *(_QWORD *)v752 = 0;
            HIDWORD(v1234) = v750 + 1;
          }
          *(_QWORD *)&v1222 = 10;
          if (v1224)
          {
            v782 = &v1238;
            goto LABEL_1111;
          }
          v753 = v1219;
          v754 = v1229;
          if (v1229)
            goto LABEL_1074;
          v799 = (unsigned int *)(v1219 + 80);
          v1189 = *(_DWORD *)(v1219 + 80);
          if ((v1189 & 0x20) == 0)
          {
            do
              v780 = __ldaxr(v799);
            while (__stlxr(v780 | 0x20, v799));
          }
          JSC::CachedCall::relink((JSC::CachedCall *)&__dst, v739, v198, v199, v200, v201, v202, v203);
          if (*v799
            && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v753, (uint64_t)v732, v198, v199, v200, v201, v202, v203))
          {
            v781 = 0;
            v754 = 0;
            v14 = *(_QWORD *)(v753 + 16);
          }
          else
          {
            v781 = 1;
            v754 = v1229;
          }
          if ((v1189 & 0x20) == 0)
          {
            do
              v779 = __ldaxr(v799);
            while (__stlxr(v779 & 0xFFFFFFDF, v799));
          }
          if (v781)
LABEL_1074:
            v14 = vmEntryToJavaScript(v754, (JSC::VM *)v753, (uint64_t)&v1220 + 8, v199, v200, v201, v202, v203);
          *(_BYTE *)(v753 + 93120) = 1;
          v1215 = (WTF::StringImpl *)v14;
          v756 = v1238;
          v757 = v14;
          if (*((_DWORD *)v1238 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v1238, (uint64_t)v732, v198, v199, v200, v201, v202, v203))
              goto LABEL_1112;
            v757 = (unint64_t)v1215;
          }
          if ((v757 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v757 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v1215, (JSC::JSGlobalObject *)a1, (const WTF::String *)v198, v199, v200, v201, v202, v203, (int **)&v1211);
          }
          else
          {
            v758 = *(WTF::StringImpl **)(v757 + 8);
            if ((v758 & 1) != 0)
              v758 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v757, (JSC::JSGlobalObject *)a1, v198, v199, v755, v200, v201, v202, v203);
            if (v758)
              *(_DWORD *)v758 += 2;
            v1211 = v758;
          }
          if (*((_DWORD *)v756 + 20)
            && JSC::VM::hasExceptionsAfterHandlingTraps(v756, (uint64_t)v732, v198, v199, v200, v201, v202, v203))
          {
            v761 = 0;
          }
          else
          {
            if (v733 >= HIDWORD(v1231))
            {
              __break(0xC471u);
              JUMPOUT(0x198BDCA40);
            }
            v759 = v1211;
            v1211 = 0;
            v760 = (WTF::StringImpl *)*((_QWORD *)v1230 + v733);
            *((_QWORD *)v1230 + v733) = v759;
            if (v760)
            {
              if (*(_DWORD *)v760 == 2)
              {
                WTF::StringImpl::~StringImpl(v760, v732, v198, v199, v200, v201, v202, v203);
                WTF::fastFree(v771, v772, v773, v774, v775, v776, v777, v778);
              }
              else
              {
                *(_DWORD *)v760 -= 2;
              }
            }
            ++v733;
            v1236 = v749 + v746;
            v761 = 1;
          }
          v762 = v1211;
          v1211 = 0;
          v306 = v744;
          if (v762)
          {
            if (*(_DWORD *)v762 == 2)
            {
              WTF::StringImpl::~StringImpl(v762, v732, v198, v199, v200, v201, v202, v203);
              WTF::fastFree(v763, v764, v765, v766, v767, v768, v769, v770);
            }
            else
            {
              *(_DWORD *)v762 -= 2;
            }
          }
          if ((v761 & 1) == 0)
            goto LABEL_1112;
        }
        v800 = v1237;
        v801 = HIDWORD(v1234);
        if (v1237 > v1236)
        {
          if (HIDWORD(v1234) == (_DWORD)v1234)
          {
            WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned long &,int &>((uint64_t)&v1233, (int *)&v1236, (int *)&v1237, v199, v200, v201, v202, v203);
            v801 = HIDWORD(v1234);
          }
          else
          {
            v802 = (_DWORD *)((char *)v1233 + 8 * HIDWORD(v1234));
            *v802 = v1236;
            v802[1] = v800;
            HIDWORD(v1234) = ++v801;
          }
        }
        v803 = v1233;
        v804 = v1230;
        LODWORD(v805) = HIDWORD(v1231);
        v1200 = *(JSC::RegExp **)(a1 + 56);
        v1241 = v1200;
        if (v801 != 1 || HIDWORD(v1231) != 0)
        {
          v807 = SHIDWORD(v1231);
          if (v801 != 2 || HIDWORD(v1231) != 1)
          {
            if (v801 < 1)
            {
              v809 = 0;
              v808 = 0;
            }
            else
            {
              LODWORD(v808) = 0;
              v809 = 0;
              v810 = (_DWORD *)((char *)v1233 + 4);
              v811 = v801;
              do
              {
                v812 = *v810 - *(v810 - 1);
                v813 = __OFADD__((_DWORD)v808, v812);
                v814 = v808 + v812;
                if (v813)
                  v809 = 1;
                if (v813)
                  v808 = v808;
                else
                  v808 = v814;
                v810 += 2;
                --v811;
              }
              while (v811);
            }
            v815 = 1;
            if (SHIDWORD(v1231) >= 1)
            {
              v816 = v1230;
              v817 = HIDWORD(v1231);
              v818 = v808;
              do
              {
                v819 = *(_QWORD *)v816;
                if (*(_QWORD *)v816)
                {
                  v820 = *(unsigned int *)(v819 + 4);
                  v808 = v820 + (int)v818;
                  v821 = (unint64_t)(v808 + 0x80000000) >> 32;
                  if ((_DWORD)v820)
                    v822 = v821 == 0;
                  else
                    v822 = 0;
                  if (v822
                    || (!v821 ? (v808 = v808) : (v809 = 1, v808 = v818), (_DWORD)v820))
                  {
                    if ((*(_BYTE *)(v819 + 16) & 4) == 0)
                      v815 = 0;
                  }
                }
                else
                {
                  v808 = v818;
                }
                v816 = (WTF *)((char *)v816 + 8);
                v818 = v808;
                --v817;
              }
              while (v817);
            }
            if (!v809)
            {
              if (!(_DWORD)v808)
              {
                v114 = *((_QWORD *)v1200 + 5246);
                goto LABEL_1113;
              }
              if (*v1203)
                v823 = (*(unsigned __int8 *)(*v1203 + 16) >> 2) & 1;
              else
                v823 = 1;
              if ((v823 & v815) == 1)
              {
                if ((v808 & 0x80000000) == 0)
                {
                  WTF::tryFastCompactMalloc((WTF *)(v808 + 20), &v1215);
                  v824 = v1215;
                  if (v1215)
                  {
                    v825 = v1215;
                    v826 = (char *)v1215 + 20;
                    *(_DWORD *)v1215 = 2;
                    *((_DWORD *)v824 + 1) = v808;
                    *((_QWORD *)v824 + 1) = (char *)v824 + 20;
                    *((_DWORD *)v825 + 4) = 4;
                    if (v801 <= (int)v807)
                      v827 = v807;
                    else
                      v827 = v801;
                    if ((int)v827 >= 1)
                    {
                      v828 = 0;
                      v829 = 0;
                      v830 = (_DWORD *)((char *)v803 + 4);
                      do
                      {
                        if (v828 < v801)
                        {
                          v831 = *v1203;
                          if (*v1203
                            && (v832 = *(unsigned int *)(v831 + 4),
                                v833 = *(v830 - 1),
                                v832 > v833))
                          {
                            v834 = *(unsigned int *)(v831 + 16);
                            v835 = *(char **)(v831 + 8);
                            v836 = *v830 - v833;
                            if ((int)v832 - (int)v833 > v836 || (v836 = v832 - v833, (_DWORD)v833))
                            {
                              v837 = (v834 >> 2) & 1;
                              v838 = v832 - v833;
                              LODWORD(v832) = v836;
                              if ((_DWORD)v837)
                              {
                                if (v838 < v836)
                                  goto LABEL_1386;
                                v835 += v833;
                                LODWORD(v832) = v836;
                              }
                              else
                              {
                                if (v838 < v836)
                                  goto LABEL_1386;
                                v835 += 2 * v833;
                              }
                            }
                            else
                            {
                              v832 = v832 & 0xFFFFFFFEFFFFFFFFLL | (((v834 >> 2) & 1) << 32);
                            }
                            v839 = &v826[v829];
                            if ((_DWORD)v832 == 1)
                            {
                              *v839 = *v835;
                              LODWORD(v832) = 1;
                            }
                            else if ((_DWORD)v832)
                            {
                              memcpy(v839, v835, v832);
                            }
                          }
                          else
                          {
                            LODWORD(v832) = 0;
                          }
                          v829 += v832;
                        }
                        if (v828 < v807)
                        {
                          v840 = *((_QWORD *)v804 + v828);
                          if (v840)
                          {
                            v841 = *(char **)(v840 + 8);
                            v842 = *(_DWORD *)(v840 + 4);
                            v843 = &v826[v829];
                            if (v842 == 1)
                            {
                              *v843 = *v841;
                              v842 = 1;
                            }
                            else if (v842)
                            {
                              memcpy(v843, v841, *(unsigned int *)(v840 + 4));
                            }
                          }
                          else
                          {
                            v842 = 0;
                          }
                          v829 += v842;
                        }
                        ++v828;
                        v830 += 2;
                      }
                      while (v827 != v828);
                    }
                    v1215 = v825;
                    goto LABEL_1215;
                  }
                }
              }
              else if (v808 <= 0x7FFFFFEF)
              {
                WTF::tryFastCompactMalloc((WTF *)(2 * v808 + 20), &v1215);
                v1197 = (unint64_t)v1215;
                if (v1215)
                {
                  v941 = (char *)v1215 + 20;
                  *(_DWORD *)v1215 = 2;
                  *(_DWORD *)(v1197 + 4) = v808;
                  *(_QWORD *)(v1197 + 8) = v1197 + 20;
                  *(_DWORD *)(v1197 + 16) = 0;
                  if (v801 <= (int)v807)
                    v807 = v807;
                  else
                    v807 = v801;
                  if ((int)v807 >= 1)
                  {
                    v942 = 0;
                    v943 = 0;
                    v805 = (int)v805;
                    do
                    {
                      if (v942 < v801)
                      {
                        v944 = *v1203;
                        if (*v1203
                          && (v945 = *(unsigned int *)(v944 + 4),
                              v946 = *((unsigned int *)v803 + 2 * v942),
                              v945 > v946))
                        {
                          v947 = *(unsigned int *)(v944 + 16);
                          v948 = *(int8x16_t **)(v944 + 8);
                          v949 = *((_DWORD *)v803 + 2 * v942 + 1) - v946;
                          if ((int)v945 - (int)v946 > v949 || (v949 = v945 - v946, (_DWORD)v946))
                          {
                            v950 = (v947 >> 2) & 1;
                            v951 = v945 - v946;
                            v952 = v949;
                            if ((_DWORD)v950)
                            {
                              if (v951 < v949)
                                goto LABEL_1386;
                              v948 = (int8x16_t *)((char *)v948 + v946);
                              v952 = v949 | 0x100000000;
                            }
                            else
                            {
                              if (v951 < v949)
                                goto LABEL_1386;
                              v948 = (int8x16_t *)((char *)v948 + 2 * v946);
                            }
                          }
                          else
                          {
                            v952 = v945 & 0xFFFFFFFEFFFFFFFFLL | (((v947 >> 2) & 1) << 32);
                          }
                          v953 = &v941[2 * v943];
                          if ((v952 & 0x100000000) != 0)
                          {
                            if (v952 < 0x40)
                            {
                              v1161 = &v941[2 * v943];
                            }
                            else
                            {
                              v1161 = &v953[2 * (v952 & 0xFFFFFFC0)];
                              v1162 = &v941[2 * v943];
                              do
                              {
                                v1247.val[0] = *v948;
                                v1163 = v948[1];
                                v1251.val[0] = v948[2];
                                v1164 = v948[3];
                                v948 += 4;
                                v1255.val[1] = 0uLL;
                                v1255.val[0] = v1164;
                                v1251.val[1] = 0u;
                                v1259.val[0] = v1163;
                                v1247.val[1] = 0u;
                                v1165 = v1162;
                                vst2q_s8(v1165, v1247);
                                v1165 += 32;
                                v1259.val[1] = 0u;
                                vst2q_s8(v1165, v1259);
                                v1166 = v1162 + 64;
                                vst2q_s8(v1166, v1251);
                                v1167 = v1162 + 96;
                                vst2q_s8(v1167, v1255);
                                v1162 += 128;
                              }
                              while (v1162 != v1161);
                            }
                            while (v1161 != &v953[2 * v952])
                            {
                              v1168 = v948->u8[0];
                              v948 = (int8x16_t *)((char *)v948 + 1);
                              *(_WORD *)v1161 = v1168;
                              v1161 += 2;
                            }
                          }
                          else if ((_DWORD)v952 == 1)
                          {
                            *(_WORD *)v953 = v948->i16[0];
                            LODWORD(v952) = 1;
                          }
                          else if ((_DWORD)v952)
                          {
                            memcpy(v953, v948, 2 * v952);
                          }
                        }
                        else
                        {
                          LODWORD(v952) = 0;
                        }
                        v943 += v952;
                      }
                      if (v942 < v805)
                      {
                        v954 = *((_QWORD *)v804 + v942);
                        if (v954)
                        {
                          v955 = *(int8x16_t **)(v954 + 8);
                          v956 = *(unsigned int *)(v954 + 4);
                          v957 = &v941[2 * v943];
                          if ((*(_BYTE *)(v954 + 16) & 4) != 0)
                          {
                            if (v956 >= 0x40)
                            {
                              v958 = &v957[2 * (v956 & 0xFFFFFFC0)];
                              v960 = &v941[2 * v943];
                              do
                              {
                                v1245.val[0] = *v955;
                                v961 = v955[1];
                                v1249.val[0] = v955[2];
                                v962 = v955[3];
                                v955 += 4;
                                v1257.val[1] = 0u;
                                v1257.val[0] = v962;
                                v1249.val[1] = 0u;
                                v1253.val[0] = v961;
                                v1245.val[1] = 0u;
                                v963 = v960;
                                vst2q_s8(v963, v1245);
                                v963 += 32;
                                v1253.val[1] = 0u;
                                vst2q_s8(v963, v1253);
                                v964 = v960 + 64;
                                vst2q_s8(v964, v1249);
                                v965 = v960 + 96;
                                vst2q_s8(v965, v1257);
                                v960 += 128;
                              }
                              while (v960 != v958);
                            }
                            else
                            {
                              v958 = &v941[2 * v943];
                            }
                            while (v958 != &v957[2 * v956])
                            {
                              v959 = v955->u8[0];
                              v955 = (int8x16_t *)((char *)v955 + 1);
                              *(_WORD *)v958 = v959;
                              v958 += 2;
                            }
                          }
                          else if ((_DWORD)v956 == 1)
                          {
                            *(_WORD *)v957 = v955->i16[0];
                            LODWORD(v956) = 1;
                          }
                          else if ((_DWORD)v956)
                          {
                            memcpy(v957, v955, 2 * v956);
                          }
                        }
                        else
                        {
                          LODWORD(v956) = 0;
                        }
                        v943 += v956;
                      }
                      ++v942;
                    }
                    while (v942 != v807);
                  }
                  goto LABEL_1387;
                }
              }
            }
            v782 = &v1241;
LABEL_1111:
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)v782);
LABEL_1112:
            v114 = 0;
            goto LABEL_1113;
          }
          v846 = *(unsigned int *)v1233;
          v845 = *((_DWORD *)v1233 + 1);
          v847 = (v845 - v846);
          if (v845 == (_DWORD)v846)
          {
            WTF::StringImpl::s_emptyAtomString += 2;
            v1215 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
            goto LABEL_1223;
          }
          v848 = *v1203;
          if ((*(_DWORD *)(*v1203 + 16) & 4) != 0)
          {
            if (v847 <= 0xC)
            {
              WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v848 + 8) + v846), v847, (uint64_t *)&v1215);
              goto LABEL_1223;
            }
          }
          else if (v847 <= 6)
          {
            WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v848 + 8) + 2 * v846), v847, (uint64_t *)&v1215);
            goto LABEL_1223;
          }
          v998 = (_DWORD *)*v1203;
          if ((*(_DWORD *)(*v1203 + 16) & 3) == 2)
            v998 = *(_DWORD **)(v848 + 24);
          v999 = WTF::fastCompactMalloc((WTF *)0x20);
          v1000 = *(_DWORD *)(v848 + 16);
          v1001 = *(_QWORD *)(v848 + 8);
          *v998 += 2;
          *(_DWORD *)v999 = 2;
          *(_DWORD *)(v999 + 4) = v847;
          if ((v1000 & 4) != 0)
          {
            *(_QWORD *)(v999 + 8) = v1001 + v846;
            *(_DWORD *)(v999 + 16) = 6;
          }
          else
          {
            *(_QWORD *)(v999 + 8) = v1001 + 2 * v846;
            *(_DWORD *)(v999 + 16) = 2;
          }
          *(_QWORD *)(v999 + 24) = v998;
          v1215 = (WTF::StringImpl *)v999;
LABEL_1223:
          v1240 = v1215;
          v850 = *((unsigned int *)v803 + 2);
          v849 = *((_DWORD *)v803 + 3);
          v851 = (v849 - v850);
          if (v849 == (_DWORD)v850)
          {
            v853 = &WTF::StringImpl::s_emptyAtomString;
            WTF::StringImpl::s_emptyAtomString += 2;
          }
          else
          {
            v852 = *v1203;
            if ((*(_DWORD *)(*v1203 + 16) & 4) != 0)
            {
              if (v851 <= 0xC)
              {
                WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v852 + 8) + v850), v851, (uint64_t *)&v1215);
LABEL_1227:
                v853 = (int *)v1215;
                goto LABEL_1228;
              }
            }
            else if (v851 <= 6)
            {
              WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v852 + 8) + 2 * v850), v851, (uint64_t *)&v1215);
              goto LABEL_1227;
            }
            v1002 = (_DWORD *)*v1203;
            if ((*(_DWORD *)(*v1203 + 16) & 3) == 2)
              v1002 = *(_DWORD **)(v852 + 24);
            v853 = (int *)WTF::fastCompactMalloc((WTF *)0x20);
            v1003 = *(_DWORD *)(v852 + 16);
            v1004 = *(_QWORD *)(v852 + 8);
            *v1002 += 2;
            *v853 = 2;
            v853[1] = v851;
            if ((v1003 & 4) != 0)
            {
              *((_QWORD *)v853 + 1) = v1004 + v850;
              v853[4] = 6;
            }
            else
            {
              *((_QWORD *)v853 + 1) = v1004 + 2 * v850;
              v853[4] = 2;
            }
            *((_QWORD *)v853 + 3) = v1002;
          }
LABEL_1228:
          v1239 = (unint64_t)v853;
          v854 = *(JSC **)(a1 + 56);
          v1242 = (unint64_t)v854;
          if (v1240)
            v855 = *((_DWORD *)v1240 + 1);
          else
            v855 = 0;
          v856 = *(_QWORD *)v804;
          if (*(_QWORD *)v804)
            v857 = *(_DWORD *)(v856 + 4);
          else
            v857 = 0;
          if (v853)
            v858 = v853[1];
          else
            v858 = 0;
          if (v855)
          {
            if (v857)
            {
              if (v858)
              {
                if (((v858 | v857) & 0x80000000) == 0)
                {
                  v859 = __OFADD__(v857, v858);
                  if ((v855 & 0x80000000) == 0 && !v859 && !__OFADD__(v855, v857 + v858))
                  {
                    if (v855 + (unint64_t)v857 + v858 + 20 >= 0x40)
                    {
                      v966 = JSC::jsString(v854, (JSC::VM *)&v1240, (const WTF::String *)v198, v199, v200, v201, v202, v203);
                      v973 = (JSC::JSString *)JSC::jsString(v854, v804, v967, v968, v969, v970, v971, v972);
                      v980 = JSC::jsString(v854, (JSC::VM *)&v1239, v974, v975, v976, v977, v978, v979);
                      v114 = JSC::JSRopeString::create(v854, v966, v973, v980, v981, v982, v983, v984);
                      goto LABEL_1250;
                    }
                    WTF::tryMakeString<WTF::String,WTF::String,WTF::String>((uint64_t)&v1240, (uint64_t *)v804, (uint64_t *)&v1239, (int **)&v1215);
                    v866 = v1215;
                    if (v1215)
                    {
                      v1215 = 0;
                      v1211 = v866;
                      v114 = JSC::JSString::create((uint64_t)v854, (JSC::VM *)&v1211, v860, v861, v862, v863, v864, v865);
                      v867 = v1211;
                      v1211 = 0;
                      if (v867)
                      {
                        if (*(_DWORD *)v867 == 2)
                        {
                          WTF::StringImpl::~StringImpl(v867, v732, v198, v199, v200, v201, v202, v203);
                          WTF::fastFree(v1076, v1077, v1078, v1079, v1080, v1081, v1082, v1083);
                        }
                        else
                        {
                          *(_DWORD *)v867 -= 2;
                        }
                      }
                    }
                    else
                    {
                      JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1242);
                      v114 = 0;
                    }
                    v868 = v1215;
                    v1215 = 0;
                    if (v868)
                      goto LABEL_1248;
                    goto LABEL_1250;
                  }
                }
                v1075 = (WTF::StringImpl **)&v1242;
LABEL_1491:
                JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)v1075);
                v114 = 0;
                goto LABEL_1250;
              }
              v1215 = v854;
              if (v1240)
              {
                v1116 = *((unsigned int *)v1240 + 1);
                if ((_DWORD)v1116)
                {
                  if (v856)
                  {
                    v1117 = *(unsigned int *)(v856 + 4);
                    if ((_DWORD)v1117)
                    {
                      v1118 = __OFADD__((_DWORD)v1116, (_DWORD)v1117);
                      if (((v1117 | v1116) & 0x80000000) == 0 && !v1118)
                      {
                        if ((unint64_t)(v1116 + v1117 + 20) < 0x30)
                        {
                          v904 = &v1240;
                          v905 = (uint64_t *)v804;
LABEL_1316:
                          WTF::tryMakeString<WTF::String,WTF::String>((uint64_t)v904, v905, (int **)&v1211);
                          v912 = (int *)v1211;
                          if (v1211)
                          {
                            v1211 = 0;
                            var60[0] = v912;
                            v114 = JSC::JSString::create((uint64_t)v854, (JSC::VM *)var60, v906, v907, v908, v909, v910, v911);
                            v913 = (WTF::StringImpl *)var60[0];
                            var60[0] = 0;
                            if (v913)
                            {
                              if (*(_DWORD *)v913 == 2)
                              {
                                WTF::StringImpl::~StringImpl(v913, v732, v198, v199, v200, v201, v202, v203);
                                WTF::fastFree(v1092, v1093, v1094, v1095, v1096, v1097, v1098, v1099);
                              }
                              else
                              {
                                *(_DWORD *)v913 -= 2;
                              }
                            }
                          }
                          else
                          {
                            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1215);
                            v114 = 0;
                          }
                          v868 = v1211;
                          v1211 = 0;
                          if (v868)
                          {
LABEL_1248:
                            if (*(_DWORD *)v868 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v868, v732, v198, v199, v200, v201, v202, v203);
                              WTF::fastFree(v922, v923, v924, v925, v926, v927, v928, v929);
                            }
                            else
                            {
                              *(_DWORD *)v868 -= 2;
                            }
                          }
LABEL_1250:
                          v869 = (WTF::StringImpl *)v1239;
                          v1239 = 0;
                          if (v869)
                          {
                            if (*(_DWORD *)v869 == 2)
                            {
                              WTF::StringImpl::~StringImpl(v869, v732, v198, v199, v200, v201, v202, v203);
                              WTF::fastFree(v914, v915, v916, v917, v918, v919, v920, v921);
                            }
                            else
                            {
                              *(_DWORD *)v869 -= 2;
                            }
                          }
                          v844 = v1240;
                          v1240 = 0;
                          if (v844)
                            goto LABEL_1216;
                          goto LABEL_1113;
                        }
                        v1032 = JSC::jsString(v854, (JSC::VM *)&v1240, (const WTF::String *)v198, v199, v200, v201, v202, v203);
                        v1034 = v854;
                        v1033 = v804;
LABEL_1459:
                        v1035 = (JSC::JSString *)JSC::jsString(v1034, v1033, v1026, v1027, v1028, v1029, v1030, v1031);
                        v114 = JSC::JSRopeString::create(v854, v1032, v1035, v1036, v1037, v1038, v1039, v1040);
                        goto LABEL_1250;
                      }
LABEL_1532:
                      v1075 = &v1215;
                      goto LABEL_1491;
                    }
                  }
                  goto LABEL_1529;
                }
              }
LABEL_1530:
              v1015 = v854;
              v1014 = v804;
              goto LABEL_1452;
            }
            v1215 = v854;
            if (v1240)
            {
              v901 = *((unsigned int *)v1240 + 1);
              if ((_DWORD)v901)
              {
                if (!v853 || (v902 = v853[1], !(_DWORD)v902))
                {
LABEL_1529:
                  v1014 = (JSC::VM *)&v1240;
                  goto LABEL_1451;
                }
                v903 = __OFADD__((_DWORD)v901, (_DWORD)v902);
                if (((v902 | v901) & 0x80000000) != 0 || v903)
                  goto LABEL_1532;
                if ((unint64_t)(v901 + v902 + 20) < 0x30)
                {
                  v904 = &v1240;
                  v905 = (uint64_t *)&v1239;
                  goto LABEL_1316;
                }
                v1024 = (JSC::VM *)&v1240;
                v1025 = v854;
                goto LABEL_1458;
              }
            }
          }
          else
          {
            v1215 = v854;
            if (v856)
            {
              v938 = *(unsigned int *)(v856 + 4);
              if ((_DWORD)v938)
              {
                if (!v853)
                  goto LABEL_1530;
                v939 = v853[1];
                if (!(_DWORD)v939)
                  goto LABEL_1530;
                v940 = __OFADD__((_DWORD)v938, (_DWORD)v939);
                if (((v939 | v938) & 0x80000000) != 0 || v940)
                  goto LABEL_1532;
                if ((unint64_t)(v938 + v939 + 20) < 0x30)
                {
                  v905 = (uint64_t *)&v1239;
                  v904 = (WTF::StringImpl **)v804;
                  goto LABEL_1316;
                }
                v1025 = v854;
                v1024 = v804;
LABEL_1458:
                v1032 = JSC::jsString(v1025, v1024, (const WTF::String *)v198, v199, v200, v201, v202, v203);
                v1033 = (JSC::VM *)&v1239;
                v1034 = v854;
                goto LABEL_1459;
              }
            }
          }
          v1014 = (JSC::VM *)&v1239;
LABEL_1451:
          v1015 = v854;
LABEL_1452:
          v114 = JSC::jsString(v1015, v1014, (const WTF::String *)v198, v199, v200, v201, v202, v203);
          goto LABEL_1250;
        }
        v881 = *v1203;
        if (*v1203)
          v882 = *(_DWORD *)(v881 + 4);
        else
          v882 = 0;
        v883 = *((_DWORD *)v1233 + 1) - *(_DWORD *)v1233;
        v884 = *(int *)v1233 > 0 || v883 < v882;
        v114 = (unint64_t)v1196;
        if (!v884)
          goto LABEL_1113;
        if (v883 >= v882)
          v885 = v882;
        else
          v885 = v883;
        if ((_DWORD)v885)
        {
          v886 = *(_DWORD *)v1233 & ~(*(int *)v1233 >> 31);
          if ((*(_DWORD *)(v881 + 16) & 4) != 0)
          {
            if (v885 <= 0xC)
            {
              WTF::StringImpl::create((_BYTE *)(*(_QWORD *)(v881 + 8) + v886), v885, (uint64_t *)&v1211);
LABEL_1299:
              v887 = v1211;
              goto LABEL_1300;
            }
          }
          else if (v885 <= 6)
          {
            WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v881 + 8) + 2 * v886), v885, (uint64_t *)&v1211);
            goto LABEL_1299;
          }
          v1008 = (_DWORD *)*v1203;
          if ((*(_DWORD *)(v881 + 16) & 3) == 2)
            v1008 = *(_DWORD **)(v881 + 24);
          v1009 = WTF::fastCompactMalloc((WTF *)0x20);
          v1010 = *(_DWORD *)(v881 + 16);
          v1011 = *(_QWORD *)(v881 + 8);
          *v1008 += 2;
          *(_DWORD *)v1009 = 2;
          *(_DWORD *)(v1009 + 4) = v885;
          if ((v1010 & 4) != 0)
          {
            *(_QWORD *)(v1009 + 8) = v1011 + v886;
            *(_DWORD *)(v1009 + 16) = 6;
          }
          else
          {
            *(_QWORD *)(v1009 + 8) = v1011 + 2 * v886;
            *(_DWORD *)(v1009 + 16) = 2;
          }
          *(_QWORD *)(v1009 + 24) = v1008;
          v1211 = (WTF::StringImpl *)v1009;
          goto LABEL_1299;
        }
        WTF::StringImpl::s_emptyAtomString += 2;
        v1211 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
        goto LABEL_1299;
      }
      v1175 = v14 + 86816;
      v1174 = v299 + 3;
      v1188 = v18;
    }
    else
    {
      v1188 = v18;
      v1237 = 0;
      v300 = (_DWORD *)((char *)v1200 + 24);
      v429 = *((_DWORD *)v1200 + 6);
      v1176 = v429 + 2;
      v1174 = v429 + 3;
      v1175 = v14 + 86816;
    }
LABEL_457:
    v340 = 0;
    LOBYTE(__dst) = 0;
    *(_QWORD *)&v1218 = 0x800000000;
    v1219 = 0u;
    v1220 = 0u;
    v1221 = 0u;
    v1222 = 0u;
    *((_QWORD *)&v1218 + 1) = (char *)&v1219 + 8;
    v1223 = 0;
    v341 = (const void **)(a1 + 2200);
    v1185 = (_DWORD *)((char *)v13 + 16);
    v1186 = (uint64_t *)((char *)v13 + 8);
    v1195 = v300;
    while (1)
    {
      v342 = *(_QWORD *)(a1 + 56);
      JSC::RegExp::match((uint64_t)v1200, a1, v1203, v340, (uint64_t)v341, a6, a7, a8);
      v349 = v348;
      if (*(_DWORD *)(v342 + 80))
      {
        v398 = *(_DWORD *)(v342 + 80);
        if ((v398 & 0x27) != 0 && (v398 & 0x20) == 0)
          JSC::VMTraps::handleTraps((JSC::VMTraps *)(v342 + 64), 7u, v344, v345, v346, a6, a7, a8);
        if (*(_QWORD *)(v342 + 16))
          break;
      }
      v350 = (int *)*v341;
      if (v349 == -1)
        goto LABEL_554;
      if (*(_DWORD *)(a1 + 2212) <= 1u)
      {
        __break(0xC471u);
        JUMPOUT(0x198BDC808);
      }
      v351 = v350[1];
      v352 = v349;
      *(_QWORD *)(a1 + 2152) = v1200;
      *(_QWORD *)(a1 + 2144) = v13;
      *(_QWORD *)(a1 + 2120) = v349;
      *(_QWORD *)(a1 + 2128) = v351;
      *(_BYTE *)(a1 + 2136) = 0;
      if (*(_DWORD *)(v342 + 760) >= *(unsigned __int8 *)(a1 + 7))
        JSC::Heap::writeBarrierSlowPath(v342 + 192, a1);
LABEL_463:
      v353 = v1238;
      if (*((_DWORD *)v1238 + 20))
      {
        v399 = *((_DWORD *)v1238 + 20);
        if ((v399 & 0x27) != 0 && (v399 & 0x20) == 0)
        {
          v1133 = v1238;
          JSC::VMTraps::handleTraps((JSC::VM *)((char *)v1238 + 64), 7u, v344, v345, v346, a6, a7, a8);
          v353 = v1133;
        }
        if (*((_QWORD *)v353 + 2))
          goto LABEL_1321;
      }
      if (v352 == -1)
        goto LABEL_1022;
      if (*v300 != -1)
      {
        v355 = 0;
        while (1)
        {
          v356 = v350[(2 * v355)];
          if ((v356 & 0x80000000) != 0)
          {
            v364 = 10;
            v341 = (const void **)(a1 + 2200);
            v300 = v1195;
            goto LABEL_488;
          }
          v357 = v350[(2 * (_DWORD)v355) | 1];
          v358 = *(_QWORD *)(a1 + 56);
          v359 = v357 - v356;
          if (v357 == v356)
          {
            v364 = *(_QWORD *)(v358 + 41968);
            goto LABEL_487;
          }
          v360 = *v19;
          if (v356)
            break;
          v372 = (_DWORD *)(v360 + 4);
          if ((v360 & 1) != 0)
            v372 = v1185;
          v364 = (unint64_t)v13;
          if (*v372 != v359)
            break;
LABEL_487:
          v341 = (const void **)(a1 + 2200);
          v300 = v1195;
          if (*((_DWORD *)v353 + 20))
          {
            v400 = *((_DWORD *)v353 + 20);
            if ((v400 & 0x27) != 0 && (v400 & 0x20) == 0)
            {
              v1134 = v353;
              JSC::VMTraps::handleTraps((JSC::VM *)((char *)v353 + 64), 7u, v344, v345, v346, a6, a7, a8);
              v353 = v1134;
            }
            if (*((_QWORD *)v353 + 2))
              goto LABEL_1321;
          }
LABEL_488:
          v365 = v1218;
          if ((_DWORD)v1218 != DWORD1(v1218)
            && (*((__int128 **)&v1218 + 1) != (__int128 *)((char *)&v1219 + 8)
              ? (v366 = *((_QWORD *)&v1218 + 1) == 0)
              : (v366 = 1),
                v366))
          {
            *(_QWORD *)(*((_QWORD *)&v1218 + 1) + 8 * v1218) = v364;
            LODWORD(v1218) = v365 + 1;
          }
          else
          {
            v369 = v353;
            v370 = JSC::MarkedVectorBase::slowAppend((uint64_t)&v1218, v364, v344, v345, v346, a6, a7, a8);
            v353 = v369;
            if (v370 == 1)
              LOBYTE(__dst) = 1;
          }
          if (++v355 >= (unint64_t)(*v300 + 1))
            goto LABEL_466;
        }
        if ((v360 & 2) != 0)
        {
          v373 = v13;
          v13 = (JSC::JSRopeString *)(*(_QWORD *)((_BYTE *)v13 + 20) & 0xFFFFFFFFFLL);
          v356 += *(_DWORD *)((char *)v373 + 26);
        }
        else if ((v360 & 1) != 0)
        {
          v401 = v353;
          JSC::JSRopeString::resolveRope((unint64_t)v13, (JSC::JSGlobalObject *)a1, v344, v345, v347, v346, a6, a7, a8);
          if (*(_DWORD *)(v358 + 80))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v358, v343, v344, v345, v346, a6, a7, a8);
            v353 = v401;
            if (hasExceptionsAfterHandlingTraps)
            {
              v364 = 0;
              goto LABEL_486;
            }
          }
          else
          {
            v353 = v401;
          }
        }
        if (!v356)
        {
          v371 = *((_QWORD *)v13 + 1);
          if (v371)
            LODWORD(v371) = *(_DWORD *)(v371 + 4);
          if ((_DWORD)v371 == v359)
          {
            v364 = (unint64_t)v13;
            goto LABEL_486;
          }
        }
        v361 = (unint64_t *)(v358 + 39696);
        if (v359 == 1)
        {
          v362 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
          if (!v362 || *((_DWORD *)v362 + 1) <= v356)
          {
            v363 = 0;
LABEL_485:
            v364 = *(_QWORD *)(v358 + 8 * v363 + 42216);
LABEL_486:
            v13 = v1196;
            goto LABEL_487;
          }
          v1183 = v353;
          v1066 = WTF::StringImpl::at(v362, v356);
          v361 = (unint64_t *)(v358 + 39696);
          v353 = v1183;
          if (v1066 <= 0xFF)
          {
            v363 = v1066;
            goto LABEL_485;
          }
LABEL_498:
          v367 = *((_QWORD *)v13 + 1);
          if (v367)
          {
            if ((*(_BYTE *)(v367 + 16) & 4) != 0)
              v368 = 7;
            else
              v368 = 3;
          }
          else
          {
            v368 = 7;
          }
          v364 = *(_QWORD *)(v358 + 39432);
          if (v364 >= *(_QWORD *)(v358 + 39440))
          {
            v364 = *(_QWORD *)(v358 + 39448);
            if ((v364 & 1) == 0)
            {
              v402 = *(_QWORD *)(v364 + 8) ^ *(_QWORD *)(v358 + 39456);
              *(_QWORD *)(v358 + 39440) = v364 + HIDWORD(v402);
              *(_QWORD *)(v358 + 39448) = v364 + (int)v402;
              goto LABEL_503;
            }
            v1182 = v353;
            v896 = v361;
            JSC::sanitizeStackForVM((JSC *)v358, (JSC::VM *)v343, v344, v345, v346, a6, a7, a8);
            SlowCase = JSC::LocalAllocator::allocateSlowCase(v358 + 39408, v358 + 192, 32, 0, 0, v897, v898, v899);
            v361 = v896;
            v353 = v1182;
            v364 = SlowCase;
          }
          else
          {
LABEL_503:
            *(_QWORD *)(v358 + 39432) = v364 + 32;
          }
          *(_DWORD *)v364 = v361[227] >> 4;
          v347 = (int8x16_t)0x1080200uLL;
          *(_DWORD *)(v364 + 4) = 17302016;
          *(_QWORD *)(v364 + 8) = v368;
          *(_DWORD *)(v364 + 16) = v359;
          *(_DWORD *)(v364 + 20) = (_DWORD)v13;
          *(_WORD *)(v364 + 24) = WORD2(v13);
          *(_WORD *)(v364 + 26) = v356;
          *(_DWORD *)(v364 + 28) = HIWORD(v356);
          if (*(_BYTE *)(v358 + 755))
            __dmb(0xAu);
          v13 = v1196;
          v19 = v1186;
          goto LABEL_487;
        }
        if (v359 != 2)
          goto LABEL_498;
        v374 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
        if (v374)
        {
          v375 = *((_DWORD *)v374 + 1);
          if (v375 <= v356)
          {
            v376 = 0;
            goto LABEL_523;
          }
          v1179 = (unint64_t *)(v358 + 39696);
          v1184 = v353;
          v376 = WTF::StringImpl::at(v374, v356);
          v374 = (WTF::StringImpl *)*((_QWORD *)v13 + 1);
          if (v374)
          {
            v375 = *((_DWORD *)v374 + 1);
            v361 = (unint64_t *)(v358 + 39696);
            v353 = v1184;
LABEL_523:
            v343 = v356 + 1;
            if (v375 <= v343)
            {
              LODWORD(v374) = 0;
              goto LABEL_525;
            }
            v1179 = v361;
            v1184 = v353;
            LODWORD(v374) = WTF::StringImpl::at(v374, v343);
          }
          v361 = v1179;
          v353 = v1184;
        }
        else
        {
          v376 = 0;
        }
LABEL_525:
        if ((v374 | v376) <= 0x7F)
        {
          LOBYTE(v1215) = v376;
          BYTE1(v1215) = (_BYTE)v374;
          v1233 = (WTF *)&v1215;
          v1234 = 2;
          v377 = ((v376 - 1640531527) << 16) ^ ((_DWORD)v374 << 11) ^ (v376 - 1640531527);
          v378 = (v377 + (v377 >> 11)) ^ (8 * (v377 + (v377 >> 11)));
          v379 = (v378 + (v378 >> 5)) ^ (4 * (v378 + (v378 >> 5)));
          v380 = ((v379 + (v379 >> 15)) ^ ((v379 + (v379 >> 15)) << 10)) & 0xFFFFFF;
          if (v380)
            v381 = v380;
          else
            v381 = 0x800000;
          v1235[0] = v381;
          v382 = v358 + 81168;
          v383 = v381 & 0x1FF;
          v384 = *(_QWORD *)(v358 + 81168 + 8 * v383);
          if (!v384)
            goto LABEL_538;
          v385 = *(_QWORD *)(v384 + 8);
          v386 = (v385 & 1) != 0 ? 0 : (WTF::StringImpl *)v385;
          v387 = *((_DWORD *)v386 + 4);
          if (v387 < 0x100)
          {
            v1178 = v361;
            v1181 = v353;
            v388 = WTF::StringImpl::hashSlowCase(v386);
            v361 = v1178;
            v353 = v1181;
          }
          else
          {
            v388 = v387 >> 8;
          }
          if (v388 == v381
            && (v389 = (uint64_t)v386,
                v390 = v353,
                v391 = v361,
                v392 = WTF::equalInternal<unsigned char>(v389, (unint64_t)&v1215, 2),
                v361 = v391,
                v353 = v390,
                v392))
          {
            v364 = *(_QWORD *)(v382 + 8 * v383);
          }
          else
          {
LABEL_538:
            v1177 = v361;
            v1180 = v353;
            WTF::AtomStringImpl::add(&v1233, v345, v346, a6, a7, a8, &v1230);
            v393 = v1230;
            v394 = *((_DWORD *)v1230 + 4);
            v395 = v1230;
            if ((v394 & 3) == 2)
            {
              v395 = v1230;
              do
              {
                v395 = (WTF *)*((_QWORD *)v395 + 3);
                v394 = *((_DWORD *)v395 + 4);
              }
              while ((v394 & 3) == 2);
            }
            v396 = v1177;
            if ((v394 & 8) != 0)
            {
              v345 = 0;
            }
            else
            {
              *((_DWORD *)v395 + 4) = v394 | 8;
              v345 = (unint64_t)*((unsigned int *)v395 + 1) << ((v394 & 4) == 0);
            }
            v353 = v1180;
            v397 = v358 + 192;
            v364 = *v1177;
            if (*v1177 >= v1177[1])
            {
              v1173 = v345;
              v364 = v1177[2];
              if ((v364 & 1) != 0)
              {
                JSC::sanitizeStackForVM((JSC *)v358, (JSC::VM *)v343, v344, v345, v346, a6, a7, a8);
                v364 = JSC::LocalAllocator::allocateSlowCase(v358 + 39672, v358 + 192, 16, 0, 0, v1005, v1006, v1007);
                v345 = v1173;
                v397 = v358 + 192;
                v396 = v1177;
                v353 = v1180;
              }
              else
              {
                v396 = v1177;
                v353 = v1180;
                v413 = *(_QWORD *)(v364 + 8) ^ v1177[3];
                v1177[1] = v364 + HIDWORD(v413);
                v1177[2] = v364 + (int)v413;
                *v1177 = v364 + 16;
                v397 = v358 + 192;
              }
            }
            else
            {
              *v1177 = v364 + 16;
            }
            *(_DWORD *)v364 = v396[227] >> 4;
            v347 = (int8x16_t)0x1080200uLL;
            *(_DWORD *)(v364 + 4) = 17302016;
            *(_QWORD *)(v364 + 8) = v393;
            if (*(_BYTE *)(v358 + 755))
              __dmb(0xAu);
            if (v345 >= 0x101)
            {
              JSC::Heap::reportExtraMemoryAllocatedSlowCase(v397, 0, v364, v345, v346, a6, a7, a8);
              v353 = v1180;
            }
            *(_QWORD *)(v382 + 8 * v383) = v364;
          }
          goto LABEL_486;
        }
        goto LABEL_498;
      }
LABEL_466:
      if (HIDWORD(v352))
        v343 = COERCE__INT64((double)v352) + 0x2000000000000;
      else
        v343 = v352 | 0xFFFE000000000000;
      v354 = v1218;
      if ((_DWORD)v1218 == DWORD1(v1218)
        || *((__int128 **)&v1218 + 1) != (__int128 *)((char *)&v1219 + 8) && *((_QWORD *)&v1218 + 1))
      {
        if (JSC::MarkedVectorBase::slowAppend((uint64_t)&v1218, v343, v344, v345, v346, a6, a7, a8) == 1)
          LOBYTE(__dst) = 1;
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)&v1218 + 1) + 8 * v1218) = v343;
        LODWORD(v1218) = v354 + 1;
      }
      v340 = v351;
      if (v352 == v351)
      {
        v340 = v351 + 1;
        v709 = v1237;
        if ((int)v351 + 1 > v1237
          || (v710 = (WTF::StringImpl *)*v1203) != 0
          && *((_DWORD *)v710 + 1) > v351
          && (WTF::StringImpl::at(v710, v351) & 0xFC00) == 0xD800
          && (v711 = (WTF::StringImpl *)*v1203) != 0
          && *((_DWORD *)v711 + 1) > v340
          && (WTF::StringImpl::at(v711, (int)v351 + 1) & 0xFC00) == 0xDC00
          && (v340 = v351 + 2, (int)v351 + 2 > v709))
        {
LABEL_1022:
          v344 = v1218;
          v114 = (unint64_t)v13;
          if ((_DWORD)v1218)
          {
            v14 = (uint64_t)v1192;
            v713 = JSC::JSImmutableButterfly::tryCreateFromArgList((uint64_t)v1192, *((JSC::VM **)&v1218 + 1), v1218, v345, v346, a6, a7, a8);
            v18 = v1188;
            if (v713)
            {
              JSC::StringReplaceCache::set(v1175, (WTF::StringImpl *)*v1203, (uint64_t)v1200, v713, *(_QWORD *)(a1 + 2120), *(_QWORD *)(a1 + 2128), v341, v712);
              JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1218, v714, v715, v716, v717, v718, v719, v720);
              v301 = v1174;
              v306 = v713;
              goto LABEL_1025;
            }
            JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)&v1238);
LABEL_1321:
            v114 = 0;
          }
          JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v1218, (void *)v343, v344, v345, v346, a6, a7, a8);
          goto LABEL_1125;
        }
      }
    }
    v350 = 0;
LABEL_554:
    v351 = 0;
    v352 = -1;
    goto LABEL_463;
  }
  if (v1199 && *((_DWORD *)v1199 + 1))
  {
    v115 = 0;
    goto LABEL_131;
  }
  v1242 = 0;
  var60[0] = (int *)v14;
  v1233 = (WTF *)v1235;
  v1234 = 16;
  v24 = *v1203;
  if (*v1203)
    LODWORD(v24) = *(_DWORD *)(v24 + 4);
  v25 = 0;
  LODWORD(v1241) = v24;
  while (1)
  {
    v26 = *(_QWORD *)(a1 + 56);
    v1211 = (WTF::StringImpl *)a1;
    v27 = *v1203;
    if (*v1203)
    {
      v28 = *(_DWORD *)(v27 + 16);
      v29 = (v28 & 4) == 0;
      v30 = *(void **)(v27 + 8);
      LODWORD(v27) = *(_DWORD *)(v27 + 4);
      v31 = (v28 >> 2) & 1;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      LOBYTE(v31) = 1;
    }
    v32 = (JSC::RegExp **)(v26 + 90552);
    v33 = *((unsigned __int8 *)v1200 + 16);
    if (v33 == 1)
    {
      v34 = *((_QWORD *)v1200 + 5);
      if (v29)
      {
        v694 = *(_QWORD *)(v34 + 72);
        if (v694 && *(_DWORD *)(v694 + 4))
        {
LABEL_35:
          v1230 = (WTF *)&v1211;
          v1231 = v26;
          v36 = v1200;
          v1232[0] = v1200;
          goto LABEL_36;
        }
      }
      else
      {
        v35 = *(_QWORD *)(v34 + 56);
        if (v35 && *(_DWORD *)(v35 + 4))
          goto LABEL_35;
      }
    }
    else if (v33 == 2 || v33 == 0)
    {
      goto LABEL_574;
    }
    __dst = v30;
    LODWORD(v1218) = v27;
    BYTE4(v1218) = v31;
    BYTE8(v1218) = 1;
    JSC::RegExp::compileMatchOnly((uint64_t)v1200, v26, v29, (__int128 *)&__dst);
    v33 = *((unsigned __int8 *)v1200 + 16);
LABEL_574:
    v1230 = (WTF *)&v1211;
    v1231 = v26;
    v36 = v1200;
    v1232[0] = v1200;
    if (v33 != 1)
    {
      if (!v33)
      {
LABEL_1414:
        v43 = JSC::RegExp::matchInline<(JSC::Yarr::MatchFrom)0>(JSC::JSGlobalObject *,JSC::VM &,WTF::String const&,unsigned int)::{lambda(void)#1}::operator()((JSC::JSGlobalObject ***)&v1230);
        v44 = this;
LABEL_600:
        v13 = v1196;
        goto LABEL_45;
      }
LABEL_591:
      __dst = (char *)&v1218 + 8;
      *(_QWORD *)&v1218 = 32;
      v404 = (_DWORD *)*((_QWORD *)v1200 + 6);
      if (v404 && v404[5])
        v405 = *v404 + 2 * *((_DWORD *)v1200 + 6);
      else
        v405 = 2 * *((_DWORD *)v1200 + 6);
      v406 = v405 + 2;
      v407 = (char *)&v1218 + 8;
      if ((v405 + 2) >= 0x21)
      {
        WTF::Vector<int,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&__dst, v406);
        v407 = (char *)__dst;
      }
      DWORD1(v1218) = v406;
      *v32 = v1200;
      v408 = *v1203;
      if (*v1203)
      {
        v409 = *(_QWORD *)(v408 + 8);
        v410 = *(unsigned int *)(v408 + 4) | ((unint64_t)((*(_DWORD *)(v408 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v409 = 0;
        v410 = 0x100000000;
      }
      v411 = JSC::Yarr::interpret(*((_QWORD *)v1200 + 4), v409, v410, v25, (uint64_t)v407, a6, a7, a8);
      *v32 = 0;
      if ((v411 & 0x80000000) != 0)
      {
        v44 = 0;
        v43 = -1;
      }
      else
      {
        v43 = v411;
        v44 = *((unsigned int *)v407 + 1);
      }
      v412 = __dst;
      if ((char *)&v1218 + 8 != __dst && __dst)
      {
        __dst = 0;
        LODWORD(v1218) = 0;
        WTF::fastFree((unint64_t)v412, (void *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
      }
      goto LABEL_600;
    }
    v34 = *((_QWORD *)v1200 + 5);
LABEL_36:
    v37 = *(unsigned __int8 *)(v34 + 104);
    *(_QWORD *)&v1219 = 0;
    v38 = *(_QWORD *)(v26 + 8);
    __dst = (void *)v26;
    v1218 = v38;
    *v32 = v36;
    if (!v37)
      goto LABEL_37;
    v246 = (unsigned __int8 *)(v26 + 93049);
    if (__ldaxr((unsigned __int8 *)(v26 + 93049)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v246))
    {
      goto LABEL_310;
    }
    WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::lockSlow((uint64_t)v246);
LABEL_310:
    v248 = *(void **)(v26 + 93056);
    if (!v248)
    {
      v248 = (void *)WTF::fastMalloc((WTF *)0x2000);
      bzero(v248, 0x2000uLL);
      v937 = *(_QWORD *)(v26 + 93056);
      *(_QWORD *)(v26 + 93056) = v248;
      if (v937)
      {
        WTF::fastFree(v937, v930, v931, v932, v933, v934, v935, v936);
        v248 = *(void **)(v26 + 93056);
      }
      v13 = v1196;
    }
    *((_QWORD *)&v1218 + 1) = v248;
    LODWORD(v1219) = 0x2000;
LABEL_37:
    v39 = *v1203;
    if (!*v1203)
    {
      v40 = 0;
      v41 = 0;
      goto LABEL_40;
    }
    if ((*(_BYTE *)(v39 + 16) & 4) != 0)
    {
      v40 = *(_QWORD *)(v39 + 8);
      v41 = *(unsigned int *)(v39 + 4);
LABEL_40:
      v42 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, void **))(*((_QWORD *)v1200 + 5) + 48))(v40, v25, v41, 0, &__dst);
      goto LABEL_41;
    }
    v42 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, void **))(*((_QWORD *)v1200 + 5) + 64))(*(_QWORD *)(v39 + 8), v25, *(unsigned int *)(v39 + 4), 0, &__dst);
LABEL_41:
    v43 = v42;
    v44 = this;
    if (!*((_QWORD *)&v1218 + 1))
      goto LABEL_42;
    v249 = (unsigned __int8 *)__dst + 93049;
    v250 = __ldxr((unsigned __int8 *)__dst + 93049);
    if (v250 != 1)
    {
      __clrex();
LABEL_320:
      WTF::LockAlgorithm<unsigned char,(unsigned char)1,(unsigned char)2,WTF::EmptyLockHooks<unsigned char>>::unlockSlow(v249, 0, a3, (uint64_t)a4, a5, a6, a7, a8);
      goto LABEL_42;
    }
    if (__stlxr(0, v249))
      goto LABEL_320;
LABEL_42:
    if (!DWORD1(v1219))
      *((_QWORD *)__dst + 11319) = 0;
    if (v43 == -2)
    {
      JSC::RegExp::byteCodeCompileIfNecessary(v1200, (JSC::VM *)v26);
      if (!*((_BYTE *)v1200 + 16))
        goto LABEL_1414;
      goto LABEL_591;
    }
    if (!*(_DWORD *)(v26 + 80))
      goto LABEL_1625;
LABEL_45:
    v315 = *(_DWORD *)(v26 + 80);
    if ((v315 & 0x27) != 0 && (v315 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v26 + 64), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v26 + 16))
    {
      v44 = 0;
      v43 = -1;
    }
    else
    {
LABEL_1625:
      if (v43 != -1)
      {
        *(_QWORD *)(a1 + 2152) = v1200;
        *(_QWORD *)(a1 + 2144) = v13;
        *(_QWORD *)(a1 + 2120) = v43;
        *(_QWORD *)(a1 + 2128) = v44;
        *(_BYTE *)(a1 + 2136) = 0;
        if (*(_DWORD *)(v26 + 760) >= *(unsigned __int8 *)(a1 + 7))
          JSC::Heap::writeBarrierSlowPath(v26 + 192, a1);
      }
    }
    v1215 = (WTF::StringImpl *)v43;
    v1216 = (WTF::StringImpl *)v44;
    v45 = var60[0];
    if (var60[0][20])
    {
      v316 = var60[0][20];
      if ((v316 & 0x27) != 0 && (v316 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(var60[0] + 16), 7u, a3, (uint64_t)a4, a5, a6, a7, a8);
      if (*((_QWORD *)v45 + 2))
        goto LABEL_441;
      v43 = (unint64_t)v1215;
    }
    v46 = v1242;
    if (v43 == -1)
      break;
    if (v1242 < v43)
    {
      v47 = HIDWORD(v1234);
      if (HIDWORD(v1234) == (_DWORD)v1234)
      {
        if (!WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned long &>((uint64_t)&v1233, (int *)&v1242, (int *)&v1215, (uint64_t)a4, a5, a6, a7, a8))
        {
          v319 = JSC::createOutOfMemoryError(a1, (JSC::JSGlobalObject *)this);
          v326 = (JSC::Exception *)v319;
          if ((v319 & 0xFFFE000000000002) != 0
            || &JSC::Exception::s_info != (char **)(16
                                                  * *(unsigned int *)(16 * (*(_DWORD *)v319 & 0xFFFFFFFE) + 0x4C)))
          {
            v326 = (JSC::Exception *)JSC::Exception::create((uint64_t)v45, (JSC::VM *)v319, 0, v320, v321, v322, v323, v324);
          }
          JSC::VM::throwException((JSC::VM *)v45, (JSC::JSGlobalObject *)a1, v326, v325, v320, v321, v322, v323, v324);
LABEL_441:
          v114 = 0;
LABEL_201:
          v164 = v1233;
          if (v1235 != (_DWORD *)v1233 && v1233 != 0)
          {
            v1233 = 0;
            LODWORD(v1234) = 0;
            WTF::fastFree((unint64_t)v164, (void *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          goto LABEL_653;
        }
        v43 = (unint64_t)v1215;
      }
      else
      {
        v48 = (_DWORD *)((char *)v1233 + 8 * HIDWORD(v1234));
        *v48 = v1242;
        v48[1] = v43;
        if (v46 == (_DWORD)v43)
          *(_QWORD *)v48 = 0;
        HIDWORD(v1234) = v47 + 1;
      }
    }
    v25 = v1216;
    v1242 = (unint64_t)v1216;
    if ((WTF::StringImpl *)v43 == v1216)
    {
      v25 = (_DWORD)v1216 + 1;
      if ((int)v1216 + 1 > v1241)
        goto LABEL_200;
    }
  }
  v43 = v1242;
LABEL_200:
  v114 = (unint64_t)v13;
  if (!v43)
    goto LABEL_201;
  v167 = (int)v1241;
  v168 = HIDWORD(v1234);
  if (v1241 > v43)
  {
    if (HIDWORD(v1234) != (_DWORD)v1234)
    {
      v187 = (_DWORD *)((char *)v1233 + 8 * HIDWORD(v1234));
      v168 = HIDWORD(v1234) + 1;
      *v187 = v43;
      v187[1] = v167;
      HIDWORD(v1234) = v168;
      goto LABEL_221;
    }
    if (WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int &>((uint64_t)&v1233, (int *)&v1242, (int *)&v1241, (uint64_t)a4, a5, a6, a7, a8))
    {
      v168 = HIDWORD(v1234);
      v13 = v1196;
      goto LABEL_221;
    }
    v428 = (WTF **)var60;
    goto LABEL_634;
  }
LABEL_221:
  v169 = v1233;
  v170 = *(WTF **)(a1 + 56);
  v1230 = v170;
  if (v168 == 1)
  {
    v171 = *v1203;
    if (*v1203)
      v172 = *(_DWORD *)(v171 + 4);
    else
      v172 = 0;
    v173 = *((_DWORD *)v1233 + 1) - *(_DWORD *)v1233;
    if (*(int *)v1233 <= 0)
    {
      v114 = (unint64_t)v13;
      if (v173 >= v172)
        goto LABEL_201;
    }
    if (v173 >= v172)
      v174 = v172;
    else
      v174 = v173;
    if (!(_DWORD)v174)
    {
      v177 = &WTF::StringImpl::s_emptyAtomString;
      WTF::StringImpl::s_emptyAtomString += 2;
      v1215 = (WTF::StringImpl *)&WTF::StringImpl::s_emptyAtomString;
      goto LABEL_317;
    }
    v175 = *(_DWORD *)v1233 & ~(*(int *)v1233 >> 31);
    if ((*(_DWORD *)(v171 + 16) & 4) != 0)
    {
      if (v174 <= 0xC)
      {
        v176 = (_BYTE *)(*(_QWORD *)(v171 + 8) + v175);
        v177 = (int *)WTF::fastCompactMalloc((WTF *)(v174 + 20));
        v178 = v177 + 5;
        *v177 = 2;
        v177[1] = v174;
        *((_QWORD *)v177 + 1) = v177 + 5;
        v177[4] = 4;
        v1215 = (WTF::StringImpl *)v177;
        if ((_DWORD)v174 == 1)
          *v178 = *v176;
        else
          memcpy(v178, v176, v174);
        goto LABEL_317;
      }
    }
    else if (v174 <= 6)
    {
      WTF::StringImpl::create((_WORD *)(*(_QWORD *)(v171 + 8) + 2 * v175), v174, (uint64_t *)&v1215);
      v177 = (int *)v1215;
      goto LABEL_317;
    }
    v335 = (_DWORD *)*v1203;
    if ((*(_DWORD *)(v171 + 16) & 3) == 2)
      v335 = *(_DWORD **)(v171 + 24);
    v336 = WTF::fastCompactMalloc((WTF *)0x20);
    v177 = (int *)v336;
    v337 = *(_DWORD *)(v171 + 16);
    v338 = *(_QWORD *)(v171 + 8);
    *v335 += 2;
    *(_DWORD *)v336 = 2;
    *(_DWORD *)(v336 + 4) = v174;
    if ((v337 & 4) != 0)
    {
      *(_QWORD *)(v336 + 8) = v338 + v175;
      *(_DWORD *)(v336 + 16) = 6;
    }
    else
    {
      *(_QWORD *)(v336 + 8) = v338 + 2 * v175;
      *(_DWORD *)(v336 + 16) = 2;
    }
    *(_QWORD *)(v336 + 24) = v335;
    v1215 = (WTF::StringImpl *)v336;
LABEL_317:
    __dst = v177;
    v114 = JSC::jsString((uint64_t)v170, (JSC::VM *)&__dst, a3, (uint64_t)a4, a5, a6, a7, a8);
    v212 = (WTF::StringImpl *)__dst;
    __dst = 0;
    if (v212)
    {
LABEL_269:
      if (*(_DWORD *)v212 == 2)
      {
LABEL_294:
        WTF::StringImpl::~StringImpl(v212, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
        WTF::fastFree(v232, v233, v234, v235, v236, v237, v238, v239);
      }
      else
      {
        *(_DWORD *)v212 -= 2;
      }
    }
    goto LABEL_201;
  }
  if (!v168)
    goto LABEL_379;
  LODWORD(v191) = 0;
  v192 = 8 * v168;
  v193 = (_DWORD *)((char *)v1233 + 4);
  v194 = v192;
  do
  {
    v191 = (*v193 + v191 - *(v193 - 1));
    v193 += 2;
    v194 -= 8;
  }
  while (v194);
  if (!(_DWORD)v191)
  {
LABEL_379:
    v114 = *((_QWORD *)v170 + 5246);
    goto LABEL_201;
  }
  v195 = *v1203;
  if (!*v1203)
  {
    v196 = 0;
    v197 = 0;
    goto LABEL_254;
  }
  v196 = *(_QWORD *)(v195 + 8);
  v197 = *(unsigned int *)(v195 + 4);
  if ((*(_BYTE *)(v195 + 16) & 4) != 0)
  {
LABEL_254:
    if ((v191 & 0x80000000) == 0)
    {
      WTF::tryFastCompactMalloc((WTF *)(v191 + 20), &__dst);
      v204 = __dst;
      if (__dst)
      {
        v205 = 0;
        *(_DWORD *)__dst = 2;
        v204[1] = v191;
        *((_QWORD *)v204 + 1) = v204 + 5;
        v204[4] = 4;
        while (1)
        {
          v206 = *(_QWORD *)v169;
          if (v197 < (int)*(_QWORD *)v169)
            goto LABEL_1386;
          v207 = (uint64_t)(0xFFFFFFFF00000001 * v206) >> 32;
          v198 = v197 - (int)v206;
          if (v207 != -1)
          {
            v208 = v198 >= v207;
            v198 = (uint64_t)(0xFFFFFFFF00000001 * v206) >> 32;
            if (!v208)
              goto LABEL_1386;
          }
          v209 = (char *)v204 + v205 + 20;
          v210 = (_BYTE *)(v196 + (int)v206);
          if (v198 == 1)
          {
            *v209 = *v210;
          }
          else if (v198)
          {
            memcpy(v209, v210, v198);
          }
          v205 += v207;
          v169 = (WTF *)((char *)v169 + 8);
          v192 -= 8;
          if (!v192)
          {
            __dst = v204;
            v211 = JSC::jsString((uint64_t)v170, (JSC::VM *)&__dst, v198, v199, v200, v201, v202, v203);
            v114 = v211;
            v212 = (WTF::StringImpl *)__dst;
            __dst = 0;
            if (!v212)
              goto LABEL_201;
            goto LABEL_269;
          }
        }
      }
    }
LABEL_1455:
    v428 = &v1230;
LABEL_634:
    JSC::throwOutOfMemoryError((JSC::JSGlobalObject *)a1, (JSC::JSGlobalObject *)v428);
    v114 = 0;
    goto LABEL_201;
  }
  if (v191 > 0x7FFFFFEF)
    goto LABEL_1455;
  WTF::tryFastCompactMalloc((WTF *)(2 * v191 + 20), &__dst);
  v414 = __dst;
  if (!__dst)
    goto LABEL_1455;
  v415 = 0;
  *(_DWORD *)__dst = 2;
  v414[1] = v191;
  *((_QWORD *)v414 + 1) = v414 + 5;
  v414[4] = 0;
  v416 = (int *)((char *)v169 + 4);
  while (1)
  {
    v417 = *(v416 - 1);
    v418 = v197 - v417;
    if (v197 < v417)
      break;
    v419 = *v416;
    v420 = v419 - v417;
    if ((_DWORD)v419 - (_DWORD)v417 != -1)
    {
      v208 = v418 >= v420;
      v418 = v419 - v417;
      if (!v208)
        break;
    }
    v421 = (_WORD *)v414 + v415 + 10;
    v422 = (_WORD *)(v196 + 2 * v417);
    if (v418 == 1)
    {
      *v421 = *v422;
    }
    else if (v418)
    {
      memcpy(v421, v422, 2 * v418);
    }
    v415 += v420;
    v416 += 2;
    v192 -= 8;
    if (!v192)
    {
      __dst = v414;
      v114 = JSC::jsString((uint64_t)v170, (JSC::VM *)&__dst, v198, v199, v200, v201, v202, v203);
      v212 = (WTF::StringImpl *)__dst;
      __dst = 0;
      if (!v212)
        goto LABEL_201;
      if (*(_DWORD *)v212 != 2)
      {
        *(_DWORD *)v212 -= 2;
        goto LABEL_201;
      }
      goto LABEL_294;
    }
  }
LABEL_1386:
  __break(1u);
LABEL_1387:
  v887 = (WTF::StringImpl *)v1197;
LABEL_1300:
  v1215 = v887;
LABEL_1215:
  v114 = JSC::jsString((uint64_t)v1200, (JSC::VM *)&v1215, v198, v199, v200, v201, v202, v203);
  v844 = v1215;
  v1215 = 0;
  if (v844)
  {
LABEL_1216:
    if (*(_DWORD *)v844 == 2)
    {
      WTF::StringImpl::~StringImpl(v844, v732, v198, v199, v200, v201, v202, v203);
      WTF::fastFree(v888, v889, v890, v891, v892, v893, v894, v895);
    }
    else
    {
      *(_DWORD *)v844 -= 2;
    }
  }
LABEL_1113:
  JSC::CachedCall::~CachedCall((JSC::CachedCall *)&__dst, v732, v198, v199, v200, v201, v202, v203);
  v722 = (WTF *)v1191;
  v723 = v1190;
LABEL_1114:
  if (HIDWORD(v1231))
  {
    v788 = v1230;
    v789 = 8 * HIDWORD(v1231);
    do
    {
      v790 = *(WTF::StringImpl **)v788;
      *(_QWORD *)v788 = 0;
      if (v790)
      {
        if (*(_DWORD *)v790 == 2)
        {
          WTF::StringImpl::~StringImpl(v790, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v791, v792, v793, v794, v795, v796, v797, v798);
        }
        else
        {
          *(_DWORD *)v790 -= 2;
        }
      }
      v788 = (WTF *)((char *)v788 + 8);
      v789 -= 8;
    }
    while (v789);
  }
  v783 = v1230;
  if (v723 != v1230 && v1230 != 0)
  {
    v1230 = 0;
    LODWORD(v1231) = 0;
    WTF::fastFree((unint64_t)v783, (void *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  v785 = v1233;
  if (v722 != v1233 && v1233 != 0)
  {
    v1233 = 0;
    LODWORD(v1234) = 0;
    WTF::fastFree((unint64_t)v785, (void *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
  }
  do
LABEL_1125:
    v787 = __ldaxr((unsigned int *)&g_superSamplerCount);
  while (__stlxr(v787 - 1, (unsigned int *)&g_superSamplerCount));
LABEL_653:
  if (v1199)
  {
    if (*(_DWORD *)v1199 == 2)
    {
      WTF::StringImpl::~StringImpl(v1199, (WTF::AtomStringImpl *)this, a3, (uint64_t)a4, a5, a6, a7, a8);
      WTF::fastFree(v457, v458, v459, v460, v461, v462, v463, v464);
    }
    else
    {
      *(_DWORD *)v1199 -= 2;
    }
  }
  return v114;
}

unint64_t JSC::stringIndexOfImpl(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, float a11)
{
  JSC::JSGlobalObject *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  unint64_t v27;
  int *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  double v52;
  uint64_t v53;
  double v54;
  unsigned int v55;
  _QWORD v57[2];
  JSC::JSObject *v58;
  JSC::JSRopeString *v59;
  unsigned __int8 *v60;
  JSC::VM *v61;
  StringView v62;

  v11 = this;
  v12 = *((_QWORD *)this + 7);
  v13 = *((_QWORD *)a2 + 5);
  v60 = (unsigned __int8 *)v13;
  v61 = (JSC::VM *)v12;
  if ((v13 & 0xFFFE000000000002) != 0)
  {
    if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
      return JSC::throwTypeError(this, &v61);
  }
  else
  {
    v14 = *(unsigned __int8 *)(v13 + 5);
    if (v14 != 2)
    {
      v55 = v14 - 51;
      if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2 || v55 < 5)
        return JSC::throwTypeError(this, &v61);
    }
  }
  v15 = *((int *)a2 + 8) - 1;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v16 = 10;
    v59 = (JSC::JSRopeString *)10;
  }
  else
  {
    v59 = (JSC::JSRopeString *)*((_QWORD *)a2 + 6);
    if (v15 == 1)
      v16 = 10;
    else
      v16 = *((_QWORD *)a2 + 7);
  }
  v58 = (JSC::JSObject *)v16;
  if ((v13 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v13 + 5) != 2)
    v13 = (unint64_t)JSC::JSValue::toStringSlowCase(&v60, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v12 + 80))
  {
    v48 = *(_DWORD *)(v12 + 80);
    if ((v48 & 0x27) != 0 && (v48 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  v17 = (char *)v59;
  if (((unint64_t)v59 & 0xFFFE000000000002) != 0 || *((_BYTE *)v59 + 5) != 2)
    v17 = (char *)JSC::JSValue::toStringSlowCase((unsigned __int8 **)&v59, (uint64_t)v11, (JSC::Structure *)1, a4, a5, a6, a7, a8);
  if (*(_DWORD *)(v12 + 80))
  {
    v49 = *(_DWORD *)(v12 + 80);
    if ((v49 & 0x27) != 0 && (v49 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v12 + 16))
      return 0;
  }
  if (v58 == (JSC::JSObject *)10)
  {
    v18 = 0;
  }
  else
  {
    v46 = *(_QWORD *)(v13 + 8);
    if ((v46 & 1) != 0)
      v47 = (_DWORD *)(v13 + 16);
    else
      v47 = (_DWORD *)(v46 + 4);
    LODWORD(v18) = *v47;
    if ((*v47 & 0x80000000) != 0)
    {
      a3 = (JSC::CallFrame *)"EncodedJSValue JSC::stringIndexOfImpl(JSGlobalObject *, CallFrame *)";
      a4 = 343;
      __break(0xC471u);
      goto LABEL_96;
    }
    if ((unint64_t)v58 < 0xFFFE000000000000 || (v58 & 0x80000000) != 0)
      goto LABEL_97;
    if (v18 >= v58)
      v18 = v58;
    else
      v18 = v18;
  }
  while (1)
  {
    v19 = *(int **)(v13 + 8);
    v20 = (unsigned int *)(v19 + 1);
    if ((v19 & 1) != 0)
      v20 = (unsigned int *)(v13 + 16);
    v21 = *v20;
    v22 = *((_QWORD *)v17 + 1);
    if ((v22 & 1) != 0)
      v23 = v17 + 16;
    else
      v23 = (_DWORD *)(v22 + 4);
    if (v21 < *v23 + (int)v18)
      return 0xFFFE0000FFFFFFFFLL;
    if ((v19 & 1) == 0)
    {
      if (v19)
      {
LABEL_22:
        v24 = v19[4];
        v25 = (const char *)*((_QWORD *)v19 + 1);
        LODWORD(v19) = v19[1];
        v26 = (v24 >> 2) & 1;
LABEL_23:
        v27 = v19 | (unint64_t)(v26 << 32);
        goto LABEL_24;
      }
LABEL_62:
      v25 = 0;
      v26 = 1;
      goto LABEL_23;
    }
    if ((v19 & 2) == 0)
    {
      v19 = *JSC::JSRopeString::resolveRope(v13, v11, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (v19)
        goto LABEL_22;
      goto LABEL_62;
    }
    v32 = *(_QWORD *)((*(_QWORD *)(v13 + 20) & 0xFFFFFFFFFLL) + 8);
    if (v32
      && (v33 = *(unsigned int *)(v32 + 4),
          v34 = *(_QWORD *)(v13 + 24),
          v35 = v34 >> 16,
          v33 > (v34 >> 16)))
    {
      v36 = *(unsigned int *)(v32 + 16);
      v25 = *(const char **)(v32 + 8);
      LODWORD(v27) = *(_DWORD *)(v13 + 16);
      if ((int)v33 - (int)v35 > v27 || (LODWORD(v27) = v33 - v35, (_DWORD)v35))
      {
        v37 = (v34 >> 16);
        v27 = v27;
        v38 = v33 - v35;
        if (((v36 >> 2) & 1) != 0)
        {
          if (v38 < v27)
            goto LABEL_96;
          v25 += v37;
          v27 = v27 | 0x100000000;
        }
        else
        {
          if (v38 < v27)
            goto LABEL_96;
          v25 += 2 * v37;
        }
      }
      else
      {
        v27 = v33 & 0xFFFFFFFEFFFFFFFFLL | (((v36 >> 2) & 1) << 32);
      }
    }
    else
    {
      v27 = 0x100000000;
      v25 = "";
    }
LABEL_24:
    v57[0] = v25;
    v57[1] = v27;
    if (*(_DWORD *)(v12 + 80))
    {
      v50 = *(_DWORD *)(v12 + 80);
      if ((v50 & 0x27) != 0 && (v50 & 0x20) == 0)
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
      if (*(_QWORD *)(v12 + 16))
        return 0;
    }
    v28 = (int *)*((_QWORD *)v17 + 1);
    if ((v28 & 1) == 0)
    {
      if (v28)
      {
LABEL_27:
        v11 = (JSC::JSGlobalObject *)*((_QWORD *)v28 + 1);
        v13 = v28[1] | ((unint64_t)((v28[4] >> 2) & 1) << 32);
        goto LABEL_28;
      }
      goto LABEL_64;
    }
    if ((v28 & 2) == 0)
    {
      v28 = *JSC::JSRopeString::resolveRope((unint64_t)v17, v11, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (v28)
        goto LABEL_27;
LABEL_64:
      v11 = 0;
      v13 = 0x100000000;
      goto LABEL_28;
    }
    v39 = *(_QWORD *)((*(_QWORD *)(v17 + 20) & 0xFFFFFFFFFLL) + 8);
    if (v39)
    {
      v11 = *(JSC::JSGlobalObject **)(v39 + 8);
      v40 = *(unsigned int *)(v39 + 4) | ((unint64_t)((*(_DWORD *)(v39 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v11 = 0;
      v40 = 0x100000000;
    }
    v41 = *((_QWORD *)v17 + 3);
    v42 = v41 >> 16;
    if (v40 <= (v41 >> 16))
    {
      v13 = 0x100000000;
      v11 = (JSC::JSGlobalObject *)"";
      goto LABEL_28;
    }
    v43 = *((_DWORD *)v17 + 4);
    if (v40 - (v41 >> 16) <= v43)
    {
      v43 = v40 - (v41 >> 16);
      if (!(_DWORD)v42)
        break;
    }
    v44 = (v41 >> 16);
    v13 = v43;
    v45 = v40 - (unint64_t)v42;
    if ((v40 & 0x100000000) != 0)
    {
      if (v45 >= v43)
      {
        v11 = (JSC::JSGlobalObject *)((char *)v11 + v44);
        v13 = v43 | 0x100000000;
        goto LABEL_28;
      }
    }
    else if (v45 >= v43)
    {
      v11 = (JSC::JSGlobalObject *)((char *)v11 + 2 * v44);
      goto LABEL_28;
    }
LABEL_96:
    __break(1u);
LABEL_97:
    v54 = JSC::JSValue::toIntegerOrInfinity(&v58, v11, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
    if (*(_DWORD *)(v12 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v12, v53, (uint64_t)a3, a4, a5, a6, a7, a8))
    {
      return 0;
    }
    a9.i64[0] = 0;
    if (v54 >= 0.0)
    {
      a10 = (double)(int)v18;
      *(double *)a9.i64 = v54;
      if (v54 > (double)(int)v18)
        *(double *)a9.i64 = (double)(int)v18;
    }
    v18 = *(double *)a9.i64;
  }
  v13 = v40;
  if (!*(_DWORD *)(v12 + 80))
    goto LABEL_29;
LABEL_28:
  v51 = *(_DWORD *)(v12 + 80);
  if ((v51 & 0x27) != 0 && (v51 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v12 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v12 + 16))
    return 0;
LABEL_29:
  v29 = *(_QWORD *)(v12 + 93360);
  if ((v29 & 1) != 0)
    v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 & 0xFFFFFFFFFFFFFFFCLL))(v12, v12 + 93360);
  v62.m_characters = (void *)v13;
  *(_QWORD *)&v62.m_length = v18;
  v30 = WTF::StringView::find((uint64_t)v57, v29, (unint64_t)v11, v62, *(double *)a9.i64, a10, a11);
  if (v30 == -1)
    return 0xFFFE0000FFFFFFFFLL;
  if (HIDWORD(v30))
  {
    v52 = (double)v30;
  }
  else
  {
    if ((v30 & 0x80000000) == 0)
      return v30 | 0xFFFE000000000000;
    v52 = (double)v30;
  }
  return *(_QWORD *)&v52 + 0x2000000000000;
}

unint64_t JSC::stringProtoFuncSplitFast(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9, double a10, float a11)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  uint64_t hasExceptionsAfterHandlingTraps;
  JSC::VM *v19;
  unint64_t v20;
  JSC::VM *v21;
  int *v22;
  JSC::VM *v23;
  int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t SlowCase;
  int v36;
  WTF::StringImpl *v37;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  JSC::JSImmutableButterfly *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  int16x8_t v67;
  __int128 v68;
  unint64_t v69;
  int16x8_t *v70;
  unint64_t v71;
  unint64_t v72;
  int16x8_t *v73;
  __int8 *v74;
  int v75;
  int v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  unint64_t v99;
  BOOL v100;
  int v101;
  unint64_t v102;
  int v103;
  int8x16_t v104;
  double v105;
  unint64_t v106;
  unint64_t v107;
  _DWORD *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int32x4_t v128;
  JSC::VM *v129;
  JSC::JSGlobalObject *v130;
  WTF::StringImpl *v131;
  unsigned __int8 v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  WTF::AtomStringImpl *v145;
  uint64_t v146;
  uint64_t v147;
  WTF::StringImpl *v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  WTF::AtomStringImpl *v164;
  uint64_t v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  unint64_t v168;
  void *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  __int128 v177;
  unint64_t v178;
  int16x8_t v179;
  JSC::VM *v180;
  JSC::VM *v181;
  uint64_t v182;
  WTF::StringImpl *v183;
  int v184;
  BOOL v185;
  uint64_t v186;
  uint64_t v187;
  WTF::StringImpl *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  unsigned int v194;
  int *v195;
  unint64_t v196;
  unsigned int v197;
  JSC::JSObject *v198;
  unsigned __int8 *v199;
  JSC::VM *v200;
  uint64_t v201;
  unsigned __int8 *v202;
  JSC::VM *v203;
  JSC **v204;
  StringView v205;

  v14 = 0xFFFE000000000002;
  v15 = *((_QWORD *)this + 7);
  v203 = (JSC::VM *)v15;
  v204 = (JSC **)this;
  v16 = *((_QWORD *)a2 + 5);
  v201 = 0;
  v202 = (unsigned __int8 *)v16;
  if ((v16 & 0xFFFE000000000002) != 0 || (v17 = (JSC::VM *)v15, *(_BYTE *)(v16 + 5) != 2))
  {
    v16 = (unint64_t)JSC::JSValue::toStringSlowCase(&v202, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    v17 = v203;
  }
  v201 = v16;
  if (*((_DWORD *)v17 + 20))
  {
    v75 = *((_DWORD *)v17 + 20);
    if ((v75 & 0x27) != 0 && (v75 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v17 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v17 + 2))
      return 0;
    v16 = v201;
  }
  hasExceptionsAfterHandlingTraps = v16 + 8;
  if ((*(_BYTE *)(v16 + 8) & 1) != 0)
    hasExceptionsAfterHandlingTraps = (uint64_t)JSC::JSRopeString::resolveRope(v16, (JSC::JSGlobalObject *)v204, (uint64_t)a3, a4, (int8x16_t)a9, a5, a6, a7, a8);
  v199 = (unsigned __int8 *)v16;
  v200 = (JSC::VM *)hasExceptionsAfterHandlingTraps;
  v19 = v203;
  if (*((_DWORD *)v203 + 20))
  {
    v76 = *((_DWORD *)v203 + 20);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v203 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v19 + 2))
      return 0;
  }
  v198 = (JSC::JSObject *)*((_QWORD *)a2 + 7);
  v197 = -1;
  if (v198 != (JSC::JSObject *)10)
  {
    v197 = JSC::JSValue::toUInt32(&v198, (JSC::JSGlobalObject *)v204, (uint64_t)a3, a4, a5, a6, a7, a8, (int8x16_t)a9);
    hasExceptionsAfterHandlingTraps = (uint64_t)v203;
    if (*((_DWORD *)v203 + 20))
    {
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v203, v110, (uint64_t)a3, a4, a5, a6, a7, a8);
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        return 0;
    }
  }
  v20 = *((_QWORD *)a2 + 6);
  v196 = v20;
  v21 = (JSC::VM *)v204;
  if ((v20 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v20 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v196, (JSC::JSGlobalObject *)v204, a3, a4, a5, a6, a7, a8, &v195);
  }
  else
  {
    v22 = *(int **)(v20 + 8);
    if ((v22 & 1) != 0)
    {
      hasExceptionsAfterHandlingTraps = (uint64_t)JSC::JSRopeString::resolveRope(v20, (JSC::JSGlobalObject *)v204, (uint64_t)a3, a4, (int8x16_t)a9, a5, a6, a7, a8);
      v22 = *(int **)hasExceptionsAfterHandlingTraps;
    }
    if (v22)
      *v22 += 2;
    v195 = v22;
  }
  v23 = v203;
  if (*((_DWORD *)v203 + 20))
  {
    v77 = *((_DWORD *)v203 + 20);
    if ((v77 & 0x27) != 0 && (v77 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VM *)((char *)v203 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*((_QWORD *)v23 + 2))
      goto LABEL_104;
  }
  v24 = v195;
  if (v195)
    v25 = v195[1];
  else
    v25 = 0;
  v194 = v25;
  if (!v197)
  {
    v50 = JSC::constructEmptyArray((unint64_t)v204, 0, 0, 0, a5, a6, a7, a8, (__n128)a9);
    goto LABEL_51;
  }
  if (v196 == 10)
  {
    LOBYTE(v186) = 0;
    v187 = 0x800000000;
    v188 = (WTF::StringImpl *)((char *)&v189 + 8);
    v189 = 0u;
    v190 = 0u;
    v191 = 0u;
    v192 = 0u;
    v193 = 0;
    v111 = v201;
    if ((v201 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v201 + 5) != 2)
      v111 = JSC::jsString(v204[7], v200, a3, a4, a5, a6, a7, a8);
    JSC::MarkedVector<JSC::JSValue,8ul,WTF::RecordOverflow>::appendWithCrashOnOverflow((uint64_t)&v186, v111, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*((_DWORD *)v203 + 20)
      && JSC::VM::hasExceptionsAfterHandlingTraps(v203, v112, v113, v114, v115, v116, v117, v118))
    {
      SlowCase = 0;
    }
    else
    {
      v183 = v188;
      v184 = v187;
      SlowCase = JSC::constructArray((unint64_t)v204, 0, (uint64_t)&v183, 0, v115, v116, v117, v118);
    }
    JSC::MarkedVectorBase::~MarkedVectorBase((JSC::MarkedVectorBase *)&v187, v119, v120, v121, v115, v116, v117, v118);
    goto LABEL_38;
  }
  v26 = v15 + 37584;
  if (v197 == -1 && *((_BYTE *)v204[256] + 4) != 2)
  {
    v27 = *(_QWORD *)v200;
    if (*(_QWORD *)v200)
    {
      if (v195)
      {
        v28 = *(_DWORD *)(v27 + 16);
        if ((v28 & 0x10) != 0 && (v195[4] & 0x10) != 0)
        {
          v29 = v15 + 85264;
          hasExceptionsAfterHandlingTraps = v28 < 0x100
                                          ? WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)v200)
                                          : v28 >> 8;
          if ((v30 = hasExceptionsAfterHandlingTraps & 0x3F,
                *(_QWORD *)(v29 + 24 * (hasExceptionsAfterHandlingTraps & 0x3F)) == v27)
            && *(int **)(v29 + 24 * (hasExceptionsAfterHandlingTraps & 0x3F) + 8) == v24
            || (v30 = ((_BYTE)hasExceptionsAfterHandlingTraps + 1) & 0x3F,
                *(_QWORD *)(v29 + 24 * (((_BYTE)hasExceptionsAfterHandlingTraps + 1) & 0x3F)) == v27)
            && *(int **)(v29 + 24 * (((_BYTE)hasExceptionsAfterHandlingTraps + 1) & 0x3F) + 8) == v24)
          {
            v31 = *(_QWORD *)(v29 + 24 * v30 + 16);
            if (v31)
            {
              v32 = *((_DWORD *)v204 + 222);
              if (v32)
                v33 = 16 * (v32 & 0xFFFFFFFE);
              else
                v33 = 0;
              v34 = v31 + 16;
              SlowCase = *(_QWORD *)v26;
              if (*(_QWORD *)v26 >= *(_QWORD *)(v15 + 37592))
              {
                SlowCase = *(_QWORD *)(v15 + 37600);
                if ((SlowCase & 1) != 0)
                {
                  JSC::sanitizeStackForVM((JSC *)v15, v21, (uint64_t)a3, a4, a5, a6, a7, a8);
                  SlowCase = JSC::LocalAllocator::allocateSlowCase(v15 + 37560, v15 + 192, 16, 0, 0, v124, v125, v126);
LABEL_36:
                  *(_DWORD *)SlowCase = 0;
                  v36 = *(_DWORD *)(v33 + 8);
                  *(_DWORD *)SlowCase = v33 >> 4;
                  *(_DWORD *)(SlowCase + 4) = v36;
                  *(_QWORD *)(SlowCase + 8) = v34;
                  if (*(_BYTE *)(v15 + 755))
                    __dmb(0xAu);
                  goto LABEL_38;
                }
                v78 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v15 + 37608);
                *(_QWORD *)(v15 + 37592) = SlowCase + HIDWORD(v78);
                *(_QWORD *)(v15 + 37600) = SlowCase + (int)v78;
              }
              *(_QWORD *)v26 = SlowCase + 16;
              goto LABEL_36;
            }
          }
        }
      }
    }
  }
  v47 = (_DWORD *)(v15 + 86808);
  v48 = (JSC::JSImmutableButterfly *)(v15 + 86800);
  *(_DWORD *)(v15 + 86812) = 0;
  v186 = v15 + 86800;
  v187 = (uint64_t)&v204;
  v188 = (WTF::StringImpl *)&v197;
  *(_QWORD *)&v189 = v15;
  *((_QWORD *)&v189 + 1) = &v201;
  *(_QWORD *)&v190 = &v203;
  *((_QWORD *)&v190 + 1) = &v194;
  *(_QWORD *)&v191 = &v199;
  *((_QWORD *)&v191 + 1) = &v195;
  v49 = *(_QWORD *)v200;
  if (!*(_QWORD *)v200 || (v51 = *(unsigned int *)(v49 + 4), !(_DWORD)v51))
  {
    if (!v195 || !v195[1])
      goto LABEL_50;
    if (v49)
      v61 = *(_DWORD *)(v49 + 4);
    else
      v61 = 0;
    LODWORD(v183) = v61;
    if (*v47)
    {
      **(_DWORD **)v48 = v61;
LABEL_125:
      ++v47[1];
LABEL_50:
      v50 = JSC::stringProtoFuncSplitFast(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()((uint64_t)&v186, (__n128)a9, (uint64_t)v21, (uint64_t)a3, a4, a5, a6, a7, a8);
LABEL_51:
      SlowCase = v50;
      goto LABEL_38;
    }
    v62 = v15 + 86800;
    v63 = 1;
LABEL_124:
    *(_DWORD *)(*(_QWORD *)v48 + 4 * v47[1]) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v62, v63, (unint64_t)&v183);
    goto LABEL_125;
  }
  if (v194)
  {
    v14 = (unint64_t)v195;
    if (v194 == 1)
    {
      if (!v195[1])
      {
        __break(0xC471u);
        JUMPOUT(0x198BDDE70);
      }
      v52 = (unsigned __int8 *)*((_QWORD *)v195 + 1);
      if ((v195[4] & 4) != 0)
        v15 = *v52;
      else
        v15 = *(unsigned __int16 *)v52;
      v53 = v197;
      if ((*(_BYTE *)(v49 + 16) & 4) != 0)
      {
        if (v15 <= 0xFF)
        {
          v54 = 0;
          v26 = 0;
          v14 = 16;
          do
          {
            v55 = *(_QWORD *)(v49 + 8);
            v56 = v55 + v54;
            v57 = v51 - v54;
            if (v57 >= 0x10)
              v58 = 16;
            else
              v58 = v57;
            if (v58)
            {
              v59 = v58;
              hasExceptionsAfterHandlingTraps = v56;
              while (*(unsigned __int8 *)hasExceptionsAfterHandlingTraps != v15)
              {
                ++hasExceptionsAfterHandlingTraps;
                if (!--v59)
                  goto LABEL_68;
              }
            }
            else
            {
LABEL_68:
              if (v57 < 0x11)
                break;
              hasExceptionsAfterHandlingTraps = (uint64_t)memchr((void *)(v56 + v58), v15, v57 - v58);
              if (!hasExceptionsAfterHandlingTraps)
                break;
            }
            v11 = hasExceptionsAfterHandlingTraps - v55;
            if (v11 == -1)
              break;
            v12 = v26;
            if ((_DWORD)v26 == *v47)
            {
              v106 = v26 + ((unint64_t)v26 >> 2);
              if (v106 >= 0x10)
                v69 = v106 + 1;
              else
                v69 = 16;
              if (v69 <= (unint64_t)v26 + 1)
                v107 = v26 + 1;
              else
                v107 = v69;
              v65 = v107 >> 30;
              if (v107 >> 30)
              {
                __break(0xC471u);
                goto LABEL_215;
              }
              v108 = *(_DWORD **)v48;
              v109 = (void *)WTF::fastMalloc((WTF *)(4 * v107));
              *v47 = v107;
              *(_QWORD *)v48 = v109;
              memcpy(v109, v108, 4 * v12);
              if (v108)
              {
                if (*(_DWORD **)v48 == v108)
                {
                  *(_QWORD *)v48 = 0;
                  *v47 = 0;
                }
                WTF::fastFree((unint64_t)v108, v21, (uint64_t)a3, a4, a5, a6, a7, a8);
              }
              v60 = (_DWORD *)(*(_QWORD *)v48 + 4 * v47[1]);
            }
            else
            {
              v60 = (_DWORD *)(*(_QWORD *)v48 + 4 * v26);
            }
            *v60 = v11;
            v26 = (v47[1] + 1);
            v47[1] = v26;
            if ((_DWORD)v26 == v53)
              goto LABEL_50;
            v54 = v11 + 1;
            v51 = *(unsigned int *)(v49 + 4);
          }
          while (v11 + 1 < v51);
        }
      }
      else
      {
        v183 = 0;
        v64 = *(unsigned int *)(v49 + 4);
        if ((_DWORD)v64)
        {
          v65 = 0;
          v66 = 0;
          v67 = vdupq_n_s16(v15);
          v68 = xmmword_199123280;
          while (1)
          {
            v69 = *(_QWORD *)(v49 + 8);
            v70 = (int16x8_t *)(v69 + 2 * (_QWORD)v66);
            v71 = v69 + 2 * v64;
            v72 = v71 - (_QWORD)v70;
            if ((uint64_t)(v71 - (_QWORD)v70) <= -2)
              break;
            if (v72 > 0x3E)
            {
              v104 = (int8x16_t)v68;
              if ((unint64_t)&v70->u64[1] + 6 < v71)
              {
                while (1)
                {
                  a9 = vceqq_s16(*v70, v67);
                  LOWORD(v68) = vmaxvq_u16((uint16x8_t)a9);
                  if ((_DWORD)v68)
                    break;
                  v73 = v70 + 1;
                  v74 = &v70[1].i8[14];
                  ++v70;
                  if ((unint64_t)v74 >= v71)
                    goto LABEL_160;
                }
              }
              else
              {
                v73 = v70;
LABEL_160:
                if ((unint64_t)v73 >= v71)
                  goto LABEL_119;
                v70 = (int16x8_t *)(v71 - 16);
                a9 = vceqq_s16(*(int16x8_t *)(v71 - 16), v67);
                LOWORD(v68) = vmaxvq_u16((uint16x8_t)a9);
                if (!(_DWORD)v68)
                  goto LABEL_119;
              }
              v68 = (__int128)v104;
              a9 = (int16x8_t)vornq_s8(v104, (int8x16_t)a9);
              a9.i16[0] = vminvq_u16((uint16x8_t)a9);
              v70 = (int16x8_t *)((char *)v70 + 2 * a9.u8[0]);
            }
            else
            {
              while (v70->u16[0] != (_DWORD)v15)
              {
                v70 = (int16x8_t *)((char *)v70 + 2);
                v72 -= 2;
                if (!v72)
                  goto LABEL_119;
              }
            }
            if (v70 == (int16x8_t *)v71)
              goto LABEL_119;
            v91 = (uint64_t)v70->i64 - v69;
            v183 = (WTF::StringImpl *)(v91 >> 1);
            if (v91 == -2)
              goto LABEL_119;
            v177 = v68;
            v179 = v67;
            if ((_DWORD)v65 == *v47)
            {
              hasExceptionsAfterHandlingTraps = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>(v26 + 49216, &v183);
              v65 = v47[1];
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)v48 + 4 * v65) = (unint64_t)v91 >> 1;
              v65 = (v47[1] + 1);
              v47[1] = v65;
            }
            if ((_DWORD)v65 == v53)
              goto LABEL_50;
            v66 = (char *)v183 + 1;
            v64 = *(unsigned int *)(v49 + 4);
            v68 = v177;
            v67 = v179;
            if ((unint64_t)v183 + 1 >= v64)
              goto LABEL_119;
          }
LABEL_215:
          __break(1u);
LABEL_216:
          v176 = v65;
          v178 = v69;
          v181 = v21;
          v138 = WTF::StringImpl::at((WTF::StringImpl *)hasExceptionsAfterHandlingTraps, v21);
          LOWORD(v182) = v138;
          if (v138 > 0xFF)
          {
            WTF::StringImpl::create(&v182, 1uLL, (uint64_t *)&v183);
            v99 = JSC::JSString::create(v15, (JSC::VM *)&v183, v139, v140, v141, v142, v143, v144);
            v148 = v183;
            v183 = 0;
            if (v148)
            {
              if (*(_DWORD *)v148 == 2)
              {
                WTF::StringImpl::~StringImpl(v148, v145, v146, v147, v94, v95, v96, v97);
                WTF::fastFree(v149, v150, v151, v152, v153, v154, v155, v156);
              }
              else
              {
                *(_DWORD *)v148 -= 2;
              }
            }
            v65 = v176;
            v69 = v178;
            v21 = v181;
            goto LABEL_145;
          }
          v98 = v138;
          v65 = v176;
          v69 = v178;
          v21 = v181;
          while (1)
          {
            v99 = *(_QWORD *)(v15 + 8 * v98 + 42216);
LABEL_145:
            if ((*((_BYTE *)v48 + 4) & 0xE) == 6)
            {
              v105 = (double)(int)v99;
              if (v99 <= v12)
                *(_QWORD *)&v105 = v99 + v11;
              *(double *)((char *)v48 + v69) = v105;
            }
            else
            {
              *(_QWORD *)((char *)v48 + v69) = v99;
              if (v99)
                v100 = (v99 & v14) == 0;
              else
                v100 = 0;
              if (v100 && *(_DWORD *)(v15 + 760) >= *((unsigned __int8 *)v48 + 7))
              {
                v180 = v21;
                v122 = v65;
                v123 = v69;
                JSC::Heap::writeBarrierSlowPath(v26, (unint64_t)v48);
                v69 = v123;
                v65 = v122;
                v21 = v180;
              }
            }
            v21 = (JSC::VM *)((char *)v21 + 1);
            v69 += 8;
            if ((JSC::VM *)v65 == v21)
              break;
LABEL_141:
            hasExceptionsAfterHandlingTraps = *(_QWORD *)v200;
            if (*(_QWORD *)v200 && (unint64_t)v21 < *(unsigned int *)(hasExceptionsAfterHandlingTraps + 4))
              goto LABEL_216;
            v98 = 0;
          }
          JSC::StringSplitCache::set((JSC::StringSplitCache *)(v15 + 85264), *(const WTF::String **)v200, (const WTF::String *)v195, v48, v94, v95, v96, v97);
          v101 = *((_DWORD *)v204 + 222);
          if (v101)
            v102 = 16 * (v101 & 0xFFFFFFFE);
          else
            v102 = 0;
          SlowCase = *(_QWORD *)v49;
          if (*(_QWORD *)v49 >= *(_QWORD *)(v49 + 8))
          {
            SlowCase = *(_QWORD *)(v49 + 16);
            if ((SlowCase & 1) != 0)
            {
              JSC::sanitizeStackForVM((JSC *)(v26 - 192), v21, (uint64_t)a3, a4, a5, a6, a7, a8);
              SlowCase = JSC::LocalAllocator::allocateSlowCase(v15 + 37560, v26, 16, 0, 0, v135, v136, v137);
            }
            else
            {
              v134 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v49 + 24);
              *(_QWORD *)(v49 + 8) = SlowCase + HIDWORD(v134);
              *(_QWORD *)(v49 + 16) = SlowCase + (int)v134;
              *(_QWORD *)v49 = SlowCase + 16;
            }
          }
          else
          {
            *(_QWORD *)v49 = SlowCase + 16;
          }
          *(_DWORD *)SlowCase = 0;
          v103 = *(_DWORD *)(v102 + 8);
          *(_DWORD *)SlowCase = v102 >> 4;
          *(_DWORD *)(SlowCase + 4) = v103;
          *(_QWORD *)(SlowCase + 8) = v47;
          if (*(_BYTE *)(v15 + 755))
            __dmb(0xAu);
          goto LABEL_38;
        }
      }
    }
    else
    {
      v79 = 0;
      v182 = 0;
      v80 = (uint64_t *)(v15 + 93360);
      while (1)
      {
        v81 = *(_BYTE *)(v49 + 16);
        v183 = *(WTF::StringImpl **)(v49 + 8);
        v184 = v51;
        v185 = (v81 & 4) != 0;
        v82 = *v80;
        if ((*v80 & 1) != 0)
          v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 & 0xFFFFFFFFFFFFFFFCLL))(v15, v15 + 93360);
        if (v14)
        {
          v83 = *(_QWORD *)(v14 + 8);
          v84 = *(unsigned int *)(v14 + 4);
          v85 = ((unint64_t)*(unsigned int *)(v14 + 16) >> 2) & 1;
        }
        else
        {
          v84 = 0;
          v83 = 0;
          v85 = 1;
        }
        v205.m_characters = (void *)(v84 | (v85 << 32));
        *(_QWORD *)&v205.m_length = v79;
        v86 = WTF::StringView::find((uint64_t)&v183, v82, v83, v205, *(double *)a9.i64, a10, a11);
        v182 = v86;
        if (v86 == -1)
          break;
        v87 = *(unsigned int *)(v15 + 86812);
        if ((_DWORD)v87 == *v47)
        {
          WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned long &>(v15 + 86800, &v182);
          v88 = *(_DWORD *)(v15 + 86812);
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)v48 + 4 * v87) = v86;
          v88 = *(_DWORD *)(v15 + 86812) + 1;
          *(_DWORD *)(v15 + 86812) = v88;
        }
        if (v88 == v197)
          goto LABEL_50;
        v79 = v182 + v194;
        LODWORD(v51) = *(_DWORD *)(v49 + 4);
      }
    }
LABEL_119:
    v89 = *(_QWORD *)v200;
    if (*(_QWORD *)v200)
      LODWORD(v89) = *(_DWORD *)(v89 + 4);
    LODWORD(v183) = v89;
    v90 = v47[1];
    if ((_DWORD)v90 != *v47)
    {
      *(_DWORD *)(*(_QWORD *)v48 + 4 * v90) = v89;
      goto LABEL_125;
    }
    v63 = v90 + 1;
    v62 = (uint64_t)v48;
    goto LABEL_124;
  }
  if (v51 >= v197)
    v92 = v197;
  else
    v92 = v51;
  if (v197 == -1 && v92 >> 5 <= 0xC34 && *((_BYTE *)v204[256] + 4) != 2)
  {
    v49 = v15 + 37584;
    v93 = JSC::JSImmutableButterfly::create((JSC::JSImmutableButterfly *)v15, (JSC::VM *)0x19, v92, a4, a5, a6, a7, a8);
    v65 = v92;
    v48 = (JSC::JSImmutableButterfly *)v93;
    v21 = 0;
    v47 = (_DWORD *)(v93 + 16);
    v26 = v15 + 192;
    v69 = 16;
    v11 = 0xFFFE000000000000;
    v12 = 0xFFFDFFFFFFFFFFFFLL;
    goto LABEL_141;
  }
  v127 = v92;
  SlowCase = JSC::constructEmptyArray((unint64_t)v204, 0, v92, 0, a5, a6, a7, a8, (__n128)a9);
  if (*((_DWORD *)v203 + 20)
    && JSC::VM::hasExceptionsAfterHandlingTraps(v203, (uint64_t)v21, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
LABEL_104:
    SlowCase = 0;
    goto LABEL_38;
  }
  if (v127)
  {
    v129 = 0;
    while (1)
    {
      v130 = (JSC::JSGlobalObject *)v204;
      v131 = *(WTF::StringImpl **)v200;
      if (!*(_QWORD *)v200 || *((_DWORD *)v131 + 1) <= v129)
        break;
      v157 = WTF::StringImpl::at(v131, v129);
      LOWORD(v182) = v157;
      if (v157 <= 0xFF)
      {
        v132 = v157;
        goto LABEL_200;
      }
      WTF::StringImpl::create(&v182, 1uLL, (uint64_t *)&v183);
      v133 = JSC::JSString::create(v15, (JSC::VM *)&v183, v158, v159, v160, v161, v162, v163);
      v167 = v183;
      v183 = 0;
      if (v167)
      {
        if (*(_DWORD *)v167 == 2)
        {
          WTF::StringImpl::~StringImpl(v167, v164, v165, v166, a5, a6, a7, a8);
          WTF::fastFree(v168, v169, v170, v171, v172, v173, v174, v175);
        }
        else
        {
          *(_DWORD *)v167 -= 2;
        }
      }
LABEL_201:
      JSC::JSObject::putDirectIndex(SlowCase, (unint64_t)v130, v129, v133, a5, a6, a7, a8, v128);
      if (*((_DWORD *)v203 + 20)
        && JSC::VM::hasExceptionsAfterHandlingTraps(v203, (uint64_t)v21, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        goto LABEL_104;
      }
      v129 = (JSC::VM *)((_DWORD)v129 + 1);
      if (v127 == (_DWORD)v129)
        goto LABEL_38;
    }
    v132 = 0;
LABEL_200:
    v133 = *(_QWORD *)(v15 + 8 * v132 + 42216);
    goto LABEL_201;
  }
LABEL_38:
  v37 = (WTF::StringImpl *)v195;
  v195 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
    {
      WTF::StringImpl::~StringImpl(v37, v21, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v39, v40, v41, v42, v43, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)v37 -= 2;
    }
  }
  return SlowCase;
}

unint64_t JSC::stringProtoFuncSplitFast(JSC::JSGlobalObject *,JSC::CallFrame *)::$_0::operator()(uint64_t a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int8x16_t v21;
  __int128 v22;
  JSC::JSImmutableButterfly *v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  WTF::StringImpl *v34;
  unsigned __int8 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  WTF::StringImpl *v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  unsigned int v58;
  int v59;
  BOOL v60;
  JSC::VM *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  JSC::VM *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  unint64_t v77;
  int v78;
  int v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int8x16_t v89;
  JSC::VM *v90;
  JSC::VM *v91;
  unint64_t v92;
  JSC::JSString *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  JSC::JSGlobalObject *v102;
  int32x4_t v103;
  JSC::VM *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  JSC::VM *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  BOOL hasExceptionsAfterHandlingTraps;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t SlowCase;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD v136[2];
  int v137;
  _BYTE v138[2];
  uint64_t v139;

  v10 = *(unsigned int *)(*(_QWORD *)a1 + 12);
  if ((_DWORD)v10)
  {
    v11 = **(_DWORD **)(a1 + 16);
    v12 = **(_QWORD **)(a1 + 8);
    if (v11 == -1 && v10 >> 5 <= 0xC34 && *(_BYTE *)(*(_QWORD *)(v12 + 2048) + 4) != 2)
    {
      v14 = JSC::JSImmutableButterfly::create(*(JSC::JSImmutableButterfly **)(a1 + 24), (JSC::VM *)0x19, v10, a5, a6, a7, a8, a9);
      v23 = (JSC::JSImmutableButterfly *)v14;
      v135 = *(unsigned int *)(*(_QWORD *)a1 + 12);
      if ((_DWORD)v135)
      {
        v24 = 0;
        v25 = 0;
        v134 = v14 + 16;
        *(_QWORD *)&v22 = 17302016;
        do
        {
          if (v24 >= *(unsigned int *)(*(_QWORD *)a1 + 12))
          {
            __break(0xC471u);
            goto LABEL_136;
          }
          v26 = *(_DWORD *)(**(_QWORD **)a1 + 4 * v24);
          v27 = *(uint64_t **)(a1 + 8);
          v28 = *v27;
          v29 = *(_QWORD *)(*v27 + 56);
          v30 = v26 - v25;
          if (v26 == v25)
          {
            v36 = *(_QWORD *)(v29 + 41968);
            goto LABEL_20;
          }
          v31 = **(_QWORD **)(a1 + 32);
          v32 = *(_QWORD *)(v31 + 8);
          if (!v25)
          {
            v43 = (_DWORD *)(v31 + 16);
            if ((v32 & 1) == 0)
              v43 = (_DWORD *)(v32 + 4);
            if (*v43 == v30)
              goto LABEL_40;
          }
          if ((v32 & 2) != 0)
          {
            v44 = *(_DWORD *)(v31 + 26);
            v31 = *(_QWORD *)(v31 + 20) & 0xFFFFFFFFFLL;
            v25 += v44;
          }
          else if ((v32 & 1) != 0)
          {
            v129 = v22;
            JSC::JSRopeString::resolveRope(v31, (JSC::JSGlobalObject *)v28, v15, v16, v21, v17, v18, v19, v20);
            if (*(_DWORD *)(v29 + 80))
            {
              hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v29, v28, v15, v16, v17, v18, v19, v20);
              v22 = v129;
              if (hasExceptionsAfterHandlingTraps)
              {
                v36 = 0;
                goto LABEL_20;
              }
            }
            else
            {
              v22 = v129;
            }
          }
          if (!v25)
          {
            v42 = *(_QWORD *)(v31 + 8);
            if (v42)
              LODWORD(v42) = *(_DWORD *)(v42 + 4);
            if ((_DWORD)v42 == v30)
            {
LABEL_40:
              v36 = v31;
              goto LABEL_20;
            }
          }
          v33 = (unint64_t *)(v29 + 39696);
          if (v30 == 1)
          {
            v34 = *(WTF::StringImpl **)(v31 + 8);
            if (!v34 || *((_DWORD *)v34 + 1) <= v25)
            {
              v35 = 0;
LABEL_19:
              v36 = *(_QWORD *)(v29 + 8 * v35 + 42216);
              goto LABEL_20;
            }
            v133 = v22;
            v125 = WTF::StringImpl::at(v34, v25);
            v22 = v133;
            if (v125 <= 0xFF)
            {
              v35 = v125;
              goto LABEL_19;
            }
LABEL_29:
            v40 = *(_QWORD *)(v31 + 8);
            if (v40)
            {
              if ((*(_BYTE *)(v40 + 16) & 4) != 0)
                v41 = 7;
              else
                v41 = 3;
            }
            else
            {
              v41 = 7;
            }
            v36 = *(_QWORD *)(v29 + 39432);
            if (v36 >= *(_QWORD *)(v29 + 39440))
            {
              v36 = *(_QWORD *)(v29 + 39448);
              if ((v36 & 1) == 0)
              {
                v81 = *(_QWORD *)(v36 + 8) ^ *(_QWORD *)(v29 + 39456);
                *(_QWORD *)(v29 + 39440) = v36 + HIDWORD(v81);
                *(_QWORD *)(v29 + 39448) = v36 + (int)v81;
                goto LABEL_34;
              }
              v132 = v22;
              JSC::sanitizeStackForVM((JSC *)v29, (JSC::VM *)v28, v15, v16, v17, v18, v19, v20);
              SlowCase = JSC::LocalAllocator::allocateSlowCase(v29 + 39408, v29 + 192, 32, 0, 0, v113, v114, v115);
              v22 = v132;
              v36 = SlowCase;
            }
            else
            {
LABEL_34:
              *(_QWORD *)(v29 + 39432) = v36 + 32;
            }
            *(_DWORD *)v36 = *(_QWORD *)(v29 + 41512) >> 4;
            *(_DWORD *)(v36 + 4) = v22;
            *(_QWORD *)(v36 + 8) = v41;
            *(_DWORD *)(v36 + 16) = v30;
            *(_DWORD *)(v36 + 20) = v31;
            *(_WORD *)(v36 + 24) = WORD2(v31);
            *(_WORD *)(v36 + 26) = v25;
            *(_DWORD *)(v36 + 28) = HIWORD(v25);
            if (*(_BYTE *)(v29 + 755))
              __dmb(0xAu);
            goto LABEL_20;
          }
          if (v30 != 2)
            goto LABEL_29;
          v45 = *(WTF::StringImpl **)(v31 + 8);
          v128 = v22;
          if (!v45)
          {
            v47 = 0;
            goto LABEL_51;
          }
          v46 = *((_DWORD *)v45 + 1);
          if (v46 > v25)
          {
            v47 = WTF::StringImpl::at(v45, v25);
            v45 = *(WTF::StringImpl **)(v31 + 8);
            if (!v45)
            {
              v22 = v128;
              goto LABEL_51;
            }
            v46 = *((_DWORD *)v45 + 1);
            v22 = v128;
          }
          else
          {
            v47 = 0;
          }
          v28 = v25 + 1;
          if (v46 > v28)
          {
            v126 = v47;
            LODWORD(v45) = WTF::StringImpl::at(v45, v28);
            v22 = v128;
            v47 = v126;
          }
          else
          {
            LODWORD(v45) = 0;
          }
LABEL_51:
          if ((v45 | v47) > 0x7F)
            goto LABEL_29;
          v138[0] = v47;
          v138[1] = (_BYTE)v45;
          v136[0] = v138;
          v136[1] = 2;
          v48 = ((v47 - 1640531527) << 16) ^ ((_DWORD)v45 << 11) ^ (v47 - 1640531527);
          v49 = (v48 + (v48 >> 11)) ^ (8 * (v48 + (v48 >> 11)));
          v50 = (v49 + (v49 >> 5)) ^ (4 * (v49 + (v49 >> 5)));
          v51 = ((v50 + (v50 >> 15)) ^ ((v50 + (v50 >> 15)) << 10)) & 0xFFFFFF;
          if (v51)
            v52 = v51;
          else
            v52 = 0x800000;
          v137 = v52;
          v53 = v29 + 81168;
          v54 = v52 & 0x1FF;
          v55 = *(_QWORD *)(v29 + 81168 + 8 * v54);
          if (v55)
          {
            v56 = *(_QWORD *)(v55 + 8);
            v57 = (v56 & 1) != 0 ? 0 : (WTF::StringImpl *)v56;
            v58 = *((_DWORD *)v57 + 4);
            v59 = v58 < 0x100 ? WTF::StringImpl::hashSlowCase(v57) : v58 >> 8;
            if (v59 == v52)
            {
              v60 = WTF::equalInternal<unsigned char>((uint64_t)v57, (unint64_t)v138, 2);
              v22 = v128;
              if (v60)
              {
                v36 = *(_QWORD *)(v53 + 8 * v54);
                goto LABEL_20;
              }
            }
          }
          WTF::AtomStringImpl::add(v136, v16, v17, v18, v19, v20, &v139);
          v62 = v139;
          v139 = 0;
          v63 = *(_DWORD *)(v62 + 16);
          v64 = v62;
          if ((v63 & 3) == 2)
          {
            v64 = v62;
            do
            {
              v64 = *(_QWORD *)(v64 + 24);
              v63 = *(_DWORD *)(v64 + 16);
            }
            while ((v63 & 3) == 2);
          }
          v22 = v128;
          if ((v63 & 8) != 0)
          {
            v16 = 0;
          }
          else
          {
            *(_DWORD *)(v64 + 16) = v63 | 8;
            v16 = (unint64_t)*(unsigned int *)(v64 + 4) << ((v63 & 4) == 0);
          }
          v65 = v29 + 192;
          v36 = *v33;
          if (*v33 >= *(_QWORD *)(v29 + 39704))
          {
            v36 = *(_QWORD *)(v29 + 39712);
            if ((v36 & 1) != 0)
            {
              v127 = v16;
              JSC::sanitizeStackForVM((JSC *)v29, v61, v15, v16, v17, v18, v19, v20);
              v65 = v29 + 192;
              v124 = JSC::LocalAllocator::allocateSlowCase(v29 + 39672, v29 + 192, 16, 0, 0, v121, v122, v123);
              v16 = v127;
              v22 = v128;
              v36 = v124;
              goto LABEL_69;
            }
            v110 = *(_QWORD *)(v36 + 8) ^ *(_QWORD *)(v29 + 39720);
            *(_QWORD *)(v29 + 39704) = v36 + HIDWORD(v110);
            *(_QWORD *)(v29 + 39712) = v36 + (int)v110;
          }
          *v33 = v36 + 16;
LABEL_69:
          *(_DWORD *)v36 = *(_QWORD *)(v29 + 41512) >> 4;
          *(_DWORD *)(v36 + 4) = v22;
          *(_QWORD *)(v36 + 8) = v62;
          if (*(_BYTE *)(v29 + 755))
            __dmb(0xAu);
          if (v16 >= 0x101)
          {
            v117 = v36;
            JSC::Heap::reportExtraMemoryAllocatedSlowCase(v65, 0, v36, v16, v17, v18, v19, v20);
            v22 = v128;
            v36 = v117;
          }
          *(_QWORD *)(v53 + 8 * v54) = v36;
LABEL_20:
          v37 = **(_QWORD **)(a1 + 40);
          if (*(_DWORD *)(v37 + 80))
          {
            v80 = *(_DWORD *)(v37 + 80);
            if ((v80 & 0x27) != 0 && (v80 & 0x20) == 0)
            {
              v111 = v36;
              v131 = v22;
              JSC::VMTraps::handleTraps((JSC::VMTraps *)(v37 + 64), 7u, v15, v16, v17, v18, v19, v20);
              v22 = v131;
              v36 = v111;
            }
            if (*(_QWORD *)(v37 + 16))
              return 0;
          }
          if ((*((_BYTE *)v23 + 4) & 0xE) == 6)
          {
            *(double *)v21.i64 = (double)(int)v36;
            if (v36 <= 0xFFFDFFFFFFFFFFFFLL)
              v21.i64[0] = v36 - 0x2000000000000;
            *(_QWORD *)(v134 + 8 * v24) = v21.i64[0];
          }
          else
          {
            v38 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(v134 + 8 * v24) = v36;
            if (v36)
              v39 = (v36 & 0xFFFE000000000002) == 0;
            else
              v39 = 0;
            if (v39 && *(_DWORD *)(v38 + 760) >= *((unsigned __int8 *)v23 + 7))
            {
              v130 = v22;
              JSC::Heap::writeBarrierSlowPath(v38 + 192, (unint64_t)v23);
              v22 = v130;
            }
          }
          v25 = **(_DWORD **)(a1 + 48) + v26;
          ++v24;
        }
        while (v24 != v135);
      }
      JSC::StringSplitCache::set((JSC::StringSplitCache *)(*(_QWORD *)(a1 + 24) + 85264), **(const WTF::String ***)(*(_QWORD *)(a1 + 56) + 8), **(const WTF::String ***)(a1 + 64), v23, v17, v18, v19, v20);
      v73 = *(_DWORD *)(**(_QWORD **)(a1 + 8) + 888);
      if (v73)
        v74 = 16 * (v73 & 0xFFFFFFFE);
      else
        v74 = 0;
      v75 = *(_QWORD *)(a1 + 24);
      v76 = (char *)v23 + 16;
      v77 = *(_QWORD *)(v75 + 37584);
      if (v77 >= *(_QWORD *)(v75 + 37592))
      {
        v77 = *(_QWORD *)(v75 + 37600);
        if ((v77 & 1) != 0)
        {
          JSC::sanitizeStackForVM((JSC *)v75, v66, v67, v68, v69, v70, v71, v72);
          v77 = JSC::LocalAllocator::allocateSlowCase(v75 + 37560, v75 + 192, 16, 0, 0, v118, v119, v120);
LABEL_79:
          *(_DWORD *)v77 = 0;
          v78 = *(_DWORD *)(v74 + 8);
          *(_DWORD *)v77 = v74 >> 4;
          *(_DWORD *)(v77 + 4) = v78;
          *(_QWORD *)(v77 + 8) = v76;
          if (*(_BYTE *)(v75 + 755))
            __dmb(0xAu);
          return v77;
        }
        v109 = *(_QWORD *)(v77 + 8) ^ *(_QWORD *)(v75 + 37608);
        *(_QWORD *)(v75 + 37592) = v77 + HIDWORD(v109);
        *(_QWORD *)(v75 + 37600) = v77 + (int)v109;
      }
      *(_QWORD *)(v75 + 37584) = v77 + 16;
      goto LABEL_79;
    }
    v77 = JSC::constructEmptyArray(v12, 0, v10, 0, a6, a7, a8, a9, a2);
    v90 = **(JSC::VM ***)(a1 + 40);
    if (!*((_DWORD *)v90 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v90, v82, v83, v84, v85, v86, v87, v88))
    {
      v91 = (JSC::VM *)*(unsigned int *)(*(_QWORD *)a1 + 12);
      if (!(_DWORD)v91)
        return v77;
      v92 = 0;
      v93 = 0;
      while (1)
      {
        if (v92 >= *(unsigned int *)(*(_QWORD *)a1 + 12))
        {
          __break(0xC471u);
LABEL_136:
          JUMPOUT(0x198BDEB1CLL);
        }
        v94 = *(_DWORD *)(**(_QWORD **)a1 + 4 * v92);
        v102 = JSC::jsSubstring(**(JSC ***)(a1 + 8), **(JSC::JSGlobalObject ***)(a1 + 32), v93, (v94 - (_DWORD)v93), v85, v86, v87, v88, v89);
        v104 = **(JSC::VM ***)(a1 + 40);
        if (*((_DWORD *)v104 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v104, v95, v96, v97, v98, v99, v100, v101))
            break;
        }
        JSC::JSObject::putDirectIndex(v77, **(_QWORD **)(a1 + 8), (JSC::VM *)v92, (unint64_t)v102, v98, v99, v100, v101, v103);
        v108 = **(JSC::VM ***)(a1 + 40);
        if (*((_DWORD *)v108 + 20))
        {
          if (JSC::VM::hasExceptionsAfterHandlingTraps(v108, v105, v106, v107, v85, v86, v87, v88))
            break;
        }
        v93 = (JSC::JSString *)(**(_DWORD **)(a1 + 48) + v94);
        if (v91 == (JSC::VM *)++v92)
          return v77;
      }
    }
    return 0;
  }
  return JSC::constructEmptyArray(**(_QWORD **)(a1 + 8), 0, v10, 0, a6, a7, a8, a9, a2);
}

void JSC::StringSplitCache::set(JSC::StringSplitCache *this, const WTF::String *a2, const WTF::String *a3, JSC::JSImmutableButterfly *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl **v15;
  char *v16;
  WTF::StringImpl *v17;
  unsigned int v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;
  char *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  if (a2)
  {
    v9 = *((_DWORD *)a2 + 4);
    if ((v9 & 0x10) != 0 && a3 && (*((_BYTE *)a3 + 16) & 0x10) != 0)
    {
      if (v9 < 0x100)
        v13 = WTF::StringImpl::hashSlowCase(a2);
      else
        v13 = v9 >> 8;
      v14 = v13 & 0x3F;
      v15 = (WTF::StringImpl **)((char *)this + 24 * (v13 & 0x3F));
      if (*v15)
      {
        v18 = (v13 + 1) & 0x3F;
        v19 = (WTF::StringImpl **)((char *)this + 24 * v18);
        v20 = *v19;
        if (!*v19)
        {
          *(_DWORD *)a2 += 2;
          *v19 = a2;
          v24 = (char *)this + 24 * v18;
          *(_DWORD *)a3 += 2;
          v25 = (WTF::StringImpl *)*((_QWORD *)v24 + 1);
          *((_QWORD *)v24 + 1) = a3;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::~StringImpl(v25, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
              WTF::fastFree(v58, v59, v60, v61, v62, v63, v64, v65);
            }
            else
            {
              *(_DWORD *)v25 -= 2;
            }
          }
          v14 = v18;
          goto LABEL_13;
        }
        *v19 = 0;
        if (*(_DWORD *)v20 == 2)
        {
          WTF::StringImpl::~StringImpl(v20, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v34, v35, v36, v37, v38, v39, v40, v41);
        }
        else
        {
          *(_DWORD *)v20 -= 2;
        }
        v21 = (char *)this + 24 * v18;
        v22 = (WTF::StringImpl *)*((_QWORD *)v21 + 1);
        *((_QWORD *)v21 + 1) = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::~StringImpl(v22, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v42, v43, v44, v45, v46, v47, v48, v49);
          }
          else
          {
            *(_DWORD *)v22 -= 2;
          }
        }
        *(_DWORD *)a2 += 2;
        v23 = *v15;
        *v15 = a2;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
          {
            WTF::StringImpl::~StringImpl(v23, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
            WTF::fastFree(v50, v51, v52, v53, v54, v55, v56, v57);
          }
          else
          {
            *(_DWORD *)v23 -= 2;
          }
        }
      }
      else
      {
        *(_DWORD *)a2 += 2;
        *v15 = a2;
      }
      v16 = (char *)this + 24 * v14;
      *(_DWORD *)a3 += 2;
      v17 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = a3;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
        {
          WTF::StringImpl::~StringImpl(v17, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
          WTF::fastFree(v26, v27, v28, v29, v30, v31, v32, v33);
        }
        else
        {
          *(_DWORD *)v17 -= 2;
        }
      }
LABEL_13:
      *((_QWORD *)this + 3 * v14 + 2) = a4;
    }
  }
}

JSC::JSGlobalObject *JSC::stringProtoFuncSubstring(JSC *this, uint64_t a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  unint64_t *v33;
  WTF::StringImpl *v34;
  unsigned __int8 v35;
  unint64_t SlowCase;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int *v44;
  int v45;
  unint64_t v46;
  double v47;
  WTF::StringImpl *v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unsigned int v61;
  int v62;
  JSC::VM *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  double v74;
  int v76;
  uint64_t v77;
  int *v78;
  unint64_t v79;
  BOOL hasExceptionsAfterHandlingTraps;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  JSC::VM *v96;
  _QWORD v97[2];
  int v98;
  _BYTE v99[2];
  uint64_t v100;

  v9 = a2;
  v11 = *((_QWORD *)this + 7);
  v12 = *(_QWORD *)(a2 + 40);
  v95 = (unsigned __int8 *)v12;
  v96 = (JSC::VM *)v11;
  if ((v12 & 0xFFFE000000000002) != 0)
  {
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2)
      return (JSC::JSGlobalObject *)JSC::throwTypeError(this, &v96);
LABEL_56:
    v12 = (unint64_t)JSC::JSValue::toStringSlowCase(&v95, (uint64_t)this, (JSC::Structure *)1, a4, a5, a6, a7, a8);
    goto LABEL_3;
  }
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 != 2)
  {
    v88 = v13 - 51;
    if ((v12 & 0xFFFFFFFFFFFFFFF7) == 2 || v88 < 5)
      return (JSC::JSGlobalObject *)JSC::throwTypeError(this, &v96);
    goto LABEL_56;
  }
LABEL_3:
  if (*(_DWORD *)(v11 + 80))
  {
    v76 = *(_DWORD *)(v11 + 80);
    if ((v76 & 0x27) != 0 && (v76 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v11 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v11 + 16))
      return 0;
  }
  v14 = *(int *)(v9 + 32);
  v15 = v14 - 1;
  if (v14 == 1)
  {
    v17 = 10;
    v93 = 10;
    v94 = 10;
    v16 = 10;
    goto LABEL_59;
  }
  v16 = *(_QWORD *)(v9 + 48);
  v94 = v16;
  if (v15 == 1)
  {
    v17 = 10;
    v93 = 10;
    if (v16 > 0xFFFDFFFFFFFFFFFFLL)
      goto LABEL_151;
LABEL_59:
    v43 = *(_QWORD *)(v12 + 8);
    if ((v43 & 1) != 0)
      v44 = (int *)(v12 + 16);
    else
      v44 = (int *)(v43 + 4);
    v45 = *v44;
    if ((*v44 & 0x80000000) == 0)
    {
      v46 = v16 - 0x2000000000000;
      if (v46 > 0xFFFBFFFFFFFFFFFFLL)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v94, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        v47 = *(double *)a9.i64;
      }
      else
      {
        v47 = *(double *)&v46;
      }
      goto LABEL_65;
    }
LABEL_138:
    __break(0xC471u);
    JUMPOUT(0x198BDF344);
  }
  v17 = *(_QWORD *)(v9 + 56);
  v93 = v17;
  if (v16 <= 0xFFFDFFFFFFFFFFFFLL)
    goto LABEL_59;
  if (v17 != 10)
  {
    if (v17 >= 0xFFFE000000000000)
    {
      v18 = 0;
      v19 = v17 & 0xFFFFFF00;
      goto LABEL_10;
    }
    v77 = *(_QWORD *)(v12 + 8);
    if ((v77 & 1) != 0)
      v78 = (int *)(v12 + 16);
    else
      v78 = (int *)(v77 + 4);
    v45 = *v78;
    if ((*v78 & 0x80000000) == 0)
    {
      v47 = (double)(int)v16;
LABEL_65:
      if (*(_DWORD *)(v11 + 80)
        && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
      {
        return 0;
      }
      if (v47 < 0.0)
      {
        v47 = 0.0;
      }
      else
      {
        *(double *)a9.i64 = (double)v45;
        if (v47 > (double)v45)
          v47 = (double)v45;
      }
      if (v17 == 10)
      {
        *(double *)a9.i64 = (double)v45;
      }
      else
      {
        if (v17 >= 0xFFFE000000000000)
        {
          *(double *)a9.i64 = (double)(int)v17;
        }
        else if (v17 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSObject **)&v93, this, (uint64_t)a3, a4, a5, a6, a7, a8, a9);
        }
        else
        {
          a9.i64[0] = v17 - 0x2000000000000;
        }
        if (*(_DWORD *)(v11 + 80))
        {
          v92 = a9.i64[0];
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v11, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
          a9.i64[0] = v92;
          if (hasExceptionsAfterHandlingTraps)
            return 0;
        }
        if (*(double *)a9.i64 < 0.0)
        {
          a9.i64[0] = 0;
        }
        else if (*(double *)a9.i64 > (double)v45)
        {
          *(double *)a9.i64 = (double)v45;
        }
      }
      if (v47 <= *(double *)a9.i64)
        v74 = v47;
      else
        v74 = *(double *)a9.i64;
      if (v47 > *(double *)a9.i64)
        *(double *)a9.i64 = v47;
      return JSC::jsSubstring(this, (JSC::JSGlobalObject *)v12, (JSC::JSString *)v74, *(double *)a9.i64 - v74, a5, a6, a7, a8, a9);
    }
    goto LABEL_138;
  }
LABEL_151:
  LOBYTE(v17) = 0;
  v19 = 0;
  v18 = 1;
LABEL_10:
  v20 = *(_QWORD *)(v12 + 8);
  v21 = (unsigned int *)(v12 + 16);
  if ((v20 & 1) == 0)
    v21 = (unsigned int *)(v20 + 4);
  v22 = *v21;
  if ((v22 & 0x80000000) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x198BDF29CLL);
  }
  v23 = v19 | v17;
  v24 = v16 & ~((int)v16 >> 31);
  if ((int)v22 < (int)v24)
    v24 = v22;
  v25 = v23 & ~(v23 >> 31);
  if (v22 < v25)
    v25 = v22;
  if (v24 > v25)
    v26 = v24;
  else
    v26 = v25;
  if (v24 <= v25)
    v25 = v24;
  v27 = (v18 & 1) == 0;
  if ((v18 & 1) != 0)
    v28 = v22;
  else
    v28 = v26;
  if (v27)
    v29 = v25;
  else
    v29 = v24;
  v30 = *((_QWORD *)this + 7);
  v31 = v28 - v29;
  if (v28 == v29)
    return *(JSC::JSGlobalObject **)(v30 + 41968);
  if (v29)
    v32 = 0;
  else
    v32 = v22 == v31;
  if (v32)
    return (JSC::JSGlobalObject *)v12;
  if ((v20 & 2) != 0)
  {
    v42 = *(_DWORD *)(v12 + 26);
    v12 = *(_QWORD *)(v12 + 20) & 0xFFFFFFFFFLL;
    v29 += v42;
  }
  else if ((v20 & 1) != 0)
  {
    JSC::JSRopeString::resolveRope(v12, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (*(_DWORD *)(v30 + 80))
    {
      if (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v30, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
        return 0;
    }
  }
  if (!v29)
  {
    v41 = *(_QWORD *)(v12 + 8);
    if (v41)
      LODWORD(v41) = *(_DWORD *)(v41 + 4);
    if ((_DWORD)v41 == v31)
      return (JSC::JSGlobalObject *)v12;
  }
  v33 = (unint64_t *)(v30 + 39696);
  if (v31 == 1)
  {
    v34 = *(WTF::StringImpl **)(v12 + 8);
    if (!v34 || *((_DWORD *)v34 + 1) <= v29)
    {
      v35 = 0;
      return *(JSC::JSGlobalObject **)(v30 + 8 * v35 + 42216);
    }
    v90 = WTF::StringImpl::at(v34, v29);
    if (v90 <= 0xFF)
    {
      v35 = v90;
      return *(JSC::JSGlobalObject **)(v30 + 8 * v35 + 42216);
    }
LABEL_43:
    v38 = (unint64_t *)(v30 + 39432);
    v39 = *(_QWORD *)(v12 + 8);
    if (v39)
    {
      if ((*(_BYTE *)(v39 + 16) & 4) != 0)
        v40 = 7;
      else
        v40 = 3;
    }
    else
    {
      v40 = 7;
    }
    SlowCase = *v38;
    if (*v38 >= *(_QWORD *)(v30 + 39440))
    {
      SlowCase = *(_QWORD *)(v30 + 39448);
      if ((SlowCase & 1) != 0)
      {
        JSC::sanitizeStackForVM((JSC *)v30, (JSC::VM *)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v33 = (unint64_t *)(v30 + 39696);
        SlowCase = JSC::LocalAllocator::allocateSlowCase(v30 + 39408, v30 + 192, 32, 0, 0, v82, v83, v84);
LABEL_49:
        *(_DWORD *)SlowCase = v33[227] >> 4;
        *(_DWORD *)(SlowCase + 4) = 17302016;
        *(_QWORD *)(SlowCase + 8) = v40;
        *(_DWORD *)(SlowCase + 16) = v31;
        *(_DWORD *)(SlowCase + 20) = v12;
        *(_WORD *)(SlowCase + 24) = WORD2(v12);
        *(_WORD *)(SlowCase + 26) = v29;
        *(_DWORD *)(SlowCase + 28) = HIWORD(v29);
        if (*(_BYTE *)(v30 + 755))
          __dmb(0xAu);
        return (JSC::JSGlobalObject *)SlowCase;
      }
      v79 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v30 + 39456);
      *(_QWORD *)(v30 + 39440) = SlowCase + HIDWORD(v79);
      *(_QWORD *)(v30 + 39448) = SlowCase + (int)v79;
    }
    *v38 = SlowCase + 32;
    goto LABEL_49;
  }
  if (v31 != 2)
    goto LABEL_43;
  v48 = *(WTF::StringImpl **)(v12 + 8);
  if (!v48)
  {
    v50 = 0;
    goto LABEL_82;
  }
  v49 = *((_DWORD *)v48 + 1);
  if (v49 > v29)
  {
    v50 = WTF::StringImpl::at(v48, v29);
    v48 = *(WTF::StringImpl **)(v12 + 8);
    if (!v48)
      goto LABEL_82;
    v49 = *((_DWORD *)v48 + 1);
  }
  else
  {
    v50 = 0;
  }
  a2 = v29 + 1;
  if (v49 > a2)
    LODWORD(v48) = WTF::StringImpl::at(v48, a2);
  else
    LODWORD(v48) = 0;
LABEL_82:
  if ((v48 | v50) > 0x7F)
    goto LABEL_43;
  v99[0] = v50;
  v99[1] = (_BYTE)v48;
  v97[0] = v99;
  v97[1] = 2;
  v51 = ((v50 - 1640531527) << 16) ^ ((_DWORD)v48 << 11) ^ (v50 - 1640531527);
  v52 = (v51 + (v51 >> 11)) ^ (8 * (v51 + (v51 >> 11)));
  v53 = (v52 + (v52 >> 5)) ^ (4 * (v52 + (v52 >> 5)));
  v54 = ((v53 + (v53 >> 15)) ^ ((v53 + (v53 >> 15)) << 10)) & 0xFFFFFF;
  if (v54)
    v55 = v54;
  else
    v55 = 0x800000;
  v98 = v55;
  v56 = v30 + 81168;
  v57 = v55 & 0x1FF;
  v58 = *(_QWORD *)(v30 + 81168 + 8 * v57);
  if (v58)
  {
    v59 = *(_QWORD *)(v58 + 8);
    v60 = (v59 & 1) != 0 ? 0 : (WTF::StringImpl *)v59;
    v61 = *((_DWORD *)v60 + 4);
    v62 = v61 < 0x100 ? WTF::StringImpl::hashSlowCase(v60) : v61 >> 8;
    if (v62 == v55 && WTF::equalInternal<unsigned char>((uint64_t)v60, (unint64_t)v99, 2))
      return *(JSC::JSGlobalObject **)(v56 + 8 * v57);
  }
  WTF::AtomStringImpl::add(v97, a4, a5, a6, a7, a8, &v100);
  v70 = v100;
  v71 = *(_DWORD *)(v100 + 16);
  v72 = v100;
  if ((v71 & 3) == 2)
  {
    v72 = v100;
    do
    {
      v72 = *(_QWORD *)(v72 + 24);
      v71 = *(_DWORD *)(v72 + 16);
    }
    while ((v71 & 3) == 2);
  }
  if ((v71 & 8) != 0)
  {
    v73 = 0;
  }
  else
  {
    *(_DWORD *)(v72 + 16) = v71 | 8;
    v73 = (unint64_t)*(unsigned int *)(v72 + 4) << ((v71 & 4) == 0);
  }
  SlowCase = *v33;
  if (*v33 >= *(_QWORD *)(v30 + 39704))
  {
    v91 = v70;
    SlowCase = *(_QWORD *)(v30 + 39712);
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM((JSC *)v30, v63, v64, v65, v66, v67, v68, v69);
      SlowCase = JSC::LocalAllocator::allocateSlowCase(v30 + 39672, v30 + 192, 16, 0, 0, v85, v86, v87);
      v33 = (unint64_t *)(v30 + 39696);
    }
    else
    {
      v33 = (unint64_t *)(v30 + 39696);
      v81 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v30 + 39720);
      *(_QWORD *)(v30 + 39704) = SlowCase + HIDWORD(v81);
      *(_QWORD *)(v30 + 39712) = SlowCase + (int)v81;
      *(_QWORD *)(v30 + 39696) = SlowCase + 16;
    }
    v70 = v91;
  }
  else
  {
    *v33 = SlowCase + 16;
  }
  *(_DWORD *)SlowCase = v33[227] >> 4;
  *(_DWORD *)(SlowCase + 4) = 17302016;
  *(_QWORD *)(SlowCase + 8) = v70;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  if (v73 >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase(v30 + 192, 0, SlowCase, v73, v66, v67, v68, v69);
  *(_QWORD *)(v56 + 8 * v57) = SlowCase;
  return (JSC::JSGlobalObject *)SlowCase;
}

uint64_t JSC::builtinStringIncludesInternal(JSC *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, double a11)
{
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  int *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  unint64_t v64;

  v13 = *((_QWORD *)this + 7);
  v14 = *((_QWORD *)a2 + 5);
  v64 = v14;
  if ((v14 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v14 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v64, this, a3, a4, a5, a6, a7, a8, (int **)&v63);
    goto LABEL_7;
  }
  v15 = *(WTF::StringImpl **)(v14 + 8);
  if ((v15 & 1) != 0)
  {
    v15 = (WTF::StringImpl *)*JSC::JSRopeString::resolveRope(v14, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
    if (!v15)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v15)
LABEL_5:
    *(_DWORD *)v15 += 2;
LABEL_6:
  v63 = v15;
LABEL_7:
  if (*(_DWORD *)(v13 + 80))
  {
    v57 = *(_DWORD *)(v13 + 80);
    if ((v57 & 0x27) != 0 && (v57 & 0x20) == 0)
      JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (*(_QWORD *)(v13 + 16))
    {
      v21 = 0;
      goto LABEL_28;
    }
  }
  v16 = *((_QWORD *)a2 + 6);
  v62 = v16;
  if ((v16 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v16 + 5) == 2)
  {
    v17 = *(int **)(v16 + 8);
    if ((v17 & 1) != 0)
    {
      v17 = *JSC::JSRopeString::resolveRope(v16, this, (uint64_t)a3, a4, a9, a5, a6, a7, a8);
      if (!v17)
        goto LABEL_13;
    }
    else if (!v17)
    {
LABEL_13:
      v61 = (WTF::StringImpl *)v17;
      goto LABEL_14;
    }
    *v17 += 2;
    goto LABEL_13;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v62, this, a3, a4, a5, a6, a7, a8, (int **)&v61);
  if (!*(_DWORD *)(v13 + 80))
    goto LABEL_15;
LABEL_14:
  v58 = *(_DWORD *)(v13 + 80);
  if ((v58 & 0x27) != 0 && (v58 & 0x20) == 0)
    JSC::VMTraps::handleTraps((JSC::VMTraps *)(v13 + 64), 7u, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (*(_QWORD *)(v13 + 16))
  {
    v21 = 0;
  }
  else
  {
LABEL_15:
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v18 = 10;
    else
      v18 = *((_QWORD *)a2 + 7);
    v19 = v63;
    if (v63)
      *(_DWORD *)v63 += 2;
    v60 = v19;
    v20 = v61;
    if (v61)
    {
      *(_DWORD *)v61 += 2;
      v59 = v20;
      v21 = JSC::stringIncludesImpl(this, v13, (uint64_t)&v60, (uint64_t *)&v59, v18, a6, a7, a8, a9, a10, a11);
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::~StringImpl(v20, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v41, v42, v43, v44, v45, v46, v47, v48);
      }
      else
      {
        *(_DWORD *)v20 -= 2;
      }
    }
    else
    {
      v59 = 0;
      v21 = JSC::stringIncludesImpl(this, v13, (uint64_t)&v60, (uint64_t *)&v59, v18, a6, a7, a8, a9, a10, a11);
    }
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::~StringImpl(v19, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        WTF::fastFree(v49, v50, v51, v52, v53, v54, v55, v56);
      }
      else
      {
        *(_DWORD *)v19 -= 2;
      }
    }
  }
  v22 = v61;
  v61 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::~StringImpl(v22, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    else
    {
      *(_DWORD *)v22 -= 2;
    }
  }
LABEL_28:
  v23 = v63;
  v63 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
    {
      WTF::StringImpl::~StringImpl(v23, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v25, v26, v27, v28, v29, v30, v31, v32);
    }
    else
    {
      *(_DWORD *)v23 -= 2;
    }
  }
  return v21;
}

uint64_t JSC::stringIncludesImpl(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, double a10, double a11)
{
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  StringView v24;
  unsigned int v26;
  uint64_t v27;
  int v28;
  char v29;
  JSC::JSObject *v30;

  v14 = (uint64_t)a1;
  v30 = (JSC::JSObject *)a5;
  if (*(_QWORD *)a3)
    v15 = *(unsigned int *)(*(_QWORD *)a3 + 4);
  else
    v15 = 0;
  if (a5 >= 0xFFFE000000000000)
  {
    v26 = a5 & ~((int)a5 >> 31);
    if (v15 >= v26)
      v15 = v26;
    else
      v15 = v15;
  }
  else
  {
    if (a5 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase(&v30, a1, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
    else
      *(_QWORD *)&v16 = a5 - 0x2000000000000;
    a10 = 0.0;
    a11 = v16 + 0.0;
    *(double *)a9.i64 = trunc(v16 + 0.0);
    if (*(double *)a9.i64 < 0.0)
    {
      v15 = 0;
    }
    else
    {
      a10 = (double)v15;
      if (*(double *)a9.i64 <= (double)v15)
        v15 = *(double *)a9.i64;
    }
    if (*(_DWORD *)(a2 + 80)
      && JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)a2, v14, a3, (uint64_t)a4, a5, a6, a7, a8))
    {
      return 0;
    }
  }
  v27 = 0;
  v17 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v18 = *(unsigned __int8 *)(v17 + 16);
    v19 = *(_QWORD *)(v17 + 8);
    LODWORD(v17) = *(_DWORD *)(v17 + 4);
    v27 = v19;
    v20 = (v18 >> 2) & 1;
  }
  else
  {
    LOBYTE(v20) = 1;
  }
  v28 = v17;
  v29 = v20;
  v21 = *(_QWORD *)(a2 + 93360);
  if ((v21 & 1) != 0)
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 & 0xFFFFFFFFFFFFFFFCLL))(a2, a2 + 93360);
  v22 = *a4;
  if (*a4)
  {
    v23 = *(_QWORD *)(v22 + 8);
    LODWORD(v24.m_characters) = *(_DWORD *)(v22 + 4);
    HIDWORD(v24.m_characters) = (*(_DWORD *)(v22 + 16) >> 2) & 1;
  }
  else
  {
    v23 = 0;
    v24.m_characters = (void *)0x100000000;
  }
  *(_QWORD *)&v24.m_length = v15;
  if (WTF::StringView::find((uint64_t)&v27, v21, v23, v24, *(double *)a9.i64, a10, *(float *)&a11) == -1)
    return 6;
  else
    return 7;
}

uint64_t JSC::StringRecursionChecker::throwStackOverflowError(JSC::StringRecursionChecker *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  JSC::VM *v10;

  v8 = *(_QWORD *)this;
  v10 = *(JSC::VM **)(v8 + 56);
  return JSC::throwStackOverflowError(v8, &v10, a3, a4, a5, a6, a7, a8);
}

uint64_t JSC::StringRecursionChecker::emptyString(JSC::StringRecursionChecker *this)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 56) + 41968);
}

JSC::JSGlobalObject *JSC::stringFromCharCode(JSC::JSGlobalObject *this, JSC::JSGlobalObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9)
{
  JSC::JSGlobalObject *v10;
  JSC::VM *v11;
  int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int *v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int *v42;
  BOOL hasExceptionsAfterHandlingTraps;
  int8x16_t *v44;
  int8x16_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  int8x16_t v50;
  int8x16_t v51;
  char *v52;
  char *v53;
  char *v54;
  __int16 v55;
  WTF::StringImpl *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  char *v92;
  WTF::StringImpl *v93;
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;

  v10 = this;
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  v12 = *((_DWORD *)a2 + 8);
  v13 = v12 - 1;
  if (v12 == 2)
  {
    v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
    v93 = v14;
    if ((unint64_t)v14 < 0xFFFE000000000000)
    {
      v27 = (unint64_t)v14 - 0x2000000000000;
      if (v27 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase(&v93, this, a3, a4, a5, a6, a7, a8, a9);
        v27 = v31;
      }
      v28 = (v27 >> 52) & 0x7FF;
      if ((v28 - 1023) >= 0x54)
      {
        LOBYTE(v15) = 0;
        return (JSC::JSGlobalObject *)*((_QWORD *)v11 + v15 + 5277);
      }
      v29 = v27 >> (51 - (v27 >> 52));
      if (v28 > 0x433)
        LODWORD(v29) = v27 << ((v27 >> 52) - 51);
      if (v28 >= 0x41F)
        v30 = v29;
      else
        v30 = (((1 << ((v27 >> 52) + 1)) - 1) & v29) + (1 << ((v27 >> 52) + 1));
      if ((v27 & 0x8000000000000000) == 0)
        LOWORD(v14) = v30;
      else
        LODWORD(v14) = -v30;
    }
    v15 = (__int16)v14;
    if ((unsigned __int16)v14 <= 0xFFu)
      return (JSC::JSGlobalObject *)*((_QWORD *)v11 + v15 + 5277);
    v17 = WTF::fastCompactMalloc((WTF *)0x16);
    *(_QWORD *)v17 = 0x100000002;
    *(_WORD *)(v17 + 20) = v15;
    *(_QWORD *)(v17 + 8) = v17 + 20;
    *(_DWORD *)(v17 + 16) = 0;
    v93 = (WTF::StringImpl *)v17;
    v24 = JSC::JSString::create((uint64_t)v11, (JSC::VM *)&v93, v18, v19, v20, v21, v22, v23);
    goto LABEL_7;
  }
  v32 = (v12 - 1);
  if (v12 == 1)
  {
    v34 = 0;
    v33 = &WTF::StringImpl::s_emptyAtomString;
    WTF::StringImpl::s_emptyAtomString += 2;
    goto LABEL_25;
  }
  if (!(v32 >> 31))
  {
    v33 = (int *)WTF::fastCompactMalloc((WTF *)(v32 + 20));
    v34 = v33 + 5;
    *v33 = 2;
    v33[1] = v13;
    *((_QWORD *)v33 + 1) = v33 + 5;
    v33[4] = 4;
LABEL_25:
    if (v12 != 1)
    {
      v35 = 0;
      v36 = 0x700000000;
      a3 = 1;
      while (1)
      {
        v37 = *(WTF::StringImpl **)((char *)a2 + (((v35 << 32) + 0x600000000) >> 29));
        v93 = v37;
        if ((unint64_t)v37 < 0xFFFE000000000000)
        {
          v38 = (unint64_t)v37 - 0x2000000000000;
          if ((unint64_t)v37 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            v89 = (WTF::StringImpl *)v33;
            v42 = v34;
            JSC::JSValue::toNumberSlowCase(&v93, v10, 1, a4, a5, a6, a7, a8, a9);
            a3 = 1;
            v34 = v42;
            v33 = (int *)v89;
            v38 = a9.i64[0];
          }
          v39 = (v38 >> 52) & 0x7FF;
          if ((v39 - 1023) <= 0x53)
          {
            v40 = v38 >> (51 - (v38 >> 52));
            if (v39 > 0x433)
              LODWORD(v40) = v38 << ((v38 >> 52) - 51);
            if (v39 >= 0x41F)
              v41 = v40;
            else
              v41 = (((1 << ((v38 >> 52) + 1)) - 1) & v40) + (1 << ((v38 >> 52) + 1));
            if ((v38 & 0x8000000000000000) == 0)
              LOWORD(v37) = v41;
            else
              LODWORD(v37) = -v41;
          }
          else
          {
            LOWORD(v37) = 0;
          }
        }
        if (*((_DWORD *)v11 + 20))
        {
          v88 = v34;
          v90 = (WTF::StringImpl *)v33;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v11, 1075, 1, a4, a5, a6, a7, a8);
          a3 = 1;
          v25 = 1075;
          v34 = v88;
          v33 = (int *)v90;
          if (hasExceptionsAfterHandlingTraps)
          {
            v16 = 0;
            goto LABEL_77;
          }
        }
        if ((unsigned __int16)v37 >= 0x100u)
          break;
        *((_BYTE *)v34 + v35++) = (_BYTE)v37;
        v36 += 0x100000000;
        if (v35 == v32)
          goto LABEL_44;
      }
      v44 = (int8x16_t *)v34;
      v90 = (WTF::StringImpl *)v33;
      v92 = 0;
      WTF::StringImpl::createUninitialized((v12 - 1), &v92, (unint64_t *)&v91);
      v46 = v92;
      v47 = &v92[2 * v35];
      if (v35 >= 0x40)
      {
        v48 = &v92[2 * (v35 & 0xFFFFFFC0)];
        v49 = 0uLL;
        do
        {
          v94.val[0] = *v44;
          v50 = v44[1];
          v95.val[0] = v44[2];
          v51 = v44[3];
          v44 += 4;
          v45 = v51;
          v95.val[1] = 0uLL;
          v96.val[0] = v50;
          v94.val[1] = 0uLL;
          v52 = v46;
          vst2q_s8(v52, v94);
          v52 += 32;
          v96.val[1] = 0uLL;
          vst2q_s8(v52, v96);
          v53 = v46 + 64;
          vst2q_s8(v53, v95);
          v54 = v46 + 96;
          vst2q_s8(v54, *(int8x16x2_t *)v45.i8);
          v46 += 128;
        }
        while (v46 != v48);
        v46 = v48;
      }
      while (v47 != v46)
      {
        v55 = v44->u8[0];
        v44 = (int8x16_t *)((char *)v44 + 1);
        *(_WORD *)v46 = v55;
        v46 += 2;
      }
      *(_WORD *)&v92[2 * v35] = (_WORD)v37;
      if ((int)v35 + 1 >= v13)
      {
LABEL_73:
        v61 = v91;
        v91 = 0;
        v93 = v61;
        v16 = JSC::jsString((uint64_t)v11, (JSC::VM *)&v93, a3, a4, a5, a6, a7, a8);
        v62 = v93;
        v93 = 0;
        if (v62)
        {
          if (*(_DWORD *)v62 == 2)
          {
            WTF::StringImpl::~StringImpl(v62, (WTF::AtomStringImpl *)v25, a3, a4, a5, a6, a7, a8);
            WTF::fastFree(v72, v73, v74, v75, v76, v77, v78, v79);
          }
          else
          {
            *(_DWORD *)v62 -= 2;
          }
        }
      }
      else
      {
        while (1)
        {
          v56 = *(WTF::StringImpl **)((char *)a2 + (v36 >> 29));
          v93 = v56;
          if ((unint64_t)v56 < 0xFFFE000000000000)
          {
            v57 = (unint64_t)v56 - 0x2000000000000;
            if (v57 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase(&v93, v10, a3, a4, a5, a6, a7, a8, v45);
              v57 = v45.i64[0];
            }
            v58 = (v57 >> 52) & 0x7FF;
            if ((v58 - 1023) <= 0x53)
            {
              v59 = v57 >> (51 - (v57 >> 52));
              if (v58 > 0x433)
                LODWORD(v59) = v57 << ((v57 >> 52) - 51);
              if (v58 >= 0x41F)
                v60 = v59;
              else
                v60 = (((1 << ((v57 >> 52) + 1)) - 1) & v59) + (1 << ((v57 >> 52) + 1));
              if ((v57 & 0x8000000000000000) == 0)
                LOWORD(v56) = v60;
              else
                LODWORD(v56) = -v60;
            }
            else
            {
              LOWORD(v56) = 0;
            }
          }
          *(_WORD *)&v92[2 * v35 + 2] = (_WORD)v56;
          if (*((_DWORD *)v11 + 20))
          {
            if (JSC::VM::hasExceptionsAfterHandlingTraps(v11, v25, a3, a4, a5, a6, a7, a8))
              break;
          }
          v36 += 0x100000000;
          if (v12 - 2 == (_DWORD)++v35)
            goto LABEL_73;
        }
        v16 = 0;
      }
      v63 = v91;
      v91 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
        {
          WTF::StringImpl::~StringImpl(v63, (WTF::AtomStringImpl *)v25, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v80, v81, v82, v83, v84, v85, v86, v87);
        }
        else
        {
          *(_DWORD *)v63 -= 2;
        }
      }
LABEL_77:
      if (*(_DWORD *)v90 != 2)
      {
        *(_DWORD *)v90 -= 2;
        return (JSC::JSGlobalObject *)v16;
      }
      v26 = v90;
      goto LABEL_80;
    }
LABEL_44:
    v93 = (WTF::StringImpl *)v33;
    v24 = JSC::jsString((uint64_t)v11, (JSC::VM *)&v93, a3, a4, a5, a6, a7, a8);
LABEL_7:
    v16 = v24;
    v26 = v93;
    v93 = 0;
    if (!v26)
      return (JSC::JSGlobalObject *)v16;
    if (*(_DWORD *)v26 != 2)
    {
      *(_DWORD *)v26 -= 2;
      return (JSC::JSGlobalObject *)v16;
    }
LABEL_80:
    WTF::StringImpl::~StringImpl(v26, (WTF::AtomStringImpl *)v25, a3, a4, a5, a6, a7, a8);
    WTF::fastFree(v64, v65, v66, v67, v68, v69, v70, v71);
    return (JSC::JSGlobalObject *)v16;
  }
  __break(0xC471u);
  return this;
}

uint64_t JSC::stringFromCodePoint(unint64_t this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF::AtomStringImpl *v11;
  WTF::AtomStringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  JSC::JSObject *v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  __int16 v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  JSC::JSObject *v46;
  uint64_t v47;
  unint64_t v48;
  JSC::Heap **v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  JSC::Exception *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(JSC::JSObject **);
  JSC::JSObject **v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  unsigned int v92;
  char v93;
  JSC::JSObject *v94[3];

  v10 = *(_QWORD *)(this + 56);
  v11 = (WTF::AtomStringImpl *)(*((_DWORD *)a2 + 8) - 1);
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v93 = 1;
  WTF::StringBuilder::reserveCapacity((WTF::StringBuilder *)&v90, v11, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!(_DWORD)v11)
  {
LABEL_50:
    WTF::StringBuilder::toString((WTF::StringBuilder *)&v90, v13, v14, v15, v16, v17, v18, v94);
    v85 = JSC::jsString(v10, (JSC::VM *)v94, v40, v41, v42, v43, v44, v45);
    v46 = v94[0];
    v94[0] = 0;
    if (v46)
      goto LABEL_56;
    goto LABEL_58;
  }
  v20 = 0x600000000;
  while (1)
  {
    v21 = *(JSC::JSObject **)((char *)a2 + (v20 >> 29));
    v94[0] = v21;
    if ((unint64_t)v21 >= 0xFFFE000000000000)
    {
      *(double *)v19.i64 = (double)(int)v21;
    }
    else
    {
      v22 = (unint64_t)v21 - 0x2000000000000;
      if (v22 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase(v94, (JSC::JSGlobalObject *)this, v13, v14, v15, v16, v17, v18, v19);
      else
        v19.i64[0] = v22;
    }
    if (*(_DWORD *)(v10 + 80))
    {
      v39 = *(_DWORD *)(v10 + 80);
      if ((v39 & 0x27) != 0 && (v39 & 0x20) == 0)
      {
        v88 = v19.i64[0];
        JSC::VMTraps::handleTraps((JSC::VMTraps *)(v10 + 64), 7u, v13, v14, v15, v16, v17, v18);
        v19.i64[0] = v88;
      }
      if (*(_QWORD *)(v10 + 16))
      {
        v85 = 0;
        goto LABEL_58;
      }
    }
    v23 = *(double *)v19.i64;
    v24 = *(double *)v19.i64 >> 16;
    if (v24 > 0x10 || *(double *)v19.i64 != (double)*(double *)v19.i64)
      break;
    if (v24)
    {
      LOWORD(v94[0]) = (v23 >> 10) - 10304;
      v29 = v91;
      if (v91
        && ((v30 = v92, v31 = *((unsigned int *)v91 + 1), v92 < v31) ? (v32 = v90 == 0) : (v32 = 0),
            v32 && (*((_BYTE *)v91 + 16) & 4) == 0))
      {
        v33 = *((_QWORD *)v91 + 1);
        v34 = ++v92;
        *(_WORD *)(v33 + 2 * v30) = (v23 >> 10) - 10304;
        v35 = v23 & 0x3FF | 0xDC00;
        LOWORD(v94[0]) = v35;
      }
      else
      {
        WTF::StringBuilder::append((uint64_t)&v90, v94, 1uLL, v14, v15, v16, v17, v18);
        v29 = v91;
        v35 = v23 & 0x3FF | 0xDC00;
        LOWORD(v94[0]) = v35;
        if (!v91)
          goto LABEL_41;
        v34 = v92;
        v31 = *((unsigned int *)v91 + 1);
      }
      v36 = v34 < v31 && v90 == 0;
      if (!v36 || (*((_BYTE *)v29 + 16) & 4) != 0)
      {
LABEL_41:
        WTF::StringBuilder::append((uint64_t)&v90, v94, 1uLL, v14, v15, v16, v17, v18);
        goto LABEL_42;
      }
      v37 = *((_QWORD *)v29 + 1);
      v92 = v34 + 1;
      *(_WORD *)(v37 + 2 * v34) = v35;
    }
    else
    {
      LOWORD(v94[0]) = *(double *)v19.i64;
      if (!v91)
        goto LABEL_41;
      v26 = v92;
      if (v92 >= *((_DWORD *)v91 + 1) || v90 != 0)
        goto LABEL_41;
      if ((*((_BYTE *)v91 + 16) & 4) != 0)
      {
        if ((unsigned __int16)*(double *)v19.i64 > 0xFFu)
          goto LABEL_41;
        v38 = *((_QWORD *)v91 + 1);
        ++v92;
        *(_BYTE *)(v38 + v26) = v23;
      }
      else
      {
        v28 = *((_QWORD *)v91 + 1);
        ++v92;
        *(_WORD *)(v28 + 2 * v26) = v23;
      }
    }
LABEL_42:
    v20 += 0x100000000;
    v11 = (WTF::AtomStringImpl *)((char *)v11 - 1);
    if (!v11)
      goto LABEL_50;
  }
  v47 = WTF::fastCompactMalloc((WTF *)0x20);
  *(_QWORD *)v47 = 0x3D00000002;
  *(_QWORD *)(v47 + 8) = "Arguments contain a value that is out of range of code points";
  *(_DWORD *)(v47 + 16) = 4;
  v89 = (WTF::StringImpl *)v47;
  v48 = *(_QWORD *)(this + 128);
  v49 = *(JSC::Heap ***)(this + 56);
  if ((v48 & 1) != 0)
  {
    v86 = *(uint64_t (**)(JSC::JSObject **))(v48 & 0xFFFFFFFFFFFFFFFCLL);
    if ((this & 8) != 0)
      v87 = (JSC::JSObject **)(this - 16);
    else
      v87 = (JSC::JSObject **)(this & 0xFFFFFFFFFFFFC000 | 8);
    v94[0] = *v87;
    v94[1] = (JSC::JSObject *)this;
    v94[2] = (JSC::JSObject *)(this + 128);
    v48 = v86(v94);
  }
  v50 = JSC::ErrorInstance::create(v49, v48, &v89, 0, 0, 0, 2, 1);
  v57 = (JSC::Exception *)v50;
  if ((v50 & 0xFFFE000000000002) != 0
    || &JSC::Exception::s_info != (char **)(16 * *(unsigned int *)(16 * (*(_DWORD *)v50 & 0xFFFFFFFE) + 0x4C)))
  {
    v57 = (JSC::Exception *)JSC::Exception::create(v10, (JSC::VM *)v50, 0, v51, v52, v53, v54, v55);
  }
  v85 = (uint64_t)JSC::VM::throwException((JSC::VM *)v10, (JSC::JSGlobalObject *)this, v57, v56, v51, v52, v53, v54, v55);
  v46 = v89;
  v89 = 0;
  if (v46)
  {
LABEL_56:
    if (*(_DWORD *)v46 == 2)
    {
      WTF::StringImpl::~StringImpl(v46, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v77, v78, v79, v80, v81, v82, v83, v84);
    }
    else
    {
      *(_DWORD *)v46 -= 2;
    }
  }
LABEL_58:
  v58 = v91;
  v91 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
    {
      WTF::StringImpl::~StringImpl(v58, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v61, v62, v63, v64, v65, v66, v67, v68);
    }
    else
    {
      *(_DWORD *)v58 -= 2;
    }
  }
  v59 = v90;
  v90 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
    {
      WTF::StringImpl::~StringImpl(v59, v12, v13, v14, v15, v16, v17, v18);
      WTF::fastFree(v69, v70, v71, v72, v73, v74, v75, v76);
    }
    else
    {
      *(_DWORD *)v59 -= 2;
    }
  }
  return v85;
}

unint64_t JSC::allocateCell<JSC::StringObject>(_QWORD *a1, JSC::VM *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  unint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = a1 + 4973;
  result = a1[4973];
  if (result >= v9[1])
  {
    result = v9[2];
    if ((result & 1) != 0)
    {
      v12 = (uint64_t)(a1 + 4970);
      v13 = (uint64_t)(a1 + 24);
      JSC::sanitizeStackForVM((JSC *)a1, a2, a3, a4, a5, a6, a7, a8);
      result = JSC::LocalAllocator::allocateSlowCase(v12, v13, 32, 0, 0, v14, v15, v16);
      goto LABEL_3;
    }
    v11 = *(_QWORD *)(result + 8) ^ v9[3];
    v9[1] = result + HIDWORD(v11);
    v9[2] = result + (int)v11;
  }
  *v9 = result + 32;
LABEL_3:
  *(_DWORD *)result = 0;
  return result;
}

uint64_t WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return 1;
  v8 = a2;
  v10 = *(_QWORD *)a1;
  v11 = *(unsigned int *)(a1 + 12);
  if (a2 < 0x11)
  {
    v12 = (_QWORD *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 16;
  }
  else
  {
    if (a2 >> 29)
      return 0;
    WTF::tryFastMalloc((WTF *)(8 * a2), &v17);
    v12 = v17;
    if (!v17)
      return 0;
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)a1 = v12;
  }
  if ((_DWORD)v11)
  {
    v13 = 8 * v11;
    v14 = (uint64_t *)v10;
    do
    {
      v15 = *v14++;
      *v12++ = v15;
      v13 -= 8;
    }
    while (v13);
  }
  result = 1;
  if (a1 + 16 != v10 && v10)
  {
    if (*(_QWORD *)a1 == v10)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    WTF::fastFree(v10, (void *)a2, a3, a4, a5, a6, a7, a8);
    return 1;
  }
  return result;
}

uint64_t WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)1,unsigned long &,unsigned int &>(uint64_t a1, int *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int *v23;
  int v24;
  int v25;
  _QWORD *v27;

  v11 = *(unsigned int *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 12);
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  v16 = *(_QWORD *)a1;
  if (v15 > v11)
  {
    if (v15 < 0x11)
    {
      v17 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v15 >> 29)
        return 0;
      WTF::tryFastMalloc((WTF *)(8 * v15), &v27);
      v17 = v27;
      if (!v27)
        return 0;
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    if ((_DWORD)v12)
    {
      v18 = 8 * v12;
      v19 = (uint64_t *)v16;
      do
      {
        v20 = *v19++;
        *v17++ = v20;
        v18 -= 8;
      }
      while (v18);
      v17 = *(_QWORD **)a1;
    }
    if (a1 + 16 != v16 && v16)
    {
      if (v17 == (_QWORD *)v16)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v16 = *(_QWORD *)a1;
    }
    else
    {
      v16 = (unint64_t)v17;
    }
  }
  v21 = *(unsigned int *)(a1 + 12);
  v22 = v21 + 1;
  v23 = (int *)(v16 + 8 * v21);
  v24 = *a2;
  v25 = *a3;
  *v23 = *a2;
  v23[1] = v25;
  if (v25 == v24)
    *(_QWORD *)v23 = 0;
  *(_DWORD *)(a1 + 12) = v22;
  return 1;
}

uint64_t WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v10;
  WTF::StringImpl **v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v9)
  {
    v13 = *(WTF::StringImpl ***)a1;
    v14 = 8 * v9;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
        {
          WTF::StringImpl::~StringImpl(v15, a2, a3, a4, a5, a6, a7, a8);
          WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
        }
        else
        {
          *(_DWORD *)v15 -= 2;
        }
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v10 = *(_QWORD *)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v10 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v10, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

JSC::RegExp **JSC::StringReplaceCache::get(JSC::RegExp **this, const WTF::String *a2, JSC::RegExp *a3)
{
  unsigned int v4;
  unsigned int v7;
  JSC::RegExp **result;
  unsigned int v10;

  if (!a2)
    return 0;
  v4 = *((_DWORD *)a2 + 4);
  if ((v4 & 0x10) == 0)
    return 0;
  if (v4 < 0x100)
    LOBYTE(v7) = WTF::StringImpl::hashSlowCase(a2);
  else
    v7 = v4 >> 8;
  result = &this[7 * (v7 & 0x3F)];
  if (*result != a2 || result[1] != a3)
  {
    v10 = ((_BYTE)v7 + 1) & 0x3F;
    result = &this[7 * v10];
    if (*result != a2 || this[7 * v10 + 1] != a3)
      return 0;
  }
  return result;
}

void JSC::StringReplaceCache::set(uint64_t a1, WTF::StringImpl *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const void **a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[7];

  if (this)
  {
    v9 = *((_DWORD *)this + 4);
    if ((v9 & 0x10) != 0)
    {
      if (v9 < 0x100)
        v16 = WTF::StringImpl::hashSlowCase(this);
      else
        v16 = v9 >> 8;
      v17 = v16 & 0x3F;
      v18 = (_QWORD *)(a1 + 56 * (v16 & 0x3F));
      if (*v18)
      {
        v21 = (v16 + 1) & 0x3F;
        v22 = (WTF::StringImpl **)(a1 + 56 * v21);
        if (!*v22)
        {
          WTF::RefPtr<WTF::AtomStringImpl,WTF::RawPtrTraits<WTF::AtomStringImpl>,WTF::DefaultRefDerefTraits<WTF::AtomStringImpl>>::operator=(v22, this, a3, a4, a5, a6, (uint64_t)a7, a8);
          v36 = a1 + 56 * v21;
          *(_QWORD *)(v36 + 8) = a3;
          WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(v36 + 40), a7, v37, v38, v39, v40, v41, v42);
          v17 = v21;
          goto LABEL_8;
        }
        memset(v43, 0, 24);
        v43[3] = -1;
        memset(&v43[4], 0, 24);
        JSC::StringReplaceCache::Entry::operator=((uint64_t)v22, v43, a3, a4, a5, a6, (uint64_t)a7, a8);
        JSC::StringReplaceCache::Entry::~Entry((JSC::StringReplaceCache::Entry *)v43, v23, v24, v25, v26, v27, v28, v29);
        WTF::RefPtr<WTF::AtomStringImpl,WTF::RawPtrTraits<WTF::AtomStringImpl>,WTF::DefaultRefDerefTraits<WTF::AtomStringImpl>>::operator=((WTF::StringImpl **)(a1 + 56 * v17), this, v30, v31, v32, v33, v34, v35);
      }
      else
      {
        *(_DWORD *)this += 2;
        *v18 = this;
      }
      v19 = a1 + 56 * v17;
      *(_QWORD *)(v19 + 8) = a3;
      WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((const void **)(v19 + 40), a7, a3, a4, a5, a6, (uint64_t)a7, a8);
LABEL_8:
      v20 = (_QWORD *)(a1 + 56 * v17);
      v20[3] = a5;
      v20[4] = a6;
      v20[2] = a4;
    }
  }
}

uint64_t WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 30))
  {
    v5 = (void *)WTF::fastMalloc((WTF *)(4 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    memcpy(v5, *(const void **)a2, 4 * *(unsigned int *)(a2 + 12));
    return v2;
  }
  __break(0xC471u);
  return result;
}

void JSC::RegExpGlobalData::resetResultFromCache(uint64_t a1, JSC::JSCell *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = *(_QWORD *)(a1 + 80);
  if (v15)
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    WTF::fastFree(v15, a2, a3, a4, a5, a6, a7, a8);
  }
  v16 = *(_QWORD *)a7;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a1 + 80) = v16;
  LODWORD(v16) = *(_DWORD *)(a7 + 8);
  *(_DWORD *)(a7 + 8) = 0;
  *(_DWORD *)(a1 + 88) = v16;
  LODWORD(v16) = *(_DWORD *)(a7 + 12);
  *(_DWORD *)(a7 + 12) = 0;
  *(_DWORD *)(a1 + 92) = v16;
  v17 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)a1 = a5;
  *(_QWORD *)(a1 + 8) = a6;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(_DWORD *)(v17 + 760) >= *((unsigned __int8 *)a2 + 7))
    JSC::Heap::writeBarrierSlowPath(v17 + 192, (unint64_t)a2);
}

WTF::StringImpl **WTF::RefPtr<WTF::AtomStringImpl,WTF::RawPtrTraits<WTF::AtomStringImpl>,WTF::DefaultRefDerefTraits<WTF::AtomStringImpl>>::operator=(WTF::StringImpl **a1, WTF::AtomStringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v9;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_DWORD *)a2 += 2;
  v9 = *a1;
  *a1 = a2;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::~StringImpl(v9, a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v9 -= 2;
    }
  }
  return a1;
}

uint64_t JSC::StringReplaceCache::Entry::operator=(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  WTF::StringImpl *v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = *a2;
  *a2 = 0;
  v11 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::~StringImpl(v11, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v16, v17, v18, v19, v20, v21, v22, v23);
    }
    else
    {
      *(_DWORD *)v11 -= 2;
    }
  }
  v12 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 8) = v12;
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    WTF::fastFree(v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v14 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 40) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = 0;
  *(_DWORD *)(a1 + 48) = v14;
  LODWORD(v14) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = 0;
  *(_DWORD *)(a1 + 52) = v14;
  return a1;
}

void JSC::StringReplaceCache::Entry::~Entry(JSC::StringReplaceCache::Entry *this, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *((_QWORD *)this + 5);
  if (v9)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  v10 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::~StringImpl(v10, (WTF::AtomStringImpl *)a2, a3, a4, a5, a6, a7, a8);
      WTF::fastFree(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    else
    {
      *(_DWORD *)v10 -= 2;
    }
  }
}

uint64_t WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)1>(uint64_t a1, unint64_t a2)
{
  int v2;
  const void *v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__dst;

  if (*(unsigned int *)(a1 + 8) >= a2)
    return 1;
  v2 = a2;
  v4 = *(const void **)a1;
  v5 = *(unsigned int *)(a1 + 12);
  if (a2 < 0x11)
  {
    result = a1 + 16;
    *(_QWORD *)a1 = a1 + 16;
    *(_DWORD *)(a1 + 8) = 16;
LABEL_6:
    memcpy((void *)result, v4, 8 * v5);
    if ((const void *)(a1 + 16) != v4 && v4 != 0)
    {
      if (*(const void **)a1 == v4)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
    }
    return 1;
  }
  if (a2 >> 29)
    return 0;
  WTF::tryFastMalloc((WTF *)(8 * a2), &__dst);
  result = (uint64_t)__dst;
  if (__dst)
  {
    *(_DWORD *)(a1 + 8) = v2;
    *(_QWORD *)a1 = result;
    goto LABEL_6;
  }
  return result;
}

void WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
    WTF::Vector<WTF::String,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  if (*(_QWORD *)a1)
    bzero((void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), 8 * a2 - 8 * *(unsigned int *)(a1 + 12));
  *(_DWORD *)(a1 + 12) = a2;
}

void WTF::Vector<WTF::Range<int>,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::constructAndAppendSlowCase<(WTF::FailureAction)0,unsigned long &,int &>(uint64_t a1, int *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  int v24;

  v11 = *(unsigned int *)(a1 + 8);
  v12 = *(unsigned int *)(a1 + 12);
  v13 = v11 + (v11 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= v12 + 1)
    v15 = v12 + 1;
  else
    v15 = v14;
  v16 = *(_QWORD *)a1;
  if (v15 > v11)
  {
    if (v15 < 0x11)
    {
      v17 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 16;
    }
    else
    {
      if (v15 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x198BE0C44);
      }
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
    }
    if ((_DWORD)v12)
    {
      v18 = 8 * v12;
      v19 = (uint64_t *)v16;
      do
      {
        v20 = *v19++;
        *v17++ = v20;
        v18 -= 8;
      }
      while (v18);
      v17 = *(_QWORD **)a1;
    }
    if (a1 + 16 != v16 && v16)
    {
      if (v17 == (_QWORD *)v16)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v16, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
      v16 = *(_QWORD *)a1;
    }
    else
    {
      v16 = (unint64_t)v17;
    }
  }
  v21 = *(unsigned int *)(a1 + 12);
  v22 = (int *)(v16 + 8 * v21);
  v23 = *a2;
  v24 = *a3;
  *v22 = *a2;
  v22[1] = v24;
  if (v24 == v23)
    *(_QWORD *)v22 = 0;
  *(_DWORD *)(a1 + 12) = v21 + 1;
}

uint64_t JSC::codePointAt(uint64_t this, const WTF::String *a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  unsigned int v8;

  if (a2 >= a3)
  {
    this = 1036;
    __break(0xC471u);
    goto LABEL_15;
  }
  if (!this)
    goto LABEL_15;
  if ((*(_BYTE *)(this + 16) & 4) != 0)
  {
    if (*(_DWORD *)(this + 4) > a2)
      return *(unsigned __int8 *)(*(_QWORD *)(this + 8) + a2);
    goto LABEL_15;
  }
  v3 = *(_DWORD *)(this + 4);
  if (v3 <= a2)
  {
LABEL_15:
    __break(1u);
    return this;
  }
  v4 = *(_QWORD *)(this + 8);
  v5 = (_DWORD)a2 + 1;
  this = *(unsigned __int16 *)(v4 + 2 * a2);
  if ((_DWORD)a2 + 1 != a3 && (this & 0xFC00) == 0xD800)
  {
    if (v3 > v5)
    {
      v6 = *(unsigned __int16 *)(v4 + 2 * v5);
      v7 = (v6 & 0xFC00) == 56320;
      v8 = v6 + ((_DWORD)this << 10) - 56613888;
      if (v7)
        return v8;
      else
        return this;
    }
    goto LABEL_15;
  }
  return this;
}

uint64_t *WTF::String::left(uint64_t *this, WTF::StringImpl *a2, unsigned int a3)
{
  if (a2)
  {
    if (*((_DWORD *)a2 + 1) <= a3)
    {
      *(_DWORD *)a2 += 2;
      *this = (uint64_t)a2;
    }
    else
    {
      return WTF::StringImpl::substring(a2, 0, a3, this);
    }
  }
  else
  {
    *this = 0;
  }
  return this;
}

uint64_t JSC::computeTwoCharacters16Code<WTF::String>(WTF::StringImpl **a1)
{
  WTF::StringImpl *v1;
  int v2;
  WTF::StringImpl *v5;
  int v6;

  v1 = *a1;
  if (*a1)
  {
    v2 = *((_DWORD *)v1 + 1);
    if (v2)
    {
      v6 = WTF::StringImpl::at(*a1, 0);
      v5 = *a1;
      if (*a1 && *((_DWORD *)v5 + 1) >= 2u)
        LODWORD(v1) = WTF::StringImpl::at(v5, 1u) << 16;
      else
        LODWORD(v1) = 0;
      v2 = v6;
    }
    else
    {
      LODWORD(v1) = 0;
    }
  }
  else
  {
    v2 = 0;
  }
  return v1 | v2;
}

void WTF::Vector<char16_t,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::growImpl<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= a2)
  {
LABEL_2:
    *(_DWORD *)(a1 + 12) = v2;
    return;
  }
  v5 = v4 + (v4 >> 2);
  if (v5 >= 0x10)
    v6 = v5 + 1;
  else
    v6 = 16;
  if (v6 <= a2)
    v7 = a2;
  else
    v7 = v6;
  if (!(v7 >> 31))
  {
    v8 = *(const void **)a1;
    v9 = *(unsigned int *)(a1 + 12);
    v10 = (void *)WTF::fastMalloc((WTF *)(2 * v7));
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)a1 = v10;
    memcpy(v10, v8, 2 * v9);
    if (v8)
    {
      if (*(const void **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((unint64_t)v8, v11, v12, v13, v14, v15, v16, v17);
    }
    goto LABEL_2;
  }
  __break(0xC471u);
}

